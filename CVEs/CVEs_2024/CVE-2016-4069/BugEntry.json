{"buggy_code": ["/* Enigma Plugin */\n\nwindow.rcmail && rcmail.addEventListener('init', function(evt) {\n    if (rcmail.env.task == 'settings') {\n        rcmail.register_command('plugin.enigma', function() { rcmail.goto_url('plugin.enigma') }, true);\n\n        if (rcmail.gui_objects.keyslist) {\n            rcmail.keys_list = new rcube_list_widget(rcmail.gui_objects.keyslist,\n                {multiselect:true, draggable:false, keyboard:false});\n            rcmail.keys_list\n                .addEventListener('select', function(o) { rcmail.enigma_keylist_select(o); })\n                .addEventListener('keypress', function(o) { rcmail.enigma_keylist_keypress(o); })\n                .init()\n                .focus();\n\n            rcmail.enigma_list();\n\n            rcmail.register_command('firstpage', function(props) { return rcmail.enigma_list_page('first'); });\n            rcmail.register_command('previouspage', function(props) { return rcmail.enigma_list_page('previous'); });\n            rcmail.register_command('nextpage', function(props) { return rcmail.enigma_list_page('next'); });\n            rcmail.register_command('lastpage', function(props) { return rcmail.enigma_list_page('last'); });\n        }\n\n        if (rcmail.env.action == 'plugin.enigmakeys') {\n            rcmail.register_command('search', function(props) {return rcmail.enigma_search(props); }, true);\n            rcmail.register_command('reset-search', function(props) {return rcmail.enigma_search_reset(props); }, true);\n            rcmail.register_command('plugin.enigma-import', function() { rcmail.enigma_import(); }, true);\n            rcmail.register_command('plugin.enigma-key-export', function() { rcmail.enigma_export(); });\n            rcmail.register_command('plugin.enigma-key-export-selected', function() { rcmail.enigma_export(true); });\n            rcmail.register_command('plugin.enigma-key-import', function() { rcmail.enigma_key_import(); }, true);\n            rcmail.register_command('plugin.enigma-key-delete', function(props) { return rcmail.enigma_delete(); });\n            rcmail.register_command('plugin.enigma-key-create', function(props) { return rcmail.enigma_key_create(); }, true);\n            rcmail.register_command('plugin.enigma-key-save', function(props) { return rcmail.enigma_key_create_save(); }, true);\n\n            rcmail.addEventListener('responseafterplugin.enigmakeys', function() {\n                rcmail.enable_command('plugin.enigma-key-export', rcmail.env.rowcount > 0);\n            });\n        }\n    }\n    else if (rcmail.env.task == 'mail') {\n        if (rcmail.env.action == 'compose') {\n            rcmail.addEventListener('beforesend', function(props) { rcmail.enigma_beforesend_handler(props); })\n                .addEventListener('beforesavedraft', function(props) { rcmail.enigma_beforesavedraft_handler(props); });\n\n            $('input,label', $('#enigmamenu')).mouseup(function(e) {\n                // don't close the menu on mouse click inside\n                e.stopPropagation();\n            });\n        }\n\n        $.each(['encrypt', 'sign'], function() {\n            if (rcmail.env['enigma_force_' + this])\n                $('[name=\"_enigma_' + this + '\"]').prop('checked', true);\n        });\n\n        if (rcmail.env.enigma_password_request) {\n            rcmail.enigma_password_request(rcmail.env.enigma_password_request);\n        }\n    }\n});\n\n\n/*********************************************************/\n/*********    Enigma Settings/Keys/Certs UI      *********/\n/*********************************************************/\n\n// Display key(s) import form\nrcube_webmail.prototype.enigma_key_import = function()\n{\n    this.enigma_loadframe('&_action=plugin.enigmakeys&_a=import');\n};\n\n// Display key(s) generation form\nrcube_webmail.prototype.enigma_key_create = function()\n{\n    this.enigma_loadframe('&_action=plugin.enigmakeys&_a=create');\n};\n\n// Generate key(s) and submit them\nrcube_webmail.prototype.enigma_key_create_save = function()\n{\n    var options, lock,\n        user = $('#key-ident > option').filter(':selected').text(),\n        password = $('#key-pass').val(),\n        confirm = $('#key-pass-confirm').val(),\n        size = $('#key-size').val();\n\n    // validate the form\n    if (!password || !confirm)\n        return alert(this.get_label('enigma.formerror'));\n\n    if (password != confirm)\n        return alert(this.get_label('enigma.passwordsdiffer'));\n\n    if (user.match(/^<[^>]+>$/))\n        return alert(this.get_label('enigma.nonameident'));\n\n    // generate keys\n    // use OpenPGP.js if browser supports required features\n    if (window.openpgp && window.crypto && (window.crypto.getRandomValues || window.crypto.subtle)) {\n        lock = this.set_busy(true, 'enigma.keygenerating');\n        options = {\n            numBits: size,\n            userId: user,\n            passphrase: password\n        };\n\n        openpgp.generateKeyPair(options).then(function(keypair) {\n            // success\n            var post = {_a: 'import', _keys: keypair.privateKeyArmored};\n\n            // send request to server\n            rcmail.http_post('plugin.enigmakeys', post, lock);\n        }, function(error) {\n            // failure\n            rcmail.set_busy(false, null, lock);\n            rcmail.display_message(rcmail.get_label('enigma.keygenerateerror'), 'error');\n        });\n    }\n    // generate keys on the server\n    else if (rcmail.env.enigma_keygen_server) {\n        lock = this.set_busy(true, 'enigma.keygenerating');\n        options = {_a: 'generate', _user: user, _password: password, _size: size};\n        rcmail.http_post('plugin.enigmakeys', options, lock);\n    }\n    else {\n        rcmail.display_message(rcmail.get_label('enigma.keygennosupport'), 'error');\n    }\n};\n\n// Action executed after successful key generation and import\nrcube_webmail.prototype.enigma_key_create_success = function()\n{\n    parent.rcmail.enigma_list(1);\n};\n\n// Delete key(s)\nrcube_webmail.prototype.enigma_delete = function()\n{\n    var keys = this.keys_list.get_selection();\n\n    if (!keys.length || !confirm(this.get_label('enigma.keyremoveconfirm')))\n        return;\n\n    var lock = this.display_message(this.get_label('enigma.keyremoving'), 'loading'),\n        post = {_a: 'delete', _keys: keys};\n\n    // send request to server\n    this.http_post('plugin.enigmakeys', post, lock);\n};\n\n// Export key(s)\nrcube_webmail.prototype.enigma_export = function(selected)\n{\n    var keys = selected ? this.keys_list.get_selection().join(',') : '*';\n\n    if (!keys.length)\n        return;\n\n    this.goto_url('plugin.enigmakeys', {_a: 'export', _keys: keys});\n};\n\n// Submit key(s) import form\nrcube_webmail.prototype.enigma_import = function()\n{\n    var form, file;\n\n    if (form = this.gui_objects.importform) {\n        file = document.getElementById('rcmimportfile');\n        if (file && !file.value) {\n            alert(this.get_label('selectimportfile'));\n            return;\n        }\n\n        var lock = this.set_busy(true, 'importwait');\n\n        form.action = this.add_url(form.action, '_unlock', lock);\n        form.submit();\n\n        this.lock_form(form, true);\n   }\n};\n\n// list row selection handler\nrcube_webmail.prototype.enigma_keylist_select = function(list)\n{\n    var id = list.get_single_selection(), url;\n\n    if (id)\n        url = '&_action=plugin.enigmakeys&_a=info&_id=' + id;\n\n    this.enigma_loadframe(url);\n    this.enable_command('plugin.enigma-key-delete', 'plugin.enigma-key-export-selected', list.selection.length > 0);\n};\n\nrcube_webmail.prototype.enigma_keylist_keypress = function(list)\n{\n    if (list.modkey == CONTROL_KEY)\n        return;\n\n    if (list.key_pressed == list.DELETE_KEY || list.key_pressed == list.BACKSPACE_KEY)\n        this.command('plugin.enigma-key-delete');\n    else if (list.key_pressed == 33)\n        this.command('previouspage');\n    else if (list.key_pressed == 34)\n        this.command('nextpage');\n};\n\n// load key frame\nrcube_webmail.prototype.enigma_loadframe = function(url)\n{\n    var frm, win;\n\n    if (this.env.contentframe && window.frames && (frm = window.frames[this.env.contentframe])) {\n        if (!url && (win = window.frames[this.env.contentframe])) {\n            if (win.location && win.location.href.indexOf(this.env.blankpage) < 0)\n                win.location.href = this.env.blankpage;\n            return;\n        }\n\n        this.env.frame_lock = this.set_busy(true, 'loading');\n        frm.location.href = this.env.comm_path + '&_framed=1&' + url;\n    }\n};\n\n// Search keys/certs\nrcube_webmail.prototype.enigma_search = function(props)\n{\n    if (!props && this.gui_objects.qsearchbox)\n        props = this.gui_objects.qsearchbox.value;\n\n    if (props || this.env.search_request) {\n        var params = {'_a': 'search', '_q': urlencode(props)},\n          lock = this.set_busy(true, 'searching');\n//        if (this.gui_objects.search_filter)\n  //          addurl += '&_filter=' + this.gui_objects.search_filter.value;\n        this.env.current_page = 1;\n        this.enigma_loadframe();\n        this.enigma_clear_list();\n        this.http_post('plugin.enigmakeys', params, lock);\n    }\n\n    return false;\n}\n\n// Reset search filter and the list\nrcube_webmail.prototype.enigma_search_reset = function(props)\n{\n    var s = this.env.search_request;\n    this.reset_qsearch();\n\n    if (s) {\n        this.enigma_loadframe();\n        this.enigma_clear_list();\n\n        // refresh the list\n        this.enigma_list();\n    }\n\n    return false;\n}\n\n// Keys/certs listing\nrcube_webmail.prototype.enigma_list = function(page)\n{\n    var params = {'_a': 'list'},\n      lock = this.set_busy(true, 'loading');\n\n    this.env.current_page = page ? page : 1;\n\n    if (this.env.search_request)\n        params._q = this.env.search_request;\n    if (page)\n        params._p = page;\n\n    this.enigma_clear_list();\n    this.http_post('plugin.enigmakeys', params, lock);\n}\n\n// Change list page\nrcube_webmail.prototype.enigma_list_page = function(page)\n{\n    if (page == 'next')\n        page = this.env.current_page + 1;\n    else if (page == 'last')\n        page = this.env.pagecount;\n    else if (page == 'prev' && this.env.current_page > 1)\n        page = this.env.current_page - 1;\n    else if (page == 'first' && this.env.current_page > 1)\n        page = 1;\n\n    this.enigma_list(page);\n}\n\n// Remove list rows\nrcube_webmail.prototype.enigma_clear_list = function()\n{\n    this.enigma_loadframe();\n    if (this.keys_list)\n        this.keys_list.clear(true);\n\n    this.enable_command('plugin.enigma-key-delete', 'plugin.enigma-key-delete-selected', false);\n}\n\n// Adds a row to the list\nrcube_webmail.prototype.enigma_add_list_row = function(r)\n{\n    if (!this.gui_objects.keyslist || !this.keys_list)\n        return false;\n\n    var list = this.keys_list,\n        tbody = this.gui_objects.keyslist.tBodies[0],\n        rowcount = tbody.rows.length,\n        even = rowcount%2,\n        css_class = 'message'\n            + (even ? ' even' : ' odd'),\n        // for performance use DOM instead of jQuery here\n        row = document.createElement('tr'),\n        col = document.createElement('td');\n\n    row.id = 'rcmrow' + r.id;\n    row.className = css_class;\n\n    col.innerHTML = r.name;\n    row.appendChild(col);\n    list.insert_row(row);\n}\n\n\n/*********************************************************/\n/*********        Enigma Message methods         *********/\n/*********************************************************/\n\n// handle message send/save action\nrcube_webmail.prototype.enigma_beforesend_handler = function(props)\n{\n    this.env.last_action = 'send';\n    this.enigma_compose_handler(props);\n}\n\nrcube_webmail.prototype.enigma_beforesavedraft_handler = function(props)\n{\n    this.env.last_action = 'savedraft';\n    this.enigma_compose_handler(props);\n}\n\nrcube_webmail.prototype.enigma_compose_handler = function(props)\n{\n    var form = this.gui_objects.messageform;\n\n    // copy inputs from enigma menu to the form\n    $('#enigmamenu input').each(function() {\n        var id = this.id + '_cpy', input = $('#' + id);\n\n        if (!input.length) {\n            input = $(this).clone();\n            input.prop({id: id, type: 'hidden'}).appendTo(form);\n        }\n\n        input.val(this.checked ? '1' : '');\n    });\n\n    // disable signing when saving drafts\n    if (this.env.last_action == 'savedraft') {\n        $('input[name=\"_enigma_sign\"]', form).val(0);\n    }\n}\n\n// Import attached keys/certs file\nrcube_webmail.prototype.enigma_import_attachment = function(mime_id)\n{\n    var lock = this.set_busy(true, 'loading'),\n        post = {_uid: this.env.uid, _mbox: this.env.mailbox, _part: mime_id};\n\n    this.http_post('plugin.enigmaimport', post, lock);\n\n    return false;\n}\n\n// password request popup\nrcube_webmail.prototype.enigma_password_request = function(data)\n{\n    if (!data || !data.keyid) {\n        return;\n    }\n\n    var ref = this,\n        msg = this.get_label('enigma.enterkeypass'),\n        myprompt = $('<div class=\"prompt\">'),\n        myprompt_content = $('<div class=\"message\">')\n            .appendTo(myprompt),\n        myprompt_input = $('<input>').attr({type: 'password', size: 30})\n            .keypress(function(e) {\n                if (e.which == 13)\n                    (ref.is_framed() ? window.parent.$ : $)('.ui-dialog-buttonpane button.mainaction:visible').click();\n            })\n            .appendTo(myprompt);\n\n    data.key = data.keyid;\n    if (data.keyid.length > 8)\n        data.keyid = data.keyid.substr(data.keyid.length - 8);\n\n    $.each(['keyid', 'user'], function() {\n        msg = msg.replace('$' + this, data[this]);\n    });\n\n    myprompt_content.text(msg);\n\n    this.show_popup_dialog(myprompt, this.get_label('enigma.enterkeypasstitle'),\n        [{\n            text: this.get_label('save'),\n            'class': 'mainaction',\n            click: function(e) {\n                e.stopPropagation();\n\n                var jq = ref.is_framed() ? window.parent.$ : $;\n\n                data.password = myprompt_input.val();\n\n                if (!data.password) {\n                    myprompt_input.focus();\n                    return;\n                }\n\n                ref.enigma_password_submit(data);\n                jq(this).remove();\n            }\n        },\n        {\n            text: this.get_label('cancel'),\n            click: function(e) {\n                var jq = ref.is_framed() ? window.parent.$ : $;\n                e.stopPropagation();\n                jq(this).remove();\n            }\n        }], {width: 400});\n\n    if (this.is_framed() && parent.rcmail.message_list) {\n        // this fixes bug when pressing Enter on \"Save\" button in the dialog\n        parent.rcmail.message_list.blur();\n    }\n}\n\n// submit entered password\nrcube_webmail.prototype.enigma_password_submit = function(data)\n{\n    if (this.env.action == 'compose' && !data['compose-init']) {\n        return this.enigma_password_compose_submit(data);\n    }\n\n    var lock = this.set_busy(true, 'loading');\n\n    // message preview\n    var form = $('<form>').attr({method: 'post', action: location.href, style: 'display:none'})\n        .append($('<input>').attr({type: 'hidden', name: '_keyid', value: data.key}))\n        .append($('<input>').attr({type: 'hidden', name: '_passwd', value: data.password}))\n        .append($('<input>').attr({type: 'hidden', name: '_token', value: this.env.request_token}))\n        .append($('<input>').attr({type: 'hidden', name: '_unlock', value: lock}))\n        .appendTo(document.body);\n\n    form.submit();\n}\n\n// submit entered password - in mail compose page\nrcube_webmail.prototype.enigma_password_compose_submit = function(data)\n{\n    var form = this.gui_objects.messageform;\n\n    if (!$('input[name=\"_keyid\"]', form).length) {\n        $(form).append($('<input>').attr({type: 'hidden', name: '_keyid', value: data.key}))\n            .append($('<input>').attr({type: 'hidden', name: '_passwd', value: data.password}));\n    }\n    else {\n        $('input[name=\"_keyid\"]', form).val(data.key);\n        $('input[name=\"_passwd\"]', form).val(data.password);\n    }\n\n    this.submit_messageform(this.env.last_action == 'savedraft');\n}\n", "<?php\n\n/**\n +-------------------------------------------------------------------------+\n | User Interface for the Enigma Plugin                                    |\n |                                                                         |\n | Copyright (C) 2010-2015 The Roundcube Dev Team                          |\n |                                                                         |\n | Licensed under the GNU General Public License version 3 or              |\n | any later version with exceptions for skins & plugins.                  |\n | See the README file for a full license statement.                       |\n |                                                                         |\n +-------------------------------------------------------------------------+\n | Author: Aleksander Machniak <alec@alec.pl>                              |\n +-------------------------------------------------------------------------+\n*/\n\nclass enigma_ui\n{\n    private $rc;\n    private $enigma;\n    private $home;\n    private $css_loaded;\n    private $js_loaded;\n    private $data;\n    private $keys_parts  = array();\n    private $keys_bodies = array();\n\n\n    function __construct($enigma_plugin, $home='')\n    {\n        $this->enigma = $enigma_plugin;\n        $this->rc     = $enigma_plugin->rc;\n        $this->home   = $home; // we cannot use $enigma_plugin->home here\n    }\n\n    /**\n     * UI initialization and requests handlers.\n     *\n     * @param string Preferences section\n     */\n    function init()\n    {\n        $this->add_js();\n\n        $action = rcube_utils::get_input_value('_a', rcube_utils::INPUT_GPC);\n\n        if ($this->rc->action == 'plugin.enigmakeys') {\n            switch ($action) {\n                case 'delete':\n                    $this->key_delete();\n                    break;\n/*\n                case 'edit':\n                    $this->key_edit();\n                    break;\n*/\n                case 'import':\n                    $this->key_import();\n                    break;\n\n                case 'export':\n                    $this->key_export();\n                    break;\n\n                case 'generate':\n                    $this->key_generate();\n                    break;\n\n                case 'create':\n                    $this->key_create();\n                    break;\n\n                case 'search':\n                case 'list':\n                    $this->key_list();\n                    break;\n\n                case 'info':\n                    $this->key_info();\n                    break;\n            }\n\n            $this->rc->output->add_handlers(array(\n                    'keyslist'     => array($this, 'tpl_keys_list'),\n                    'keyframe'     => array($this, 'tpl_key_frame'),\n                    'countdisplay' => array($this, 'tpl_keys_rowcount'),\n                    'searchform'   => array($this->rc->output, 'search_form'),\n            ));\n\n            $this->rc->output->set_pagetitle($this->enigma->gettext('enigmakeys'));\n            $this->rc->output->send('enigma.keys');\n        }\n/*\n        // Preferences UI\n        else if ($this->rc->action == 'plugin.enigmacerts') {\n            $this->rc->output->add_handlers(array(\n                    'keyslist'     => array($this, 'tpl_certs_list'),\n                    'keyframe'     => array($this, 'tpl_cert_frame'),\n                    'countdisplay' => array($this, 'tpl_certs_rowcount'),\n                    'searchform'   => array($this->rc->output, 'search_form'),\n            ));\n\n            $this->rc->output->set_pagetitle($this->enigma->gettext('enigmacerts'));\n            $this->rc->output->send('enigma.certs'); \n        }\n*/\n        // Message composing UI\n        else if ($this->rc->action == 'compose') {\n            $this->compose_ui();\n        }\n    }\n\n    /**\n     * Adds CSS style file to the page header.\n     */\n    function add_css()\n    {\n        if ($this->css_loaded)\n            return;\n\n        $skin_path = $this->enigma->local_skin_path();\n        if (is_file($this->home . \"/$skin_path/enigma.css\")) {\n            $this->enigma->include_stylesheet(\"$skin_path/enigma.css\");\n        }\n\n        $this->css_loaded = true;\n    }\n\n    /**\n     * Adds javascript file to the page header.\n     */\n    function add_js()\n    {\n        if ($this->js_loaded) {\n            return;\n        }\n\n        $this->enigma->include_script('enigma.js');\n\n        $this->js_loaded = true;\n    }\n\n    /**\n     * Initializes key password prompt\n     *\n     * @param enigma_error $status Error object with key info\n     * @param array        $params Optional prompt parameters\n     */\n    function password_prompt($status, $params = array())\n    {\n        $data = $status->getData('missing');\n\n        if (empty($data)) {\n            $data = $status->getData('bad');\n        }\n\n        $data = array('keyid' => key($data), 'user' => $data[key($data)]);\n\n        if (!empty($params)) {\n            $data = array_merge($params, $data);\n        }\n\n        if ($this->rc->action == 'send') {\n            $this->rc->output->command('enigma_password_request', $data);\n        }\n        else {\n            $this->rc->output->set_env('enigma_password_request', $data);\n        }\n\n        // add some labels to client\n        $this->rc->output->add_label('enigma.enterkeypasstitle', 'enigma.enterkeypass',\n            'save', 'cancel');\n\n        $this->add_css();\n        $this->add_js();\n    }\n\n    /**\n     * Template object for key info/edit frame.\n     *\n     * @param array Object attributes\n     *\n     * @return string HTML output\n     */\n    function tpl_key_frame($attrib)\n    {\n        if (!$attrib['id']) {\n            $attrib['id'] = 'rcmkeysframe';\n        }\n\n        $attrib['name'] = $attrib['id'];\n\n        $this->rc->output->set_env('contentframe', $attrib['name']);\n        $this->rc->output->set_env('blankpage', $attrib['src'] ?\n            $this->rc->output->abs_url($attrib['src']) : 'program/resources/blank.gif');\n\n        return $this->rc->output->frame($attrib);\n    }\n\n    /**\n     * Template object for list of keys.\n     *\n     * @param array Object attributes\n     *\n     * @return string HTML content\n     */\n    function tpl_keys_list($attrib)\n    {\n        // add id to message list table if not specified\n        if (!strlen($attrib['id'])) {\n            $attrib['id'] = 'rcmenigmakeyslist';\n        }\n\n        // define list of cols to be displayed\n        $a_show_cols = array('name');\n\n        // create XHTML table\n        $out = $this->rc->table_output($attrib, array(), $a_show_cols, 'id');\n\n        // set client env\n        $this->rc->output->add_gui_object('keyslist', $attrib['id']);\n        $this->rc->output->include_script('list.js');\n\n        // add some labels to client\n        $this->rc->output->add_label('enigma.keyremoveconfirm', 'enigma.keyremoving');\n\n        return $out;\n    }\n\n    /**\n     * Key listing (and searching) request handler\n     */\n    private function key_list()\n    {\n        $this->enigma->load_engine();\n\n        $pagesize = $this->rc->config->get('pagesize', 100);\n        $page     = max(intval(rcube_utils::get_input_value('_p', rcube_utils::INPUT_GPC)), 1);\n        $search   = rcube_utils::get_input_value('_q', rcube_utils::INPUT_GPC);\n\n        // Get the list\n        $list = $this->enigma->engine->list_keys($search);\n\n        if ($list && ($list instanceof enigma_error))\n            $this->rc->output->show_message('enigma.keylisterror', 'error');\n        else if (empty($list))\n            $this->rc->output->show_message('enigma.nokeysfound', 'notice');\n        else if (is_array($list)) {\n            // Save the size\n            $listsize = count($list);\n\n            // Sort the list by key (user) name\n            usort($list, array('enigma_key', 'cmp'));\n\n            // Slice current page\n            $list = array_slice($list, ($page - 1) * $pagesize, $pagesize);\n            $size = count($list);\n\n            // Add rows\n            foreach ($list as $key) {\n                $this->rc->output->command('enigma_add_list_row',\n                    array('name' => rcube::Q($key->name), 'id' => $key->id));\n            }\n        }\n\n        $this->rc->output->set_env('rowcount', $size);\n        $this->rc->output->set_env('search_request', $search);\n        $this->rc->output->set_env('pagecount', ceil($listsize/$pagesize));\n        $this->rc->output->set_env('current_page', $page);\n        $this->rc->output->command('set_rowcount',\n            $this->get_rowcount_text($listsize, $size, $page));\n\n        $this->rc->output->send();\n    }\n\n    /**\n     * Template object for list records counter.\n     *\n     * @param array Object attributes\n     *\n     * @return string HTML output\n     */\n    function tpl_keys_rowcount($attrib)\n    {\n        if (!$attrib['id'])\n            $attrib['id'] = 'rcmcountdisplay';\n\n        $this->rc->output->add_gui_object('countdisplay', $attrib['id']);\n\n        return html::span($attrib, $this->get_rowcount_text());\n    }\n\n    /**\n     * Returns text representation of list records counter\n     */\n    private function get_rowcount_text($all=0, $curr_count=0, $page=1)\n    {\n        if (!$curr_count) {\n            $out = $this->enigma->gettext('nokeysfound');\n        }\n        else {\n            $pagesize = $this->rc->config->get('pagesize', 100);\n            $first    = ($page - 1) * $pagesize;\n\n            $out = $this->enigma->gettext(array(\n                'name' => 'keysfromto',\n                'vars' => array(\n                    'from'  => $first + 1,\n                    'to'    => $first + $curr_count,\n                    'count' => $all)\n            ));\n        }\n\n        return $out;\n    }\n\n    /**\n     * Key information page handler\n     */\n    private function key_info()\n    {\n        $this->enigma->load_engine();\n\n        $id  = rcube_utils::get_input_value('_id', rcube_utils::INPUT_GET);\n        $res = $this->enigma->engine->get_key($id);\n\n        if ($res instanceof enigma_key) {\n            $this->data = $res;\n        }\n        else { // error\n            $this->rc->output->show_message('enigma.keyopenerror', 'error');\n            $this->rc->output->command('parent.enigma_loadframe');\n            $this->rc->output->send('iframe');\n        }\n\n        $this->rc->output->add_handlers(array(\n            'keyname' => array($this, 'tpl_key_name'),\n            'keydata' => array($this, 'tpl_key_data'),\n        ));\n\n        $this->rc->output->set_pagetitle($this->enigma->gettext('keyinfo'));\n        $this->rc->output->send('enigma.keyinfo');\n    }\n\n    /**\n     * Template object for key name\n     */\n    function tpl_key_name($attrib)\n    {\n        return rcube::Q($this->data->name);\n    }\n\n    /**\n     * Template object for key information page content\n     */\n    function tpl_key_data($attrib)\n    {\n        $out   = '';\n        $table = new html_table(array('cols' => 2));\n\n        // Key user ID\n        $table->add('title', $this->enigma->gettext('keyuserid'));\n        $table->add(null, rcube::Q($this->data->name));\n\n        // Key ID\n        $table->add('title', $this->enigma->gettext('keyid'));\n        $table->add(null, $this->data->subkeys[0]->get_short_id());\n\n        // Key type\n        $keytype = $this->data->get_type();\n        if ($keytype == enigma_key::TYPE_KEYPAIR) {\n            $type = $this->enigma->gettext('typekeypair');\n        }\n        else if ($keytype == enigma_key::TYPE_PUBLIC) {\n            $type = $this->enigma->gettext('typepublickey');\n        }\n        $table->add('title', $this->enigma->gettext('keytype'));\n        $table->add(null, $type);\n\n        // Key fingerprint\n        $table->add('title', $this->enigma->gettext('fingerprint'));\n        $table->add(null, $this->data->subkeys[0]->get_fingerprint());\n\n        $out .= html::tag('fieldset', null,\n            html::tag('legend', null,\n                $this->enigma->gettext('basicinfo')) . $table->show($attrib));\n\n        // Subkeys\n        $table = new html_table(array('cols' => 5, 'id' => 'enigmasubkeytable', 'class' => 'records-table'));\n\n        $table->add_header('id', $this->enigma->gettext('subkeyid'));\n        $table->add_header('algo', $this->enigma->gettext('subkeyalgo'));\n        $table->add_header('created', $this->enigma->gettext('subkeycreated'));\n        $table->add_header('expires', $this->enigma->gettext('subkeyexpires'));\n        $table->add_header('usage', $this->enigma->gettext('subkeyusage'));\n\n        $now         = time();\n        $date_format = $this->rc->config->get('date_format', 'Y-m-d');\n        $usage_map   = array(\n            enigma_key::CAN_ENCRYPT      => $this->enigma->gettext('typeencrypt'),\n            enigma_key::CAN_SIGN         => $this->enigma->gettext('typesign'),\n            enigma_key::CAN_CERTIFY      => $this->enigma->gettext('typecert'),\n            enigma_key::CAN_AUTHENTICATE => $this->enigma->gettext('typeauth'),\n        );\n\n        foreach ($this->data->subkeys as $subkey) {\n            $algo = $subkey->get_algorithm();\n            if ($algo && $subkey->length) {\n                $algo .= ' (' . $subkey->length . ')';\n            }\n\n            $usage = array();\n            foreach ($usage_map as $key => $text) {\n                if ($subkey->usage & $key) {\n                    $usage[] = $text;\n                }\n            }\n\n            $table->add('id', $subkey->get_short_id());\n            $table->add('algo', $algo);\n            $table->add('created', $subkey->created ? $this->rc->format_date($subkey->created, $date_format, false) : '');\n            $table->add('expires', $subkey->expires ? $this->rc->format_date($subkey->expires, $date_format, false) : $this->enigma->gettext('expiresnever'));\n            $table->add('usage', implode(',', $usage));\n            $table->set_row_attribs($subkey->revoked || ($subkey->expires && $subkey->expires < $now) ? 'deleted' : '');\n        }\n\n        $out .= html::tag('fieldset', null,\n            html::tag('legend', null,\n                $this->enigma->gettext('subkeys')) . $table->show());\n\n        // Additional user IDs\n        $table = new html_table(array('cols' => 2, 'id' => 'enigmausertable', 'class' => 'records-table'));\n\n        $table->add_header('id', $this->enigma->gettext('userid'));\n        $table->add_header('valid', $this->enigma->gettext('uservalid'));\n\n        foreach ($this->data->users as $user) {\n            $username = $user->name;\n            if ($user->comment) {\n                $username .= ' (' . $user->comment . ')';\n            }\n            $username .= ' <' . $user->email . '>';\n\n            $table->add('id', rcube::Q(trim($username)));\n            $table->add('valid', $this->enigma->gettext($user->valid ? 'valid' : 'unknown'));\n            $table->set_row_attribs($user->revoked || !$user->valid ? 'deleted' : '');\n        }\n\n        $out .= html::tag('fieldset', null,\n            html::tag('legend', null,\n                $this->enigma->gettext('userids')) . $table->show());\n\n        return $out;\n    }\n\n    /**\n     * Key(s) export handler\n     */\n    private function key_export()\n    {\n        $keys   = rcube_utils::get_input_value('_keys', rcube_utils::INPUT_GPC);\n        $engine = $this->enigma->load_engine();\n        $list   = $keys == '*' ? $engine->list_keys() : explode(',', $keys);\n\n        if (is_array($list)) {\n            $filename = 'export.pgp';\n            if (count($list) == 1) {\n                $filename = (is_object($list[0]) ? $list[0]->id : $list[0]) . '.pgp';\n            }\n\n            // send downlaod headers\n            header('Content-Type: application/pgp-keys');\n            header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n\n            if ($fp = fopen('php://output', 'w')) {\n                foreach ($list as $key) {\n                    $engine->export_key(is_object($key) ? $key->id : $key, $fp);\n                }\n            }\n        }\n\n        exit;\n    }\n\n    /**\n     * Key import (page) handler\n     */\n    private function key_import()\n    {\n        // Import process\n        if ($data = rcube_utils::get_input_value('_keys', rcube_utils::INPUT_POST)) {\n            // Import from generation form (ajax request)\n            $this->enigma->load_engine();\n            $result = $this->enigma->engine->import_key($data);\n\n            if (is_array($result)) {\n                $this->rc->output->command('enigma_key_create_success');\n                $this->rc->output->show_message('enigma.keygeneratesuccess', 'confirmation');\n            }\n            else {\n                $this->rc->output->show_message('enigma.keysimportfailed', 'error');\n            }\n\n            $this->rc->output->send();\n        }\n        else if ($_FILES['_file']['tmp_name'] && is_uploaded_file($_FILES['_file']['tmp_name'])) {\n            $this->enigma->load_engine();\n            $result = $this->enigma->engine->import_key($_FILES['_file']['tmp_name'], true);\n\n            if (is_array($result)) {\n                // reload list if any keys has been added\n                if ($result['imported']) {\n                    $this->rc->output->command('parent.enigma_list', 1);\n                }\n                else {\n                    $this->rc->output->command('parent.enigma_loadframe');\n                }\n\n                $this->rc->output->show_message('enigma.keysimportsuccess', 'confirmation',\n                    array('new' => $result['imported'], 'old' => $result['unchanged']));\n\n                $this->rc->output->send('iframe');\n            }\n            else {\n                $this->rc->output->show_message('enigma.keysimportfailed', 'error');\n            }\n        }\n        else if ($err = $_FILES['_file']['error']) {\n            if ($err == UPLOAD_ERR_INI_SIZE || $err == UPLOAD_ERR_FORM_SIZE) {\n                $this->rc->output->show_message('filesizeerror', 'error',\n                    array('size' => $this->rc->show_bytes(parse_bytes(ini_get('upload_max_filesize')))));\n            } else {\n                $this->rc->output->show_message('fileuploaderror', 'error');\n            }\n        }\n\n        $this->rc->output->add_handlers(array(\n            'importform' => array($this, 'tpl_key_import_form'),\n        ));\n\n        $this->rc->output->set_pagetitle($this->enigma->gettext('keyimport'));\n        $this->rc->output->send('enigma.keyimport');\n    }\n\n    /**\n     * Template object for key import (upload) form\n     */\n    function tpl_key_import_form($attrib)\n    {\n        $attrib += array('id' => 'rcmKeyImportForm');\n\n        $upload = new html_inputfield(array('type' => 'file', 'name' => '_file',\n            'id' => 'rcmimportfile', 'size' => 30));\n\n        $form = html::p(null,\n            rcube::Q($this->enigma->gettext('keyimporttext'), 'show')\n            . html::br() . html::br() . $upload->show()\n        );\n\n        $this->rc->output->add_label('selectimportfile', 'importwait');\n        $this->rc->output->add_gui_object('importform', $attrib['id']);\n\n        $out = $this->rc->output->form_tag(array(\n            'action' => $this->rc->url(array('action' => $this->rc->action, 'a' => 'import')),\n            'method' => 'post',\n            'enctype' => 'multipart/form-data') + $attrib,\n            $form);\n\n        return $out;\n    }\n\n    /**\n     * Server-side key pair generation handler\n     */\n    private function key_generate()\n    {\n        $user = rcube_utils::get_input_value('_user', rcube_utils::INPUT_POST, true);\n        $pass = rcube_utils::get_input_value('_password', rcube_utils::INPUT_POST, true);\n        $size = (int) rcube_utils::get_input_value('_size', rcube_utils::INPUT_POST);\n\n        if ($size > 4096) {\n            $size = 4096;\n        }\n\n        $ident = rcube_mime::decode_address_list($user, 1, false);\n\n        if (empty($ident)) {\n            $this->rc->output->show_message('enigma.keygenerateerror', 'error');\n            $this->rc->output->send();\n        }\n\n        $this->enigma->load_engine();\n        $result = $this->enigma->engine->generate_key(array(\n            'user'     => $ident[1]['name'],\n            'email'    => $ident[1]['mailto'],\n            'password' => $pass,\n            'size'     => $size,\n        ));\n\n        if ($result instanceof enigma_key) {\n            $this->rc->output->command('enigma_key_create_success');\n            $this->rc->output->show_message('enigma.keygeneratesuccess', 'confirmation');\n        }\n        else {\n            $this->rc->output->show_message('enigma.keygenerateerror', 'error');\n        }\n\n        $this->rc->output->send();\n    }\n\n    /**\n     * Key generation page handler\n     */\n    private function key_create()\n    {\n        $this->enigma->include_script('openpgp.min.js');\n\n        $this->rc->output->add_handlers(array(\n            'keyform' => array($this, 'tpl_key_create_form'),\n        ));\n\n        $this->rc->output->set_env('enigma_keygen_server', $this->rc->config->get('enigma_keygen_server'));\n\n        $this->rc->output->set_pagetitle($this->enigma->gettext('keygenerate'));\n        $this->rc->output->send('enigma.keycreate');\n    }\n\n    /**\n     * Template object for key generation form\n     */\n    function tpl_key_create_form($attrib)\n    {\n        $attrib += array('id' => 'rcmKeyCreateForm');\n        $table  = new html_table(array('cols' => 2));\n\n        // get user's identities\n        $identities = $this->rc->user->list_identities(null, true);\n\n        // Identity\n        $select = new html_select(array('name' => 'identity', 'id' => 'key-ident'));\n        foreach ((array) $identities as $idx => $ident) {\n            $name = empty($ident['name']) ? ('<' . $ident['email'] . '>') : $ident['ident'];\n            $select->add($name, $idx);\n        }\n\n        $table->add('title', html::label('key-name', rcube::Q($this->enigma->gettext('newkeyident'))));\n        $table->add(null, $select->show(0));\n\n        // Key size\n        $select = new html_select(array('name' => 'size', 'id' => 'key-size'));\n        $select->add($this->enigma->gettext('key2048'), '2048');\n        $select->add($this->enigma->gettext('key4096'), '4096');\n\n        $table->add('title', html::label('key-size', rcube::Q($this->enigma->gettext('newkeysize'))));\n        $table->add(null, $select->show());\n\n        // Password and confirm password\n        $table->add('title', html::label('key-pass', rcube::Q($this->enigma->gettext('newkeypass'))));\n        $table->add(null, rcube_output::get_edit_field('password', '',\n            array('id' => 'key-pass', 'size' => $attrib['size'], 'required' => true), 'password'));\n\n        $table->add('title', html::label('key-pass-confirm', rcube::Q($this->enigma->gettext('newkeypassconfirm'))));\n        $table->add(null, rcube_output::get_edit_field('password-confirm', '',\n            array('id' => 'key-pass-confirm', 'size' => $attrib['size'], 'required' => true), 'password'));\n\n        $this->rc->output->add_gui_object('keyform', $attrib['id']);\n        $this->rc->output->add_label('enigma.keygenerating', 'enigma.formerror',\n            'enigma.passwordsdiffer', 'enigma.keygenerateerror', 'enigma.nonameident',\n            'enigma.keygennosupport');\n\n        return $this->rc->output->form_tag(array(), $table->show($attrib));\n    }\n\n    /**\n     * Key deleting\n     */\n    private function key_delete()\n    {\n        $keys   = rcube_utils::get_input_value('_keys', rcube_utils::INPUT_POST);\n        $engine = $this->enigma->load_engine();\n\n        foreach ((array)$keys as $key) {\n            $res = $engine->delete_key($key);\n\n            if ($res !== true) {\n                $this->rc->output->show_message('enigma.keyremoveerror', 'error');\n                $this->rc->output->command('enigma_list');\n                $this->rc->output->send();\n            }\n        }\n\n        $this->rc->output->command('enigma_list');\n        $this->rc->output->show_message('enigma.keyremovesuccess', 'confirmation');\n        $this->rc->output->send();\n    }\n\n    /**\n     * Init compose UI (add task button and the menu)\n     */\n    private function compose_ui()\n    {\n        $this->add_css();\n\n        // Options menu button\n        $this->enigma->add_button(array(\n            'type'     => 'link',\n            'command'  => 'plugin.enigma',\n            'onclick'  => \"rcmail.command('menu-open', 'enigmamenu', event.target, event)\",\n            'class'    => 'button enigma',\n            'title'    => 'encryptionoptions',\n            'label'    => 'encryption',\n            'domain'   => $this->enigma->ID,\n            'width'    => 32,\n            'height'   => 32\n            ), 'toolbar');\n\n        $menu  = new html_table(array('cols' => 2));\n        $chbox = new html_checkbox(array('value' => 1));\n\n        $menu->add(null, html::label(array('for' => 'enigmasignopt'),\n            rcube::Q($this->enigma->gettext('signmsg'))));\n        $menu->add(null, $chbox->show($this->rc->config->get('enigma_sign_all') ? 1 : 0,\n            array('name' => '_enigma_sign', 'id' => 'enigmasignopt')));\n\n        $menu->add(null, html::label(array('for' => 'enigmaencryptopt'),\n            rcube::Q($this->enigma->gettext('encryptmsg'))));\n        $menu->add(null, $chbox->show($this->rc->config->get('enigma_encrypt_all') ? 1 : 0,\n            array('name' => '_enigma_encrypt', 'id' => 'enigmaencryptopt')));\n\n        $menu = html::div(array('id' => 'enigmamenu', 'class' => 'popupmenu'), $menu->show());\n\n        // Options menu contents\n        $this->rc->output->add_footer($menu);\n    }\n\n    /**\n     * Handler for message_body_prefix hook.\n     * Called for every displayed (content) part of the message.\n     * Adds infobox about signature verification and/or decryption\n     * status above the body.\n     *\n     * @param array Original parameters\n     *\n     * @return array Modified parameters\n     */\n    function status_message($p)\n    {\n        // skip: not a message part\n        if ($p['part'] instanceof rcube_message) {\n            return $p;\n        }\n\n        // skip: message has no signed/encoded content\n        if (!$this->enigma->engine) {\n            return $p;\n        }\n\n        $engine  = $this->enigma->engine;\n        $part_id = $p['part']->mime_id;\n\n        // Decryption status\n        if (($found = $this->find_part_id($part_id, $engine->decryptions)) !== null\n            && ($status = $engine->decryptions[$found])\n        ) {\n            $attach_scripts = true;\n\n            // show the message only once\n            unset($engine->decryptions[$found]);\n\n            // display status info\n            $attrib['id'] = 'enigma-message';\n\n            if ($status instanceof enigma_error) {\n                $attrib['class'] = 'enigmaerror';\n                $code            = $status->getCode();\n\n                if ($code == enigma_error::KEYNOTFOUND) {\n                    $msg = rcube::Q(str_replace('$keyid', enigma_key::format_id($status->getData('id')),\n                        $this->enigma->gettext('decryptnokey')));\n                }\n                else if ($code == enigma_error::BADPASS) {\n                    $missing = $status->getData('missing');\n                    $label   = 'decrypt' . (!empty($missing) ? 'no' : 'bad') . 'pass';\n                    $msg     = rcube::Q($this->enigma->gettext($label));\n                    $this->password_prompt($status);\n                }\n                else {\n                    $msg = rcube::Q($this->enigma->gettext('decrypterror'));\n                }\n            }\n            else {\n                $attrib['class'] = 'enigmanotice';\n                $msg = rcube::Q($this->enigma->gettext('decryptok'));\n            }\n\n            $p['prefix'] .= html::div($attrib, $msg);\n        }\n\n        // Signature verification status\n        if (($found = $this->find_part_id($part_id, $engine->signatures)) !== null\n            && ($sig = $engine->signatures[$found])\n        ) {\n            $attach_scripts = true;\n\n            // show the message only once\n            unset($engine->signatures[$found]);\n\n            // display status info\n            $attrib['id'] = 'enigma-message';\n\n            if ($sig instanceof enigma_signature) {\n                $sender = ($sig->name ? $sig->name . ' ' : '') . '<' . $sig->email . '>';\n\n                if ($sig->valid === enigma_error::UNVERIFIED) {\n                    $attrib['class'] = 'enigmawarning';\n                    $msg = str_replace('$sender', $sender, $this->enigma->gettext('sigunverified'));\n                    $msg = str_replace('$keyid', $sig->id, $msg);\n                    $msg = rcube::Q($msg);\n                }\n                else if ($sig->valid) {\n                    $attrib['class'] = 'enigmanotice';\n                    $msg = rcube::Q(str_replace('$sender', $sender, $this->enigma->gettext('sigvalid')));\n                }\n                else {\n                    $attrib['class'] = 'enigmawarning';\n                    $msg = rcube::Q(str_replace('$sender', $sender, $this->enigma->gettext('siginvalid')));\n                }\n            }\n            else if ($sig && $sig->getCode() == enigma_error::KEYNOTFOUND) {\n                $attrib['class'] = 'enigmawarning';\n                $msg = rcube::Q(str_replace('$keyid', enigma_key::format_id($sig->getData('id')),\n                    $this->enigma->gettext('signokey')));\n            }\n            else {\n                $attrib['class'] = 'enigmaerror';\n                $msg = rcube::Q($this->enigma->gettext('sigerror'));\n            }\n/*\n            $msg .= '&nbsp;' . html::a(array('href' => \"#sigdetails\",\n                'onclick' => rcmail_output::JS_OBJECT_NAME.\".command('enigma-sig-details')\"),\n                rcube::Q($this->enigma->gettext('showdetails')));\n*/\n            // test\n//            $msg .= '<br /><pre>'.$sig->body.'</pre>';\n\n            $p['prefix'] .= html::div($attrib, $msg);\n        }\n\n        if ($attach_scripts) {\n            // add css and js script\n            $this->add_css();\n            $this->add_js();\n        }\n\n        return $p;\n    }\n\n    /**\n     * Handler for message_load hook.\n     * Check message bodies and attachments for keys/certs.\n     */\n    function message_load($p)\n    {\n        $engine = $this->enigma->load_engine();\n\n        // handle keys/certs in attachments\n        foreach ((array) $p['object']->attachments as $attachment) {\n            if ($engine->is_keys_part($attachment)) {\n                $this->keys_parts[] = $attachment->mime_id;\n            }\n        }\n\n        // the same with message bodies\n        foreach ((array) $p['object']->parts as $part) {\n            if ($engine->is_keys_part($part)) {\n                $this->keys_parts[]  = $part->mime_id;\n                $this->keys_bodies[] = $part->mime_id;\n            }\n        }\n\n        // @TODO: inline PGP keys\n\n        if ($this->keys_parts) {\n            $this->enigma->add_texts('localization');\n        }\n\n        return $p;\n    }\n\n    /**\n     * Handler for template_object_messagebody hook.\n     * This callback function adds a box below the message content\n     * if there is a key/cert attachment available\n     */\n    function message_output($p)\n    {\n        foreach ($this->keys_parts as $part) {\n            // remove part's body\n            if (in_array($part, $this->keys_bodies)) {\n                $p['content'] = '';\n            }\n\n            // add box below message body\n            $p['content'] .= html::p(array('class' => 'enigmaattachment'),\n                html::a(array(\n                    'href'    => \"#\",\n                    'onclick' => \"return \".rcmail_output::JS_OBJECT_NAME.\".enigma_import_attachment('\".rcube::JQ($part).\"')\",\n                    'title'   => $this->enigma->gettext('keyattimport')),\n                    html::span(null, $this->enigma->gettext('keyattfound'))));\n\n            $attach_scripts = true;\n        }\n\n        if ($attach_scripts) {\n            // add css and js script\n            $this->add_css();\n            $this->add_js();\n        }\n\n        return $p;\n    }\n\n    /**\n     * Handle message_ready hook (encryption/signing)\n     */\n    function message_ready($p)\n    {\n        $savedraft = !empty($_POST['_draft']) && empty($_GET['_saveonly']);\n\n        if (!$savedraft && rcube_utils::get_input_value('_enigma_sign', rcube_utils::INPUT_POST)) {\n            $this->enigma->load_engine();\n            $status = $this->enigma->engine->sign_message($p['message']);\n            $mode   = 'sign';\n        }\n\n        if ((!$status instanceof enigma_error) && rcube_utils::get_input_value('_enigma_encrypt', rcube_utils::INPUT_POST)) {\n            $this->enigma->load_engine();\n            $status = $this->enigma->engine->encrypt_message($p['message'], null, $savedraft);\n            $mode   = 'encrypt';\n        }\n\n        if ($mode && ($status instanceof enigma_error)) {\n            $code = $status->getCode();\n\n            if ($code == enigma_error::KEYNOTFOUND) {\n                $vars = array('email' => $status->getData('missing'));\n                $msg  = 'enigma.' . $mode . 'nokey';\n            }\n            else if ($code == enigma_error::BADPASS) {\n                $this->password_prompt($status);\n            }\n            else {\n                $msg = 'enigma.' . $mode . 'error';\n            }\n\n            if ($msg) {\n                $this->rc->output->show_message($msg, $type ?: 'error', $vars);\n            }\n\n            $this->rc->output->send('iframe');\n        }\n\n        return $p;\n    }\n\n    /**\n     * Handler for message_compose_body hook\n     * Display error when the message cannot be encrypted\n     * and provide a way to try again with a password.\n     */\n    function message_compose($p)\n    {\n        $engine = $this->enigma->load_engine();\n\n        // skip: message has no signed/encoded content\n        if (!$this->enigma->engine) {\n            return $p;\n        }\n\n        $engine = $this->enigma->engine;\n\n        // Decryption status\n        foreach ($engine->decryptions as $status) {\n            if ($status instanceof enigma_error) {\n                $code = $status->getCode();\n\n                if ($code == enigma_error::KEYNOTFOUND) {\n                    $msg = rcube::Q(str_replace('$keyid', enigma_key::format_id($status->getData('id')),\n                        $this->enigma->gettext('decryptnokey')));\n                }\n                else if ($code == enigma_error::BADPASS) {\n                    $this->password_prompt($status, array('compose-init' => true));\n                    return $p;\n                }\n                else {\n                    $msg = rcube::Q($this->enigma->gettext('decrypterror'));\n                }\n            }\n        }\n\n        if ($msg) {\n            $this->rc->output->show_message($msg, 'error');\n        }\n\n        // Check sign/ecrypt options for signed/encrypted drafts\n        $this->rc->output->set_env('enigma_force_encrypt', !empty($engine->decryptions));\n        $this->rc->output->set_env('enigma_force_sign', !empty($engine->signatures));\n\n        return $p;\n    }\n\n    /**\n     * Check if the part or its parent exists in the array\n     * of decryptions/signatures. Returns found ID.\n     */\n    private function find_part_id($part_id, $data)\n    {\n        $ids   = explode('.', $part_id);\n        $i     = 0;\n        $count = count($ids);\n\n        while ($i < $count && strlen($part = implode('.', array_slice($ids, 0, ++$i)))) {\n            if (array_key_exists($part, $data)) {\n                return $part;\n            }\n        }\n    }\n}\n", "<?php\n\n/**\n * Managesieve (Sieve Filters) Engine\n *\n * Engine part of Managesieve plugin implementing UI and backend access.\n *\n * Copyright (C) 2008-2014, The Roundcube Dev Team\n * Copyright (C) 2011-2014, Kolab Systems AG\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see http://www.gnu.org/licenses/.\n */\n\nclass rcube_sieve_engine\n{\n    protected $rc;\n    protected $sieve;\n    protected $errors;\n    protected $form;\n    protected $tips = array();\n    protected $script = array();\n    protected $exts = array();\n    protected $list;\n    protected $active = array();\n    protected $headers = array(\n        'subject' => 'Subject',\n        'from'    => 'From',\n        'to'      => 'To',\n    );\n    protected $addr_headers = array(\n        // Required\n        \"from\", \"to\", \"cc\", \"bcc\", \"sender\", \"resent-from\", \"resent-to\",\n        // Additional (RFC 822 / RFC 2822)\n        \"reply-to\", \"resent-reply-to\", \"resent-sender\", \"resent-cc\", \"resent-bcc\",\n        // Non-standard (RFC 2076, draft-palme-mailext-headers-08.txt)\n        \"for-approval\", \"for-handling\", \"for-comment\", \"apparently-to\", \"errors-to\",\n        \"delivered-to\", \"return-receipt-to\", \"x-admin\", \"read-receipt-to\",\n        \"x-confirm-reading-to\", \"return-receipt-requested\",\n        \"registered-mail-reply-requested-by\", \"mail-followup-to\", \"mail-reply-to\",\n        \"abuse-reports-to\", \"x-complaints-to\", \"x-report-abuse-to\",\n        // Undocumented\n        \"x-beenthere\",\n    );\n    protected $notify_methods = array(\n        'mailto',\n        // 'sms',\n        // 'tel',\n    );\n    protected $notify_importance_options = array(\n        3 => 'notifyimportancelow',\n        2 => 'notifyimportancenormal',\n        1 => 'notifyimportancehigh'\n    );\n\n    const VERSION  = '8.5';\n    const PROGNAME = 'Roundcube (Managesieve)';\n    const PORT     = 4190;\n\n\n    /**\n     * Class constructor\n     */\n    function __construct($plugin)\n    {\n        $this->rc     = rcube::get_instance();\n        $this->plugin = $plugin;\n    }\n\n    /**\n     * Loads configuration, initializes plugin (including sieve connection)\n     */\n    function start($mode = null)\n    {\n        // register UI objects\n        $this->rc->output->add_handlers(array(\n            'filterslist'    => array($this, 'filters_list'),\n            'filtersetslist' => array($this, 'filtersets_list'),\n            'filterframe'    => array($this, 'filter_frame'),\n            'filterform'     => array($this, 'filter_form'),\n            'filtersetform'  => array($this, 'filterset_form'),\n        ));\n\n        // connect to managesieve server\n        $error = $this->connect($_SESSION['username'], $this->rc->decrypt($_SESSION['password']));\n\n        // load current/active script\n        if (!$error) {\n            // Get list of scripts\n            $list = $this->list_scripts();\n\n            // reset current script when entering filters UI (#1489412)\n            if ($this->rc->action == 'plugin.managesieve') {\n                $this->rc->session->remove('managesieve_current');\n            }\n\n            if ($mode != 'vacation') {\n                if (!empty($_GET['_set']) || !empty($_POST['_set'])) {\n                    $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_GPC, true);\n                }\n                else if (!empty($_SESSION['managesieve_current'])) {\n                    $script_name = $_SESSION['managesieve_current'];\n                }\n            }\n\n            $error = $this->load_script($script_name);\n        }\n\n        // finally set script objects\n        if ($error) {\n            switch ($error) {\n                case rcube_sieve::ERROR_CONNECTION:\n                case rcube_sieve::ERROR_LOGIN:\n                    $this->rc->output->show_message('managesieve.filterconnerror', 'error');\n                    break;\n\n                default:\n                    $this->rc->output->show_message('managesieve.filterunknownerror', 'error');\n                    break;\n            }\n\n            // reload interface in case of possible error when specified script wasn't found (#1489412)\n            if ($script_name !== null && !empty($list) && !in_array($script_name, $list)) {\n                $this->rc->output->command('reload', 500);\n            }\n\n            // to disable 'Add filter' button set env variable\n            $this->rc->output->set_env('filterconnerror', true);\n            $this->script = array();\n        }\n        else {\n            $this->exts = $this->sieve->get_extensions();\n            $this->init_script();\n            $this->rc->output->set_env('currentset', $this->sieve->current);\n            $_SESSION['managesieve_current'] = $this->sieve->current;\n        }\n\n        return $error;\n    }\n\n    /**\n     * Connect to configured managesieve server\n     *\n     * @param string $username User login\n     * @param string $password User password\n     *\n     * @return int Connection status: 0 on success, >0 on failure\n     */\n    public function connect($username, $password)\n    {\n        // Get connection parameters\n        $host = $this->rc->config->get('managesieve_host', 'localhost');\n        $port = $this->rc->config->get('managesieve_port');\n        $tls  = $this->rc->config->get('managesieve_usetls', false);\n\n        $host = rcube_utils::parse_host($host);\n        $host = rcube_utils::idn_to_ascii($host);\n\n        // remove tls:// prefix, set TLS flag\n        if (($host = preg_replace('|^tls://|i', '', $host, 1, $cnt)) && $cnt) {\n            $tls = true;\n        }\n\n        if (empty($port)) {\n            $port = getservbyname('sieve', 'tcp');\n            if (empty($port)) {\n                $port = self::PORT;\n            }\n        }\n\n        $plugin = $this->rc->plugins->exec_hook('managesieve_connect', array(\n            'user'      => $username,\n            'password'  => $password,\n            'host'      => $host,\n            'port'      => $port,\n            'usetls'    => $tls,\n            'auth_type' => $this->rc->config->get('managesieve_auth_type'),\n            'disabled'  => $this->rc->config->get('managesieve_disabled_extensions'),\n            'debug'     => $this->rc->config->get('managesieve_debug', false),\n            'auth_cid'  => $this->rc->config->get('managesieve_auth_cid'),\n            'auth_pw'   => $this->rc->config->get('managesieve_auth_pw'),\n            'socket_options' => $this->rc->config->get('managesieve_conn_options'),\n        ));\n\n        // try to connect to managesieve server and to fetch the script\n        $this->sieve = new rcube_sieve(\n            $plugin['user'],\n            $plugin['password'],\n            $plugin['host'],\n            $plugin['port'],\n            $plugin['auth_type'],\n            $plugin['usetls'],\n            $plugin['disabled'],\n            $plugin['debug'],\n            $plugin['auth_cid'],\n            $plugin['auth_pw'],\n            $plugin['socket_options']\n        );\n\n        $error = $this->sieve->error();\n\n        if ($error) {\n            rcube::raise_error(array(\n                    'code'    => 403,\n                    'file'    => __FILE__,\n                    'line'    => __LINE__,\n                    'message' => \"Unable to connect to managesieve on $host:$port\"\n                ), true, false);\n        }\n\n        return $error;\n    }\n\n    /**\n     * Load specified (or active) script\n     *\n     * @param string $script_name Optional script name\n     *\n     * @return int Connection status: 0 on success, >0 on failure\n     */\n    protected function load_script($script_name = null)\n    {\n        // Get list of scripts\n        $list = $this->list_scripts();\n\n        if ($script_name === null || $script_name === '') {\n            // get (first) active script\n            if (!empty($this->active)) {\n               $script_name = $this->active[0];\n            }\n            else if ($list) {\n                $script_name = $list[0];\n            }\n            // create a new (initial) script\n            else {\n                // if script not exists build default script contents\n                $script_file = $this->rc->config->get('managesieve_default');\n                $script_name = $this->rc->config->get('managesieve_script_name');\n\n                if (empty($script_name)) {\n                    $script_name = 'roundcube';\n                }\n\n                if ($script_file && is_readable($script_file)) {\n                    $content = file_get_contents($script_file);\n                }\n\n                // add script and set it active\n                if ($this->sieve->save_script($script_name, $content)) {\n                    $this->activate_script($script_name);\n                    $this->list[] = $script_name;\n                }\n            }\n        }\n\n        if ($script_name) {\n            $this->sieve->load($script_name);\n        }\n\n        return $this->sieve->error();\n    }\n\n    /**\n     * User interface actions handler\n     */\n    function actions()\n    {\n        $error = $this->start();\n\n        // Handle user requests\n        if ($action = rcube_utils::get_input_value('_act', rcube_utils::INPUT_GPC)) {\n            $fid = (int) rcube_utils::get_input_value('_fid', rcube_utils::INPUT_POST);\n\n            if ($action == 'delete' && !$error) {\n                if (isset($this->script[$fid])) {\n                    if ($this->sieve->script->delete_rule($fid))\n                        $result = $this->save_script();\n\n                    if ($result === true) {\n                        $this->rc->output->show_message('managesieve.filterdeleted', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'del', array('id' => $fid));\n                    } else {\n                        $this->rc->output->show_message('managesieve.filterdeleteerror', 'error');\n                    }\n                }\n            }\n            else if ($action == 'move' && !$error) {\n                if (isset($this->script[$fid])) {\n                    $to   = (int) rcube_utils::get_input_value('_to', rcube_utils::INPUT_POST);\n                    $rule = $this->script[$fid];\n\n                    // remove rule\n                    unset($this->script[$fid]);\n                    $this->script = array_values($this->script);\n\n                    // add at target position\n                    if ($to >= count($this->script)) {\n                        $this->script[] = $rule;\n                    }\n                    else {\n                        $script = array();\n                        foreach ($this->script as $idx => $r) {\n                            if ($idx == $to)\n                                $script[] = $rule;\n                            $script[] = $r;\n                        }\n                        $this->script = $script;\n                    }\n\n                    $this->sieve->script->content = $this->script;\n                    $result = $this->save_script();\n\n                    if ($result === true) {\n                        $result = $this->list_rules();\n\n                        $this->rc->output->show_message('managesieve.moved', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'list',\n                            array('list' => $result, 'clear' => true, 'set' => $to));\n                    } else {\n                        $this->rc->output->show_message('managesieve.moveerror', 'error');\n                    }\n                }\n            }\n            else if ($action == 'act' && !$error) {\n                if (isset($this->script[$fid])) {\n                    $rule     = $this->script[$fid];\n                    $disabled = $rule['disabled'] ? true : false;\n                    $rule['disabled'] = !$disabled;\n                    $result = $this->sieve->script->update_rule($fid, $rule);\n\n                    if ($result !== false)\n                        $result = $this->save_script();\n\n                    if ($result === true) {\n                        if ($rule['disabled'])\n                            $this->rc->output->show_message('managesieve.deactivated', 'confirmation');\n                        else\n                            $this->rc->output->show_message('managesieve.activated', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'update',\n                            array('id' => $fid, 'disabled' => $rule['disabled']));\n                    } else {\n                        if ($rule['disabled'])\n                            $this->rc->output->show_message('managesieve.deactivateerror', 'error');\n                        else\n                            $this->rc->output->show_message('managesieve.activateerror', 'error');\n                    }\n                }\n            }\n            else if ($action == 'setact' && !$error) {\n                $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_POST, true);\n                $result = $this->activate_script($script_name);\n                $kep14  = $this->rc->config->get('managesieve_kolab_master');\n\n                if ($result === true) {\n                    $this->rc->output->set_env('active_sets', $this->active);\n                    $this->rc->output->show_message('managesieve.setactivated', 'confirmation');\n                    $this->rc->output->command('managesieve_updatelist', 'setact',\n                        array('name' => $script_name, 'active' => true, 'all' => !$kep14));\n                } else {\n                    $this->rc->output->show_message('managesieve.setactivateerror', 'error');\n                }\n            }\n            else if ($action == 'deact' && !$error) {\n                $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_POST, true);\n                $result = $this->deactivate_script($script_name);\n\n                if ($result === true) {\n                    $this->rc->output->set_env('active_sets', $this->active);\n                    $this->rc->output->show_message('managesieve.setdeactivated', 'confirmation');\n                    $this->rc->output->command('managesieve_updatelist', 'setact',\n                        array('name' => $script_name, 'active' => false));\n                } else {\n                    $this->rc->output->show_message('managesieve.setdeactivateerror', 'error');\n                }\n            }\n            else if ($action == 'setdel' && !$error) {\n                $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_POST, true);\n                $result = $this->remove_script($script_name);\n\n                if ($result === true) {\n                    $this->rc->output->show_message('managesieve.setdeleted', 'confirmation');\n                    $this->rc->output->command('managesieve_updatelist', 'setdel',\n                        array('name' => $script_name));\n                    $this->rc->session->remove('managesieve_current');\n                } else {\n                    $this->rc->output->show_message('managesieve.setdeleteerror', 'error');\n                }\n            }\n            else if ($action == 'setget') {\n                $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_GPC, true);\n                $script      = $this->sieve->get_script($script_name);\n\n                if (is_a($script, 'PEAR_Error')) {\n                    exit;\n                }\n\n                $browser = new rcube_browser;\n\n                // send download headers\n                header(\"Content-Type: application/octet-stream\");\n                header(\"Content-Length: \".strlen($script));\n\n                if ($browser->ie) {\n                    header(\"Content-Type: application/force-download\");\n                    $filename = rawurlencode($script_name);\n                }\n                else {\n                    $filename = addcslashes($script_name, '\\\\\"');\n                }\n\n                header(\"Content-Disposition: attachment; filename=\\\"$filename.txt\\\"\");\n                echo $script;\n                exit;\n            }\n            else if ($action == 'list') {\n                $result = $this->list_rules();\n\n                $this->rc->output->command('managesieve_updatelist', 'list', array('list' => $result));\n            }\n            else if ($action == 'ruleadd') {\n                $rid = rcube_utils::get_input_value('_rid', rcube_utils::INPUT_POST);\n                $id = $this->genid();\n                $content = $this->rule_div($fid, $id, false);\n\n                $this->rc->output->command('managesieve_rulefill', $content, $id, $rid);\n            }\n            else if ($action == 'actionadd') {\n                $aid = rcube_utils::get_input_value('_aid', rcube_utils::INPUT_POST);\n                $id = $this->genid();\n                $content = $this->action_div($fid, $id, false);\n\n                $this->rc->output->command('managesieve_actionfill', $content, $id, $aid);\n            }\n            else if ($action == 'addresses') {\n                $aid = rcube_utils::get_input_value('_aid', rcube_utils::INPUT_POST);\n\n                $this->rc->output->command('managesieve_vacation_addresses_update', $aid, $this->user_emails());\n            }\n\n            $this->rc->output->send();\n        }\n        else if ($this->rc->task == 'mail') {\n            // Initialize the form\n            $rules = rcube_utils::get_input_value('r', rcube_utils::INPUT_GET);\n            if (!empty($rules)) {\n                $i = 0;\n                foreach ($rules as $rule) {\n                    list($header, $value) = explode(':', $rule, 2);\n                    $tests[$i] = array(\n                        'type' => 'contains',\n                        'test' => 'header',\n                        'arg1' => $header,\n                        'arg2' => $value,\n                    );\n                    $i++;\n                }\n\n                $this->form = array(\n                    'join'  => count($tests) > 1 ? 'allof' : 'anyof',\n                    'name'  => '',\n                    'tests' => $tests,\n                    'actions' => array(\n                        0 => array('type' => 'fileinto'),\n                        1 => array('type' => 'stop'),\n                    ),\n                );\n            }\n        }\n\n        $this->send();\n    }\n\n    function save()\n    {\n        // Init plugin and handle managesieve connection\n        $error = $this->start();\n\n        // get request size limits (#1488648)\n        $max_post = max(array(\n            ini_get('max_input_vars'),\n            ini_get('suhosin.request.max_vars'),\n            ini_get('suhosin.post.max_vars'),\n        ));\n        $max_depth = max(array(\n            ini_get('suhosin.request.max_array_depth'),\n            ini_get('suhosin.post.max_array_depth'),\n        ));\n\n        // check request size limit\n        if ($max_post && count($_POST, COUNT_RECURSIVE) >= $max_post) {\n            rcube::raise_error(array(\n                'code' => 500, 'type' => 'php',\n                'file' => __FILE__, 'line' => __LINE__,\n                'message' => \"Request size limit exceeded (one of max_input_vars/suhosin.request.max_vars/suhosin.post.max_vars)\"\n                ), true, false);\n            $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n        }\n        // check request depth limits\n        else if ($max_depth && count($_POST['_header']) > $max_depth) {\n            rcube::raise_error(array(\n                'code' => 500, 'type' => 'php',\n                'file' => __FILE__, 'line' => __LINE__,\n                'message' => \"Request size limit exceeded (one of suhosin.request.max_array_depth/suhosin.post.max_array_depth)\"\n                ), true, false);\n            $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n        }\n        // filters set add action\n        else if (!empty($_POST['_newset'])) {\n            $name       = rcube_utils::get_input_value('_name', rcube_utils::INPUT_POST, true);\n            $copy       = rcube_utils::get_input_value('_copy', rcube_utils::INPUT_POST, true);\n            $from       = rcube_utils::get_input_value('_from', rcube_utils::INPUT_POST);\n            $exceptions = $this->rc->config->get('managesieve_filename_exceptions');\n            $kolab      = $this->rc->config->get('managesieve_kolab_master');\n            $name_uc    = mb_strtolower($name);\n            $list       = $this->list_scripts();\n\n            if (!$name) {\n                $this->errors['name'] = $this->plugin->gettext('cannotbeempty');\n            }\n            else if (mb_strlen($name) > 128) {\n                $this->errors['name'] = $this->plugin->gettext('nametoolong');\n            }\n            else if (!empty($exceptions) && in_array($name, (array)$exceptions)) {\n                $this->errors['name'] = $this->plugin->gettext('namereserved');\n            }\n            else if (!empty($kolab) && in_array($name_uc, array('MASTER', 'USER', 'MANAGEMENT'))) {\n                $this->errors['name'] = $this->plugin->gettext('namereserved');\n            }\n            else if (in_array($name, $list)) {\n                $this->errors['name'] = $this->plugin->gettext('setexist');\n            }\n            else if ($from == 'file') {\n                // from file\n                if (is_uploaded_file($_FILES['_file']['tmp_name'])) {\n                    $file = file_get_contents($_FILES['_file']['tmp_name']);\n                    $file = preg_replace('/\\r/', '', $file);\n                    // for security don't save script directly\n                    // check syntax before, like this...\n                    $this->sieve->load_script($file);\n                    if (!$this->save_script($name)) {\n                        $this->errors['file'] = $this->plugin->gettext('setcreateerror');\n                    }\n                }\n                else {  // upload failed\n                    $err = $_FILES['_file']['error'];\n\n                    if ($err == UPLOAD_ERR_INI_SIZE || $err == UPLOAD_ERR_FORM_SIZE) {\n                        $msg = $this->rc->gettext(array('name' => 'filesizeerror',\n                            'vars' => array('size' =>\n                                $this->rc->show_bytes(parse_bytes(ini_get('upload_max_filesize'))))));\n                    }\n                    else {\n                        $this->errors['file'] = $this->plugin->gettext('fileuploaderror');\n                    }\n                }\n            }\n            else if (!$this->sieve->copy($name, $from == 'set' ? $copy : '')) {\n                $error = 'managesieve.setcreateerror';\n            }\n\n            if (!$error && empty($this->errors)) {\n                // Find position of the new script on the list\n                $list[] = $name;\n                asort($list, SORT_LOCALE_STRING);\n                $list  = array_values($list);\n                $index = array_search($name, $list);\n\n                $this->rc->output->show_message('managesieve.setcreated', 'confirmation');\n                $this->rc->output->command('parent.managesieve_updatelist', 'setadd',\n                    array('name' => $name, 'index' => $index));\n            } else if ($msg) {\n                $this->rc->output->command('display_message', $msg, 'error');\n            } else if ($error) {\n                $this->rc->output->show_message($error, 'error');\n            }\n        }\n        // filter add/edit action\n        else if (isset($_POST['_name'])) {\n            $name = trim(rcube_utils::get_input_value('_name', rcube_utils::INPUT_POST, true));\n            $fid  = trim(rcube_utils::get_input_value('_fid', rcube_utils::INPUT_POST));\n            $join = trim(rcube_utils::get_input_value('_join', rcube_utils::INPUT_POST));\n\n            // and arrays\n            $headers        = rcube_utils::get_input_value('_header', rcube_utils::INPUT_POST);\n            $cust_headers   = rcube_utils::get_input_value('_custom_header', rcube_utils::INPUT_POST);\n            $ops            = rcube_utils::get_input_value('_rule_op', rcube_utils::INPUT_POST);\n            $sizeops        = rcube_utils::get_input_value('_rule_size_op', rcube_utils::INPUT_POST);\n            $sizeitems      = rcube_utils::get_input_value('_rule_size_item', rcube_utils::INPUT_POST);\n            $sizetargets    = rcube_utils::get_input_value('_rule_size_target', rcube_utils::INPUT_POST);\n            $targets        = rcube_utils::get_input_value('_rule_target', rcube_utils::INPUT_POST, true);\n            $mods           = rcube_utils::get_input_value('_rule_mod', rcube_utils::INPUT_POST);\n            $mod_types      = rcube_utils::get_input_value('_rule_mod_type', rcube_utils::INPUT_POST);\n            $body_trans     = rcube_utils::get_input_value('_rule_trans', rcube_utils::INPUT_POST);\n            $body_types     = rcube_utils::get_input_value('_rule_trans_type', rcube_utils::INPUT_POST, true);\n            $comparators    = rcube_utils::get_input_value('_rule_comp', rcube_utils::INPUT_POST);\n            $indexes        = rcube_utils::get_input_value('_rule_index', rcube_utils::INPUT_POST);\n            $lastindexes    = rcube_utils::get_input_value('_rule_index_last', rcube_utils::INPUT_POST);\n            $dateheaders    = rcube_utils::get_input_value('_rule_date_header', rcube_utils::INPUT_POST);\n            $dateparts      = rcube_utils::get_input_value('_rule_date_part', rcube_utils::INPUT_POST);\n            $act_types      = rcube_utils::get_input_value('_action_type', rcube_utils::INPUT_POST, true);\n            $mailboxes      = rcube_utils::get_input_value('_action_mailbox', rcube_utils::INPUT_POST, true);\n            $act_targets    = rcube_utils::get_input_value('_action_target', rcube_utils::INPUT_POST, true);\n            $domain_targets = rcube_utils::get_input_value('_action_target_domain', rcube_utils::INPUT_POST);\n            $area_targets   = rcube_utils::get_input_value('_action_target_area', rcube_utils::INPUT_POST, true);\n            $reasons        = rcube_utils::get_input_value('_action_reason', rcube_utils::INPUT_POST, true);\n            $addresses      = rcube_utils::get_input_value('_action_addresses', rcube_utils::INPUT_POST, true);\n            $intervals      = rcube_utils::get_input_value('_action_interval', rcube_utils::INPUT_POST);\n            $interval_types = rcube_utils::get_input_value('_action_interval_type', rcube_utils::INPUT_POST);\n            $from           = rcube_utils::get_input_value('_action_from', rcube_utils::INPUT_POST);\n            $subject        = rcube_utils::get_input_value('_action_subject', rcube_utils::INPUT_POST, true);\n            $flags          = rcube_utils::get_input_value('_action_flags', rcube_utils::INPUT_POST);\n            $varnames       = rcube_utils::get_input_value('_action_varname', rcube_utils::INPUT_POST);\n            $varvalues      = rcube_utils::get_input_value('_action_varvalue', rcube_utils::INPUT_POST);\n            $varmods        = rcube_utils::get_input_value('_action_varmods', rcube_utils::INPUT_POST);\n            $notifymethods  = rcube_utils::get_input_value('_action_notifymethod', rcube_utils::INPUT_POST);\n            $notifytargets  = rcube_utils::get_input_value('_action_notifytarget', rcube_utils::INPUT_POST, true);\n            $notifyoptions  = rcube_utils::get_input_value('_action_notifyoption', rcube_utils::INPUT_POST, true);\n            $notifymessages = rcube_utils::get_input_value('_action_notifymessage', rcube_utils::INPUT_POST, true);\n            $notifyfrom     = rcube_utils::get_input_value('_action_notifyfrom', rcube_utils::INPUT_POST);\n            $notifyimp      = rcube_utils::get_input_value('_action_notifyimportance', rcube_utils::INPUT_POST);\n\n            // we need a \"hack\" for radiobuttons\n            foreach ($sizeitems as $item)\n                $items[] = $item;\n\n            $this->form['disabled'] = !empty($_POST['_disabled']);\n            $this->form['join']     = $join == 'allof';\n            $this->form['name']     = $name;\n            $this->form['tests']    = array();\n            $this->form['actions']  = array();\n\n            if ($name == '')\n                $this->errors['name'] = $this->plugin->gettext('cannotbeempty');\n            else {\n                foreach($this->script as $idx => $rule)\n                    if($rule['name'] == $name && $idx != $fid) {\n                        $this->errors['name'] = $this->plugin->gettext('ruleexist');\n                        break;\n                    }\n            }\n\n            $i = 0;\n            // rules\n            if ($join == 'any') {\n                $this->form['tests'][0]['test'] = 'true';\n            }\n            else {\n                foreach ($headers as $idx => $header) {\n                    // targets are indexed differently (assume form order)\n                    $target     = $this->strip_value(array_shift($targets), true);\n                    $header     = $this->strip_value($header);\n                    $operator   = $this->strip_value($ops[$idx]);\n                    $comparator = $this->strip_value($comparators[$idx]);\n\n                    if ($header == 'size') {\n                        $sizeop     = $this->strip_value($sizeops[$idx]);\n                        $sizeitem   = $this->strip_value($items[$idx]);\n                        $sizetarget = $this->strip_value($sizetargets[$idx]);\n\n                        $this->form['tests'][$i]['test'] = 'size';\n                        $this->form['tests'][$i]['type'] = $sizeop;\n                        $this->form['tests'][$i]['arg']  = $sizetarget;\n\n                        if ($sizetarget == '')\n                            $this->errors['tests'][$i]['sizetarget'] = $this->plugin->gettext('cannotbeempty');\n                        else if (!preg_match('/^[0-9]+(K|M|G)?$/i', $sizetarget.$sizeitem, $m)) {\n                            $this->errors['tests'][$i]['sizetarget'] = $this->plugin->gettext('forbiddenchars');\n                            $this->form['tests'][$i]['item'] = $sizeitem;\n                        }\n                        else\n                            $this->form['tests'][$i]['arg'] .= $m[1];\n                    }\n                    else if ($header == 'currentdate') {\n                        $datepart = $this->strip_value($dateparts[$idx]);\n\n                        if (preg_match('/^not/', $operator))\n                            $this->form['tests'][$i]['not'] = true;\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if ($type == 'exists') {\n                            $this->errors['tests'][$i]['op'] = true;\n                        }\n\n                        $this->form['tests'][$i]['test'] = 'currentdate';\n                        $this->form['tests'][$i]['type'] = $type;\n                        $this->form['tests'][$i]['part'] = $datepart;\n                        $this->form['tests'][$i]['arg']  = $target;\n\n                        if ($type != 'exists') {\n                            if (!count($target)) {\n                                $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                            }\n                            else if (strpos($type, 'count-') === 0) {\n                                foreach ($target as $arg) {\n                                    if (preg_match('/[^0-9]/', $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n                            else if (strpos($type, 'value-') === 0) {\n                                // Some date/time formats do not support i;ascii-numeric comparator\n                                if ($comparator == 'i;ascii-numeric' && in_array($datepart, array('date', 'time', 'iso8601', 'std11'))) {\n                                    $comparator = '';\n                                }\n                            }\n\n                            if (!preg_match('/^(regex|matches|count-)/', $type) && count($target)) {\n                                foreach ($target as $arg) {\n                                    if (!$this->validate_date_part($datepart, $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('invaliddateformat');\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else if ($header == 'date') {\n                        $datepart    = $this->strip_value($dateparts[$idx]);\n                        $dateheader  = $this->strip_value($dateheaders[$idx]);\n                        $index       = $this->strip_value($indexes[$idx]);\n                        $indexlast   = $this->strip_value($lastindexes[$idx]);\n\n                        if (preg_match('/^not/', $operator))\n                            $this->form['tests'][$i]['not'] = true;\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if ($type == 'exists') {\n                            $this->errors['tests'][$i]['op'] = true;\n                        }\n\n                        if (!empty($index) && $mod != 'envelope') {\n                            $this->form['tests'][$i]['index'] = intval($index);\n                            $this->form['tests'][$i]['last']  = !empty($indexlast);\n                        }\n\n                        if (empty($dateheader)) {\n                            $dateheader = 'Date';\n                        }\n                        else if (!preg_match('/^[\\x21-\\x39\\x41-\\x7E]+$/i', $dateheader)) {\n                            $this->errors['tests'][$i]['dateheader'] = $this->plugin->gettext('forbiddenchars');\n                        }\n\n                        $this->form['tests'][$i]['test']   = 'date';\n                        $this->form['tests'][$i]['type']   = $type;\n                        $this->form['tests'][$i]['part']   = $datepart;\n                        $this->form['tests'][$i]['arg']    = $target;\n                        $this->form['tests'][$i]['header'] = $dateheader;\n\n                        if ($type != 'exists') {\n                            if (!count($target)) {\n                                $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                            }\n                            else if (strpos($type, 'count-') === 0) {\n                                foreach ($target as $arg) {\n                                    if (preg_match('/[^0-9]/', $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n                            else if (strpos($type, 'value-') === 0) {\n                                // Some date/time formats do not support i;ascii-numeric comparator\n                                if ($comparator == 'i;ascii-numeric' && in_array($datepart, array('date', 'time', 'iso8601', 'std11'))) {\n                                    $comparator = '';\n                                }\n                            }\n\n                            if (count($target) && !preg_match('/^(regex|matches|count-)/', $type)) {\n                                foreach ($target as $arg) {\n                                    if (!$this->validate_date_part($datepart, $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('invaliddateformat');\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else if ($header == 'body') {\n                        $trans      = $this->strip_value($body_trans[$idx]);\n                        $trans_type = $this->strip_value($body_types[$idx], true);\n\n                        if (preg_match('/^not/', $operator))\n                            $this->form['tests'][$i]['not'] = true;\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if ($type == 'exists') {\n                            $this->errors['tests'][$i]['op'] = true;\n                        }\n\n                        $this->form['tests'][$i]['test'] = 'body';\n                        $this->form['tests'][$i]['type'] = $type;\n                        $this->form['tests'][$i]['arg']  = $target;\n\n                        if (empty($target) && $type != 'exists') {\n                            $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                        }\n                        else if (preg_match('/^(value|count)-/', $type)) {\n                            foreach ($target as $target_value) {\n                                if (preg_match('/[^0-9]/', $target_value)) {\n                                    $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                }\n                            }\n                        }\n\n                        $this->form['tests'][$i]['part'] = $trans;\n                        if ($trans == 'content') {\n                            $this->form['tests'][$i]['content'] = $trans_type;\n                        }\n                    }\n                    else {\n                        $cust_header = $headers = $this->strip_value(array_shift($cust_headers));\n                        $mod         = $this->strip_value($mods[$idx]);\n                        $mod_type    = $this->strip_value($mod_types[$idx]);\n                        $index       = $this->strip_value($indexes[$idx]);\n                        $indexlast   = $this->strip_value($lastindexes[$idx]);\n\n                        if (preg_match('/^not/', $operator))\n                            $this->form['tests'][$i]['not'] = true;\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if (!empty($index) && $mod != 'envelope') {\n                            $this->form['tests'][$i]['index'] = intval($index);\n                            $this->form['tests'][$i]['last']  = !empty($indexlast);\n                        }\n\n                        if ($header == '...') {\n                            if (!count($headers))\n                                $this->errors['tests'][$i]['header'] = $this->plugin->gettext('cannotbeempty');\n                            else {\n                                foreach ($headers as $hr) {\n                                    // RFC2822: printable ASCII except colon\n                                    if (!preg_match('/^[\\x21-\\x39\\x41-\\x7E]+$/i', $hr)) {\n                                        $this->errors['tests'][$i]['header'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n\n                            if (empty($this->errors['tests'][$i]['header']))\n                                $cust_header = (is_array($headers) && count($headers) == 1) ? $headers[0] : $headers;\n                        }\n\n                        $header = $header == '...' ? $cust_header : $header;\n\n                        if (is_array($header)) {\n                            foreach ($header as $h_index => $val) {\n                                if (isset($this->headers[$val])) {\n                                    $header[$h_index] = $this->headers[$val];\n                                }\n                            }\n                        }\n\n                        if ($type == 'exists') {\n                            $this->form['tests'][$i]['test'] = 'exists';\n                            $this->form['tests'][$i]['arg'] = $header;\n                        }\n                        else {\n                            $test = 'header';\n\n                            if ($mod == 'address' || $mod == 'envelope') {\n                                $found = false;\n                                if (empty($this->errors['tests'][$i]['header'])) {\n                                    foreach ((array)$header as $hdr) {\n                                        if (!in_array(strtolower(trim($hdr)), $this->addr_headers))\n                                            $found = true;\n                                    }\n                                }\n                                if (!$found)\n                                    $test = $mod;\n                            }\n\n                            $this->form['tests'][$i]['type'] = $type;\n                            $this->form['tests'][$i]['test'] = $test;\n                            $this->form['tests'][$i]['arg1'] = $header;\n                            $this->form['tests'][$i]['arg2'] = $target;\n\n                            if (empty($target)) {\n                                $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                            }\n                            else if (preg_match('/^(value|count)-/', $type)) {\n                                foreach ($target as $target_value) {\n                                    if (preg_match('/[^0-9]/', $target_value)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n\n                            if ($mod) {\n                                $this->form['tests'][$i]['part'] = $mod_type;\n                            }\n                        }\n                    }\n\n                    if ($header != 'size' && $comparator) {\n                        $this->form['tests'][$i]['comparator'] = $comparator;\n                    }\n\n                    $i++;\n                }\n            }\n\n            $i = 0;\n            // actions\n            foreach ($act_types as $idx => $type) {\n                $type = $this->strip_value($type);\n\n                switch ($type) {\n                case 'fileinto':\n                case 'fileinto_copy':\n                    $mailbox = $this->strip_value($mailboxes[$idx], false, false);\n                    $this->form['actions'][$i]['target'] = $this->mod_mailbox($mailbox, 'in');\n\n                    if ($type == 'fileinto_copy') {\n                        $type = 'fileinto';\n                        $this->form['actions'][$i]['copy'] = true;\n                    }\n                    break;\n\n                case 'reject':\n                case 'ereject':\n                    $target = $this->strip_value($area_targets[$idx]);\n                    $this->form['actions'][$i]['target'] = str_replace(\"\\r\\n\", \"\\n\", $target);\n\n //                 if ($target == '')\n//                      $this->errors['actions'][$i]['targetarea'] = $this->plugin->gettext('cannotbeempty');\n                    break;\n\n                case 'redirect':\n                case 'redirect_copy':\n                    $target = $this->strip_value($act_targets[$idx]);\n                    $domain = $this->strip_value($domain_targets[$idx]);\n\n                    // force one of the configured domains\n                    $domains = (array) $this->rc->config->get('managesieve_domains');\n                    if (!empty($domains) && !empty($target)) {\n                        if (!$domain || !in_array($domain, $domains)) {\n                            $domain = $domains[0];\n                        }\n\n                        $target .= '@' . $domain;\n                    }\n\n                    $this->form['actions'][$i]['target'] = $target;\n\n                    if ($target == '')\n                        $this->errors['actions'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                    else if (!rcube_utils::check_email($target))\n                        $this->errors['actions'][$i]['target'] = $this->plugin->gettext(!empty($domains) ? 'forbiddenchars' : 'noemailwarning');\n\n                    if ($type == 'redirect_copy') {\n                        $type = 'redirect';\n                        $this->form['actions'][$i]['copy'] = true;\n                    }\n\n                    break;\n\n                case 'addflag':\n                case 'setflag':\n                case 'removeflag':\n                    $_target = array();\n                    if (empty($flags[$idx])) {\n                        $this->errors['actions'][$i]['target'] = $this->plugin->gettext('noflagset');\n                    }\n                    else {\n                        foreach ($flags[$idx] as $flag) {\n                            $_target[] = $this->strip_value($flag);\n                        }\n                    }\n                    $this->form['actions'][$i]['target'] = $_target;\n                    break;\n\n                case 'vacation':\n                    $reason        = $this->strip_value($reasons[$idx]);\n                    $interval_type = $interval_types[$idx] == 'seconds' ? 'seconds' : 'days';\n\n                    $this->form['actions'][$i]['reason']    = str_replace(\"\\r\\n\", \"\\n\", $reason);\n                    $this->form['actions'][$i]['from']      = $from[$idx];\n                    $this->form['actions'][$i]['subject']   = $subject[$idx];\n                    $this->form['actions'][$i]['addresses'] = array_shift($addresses);\n                    $this->form['actions'][$i][$interval_type] = $intervals[$idx];\n// @TODO: vacation :mime, :handle\n\n                    foreach ((array)$this->form['actions'][$i]['addresses'] as $aidx => $address) {\n                        $this->form['actions'][$i]['addresses'][$aidx] = $address = trim($address);\n\n                        if (empty($address)) {\n                            unset($this->form['actions'][$i]['addresses'][$aidx]);\n                        }\n                        else if (!rcube_utils::check_email($address)) {\n                            $this->errors['actions'][$i]['addresses'] = $this->plugin->gettext('noemailwarning');\n                            break;\n                        }\n                    }\n\n                    if (!empty($this->form['actions'][$i]['from']) && !rcube_utils::check_email($this->form['actions'][$i]['from'])) {\n                        $this->errors['actions'][$i]['from'] = $this->plugin->gettext('noemailwarning');\n                    }\n\n                    if ($this->form['actions'][$i]['reason'] == '')\n                        $this->errors['actions'][$i]['reason'] = $this->plugin->gettext('cannotbeempty');\n                    if ($this->form['actions'][$i][$interval_type] && !preg_match('/^[0-9]+$/', $this->form['actions'][$i][$interval_type]))\n                        $this->errors['actions'][$i]['interval'] = $this->plugin->gettext('forbiddenchars');\n                    break;\n\n                case 'set':\n                    $this->form['actions'][$i]['name'] = $varnames[$idx];\n                    $this->form['actions'][$i]['value'] = $varvalues[$idx];\n                    foreach ((array)$varmods[$idx] as $v_m) {\n                        $this->form['actions'][$i][$v_m] = true;\n                    }\n\n                    if (empty($varnames[$idx])) {\n                        $this->errors['actions'][$i]['name'] = $this->plugin->gettext('cannotbeempty');\n                    }\n                    else if (!preg_match('/^[0-9a-z_]+$/i', $varnames[$idx])) {\n                        $this->errors['actions'][$i]['name'] = $this->plugin->gettext('forbiddenchars');\n                    }\n\n                    if (!isset($varvalues[$idx]) || $varvalues[$idx] === '') {\n                        $this->errors['actions'][$i]['value'] = $this->plugin->gettext('cannotbeempty');\n                    }\n                    break;\n\n                case 'notify':\n                    if (empty($notifymethods[$idx])) {\n                        $this->errors['actions'][$i]['method'] = $this->plugin->gettext('cannotbeempty');\n                    }\n                    if (empty($notifytargets[$idx])) {\n                        $this->errors['actions'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                    }\n                    if (!empty($notifyfrom[$idx]) && !rcube_utils::check_email($notifyfrom[$idx])) {\n                        $this->errors['actions'][$i]['from'] = $this->plugin->gettext('noemailwarning');\n                    }\n\n                    // skip empty options\n                    foreach ((array)$notifyoptions[$idx] as $opt_idx => $opt) {\n                        if (!strlen(trim($opt))) {\n                            unset($notifyoptions[$idx][$opt_idx]);\n                        }\n                    }\n\n                    $this->form['actions'][$i]['method']     = $notifymethods[$idx] . ':' . $notifytargets[$idx];\n                    $this->form['actions'][$i]['options']    = $notifyoptions[$idx];\n                    $this->form['actions'][$i]['message']    = $notifymessages[$idx];\n                    $this->form['actions'][$i]['from']       = $notifyfrom[$idx];\n                    $this->form['actions'][$i]['importance'] = $notifyimp[$idx];\n                    break;\n                }\n\n                $this->form['actions'][$i]['type'] = $type;\n                $i++;\n            }\n\n            if (!$this->errors && !$error) {\n                // save the script\n                if (!isset($this->script[$fid])) {\n                    $fid = $this->sieve->script->add_rule($this->form);\n                    $new = true;\n                }\n                else {\n                    $fid = $this->sieve->script->update_rule($fid, $this->form);\n                }\n\n                if ($fid !== false)\n                    $save = $this->save_script();\n\n                if ($save && $fid !== false) {\n                    $this->rc->output->show_message('managesieve.filtersaved', 'confirmation');\n                    if ($this->rc->task != 'mail') {\n                        $this->rc->output->command('parent.managesieve_updatelist',\n                            isset($new) ? 'add' : 'update',\n                            array(\n                                'name' => $this->form['name'],\n                                'id' => $fid,\n                                'disabled' => $this->form['disabled']\n                        ));\n                    }\n                    else {\n                        $this->rc->output->command('managesieve_dialog_close');\n                        $this->rc->output->send('iframe');\n                    }\n                }\n                else {\n                    $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n//                  $this->rc->output->send();\n                }\n            }\n        }\n\n        $this->send();\n    }\n\n    protected function send()\n    {\n        // Handle form action\n        if (isset($_GET['_framed']) || isset($_POST['_framed'])) {\n            if (isset($_GET['_newset']) || isset($_POST['_newset'])) {\n                $this->rc->output->send('managesieve.setedit');\n            }\n            else {\n                $this->rc->output->send('managesieve.filteredit');\n            }\n        }\n        else {\n            $this->rc->output->set_pagetitle($this->plugin->gettext('filters'));\n            $this->rc->output->send('managesieve.managesieve');\n        }\n    }\n\n    // return the filters list as HTML table\n    function filters_list($attrib)\n    {\n        // add id to message list table if not specified\n        if (!strlen($attrib['id']))\n            $attrib['id'] = 'rcmfilterslist';\n\n        // define list of cols to be displayed\n        $a_show_cols = array('name');\n\n        $result = $this->list_rules();\n\n        // create XHTML table\n        $out = $this->rc->table_output($attrib, $result, $a_show_cols, 'id');\n\n        // set client env\n        $this->rc->output->add_gui_object('filterslist', $attrib['id']);\n        $this->rc->output->include_script('list.js');\n\n        // add some labels to client\n        $this->rc->output->add_label('managesieve.filterdeleteconfirm');\n\n        return $out;\n    }\n\n    // return the filters list as <SELECT>\n    function filtersets_list($attrib, $no_env = false)\n    {\n        // add id to message list table if not specified\n        if (!strlen($attrib['id']))\n            $attrib['id'] = 'rcmfiltersetslist';\n\n        $list = $this->list_scripts();\n\n        if ($list) {\n            asort($list, SORT_LOCALE_STRING);\n        }\n\n        if (!empty($attrib['type']) && $attrib['type'] == 'list') {\n            // define list of cols to be displayed\n            $a_show_cols = array('name');\n\n            if ($list) {\n                foreach ($list as $idx => $set) {\n                    $scripts['S'.$idx] = $set;\n                    $result[] = array(\n                        'name' => $set,\n                        'id' => 'S'.$idx,\n                        'class' => !in_array($set, $this->active) ? 'disabled' : '',\n                    );\n                }\n            }\n\n            // create XHTML table\n            $out = $this->rc->table_output($attrib, $result, $a_show_cols, 'id');\n\n            $this->rc->output->set_env('filtersets', $scripts);\n            $this->rc->output->include_script('list.js');\n        }\n        else {\n            $select = new html_select(array('name' => '_set', 'id' => $attrib['id'],\n                'onchange' => $this->rc->task != 'mail' ? 'rcmail.managesieve_set()' : ''));\n\n            if ($list) {\n                foreach ($list as $set)\n                    $select->add($set, $set);\n            }\n\n            $out = $select->show($this->sieve->current);\n        }\n\n        // set client env\n        if (!$no_env) {\n            $this->rc->output->add_gui_object('filtersetslist', $attrib['id']);\n            $this->rc->output->add_label('managesieve.setdeleteconfirm');\n        }\n\n        return $out;\n    }\n\n    function filter_frame($attrib)\n    {\n        return $this->rc->output->frame($attrib, true);\n    }\n\n    function filterset_form($attrib)\n    {\n        if (!$attrib['id'])\n            $attrib['id'] = 'rcmfiltersetform';\n\n        $out = '<form name=\"filtersetform\" action=\"./\" method=\"post\" enctype=\"multipart/form-data\">'.\"\\n\";\n\n        $hiddenfields = new html_hiddenfield(array('name' => '_task', 'value' => $this->rc->task));\n        $hiddenfields->add(array('name' => '_action', 'value' => 'plugin.managesieve-save'));\n        $hiddenfields->add(array('name' => '_framed', 'value' => ($_POST['_framed'] || $_GET['_framed'] ? 1 : 0)));\n        $hiddenfields->add(array('name' => '_newset', 'value' => 1));\n\n        $out .= $hiddenfields->show();\n\n        $name     = rcube_utils::get_input_value('_name', rcube_utils::INPUT_POST);\n        $copy     = rcube_utils::get_input_value('_copy', rcube_utils::INPUT_POST);\n        $selected = rcube_utils::get_input_value('_from', rcube_utils::INPUT_POST);\n\n        // filter set name input\n        $input_name = new html_inputfield(array('name' => '_name', 'id' => '_name', 'size' => 30,\n            'class' => ($this->errors['name'] ? 'error' : '')));\n\n        $out .= sprintf('<label for=\"%s\"><b>%s:</b></label> %s<br /><br />',\n            '_name', rcube::Q($this->plugin->gettext('filtersetname')), $input_name->show($name));\n\n        $out .=\"\\n<fieldset class=\\\"itemlist\\\"><legend>\" . $this->plugin->gettext('filters') . \":</legend>\\n\";\n        $out .= '<input type=\"radio\" id=\"from_none\" name=\"_from\" value=\"none\"'\n            .(!$selected || $selected=='none' ? ' checked=\"checked\"' : '').'></input>';\n        $out .= sprintf('<label for=\"%s\">%s</label> ', 'from_none', rcube::Q($this->plugin->gettext('none')));\n\n        // filters set list\n        $list   = $this->list_scripts();\n        $select = new html_select(array('name' => '_copy', 'id' => '_copy'));\n\n        if (is_array($list)) {\n            asort($list, SORT_LOCALE_STRING);\n\n            if (!$copy)\n                $copy = $_SESSION['managesieve_current'];\n\n            foreach ($list as $set) {\n                $select->add($set, $set);\n            }\n\n            $out .= '<br /><input type=\"radio\" id=\"from_set\" name=\"_from\" value=\"set\"'\n                .($selected=='set' ? ' checked=\"checked\"' : '').'></input>';\n            $out .= sprintf('<label for=\"%s\">%s:</label> ', 'from_set', rcube::Q($this->plugin->gettext('fromset')));\n            $out .= $select->show($copy);\n        }\n\n        // script upload box\n        $upload = new html_inputfield(array('name' => '_file', 'id' => '_file', 'size' => 30,\n            'type' => 'file', 'class' => ($this->errors['file'] ? 'error' : '')));\n\n        $out .= '<br /><input type=\"radio\" id=\"from_file\" name=\"_from\" value=\"file\"'\n            .($selected=='file' ? ' checked=\"checked\"' : '').'></input>';\n        $out .= sprintf('<label for=\"%s\">%s:</label> ', 'from_file', rcube::Q($this->plugin->gettext('fromfile')));\n        $out .= $upload->show();\n        $out .= '</fieldset>';\n\n        $this->rc->output->add_gui_object('sieveform', 'filtersetform');\n\n        if ($this->errors['name'])\n            $this->add_tip('_name', $this->errors['name'], true);\n        if ($this->errors['file'])\n            $this->add_tip('_file', $this->errors['file'], true);\n\n        $this->print_tips();\n\n        return $out;\n    }\n\n\n    function filter_form($attrib)\n    {\n        if (!$attrib['id'])\n            $attrib['id'] = 'rcmfilterform';\n\n        $fid = rcube_utils::get_input_value('_fid', rcube_utils::INPUT_GPC);\n        $scr = isset($this->form) ? $this->form : $this->script[$fid];\n\n        $hiddenfields = new html_hiddenfield(array('name' => '_task', 'value' => $this->rc->task));\n        $hiddenfields->add(array('name' => '_action', 'value' => 'plugin.managesieve-save'));\n        $hiddenfields->add(array('name' => '_framed', 'value' => ($_POST['_framed'] || $_GET['_framed'] ? 1 : 0)));\n        $hiddenfields->add(array('name' => '_fid', 'value' => $fid));\n\n        $out = '<form name=\"filterform\" action=\"./\" method=\"post\">'.\"\\n\";\n        $out .= $hiddenfields->show();\n\n        // 'any' flag\n        if ((!isset($this->form) && empty($scr['tests']) && !empty($scr))\n            || (sizeof($scr['tests']) == 1 && $scr['tests'][0]['test'] == 'true' && !$scr['tests'][0]['not'])\n        ) {\n            $any = true;\n        }\n\n        // filter name input\n        $field_id = '_name';\n        $input_name = new html_inputfield(array('name' => '_name', 'id' => $field_id, 'size' => 30,\n            'class' => ($this->errors['name'] ? 'error' : '')));\n\n        if ($this->errors['name'])\n            $this->add_tip($field_id, $this->errors['name'], true);\n\n        if (isset($scr))\n            $input_name = $input_name->show($scr['name']);\n        else\n            $input_name = $input_name->show();\n\n        $out .= sprintf(\"\\n<label for=\\\"%s\\\"><b>%s:</b></label> %s\\n\",\n            $field_id, rcube::Q($this->plugin->gettext('filtername')), $input_name);\n\n        // filter set selector\n        if ($this->rc->task == 'mail') {\n            $out .= sprintf(\"\\n&nbsp;<label for=\\\"%s\\\"><b>%s:</b></label> %s\\n\",\n                $field_id, rcube::Q($this->plugin->gettext('filterset')),\n                $this->filtersets_list(array('id' => 'sievescriptname'), true));\n        }\n\n        $out .= '<br /><br /><fieldset><legend>' . rcube::Q($this->plugin->gettext('messagesrules')) . \"</legend>\\n\";\n\n        // any, allof, anyof radio buttons\n        $field_id = '_allof';\n        $input_join = new html_radiobutton(array('name' => '_join', 'id' => $field_id, 'value' => 'allof',\n            'onclick' => 'rule_join_radio(\\'allof\\')', 'class' => 'radio'));\n\n        if (isset($scr) && !$any)\n            $input_join = $input_join->show($scr['join'] ? 'allof' : '');\n        else\n            $input_join = $input_join->show();\n\n        $out .= sprintf(\"%s<label for=\\\"%s\\\">%s</label>&nbsp;\\n\",\n            $input_join, $field_id, rcube::Q($this->plugin->gettext('filterallof')));\n\n        $field_id = '_anyof';\n        $input_join = new html_radiobutton(array('name' => '_join', 'id' => $field_id, 'value' => 'anyof',\n            'onclick' => 'rule_join_radio(\\'anyof\\')', 'class' => 'radio'));\n\n        if (isset($scr) && !$any)\n            $input_join = $input_join->show($scr['join'] ? '' : 'anyof');\n        else\n            $input_join = $input_join->show('anyof'); // default\n\n        $out .= sprintf(\"%s<label for=\\\"%s\\\">%s</label>\\n\",\n            $input_join, $field_id, rcube::Q($this->plugin->gettext('filteranyof')));\n\n        $field_id = '_any';\n        $input_join = new html_radiobutton(array('name' => '_join', 'id' => $field_id, 'value' => 'any',\n            'onclick' => 'rule_join_radio(\\'any\\')', 'class' => 'radio'));\n\n        $input_join = $input_join->show($any ? 'any' : '');\n\n        $out .= sprintf(\"%s<label for=\\\"%s\\\">%s</label>\\n\",\n            $input_join, $field_id, rcube::Q($this->plugin->gettext('filterany')));\n\n        $rows_num = !empty($scr['tests']) ? sizeof($scr['tests']) : 1;\n\n        $out .= '<div id=\"rules\"'.($any ? ' style=\"display: none\"' : '').'>';\n        for ($x=0; $x<$rows_num; $x++)\n            $out .= $this->rule_div($fid, $x);\n        $out .= \"</div>\\n\";\n\n        $out .= \"</fieldset>\\n\";\n\n        // actions\n        $out .= '<fieldset><legend>' . rcube::Q($this->plugin->gettext('messagesactions')) . \"</legend>\\n\";\n\n        $rows_num = isset($scr) ? sizeof($scr['actions']) : 1;\n\n        $out .= '<div id=\"actions\">';\n        for ($x=0; $x<$rows_num; $x++)\n            $out .= $this->action_div($fid, $x);\n        $out .= \"</div>\\n\";\n\n        $out .= \"</fieldset>\\n\";\n\n        $this->print_tips();\n\n        if ($scr['disabled']) {\n            $this->rc->output->set_env('rule_disabled', true);\n        }\n        $this->rc->output->add_label(\n            'managesieve.ruledeleteconfirm',\n            'managesieve.actiondeleteconfirm'\n        );\n        $this->rc->output->add_gui_object('sieveform', 'filterform');\n\n        return $out;\n    }\n\n    function rule_div($fid, $id, $div=true)\n    {\n        $rule     = isset($this->form) ? $this->form['tests'][$id] : $this->script[$fid]['tests'][$id];\n        $rows_num = isset($this->form) ? sizeof($this->form['tests']) : sizeof($this->script[$fid]['tests']);\n\n        // headers select\n        $select_header = new html_select(array('name' => \"_header[]\", 'id' => 'header'.$id,\n            'onchange' => 'rule_header_select(' .$id .')'));\n\n        foreach ($this->headers as $index => $header) {\n            $header = $this->rc->text_exists($index) ? $this->plugin->gettext($index) : $header;\n            $select_header->add($header, $index);\n        }\n        $select_header->add($this->plugin->gettext('...'), '...');\n        if (in_array('body', $this->exts))\n            $select_header->add($this->plugin->gettext('body'), 'body');\n        $select_header->add($this->plugin->gettext('size'), 'size');\n        if (in_array('date', $this->exts)) {\n            $select_header->add($this->plugin->gettext('datetest'), 'date');\n            $select_header->add($this->plugin->gettext('currdate'), 'currentdate');\n        }\n\n        if (isset($rule['test'])) {\n            if (in_array($rule['test'], array('header', 'address', 'envelope'))) {\n                if (is_array($rule['arg1']) && count($rule['arg1']) == 1) {\n                    $rule['arg1'] = $rule['arg1'][0];\n                }\n\n                $matches = ($header = strtolower($rule['arg1'])) && isset($this->headers[$header]);\n                $test    = $matches ? $header : '...';\n            }\n            else if ($rule['test'] == 'exists') {\n                if (is_array($rule['arg']) && count($rule['arg']) == 1) {\n                    $rule['arg'] = $rule['arg'][0];\n                }\n\n                $matches = ($header = strtolower($rule['arg'])) && isset($this->headers[$header]);\n                $test    = $matches ? $header : '...';\n            }\n            else if (in_array($rule['test'], array('size', 'body', 'date', 'currentdate'))) {\n                $test = $rule['test'];\n            }\n            else if ($rule['test'] != 'true') {\n                $test = '...';\n            }\n        }\n\n        $aout = $select_header->show($test);\n\n        // custom headers input\n        if (isset($rule['test']) && in_array($rule['test'], array('header', 'address', 'envelope'))) {\n            $custom = (array) $rule['arg1'];\n            if (count($custom) == 1 && isset($this->headers[strtolower($custom[0])])) {\n                unset($custom);\n            }\n        }\n        else if (isset($rule['test']) && $rule['test'] == 'exists') {\n            $custom = (array) $rule['arg'];\n            if (count($custom) == 1 && isset($this->headers[strtolower($custom[0])])) {\n                unset($custom);\n            }\n        }\n\n        $tout = $this->list_input($id, 'custom_header', $custom, isset($custom),\n            $this->error_class($id, 'test', 'header', 'custom_header'), 15) . \"\\n\";\n\n        // matching type select (operator)\n        $select_op = new html_select(array('name' => \"_rule_op[]\", 'id' => 'rule_op'.$id,\n            'style' => 'display:' .($rule['test']!='size' ? 'inline' : 'none'),\n            'class' => 'operator_selector',\n            'onchange' => 'rule_op_select(this, '.$id.')'));\n        $select_op->add(rcube::Q($this->plugin->gettext('filtercontains')), 'contains');\n        $select_op->add(rcube::Q($this->plugin->gettext('filternotcontains')), 'notcontains');\n        $select_op->add(rcube::Q($this->plugin->gettext('filteris')), 'is');\n        $select_op->add(rcube::Q($this->plugin->gettext('filterisnot')), 'notis');\n        $select_op->add(rcube::Q($this->plugin->gettext('filterexists')), 'exists');\n        $select_op->add(rcube::Q($this->plugin->gettext('filternotexists')), 'notexists');\n        $select_op->add(rcube::Q($this->plugin->gettext('filtermatches')), 'matches');\n        $select_op->add(rcube::Q($this->plugin->gettext('filternotmatches')), 'notmatches');\n        if (in_array('regex', $this->exts)) {\n            $select_op->add(rcube::Q($this->plugin->gettext('filterregex')), 'regex');\n            $select_op->add(rcube::Q($this->plugin->gettext('filternotregex')), 'notregex');\n        }\n        if (in_array('relational', $this->exts)) {\n            $select_op->add(rcube::Q($this->plugin->gettext('countisgreaterthan')), 'count-gt');\n            $select_op->add(rcube::Q($this->plugin->gettext('countisgreaterthanequal')), 'count-ge');\n            $select_op->add(rcube::Q($this->plugin->gettext('countislessthan')), 'count-lt');\n            $select_op->add(rcube::Q($this->plugin->gettext('countislessthanequal')), 'count-le');\n            $select_op->add(rcube::Q($this->plugin->gettext('countequals')), 'count-eq');\n            $select_op->add(rcube::Q($this->plugin->gettext('countnotequals')), 'count-ne');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueisgreaterthan')), 'value-gt');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueisgreaterthanequal')), 'value-ge');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueislessthan')), 'value-lt');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueislessthanequal')), 'value-le');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueequals')), 'value-eq');\n            $select_op->add(rcube::Q($this->plugin->gettext('valuenotequals')), 'value-ne');\n        }\n\n        $test   = self::rule_test($rule);\n        $target = '';\n\n        // target(s) input\n        if (in_array($rule['test'], array('header', 'address', 'envelope'))) {\n            $target = $rule['arg2'];\n        }\n        else if (in_array($rule['test'], array('body', 'date', 'currentdate'))) {\n            $target = $rule['arg'];\n        }\n        else if ($rule['test'] == 'size') {\n            if (preg_match('/^([0-9]+)(K|M|G)?$/', $rule['arg'], $matches)) {\n                $sizetarget = $matches[1];\n                $sizeitem   = $matches[2];\n            }\n            else {\n                $sizetarget = $rule['arg'];\n                $sizeitem   = $rule['item'];\n            }\n        }\n\n        // (current)date part select\n        if (in_array('date', $this->exts) || in_array('currentdate', $this->exts)) {\n            $date_parts = array('date', 'iso8601', 'std11', 'julian', 'time',\n                'year', 'month', 'day', 'hour', 'minute', 'second', 'weekday', 'zone');\n            $select_dp = new html_select(array('name' => \"_rule_date_part[]\", 'id' => 'rule_date_part'.$id,\n                'style' => in_array($rule['test'], array('currentdate', 'date')) && !preg_match('/^(notcount|count)-/', $test) ? '' : 'display:none',\n                'class' => 'datepart_selector',\n            ));\n\n            foreach ($date_parts as $part) {\n                $select_dp->add(rcube::Q($this->plugin->gettext($part)), $part);\n            }\n\n            $tout .= $select_dp->show($rule['test'] == 'currentdate' || $rule['test'] == 'date' ? $rule['part'] : '');\n        }\n\n        $tout .= $select_op->show($test);\n        $tout .= $this->list_input($id, 'rule_target', $target,\n            $rule['test'] != 'size' && $rule['test'] != 'exists',\n            $this->error_class($id, 'test', 'target', 'rule_target')) . \"\\n\";\n\n        $select_size_op = new html_select(array('name' => \"_rule_size_op[]\", 'id' => 'rule_size_op'.$id));\n        $select_size_op->add(rcube::Q($this->plugin->gettext('filterover')), 'over');\n        $select_size_op->add(rcube::Q($this->plugin->gettext('filterunder')), 'under');\n\n        $tout .= '<div id=\"rule_size' .$id. '\" style=\"display:' . ($rule['test']=='size' ? 'inline' : 'none') .'\">';\n        $tout .= $select_size_op->show($rule['test']=='size' ? $rule['type'] : '');\n        $tout .= '<input type=\"text\" name=\"_rule_size_target[]\" id=\"rule_size_i'.$id.'\" value=\"'.$sizetarget.'\" size=\"10\" ' \n            . $this->error_class($id, 'test', 'sizetarget', 'rule_size_i') .' />\n            <label><input type=\"radio\" name=\"_rule_size_item['.$id.']\" value=\"\"'\n                . (!$sizeitem ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->rc->gettext('B').'</label>\n            <label><input type=\"radio\" name=\"_rule_size_item['.$id.']\" value=\"K\"'\n                . ($sizeitem=='K' ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->rc->gettext('KB').'</label>\n            <label><input type=\"radio\" name=\"_rule_size_item['.$id.']\" value=\"M\"'\n                . ($sizeitem=='M' ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->rc->gettext('MB').'</label>\n            <label><input type=\"radio\" name=\"_rule_size_item['.$id.']\" value=\"G\"'\n                . ($sizeitem=='G' ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->rc->gettext('GB').'</label>';\n        $tout .= '</div>';\n\n        // Advanced modifiers (address, envelope)\n        $select_mod = new html_select(array('name' => \"_rule_mod[]\", 'id' => 'rule_mod_op'.$id,\n            'onchange' => 'rule_mod_select(' .$id .')'));\n        $select_mod->add(rcube::Q($this->plugin->gettext('none')), '');\n        $select_mod->add(rcube::Q($this->plugin->gettext('address')), 'address');\n        if (in_array('envelope', $this->exts))\n            $select_mod->add(rcube::Q($this->plugin->gettext('envelope')), 'envelope');\n\n        $select_type = new html_select(array('name' => \"_rule_mod_type[]\", 'id' => 'rule_mod_type'.$id));\n        $select_type->add(rcube::Q($this->plugin->gettext('allparts')), 'all');\n        $select_type->add(rcube::Q($this->plugin->gettext('domain')), 'domain');\n        $select_type->add(rcube::Q($this->plugin->gettext('localpart')), 'localpart');\n        if (in_array('subaddress', $this->exts)) {\n            $select_type->add(rcube::Q($this->plugin->gettext('user')), 'user');\n            $select_type->add(rcube::Q($this->plugin->gettext('detail')), 'detail');\n        }\n\n        $need_mod = !in_array($rule['test'], array('size', 'body', 'date', 'currentdate'));\n        $mout = '<div id=\"rule_mod' .$id. '\" class=\"adv\"' . (!$need_mod ? ' style=\"display:none\"' : '') . '>';\n        $mout .= ' <span class=\"label\">' . rcube::Q($this->plugin->gettext('modifier')) . ' </span>';\n        $mout .= $select_mod->show($rule['test']);\n        $mout .= ' <span id=\"rule_mod_type' . $id . '\"';\n        $mout .= ' style=\"display:' . (in_array($rule['test'], array('address', 'envelope')) ? 'inline' : 'none') .'\">';\n        $mout .= rcube::Q($this->plugin->gettext('modtype')) . ' ';\n        $mout .= $select_type->show($rule['part']);\n        $mout .= '</span>';\n        $mout .= '</div>';\n\n        // Advanced modifiers (body transformations)\n        $select_mod = new html_select(array('name' => \"_rule_trans[]\", 'id' => 'rule_trans_op'.$id,\n            'onchange' => 'rule_trans_select(' .$id .')'));\n        $select_mod->add(rcube::Q($this->plugin->gettext('text')), 'text');\n        $select_mod->add(rcube::Q($this->plugin->gettext('undecoded')), 'raw');\n        $select_mod->add(rcube::Q($this->plugin->gettext('contenttype')), 'content');\n\n        $mout .= '<div id=\"rule_trans' .$id. '\" class=\"adv\"' . ($rule['test'] != 'body' ? ' style=\"display:none\"' : '') . '>';\n        $mout .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('modifier')) . '</span>';\n        $mout .= $select_mod->show($rule['part']);\n        $mout .= '<input type=\"text\" name=\"_rule_trans_type[]\" id=\"rule_trans_type'.$id\n            . '\" value=\"'.(is_array($rule['content']) ? implode(',', $rule['content']) : $rule['content'])\n            .'\" size=\"20\"' . ($rule['part'] != 'content' ? ' style=\"display:none\"' : '')\n            . $this->error_class($id, 'test', 'part', 'rule_trans_type') .' />';\n        $mout .= '</div>';\n\n        // Advanced modifiers (body transformations)\n        $select_comp = new html_select(array('name' => \"_rule_comp[]\", 'id' => 'rule_comp_op'.$id));\n        $select_comp->add(rcube::Q($this->plugin->gettext('default')), '');\n        $select_comp->add(rcube::Q($this->plugin->gettext('octet')), 'i;octet');\n        $select_comp->add(rcube::Q($this->plugin->gettext('asciicasemap')), 'i;ascii-casemap');\n        if (in_array('comparator-i;ascii-numeric', $this->exts)) {\n            $select_comp->add(rcube::Q($this->plugin->gettext('asciinumeric')), 'i;ascii-numeric');\n        }\n\n        // Comparators\n        $mout .= '<div id=\"rule_comp' .$id. '\" class=\"adv\"' . ($rule['test'] == 'size' ? ' style=\"display:none\"' : '') . '>';\n        $mout .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('comparator')) . '</span>';\n        $mout .= $select_comp->show($rule['comparator']);\n        $mout .= '</div>';\n\n        // Date header\n        if (in_array('date', $this->exts)) {\n            $mout .= '<div id=\"rule_date_header_div' .$id. '\" class=\"adv\"'. ($rule['test'] != 'date' ? ' style=\"display:none\"' : '') .'>';\n            $mout .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('dateheader')) . '</span>';\n            $mout .= '<input type=\"text\" name=\"_rule_date_header[]\" id=\"rule_date_header'.$id\n                . '\" value=\"'. rcube::Q($rule['test'] == 'date' ? $rule['header'] : '')\n                . '\" size=\"15\"' . $this->error_class($id, 'test', 'dateheader', 'rule_date_header') .' />';\n            $mout .= '</div>';\n        }\n\n        // Index\n        if (in_array('index', $this->exts)) {\n            $need_index = in_array($rule['test'], array('header', ', address', 'date'));\n            $mout .= '<div id=\"rule_index_div' .$id. '\" class=\"adv\"'. (!$need_index ? ' style=\"display:none\"' : '') .'>';\n            $mout .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('index')) . '</span>';\n            $mout .= '<input type=\"text\" name=\"_rule_index[]\" id=\"rule_index'.$id\n                . '\" value=\"'. ($rule['index'] ? intval($rule['index']) : '')\n                . '\" size=\"3\"' . $this->error_class($id, 'test', 'index', 'rule_index') .' />';\n            $mout .= '&nbsp;<input type=\"checkbox\" name=\"_rule_index_last[]\" id=\"rule_index_last'.$id\n                . '\" value=\"1\"' . (!empty($rule['last']) ? ' checked=\"checked\"' : '') . ' />'\n                . '<label for=\"rule_index_last'.$id.'\">'.rcube::Q($this->plugin->gettext('indexlast')).'</label>';\n            $mout .= '</div>';\n        }\n\n        // Build output table\n        $out = $div ? '<div class=\"rulerow\" id=\"rulerow' .$id .'\">'.\"\\n\" : '';\n        $out .= '<table><tr>';\n        $out .= '<td class=\"advbutton\">';\n        $out .= '<a href=\"#\" id=\"ruleadv' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('advancedopts')). '\"\n            onclick=\"rule_adv_switch(' . $id .', this)\" class=\"show\">&nbsp;&nbsp;</a>';\n        $out .= '</td>';\n        $out .= '<td class=\"rowactions\">' . $aout . '</td>';\n        $out .= '<td class=\"rowtargets\">' . $tout . \"\\n\";\n        $out .= '<div id=\"rule_advanced' .$id. '\" style=\"display:none\">' . $mout . '</div>';\n        $out .= '</td>';\n\n        // add/del buttons\n        $out .= '<td class=\"rowbuttons\">';\n        $out .= '<a href=\"#\" id=\"ruleadd' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('add')). '\"\n            onclick=\"rcmail.managesieve_ruleadd(' . $id .')\" class=\"button add\"></a>';\n        $out .= '<a href=\"#\" id=\"ruledel' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('del')). '\"\n            onclick=\"rcmail.managesieve_ruledel(' . $id .')\" class=\"button del' . ($rows_num<2 ? ' disabled' : '') .'\"></a>';\n        $out .= '</td>';\n        $out .= '</tr></table>';\n\n        $out .= $div ? \"</div>\\n\" : '';\n\n        return $out;\n    }\n\n    private static function rule_test(&$rule)\n    {\n        // first modify value/count tests with 'not' keyword\n        // we'll revert the meaning of operators\n        if ($rule['not'] && preg_match('/^(count|value)-([gteqnl]{2})/', $rule['type'], $m)) {\n            $rule['not'] = false;\n\n            switch ($m[2]) {\n            case 'gt': $rule['type'] = $m[1] . '-le'; break;\n            case 'ge': $rule['type'] = $m[1] . '-lt'; break;\n            case 'lt': $rule['type'] = $m[1] . '-ge'; break;\n            case 'le': $rule['type'] = $m[1] . '-gt'; break;\n            case 'eq': $rule['type'] = $m[1] . '-ne'; break;\n            case 'ne': $rule['type'] = $m[1] . '-eq'; break;\n            }\n        }\n        else if ($rule['not'] && $rule['test'] == 'size') {\n            $rule['not']  = false;\n            $rule['type'] = $rule['type'] == 'over' ? 'under' : 'over';\n        }\n\n        $set = array('header', 'address', 'envelope', 'body', 'date', 'currentdate');\n\n        // build test string supported by select element\n        if ($rule['size']) {\n            $test = $rule['type'];\n        }\n        else if (in_array($rule['test'], $set)) {\n            $test = ($rule['not'] ? 'not' : '') . ($rule['type'] ?: 'is');\n        }\n        else {\n            $test = ($rule['not'] ? 'not' : '') . $rule['test'];\n        }\n\n        return $test;\n    }\n\n    function action_div($fid, $id, $div=true)\n    {\n        $action   = isset($this->form) ? $this->form['actions'][$id] : $this->script[$fid]['actions'][$id];\n        $rows_num = isset($this->form) ? sizeof($this->form['actions']) : sizeof($this->script[$fid]['actions']);\n\n        $out = $div ? '<div class=\"actionrow\" id=\"actionrow' .$id .'\">'.\"\\n\" : '';\n\n        $out .= '<table><tr><td class=\"rowactions\">';\n\n        // action select\n        $select_action = new html_select(array('name' => \"_action_type[$id]\", 'id' => 'action_type'.$id,\n            'onchange' => 'action_type_select(' .$id .')'));\n        if (in_array('fileinto', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagemoveto')), 'fileinto');\n        if (in_array('fileinto', $this->exts) && in_array('copy', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagecopyto')), 'fileinto_copy');\n        $select_action->add(rcube::Q($this->plugin->gettext('messageredirect')), 'redirect');\n        if (in_array('copy', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagesendcopy')), 'redirect_copy');\n        if (in_array('reject', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagediscard')), 'reject');\n        else if (in_array('ereject', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagediscard')), 'ereject');\n        if (in_array('vacation', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagereply')), 'vacation');\n        $select_action->add(rcube::Q($this->plugin->gettext('messagedelete')), 'discard');\n        if (in_array('imapflags', $this->exts) || in_array('imap4flags', $this->exts)) {\n            $select_action->add(rcube::Q($this->plugin->gettext('setflags')), 'setflag');\n            $select_action->add(rcube::Q($this->plugin->gettext('addflags')), 'addflag');\n            $select_action->add(rcube::Q($this->plugin->gettext('removeflags')), 'removeflag');\n        }\n        if (in_array('variables', $this->exts)) {\n            $select_action->add(rcube::Q($this->plugin->gettext('setvariable')), 'set');\n        }\n        if (in_array('enotify', $this->exts) || in_array('notify', $this->exts)) {\n            $select_action->add(rcube::Q($this->plugin->gettext('notify')), 'notify');\n        }\n        $select_action->add(rcube::Q($this->plugin->gettext('messagekeep')), 'keep');\n        $select_action->add(rcube::Q($this->plugin->gettext('rulestop')), 'stop');\n\n        $select_type = $action['type'];\n        if (in_array($action['type'], array('fileinto', 'redirect')) && $action['copy']) {\n            $select_type .= '_copy';\n        }\n\n        $out .= $select_action->show($select_type);\n        $out .= '</td>';\n\n        // actions target inputs\n        $out .= '<td class=\"rowtargets\">';\n\n        // force domain selection in redirect email input\n        $domains = (array) $this->rc->config->get('managesieve_domains');\n        if (!empty($domains)) {\n            sort($domains);\n\n            $domain_select = new html_select(array('name' => \"_action_target_domain[$id]\", 'id' => 'action_target_domain'.$id));\n            $domain_select->add(array_combine($domains, $domains));\n\n            if ($action['type'] == 'redirect') {\n                $parts = explode('@', $action['target']);\n                if (!empty($parts)) {\n                    $action['domain'] = array_pop($parts);\n                    $action['target'] = implode('@', $parts);\n                }\n            }\n        }\n\n        // redirect target\n        $out .= '<span id=\"redirect_target' . $id . '\" style=\"white-space:nowrap;'\n            . ' display:' . ($action['type'] == 'redirect' ? 'inline' : 'none') . '\">'\n            . '<input type=\"text\" name=\"_action_target['.$id.']\" id=\"action_target' .$id. '\"'\n            . ' value=\"' .($action['type'] == 'redirect' ? rcube::Q($action['target'], 'strict', false) : '') . '\"'\n            . (!empty($domains) ? ' size=\"20\"' : ' size=\"35\"')\n            . $this->error_class($id, 'action', 'target', 'action_target') .' />'\n            . (!empty($domains) ? ' @ ' . $domain_select->show($action['domain']) : '')\n            . '</span>';\n\n        // (e)reject target\n        $out .= '<textarea name=\"_action_target_area['.$id.']\" id=\"action_target_area' .$id. '\" '\n            .'rows=\"3\" cols=\"35\" '. $this->error_class($id, 'action', 'targetarea', 'action_target_area')\n            .'style=\"display:' .(in_array($action['type'], array('reject', 'ereject')) ? 'inline' : 'none') .'\">'\n            . (in_array($action['type'], array('reject', 'ereject')) ? rcube::Q($action['target'], 'strict', false) : '')\n            . \"</textarea>\\n\";\n\n        // vacation\n        $vsec      = in_array('vacation-seconds', $this->exts);\n        $auto_addr = $this->rc->config->get('managesieve_vacation_addresses_init');\n        $addresses = isset($action['addresses']) || !$auto_addr ? (array) $action['addresses'] : $this->user_emails();\n\n        $out .= '<div id=\"action_vacation' .$id.'\" style=\"display:' .($action['type']=='vacation' ? 'inline' : 'none') .'\">';\n        $out .= '<span class=\"label\">'. rcube::Q($this->plugin->gettext('vacationreason')) .'</span><br />'\n            .'<textarea name=\"_action_reason['.$id.']\" id=\"action_reason' .$id. '\" '\n            .'rows=\"3\" cols=\"35\" '. $this->error_class($id, 'action', 'reason', 'action_reason') . '>'\n            . rcube::Q($action['reason'], 'strict', false) . \"</textarea>\\n\";\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('vacationsubject')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_subject['.$id.']\" id=\"action_subject'.$id.'\" '\n            .'value=\"' . (is_array($action['subject']) ? rcube::Q(implode(', ', $action['subject']), 'strict', false) : $action['subject']) . '\" size=\"35\" '\n            . $this->error_class($id, 'action', 'subject', 'action_subject') .' />';\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('vacationfrom')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_from['.$id.']\" id=\"action_from'.$id.'\" '\n            .'value=\"' . $action['from'] . '\" size=\"35\" '\n            . $this->error_class($id, 'action', 'from', 'action_from') .' />';\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('vacationaddr')) . '</span><br />'\n            . $this->list_input($id, 'action_addresses', $addresses, true,\n                $this->error_class($id, 'action', 'addresses', 'action_addresses'), 30)\n            . html::a(array('href' => '#', 'onclick' => rcmail_output::JS_OBJECT_NAME . \".managesieve_vacation_addresses($id)\"),\n                rcube::Q($this->plugin->gettext('filladdresses')));\n        $out .= '<br /><span class=\"label\">' . rcube::Q($this->plugin->gettext($vsec ? 'vacationinterval' : 'vacationdays')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_interval['.$id.']\" id=\"action_interval'.$id.'\" '\n            .'value=\"' .rcube::Q(rcube_sieve_vacation::vacation_interval($action), 'strict', false) . '\" size=\"2\" '\n            . $this->error_class($id, 'action', 'interval', 'action_interval') .' />';\n        if ($vsec) {\n            $out .= '&nbsp;<label><input type=\"radio\" name=\"_action_interval_type['.$id.']\" value=\"days\"'\n                . (!isset($action['seconds']) ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->plugin->gettext('days').'</label>'\n                . '&nbsp;<label><input type=\"radio\" name=\"_action_interval_type['.$id.']\" value=\"seconds\"'\n                . (isset($action['seconds']) ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->plugin->gettext('seconds').'</label>';\n        }\n        $out .= '</div>';\n\n        // flags\n        $flags = array(\n            'read'      => '\\\\Seen',\n            'answered'  => '\\\\Answered',\n            'flagged'   => '\\\\Flagged',\n            'deleted'   => '\\\\Deleted',\n            'draft'     => '\\\\Draft',\n        );\n        $flags_target = (array)$action['target'];\n\n        $out .= '<div id=\"action_flags' .$id.'\" style=\"display:' \n            . (preg_match('/^(set|add|remove)flag$/', $action['type']) ? 'inline' : 'none') . '\"'\n            . $this->error_class($id, 'action', 'flags', 'action_flags') . '>';\n        foreach ($flags as $fidx => $flag) {\n            $out .= '<input type=\"checkbox\" name=\"_action_flags[' .$id .'][]\" value=\"' . $flag . '\"'\n                . (in_array_nocase($flag, $flags_target) ? 'checked=\"checked\"' : '') . ' />'\n                . rcube::Q($this->plugin->gettext('flag'.$fidx)) .'<br>';\n        }\n        $out .= '</div>';\n\n        // set variable\n        $set_modifiers = array(\n            'lower',\n            'upper',\n            'lowerfirst',\n            'upperfirst',\n            'quotewildcard',\n            'length'\n        );\n\n        $out .= '<div id=\"action_set' .$id.'\" style=\"display:' .($action['type']=='set' ? 'inline' : 'none') .'\">';\n        $out .= '<span class=\"label\">' .rcube::Q($this->plugin->gettext('setvarname')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_varname['.$id.']\" id=\"action_varname'.$id.'\" '\n            .'value=\"' . rcube::Q($action['name']) . '\" size=\"35\" '\n            . $this->error_class($id, 'action', 'name', 'action_varname') .' />';\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('setvarvalue')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_varvalue['.$id.']\" id=\"action_varvalue'.$id.'\" '\n            .'value=\"' . rcube::Q($action['value']) . '\" size=\"35\" '\n            . $this->error_class($id, 'action', 'value', 'action_varvalue') .' />';\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('setvarmodifiers')) . '</span><br />';\n        foreach ($set_modifiers as $s_m) {\n            $s_m_id = 'action_varmods' . $id . $s_m;\n            $out .= sprintf('<input type=\"checkbox\" name=\"_action_varmods[%s][]\" value=\"%s\" id=\"%s\"%s />%s<br>',\n                $id, $s_m, $s_m_id,\n                (array_key_exists($s_m, (array)$action) && $action[$s_m] ? ' checked=\"checked\"' : ''),\n                rcube::Q($this->plugin->gettext('var' . $s_m)));\n        }\n        $out .= '</div>';\n\n        // notify\n        $notify_methods     = (array) $this->rc->config->get('managesieve_notify_methods');\n        $importance_options = $this->notify_importance_options;\n\n        if (empty($notify_methods)) {\n            $notify_methods = $this->notify_methods;\n        }\n\n        list($method, $target) = explode(':', $action['method'], 2);\n        $method = strtolower($method);\n\n        if ($method && !in_array($method, $notify_methods)) {\n            $notify_methods[] = $method;\n        }\n\n        $select_method = new html_select(array(\n            'name'  => \"_action_notifymethod[$id]\",\n            'id'    => \"_action_notifymethod$id\",\n            'class' => $this->error_class($id, 'action', 'method', 'action_notifymethod'),\n        ));\n        foreach ($notify_methods as $m_n) {\n            $select_method->add(rcube::Q($this->rc->text_exists('managesieve.notifymethod'.$m_n) ? $this->plugin->gettext('managesieve.notifymethod'.$m_n) : $m_n), $m_n);\n        }\n\n        $select_importance = new html_select(array(\n            'name'  => \"_action_notifyimportance[$id]\",\n            'id'    => \"_action_notifyimportance$id\",\n            'class' => $this->error_class($id, 'action', 'importance', 'action_notifyimportance')\n        ));\n        foreach ($importance_options as $io_v => $io_n) {\n            $select_importance->add(rcube::Q($this->plugin->gettext($io_n)), $io_v);\n        }\n\n        // @TODO: nice UI for mailto: (other methods too) URI parameters\n        $out .= '<div id=\"action_notify' .$id.'\" style=\"display:' .($action['type'] == 'notify' ? 'inline' : 'none') .'\">';\n        $out .= '<span class=\"label\">' .rcube::Q($this->plugin->gettext('notifytarget')) . '</span><br />'\n            . $select_method->show($method)\n            .'<input type=\"text\" name=\"_action_notifytarget['.$id.']\" id=\"action_notifytarget'.$id.'\" '\n            .'value=\"' . rcube::Q($target) . '\" size=\"25\" '\n            . $this->error_class($id, 'action', 'target', 'action_notifytarget') .' />';\n        $out .= '<br /><span class=\"label\">'. rcube::Q($this->plugin->gettext('notifymessage')) .'</span><br />'\n            .'<textarea name=\"_action_notifymessage['.$id.']\" id=\"action_notifymessage' .$id. '\" '\n            .'rows=\"3\" cols=\"35\" '. $this->error_class($id, 'action', 'message', 'action_notifymessage') . '>'\n            . rcube::Q($action['message'], 'strict', false) . \"</textarea>\\n\";\n        if (in_array('enotify', $this->exts)) {\n            $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('notifyfrom')) . '</span><br />'\n                .'<input type=\"text\" name=\"_action_notifyfrom['.$id.']\" id=\"action_notifyfrom'.$id.'\" '\n                .'value=\"' . rcube::Q($action['from']) . '\" size=\"35\" '\n                . $this->error_class($id, 'action', 'from', 'action_notifyfrom') .' />';\n        }\n        $out .= '<br /><span class=\"label\">' . rcube::Q($this->plugin->gettext('notifyimportance')) . '</span><br />';\n        $out .= $select_importance->show($action['importance'] ? (int) $action['importance'] : 2);\n        $out .= '<div id=\"action_notifyoption_div' . $id  . '\">'\n            .'<span class=\"label\">' . rcube::Q($this->plugin->gettext('notifyoptions')) . '</span><br />'\n            .$this->list_input($id, 'action_notifyoption', (array)$action['options'], true,\n                $this->error_class($id, 'action', 'options', 'action_notifyoption'), 30) . '</div>';\n        $out .= '</div>';\n\n        // mailbox select\n        if ($action['type'] == 'fileinto') {\n            $mailbox = $this->mod_mailbox($action['target'], 'out');\n            // make sure non-existing (or unsubscribed) mailbox is listed (#1489956)\n            $additional = array($mailbox);\n        }\n        else {\n            $mailbox = '';\n        }\n\n        $select = $this->rc->folder_selector(array(\n            'realnames'  => false,\n            'maxlength'  => 100,\n            'id'         => 'action_mailbox' . $id,\n            'name'       => \"_action_mailbox[$id]\",\n            'style'      => 'display:'.(empty($action['type']) || $action['type'] == 'fileinto' ? 'inline' : 'none'),\n            'additional' => $additional,\n        ));\n        $out .= $select->show($mailbox);\n        $out .= '</td>';\n\n        // add/del buttons\n        $out .= '<td class=\"rowbuttons\">';\n        $out .= '<a href=\"#\" id=\"actionadd' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('add')). '\"\n            onclick=\"rcmail.managesieve_actionadd(' . $id .')\" class=\"button add\"></a>';\n        $out .= '<a href=\"#\" id=\"actiondel' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('del')). '\"\n            onclick=\"rcmail.managesieve_actiondel(' . $id .')\" class=\"button del' . ($rows_num<2 ? ' disabled' : '') .'\"></a>';\n        $out .= '</td>';\n\n        $out .= '</tr></table>';\n\n        $out .= $div ? \"</div>\\n\" : '';\n\n        return $out;\n    }\n\n    protected function genid()\n    {\n        return preg_replace('/[^0-9]/', '', microtime(true));\n    }\n\n    protected function strip_value($str, $allow_html = false, $trim = true)\n    {\n        if (is_array($str)) {\n            foreach ($str as $idx => $val) {\n                $val = $this->strip_value($val, $allow_html, $trim);\n\n                if ($val === '') {\n                    unset($str[$idx]);\n                }\n            }\n\n            return $str;\n        }\n\n        if (!$allow_html) {\n            $str = strip_tags($str);\n        }\n\n        return $trim ? trim($str) : $str;\n    }\n\n    protected function error_class($id, $type, $target, $elem_prefix='')\n    {\n        // TODO: tooltips\n        if (($type == 'test' && ($str = $this->errors['tests'][$id][$target])) ||\n            ($type == 'action' && ($str = $this->errors['actions'][$id][$target]))\n        ) {\n            $this->add_tip($elem_prefix.$id, $str, true);\n            return ' class=\"error\"';\n        }\n\n        return '';\n    }\n\n    protected function add_tip($id, $str, $error=false)\n    {\n        if ($error)\n            $str = html::span('sieve error', $str);\n\n        $this->tips[] = array($id, $str);\n    }\n\n    protected function print_tips()\n    {\n        if (empty($this->tips))\n            return;\n\n        $script = rcmail_output::JS_OBJECT_NAME.'.managesieve_tip_register('.json_encode($this->tips).');';\n        $this->rc->output->add_script($script, 'foot');\n    }\n\n    protected function list_input($id, $name, $value, $enabled, $class, $size=null)\n    {\n        $value = (array) $value;\n        $value = array_map(array('rcube', 'Q'), $value);\n        $value = implode(\"\\n\", $value);\n\n        return '<textarea data-type=\"list\" name=\"_' . $name . '['.$id.']\" id=\"' . $name.$id . '\"'\n            . ($enabled ? '' : ' disabled=\"disabled\"')\n            . ($size ? ' data-size=\"'.$size.'\"' : '')\n            . $class\n            . ' style=\"display:none\">' . $value . '</textarea>';\n    }\n\n    /**\n     * Validate input for date part elements\n     */\n    protected function validate_date_part($type, $value)\n    {\n        // we do simple validation of date/part format\n        switch ($type) {\n            case 'date': // yyyy-mm-dd\n                return preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $value);\n            case 'iso8601':\n                return preg_match('/^[0-9: .,ZWT+-]+$/', $value);\n            case 'std11':\n                return preg_match('/^((Sun|Mon|Tue|Wed|Thu|Fri|Sat),\\s+)?[0-9]{1,2}\\s+'\n                    . '(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+[0-9]{2,4}\\s+'\n                    . '[0-9]{2}:[0-9]{2}(:[0-9]{2})?\\s+([+-]*[0-9]{4}|[A-Z]{1,3})$', $value);\n            case 'julian':\n                return preg_match('/^[0-9]+$/', $value);\n            case 'time': // hh:mm:ss\n                return preg_match('/^[0-9]{2}:[0-9]{2}:[0-9]{2}$/', $value);\n            case 'year':\n                return preg_match('/^[0-9]{4}$/', $value);\n            case 'month':\n                return preg_match('/^[0-9]{2}$/', $value) && $value > 0 && $value < 13;\n            case 'day':\n                return preg_match('/^[0-9]{2}$/', $value) && $value > 0 && $value < 32;\n            case 'hour':\n                return preg_match('/^[0-9]{2}$/', $value) && $value < 24;\n            case 'minute':\n                return preg_match('/^[0-9]{2}$/', $value) && $value < 60;\n            case 'second':\n                // According to RFC5260, seconds can be from 00 to 60\n                return preg_match('/^[0-9]{2}$/', $value) && $value < 61;\n            case 'weekday':\n                return preg_match('/^[0-9]$/', $value) && $value < 7;\n            case 'zone':\n                return preg_match('/^[+-][0-9]{4}$/', $value);\n        }\n    }\n\n    /**\n     * Converts mailbox name from/to UTF7-IMAP from/to internal Sieve encoding\n     * with delimiter replacement.\n     *\n     * @param string $mailbox Mailbox name\n     * @param string $mode    Conversion direction ('in'|'out')\n     *\n     * @return string Mailbox name\n     */\n    protected function mod_mailbox($mailbox, $mode = 'out')\n    {\n        $delimiter         = $_SESSION['imap_delimiter'];\n        $replace_delimiter = $this->rc->config->get('managesieve_replace_delimiter');\n        $mbox_encoding     = $this->rc->config->get('managesieve_mbox_encoding', 'UTF7-IMAP');\n\n        if ($mode == 'out') {\n            $mailbox = rcube_charset::convert($mailbox, $mbox_encoding, 'UTF7-IMAP');\n            if ($replace_delimiter && $replace_delimiter != $delimiter)\n                $mailbox = str_replace($replace_delimiter, $delimiter, $mailbox);\n        }\n        else {\n            $mailbox = rcube_charset::convert($mailbox, 'UTF7-IMAP', $mbox_encoding);\n            if ($replace_delimiter && $replace_delimiter != $delimiter)\n                $mailbox = str_replace($delimiter, $replace_delimiter, $mailbox);\n        }\n\n        return $mailbox;\n    }\n\n    /**\n     * List sieve scripts\n     *\n     * @return array Scripts list\n     */\n    public function list_scripts()\n    {\n        if ($this->list !== null) {\n            return $this->list;\n        }\n\n        $this->list = $this->sieve->get_scripts();\n\n        // Handle active script(s) and list of scripts according to Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            // Skip protected names\n            foreach ((array)$this->list as $idx => $name) {\n                $_name = strtoupper($name);\n                if ($_name == 'MASTER')\n                    $master_script = $name;\n                else if ($_name == 'MANAGEMENT')\n                    $management_script = $name;\n                else if($_name == 'USER')\n                    $user_script = $name;\n                else\n                    continue;\n\n                unset($this->list[$idx]);\n            }\n\n            // get active script(s), read USER script\n            if ($user_script) {\n                $extension = $this->rc->config->get('managesieve_filename_extension', '.sieve');\n                $filename_regex = '/'.preg_quote($extension, '/').'$/';\n                $_SESSION['managesieve_user_script'] = $user_script;\n\n                $this->sieve->load($user_script);\n\n                foreach ($this->sieve->script->as_array() as $rules) {\n                    foreach ($rules['actions'] as $action) {\n                        if ($action['type'] == 'include' && empty($action['global'])) {\n                            $name = preg_replace($filename_regex, '', $action['target']);\n                            // make sure the script exist\n                            if (in_array($name, $this->list)) {\n                                $this->active[] = $name;\n                            }\n                        }\n                    }\n                }\n            }\n            // create USER script if it doesn't exist\n            else {\n                $content = \"# USER Management Script\\n\"\n                    .\"#\\n\"\n                    .\"# This script includes the various active sieve scripts\\n\"\n                    .\"# it is AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY!\\n\"\n                    .\"#\\n\"\n                    .\"# For more information, see http://wiki.kolab.org/KEP:14#USER\\n\"\n                    .\"#\\n\";\n                if ($this->sieve->save_script('USER', $content)) {\n                    $_SESSION['managesieve_user_script'] = 'USER';\n                    if (empty($this->master_file))\n                        $this->sieve->activate('USER');\n                }\n            }\n        }\n        else if (!empty($this->list)) {\n            // Get active script name\n            if ($active = $this->sieve->get_active()) {\n                $this->active = array($active);\n            }\n\n            // Hide scripts from config\n            $exceptions = $this->rc->config->get('managesieve_filename_exceptions');\n            if (!empty($exceptions)) {\n                $this->list = array_diff($this->list, (array)$exceptions);\n            }\n        }\n\n        // reindex\n        if (!empty($this->list)) {\n            $this->list = array_values($this->list);\n        }\n\n        return $this->list;\n    }\n\n    /**\n     * Removes sieve script\n     *\n     * @param string $name Script name\n     *\n     * @return bool True on success, False on failure\n     */\n    public function remove_script($name)\n    {\n        $result = $this->sieve->remove($name);\n\n        // Kolab's KEP:14\n        if ($result && $this->rc->config->get('managesieve_kolab_master')) {\n            $this->deactivate_script($name);\n        }\n\n        return $result;\n    }\n\n    /**\n     * Activates sieve script\n     *\n     * @param string $name Script name\n     *\n     * @return bool True on success, False on failure\n     */\n    public function activate_script($name)\n    {\n        // Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            $extension   = $this->rc->config->get('managesieve_filename_extension', '.sieve');\n            $user_script = $_SESSION['managesieve_user_script'];\n\n            // if the script is not active...\n            if ($user_script && array_search($name, $this->active) === false) {\n                // ...rewrite USER file adding appropriate include command\n                if ($this->sieve->load($user_script)) {\n                    $script = $this->sieve->script->as_array();\n                    $list   = array();\n                    $regexp = '/' . preg_quote($extension, '/') . '$/';\n\n                    // Create new include entry\n                    $rule = array(\n                        'actions' => array(\n                            0 => array(\n                                'target'   => $name.$extension,\n                                'type'     => 'include',\n                                'personal' => true,\n                    )));\n\n                    // get all active scripts for sorting\n                    foreach ($script as $rid => $rules) {\n                        foreach ($rules['actions'] as $action) {\n                            if ($action['type'] == 'include' && empty($action['global'])) {\n                                $target = $extension ? preg_replace($regexp, '', $action['target']) : $action['target'];\n                                $list[] = $target;\n                            }\n                        }\n                    }\n                    $list[] = $name;\n\n                    // Sort and find current script position\n                    asort($list, SORT_LOCALE_STRING);\n                    $list = array_values($list);\n                    $index = array_search($name, $list);\n\n                    // add rule at the end of the script\n                    if ($index === false || $index == count($list)-1) {\n                        $this->sieve->script->add_rule($rule);\n                    }\n                    // add rule at index position\n                    else {\n                        $script2 = array();\n                        foreach ($script as $rid => $rules) {\n                            if ($rid == $index) {\n                                $script2[] = $rule;\n                            }\n                            $script2[] = $rules;\n                        }\n                        $this->sieve->script->content = $script2;\n                    }\n\n                    $result = $this->sieve->save();\n                    if ($result) {\n                        $this->active[] = $name;\n                    }\n                }\n            }\n        }\n        else {\n            $result = $this->sieve->activate($name);\n            if ($result)\n                $this->active = array($name);\n        }\n\n        return $result;\n    }\n\n    /**\n     * Deactivates sieve script\n     *\n     * @param string $name Script name\n     *\n     * @return bool True on success, False on failure\n     */\n    public function deactivate_script($name)\n    {\n        // Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            $extension   = $this->rc->config->get('managesieve_filename_extension', '.sieve');\n            $user_script = $_SESSION['managesieve_user_script'];\n\n            // if the script is active...\n            if ($user_script && ($key = array_search($name, $this->active)) !== false) {\n                // ...rewrite USER file removing appropriate include command\n                if ($this->sieve->load($user_script)) {\n                    $script = $this->sieve->script->as_array();\n                    $name   = $name.$extension;\n\n                    foreach ($script as $rid => $rules) {\n                        foreach ($rules['actions'] as $action) {\n                            if ($action['type'] == 'include' && empty($action['global'])\n                                && $action['target'] == $name\n                            ) {\n                                break 2;\n                            }\n                        }\n                    }\n\n                    // Entry found\n                    if ($rid < count($script)) {\n                        $this->sieve->script->delete_rule($rid);\n                        $result = $this->sieve->save();\n                        if ($result) {\n                            unset($this->active[$key]);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            $result = $this->sieve->deactivate();\n            if ($result)\n                $this->active = array();\n        }\n\n        return $result;\n    }\n\n    /**\n     * Saves current script (adding some variables)\n     */\n    public function save_script($name = null)\n    {\n        // Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            $this->sieve->script->set_var('EDITOR', self::PROGNAME);\n            $this->sieve->script->set_var('EDITOR_VERSION', self::VERSION);\n        }\n\n        return $this->sieve->save($name);\n    }\n\n    /**\n     * Returns list of rules from the current script\n     *\n     * @return array List of rules\n     */\n    public function list_rules()\n    {\n        $result = array();\n        $i      = 1;\n\n        foreach ($this->script as $idx => $filter) {\n            if (empty($filter['actions'])) {\n                continue;\n            }\n            $fname = $filter['name'] ?: \"#$i\";\n            $result[] = array(\n                'id'    => $idx,\n                'name'  => $fname,\n                'class' => $filter['disabled'] ? 'disabled' : '',\n            );\n            $i++;\n        }\n\n        return $result;\n    }\n\n    /**\n     * Initializes internal script data\n     */\n    protected function init_script()\n    {\n        if (!$this->sieve->script) {\n            return;\n        }\n\n        $this->script = $this->sieve->script->as_array();\n\n        $headers    = array();\n        $exceptions = array('date', 'currentdate', 'size', 'body');\n\n        // find common headers used in script, will be added to the list\n        // of available (predefined) headers (#1489271)\n        foreach ($this->script as $rule) {\n            foreach ((array) $rule['tests'] as $test) {\n                if ($test['test'] == 'header') {\n                    foreach ((array) $test['arg1'] as $header) {\n                        $lc_header = strtolower($header);\n\n                        // skip special names to not confuse UI\n                        if (in_array($lc_header, $exceptions)) {\n                            continue;\n                        }\n\n                        if (!isset($this->headers[$lc_header]) && !isset($headers[$lc_header])) {\n                            $headers[$lc_header] = $header;\n                        }\n                    }\n                }\n            }\n        }\n\n        ksort($headers);\n\n        $this->headers += $headers;\n    }\n\n    /**\n     * Get all e-mail addresses of the user\n     */\n    protected function user_emails()\n    {\n        $addresses = $this->rc->user->list_emails();\n\n        foreach ($addresses as $idx => $email) {\n            $addresses[$idx] = $email['email'];\n        }\n\n        $addresses = array_unique($addresses);\n        sort($addresses);\n\n        return $addresses;\n    }\n}\n", "/**\n * (Manage)Sieve Filters plugin\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (c) 2012-2014, The Roundcube Dev Team\n *\n * The JavaScript code in this page is free software: you can redistribute it\n * and/or modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, either version 3 of\n * the License, or (at your option) any later version.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n */\n\nif (window.rcmail) {\n  rcmail.addEventListener('init', function(evt) {\n    // add managesieve-create command to message_commands array,\n    // so it's state will be updated on message selection/unselection\n    if (rcmail.env.task == 'mail') {\n      if (rcmail.env.action != 'show')\n        rcmail.env.message_commands.push('managesieve-create');\n      else\n        rcmail.enable_command('managesieve-create', true);\n    }\n\n    if (rcmail.env.task == 'mail' || rcmail.env.action.startsWith('plugin.managesieve')) {\n      // Create layer for form tips\n      if (!rcmail.env.framed) {\n        rcmail.env.ms_tip_layer = $('<div id=\"managesieve-tip\" class=\"popupmenu\"></div>');\n        rcmail.env.ms_tip_layer.appendTo(document.body);\n      }\n    }\n\n    // register commands\n    rcmail.register_command('plugin.managesieve-save', function() { rcmail.managesieve_save() });\n    rcmail.register_command('plugin.managesieve-act', function() { rcmail.managesieve_act() });\n    rcmail.register_command('plugin.managesieve-add', function() { rcmail.managesieve_add() });\n    rcmail.register_command('plugin.managesieve-del', function() { rcmail.managesieve_del() });\n    rcmail.register_command('plugin.managesieve-move', function() { rcmail.managesieve_move() });\n    rcmail.register_command('plugin.managesieve-setadd', function() { rcmail.managesieve_setadd() });\n    rcmail.register_command('plugin.managesieve-setdel', function() { rcmail.managesieve_setdel() });\n    rcmail.register_command('plugin.managesieve-setact', function() { rcmail.managesieve_setact() });\n    rcmail.register_command('plugin.managesieve-setget', function() { rcmail.managesieve_setget() });\n\n    if (rcmail.env.action.startsWith('plugin.managesieve')) {\n      if (rcmail.gui_objects.sieveform) {\n        rcmail.enable_command('plugin.managesieve-save', true);\n        sieve_form_init();\n      }\n      else {\n        rcmail.enable_command('plugin.managesieve-add', 'plugin.managesieve-setadd', !rcmail.env.sieveconnerror);\n      }\n\n      var setcnt, set = rcmail.env.currentset;\n\n      if (rcmail.gui_objects.filterslist) {\n        rcmail.filters_list = new rcube_list_widget(rcmail.gui_objects.filterslist,\n          {multiselect:false, draggable:true, keyboard:true});\n\n        rcmail.filters_list\n          .addEventListener('select', function(e) { rcmail.managesieve_select(e); })\n          .addEventListener('dragstart', function(e) { rcmail.managesieve_dragstart(e); })\n          .addEventListener('dragend', function(e) { rcmail.managesieve_dragend(e); })\n          .addEventListener('initrow', function(row) {\n            row.obj.onmouseover = function() { rcmail.managesieve_focus_filter(row); };\n            row.obj.onmouseout = function() { rcmail.managesieve_unfocus_filter(row); };\n          })\n          .init();\n      }\n\n      if (rcmail.gui_objects.filtersetslist) {\n        rcmail.filtersets_list = new rcube_list_widget(rcmail.gui_objects.filtersetslist,\n          {multiselect:false, draggable:false, keyboard:true});\n\n        rcmail.filtersets_list.init().focus();\n\n        if (set != null) {\n          set = rcmail.managesieve_setid(set);\n          rcmail.filtersets_list.select(set);\n        }\n\n        // attach select event after initial record was selected\n        rcmail.filtersets_list.addEventListener('select', function(e) { rcmail.managesieve_setselect(e); });\n\n        setcnt = rcmail.filtersets_list.rowcount;\n        rcmail.enable_command('plugin.managesieve-set', true);\n        rcmail.enable_command('plugin.managesieve-setact', 'plugin.managesieve-setget', setcnt);\n        rcmail.enable_command('plugin.managesieve-setdel', setcnt > 1);\n\n        // Fix dragging filters over sets list\n        $('tr', rcmail.gui_objects.filtersetslist).each(function (i, e) { rcmail.managesieve_fixdragend(e); });\n      }\n    }\n\n    if (rcmail.gui_objects.sieveform && rcmail.env.rule_disabled)\n      $('#disabled').attr('checked', true);\n  });\n};\n\n/*********************************************************/\n/*********       Managesieve UI methods          *********/\n/*********************************************************/\n\nrcube_webmail.prototype.managesieve_add = function()\n{\n  this.load_managesieveframe();\n  this.filters_list.clear_selection();\n};\n\nrcube_webmail.prototype.managesieve_del = function()\n{\n  var id = this.filters_list.get_single_selection();\n  if (confirm(this.get_label('managesieve.filterdeleteconfirm'))) {\n    var lock = this.set_busy(true, 'loading');\n    this.http_post('plugin.managesieve-action',\n      '_act=delete&_fid='+this.filters_list.rows[id].uid, lock);\n  }\n};\n\nrcube_webmail.prototype.managesieve_act = function()\n{\n  var id = this.filters_list.get_single_selection(),\n    lock = this.set_busy(true, 'loading');\n\n  this.http_post('plugin.managesieve-action',\n    '_act=act&_fid='+this.filters_list.rows[id].uid, lock);\n};\n\n// Filter selection\nrcube_webmail.prototype.managesieve_select = function(list)\n{\n  var id = list.get_single_selection();\n  if (id != null)\n    this.load_managesieveframe(list.rows[id].uid);\n};\n\n// Set selection\nrcube_webmail.prototype.managesieve_setselect = function(list)\n{\n  this.show_contentframe(false);\n  this.filters_list.clear(true);\n  this.enable_command('plugin.managesieve-setdel', list.rowcount > 1);\n  this.enable_command('plugin.managesieve-setact', 'plugin.managesieve-setget', true);\n\n  var id = list.get_single_selection();\n  if (id != null)\n    this.managesieve_list(this.env.filtersets[id]);\n};\n\nrcube_webmail.prototype.managesieve_rowid = function(id)\n{\n  var i, rows = this.filters_list.rows;\n\n  for (i in rows)\n    if (rows[i] != null && rows[i].uid == id)\n      return i;\n};\n\n// Returns set's identifier\nrcube_webmail.prototype.managesieve_setid = function(name)\n{\n  for (var i in this.env.filtersets)\n    if (this.env.filtersets[i] == name)\n      return i;\n};\n\n// Filters listing request\nrcube_webmail.prototype.managesieve_list = function(script)\n{\n  var lock = this.set_busy(true, 'loading');\n\n  this.http_post('plugin.managesieve-action', '_act=list&_set='+urlencode(script), lock);\n};\n\n// Script download request\nrcube_webmail.prototype.managesieve_setget = function()\n{\n  var id = this.filtersets_list.get_single_selection(),\n    script = this.env.filtersets[id];\n\n  location.href = this.env.comm_path+'&_action=plugin.managesieve-action&_act=setget&_set='+urlencode(script);\n};\n\n// Set activate/deactivate request\nrcube_webmail.prototype.managesieve_setact = function()\n{\n  var id = this.filtersets_list.get_single_selection(),\n   lock = this.set_busy(true, 'loading'),\n    script = this.env.filtersets[id],\n    action = $('#rcmrow'+id).hasClass('disabled') ? 'setact' : 'deact';\n\n  this.http_post('plugin.managesieve-action', '_act='+action+'&_set='+urlencode(script), lock);\n};\n\n// Set delete request\nrcube_webmail.prototype.managesieve_setdel = function()\n{\n  if (!confirm(this.get_label('managesieve.setdeleteconfirm')))\n    return false;\n\n  var id = this.filtersets_list.get_single_selection(),\n    lock = this.set_busy(true, 'loading'),\n    script = this.env.filtersets[id];\n\n  this.http_post('plugin.managesieve-action', '_act=setdel&_set='+urlencode(script), lock);\n};\n\n// Set add request\nrcube_webmail.prototype.managesieve_setadd = function()\n{\n  this.filters_list.clear_selection();\n  this.enable_command('plugin.managesieve-act', 'plugin.managesieve-del', false);\n\n  if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n    var lock = this.set_busy(true, 'loading');\n    target = window.frames[this.env.contentframe];\n    target.location.href = this.env.comm_path+'&_action=plugin.managesieve-action&_framed=1&_newset=1&_unlock='+lock;\n  }\n};\n\nrcube_webmail.prototype.managesieve_updatelist = function(action, o)\n{\n  this.set_busy(true);\n\n  switch (action) {\n    // Delete filter row\n    case 'del':\n      var id = o.id, list = this.filters_list;\n\n      list.remove_row(this.managesieve_rowid(o.id));\n      list.clear_selection();\n      this.show_contentframe(false);\n      this.enable_command('plugin.managesieve-del', 'plugin.managesieve-act', false);\n\n      // filter identifiers changed, fix the list\n      $('tr', this.filters_list.list).each(function() {\n        // remove hidden (deleted) rows\n        if (this.style.display == 'none') {\n          $(this).detach();\n          return;\n        }\n\n        var rowid = this.id.substr(6);\n\n        // remove all attached events\n        $(this).off();\n\n        // update row id\n        if (rowid > id) {\n          this.uid = rowid - 1;\n          $(this).attr('id', 'rcmrow' + this.uid);\n        }\n      });\n      list.init();\n\n      break;\n\n    // Update filter row\n    case 'update':\n      var i, row = $('#rcmrow'+this.managesieve_rowid(o.id));\n\n      if (o.name)\n        $('td', row).text(o.name);\n      if (o.disabled)\n        row.addClass('disabled');\n      else\n        row.removeClass('disabled');\n\n      $('#disabled', $('iframe').contents()).prop('checked', o.disabled);\n\n      break;\n\n    // Add filter row to the list\n    case 'add':\n      var list = this.filters_list,\n        row = $('<tr><td class=\"name\"></td></tr>');\n\n      $('td', row).text(o.name);\n      row.attr('id', 'rcmrow'+o.id);\n      if (o.disabled)\n        row.addClass('disabled');\n\n      list.insert_row(row.get(0));\n      list.highlight_row(o.id);\n\n      this.enable_command('plugin.managesieve-del', 'plugin.managesieve-act', true);\n\n      break;\n\n    // Filling rules list\n    case 'list':\n      var i, tr, td, el, list = this.filters_list;\n\n      if (o.clear)\n        list.clear();\n\n      for (i in o.list) {\n        el = o.list[i];\n        tr = document.createElement('TR');\n        td = document.createElement('TD');\n\n        $(td).text(el.name);\n        td.className = 'name';\n        tr.id = 'rcmrow' + el.id;\n        if (el['class'])\n            tr.className = el['class'];\n        tr.appendChild(td);\n\n        list.insert_row(tr);\n      }\n\n      if (o.set)\n        list.highlight_row(o.set);\n      else\n        this.enable_command('plugin.managesieve-del', 'plugin.managesieve-act', false);\n\n      break;\n\n    // Sactivate/deactivate set\n    case 'setact':\n      var id = this.managesieve_setid(o.name), row = $('#rcmrow' + id);\n      if (o.active) {\n        if (o.all)\n          $('tr', this.gui_objects.filtersetslist).addClass('disabled');\n        row.removeClass('disabled');\n      }\n      else\n        row.addClass('disabled');\n\n      break;\n\n    // Delete set row\n    case 'setdel':\n      var id = this.managesieve_setid(o.name);\n\n      this.filtersets_list.remove_row(id);\n      this.filters_list.clear();\n      this.show_contentframe(false);\n      this.enable_command('plugin.managesieve-setdel', 'plugin.managesieve-setact', 'plugin.managesieve-setget', false);\n\n      delete this.env.filtersets[id];\n\n      break;\n\n    // Create set row\n    case 'setadd':\n      var id = 'S' + new Date().getTime(),\n        list = this.filtersets_list,\n        row = $('<tr class=\"disabled\"><td class=\"name\"></td></tr>');\n\n      $('td', row).text(o.name);\n      row.attr('id', 'rcmrow'+id);\n\n      this.env.filtersets[id] = o.name;\n      list.insert_row(row.get(0));\n\n      // move row into its position on the list\n      if (o.index != list.rowcount-1) {\n        row.detach();\n        var elem = $('tr:visible', list.list).get(o.index);\n        row.insertBefore(elem);\n      }\n\n      list.select(id);\n\n      // Fix dragging filters over sets list\n      this.managesieve_fixdragend(row);\n\n      break;\n  }\n\n  this.set_busy(false);\n};\n\n// load filter frame\nrcube_webmail.prototype.load_managesieveframe = function(id)\n{\n  var has_id = typeof(id) != 'undefined' && id != null;\n  this.enable_command('plugin.managesieve-act', 'plugin.managesieve-del', has_id);\n\n  if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n    target = window.frames[this.env.contentframe];\n    var msgid = this.set_busy(true, 'loading');\n    target.location.href = this.env.comm_path+'&_action=plugin.managesieve-action&_framed=1'\n      +(has_id ? '&_fid='+id : '')+'&_unlock='+msgid;\n  }\n};\n\n// load filter frame\nrcube_webmail.prototype.managesieve_dragstart = function(list)\n{\n  var id = this.filters_list.get_single_selection();\n\n  this.drag_active = true;\n  this.drag_filter = id;\n};\n\nrcube_webmail.prototype.managesieve_dragend = function(e)\n{\n  if (this.drag_active) {\n    if (this.drag_filter_target) {\n      var lock = this.set_busy(true, 'loading');\n\n      this.show_contentframe(false);\n      this.http_post('plugin.managesieve-action', '_act=move&_fid='+this.drag_filter\n        +'&_to='+this.drag_filter_target, lock);\n    }\n    this.drag_active = false;\n  }\n};\n\n// Fixes filters dragging over sets list\n// @TODO: to be removed after implementing copying filters\nrcube_webmail.prototype.managesieve_fixdragend = function(elem)\n{\n  var p = this;\n  $(elem).on('mouseup' + ((bw.iphone || bw.ipad) ? ' touchend' : ''), function(e) {\n    if (p.drag_active)\n      p.filters_list.drag_mouse_up(e);\n  });\n};\n\nrcube_webmail.prototype.managesieve_focus_filter = function(row)\n{\n  var id = row.id.replace(/^rcmrow/, '');\n  if (this.drag_active && id != this.drag_filter) {\n    this.drag_filter_target = id;\n    $(row.obj).addClass(id < this.drag_filter ? 'filtermoveup' : 'filtermovedown');\n  }\n};\n\nrcube_webmail.prototype.managesieve_unfocus_filter = function(row)\n{\n  if (this.drag_active) {\n    $(row.obj).removeClass('filtermoveup filtermovedown');\n    this.drag_filter_target = null;\n  }\n};\n\n/*********************************************************/\n/*********          Filter Form methods          *********/\n/*********************************************************/\n\n// Form submition\nrcube_webmail.prototype.managesieve_save = function()\n{\n  if (this.env.action == 'plugin.managesieve-vacation') {\n    var data = $(this.gui_objects.sieveform).serialize();\n    this.http_post('plugin.managesieve-vacation', data, this.display_message(this.get_label('managesieve.vacation.saving'), 'loading'));\n    return;\n  }\n\n  if (parent.rcmail && parent.rcmail.filters_list && this.gui_objects.sieveform.name != 'filtersetform') {\n    var id = parent.rcmail.filters_list.get_single_selection();\n    if (id != null)\n      this.gui_objects.sieveform.elements['_fid'].value = parent.rcmail.filters_list.rows[id].uid;\n  }\n  this.gui_objects.sieveform.submit();\n};\n\n// Operations on filters form\nrcube_webmail.prototype.managesieve_ruleadd = function(id)\n{\n  this.http_post('plugin.managesieve-action', '_act=ruleadd&_rid='+id);\n};\n\nrcube_webmail.prototype.managesieve_rulefill = function(content, id, after)\n{\n  if (content != '') {\n    // create new element\n    var div = document.getElementById('rules'),\n      row = document.createElement('div');\n\n    this.managesieve_insertrow(div, row, after);\n    // fill row after inserting (for IE)\n    row.setAttribute('id', 'rulerow'+id);\n    row.className = 'rulerow';\n    row.innerHTML = content;\n\n    // initialize smart list inputs\n    $('textarea[data-type=\"list\"]', row).each(function() {\n      smart_field_init(this);\n    });\n\n    this.managesieve_formbuttons(div);\n  }\n};\n\nrcube_webmail.prototype.managesieve_ruledel = function(id)\n{\n  if ($('#ruledel'+id).hasClass('disabled'))\n    return;\n\n  if (confirm(this.get_label('managesieve.ruledeleteconfirm'))) {\n    var row = document.getElementById('rulerow'+id);\n    row.parentNode.removeChild(row);\n    this.managesieve_formbuttons(document.getElementById('rules'));\n  }\n};\n\nrcube_webmail.prototype.managesieve_actionadd = function(id)\n{\n  this.http_post('plugin.managesieve-action', '_act=actionadd&_aid='+id);\n};\n\nrcube_webmail.prototype.managesieve_actionfill = function(content, id, after)\n{\n  if (content != '') {\n    var div = document.getElementById('actions'),\n      row = document.createElement('div');\n\n    this.managesieve_insertrow(div, row, after);\n    // fill row after inserting (for IE)\n    row.className = 'actionrow';\n    row.setAttribute('id', 'actionrow'+id);\n    row.innerHTML = content;\n\n    // initialize smart list inputs\n    $('textarea[data-type=\"list\"]', row).each(function() {\n      smart_field_init(this);\n    });\n\n    this.managesieve_formbuttons(div);\n  }\n};\n\nrcube_webmail.prototype.managesieve_actiondel = function(id)\n{\n  if ($('#actiondel'+id).hasClass('disabled'))\n    return;\n\n  if (confirm(this.get_label('managesieve.actiondeleteconfirm'))) {\n    var row = document.getElementById('actionrow'+id);\n    row.parentNode.removeChild(row);\n    this.managesieve_formbuttons(document.getElementById('actions'));\n  }\n};\n\n// insert rule/action row in specified place on the list\nrcube_webmail.prototype.managesieve_insertrow = function(div, row, after)\n{\n  for (var i=0; i<div.childNodes.length; i++) {\n    if (div.childNodes[i].id == (div.id == 'rules' ? 'rulerow' : 'actionrow')  + after)\n      break;\n  }\n\n  if (div.childNodes[i+1])\n    div.insertBefore(row, div.childNodes[i+1]);\n  else\n    div.appendChild(row);\n};\n\n// update Delete buttons status\nrcube_webmail.prototype.managesieve_formbuttons = function(div)\n{\n  var i, button, buttons = [];\n\n  // count and get buttons\n  for (i=0; i<div.childNodes.length; i++) {\n    if (div.id == 'rules' && div.childNodes[i].id) {\n      if (/rulerow/.test(div.childNodes[i].id))\n        buttons.push('ruledel' + div.childNodes[i].id.replace(/rulerow/, ''));\n    }\n    else if (div.childNodes[i].id) {\n      if (/actionrow/.test(div.childNodes[i].id))\n        buttons.push( 'actiondel' + div.childNodes[i].id.replace(/actionrow/, ''));\n    }\n  }\n\n  for (i=0; i<buttons.length; i++) {\n    button = document.getElementById(buttons[i]);\n    if (i>0 || buttons.length>1) {\n      $(button).removeClass('disabled');\n    }\n    else {\n      $(button).addClass('disabled');\n    }\n  }\n};\n\n// update vacation addresses field with user identities\nrcube_webmail.prototype.managesieve_vacation_addresses = function(id)\n{\n  var lock = this.set_busy(true, 'loading');\n  this.http_post('plugin.managesieve-action', {_act: 'addresses', _aid: id}, lock);\n};\n\n// update vacation addresses field with user identities\nrcube_webmail.prototype.managesieve_vacation_addresses_update = function(id, addresses)\n{\n  var field = $('#vacation_addresses,#action_addresses' + (id || ''));\n  smart_field_reset(field.get(0), addresses);\n};\n\nfunction rule_header_select(id)\n{\n  var obj = document.getElementById('header' + id),\n    size = document.getElementById('rule_size' + id),\n    op = document.getElementById('rule_op' + id),\n    header = document.getElementById('custom_header' + id + '_list'),\n    mod = document.getElementById('rule_mod' + id),\n    trans = document.getElementById('rule_trans' + id),\n    comp = document.getElementById('rule_comp' + id),\n    datepart = document.getElementById('rule_date_part' + id),\n    dateheader = document.getElementById('rule_date_header_div' + id),\n    h = obj.value;\n\n  if (h == 'size') {\n    size.style.display = 'inline';\n    $.each([op, header, mod, trans, comp], function() { this.style.display = 'none'; });\n  }\n  else {\n    header.style.display = h != '...' ? 'none' : 'inline-block';\n    size.style.display = 'none';\n    op.style.display = 'inline';\n    comp.style.display = '';\n    mod.style.display = h == 'body' || h == 'currentdate' || h == 'date' ? 'none' : 'block';\n    trans.style.display = h == 'body' ? 'block' : 'none';\n  }\n\n  if (datepart)\n    datepart.style.display = h == 'currentdate' || h == 'date' ? 'inline' : 'none';\n  if (dateheader)\n    dateheader.style.display = h == 'date' ? '' : 'none';\n\n  rule_op_select(op, id, h);\n  rule_mod_select(id, h);\n  obj.style.width = h == '...' ? '40px' : '';\n};\n\nfunction rule_op_select(obj, id, header)\n{\n  var target = document.getElementById('rule_target' + id + '_list');\n\n  if (!header)\n    header = document.getElementById('header' + id).value;\n\n  target.style.display = obj.value == 'exists' || obj.value == 'notexists' || header == 'size' ? 'none' : 'inline-block';\n};\n\nfunction rule_trans_select(id)\n{\n  var obj = document.getElementById('rule_trans_op' + id),\n    target = document.getElementById('rule_trans_type' + id);\n\n  target.style.display = obj.value != 'content' ? 'none' : 'inline';\n};\n\nfunction rule_mod_select(id, header)\n{\n  var obj = document.getElementById('rule_mod_op' + id),\n    target = document.getElementById('rule_mod_type' + id),\n    index = document.getElementById('rule_index_div' + id);\n\n  if (!header)\n    header = document.getElementById('header' + id).value;\n\n  target.style.display = obj.value != 'address' && obj.value != 'envelope' ? 'none' : 'inline';\n\n  if (index)\n    index.style.display = header != 'body' && header != 'currentdate' && header != 'size' && obj.value != 'envelope'  ? '' : 'none';\n};\n\nfunction rule_join_radio(value)\n{\n  $('#rules').css('display', value == 'any' ? 'none' : 'block');\n};\n\nfunction rule_adv_switch(id, elem)\n{\n  var elem = $(elem), enabled = elem.hasClass('hide'), adv = $('#rule_advanced'+id);\n\n  if (enabled) {\n    adv.hide();\n    elem.removeClass('hide').addClass('show');\n  }\n  else {\n    adv.show();\n    elem.removeClass('show').addClass('hide');\n  }\n}\n\nfunction action_type_select(id)\n{\n  var obj = document.getElementById('action_type' + id),\n    v = obj.value, enabled = {},\n    elems = {\n      mailbox: document.getElementById('action_mailbox' + id),\n      target: document.getElementById('redirect_target' + id),\n      target_area: document.getElementById('action_target_area' + id),\n      flags: document.getElementById('action_flags' + id),\n      vacation: document.getElementById('action_vacation' + id),\n      set: document.getElementById('action_set' + id),\n      notify: document.getElementById('action_notify' + id)\n    };\n\n  if (v == 'fileinto' || v == 'fileinto_copy') {\n    enabled.mailbox = 1;\n  }\n  else if (v == 'redirect' || v == 'redirect_copy') {\n    enabled.target = 1;\n  }\n  else if (v.match(/^reject|ereject$/)) {\n    enabled.target_area = 1;\n  }\n  else if (v.match(/^(add|set|remove)flag$/)) {\n    enabled.flags = 1;\n  }\n  else if (v == 'vacation') {\n    enabled.vacation = 1;\n  }\n  else if (v == 'set') {\n    enabled.set = 1;\n  }\n  else if (v == 'notify') {\n    enabled.notify = 1;\n  }\n\n  for (var x in elems) {\n    elems[x].style.display = !enabled[x] ? 'none' : 'inline';\n  }\n};\n\nfunction vacation_action_select()\n{\n  var selected = $('#vacation_action').val();\n\n  $('#action_target_span')[selected == 'discard' || selected == 'keep' ? 'hide' : 'show']();\n};\n\n// Inititalizes smart list input\nfunction smart_field_init(field)\n{\n  var id = field.id + '_list',\n    area = $('<span class=\"listarea\"></span>'),\n    list = field.value ? field.value.split(\"\\n\") : [''];\n\n  if ($('#'+id).length)\n    return;\n\n  // add input rows\n  $.each(list, function(i, v) {\n    area.append(smart_field_row(v, field.name, i, $(field).data('size')));\n  });\n\n  area.attr('id', id);\n  field = $(field);\n\n  if (field.attr('disabled'))\n    area.hide();\n  // disable the original field anyway, we don't want it in POST\n  else\n    field.prop('disabled', true);\n\n  field.after(area);\n\n  if (field.hasClass('error')) {\n    area.addClass('error');\n    rcmail.managesieve_tip_register([[id, field.data('tip')]]);\n  }\n};\n\nfunction smart_field_row(value, name, idx, size)\n{\n  // build row element content\n  var input, content = '<span class=\"listelement\">'\n      + '<span class=\"reset\"></span><input type=\"text\"></span>',\n    elem = $(content),\n    attrs = {value: value, name: name + '[]'};\n\n  if (size)\n    attrs.size = size;\n\n  input = $('input', elem).attr(attrs).keydown(function(e) {\n    var input = $(this);\n\n    // element creation event (on Enter)\n    if (e.which == 13) {\n      var name = input.attr('name').replace(/\\[\\]$/, ''),\n        dt = (new Date()).getTime(),\n        elem = smart_field_row('', name, dt, size);\n\n      input.parent().after(elem);\n      $('input', elem).focus();\n    }\n    // backspace or delete: remove input, focus previous one\n    else if ((e.which == 8 || e.which == 46) && input.val() == '') {\n\n      var parent = input.parent(), siblings = parent.parent().children();\n\n      if (siblings.length > 1) {\n        if (parent.prev().length)\n          parent.prev().children('input').focus();\n        else\n          parent.next().children('input').focus();\n\n        parent.remove();\n        return false;\n      }\n    }\n  });\n\n  // element deletion event\n  $('span[class=\"reset\"]', elem).click(function() {\n    var span = $(this.parentNode);\n\n    if (span.parent().children().length > 1)\n      span.remove();\n    else\n      $('input', span).val('').focus();\n  });\n\n  return elem;\n}\n\n// Reset and fill the smart list input with new data\nfunction smart_field_reset(field, data)\n{\n  var id = field.id + '_list',\n    list = data.length ? data : [''];\n    area = $('#' + id);\n\n  area.empty();\n\n  // add input rows\n  $.each(list, function(i, v) {\n    area.append(smart_field_row(v, field.name, i, $(field).data('size')));\n  });\n}\n\n// Register onmouse(leave/enter) events for tips on specified form element\nrcube_webmail.prototype.managesieve_tip_register = function(tips)\n{\n  var n, framed = parent.rcmail,\n    tip = framed ? parent.rcmail.env.ms_tip_layer : rcmail.env.ms_tip_layer;\n\n  for (n in tips) {\n    $('#'+tips[n][0])\n      .data('tip', tips[n][1])\n      .mouseleave(function(e) { tip.hide(); })\n      .mouseenter(function(e) {\n        var elem = $(this),\n          offset = elem.offset(),\n          left = offset.left,\n          top = offset.top - 12,\n          minwidth = elem.width();\n\n        if (framed) {\n          offset = $((rcmail.env.task == 'mail'  ? '#sievefilterform > iframe' : '#filter-box'), parent.document).offset();\n          top  += offset.top;\n          left += offset.left;\n        }\n\n        tip.html(elem.data('tip'));\n        top -= tip.height();\n\n        tip.css({left: left, top: top, minWidth: (minwidth-2) + 'px'}).show();\n      });\n  }\n};\n\n// format time string\nfunction sieve_formattime(hour, minutes)\n{\n  var i, c, h, time = '', format = rcmail.env.time_format || 'H:i';\n\n  for (i=0; i<format.length; i++) {\n    c = format.charAt(i);\n    switch (c) {\n      case 'a': time += hour > 12 ? 'am' : 'pm'; break;\n      case 'A': time += hour > 12 ? 'AM' : 'PM'; break;\n      case 'g':\n      case 'h':\n        h = hour == 0 ? 12 : hour > 12 ? hour - 12 : hour;\n        time += (c == 'h' && hour < 10 ? '0' : '') + hour;\n        break;\n      case 'G': time += hour; break;\n      case 'H': time += (hour < 10 ? '0' : '') + hour; break;\n      case 'i': time += (minutes < 10 ? '0' : '') + minutes; break;\n      case 's': time += '00';\n      default: time += c;\n    }\n  }\n\n  return time;\n}\n\nfunction sieve_form_init()\n{\n  // small resize for header element\n  $('select[name=\"_header[]\"]', rcmail.gui_objects.sieveform).each(function() {\n    if (this.value == '...') this.style.width = '40px';\n  });\n\n  // resize dialog window\n  if (rcmail.env.action == 'plugin.managesieve' && rcmail.env.task == 'mail') {\n    parent.rcmail.managesieve_dialog_resize(rcmail.gui_objects.sieveform);\n  }\n\n  $('input[type=\"text\"]:first', rcmail.gui_objects.sieveform).focus();\n\n  // initialize smart list inputs\n  $('textarea[data-type=\"list\"]', rcmail.gui_objects.sieveform).each(function() {\n    smart_field_init(this);\n  });\n\n  // enable date pickers on date fields\n  if ($.datepicker && rcmail.env.date_format) {\n    $.datepicker.setDefaults({\n      dateFormat: rcmail.env.date_format,\n      changeMonth: true,\n      showOtherMonths: true,\n      selectOtherMonths: true,\n      onSelect: function(dateText) { $(this).focus().val(dateText); }\n    });\n    $('input.datepicker').datepicker();\n  }\n\n  // configure drop-down menu on time input fields based on jquery UI autocomplete\n  $('#vacation_timefrom, #vacation_timeto')\n    .attr('autocomplete', \"off\")\n    .autocomplete({\n      delay: 100,\n      minLength: 1,\n      source: function(p, callback) {\n        var h, result = [];\n        for (h = 0; h < 24; h++)\n          result.push(sieve_formattime(h, 0));\n        result.push(sieve_formattime(23, 59));\n\n        return callback(result);\n      },\n      open: function(event, ui) {\n        // scroll to current time\n        var $this = $(this), val = $this.val(),\n          widget = $this.autocomplete('widget').css('width', '10em'),\n          menu = $this.data('ui-autocomplete').menu;\n\n        if (val && val.length)\n          widget.children().each(function() {\n            var li = $(this);\n            if (li.text().indexOf(val) == 0)\n              menu._scrollIntoView(li);\n          });\n      },\n      select: function(event, ui) {\n        $(this).val(ui.item.value);\n        return false;\n      }\n    })\n    .click(function() {  // show drop-down upon clicks\n      $(this).autocomplete('search', $(this).val() || ' ');\n    })\n}\n\n\n/*********************************************************/\n/*********           Mail UI methods             *********/\n/*********************************************************/\n\nrcube_webmail.prototype.managesieve_create = function(force)\n{\n  if (!force && this.env.action != 'show') {\n    var uid = this.message_list.get_single_selection(),\n      lock = this.set_busy(true, 'loading');\n\n    this.http_post('plugin.managesieve-action', {_uid: uid}, lock);\n    return;\n  }\n\n  if (!this.env.sieve_headers || !this.env.sieve_headers.length)\n    return;\n\n  var i, html, buttons = {}, dialog = $(\"#sievefilterform\");\n\n  // create dialog window\n  if (!dialog.length) {\n    dialog = $('<div id=\"sievefilterform\"></div>');\n    $('body').append(dialog);\n  }\n\n  // build dialog window content\n  html = '<fieldset><legend>'+this.get_label('managesieve.usedata')+'</legend><ul>';\n  for (i in this.env.sieve_headers)\n    html += '<li><input type=\"checkbox\" name=\"headers[]\" id=\"sievehdr'+i+'\" value=\"'+i+'\" checked=\"checked\" />'\n      +'<label for=\"sievehdr'+i+'\">'+this.env.sieve_headers[i][0]+':</label> '+this.env.sieve_headers[i][1]+'</li>';\n  html += '</ul></fieldset>';\n\n  dialog.html(html);\n\n  // [Next Step] button action\n  buttons[this.get_label('managesieve.nextstep')] = function () {\n    // check if there's at least one checkbox checked\n    var hdrs = $('input[name=\"headers[]\"]:checked', dialog);\n    if (!hdrs.length) {\n      alert(rcmail.get_label('managesieve.nodata'));\n      return;\n    }\n\n    // build frame URL\n    var url = rcmail.get_task_url('mail');\n    url = rcmail.add_url(url, '_action', 'plugin.managesieve');\n    url = rcmail.add_url(url, '_framed', 1);\n\n    hdrs.map(function() {\n      var val = rcmail.env.sieve_headers[this.value];\n      url = rcmail.add_url(url, 'r['+this.value+']', val[0]+':'+val[1]);\n    });\n\n    // load form in the iframe\n    var frame = $('<iframe>').attr({src: url, frameborder: 0})\n    dialog.empty().append(frame).dialog('widget').resize();\n\n    // Change [Next Step] button with [Save] button\n    buttons = {};\n    buttons[rcmail.get_label('save')] = function() {\n      var win = $('iframe', dialog).get(0).contentWindow;\n      win.rcmail.managesieve_save();\n    };\n    dialog.dialog('option', 'buttons', buttons);\n  };\n\n  // show dialog window\n  dialog.dialog({\n    modal: false,\n    resizable: true,\n    closeOnEscape: !bw.ie7,  // disable for performance reasons\n    title: this.get_label('managesieve.newfilter'),\n    close: function() { rcmail.managesieve_dialog_close(); },\n    buttons: buttons,\n    minWidth: 600,\n    minHeight: 300,\n    height: 250\n  }).show();\n\n  this.env.managesieve_dialog = dialog;\n}\n\nrcube_webmail.prototype.managesieve_dialog_close = function()\n{\n  var dialog = this.env.managesieve_dialog;\n\n  // BUG(?): if we don't remove the iframe first, it will be reloaded\n  dialog.html('');\n  dialog.dialog('destroy').hide();\n}\n\nrcube_webmail.prototype.managesieve_dialog_resize = function(o)\n{\n  var dialog = this.env.managesieve_dialog,\n    win = $(window), form = $(o);\n    width = $('fieldset:first', o).width(), // fieldset width is more appropriate here\n    height = form.height(),\n    w = win.width(), h = win.height();\n\n  dialog.dialog('option', { height: Math.min(h-20, height+120), width: Math.min(w-20, width+65) })\n    .dialog('option', 'position', ['center', 'center']);  // works in a separate call only (!?)\n}\n", "/**\n * ZipDownload plugin script\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (c) 2013-2014, The Roundcube Dev Team\n *\n * The JavaScript code in this page is free software: you can redistribute it\n * and/or modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, either version 3 of\n * the License, or (at your option) any later version.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n */\n\nwindow.rcmail && rcmail.addEventListener('init', function(evt) {\n    // register additional actions\n    rcmail.register_command('download-eml', function() { rcmail_zipdownload('eml'); });\n    rcmail.register_command('download-mbox', function() { rcmail_zipdownload('mbox'); });\n    rcmail.register_command('download-maildir', function() { rcmail_zipdownload('maildir'); });\n\n    // commands status\n    rcmail.message_list && rcmail.message_list.addEventListener('select', function(list) {\n        var selected = list.get_selection().length;\n\n        rcmail.enable_command('download', selected > 0);\n        rcmail.enable_command('download-eml', selected == 1);\n        rcmail.enable_command('download-mbox', 'download-maildir', selected > 1);\n    });\n\n    // hook before default download action\n    rcmail.addEventListener('beforedownload', rcmail_zipdownload_menu);\n\n    // find and modify default download link/button\n    $.each(rcmail.buttons['download'] || [], function() {\n        var link = $('#' + this.id),\n            span = $('span', link);\n\n        if (!span.length) {\n            span = $('<span>');\n            link.html('').append(span);\n        }\n\n        span.text(rcmail.get_label('zipdownload.download'));\n        rcmail.env.download_link = link;\n    });\n  });\n\n\nfunction rcmail_zipdownload(mode)\n{\n    // default .eml download of single message\n    if (mode == 'eml') {\n        var uid = rcmail.get_single_uid();\n        rcmail.goto_url('viewsource', rcmail.params_from_uid(uid, {_save: 1}));\n        return;\n    }\n\n    // multi-message download, use hidden form to POST selection\n    if (rcmail.message_list && rcmail.message_list.get_selection().length > 1) {\n        var inputs = [], form = $('#zipdownload-form'),\n            post = rcmail.selection_post_data();\n\n        post._mode = mode;\n        post._token = rcmail.env.request_token;\n\n        $.each(post, function(k, v) {\n            if (typeof v == 'object' && v.length > 1) {\n              for (var j=0; j < v.length; j++)\n                  inputs.push($('<input>').attr({type: 'hidden', name: k+'[]', value: v[j]}));\n            }\n            else {\n                inputs.push($('<input>').attr({type: 'hidden', name: k, value: v}));\n            }\n        });\n\n        if (!form.length)\n            form = $('<form>').attr({\n                    style: 'display: none',\n                    method: 'POST',\n                    action: '?_task=mail&_action=plugin.zipdownload.messages'\n                })\n                .appendTo('body');\n\n        form.html('').append(inputs).submit();\n    }\n}\n\n// display download options menu\nfunction rcmail_zipdownload_menu(e)\n{\n    // show (sub)menu for download selection\n    rcmail.command('menu-open', 'zipdownload-menu', e && e.target ? e.target : rcmail.env.download_link, e);\n\n    // abort default download action\n    return false;\n}\n", "<?php\n\n/**\n * ZipDownload\n *\n * Plugin to allow the download of all message attachments in one zip file\n * and downloading of many messages in one go.\n *\n * @version 3.0\n * @requires php_zip extension (including ZipArchive class)\n * @author Philip Weir\n * @author Thomas Bruderli\n * @author Aleksander Machniak\n */\nclass zipdownload extends rcube_plugin\n{\n    public $task = 'mail';\n    private $charset = 'ASCII';\n\n    /**\n     * Plugin initialization\n     */\n    public function init()\n    {\n        // check requirements first\n        if (!class_exists('ZipArchive', false)) {\n            rcmail::raise_error(array(\n                'code'    => 520,\n                'file'    => __FILE__,\n                'line'    => __LINE__,\n                'message' => \"php_zip extension is required for the zipdownload plugin\"), true, false);\n            return;\n        }\n\n        $rcmail = rcmail::get_instance();\n\n        $this->load_config();\n        $this->charset = $rcmail->config->get('zipdownload_charset', RCUBE_CHARSET);\n        $this->add_texts('localization');\n\n        if ($rcmail->config->get('zipdownload_attachments', 1) > -1 && ($rcmail->action == 'show' || $rcmail->action == 'preview')) {\n            $this->add_hook('template_object_messageattachments', array($this, 'attachment_ziplink'));\n        }\n\n        $this->register_action('plugin.zipdownload.attachments', array($this, 'download_attachments'));\n        $this->register_action('plugin.zipdownload.messages', array($this, 'download_messages'));\n\n        if (!$rcmail->action && $rcmail->config->get('zipdownload_selection')) {\n            $this->download_menu();\n        }\n    }\n\n    /**\n     * Place a link/button after attachments listing to trigger download\n     */\n    public function attachment_ziplink($p)\n    {\n        $rcmail = rcmail::get_instance();\n\n        // only show the link if there is more than the configured number of attachments\n        if (substr_count($p['content'], '<li') > $rcmail->config->get('zipdownload_attachments', 1)) {\n            $href = $rcmail->url(array(\n                '_action' => 'plugin.zipdownload.attachments',\n                '_mbox'   => $rcmail->output->env['mailbox'],\n                '_uid'    => $rcmail->output->env['uid'],\n            ));\n\n            $link = html::a(array('href' => $href, 'class' => 'button zipdownload'),\n                rcube::Q($this->gettext('downloadall'))\n            );\n\n            // append link to attachments list, slightly different in some skins\n            switch (rcmail::get_instance()->config->get('skin')) {\n                case 'classic':\n                    $p['content'] = str_replace('</ul>', html::tag('li', array('class' => 'zipdownload'), $link) . '</ul>', $p['content']);\n                    break;\n\n                default:\n                    $p['content'] .= $link;\n                    break;\n            }\n\n            $this->include_stylesheet($this->local_skin_path() . '/zipdownload.css');\n        }\n\n        return $p;\n    }\n\n    /**\n     * Adds download options menu to the page\n     */\n    public function download_menu()\n    {\n        $this->include_script('zipdownload.js');\n        $this->add_label('download');\n\n        $rcmail  = rcmail::get_instance();\n        $menu    = array();\n        $ul_attr = array('role' => 'menu', 'aria-labelledby' => 'aria-label-zipdownloadmenu');\n        if ($rcmail->config->get('skin') != 'classic') {\n            $ul_attr['class'] = 'toolbarmenu';\n        }\n\n        foreach (array('eml', 'mbox', 'maildir') as $type) {\n            $menu[] = html::tag('li', null, $rcmail->output->button(array(\n                    'command'  => \"download-$type\",\n                    'label'    => \"zipdownload.download$type\",\n                    'classact' => 'active',\n            )));\n        }\n\n        $rcmail->output->add_footer(html::div(array('id' => 'zipdownload-menu', 'class' => 'popupmenu', 'aria-hidden' => 'true'),\n            html::tag('h2', array('class' => 'voice', 'id' => 'aria-label-zipdownloadmenu'), \"Message Download Options Menu\") .\n            html::tag('ul', $ul_attr, implode('', $menu))));\n    }\n\n    /**\n     * Handler for attachment download action\n     */\n    public function download_attachments()\n    {\n        $rcmail    = rcmail::get_instance();\n        $imap      = $rcmail->get_storage();\n        $temp_dir  = $rcmail->config->get('temp_dir');\n        $tmpfname  = tempnam($temp_dir, 'zipdownload');\n        $tempfiles = array($tmpfname);\n        $message   = new rcube_message(rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GET));\n\n        // open zip file\n        $zip = new ZipArchive();\n        $zip->open($tmpfname, ZIPARCHIVE::OVERWRITE);\n\n        foreach ($message->attachments as $part) {\n            $pid      = $part->mime_id;\n            $part     = $message->mime_parts[$pid];\n            $filename = $part->filename;\n\n            if ($filename === null || $filename === '') {\n                $ext      = (array) rcube_mime::get_mime_extensions($part->mimetype);\n                $ext      = array_shift($ext);\n                $filename = $rcmail->gettext('messagepart') . ' ' . $pid;\n                if ($ext) {\n                    $filename .= '.' . $ext;\n                }\n            }\n\n            $disp_name   = $this->_convert_filename($filename);\n            $tmpfn       = tempnam($temp_dir, 'zipattach');\n            $tmpfp       = fopen($tmpfn, 'w');\n            $tempfiles[] = $tmpfn;\n\n            $message->get_part_body($part->mime_id, false, 0, $tmpfp);\n            $zip->addFile($tmpfn, $disp_name);\n            fclose($tmpfp);\n        }\n\n        $zip->close();\n\n        $filename = ($message->subject ?: 'roundcube') . '.zip';\n        $this->_deliver_zipfile($tmpfname, $filename);\n\n        // delete temporary files from disk\n        foreach ($tempfiles as $tmpfn) {\n            unlink($tmpfn);\n        }\n\n        exit;\n    }\n\n    /**\n     * Handler for message download action\n     */\n    public function download_messages()\n    {\n        $rcmail = rcmail::get_instance();\n\n        if ($rcmail->config->get('zipdownload_selection') && !empty($_POST['_uid'])) {\n            $messageset = rcmail::get_uids();\n            if (sizeof($messageset)) {\n                $this->_download_messages($messageset);\n            }\n        }\n    }\n\n    /**\n     * Helper method to packs all the given messages into a zip archive\n     *\n     * @param array List of message UIDs to download\n     */\n    private function _download_messages($messageset)\n    {\n        $rcmail    = rcmail::get_instance();\n        $imap      = $rcmail->get_storage();\n        $mode      = rcube_utils::get_input_value('_mode', rcube_utils::INPUT_POST);\n        $temp_dir  = $rcmail->config->get('temp_dir');\n        $tmpfname  = tempnam($temp_dir, 'zipdownload');\n        $tempfiles = array($tmpfname);\n        $folders   = count($messageset) > 1;\n\n        // @TODO: file size limit\n\n        // open zip file\n        $zip = new ZipArchive();\n        $zip->open($tmpfname, ZIPARCHIVE::OVERWRITE);\n\n        if ($mode == 'mbox') {\n            $tmpfp = fopen($tmpfname . '.mbox', 'w');\n        }\n\n        foreach ($messageset as $mbox => $uids) {\n            $imap->set_folder($mbox);\n            $path = $folders ? str_replace($imap->get_hierarchy_delimiter(), '/', $mbox) . '/' : '';\n\n            if ($uids === '*') {\n                $index = $imap->index($mbox, null, null, true);\n                $uids  = $index->get();\n            }\n\n            foreach ($uids as $uid) {\n                $headers = $imap->get_message_headers($uid);\n\n                if ($mode == 'mbox') {\n                    $from = rcube_mime::decode_address_list($headers->from, null, true, $headers->charset, true);\n                    $from = array_shift($from);\n\n                    // Mbox format header\n                    // @FIXME: \\r\\n or \\n\n                    // @FIXME: date format\n                    $header = sprintf(\"From %s %s\\r\\n\",\n                        // replace spaces with hyphens\n                        $from ? preg_replace('/\\s/', '-', $from) : 'MAILER-DAEMON',\n                        // internaldate\n                        $headers->internaldate\n                    );\n\n                    fwrite($tmpfp, $header);\n\n                    // Use stream filter to quote \"From \" in the message body\n                    stream_filter_register('mbox_filter', 'zipdownload_mbox_filter');\n                    $filter = stream_filter_append($tmpfp, 'mbox_filter');\n                    $imap->get_raw_body($uid, $tmpfp);\n                    stream_filter_remove($filter);\n                    fwrite($tmpfp, \"\\r\\n\");\n                }\n                else { // maildir\n                    $subject = rcube_mime::decode_mime_string((string)$headers->subject);\n                    $subject = $this->_convert_filename($subject);\n                    $subject = substr($subject, 0, 16);\n\n                    $disp_name = ($subject ?: 'message_rfc822') . \".eml\";\n                    $disp_name = $path . $uid . \"_\" . $disp_name;\n\n                    $tmpfn = tempnam($temp_dir, 'zipmessage');\n                    $tmpfp = fopen($tmpfn, 'w');\n                    $imap->get_raw_body($uid, $tmpfp);\n                    $tempfiles[] = $tmpfn;\n                    fclose($tmpfp);\n                    $zip->addFile($tmpfn, $disp_name);\n                }\n            }\n        }\n\n        $filename = $folders ? 'messages' : $imap->get_folder();\n\n        if ($mode == 'mbox') {\n            $tempfiles[] = $tmpfname . '.mbox';\n            fclose($tmpfp);\n            $zip->addFile($tmpfname . '.mbox', $filename . '.mbox');\n        }\n\n        $zip->close();\n\n        $this->_deliver_zipfile($tmpfname, $filename . '.zip');\n\n        // delete temporary files from disk\n        foreach ($tempfiles as $tmpfn) {\n            unlink($tmpfn);\n        }\n\n        exit;\n    }\n\n    /**\n     * Helper method to send the zip archive to the browser\n     */\n    private function _deliver_zipfile($tmpfname, $filename)\n    {\n        $browser = new rcube_browser;\n        $rcmail  = rcmail::get_instance();\n\n        $rcmail->output->nocacheing_headers();\n\n        if ($browser->ie)\n            $filename = rawurlencode($filename);\n        else\n            $filename = addcslashes($filename, '\"');\n\n        // send download headers\n        header(\"Content-Type: application/octet-stream\");\n        if ($browser->ie) {\n            header(\"Content-Type: application/force-download\");\n        }\n\n        // don't kill the connection if download takes more than 30 sec.\n        @set_time_limit(0);\n        header(\"Content-Disposition: attachment; filename=\\\"\". $filename .\"\\\"\");\n        header(\"Content-length: \" . filesize($tmpfname));\n        readfile($tmpfname);\n    }\n\n    /**\n     * Helper function to convert filenames to the configured charset\n     */\n    private function _convert_filename($str)\n    {\n        $str = rcube_charset::convert($str, RCUBE_CHARSET, $this->charset);\n\n        return strtr($str, array(':' => '', '/' => '-'));\n    }\n}\n\nclass zipdownload_mbox_filter extends php_user_filter\n{\n    function filter($in, $out, &$consumed, $closing)\n    {\n        while ($bucket = stream_bucket_make_writeable($in)) {\n            // messages are read line by line\n            if (preg_match('/^>*From /', $bucket->data)) {\n                $bucket->data     = '>' . $bucket->data;\n                $bucket->datalen += 1;\n            }\n\n            $consumed += $bucket->datalen;\n            stream_bucket_append($out, $bucket);\n        }\n\n        return PSFS_PASS_ON;\n    }\n}\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | program/include/rcmail.php                                            |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2008-2014, The Roundcube Dev Team                       |\n | Copyright (C) 2011-2014, Kolab Systems AG                             |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Application class providing core functions and holding              |\n |   instances of all 'global' objects like db- and imap-connections     |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <alec@alec.pl>                            |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Application class of Roundcube Webmail\n * implemented as singleton\n *\n * @package Webmail\n */\nclass rcmail extends rcube\n{\n    /**\n     * Main tasks.\n     *\n     * @var array\n     */\n    static public $main_tasks = array('mail','settings','addressbook','login','logout','utils','dummy');\n\n    /**\n     * Current task.\n     *\n     * @var string\n     */\n    public $task;\n\n    /**\n     * Current action.\n     *\n     * @var string\n     */\n    public $action    = '';\n    public $comm_path = './';\n    public $filename  = '';\n\n    private $address_books = array();\n    private $action_map    = array();\n\n\n    const ERROR_STORAGE          = -2;\n    const ERROR_INVALID_REQUEST  = 1;\n    const ERROR_INVALID_HOST     = 2;\n    const ERROR_COOKIES_DISABLED = 3;\n    const ERROR_RATE_LIMIT       = 4;\n\n\n    /**\n     * This implements the 'singleton' design pattern\n     *\n     * @param integer $mode Ignored rcube::get_instance() argument\n     * @param string  $env  Environment name to run (e.g. live, dev, test)\n     *\n     * @return rcmail The one and only instance\n     */\n    static function get_instance($mode = 0, $env = '')\n    {\n        if (!self::$instance || !is_a(self::$instance, 'rcmail')) {\n            self::$instance = new rcmail($env);\n            // init AFTER object was linked with self::$instance\n            self::$instance->startup();\n        }\n\n        return self::$instance;\n    }\n\n    /**\n     * Initial startup function\n     * to register session, create database and imap connections\n     */\n    protected function startup()\n    {\n        $this->init(self::INIT_WITH_DB | self::INIT_WITH_PLUGINS);\n\n        // set filename if not index.php\n        if (($basename = basename($_SERVER['SCRIPT_FILENAME'])) && $basename != 'index.php') {\n            $this->filename = $basename;\n        }\n\n        // load all configured plugins\n        $plugins          = (array) $this->config->get('plugins', array());\n        $required_plugins = array('filesystem_attachments', 'jqueryui');\n        $this->plugins->load_plugins($plugins, $required_plugins);\n\n        // start session\n        $this->session_init();\n\n        // create user object\n        $this->set_user(new rcube_user($_SESSION['user_id']));\n\n        // set task and action properties\n        $this->set_task(rcube_utils::get_input_value('_task', rcube_utils::INPUT_GPC));\n        $this->action = asciiwords(rcube_utils::get_input_value('_action', rcube_utils::INPUT_GPC));\n\n        // reset some session parameters when changing task\n        if ($this->task != 'utils') {\n            // we reset list page when switching to another task\n            // but only to the main task interface - empty action (#1489076, #1490116)\n            // this will prevent from unintentional page reset on cross-task requests\n            if ($this->session && $_SESSION['task'] != $this->task && empty($this->action)) {\n                $this->session->remove('page');\n\n                // set current task to session\n                $_SESSION['task'] = $this->task;\n            }\n        }\n\n        // init output class (not in CLI mode)\n        if (!empty($_REQUEST['_remote'])) {\n            $GLOBALS['OUTPUT'] = $this->json_init();\n        }\n        else if ($_SERVER['REMOTE_ADDR']) {\n            $GLOBALS['OUTPUT'] = $this->load_gui(!empty($_REQUEST['_framed']));\n        }\n\n        // run init method on all the plugins\n        $this->plugins->init($this, $this->task);\n    }\n\n    /**\n     * Setter for application task\n     *\n     * @param string Task to set\n     */\n    public function set_task($task)\n    {\n        $task = asciiwords($task, true);\n\n        if ($this->user && $this->user->ID)\n            $task = !$task ? 'mail' : $task;\n        else if (php_sapi_name() == 'cli')\n            $task = 'cli';\n        else\n            $task = 'login';\n\n        $this->task      = $task;\n        $this->comm_path = $this->url(array('task' => $this->task));\n\n        if (!empty($_REQUEST['_framed'])) {\n            $this->comm_path .= '&_framed=1';\n        }\n\n        if ($this->output) {\n            $this->output->set_env('task', $this->task);\n            $this->output->set_env('comm_path', $this->comm_path);\n        }\n    }\n\n    /**\n     * Setter for system user object\n     *\n     * @param rcube_user Current user instance\n     */\n    public function set_user($user)\n    {\n        parent::set_user($user);\n\n        $lang = $this->language_prop($this->config->get('language', $_SESSION['language']));\n        $_SESSION['language'] = $this->user->language = $lang;\n\n        // set localization\n        setlocale(LC_ALL, $lang . '.utf8', $lang . '.UTF-8', 'en_US.utf8', 'en_US.UTF-8');\n\n        // Workaround for http://bugs.php.net/bug.php?id=18556\n        // Also strtoupper/strtolower and other methods are locale-aware\n        // for these locales it is problematic (#1490519)\n        if (in_array($lang, array('tr_TR', 'ku', 'az_AZ'))) {\n            setlocale(LC_CTYPE, 'en_US.utf8', 'en_US.UTF-8', 'C');\n        }\n    }\n\n    /**\n     * Return instance of the internal address book class\n     *\n     * @param string  Address book identifier (-1 for default addressbook)\n     * @param boolean True if the address book needs to be writeable\n     *\n     * @return rcube_contacts Address book object\n     */\n    public function get_address_book($id, $writeable = false)\n    {\n        $contacts    = null;\n        $ldap_config = (array)$this->config->get('ldap_public');\n\n        // 'sql' is the alias for '0' used by autocomplete\n        if ($id == 'sql')\n            $id = '0';\n        else if ($id == -1) {\n            $id = $this->config->get('default_addressbook');\n            $default = true;\n        }\n\n        // use existing instance\n        if (isset($this->address_books[$id]) && ($this->address_books[$id] instanceof rcube_addressbook)) {\n            $contacts = $this->address_books[$id];\n        }\n        else if ($id && $ldap_config[$id]) {\n            $domain   = $this->config->mail_domain($_SESSION['storage_host']);\n            $contacts = new rcube_ldap($ldap_config[$id], $this->config->get('ldap_debug'), $domain);\n        }\n        else if ($id === '0') {\n            $contacts = new rcube_contacts($this->db, $this->get_user_id());\n        }\n        else {\n            $plugin = $this->plugins->exec_hook('addressbook_get', array('id' => $id, 'writeable' => $writeable));\n\n            // plugin returned instance of a rcube_addressbook\n            if ($plugin['instance'] instanceof rcube_addressbook) {\n                $contacts = $plugin['instance'];\n            }\n        }\n\n        // when user requested default writeable addressbook\n        // we need to check if default is writeable, if not we\n        // will return first writeable book (if any exist)\n        if ($contacts && $default && $contacts->readonly && $writeable) {\n            $contacts = null;\n        }\n\n        // Get first addressbook from the list if configured default doesn't exist\n        // This can happen when user deleted the addressbook (e.g. Kolab folder)\n        if (!$contacts && (!$id || $default)) {\n            $source = reset($this->get_address_sources($writeable, !$default));\n            if (!empty($source)) {\n                $contacts = $this->get_address_book($source['id']);\n                if ($contacts) {\n                    $id = $source['id'];\n                }\n            }\n        }\n\n        if (!$contacts) {\n            // there's no default, just return\n            if ($default) {\n                return null;\n            }\n\n            self::raise_error(array(\n                    'code'    => 700,\n                    'file'    => __FILE__,\n                    'line'    => __LINE__,\n                    'message' => \"Addressbook source ($id) not found!\"\n                ),\n                true, true);\n        }\n\n        // add to the 'books' array for shutdown function\n        $this->address_books[$id] = $contacts;\n\n        if ($writeable && $contacts->readonly) {\n            return null;\n        }\n\n        // set configured sort order\n        if ($sort_col = $this->config->get('addressbook_sort_col')) {\n            $contacts->set_sort_order($sort_col);\n        }\n\n        return $contacts;\n    }\n\n    /**\n     * Return identifier of the address book object\n     *\n     * @param rcube_addressbook Addressbook source object\n     *\n     * @return string Source identifier\n     */\n    public function get_address_book_id($object)\n    {\n        foreach ($this->address_books as $index => $book) {\n            if ($book === $object) {\n                return $index;\n            }\n        }\n    }\n\n    /**\n     * Return address books list\n     *\n     * @param boolean True if the address book needs to be writeable\n     * @param boolean True if the address book needs to be not hidden\n     *\n     * @return array  Address books array\n     */\n    public function get_address_sources($writeable = false, $skip_hidden = false)\n    {\n        $abook_type   = (string) $this->config->get('address_book_type');\n        $ldap_config  = (array) $this->config->get('ldap_public');\n        $autocomplete = (array) $this->config->get('autocomplete_addressbooks');\n        $list         = array();\n\n        // We are using the DB address book or a plugin address book\n        if (!empty($abook_type) && strtolower($abook_type) != 'ldap') {\n            if (!isset($this->address_books['0'])) {\n                $this->address_books['0'] = new rcube_contacts($this->db, $this->get_user_id());\n            }\n\n            $list['0'] = array(\n                'id'       => '0',\n                'name'     => $this->gettext('personaladrbook'),\n                'groups'   => $this->address_books['0']->groups,\n                'readonly' => $this->address_books['0']->readonly,\n                'undelete' => $this->address_books['0']->undelete && $this->config->get('undo_timeout'),\n                'autocomplete' => in_array('sql', $autocomplete),\n            );\n        }\n\n        if (!empty($ldap_config)) {\n            foreach ($ldap_config as $id => $prop) {\n                // handle misconfiguration\n                if (empty($prop) || !is_array($prop)) {\n                    continue;\n                }\n\n                $list[$id] = array(\n                    'id'       => $id,\n                    'name'     => html::quote($prop['name']),\n                    'groups'   => !empty($prop['groups']) || !empty($prop['group_filters']),\n                    'readonly' => !$prop['writable'],\n                    'hidden'   => $prop['hidden'],\n                    'autocomplete' => in_array($id, $autocomplete)\n                );\n            }\n        }\n\n        $plugin = $this->plugins->exec_hook('addressbooks_list', array('sources' => $list));\n        $list   = $plugin['sources'];\n\n        foreach ($list as $idx => $item) {\n            // register source for shutdown function\n            if (!is_object($this->address_books[$item['id']])) {\n                $this->address_books[$item['id']] = $item;\n            }\n            // remove from list if not writeable as requested\n            if ($writeable && $item['readonly']) {\n                unset($list[$idx]);\n            }\n            // remove from list if hidden as requested\n            else if ($skip_hidden && $item['hidden']) {\n                unset($list[$idx]);\n            }\n        }\n\n        return $list;\n    }\n\n    /**\n     * Getter for compose responses.\n     * These are stored in local config and user preferences.\n     *\n     * @param boolean True to sort the list alphabetically\n     * @param boolean True if only this user's responses shall be listed\n     *\n     * @return array List of the current user's stored responses\n     */\n    public function get_compose_responses($sorted = false, $user_only = false)\n    {\n        $responses = array();\n\n        if (!$user_only) {\n            foreach ($this->config->get('compose_responses_static', array()) as $response) {\n                if (empty($response['key'])) {\n                    $response['key']    = substr(md5($response['name']), 0, 16);\n                }\n\n                $response['static'] = true;\n                $response['class']  = 'readonly';\n\n                $k = $sorted ? '0000-' . strtolower($response['name']) : $response['key'];\n                $responses[$k] = $response;\n            }\n        }\n\n        foreach ($this->config->get('compose_responses', array()) as $response) {\n            if (empty($response['key'])) {\n                $response['key'] = substr(md5($response['name']), 0, 16);\n            }\n\n            $k = $sorted ? strtolower($response['name']) : $response['key'];\n            $responses[$k] = $response;\n        }\n\n        // sort list by name\n        if ($sorted) {\n            ksort($responses, SORT_LOCALE_STRING);\n        }\n\n        return array_values($responses);\n    }\n\n    /**\n     * Init output object for GUI and add common scripts.\n     * This will instantiate a rcmail_output_html object and set\n     * environment vars according to the current session and configuration\n     *\n     * @param boolean True if this request is loaded in a (i)frame\n     *\n     * @return rcube_output Reference to HTML output object\n     */\n    public function load_gui($framed = false)\n    {\n        // init output page\n        if (!($this->output instanceof rcmail_output_html)) {\n            $this->output = new rcmail_output_html($this->task, $framed);\n        }\n\n        // set refresh interval\n        $this->output->set_env('refresh_interval', $this->config->get('refresh_interval', 0));\n        $this->output->set_env('session_lifetime', $this->config->get('session_lifetime', 0) * 60);\n\n        if ($framed) {\n            $this->comm_path .= '&_framed=1';\n            $this->output->set_env('framed', true);\n        }\n\n        $this->output->set_env('task', $this->task);\n        $this->output->set_env('action', $this->action);\n        $this->output->set_env('comm_path', $this->comm_path);\n        $this->output->set_charset(RCUBE_CHARSET);\n\n        if ($this->user && $this->user->ID) {\n            $this->output->set_env('user_id', $this->user->get_hash());\n        }\n\n        // set compose mode for all tasks (message compose step can be triggered from everywhere)\n        $this->output->set_env('compose_extwin', $this->config->get('compose_extwin',false));\n\n        // add some basic labels to client\n        $this->output->add_label('loading', 'servererror', 'connerror', 'requesttimedout',\n            'refreshing', 'windowopenerror', 'uploadingmany');\n\n        return $this->output;\n    }\n\n    /**\n     * Create an output object for JSON responses\n     *\n     * @return rcube_output Reference to JSON output object\n     */\n    public function json_init()\n    {\n        if (!($this->output instanceof rcmail_output_json)) {\n            $this->output = new rcmail_output_json($this->task);\n        }\n\n        return $this->output;\n    }\n\n    /**\n     * Create session object and start the session.\n     */\n    public function session_init()\n    {\n        parent::session_init();\n\n        // set initial session vars\n        if (!$_SESSION['user_id']) {\n            $_SESSION['temp'] = true;\n        }\n\n        // restore skin selection after logout\n        if ($_SESSION['temp'] && !empty($_SESSION['skin'])) {\n            $this->config->set('skin', $_SESSION['skin']);\n        }\n    }\n\n    /**\n     * Perfom login to the mail server and to the webmail service.\n     * This will also create a new user entry if auto_create_user is configured.\n     *\n     * @param string Mail storage (IMAP) user name\n     * @param string Mail storage (IMAP) password\n     * @param string Mail storage (IMAP) host\n     * @param bool   Enables cookie check\n     *\n     * @return boolean True on success, False on failure\n     */\n    function login($username, $password, $host = null, $cookiecheck = false)\n    {\n        $this->login_error = null;\n\n        if (empty($username)) {\n            return false;\n        }\n\n        if ($cookiecheck && empty($_COOKIE)) {\n            $this->login_error = self::ERROR_COOKIES_DISABLED;\n            return false;\n        }\n\n        $username_filter = $this->config->get('login_username_filter');\n        $username_maxlen = $this->config->get('login_username_maxlen', 1024);\n        $password_maxlen = $this->config->get('login_password_maxlen', 1024);\n        $default_host    = $this->config->get('default_host');\n        $default_port    = $this->config->get('default_port');\n        $username_domain = $this->config->get('username_domain');\n        $login_lc        = $this->config->get('login_lc', 2);\n\n        // check input for security (#1490500)\n        if (($username_maxlen && strlen($username) > $username_maxlen)\n            || ($username_filter && !preg_match($username_filter, $username))\n            || ($password_maxlen && strlen($password) > $password_maxlen)\n        ) {\n            $this->login_error = self::ERROR_INVALID_REQUEST;\n            return false;\n        }\n\n        // host is validated in rcmail::autoselect_host(), so here\n        // we'll only handle unset host (if possible)\n        if (!$host && !empty($default_host)) {\n            if (is_array($default_host)) {\n                list($key, $val) = each($default_host);\n                $host = is_numeric($key) ? $val : $key;\n            }\n            else {\n                $host = $default_host;\n            }\n\n            $host = rcube_utils::parse_host($host);\n        }\n\n        if (!$host) {\n            $this->login_error = self::ERROR_INVALID_HOST;\n            return false;\n        }\n\n        // parse $host URL\n        $a_host = parse_url($host);\n        if ($a_host['host']) {\n            $host = $a_host['host'];\n            $ssl  = (isset($a_host['scheme']) && in_array($a_host['scheme'], array('ssl','imaps','tls'))) ? $a_host['scheme'] : null;\n\n            if (!empty($a_host['port']))\n                $port = $a_host['port'];\n            else if ($ssl && $ssl != 'tls' && (!$default_port || $default_port == 143))\n                $port = 993;\n        }\n\n        if (!$port) {\n            $port = $default_port;\n        }\n\n        // Check if we need to add/force domain to username\n        if (!empty($username_domain)) {\n            $domain = is_array($username_domain) ? $username_domain[$host] : $username_domain;\n\n            if ($domain = rcube_utils::parse_host((string)$domain, $host)) {\n                $pos = strpos($username, '@');\n\n                // force configured domains\n                if ($pos !== false && $this->config->get('username_domain_forced')) {\n                    $username = substr($username, 0, $pos) . '@' . $domain;\n                }\n                // just add domain if not specified\n                else if ($pos === false) {\n                    $username .= '@' . $domain;\n                }\n            }\n        }\n\n        // Convert username to lowercase. If storage backend\n        // is case-insensitive we need to store always the same username (#1487113)\n        if ($login_lc) {\n            if ($login_lc == 2 || $login_lc === true) {\n                $username = mb_strtolower($username);\n            }\n            else if (strpos($username, '@')) {\n                // lowercase domain name\n                list($local, $domain) = explode('@', $username);\n                $username = $local . '@' . mb_strtolower($domain);\n            }\n        }\n\n        // try to resolve email address from virtuser table\n        if (strpos($username, '@') && ($virtuser = rcube_user::email2user($username))) {\n            $username = $virtuser;\n        }\n\n        // Here we need IDNA ASCII\n        // Only rcube_contacts class is using domain names in Unicode\n        $host     = rcube_utils::idn_to_ascii($host);\n        $username = rcube_utils::idn_to_ascii($username);\n\n        // user already registered -> overwrite username\n        if ($user = rcube_user::query($username, $host)) {\n            $username = $user->data['username'];\n\n            // Brute-force prevention\n            if ($user->is_locked()) {\n                $this->login_error = self::ERROR_RATE_LIMIT;\n                return false;\n            }\n        }\n\n        $storage = $this->get_storage();\n\n        // try to log in\n        if (!$storage->connect($host, $username, $password, $port, $ssl)) {\n            if ($user) {\n                $user->failed_login();\n            }\n\n            // Wait a second to slow down brute-force attacks (#1490549)\n            sleep(1);\n            return false;\n        }\n\n        // user already registered -> update user's record\n        if (is_object($user)) {\n            // update last login timestamp\n            $user->touch();\n        }\n        // create new system user\n        else if ($this->config->get('auto_create_user')) {\n            if ($created = rcube_user::create($username, $host)) {\n                $user = $created;\n            }\n            else {\n                self::raise_error(array(\n                        'code'    => 620,\n                        'file'    => __FILE__,\n                        'line'    => __LINE__,\n                        'message' => \"Failed to create a user record. Maybe aborted by a plugin?\"\n                    ),\n                    true, false);\n            }\n        }\n        else {\n            self::raise_error(array(\n                    'code'    => 621,\n                    'file'    => __FILE__,\n                    'line'    => __LINE__,\n                    'message' => \"Access denied for new user $username. 'auto_create_user' is disabled\"\n                ),\n                true, false);\n        }\n\n        // login succeeded\n        if (is_object($user) && $user->ID) {\n            // Configure environment\n            $this->set_user($user);\n            $this->set_storage_prop();\n\n            // set session vars\n            $_SESSION['user_id']      = $user->ID;\n            $_SESSION['username']     = $user->data['username'];\n            $_SESSION['storage_host'] = $host;\n            $_SESSION['storage_port'] = $port;\n            $_SESSION['storage_ssl']  = $ssl;\n            $_SESSION['password']     = $this->encrypt($password);\n            $_SESSION['login_time']   = time();\n\n            if (isset($_REQUEST['_timezone']) && $_REQUEST['_timezone'] != '_default_') {\n                $_SESSION['timezone'] = rcube_utils::get_input_value('_timezone', rcube_utils::INPUT_GPC);\n            }\n\n            // fix some old settings according to namespace prefix\n            $this->fix_namespace_settings($user);\n\n            // set/create special folders\n            $this->set_special_folders();\n\n            // clear all mailboxes related cache(s)\n            $storage->clear_cache('mailboxes', true);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns error code of last login operation\n     *\n     * @return int Error code\n     */\n    public function login_error()\n    {\n        if ($this->login_error) {\n            return $this->login_error;\n        }\n\n        if ($this->storage && $this->storage->get_error_code() < -1) {\n            return self::ERROR_STORAGE;\n        }\n    }\n\n    /**\n     * Auto-select IMAP host based on the posted login information\n     *\n     * @return string Selected IMAP host\n     */\n    public function autoselect_host()\n    {\n        $default_host = $this->config->get('default_host');\n        $host         = null;\n\n        if (is_array($default_host)) {\n            $post_host = rcube_utils::get_input_value('_host', rcube_utils::INPUT_POST);\n            $post_user = rcube_utils::get_input_value('_user', rcube_utils::INPUT_POST);\n\n            list(, $domain) = explode('@', $post_user);\n\n            // direct match in default_host array\n            if ($default_host[$post_host] || in_array($post_host, array_values($default_host))) {\n                $host = $post_host;\n            }\n            // try to select host by mail domain\n            else if (!empty($domain)) {\n                foreach ($default_host as $storage_host => $mail_domains) {\n                    if (is_array($mail_domains) && in_array_nocase($domain, $mail_domains)) {\n                        $host = $storage_host;\n                        break;\n                    }\n                    else if (stripos($storage_host, $domain) !== false || stripos(strval($mail_domains), $domain) !== false) {\n                        $host = is_numeric($storage_host) ? $mail_domains : $storage_host;\n                        break;\n                    }\n                }\n            }\n\n            // take the first entry if $host is still not set\n            if (empty($host)) {\n                list($key, $val) = each($default_host);\n                $host = is_numeric($key) ? $val : $key;\n            }\n        }\n        else if (empty($default_host)) {\n            $host = rcube_utils::get_input_value('_host', rcube_utils::INPUT_POST);\n        }\n        else {\n            $host = rcube_utils::parse_host($default_host);\n        }\n\n        return $host;\n    }\n\n    /**\n     * Destroy session data and remove cookie\n     */\n    public function kill_session()\n    {\n        $this->plugins->exec_hook('session_destroy');\n\n        $this->session->kill();\n        $_SESSION = array('language' => $this->user->language, 'temp' => true, 'skin' => $this->config->get('skin'));\n        $this->user->reset();\n    }\n\n    /**\n     * Do server side actions on logout\n     */\n    public function logout_actions()\n    {\n        $storage        = $this->get_storage();\n        $logout_expunge = $this->config->get('logout_expunge');\n        $logout_purge   = $this->config->get('logout_purge');\n        $trash_mbox     = $this->config->get('trash_mbox');\n\n        if ($logout_purge && !empty($trash_mbox)) {\n            $storage->clear_folder($trash_mbox);\n        }\n\n        if ($logout_expunge) {\n            $storage->expunge_folder('INBOX');\n        }\n\n        // Try to save unsaved user preferences\n        if (!empty($_SESSION['preferences'])) {\n            $this->user->save_prefs(unserialize($_SESSION['preferences']));\n        }\n    }\n\n    /**\n     * Build a valid URL to this instance of Roundcube\n     *\n     * @param mixed   Either a string with the action or url parameters as key-value pairs\n     * @param boolean Build an URL absolute to document root\n     * @param boolean Create fully qualified URL including http(s):// and hostname\n     * @param bool    Return absolute URL in secure location\n     *\n     * @return string Valid application URL\n     */\n    public function url($p, $absolute = false, $full = false, $secure = false)\n    {\n        if (!is_array($p)) {\n            if (strpos($p, 'http') === 0) {\n                return $p;\n            }\n\n            $p = array('_action' => @func_get_arg(0));\n        }\n\n        $pre = array();\n        $task = $p['_task'] ?: ($p['task'] ?: $this->task);\n        $pre['_task'] = $task;\n        unset($p['task'], $p['_task']);\n\n        $url  = $this->filename;\n        $delm = '?';\n\n        foreach (array_merge($pre, $p) as $key => $val) {\n            if ($val !== '' && $val !== null) {\n                $par  = $key[0] == '_' ? $key : '_'.$key;\n                $url .= $delm.urlencode($par).'='.urlencode($val);\n                $delm = '&';\n            }\n        }\n\n        $base_path = strval($_SERVER['REDIRECT_SCRIPT_URL'] ?: $_SERVER['SCRIPT_NAME']);\n        $base_path = preg_replace('![^/]+$!', '', $base_path);\n\n        if ($secure && ($token = $this->get_secure_url_token(true))) {\n            // add token to the url\n            $url = $token . '/' . $url;\n\n            // remove old token from the path\n            $base_path = rtrim($base_path, '/');\n            $base_path = preg_replace('/\\/[a-zA-Z0-9]{' . strlen($token) . '}$/', '', $base_path);\n\n            // this need to be full url to make redirects work\n            $absolute = true;\n        }\n\n        if ($absolute || $full) {\n            // add base path to this Roundcube installation\n            if ($base_path == '') $base_path = '/';\n            $prefix = $base_path;\n\n            // prepend protocol://hostname:port\n            if ($full) {\n                $prefix = rcube_utils::resolve_url($prefix);\n            }\n\n            $prefix = rtrim($prefix, '/') . '/';\n        }\n        else {\n            $prefix = './';\n        }\n\n        return $prefix . $url;\n    }\n\n    /**\n     * Function to be executed in script shutdown\n     */\n    public function shutdown()\n    {\n        parent::shutdown();\n\n        foreach ($this->address_books as $book) {\n            if (is_object($book) && is_a($book, 'rcube_addressbook'))\n                $book->close();\n        }\n\n        // write performance stats to logs/console\n        if ($this->config->get('devel_mode') || $this->config->get('performance_stats')) {\n            // make sure logged numbers use unified format\n            setlocale(LC_NUMERIC, 'en_US.utf8', 'en_US.UTF-8', 'en_US', 'C');\n\n            if (function_exists('memory_get_usage'))\n                $mem = $this->show_bytes(memory_get_usage());\n            if (function_exists('memory_get_peak_usage'))\n                $mem .= '/'.$this->show_bytes(memory_get_peak_usage());\n\n            $log = $this->task . ($this->action ? '/'.$this->action : '') . ($mem ? \" [$mem]\" : '');\n\n            if (defined('RCMAIL_START'))\n                self::print_timer(RCMAIL_START, $log);\n            else\n                self::console($log);\n        }\n    }\n\n    /**\n     * CSRF attack prevention code\n     *\n     * @param int Request mode\n     */\n    public function request_security_check($mode = rcube_utils::INPUT_POST)\n    {\n        // check request token\n        if (!$this->check_request($mode)) {\n            self::raise_error(array(\n                'code' => 403, 'type' => 'php',\n                'message' => \"Request security check failed\"), false, true);\n        }\n\n        // check referer if configured\n        if ($this->config->get('referer_check') && !rcube_utils::check_referer()) {\n            self::raise_error(array(\n                'code' => 403, 'type' => 'php',\n                'message' => \"Referer check failed\"), true, true);\n        }\n    }\n\n    /**\n     * Registers action aliases for current task\n     *\n     * @param array $map Alias-to-filename hash array\n     */\n    public function register_action_map($map)\n    {\n        if (is_array($map)) {\n            foreach ($map as $idx => $val) {\n                $this->action_map[$idx] = $val;\n            }\n        }\n    }\n\n    /**\n     * Returns current action filename\n     *\n     * @param array $map Alias-to-filename hash array\n     */\n    public function get_action_file()\n    {\n        if (!empty($this->action_map[$this->action])) {\n            return $this->action_map[$this->action];\n        }\n\n        return strtr($this->action, '-', '_') . '.inc';\n    }\n\n    /**\n     * Fixes some user preferences according to namespace handling change.\n     * Old Roundcube versions were using folder names with removed namespace prefix.\n     * Now we need to add the prefix on servers where personal namespace has prefix.\n     *\n     * @param rcube_user $user User object\n     */\n    private function fix_namespace_settings($user)\n    {\n        $prefix     = $this->storage->get_namespace('prefix');\n        $prefix_len = strlen($prefix);\n\n        if (!$prefix_len) {\n            return;\n        }\n\n        if ($this->config->get('namespace_fixed')) {\n            return;\n        }\n\n        $prefs = array();\n\n        // Build namespace prefix regexp\n        $ns     = $this->storage->get_namespace();\n        $regexp = array();\n\n        foreach ($ns as $entry) {\n            if (!empty($entry)) {\n                foreach ($entry as $item) {\n                    if (strlen($item[0])) {\n                        $regexp[] = preg_quote($item[0], '/');\n                    }\n                }\n            }\n        }\n        $regexp = '/^('. implode('|', $regexp).')/';\n\n        // Fix preferences\n        $opts = array('drafts_mbox', 'junk_mbox', 'sent_mbox', 'trash_mbox', 'archive_mbox');\n        foreach ($opts as $opt) {\n            if ($value = $this->config->get($opt)) {\n                if ($value != 'INBOX' && !preg_match($regexp, $value)) {\n                    $prefs[$opt] = $prefix.$value;\n                }\n            }\n        }\n\n        if (($search_mods = $this->config->get('search_mods')) && !empty($search_mods)) {\n            $folders = array();\n            foreach ($search_mods as $idx => $value) {\n                if ($idx != 'INBOX' && $idx != '*' && !preg_match($regexp, $idx)) {\n                    $idx = $prefix.$idx;\n                }\n                $folders[$idx] = $value;\n            }\n\n            $prefs['search_mods'] = $folders;\n        }\n\n        if (($threading = $this->config->get('message_threading')) && !empty($threading)) {\n            $folders = array();\n            foreach ($threading as $idx => $value) {\n                if ($idx != 'INBOX' && !preg_match($regexp, $idx)) {\n                    $idx = $prefix.$idx;\n                }\n                $folders[$prefix.$idx] = $value;\n            }\n\n            $prefs['message_threading'] = $folders;\n        }\n\n        if ($collapsed = $this->config->get('collapsed_folders')) {\n            $folders     = explode('&&', $collapsed);\n            $count       = count($folders);\n            $folders_str = '';\n\n            if ($count) {\n                $folders[0]        = substr($folders[0], 1);\n                $folders[$count-1] = substr($folders[$count-1], 0, -1);\n            }\n\n            foreach ($folders as $value) {\n                if ($value != 'INBOX' && !preg_match($regexp, $value)) {\n                    $value = $prefix.$value;\n                }\n                $folders_str .= '&'.$value.'&';\n            }\n\n            $prefs['collapsed_folders'] = $folders_str;\n        }\n\n        $prefs['namespace_fixed'] = true;\n\n        // save updated preferences and reset imap settings (default folders)\n        $user->save_prefs($prefs);\n        $this->set_storage_prop();\n    }\n\n    /**\n     * Overwrite action variable\n     *\n     * @param string New action value\n     */\n    public function overwrite_action($action)\n    {\n        $this->action = $action;\n        $this->output->set_env('action', $action);\n    }\n\n    /**\n     * Set environment variables for specified config options\n     */\n    public function set_env_config($options)\n    {\n        foreach ((array) $options as $option) {\n            if ($this->config->get($option)) {\n                $this->output->set_env($option, true);\n            }\n        }\n    }\n\n    /**\n     * Returns RFC2822 formatted current date in user's timezone\n     *\n     * @return string Date\n     */\n    public function user_date()\n    {\n        // get user's timezone\n        try {\n            $tz   = new DateTimeZone($this->config->get('timezone'));\n            $date = new DateTime('now', $tz);\n        }\n        catch (Exception $e) {\n            $date = new DateTime();\n        }\n\n        return $date->format('r');\n    }\n\n    /**\n     * Write login data (name, ID, IP address) to the 'userlogins' log file.\n     */\n    public function log_login($user = null, $failed_login = false, $error_code = 0)\n    {\n        if (!$this->config->get('log_logins')) {\n            return;\n        }\n\n        // failed login\n        if ($failed_login) {\n            // don't fill the log with complete input, which could\n            // have been prepared by a hacker\n            if (strlen($user) > 256) {\n                $user = substr($user, 0, 256) . '...';\n            }\n\n            $message = sprintf('Failed login for %s from %s in session %s (error: %d)',\n                $user, rcube_utils::remote_ip(), session_id(), $error_code);\n        }\n        // successful login\n        else {\n            $user_name = $this->get_user_name();\n            $user_id   = $this->get_user_id();\n\n            if (!$user_id) {\n                return;\n            }\n\n            $message = sprintf('Successful login for %s (ID: %d) from %s in session %s',\n                $user_name, $user_id, rcube_utils::remote_ip(), session_id());\n        }\n\n        // log login\n        self::write_log('userlogins', $message);\n    }\n\n    /**\n     * Create a HTML table based on the given data\n     *\n     * @param  array  Named table attributes\n     * @param  mixed  Table row data. Either a two-dimensional array or a valid SQL result set\n     * @param  array  List of cols to show\n     * @param  string Name of the identifier col\n     *\n     * @return string HTML table code\n     */\n    public function table_output($attrib, $table_data, $a_show_cols, $id_col)\n    {\n        $table = new html_table($attrib);\n\n        // add table header\n        if (!$attrib['noheader']) {\n            foreach ($a_show_cols as $col) {\n                $table->add_header($col, $this->Q($this->gettext($col)));\n            }\n        }\n\n        if (!is_array($table_data)) {\n            $db = $this->get_dbh();\n            while ($table_data && ($sql_arr = $db->fetch_assoc($table_data))) {\n                $table->add_row(array('id' => 'rcmrow' . rcube_utils::html_identifier($sql_arr[$id_col])));\n\n                // format each col\n                foreach ($a_show_cols as $col) {\n                    $table->add($col, $this->Q($sql_arr[$col]));\n                }\n            }\n        }\n        else {\n            foreach ($table_data as $row_data) {\n                $class = !empty($row_data['class']) ? $row_data['class'] : null;\n                if (!empty($attrib['rowclass']))\n                    $class = trim($class . ' ' . $attrib['rowclass']);\n                $rowid = 'rcmrow' . rcube_utils::html_identifier($row_data[$id_col]);\n\n                $table->add_row(array('id' => $rowid, 'class' => $class));\n\n                // format each col\n                foreach ($a_show_cols as $col) {\n                    $val = is_array($row_data[$col]) ? $row_data[$col][0] : $row_data[$col];\n                    $table->add($col, empty($attrib['ishtml']) ? $this->Q($val) : $val);\n                }\n            }\n        }\n\n        return $table->show($attrib);\n    }\n\n    /**\n     * Convert the given date to a human readable form\n     * This uses the date formatting properties from config\n     *\n     * @param mixed  Date representation (string, timestamp or DateTime object)\n     * @param string Date format to use\n     * @param bool   Enables date convertion according to user timezone\n     *\n     * @return string Formatted date string\n     */\n    public function format_date($date, $format = null, $convert = true)\n    {\n        if (is_object($date) && is_a($date, 'DateTime')) {\n            $timestamp = $date->format('U');\n        }\n        else {\n            if (!empty($date)) {\n                $timestamp = rcube_utils::strtotime($date);\n            }\n\n            if (empty($timestamp)) {\n                return '';\n            }\n\n            try {\n                $date = new DateTime(\"@\".$timestamp);\n            }\n            catch (Exception $e) {\n                return '';\n            }\n        }\n\n        if ($convert) {\n            try {\n                // convert to the right timezone\n                $stz = date_default_timezone_get();\n                $tz = new DateTimeZone($this->config->get('timezone'));\n                $date->setTimezone($tz);\n                date_default_timezone_set($tz->getName());\n\n                $timestamp = $date->format('U');\n            }\n            catch (Exception $e) {\n            }\n        }\n\n        // define date format depending on current time\n        if (!$format) {\n            $now         = time();\n            $now_date    = getdate($now);\n            $today_limit = mktime(0, 0, 0, $now_date['mon'], $now_date['mday'], $now_date['year']);\n            $week_limit  = mktime(0, 0, 0, $now_date['mon'], $now_date['mday']-6, $now_date['year']);\n            $pretty_date = $this->config->get('prettydate');\n\n            if ($pretty_date && $timestamp > $today_limit && $timestamp <= $now) {\n                $format = $this->config->get('date_today', $this->config->get('time_format', 'H:i'));\n                $today  = true;\n            }\n            else if ($pretty_date && $timestamp > $week_limit && $timestamp <= $now) {\n                $format = $this->config->get('date_short', 'D H:i');\n            }\n            else {\n                $format = $this->config->get('date_long', 'Y-m-d H:i');\n            }\n        }\n\n        // strftime() format\n        if (preg_match('/%[a-z]+/i', $format)) {\n            $format = strftime($format, $timestamp);\n            if ($stz) {\n                date_default_timezone_set($stz);\n            }\n            return $today ? ($this->gettext('today') . ' ' . $format) : $format;\n        }\n\n        // parse format string manually in order to provide localized weekday and month names\n        // an alternative would be to convert the date() format string to fit with strftime()\n        $out = '';\n        for ($i=0; $i<strlen($format); $i++) {\n            if ($format[$i] == \"\\\\\") {  // skip escape chars\n                continue;\n            }\n\n            // write char \"as-is\"\n            if ($format[$i] == ' ' || $format[$i-1] == \"\\\\\") {\n                $out .= $format[$i];\n            }\n            // weekday (short)\n            else if ($format[$i] == 'D') {\n                $out .= $this->gettext(strtolower(date('D', $timestamp)));\n            }\n            // weekday long\n            else if ($format[$i] == 'l') {\n                $out .= $this->gettext(strtolower(date('l', $timestamp)));\n            }\n            // month name (short)\n            else if ($format[$i] == 'M') {\n                $out .= $this->gettext(strtolower(date('M', $timestamp)));\n            }\n            // month name (long)\n            else if ($format[$i] == 'F') {\n                $out .= $this->gettext('long'.strtolower(date('M', $timestamp)));\n            }\n            else if ($format[$i] == 'x') {\n                $out .= strftime('%x %X', $timestamp);\n            }\n            else {\n                $out .= date($format[$i], $timestamp);\n            }\n        }\n\n        if ($today) {\n            $label = $this->gettext('today');\n            // replcae $ character with \"Today\" label (#1486120)\n            if (strpos($out, '$') !== false) {\n                $out = preg_replace('/\\$/', $label, $out, 1);\n            }\n            else {\n                $out = $label . ' ' . $out;\n            }\n        }\n\n        if ($stz) {\n            date_default_timezone_set($stz);\n        }\n\n        return $out;\n    }\n\n    /**\n     * Return folders list in HTML\n     *\n     * @param array $attrib Named parameters\n     *\n     * @return string HTML code for the gui object\n     */\n    public function folder_list($attrib)\n    {\n        static $a_mailboxes;\n\n        $attrib += array('maxlength' => 100, 'realnames' => false, 'unreadwrap' => ' (%s)');\n\n        $rcmail  = rcmail::get_instance();\n        $storage = $rcmail->get_storage();\n\n        // add some labels to client\n        $rcmail->output->add_label('purgefolderconfirm', 'deletemessagesconfirm');\n\n        $type = $attrib['type'] ? $attrib['type'] : 'ul';\n        unset($attrib['type']);\n\n        if ($type == 'ul' && !$attrib['id']) {\n            $attrib['id'] = 'rcmboxlist';\n        }\n\n        if (empty($attrib['folder_name'])) {\n            $attrib['folder_name'] = '*';\n        }\n\n        // get current folder\n        $mbox_name = $storage->get_folder();\n\n        // build the folders tree\n        if (empty($a_mailboxes)) {\n            // get mailbox list\n            $a_folders = $storage->list_folders_subscribed(\n                '', $attrib['folder_name'], $attrib['folder_filter']);\n            $delimiter = $storage->get_hierarchy_delimiter();\n            $a_mailboxes = array();\n\n            foreach ($a_folders as $folder) {\n                $rcmail->build_folder_tree($a_mailboxes, $folder, $delimiter);\n            }\n        }\n\n        // allow plugins to alter the folder tree or to localize folder names\n        $hook = $rcmail->plugins->exec_hook('render_mailboxlist', array(\n            'list'      => $a_mailboxes,\n            'delimiter' => $delimiter,\n            'type'      => $type,\n            'attribs'   => $attrib,\n        ));\n\n        $a_mailboxes = $hook['list'];\n        $attrib      = $hook['attribs'];\n\n        if ($type == 'select') {\n            $attrib['is_escaped'] = true;\n            $select = new html_select($attrib);\n\n            // add no-selection option\n            if ($attrib['noselection']) {\n                $select->add(html::quote($rcmail->gettext($attrib['noselection'])), '');\n            }\n\n            $rcmail->render_folder_tree_select($a_mailboxes, $mbox_name, $attrib['maxlength'], $select, $attrib['realnames']);\n            $out = $select->show($attrib['default']);\n        }\n        else {\n            $js_mailboxlist = array();\n            $tree = $rcmail->render_folder_tree_html($a_mailboxes, $mbox_name, $js_mailboxlist, $attrib);\n\n            if ($type != 'js') {\n                $out = html::tag('ul', $attrib, $tree, html::$common_attrib);\n\n                $rcmail->output->include_script('treelist.js');\n                $rcmail->output->add_gui_object('mailboxlist', $attrib['id']);\n                $rcmail->output->set_env('unreadwrap', $attrib['unreadwrap']);\n                $rcmail->output->set_env('collapsed_folders', (string)$rcmail->config->get('collapsed_folders'));\n            }\n\n            $rcmail->output->set_env('mailboxes', $js_mailboxlist);\n\n            // we can't use object keys in javascript because they are unordered\n            // we need sorted folders list for folder-selector widget\n            $rcmail->output->set_env('mailboxes_list', array_keys($js_mailboxlist));\n        }\n\n        return $out;\n    }\n\n    /**\n     * Return folders list as html_select object\n     *\n     * @param array $p  Named parameters\n     *\n     * @return html_select HTML drop-down object\n     */\n    public function folder_selector($p = array())\n    {\n        $realnames = $this->config->get('show_real_foldernames');\n        $p += array('maxlength' => 100, 'realnames' => $realnames, 'is_escaped' => true);\n        $a_mailboxes = array();\n        $storage = $this->get_storage();\n\n        if (empty($p['folder_name'])) {\n            $p['folder_name'] = '*';\n        }\n\n        if ($p['unsubscribed']) {\n            $list = $storage->list_folders('', $p['folder_name'], $p['folder_filter'], $p['folder_rights']);\n        }\n        else {\n            $list = $storage->list_folders_subscribed('', $p['folder_name'], $p['folder_filter'], $p['folder_rights']);\n        }\n\n        $delimiter = $storage->get_hierarchy_delimiter();\n\n        if (!empty($p['exceptions'])) {\n            $list = array_diff($list, (array) $p['exceptions']);\n        }\n\n        if (!empty($p['additional'])) {\n            foreach ($p['additional'] as $add_folder) {\n                $add_items = explode($delimiter, $add_folder);\n                $folder    = '';\n                while (count($add_items)) {\n                    $folder .= array_shift($add_items);\n\n                    // @TODO: sorting\n                    if (!in_array($folder, $list)) {\n                        $list[] = $folder;\n                    }\n\n                    $folder .= $delimiter;\n                }\n            }\n        }\n\n        foreach ($list as $folder) {\n            $this->build_folder_tree($a_mailboxes, $folder, $delimiter);\n        }\n\n        $select = new html_select($p);\n\n        if ($p['noselection']) {\n            $select->add(html::quote($p['noselection']), '');\n        }\n\n        $this->render_folder_tree_select($a_mailboxes, $mbox, $p['maxlength'], $select, $p['realnames'], 0, $p);\n\n        return $select;\n    }\n\n    /**\n     * Create a hierarchical array of the mailbox list\n     */\n    public function build_folder_tree(&$arrFolders, $folder, $delm = '/', $path = '')\n    {\n        // Handle namespace prefix\n        $prefix = '';\n        if (!$path) {\n            $n_folder = $folder;\n            $folder = $this->storage->mod_folder($folder);\n\n            if ($n_folder != $folder) {\n                $prefix = substr($n_folder, 0, -strlen($folder));\n            }\n        }\n\n        $pos = strpos($folder, $delm);\n\n        if ($pos !== false) {\n            $subFolders    = substr($folder, $pos+1);\n            $currentFolder = substr($folder, 0, $pos);\n\n            // sometimes folder has a delimiter as the last character\n            if (!strlen($subFolders)) {\n                $virtual = false;\n            }\n            else if (!isset($arrFolders[$currentFolder])) {\n                $virtual = true;\n            }\n            else {\n                $virtual = $arrFolders[$currentFolder]['virtual'];\n            }\n        }\n        else {\n            $subFolders    = false;\n            $currentFolder = $folder;\n            $virtual       = false;\n        }\n\n        $path .= $prefix . $currentFolder;\n\n        if (!isset($arrFolders[$currentFolder])) {\n            $arrFolders[$currentFolder] = array(\n                'id' => $path,\n                'name' => rcube_charset::convert($currentFolder, 'UTF7-IMAP'),\n                'virtual' => $virtual,\n                'folders' => array());\n        }\n        else {\n            $arrFolders[$currentFolder]['virtual'] = $virtual;\n        }\n\n        if (strlen($subFolders)) {\n            $this->build_folder_tree($arrFolders[$currentFolder]['folders'], $subFolders, $delm, $path.$delm);\n        }\n    }\n\n    /**\n     * Return html for a structured list &lt;ul&gt; for the mailbox tree\n     */\n    public function render_folder_tree_html(&$arrFolders, &$mbox_name, &$jslist, $attrib, $nestLevel = 0)\n    {\n        $maxlength = intval($attrib['maxlength']);\n        $realnames = (bool)$attrib['realnames'];\n        $msgcounts = $this->storage->get_cache('messagecount');\n        $collapsed = $this->config->get('collapsed_folders');\n        $realnames = $this->config->get('show_real_foldernames');\n\n        $out = '';\n        foreach ($arrFolders as $folder) {\n            $title        = null;\n            $folder_class = $this->folder_classname($folder['id']);\n            $is_collapsed = strpos($collapsed, '&'.rawurlencode($folder['id']).'&') !== false;\n            $unread       = $msgcounts ? intval($msgcounts[$folder['id']]['UNSEEN']) : 0;\n\n            if ($folder_class && !$realnames) {\n                $foldername = $this->gettext($folder_class);\n            }\n            else {\n                $foldername = $folder['name'];\n\n                // shorten the folder name to a given length\n                if ($maxlength && $maxlength > 1) {\n                    $fname = abbreviate_string($foldername, $maxlength);\n                    if ($fname != $foldername) {\n                        $title = $foldername;\n                    }\n                    $foldername = $fname;\n                }\n            }\n\n            // make folder name safe for ids and class names\n            $folder_id = rcube_utils::html_identifier($folder['id'], true);\n            $classes   = array('mailbox');\n\n            // set special class for Sent, Drafts, Trash and Junk\n            if ($folder_class) {\n                $classes[] = $folder_class;\n            }\n\n            if ($folder['id'] == $mbox_name) {\n                $classes[] = 'selected';\n            }\n\n            if ($folder['virtual']) {\n                $classes[] = 'virtual';\n            }\n            else if ($unread) {\n                $classes[] = 'unread';\n            }\n\n            $js_name = $this->JQ($folder['id']);\n            $html_name = $this->Q($foldername) . ($unread ? html::span('unreadcount', sprintf($attrib['unreadwrap'], $unread)) : '');\n            $link_attrib = $folder['virtual'] ? array() : array(\n                'href' => $this->url(array('_mbox' => $folder['id'])),\n                'onclick' => sprintf(\"return %s.command('list','%s',this,event)\", rcmail_output::JS_OBJECT_NAME, $js_name),\n                'rel' => $folder['id'],\n                'title' => $title,\n            );\n\n            $out .= html::tag('li', array(\n                'id' => \"rcmli\".$folder_id,\n                'class' => join(' ', $classes),\n                'noclose' => true),\n                html::a($link_attrib, $html_name));\n\n            if (!empty($folder['folders'])) {\n                $out .= html::div('treetoggle ' . ($is_collapsed ? 'collapsed' : 'expanded'), '&nbsp;');\n            }\n\n            $jslist[$folder['id']] = array(\n                'id'      => $folder['id'],\n                'name'    => $foldername,\n                'virtual' => $folder['virtual'],\n            );\n\n            if (!empty($folder_class)) {\n                $jslist[$folder['id']]['class'] = $folder_class;\n            }\n\n            if (!empty($folder['folders'])) {\n                $out .= html::tag('ul', array('style' => ($is_collapsed ? \"display:none;\" : null)),\n                    $this->render_folder_tree_html($folder['folders'], $mbox_name, $jslist, $attrib, $nestLevel+1));\n            }\n\n            $out .= \"</li>\\n\";\n        }\n\n        return $out;\n    }\n\n    /**\n     * Return html for a flat list <select> for the mailbox tree\n     */\n    public function render_folder_tree_select(&$arrFolders, &$mbox_name, $maxlength, &$select, $realnames = false, $nestLevel = 0, $opts = array())\n    {\n        $out = '';\n\n        foreach ($arrFolders as $folder) {\n            // skip exceptions (and its subfolders)\n            if (!empty($opts['exceptions']) && in_array($folder['id'], $opts['exceptions'])) {\n                continue;\n            }\n\n            // skip folders in which it isn't possible to create subfolders\n            if (!empty($opts['skip_noinferiors'])) {\n                $attrs = $this->storage->folder_attributes($folder['id']);\n                if ($attrs && in_array_nocase('\\\\Noinferiors', $attrs)) {\n                    continue;\n                }\n            }\n\n            if (!$realnames && ($folder_class = $this->folder_classname($folder['id']))) {\n                $foldername = $this->gettext($folder_class);\n            }\n            else {\n                $foldername = $folder['name'];\n\n                // shorten the folder name to a given length\n                if ($maxlength && $maxlength > 1) {\n                    $foldername = abbreviate_string($foldername, $maxlength);\n                }\n            }\n\n            $select->add(str_repeat('&nbsp;', $nestLevel*4) . html::quote($foldername), $folder['id']);\n\n            if (!empty($folder['folders'])) {\n                $out .= $this->render_folder_tree_select($folder['folders'], $mbox_name, $maxlength,\n                    $select, $realnames, $nestLevel+1, $opts);\n            }\n        }\n\n        return $out;\n    }\n\n    /**\n     * Return internal name for the given folder if it matches the configured special folders\n     */\n    public function folder_classname($folder_id)\n    {\n        if ($folder_id == 'INBOX') {\n            return 'inbox';\n        }\n\n        // for these mailboxes we have localized labels and css classes\n        foreach (array('sent', 'drafts', 'trash', 'junk') as $smbx)\n        {\n            if ($folder_id === $this->config->get($smbx.'_mbox')) {\n                return $smbx;\n            }\n        }\n    }\n\n    /**\n     * Try to localize the given IMAP folder name.\n     * UTF-7 decode it in case no localized text was found\n     *\n     * @param string $name      Folder name\n     * @param bool   $with_path Enable path localization\n     *\n     * @return string Localized folder name in UTF-8 encoding\n     */\n    public function localize_foldername($name, $with_path = false)\n    {\n        $realnames = $this->config->get('show_real_foldernames');\n\n        if (!$realnames && ($folder_class = $this->folder_classname($name))) {\n            return $this->gettext($folder_class);\n        }\n\n        // try to localize path of the folder\n        if ($with_path && !$realnames) {\n            $storage   = $this->get_storage();\n            $delimiter = $storage->get_hierarchy_delimiter();\n            $path      = explode($delimiter, $name);\n            $count     = count($path);\n\n            if ($count > 1) {\n                for ($i = 1; $i < $count; $i++) {\n                    $folder = implode($delimiter, array_slice($path, 0, -$i));\n                    if ($folder_class = $this->folder_classname($folder)) {\n                        $name = implode($delimiter, array_slice($path, $count - $i));\n                        return $this->gettext($folder_class) . $delimiter . rcube_charset::convert($name, 'UTF7-IMAP');\n                    }\n                }\n            }\n        }\n\n        return rcube_charset::convert($name, 'UTF7-IMAP');\n    }\n\n\n    public function localize_folderpath($path)\n    {\n        $protect_folders = $this->config->get('protect_default_folders');\n        $delimiter       = $this->storage->get_hierarchy_delimiter();\n        $path            = explode($delimiter, $path);\n        $result          = array();\n\n        foreach ($path as $idx => $dir) {\n            $directory = implode($delimiter, array_slice($path, 0, $idx+1));\n            if ($protect_folders && $this->storage->is_special_folder($directory)) {\n                unset($result);\n                $result[] = $this->localize_foldername($directory);\n            }\n            else {\n                $result[] = rcube_charset::convert($dir, 'UTF7-IMAP');\n            }\n        }\n\n        return implode($delimiter, $result);\n    }\n\n\n    public static function quota_display($attrib)\n    {\n        $rcmail = rcmail::get_instance();\n\n        if (!$attrib['id']) {\n            $attrib['id'] = 'rcmquotadisplay';\n        }\n\n        $_SESSION['quota_display'] = !empty($attrib['display']) ? $attrib['display'] : 'text';\n\n        $rcmail->output->add_gui_object('quotadisplay', $attrib['id']);\n\n        $quota = $rcmail->quota_content($attrib);\n\n        $rcmail->output->add_script('rcmail.set_quota('.rcube_output::json_serialize($quota).');', 'docready');\n\n        return html::span($attrib, '&nbsp;');\n    }\n\n\n    public function quota_content($attrib = null, $folder = null)\n    {\n        $quota = $this->storage->get_quota($folder);\n        $quota = $this->plugins->exec_hook('quota', $quota);\n\n        $quota_result = (array) $quota;\n        $quota_result['type']   = isset($_SESSION['quota_display']) ? $_SESSION['quota_display'] : '';\n        $quota_result['folder'] = $folder !== null && $folder !== '' ? $folder : 'INBOX';\n\n        if ($quota['total'] > 0) {\n            if (!isset($quota['percent'])) {\n                $quota_result['percent'] = min(100, round(($quota['used']/max(1,$quota['total']))*100));\n            }\n\n            $title = sprintf('%s / %s (%.0f%%)',\n                $this->show_bytes($quota['used'] * 1024), $this->show_bytes($quota['total'] * 1024),\n                $quota_result['percent']);\n\n            $quota_result['title'] = $title;\n\n            if ($attrib['width']) {\n                $quota_result['width'] = $attrib['width'];\n            }\n            if ($attrib['height']) {\n                $quota_result['height'] = $attrib['height'];\n            }\n\n            // build a table of quota types/roots info\n            if (($root_cnt = count($quota_result['all'])) > 1 || count($quota_result['all'][key($quota_result['all'])]) > 1) {\n                $table = new html_table(array('cols' => 3, 'class' => 'quota-info'));\n\n                $table->add_header(null, self::Q($this->gettext('quotatype')));\n                $table->add_header(null, self::Q($this->gettext('quotatotal')));\n                $table->add_header(null, self::Q($this->gettext('quotaused')));\n\n                foreach ($quota_result['all'] as $root => $data) {\n                    if ($root_cnt > 1 && $root) {\n                        $table->add(array('colspan' => 3, 'class' => 'root'), self::Q($root));\n                    }\n\n                    if ($storage = $data['storage']) {\n                        $percent = min(100, round(($storage['used']/max(1,$storage['total']))*100));\n\n                        $table->add('name', self::Q($this->gettext('quotastorage')));\n                        $table->add(null, $this->show_bytes($storage['total'] * 1024));\n                        $table->add(null, sprintf('%s (%.0f%%)', $this->show_bytes($storage['used'] * 1024), $percent));\n                    }\n                    if ($message = $data['message']) {\n                        $percent = min(100, round(($message['used']/max(1,$message['total']))*100));\n\n                        $table->add('name', self::Q($this->gettext('quotamessage')));\n                        $table->add(null, intval($message['total']));\n                        $table->add(null, sprintf('%d (%.0f%%)', $message['used'], $percent));\n                    }\n                }\n\n                $quota_result['table'] = $table->show();\n            }\n        }\n        else {\n            $unlimited               = $this->config->get('quota_zero_as_unlimited');\n            $quota_result['title']   = $this->gettext($unlimited ? 'unlimited' : 'unknown');\n            $quota_result['percent'] = 0;\n        }\n\n        // cleanup\n        unset($quota_result['abort']);\n        if (empty($quota_result['table'])) {\n            unset($quota_result['all']);\n        }\n\n        return $quota_result;\n    }\n\n    /**\n     * Outputs error message according to server error/response codes\n     *\n     * @param string $fallback       Fallback message label\n     * @param array  $fallback_args  Fallback message label arguments\n     * @param string $suffix         Message label suffix\n     * @param array  $params         Additional parameters (type, prefix)\n     */\n    public function display_server_error($fallback = null, $fallback_args = null, $suffix = '', $params = array())\n    {\n        $err_code = $this->storage->get_error_code();\n        $res_code = $this->storage->get_response_code();\n        $args     = array();\n\n        if ($res_code == rcube_storage::NOPERM) {\n            $error = 'errornoperm';\n        }\n        else if ($res_code == rcube_storage::READONLY) {\n            $error = 'errorreadonly';\n        }\n        else if ($res_code == rcube_storage::OVERQUOTA) {\n            $error = 'erroroverquota';\n        }\n        else if ($err_code && ($err_str = $this->storage->get_error_str())) {\n            // try to detect access rights problem and display appropriate message\n            if (stripos($err_str, 'Permission denied') !== false) {\n                $error = 'errornoperm';\n            }\n            // try to detect full mailbox problem and display appropriate message\n            // there can be e.g. \"Quota exceeded\" / \"quotum would exceed\" / \"Over quota\"\n            else if (stripos($err_str, 'quot') !== false && preg_match('/exceed|over/i', $err_str)) {\n                $error = 'erroroverquota';\n            }\n            else {\n                $error = 'servererrormsg';\n                $args  = array('msg' => rcube::Q($err_str));\n            }\n        }\n        else if ($err_code < 0) {\n            $error = 'storageerror';\n        }\n        else if ($fallback) {\n            $error = $fallback;\n            $args  = $fallback_args;\n            $params['prefix'] = false;\n        }\n\n        if ($error) {\n            if ($suffix && $this->text_exists($error . $suffix)) {\n                $error .= $suffix;\n            }\n\n            $msg = $this->gettext(array('name' => $error, 'vars' => $args));\n\n            if ($params['prefix'] && $fallback) {\n                $msg = $this->gettext(array('name' => $fallback, 'vars' => $fallback_args)) . ' ' . $msg;\n            }\n\n            $this->output->show_message($msg, $params['type'] ?: 'error');\n        }\n    }\n\n    /**\n     * Output HTML editor scripts\n     *\n     * @param string $mode  Editor mode\n     */\n    public function html_editor($mode = '')\n    {\n        $spellcheck       = intval($this->config->get('enable_spellcheck'));\n        $spelldict        = intval($this->config->get('spellcheck_dictionary'));\n        $disabled_plugins = array();\n        $disabled_buttons = array();\n        $extra_plugins    = array();\n        $extra_buttons    = array();\n\n        if (!$spellcheck) {\n            $disabled_plugins[] = 'spellchecker';\n        }\n\n        $hook = $this->plugins->exec_hook('html_editor', array(\n                'mode'             => $mode,\n                'disabled_plugins' => $disabled_plugins,\n                'disabled_buttons' => $disabled_buttons,\n                'extra_plugins' => $extra_plugins,\n                'extra_buttons' => $extra_buttons,\n        ));\n\n        if ($hook['abort']) {\n            return;\n        }\n\n        $lang_codes = array($_SESSION['language']);\n\n        if ($pos = strpos($_SESSION['language'], '_')) {\n            $lang_codes[] = substr($_SESSION['language'], 0, $pos);\n        }\n\n        foreach ($lang_codes as $code) {\n            if (file_exists(INSTALL_PATH . 'program/js/tinymce/langs/'.$code.'.js')) {\n                $lang = $code;\n                break;\n            }\n        }\n\n        if (empty($lang)) {\n            $lang = 'en';\n        }\n\n        $config = array(\n            'mode'       => $mode,\n            'lang'       => $lang,\n            'skin_path'  => $this->output->get_skin_path(),\n            'spellcheck' => $spellcheck, // deprecated\n            'spelldict'  => $spelldict,\n            'disabled_plugins' => $hook['disabled_plugins'],\n            'disabled_buttons' => $hook['disabled_buttons'],\n            'extra_plugins'    => $hook['extra_plugins'],\n            'extra_buttons'    => $hook['extra_buttons'],\n        );\n\n        $this->output->add_label('selectimage', 'addimage', 'selectmedia', 'addmedia');\n        $this->output->set_env('editor_config', $config);\n        $this->output->include_css('program/js/tinymce/roundcube/browser.css');\n        $this->output->include_script('tinymce/tinymce.min.js');\n        $this->output->include_script('editor.js');\n    }\n\n    /**\n     * File upload progress handler.\n     */\n    public function upload_progress()\n    {\n        $params = array(\n            'action' => $this->action,\n            'name'   => rcube_utils::get_input_value('_progress', rcube_utils::INPUT_GET),\n        );\n\n        if (function_exists('uploadprogress_get_info')) {\n            $status = uploadprogress_get_info($params['name']);\n\n            if (!empty($status)) {\n                $params['current'] = $status['bytes_uploaded'];\n                $params['total']   = $status['bytes_total'];\n            }\n        }\n\n        if (!isset($status) && filter_var(ini_get('apc.rfc1867'), FILTER_VALIDATE_BOOLEAN)\n            && ini_get('apc.rfc1867_name')\n        ) {\n            $prefix = ini_get('apc.rfc1867_prefix');\n            $status = apc_fetch($prefix . $params['name']);\n\n            if (!empty($status)) {\n                $params['current'] = $status['current'];\n                $params['total']   = $status['total'];\n            }\n        }\n\n        if (!isset($status) && filter_var(ini_get('session.upload_progress.enabled'), FILTER_VALIDATE_BOOLEAN)\n            && ini_get('session.upload_progress.name')\n        ) {\n            $key = ini_get('session.upload_progress.prefix') . $params['name'];\n\n            $params['total']   = $_SESSION[$key]['content_length'];\n            $params['current'] = $_SESSION[$key]['bytes_processed'];\n        }\n\n        if (!empty($params['total'])) {\n            $total = $this->show_bytes($params['total'], $unit);\n            switch ($unit) {\n            case 'GB':\n                $gb      = $params['current']/1073741824;\n                $current = sprintf($gb >= 10 ? \"%d\" : \"%.1f\", $gb);\n                break;\n            case 'MB':\n                $mb      = $params['current']/1048576;\n                $current = sprintf($mb >= 10 ? \"%d\" : \"%.1f\", $mb);\n                break;\n            case 'KB':\n                $current = round($params['current']/1024);\n                break;\n            case 'B':\n            default:\n                $current = $params['current'];\n                break;\n            }\n\n            $params['percent'] = round($params['current']/$params['total']*100);\n            $params['text']    = $this->gettext(array(\n                'name' => 'uploadprogress',\n                'vars' => array(\n                    'percent' => $params['percent'] . '%',\n                    'current' => $current,\n                    'total'   => $total\n                )\n            ));\n        }\n\n        $this->output->command('upload_progress_update', $params);\n        $this->output->send();\n    }\n\n    /**\n     * Initializes file uploading interface.\n     *\n     * @param $int Optional maximum file size in bytes\n     */\n    public function upload_init($max_size = null)\n    {\n        // Enable upload progress bar\n        if ($seconds = $this->config->get('upload_progress')) {\n            if (function_exists('uploadprogress_get_info')) {\n                $field_name = 'UPLOAD_IDENTIFIER';\n            }\n            if (!$field_name && filter_var(ini_get('apc.rfc1867'), FILTER_VALIDATE_BOOLEAN)) {\n                $field_name = ini_get('apc.rfc1867_name');\n            }\n            if (!$field_name && filter_var(ini_get('session.upload_progress.enabled'), FILTER_VALIDATE_BOOLEAN)) {\n                $field_name = ini_get('session.upload_progress.name');\n            }\n\n            if ($field_name) {\n                $this->output->set_env('upload_progress_name', $field_name);\n                $this->output->set_env('upload_progress_time', (int) $seconds);\n            }\n        }\n\n        // find max filesize value\n        $max_filesize = parse_bytes(ini_get('upload_max_filesize'));\n        $max_postsize = parse_bytes(ini_get('post_max_size'));\n\n        if ($max_postsize && $max_postsize < $max_filesize) {\n            $max_filesize = $max_postsize;\n        }\n\n        if ($max_size && $max_size < $max_filesize) {\n            $max_filesize = $max_size;\n        }\n\n        $this->output->set_env('max_filesize', $max_filesize);\n        $max_filesize = $this->show_bytes($max_filesize);\n        $this->output->set_env('filesizeerror', $this->gettext(array(\n            'name' => 'filesizeerror', 'vars' => array('size' => $max_filesize))));\n\n        return $max_filesize;\n    }\n\n    /**\n     * Outputs uploaded file content (with image thumbnails support\n     *\n     * @param array $file Upload file data\n     */\n    public function display_uploaded_file($file)\n    {\n        if (empty($file)) {\n            return;\n        }\n\n        $file = $this->plugins->exec_hook('attachment_display', $file);\n\n        if ($file['status']) {\n            if (empty($file['size'])) {\n                $file['size'] = $file['data'] ? strlen($file['data']) : @filesize($file['path']);\n            }\n\n            // generate image thumbnail for file browser in HTML editor\n            if (!empty($_GET['_thumbnail'])) {\n                $temp_dir       = $this->config->get('temp_dir');\n                $thumbnail_size = 80;\n                $mimetype       = $file['mimetype'];\n                $file_ident     = $file['id'] . ':' . $file['mimetype'] . ':' . $file['size'];\n                $cache_basename = $temp_dir . '/' . md5($file_ident . ':' . $this->user->ID . ':' . $thumbnail_size);\n                $cache_file     = $cache_basename . '.thumb';\n\n                // render thumbnail image if not done yet\n                if (!is_file($cache_file)) {\n                    if (!$file['path']) {\n                        $orig_name = $filename = $cache_basename . '.tmp';\n                        file_put_contents($orig_name, $file['data']);\n                    }\n                    else {\n                        $filename = $file['path'];\n                    }\n\n                    $image = new rcube_image($filename);\n                    if ($imgtype = $image->resize($thumbnail_size, $cache_file, true)) {\n                        $mimetype = 'image/' . $imgtype;\n\n                        if ($orig_name) {\n                            unlink($orig_name);\n                        }\n                    }\n                }\n\n                if (is_file($cache_file)) {\n                    // cache for 1h\n                    $this->output->future_expire_header(3600);\n                    header('Content-Type: ' . $mimetype);\n                    header('Content-Length: ' . filesize($cache_file));\n\n                    readfile($cache_file);\n                    exit;\n                }\n            }\n\n            header('Content-Type: ' . $file['mimetype']);\n            header('Content-Length: ' . $file['size']);\n\n            if ($file['data']) {\n                echo $file['data'];\n            }\n            else if ($file['path']) {\n                readfile($file['path']);\n            }\n        }\n    }\n\n    /**\n     * Initializes client-side autocompletion.\n     */\n    public function autocomplete_init()\n    {\n        static $init;\n\n        if ($init) {\n            return;\n        }\n\n        $init = 1;\n\n        if (($threads = (int)$this->config->get('autocomplete_threads')) > 0) {\n            $book_types = (array) $this->config->get('autocomplete_addressbooks', 'sql');\n            if (count($book_types) > 1) {\n                $this->output->set_env('autocomplete_threads', $threads);\n                $this->output->set_env('autocomplete_sources', $book_types);\n            }\n        }\n\n        $this->output->set_env('autocomplete_max', (int)$this->config->get('autocomplete_max', 15));\n        $this->output->set_env('autocomplete_min_length', $this->config->get('autocomplete_min_length'));\n        $this->output->add_label('autocompletechars', 'autocompletemore');\n    }\n\n    /**\n     * Returns supported font-family specifications\n     *\n     * @param string $font  Font name\n     *\n     * @param string|array Font-family specification array or string (if $font is used)\n     */\n    public static function font_defs($font = null)\n    {\n        $fonts = array(\n            'Andale Mono'   => '\"Andale Mono\",Times,monospace',\n            'Arial'         => 'Arial,Helvetica,sans-serif',\n            'Arial Black'   => '\"Arial Black\",\"Avant Garde\",sans-serif',\n            'Book Antiqua'  => '\"Book Antiqua\",Palatino,serif',\n            'Courier New'   => '\"Courier New\",Courier,monospace',\n            'Georgia'       => 'Georgia,Palatino,serif',\n            'Helvetica'     => 'Helvetica,Arial,sans-serif',\n            'Impact'        => 'Impact,Chicago,sans-serif',\n            'Tahoma'        => 'Tahoma,Arial,Helvetica,sans-serif',\n            'Terminal'      => 'Terminal,Monaco,monospace',\n            'Times New Roman' => '\"Times New Roman\",Times,serif',\n            'Trebuchet MS'  => '\"Trebuchet MS\",Geneva,sans-serif',\n            'Verdana'       => 'Verdana,Geneva,sans-serif',\n        );\n\n        if ($font) {\n            return $fonts[$font];\n        }\n\n        return $fonts;\n    }\n\n    /**\n     * Create a human readable string for a number of bytes\n     *\n     * @param int    Number of bytes\n     * @param string Size unit\n     *\n     * @return string Byte string\n     */\n    public function show_bytes($bytes, &$unit = null)\n    {\n        if ($bytes >= 1073741824) {\n            $unit = 'GB';\n            $gb   = $bytes/1073741824;\n            $str  = sprintf($gb >= 10 ? \"%d \" : \"%.1f \", $gb) . $this->gettext($unit);\n        }\n        else if ($bytes >= 1048576) {\n            $unit = 'MB';\n            $mb   = $bytes/1048576;\n            $str  = sprintf($mb >= 10 ? \"%d \" : \"%.1f \", $mb) . $this->gettext($unit);\n        }\n        else if ($bytes >= 1024) {\n            $unit = 'KB';\n            $str  = sprintf(\"%d \",  round($bytes/1024)) . $this->gettext($unit);\n        }\n        else {\n            $unit = 'B';\n            $str  = sprintf('%d ', $bytes) . $this->gettext($unit);\n        }\n\n        return $str;\n    }\n\n    /**\n     * Returns real size (calculated) of the message part\n     *\n     * @param rcube_message_part  Message part\n     *\n     * @return string Part size (and unit)\n     */\n    public function message_part_size($part)\n    {\n        if (isset($part->d_parameters['size'])) {\n            $size = $this->show_bytes((int)$part->d_parameters['size']);\n        }\n        else {\n          $size = $part->size;\n          if ($part->encoding == 'base64') {\n            $size = $size / 1.33;\n          }\n\n          $size = '~' . $this->show_bytes($size);\n        }\n\n        return $size;\n    }\n\n    /**\n     * Returns message UID(s) and IMAP folder(s) from GET/POST data\n     *\n     * @param string UID value to decode\n     * @param string Default mailbox value (if not encoded in UIDs)\n     * @param bool   Will be set to True if multi-folder request\n     *\n     * @return array  List of message UIDs per folder\n     */\n    public static function get_uids($uids = null, $mbox = null, &$is_multifolder = false)\n    {\n        // message UID (or comma-separated list of IDs) is provided in\n        // the form of <ID>-<MBOX>[,<ID>-<MBOX>]*\n\n        $_uid  = $uids ?: rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GPC);\n        $_mbox = $mbox ?: (string) rcube_utils::get_input_value('_mbox', rcube_utils::INPUT_GPC);\n\n        // already a hash array\n        if (is_array($_uid) && !isset($_uid[0])) {\n            return $_uid;\n        }\n\n        $result = array();\n\n        // special case: *\n        if ($_uid == '*' && is_object($_SESSION['search'][1]) && $_SESSION['search'][1]->multi) {\n            $is_multifolder = true;\n            // extract the full list of UIDs per folder from the search set\n            foreach ($_SESSION['search'][1]->sets as $subset) {\n                $mbox = $subset->get_parameters('MAILBOX');\n                $result[$mbox] = $subset->get();\n            }\n        }\n        else {\n            if (is_string($_uid))\n                $_uid = explode(',', $_uid);\n\n            // create a per-folder UIDs array\n            foreach ((array)$_uid as $uid) {\n                list($uid, $mbox) = explode('-', $uid, 2);\n                if (!strlen($mbox)) {\n                    $mbox = $_mbox;\n                }\n                else {\n                    $is_multifolder = true;\n                }\n\n                if ($uid == '*') {\n                    $result[$mbox] = $uid;\n                }\n                else {\n                    $result[$mbox][] = $uid;\n                }\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Get resource file content (with assets_dir support)\n     *\n     * @param string $name File name\n     */\n    public function get_resource_content($name)\n    {\n        if (!strpos($name, '/')) {\n            $name = \"program/resources/$name\";\n        }\n\n        $assets_dir = $this->config->get('assets_dir');\n\n        if ($assets_dir) {\n            $path = slashify($assets_dir) . $name;\n            if (@file_exists($path)) {\n                $name = $path;\n            }\n        }\n\n        return file_get_contents($name, false);\n    }\n\n    /**\n     * Converts HTML content into plain text\n     *\n     * @param string $html    HTML content\n     * @param array  $options Conversion parameters (width, links, charset)\n     *\n     * @return string Plain text\n     */\n    public function html2text($html, $options = array())\n    {\n        $default_options = array(\n            'links'   => true,\n            'width'   => 75,\n            'body'    => $html,\n            'charset' => RCUBE_CHARSET,\n        );\n\n        $options = array_merge($default_options, (array) $options);\n\n        // Plugins may want to modify HTML in another/additional way\n        $options = $this->plugins->exec_hook('html2text', $options);\n\n        // Convert to text\n        if (!$options['abort']) {\n            $converter = new rcube_html2text($options['body'],\n                false, $options['links'], $options['width'], $options['charset']);\n\n            $options['body'] = rtrim($converter->get_text());\n        }\n\n        return $options['body'];\n    }\n\n    /**\n     * Connect to the mail storage server with stored session data\n     *\n     * @return bool True on success, False on error\n     */\n    public function storage_connect()\n    {\n        $storage = $this->get_storage();\n\n        if ($_SESSION['storage_host'] && !$storage->is_connected()) {\n            $host = $_SESSION['storage_host'];\n            $user = $_SESSION['username'];\n            $port = $_SESSION['storage_port'];\n            $ssl  = $_SESSION['storage_ssl'];\n            $pass = $this->decrypt($_SESSION['password']);\n\n            if (!$storage->connect($host, $user, $pass, $port, $ssl)) {\n                if (is_object($this->output)) {\n                    $this->output->show_message('storageerror', 'error');\n                }\n            }\n            else {\n                $this->set_storage_prop();\n            }\n        }\n\n        return $storage->is_connected();\n    }\n}\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | program/include/rcmail_output_html.php                                |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2006-2014, The Roundcube Dev Team                       |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Class to handle HTML page output using a skin template.             |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Class to create HTML page output using a skin template\n *\n * @package Webmail\n * @subpackage View\n */\nclass rcmail_output_html extends rcmail_output\n{\n    public $type = 'html';\n\n    protected $message;\n    protected $template_name;\n    protected $js_env       = array();\n    protected $js_labels    = array();\n    protected $js_commands  = array();\n    protected $skin_paths   = array();\n    protected $scripts_path = '';\n    protected $script_files = array();\n    protected $css_files    = array();\n    protected $scripts      = array();\n    protected $default_template = \"<html>\\n<head><title></title></head>\\n<body></body>\\n</html>\";\n    protected $header = '';\n    protected $footer = '';\n    protected $body = '';\n    protected $base_path = '';\n    protected $assets_path;\n    protected $assets_dir = RCUBE_INSTALL_PATH;\n    protected $devel_mode = false;\n\n    // deprecated names of templates used before 0.5\n    protected $deprecated_templates = array(\n        'contact'      => 'showcontact',\n        'contactadd'   => 'addcontact',\n        'contactedit'  => 'editcontact',\n        'identityedit' => 'editidentity',\n        'messageprint' => 'printmessage',\n    );\n\n    /**\n     * Constructor\n     */\n    public function __construct($task = null, $framed = false)\n    {\n        parent::__construct();\n\n        $this->devel_mode = $this->config->get('devel_mode');\n\n        $this->set_env('task', $task);\n        $this->set_env('x_frame_options', $this->config->get('x_frame_options', 'sameorigin'));\n        $this->set_env('standard_windows', (bool) $this->config->get('standard_windows'));\n        $this->set_env('locale', $_SESSION['language']);\n\n        // add cookie info\n        $this->set_env('cookie_domain', ini_get('session.cookie_domain'));\n        $this->set_env('cookie_path', ini_get('session.cookie_path'));\n        $this->set_env('cookie_secure', filter_var(ini_get('session.cookie_secure'), FILTER_VALIDATE_BOOLEAN));\n\n        // load the correct skin (in case user-defined)\n        $skin = $this->config->get('skin');\n        $this->set_skin($skin);\n        $this->set_env('skin', $skin);\n\n        $this->set_assets_path($this->config->get('assets_path'), $this->config->get('assets_dir'));\n\n        if (!empty($_REQUEST['_extwin']))\n            $this->set_env('extwin', 1);\n        if ($this->framed || $framed)\n            $this->set_env('framed', 1);\n\n        $lic = <<<EOF\n/*\n        @licstart  The following is the entire license notice for the \n        JavaScript code in this page.\n\n        Copyright (C) 2005-2014 The Roundcube Dev Team\n\n        The JavaScript code in this page is free software: you can redistribute\n        it and/or modify it under the terms of the GNU General Public License\n        as published by the Free Software Foundation, either version 3 of\n        the License, or (at your option) any later version.\n\n        The code is distributed WITHOUT ANY WARRANTY; without even the implied\n        warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n        See the GNU GPL for more details.\n\n        @licend  The above is the entire license notice\n        for the JavaScript code in this page.\n*/\nEOF;\n        // add common javascripts\n        $this->add_script($lic, 'head_top');\n        $this->add_script('var '.self::JS_OBJECT_NAME.' = new rcube_webmail();', 'head_top');\n\n        // don't wait for page onload. Call init at the bottom of the page (delayed)\n        $this->add_script(self::JS_OBJECT_NAME.'.init();', 'docready');\n\n        $this->scripts_path = 'program/js/';\n        $this->include_script('jquery.min.js');\n        $this->include_script('common.js');\n        $this->include_script('app.js');\n\n        // register common UI objects\n        $this->add_handlers(array(\n            'loginform'       => array($this, 'login_form'),\n            'preloader'       => array($this, 'preloader'),\n            'username'        => array($this, 'current_username'),\n            'message'         => array($this, 'message_container'),\n            'charsetselector' => array($this, 'charset_selector'),\n            'aboutcontent'    => array($this, 'about_content'),\n        ));\n    }\n\n    /**\n     * Set environment variable\n     *\n     * @param string Property name\n     * @param mixed Property value\n     * @param boolean True if this property should be added to client environment\n     */\n    public function set_env($name, $value, $addtojs = true)\n    {\n        $this->env[$name] = $value;\n\n        if ($addtojs || isset($this->js_env[$name])) {\n            $this->js_env[$name] = $value;\n        }\n    }\n\n    /**\n     * Parse and set assets path\n     *\n     * @param string Assets path (relative or absolute URL)\n     */\n    public function set_assets_path($path, $fs_dir = null)\n    {\n        if (empty($path)) {\n            return;\n        }\n\n        $path = rtrim($path, '/') . '/';\n\n        // handle relative assets path\n        if (!preg_match('|^https?://|', $path) && $path[0] != '/') {\n            // save the path to search for asset files later\n            $this->assets_dir = $path;\n\n            $base = preg_replace('/[?#&].*$/', '', $_SERVER['REQUEST_URI']);\n            $base = rtrim($base, '/');\n\n            // remove url token if exists\n            if ($len = intval($this->config->get('use_secure_urls'))) {\n                $_base  = explode('/', $base);\n                $last   = count($_base) - 1;\n                $length = $len > 1 ? $len : 16; // as in rcube::get_secure_url_token()\n\n                // we can't use real token here because it\n                // does not exists in unauthenticated state,\n                // hope this will not produce false-positive matches\n                if ($last > -1 && preg_match('/^[a-f0-9]{' . $length . '}$/', $_base[$last])) {\n                    $path = '../' . $path;\n                }\n            }\n        }\n\n        // set filesystem path for assets\n        if ($fs_dir) {\n            if ($fs_dir[0] != '/') {\n                $fs_dir = realpath(RCUBE_INSTALL_PATH . $fs_dir);\n            }\n            // ensure the path ends with a slash\n            $this->assets_dir = rtrim($fs_dir, '/') . '/';\n        }\n\n        $this->assets_path = $path;\n        $this->set_env('assets_path', $path);\n    }\n\n    /**\n     * Getter for the current page title\n     *\n     * @return string The page title\n     */\n    protected function get_pagetitle()\n    {\n        if (!empty($this->pagetitle)) {\n            $title = $this->pagetitle;\n        }\n        else if ($this->env['task'] == 'login') {\n            $title = $this->app->gettext(array(\n                'name' => 'welcome',\n                'vars' => array('product' => $this->config->get('product_name')\n            )));\n        }\n        else {\n            $title = ucfirst($this->env['task']);\n        }\n\n        return $title;\n    }\n\n    /**\n     * Set skin\n     */\n    public function set_skin($skin)\n    {\n        // Sanity check to prevent from path traversal vulnerability (#1490620)\n        if (strpos($skin, '/') !== false || strpos($skin, \"\\\\\") !== false) {\n            rcube::raise_error(array(\n                    'file'    => __FILE__,\n                    'line'    => __LINE__,\n                    'message' => 'Invalid skin name'\n                ), true, false);\n\n            return false;\n        }\n\n        $valid = false;\n        $path  = RCUBE_INSTALL_PATH . 'skins/';\n\n        if (!empty($skin) && is_dir($path . $skin) && is_readable($path . $skin)) {\n            $skin_path = 'skins/' . $skin;\n            $valid     = true;\n        }\n        else {\n            $skin_path = $this->config->get('skin_path');\n            if (!$skin_path) {\n                $skin_path = 'skins/' . rcube_config::DEFAULT_SKIN;\n            }\n            $valid = !$skin;\n        }\n\n        $skin_path = rtrim($skin_path, '/');\n\n        $this->config->set('skin_path', $skin_path);\n        $this->base_path = $skin_path;\n\n        // register skin path(s)\n        $this->skin_paths = array();\n        $this->load_skin($skin_path);\n\n        return $valid;\n    }\n\n    /**\n     * Helper method to recursively read skin meta files and register search paths\n     */\n    private function load_skin($skin_path)\n    {\n        $this->skin_paths[] = $skin_path;\n\n        // read meta file and check for dependecies\n        $meta = @file_get_contents(RCUBE_INSTALL_PATH . $skin_path . '/meta.json');\n        $meta = @json_decode($meta, true);\n\n        $meta['path']  = $skin_path;\n        $path_elements = explode('/', $skin_path);\n        $skin_id       = end($path_elements);\n\n        if (!$meta['name']) {\n            $meta['name'] = $skin_id;\n        }\n\n        $this->skins[$skin_id] = $meta;\n\n        if ($meta['extends']) {\n            $path = RCUBE_INSTALL_PATH . 'skins/';\n            if (is_dir($path . $meta['extends']) && is_readable($path . $meta['extends'])) {\n                $this->load_skin('skins/' . $meta['extends']);\n            }\n        }\n    }\n\n    /**\n     * Check if a specific template exists\n     *\n     * @param string Template name\n     * @return boolean True if template exists\n     */\n    public function template_exists($name)\n    {\n        foreach ($this->skin_paths as $skin_path) {\n            $filename = RCUBE_INSTALL_PATH . $skin_path . '/templates/' . $name . '.html';\n            if ((is_file($filename) && is_readable($filename))\n                || ($this->deprecated_templates[$name] && $this->template_exists($this->deprecated_templates[$name]))\n            ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Find the given file in the current skin path stack\n     *\n     * @param string File name/path to resolve (starting with /)\n     * @param string Reference to the base path of the matching skin\n     * @param string Additional path to search in\n     *\n     * @return mixed Relative path to the requested file or False if not found\n     */\n    public function get_skin_file($file, &$skin_path = null, $add_path = null)\n    {\n        $skin_paths = $this->skin_paths;\n        if ($add_path) {\n            array_unshift($skin_paths, $add_path);\n        }\n\n        foreach ($skin_paths as $skin_path) {\n            $path = realpath(RCUBE_INSTALL_PATH . $skin_path . $file);\n\n            if ($path && is_file($path)) {\n                return $skin_path . $file;\n            }\n\n            if ($this->assets_dir != RCUBE_INSTALL_PATH) {\n                $path = realpath($this->assets_dir . $skin_path . $file);\n\n                if ($path && is_file($path)) {\n                    return $skin_path . $file;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Register a GUI object to the client script\n     *\n     * @param  string Object name\n     * @param  string Object ID\n     * @return void\n     */\n    public function add_gui_object($obj, $id)\n    {\n        $this->add_script(self::JS_OBJECT_NAME.\".gui_object('$obj', '$id');\");\n    }\n\n    /**\n     * Call a client method\n     *\n     * @param string Method to call\n     * @param ... Additional arguments\n     */\n    public function command()\n    {\n        $cmd = func_get_args();\n        if (strpos($cmd[0], 'plugin.') !== false)\n            $this->js_commands[] = array('triggerEvent', $cmd[0], $cmd[1]);\n        else\n            $this->js_commands[] = $cmd;\n    }\n\n    /**\n     * Add a localized label to the client environment\n     */\n    public function add_label()\n    {\n        $args = func_get_args();\n        if (count($args) == 1 && is_array($args[0]))\n            $args = $args[0];\n\n        foreach ($args as $name) {\n            $this->js_labels[$name] = $this->app->gettext($name);\n        }\n    }\n\n    /**\n     * Invoke display_message command\n     *\n     * @param string  $message  Message to display\n     * @param string  $type     Message type [notice|confirm|error]\n     * @param array   $vars     Key-value pairs to be replaced in localized text\n     * @param boolean $override Override last set message\n     * @param int     $timeout  Message display time in seconds\n     * @uses self::command()\n     */\n    public function show_message($message, $type='notice', $vars=null, $override=true, $timeout=0)\n    {\n        if ($override || !$this->message) {\n            if ($this->app->text_exists($message)) {\n                if (!empty($vars))\n                    $vars = array_map(array('rcube','Q'), $vars);\n                $msgtext = $this->app->gettext(array('name' => $message, 'vars' => $vars));\n            }\n            else\n                $msgtext = $message;\n\n            $this->message = $message;\n            $this->command('display_message', $msgtext, $type, $timeout * 1000);\n        }\n    }\n\n    /**\n     * Delete all stored env variables and commands\n     *\n     * @param bool $all Reset all env variables (including internal)\n     */\n    public function reset($all = false)\n    {\n        $framed = $this->framed;\n        $env    = $all ? null : array_intersect_key($this->env, array('extwin'=>1, 'framed'=>1));\n\n        parent::reset();\n\n        // let some env variables survive\n        $this->env          = $this->js_env = $env;\n        $this->framed       = $framed || $this->env['framed'];\n        $this->js_labels    = array();\n        $this->js_commands  = array();\n        $this->script_files = array();\n        $this->scripts      = array();\n        $this->header       = '';\n        $this->footer       = '';\n        $this->body         = '';\n\n        // load defaults\n        if (!$all) {\n            $this->__construct();\n        }\n    }\n\n    /**\n     * Redirect to a certain url\n     *\n     * @param mixed $p      Either a string with the action or url parameters as key-value pairs\n     * @param int   $delay  Delay in seconds\n     * @param bool  $secure Redirect to secure location (see rcmail::url())\n     */\n    public function redirect($p = array(), $delay = 1, $secure = false)\n    {\n        if ($this->env['extwin'])\n            $p['extwin'] = 1;\n        $location = $this->app->url($p, false, false, $secure);\n        header('Location: ' . $location);\n        exit;\n    }\n\n    /**\n     * Send the request output to the client.\n     * This will either parse a skin tempalte or send an AJAX response\n     *\n     * @param string  Template name\n     * @param boolean True if script should terminate (default)\n     */\n    public function send($templ = null, $exit = true)\n    {\n        if ($templ != 'iframe') {\n            // prevent from endless loops\n            if ($exit != 'recur' && $this->app->plugins->is_processing('render_page')) {\n                rcube::raise_error(array('code' => 505, 'type' => 'php',\n                  'file' => __FILE__, 'line' => __LINE__,\n                  'message' => 'Recursion alert: ignoring output->send()'), true, false);\n                return;\n            }\n            $this->parse($templ, false);\n        }\n        else {\n            $this->framed = true;\n            $this->write();\n        }\n\n        // set output asap\n        ob_flush();\n        flush();\n\n        if ($exit) {\n            exit;\n        }\n    }\n\n    /**\n     * Process template and write to stdOut\n     *\n     * @param string $template HTML template content\n     */\n    public function write($template = '')\n    {\n        if (!empty($this->script_files)) {\n            $this->set_env('request_token', $this->app->get_request_token());\n        }\n\n        $commands = $this->get_js_commands($framed);\n\n        // if all js commands go to parent window we can ignore all\n        // script files and skip rcube_webmail initialization (#1489792)\n        if ($framed) {\n            $this->scripts      = array();\n            $this->script_files = array();\n            $this->header       = '';\n            $this->footer       = '';\n        }\n\n        // write all javascript commands\n        $this->add_script($commands, 'head_top');\n\n        // send clickjacking protection headers\n        $iframe = $this->framed || $this->env['framed'];\n        if (!headers_sent() && ($xframe = $this->app->config->get('x_frame_options', 'sameorigin'))) {\n            header('X-Frame-Options: ' . ($iframe && $xframe == 'deny' ? 'sameorigin' : $xframe));\n        }\n\n        // call super method\n        $this->_write($template, $this->config->get('skin_path'));\n    }\n\n    /**\n     * Parse a specific skin template and deliver to stdout (or return)\n     *\n     * @param  string  Template name\n     * @param  boolean Exit script\n     * @param  boolean Don't write to stdout, return parsed content instead\n     *\n     * @link   http://php.net/manual/en/function.exit.php\n     */\n    function parse($name = 'main', $exit = true, $write = true)\n    {\n        $plugin   = false;\n        $realname = $name;\n        $plugin_skin_paths = array();\n\n        $this->template_name = $realname;\n\n        $temp = explode('.', $name, 2);\n        if (count($temp) > 1) {\n            $plugin   = $temp[0];\n            $name     = $temp[1];\n            $skin_dir = $plugin . '/skins/' . $this->config->get('skin');\n\n            // apply skin search escalation list to plugin directory\n            foreach ($this->skin_paths as $skin_path) {\n                $plugin_skin_paths[] = $this->app->plugins->url . $plugin . '/' . $skin_path;\n            }\n\n            // add fallback to default skin\n            if (is_dir($this->app->plugins->dir . $plugin . '/skins/default')) {\n                $skin_dir = $plugin . '/skins/default';\n                $plugin_skin_paths[] = $this->app->plugins->url . $skin_dir;\n            }\n\n            // prepend plugin skin paths to search list\n            $this->skin_paths = array_merge($plugin_skin_paths, $this->skin_paths);\n        }\n\n        // find skin template\n        $path = false;\n        foreach ($this->skin_paths as $skin_path) {\n            $path = RCUBE_INSTALL_PATH . \"$skin_path/templates/$name.html\";\n\n            // fallback to deprecated template names\n            if (!is_readable($path) && $this->deprecated_templates[$realname]) {\n                $path = RCUBE_INSTALL_PATH . \"$skin_path/templates/\" . $this->deprecated_templates[$realname] . \".html\";\n\n                if (is_readable($path)) {\n                    rcube::raise_error(array(\n                        'code' => 502, 'type' => 'php',\n                        'file' => __FILE__, 'line' => __LINE__,\n                        'message' => \"Using deprecated template '\" . $this->deprecated_templates[$realname]\n                            . \"' in $skin_path/templates. Please rename to '$realname'\"),\n                        true, false);\n                }\n            }\n\n            if (is_readable($path)) {\n                $this->config->set('skin_path', $skin_path);\n                $this->base_path = preg_replace('!plugins/\\w+/!', '', $skin_path);  // set base_path to core skin directory (not plugin's skin)\n                $skin_dir = preg_replace('!^plugins/!', '', $skin_path);\n                break;\n            }\n            else {\n                $path = false;\n            }\n        }\n\n        // read template file\n        if (!$path || ($templ = @file_get_contents($path)) === false) {\n            rcube::raise_error(array(\n                'code' => 404,\n                'type' => 'php',\n                'line' => __LINE__,\n                'file' => __FILE__,\n                'message' => 'Error loading template for '.$realname\n                ), true, $write);\n\n            $this->skin_paths = array_slice($this->skin_paths, count($plugin_skin_paths));\n            return false;\n        }\n\n        // replace all path references to plugins/... with the configured plugins dir\n        // and /this/ to the current plugin skin directory\n        if ($plugin) {\n            $templ = preg_replace(array('/\\bplugins\\//', '/([\"\\']?)\\/this\\//'), array($this->app->plugins->url, '\\\\1'.$this->app->plugins->url.$skin_dir.'/'), $templ);\n        }\n\n        // parse for specialtags\n        $output = $this->parse_conditions($templ);\n        $output = $this->parse_xml($output);\n\n        // trigger generic hook where plugins can put additional content to the page\n        $hook = $this->app->plugins->exec_hook(\"render_page\", array('template' => $realname, 'content' => $output));\n\n        // save some memory\n        $output = $hook['content'];\n        unset($hook['content']);\n\n        // make sure all <form> tags have a valid request token\n        $output = preg_replace_callback('/<form\\s+([^>]+)>/Ui', array($this, 'alter_form_tag'), $output);\n        $this->footer = preg_replace_callback('/<form\\s+([^>]+)>/Ui', array($this, 'alter_form_tag'), $this->footer);\n\n        // remove plugin skin paths from current context\n        $this->skin_paths = array_slice($this->skin_paths, count($plugin_skin_paths));\n\n        if (!$write) {\n            return $output;\n        }\n\n        $this->write(trim($output));\n\n        if ($exit) {\n            exit;\n        }\n    }\n\n    /**\n     * Return executable javascript code for all registered commands\n     *\n     * @return string $out\n     */\n    protected function get_js_commands(&$framed = null)\n    {\n        $out             = '';\n        $parent_commands = 0;\n        $top_commands    = array();\n\n        // these should be always on top,\n        // e.g. hide_message() below depends on env.framed\n        if (!$this->framed && !empty($this->js_env)) {\n            $top_commands[] = array('set_env', $this->js_env);\n        }\n        if (!empty($this->js_labels)) {\n            $top_commands[] = array('add_label', $this->js_labels);\n        }\n\n        // unlock interface after iframe load\n        $unlock = preg_replace('/[^a-z0-9]/i', '', $_REQUEST['_unlock']);\n        if ($this->framed) {\n            $top_commands[] = array('iframe_loaded', $unlock);\n        }\n        else if ($unlock) {\n            $top_commands[] = array('hide_message', $unlock);\n        }\n\n        $commands = array_merge($top_commands, $this->js_commands);\n\n        foreach ($commands as $i => $args) {\n            $method = array_shift($args);\n            $parent = $this->framed || preg_match('/^parent\\./', $method);\n\n            foreach ($args as $i => $arg) {\n                $args[$i] = self::json_serialize($arg);\n            }\n\n            if ($parent) {\n                $parent_commands++;\n                $method        = preg_replace('/^parent\\./', '', $method);\n                $parent_prefix = 'if (window.parent && parent.' . self::JS_OBJECT_NAME . ') parent.';\n                $method        = $parent_prefix . self::JS_OBJECT_NAME . '.' . $method;\n            }\n            else {\n                $method = self::JS_OBJECT_NAME . '.' . $method;\n            }\n\n            $out .= sprintf(\"%s(%s);\\n\", $method, implode(',', $args));\n        }\n\n        $framed = $parent_prefix && $parent_commands == count($commands);\n\n        // make the output more compact if all commands go to parent window\n        if ($framed) {\n            $out = \"if (window.parent && parent.\" . self::JS_OBJECT_NAME . \") {\\n\"\n                . str_replace($parent_prefix, \"\\tparent.\", $out)\n                . \"}\\n\";\n        }\n\n        return $out;\n    }\n\n    /**\n     * Make URLs starting with a slash point to skin directory\n     *\n     * @param  string Input string\n     * @param  boolean True if URL should be resolved using the current skin path stack\n     * @return string\n     */\n    public function abs_url($str, $search_path = false)\n    {\n        if ($str[0] == '/') {\n            if ($search_path && ($file_url = $this->get_skin_file($str, $skin_path))) {\n                return $file_url;\n            }\n\n            return $this->base_path . $str;\n        }\n\n        return $str;\n    }\n\n    /**\n     * Show error page and terminate script execution\n     *\n     * @param int    $code     Error code\n     * @param string $message  Error message\n     */\n    public function raise_error($code, $message)\n    {\n        global $__page_content, $ERROR_CODE, $ERROR_MESSAGE;\n\n        $ERROR_CODE    = $code;\n        $ERROR_MESSAGE = $message;\n\n        include RCUBE_INSTALL_PATH . 'program/steps/utils/error.inc';\n        exit;\n    }\n\n    /**\n     * Modify path by adding URL prefix if configured\n     */\n    public function asset_url($path)\n    {\n        // iframe content can't be in a different domain\n        // @TODO: check if assests are on a different domain\n\n        if (!$this->assets_path || in_array($path[0], array('?', '/', '.')) || strpos($path, '://')) {\n            return $path;\n        }\n\n        return $this->assets_path . $path;\n    }\n\n\n    /*****  Template parsing methods  *****/\n\n    /**\n     * Replace all strings ($varname)\n     * with the content of the according global variable.\n     */\n    protected function parse_with_globals($input)\n    {\n        $GLOBALS['__version']   = html::quote(RCMAIL_VERSION);\n        $GLOBALS['__comm_path'] = html::quote($this->app->comm_path);\n        $GLOBALS['__skin_path'] = html::quote($this->base_path);\n\n        return preg_replace_callback('/\\$(__[a-z0-9_\\-]+)/',\n            array($this, 'globals_callback'), $input);\n    }\n\n    /**\n     * Callback funtion for preg_replace_callback() in parse_with_globals()\n     */\n    protected function globals_callback($matches)\n    {\n        return $GLOBALS[$matches[1]];\n    }\n\n    /**\n     * Correct absolute paths in images and other tags\n     * add timestamp to .js and .css filename\n     */\n    protected function fix_paths($output)\n    {\n        return preg_replace_callback(\n            '!(src|href|background)=([\"\\']?)([a-z0-9/_.-]+)([\"\\'\\s>])!i',\n            array($this, 'file_callback'), $output);\n    }\n\n    /**\n     * Callback function for preg_replace_callback in fix_paths()\n     *\n     * @return string Parsed string\n     */\n    protected function file_callback($matches)\n    {\n        $file = $matches[3];\n        $file = preg_replace('!^/this/!', '/', $file);\n\n        // correct absolute paths\n        if ($file[0] == '/') {\n            $file = $this->base_path . $file;\n        }\n\n        // add file modification timestamp\n        if (preg_match('/\\.(js|css)$/', $file, $m)) {\n            $file = $this->file_mod($file);\n        }\n\n        return $matches[1] . '=' . $matches[2] . $file . $matches[4];\n    }\n\n    /**\n     * Correct paths of asset files according to assets_path\n     */\n    protected function fix_assets_paths($output)\n    {\n        return preg_replace_callback(\n            '!(src|href|background)=([\"\\']?)([a-z0-9/_.?=-]+)([\"\\'\\s>])!i',\n            array($this, 'assets_callback'), $output);\n    }\n\n    /**\n     * Callback function for preg_replace_callback in fix_assets_paths()\n     *\n     * @return string Parsed string\n     */\n    protected function assets_callback($matches)\n    {\n        $file = $this->asset_url($matches[3]);\n\n        return $matches[1] . '=' . $matches[2] . $file . $matches[4];\n    }\n\n    /**\n     * Modify file by adding mtime indicator\n     */\n    protected function file_mod($file)\n    {\n        $fs  = false;\n        $ext = substr($file, strrpos($file, '.') + 1);\n\n        // use minified file if exists (not in development mode)\n        if (!$this->devel_mode && !preg_match('/\\.min\\.' . $ext . '$/', $file)) {\n            $minified_file = substr($file, 0, strlen($ext) * -1) . 'min.' . $ext;\n            if ($fs = @filemtime($this->assets_dir . $minified_file)) {\n                return $minified_file . '?s=' . $fs;\n            }\n        }\n\n        if ($fs = @filemtime($this->assets_dir . $file)) {\n            $file .= '?s=' . $fs;\n        }\n\n        return $file;\n    }\n\n    /**\n     * Public wrapper to dipp into template parsing.\n     *\n     * @param  string $input\n     * @return string\n     * @uses   rcmail_output_html::parse_xml()\n     * @since  0.1-rc1\n     */\n    public function just_parse($input)\n    {\n        $input = $this->parse_conditions($input);\n        $input = $this->parse_xml($input);\n\n        return $input;\n    }\n\n    /**\n     * Parse for conditional tags\n     *\n     * @param  string $input\n     * @return string\n     */\n    protected function parse_conditions($input)\n    {\n        $matches = preg_split('/<roundcube:(if|elseif|else|endif)\\s+([^>]+)>\\n?/is', $input, 2, PREG_SPLIT_DELIM_CAPTURE);\n        if ($matches && count($matches) == 4) {\n            if (preg_match('/^(else|endif)$/i', $matches[1])) {\n                return $matches[0] . $this->parse_conditions($matches[3]);\n            }\n            $attrib = html::parse_attrib_string($matches[2]);\n            if (isset($attrib['condition'])) {\n                $condmet = $this->check_condition($attrib['condition']);\n                $submatches = preg_split('/<roundcube:(elseif|else|endif)\\s+([^>]+)>\\n?/is', $matches[3], 2, PREG_SPLIT_DELIM_CAPTURE);\n                if ($condmet) {\n                    $result = $submatches[0];\n                    $result.= ($submatches[1] != 'endif' ? preg_replace('/.*<roundcube:endif\\s+[^>]+>\\n?/Uis', '', $submatches[3], 1) : $submatches[3]);\n                }\n                else {\n                    $result = \"<roundcube:$submatches[1] $submatches[2]>\" . $submatches[3];\n                }\n                return $matches[0] . $this->parse_conditions($result);\n            }\n            rcube::raise_error(array(\n                'code' => 500,\n                'type' => 'php',\n                'line' => __LINE__,\n                'file' => __FILE__,\n                'message' => \"Unable to parse conditional tag \" . $matches[2]\n            ), true, false);\n        }\n        return $input;\n    }\n\n    /**\n     * Determines if a given condition is met\n     *\n     * @todo   Extend this to allow real conditions, not just \"set\"\n     * @param  string Condition statement\n     * @return boolean True if condition is met, False if not\n     */\n    protected function check_condition($condition)\n    {\n        return $this->eval_expression($condition);\n    }\n\n    /**\n     * Inserts hidden field with CSRF-prevention-token into POST forms\n     */\n    protected function alter_form_tag($matches)\n    {\n        $out    = $matches[0];\n        $attrib = html::parse_attrib_string($matches[1]);\n\n        if (strtolower($attrib['method']) == 'post') {\n            $hidden = new html_hiddenfield(array('name' => '_token', 'value' => $this->app->get_request_token()));\n            $out .= \"\\n\" . $hidden->show();\n        }\n\n        return $out;\n    }\n\n    /**\n     * Parse & evaluate a given expression and return its result.\n     *\n     * @param string Expression statement\n     *\n     * @return mixed Expression result\n     */\n    protected function eval_expression ($expression)\n    {\n        $expression = preg_replace(\n            array(\n                '/session:([a-z0-9_]+)/i',\n                '/config:([a-z0-9_]+)(:([a-z0-9_]+))?/i',\n                '/env:([a-z0-9_]+)/i',\n                '/request:([a-z0-9_]+)/i',\n                '/cookie:([a-z0-9_]+)/i',\n                '/browser:([a-z0-9_]+)/i',\n                '/template:name/i',\n            ),\n            array(\n                \"\\$_SESSION['\\\\1']\",\n                \"\\$app->config->get('\\\\1',rcube_utils::get_boolean('\\\\3'))\",\n                \"\\$env['\\\\1']\",\n                \"rcube_utils::get_input_value('\\\\1', rcube_utils::INPUT_GPC)\",\n                \"\\$_COOKIE['\\\\1']\",\n                \"\\$browser->{'\\\\1'}\",\n                \"'\" . $this->template_name . \"'\",\n            ),\n            $expression\n        );\n\n        $fn = create_function('$app,$browser,$env', \"return ($expression);\");\n        if (!$fn) {\n            rcube::raise_error(array(\n                'code' => 505,\n                'type' => 'php',\n                'file' => __FILE__,\n                'line' => __LINE__,\n                'message' => \"Expression parse error on: ($expression)\"), true, false);\n\n            return null;\n        }\n\n        return $fn($this->app, $this->browser, $this->env);\n    }\n\n    /**\n     * Search for special tags in input and replace them\n     * with the appropriate content\n     *\n     * @param  string Input string to parse\n     * @return string Altered input string\n     * @todo   Use DOM-parser to traverse template HTML\n     * @todo   Maybe a cache.\n     */\n    protected function parse_xml($input)\n    {\n        return preg_replace_callback('/<roundcube:([-_a-z]+)\\s+((?:[^>]|\\\\\\\\>)+)(?<!\\\\\\\\)>/Ui', array($this, 'xml_command'), $input);\n    }\n\n    /**\n     * Callback function for parsing an xml command tag\n     * and turn it into real html content\n     *\n     * @param  array Matches array of preg_replace_callback\n     * @return string Tag/Object content\n     */\n    protected function xml_command($matches)\n    {\n        $command = strtolower($matches[1]);\n        $attrib  = html::parse_attrib_string($matches[2]);\n\n        // empty output if required condition is not met\n        if (!empty($attrib['condition']) && !$this->check_condition($attrib['condition'])) {\n            return '';\n        }\n\n        // localize title and summary attributes\n        if ($command != 'button' && !empty($attrib['title']) && $this->app->text_exists($attrib['title'])) {\n            $attrib['title'] = $this->app->gettext($attrib['title']);\n        }\n        if ($command != 'button' && !empty($attrib['summary']) && $this->app->text_exists($attrib['summary'])) {\n            $attrib['summary'] = $this->app->gettext($attrib['summary']);\n        }\n\n        // execute command\n        switch ($command) {\n            // return a button\n            case 'button':\n                if ($attrib['name'] || $attrib['command']) {\n                    return $this->button($attrib);\n                }\n                break;\n\n            // frame\n            case 'frame':\n                return $this->frame($attrib);\n                break;\n\n            // show a label\n            case 'label':\n                if ($attrib['expression'])\n                    $attrib['name'] = $this->eval_expression($attrib['expression']);\n\n                if ($attrib['name'] || $attrib['command']) {\n                    $vars = $attrib + array('product' => $this->config->get('product_name'));\n                    unset($vars['name'], $vars['command']);\n\n                    $label   = $this->app->gettext($attrib + array('vars' => $vars));\n                    $quoting = !empty($attrib['quoting']) ? strtolower($attrib['quoting']) : (rcube_utils::get_boolean((string)$attrib['html']) ? 'no' : '');\n\n                    // 'noshow' can be used in skins to define new labels\n                    if ($attrib['noshow']) {\n                        return '';\n                    }\n\n                    switch ($quoting) {\n                        case 'no':\n                        case 'raw':\n                            break;\n                        case 'javascript':\n                        case 'js':\n                            $label = rcube::JQ($label);\n                            break;\n                        default:\n                            $label = html::quote($label);\n                            break;\n                    }\n\n                    return $label;\n                }\n                break;\n\n            // include a file\n            case 'include':\n                $old_base_path = $this->base_path;\n                if (!empty($attrib['skin_path'])) $attrib['skinpath'] = $attrib['skin_path'];\n                if ($path = $this->get_skin_file($attrib['file'], $skin_path, $attrib['skinpath'])) {\n                    $this->base_path = preg_replace('!plugins/\\w+/!', '', $skin_path);  // set base_path to core skin directory (not plugin's skin)\n                    $path = realpath(RCUBE_INSTALL_PATH . $path);\n                }\n\n                if (is_readable($path)) {\n                    if ($this->config->get('skin_include_php')) {\n                        $incl = $this->include_php($path);\n                    }\n                    else {\n                      $incl = file_get_contents($path);\n                    }\n                    $incl = $this->parse_conditions($incl);\n                    $incl = $this->parse_xml($incl);\n                    $incl = $this->fix_paths($incl);\n                    $this->base_path = $old_base_path;\n                    return $incl;\n                }\n                break;\n\n            case 'plugin.include':\n                $hook = $this->app->plugins->exec_hook(\"template_plugin_include\", $attrib);\n                return $hook['content'];\n\n            // define a container block\n            case 'container':\n                if ($attrib['name'] && $attrib['id']) {\n                    $this->command('gui_container', $attrib['name'], $attrib['id']);\n                    // let plugins insert some content here\n                    $hook = $this->app->plugins->exec_hook(\"template_container\", $attrib);\n                    return $hook['content'];\n                }\n                break;\n\n            // return code for a specific application object\n            case 'object':\n                $object = strtolower($attrib['name']);\n                $content = '';\n\n                // we are calling a class/method\n                if (($handler = $this->object_handlers[$object]) && is_array($handler)) {\n                    if ((is_object($handler[0]) && method_exists($handler[0], $handler[1])) ||\n                    (is_string($handler[0]) && class_exists($handler[0])))\n                    $content = call_user_func($handler, $attrib);\n                }\n                // execute object handler function\n                else if (function_exists($handler)) {\n                    $content = call_user_func($handler, $attrib);\n                }\n                else if ($object == 'doctype') {\n                    $content = html::doctype($attrib['value']);\n                }\n                else if ($object == 'logo') {\n                    $attrib += array('alt' => $this->xml_command(array('', 'object', 'name=\"productname\"')));\n\n                    if ($logo = $this->config->get('skin_logo')) {\n                        if (is_array($logo)) {\n                            if ($template_logo = $logo[$this->template_name]) {\n                                $attrib['src'] = $template_logo;\n                            }\n                            elseif ($template_logo = $logo['*']) {\n                                $attrib['src'] = $template_logo;\n                            }\n                        }\n                        else {\n                            $attrib['src'] = $logo;\n                        }\n                    }\n\n                    $content = html::img($attrib);\n                }\n                else if ($object == 'productname') {\n                    $name = $this->config->get('product_name', 'Roundcube Webmail');\n                    $content = html::quote($name);\n                }\n                else if ($object == 'version') {\n                    $ver = (string)RCMAIL_VERSION;\n                    if (is_file(RCUBE_INSTALL_PATH . '.svn/entries')) {\n                        if (preg_match('/Revision:\\s(\\d+)/', @shell_exec('svn info'), $regs))\n                          $ver .= ' [SVN r'.$regs[1].']';\n                    }\n                    else if (is_file(RCUBE_INSTALL_PATH . '.git/index')) {\n                        if (preg_match('/Date:\\s+([^\\n]+)/', @shell_exec('git log -1'), $regs)) {\n                            if ($date = date('Ymd.Hi', strtotime($regs[1]))) {\n                                $ver .= ' [GIT '.$date.']';\n                            }\n                        }\n                    }\n                    $content = html::quote($ver);\n                }\n                else if ($object == 'steptitle') {\n                  $content = html::quote($this->get_pagetitle());\n                }\n                else if ($object == 'pagetitle') {\n                    if ($this->devel_mode && !empty($_SESSION['username']))\n                        $title = $_SESSION['username'].' :: ';\n                    else if ($prod_name = $this->config->get('product_name'))\n                        $title = $prod_name . ' :: ';\n                    else\n                        $title = '';\n                    $title .= $this->get_pagetitle();\n                    $content = html::quote($title);\n                }\n\n                // exec plugin hooks for this template object\n                $hook = $this->app->plugins->exec_hook(\"template_object_$object\", $attrib + array('content' => $content));\n                return $hook['content'];\n\n            // return code for a specified eval expression\n            case 'exp':\n                return html::quote($this->eval_expression($attrib['expression']));\n\n            // return variable\n            case 'var':\n                $var = explode(':', $attrib['name']);\n                $name = $var[1];\n                $value = '';\n\n                switch ($var[0]) {\n                    case 'env':\n                        $value = $this->env[$name];\n                        break;\n                    case 'config':\n                        $value = $this->config->get($name);\n                        if (is_array($value) && $value[$_SESSION['storage_host']]) {\n                            $value = $value[$_SESSION['storage_host']];\n                        }\n                        break;\n                    case 'request':\n                        $value = rcube_utils::get_input_value($name, rcube_utils::INPUT_GPC);\n                        break;\n                    case 'session':\n                        $value = $_SESSION[$name];\n                        break;\n                    case 'cookie':\n                        $value = htmlspecialchars($_COOKIE[$name]);\n                        break;\n                    case 'browser':\n                        $value = $this->browser->{$name};\n                        break;\n                }\n\n                if (is_array($value)) {\n                    $value = implode(', ', $value);\n                }\n\n                return html::quote($value);\n\n            case 'form':\n                return $this->form_tag($attrib);\n        }\n        return '';\n    }\n\n    /**\n     * Include a specific file and return it's contents\n     *\n     * @param string File path\n     * @return string Contents of the processed file\n     */\n    protected function include_php($file)\n    {\n        ob_start();\n        include $file;\n        $out = ob_get_contents();\n        ob_end_clean();\n\n        return $out;\n    }\n\n    /**\n     * Create and register a button\n     *\n     * @param  array Named button attributes\n     * @return string HTML button\n     * @todo   Remove all inline JS calls and use jQuery instead.\n     * @todo   Remove all sprintf()'s - they are pretty, but also slow.\n     */\n    public function button($attrib)\n    {\n        static $s_button_count   = 100;\n        static $disabled_actions = null;\n\n        // these commands can be called directly via url\n        $a_static_commands = array('compose', 'list', 'preferences', 'folders', 'identities');\n\n        if (!($attrib['command'] || $attrib['name'] || $attrib['href'])) {\n            return '';\n        }\n\n        // try to find out the button type\n        if ($attrib['type']) {\n            $attrib['type'] = strtolower($attrib['type']);\n            if ($pos = strpos($attrib['type'], '-menuitem')) {\n                $attrib['type'] = substr($attrib['type'], 0, -9);\n                $menuitem = true;\n            }\n        }\n        else {\n            $attrib['type'] = ($attrib['image'] || $attrib['imagepas'] || $attrib['imageact']) ? 'image' : 'link';\n        }\n\n        $command = $attrib['command'];\n\n        if ($attrib['task']) {\n            $element = $command = $attrib['task'] . '.' . $command;\n        }\n        else {\n            $element = ($this->env['task'] ? $this->env['task'] . '.' : '') . $command;\n        }\n\n        if ($disabled_actions === null) {\n            $disabled_actions = (array) $this->config->get('disabled_actions');\n        }\n\n        // remove buttons for disabled actions\n        if (in_array($element, $disabled_actions)) {\n            return '';\n        }\n\n        if (!$attrib['image']) {\n            $attrib['image'] = $attrib['imagepas'] ? $attrib['imagepas'] : $attrib['imageact'];\n        }\n\n        if (!$attrib['id']) {\n            $attrib['id'] =  sprintf('rcmbtn%d', $s_button_count++);\n        }\n        // get localized text for labels and titles\n        if ($attrib['title']) {\n            $attrib['title'] = html::quote($this->app->gettext($attrib['title'], $attrib['domain']));\n        }\n        if ($attrib['label']) {\n            $attrib['label'] = html::quote($this->app->gettext($attrib['label'], $attrib['domain']));\n        }\n        if ($attrib['alt']) {\n            $attrib['alt'] = html::quote($this->app->gettext($attrib['alt'], $attrib['domain']));\n        }\n\n        // set accessibility attributes\n        if (!$attrib['role']) {\n            $attrib['role'] = 'button';\n        }\n        if (!empty($attrib['class']) && !empty($attrib['classact']) || !empty($attrib['imagepas']) && !empty($attrib['imageact'])) {\n            if (array_key_exists('tabindex', $attrib))\n                $attrib['data-tabindex'] = $attrib['tabindex'];\n            $attrib['tabindex'] = '-1';  // disable button by default\n            $attrib['aria-disabled'] = 'true';\n        }\n\n        // set title to alt attribute for IE browsers\n        if ($this->browser->ie && !$attrib['title'] && $attrib['alt']) {\n            $attrib['title'] = $attrib['alt'];\n        }\n\n        // add empty alt attribute for XHTML compatibility\n        if (!isset($attrib['alt'])) {\n            $attrib['alt'] = '';\n        }\n\n        // register button in the system\n        if ($attrib['command']) {\n            $this->add_script(sprintf(\n                \"%s.register_button('%s', '%s', '%s', '%s', '%s', '%s');\",\n                self::JS_OBJECT_NAME,\n                $command,\n                $attrib['id'],\n                $attrib['type'],\n                $attrib['imageact'] ? $this->abs_url($attrib['imageact']) : $attrib['classact'],\n                $attrib['imagesel'] ? $this->abs_url($attrib['imagesel']) : $attrib['classsel'],\n                $attrib['imageover'] ? $this->abs_url($attrib['imageover']) : ''\n            ));\n\n            // make valid href to specific buttons\n            if (in_array($attrib['command'], rcmail::$main_tasks)) {\n                $attrib['href']    = $this->app->url(array('task' => $attrib['command']));\n                $attrib['onclick'] = sprintf(\"return %s.command('switch-task','%s',this,event)\", self::JS_OBJECT_NAME, $attrib['command']);\n            }\n            else if ($attrib['task'] && in_array($attrib['task'], rcmail::$main_tasks)) {\n                $attrib['href'] = $this->app->url(array('action' => $attrib['command'], 'task' => $attrib['task']));\n            }\n            else if (in_array($attrib['command'], $a_static_commands)) {\n                $attrib['href'] = $this->app->url(array('action' => $attrib['command']));\n            }\n            else if (($attrib['command'] == 'permaurl' || $attrib['command'] == 'extwin') && !empty($this->env['permaurl'])) {\n              $attrib['href'] = $this->env['permaurl'];\n            }\n        }\n\n        // overwrite attributes\n        if (!$attrib['href']) {\n            $attrib['href'] = '#';\n        }\n        if ($attrib['task']) {\n            if ($attrib['classact'])\n                $attrib['class'] = $attrib['classact'];\n        }\n        else if ($command && !$attrib['onclick']) {\n            $attrib['onclick'] = sprintf(\n                \"return %s.command('%s','%s',this,event)\",\n                self::JS_OBJECT_NAME,\n                $command,\n                $attrib['prop']\n            );\n        }\n\n        $out = '';\n\n        // generate image tag\n        if ($attrib['type'] == 'image') {\n            $attrib_str = html::attrib_string(\n                $attrib,\n                array(\n                    'style', 'class', 'id', 'width', 'height', 'border', 'hspace',\n                    'vspace', 'align', 'alt', 'tabindex', 'title'\n                )\n            );\n            $btn_content = sprintf('<img src=\"%s\"%s />', $this->abs_url($attrib['image']), $attrib_str);\n            if ($attrib['label']) {\n                $btn_content .= ' '.$attrib['label'];\n            }\n            $link_attrib = array('href', 'onclick', 'onmouseover', 'onmouseout', 'onmousedown', 'onmouseup', 'target');\n        }\n        else if ($attrib['type'] == 'link') {\n            $btn_content = isset($attrib['content']) ? $attrib['content'] : ($attrib['label'] ? $attrib['label'] : $attrib['command']);\n            $link_attrib = array_merge(html::$common_attrib, array('href', 'onclick', 'tabindex', 'target'));\n            if ($attrib['innerclass'])\n                $btn_content = html::span($attrib['innerclass'], $btn_content);\n        }\n        else if ($attrib['type'] == 'input') {\n            $attrib['type'] = 'button';\n\n            if ($attrib['label']) {\n                $attrib['value'] = $attrib['label'];\n            }\n            if ($attrib['command']) {\n              $attrib['disabled'] = 'disabled';\n            }\n\n            $out = html::tag('input', $attrib, null, array('type', 'value', 'onclick', 'id', 'class', 'style', 'tabindex', 'disabled'));\n        }\n\n        // generate html code for button\n        if ($btn_content) {\n            $attrib_str = html::attrib_string($attrib, $link_attrib);\n            $out = sprintf('<a%s>%s</a>', $attrib_str, $btn_content);\n        }\n\n        if ($attrib['wrapper']) {\n            $out = html::tag($attrib['wrapper'], null, $out);\n        }\n\n        if ($menuitem) {\n            $class = $attrib['menuitem-class'] ? ' class=\"' . $attrib['menuitem-class'] . '\"' : '';\n            $out   = '<li role=\"menuitem\"' . $class . '>' . $out . '</li>';\n        }\n\n        return $out;\n    }\n\n    /**\n     * Link an external script file\n     *\n     * @param string File URL\n     * @param string Target position [head|foot]\n     */\n    public function include_script($file, $position='head')\n    {\n        if (!preg_match('|^https?://|i', $file) && $file[0] != '/') {\n            $file = $this->file_mod($this->scripts_path . $file);\n        }\n\n        if (!is_array($this->script_files[$position])) {\n            $this->script_files[$position] = array();\n        }\n\n        if (!in_array($file, $this->script_files[$position])) {\n            $this->script_files[$position][] = $file;\n        }\n    }\n\n    /**\n     * Add inline javascript code\n     *\n     * @param string JS code snippet\n     * @param string Target position [head|head_top|foot]\n     */\n    public function add_script($script, $position='head')\n    {\n        if (!isset($this->scripts[$position])) {\n            $this->scripts[$position] = \"\\n\" . rtrim($script);\n        }\n        else {\n            $this->scripts[$position] .= \"\\n\" . rtrim($script);\n        }\n    }\n\n    /**\n     * Link an external css file\n     *\n     * @param string File URL\n     */\n    public function include_css($file)\n    {\n        $this->css_files[] = $file;\n    }\n\n    /**\n     * Add HTML code to the page header\n     *\n     * @param string $str HTML code\n     */\n    public function add_header($str)\n    {\n        $this->header .= \"\\n\" . $str;\n    }\n\n    /**\n     * Add HTML code to the page footer\n     * To be added right befor </body>\n     *\n     * @param string $str HTML code\n     */\n    public function add_footer($str)\n    {\n        $this->footer .= \"\\n\" . $str;\n    }\n\n    /**\n     * Process template and write to stdOut\n     *\n     * @param string HTML template\n     * @param string Base for absolute paths\n     */\n    public function _write($templ = '', $base_path = '')\n    {\n        $output = trim($templ);\n\n        if (empty($output)) {\n            $output   = html::doctype('html5') . \"\\n\" . $this->default_template;\n            $is_empty = true;\n        }\n\n        // set default page title\n        if (empty($this->pagetitle)) {\n            $this->pagetitle = 'Roundcube Mail';\n        }\n\n        // declare page language\n        if (!empty($_SESSION['language'])) {\n            $lang = substr($_SESSION['language'], 0, 2);\n            $output = preg_replace('/<html/', '<html lang=\"' . html::quote($lang) . '\"', $output, 1);\n            if (!headers_sent()) {\n                header('Content-Language: ' . $lang);\n            }\n        }\n\n        // replace specialchars in content\n        $page_title  = html::quote($this->pagetitle);\n        $page_header = '';\n        $page_footer = '';\n\n        // include meta tag with charset\n        if (!empty($this->charset)) {\n            if (!headers_sent()) {\n                header('Content-Type: text/html; charset=' . $this->charset);\n            }\n            $page_header = '<meta http-equiv=\"content-type\"';\n            $page_header.= ' content=\"text/html; charset=';\n            $page_header.= $this->charset . '\" />'.\"\\n\";\n        }\n\n        // definition of the code to be placed in the document header and footer\n        if (is_array($this->script_files['head'])) {\n            foreach ($this->script_files['head'] as $file) {\n                $page_header .= html::script($file);\n            }\n        }\n\n        $head_script = $this->scripts['head_top'] . $this->scripts['head'];\n        if (!empty($head_script)) {\n            $page_header .= html::script(array(), $head_script);\n        }\n\n        if (!empty($this->header)) {\n            $page_header .= $this->header;\n        }\n\n        // put docready commands into page footer\n        if (!empty($this->scripts['docready'])) {\n            $this->add_script('$(document).ready(function(){ ' . $this->scripts['docready'] . \"\\n});\", 'foot');\n        }\n\n        if (is_array($this->script_files['foot'])) {\n            foreach ($this->script_files['foot'] as $file) {\n                $page_footer .= html::script($file);\n            }\n        }\n\n        if (!empty($this->footer)) {\n            $page_footer .= $this->footer . \"\\n\";\n        }\n\n        if (!empty($this->scripts['foot'])) {\n            $page_footer .= html::script(array(), $this->scripts['foot']);\n        }\n\n        // find page header\n        if ($hpos = stripos($output, '</head>')) {\n            $page_header .= \"\\n\";\n        }\n        else {\n            if (!is_numeric($hpos)) {\n                $hpos = stripos($output, '<body');\n            }\n            if (!is_numeric($hpos) && ($hpos = stripos($output, '<html'))) {\n                while ($output[$hpos] != '>') {\n                    $hpos++;\n                }\n                $hpos++;\n            }\n            $page_header = \"<head>\\n<title>$page_title</title>\\n$page_header\\n</head>\\n\";\n        }\n\n        // add page hader\n        if ($hpos) {\n            $output = substr_replace($output, $page_header, $hpos, 0);\n        }\n        else {\n            $output = $page_header . $output;\n        }\n\n        // add page footer\n        if (($fpos = strripos($output, '</body>')) || ($fpos = strripos($output, '</html>'))) {\n            $output = substr_replace($output, $page_footer.\"\\n\", $fpos, 0);\n        }\n        else {\n            $output .= \"\\n\".$page_footer;\n        }\n\n        // add css files in head, before scripts, for speed up with parallel downloads\n        if (!empty($this->css_files) && !$is_empty\n            && (($pos = stripos($output, '<script ')) || ($pos = stripos($output, '</head>')))\n        ) {\n            $css = '';\n            foreach ($this->css_files as $file) {\n                $css .= html::tag('link', array('rel' => 'stylesheet',\n                    'type' => 'text/css', 'href' => $file, 'nl' => true));\n            }\n            $output = substr_replace($output, $css, $pos, 0);\n        }\n\n        $output = $this->parse_with_globals($this->fix_paths($output));\n\n        if ($this->assets_path) {\n            $output = $this->fix_assets_paths($output);\n        }\n\n        // trigger hook with final HTML content to be sent\n        $hook = $this->app->plugins->exec_hook(\"send_page\", array('content' => $output));\n        if (!$hook['abort']) {\n            if ($this->charset != RCUBE_CHARSET) {\n                echo rcube_charset::convert($hook['content'], RCUBE_CHARSET, $this->charset);\n            }\n            else {\n                echo $hook['content'];\n            }\n        }\n    }\n\n    /**\n     * Returns iframe object, registers some related env variables\n     *\n     * @param array $attrib HTML attributes\n     * @param boolean $is_contentframe Register this iframe as the 'contentframe' gui object\n     * @return string IFRAME element\n     */\n    public function frame($attrib, $is_contentframe = false)\n    {\n        static $idcount = 0;\n\n        if (!$attrib['id']) {\n            $attrib['id'] = 'rcmframe' . ++$idcount;\n        }\n\n        $attrib['name'] = $attrib['id'];\n        $attrib['src']  = $attrib['src'] ? $this->abs_url($attrib['src'], true) : 'program/resources/blank.gif';\n\n        // register as 'contentframe' object\n        if ($is_contentframe || $attrib['contentframe']) {\n            $this->set_env('contentframe', $attrib['contentframe'] ? $attrib['contentframe'] : $attrib['name']);\n            $this->set_env('blankpage', $this->asset_url($attrib['src']));\n        }\n\n        return html::iframe($attrib);\n    }\n\n\n    /*  ************* common functions delivering gui objects **************  */\n\n    /**\n     * Create a form tag with the necessary hidden fields\n     *\n     * @param array Named tag parameters\n     * @return string HTML code for the form\n     */\n    public function form_tag($attrib, $content = null)\n    {\n      if ($this->framed || $this->env['framed']) {\n        $hiddenfield = new html_hiddenfield(array('name' => '_framed', 'value' => '1'));\n        $hidden = $hiddenfield->show();\n      }\n      if ($this->env['extwin']) {\n        $hiddenfield = new html_hiddenfield(array('name' => '_extwin', 'value' => '1'));\n        $hidden = $hiddenfield->show();\n      }\n\n      if (!$content)\n        $attrib['noclose'] = true;\n\n      return html::tag('form',\n        $attrib + array('action' => $this->app->comm_path, 'method' => \"get\"),\n        $hidden . $content,\n        array('id','class','style','name','method','action','enctype','onsubmit'));\n    }\n\n    /**\n     * Build a form tag with a unique request token\n     *\n     * @param array Named tag parameters including 'action' and 'task' values which will be put into hidden fields\n     * @param string Form content\n     * @return string HTML code for the form\n     */\n    public function request_form($attrib, $content = '')\n    {\n        $hidden = new html_hiddenfield();\n        if ($attrib['task']) {\n            $hidden->add(array('name' => '_task', 'value' => $attrib['task']));\n        }\n        if ($attrib['action']) {\n            $hidden->add(array('name' => '_action', 'value' => $attrib['action']));\n        }\n\n        unset($attrib['task'], $attrib['request']);\n        $attrib['action'] = './';\n\n        // we already have a <form> tag\n        if ($attrib['form']) {\n            if ($this->framed || $this->env['framed'])\n                $hidden->add(array('name' => '_framed', 'value' => '1'));\n            return $hidden->show() . $content;\n        }\n        else\n            return $this->form_tag($attrib, $hidden->show() . $content);\n    }\n\n    /**\n     * GUI object 'username'\n     * Showing IMAP username of the current session\n     *\n     * @param array Named tag parameters (currently not used)\n     * @return string HTML code for the gui object\n     */\n    public function current_username($attrib)\n    {\n        static $username;\n\n        // alread fetched\n        if (!empty($username)) {\n            return $username;\n        }\n\n        // Current username is an e-mail address\n        if (strpos($_SESSION['username'], '@')) {\n            $username = $_SESSION['username'];\n        }\n        // get e-mail address from default identity\n        else if ($sql_arr = $this->app->user->get_identity()) {\n            $username = $sql_arr['email'];\n        }\n        else {\n            $username = $this->app->user->get_username();\n        }\n\n        return rcube_utils::idn_to_utf8($username);\n    }\n\n    /**\n     * GUI object 'loginform'\n     * Returns code for the webmail login form\n     *\n     * @param array Named parameters\n     * @return string HTML code for the gui object\n     */\n    protected function login_form($attrib)\n    {\n        $default_host = $this->config->get('default_host');\n        $autocomplete = (int) $this->config->get('login_autocomplete');\n\n        $_SESSION['temp'] = true;\n\n        // save original url\n        $url = rcube_utils::get_input_value('_url', rcube_utils::INPUT_POST);\n        if (empty($url) && !preg_match('/_(task|action)=logout/', $_SERVER['QUERY_STRING']))\n            $url = $_SERVER['QUERY_STRING'];\n\n        // Disable autocapitalization on iPad/iPhone (#1488609)\n        $attrib['autocapitalize'] = 'off';\n\n        // set atocomplete attribute\n        $user_attrib = $autocomplete > 0 ? array() : array('autocomplete' => 'off');\n        $host_attrib = $autocomplete > 0 ? array() : array('autocomplete' => 'off');\n        $pass_attrib = $autocomplete > 1 ? array() : array('autocomplete' => 'off');\n\n        $input_task   = new html_hiddenfield(array('name' => '_task', 'value' => 'login'));\n        $input_action = new html_hiddenfield(array('name' => '_action', 'value' => 'login'));\n        $input_tzone  = new html_hiddenfield(array('name' => '_timezone', 'id' => 'rcmlogintz', 'value' => '_default_'));\n        $input_url    = new html_hiddenfield(array('name' => '_url', 'id' => 'rcmloginurl', 'value' => $url));\n        $input_user   = new html_inputfield(array('name' => '_user', 'id' => 'rcmloginuser', 'required' => 'required')\n            + $attrib + $user_attrib);\n        $input_pass   = new html_passwordfield(array('name' => '_pass', 'id' => 'rcmloginpwd', 'required' => 'required')\n            + $attrib + $pass_attrib);\n        $input_host   = null;\n\n        if (is_array($default_host) && count($default_host) > 1) {\n            $input_host = new html_select(array('name' => '_host', 'id' => 'rcmloginhost'));\n\n            foreach ($default_host as $key => $value) {\n                if (!is_array($value)) {\n                    $input_host->add($value, (is_numeric($key) ? $value : $key));\n                }\n                else {\n                    $input_host = null;\n                    break;\n                }\n            }\n        }\n        else if (is_array($default_host) && ($host = key($default_host)) !== null) {\n            $hide_host = true;\n            $input_host = new html_hiddenfield(array(\n                'name' => '_host', 'id' => 'rcmloginhost', 'value' => is_numeric($host) ? $default_host[$host] : $host) + $attrib);\n        }\n        else if (empty($default_host)) {\n            $input_host = new html_inputfield(array('name' => '_host', 'id' => 'rcmloginhost')\n                + $attrib + $host_attrib);\n        }\n\n        $form_name  = !empty($attrib['form']) ? $attrib['form'] : 'form';\n        $this->add_gui_object('loginform', $form_name);\n\n        // create HTML table with two cols\n        $table = new html_table(array('cols' => 2));\n\n        $table->add('title', html::label('rcmloginuser', html::quote($this->app->gettext('username'))));\n        $table->add('input', $input_user->show(rcube_utils::get_input_value('_user', rcube_utils::INPUT_GPC)));\n\n        $table->add('title', html::label('rcmloginpwd', html::quote($this->app->gettext('password'))));\n        $table->add('input', $input_pass->show());\n\n        // add host selection row\n        if (is_object($input_host) && !$hide_host) {\n            $table->add('title', html::label('rcmloginhost', html::quote($this->app->gettext('server'))));\n            $table->add('input', $input_host->show(rcube_utils::get_input_value('_host', rcube_utils::INPUT_GPC)));\n        }\n\n        $out  = $input_task->show();\n        $out .= $input_action->show();\n        $out .= $input_tzone->show();\n        $out .= $input_url->show();\n        $out .= $table->show();\n\n        if ($hide_host) {\n            $out .= $input_host->show();\n        }\n\n        if (rcube_utils::get_boolean($attrib['submit'])) {\n            $submit = new html_inputfield(array('type' => 'submit', 'id' => 'rcmloginsubmit',\n                'class' => 'button mainaction', 'value' => $this->app->gettext('login')));\n            $out .= html::p('formbuttons', $submit->show());\n        }\n\n        // surround html output with a form tag\n        if (empty($attrib['form'])) {\n            $out = $this->form_tag(array('name' => $form_name, 'method' => 'post'), $out);\n        }\n\n        // include script for timezone detection\n        $this->include_script('jstz.min.js');\n\n        return $out;\n    }\n\n    /**\n     * GUI object 'preloader'\n     * Loads javascript code for images preloading\n     *\n     * @param array Named parameters\n     * @return void\n     */\n    protected function preloader($attrib)\n    {\n        $images = preg_split('/[\\s\\t\\n,]+/', $attrib['images'], -1, PREG_SPLIT_NO_EMPTY);\n        $images = array_map(array($this, 'abs_url'), $images);\n        $images = array_map(array($this, 'asset_url'), $images);\n\n        if (empty($images) || $_REQUEST['_task'] == 'logout') {\n            return;\n        }\n\n        $this->add_script('var images = ' . self::json_serialize($images) .';\n            for (var i=0; i<images.length; i++) {\n                img = new Image();\n                img.src = images[i];\n            }', 'docready');\n    }\n\n    /**\n     * GUI object 'searchform'\n     * Returns code for search function\n     *\n     * @param array Named parameters\n     * @return string HTML code for the gui object\n     */\n    protected function search_form($attrib)\n    {\n        // add some labels to client\n        $this->add_label('searching');\n\n        $attrib['name'] = '_q';\n\n        if (empty($attrib['id'])) {\n            $attrib['id'] = 'rcmqsearchbox';\n        }\n        if ($attrib['type'] == 'search' && !$this->browser->khtml) {\n            unset($attrib['type'], $attrib['results']);\n        }\n\n        $input_q = new html_inputfield($attrib);\n        $out = $input_q->show();\n\n        $this->add_gui_object('qsearchbox', $attrib['id']);\n\n        // add form tag around text field\n        if (empty($attrib['form'])) {\n            $out = $this->form_tag(array(\n                'name'     => \"rcmqsearchform\",\n                'onsubmit' => self::JS_OBJECT_NAME . \".command('search'); return false\",\n                'style'    => \"display:inline\"),\n                $out);\n        }\n\n        return $out;\n    }\n\n    /**\n     * Builder for GUI object 'message'\n     *\n     * @param array Named tag parameters\n     * @return string HTML code for the gui object\n     */\n    protected function message_container($attrib)\n    {\n        if (isset($attrib['id']) === false) {\n            $attrib['id'] = 'rcmMessageContainer';\n        }\n\n        $this->add_gui_object('message', $attrib['id']);\n\n        return html::div($attrib, '');\n    }\n\n    /**\n     * GUI object 'charsetselector'\n     *\n     * @param array Named parameters for the select tag\n     * @return string HTML code for the gui object\n     */\n    public function charset_selector($attrib)\n    {\n        // pass the following attributes to the form class\n        $field_attrib = array('name' => '_charset');\n        foreach ($attrib as $attr => $value) {\n            if (in_array($attr, array('id', 'name', 'class', 'style', 'size', 'tabindex'))) {\n                $field_attrib[$attr] = $value;\n            }\n        }\n\n        $charsets = array(\n            'UTF-8'        => 'UTF-8 ('.$this->app->gettext('unicode').')',\n            'US-ASCII'     => 'ASCII ('.$this->app->gettext('english').')',\n            'ISO-8859-1'   => 'ISO-8859-1 ('.$this->app->gettext('westerneuropean').')',\n            'ISO-8859-2'   => 'ISO-8859-2 ('.$this->app->gettext('easterneuropean').')',\n            'ISO-8859-4'   => 'ISO-8859-4 ('.$this->app->gettext('baltic').')',\n            'ISO-8859-5'   => 'ISO-8859-5 ('.$this->app->gettext('cyrillic').')',\n            'ISO-8859-6'   => 'ISO-8859-6 ('.$this->app->gettext('arabic').')',\n            'ISO-8859-7'   => 'ISO-8859-7 ('.$this->app->gettext('greek').')',\n            'ISO-8859-8'   => 'ISO-8859-8 ('.$this->app->gettext('hebrew').')',\n            'ISO-8859-9'   => 'ISO-8859-9 ('.$this->app->gettext('turkish').')',\n            'ISO-8859-10'   => 'ISO-8859-10 ('.$this->app->gettext('nordic').')',\n            'ISO-8859-11'   => 'ISO-8859-11 ('.$this->app->gettext('thai').')',\n            'ISO-8859-13'   => 'ISO-8859-13 ('.$this->app->gettext('baltic').')',\n            'ISO-8859-14'   => 'ISO-8859-14 ('.$this->app->gettext('celtic').')',\n            'ISO-8859-15'   => 'ISO-8859-15 ('.$this->app->gettext('westerneuropean').')',\n            'ISO-8859-16'   => 'ISO-8859-16 ('.$this->app->gettext('southeasterneuropean').')',\n            'WINDOWS-1250' => 'Windows-1250 ('.$this->app->gettext('easterneuropean').')',\n            'WINDOWS-1251' => 'Windows-1251 ('.$this->app->gettext('cyrillic').')',\n            'WINDOWS-1252' => 'Windows-1252 ('.$this->app->gettext('westerneuropean').')',\n            'WINDOWS-1253' => 'Windows-1253 ('.$this->app->gettext('greek').')',\n            'WINDOWS-1254' => 'Windows-1254 ('.$this->app->gettext('turkish').')',\n            'WINDOWS-1255' => 'Windows-1255 ('.$this->app->gettext('hebrew').')',\n            'WINDOWS-1256' => 'Windows-1256 ('.$this->app->gettext('arabic').')',\n            'WINDOWS-1257' => 'Windows-1257 ('.$this->app->gettext('baltic').')',\n            'WINDOWS-1258' => 'Windows-1258 ('.$this->app->gettext('vietnamese').')',\n            'ISO-2022-JP'  => 'ISO-2022-JP ('.$this->app->gettext('japanese').')',\n            'ISO-2022-KR'  => 'ISO-2022-KR ('.$this->app->gettext('korean').')',\n            'ISO-2022-CN'  => 'ISO-2022-CN ('.$this->app->gettext('chinese').')',\n            'EUC-JP'       => 'EUC-JP ('.$this->app->gettext('japanese').')',\n            'EUC-KR'       => 'EUC-KR ('.$this->app->gettext('korean').')',\n            'EUC-CN'       => 'EUC-CN ('.$this->app->gettext('chinese').')',\n            'BIG5'         => 'BIG5 ('.$this->app->gettext('chinese').')',\n            'GB2312'       => 'GB2312 ('.$this->app->gettext('chinese').')',\n        );\n\n        if (!empty($_POST['_charset'])) {\n            $set = $_POST['_charset'];\n        }\n        else if (!empty($attrib['selected'])) {\n            $set = $attrib['selected'];\n        }\n        else {\n            $set = $this->get_charset();\n        }\n\n        $set = strtoupper($set);\n        if (!isset($charsets[$set])) {\n            $charsets[$set] = $set;\n        }\n\n        $select = new html_select($field_attrib);\n        $select->add(array_values($charsets), array_keys($charsets));\n\n        return $select->show($set);\n    }\n\n    /**\n     * Include content from config/about.<LANG>.html if available\n     */\n    protected function about_content($attrib)\n    {\n        $content = '';\n        $filenames = array(\n            'about.' . $_SESSION['language'] . '.html',\n            'about.' . substr($_SESSION['language'], 0, 2) . '.html',\n            'about.html',\n        );\n        foreach ($filenames as $file) {\n            $fn = RCUBE_CONFIG_DIR . $file;\n            if (is_readable($fn)) {\n                $content = file_get_contents($fn);\n                $content = $this->parse_conditions($content);\n                $content = $this->parse_xml($content);\n                break;\n            }\n        }\n\n        return $content;\n    }\n}\n", "/**\n * Roundcube Webmail Client Script\n *\n * This file is part of the Roundcube Webmail client\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (C) 2005-2015, The Roundcube Dev Team\n * Copyright (C) 2011-2015, Kolab Systems AG\n *\n * The JavaScript code in this page is free software: you can\n * redistribute it and/or modify it under the terms of the GNU\n * General Public License (GNU GPL) as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option)\n * any later version.  The code is distributed WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.\n *\n * As additional permission under GNU GPL version 3 section 7, you\n * may distribute non-source (e.g., minimized or compacted) forms of\n * that code without the copy of the GNU GPL normally required by\n * section 4, provided you include this license notice and a URL\n * through which recipients can access the Corresponding Source.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n *\n * @author Thomas Bruederli <roundcube@gmail.com>\n * @author Aleksander 'A.L.E.C' Machniak <alec@alec.pl>\n * @author Charles McNulty <charles@charlesmcnulty.com>\n *\n * @requires jquery.js, common.js, list.js\n */\n\nfunction rcube_webmail()\n{\n  this.labels = {};\n  this.buttons = {};\n  this.buttons_sel = {};\n  this.gui_objects = {};\n  this.gui_containers = {};\n  this.commands = {};\n  this.command_handlers = {};\n  this.onloads = [];\n  this.messages = {};\n  this.group2expand = {};\n  this.http_request_jobs = {};\n  this.menu_stack = [];\n\n  // webmail client settings\n  this.dblclick_time = 500;\n  this.message_time = 5000;\n  this.identifier_expr = /[^0-9a-z_-]/gi;\n\n  // environment defaults\n  this.env = {\n    request_timeout: 180,  // seconds\n    draft_autosave: 0,     // seconds\n    comm_path: './',\n    recipients_separator: ',',\n    recipients_delimiter: ', ',\n    popup_width: 1150,\n    popup_width_small: 900\n  };\n\n  // create protected reference to myself\n  this.ref = 'rcmail';\n  var ref = this;\n\n  // set jQuery ajax options\n  $.ajaxSetup({\n    cache: false,\n    timeout: this.env.request_timeout * 1000,\n    error: function(request, status, err){ ref.http_error(request, status, err); },\n    beforeSend: function(xmlhttp){ xmlhttp.setRequestHeader('X-Roundcube-Request', ref.env.request_token); }\n  });\n\n  // unload fix\n  $(window).on('beforeunload', function() { ref.unload = true; });\n\n  // set environment variable(s)\n  this.set_env = function(p, value)\n  {\n    if (p != null && typeof p === 'object' && !value)\n      for (var n in p)\n        this.env[n] = p[n];\n    else\n      this.env[p] = value;\n  };\n\n  // add a localized label to the client environment\n  this.add_label = function(p, value)\n  {\n    if (typeof p == 'string')\n      this.labels[p] = value;\n    else if (typeof p == 'object')\n      $.extend(this.labels, p);\n  };\n\n  // add a button to the button list\n  this.register_button = function(command, id, type, act, sel, over)\n  {\n    var button_prop = {id:id, type:type};\n\n    if (act) button_prop.act = act;\n    if (sel) button_prop.sel = sel;\n    if (over) button_prop.over = over;\n\n    if (!this.buttons[command])\n      this.buttons[command] = [];\n\n    this.buttons[command].push(button_prop);\n\n    if (this.loaded)\n      init_button(command, button_prop);\n  };\n\n  // register a specific gui object\n  this.gui_object = function(name, id)\n  {\n    this.gui_objects[name] = this.loaded ? rcube_find_object(id) : id;\n  };\n\n  // register a container object\n  this.gui_container = function(name, id)\n  {\n    this.gui_containers[name] = id;\n  };\n\n  // add a GUI element (html node) to a specified container\n  this.add_element = function(elm, container)\n  {\n    if (this.gui_containers[container] && this.gui_containers[container].jquery)\n      this.gui_containers[container].append(elm);\n  };\n\n  // register an external handler for a certain command\n  this.register_command = function(command, callback, enable)\n  {\n    this.command_handlers[command] = callback;\n\n    if (enable)\n      this.enable_command(command, true);\n  };\n\n  // execute the given script on load\n  this.add_onload = function(f)\n  {\n    this.onloads.push(f);\n  };\n\n  // initialize webmail client\n  this.init = function()\n  {\n    var n;\n    this.task = this.env.task;\n\n    // check browser capabilities (never use version checks here)\n    if (this.env.server_error != 409 && (!bw.dom || !bw.xmlhttp_test())) {\n      this.goto_url('error', '_code=0x199');\n      return;\n    }\n\n    if (!this.env.blankpage)\n      this.env.blankpage = this.assets_path('program/resources/blank.gif');\n\n    // find all registered gui containers\n    for (n in this.gui_containers)\n      this.gui_containers[n] = $('#'+this.gui_containers[n]);\n\n    // find all registered gui objects\n    for (n in this.gui_objects)\n      this.gui_objects[n] = rcube_find_object(this.gui_objects[n]);\n\n    // clickjacking protection\n    if (this.env.x_frame_options) {\n      try {\n        // bust frame if not allowed\n        if (this.env.x_frame_options == 'deny' && top.location.href != self.location.href)\n          top.location.href = self.location.href;\n        else if (top.location.hostname != self.location.hostname)\n          throw 1;\n      } catch (e) {\n        // possible clickjacking attack: disable all form elements\n        $('form').each(function(){ ref.lock_form(this, true); });\n        this.display_message(\"Blocked: possible clickjacking attack!\", 'error');\n        return;\n      }\n    }\n\n    // init registered buttons\n    this.init_buttons();\n\n    // tell parent window that this frame is loaded\n    if (this.is_framed()) {\n      parent.rcmail.set_busy(false, null, parent.rcmail.env.frame_lock);\n      parent.rcmail.env.frame_lock = null;\n    }\n\n    // enable general commands\n    this.enable_command('close', 'logout', 'mail', 'addressbook', 'settings', 'save-pref',\n      'compose', 'undo', 'about', 'switch-task', 'menu-open', 'menu-close', 'menu-save', true);\n\n    // set active task button\n    this.set_button(this.task, 'sel');\n\n    if (this.env.permaurl)\n      this.enable_command('permaurl', 'extwin', true);\n\n    switch (this.task) {\n\n      case 'mail':\n        // enable mail commands\n        this.enable_command('list', 'checkmail', 'add-contact', 'search', 'reset-search', 'collapse-folder', 'import-messages', true);\n\n        if (this.gui_objects.messagelist) {\n          this.message_list = new rcube_list_widget(this.gui_objects.messagelist, {\n            multiselect:true, multiexpand:true, draggable:true, keyboard:true,\n            column_movable:this.env.col_movable, dblclick_time:this.dblclick_time\n            });\n          this.message_list\n            .addEventListener('initrow', function(o) { ref.init_message_row(o); })\n            .addEventListener('dblclick', function(o) { ref.msglist_dbl_click(o); })\n            .addEventListener('click', function(o) { ref.msglist_click(o); })\n            .addEventListener('keypress', function(o) { ref.msglist_keypress(o); })\n            .addEventListener('select', function(o) { ref.msglist_select(o); })\n            .addEventListener('dragstart', function(o) { ref.drag_start(o); })\n            .addEventListener('dragmove', function(e) { ref.drag_move(e); })\n            .addEventListener('dragend', function(e) { ref.drag_end(e); })\n            .addEventListener('expandcollapse', function(o) { ref.msglist_expand(o); })\n            .addEventListener('column_replace', function(o) { ref.msglist_set_coltypes(o); })\n            .addEventListener('listupdate', function(o) { ref.triggerEvent('listupdate', o); })\n            .init();\n\n          // TODO: this should go into the list-widget code\n          $(this.message_list.thead).on('click', 'a.sortcol', function(e){\n            return ref.command('sort', $(this).attr('rel'), this);\n          });\n\n          this.enable_command('toggle_status', 'toggle_flag', 'sort', true);\n          this.enable_command('set-listmode', this.env.threads && !this.is_multifolder_listing());\n\n          // load messages\n          this.command('list');\n\n          $(this.gui_objects.qsearchbox).val(this.env.search_text).focusin(function() { ref.message_list.blur(); });\n        }\n\n        this.set_button_titles();\n\n        this.env.message_commands = ['show', 'reply', 'reply-all', 'reply-list',\n          'move', 'copy', 'delete', 'open', 'mark', 'edit', 'viewsource',\n          'print', 'load-attachment', 'download-attachment', 'show-headers', 'hide-headers', 'download',\n          'forward', 'forward-inline', 'forward-attachment', 'change-format'];\n\n        if (this.env.action == 'show' || this.env.action == 'preview') {\n          this.enable_command(this.env.message_commands, this.env.uid);\n          this.enable_command('reply-list', this.env.list_post);\n\n          if (this.env.action == 'show') {\n            this.http_request('pagenav', {_uid: this.env.uid, _mbox: this.env.mailbox, _search: this.env.search_request},\n              this.display_message('', 'loading'));\n          }\n\n          if (this.env.blockedobjects) {\n            if (this.gui_objects.remoteobjectsmsg)\n              this.gui_objects.remoteobjectsmsg.style.display = 'block';\n            this.enable_command('load-images', 'always-load', true);\n          }\n\n          // make preview/message frame visible\n          if (this.env.action == 'preview' && this.is_framed()) {\n            this.enable_command('compose', 'add-contact', false);\n            parent.rcmail.show_contentframe(true);\n          }\n\n          // initialize drag-n-drop on attachments, so they can e.g.\n          // be dropped into mail compose attachments in another window\n          if (this.gui_objects.attachments)\n            $('li > a', this.gui_objects.attachments).not('.drop').on('dragstart', function(e) {\n              var n, href = this.href, dt = e.originalEvent.dataTransfer;\n              if (dt) {\n                // inject username to the uri\n                href = href.replace(/^https?:\\/\\//, function(m) { return m + urlencode(ref.env.username) + '@'});\n                // cleanup the node to get filename without the size test\n                n = $(this).clone();\n                n.children().remove();\n\n                dt.setData('roundcube-uri', href);\n                dt.setData('roundcube-name', $.trim(n.text()));\n              }\n            });\n        }\n        else if (this.env.action == 'compose') {\n          this.env.address_group_stack = [];\n          this.env.compose_commands = ['send-attachment', 'remove-attachment', 'send', 'cancel',\n            'toggle-editor', 'list-addresses', 'pushgroup', 'search', 'reset-search', 'extwin',\n            'insert-response', 'save-response', 'menu-open', 'menu-close'];\n\n          if (this.env.drafts_mailbox)\n            this.env.compose_commands.push('savedraft')\n\n          this.enable_command(this.env.compose_commands, 'identities', 'responses', true);\n\n          // add more commands (not enabled)\n          $.merge(this.env.compose_commands, ['add-recipient', 'firstpage', 'previouspage', 'nextpage', 'lastpage']);\n\n          if (window.googie) {\n            this.env.editor_config.spellchecker = googie;\n            this.env.editor_config.spellcheck_observer = function(s) { ref.spellcheck_state(); };\n\n            this.env.compose_commands.push('spellcheck')\n            this.enable_command('spellcheck', true);\n          }\n\n          // initialize HTML editor\n          this.editor_init(this.env.editor_config, this.env.composebody);\n\n          // init canned response functions\n          if (this.gui_objects.responseslist) {\n            $('a.insertresponse', this.gui_objects.responseslist)\n              .attr('unselectable', 'on')\n              .mousedown(function(e) { return rcube_event.cancel(e); })\n              .on('mouseup keypress', function(e) {\n                if (e.type == 'mouseup' || rcube_event.get_keycode(e) == 13) {\n                  ref.command('insert-response', $(this).attr('rel'));\n                  $(document.body).trigger('mouseup');  // hides the menu\n                  return rcube_event.cancel(e);\n                }\n              });\n\n            // avoid textarea loosing focus when hitting the save-response button/link\n            $.each(this.buttons['save-response'] || [], function (i, v) {\n              $('#' + v.id).mousedown(function(e){ return rcube_event.cancel(e); })\n            });\n          }\n\n          // init message compose form\n          this.init_messageform();\n        }\n        else if (this.env.action == 'get')\n          this.enable_command('download', 'print', true);\n        // show printing dialog\n        else if (this.env.action == 'print' && this.env.uid\n          && !this.env.is_pgp_content && !this.env.pgp_mime_part\n        ) {\n          this.print_dialog();\n        }\n\n        // get unread count for each mailbox\n        if (this.gui_objects.mailboxlist) {\n          this.env.unread_counts = {};\n          this.gui_objects.folderlist = this.gui_objects.mailboxlist;\n          this.http_request('getunread', {_page: this.env.current_page});\n        }\n\n        // init address book widget\n        if (this.gui_objects.contactslist) {\n          this.contact_list = new rcube_list_widget(this.gui_objects.contactslist,\n            { multiselect:true, draggable:false, keyboard:true });\n          this.contact_list\n            .addEventListener('initrow', function(o) { ref.triggerEvent('insertrow', { cid:o.uid, row:o }); })\n            .addEventListener('select', function(o) { ref.compose_recipient_select(o); })\n            .addEventListener('dblclick', function(o) { ref.compose_add_recipient(); })\n            .addEventListener('keypress', function(o) {\n              if (o.key_pressed == o.ENTER_KEY) {\n                if (!ref.compose_add_recipient()) {\n                  // execute link action on <enter> if not a recipient entry\n                  if (o.last_selected && String(o.last_selected).charAt(0) == 'G') {\n                    $(o.rows[o.last_selected].obj).find('a').first().click();\n                  }\n                }\n              }\n            })\n            .init();\n\n          // remember last focused address field\n          $('#_to,#_cc,#_bcc').focus(function() { ref.env.focused_field = this; });\n        }\n\n        if (this.gui_objects.addressbookslist) {\n          this.gui_objects.folderlist = this.gui_objects.addressbookslist;\n          this.enable_command('list-addresses', true);\n        }\n\n        // ask user to send MDN\n        if (this.env.mdn_request && this.env.uid) {\n          var postact = 'sendmdn',\n            postdata = {_uid: this.env.uid, _mbox: this.env.mailbox};\n          if (!confirm(this.get_label('mdnrequest'))) {\n            postdata._flag = 'mdnsent';\n            postact = 'mark';\n          }\n          this.http_post(postact, postdata);\n        }\n\n        this.check_mailvelope(this.env.action);\n\n        // detect browser capabilities\n        if (!this.is_framed() && !this.env.extwin)\n          this.browser_capabilities_check();\n\n        break;\n\n      case 'addressbook':\n        this.env.address_group_stack = [];\n\n        if (this.gui_objects.folderlist)\n          this.env.contactfolders = $.extend($.extend({}, this.env.address_sources), this.env.contactgroups);\n\n        this.enable_command('add', 'import', this.env.writable_source);\n        this.enable_command('list', 'listgroup', 'pushgroup', 'popgroup', 'listsearch', 'search', 'reset-search', 'advanced-search', true);\n\n        if (this.gui_objects.contactslist) {\n          this.contact_list = new rcube_list_widget(this.gui_objects.contactslist,\n            {multiselect:true, draggable:this.gui_objects.folderlist?true:false, keyboard:true});\n          this.contact_list\n            .addEventListener('initrow', function(o) { ref.triggerEvent('insertrow', { cid:o.uid, row:o }); })\n            .addEventListener('keypress', function(o) { ref.contactlist_keypress(o); })\n            .addEventListener('select', function(o) { ref.contactlist_select(o); })\n            .addEventListener('dragstart', function(o) { ref.drag_start(o); })\n            .addEventListener('dragmove', function(e) { ref.drag_move(e); })\n            .addEventListener('dragend', function(e) { ref.drag_end(e); })\n            .init();\n\n          $(this.gui_objects.qsearchbox).focusin(function() { ref.contact_list.blur(); });\n\n          this.update_group_commands();\n          this.command('list');\n        }\n\n        if (this.gui_objects.savedsearchlist) {\n          this.savedsearchlist = new rcube_treelist_widget(this.gui_objects.savedsearchlist, {\n            id_prefix: 'rcmli',\n            id_encode: this.html_identifier_encode,\n            id_decode: this.html_identifier_decode\n          });\n\n          this.savedsearchlist.addEventListener('select', function(node) {\n            ref.triggerEvent('selectfolder', { folder:node.id, prefix:'rcmli' }); });\n        }\n\n        this.set_page_buttons();\n\n        if (this.env.cid) {\n          this.enable_command('show', 'edit', true);\n          // register handlers for group assignment via checkboxes\n          if (this.gui_objects.editform) {\n            $('input.groupmember').change(function() {\n              ref.group_member_change(this.checked ? 'add' : 'del', ref.env.cid, ref.env.source, this.value);\n            });\n          }\n        }\n\n        if (this.gui_objects.editform) {\n          this.enable_command('save', true);\n          if (this.env.action == 'add' || this.env.action == 'edit' || this.env.action == 'search')\n              this.init_contact_form();\n        }\n        else if (this.env.action == 'print') {\n          this.print_dialog();\n        }\n\n        break;\n\n      case 'settings':\n        this.enable_command('preferences', 'identities', 'responses', 'save', 'folders', true);\n\n        if (this.env.action == 'identities') {\n          this.enable_command('add', this.env.identities_level < 2);\n        }\n        else if (this.env.action == 'edit-identity' || this.env.action == 'add-identity') {\n          this.enable_command('save', 'edit', 'toggle-editor', true);\n          this.enable_command('delete', this.env.identities_level < 2);\n\n          // initialize HTML editor\n          this.editor_init(this.env.editor_config, 'rcmfd_signature');\n        }\n        else if (this.env.action == 'folders') {\n          this.enable_command('subscribe', 'unsubscribe', 'create-folder', 'rename-folder', true);\n        }\n        else if (this.env.action == 'edit-folder' && this.gui_objects.editform) {\n          this.enable_command('save', 'folder-size', true);\n          parent.rcmail.env.exists = this.env.messagecount;\n          parent.rcmail.enable_command('purge', this.env.messagecount);\n        }\n        else if (this.env.action == 'responses') {\n          this.enable_command('add', true);\n        }\n\n        if (this.gui_objects.identitieslist) {\n          this.identity_list = new rcube_list_widget(this.gui_objects.identitieslist,\n            {multiselect:false, draggable:false, keyboard:true});\n          this.identity_list\n            .addEventListener('select', function(o) { ref.identity_select(o); })\n            .addEventListener('keypress', function(o) {\n              if (o.key_pressed == o.ENTER_KEY) {\n                ref.identity_select(o);\n              }\n            })\n            .init()\n            .focus();\n        }\n        else if (this.gui_objects.sectionslist) {\n          this.sections_list = new rcube_list_widget(this.gui_objects.sectionslist, {multiselect:false, draggable:false, keyboard:true});\n          this.sections_list\n            .addEventListener('select', function(o) { ref.section_select(o); })\n            .addEventListener('keypress', function(o) { if (o.key_pressed == o.ENTER_KEY) ref.section_select(o); })\n            .init()\n            .focus();\n        }\n        else if (this.gui_objects.subscriptionlist) {\n          this.init_subscription_list();\n        }\n        else if (this.gui_objects.responseslist) {\n          this.responses_list = new rcube_list_widget(this.gui_objects.responseslist, {multiselect:false, draggable:false, keyboard:true});\n          this.responses_list\n            .addEventListener('select', function(list) {\n              var win, id = list.get_single_selection();\n              ref.enable_command('delete', !!id && $.inArray(id, ref.env.readonly_responses) < 0);\n              if (id && (win = ref.get_frame_window(ref.env.contentframe))) {\n                ref.set_busy(true);\n                ref.location_href({ _action:'edit-response', _key:id, _framed:1 }, win);\n              }\n            })\n            .init()\n            .focus();\n        }\n\n        break;\n\n      case 'login':\n        var tz, tz_name, jstz = window.jstz,\n            input_user = $('#rcmloginuser'),\n            input_tz = $('#rcmlogintz');\n\n        input_user.keyup(function(e) { return ref.login_user_keyup(e); });\n\n        if (input_user.val() == '')\n          input_user.focus();\n        else\n          $('#rcmloginpwd').focus();\n\n        // detect client timezone\n        if (jstz && (tz = jstz.determine()))\n          tz_name = tz.name();\n\n        input_tz.val(tz_name ? tz_name : (new Date().getStdTimezoneOffset() / -60));\n\n        // display 'loading' message on form submit, lock submit button\n        $('form').submit(function () {\n          $('input[type=submit]', this).prop('disabled', true);\n          ref.clear_messages();\n          ref.display_message('', 'loading');\n        });\n\n        this.enable_command('login', true);\n        break;\n    }\n\n    // select first input field in an edit form\n    if (this.gui_objects.editform)\n      $(\"input,select,textarea\", this.gui_objects.editform)\n        .not(':hidden').not(':disabled').first().select().focus();\n\n    // unset contentframe variable if preview_pane is enabled\n    if (this.env.contentframe && !$('#' + this.env.contentframe).is(':visible'))\n      this.env.contentframe = null;\n\n    // prevent from form submit with Enter key in file input fields\n    if (bw.ie)\n      $('input[type=file]').keydown(function(e) { if (e.keyCode == '13') e.preventDefault(); });\n\n    // flag object as complete\n    this.loaded = true;\n    this.env.lastrefresh = new Date();\n\n    // show message\n    if (this.pending_message)\n      this.display_message.apply(this, this.pending_message);\n\n    // init treelist widget\n    if (this.gui_objects.folderlist && window.rcube_treelist_widget\n      // some plugins may load rcube_treelist_widget and there's one case\n      // when this will cause problems - addressbook widget in compose,\n      // which already has been initialized using rcube_list_widget\n      && this.gui_objects.folderlist != this.gui_objects.addressbookslist\n    ) {\n      this.treelist = new rcube_treelist_widget(this.gui_objects.folderlist, {\n          selectable: true,\n          id_prefix: 'rcmli',\n          parent_focus: true,\n          id_encode: this.html_identifier_encode,\n          id_decode: this.html_identifier_decode,\n          check_droptarget: function(node) { return !node.virtual && ref.check_droptarget(node.id) }\n      });\n\n      this.treelist\n        .addEventListener('collapse', function(node) { ref.folder_collapsed(node) })\n        .addEventListener('expand', function(node) { ref.folder_collapsed(node) })\n        .addEventListener('beforeselect', function(node) { return !ref.busy; })\n        .addEventListener('select', function(node) { ref.triggerEvent('selectfolder', { folder:node.id, prefix:'rcmli' }) });\n    }\n\n    // activate html5 file drop feature (if browser supports it and if configured)\n    if (this.gui_objects.filedrop && this.env.filedrop && ((window.XMLHttpRequest && XMLHttpRequest.prototype && XMLHttpRequest.prototype.sendAsBinary) || window.FormData)) {\n      $(document.body).on('dragover dragleave drop', function(e) { return ref.document_drag_hover(e, e.type == 'dragover'); });\n      $(this.gui_objects.filedrop).addClass('droptarget')\n        .on('dragover dragleave', function(e) { return ref.file_drag_hover(e, e.type == 'dragover'); })\n        .get(0).addEventListener('drop', function(e) { return ref.file_dropped(e); }, false);\n    }\n\n    // catch document (and iframe) mouse clicks\n    var body_mouseup = function(e){ return ref.doc_mouse_up(e); };\n    $(document.body)\n      .mouseup(body_mouseup)\n      .keydown(function(e){ return ref.doc_keypress(e); });\n\n    $('iframe').on('load', function(e) {\n        try { $(this.contentDocument || this.contentWindow).on('mouseup', body_mouseup);  }\n        catch (e) {/* catch possible \"Permission denied\" error in IE */ }\n      })\n      .contents().on('mouseup', body_mouseup);\n\n    // trigger init event hook\n    this.triggerEvent('init', { task:this.task, action:this.env.action });\n\n    // execute all foreign onload scripts\n    // @deprecated\n    for (n in this.onloads) {\n      if (typeof this.onloads[n] === 'string')\n        eval(this.onloads[n]);\n      else if (typeof this.onloads[n] === 'function')\n        this.onloads[n]();\n    }\n\n    // start keep-alive and refresh intervals\n    this.start_refresh();\n    this.start_keepalive();\n  };\n\n  this.log = function(msg)\n  {\n    if (window.console && console.log)\n      console.log(msg);\n  };\n\n  /*********************************************************/\n  /*********       client command interface        *********/\n  /*********************************************************/\n\n  // execute a specific command on the web client\n  this.command = function(command, props, obj, event)\n  {\n    var ret, uid, cid, url, flag, aborted = false;\n\n    if (obj && obj.blur && !(event && rcube_event.is_keyboard(event)))\n      obj.blur();\n\n    // do nothing if interface is locked by another command\n    // with exception for searching reset and menu\n    if (this.busy && !(command == 'reset-search' && this.last_command == 'search') && !command.match(/^menu-/))\n      return false;\n\n    // let the browser handle this click (shift/ctrl usually opens the link in a new window/tab)\n    if ((obj && obj.href && String(obj.href).indexOf('#') < 0) && rcube_event.get_modifier(event)) {\n      return true;\n    }\n\n    // command not supported or allowed\n    if (!this.commands[command]) {\n      // pass command to parent window\n      if (this.is_framed())\n        parent.rcmail.command(command, props);\n\n      return false;\n    }\n\n    // check input before leaving compose step\n    if (this.task == 'mail' && this.env.action == 'compose' && !this.env.server_error && command != 'save-pref'\n      && $.inArray(command, this.env.compose_commands) < 0\n    ) {\n      if (!this.env.is_sent && this.cmp_hash != this.compose_field_hash() && !confirm(this.get_label('notsentwarning')))\n        return false;\n\n      // remove copy from local storage if compose screen is left intentionally\n      this.remove_compose_data(this.env.compose_id);\n      this.compose_skip_unsavedcheck = true;\n    }\n\n    this.last_command = command;\n\n    // process external commands\n    if (typeof this.command_handlers[command] === 'function') {\n      ret = this.command_handlers[command](props, obj, event);\n      return ret !== undefined ? ret : (obj ? false : true);\n    }\n    else if (typeof this.command_handlers[command] === 'string') {\n      ret = window[this.command_handlers[command]](props, obj, event);\n      return ret !== undefined ? ret : (obj ? false : true);\n    }\n\n    // trigger plugin hooks\n    this.triggerEvent('actionbefore', {props:props, action:command, originalEvent:event});\n    ret = this.triggerEvent('before'+command, props || event);\n    if (ret !== undefined) {\n      // abort if one of the handlers returned false\n      if (ret === false)\n        return false;\n      else\n        props = ret;\n    }\n\n    ret = undefined;\n\n    // process internal command\n    switch (command) {\n\n      case 'login':\n        if (this.gui_objects.loginform)\n          this.gui_objects.loginform.submit();\n        break;\n\n      // commands to switch task\n      case 'logout':\n      case 'mail':\n      case 'addressbook':\n      case 'settings':\n        this.switch_task(command);\n        break;\n\n      case 'about':\n        this.redirect('?_task=settings&_action=about', false);\n        break;\n\n      case 'permaurl':\n        if (obj && obj.href && obj.target)\n          return true;\n        else if (this.env.permaurl)\n          parent.location.href = this.env.permaurl;\n        break;\n\n      case 'extwin':\n        if (this.env.action == 'compose') {\n          var form = this.gui_objects.messageform,\n            win = this.open_window('');\n\n          if (win) {\n            this.save_compose_form_local();\n            this.compose_skip_unsavedcheck = true;\n            $(\"input[name='_action']\", form).val('compose');\n            form.action = this.url('mail/compose', { _id: this.env.compose_id, _extwin: 1 });\n            form.target = win.name;\n            form.submit();\n          }\n        }\n        else {\n          this.open_window(this.env.permaurl, true);\n        }\n        break;\n\n      case 'change-format':\n        url = this.env.permaurl + '&_format=' + props;\n\n        if (this.env.action == 'preview')\n          url = url.replace(/_action=show/, '_action=preview') + '&_framed=1';\n        if (this.env.extwin)\n          url += '&_extwin=1';\n\n        location.href = url;\n        break;\n\n      case 'menu-open':\n        if (props && props.menu == 'attachmentmenu') {\n          var mimetype = this.env.attachments[props.id];\n          this.enable_command('open-attachment', mimetype && this.env.mimetypes && $.inArray(mimetype, this.env.mimetypes) >= 0);\n        }\n        this.show_menu(props, props.show || undefined, event);\n        break;\n\n      case 'menu-close':\n        this.hide_menu(props, event);\n        break;\n\n      case 'menu-save':\n        this.triggerEvent(command, {props:props, originalEvent:event});\n        return false;\n\n      case 'open':\n        if (uid = this.get_single_uid()) {\n          obj.href = this.url('show', this.params_from_uid(uid));\n          return true;\n        }\n        break;\n\n      case 'close':\n        if (this.env.extwin)\n          window.close();\n        break;\n\n      case 'list':\n        if (props && props != '') {\n          this.reset_qsearch(true);\n        }\n        if (this.env.action == 'compose' && this.env.extwin) {\n          window.close();\n        }\n        else if (this.task == 'mail') {\n          this.list_mailbox(props);\n          this.set_button_titles();\n        }\n        else if (this.task == 'addressbook')\n          this.list_contacts(props);\n        break;\n\n      case 'set-listmode':\n        this.set_list_options(null, undefined, undefined, props == 'threads' ? 1 : 0);\n        break;\n\n      case 'sort':\n        var sort_order = this.env.sort_order,\n          sort_col = !this.env.disabled_sort_col ? props : this.env.sort_col;\n\n        if (!this.env.disabled_sort_order)\n          sort_order = this.env.sort_col == sort_col && sort_order == 'ASC' ? 'DESC' : 'ASC';\n\n        // set table header and update env\n        this.set_list_sorting(sort_col, sort_order);\n\n        // reload message list\n        this.list_mailbox('', '', sort_col+'_'+sort_order);\n        break;\n\n      case 'nextpage':\n        this.list_page('next');\n        break;\n\n      case 'lastpage':\n        this.list_page('last');\n        break;\n\n      case 'previouspage':\n        this.list_page('prev');\n        break;\n\n      case 'firstpage':\n        this.list_page('first');\n        break;\n\n      case 'expunge':\n        if (this.env.exists)\n          this.expunge_mailbox(this.env.mailbox);\n        break;\n\n      case 'purge':\n      case 'empty-mailbox':\n        if (this.env.exists)\n          this.purge_mailbox(this.env.mailbox);\n        break;\n\n      // common commands used in multiple tasks\n      case 'show':\n        if (this.task == 'mail') {\n          uid = this.get_single_uid();\n          if (uid && (!this.env.uid || uid != this.env.uid)) {\n            if (this.env.mailbox == this.env.drafts_mailbox)\n              this.open_compose_step({ _draft_uid: uid, _mbox: this.env.mailbox });\n            else\n              this.show_message(uid);\n          }\n        }\n        else if (this.task == 'addressbook') {\n          cid = props ? props : this.get_single_cid();\n          if (cid && !(this.env.action == 'show' && cid == this.env.cid))\n            this.load_contact(cid, 'show');\n        }\n        break;\n\n      case 'add':\n        if (this.task == 'addressbook')\n          this.load_contact(0, 'add');\n        else if (this.task == 'settings' && this.env.action == 'responses') {\n          var frame;\n          if ((frame = this.get_frame_window(this.env.contentframe))) {\n            this.set_busy(true);\n            this.location_href({ _action:'add-response', _framed:1 }, frame);\n          }\n        }\n        else if (this.task == 'settings') {\n          this.identity_list.clear_selection();\n          this.load_identity(0, 'add-identity');\n        }\n        break;\n\n      case 'edit':\n        if (this.task == 'addressbook' && (cid = this.get_single_cid()))\n          this.load_contact(cid, 'edit');\n        else if (this.task == 'settings' && props)\n          this.load_identity(props, 'edit-identity');\n        else if (this.task == 'mail' && (uid = this.get_single_uid())) {\n          url = { _mbox: this.get_message_mailbox(uid) };\n          url[this.env.mailbox == this.env.drafts_mailbox && props != 'new' ? '_draft_uid' : '_uid'] = uid;\n          this.open_compose_step(url);\n        }\n        break;\n\n      case 'save':\n        var input, form = this.gui_objects.editform;\n        if (form) {\n          // adv. search\n          if (this.env.action == 'search') {\n          }\n          // user prefs\n          else if ((input = $(\"input[name='_pagesize']\", form)) && input.length && isNaN(parseInt(input.val()))) {\n            alert(this.get_label('nopagesizewarning'));\n            input.focus();\n            break;\n          }\n          // contacts/identities\n          else {\n            // reload form\n            if (props == 'reload') {\n              form.action += '&_reload=1';\n            }\n            else if (this.task == 'settings' && (this.env.identities_level % 2) == 0  &&\n              (input = $(\"input[name='_email']\", form)) && input.length && !rcube_check_email(input.val())\n            ) {\n              alert(this.get_label('noemailwarning'));\n              input.focus();\n              break;\n            }\n\n            // clear empty input fields\n            $('input.placeholder').each(function(){ if (this.value == this._placeholder) this.value = ''; });\n          }\n\n          // add selected source (on the list)\n          if (parent.rcmail && parent.rcmail.env.source)\n            form.action = this.add_url(form.action, '_orig_source', parent.rcmail.env.source);\n\n          form.submit();\n        }\n        break;\n\n      case 'delete':\n        // mail task\n        if (this.task == 'mail')\n          this.delete_messages(event);\n        // addressbook task\n        else if (this.task == 'addressbook')\n          this.delete_contacts();\n        // settings: canned response\n        else if (this.task == 'settings' && this.env.action == 'responses')\n          this.delete_response();\n        // settings: user identities\n        else if (this.task == 'settings')\n          this.delete_identity();\n        break;\n\n      // mail task commands\n      case 'move':\n      case 'moveto': // deprecated\n        if (this.task == 'mail')\n          this.move_messages(props, event);\n        else if (this.task == 'addressbook')\n          this.move_contacts(props);\n        break;\n\n      case 'copy':\n        if (this.task == 'mail')\n          this.copy_messages(props, event);\n        else if (this.task == 'addressbook')\n          this.copy_contacts(props);\n        break;\n\n      case 'mark':\n        if (props)\n          this.mark_message(props);\n        break;\n\n      case 'toggle_status':\n      case 'toggle_flag':\n        flag = command == 'toggle_flag' ? 'flagged' : 'read';\n\n        if (uid = props) {\n          // toggle flagged/unflagged\n          if (flag == 'flagged') {\n            if (this.message_list.rows[uid].flagged)\n              flag = 'unflagged';\n          }\n          // toggle read/unread\n          else if (this.message_list.rows[uid].deleted)\n            flag = 'undelete';\n          else if (!this.message_list.rows[uid].unread)\n            flag = 'unread';\n\n          this.mark_message(flag, uid);\n        }\n\n        break;\n\n      case 'always-load':\n        if (this.env.uid && this.env.sender) {\n          this.add_contact(this.env.sender);\n          setTimeout(function(){ ref.command('load-images'); }, 300);\n          break;\n        }\n\n      case 'load-images':\n        if (this.env.uid)\n          this.show_message(this.env.uid, true, this.env.action=='preview');\n        break;\n\n      case 'load-attachment':\n      case 'open-attachment':\n      case 'download-attachment':\n        var qstring = '_mbox='+urlencode(this.env.mailbox)+'&_uid='+this.env.uid+'&_part='+props,\n          mimetype = this.env.attachments[props];\n\n        // open attachment in frame if it's of a supported mimetype\n        if (command != 'download-attachment' && mimetype && this.env.mimetypes && $.inArray(mimetype, this.env.mimetypes) >= 0) {\n          if (this.open_window(this.env.comm_path+'&_action=get&'+qstring+'&_frame=1'))\n            break;\n        }\n\n        this.goto_url('get', qstring+'&_download=1', false);\n        break;\n\n      case 'select-all':\n        this.select_all_mode = props ? false : true;\n        this.dummy_select = true; // prevent msg opening if there's only one msg on the list\n        if (props == 'invert')\n          this.message_list.invert_selection();\n        else\n          this.message_list.select_all(props == 'page' ? '' : props);\n        this.dummy_select = null;\n        break;\n\n      case 'select-none':\n        this.select_all_mode = false;\n        this.message_list.clear_selection();\n        break;\n\n      case 'expand-all':\n        this.env.autoexpand_threads = 1;\n        this.message_list.expand_all();\n        break;\n\n      case 'expand-unread':\n        this.env.autoexpand_threads = 2;\n        this.message_list.collapse_all();\n        this.expand_unread();\n        break;\n\n      case 'collapse-all':\n        this.env.autoexpand_threads = 0;\n        this.message_list.collapse_all();\n        break;\n\n      case 'nextmessage':\n        if (this.env.next_uid)\n          this.show_message(this.env.next_uid, false, this.env.action == 'preview');\n        break;\n\n      case 'lastmessage':\n        if (this.env.last_uid)\n          this.show_message(this.env.last_uid);\n        break;\n\n      case 'previousmessage':\n        if (this.env.prev_uid)\n          this.show_message(this.env.prev_uid, false, this.env.action == 'preview');\n        break;\n\n      case 'firstmessage':\n        if (this.env.first_uid)\n          this.show_message(this.env.first_uid);\n        break;\n\n      case 'compose':\n        url = {};\n\n        if (this.task == 'mail') {\n          url = {_mbox: this.env.mailbox, _search: this.env.search_request};\n          if (props)\n            url._to = props;\n        }\n        // modify url if we're in addressbook\n        else if (this.task == 'addressbook') {\n          // switch to mail compose step directly\n          if (props && props.indexOf('@') > 0) {\n            url._to = props;\n          }\n          else {\n            var a_cids = [];\n            // use contact id passed as command parameter\n            if (props)\n              a_cids.push(props);\n            // get selected contacts\n            else if (this.contact_list)\n              a_cids = this.contact_list.get_selection();\n\n            if (a_cids.length)\n              this.http_post('mailto', { _cid: a_cids.join(','), _source: this.env.source }, true);\n            else if (this.env.group)\n              this.http_post('mailto', { _gid: this.env.group, _source: this.env.source }, true);\n\n            break;\n          }\n        }\n        else if (props && typeof props == 'string') {\n          url._to = props;\n        }\n        else if (props && typeof props == 'object') {\n          $.extend(url, props);\n        }\n\n        this.open_compose_step(url);\n        break;\n\n      case 'spellcheck':\n        if (this.spellcheck_state()) {\n          this.editor.spellcheck_stop();\n        }\n        else {\n          this.editor.spellcheck_start();\n        }\n        break;\n\n      case 'savedraft':\n        // Reset the auto-save timer\n        clearTimeout(this.save_timer);\n\n        // compose form did not change (and draft wasn't saved already)\n        if (this.env.draft_id && this.cmp_hash == this.compose_field_hash()) {\n          this.auto_save_start();\n          break;\n        }\n\n        this.submit_messageform(true);\n        break;\n\n      case 'send':\n        if (!props.nocheck && !this.env.is_sent && !this.check_compose_input(command))\n          break;\n\n        // Reset the auto-save timer\n        clearTimeout(this.save_timer);\n\n        this.submit_messageform();\n        break;\n\n      case 'send-attachment':\n        // Reset the auto-save timer\n        clearTimeout(this.save_timer);\n\n        if (!(flag = this.upload_file(props || this.gui_objects.uploadform, 'upload'))) {\n          if (flag !== false)\n            alert(this.get_label('selectimportfile'));\n          aborted = true;\n        }\n        break;\n\n      case 'insert-sig':\n        this.change_identity($(\"[name='_from']\")[0], true);\n        break;\n\n      case 'list-addresses':\n        this.list_contacts(props);\n        this.enable_command('add-recipient', false);\n        break;\n\n      case 'add-recipient':\n        this.compose_add_recipient(props);\n        break;\n\n      case 'reply-all':\n      case 'reply-list':\n      case 'reply':\n        if (uid = this.get_single_uid()) {\n          url = {_reply_uid: uid, _mbox: this.get_message_mailbox(uid), _search: this.env.search_request};\n          if (command == 'reply-all')\n            // do reply-list, when list is detected and popup menu wasn't used\n            url._all = (!props && this.env.reply_all_mode == 1 && this.commands['reply-list'] ? 'list' : 'all');\n          else if (command == 'reply-list')\n            url._all = 'list';\n\n          this.open_compose_step(url);\n        }\n        break;\n\n      case 'forward-attachment':\n      case 'forward-inline':\n      case 'forward':\n        var uids = this.env.uid ? [this.env.uid] : (this.message_list ? this.message_list.get_selection() : []);\n        if (uids.length) {\n          url = { _forward_uid: this.uids_to_list(uids), _mbox: this.env.mailbox, _search: this.env.search_request };\n          if (command == 'forward-attachment' || (!props && this.env.forward_attachment) || uids.length > 1)\n            url._attachment = 1;\n          this.open_compose_step(url);\n        }\n        break;\n\n      case 'print':\n        if (this.task == 'addressbook') {\n          if (uid = this.contact_list.get_single_selection()) {\n            url = '&_action=print&_cid=' + uid;\n            if (this.env.source)\n              url += '&_source=' + urlencode(this.env.source);\n            this.open_window(this.env.comm_path + url, true, true);\n          }\n        }\n        else if (this.env.action == 'get') {\n          this.gui_objects.messagepartframe.contentWindow.print();\n        }\n        else if (uid = this.get_single_uid()) {\n          url = this.url('print', this.params_from_uid(uid, {_safe: this.env.safemode ? 1 : 0}));\n          if (this.open_window(url, true, true)) {\n            if (this.env.action != 'show')\n              this.mark_message('read', uid);\n          }\n        }\n        break;\n\n      case 'viewsource':\n        if (uid = this.get_single_uid())\n          this.open_window(this.url('viewsource', this.params_from_uid(uid)), true, true);\n        break;\n\n      case 'download':\n        if (this.env.action == 'get') {\n          location.href = location.href.replace(/_frame=/, '_download=');\n        }\n        else if (uid = this.get_single_uid()) {\n          this.goto_url('viewsource', this.params_from_uid(uid, {_save: 1}));\n        }\n        break;\n\n      // quicksearch\n      case 'search':\n        if (!props && this.gui_objects.qsearchbox)\n          props = this.gui_objects.qsearchbox.value;\n        if (props) {\n          this.qsearch(props);\n          break;\n        }\n\n      // reset quicksearch\n      case 'reset-search':\n        var n, s = this.env.search_request || this.env.qsearch;\n\n        this.reset_qsearch(true);\n        this.select_all_mode = false;\n\n        if (s && this.env.action == 'compose') {\n          if (this.contact_list)\n            this.list_contacts_clear();\n        }\n        else if (s && this.env.mailbox) {\n          this.list_mailbox(this.env.mailbox, 1);\n        }\n        else if (s && this.task == 'addressbook') {\n          if (this.env.source == '') {\n            for (n in this.env.address_sources) break;\n            this.env.source = n;\n            this.env.group = '';\n          }\n          this.list_contacts(this.env.source, this.env.group, 1);\n        }\n        break;\n\n      case 'pushgroup':\n        // add group ID to stack\n        this.env.address_group_stack.push(props.id);\n        if (obj && event)\n          rcube_event.cancel(event);\n\n      case 'listgroup':\n        this.reset_qsearch();\n        this.list_contacts(props.source, props.id);\n        break;\n\n      case 'popgroup':\n        if (this.env.address_group_stack.length > 1) {\n          this.env.address_group_stack.pop();\n          this.reset_qsearch();\n          this.list_contacts(props.source, this.env.address_group_stack[this.env.address_group_stack.length-1]);\n        }\n        break;\n\n      case 'import-messages':\n        var form = props || this.gui_objects.importform,\n          importlock = this.set_busy(true, 'importwait');\n\n        $('input[name=\"_unlock\"]', form).val(importlock);\n\n        if (!(flag = this.upload_file(form, 'import', importlock))) {\n          this.set_busy(false, null, importlock);\n          if (flag !== false)\n            alert(this.get_label('selectimportfile'));\n          aborted = true;\n        }\n        break;\n\n      case 'import':\n        if (this.env.action == 'import' && this.gui_objects.importform) {\n          var file = document.getElementById('rcmimportfile');\n          if (file && !file.value) {\n            alert(this.get_label('selectimportfile'));\n            aborted = true;\n            break;\n          }\n          this.gui_objects.importform.submit();\n          this.set_busy(true, 'importwait');\n          this.lock_form(this.gui_objects.importform, true);\n        }\n        else\n          this.goto_url('import', (this.env.source ? '_target='+urlencode(this.env.source)+'&' : ''));\n        break;\n\n      case 'export':\n        if (this.contact_list.rowcount > 0) {\n          this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _search: this.env.search_request });\n        }\n        break;\n\n      case 'export-selected':\n        if (this.contact_list.rowcount > 0) {\n          this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _cid: this.contact_list.get_selection().join(',') });\n        }\n        break;\n\n      case 'upload-photo':\n        this.upload_contact_photo(props || this.gui_objects.uploadform);\n        break;\n\n      case 'delete-photo':\n        this.replace_contact_photo('-del-');\n        break;\n\n      // user settings commands\n      case 'preferences':\n      case 'identities':\n      case 'responses':\n      case 'folders':\n        this.goto_url('settings/' + command);\n        break;\n\n      case 'undo':\n        this.http_request('undo', '', this.display_message('', 'loading'));\n        break;\n\n      // unified command call (command name == function name)\n      default:\n        var func = command.replace(/-/g, '_');\n        if (this[func] && typeof this[func] === 'function') {\n          ret = this[func](props, obj, event);\n        }\n        break;\n    }\n\n    if (!aborted && this.triggerEvent('after'+command, props) === false)\n      ret = false;\n    this.triggerEvent('actionafter', { props:props, action:command, aborted:aborted });\n\n    return ret === false ? false : obj ? false : true;\n  };\n\n  // set command(s) enabled or disabled\n  this.enable_command = function()\n  {\n    var i, n, args = Array.prototype.slice.call(arguments),\n      enable = args.pop(), cmd;\n\n    for (n=0; n<args.length; n++) {\n      cmd = args[n];\n      // argument of type array\n      if (typeof cmd === 'string') {\n        this.commands[cmd] = enable;\n        this.set_button(cmd, (enable ? 'act' : 'pas'));\n        this.triggerEvent('enable-command', {command: cmd, status: enable});\n      }\n      // push array elements into commands array\n      else {\n        for (i in cmd)\n          args.push(cmd[i]);\n      }\n    }\n  };\n\n  this.command_enabled = function(cmd)\n  {\n    return this.commands[cmd];\n  };\n\n  // lock/unlock interface\n  this.set_busy = function(a, message, id)\n  {\n    if (a && message) {\n      var msg = this.get_label(message);\n      if (msg == message)\n        msg = 'Loading...';\n\n      id = this.display_message(msg, 'loading');\n    }\n    else if (!a && id) {\n      this.hide_message(id);\n    }\n\n    this.busy = a;\n    //document.body.style.cursor = a ? 'wait' : 'default';\n\n    if (this.gui_objects.editform)\n      this.lock_form(this.gui_objects.editform, a);\n\n    return id;\n  };\n\n  // return a localized string\n  this.get_label = function(name, domain)\n  {\n    if (domain && this.labels[domain+'.'+name])\n      return this.labels[domain+'.'+name];\n    else if (this.labels[name])\n      return this.labels[name];\n    else\n      return name;\n  };\n\n  // alias for convenience reasons\n  this.gettext = this.get_label;\n\n  // switch to another application task\n  this.switch_task = function(task)\n  {\n    if (this.task === task && task != 'mail')\n      return;\n\n    var url = this.get_task_url(task);\n\n    if (task == 'mail')\n      url += '&_mbox=INBOX';\n    else if (task == 'logout' && !this.env.server_error) {\n      url += '&_token=' + this.env.request_token;\n      this.clear_compose_data();\n    }\n\n    this.redirect(url);\n  };\n\n  this.get_task_url = function(task, url)\n  {\n    if (!url)\n      url = this.env.comm_path;\n\n    if (url.match(/[?&]_task=[a-zA-Z0-9_-]+/))\n        return url.replace(/_task=[a-zA-Z0-9_-]+/, '_task=' + task);\n    else\n        return url.replace(/\\?.*$/, '') + '?_task=' + task;\n  };\n\n  this.reload = function(delay)\n  {\n    if (this.is_framed())\n      parent.rcmail.reload(delay);\n    else if (delay)\n      setTimeout(function() { ref.reload(); }, delay);\n    else if (window.location)\n      location.href = this.url('', {_extwin: this.env.extwin});\n  };\n\n  // Add variable to GET string, replace old value if exists\n  this.add_url = function(url, name, value)\n  {\n    value = urlencode(value);\n\n    if (/(\\?.*)$/.test(url)) {\n      var urldata = RegExp.$1,\n        datax = RegExp('((\\\\?|&)'+RegExp.escape(name)+'=[^&]*)');\n\n      if (datax.test(urldata)) {\n        urldata = urldata.replace(datax, RegExp.$2 + name + '=' + value);\n      }\n      else\n        urldata += '&' + name + '=' + value\n\n      return url.replace(/(\\?.*)$/, urldata);\n    }\n\n    return url + '?' + name + '=' + value;\n  };\n\n  this.is_framed = function()\n  {\n    return this.env.framed && parent.rcmail && parent.rcmail != this && typeof parent.rcmail.command == 'function';\n  };\n\n  this.save_pref = function(prop)\n  {\n    var request = {_name: prop.name, _value: prop.value};\n\n    if (prop.session)\n      request._session = prop.session;\n    if (prop.env)\n      this.env[prop.env] = prop.value;\n\n    this.http_post('save-pref', request);\n  };\n\n  this.html_identifier = function(str, encode)\n  {\n    return encode ? this.html_identifier_encode(str) : String(str).replace(this.identifier_expr, '_');\n  };\n\n  this.html_identifier_encode = function(str)\n  {\n    return Base64.encode(String(str)).replace(/=+$/, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n  };\n\n  this.html_identifier_decode = function(str)\n  {\n    str = String(str).replace(/-/g, '+').replace(/_/g, '/');\n\n    while (str.length % 4) str += '=';\n\n    return Base64.decode(str);\n  };\n\n\n  /*********************************************************/\n  /*********        event handling methods         *********/\n  /*********************************************************/\n\n  this.drag_menu = function(e, target)\n  {\n    var modkey = rcube_event.get_modifier(e),\n      menu = this.gui_objects.dragmenu;\n\n    if (menu && modkey == SHIFT_KEY && this.commands['copy']) {\n      var pos = rcube_event.get_mouse_pos(e);\n      this.env.drag_target = target;\n      this.show_menu(this.gui_objects.dragmenu.id, true, e);\n      $(menu).css({top: (pos.y-10)+'px', left: (pos.x-10)+'px'});\n      return true;\n    }\n\n    return false;\n  };\n\n  this.drag_menu_action = function(action)\n  {\n    var menu = this.gui_objects.dragmenu;\n    if (menu) {\n      $(menu).hide();\n    }\n    this.command(action, this.env.drag_target);\n    this.env.drag_target = null;\n  };\n\n  this.drag_start = function(list)\n  {\n    this.drag_active = true;\n\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n    if (this.preview_read_timer)\n      clearTimeout(this.preview_read_timer);\n\n    // prepare treelist widget for dragging interactions\n    if (this.treelist)\n      this.treelist.drag_start();\n  };\n\n  this.drag_end = function(e)\n  {\n    var list, model;\n\n    if (this.treelist)\n      this.treelist.drag_end();\n\n    // execute drag & drop action when mouse was released\n    if (list = this.message_list)\n      model = this.env.mailboxes;\n    else if (list = this.contact_list)\n      model = this.env.contactfolders;\n\n    if (this.drag_active && model && this.env.last_folder_target) {\n      var target = model[this.env.last_folder_target];\n      list.draglayer.hide();\n\n      if (this.contact_list) {\n        if (!this.contacts_drag_menu(e, target))\n          this.command('move', target);\n      }\n      else if (!this.drag_menu(e, target))\n        this.command('move', target);\n    }\n\n    this.drag_active = false;\n    this.env.last_folder_target = null;\n  };\n\n  this.drag_move = function(e)\n  {\n    if (this.gui_objects.folderlist) {\n      var drag_target, oldclass,\n        layerclass = 'draglayernormal',\n        mouse = rcube_event.get_mouse_pos(e);\n\n      if (this.contact_list && this.contact_list.draglayer)\n        oldclass = this.contact_list.draglayer.attr('class');\n\n      // mouse intersects a valid drop target on the treelist\n      if (this.treelist && (drag_target = this.treelist.intersects(mouse, true))) {\n        this.env.last_folder_target = drag_target;\n        layerclass = 'draglayer' + (this.check_droptarget(drag_target) > 1 ? 'copy' : 'normal');\n      }\n      else {\n        // Clear target, otherwise drag end will trigger move into last valid droptarget\n        this.env.last_folder_target = null;\n      }\n\n      if (layerclass != oldclass && this.contact_list && this.contact_list.draglayer)\n        this.contact_list.draglayer.attr('class', layerclass);\n    }\n  };\n\n  this.collapse_folder = function(name)\n  {\n    if (this.treelist)\n      this.treelist.toggle(name);\n  };\n\n  this.folder_collapsed = function(node)\n  {\n    var prefname = this.env.task == 'addressbook' ? 'collapsed_abooks' : 'collapsed_folders',\n      old = this.env[prefname];\n\n    if (node.collapsed) {\n      this.env[prefname] = this.env[prefname] + '&'+urlencode(node.id)+'&';\n\n      // select the folder if one of its childs is currently selected\n      // don't select if it's virtual (#1488346)\n      if (!node.virtual && this.env.mailbox && this.env.mailbox.startsWith(node.id + this.env.delimiter))\n        this.command('list', node.id);\n    }\n    else {\n      var reg = new RegExp('&'+urlencode(node.id)+'&');\n      this.env[prefname] = this.env[prefname].replace(reg, '');\n    }\n\n    if (!this.drag_active) {\n      if (old !== this.env[prefname])\n        this.command('save-pref', { name: prefname, value: this.env[prefname] });\n\n      if (this.env.unread_counts)\n        this.set_unread_count_display(node.id, false);\n    }\n  };\n\n  // global mouse-click handler to cleanup some UI elements\n  this.doc_mouse_up = function(e)\n  {\n    var list, id, target = rcube_event.get_target(e);\n\n    // ignore event if jquery UI dialog is open\n    if ($(target).closest('.ui-dialog, .ui-widget-overlay').length)\n      return;\n\n    // remove focus from list widgets\n    if (window.rcube_list_widget && rcube_list_widget._instances.length) {\n      $.each(rcube_list_widget._instances, function(i,list){\n        if (list && !rcube_mouse_is_over(e, list.list.parentNode))\n          list.blur();\n      });\n    }\n\n    // reset 'pressed' buttons\n    if (this.buttons_sel) {\n      for (id in this.buttons_sel)\n        if (typeof id !== 'function')\n          this.button_out(this.buttons_sel[id], id);\n      this.buttons_sel = {};\n    }\n\n    // reset popup menus; delayed to have updated menu_stack data\n    setTimeout(function(e){\n      var obj, skip, config, id, i, parents = $(target).parents();\n      for (i = ref.menu_stack.length - 1; i >= 0; i--) {\n        id = ref.menu_stack[i];\n        obj = $('#' + id);\n\n        if (obj.is(':visible')\n          && target != obj.data('opener')\n          && target != obj.get(0)  // check if scroll bar was clicked (#1489832)\n          && !parents.is(obj.data('opener'))\n          && id != skip\n          && (obj.attr('data-editable') != 'true' || !$(target).parents('#' + id).length)\n          && (obj.attr('data-sticky') != 'true' || !rcube_mouse_is_over(e, obj.get(0)))\n        ) {\n          ref.hide_menu(id, e);\n        }\n        skip = obj.data('parent');\n      }\n    }, 10, e);\n  };\n\n  // global keypress event handler\n  this.doc_keypress = function(e)\n  {\n    // Helper method to move focus to the next/prev active menu item\n    var focus_menu_item = function(dir) {\n      var obj, item, mod = dir < 0 ? 'prevAll' : 'nextAll', limit = dir < 0 ? 'last' : 'first';\n      if (ref.focused_menu && (obj = $('#'+ref.focused_menu))) {\n        item = obj.find(':focus').closest('li')[mod](':has(:not([aria-disabled=true]))').find('a,input')[limit]();\n        if (!item.length)\n          item = obj.find(':focus').closest('ul')[mod](':has(:not([aria-disabled=true]))').find('a,input')[limit]();\n        return item.focus().length;\n      }\n\n      return 0;\n    };\n\n    var target = e.target || {},\n      keyCode = rcube_event.get_keycode(e);\n\n    // save global reference for keyboard detection on click events in IE\n    rcube_event._last_keyboard_event = e;\n\n    if (e.keyCode != 27 && (!this.menu_keyboard_active || target.nodeName == 'TEXTAREA' || target.nodeName == 'SELECT')) {\n      return true;\n    }\n\n    switch (keyCode) {\n      case 38:\n      case 40:\n      case 63232: // \"up\", in safari keypress\n      case 63233: // \"down\", in safari keypress\n        focus_menu_item(keyCode == 38 || keyCode == 63232 ? -1 : 1);\n        return rcube_event.cancel(e);\n\n      case 9:   // tab\n        if (this.focused_menu) {\n          var mod = rcube_event.get_modifier(e);\n          if (!focus_menu_item(mod == SHIFT_KEY ? -1 : 1)) {\n            this.hide_menu(this.focused_menu, e);\n          }\n        }\n        return rcube_event.cancel(e);\n\n      case 27:  // esc\n        if (this.menu_stack.length)\n          this.hide_menu(this.menu_stack[this.menu_stack.length-1], e);\n        break;\n    }\n\n    return true;\n  }\n\n  this.msglist_select = function(list)\n  {\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n    if (this.preview_read_timer)\n      clearTimeout(this.preview_read_timer);\n\n    var selected = list.get_single_selection();\n\n    this.enable_command(this.env.message_commands, selected != null);\n    if (selected) {\n      // Hide certain command buttons when Drafts folder is selected\n      if (this.env.mailbox == this.env.drafts_mailbox)\n        this.enable_command('reply', 'reply-all', 'reply-list', 'forward', 'forward-attachment', 'forward-inline', false);\n      // Disable reply-list when List-Post header is not set\n      else {\n        var msg = this.env.messages[selected];\n        if (!msg.ml)\n          this.enable_command('reply-list', false);\n      }\n    }\n    // Multi-message commands\n    this.enable_command('delete', 'move', 'copy', 'mark', 'forward', 'forward-attachment', list.selection.length > 0);\n\n    // reset all-pages-selection\n    if (selected || (list.selection.length && list.selection.length != list.rowcount))\n      this.select_all_mode = false;\n\n    // start timer for message preview (wait for double click)\n    if (selected && this.env.contentframe && !list.multi_selecting && !this.dummy_select)\n      this.preview_timer = setTimeout(function() { ref.msglist_get_preview(); }, this.dblclick_time);\n    else if (this.env.contentframe)\n      this.show_contentframe(false);\n  };\n\n  // This allow as to re-select selected message and display it in preview frame\n  this.msglist_click = function(list)\n  {\n    if (list.multi_selecting || !this.env.contentframe)\n      return;\n\n    if (list.get_single_selection())\n      return;\n\n    var win = this.get_frame_window(this.env.contentframe);\n\n    if (win && win.location.href.indexOf(this.env.blankpage) >= 0) {\n      if (this.preview_timer)\n        clearTimeout(this.preview_timer);\n      if (this.preview_read_timer)\n        clearTimeout(this.preview_read_timer);\n\n      this.preview_timer = setTimeout(function() { ref.msglist_get_preview(); }, this.dblclick_time);\n    }\n  };\n\n  this.msglist_dbl_click = function(list)\n  {\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n    if (this.preview_read_timer)\n      clearTimeout(this.preview_read_timer);\n\n    var uid = list.get_single_selection();\n\n    if (uid && (this.env.messages[uid].mbox || this.env.mailbox) == this.env.drafts_mailbox)\n      this.open_compose_step({ _draft_uid: uid, _mbox: this.env.mailbox });\n    else if (uid)\n      this.show_message(uid, false, false);\n  };\n\n  this.msglist_keypress = function(list)\n  {\n    if (list.modkey == CONTROL_KEY)\n      return;\n\n    if (list.key_pressed == list.ENTER_KEY)\n      this.command('show');\n    else if (list.key_pressed == list.DELETE_KEY || list.key_pressed == list.BACKSPACE_KEY)\n      this.command('delete');\n    else if (list.key_pressed == 33)\n      this.command('previouspage');\n    else if (list.key_pressed == 34)\n      this.command('nextpage');\n  };\n\n  this.msglist_get_preview = function()\n  {\n    var uid = this.get_single_uid();\n    if (uid && this.env.contentframe && !this.drag_active)\n      this.show_message(uid, false, true);\n    else if (this.env.contentframe)\n      this.show_contentframe(false);\n  };\n\n  this.msglist_expand = function(row)\n  {\n    if (this.env.messages[row.uid])\n      this.env.messages[row.uid].expanded = row.expanded;\n    $(row.obj)[row.expanded?'addClass':'removeClass']('expanded');\n  };\n\n  this.msglist_set_coltypes = function(list)\n  {\n    var i, found, name, cols = list.thead.rows[0].cells;\n\n    this.env.listcols = [];\n\n    for (i=0; i<cols.length; i++)\n      if (cols[i].id && cols[i].id.startsWith('rcm')) {\n        name = cols[i].id.slice(3);\n        this.env.listcols.push(name);\n      }\n\n    if ((found = $.inArray('flag', this.env.listcols)) >= 0)\n      this.env.flagged_col = found;\n\n    if ((found = $.inArray('subject', this.env.listcols)) >= 0)\n      this.env.subject_col = found;\n\n    this.command('save-pref', { name: 'list_cols', value: this.env.listcols, session: 'list_attrib/columns' });\n  };\n\n  this.check_droptarget = function(id)\n  {\n    switch (this.task) {\n      case 'mail':\n        return (this.env.mailboxes[id]\n            && !this.env.mailboxes[id].virtual\n            && (this.env.mailboxes[id].id != this.env.mailbox || this.is_multifolder_listing())) ? 1 : 0;\n\n      case 'addressbook':\n        var target;\n        if (id != this.env.source && (target = this.env.contactfolders[id])) {\n          // droptarget is a group\n          if (target.type == 'group') {\n            if (target.id != this.env.group && !this.env.contactfolders[target.source].readonly) {\n              var is_other = this.env.selection_sources.length > 1 || $.inArray(target.source, this.env.selection_sources) == -1;\n              return !is_other || this.commands.move ? 1 : 2;\n            }\n          }\n          // droptarget is a (writable) addressbook and it's not the source\n          else if (!target.readonly && (this.env.selection_sources.length > 1 || $.inArray(id, this.env.selection_sources) == -1)) {\n            return this.commands.move ? 1 : 2;\n          }\n        }\n    }\n\n    return 0;\n  };\n\n  // open popup window\n  this.open_window = function(url, small, toolbar)\n  {\n    var wname = 'rcmextwin' + new Date().getTime();\n\n    url += (url.match(/\\?/) ? '&' : '?') + '_extwin=1';\n\n    if (this.env.standard_windows)\n      var extwin = window.open(url, wname);\n    else {\n      var win = this.is_framed() ? parent.window : window,\n        page = $(win),\n        page_width = page.width(),\n        page_height = bw.mz ? $('body', win).height() : page.height(),\n        w = Math.min(small ? this.env.popup_width_small : this.env.popup_width, page_width),\n        h = page_height, // always use same height\n        l = (win.screenLeft || win.screenX) + 20,\n        t = (win.screenTop || win.screenY) + 20,\n        extwin = window.open(url, wname,\n          'width='+w+',height='+h+',top='+t+',left='+l+',resizable=yes,location=no,scrollbars=yes'\n          +(toolbar ? ',toolbar=yes,menubar=yes,status=yes' : ',toolbar=no,menubar=no,status=no'));\n    }\n\n    // detect popup blocker (#1489618)\n    // don't care this might not work with all browsers\n    if (!extwin || extwin.closed) {\n      this.display_message(this.get_label('windowopenerror'), 'warning');\n      return;\n    }\n\n    // write loading... message to empty windows\n    if (!url && extwin.document) {\n      extwin.document.write('<html><body>' + this.get_label('loading') + '</body></html>');\n    }\n\n    // allow plugins to grab the window reference (#1489413)\n    this.triggerEvent('openwindow', { url:url, handle:extwin });\n\n    // focus window, delayed to bring to front\n    setTimeout(function() { extwin && extwin.focus(); }, 10);\n\n    return extwin;\n  };\n\n\n  /*********************************************************/\n  /*********     (message) list functionality      *********/\n  /*********************************************************/\n\n  this.init_message_row = function(row)\n  {\n    var i, fn = {}, uid = row.uid,\n      status_icon = (this.env.status_col != null ? 'status' : 'msg') + 'icn' + row.id;\n\n    if (uid && this.env.messages[uid])\n      $.extend(row, this.env.messages[uid]);\n\n    // set eventhandler to status icon\n    if (row.icon = document.getElementById(status_icon)) {\n      fn.icon = function(e) { ref.command('toggle_status', uid); };\n    }\n\n    // save message icon position too\n    if (this.env.status_col != null)\n      row.msgicon = document.getElementById('msgicn'+row.id);\n    else\n      row.msgicon = row.icon;\n\n    // set eventhandler to flag icon\n    if (this.env.flagged_col != null && (row.flagicon = document.getElementById('flagicn'+row.id))) {\n      fn.flagicon = function(e) { ref.command('toggle_flag', uid); };\n    }\n\n    // set event handler to thread expand/collapse icon\n    if (!row.depth && row.has_children && (row.expando = document.getElementById('rcmexpando'+row.id))) {\n      fn.expando = function(e) { ref.expand_message_row(e, uid); };\n    }\n\n    // attach events\n    $.each(fn, function(i, f) {\n      row[i].onclick = function(e) { f(e); return rcube_event.cancel(e); };\n      if (bw.touch && row[i].addEventListener) {\n        row[i].addEventListener('touchend', function(e) {\n          if (e.changedTouches.length == 1) {\n            f(e);\n            return rcube_event.cancel(e);\n          }\n        }, false);\n      }\n    });\n\n    this.triggerEvent('insertrow', { uid:uid, row:row });\n  };\n\n  // create a table row in the message list\n  this.add_message_row = function(uid, cols, flags, attop)\n  {\n    if (!this.gui_objects.messagelist || !this.message_list)\n      return false;\n\n    // Prevent from adding messages from different folder (#1487752)\n    if (flags.mbox != this.env.mailbox && !flags.skip_mbox_check)\n      return false;\n\n    if (!this.env.messages[uid])\n      this.env.messages[uid] = {};\n\n    // merge flags over local message object\n    $.extend(this.env.messages[uid], {\n      deleted: flags.deleted?1:0,\n      replied: flags.answered?1:0,\n      unread: !flags.seen?1:0,\n      forwarded: flags.forwarded?1:0,\n      flagged: flags.flagged?1:0,\n      has_children: flags.has_children?1:0,\n      depth: flags.depth?flags.depth:0,\n      unread_children: flags.unread_children?flags.unread_children:0,\n      parent_uid: flags.parent_uid?flags.parent_uid:0,\n      selected: this.select_all_mode || this.message_list.in_selection(uid),\n      ml: flags.ml?1:0,\n      ctype: flags.ctype,\n      mbox: flags.mbox,\n      // flags from plugins\n      flags: flags.extra_flags\n    });\n\n    var c, n, col, html, css_class, label, status_class = '', status_label = '',\n      tree = '', expando = '',\n      list = this.message_list,\n      rows = list.rows,\n      message = this.env.messages[uid],\n      msg_id = this.html_identifier(uid,true),\n      row_class = 'message'\n        + (!flags.seen ? ' unread' : '')\n        + (flags.deleted ? ' deleted' : '')\n        + (flags.flagged ? ' flagged' : '')\n        + (message.selected ? ' selected' : ''),\n      row = { cols:[], style:{}, id:'rcmrow'+msg_id, uid:uid };\n\n    // message status icons\n    css_class = 'msgicon';\n    if (this.env.status_col === null) {\n      css_class += ' status';\n      if (flags.deleted) {\n        status_class += ' deleted';\n        status_label += this.get_label('deleted') + ' ';\n      }\n      else if (!flags.seen) {\n        status_class += ' unread';\n        status_label += this.get_label('unread') + ' ';\n      }\n      else if (flags.unread_children > 0) {\n        status_class += ' unreadchildren';\n      }\n    }\n    if (flags.answered) {\n      status_class += ' replied';\n      status_label += this.get_label('replied') + ' ';\n    }\n    if (flags.forwarded) {\n      status_class += ' forwarded';\n      status_label += this.get_label('forwarded') + ' ';\n    }\n\n    // update selection\n    if (message.selected && !list.in_selection(uid))\n      list.selection.push(uid);\n\n    // threads\n    if (this.env.threading) {\n      if (message.depth) {\n        // This assumes that div width is hardcoded to 15px,\n        tree += '<span id=\"rcmtab' + msg_id + '\" class=\"branch\" style=\"width:' + (message.depth * 15) + 'px;\">&nbsp;&nbsp;</span>';\n\n        if ((rows[message.parent_uid] && rows[message.parent_uid].expanded === false)\n          || ((this.env.autoexpand_threads == 0 || this.env.autoexpand_threads == 2) &&\n            (!rows[message.parent_uid] || !rows[message.parent_uid].expanded))\n        ) {\n          row.style.display = 'none';\n          message.expanded = false;\n        }\n        else\n          message.expanded = true;\n\n        row_class += ' thread expanded';\n      }\n      else if (message.has_children) {\n        if (message.expanded === undefined && (this.env.autoexpand_threads == 1 || (this.env.autoexpand_threads == 2 && message.unread_children))) {\n          message.expanded = true;\n        }\n\n        expando = '<div id=\"rcmexpando' + row.id + '\" class=\"' + (message.expanded ? 'expanded' : 'collapsed') + '\">&nbsp;&nbsp;</div>';\n        row_class += ' thread' + (message.expanded? ' expanded' : '');\n      }\n\n      if (flags.unread_children && flags.seen && !message.expanded)\n        row_class += ' unroot';\n    }\n\n    tree += '<span id=\"msgicn'+row.id+'\" class=\"'+css_class+status_class+'\" title=\"'+status_label+'\"></span>';\n    row.className = row_class;\n\n    // build subject link\n    if (cols.subject) {\n      var action  = flags.mbox == this.env.drafts_mailbox ? 'compose' : 'show',\n        uid_param = flags.mbox == this.env.drafts_mailbox ? '_draft_uid' : '_uid',\n        query = { _mbox: flags.mbox };\n      query[uid_param] = uid;\n      cols.subject = '<a href=\"' + this.url(action, query) + '\" onclick=\"return rcube_event.keyboard_only(event)\"' +\n        ' onmouseover=\"rcube_webmail.long_subject_title(this,'+(message.depth+1)+')\" tabindex=\"-1\"><span>'+cols.subject+'</span></a>';\n    }\n\n    // add each submitted col\n    for (n in this.env.listcols) {\n      c = this.env.listcols[n];\n      col = {className: String(c).toLowerCase(), events:{}};\n\n      if (this.env.coltypes[c] && this.env.coltypes[c].hidden) {\n        col.className += ' hidden';\n      }\n\n      if (c == 'flag') {\n        css_class = (flags.flagged ? 'flagged' : 'unflagged');\n        label = this.get_label(css_class);\n        html = '<span id=\"flagicn'+row.id+'\" class=\"'+css_class+'\" title=\"'+label+'\"></span>';\n      }\n      else if (c == 'attachment') {\n        label = this.get_label('withattachment');\n        if (flags.attachmentClass)\n          html = '<span class=\"'+flags.attachmentClass+'\" title=\"'+label+'\"></span>';\n        else if (/application\\/|multipart\\/(m|signed)/.test(flags.ctype))\n          html = '<span class=\"attachment\" title=\"'+label+'\"></span>';\n        else if (/multipart\\/report/.test(flags.ctype))\n          html = '<span class=\"report\"></span>';\n          else\n          html = '&nbsp;';\n      }\n      else if (c == 'status') {\n        label = '';\n        if (flags.deleted) {\n          css_class = 'deleted';\n          label = this.get_label('deleted');\n        }\n        else if (!flags.seen) {\n          css_class = 'unread';\n          label = this.get_label('unread');\n        }\n        else if (flags.unread_children > 0) {\n          css_class = 'unreadchildren';\n        }\n        else\n          css_class = 'msgicon';\n        html = '<span id=\"statusicn'+row.id+'\" class=\"'+css_class+status_class+'\" title=\"'+label+'\"></span>';\n      }\n      else if (c == 'threads')\n        html = expando;\n      else if (c == 'subject') {\n        if (bw.ie)\n          col.events.mouseover = function() { rcube_webmail.long_subject_title_ex(this); };\n        html = tree + cols[c];\n      }\n      else if (c == 'priority') {\n        if (flags.prio > 0 && flags.prio < 6) {\n          label = this.get_label('priority') + ' ' + flags.prio;\n          html = '<span class=\"prio'+flags.prio+'\" title=\"'+label+'\"></span>';\n        }\n        else\n          html = '&nbsp;';\n      }\n      else if (c == 'folder') {\n        html = '<span onmouseover=\"rcube_webmail.long_subject_title(this)\">' + cols[c] + '<span>';\n      }\n      else\n        html = cols[c];\n\n      col.innerHTML = html;\n      row.cols.push(col);\n    }\n\n    list.insert_row(row, attop);\n\n    // remove 'old' row\n    if (attop && this.env.pagesize && list.rowcount > this.env.pagesize) {\n      var uid = list.get_last_row();\n      list.remove_row(uid);\n      list.clear_selection(uid);\n    }\n  };\n\n  this.set_list_sorting = function(sort_col, sort_order)\n  {\n    var sort_old = this.env.sort_col == 'arrival' ? 'date' : this.env.sort_col,\n      sort_new = sort_col == 'arrival' ? 'date' : sort_col;\n\n    // set table header class\n    $('#rcm' + sort_old).removeClass('sorted' + this.env.sort_order.toUpperCase());\n    if (sort_new)\n      $('#rcm' + sort_new).addClass('sorted' + sort_order);\n\n    // if sorting by 'arrival' is selected, click on date column should not switch to 'date'\n    $('#rcmdate > a').prop('rel', sort_col == 'arrival' ? 'arrival' : 'date');\n\n    this.env.sort_col = sort_col;\n    this.env.sort_order = sort_order;\n  };\n\n  this.set_list_options = function(cols, sort_col, sort_order, threads)\n  {\n    var update, post_data = {};\n\n    if (sort_col === undefined)\n      sort_col = this.env.sort_col;\n    if (!sort_order)\n      sort_order = this.env.sort_order;\n\n    if (this.env.sort_col != sort_col || this.env.sort_order != sort_order) {\n      update = 1;\n      this.set_list_sorting(sort_col, sort_order);\n    }\n\n    if (this.env.threading != threads) {\n      update = 1;\n      post_data._threads = threads;\n    }\n\n    if (cols && cols.length) {\n      // make sure new columns are added at the end of the list\n      var i, idx, name, newcols = [], oldcols = this.env.listcols;\n      for (i=0; i<oldcols.length; i++) {\n        name = oldcols[i];\n        idx = $.inArray(name, cols);\n        if (idx != -1) {\n          newcols.push(name);\n          delete cols[idx];\n        }\n      }\n      for (i=0; i<cols.length; i++)\n        if (cols[i])\n          newcols.push(cols[i]);\n\n      if (newcols.join() != oldcols.join()) {\n        update = 1;\n        post_data._cols = newcols.join(',');\n      }\n    }\n\n    if (update)\n      this.list_mailbox('', '', sort_col+'_'+sort_order, post_data);\n  };\n\n  // when user double-clicks on a row\n  this.show_message = function(id, safe, preview)\n  {\n    if (!id)\n      return;\n\n    var win, target = window,\n      url = this.params_from_uid(id, {_caps: this.browser_capabilities()});\n\n    if (preview && (win = this.get_frame_window(this.env.contentframe))) {\n      target = win;\n      url._framed = 1;\n    }\n\n    if (safe)\n      url._safe = 1;\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    if (this.env.extwin)\n      url._extwin = 1;\n\n    url = this.url(preview ? 'preview': 'show', url);\n\n    if (preview && String(target.location.href).indexOf(url) >= 0) {\n      this.show_contentframe(true);\n    }\n    else {\n      if (!preview && this.env.message_extwin && !this.env.extwin)\n        this.open_window(url, true);\n      else\n        this.location_href(url, target, true);\n\n      // mark as read and change mbox unread counter\n      if (preview && this.message_list && this.message_list.rows[id] && this.message_list.rows[id].unread && this.env.preview_pane_mark_read > 0) {\n        this.preview_read_timer = setTimeout(function() {\n          ref.set_unread_message(id, ref.env.mailbox);\n          ref.http_post('mark', {_uid: id, _flag: 'read', _mbox: ref.env.mailbox, _quiet: 1});\n        }, this.env.preview_pane_mark_read * 1000);\n      }\n    }\n  };\n\n  // update message status and unread counter after marking a message as read\n  this.set_unread_message = function(id, folder)\n  {\n    var self = this;\n\n    // find window with messages list\n    if (!self.message_list)\n      self = self.opener();\n\n    if (!self && window.parent)\n      self = parent.rcmail;\n\n    if (!self || !self.message_list)\n      return;\n\n    // this may fail in multifolder mode\n    if (self.set_message(id, 'unread', false) === false)\n      self.set_message(id + '-' + folder, 'unread', false);\n\n    if (self.env.unread_counts[folder] > 0) {\n      self.env.unread_counts[folder] -= 1;\n      self.set_unread_count(folder, self.env.unread_counts[folder], folder == 'INBOX' && !self.is_multifolder_listing());\n    }\n  };\n\n  this.show_contentframe = function(show)\n  {\n    var frame, win, name = this.env.contentframe;\n\n    if (name && (frame = this.get_frame_element(name))) {\n      if (!show && (win = this.get_frame_window(name))) {\n        if (win.location.href.indexOf(this.env.blankpage) < 0) {\n          if (win.stop)\n            win.stop();\n          else // IE\n            win.document.execCommand('Stop');\n\n          win.location.href = this.env.blankpage;\n        }\n      }\n      else if (!bw.safari && !bw.konq)\n        $(frame)[show ? 'show' : 'hide']();\n    }\n\n    if (!show && this.env.frame_lock)\n      this.set_busy(false, null, this.env.frame_lock);\n  };\n\n  this.get_frame_element = function(id)\n  {\n    var frame;\n\n    if (id && (frame = document.getElementById(id)))\n      return frame;\n  };\n\n  this.get_frame_window = function(id)\n  {\n    var frame = this.get_frame_element(id);\n\n    if (frame && frame.name && window.frames)\n      return window.frames[frame.name];\n  };\n\n  this.lock_frame = function()\n  {\n    if (!this.env.frame_lock)\n      (this.is_framed() ? parent.rcmail : this).env.frame_lock = this.set_busy(true, 'loading');\n  };\n\n  // list a specific page\n  this.list_page = function(page)\n  {\n    if (page == 'next')\n      page = this.env.current_page+1;\n    else if (page == 'last')\n      page = this.env.pagecount;\n    else if (page == 'prev' && this.env.current_page > 1)\n      page = this.env.current_page-1;\n    else if (page == 'first' && this.env.current_page > 1)\n      page = 1;\n\n    if (page > 0 && page <= this.env.pagecount) {\n      this.env.current_page = page;\n\n      if (this.task == 'addressbook' || this.contact_list)\n        this.list_contacts(this.env.source, this.env.group, page);\n      else if (this.task == 'mail')\n        this.list_mailbox(this.env.mailbox, page);\n    }\n  };\n\n  // sends request to check for recent messages\n  this.checkmail = function()\n  {\n    var lock = this.set_busy(true, 'checkingmail'),\n      params = this.check_recent_params();\n\n    this.http_post('check-recent', params, lock);\n  };\n\n  // list messages of a specific mailbox using filter\n  this.filter_mailbox = function(filter)\n  {\n    if (this.filter_disabled)\n      return;\n\n    var lock = this.set_busy(true, 'searching');\n\n    this.clear_message_list();\n\n    // reset vars\n    this.env.current_page = 1;\n    this.env.search_filter = filter;\n    this.http_request('search', this.search_params(false, filter), lock);\n  };\n\n  // reload the current message listing\n  this.refresh_list = function()\n  {\n    this.list_mailbox(this.env.mailbox, this.env.current_page || 1, null, { _clear:1 }, true);\n    if (this.message_list)\n      this.message_list.clear_selection();\n  };\n\n  // list messages of a specific mailbox\n  this.list_mailbox = function(mbox, page, sort, url, update_only)\n  {\n    var win, target = window;\n\n    if (typeof url != 'object')\n      url = {};\n\n    if (!mbox)\n      mbox = this.env.mailbox ? this.env.mailbox : 'INBOX';\n\n    // add sort to url if set\n    if (sort)\n      url._sort = sort;\n\n    // folder change, reset page, search scope, etc.\n    if (this.env.mailbox != mbox) {\n      page = 1;\n      this.env.current_page = page;\n      this.env.search_scope = 'base';\n      this.select_all_mode = false;\n      this.reset_search_filter();\n    }\n    // also send search request to get the right messages\n    else if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    if (!update_only) {\n      // unselect selected messages and clear the list and message data\n      this.clear_message_list();\n\n      if (mbox != this.env.mailbox || (mbox == this.env.mailbox && !page && !sort))\n        url._refresh = 1;\n\n      this.select_folder(mbox, '', true);\n      this.unmark_folder(mbox, 'recent', '', true);\n      this.env.mailbox = mbox;\n    }\n\n    // load message list remotely\n    if (this.gui_objects.messagelist) {\n      this.list_mailbox_remote(mbox, page, url);\n      return;\n    }\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      target = win;\n      url._framed = 1;\n    }\n\n    if (this.env.uid)\n      url._uid = this.env.uid;\n\n    // load message list to target frame/window\n    if (mbox) {\n      this.set_busy(true, 'loading');\n      url._mbox = mbox;\n      if (page)\n        url._page = page;\n      this.location_href(url, target);\n    }\n  };\n\n  this.clear_message_list = function()\n  {\n    this.env.messages = {};\n\n    this.show_contentframe(false);\n    if (this.message_list)\n      this.message_list.clear(true);\n  };\n\n  // send remote request to load message list\n  this.list_mailbox_remote = function(mbox, page, url)\n  {\n    var lock = this.set_busy(true, 'loading');\n\n    if (typeof url != 'object')\n      url = {};\n    url._mbox = mbox;\n    if (page)\n      url._page = page;\n\n    this.http_request('list', url, lock);\n    this.update_state({ _mbox: mbox, _page: (page && page > 1 ? page : null) });\n  };\n\n  // removes messages that doesn't exists from list selection array\n  this.update_selection = function()\n  {\n    var list = this.message_list,\n      selected = list.selection,\n      rows = list.rows,\n      i, selection = [];\n\n    for (i in selected)\n      if (rows[selected[i]])\n        selection.push(selected[i]);\n\n    list.selection = selection;\n\n    // reset preview frame, if currently previewed message is not selected (has been removed)\n    try {\n      var win = this.get_frame_window(this.env.contentframe),\n        id = win.rcmail.env.uid;\n\n      if (id && !list.in_selection(id))\n        this.show_contentframe(false);\n    }\n    catch (e) {};\n  };\n\n  // expand all threads with unread children\n  this.expand_unread = function()\n  {\n    var r, tbody = this.message_list.tbody,\n      new_row = tbody.firstChild;\n\n    while (new_row) {\n      if (new_row.nodeType == 1 && (r = this.message_list.rows[new_row.uid]) && r.unread_children) {\n        this.message_list.expand_all(r);\n        this.set_unread_children(r.uid);\n      }\n\n      new_row = new_row.nextSibling;\n    }\n\n    return false;\n  };\n\n  // thread expanding/collapsing handler\n  this.expand_message_row = function(e, uid)\n  {\n    var row = this.message_list.rows[uid];\n\n    // handle unread_children mark\n    row.expanded = !row.expanded;\n    this.set_unread_children(uid);\n    row.expanded = !row.expanded;\n\n    this.message_list.expand_row(e, uid);\n  };\n\n  // message list expanding\n  this.expand_threads = function()\n  {\n    if (!this.env.threading || !this.env.autoexpand_threads || !this.message_list)\n      return;\n\n    switch (this.env.autoexpand_threads) {\n      case 2: this.expand_unread(); break;\n      case 1: this.message_list.expand_all(); break;\n    }\n  };\n\n  // Initializes threads indicators/expanders after list update\n  this.init_threads = function(roots, mbox)\n  {\n    // #1487752\n    if (mbox && mbox != this.env.mailbox)\n      return false;\n\n    for (var n=0, len=roots.length; n<len; n++)\n      this.add_tree_icons(roots[n]);\n    this.expand_threads();\n  };\n\n  // adds threads tree icons to the list (or specified thread)\n  this.add_tree_icons = function(root)\n  {\n    var i, l, r, n, len, pos, tmp = [], uid = [],\n      row, rows = this.message_list.rows;\n\n    if (root)\n      row = rows[root] ? rows[root].obj : null;\n    else\n      row = this.message_list.tbody.firstChild;\n\n    while (row) {\n      if (row.nodeType == 1 && (r = rows[row.uid])) {\n        if (r.depth) {\n          for (i=tmp.length-1; i>=0; i--) {\n            len = tmp[i].length;\n            if (len > r.depth) {\n              pos = len - r.depth;\n              if (!(tmp[i][pos] & 2))\n                tmp[i][pos] = tmp[i][pos] ? tmp[i][pos]+2 : 2;\n            }\n            else if (len == r.depth) {\n              if (!(tmp[i][0] & 2))\n                tmp[i][0] += 2;\n            }\n            if (r.depth > len)\n              break;\n          }\n\n          tmp.push(new Array(r.depth));\n          tmp[tmp.length-1][0] = 1;\n          uid.push(r.uid);\n        }\n        else {\n          if (tmp.length) {\n            for (i in tmp) {\n              this.set_tree_icons(uid[i], tmp[i]);\n            }\n            tmp = [];\n            uid = [];\n          }\n          if (root && row != rows[root].obj)\n            break;\n        }\n      }\n      row = row.nextSibling;\n    }\n\n    if (tmp.length) {\n      for (i in tmp) {\n        this.set_tree_icons(uid[i], tmp[i]);\n      }\n    }\n  };\n\n  // adds tree icons to specified message row\n  this.set_tree_icons = function(uid, tree)\n  {\n    var i, divs = [], html = '', len = tree.length;\n\n    for (i=0; i<len; i++) {\n      if (tree[i] > 2)\n        divs.push({'class': 'l3', width: 15});\n      else if (tree[i] > 1)\n        divs.push({'class': 'l2', width: 15});\n      else if (tree[i] > 0)\n        divs.push({'class': 'l1', width: 15});\n      // separator div\n      else if (divs.length && !divs[divs.length-1]['class'])\n        divs[divs.length-1].width += 15;\n      else\n        divs.push({'class': null, width: 15});\n    }\n\n    for (i=divs.length-1; i>=0; i--) {\n      if (divs[i]['class'])\n        html += '<div class=\"tree '+divs[i]['class']+'\" />';\n      else\n        html += '<div style=\"width:'+divs[i].width+'px\" />';\n    }\n\n    if (html)\n      $('#rcmtab'+this.html_identifier(uid, true)).html(html);\n  };\n\n  // update parent in a thread\n  this.update_thread_root = function(uid, flag)\n  {\n    if (!this.env.threading)\n      return;\n\n    var root = this.message_list.find_root(uid);\n\n    if (uid == root)\n      return;\n\n    var p = this.message_list.rows[root];\n\n    if (flag == 'read' && p.unread_children) {\n      p.unread_children--;\n    }\n    else if (flag == 'unread' && p.has_children) {\n      // unread_children may be undefined\n      p.unread_children = p.unread_children ? p.unread_children + 1 : 1;\n    }\n    else {\n      return;\n    }\n\n    this.set_message_icon(root);\n    this.set_unread_children(root);\n  };\n\n  // update thread indicators for all messages in a thread below the specified message\n  // return number of removed/added root level messages\n  this.update_thread = function (uid)\n  {\n    if (!this.env.threading)\n      return 0;\n\n    var r, parent, count = 0,\n      rows = this.message_list.rows,\n      row = rows[uid],\n      depth = rows[uid].depth,\n      roots = [];\n\n    if (!row.depth) // root message: decrease roots count\n      count--;\n    else if (row.unread) {\n      // update unread_children for thread root\n      parent = this.message_list.find_root(uid);\n      rows[parent].unread_children--;\n      this.set_unread_children(parent);\n    }\n\n    parent = row.parent_uid;\n\n    // childrens\n    row = row.obj.nextSibling;\n    while (row) {\n      if (row.nodeType == 1 && (r = rows[row.uid])) {\n        if (!r.depth || r.depth <= depth)\n          break;\n\n        r.depth--; // move left\n        // reset width and clear the content of a tab, icons will be added later\n        $('#rcmtab'+r.id).width(r.depth * 15).html('');\n        if (!r.depth) { // a new root\n          count++; // increase roots count\n          r.parent_uid = 0;\n          if (r.has_children) {\n            // replace 'leaf' with 'collapsed'\n            $('#'+r.id+' .leaf:first')\n              .attr('id', 'rcmexpando' + r.id)\n              .attr('class', (r.obj.style.display != 'none' ? 'expanded' : 'collapsed'))\n              .mousedown({uid: r.uid}, function(e) {\n                return ref.expand_message_row(e, e.data.uid);\n              });\n\n            r.unread_children = 0;\n            roots.push(r);\n          }\n          // show if it was hidden\n          if (r.obj.style.display == 'none')\n            $(r.obj).show();\n        }\n        else {\n          if (r.depth == depth)\n            r.parent_uid = parent;\n          if (r.unread && roots.length)\n            roots[roots.length-1].unread_children++;\n        }\n      }\n      row = row.nextSibling;\n    }\n\n    // update unread_children for roots\n    for (r=0; r<roots.length; r++)\n      this.set_unread_children(roots[r].uid);\n\n    return count;\n  };\n\n  this.delete_excessive_thread_rows = function()\n  {\n    var rows = this.message_list.rows,\n      tbody = this.message_list.tbody,\n      row = tbody.firstChild,\n      cnt = this.env.pagesize + 1;\n\n    while (row) {\n      if (row.nodeType == 1 && (r = rows[row.uid])) {\n        if (!r.depth && cnt)\n          cnt--;\n\n        if (!cnt)\n          this.message_list.remove_row(row.uid);\n      }\n      row = row.nextSibling;\n    }\n  };\n\n  // set message icon\n  this.set_message_icon = function(uid)\n  {\n    var css_class, label = '',\n      row = this.message_list.rows[uid];\n\n    if (!row)\n      return false;\n\n    if (row.icon) {\n      css_class = 'msgicon';\n      if (row.deleted) {\n        css_class += ' deleted';\n        label += this.get_label('deleted') + ' ';\n      }\n      else if (row.unread) {\n        css_class += ' unread';\n        label += this.get_label('unread') + ' ';\n      }\n      else if (row.unread_children)\n        css_class += ' unreadchildren';\n      if (row.msgicon == row.icon) {\n        if (row.replied) {\n          css_class += ' replied';\n          label += this.get_label('replied') + ' ';\n        }\n        if (row.forwarded) {\n          css_class += ' forwarded';\n          label += this.get_label('forwarded') + ' ';\n        }\n        css_class += ' status';\n      }\n\n      $(row.icon).attr('class', css_class).attr('title', label);\n    }\n\n    if (row.msgicon && row.msgicon != row.icon) {\n      label = '';\n      css_class = 'msgicon';\n      if (!row.unread && row.unread_children) {\n        css_class += ' unreadchildren';\n      }\n      if (row.replied) {\n        css_class += ' replied';\n        label += this.get_label('replied') + ' ';\n      }\n      if (row.forwarded) {\n        css_class += ' forwarded';\n        label += this.get_label('forwarded') + ' ';\n      }\n\n      $(row.msgicon).attr('class', css_class).attr('title', label);\n    }\n\n    if (row.flagicon) {\n      css_class = (row.flagged ? 'flagged' : 'unflagged');\n      label = this.get_label(css_class);\n      $(row.flagicon).attr('class', css_class)\n        .attr('aria-label', label)\n        .attr('title', label);\n    }\n  };\n\n  // set message status\n  this.set_message_status = function(uid, flag, status)\n  {\n    var row = this.message_list.rows[uid];\n\n    if (!row)\n      return false;\n\n    if (flag == 'unread') {\n      if (row.unread != status)\n        this.update_thread_root(uid, status ? 'unread' : 'read');\n    }\n\n    if ($.inArray(flag, ['unread', 'deleted', 'replied', 'forwarded', 'flagged']) > -1)\n      row[flag] = status;\n  };\n\n  // set message row status, class and icon\n  this.set_message = function(uid, flag, status)\n  {\n    var row = this.message_list && this.message_list.rows[uid];\n\n    if (!row)\n      return false;\n\n    if (flag)\n      this.set_message_status(uid, flag, status);\n\n    if ($.inArray(flag, ['unread', 'deleted', 'flagged']) > -1)\n      $(row.obj)[row[flag] ? 'addClass' : 'removeClass'](flag);\n\n    this.set_unread_children(uid);\n    this.set_message_icon(uid);\n  };\n\n  // sets unroot (unread_children) class of parent row\n  this.set_unread_children = function(uid)\n  {\n    var row = this.message_list.rows[uid];\n\n    if (row.parent_uid)\n      return;\n\n    if (!row.unread && row.unread_children && !row.expanded)\n      $(row.obj).addClass('unroot');\n    else\n      $(row.obj).removeClass('unroot');\n  };\n\n  // copy selected messages to the specified mailbox\n  this.copy_messages = function(mbox, event)\n  {\n    if (mbox && typeof mbox === 'object')\n      mbox = mbox.id;\n    else if (!mbox)\n      return this.folder_selector(event, function(folder) { ref.command('copy', folder); });\n\n    // exit if current or no mailbox specified\n    if (!mbox || mbox == this.env.mailbox)\n      return;\n\n    var post_data = this.selection_post_data({_target_mbox: mbox});\n\n    // exit if selection is empty\n    if (!post_data._uid)\n      return;\n\n    // send request to server\n    this.http_post('copy', post_data, this.display_message(this.get_label('copyingmessage'), 'loading'));\n  };\n\n  // move selected messages to the specified mailbox\n  this.move_messages = function(mbox, event)\n  {\n    if (mbox && typeof mbox === 'object')\n      mbox = mbox.id;\n    else if (!mbox)\n      return this.folder_selector(event, function(folder) { ref.command('move', folder); });\n\n    // exit if current or no mailbox specified\n    if (!mbox || (mbox == this.env.mailbox && !this.is_multifolder_listing()))\n      return;\n\n    var lock = false, post_data = this.selection_post_data({_target_mbox: mbox});\n\n    // exit if selection is empty\n    if (!post_data._uid)\n      return;\n\n    // show wait message\n    if (this.env.action == 'show')\n      lock = this.set_busy(true, 'movingmessage');\n    else\n      this.show_contentframe(false);\n\n    // Hide message command buttons until a message is selected\n    this.enable_command(this.env.message_commands, false);\n\n    this._with_selected_messages('move', post_data, lock);\n  };\n\n  // delete selected messages from the current mailbox\n  this.delete_messages = function(event)\n  {\n    var list = this.message_list, trash = this.env.trash_mailbox;\n\n    // if config is set to flag for deletion\n    if (this.env.flag_for_deletion) {\n      this.mark_message('delete');\n      return false;\n    }\n    // if there isn't a defined trash mailbox or we are in it\n    else if (!trash || this.env.mailbox == trash)\n      this.permanently_remove_messages();\n    // we're in Junk folder and delete_junk is enabled\n    else if (this.env.delete_junk && this.env.junk_mailbox && this.env.mailbox == this.env.junk_mailbox)\n      this.permanently_remove_messages();\n    // if there is a trash mailbox defined and we're not currently in it\n    else {\n      // if shift was pressed delete it immediately\n      if ((list && list.modkey == SHIFT_KEY) || (event && rcube_event.get_modifier(event) == SHIFT_KEY)) {\n        if (confirm(this.get_label('deletemessagesconfirm')))\n          this.permanently_remove_messages();\n      }\n      else\n        this.move_messages(trash);\n    }\n\n    return true;\n  };\n\n  // delete the selected messages permanently\n  this.permanently_remove_messages = function()\n  {\n    var post_data = this.selection_post_data();\n\n    // exit if selection is empty\n    if (!post_data._uid)\n      return;\n\n    this.show_contentframe(false);\n    this._with_selected_messages('delete', post_data);\n  };\n\n  // Send a specific move/delete request with UIDs of all selected messages\n  // @private\n  this._with_selected_messages = function(action, post_data, lock)\n  {\n    var count = 0, msg,\n      remove = (action == 'delete' || !this.is_multifolder_listing());\n\n    // update the list (remove rows, clear selection)\n    if (this.message_list) {\n      var n, id, root, roots = [],\n        selection = this.message_list.get_selection();\n\n      for (n=0, len=selection.length; n<len; n++) {\n        id = selection[n];\n\n        if (this.env.threading) {\n          count += this.update_thread(id);\n          root = this.message_list.find_root(id);\n          if (root != id && $.inArray(root, roots) < 0) {\n            roots.push(root);\n          }\n        }\n        if (remove)\n          this.message_list.remove_row(id, (this.env.display_next && n == selection.length-1));\n      }\n      // make sure there are no selected rows\n      if (!this.env.display_next && remove)\n        this.message_list.clear_selection();\n      // update thread tree icons\n      for (n=0, len=roots.length; n<len; n++) {\n        this.add_tree_icons(roots[n]);\n      }\n    }\n\n    if (count < 0)\n      post_data._count = (count*-1);\n    // remove threads from the end of the list\n    else if (count > 0 && remove)\n      this.delete_excessive_thread_rows();\n\n    if (!remove)\n      post_data._refresh = 1;\n\n    if (!lock) {\n      msg = action == 'move' ? 'movingmessage' : 'deletingmessage';\n      lock = this.display_message(this.get_label(msg), 'loading');\n    }\n\n    // send request to server\n    this.http_post(action, post_data, lock);\n  };\n\n  // build post data for message delete/move/copy/flag requests\n  this.selection_post_data = function(data)\n  {\n    if (typeof(data) != 'object')\n      data = {};\n\n    data._mbox = this.env.mailbox;\n\n    if (!data._uid) {\n      var uids = this.env.uid ? [this.env.uid] : this.message_list.get_selection();\n      data._uid = this.uids_to_list(uids);\n    }\n\n    if (this.env.action)\n      data._from = this.env.action;\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      data._search = this.env.search_request;\n\n    if (this.env.display_next && this.env.next_uid)\n      data._next_uid = this.env.next_uid;\n\n    return data;\n  };\n\n  // set a specific flag to one or more messages\n  this.mark_message = function(flag, uid)\n  {\n    var a_uids = [], r_uids = [], len, n, id,\n      list = this.message_list;\n\n    if (uid)\n      a_uids[0] = uid;\n    else if (this.env.uid)\n      a_uids[0] = this.env.uid;\n    else if (list)\n      a_uids = list.get_selection();\n\n    if (!list)\n      r_uids = a_uids;\n    else {\n      list.focus();\n      for (n=0, len=a_uids.length; n<len; n++) {\n        id = a_uids[n];\n        if ((flag == 'read' && list.rows[id].unread)\n            || (flag == 'unread' && !list.rows[id].unread)\n            || (flag == 'delete' && !list.rows[id].deleted)\n            || (flag == 'undelete' && list.rows[id].deleted)\n            || (flag == 'flagged' && !list.rows[id].flagged)\n            || (flag == 'unflagged' && list.rows[id].flagged))\n        {\n          r_uids.push(id);\n        }\n      }\n    }\n\n    // nothing to do\n    if (!r_uids.length && !this.select_all_mode)\n      return;\n\n    switch (flag) {\n        case 'read':\n        case 'unread':\n          this.toggle_read_status(flag, r_uids);\n          break;\n        case 'delete':\n        case 'undelete':\n          this.toggle_delete_status(r_uids);\n          break;\n        case 'flagged':\n        case 'unflagged':\n          this.toggle_flagged_status(flag, a_uids);\n          break;\n    }\n  };\n\n  // set class to read/unread\n  this.toggle_read_status = function(flag, a_uids)\n  {\n    var i, len = a_uids.length,\n      post_data = this.selection_post_data({_uid: this.uids_to_list(a_uids), _flag: flag}),\n      lock = this.display_message(this.get_label('markingmessage'), 'loading');\n\n    // mark all message rows as read/unread\n    for (i=0; i<len; i++)\n      this.set_message(a_uids[i], 'unread', (flag == 'unread' ? true : false));\n\n    this.http_post('mark', post_data, lock);\n  };\n\n  // set image to flagged or unflagged\n  this.toggle_flagged_status = function(flag, a_uids)\n  {\n    var i, len = a_uids.length,\n      post_data = this.selection_post_data({_uid: this.uids_to_list(a_uids), _flag: flag}),\n      lock = this.display_message(this.get_label('markingmessage'), 'loading');\n\n    // mark all message rows as flagged/unflagged\n    for (i=0; i<len; i++)\n      this.set_message(a_uids[i], 'flagged', (flag == 'flagged' ? true : false));\n\n    this.http_post('mark', post_data, lock);\n  };\n\n  // mark all message rows as deleted/undeleted\n  this.toggle_delete_status = function(a_uids)\n  {\n    var len = a_uids.length,\n      i, uid, all_deleted = true,\n      rows = this.message_list ? this.message_list.rows : {};\n\n    if (len == 1) {\n      if (!this.message_list || (rows[a_uids[0]] && !rows[a_uids[0]].deleted))\n        this.flag_as_deleted(a_uids);\n      else\n        this.flag_as_undeleted(a_uids);\n\n      return true;\n    }\n\n    for (i=0; i<len; i++) {\n      uid = a_uids[i];\n      if (rows[uid] && !rows[uid].deleted) {\n        all_deleted = false;\n        break;\n      }\n    }\n\n    if (all_deleted)\n      this.flag_as_undeleted(a_uids);\n    else\n      this.flag_as_deleted(a_uids);\n\n    return true;\n  };\n\n  this.flag_as_undeleted = function(a_uids)\n  {\n    var i, len = a_uids.length,\n      post_data = this.selection_post_data({_uid: this.uids_to_list(a_uids), _flag: 'undelete'}),\n      lock = this.display_message(this.get_label('markingmessage'), 'loading');\n\n    for (i=0; i<len; i++)\n      this.set_message(a_uids[i], 'deleted', false);\n\n    this.http_post('mark', post_data, lock);\n  };\n\n  this.flag_as_deleted = function(a_uids)\n  {\n    var r_uids = [],\n      post_data = this.selection_post_data({_uid: this.uids_to_list(a_uids), _flag: 'delete'}),\n      lock = this.display_message(this.get_label('markingmessage'), 'loading'),\n      rows = this.message_list ? this.message_list.rows : {},\n      count = 0;\n\n    for (var i=0, len=a_uids.length; i<len; i++) {\n      uid = a_uids[i];\n      if (rows[uid]) {\n        if (rows[uid].unread)\n          r_uids[r_uids.length] = uid;\n\n        if (this.env.skip_deleted) {\n          count += this.update_thread(uid);\n          this.message_list.remove_row(uid, (this.env.display_next && i == this.message_list.selection.length-1));\n        }\n        else\n          this.set_message(uid, 'deleted', true);\n      }\n    }\n\n    // make sure there are no selected rows\n    if (this.env.skip_deleted && this.message_list) {\n      if (!this.env.display_next)\n        this.message_list.clear_selection();\n      if (count < 0)\n        post_data._count = (count*-1);\n      else if (count > 0)\n        // remove threads from the end of the list\n        this.delete_excessive_thread_rows();\n    }\n\n    // set of messages to mark as seen\n    if (r_uids.length)\n      post_data._ruid = this.uids_to_list(r_uids);\n\n    if (this.env.skip_deleted && this.env.display_next && this.env.next_uid)\n      post_data._next_uid = this.env.next_uid;\n\n    this.http_post('mark', post_data, lock);\n  };\n\n  // flag as read without mark request (called from backend)\n  // argument should be a coma-separated list of uids\n  this.flag_deleted_as_read = function(uids)\n  {\n    var uid, i, len,\n      rows = this.message_list ? this.message_list.rows : {};\n\n    if (typeof uids == 'string')\n      uids = uids.split(',');\n\n    for (i=0, len=uids.length; i<len; i++) {\n      uid = uids[i];\n      if (rows[uid])\n        this.set_message(uid, 'unread', false);\n    }\n  };\n\n  // Converts array of message UIDs to comma-separated list for use in URL\n  // with select_all mode checking\n  this.uids_to_list = function(uids)\n  {\n    return this.select_all_mode ? '*' : (uids.length <= 1 ? uids.join(',') : uids);\n  };\n\n  // Sets title of the delete button\n  this.set_button_titles = function()\n  {\n    var label = 'deletemessage';\n\n    if (!this.env.flag_for_deletion\n      && this.env.trash_mailbox && this.env.mailbox != this.env.trash_mailbox\n      && (!this.env.delete_junk || !this.env.junk_mailbox || this.env.mailbox != this.env.junk_mailbox)\n    )\n      label = 'movemessagetotrash';\n\n    this.set_alttext('delete', label);\n  };\n\n  // Initialize input element for list page jump\n  this.init_pagejumper = function(element)\n  {\n    $(element).addClass('rcpagejumper')\n      .on('focus', function(e) {\n        // create and display popup with page selection\n        var i, html = '';\n\n        for (i = 1; i <= ref.env.pagecount; i++)\n          html += '<li>' + i + '</li>';\n\n        html = '<ul class=\"toolbarmenu\">' + html + '</ul>';\n\n        if (!ref.pagejump) {\n          ref.pagejump = $('<div id=\"pagejump-selector\" class=\"popupmenu\"></div>')\n            .appendTo(document.body)\n            .on('click', 'li', function() {\n              if (!ref.busy)\n                $(element).val($(this).text()).change();\n            });\n        }\n\n        if (ref.pagejump.data('count') != i)\n          ref.pagejump.html(html);\n\n        ref.pagejump.attr('rel', '#' + this.id).data('count', i);\n\n        // display page selector\n        ref.show_menu('pagejump-selector', true, e);\n        $(this).keydown();\n      })\n      // keyboard navigation\n      .on('keydown keyup click', function(e) {\n        var current, selector = $('#pagejump-selector'),\n          ul = $('ul', selector),\n          list = $('li', ul),\n          height = ul.height(),\n          p = parseInt(this.value);\n\n        if (e.which != 27 && e.which != 9 && e.which != 13 && !selector.is(':visible'))\n          return ref.show_menu('pagejump-selector', true, e);\n\n        if (e.type == 'keydown') {\n          // arrow-down\n          if (e.which == 40) {\n            if (list.length > p)\n              this.value = (p += 1);\n          }\n          // arrow-up\n          else if (e.which == 38) {\n            if (p > 1 && list.length > p - 1)\n              this.value = (p -= 1);\n          }\n          // enter\n          else if (e.which == 13) {\n            return $(this).change();\n          }\n          // esc, tab\n          else if (e.which == 27 || e.which == 9) {\n            return $(element).val(ref.env.current_page);\n          }\n        }\n\n        $('li.selected', ul).removeClass('selected');\n\n        if ((current = $(list[p - 1])).length) {\n          current.addClass('selected');\n          $('#pagejump-selector').scrollTop(((ul.height() / list.length) * (p - 1)) - selector.height() / 2);\n        }\n      })\n      .on('change', function(e) {\n        // go to specified page\n        var p = parseInt(this.value);\n        if (p && p != ref.env.current_page && !ref.busy) {\n          ref.hide_menu('pagejump-selector');\n          ref.list_page(p);\n        }\n      });\n  };\n\n  // Update page-jumper state on list updates\n  this.update_pagejumper = function()\n  {\n    $('input.rcpagejumper').val(this.env.current_page).prop('disabled', this.env.pagecount < 2);\n  };\n\n  // check for mailvelope API\n  this.check_mailvelope = function(action)\n  {\n    if (typeof window.mailvelope !== 'undefined') {\n      this.mailvelope_load(action);\n    }\n    else {\n      $(window).on('mailvelope', function() {\n        ref.mailvelope_load(action);\n      });\n    }\n  };\n\n  // Load Mailvelope functionality (and initialize keyring if needed)\n  this.mailvelope_load = function(action)\n  {\n    if (this.env.browser_capabilities)\n      this.env.browser_capabilities['pgpmime'] = 1;\n\n    var keyring = this.env.user_id;\n\n    mailvelope.getKeyring(keyring).then(function(kr) {\n      ref.mailvelope_keyring = kr;\n      ref.mailvelope_init(action, kr);\n    }, function(err) {\n      // attempt to create a new keyring for this app/user\n      mailvelope.createKeyring(keyring).then(function(kr) {\n        ref.mailvelope_keyring = kr;\n        ref.mailvelope_init(action, kr);\n      }, function(err) {\n        console.error(err);\n      });\n    });\n  };\n\n  // Initializes Mailvelope editor or display container\n  this.mailvelope_init = function(action, keyring)\n  {\n    if (!window.mailvelope)\n      return;\n\n    if (action == 'show' || action == 'preview' || action == 'print') {\n      // decrypt text body\n      if (this.env.is_pgp_content) {\n        var data = $(this.env.is_pgp_content).text();\n        ref.mailvelope_display_container(this.env.is_pgp_content, data, keyring);\n      }\n      // load pgp/mime message and pass it to the mailvelope display container\n      else if (this.env.pgp_mime_part) {\n        var msgid = this.display_message(this.get_label('loadingdata'), 'loading'),\n          selector = this.env.pgp_mime_container;\n\n        $.ajax({\n          type: 'GET',\n          url: this.url('get', { '_mbox': this.env.mailbox, '_uid': this.env.uid, '_part': this.env.pgp_mime_part }),\n          error: function(o, status, err) {\n            ref.http_error(o, status, err, msgid);\n          },\n          success: function(data) {\n            ref.mailvelope_display_container(selector, data, keyring, msgid);\n          }\n        });\n      }\n    }\n    else if (action == 'compose') {\n      this.env.compose_commands.push('compose-encrypted');\n\n      var is_html = $('input[name=\"_is_html\"]').val() > 0;\n\n      if (this.env.pgp_mime_message) {\n        // fetch PGP/Mime part and open load into Mailvelope editor\n        var lock = this.set_busy(true, this.get_label('loadingdata'));\n\n        $.ajax({\n          type: 'GET',\n          url: this.url('get', this.env.pgp_mime_message),\n          error: function(o, status, err) {\n            ref.http_error(o, status, err, lock);\n            ref.enable_command('compose-encrypted', !is_html);\n          },\n          success: function(data) {\n            ref.set_busy(false, null, lock);\n\n            if (is_html) {\n              ref.command('toggle-editor', {html: false, noconvert: true});\n              $('#' + ref.env.composebody).val('');\n            }\n\n            ref.compose_encrypted({ quotedMail: data });\n            ref.enable_command('compose-encrypted', true);\n          }\n        });\n      }\n      else {\n        // enable encrypted compose toggle\n        this.enable_command('compose-encrypted', !is_html);\n      }\n    }\n  };\n\n  // handler for the 'compose-encrypted' command\n  this.compose_encrypted = function(props)\n  {\n    var options, container = $('#' + this.env.composebody).parent();\n\n    // remove Mailvelope editor if active\n    if (ref.mailvelope_editor) {\n      ref.mailvelope_editor = null;\n      ref.compose_skip_unsavedcheck = false;\n      ref.set_button('compose-encrypted', 'act');\n\n      container.removeClass('mailvelope')\n        .find('iframe:not([aria-hidden=true])').remove();\n      $('#' + ref.env.composebody).show();\n      $(\"[name='_pgpmime']\").remove();\n\n      // disable commands that operate on the compose body\n      ref.enable_command('spellcheck', 'insert-sig', 'toggle-editor', 'insert-response', 'save-response', true);\n      ref.triggerEvent('compose-encrypted', { active:false });\n    }\n    // embed Mailvelope editor container\n    else {\n      if (this.spellcheck_state())\n        this.editor.spellcheck_stop();\n\n      if (props.quotedMail) {\n        options = { quotedMail: props.quotedMail, quotedMailIndent: false };\n      }\n      else {\n        options = { predefinedText: $('#' + this.env.composebody).val() };\n      }\n\n      if (this.env.compose_mode == 'reply') {\n        options.quotedMailIndent = true;\n        options.quotedMailHeader = this.env.compose_reply_header;\n      }\n\n      mailvelope.createEditorContainer('#' + container.attr('id'), ref.mailvelope_keyring, options).then(function(editor) {\n        ref.mailvelope_editor = editor;\n        ref.compose_skip_unsavedcheck = true;\n        ref.set_button('compose-encrypted', 'sel');\n\n        container.addClass('mailvelope');\n        $('#' + ref.env.composebody).hide();\n\n        // disable commands that operate on the compose body\n        ref.enable_command('spellcheck', 'insert-sig', 'toggle-editor', 'insert-response', 'save-response', false);\n        ref.triggerEvent('compose-encrypted', { active:true });\n\n        // notify user about loosing attachments\n        if (ref.env.attachments && !$.isEmptyObject(ref.env.attachments)) {\n          alert(ref.get_label('encryptnoattachments'));\n\n          $.each(ref.env.attachments, function(name, attach) {\n            ref.remove_from_attachment_list(name);\n          });\n        }\n      }, function(err) {\n        console.error(err);\n        console.log(options);\n      });\n    }\n  };\n\n  // callback to replace the message body with the full armored\n  this.mailvelope_submit_messageform = function(draft, saveonly)\n  {\n    // get recipients\n    var recipients = [];\n    $.each(['to', 'cc', 'bcc'], function(i,field) {\n      var pos, rcpt, val = $.trim($('[name=\"_' + field + '\"]').val());\n      while (val.length && rcube_check_email(val, true)) {\n        rcpt = RegExp.$2;\n        recipients.push(rcpt);\n        val = val.substr(val.indexOf(rcpt) + rcpt.length + 1).replace(/^\\s*,\\s*/, '');\n      }\n    });\n\n    // check if we have keys for all recipients\n    var isvalid = recipients.length > 0;\n    ref.mailvelope_keyring.validKeyForAddress(recipients).then(function(status) {\n      var missing_keys = [];\n      $.each(status, function(k,v) {\n        if (v === false) {\n          isvalid = false;\n          missing_keys.push(k);\n        }\n      });\n\n      // list recipients with missing keys\n      if (!isvalid && missing_keys.length) {\n        // load publickey.js\n        if (!$('script#publickeyjs').length) {\n          $('<script>')\n            .attr('id', 'publickeyjs')\n            .attr('src', ref.assets_path('program/js/publickey.js'))\n            .appendTo(document.body);\n        }\n\n        // display dialog with missing keys\n        ref.show_popup_dialog(\n          ref.get_label('nopubkeyfor').replace('$email', missing_keys.join(', ')) +\n          '<p>' + ref.get_label('searchpubkeyservers') + '</p>',\n          ref.get_label('encryptedsendialog'),\n          [{\n            text: ref.get_label('search'),\n            'class': 'mainaction',\n            click: function() {\n              var $dialog = $(this);\n              ref.mailvelope_search_pubkeys(missing_keys, function() {\n                $dialog.dialog('close')\n              });\n            }\n          },\n          {\n            text: ref.get_label('cancel'),\n            click: function(){\n              $(this).dialog('close');\n            }\n          }]\n        );\n        return false;\n      }\n\n      if (!isvalid) {\n        if (!recipients.length) {\n          alert(ref.get_label('norecipientwarning'));\n          $(\"[name='_to']\").focus();\n        }\n        return false;\n      }\n\n      // add sender identity to recipients to be able to decrypt our very own message\n      var senders = [], selected_sender = ref.env.identities[$(\"[name='_from'] option:selected\").val()];\n      $.each(ref.env.identities, function(k, sender) {\n        senders.push(sender.email);\n      });\n\n      ref.mailvelope_keyring.validKeyForAddress(senders).then(function(status) {\n        valid_sender = null;\n        $.each(status, function(k,v) {\n          if (v !== false) {\n            valid_sender = k;\n            if (valid_sender == selected_sender) {\n              return false;  // break\n            }\n          }\n        });\n\n        if (!valid_sender) {\n          if (!confirm(ref.get_label('nopubkeyforsender'))) {\n            return false;\n          }\n        }\n\n        recipients.push(valid_sender);\n\n        ref.mailvelope_editor.encrypt(recipients).then(function(armored) {\n          // all checks passed, send message\n          var form = ref.gui_objects.messageform,\n            hidden = $(\"[name='_pgpmime']\", form),\n            msgid = ref.set_busy(true, draft || saveonly ? 'savingmessage' : 'sendingmessage')\n\n          form.target = 'savetarget';\n          form._draft.value = draft ? '1' : '';\n          form.action = ref.add_url(form.action, '_unlock', msgid);\n          form.action = ref.add_url(form.action, '_framed', 1);\n\n          if (saveonly) {\n            form.action = ref.add_url(form.action, '_saveonly', 1);\n          }\n\n          // send pgp conent via hidden field\n          if (!hidden.length) {\n            hidden = $('<input type=\"hidden\" name=\"_pgpmime\">').appendTo(form);\n          }\n          hidden.val(armored);\n\n          form.submit();\n\n        }, function(err) {\n          console.log(err);\n        });  // mailvelope_editor.encrypt()\n\n      }, function(err) {\n        console.error(err);\n      });  // mailvelope_keyring.validKeyForAddress(senders)\n\n    }, function(err) {\n      console.error(err);\n    });  // mailvelope_keyring.validKeyForAddress(recipients)\n\n    return false;\n  };\n\n  // wrapper for the mailvelope.createDisplayContainer API call\n  this.mailvelope_display_container = function(selector, data, keyring, msgid)\n  {\n    mailvelope.createDisplayContainer(selector, data, keyring, { showExternalContent: this.env.safemode }).then(function() {\n      $(selector).addClass('mailvelope').children().not('iframe').hide();\n      ref.hide_message(msgid);\n      setTimeout(function() { $(window).resize(); }, 10);\n    }, function(err) {\n      console.error(err);\n      ref.hide_message(msgid);\n      ref.display_message('Message decryption failed: ' + err.message, 'error')\n    });\n  };\n\n  // subroutine to query keyservers for public keys\n  this.mailvelope_search_pubkeys = function(emails, resolve)\n  {\n    // query with publickey.js\n    var deferreds = [],\n      pk = new PublicKey(),\n      lock = ref.display_message(ref.get_label('loading'), 'loading');\n\n    $.each(emails, function(i, email) {\n      var d = $.Deferred();\n      pk.search(email, function(results, errorCode) {\n        if (errorCode !== null) {\n          // rejecting would make all fail\n          // d.reject(email);\n          d.resolve([email]);\n        }\n        else {\n          d.resolve([email].concat(results));\n        }\n      });\n      deferreds.push(d);\n    });\n\n    $.when.apply($, deferreds).then(function() {\n      var missing_keys = [],\n        key_selection = [];\n\n      // alanyze results of all queries\n      $.each(arguments, function(i, result) {\n        var email = result.shift();\n        if (!result.length) {\n          missing_keys.push(email);\n        }\n        else {\n          key_selection = key_selection.concat(result);\n        }\n      });\n\n      ref.hide_message(lock);\n      resolve(true);\n\n      // show key import dialog\n      if (key_selection.length) {\n        ref.mailvelope_key_import_dialog(key_selection);\n      }\n      // some keys could not be found\n      if (missing_keys.length) {\n        ref.display_message(ref.get_label('nopubkeyfor').replace('$email', missing_keys.join(', ')), 'warning');\n      }\n    }).fail(function() {\n      console.error('Pubkey lookup failed with', arguments);\n      ref.hide_message(lock);\n      ref.display_message('pubkeysearcherror', 'error');\n      resolve(false);\n    });\n  };\n\n  // list the given public keys in a dialog with options to import\n  // them into the local Maivelope keyring\n  this.mailvelope_key_import_dialog = function(candidates)\n  {\n    var ul = $('<div>').addClass('listing mailvelopekeyimport');\n    $.each(candidates, function(i, keyrec) {\n      var li = $('<div>').addClass('key');\n      if (keyrec.revoked)  li.addClass('revoked');\n      if (keyrec.disabled) li.addClass('disabled');\n      if (keyrec.expired)  li.addClass('expired');\n\n      li.append($('<label>').addClass('keyid').text(ref.get_label('keyid')));\n      li.append($('<a>').text(keyrec.keyid.substr(-8).toUpperCase())\n        .attr('href', keyrec.info)\n        .attr('target', '_blank')\n        .attr('tabindex', '-1'));\n\n      li.append($('<label>').addClass('keylen').text(ref.get_label('keylength')));\n      li.append($('<span>').text(keyrec.keylen));\n\n      if (keyrec.expirationdate) {\n        li.append($('<label>').addClass('keyexpired').text(ref.get_label('keyexpired')));\n        li.append($('<span>').text(new Date(keyrec.expirationdate * 1000).toDateString()));\n      }\n\n      if (keyrec.revoked) {\n        li.append($('<span>').addClass('keyrevoked').text(ref.get_label('keyrevoked')));\n      }\n\n      var ul_ = $('<ul>').addClass('uids');\n      $.each(keyrec.uids, function(j, uid) {\n        var li_ = $('<li>').addClass('uid');\n        if (uid.revoked)  li_.addClass('revoked');\n        if (uid.disabled) li_.addClass('disabled');\n        if (uid.expired)  li_.addClass('expired');\n\n        ul_.append(li_.text(uid.uid));\n      });\n\n      li.append(ul_);\n      li.append($('<input>')\n        .attr('type', 'button')\n        .attr('rel', keyrec.keyid)\n        .attr('value', ref.get_label('import'))\n        .addClass('button importkey')\n        .prop('disabled', keyrec.revoked || keyrec.disabled || keyrec.expired));\n\n      ul.append(li);\n    });\n\n    // display dialog with missing keys\n    ref.show_popup_dialog(\n      $('<div>')\n        .append($('<p>').html(ref.get_label('encryptpubkeysfound')))\n        .append(ul),\n      ref.get_label('importpubkeys'),\n      [{\n        text: ref.get_label('close'),\n        click: function(){\n          $(this).dialog('close');\n        }\n      }]\n    );\n\n    // delegate handler for import button clicks\n    ul.on('click', 'input.button.importkey', function() {\n      var btn = $(this),\n        keyid = btn.attr('rel'),\n        pk = new PublicKey(),\n        lock = ref.display_message(ref.get_label('loading'), 'loading');\n\n        // fetch from keyserver and import to Mailvelope keyring\n        pk.get(keyid, function(armored, errorCode) {\n          ref.hide_message(lock);\n\n          if (errorCode) {\n            ref.display_message(ref.get_label('keyservererror'), 'error');\n            return;\n          }\n\n          // import to keyring\n          ref.mailvelope_keyring.importPublicKey(armored).then(function(status) {\n            if (status === 'REJECTED') {\n              // alert(ref.get_label('Key import was rejected'));\n            }\n            else {\n              var $key = keyid.substr(-8).toUpperCase();\n              btn.closest('.key').fadeOut();\n              ref.display_message(ref.get_label('keyimportsuccess').replace('$key', $key), 'confirmation');\n            }\n          }, function(err) {\n            console.log(err);\n          });\n        });\n    });\n\n  };\n\n\n  /*********************************************************/\n  /*********       mailbox folders methods         *********/\n  /*********************************************************/\n\n  this.expunge_mailbox = function(mbox)\n  {\n    var lock, post_data = {_mbox: mbox};\n\n    // lock interface if it's the active mailbox\n    if (mbox == this.env.mailbox) {\n      lock = this.set_busy(true, 'loading');\n      post_data._reload = 1;\n      if (this.env.search_request)\n        post_data._search = this.env.search_request;\n    }\n\n    // send request to server\n    this.http_post('expunge', post_data, lock);\n  };\n\n  this.purge_mailbox = function(mbox)\n  {\n    var lock, post_data = {_mbox: mbox};\n\n    if (!confirm(this.get_label('purgefolderconfirm')))\n      return false;\n\n    // lock interface if it's the active mailbox\n    if (mbox == this.env.mailbox) {\n       lock = this.set_busy(true, 'loading');\n       post_data._reload = 1;\n     }\n\n    // send request to server\n    this.http_post('purge', post_data, lock);\n  };\n\n  // test if purge command is allowed\n  this.purge_mailbox_test = function()\n  {\n    return (this.env.exists && (\n      this.env.mailbox == this.env.trash_mailbox\n      || this.env.mailbox == this.env.junk_mailbox\n      || this.env.mailbox.startsWith(this.env.trash_mailbox + this.env.delimiter)\n      || this.env.mailbox.startsWith(this.env.junk_mailbox + this.env.delimiter)\n    ));\n  };\n\n\n  /*********************************************************/\n  /*********           login form methods          *********/\n  /*********************************************************/\n\n  // handler for keyboard events on the _user field\n  this.login_user_keyup = function(e)\n  {\n    var key = rcube_event.get_keycode(e),\n      passwd = $('#rcmloginpwd');\n\n    // enter\n    if (key == 13 && passwd.length && !passwd.val()) {\n      passwd.focus();\n      return rcube_event.cancel(e);\n    }\n\n    return true;\n  };\n\n\n  /*********************************************************/\n  /*********        message compose methods        *********/\n  /*********************************************************/\n\n  this.open_compose_step = function(p)\n  {\n    var url = this.url('mail/compose', p);\n\n    // open new compose window\n    if (this.env.compose_extwin && !this.env.extwin) {\n      this.open_window(url);\n    }\n    else {\n      this.redirect(url);\n      if (this.env.extwin)\n        window.resizeTo(Math.max(this.env.popup_width, $(window).width()), $(window).height() + 24);\n    }\n  };\n\n  // init message compose form: set focus and eventhandlers\n  this.init_messageform = function()\n  {\n    if (!this.gui_objects.messageform)\n      return false;\n\n    var i, elem, pos, input_from = $(\"[name='_from']\"),\n      input_to = $(\"[name='_to']\"),\n      input_subject = $(\"input[name='_subject']\"),\n      input_message = $(\"[name='_message']\").get(0),\n      html_mode = $(\"input[name='_is_html']\").val() == '1',\n      ac_fields = ['cc', 'bcc', 'replyto', 'followupto'],\n      ac_props, opener_rc = this.opener();\n\n    // close compose step in opener\n    if (opener_rc && opener_rc.env.action == 'compose') {\n      setTimeout(function(){\n        if (opener.history.length > 1)\n          opener.history.back();\n        else\n          opener_rc.redirect(opener_rc.get_task_url('mail'));\n      }, 100);\n      this.env.opened_extwin = true;\n    }\n\n    // configure parallel autocompletion\n    if (this.env.autocomplete_threads > 0) {\n      ac_props = {\n        threads: this.env.autocomplete_threads,\n        sources: this.env.autocomplete_sources\n      };\n    }\n\n    // init live search events\n    this.init_address_input_events(input_to, ac_props);\n    for (i in ac_fields) {\n      this.init_address_input_events($(\"[name='_\"+ac_fields[i]+\"']\"), ac_props);\n    }\n\n    if (!html_mode) {\n      pos = this.env.top_posting && this.env.compose_mode ? 0 : input_message.value.length;\n\n      // add signature according to selected identity\n      // if we have HTML editor, signature is added in a callback\n      if (input_from.prop('type') == 'select-one') {\n        this.change_identity(input_from[0]);\n      }\n\n      // set initial cursor position\n      this.set_caret_pos(input_message, pos);\n\n      // scroll to the bottom of the textarea (#1490114)\n      if (pos) {\n        $(input_message).scrollTop(input_message.scrollHeight);\n      }\n    }\n\n    // check for locally stored compose data\n    if (this.env.save_localstorage)\n      this.compose_restore_dialog(0, html_mode)\n\n    if (input_to.val() == '')\n      elem = input_to;\n    else if (input_subject.val() == '')\n      elem = input_subject;\n    else if (input_message)\n      elem = input_message;\n\n    // focus first empty element (need to be visible on IE8)\n    $(elem).filter(':visible').focus();\n\n    this.env.compose_focus_elem = document.activeElement;\n\n    // get summary of all field values\n    this.compose_field_hash(true);\n\n    // start the auto-save timer\n    this.auto_save_start();\n  };\n\n  this.compose_restore_dialog = function(j, html_mode)\n  {\n    var i, key, formdata, index = this.local_storage_get_item('compose.index', []);\n\n    var show_next = function(i) {\n      if (++i < index.length)\n        ref.compose_restore_dialog(i, html_mode)\n    }\n\n    for (i = j || 0; i < index.length; i++) {\n      key = index[i];\n      formdata = this.local_storage_get_item('compose.' + key, null, true);\n      if (!formdata) {\n        continue;\n      }\n      // restore saved copy of current compose_id\n      if (formdata.changed && key == this.env.compose_id) {\n        this.restore_compose_form(key, html_mode);\n        break;\n      }\n      // skip records from 'other' drafts\n      if (this.env.draft_id && formdata.draft_id && formdata.draft_id != this.env.draft_id) {\n        continue;\n      }\n      // skip records on reply\n      if (this.env.reply_msgid && formdata.reply_msgid != this.env.reply_msgid) {\n        continue;\n      }\n      // show dialog asking to restore the message\n      if (formdata.changed && formdata.session != this.env.session_id) {\n        this.show_popup_dialog(\n          this.get_label('restoresavedcomposedata')\n            .replace('$date', new Date(formdata.changed).toLocaleString())\n            .replace('$subject', formdata._subject)\n            .replace(/\\n/g, '<br/>'),\n          this.get_label('restoremessage'),\n          [{\n            text: this.get_label('restore'),\n            'class': 'mainaction',\n            click: function(){\n              ref.restore_compose_form(key, html_mode);\n              ref.remove_compose_data(key);  // remove old copy\n              ref.save_compose_form_local();  // save under current compose_id\n              $(this).dialog('close');\n            }\n          },\n          {\n            text: this.get_label('delete'),\n            'class': 'delete',\n            click: function(){\n              ref.remove_compose_data(key);\n              $(this).dialog('close');\n              show_next(i);\n            }\n          },\n          {\n            text: this.get_label('ignore'),\n            click: function(){\n              $(this).dialog('close');\n              show_next(i);\n            }\n          }]\n        );\n        break;\n      }\n    }\n  }\n\n  this.init_address_input_events = function(obj, props)\n  {\n    this.env.recipients_delimiter = this.env.recipients_separator + ' ';\n\n    obj.keydown(function(e) { return ref.ksearch_keydown(e, this, props); })\n      .attr({ 'autocomplete': 'off', 'aria-autocomplete': 'list', 'aria-expanded': 'false', 'role': 'combobox' });\n  };\n\n  this.submit_messageform = function(draft, saveonly)\n  {\n    var form = this.gui_objects.messageform;\n\n    if (!form)\n      return;\n\n    // the message has been sent but not saved, ask the user what to do\n    if (!saveonly && this.env.is_sent) {\n      return this.show_popup_dialog(this.get_label('messageissent'), '',\n        [{\n          text: this.get_label('save'),\n          'class': 'mainaction',\n          click: function() {\n            ref.submit_messageform(false, true);\n            $(this).dialog('close');\n          }\n        },\n        {\n          text: this.get_label('cancel'),\n          click: function() {\n            $(this).dialog('close');\n          }\n        }]\n      );\n    }\n\n    // delegate sending to Mailvelope routine\n    if (this.mailvelope_editor) {\n      return this.mailvelope_submit_messageform(draft, saveonly);\n    }\n\n    // all checks passed, send message\n    var msgid = this.set_busy(true, draft || saveonly ? 'savingmessage' : 'sendingmessage'),\n      lang = this.spellcheck_lang(),\n      files = [];\n\n    // send files list\n    $('li', this.gui_objects.attachmentlist).each(function() { files.push(this.id.replace(/^rcmfile/, '')); });\n    $('input[name=\"_attachments\"]', form).val(files.join());\n\n    form.target = 'savetarget';\n    form._draft.value = draft ? '1' : '';\n    form.action = this.add_url(form.action, '_unlock', msgid);\n    form.action = this.add_url(form.action, '_lang', lang);\n    form.action = this.add_url(form.action, '_framed', 1);\n\n    if (saveonly) {\n      form.action = this.add_url(form.action, '_saveonly', 1);\n    }\n\n    // register timer to notify about connection timeout\n    this.submit_timer = setTimeout(function(){\n      ref.set_busy(false, null, msgid);\n      ref.display_message(ref.get_label('requesttimedout'), 'error');\n    }, this.env.request_timeout * 1000);\n\n    form.submit();\n  };\n\n  this.compose_recipient_select = function(list)\n  {\n    var id, n, recipients = 0;\n    for (n=0; n < list.selection.length; n++) {\n      id = list.selection[n];\n      if (this.env.contactdata[id])\n        recipients++;\n    }\n    this.enable_command('add-recipient', recipients);\n  };\n\n  this.compose_add_recipient = function(field)\n  {\n    // find last focused field name\n    if (!field) {\n      field = $(this.env.focused_field).filter(':visible');\n      field = field.length ? field.attr('id').replace('_', '') : 'to';\n    }\n\n    var recipients = [], input = $('#_'+field), delim = this.env.recipients_delimiter;\n\n    if (this.contact_list && this.contact_list.selection.length) {\n      for (var id, n=0; n < this.contact_list.selection.length; n++) {\n        id = this.contact_list.selection[n];\n        if (id && this.env.contactdata[id]) {\n          recipients.push(this.env.contactdata[id]);\n\n          // group is added, expand it\n          if (id.charAt(0) == 'E' && this.env.contactdata[id].indexOf('@') < 0 && input.length) {\n            var gid = id.substr(1);\n            this.group2expand[gid] = { name:this.env.contactdata[id], input:input.get(0) };\n            this.http_request('group-expand', {_source: this.env.source, _gid: gid}, false);\n          }\n        }\n      }\n    }\n\n    if (recipients.length && input.length) {\n      var oldval = input.val(), rx = new RegExp(RegExp.escape(delim) + '\\\\s*$');\n      if (oldval && !rx.test(oldval))\n        oldval += delim + ' ';\n      input.val(oldval + recipients.join(delim + ' ') + delim + ' ').change();\n      this.triggerEvent('add-recipient', { field:field, recipients:recipients });\n    }\n\n    return recipients.length;\n  };\n\n  // checks the input fields before sending a message\n  this.check_compose_input = function(cmd)\n  {\n    // check input fields\n    var input_to = $(\"[name='_to']\"),\n      input_cc = $(\"[name='_cc']\"),\n      input_bcc = $(\"[name='_bcc']\"),\n      input_from = $(\"[name='_from']\"),\n      input_subject = $(\"[name='_subject']\");\n\n    // check sender (if have no identities)\n    if (input_from.prop('type') == 'text' && !rcube_check_email(input_from.val(), true)) {\n      alert(this.get_label('nosenderwarning'));\n      input_from.focus();\n      return false;\n    }\n\n    // check for empty recipient\n    var recipients = input_to.val() ? input_to.val() : (input_cc.val() ? input_cc.val() : input_bcc.val());\n    if (!rcube_check_email(recipients.replace(/^\\s+/, '').replace(/[\\s,;]+$/, ''), true)) {\n      alert(this.get_label('norecipientwarning'));\n      input_to.focus();\n      return false;\n    }\n\n    // check if all files has been uploaded\n    for (var key in this.env.attachments) {\n      if (typeof this.env.attachments[key] === 'object' && !this.env.attachments[key].complete) {\n        alert(this.get_label('notuploadedwarning'));\n        return false;\n      }\n    }\n\n    // display localized warning for missing subject\n    if (input_subject.val() == '') {\n      var buttons = {},\n        myprompt = $('<div class=\"prompt\">').html('<div class=\"message\">' + this.get_label('nosubjectwarning') + '</div>')\n          .appendTo(document.body),\n        prompt_value = $('<input>').attr({type: 'text', size: 30}).val(this.get_label('nosubject'))\n          .appendTo(myprompt),\n        save_func = function() {\n          input_subject.val(prompt_value.val());\n          myprompt.dialog('close');\n          ref.command(cmd, { nocheck:true });  // repeat command which triggered this\n        };\n\n      buttons[this.get_label('sendmessage')] = function() {\n        save_func($(this));\n      };\n      buttons[this.get_label('cancel')] = function() {\n        input_subject.focus();\n        $(this).dialog('close');\n      };\n\n      myprompt.dialog({\n        modal: true,\n        resizable: false,\n        buttons: buttons,\n        close: function(event, ui) { $(this).remove(); }\n      });\n\n      prompt_value.select().keydown(function(e) {\n        if (e.which == 13) save_func();\n      });\n\n      return false;\n    }\n\n    // check for empty body\n    if (!this.editor.get_content() && !confirm(this.get_label('nobodywarning'))) {\n      this.editor.focus();\n      return false;\n    }\n\n    // move body from html editor to textarea (just to be sure, #1485860)\n    this.editor.save();\n\n    return true;\n  };\n\n  this.toggle_editor = function(props, obj, e)\n  {\n    // @todo: this should work also with many editors on page\n    var result = this.editor.toggle(props.html, props.noconvert || false);\n\n    // satisfy the expectations of aftertoggle-editor event subscribers\n    props.mode = props.html ? 'html' : 'plain';\n\n    if (!result && e) {\n      // fix selector value if operation failed\n      props.mode = props.html ? 'plain' : 'html';\n      $(e.target).filter('select').val(props.mode);\n    }\n\n    if (result) {\n      // update internal format flag\n      $(\"input[name='_is_html']\").val(props.html ? 1 : 0);\n      // enable encrypted compose toggle\n      this.enable_command('compose-encrypted', !props.html);\n    }\n\n    return result;\n  };\n\n  this.insert_response = function(key)\n  {\n    var insert = this.env.textresponses[key] ? this.env.textresponses[key].text : null;\n\n    if (!insert)\n      return false;\n\n    this.editor.replace(insert);\n  };\n\n  /**\n   * Open the dialog to save a new canned response\n   */\n  this.save_response = function()\n  {\n    // show dialog to enter a name and to modify the text to be saved\n    var buttons = {}, text = this.editor.get_content({selection: true, format: 'text', nosig: true}),\n      html = '<form class=\"propform\">' +\n      '<div class=\"prop block\"><label>' + this.get_label('responsename') + '</label>' +\n      '<input type=\"text\" name=\"name\" id=\"ffresponsename\" size=\"40\" /></div>' +\n      '<div class=\"prop block\"><label>' + this.get_label('responsetext') + '</label>' +\n      '<textarea name=\"text\" id=\"ffresponsetext\" cols=\"40\" rows=\"8\"></textarea></div>' +\n      '</form>';\n\n    buttons[this.get_label('save')] = function(e) {\n      var name = $('#ffresponsename').val(),\n        text = $('#ffresponsetext').val();\n\n      if (!text) {\n        $('#ffresponsetext').select();\n        return false;\n      }\n      if (!name)\n        name = text.substring(0,40);\n\n      var lock = ref.display_message(ref.get_label('savingresponse'), 'loading');\n      ref.http_post('settings/responses', { _insert:1, _name:name, _text:text }, lock);\n      $(this).dialog('close');\n    };\n\n    buttons[this.get_label('cancel')] = function() {\n      $(this).dialog('close');\n    };\n\n    this.show_popup_dialog(html, this.get_label('newresponse'), buttons, {button_classes: ['mainaction']});\n\n    $('#ffresponsetext').val(text);\n    $('#ffresponsename').select();\n  };\n\n  this.add_response_item = function(response)\n  {\n    var key = response.key;\n    this.env.textresponses[key] = response;\n\n    // append to responses list\n    if (this.gui_objects.responseslist) {\n      var li = $('<li>').appendTo(this.gui_objects.responseslist);\n      $('<a>').addClass('insertresponse active')\n        .attr('href', '#')\n        .attr('rel', key)\n        .attr('tabindex', '0')\n        .html(this.quote_html(response.name))\n        .appendTo(li)\n        .mousedown(function(e) {\n          return rcube_event.cancel(e);\n        })\n        .on('mouseup keypress', function(e) {\n          if (e.type == 'mouseup' || rcube_event.get_keycode(e) == 13) {\n            ref.command('insert-response', $(this).attr('rel'));\n            $(document.body).trigger('mouseup');  // hides the menu\n            return rcube_event.cancel(e);\n          }\n        });\n    }\n  };\n\n  this.edit_responses = function()\n  {\n    // TODO: implement inline editing of responses\n  };\n\n  this.delete_response = function(key)\n  {\n    if (!key && this.responses_list) {\n      var selection = this.responses_list.get_selection();\n      key = selection[0];\n    }\n\n    // submit delete request\n    if (key && confirm(this.get_label('deleteresponseconfirm'))) {\n      this.http_post('settings/delete-response', { _key: key }, false);\n    }\n  };\n\n  // updates spellchecker buttons on state change\n  this.spellcheck_state = function()\n  {\n    var active = this.editor.spellcheck_state();\n\n    $.each(this.buttons.spellcheck || [], function(i, v) {\n      $('#' + v.id)[active ? 'addClass' : 'removeClass']('selected');\n    });\n\n    return active;\n  };\n\n  // get selected language\n  this.spellcheck_lang = function()\n  {\n    return this.editor.get_language();\n  };\n\n  this.spellcheck_lang_set = function(lang)\n  {\n    this.editor.set_language(lang);\n  };\n\n  // resume spellchecking, highlight provided mispellings without new ajax request\n  this.spellcheck_resume = function(data)\n  {\n    this.editor.spellcheck_resume(data);\n  };\n\n  this.set_draft_id = function(id)\n  {\n    if (id && id != this.env.draft_id) {\n      var filter = {task: 'mail', action: ''},\n        rc = this.opener(false, filter) || this.opener(true, filter);\n\n      // refresh the drafts folder in the opener window\n      if (rc && rc.env.mailbox == this.env.drafts_mailbox)\n        rc.command('checkmail');\n\n      this.env.draft_id = id;\n      $(\"input[name='_draft_saveid']\").val(id);\n\n      // reset history of hidden iframe used for saving draft (#1489643)\n      // but don't do this on timer-triggered draft-autosaving (#1489789)\n      if (window.frames['savetarget'] && window.frames['savetarget'].history && !this.draft_autosave_submit && !this.mailvelope_editor) {\n        window.frames['savetarget'].history.back();\n      }\n\n      this.draft_autosave_submit = false;\n    }\n\n    // always remove local copy upon saving as draft\n    this.remove_compose_data(this.env.compose_id);\n    this.compose_skip_unsavedcheck = false;\n  };\n\n  this.auto_save_start = function()\n  {\n    if (this.env.draft_autosave) {\n      this.draft_autosave_submit = false;\n      this.save_timer = setTimeout(function(){\n          ref.draft_autosave_submit = true;  // set auto-saved flag (#1489789)\n          ref.command(\"savedraft\");\n      }, this.env.draft_autosave * 1000);\n    }\n\n    // save compose form content to local storage every 5 seconds\n    if (!this.local_save_timer && window.localStorage && this.env.save_localstorage) {\n      // track typing activity and only save on changes\n      this.compose_type_activity = this.compose_type_activity_last = 0;\n      $(document).keypress(function(e) { ref.compose_type_activity++; });\n\n      this.local_save_timer = setInterval(function(){\n        if (ref.compose_type_activity > ref.compose_type_activity_last) {\n          ref.save_compose_form_local();\n          ref.compose_type_activity_last = ref.compose_type_activity;\n        }\n      }, 5000);\n\n      $(window).on('unload', function() {\n        // remove copy from local storage if compose screen is left after warning\n        if (!ref.env.server_error)\n          ref.remove_compose_data(ref.env.compose_id);\n      });\n    }\n\n    // check for unsaved changes before leaving the compose page\n    if (!window.onbeforeunload) {\n      window.onbeforeunload = function() {\n        if (!ref.compose_skip_unsavedcheck && ref.cmp_hash != ref.compose_field_hash()) {\n          return ref.get_label('notsentwarning');\n        }\n      };\n    }\n\n    // Unlock interface now that saving is complete\n    this.busy = false;\n  };\n\n  this.compose_field_hash = function(save)\n  {\n    // check input fields\n    var i, id, val, str = '', hash_fields = ['to', 'cc', 'bcc', 'subject'];\n\n    for (i=0; i<hash_fields.length; i++)\n      if (val = $('[name=\"_' + hash_fields[i] + '\"]').val())\n        str += val + ':';\n\n    str += this.editor.get_content({refresh: false});\n\n    if (this.env.attachments)\n      for (id in this.env.attachments)\n        str += id;\n\n    // we can't detect changes in the Mailvelope editor so assume it changed\n    if (this.mailvelope_editor) {\n      str += ';' + new Date().getTime();\n    }\n\n    if (save)\n      this.cmp_hash = str;\n\n    return str;\n  };\n\n  // store the contents of the compose form to localstorage\n  this.save_compose_form_local = function()\n  {\n    // feature is disabled\n    if (!this.env.save_localstorage)\n      return;\n\n    var formdata = { session:this.env.session_id, changed:new Date().getTime() },\n      ed, empty = true;\n\n    // get fresh content from editor\n    this.editor.save();\n\n    if (this.env.draft_id) {\n      formdata.draft_id = this.env.draft_id;\n    }\n    if (this.env.reply_msgid) {\n      formdata.reply_msgid = this.env.reply_msgid;\n    }\n\n    $('input, select, textarea', this.gui_objects.messageform).each(function(i, elem) {\n      switch (elem.tagName.toLowerCase()) {\n        case 'input':\n          if (elem.type == 'button' || elem.type == 'submit' || (elem.type == 'hidden' && elem.name != '_is_html')) {\n            break;\n          }\n          formdata[elem.name] = elem.type != 'checkbox' || elem.checked ? $(elem).val() : '';\n\n          if (formdata[elem.name] != '' && elem.type != 'hidden')\n            empty = false;\n          break;\n\n        case 'select':\n          formdata[elem.name] = $('option:checked', elem).val();\n          break;\n\n        default:\n          formdata[elem.name] = $(elem).val();\n          if (formdata[elem.name] != '')\n            empty = false;\n      }\n    });\n\n    if (!empty) {\n      var index = this.local_storage_get_item('compose.index', []),\n        key = this.env.compose_id;\n\n      if ($.inArray(key, index) < 0) {\n        index.push(key);\n      }\n\n      this.local_storage_set_item('compose.' + key, formdata, true);\n      this.local_storage_set_item('compose.index', index);\n    }\n  };\n\n  // write stored compose data back to form\n  this.restore_compose_form = function(key, html_mode)\n  {\n    var ed, formdata = this.local_storage_get_item('compose.' + key, true);\n\n    if (formdata && typeof formdata == 'object') {\n      $.each(formdata, function(k, value) {\n        if (k[0] == '_') {\n          var elem = $(\"*[name='\"+k+\"']\");\n          if (elem[0] && elem[0].type == 'checkbox') {\n            elem.prop('checked', value != '');\n          }\n          else {\n            elem.val(value);\n          }\n        }\n      });\n\n      // initialize HTML editor\n      if ((formdata._is_html == '1' && !html_mode) || (formdata._is_html != '1' && html_mode)) {\n        this.command('toggle-editor', {id: this.env.composebody, html: !html_mode, noconvert: true});\n      }\n    }\n  };\n\n  // remove stored compose data from localStorage\n  this.remove_compose_data = function(key)\n  {\n    var index = this.local_storage_get_item('compose.index', []);\n\n    if ($.inArray(key, index) >= 0) {\n      this.local_storage_remove_item('compose.' + key);\n      this.local_storage_set_item('compose.index', $.grep(index, function(val,i) { return val != key; }));\n    }\n  };\n\n  // clear all stored compose data of this user\n  this.clear_compose_data = function()\n  {\n    var i, index = this.local_storage_get_item('compose.index', []);\n\n    for (i=0; i < index.length; i++) {\n      this.local_storage_remove_item('compose.' + index[i]);\n    }\n\n    this.local_storage_remove_item('compose.index');\n  };\n\n  this.change_identity = function(obj, show_sig)\n  {\n    if (!obj || !obj.options)\n      return false;\n\n    if (!show_sig)\n      show_sig = this.env.show_sig;\n\n    var id = obj.options[obj.selectedIndex].value,\n      sig = this.env.identity,\n      delim = this.env.recipients_separator,\n      rx_delim = RegExp.escape(delim);\n\n    // enable manual signature insert\n    if (this.env.signatures && this.env.signatures[id]) {\n      this.enable_command('insert-sig', true);\n      this.env.compose_commands.push('insert-sig');\n    }\n    else\n      this.enable_command('insert-sig', false);\n\n    // first function execution\n    if (!this.env.identities_initialized) {\n      this.env.identities_initialized = true;\n      if (this.env.show_sig_later)\n        this.env.show_sig = true;\n      if (this.env.opened_extwin)\n        return;\n    }\n\n    // update reply-to/bcc fields with addresses defined in identities\n    $.each(['replyto', 'bcc'], function() {\n      var rx, key = this,\n        old_val = sig && ref.env.identities[sig] ? ref.env.identities[sig][key] : '',\n        new_val = id && ref.env.identities[id] ? ref.env.identities[id][key] : '',\n        input = $('[name=\"_'+key+'\"]'), input_val = input.val();\n\n      // remove old address(es)\n      if (old_val && input_val) {\n        rx = new RegExp('\\\\s*' + RegExp.escape(old_val) + '\\\\s*');\n        input_val = input_val.replace(rx, '');\n      }\n\n      // cleanup\n      rx = new RegExp(rx_delim + '\\\\s*' + rx_delim, 'g');\n      input_val = String(input_val).replace(rx, delim);\n      rx = new RegExp('^[\\\\s' + rx_delim + ']+');\n      input_val = input_val.replace(rx, '');\n\n      // add new address(es)\n      if (new_val && input_val.indexOf(new_val) == -1 && input_val.indexOf(new_val.replace(/\"/g, '')) == -1) {\n        if (input_val) {\n          rx = new RegExp('[' + rx_delim + '\\\\s]+$')\n          input_val = input_val.replace(rx, '') + delim + ' ';\n        }\n\n        input_val += new_val + delim + ' ';\n      }\n\n      if (old_val || new_val)\n        input.val(input_val).change();\n    });\n\n    this.editor.change_signature(id, show_sig);\n    this.env.identity = id;\n    this.triggerEvent('change_identity');\n    return true;\n  };\n\n  // upload (attachment) file\n  this.upload_file = function(form, action, lock)\n  {\n    if (!form)\n      return;\n\n    // count files and size on capable browser\n    var size = 0, numfiles = 0;\n\n    $('input[type=file]', form).each(function(i, field) {\n      var files = field.files ? field.files.length : (field.value ? 1 : 0);\n\n      // check file size\n      if (field.files) {\n        for (var i=0; i < files; i++)\n          size += field.files[i].size;\n      }\n\n      numfiles += files;\n    });\n\n    // create hidden iframe and post upload form\n    if (numfiles) {\n      if (this.env.max_filesize && this.env.filesizeerror && size > this.env.max_filesize) {\n        this.display_message(this.env.filesizeerror, 'error');\n        return false;\n      }\n\n      var frame_name = this.async_upload_form(form, action || 'upload', function(e) {\n        var d, content = '';\n        try {\n          if (this.contentDocument) {\n            d = this.contentDocument;\n          } else if (this.contentWindow) {\n            d = this.contentWindow.document;\n          }\n          content = d.childNodes[1].innerHTML;\n        } catch (err) {}\n\n        if (!content.match(/add2attachment/) && (!bw.opera || (ref.env.uploadframe && ref.env.uploadframe == e.data.ts))) {\n          if (!content.match(/display_message/))\n            ref.display_message(ref.get_label('fileuploaderror'), 'error');\n          ref.remove_from_attachment_list(e.data.ts);\n\n          if (lock)\n            ref.set_busy(false, null, lock);\n        }\n        // Opera hack: handle double onload\n        if (bw.opera)\n          ref.env.uploadframe = e.data.ts;\n      });\n\n      // display upload indicator and cancel button\n      var content = '<span>' + this.get_label('uploading' + (numfiles > 1 ? 'many' : '')) + '</span>',\n        ts = frame_name.replace(/^rcmupload/, '');\n\n      this.add2attachment_list(ts, { name:'', html:content, classname:'uploading', frame:frame_name, complete:false });\n\n      // upload progress support\n      if (this.env.upload_progress_time) {\n        this.upload_progress_start('upload', ts);\n      }\n\n      // set reference to the form object\n      this.gui_objects.attachmentform = form;\n      return true;\n    }\n  };\n\n  // add file name to attachment list\n  // called from upload page\n  this.add2attachment_list = function(name, att, upload_id)\n  {\n    if (upload_id)\n      this.triggerEvent('fileuploaded', {name: name, attachment: att, id: upload_id});\n\n    if (!this.env.attachments)\n      this.env.attachments = {};\n\n    if (upload_id && this.env.attachments[upload_id])\n      delete this.env.attachments[upload_id];\n\n    this.env.attachments[name] = att;\n\n    if (!this.gui_objects.attachmentlist)\n      return false;\n\n    if (!att.complete && this.env.loadingicon)\n      att.html = '<img src=\"'+this.env.loadingicon+'\" alt=\"\" class=\"uploading\" />' + att.html;\n\n    if (!att.complete && att.frame)\n      att.html = '<a title=\"'+this.get_label('cancel')+'\" onclick=\"return rcmail.cancel_attachment_upload(\\''+name+'\\', \\''+att.frame+'\\');\" href=\"#cancelupload\" class=\"cancelupload\">'\n        + (this.env.cancelicon ? '<img src=\"'+this.env.cancelicon+'\" alt=\"'+this.get_label('cancel')+'\" />' : this.get_label('cancel')) + '</a>' + att.html;\n\n    var indicator, li = $('<li>');\n\n    li.attr('id', name)\n      .addClass(att.classname)\n      .html(att.html)\n      .on('mouseover', function() { rcube_webmail.long_subject_title_ex(this); });\n\n    // replace indicator's li\n    if (upload_id && (indicator = document.getElementById(upload_id))) {\n      li.replaceAll(indicator);\n    }\n    else { // add new li\n      li.appendTo(this.gui_objects.attachmentlist);\n    }\n\n    // set tabindex attribute\n    var tabindex = $(this.gui_objects.attachmentlist).attr('data-tabindex') || '0';\n    li.find('a').attr('tabindex', tabindex);\n\n    return true;\n  };\n\n  this.remove_from_attachment_list = function(name)\n  {\n    if (this.env.attachments) {\n      delete this.env.attachments[name];\n      $('#'+name).remove();\n    }\n  };\n\n  this.remove_attachment = function(name)\n  {\n    if (name && this.env.attachments[name])\n      this.http_post('remove-attachment', { _id:this.env.compose_id, _file:name });\n\n    return true;\n  };\n\n  this.cancel_attachment_upload = function(name, frame_name)\n  {\n    if (!name || !frame_name)\n      return false;\n\n    this.remove_from_attachment_list(name);\n    $(\"iframe[name='\"+frame_name+\"']\").remove();\n    return false;\n  };\n\n  this.upload_progress_start = function(action, name)\n  {\n    setTimeout(function() { ref.http_request(action, {_progress: name}); },\n      this.env.upload_progress_time * 1000);\n  };\n\n  this.upload_progress_update = function(param)\n  {\n    var elem = $('#'+param.name + ' > span');\n\n    if (!elem.length || !param.text)\n      return;\n\n    elem.text(param.text);\n\n    if (!param.done)\n      this.upload_progress_start(param.action, param.name);\n  };\n\n  // send remote request to add a new contact\n  this.add_contact = function(value)\n  {\n    if (value)\n      this.http_post('addcontact', {_address: value});\n\n    return true;\n  };\n\n  // send remote request to search mail or contacts\n  this.qsearch = function(value)\n  {\n    if (value != '') {\n      var r, lock = this.set_busy(true, 'searching'),\n        url = this.search_params(value),\n        action = this.env.action == 'compose' && this.contact_list ? 'search-contacts' : 'search';\n\n      if (this.message_list)\n        this.clear_message_list();\n      else if (this.contact_list)\n        this.list_contacts_clear();\n\n      if (this.env.source)\n        url._source = this.env.source;\n      if (this.env.group)\n        url._gid = this.env.group;\n\n      // reset vars\n      this.env.current_page = 1;\n\n      r = this.http_request(action, url, lock);\n\n      this.env.qsearch = {lock: lock, request: r};\n      this.enable_command('set-listmode', this.env.threads && (this.env.search_scope || 'base') == 'base');\n\n      return true;\n    }\n\n    return false;\n  };\n\n  this.continue_search = function(request_id)\n  {\n    var lock = this.set_busy(true, 'stillsearching');\n\n    setTimeout(function() {\n      var url = ref.search_params();\n      url._continue = request_id;\n      ref.env.qsearch = { lock: lock, request: ref.http_request('search', url, lock) };\n    }, 100);\n  };\n\n  // build URL params for search\n  this.search_params = function(search, filter)\n  {\n    var n, url = {}, mods_arr = [],\n      mods = this.env.search_mods,\n      scope = this.env.search_scope || 'base',\n      mbox = scope == 'all' ? '*' : this.env.mailbox;\n\n    if (!filter && this.gui_objects.search_filter)\n      filter = this.gui_objects.search_filter.value;\n\n    if (!search && this.gui_objects.qsearchbox)\n      search = this.gui_objects.qsearchbox.value;\n\n    if (filter)\n      url._filter = filter;\n\n    if (this.gui_objects.search_interval)\n      url._interval = $(this.gui_objects.search_interval).val();\n\n    if (search) {\n      url._q = search;\n\n      if (mods && this.message_list)\n        mods = mods[mbox] || mods['*'];\n\n      if (mods) {\n        for (n in mods)\n          mods_arr.push(n);\n        url._headers = mods_arr.join(',');\n      }\n    }\n\n    if (scope)\n      url._scope = scope;\n    if (mbox && scope != 'all')\n      url._mbox = mbox;\n\n    return url;\n  };\n\n  // reset search filter\n  this.reset_search_filter = function()\n  {\n    this.filter_disabled = true;\n    if (this.gui_objects.search_filter)\n      $(this.gui_objects.search_filter).val('ALL').change();\n    this.filter_disabled = false;\n  };\n\n  // reset quick-search form\n  this.reset_qsearch = function(all)\n  {\n    if (this.gui_objects.qsearchbox)\n      this.gui_objects.qsearchbox.value = '';\n\n    if (this.gui_objects.search_interval)\n      $(this.gui_objects.search_interval).val('');\n\n    if (this.env.qsearch)\n      this.abort_request(this.env.qsearch);\n\n    if (all) {\n      this.env.search_scope = 'base';\n      this.reset_search_filter();\n    }\n\n    this.env.qsearch = null;\n    this.env.search_request = null;\n    this.env.search_id = null;\n\n    this.enable_command('set-listmode', this.env.threads);\n  };\n\n  this.set_searchscope = function(scope)\n  {\n    var old = this.env.search_scope;\n    this.env.search_scope = scope;\n\n    // re-send search query with new scope\n    if (scope != old && this.env.search_request) {\n      if (!this.qsearch(this.gui_objects.qsearchbox.value) && this.env.search_filter && this.env.search_filter != 'ALL')\n        this.filter_mailbox(this.env.search_filter);\n      if (scope != 'all')\n        this.select_folder(this.env.mailbox, '', true);\n    }\n  };\n\n  this.set_searchinterval = function(interval)\n  {\n    var old = this.env.search_interval;\n    this.env.search_interval = interval;\n\n    // re-send search query with new interval\n    if (interval != old && this.env.search_request) {\n      if (!this.qsearch(this.gui_objects.qsearchbox.value) && this.env.search_filter && this.env.search_filter != 'ALL')\n        this.filter_mailbox(this.env.search_filter);\n      if (interval)\n        this.select_folder(this.env.mailbox, '', true);\n    }\n  };\n\n  this.set_searchmods = function(mods)\n  {\n    var mbox = this.env.mailbox,\n      scope = this.env.search_scope || 'base';\n\n    if (scope == 'all')\n      mbox = '*';\n\n    if (!this.env.search_mods)\n      this.env.search_mods = {};\n\n    if (mbox)\n      this.env.search_mods[mbox] = mods;\n  };\n\n  this.is_multifolder_listing = function()\n  {\n    return this.env.multifolder_listing !== undefined ? this.env.multifolder_listing :\n      (this.env.search_request && (this.env.search_scope || 'base') != 'base');\n  };\n\n  // action executed after mail is sent\n  this.sent_successfully = function(type, msg, folders, save_error)\n  {\n    this.display_message(msg, type);\n    this.compose_skip_unsavedcheck = true;\n\n    if (this.env.extwin) {\n      if (!save_error)\n        this.lock_form(this.gui_objects.messageform);\n\n      var filter = {task: 'mail', action: ''},\n        rc = this.opener(false, filter) || this.opener(true, filter);\n\n      if (rc) {\n        rc.display_message(msg, type);\n        // refresh the folder where sent message was saved or replied message comes from\n        if (folders && $.inArray(rc.env.mailbox, folders) >= 0) {\n          rc.command('checkmail');\n        }\n      }\n\n      if (!save_error)\n        setTimeout(function() { window.close(); }, 1000);\n    }\n    else if (!save_error) {\n      // before redirect we need to wait some time for Chrome (#1486177)\n      setTimeout(function() { ref.list_mailbox(); }, 500);\n    }\n\n    if (save_error)\n      this.env.is_sent = true;\n  };\n\n\n  /*********************************************************/\n  /*********     keyboard live-search methods      *********/\n  /*********************************************************/\n\n  // handler for keyboard events on address-fields\n  this.ksearch_keydown = function(e, obj, props)\n  {\n    if (this.ksearch_timer)\n      clearTimeout(this.ksearch_timer);\n\n    var key = rcube_event.get_keycode(e),\n      mod = rcube_event.get_modifier(e);\n\n    switch (key) {\n      case 38:  // arrow up\n      case 40:  // arrow down\n        if (!this.ksearch_visible())\n          return;\n\n        var dir = key == 38 ? 1 : 0,\n          highlight = document.getElementById('rcmkSearchItem' + this.ksearch_selected);\n\n        if (!highlight)\n          highlight = this.ksearch_pane.__ul.firstChild;\n\n        if (highlight)\n          this.ksearch_select(dir ? highlight.previousSibling : highlight.nextSibling);\n\n        return rcube_event.cancel(e);\n\n      case 9:   // tab\n        if (mod == SHIFT_KEY || !this.ksearch_visible()) {\n          this.ksearch_hide();\n          return;\n        }\n\n      case 13:  // enter\n        if (!this.ksearch_visible())\n          return false;\n\n        // insert selected address and hide ksearch pane\n        this.insert_recipient(this.ksearch_selected);\n        this.ksearch_hide();\n\n        return rcube_event.cancel(e);\n\n      case 27:  // escape\n        this.ksearch_hide();\n        return;\n\n      case 37:  // left\n      case 39:  // right\n        return;\n    }\n\n    // start timer\n    this.ksearch_timer = setTimeout(function(){ ref.ksearch_get_results(props); }, 200);\n    this.ksearch_input = obj;\n\n    return true;\n  };\n\n  this.ksearch_visible = function()\n  {\n    return this.ksearch_selected !== null && this.ksearch_selected !== undefined && this.ksearch_value;\n  };\n\n  this.ksearch_select = function(node)\n  {\n    if (this.ksearch_pane && node) {\n      this.ksearch_pane.find('li.selected').removeClass('selected').removeAttr('aria-selected');\n    }\n\n    if (node) {\n      $(node).addClass('selected').attr('aria-selected', 'true');\n      this.ksearch_selected = node._rcm_id;\n      $(this.ksearch_input).attr('aria-activedescendant', 'rcmkSearchItem' + this.ksearch_selected);\n    }\n  };\n\n  this.insert_recipient = function(id)\n  {\n    if (id === null || !this.env.contacts[id] || !this.ksearch_input)\n      return;\n\n    // get cursor pos\n    var inp_value = this.ksearch_input.value,\n      cpos = this.get_caret_pos(this.ksearch_input),\n      p = inp_value.lastIndexOf(this.ksearch_value, cpos),\n      trigger = false,\n      insert = '',\n      // replace search string with full address\n      pre = inp_value.substring(0, p),\n      end = inp_value.substring(p+this.ksearch_value.length, inp_value.length);\n\n    this.ksearch_destroy();\n\n    // insert all members of a group\n    if (typeof this.env.contacts[id] === 'object' && this.env.contacts[id].type == 'group' && !this.env.contacts[id].email) {\n      insert += this.env.contacts[id].name + this.env.recipients_delimiter;\n      this.group2expand[this.env.contacts[id].id] = $.extend({ input: this.ksearch_input }, this.env.contacts[id]);\n      this.http_request('mail/group-expand', {_source: this.env.contacts[id].source, _gid: this.env.contacts[id].id}, false);\n    }\n    else if (typeof this.env.contacts[id] === 'object' && this.env.contacts[id].name) {\n      insert = this.env.contacts[id].name + this.env.recipients_delimiter;\n      trigger = true;\n    }\n    else if (typeof this.env.contacts[id] === 'string') {\n      insert = this.env.contacts[id] + this.env.recipients_delimiter;\n      trigger = true;\n    }\n\n    this.ksearch_input.value = pre + insert + end;\n\n    // set caret to insert pos\n    this.set_caret_pos(this.ksearch_input, p + insert.length);\n\n    if (trigger) {\n      this.triggerEvent('autocomplete_insert', { field:this.ksearch_input, insert:insert, data:this.env.contacts[id] });\n      this.compose_type_activity++;\n    }\n  };\n\n  this.replace_group_recipients = function(id, recipients)\n  {\n    if (this.group2expand[id]) {\n      this.group2expand[id].input.value = this.group2expand[id].input.value.replace(this.group2expand[id].name, recipients);\n      this.triggerEvent('autocomplete_insert', { field:this.group2expand[id].input, insert:recipients });\n      this.group2expand[id] = null;\n      this.compose_type_activity++;\n    }\n  };\n\n  // address search processor\n  this.ksearch_get_results = function(props)\n  {\n    var inp_value = this.ksearch_input ? this.ksearch_input.value : null;\n\n    if (inp_value === null)\n      return;\n\n    if (this.ksearch_pane && this.ksearch_pane.is(\":visible\"))\n      this.ksearch_pane.hide();\n\n    // get string from current cursor pos to last comma\n    var cpos = this.get_caret_pos(this.ksearch_input),\n      p = inp_value.lastIndexOf(this.env.recipients_separator, cpos-1),\n      q = inp_value.substring(p+1, cpos),\n      min = this.env.autocomplete_min_length,\n      data = this.ksearch_data;\n\n    // trim query string\n    q = $.trim(q);\n\n    // Don't (re-)search if the last results are still active\n    if (q == this.ksearch_value)\n      return;\n\n    this.ksearch_destroy();\n\n    if (q.length && q.length < min) {\n      if (!this.ksearch_info) {\n        this.ksearch_info = this.display_message(\n          this.get_label('autocompletechars').replace('$min', min));\n      }\n      return;\n    }\n\n    var old_value = this.ksearch_value;\n    this.ksearch_value = q;\n\n    // ...string is empty\n    if (!q.length)\n      return;\n\n    // ...new search value contains old one and previous search was not finished or its result was empty\n    if (old_value && old_value.length && q.startsWith(old_value) && (!data || data.num <= 0) && this.env.contacts && !this.env.contacts.length)\n      return;\n\n    var sources = props && props.sources ? props.sources : [''];\n    var reqid = this.multi_thread_http_request({\n      items: sources,\n      threads: props && props.threads ? props.threads : 1,\n      action:  props && props.action ? props.action : 'mail/autocomplete',\n      postdata: { _search:q, _source:'%s' },\n      lock: this.display_message(this.get_label('searching'), 'loading')\n    });\n\n    this.ksearch_data = { id:reqid, sources:sources.slice(), num:sources.length };\n  };\n\n  this.ksearch_query_results = function(results, search, reqid)\n  {\n    // trigger multi-thread http response callback\n    this.multi_thread_http_response(results, reqid);\n\n    // search stopped in meantime?\n    if (!this.ksearch_value)\n      return;\n\n    // ignore this outdated search response\n    if (this.ksearch_input && search != this.ksearch_value)\n      return;\n\n    // display search results\n    var i, id, len, ul, text, type, init,\n      value = this.ksearch_value,\n      maxlen = this.env.autocomplete_max ? this.env.autocomplete_max : 15;\n\n    // create results pane if not present\n    if (!this.ksearch_pane) {\n      ul = $('<ul>');\n      this.ksearch_pane = $('<div>').attr('id', 'rcmKSearchpane').attr('role', 'listbox')\n        .css({ position:'absolute', 'z-index':30000 }).append(ul).appendTo(document.body);\n      this.ksearch_pane.__ul = ul[0];\n    }\n\n    ul = this.ksearch_pane.__ul;\n\n    // remove all search results or add to existing list if parallel search\n    if (reqid && this.ksearch_pane.data('reqid') == reqid) {\n      maxlen -= ul.childNodes.length;\n    }\n    else {\n      this.ksearch_pane.data('reqid', reqid);\n      init = 1;\n      // reset content\n      ul.innerHTML = '';\n      this.env.contacts = [];\n      // move the results pane right under the input box\n      var pos = $(this.ksearch_input).offset();\n      this.ksearch_pane.css({ left:pos.left+'px', top:(pos.top + this.ksearch_input.offsetHeight)+'px', display: 'none'});\n    }\n\n    // add each result line to list\n    if (results && (len = results.length)) {\n      for (i=0; i < len && maxlen > 0; i++) {\n        text = typeof results[i] === 'object' ? (results[i].display || results[i].name) : results[i];\n        type = typeof results[i] === 'object' ? results[i].type : '';\n        id = i + this.env.contacts.length;\n        $('<li>').attr('id', 'rcmkSearchItem' + id)\n          .attr('role', 'option')\n          .html('<i class=\"icon\"></i>' + this.quote_html(text.replace(new RegExp('('+RegExp.escape(value)+')', 'ig'), '##$1%%')).replace(/##([^%]+)%%/g, '<b>$1</b>'))\n          .addClass(type || '')\n          .appendTo(ul)\n          .mouseover(function() { ref.ksearch_select(this); })\n          .mouseup(function() { ref.ksearch_click(this); })\n          .get(0)._rcm_id = id;\n        maxlen -= 1;\n      }\n    }\n\n    if (ul.childNodes.length) {\n      // set the right aria-* attributes to the input field\n      $(this.ksearch_input)\n        .attr('aria-haspopup', 'true')\n        .attr('aria-expanded', 'true')\n        .attr('aria-owns', 'rcmKSearchpane');\n\n      this.ksearch_pane.show();\n\n      // select the first\n      if (!this.env.contacts.length) {\n        this.ksearch_select($('li:first', ul).get(0));\n      }\n    }\n\n    if (len)\n      this.env.contacts = this.env.contacts.concat(results);\n\n    if (this.ksearch_data.id == reqid)\n      this.ksearch_data.num--;\n  };\n\n  this.ksearch_click = function(node)\n  {\n    if (this.ksearch_input)\n      this.ksearch_input.focus();\n\n    this.insert_recipient(node._rcm_id);\n    this.ksearch_hide();\n  };\n\n  this.ksearch_blur = function()\n  {\n    if (this.ksearch_timer)\n      clearTimeout(this.ksearch_timer);\n\n    this.ksearch_input = null;\n    this.ksearch_hide();\n  };\n\n  this.ksearch_hide = function()\n  {\n    this.ksearch_selected = null;\n    this.ksearch_value = '';\n\n    if (this.ksearch_pane)\n      this.ksearch_pane.hide();\n\n    $(this.ksearch_input)\n      .attr('aria-haspopup', 'false')\n      .attr('aria-expanded', 'false')\n      .removeAttr('aria-activedescendant')\n      .removeAttr('aria-owns');\n\n    this.ksearch_destroy();\n  };\n\n  // Clears autocomplete data/requests\n  this.ksearch_destroy = function()\n  {\n    if (this.ksearch_data)\n      this.multi_thread_request_abort(this.ksearch_data.id);\n\n    if (this.ksearch_info)\n      this.hide_message(this.ksearch_info);\n\n    if (this.ksearch_msg)\n      this.hide_message(this.ksearch_msg);\n\n    this.ksearch_data = null;\n    this.ksearch_info = null;\n    this.ksearch_msg = null;\n  };\n\n\n  /*********************************************************/\n  /*********         address book methods          *********/\n  /*********************************************************/\n\n  this.contactlist_keypress = function(list)\n  {\n    if (list.key_pressed == list.DELETE_KEY)\n      this.command('delete');\n  };\n\n  this.contactlist_select = function(list)\n  {\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n\n    var n, id, sid, contact, writable = false,\n      selected = list.selection.length,\n      source = this.env.source ? this.env.address_sources[this.env.source] : null;\n\n    // we don't have dblclick handler here, so use 200 instead of this.dblclick_time\n    if (this.env.contentframe && (id = list.get_single_selection()))\n      this.preview_timer = setTimeout(function(){ ref.load_contact(id, 'show'); }, 200);\n    else if (this.env.contentframe)\n      this.show_contentframe(false);\n\n    if (selected) {\n      list.draggable = false;\n\n      // no source = search result, we'll need to detect if any of\n      // selected contacts are in writable addressbook to enable edit/delete\n      // we'll also need to know sources used in selection for copy\n      // and group-addmember operations (drag&drop)\n      this.env.selection_sources = [];\n\n      if (source) {\n        this.env.selection_sources.push(this.env.source);\n      }\n\n      for (n in list.selection) {\n        contact = list.data[list.selection[n]];\n        if (!source) {\n          sid = String(list.selection[n]).replace(/^[^-]+-/, '');\n          if (sid && this.env.address_sources[sid]) {\n            writable = writable || (!this.env.address_sources[sid].readonly && !contact.readonly);\n            this.env.selection_sources.push(sid);\n          }\n        }\n        else {\n          writable = writable || (!source.readonly && !contact.readonly);\n        }\n\n        if (contact._type != 'group')\n          list.draggable = true;\n      }\n\n      this.env.selection_sources = $.unique(this.env.selection_sources);\n    }\n\n    // if a group is currently selected, and there is at least one contact selected\n    // thend we can enable the group-remove-selected command\n    this.enable_command('group-remove-selected', this.env.group && selected && writable);\n    this.enable_command('compose', this.env.group || selected);\n    this.enable_command('print', selected == 1);\n    this.enable_command('export-selected', 'copy', selected > 0);\n    this.enable_command('edit', id && writable);\n    this.enable_command('delete', 'move', selected && writable);\n\n    return false;\n  };\n\n  this.list_contacts = function(src, group, page)\n  {\n    var win, folder, url = {},\n      refresh = src === undefined && group === undefined && page === undefined,\n      target = window;\n\n    if (!src)\n      src = this.env.source;\n\n    if (refresh)\n      group = this.env.group;\n\n    if (page && this.current_page == page && src == this.env.source && group == this.env.group)\n      return false;\n\n    if (src != this.env.source) {\n      page = this.env.current_page = 1;\n      this.reset_qsearch();\n    }\n    else if (!refresh && group != this.env.group)\n      page = this.env.current_page = 1;\n\n    if (this.env.search_id)\n      folder = 'S'+this.env.search_id;\n    else if (!this.env.search_request)\n      folder = group ? 'G'+src+group : src;\n\n    this.env.source = src;\n    this.env.group = group;\n\n    // truncate groups listing stack\n    var index = $.inArray(this.env.group, this.env.address_group_stack);\n    if (index < 0)\n      this.env.address_group_stack = [];\n    else\n      this.env.address_group_stack = this.env.address_group_stack.slice(0,index);\n\n    // make sure the current group is on top of the stack\n    if (this.env.group) {\n      this.env.address_group_stack.push(this.env.group);\n\n      // mark the first group on the stack as selected in the directory list\n      folder = 'G'+src+this.env.address_group_stack[0];\n    }\n    else if (this.gui_objects.addresslist_title) {\n        $(this.gui_objects.addresslist_title).html(this.get_label('contacts'));\n    }\n\n    if (!this.env.search_id)\n      this.select_folder(folder, '', true);\n\n    // load contacts remotely\n    if (this.gui_objects.contactslist) {\n      this.list_contacts_remote(src, group, page);\n      return;\n    }\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      target = win;\n      url._framed = 1;\n    }\n\n    if (group)\n      url._gid = group;\n    if (page)\n      url._page = page;\n    if (src)\n      url._source = src;\n\n    // also send search request to get the correct listing\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    this.set_busy(true, 'loading');\n    this.location_href(url, target);\n  };\n\n  // send remote request to load contacts list\n  this.list_contacts_remote = function(src, group, page)\n  {\n    // clear message list first\n    this.list_contacts_clear();\n\n    // send request to server\n    var url = {}, lock = this.set_busy(true, 'loading');\n\n    if (src)\n      url._source = src;\n    if (page)\n      url._page = page;\n    if (group)\n      url._gid = group;\n\n    this.env.source = src;\n    this.env.group = group;\n\n    // also send search request to get the right records\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    this.http_request(this.env.task == 'mail' ? 'list-contacts' : 'list', url, lock);\n  };\n\n  this.list_contacts_clear = function()\n  {\n    this.contact_list.data = {};\n    this.contact_list.clear(true);\n    this.show_contentframe(false);\n    this.enable_command('delete', 'move', 'copy', 'print', false);\n    this.enable_command('compose', this.env.group);\n  };\n\n  this.set_group_prop = function(prop)\n  {\n    if (this.gui_objects.addresslist_title) {\n      var boxtitle = $(this.gui_objects.addresslist_title).html('');  // clear contents\n\n      // add link to pop back to parent group\n      if (this.env.address_group_stack.length > 1) {\n        $('<a href=\"#list\">...</a>')\n          .attr('title', this.get_label('uponelevel'))\n          .addClass('poplink')\n          .appendTo(boxtitle)\n          .click(function(e){ return ref.command('popgroup','',this); });\n        boxtitle.append('&nbsp;&raquo;&nbsp;');\n      }\n\n      boxtitle.append($('<span>').text(prop.name));\n    }\n\n    this.triggerEvent('groupupdate', prop);\n  };\n\n  // load contact record\n  this.load_contact = function(cid, action, framed)\n  {\n    var win, url = {}, target = window,\n      rec = this.contact_list ? this.contact_list.data[cid] : null;\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      url._framed = 1;\n      target = win;\n      this.show_contentframe(true);\n\n      // load dummy content, unselect selected row(s)\n      if (!cid)\n        this.contact_list.clear_selection();\n\n      this.enable_command('compose', rec && rec.email);\n      this.enable_command('export-selected', 'print', rec && rec._type != 'group');\n    }\n    else if (framed)\n      return false;\n\n    if (action && (cid || action == 'add') && !this.drag_active) {\n      if (this.env.group)\n        url._gid = this.env.group;\n\n      if (this.env.search_request)\n        url._search = this.env.search_request;\n\n      url._action = action;\n      url._source = this.env.source;\n      url._cid = cid;\n\n      this.location_href(url, target, true);\n    }\n\n    return true;\n  };\n\n  // add/delete member to/from the group\n  this.group_member_change = function(what, cid, source, gid)\n  {\n    if (what != 'add')\n      what = 'del';\n\n    var label = this.get_label(what == 'add' ? 'addingmember' : 'removingmember'),\n      lock = this.display_message(label, 'loading'),\n      post_data = {_cid: cid, _source: source, _gid: gid};\n\n    this.http_post('group-'+what+'members', post_data, lock);\n  };\n\n  this.contacts_drag_menu = function(e, to)\n  {\n    var dest = to.type == 'group' ? to.source : to.id,\n      source = this.env.source;\n\n    if (!this.env.address_sources[dest] || this.env.address_sources[dest].readonly)\n      return true;\n\n    // search result may contain contacts from many sources, but if there is only one...\n    if (source == '' && this.env.selection_sources.length == 1)\n      source = this.env.selection_sources[0];\n\n    if (to.type == 'group' && dest == source) {\n      var cid = this.contact_list.get_selection().join(',');\n      this.group_member_change('add', cid, dest, to.id);\n      return true;\n    }\n    // move action is not possible, \"redirect\" to copy if menu wasn't requested\n    else if (!this.commands.move && rcube_event.get_modifier(e) != SHIFT_KEY) {\n      this.copy_contacts(to);\n      return true;\n    }\n\n    return this.drag_menu(e, to);\n  };\n\n  // copy contact(s) to the specified target (group or directory)\n  this.copy_contacts = function(to)\n  {\n    var dest = to.type == 'group' ? to.source : to.id,\n      source = this.env.source,\n      group = this.env.group ? this.env.group : '',\n      cid = this.contact_list.get_selection().join(',');\n\n    if (!cid || !this.env.address_sources[dest] || this.env.address_sources[dest].readonly)\n      return;\n\n    // search result may contain contacts from many sources, but if there is only one...\n    if (source == '' && this.env.selection_sources.length == 1)\n      source = this.env.selection_sources[0];\n\n    // tagret is a group\n    if (to.type == 'group') {\n      if (dest == source)\n        return;\n\n      var lock = this.display_message(this.get_label('copyingcontact'), 'loading'),\n        post_data = {_cid: cid, _source: this.env.source, _to: dest, _togid: to.id, _gid: group};\n\n      this.http_post('copy', post_data, lock);\n    }\n    // target is an addressbook\n    else if (to.id != source) {\n      var lock = this.display_message(this.get_label('copyingcontact'), 'loading'),\n        post_data = {_cid: cid, _source: this.env.source, _to: to.id, _gid: group};\n\n      this.http_post('copy', post_data, lock);\n    }\n  };\n\n  // move contact(s) to the specified target (group or directory)\n  this.move_contacts = function(to)\n  {\n    var dest = to.type == 'group' ? to.source : to.id,\n      source = this.env.source,\n      group = this.env.group ? this.env.group : '';\n\n    if (!this.env.address_sources[dest] || this.env.address_sources[dest].readonly)\n      return;\n\n    // search result may contain contacts from many sources, but if there is only one...\n    if (source == '' && this.env.selection_sources.length == 1)\n      source = this.env.selection_sources[0];\n\n    if (to.type == 'group') {\n      if (dest == source)\n        return;\n\n      this._with_selected_contacts('move', {_to: dest, _togid: to.id});\n    }\n    // target is an addressbook\n    else if (to.id != source)\n      this._with_selected_contacts('move', {_to: to.id});\n  };\n\n  // delete contact(s)\n  this.delete_contacts = function()\n  {\n    var undelete = this.env.source && this.env.address_sources[this.env.source].undelete;\n\n    if (!undelete && !confirm(this.get_label('deletecontactconfirm')))\n      return;\n\n    return this._with_selected_contacts('delete');\n  };\n\n  this._with_selected_contacts = function(action, post_data)\n  {\n    var selection = this.contact_list ? this.contact_list.get_selection() : [];\n\n    // exit if no contact specified or if selection is empty\n    if (!selection.length && !this.env.cid)\n      return;\n\n    var n, a_cids = [],\n      label = action == 'delete' ? 'contactdeleting' : 'movingcontact',\n      lock = this.display_message(this.get_label(label), 'loading');\n\n    if (this.env.cid)\n      a_cids.push(this.env.cid);\n    else {\n      for (n=0; n<selection.length; n++) {\n        id = selection[n];\n        a_cids.push(id);\n        this.contact_list.remove_row(id, (n == selection.length-1));\n      }\n\n      // hide content frame if we delete the currently displayed contact\n      if (selection.length == 1)\n        this.show_contentframe(false);\n    }\n\n    if (!post_data)\n      post_data = {};\n\n    post_data._source = this.env.source;\n    post_data._from = this.env.action;\n    post_data._cid = a_cids.join(',');\n\n    if (this.env.group)\n      post_data._gid = this.env.group;\n\n    // also send search request to get the right records from the next page\n    if (this.env.search_request)\n      post_data._search = this.env.search_request;\n\n    // send request to server\n    this.http_post(action, post_data, lock)\n\n    return true;\n  };\n\n  // update a contact record in the list\n  this.update_contact_row = function(cid, cols_arr, newcid, source, data)\n  {\n    var list = this.contact_list;\n\n    cid = this.html_identifier(cid);\n\n    // when in searching mode, concat cid with the source name\n    if (!list.rows[cid]) {\n      cid = cid + '-' + source;\n      if (newcid)\n        newcid = newcid + '-' + source;\n    }\n\n    list.update_row(cid, cols_arr, newcid, true);\n    list.data[cid] = data;\n  };\n\n  // add row to contacts list\n  this.add_contact_row = function(cid, cols, classes, data)\n  {\n    if (!this.gui_objects.contactslist)\n      return false;\n\n    var c, col, list = this.contact_list,\n      row = { cols:[] };\n\n    row.id = 'rcmrow' + this.html_identifier(cid);\n    row.className = 'contact ' + (classes || '');\n\n    if (list.in_selection(cid))\n      row.className += ' selected';\n\n    // add each submitted col\n    for (c in cols) {\n      col = {};\n      col.className = String(c).toLowerCase();\n      col.innerHTML = cols[c];\n      row.cols.push(col);\n    }\n\n    // store data in list member\n    list.data[cid] = data;\n    list.insert_row(row);\n\n    this.enable_command('export', list.rowcount > 0);\n  };\n\n  this.init_contact_form = function()\n  {\n    var col;\n\n    if (this.env.coltypes) {\n      this.set_photo_actions($('#ff_photo').val());\n      for (col in this.env.coltypes)\n        this.init_edit_field(col, null);\n    }\n\n    $('.contactfieldgroup .row a.deletebutton').click(function() {\n      ref.delete_edit_field(this);\n      return false;\n    });\n\n    $('select.addfieldmenu').change(function() {\n      ref.insert_edit_field($(this).val(), $(this).attr('rel'), this);\n      this.selectedIndex = 0;\n    });\n\n    // enable date pickers on date fields\n    if ($.datepicker && this.env.date_format) {\n      $.datepicker.setDefaults({\n        dateFormat: this.env.date_format,\n        changeMonth: true,\n        changeYear: true,\n        yearRange: '-120:+10',\n        showOtherMonths: true,\n        selectOtherMonths: true\n//        onSelect: function(dateText) { $(this).focus().val(dateText); }\n      });\n      $('input.datepicker').datepicker();\n    }\n\n    // Submit search form on Enter\n    if (this.env.action == 'search')\n      $(this.gui_objects.editform).append($('<input type=\"submit\">').hide())\n        .submit(function() { $('input.mainaction').click(); return false; });\n  };\n\n  // group creation dialog\n  this.group_create = function()\n  {\n    var input = $('<input>').attr('type', 'text'),\n      content = $('<label>').text(this.get_label('namex')).append(input);\n\n    this.show_popup_dialog(content, this.get_label('newgroup'),\n      [{\n        text: this.get_label('save'),\n        'class': 'mainaction',\n        click: function() {\n          var name;\n\n          if (name = input.val()) {\n            ref.http_post('group-create', {_source: ref.env.source, _name: name},\n              ref.set_busy(true, 'loading'));\n          }\n\n          $(this).dialog('close');\n        }\n      }]\n    );\n  };\n\n  // group rename dialog\n  this.group_rename = function()\n  {\n    if (!this.env.group)\n      return;\n\n    var group_name = this.env.contactgroups['G' + this.env.source + this.env.group].name,\n      input = $('<input>').attr('type', 'text').val(group_name),\n      content = $('<label>').text(this.get_label('namex')).append(input);\n\n    this.show_popup_dialog(content, this.get_label('grouprename'),\n      [{\n        text: this.get_label('save'),\n        'class': 'mainaction',\n        click: function() {\n          var name;\n\n          if ((name = input.val()) && name != group_name) {\n            ref.http_post('group-rename', {_source: ref.env.source, _gid: ref.env.group, _name: name},\n              ref.set_busy(true, 'loading'));\n          }\n\n          $(this).dialog('close');\n        }\n      }],\n      {open: function() { input.select(); }}\n    );\n  };\n\n  this.group_delete = function()\n  {\n    if (this.env.group && confirm(this.get_label('deletegroupconfirm'))) {\n      var lock = this.set_busy(true, 'groupdeleting');\n      this.http_post('group-delete', {_source: this.env.source, _gid: this.env.group}, lock);\n    }\n  };\n\n  // callback from server upon group-delete command\n  this.remove_group_item = function(prop)\n  {\n    var key = 'G'+prop.source+prop.id;\n\n    if (this.treelist.remove(key)) {\n      this.triggerEvent('group_delete', { source:prop.source, id:prop.id });\n      delete this.env.contactfolders[key];\n      delete this.env.contactgroups[key];\n    }\n\n    this.list_contacts(prop.source, 0);\n  };\n\n  //remove selected contacts from current active group\n  this.group_remove_selected = function()\n  {\n    this.http_post('group-delmembers', {_cid: this.contact_list.selection,\n      _source: this.env.source, _gid: this.env.group});\n  };\n\n  //callback after deleting contact(s) from current group\n  this.remove_group_contacts = function(props)\n  {\n    if (this.env.group !== undefined && (this.env.group === props.gid)) {\n      var n, selection = this.contact_list.get_selection();\n      for (n=0; n<selection.length; n++) {\n        id = selection[n];\n        this.contact_list.remove_row(id, (n == selection.length-1));\n      }\n    }\n  };\n\n  // callback for creating a new contact group\n  this.insert_contact_group = function(prop)\n  {\n    prop.type = 'group';\n\n    var key = 'G'+prop.source+prop.id,\n      link = $('<a>').attr('href', '#')\n        .attr('rel', prop.source+':'+prop.id)\n        .click(function() { return ref.command('listgroup', prop, this); })\n        .html(prop.name);\n\n    this.env.contactfolders[key] = this.env.contactgroups[key] = prop;\n    this.treelist.insert({ id:key, html:link, classes:['contactgroup'] }, prop.source, 'contactgroup');\n\n    this.triggerEvent('group_insert', { id:prop.id, source:prop.source, name:prop.name, li:this.treelist.get_item(key) });\n  };\n\n  // callback for renaming a contact group\n  this.update_contact_group = function(prop)\n  {\n    var key = 'G'+prop.source+prop.id,\n      newnode = {};\n\n    // group ID has changed, replace link node and identifiers\n    if (prop.newid) {\n      var newkey = 'G'+prop.source+prop.newid,\n        newprop = $.extend({}, prop);\n\n      this.env.contactfolders[newkey] = this.env.contactfolders[key];\n      this.env.contactfolders[newkey].id = prop.newid;\n      this.env.group = prop.newid;\n\n      delete this.env.contactfolders[key];\n      delete this.env.contactgroups[key];\n\n      newprop.id = prop.newid;\n      newprop.type = 'group';\n\n      newnode.id = newkey;\n      newnode.html = $('<a>').attr('href', '#')\n        .attr('rel', prop.source+':'+prop.newid)\n        .click(function() { return ref.command('listgroup', newprop, this); })\n        .html(prop.name);\n    }\n    // update displayed group name\n    else {\n      $(this.treelist.get_item(key)).children().first().html(prop.name);\n      this.env.contactfolders[key].name = this.env.contactgroups[key].name = prop.name;\n    }\n\n    // update list node and re-sort it\n    this.treelist.update(key, newnode, true);\n\n    this.triggerEvent('group_update', { id:prop.id, source:prop.source, name:prop.name, li:this.treelist.get_item(key), newid:prop.newid });\n  };\n\n  this.update_group_commands = function()\n  {\n    var source = this.env.source != '' ? this.env.address_sources[this.env.source] : null,\n      supported = source && source.groups && !source.readonly;\n\n    this.enable_command('group-create', supported);\n    this.enable_command('group-rename', 'group-delete', supported && this.env.group);\n  };\n\n  this.init_edit_field = function(col, elem)\n  {\n    var label = this.env.coltypes[col].label;\n\n    if (!elem)\n      elem = $('.ff_' + col);\n\n    if (label)\n      elem.placeholder(label);\n  };\n\n  this.insert_edit_field = function(col, section, menu)\n  {\n    // just make pre-defined input field visible\n    var elem = $('#ff_'+col);\n    if (elem.length) {\n      elem.show().focus();\n      $(menu).children('option[value=\"'+col+'\"]').prop('disabled', true);\n    }\n    else {\n      var lastelem = $('.ff_'+col),\n        appendcontainer = $('#contactsection'+section+' .contactcontroller'+col);\n\n      if (!appendcontainer.length) {\n        var sect = $('#contactsection'+section),\n          lastgroup = $('.contactfieldgroup', sect).last();\n        appendcontainer = $('<fieldset>').addClass('contactfieldgroup contactcontroller'+col);\n        if (lastgroup.length)\n          appendcontainer.insertAfter(lastgroup);\n        else\n          sect.prepend(appendcontainer);\n      }\n\n      if (appendcontainer.length && appendcontainer.get(0).nodeName == 'FIELDSET') {\n        var input, colprop = this.env.coltypes[col],\n          input_id = 'ff_' + col + (colprop.count || 0),\n          row = $('<div>').addClass('row'),\n          cell = $('<div>').addClass('contactfieldcontent data'),\n          label = $('<div>').addClass('contactfieldlabel label');\n\n        if (colprop.subtypes_select)\n          label.html(colprop.subtypes_select);\n        else\n          label.html('<label for=\"' + input_id + '\">' + colprop.label + '</label>');\n\n        var name_suffix = colprop.limit != 1 ? '[]' : '';\n\n        if (colprop.type == 'text' || colprop.type == 'date') {\n          input = $('<input>')\n            .addClass('ff_'+col)\n            .attr({type: 'text', name: '_'+col+name_suffix, size: colprop.size, id: input_id})\n            .appendTo(cell);\n\n          this.init_edit_field(col, input);\n\n          if (colprop.type == 'date' && $.datepicker)\n            input.datepicker();\n        }\n        else if (colprop.type == 'textarea') {\n          input = $('<textarea>')\n            .addClass('ff_'+col)\n            .attr({ name: '_'+col+name_suffix, cols:colprop.size, rows:colprop.rows, id: input_id })\n            .appendTo(cell);\n\n          this.init_edit_field(col, input);\n        }\n        else if (colprop.type == 'composite') {\n          var i, childcol, cp, first, templ, cols = [], suffices = [];\n\n          // read template for composite field order\n          if ((templ = this.env[col+'_template'])) {\n            for (i=0; i < templ.length; i++) {\n              cols.push(templ[i][1]);\n              suffices.push(templ[i][2]);\n            }\n          }\n          else {  // list fields according to appearance in colprop\n            for (childcol in colprop.childs)\n              cols.push(childcol);\n          }\n\n          for (i=0; i < cols.length; i++) {\n            childcol = cols[i];\n            cp = colprop.childs[childcol];\n            input = $('<input>')\n              .addClass('ff_'+childcol)\n              .attr({ type: 'text', name: '_'+childcol+name_suffix, size: cp.size })\n              .appendTo(cell);\n            cell.append(suffices[i] || \" \");\n            this.init_edit_field(childcol, input);\n            if (!first) first = input;\n          }\n          input = first;  // set focus to the first of this composite fields\n        }\n        else if (colprop.type == 'select') {\n          input = $('<select>')\n            .addClass('ff_'+col)\n            .attr({ 'name': '_'+col+name_suffix, id: input_id })\n            .appendTo(cell);\n\n          var options = input.attr('options');\n          options[options.length] = new Option('---', '');\n          if (colprop.options)\n            $.each(colprop.options, function(i, val){ options[options.length] = new Option(val, i); });\n        }\n\n        if (input) {\n          var delbutton = $('<a href=\"#del\"></a>')\n            .addClass('contactfieldbutton deletebutton')\n            .attr({title: this.get_label('delete'), rel: col})\n            .html(this.env.delbutton)\n            .click(function(){ ref.delete_edit_field(this); return false })\n            .appendTo(cell);\n\n          row.append(label).append(cell).appendTo(appendcontainer.show());\n          input.first().focus();\n\n          // disable option if limit reached\n          if (!colprop.count) colprop.count = 0;\n          if (++colprop.count == colprop.limit && colprop.limit)\n            $(menu).children('option[value=\"'+col+'\"]').prop('disabled', true);\n        }\n      }\n    }\n  };\n\n  this.delete_edit_field = function(elem)\n  {\n    var col = $(elem).attr('rel'),\n      colprop = this.env.coltypes[col],\n      fieldset = $(elem).parents('fieldset.contactfieldgroup'),\n      addmenu = fieldset.parent().find('select.addfieldmenu');\n\n    // just clear input but don't hide the last field\n    if (--colprop.count <= 0 && colprop.visible)\n      $(elem).parent().children('input').val('').blur();\n    else {\n      $(elem).parents('div.row').remove();\n      // hide entire fieldset if no more rows\n      if (!fieldset.children('div.row').length)\n        fieldset.hide();\n    }\n\n    // enable option in add-field selector or insert it if necessary\n    if (addmenu.length) {\n      var option = addmenu.children('option[value=\"'+col+'\"]');\n      if (option.length)\n        option.prop('disabled', false);\n      else\n        option = $('<option>').attr('value', col).html(colprop.label).appendTo(addmenu);\n      addmenu.show();\n    }\n  };\n\n  this.upload_contact_photo = function(form)\n  {\n    if (form && form.elements._photo.value) {\n      this.async_upload_form(form, 'upload-photo', function(e) {\n        ref.set_busy(false, null, ref.file_upload_id);\n      });\n\n      // display upload indicator\n      this.file_upload_id = this.set_busy(true, 'uploading');\n    }\n  };\n\n  this.replace_contact_photo = function(id)\n  {\n    var img_src = id == '-del-' ? this.env.photo_placeholder :\n      this.env.comm_path + '&_action=photo&_source=' + this.env.source + '&_cid=' + (this.env.cid || 0) + '&_photo=' + id;\n\n    this.set_photo_actions(id);\n    $(this.gui_objects.contactphoto).children('img').attr('src', img_src);\n  };\n\n  this.photo_upload_end = function()\n  {\n    this.set_busy(false, null, this.file_upload_id);\n    delete this.file_upload_id;\n  };\n\n  this.set_photo_actions = function(id)\n  {\n    var n, buttons = this.buttons['upload-photo'];\n    for (n=0; buttons && n < buttons.length; n++)\n      $('a#'+buttons[n].id).html(this.get_label(id == '-del-' ? 'addphoto' : 'replacephoto'));\n\n    $('#ff_photo').val(id);\n    this.enable_command('upload-photo', this.env.coltypes.photo ? true : false);\n    this.enable_command('delete-photo', this.env.coltypes.photo && id != '-del-');\n  };\n\n  // load advanced search page\n  this.advanced_search = function()\n  {\n    var win, url = {_form: 1, _action: 'search'}, target = window;\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      url._framed = 1;\n      target = win;\n      this.contact_list.clear_selection();\n    }\n\n    this.location_href(url, target, true);\n\n    return true;\n  };\n\n  // unselect directory/group\n  this.unselect_directory = function()\n  {\n    this.select_folder('');\n    this.enable_command('search-delete', false);\n  };\n\n  // callback for creating a new saved search record\n  this.insert_saved_search = function(name, id)\n  {\n    var key = 'S'+id,\n      link = $('<a>').attr('href', '#')\n        .attr('rel', id)\n        .click(function() { return ref.command('listsearch', id, this); })\n        .html(name),\n      prop = { name:name, id:id };\n\n    this.savedsearchlist.insert({ id:key, html:link, classes:['contactsearch'] }, null, 'contactsearch');\n    this.select_folder(key,'',true);\n    this.enable_command('search-delete', true);\n    this.env.search_id = id;\n\n    this.triggerEvent('abook_search_insert', prop);\n  };\n\n  // creates a dialog for saved search\n  this.search_create = function()\n  {\n    var input = $('<input>').attr('type', 'text'),\n      content = $('<label>').text(this.get_label('namex')).append(input);\n\n    this.show_popup_dialog(content, this.get_label('searchsave'),\n      [{\n        text: this.get_label('save'),\n        'class': 'mainaction',\n        click: function() {\n          var name;\n\n          if (name = input.val()) {\n            ref.http_post('search-create', {_search: ref.env.search_request, _name: name},\n              ref.set_busy(true, 'loading'));\n          }\n\n          $(this).dialog('close');\n        }\n      }]\n    );\n  };\n\n  this.search_delete = function()\n  {\n    if (this.env.search_request) {\n      var lock = this.set_busy(true, 'savedsearchdeleting');\n      this.http_post('search-delete', {_sid: this.env.search_id}, lock);\n    }\n  };\n\n  // callback from server upon search-delete command\n  this.remove_search_item = function(id)\n  {\n    var li, key = 'S'+id;\n    if (this.savedsearchlist.remove(key)) {\n      this.triggerEvent('search_delete', { id:id, li:li });\n    }\n\n    this.env.search_id = null;\n    this.env.search_request = null;\n    this.list_contacts_clear();\n    this.reset_qsearch();\n    this.enable_command('search-delete', 'search-create', false);\n  };\n\n  this.listsearch = function(id)\n  {\n    var lock = this.set_busy(true, 'searching');\n\n    if (this.contact_list) {\n      this.list_contacts_clear();\n    }\n\n    this.reset_qsearch();\n\n    if (this.savedsearchlist) {\n      this.treelist.select('');\n      this.savedsearchlist.select('S'+id);\n    }\n    else\n      this.select_folder('S'+id, '', true);\n\n    // reset vars\n    this.env.current_page = 1;\n    this.http_request('search', {_sid: id}, lock);\n  };\n\n\n  /*********************************************************/\n  /*********        user settings methods          *********/\n  /*********************************************************/\n\n  // preferences section select and load options frame\n  this.section_select = function(list)\n  {\n    var win, id = list.get_single_selection(), target = window,\n      url = {_action: 'edit-prefs', _section: id};\n\n    if (id) {\n      if (win = this.get_frame_window(this.env.contentframe)) {\n        url._framed = 1;\n        target = win;\n      }\n      this.location_href(url, target, true);\n    }\n\n    return true;\n  };\n\n  this.identity_select = function(list)\n  {\n    var id;\n    if (id = list.get_single_selection()) {\n      this.enable_command('delete', list.rowcount > 1 && this.env.identities_level < 2);\n      this.load_identity(id, 'edit-identity');\n    }\n  };\n\n  // load identity record\n  this.load_identity = function(id, action)\n  {\n    if (action == 'edit-identity' && (!id || id == this.env.iid))\n      return false;\n\n    var win, target = window,\n      url = {_action: action, _iid: id};\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      url._framed = 1;\n      target = win;\n    }\n\n    if (id || action == 'add-identity') {\n      this.location_href(url, target, true);\n    }\n\n    return true;\n  };\n\n  this.delete_identity = function(id)\n  {\n    // exit if no identity is specified or if selection is empty\n    var selection = this.identity_list.get_selection();\n    if (!(selection.length || this.env.iid))\n      return;\n\n    if (!id)\n      id = this.env.iid ? this.env.iid : selection[0];\n\n    // submit request with appended token\n    if (id && confirm(this.get_label('deleteidentityconfirm')))\n      this.http_post('settings/delete-identity', { _iid: id }, true);\n  };\n\n  this.update_identity_row = function(id, name, add)\n  {\n    var list = this.identity_list,\n      rid = this.html_identifier(id);\n\n    if (add) {\n      list.insert_row({ id:'rcmrow'+rid, cols:[ { className:'mail', innerHTML:name } ] });\n      list.select(rid);\n    }\n    else {\n      list.update_row(rid, [ name ]);\n    }\n  };\n\n  this.update_response_row = function(response, oldkey)\n  {\n    var list = this.responses_list;\n\n    if (list && oldkey) {\n      list.update_row(oldkey, [ response.name ], response.key, true);\n    }\n    else if (list) {\n      list.insert_row({ id:'rcmrow'+response.key, cols:[ { className:'name', innerHTML:response.name } ] });\n      list.select(response.key);\n    }\n  };\n\n  this.remove_response = function(key)\n  {\n    var frame;\n\n    if (this.env.textresponses) {\n      delete this.env.textresponses[key];\n    }\n\n    if (this.responses_list) {\n      this.responses_list.remove_row(key);\n      if (this.env.contentframe && (frame = this.get_frame_window(this.env.contentframe))) {\n        frame.location.href = this.env.blankpage;\n      }\n    }\n\n    this.enable_command('delete', false);\n  };\n\n  this.remove_identity = function(id)\n  {\n    var frame, list = this.identity_list,\n      rid = this.html_identifier(id);\n\n    if (list && id) {\n      list.remove_row(rid);\n      if (this.env.contentframe && (frame = this.get_frame_window(this.env.contentframe))) {\n        frame.location.href = this.env.blankpage;\n      }\n    }\n\n    this.enable_command('delete', false);\n  };\n\n\n  /*********************************************************/\n  /*********        folder manager methods         *********/\n  /*********************************************************/\n\n  this.init_subscription_list = function()\n  {\n    var delim = RegExp.escape(this.env.delimiter);\n\n    this.last_sub_rx = RegExp('['+delim+']?[^'+delim+']+$');\n\n    this.subscription_list = new rcube_treelist_widget(this.gui_objects.subscriptionlist, {\n        selectable: true,\n        tabexit: false,\n        parent_focus: true,\n        id_prefix: 'rcmli',\n        id_encode: this.html_identifier_encode,\n        id_decode: this.html_identifier_decode,\n        searchbox: '#foldersearch'\n    });\n\n    this.subscription_list\n      .addEventListener('select', function(node) { ref.subscription_select(node.id); })\n      .addEventListener('collapse', function(node) { ref.folder_collapsed(node) })\n      .addEventListener('expand', function(node) { ref.folder_collapsed(node) })\n      .addEventListener('search', function(p) { if (p.query) ref.subscription_select(); })\n      .draggable({cancel: 'li.mailbox.root'})\n      .droppable({\n        // @todo: find better way, accept callback is executed for every folder\n        // on the list when dragging starts (and stops), this is slow, but\n        // I didn't find a method to check droptarget on over event\n        accept: function(node) {\n          if (!$(node).is('.mailbox'))\n            return false;\n\n          var source_folder = ref.folder_id2name($(node).attr('id')),\n            dest_folder = ref.folder_id2name(this.id),\n            source = ref.env.subscriptionrows[source_folder],\n            dest = ref.env.subscriptionrows[dest_folder];\n\n          return source && !source[2]\n            && dest_folder != source_folder.replace(ref.last_sub_rx, '')\n            && !dest_folder.startsWith(source_folder + ref.env.delimiter);\n        },\n        drop: function(e, ui) {\n          var source = ref.folder_id2name(ui.draggable.attr('id')),\n            dest = ref.folder_id2name(this.id);\n\n          ref.subscription_move_folder(source, dest);\n        }\n      });\n  };\n\n  this.folder_id2name = function(id)\n  {\n    return id ? ref.html_identifier_decode(id.replace(/^rcmli/, '')) : null;\n  };\n\n  this.subscription_select = function(id)\n  {\n    var folder;\n\n    if (id && id != '*' && (folder = this.env.subscriptionrows[id])) {\n      this.env.mailbox = id;\n      this.show_folder(id);\n      this.enable_command('delete-folder', !folder[2]);\n    }\n    else {\n      this.env.mailbox = null;\n      this.show_contentframe(false);\n      this.enable_command('delete-folder', 'purge', false);\n    }\n  };\n\n  this.subscription_move_folder = function(from, to)\n  {\n    if (from && to !== null && from != to && to != from.replace(this.last_sub_rx, '')) {\n      var path = from.split(this.env.delimiter),\n        basename = path.pop(),\n        newname = to === '' || to === '*' ? basename : to + this.env.delimiter + basename;\n\n      if (newname != from) {\n        this.http_post('rename-folder', {_folder_oldname: from, _folder_newname: newname},\n          this.set_busy(true, 'foldermoving'));\n      }\n    }\n  };\n\n  // tell server to create and subscribe a new mailbox\n  this.create_folder = function()\n  {\n    this.show_folder('', this.env.mailbox);\n  };\n\n  // delete a specific mailbox with all its messages\n  this.delete_folder = function(name)\n  {\n    if (!name)\n      name = this.env.mailbox;\n\n    if (name && confirm(this.get_label('deletefolderconfirm'))) {\n      this.http_post('delete-folder', {_mbox: name}, this.set_busy(true, 'folderdeleting'));\n    }\n  };\n\n  // Add folder row to the table and initialize it\n  this.add_folder_row = function (id, name, display_name, is_protected, subscribed, class_name, refrow, subfolders)\n  {\n    if (!this.gui_objects.subscriptionlist)\n      return false;\n\n    // reset searching\n    if (this.subscription_list.is_search()) {\n      this.subscription_select();\n      this.subscription_list.reset_search();\n    }\n\n    // disable drag-n-drop temporarily\n    this.subscription_list.draggable('destroy').droppable('destroy');\n\n    var row, n, tmp, tmp_name, rowid, collator, pos, p, parent = '',\n      folders = [], list = [], slist = [],\n      list_element = $(this.gui_objects.subscriptionlist);\n      row = refrow ? refrow : $($('li', list_element).get(1)).clone(true);\n\n    if (!row.length) {\n      // Refresh page if we don't have a table row to clone\n      this.goto_url('folders');\n      return false;\n    }\n\n    // set ID, reset css class\n    row.attr({id: 'rcmli' + this.html_identifier_encode(id), 'class': class_name});\n\n    if (!refrow || !refrow.length) {\n      // remove old data, subfolders and toggle\n      $('ul,div.treetoggle', row).remove();\n      row.removeData('filtered');\n    }\n\n    // set folder name\n    $('a:first', row).text(display_name);\n\n    // update subscription checkbox\n    $('input[name=\"_subscribed[]\"]:first', row).val(id)\n      .prop({checked: subscribed ? true : false, disabled: is_protected ? true : false});\n\n    // add to folder/row-ID map\n    this.env.subscriptionrows[id] = [name, display_name, false];\n\n    // copy folders data to an array for sorting\n    $.each(this.env.subscriptionrows, function(k, v) { v[3] = k; folders.push(v); });\n\n    try {\n      // use collator if supported (FF29, IE11, Opera15, Chrome24)\n      collator = new Intl.Collator(this.env.locale.replace('_', '-'));\n    }\n    catch (e) {};\n\n    // sort folders\n    folders.sort(function(a, b) {\n      var i, f1, f2,\n        path1 = a[0].split(ref.env.delimiter),\n        path2 = b[0].split(ref.env.delimiter),\n        len = path1.length;\n\n      for (i=0; i<len; i++) {\n        f1 = path1[i];\n        f2 = path2[i];\n\n        if (f1 !== f2) {\n          if (f2 === undefined)\n            return 1;\n          if (collator)\n            return collator.compare(f1, f2);\n          else\n            return f1 < f2 ? -1 : 1;\n        }\n        else if (i == len-1) {\n          return -1\n        }\n      }\n    });\n\n    for (n in folders) {\n      p = folders[n][3];\n      // protected folder\n      if (folders[n][2]) {\n        tmp_name = p + this.env.delimiter;\n        // prefix namespace cannot have subfolders (#1488349)\n        if (tmp_name == this.env.prefix_ns)\n          continue;\n        slist.push(p);\n        tmp = tmp_name;\n      }\n      // protected folder's child\n      else if (tmp && p.startsWith(tmp))\n        slist.push(p);\n      // other\n      else {\n        list.push(p);\n        tmp = null;\n      }\n    }\n\n    // check if subfolder of a protected folder\n    for (n=0; n<slist.length; n++) {\n      if (id.startsWith(slist[n] + this.env.delimiter))\n        rowid = slist[n];\n    }\n\n    // find folder position after sorting\n    for (n=0; !rowid && n<list.length; n++) {\n      if (n && list[n] == id)\n        rowid = list[n-1];\n    }\n\n    // add row to the table\n    if (rowid && (n = this.subscription_list.get_item(rowid, true))) {\n      // find parent folder\n      if (pos = id.lastIndexOf(this.env.delimiter)) {\n        parent = id.substring(0, pos);\n        parent = this.subscription_list.get_item(parent, true);\n\n        // add required tree elements to the parent if not already there\n        if (!$('div.treetoggle', parent).length) {\n          $('<div>&nbsp;</div>').addClass('treetoggle collapsed').appendTo(parent);\n        }\n        if (!$('ul', parent).length) {\n          $('<ul>').css('display', 'none').appendTo(parent);\n        }\n      }\n\n      if (parent && n == parent) {\n        $('ul:first', parent).append(row);\n      }\n      else {\n        while (p = $(n).parent().parent().get(0)) {\n          if (parent && p == parent)\n            break;\n          if (!$(p).is('li.mailbox'))\n            break;\n          n = p;\n        }\n\n        $(n).after(row);\n      }\n    }\n    else {\n      list_element.append(row);\n    }\n\n    // add subfolders\n    $.extend(this.env.subscriptionrows, subfolders || {});\n\n    // update list widget\n    this.subscription_list.reset(true);\n    this.subscription_select();\n\n    // expand parent\n    if (parent) {\n      this.subscription_list.expand(this.folder_id2name(parent.id));\n    }\n\n    row = row.show().get(0);\n    if (row.scrollIntoView)\n      row.scrollIntoView();\n\n    return row;\n  };\n\n  // replace an existing table row with a new folder line (with subfolders)\n  this.replace_folder_row = function(oldid, id, name, display_name, is_protected, class_name)\n  {\n    if (!this.gui_objects.subscriptionlist) {\n      if (this.is_framed()) {\n        // @FIXME: for some reason this 'parent' variable need to be prefixed with 'window.'\n        return window.parent.rcmail.replace_folder_row(oldid, id, name, display_name, is_protected, class_name);\n      }\n\n      return false;\n    }\n\n    // reset searching\n    if (this.subscription_list.is_search()) {\n      this.subscription_select();\n      this.subscription_list.reset_search();\n    }\n\n    var subfolders = {},\n      row = this.subscription_list.get_item(oldid, true),\n      parent = $(row).parent(),\n      old_folder = this.env.subscriptionrows[oldid],\n      prefix_len_id = oldid.length,\n      prefix_len_name = old_folder[0].length,\n      subscribed = $('input[name=\"_subscribed[]\"]:first', row).prop('checked');\n\n    // no renaming, only update class_name\n    if (oldid == id) {\n      $(row).attr('class', class_name || '');\n      return;\n    }\n\n    // update subfolders\n    $('li', row).each(function() {\n      var fname = ref.folder_id2name(this.id),\n        folder = ref.env.subscriptionrows[fname],\n        newid = id + fname.slice(prefix_len_id);\n\n      this.id = 'rcmli' + ref.html_identifier_encode(newid);\n      $('input[name=\"_subscribed[]\"]:first', this).val(newid);\n      folder[0] = name + folder[0].slice(prefix_len_name);\n\n      subfolders[newid] = folder;\n      delete ref.env.subscriptionrows[fname];\n    });\n\n    // get row off the list\n    row = $(row).detach();\n\n    delete this.env.subscriptionrows[oldid];\n\n    // remove parent list/toggle elements if not needed\n    if (parent.get(0) != this.gui_objects.subscriptionlist && !$('li', parent).length) {\n      $('ul,div.treetoggle', parent.parent()).remove();\n    }\n\n    // move the existing table row\n    this.add_folder_row(id, name, display_name, is_protected, subscribed, class_name, row, subfolders);\n  };\n\n  // remove the table row of a specific mailbox from the table\n  this.remove_folder_row = function(folder)\n  {\n    // reset searching\n    if (this.subscription_list.is_search()) {\n      this.subscription_select();\n      this.subscription_list.reset_search();\n    }\n\n    var list = [], row = this.subscription_list.get_item(folder, true);\n\n    // get subfolders if any\n    $('li', row).each(function() { list.push(ref.folder_id2name(this.id)); });\n\n    // remove folder row (and subfolders)\n    this.subscription_list.remove(folder);\n\n    // update local list variable\n    list.push(folder);\n    $.each(list, function(i, v) { delete ref.env.subscriptionrows[v]; });\n  };\n\n  this.subscribe = function(folder)\n  {\n    if (folder) {\n      var lock = this.display_message(this.get_label('foldersubscribing'), 'loading');\n      this.http_post('subscribe', {_mbox: folder}, lock);\n    }\n  };\n\n  this.unsubscribe = function(folder)\n  {\n    if (folder) {\n      var lock = this.display_message(this.get_label('folderunsubscribing'), 'loading');\n      this.http_post('unsubscribe', {_mbox: folder}, lock);\n    }\n  };\n\n  // when user select a folder in manager\n  this.show_folder = function(folder, path, force)\n  {\n    var win, target = window,\n      url = '&_action=edit-folder&_mbox='+urlencode(folder);\n\n    if (path)\n      url += '&_path='+urlencode(path);\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      target = win;\n      url += '&_framed=1';\n    }\n\n    if (String(target.location.href).indexOf(url) >= 0 && !force)\n      this.show_contentframe(true);\n    else\n      this.location_href(this.env.comm_path+url, target, true);\n  };\n\n  // disables subscription checkbox (for protected folder)\n  this.disable_subscription = function(folder)\n  {\n    var row = this.subscription_list.get_item(folder, true);\n    if (row)\n      $('input[name=\"_subscribed[]\"]:first', row).prop('disabled', true);\n  };\n\n  this.folder_size = function(folder)\n  {\n    var lock = this.set_busy(true, 'loading');\n    this.http_post('folder-size', {_mbox: folder}, lock);\n  };\n\n  this.folder_size_update = function(size)\n  {\n    $('#folder-size').replaceWith(size);\n  };\n\n  // filter folders by namespace\n  this.folder_filter = function(prefix)\n  {\n    this.subscription_list.reset_search();\n\n    this.subscription_list.container.children('li').each(function() {\n      var i, folder = ref.folder_id2name(this.id);\n      // show all folders\n      if (prefix == '---') {\n      }\n      // got namespace prefix\n      else if (prefix) {\n        if (folder !== prefix) {\n          $(this).data('filtered', true).hide();\n          return\n        }\n      }\n      // no namespace prefix, filter out all other namespaces\n      else {\n        // first get all namespace roots\n        for (i in ref.env.ns_roots) {\n          if (folder === ref.env.ns_roots[i]) {\n            $(this).data('filtered', true).hide();\n            return;\n          }\n        }\n      }\n\n      $(this).removeData('filtered').show();\n    });\n  };\n\n  /*********************************************************/\n  /*********           GUI functionality           *********/\n  /*********************************************************/\n\n  var init_button = function(cmd, prop)\n  {\n    var elm = document.getElementById(prop.id);\n    if (!elm)\n      return;\n\n    var preload = false;\n    if (prop.type == 'image') {\n      elm = elm.parentNode;\n      preload = true;\n    }\n\n    elm._command = cmd;\n    elm._id = prop.id;\n    if (prop.sel) {\n      elm.onmousedown = function(e) { return ref.button_sel(this._command, this._id); };\n      elm.onmouseup = function(e) { return ref.button_out(this._command, this._id); };\n      if (preload)\n        new Image().src = prop.sel;\n    }\n    if (prop.over) {\n      elm.onmouseover = function(e) { return ref.button_over(this._command, this._id); };\n      elm.onmouseout = function(e) { return ref.button_out(this._command, this._id); };\n      if (preload)\n        new Image().src = prop.over;\n    }\n  };\n\n  // set event handlers on registered buttons\n  this.init_buttons = function()\n  {\n    for (var cmd in this.buttons) {\n      if (typeof cmd !== 'string')\n        continue;\n\n      for (var i=0; i<this.buttons[cmd].length; i++) {\n        init_button(cmd, this.buttons[cmd][i]);\n      }\n    }\n  };\n\n  // set button to a specific state\n  this.set_button = function(command, state)\n  {\n    var n, button, obj, $obj, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      obj = document.getElementById(button.id);\n\n      if (!obj || button.status === state)\n        continue;\n\n      // get default/passive setting of the button\n      if (button.type == 'image' && !button.status) {\n        button.pas = obj._original_src ? obj._original_src : obj.src;\n        // respect PNG fix on IE browsers\n        if (obj.runtimeStyle && obj.runtimeStyle.filter && obj.runtimeStyle.filter.match(/src=['\"]([^'\"]+)['\"]/))\n          button.pas = RegExp.$1;\n      }\n      else if (!button.status)\n        button.pas = String(obj.className);\n\n      button.status = state;\n\n      // set image according to button state\n      if (button.type == 'image' && button[state]) {\n        obj.src = button[state];\n      }\n      // set class name according to button state\n      else if (button[state] !== undefined) {\n        obj.className = button[state];\n      }\n      // disable/enable input buttons\n      if (button.type == 'input') {\n        obj.disabled = state == 'pas';\n      }\n      else if (button.type == 'uibutton') {\n        button.status = state;\n        $(obj).button('option', 'disabled', state == 'pas');\n      }\n      else {\n        $obj = $(obj);\n        $obj\n          .attr('tabindex', state == 'pas' || state == 'sel' ? '-1' : ($obj.attr('data-tabindex') || '0'))\n          .attr('aria-disabled', state == 'pas' || state == 'sel' ? 'true' : 'false');\n      }\n    }\n  };\n\n  // display a specific alttext\n  this.set_alttext = function(command, label)\n  {\n    var n, button, obj, link, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      obj = document.getElementById(button.id);\n\n      if (button.type == 'image' && obj) {\n        obj.setAttribute('alt', this.get_label(label));\n        if ((link = obj.parentNode) && link.tagName.toLowerCase() == 'a')\n          link.setAttribute('title', this.get_label(label));\n      }\n      else if (obj)\n        obj.setAttribute('title', this.get_label(label));\n    }\n  };\n\n  // mouse over button\n  this.button_over = function(command, id)\n  {\n    this.button_event(command, id, 'over');\n  };\n\n  // mouse down on button\n  this.button_sel = function(command, id)\n  {\n    this.button_event(command, id, 'sel');\n  };\n\n  // mouse out of button\n  this.button_out = function(command, id)\n  {\n    this.button_event(command, id, 'act');\n  };\n\n  // event of button\n  this.button_event = function(command, id, event)\n  {\n    var n, button, obj, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      if (button.id == id && button.status == 'act') {\n        if (button[event] && (obj = document.getElementById(button.id))) {\n          obj[button.type == 'image' ? 'src' : 'className'] = button[event];\n        }\n\n        if (event == 'sel') {\n          this.buttons_sel[id] = command;\n        }\n      }\n    }\n  };\n\n  // write to the document/window title\n  this.set_pagetitle = function(title)\n  {\n    if (title && document.title)\n      document.title = title;\n  };\n\n  // display a system message, list of types in common.css (below #message definition)\n  this.display_message = function(msg, type, timeout, key)\n  {\n    // pass command to parent window\n    if (this.is_framed())\n      return parent.rcmail.display_message(msg, type, timeout);\n\n    if (!this.gui_objects.message) {\n      // save message in order to display after page loaded\n      if (type != 'loading')\n        this.pending_message = [msg, type, timeout, key];\n      return 1;\n    }\n\n    if (!type)\n      type = 'notice';\n\n    if (!key)\n      key = this.html_identifier(msg);\n\n    var date = new Date(),\n      id = type + date.getTime();\n\n    if (!timeout) {\n      switch (type) {\n        case 'error':\n        case 'warning':\n          timeout = this.message_time * 2;\n          break;\n\n        case 'uploading':\n          timeout = 0;\n          break;\n\n        default:\n          timeout = this.message_time;\n      }\n    }\n\n    if (type == 'loading') {\n      key = 'loading';\n      timeout = this.env.request_timeout * 1000;\n      if (!msg)\n        msg = this.get_label('loading');\n    }\n\n    // The same message is already displayed\n    if (this.messages[key]) {\n      // replace label\n      if (this.messages[key].obj)\n        this.messages[key].obj.html(msg);\n      // store label in stack\n      if (type == 'loading') {\n        this.messages[key].labels.push({'id': id, 'msg': msg});\n      }\n      // add element and set timeout\n      this.messages[key].elements.push(id);\n      setTimeout(function() { ref.hide_message(id, type == 'loading'); }, timeout);\n      return id;\n    }\n\n    // create DOM object and display it\n    var obj = $('<div>').addClass(type).html(msg).data('key', key),\n      cont = $(this.gui_objects.message).append(obj).show();\n\n    this.messages[key] = {'obj': obj, 'elements': [id]};\n\n    if (type == 'loading') {\n      this.messages[key].labels = [{'id': id, 'msg': msg}];\n    }\n    else if (type != 'uploading') {\n      obj.click(function() { return ref.hide_message(obj); })\n        .attr('role', 'alert');\n    }\n\n    this.triggerEvent('message', { message:msg, type:type, timeout:timeout, object:obj });\n\n    if (timeout > 0)\n      setTimeout(function() { ref.hide_message(id, type != 'loading'); }, timeout);\n\n    return id;\n  };\n\n  // make a message to disapear\n  this.hide_message = function(obj, fade)\n  {\n    // pass command to parent window\n    if (this.is_framed())\n      return parent.rcmail.hide_message(obj, fade);\n\n    if (!this.gui_objects.message)\n      return;\n\n    var k, n, i, o, m = this.messages;\n\n    // Hide message by object, don't use for 'loading'!\n    if (typeof obj === 'object') {\n      o = $(obj);\n      k = o.data('key');\n      this.hide_message_object(o, fade);\n      if (m[k])\n        delete m[k];\n    }\n    // Hide message by id\n    else {\n      for (k in m) {\n        for (n in m[k].elements) {\n          if (m[k] && m[k].elements[n] == obj) {\n            m[k].elements.splice(n, 1);\n            // hide DOM element if last instance is removed\n            if (!m[k].elements.length) {\n              this.hide_message_object(m[k].obj, fade);\n              delete m[k];\n            }\n            // set pending action label for 'loading' message\n            else if (k == 'loading') {\n              for (i in m[k].labels) {\n                if (m[k].labels[i].id == obj) {\n                  delete m[k].labels[i];\n                }\n                else {\n                  o = m[k].labels[i].msg;\n                  m[k].obj.html(o);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  // hide message object and remove from the DOM\n  this.hide_message_object = function(o, fade)\n  {\n    if (fade)\n      o.fadeOut(600, function() {$(this).remove(); });\n    else\n      o.hide().remove();\n  };\n\n  // remove all messages immediately\n  this.clear_messages = function()\n  {\n    // pass command to parent window\n    if (this.is_framed())\n      return parent.rcmail.clear_messages();\n\n    var k, n, m = this.messages;\n\n    for (k in m)\n      for (n in m[k].elements)\n        if (m[k].obj)\n          this.hide_message_object(m[k].obj);\n\n    this.messages = {};\n  };\n\n  // display uploading message with progress indicator\n  // data should contain: name, total, current, percent, text\n  this.display_progress = function(data)\n  {\n    if (!data || !data.name)\n      return;\n\n    var msg = this.messages['progress' + data.name];\n\n    if (!data.label)\n      data.label = this.get_label('uploadingmany');\n\n    if (!msg) {\n      if (!data.percent || data.percent < 100)\n        this.display_message(data.label, 'uploading', 0, 'progress' + data.name);\n      return;\n    }\n\n    if (!data.total || data.percent >= 100) {\n      this.hide_message(msg.obj);\n      return;\n    }\n\n    if (data.text)\n      data.label += ' ' + data.text;\n\n    msg.obj.text(data.label);\n  };\n\n  // open a jquery UI dialog with the given content\n  this.show_popup_dialog = function(content, title, buttons, options)\n  {\n    // forward call to parent window\n    if (this.is_framed()) {\n      return parent.rcmail.show_popup_dialog(content, title, buttons, options);\n    }\n\n    var popup = $('<div class=\"popup\">');\n\n    if (typeof content == 'object')\n      popup.append(content);\n    else\n      popup.html(content);\n\n    options = $.extend({\n        title: title,\n        buttons: buttons,\n        modal: true,\n        resizable: true,\n        width: 500,\n        close: function(event, ui) { $(this).remove(); }\n      }, options || {});\n\n    popup.dialog(options);\n\n    // resize and center popup\n    var win = $(window), w = win.width(), h = win.height(),\n      width = popup.width(), height = popup.height();\n\n    popup.dialog('option', {\n      height: Math.min(h - 40, height + 75 + (buttons ? 50 : 0)),\n      width: Math.min(w - 20, width + 36)\n    });\n\n    // assign special classes to dialog buttons\n    $.each(options.button_classes || [], function(i, v) {\n      if (v) $($('.ui-dialog-buttonpane button.ui-button', popup.parent()).get(i)).addClass(v);\n    });\n\n    return popup;\n  };\n\n  // enable/disable buttons for page shifting\n  this.set_page_buttons = function()\n  {\n    this.enable_command('nextpage', 'lastpage', this.env.pagecount > this.env.current_page);\n    this.enable_command('previouspage', 'firstpage', this.env.current_page > 1);\n\n    this.update_pagejumper();\n  };\n\n  // mark a mailbox as selected and set environment variable\n  this.select_folder = function(name, prefix, encode)\n  {\n    if (this.savedsearchlist) {\n      this.savedsearchlist.select('');\n    }\n\n    if (this.treelist) {\n      this.treelist.select(name);\n    }\n    else if (this.gui_objects.folderlist) {\n      $('li.selected', this.gui_objects.folderlist).removeClass('selected');\n      $(this.get_folder_li(name, prefix, encode)).addClass('selected');\n\n      // trigger event hook\n      this.triggerEvent('selectfolder', { folder:name, prefix:prefix });\n    }\n  };\n\n  // adds a class to selected folder\n  this.mark_folder = function(name, class_name, prefix, encode)\n  {\n    $(this.get_folder_li(name, prefix, encode)).addClass(class_name);\n    this.triggerEvent('markfolder', {folder: name, mark: class_name, status: true});\n  };\n\n  // adds a class to selected folder\n  this.unmark_folder = function(name, class_name, prefix, encode)\n  {\n    $(this.get_folder_li(name, prefix, encode)).removeClass(class_name);\n    this.triggerEvent('markfolder', {folder: name, mark: class_name, status: false});\n  };\n\n  // helper method to find a folder list item\n  this.get_folder_li = function(name, prefix, encode)\n  {\n    if (!prefix)\n      prefix = 'rcmli';\n\n    if (this.gui_objects.folderlist) {\n      name = this.html_identifier(name, encode);\n      return document.getElementById(prefix+name);\n    }\n  };\n\n  // for reordering column array (Konqueror workaround)\n  // and for setting some message list global variables\n  this.set_message_coltypes = function(listcols, repl, smart_col)\n  {\n    var list = this.message_list,\n      thead = list ? list.thead : null,\n      repl, cell, col, n, len, tr;\n\n    this.env.listcols = listcols;\n\n    if (!this.env.coltypes)\n      this.env.coltypes = {};\n\n    // replace old column headers\n    if (thead) {\n      if (repl) {\n        thead.innerHTML = '';\n        tr = document.createElement('tr');\n\n        for (c=0, len=repl.length; c < len; c++) {\n          cell = document.createElement('th');\n          cell.innerHTML = repl[c].html || '';\n          if (repl[c].id) cell.id = repl[c].id;\n          if (repl[c].className) cell.className = repl[c].className;\n          tr.appendChild(cell);\n        }\n        thead.appendChild(tr);\n      }\n\n      for (n=0, len=this.env.listcols.length; n<len; n++) {\n        col = this.env.listcols[n];\n        if ((cell = thead.rows[0].cells[n]) && (col == 'from' || col == 'to' || col == 'fromto')) {\n          $(cell).attr('rel', col).find('span,a').text(this.get_label(col == 'fromto' ? smart_col : col));\n        }\n      }\n    }\n\n    this.env.subject_col = null;\n    this.env.flagged_col = null;\n    this.env.status_col = null;\n\n    if (this.env.coltypes.folder)\n      this.env.coltypes.folder.hidden = !(this.env.search_request || this.env.search_id) || this.env.search_scope == 'base';\n\n    if ((n = $.inArray('subject', this.env.listcols)) >= 0) {\n      this.env.subject_col = n;\n      if (list)\n        list.subject_col = n;\n    }\n    if ((n = $.inArray('flag', this.env.listcols)) >= 0)\n      this.env.flagged_col = n;\n    if ((n = $.inArray('status', this.env.listcols)) >= 0)\n      this.env.status_col = n;\n\n    if (list) {\n      list.hide_column('folder', (this.env.coltypes.folder && this.env.coltypes.folder.hidden) || $.inArray('folder', this.env.listcols) < 0);\n      list.init_header();\n    }\n  };\n\n  // replace content of row count display\n  this.set_rowcount = function(text, mbox)\n  {\n    // #1487752\n    if (mbox && mbox != this.env.mailbox)\n      return false;\n\n    $(this.gui_objects.countdisplay).html(text);\n\n    // update page navigation buttons\n    this.set_page_buttons();\n  };\n\n  // replace content of mailboxname display\n  this.set_mailboxname = function(content)\n  {\n    if (this.gui_objects.mailboxname && content)\n      this.gui_objects.mailboxname.innerHTML = content;\n  };\n\n  // replace content of quota display\n  this.set_quota = function(content)\n  {\n    if (this.gui_objects.quotadisplay && content && content.type == 'text')\n      $(this.gui_objects.quotadisplay).text((content.percent||0) + '%').attr('title', content.title);\n\n    this.triggerEvent('setquota', content);\n    this.env.quota_content = content;\n  };\n\n  // update trash folder state\n  this.set_trash_count = function(count)\n  {\n    this[(count ? 'un' : '') + 'mark_folder'](this.env.trash_mailbox, 'empty', '', true);\n  };\n\n  // update the mailboxlist\n  this.set_unread_count = function(mbox, count, set_title, mark)\n  {\n    if (!this.gui_objects.mailboxlist)\n      return false;\n\n    this.env.unread_counts[mbox] = count;\n    this.set_unread_count_display(mbox, set_title);\n\n    if (mark)\n      this.mark_folder(mbox, mark, '', true);\n    else if (!count)\n      this.unmark_folder(mbox, 'recent', '', true);\n  };\n\n  // update the mailbox count display\n  this.set_unread_count_display = function(mbox, set_title)\n  {\n    var reg, link, text_obj, item, mycount, childcount, div;\n\n    if (item = this.get_folder_li(mbox, '', true)) {\n      mycount = this.env.unread_counts[mbox] ? this.env.unread_counts[mbox] : 0;\n      link = $(item).children('a').eq(0);\n      text_obj = link.children('span.unreadcount');\n      if (!text_obj.length && mycount)\n        text_obj = $('<span>').addClass('unreadcount').appendTo(link);\n      reg = /\\s+\\([0-9]+\\)$/i;\n\n      childcount = 0;\n      if ((div = item.getElementsByTagName('div')[0]) &&\n          div.className.match(/collapsed/)) {\n        // add children's counters\n        for (var k in this.env.unread_counts)\n          if (k.startsWith(mbox + this.env.delimiter))\n            childcount += this.env.unread_counts[k];\n      }\n\n      if (mycount && text_obj.length)\n        text_obj.html(this.env.unreadwrap.replace(/%[sd]/, mycount));\n      else if (text_obj.length)\n        text_obj.remove();\n\n      // set parent's display\n      reg = new RegExp(RegExp.escape(this.env.delimiter) + '[^' + RegExp.escape(this.env.delimiter) + ']+$');\n      if (mbox.match(reg))\n        this.set_unread_count_display(mbox.replace(reg, ''), false);\n\n      // set the right classes\n      if ((mycount+childcount)>0)\n        $(item).addClass('unread');\n      else\n        $(item).removeClass('unread');\n    }\n\n    // set unread count to window title\n    reg = /^\\([0-9]+\\)\\s+/i;\n    if (set_title && document.title) {\n      var new_title = '',\n        doc_title = String(document.title);\n\n      if (mycount && doc_title.match(reg))\n        new_title = doc_title.replace(reg, '('+mycount+') ');\n      else if (mycount)\n        new_title = '('+mycount+') '+doc_title;\n      else\n        new_title = doc_title.replace(reg, '');\n\n      this.set_pagetitle(new_title);\n    }\n  };\n\n  // display fetched raw headers\n  this.set_headers = function(content)\n  {\n    if (this.gui_objects.all_headers_row && this.gui_objects.all_headers_box && content)\n      $(this.gui_objects.all_headers_box).html(content).show();\n  };\n\n  // display all-headers row and fetch raw message headers\n  this.show_headers = function(props, elem)\n  {\n    if (!this.gui_objects.all_headers_row || !this.gui_objects.all_headers_box || !this.env.uid)\n      return;\n\n    $(elem).removeClass('show-headers').addClass('hide-headers');\n    $(this.gui_objects.all_headers_row).show();\n    elem.onclick = function() { ref.command('hide-headers', '', elem); };\n\n    // fetch headers only once\n    if (!this.gui_objects.all_headers_box.innerHTML) {\n      this.http_post('headers', {_uid: this.env.uid, _mbox: this.env.mailbox},\n        this.display_message(this.get_label('loading'), 'loading')\n      );\n    }\n  };\n\n  // hide all-headers row\n  this.hide_headers = function(props, elem)\n  {\n    if (!this.gui_objects.all_headers_row || !this.gui_objects.all_headers_box)\n      return;\n\n    $(elem).removeClass('hide-headers').addClass('show-headers');\n    $(this.gui_objects.all_headers_row).hide();\n    elem.onclick = function() { ref.command('show-headers', '', elem); };\n  };\n\n  // create folder selector popup, position and display it\n  this.folder_selector = function(event, callback)\n  {\n    var container = this.folder_selector_element;\n\n    if (!container) {\n      var rows = [],\n        delim = this.env.delimiter,\n        ul = $('<ul class=\"toolbarmenu\">'),\n        link = document.createElement('a');\n\n      container = $('<div id=\"folder-selector\" class=\"popupmenu\"></div>');\n      link.href = '#';\n      link.className = 'icon';\n\n      // loop over sorted folders list\n      $.each(this.env.mailboxes_list, function() {\n        var n = 0, s = 0,\n          folder = ref.env.mailboxes[this],\n          id = folder.id,\n          a = $(link.cloneNode(false)),\n          row = $('<li>');\n\n        if (folder.virtual)\n          a.addClass('virtual').attr('aria-disabled', 'true').attr('tabindex', '-1');\n        else\n          a.addClass('active').data('id', folder.id);\n\n        if (folder['class'])\n          a.addClass(folder['class']);\n\n        // calculate/set indentation level\n        while ((s = id.indexOf(delim, s)) >= 0) {\n          n++; s++;\n        }\n        a.css('padding-left', n ? (n * 16) + 'px' : 0);\n\n        // add folder name element\n        a.append($('<span>').text(folder.name));\n\n        row.append(a);\n        rows.push(row);\n      });\n\n      ul.append(rows).appendTo(container);\n\n      // temporarily show element to calculate its size\n      container.css({left: '-1000px', top: '-1000px'})\n        .appendTo($('body')).show();\n\n      // set max-height if the list is long\n      if (rows.length > 10)\n        container.css('max-height', $('li', container)[0].offsetHeight * 10 + 9);\n\n      // register delegate event handler for folder item clicks\n      container.on('click', 'a.active', function(e){\n        container.data('callback')($(this).data('id'));\n        return false;\n      });\n\n      this.folder_selector_element = container;\n    }\n\n    container.data('callback', callback);\n\n    // position menu on the screen\n    this.show_menu('folder-selector', true, event);\n  };\n\n\n  /***********************************************/\n  /*********    popup menu functions     *********/\n  /***********************************************/\n\n  // Show/hide a specific popup menu\n  this.show_menu = function(prop, show, event)\n  {\n    var name = typeof prop == 'object' ? prop.menu : prop,\n      obj = $('#'+name),\n      ref = event && event.target ? $(event.target) : $(obj.attr('rel') || '#'+name+'link'),\n      keyboard = rcube_event.is_keyboard(event),\n      align = obj.attr('data-align') || '',\n      stack = false;\n\n    // find \"real\" button element\n    if (ref.get(0).tagName != 'A' && ref.closest('a').length)\n      ref = ref.closest('a');\n\n    if (typeof prop == 'string')\n      prop = { menu:name };\n\n    // let plugins or skins provide the menu element\n    if (!obj.length) {\n      obj = this.triggerEvent('menu-get', { name:name, props:prop, originalEvent:event });\n    }\n\n    if (!obj || !obj.length) {\n      // just delegate the action to subscribers\n      return this.triggerEvent(show === false ? 'menu-close' : 'menu-open', { name:name, props:prop, originalEvent:event });\n    }\n\n    // move element to top for proper absolute positioning\n    obj.appendTo(document.body);\n\n    if (typeof show == 'undefined')\n      show = obj.is(':visible') ? false : true;\n\n    if (show && ref.length) {\n      var win = $(window),\n        pos = ref.offset(),\n        above = align.indexOf('bottom') >= 0;\n\n      stack = ref.attr('role') == 'menuitem' || ref.closest('[role=menuitem]').length > 0;\n\n      ref.offsetWidth = ref.outerWidth();\n      ref.offsetHeight = ref.outerHeight();\n      if (!above && pos.top + ref.offsetHeight + obj.height() > win.height()) {\n        above = true;\n      }\n      if (align.indexOf('right') >= 0) {\n        pos.left = pos.left + ref.outerWidth() - obj.width();\n      }\n      else if (stack) {\n        pos.left = pos.left + ref.offsetWidth - 5;\n        pos.top -= ref.offsetHeight;\n      }\n      if (pos.left + obj.width() > win.width()) {\n        pos.left = win.width() - obj.width() - 12;\n      }\n      pos.top = Math.max(0, pos.top + (above ? -obj.height() : ref.offsetHeight));\n      obj.css({ left:pos.left+'px', top:pos.top+'px' });\n    }\n\n    // add menu to stack\n    if (show) {\n      // truncate stack down to the one containing the ref link\n      for (var i = this.menu_stack.length - 1; stack && i >= 0; i--) {\n        if (!$(ref).parents('#'+this.menu_stack[i]).length && $(event.target).parent().attr('role') != 'menuitem')\n          this.hide_menu(this.menu_stack[i], event);\n      }\n      if (stack && this.menu_stack.length) {\n        obj.data('parent', $.last(this.menu_stack));\n        obj.css('z-index', ($('#'+$.last(this.menu_stack)).css('z-index') || 0) + 1);\n      }\n      else if (!stack && this.menu_stack.length) {\n        this.hide_menu(this.menu_stack[0], event);\n      }\n\n      obj.show().attr('aria-hidden', 'false').data('opener', ref.attr('aria-expanded', 'true').get(0));\n      this.triggerEvent('menu-open', { name:name, obj:obj, props:prop, originalEvent:event });\n      this.menu_stack.push(name);\n\n      this.menu_keyboard_active = show && keyboard;\n      if (this.menu_keyboard_active) {\n        this.focused_menu = name;\n        obj.find('a,input:not(:disabled)').not('[aria-disabled=true]').first().focus();\n      }\n    }\n    else {  // close menu\n      this.hide_menu(name, event);\n    }\n\n    return show;\n  };\n\n  // hide the given popup menu (and it's childs)\n  this.hide_menu = function(name, event)\n  {\n    if (!this.menu_stack.length) {\n      // delegate to subscribers\n      this.triggerEvent('menu-close', { name:name, props:{ menu:name }, originalEvent:event });\n      return;\n    }\n\n    var obj, keyboard = rcube_event.is_keyboard(event);\n    for (var j=this.menu_stack.length-1; j >= 0; j--) {\n      obj = $('#' + this.menu_stack[j]).hide().attr('aria-hidden', 'true').data('parent', false);\n      this.triggerEvent('menu-close', { name:this.menu_stack[j], obj:obj, props:{ menu:this.menu_stack[j] }, originalEvent:event });\n      if (this.menu_stack[j] == name) {\n        j = -1;  // stop loop\n        if (obj.data('opener')) {\n          $(obj.data('opener')).attr('aria-expanded', 'false');\n          if (keyboard)\n            obj.data('opener').focus();\n        }\n      }\n      this.menu_stack.pop();\n    }\n\n    // focus previous menu in stack\n    if (this.menu_stack.length && keyboard) {\n      this.menu_keyboard_active = true;\n      this.focused_menu = $.last(this.menu_stack);\n      if (!obj || !obj.data('opener'))\n        $('#'+this.focused_menu).find('a,input:not(:disabled)').not('[aria-disabled=true]').first().focus();\n    }\n    else {\n      this.focused_menu = null;\n      this.menu_keyboard_active = false;\n    }\n  }\n\n\n  // position a menu element on the screen in relation to other object\n  this.element_position = function(element, obj)\n  {\n    var obj = $(obj), win = $(window),\n      width = obj.outerWidth(),\n      height = obj.outerHeight(),\n      menu_pos = obj.data('menu-pos'),\n      win_height = win.height(),\n      elem_height = $(element).height(),\n      elem_width = $(element).width(),\n      pos = obj.offset(),\n      top = pos.top,\n      left = pos.left + width;\n\n    if (menu_pos == 'bottom') {\n      top += height;\n      left -= width;\n    }\n    else\n      left -= 5;\n\n    if (top + elem_height > win_height) {\n      top -= elem_height - height;\n      if (top < 0)\n        top = Math.max(0, (win_height - elem_height) / 2);\n    }\n\n    if (left + elem_width > win.width())\n      left -= elem_width + width;\n\n    element.css({left: left + 'px', top: top + 'px'});\n  };\n\n  // initialize HTML editor\n  this.editor_init = function(config, id)\n  {\n    this.editor = new rcube_text_editor(config, id);\n  };\n\n\n  /********************************************************/\n  /*********  html to text conversion functions   *********/\n  /********************************************************/\n\n  this.html2plain = function(html, func)\n  {\n    return this.format_converter(html, 'html', func);\n  };\n\n  this.plain2html = function(plain, func)\n  {\n    return this.format_converter(plain, 'plain', func);\n  };\n\n  this.format_converter = function(text, format, func)\n  {\n    // warn the user (if converted content is not empty)\n    if (!text\n      || (format == 'html' && !(text.replace(/<[^>]+>|&nbsp;|\\xC2\\xA0|\\s/g, '')).length)\n      || (format != 'html' && !(text.replace(/\\xC2\\xA0|\\s/g, '')).length)\n    ) {\n      // without setTimeout() here, textarea is filled with initial (onload) content\n      if (func)\n        setTimeout(function() { func(''); }, 50);\n      return true;\n    }\n\n    var confirmed = this.env.editor_warned || confirm(this.get_label('editorwarning'));\n\n    this.env.editor_warned = true;\n\n    if (!confirmed)\n      return false;\n\n    var url = '?_task=utils&_action=' + (format == 'html' ? 'html2text' : 'text2html'),\n      lock = this.set_busy(true, 'converting');\n\n    this.log('HTTP POST: ' + url);\n\n    $.ajax({ type: 'POST', url: url, data: text, contentType: 'application/octet-stream',\n      error: function(o, status, err) { ref.http_error(o, status, err, lock); },\n      success: function(data) {\n        ref.set_busy(false, null, lock);\n        if (func) func(data);\n      }\n    });\n\n    return true;\n  };\n\n\n  /********************************************************/\n  /*********        remote request methods        *********/\n  /********************************************************/\n\n  // compose a valid url with the given parameters\n  this.url = function(action, query)\n  {\n    var querystring = typeof query === 'string' ? query : '';\n\n    if (typeof action !== 'string')\n      query = action;\n    else if (!query || typeof query !== 'object')\n      query = {};\n\n    if (action)\n      query._action = action;\n    else if (this.env.action)\n      query._action = this.env.action;\n\n    var url = this.env.comm_path, k, param = {};\n\n    // overwrite task name\n    if (action && action.match(/([a-z0-9_-]+)\\/([a-z0-9-_.]+)/)) {\n      query._action = RegExp.$2;\n      url = url.replace(/\\_task=[a-z0-9_-]+/, '_task=' + RegExp.$1);\n    }\n\n    // remove undefined values\n    for (k in query) {\n      if (query[k] !== undefined && query[k] !== null)\n        param[k] = query[k];\n    }\n\n    if (param = $.param(param))\n      url += (url.indexOf('?') > -1 ? '&' : '?') + param;\n\n    if (querystring)\n      url += (url.indexOf('?') > -1 ? '&' : '?') + querystring;\n\n    return url;\n  };\n\n  this.redirect = function(url, lock)\n  {\n    if (lock || lock === null)\n      this.set_busy(true);\n\n    if (this.is_framed()) {\n      parent.rcmail.redirect(url, lock);\n    }\n    else {\n      if (this.env.extwin) {\n        if (typeof url == 'string')\n          url += (url.indexOf('?') < 0 ? '?' : '&') + '_extwin=1';\n        else\n          url._extwin = 1;\n      }\n      this.location_href(url, window);\n    }\n  };\n\n  this.goto_url = function(action, query, lock)\n  {\n    this.redirect(this.url(action, query), lock);\n  };\n\n  this.location_href = function(url, target, frame)\n  {\n    if (frame)\n      this.lock_frame();\n\n    if (typeof url == 'object')\n      url = this.env.comm_path + '&' + $.param(url);\n\n    // simulate real link click to force IE to send referer header\n    if (bw.ie && target == window)\n      $('<a>').attr('href', url).appendTo(document.body).get(0).click();\n    else\n      target.location.href = url;\n\n    // reset keep-alive interval\n    this.start_keepalive();\n  };\n\n  // update browser location to remember current view\n  this.update_state = function(query)\n  {\n    if (window.history.replaceState)\n      window.history.replaceState({}, document.title, rcmail.url('', query));\n  };\n\n  // send a http request to the server\n  this.http_request = function(action, data, lock, type)\n  {\n    if (type != 'POST')\n      type = 'GET';\n\n    if (typeof data !== 'object')\n      data = rcube_parse_query(data);\n\n    data._remote = 1;\n    data._unlock = lock ? lock : 0;\n\n    // trigger plugin hook\n    var result = this.triggerEvent('request' + action, data);\n\n    // abort if one of the handlers returned false\n    if (result === false) {\n      if (data._unlock)\n        this.set_busy(false, null, data._unlock);\n      return false;\n    }\n    else if (result !== undefined) {\n      data = result;\n      if (data._action) {\n        action = data._action;\n        delete data._action;\n      }\n    }\n\n    var url = this.url(action);\n\n    // reset keep-alive interval\n    this.start_keepalive();\n\n    // send request\n    return $.ajax({\n      type: type, url: url, data: data, dataType: 'json',\n      success: function(data) { ref.http_response(data); },\n      error: function(o, status, err) { ref.http_error(o, status, err, lock, action); }\n    });\n  };\n\n  // send a http GET request to the server\n  this.http_get = this.http_request;\n\n  // send a http POST request to the server\n  this.http_post = function(action, data, lock)\n  {\n    return this.http_request(action, data, lock, 'POST');\n  };\n\n  // aborts ajax request\n  this.abort_request = function(r)\n  {\n    if (r.request)\n      r.request.abort();\n    if (r.lock)\n      this.set_busy(false, null, r.lock);\n  };\n\n  // handle HTTP response\n  this.http_response = function(response)\n  {\n    if (!response)\n      return;\n\n    if (response.unlock)\n      this.set_busy(false);\n\n    this.triggerEvent('responsebefore', {response: response});\n    this.triggerEvent('responsebefore'+response.action, {response: response});\n\n    // set env vars\n    if (response.env)\n      this.set_env(response.env);\n\n    // we have labels to add\n    if (typeof response.texts === 'object') {\n      for (var name in response.texts)\n        if (typeof response.texts[name] === 'string')\n          this.add_label(name, response.texts[name]);\n    }\n\n    // if we get javascript code from server -> execute it\n    if (response.exec) {\n      this.log(response.exec);\n      eval(response.exec);\n    }\n\n    // execute callback functions of plugins\n    if (response.callbacks && response.callbacks.length) {\n      for (var i=0; i < response.callbacks.length; i++)\n        this.triggerEvent(response.callbacks[i][0], response.callbacks[i][1]);\n    }\n\n    // process the response data according to the sent action\n    switch (response.action) {\n      case 'delete':\n        if (this.task == 'addressbook') {\n          var sid, uid = this.contact_list.get_selection(), writable = false;\n\n          if (uid && this.contact_list.rows[uid]) {\n            // search results, get source ID from record ID\n            if (this.env.source == '') {\n              sid = String(uid).replace(/^[^-]+-/, '');\n              writable = sid && this.env.address_sources[sid] && !this.env.address_sources[sid].readonly;\n            }\n            else {\n              writable = !this.env.address_sources[this.env.source].readonly;\n            }\n          }\n          this.enable_command('compose', (uid && this.contact_list.rows[uid]));\n          this.enable_command('delete', 'edit', writable);\n          this.enable_command('export', (this.contact_list && this.contact_list.rowcount > 0));\n          this.enable_command('export-selected', 'print', false);\n        }\n\n      case 'move':\n        if (this.env.action == 'show') {\n          // re-enable commands on move/delete error\n          this.enable_command(this.env.message_commands, true);\n          if (!this.env.list_post)\n            this.enable_command('reply-list', false);\n        }\n        else if (this.task == 'addressbook') {\n          this.triggerEvent('listupdate', { folder:this.env.source, rowcount:this.contact_list.rowcount });\n        }\n\n      case 'purge':\n      case 'expunge':\n        if (this.task == 'mail') {\n          if (!this.env.exists) {\n            // clear preview pane content\n            if (this.env.contentframe)\n              this.show_contentframe(false);\n            // disable commands useless when mailbox is empty\n            this.enable_command(this.env.message_commands, 'purge', 'expunge',\n              'select-all', 'select-none', 'expand-all', 'expand-unread', 'collapse-all', false);\n          }\n          if (this.message_list)\n            this.triggerEvent('listupdate', { folder:this.env.mailbox, rowcount:this.message_list.rowcount });\n        }\n        break;\n\n      case 'refresh':\n      case 'check-recent':\n        // update message flags\n        $.each(this.env.recent_flags || {}, function(uid, flags) {\n          ref.set_message(uid, 'deleted', flags.deleted);\n          ref.set_message(uid, 'replied', flags.answered);\n          ref.set_message(uid, 'unread', !flags.seen);\n          ref.set_message(uid, 'forwarded', flags.forwarded);\n          ref.set_message(uid, 'flagged', flags.flagged);\n        });\n        delete this.env.recent_flags;\n\n      case 'getunread':\n      case 'search':\n        this.env.qsearch = null;\n      case 'list':\n        if (this.task == 'mail') {\n          var is_multifolder = this.is_multifolder_listing(),\n            list = this.message_list,\n            uid = this.env.list_uid;\n\n          this.enable_command('show', 'select-all', 'select-none', this.env.messagecount > 0);\n          this.enable_command('expunge', this.env.exists && !is_multifolder);\n          this.enable_command('purge', this.purge_mailbox_test() && !is_multifolder);\n          this.enable_command('import-messages', !is_multifolder);\n          this.enable_command('expand-all', 'expand-unread', 'collapse-all', this.env.threading && this.env.messagecount && !is_multifolder);\n\n          if (list) {\n            if (response.action == 'list' || response.action == 'search') {\n              // highlight message row when we're back from message page\n              if (uid) {\n                if (!list.rows[uid])\n                  uid += '-' + this.env.mailbox;\n                if (list.rows[uid]) {\n                  list.select(uid);\n                }\n                delete this.env.list_uid;\n              }\n\n              this.enable_command('set-listmode', this.env.threads && !is_multifolder);\n              if (list.rowcount > 0 && !$(document.activeElement).is('input,textarea'))\n                list.focus();\n\n              // trigger 'select' so all dependent actions update its state\n              // e.g. plugins use this event to activate buttons (#1490647)\n              list.triggerEvent('select');\n            }\n\n            if (response.action != 'getunread')\n              this.triggerEvent('listupdate', { folder:this.env.mailbox, rowcount:list.rowcount });\n          }\n        }\n        else if (this.task == 'addressbook') {\n          this.enable_command('export', (this.contact_list && this.contact_list.rowcount > 0));\n\n          if (response.action == 'list' || response.action == 'search') {\n            this.enable_command('search-create', this.env.source == '');\n            this.enable_command('search-delete', this.env.search_id);\n            this.update_group_commands();\n            if (this.contact_list.rowcount > 0 && !$(document.activeElement).is('input,textarea'))\n              this.contact_list.focus();\n            this.triggerEvent('listupdate', { folder:this.env.source, rowcount:this.contact_list.rowcount });\n          }\n        }\n        break;\n\n      case 'list-contacts':\n      case 'search-contacts':\n        if (this.contact_list && this.contact_list.rowcount > 0)\n          this.contact_list.focus();\n        break;\n    }\n\n    if (response.unlock)\n      this.hide_message(response.unlock);\n\n    this.triggerEvent('responseafter', {response: response});\n    this.triggerEvent('responseafter'+response.action, {response: response});\n\n    // reset keep-alive interval\n    this.start_keepalive();\n  };\n\n  // handle HTTP request errors\n  this.http_error = function(request, status, err, lock, action)\n  {\n    var errmsg = request.statusText;\n\n    this.set_busy(false, null, lock);\n    request.abort();\n\n    // don't display error message on page unload (#1488547)\n    if (this.unload)\n      return;\n\n    if (request.status && errmsg)\n      this.display_message(this.get_label('servererror') + ' (' + errmsg + ')', 'error');\n    else if (status == 'timeout')\n      this.display_message(this.get_label('requesttimedout'), 'error');\n    else if (request.status == 0 && status != 'abort')\n      this.display_message(this.get_label('connerror'), 'error');\n\n    // redirect to url specified in location header if not empty\n    var location_url = request.getResponseHeader(\"Location\");\n    if (location_url && this.env.action != 'compose')  // don't redirect on compose screen, contents might get lost (#1488926)\n      this.redirect(location_url);\n\n    // 403 Forbidden response (CSRF prevention) - reload the page.\n    // In case there's a new valid session it will be used, otherwise\n    // login form will be presented (#1488960).\n    if (request.status == 403) {\n      (this.is_framed() ? parent : window).location.reload();\n      return;\n    }\n\n    // re-send keep-alive requests after 30 seconds\n    if (action == 'keep-alive')\n      setTimeout(function(){ ref.keep_alive(); ref.start_keepalive(); }, 30000);\n  };\n\n  // handler for session errors detected on the server\n  this.session_error = function(redirect_url)\n  {\n    this.env.server_error = 401;\n\n    // save message in local storage and do not redirect\n    if (this.env.action == 'compose') {\n      this.save_compose_form_local();\n      this.compose_skip_unsavedcheck = true;\n    }\n    else if (redirect_url) {\n      setTimeout(function(){ ref.redirect(redirect_url, true); }, 2000);\n    }\n  };\n\n  // callback when an iframe finished loading\n  this.iframe_loaded = function(unlock)\n  {\n    this.set_busy(false, null, unlock);\n\n    if (this.submit_timer)\n      clearTimeout(this.submit_timer);\n  };\n\n  /**\n   Send multi-threaded parallel HTTP requests to the server for a list if items.\n   The string '%' in either a GET query or POST parameters will be replaced with the respective item value.\n   This is the argument object expected: {\n       items: ['foo','bar','gna'],      // list of items to send requests for\n       action: 'task/some-action',      // Roudncube action to call\n       query: { q:'%s' },               // GET query parameters\n       postdata: { source:'%s' },       // POST data (sends a POST request if present)\n       threads: 3,                      // max. number of concurrent requests\n       onresponse: function(data){ },   // Callback function called for every response received from server\n       whendone: function(alldata){ }   // Callback function called when all requests have been sent\n   }\n  */\n  this.multi_thread_http_request = function(prop)\n  {\n    var i, item, reqid = new Date().getTime(),\n      threads = prop.threads || 1;\n\n    prop.reqid = reqid;\n    prop.running = 0;\n    prop.requests = [];\n    prop.result = [];\n    prop._items = $.extend([], prop.items);  // copy items\n\n    if (!prop.lock)\n      prop.lock = this.display_message(this.get_label('loading'), 'loading');\n\n    // add the request arguments to the jobs pool\n    this.http_request_jobs[reqid] = prop;\n\n    // start n threads\n    for (i=0; i < threads; i++) {\n      item = prop._items.shift();\n      if (item === undefined)\n        break;\n\n      prop.running++;\n      prop.requests.push(this.multi_thread_send_request(prop, item));\n    }\n\n    return reqid;\n  };\n\n  // helper method to send an HTTP request with the given iterator value\n  this.multi_thread_send_request = function(prop, item)\n  {\n    var k, postdata, query;\n\n    // replace %s in post data\n    if (prop.postdata) {\n      postdata = {};\n      for (k in prop.postdata) {\n        postdata[k] = String(prop.postdata[k]).replace('%s', item);\n      }\n      postdata._reqid = prop.reqid;\n    }\n    // replace %s in query\n    else if (typeof prop.query == 'string') {\n      query = prop.query.replace('%s', item);\n      query += '&_reqid=' + prop.reqid;\n    }\n    else if (typeof prop.query == 'object' && prop.query) {\n      query = {};\n      for (k in prop.query) {\n        query[k] = String(prop.query[k]).replace('%s', item);\n      }\n      query._reqid = prop.reqid;\n    }\n\n    // send HTTP GET or POST request\n    return postdata ? this.http_post(prop.action, postdata) : this.http_request(prop.action, query);\n  };\n\n  // callback function for multi-threaded http responses\n  this.multi_thread_http_response = function(data, reqid)\n  {\n    var prop = this.http_request_jobs[reqid];\n    if (!prop || prop.running <= 0 || prop.cancelled)\n      return;\n\n    prop.running--;\n\n    // trigger response callback\n    if (prop.onresponse && typeof prop.onresponse == 'function') {\n      prop.onresponse(data);\n    }\n\n    prop.result = $.extend(prop.result, data);\n\n    // send next request if prop.items is not yet empty\n    var item = prop._items.shift();\n    if (item !== undefined) {\n      prop.running++;\n      prop.requests.push(this.multi_thread_send_request(prop, item));\n    }\n    // trigger whendone callback and mark this request as done\n    else if (prop.running == 0) {\n      if (prop.whendone && typeof prop.whendone == 'function') {\n        prop.whendone(prop.result);\n      }\n\n      this.set_busy(false, '', prop.lock);\n\n      // remove from this.http_request_jobs pool\n      delete this.http_request_jobs[reqid];\n    }\n  };\n\n  // abort a running multi-thread request with the given identifier\n  this.multi_thread_request_abort = function(reqid)\n  {\n    var prop = this.http_request_jobs[reqid];\n    if (prop) {\n      for (var i=0; prop.running > 0 && i < prop.requests.length; i++) {\n        if (prop.requests[i].abort)\n          prop.requests[i].abort();\n      }\n\n      prop.running = 0;\n      prop.cancelled = true;\n      this.set_busy(false, '', prop.lock);\n    }\n  };\n\n  // post the given form to a hidden iframe\n  this.async_upload_form = function(form, action, onload)\n  {\n    // create hidden iframe\n    var ts = new Date().getTime(),\n      frame_name = 'rcmupload' + ts,\n      frame = this.async_upload_form_frame(frame_name);\n\n    // upload progress support\n    if (this.env.upload_progress_name) {\n      var fname = this.env.upload_progress_name,\n        field = $('input[name='+fname+']', form);\n\n      if (!field.length) {\n        field = $('<input>').attr({type: 'hidden', name: fname});\n        field.prependTo(form);\n      }\n\n      field.val(ts);\n    }\n\n    // handle upload errors by parsing iframe content in onload\n    frame.on('load', {ts:ts}, onload);\n\n    $(form).attr({\n        target: frame_name,\n        action: this.url(action, {_id: this.env.compose_id || '', _uploadid: ts, _from: this.env.action}),\n        method: 'POST'})\n      .attr(form.encoding ? 'encoding' : 'enctype', 'multipart/form-data')\n      .submit();\n\n    return frame_name;\n  };\n\n  // create iframe element for files upload\n  this.async_upload_form_frame = function(name)\n  {\n    return $('<iframe>').attr({name: name, style: 'border: none; width: 0; height: 0; visibility: hidden'})\n      .appendTo(document.body);\n  };\n\n  // html5 file-drop API\n  this.document_drag_hover = function(e, over)\n  {\n    // don't e.preventDefault() here to not block text dragging on the page (#1490619)\n    $(this.gui_objects.filedrop)[(over?'addClass':'removeClass')]('active');\n  };\n\n  this.file_drag_hover = function(e, over)\n  {\n    e.preventDefault();\n    e.stopPropagation();\n    $(this.gui_objects.filedrop)[(over?'addClass':'removeClass')]('hover');\n  };\n\n  // handler when files are dropped to a designated area.\n  // compose a multipart form data and submit it to the server\n  this.file_dropped = function(e)\n  {\n    // abort event and reset UI\n    this.file_drag_hover(e, false);\n\n    // prepare multipart form data composition\n    var uri, files = e.target.files || e.dataTransfer.files,\n      formdata = window.FormData ? new FormData() : null,\n      fieldname = (this.env.filedrop.fieldname || '_file') + (this.env.filedrop.single ? '' : '[]'),\n      boundary = '------multipartformboundary' + (new Date).getTime(),\n      dashdash = '--', crlf = '\\r\\n',\n      multipart = dashdash + boundary + crlf,\n      args = {_id: this.env.compose_id || this.env.cid || '', _remote: 1, _from: this.env.action};\n\n    if (!files || !files.length) {\n      // Roundcube attachment, pass its uri to the backend and attach\n      if (uri = e.dataTransfer.getData('roundcube-uri')) {\n        var ts = new Date().getTime(),\n          // jQuery way to escape filename (#1490530)\n          content = $('<span>').text(e.dataTransfer.getData('roundcube-name') || this.get_label('attaching')).html();\n\n        args._uri = uri;\n        args._uploadid = ts;\n\n        // add to attachments list\n        if (!this.add2attachment_list(ts, {name: '', html: content, classname: 'uploading', complete: false}))\n          this.file_upload_id = this.set_busy(true, 'attaching');\n\n        this.http_post(this.env.filedrop.action || 'upload', args);\n      }\n      return;\n    }\n\n    // inline function to submit the files to the server\n    var submit_data = function() {\n      var multiple = files.length > 1,\n        ts = new Date().getTime(),\n        // jQuery way to escape filename (#1490530)\n        content = $('<span>').text(multiple ? ref.get_label('uploadingmany') : files[0].name).html();\n\n      // add to attachments list\n      if (!ref.add2attachment_list(ts, { name:'', html:content, classname:'uploading', complete:false }))\n        ref.file_upload_id = ref.set_busy(true, 'uploading');\n\n      // complete multipart content and post request\n      multipart += dashdash + boundary + dashdash + crlf;\n\n      args._uploadid = ts;\n\n      $.ajax({\n        type: 'POST',\n        dataType: 'json',\n        url: ref.url(ref.env.filedrop.action || 'upload', args),\n        contentType: formdata ? false : 'multipart/form-data; boundary=' + boundary,\n        processData: false,\n        timeout: 0, // disable default timeout set in ajaxSetup()\n        data: formdata || multipart,\n        headers: {'X-Roundcube-Request': ref.env.request_token},\n        xhr: function() { var xhr = jQuery.ajaxSettings.xhr(); if (!formdata && xhr.sendAsBinary) xhr.send = xhr.sendAsBinary; return xhr; },\n        success: function(data){ ref.http_response(data); },\n        error: function(o, status, err) { ref.http_error(o, status, err, null, 'attachment'); }\n      });\n    };\n\n    // get contents of all dropped files\n    var last = this.env.filedrop.single ? 0 : files.length - 1;\n    for (var j=0, i=0, f; j <= last && (f = files[i]); i++) {\n      if (!f.name) f.name = f.fileName;\n      if (!f.size) f.size = f.fileSize;\n      if (!f.type) f.type = 'application/octet-stream';\n\n      // file name contains non-ASCII characters, do UTF8-binary string conversion.\n      if (!formdata && /[^\\x20-\\x7E]/.test(f.name))\n        f.name_bin = unescape(encodeURIComponent(f.name));\n\n      // filter by file type if requested\n      if (this.env.filedrop.filter && !f.type.match(new RegExp(this.env.filedrop.filter))) {\n        // TODO: show message to user\n        continue;\n      }\n\n      // do it the easy way with FormData (FF 4+, Chrome 5+, Safari 5+)\n      if (formdata) {\n        formdata.append(fieldname, f);\n        if (j == last)\n          return submit_data();\n      }\n      // use FileReader supporetd by Firefox 3.6\n      else if (window.FileReader) {\n        var reader = new FileReader();\n\n        // closure to pass file properties to async callback function\n        reader.onload = (function(file, j) {\n          return function(e) {\n            multipart += 'Content-Disposition: form-data; name=\"' + fieldname + '\"';\n            multipart += '; filename=\"' + (f.name_bin || file.name) + '\"' + crlf;\n            multipart += 'Content-Length: ' + file.size + crlf;\n            multipart += 'Content-Type: ' + file.type + crlf + crlf;\n            multipart += reader.result + crlf;\n            multipart += dashdash + boundary + crlf;\n\n            if (j == last)  // we're done, submit the data\n              return submit_data();\n          }\n        })(f,j);\n        reader.readAsBinaryString(f);\n      }\n      // Firefox 3\n      else if (f.getAsBinary) {\n        multipart += 'Content-Disposition: form-data; name=\"' + fieldname + '\"';\n        multipart += '; filename=\"' + (f.name_bin || f.name) + '\"' + crlf;\n        multipart += 'Content-Length: ' + f.size + crlf;\n        multipart += 'Content-Type: ' + f.type + crlf + crlf;\n        multipart += f.getAsBinary() + crlf;\n        multipart += dashdash + boundary +crlf;\n\n        if (j == last)\n          return submit_data();\n      }\n\n      j++;\n    }\n  };\n\n  // starts interval for keep-alive signal\n  this.start_keepalive = function()\n  {\n    if (!this.env.session_lifetime || this.env.framed || this.env.extwin || this.task == 'login' || this.env.action == 'print')\n      return;\n\n    if (this._keepalive)\n      clearInterval(this._keepalive);\n\n    this._keepalive = setInterval(function(){ ref.keep_alive(); }, this.env.session_lifetime * 0.5 * 1000);\n  };\n\n  // starts interval for refresh signal\n  this.start_refresh = function()\n  {\n    if (!this.env.refresh_interval || this.env.framed || this.env.extwin || this.task == 'login' || this.env.action == 'print')\n      return;\n\n    if (this._refresh)\n      clearInterval(this._refresh);\n\n    this._refresh = setInterval(function(){ ref.refresh(); }, this.env.refresh_interval * 1000);\n  };\n\n  // sends keep-alive signal\n  this.keep_alive = function()\n  {\n    if (!this.busy)\n      this.http_request('keep-alive');\n  };\n\n  // sends refresh signal\n  this.refresh = function()\n  {\n    if (this.busy) {\n      // try again after 10 seconds\n      setTimeout(function(){ ref.refresh(); ref.start_refresh(); }, 10000);\n      return;\n    }\n\n    var params = {}, lock = this.set_busy(true, 'refreshing');\n\n    if (this.task == 'mail' && this.gui_objects.mailboxlist)\n      params = this.check_recent_params();\n\n    params._last = Math.floor(this.env.lastrefresh.getTime() / 1000);\n    this.env.lastrefresh = new Date();\n\n    // plugins should bind to 'requestrefresh' event to add own params\n    this.http_post('refresh', params, lock);\n  };\n\n  // returns check-recent request parameters\n  this.check_recent_params = function()\n  {\n    var params = {_mbox: this.env.mailbox};\n\n    if (this.gui_objects.mailboxlist)\n      params._folderlist = 1;\n    if (this.gui_objects.quotadisplay)\n      params._quota = 1;\n    if (this.env.search_request)\n      params._search = this.env.search_request;\n\n    if (this.gui_objects.messagelist) {\n      params._list = 1;\n\n      // message uids for flag updates check\n      params._uids = $.map(this.message_list.rows, function(row, uid) { return uid; }).join(',');\n    }\n\n    return params;\n  };\n\n\n  /********************************************************/\n  /*********            helper methods            *********/\n  /********************************************************/\n\n  /**\n   * Quote html entities\n   */\n  this.quote_html = function(str)\n  {\n    return String(str).replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n  };\n\n  // get window.opener.rcmail if available\n  this.opener = function(deep, filter)\n  {\n    var i, win = window.opener;\n\n    // catch Error: Permission denied to access property rcmail\n    try {\n      if (win && !win.closed) {\n        // try parent of the opener window, e.g. preview frame\n        if (deep && (!win.rcmail || win.rcmail.env.framed) && win.parent && win.parent.rcmail)\n          win = win.parent;\n\n        if (win.rcmail && filter)\n          for (i in filter)\n            if (win.rcmail.env[i] != filter[i])\n              return;\n\n        return win.rcmail;\n      }\n    }\n    catch (e) {}\n  };\n\n  // check if we're in show mode or if we have a unique selection\n  // and return the message uid\n  this.get_single_uid = function()\n  {\n    var uid = this.env.uid || (this.message_list ? this.message_list.get_single_selection() : null);\n    var result = ref.triggerEvent('get_single_uid', { uid: uid });\n    return result || uid;\n  };\n\n  // same as above but for contacts\n  this.get_single_cid = function()\n  {\n    var cid = this.env.cid || (this.contact_list ? this.contact_list.get_single_selection() : null);\n    var result = ref.triggerEvent('get_single_cid', { cid: cid });\n    return result || cid;\n  };\n\n  // get the IMP mailbox of the message with the given UID\n  this.get_message_mailbox = function(uid)\n  {\n    var msg = (this.env.messages && uid ? this.env.messages[uid] : null) || {};\n    return msg.mbox || this.env.mailbox;\n  };\n\n  // build request parameters from single message id (maybe with mailbox name)\n  this.params_from_uid = function(uid, params)\n  {\n    if (!params)\n      params = {};\n\n    params._uid = String(uid).split('-')[0];\n    params._mbox = this.get_message_mailbox(uid);\n\n    return params;\n  };\n\n  // gets cursor position\n  this.get_caret_pos = function(obj)\n  {\n    if (obj.selectionEnd !== undefined)\n      return obj.selectionEnd;\n\n    return obj.value.length;\n  };\n\n  // moves cursor to specified position\n  this.set_caret_pos = function(obj, pos)\n  {\n    try {\n      if (obj.setSelectionRange)\n        obj.setSelectionRange(pos, pos);\n    }\n    catch(e) {} // catch Firefox exception if obj is hidden\n  };\n\n  // get selected text from an input field\n  this.get_input_selection = function(obj)\n  {\n    var start = 0, end = 0, normalizedValue = '';\n\n    if (typeof obj.selectionStart == \"number\" && typeof obj.selectionEnd == \"number\") {\n      normalizedValue = obj.value;\n      start = obj.selectionStart;\n      end = obj.selectionEnd;\n    }\n\n    return {start: start, end: end, text: normalizedValue.substr(start, end-start)};\n  };\n\n  // disable/enable all fields of a form\n  this.lock_form = function(form, lock)\n  {\n    if (!form || !form.elements)\n      return;\n\n    var n, len, elm;\n\n    if (lock)\n      this.disabled_form_elements = [];\n\n    for (n=0, len=form.elements.length; n<len; n++) {\n      elm = form.elements[n];\n\n      if (elm.type == 'hidden')\n        continue;\n      // remember which elem was disabled before lock\n      if (lock && elm.disabled)\n        this.disabled_form_elements.push(elm);\n      else if (lock || $.inArray(elm, this.disabled_form_elements) < 0)\n        elm.disabled = lock;\n    }\n  };\n\n  this.mailto_handler_uri = function()\n  {\n    return location.href.split('?')[0] + '?_task=mail&_action=compose&_to=%s';\n  };\n\n  this.register_protocol_handler = function(name)\n  {\n    try {\n      window.navigator.registerProtocolHandler('mailto', this.mailto_handler_uri(), name);\n    }\n    catch(e) {\n      this.display_message(String(e), 'error');\n    }\n  };\n\n  this.check_protocol_handler = function(name, elem)\n  {\n    var nav = window.navigator;\n\n    if (!nav || (typeof nav.registerProtocolHandler != 'function')) {\n      $(elem).addClass('disabled').click(function(){ return false; });\n    }\n    else if (typeof nav.isProtocolHandlerRegistered == 'function') {\n      var status = nav.isProtocolHandlerRegistered('mailto', this.mailto_handler_uri());\n      if (status)\n        $(elem).parent().find('.mailtoprotohandler-status').html(status);\n    }\n    else {\n      $(elem).click(function() { ref.register_protocol_handler(name); return false; });\n    }\n  };\n\n  // Checks browser capabilities eg. PDF support, TIF support\n  this.browser_capabilities_check = function()\n  {\n    if (!this.env.browser_capabilities)\n      this.env.browser_capabilities = {};\n\n    $.each(['pdf', 'flash', 'tif'], function() {\n      if (ref.env.browser_capabilities[this] === undefined)\n        ref.env.browser_capabilities[this] = ref[this + '_support_check']();\n    });\n  };\n\n  // Returns browser capabilities string\n  this.browser_capabilities = function()\n  {\n    if (!this.env.browser_capabilities)\n      return '';\n\n    var n, ret = [];\n\n    for (n in this.env.browser_capabilities)\n      ret.push(n + '=' + this.env.browser_capabilities[n]);\n\n    return ret.join();\n  };\n\n  this.tif_support_check = function()\n  {\n    window.setTimeout(function() {\n      var img = new Image();\n      img.onload = function() { ref.env.browser_capabilities.tif = 1; };\n      img.onerror = function() { ref.env.browser_capabilities.tif = 0; };\n      img.src = ref.assets_path('program/resources/blank.tif');\n    }, 10);\n\n    return 0;\n  };\n\n  this.pdf_support_check = function()\n  {\n    var plugin = navigator.mimeTypes ? navigator.mimeTypes[\"application/pdf\"] : {},\n      plugins = navigator.plugins,\n      len = plugins.length,\n      regex = /Adobe Reader|PDF|Acrobat/i;\n\n    if (plugin && plugin.enabledPlugin)\n        return 1;\n\n    if ('ActiveXObject' in window) {\n      try {\n        if (plugin = new ActiveXObject(\"AcroPDF.PDF\"))\n          return 1;\n      }\n      catch (e) {}\n      try {\n        if (plugin = new ActiveXObject(\"PDF.PdfCtrl\"))\n          return 1;\n      }\n      catch (e) {}\n    }\n\n    for (i=0; i<len; i++) {\n      plugin = plugins[i];\n      if (typeof plugin === 'String') {\n        if (regex.test(plugin))\n          return 1;\n      }\n      else if (plugin.name && regex.test(plugin.name))\n        return 1;\n    }\n\n    window.setTimeout(function() {\n      $('<object>').css({position: 'absolute', left: '-10000px'})\n        .attr({data: ref.assets_path('program/resources/dummy.pdf'), width: 1, height: 1, type: 'application/pdf'})\n        .load(function() { ref.env.browser_capabilities.pdf = 1; })\n        .error(function() { ref.env.browser_capabilities.pdf = 0; })\n        .appendTo($('body'));\n      }, 10);\n\n    return 0;\n  };\n\n  this.flash_support_check = function()\n  {\n    var plugin = navigator.mimeTypes ? navigator.mimeTypes[\"application/x-shockwave-flash\"] : {};\n\n    if (plugin && plugin.enabledPlugin)\n        return 1;\n\n    if ('ActiveXObject' in window) {\n      try {\n        if (plugin = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\"))\n          return 1;\n      }\n      catch (e) {}\n    }\n\n    return 0;\n  };\n\n  this.assets_path = function(path)\n  {\n    if (this.env.assets_path && !path.startsWith(this.env.assets_path)) {\n      path = this.env.assets_path + path;\n    }\n\n    return path;\n  };\n\n  // Cookie setter\n  this.set_cookie = function(name, value, expires)\n  {\n    setCookie(name, value, expires, this.env.cookie_path, this.env.cookie_domain, this.env.cookie_secure);\n  };\n\n  this.get_local_storage_prefix = function()\n  {\n    if (!this.local_storage_prefix)\n      this.local_storage_prefix = 'roundcube.' + (this.env.user_id || 'anonymous') + '.';\n\n    return this.local_storage_prefix;\n  };\n\n  // wrapper for localStorage.getItem(key)\n  this.local_storage_get_item = function(key, deflt, encrypted)\n  {\n    var item, result;\n\n    // TODO: add encryption\n    try {\n      item = localStorage.getItem(this.get_local_storage_prefix() + key);\n      result = JSON.parse(item);\n    }\n    catch (e) { }\n\n    return result || deflt || null;\n  };\n\n  // wrapper for localStorage.setItem(key, data)\n  this.local_storage_set_item = function(key, data, encrypted)\n  {\n    // try/catch to handle no localStorage support, but also error\n    // in Safari-in-private-browsing-mode where localStorage exists\n    // but can't be used (#1489996)\n    try {\n      // TODO: add encryption\n      localStorage.setItem(this.get_local_storage_prefix() + key, JSON.stringify(data));\n      return true;\n    }\n    catch (e) {\n      return false;\n    }\n  };\n\n  // wrapper for localStorage.removeItem(key)\n  this.local_storage_remove_item = function(key)\n  {\n    try {\n      localStorage.removeItem(this.get_local_storage_prefix() + key);\n      return true;\n    }\n    catch (e) {\n      return false;\n    }\n  };\n\n  this.print_dialog = function()\n  {\n    if (bw.safari)\n      setTimeout('window.print()', 10);\n    else\n      window.print();\n  };\n}  // end object rcube_webmail\n\n\n// some static methods\nrcube_webmail.long_subject_title = function(elem, indent)\n{\n  if (!elem.title) {\n    var $elem = $(elem);\n    if ($elem.width() + (indent || 0) * 15 > $elem.parent().width())\n      elem.title = rcube_webmail.subject_text(elem);\n  }\n};\n\nrcube_webmail.long_subject_title_ex = function(elem)\n{\n  if (!elem.title) {\n    var $elem = $(elem),\n      txt = $.trim($elem.text()),\n      tmp = $('<span>').text(txt)\n        .css({'position': 'absolute', 'float': 'left', 'visibility': 'hidden',\n          'font-size': $elem.css('font-size'), 'font-weight': $elem.css('font-weight')})\n        .appendTo($('body')),\n      w = tmp.width();\n\n    tmp.remove();\n    if (w + $('span.branch', $elem).width() * 15 > $elem.width())\n      elem.title = rcube_webmail.subject_text(elem);\n  }\n};\n\nrcube_webmail.subject_text = function(elem)\n{\n  var t = $(elem).clone();\n  t.find('.skip-on-drag').remove();\n  return t.text();\n};\n\nrcube_webmail.prototype.get_cookie = getCookie;\n\n// copy event engine prototype\nrcube_webmail.prototype.addEventListener = rcube_event_engine.prototype.addEventListener;\nrcube_webmail.prototype.removeEventListener = rcube_event_engine.prototype.removeEventListener;\nrcube_webmail.prototype.triggerEvent = rcube_event_engine.prototype.triggerEvent;\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2008-2014, The Roundcube Dev Team                       |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Logical representation of a mail message with all its data          |\n |   and related functions                                               |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Logical representation of a mail message with all its data\n * and related functions\n *\n * @package    Framework\n * @subpackage Storage\n * @author     Thomas Bruederli <roundcube@gmail.com>\n */\nclass rcube_message\n{\n    /**\n     * Instace of framework class.\n     *\n     * @var rcube\n     */\n    private $app;\n\n    /**\n     * Instance of storage class\n     *\n     * @var rcube_storage\n     */\n    private $storage;\n\n    /**\n     * Instance of mime class\n     *\n     * @var rcube_mime\n     */\n    private $mime;\n    private $opt = array();\n    private $parse_alternative = false;\n\n    public $uid;\n    public $folder;\n    public $headers;\n    public $sender;\n    public $parts        = array();\n    public $mime_parts   = array();\n    public $inline_parts = array();\n    public $attachments  = array();\n    public $subject      = '';\n    public $is_safe      = false;\n\n    const BODY_MAX_SIZE = 1048576; // 1MB\n\n\n    /**\n     * __construct\n     *\n     * Provide a uid, and parse message structure.\n     *\n     * @param string $uid     The message UID.\n     * @param string $folder  Folder name\n     * @param bool   $is_safe Security flag\n     *\n     * @see self::$app, self::$storage, self::$opt, self::$parts\n     */\n    function __construct($uid, $folder = null, $is_safe = false)\n    {\n        // decode combined UID-folder identifier\n        if (preg_match('/^\\d+-.+/', $uid)) {\n            list($uid, $folder) = explode('-', $uid, 2);\n        }\n\n        $this->uid     = $uid;\n        $this->app     = rcube::get_instance();\n        $this->storage = $this->app->get_storage();\n        $this->folder  = strlen($folder) ? $folder : $this->storage->get_folder();\n\n        // Set current folder\n        $this->storage->set_folder($this->folder);\n        $this->storage->set_options(array('all_headers' => true));\n\n        $this->headers = $this->storage->get_message($uid);\n\n        if (!$this->headers) {\n            return;\n        }\n\n        $this->mime    = new rcube_mime($this->headers->charset);\n        $this->subject = $this->headers->get('subject');\n        list(, $this->sender) = each($this->mime->decode_address_list($this->headers->from, 1));\n\n        $this->set_safe($is_safe || $_SESSION['safe_messages'][$this->folder.':'.$uid]);\n        $this->opt = array(\n            'safe'        => $this->is_safe,\n            'prefer_html' => $this->app->config->get('prefer_html'),\n            'get_url'     => $this->app->url(array(\n                    'action' => 'get',\n                    'mbox'   => $this->folder,\n                    'uid'    => $uid))\n        );\n\n        if (!empty($this->headers->structure)) {\n            $this->get_mime_numbers($this->headers->structure);\n            $this->parse_structure($this->headers->structure);\n        }\n        else {\n            $this->body = $this->storage->get_body($uid);\n        }\n\n        // notify plugins and let them analyze this structured message object\n        $this->app->plugins->exec_hook('message_load', array('object' => $this));\n    }\n\n    /**\n     * Return a (decoded) message header\n     *\n     * @param string $name Header name\n     * @param bool   $row  Don't mime-decode the value\n     * @return string Header value\n     */\n    public function get_header($name, $raw = false)\n    {\n        if (empty($this->headers)) {\n            return null;\n        }\n\n        return $this->headers->get($name, !$raw);\n    }\n\n    /**\n     * Set is_safe var and session data\n     *\n     * @param bool $safe enable/disable\n     */\n    public function set_safe($safe = true)\n    {\n        $_SESSION['safe_messages'][$this->folder.':'.$this->uid] = $this->is_safe = $safe;\n    }\n\n    /**\n     * Compose a valid URL for getting a message part\n     *\n     * @param string $mime_id Part MIME-ID\n     * @param mixed  $embed Mimetype class for parts to be embedded\n     * @return string URL or false if part does not exist\n     */\n    public function get_part_url($mime_id, $embed = false)\n    {\n        if ($this->mime_parts[$mime_id])\n            return $this->opt['get_url'] . '&_part=' . $mime_id . ($embed ? '&_embed=1&_mimeclass=' . $embed : '');\n        else\n            return false;\n    }\n\n    /**\n     * Get content of a specific part of this message\n     *\n     * @param string   $mime_id           Part MIME-ID\n     * @param resource $fp File           pointer to save the message part\n     * @param boolean  $skip_charset_conv Disables charset conversion\n     * @param int      $max_bytes         Only read this number of bytes\n     * @param boolean  $formatted         Enables formatting of text/* parts bodies\n     *\n     * @return string Part content\n     * @deprecated\n     */\n    public function get_part_content($mime_id, $fp = null, $skip_charset_conv = false, $max_bytes = 0, $formatted = true)\n    {\n        if ($part = $this->mime_parts[$mime_id]) {\n            // stored in message structure (winmail/inline-uuencode)\n            if (!empty($part->body) || $part->encoding == 'stream') {\n                if ($fp) {\n                    fwrite($fp, $part->body);\n                }\n                return $fp ? true : $part->body;\n            }\n\n            // get from IMAP\n            $this->storage->set_folder($this->folder);\n\n            return $this->storage->get_message_part($this->uid, $mime_id, $part,\n                NULL, $fp, $skip_charset_conv, $max_bytes, $formatted);\n        }\n    }\n\n    /**\n     * Get content of a specific part of this message\n     *\n     * @param string  $mime_id   Part ID\n     * @param boolean $formatted Enables formatting of text/* parts bodies\n     * @param int     $max_bytes Only return/read this number of bytes\n     * @param mixed   $mode      NULL to return a string, -1 to print body\n     *                           or file pointer to save the body into\n     *\n     * @return string|bool Part content or operation status\n     */\n    public function get_part_body($mime_id, $formatted = false, $max_bytes = 0, $mode = null)\n    {\n        if (!($part = $this->mime_parts[$mime_id])) {\n            return;\n        }\n\n        // allow plugins to modify part body\n        $plugin = $this->app->plugins->exec_hook('message_part_body',\n            array('object' => $this, 'part' => $part));\n\n        // only text parts can be formatted\n        $formatted = $formatted && $part->ctype_primary == 'text';\n\n        // part body not fetched yet... save in memory if it's small enough\n        if ($part->body === null && is_numeric($mime_id) && $part->size < self::BODY_MAX_SIZE) {\n            $this->storage->set_folder($this->folder);\n            // Warning: body here should be always unformatted\n            $part->body = $this->storage->get_message_part($this->uid, $mime_id, $part,\n                null, null, true, 0, false);\n        }\n\n        // body stored in message structure (winmail/inline-uuencode)\n        if ($part->body !== null || $part->encoding == 'stream') {\n            $body = $part->body;\n\n            if ($formatted && $body) {\n                $body = self::format_part_body($body, $part, $this->headers->charset);\n            }\n\n            if ($max_bytes && strlen($body) > $max_bytes) {\n                $body = substr($body, 0, $max_bytes);\n            }\n\n            if (is_resource($mode)) {\n                if ($body !== false) {\n                    fwrite($mode, $body);\n                    rewind($mode);\n                }\n\n                return $body !== false;\n            }\n\n            if ($mode === -1) {\n                if ($body !== false) {\n                    print($body);\n                }\n\n                return $body !== false;\n            }\n\n            return $body;\n        }\n\n        // get the body from IMAP\n        $this->storage->set_folder($this->folder);\n\n        $body = $this->storage->get_message_part($this->uid, $mime_id, $part,\n            $mode === -1, is_resource($mode) ? $mode : null,\n            !($mode && $formatted), $max_bytes, $mode && $formatted);\n\n        if (is_resource($mode)) {\n            rewind($mode);\n            return $body !== false;\n        }\n\n        if (!$mode && $body && $formatted) {\n            $body = self::format_part_body($body, $part, $this->headers->charset);\n        }\n\n        return $body;\n    }\n\n    /**\n     * Format text message part for display\n     *\n     * @param string             $body            Part body\n     * @param rcube_message_part $part            Part object\n     * @param string             $default_charset Fallback charset if part charset is not specified\n     *\n     * @return string Formatted body\n     */\n    public static function format_part_body($body, $part, $default_charset = null)\n    {\n        // remove useless characters\n        $body = preg_replace('/[\\t\\r\\0\\x0B]+\\n/', \"\\n\", $body);\n\n        // remove NULL characters if any (#1486189)\n        if (strpos($body, \"\\x00\") !== false) {\n            $body = str_replace(\"\\x00\", '', $body);\n        }\n\n        // detect charset...\n        if (!$part->charset || strtoupper($part->charset) == 'US-ASCII') {\n            // try to extract charset information from HTML meta tag (#1488125)\n            if ($part->ctype_secondary == 'html' && preg_match('/<meta[^>]+charset=([a-z0-9-_]+)/i', $body, $m)) {\n                $part->charset = strtoupper($m[1]);\n            }\n            else if ($default_charset) {\n                $part->charset = $default_charset;\n            }\n            else {\n                $rcube         = rcube::get_instance();\n                $part->charset = $rcube->config->get('default_charset', RCUBE_CHARSET);\n            }\n        }\n\n        // ..convert charset encoding\n        $body = rcube_charset::convert($body, $part->charset);\n\n        return $body;\n    }\n\n    /**\n     * Determine if the message contains a HTML part. This must to be\n     * a real part not an attachment (or its part)\n     *\n     * @param bool               $enriched Enables checking for text/enriched parts too\n     * @param rcube_message_part &$part    Reference to the part if found\n     *\n     * @return bool True if a HTML is available, False if not\n     */\n    public function has_html_part($enriched = false, &$part = null)\n    {\n        // check all message parts\n        foreach ($this->mime_parts as $part) {\n            if ($part->mimetype == 'text/html' || ($enriched && $part->mimetype == 'text/enriched')) {\n                // Skip if part is an attachment, don't use is_attachment() here\n                if ($part->filename) {\n                    continue;\n                }\n\n                $level = explode('.', $part->mime_id);\n                $depth = count($level);\n                $last  = '';\n\n                // Check if the part belongs to higher-level's multipart part\n                // this can be alternative/related/signed/encrypted or mixed\n                while (array_pop($level) !== null) {\n                    $parent_depth = count($level);\n                    if (!$parent_depth) {\n                        return true;\n                    }\n\n                    $parent    = $this->mime_parts[join('.', $level)];\n                    $max_delta = $depth - (1 + ($last == 'multipart/alternative' ? 1 : 0));\n                    $last      = $parent->mimetype;\n\n                    if (!preg_match('/^multipart\\/(alternative|related|signed|encrypted|mixed)$/', $parent->mimetype)\n                        || ($parent->mimetype == 'multipart/mixed' && $parent_depth < $max_delta)) {\n                        continue 2;\n                    }\n                }\n\n                if ($part->size) {\n                    return true;\n                }\n            }\n        }\n\n        $part = null;\n\n        return false;\n    }\n\n    /**\n     * Determine if the message contains a text/plain part. This must to be\n     * a real part not an attachment (or its part)\n     *\n     * @param rcube_message_part &$part Reference to the part if found\n     *\n     * @return bool True if a plain text part is available, False if not\n     */\n    public function has_text_part(&$part = null)\n    {\n        // check all message parts\n        foreach ($this->mime_parts as $part) {\n            if ($part->mimetype == 'text/plain') {\n                // Skip if part is an attachment, don't use is_attachment() here\n                if ($part->filename) {\n                    continue;\n                }\n\n                $level = explode('.', $part->mime_id);\n\n                // Check if the part belongs to higher-level's alternative/related\n                while (array_pop($level) !== null) {\n                    if (!count($level)) {\n                        return true;\n                    }\n\n                    $parent = $this->mime_parts[join('.', $level)];\n                    if ($parent->mimetype != 'multipart/alternative' && $parent->mimetype != 'multipart/related') {\n                        continue 2;\n                    }\n                }\n\n                if ($part->size) {\n                    return true;\n                }\n            }\n        }\n\n        $part = null;\n\n        return false;\n    }\n\n    /**\n     * Return the first HTML part of this message\n     *\n     * @param rcube_message_part &$part    Reference to the part if found\n     * @param bool               $enriched Enables checking for text/enriched parts too\n     *\n     * @return string HTML message part content\n     */\n    public function first_html_part(&$part = null, $enriched = false)\n    {\n        if ($this->has_html_part($enriched, $part)) {\n            $body = $this->get_part_body($part->mime_id, true);\n\n            if ($part->mimetype == 'text/enriched') {\n                $body = rcube_enriched::to_html($body);\n            }\n\n            return $body;\n        }\n    }\n\n    /**\n     * Return the first text part of this message.\n     * If there's no text/plain part but $strict=true and text/html part\n     * exists, it will be returned in text/plain format.\n     *\n     * @param rcube_message_part &$part  Reference to the part if found\n     * @param bool               $strict Check only text/plain parts\n     *\n     * @return string Plain text message/part content\n     */\n    public function first_text_part(&$part = null, $strict = false)\n    {\n        // no message structure, return complete body\n        if (empty($this->parts)) {\n            return $this->body;\n        }\n\n        if ($this->has_text_part($part)) {\n            return $this->get_part_body($part->mime_id, true);\n        }\n\n        if (!$strict && ($body = $this->first_html_part($part, true))) {\n            // create instance of html2text class\n            $h2t  = new rcube_html2text($body);\n            return $h2t->get_text();\n        }\n    }\n\n    /**\n     * Checks if part of the message is an attachment (or part of it)\n     *\n     * @param rcube_message_part $part Message part\n     *\n     * @return bool True if the part is an attachment part\n     */\n    public function is_attachment($part)\n    {\n        foreach ($this->attachments as $att_part) {\n            if ($att_part->mime_id == $part->mime_id) {\n                return true;\n            }\n\n            // check if the part is a subpart of another attachment part (message/rfc822)\n            if ($att_part->mimetype == 'message/rfc822') {\n                if (in_array($part, (array)$att_part->parts)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * In a multipart/encrypted encrypted message,\n     * find the encrypted message payload part.\n     *\n     * @return rcube_message_part\n     */\n    public function get_multipart_encrypted_part()\n    {\n        foreach ($this->mime_parts as $mime_id => $mpart) {\n            if ($mpart->mimetype == 'multipart/encrypted') {\n                $this->pgp_mime = true;\n            }\n            if ($this->pgp_mime && ($mpart->mimetype == 'application/octet-stream' ||\n                    (!empty($mpart->filename) && $mpart->filename != 'version.txt'))) {\n                $this->encrypted_part = $mime_id;\n                return $mpart;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Read the message structure returend by the IMAP server\n     * and build flat lists of content parts and attachments\n     *\n     * @param rcube_message_part $structure Message structure node\n     * @param bool               $recursive True when called recursively\n     */\n    private function parse_structure($structure, $recursive = false)\n    {\n        // real content-type of message/rfc822 part\n        if ($structure->mimetype == 'message/rfc822' && $structure->real_mimetype) {\n            $mimetype = $structure->real_mimetype;\n\n            // parse headers from message/rfc822 part\n            if (!isset($structure->headers['subject']) && !isset($structure->headers['from'])) {\n                list($headers, ) = explode(\"\\r\\n\\r\\n\", $this->get_part_body($structure->mime_id, false, 32768));\n                $structure->headers = rcube_mime::parse_headers($headers);\n            }\n        }\n        else {\n            $mimetype = $structure->mimetype;\n        }\n\n        // show message headers\n        if ($recursive && is_array($structure->headers) &&\n                (isset($structure->headers['subject']) || $structure->headers['from'] || $structure->headers['to'])) {\n            $c = new stdClass;\n            $c->type = 'headers';\n            $c->headers = $structure->headers;\n            $this->parts[] = $c;\n        }\n\n        // Allow plugins to handle message parts\n        $plugin = $this->app->plugins->exec_hook('message_part_structure',\n            array('object' => $this, 'structure' => $structure,\n                'mimetype' => $mimetype, 'recursive' => $recursive));\n\n        if ($plugin['abort']) {\n            return;\n        }\n\n        $structure = $plugin['structure'];\n        $mimetype  = $plugin['mimetype'];\n        $recursive = $plugin['recursive'];\n\n        list($message_ctype_primary, $message_ctype_secondary) = explode('/', $mimetype);\n\n        // print body if message doesn't have multiple parts\n        if ($message_ctype_primary == 'text' && !$recursive) {\n            // parts with unsupported type add to attachments list\n            if (!in_array($message_ctype_secondary, array('plain', 'html', 'enriched'))) {\n                $this->attachments[] = $structure;\n                return;\n            }\n\n            $structure->type = 'content';\n            $this->parts[] = $structure;\n\n            // Parse simple (plain text) message body\n            if ($message_ctype_secondary == 'plain') {\n                foreach ((array)$this->uu_decode($structure) as $uupart) {\n                    $this->mime_parts[$uupart->mime_id] = $uupart;\n                    $this->attachments[] = $uupart;\n                }\n            }\n        }\n        // the same for pgp signed messages\n        else if ($mimetype == 'application/pgp' && !$recursive) {\n            $structure->type = 'content';\n            $this->parts[] = $structure;\n        }\n        // message contains (more than one!) alternative parts\n        else if ($mimetype == 'multipart/alternative'\n            && is_array($structure->parts) && count($structure->parts) > 1\n        ) {\n            // get html/plaintext parts, other add to attachments list\n            foreach ($structure->parts as $p => $sub_part) {\n                $sub_mimetype = $sub_part->mimetype;\n                $is_multipart = preg_match('/^multipart\\/(related|relative|mixed|alternative)/', $sub_mimetype);\n\n                // skip empty text parts\n                if (!$sub_part->size && !$is_multipart) {\n                    continue;\n                }\n\n                // We've encountered (malformed) messages with more than\n                // one text/plain or text/html part here. There's no way to choose\n                // which one is better, so we'll display first of them and add\n                // others as attachments (#1489358)\n\n                // check if sub part is\n                if ($is_multipart)\n                    $related_part = $p;\n                else if ($sub_mimetype == 'text/plain' && !$plain_part)\n                    $plain_part = $p;\n                else if ($sub_mimetype == 'text/html' && !$html_part) {\n                    $html_part = $p;\n                    $this->got_html_part = true;\n                }\n                else if ($sub_mimetype == 'text/enriched' && !$enriched_part)\n                    $enriched_part = $p;\n                else {\n                    // add unsupported/unrecognized parts to attachments list\n                    $this->attachments[] = $sub_part;\n                }\n            }\n\n            // parse related part (alternative part could be in here)\n            if ($related_part !== null && !$this->parse_alternative) {\n                $this->parse_alternative = true;\n                $this->parse_structure($structure->parts[$related_part], true);\n                $this->parse_alternative = false;\n\n                // if plain part was found, we should unset it if html is preferred\n                if ($this->opt['prefer_html'] && count($this->parts))\n                    $plain_part = null;\n            }\n\n            // choose html/plain part to print\n            if ($html_part !== null && $this->opt['prefer_html']) {\n                $print_part = $structure->parts[$html_part];\n            }\n            else if ($enriched_part !== null) {\n                $print_part = $structure->parts[$enriched_part];\n            }\n            else if ($plain_part !== null) {\n                $print_part = $structure->parts[$plain_part];\n            }\n\n            // add the right message body\n            if (is_object($print_part)) {\n                $print_part->type = 'content';\n                $this->parts[] = $print_part;\n            }\n            // show plaintext warning\n            else if ($html_part !== null && empty($this->parts)) {\n                $c = new stdClass;\n                $c->type            = 'content';\n                $c->ctype_primary   = 'text';\n                $c->ctype_secondary = 'plain';\n                $c->mimetype        = 'text/plain';\n                $c->realtype        = 'text/html';\n\n                $this->parts[] = $c;\n            }\n        }\n        // this is an ecrypted message -> create a plaintext body with the according message\n        else if ($mimetype == 'multipart/encrypted') {\n            $p = new stdClass;\n            $p->type            = 'content';\n            $p->ctype_primary   = 'text';\n            $p->ctype_secondary = 'plain';\n            $p->mimetype        = 'text/plain';\n            $p->realtype        = 'multipart/encrypted';\n            $p->mime_id         = $structure->mime_id;\n\n            $this->parts[] = $p;\n\n            // add encrypted payload part as attachment\n            if (is_array($structure->parts)) {\n                for ($i=0; $i < count($structure->parts); $i++) {\n                    $subpart = $structure->parts[$i];\n                    if ($subpart->mimetype == 'application/octet-stream' || !empty($subpart->filename)) {\n                        $this->attachments[] = $subpart;\n                    }\n                }\n            }\n        }\n        // this is an S/MIME ecrypted message -> create a plaintext body with the according message\n        else if ($mimetype == 'application/pkcs7-mime') {\n            $p = new stdClass;\n            $p->type            = 'content';\n            $p->ctype_primary   = 'text';\n            $p->ctype_secondary = 'plain';\n            $p->mimetype        = 'text/plain';\n            $p->realtype        = 'application/pkcs7-mime';\n            $p->mime_id         = $structure->mime_id;\n\n            $this->parts[] = $p;\n\n            if (!empty($structure->filename)) {\n                $this->attachments[] = $structure;\n            }\n        }\n        // message contains multiple parts\n        else if (is_array($structure->parts) && !empty($structure->parts)) {\n            // iterate over parts\n            for ($i=0; $i < count($structure->parts); $i++) {\n                $mail_part      = &$structure->parts[$i];\n                $primary_type   = $mail_part->ctype_primary;\n                $secondary_type = $mail_part->ctype_secondary;\n                $part_mimetype  = $mail_part->mimetype;\n\n                // multipart/alternative or message/rfc822\n                if ($primary_type == 'multipart' || $part_mimetype == 'message/rfc822') {\n                    $this->parse_structure($mail_part, true);\n\n                    // list message/rfc822 as attachment as well (mostly .eml)\n                    if ($primary_type == 'message' && !empty($mail_part->filename)) {\n                        $this->attachments[] = $mail_part;\n                    }\n                }\n                // part text/[plain|html] or delivery status\n                else if ((($part_mimetype == 'text/plain' || $part_mimetype == 'text/html') && $mail_part->disposition != 'attachment') ||\n                    in_array($part_mimetype, array('message/delivery-status', 'text/rfc822-headers', 'message/disposition-notification'))\n                ) {\n                    // Allow plugins to handle also this part\n                    $plugin = $this->app->plugins->exec_hook('message_part_structure',\n                        array('object' => $this, 'structure' => $mail_part,\n                            'mimetype' => $part_mimetype, 'recursive' => true));\n\n                    if ($plugin['abort']) {\n                        continue;\n                    }\n\n                    if ($part_mimetype == 'text/html' && $mail_part->size) {\n                        $this->got_html_part = true;\n                    }\n\n                    $mail_part = $plugin['structure'];\n                    list($primary_type, $secondary_type) = explode('/', $plugin['mimetype']);\n\n                    // add text part if it matches the prefs\n                    if (!$this->parse_alternative ||\n                        ($secondary_type == 'html' && $this->opt['prefer_html']) ||\n                        ($secondary_type == 'plain' && !$this->opt['prefer_html'])\n                    ) {\n                        $mail_part->type = 'content';\n                        $this->parts[] = $mail_part;\n                    }\n\n                    // list as attachment as well\n                    if (!empty($mail_part->filename)) {\n                        $this->attachments[] = $mail_part;\n                    }\n                }\n                // ignore \"virtual\" protocol parts\n                else if ($primary_type == 'protocol') {\n                    continue;\n                }\n                // part is Microsoft Outlook TNEF (winmail.dat)\n                else if ($part_mimetype == 'application/ms-tnef') {\n                    $tnef_parts = (array) $this->tnef_decode($mail_part);\n                    foreach ($tnef_parts as $tpart) {\n                        $this->mime_parts[$tpart->mime_id] = $tpart;\n                        $this->attachments[] = $tpart;\n                    }\n\n                    // add winmail.dat to the list if it's content is unknown\n                    if (empty($tnef_parts) && !empty($mail_part->filename)) {\n                        $this->mime_parts[$mail_part->mime_id] = $mail_part;\n                        $this->attachments[] = $mail_part;\n                    }\n                }\n                // part is a file/attachment\n                else if (preg_match('/^(inline|attach)/', $mail_part->disposition) ||\n                    $mail_part->headers['content-id'] ||\n                    ($mail_part->filename &&\n                        (empty($mail_part->disposition) || preg_match('/^[a-z0-9!#$&.+^_-]+$/i', $mail_part->disposition)))\n                ) {\n                    // skip apple resource forks\n                    if ($message_ctype_secondary == 'appledouble' && $secondary_type == 'applefile')\n                        continue;\n\n                    // part belongs to a related message and is linked\n                    if (preg_match('/^multipart\\/(related|relative)/', $mimetype)\n                        && ($mail_part->headers['content-id'] || $mail_part->headers['content-location'])\n                    ) {\n                        if ($mail_part->headers['content-id'])\n                            $mail_part->content_id = preg_replace(array('/^</', '/>$/'), '', $mail_part->headers['content-id']);\n                        if ($mail_part->headers['content-location'])\n                            $mail_part->content_location = $mail_part->headers['content-base'] . $mail_part->headers['content-location'];\n\n                        $this->inline_parts[] = $mail_part;\n                    }\n                    // regular attachment with valid content type\n                    // (content-type name regexp according to RFC4288.4.2)\n                    else if (preg_match('/^[a-z0-9!#$&.+^_-]+\\/[a-z0-9!#$&.+^_-]+$/i', $part_mimetype)) {\n                        $this->attachments[] = $mail_part;\n                    }\n                    // attachment with invalid content type\n                    // replace malformed content type with application/octet-stream (#1487767)\n                    else if ($mail_part->filename) {\n                        $mail_part->ctype_primary   = 'application';\n                        $mail_part->ctype_secondary = 'octet-stream';\n                        $mail_part->mimetype        = 'application/octet-stream';\n\n                        $this->attachments[] = $mail_part;\n                    }\n                }\n                // calendar part not marked as attachment (#1490325)\n                else if ($part_mimetype == 'text/calendar') {\n                    if (!$mail_part->filename) {\n                        $mail_part->filename = 'calendar.ics';\n                    }\n\n                    $this->attachments[] = $mail_part;\n                }\n            }\n\n            // if this was a related part try to resolve references\n            if (preg_match('/^multipart\\/(related|relative)/', $mimetype) && sizeof($this->inline_parts)) {\n                $a_replaces = array();\n                $img_regexp = '/^image\\/(gif|jpe?g|png|tiff|bmp|svg)/';\n\n                foreach ($this->inline_parts as $inline_object) {\n                    $part_url = $this->get_part_url($inline_object->mime_id, $inline_object->ctype_primary);\n                    if (isset($inline_object->content_id))\n                        $a_replaces['cid:'.$inline_object->content_id] = $part_url;\n                    if ($inline_object->content_location) {\n                        $a_replaces[$inline_object->content_location] = $part_url;\n                    }\n\n                    if (!empty($inline_object->filename)) {\n                        // MS Outlook sends sometimes non-related attachments as related\n                        // In this case multipart/related message has only one text part\n                        // We'll add all such attachments to the attachments list\n                        if (!isset($this->got_html_part)) {\n                            $this->attachments[] = $inline_object;\n                        }\n                        // MS Outlook sometimes also adds non-image attachments as related\n                        // We'll add all such attachments to the attachments list\n                        // Warning: some browsers support pdf in <img/>\n                        else if (!preg_match($img_regexp, $inline_object->mimetype)) {\n                            $this->attachments[] = $inline_object;\n                        }\n                        // @TODO: we should fetch HTML body and find attachment's content-id\n                        // to handle also image attachments without reference in the body\n                        // @TODO: should we list all image attachments in text mode?\n                    }\n                }\n\n                // add replace array to each content part\n                // (will be applied later when part body is available)\n                foreach ($this->parts as $i => $part) {\n                    if ($part->type == 'content')\n                        $this->parts[$i]->replaces = $a_replaces;\n                }\n            }\n        }\n        // message is a single part non-text\n        else if ($structure->filename) {\n            $this->attachments[] = $structure;\n        }\n        // message is a single part non-text (without filename)\n        else if (preg_match('/application\\//i', $mimetype)) {\n            $this->attachments[] = $structure;\n        }\n    }\n\n    /**\n     * Fill aflat array with references to all parts, indexed by part numbers\n     *\n     * @param rcube_message_part $part Message body structure\n     */\n    private function get_mime_numbers(&$part)\n    {\n        if (strlen($part->mime_id))\n            $this->mime_parts[$part->mime_id] = &$part;\n\n        if (is_array($part->parts))\n            for ($i=0; $i<count($part->parts); $i++)\n                $this->get_mime_numbers($part->parts[$i]);\n    }\n\n    /**\n     * Decode a Microsoft Outlook TNEF part (winmail.dat)\n     *\n     * @param rcube_message_part $part Message part to decode\n     * @return array\n     */\n    function tnef_decode(&$part)\n    {\n        // @TODO: attachment may be huge, handle body via file\n        $body     = $this->get_part_body($part->mime_id);\n        $tnef     = new rcube_tnef_decoder;\n        $tnef_arr = $tnef->decompress($body);\n        $parts    = array();\n\n        unset($body);\n\n        foreach ($tnef_arr as $pid => $winatt) {\n            $tpart = new rcube_message_part;\n\n            $tpart->filename        = $this->fix_attachment_name(trim($winatt['name']), $part);\n            $tpart->encoding        = 'stream';\n            $tpart->ctype_primary   = trim(strtolower($winatt['type']));\n            $tpart->ctype_secondary = trim(strtolower($winatt['subtype']));\n            $tpart->mimetype        = $tpart->ctype_primary . '/' . $tpart->ctype_secondary;\n            $tpart->mime_id         = 'winmail.' . $part->mime_id . '.' . $pid;\n            $tpart->size            = $winatt['size'];\n            $tpart->body            = $winatt['stream'];\n\n            $parts[] = $tpart;\n            unset($tnef_arr[$pid]);\n        }\n\n        return $parts;\n    }\n\n    /**\n     * Parse message body for UUencoded attachments bodies\n     *\n     * @param rcube_message_part $part Message part to decode\n     * @return array\n     */\n    function uu_decode(&$part)\n    {\n        // @TODO: messages may be huge, handle body via file\n        $part->body = $this->get_part_body($part->mime_id);\n        $parts      = array();\n        $pid        = 0;\n\n        // FIXME: line length is max.65?\n        $uu_regexp_begin = '/begin [0-7]{3,4} ([^\\r\\n]+)\\r?\\n/s';\n        $uu_regexp_end   = '/`\\r?\\nend((\\r?\\n)|($))/s';\n\n        while (preg_match($uu_regexp_begin, $part->body, $matches, PREG_OFFSET_CAPTURE)) {\n            $startpos = $matches[0][1];\n\n            if (!preg_match($uu_regexp_end, $part->body, $m, PREG_OFFSET_CAPTURE, $startpos)) {\n                break;\n            }\n\n            $endpos    = $m[0][1];\n            $begin_len = strlen($matches[0][0]);\n            $end_len   = strlen($m[0][0]);\n\n            // extract attachment body\n            $filebody = substr($part->body, $startpos + $begin_len, $endpos - $startpos - $begin_len - 1);\n            $filebody = str_replace(\"\\r\\n\", \"\\n\", $filebody);\n\n            // remove attachment body from the message body\n            $part->body = substr_replace($part->body, '', $startpos, $endpos + $end_len - $startpos);\n            // mark body as modified so it will not be cached by rcube_imap_cache\n            $part->body_modified = true;\n\n            // add attachments to the structure\n            $uupart = new rcube_message_part;\n            $uupart->filename = trim($matches[1][0]);\n            $uupart->encoding = 'stream';\n            $uupart->body     = convert_uudecode($filebody);\n            $uupart->size     = strlen($uupart->body);\n            $uupart->mime_id  = 'uu.' . $part->mime_id . '.' . $pid;\n\n            $ctype = rcube_mime::file_content_type($uupart->body, $uupart->filename, 'application/octet-stream', true);\n            $uupart->mimetype = $ctype;\n            list($uupart->ctype_primary, $uupart->ctype_secondary) = explode('/', $ctype);\n\n            $parts[] = $uupart;\n            $pid++;\n        }\n\n        return $parts;\n    }\n\n    /**\n     * Fix attachment name encoding if needed/possible\n     */\n    protected function fix_attachment_name($name, $part)\n    {\n        if ($name == rcube_charset::clean($name)) {\n            return $name;\n        }\n\n        // find charset from part or its parent(s)\n        if ($part->charset) {\n            $charsets[] = $part->charset;\n        }\n        else {\n            // check first part (common case)\n            $n = strpos($part->mime_id, '.') ? preg_replace('/\\.[0-9]+$/', '', $part->mime_id) . '.1' : 1;\n            if (($_part = $this->mime_parts[$n]) && $_part->charset) {\n                $charsets[] = $_part->charset;\n            }\n\n            // check parents' charset\n            $items = explode('.', $part->mime_id);\n            for ($i = count($items)-1; $i > 0; $i--) {\n                $last   = array_pop($items);\n                $parent = $this->mime_parts[join('.', $items)];\n\n                if ($parent && $parent->charset) {\n                    $charsets[] = $parent->charset;\n                }\n            }\n        }\n\n        if ($this->headers->charset) {\n            $charsets[] = $this->headers->charset;\n        }\n\n        if (empty($charsets)) {\n            $rcube      = rcube::get_instance();\n            $charsets[] = rcube_charset::detect($name, $rcube->config->get('default_charset', RCUBE_CHARSET));\n        }\n\n        foreach (array_unique($charsets) as $charset) {\n            $_name = rcube_charset::convert($name, $charset);\n\n            if ($_name == rcube_charset::clean($_name)) {\n                if (!$part->charset) {\n                    $part->charset = $charset;\n                }\n\n                return $_name;\n            }\n        }\n\n        return $name;\n    }\n\n    /**\n     * Deprecated methods (to be removed)\n     */\n\n    public static function unfold_flowed($text)\n    {\n        return rcube_mime::unfold_flowed($text);\n    }\n\n    public static function format_flowed($text, $length = 72)\n    {\n        return rcube_mime::format_flowed($text, $length);\n    }\n}\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube PHP suite                          |\n | Copyright (C) 2005-2014 The Roundcube Dev Team                        |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | CONTENTS:                                                             |\n |   Abstract class for output generation                                |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <alec@alec.pl>                            |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Class for output generation\n *\n * @package    Framework\n * @subpackage View\n */\nabstract class rcube_output\n{\n    public $browser;\n\n    protected $app;\n    protected $config;\n    protected $charset = RCUBE_CHARSET;\n    protected $env = array();\n    protected $skins = array();\n\n\n    /**\n     * Object constructor\n     */\n    public function __construct()\n    {\n        $this->app     = rcube::get_instance();\n        $this->config  = $this->app->config;\n        $this->browser = new rcube_browser();\n    }\n\n    /**\n     * Magic getter\n     */\n    public function __get($var)\n    {\n        // allow read-only access to some members\n        switch ($var) {\n            case 'env':     return $this->env;\n            case 'skins':   return $this->skins;\n            case 'charset': return $this->charset;\n        }\n\n        return null;\n    }\n\n    /**\n     * Setter for output charset.\n     * To be specified in a meta tag and sent as http-header\n     *\n     * @param string $charset Charset name\n     */\n    public function set_charset($charset)\n    {\n        $this->charset = $charset;\n    }\n\n    /**\n     * Getter for output charset\n     *\n     * @return string Output charset name\n     */\n    public function get_charset()\n    {\n        return $this->charset;\n    }\n\n    /**\n     * Set environment variable\n     *\n     * @param string $name   Property name\n     * @param mixed  $value  Property value\n     */\n    public function set_env($name, $value)\n    {\n        $this->env[$name] = $value;\n    }\n\n    /**\n     * Environment variable getter.\n     *\n     * @param string $name  Property name\n     *\n     * @return mixed Property value\n     */\n    public function get_env($name)\n    {\n        return $this->env[$name];\n    }\n\n    /**\n     * Delete all stored env variables and commands\n     */\n    public function reset()\n    {\n        $this->env = array();\n    }\n\n    /**\n     * Invoke display_message command\n     *\n     * @param string  $message  Message to display\n     * @param string  $type     Message type [notice|confirm|error]\n     * @param array   $vars     Key-value pairs to be replaced in localized text\n     * @param boolean $override Override last set message\n     * @param int     $timeout  Message displaying time in seconds\n     */\n    abstract function show_message($message, $type = 'notice', $vars = null, $override = true, $timeout = 0);\n\n    /**\n     * Redirect to a certain url.\n     *\n     * @param mixed $p     Either a string with the action or url parameters as key-value pairs\n     * @param int   $delay Delay in seconds\n     */\n    abstract function redirect($p = array(), $delay = 1);\n\n    /**\n     * Send output to the client.\n     */\n    abstract function send();\n\n    /**\n     * Send HTTP headers to prevent caching a page\n     */\n    public function nocacheing_headers()\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        header(\"Expires: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\n        header(\"Last-Modified: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\n\n        // We need to set the following headers to make downloads work using IE in HTTPS mode.\n        if ($this->browser->ie && rcube_utils::https_check()) {\n            header('Pragma: private');\n            header(\"Cache-Control: private, must-revalidate\");\n        }\n        else {\n            header(\"Cache-Control: private, no-cache, no-store, must-revalidate, post-check=0, pre-check=0\");\n            header(\"Pragma: no-cache\");\n        }\n    }\n\n    /**\n     * Send header with expire date 30 days in future\n     *\n     * @param int Expiration time in seconds\n     */\n    public function future_expire_header($offset = 2600000)\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        header(\"Expires: \" . gmdate(\"D, d M Y H:i:s\", time()+$offset) . \" GMT\");\n        header(\"Cache-Control: max-age=$offset\");\n        header(\"Pragma: \");\n    }\n\n    /**\n     * Send browser compatibility/security/etc. headers\n     */\n    public function common_headers()\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        // Unlock IE compatibility mode\n        if ($this->browser->ie) {\n            header('X-UA-Compatible: IE=edge');\n        }\n\n        // Request browser to disable DNS prefetching (CVE-2010-0464)\n        header(\"X-DNS-Prefetch-Control: off\");\n    }\n\n    /**\n     * Show error page and terminate script execution\n     *\n     * @param int    $code     Error code\n     * @param string $message  Error message\n     */\n    public function raise_error($code, $message)\n    {\n        // STUB: to be overloaded by specific output classes\n        fputs(STDERR, \"Error $code: $message\\n\");\n        exit(-1);\n    }\n\n    /**\n     * Create an edit field for inclusion on a form\n     *\n     * @param string col field name\n     * @param string value field value\n     * @param array attrib HTML element attributes for field\n     * @param string type HTML element type (default 'text')\n     *\n     * @return string HTML field definition\n     */\n    public static function get_edit_field($col, $value, $attrib, $type = 'text')\n    {\n        static $colcounts = array();\n\n        $fname = '_'.$col;\n        $attrib['name']  = $fname . ($attrib['array'] ? '[]' : '');\n        $attrib['class'] = trim($attrib['class'] . ' ff_' . $col);\n\n        if ($type == 'checkbox') {\n            $attrib['value'] = '1';\n            $input = new html_checkbox($attrib);\n        }\n        else if ($type == 'textarea') {\n            $attrib['cols'] = $attrib['size'];\n            $input = new html_textarea($attrib);\n        }\n        else if ($type == 'select') {\n            $input = new html_select($attrib);\n            $input->add('---', '');\n            $input->add(array_values($attrib['options']), array_keys($attrib['options']));\n        }\n        else if ($attrib['type'] == 'password') {\n            $input = new html_passwordfield($attrib);\n        }\n        else {\n            if ($attrib['type'] != 'text' && $attrib['type'] != 'hidden') {\n                $attrib['type'] = 'text';\n            }\n            $input = new html_inputfield($attrib);\n        }\n\n        // use value from post\n        if (isset($_POST[$fname])) {\n            $postvalue = rcube_utils::get_input_value($fname, rcube_utils::INPUT_POST, true);\n            $value = $attrib['array'] ? $postvalue[intval($colcounts[$col]++)] : $postvalue;\n        }\n\n        $out = $input->show($value);\n\n        return $out;\n    }\n\n    /**\n     * Convert a variable into a javascript object notation\n     *\n     * @param mixed Input value\n     *\n     * @return string Serialized JSON string\n     */\n    public static function json_serialize($input)\n    {\n        $input = rcube_charset::clean($input);\n\n        // sometimes even using rcube_charset::clean() the input contains invalid UTF-8 sequences\n        // that's why we have @ here\n        return @json_encode($input);\n    }\n}\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | program/steps/addressbook/export.inc                                  |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2008-2013, The Roundcube Dev Team                       |\n | Copyright (C) 2011-2013, Kolab Systems AG                             |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Export the selected address book as vCard file                      |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <machniak@kolabsys.com>                   |\n +-----------------------------------------------------------------------+\n*/\n\n// Use search result\nif (!empty($_REQUEST['_search']) && isset($_SESSION['search'][$_REQUEST['_search']])) {\n    $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n    $search  = (array)$_SESSION['search'][$_REQUEST['_search']];\n    $records = array();\n\n    // Get records from all sources\n    foreach ($search as $s => $set) {\n        $source = $RCMAIL->get_address_book($s);\n\n        // reset page\n        $source->set_page(1);\n        $source->set_pagesize(99999);\n        $source->set_search_set($set);\n\n        // get records\n        $result = $source->list_records();\n\n        while ($record = $result->next()) {\n            // because vcard_map is per-source we need to create vcard here\n            prepare_for_export($record, $source);\n\n            $record['sourceid'] = $s;\n            $key = rcube_addressbook::compose_contact_key($record, $sort_col);\n            $records[$key] = $record;\n        }\n\n        unset($result);\n    }\n\n    // sort the records\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $result = new rcube_result_set($count);\n    $result->records = array_values($records);\n}\n// selected contacts\nelse if (!empty($_REQUEST['_cid'])) {\n    $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n    $records  = array();\n\n    // Selected contact IDs (with multi-source support)\n    $cids = rcmail_get_cids();\n\n    foreach ($cids as $s => $ids) {\n        $source = $RCMAIL->get_address_book($s);\n        $result = $source->search('ID', $ids, 1, true, true);\n\n        while ($record = $result->next()) {\n            // because vcard_map is per-source we need to create vcard here\n            prepare_for_export($record, $source);\n\n            $record['sourceid'] = $s;\n            $key = rcube_addressbook::compose_contact_key($record, $sort_col);\n            $records[$key] = $record;\n        }\n    }\n\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $result = new rcube_result_set($count);\n    $result->records = array_values($records);\n}\n// selected directory/group\nelse {\n    $CONTACTS = rcmail_contact_source(null, true);\n\n    // get contacts for this user\n    $CONTACTS->set_page(1);\n    $CONTACTS->set_pagesize(99999);\n    $result = $CONTACTS->list_records(null, 0, true);\n}\n\n// Give plugins a possibility to implement other output formats or modify the result\n$plugin = $RCMAIL->plugins->exec_hook('addressbook_export', array('result' => $result));\n$result = $plugin['result'];\n\nif ($plugin['abort']) {\n    exit;\n}\n\n// send downlaod headers\nheader('Content-Type: text/x-vcard; charset='.RCUBE_CHARSET);\nheader('Content-Disposition: attachment; filename=\"contacts.vcf\"');\n\nwhile ($result && ($row = $result->next())) {\n    if ($CONTACTS) {\n        prepare_for_export($row, $CONTACTS);\n    }\n\n    // fix folding and end-of-line chars\n    $row['vcard'] = preg_replace('/\\r|\\n\\s+/', '', $row['vcard']);\n    $row['vcard'] = preg_replace('/\\n/', rcube_vcard::$eol, $row['vcard']);\n    echo rcube_vcard::rfc2425_fold($row['vcard']) . rcube_vcard::$eol;\n}\n\nexit;\n\n\n/**\n * Copy contact record properties into a vcard object\n */\nfunction prepare_for_export(&$record, $source = null)\n{\n    $groups   = $source && $source->groups && $source->export_groups ? $source->get_record_groups($record['ID']) : null;\n    $fieldmap = $source ? $source->vcard_map : null;\n\n    if (empty($record['vcard'])) {\n        $vcard = new rcube_vcard($record['vcard'], RCUBE_CHARSET, false, $fieldmap);\n        $vcard->reset();\n\n        foreach ($record as $key => $values) {\n            list($field, $section) = explode(':', $key);\n            // avoid unwanted casting of DateTime objects to an array\n            // (same as in rcube_contacts::convert_save_data())\n            if (is_object($values) && is_a($values, 'DateTime')) {\n                $values = array($values);\n            }\n\n            foreach ((array) $values as $value) {\n                if (is_array($value) || is_a($value, 'DateTime') || @strlen($value)) {\n                    $vcard->set($field, $value, strtoupper($section));\n                }\n            }\n        }\n\n        // append group names\n        if ($groups) {\n            $vcard->set('groups', join(',', $groups), null);\n        }\n\n        $record['vcard'] = $vcard->export();\n    }\n    // patch categories to alread existing vcard block\n    else if ($record['vcard']) {\n        $vcard = new rcube_vcard($record['vcard'], RCUBE_CHARSET, false, $fieldmap);\n\n        // unset CATEGORIES entry, it might be not up-to-date (#1490277)\n        $vcard->set('groups', null);\n        $record['vcard'] = $vcard->export();\n\n        if (!empty($groups)) {\n            $vgroups = 'CATEGORIES:' . rcube_vcard::vcard_quote($groups, ',');\n            $record['vcard'] = str_replace('END:VCARD', $vgroups . rcube_vcard::$eol . 'END:VCARD', $record['vcard']);\n        }\n    }\n}\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | program/steps/mail/get.inc                                            |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2005-2013, The Roundcube Dev Team                       |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Delivering a specific part of a mail message                        |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n\n// show loading page\nif (!empty($_GET['_preload'])) {\n    $_get = $_GET + array('_mimewarning' => 1, '_embed' => 1);\n    unset($_get['_preload']);\n    $url = $RCMAIL->url($_get);\n    $message = $RCMAIL->gettext('loadingdata');\n\n    header('Content-Type: text/html; charset=' . RCUBE_CHARSET);\n    print \"<html>\\n<head>\\n\"\n        . '<meta http-equiv=\"refresh\" content=\"0; url='.rcube::Q($url).'\">' . \"\\n\"\n        . '<meta http-equiv=\"content-type\" content=\"text/html; charset='.RCUBE_CHARSET.'\">' . \"\\n\"\n        . \"</head>\\n<body>\\n$message\\n</body>\\n</html>\";\n    exit;\n}\n\nob_end_clean();\n\n// similar code as in program/steps/mail/show.inc\nif (!empty($_GET['_uid'])) {\n    $uid = rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GET);\n    $RCMAIL->config->set('prefer_html', true);\n    $MESSAGE = new rcube_message($uid, null, intval($_GET['_safe']));\n}\n\n// check connection status\ncheck_storage_status();\n\n$part_id = rcube_utils::get_input_value('_part', rcube_utils::INPUT_GPC);\n\n// show part page\nif (!empty($_GET['_frame'])) {\n    if ($part_id && ($part = $MESSAGE->mime_parts[$part_id])) {\n        $filename = rcmail_attachment_name($part);\n        $OUTPUT->set_pagetitle($filename);\n    }\n\n    // register UI objects\n    $OUTPUT->add_handlers(array(\n        'messagepartframe'    => 'rcmail_message_part_frame',\n        'messagepartcontrols' => 'rcmail_message_part_controls',\n    ));\n\n    $OUTPUT->set_env('mailbox', $RCMAIL->storage->get_folder());\n    $OUTPUT->set_env('uid', $uid);\n    $OUTPUT->set_env('part', $part_id);\n    $OUTPUT->set_env('filename', $filename);\n\n    $OUTPUT->send('messagepart');\n    exit;\n}\n\n// render thumbnail of an image attachment\nelse if ($_GET['_thumb']) {\n    $pid = rcube_utils::get_input_value('_part', rcube_utils::INPUT_GET);\n    if ($part = $MESSAGE->mime_parts[$pid]) {\n        $thumbnail_size = $RCMAIL->config->get('image_thumbnail_size', 240);\n        $temp_dir       = $RCMAIL->config->get('temp_dir');\n        $mimetype       = $part->mimetype;\n        $file_ident     = $MESSAGE->headers->messageID . ':' . $part->mime_id . ':' . $part->size . ':' . $part->mimetype;\n        $cache_basename = $temp_dir . '/' . md5($file_ident . ':' . $RCMAIL->user->ID . ':' . $thumbnail_size);\n        $cache_file     = $cache_basename . '.thumb';\n\n        // render thumbnail image if not done yet\n        if (!is_file($cache_file)) {\n            if ($fp = fopen(($orig_name = $cache_basename . '.tmp'), 'w')) {\n                $MESSAGE->get_part_body($part->mime_id, false, 0, $fp);\n                fclose($fp);\n\n                $image = new rcube_image($orig_name);\n                if ($imgtype = $image->resize($thumbnail_size, $cache_file, true)) {\n                    $mimetype = 'image/' . $imgtype;\n                    unlink($orig_name);\n                }\n                else if (stripos($mimetype, 'image/svg') === 0) {\n                    $content = rcmail_svg_filter(file_get_contents($orig_name));\n                    file_put_contents($cache_file, $content);\n                    unlink($orig_name);\n                }\n                else {\n                    rename($orig_name, $cache_file);\n                }\n            }\n        }\n\n        if (is_file($cache_file)) {\n            header('Content-Type: ' . $mimetype);\n            readfile($cache_file);\n        }\n    }\n\n    exit;\n}\nelse if (strlen($part_id)) {\n    if ($part = $MESSAGE->mime_parts[$part_id]) {\n        $mimetype = rcmail_fix_mimetype($part->mimetype);\n\n        // allow post-processing of the message body\n        $plugin = $RCMAIL->plugins->exec_hook('message_part_get', array(\n            'uid'      => $MESSAGE->uid,\n            'id'       => $part->mime_id,\n            'mimetype' => $mimetype,\n            'part'     => $part,\n            'download' => !empty($_GET['_download'])\n        ));\n\n        if ($plugin['abort']) {\n            exit;\n        }\n\n        // overwrite modified vars from plugin\n        $mimetype   = $plugin['mimetype'];\n        $extensions = rcube_mime::get_mime_extensions($mimetype);\n\n        if ($plugin['body']) {\n            $body = $plugin['body'];\n        }\n\n        // compare file mimetype with the stated content-type headers and file extension to avoid malicious operations\n        if (!empty($_REQUEST['_embed']) && empty($_REQUEST['_nocheck'])) {\n            $file_extension = strtolower(pathinfo($part->filename, PATHINFO_EXTENSION));\n\n            // 1. compare filename suffix with expected suffix derived from mimetype\n            $valid = $file_extension && in_array($file_extension, (array)$extensions) || empty($extensions) || !empty($_REQUEST['_mimeclass']);\n\n            // 2. detect the real mimetype of the attachment part and compare it with the stated mimetype and filename extension\n            if ($valid || !$file_extension || $mimetype == 'application/octet-stream' || stripos($mimetype, 'text/') === 0) {\n                $tmp_body = $body ?: $MESSAGE->get_part_body($part->mime_id, false, 2048);\n\n                // detect message part mimetype\n                $real_mimetype = rcube_mime::file_content_type($tmp_body, $part->filename, $mimetype, true, true);\n                list($real_ctype_primary, $real_ctype_secondary) = explode('/', $real_mimetype);\n\n                // accept text/plain with any extension\n                if ($real_mimetype == 'text/plain' && $real_mimetype == $mimetype) {\n                    $valid_extension = true;\n                }\n                // ignore differences in text/* mimetypes. Filetype detection isn't very reliable here\n                else if ($real_ctype_primary == 'text' && strpos($mimetype, $real_ctype_primary) === 0) {\n                    $real_mimetype   = $mimetype;\n                    $valid_extension = true;\n                }\n                // ignore filename extension if mimeclass matches (#1489029)\n                else if (!empty($_REQUEST['_mimeclass']) && $real_ctype_primary == $_REQUEST['_mimeclass']) {\n                    $valid_extension = true;\n                }\n                else {\n                    // get valid file extensions\n                    $extensions      = rcube_mime::get_mime_extensions($real_mimetype);\n                    $valid_extension = !$file_extension || empty($extensions) || in_array($file_extension, (array)$extensions);\n                }\n\n                // fix mimetype for images wrongly declared as octet-stream\n                if ($mimetype == 'application/octet-stream' && strpos($real_mimetype, 'image/') === 0 && $valid_extension) {\n                    $mimetype = $real_mimetype;\n                }\n\n                // \"fix\" real mimetype the same way the original is before comparison\n                $real_mimetype = rcmail_fix_mimetype($real_mimetype);\n\n                $valid = $real_mimetype == $mimetype && $valid_extension;\n            }\n            else {\n                $real_mimetype = $mimetype;\n            }\n\n            // show warning if validity checks failed\n            if (!$valid) {\n                // send blocked.gif for expected images\n                if (empty($_REQUEST['_mimewarning']) && strpos($mimetype, 'image/') === 0) {\n                    // Do not cache. Failure might be the result of a misconfiguration, thus real content should be returned once fixed. \n                    $content = $RCMAIL->get_resource_content('blocked.gif');\n                    $OUTPUT->nocacheing_headers();\n                    header(\"Content-Type: image/gif\");\n                    header(\"Content-Transfer-Encoding: binary\");\n                    header(\"Content-Length: \" . strlen($content));\n                    echo $content;\n                }\n                else {  // html warning with a button to load the file anyway\n                    $OUTPUT = new rcmail_html_page();\n                    $OUTPUT->write(html::tag('html', null, html::tag('body', 'embed',\n                        html::div(array('class' => 'rcmail-inline-message rcmail-inline-warning'),\n                            $RCMAIL->gettext(array(\n                                'name' => 'attachmentvalidationerror',\n                                'vars' => array(\n                                    'expected' => $mimetype . ($file_extension ? \" (.$file_extension)\" : ''),\n                                    'detected' => $real_mimetype . ($extensions[0] ? \" (.$extensions[0])\" : ''),\n                                )\n                            ))\n                            . html::p(array('class' => 'rcmail-inline-buttons'),\n                                html::tag('button', array(\n                                    'onclick' => \"location.href='\" . $RCMAIL->url(array_merge($_GET, array('_nocheck' => 1))) . \"'\"\n                                ),\n                                $RCMAIL->gettext('showanyway'))\n                            )\n                        ))));\n                }\n\n                exit;\n            }\n        }\n\n\n        // TIFF to JPEG conversion, if needed\n        $tiff_support = !empty($_SESSION['browser_caps']) && !empty($_SESSION['browser_caps']['tif']);\n        if (!empty($_REQUEST['_embed']) && !$tiff_support\n            && rcube_image::is_convertable('image/tiff')\n            && rcmail_part_image_type($part) == 'image/tiff'\n        ) {\n            $tiff2jpeg = true;\n            $mimetype  = 'image/jpeg';\n        }\n\n\n        $browser = $RCMAIL->output->browser;\n        list($ctype_primary, $ctype_secondary) = explode('/', $mimetype);\n\n        if (!$plugin['download'] && $ctype_primary == 'text') {\n            header(\"Content-Type: text/$ctype_secondary; charset=\" . ($part->charset ?: RCUBE_CHARSET));\n        }\n        else {\n            header(\"Content-Type: $mimetype\");\n            header(\"Content-Transfer-Encoding: binary\");\n        }\n\n        // deliver part content\n        if ($ctype_primary == 'text' && $ctype_secondary == 'html' && empty($plugin['download'])) {\n            // Check if we have enough memory to handle the message in it\n            // #1487424: we need up to 10x more memory than the body\n            if (!rcube_utils::mem_check($part->size * 10)) {\n                $out = '<body>' . $RCMAIL->gettext('messagetoobig'). ' '\n                    . html::a('?_task=mail&_action=get&_download=1&_uid='.$MESSAGE->uid.'&_part='.$part->mime_id\n                        .'&_mbox='. urlencode($MESSAGE->folder), $RCMAIL->gettext('download')) . '</body></html>';\n            }\n            else {\n                // get part body if not available\n                if (!isset($body)) {\n                    $body = $MESSAGE->get_part_body($part->mime_id, true);\n                }\n\n                // show images?\n                rcmail_check_safe($MESSAGE);\n\n                // render HTML body\n                $out = rcmail_print_body($body, $part, array('safe' => $MESSAGE->is_safe, 'inline_html' => false));\n\n                // insert remote objects warning into HTML body\n                if ($REMOTE_OBJECTS) {\n                    $body_start = 0;\n                    if ($body_pos = strpos($out, '<body')) {\n                        $body_start = strpos($out, '>', $body_pos) + 1;\n                    }\n\n                    $out = substr($out, 0, $body_start)\n                        . html::div(array('class' => 'rcmail-inline-message rcmail-inline-warning'),\n                            rcube::Q($RCMAIL->gettext('blockedimages')) . '&nbsp;' .\n                            html::tag('button',\n                                array('onclick' => \"location.href='\" . $RCMAIL->url(array_merge($_GET, array('_safe' => 1))) . \"'\"),\n                                rcube::Q($RCMAIL->gettext('showimages')))\n                        )\n                        . substr($out, $body_start);\n                }\n            }\n\n            // check connection status\n            if ($part->size && empty($body)) {\n                check_storage_status();\n            }\n\n            $OUTPUT = new rcmail_html_page();\n            $OUTPUT->write($out);\n        }\n        else {\n            // don't kill the connection if download takes more than 30 sec.\n            @set_time_limit(0);\n\n            $filename = rcmail_attachment_name($part);\n\n            if ($browser->ie)\n                $filename = rawurlencode($filename);\n            else\n                $filename = addcslashes($filename, '\"');\n\n            $disposition = !empty($plugin['download']) ? 'attachment' : 'inline';\n\n            // Workaround for nasty IE bug (#1488844)\n            // If Content-Disposition header contains string \"attachment\" e.g. in filename\n            // IE handles data as attachment not inline\n            if ($disposition == 'inline' && $browser->ie && $browser->ver < 9) {\n                $filename = str_ireplace('attachment', 'attach', $filename);\n            }\n\n            // add filename extension if missing\n            if (!pathinfo($filename, PATHINFO_EXTENSION) && ($extensions = rcube_mime::get_mime_extensions($mimetype))) {\n                $filename .= '.' . $extensions[0];\n            }\n\n            header(\"Content-Disposition: $disposition; filename=\\\"$filename\\\"\");\n\n            // handle tiff to jpeg conversion\n            if (!empty($tiff2jpeg)) {\n                $temp_dir  = unslashify($RCMAIL->config->get('temp_dir'));\n                $file_path = tempnam($temp_dir, 'rcmAttmnt');\n\n                // write content to temp file\n                if ($body) {\n                    $saved = file_put_contents($file_path, $body);\n                }\n                else if ($part->size) {\n                    $fd    = fopen($file_path, 'w');\n                    $saved = $MESSAGE->get_part_body($part->mime_id, false, 0, $fd);\n                    fclose($fd);\n                }\n\n                // convert image to jpeg and send it to the browser\n                if ($sent = $saved) {\n                    $image = new rcube_image($file_path);\n                    if ($image->convert(rcube_image::TYPE_JPG, $file_path)) {\n                        header(\"Content-Length: \" . filesize($file_path));\n                        readfile($file_path);\n                    }\n                    unlink($file_path);\n                }\n            }\n            else {\n                $sent = rcmail_message_part_output($body, $part, $mimetype, $plugin['download']);\n            }\n\n            // check connection status\n            if ($part->size && !$sent) {\n                check_storage_status();\n            }\n        }\n\n        exit;\n    }\n}\n// print message\nelse {\n    // send correct headers for content type\n    header(\"Content-Type: text/html\");\n\n    $cont = \"<html>\\n<head><title></title>\\n</head>\\n<body>\";\n    $cont .= rcmail_message_body(array());\n    $cont .= \"\\n</body>\\n</html>\";\n\n    $OUTPUT = new rcmail_html_page();\n    $OUTPUT->write($cont);\n\n    exit;\n}\n\n\n// if we arrive here, the requested part was not found\nheader('HTTP/1.1 404 Not Found');\nexit;\n\n/**\n * Handles nicely storage connection errors\n */\nfunction check_storage_status()\n{\n    $error = rcmail::get_instance()->storage->get_error_code();\n\n    // Check if we have a connection error\n    if ($error == rcube_imap_generic::ERROR_BAD) {\n        ob_end_clean();\n\n        // Get action is often executed simultanously.\n        // Some servers have MAXPERIP or other limits.\n        // To workaround this we'll wait for some time\n        // and try again (once).\n        // Note: Random sleep interval is used to minimize concurency\n        // in getting message parts\n\n        if (!isset($_GET['_redirected'])) {\n            usleep(rand(10,30)*100000); // 1-3 sec.\n            header('Location: ' . $_SERVER['REQUEST_URI'] . '&_redirected=1');\n        }\n        else {\n            rcube::raise_error(array(\n                'code' => 500, 'type' => 'php',\n                'file' => __FILE__, 'line' => __LINE__,\n                'message' => 'Unable to get/display message part. IMAP connection error'),\n                true, true);\n        }\n\n        // Don't kill session, just quit (#1486995)\n        exit;\n    }\n}\n\n/**\n * Attachment properties table\n */\nfunction rcmail_message_part_controls($attrib)\n{\n    global $MESSAGE, $RCMAIL;\n\n    $part = asciiwords(rcube_utils::get_input_value('_part', rcube_utils::INPUT_GPC));\n    if (!is_object($MESSAGE) || !is_array($MESSAGE->parts)\n        || !($_GET['_uid'] && $_GET['_part']) || !$MESSAGE->mime_parts[$part]\n    ) {\n        return '';\n    }\n\n    $part  = $MESSAGE->mime_parts[$part];\n    $table = new html_table(array('cols' => 2));\n\n    $table->add('title', rcube::Q($RCMAIL->gettext('namex')).':');\n    $table->add('header', rcube::Q(rcmail_attachment_name($part)));\n\n    $table->add('title', rcube::Q($RCMAIL->gettext('type')).':');\n    $table->add('header', rcube::Q($part->mimetype));\n\n    $table->add('title', rcube::Q($RCMAIL->gettext('size')).':');\n    $table->add('header', rcube::Q($RCMAIL->message_part_size($part)));\n\n    return $table->show($attrib);\n}\n\n/**\n * Attachment preview frame\n */\nfunction rcmail_message_part_frame($attrib)\n{\n    global $MESSAGE, $RCMAIL;\n\n    $part = $MESSAGE->mime_parts[asciiwords(rcube_utils::get_input_value('_part', rcube_utils::INPUT_GPC))];\n    $ctype_primary = strtolower($part->ctype_primary);\n\n    $attrib['src'] = './?' . str_replace('_frame=', ($ctype_primary=='text' ? '_embed=' : '_preload='), $_SERVER['QUERY_STRING']);\n\n    $RCMAIL->output->add_gui_object('messagepartframe', $attrib['id']);\n\n    return html::iframe($attrib);\n}\n\n/**\n * Output attachment body with content filtering\n */\nfunction rcmail_message_part_output($body, $part, $mimetype, $download)\n{\n    global $MESSAGE, $RCMAIL;\n\n    if (!$part->size && !$body) {\n        return false;\n    }\n\n    $browser = $RCMAIL->output->browser;\n    $secure  = stripos($mimetype, 'image/') === false || $download;\n\n    // Remove <script> in SVG images\n    if (!$secure && stripos($mimetype, 'image/svg') === 0) {\n        if (!$body) {\n            $body = $MESSAGE->get_part_body($part->mime_id, false);\n            if (empty($body)) {\n                return false;\n            }\n        }\n\n        echo rcmail_svg_filter($body);\n        return true;\n    }\n\n    // Remove dangerous content in images for older IE (to be removed)\n    if (!$secure && $browser->ie && $browser->ver <= 8) {\n        if ($body) {\n            echo preg_match('/<(script|iframe|object)/i', $body) ? '' : $body;\n            return true;\n        }\n        else {\n            $stdout = fopen('php://output', 'w');\n            stream_filter_register('rcube_content', 'rcube_content_filter') or die('Failed to register content filter');\n            stream_filter_append($stdout, 'rcube_content');\n            return $MESSAGE->get_part_body($part->mime_id, true, 0, $stdout);\n        }\n    }\n\n    if ($body && !$download) {\n        header(\"Content-Length: \" . strlen($body));\n        echo $body;\n        return true;\n    }\n\n    // Don't be tempted to set Content-Length to $part->d_parameters['size'] (#1490482)\n    // RFC2183 says \"The size parameter indicates an approximate size\"\n\n    return $MESSAGE->get_part_body($part->mime_id, false, 0, -1);\n}\n\n/**\n * Remove <script> in SVG images\n */\nfunction rcmail_svg_filter($body)\n{\n    // clean SVG with washhtml\n    $wash_opts = array(\n        'show_washed'   => false,\n        'allow_remote'  => false,\n        'charset'       => RCUBE_CHARSET,\n        'html_elements' => array('title'),\n//        'blocked_src'   => 'program/resources/blocked.gif',\n    );\n\n    // initialize HTML washer\n    $washer = new rcube_washtml($wash_opts);\n\n    // allow CSS styles, will be sanitized by rcmail_washtml_callback()\n    $washer->add_callback('style', 'rcmail_washtml_callback');\n\n    return $washer->wash($body);\n}\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | program/steps/mail/viewsource.inc                                     |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2005-2013, The Roundcube Dev Team                       |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Display a mail message similar as a usual mail application does     |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\nob_end_clean();\n\n// similar code as in program/steps/mail/get.inc\nif ($uid = rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GET)) {\n    $headers = $RCMAIL->storage->get_message_headers($uid);\n    $charset = $headers->charset ?: $RCMAIL->config->get('default_charset');\n\n    header(\"Content-Type: text/plain; charset={$charset}\");\n\n    if (!empty($_GET['_save'])) {\n        $subject  = rcube_mime::decode_header($headers->subject, $headers->charset);\n        $filename = ($subject ?: $RCMAIL->config->get('product_name', 'email')) . '.eml';\n        $browser  = $RCMAIL->output->browser;\n\n        if ($browser->ie)\n            $filename = rawurlencode($filename);\n        else\n            $filename = addcslashes($filename, '\"');\n\n        header(\"Content-Length: {$headers->size}\");\n        header(\"Content-Disposition: attachment; filename=\\\"$filename\\\"\");\n    }\n\n    $RCMAIL->storage->print_raw_body($uid, empty($_GET['_save']));\n}\nelse {\n    rcube::raise_error(array(\n            'code'    => 500,\n            'type'    => 'php',\n            'file'    => __FILE__,\n            'line'    => __LINE__,\n            'message' => \"Message UID $uid not found\"\n        ),\n        true, true);\n}\n\nexit;\n"], "fixing_code": ["/* Enigma Plugin */\n\nwindow.rcmail && rcmail.addEventListener('init', function(evt) {\n    if (rcmail.env.task == 'settings') {\n        rcmail.register_command('plugin.enigma', function() { rcmail.goto_url('plugin.enigma') }, true);\n\n        if (rcmail.gui_objects.keyslist) {\n            rcmail.keys_list = new rcube_list_widget(rcmail.gui_objects.keyslist,\n                {multiselect:true, draggable:false, keyboard:false});\n            rcmail.keys_list\n                .addEventListener('select', function(o) { rcmail.enigma_keylist_select(o); })\n                .addEventListener('keypress', function(o) { rcmail.enigma_keylist_keypress(o); })\n                .init()\n                .focus();\n\n            rcmail.enigma_list();\n\n            rcmail.register_command('firstpage', function(props) { return rcmail.enigma_list_page('first'); });\n            rcmail.register_command('previouspage', function(props) { return rcmail.enigma_list_page('previous'); });\n            rcmail.register_command('nextpage', function(props) { return rcmail.enigma_list_page('next'); });\n            rcmail.register_command('lastpage', function(props) { return rcmail.enigma_list_page('last'); });\n        }\n\n        if (rcmail.env.action == 'plugin.enigmakeys') {\n            rcmail.register_command('search', function(props) {return rcmail.enigma_search(props); }, true);\n            rcmail.register_command('reset-search', function(props) {return rcmail.enigma_search_reset(props); }, true);\n            rcmail.register_command('plugin.enigma-import', function() { rcmail.enigma_import(); }, true);\n            rcmail.register_command('plugin.enigma-key-export', function() { rcmail.enigma_export(); });\n            rcmail.register_command('plugin.enigma-key-export-selected', function() { rcmail.enigma_export(true); });\n            rcmail.register_command('plugin.enigma-key-import', function() { rcmail.enigma_key_import(); }, true);\n            rcmail.register_command('plugin.enigma-key-delete', function(props) { return rcmail.enigma_delete(); });\n            rcmail.register_command('plugin.enigma-key-create', function(props) { return rcmail.enigma_key_create(); }, true);\n            rcmail.register_command('plugin.enigma-key-save', function(props) { return rcmail.enigma_key_create_save(); }, true);\n\n            rcmail.addEventListener('responseafterplugin.enigmakeys', function() {\n                rcmail.enable_command('plugin.enigma-key-export', rcmail.env.rowcount > 0);\n            });\n        }\n    }\n    else if (rcmail.env.task == 'mail') {\n        if (rcmail.env.action == 'compose') {\n            rcmail.addEventListener('beforesend', function(props) { rcmail.enigma_beforesend_handler(props); })\n                .addEventListener('beforesavedraft', function(props) { rcmail.enigma_beforesavedraft_handler(props); });\n\n            $('input,label', $('#enigmamenu')).mouseup(function(e) {\n                // don't close the menu on mouse click inside\n                e.stopPropagation();\n            });\n        }\n\n        $.each(['encrypt', 'sign'], function() {\n            if (rcmail.env['enigma_force_' + this])\n                $('[name=\"_enigma_' + this + '\"]').prop('checked', true);\n        });\n\n        if (rcmail.env.enigma_password_request) {\n            rcmail.enigma_password_request(rcmail.env.enigma_password_request);\n        }\n    }\n});\n\n\n/*********************************************************/\n/*********    Enigma Settings/Keys/Certs UI      *********/\n/*********************************************************/\n\n// Display key(s) import form\nrcube_webmail.prototype.enigma_key_import = function()\n{\n    this.enigma_loadframe('&_action=plugin.enigmakeys&_a=import');\n};\n\n// Display key(s) generation form\nrcube_webmail.prototype.enigma_key_create = function()\n{\n    this.enigma_loadframe('&_action=plugin.enigmakeys&_a=create');\n};\n\n// Generate key(s) and submit them\nrcube_webmail.prototype.enigma_key_create_save = function()\n{\n    var options, lock,\n        user = $('#key-ident > option').filter(':selected').text(),\n        password = $('#key-pass').val(),\n        confirm = $('#key-pass-confirm').val(),\n        size = $('#key-size').val();\n\n    // validate the form\n    if (!password || !confirm)\n        return alert(this.get_label('enigma.formerror'));\n\n    if (password != confirm)\n        return alert(this.get_label('enigma.passwordsdiffer'));\n\n    if (user.match(/^<[^>]+>$/))\n        return alert(this.get_label('enigma.nonameident'));\n\n    // generate keys\n    // use OpenPGP.js if browser supports required features\n    if (window.openpgp && window.crypto && (window.crypto.getRandomValues || window.crypto.subtle)) {\n        lock = this.set_busy(true, 'enigma.keygenerating');\n        options = {\n            numBits: size,\n            userId: user,\n            passphrase: password\n        };\n\n        openpgp.generateKeyPair(options).then(function(keypair) {\n            // success\n            var post = {_a: 'import', _keys: keypair.privateKeyArmored};\n\n            // send request to server\n            rcmail.http_post('plugin.enigmakeys', post, lock);\n        }, function(error) {\n            // failure\n            rcmail.set_busy(false, null, lock);\n            rcmail.display_message(rcmail.get_label('enigma.keygenerateerror'), 'error');\n        });\n    }\n    // generate keys on the server\n    else if (rcmail.env.enigma_keygen_server) {\n        lock = this.set_busy(true, 'enigma.keygenerating');\n        options = {_a: 'generate', _user: user, _password: password, _size: size};\n        rcmail.http_post('plugin.enigmakeys', options, lock);\n    }\n    else {\n        rcmail.display_message(rcmail.get_label('enigma.keygennosupport'), 'error');\n    }\n};\n\n// Action executed after successful key generation and import\nrcube_webmail.prototype.enigma_key_create_success = function()\n{\n    parent.rcmail.enigma_list(1);\n};\n\n// Delete key(s)\nrcube_webmail.prototype.enigma_delete = function()\n{\n    var keys = this.keys_list.get_selection();\n\n    if (!keys.length || !confirm(this.get_label('enigma.keyremoveconfirm')))\n        return;\n\n    var lock = this.display_message(this.get_label('enigma.keyremoving'), 'loading'),\n        post = {_a: 'delete', _keys: keys};\n\n    // send request to server\n    this.http_post('plugin.enigmakeys', post, lock);\n};\n\n// Export key(s)\nrcube_webmail.prototype.enigma_export = function(selected)\n{\n    var keys = selected ? this.keys_list.get_selection().join(',') : '*';\n\n    if (!keys.length)\n        return;\n\n    this.goto_url('plugin.enigmakeys', {_a: 'export', _keys: keys}, false, true);\n};\n\n// Submit key(s) import form\nrcube_webmail.prototype.enigma_import = function()\n{\n    var form, file;\n\n    if (form = this.gui_objects.importform) {\n        file = document.getElementById('rcmimportfile');\n        if (file && !file.value) {\n            alert(this.get_label('selectimportfile'));\n            return;\n        }\n\n        var lock = this.set_busy(true, 'importwait');\n\n        form.action = this.add_url(form.action, '_unlock', lock);\n        form.submit();\n\n        this.lock_form(form, true);\n   }\n};\n\n// list row selection handler\nrcube_webmail.prototype.enigma_keylist_select = function(list)\n{\n    var id = list.get_single_selection(), url;\n\n    if (id)\n        url = '&_action=plugin.enigmakeys&_a=info&_id=' + id;\n\n    this.enigma_loadframe(url);\n    this.enable_command('plugin.enigma-key-delete', 'plugin.enigma-key-export-selected', list.selection.length > 0);\n};\n\nrcube_webmail.prototype.enigma_keylist_keypress = function(list)\n{\n    if (list.modkey == CONTROL_KEY)\n        return;\n\n    if (list.key_pressed == list.DELETE_KEY || list.key_pressed == list.BACKSPACE_KEY)\n        this.command('plugin.enigma-key-delete');\n    else if (list.key_pressed == 33)\n        this.command('previouspage');\n    else if (list.key_pressed == 34)\n        this.command('nextpage');\n};\n\n// load key frame\nrcube_webmail.prototype.enigma_loadframe = function(url)\n{\n    var frm, win;\n\n    if (this.env.contentframe && window.frames && (frm = window.frames[this.env.contentframe])) {\n        if (!url && (win = window.frames[this.env.contentframe])) {\n            if (win.location && win.location.href.indexOf(this.env.blankpage) < 0)\n                win.location.href = this.env.blankpage;\n            return;\n        }\n\n        this.env.frame_lock = this.set_busy(true, 'loading');\n        frm.location.href = this.env.comm_path + '&_framed=1&' + url;\n    }\n};\n\n// Search keys/certs\nrcube_webmail.prototype.enigma_search = function(props)\n{\n    if (!props && this.gui_objects.qsearchbox)\n        props = this.gui_objects.qsearchbox.value;\n\n    if (props || this.env.search_request) {\n        var params = {'_a': 'search', '_q': urlencode(props)},\n          lock = this.set_busy(true, 'searching');\n//        if (this.gui_objects.search_filter)\n  //          addurl += '&_filter=' + this.gui_objects.search_filter.value;\n        this.env.current_page = 1;\n        this.enigma_loadframe();\n        this.enigma_clear_list();\n        this.http_post('plugin.enigmakeys', params, lock);\n    }\n\n    return false;\n}\n\n// Reset search filter and the list\nrcube_webmail.prototype.enigma_search_reset = function(props)\n{\n    var s = this.env.search_request;\n    this.reset_qsearch();\n\n    if (s) {\n        this.enigma_loadframe();\n        this.enigma_clear_list();\n\n        // refresh the list\n        this.enigma_list();\n    }\n\n    return false;\n}\n\n// Keys/certs listing\nrcube_webmail.prototype.enigma_list = function(page)\n{\n    var params = {'_a': 'list'},\n      lock = this.set_busy(true, 'loading');\n\n    this.env.current_page = page ? page : 1;\n\n    if (this.env.search_request)\n        params._q = this.env.search_request;\n    if (page)\n        params._p = page;\n\n    this.enigma_clear_list();\n    this.http_post('plugin.enigmakeys', params, lock);\n}\n\n// Change list page\nrcube_webmail.prototype.enigma_list_page = function(page)\n{\n    if (page == 'next')\n        page = this.env.current_page + 1;\n    else if (page == 'last')\n        page = this.env.pagecount;\n    else if (page == 'prev' && this.env.current_page > 1)\n        page = this.env.current_page - 1;\n    else if (page == 'first' && this.env.current_page > 1)\n        page = 1;\n\n    this.enigma_list(page);\n}\n\n// Remove list rows\nrcube_webmail.prototype.enigma_clear_list = function()\n{\n    this.enigma_loadframe();\n    if (this.keys_list)\n        this.keys_list.clear(true);\n\n    this.enable_command('plugin.enigma-key-delete', 'plugin.enigma-key-delete-selected', false);\n}\n\n// Adds a row to the list\nrcube_webmail.prototype.enigma_add_list_row = function(r)\n{\n    if (!this.gui_objects.keyslist || !this.keys_list)\n        return false;\n\n    var list = this.keys_list,\n        tbody = this.gui_objects.keyslist.tBodies[0],\n        rowcount = tbody.rows.length,\n        even = rowcount%2,\n        css_class = 'message'\n            + (even ? ' even' : ' odd'),\n        // for performance use DOM instead of jQuery here\n        row = document.createElement('tr'),\n        col = document.createElement('td');\n\n    row.id = 'rcmrow' + r.id;\n    row.className = css_class;\n\n    col.innerHTML = r.name;\n    row.appendChild(col);\n    list.insert_row(row);\n}\n\n\n/*********************************************************/\n/*********        Enigma Message methods         *********/\n/*********************************************************/\n\n// handle message send/save action\nrcube_webmail.prototype.enigma_beforesend_handler = function(props)\n{\n    this.env.last_action = 'send';\n    this.enigma_compose_handler(props);\n}\n\nrcube_webmail.prototype.enigma_beforesavedraft_handler = function(props)\n{\n    this.env.last_action = 'savedraft';\n    this.enigma_compose_handler(props);\n}\n\nrcube_webmail.prototype.enigma_compose_handler = function(props)\n{\n    var form = this.gui_objects.messageform;\n\n    // copy inputs from enigma menu to the form\n    $('#enigmamenu input').each(function() {\n        var id = this.id + '_cpy', input = $('#' + id);\n\n        if (!input.length) {\n            input = $(this).clone();\n            input.prop({id: id, type: 'hidden'}).appendTo(form);\n        }\n\n        input.val(this.checked ? '1' : '');\n    });\n\n    // disable signing when saving drafts\n    if (this.env.last_action == 'savedraft') {\n        $('input[name=\"_enigma_sign\"]', form).val(0);\n    }\n}\n\n// Import attached keys/certs file\nrcube_webmail.prototype.enigma_import_attachment = function(mime_id)\n{\n    var lock = this.set_busy(true, 'loading'),\n        post = {_uid: this.env.uid, _mbox: this.env.mailbox, _part: mime_id};\n\n    this.http_post('plugin.enigmaimport', post, lock);\n\n    return false;\n}\n\n// password request popup\nrcube_webmail.prototype.enigma_password_request = function(data)\n{\n    if (!data || !data.keyid) {\n        return;\n    }\n\n    var ref = this,\n        msg = this.get_label('enigma.enterkeypass'),\n        myprompt = $('<div class=\"prompt\">'),\n        myprompt_content = $('<div class=\"message\">')\n            .appendTo(myprompt),\n        myprompt_input = $('<input>').attr({type: 'password', size: 30})\n            .keypress(function(e) {\n                if (e.which == 13)\n                    (ref.is_framed() ? window.parent.$ : $)('.ui-dialog-buttonpane button.mainaction:visible').click();\n            })\n            .appendTo(myprompt);\n\n    data.key = data.keyid;\n    if (data.keyid.length > 8)\n        data.keyid = data.keyid.substr(data.keyid.length - 8);\n\n    $.each(['keyid', 'user'], function() {\n        msg = msg.replace('$' + this, data[this]);\n    });\n\n    myprompt_content.text(msg);\n\n    this.show_popup_dialog(myprompt, this.get_label('enigma.enterkeypasstitle'),\n        [{\n            text: this.get_label('save'),\n            'class': 'mainaction',\n            click: function(e) {\n                e.stopPropagation();\n\n                var jq = ref.is_framed() ? window.parent.$ : $;\n\n                data.password = myprompt_input.val();\n\n                if (!data.password) {\n                    myprompt_input.focus();\n                    return;\n                }\n\n                ref.enigma_password_submit(data);\n                jq(this).remove();\n            }\n        },\n        {\n            text: this.get_label('cancel'),\n            click: function(e) {\n                var jq = ref.is_framed() ? window.parent.$ : $;\n                e.stopPropagation();\n                jq(this).remove();\n            }\n        }], {width: 400});\n\n    if (this.is_framed() && parent.rcmail.message_list) {\n        // this fixes bug when pressing Enter on \"Save\" button in the dialog\n        parent.rcmail.message_list.blur();\n    }\n}\n\n// submit entered password\nrcube_webmail.prototype.enigma_password_submit = function(data)\n{\n    if (this.env.action == 'compose' && !data['compose-init']) {\n        return this.enigma_password_compose_submit(data);\n    }\n\n    var lock = this.set_busy(true, 'loading');\n\n    // message preview\n    var form = $('<form>').attr({method: 'post', action: location.href, style: 'display:none'})\n        .append($('<input>').attr({type: 'hidden', name: '_keyid', value: data.key}))\n        .append($('<input>').attr({type: 'hidden', name: '_passwd', value: data.password}))\n        .append($('<input>').attr({type: 'hidden', name: '_token', value: this.env.request_token}))\n        .append($('<input>').attr({type: 'hidden', name: '_unlock', value: lock}))\n        .appendTo(document.body);\n\n    form.submit();\n}\n\n// submit entered password - in mail compose page\nrcube_webmail.prototype.enigma_password_compose_submit = function(data)\n{\n    var form = this.gui_objects.messageform;\n\n    if (!$('input[name=\"_keyid\"]', form).length) {\n        $(form).append($('<input>').attr({type: 'hidden', name: '_keyid', value: data.key}))\n            .append($('<input>').attr({type: 'hidden', name: '_passwd', value: data.password}));\n    }\n    else {\n        $('input[name=\"_keyid\"]', form).val(data.key);\n        $('input[name=\"_passwd\"]', form).val(data.password);\n    }\n\n    this.submit_messageform(this.env.last_action == 'savedraft');\n}\n", "<?php\n\n/**\n +-------------------------------------------------------------------------+\n | User Interface for the Enigma Plugin                                    |\n |                                                                         |\n | Copyright (C) 2010-2015 The Roundcube Dev Team                          |\n |                                                                         |\n | Licensed under the GNU General Public License version 3 or              |\n | any later version with exceptions for skins & plugins.                  |\n | See the README file for a full license statement.                       |\n |                                                                         |\n +-------------------------------------------------------------------------+\n | Author: Aleksander Machniak <alec@alec.pl>                              |\n +-------------------------------------------------------------------------+\n*/\n\nclass enigma_ui\n{\n    private $rc;\n    private $enigma;\n    private $home;\n    private $css_loaded;\n    private $js_loaded;\n    private $data;\n    private $keys_parts  = array();\n    private $keys_bodies = array();\n\n\n    function __construct($enigma_plugin, $home='')\n    {\n        $this->enigma = $enigma_plugin;\n        $this->rc     = $enigma_plugin->rc;\n        $this->home   = $home; // we cannot use $enigma_plugin->home here\n    }\n\n    /**\n     * UI initialization and requests handlers.\n     *\n     * @param string Preferences section\n     */\n    function init()\n    {\n        $this->add_js();\n\n        $action = rcube_utils::get_input_value('_a', rcube_utils::INPUT_GPC);\n\n        if ($this->rc->action == 'plugin.enigmakeys') {\n            switch ($action) {\n                case 'delete':\n                    $this->key_delete();\n                    break;\n/*\n                case 'edit':\n                    $this->key_edit();\n                    break;\n*/\n                case 'import':\n                    $this->key_import();\n                    break;\n\n                case 'export':\n                    $this->key_export();\n                    break;\n\n                case 'generate':\n                    $this->key_generate();\n                    break;\n\n                case 'create':\n                    $this->key_create();\n                    break;\n\n                case 'search':\n                case 'list':\n                    $this->key_list();\n                    break;\n\n                case 'info':\n                    $this->key_info();\n                    break;\n            }\n\n            $this->rc->output->add_handlers(array(\n                    'keyslist'     => array($this, 'tpl_keys_list'),\n                    'keyframe'     => array($this, 'tpl_key_frame'),\n                    'countdisplay' => array($this, 'tpl_keys_rowcount'),\n                    'searchform'   => array($this->rc->output, 'search_form'),\n            ));\n\n            $this->rc->output->set_pagetitle($this->enigma->gettext('enigmakeys'));\n            $this->rc->output->send('enigma.keys');\n        }\n/*\n        // Preferences UI\n        else if ($this->rc->action == 'plugin.enigmacerts') {\n            $this->rc->output->add_handlers(array(\n                    'keyslist'     => array($this, 'tpl_certs_list'),\n                    'keyframe'     => array($this, 'tpl_cert_frame'),\n                    'countdisplay' => array($this, 'tpl_certs_rowcount'),\n                    'searchform'   => array($this->rc->output, 'search_form'),\n            ));\n\n            $this->rc->output->set_pagetitle($this->enigma->gettext('enigmacerts'));\n            $this->rc->output->send('enigma.certs'); \n        }\n*/\n        // Message composing UI\n        else if ($this->rc->action == 'compose') {\n            $this->compose_ui();\n        }\n    }\n\n    /**\n     * Adds CSS style file to the page header.\n     */\n    function add_css()\n    {\n        if ($this->css_loaded)\n            return;\n\n        $skin_path = $this->enigma->local_skin_path();\n        if (is_file($this->home . \"/$skin_path/enigma.css\")) {\n            $this->enigma->include_stylesheet(\"$skin_path/enigma.css\");\n        }\n\n        $this->css_loaded = true;\n    }\n\n    /**\n     * Adds javascript file to the page header.\n     */\n    function add_js()\n    {\n        if ($this->js_loaded) {\n            return;\n        }\n\n        $this->enigma->include_script('enigma.js');\n\n        $this->js_loaded = true;\n    }\n\n    /**\n     * Initializes key password prompt\n     *\n     * @param enigma_error $status Error object with key info\n     * @param array        $params Optional prompt parameters\n     */\n    function password_prompt($status, $params = array())\n    {\n        $data = $status->getData('missing');\n\n        if (empty($data)) {\n            $data = $status->getData('bad');\n        }\n\n        $data = array('keyid' => key($data), 'user' => $data[key($data)]);\n\n        if (!empty($params)) {\n            $data = array_merge($params, $data);\n        }\n\n        if ($this->rc->action == 'send') {\n            $this->rc->output->command('enigma_password_request', $data);\n        }\n        else {\n            $this->rc->output->set_env('enigma_password_request', $data);\n        }\n\n        // add some labels to client\n        $this->rc->output->add_label('enigma.enterkeypasstitle', 'enigma.enterkeypass',\n            'save', 'cancel');\n\n        $this->add_css();\n        $this->add_js();\n    }\n\n    /**\n     * Template object for key info/edit frame.\n     *\n     * @param array Object attributes\n     *\n     * @return string HTML output\n     */\n    function tpl_key_frame($attrib)\n    {\n        if (!$attrib['id']) {\n            $attrib['id'] = 'rcmkeysframe';\n        }\n\n        $attrib['name'] = $attrib['id'];\n\n        $this->rc->output->set_env('contentframe', $attrib['name']);\n        $this->rc->output->set_env('blankpage', $attrib['src'] ?\n            $this->rc->output->abs_url($attrib['src']) : 'program/resources/blank.gif');\n\n        return $this->rc->output->frame($attrib);\n    }\n\n    /**\n     * Template object for list of keys.\n     *\n     * @param array Object attributes\n     *\n     * @return string HTML content\n     */\n    function tpl_keys_list($attrib)\n    {\n        // add id to message list table if not specified\n        if (!strlen($attrib['id'])) {\n            $attrib['id'] = 'rcmenigmakeyslist';\n        }\n\n        // define list of cols to be displayed\n        $a_show_cols = array('name');\n\n        // create XHTML table\n        $out = $this->rc->table_output($attrib, array(), $a_show_cols, 'id');\n\n        // set client env\n        $this->rc->output->add_gui_object('keyslist', $attrib['id']);\n        $this->rc->output->include_script('list.js');\n\n        // add some labels to client\n        $this->rc->output->add_label('enigma.keyremoveconfirm', 'enigma.keyremoving');\n\n        return $out;\n    }\n\n    /**\n     * Key listing (and searching) request handler\n     */\n    private function key_list()\n    {\n        $this->enigma->load_engine();\n\n        $pagesize = $this->rc->config->get('pagesize', 100);\n        $page     = max(intval(rcube_utils::get_input_value('_p', rcube_utils::INPUT_GPC)), 1);\n        $search   = rcube_utils::get_input_value('_q', rcube_utils::INPUT_GPC);\n\n        // Get the list\n        $list = $this->enigma->engine->list_keys($search);\n\n        if ($list && ($list instanceof enigma_error))\n            $this->rc->output->show_message('enigma.keylisterror', 'error');\n        else if (empty($list))\n            $this->rc->output->show_message('enigma.nokeysfound', 'notice');\n        else if (is_array($list)) {\n            // Save the size\n            $listsize = count($list);\n\n            // Sort the list by key (user) name\n            usort($list, array('enigma_key', 'cmp'));\n\n            // Slice current page\n            $list = array_slice($list, ($page - 1) * $pagesize, $pagesize);\n            $size = count($list);\n\n            // Add rows\n            foreach ($list as $key) {\n                $this->rc->output->command('enigma_add_list_row',\n                    array('name' => rcube::Q($key->name), 'id' => $key->id));\n            }\n        }\n\n        $this->rc->output->set_env('rowcount', $size);\n        $this->rc->output->set_env('search_request', $search);\n        $this->rc->output->set_env('pagecount', ceil($listsize/$pagesize));\n        $this->rc->output->set_env('current_page', $page);\n        $this->rc->output->command('set_rowcount',\n            $this->get_rowcount_text($listsize, $size, $page));\n\n        $this->rc->output->send();\n    }\n\n    /**\n     * Template object for list records counter.\n     *\n     * @param array Object attributes\n     *\n     * @return string HTML output\n     */\n    function tpl_keys_rowcount($attrib)\n    {\n        if (!$attrib['id'])\n            $attrib['id'] = 'rcmcountdisplay';\n\n        $this->rc->output->add_gui_object('countdisplay', $attrib['id']);\n\n        return html::span($attrib, $this->get_rowcount_text());\n    }\n\n    /**\n     * Returns text representation of list records counter\n     */\n    private function get_rowcount_text($all=0, $curr_count=0, $page=1)\n    {\n        if (!$curr_count) {\n            $out = $this->enigma->gettext('nokeysfound');\n        }\n        else {\n            $pagesize = $this->rc->config->get('pagesize', 100);\n            $first    = ($page - 1) * $pagesize;\n\n            $out = $this->enigma->gettext(array(\n                'name' => 'keysfromto',\n                'vars' => array(\n                    'from'  => $first + 1,\n                    'to'    => $first + $curr_count,\n                    'count' => $all)\n            ));\n        }\n\n        return $out;\n    }\n\n    /**\n     * Key information page handler\n     */\n    private function key_info()\n    {\n        $this->enigma->load_engine();\n\n        $id  = rcube_utils::get_input_value('_id', rcube_utils::INPUT_GET);\n        $res = $this->enigma->engine->get_key($id);\n\n        if ($res instanceof enigma_key) {\n            $this->data = $res;\n        }\n        else { // error\n            $this->rc->output->show_message('enigma.keyopenerror', 'error');\n            $this->rc->output->command('parent.enigma_loadframe');\n            $this->rc->output->send('iframe');\n        }\n\n        $this->rc->output->add_handlers(array(\n            'keyname' => array($this, 'tpl_key_name'),\n            'keydata' => array($this, 'tpl_key_data'),\n        ));\n\n        $this->rc->output->set_pagetitle($this->enigma->gettext('keyinfo'));\n        $this->rc->output->send('enigma.keyinfo');\n    }\n\n    /**\n     * Template object for key name\n     */\n    function tpl_key_name($attrib)\n    {\n        return rcube::Q($this->data->name);\n    }\n\n    /**\n     * Template object for key information page content\n     */\n    function tpl_key_data($attrib)\n    {\n        $out   = '';\n        $table = new html_table(array('cols' => 2));\n\n        // Key user ID\n        $table->add('title', $this->enigma->gettext('keyuserid'));\n        $table->add(null, rcube::Q($this->data->name));\n\n        // Key ID\n        $table->add('title', $this->enigma->gettext('keyid'));\n        $table->add(null, $this->data->subkeys[0]->get_short_id());\n\n        // Key type\n        $keytype = $this->data->get_type();\n        if ($keytype == enigma_key::TYPE_KEYPAIR) {\n            $type = $this->enigma->gettext('typekeypair');\n        }\n        else if ($keytype == enigma_key::TYPE_PUBLIC) {\n            $type = $this->enigma->gettext('typepublickey');\n        }\n        $table->add('title', $this->enigma->gettext('keytype'));\n        $table->add(null, $type);\n\n        // Key fingerprint\n        $table->add('title', $this->enigma->gettext('fingerprint'));\n        $table->add(null, $this->data->subkeys[0]->get_fingerprint());\n\n        $out .= html::tag('fieldset', null,\n            html::tag('legend', null,\n                $this->enigma->gettext('basicinfo')) . $table->show($attrib));\n\n        // Subkeys\n        $table = new html_table(array('cols' => 5, 'id' => 'enigmasubkeytable', 'class' => 'records-table'));\n\n        $table->add_header('id', $this->enigma->gettext('subkeyid'));\n        $table->add_header('algo', $this->enigma->gettext('subkeyalgo'));\n        $table->add_header('created', $this->enigma->gettext('subkeycreated'));\n        $table->add_header('expires', $this->enigma->gettext('subkeyexpires'));\n        $table->add_header('usage', $this->enigma->gettext('subkeyusage'));\n\n        $now         = time();\n        $date_format = $this->rc->config->get('date_format', 'Y-m-d');\n        $usage_map   = array(\n            enigma_key::CAN_ENCRYPT      => $this->enigma->gettext('typeencrypt'),\n            enigma_key::CAN_SIGN         => $this->enigma->gettext('typesign'),\n            enigma_key::CAN_CERTIFY      => $this->enigma->gettext('typecert'),\n            enigma_key::CAN_AUTHENTICATE => $this->enigma->gettext('typeauth'),\n        );\n\n        foreach ($this->data->subkeys as $subkey) {\n            $algo = $subkey->get_algorithm();\n            if ($algo && $subkey->length) {\n                $algo .= ' (' . $subkey->length . ')';\n            }\n\n            $usage = array();\n            foreach ($usage_map as $key => $text) {\n                if ($subkey->usage & $key) {\n                    $usage[] = $text;\n                }\n            }\n\n            $table->add('id', $subkey->get_short_id());\n            $table->add('algo', $algo);\n            $table->add('created', $subkey->created ? $this->rc->format_date($subkey->created, $date_format, false) : '');\n            $table->add('expires', $subkey->expires ? $this->rc->format_date($subkey->expires, $date_format, false) : $this->enigma->gettext('expiresnever'));\n            $table->add('usage', implode(',', $usage));\n            $table->set_row_attribs($subkey->revoked || ($subkey->expires && $subkey->expires < $now) ? 'deleted' : '');\n        }\n\n        $out .= html::tag('fieldset', null,\n            html::tag('legend', null,\n                $this->enigma->gettext('subkeys')) . $table->show());\n\n        // Additional user IDs\n        $table = new html_table(array('cols' => 2, 'id' => 'enigmausertable', 'class' => 'records-table'));\n\n        $table->add_header('id', $this->enigma->gettext('userid'));\n        $table->add_header('valid', $this->enigma->gettext('uservalid'));\n\n        foreach ($this->data->users as $user) {\n            $username = $user->name;\n            if ($user->comment) {\n                $username .= ' (' . $user->comment . ')';\n            }\n            $username .= ' <' . $user->email . '>';\n\n            $table->add('id', rcube::Q(trim($username)));\n            $table->add('valid', $this->enigma->gettext($user->valid ? 'valid' : 'unknown'));\n            $table->set_row_attribs($user->revoked || !$user->valid ? 'deleted' : '');\n        }\n\n        $out .= html::tag('fieldset', null,\n            html::tag('legend', null,\n                $this->enigma->gettext('userids')) . $table->show());\n\n        return $out;\n    }\n\n    /**\n     * Key(s) export handler\n     */\n    private function key_export()\n    {\n        $this->rc->request_security_check(rcube_utils::INPUT_GET);\n\n        $keys   = rcube_utils::get_input_value('_keys', rcube_utils::INPUT_GPC);\n        $engine = $this->enigma->load_engine();\n        $list   = $keys == '*' ? $engine->list_keys() : explode(',', $keys);\n\n        if (is_array($list)) {\n            $filename = 'export.pgp';\n            if (count($list) == 1) {\n                $filename = (is_object($list[0]) ? $list[0]->id : $list[0]) . '.pgp';\n            }\n\n            // send downlaod headers\n            header('Content-Type: application/pgp-keys');\n            header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n\n            if ($fp = fopen('php://output', 'w')) {\n                foreach ($list as $key) {\n                    $engine->export_key(is_object($key) ? $key->id : $key, $fp);\n                }\n            }\n        }\n\n        exit;\n    }\n\n    /**\n     * Key import (page) handler\n     */\n    private function key_import()\n    {\n        // Import process\n        if ($data = rcube_utils::get_input_value('_keys', rcube_utils::INPUT_POST)) {\n            // Import from generation form (ajax request)\n            $this->enigma->load_engine();\n            $result = $this->enigma->engine->import_key($data);\n\n            if (is_array($result)) {\n                $this->rc->output->command('enigma_key_create_success');\n                $this->rc->output->show_message('enigma.keygeneratesuccess', 'confirmation');\n            }\n            else {\n                $this->rc->output->show_message('enigma.keysimportfailed', 'error');\n            }\n\n            $this->rc->output->send();\n        }\n        else if ($_FILES['_file']['tmp_name'] && is_uploaded_file($_FILES['_file']['tmp_name'])) {\n            $this->enigma->load_engine();\n            $result = $this->enigma->engine->import_key($_FILES['_file']['tmp_name'], true);\n\n            if (is_array($result)) {\n                // reload list if any keys has been added\n                if ($result['imported']) {\n                    $this->rc->output->command('parent.enigma_list', 1);\n                }\n                else {\n                    $this->rc->output->command('parent.enigma_loadframe');\n                }\n\n                $this->rc->output->show_message('enigma.keysimportsuccess', 'confirmation',\n                    array('new' => $result['imported'], 'old' => $result['unchanged']));\n\n                $this->rc->output->send('iframe');\n            }\n            else {\n                $this->rc->output->show_message('enigma.keysimportfailed', 'error');\n            }\n        }\n        else if ($err = $_FILES['_file']['error']) {\n            if ($err == UPLOAD_ERR_INI_SIZE || $err == UPLOAD_ERR_FORM_SIZE) {\n                $this->rc->output->show_message('filesizeerror', 'error',\n                    array('size' => $this->rc->show_bytes(parse_bytes(ini_get('upload_max_filesize')))));\n            } else {\n                $this->rc->output->show_message('fileuploaderror', 'error');\n            }\n        }\n\n        $this->rc->output->add_handlers(array(\n            'importform' => array($this, 'tpl_key_import_form'),\n        ));\n\n        $this->rc->output->set_pagetitle($this->enigma->gettext('keyimport'));\n        $this->rc->output->send('enigma.keyimport');\n    }\n\n    /**\n     * Template object for key import (upload) form\n     */\n    function tpl_key_import_form($attrib)\n    {\n        $attrib += array('id' => 'rcmKeyImportForm');\n\n        $upload = new html_inputfield(array('type' => 'file', 'name' => '_file',\n            'id' => 'rcmimportfile', 'size' => 30));\n\n        $form = html::p(null,\n            rcube::Q($this->enigma->gettext('keyimporttext'), 'show')\n            . html::br() . html::br() . $upload->show()\n        );\n\n        $this->rc->output->add_label('selectimportfile', 'importwait');\n        $this->rc->output->add_gui_object('importform', $attrib['id']);\n\n        $out = $this->rc->output->form_tag(array(\n            'action' => $this->rc->url(array('action' => $this->rc->action, 'a' => 'import')),\n            'method' => 'post',\n            'enctype' => 'multipart/form-data') + $attrib,\n            $form);\n\n        return $out;\n    }\n\n    /**\n     * Server-side key pair generation handler\n     */\n    private function key_generate()\n    {\n        $user = rcube_utils::get_input_value('_user', rcube_utils::INPUT_POST, true);\n        $pass = rcube_utils::get_input_value('_password', rcube_utils::INPUT_POST, true);\n        $size = (int) rcube_utils::get_input_value('_size', rcube_utils::INPUT_POST);\n\n        if ($size > 4096) {\n            $size = 4096;\n        }\n\n        $ident = rcube_mime::decode_address_list($user, 1, false);\n\n        if (empty($ident)) {\n            $this->rc->output->show_message('enigma.keygenerateerror', 'error');\n            $this->rc->output->send();\n        }\n\n        $this->enigma->load_engine();\n        $result = $this->enigma->engine->generate_key(array(\n            'user'     => $ident[1]['name'],\n            'email'    => $ident[1]['mailto'],\n            'password' => $pass,\n            'size'     => $size,\n        ));\n\n        if ($result instanceof enigma_key) {\n            $this->rc->output->command('enigma_key_create_success');\n            $this->rc->output->show_message('enigma.keygeneratesuccess', 'confirmation');\n        }\n        else {\n            $this->rc->output->show_message('enigma.keygenerateerror', 'error');\n        }\n\n        $this->rc->output->send();\n    }\n\n    /**\n     * Key generation page handler\n     */\n    private function key_create()\n    {\n        $this->enigma->include_script('openpgp.min.js');\n\n        $this->rc->output->add_handlers(array(\n            'keyform' => array($this, 'tpl_key_create_form'),\n        ));\n\n        $this->rc->output->set_env('enigma_keygen_server', $this->rc->config->get('enigma_keygen_server'));\n\n        $this->rc->output->set_pagetitle($this->enigma->gettext('keygenerate'));\n        $this->rc->output->send('enigma.keycreate');\n    }\n\n    /**\n     * Template object for key generation form\n     */\n    function tpl_key_create_form($attrib)\n    {\n        $attrib += array('id' => 'rcmKeyCreateForm');\n        $table  = new html_table(array('cols' => 2));\n\n        // get user's identities\n        $identities = $this->rc->user->list_identities(null, true);\n\n        // Identity\n        $select = new html_select(array('name' => 'identity', 'id' => 'key-ident'));\n        foreach ((array) $identities as $idx => $ident) {\n            $name = empty($ident['name']) ? ('<' . $ident['email'] . '>') : $ident['ident'];\n            $select->add($name, $idx);\n        }\n\n        $table->add('title', html::label('key-name', rcube::Q($this->enigma->gettext('newkeyident'))));\n        $table->add(null, $select->show(0));\n\n        // Key size\n        $select = new html_select(array('name' => 'size', 'id' => 'key-size'));\n        $select->add($this->enigma->gettext('key2048'), '2048');\n        $select->add($this->enigma->gettext('key4096'), '4096');\n\n        $table->add('title', html::label('key-size', rcube::Q($this->enigma->gettext('newkeysize'))));\n        $table->add(null, $select->show());\n\n        // Password and confirm password\n        $table->add('title', html::label('key-pass', rcube::Q($this->enigma->gettext('newkeypass'))));\n        $table->add(null, rcube_output::get_edit_field('password', '',\n            array('id' => 'key-pass', 'size' => $attrib['size'], 'required' => true), 'password'));\n\n        $table->add('title', html::label('key-pass-confirm', rcube::Q($this->enigma->gettext('newkeypassconfirm'))));\n        $table->add(null, rcube_output::get_edit_field('password-confirm', '',\n            array('id' => 'key-pass-confirm', 'size' => $attrib['size'], 'required' => true), 'password'));\n\n        $this->rc->output->add_gui_object('keyform', $attrib['id']);\n        $this->rc->output->add_label('enigma.keygenerating', 'enigma.formerror',\n            'enigma.passwordsdiffer', 'enigma.keygenerateerror', 'enigma.nonameident',\n            'enigma.keygennosupport');\n\n        return $this->rc->output->form_tag(array(), $table->show($attrib));\n    }\n\n    /**\n     * Key deleting\n     */\n    private function key_delete()\n    {\n        $keys   = rcube_utils::get_input_value('_keys', rcube_utils::INPUT_POST);\n        $engine = $this->enigma->load_engine();\n\n        foreach ((array)$keys as $key) {\n            $res = $engine->delete_key($key);\n\n            if ($res !== true) {\n                $this->rc->output->show_message('enigma.keyremoveerror', 'error');\n                $this->rc->output->command('enigma_list');\n                $this->rc->output->send();\n            }\n        }\n\n        $this->rc->output->command('enigma_list');\n        $this->rc->output->show_message('enigma.keyremovesuccess', 'confirmation');\n        $this->rc->output->send();\n    }\n\n    /**\n     * Init compose UI (add task button and the menu)\n     */\n    private function compose_ui()\n    {\n        $this->add_css();\n\n        // Options menu button\n        $this->enigma->add_button(array(\n            'type'     => 'link',\n            'command'  => 'plugin.enigma',\n            'onclick'  => \"rcmail.command('menu-open', 'enigmamenu', event.target, event)\",\n            'class'    => 'button enigma',\n            'title'    => 'encryptionoptions',\n            'label'    => 'encryption',\n            'domain'   => $this->enigma->ID,\n            'width'    => 32,\n            'height'   => 32\n            ), 'toolbar');\n\n        $menu  = new html_table(array('cols' => 2));\n        $chbox = new html_checkbox(array('value' => 1));\n\n        $menu->add(null, html::label(array('for' => 'enigmasignopt'),\n            rcube::Q($this->enigma->gettext('signmsg'))));\n        $menu->add(null, $chbox->show($this->rc->config->get('enigma_sign_all') ? 1 : 0,\n            array('name' => '_enigma_sign', 'id' => 'enigmasignopt')));\n\n        $menu->add(null, html::label(array('for' => 'enigmaencryptopt'),\n            rcube::Q($this->enigma->gettext('encryptmsg'))));\n        $menu->add(null, $chbox->show($this->rc->config->get('enigma_encrypt_all') ? 1 : 0,\n            array('name' => '_enigma_encrypt', 'id' => 'enigmaencryptopt')));\n\n        $menu = html::div(array('id' => 'enigmamenu', 'class' => 'popupmenu'), $menu->show());\n\n        // Options menu contents\n        $this->rc->output->add_footer($menu);\n    }\n\n    /**\n     * Handler for message_body_prefix hook.\n     * Called for every displayed (content) part of the message.\n     * Adds infobox about signature verification and/or decryption\n     * status above the body.\n     *\n     * @param array Original parameters\n     *\n     * @return array Modified parameters\n     */\n    function status_message($p)\n    {\n        // skip: not a message part\n        if ($p['part'] instanceof rcube_message) {\n            return $p;\n        }\n\n        // skip: message has no signed/encoded content\n        if (!$this->enigma->engine) {\n            return $p;\n        }\n\n        $engine  = $this->enigma->engine;\n        $part_id = $p['part']->mime_id;\n\n        // Decryption status\n        if (($found = $this->find_part_id($part_id, $engine->decryptions)) !== null\n            && ($status = $engine->decryptions[$found])\n        ) {\n            $attach_scripts = true;\n\n            // show the message only once\n            unset($engine->decryptions[$found]);\n\n            // display status info\n            $attrib['id'] = 'enigma-message';\n\n            if ($status instanceof enigma_error) {\n                $attrib['class'] = 'enigmaerror';\n                $code            = $status->getCode();\n\n                if ($code == enigma_error::KEYNOTFOUND) {\n                    $msg = rcube::Q(str_replace('$keyid', enigma_key::format_id($status->getData('id')),\n                        $this->enigma->gettext('decryptnokey')));\n                }\n                else if ($code == enigma_error::BADPASS) {\n                    $missing = $status->getData('missing');\n                    $label   = 'decrypt' . (!empty($missing) ? 'no' : 'bad') . 'pass';\n                    $msg     = rcube::Q($this->enigma->gettext($label));\n                    $this->password_prompt($status);\n                }\n                else {\n                    $msg = rcube::Q($this->enigma->gettext('decrypterror'));\n                }\n            }\n            else {\n                $attrib['class'] = 'enigmanotice';\n                $msg = rcube::Q($this->enigma->gettext('decryptok'));\n            }\n\n            $p['prefix'] .= html::div($attrib, $msg);\n        }\n\n        // Signature verification status\n        if (($found = $this->find_part_id($part_id, $engine->signatures)) !== null\n            && ($sig = $engine->signatures[$found])\n        ) {\n            $attach_scripts = true;\n\n            // show the message only once\n            unset($engine->signatures[$found]);\n\n            // display status info\n            $attrib['id'] = 'enigma-message';\n\n            if ($sig instanceof enigma_signature) {\n                $sender = ($sig->name ? $sig->name . ' ' : '') . '<' . $sig->email . '>';\n\n                if ($sig->valid === enigma_error::UNVERIFIED) {\n                    $attrib['class'] = 'enigmawarning';\n                    $msg = str_replace('$sender', $sender, $this->enigma->gettext('sigunverified'));\n                    $msg = str_replace('$keyid', $sig->id, $msg);\n                    $msg = rcube::Q($msg);\n                }\n                else if ($sig->valid) {\n                    $attrib['class'] = 'enigmanotice';\n                    $msg = rcube::Q(str_replace('$sender', $sender, $this->enigma->gettext('sigvalid')));\n                }\n                else {\n                    $attrib['class'] = 'enigmawarning';\n                    $msg = rcube::Q(str_replace('$sender', $sender, $this->enigma->gettext('siginvalid')));\n                }\n            }\n            else if ($sig && $sig->getCode() == enigma_error::KEYNOTFOUND) {\n                $attrib['class'] = 'enigmawarning';\n                $msg = rcube::Q(str_replace('$keyid', enigma_key::format_id($sig->getData('id')),\n                    $this->enigma->gettext('signokey')));\n            }\n            else {\n                $attrib['class'] = 'enigmaerror';\n                $msg = rcube::Q($this->enigma->gettext('sigerror'));\n            }\n/*\n            $msg .= '&nbsp;' . html::a(array('href' => \"#sigdetails\",\n                'onclick' => rcmail_output::JS_OBJECT_NAME.\".command('enigma-sig-details')\"),\n                rcube::Q($this->enigma->gettext('showdetails')));\n*/\n            // test\n//            $msg .= '<br /><pre>'.$sig->body.'</pre>';\n\n            $p['prefix'] .= html::div($attrib, $msg);\n        }\n\n        if ($attach_scripts) {\n            // add css and js script\n            $this->add_css();\n            $this->add_js();\n        }\n\n        return $p;\n    }\n\n    /**\n     * Handler for message_load hook.\n     * Check message bodies and attachments for keys/certs.\n     */\n    function message_load($p)\n    {\n        $engine = $this->enigma->load_engine();\n\n        // handle keys/certs in attachments\n        foreach ((array) $p['object']->attachments as $attachment) {\n            if ($engine->is_keys_part($attachment)) {\n                $this->keys_parts[] = $attachment->mime_id;\n            }\n        }\n\n        // the same with message bodies\n        foreach ((array) $p['object']->parts as $part) {\n            if ($engine->is_keys_part($part)) {\n                $this->keys_parts[]  = $part->mime_id;\n                $this->keys_bodies[] = $part->mime_id;\n            }\n        }\n\n        // @TODO: inline PGP keys\n\n        if ($this->keys_parts) {\n            $this->enigma->add_texts('localization');\n        }\n\n        return $p;\n    }\n\n    /**\n     * Handler for template_object_messagebody hook.\n     * This callback function adds a box below the message content\n     * if there is a key/cert attachment available\n     */\n    function message_output($p)\n    {\n        foreach ($this->keys_parts as $part) {\n            // remove part's body\n            if (in_array($part, $this->keys_bodies)) {\n                $p['content'] = '';\n            }\n\n            // add box below message body\n            $p['content'] .= html::p(array('class' => 'enigmaattachment'),\n                html::a(array(\n                    'href'    => \"#\",\n                    'onclick' => \"return \".rcmail_output::JS_OBJECT_NAME.\".enigma_import_attachment('\".rcube::JQ($part).\"')\",\n                    'title'   => $this->enigma->gettext('keyattimport')),\n                    html::span(null, $this->enigma->gettext('keyattfound'))));\n\n            $attach_scripts = true;\n        }\n\n        if ($attach_scripts) {\n            // add css and js script\n            $this->add_css();\n            $this->add_js();\n        }\n\n        return $p;\n    }\n\n    /**\n     * Handle message_ready hook (encryption/signing)\n     */\n    function message_ready($p)\n    {\n        $savedraft = !empty($_POST['_draft']) && empty($_GET['_saveonly']);\n\n        if (!$savedraft && rcube_utils::get_input_value('_enigma_sign', rcube_utils::INPUT_POST)) {\n            $this->enigma->load_engine();\n            $status = $this->enigma->engine->sign_message($p['message']);\n            $mode   = 'sign';\n        }\n\n        if ((!$status instanceof enigma_error) && rcube_utils::get_input_value('_enigma_encrypt', rcube_utils::INPUT_POST)) {\n            $this->enigma->load_engine();\n            $status = $this->enigma->engine->encrypt_message($p['message'], null, $savedraft);\n            $mode   = 'encrypt';\n        }\n\n        if ($mode && ($status instanceof enigma_error)) {\n            $code = $status->getCode();\n\n            if ($code == enigma_error::KEYNOTFOUND) {\n                $vars = array('email' => $status->getData('missing'));\n                $msg  = 'enigma.' . $mode . 'nokey';\n            }\n            else if ($code == enigma_error::BADPASS) {\n                $this->password_prompt($status);\n            }\n            else {\n                $msg = 'enigma.' . $mode . 'error';\n            }\n\n            if ($msg) {\n                $this->rc->output->show_message($msg, $type ?: 'error', $vars);\n            }\n\n            $this->rc->output->send('iframe');\n        }\n\n        return $p;\n    }\n\n    /**\n     * Handler for message_compose_body hook\n     * Display error when the message cannot be encrypted\n     * and provide a way to try again with a password.\n     */\n    function message_compose($p)\n    {\n        $engine = $this->enigma->load_engine();\n\n        // skip: message has no signed/encoded content\n        if (!$this->enigma->engine) {\n            return $p;\n        }\n\n        $engine = $this->enigma->engine;\n\n        // Decryption status\n        foreach ($engine->decryptions as $status) {\n            if ($status instanceof enigma_error) {\n                $code = $status->getCode();\n\n                if ($code == enigma_error::KEYNOTFOUND) {\n                    $msg = rcube::Q(str_replace('$keyid', enigma_key::format_id($status->getData('id')),\n                        $this->enigma->gettext('decryptnokey')));\n                }\n                else if ($code == enigma_error::BADPASS) {\n                    $this->password_prompt($status, array('compose-init' => true));\n                    return $p;\n                }\n                else {\n                    $msg = rcube::Q($this->enigma->gettext('decrypterror'));\n                }\n            }\n        }\n\n        if ($msg) {\n            $this->rc->output->show_message($msg, 'error');\n        }\n\n        // Check sign/ecrypt options for signed/encrypted drafts\n        $this->rc->output->set_env('enigma_force_encrypt', !empty($engine->decryptions));\n        $this->rc->output->set_env('enigma_force_sign', !empty($engine->signatures));\n\n        return $p;\n    }\n\n    /**\n     * Check if the part or its parent exists in the array\n     * of decryptions/signatures. Returns found ID.\n     */\n    private function find_part_id($part_id, $data)\n    {\n        $ids   = explode('.', $part_id);\n        $i     = 0;\n        $count = count($ids);\n\n        while ($i < $count && strlen($part = implode('.', array_slice($ids, 0, ++$i)))) {\n            if (array_key_exists($part, $data)) {\n                return $part;\n            }\n        }\n    }\n}\n", "<?php\n\n/**\n * Managesieve (Sieve Filters) Engine\n *\n * Engine part of Managesieve plugin implementing UI and backend access.\n *\n * Copyright (C) 2008-2014, The Roundcube Dev Team\n * Copyright (C) 2011-2014, Kolab Systems AG\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see http://www.gnu.org/licenses/.\n */\n\nclass rcube_sieve_engine\n{\n    protected $rc;\n    protected $sieve;\n    protected $errors;\n    protected $form;\n    protected $tips = array();\n    protected $script = array();\n    protected $exts = array();\n    protected $list;\n    protected $active = array();\n    protected $headers = array(\n        'subject' => 'Subject',\n        'from'    => 'From',\n        'to'      => 'To',\n    );\n    protected $addr_headers = array(\n        // Required\n        \"from\", \"to\", \"cc\", \"bcc\", \"sender\", \"resent-from\", \"resent-to\",\n        // Additional (RFC 822 / RFC 2822)\n        \"reply-to\", \"resent-reply-to\", \"resent-sender\", \"resent-cc\", \"resent-bcc\",\n        // Non-standard (RFC 2076, draft-palme-mailext-headers-08.txt)\n        \"for-approval\", \"for-handling\", \"for-comment\", \"apparently-to\", \"errors-to\",\n        \"delivered-to\", \"return-receipt-to\", \"x-admin\", \"read-receipt-to\",\n        \"x-confirm-reading-to\", \"return-receipt-requested\",\n        \"registered-mail-reply-requested-by\", \"mail-followup-to\", \"mail-reply-to\",\n        \"abuse-reports-to\", \"x-complaints-to\", \"x-report-abuse-to\",\n        // Undocumented\n        \"x-beenthere\",\n    );\n    protected $notify_methods = array(\n        'mailto',\n        // 'sms',\n        // 'tel',\n    );\n    protected $notify_importance_options = array(\n        3 => 'notifyimportancelow',\n        2 => 'notifyimportancenormal',\n        1 => 'notifyimportancehigh'\n    );\n\n    const VERSION  = '8.5';\n    const PROGNAME = 'Roundcube (Managesieve)';\n    const PORT     = 4190;\n\n\n    /**\n     * Class constructor\n     */\n    function __construct($plugin)\n    {\n        $this->rc     = rcube::get_instance();\n        $this->plugin = $plugin;\n    }\n\n    /**\n     * Loads configuration, initializes plugin (including sieve connection)\n     */\n    function start($mode = null)\n    {\n        // register UI objects\n        $this->rc->output->add_handlers(array(\n            'filterslist'    => array($this, 'filters_list'),\n            'filtersetslist' => array($this, 'filtersets_list'),\n            'filterframe'    => array($this, 'filter_frame'),\n            'filterform'     => array($this, 'filter_form'),\n            'filtersetform'  => array($this, 'filterset_form'),\n        ));\n\n        // connect to managesieve server\n        $error = $this->connect($_SESSION['username'], $this->rc->decrypt($_SESSION['password']));\n\n        // load current/active script\n        if (!$error) {\n            // Get list of scripts\n            $list = $this->list_scripts();\n\n            // reset current script when entering filters UI (#1489412)\n            if ($this->rc->action == 'plugin.managesieve') {\n                $this->rc->session->remove('managesieve_current');\n            }\n\n            if ($mode != 'vacation') {\n                if (!empty($_GET['_set']) || !empty($_POST['_set'])) {\n                    $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_GPC, true);\n                }\n                else if (!empty($_SESSION['managesieve_current'])) {\n                    $script_name = $_SESSION['managesieve_current'];\n                }\n            }\n\n            $error = $this->load_script($script_name);\n        }\n\n        // finally set script objects\n        if ($error) {\n            switch ($error) {\n                case rcube_sieve::ERROR_CONNECTION:\n                case rcube_sieve::ERROR_LOGIN:\n                    $this->rc->output->show_message('managesieve.filterconnerror', 'error');\n                    break;\n\n                default:\n                    $this->rc->output->show_message('managesieve.filterunknownerror', 'error');\n                    break;\n            }\n\n            // reload interface in case of possible error when specified script wasn't found (#1489412)\n            if ($script_name !== null && !empty($list) && !in_array($script_name, $list)) {\n                $this->rc->output->command('reload', 500);\n            }\n\n            // to disable 'Add filter' button set env variable\n            $this->rc->output->set_env('filterconnerror', true);\n            $this->script = array();\n        }\n        else {\n            $this->exts = $this->sieve->get_extensions();\n            $this->init_script();\n            $this->rc->output->set_env('currentset', $this->sieve->current);\n            $_SESSION['managesieve_current'] = $this->sieve->current;\n        }\n\n        return $error;\n    }\n\n    /**\n     * Connect to configured managesieve server\n     *\n     * @param string $username User login\n     * @param string $password User password\n     *\n     * @return int Connection status: 0 on success, >0 on failure\n     */\n    public function connect($username, $password)\n    {\n        // Get connection parameters\n        $host = $this->rc->config->get('managesieve_host', 'localhost');\n        $port = $this->rc->config->get('managesieve_port');\n        $tls  = $this->rc->config->get('managesieve_usetls', false);\n\n        $host = rcube_utils::parse_host($host);\n        $host = rcube_utils::idn_to_ascii($host);\n\n        // remove tls:// prefix, set TLS flag\n        if (($host = preg_replace('|^tls://|i', '', $host, 1, $cnt)) && $cnt) {\n            $tls = true;\n        }\n\n        if (empty($port)) {\n            $port = getservbyname('sieve', 'tcp');\n            if (empty($port)) {\n                $port = self::PORT;\n            }\n        }\n\n        $plugin = $this->rc->plugins->exec_hook('managesieve_connect', array(\n            'user'      => $username,\n            'password'  => $password,\n            'host'      => $host,\n            'port'      => $port,\n            'usetls'    => $tls,\n            'auth_type' => $this->rc->config->get('managesieve_auth_type'),\n            'disabled'  => $this->rc->config->get('managesieve_disabled_extensions'),\n            'debug'     => $this->rc->config->get('managesieve_debug', false),\n            'auth_cid'  => $this->rc->config->get('managesieve_auth_cid'),\n            'auth_pw'   => $this->rc->config->get('managesieve_auth_pw'),\n            'socket_options' => $this->rc->config->get('managesieve_conn_options'),\n        ));\n\n        // try to connect to managesieve server and to fetch the script\n        $this->sieve = new rcube_sieve(\n            $plugin['user'],\n            $plugin['password'],\n            $plugin['host'],\n            $plugin['port'],\n            $plugin['auth_type'],\n            $plugin['usetls'],\n            $plugin['disabled'],\n            $plugin['debug'],\n            $plugin['auth_cid'],\n            $plugin['auth_pw'],\n            $plugin['socket_options']\n        );\n\n        $error = $this->sieve->error();\n\n        if ($error) {\n            rcube::raise_error(array(\n                    'code'    => 403,\n                    'file'    => __FILE__,\n                    'line'    => __LINE__,\n                    'message' => \"Unable to connect to managesieve on $host:$port\"\n                ), true, false);\n        }\n\n        return $error;\n    }\n\n    /**\n     * Load specified (or active) script\n     *\n     * @param string $script_name Optional script name\n     *\n     * @return int Connection status: 0 on success, >0 on failure\n     */\n    protected function load_script($script_name = null)\n    {\n        // Get list of scripts\n        $list = $this->list_scripts();\n\n        if ($script_name === null || $script_name === '') {\n            // get (first) active script\n            if (!empty($this->active)) {\n               $script_name = $this->active[0];\n            }\n            else if ($list) {\n                $script_name = $list[0];\n            }\n            // create a new (initial) script\n            else {\n                // if script not exists build default script contents\n                $script_file = $this->rc->config->get('managesieve_default');\n                $script_name = $this->rc->config->get('managesieve_script_name');\n\n                if (empty($script_name)) {\n                    $script_name = 'roundcube';\n                }\n\n                if ($script_file && is_readable($script_file)) {\n                    $content = file_get_contents($script_file);\n                }\n\n                // add script and set it active\n                if ($this->sieve->save_script($script_name, $content)) {\n                    $this->activate_script($script_name);\n                    $this->list[] = $script_name;\n                }\n            }\n        }\n\n        if ($script_name) {\n            $this->sieve->load($script_name);\n        }\n\n        return $this->sieve->error();\n    }\n\n    /**\n     * User interface actions handler\n     */\n    function actions()\n    {\n        $error = $this->start();\n\n        // Handle user requests\n        if ($action = rcube_utils::get_input_value('_act', rcube_utils::INPUT_GPC)) {\n            $fid = (int) rcube_utils::get_input_value('_fid', rcube_utils::INPUT_POST);\n\n            if ($action == 'delete' && !$error) {\n                if (isset($this->script[$fid])) {\n                    if ($this->sieve->script->delete_rule($fid))\n                        $result = $this->save_script();\n\n                    if ($result === true) {\n                        $this->rc->output->show_message('managesieve.filterdeleted', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'del', array('id' => $fid));\n                    } else {\n                        $this->rc->output->show_message('managesieve.filterdeleteerror', 'error');\n                    }\n                }\n            }\n            else if ($action == 'move' && !$error) {\n                if (isset($this->script[$fid])) {\n                    $to   = (int) rcube_utils::get_input_value('_to', rcube_utils::INPUT_POST);\n                    $rule = $this->script[$fid];\n\n                    // remove rule\n                    unset($this->script[$fid]);\n                    $this->script = array_values($this->script);\n\n                    // add at target position\n                    if ($to >= count($this->script)) {\n                        $this->script[] = $rule;\n                    }\n                    else {\n                        $script = array();\n                        foreach ($this->script as $idx => $r) {\n                            if ($idx == $to)\n                                $script[] = $rule;\n                            $script[] = $r;\n                        }\n                        $this->script = $script;\n                    }\n\n                    $this->sieve->script->content = $this->script;\n                    $result = $this->save_script();\n\n                    if ($result === true) {\n                        $result = $this->list_rules();\n\n                        $this->rc->output->show_message('managesieve.moved', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'list',\n                            array('list' => $result, 'clear' => true, 'set' => $to));\n                    } else {\n                        $this->rc->output->show_message('managesieve.moveerror', 'error');\n                    }\n                }\n            }\n            else if ($action == 'act' && !$error) {\n                if (isset($this->script[$fid])) {\n                    $rule     = $this->script[$fid];\n                    $disabled = $rule['disabled'] ? true : false;\n                    $rule['disabled'] = !$disabled;\n                    $result = $this->sieve->script->update_rule($fid, $rule);\n\n                    if ($result !== false)\n                        $result = $this->save_script();\n\n                    if ($result === true) {\n                        if ($rule['disabled'])\n                            $this->rc->output->show_message('managesieve.deactivated', 'confirmation');\n                        else\n                            $this->rc->output->show_message('managesieve.activated', 'confirmation');\n                        $this->rc->output->command('managesieve_updatelist', 'update',\n                            array('id' => $fid, 'disabled' => $rule['disabled']));\n                    } else {\n                        if ($rule['disabled'])\n                            $this->rc->output->show_message('managesieve.deactivateerror', 'error');\n                        else\n                            $this->rc->output->show_message('managesieve.activateerror', 'error');\n                    }\n                }\n            }\n            else if ($action == 'setact' && !$error) {\n                $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_POST, true);\n                $result = $this->activate_script($script_name);\n                $kep14  = $this->rc->config->get('managesieve_kolab_master');\n\n                if ($result === true) {\n                    $this->rc->output->set_env('active_sets', $this->active);\n                    $this->rc->output->show_message('managesieve.setactivated', 'confirmation');\n                    $this->rc->output->command('managesieve_updatelist', 'setact',\n                        array('name' => $script_name, 'active' => true, 'all' => !$kep14));\n                } else {\n                    $this->rc->output->show_message('managesieve.setactivateerror', 'error');\n                }\n            }\n            else if ($action == 'deact' && !$error) {\n                $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_POST, true);\n                $result = $this->deactivate_script($script_name);\n\n                if ($result === true) {\n                    $this->rc->output->set_env('active_sets', $this->active);\n                    $this->rc->output->show_message('managesieve.setdeactivated', 'confirmation');\n                    $this->rc->output->command('managesieve_updatelist', 'setact',\n                        array('name' => $script_name, 'active' => false));\n                } else {\n                    $this->rc->output->show_message('managesieve.setdeactivateerror', 'error');\n                }\n            }\n            else if ($action == 'setdel' && !$error) {\n                $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_POST, true);\n                $result = $this->remove_script($script_name);\n\n                if ($result === true) {\n                    $this->rc->output->show_message('managesieve.setdeleted', 'confirmation');\n                    $this->rc->output->command('managesieve_updatelist', 'setdel',\n                        array('name' => $script_name));\n                    $this->rc->session->remove('managesieve_current');\n                } else {\n                    $this->rc->output->show_message('managesieve.setdeleteerror', 'error');\n                }\n            }\n            else if ($action == 'setget') {\n                $this->rc->request_security_check(rcube_utils::INPUT_GET);\n\n                $script_name = rcube_utils::get_input_value('_set', rcube_utils::INPUT_GPC, true);\n                $script      = $this->sieve->get_script($script_name);\n\n                if (is_a($script, 'PEAR_Error')) {\n                    exit;\n                }\n\n                $browser = new rcube_browser;\n\n                // send download headers\n                header(\"Content-Type: application/octet-stream\");\n                header(\"Content-Length: \".strlen($script));\n\n                if ($browser->ie) {\n                    header(\"Content-Type: application/force-download\");\n                    $filename = rawurlencode($script_name);\n                }\n                else {\n                    $filename = addcslashes($script_name, '\\\\\"');\n                }\n\n                header(\"Content-Disposition: attachment; filename=\\\"$filename.txt\\\"\");\n                echo $script;\n                exit;\n            }\n            else if ($action == 'list') {\n                $result = $this->list_rules();\n\n                $this->rc->output->command('managesieve_updatelist', 'list', array('list' => $result));\n            }\n            else if ($action == 'ruleadd') {\n                $rid = rcube_utils::get_input_value('_rid', rcube_utils::INPUT_POST);\n                $id = $this->genid();\n                $content = $this->rule_div($fid, $id, false);\n\n                $this->rc->output->command('managesieve_rulefill', $content, $id, $rid);\n            }\n            else if ($action == 'actionadd') {\n                $aid = rcube_utils::get_input_value('_aid', rcube_utils::INPUT_POST);\n                $id = $this->genid();\n                $content = $this->action_div($fid, $id, false);\n\n                $this->rc->output->command('managesieve_actionfill', $content, $id, $aid);\n            }\n            else if ($action == 'addresses') {\n                $aid = rcube_utils::get_input_value('_aid', rcube_utils::INPUT_POST);\n\n                $this->rc->output->command('managesieve_vacation_addresses_update', $aid, $this->user_emails());\n            }\n\n            $this->rc->output->send();\n        }\n        else if ($this->rc->task == 'mail') {\n            // Initialize the form\n            $rules = rcube_utils::get_input_value('r', rcube_utils::INPUT_GET);\n            if (!empty($rules)) {\n                $i = 0;\n                foreach ($rules as $rule) {\n                    list($header, $value) = explode(':', $rule, 2);\n                    $tests[$i] = array(\n                        'type' => 'contains',\n                        'test' => 'header',\n                        'arg1' => $header,\n                        'arg2' => $value,\n                    );\n                    $i++;\n                }\n\n                $this->form = array(\n                    'join'  => count($tests) > 1 ? 'allof' : 'anyof',\n                    'name'  => '',\n                    'tests' => $tests,\n                    'actions' => array(\n                        0 => array('type' => 'fileinto'),\n                        1 => array('type' => 'stop'),\n                    ),\n                );\n            }\n        }\n\n        $this->send();\n    }\n\n    function save()\n    {\n        // Init plugin and handle managesieve connection\n        $error = $this->start();\n\n        // get request size limits (#1488648)\n        $max_post = max(array(\n            ini_get('max_input_vars'),\n            ini_get('suhosin.request.max_vars'),\n            ini_get('suhosin.post.max_vars'),\n        ));\n        $max_depth = max(array(\n            ini_get('suhosin.request.max_array_depth'),\n            ini_get('suhosin.post.max_array_depth'),\n        ));\n\n        // check request size limit\n        if ($max_post && count($_POST, COUNT_RECURSIVE) >= $max_post) {\n            rcube::raise_error(array(\n                'code' => 500, 'type' => 'php',\n                'file' => __FILE__, 'line' => __LINE__,\n                'message' => \"Request size limit exceeded (one of max_input_vars/suhosin.request.max_vars/suhosin.post.max_vars)\"\n                ), true, false);\n            $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n        }\n        // check request depth limits\n        else if ($max_depth && count($_POST['_header']) > $max_depth) {\n            rcube::raise_error(array(\n                'code' => 500, 'type' => 'php',\n                'file' => __FILE__, 'line' => __LINE__,\n                'message' => \"Request size limit exceeded (one of suhosin.request.max_array_depth/suhosin.post.max_array_depth)\"\n                ), true, false);\n            $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n        }\n        // filters set add action\n        else if (!empty($_POST['_newset'])) {\n            $name       = rcube_utils::get_input_value('_name', rcube_utils::INPUT_POST, true);\n            $copy       = rcube_utils::get_input_value('_copy', rcube_utils::INPUT_POST, true);\n            $from       = rcube_utils::get_input_value('_from', rcube_utils::INPUT_POST);\n            $exceptions = $this->rc->config->get('managesieve_filename_exceptions');\n            $kolab      = $this->rc->config->get('managesieve_kolab_master');\n            $name_uc    = mb_strtolower($name);\n            $list       = $this->list_scripts();\n\n            if (!$name) {\n                $this->errors['name'] = $this->plugin->gettext('cannotbeempty');\n            }\n            else if (mb_strlen($name) > 128) {\n                $this->errors['name'] = $this->plugin->gettext('nametoolong');\n            }\n            else if (!empty($exceptions) && in_array($name, (array)$exceptions)) {\n                $this->errors['name'] = $this->plugin->gettext('namereserved');\n            }\n            else if (!empty($kolab) && in_array($name_uc, array('MASTER', 'USER', 'MANAGEMENT'))) {\n                $this->errors['name'] = $this->plugin->gettext('namereserved');\n            }\n            else if (in_array($name, $list)) {\n                $this->errors['name'] = $this->plugin->gettext('setexist');\n            }\n            else if ($from == 'file') {\n                // from file\n                if (is_uploaded_file($_FILES['_file']['tmp_name'])) {\n                    $file = file_get_contents($_FILES['_file']['tmp_name']);\n                    $file = preg_replace('/\\r/', '', $file);\n                    // for security don't save script directly\n                    // check syntax before, like this...\n                    $this->sieve->load_script($file);\n                    if (!$this->save_script($name)) {\n                        $this->errors['file'] = $this->plugin->gettext('setcreateerror');\n                    }\n                }\n                else {  // upload failed\n                    $err = $_FILES['_file']['error'];\n\n                    if ($err == UPLOAD_ERR_INI_SIZE || $err == UPLOAD_ERR_FORM_SIZE) {\n                        $msg = $this->rc->gettext(array('name' => 'filesizeerror',\n                            'vars' => array('size' =>\n                                $this->rc->show_bytes(parse_bytes(ini_get('upload_max_filesize'))))));\n                    }\n                    else {\n                        $this->errors['file'] = $this->plugin->gettext('fileuploaderror');\n                    }\n                }\n            }\n            else if (!$this->sieve->copy($name, $from == 'set' ? $copy : '')) {\n                $error = 'managesieve.setcreateerror';\n            }\n\n            if (!$error && empty($this->errors)) {\n                // Find position of the new script on the list\n                $list[] = $name;\n                asort($list, SORT_LOCALE_STRING);\n                $list  = array_values($list);\n                $index = array_search($name, $list);\n\n                $this->rc->output->show_message('managesieve.setcreated', 'confirmation');\n                $this->rc->output->command('parent.managesieve_updatelist', 'setadd',\n                    array('name' => $name, 'index' => $index));\n            } else if ($msg) {\n                $this->rc->output->command('display_message', $msg, 'error');\n            } else if ($error) {\n                $this->rc->output->show_message($error, 'error');\n            }\n        }\n        // filter add/edit action\n        else if (isset($_POST['_name'])) {\n            $name = trim(rcube_utils::get_input_value('_name', rcube_utils::INPUT_POST, true));\n            $fid  = trim(rcube_utils::get_input_value('_fid', rcube_utils::INPUT_POST));\n            $join = trim(rcube_utils::get_input_value('_join', rcube_utils::INPUT_POST));\n\n            // and arrays\n            $headers        = rcube_utils::get_input_value('_header', rcube_utils::INPUT_POST);\n            $cust_headers   = rcube_utils::get_input_value('_custom_header', rcube_utils::INPUT_POST);\n            $ops            = rcube_utils::get_input_value('_rule_op', rcube_utils::INPUT_POST);\n            $sizeops        = rcube_utils::get_input_value('_rule_size_op', rcube_utils::INPUT_POST);\n            $sizeitems      = rcube_utils::get_input_value('_rule_size_item', rcube_utils::INPUT_POST);\n            $sizetargets    = rcube_utils::get_input_value('_rule_size_target', rcube_utils::INPUT_POST);\n            $targets        = rcube_utils::get_input_value('_rule_target', rcube_utils::INPUT_POST, true);\n            $mods           = rcube_utils::get_input_value('_rule_mod', rcube_utils::INPUT_POST);\n            $mod_types      = rcube_utils::get_input_value('_rule_mod_type', rcube_utils::INPUT_POST);\n            $body_trans     = rcube_utils::get_input_value('_rule_trans', rcube_utils::INPUT_POST);\n            $body_types     = rcube_utils::get_input_value('_rule_trans_type', rcube_utils::INPUT_POST, true);\n            $comparators    = rcube_utils::get_input_value('_rule_comp', rcube_utils::INPUT_POST);\n            $indexes        = rcube_utils::get_input_value('_rule_index', rcube_utils::INPUT_POST);\n            $lastindexes    = rcube_utils::get_input_value('_rule_index_last', rcube_utils::INPUT_POST);\n            $dateheaders    = rcube_utils::get_input_value('_rule_date_header', rcube_utils::INPUT_POST);\n            $dateparts      = rcube_utils::get_input_value('_rule_date_part', rcube_utils::INPUT_POST);\n            $act_types      = rcube_utils::get_input_value('_action_type', rcube_utils::INPUT_POST, true);\n            $mailboxes      = rcube_utils::get_input_value('_action_mailbox', rcube_utils::INPUT_POST, true);\n            $act_targets    = rcube_utils::get_input_value('_action_target', rcube_utils::INPUT_POST, true);\n            $domain_targets = rcube_utils::get_input_value('_action_target_domain', rcube_utils::INPUT_POST);\n            $area_targets   = rcube_utils::get_input_value('_action_target_area', rcube_utils::INPUT_POST, true);\n            $reasons        = rcube_utils::get_input_value('_action_reason', rcube_utils::INPUT_POST, true);\n            $addresses      = rcube_utils::get_input_value('_action_addresses', rcube_utils::INPUT_POST, true);\n            $intervals      = rcube_utils::get_input_value('_action_interval', rcube_utils::INPUT_POST);\n            $interval_types = rcube_utils::get_input_value('_action_interval_type', rcube_utils::INPUT_POST);\n            $from           = rcube_utils::get_input_value('_action_from', rcube_utils::INPUT_POST);\n            $subject        = rcube_utils::get_input_value('_action_subject', rcube_utils::INPUT_POST, true);\n            $flags          = rcube_utils::get_input_value('_action_flags', rcube_utils::INPUT_POST);\n            $varnames       = rcube_utils::get_input_value('_action_varname', rcube_utils::INPUT_POST);\n            $varvalues      = rcube_utils::get_input_value('_action_varvalue', rcube_utils::INPUT_POST);\n            $varmods        = rcube_utils::get_input_value('_action_varmods', rcube_utils::INPUT_POST);\n            $notifymethods  = rcube_utils::get_input_value('_action_notifymethod', rcube_utils::INPUT_POST);\n            $notifytargets  = rcube_utils::get_input_value('_action_notifytarget', rcube_utils::INPUT_POST, true);\n            $notifyoptions  = rcube_utils::get_input_value('_action_notifyoption', rcube_utils::INPUT_POST, true);\n            $notifymessages = rcube_utils::get_input_value('_action_notifymessage', rcube_utils::INPUT_POST, true);\n            $notifyfrom     = rcube_utils::get_input_value('_action_notifyfrom', rcube_utils::INPUT_POST);\n            $notifyimp      = rcube_utils::get_input_value('_action_notifyimportance', rcube_utils::INPUT_POST);\n\n            // we need a \"hack\" for radiobuttons\n            foreach ($sizeitems as $item)\n                $items[] = $item;\n\n            $this->form['disabled'] = !empty($_POST['_disabled']);\n            $this->form['join']     = $join == 'allof';\n            $this->form['name']     = $name;\n            $this->form['tests']    = array();\n            $this->form['actions']  = array();\n\n            if ($name == '')\n                $this->errors['name'] = $this->plugin->gettext('cannotbeempty');\n            else {\n                foreach($this->script as $idx => $rule)\n                    if($rule['name'] == $name && $idx != $fid) {\n                        $this->errors['name'] = $this->plugin->gettext('ruleexist');\n                        break;\n                    }\n            }\n\n            $i = 0;\n            // rules\n            if ($join == 'any') {\n                $this->form['tests'][0]['test'] = 'true';\n            }\n            else {\n                foreach ($headers as $idx => $header) {\n                    // targets are indexed differently (assume form order)\n                    $target     = $this->strip_value(array_shift($targets), true);\n                    $header     = $this->strip_value($header);\n                    $operator   = $this->strip_value($ops[$idx]);\n                    $comparator = $this->strip_value($comparators[$idx]);\n\n                    if ($header == 'size') {\n                        $sizeop     = $this->strip_value($sizeops[$idx]);\n                        $sizeitem   = $this->strip_value($items[$idx]);\n                        $sizetarget = $this->strip_value($sizetargets[$idx]);\n\n                        $this->form['tests'][$i]['test'] = 'size';\n                        $this->form['tests'][$i]['type'] = $sizeop;\n                        $this->form['tests'][$i]['arg']  = $sizetarget;\n\n                        if ($sizetarget == '')\n                            $this->errors['tests'][$i]['sizetarget'] = $this->plugin->gettext('cannotbeempty');\n                        else if (!preg_match('/^[0-9]+(K|M|G)?$/i', $sizetarget.$sizeitem, $m)) {\n                            $this->errors['tests'][$i]['sizetarget'] = $this->plugin->gettext('forbiddenchars');\n                            $this->form['tests'][$i]['item'] = $sizeitem;\n                        }\n                        else\n                            $this->form['tests'][$i]['arg'] .= $m[1];\n                    }\n                    else if ($header == 'currentdate') {\n                        $datepart = $this->strip_value($dateparts[$idx]);\n\n                        if (preg_match('/^not/', $operator))\n                            $this->form['tests'][$i]['not'] = true;\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if ($type == 'exists') {\n                            $this->errors['tests'][$i]['op'] = true;\n                        }\n\n                        $this->form['tests'][$i]['test'] = 'currentdate';\n                        $this->form['tests'][$i]['type'] = $type;\n                        $this->form['tests'][$i]['part'] = $datepart;\n                        $this->form['tests'][$i]['arg']  = $target;\n\n                        if ($type != 'exists') {\n                            if (!count($target)) {\n                                $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                            }\n                            else if (strpos($type, 'count-') === 0) {\n                                foreach ($target as $arg) {\n                                    if (preg_match('/[^0-9]/', $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n                            else if (strpos($type, 'value-') === 0) {\n                                // Some date/time formats do not support i;ascii-numeric comparator\n                                if ($comparator == 'i;ascii-numeric' && in_array($datepart, array('date', 'time', 'iso8601', 'std11'))) {\n                                    $comparator = '';\n                                }\n                            }\n\n                            if (!preg_match('/^(regex|matches|count-)/', $type) && count($target)) {\n                                foreach ($target as $arg) {\n                                    if (!$this->validate_date_part($datepart, $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('invaliddateformat');\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else if ($header == 'date') {\n                        $datepart    = $this->strip_value($dateparts[$idx]);\n                        $dateheader  = $this->strip_value($dateheaders[$idx]);\n                        $index       = $this->strip_value($indexes[$idx]);\n                        $indexlast   = $this->strip_value($lastindexes[$idx]);\n\n                        if (preg_match('/^not/', $operator))\n                            $this->form['tests'][$i]['not'] = true;\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if ($type == 'exists') {\n                            $this->errors['tests'][$i]['op'] = true;\n                        }\n\n                        if (!empty($index) && $mod != 'envelope') {\n                            $this->form['tests'][$i]['index'] = intval($index);\n                            $this->form['tests'][$i]['last']  = !empty($indexlast);\n                        }\n\n                        if (empty($dateheader)) {\n                            $dateheader = 'Date';\n                        }\n                        else if (!preg_match('/^[\\x21-\\x39\\x41-\\x7E]+$/i', $dateheader)) {\n                            $this->errors['tests'][$i]['dateheader'] = $this->plugin->gettext('forbiddenchars');\n                        }\n\n                        $this->form['tests'][$i]['test']   = 'date';\n                        $this->form['tests'][$i]['type']   = $type;\n                        $this->form['tests'][$i]['part']   = $datepart;\n                        $this->form['tests'][$i]['arg']    = $target;\n                        $this->form['tests'][$i]['header'] = $dateheader;\n\n                        if ($type != 'exists') {\n                            if (!count($target)) {\n                                $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                            }\n                            else if (strpos($type, 'count-') === 0) {\n                                foreach ($target as $arg) {\n                                    if (preg_match('/[^0-9]/', $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n                            else if (strpos($type, 'value-') === 0) {\n                                // Some date/time formats do not support i;ascii-numeric comparator\n                                if ($comparator == 'i;ascii-numeric' && in_array($datepart, array('date', 'time', 'iso8601', 'std11'))) {\n                                    $comparator = '';\n                                }\n                            }\n\n                            if (count($target) && !preg_match('/^(regex|matches|count-)/', $type)) {\n                                foreach ($target as $arg) {\n                                    if (!$this->validate_date_part($datepart, $arg)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('invaliddateformat');\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else if ($header == 'body') {\n                        $trans      = $this->strip_value($body_trans[$idx]);\n                        $trans_type = $this->strip_value($body_types[$idx], true);\n\n                        if (preg_match('/^not/', $operator))\n                            $this->form['tests'][$i]['not'] = true;\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if ($type == 'exists') {\n                            $this->errors['tests'][$i]['op'] = true;\n                        }\n\n                        $this->form['tests'][$i]['test'] = 'body';\n                        $this->form['tests'][$i]['type'] = $type;\n                        $this->form['tests'][$i]['arg']  = $target;\n\n                        if (empty($target) && $type != 'exists') {\n                            $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                        }\n                        else if (preg_match('/^(value|count)-/', $type)) {\n                            foreach ($target as $target_value) {\n                                if (preg_match('/[^0-9]/', $target_value)) {\n                                    $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                }\n                            }\n                        }\n\n                        $this->form['tests'][$i]['part'] = $trans;\n                        if ($trans == 'content') {\n                            $this->form['tests'][$i]['content'] = $trans_type;\n                        }\n                    }\n                    else {\n                        $cust_header = $headers = $this->strip_value(array_shift($cust_headers));\n                        $mod         = $this->strip_value($mods[$idx]);\n                        $mod_type    = $this->strip_value($mod_types[$idx]);\n                        $index       = $this->strip_value($indexes[$idx]);\n                        $indexlast   = $this->strip_value($lastindexes[$idx]);\n\n                        if (preg_match('/^not/', $operator))\n                            $this->form['tests'][$i]['not'] = true;\n                        $type = preg_replace('/^not/', '', $operator);\n\n                        if (!empty($index) && $mod != 'envelope') {\n                            $this->form['tests'][$i]['index'] = intval($index);\n                            $this->form['tests'][$i]['last']  = !empty($indexlast);\n                        }\n\n                        if ($header == '...') {\n                            if (!count($headers))\n                                $this->errors['tests'][$i]['header'] = $this->plugin->gettext('cannotbeempty');\n                            else {\n                                foreach ($headers as $hr) {\n                                    // RFC2822: printable ASCII except colon\n                                    if (!preg_match('/^[\\x21-\\x39\\x41-\\x7E]+$/i', $hr)) {\n                                        $this->errors['tests'][$i]['header'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n\n                            if (empty($this->errors['tests'][$i]['header']))\n                                $cust_header = (is_array($headers) && count($headers) == 1) ? $headers[0] : $headers;\n                        }\n\n                        $header = $header == '...' ? $cust_header : $header;\n\n                        if (is_array($header)) {\n                            foreach ($header as $h_index => $val) {\n                                if (isset($this->headers[$val])) {\n                                    $header[$h_index] = $this->headers[$val];\n                                }\n                            }\n                        }\n\n                        if ($type == 'exists') {\n                            $this->form['tests'][$i]['test'] = 'exists';\n                            $this->form['tests'][$i]['arg'] = $header;\n                        }\n                        else {\n                            $test = 'header';\n\n                            if ($mod == 'address' || $mod == 'envelope') {\n                                $found = false;\n                                if (empty($this->errors['tests'][$i]['header'])) {\n                                    foreach ((array)$header as $hdr) {\n                                        if (!in_array(strtolower(trim($hdr)), $this->addr_headers))\n                                            $found = true;\n                                    }\n                                }\n                                if (!$found)\n                                    $test = $mod;\n                            }\n\n                            $this->form['tests'][$i]['type'] = $type;\n                            $this->form['tests'][$i]['test'] = $test;\n                            $this->form['tests'][$i]['arg1'] = $header;\n                            $this->form['tests'][$i]['arg2'] = $target;\n\n                            if (empty($target)) {\n                                $this->errors['tests'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                            }\n                            else if (preg_match('/^(value|count)-/', $type)) {\n                                foreach ($target as $target_value) {\n                                    if (preg_match('/[^0-9]/', $target_value)) {\n                                        $this->errors['tests'][$i]['target'] = $this->plugin->gettext('forbiddenchars');\n                                    }\n                                }\n                            }\n\n                            if ($mod) {\n                                $this->form['tests'][$i]['part'] = $mod_type;\n                            }\n                        }\n                    }\n\n                    if ($header != 'size' && $comparator) {\n                        $this->form['tests'][$i]['comparator'] = $comparator;\n                    }\n\n                    $i++;\n                }\n            }\n\n            $i = 0;\n            // actions\n            foreach ($act_types as $idx => $type) {\n                $type = $this->strip_value($type);\n\n                switch ($type) {\n                case 'fileinto':\n                case 'fileinto_copy':\n                    $mailbox = $this->strip_value($mailboxes[$idx], false, false);\n                    $this->form['actions'][$i]['target'] = $this->mod_mailbox($mailbox, 'in');\n\n                    if ($type == 'fileinto_copy') {\n                        $type = 'fileinto';\n                        $this->form['actions'][$i]['copy'] = true;\n                    }\n                    break;\n\n                case 'reject':\n                case 'ereject':\n                    $target = $this->strip_value($area_targets[$idx]);\n                    $this->form['actions'][$i]['target'] = str_replace(\"\\r\\n\", \"\\n\", $target);\n\n //                 if ($target == '')\n//                      $this->errors['actions'][$i]['targetarea'] = $this->plugin->gettext('cannotbeempty');\n                    break;\n\n                case 'redirect':\n                case 'redirect_copy':\n                    $target = $this->strip_value($act_targets[$idx]);\n                    $domain = $this->strip_value($domain_targets[$idx]);\n\n                    // force one of the configured domains\n                    $domains = (array) $this->rc->config->get('managesieve_domains');\n                    if (!empty($domains) && !empty($target)) {\n                        if (!$domain || !in_array($domain, $domains)) {\n                            $domain = $domains[0];\n                        }\n\n                        $target .= '@' . $domain;\n                    }\n\n                    $this->form['actions'][$i]['target'] = $target;\n\n                    if ($target == '')\n                        $this->errors['actions'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                    else if (!rcube_utils::check_email($target))\n                        $this->errors['actions'][$i]['target'] = $this->plugin->gettext(!empty($domains) ? 'forbiddenchars' : 'noemailwarning');\n\n                    if ($type == 'redirect_copy') {\n                        $type = 'redirect';\n                        $this->form['actions'][$i]['copy'] = true;\n                    }\n\n                    break;\n\n                case 'addflag':\n                case 'setflag':\n                case 'removeflag':\n                    $_target = array();\n                    if (empty($flags[$idx])) {\n                        $this->errors['actions'][$i]['target'] = $this->plugin->gettext('noflagset');\n                    }\n                    else {\n                        foreach ($flags[$idx] as $flag) {\n                            $_target[] = $this->strip_value($flag);\n                        }\n                    }\n                    $this->form['actions'][$i]['target'] = $_target;\n                    break;\n\n                case 'vacation':\n                    $reason        = $this->strip_value($reasons[$idx]);\n                    $interval_type = $interval_types[$idx] == 'seconds' ? 'seconds' : 'days';\n\n                    $this->form['actions'][$i]['reason']    = str_replace(\"\\r\\n\", \"\\n\", $reason);\n                    $this->form['actions'][$i]['from']      = $from[$idx];\n                    $this->form['actions'][$i]['subject']   = $subject[$idx];\n                    $this->form['actions'][$i]['addresses'] = array_shift($addresses);\n                    $this->form['actions'][$i][$interval_type] = $intervals[$idx];\n// @TODO: vacation :mime, :handle\n\n                    foreach ((array)$this->form['actions'][$i]['addresses'] as $aidx => $address) {\n                        $this->form['actions'][$i]['addresses'][$aidx] = $address = trim($address);\n\n                        if (empty($address)) {\n                            unset($this->form['actions'][$i]['addresses'][$aidx]);\n                        }\n                        else if (!rcube_utils::check_email($address)) {\n                            $this->errors['actions'][$i]['addresses'] = $this->plugin->gettext('noemailwarning');\n                            break;\n                        }\n                    }\n\n                    if (!empty($this->form['actions'][$i]['from']) && !rcube_utils::check_email($this->form['actions'][$i]['from'])) {\n                        $this->errors['actions'][$i]['from'] = $this->plugin->gettext('noemailwarning');\n                    }\n\n                    if ($this->form['actions'][$i]['reason'] == '')\n                        $this->errors['actions'][$i]['reason'] = $this->plugin->gettext('cannotbeempty');\n                    if ($this->form['actions'][$i][$interval_type] && !preg_match('/^[0-9]+$/', $this->form['actions'][$i][$interval_type]))\n                        $this->errors['actions'][$i]['interval'] = $this->plugin->gettext('forbiddenchars');\n                    break;\n\n                case 'set':\n                    $this->form['actions'][$i]['name'] = $varnames[$idx];\n                    $this->form['actions'][$i]['value'] = $varvalues[$idx];\n                    foreach ((array)$varmods[$idx] as $v_m) {\n                        $this->form['actions'][$i][$v_m] = true;\n                    }\n\n                    if (empty($varnames[$idx])) {\n                        $this->errors['actions'][$i]['name'] = $this->plugin->gettext('cannotbeempty');\n                    }\n                    else if (!preg_match('/^[0-9a-z_]+$/i', $varnames[$idx])) {\n                        $this->errors['actions'][$i]['name'] = $this->plugin->gettext('forbiddenchars');\n                    }\n\n                    if (!isset($varvalues[$idx]) || $varvalues[$idx] === '') {\n                        $this->errors['actions'][$i]['value'] = $this->plugin->gettext('cannotbeempty');\n                    }\n                    break;\n\n                case 'notify':\n                    if (empty($notifymethods[$idx])) {\n                        $this->errors['actions'][$i]['method'] = $this->plugin->gettext('cannotbeempty');\n                    }\n                    if (empty($notifytargets[$idx])) {\n                        $this->errors['actions'][$i]['target'] = $this->plugin->gettext('cannotbeempty');\n                    }\n                    if (!empty($notifyfrom[$idx]) && !rcube_utils::check_email($notifyfrom[$idx])) {\n                        $this->errors['actions'][$i]['from'] = $this->plugin->gettext('noemailwarning');\n                    }\n\n                    // skip empty options\n                    foreach ((array)$notifyoptions[$idx] as $opt_idx => $opt) {\n                        if (!strlen(trim($opt))) {\n                            unset($notifyoptions[$idx][$opt_idx]);\n                        }\n                    }\n\n                    $this->form['actions'][$i]['method']     = $notifymethods[$idx] . ':' . $notifytargets[$idx];\n                    $this->form['actions'][$i]['options']    = $notifyoptions[$idx];\n                    $this->form['actions'][$i]['message']    = $notifymessages[$idx];\n                    $this->form['actions'][$i]['from']       = $notifyfrom[$idx];\n                    $this->form['actions'][$i]['importance'] = $notifyimp[$idx];\n                    break;\n                }\n\n                $this->form['actions'][$i]['type'] = $type;\n                $i++;\n            }\n\n            if (!$this->errors && !$error) {\n                // save the script\n                if (!isset($this->script[$fid])) {\n                    $fid = $this->sieve->script->add_rule($this->form);\n                    $new = true;\n                }\n                else {\n                    $fid = $this->sieve->script->update_rule($fid, $this->form);\n                }\n\n                if ($fid !== false)\n                    $save = $this->save_script();\n\n                if ($save && $fid !== false) {\n                    $this->rc->output->show_message('managesieve.filtersaved', 'confirmation');\n                    if ($this->rc->task != 'mail') {\n                        $this->rc->output->command('parent.managesieve_updatelist',\n                            isset($new) ? 'add' : 'update',\n                            array(\n                                'name' => $this->form['name'],\n                                'id' => $fid,\n                                'disabled' => $this->form['disabled']\n                        ));\n                    }\n                    else {\n                        $this->rc->output->command('managesieve_dialog_close');\n                        $this->rc->output->send('iframe');\n                    }\n                }\n                else {\n                    $this->rc->output->show_message('managesieve.filtersaveerror', 'error');\n//                  $this->rc->output->send();\n                }\n            }\n        }\n\n        $this->send();\n    }\n\n    protected function send()\n    {\n        // Handle form action\n        if (isset($_GET['_framed']) || isset($_POST['_framed'])) {\n            if (isset($_GET['_newset']) || isset($_POST['_newset'])) {\n                $this->rc->output->send('managesieve.setedit');\n            }\n            else {\n                $this->rc->output->send('managesieve.filteredit');\n            }\n        }\n        else {\n            $this->rc->output->set_pagetitle($this->plugin->gettext('filters'));\n            $this->rc->output->send('managesieve.managesieve');\n        }\n    }\n\n    // return the filters list as HTML table\n    function filters_list($attrib)\n    {\n        // add id to message list table if not specified\n        if (!strlen($attrib['id']))\n            $attrib['id'] = 'rcmfilterslist';\n\n        // define list of cols to be displayed\n        $a_show_cols = array('name');\n\n        $result = $this->list_rules();\n\n        // create XHTML table\n        $out = $this->rc->table_output($attrib, $result, $a_show_cols, 'id');\n\n        // set client env\n        $this->rc->output->add_gui_object('filterslist', $attrib['id']);\n        $this->rc->output->include_script('list.js');\n\n        // add some labels to client\n        $this->rc->output->add_label('managesieve.filterdeleteconfirm');\n\n        return $out;\n    }\n\n    // return the filters list as <SELECT>\n    function filtersets_list($attrib, $no_env = false)\n    {\n        // add id to message list table if not specified\n        if (!strlen($attrib['id']))\n            $attrib['id'] = 'rcmfiltersetslist';\n\n        $list = $this->list_scripts();\n\n        if ($list) {\n            asort($list, SORT_LOCALE_STRING);\n        }\n\n        if (!empty($attrib['type']) && $attrib['type'] == 'list') {\n            // define list of cols to be displayed\n            $a_show_cols = array('name');\n\n            if ($list) {\n                foreach ($list as $idx => $set) {\n                    $scripts['S'.$idx] = $set;\n                    $result[] = array(\n                        'name' => $set,\n                        'id' => 'S'.$idx,\n                        'class' => !in_array($set, $this->active) ? 'disabled' : '',\n                    );\n                }\n            }\n\n            // create XHTML table\n            $out = $this->rc->table_output($attrib, $result, $a_show_cols, 'id');\n\n            $this->rc->output->set_env('filtersets', $scripts);\n            $this->rc->output->include_script('list.js');\n        }\n        else {\n            $select = new html_select(array('name' => '_set', 'id' => $attrib['id'],\n                'onchange' => $this->rc->task != 'mail' ? 'rcmail.managesieve_set()' : ''));\n\n            if ($list) {\n                foreach ($list as $set)\n                    $select->add($set, $set);\n            }\n\n            $out = $select->show($this->sieve->current);\n        }\n\n        // set client env\n        if (!$no_env) {\n            $this->rc->output->add_gui_object('filtersetslist', $attrib['id']);\n            $this->rc->output->add_label('managesieve.setdeleteconfirm');\n        }\n\n        return $out;\n    }\n\n    function filter_frame($attrib)\n    {\n        return $this->rc->output->frame($attrib, true);\n    }\n\n    function filterset_form($attrib)\n    {\n        if (!$attrib['id'])\n            $attrib['id'] = 'rcmfiltersetform';\n\n        $out = '<form name=\"filtersetform\" action=\"./\" method=\"post\" enctype=\"multipart/form-data\">'.\"\\n\";\n\n        $hiddenfields = new html_hiddenfield(array('name' => '_task', 'value' => $this->rc->task));\n        $hiddenfields->add(array('name' => '_action', 'value' => 'plugin.managesieve-save'));\n        $hiddenfields->add(array('name' => '_framed', 'value' => ($_POST['_framed'] || $_GET['_framed'] ? 1 : 0)));\n        $hiddenfields->add(array('name' => '_newset', 'value' => 1));\n\n        $out .= $hiddenfields->show();\n\n        $name     = rcube_utils::get_input_value('_name', rcube_utils::INPUT_POST);\n        $copy     = rcube_utils::get_input_value('_copy', rcube_utils::INPUT_POST);\n        $selected = rcube_utils::get_input_value('_from', rcube_utils::INPUT_POST);\n\n        // filter set name input\n        $input_name = new html_inputfield(array('name' => '_name', 'id' => '_name', 'size' => 30,\n            'class' => ($this->errors['name'] ? 'error' : '')));\n\n        $out .= sprintf('<label for=\"%s\"><b>%s:</b></label> %s<br /><br />',\n            '_name', rcube::Q($this->plugin->gettext('filtersetname')), $input_name->show($name));\n\n        $out .=\"\\n<fieldset class=\\\"itemlist\\\"><legend>\" . $this->plugin->gettext('filters') . \":</legend>\\n\";\n        $out .= '<input type=\"radio\" id=\"from_none\" name=\"_from\" value=\"none\"'\n            .(!$selected || $selected=='none' ? ' checked=\"checked\"' : '').'></input>';\n        $out .= sprintf('<label for=\"%s\">%s</label> ', 'from_none', rcube::Q($this->plugin->gettext('none')));\n\n        // filters set list\n        $list   = $this->list_scripts();\n        $select = new html_select(array('name' => '_copy', 'id' => '_copy'));\n\n        if (is_array($list)) {\n            asort($list, SORT_LOCALE_STRING);\n\n            if (!$copy)\n                $copy = $_SESSION['managesieve_current'];\n\n            foreach ($list as $set) {\n                $select->add($set, $set);\n            }\n\n            $out .= '<br /><input type=\"radio\" id=\"from_set\" name=\"_from\" value=\"set\"'\n                .($selected=='set' ? ' checked=\"checked\"' : '').'></input>';\n            $out .= sprintf('<label for=\"%s\">%s:</label> ', 'from_set', rcube::Q($this->plugin->gettext('fromset')));\n            $out .= $select->show($copy);\n        }\n\n        // script upload box\n        $upload = new html_inputfield(array('name' => '_file', 'id' => '_file', 'size' => 30,\n            'type' => 'file', 'class' => ($this->errors['file'] ? 'error' : '')));\n\n        $out .= '<br /><input type=\"radio\" id=\"from_file\" name=\"_from\" value=\"file\"'\n            .($selected=='file' ? ' checked=\"checked\"' : '').'></input>';\n        $out .= sprintf('<label for=\"%s\">%s:</label> ', 'from_file', rcube::Q($this->plugin->gettext('fromfile')));\n        $out .= $upload->show();\n        $out .= '</fieldset>';\n\n        $this->rc->output->add_gui_object('sieveform', 'filtersetform');\n\n        if ($this->errors['name'])\n            $this->add_tip('_name', $this->errors['name'], true);\n        if ($this->errors['file'])\n            $this->add_tip('_file', $this->errors['file'], true);\n\n        $this->print_tips();\n\n        return $out;\n    }\n\n\n    function filter_form($attrib)\n    {\n        if (!$attrib['id'])\n            $attrib['id'] = 'rcmfilterform';\n\n        $fid = rcube_utils::get_input_value('_fid', rcube_utils::INPUT_GPC);\n        $scr = isset($this->form) ? $this->form : $this->script[$fid];\n\n        $hiddenfields = new html_hiddenfield(array('name' => '_task', 'value' => $this->rc->task));\n        $hiddenfields->add(array('name' => '_action', 'value' => 'plugin.managesieve-save'));\n        $hiddenfields->add(array('name' => '_framed', 'value' => ($_POST['_framed'] || $_GET['_framed'] ? 1 : 0)));\n        $hiddenfields->add(array('name' => '_fid', 'value' => $fid));\n\n        $out = '<form name=\"filterform\" action=\"./\" method=\"post\">'.\"\\n\";\n        $out .= $hiddenfields->show();\n\n        // 'any' flag\n        if ((!isset($this->form) && empty($scr['tests']) && !empty($scr))\n            || (sizeof($scr['tests']) == 1 && $scr['tests'][0]['test'] == 'true' && !$scr['tests'][0]['not'])\n        ) {\n            $any = true;\n        }\n\n        // filter name input\n        $field_id = '_name';\n        $input_name = new html_inputfield(array('name' => '_name', 'id' => $field_id, 'size' => 30,\n            'class' => ($this->errors['name'] ? 'error' : '')));\n\n        if ($this->errors['name'])\n            $this->add_tip($field_id, $this->errors['name'], true);\n\n        if (isset($scr))\n            $input_name = $input_name->show($scr['name']);\n        else\n            $input_name = $input_name->show();\n\n        $out .= sprintf(\"\\n<label for=\\\"%s\\\"><b>%s:</b></label> %s\\n\",\n            $field_id, rcube::Q($this->plugin->gettext('filtername')), $input_name);\n\n        // filter set selector\n        if ($this->rc->task == 'mail') {\n            $out .= sprintf(\"\\n&nbsp;<label for=\\\"%s\\\"><b>%s:</b></label> %s\\n\",\n                $field_id, rcube::Q($this->plugin->gettext('filterset')),\n                $this->filtersets_list(array('id' => 'sievescriptname'), true));\n        }\n\n        $out .= '<br /><br /><fieldset><legend>' . rcube::Q($this->plugin->gettext('messagesrules')) . \"</legend>\\n\";\n\n        // any, allof, anyof radio buttons\n        $field_id = '_allof';\n        $input_join = new html_radiobutton(array('name' => '_join', 'id' => $field_id, 'value' => 'allof',\n            'onclick' => 'rule_join_radio(\\'allof\\')', 'class' => 'radio'));\n\n        if (isset($scr) && !$any)\n            $input_join = $input_join->show($scr['join'] ? 'allof' : '');\n        else\n            $input_join = $input_join->show();\n\n        $out .= sprintf(\"%s<label for=\\\"%s\\\">%s</label>&nbsp;\\n\",\n            $input_join, $field_id, rcube::Q($this->plugin->gettext('filterallof')));\n\n        $field_id = '_anyof';\n        $input_join = new html_radiobutton(array('name' => '_join', 'id' => $field_id, 'value' => 'anyof',\n            'onclick' => 'rule_join_radio(\\'anyof\\')', 'class' => 'radio'));\n\n        if (isset($scr) && !$any)\n            $input_join = $input_join->show($scr['join'] ? '' : 'anyof');\n        else\n            $input_join = $input_join->show('anyof'); // default\n\n        $out .= sprintf(\"%s<label for=\\\"%s\\\">%s</label>\\n\",\n            $input_join, $field_id, rcube::Q($this->plugin->gettext('filteranyof')));\n\n        $field_id = '_any';\n        $input_join = new html_radiobutton(array('name' => '_join', 'id' => $field_id, 'value' => 'any',\n            'onclick' => 'rule_join_radio(\\'any\\')', 'class' => 'radio'));\n\n        $input_join = $input_join->show($any ? 'any' : '');\n\n        $out .= sprintf(\"%s<label for=\\\"%s\\\">%s</label>\\n\",\n            $input_join, $field_id, rcube::Q($this->plugin->gettext('filterany')));\n\n        $rows_num = !empty($scr['tests']) ? sizeof($scr['tests']) : 1;\n\n        $out .= '<div id=\"rules\"'.($any ? ' style=\"display: none\"' : '').'>';\n        for ($x=0; $x<$rows_num; $x++)\n            $out .= $this->rule_div($fid, $x);\n        $out .= \"</div>\\n\";\n\n        $out .= \"</fieldset>\\n\";\n\n        // actions\n        $out .= '<fieldset><legend>' . rcube::Q($this->plugin->gettext('messagesactions')) . \"</legend>\\n\";\n\n        $rows_num = isset($scr) ? sizeof($scr['actions']) : 1;\n\n        $out .= '<div id=\"actions\">';\n        for ($x=0; $x<$rows_num; $x++)\n            $out .= $this->action_div($fid, $x);\n        $out .= \"</div>\\n\";\n\n        $out .= \"</fieldset>\\n\";\n\n        $this->print_tips();\n\n        if ($scr['disabled']) {\n            $this->rc->output->set_env('rule_disabled', true);\n        }\n        $this->rc->output->add_label(\n            'managesieve.ruledeleteconfirm',\n            'managesieve.actiondeleteconfirm'\n        );\n        $this->rc->output->add_gui_object('sieveform', 'filterform');\n\n        return $out;\n    }\n\n    function rule_div($fid, $id, $div=true)\n    {\n        $rule     = isset($this->form) ? $this->form['tests'][$id] : $this->script[$fid]['tests'][$id];\n        $rows_num = isset($this->form) ? sizeof($this->form['tests']) : sizeof($this->script[$fid]['tests']);\n\n        // headers select\n        $select_header = new html_select(array('name' => \"_header[]\", 'id' => 'header'.$id,\n            'onchange' => 'rule_header_select(' .$id .')'));\n\n        foreach ($this->headers as $index => $header) {\n            $header = $this->rc->text_exists($index) ? $this->plugin->gettext($index) : $header;\n            $select_header->add($header, $index);\n        }\n        $select_header->add($this->plugin->gettext('...'), '...');\n        if (in_array('body', $this->exts))\n            $select_header->add($this->plugin->gettext('body'), 'body');\n        $select_header->add($this->plugin->gettext('size'), 'size');\n        if (in_array('date', $this->exts)) {\n            $select_header->add($this->plugin->gettext('datetest'), 'date');\n            $select_header->add($this->plugin->gettext('currdate'), 'currentdate');\n        }\n\n        if (isset($rule['test'])) {\n            if (in_array($rule['test'], array('header', 'address', 'envelope'))) {\n                if (is_array($rule['arg1']) && count($rule['arg1']) == 1) {\n                    $rule['arg1'] = $rule['arg1'][0];\n                }\n\n                $matches = ($header = strtolower($rule['arg1'])) && isset($this->headers[$header]);\n                $test    = $matches ? $header : '...';\n            }\n            else if ($rule['test'] == 'exists') {\n                if (is_array($rule['arg']) && count($rule['arg']) == 1) {\n                    $rule['arg'] = $rule['arg'][0];\n                }\n\n                $matches = ($header = strtolower($rule['arg'])) && isset($this->headers[$header]);\n                $test    = $matches ? $header : '...';\n            }\n            else if (in_array($rule['test'], array('size', 'body', 'date', 'currentdate'))) {\n                $test = $rule['test'];\n            }\n            else if ($rule['test'] != 'true') {\n                $test = '...';\n            }\n        }\n\n        $aout = $select_header->show($test);\n\n        // custom headers input\n        if (isset($rule['test']) && in_array($rule['test'], array('header', 'address', 'envelope'))) {\n            $custom = (array) $rule['arg1'];\n            if (count($custom) == 1 && isset($this->headers[strtolower($custom[0])])) {\n                unset($custom);\n            }\n        }\n        else if (isset($rule['test']) && $rule['test'] == 'exists') {\n            $custom = (array) $rule['arg'];\n            if (count($custom) == 1 && isset($this->headers[strtolower($custom[0])])) {\n                unset($custom);\n            }\n        }\n\n        $tout = $this->list_input($id, 'custom_header', $custom, isset($custom),\n            $this->error_class($id, 'test', 'header', 'custom_header'), 15) . \"\\n\";\n\n        // matching type select (operator)\n        $select_op = new html_select(array('name' => \"_rule_op[]\", 'id' => 'rule_op'.$id,\n            'style' => 'display:' .($rule['test']!='size' ? 'inline' : 'none'),\n            'class' => 'operator_selector',\n            'onchange' => 'rule_op_select(this, '.$id.')'));\n        $select_op->add(rcube::Q($this->plugin->gettext('filtercontains')), 'contains');\n        $select_op->add(rcube::Q($this->plugin->gettext('filternotcontains')), 'notcontains');\n        $select_op->add(rcube::Q($this->plugin->gettext('filteris')), 'is');\n        $select_op->add(rcube::Q($this->plugin->gettext('filterisnot')), 'notis');\n        $select_op->add(rcube::Q($this->plugin->gettext('filterexists')), 'exists');\n        $select_op->add(rcube::Q($this->plugin->gettext('filternotexists')), 'notexists');\n        $select_op->add(rcube::Q($this->plugin->gettext('filtermatches')), 'matches');\n        $select_op->add(rcube::Q($this->plugin->gettext('filternotmatches')), 'notmatches');\n        if (in_array('regex', $this->exts)) {\n            $select_op->add(rcube::Q($this->plugin->gettext('filterregex')), 'regex');\n            $select_op->add(rcube::Q($this->plugin->gettext('filternotregex')), 'notregex');\n        }\n        if (in_array('relational', $this->exts)) {\n            $select_op->add(rcube::Q($this->plugin->gettext('countisgreaterthan')), 'count-gt');\n            $select_op->add(rcube::Q($this->plugin->gettext('countisgreaterthanequal')), 'count-ge');\n            $select_op->add(rcube::Q($this->plugin->gettext('countislessthan')), 'count-lt');\n            $select_op->add(rcube::Q($this->plugin->gettext('countislessthanequal')), 'count-le');\n            $select_op->add(rcube::Q($this->plugin->gettext('countequals')), 'count-eq');\n            $select_op->add(rcube::Q($this->plugin->gettext('countnotequals')), 'count-ne');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueisgreaterthan')), 'value-gt');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueisgreaterthanequal')), 'value-ge');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueislessthan')), 'value-lt');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueislessthanequal')), 'value-le');\n            $select_op->add(rcube::Q($this->plugin->gettext('valueequals')), 'value-eq');\n            $select_op->add(rcube::Q($this->plugin->gettext('valuenotequals')), 'value-ne');\n        }\n\n        $test   = self::rule_test($rule);\n        $target = '';\n\n        // target(s) input\n        if (in_array($rule['test'], array('header', 'address', 'envelope'))) {\n            $target = $rule['arg2'];\n        }\n        else if (in_array($rule['test'], array('body', 'date', 'currentdate'))) {\n            $target = $rule['arg'];\n        }\n        else if ($rule['test'] == 'size') {\n            if (preg_match('/^([0-9]+)(K|M|G)?$/', $rule['arg'], $matches)) {\n                $sizetarget = $matches[1];\n                $sizeitem   = $matches[2];\n            }\n            else {\n                $sizetarget = $rule['arg'];\n                $sizeitem   = $rule['item'];\n            }\n        }\n\n        // (current)date part select\n        if (in_array('date', $this->exts) || in_array('currentdate', $this->exts)) {\n            $date_parts = array('date', 'iso8601', 'std11', 'julian', 'time',\n                'year', 'month', 'day', 'hour', 'minute', 'second', 'weekday', 'zone');\n            $select_dp = new html_select(array('name' => \"_rule_date_part[]\", 'id' => 'rule_date_part'.$id,\n                'style' => in_array($rule['test'], array('currentdate', 'date')) && !preg_match('/^(notcount|count)-/', $test) ? '' : 'display:none',\n                'class' => 'datepart_selector',\n            ));\n\n            foreach ($date_parts as $part) {\n                $select_dp->add(rcube::Q($this->plugin->gettext($part)), $part);\n            }\n\n            $tout .= $select_dp->show($rule['test'] == 'currentdate' || $rule['test'] == 'date' ? $rule['part'] : '');\n        }\n\n        $tout .= $select_op->show($test);\n        $tout .= $this->list_input($id, 'rule_target', $target,\n            $rule['test'] != 'size' && $rule['test'] != 'exists',\n            $this->error_class($id, 'test', 'target', 'rule_target')) . \"\\n\";\n\n        $select_size_op = new html_select(array('name' => \"_rule_size_op[]\", 'id' => 'rule_size_op'.$id));\n        $select_size_op->add(rcube::Q($this->plugin->gettext('filterover')), 'over');\n        $select_size_op->add(rcube::Q($this->plugin->gettext('filterunder')), 'under');\n\n        $tout .= '<div id=\"rule_size' .$id. '\" style=\"display:' . ($rule['test']=='size' ? 'inline' : 'none') .'\">';\n        $tout .= $select_size_op->show($rule['test']=='size' ? $rule['type'] : '');\n        $tout .= '<input type=\"text\" name=\"_rule_size_target[]\" id=\"rule_size_i'.$id.'\" value=\"'.$sizetarget.'\" size=\"10\" ' \n            . $this->error_class($id, 'test', 'sizetarget', 'rule_size_i') .' />\n            <label><input type=\"radio\" name=\"_rule_size_item['.$id.']\" value=\"\"'\n                . (!$sizeitem ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->rc->gettext('B').'</label>\n            <label><input type=\"radio\" name=\"_rule_size_item['.$id.']\" value=\"K\"'\n                . ($sizeitem=='K' ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->rc->gettext('KB').'</label>\n            <label><input type=\"radio\" name=\"_rule_size_item['.$id.']\" value=\"M\"'\n                . ($sizeitem=='M' ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->rc->gettext('MB').'</label>\n            <label><input type=\"radio\" name=\"_rule_size_item['.$id.']\" value=\"G\"'\n                . ($sizeitem=='G' ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->rc->gettext('GB').'</label>';\n        $tout .= '</div>';\n\n        // Advanced modifiers (address, envelope)\n        $select_mod = new html_select(array('name' => \"_rule_mod[]\", 'id' => 'rule_mod_op'.$id,\n            'onchange' => 'rule_mod_select(' .$id .')'));\n        $select_mod->add(rcube::Q($this->plugin->gettext('none')), '');\n        $select_mod->add(rcube::Q($this->plugin->gettext('address')), 'address');\n        if (in_array('envelope', $this->exts))\n            $select_mod->add(rcube::Q($this->plugin->gettext('envelope')), 'envelope');\n\n        $select_type = new html_select(array('name' => \"_rule_mod_type[]\", 'id' => 'rule_mod_type'.$id));\n        $select_type->add(rcube::Q($this->plugin->gettext('allparts')), 'all');\n        $select_type->add(rcube::Q($this->plugin->gettext('domain')), 'domain');\n        $select_type->add(rcube::Q($this->plugin->gettext('localpart')), 'localpart');\n        if (in_array('subaddress', $this->exts)) {\n            $select_type->add(rcube::Q($this->plugin->gettext('user')), 'user');\n            $select_type->add(rcube::Q($this->plugin->gettext('detail')), 'detail');\n        }\n\n        $need_mod = !in_array($rule['test'], array('size', 'body', 'date', 'currentdate'));\n        $mout = '<div id=\"rule_mod' .$id. '\" class=\"adv\"' . (!$need_mod ? ' style=\"display:none\"' : '') . '>';\n        $mout .= ' <span class=\"label\">' . rcube::Q($this->plugin->gettext('modifier')) . ' </span>';\n        $mout .= $select_mod->show($rule['test']);\n        $mout .= ' <span id=\"rule_mod_type' . $id . '\"';\n        $mout .= ' style=\"display:' . (in_array($rule['test'], array('address', 'envelope')) ? 'inline' : 'none') .'\">';\n        $mout .= rcube::Q($this->plugin->gettext('modtype')) . ' ';\n        $mout .= $select_type->show($rule['part']);\n        $mout .= '</span>';\n        $mout .= '</div>';\n\n        // Advanced modifiers (body transformations)\n        $select_mod = new html_select(array('name' => \"_rule_trans[]\", 'id' => 'rule_trans_op'.$id,\n            'onchange' => 'rule_trans_select(' .$id .')'));\n        $select_mod->add(rcube::Q($this->plugin->gettext('text')), 'text');\n        $select_mod->add(rcube::Q($this->plugin->gettext('undecoded')), 'raw');\n        $select_mod->add(rcube::Q($this->plugin->gettext('contenttype')), 'content');\n\n        $mout .= '<div id=\"rule_trans' .$id. '\" class=\"adv\"' . ($rule['test'] != 'body' ? ' style=\"display:none\"' : '') . '>';\n        $mout .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('modifier')) . '</span>';\n        $mout .= $select_mod->show($rule['part']);\n        $mout .= '<input type=\"text\" name=\"_rule_trans_type[]\" id=\"rule_trans_type'.$id\n            . '\" value=\"'.(is_array($rule['content']) ? implode(',', $rule['content']) : $rule['content'])\n            .'\" size=\"20\"' . ($rule['part'] != 'content' ? ' style=\"display:none\"' : '')\n            . $this->error_class($id, 'test', 'part', 'rule_trans_type') .' />';\n        $mout .= '</div>';\n\n        // Advanced modifiers (body transformations)\n        $select_comp = new html_select(array('name' => \"_rule_comp[]\", 'id' => 'rule_comp_op'.$id));\n        $select_comp->add(rcube::Q($this->plugin->gettext('default')), '');\n        $select_comp->add(rcube::Q($this->plugin->gettext('octet')), 'i;octet');\n        $select_comp->add(rcube::Q($this->plugin->gettext('asciicasemap')), 'i;ascii-casemap');\n        if (in_array('comparator-i;ascii-numeric', $this->exts)) {\n            $select_comp->add(rcube::Q($this->plugin->gettext('asciinumeric')), 'i;ascii-numeric');\n        }\n\n        // Comparators\n        $mout .= '<div id=\"rule_comp' .$id. '\" class=\"adv\"' . ($rule['test'] == 'size' ? ' style=\"display:none\"' : '') . '>';\n        $mout .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('comparator')) . '</span>';\n        $mout .= $select_comp->show($rule['comparator']);\n        $mout .= '</div>';\n\n        // Date header\n        if (in_array('date', $this->exts)) {\n            $mout .= '<div id=\"rule_date_header_div' .$id. '\" class=\"adv\"'. ($rule['test'] != 'date' ? ' style=\"display:none\"' : '') .'>';\n            $mout .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('dateheader')) . '</span>';\n            $mout .= '<input type=\"text\" name=\"_rule_date_header[]\" id=\"rule_date_header'.$id\n                . '\" value=\"'. rcube::Q($rule['test'] == 'date' ? $rule['header'] : '')\n                . '\" size=\"15\"' . $this->error_class($id, 'test', 'dateheader', 'rule_date_header') .' />';\n            $mout .= '</div>';\n        }\n\n        // Index\n        if (in_array('index', $this->exts)) {\n            $need_index = in_array($rule['test'], array('header', ', address', 'date'));\n            $mout .= '<div id=\"rule_index_div' .$id. '\" class=\"adv\"'. (!$need_index ? ' style=\"display:none\"' : '') .'>';\n            $mout .= '<span class=\"label\">' . rcube::Q($this->plugin->gettext('index')) . '</span>';\n            $mout .= '<input type=\"text\" name=\"_rule_index[]\" id=\"rule_index'.$id\n                . '\" value=\"'. ($rule['index'] ? intval($rule['index']) : '')\n                . '\" size=\"3\"' . $this->error_class($id, 'test', 'index', 'rule_index') .' />';\n            $mout .= '&nbsp;<input type=\"checkbox\" name=\"_rule_index_last[]\" id=\"rule_index_last'.$id\n                . '\" value=\"1\"' . (!empty($rule['last']) ? ' checked=\"checked\"' : '') . ' />'\n                . '<label for=\"rule_index_last'.$id.'\">'.rcube::Q($this->plugin->gettext('indexlast')).'</label>';\n            $mout .= '</div>';\n        }\n\n        // Build output table\n        $out = $div ? '<div class=\"rulerow\" id=\"rulerow' .$id .'\">'.\"\\n\" : '';\n        $out .= '<table><tr>';\n        $out .= '<td class=\"advbutton\">';\n        $out .= '<a href=\"#\" id=\"ruleadv' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('advancedopts')). '\"\n            onclick=\"rule_adv_switch(' . $id .', this)\" class=\"show\">&nbsp;&nbsp;</a>';\n        $out .= '</td>';\n        $out .= '<td class=\"rowactions\">' . $aout . '</td>';\n        $out .= '<td class=\"rowtargets\">' . $tout . \"\\n\";\n        $out .= '<div id=\"rule_advanced' .$id. '\" style=\"display:none\">' . $mout . '</div>';\n        $out .= '</td>';\n\n        // add/del buttons\n        $out .= '<td class=\"rowbuttons\">';\n        $out .= '<a href=\"#\" id=\"ruleadd' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('add')). '\"\n            onclick=\"rcmail.managesieve_ruleadd(' . $id .')\" class=\"button add\"></a>';\n        $out .= '<a href=\"#\" id=\"ruledel' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('del')). '\"\n            onclick=\"rcmail.managesieve_ruledel(' . $id .')\" class=\"button del' . ($rows_num<2 ? ' disabled' : '') .'\"></a>';\n        $out .= '</td>';\n        $out .= '</tr></table>';\n\n        $out .= $div ? \"</div>\\n\" : '';\n\n        return $out;\n    }\n\n    private static function rule_test(&$rule)\n    {\n        // first modify value/count tests with 'not' keyword\n        // we'll revert the meaning of operators\n        if ($rule['not'] && preg_match('/^(count|value)-([gteqnl]{2})/', $rule['type'], $m)) {\n            $rule['not'] = false;\n\n            switch ($m[2]) {\n            case 'gt': $rule['type'] = $m[1] . '-le'; break;\n            case 'ge': $rule['type'] = $m[1] . '-lt'; break;\n            case 'lt': $rule['type'] = $m[1] . '-ge'; break;\n            case 'le': $rule['type'] = $m[1] . '-gt'; break;\n            case 'eq': $rule['type'] = $m[1] . '-ne'; break;\n            case 'ne': $rule['type'] = $m[1] . '-eq'; break;\n            }\n        }\n        else if ($rule['not'] && $rule['test'] == 'size') {\n            $rule['not']  = false;\n            $rule['type'] = $rule['type'] == 'over' ? 'under' : 'over';\n        }\n\n        $set = array('header', 'address', 'envelope', 'body', 'date', 'currentdate');\n\n        // build test string supported by select element\n        if ($rule['size']) {\n            $test = $rule['type'];\n        }\n        else if (in_array($rule['test'], $set)) {\n            $test = ($rule['not'] ? 'not' : '') . ($rule['type'] ?: 'is');\n        }\n        else {\n            $test = ($rule['not'] ? 'not' : '') . $rule['test'];\n        }\n\n        return $test;\n    }\n\n    function action_div($fid, $id, $div=true)\n    {\n        $action   = isset($this->form) ? $this->form['actions'][$id] : $this->script[$fid]['actions'][$id];\n        $rows_num = isset($this->form) ? sizeof($this->form['actions']) : sizeof($this->script[$fid]['actions']);\n\n        $out = $div ? '<div class=\"actionrow\" id=\"actionrow' .$id .'\">'.\"\\n\" : '';\n\n        $out .= '<table><tr><td class=\"rowactions\">';\n\n        // action select\n        $select_action = new html_select(array('name' => \"_action_type[$id]\", 'id' => 'action_type'.$id,\n            'onchange' => 'action_type_select(' .$id .')'));\n        if (in_array('fileinto', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagemoveto')), 'fileinto');\n        if (in_array('fileinto', $this->exts) && in_array('copy', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagecopyto')), 'fileinto_copy');\n        $select_action->add(rcube::Q($this->plugin->gettext('messageredirect')), 'redirect');\n        if (in_array('copy', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagesendcopy')), 'redirect_copy');\n        if (in_array('reject', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagediscard')), 'reject');\n        else if (in_array('ereject', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagediscard')), 'ereject');\n        if (in_array('vacation', $this->exts))\n            $select_action->add(rcube::Q($this->plugin->gettext('messagereply')), 'vacation');\n        $select_action->add(rcube::Q($this->plugin->gettext('messagedelete')), 'discard');\n        if (in_array('imapflags', $this->exts) || in_array('imap4flags', $this->exts)) {\n            $select_action->add(rcube::Q($this->plugin->gettext('setflags')), 'setflag');\n            $select_action->add(rcube::Q($this->plugin->gettext('addflags')), 'addflag');\n            $select_action->add(rcube::Q($this->plugin->gettext('removeflags')), 'removeflag');\n        }\n        if (in_array('variables', $this->exts)) {\n            $select_action->add(rcube::Q($this->plugin->gettext('setvariable')), 'set');\n        }\n        if (in_array('enotify', $this->exts) || in_array('notify', $this->exts)) {\n            $select_action->add(rcube::Q($this->plugin->gettext('notify')), 'notify');\n        }\n        $select_action->add(rcube::Q($this->plugin->gettext('messagekeep')), 'keep');\n        $select_action->add(rcube::Q($this->plugin->gettext('rulestop')), 'stop');\n\n        $select_type = $action['type'];\n        if (in_array($action['type'], array('fileinto', 'redirect')) && $action['copy']) {\n            $select_type .= '_copy';\n        }\n\n        $out .= $select_action->show($select_type);\n        $out .= '</td>';\n\n        // actions target inputs\n        $out .= '<td class=\"rowtargets\">';\n\n        // force domain selection in redirect email input\n        $domains = (array) $this->rc->config->get('managesieve_domains');\n        if (!empty($domains)) {\n            sort($domains);\n\n            $domain_select = new html_select(array('name' => \"_action_target_domain[$id]\", 'id' => 'action_target_domain'.$id));\n            $domain_select->add(array_combine($domains, $domains));\n\n            if ($action['type'] == 'redirect') {\n                $parts = explode('@', $action['target']);\n                if (!empty($parts)) {\n                    $action['domain'] = array_pop($parts);\n                    $action['target'] = implode('@', $parts);\n                }\n            }\n        }\n\n        // redirect target\n        $out .= '<span id=\"redirect_target' . $id . '\" style=\"white-space:nowrap;'\n            . ' display:' . ($action['type'] == 'redirect' ? 'inline' : 'none') . '\">'\n            . '<input type=\"text\" name=\"_action_target['.$id.']\" id=\"action_target' .$id. '\"'\n            . ' value=\"' .($action['type'] == 'redirect' ? rcube::Q($action['target'], 'strict', false) : '') . '\"'\n            . (!empty($domains) ? ' size=\"20\"' : ' size=\"35\"')\n            . $this->error_class($id, 'action', 'target', 'action_target') .' />'\n            . (!empty($domains) ? ' @ ' . $domain_select->show($action['domain']) : '')\n            . '</span>';\n\n        // (e)reject target\n        $out .= '<textarea name=\"_action_target_area['.$id.']\" id=\"action_target_area' .$id. '\" '\n            .'rows=\"3\" cols=\"35\" '. $this->error_class($id, 'action', 'targetarea', 'action_target_area')\n            .'style=\"display:' .(in_array($action['type'], array('reject', 'ereject')) ? 'inline' : 'none') .'\">'\n            . (in_array($action['type'], array('reject', 'ereject')) ? rcube::Q($action['target'], 'strict', false) : '')\n            . \"</textarea>\\n\";\n\n        // vacation\n        $vsec      = in_array('vacation-seconds', $this->exts);\n        $auto_addr = $this->rc->config->get('managesieve_vacation_addresses_init');\n        $addresses = isset($action['addresses']) || !$auto_addr ? (array) $action['addresses'] : $this->user_emails();\n\n        $out .= '<div id=\"action_vacation' .$id.'\" style=\"display:' .($action['type']=='vacation' ? 'inline' : 'none') .'\">';\n        $out .= '<span class=\"label\">'. rcube::Q($this->plugin->gettext('vacationreason')) .'</span><br />'\n            .'<textarea name=\"_action_reason['.$id.']\" id=\"action_reason' .$id. '\" '\n            .'rows=\"3\" cols=\"35\" '. $this->error_class($id, 'action', 'reason', 'action_reason') . '>'\n            . rcube::Q($action['reason'], 'strict', false) . \"</textarea>\\n\";\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('vacationsubject')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_subject['.$id.']\" id=\"action_subject'.$id.'\" '\n            .'value=\"' . (is_array($action['subject']) ? rcube::Q(implode(', ', $action['subject']), 'strict', false) : $action['subject']) . '\" size=\"35\" '\n            . $this->error_class($id, 'action', 'subject', 'action_subject') .' />';\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('vacationfrom')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_from['.$id.']\" id=\"action_from'.$id.'\" '\n            .'value=\"' . $action['from'] . '\" size=\"35\" '\n            . $this->error_class($id, 'action', 'from', 'action_from') .' />';\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('vacationaddr')) . '</span><br />'\n            . $this->list_input($id, 'action_addresses', $addresses, true,\n                $this->error_class($id, 'action', 'addresses', 'action_addresses'), 30)\n            . html::a(array('href' => '#', 'onclick' => rcmail_output::JS_OBJECT_NAME . \".managesieve_vacation_addresses($id)\"),\n                rcube::Q($this->plugin->gettext('filladdresses')));\n        $out .= '<br /><span class=\"label\">' . rcube::Q($this->plugin->gettext($vsec ? 'vacationinterval' : 'vacationdays')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_interval['.$id.']\" id=\"action_interval'.$id.'\" '\n            .'value=\"' .rcube::Q(rcube_sieve_vacation::vacation_interval($action), 'strict', false) . '\" size=\"2\" '\n            . $this->error_class($id, 'action', 'interval', 'action_interval') .' />';\n        if ($vsec) {\n            $out .= '&nbsp;<label><input type=\"radio\" name=\"_action_interval_type['.$id.']\" value=\"days\"'\n                . (!isset($action['seconds']) ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->plugin->gettext('days').'</label>'\n                . '&nbsp;<label><input type=\"radio\" name=\"_action_interval_type['.$id.']\" value=\"seconds\"'\n                . (isset($action['seconds']) ? ' checked=\"checked\"' : '') .' class=\"radio\" />'.$this->plugin->gettext('seconds').'</label>';\n        }\n        $out .= '</div>';\n\n        // flags\n        $flags = array(\n            'read'      => '\\\\Seen',\n            'answered'  => '\\\\Answered',\n            'flagged'   => '\\\\Flagged',\n            'deleted'   => '\\\\Deleted',\n            'draft'     => '\\\\Draft',\n        );\n        $flags_target = (array)$action['target'];\n\n        $out .= '<div id=\"action_flags' .$id.'\" style=\"display:' \n            . (preg_match('/^(set|add|remove)flag$/', $action['type']) ? 'inline' : 'none') . '\"'\n            . $this->error_class($id, 'action', 'flags', 'action_flags') . '>';\n        foreach ($flags as $fidx => $flag) {\n            $out .= '<input type=\"checkbox\" name=\"_action_flags[' .$id .'][]\" value=\"' . $flag . '\"'\n                . (in_array_nocase($flag, $flags_target) ? 'checked=\"checked\"' : '') . ' />'\n                . rcube::Q($this->plugin->gettext('flag'.$fidx)) .'<br>';\n        }\n        $out .= '</div>';\n\n        // set variable\n        $set_modifiers = array(\n            'lower',\n            'upper',\n            'lowerfirst',\n            'upperfirst',\n            'quotewildcard',\n            'length'\n        );\n\n        $out .= '<div id=\"action_set' .$id.'\" style=\"display:' .($action['type']=='set' ? 'inline' : 'none') .'\">';\n        $out .= '<span class=\"label\">' .rcube::Q($this->plugin->gettext('setvarname')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_varname['.$id.']\" id=\"action_varname'.$id.'\" '\n            .'value=\"' . rcube::Q($action['name']) . '\" size=\"35\" '\n            . $this->error_class($id, 'action', 'name', 'action_varname') .' />';\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('setvarvalue')) . '</span><br />'\n            .'<input type=\"text\" name=\"_action_varvalue['.$id.']\" id=\"action_varvalue'.$id.'\" '\n            .'value=\"' . rcube::Q($action['value']) . '\" size=\"35\" '\n            . $this->error_class($id, 'action', 'value', 'action_varvalue') .' />';\n        $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('setvarmodifiers')) . '</span><br />';\n        foreach ($set_modifiers as $s_m) {\n            $s_m_id = 'action_varmods' . $id . $s_m;\n            $out .= sprintf('<input type=\"checkbox\" name=\"_action_varmods[%s][]\" value=\"%s\" id=\"%s\"%s />%s<br>',\n                $id, $s_m, $s_m_id,\n                (array_key_exists($s_m, (array)$action) && $action[$s_m] ? ' checked=\"checked\"' : ''),\n                rcube::Q($this->plugin->gettext('var' . $s_m)));\n        }\n        $out .= '</div>';\n\n        // notify\n        $notify_methods     = (array) $this->rc->config->get('managesieve_notify_methods');\n        $importance_options = $this->notify_importance_options;\n\n        if (empty($notify_methods)) {\n            $notify_methods = $this->notify_methods;\n        }\n\n        list($method, $target) = explode(':', $action['method'], 2);\n        $method = strtolower($method);\n\n        if ($method && !in_array($method, $notify_methods)) {\n            $notify_methods[] = $method;\n        }\n\n        $select_method = new html_select(array(\n            'name'  => \"_action_notifymethod[$id]\",\n            'id'    => \"_action_notifymethod$id\",\n            'class' => $this->error_class($id, 'action', 'method', 'action_notifymethod'),\n        ));\n        foreach ($notify_methods as $m_n) {\n            $select_method->add(rcube::Q($this->rc->text_exists('managesieve.notifymethod'.$m_n) ? $this->plugin->gettext('managesieve.notifymethod'.$m_n) : $m_n), $m_n);\n        }\n\n        $select_importance = new html_select(array(\n            'name'  => \"_action_notifyimportance[$id]\",\n            'id'    => \"_action_notifyimportance$id\",\n            'class' => $this->error_class($id, 'action', 'importance', 'action_notifyimportance')\n        ));\n        foreach ($importance_options as $io_v => $io_n) {\n            $select_importance->add(rcube::Q($this->plugin->gettext($io_n)), $io_v);\n        }\n\n        // @TODO: nice UI for mailto: (other methods too) URI parameters\n        $out .= '<div id=\"action_notify' .$id.'\" style=\"display:' .($action['type'] == 'notify' ? 'inline' : 'none') .'\">';\n        $out .= '<span class=\"label\">' .rcube::Q($this->plugin->gettext('notifytarget')) . '</span><br />'\n            . $select_method->show($method)\n            .'<input type=\"text\" name=\"_action_notifytarget['.$id.']\" id=\"action_notifytarget'.$id.'\" '\n            .'value=\"' . rcube::Q($target) . '\" size=\"25\" '\n            . $this->error_class($id, 'action', 'target', 'action_notifytarget') .' />';\n        $out .= '<br /><span class=\"label\">'. rcube::Q($this->plugin->gettext('notifymessage')) .'</span><br />'\n            .'<textarea name=\"_action_notifymessage['.$id.']\" id=\"action_notifymessage' .$id. '\" '\n            .'rows=\"3\" cols=\"35\" '. $this->error_class($id, 'action', 'message', 'action_notifymessage') . '>'\n            . rcube::Q($action['message'], 'strict', false) . \"</textarea>\\n\";\n        if (in_array('enotify', $this->exts)) {\n            $out .= '<br /><span class=\"label\">' .rcube::Q($this->plugin->gettext('notifyfrom')) . '</span><br />'\n                .'<input type=\"text\" name=\"_action_notifyfrom['.$id.']\" id=\"action_notifyfrom'.$id.'\" '\n                .'value=\"' . rcube::Q($action['from']) . '\" size=\"35\" '\n                . $this->error_class($id, 'action', 'from', 'action_notifyfrom') .' />';\n        }\n        $out .= '<br /><span class=\"label\">' . rcube::Q($this->plugin->gettext('notifyimportance')) . '</span><br />';\n        $out .= $select_importance->show($action['importance'] ? (int) $action['importance'] : 2);\n        $out .= '<div id=\"action_notifyoption_div' . $id  . '\">'\n            .'<span class=\"label\">' . rcube::Q($this->plugin->gettext('notifyoptions')) . '</span><br />'\n            .$this->list_input($id, 'action_notifyoption', (array)$action['options'], true,\n                $this->error_class($id, 'action', 'options', 'action_notifyoption'), 30) . '</div>';\n        $out .= '</div>';\n\n        // mailbox select\n        if ($action['type'] == 'fileinto') {\n            $mailbox = $this->mod_mailbox($action['target'], 'out');\n            // make sure non-existing (or unsubscribed) mailbox is listed (#1489956)\n            $additional = array($mailbox);\n        }\n        else {\n            $mailbox = '';\n        }\n\n        $select = $this->rc->folder_selector(array(\n            'realnames'  => false,\n            'maxlength'  => 100,\n            'id'         => 'action_mailbox' . $id,\n            'name'       => \"_action_mailbox[$id]\",\n            'style'      => 'display:'.(empty($action['type']) || $action['type'] == 'fileinto' ? 'inline' : 'none'),\n            'additional' => $additional,\n        ));\n        $out .= $select->show($mailbox);\n        $out .= '</td>';\n\n        // add/del buttons\n        $out .= '<td class=\"rowbuttons\">';\n        $out .= '<a href=\"#\" id=\"actionadd' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('add')). '\"\n            onclick=\"rcmail.managesieve_actionadd(' . $id .')\" class=\"button add\"></a>';\n        $out .= '<a href=\"#\" id=\"actiondel' . $id .'\" title=\"'. rcube::Q($this->plugin->gettext('del')). '\"\n            onclick=\"rcmail.managesieve_actiondel(' . $id .')\" class=\"button del' . ($rows_num<2 ? ' disabled' : '') .'\"></a>';\n        $out .= '</td>';\n\n        $out .= '</tr></table>';\n\n        $out .= $div ? \"</div>\\n\" : '';\n\n        return $out;\n    }\n\n    protected function genid()\n    {\n        return preg_replace('/[^0-9]/', '', microtime(true));\n    }\n\n    protected function strip_value($str, $allow_html = false, $trim = true)\n    {\n        if (is_array($str)) {\n            foreach ($str as $idx => $val) {\n                $val = $this->strip_value($val, $allow_html, $trim);\n\n                if ($val === '') {\n                    unset($str[$idx]);\n                }\n            }\n\n            return $str;\n        }\n\n        if (!$allow_html) {\n            $str = strip_tags($str);\n        }\n\n        return $trim ? trim($str) : $str;\n    }\n\n    protected function error_class($id, $type, $target, $elem_prefix='')\n    {\n        // TODO: tooltips\n        if (($type == 'test' && ($str = $this->errors['tests'][$id][$target])) ||\n            ($type == 'action' && ($str = $this->errors['actions'][$id][$target]))\n        ) {\n            $this->add_tip($elem_prefix.$id, $str, true);\n            return ' class=\"error\"';\n        }\n\n        return '';\n    }\n\n    protected function add_tip($id, $str, $error=false)\n    {\n        if ($error)\n            $str = html::span('sieve error', $str);\n\n        $this->tips[] = array($id, $str);\n    }\n\n    protected function print_tips()\n    {\n        if (empty($this->tips))\n            return;\n\n        $script = rcmail_output::JS_OBJECT_NAME.'.managesieve_tip_register('.json_encode($this->tips).');';\n        $this->rc->output->add_script($script, 'foot');\n    }\n\n    protected function list_input($id, $name, $value, $enabled, $class, $size=null)\n    {\n        $value = (array) $value;\n        $value = array_map(array('rcube', 'Q'), $value);\n        $value = implode(\"\\n\", $value);\n\n        return '<textarea data-type=\"list\" name=\"_' . $name . '['.$id.']\" id=\"' . $name.$id . '\"'\n            . ($enabled ? '' : ' disabled=\"disabled\"')\n            . ($size ? ' data-size=\"'.$size.'\"' : '')\n            . $class\n            . ' style=\"display:none\">' . $value . '</textarea>';\n    }\n\n    /**\n     * Validate input for date part elements\n     */\n    protected function validate_date_part($type, $value)\n    {\n        // we do simple validation of date/part format\n        switch ($type) {\n            case 'date': // yyyy-mm-dd\n                return preg_match('/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/', $value);\n            case 'iso8601':\n                return preg_match('/^[0-9: .,ZWT+-]+$/', $value);\n            case 'std11':\n                return preg_match('/^((Sun|Mon|Tue|Wed|Thu|Fri|Sat),\\s+)?[0-9]{1,2}\\s+'\n                    . '(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+[0-9]{2,4}\\s+'\n                    . '[0-9]{2}:[0-9]{2}(:[0-9]{2})?\\s+([+-]*[0-9]{4}|[A-Z]{1,3})$', $value);\n            case 'julian':\n                return preg_match('/^[0-9]+$/', $value);\n            case 'time': // hh:mm:ss\n                return preg_match('/^[0-9]{2}:[0-9]{2}:[0-9]{2}$/', $value);\n            case 'year':\n                return preg_match('/^[0-9]{4}$/', $value);\n            case 'month':\n                return preg_match('/^[0-9]{2}$/', $value) && $value > 0 && $value < 13;\n            case 'day':\n                return preg_match('/^[0-9]{2}$/', $value) && $value > 0 && $value < 32;\n            case 'hour':\n                return preg_match('/^[0-9]{2}$/', $value) && $value < 24;\n            case 'minute':\n                return preg_match('/^[0-9]{2}$/', $value) && $value < 60;\n            case 'second':\n                // According to RFC5260, seconds can be from 00 to 60\n                return preg_match('/^[0-9]{2}$/', $value) && $value < 61;\n            case 'weekday':\n                return preg_match('/^[0-9]$/', $value) && $value < 7;\n            case 'zone':\n                return preg_match('/^[+-][0-9]{4}$/', $value);\n        }\n    }\n\n    /**\n     * Converts mailbox name from/to UTF7-IMAP from/to internal Sieve encoding\n     * with delimiter replacement.\n     *\n     * @param string $mailbox Mailbox name\n     * @param string $mode    Conversion direction ('in'|'out')\n     *\n     * @return string Mailbox name\n     */\n    protected function mod_mailbox($mailbox, $mode = 'out')\n    {\n        $delimiter         = $_SESSION['imap_delimiter'];\n        $replace_delimiter = $this->rc->config->get('managesieve_replace_delimiter');\n        $mbox_encoding     = $this->rc->config->get('managesieve_mbox_encoding', 'UTF7-IMAP');\n\n        if ($mode == 'out') {\n            $mailbox = rcube_charset::convert($mailbox, $mbox_encoding, 'UTF7-IMAP');\n            if ($replace_delimiter && $replace_delimiter != $delimiter)\n                $mailbox = str_replace($replace_delimiter, $delimiter, $mailbox);\n        }\n        else {\n            $mailbox = rcube_charset::convert($mailbox, 'UTF7-IMAP', $mbox_encoding);\n            if ($replace_delimiter && $replace_delimiter != $delimiter)\n                $mailbox = str_replace($delimiter, $replace_delimiter, $mailbox);\n        }\n\n        return $mailbox;\n    }\n\n    /**\n     * List sieve scripts\n     *\n     * @return array Scripts list\n     */\n    public function list_scripts()\n    {\n        if ($this->list !== null) {\n            return $this->list;\n        }\n\n        $this->list = $this->sieve->get_scripts();\n\n        // Handle active script(s) and list of scripts according to Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            // Skip protected names\n            foreach ((array)$this->list as $idx => $name) {\n                $_name = strtoupper($name);\n                if ($_name == 'MASTER')\n                    $master_script = $name;\n                else if ($_name == 'MANAGEMENT')\n                    $management_script = $name;\n                else if($_name == 'USER')\n                    $user_script = $name;\n                else\n                    continue;\n\n                unset($this->list[$idx]);\n            }\n\n            // get active script(s), read USER script\n            if ($user_script) {\n                $extension = $this->rc->config->get('managesieve_filename_extension', '.sieve');\n                $filename_regex = '/'.preg_quote($extension, '/').'$/';\n                $_SESSION['managesieve_user_script'] = $user_script;\n\n                $this->sieve->load($user_script);\n\n                foreach ($this->sieve->script->as_array() as $rules) {\n                    foreach ($rules['actions'] as $action) {\n                        if ($action['type'] == 'include' && empty($action['global'])) {\n                            $name = preg_replace($filename_regex, '', $action['target']);\n                            // make sure the script exist\n                            if (in_array($name, $this->list)) {\n                                $this->active[] = $name;\n                            }\n                        }\n                    }\n                }\n            }\n            // create USER script if it doesn't exist\n            else {\n                $content = \"# USER Management Script\\n\"\n                    .\"#\\n\"\n                    .\"# This script includes the various active sieve scripts\\n\"\n                    .\"# it is AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY!\\n\"\n                    .\"#\\n\"\n                    .\"# For more information, see http://wiki.kolab.org/KEP:14#USER\\n\"\n                    .\"#\\n\";\n                if ($this->sieve->save_script('USER', $content)) {\n                    $_SESSION['managesieve_user_script'] = 'USER';\n                    if (empty($this->master_file))\n                        $this->sieve->activate('USER');\n                }\n            }\n        }\n        else if (!empty($this->list)) {\n            // Get active script name\n            if ($active = $this->sieve->get_active()) {\n                $this->active = array($active);\n            }\n\n            // Hide scripts from config\n            $exceptions = $this->rc->config->get('managesieve_filename_exceptions');\n            if (!empty($exceptions)) {\n                $this->list = array_diff($this->list, (array)$exceptions);\n            }\n        }\n\n        // reindex\n        if (!empty($this->list)) {\n            $this->list = array_values($this->list);\n        }\n\n        return $this->list;\n    }\n\n    /**\n     * Removes sieve script\n     *\n     * @param string $name Script name\n     *\n     * @return bool True on success, False on failure\n     */\n    public function remove_script($name)\n    {\n        $result = $this->sieve->remove($name);\n\n        // Kolab's KEP:14\n        if ($result && $this->rc->config->get('managesieve_kolab_master')) {\n            $this->deactivate_script($name);\n        }\n\n        return $result;\n    }\n\n    /**\n     * Activates sieve script\n     *\n     * @param string $name Script name\n     *\n     * @return bool True on success, False on failure\n     */\n    public function activate_script($name)\n    {\n        // Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            $extension   = $this->rc->config->get('managesieve_filename_extension', '.sieve');\n            $user_script = $_SESSION['managesieve_user_script'];\n\n            // if the script is not active...\n            if ($user_script && array_search($name, $this->active) === false) {\n                // ...rewrite USER file adding appropriate include command\n                if ($this->sieve->load($user_script)) {\n                    $script = $this->sieve->script->as_array();\n                    $list   = array();\n                    $regexp = '/' . preg_quote($extension, '/') . '$/';\n\n                    // Create new include entry\n                    $rule = array(\n                        'actions' => array(\n                            0 => array(\n                                'target'   => $name.$extension,\n                                'type'     => 'include',\n                                'personal' => true,\n                    )));\n\n                    // get all active scripts for sorting\n                    foreach ($script as $rid => $rules) {\n                        foreach ($rules['actions'] as $action) {\n                            if ($action['type'] == 'include' && empty($action['global'])) {\n                                $target = $extension ? preg_replace($regexp, '', $action['target']) : $action['target'];\n                                $list[] = $target;\n                            }\n                        }\n                    }\n                    $list[] = $name;\n\n                    // Sort and find current script position\n                    asort($list, SORT_LOCALE_STRING);\n                    $list = array_values($list);\n                    $index = array_search($name, $list);\n\n                    // add rule at the end of the script\n                    if ($index === false || $index == count($list)-1) {\n                        $this->sieve->script->add_rule($rule);\n                    }\n                    // add rule at index position\n                    else {\n                        $script2 = array();\n                        foreach ($script as $rid => $rules) {\n                            if ($rid == $index) {\n                                $script2[] = $rule;\n                            }\n                            $script2[] = $rules;\n                        }\n                        $this->sieve->script->content = $script2;\n                    }\n\n                    $result = $this->sieve->save();\n                    if ($result) {\n                        $this->active[] = $name;\n                    }\n                }\n            }\n        }\n        else {\n            $result = $this->sieve->activate($name);\n            if ($result)\n                $this->active = array($name);\n        }\n\n        return $result;\n    }\n\n    /**\n     * Deactivates sieve script\n     *\n     * @param string $name Script name\n     *\n     * @return bool True on success, False on failure\n     */\n    public function deactivate_script($name)\n    {\n        // Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            $extension   = $this->rc->config->get('managesieve_filename_extension', '.sieve');\n            $user_script = $_SESSION['managesieve_user_script'];\n\n            // if the script is active...\n            if ($user_script && ($key = array_search($name, $this->active)) !== false) {\n                // ...rewrite USER file removing appropriate include command\n                if ($this->sieve->load($user_script)) {\n                    $script = $this->sieve->script->as_array();\n                    $name   = $name.$extension;\n\n                    foreach ($script as $rid => $rules) {\n                        foreach ($rules['actions'] as $action) {\n                            if ($action['type'] == 'include' && empty($action['global'])\n                                && $action['target'] == $name\n                            ) {\n                                break 2;\n                            }\n                        }\n                    }\n\n                    // Entry found\n                    if ($rid < count($script)) {\n                        $this->sieve->script->delete_rule($rid);\n                        $result = $this->sieve->save();\n                        if ($result) {\n                            unset($this->active[$key]);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            $result = $this->sieve->deactivate();\n            if ($result)\n                $this->active = array();\n        }\n\n        return $result;\n    }\n\n    /**\n     * Saves current script (adding some variables)\n     */\n    public function save_script($name = null)\n    {\n        // Kolab's KEP:14\n        if ($this->rc->config->get('managesieve_kolab_master')) {\n            $this->sieve->script->set_var('EDITOR', self::PROGNAME);\n            $this->sieve->script->set_var('EDITOR_VERSION', self::VERSION);\n        }\n\n        return $this->sieve->save($name);\n    }\n\n    /**\n     * Returns list of rules from the current script\n     *\n     * @return array List of rules\n     */\n    public function list_rules()\n    {\n        $result = array();\n        $i      = 1;\n\n        foreach ($this->script as $idx => $filter) {\n            if (empty($filter['actions'])) {\n                continue;\n            }\n            $fname = $filter['name'] ?: \"#$i\";\n            $result[] = array(\n                'id'    => $idx,\n                'name'  => $fname,\n                'class' => $filter['disabled'] ? 'disabled' : '',\n            );\n            $i++;\n        }\n\n        return $result;\n    }\n\n    /**\n     * Initializes internal script data\n     */\n    protected function init_script()\n    {\n        if (!$this->sieve->script) {\n            return;\n        }\n\n        $this->script = $this->sieve->script->as_array();\n\n        $headers    = array();\n        $exceptions = array('date', 'currentdate', 'size', 'body');\n\n        // find common headers used in script, will be added to the list\n        // of available (predefined) headers (#1489271)\n        foreach ($this->script as $rule) {\n            foreach ((array) $rule['tests'] as $test) {\n                if ($test['test'] == 'header') {\n                    foreach ((array) $test['arg1'] as $header) {\n                        $lc_header = strtolower($header);\n\n                        // skip special names to not confuse UI\n                        if (in_array($lc_header, $exceptions)) {\n                            continue;\n                        }\n\n                        if (!isset($this->headers[$lc_header]) && !isset($headers[$lc_header])) {\n                            $headers[$lc_header] = $header;\n                        }\n                    }\n                }\n            }\n        }\n\n        ksort($headers);\n\n        $this->headers += $headers;\n    }\n\n    /**\n     * Get all e-mail addresses of the user\n     */\n    protected function user_emails()\n    {\n        $addresses = $this->rc->user->list_emails();\n\n        foreach ($addresses as $idx => $email) {\n            $addresses[$idx] = $email['email'];\n        }\n\n        $addresses = array_unique($addresses);\n        sort($addresses);\n\n        return $addresses;\n    }\n}\n", "/**\n * (Manage)Sieve Filters plugin\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (c) 2012-2014, The Roundcube Dev Team\n *\n * The JavaScript code in this page is free software: you can redistribute it\n * and/or modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, either version 3 of\n * the License, or (at your option) any later version.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n */\n\nif (window.rcmail) {\n  rcmail.addEventListener('init', function(evt) {\n    // add managesieve-create command to message_commands array,\n    // so it's state will be updated on message selection/unselection\n    if (rcmail.env.task == 'mail') {\n      if (rcmail.env.action != 'show')\n        rcmail.env.message_commands.push('managesieve-create');\n      else\n        rcmail.enable_command('managesieve-create', true);\n    }\n\n    if (rcmail.env.task == 'mail' || rcmail.env.action.startsWith('plugin.managesieve')) {\n      // Create layer for form tips\n      if (!rcmail.env.framed) {\n        rcmail.env.ms_tip_layer = $('<div id=\"managesieve-tip\" class=\"popupmenu\"></div>');\n        rcmail.env.ms_tip_layer.appendTo(document.body);\n      }\n    }\n\n    // register commands\n    rcmail.register_command('plugin.managesieve-save', function() { rcmail.managesieve_save() });\n    rcmail.register_command('plugin.managesieve-act', function() { rcmail.managesieve_act() });\n    rcmail.register_command('plugin.managesieve-add', function() { rcmail.managesieve_add() });\n    rcmail.register_command('plugin.managesieve-del', function() { rcmail.managesieve_del() });\n    rcmail.register_command('plugin.managesieve-move', function() { rcmail.managesieve_move() });\n    rcmail.register_command('plugin.managesieve-setadd', function() { rcmail.managesieve_setadd() });\n    rcmail.register_command('plugin.managesieve-setdel', function() { rcmail.managesieve_setdel() });\n    rcmail.register_command('plugin.managesieve-setact', function() { rcmail.managesieve_setact() });\n    rcmail.register_command('plugin.managesieve-setget', function() { rcmail.managesieve_setget() });\n\n    if (rcmail.env.action.startsWith('plugin.managesieve')) {\n      if (rcmail.gui_objects.sieveform) {\n        rcmail.enable_command('plugin.managesieve-save', true);\n        sieve_form_init();\n      }\n      else {\n        rcmail.enable_command('plugin.managesieve-add', 'plugin.managesieve-setadd', !rcmail.env.sieveconnerror);\n      }\n\n      var setcnt, set = rcmail.env.currentset;\n\n      if (rcmail.gui_objects.filterslist) {\n        rcmail.filters_list = new rcube_list_widget(rcmail.gui_objects.filterslist,\n          {multiselect:false, draggable:true, keyboard:true});\n\n        rcmail.filters_list\n          .addEventListener('select', function(e) { rcmail.managesieve_select(e); })\n          .addEventListener('dragstart', function(e) { rcmail.managesieve_dragstart(e); })\n          .addEventListener('dragend', function(e) { rcmail.managesieve_dragend(e); })\n          .addEventListener('initrow', function(row) {\n            row.obj.onmouseover = function() { rcmail.managesieve_focus_filter(row); };\n            row.obj.onmouseout = function() { rcmail.managesieve_unfocus_filter(row); };\n          })\n          .init();\n      }\n\n      if (rcmail.gui_objects.filtersetslist) {\n        rcmail.filtersets_list = new rcube_list_widget(rcmail.gui_objects.filtersetslist,\n          {multiselect:false, draggable:false, keyboard:true});\n\n        rcmail.filtersets_list.init().focus();\n\n        if (set != null) {\n          set = rcmail.managesieve_setid(set);\n          rcmail.filtersets_list.select(set);\n        }\n\n        // attach select event after initial record was selected\n        rcmail.filtersets_list.addEventListener('select', function(e) { rcmail.managesieve_setselect(e); });\n\n        setcnt = rcmail.filtersets_list.rowcount;\n        rcmail.enable_command('plugin.managesieve-set', true);\n        rcmail.enable_command('plugin.managesieve-setact', 'plugin.managesieve-setget', setcnt);\n        rcmail.enable_command('plugin.managesieve-setdel', setcnt > 1);\n\n        // Fix dragging filters over sets list\n        $('tr', rcmail.gui_objects.filtersetslist).each(function (i, e) { rcmail.managesieve_fixdragend(e); });\n      }\n    }\n\n    if (rcmail.gui_objects.sieveform && rcmail.env.rule_disabled)\n      $('#disabled').attr('checked', true);\n  });\n};\n\n/*********************************************************/\n/*********       Managesieve UI methods          *********/\n/*********************************************************/\n\nrcube_webmail.prototype.managesieve_add = function()\n{\n  this.load_managesieveframe();\n  this.filters_list.clear_selection();\n};\n\nrcube_webmail.prototype.managesieve_del = function()\n{\n  var id = this.filters_list.get_single_selection();\n  if (confirm(this.get_label('managesieve.filterdeleteconfirm'))) {\n    var lock = this.set_busy(true, 'loading');\n    this.http_post('plugin.managesieve-action',\n      '_act=delete&_fid='+this.filters_list.rows[id].uid, lock);\n  }\n};\n\nrcube_webmail.prototype.managesieve_act = function()\n{\n  var id = this.filters_list.get_single_selection(),\n    lock = this.set_busy(true, 'loading');\n\n  this.http_post('plugin.managesieve-action',\n    '_act=act&_fid='+this.filters_list.rows[id].uid, lock);\n};\n\n// Filter selection\nrcube_webmail.prototype.managesieve_select = function(list)\n{\n  var id = list.get_single_selection();\n  if (id != null)\n    this.load_managesieveframe(list.rows[id].uid);\n};\n\n// Set selection\nrcube_webmail.prototype.managesieve_setselect = function(list)\n{\n  this.show_contentframe(false);\n  this.filters_list.clear(true);\n  this.enable_command('plugin.managesieve-setdel', list.rowcount > 1);\n  this.enable_command('plugin.managesieve-setact', 'plugin.managesieve-setget', true);\n\n  var id = list.get_single_selection();\n  if (id != null)\n    this.managesieve_list(this.env.filtersets[id]);\n};\n\nrcube_webmail.prototype.managesieve_rowid = function(id)\n{\n  var i, rows = this.filters_list.rows;\n\n  for (i in rows)\n    if (rows[i] != null && rows[i].uid == id)\n      return i;\n};\n\n// Returns set's identifier\nrcube_webmail.prototype.managesieve_setid = function(name)\n{\n  for (var i in this.env.filtersets)\n    if (this.env.filtersets[i] == name)\n      return i;\n};\n\n// Filters listing request\nrcube_webmail.prototype.managesieve_list = function(script)\n{\n  var lock = this.set_busy(true, 'loading');\n\n  this.http_post('plugin.managesieve-action', '_act=list&_set='+urlencode(script), lock);\n};\n\n// Script download request\nrcube_webmail.prototype.managesieve_setget = function()\n{\n  var id = this.filtersets_list.get_single_selection(),\n    script = this.env.filtersets[id];\n\n  this.goto_url('plugin.managesieve-action', {_act: 'setget', _set: script}, false, true);\n};\n\n// Set activate/deactivate request\nrcube_webmail.prototype.managesieve_setact = function()\n{\n  var id = this.filtersets_list.get_single_selection(),\n   lock = this.set_busy(true, 'loading'),\n    script = this.env.filtersets[id],\n    action = $('#rcmrow'+id).hasClass('disabled') ? 'setact' : 'deact';\n\n  this.http_post('plugin.managesieve-action', '_act='+action+'&_set='+urlencode(script), lock);\n};\n\n// Set delete request\nrcube_webmail.prototype.managesieve_setdel = function()\n{\n  if (!confirm(this.get_label('managesieve.setdeleteconfirm')))\n    return false;\n\n  var id = this.filtersets_list.get_single_selection(),\n    lock = this.set_busy(true, 'loading'),\n    script = this.env.filtersets[id];\n\n  this.http_post('plugin.managesieve-action', '_act=setdel&_set='+urlencode(script), lock);\n};\n\n// Set add request\nrcube_webmail.prototype.managesieve_setadd = function()\n{\n  this.filters_list.clear_selection();\n  this.enable_command('plugin.managesieve-act', 'plugin.managesieve-del', false);\n\n  if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n    var lock = this.set_busy(true, 'loading');\n    target = window.frames[this.env.contentframe];\n    target.location.href = this.env.comm_path+'&_action=plugin.managesieve-action&_framed=1&_newset=1&_unlock='+lock;\n  }\n};\n\nrcube_webmail.prototype.managesieve_updatelist = function(action, o)\n{\n  this.set_busy(true);\n\n  switch (action) {\n    // Delete filter row\n    case 'del':\n      var id = o.id, list = this.filters_list;\n\n      list.remove_row(this.managesieve_rowid(o.id));\n      list.clear_selection();\n      this.show_contentframe(false);\n      this.enable_command('plugin.managesieve-del', 'plugin.managesieve-act', false);\n\n      // filter identifiers changed, fix the list\n      $('tr', this.filters_list.list).each(function() {\n        // remove hidden (deleted) rows\n        if (this.style.display == 'none') {\n          $(this).detach();\n          return;\n        }\n\n        var rowid = this.id.substr(6);\n\n        // remove all attached events\n        $(this).off();\n\n        // update row id\n        if (rowid > id) {\n          this.uid = rowid - 1;\n          $(this).attr('id', 'rcmrow' + this.uid);\n        }\n      });\n      list.init();\n\n      break;\n\n    // Update filter row\n    case 'update':\n      var i, row = $('#rcmrow'+this.managesieve_rowid(o.id));\n\n      if (o.name)\n        $('td', row).text(o.name);\n      if (o.disabled)\n        row.addClass('disabled');\n      else\n        row.removeClass('disabled');\n\n      $('#disabled', $('iframe').contents()).prop('checked', o.disabled);\n\n      break;\n\n    // Add filter row to the list\n    case 'add':\n      var list = this.filters_list,\n        row = $('<tr><td class=\"name\"></td></tr>');\n\n      $('td', row).text(o.name);\n      row.attr('id', 'rcmrow'+o.id);\n      if (o.disabled)\n        row.addClass('disabled');\n\n      list.insert_row(row.get(0));\n      list.highlight_row(o.id);\n\n      this.enable_command('plugin.managesieve-del', 'plugin.managesieve-act', true);\n\n      break;\n\n    // Filling rules list\n    case 'list':\n      var i, tr, td, el, list = this.filters_list;\n\n      if (o.clear)\n        list.clear();\n\n      for (i in o.list) {\n        el = o.list[i];\n        tr = document.createElement('TR');\n        td = document.createElement('TD');\n\n        $(td).text(el.name);\n        td.className = 'name';\n        tr.id = 'rcmrow' + el.id;\n        if (el['class'])\n            tr.className = el['class'];\n        tr.appendChild(td);\n\n        list.insert_row(tr);\n      }\n\n      if (o.set)\n        list.highlight_row(o.set);\n      else\n        this.enable_command('plugin.managesieve-del', 'plugin.managesieve-act', false);\n\n      break;\n\n    // Sactivate/deactivate set\n    case 'setact':\n      var id = this.managesieve_setid(o.name), row = $('#rcmrow' + id);\n      if (o.active) {\n        if (o.all)\n          $('tr', this.gui_objects.filtersetslist).addClass('disabled');\n        row.removeClass('disabled');\n      }\n      else\n        row.addClass('disabled');\n\n      break;\n\n    // Delete set row\n    case 'setdel':\n      var id = this.managesieve_setid(o.name);\n\n      this.filtersets_list.remove_row(id);\n      this.filters_list.clear();\n      this.show_contentframe(false);\n      this.enable_command('plugin.managesieve-setdel', 'plugin.managesieve-setact', 'plugin.managesieve-setget', false);\n\n      delete this.env.filtersets[id];\n\n      break;\n\n    // Create set row\n    case 'setadd':\n      var id = 'S' + new Date().getTime(),\n        list = this.filtersets_list,\n        row = $('<tr class=\"disabled\"><td class=\"name\"></td></tr>');\n\n      $('td', row).text(o.name);\n      row.attr('id', 'rcmrow'+id);\n\n      this.env.filtersets[id] = o.name;\n      list.insert_row(row.get(0));\n\n      // move row into its position on the list\n      if (o.index != list.rowcount-1) {\n        row.detach();\n        var elem = $('tr:visible', list.list).get(o.index);\n        row.insertBefore(elem);\n      }\n\n      list.select(id);\n\n      // Fix dragging filters over sets list\n      this.managesieve_fixdragend(row);\n\n      break;\n  }\n\n  this.set_busy(false);\n};\n\n// load filter frame\nrcube_webmail.prototype.load_managesieveframe = function(id)\n{\n  var has_id = typeof(id) != 'undefined' && id != null;\n  this.enable_command('plugin.managesieve-act', 'plugin.managesieve-del', has_id);\n\n  if (this.env.contentframe && window.frames && window.frames[this.env.contentframe]) {\n    target = window.frames[this.env.contentframe];\n    var msgid = this.set_busy(true, 'loading');\n    target.location.href = this.env.comm_path+'&_action=plugin.managesieve-action&_framed=1'\n      +(has_id ? '&_fid='+id : '')+'&_unlock='+msgid;\n  }\n};\n\n// load filter frame\nrcube_webmail.prototype.managesieve_dragstart = function(list)\n{\n  var id = this.filters_list.get_single_selection();\n\n  this.drag_active = true;\n  this.drag_filter = id;\n};\n\nrcube_webmail.prototype.managesieve_dragend = function(e)\n{\n  if (this.drag_active) {\n    if (this.drag_filter_target) {\n      var lock = this.set_busy(true, 'loading');\n\n      this.show_contentframe(false);\n      this.http_post('plugin.managesieve-action', '_act=move&_fid='+this.drag_filter\n        +'&_to='+this.drag_filter_target, lock);\n    }\n    this.drag_active = false;\n  }\n};\n\n// Fixes filters dragging over sets list\n// @TODO: to be removed after implementing copying filters\nrcube_webmail.prototype.managesieve_fixdragend = function(elem)\n{\n  var p = this;\n  $(elem).on('mouseup' + ((bw.iphone || bw.ipad) ? ' touchend' : ''), function(e) {\n    if (p.drag_active)\n      p.filters_list.drag_mouse_up(e);\n  });\n};\n\nrcube_webmail.prototype.managesieve_focus_filter = function(row)\n{\n  var id = row.id.replace(/^rcmrow/, '');\n  if (this.drag_active && id != this.drag_filter) {\n    this.drag_filter_target = id;\n    $(row.obj).addClass(id < this.drag_filter ? 'filtermoveup' : 'filtermovedown');\n  }\n};\n\nrcube_webmail.prototype.managesieve_unfocus_filter = function(row)\n{\n  if (this.drag_active) {\n    $(row.obj).removeClass('filtermoveup filtermovedown');\n    this.drag_filter_target = null;\n  }\n};\n\n/*********************************************************/\n/*********          Filter Form methods          *********/\n/*********************************************************/\n\n// Form submition\nrcube_webmail.prototype.managesieve_save = function()\n{\n  if (this.env.action == 'plugin.managesieve-vacation') {\n    var data = $(this.gui_objects.sieveform).serialize();\n    this.http_post('plugin.managesieve-vacation', data, this.display_message(this.get_label('managesieve.vacation.saving'), 'loading'));\n    return;\n  }\n\n  if (parent.rcmail && parent.rcmail.filters_list && this.gui_objects.sieveform.name != 'filtersetform') {\n    var id = parent.rcmail.filters_list.get_single_selection();\n    if (id != null)\n      this.gui_objects.sieveform.elements['_fid'].value = parent.rcmail.filters_list.rows[id].uid;\n  }\n  this.gui_objects.sieveform.submit();\n};\n\n// Operations on filters form\nrcube_webmail.prototype.managesieve_ruleadd = function(id)\n{\n  this.http_post('plugin.managesieve-action', '_act=ruleadd&_rid='+id);\n};\n\nrcube_webmail.prototype.managesieve_rulefill = function(content, id, after)\n{\n  if (content != '') {\n    // create new element\n    var div = document.getElementById('rules'),\n      row = document.createElement('div');\n\n    this.managesieve_insertrow(div, row, after);\n    // fill row after inserting (for IE)\n    row.setAttribute('id', 'rulerow'+id);\n    row.className = 'rulerow';\n    row.innerHTML = content;\n\n    // initialize smart list inputs\n    $('textarea[data-type=\"list\"]', row).each(function() {\n      smart_field_init(this);\n    });\n\n    this.managesieve_formbuttons(div);\n  }\n};\n\nrcube_webmail.prototype.managesieve_ruledel = function(id)\n{\n  if ($('#ruledel'+id).hasClass('disabled'))\n    return;\n\n  if (confirm(this.get_label('managesieve.ruledeleteconfirm'))) {\n    var row = document.getElementById('rulerow'+id);\n    row.parentNode.removeChild(row);\n    this.managesieve_formbuttons(document.getElementById('rules'));\n  }\n};\n\nrcube_webmail.prototype.managesieve_actionadd = function(id)\n{\n  this.http_post('plugin.managesieve-action', '_act=actionadd&_aid='+id);\n};\n\nrcube_webmail.prototype.managesieve_actionfill = function(content, id, after)\n{\n  if (content != '') {\n    var div = document.getElementById('actions'),\n      row = document.createElement('div');\n\n    this.managesieve_insertrow(div, row, after);\n    // fill row after inserting (for IE)\n    row.className = 'actionrow';\n    row.setAttribute('id', 'actionrow'+id);\n    row.innerHTML = content;\n\n    // initialize smart list inputs\n    $('textarea[data-type=\"list\"]', row).each(function() {\n      smart_field_init(this);\n    });\n\n    this.managesieve_formbuttons(div);\n  }\n};\n\nrcube_webmail.prototype.managesieve_actiondel = function(id)\n{\n  if ($('#actiondel'+id).hasClass('disabled'))\n    return;\n\n  if (confirm(this.get_label('managesieve.actiondeleteconfirm'))) {\n    var row = document.getElementById('actionrow'+id);\n    row.parentNode.removeChild(row);\n    this.managesieve_formbuttons(document.getElementById('actions'));\n  }\n};\n\n// insert rule/action row in specified place on the list\nrcube_webmail.prototype.managesieve_insertrow = function(div, row, after)\n{\n  for (var i=0; i<div.childNodes.length; i++) {\n    if (div.childNodes[i].id == (div.id == 'rules' ? 'rulerow' : 'actionrow')  + after)\n      break;\n  }\n\n  if (div.childNodes[i+1])\n    div.insertBefore(row, div.childNodes[i+1]);\n  else\n    div.appendChild(row);\n};\n\n// update Delete buttons status\nrcube_webmail.prototype.managesieve_formbuttons = function(div)\n{\n  var i, button, buttons = [];\n\n  // count and get buttons\n  for (i=0; i<div.childNodes.length; i++) {\n    if (div.id == 'rules' && div.childNodes[i].id) {\n      if (/rulerow/.test(div.childNodes[i].id))\n        buttons.push('ruledel' + div.childNodes[i].id.replace(/rulerow/, ''));\n    }\n    else if (div.childNodes[i].id) {\n      if (/actionrow/.test(div.childNodes[i].id))\n        buttons.push( 'actiondel' + div.childNodes[i].id.replace(/actionrow/, ''));\n    }\n  }\n\n  for (i=0; i<buttons.length; i++) {\n    button = document.getElementById(buttons[i]);\n    if (i>0 || buttons.length>1) {\n      $(button).removeClass('disabled');\n    }\n    else {\n      $(button).addClass('disabled');\n    }\n  }\n};\n\n// update vacation addresses field with user identities\nrcube_webmail.prototype.managesieve_vacation_addresses = function(id)\n{\n  var lock = this.set_busy(true, 'loading');\n  this.http_post('plugin.managesieve-action', {_act: 'addresses', _aid: id}, lock);\n};\n\n// update vacation addresses field with user identities\nrcube_webmail.prototype.managesieve_vacation_addresses_update = function(id, addresses)\n{\n  var field = $('#vacation_addresses,#action_addresses' + (id || ''));\n  smart_field_reset(field.get(0), addresses);\n};\n\nfunction rule_header_select(id)\n{\n  var obj = document.getElementById('header' + id),\n    size = document.getElementById('rule_size' + id),\n    op = document.getElementById('rule_op' + id),\n    header = document.getElementById('custom_header' + id + '_list'),\n    mod = document.getElementById('rule_mod' + id),\n    trans = document.getElementById('rule_trans' + id),\n    comp = document.getElementById('rule_comp' + id),\n    datepart = document.getElementById('rule_date_part' + id),\n    dateheader = document.getElementById('rule_date_header_div' + id),\n    h = obj.value;\n\n  if (h == 'size') {\n    size.style.display = 'inline';\n    $.each([op, header, mod, trans, comp], function() { this.style.display = 'none'; });\n  }\n  else {\n    header.style.display = h != '...' ? 'none' : 'inline-block';\n    size.style.display = 'none';\n    op.style.display = 'inline';\n    comp.style.display = '';\n    mod.style.display = h == 'body' || h == 'currentdate' || h == 'date' ? 'none' : 'block';\n    trans.style.display = h == 'body' ? 'block' : 'none';\n  }\n\n  if (datepart)\n    datepart.style.display = h == 'currentdate' || h == 'date' ? 'inline' : 'none';\n  if (dateheader)\n    dateheader.style.display = h == 'date' ? '' : 'none';\n\n  rule_op_select(op, id, h);\n  rule_mod_select(id, h);\n  obj.style.width = h == '...' ? '40px' : '';\n};\n\nfunction rule_op_select(obj, id, header)\n{\n  var target = document.getElementById('rule_target' + id + '_list');\n\n  if (!header)\n    header = document.getElementById('header' + id).value;\n\n  target.style.display = obj.value == 'exists' || obj.value == 'notexists' || header == 'size' ? 'none' : 'inline-block';\n};\n\nfunction rule_trans_select(id)\n{\n  var obj = document.getElementById('rule_trans_op' + id),\n    target = document.getElementById('rule_trans_type' + id);\n\n  target.style.display = obj.value != 'content' ? 'none' : 'inline';\n};\n\nfunction rule_mod_select(id, header)\n{\n  var obj = document.getElementById('rule_mod_op' + id),\n    target = document.getElementById('rule_mod_type' + id),\n    index = document.getElementById('rule_index_div' + id);\n\n  if (!header)\n    header = document.getElementById('header' + id).value;\n\n  target.style.display = obj.value != 'address' && obj.value != 'envelope' ? 'none' : 'inline';\n\n  if (index)\n    index.style.display = header != 'body' && header != 'currentdate' && header != 'size' && obj.value != 'envelope'  ? '' : 'none';\n};\n\nfunction rule_join_radio(value)\n{\n  $('#rules').css('display', value == 'any' ? 'none' : 'block');\n};\n\nfunction rule_adv_switch(id, elem)\n{\n  var elem = $(elem), enabled = elem.hasClass('hide'), adv = $('#rule_advanced'+id);\n\n  if (enabled) {\n    adv.hide();\n    elem.removeClass('hide').addClass('show');\n  }\n  else {\n    adv.show();\n    elem.removeClass('show').addClass('hide');\n  }\n}\n\nfunction action_type_select(id)\n{\n  var obj = document.getElementById('action_type' + id),\n    v = obj.value, enabled = {},\n    elems = {\n      mailbox: document.getElementById('action_mailbox' + id),\n      target: document.getElementById('redirect_target' + id),\n      target_area: document.getElementById('action_target_area' + id),\n      flags: document.getElementById('action_flags' + id),\n      vacation: document.getElementById('action_vacation' + id),\n      set: document.getElementById('action_set' + id),\n      notify: document.getElementById('action_notify' + id)\n    };\n\n  if (v == 'fileinto' || v == 'fileinto_copy') {\n    enabled.mailbox = 1;\n  }\n  else if (v == 'redirect' || v == 'redirect_copy') {\n    enabled.target = 1;\n  }\n  else if (v.match(/^reject|ereject$/)) {\n    enabled.target_area = 1;\n  }\n  else if (v.match(/^(add|set|remove)flag$/)) {\n    enabled.flags = 1;\n  }\n  else if (v == 'vacation') {\n    enabled.vacation = 1;\n  }\n  else if (v == 'set') {\n    enabled.set = 1;\n  }\n  else if (v == 'notify') {\n    enabled.notify = 1;\n  }\n\n  for (var x in elems) {\n    elems[x].style.display = !enabled[x] ? 'none' : 'inline';\n  }\n};\n\nfunction vacation_action_select()\n{\n  var selected = $('#vacation_action').val();\n\n  $('#action_target_span')[selected == 'discard' || selected == 'keep' ? 'hide' : 'show']();\n};\n\n// Inititalizes smart list input\nfunction smart_field_init(field)\n{\n  var id = field.id + '_list',\n    area = $('<span class=\"listarea\"></span>'),\n    list = field.value ? field.value.split(\"\\n\") : [''];\n\n  if ($('#'+id).length)\n    return;\n\n  // add input rows\n  $.each(list, function(i, v) {\n    area.append(smart_field_row(v, field.name, i, $(field).data('size')));\n  });\n\n  area.attr('id', id);\n  field = $(field);\n\n  if (field.attr('disabled'))\n    area.hide();\n  // disable the original field anyway, we don't want it in POST\n  else\n    field.prop('disabled', true);\n\n  field.after(area);\n\n  if (field.hasClass('error')) {\n    area.addClass('error');\n    rcmail.managesieve_tip_register([[id, field.data('tip')]]);\n  }\n};\n\nfunction smart_field_row(value, name, idx, size)\n{\n  // build row element content\n  var input, content = '<span class=\"listelement\">'\n      + '<span class=\"reset\"></span><input type=\"text\"></span>',\n    elem = $(content),\n    attrs = {value: value, name: name + '[]'};\n\n  if (size)\n    attrs.size = size;\n\n  input = $('input', elem).attr(attrs).keydown(function(e) {\n    var input = $(this);\n\n    // element creation event (on Enter)\n    if (e.which == 13) {\n      var name = input.attr('name').replace(/\\[\\]$/, ''),\n        dt = (new Date()).getTime(),\n        elem = smart_field_row('', name, dt, size);\n\n      input.parent().after(elem);\n      $('input', elem).focus();\n    }\n    // backspace or delete: remove input, focus previous one\n    else if ((e.which == 8 || e.which == 46) && input.val() == '') {\n\n      var parent = input.parent(), siblings = parent.parent().children();\n\n      if (siblings.length > 1) {\n        if (parent.prev().length)\n          parent.prev().children('input').focus();\n        else\n          parent.next().children('input').focus();\n\n        parent.remove();\n        return false;\n      }\n    }\n  });\n\n  // element deletion event\n  $('span[class=\"reset\"]', elem).click(function() {\n    var span = $(this.parentNode);\n\n    if (span.parent().children().length > 1)\n      span.remove();\n    else\n      $('input', span).val('').focus();\n  });\n\n  return elem;\n}\n\n// Reset and fill the smart list input with new data\nfunction smart_field_reset(field, data)\n{\n  var id = field.id + '_list',\n    list = data.length ? data : [''];\n    area = $('#' + id);\n\n  area.empty();\n\n  // add input rows\n  $.each(list, function(i, v) {\n    area.append(smart_field_row(v, field.name, i, $(field).data('size')));\n  });\n}\n\n// Register onmouse(leave/enter) events for tips on specified form element\nrcube_webmail.prototype.managesieve_tip_register = function(tips)\n{\n  var n, framed = parent.rcmail,\n    tip = framed ? parent.rcmail.env.ms_tip_layer : rcmail.env.ms_tip_layer;\n\n  for (n in tips) {\n    $('#'+tips[n][0])\n      .data('tip', tips[n][1])\n      .mouseleave(function(e) { tip.hide(); })\n      .mouseenter(function(e) {\n        var elem = $(this),\n          offset = elem.offset(),\n          left = offset.left,\n          top = offset.top - 12,\n          minwidth = elem.width();\n\n        if (framed) {\n          offset = $((rcmail.env.task == 'mail'  ? '#sievefilterform > iframe' : '#filter-box'), parent.document).offset();\n          top  += offset.top;\n          left += offset.left;\n        }\n\n        tip.html(elem.data('tip'));\n        top -= tip.height();\n\n        tip.css({left: left, top: top, minWidth: (minwidth-2) + 'px'}).show();\n      });\n  }\n};\n\n// format time string\nfunction sieve_formattime(hour, minutes)\n{\n  var i, c, h, time = '', format = rcmail.env.time_format || 'H:i';\n\n  for (i=0; i<format.length; i++) {\n    c = format.charAt(i);\n    switch (c) {\n      case 'a': time += hour > 12 ? 'am' : 'pm'; break;\n      case 'A': time += hour > 12 ? 'AM' : 'PM'; break;\n      case 'g':\n      case 'h':\n        h = hour == 0 ? 12 : hour > 12 ? hour - 12 : hour;\n        time += (c == 'h' && hour < 10 ? '0' : '') + hour;\n        break;\n      case 'G': time += hour; break;\n      case 'H': time += (hour < 10 ? '0' : '') + hour; break;\n      case 'i': time += (minutes < 10 ? '0' : '') + minutes; break;\n      case 's': time += '00';\n      default: time += c;\n    }\n  }\n\n  return time;\n}\n\nfunction sieve_form_init()\n{\n  // small resize for header element\n  $('select[name=\"_header[]\"]', rcmail.gui_objects.sieveform).each(function() {\n    if (this.value == '...') this.style.width = '40px';\n  });\n\n  // resize dialog window\n  if (rcmail.env.action == 'plugin.managesieve' && rcmail.env.task == 'mail') {\n    parent.rcmail.managesieve_dialog_resize(rcmail.gui_objects.sieveform);\n  }\n\n  $('input[type=\"text\"]:first', rcmail.gui_objects.sieveform).focus();\n\n  // initialize smart list inputs\n  $('textarea[data-type=\"list\"]', rcmail.gui_objects.sieveform).each(function() {\n    smart_field_init(this);\n  });\n\n  // enable date pickers on date fields\n  if ($.datepicker && rcmail.env.date_format) {\n    $.datepicker.setDefaults({\n      dateFormat: rcmail.env.date_format,\n      changeMonth: true,\n      showOtherMonths: true,\n      selectOtherMonths: true,\n      onSelect: function(dateText) { $(this).focus().val(dateText); }\n    });\n    $('input.datepicker').datepicker();\n  }\n\n  // configure drop-down menu on time input fields based on jquery UI autocomplete\n  $('#vacation_timefrom, #vacation_timeto')\n    .attr('autocomplete', \"off\")\n    .autocomplete({\n      delay: 100,\n      minLength: 1,\n      source: function(p, callback) {\n        var h, result = [];\n        for (h = 0; h < 24; h++)\n          result.push(sieve_formattime(h, 0));\n        result.push(sieve_formattime(23, 59));\n\n        return callback(result);\n      },\n      open: function(event, ui) {\n        // scroll to current time\n        var $this = $(this), val = $this.val(),\n          widget = $this.autocomplete('widget').css('width', '10em'),\n          menu = $this.data('ui-autocomplete').menu;\n\n        if (val && val.length)\n          widget.children().each(function() {\n            var li = $(this);\n            if (li.text().indexOf(val) == 0)\n              menu._scrollIntoView(li);\n          });\n      },\n      select: function(event, ui) {\n        $(this).val(ui.item.value);\n        return false;\n      }\n    })\n    .click(function() {  // show drop-down upon clicks\n      $(this).autocomplete('search', $(this).val() || ' ');\n    })\n}\n\n\n/*********************************************************/\n/*********           Mail UI methods             *********/\n/*********************************************************/\n\nrcube_webmail.prototype.managesieve_create = function(force)\n{\n  if (!force && this.env.action != 'show') {\n    var uid = this.message_list.get_single_selection(),\n      lock = this.set_busy(true, 'loading');\n\n    this.http_post('plugin.managesieve-action', {_uid: uid}, lock);\n    return;\n  }\n\n  if (!this.env.sieve_headers || !this.env.sieve_headers.length)\n    return;\n\n  var i, html, buttons = {}, dialog = $(\"#sievefilterform\");\n\n  // create dialog window\n  if (!dialog.length) {\n    dialog = $('<div id=\"sievefilterform\"></div>');\n    $('body').append(dialog);\n  }\n\n  // build dialog window content\n  html = '<fieldset><legend>'+this.get_label('managesieve.usedata')+'</legend><ul>';\n  for (i in this.env.sieve_headers)\n    html += '<li><input type=\"checkbox\" name=\"headers[]\" id=\"sievehdr'+i+'\" value=\"'+i+'\" checked=\"checked\" />'\n      +'<label for=\"sievehdr'+i+'\">'+this.env.sieve_headers[i][0]+':</label> '+this.env.sieve_headers[i][1]+'</li>';\n  html += '</ul></fieldset>';\n\n  dialog.html(html);\n\n  // [Next Step] button action\n  buttons[this.get_label('managesieve.nextstep')] = function () {\n    // check if there's at least one checkbox checked\n    var hdrs = $('input[name=\"headers[]\"]:checked', dialog);\n    if (!hdrs.length) {\n      alert(rcmail.get_label('managesieve.nodata'));\n      return;\n    }\n\n    // build frame URL\n    var url = rcmail.get_task_url('mail');\n    url = rcmail.add_url(url, '_action', 'plugin.managesieve');\n    url = rcmail.add_url(url, '_framed', 1);\n\n    hdrs.map(function() {\n      var val = rcmail.env.sieve_headers[this.value];\n      url = rcmail.add_url(url, 'r['+this.value+']', val[0]+':'+val[1]);\n    });\n\n    // load form in the iframe\n    var frame = $('<iframe>').attr({src: url, frameborder: 0})\n    dialog.empty().append(frame).dialog('widget').resize();\n\n    // Change [Next Step] button with [Save] button\n    buttons = {};\n    buttons[rcmail.get_label('save')] = function() {\n      var win = $('iframe', dialog).get(0).contentWindow;\n      win.rcmail.managesieve_save();\n    };\n    dialog.dialog('option', 'buttons', buttons);\n  };\n\n  // show dialog window\n  dialog.dialog({\n    modal: false,\n    resizable: true,\n    closeOnEscape: !bw.ie7,  // disable for performance reasons\n    title: this.get_label('managesieve.newfilter'),\n    close: function() { rcmail.managesieve_dialog_close(); },\n    buttons: buttons,\n    minWidth: 600,\n    minHeight: 300,\n    height: 250\n  }).show();\n\n  this.env.managesieve_dialog = dialog;\n}\n\nrcube_webmail.prototype.managesieve_dialog_close = function()\n{\n  var dialog = this.env.managesieve_dialog;\n\n  // BUG(?): if we don't remove the iframe first, it will be reloaded\n  dialog.html('');\n  dialog.dialog('destroy').hide();\n}\n\nrcube_webmail.prototype.managesieve_dialog_resize = function(o)\n{\n  var dialog = this.env.managesieve_dialog,\n    win = $(window), form = $(o);\n    width = $('fieldset:first', o).width(), // fieldset width is more appropriate here\n    height = form.height(),\n    w = win.width(), h = win.height();\n\n  dialog.dialog('option', { height: Math.min(h-20, height+120), width: Math.min(w-20, width+65) })\n    .dialog('option', 'position', ['center', 'center']);  // works in a separate call only (!?)\n}\n", "/**\n * ZipDownload plugin script\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (c) 2013-2014, The Roundcube Dev Team\n *\n * The JavaScript code in this page is free software: you can redistribute it\n * and/or modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation, either version 3 of\n * the License, or (at your option) any later version.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n */\n\nwindow.rcmail && rcmail.addEventListener('init', function(evt) {\n    // register additional actions\n    rcmail.register_command('download-eml', function() { rcmail_zipdownload('eml'); });\n    rcmail.register_command('download-mbox', function() { rcmail_zipdownload('mbox'); });\n    rcmail.register_command('download-maildir', function() { rcmail_zipdownload('maildir'); });\n\n    // commands status\n    rcmail.message_list && rcmail.message_list.addEventListener('select', function(list) {\n        var selected = list.get_selection().length;\n\n        rcmail.enable_command('download', selected > 0);\n        rcmail.enable_command('download-eml', selected == 1);\n        rcmail.enable_command('download-mbox', 'download-maildir', selected > 1);\n    });\n\n    // hook before default download action\n    rcmail.addEventListener('beforedownload', rcmail_zipdownload_menu);\n\n    // find and modify default download link/button\n    $.each(rcmail.buttons['download'] || [], function() {\n        var link = $('#' + this.id),\n            span = $('span', link);\n\n        if (!span.length) {\n            span = $('<span>');\n            link.html('').append(span);\n        }\n\n        span.text(rcmail.get_label('zipdownload.download'));\n        rcmail.env.download_link = link;\n    });\n  });\n\n\nfunction rcmail_zipdownload(mode)\n{\n    // default .eml download of single message\n    if (mode == 'eml') {\n        var uid = rcmail.get_single_uid();\n        rcmail.goto_url('viewsource', rcmail.params_from_uid(uid, {_save: 1}), false, true);\n        return;\n    }\n\n    // multi-message download, use hidden form to POST selection\n    if (rcmail.message_list && rcmail.message_list.get_selection().length > 1) {\n        var inputs = [], form = $('#zipdownload-form'),\n            post = rcmail.selection_post_data();\n\n        post._mode = mode;\n        post._token = rcmail.env.request_token;\n\n        $.each(post, function(k, v) {\n            if (typeof v == 'object' && v.length > 1) {\n              for (var j=0; j < v.length; j++)\n                  inputs.push($('<input>').attr({type: 'hidden', name: k+'[]', value: v[j]}));\n            }\n            else {\n                inputs.push($('<input>').attr({type: 'hidden', name: k, value: v}));\n            }\n        });\n\n        if (!form.length)\n            form = $('<form>').attr({\n                    style: 'display: none',\n                    method: 'POST',\n                    action: '?_task=mail&_action=plugin.zipdownload.messages'\n                })\n                .appendTo('body');\n\n        form.html('').append(inputs).submit();\n    }\n}\n\n// display download options menu\nfunction rcmail_zipdownload_menu(e)\n{\n    // show (sub)menu for download selection\n    rcmail.command('menu-open', 'zipdownload-menu', e && e.target ? e.target : rcmail.env.download_link, e);\n\n    // abort default download action\n    return false;\n}\n", "<?php\n\n/**\n * ZipDownload\n *\n * Plugin to allow the download of all message attachments in one zip file\n * and downloading of many messages in one go.\n *\n * @version 3.0\n * @requires php_zip extension (including ZipArchive class)\n * @author Philip Weir\n * @author Thomas Bruderli\n * @author Aleksander Machniak\n */\nclass zipdownload extends rcube_plugin\n{\n    public $task = 'mail';\n    private $charset = 'ASCII';\n\n    /**\n     * Plugin initialization\n     */\n    public function init()\n    {\n        // check requirements first\n        if (!class_exists('ZipArchive', false)) {\n            rcmail::raise_error(array(\n                'code'    => 520,\n                'file'    => __FILE__,\n                'line'    => __LINE__,\n                'message' => \"php_zip extension is required for the zipdownload plugin\"), true, false);\n            return;\n        }\n\n        $rcmail = rcmail::get_instance();\n\n        $this->load_config();\n        $this->charset = $rcmail->config->get('zipdownload_charset', RCUBE_CHARSET);\n        $this->add_texts('localization');\n\n        if ($rcmail->config->get('zipdownload_attachments', 1) > -1 && ($rcmail->action == 'show' || $rcmail->action == 'preview')) {\n            $this->add_hook('template_object_messageattachments', array($this, 'attachment_ziplink'));\n        }\n\n        $this->register_action('plugin.zipdownload.attachments', array($this, 'download_attachments'));\n        $this->register_action('plugin.zipdownload.messages', array($this, 'download_messages'));\n\n        if (!$rcmail->action && $rcmail->config->get('zipdownload_selection')) {\n            $this->download_menu();\n        }\n    }\n\n    /**\n     * Place a link/button after attachments listing to trigger download\n     */\n    public function attachment_ziplink($p)\n    {\n        $rcmail = rcmail::get_instance();\n\n        // only show the link if there is more than the configured number of attachments\n        if (substr_count($p['content'], '<li') > $rcmail->config->get('zipdownload_attachments', 1)) {\n            $href = $rcmail->url(array(\n                '_action' => 'plugin.zipdownload.attachments',\n                '_mbox'   => $rcmail->output->env['mailbox'],\n                '_uid'    => $rcmail->output->env['uid'],\n            ), false, false, true);\n\n            $link = html::a(array('href' => $href, 'class' => 'button zipdownload'),\n                rcube::Q($this->gettext('downloadall'))\n            );\n\n            // append link to attachments list, slightly different in some skins\n            switch (rcmail::get_instance()->config->get('skin')) {\n                case 'classic':\n                    $p['content'] = str_replace('</ul>', html::tag('li', array('class' => 'zipdownload'), $link) . '</ul>', $p['content']);\n                    break;\n\n                default:\n                    $p['content'] .= $link;\n                    break;\n            }\n\n            $this->include_stylesheet($this->local_skin_path() . '/zipdownload.css');\n        }\n\n        return $p;\n    }\n\n    /**\n     * Adds download options menu to the page\n     */\n    public function download_menu()\n    {\n        $this->include_script('zipdownload.js');\n        $this->add_label('download');\n\n        $rcmail  = rcmail::get_instance();\n        $menu    = array();\n        $ul_attr = array('role' => 'menu', 'aria-labelledby' => 'aria-label-zipdownloadmenu');\n        if ($rcmail->config->get('skin') != 'classic') {\n            $ul_attr['class'] = 'toolbarmenu';\n        }\n\n        foreach (array('eml', 'mbox', 'maildir') as $type) {\n            $menu[] = html::tag('li', null, $rcmail->output->button(array(\n                    'command'  => \"download-$type\",\n                    'label'    => \"zipdownload.download$type\",\n                    'classact' => 'active',\n            )));\n        }\n\n        $rcmail->output->add_footer(html::div(array('id' => 'zipdownload-menu', 'class' => 'popupmenu', 'aria-hidden' => 'true'),\n            html::tag('h2', array('class' => 'voice', 'id' => 'aria-label-zipdownloadmenu'), \"Message Download Options Menu\") .\n            html::tag('ul', $ul_attr, implode('', $menu))));\n    }\n\n    /**\n     * Handler for attachment download action\n     */\n    public function download_attachments()\n    {\n        $rcmail    = rcmail::get_instance();\n\n        // require CSRF protected request\n        $rcmail->request_security_check(rcube_utils::INPUT_GET);\n\n        $imap      = $rcmail->get_storage();\n        $temp_dir  = $rcmail->config->get('temp_dir');\n        $tmpfname  = tempnam($temp_dir, 'zipdownload');\n        $tempfiles = array($tmpfname);\n        $message   = new rcube_message(rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GET));\n\n        // open zip file\n        $zip = new ZipArchive();\n        $zip->open($tmpfname, ZIPARCHIVE::OVERWRITE);\n\n        foreach ($message->attachments as $part) {\n            $pid      = $part->mime_id;\n            $part     = $message->mime_parts[$pid];\n            $filename = $part->filename;\n\n            if ($filename === null || $filename === '') {\n                $ext      = (array) rcube_mime::get_mime_extensions($part->mimetype);\n                $ext      = array_shift($ext);\n                $filename = $rcmail->gettext('messagepart') . ' ' . $pid;\n                if ($ext) {\n                    $filename .= '.' . $ext;\n                }\n            }\n\n            $disp_name   = $this->_convert_filename($filename);\n            $tmpfn       = tempnam($temp_dir, 'zipattach');\n            $tmpfp       = fopen($tmpfn, 'w');\n            $tempfiles[] = $tmpfn;\n\n            $message->get_part_body($part->mime_id, false, 0, $tmpfp);\n            $zip->addFile($tmpfn, $disp_name);\n            fclose($tmpfp);\n        }\n\n        $zip->close();\n\n        $filename = ($message->subject ?: 'roundcube') . '.zip';\n        $this->_deliver_zipfile($tmpfname, $filename);\n\n        // delete temporary files from disk\n        foreach ($tempfiles as $tmpfn) {\n            unlink($tmpfn);\n        }\n\n        exit;\n    }\n\n    /**\n     * Handler for message download action\n     */\n    public function download_messages()\n    {\n        $rcmail = rcmail::get_instance();\n\n        if ($rcmail->config->get('zipdownload_selection') && !empty($_POST['_uid'])) {\n            $messageset = rcmail::get_uids();\n            if (sizeof($messageset)) {\n                $this->_download_messages($messageset);\n            }\n        }\n    }\n\n    /**\n     * Helper method to packs all the given messages into a zip archive\n     *\n     * @param array List of message UIDs to download\n     */\n    private function _download_messages($messageset)\n    {\n        $rcmail    = rcmail::get_instance();\n        $imap      = $rcmail->get_storage();\n        $mode      = rcube_utils::get_input_value('_mode', rcube_utils::INPUT_POST);\n        $temp_dir  = $rcmail->config->get('temp_dir');\n        $tmpfname  = tempnam($temp_dir, 'zipdownload');\n        $tempfiles = array($tmpfname);\n        $folders   = count($messageset) > 1;\n\n        // @TODO: file size limit\n\n        // open zip file\n        $zip = new ZipArchive();\n        $zip->open($tmpfname, ZIPARCHIVE::OVERWRITE);\n\n        if ($mode == 'mbox') {\n            $tmpfp = fopen($tmpfname . '.mbox', 'w');\n        }\n\n        foreach ($messageset as $mbox => $uids) {\n            $imap->set_folder($mbox);\n            $path = $folders ? str_replace($imap->get_hierarchy_delimiter(), '/', $mbox) . '/' : '';\n\n            if ($uids === '*') {\n                $index = $imap->index($mbox, null, null, true);\n                $uids  = $index->get();\n            }\n\n            foreach ($uids as $uid) {\n                $headers = $imap->get_message_headers($uid);\n\n                if ($mode == 'mbox') {\n                    $from = rcube_mime::decode_address_list($headers->from, null, true, $headers->charset, true);\n                    $from = array_shift($from);\n\n                    // Mbox format header\n                    // @FIXME: \\r\\n or \\n\n                    // @FIXME: date format\n                    $header = sprintf(\"From %s %s\\r\\n\",\n                        // replace spaces with hyphens\n                        $from ? preg_replace('/\\s/', '-', $from) : 'MAILER-DAEMON',\n                        // internaldate\n                        $headers->internaldate\n                    );\n\n                    fwrite($tmpfp, $header);\n\n                    // Use stream filter to quote \"From \" in the message body\n                    stream_filter_register('mbox_filter', 'zipdownload_mbox_filter');\n                    $filter = stream_filter_append($tmpfp, 'mbox_filter');\n                    $imap->get_raw_body($uid, $tmpfp);\n                    stream_filter_remove($filter);\n                    fwrite($tmpfp, \"\\r\\n\");\n                }\n                else { // maildir\n                    $subject = rcube_mime::decode_mime_string((string)$headers->subject);\n                    $subject = $this->_convert_filename($subject);\n                    $subject = substr($subject, 0, 16);\n\n                    $disp_name = ($subject ?: 'message_rfc822') . \".eml\";\n                    $disp_name = $path . $uid . \"_\" . $disp_name;\n\n                    $tmpfn = tempnam($temp_dir, 'zipmessage');\n                    $tmpfp = fopen($tmpfn, 'w');\n                    $imap->get_raw_body($uid, $tmpfp);\n                    $tempfiles[] = $tmpfn;\n                    fclose($tmpfp);\n                    $zip->addFile($tmpfn, $disp_name);\n                }\n            }\n        }\n\n        $filename = $folders ? 'messages' : $imap->get_folder();\n\n        if ($mode == 'mbox') {\n            $tempfiles[] = $tmpfname . '.mbox';\n            fclose($tmpfp);\n            $zip->addFile($tmpfname . '.mbox', $filename . '.mbox');\n        }\n\n        $zip->close();\n\n        $this->_deliver_zipfile($tmpfname, $filename . '.zip');\n\n        // delete temporary files from disk\n        foreach ($tempfiles as $tmpfn) {\n            unlink($tmpfn);\n        }\n\n        exit;\n    }\n\n    /**\n     * Helper method to send the zip archive to the browser\n     */\n    private function _deliver_zipfile($tmpfname, $filename)\n    {\n        $browser = new rcube_browser;\n        $rcmail  = rcmail::get_instance();\n\n        $rcmail->output->nocacheing_headers();\n\n        if ($browser->ie)\n            $filename = rawurlencode($filename);\n        else\n            $filename = addcslashes($filename, '\"');\n\n        // send download headers\n        header(\"Content-Type: application/octet-stream\");\n        if ($browser->ie) {\n            header(\"Content-Type: application/force-download\");\n        }\n\n        // don't kill the connection if download takes more than 30 sec.\n        @set_time_limit(0);\n        header(\"Content-Disposition: attachment; filename=\\\"\". $filename .\"\\\"\");\n        header(\"Content-length: \" . filesize($tmpfname));\n        readfile($tmpfname);\n    }\n\n    /**\n     * Helper function to convert filenames to the configured charset\n     */\n    private function _convert_filename($str)\n    {\n        $str = rcube_charset::convert($str, RCUBE_CHARSET, $this->charset);\n\n        return strtr($str, array(':' => '', '/' => '-'));\n    }\n}\n\nclass zipdownload_mbox_filter extends php_user_filter\n{\n    function filter($in, $out, &$consumed, $closing)\n    {\n        while ($bucket = stream_bucket_make_writeable($in)) {\n            // messages are read line by line\n            if (preg_match('/^>*From /', $bucket->data)) {\n                $bucket->data     = '>' . $bucket->data;\n                $bucket->datalen += 1;\n            }\n\n            $consumed += $bucket->datalen;\n            stream_bucket_append($out, $bucket);\n        }\n\n        return PSFS_PASS_ON;\n    }\n}\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | program/include/rcmail.php                                            |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2008-2014, The Roundcube Dev Team                       |\n | Copyright (C) 2011-2014, Kolab Systems AG                             |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Application class providing core functions and holding              |\n |   instances of all 'global' objects like db- and imap-connections     |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <alec@alec.pl>                            |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Application class of Roundcube Webmail\n * implemented as singleton\n *\n * @package Webmail\n */\nclass rcmail extends rcube\n{\n    /**\n     * Main tasks.\n     *\n     * @var array\n     */\n    static public $main_tasks = array('mail','settings','addressbook','login','logout','utils','dummy');\n\n    /**\n     * Current task.\n     *\n     * @var string\n     */\n    public $task;\n\n    /**\n     * Current action.\n     *\n     * @var string\n     */\n    public $action    = '';\n    public $comm_path = './';\n    public $filename  = '';\n\n    private $address_books = array();\n    private $action_map    = array();\n\n\n    const ERROR_STORAGE          = -2;\n    const ERROR_INVALID_REQUEST  = 1;\n    const ERROR_INVALID_HOST     = 2;\n    const ERROR_COOKIES_DISABLED = 3;\n    const ERROR_RATE_LIMIT       = 4;\n\n\n    /**\n     * This implements the 'singleton' design pattern\n     *\n     * @param integer $mode Ignored rcube::get_instance() argument\n     * @param string  $env  Environment name to run (e.g. live, dev, test)\n     *\n     * @return rcmail The one and only instance\n     */\n    static function get_instance($mode = 0, $env = '')\n    {\n        if (!self::$instance || !is_a(self::$instance, 'rcmail')) {\n            self::$instance = new rcmail($env);\n            // init AFTER object was linked with self::$instance\n            self::$instance->startup();\n        }\n\n        return self::$instance;\n    }\n\n    /**\n     * Initial startup function\n     * to register session, create database and imap connections\n     */\n    protected function startup()\n    {\n        $this->init(self::INIT_WITH_DB | self::INIT_WITH_PLUGINS);\n\n        // set filename if not index.php\n        if (($basename = basename($_SERVER['SCRIPT_FILENAME'])) && $basename != 'index.php') {\n            $this->filename = $basename;\n        }\n\n        // load all configured plugins\n        $plugins          = (array) $this->config->get('plugins', array());\n        $required_plugins = array('filesystem_attachments', 'jqueryui');\n        $this->plugins->load_plugins($plugins, $required_plugins);\n\n        // start session\n        $this->session_init();\n\n        // create user object\n        $this->set_user(new rcube_user($_SESSION['user_id']));\n\n        // set task and action properties\n        $this->set_task(rcube_utils::get_input_value('_task', rcube_utils::INPUT_GPC));\n        $this->action = asciiwords(rcube_utils::get_input_value('_action', rcube_utils::INPUT_GPC));\n\n        // reset some session parameters when changing task\n        if ($this->task != 'utils') {\n            // we reset list page when switching to another task\n            // but only to the main task interface - empty action (#1489076, #1490116)\n            // this will prevent from unintentional page reset on cross-task requests\n            if ($this->session && $_SESSION['task'] != $this->task && empty($this->action)) {\n                $this->session->remove('page');\n\n                // set current task to session\n                $_SESSION['task'] = $this->task;\n            }\n        }\n\n        // init output class (not in CLI mode)\n        if (!empty($_REQUEST['_remote'])) {\n            $GLOBALS['OUTPUT'] = $this->json_init();\n        }\n        else if ($_SERVER['REMOTE_ADDR']) {\n            $GLOBALS['OUTPUT'] = $this->load_gui(!empty($_REQUEST['_framed']));\n        }\n\n        // run init method on all the plugins\n        $this->plugins->init($this, $this->task);\n    }\n\n    /**\n     * Setter for application task\n     *\n     * @param string Task to set\n     */\n    public function set_task($task)\n    {\n        $task = asciiwords($task, true);\n\n        if ($this->user && $this->user->ID)\n            $task = !$task ? 'mail' : $task;\n        else if (php_sapi_name() == 'cli')\n            $task = 'cli';\n        else\n            $task = 'login';\n\n        $this->task      = $task;\n        $this->comm_path = $this->url(array('task' => $this->task));\n\n        if (!empty($_REQUEST['_framed'])) {\n            $this->comm_path .= '&_framed=1';\n        }\n\n        if ($this->output) {\n            $this->output->set_env('task', $this->task);\n            $this->output->set_env('comm_path', $this->comm_path);\n        }\n    }\n\n    /**\n     * Setter for system user object\n     *\n     * @param rcube_user Current user instance\n     */\n    public function set_user($user)\n    {\n        parent::set_user($user);\n\n        $lang = $this->language_prop($this->config->get('language', $_SESSION['language']));\n        $_SESSION['language'] = $this->user->language = $lang;\n\n        // set localization\n        setlocale(LC_ALL, $lang . '.utf8', $lang . '.UTF-8', 'en_US.utf8', 'en_US.UTF-8');\n\n        // Workaround for http://bugs.php.net/bug.php?id=18556\n        // Also strtoupper/strtolower and other methods are locale-aware\n        // for these locales it is problematic (#1490519)\n        if (in_array($lang, array('tr_TR', 'ku', 'az_AZ'))) {\n            setlocale(LC_CTYPE, 'en_US.utf8', 'en_US.UTF-8', 'C');\n        }\n    }\n\n    /**\n     * Return instance of the internal address book class\n     *\n     * @param string  Address book identifier (-1 for default addressbook)\n     * @param boolean True if the address book needs to be writeable\n     *\n     * @return rcube_contacts Address book object\n     */\n    public function get_address_book($id, $writeable = false)\n    {\n        $contacts    = null;\n        $ldap_config = (array)$this->config->get('ldap_public');\n\n        // 'sql' is the alias for '0' used by autocomplete\n        if ($id == 'sql')\n            $id = '0';\n        else if ($id == -1) {\n            $id = $this->config->get('default_addressbook');\n            $default = true;\n        }\n\n        // use existing instance\n        if (isset($this->address_books[$id]) && ($this->address_books[$id] instanceof rcube_addressbook)) {\n            $contacts = $this->address_books[$id];\n        }\n        else if ($id && $ldap_config[$id]) {\n            $domain   = $this->config->mail_domain($_SESSION['storage_host']);\n            $contacts = new rcube_ldap($ldap_config[$id], $this->config->get('ldap_debug'), $domain);\n        }\n        else if ($id === '0') {\n            $contacts = new rcube_contacts($this->db, $this->get_user_id());\n        }\n        else {\n            $plugin = $this->plugins->exec_hook('addressbook_get', array('id' => $id, 'writeable' => $writeable));\n\n            // plugin returned instance of a rcube_addressbook\n            if ($plugin['instance'] instanceof rcube_addressbook) {\n                $contacts = $plugin['instance'];\n            }\n        }\n\n        // when user requested default writeable addressbook\n        // we need to check if default is writeable, if not we\n        // will return first writeable book (if any exist)\n        if ($contacts && $default && $contacts->readonly && $writeable) {\n            $contacts = null;\n        }\n\n        // Get first addressbook from the list if configured default doesn't exist\n        // This can happen when user deleted the addressbook (e.g. Kolab folder)\n        if (!$contacts && (!$id || $default)) {\n            $source = reset($this->get_address_sources($writeable, !$default));\n            if (!empty($source)) {\n                $contacts = $this->get_address_book($source['id']);\n                if ($contacts) {\n                    $id = $source['id'];\n                }\n            }\n        }\n\n        if (!$contacts) {\n            // there's no default, just return\n            if ($default) {\n                return null;\n            }\n\n            self::raise_error(array(\n                    'code'    => 700,\n                    'file'    => __FILE__,\n                    'line'    => __LINE__,\n                    'message' => \"Addressbook source ($id) not found!\"\n                ),\n                true, true);\n        }\n\n        // add to the 'books' array for shutdown function\n        $this->address_books[$id] = $contacts;\n\n        if ($writeable && $contacts->readonly) {\n            return null;\n        }\n\n        // set configured sort order\n        if ($sort_col = $this->config->get('addressbook_sort_col')) {\n            $contacts->set_sort_order($sort_col);\n        }\n\n        return $contacts;\n    }\n\n    /**\n     * Return identifier of the address book object\n     *\n     * @param rcube_addressbook Addressbook source object\n     *\n     * @return string Source identifier\n     */\n    public function get_address_book_id($object)\n    {\n        foreach ($this->address_books as $index => $book) {\n            if ($book === $object) {\n                return $index;\n            }\n        }\n    }\n\n    /**\n     * Return address books list\n     *\n     * @param boolean True if the address book needs to be writeable\n     * @param boolean True if the address book needs to be not hidden\n     *\n     * @return array  Address books array\n     */\n    public function get_address_sources($writeable = false, $skip_hidden = false)\n    {\n        $abook_type   = (string) $this->config->get('address_book_type');\n        $ldap_config  = (array) $this->config->get('ldap_public');\n        $autocomplete = (array) $this->config->get('autocomplete_addressbooks');\n        $list         = array();\n\n        // We are using the DB address book or a plugin address book\n        if (!empty($abook_type) && strtolower($abook_type) != 'ldap') {\n            if (!isset($this->address_books['0'])) {\n                $this->address_books['0'] = new rcube_contacts($this->db, $this->get_user_id());\n            }\n\n            $list['0'] = array(\n                'id'       => '0',\n                'name'     => $this->gettext('personaladrbook'),\n                'groups'   => $this->address_books['0']->groups,\n                'readonly' => $this->address_books['0']->readonly,\n                'undelete' => $this->address_books['0']->undelete && $this->config->get('undo_timeout'),\n                'autocomplete' => in_array('sql', $autocomplete),\n            );\n        }\n\n        if (!empty($ldap_config)) {\n            foreach ($ldap_config as $id => $prop) {\n                // handle misconfiguration\n                if (empty($prop) || !is_array($prop)) {\n                    continue;\n                }\n\n                $list[$id] = array(\n                    'id'       => $id,\n                    'name'     => html::quote($prop['name']),\n                    'groups'   => !empty($prop['groups']) || !empty($prop['group_filters']),\n                    'readonly' => !$prop['writable'],\n                    'hidden'   => $prop['hidden'],\n                    'autocomplete' => in_array($id, $autocomplete)\n                );\n            }\n        }\n\n        $plugin = $this->plugins->exec_hook('addressbooks_list', array('sources' => $list));\n        $list   = $plugin['sources'];\n\n        foreach ($list as $idx => $item) {\n            // register source for shutdown function\n            if (!is_object($this->address_books[$item['id']])) {\n                $this->address_books[$item['id']] = $item;\n            }\n            // remove from list if not writeable as requested\n            if ($writeable && $item['readonly']) {\n                unset($list[$idx]);\n            }\n            // remove from list if hidden as requested\n            else if ($skip_hidden && $item['hidden']) {\n                unset($list[$idx]);\n            }\n        }\n\n        return $list;\n    }\n\n    /**\n     * Getter for compose responses.\n     * These are stored in local config and user preferences.\n     *\n     * @param boolean True to sort the list alphabetically\n     * @param boolean True if only this user's responses shall be listed\n     *\n     * @return array List of the current user's stored responses\n     */\n    public function get_compose_responses($sorted = false, $user_only = false)\n    {\n        $responses = array();\n\n        if (!$user_only) {\n            foreach ($this->config->get('compose_responses_static', array()) as $response) {\n                if (empty($response['key'])) {\n                    $response['key']    = substr(md5($response['name']), 0, 16);\n                }\n\n                $response['static'] = true;\n                $response['class']  = 'readonly';\n\n                $k = $sorted ? '0000-' . strtolower($response['name']) : $response['key'];\n                $responses[$k] = $response;\n            }\n        }\n\n        foreach ($this->config->get('compose_responses', array()) as $response) {\n            if (empty($response['key'])) {\n                $response['key'] = substr(md5($response['name']), 0, 16);\n            }\n\n            $k = $sorted ? strtolower($response['name']) : $response['key'];\n            $responses[$k] = $response;\n        }\n\n        // sort list by name\n        if ($sorted) {\n            ksort($responses, SORT_LOCALE_STRING);\n        }\n\n        return array_values($responses);\n    }\n\n    /**\n     * Init output object for GUI and add common scripts.\n     * This will instantiate a rcmail_output_html object and set\n     * environment vars according to the current session and configuration\n     *\n     * @param boolean True if this request is loaded in a (i)frame\n     *\n     * @return rcube_output Reference to HTML output object\n     */\n    public function load_gui($framed = false)\n    {\n        // init output page\n        if (!($this->output instanceof rcmail_output_html)) {\n            $this->output = new rcmail_output_html($this->task, $framed);\n        }\n\n        // set refresh interval\n        $this->output->set_env('refresh_interval', $this->config->get('refresh_interval', 0));\n        $this->output->set_env('session_lifetime', $this->config->get('session_lifetime', 0) * 60);\n\n        if ($framed) {\n            $this->comm_path .= '&_framed=1';\n            $this->output->set_env('framed', true);\n        }\n\n        $this->output->set_env('task', $this->task);\n        $this->output->set_env('action', $this->action);\n        $this->output->set_env('comm_path', $this->comm_path);\n        $this->output->set_charset(RCUBE_CHARSET);\n\n        if ($this->user && $this->user->ID) {\n            $this->output->set_env('user_id', $this->user->get_hash());\n        }\n\n        // set compose mode for all tasks (message compose step can be triggered from everywhere)\n        $this->output->set_env('compose_extwin', $this->config->get('compose_extwin',false));\n\n        // add some basic labels to client\n        $this->output->add_label('loading', 'servererror', 'connerror', 'requesttimedout',\n            'refreshing', 'windowopenerror', 'uploadingmany');\n\n        return $this->output;\n    }\n\n    /**\n     * Create an output object for JSON responses\n     *\n     * @return rcube_output Reference to JSON output object\n     */\n    public function json_init()\n    {\n        if (!($this->output instanceof rcmail_output_json)) {\n            $this->output = new rcmail_output_json($this->task);\n        }\n\n        return $this->output;\n    }\n\n    /**\n     * Create session object and start the session.\n     */\n    public function session_init()\n    {\n        parent::session_init();\n\n        // set initial session vars\n        if (!$_SESSION['user_id']) {\n            $_SESSION['temp'] = true;\n        }\n\n        // restore skin selection after logout\n        if ($_SESSION['temp'] && !empty($_SESSION['skin'])) {\n            $this->config->set('skin', $_SESSION['skin']);\n        }\n    }\n\n    /**\n     * Perfom login to the mail server and to the webmail service.\n     * This will also create a new user entry if auto_create_user is configured.\n     *\n     * @param string Mail storage (IMAP) user name\n     * @param string Mail storage (IMAP) password\n     * @param string Mail storage (IMAP) host\n     * @param bool   Enables cookie check\n     *\n     * @return boolean True on success, False on failure\n     */\n    function login($username, $password, $host = null, $cookiecheck = false)\n    {\n        $this->login_error = null;\n\n        if (empty($username)) {\n            return false;\n        }\n\n        if ($cookiecheck && empty($_COOKIE)) {\n            $this->login_error = self::ERROR_COOKIES_DISABLED;\n            return false;\n        }\n\n        $username_filter = $this->config->get('login_username_filter');\n        $username_maxlen = $this->config->get('login_username_maxlen', 1024);\n        $password_maxlen = $this->config->get('login_password_maxlen', 1024);\n        $default_host    = $this->config->get('default_host');\n        $default_port    = $this->config->get('default_port');\n        $username_domain = $this->config->get('username_domain');\n        $login_lc        = $this->config->get('login_lc', 2);\n\n        // check input for security (#1490500)\n        if (($username_maxlen && strlen($username) > $username_maxlen)\n            || ($username_filter && !preg_match($username_filter, $username))\n            || ($password_maxlen && strlen($password) > $password_maxlen)\n        ) {\n            $this->login_error = self::ERROR_INVALID_REQUEST;\n            return false;\n        }\n\n        // host is validated in rcmail::autoselect_host(), so here\n        // we'll only handle unset host (if possible)\n        if (!$host && !empty($default_host)) {\n            if (is_array($default_host)) {\n                list($key, $val) = each($default_host);\n                $host = is_numeric($key) ? $val : $key;\n            }\n            else {\n                $host = $default_host;\n            }\n\n            $host = rcube_utils::parse_host($host);\n        }\n\n        if (!$host) {\n            $this->login_error = self::ERROR_INVALID_HOST;\n            return false;\n        }\n\n        // parse $host URL\n        $a_host = parse_url($host);\n        if ($a_host['host']) {\n            $host = $a_host['host'];\n            $ssl  = (isset($a_host['scheme']) && in_array($a_host['scheme'], array('ssl','imaps','tls'))) ? $a_host['scheme'] : null;\n\n            if (!empty($a_host['port']))\n                $port = $a_host['port'];\n            else if ($ssl && $ssl != 'tls' && (!$default_port || $default_port == 143))\n                $port = 993;\n        }\n\n        if (!$port) {\n            $port = $default_port;\n        }\n\n        // Check if we need to add/force domain to username\n        if (!empty($username_domain)) {\n            $domain = is_array($username_domain) ? $username_domain[$host] : $username_domain;\n\n            if ($domain = rcube_utils::parse_host((string)$domain, $host)) {\n                $pos = strpos($username, '@');\n\n                // force configured domains\n                if ($pos !== false && $this->config->get('username_domain_forced')) {\n                    $username = substr($username, 0, $pos) . '@' . $domain;\n                }\n                // just add domain if not specified\n                else if ($pos === false) {\n                    $username .= '@' . $domain;\n                }\n            }\n        }\n\n        // Convert username to lowercase. If storage backend\n        // is case-insensitive we need to store always the same username (#1487113)\n        if ($login_lc) {\n            if ($login_lc == 2 || $login_lc === true) {\n                $username = mb_strtolower($username);\n            }\n            else if (strpos($username, '@')) {\n                // lowercase domain name\n                list($local, $domain) = explode('@', $username);\n                $username = $local . '@' . mb_strtolower($domain);\n            }\n        }\n\n        // try to resolve email address from virtuser table\n        if (strpos($username, '@') && ($virtuser = rcube_user::email2user($username))) {\n            $username = $virtuser;\n        }\n\n        // Here we need IDNA ASCII\n        // Only rcube_contacts class is using domain names in Unicode\n        $host     = rcube_utils::idn_to_ascii($host);\n        $username = rcube_utils::idn_to_ascii($username);\n\n        // user already registered -> overwrite username\n        if ($user = rcube_user::query($username, $host)) {\n            $username = $user->data['username'];\n\n            // Brute-force prevention\n            if ($user->is_locked()) {\n                $this->login_error = self::ERROR_RATE_LIMIT;\n                return false;\n            }\n        }\n\n        $storage = $this->get_storage();\n\n        // try to log in\n        if (!$storage->connect($host, $username, $password, $port, $ssl)) {\n            if ($user) {\n                $user->failed_login();\n            }\n\n            // Wait a second to slow down brute-force attacks (#1490549)\n            sleep(1);\n            return false;\n        }\n\n        // user already registered -> update user's record\n        if (is_object($user)) {\n            // update last login timestamp\n            $user->touch();\n        }\n        // create new system user\n        else if ($this->config->get('auto_create_user')) {\n            if ($created = rcube_user::create($username, $host)) {\n                $user = $created;\n            }\n            else {\n                self::raise_error(array(\n                        'code'    => 620,\n                        'file'    => __FILE__,\n                        'line'    => __LINE__,\n                        'message' => \"Failed to create a user record. Maybe aborted by a plugin?\"\n                    ),\n                    true, false);\n            }\n        }\n        else {\n            self::raise_error(array(\n                    'code'    => 621,\n                    'file'    => __FILE__,\n                    'line'    => __LINE__,\n                    'message' => \"Access denied for new user $username. 'auto_create_user' is disabled\"\n                ),\n                true, false);\n        }\n\n        // login succeeded\n        if (is_object($user) && $user->ID) {\n            // Configure environment\n            $this->set_user($user);\n            $this->set_storage_prop();\n\n            // set session vars\n            $_SESSION['user_id']      = $user->ID;\n            $_SESSION['username']     = $user->data['username'];\n            $_SESSION['storage_host'] = $host;\n            $_SESSION['storage_port'] = $port;\n            $_SESSION['storage_ssl']  = $ssl;\n            $_SESSION['password']     = $this->encrypt($password);\n            $_SESSION['login_time']   = time();\n\n            if (isset($_REQUEST['_timezone']) && $_REQUEST['_timezone'] != '_default_') {\n                $_SESSION['timezone'] = rcube_utils::get_input_value('_timezone', rcube_utils::INPUT_GPC);\n            }\n\n            // fix some old settings according to namespace prefix\n            $this->fix_namespace_settings($user);\n\n            // set/create special folders\n            $this->set_special_folders();\n\n            // clear all mailboxes related cache(s)\n            $storage->clear_cache('mailboxes', true);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns error code of last login operation\n     *\n     * @return int Error code\n     */\n    public function login_error()\n    {\n        if ($this->login_error) {\n            return $this->login_error;\n        }\n\n        if ($this->storage && $this->storage->get_error_code() < -1) {\n            return self::ERROR_STORAGE;\n        }\n    }\n\n    /**\n     * Auto-select IMAP host based on the posted login information\n     *\n     * @return string Selected IMAP host\n     */\n    public function autoselect_host()\n    {\n        $default_host = $this->config->get('default_host');\n        $host         = null;\n\n        if (is_array($default_host)) {\n            $post_host = rcube_utils::get_input_value('_host', rcube_utils::INPUT_POST);\n            $post_user = rcube_utils::get_input_value('_user', rcube_utils::INPUT_POST);\n\n            list(, $domain) = explode('@', $post_user);\n\n            // direct match in default_host array\n            if ($default_host[$post_host] || in_array($post_host, array_values($default_host))) {\n                $host = $post_host;\n            }\n            // try to select host by mail domain\n            else if (!empty($domain)) {\n                foreach ($default_host as $storage_host => $mail_domains) {\n                    if (is_array($mail_domains) && in_array_nocase($domain, $mail_domains)) {\n                        $host = $storage_host;\n                        break;\n                    }\n                    else if (stripos($storage_host, $domain) !== false || stripos(strval($mail_domains), $domain) !== false) {\n                        $host = is_numeric($storage_host) ? $mail_domains : $storage_host;\n                        break;\n                    }\n                }\n            }\n\n            // take the first entry if $host is still not set\n            if (empty($host)) {\n                list($key, $val) = each($default_host);\n                $host = is_numeric($key) ? $val : $key;\n            }\n        }\n        else if (empty($default_host)) {\n            $host = rcube_utils::get_input_value('_host', rcube_utils::INPUT_POST);\n        }\n        else {\n            $host = rcube_utils::parse_host($default_host);\n        }\n\n        return $host;\n    }\n\n    /**\n     * Destroy session data and remove cookie\n     */\n    public function kill_session()\n    {\n        $this->plugins->exec_hook('session_destroy');\n\n        $this->session->kill();\n        $_SESSION = array('language' => $this->user->language, 'temp' => true, 'skin' => $this->config->get('skin'));\n        $this->user->reset();\n    }\n\n    /**\n     * Do server side actions on logout\n     */\n    public function logout_actions()\n    {\n        $storage        = $this->get_storage();\n        $logout_expunge = $this->config->get('logout_expunge');\n        $logout_purge   = $this->config->get('logout_purge');\n        $trash_mbox     = $this->config->get('trash_mbox');\n\n        if ($logout_purge && !empty($trash_mbox)) {\n            $storage->clear_folder($trash_mbox);\n        }\n\n        if ($logout_expunge) {\n            $storage->expunge_folder('INBOX');\n        }\n\n        // Try to save unsaved user preferences\n        if (!empty($_SESSION['preferences'])) {\n            $this->user->save_prefs(unserialize($_SESSION['preferences']));\n        }\n    }\n\n    /**\n     * Build a valid URL to this instance of Roundcube\n     *\n     * @param mixed   Either a string with the action or url parameters as key-value pairs\n     * @param boolean Build an URL absolute to document root\n     * @param boolean Create fully qualified URL including http(s):// and hostname\n     * @param bool    Return absolute URL in secure location\n     *\n     * @return string Valid application URL\n     */\n    public function url($p, $absolute = false, $full = false, $secure = false)\n    {\n        if (!is_array($p)) {\n            if (strpos($p, 'http') === 0) {\n                return $p;\n            }\n\n            $p = array('_action' => @func_get_arg(0));\n        }\n\n        $pre = array();\n        $task = $p['_task'] ?: ($p['task'] ?: $this->task);\n        $pre['_task'] = $task;\n        unset($p['task'], $p['_task']);\n\n        $url  = $this->filename;\n        $delm = '?';\n\n        foreach (array_merge($pre, $p) as $key => $val) {\n            if ($val !== '' && $val !== null) {\n                $par  = $key[0] == '_' ? $key : '_'.$key;\n                $url .= $delm.urlencode($par).'='.urlencode($val);\n                $delm = '&';\n            }\n        }\n\n        $base_path = strval($_SERVER['REDIRECT_SCRIPT_URL'] ?: $_SERVER['SCRIPT_NAME']);\n        $base_path = preg_replace('![^/]+$!', '', $base_path);\n\n        if ($secure && ($token = $this->get_secure_url_token(true))) {\n            // add token to the url\n            $url = $token . '/' . $url;\n\n            // remove old token from the path\n            $base_path = rtrim($base_path, '/');\n            $base_path = preg_replace('/\\/[a-zA-Z0-9]{' . strlen($token) . '}$/', '', $base_path);\n\n            // this need to be full url to make redirects work\n            $absolute = true;\n        }\n        else if ($secure && ($token = $this->get_request_token()))\n            $url .= $delm . '_token=' . urlencode($token);\n\n        if ($absolute || $full) {\n            // add base path to this Roundcube installation\n            if ($base_path == '') $base_path = '/';\n            $prefix = $base_path;\n\n            // prepend protocol://hostname:port\n            if ($full) {\n                $prefix = rcube_utils::resolve_url($prefix);\n            }\n\n            $prefix = rtrim($prefix, '/') . '/';\n        }\n        else {\n            $prefix = './';\n        }\n\n        return $prefix . $url;\n    }\n\n    /**\n     * Function to be executed in script shutdown\n     */\n    public function shutdown()\n    {\n        parent::shutdown();\n\n        foreach ($this->address_books as $book) {\n            if (is_object($book) && is_a($book, 'rcube_addressbook'))\n                $book->close();\n        }\n\n        // write performance stats to logs/console\n        if ($this->config->get('devel_mode') || $this->config->get('performance_stats')) {\n            // make sure logged numbers use unified format\n            setlocale(LC_NUMERIC, 'en_US.utf8', 'en_US.UTF-8', 'en_US', 'C');\n\n            if (function_exists('memory_get_usage'))\n                $mem = $this->show_bytes(memory_get_usage());\n            if (function_exists('memory_get_peak_usage'))\n                $mem .= '/'.$this->show_bytes(memory_get_peak_usage());\n\n            $log = $this->task . ($this->action ? '/'.$this->action : '') . ($mem ? \" [$mem]\" : '');\n\n            if (defined('RCMAIL_START'))\n                self::print_timer(RCMAIL_START, $log);\n            else\n                self::console($log);\n        }\n    }\n\n    /**\n     * CSRF attack prevention code\n     *\n     * @param int Request mode\n     */\n    public function request_security_check($mode = rcube_utils::INPUT_POST)\n    {\n        // check request token\n        if (!$this->check_request($mode)) {\n            self::raise_error(array(\n                'code' => 403, 'type' => 'php',\n                'message' => \"Request security check failed\"), false, true);\n        }\n\n        // check referer if configured\n        if ($this->config->get('referer_check') && !rcube_utils::check_referer()) {\n            self::raise_error(array(\n                'code' => 403, 'type' => 'php',\n                'message' => \"Referer check failed\"), true, true);\n        }\n    }\n\n    /**\n     * Registers action aliases for current task\n     *\n     * @param array $map Alias-to-filename hash array\n     */\n    public function register_action_map($map)\n    {\n        if (is_array($map)) {\n            foreach ($map as $idx => $val) {\n                $this->action_map[$idx] = $val;\n            }\n        }\n    }\n\n    /**\n     * Returns current action filename\n     *\n     * @param array $map Alias-to-filename hash array\n     */\n    public function get_action_file()\n    {\n        if (!empty($this->action_map[$this->action])) {\n            return $this->action_map[$this->action];\n        }\n\n        return strtr($this->action, '-', '_') . '.inc';\n    }\n\n    /**\n     * Fixes some user preferences according to namespace handling change.\n     * Old Roundcube versions were using folder names with removed namespace prefix.\n     * Now we need to add the prefix on servers where personal namespace has prefix.\n     *\n     * @param rcube_user $user User object\n     */\n    private function fix_namespace_settings($user)\n    {\n        $prefix     = $this->storage->get_namespace('prefix');\n        $prefix_len = strlen($prefix);\n\n        if (!$prefix_len) {\n            return;\n        }\n\n        if ($this->config->get('namespace_fixed')) {\n            return;\n        }\n\n        $prefs = array();\n\n        // Build namespace prefix regexp\n        $ns     = $this->storage->get_namespace();\n        $regexp = array();\n\n        foreach ($ns as $entry) {\n            if (!empty($entry)) {\n                foreach ($entry as $item) {\n                    if (strlen($item[0])) {\n                        $regexp[] = preg_quote($item[0], '/');\n                    }\n                }\n            }\n        }\n        $regexp = '/^('. implode('|', $regexp).')/';\n\n        // Fix preferences\n        $opts = array('drafts_mbox', 'junk_mbox', 'sent_mbox', 'trash_mbox', 'archive_mbox');\n        foreach ($opts as $opt) {\n            if ($value = $this->config->get($opt)) {\n                if ($value != 'INBOX' && !preg_match($regexp, $value)) {\n                    $prefs[$opt] = $prefix.$value;\n                }\n            }\n        }\n\n        if (($search_mods = $this->config->get('search_mods')) && !empty($search_mods)) {\n            $folders = array();\n            foreach ($search_mods as $idx => $value) {\n                if ($idx != 'INBOX' && $idx != '*' && !preg_match($regexp, $idx)) {\n                    $idx = $prefix.$idx;\n                }\n                $folders[$idx] = $value;\n            }\n\n            $prefs['search_mods'] = $folders;\n        }\n\n        if (($threading = $this->config->get('message_threading')) && !empty($threading)) {\n            $folders = array();\n            foreach ($threading as $idx => $value) {\n                if ($idx != 'INBOX' && !preg_match($regexp, $idx)) {\n                    $idx = $prefix.$idx;\n                }\n                $folders[$prefix.$idx] = $value;\n            }\n\n            $prefs['message_threading'] = $folders;\n        }\n\n        if ($collapsed = $this->config->get('collapsed_folders')) {\n            $folders     = explode('&&', $collapsed);\n            $count       = count($folders);\n            $folders_str = '';\n\n            if ($count) {\n                $folders[0]        = substr($folders[0], 1);\n                $folders[$count-1] = substr($folders[$count-1], 0, -1);\n            }\n\n            foreach ($folders as $value) {\n                if ($value != 'INBOX' && !preg_match($regexp, $value)) {\n                    $value = $prefix.$value;\n                }\n                $folders_str .= '&'.$value.'&';\n            }\n\n            $prefs['collapsed_folders'] = $folders_str;\n        }\n\n        $prefs['namespace_fixed'] = true;\n\n        // save updated preferences and reset imap settings (default folders)\n        $user->save_prefs($prefs);\n        $this->set_storage_prop();\n    }\n\n    /**\n     * Overwrite action variable\n     *\n     * @param string New action value\n     */\n    public function overwrite_action($action)\n    {\n        $this->action = $action;\n        $this->output->set_env('action', $action);\n    }\n\n    /**\n     * Set environment variables for specified config options\n     */\n    public function set_env_config($options)\n    {\n        foreach ((array) $options as $option) {\n            if ($this->config->get($option)) {\n                $this->output->set_env($option, true);\n            }\n        }\n    }\n\n    /**\n     * Returns RFC2822 formatted current date in user's timezone\n     *\n     * @return string Date\n     */\n    public function user_date()\n    {\n        // get user's timezone\n        try {\n            $tz   = new DateTimeZone($this->config->get('timezone'));\n            $date = new DateTime('now', $tz);\n        }\n        catch (Exception $e) {\n            $date = new DateTime();\n        }\n\n        return $date->format('r');\n    }\n\n    /**\n     * Write login data (name, ID, IP address) to the 'userlogins' log file.\n     */\n    public function log_login($user = null, $failed_login = false, $error_code = 0)\n    {\n        if (!$this->config->get('log_logins')) {\n            return;\n        }\n\n        // failed login\n        if ($failed_login) {\n            // don't fill the log with complete input, which could\n            // have been prepared by a hacker\n            if (strlen($user) > 256) {\n                $user = substr($user, 0, 256) . '...';\n            }\n\n            $message = sprintf('Failed login for %s from %s in session %s (error: %d)',\n                $user, rcube_utils::remote_ip(), session_id(), $error_code);\n        }\n        // successful login\n        else {\n            $user_name = $this->get_user_name();\n            $user_id   = $this->get_user_id();\n\n            if (!$user_id) {\n                return;\n            }\n\n            $message = sprintf('Successful login for %s (ID: %d) from %s in session %s',\n                $user_name, $user_id, rcube_utils::remote_ip(), session_id());\n        }\n\n        // log login\n        self::write_log('userlogins', $message);\n    }\n\n    /**\n     * Create a HTML table based on the given data\n     *\n     * @param  array  Named table attributes\n     * @param  mixed  Table row data. Either a two-dimensional array or a valid SQL result set\n     * @param  array  List of cols to show\n     * @param  string Name of the identifier col\n     *\n     * @return string HTML table code\n     */\n    public function table_output($attrib, $table_data, $a_show_cols, $id_col)\n    {\n        $table = new html_table($attrib);\n\n        // add table header\n        if (!$attrib['noheader']) {\n            foreach ($a_show_cols as $col) {\n                $table->add_header($col, $this->Q($this->gettext($col)));\n            }\n        }\n\n        if (!is_array($table_data)) {\n            $db = $this->get_dbh();\n            while ($table_data && ($sql_arr = $db->fetch_assoc($table_data))) {\n                $table->add_row(array('id' => 'rcmrow' . rcube_utils::html_identifier($sql_arr[$id_col])));\n\n                // format each col\n                foreach ($a_show_cols as $col) {\n                    $table->add($col, $this->Q($sql_arr[$col]));\n                }\n            }\n        }\n        else {\n            foreach ($table_data as $row_data) {\n                $class = !empty($row_data['class']) ? $row_data['class'] : null;\n                if (!empty($attrib['rowclass']))\n                    $class = trim($class . ' ' . $attrib['rowclass']);\n                $rowid = 'rcmrow' . rcube_utils::html_identifier($row_data[$id_col]);\n\n                $table->add_row(array('id' => $rowid, 'class' => $class));\n\n                // format each col\n                foreach ($a_show_cols as $col) {\n                    $val = is_array($row_data[$col]) ? $row_data[$col][0] : $row_data[$col];\n                    $table->add($col, empty($attrib['ishtml']) ? $this->Q($val) : $val);\n                }\n            }\n        }\n\n        return $table->show($attrib);\n    }\n\n    /**\n     * Convert the given date to a human readable form\n     * This uses the date formatting properties from config\n     *\n     * @param mixed  Date representation (string, timestamp or DateTime object)\n     * @param string Date format to use\n     * @param bool   Enables date convertion according to user timezone\n     *\n     * @return string Formatted date string\n     */\n    public function format_date($date, $format = null, $convert = true)\n    {\n        if (is_object($date) && is_a($date, 'DateTime')) {\n            $timestamp = $date->format('U');\n        }\n        else {\n            if (!empty($date)) {\n                $timestamp = rcube_utils::strtotime($date);\n            }\n\n            if (empty($timestamp)) {\n                return '';\n            }\n\n            try {\n                $date = new DateTime(\"@\".$timestamp);\n            }\n            catch (Exception $e) {\n                return '';\n            }\n        }\n\n        if ($convert) {\n            try {\n                // convert to the right timezone\n                $stz = date_default_timezone_get();\n                $tz = new DateTimeZone($this->config->get('timezone'));\n                $date->setTimezone($tz);\n                date_default_timezone_set($tz->getName());\n\n                $timestamp = $date->format('U');\n            }\n            catch (Exception $e) {\n            }\n        }\n\n        // define date format depending on current time\n        if (!$format) {\n            $now         = time();\n            $now_date    = getdate($now);\n            $today_limit = mktime(0, 0, 0, $now_date['mon'], $now_date['mday'], $now_date['year']);\n            $week_limit  = mktime(0, 0, 0, $now_date['mon'], $now_date['mday']-6, $now_date['year']);\n            $pretty_date = $this->config->get('prettydate');\n\n            if ($pretty_date && $timestamp > $today_limit && $timestamp <= $now) {\n                $format = $this->config->get('date_today', $this->config->get('time_format', 'H:i'));\n                $today  = true;\n            }\n            else if ($pretty_date && $timestamp > $week_limit && $timestamp <= $now) {\n                $format = $this->config->get('date_short', 'D H:i');\n            }\n            else {\n                $format = $this->config->get('date_long', 'Y-m-d H:i');\n            }\n        }\n\n        // strftime() format\n        if (preg_match('/%[a-z]+/i', $format)) {\n            $format = strftime($format, $timestamp);\n            if ($stz) {\n                date_default_timezone_set($stz);\n            }\n            return $today ? ($this->gettext('today') . ' ' . $format) : $format;\n        }\n\n        // parse format string manually in order to provide localized weekday and month names\n        // an alternative would be to convert the date() format string to fit with strftime()\n        $out = '';\n        for ($i=0; $i<strlen($format); $i++) {\n            if ($format[$i] == \"\\\\\") {  // skip escape chars\n                continue;\n            }\n\n            // write char \"as-is\"\n            if ($format[$i] == ' ' || $format[$i-1] == \"\\\\\") {\n                $out .= $format[$i];\n            }\n            // weekday (short)\n            else if ($format[$i] == 'D') {\n                $out .= $this->gettext(strtolower(date('D', $timestamp)));\n            }\n            // weekday long\n            else if ($format[$i] == 'l') {\n                $out .= $this->gettext(strtolower(date('l', $timestamp)));\n            }\n            // month name (short)\n            else if ($format[$i] == 'M') {\n                $out .= $this->gettext(strtolower(date('M', $timestamp)));\n            }\n            // month name (long)\n            else if ($format[$i] == 'F') {\n                $out .= $this->gettext('long'.strtolower(date('M', $timestamp)));\n            }\n            else if ($format[$i] == 'x') {\n                $out .= strftime('%x %X', $timestamp);\n            }\n            else {\n                $out .= date($format[$i], $timestamp);\n            }\n        }\n\n        if ($today) {\n            $label = $this->gettext('today');\n            // replcae $ character with \"Today\" label (#1486120)\n            if (strpos($out, '$') !== false) {\n                $out = preg_replace('/\\$/', $label, $out, 1);\n            }\n            else {\n                $out = $label . ' ' . $out;\n            }\n        }\n\n        if ($stz) {\n            date_default_timezone_set($stz);\n        }\n\n        return $out;\n    }\n\n    /**\n     * Return folders list in HTML\n     *\n     * @param array $attrib Named parameters\n     *\n     * @return string HTML code for the gui object\n     */\n    public function folder_list($attrib)\n    {\n        static $a_mailboxes;\n\n        $attrib += array('maxlength' => 100, 'realnames' => false, 'unreadwrap' => ' (%s)');\n\n        $rcmail  = rcmail::get_instance();\n        $storage = $rcmail->get_storage();\n\n        // add some labels to client\n        $rcmail->output->add_label('purgefolderconfirm', 'deletemessagesconfirm');\n\n        $type = $attrib['type'] ? $attrib['type'] : 'ul';\n        unset($attrib['type']);\n\n        if ($type == 'ul' && !$attrib['id']) {\n            $attrib['id'] = 'rcmboxlist';\n        }\n\n        if (empty($attrib['folder_name'])) {\n            $attrib['folder_name'] = '*';\n        }\n\n        // get current folder\n        $mbox_name = $storage->get_folder();\n\n        // build the folders tree\n        if (empty($a_mailboxes)) {\n            // get mailbox list\n            $a_folders = $storage->list_folders_subscribed(\n                '', $attrib['folder_name'], $attrib['folder_filter']);\n            $delimiter = $storage->get_hierarchy_delimiter();\n            $a_mailboxes = array();\n\n            foreach ($a_folders as $folder) {\n                $rcmail->build_folder_tree($a_mailboxes, $folder, $delimiter);\n            }\n        }\n\n        // allow plugins to alter the folder tree or to localize folder names\n        $hook = $rcmail->plugins->exec_hook('render_mailboxlist', array(\n            'list'      => $a_mailboxes,\n            'delimiter' => $delimiter,\n            'type'      => $type,\n            'attribs'   => $attrib,\n        ));\n\n        $a_mailboxes = $hook['list'];\n        $attrib      = $hook['attribs'];\n\n        if ($type == 'select') {\n            $attrib['is_escaped'] = true;\n            $select = new html_select($attrib);\n\n            // add no-selection option\n            if ($attrib['noselection']) {\n                $select->add(html::quote($rcmail->gettext($attrib['noselection'])), '');\n            }\n\n            $rcmail->render_folder_tree_select($a_mailboxes, $mbox_name, $attrib['maxlength'], $select, $attrib['realnames']);\n            $out = $select->show($attrib['default']);\n        }\n        else {\n            $js_mailboxlist = array();\n            $tree = $rcmail->render_folder_tree_html($a_mailboxes, $mbox_name, $js_mailboxlist, $attrib);\n\n            if ($type != 'js') {\n                $out = html::tag('ul', $attrib, $tree, html::$common_attrib);\n\n                $rcmail->output->include_script('treelist.js');\n                $rcmail->output->add_gui_object('mailboxlist', $attrib['id']);\n                $rcmail->output->set_env('unreadwrap', $attrib['unreadwrap']);\n                $rcmail->output->set_env('collapsed_folders', (string)$rcmail->config->get('collapsed_folders'));\n            }\n\n            $rcmail->output->set_env('mailboxes', $js_mailboxlist);\n\n            // we can't use object keys in javascript because they are unordered\n            // we need sorted folders list for folder-selector widget\n            $rcmail->output->set_env('mailboxes_list', array_keys($js_mailboxlist));\n        }\n\n        return $out;\n    }\n\n    /**\n     * Return folders list as html_select object\n     *\n     * @param array $p  Named parameters\n     *\n     * @return html_select HTML drop-down object\n     */\n    public function folder_selector($p = array())\n    {\n        $realnames = $this->config->get('show_real_foldernames');\n        $p += array('maxlength' => 100, 'realnames' => $realnames, 'is_escaped' => true);\n        $a_mailboxes = array();\n        $storage = $this->get_storage();\n\n        if (empty($p['folder_name'])) {\n            $p['folder_name'] = '*';\n        }\n\n        if ($p['unsubscribed']) {\n            $list = $storage->list_folders('', $p['folder_name'], $p['folder_filter'], $p['folder_rights']);\n        }\n        else {\n            $list = $storage->list_folders_subscribed('', $p['folder_name'], $p['folder_filter'], $p['folder_rights']);\n        }\n\n        $delimiter = $storage->get_hierarchy_delimiter();\n\n        if (!empty($p['exceptions'])) {\n            $list = array_diff($list, (array) $p['exceptions']);\n        }\n\n        if (!empty($p['additional'])) {\n            foreach ($p['additional'] as $add_folder) {\n                $add_items = explode($delimiter, $add_folder);\n                $folder    = '';\n                while (count($add_items)) {\n                    $folder .= array_shift($add_items);\n\n                    // @TODO: sorting\n                    if (!in_array($folder, $list)) {\n                        $list[] = $folder;\n                    }\n\n                    $folder .= $delimiter;\n                }\n            }\n        }\n\n        foreach ($list as $folder) {\n            $this->build_folder_tree($a_mailboxes, $folder, $delimiter);\n        }\n\n        $select = new html_select($p);\n\n        if ($p['noselection']) {\n            $select->add(html::quote($p['noselection']), '');\n        }\n\n        $this->render_folder_tree_select($a_mailboxes, $mbox, $p['maxlength'], $select, $p['realnames'], 0, $p);\n\n        return $select;\n    }\n\n    /**\n     * Create a hierarchical array of the mailbox list\n     */\n    public function build_folder_tree(&$arrFolders, $folder, $delm = '/', $path = '')\n    {\n        // Handle namespace prefix\n        $prefix = '';\n        if (!$path) {\n            $n_folder = $folder;\n            $folder = $this->storage->mod_folder($folder);\n\n            if ($n_folder != $folder) {\n                $prefix = substr($n_folder, 0, -strlen($folder));\n            }\n        }\n\n        $pos = strpos($folder, $delm);\n\n        if ($pos !== false) {\n            $subFolders    = substr($folder, $pos+1);\n            $currentFolder = substr($folder, 0, $pos);\n\n            // sometimes folder has a delimiter as the last character\n            if (!strlen($subFolders)) {\n                $virtual = false;\n            }\n            else if (!isset($arrFolders[$currentFolder])) {\n                $virtual = true;\n            }\n            else {\n                $virtual = $arrFolders[$currentFolder]['virtual'];\n            }\n        }\n        else {\n            $subFolders    = false;\n            $currentFolder = $folder;\n            $virtual       = false;\n        }\n\n        $path .= $prefix . $currentFolder;\n\n        if (!isset($arrFolders[$currentFolder])) {\n            $arrFolders[$currentFolder] = array(\n                'id' => $path,\n                'name' => rcube_charset::convert($currentFolder, 'UTF7-IMAP'),\n                'virtual' => $virtual,\n                'folders' => array());\n        }\n        else {\n            $arrFolders[$currentFolder]['virtual'] = $virtual;\n        }\n\n        if (strlen($subFolders)) {\n            $this->build_folder_tree($arrFolders[$currentFolder]['folders'], $subFolders, $delm, $path.$delm);\n        }\n    }\n\n    /**\n     * Return html for a structured list &lt;ul&gt; for the mailbox tree\n     */\n    public function render_folder_tree_html(&$arrFolders, &$mbox_name, &$jslist, $attrib, $nestLevel = 0)\n    {\n        $maxlength = intval($attrib['maxlength']);\n        $realnames = (bool)$attrib['realnames'];\n        $msgcounts = $this->storage->get_cache('messagecount');\n        $collapsed = $this->config->get('collapsed_folders');\n        $realnames = $this->config->get('show_real_foldernames');\n\n        $out = '';\n        foreach ($arrFolders as $folder) {\n            $title        = null;\n            $folder_class = $this->folder_classname($folder['id']);\n            $is_collapsed = strpos($collapsed, '&'.rawurlencode($folder['id']).'&') !== false;\n            $unread       = $msgcounts ? intval($msgcounts[$folder['id']]['UNSEEN']) : 0;\n\n            if ($folder_class && !$realnames) {\n                $foldername = $this->gettext($folder_class);\n            }\n            else {\n                $foldername = $folder['name'];\n\n                // shorten the folder name to a given length\n                if ($maxlength && $maxlength > 1) {\n                    $fname = abbreviate_string($foldername, $maxlength);\n                    if ($fname != $foldername) {\n                        $title = $foldername;\n                    }\n                    $foldername = $fname;\n                }\n            }\n\n            // make folder name safe for ids and class names\n            $folder_id = rcube_utils::html_identifier($folder['id'], true);\n            $classes   = array('mailbox');\n\n            // set special class for Sent, Drafts, Trash and Junk\n            if ($folder_class) {\n                $classes[] = $folder_class;\n            }\n\n            if ($folder['id'] == $mbox_name) {\n                $classes[] = 'selected';\n            }\n\n            if ($folder['virtual']) {\n                $classes[] = 'virtual';\n            }\n            else if ($unread) {\n                $classes[] = 'unread';\n            }\n\n            $js_name = $this->JQ($folder['id']);\n            $html_name = $this->Q($foldername) . ($unread ? html::span('unreadcount', sprintf($attrib['unreadwrap'], $unread)) : '');\n            $link_attrib = $folder['virtual'] ? array() : array(\n                'href' => $this->url(array('_mbox' => $folder['id'])),\n                'onclick' => sprintf(\"return %s.command('list','%s',this,event)\", rcmail_output::JS_OBJECT_NAME, $js_name),\n                'rel' => $folder['id'],\n                'title' => $title,\n            );\n\n            $out .= html::tag('li', array(\n                'id' => \"rcmli\".$folder_id,\n                'class' => join(' ', $classes),\n                'noclose' => true),\n                html::a($link_attrib, $html_name));\n\n            if (!empty($folder['folders'])) {\n                $out .= html::div('treetoggle ' . ($is_collapsed ? 'collapsed' : 'expanded'), '&nbsp;');\n            }\n\n            $jslist[$folder['id']] = array(\n                'id'      => $folder['id'],\n                'name'    => $foldername,\n                'virtual' => $folder['virtual'],\n            );\n\n            if (!empty($folder_class)) {\n                $jslist[$folder['id']]['class'] = $folder_class;\n            }\n\n            if (!empty($folder['folders'])) {\n                $out .= html::tag('ul', array('style' => ($is_collapsed ? \"display:none;\" : null)),\n                    $this->render_folder_tree_html($folder['folders'], $mbox_name, $jslist, $attrib, $nestLevel+1));\n            }\n\n            $out .= \"</li>\\n\";\n        }\n\n        return $out;\n    }\n\n    /**\n     * Return html for a flat list <select> for the mailbox tree\n     */\n    public function render_folder_tree_select(&$arrFolders, &$mbox_name, $maxlength, &$select, $realnames = false, $nestLevel = 0, $opts = array())\n    {\n        $out = '';\n\n        foreach ($arrFolders as $folder) {\n            // skip exceptions (and its subfolders)\n            if (!empty($opts['exceptions']) && in_array($folder['id'], $opts['exceptions'])) {\n                continue;\n            }\n\n            // skip folders in which it isn't possible to create subfolders\n            if (!empty($opts['skip_noinferiors'])) {\n                $attrs = $this->storage->folder_attributes($folder['id']);\n                if ($attrs && in_array_nocase('\\\\Noinferiors', $attrs)) {\n                    continue;\n                }\n            }\n\n            if (!$realnames && ($folder_class = $this->folder_classname($folder['id']))) {\n                $foldername = $this->gettext($folder_class);\n            }\n            else {\n                $foldername = $folder['name'];\n\n                // shorten the folder name to a given length\n                if ($maxlength && $maxlength > 1) {\n                    $foldername = abbreviate_string($foldername, $maxlength);\n                }\n            }\n\n            $select->add(str_repeat('&nbsp;', $nestLevel*4) . html::quote($foldername), $folder['id']);\n\n            if (!empty($folder['folders'])) {\n                $out .= $this->render_folder_tree_select($folder['folders'], $mbox_name, $maxlength,\n                    $select, $realnames, $nestLevel+1, $opts);\n            }\n        }\n\n        return $out;\n    }\n\n    /**\n     * Return internal name for the given folder if it matches the configured special folders\n     */\n    public function folder_classname($folder_id)\n    {\n        if ($folder_id == 'INBOX') {\n            return 'inbox';\n        }\n\n        // for these mailboxes we have localized labels and css classes\n        foreach (array('sent', 'drafts', 'trash', 'junk') as $smbx)\n        {\n            if ($folder_id === $this->config->get($smbx.'_mbox')) {\n                return $smbx;\n            }\n        }\n    }\n\n    /**\n     * Try to localize the given IMAP folder name.\n     * UTF-7 decode it in case no localized text was found\n     *\n     * @param string $name      Folder name\n     * @param bool   $with_path Enable path localization\n     *\n     * @return string Localized folder name in UTF-8 encoding\n     */\n    public function localize_foldername($name, $with_path = false)\n    {\n        $realnames = $this->config->get('show_real_foldernames');\n\n        if (!$realnames && ($folder_class = $this->folder_classname($name))) {\n            return $this->gettext($folder_class);\n        }\n\n        // try to localize path of the folder\n        if ($with_path && !$realnames) {\n            $storage   = $this->get_storage();\n            $delimiter = $storage->get_hierarchy_delimiter();\n            $path      = explode($delimiter, $name);\n            $count     = count($path);\n\n            if ($count > 1) {\n                for ($i = 1; $i < $count; $i++) {\n                    $folder = implode($delimiter, array_slice($path, 0, -$i));\n                    if ($folder_class = $this->folder_classname($folder)) {\n                        $name = implode($delimiter, array_slice($path, $count - $i));\n                        return $this->gettext($folder_class) . $delimiter . rcube_charset::convert($name, 'UTF7-IMAP');\n                    }\n                }\n            }\n        }\n\n        return rcube_charset::convert($name, 'UTF7-IMAP');\n    }\n\n\n    public function localize_folderpath($path)\n    {\n        $protect_folders = $this->config->get('protect_default_folders');\n        $delimiter       = $this->storage->get_hierarchy_delimiter();\n        $path            = explode($delimiter, $path);\n        $result          = array();\n\n        foreach ($path as $idx => $dir) {\n            $directory = implode($delimiter, array_slice($path, 0, $idx+1));\n            if ($protect_folders && $this->storage->is_special_folder($directory)) {\n                unset($result);\n                $result[] = $this->localize_foldername($directory);\n            }\n            else {\n                $result[] = rcube_charset::convert($dir, 'UTF7-IMAP');\n            }\n        }\n\n        return implode($delimiter, $result);\n    }\n\n\n    public static function quota_display($attrib)\n    {\n        $rcmail = rcmail::get_instance();\n\n        if (!$attrib['id']) {\n            $attrib['id'] = 'rcmquotadisplay';\n        }\n\n        $_SESSION['quota_display'] = !empty($attrib['display']) ? $attrib['display'] : 'text';\n\n        $rcmail->output->add_gui_object('quotadisplay', $attrib['id']);\n\n        $quota = $rcmail->quota_content($attrib);\n\n        $rcmail->output->add_script('rcmail.set_quota('.rcube_output::json_serialize($quota).');', 'docready');\n\n        return html::span($attrib, '&nbsp;');\n    }\n\n\n    public function quota_content($attrib = null, $folder = null)\n    {\n        $quota = $this->storage->get_quota($folder);\n        $quota = $this->plugins->exec_hook('quota', $quota);\n\n        $quota_result = (array) $quota;\n        $quota_result['type']   = isset($_SESSION['quota_display']) ? $_SESSION['quota_display'] : '';\n        $quota_result['folder'] = $folder !== null && $folder !== '' ? $folder : 'INBOX';\n\n        if ($quota['total'] > 0) {\n            if (!isset($quota['percent'])) {\n                $quota_result['percent'] = min(100, round(($quota['used']/max(1,$quota['total']))*100));\n            }\n\n            $title = sprintf('%s / %s (%.0f%%)',\n                $this->show_bytes($quota['used'] * 1024), $this->show_bytes($quota['total'] * 1024),\n                $quota_result['percent']);\n\n            $quota_result['title'] = $title;\n\n            if ($attrib['width']) {\n                $quota_result['width'] = $attrib['width'];\n            }\n            if ($attrib['height']) {\n                $quota_result['height'] = $attrib['height'];\n            }\n\n            // build a table of quota types/roots info\n            if (($root_cnt = count($quota_result['all'])) > 1 || count($quota_result['all'][key($quota_result['all'])]) > 1) {\n                $table = new html_table(array('cols' => 3, 'class' => 'quota-info'));\n\n                $table->add_header(null, self::Q($this->gettext('quotatype')));\n                $table->add_header(null, self::Q($this->gettext('quotatotal')));\n                $table->add_header(null, self::Q($this->gettext('quotaused')));\n\n                foreach ($quota_result['all'] as $root => $data) {\n                    if ($root_cnt > 1 && $root) {\n                        $table->add(array('colspan' => 3, 'class' => 'root'), self::Q($root));\n                    }\n\n                    if ($storage = $data['storage']) {\n                        $percent = min(100, round(($storage['used']/max(1,$storage['total']))*100));\n\n                        $table->add('name', self::Q($this->gettext('quotastorage')));\n                        $table->add(null, $this->show_bytes($storage['total'] * 1024));\n                        $table->add(null, sprintf('%s (%.0f%%)', $this->show_bytes($storage['used'] * 1024), $percent));\n                    }\n                    if ($message = $data['message']) {\n                        $percent = min(100, round(($message['used']/max(1,$message['total']))*100));\n\n                        $table->add('name', self::Q($this->gettext('quotamessage')));\n                        $table->add(null, intval($message['total']));\n                        $table->add(null, sprintf('%d (%.0f%%)', $message['used'], $percent));\n                    }\n                }\n\n                $quota_result['table'] = $table->show();\n            }\n        }\n        else {\n            $unlimited               = $this->config->get('quota_zero_as_unlimited');\n            $quota_result['title']   = $this->gettext($unlimited ? 'unlimited' : 'unknown');\n            $quota_result['percent'] = 0;\n        }\n\n        // cleanup\n        unset($quota_result['abort']);\n        if (empty($quota_result['table'])) {\n            unset($quota_result['all']);\n        }\n\n        return $quota_result;\n    }\n\n    /**\n     * Outputs error message according to server error/response codes\n     *\n     * @param string $fallback       Fallback message label\n     * @param array  $fallback_args  Fallback message label arguments\n     * @param string $suffix         Message label suffix\n     * @param array  $params         Additional parameters (type, prefix)\n     */\n    public function display_server_error($fallback = null, $fallback_args = null, $suffix = '', $params = array())\n    {\n        $err_code = $this->storage->get_error_code();\n        $res_code = $this->storage->get_response_code();\n        $args     = array();\n\n        if ($res_code == rcube_storage::NOPERM) {\n            $error = 'errornoperm';\n        }\n        else if ($res_code == rcube_storage::READONLY) {\n            $error = 'errorreadonly';\n        }\n        else if ($res_code == rcube_storage::OVERQUOTA) {\n            $error = 'erroroverquota';\n        }\n        else if ($err_code && ($err_str = $this->storage->get_error_str())) {\n            // try to detect access rights problem and display appropriate message\n            if (stripos($err_str, 'Permission denied') !== false) {\n                $error = 'errornoperm';\n            }\n            // try to detect full mailbox problem and display appropriate message\n            // there can be e.g. \"Quota exceeded\" / \"quotum would exceed\" / \"Over quota\"\n            else if (stripos($err_str, 'quot') !== false && preg_match('/exceed|over/i', $err_str)) {\n                $error = 'erroroverquota';\n            }\n            else {\n                $error = 'servererrormsg';\n                $args  = array('msg' => rcube::Q($err_str));\n            }\n        }\n        else if ($err_code < 0) {\n            $error = 'storageerror';\n        }\n        else if ($fallback) {\n            $error = $fallback;\n            $args  = $fallback_args;\n            $params['prefix'] = false;\n        }\n\n        if ($error) {\n            if ($suffix && $this->text_exists($error . $suffix)) {\n                $error .= $suffix;\n            }\n\n            $msg = $this->gettext(array('name' => $error, 'vars' => $args));\n\n            if ($params['prefix'] && $fallback) {\n                $msg = $this->gettext(array('name' => $fallback, 'vars' => $fallback_args)) . ' ' . $msg;\n            }\n\n            $this->output->show_message($msg, $params['type'] ?: 'error');\n        }\n    }\n\n    /**\n     * Output HTML editor scripts\n     *\n     * @param string $mode  Editor mode\n     */\n    public function html_editor($mode = '')\n    {\n        $spellcheck       = intval($this->config->get('enable_spellcheck'));\n        $spelldict        = intval($this->config->get('spellcheck_dictionary'));\n        $disabled_plugins = array();\n        $disabled_buttons = array();\n        $extra_plugins    = array();\n        $extra_buttons    = array();\n\n        if (!$spellcheck) {\n            $disabled_plugins[] = 'spellchecker';\n        }\n\n        $hook = $this->plugins->exec_hook('html_editor', array(\n                'mode'             => $mode,\n                'disabled_plugins' => $disabled_plugins,\n                'disabled_buttons' => $disabled_buttons,\n                'extra_plugins' => $extra_plugins,\n                'extra_buttons' => $extra_buttons,\n        ));\n\n        if ($hook['abort']) {\n            return;\n        }\n\n        $lang_codes = array($_SESSION['language']);\n\n        if ($pos = strpos($_SESSION['language'], '_')) {\n            $lang_codes[] = substr($_SESSION['language'], 0, $pos);\n        }\n\n        foreach ($lang_codes as $code) {\n            if (file_exists(INSTALL_PATH . 'program/js/tinymce/langs/'.$code.'.js')) {\n                $lang = $code;\n                break;\n            }\n        }\n\n        if (empty($lang)) {\n            $lang = 'en';\n        }\n\n        $config = array(\n            'mode'       => $mode,\n            'lang'       => $lang,\n            'skin_path'  => $this->output->get_skin_path(),\n            'spellcheck' => $spellcheck, // deprecated\n            'spelldict'  => $spelldict,\n            'disabled_plugins' => $hook['disabled_plugins'],\n            'disabled_buttons' => $hook['disabled_buttons'],\n            'extra_plugins'    => $hook['extra_plugins'],\n            'extra_buttons'    => $hook['extra_buttons'],\n        );\n\n        $this->output->add_label('selectimage', 'addimage', 'selectmedia', 'addmedia');\n        $this->output->set_env('editor_config', $config);\n        $this->output->include_css('program/js/tinymce/roundcube/browser.css');\n        $this->output->include_script('tinymce/tinymce.min.js');\n        $this->output->include_script('editor.js');\n    }\n\n    /**\n     * File upload progress handler.\n     */\n    public function upload_progress()\n    {\n        $params = array(\n            'action' => $this->action,\n            'name'   => rcube_utils::get_input_value('_progress', rcube_utils::INPUT_GET),\n        );\n\n        if (function_exists('uploadprogress_get_info')) {\n            $status = uploadprogress_get_info($params['name']);\n\n            if (!empty($status)) {\n                $params['current'] = $status['bytes_uploaded'];\n                $params['total']   = $status['bytes_total'];\n            }\n        }\n\n        if (!isset($status) && filter_var(ini_get('apc.rfc1867'), FILTER_VALIDATE_BOOLEAN)\n            && ini_get('apc.rfc1867_name')\n        ) {\n            $prefix = ini_get('apc.rfc1867_prefix');\n            $status = apc_fetch($prefix . $params['name']);\n\n            if (!empty($status)) {\n                $params['current'] = $status['current'];\n                $params['total']   = $status['total'];\n            }\n        }\n\n        if (!isset($status) && filter_var(ini_get('session.upload_progress.enabled'), FILTER_VALIDATE_BOOLEAN)\n            && ini_get('session.upload_progress.name')\n        ) {\n            $key = ini_get('session.upload_progress.prefix') . $params['name'];\n\n            $params['total']   = $_SESSION[$key]['content_length'];\n            $params['current'] = $_SESSION[$key]['bytes_processed'];\n        }\n\n        if (!empty($params['total'])) {\n            $total = $this->show_bytes($params['total'], $unit);\n            switch ($unit) {\n            case 'GB':\n                $gb      = $params['current']/1073741824;\n                $current = sprintf($gb >= 10 ? \"%d\" : \"%.1f\", $gb);\n                break;\n            case 'MB':\n                $mb      = $params['current']/1048576;\n                $current = sprintf($mb >= 10 ? \"%d\" : \"%.1f\", $mb);\n                break;\n            case 'KB':\n                $current = round($params['current']/1024);\n                break;\n            case 'B':\n            default:\n                $current = $params['current'];\n                break;\n            }\n\n            $params['percent'] = round($params['current']/$params['total']*100);\n            $params['text']    = $this->gettext(array(\n                'name' => 'uploadprogress',\n                'vars' => array(\n                    'percent' => $params['percent'] . '%',\n                    'current' => $current,\n                    'total'   => $total\n                )\n            ));\n        }\n\n        $this->output->command('upload_progress_update', $params);\n        $this->output->send();\n    }\n\n    /**\n     * Initializes file uploading interface.\n     *\n     * @param $int Optional maximum file size in bytes\n     */\n    public function upload_init($max_size = null)\n    {\n        // Enable upload progress bar\n        if ($seconds = $this->config->get('upload_progress')) {\n            if (function_exists('uploadprogress_get_info')) {\n                $field_name = 'UPLOAD_IDENTIFIER';\n            }\n            if (!$field_name && filter_var(ini_get('apc.rfc1867'), FILTER_VALIDATE_BOOLEAN)) {\n                $field_name = ini_get('apc.rfc1867_name');\n            }\n            if (!$field_name && filter_var(ini_get('session.upload_progress.enabled'), FILTER_VALIDATE_BOOLEAN)) {\n                $field_name = ini_get('session.upload_progress.name');\n            }\n\n            if ($field_name) {\n                $this->output->set_env('upload_progress_name', $field_name);\n                $this->output->set_env('upload_progress_time', (int) $seconds);\n            }\n        }\n\n        // find max filesize value\n        $max_filesize = parse_bytes(ini_get('upload_max_filesize'));\n        $max_postsize = parse_bytes(ini_get('post_max_size'));\n\n        if ($max_postsize && $max_postsize < $max_filesize) {\n            $max_filesize = $max_postsize;\n        }\n\n        if ($max_size && $max_size < $max_filesize) {\n            $max_filesize = $max_size;\n        }\n\n        $this->output->set_env('max_filesize', $max_filesize);\n        $max_filesize = $this->show_bytes($max_filesize);\n        $this->output->set_env('filesizeerror', $this->gettext(array(\n            'name' => 'filesizeerror', 'vars' => array('size' => $max_filesize))));\n\n        return $max_filesize;\n    }\n\n    /**\n     * Outputs uploaded file content (with image thumbnails support\n     *\n     * @param array $file Upload file data\n     */\n    public function display_uploaded_file($file)\n    {\n        if (empty($file)) {\n            return;\n        }\n\n        $file = $this->plugins->exec_hook('attachment_display', $file);\n\n        if ($file['status']) {\n            if (empty($file['size'])) {\n                $file['size'] = $file['data'] ? strlen($file['data']) : @filesize($file['path']);\n            }\n\n            // generate image thumbnail for file browser in HTML editor\n            if (!empty($_GET['_thumbnail'])) {\n                $temp_dir       = $this->config->get('temp_dir');\n                $thumbnail_size = 80;\n                $mimetype       = $file['mimetype'];\n                $file_ident     = $file['id'] . ':' . $file['mimetype'] . ':' . $file['size'];\n                $cache_basename = $temp_dir . '/' . md5($file_ident . ':' . $this->user->ID . ':' . $thumbnail_size);\n                $cache_file     = $cache_basename . '.thumb';\n\n                // render thumbnail image if not done yet\n                if (!is_file($cache_file)) {\n                    if (!$file['path']) {\n                        $orig_name = $filename = $cache_basename . '.tmp';\n                        file_put_contents($orig_name, $file['data']);\n                    }\n                    else {\n                        $filename = $file['path'];\n                    }\n\n                    $image = new rcube_image($filename);\n                    if ($imgtype = $image->resize($thumbnail_size, $cache_file, true)) {\n                        $mimetype = 'image/' . $imgtype;\n\n                        if ($orig_name) {\n                            unlink($orig_name);\n                        }\n                    }\n                }\n\n                if (is_file($cache_file)) {\n                    // cache for 1h\n                    $this->output->future_expire_header(3600);\n                    header('Content-Type: ' . $mimetype);\n                    header('Content-Length: ' . filesize($cache_file));\n\n                    readfile($cache_file);\n                    exit;\n                }\n            }\n\n            header('Content-Type: ' . $file['mimetype']);\n            header('Content-Length: ' . $file['size']);\n\n            if ($file['data']) {\n                echo $file['data'];\n            }\n            else if ($file['path']) {\n                readfile($file['path']);\n            }\n        }\n    }\n\n    /**\n     * Initializes client-side autocompletion.\n     */\n    public function autocomplete_init()\n    {\n        static $init;\n\n        if ($init) {\n            return;\n        }\n\n        $init = 1;\n\n        if (($threads = (int)$this->config->get('autocomplete_threads')) > 0) {\n            $book_types = (array) $this->config->get('autocomplete_addressbooks', 'sql');\n            if (count($book_types) > 1) {\n                $this->output->set_env('autocomplete_threads', $threads);\n                $this->output->set_env('autocomplete_sources', $book_types);\n            }\n        }\n\n        $this->output->set_env('autocomplete_max', (int)$this->config->get('autocomplete_max', 15));\n        $this->output->set_env('autocomplete_min_length', $this->config->get('autocomplete_min_length'));\n        $this->output->add_label('autocompletechars', 'autocompletemore');\n    }\n\n    /**\n     * Returns supported font-family specifications\n     *\n     * @param string $font  Font name\n     *\n     * @param string|array Font-family specification array or string (if $font is used)\n     */\n    public static function font_defs($font = null)\n    {\n        $fonts = array(\n            'Andale Mono'   => '\"Andale Mono\",Times,monospace',\n            'Arial'         => 'Arial,Helvetica,sans-serif',\n            'Arial Black'   => '\"Arial Black\",\"Avant Garde\",sans-serif',\n            'Book Antiqua'  => '\"Book Antiqua\",Palatino,serif',\n            'Courier New'   => '\"Courier New\",Courier,monospace',\n            'Georgia'       => 'Georgia,Palatino,serif',\n            'Helvetica'     => 'Helvetica,Arial,sans-serif',\n            'Impact'        => 'Impact,Chicago,sans-serif',\n            'Tahoma'        => 'Tahoma,Arial,Helvetica,sans-serif',\n            'Terminal'      => 'Terminal,Monaco,monospace',\n            'Times New Roman' => '\"Times New Roman\",Times,serif',\n            'Trebuchet MS'  => '\"Trebuchet MS\",Geneva,sans-serif',\n            'Verdana'       => 'Verdana,Geneva,sans-serif',\n        );\n\n        if ($font) {\n            return $fonts[$font];\n        }\n\n        return $fonts;\n    }\n\n    /**\n     * Create a human readable string for a number of bytes\n     *\n     * @param int    Number of bytes\n     * @param string Size unit\n     *\n     * @return string Byte string\n     */\n    public function show_bytes($bytes, &$unit = null)\n    {\n        if ($bytes >= 1073741824) {\n            $unit = 'GB';\n            $gb   = $bytes/1073741824;\n            $str  = sprintf($gb >= 10 ? \"%d \" : \"%.1f \", $gb) . $this->gettext($unit);\n        }\n        else if ($bytes >= 1048576) {\n            $unit = 'MB';\n            $mb   = $bytes/1048576;\n            $str  = sprintf($mb >= 10 ? \"%d \" : \"%.1f \", $mb) . $this->gettext($unit);\n        }\n        else if ($bytes >= 1024) {\n            $unit = 'KB';\n            $str  = sprintf(\"%d \",  round($bytes/1024)) . $this->gettext($unit);\n        }\n        else {\n            $unit = 'B';\n            $str  = sprintf('%d ', $bytes) . $this->gettext($unit);\n        }\n\n        return $str;\n    }\n\n    /**\n     * Returns real size (calculated) of the message part\n     *\n     * @param rcube_message_part  Message part\n     *\n     * @return string Part size (and unit)\n     */\n    public function message_part_size($part)\n    {\n        if (isset($part->d_parameters['size'])) {\n            $size = $this->show_bytes((int)$part->d_parameters['size']);\n        }\n        else {\n          $size = $part->size;\n          if ($part->encoding == 'base64') {\n            $size = $size / 1.33;\n          }\n\n          $size = '~' . $this->show_bytes($size);\n        }\n\n        return $size;\n    }\n\n    /**\n     * Returns message UID(s) and IMAP folder(s) from GET/POST data\n     *\n     * @param string UID value to decode\n     * @param string Default mailbox value (if not encoded in UIDs)\n     * @param bool   Will be set to True if multi-folder request\n     *\n     * @return array  List of message UIDs per folder\n     */\n    public static function get_uids($uids = null, $mbox = null, &$is_multifolder = false)\n    {\n        // message UID (or comma-separated list of IDs) is provided in\n        // the form of <ID>-<MBOX>[,<ID>-<MBOX>]*\n\n        $_uid  = $uids ?: rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GPC);\n        $_mbox = $mbox ?: (string) rcube_utils::get_input_value('_mbox', rcube_utils::INPUT_GPC);\n\n        // already a hash array\n        if (is_array($_uid) && !isset($_uid[0])) {\n            return $_uid;\n        }\n\n        $result = array();\n\n        // special case: *\n        if ($_uid == '*' && is_object($_SESSION['search'][1]) && $_SESSION['search'][1]->multi) {\n            $is_multifolder = true;\n            // extract the full list of UIDs per folder from the search set\n            foreach ($_SESSION['search'][1]->sets as $subset) {\n                $mbox = $subset->get_parameters('MAILBOX');\n                $result[$mbox] = $subset->get();\n            }\n        }\n        else {\n            if (is_string($_uid))\n                $_uid = explode(',', $_uid);\n\n            // create a per-folder UIDs array\n            foreach ((array)$_uid as $uid) {\n                list($uid, $mbox) = explode('-', $uid, 2);\n                if (!strlen($mbox)) {\n                    $mbox = $_mbox;\n                }\n                else {\n                    $is_multifolder = true;\n                }\n\n                if ($uid == '*') {\n                    $result[$mbox] = $uid;\n                }\n                else {\n                    $result[$mbox][] = $uid;\n                }\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Get resource file content (with assets_dir support)\n     *\n     * @param string $name File name\n     */\n    public function get_resource_content($name)\n    {\n        if (!strpos($name, '/')) {\n            $name = \"program/resources/$name\";\n        }\n\n        $assets_dir = $this->config->get('assets_dir');\n\n        if ($assets_dir) {\n            $path = slashify($assets_dir) . $name;\n            if (@file_exists($path)) {\n                $name = $path;\n            }\n        }\n\n        return file_get_contents($name, false);\n    }\n\n    /**\n     * Converts HTML content into plain text\n     *\n     * @param string $html    HTML content\n     * @param array  $options Conversion parameters (width, links, charset)\n     *\n     * @return string Plain text\n     */\n    public function html2text($html, $options = array())\n    {\n        $default_options = array(\n            'links'   => true,\n            'width'   => 75,\n            'body'    => $html,\n            'charset' => RCUBE_CHARSET,\n        );\n\n        $options = array_merge($default_options, (array) $options);\n\n        // Plugins may want to modify HTML in another/additional way\n        $options = $this->plugins->exec_hook('html2text', $options);\n\n        // Convert to text\n        if (!$options['abort']) {\n            $converter = new rcube_html2text($options['body'],\n                false, $options['links'], $options['width'], $options['charset']);\n\n            $options['body'] = rtrim($converter->get_text());\n        }\n\n        return $options['body'];\n    }\n\n    /**\n     * Connect to the mail storage server with stored session data\n     *\n     * @return bool True on success, False on error\n     */\n    public function storage_connect()\n    {\n        $storage = $this->get_storage();\n\n        if ($_SESSION['storage_host'] && !$storage->is_connected()) {\n            $host = $_SESSION['storage_host'];\n            $user = $_SESSION['username'];\n            $port = $_SESSION['storage_port'];\n            $ssl  = $_SESSION['storage_ssl'];\n            $pass = $this->decrypt($_SESSION['password']);\n\n            if (!$storage->connect($host, $user, $pass, $port, $ssl)) {\n                if (is_object($this->output)) {\n                    $this->output->show_message('storageerror', 'error');\n                }\n            }\n            else {\n                $this->set_storage_prop();\n            }\n        }\n\n        return $storage->is_connected();\n    }\n}\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | program/include/rcmail_output_html.php                                |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2006-2014, The Roundcube Dev Team                       |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Class to handle HTML page output using a skin template.             |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Class to create HTML page output using a skin template\n *\n * @package Webmail\n * @subpackage View\n */\nclass rcmail_output_html extends rcmail_output\n{\n    public $type = 'html';\n\n    protected $message;\n    protected $template_name;\n    protected $js_env       = array();\n    protected $js_labels    = array();\n    protected $js_commands  = array();\n    protected $skin_paths   = array();\n    protected $scripts_path = '';\n    protected $script_files = array();\n    protected $css_files    = array();\n    protected $scripts      = array();\n    protected $default_template = \"<html>\\n<head><title></title></head>\\n<body></body>\\n</html>\";\n    protected $header = '';\n    protected $footer = '';\n    protected $body = '';\n    protected $base_path = '';\n    protected $assets_path;\n    protected $assets_dir = RCUBE_INSTALL_PATH;\n    protected $devel_mode = false;\n\n    // deprecated names of templates used before 0.5\n    protected $deprecated_templates = array(\n        'contact'      => 'showcontact',\n        'contactadd'   => 'addcontact',\n        'contactedit'  => 'editcontact',\n        'identityedit' => 'editidentity',\n        'messageprint' => 'printmessage',\n    );\n\n    /**\n     * Constructor\n     */\n    public function __construct($task = null, $framed = false)\n    {\n        parent::__construct();\n\n        $this->devel_mode = $this->config->get('devel_mode');\n\n        $this->set_env('task', $task);\n        $this->set_env('x_frame_options', $this->config->get('x_frame_options', 'sameorigin'));\n        $this->set_env('standard_windows', (bool) $this->config->get('standard_windows'));\n        $this->set_env('locale', $_SESSION['language']);\n\n        // add cookie info\n        $this->set_env('cookie_domain', ini_get('session.cookie_domain'));\n        $this->set_env('cookie_path', ini_get('session.cookie_path'));\n        $this->set_env('cookie_secure', filter_var(ini_get('session.cookie_secure'), FILTER_VALIDATE_BOOLEAN));\n\n        // load the correct skin (in case user-defined)\n        $skin = $this->config->get('skin');\n        $this->set_skin($skin);\n        $this->set_env('skin', $skin);\n\n        $this->set_assets_path($this->config->get('assets_path'), $this->config->get('assets_dir'));\n\n        if (!empty($_REQUEST['_extwin']))\n            $this->set_env('extwin', 1);\n        if ($this->framed || $framed)\n            $this->set_env('framed', 1);\n\n        $lic = <<<EOF\n/*\n        @licstart  The following is the entire license notice for the \n        JavaScript code in this page.\n\n        Copyright (C) 2005-2014 The Roundcube Dev Team\n\n        The JavaScript code in this page is free software: you can redistribute\n        it and/or modify it under the terms of the GNU General Public License\n        as published by the Free Software Foundation, either version 3 of\n        the License, or (at your option) any later version.\n\n        The code is distributed WITHOUT ANY WARRANTY; without even the implied\n        warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n        See the GNU GPL for more details.\n\n        @licend  The above is the entire license notice\n        for the JavaScript code in this page.\n*/\nEOF;\n        // add common javascripts\n        $this->add_script($lic, 'head_top');\n        $this->add_script('var '.self::JS_OBJECT_NAME.' = new rcube_webmail();', 'head_top');\n\n        // don't wait for page onload. Call init at the bottom of the page (delayed)\n        $this->add_script(self::JS_OBJECT_NAME.'.init();', 'docready');\n\n        $this->scripts_path = 'program/js/';\n        $this->include_script('jquery.min.js');\n        $this->include_script('common.js');\n        $this->include_script('app.js');\n\n        // register common UI objects\n        $this->add_handlers(array(\n            'loginform'       => array($this, 'login_form'),\n            'preloader'       => array($this, 'preloader'),\n            'username'        => array($this, 'current_username'),\n            'message'         => array($this, 'message_container'),\n            'charsetselector' => array($this, 'charset_selector'),\n            'aboutcontent'    => array($this, 'about_content'),\n        ));\n    }\n\n    /**\n     * Set environment variable\n     *\n     * @param string Property name\n     * @param mixed Property value\n     * @param boolean True if this property should be added to client environment\n     */\n    public function set_env($name, $value, $addtojs = true)\n    {\n        $this->env[$name] = $value;\n\n        if ($addtojs || isset($this->js_env[$name])) {\n            $this->js_env[$name] = $value;\n        }\n    }\n\n    /**\n     * Parse and set assets path\n     *\n     * @param string Assets path (relative or absolute URL)\n     */\n    public function set_assets_path($path, $fs_dir = null)\n    {\n        if (empty($path)) {\n            return;\n        }\n\n        $path = rtrim($path, '/') . '/';\n\n        // handle relative assets path\n        if (!preg_match('|^https?://|', $path) && $path[0] != '/') {\n            // save the path to search for asset files later\n            $this->assets_dir = $path;\n\n            $base = preg_replace('/[?#&].*$/', '', $_SERVER['REQUEST_URI']);\n            $base = rtrim($base, '/');\n\n            // remove url token if exists\n            if ($len = intval($this->config->get('use_secure_urls'))) {\n                $_base  = explode('/', $base);\n                $last   = count($_base) - 1;\n                $length = $len > 1 ? $len : 16; // as in rcube::get_secure_url_token()\n\n                // we can't use real token here because it\n                // does not exists in unauthenticated state,\n                // hope this will not produce false-positive matches\n                if ($last > -1 && preg_match('/^[a-f0-9]{' . $length . '}$/', $_base[$last])) {\n                    $path = '../' . $path;\n                }\n            }\n        }\n\n        // set filesystem path for assets\n        if ($fs_dir) {\n            if ($fs_dir[0] != '/') {\n                $fs_dir = realpath(RCUBE_INSTALL_PATH . $fs_dir);\n            }\n            // ensure the path ends with a slash\n            $this->assets_dir = rtrim($fs_dir, '/') . '/';\n        }\n\n        $this->assets_path = $path;\n        $this->set_env('assets_path', $path);\n    }\n\n    /**\n     * Getter for the current page title\n     *\n     * @return string The page title\n     */\n    protected function get_pagetitle()\n    {\n        if (!empty($this->pagetitle)) {\n            $title = $this->pagetitle;\n        }\n        else if ($this->env['task'] == 'login') {\n            $title = $this->app->gettext(array(\n                'name' => 'welcome',\n                'vars' => array('product' => $this->config->get('product_name')\n            )));\n        }\n        else {\n            $title = ucfirst($this->env['task']);\n        }\n\n        return $title;\n    }\n\n    /**\n     * Set skin\n     */\n    public function set_skin($skin)\n    {\n        // Sanity check to prevent from path traversal vulnerability (#1490620)\n        if (strpos($skin, '/') !== false || strpos($skin, \"\\\\\") !== false) {\n            rcube::raise_error(array(\n                    'file'    => __FILE__,\n                    'line'    => __LINE__,\n                    'message' => 'Invalid skin name'\n                ), true, false);\n\n            return false;\n        }\n\n        $valid = false;\n        $path  = RCUBE_INSTALL_PATH . 'skins/';\n\n        if (!empty($skin) && is_dir($path . $skin) && is_readable($path . $skin)) {\n            $skin_path = 'skins/' . $skin;\n            $valid     = true;\n        }\n        else {\n            $skin_path = $this->config->get('skin_path');\n            if (!$skin_path) {\n                $skin_path = 'skins/' . rcube_config::DEFAULT_SKIN;\n            }\n            $valid = !$skin;\n        }\n\n        $skin_path = rtrim($skin_path, '/');\n\n        $this->config->set('skin_path', $skin_path);\n        $this->base_path = $skin_path;\n\n        // register skin path(s)\n        $this->skin_paths = array();\n        $this->load_skin($skin_path);\n\n        return $valid;\n    }\n\n    /**\n     * Helper method to recursively read skin meta files and register search paths\n     */\n    private function load_skin($skin_path)\n    {\n        $this->skin_paths[] = $skin_path;\n\n        // read meta file and check for dependecies\n        $meta = @file_get_contents(RCUBE_INSTALL_PATH . $skin_path . '/meta.json');\n        $meta = @json_decode($meta, true);\n\n        $meta['path']  = $skin_path;\n        $path_elements = explode('/', $skin_path);\n        $skin_id       = end($path_elements);\n\n        if (!$meta['name']) {\n            $meta['name'] = $skin_id;\n        }\n\n        $this->skins[$skin_id] = $meta;\n\n        if ($meta['extends']) {\n            $path = RCUBE_INSTALL_PATH . 'skins/';\n            if (is_dir($path . $meta['extends']) && is_readable($path . $meta['extends'])) {\n                $this->load_skin('skins/' . $meta['extends']);\n            }\n        }\n    }\n\n    /**\n     * Check if a specific template exists\n     *\n     * @param string Template name\n     * @return boolean True if template exists\n     */\n    public function template_exists($name)\n    {\n        foreach ($this->skin_paths as $skin_path) {\n            $filename = RCUBE_INSTALL_PATH . $skin_path . '/templates/' . $name . '.html';\n            if ((is_file($filename) && is_readable($filename))\n                || ($this->deprecated_templates[$name] && $this->template_exists($this->deprecated_templates[$name]))\n            ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Find the given file in the current skin path stack\n     *\n     * @param string File name/path to resolve (starting with /)\n     * @param string Reference to the base path of the matching skin\n     * @param string Additional path to search in\n     *\n     * @return mixed Relative path to the requested file or False if not found\n     */\n    public function get_skin_file($file, &$skin_path = null, $add_path = null)\n    {\n        $skin_paths = $this->skin_paths;\n        if ($add_path) {\n            array_unshift($skin_paths, $add_path);\n        }\n\n        foreach ($skin_paths as $skin_path) {\n            $path = realpath(RCUBE_INSTALL_PATH . $skin_path . $file);\n\n            if ($path && is_file($path)) {\n                return $skin_path . $file;\n            }\n\n            if ($this->assets_dir != RCUBE_INSTALL_PATH) {\n                $path = realpath($this->assets_dir . $skin_path . $file);\n\n                if ($path && is_file($path)) {\n                    return $skin_path . $file;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Register a GUI object to the client script\n     *\n     * @param  string Object name\n     * @param  string Object ID\n     * @return void\n     */\n    public function add_gui_object($obj, $id)\n    {\n        $this->add_script(self::JS_OBJECT_NAME.\".gui_object('$obj', '$id');\");\n    }\n\n    /**\n     * Call a client method\n     *\n     * @param string Method to call\n     * @param ... Additional arguments\n     */\n    public function command()\n    {\n        $cmd = func_get_args();\n        if (strpos($cmd[0], 'plugin.') !== false)\n            $this->js_commands[] = array('triggerEvent', $cmd[0], $cmd[1]);\n        else\n            $this->js_commands[] = $cmd;\n    }\n\n    /**\n     * Add a localized label to the client environment\n     */\n    public function add_label()\n    {\n        $args = func_get_args();\n        if (count($args) == 1 && is_array($args[0]))\n            $args = $args[0];\n\n        foreach ($args as $name) {\n            $this->js_labels[$name] = $this->app->gettext($name);\n        }\n    }\n\n    /**\n     * Invoke display_message command\n     *\n     * @param string  $message  Message to display\n     * @param string  $type     Message type [notice|confirm|error]\n     * @param array   $vars     Key-value pairs to be replaced in localized text\n     * @param boolean $override Override last set message\n     * @param int     $timeout  Message display time in seconds\n     * @uses self::command()\n     */\n    public function show_message($message, $type='notice', $vars=null, $override=true, $timeout=0)\n    {\n        if ($override || !$this->message) {\n            if ($this->app->text_exists($message)) {\n                if (!empty($vars))\n                    $vars = array_map(array('rcube','Q'), $vars);\n                $msgtext = $this->app->gettext(array('name' => $message, 'vars' => $vars));\n            }\n            else\n                $msgtext = $message;\n\n            $this->message = $message;\n            $this->command('display_message', $msgtext, $type, $timeout * 1000);\n        }\n    }\n\n    /**\n     * Delete all stored env variables and commands\n     *\n     * @param bool $all Reset all env variables (including internal)\n     */\n    public function reset($all = false)\n    {\n        $framed = $this->framed;\n        $env    = $all ? null : array_intersect_key($this->env, array('extwin'=>1, 'framed'=>1));\n\n        parent::reset();\n\n        // let some env variables survive\n        $this->env          = $this->js_env = $env;\n        $this->framed       = $framed || $this->env['framed'];\n        $this->js_labels    = array();\n        $this->js_commands  = array();\n        $this->script_files = array();\n        $this->scripts      = array();\n        $this->header       = '';\n        $this->footer       = '';\n        $this->body         = '';\n\n        // load defaults\n        if (!$all) {\n            $this->__construct();\n        }\n    }\n\n    /**\n     * Redirect to a certain url\n     *\n     * @param mixed $p      Either a string with the action or url parameters as key-value pairs\n     * @param int   $delay  Delay in seconds\n     * @param bool  $secure Redirect to secure location (see rcmail::url())\n     */\n    public function redirect($p = array(), $delay = 1, $secure = false)\n    {\n        if ($this->env['extwin'])\n            $p['extwin'] = 1;\n        $location = $this->app->url($p, false, false, $secure);\n        header('Location: ' . $location);\n        exit;\n    }\n\n    /**\n     * Send the request output to the client.\n     * This will either parse a skin tempalte or send an AJAX response\n     *\n     * @param string  Template name\n     * @param boolean True if script should terminate (default)\n     */\n    public function send($templ = null, $exit = true)\n    {\n        if ($templ != 'iframe') {\n            // prevent from endless loops\n            if ($exit != 'recur' && $this->app->plugins->is_processing('render_page')) {\n                rcube::raise_error(array('code' => 505, 'type' => 'php',\n                  'file' => __FILE__, 'line' => __LINE__,\n                  'message' => 'Recursion alert: ignoring output->send()'), true, false);\n                return;\n            }\n            $this->parse($templ, false);\n        }\n        else {\n            $this->framed = true;\n            $this->write();\n        }\n\n        // set output asap\n        ob_flush();\n        flush();\n\n        if ($exit) {\n            exit;\n        }\n    }\n\n    /**\n     * Process template and write to stdOut\n     *\n     * @param string $template HTML template content\n     */\n    public function write($template = '')\n    {\n        if (!empty($this->script_files)) {\n            $this->set_env('request_token', $this->app->get_request_token());\n        }\n\n        $commands = $this->get_js_commands($framed);\n\n        // if all js commands go to parent window we can ignore all\n        // script files and skip rcube_webmail initialization (#1489792)\n        if ($framed) {\n            $this->scripts      = array();\n            $this->script_files = array();\n            $this->header       = '';\n            $this->footer       = '';\n        }\n\n        // write all javascript commands\n        $this->add_script($commands, 'head_top');\n\n        // allow (legal) iframe content to be loaded\n        $iframe = $this->framed || $this->env['framed'];\n        if (!headers_sent() && $iframe && $this->app->config->get('x_frame_options', 'sameorigin') === 'deny') {\n            header('X-Frame-Options: sameorigin', true);\n        }\n\n        // call super method\n        $this->_write($template, $this->config->get('skin_path'));\n    }\n\n    /**\n     * Parse a specific skin template and deliver to stdout (or return)\n     *\n     * @param  string  Template name\n     * @param  boolean Exit script\n     * @param  boolean Don't write to stdout, return parsed content instead\n     *\n     * @link   http://php.net/manual/en/function.exit.php\n     */\n    function parse($name = 'main', $exit = true, $write = true)\n    {\n        $plugin   = false;\n        $realname = $name;\n        $plugin_skin_paths = array();\n\n        $this->template_name = $realname;\n\n        $temp = explode('.', $name, 2);\n        if (count($temp) > 1) {\n            $plugin   = $temp[0];\n            $name     = $temp[1];\n            $skin_dir = $plugin . '/skins/' . $this->config->get('skin');\n\n            // apply skin search escalation list to plugin directory\n            foreach ($this->skin_paths as $skin_path) {\n                $plugin_skin_paths[] = $this->app->plugins->url . $plugin . '/' . $skin_path;\n            }\n\n            // add fallback to default skin\n            if (is_dir($this->app->plugins->dir . $plugin . '/skins/default')) {\n                $skin_dir = $plugin . '/skins/default';\n                $plugin_skin_paths[] = $this->app->plugins->url . $skin_dir;\n            }\n\n            // prepend plugin skin paths to search list\n            $this->skin_paths = array_merge($plugin_skin_paths, $this->skin_paths);\n        }\n\n        // find skin template\n        $path = false;\n        foreach ($this->skin_paths as $skin_path) {\n            $path = RCUBE_INSTALL_PATH . \"$skin_path/templates/$name.html\";\n\n            // fallback to deprecated template names\n            if (!is_readable($path) && $this->deprecated_templates[$realname]) {\n                $path = RCUBE_INSTALL_PATH . \"$skin_path/templates/\" . $this->deprecated_templates[$realname] . \".html\";\n\n                if (is_readable($path)) {\n                    rcube::raise_error(array(\n                        'code' => 502, 'type' => 'php',\n                        'file' => __FILE__, 'line' => __LINE__,\n                        'message' => \"Using deprecated template '\" . $this->deprecated_templates[$realname]\n                            . \"' in $skin_path/templates. Please rename to '$realname'\"),\n                        true, false);\n                }\n            }\n\n            if (is_readable($path)) {\n                $this->config->set('skin_path', $skin_path);\n                $this->base_path = preg_replace('!plugins/\\w+/!', '', $skin_path);  // set base_path to core skin directory (not plugin's skin)\n                $skin_dir = preg_replace('!^plugins/!', '', $skin_path);\n                break;\n            }\n            else {\n                $path = false;\n            }\n        }\n\n        // read template file\n        if (!$path || ($templ = @file_get_contents($path)) === false) {\n            rcube::raise_error(array(\n                'code' => 404,\n                'type' => 'php',\n                'line' => __LINE__,\n                'file' => __FILE__,\n                'message' => 'Error loading template for '.$realname\n                ), true, $write);\n\n            $this->skin_paths = array_slice($this->skin_paths, count($plugin_skin_paths));\n            return false;\n        }\n\n        // replace all path references to plugins/... with the configured plugins dir\n        // and /this/ to the current plugin skin directory\n        if ($plugin) {\n            $templ = preg_replace(array('/\\bplugins\\//', '/([\"\\']?)\\/this\\//'), array($this->app->plugins->url, '\\\\1'.$this->app->plugins->url.$skin_dir.'/'), $templ);\n        }\n\n        // parse for specialtags\n        $output = $this->parse_conditions($templ);\n        $output = $this->parse_xml($output);\n\n        // trigger generic hook where plugins can put additional content to the page\n        $hook = $this->app->plugins->exec_hook(\"render_page\", array('template' => $realname, 'content' => $output));\n\n        // save some memory\n        $output = $hook['content'];\n        unset($hook['content']);\n\n        // make sure all <form> tags have a valid request token\n        $output = preg_replace_callback('/<form\\s+([^>]+)>/Ui', array($this, 'alter_form_tag'), $output);\n        $this->footer = preg_replace_callback('/<form\\s+([^>]+)>/Ui', array($this, 'alter_form_tag'), $this->footer);\n\n        // remove plugin skin paths from current context\n        $this->skin_paths = array_slice($this->skin_paths, count($plugin_skin_paths));\n\n        if (!$write) {\n            return $output;\n        }\n\n        $this->write(trim($output));\n\n        if ($exit) {\n            exit;\n        }\n    }\n\n    /**\n     * Return executable javascript code for all registered commands\n     *\n     * @return string $out\n     */\n    protected function get_js_commands(&$framed = null)\n    {\n        $out             = '';\n        $parent_commands = 0;\n        $top_commands    = array();\n\n        // these should be always on top,\n        // e.g. hide_message() below depends on env.framed\n        if (!$this->framed && !empty($this->js_env)) {\n            $top_commands[] = array('set_env', $this->js_env);\n        }\n        if (!empty($this->js_labels)) {\n            $top_commands[] = array('add_label', $this->js_labels);\n        }\n\n        // unlock interface after iframe load\n        $unlock = preg_replace('/[^a-z0-9]/i', '', $_REQUEST['_unlock']);\n        if ($this->framed) {\n            $top_commands[] = array('iframe_loaded', $unlock);\n        }\n        else if ($unlock) {\n            $top_commands[] = array('hide_message', $unlock);\n        }\n\n        $commands = array_merge($top_commands, $this->js_commands);\n\n        foreach ($commands as $i => $args) {\n            $method = array_shift($args);\n            $parent = $this->framed || preg_match('/^parent\\./', $method);\n\n            foreach ($args as $i => $arg) {\n                $args[$i] = self::json_serialize($arg);\n            }\n\n            if ($parent) {\n                $parent_commands++;\n                $method        = preg_replace('/^parent\\./', '', $method);\n                $parent_prefix = 'if (window.parent && parent.' . self::JS_OBJECT_NAME . ') parent.';\n                $method        = $parent_prefix . self::JS_OBJECT_NAME . '.' . $method;\n            }\n            else {\n                $method = self::JS_OBJECT_NAME . '.' . $method;\n            }\n\n            $out .= sprintf(\"%s(%s);\\n\", $method, implode(',', $args));\n        }\n\n        $framed = $parent_prefix && $parent_commands == count($commands);\n\n        // make the output more compact if all commands go to parent window\n        if ($framed) {\n            $out = \"if (window.parent && parent.\" . self::JS_OBJECT_NAME . \") {\\n\"\n                . str_replace($parent_prefix, \"\\tparent.\", $out)\n                . \"}\\n\";\n        }\n\n        return $out;\n    }\n\n    /**\n     * Make URLs starting with a slash point to skin directory\n     *\n     * @param  string Input string\n     * @param  boolean True if URL should be resolved using the current skin path stack\n     * @return string\n     */\n    public function abs_url($str, $search_path = false)\n    {\n        if ($str[0] == '/') {\n            if ($search_path && ($file_url = $this->get_skin_file($str, $skin_path))) {\n                return $file_url;\n            }\n\n            return $this->base_path . $str;\n        }\n\n        return $str;\n    }\n\n    /**\n     * Show error page and terminate script execution\n     *\n     * @param int    $code     Error code\n     * @param string $message  Error message\n     */\n    public function raise_error($code, $message)\n    {\n        global $__page_content, $ERROR_CODE, $ERROR_MESSAGE;\n\n        $ERROR_CODE    = $code;\n        $ERROR_MESSAGE = $message;\n\n        include RCUBE_INSTALL_PATH . 'program/steps/utils/error.inc';\n        exit;\n    }\n\n    /**\n     * Modify path by adding URL prefix if configured\n     */\n    public function asset_url($path)\n    {\n        // iframe content can't be in a different domain\n        // @TODO: check if assests are on a different domain\n\n        if (!$this->assets_path || in_array($path[0], array('?', '/', '.')) || strpos($path, '://')) {\n            return $path;\n        }\n\n        return $this->assets_path . $path;\n    }\n\n\n    /*****  Template parsing methods  *****/\n\n    /**\n     * Replace all strings ($varname)\n     * with the content of the according global variable.\n     */\n    protected function parse_with_globals($input)\n    {\n        $GLOBALS['__version']   = html::quote(RCMAIL_VERSION);\n        $GLOBALS['__comm_path'] = html::quote($this->app->comm_path);\n        $GLOBALS['__skin_path'] = html::quote($this->base_path);\n\n        return preg_replace_callback('/\\$(__[a-z0-9_\\-]+)/',\n            array($this, 'globals_callback'), $input);\n    }\n\n    /**\n     * Callback funtion for preg_replace_callback() in parse_with_globals()\n     */\n    protected function globals_callback($matches)\n    {\n        return $GLOBALS[$matches[1]];\n    }\n\n    /**\n     * Correct absolute paths in images and other tags\n     * add timestamp to .js and .css filename\n     */\n    protected function fix_paths($output)\n    {\n        return preg_replace_callback(\n            '!(src|href|background)=([\"\\']?)([a-z0-9/_.-]+)([\"\\'\\s>])!i',\n            array($this, 'file_callback'), $output);\n    }\n\n    /**\n     * Callback function for preg_replace_callback in fix_paths()\n     *\n     * @return string Parsed string\n     */\n    protected function file_callback($matches)\n    {\n        $file = $matches[3];\n        $file = preg_replace('!^/this/!', '/', $file);\n\n        // correct absolute paths\n        if ($file[0] == '/') {\n            $file = $this->base_path . $file;\n        }\n\n        // add file modification timestamp\n        if (preg_match('/\\.(js|css)$/', $file, $m)) {\n            $file = $this->file_mod($file);\n        }\n\n        return $matches[1] . '=' . $matches[2] . $file . $matches[4];\n    }\n\n    /**\n     * Correct paths of asset files according to assets_path\n     */\n    protected function fix_assets_paths($output)\n    {\n        return preg_replace_callback(\n            '!(src|href|background)=([\"\\']?)([a-z0-9/_.?=-]+)([\"\\'\\s>])!i',\n            array($this, 'assets_callback'), $output);\n    }\n\n    /**\n     * Callback function for preg_replace_callback in fix_assets_paths()\n     *\n     * @return string Parsed string\n     */\n    protected function assets_callback($matches)\n    {\n        $file = $this->asset_url($matches[3]);\n\n        return $matches[1] . '=' . $matches[2] . $file . $matches[4];\n    }\n\n    /**\n     * Modify file by adding mtime indicator\n     */\n    protected function file_mod($file)\n    {\n        $fs  = false;\n        $ext = substr($file, strrpos($file, '.') + 1);\n\n        // use minified file if exists (not in development mode)\n        if (!$this->devel_mode && !preg_match('/\\.min\\.' . $ext . '$/', $file)) {\n            $minified_file = substr($file, 0, strlen($ext) * -1) . 'min.' . $ext;\n            if ($fs = @filemtime($this->assets_dir . $minified_file)) {\n                return $minified_file . '?s=' . $fs;\n            }\n        }\n\n        if ($fs = @filemtime($this->assets_dir . $file)) {\n            $file .= '?s=' . $fs;\n        }\n\n        return $file;\n    }\n\n    /**\n     * Public wrapper to dipp into template parsing.\n     *\n     * @param  string $input\n     * @return string\n     * @uses   rcmail_output_html::parse_xml()\n     * @since  0.1-rc1\n     */\n    public function just_parse($input)\n    {\n        $input = $this->parse_conditions($input);\n        $input = $this->parse_xml($input);\n\n        return $input;\n    }\n\n    /**\n     * Parse for conditional tags\n     *\n     * @param  string $input\n     * @return string\n     */\n    protected function parse_conditions($input)\n    {\n        $matches = preg_split('/<roundcube:(if|elseif|else|endif)\\s+([^>]+)>\\n?/is', $input, 2, PREG_SPLIT_DELIM_CAPTURE);\n        if ($matches && count($matches) == 4) {\n            if (preg_match('/^(else|endif)$/i', $matches[1])) {\n                return $matches[0] . $this->parse_conditions($matches[3]);\n            }\n            $attrib = html::parse_attrib_string($matches[2]);\n            if (isset($attrib['condition'])) {\n                $condmet = $this->check_condition($attrib['condition']);\n                $submatches = preg_split('/<roundcube:(elseif|else|endif)\\s+([^>]+)>\\n?/is', $matches[3], 2, PREG_SPLIT_DELIM_CAPTURE);\n                if ($condmet) {\n                    $result = $submatches[0];\n                    $result.= ($submatches[1] != 'endif' ? preg_replace('/.*<roundcube:endif\\s+[^>]+>\\n?/Uis', '', $submatches[3], 1) : $submatches[3]);\n                }\n                else {\n                    $result = \"<roundcube:$submatches[1] $submatches[2]>\" . $submatches[3];\n                }\n                return $matches[0] . $this->parse_conditions($result);\n            }\n            rcube::raise_error(array(\n                'code' => 500,\n                'type' => 'php',\n                'line' => __LINE__,\n                'file' => __FILE__,\n                'message' => \"Unable to parse conditional tag \" . $matches[2]\n            ), true, false);\n        }\n        return $input;\n    }\n\n    /**\n     * Determines if a given condition is met\n     *\n     * @todo   Extend this to allow real conditions, not just \"set\"\n     * @param  string Condition statement\n     * @return boolean True if condition is met, False if not\n     */\n    protected function check_condition($condition)\n    {\n        return $this->eval_expression($condition);\n    }\n\n    /**\n     * Inserts hidden field with CSRF-prevention-token into POST forms\n     */\n    protected function alter_form_tag($matches)\n    {\n        $out    = $matches[0];\n        $attrib = html::parse_attrib_string($matches[1]);\n\n        if (strtolower($attrib['method']) == 'post') {\n            $hidden = new html_hiddenfield(array('name' => '_token', 'value' => $this->app->get_request_token()));\n            $out .= \"\\n\" . $hidden->show();\n        }\n\n        return $out;\n    }\n\n    /**\n     * Parse & evaluate a given expression and return its result.\n     *\n     * @param string Expression statement\n     *\n     * @return mixed Expression result\n     */\n    protected function eval_expression ($expression)\n    {\n        $expression = preg_replace(\n            array(\n                '/session:([a-z0-9_]+)/i',\n                '/config:([a-z0-9_]+)(:([a-z0-9_]+))?/i',\n                '/env:([a-z0-9_]+)/i',\n                '/request:([a-z0-9_]+)/i',\n                '/cookie:([a-z0-9_]+)/i',\n                '/browser:([a-z0-9_]+)/i',\n                '/template:name/i',\n            ),\n            array(\n                \"\\$_SESSION['\\\\1']\",\n                \"\\$app->config->get('\\\\1',rcube_utils::get_boolean('\\\\3'))\",\n                \"\\$env['\\\\1']\",\n                \"rcube_utils::get_input_value('\\\\1', rcube_utils::INPUT_GPC)\",\n                \"\\$_COOKIE['\\\\1']\",\n                \"\\$browser->{'\\\\1'}\",\n                \"'\" . $this->template_name . \"'\",\n            ),\n            $expression\n        );\n\n        $fn = create_function('$app,$browser,$env', \"return ($expression);\");\n        if (!$fn) {\n            rcube::raise_error(array(\n                'code' => 505,\n                'type' => 'php',\n                'file' => __FILE__,\n                'line' => __LINE__,\n                'message' => \"Expression parse error on: ($expression)\"), true, false);\n\n            return null;\n        }\n\n        return $fn($this->app, $this->browser, $this->env);\n    }\n\n    /**\n     * Search for special tags in input and replace them\n     * with the appropriate content\n     *\n     * @param  string Input string to parse\n     * @return string Altered input string\n     * @todo   Use DOM-parser to traverse template HTML\n     * @todo   Maybe a cache.\n     */\n    protected function parse_xml($input)\n    {\n        return preg_replace_callback('/<roundcube:([-_a-z]+)\\s+((?:[^>]|\\\\\\\\>)+)(?<!\\\\\\\\)>/Ui', array($this, 'xml_command'), $input);\n    }\n\n    /**\n     * Callback function for parsing an xml command tag\n     * and turn it into real html content\n     *\n     * @param  array Matches array of preg_replace_callback\n     * @return string Tag/Object content\n     */\n    protected function xml_command($matches)\n    {\n        $command = strtolower($matches[1]);\n        $attrib  = html::parse_attrib_string($matches[2]);\n\n        // empty output if required condition is not met\n        if (!empty($attrib['condition']) && !$this->check_condition($attrib['condition'])) {\n            return '';\n        }\n\n        // localize title and summary attributes\n        if ($command != 'button' && !empty($attrib['title']) && $this->app->text_exists($attrib['title'])) {\n            $attrib['title'] = $this->app->gettext($attrib['title']);\n        }\n        if ($command != 'button' && !empty($attrib['summary']) && $this->app->text_exists($attrib['summary'])) {\n            $attrib['summary'] = $this->app->gettext($attrib['summary']);\n        }\n\n        // execute command\n        switch ($command) {\n            // return a button\n            case 'button':\n                if ($attrib['name'] || $attrib['command']) {\n                    return $this->button($attrib);\n                }\n                break;\n\n            // frame\n            case 'frame':\n                return $this->frame($attrib);\n                break;\n\n            // show a label\n            case 'label':\n                if ($attrib['expression'])\n                    $attrib['name'] = $this->eval_expression($attrib['expression']);\n\n                if ($attrib['name'] || $attrib['command']) {\n                    $vars = $attrib + array('product' => $this->config->get('product_name'));\n                    unset($vars['name'], $vars['command']);\n\n                    $label   = $this->app->gettext($attrib + array('vars' => $vars));\n                    $quoting = !empty($attrib['quoting']) ? strtolower($attrib['quoting']) : (rcube_utils::get_boolean((string)$attrib['html']) ? 'no' : '');\n\n                    // 'noshow' can be used in skins to define new labels\n                    if ($attrib['noshow']) {\n                        return '';\n                    }\n\n                    switch ($quoting) {\n                        case 'no':\n                        case 'raw':\n                            break;\n                        case 'javascript':\n                        case 'js':\n                            $label = rcube::JQ($label);\n                            break;\n                        default:\n                            $label = html::quote($label);\n                            break;\n                    }\n\n                    return $label;\n                }\n                break;\n\n            // include a file\n            case 'include':\n                $old_base_path = $this->base_path;\n                if (!empty($attrib['skin_path'])) $attrib['skinpath'] = $attrib['skin_path'];\n                if ($path = $this->get_skin_file($attrib['file'], $skin_path, $attrib['skinpath'])) {\n                    $this->base_path = preg_replace('!plugins/\\w+/!', '', $skin_path);  // set base_path to core skin directory (not plugin's skin)\n                    $path = realpath(RCUBE_INSTALL_PATH . $path);\n                }\n\n                if (is_readable($path)) {\n                    if ($this->config->get('skin_include_php')) {\n                        $incl = $this->include_php($path);\n                    }\n                    else {\n                      $incl = file_get_contents($path);\n                    }\n                    $incl = $this->parse_conditions($incl);\n                    $incl = $this->parse_xml($incl);\n                    $incl = $this->fix_paths($incl);\n                    $this->base_path = $old_base_path;\n                    return $incl;\n                }\n                break;\n\n            case 'plugin.include':\n                $hook = $this->app->plugins->exec_hook(\"template_plugin_include\", $attrib);\n                return $hook['content'];\n\n            // define a container block\n            case 'container':\n                if ($attrib['name'] && $attrib['id']) {\n                    $this->command('gui_container', $attrib['name'], $attrib['id']);\n                    // let plugins insert some content here\n                    $hook = $this->app->plugins->exec_hook(\"template_container\", $attrib);\n                    return $hook['content'];\n                }\n                break;\n\n            // return code for a specific application object\n            case 'object':\n                $object = strtolower($attrib['name']);\n                $content = '';\n\n                // we are calling a class/method\n                if (($handler = $this->object_handlers[$object]) && is_array($handler)) {\n                    if ((is_object($handler[0]) && method_exists($handler[0], $handler[1])) ||\n                    (is_string($handler[0]) && class_exists($handler[0])))\n                    $content = call_user_func($handler, $attrib);\n                }\n                // execute object handler function\n                else if (function_exists($handler)) {\n                    $content = call_user_func($handler, $attrib);\n                }\n                else if ($object == 'doctype') {\n                    $content = html::doctype($attrib['value']);\n                }\n                else if ($object == 'logo') {\n                    $attrib += array('alt' => $this->xml_command(array('', 'object', 'name=\"productname\"')));\n\n                    if ($logo = $this->config->get('skin_logo')) {\n                        if (is_array($logo)) {\n                            if ($template_logo = $logo[$this->template_name]) {\n                                $attrib['src'] = $template_logo;\n                            }\n                            elseif ($template_logo = $logo['*']) {\n                                $attrib['src'] = $template_logo;\n                            }\n                        }\n                        else {\n                            $attrib['src'] = $logo;\n                        }\n                    }\n\n                    $content = html::img($attrib);\n                }\n                else if ($object == 'productname') {\n                    $name = $this->config->get('product_name', 'Roundcube Webmail');\n                    $content = html::quote($name);\n                }\n                else if ($object == 'version') {\n                    $ver = (string)RCMAIL_VERSION;\n                    if (is_file(RCUBE_INSTALL_PATH . '.svn/entries')) {\n                        if (preg_match('/Revision:\\s(\\d+)/', @shell_exec('svn info'), $regs))\n                          $ver .= ' [SVN r'.$regs[1].']';\n                    }\n                    else if (is_file(RCUBE_INSTALL_PATH . '.git/index')) {\n                        if (preg_match('/Date:\\s+([^\\n]+)/', @shell_exec('git log -1'), $regs)) {\n                            if ($date = date('Ymd.Hi', strtotime($regs[1]))) {\n                                $ver .= ' [GIT '.$date.']';\n                            }\n                        }\n                    }\n                    $content = html::quote($ver);\n                }\n                else if ($object == 'steptitle') {\n                  $content = html::quote($this->get_pagetitle());\n                }\n                else if ($object == 'pagetitle') {\n                    if ($this->devel_mode && !empty($_SESSION['username']))\n                        $title = $_SESSION['username'].' :: ';\n                    else if ($prod_name = $this->config->get('product_name'))\n                        $title = $prod_name . ' :: ';\n                    else\n                        $title = '';\n                    $title .= $this->get_pagetitle();\n                    $content = html::quote($title);\n                }\n\n                // exec plugin hooks for this template object\n                $hook = $this->app->plugins->exec_hook(\"template_object_$object\", $attrib + array('content' => $content));\n                return $hook['content'];\n\n            // return code for a specified eval expression\n            case 'exp':\n                return html::quote($this->eval_expression($attrib['expression']));\n\n            // return variable\n            case 'var':\n                $var = explode(':', $attrib['name']);\n                $name = $var[1];\n                $value = '';\n\n                switch ($var[0]) {\n                    case 'env':\n                        $value = $this->env[$name];\n                        break;\n                    case 'config':\n                        $value = $this->config->get($name);\n                        if (is_array($value) && $value[$_SESSION['storage_host']]) {\n                            $value = $value[$_SESSION['storage_host']];\n                        }\n                        break;\n                    case 'request':\n                        $value = rcube_utils::get_input_value($name, rcube_utils::INPUT_GPC);\n                        break;\n                    case 'session':\n                        $value = $_SESSION[$name];\n                        break;\n                    case 'cookie':\n                        $value = htmlspecialchars($_COOKIE[$name]);\n                        break;\n                    case 'browser':\n                        $value = $this->browser->{$name};\n                        break;\n                }\n\n                if (is_array($value)) {\n                    $value = implode(', ', $value);\n                }\n\n                return html::quote($value);\n\n            case 'form':\n                return $this->form_tag($attrib);\n        }\n        return '';\n    }\n\n    /**\n     * Include a specific file and return it's contents\n     *\n     * @param string File path\n     * @return string Contents of the processed file\n     */\n    protected function include_php($file)\n    {\n        ob_start();\n        include $file;\n        $out = ob_get_contents();\n        ob_end_clean();\n\n        return $out;\n    }\n\n    /**\n     * Create and register a button\n     *\n     * @param  array Named button attributes\n     * @return string HTML button\n     * @todo   Remove all inline JS calls and use jQuery instead.\n     * @todo   Remove all sprintf()'s - they are pretty, but also slow.\n     */\n    public function button($attrib)\n    {\n        static $s_button_count   = 100;\n        static $disabled_actions = null;\n\n        // these commands can be called directly via url\n        $a_static_commands = array('compose', 'list', 'preferences', 'folders', 'identities');\n\n        if (!($attrib['command'] || $attrib['name'] || $attrib['href'])) {\n            return '';\n        }\n\n        // try to find out the button type\n        if ($attrib['type']) {\n            $attrib['type'] = strtolower($attrib['type']);\n            if ($pos = strpos($attrib['type'], '-menuitem')) {\n                $attrib['type'] = substr($attrib['type'], 0, -9);\n                $menuitem = true;\n            }\n        }\n        else {\n            $attrib['type'] = ($attrib['image'] || $attrib['imagepas'] || $attrib['imageact']) ? 'image' : 'link';\n        }\n\n        $command = $attrib['command'];\n\n        if ($attrib['task']) {\n            $element = $command = $attrib['task'] . '.' . $command;\n        }\n        else {\n            $element = ($this->env['task'] ? $this->env['task'] . '.' : '') . $command;\n        }\n\n        if ($disabled_actions === null) {\n            $disabled_actions = (array) $this->config->get('disabled_actions');\n        }\n\n        // remove buttons for disabled actions\n        if (in_array($element, $disabled_actions)) {\n            return '';\n        }\n\n        if (!$attrib['image']) {\n            $attrib['image'] = $attrib['imagepas'] ? $attrib['imagepas'] : $attrib['imageact'];\n        }\n\n        if (!$attrib['id']) {\n            $attrib['id'] =  sprintf('rcmbtn%d', $s_button_count++);\n        }\n        // get localized text for labels and titles\n        if ($attrib['title']) {\n            $attrib['title'] = html::quote($this->app->gettext($attrib['title'], $attrib['domain']));\n        }\n        if ($attrib['label']) {\n            $attrib['label'] = html::quote($this->app->gettext($attrib['label'], $attrib['domain']));\n        }\n        if ($attrib['alt']) {\n            $attrib['alt'] = html::quote($this->app->gettext($attrib['alt'], $attrib['domain']));\n        }\n\n        // set accessibility attributes\n        if (!$attrib['role']) {\n            $attrib['role'] = 'button';\n        }\n        if (!empty($attrib['class']) && !empty($attrib['classact']) || !empty($attrib['imagepas']) && !empty($attrib['imageact'])) {\n            if (array_key_exists('tabindex', $attrib))\n                $attrib['data-tabindex'] = $attrib['tabindex'];\n            $attrib['tabindex'] = '-1';  // disable button by default\n            $attrib['aria-disabled'] = 'true';\n        }\n\n        // set title to alt attribute for IE browsers\n        if ($this->browser->ie && !$attrib['title'] && $attrib['alt']) {\n            $attrib['title'] = $attrib['alt'];\n        }\n\n        // add empty alt attribute for XHTML compatibility\n        if (!isset($attrib['alt'])) {\n            $attrib['alt'] = '';\n        }\n\n        // register button in the system\n        if ($attrib['command']) {\n            $this->add_script(sprintf(\n                \"%s.register_button('%s', '%s', '%s', '%s', '%s', '%s');\",\n                self::JS_OBJECT_NAME,\n                $command,\n                $attrib['id'],\n                $attrib['type'],\n                $attrib['imageact'] ? $this->abs_url($attrib['imageact']) : $attrib['classact'],\n                $attrib['imagesel'] ? $this->abs_url($attrib['imagesel']) : $attrib['classsel'],\n                $attrib['imageover'] ? $this->abs_url($attrib['imageover']) : ''\n            ));\n\n            // make valid href to specific buttons\n            if (in_array($attrib['command'], rcmail::$main_tasks)) {\n                $attrib['href']    = $this->app->url(array('task' => $attrib['command']));\n                $attrib['onclick'] = sprintf(\"return %s.command('switch-task','%s',this,event)\", self::JS_OBJECT_NAME, $attrib['command']);\n            }\n            else if ($attrib['task'] && in_array($attrib['task'], rcmail::$main_tasks)) {\n                $attrib['href'] = $this->app->url(array('action' => $attrib['command'], 'task' => $attrib['task']));\n            }\n            else if (in_array($attrib['command'], $a_static_commands)) {\n                $attrib['href'] = $this->app->url(array('action' => $attrib['command']));\n            }\n            else if (($attrib['command'] == 'permaurl' || $attrib['command'] == 'extwin') && !empty($this->env['permaurl'])) {\n              $attrib['href'] = $this->env['permaurl'];\n            }\n        }\n\n        // overwrite attributes\n        if (!$attrib['href']) {\n            $attrib['href'] = '#';\n        }\n        if ($attrib['task']) {\n            if ($attrib['classact'])\n                $attrib['class'] = $attrib['classact'];\n        }\n        else if ($command && !$attrib['onclick']) {\n            $attrib['onclick'] = sprintf(\n                \"return %s.command('%s','%s',this,event)\",\n                self::JS_OBJECT_NAME,\n                $command,\n                $attrib['prop']\n            );\n        }\n\n        $out = '';\n\n        // generate image tag\n        if ($attrib['type'] == 'image') {\n            $attrib_str = html::attrib_string(\n                $attrib,\n                array(\n                    'style', 'class', 'id', 'width', 'height', 'border', 'hspace',\n                    'vspace', 'align', 'alt', 'tabindex', 'title'\n                )\n            );\n            $btn_content = sprintf('<img src=\"%s\"%s />', $this->abs_url($attrib['image']), $attrib_str);\n            if ($attrib['label']) {\n                $btn_content .= ' '.$attrib['label'];\n            }\n            $link_attrib = array('href', 'onclick', 'onmouseover', 'onmouseout', 'onmousedown', 'onmouseup', 'target');\n        }\n        else if ($attrib['type'] == 'link') {\n            $btn_content = isset($attrib['content']) ? $attrib['content'] : ($attrib['label'] ? $attrib['label'] : $attrib['command']);\n            $link_attrib = array_merge(html::$common_attrib, array('href', 'onclick', 'tabindex', 'target'));\n            if ($attrib['innerclass'])\n                $btn_content = html::span($attrib['innerclass'], $btn_content);\n        }\n        else if ($attrib['type'] == 'input') {\n            $attrib['type'] = 'button';\n\n            if ($attrib['label']) {\n                $attrib['value'] = $attrib['label'];\n            }\n            if ($attrib['command']) {\n              $attrib['disabled'] = 'disabled';\n            }\n\n            $out = html::tag('input', $attrib, null, array('type', 'value', 'onclick', 'id', 'class', 'style', 'tabindex', 'disabled'));\n        }\n\n        // generate html code for button\n        if ($btn_content) {\n            $attrib_str = html::attrib_string($attrib, $link_attrib);\n            $out = sprintf('<a%s>%s</a>', $attrib_str, $btn_content);\n        }\n\n        if ($attrib['wrapper']) {\n            $out = html::tag($attrib['wrapper'], null, $out);\n        }\n\n        if ($menuitem) {\n            $class = $attrib['menuitem-class'] ? ' class=\"' . $attrib['menuitem-class'] . '\"' : '';\n            $out   = '<li role=\"menuitem\"' . $class . '>' . $out . '</li>';\n        }\n\n        return $out;\n    }\n\n    /**\n     * Link an external script file\n     *\n     * @param string File URL\n     * @param string Target position [head|foot]\n     */\n    public function include_script($file, $position='head')\n    {\n        if (!preg_match('|^https?://|i', $file) && $file[0] != '/') {\n            $file = $this->file_mod($this->scripts_path . $file);\n        }\n\n        if (!is_array($this->script_files[$position])) {\n            $this->script_files[$position] = array();\n        }\n\n        if (!in_array($file, $this->script_files[$position])) {\n            $this->script_files[$position][] = $file;\n        }\n    }\n\n    /**\n     * Add inline javascript code\n     *\n     * @param string JS code snippet\n     * @param string Target position [head|head_top|foot]\n     */\n    public function add_script($script, $position='head')\n    {\n        if (!isset($this->scripts[$position])) {\n            $this->scripts[$position] = \"\\n\" . rtrim($script);\n        }\n        else {\n            $this->scripts[$position] .= \"\\n\" . rtrim($script);\n        }\n    }\n\n    /**\n     * Link an external css file\n     *\n     * @param string File URL\n     */\n    public function include_css($file)\n    {\n        $this->css_files[] = $file;\n    }\n\n    /**\n     * Add HTML code to the page header\n     *\n     * @param string $str HTML code\n     */\n    public function add_header($str)\n    {\n        $this->header .= \"\\n\" . $str;\n    }\n\n    /**\n     * Add HTML code to the page footer\n     * To be added right befor </body>\n     *\n     * @param string $str HTML code\n     */\n    public function add_footer($str)\n    {\n        $this->footer .= \"\\n\" . $str;\n    }\n\n    /**\n     * Process template and write to stdOut\n     *\n     * @param string HTML template\n     * @param string Base for absolute paths\n     */\n    public function _write($templ = '', $base_path = '')\n    {\n        $output = trim($templ);\n\n        if (empty($output)) {\n            $output   = html::doctype('html5') . \"\\n\" . $this->default_template;\n            $is_empty = true;\n        }\n\n        // set default page title\n        if (empty($this->pagetitle)) {\n            $this->pagetitle = 'Roundcube Mail';\n        }\n\n        // declare page language\n        if (!empty($_SESSION['language'])) {\n            $lang = substr($_SESSION['language'], 0, 2);\n            $output = preg_replace('/<html/', '<html lang=\"' . html::quote($lang) . '\"', $output, 1);\n            if (!headers_sent()) {\n                header('Content-Language: ' . $lang);\n            }\n        }\n\n        // replace specialchars in content\n        $page_title  = html::quote($this->pagetitle);\n        $page_header = '';\n        $page_footer = '';\n\n        // include meta tag with charset\n        if (!empty($this->charset)) {\n            if (!headers_sent()) {\n                header('Content-Type: text/html; charset=' . $this->charset);\n            }\n            $page_header = '<meta http-equiv=\"content-type\"';\n            $page_header.= ' content=\"text/html; charset=';\n            $page_header.= $this->charset . '\" />'.\"\\n\";\n        }\n\n        // definition of the code to be placed in the document header and footer\n        if (is_array($this->script_files['head'])) {\n            foreach ($this->script_files['head'] as $file) {\n                $page_header .= html::script($file);\n            }\n        }\n\n        $head_script = $this->scripts['head_top'] . $this->scripts['head'];\n        if (!empty($head_script)) {\n            $page_header .= html::script(array(), $head_script);\n        }\n\n        if (!empty($this->header)) {\n            $page_header .= $this->header;\n        }\n\n        // put docready commands into page footer\n        if (!empty($this->scripts['docready'])) {\n            $this->add_script('$(document).ready(function(){ ' . $this->scripts['docready'] . \"\\n});\", 'foot');\n        }\n\n        if (is_array($this->script_files['foot'])) {\n            foreach ($this->script_files['foot'] as $file) {\n                $page_footer .= html::script($file);\n            }\n        }\n\n        if (!empty($this->footer)) {\n            $page_footer .= $this->footer . \"\\n\";\n        }\n\n        if (!empty($this->scripts['foot'])) {\n            $page_footer .= html::script(array(), $this->scripts['foot']);\n        }\n\n        // find page header\n        if ($hpos = stripos($output, '</head>')) {\n            $page_header .= \"\\n\";\n        }\n        else {\n            if (!is_numeric($hpos)) {\n                $hpos = stripos($output, '<body');\n            }\n            if (!is_numeric($hpos) && ($hpos = stripos($output, '<html'))) {\n                while ($output[$hpos] != '>') {\n                    $hpos++;\n                }\n                $hpos++;\n            }\n            $page_header = \"<head>\\n<title>$page_title</title>\\n$page_header\\n</head>\\n\";\n        }\n\n        // add page hader\n        if ($hpos) {\n            $output = substr_replace($output, $page_header, $hpos, 0);\n        }\n        else {\n            $output = $page_header . $output;\n        }\n\n        // add page footer\n        if (($fpos = strripos($output, '</body>')) || ($fpos = strripos($output, '</html>'))) {\n            $output = substr_replace($output, $page_footer.\"\\n\", $fpos, 0);\n        }\n        else {\n            $output .= \"\\n\".$page_footer;\n        }\n\n        // add css files in head, before scripts, for speed up with parallel downloads\n        if (!empty($this->css_files) && !$is_empty\n            && (($pos = stripos($output, '<script ')) || ($pos = stripos($output, '</head>')))\n        ) {\n            $css = '';\n            foreach ($this->css_files as $file) {\n                $css .= html::tag('link', array('rel' => 'stylesheet',\n                    'type' => 'text/css', 'href' => $file, 'nl' => true));\n            }\n            $output = substr_replace($output, $css, $pos, 0);\n        }\n\n        $output = $this->parse_with_globals($this->fix_paths($output));\n\n        if ($this->assets_path) {\n            $output = $this->fix_assets_paths($output);\n        }\n\n        // trigger hook with final HTML content to be sent\n        $hook = $this->app->plugins->exec_hook(\"send_page\", array('content' => $output));\n        if (!$hook['abort']) {\n            if ($this->charset != RCUBE_CHARSET) {\n                echo rcube_charset::convert($hook['content'], RCUBE_CHARSET, $this->charset);\n            }\n            else {\n                echo $hook['content'];\n            }\n        }\n    }\n\n    /**\n     * Returns iframe object, registers some related env variables\n     *\n     * @param array $attrib HTML attributes\n     * @param boolean $is_contentframe Register this iframe as the 'contentframe' gui object\n     * @return string IFRAME element\n     */\n    public function frame($attrib, $is_contentframe = false)\n    {\n        static $idcount = 0;\n\n        if (!$attrib['id']) {\n            $attrib['id'] = 'rcmframe' . ++$idcount;\n        }\n\n        $attrib['name'] = $attrib['id'];\n        $attrib['src']  = $attrib['src'] ? $this->abs_url($attrib['src'], true) : 'program/resources/blank.gif';\n\n        // register as 'contentframe' object\n        if ($is_contentframe || $attrib['contentframe']) {\n            $this->set_env('contentframe', $attrib['contentframe'] ? $attrib['contentframe'] : $attrib['name']);\n            $this->set_env('blankpage', $this->asset_url($attrib['src']));\n        }\n\n        return html::iframe($attrib);\n    }\n\n\n    /*  ************* common functions delivering gui objects **************  */\n\n    /**\n     * Create a form tag with the necessary hidden fields\n     *\n     * @param array Named tag parameters\n     * @return string HTML code for the form\n     */\n    public function form_tag($attrib, $content = null)\n    {\n      if ($this->framed || $this->env['framed']) {\n        $hiddenfield = new html_hiddenfield(array('name' => '_framed', 'value' => '1'));\n        $hidden = $hiddenfield->show();\n      }\n      if ($this->env['extwin']) {\n        $hiddenfield = new html_hiddenfield(array('name' => '_extwin', 'value' => '1'));\n        $hidden = $hiddenfield->show();\n      }\n\n      if (!$content)\n        $attrib['noclose'] = true;\n\n      return html::tag('form',\n        $attrib + array('action' => $this->app->comm_path, 'method' => \"get\"),\n        $hidden . $content,\n        array('id','class','style','name','method','action','enctype','onsubmit'));\n    }\n\n    /**\n     * Build a form tag with a unique request token\n     *\n     * @param array Named tag parameters including 'action' and 'task' values which will be put into hidden fields\n     * @param string Form content\n     * @return string HTML code for the form\n     */\n    public function request_form($attrib, $content = '')\n    {\n        $hidden = new html_hiddenfield();\n        if ($attrib['task']) {\n            $hidden->add(array('name' => '_task', 'value' => $attrib['task']));\n        }\n        if ($attrib['action']) {\n            $hidden->add(array('name' => '_action', 'value' => $attrib['action']));\n        }\n\n        unset($attrib['task'], $attrib['request']);\n        $attrib['action'] = './';\n\n        // we already have a <form> tag\n        if ($attrib['form']) {\n            if ($this->framed || $this->env['framed'])\n                $hidden->add(array('name' => '_framed', 'value' => '1'));\n            return $hidden->show() . $content;\n        }\n        else\n            return $this->form_tag($attrib, $hidden->show() . $content);\n    }\n\n    /**\n     * GUI object 'username'\n     * Showing IMAP username of the current session\n     *\n     * @param array Named tag parameters (currently not used)\n     * @return string HTML code for the gui object\n     */\n    public function current_username($attrib)\n    {\n        static $username;\n\n        // alread fetched\n        if (!empty($username)) {\n            return $username;\n        }\n\n        // Current username is an e-mail address\n        if (strpos($_SESSION['username'], '@')) {\n            $username = $_SESSION['username'];\n        }\n        // get e-mail address from default identity\n        else if ($sql_arr = $this->app->user->get_identity()) {\n            $username = $sql_arr['email'];\n        }\n        else {\n            $username = $this->app->user->get_username();\n        }\n\n        return rcube_utils::idn_to_utf8($username);\n    }\n\n    /**\n     * GUI object 'loginform'\n     * Returns code for the webmail login form\n     *\n     * @param array Named parameters\n     * @return string HTML code for the gui object\n     */\n    protected function login_form($attrib)\n    {\n        $default_host = $this->config->get('default_host');\n        $autocomplete = (int) $this->config->get('login_autocomplete');\n\n        $_SESSION['temp'] = true;\n\n        // save original url\n        $url = rcube_utils::get_input_value('_url', rcube_utils::INPUT_POST);\n        if (empty($url) && !preg_match('/_(task|action)=logout/', $_SERVER['QUERY_STRING']))\n            $url = $_SERVER['QUERY_STRING'];\n\n        // Disable autocapitalization on iPad/iPhone (#1488609)\n        $attrib['autocapitalize'] = 'off';\n\n        // set atocomplete attribute\n        $user_attrib = $autocomplete > 0 ? array() : array('autocomplete' => 'off');\n        $host_attrib = $autocomplete > 0 ? array() : array('autocomplete' => 'off');\n        $pass_attrib = $autocomplete > 1 ? array() : array('autocomplete' => 'off');\n\n        $input_task   = new html_hiddenfield(array('name' => '_task', 'value' => 'login'));\n        $input_action = new html_hiddenfield(array('name' => '_action', 'value' => 'login'));\n        $input_tzone  = new html_hiddenfield(array('name' => '_timezone', 'id' => 'rcmlogintz', 'value' => '_default_'));\n        $input_url    = new html_hiddenfield(array('name' => '_url', 'id' => 'rcmloginurl', 'value' => $url));\n        $input_user   = new html_inputfield(array('name' => '_user', 'id' => 'rcmloginuser', 'required' => 'required')\n            + $attrib + $user_attrib);\n        $input_pass   = new html_passwordfield(array('name' => '_pass', 'id' => 'rcmloginpwd', 'required' => 'required')\n            + $attrib + $pass_attrib);\n        $input_host   = null;\n\n        if (is_array($default_host) && count($default_host) > 1) {\n            $input_host = new html_select(array('name' => '_host', 'id' => 'rcmloginhost'));\n\n            foreach ($default_host as $key => $value) {\n                if (!is_array($value)) {\n                    $input_host->add($value, (is_numeric($key) ? $value : $key));\n                }\n                else {\n                    $input_host = null;\n                    break;\n                }\n            }\n        }\n        else if (is_array($default_host) && ($host = key($default_host)) !== null) {\n            $hide_host = true;\n            $input_host = new html_hiddenfield(array(\n                'name' => '_host', 'id' => 'rcmloginhost', 'value' => is_numeric($host) ? $default_host[$host] : $host) + $attrib);\n        }\n        else if (empty($default_host)) {\n            $input_host = new html_inputfield(array('name' => '_host', 'id' => 'rcmloginhost')\n                + $attrib + $host_attrib);\n        }\n\n        $form_name  = !empty($attrib['form']) ? $attrib['form'] : 'form';\n        $this->add_gui_object('loginform', $form_name);\n\n        // create HTML table with two cols\n        $table = new html_table(array('cols' => 2));\n\n        $table->add('title', html::label('rcmloginuser', html::quote($this->app->gettext('username'))));\n        $table->add('input', $input_user->show(rcube_utils::get_input_value('_user', rcube_utils::INPUT_GPC)));\n\n        $table->add('title', html::label('rcmloginpwd', html::quote($this->app->gettext('password'))));\n        $table->add('input', $input_pass->show());\n\n        // add host selection row\n        if (is_object($input_host) && !$hide_host) {\n            $table->add('title', html::label('rcmloginhost', html::quote($this->app->gettext('server'))));\n            $table->add('input', $input_host->show(rcube_utils::get_input_value('_host', rcube_utils::INPUT_GPC)));\n        }\n\n        $out  = $input_task->show();\n        $out .= $input_action->show();\n        $out .= $input_tzone->show();\n        $out .= $input_url->show();\n        $out .= $table->show();\n\n        if ($hide_host) {\n            $out .= $input_host->show();\n        }\n\n        if (rcube_utils::get_boolean($attrib['submit'])) {\n            $submit = new html_inputfield(array('type' => 'submit', 'id' => 'rcmloginsubmit',\n                'class' => 'button mainaction', 'value' => $this->app->gettext('login')));\n            $out .= html::p('formbuttons', $submit->show());\n        }\n\n        // surround html output with a form tag\n        if (empty($attrib['form'])) {\n            $out = $this->form_tag(array('name' => $form_name, 'method' => 'post'), $out);\n        }\n\n        // include script for timezone detection\n        $this->include_script('jstz.min.js');\n\n        return $out;\n    }\n\n    /**\n     * GUI object 'preloader'\n     * Loads javascript code for images preloading\n     *\n     * @param array Named parameters\n     * @return void\n     */\n    protected function preloader($attrib)\n    {\n        $images = preg_split('/[\\s\\t\\n,]+/', $attrib['images'], -1, PREG_SPLIT_NO_EMPTY);\n        $images = array_map(array($this, 'abs_url'), $images);\n        $images = array_map(array($this, 'asset_url'), $images);\n\n        if (empty($images) || $_REQUEST['_task'] == 'logout') {\n            return;\n        }\n\n        $this->add_script('var images = ' . self::json_serialize($images) .';\n            for (var i=0; i<images.length; i++) {\n                img = new Image();\n                img.src = images[i];\n            }', 'docready');\n    }\n\n    /**\n     * GUI object 'searchform'\n     * Returns code for search function\n     *\n     * @param array Named parameters\n     * @return string HTML code for the gui object\n     */\n    protected function search_form($attrib)\n    {\n        // add some labels to client\n        $this->add_label('searching');\n\n        $attrib['name'] = '_q';\n\n        if (empty($attrib['id'])) {\n            $attrib['id'] = 'rcmqsearchbox';\n        }\n        if ($attrib['type'] == 'search' && !$this->browser->khtml) {\n            unset($attrib['type'], $attrib['results']);\n        }\n\n        $input_q = new html_inputfield($attrib);\n        $out = $input_q->show();\n\n        $this->add_gui_object('qsearchbox', $attrib['id']);\n\n        // add form tag around text field\n        if (empty($attrib['form'])) {\n            $out = $this->form_tag(array(\n                'name'     => \"rcmqsearchform\",\n                'onsubmit' => self::JS_OBJECT_NAME . \".command('search'); return false\",\n                'style'    => \"display:inline\"),\n                $out);\n        }\n\n        return $out;\n    }\n\n    /**\n     * Builder for GUI object 'message'\n     *\n     * @param array Named tag parameters\n     * @return string HTML code for the gui object\n     */\n    protected function message_container($attrib)\n    {\n        if (isset($attrib['id']) === false) {\n            $attrib['id'] = 'rcmMessageContainer';\n        }\n\n        $this->add_gui_object('message', $attrib['id']);\n\n        return html::div($attrib, '');\n    }\n\n    /**\n     * GUI object 'charsetselector'\n     *\n     * @param array Named parameters for the select tag\n     * @return string HTML code for the gui object\n     */\n    public function charset_selector($attrib)\n    {\n        // pass the following attributes to the form class\n        $field_attrib = array('name' => '_charset');\n        foreach ($attrib as $attr => $value) {\n            if (in_array($attr, array('id', 'name', 'class', 'style', 'size', 'tabindex'))) {\n                $field_attrib[$attr] = $value;\n            }\n        }\n\n        $charsets = array(\n            'UTF-8'        => 'UTF-8 ('.$this->app->gettext('unicode').')',\n            'US-ASCII'     => 'ASCII ('.$this->app->gettext('english').')',\n            'ISO-8859-1'   => 'ISO-8859-1 ('.$this->app->gettext('westerneuropean').')',\n            'ISO-8859-2'   => 'ISO-8859-2 ('.$this->app->gettext('easterneuropean').')',\n            'ISO-8859-4'   => 'ISO-8859-4 ('.$this->app->gettext('baltic').')',\n            'ISO-8859-5'   => 'ISO-8859-5 ('.$this->app->gettext('cyrillic').')',\n            'ISO-8859-6'   => 'ISO-8859-6 ('.$this->app->gettext('arabic').')',\n            'ISO-8859-7'   => 'ISO-8859-7 ('.$this->app->gettext('greek').')',\n            'ISO-8859-8'   => 'ISO-8859-8 ('.$this->app->gettext('hebrew').')',\n            'ISO-8859-9'   => 'ISO-8859-9 ('.$this->app->gettext('turkish').')',\n            'ISO-8859-10'   => 'ISO-8859-10 ('.$this->app->gettext('nordic').')',\n            'ISO-8859-11'   => 'ISO-8859-11 ('.$this->app->gettext('thai').')',\n            'ISO-8859-13'   => 'ISO-8859-13 ('.$this->app->gettext('baltic').')',\n            'ISO-8859-14'   => 'ISO-8859-14 ('.$this->app->gettext('celtic').')',\n            'ISO-8859-15'   => 'ISO-8859-15 ('.$this->app->gettext('westerneuropean').')',\n            'ISO-8859-16'   => 'ISO-8859-16 ('.$this->app->gettext('southeasterneuropean').')',\n            'WINDOWS-1250' => 'Windows-1250 ('.$this->app->gettext('easterneuropean').')',\n            'WINDOWS-1251' => 'Windows-1251 ('.$this->app->gettext('cyrillic').')',\n            'WINDOWS-1252' => 'Windows-1252 ('.$this->app->gettext('westerneuropean').')',\n            'WINDOWS-1253' => 'Windows-1253 ('.$this->app->gettext('greek').')',\n            'WINDOWS-1254' => 'Windows-1254 ('.$this->app->gettext('turkish').')',\n            'WINDOWS-1255' => 'Windows-1255 ('.$this->app->gettext('hebrew').')',\n            'WINDOWS-1256' => 'Windows-1256 ('.$this->app->gettext('arabic').')',\n            'WINDOWS-1257' => 'Windows-1257 ('.$this->app->gettext('baltic').')',\n            'WINDOWS-1258' => 'Windows-1258 ('.$this->app->gettext('vietnamese').')',\n            'ISO-2022-JP'  => 'ISO-2022-JP ('.$this->app->gettext('japanese').')',\n            'ISO-2022-KR'  => 'ISO-2022-KR ('.$this->app->gettext('korean').')',\n            'ISO-2022-CN'  => 'ISO-2022-CN ('.$this->app->gettext('chinese').')',\n            'EUC-JP'       => 'EUC-JP ('.$this->app->gettext('japanese').')',\n            'EUC-KR'       => 'EUC-KR ('.$this->app->gettext('korean').')',\n            'EUC-CN'       => 'EUC-CN ('.$this->app->gettext('chinese').')',\n            'BIG5'         => 'BIG5 ('.$this->app->gettext('chinese').')',\n            'GB2312'       => 'GB2312 ('.$this->app->gettext('chinese').')',\n        );\n\n        if (!empty($_POST['_charset'])) {\n            $set = $_POST['_charset'];\n        }\n        else if (!empty($attrib['selected'])) {\n            $set = $attrib['selected'];\n        }\n        else {\n            $set = $this->get_charset();\n        }\n\n        $set = strtoupper($set);\n        if (!isset($charsets[$set])) {\n            $charsets[$set] = $set;\n        }\n\n        $select = new html_select($field_attrib);\n        $select->add(array_values($charsets), array_keys($charsets));\n\n        return $select->show($set);\n    }\n\n    /**\n     * Include content from config/about.<LANG>.html if available\n     */\n    protected function about_content($attrib)\n    {\n        $content = '';\n        $filenames = array(\n            'about.' . $_SESSION['language'] . '.html',\n            'about.' . substr($_SESSION['language'], 0, 2) . '.html',\n            'about.html',\n        );\n        foreach ($filenames as $file) {\n            $fn = RCUBE_CONFIG_DIR . $file;\n            if (is_readable($fn)) {\n                $content = file_get_contents($fn);\n                $content = $this->parse_conditions($content);\n                $content = $this->parse_xml($content);\n                break;\n            }\n        }\n\n        return $content;\n    }\n}\n", "/**\n * Roundcube Webmail Client Script\n *\n * This file is part of the Roundcube Webmail client\n *\n * @licstart  The following is the entire license notice for the\n * JavaScript code in this file.\n *\n * Copyright (C) 2005-2015, The Roundcube Dev Team\n * Copyright (C) 2011-2015, Kolab Systems AG\n *\n * The JavaScript code in this page is free software: you can\n * redistribute it and/or modify it under the terms of the GNU\n * General Public License (GNU GPL) as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option)\n * any later version.  The code is distributed WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.\n *\n * As additional permission under GNU GPL version 3 section 7, you\n * may distribute non-source (e.g., minimized or compacted) forms of\n * that code without the copy of the GNU GPL normally required by\n * section 4, provided you include this license notice and a URL\n * through which recipients can access the Corresponding Source.\n *\n * @licend  The above is the entire license notice\n * for the JavaScript code in this file.\n *\n * @author Thomas Bruederli <roundcube@gmail.com>\n * @author Aleksander 'A.L.E.C' Machniak <alec@alec.pl>\n * @author Charles McNulty <charles@charlesmcnulty.com>\n *\n * @requires jquery.js, common.js, list.js\n */\n\nfunction rcube_webmail()\n{\n  this.labels = {};\n  this.buttons = {};\n  this.buttons_sel = {};\n  this.gui_objects = {};\n  this.gui_containers = {};\n  this.commands = {};\n  this.command_handlers = {};\n  this.onloads = [];\n  this.messages = {};\n  this.group2expand = {};\n  this.http_request_jobs = {};\n  this.menu_stack = [];\n\n  // webmail client settings\n  this.dblclick_time = 500;\n  this.message_time = 5000;\n  this.identifier_expr = /[^0-9a-z_-]/gi;\n\n  // environment defaults\n  this.env = {\n    request_timeout: 180,  // seconds\n    draft_autosave: 0,     // seconds\n    comm_path: './',\n    recipients_separator: ',',\n    recipients_delimiter: ', ',\n    popup_width: 1150,\n    popup_width_small: 900\n  };\n\n  // create protected reference to myself\n  this.ref = 'rcmail';\n  var ref = this;\n\n  // set jQuery ajax options\n  $.ajaxSetup({\n    cache: false,\n    timeout: this.env.request_timeout * 1000,\n    error: function(request, status, err){ ref.http_error(request, status, err); },\n    beforeSend: function(xmlhttp){ xmlhttp.setRequestHeader('X-Roundcube-Request', ref.env.request_token); }\n  });\n\n  // unload fix\n  $(window).on('beforeunload', function() { ref.unload = true; });\n\n  // set environment variable(s)\n  this.set_env = function(p, value)\n  {\n    if (p != null && typeof p === 'object' && !value)\n      for (var n in p)\n        this.env[n] = p[n];\n    else\n      this.env[p] = value;\n  };\n\n  // add a localized label to the client environment\n  this.add_label = function(p, value)\n  {\n    if (typeof p == 'string')\n      this.labels[p] = value;\n    else if (typeof p == 'object')\n      $.extend(this.labels, p);\n  };\n\n  // add a button to the button list\n  this.register_button = function(command, id, type, act, sel, over)\n  {\n    var button_prop = {id:id, type:type};\n\n    if (act) button_prop.act = act;\n    if (sel) button_prop.sel = sel;\n    if (over) button_prop.over = over;\n\n    if (!this.buttons[command])\n      this.buttons[command] = [];\n\n    this.buttons[command].push(button_prop);\n\n    if (this.loaded)\n      init_button(command, button_prop);\n  };\n\n  // register a specific gui object\n  this.gui_object = function(name, id)\n  {\n    this.gui_objects[name] = this.loaded ? rcube_find_object(id) : id;\n  };\n\n  // register a container object\n  this.gui_container = function(name, id)\n  {\n    this.gui_containers[name] = id;\n  };\n\n  // add a GUI element (html node) to a specified container\n  this.add_element = function(elm, container)\n  {\n    if (this.gui_containers[container] && this.gui_containers[container].jquery)\n      this.gui_containers[container].append(elm);\n  };\n\n  // register an external handler for a certain command\n  this.register_command = function(command, callback, enable)\n  {\n    this.command_handlers[command] = callback;\n\n    if (enable)\n      this.enable_command(command, true);\n  };\n\n  // execute the given script on load\n  this.add_onload = function(f)\n  {\n    this.onloads.push(f);\n  };\n\n  // initialize webmail client\n  this.init = function()\n  {\n    var n;\n    this.task = this.env.task;\n\n    // check browser capabilities (never use version checks here)\n    if (this.env.server_error != 409 && (!bw.dom || !bw.xmlhttp_test())) {\n      this.goto_url('error', '_code=0x199');\n      return;\n    }\n\n    if (!this.env.blankpage)\n      this.env.blankpage = this.assets_path('program/resources/blank.gif');\n\n    // find all registered gui containers\n    for (n in this.gui_containers)\n      this.gui_containers[n] = $('#'+this.gui_containers[n]);\n\n    // find all registered gui objects\n    for (n in this.gui_objects)\n      this.gui_objects[n] = rcube_find_object(this.gui_objects[n]);\n\n    // clickjacking protection\n    if (this.env.x_frame_options) {\n      try {\n        // bust frame if not allowed\n        if (this.env.x_frame_options == 'deny' && top.location.href != self.location.href)\n          top.location.href = self.location.href;\n        else if (top.location.hostname != self.location.hostname)\n          throw 1;\n      } catch (e) {\n        // possible clickjacking attack: disable all form elements\n        $('form').each(function(){ ref.lock_form(this, true); });\n        this.display_message(\"Blocked: possible clickjacking attack!\", 'error');\n        return;\n      }\n    }\n\n    // init registered buttons\n    this.init_buttons();\n\n    // tell parent window that this frame is loaded\n    if (this.is_framed()) {\n      parent.rcmail.set_busy(false, null, parent.rcmail.env.frame_lock);\n      parent.rcmail.env.frame_lock = null;\n    }\n\n    // enable general commands\n    this.enable_command('close', 'logout', 'mail', 'addressbook', 'settings', 'save-pref',\n      'compose', 'undo', 'about', 'switch-task', 'menu-open', 'menu-close', 'menu-save', true);\n\n    // set active task button\n    this.set_button(this.task, 'sel');\n\n    if (this.env.permaurl)\n      this.enable_command('permaurl', 'extwin', true);\n\n    switch (this.task) {\n\n      case 'mail':\n        // enable mail commands\n        this.enable_command('list', 'checkmail', 'add-contact', 'search', 'reset-search', 'collapse-folder', 'import-messages', true);\n\n        if (this.gui_objects.messagelist) {\n          this.message_list = new rcube_list_widget(this.gui_objects.messagelist, {\n            multiselect:true, multiexpand:true, draggable:true, keyboard:true,\n            column_movable:this.env.col_movable, dblclick_time:this.dblclick_time\n            });\n          this.message_list\n            .addEventListener('initrow', function(o) { ref.init_message_row(o); })\n            .addEventListener('dblclick', function(o) { ref.msglist_dbl_click(o); })\n            .addEventListener('click', function(o) { ref.msglist_click(o); })\n            .addEventListener('keypress', function(o) { ref.msglist_keypress(o); })\n            .addEventListener('select', function(o) { ref.msglist_select(o); })\n            .addEventListener('dragstart', function(o) { ref.drag_start(o); })\n            .addEventListener('dragmove', function(e) { ref.drag_move(e); })\n            .addEventListener('dragend', function(e) { ref.drag_end(e); })\n            .addEventListener('expandcollapse', function(o) { ref.msglist_expand(o); })\n            .addEventListener('column_replace', function(o) { ref.msglist_set_coltypes(o); })\n            .addEventListener('listupdate', function(o) { ref.triggerEvent('listupdate', o); })\n            .init();\n\n          // TODO: this should go into the list-widget code\n          $(this.message_list.thead).on('click', 'a.sortcol', function(e){\n            return ref.command('sort', $(this).attr('rel'), this);\n          });\n\n          this.enable_command('toggle_status', 'toggle_flag', 'sort', true);\n          this.enable_command('set-listmode', this.env.threads && !this.is_multifolder_listing());\n\n          // load messages\n          this.command('list');\n\n          $(this.gui_objects.qsearchbox).val(this.env.search_text).focusin(function() { ref.message_list.blur(); });\n        }\n\n        this.set_button_titles();\n\n        this.env.message_commands = ['show', 'reply', 'reply-all', 'reply-list',\n          'move', 'copy', 'delete', 'open', 'mark', 'edit', 'viewsource',\n          'print', 'load-attachment', 'download-attachment', 'show-headers', 'hide-headers', 'download',\n          'forward', 'forward-inline', 'forward-attachment', 'change-format'];\n\n        if (this.env.action == 'show' || this.env.action == 'preview') {\n          this.enable_command(this.env.message_commands, this.env.uid);\n          this.enable_command('reply-list', this.env.list_post);\n\n          if (this.env.action == 'show') {\n            this.http_request('pagenav', {_uid: this.env.uid, _mbox: this.env.mailbox, _search: this.env.search_request},\n              this.display_message('', 'loading'));\n          }\n\n          if (this.env.blockedobjects) {\n            if (this.gui_objects.remoteobjectsmsg)\n              this.gui_objects.remoteobjectsmsg.style.display = 'block';\n            this.enable_command('load-images', 'always-load', true);\n          }\n\n          // make preview/message frame visible\n          if (this.env.action == 'preview' && this.is_framed()) {\n            this.enable_command('compose', 'add-contact', false);\n            parent.rcmail.show_contentframe(true);\n          }\n\n          // initialize drag-n-drop on attachments, so they can e.g.\n          // be dropped into mail compose attachments in another window\n          if (this.gui_objects.attachments)\n            $('li > a', this.gui_objects.attachments).not('.drop').on('dragstart', function(e) {\n              var n, href = this.href, dt = e.originalEvent.dataTransfer;\n              if (dt) {\n                // inject username to the uri\n                href = href.replace(/^https?:\\/\\//, function(m) { return m + urlencode(ref.env.username) + '@'});\n                // cleanup the node to get filename without the size test\n                n = $(this).clone();\n                n.children().remove();\n\n                dt.setData('roundcube-uri', href);\n                dt.setData('roundcube-name', $.trim(n.text()));\n              }\n            });\n        }\n        else if (this.env.action == 'compose') {\n          this.env.address_group_stack = [];\n          this.env.compose_commands = ['send-attachment', 'remove-attachment', 'send', 'cancel',\n            'toggle-editor', 'list-addresses', 'pushgroup', 'search', 'reset-search', 'extwin',\n            'insert-response', 'save-response', 'menu-open', 'menu-close'];\n\n          if (this.env.drafts_mailbox)\n            this.env.compose_commands.push('savedraft')\n\n          this.enable_command(this.env.compose_commands, 'identities', 'responses', true);\n\n          // add more commands (not enabled)\n          $.merge(this.env.compose_commands, ['add-recipient', 'firstpage', 'previouspage', 'nextpage', 'lastpage']);\n\n          if (window.googie) {\n            this.env.editor_config.spellchecker = googie;\n            this.env.editor_config.spellcheck_observer = function(s) { ref.spellcheck_state(); };\n\n            this.env.compose_commands.push('spellcheck')\n            this.enable_command('spellcheck', true);\n          }\n\n          // initialize HTML editor\n          this.editor_init(this.env.editor_config, this.env.composebody);\n\n          // init canned response functions\n          if (this.gui_objects.responseslist) {\n            $('a.insertresponse', this.gui_objects.responseslist)\n              .attr('unselectable', 'on')\n              .mousedown(function(e) { return rcube_event.cancel(e); })\n              .on('mouseup keypress', function(e) {\n                if (e.type == 'mouseup' || rcube_event.get_keycode(e) == 13) {\n                  ref.command('insert-response', $(this).attr('rel'));\n                  $(document.body).trigger('mouseup');  // hides the menu\n                  return rcube_event.cancel(e);\n                }\n              });\n\n            // avoid textarea loosing focus when hitting the save-response button/link\n            $.each(this.buttons['save-response'] || [], function (i, v) {\n              $('#' + v.id).mousedown(function(e){ return rcube_event.cancel(e); })\n            });\n          }\n\n          // init message compose form\n          this.init_messageform();\n        }\n        else if (this.env.action == 'get')\n          this.enable_command('download', 'print', true);\n        // show printing dialog\n        else if (this.env.action == 'print' && this.env.uid\n          && !this.env.is_pgp_content && !this.env.pgp_mime_part\n        ) {\n          this.print_dialog();\n        }\n\n        // get unread count for each mailbox\n        if (this.gui_objects.mailboxlist) {\n          this.env.unread_counts = {};\n          this.gui_objects.folderlist = this.gui_objects.mailboxlist;\n          this.http_request('getunread', {_page: this.env.current_page});\n        }\n\n        // init address book widget\n        if (this.gui_objects.contactslist) {\n          this.contact_list = new rcube_list_widget(this.gui_objects.contactslist,\n            { multiselect:true, draggable:false, keyboard:true });\n          this.contact_list\n            .addEventListener('initrow', function(o) { ref.triggerEvent('insertrow', { cid:o.uid, row:o }); })\n            .addEventListener('select', function(o) { ref.compose_recipient_select(o); })\n            .addEventListener('dblclick', function(o) { ref.compose_add_recipient(); })\n            .addEventListener('keypress', function(o) {\n              if (o.key_pressed == o.ENTER_KEY) {\n                if (!ref.compose_add_recipient()) {\n                  // execute link action on <enter> if not a recipient entry\n                  if (o.last_selected && String(o.last_selected).charAt(0) == 'G') {\n                    $(o.rows[o.last_selected].obj).find('a').first().click();\n                  }\n                }\n              }\n            })\n            .init();\n\n          // remember last focused address field\n          $('#_to,#_cc,#_bcc').focus(function() { ref.env.focused_field = this; });\n        }\n\n        if (this.gui_objects.addressbookslist) {\n          this.gui_objects.folderlist = this.gui_objects.addressbookslist;\n          this.enable_command('list-addresses', true);\n        }\n\n        // ask user to send MDN\n        if (this.env.mdn_request && this.env.uid) {\n          var postact = 'sendmdn',\n            postdata = {_uid: this.env.uid, _mbox: this.env.mailbox};\n          if (!confirm(this.get_label('mdnrequest'))) {\n            postdata._flag = 'mdnsent';\n            postact = 'mark';\n          }\n          this.http_post(postact, postdata);\n        }\n\n        this.check_mailvelope(this.env.action);\n\n        // detect browser capabilities\n        if (!this.is_framed() && !this.env.extwin)\n          this.browser_capabilities_check();\n\n        break;\n\n      case 'addressbook':\n        this.env.address_group_stack = [];\n\n        if (this.gui_objects.folderlist)\n          this.env.contactfolders = $.extend($.extend({}, this.env.address_sources), this.env.contactgroups);\n\n        this.enable_command('add', 'import', this.env.writable_source);\n        this.enable_command('list', 'listgroup', 'pushgroup', 'popgroup', 'listsearch', 'search', 'reset-search', 'advanced-search', true);\n\n        if (this.gui_objects.contactslist) {\n          this.contact_list = new rcube_list_widget(this.gui_objects.contactslist,\n            {multiselect:true, draggable:this.gui_objects.folderlist?true:false, keyboard:true});\n          this.contact_list\n            .addEventListener('initrow', function(o) { ref.triggerEvent('insertrow', { cid:o.uid, row:o }); })\n            .addEventListener('keypress', function(o) { ref.contactlist_keypress(o); })\n            .addEventListener('select', function(o) { ref.contactlist_select(o); })\n            .addEventListener('dragstart', function(o) { ref.drag_start(o); })\n            .addEventListener('dragmove', function(e) { ref.drag_move(e); })\n            .addEventListener('dragend', function(e) { ref.drag_end(e); })\n            .init();\n\n          $(this.gui_objects.qsearchbox).focusin(function() { ref.contact_list.blur(); });\n\n          this.update_group_commands();\n          this.command('list');\n        }\n\n        if (this.gui_objects.savedsearchlist) {\n          this.savedsearchlist = new rcube_treelist_widget(this.gui_objects.savedsearchlist, {\n            id_prefix: 'rcmli',\n            id_encode: this.html_identifier_encode,\n            id_decode: this.html_identifier_decode\n          });\n\n          this.savedsearchlist.addEventListener('select', function(node) {\n            ref.triggerEvent('selectfolder', { folder:node.id, prefix:'rcmli' }); });\n        }\n\n        this.set_page_buttons();\n\n        if (this.env.cid) {\n          this.enable_command('show', 'edit', true);\n          // register handlers for group assignment via checkboxes\n          if (this.gui_objects.editform) {\n            $('input.groupmember').change(function() {\n              ref.group_member_change(this.checked ? 'add' : 'del', ref.env.cid, ref.env.source, this.value);\n            });\n          }\n        }\n\n        if (this.gui_objects.editform) {\n          this.enable_command('save', true);\n          if (this.env.action == 'add' || this.env.action == 'edit' || this.env.action == 'search')\n              this.init_contact_form();\n        }\n        else if (this.env.action == 'print') {\n          this.print_dialog();\n        }\n\n        break;\n\n      case 'settings':\n        this.enable_command('preferences', 'identities', 'responses', 'save', 'folders', true);\n\n        if (this.env.action == 'identities') {\n          this.enable_command('add', this.env.identities_level < 2);\n        }\n        else if (this.env.action == 'edit-identity' || this.env.action == 'add-identity') {\n          this.enable_command('save', 'edit', 'toggle-editor', true);\n          this.enable_command('delete', this.env.identities_level < 2);\n\n          // initialize HTML editor\n          this.editor_init(this.env.editor_config, 'rcmfd_signature');\n        }\n        else if (this.env.action == 'folders') {\n          this.enable_command('subscribe', 'unsubscribe', 'create-folder', 'rename-folder', true);\n        }\n        else if (this.env.action == 'edit-folder' && this.gui_objects.editform) {\n          this.enable_command('save', 'folder-size', true);\n          parent.rcmail.env.exists = this.env.messagecount;\n          parent.rcmail.enable_command('purge', this.env.messagecount);\n        }\n        else if (this.env.action == 'responses') {\n          this.enable_command('add', true);\n        }\n\n        if (this.gui_objects.identitieslist) {\n          this.identity_list = new rcube_list_widget(this.gui_objects.identitieslist,\n            {multiselect:false, draggable:false, keyboard:true});\n          this.identity_list\n            .addEventListener('select', function(o) { ref.identity_select(o); })\n            .addEventListener('keypress', function(o) {\n              if (o.key_pressed == o.ENTER_KEY) {\n                ref.identity_select(o);\n              }\n            })\n            .init()\n            .focus();\n        }\n        else if (this.gui_objects.sectionslist) {\n          this.sections_list = new rcube_list_widget(this.gui_objects.sectionslist, {multiselect:false, draggable:false, keyboard:true});\n          this.sections_list\n            .addEventListener('select', function(o) { ref.section_select(o); })\n            .addEventListener('keypress', function(o) { if (o.key_pressed == o.ENTER_KEY) ref.section_select(o); })\n            .init()\n            .focus();\n        }\n        else if (this.gui_objects.subscriptionlist) {\n          this.init_subscription_list();\n        }\n        else if (this.gui_objects.responseslist) {\n          this.responses_list = new rcube_list_widget(this.gui_objects.responseslist, {multiselect:false, draggable:false, keyboard:true});\n          this.responses_list\n            .addEventListener('select', function(list) {\n              var win, id = list.get_single_selection();\n              ref.enable_command('delete', !!id && $.inArray(id, ref.env.readonly_responses) < 0);\n              if (id && (win = ref.get_frame_window(ref.env.contentframe))) {\n                ref.set_busy(true);\n                ref.location_href({ _action:'edit-response', _key:id, _framed:1 }, win);\n              }\n            })\n            .init()\n            .focus();\n        }\n\n        break;\n\n      case 'login':\n        var tz, tz_name, jstz = window.jstz,\n            input_user = $('#rcmloginuser'),\n            input_tz = $('#rcmlogintz');\n\n        input_user.keyup(function(e) { return ref.login_user_keyup(e); });\n\n        if (input_user.val() == '')\n          input_user.focus();\n        else\n          $('#rcmloginpwd').focus();\n\n        // detect client timezone\n        if (jstz && (tz = jstz.determine()))\n          tz_name = tz.name();\n\n        input_tz.val(tz_name ? tz_name : (new Date().getStdTimezoneOffset() / -60));\n\n        // display 'loading' message on form submit, lock submit button\n        $('form').submit(function () {\n          $('input[type=submit]', this).prop('disabled', true);\n          ref.clear_messages();\n          ref.display_message('', 'loading');\n        });\n\n        this.enable_command('login', true);\n        break;\n    }\n\n    // select first input field in an edit form\n    if (this.gui_objects.editform)\n      $(\"input,select,textarea\", this.gui_objects.editform)\n        .not(':hidden').not(':disabled').first().select().focus();\n\n    // unset contentframe variable if preview_pane is enabled\n    if (this.env.contentframe && !$('#' + this.env.contentframe).is(':visible'))\n      this.env.contentframe = null;\n\n    // prevent from form submit with Enter key in file input fields\n    if (bw.ie)\n      $('input[type=file]').keydown(function(e) { if (e.keyCode == '13') e.preventDefault(); });\n\n    // flag object as complete\n    this.loaded = true;\n    this.env.lastrefresh = new Date();\n\n    // show message\n    if (this.pending_message)\n      this.display_message.apply(this, this.pending_message);\n\n    // init treelist widget\n    if (this.gui_objects.folderlist && window.rcube_treelist_widget\n      // some plugins may load rcube_treelist_widget and there's one case\n      // when this will cause problems - addressbook widget in compose,\n      // which already has been initialized using rcube_list_widget\n      && this.gui_objects.folderlist != this.gui_objects.addressbookslist\n    ) {\n      this.treelist = new rcube_treelist_widget(this.gui_objects.folderlist, {\n          selectable: true,\n          id_prefix: 'rcmli',\n          parent_focus: true,\n          id_encode: this.html_identifier_encode,\n          id_decode: this.html_identifier_decode,\n          check_droptarget: function(node) { return !node.virtual && ref.check_droptarget(node.id) }\n      });\n\n      this.treelist\n        .addEventListener('collapse', function(node) { ref.folder_collapsed(node) })\n        .addEventListener('expand', function(node) { ref.folder_collapsed(node) })\n        .addEventListener('beforeselect', function(node) { return !ref.busy; })\n        .addEventListener('select', function(node) { ref.triggerEvent('selectfolder', { folder:node.id, prefix:'rcmli' }) });\n    }\n\n    // activate html5 file drop feature (if browser supports it and if configured)\n    if (this.gui_objects.filedrop && this.env.filedrop && ((window.XMLHttpRequest && XMLHttpRequest.prototype && XMLHttpRequest.prototype.sendAsBinary) || window.FormData)) {\n      $(document.body).on('dragover dragleave drop', function(e) { return ref.document_drag_hover(e, e.type == 'dragover'); });\n      $(this.gui_objects.filedrop).addClass('droptarget')\n        .on('dragover dragleave', function(e) { return ref.file_drag_hover(e, e.type == 'dragover'); })\n        .get(0).addEventListener('drop', function(e) { return ref.file_dropped(e); }, false);\n    }\n\n    // catch document (and iframe) mouse clicks\n    var body_mouseup = function(e){ return ref.doc_mouse_up(e); };\n    $(document.body)\n      .mouseup(body_mouseup)\n      .keydown(function(e){ return ref.doc_keypress(e); });\n\n    $('iframe').on('load', function(e) {\n        try { $(this.contentDocument || this.contentWindow).on('mouseup', body_mouseup);  }\n        catch (e) {/* catch possible \"Permission denied\" error in IE */ }\n      })\n      .contents().on('mouseup', body_mouseup);\n\n    // trigger init event hook\n    this.triggerEvent('init', { task:this.task, action:this.env.action });\n\n    // execute all foreign onload scripts\n    // @deprecated\n    for (n in this.onloads) {\n      if (typeof this.onloads[n] === 'string')\n        eval(this.onloads[n]);\n      else if (typeof this.onloads[n] === 'function')\n        this.onloads[n]();\n    }\n\n    // start keep-alive and refresh intervals\n    this.start_refresh();\n    this.start_keepalive();\n  };\n\n  this.log = function(msg)\n  {\n    if (window.console && console.log)\n      console.log(msg);\n  };\n\n  /*********************************************************/\n  /*********       client command interface        *********/\n  /*********************************************************/\n\n  // execute a specific command on the web client\n  this.command = function(command, props, obj, event)\n  {\n    var ret, uid, cid, url, flag, aborted = false;\n\n    if (obj && obj.blur && !(event && rcube_event.is_keyboard(event)))\n      obj.blur();\n\n    // do nothing if interface is locked by another command\n    // with exception for searching reset and menu\n    if (this.busy && !(command == 'reset-search' && this.last_command == 'search') && !command.match(/^menu-/))\n      return false;\n\n    // let the browser handle this click (shift/ctrl usually opens the link in a new window/tab)\n    if ((obj && obj.href && String(obj.href).indexOf('#') < 0) && rcube_event.get_modifier(event)) {\n      return true;\n    }\n\n    // command not supported or allowed\n    if (!this.commands[command]) {\n      // pass command to parent window\n      if (this.is_framed())\n        parent.rcmail.command(command, props);\n\n      return false;\n    }\n\n    // check input before leaving compose step\n    if (this.task == 'mail' && this.env.action == 'compose' && !this.env.server_error && command != 'save-pref'\n      && $.inArray(command, this.env.compose_commands) < 0\n    ) {\n      if (!this.env.is_sent && this.cmp_hash != this.compose_field_hash() && !confirm(this.get_label('notsentwarning')))\n        return false;\n\n      // remove copy from local storage if compose screen is left intentionally\n      this.remove_compose_data(this.env.compose_id);\n      this.compose_skip_unsavedcheck = true;\n    }\n\n    this.last_command = command;\n\n    // process external commands\n    if (typeof this.command_handlers[command] === 'function') {\n      ret = this.command_handlers[command](props, obj, event);\n      return ret !== undefined ? ret : (obj ? false : true);\n    }\n    else if (typeof this.command_handlers[command] === 'string') {\n      ret = window[this.command_handlers[command]](props, obj, event);\n      return ret !== undefined ? ret : (obj ? false : true);\n    }\n\n    // trigger plugin hooks\n    this.triggerEvent('actionbefore', {props:props, action:command, originalEvent:event});\n    ret = this.triggerEvent('before'+command, props || event);\n    if (ret !== undefined) {\n      // abort if one of the handlers returned false\n      if (ret === false)\n        return false;\n      else\n        props = ret;\n    }\n\n    ret = undefined;\n\n    // process internal command\n    switch (command) {\n\n      case 'login':\n        if (this.gui_objects.loginform)\n          this.gui_objects.loginform.submit();\n        break;\n\n      // commands to switch task\n      case 'logout':\n      case 'mail':\n      case 'addressbook':\n      case 'settings':\n        this.switch_task(command);\n        break;\n\n      case 'about':\n        this.redirect('?_task=settings&_action=about', false);\n        break;\n\n      case 'permaurl':\n        if (obj && obj.href && obj.target)\n          return true;\n        else if (this.env.permaurl)\n          parent.location.href = this.env.permaurl;\n        break;\n\n      case 'extwin':\n        if (this.env.action == 'compose') {\n          var form = this.gui_objects.messageform,\n            win = this.open_window('');\n\n          if (win) {\n            this.save_compose_form_local();\n            this.compose_skip_unsavedcheck = true;\n            $(\"input[name='_action']\", form).val('compose');\n            form.action = this.url('mail/compose', { _id: this.env.compose_id, _extwin: 1 });\n            form.target = win.name;\n            form.submit();\n          }\n        }\n        else {\n          this.open_window(this.env.permaurl, true);\n        }\n        break;\n\n      case 'change-format':\n        url = this.env.permaurl + '&_format=' + props;\n\n        if (this.env.action == 'preview')\n          url = url.replace(/_action=show/, '_action=preview') + '&_framed=1';\n        if (this.env.extwin)\n          url += '&_extwin=1';\n\n        location.href = url;\n        break;\n\n      case 'menu-open':\n        if (props && props.menu == 'attachmentmenu') {\n          var mimetype = this.env.attachments[props.id];\n          this.enable_command('open-attachment', mimetype && this.env.mimetypes && $.inArray(mimetype, this.env.mimetypes) >= 0);\n        }\n        this.show_menu(props, props.show || undefined, event);\n        break;\n\n      case 'menu-close':\n        this.hide_menu(props, event);\n        break;\n\n      case 'menu-save':\n        this.triggerEvent(command, {props:props, originalEvent:event});\n        return false;\n\n      case 'open':\n        if (uid = this.get_single_uid()) {\n          obj.href = this.url('show', this.params_from_uid(uid));\n          return true;\n        }\n        break;\n\n      case 'close':\n        if (this.env.extwin)\n          window.close();\n        break;\n\n      case 'list':\n        if (props && props != '') {\n          this.reset_qsearch(true);\n        }\n        if (this.env.action == 'compose' && this.env.extwin) {\n          window.close();\n        }\n        else if (this.task == 'mail') {\n          this.list_mailbox(props);\n          this.set_button_titles();\n        }\n        else if (this.task == 'addressbook')\n          this.list_contacts(props);\n        break;\n\n      case 'set-listmode':\n        this.set_list_options(null, undefined, undefined, props == 'threads' ? 1 : 0);\n        break;\n\n      case 'sort':\n        var sort_order = this.env.sort_order,\n          sort_col = !this.env.disabled_sort_col ? props : this.env.sort_col;\n\n        if (!this.env.disabled_sort_order)\n          sort_order = this.env.sort_col == sort_col && sort_order == 'ASC' ? 'DESC' : 'ASC';\n\n        // set table header and update env\n        this.set_list_sorting(sort_col, sort_order);\n\n        // reload message list\n        this.list_mailbox('', '', sort_col+'_'+sort_order);\n        break;\n\n      case 'nextpage':\n        this.list_page('next');\n        break;\n\n      case 'lastpage':\n        this.list_page('last');\n        break;\n\n      case 'previouspage':\n        this.list_page('prev');\n        break;\n\n      case 'firstpage':\n        this.list_page('first');\n        break;\n\n      case 'expunge':\n        if (this.env.exists)\n          this.expunge_mailbox(this.env.mailbox);\n        break;\n\n      case 'purge':\n      case 'empty-mailbox':\n        if (this.env.exists)\n          this.purge_mailbox(this.env.mailbox);\n        break;\n\n      // common commands used in multiple tasks\n      case 'show':\n        if (this.task == 'mail') {\n          uid = this.get_single_uid();\n          if (uid && (!this.env.uid || uid != this.env.uid)) {\n            if (this.env.mailbox == this.env.drafts_mailbox)\n              this.open_compose_step({ _draft_uid: uid, _mbox: this.env.mailbox });\n            else\n              this.show_message(uid);\n          }\n        }\n        else if (this.task == 'addressbook') {\n          cid = props ? props : this.get_single_cid();\n          if (cid && !(this.env.action == 'show' && cid == this.env.cid))\n            this.load_contact(cid, 'show');\n        }\n        break;\n\n      case 'add':\n        if (this.task == 'addressbook')\n          this.load_contact(0, 'add');\n        else if (this.task == 'settings' && this.env.action == 'responses') {\n          var frame;\n          if ((frame = this.get_frame_window(this.env.contentframe))) {\n            this.set_busy(true);\n            this.location_href({ _action:'add-response', _framed:1 }, frame);\n          }\n        }\n        else if (this.task == 'settings') {\n          this.identity_list.clear_selection();\n          this.load_identity(0, 'add-identity');\n        }\n        break;\n\n      case 'edit':\n        if (this.task == 'addressbook' && (cid = this.get_single_cid()))\n          this.load_contact(cid, 'edit');\n        else if (this.task == 'settings' && props)\n          this.load_identity(props, 'edit-identity');\n        else if (this.task == 'mail' && (uid = this.get_single_uid())) {\n          url = { _mbox: this.get_message_mailbox(uid) };\n          url[this.env.mailbox == this.env.drafts_mailbox && props != 'new' ? '_draft_uid' : '_uid'] = uid;\n          this.open_compose_step(url);\n        }\n        break;\n\n      case 'save':\n        var input, form = this.gui_objects.editform;\n        if (form) {\n          // adv. search\n          if (this.env.action == 'search') {\n          }\n          // user prefs\n          else if ((input = $(\"input[name='_pagesize']\", form)) && input.length && isNaN(parseInt(input.val()))) {\n            alert(this.get_label('nopagesizewarning'));\n            input.focus();\n            break;\n          }\n          // contacts/identities\n          else {\n            // reload form\n            if (props == 'reload') {\n              form.action += '&_reload=1';\n            }\n            else if (this.task == 'settings' && (this.env.identities_level % 2) == 0  &&\n              (input = $(\"input[name='_email']\", form)) && input.length && !rcube_check_email(input.val())\n            ) {\n              alert(this.get_label('noemailwarning'));\n              input.focus();\n              break;\n            }\n\n            // clear empty input fields\n            $('input.placeholder').each(function(){ if (this.value == this._placeholder) this.value = ''; });\n          }\n\n          // add selected source (on the list)\n          if (parent.rcmail && parent.rcmail.env.source)\n            form.action = this.add_url(form.action, '_orig_source', parent.rcmail.env.source);\n\n          form.submit();\n        }\n        break;\n\n      case 'delete':\n        // mail task\n        if (this.task == 'mail')\n          this.delete_messages(event);\n        // addressbook task\n        else if (this.task == 'addressbook')\n          this.delete_contacts();\n        // settings: canned response\n        else if (this.task == 'settings' && this.env.action == 'responses')\n          this.delete_response();\n        // settings: user identities\n        else if (this.task == 'settings')\n          this.delete_identity();\n        break;\n\n      // mail task commands\n      case 'move':\n      case 'moveto': // deprecated\n        if (this.task == 'mail')\n          this.move_messages(props, event);\n        else if (this.task == 'addressbook')\n          this.move_contacts(props);\n        break;\n\n      case 'copy':\n        if (this.task == 'mail')\n          this.copy_messages(props, event);\n        else if (this.task == 'addressbook')\n          this.copy_contacts(props);\n        break;\n\n      case 'mark':\n        if (props)\n          this.mark_message(props);\n        break;\n\n      case 'toggle_status':\n      case 'toggle_flag':\n        flag = command == 'toggle_flag' ? 'flagged' : 'read';\n\n        if (uid = props) {\n          // toggle flagged/unflagged\n          if (flag == 'flagged') {\n            if (this.message_list.rows[uid].flagged)\n              flag = 'unflagged';\n          }\n          // toggle read/unread\n          else if (this.message_list.rows[uid].deleted)\n            flag = 'undelete';\n          else if (!this.message_list.rows[uid].unread)\n            flag = 'unread';\n\n          this.mark_message(flag, uid);\n        }\n\n        break;\n\n      case 'always-load':\n        if (this.env.uid && this.env.sender) {\n          this.add_contact(this.env.sender);\n          setTimeout(function(){ ref.command('load-images'); }, 300);\n          break;\n        }\n\n      case 'load-images':\n        if (this.env.uid)\n          this.show_message(this.env.uid, true, this.env.action=='preview');\n        break;\n\n      case 'load-attachment':\n      case 'open-attachment':\n      case 'download-attachment':\n        var qstring = '_mbox='+urlencode(this.env.mailbox)+'&_uid='+this.env.uid+'&_part='+props,\n          mimetype = this.env.attachments[props];\n\n        // open attachment in frame if it's of a supported mimetype\n        if (command != 'download-attachment' && mimetype && this.env.mimetypes && $.inArray(mimetype, this.env.mimetypes) >= 0) {\n          if (this.open_window(this.env.comm_path+'&_action=get&'+qstring+'&_frame=1'))\n            break;\n        }\n\n        this.goto_url('get', qstring+'&_download=1', false, true);\n        break;\n\n      case 'select-all':\n        this.select_all_mode = props ? false : true;\n        this.dummy_select = true; // prevent msg opening if there's only one msg on the list\n        if (props == 'invert')\n          this.message_list.invert_selection();\n        else\n          this.message_list.select_all(props == 'page' ? '' : props);\n        this.dummy_select = null;\n        break;\n\n      case 'select-none':\n        this.select_all_mode = false;\n        this.message_list.clear_selection();\n        break;\n\n      case 'expand-all':\n        this.env.autoexpand_threads = 1;\n        this.message_list.expand_all();\n        break;\n\n      case 'expand-unread':\n        this.env.autoexpand_threads = 2;\n        this.message_list.collapse_all();\n        this.expand_unread();\n        break;\n\n      case 'collapse-all':\n        this.env.autoexpand_threads = 0;\n        this.message_list.collapse_all();\n        break;\n\n      case 'nextmessage':\n        if (this.env.next_uid)\n          this.show_message(this.env.next_uid, false, this.env.action == 'preview');\n        break;\n\n      case 'lastmessage':\n        if (this.env.last_uid)\n          this.show_message(this.env.last_uid);\n        break;\n\n      case 'previousmessage':\n        if (this.env.prev_uid)\n          this.show_message(this.env.prev_uid, false, this.env.action == 'preview');\n        break;\n\n      case 'firstmessage':\n        if (this.env.first_uid)\n          this.show_message(this.env.first_uid);\n        break;\n\n      case 'compose':\n        url = {};\n\n        if (this.task == 'mail') {\n          url = {_mbox: this.env.mailbox, _search: this.env.search_request};\n          if (props)\n            url._to = props;\n        }\n        // modify url if we're in addressbook\n        else if (this.task == 'addressbook') {\n          // switch to mail compose step directly\n          if (props && props.indexOf('@') > 0) {\n            url._to = props;\n          }\n          else {\n            var a_cids = [];\n            // use contact id passed as command parameter\n            if (props)\n              a_cids.push(props);\n            // get selected contacts\n            else if (this.contact_list)\n              a_cids = this.contact_list.get_selection();\n\n            if (a_cids.length)\n              this.http_post('mailto', { _cid: a_cids.join(','), _source: this.env.source }, true);\n            else if (this.env.group)\n              this.http_post('mailto', { _gid: this.env.group, _source: this.env.source }, true);\n\n            break;\n          }\n        }\n        else if (props && typeof props == 'string') {\n          url._to = props;\n        }\n        else if (props && typeof props == 'object') {\n          $.extend(url, props);\n        }\n\n        this.open_compose_step(url);\n        break;\n\n      case 'spellcheck':\n        if (this.spellcheck_state()) {\n          this.editor.spellcheck_stop();\n        }\n        else {\n          this.editor.spellcheck_start();\n        }\n        break;\n\n      case 'savedraft':\n        // Reset the auto-save timer\n        clearTimeout(this.save_timer);\n\n        // compose form did not change (and draft wasn't saved already)\n        if (this.env.draft_id && this.cmp_hash == this.compose_field_hash()) {\n          this.auto_save_start();\n          break;\n        }\n\n        this.submit_messageform(true);\n        break;\n\n      case 'send':\n        if (!props.nocheck && !this.env.is_sent && !this.check_compose_input(command))\n          break;\n\n        // Reset the auto-save timer\n        clearTimeout(this.save_timer);\n\n        this.submit_messageform();\n        break;\n\n      case 'send-attachment':\n        // Reset the auto-save timer\n        clearTimeout(this.save_timer);\n\n        if (!(flag = this.upload_file(props || this.gui_objects.uploadform, 'upload'))) {\n          if (flag !== false)\n            alert(this.get_label('selectimportfile'));\n          aborted = true;\n        }\n        break;\n\n      case 'insert-sig':\n        this.change_identity($(\"[name='_from']\")[0], true);\n        break;\n\n      case 'list-addresses':\n        this.list_contacts(props);\n        this.enable_command('add-recipient', false);\n        break;\n\n      case 'add-recipient':\n        this.compose_add_recipient(props);\n        break;\n\n      case 'reply-all':\n      case 'reply-list':\n      case 'reply':\n        if (uid = this.get_single_uid()) {\n          url = {_reply_uid: uid, _mbox: this.get_message_mailbox(uid), _search: this.env.search_request};\n          if (command == 'reply-all')\n            // do reply-list, when list is detected and popup menu wasn't used\n            url._all = (!props && this.env.reply_all_mode == 1 && this.commands['reply-list'] ? 'list' : 'all');\n          else if (command == 'reply-list')\n            url._all = 'list';\n\n          this.open_compose_step(url);\n        }\n        break;\n\n      case 'forward-attachment':\n      case 'forward-inline':\n      case 'forward':\n        var uids = this.env.uid ? [this.env.uid] : (this.message_list ? this.message_list.get_selection() : []);\n        if (uids.length) {\n          url = { _forward_uid: this.uids_to_list(uids), _mbox: this.env.mailbox, _search: this.env.search_request };\n          if (command == 'forward-attachment' || (!props && this.env.forward_attachment) || uids.length > 1)\n            url._attachment = 1;\n          this.open_compose_step(url);\n        }\n        break;\n\n      case 'print':\n        if (this.task == 'addressbook') {\n          if (uid = this.contact_list.get_single_selection()) {\n            url = '&_action=print&_cid=' + uid;\n            if (this.env.source)\n              url += '&_source=' + urlencode(this.env.source);\n            this.open_window(this.env.comm_path + url, true, true);\n          }\n        }\n        else if (this.env.action == 'get') {\n          this.gui_objects.messagepartframe.contentWindow.print();\n        }\n        else if (uid = this.get_single_uid()) {\n          url = this.url('print', this.params_from_uid(uid, {_safe: this.env.safemode ? 1 : 0}));\n          if (this.open_window(url, true, true)) {\n            if (this.env.action != 'show')\n              this.mark_message('read', uid);\n          }\n        }\n        break;\n\n      case 'viewsource':\n        if (uid = this.get_single_uid())\n          this.open_window(this.url('viewsource', this.params_from_uid(uid)), true, true);\n        break;\n\n      case 'download':\n        if (this.env.action == 'get') {\n          location.href = this.secure_url(location.href.replace(/_frame=/, '_download='));\n        }\n        else if (uid = this.get_single_uid()) {\n          this.goto_url('viewsource', this.params_from_uid(uid, {_save: 1}), false, true);\n        }\n        break;\n\n      // quicksearch\n      case 'search':\n        if (!props && this.gui_objects.qsearchbox)\n          props = this.gui_objects.qsearchbox.value;\n        if (props) {\n          this.qsearch(props);\n          break;\n        }\n\n      // reset quicksearch\n      case 'reset-search':\n        var n, s = this.env.search_request || this.env.qsearch;\n\n        this.reset_qsearch(true);\n        this.select_all_mode = false;\n\n        if (s && this.env.action == 'compose') {\n          if (this.contact_list)\n            this.list_contacts_clear();\n        }\n        else if (s && this.env.mailbox) {\n          this.list_mailbox(this.env.mailbox, 1);\n        }\n        else if (s && this.task == 'addressbook') {\n          if (this.env.source == '') {\n            for (n in this.env.address_sources) break;\n            this.env.source = n;\n            this.env.group = '';\n          }\n          this.list_contacts(this.env.source, this.env.group, 1);\n        }\n        break;\n\n      case 'pushgroup':\n        // add group ID to stack\n        this.env.address_group_stack.push(props.id);\n        if (obj && event)\n          rcube_event.cancel(event);\n\n      case 'listgroup':\n        this.reset_qsearch();\n        this.list_contacts(props.source, props.id);\n        break;\n\n      case 'popgroup':\n        if (this.env.address_group_stack.length > 1) {\n          this.env.address_group_stack.pop();\n          this.reset_qsearch();\n          this.list_contacts(props.source, this.env.address_group_stack[this.env.address_group_stack.length-1]);\n        }\n        break;\n\n      case 'import-messages':\n        var form = props || this.gui_objects.importform,\n          importlock = this.set_busy(true, 'importwait');\n\n        $('input[name=\"_unlock\"]', form).val(importlock);\n\n        if (!(flag = this.upload_file(form, 'import', importlock))) {\n          this.set_busy(false, null, importlock);\n          if (flag !== false)\n            alert(this.get_label('selectimportfile'));\n          aborted = true;\n        }\n        break;\n\n      case 'import':\n        if (this.env.action == 'import' && this.gui_objects.importform) {\n          var file = document.getElementById('rcmimportfile');\n          if (file && !file.value) {\n            alert(this.get_label('selectimportfile'));\n            aborted = true;\n            break;\n          }\n          this.gui_objects.importform.submit();\n          this.set_busy(true, 'importwait');\n          this.lock_form(this.gui_objects.importform, true);\n        }\n        else\n          this.goto_url('import', (this.env.source ? '_target='+urlencode(this.env.source)+'&' : ''));\n        break;\n\n      case 'export':\n        if (this.contact_list.rowcount > 0) {\n          this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _search: this.env.search_request }, false, true);\n        }\n        break;\n\n      case 'export-selected':\n        if (this.contact_list.rowcount > 0) {\n          this.goto_url('export', { _source: this.env.source, _gid: this.env.group, _cid: this.contact_list.get_selection().join(',') }, false, true);\n        }\n        break;\n\n      case 'upload-photo':\n        this.upload_contact_photo(props || this.gui_objects.uploadform);\n        break;\n\n      case 'delete-photo':\n        this.replace_contact_photo('-del-');\n        break;\n\n      // user settings commands\n      case 'preferences':\n      case 'identities':\n      case 'responses':\n      case 'folders':\n        this.goto_url('settings/' + command);\n        break;\n\n      case 'undo':\n        this.http_request('undo', '', this.display_message('', 'loading'));\n        break;\n\n      // unified command call (command name == function name)\n      default:\n        var func = command.replace(/-/g, '_');\n        if (this[func] && typeof this[func] === 'function') {\n          ret = this[func](props, obj, event);\n        }\n        break;\n    }\n\n    if (!aborted && this.triggerEvent('after'+command, props) === false)\n      ret = false;\n    this.triggerEvent('actionafter', { props:props, action:command, aborted:aborted });\n\n    return ret === false ? false : obj ? false : true;\n  };\n\n  // set command(s) enabled or disabled\n  this.enable_command = function()\n  {\n    var i, n, args = Array.prototype.slice.call(arguments),\n      enable = args.pop(), cmd;\n\n    for (n=0; n<args.length; n++) {\n      cmd = args[n];\n      // argument of type array\n      if (typeof cmd === 'string') {\n        this.commands[cmd] = enable;\n        this.set_button(cmd, (enable ? 'act' : 'pas'));\n        this.triggerEvent('enable-command', {command: cmd, status: enable});\n      }\n      // push array elements into commands array\n      else {\n        for (i in cmd)\n          args.push(cmd[i]);\n      }\n    }\n  };\n\n  this.command_enabled = function(cmd)\n  {\n    return this.commands[cmd];\n  };\n\n  // lock/unlock interface\n  this.set_busy = function(a, message, id)\n  {\n    if (a && message) {\n      var msg = this.get_label(message);\n      if (msg == message)\n        msg = 'Loading...';\n\n      id = this.display_message(msg, 'loading');\n    }\n    else if (!a && id) {\n      this.hide_message(id);\n    }\n\n    this.busy = a;\n    //document.body.style.cursor = a ? 'wait' : 'default';\n\n    if (this.gui_objects.editform)\n      this.lock_form(this.gui_objects.editform, a);\n\n    return id;\n  };\n\n  // return a localized string\n  this.get_label = function(name, domain)\n  {\n    if (domain && this.labels[domain+'.'+name])\n      return this.labels[domain+'.'+name];\n    else if (this.labels[name])\n      return this.labels[name];\n    else\n      return name;\n  };\n\n  // alias for convenience reasons\n  this.gettext = this.get_label;\n\n  // switch to another application task\n  this.switch_task = function(task)\n  {\n    if (this.task === task && task != 'mail')\n      return;\n\n    var url = this.get_task_url(task);\n\n    if (task == 'mail')\n      url += '&_mbox=INBOX';\n    else if (task == 'logout' && !this.env.server_error) {\n      url = this.secure_url(url);\n      this.clear_compose_data();\n    }\n\n    this.redirect(url);\n  };\n\n  this.get_task_url = function(task, url)\n  {\n    if (!url)\n      url = this.env.comm_path;\n\n    if (url.match(/[?&]_task=[a-zA-Z0-9_-]+/))\n        return url.replace(/_task=[a-zA-Z0-9_-]+/, '_task=' + task);\n    else\n        return url.replace(/\\?.*$/, '') + '?_task=' + task;\n  };\n\n  this.reload = function(delay)\n  {\n    if (this.is_framed())\n      parent.rcmail.reload(delay);\n    else if (delay)\n      setTimeout(function() { ref.reload(); }, delay);\n    else if (window.location)\n      location.href = this.url('', {_extwin: this.env.extwin});\n  };\n\n  // Add variable to GET string, replace old value if exists\n  this.add_url = function(url, name, value)\n  {\n    value = urlencode(value);\n\n    if (/(\\?.*)$/.test(url)) {\n      var urldata = RegExp.$1,\n        datax = RegExp('((\\\\?|&)'+RegExp.escape(name)+'=[^&]*)');\n\n      if (datax.test(urldata)) {\n        urldata = urldata.replace(datax, RegExp.$2 + name + '=' + value);\n      }\n      else\n        urldata += '&' + name + '=' + value\n\n      return url.replace(/(\\?.*)$/, urldata);\n    }\n\n    return url + '?' + name + '=' + value;\n  };\n\n  // append CSRF protection token to the given url\n  this.secure_url = function(url)\n  {\n    return this.add_url(url, '_token', this.env.request_token);\n  },\n\n  this.is_framed = function()\n  {\n    return this.env.framed && parent.rcmail && parent.rcmail != this && typeof parent.rcmail.command == 'function';\n  };\n\n  this.save_pref = function(prop)\n  {\n    var request = {_name: prop.name, _value: prop.value};\n\n    if (prop.session)\n      request._session = prop.session;\n    if (prop.env)\n      this.env[prop.env] = prop.value;\n\n    this.http_post('save-pref', request);\n  };\n\n  this.html_identifier = function(str, encode)\n  {\n    return encode ? this.html_identifier_encode(str) : String(str).replace(this.identifier_expr, '_');\n  };\n\n  this.html_identifier_encode = function(str)\n  {\n    return Base64.encode(String(str)).replace(/=+$/, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n  };\n\n  this.html_identifier_decode = function(str)\n  {\n    str = String(str).replace(/-/g, '+').replace(/_/g, '/');\n\n    while (str.length % 4) str += '=';\n\n    return Base64.decode(str);\n  };\n\n\n  /*********************************************************/\n  /*********        event handling methods         *********/\n  /*********************************************************/\n\n  this.drag_menu = function(e, target)\n  {\n    var modkey = rcube_event.get_modifier(e),\n      menu = this.gui_objects.dragmenu;\n\n    if (menu && modkey == SHIFT_KEY && this.commands['copy']) {\n      var pos = rcube_event.get_mouse_pos(e);\n      this.env.drag_target = target;\n      this.show_menu(this.gui_objects.dragmenu.id, true, e);\n      $(menu).css({top: (pos.y-10)+'px', left: (pos.x-10)+'px'});\n      return true;\n    }\n\n    return false;\n  };\n\n  this.drag_menu_action = function(action)\n  {\n    var menu = this.gui_objects.dragmenu;\n    if (menu) {\n      $(menu).hide();\n    }\n    this.command(action, this.env.drag_target);\n    this.env.drag_target = null;\n  };\n\n  this.drag_start = function(list)\n  {\n    this.drag_active = true;\n\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n    if (this.preview_read_timer)\n      clearTimeout(this.preview_read_timer);\n\n    // prepare treelist widget for dragging interactions\n    if (this.treelist)\n      this.treelist.drag_start();\n  };\n\n  this.drag_end = function(e)\n  {\n    var list, model;\n\n    if (this.treelist)\n      this.treelist.drag_end();\n\n    // execute drag & drop action when mouse was released\n    if (list = this.message_list)\n      model = this.env.mailboxes;\n    else if (list = this.contact_list)\n      model = this.env.contactfolders;\n\n    if (this.drag_active && model && this.env.last_folder_target) {\n      var target = model[this.env.last_folder_target];\n      list.draglayer.hide();\n\n      if (this.contact_list) {\n        if (!this.contacts_drag_menu(e, target))\n          this.command('move', target);\n      }\n      else if (!this.drag_menu(e, target))\n        this.command('move', target);\n    }\n\n    this.drag_active = false;\n    this.env.last_folder_target = null;\n  };\n\n  this.drag_move = function(e)\n  {\n    if (this.gui_objects.folderlist) {\n      var drag_target, oldclass,\n        layerclass = 'draglayernormal',\n        mouse = rcube_event.get_mouse_pos(e);\n\n      if (this.contact_list && this.contact_list.draglayer)\n        oldclass = this.contact_list.draglayer.attr('class');\n\n      // mouse intersects a valid drop target on the treelist\n      if (this.treelist && (drag_target = this.treelist.intersects(mouse, true))) {\n        this.env.last_folder_target = drag_target;\n        layerclass = 'draglayer' + (this.check_droptarget(drag_target) > 1 ? 'copy' : 'normal');\n      }\n      else {\n        // Clear target, otherwise drag end will trigger move into last valid droptarget\n        this.env.last_folder_target = null;\n      }\n\n      if (layerclass != oldclass && this.contact_list && this.contact_list.draglayer)\n        this.contact_list.draglayer.attr('class', layerclass);\n    }\n  };\n\n  this.collapse_folder = function(name)\n  {\n    if (this.treelist)\n      this.treelist.toggle(name);\n  };\n\n  this.folder_collapsed = function(node)\n  {\n    var prefname = this.env.task == 'addressbook' ? 'collapsed_abooks' : 'collapsed_folders',\n      old = this.env[prefname];\n\n    if (node.collapsed) {\n      this.env[prefname] = this.env[prefname] + '&'+urlencode(node.id)+'&';\n\n      // select the folder if one of its childs is currently selected\n      // don't select if it's virtual (#1488346)\n      if (!node.virtual && this.env.mailbox && this.env.mailbox.startsWith(node.id + this.env.delimiter))\n        this.command('list', node.id);\n    }\n    else {\n      var reg = new RegExp('&'+urlencode(node.id)+'&');\n      this.env[prefname] = this.env[prefname].replace(reg, '');\n    }\n\n    if (!this.drag_active) {\n      if (old !== this.env[prefname])\n        this.command('save-pref', { name: prefname, value: this.env[prefname] });\n\n      if (this.env.unread_counts)\n        this.set_unread_count_display(node.id, false);\n    }\n  };\n\n  // global mouse-click handler to cleanup some UI elements\n  this.doc_mouse_up = function(e)\n  {\n    var list, id, target = rcube_event.get_target(e);\n\n    // ignore event if jquery UI dialog is open\n    if ($(target).closest('.ui-dialog, .ui-widget-overlay').length)\n      return;\n\n    // remove focus from list widgets\n    if (window.rcube_list_widget && rcube_list_widget._instances.length) {\n      $.each(rcube_list_widget._instances, function(i,list){\n        if (list && !rcube_mouse_is_over(e, list.list.parentNode))\n          list.blur();\n      });\n    }\n\n    // reset 'pressed' buttons\n    if (this.buttons_sel) {\n      for (id in this.buttons_sel)\n        if (typeof id !== 'function')\n          this.button_out(this.buttons_sel[id], id);\n      this.buttons_sel = {};\n    }\n\n    // reset popup menus; delayed to have updated menu_stack data\n    setTimeout(function(e){\n      var obj, skip, config, id, i, parents = $(target).parents();\n      for (i = ref.menu_stack.length - 1; i >= 0; i--) {\n        id = ref.menu_stack[i];\n        obj = $('#' + id);\n\n        if (obj.is(':visible')\n          && target != obj.data('opener')\n          && target != obj.get(0)  // check if scroll bar was clicked (#1489832)\n          && !parents.is(obj.data('opener'))\n          && id != skip\n          && (obj.attr('data-editable') != 'true' || !$(target).parents('#' + id).length)\n          && (obj.attr('data-sticky') != 'true' || !rcube_mouse_is_over(e, obj.get(0)))\n        ) {\n          ref.hide_menu(id, e);\n        }\n        skip = obj.data('parent');\n      }\n    }, 10, e);\n  };\n\n  // global keypress event handler\n  this.doc_keypress = function(e)\n  {\n    // Helper method to move focus to the next/prev active menu item\n    var focus_menu_item = function(dir) {\n      var obj, item, mod = dir < 0 ? 'prevAll' : 'nextAll', limit = dir < 0 ? 'last' : 'first';\n      if (ref.focused_menu && (obj = $('#'+ref.focused_menu))) {\n        item = obj.find(':focus').closest('li')[mod](':has(:not([aria-disabled=true]))').find('a,input')[limit]();\n        if (!item.length)\n          item = obj.find(':focus').closest('ul')[mod](':has(:not([aria-disabled=true]))').find('a,input')[limit]();\n        return item.focus().length;\n      }\n\n      return 0;\n    };\n\n    var target = e.target || {},\n      keyCode = rcube_event.get_keycode(e);\n\n    // save global reference for keyboard detection on click events in IE\n    rcube_event._last_keyboard_event = e;\n\n    if (e.keyCode != 27 && (!this.menu_keyboard_active || target.nodeName == 'TEXTAREA' || target.nodeName == 'SELECT')) {\n      return true;\n    }\n\n    switch (keyCode) {\n      case 38:\n      case 40:\n      case 63232: // \"up\", in safari keypress\n      case 63233: // \"down\", in safari keypress\n        focus_menu_item(keyCode == 38 || keyCode == 63232 ? -1 : 1);\n        return rcube_event.cancel(e);\n\n      case 9:   // tab\n        if (this.focused_menu) {\n          var mod = rcube_event.get_modifier(e);\n          if (!focus_menu_item(mod == SHIFT_KEY ? -1 : 1)) {\n            this.hide_menu(this.focused_menu, e);\n          }\n        }\n        return rcube_event.cancel(e);\n\n      case 27:  // esc\n        if (this.menu_stack.length)\n          this.hide_menu(this.menu_stack[this.menu_stack.length-1], e);\n        break;\n    }\n\n    return true;\n  }\n\n  this.msglist_select = function(list)\n  {\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n    if (this.preview_read_timer)\n      clearTimeout(this.preview_read_timer);\n\n    var selected = list.get_single_selection();\n\n    this.enable_command(this.env.message_commands, selected != null);\n    if (selected) {\n      // Hide certain command buttons when Drafts folder is selected\n      if (this.env.mailbox == this.env.drafts_mailbox)\n        this.enable_command('reply', 'reply-all', 'reply-list', 'forward', 'forward-attachment', 'forward-inline', false);\n      // Disable reply-list when List-Post header is not set\n      else {\n        var msg = this.env.messages[selected];\n        if (!msg.ml)\n          this.enable_command('reply-list', false);\n      }\n    }\n    // Multi-message commands\n    this.enable_command('delete', 'move', 'copy', 'mark', 'forward', 'forward-attachment', list.selection.length > 0);\n\n    // reset all-pages-selection\n    if (selected || (list.selection.length && list.selection.length != list.rowcount))\n      this.select_all_mode = false;\n\n    // start timer for message preview (wait for double click)\n    if (selected && this.env.contentframe && !list.multi_selecting && !this.dummy_select)\n      this.preview_timer = setTimeout(function() { ref.msglist_get_preview(); }, this.dblclick_time);\n    else if (this.env.contentframe)\n      this.show_contentframe(false);\n  };\n\n  // This allow as to re-select selected message and display it in preview frame\n  this.msglist_click = function(list)\n  {\n    if (list.multi_selecting || !this.env.contentframe)\n      return;\n\n    if (list.get_single_selection())\n      return;\n\n    var win = this.get_frame_window(this.env.contentframe);\n\n    if (win && win.location.href.indexOf(this.env.blankpage) >= 0) {\n      if (this.preview_timer)\n        clearTimeout(this.preview_timer);\n      if (this.preview_read_timer)\n        clearTimeout(this.preview_read_timer);\n\n      this.preview_timer = setTimeout(function() { ref.msglist_get_preview(); }, this.dblclick_time);\n    }\n  };\n\n  this.msglist_dbl_click = function(list)\n  {\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n    if (this.preview_read_timer)\n      clearTimeout(this.preview_read_timer);\n\n    var uid = list.get_single_selection();\n\n    if (uid && (this.env.messages[uid].mbox || this.env.mailbox) == this.env.drafts_mailbox)\n      this.open_compose_step({ _draft_uid: uid, _mbox: this.env.mailbox });\n    else if (uid)\n      this.show_message(uid, false, false);\n  };\n\n  this.msglist_keypress = function(list)\n  {\n    if (list.modkey == CONTROL_KEY)\n      return;\n\n    if (list.key_pressed == list.ENTER_KEY)\n      this.command('show');\n    else if (list.key_pressed == list.DELETE_KEY || list.key_pressed == list.BACKSPACE_KEY)\n      this.command('delete');\n    else if (list.key_pressed == 33)\n      this.command('previouspage');\n    else if (list.key_pressed == 34)\n      this.command('nextpage');\n  };\n\n  this.msglist_get_preview = function()\n  {\n    var uid = this.get_single_uid();\n    if (uid && this.env.contentframe && !this.drag_active)\n      this.show_message(uid, false, true);\n    else if (this.env.contentframe)\n      this.show_contentframe(false);\n  };\n\n  this.msglist_expand = function(row)\n  {\n    if (this.env.messages[row.uid])\n      this.env.messages[row.uid].expanded = row.expanded;\n    $(row.obj)[row.expanded?'addClass':'removeClass']('expanded');\n  };\n\n  this.msglist_set_coltypes = function(list)\n  {\n    var i, found, name, cols = list.thead.rows[0].cells;\n\n    this.env.listcols = [];\n\n    for (i=0; i<cols.length; i++)\n      if (cols[i].id && cols[i].id.startsWith('rcm')) {\n        name = cols[i].id.slice(3);\n        this.env.listcols.push(name);\n      }\n\n    if ((found = $.inArray('flag', this.env.listcols)) >= 0)\n      this.env.flagged_col = found;\n\n    if ((found = $.inArray('subject', this.env.listcols)) >= 0)\n      this.env.subject_col = found;\n\n    this.command('save-pref', { name: 'list_cols', value: this.env.listcols, session: 'list_attrib/columns' });\n  };\n\n  this.check_droptarget = function(id)\n  {\n    switch (this.task) {\n      case 'mail':\n        return (this.env.mailboxes[id]\n            && !this.env.mailboxes[id].virtual\n            && (this.env.mailboxes[id].id != this.env.mailbox || this.is_multifolder_listing())) ? 1 : 0;\n\n      case 'addressbook':\n        var target;\n        if (id != this.env.source && (target = this.env.contactfolders[id])) {\n          // droptarget is a group\n          if (target.type == 'group') {\n            if (target.id != this.env.group && !this.env.contactfolders[target.source].readonly) {\n              var is_other = this.env.selection_sources.length > 1 || $.inArray(target.source, this.env.selection_sources) == -1;\n              return !is_other || this.commands.move ? 1 : 2;\n            }\n          }\n          // droptarget is a (writable) addressbook and it's not the source\n          else if (!target.readonly && (this.env.selection_sources.length > 1 || $.inArray(id, this.env.selection_sources) == -1)) {\n            return this.commands.move ? 1 : 2;\n          }\n        }\n    }\n\n    return 0;\n  };\n\n  // open popup window\n  this.open_window = function(url, small, toolbar)\n  {\n    var wname = 'rcmextwin' + new Date().getTime();\n\n    url += (url.match(/\\?/) ? '&' : '?') + '_extwin=1';\n\n    if (this.env.standard_windows)\n      var extwin = window.open(url, wname);\n    else {\n      var win = this.is_framed() ? parent.window : window,\n        page = $(win),\n        page_width = page.width(),\n        page_height = bw.mz ? $('body', win).height() : page.height(),\n        w = Math.min(small ? this.env.popup_width_small : this.env.popup_width, page_width),\n        h = page_height, // always use same height\n        l = (win.screenLeft || win.screenX) + 20,\n        t = (win.screenTop || win.screenY) + 20,\n        extwin = window.open(url, wname,\n          'width='+w+',height='+h+',top='+t+',left='+l+',resizable=yes,location=no,scrollbars=yes'\n          +(toolbar ? ',toolbar=yes,menubar=yes,status=yes' : ',toolbar=no,menubar=no,status=no'));\n    }\n\n    // detect popup blocker (#1489618)\n    // don't care this might not work with all browsers\n    if (!extwin || extwin.closed) {\n      this.display_message(this.get_label('windowopenerror'), 'warning');\n      return;\n    }\n\n    // write loading... message to empty windows\n    if (!url && extwin.document) {\n      extwin.document.write('<html><body>' + this.get_label('loading') + '</body></html>');\n    }\n\n    // allow plugins to grab the window reference (#1489413)\n    this.triggerEvent('openwindow', { url:url, handle:extwin });\n\n    // focus window, delayed to bring to front\n    setTimeout(function() { extwin && extwin.focus(); }, 10);\n\n    return extwin;\n  };\n\n\n  /*********************************************************/\n  /*********     (message) list functionality      *********/\n  /*********************************************************/\n\n  this.init_message_row = function(row)\n  {\n    var i, fn = {}, uid = row.uid,\n      status_icon = (this.env.status_col != null ? 'status' : 'msg') + 'icn' + row.id;\n\n    if (uid && this.env.messages[uid])\n      $.extend(row, this.env.messages[uid]);\n\n    // set eventhandler to status icon\n    if (row.icon = document.getElementById(status_icon)) {\n      fn.icon = function(e) { ref.command('toggle_status', uid); };\n    }\n\n    // save message icon position too\n    if (this.env.status_col != null)\n      row.msgicon = document.getElementById('msgicn'+row.id);\n    else\n      row.msgicon = row.icon;\n\n    // set eventhandler to flag icon\n    if (this.env.flagged_col != null && (row.flagicon = document.getElementById('flagicn'+row.id))) {\n      fn.flagicon = function(e) { ref.command('toggle_flag', uid); };\n    }\n\n    // set event handler to thread expand/collapse icon\n    if (!row.depth && row.has_children && (row.expando = document.getElementById('rcmexpando'+row.id))) {\n      fn.expando = function(e) { ref.expand_message_row(e, uid); };\n    }\n\n    // attach events\n    $.each(fn, function(i, f) {\n      row[i].onclick = function(e) { f(e); return rcube_event.cancel(e); };\n      if (bw.touch && row[i].addEventListener) {\n        row[i].addEventListener('touchend', function(e) {\n          if (e.changedTouches.length == 1) {\n            f(e);\n            return rcube_event.cancel(e);\n          }\n        }, false);\n      }\n    });\n\n    this.triggerEvent('insertrow', { uid:uid, row:row });\n  };\n\n  // create a table row in the message list\n  this.add_message_row = function(uid, cols, flags, attop)\n  {\n    if (!this.gui_objects.messagelist || !this.message_list)\n      return false;\n\n    // Prevent from adding messages from different folder (#1487752)\n    if (flags.mbox != this.env.mailbox && !flags.skip_mbox_check)\n      return false;\n\n    if (!this.env.messages[uid])\n      this.env.messages[uid] = {};\n\n    // merge flags over local message object\n    $.extend(this.env.messages[uid], {\n      deleted: flags.deleted?1:0,\n      replied: flags.answered?1:0,\n      unread: !flags.seen?1:0,\n      forwarded: flags.forwarded?1:0,\n      flagged: flags.flagged?1:0,\n      has_children: flags.has_children?1:0,\n      depth: flags.depth?flags.depth:0,\n      unread_children: flags.unread_children?flags.unread_children:0,\n      parent_uid: flags.parent_uid?flags.parent_uid:0,\n      selected: this.select_all_mode || this.message_list.in_selection(uid),\n      ml: flags.ml?1:0,\n      ctype: flags.ctype,\n      mbox: flags.mbox,\n      // flags from plugins\n      flags: flags.extra_flags\n    });\n\n    var c, n, col, html, css_class, label, status_class = '', status_label = '',\n      tree = '', expando = '',\n      list = this.message_list,\n      rows = list.rows,\n      message = this.env.messages[uid],\n      msg_id = this.html_identifier(uid,true),\n      row_class = 'message'\n        + (!flags.seen ? ' unread' : '')\n        + (flags.deleted ? ' deleted' : '')\n        + (flags.flagged ? ' flagged' : '')\n        + (message.selected ? ' selected' : ''),\n      row = { cols:[], style:{}, id:'rcmrow'+msg_id, uid:uid };\n\n    // message status icons\n    css_class = 'msgicon';\n    if (this.env.status_col === null) {\n      css_class += ' status';\n      if (flags.deleted) {\n        status_class += ' deleted';\n        status_label += this.get_label('deleted') + ' ';\n      }\n      else if (!flags.seen) {\n        status_class += ' unread';\n        status_label += this.get_label('unread') + ' ';\n      }\n      else if (flags.unread_children > 0) {\n        status_class += ' unreadchildren';\n      }\n    }\n    if (flags.answered) {\n      status_class += ' replied';\n      status_label += this.get_label('replied') + ' ';\n    }\n    if (flags.forwarded) {\n      status_class += ' forwarded';\n      status_label += this.get_label('forwarded') + ' ';\n    }\n\n    // update selection\n    if (message.selected && !list.in_selection(uid))\n      list.selection.push(uid);\n\n    // threads\n    if (this.env.threading) {\n      if (message.depth) {\n        // This assumes that div width is hardcoded to 15px,\n        tree += '<span id=\"rcmtab' + msg_id + '\" class=\"branch\" style=\"width:' + (message.depth * 15) + 'px;\">&nbsp;&nbsp;</span>';\n\n        if ((rows[message.parent_uid] && rows[message.parent_uid].expanded === false)\n          || ((this.env.autoexpand_threads == 0 || this.env.autoexpand_threads == 2) &&\n            (!rows[message.parent_uid] || !rows[message.parent_uid].expanded))\n        ) {\n          row.style.display = 'none';\n          message.expanded = false;\n        }\n        else\n          message.expanded = true;\n\n        row_class += ' thread expanded';\n      }\n      else if (message.has_children) {\n        if (message.expanded === undefined && (this.env.autoexpand_threads == 1 || (this.env.autoexpand_threads == 2 && message.unread_children))) {\n          message.expanded = true;\n        }\n\n        expando = '<div id=\"rcmexpando' + row.id + '\" class=\"' + (message.expanded ? 'expanded' : 'collapsed') + '\">&nbsp;&nbsp;</div>';\n        row_class += ' thread' + (message.expanded? ' expanded' : '');\n      }\n\n      if (flags.unread_children && flags.seen && !message.expanded)\n        row_class += ' unroot';\n    }\n\n    tree += '<span id=\"msgicn'+row.id+'\" class=\"'+css_class+status_class+'\" title=\"'+status_label+'\"></span>';\n    row.className = row_class;\n\n    // build subject link\n    if (cols.subject) {\n      var action  = flags.mbox == this.env.drafts_mailbox ? 'compose' : 'show',\n        uid_param = flags.mbox == this.env.drafts_mailbox ? '_draft_uid' : '_uid',\n        query = { _mbox: flags.mbox };\n      query[uid_param] = uid;\n      cols.subject = '<a href=\"' + this.url(action, query) + '\" onclick=\"return rcube_event.keyboard_only(event)\"' +\n        ' onmouseover=\"rcube_webmail.long_subject_title(this,'+(message.depth+1)+')\" tabindex=\"-1\"><span>'+cols.subject+'</span></a>';\n    }\n\n    // add each submitted col\n    for (n in this.env.listcols) {\n      c = this.env.listcols[n];\n      col = {className: String(c).toLowerCase(), events:{}};\n\n      if (this.env.coltypes[c] && this.env.coltypes[c].hidden) {\n        col.className += ' hidden';\n      }\n\n      if (c == 'flag') {\n        css_class = (flags.flagged ? 'flagged' : 'unflagged');\n        label = this.get_label(css_class);\n        html = '<span id=\"flagicn'+row.id+'\" class=\"'+css_class+'\" title=\"'+label+'\"></span>';\n      }\n      else if (c == 'attachment') {\n        label = this.get_label('withattachment');\n        if (flags.attachmentClass)\n          html = '<span class=\"'+flags.attachmentClass+'\" title=\"'+label+'\"></span>';\n        else if (/application\\/|multipart\\/(m|signed)/.test(flags.ctype))\n          html = '<span class=\"attachment\" title=\"'+label+'\"></span>';\n        else if (/multipart\\/report/.test(flags.ctype))\n          html = '<span class=\"report\"></span>';\n          else\n          html = '&nbsp;';\n      }\n      else if (c == 'status') {\n        label = '';\n        if (flags.deleted) {\n          css_class = 'deleted';\n          label = this.get_label('deleted');\n        }\n        else if (!flags.seen) {\n          css_class = 'unread';\n          label = this.get_label('unread');\n        }\n        else if (flags.unread_children > 0) {\n          css_class = 'unreadchildren';\n        }\n        else\n          css_class = 'msgicon';\n        html = '<span id=\"statusicn'+row.id+'\" class=\"'+css_class+status_class+'\" title=\"'+label+'\"></span>';\n      }\n      else if (c == 'threads')\n        html = expando;\n      else if (c == 'subject') {\n        if (bw.ie)\n          col.events.mouseover = function() { rcube_webmail.long_subject_title_ex(this); };\n        html = tree + cols[c];\n      }\n      else if (c == 'priority') {\n        if (flags.prio > 0 && flags.prio < 6) {\n          label = this.get_label('priority') + ' ' + flags.prio;\n          html = '<span class=\"prio'+flags.prio+'\" title=\"'+label+'\"></span>';\n        }\n        else\n          html = '&nbsp;';\n      }\n      else if (c == 'folder') {\n        html = '<span onmouseover=\"rcube_webmail.long_subject_title(this)\">' + cols[c] + '<span>';\n      }\n      else\n        html = cols[c];\n\n      col.innerHTML = html;\n      row.cols.push(col);\n    }\n\n    list.insert_row(row, attop);\n\n    // remove 'old' row\n    if (attop && this.env.pagesize && list.rowcount > this.env.pagesize) {\n      var uid = list.get_last_row();\n      list.remove_row(uid);\n      list.clear_selection(uid);\n    }\n  };\n\n  this.set_list_sorting = function(sort_col, sort_order)\n  {\n    var sort_old = this.env.sort_col == 'arrival' ? 'date' : this.env.sort_col,\n      sort_new = sort_col == 'arrival' ? 'date' : sort_col;\n\n    // set table header class\n    $('#rcm' + sort_old).removeClass('sorted' + this.env.sort_order.toUpperCase());\n    if (sort_new)\n      $('#rcm' + sort_new).addClass('sorted' + sort_order);\n\n    // if sorting by 'arrival' is selected, click on date column should not switch to 'date'\n    $('#rcmdate > a').prop('rel', sort_col == 'arrival' ? 'arrival' : 'date');\n\n    this.env.sort_col = sort_col;\n    this.env.sort_order = sort_order;\n  };\n\n  this.set_list_options = function(cols, sort_col, sort_order, threads)\n  {\n    var update, post_data = {};\n\n    if (sort_col === undefined)\n      sort_col = this.env.sort_col;\n    if (!sort_order)\n      sort_order = this.env.sort_order;\n\n    if (this.env.sort_col != sort_col || this.env.sort_order != sort_order) {\n      update = 1;\n      this.set_list_sorting(sort_col, sort_order);\n    }\n\n    if (this.env.threading != threads) {\n      update = 1;\n      post_data._threads = threads;\n    }\n\n    if (cols && cols.length) {\n      // make sure new columns are added at the end of the list\n      var i, idx, name, newcols = [], oldcols = this.env.listcols;\n      for (i=0; i<oldcols.length; i++) {\n        name = oldcols[i];\n        idx = $.inArray(name, cols);\n        if (idx != -1) {\n          newcols.push(name);\n          delete cols[idx];\n        }\n      }\n      for (i=0; i<cols.length; i++)\n        if (cols[i])\n          newcols.push(cols[i]);\n\n      if (newcols.join() != oldcols.join()) {\n        update = 1;\n        post_data._cols = newcols.join(',');\n      }\n    }\n\n    if (update)\n      this.list_mailbox('', '', sort_col+'_'+sort_order, post_data);\n  };\n\n  // when user double-clicks on a row\n  this.show_message = function(id, safe, preview)\n  {\n    if (!id)\n      return;\n\n    var win, target = window,\n      url = this.params_from_uid(id, {_caps: this.browser_capabilities()});\n\n    if (preview && (win = this.get_frame_window(this.env.contentframe))) {\n      target = win;\n      url._framed = 1;\n    }\n\n    if (safe)\n      url._safe = 1;\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    if (this.env.extwin)\n      url._extwin = 1;\n\n    url = this.url(preview ? 'preview': 'show', url);\n\n    if (preview && String(target.location.href).indexOf(url) >= 0) {\n      this.show_contentframe(true);\n    }\n    else {\n      if (!preview && this.env.message_extwin && !this.env.extwin)\n        this.open_window(url, true);\n      else\n        this.location_href(url, target, true);\n\n      // mark as read and change mbox unread counter\n      if (preview && this.message_list && this.message_list.rows[id] && this.message_list.rows[id].unread && this.env.preview_pane_mark_read > 0) {\n        this.preview_read_timer = setTimeout(function() {\n          ref.set_unread_message(id, ref.env.mailbox);\n          ref.http_post('mark', {_uid: id, _flag: 'read', _mbox: ref.env.mailbox, _quiet: 1});\n        }, this.env.preview_pane_mark_read * 1000);\n      }\n    }\n  };\n\n  // update message status and unread counter after marking a message as read\n  this.set_unread_message = function(id, folder)\n  {\n    var self = this;\n\n    // find window with messages list\n    if (!self.message_list)\n      self = self.opener();\n\n    if (!self && window.parent)\n      self = parent.rcmail;\n\n    if (!self || !self.message_list)\n      return;\n\n    // this may fail in multifolder mode\n    if (self.set_message(id, 'unread', false) === false)\n      self.set_message(id + '-' + folder, 'unread', false);\n\n    if (self.env.unread_counts[folder] > 0) {\n      self.env.unread_counts[folder] -= 1;\n      self.set_unread_count(folder, self.env.unread_counts[folder], folder == 'INBOX' && !self.is_multifolder_listing());\n    }\n  };\n\n  this.show_contentframe = function(show)\n  {\n    var frame, win, name = this.env.contentframe;\n\n    if (name && (frame = this.get_frame_element(name))) {\n      if (!show && (win = this.get_frame_window(name))) {\n        if (win.location.href.indexOf(this.env.blankpage) < 0) {\n          if (win.stop)\n            win.stop();\n          else // IE\n            win.document.execCommand('Stop');\n\n          win.location.href = this.env.blankpage;\n        }\n      }\n      else if (!bw.safari && !bw.konq)\n        $(frame)[show ? 'show' : 'hide']();\n    }\n\n    if (!show && this.env.frame_lock)\n      this.set_busy(false, null, this.env.frame_lock);\n  };\n\n  this.get_frame_element = function(id)\n  {\n    var frame;\n\n    if (id && (frame = document.getElementById(id)))\n      return frame;\n  };\n\n  this.get_frame_window = function(id)\n  {\n    var frame = this.get_frame_element(id);\n\n    if (frame && frame.name && window.frames)\n      return window.frames[frame.name];\n  };\n\n  this.lock_frame = function()\n  {\n    if (!this.env.frame_lock)\n      (this.is_framed() ? parent.rcmail : this).env.frame_lock = this.set_busy(true, 'loading');\n  };\n\n  // list a specific page\n  this.list_page = function(page)\n  {\n    if (page == 'next')\n      page = this.env.current_page+1;\n    else if (page == 'last')\n      page = this.env.pagecount;\n    else if (page == 'prev' && this.env.current_page > 1)\n      page = this.env.current_page-1;\n    else if (page == 'first' && this.env.current_page > 1)\n      page = 1;\n\n    if (page > 0 && page <= this.env.pagecount) {\n      this.env.current_page = page;\n\n      if (this.task == 'addressbook' || this.contact_list)\n        this.list_contacts(this.env.source, this.env.group, page);\n      else if (this.task == 'mail')\n        this.list_mailbox(this.env.mailbox, page);\n    }\n  };\n\n  // sends request to check for recent messages\n  this.checkmail = function()\n  {\n    var lock = this.set_busy(true, 'checkingmail'),\n      params = this.check_recent_params();\n\n    this.http_post('check-recent', params, lock);\n  };\n\n  // list messages of a specific mailbox using filter\n  this.filter_mailbox = function(filter)\n  {\n    if (this.filter_disabled)\n      return;\n\n    var lock = this.set_busy(true, 'searching');\n\n    this.clear_message_list();\n\n    // reset vars\n    this.env.current_page = 1;\n    this.env.search_filter = filter;\n    this.http_request('search', this.search_params(false, filter), lock);\n  };\n\n  // reload the current message listing\n  this.refresh_list = function()\n  {\n    this.list_mailbox(this.env.mailbox, this.env.current_page || 1, null, { _clear:1 }, true);\n    if (this.message_list)\n      this.message_list.clear_selection();\n  };\n\n  // list messages of a specific mailbox\n  this.list_mailbox = function(mbox, page, sort, url, update_only)\n  {\n    var win, target = window;\n\n    if (typeof url != 'object')\n      url = {};\n\n    if (!mbox)\n      mbox = this.env.mailbox ? this.env.mailbox : 'INBOX';\n\n    // add sort to url if set\n    if (sort)\n      url._sort = sort;\n\n    // folder change, reset page, search scope, etc.\n    if (this.env.mailbox != mbox) {\n      page = 1;\n      this.env.current_page = page;\n      this.env.search_scope = 'base';\n      this.select_all_mode = false;\n      this.reset_search_filter();\n    }\n    // also send search request to get the right messages\n    else if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    if (!update_only) {\n      // unselect selected messages and clear the list and message data\n      this.clear_message_list();\n\n      if (mbox != this.env.mailbox || (mbox == this.env.mailbox && !page && !sort))\n        url._refresh = 1;\n\n      this.select_folder(mbox, '', true);\n      this.unmark_folder(mbox, 'recent', '', true);\n      this.env.mailbox = mbox;\n    }\n\n    // load message list remotely\n    if (this.gui_objects.messagelist) {\n      this.list_mailbox_remote(mbox, page, url);\n      return;\n    }\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      target = win;\n      url._framed = 1;\n    }\n\n    if (this.env.uid)\n      url._uid = this.env.uid;\n\n    // load message list to target frame/window\n    if (mbox) {\n      this.set_busy(true, 'loading');\n      url._mbox = mbox;\n      if (page)\n        url._page = page;\n      this.location_href(url, target);\n    }\n  };\n\n  this.clear_message_list = function()\n  {\n    this.env.messages = {};\n\n    this.show_contentframe(false);\n    if (this.message_list)\n      this.message_list.clear(true);\n  };\n\n  // send remote request to load message list\n  this.list_mailbox_remote = function(mbox, page, url)\n  {\n    var lock = this.set_busy(true, 'loading');\n\n    if (typeof url != 'object')\n      url = {};\n    url._mbox = mbox;\n    if (page)\n      url._page = page;\n\n    this.http_request('list', url, lock);\n    this.update_state({ _mbox: mbox, _page: (page && page > 1 ? page : null) });\n  };\n\n  // removes messages that doesn't exists from list selection array\n  this.update_selection = function()\n  {\n    var list = this.message_list,\n      selected = list.selection,\n      rows = list.rows,\n      i, selection = [];\n\n    for (i in selected)\n      if (rows[selected[i]])\n        selection.push(selected[i]);\n\n    list.selection = selection;\n\n    // reset preview frame, if currently previewed message is not selected (has been removed)\n    try {\n      var win = this.get_frame_window(this.env.contentframe),\n        id = win.rcmail.env.uid;\n\n      if (id && !list.in_selection(id))\n        this.show_contentframe(false);\n    }\n    catch (e) {};\n  };\n\n  // expand all threads with unread children\n  this.expand_unread = function()\n  {\n    var r, tbody = this.message_list.tbody,\n      new_row = tbody.firstChild;\n\n    while (new_row) {\n      if (new_row.nodeType == 1 && (r = this.message_list.rows[new_row.uid]) && r.unread_children) {\n        this.message_list.expand_all(r);\n        this.set_unread_children(r.uid);\n      }\n\n      new_row = new_row.nextSibling;\n    }\n\n    return false;\n  };\n\n  // thread expanding/collapsing handler\n  this.expand_message_row = function(e, uid)\n  {\n    var row = this.message_list.rows[uid];\n\n    // handle unread_children mark\n    row.expanded = !row.expanded;\n    this.set_unread_children(uid);\n    row.expanded = !row.expanded;\n\n    this.message_list.expand_row(e, uid);\n  };\n\n  // message list expanding\n  this.expand_threads = function()\n  {\n    if (!this.env.threading || !this.env.autoexpand_threads || !this.message_list)\n      return;\n\n    switch (this.env.autoexpand_threads) {\n      case 2: this.expand_unread(); break;\n      case 1: this.message_list.expand_all(); break;\n    }\n  };\n\n  // Initializes threads indicators/expanders after list update\n  this.init_threads = function(roots, mbox)\n  {\n    // #1487752\n    if (mbox && mbox != this.env.mailbox)\n      return false;\n\n    for (var n=0, len=roots.length; n<len; n++)\n      this.add_tree_icons(roots[n]);\n    this.expand_threads();\n  };\n\n  // adds threads tree icons to the list (or specified thread)\n  this.add_tree_icons = function(root)\n  {\n    var i, l, r, n, len, pos, tmp = [], uid = [],\n      row, rows = this.message_list.rows;\n\n    if (root)\n      row = rows[root] ? rows[root].obj : null;\n    else\n      row = this.message_list.tbody.firstChild;\n\n    while (row) {\n      if (row.nodeType == 1 && (r = rows[row.uid])) {\n        if (r.depth) {\n          for (i=tmp.length-1; i>=0; i--) {\n            len = tmp[i].length;\n            if (len > r.depth) {\n              pos = len - r.depth;\n              if (!(tmp[i][pos] & 2))\n                tmp[i][pos] = tmp[i][pos] ? tmp[i][pos]+2 : 2;\n            }\n            else if (len == r.depth) {\n              if (!(tmp[i][0] & 2))\n                tmp[i][0] += 2;\n            }\n            if (r.depth > len)\n              break;\n          }\n\n          tmp.push(new Array(r.depth));\n          tmp[tmp.length-1][0] = 1;\n          uid.push(r.uid);\n        }\n        else {\n          if (tmp.length) {\n            for (i in tmp) {\n              this.set_tree_icons(uid[i], tmp[i]);\n            }\n            tmp = [];\n            uid = [];\n          }\n          if (root && row != rows[root].obj)\n            break;\n        }\n      }\n      row = row.nextSibling;\n    }\n\n    if (tmp.length) {\n      for (i in tmp) {\n        this.set_tree_icons(uid[i], tmp[i]);\n      }\n    }\n  };\n\n  // adds tree icons to specified message row\n  this.set_tree_icons = function(uid, tree)\n  {\n    var i, divs = [], html = '', len = tree.length;\n\n    for (i=0; i<len; i++) {\n      if (tree[i] > 2)\n        divs.push({'class': 'l3', width: 15});\n      else if (tree[i] > 1)\n        divs.push({'class': 'l2', width: 15});\n      else if (tree[i] > 0)\n        divs.push({'class': 'l1', width: 15});\n      // separator div\n      else if (divs.length && !divs[divs.length-1]['class'])\n        divs[divs.length-1].width += 15;\n      else\n        divs.push({'class': null, width: 15});\n    }\n\n    for (i=divs.length-1; i>=0; i--) {\n      if (divs[i]['class'])\n        html += '<div class=\"tree '+divs[i]['class']+'\" />';\n      else\n        html += '<div style=\"width:'+divs[i].width+'px\" />';\n    }\n\n    if (html)\n      $('#rcmtab'+this.html_identifier(uid, true)).html(html);\n  };\n\n  // update parent in a thread\n  this.update_thread_root = function(uid, flag)\n  {\n    if (!this.env.threading)\n      return;\n\n    var root = this.message_list.find_root(uid);\n\n    if (uid == root)\n      return;\n\n    var p = this.message_list.rows[root];\n\n    if (flag == 'read' && p.unread_children) {\n      p.unread_children--;\n    }\n    else if (flag == 'unread' && p.has_children) {\n      // unread_children may be undefined\n      p.unread_children = p.unread_children ? p.unread_children + 1 : 1;\n    }\n    else {\n      return;\n    }\n\n    this.set_message_icon(root);\n    this.set_unread_children(root);\n  };\n\n  // update thread indicators for all messages in a thread below the specified message\n  // return number of removed/added root level messages\n  this.update_thread = function (uid)\n  {\n    if (!this.env.threading)\n      return 0;\n\n    var r, parent, count = 0,\n      rows = this.message_list.rows,\n      row = rows[uid],\n      depth = rows[uid].depth,\n      roots = [];\n\n    if (!row.depth) // root message: decrease roots count\n      count--;\n    else if (row.unread) {\n      // update unread_children for thread root\n      parent = this.message_list.find_root(uid);\n      rows[parent].unread_children--;\n      this.set_unread_children(parent);\n    }\n\n    parent = row.parent_uid;\n\n    // childrens\n    row = row.obj.nextSibling;\n    while (row) {\n      if (row.nodeType == 1 && (r = rows[row.uid])) {\n        if (!r.depth || r.depth <= depth)\n          break;\n\n        r.depth--; // move left\n        // reset width and clear the content of a tab, icons will be added later\n        $('#rcmtab'+r.id).width(r.depth * 15).html('');\n        if (!r.depth) { // a new root\n          count++; // increase roots count\n          r.parent_uid = 0;\n          if (r.has_children) {\n            // replace 'leaf' with 'collapsed'\n            $('#'+r.id+' .leaf:first')\n              .attr('id', 'rcmexpando' + r.id)\n              .attr('class', (r.obj.style.display != 'none' ? 'expanded' : 'collapsed'))\n              .mousedown({uid: r.uid}, function(e) {\n                return ref.expand_message_row(e, e.data.uid);\n              });\n\n            r.unread_children = 0;\n            roots.push(r);\n          }\n          // show if it was hidden\n          if (r.obj.style.display == 'none')\n            $(r.obj).show();\n        }\n        else {\n          if (r.depth == depth)\n            r.parent_uid = parent;\n          if (r.unread && roots.length)\n            roots[roots.length-1].unread_children++;\n        }\n      }\n      row = row.nextSibling;\n    }\n\n    // update unread_children for roots\n    for (r=0; r<roots.length; r++)\n      this.set_unread_children(roots[r].uid);\n\n    return count;\n  };\n\n  this.delete_excessive_thread_rows = function()\n  {\n    var rows = this.message_list.rows,\n      tbody = this.message_list.tbody,\n      row = tbody.firstChild,\n      cnt = this.env.pagesize + 1;\n\n    while (row) {\n      if (row.nodeType == 1 && (r = rows[row.uid])) {\n        if (!r.depth && cnt)\n          cnt--;\n\n        if (!cnt)\n          this.message_list.remove_row(row.uid);\n      }\n      row = row.nextSibling;\n    }\n  };\n\n  // set message icon\n  this.set_message_icon = function(uid)\n  {\n    var css_class, label = '',\n      row = this.message_list.rows[uid];\n\n    if (!row)\n      return false;\n\n    if (row.icon) {\n      css_class = 'msgicon';\n      if (row.deleted) {\n        css_class += ' deleted';\n        label += this.get_label('deleted') + ' ';\n      }\n      else if (row.unread) {\n        css_class += ' unread';\n        label += this.get_label('unread') + ' ';\n      }\n      else if (row.unread_children)\n        css_class += ' unreadchildren';\n      if (row.msgicon == row.icon) {\n        if (row.replied) {\n          css_class += ' replied';\n          label += this.get_label('replied') + ' ';\n        }\n        if (row.forwarded) {\n          css_class += ' forwarded';\n          label += this.get_label('forwarded') + ' ';\n        }\n        css_class += ' status';\n      }\n\n      $(row.icon).attr('class', css_class).attr('title', label);\n    }\n\n    if (row.msgicon && row.msgicon != row.icon) {\n      label = '';\n      css_class = 'msgicon';\n      if (!row.unread && row.unread_children) {\n        css_class += ' unreadchildren';\n      }\n      if (row.replied) {\n        css_class += ' replied';\n        label += this.get_label('replied') + ' ';\n      }\n      if (row.forwarded) {\n        css_class += ' forwarded';\n        label += this.get_label('forwarded') + ' ';\n      }\n\n      $(row.msgicon).attr('class', css_class).attr('title', label);\n    }\n\n    if (row.flagicon) {\n      css_class = (row.flagged ? 'flagged' : 'unflagged');\n      label = this.get_label(css_class);\n      $(row.flagicon).attr('class', css_class)\n        .attr('aria-label', label)\n        .attr('title', label);\n    }\n  };\n\n  // set message status\n  this.set_message_status = function(uid, flag, status)\n  {\n    var row = this.message_list.rows[uid];\n\n    if (!row)\n      return false;\n\n    if (flag == 'unread') {\n      if (row.unread != status)\n        this.update_thread_root(uid, status ? 'unread' : 'read');\n    }\n\n    if ($.inArray(flag, ['unread', 'deleted', 'replied', 'forwarded', 'flagged']) > -1)\n      row[flag] = status;\n  };\n\n  // set message row status, class and icon\n  this.set_message = function(uid, flag, status)\n  {\n    var row = this.message_list && this.message_list.rows[uid];\n\n    if (!row)\n      return false;\n\n    if (flag)\n      this.set_message_status(uid, flag, status);\n\n    if ($.inArray(flag, ['unread', 'deleted', 'flagged']) > -1)\n      $(row.obj)[row[flag] ? 'addClass' : 'removeClass'](flag);\n\n    this.set_unread_children(uid);\n    this.set_message_icon(uid);\n  };\n\n  // sets unroot (unread_children) class of parent row\n  this.set_unread_children = function(uid)\n  {\n    var row = this.message_list.rows[uid];\n\n    if (row.parent_uid)\n      return;\n\n    if (!row.unread && row.unread_children && !row.expanded)\n      $(row.obj).addClass('unroot');\n    else\n      $(row.obj).removeClass('unroot');\n  };\n\n  // copy selected messages to the specified mailbox\n  this.copy_messages = function(mbox, event)\n  {\n    if (mbox && typeof mbox === 'object')\n      mbox = mbox.id;\n    else if (!mbox)\n      return this.folder_selector(event, function(folder) { ref.command('copy', folder); });\n\n    // exit if current or no mailbox specified\n    if (!mbox || mbox == this.env.mailbox)\n      return;\n\n    var post_data = this.selection_post_data({_target_mbox: mbox});\n\n    // exit if selection is empty\n    if (!post_data._uid)\n      return;\n\n    // send request to server\n    this.http_post('copy', post_data, this.display_message(this.get_label('copyingmessage'), 'loading'));\n  };\n\n  // move selected messages to the specified mailbox\n  this.move_messages = function(mbox, event)\n  {\n    if (mbox && typeof mbox === 'object')\n      mbox = mbox.id;\n    else if (!mbox)\n      return this.folder_selector(event, function(folder) { ref.command('move', folder); });\n\n    // exit if current or no mailbox specified\n    if (!mbox || (mbox == this.env.mailbox && !this.is_multifolder_listing()))\n      return;\n\n    var lock = false, post_data = this.selection_post_data({_target_mbox: mbox});\n\n    // exit if selection is empty\n    if (!post_data._uid)\n      return;\n\n    // show wait message\n    if (this.env.action == 'show')\n      lock = this.set_busy(true, 'movingmessage');\n    else\n      this.show_contentframe(false);\n\n    // Hide message command buttons until a message is selected\n    this.enable_command(this.env.message_commands, false);\n\n    this._with_selected_messages('move', post_data, lock);\n  };\n\n  // delete selected messages from the current mailbox\n  this.delete_messages = function(event)\n  {\n    var list = this.message_list, trash = this.env.trash_mailbox;\n\n    // if config is set to flag for deletion\n    if (this.env.flag_for_deletion) {\n      this.mark_message('delete');\n      return false;\n    }\n    // if there isn't a defined trash mailbox or we are in it\n    else if (!trash || this.env.mailbox == trash)\n      this.permanently_remove_messages();\n    // we're in Junk folder and delete_junk is enabled\n    else if (this.env.delete_junk && this.env.junk_mailbox && this.env.mailbox == this.env.junk_mailbox)\n      this.permanently_remove_messages();\n    // if there is a trash mailbox defined and we're not currently in it\n    else {\n      // if shift was pressed delete it immediately\n      if ((list && list.modkey == SHIFT_KEY) || (event && rcube_event.get_modifier(event) == SHIFT_KEY)) {\n        if (confirm(this.get_label('deletemessagesconfirm')))\n          this.permanently_remove_messages();\n      }\n      else\n        this.move_messages(trash);\n    }\n\n    return true;\n  };\n\n  // delete the selected messages permanently\n  this.permanently_remove_messages = function()\n  {\n    var post_data = this.selection_post_data();\n\n    // exit if selection is empty\n    if (!post_data._uid)\n      return;\n\n    this.show_contentframe(false);\n    this._with_selected_messages('delete', post_data);\n  };\n\n  // Send a specific move/delete request with UIDs of all selected messages\n  // @private\n  this._with_selected_messages = function(action, post_data, lock)\n  {\n    var count = 0, msg,\n      remove = (action == 'delete' || !this.is_multifolder_listing());\n\n    // update the list (remove rows, clear selection)\n    if (this.message_list) {\n      var n, id, root, roots = [],\n        selection = this.message_list.get_selection();\n\n      for (n=0, len=selection.length; n<len; n++) {\n        id = selection[n];\n\n        if (this.env.threading) {\n          count += this.update_thread(id);\n          root = this.message_list.find_root(id);\n          if (root != id && $.inArray(root, roots) < 0) {\n            roots.push(root);\n          }\n        }\n        if (remove)\n          this.message_list.remove_row(id, (this.env.display_next && n == selection.length-1));\n      }\n      // make sure there are no selected rows\n      if (!this.env.display_next && remove)\n        this.message_list.clear_selection();\n      // update thread tree icons\n      for (n=0, len=roots.length; n<len; n++) {\n        this.add_tree_icons(roots[n]);\n      }\n    }\n\n    if (count < 0)\n      post_data._count = (count*-1);\n    // remove threads from the end of the list\n    else if (count > 0 && remove)\n      this.delete_excessive_thread_rows();\n\n    if (!remove)\n      post_data._refresh = 1;\n\n    if (!lock) {\n      msg = action == 'move' ? 'movingmessage' : 'deletingmessage';\n      lock = this.display_message(this.get_label(msg), 'loading');\n    }\n\n    // send request to server\n    this.http_post(action, post_data, lock);\n  };\n\n  // build post data for message delete/move/copy/flag requests\n  this.selection_post_data = function(data)\n  {\n    if (typeof(data) != 'object')\n      data = {};\n\n    data._mbox = this.env.mailbox;\n\n    if (!data._uid) {\n      var uids = this.env.uid ? [this.env.uid] : this.message_list.get_selection();\n      data._uid = this.uids_to_list(uids);\n    }\n\n    if (this.env.action)\n      data._from = this.env.action;\n\n    // also send search request to get the right messages\n    if (this.env.search_request)\n      data._search = this.env.search_request;\n\n    if (this.env.display_next && this.env.next_uid)\n      data._next_uid = this.env.next_uid;\n\n    return data;\n  };\n\n  // set a specific flag to one or more messages\n  this.mark_message = function(flag, uid)\n  {\n    var a_uids = [], r_uids = [], len, n, id,\n      list = this.message_list;\n\n    if (uid)\n      a_uids[0] = uid;\n    else if (this.env.uid)\n      a_uids[0] = this.env.uid;\n    else if (list)\n      a_uids = list.get_selection();\n\n    if (!list)\n      r_uids = a_uids;\n    else {\n      list.focus();\n      for (n=0, len=a_uids.length; n<len; n++) {\n        id = a_uids[n];\n        if ((flag == 'read' && list.rows[id].unread)\n            || (flag == 'unread' && !list.rows[id].unread)\n            || (flag == 'delete' && !list.rows[id].deleted)\n            || (flag == 'undelete' && list.rows[id].deleted)\n            || (flag == 'flagged' && !list.rows[id].flagged)\n            || (flag == 'unflagged' && list.rows[id].flagged))\n        {\n          r_uids.push(id);\n        }\n      }\n    }\n\n    // nothing to do\n    if (!r_uids.length && !this.select_all_mode)\n      return;\n\n    switch (flag) {\n        case 'read':\n        case 'unread':\n          this.toggle_read_status(flag, r_uids);\n          break;\n        case 'delete':\n        case 'undelete':\n          this.toggle_delete_status(r_uids);\n          break;\n        case 'flagged':\n        case 'unflagged':\n          this.toggle_flagged_status(flag, a_uids);\n          break;\n    }\n  };\n\n  // set class to read/unread\n  this.toggle_read_status = function(flag, a_uids)\n  {\n    var i, len = a_uids.length,\n      post_data = this.selection_post_data({_uid: this.uids_to_list(a_uids), _flag: flag}),\n      lock = this.display_message(this.get_label('markingmessage'), 'loading');\n\n    // mark all message rows as read/unread\n    for (i=0; i<len; i++)\n      this.set_message(a_uids[i], 'unread', (flag == 'unread' ? true : false));\n\n    this.http_post('mark', post_data, lock);\n  };\n\n  // set image to flagged or unflagged\n  this.toggle_flagged_status = function(flag, a_uids)\n  {\n    var i, len = a_uids.length,\n      post_data = this.selection_post_data({_uid: this.uids_to_list(a_uids), _flag: flag}),\n      lock = this.display_message(this.get_label('markingmessage'), 'loading');\n\n    // mark all message rows as flagged/unflagged\n    for (i=0; i<len; i++)\n      this.set_message(a_uids[i], 'flagged', (flag == 'flagged' ? true : false));\n\n    this.http_post('mark', post_data, lock);\n  };\n\n  // mark all message rows as deleted/undeleted\n  this.toggle_delete_status = function(a_uids)\n  {\n    var len = a_uids.length,\n      i, uid, all_deleted = true,\n      rows = this.message_list ? this.message_list.rows : {};\n\n    if (len == 1) {\n      if (!this.message_list || (rows[a_uids[0]] && !rows[a_uids[0]].deleted))\n        this.flag_as_deleted(a_uids);\n      else\n        this.flag_as_undeleted(a_uids);\n\n      return true;\n    }\n\n    for (i=0; i<len; i++) {\n      uid = a_uids[i];\n      if (rows[uid] && !rows[uid].deleted) {\n        all_deleted = false;\n        break;\n      }\n    }\n\n    if (all_deleted)\n      this.flag_as_undeleted(a_uids);\n    else\n      this.flag_as_deleted(a_uids);\n\n    return true;\n  };\n\n  this.flag_as_undeleted = function(a_uids)\n  {\n    var i, len = a_uids.length,\n      post_data = this.selection_post_data({_uid: this.uids_to_list(a_uids), _flag: 'undelete'}),\n      lock = this.display_message(this.get_label('markingmessage'), 'loading');\n\n    for (i=0; i<len; i++)\n      this.set_message(a_uids[i], 'deleted', false);\n\n    this.http_post('mark', post_data, lock);\n  };\n\n  this.flag_as_deleted = function(a_uids)\n  {\n    var r_uids = [],\n      post_data = this.selection_post_data({_uid: this.uids_to_list(a_uids), _flag: 'delete'}),\n      lock = this.display_message(this.get_label('markingmessage'), 'loading'),\n      rows = this.message_list ? this.message_list.rows : {},\n      count = 0;\n\n    for (var i=0, len=a_uids.length; i<len; i++) {\n      uid = a_uids[i];\n      if (rows[uid]) {\n        if (rows[uid].unread)\n          r_uids[r_uids.length] = uid;\n\n        if (this.env.skip_deleted) {\n          count += this.update_thread(uid);\n          this.message_list.remove_row(uid, (this.env.display_next && i == this.message_list.selection.length-1));\n        }\n        else\n          this.set_message(uid, 'deleted', true);\n      }\n    }\n\n    // make sure there are no selected rows\n    if (this.env.skip_deleted && this.message_list) {\n      if (!this.env.display_next)\n        this.message_list.clear_selection();\n      if (count < 0)\n        post_data._count = (count*-1);\n      else if (count > 0)\n        // remove threads from the end of the list\n        this.delete_excessive_thread_rows();\n    }\n\n    // set of messages to mark as seen\n    if (r_uids.length)\n      post_data._ruid = this.uids_to_list(r_uids);\n\n    if (this.env.skip_deleted && this.env.display_next && this.env.next_uid)\n      post_data._next_uid = this.env.next_uid;\n\n    this.http_post('mark', post_data, lock);\n  };\n\n  // flag as read without mark request (called from backend)\n  // argument should be a coma-separated list of uids\n  this.flag_deleted_as_read = function(uids)\n  {\n    var uid, i, len,\n      rows = this.message_list ? this.message_list.rows : {};\n\n    if (typeof uids == 'string')\n      uids = uids.split(',');\n\n    for (i=0, len=uids.length; i<len; i++) {\n      uid = uids[i];\n      if (rows[uid])\n        this.set_message(uid, 'unread', false);\n    }\n  };\n\n  // Converts array of message UIDs to comma-separated list for use in URL\n  // with select_all mode checking\n  this.uids_to_list = function(uids)\n  {\n    return this.select_all_mode ? '*' : (uids.length <= 1 ? uids.join(',') : uids);\n  };\n\n  // Sets title of the delete button\n  this.set_button_titles = function()\n  {\n    var label = 'deletemessage';\n\n    if (!this.env.flag_for_deletion\n      && this.env.trash_mailbox && this.env.mailbox != this.env.trash_mailbox\n      && (!this.env.delete_junk || !this.env.junk_mailbox || this.env.mailbox != this.env.junk_mailbox)\n    )\n      label = 'movemessagetotrash';\n\n    this.set_alttext('delete', label);\n  };\n\n  // Initialize input element for list page jump\n  this.init_pagejumper = function(element)\n  {\n    $(element).addClass('rcpagejumper')\n      .on('focus', function(e) {\n        // create and display popup with page selection\n        var i, html = '';\n\n        for (i = 1; i <= ref.env.pagecount; i++)\n          html += '<li>' + i + '</li>';\n\n        html = '<ul class=\"toolbarmenu\">' + html + '</ul>';\n\n        if (!ref.pagejump) {\n          ref.pagejump = $('<div id=\"pagejump-selector\" class=\"popupmenu\"></div>')\n            .appendTo(document.body)\n            .on('click', 'li', function() {\n              if (!ref.busy)\n                $(element).val($(this).text()).change();\n            });\n        }\n\n        if (ref.pagejump.data('count') != i)\n          ref.pagejump.html(html);\n\n        ref.pagejump.attr('rel', '#' + this.id).data('count', i);\n\n        // display page selector\n        ref.show_menu('pagejump-selector', true, e);\n        $(this).keydown();\n      })\n      // keyboard navigation\n      .on('keydown keyup click', function(e) {\n        var current, selector = $('#pagejump-selector'),\n          ul = $('ul', selector),\n          list = $('li', ul),\n          height = ul.height(),\n          p = parseInt(this.value);\n\n        if (e.which != 27 && e.which != 9 && e.which != 13 && !selector.is(':visible'))\n          return ref.show_menu('pagejump-selector', true, e);\n\n        if (e.type == 'keydown') {\n          // arrow-down\n          if (e.which == 40) {\n            if (list.length > p)\n              this.value = (p += 1);\n          }\n          // arrow-up\n          else if (e.which == 38) {\n            if (p > 1 && list.length > p - 1)\n              this.value = (p -= 1);\n          }\n          // enter\n          else if (e.which == 13) {\n            return $(this).change();\n          }\n          // esc, tab\n          else if (e.which == 27 || e.which == 9) {\n            return $(element).val(ref.env.current_page);\n          }\n        }\n\n        $('li.selected', ul).removeClass('selected');\n\n        if ((current = $(list[p - 1])).length) {\n          current.addClass('selected');\n          $('#pagejump-selector').scrollTop(((ul.height() / list.length) * (p - 1)) - selector.height() / 2);\n        }\n      })\n      .on('change', function(e) {\n        // go to specified page\n        var p = parseInt(this.value);\n        if (p && p != ref.env.current_page && !ref.busy) {\n          ref.hide_menu('pagejump-selector');\n          ref.list_page(p);\n        }\n      });\n  };\n\n  // Update page-jumper state on list updates\n  this.update_pagejumper = function()\n  {\n    $('input.rcpagejumper').val(this.env.current_page).prop('disabled', this.env.pagecount < 2);\n  };\n\n  // check for mailvelope API\n  this.check_mailvelope = function(action)\n  {\n    if (typeof window.mailvelope !== 'undefined') {\n      this.mailvelope_load(action);\n    }\n    else {\n      $(window).on('mailvelope', function() {\n        ref.mailvelope_load(action);\n      });\n    }\n  };\n\n  // Load Mailvelope functionality (and initialize keyring if needed)\n  this.mailvelope_load = function(action)\n  {\n    if (this.env.browser_capabilities)\n      this.env.browser_capabilities['pgpmime'] = 1;\n\n    var keyring = this.env.user_id;\n\n    mailvelope.getKeyring(keyring).then(function(kr) {\n      ref.mailvelope_keyring = kr;\n      ref.mailvelope_init(action, kr);\n    }, function(err) {\n      // attempt to create a new keyring for this app/user\n      mailvelope.createKeyring(keyring).then(function(kr) {\n        ref.mailvelope_keyring = kr;\n        ref.mailvelope_init(action, kr);\n      }, function(err) {\n        console.error(err);\n      });\n    });\n  };\n\n  // Initializes Mailvelope editor or display container\n  this.mailvelope_init = function(action, keyring)\n  {\n    if (!window.mailvelope)\n      return;\n\n    if (action == 'show' || action == 'preview' || action == 'print') {\n      // decrypt text body\n      if (this.env.is_pgp_content) {\n        var data = $(this.env.is_pgp_content).text();\n        ref.mailvelope_display_container(this.env.is_pgp_content, data, keyring);\n      }\n      // load pgp/mime message and pass it to the mailvelope display container\n      else if (this.env.pgp_mime_part) {\n        var msgid = this.display_message(this.get_label('loadingdata'), 'loading'),\n          selector = this.env.pgp_mime_container;\n\n        $.ajax({\n          type: 'GET',\n          url: this.url('get', { '_mbox': this.env.mailbox, '_uid': this.env.uid, '_part': this.env.pgp_mime_part }),\n          error: function(o, status, err) {\n            ref.http_error(o, status, err, msgid);\n          },\n          success: function(data) {\n            ref.mailvelope_display_container(selector, data, keyring, msgid);\n          }\n        });\n      }\n    }\n    else if (action == 'compose') {\n      this.env.compose_commands.push('compose-encrypted');\n\n      var is_html = $('input[name=\"_is_html\"]').val() > 0;\n\n      if (this.env.pgp_mime_message) {\n        // fetch PGP/Mime part and open load into Mailvelope editor\n        var lock = this.set_busy(true, this.get_label('loadingdata'));\n\n        $.ajax({\n          type: 'GET',\n          url: this.url('get', this.env.pgp_mime_message),\n          error: function(o, status, err) {\n            ref.http_error(o, status, err, lock);\n            ref.enable_command('compose-encrypted', !is_html);\n          },\n          success: function(data) {\n            ref.set_busy(false, null, lock);\n\n            if (is_html) {\n              ref.command('toggle-editor', {html: false, noconvert: true});\n              $('#' + ref.env.composebody).val('');\n            }\n\n            ref.compose_encrypted({ quotedMail: data });\n            ref.enable_command('compose-encrypted', true);\n          }\n        });\n      }\n      else {\n        // enable encrypted compose toggle\n        this.enable_command('compose-encrypted', !is_html);\n      }\n    }\n  };\n\n  // handler for the 'compose-encrypted' command\n  this.compose_encrypted = function(props)\n  {\n    var options, container = $('#' + this.env.composebody).parent();\n\n    // remove Mailvelope editor if active\n    if (ref.mailvelope_editor) {\n      ref.mailvelope_editor = null;\n      ref.compose_skip_unsavedcheck = false;\n      ref.set_button('compose-encrypted', 'act');\n\n      container.removeClass('mailvelope')\n        .find('iframe:not([aria-hidden=true])').remove();\n      $('#' + ref.env.composebody).show();\n      $(\"[name='_pgpmime']\").remove();\n\n      // disable commands that operate on the compose body\n      ref.enable_command('spellcheck', 'insert-sig', 'toggle-editor', 'insert-response', 'save-response', true);\n      ref.triggerEvent('compose-encrypted', { active:false });\n    }\n    // embed Mailvelope editor container\n    else {\n      if (this.spellcheck_state())\n        this.editor.spellcheck_stop();\n\n      if (props.quotedMail) {\n        options = { quotedMail: props.quotedMail, quotedMailIndent: false };\n      }\n      else {\n        options = { predefinedText: $('#' + this.env.composebody).val() };\n      }\n\n      if (this.env.compose_mode == 'reply') {\n        options.quotedMailIndent = true;\n        options.quotedMailHeader = this.env.compose_reply_header;\n      }\n\n      mailvelope.createEditorContainer('#' + container.attr('id'), ref.mailvelope_keyring, options).then(function(editor) {\n        ref.mailvelope_editor = editor;\n        ref.compose_skip_unsavedcheck = true;\n        ref.set_button('compose-encrypted', 'sel');\n\n        container.addClass('mailvelope');\n        $('#' + ref.env.composebody).hide();\n\n        // disable commands that operate on the compose body\n        ref.enable_command('spellcheck', 'insert-sig', 'toggle-editor', 'insert-response', 'save-response', false);\n        ref.triggerEvent('compose-encrypted', { active:true });\n\n        // notify user about loosing attachments\n        if (ref.env.attachments && !$.isEmptyObject(ref.env.attachments)) {\n          alert(ref.get_label('encryptnoattachments'));\n\n          $.each(ref.env.attachments, function(name, attach) {\n            ref.remove_from_attachment_list(name);\n          });\n        }\n      }, function(err) {\n        console.error(err);\n        console.log(options);\n      });\n    }\n  };\n\n  // callback to replace the message body with the full armored\n  this.mailvelope_submit_messageform = function(draft, saveonly)\n  {\n    // get recipients\n    var recipients = [];\n    $.each(['to', 'cc', 'bcc'], function(i,field) {\n      var pos, rcpt, val = $.trim($('[name=\"_' + field + '\"]').val());\n      while (val.length && rcube_check_email(val, true)) {\n        rcpt = RegExp.$2;\n        recipients.push(rcpt);\n        val = val.substr(val.indexOf(rcpt) + rcpt.length + 1).replace(/^\\s*,\\s*/, '');\n      }\n    });\n\n    // check if we have keys for all recipients\n    var isvalid = recipients.length > 0;\n    ref.mailvelope_keyring.validKeyForAddress(recipients).then(function(status) {\n      var missing_keys = [];\n      $.each(status, function(k,v) {\n        if (v === false) {\n          isvalid = false;\n          missing_keys.push(k);\n        }\n      });\n\n      // list recipients with missing keys\n      if (!isvalid && missing_keys.length) {\n        // load publickey.js\n        if (!$('script#publickeyjs').length) {\n          $('<script>')\n            .attr('id', 'publickeyjs')\n            .attr('src', ref.assets_path('program/js/publickey.js'))\n            .appendTo(document.body);\n        }\n\n        // display dialog with missing keys\n        ref.show_popup_dialog(\n          ref.get_label('nopubkeyfor').replace('$email', missing_keys.join(', ')) +\n          '<p>' + ref.get_label('searchpubkeyservers') + '</p>',\n          ref.get_label('encryptedsendialog'),\n          [{\n            text: ref.get_label('search'),\n            'class': 'mainaction',\n            click: function() {\n              var $dialog = $(this);\n              ref.mailvelope_search_pubkeys(missing_keys, function() {\n                $dialog.dialog('close')\n              });\n            }\n          },\n          {\n            text: ref.get_label('cancel'),\n            click: function(){\n              $(this).dialog('close');\n            }\n          }]\n        );\n        return false;\n      }\n\n      if (!isvalid) {\n        if (!recipients.length) {\n          alert(ref.get_label('norecipientwarning'));\n          $(\"[name='_to']\").focus();\n        }\n        return false;\n      }\n\n      // add sender identity to recipients to be able to decrypt our very own message\n      var senders = [], selected_sender = ref.env.identities[$(\"[name='_from'] option:selected\").val()];\n      $.each(ref.env.identities, function(k, sender) {\n        senders.push(sender.email);\n      });\n\n      ref.mailvelope_keyring.validKeyForAddress(senders).then(function(status) {\n        valid_sender = null;\n        $.each(status, function(k,v) {\n          if (v !== false) {\n            valid_sender = k;\n            if (valid_sender == selected_sender) {\n              return false;  // break\n            }\n          }\n        });\n\n        if (!valid_sender) {\n          if (!confirm(ref.get_label('nopubkeyforsender'))) {\n            return false;\n          }\n        }\n\n        recipients.push(valid_sender);\n\n        ref.mailvelope_editor.encrypt(recipients).then(function(armored) {\n          // all checks passed, send message\n          var form = ref.gui_objects.messageform,\n            hidden = $(\"[name='_pgpmime']\", form),\n            msgid = ref.set_busy(true, draft || saveonly ? 'savingmessage' : 'sendingmessage')\n\n          form.target = 'savetarget';\n          form._draft.value = draft ? '1' : '';\n          form.action = ref.add_url(form.action, '_unlock', msgid);\n          form.action = ref.add_url(form.action, '_framed', 1);\n\n          if (saveonly) {\n            form.action = ref.add_url(form.action, '_saveonly', 1);\n          }\n\n          // send pgp conent via hidden field\n          if (!hidden.length) {\n            hidden = $('<input type=\"hidden\" name=\"_pgpmime\">').appendTo(form);\n          }\n          hidden.val(armored);\n\n          form.submit();\n\n        }, function(err) {\n          console.log(err);\n        });  // mailvelope_editor.encrypt()\n\n      }, function(err) {\n        console.error(err);\n      });  // mailvelope_keyring.validKeyForAddress(senders)\n\n    }, function(err) {\n      console.error(err);\n    });  // mailvelope_keyring.validKeyForAddress(recipients)\n\n    return false;\n  };\n\n  // wrapper for the mailvelope.createDisplayContainer API call\n  this.mailvelope_display_container = function(selector, data, keyring, msgid)\n  {\n    mailvelope.createDisplayContainer(selector, data, keyring, { showExternalContent: this.env.safemode }).then(function() {\n      $(selector).addClass('mailvelope').children().not('iframe').hide();\n      ref.hide_message(msgid);\n      setTimeout(function() { $(window).resize(); }, 10);\n    }, function(err) {\n      console.error(err);\n      ref.hide_message(msgid);\n      ref.display_message('Message decryption failed: ' + err.message, 'error')\n    });\n  };\n\n  // subroutine to query keyservers for public keys\n  this.mailvelope_search_pubkeys = function(emails, resolve)\n  {\n    // query with publickey.js\n    var deferreds = [],\n      pk = new PublicKey(),\n      lock = ref.display_message(ref.get_label('loading'), 'loading');\n\n    $.each(emails, function(i, email) {\n      var d = $.Deferred();\n      pk.search(email, function(results, errorCode) {\n        if (errorCode !== null) {\n          // rejecting would make all fail\n          // d.reject(email);\n          d.resolve([email]);\n        }\n        else {\n          d.resolve([email].concat(results));\n        }\n      });\n      deferreds.push(d);\n    });\n\n    $.when.apply($, deferreds).then(function() {\n      var missing_keys = [],\n        key_selection = [];\n\n      // alanyze results of all queries\n      $.each(arguments, function(i, result) {\n        var email = result.shift();\n        if (!result.length) {\n          missing_keys.push(email);\n        }\n        else {\n          key_selection = key_selection.concat(result);\n        }\n      });\n\n      ref.hide_message(lock);\n      resolve(true);\n\n      // show key import dialog\n      if (key_selection.length) {\n        ref.mailvelope_key_import_dialog(key_selection);\n      }\n      // some keys could not be found\n      if (missing_keys.length) {\n        ref.display_message(ref.get_label('nopubkeyfor').replace('$email', missing_keys.join(', ')), 'warning');\n      }\n    }).fail(function() {\n      console.error('Pubkey lookup failed with', arguments);\n      ref.hide_message(lock);\n      ref.display_message('pubkeysearcherror', 'error');\n      resolve(false);\n    });\n  };\n\n  // list the given public keys in a dialog with options to import\n  // them into the local Maivelope keyring\n  this.mailvelope_key_import_dialog = function(candidates)\n  {\n    var ul = $('<div>').addClass('listing mailvelopekeyimport');\n    $.each(candidates, function(i, keyrec) {\n      var li = $('<div>').addClass('key');\n      if (keyrec.revoked)  li.addClass('revoked');\n      if (keyrec.disabled) li.addClass('disabled');\n      if (keyrec.expired)  li.addClass('expired');\n\n      li.append($('<label>').addClass('keyid').text(ref.get_label('keyid')));\n      li.append($('<a>').text(keyrec.keyid.substr(-8).toUpperCase())\n        .attr('href', keyrec.info)\n        .attr('target', '_blank')\n        .attr('tabindex', '-1'));\n\n      li.append($('<label>').addClass('keylen').text(ref.get_label('keylength')));\n      li.append($('<span>').text(keyrec.keylen));\n\n      if (keyrec.expirationdate) {\n        li.append($('<label>').addClass('keyexpired').text(ref.get_label('keyexpired')));\n        li.append($('<span>').text(new Date(keyrec.expirationdate * 1000).toDateString()));\n      }\n\n      if (keyrec.revoked) {\n        li.append($('<span>').addClass('keyrevoked').text(ref.get_label('keyrevoked')));\n      }\n\n      var ul_ = $('<ul>').addClass('uids');\n      $.each(keyrec.uids, function(j, uid) {\n        var li_ = $('<li>').addClass('uid');\n        if (uid.revoked)  li_.addClass('revoked');\n        if (uid.disabled) li_.addClass('disabled');\n        if (uid.expired)  li_.addClass('expired');\n\n        ul_.append(li_.text(uid.uid));\n      });\n\n      li.append(ul_);\n      li.append($('<input>')\n        .attr('type', 'button')\n        .attr('rel', keyrec.keyid)\n        .attr('value', ref.get_label('import'))\n        .addClass('button importkey')\n        .prop('disabled', keyrec.revoked || keyrec.disabled || keyrec.expired));\n\n      ul.append(li);\n    });\n\n    // display dialog with missing keys\n    ref.show_popup_dialog(\n      $('<div>')\n        .append($('<p>').html(ref.get_label('encryptpubkeysfound')))\n        .append(ul),\n      ref.get_label('importpubkeys'),\n      [{\n        text: ref.get_label('close'),\n        click: function(){\n          $(this).dialog('close');\n        }\n      }]\n    );\n\n    // delegate handler for import button clicks\n    ul.on('click', 'input.button.importkey', function() {\n      var btn = $(this),\n        keyid = btn.attr('rel'),\n        pk = new PublicKey(),\n        lock = ref.display_message(ref.get_label('loading'), 'loading');\n\n        // fetch from keyserver and import to Mailvelope keyring\n        pk.get(keyid, function(armored, errorCode) {\n          ref.hide_message(lock);\n\n          if (errorCode) {\n            ref.display_message(ref.get_label('keyservererror'), 'error');\n            return;\n          }\n\n          // import to keyring\n          ref.mailvelope_keyring.importPublicKey(armored).then(function(status) {\n            if (status === 'REJECTED') {\n              // alert(ref.get_label('Key import was rejected'));\n            }\n            else {\n              var $key = keyid.substr(-8).toUpperCase();\n              btn.closest('.key').fadeOut();\n              ref.display_message(ref.get_label('keyimportsuccess').replace('$key', $key), 'confirmation');\n            }\n          }, function(err) {\n            console.log(err);\n          });\n        });\n    });\n\n  };\n\n\n  /*********************************************************/\n  /*********       mailbox folders methods         *********/\n  /*********************************************************/\n\n  this.expunge_mailbox = function(mbox)\n  {\n    var lock, post_data = {_mbox: mbox};\n\n    // lock interface if it's the active mailbox\n    if (mbox == this.env.mailbox) {\n      lock = this.set_busy(true, 'loading');\n      post_data._reload = 1;\n      if (this.env.search_request)\n        post_data._search = this.env.search_request;\n    }\n\n    // send request to server\n    this.http_post('expunge', post_data, lock);\n  };\n\n  this.purge_mailbox = function(mbox)\n  {\n    var lock, post_data = {_mbox: mbox};\n\n    if (!confirm(this.get_label('purgefolderconfirm')))\n      return false;\n\n    // lock interface if it's the active mailbox\n    if (mbox == this.env.mailbox) {\n       lock = this.set_busy(true, 'loading');\n       post_data._reload = 1;\n     }\n\n    // send request to server\n    this.http_post('purge', post_data, lock);\n  };\n\n  // test if purge command is allowed\n  this.purge_mailbox_test = function()\n  {\n    return (this.env.exists && (\n      this.env.mailbox == this.env.trash_mailbox\n      || this.env.mailbox == this.env.junk_mailbox\n      || this.env.mailbox.startsWith(this.env.trash_mailbox + this.env.delimiter)\n      || this.env.mailbox.startsWith(this.env.junk_mailbox + this.env.delimiter)\n    ));\n  };\n\n\n  /*********************************************************/\n  /*********           login form methods          *********/\n  /*********************************************************/\n\n  // handler for keyboard events on the _user field\n  this.login_user_keyup = function(e)\n  {\n    var key = rcube_event.get_keycode(e),\n      passwd = $('#rcmloginpwd');\n\n    // enter\n    if (key == 13 && passwd.length && !passwd.val()) {\n      passwd.focus();\n      return rcube_event.cancel(e);\n    }\n\n    return true;\n  };\n\n\n  /*********************************************************/\n  /*********        message compose methods        *********/\n  /*********************************************************/\n\n  this.open_compose_step = function(p)\n  {\n    var url = this.url('mail/compose', p);\n\n    // open new compose window\n    if (this.env.compose_extwin && !this.env.extwin) {\n      this.open_window(url);\n    }\n    else {\n      this.redirect(url);\n      if (this.env.extwin)\n        window.resizeTo(Math.max(this.env.popup_width, $(window).width()), $(window).height() + 24);\n    }\n  };\n\n  // init message compose form: set focus and eventhandlers\n  this.init_messageform = function()\n  {\n    if (!this.gui_objects.messageform)\n      return false;\n\n    var i, elem, pos, input_from = $(\"[name='_from']\"),\n      input_to = $(\"[name='_to']\"),\n      input_subject = $(\"input[name='_subject']\"),\n      input_message = $(\"[name='_message']\").get(0),\n      html_mode = $(\"input[name='_is_html']\").val() == '1',\n      ac_fields = ['cc', 'bcc', 'replyto', 'followupto'],\n      ac_props, opener_rc = this.opener();\n\n    // close compose step in opener\n    if (opener_rc && opener_rc.env.action == 'compose') {\n      setTimeout(function(){\n        if (opener.history.length > 1)\n          opener.history.back();\n        else\n          opener_rc.redirect(opener_rc.get_task_url('mail'));\n      }, 100);\n      this.env.opened_extwin = true;\n    }\n\n    // configure parallel autocompletion\n    if (this.env.autocomplete_threads > 0) {\n      ac_props = {\n        threads: this.env.autocomplete_threads,\n        sources: this.env.autocomplete_sources\n      };\n    }\n\n    // init live search events\n    this.init_address_input_events(input_to, ac_props);\n    for (i in ac_fields) {\n      this.init_address_input_events($(\"[name='_\"+ac_fields[i]+\"']\"), ac_props);\n    }\n\n    if (!html_mode) {\n      pos = this.env.top_posting && this.env.compose_mode ? 0 : input_message.value.length;\n\n      // add signature according to selected identity\n      // if we have HTML editor, signature is added in a callback\n      if (input_from.prop('type') == 'select-one') {\n        this.change_identity(input_from[0]);\n      }\n\n      // set initial cursor position\n      this.set_caret_pos(input_message, pos);\n\n      // scroll to the bottom of the textarea (#1490114)\n      if (pos) {\n        $(input_message).scrollTop(input_message.scrollHeight);\n      }\n    }\n\n    // check for locally stored compose data\n    if (this.env.save_localstorage)\n      this.compose_restore_dialog(0, html_mode)\n\n    if (input_to.val() == '')\n      elem = input_to;\n    else if (input_subject.val() == '')\n      elem = input_subject;\n    else if (input_message)\n      elem = input_message;\n\n    // focus first empty element (need to be visible on IE8)\n    $(elem).filter(':visible').focus();\n\n    this.env.compose_focus_elem = document.activeElement;\n\n    // get summary of all field values\n    this.compose_field_hash(true);\n\n    // start the auto-save timer\n    this.auto_save_start();\n  };\n\n  this.compose_restore_dialog = function(j, html_mode)\n  {\n    var i, key, formdata, index = this.local_storage_get_item('compose.index', []);\n\n    var show_next = function(i) {\n      if (++i < index.length)\n        ref.compose_restore_dialog(i, html_mode)\n    }\n\n    for (i = j || 0; i < index.length; i++) {\n      key = index[i];\n      formdata = this.local_storage_get_item('compose.' + key, null, true);\n      if (!formdata) {\n        continue;\n      }\n      // restore saved copy of current compose_id\n      if (formdata.changed && key == this.env.compose_id) {\n        this.restore_compose_form(key, html_mode);\n        break;\n      }\n      // skip records from 'other' drafts\n      if (this.env.draft_id && formdata.draft_id && formdata.draft_id != this.env.draft_id) {\n        continue;\n      }\n      // skip records on reply\n      if (this.env.reply_msgid && formdata.reply_msgid != this.env.reply_msgid) {\n        continue;\n      }\n      // show dialog asking to restore the message\n      if (formdata.changed && formdata.session != this.env.session_id) {\n        this.show_popup_dialog(\n          this.get_label('restoresavedcomposedata')\n            .replace('$date', new Date(formdata.changed).toLocaleString())\n            .replace('$subject', formdata._subject)\n            .replace(/\\n/g, '<br/>'),\n          this.get_label('restoremessage'),\n          [{\n            text: this.get_label('restore'),\n            'class': 'mainaction',\n            click: function(){\n              ref.restore_compose_form(key, html_mode);\n              ref.remove_compose_data(key);  // remove old copy\n              ref.save_compose_form_local();  // save under current compose_id\n              $(this).dialog('close');\n            }\n          },\n          {\n            text: this.get_label('delete'),\n            'class': 'delete',\n            click: function(){\n              ref.remove_compose_data(key);\n              $(this).dialog('close');\n              show_next(i);\n            }\n          },\n          {\n            text: this.get_label('ignore'),\n            click: function(){\n              $(this).dialog('close');\n              show_next(i);\n            }\n          }]\n        );\n        break;\n      }\n    }\n  }\n\n  this.init_address_input_events = function(obj, props)\n  {\n    this.env.recipients_delimiter = this.env.recipients_separator + ' ';\n\n    obj.keydown(function(e) { return ref.ksearch_keydown(e, this, props); })\n      .attr({ 'autocomplete': 'off', 'aria-autocomplete': 'list', 'aria-expanded': 'false', 'role': 'combobox' });\n  };\n\n  this.submit_messageform = function(draft, saveonly)\n  {\n    var form = this.gui_objects.messageform;\n\n    if (!form)\n      return;\n\n    // the message has been sent but not saved, ask the user what to do\n    if (!saveonly && this.env.is_sent) {\n      return this.show_popup_dialog(this.get_label('messageissent'), '',\n        [{\n          text: this.get_label('save'),\n          'class': 'mainaction',\n          click: function() {\n            ref.submit_messageform(false, true);\n            $(this).dialog('close');\n          }\n        },\n        {\n          text: this.get_label('cancel'),\n          click: function() {\n            $(this).dialog('close');\n          }\n        }]\n      );\n    }\n\n    // delegate sending to Mailvelope routine\n    if (this.mailvelope_editor) {\n      return this.mailvelope_submit_messageform(draft, saveonly);\n    }\n\n    // all checks passed, send message\n    var msgid = this.set_busy(true, draft || saveonly ? 'savingmessage' : 'sendingmessage'),\n      lang = this.spellcheck_lang(),\n      files = [];\n\n    // send files list\n    $('li', this.gui_objects.attachmentlist).each(function() { files.push(this.id.replace(/^rcmfile/, '')); });\n    $('input[name=\"_attachments\"]', form).val(files.join());\n\n    form.target = 'savetarget';\n    form._draft.value = draft ? '1' : '';\n    form.action = this.add_url(form.action, '_unlock', msgid);\n    form.action = this.add_url(form.action, '_lang', lang);\n    form.action = this.add_url(form.action, '_framed', 1);\n\n    if (saveonly) {\n      form.action = this.add_url(form.action, '_saveonly', 1);\n    }\n\n    // register timer to notify about connection timeout\n    this.submit_timer = setTimeout(function(){\n      ref.set_busy(false, null, msgid);\n      ref.display_message(ref.get_label('requesttimedout'), 'error');\n    }, this.env.request_timeout * 1000);\n\n    form.submit();\n  };\n\n  this.compose_recipient_select = function(list)\n  {\n    var id, n, recipients = 0;\n    for (n=0; n < list.selection.length; n++) {\n      id = list.selection[n];\n      if (this.env.contactdata[id])\n        recipients++;\n    }\n    this.enable_command('add-recipient', recipients);\n  };\n\n  this.compose_add_recipient = function(field)\n  {\n    // find last focused field name\n    if (!field) {\n      field = $(this.env.focused_field).filter(':visible');\n      field = field.length ? field.attr('id').replace('_', '') : 'to';\n    }\n\n    var recipients = [], input = $('#_'+field), delim = this.env.recipients_delimiter;\n\n    if (this.contact_list && this.contact_list.selection.length) {\n      for (var id, n=0; n < this.contact_list.selection.length; n++) {\n        id = this.contact_list.selection[n];\n        if (id && this.env.contactdata[id]) {\n          recipients.push(this.env.contactdata[id]);\n\n          // group is added, expand it\n          if (id.charAt(0) == 'E' && this.env.contactdata[id].indexOf('@') < 0 && input.length) {\n            var gid = id.substr(1);\n            this.group2expand[gid] = { name:this.env.contactdata[id], input:input.get(0) };\n            this.http_request('group-expand', {_source: this.env.source, _gid: gid}, false);\n          }\n        }\n      }\n    }\n\n    if (recipients.length && input.length) {\n      var oldval = input.val(), rx = new RegExp(RegExp.escape(delim) + '\\\\s*$');\n      if (oldval && !rx.test(oldval))\n        oldval += delim + ' ';\n      input.val(oldval + recipients.join(delim + ' ') + delim + ' ').change();\n      this.triggerEvent('add-recipient', { field:field, recipients:recipients });\n    }\n\n    return recipients.length;\n  };\n\n  // checks the input fields before sending a message\n  this.check_compose_input = function(cmd)\n  {\n    // check input fields\n    var input_to = $(\"[name='_to']\"),\n      input_cc = $(\"[name='_cc']\"),\n      input_bcc = $(\"[name='_bcc']\"),\n      input_from = $(\"[name='_from']\"),\n      input_subject = $(\"[name='_subject']\");\n\n    // check sender (if have no identities)\n    if (input_from.prop('type') == 'text' && !rcube_check_email(input_from.val(), true)) {\n      alert(this.get_label('nosenderwarning'));\n      input_from.focus();\n      return false;\n    }\n\n    // check for empty recipient\n    var recipients = input_to.val() ? input_to.val() : (input_cc.val() ? input_cc.val() : input_bcc.val());\n    if (!rcube_check_email(recipients.replace(/^\\s+/, '').replace(/[\\s,;]+$/, ''), true)) {\n      alert(this.get_label('norecipientwarning'));\n      input_to.focus();\n      return false;\n    }\n\n    // check if all files has been uploaded\n    for (var key in this.env.attachments) {\n      if (typeof this.env.attachments[key] === 'object' && !this.env.attachments[key].complete) {\n        alert(this.get_label('notuploadedwarning'));\n        return false;\n      }\n    }\n\n    // display localized warning for missing subject\n    if (input_subject.val() == '') {\n      var buttons = {},\n        myprompt = $('<div class=\"prompt\">').html('<div class=\"message\">' + this.get_label('nosubjectwarning') + '</div>')\n          .appendTo(document.body),\n        prompt_value = $('<input>').attr({type: 'text', size: 30}).val(this.get_label('nosubject'))\n          .appendTo(myprompt),\n        save_func = function() {\n          input_subject.val(prompt_value.val());\n          myprompt.dialog('close');\n          ref.command(cmd, { nocheck:true });  // repeat command which triggered this\n        };\n\n      buttons[this.get_label('sendmessage')] = function() {\n        save_func($(this));\n      };\n      buttons[this.get_label('cancel')] = function() {\n        input_subject.focus();\n        $(this).dialog('close');\n      };\n\n      myprompt.dialog({\n        modal: true,\n        resizable: false,\n        buttons: buttons,\n        close: function(event, ui) { $(this).remove(); }\n      });\n\n      prompt_value.select().keydown(function(e) {\n        if (e.which == 13) save_func();\n      });\n\n      return false;\n    }\n\n    // check for empty body\n    if (!this.editor.get_content() && !confirm(this.get_label('nobodywarning'))) {\n      this.editor.focus();\n      return false;\n    }\n\n    // move body from html editor to textarea (just to be sure, #1485860)\n    this.editor.save();\n\n    return true;\n  };\n\n  this.toggle_editor = function(props, obj, e)\n  {\n    // @todo: this should work also with many editors on page\n    var result = this.editor.toggle(props.html, props.noconvert || false);\n\n    // satisfy the expectations of aftertoggle-editor event subscribers\n    props.mode = props.html ? 'html' : 'plain';\n\n    if (!result && e) {\n      // fix selector value if operation failed\n      props.mode = props.html ? 'plain' : 'html';\n      $(e.target).filter('select').val(props.mode);\n    }\n\n    if (result) {\n      // update internal format flag\n      $(\"input[name='_is_html']\").val(props.html ? 1 : 0);\n      // enable encrypted compose toggle\n      this.enable_command('compose-encrypted', !props.html);\n    }\n\n    return result;\n  };\n\n  this.insert_response = function(key)\n  {\n    var insert = this.env.textresponses[key] ? this.env.textresponses[key].text : null;\n\n    if (!insert)\n      return false;\n\n    this.editor.replace(insert);\n  };\n\n  /**\n   * Open the dialog to save a new canned response\n   */\n  this.save_response = function()\n  {\n    // show dialog to enter a name and to modify the text to be saved\n    var buttons = {}, text = this.editor.get_content({selection: true, format: 'text', nosig: true}),\n      html = '<form class=\"propform\">' +\n      '<div class=\"prop block\"><label>' + this.get_label('responsename') + '</label>' +\n      '<input type=\"text\" name=\"name\" id=\"ffresponsename\" size=\"40\" /></div>' +\n      '<div class=\"prop block\"><label>' + this.get_label('responsetext') + '</label>' +\n      '<textarea name=\"text\" id=\"ffresponsetext\" cols=\"40\" rows=\"8\"></textarea></div>' +\n      '</form>';\n\n    buttons[this.get_label('save')] = function(e) {\n      var name = $('#ffresponsename').val(),\n        text = $('#ffresponsetext').val();\n\n      if (!text) {\n        $('#ffresponsetext').select();\n        return false;\n      }\n      if (!name)\n        name = text.substring(0,40);\n\n      var lock = ref.display_message(ref.get_label('savingresponse'), 'loading');\n      ref.http_post('settings/responses', { _insert:1, _name:name, _text:text }, lock);\n      $(this).dialog('close');\n    };\n\n    buttons[this.get_label('cancel')] = function() {\n      $(this).dialog('close');\n    };\n\n    this.show_popup_dialog(html, this.get_label('newresponse'), buttons, {button_classes: ['mainaction']});\n\n    $('#ffresponsetext').val(text);\n    $('#ffresponsename').select();\n  };\n\n  this.add_response_item = function(response)\n  {\n    var key = response.key;\n    this.env.textresponses[key] = response;\n\n    // append to responses list\n    if (this.gui_objects.responseslist) {\n      var li = $('<li>').appendTo(this.gui_objects.responseslist);\n      $('<a>').addClass('insertresponse active')\n        .attr('href', '#')\n        .attr('rel', key)\n        .attr('tabindex', '0')\n        .html(this.quote_html(response.name))\n        .appendTo(li)\n        .mousedown(function(e) {\n          return rcube_event.cancel(e);\n        })\n        .on('mouseup keypress', function(e) {\n          if (e.type == 'mouseup' || rcube_event.get_keycode(e) == 13) {\n            ref.command('insert-response', $(this).attr('rel'));\n            $(document.body).trigger('mouseup');  // hides the menu\n            return rcube_event.cancel(e);\n          }\n        });\n    }\n  };\n\n  this.edit_responses = function()\n  {\n    // TODO: implement inline editing of responses\n  };\n\n  this.delete_response = function(key)\n  {\n    if (!key && this.responses_list) {\n      var selection = this.responses_list.get_selection();\n      key = selection[0];\n    }\n\n    // submit delete request\n    if (key && confirm(this.get_label('deleteresponseconfirm'))) {\n      this.http_post('settings/delete-response', { _key: key }, false);\n    }\n  };\n\n  // updates spellchecker buttons on state change\n  this.spellcheck_state = function()\n  {\n    var active = this.editor.spellcheck_state();\n\n    $.each(this.buttons.spellcheck || [], function(i, v) {\n      $('#' + v.id)[active ? 'addClass' : 'removeClass']('selected');\n    });\n\n    return active;\n  };\n\n  // get selected language\n  this.spellcheck_lang = function()\n  {\n    return this.editor.get_language();\n  };\n\n  this.spellcheck_lang_set = function(lang)\n  {\n    this.editor.set_language(lang);\n  };\n\n  // resume spellchecking, highlight provided mispellings without new ajax request\n  this.spellcheck_resume = function(data)\n  {\n    this.editor.spellcheck_resume(data);\n  };\n\n  this.set_draft_id = function(id)\n  {\n    if (id && id != this.env.draft_id) {\n      var filter = {task: 'mail', action: ''},\n        rc = this.opener(false, filter) || this.opener(true, filter);\n\n      // refresh the drafts folder in the opener window\n      if (rc && rc.env.mailbox == this.env.drafts_mailbox)\n        rc.command('checkmail');\n\n      this.env.draft_id = id;\n      $(\"input[name='_draft_saveid']\").val(id);\n\n      // reset history of hidden iframe used for saving draft (#1489643)\n      // but don't do this on timer-triggered draft-autosaving (#1489789)\n      if (window.frames['savetarget'] && window.frames['savetarget'].history && !this.draft_autosave_submit && !this.mailvelope_editor) {\n        window.frames['savetarget'].history.back();\n      }\n\n      this.draft_autosave_submit = false;\n    }\n\n    // always remove local copy upon saving as draft\n    this.remove_compose_data(this.env.compose_id);\n    this.compose_skip_unsavedcheck = false;\n  };\n\n  this.auto_save_start = function()\n  {\n    if (this.env.draft_autosave) {\n      this.draft_autosave_submit = false;\n      this.save_timer = setTimeout(function(){\n          ref.draft_autosave_submit = true;  // set auto-saved flag (#1489789)\n          ref.command(\"savedraft\");\n      }, this.env.draft_autosave * 1000);\n    }\n\n    // save compose form content to local storage every 5 seconds\n    if (!this.local_save_timer && window.localStorage && this.env.save_localstorage) {\n      // track typing activity and only save on changes\n      this.compose_type_activity = this.compose_type_activity_last = 0;\n      $(document).keypress(function(e) { ref.compose_type_activity++; });\n\n      this.local_save_timer = setInterval(function(){\n        if (ref.compose_type_activity > ref.compose_type_activity_last) {\n          ref.save_compose_form_local();\n          ref.compose_type_activity_last = ref.compose_type_activity;\n        }\n      }, 5000);\n\n      $(window).on('unload', function() {\n        // remove copy from local storage if compose screen is left after warning\n        if (!ref.env.server_error)\n          ref.remove_compose_data(ref.env.compose_id);\n      });\n    }\n\n    // check for unsaved changes before leaving the compose page\n    if (!window.onbeforeunload) {\n      window.onbeforeunload = function() {\n        if (!ref.compose_skip_unsavedcheck && ref.cmp_hash != ref.compose_field_hash()) {\n          return ref.get_label('notsentwarning');\n        }\n      };\n    }\n\n    // Unlock interface now that saving is complete\n    this.busy = false;\n  };\n\n  this.compose_field_hash = function(save)\n  {\n    // check input fields\n    var i, id, val, str = '', hash_fields = ['to', 'cc', 'bcc', 'subject'];\n\n    for (i=0; i<hash_fields.length; i++)\n      if (val = $('[name=\"_' + hash_fields[i] + '\"]').val())\n        str += val + ':';\n\n    str += this.editor.get_content({refresh: false});\n\n    if (this.env.attachments)\n      for (id in this.env.attachments)\n        str += id;\n\n    // we can't detect changes in the Mailvelope editor so assume it changed\n    if (this.mailvelope_editor) {\n      str += ';' + new Date().getTime();\n    }\n\n    if (save)\n      this.cmp_hash = str;\n\n    return str;\n  };\n\n  // store the contents of the compose form to localstorage\n  this.save_compose_form_local = function()\n  {\n    // feature is disabled\n    if (!this.env.save_localstorage)\n      return;\n\n    var formdata = { session:this.env.session_id, changed:new Date().getTime() },\n      ed, empty = true;\n\n    // get fresh content from editor\n    this.editor.save();\n\n    if (this.env.draft_id) {\n      formdata.draft_id = this.env.draft_id;\n    }\n    if (this.env.reply_msgid) {\n      formdata.reply_msgid = this.env.reply_msgid;\n    }\n\n    $('input, select, textarea', this.gui_objects.messageform).each(function(i, elem) {\n      switch (elem.tagName.toLowerCase()) {\n        case 'input':\n          if (elem.type == 'button' || elem.type == 'submit' || (elem.type == 'hidden' && elem.name != '_is_html')) {\n            break;\n          }\n          formdata[elem.name] = elem.type != 'checkbox' || elem.checked ? $(elem).val() : '';\n\n          if (formdata[elem.name] != '' && elem.type != 'hidden')\n            empty = false;\n          break;\n\n        case 'select':\n          formdata[elem.name] = $('option:checked', elem).val();\n          break;\n\n        default:\n          formdata[elem.name] = $(elem).val();\n          if (formdata[elem.name] != '')\n            empty = false;\n      }\n    });\n\n    if (!empty) {\n      var index = this.local_storage_get_item('compose.index', []),\n        key = this.env.compose_id;\n\n      if ($.inArray(key, index) < 0) {\n        index.push(key);\n      }\n\n      this.local_storage_set_item('compose.' + key, formdata, true);\n      this.local_storage_set_item('compose.index', index);\n    }\n  };\n\n  // write stored compose data back to form\n  this.restore_compose_form = function(key, html_mode)\n  {\n    var ed, formdata = this.local_storage_get_item('compose.' + key, true);\n\n    if (formdata && typeof formdata == 'object') {\n      $.each(formdata, function(k, value) {\n        if (k[0] == '_') {\n          var elem = $(\"*[name='\"+k+\"']\");\n          if (elem[0] && elem[0].type == 'checkbox') {\n            elem.prop('checked', value != '');\n          }\n          else {\n            elem.val(value);\n          }\n        }\n      });\n\n      // initialize HTML editor\n      if ((formdata._is_html == '1' && !html_mode) || (formdata._is_html != '1' && html_mode)) {\n        this.command('toggle-editor', {id: this.env.composebody, html: !html_mode, noconvert: true});\n      }\n    }\n  };\n\n  // remove stored compose data from localStorage\n  this.remove_compose_data = function(key)\n  {\n    var index = this.local_storage_get_item('compose.index', []);\n\n    if ($.inArray(key, index) >= 0) {\n      this.local_storage_remove_item('compose.' + key);\n      this.local_storage_set_item('compose.index', $.grep(index, function(val,i) { return val != key; }));\n    }\n  };\n\n  // clear all stored compose data of this user\n  this.clear_compose_data = function()\n  {\n    var i, index = this.local_storage_get_item('compose.index', []);\n\n    for (i=0; i < index.length; i++) {\n      this.local_storage_remove_item('compose.' + index[i]);\n    }\n\n    this.local_storage_remove_item('compose.index');\n  };\n\n  this.change_identity = function(obj, show_sig)\n  {\n    if (!obj || !obj.options)\n      return false;\n\n    if (!show_sig)\n      show_sig = this.env.show_sig;\n\n    var id = obj.options[obj.selectedIndex].value,\n      sig = this.env.identity,\n      delim = this.env.recipients_separator,\n      rx_delim = RegExp.escape(delim);\n\n    // enable manual signature insert\n    if (this.env.signatures && this.env.signatures[id]) {\n      this.enable_command('insert-sig', true);\n      this.env.compose_commands.push('insert-sig');\n    }\n    else\n      this.enable_command('insert-sig', false);\n\n    // first function execution\n    if (!this.env.identities_initialized) {\n      this.env.identities_initialized = true;\n      if (this.env.show_sig_later)\n        this.env.show_sig = true;\n      if (this.env.opened_extwin)\n        return;\n    }\n\n    // update reply-to/bcc fields with addresses defined in identities\n    $.each(['replyto', 'bcc'], function() {\n      var rx, key = this,\n        old_val = sig && ref.env.identities[sig] ? ref.env.identities[sig][key] : '',\n        new_val = id && ref.env.identities[id] ? ref.env.identities[id][key] : '',\n        input = $('[name=\"_'+key+'\"]'), input_val = input.val();\n\n      // remove old address(es)\n      if (old_val && input_val) {\n        rx = new RegExp('\\\\s*' + RegExp.escape(old_val) + '\\\\s*');\n        input_val = input_val.replace(rx, '');\n      }\n\n      // cleanup\n      rx = new RegExp(rx_delim + '\\\\s*' + rx_delim, 'g');\n      input_val = String(input_val).replace(rx, delim);\n      rx = new RegExp('^[\\\\s' + rx_delim + ']+');\n      input_val = input_val.replace(rx, '');\n\n      // add new address(es)\n      if (new_val && input_val.indexOf(new_val) == -1 && input_val.indexOf(new_val.replace(/\"/g, '')) == -1) {\n        if (input_val) {\n          rx = new RegExp('[' + rx_delim + '\\\\s]+$')\n          input_val = input_val.replace(rx, '') + delim + ' ';\n        }\n\n        input_val += new_val + delim + ' ';\n      }\n\n      if (old_val || new_val)\n        input.val(input_val).change();\n    });\n\n    this.editor.change_signature(id, show_sig);\n    this.env.identity = id;\n    this.triggerEvent('change_identity');\n    return true;\n  };\n\n  // upload (attachment) file\n  this.upload_file = function(form, action, lock)\n  {\n    if (!form)\n      return;\n\n    // count files and size on capable browser\n    var size = 0, numfiles = 0;\n\n    $('input[type=file]', form).each(function(i, field) {\n      var files = field.files ? field.files.length : (field.value ? 1 : 0);\n\n      // check file size\n      if (field.files) {\n        for (var i=0; i < files; i++)\n          size += field.files[i].size;\n      }\n\n      numfiles += files;\n    });\n\n    // create hidden iframe and post upload form\n    if (numfiles) {\n      if (this.env.max_filesize && this.env.filesizeerror && size > this.env.max_filesize) {\n        this.display_message(this.env.filesizeerror, 'error');\n        return false;\n      }\n\n      var frame_name = this.async_upload_form(form, action || 'upload', function(e) {\n        var d, content = '';\n        try {\n          if (this.contentDocument) {\n            d = this.contentDocument;\n          } else if (this.contentWindow) {\n            d = this.contentWindow.document;\n          }\n          content = d.childNodes[1].innerHTML;\n        } catch (err) {}\n\n        if (!content.match(/add2attachment/) && (!bw.opera || (ref.env.uploadframe && ref.env.uploadframe == e.data.ts))) {\n          if (!content.match(/display_message/))\n            ref.display_message(ref.get_label('fileuploaderror'), 'error');\n          ref.remove_from_attachment_list(e.data.ts);\n\n          if (lock)\n            ref.set_busy(false, null, lock);\n        }\n        // Opera hack: handle double onload\n        if (bw.opera)\n          ref.env.uploadframe = e.data.ts;\n      });\n\n      // display upload indicator and cancel button\n      var content = '<span>' + this.get_label('uploading' + (numfiles > 1 ? 'many' : '')) + '</span>',\n        ts = frame_name.replace(/^rcmupload/, '');\n\n      this.add2attachment_list(ts, { name:'', html:content, classname:'uploading', frame:frame_name, complete:false });\n\n      // upload progress support\n      if (this.env.upload_progress_time) {\n        this.upload_progress_start('upload', ts);\n      }\n\n      // set reference to the form object\n      this.gui_objects.attachmentform = form;\n      return true;\n    }\n  };\n\n  // add file name to attachment list\n  // called from upload page\n  this.add2attachment_list = function(name, att, upload_id)\n  {\n    if (upload_id)\n      this.triggerEvent('fileuploaded', {name: name, attachment: att, id: upload_id});\n\n    if (!this.env.attachments)\n      this.env.attachments = {};\n\n    if (upload_id && this.env.attachments[upload_id])\n      delete this.env.attachments[upload_id];\n\n    this.env.attachments[name] = att;\n\n    if (!this.gui_objects.attachmentlist)\n      return false;\n\n    if (!att.complete && this.env.loadingicon)\n      att.html = '<img src=\"'+this.env.loadingicon+'\" alt=\"\" class=\"uploading\" />' + att.html;\n\n    if (!att.complete && att.frame)\n      att.html = '<a title=\"'+this.get_label('cancel')+'\" onclick=\"return rcmail.cancel_attachment_upload(\\''+name+'\\', \\''+att.frame+'\\');\" href=\"#cancelupload\" class=\"cancelupload\">'\n        + (this.env.cancelicon ? '<img src=\"'+this.env.cancelicon+'\" alt=\"'+this.get_label('cancel')+'\" />' : this.get_label('cancel')) + '</a>' + att.html;\n\n    var indicator, li = $('<li>');\n\n    li.attr('id', name)\n      .addClass(att.classname)\n      .html(att.html)\n      .on('mouseover', function() { rcube_webmail.long_subject_title_ex(this); });\n\n    // replace indicator's li\n    if (upload_id && (indicator = document.getElementById(upload_id))) {\n      li.replaceAll(indicator);\n    }\n    else { // add new li\n      li.appendTo(this.gui_objects.attachmentlist);\n    }\n\n    // set tabindex attribute\n    var tabindex = $(this.gui_objects.attachmentlist).attr('data-tabindex') || '0';\n    li.find('a').attr('tabindex', tabindex);\n\n    return true;\n  };\n\n  this.remove_from_attachment_list = function(name)\n  {\n    if (this.env.attachments) {\n      delete this.env.attachments[name];\n      $('#'+name).remove();\n    }\n  };\n\n  this.remove_attachment = function(name)\n  {\n    if (name && this.env.attachments[name])\n      this.http_post('remove-attachment', { _id:this.env.compose_id, _file:name });\n\n    return true;\n  };\n\n  this.cancel_attachment_upload = function(name, frame_name)\n  {\n    if (!name || !frame_name)\n      return false;\n\n    this.remove_from_attachment_list(name);\n    $(\"iframe[name='\"+frame_name+\"']\").remove();\n    return false;\n  };\n\n  this.upload_progress_start = function(action, name)\n  {\n    setTimeout(function() { ref.http_request(action, {_progress: name}); },\n      this.env.upload_progress_time * 1000);\n  };\n\n  this.upload_progress_update = function(param)\n  {\n    var elem = $('#'+param.name + ' > span');\n\n    if (!elem.length || !param.text)\n      return;\n\n    elem.text(param.text);\n\n    if (!param.done)\n      this.upload_progress_start(param.action, param.name);\n  };\n\n  // send remote request to add a new contact\n  this.add_contact = function(value)\n  {\n    if (value)\n      this.http_post('addcontact', {_address: value});\n\n    return true;\n  };\n\n  // send remote request to search mail or contacts\n  this.qsearch = function(value)\n  {\n    if (value != '') {\n      var r, lock = this.set_busy(true, 'searching'),\n        url = this.search_params(value),\n        action = this.env.action == 'compose' && this.contact_list ? 'search-contacts' : 'search';\n\n      if (this.message_list)\n        this.clear_message_list();\n      else if (this.contact_list)\n        this.list_contacts_clear();\n\n      if (this.env.source)\n        url._source = this.env.source;\n      if (this.env.group)\n        url._gid = this.env.group;\n\n      // reset vars\n      this.env.current_page = 1;\n\n      r = this.http_request(action, url, lock);\n\n      this.env.qsearch = {lock: lock, request: r};\n      this.enable_command('set-listmode', this.env.threads && (this.env.search_scope || 'base') == 'base');\n\n      return true;\n    }\n\n    return false;\n  };\n\n  this.continue_search = function(request_id)\n  {\n    var lock = this.set_busy(true, 'stillsearching');\n\n    setTimeout(function() {\n      var url = ref.search_params();\n      url._continue = request_id;\n      ref.env.qsearch = { lock: lock, request: ref.http_request('search', url, lock) };\n    }, 100);\n  };\n\n  // build URL params for search\n  this.search_params = function(search, filter)\n  {\n    var n, url = {}, mods_arr = [],\n      mods = this.env.search_mods,\n      scope = this.env.search_scope || 'base',\n      mbox = scope == 'all' ? '*' : this.env.mailbox;\n\n    if (!filter && this.gui_objects.search_filter)\n      filter = this.gui_objects.search_filter.value;\n\n    if (!search && this.gui_objects.qsearchbox)\n      search = this.gui_objects.qsearchbox.value;\n\n    if (filter)\n      url._filter = filter;\n\n    if (this.gui_objects.search_interval)\n      url._interval = $(this.gui_objects.search_interval).val();\n\n    if (search) {\n      url._q = search;\n\n      if (mods && this.message_list)\n        mods = mods[mbox] || mods['*'];\n\n      if (mods) {\n        for (n in mods)\n          mods_arr.push(n);\n        url._headers = mods_arr.join(',');\n      }\n    }\n\n    if (scope)\n      url._scope = scope;\n    if (mbox && scope != 'all')\n      url._mbox = mbox;\n\n    return url;\n  };\n\n  // reset search filter\n  this.reset_search_filter = function()\n  {\n    this.filter_disabled = true;\n    if (this.gui_objects.search_filter)\n      $(this.gui_objects.search_filter).val('ALL').change();\n    this.filter_disabled = false;\n  };\n\n  // reset quick-search form\n  this.reset_qsearch = function(all)\n  {\n    if (this.gui_objects.qsearchbox)\n      this.gui_objects.qsearchbox.value = '';\n\n    if (this.gui_objects.search_interval)\n      $(this.gui_objects.search_interval).val('');\n\n    if (this.env.qsearch)\n      this.abort_request(this.env.qsearch);\n\n    if (all) {\n      this.env.search_scope = 'base';\n      this.reset_search_filter();\n    }\n\n    this.env.qsearch = null;\n    this.env.search_request = null;\n    this.env.search_id = null;\n\n    this.enable_command('set-listmode', this.env.threads);\n  };\n\n  this.set_searchscope = function(scope)\n  {\n    var old = this.env.search_scope;\n    this.env.search_scope = scope;\n\n    // re-send search query with new scope\n    if (scope != old && this.env.search_request) {\n      if (!this.qsearch(this.gui_objects.qsearchbox.value) && this.env.search_filter && this.env.search_filter != 'ALL')\n        this.filter_mailbox(this.env.search_filter);\n      if (scope != 'all')\n        this.select_folder(this.env.mailbox, '', true);\n    }\n  };\n\n  this.set_searchinterval = function(interval)\n  {\n    var old = this.env.search_interval;\n    this.env.search_interval = interval;\n\n    // re-send search query with new interval\n    if (interval != old && this.env.search_request) {\n      if (!this.qsearch(this.gui_objects.qsearchbox.value) && this.env.search_filter && this.env.search_filter != 'ALL')\n        this.filter_mailbox(this.env.search_filter);\n      if (interval)\n        this.select_folder(this.env.mailbox, '', true);\n    }\n  };\n\n  this.set_searchmods = function(mods)\n  {\n    var mbox = this.env.mailbox,\n      scope = this.env.search_scope || 'base';\n\n    if (scope == 'all')\n      mbox = '*';\n\n    if (!this.env.search_mods)\n      this.env.search_mods = {};\n\n    if (mbox)\n      this.env.search_mods[mbox] = mods;\n  };\n\n  this.is_multifolder_listing = function()\n  {\n    return this.env.multifolder_listing !== undefined ? this.env.multifolder_listing :\n      (this.env.search_request && (this.env.search_scope || 'base') != 'base');\n  };\n\n  // action executed after mail is sent\n  this.sent_successfully = function(type, msg, folders, save_error)\n  {\n    this.display_message(msg, type);\n    this.compose_skip_unsavedcheck = true;\n\n    if (this.env.extwin) {\n      if (!save_error)\n        this.lock_form(this.gui_objects.messageform);\n\n      var filter = {task: 'mail', action: ''},\n        rc = this.opener(false, filter) || this.opener(true, filter);\n\n      if (rc) {\n        rc.display_message(msg, type);\n        // refresh the folder where sent message was saved or replied message comes from\n        if (folders && $.inArray(rc.env.mailbox, folders) >= 0) {\n          rc.command('checkmail');\n        }\n      }\n\n      if (!save_error)\n        setTimeout(function() { window.close(); }, 1000);\n    }\n    else if (!save_error) {\n      // before redirect we need to wait some time for Chrome (#1486177)\n      setTimeout(function() { ref.list_mailbox(); }, 500);\n    }\n\n    if (save_error)\n      this.env.is_sent = true;\n  };\n\n\n  /*********************************************************/\n  /*********     keyboard live-search methods      *********/\n  /*********************************************************/\n\n  // handler for keyboard events on address-fields\n  this.ksearch_keydown = function(e, obj, props)\n  {\n    if (this.ksearch_timer)\n      clearTimeout(this.ksearch_timer);\n\n    var key = rcube_event.get_keycode(e),\n      mod = rcube_event.get_modifier(e);\n\n    switch (key) {\n      case 38:  // arrow up\n      case 40:  // arrow down\n        if (!this.ksearch_visible())\n          return;\n\n        var dir = key == 38 ? 1 : 0,\n          highlight = document.getElementById('rcmkSearchItem' + this.ksearch_selected);\n\n        if (!highlight)\n          highlight = this.ksearch_pane.__ul.firstChild;\n\n        if (highlight)\n          this.ksearch_select(dir ? highlight.previousSibling : highlight.nextSibling);\n\n        return rcube_event.cancel(e);\n\n      case 9:   // tab\n        if (mod == SHIFT_KEY || !this.ksearch_visible()) {\n          this.ksearch_hide();\n          return;\n        }\n\n      case 13:  // enter\n        if (!this.ksearch_visible())\n          return false;\n\n        // insert selected address and hide ksearch pane\n        this.insert_recipient(this.ksearch_selected);\n        this.ksearch_hide();\n\n        return rcube_event.cancel(e);\n\n      case 27:  // escape\n        this.ksearch_hide();\n        return;\n\n      case 37:  // left\n      case 39:  // right\n        return;\n    }\n\n    // start timer\n    this.ksearch_timer = setTimeout(function(){ ref.ksearch_get_results(props); }, 200);\n    this.ksearch_input = obj;\n\n    return true;\n  };\n\n  this.ksearch_visible = function()\n  {\n    return this.ksearch_selected !== null && this.ksearch_selected !== undefined && this.ksearch_value;\n  };\n\n  this.ksearch_select = function(node)\n  {\n    if (this.ksearch_pane && node) {\n      this.ksearch_pane.find('li.selected').removeClass('selected').removeAttr('aria-selected');\n    }\n\n    if (node) {\n      $(node).addClass('selected').attr('aria-selected', 'true');\n      this.ksearch_selected = node._rcm_id;\n      $(this.ksearch_input).attr('aria-activedescendant', 'rcmkSearchItem' + this.ksearch_selected);\n    }\n  };\n\n  this.insert_recipient = function(id)\n  {\n    if (id === null || !this.env.contacts[id] || !this.ksearch_input)\n      return;\n\n    // get cursor pos\n    var inp_value = this.ksearch_input.value,\n      cpos = this.get_caret_pos(this.ksearch_input),\n      p = inp_value.lastIndexOf(this.ksearch_value, cpos),\n      trigger = false,\n      insert = '',\n      // replace search string with full address\n      pre = inp_value.substring(0, p),\n      end = inp_value.substring(p+this.ksearch_value.length, inp_value.length);\n\n    this.ksearch_destroy();\n\n    // insert all members of a group\n    if (typeof this.env.contacts[id] === 'object' && this.env.contacts[id].type == 'group' && !this.env.contacts[id].email) {\n      insert += this.env.contacts[id].name + this.env.recipients_delimiter;\n      this.group2expand[this.env.contacts[id].id] = $.extend({ input: this.ksearch_input }, this.env.contacts[id]);\n      this.http_request('mail/group-expand', {_source: this.env.contacts[id].source, _gid: this.env.contacts[id].id}, false);\n    }\n    else if (typeof this.env.contacts[id] === 'object' && this.env.contacts[id].name) {\n      insert = this.env.contacts[id].name + this.env.recipients_delimiter;\n      trigger = true;\n    }\n    else if (typeof this.env.contacts[id] === 'string') {\n      insert = this.env.contacts[id] + this.env.recipients_delimiter;\n      trigger = true;\n    }\n\n    this.ksearch_input.value = pre + insert + end;\n\n    // set caret to insert pos\n    this.set_caret_pos(this.ksearch_input, p + insert.length);\n\n    if (trigger) {\n      this.triggerEvent('autocomplete_insert', { field:this.ksearch_input, insert:insert, data:this.env.contacts[id] });\n      this.compose_type_activity++;\n    }\n  };\n\n  this.replace_group_recipients = function(id, recipients)\n  {\n    if (this.group2expand[id]) {\n      this.group2expand[id].input.value = this.group2expand[id].input.value.replace(this.group2expand[id].name, recipients);\n      this.triggerEvent('autocomplete_insert', { field:this.group2expand[id].input, insert:recipients });\n      this.group2expand[id] = null;\n      this.compose_type_activity++;\n    }\n  };\n\n  // address search processor\n  this.ksearch_get_results = function(props)\n  {\n    var inp_value = this.ksearch_input ? this.ksearch_input.value : null;\n\n    if (inp_value === null)\n      return;\n\n    if (this.ksearch_pane && this.ksearch_pane.is(\":visible\"))\n      this.ksearch_pane.hide();\n\n    // get string from current cursor pos to last comma\n    var cpos = this.get_caret_pos(this.ksearch_input),\n      p = inp_value.lastIndexOf(this.env.recipients_separator, cpos-1),\n      q = inp_value.substring(p+1, cpos),\n      min = this.env.autocomplete_min_length,\n      data = this.ksearch_data;\n\n    // trim query string\n    q = $.trim(q);\n\n    // Don't (re-)search if the last results are still active\n    if (q == this.ksearch_value)\n      return;\n\n    this.ksearch_destroy();\n\n    if (q.length && q.length < min) {\n      if (!this.ksearch_info) {\n        this.ksearch_info = this.display_message(\n          this.get_label('autocompletechars').replace('$min', min));\n      }\n      return;\n    }\n\n    var old_value = this.ksearch_value;\n    this.ksearch_value = q;\n\n    // ...string is empty\n    if (!q.length)\n      return;\n\n    // ...new search value contains old one and previous search was not finished or its result was empty\n    if (old_value && old_value.length && q.startsWith(old_value) && (!data || data.num <= 0) && this.env.contacts && !this.env.contacts.length)\n      return;\n\n    var sources = props && props.sources ? props.sources : [''];\n    var reqid = this.multi_thread_http_request({\n      items: sources,\n      threads: props && props.threads ? props.threads : 1,\n      action:  props && props.action ? props.action : 'mail/autocomplete',\n      postdata: { _search:q, _source:'%s' },\n      lock: this.display_message(this.get_label('searching'), 'loading')\n    });\n\n    this.ksearch_data = { id:reqid, sources:sources.slice(), num:sources.length };\n  };\n\n  this.ksearch_query_results = function(results, search, reqid)\n  {\n    // trigger multi-thread http response callback\n    this.multi_thread_http_response(results, reqid);\n\n    // search stopped in meantime?\n    if (!this.ksearch_value)\n      return;\n\n    // ignore this outdated search response\n    if (this.ksearch_input && search != this.ksearch_value)\n      return;\n\n    // display search results\n    var i, id, len, ul, text, type, init,\n      value = this.ksearch_value,\n      maxlen = this.env.autocomplete_max ? this.env.autocomplete_max : 15;\n\n    // create results pane if not present\n    if (!this.ksearch_pane) {\n      ul = $('<ul>');\n      this.ksearch_pane = $('<div>').attr('id', 'rcmKSearchpane').attr('role', 'listbox')\n        .css({ position:'absolute', 'z-index':30000 }).append(ul).appendTo(document.body);\n      this.ksearch_pane.__ul = ul[0];\n    }\n\n    ul = this.ksearch_pane.__ul;\n\n    // remove all search results or add to existing list if parallel search\n    if (reqid && this.ksearch_pane.data('reqid') == reqid) {\n      maxlen -= ul.childNodes.length;\n    }\n    else {\n      this.ksearch_pane.data('reqid', reqid);\n      init = 1;\n      // reset content\n      ul.innerHTML = '';\n      this.env.contacts = [];\n      // move the results pane right under the input box\n      var pos = $(this.ksearch_input).offset();\n      this.ksearch_pane.css({ left:pos.left+'px', top:(pos.top + this.ksearch_input.offsetHeight)+'px', display: 'none'});\n    }\n\n    // add each result line to list\n    if (results && (len = results.length)) {\n      for (i=0; i < len && maxlen > 0; i++) {\n        text = typeof results[i] === 'object' ? (results[i].display || results[i].name) : results[i];\n        type = typeof results[i] === 'object' ? results[i].type : '';\n        id = i + this.env.contacts.length;\n        $('<li>').attr('id', 'rcmkSearchItem' + id)\n          .attr('role', 'option')\n          .html('<i class=\"icon\"></i>' + this.quote_html(text.replace(new RegExp('('+RegExp.escape(value)+')', 'ig'), '##$1%%')).replace(/##([^%]+)%%/g, '<b>$1</b>'))\n          .addClass(type || '')\n          .appendTo(ul)\n          .mouseover(function() { ref.ksearch_select(this); })\n          .mouseup(function() { ref.ksearch_click(this); })\n          .get(0)._rcm_id = id;\n        maxlen -= 1;\n      }\n    }\n\n    if (ul.childNodes.length) {\n      // set the right aria-* attributes to the input field\n      $(this.ksearch_input)\n        .attr('aria-haspopup', 'true')\n        .attr('aria-expanded', 'true')\n        .attr('aria-owns', 'rcmKSearchpane');\n\n      this.ksearch_pane.show();\n\n      // select the first\n      if (!this.env.contacts.length) {\n        this.ksearch_select($('li:first', ul).get(0));\n      }\n    }\n\n    if (len)\n      this.env.contacts = this.env.contacts.concat(results);\n\n    if (this.ksearch_data.id == reqid)\n      this.ksearch_data.num--;\n  };\n\n  this.ksearch_click = function(node)\n  {\n    if (this.ksearch_input)\n      this.ksearch_input.focus();\n\n    this.insert_recipient(node._rcm_id);\n    this.ksearch_hide();\n  };\n\n  this.ksearch_blur = function()\n  {\n    if (this.ksearch_timer)\n      clearTimeout(this.ksearch_timer);\n\n    this.ksearch_input = null;\n    this.ksearch_hide();\n  };\n\n  this.ksearch_hide = function()\n  {\n    this.ksearch_selected = null;\n    this.ksearch_value = '';\n\n    if (this.ksearch_pane)\n      this.ksearch_pane.hide();\n\n    $(this.ksearch_input)\n      .attr('aria-haspopup', 'false')\n      .attr('aria-expanded', 'false')\n      .removeAttr('aria-activedescendant')\n      .removeAttr('aria-owns');\n\n    this.ksearch_destroy();\n  };\n\n  // Clears autocomplete data/requests\n  this.ksearch_destroy = function()\n  {\n    if (this.ksearch_data)\n      this.multi_thread_request_abort(this.ksearch_data.id);\n\n    if (this.ksearch_info)\n      this.hide_message(this.ksearch_info);\n\n    if (this.ksearch_msg)\n      this.hide_message(this.ksearch_msg);\n\n    this.ksearch_data = null;\n    this.ksearch_info = null;\n    this.ksearch_msg = null;\n  };\n\n\n  /*********************************************************/\n  /*********         address book methods          *********/\n  /*********************************************************/\n\n  this.contactlist_keypress = function(list)\n  {\n    if (list.key_pressed == list.DELETE_KEY)\n      this.command('delete');\n  };\n\n  this.contactlist_select = function(list)\n  {\n    if (this.preview_timer)\n      clearTimeout(this.preview_timer);\n\n    var n, id, sid, contact, writable = false,\n      selected = list.selection.length,\n      source = this.env.source ? this.env.address_sources[this.env.source] : null;\n\n    // we don't have dblclick handler here, so use 200 instead of this.dblclick_time\n    if (this.env.contentframe && (id = list.get_single_selection()))\n      this.preview_timer = setTimeout(function(){ ref.load_contact(id, 'show'); }, 200);\n    else if (this.env.contentframe)\n      this.show_contentframe(false);\n\n    if (selected) {\n      list.draggable = false;\n\n      // no source = search result, we'll need to detect if any of\n      // selected contacts are in writable addressbook to enable edit/delete\n      // we'll also need to know sources used in selection for copy\n      // and group-addmember operations (drag&drop)\n      this.env.selection_sources = [];\n\n      if (source) {\n        this.env.selection_sources.push(this.env.source);\n      }\n\n      for (n in list.selection) {\n        contact = list.data[list.selection[n]];\n        if (!source) {\n          sid = String(list.selection[n]).replace(/^[^-]+-/, '');\n          if (sid && this.env.address_sources[sid]) {\n            writable = writable || (!this.env.address_sources[sid].readonly && !contact.readonly);\n            this.env.selection_sources.push(sid);\n          }\n        }\n        else {\n          writable = writable || (!source.readonly && !contact.readonly);\n        }\n\n        if (contact._type != 'group')\n          list.draggable = true;\n      }\n\n      this.env.selection_sources = $.unique(this.env.selection_sources);\n    }\n\n    // if a group is currently selected, and there is at least one contact selected\n    // thend we can enable the group-remove-selected command\n    this.enable_command('group-remove-selected', this.env.group && selected && writable);\n    this.enable_command('compose', this.env.group || selected);\n    this.enable_command('print', selected == 1);\n    this.enable_command('export-selected', 'copy', selected > 0);\n    this.enable_command('edit', id && writable);\n    this.enable_command('delete', 'move', selected && writable);\n\n    return false;\n  };\n\n  this.list_contacts = function(src, group, page)\n  {\n    var win, folder, url = {},\n      refresh = src === undefined && group === undefined && page === undefined,\n      target = window;\n\n    if (!src)\n      src = this.env.source;\n\n    if (refresh)\n      group = this.env.group;\n\n    if (page && this.current_page == page && src == this.env.source && group == this.env.group)\n      return false;\n\n    if (src != this.env.source) {\n      page = this.env.current_page = 1;\n      this.reset_qsearch();\n    }\n    else if (!refresh && group != this.env.group)\n      page = this.env.current_page = 1;\n\n    if (this.env.search_id)\n      folder = 'S'+this.env.search_id;\n    else if (!this.env.search_request)\n      folder = group ? 'G'+src+group : src;\n\n    this.env.source = src;\n    this.env.group = group;\n\n    // truncate groups listing stack\n    var index = $.inArray(this.env.group, this.env.address_group_stack);\n    if (index < 0)\n      this.env.address_group_stack = [];\n    else\n      this.env.address_group_stack = this.env.address_group_stack.slice(0,index);\n\n    // make sure the current group is on top of the stack\n    if (this.env.group) {\n      this.env.address_group_stack.push(this.env.group);\n\n      // mark the first group on the stack as selected in the directory list\n      folder = 'G'+src+this.env.address_group_stack[0];\n    }\n    else if (this.gui_objects.addresslist_title) {\n        $(this.gui_objects.addresslist_title).html(this.get_label('contacts'));\n    }\n\n    if (!this.env.search_id)\n      this.select_folder(folder, '', true);\n\n    // load contacts remotely\n    if (this.gui_objects.contactslist) {\n      this.list_contacts_remote(src, group, page);\n      return;\n    }\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      target = win;\n      url._framed = 1;\n    }\n\n    if (group)\n      url._gid = group;\n    if (page)\n      url._page = page;\n    if (src)\n      url._source = src;\n\n    // also send search request to get the correct listing\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    this.set_busy(true, 'loading');\n    this.location_href(url, target);\n  };\n\n  // send remote request to load contacts list\n  this.list_contacts_remote = function(src, group, page)\n  {\n    // clear message list first\n    this.list_contacts_clear();\n\n    // send request to server\n    var url = {}, lock = this.set_busy(true, 'loading');\n\n    if (src)\n      url._source = src;\n    if (page)\n      url._page = page;\n    if (group)\n      url._gid = group;\n\n    this.env.source = src;\n    this.env.group = group;\n\n    // also send search request to get the right records\n    if (this.env.search_request)\n      url._search = this.env.search_request;\n\n    this.http_request(this.env.task == 'mail' ? 'list-contacts' : 'list', url, lock);\n  };\n\n  this.list_contacts_clear = function()\n  {\n    this.contact_list.data = {};\n    this.contact_list.clear(true);\n    this.show_contentframe(false);\n    this.enable_command('delete', 'move', 'copy', 'print', false);\n    this.enable_command('compose', this.env.group);\n  };\n\n  this.set_group_prop = function(prop)\n  {\n    if (this.gui_objects.addresslist_title) {\n      var boxtitle = $(this.gui_objects.addresslist_title).html('');  // clear contents\n\n      // add link to pop back to parent group\n      if (this.env.address_group_stack.length > 1) {\n        $('<a href=\"#list\">...</a>')\n          .attr('title', this.get_label('uponelevel'))\n          .addClass('poplink')\n          .appendTo(boxtitle)\n          .click(function(e){ return ref.command('popgroup','',this); });\n        boxtitle.append('&nbsp;&raquo;&nbsp;');\n      }\n\n      boxtitle.append($('<span>').text(prop.name));\n    }\n\n    this.triggerEvent('groupupdate', prop);\n  };\n\n  // load contact record\n  this.load_contact = function(cid, action, framed)\n  {\n    var win, url = {}, target = window,\n      rec = this.contact_list ? this.contact_list.data[cid] : null;\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      url._framed = 1;\n      target = win;\n      this.show_contentframe(true);\n\n      // load dummy content, unselect selected row(s)\n      if (!cid)\n        this.contact_list.clear_selection();\n\n      this.enable_command('compose', rec && rec.email);\n      this.enable_command('export-selected', 'print', rec && rec._type != 'group');\n    }\n    else if (framed)\n      return false;\n\n    if (action && (cid || action == 'add') && !this.drag_active) {\n      if (this.env.group)\n        url._gid = this.env.group;\n\n      if (this.env.search_request)\n        url._search = this.env.search_request;\n\n      url._action = action;\n      url._source = this.env.source;\n      url._cid = cid;\n\n      this.location_href(url, target, true);\n    }\n\n    return true;\n  };\n\n  // add/delete member to/from the group\n  this.group_member_change = function(what, cid, source, gid)\n  {\n    if (what != 'add')\n      what = 'del';\n\n    var label = this.get_label(what == 'add' ? 'addingmember' : 'removingmember'),\n      lock = this.display_message(label, 'loading'),\n      post_data = {_cid: cid, _source: source, _gid: gid};\n\n    this.http_post('group-'+what+'members', post_data, lock);\n  };\n\n  this.contacts_drag_menu = function(e, to)\n  {\n    var dest = to.type == 'group' ? to.source : to.id,\n      source = this.env.source;\n\n    if (!this.env.address_sources[dest] || this.env.address_sources[dest].readonly)\n      return true;\n\n    // search result may contain contacts from many sources, but if there is only one...\n    if (source == '' && this.env.selection_sources.length == 1)\n      source = this.env.selection_sources[0];\n\n    if (to.type == 'group' && dest == source) {\n      var cid = this.contact_list.get_selection().join(',');\n      this.group_member_change('add', cid, dest, to.id);\n      return true;\n    }\n    // move action is not possible, \"redirect\" to copy if menu wasn't requested\n    else if (!this.commands.move && rcube_event.get_modifier(e) != SHIFT_KEY) {\n      this.copy_contacts(to);\n      return true;\n    }\n\n    return this.drag_menu(e, to);\n  };\n\n  // copy contact(s) to the specified target (group or directory)\n  this.copy_contacts = function(to)\n  {\n    var dest = to.type == 'group' ? to.source : to.id,\n      source = this.env.source,\n      group = this.env.group ? this.env.group : '',\n      cid = this.contact_list.get_selection().join(',');\n\n    if (!cid || !this.env.address_sources[dest] || this.env.address_sources[dest].readonly)\n      return;\n\n    // search result may contain contacts from many sources, but if there is only one...\n    if (source == '' && this.env.selection_sources.length == 1)\n      source = this.env.selection_sources[0];\n\n    // tagret is a group\n    if (to.type == 'group') {\n      if (dest == source)\n        return;\n\n      var lock = this.display_message(this.get_label('copyingcontact'), 'loading'),\n        post_data = {_cid: cid, _source: this.env.source, _to: dest, _togid: to.id, _gid: group};\n\n      this.http_post('copy', post_data, lock);\n    }\n    // target is an addressbook\n    else if (to.id != source) {\n      var lock = this.display_message(this.get_label('copyingcontact'), 'loading'),\n        post_data = {_cid: cid, _source: this.env.source, _to: to.id, _gid: group};\n\n      this.http_post('copy', post_data, lock);\n    }\n  };\n\n  // move contact(s) to the specified target (group or directory)\n  this.move_contacts = function(to)\n  {\n    var dest = to.type == 'group' ? to.source : to.id,\n      source = this.env.source,\n      group = this.env.group ? this.env.group : '';\n\n    if (!this.env.address_sources[dest] || this.env.address_sources[dest].readonly)\n      return;\n\n    // search result may contain contacts from many sources, but if there is only one...\n    if (source == '' && this.env.selection_sources.length == 1)\n      source = this.env.selection_sources[0];\n\n    if (to.type == 'group') {\n      if (dest == source)\n        return;\n\n      this._with_selected_contacts('move', {_to: dest, _togid: to.id});\n    }\n    // target is an addressbook\n    else if (to.id != source)\n      this._with_selected_contacts('move', {_to: to.id});\n  };\n\n  // delete contact(s)\n  this.delete_contacts = function()\n  {\n    var undelete = this.env.source && this.env.address_sources[this.env.source].undelete;\n\n    if (!undelete && !confirm(this.get_label('deletecontactconfirm')))\n      return;\n\n    return this._with_selected_contacts('delete');\n  };\n\n  this._with_selected_contacts = function(action, post_data)\n  {\n    var selection = this.contact_list ? this.contact_list.get_selection() : [];\n\n    // exit if no contact specified or if selection is empty\n    if (!selection.length && !this.env.cid)\n      return;\n\n    var n, a_cids = [],\n      label = action == 'delete' ? 'contactdeleting' : 'movingcontact',\n      lock = this.display_message(this.get_label(label), 'loading');\n\n    if (this.env.cid)\n      a_cids.push(this.env.cid);\n    else {\n      for (n=0; n<selection.length; n++) {\n        id = selection[n];\n        a_cids.push(id);\n        this.contact_list.remove_row(id, (n == selection.length-1));\n      }\n\n      // hide content frame if we delete the currently displayed contact\n      if (selection.length == 1)\n        this.show_contentframe(false);\n    }\n\n    if (!post_data)\n      post_data = {};\n\n    post_data._source = this.env.source;\n    post_data._from = this.env.action;\n    post_data._cid = a_cids.join(',');\n\n    if (this.env.group)\n      post_data._gid = this.env.group;\n\n    // also send search request to get the right records from the next page\n    if (this.env.search_request)\n      post_data._search = this.env.search_request;\n\n    // send request to server\n    this.http_post(action, post_data, lock)\n\n    return true;\n  };\n\n  // update a contact record in the list\n  this.update_contact_row = function(cid, cols_arr, newcid, source, data)\n  {\n    var list = this.contact_list;\n\n    cid = this.html_identifier(cid);\n\n    // when in searching mode, concat cid with the source name\n    if (!list.rows[cid]) {\n      cid = cid + '-' + source;\n      if (newcid)\n        newcid = newcid + '-' + source;\n    }\n\n    list.update_row(cid, cols_arr, newcid, true);\n    list.data[cid] = data;\n  };\n\n  // add row to contacts list\n  this.add_contact_row = function(cid, cols, classes, data)\n  {\n    if (!this.gui_objects.contactslist)\n      return false;\n\n    var c, col, list = this.contact_list,\n      row = { cols:[] };\n\n    row.id = 'rcmrow' + this.html_identifier(cid);\n    row.className = 'contact ' + (classes || '');\n\n    if (list.in_selection(cid))\n      row.className += ' selected';\n\n    // add each submitted col\n    for (c in cols) {\n      col = {};\n      col.className = String(c).toLowerCase();\n      col.innerHTML = cols[c];\n      row.cols.push(col);\n    }\n\n    // store data in list member\n    list.data[cid] = data;\n    list.insert_row(row);\n\n    this.enable_command('export', list.rowcount > 0);\n  };\n\n  this.init_contact_form = function()\n  {\n    var col;\n\n    if (this.env.coltypes) {\n      this.set_photo_actions($('#ff_photo').val());\n      for (col in this.env.coltypes)\n        this.init_edit_field(col, null);\n    }\n\n    $('.contactfieldgroup .row a.deletebutton').click(function() {\n      ref.delete_edit_field(this);\n      return false;\n    });\n\n    $('select.addfieldmenu').change(function() {\n      ref.insert_edit_field($(this).val(), $(this).attr('rel'), this);\n      this.selectedIndex = 0;\n    });\n\n    // enable date pickers on date fields\n    if ($.datepicker && this.env.date_format) {\n      $.datepicker.setDefaults({\n        dateFormat: this.env.date_format,\n        changeMonth: true,\n        changeYear: true,\n        yearRange: '-120:+10',\n        showOtherMonths: true,\n        selectOtherMonths: true\n//        onSelect: function(dateText) { $(this).focus().val(dateText); }\n      });\n      $('input.datepicker').datepicker();\n    }\n\n    // Submit search form on Enter\n    if (this.env.action == 'search')\n      $(this.gui_objects.editform).append($('<input type=\"submit\">').hide())\n        .submit(function() { $('input.mainaction').click(); return false; });\n  };\n\n  // group creation dialog\n  this.group_create = function()\n  {\n    var input = $('<input>').attr('type', 'text'),\n      content = $('<label>').text(this.get_label('namex')).append(input);\n\n    this.show_popup_dialog(content, this.get_label('newgroup'),\n      [{\n        text: this.get_label('save'),\n        'class': 'mainaction',\n        click: function() {\n          var name;\n\n          if (name = input.val()) {\n            ref.http_post('group-create', {_source: ref.env.source, _name: name},\n              ref.set_busy(true, 'loading'));\n          }\n\n          $(this).dialog('close');\n        }\n      }]\n    );\n  };\n\n  // group rename dialog\n  this.group_rename = function()\n  {\n    if (!this.env.group)\n      return;\n\n    var group_name = this.env.contactgroups['G' + this.env.source + this.env.group].name,\n      input = $('<input>').attr('type', 'text').val(group_name),\n      content = $('<label>').text(this.get_label('namex')).append(input);\n\n    this.show_popup_dialog(content, this.get_label('grouprename'),\n      [{\n        text: this.get_label('save'),\n        'class': 'mainaction',\n        click: function() {\n          var name;\n\n          if ((name = input.val()) && name != group_name) {\n            ref.http_post('group-rename', {_source: ref.env.source, _gid: ref.env.group, _name: name},\n              ref.set_busy(true, 'loading'));\n          }\n\n          $(this).dialog('close');\n        }\n      }],\n      {open: function() { input.select(); }}\n    );\n  };\n\n  this.group_delete = function()\n  {\n    if (this.env.group && confirm(this.get_label('deletegroupconfirm'))) {\n      var lock = this.set_busy(true, 'groupdeleting');\n      this.http_post('group-delete', {_source: this.env.source, _gid: this.env.group}, lock);\n    }\n  };\n\n  // callback from server upon group-delete command\n  this.remove_group_item = function(prop)\n  {\n    var key = 'G'+prop.source+prop.id;\n\n    if (this.treelist.remove(key)) {\n      this.triggerEvent('group_delete', { source:prop.source, id:prop.id });\n      delete this.env.contactfolders[key];\n      delete this.env.contactgroups[key];\n    }\n\n    this.list_contacts(prop.source, 0);\n  };\n\n  //remove selected contacts from current active group\n  this.group_remove_selected = function()\n  {\n    this.http_post('group-delmembers', {_cid: this.contact_list.selection,\n      _source: this.env.source, _gid: this.env.group});\n  };\n\n  //callback after deleting contact(s) from current group\n  this.remove_group_contacts = function(props)\n  {\n    if (this.env.group !== undefined && (this.env.group === props.gid)) {\n      var n, selection = this.contact_list.get_selection();\n      for (n=0; n<selection.length; n++) {\n        id = selection[n];\n        this.contact_list.remove_row(id, (n == selection.length-1));\n      }\n    }\n  };\n\n  // callback for creating a new contact group\n  this.insert_contact_group = function(prop)\n  {\n    prop.type = 'group';\n\n    var key = 'G'+prop.source+prop.id,\n      link = $('<a>').attr('href', '#')\n        .attr('rel', prop.source+':'+prop.id)\n        .click(function() { return ref.command('listgroup', prop, this); })\n        .html(prop.name);\n\n    this.env.contactfolders[key] = this.env.contactgroups[key] = prop;\n    this.treelist.insert({ id:key, html:link, classes:['contactgroup'] }, prop.source, 'contactgroup');\n\n    this.triggerEvent('group_insert', { id:prop.id, source:prop.source, name:prop.name, li:this.treelist.get_item(key) });\n  };\n\n  // callback for renaming a contact group\n  this.update_contact_group = function(prop)\n  {\n    var key = 'G'+prop.source+prop.id,\n      newnode = {};\n\n    // group ID has changed, replace link node and identifiers\n    if (prop.newid) {\n      var newkey = 'G'+prop.source+prop.newid,\n        newprop = $.extend({}, prop);\n\n      this.env.contactfolders[newkey] = this.env.contactfolders[key];\n      this.env.contactfolders[newkey].id = prop.newid;\n      this.env.group = prop.newid;\n\n      delete this.env.contactfolders[key];\n      delete this.env.contactgroups[key];\n\n      newprop.id = prop.newid;\n      newprop.type = 'group';\n\n      newnode.id = newkey;\n      newnode.html = $('<a>').attr('href', '#')\n        .attr('rel', prop.source+':'+prop.newid)\n        .click(function() { return ref.command('listgroup', newprop, this); })\n        .html(prop.name);\n    }\n    // update displayed group name\n    else {\n      $(this.treelist.get_item(key)).children().first().html(prop.name);\n      this.env.contactfolders[key].name = this.env.contactgroups[key].name = prop.name;\n    }\n\n    // update list node and re-sort it\n    this.treelist.update(key, newnode, true);\n\n    this.triggerEvent('group_update', { id:prop.id, source:prop.source, name:prop.name, li:this.treelist.get_item(key), newid:prop.newid });\n  };\n\n  this.update_group_commands = function()\n  {\n    var source = this.env.source != '' ? this.env.address_sources[this.env.source] : null,\n      supported = source && source.groups && !source.readonly;\n\n    this.enable_command('group-create', supported);\n    this.enable_command('group-rename', 'group-delete', supported && this.env.group);\n  };\n\n  this.init_edit_field = function(col, elem)\n  {\n    var label = this.env.coltypes[col].label;\n\n    if (!elem)\n      elem = $('.ff_' + col);\n\n    if (label)\n      elem.placeholder(label);\n  };\n\n  this.insert_edit_field = function(col, section, menu)\n  {\n    // just make pre-defined input field visible\n    var elem = $('#ff_'+col);\n    if (elem.length) {\n      elem.show().focus();\n      $(menu).children('option[value=\"'+col+'\"]').prop('disabled', true);\n    }\n    else {\n      var lastelem = $('.ff_'+col),\n        appendcontainer = $('#contactsection'+section+' .contactcontroller'+col);\n\n      if (!appendcontainer.length) {\n        var sect = $('#contactsection'+section),\n          lastgroup = $('.contactfieldgroup', sect).last();\n        appendcontainer = $('<fieldset>').addClass('contactfieldgroup contactcontroller'+col);\n        if (lastgroup.length)\n          appendcontainer.insertAfter(lastgroup);\n        else\n          sect.prepend(appendcontainer);\n      }\n\n      if (appendcontainer.length && appendcontainer.get(0).nodeName == 'FIELDSET') {\n        var input, colprop = this.env.coltypes[col],\n          input_id = 'ff_' + col + (colprop.count || 0),\n          row = $('<div>').addClass('row'),\n          cell = $('<div>').addClass('contactfieldcontent data'),\n          label = $('<div>').addClass('contactfieldlabel label');\n\n        if (colprop.subtypes_select)\n          label.html(colprop.subtypes_select);\n        else\n          label.html('<label for=\"' + input_id + '\">' + colprop.label + '</label>');\n\n        var name_suffix = colprop.limit != 1 ? '[]' : '';\n\n        if (colprop.type == 'text' || colprop.type == 'date') {\n          input = $('<input>')\n            .addClass('ff_'+col)\n            .attr({type: 'text', name: '_'+col+name_suffix, size: colprop.size, id: input_id})\n            .appendTo(cell);\n\n          this.init_edit_field(col, input);\n\n          if (colprop.type == 'date' && $.datepicker)\n            input.datepicker();\n        }\n        else if (colprop.type == 'textarea') {\n          input = $('<textarea>')\n            .addClass('ff_'+col)\n            .attr({ name: '_'+col+name_suffix, cols:colprop.size, rows:colprop.rows, id: input_id })\n            .appendTo(cell);\n\n          this.init_edit_field(col, input);\n        }\n        else if (colprop.type == 'composite') {\n          var i, childcol, cp, first, templ, cols = [], suffices = [];\n\n          // read template for composite field order\n          if ((templ = this.env[col+'_template'])) {\n            for (i=0; i < templ.length; i++) {\n              cols.push(templ[i][1]);\n              suffices.push(templ[i][2]);\n            }\n          }\n          else {  // list fields according to appearance in colprop\n            for (childcol in colprop.childs)\n              cols.push(childcol);\n          }\n\n          for (i=0; i < cols.length; i++) {\n            childcol = cols[i];\n            cp = colprop.childs[childcol];\n            input = $('<input>')\n              .addClass('ff_'+childcol)\n              .attr({ type: 'text', name: '_'+childcol+name_suffix, size: cp.size })\n              .appendTo(cell);\n            cell.append(suffices[i] || \" \");\n            this.init_edit_field(childcol, input);\n            if (!first) first = input;\n          }\n          input = first;  // set focus to the first of this composite fields\n        }\n        else if (colprop.type == 'select') {\n          input = $('<select>')\n            .addClass('ff_'+col)\n            .attr({ 'name': '_'+col+name_suffix, id: input_id })\n            .appendTo(cell);\n\n          var options = input.attr('options');\n          options[options.length] = new Option('---', '');\n          if (colprop.options)\n            $.each(colprop.options, function(i, val){ options[options.length] = new Option(val, i); });\n        }\n\n        if (input) {\n          var delbutton = $('<a href=\"#del\"></a>')\n            .addClass('contactfieldbutton deletebutton')\n            .attr({title: this.get_label('delete'), rel: col})\n            .html(this.env.delbutton)\n            .click(function(){ ref.delete_edit_field(this); return false })\n            .appendTo(cell);\n\n          row.append(label).append(cell).appendTo(appendcontainer.show());\n          input.first().focus();\n\n          // disable option if limit reached\n          if (!colprop.count) colprop.count = 0;\n          if (++colprop.count == colprop.limit && colprop.limit)\n            $(menu).children('option[value=\"'+col+'\"]').prop('disabled', true);\n        }\n      }\n    }\n  };\n\n  this.delete_edit_field = function(elem)\n  {\n    var col = $(elem).attr('rel'),\n      colprop = this.env.coltypes[col],\n      fieldset = $(elem).parents('fieldset.contactfieldgroup'),\n      addmenu = fieldset.parent().find('select.addfieldmenu');\n\n    // just clear input but don't hide the last field\n    if (--colprop.count <= 0 && colprop.visible)\n      $(elem).parent().children('input').val('').blur();\n    else {\n      $(elem).parents('div.row').remove();\n      // hide entire fieldset if no more rows\n      if (!fieldset.children('div.row').length)\n        fieldset.hide();\n    }\n\n    // enable option in add-field selector or insert it if necessary\n    if (addmenu.length) {\n      var option = addmenu.children('option[value=\"'+col+'\"]');\n      if (option.length)\n        option.prop('disabled', false);\n      else\n        option = $('<option>').attr('value', col).html(colprop.label).appendTo(addmenu);\n      addmenu.show();\n    }\n  };\n\n  this.upload_contact_photo = function(form)\n  {\n    if (form && form.elements._photo.value) {\n      this.async_upload_form(form, 'upload-photo', function(e) {\n        ref.set_busy(false, null, ref.file_upload_id);\n      });\n\n      // display upload indicator\n      this.file_upload_id = this.set_busy(true, 'uploading');\n    }\n  };\n\n  this.replace_contact_photo = function(id)\n  {\n    var img_src = id == '-del-' ? this.env.photo_placeholder :\n      this.env.comm_path + '&_action=photo&_source=' + this.env.source + '&_cid=' + (this.env.cid || 0) + '&_photo=' + id;\n\n    this.set_photo_actions(id);\n    $(this.gui_objects.contactphoto).children('img').attr('src', img_src);\n  };\n\n  this.photo_upload_end = function()\n  {\n    this.set_busy(false, null, this.file_upload_id);\n    delete this.file_upload_id;\n  };\n\n  this.set_photo_actions = function(id)\n  {\n    var n, buttons = this.buttons['upload-photo'];\n    for (n=0; buttons && n < buttons.length; n++)\n      $('a#'+buttons[n].id).html(this.get_label(id == '-del-' ? 'addphoto' : 'replacephoto'));\n\n    $('#ff_photo').val(id);\n    this.enable_command('upload-photo', this.env.coltypes.photo ? true : false);\n    this.enable_command('delete-photo', this.env.coltypes.photo && id != '-del-');\n  };\n\n  // load advanced search page\n  this.advanced_search = function()\n  {\n    var win, url = {_form: 1, _action: 'search'}, target = window;\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      url._framed = 1;\n      target = win;\n      this.contact_list.clear_selection();\n    }\n\n    this.location_href(url, target, true);\n\n    return true;\n  };\n\n  // unselect directory/group\n  this.unselect_directory = function()\n  {\n    this.select_folder('');\n    this.enable_command('search-delete', false);\n  };\n\n  // callback for creating a new saved search record\n  this.insert_saved_search = function(name, id)\n  {\n    var key = 'S'+id,\n      link = $('<a>').attr('href', '#')\n        .attr('rel', id)\n        .click(function() { return ref.command('listsearch', id, this); })\n        .html(name),\n      prop = { name:name, id:id };\n\n    this.savedsearchlist.insert({ id:key, html:link, classes:['contactsearch'] }, null, 'contactsearch');\n    this.select_folder(key,'',true);\n    this.enable_command('search-delete', true);\n    this.env.search_id = id;\n\n    this.triggerEvent('abook_search_insert', prop);\n  };\n\n  // creates a dialog for saved search\n  this.search_create = function()\n  {\n    var input = $('<input>').attr('type', 'text'),\n      content = $('<label>').text(this.get_label('namex')).append(input);\n\n    this.show_popup_dialog(content, this.get_label('searchsave'),\n      [{\n        text: this.get_label('save'),\n        'class': 'mainaction',\n        click: function() {\n          var name;\n\n          if (name = input.val()) {\n            ref.http_post('search-create', {_search: ref.env.search_request, _name: name},\n              ref.set_busy(true, 'loading'));\n          }\n\n          $(this).dialog('close');\n        }\n      }]\n    );\n  };\n\n  this.search_delete = function()\n  {\n    if (this.env.search_request) {\n      var lock = this.set_busy(true, 'savedsearchdeleting');\n      this.http_post('search-delete', {_sid: this.env.search_id}, lock);\n    }\n  };\n\n  // callback from server upon search-delete command\n  this.remove_search_item = function(id)\n  {\n    var li, key = 'S'+id;\n    if (this.savedsearchlist.remove(key)) {\n      this.triggerEvent('search_delete', { id:id, li:li });\n    }\n\n    this.env.search_id = null;\n    this.env.search_request = null;\n    this.list_contacts_clear();\n    this.reset_qsearch();\n    this.enable_command('search-delete', 'search-create', false);\n  };\n\n  this.listsearch = function(id)\n  {\n    var lock = this.set_busy(true, 'searching');\n\n    if (this.contact_list) {\n      this.list_contacts_clear();\n    }\n\n    this.reset_qsearch();\n\n    if (this.savedsearchlist) {\n      this.treelist.select('');\n      this.savedsearchlist.select('S'+id);\n    }\n    else\n      this.select_folder('S'+id, '', true);\n\n    // reset vars\n    this.env.current_page = 1;\n    this.http_request('search', {_sid: id}, lock);\n  };\n\n\n  /*********************************************************/\n  /*********        user settings methods          *********/\n  /*********************************************************/\n\n  // preferences section select and load options frame\n  this.section_select = function(list)\n  {\n    var win, id = list.get_single_selection(), target = window,\n      url = {_action: 'edit-prefs', _section: id};\n\n    if (id) {\n      if (win = this.get_frame_window(this.env.contentframe)) {\n        url._framed = 1;\n        target = win;\n      }\n      this.location_href(url, target, true);\n    }\n\n    return true;\n  };\n\n  this.identity_select = function(list)\n  {\n    var id;\n    if (id = list.get_single_selection()) {\n      this.enable_command('delete', list.rowcount > 1 && this.env.identities_level < 2);\n      this.load_identity(id, 'edit-identity');\n    }\n  };\n\n  // load identity record\n  this.load_identity = function(id, action)\n  {\n    if (action == 'edit-identity' && (!id || id == this.env.iid))\n      return false;\n\n    var win, target = window,\n      url = {_action: action, _iid: id};\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      url._framed = 1;\n      target = win;\n    }\n\n    if (id || action == 'add-identity') {\n      this.location_href(url, target, true);\n    }\n\n    return true;\n  };\n\n  this.delete_identity = function(id)\n  {\n    // exit if no identity is specified or if selection is empty\n    var selection = this.identity_list.get_selection();\n    if (!(selection.length || this.env.iid))\n      return;\n\n    if (!id)\n      id = this.env.iid ? this.env.iid : selection[0];\n\n    // submit request with appended token\n    if (id && confirm(this.get_label('deleteidentityconfirm')))\n      this.http_post('settings/delete-identity', { _iid: id }, true);\n  };\n\n  this.update_identity_row = function(id, name, add)\n  {\n    var list = this.identity_list,\n      rid = this.html_identifier(id);\n\n    if (add) {\n      list.insert_row({ id:'rcmrow'+rid, cols:[ { className:'mail', innerHTML:name } ] });\n      list.select(rid);\n    }\n    else {\n      list.update_row(rid, [ name ]);\n    }\n  };\n\n  this.update_response_row = function(response, oldkey)\n  {\n    var list = this.responses_list;\n\n    if (list && oldkey) {\n      list.update_row(oldkey, [ response.name ], response.key, true);\n    }\n    else if (list) {\n      list.insert_row({ id:'rcmrow'+response.key, cols:[ { className:'name', innerHTML:response.name } ] });\n      list.select(response.key);\n    }\n  };\n\n  this.remove_response = function(key)\n  {\n    var frame;\n\n    if (this.env.textresponses) {\n      delete this.env.textresponses[key];\n    }\n\n    if (this.responses_list) {\n      this.responses_list.remove_row(key);\n      if (this.env.contentframe && (frame = this.get_frame_window(this.env.contentframe))) {\n        frame.location.href = this.env.blankpage;\n      }\n    }\n\n    this.enable_command('delete', false);\n  };\n\n  this.remove_identity = function(id)\n  {\n    var frame, list = this.identity_list,\n      rid = this.html_identifier(id);\n\n    if (list && id) {\n      list.remove_row(rid);\n      if (this.env.contentframe && (frame = this.get_frame_window(this.env.contentframe))) {\n        frame.location.href = this.env.blankpage;\n      }\n    }\n\n    this.enable_command('delete', false);\n  };\n\n\n  /*********************************************************/\n  /*********        folder manager methods         *********/\n  /*********************************************************/\n\n  this.init_subscription_list = function()\n  {\n    var delim = RegExp.escape(this.env.delimiter);\n\n    this.last_sub_rx = RegExp('['+delim+']?[^'+delim+']+$');\n\n    this.subscription_list = new rcube_treelist_widget(this.gui_objects.subscriptionlist, {\n        selectable: true,\n        tabexit: false,\n        parent_focus: true,\n        id_prefix: 'rcmli',\n        id_encode: this.html_identifier_encode,\n        id_decode: this.html_identifier_decode,\n        searchbox: '#foldersearch'\n    });\n\n    this.subscription_list\n      .addEventListener('select', function(node) { ref.subscription_select(node.id); })\n      .addEventListener('collapse', function(node) { ref.folder_collapsed(node) })\n      .addEventListener('expand', function(node) { ref.folder_collapsed(node) })\n      .addEventListener('search', function(p) { if (p.query) ref.subscription_select(); })\n      .draggable({cancel: 'li.mailbox.root'})\n      .droppable({\n        // @todo: find better way, accept callback is executed for every folder\n        // on the list when dragging starts (and stops), this is slow, but\n        // I didn't find a method to check droptarget on over event\n        accept: function(node) {\n          if (!$(node).is('.mailbox'))\n            return false;\n\n          var source_folder = ref.folder_id2name($(node).attr('id')),\n            dest_folder = ref.folder_id2name(this.id),\n            source = ref.env.subscriptionrows[source_folder],\n            dest = ref.env.subscriptionrows[dest_folder];\n\n          return source && !source[2]\n            && dest_folder != source_folder.replace(ref.last_sub_rx, '')\n            && !dest_folder.startsWith(source_folder + ref.env.delimiter);\n        },\n        drop: function(e, ui) {\n          var source = ref.folder_id2name(ui.draggable.attr('id')),\n            dest = ref.folder_id2name(this.id);\n\n          ref.subscription_move_folder(source, dest);\n        }\n      });\n  };\n\n  this.folder_id2name = function(id)\n  {\n    return id ? ref.html_identifier_decode(id.replace(/^rcmli/, '')) : null;\n  };\n\n  this.subscription_select = function(id)\n  {\n    var folder;\n\n    if (id && id != '*' && (folder = this.env.subscriptionrows[id])) {\n      this.env.mailbox = id;\n      this.show_folder(id);\n      this.enable_command('delete-folder', !folder[2]);\n    }\n    else {\n      this.env.mailbox = null;\n      this.show_contentframe(false);\n      this.enable_command('delete-folder', 'purge', false);\n    }\n  };\n\n  this.subscription_move_folder = function(from, to)\n  {\n    if (from && to !== null && from != to && to != from.replace(this.last_sub_rx, '')) {\n      var path = from.split(this.env.delimiter),\n        basename = path.pop(),\n        newname = to === '' || to === '*' ? basename : to + this.env.delimiter + basename;\n\n      if (newname != from) {\n        this.http_post('rename-folder', {_folder_oldname: from, _folder_newname: newname},\n          this.set_busy(true, 'foldermoving'));\n      }\n    }\n  };\n\n  // tell server to create and subscribe a new mailbox\n  this.create_folder = function()\n  {\n    this.show_folder('', this.env.mailbox);\n  };\n\n  // delete a specific mailbox with all its messages\n  this.delete_folder = function(name)\n  {\n    if (!name)\n      name = this.env.mailbox;\n\n    if (name && confirm(this.get_label('deletefolderconfirm'))) {\n      this.http_post('delete-folder', {_mbox: name}, this.set_busy(true, 'folderdeleting'));\n    }\n  };\n\n  // Add folder row to the table and initialize it\n  this.add_folder_row = function (id, name, display_name, is_protected, subscribed, class_name, refrow, subfolders)\n  {\n    if (!this.gui_objects.subscriptionlist)\n      return false;\n\n    // reset searching\n    if (this.subscription_list.is_search()) {\n      this.subscription_select();\n      this.subscription_list.reset_search();\n    }\n\n    // disable drag-n-drop temporarily\n    this.subscription_list.draggable('destroy').droppable('destroy');\n\n    var row, n, tmp, tmp_name, rowid, collator, pos, p, parent = '',\n      folders = [], list = [], slist = [],\n      list_element = $(this.gui_objects.subscriptionlist);\n      row = refrow ? refrow : $($('li', list_element).get(1)).clone(true);\n\n    if (!row.length) {\n      // Refresh page if we don't have a table row to clone\n      this.goto_url('folders');\n      return false;\n    }\n\n    // set ID, reset css class\n    row.attr({id: 'rcmli' + this.html_identifier_encode(id), 'class': class_name});\n\n    if (!refrow || !refrow.length) {\n      // remove old data, subfolders and toggle\n      $('ul,div.treetoggle', row).remove();\n      row.removeData('filtered');\n    }\n\n    // set folder name\n    $('a:first', row).text(display_name);\n\n    // update subscription checkbox\n    $('input[name=\"_subscribed[]\"]:first', row).val(id)\n      .prop({checked: subscribed ? true : false, disabled: is_protected ? true : false});\n\n    // add to folder/row-ID map\n    this.env.subscriptionrows[id] = [name, display_name, false];\n\n    // copy folders data to an array for sorting\n    $.each(this.env.subscriptionrows, function(k, v) { v[3] = k; folders.push(v); });\n\n    try {\n      // use collator if supported (FF29, IE11, Opera15, Chrome24)\n      collator = new Intl.Collator(this.env.locale.replace('_', '-'));\n    }\n    catch (e) {};\n\n    // sort folders\n    folders.sort(function(a, b) {\n      var i, f1, f2,\n        path1 = a[0].split(ref.env.delimiter),\n        path2 = b[0].split(ref.env.delimiter),\n        len = path1.length;\n\n      for (i=0; i<len; i++) {\n        f1 = path1[i];\n        f2 = path2[i];\n\n        if (f1 !== f2) {\n          if (f2 === undefined)\n            return 1;\n          if (collator)\n            return collator.compare(f1, f2);\n          else\n            return f1 < f2 ? -1 : 1;\n        }\n        else if (i == len-1) {\n          return -1\n        }\n      }\n    });\n\n    for (n in folders) {\n      p = folders[n][3];\n      // protected folder\n      if (folders[n][2]) {\n        tmp_name = p + this.env.delimiter;\n        // prefix namespace cannot have subfolders (#1488349)\n        if (tmp_name == this.env.prefix_ns)\n          continue;\n        slist.push(p);\n        tmp = tmp_name;\n      }\n      // protected folder's child\n      else if (tmp && p.startsWith(tmp))\n        slist.push(p);\n      // other\n      else {\n        list.push(p);\n        tmp = null;\n      }\n    }\n\n    // check if subfolder of a protected folder\n    for (n=0; n<slist.length; n++) {\n      if (id.startsWith(slist[n] + this.env.delimiter))\n        rowid = slist[n];\n    }\n\n    // find folder position after sorting\n    for (n=0; !rowid && n<list.length; n++) {\n      if (n && list[n] == id)\n        rowid = list[n-1];\n    }\n\n    // add row to the table\n    if (rowid && (n = this.subscription_list.get_item(rowid, true))) {\n      // find parent folder\n      if (pos = id.lastIndexOf(this.env.delimiter)) {\n        parent = id.substring(0, pos);\n        parent = this.subscription_list.get_item(parent, true);\n\n        // add required tree elements to the parent if not already there\n        if (!$('div.treetoggle', parent).length) {\n          $('<div>&nbsp;</div>').addClass('treetoggle collapsed').appendTo(parent);\n        }\n        if (!$('ul', parent).length) {\n          $('<ul>').css('display', 'none').appendTo(parent);\n        }\n      }\n\n      if (parent && n == parent) {\n        $('ul:first', parent).append(row);\n      }\n      else {\n        while (p = $(n).parent().parent().get(0)) {\n          if (parent && p == parent)\n            break;\n          if (!$(p).is('li.mailbox'))\n            break;\n          n = p;\n        }\n\n        $(n).after(row);\n      }\n    }\n    else {\n      list_element.append(row);\n    }\n\n    // add subfolders\n    $.extend(this.env.subscriptionrows, subfolders || {});\n\n    // update list widget\n    this.subscription_list.reset(true);\n    this.subscription_select();\n\n    // expand parent\n    if (parent) {\n      this.subscription_list.expand(this.folder_id2name(parent.id));\n    }\n\n    row = row.show().get(0);\n    if (row.scrollIntoView)\n      row.scrollIntoView();\n\n    return row;\n  };\n\n  // replace an existing table row with a new folder line (with subfolders)\n  this.replace_folder_row = function(oldid, id, name, display_name, is_protected, class_name)\n  {\n    if (!this.gui_objects.subscriptionlist) {\n      if (this.is_framed()) {\n        // @FIXME: for some reason this 'parent' variable need to be prefixed with 'window.'\n        return window.parent.rcmail.replace_folder_row(oldid, id, name, display_name, is_protected, class_name);\n      }\n\n      return false;\n    }\n\n    // reset searching\n    if (this.subscription_list.is_search()) {\n      this.subscription_select();\n      this.subscription_list.reset_search();\n    }\n\n    var subfolders = {},\n      row = this.subscription_list.get_item(oldid, true),\n      parent = $(row).parent(),\n      old_folder = this.env.subscriptionrows[oldid],\n      prefix_len_id = oldid.length,\n      prefix_len_name = old_folder[0].length,\n      subscribed = $('input[name=\"_subscribed[]\"]:first', row).prop('checked');\n\n    // no renaming, only update class_name\n    if (oldid == id) {\n      $(row).attr('class', class_name || '');\n      return;\n    }\n\n    // update subfolders\n    $('li', row).each(function() {\n      var fname = ref.folder_id2name(this.id),\n        folder = ref.env.subscriptionrows[fname],\n        newid = id + fname.slice(prefix_len_id);\n\n      this.id = 'rcmli' + ref.html_identifier_encode(newid);\n      $('input[name=\"_subscribed[]\"]:first', this).val(newid);\n      folder[0] = name + folder[0].slice(prefix_len_name);\n\n      subfolders[newid] = folder;\n      delete ref.env.subscriptionrows[fname];\n    });\n\n    // get row off the list\n    row = $(row).detach();\n\n    delete this.env.subscriptionrows[oldid];\n\n    // remove parent list/toggle elements if not needed\n    if (parent.get(0) != this.gui_objects.subscriptionlist && !$('li', parent).length) {\n      $('ul,div.treetoggle', parent.parent()).remove();\n    }\n\n    // move the existing table row\n    this.add_folder_row(id, name, display_name, is_protected, subscribed, class_name, row, subfolders);\n  };\n\n  // remove the table row of a specific mailbox from the table\n  this.remove_folder_row = function(folder)\n  {\n    // reset searching\n    if (this.subscription_list.is_search()) {\n      this.subscription_select();\n      this.subscription_list.reset_search();\n    }\n\n    var list = [], row = this.subscription_list.get_item(folder, true);\n\n    // get subfolders if any\n    $('li', row).each(function() { list.push(ref.folder_id2name(this.id)); });\n\n    // remove folder row (and subfolders)\n    this.subscription_list.remove(folder);\n\n    // update local list variable\n    list.push(folder);\n    $.each(list, function(i, v) { delete ref.env.subscriptionrows[v]; });\n  };\n\n  this.subscribe = function(folder)\n  {\n    if (folder) {\n      var lock = this.display_message(this.get_label('foldersubscribing'), 'loading');\n      this.http_post('subscribe', {_mbox: folder}, lock);\n    }\n  };\n\n  this.unsubscribe = function(folder)\n  {\n    if (folder) {\n      var lock = this.display_message(this.get_label('folderunsubscribing'), 'loading');\n      this.http_post('unsubscribe', {_mbox: folder}, lock);\n    }\n  };\n\n  // when user select a folder in manager\n  this.show_folder = function(folder, path, force)\n  {\n    var win, target = window,\n      url = '&_action=edit-folder&_mbox='+urlencode(folder);\n\n    if (path)\n      url += '&_path='+urlencode(path);\n\n    if (win = this.get_frame_window(this.env.contentframe)) {\n      target = win;\n      url += '&_framed=1';\n    }\n\n    if (String(target.location.href).indexOf(url) >= 0 && !force)\n      this.show_contentframe(true);\n    else\n      this.location_href(this.env.comm_path+url, target, true);\n  };\n\n  // disables subscription checkbox (for protected folder)\n  this.disable_subscription = function(folder)\n  {\n    var row = this.subscription_list.get_item(folder, true);\n    if (row)\n      $('input[name=\"_subscribed[]\"]:first', row).prop('disabled', true);\n  };\n\n  this.folder_size = function(folder)\n  {\n    var lock = this.set_busy(true, 'loading');\n    this.http_post('folder-size', {_mbox: folder}, lock);\n  };\n\n  this.folder_size_update = function(size)\n  {\n    $('#folder-size').replaceWith(size);\n  };\n\n  // filter folders by namespace\n  this.folder_filter = function(prefix)\n  {\n    this.subscription_list.reset_search();\n\n    this.subscription_list.container.children('li').each(function() {\n      var i, folder = ref.folder_id2name(this.id);\n      // show all folders\n      if (prefix == '---') {\n      }\n      // got namespace prefix\n      else if (prefix) {\n        if (folder !== prefix) {\n          $(this).data('filtered', true).hide();\n          return\n        }\n      }\n      // no namespace prefix, filter out all other namespaces\n      else {\n        // first get all namespace roots\n        for (i in ref.env.ns_roots) {\n          if (folder === ref.env.ns_roots[i]) {\n            $(this).data('filtered', true).hide();\n            return;\n          }\n        }\n      }\n\n      $(this).removeData('filtered').show();\n    });\n  };\n\n  /*********************************************************/\n  /*********           GUI functionality           *********/\n  /*********************************************************/\n\n  var init_button = function(cmd, prop)\n  {\n    var elm = document.getElementById(prop.id);\n    if (!elm)\n      return;\n\n    var preload = false;\n    if (prop.type == 'image') {\n      elm = elm.parentNode;\n      preload = true;\n    }\n\n    elm._command = cmd;\n    elm._id = prop.id;\n    if (prop.sel) {\n      elm.onmousedown = function(e) { return ref.button_sel(this._command, this._id); };\n      elm.onmouseup = function(e) { return ref.button_out(this._command, this._id); };\n      if (preload)\n        new Image().src = prop.sel;\n    }\n    if (prop.over) {\n      elm.onmouseover = function(e) { return ref.button_over(this._command, this._id); };\n      elm.onmouseout = function(e) { return ref.button_out(this._command, this._id); };\n      if (preload)\n        new Image().src = prop.over;\n    }\n  };\n\n  // set event handlers on registered buttons\n  this.init_buttons = function()\n  {\n    for (var cmd in this.buttons) {\n      if (typeof cmd !== 'string')\n        continue;\n\n      for (var i=0; i<this.buttons[cmd].length; i++) {\n        init_button(cmd, this.buttons[cmd][i]);\n      }\n    }\n  };\n\n  // set button to a specific state\n  this.set_button = function(command, state)\n  {\n    var n, button, obj, $obj, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      obj = document.getElementById(button.id);\n\n      if (!obj || button.status === state)\n        continue;\n\n      // get default/passive setting of the button\n      if (button.type == 'image' && !button.status) {\n        button.pas = obj._original_src ? obj._original_src : obj.src;\n        // respect PNG fix on IE browsers\n        if (obj.runtimeStyle && obj.runtimeStyle.filter && obj.runtimeStyle.filter.match(/src=['\"]([^'\"]+)['\"]/))\n          button.pas = RegExp.$1;\n      }\n      else if (!button.status)\n        button.pas = String(obj.className);\n\n      button.status = state;\n\n      // set image according to button state\n      if (button.type == 'image' && button[state]) {\n        obj.src = button[state];\n      }\n      // set class name according to button state\n      else if (button[state] !== undefined) {\n        obj.className = button[state];\n      }\n      // disable/enable input buttons\n      if (button.type == 'input') {\n        obj.disabled = state == 'pas';\n      }\n      else if (button.type == 'uibutton') {\n        button.status = state;\n        $(obj).button('option', 'disabled', state == 'pas');\n      }\n      else {\n        $obj = $(obj);\n        $obj\n          .attr('tabindex', state == 'pas' || state == 'sel' ? '-1' : ($obj.attr('data-tabindex') || '0'))\n          .attr('aria-disabled', state == 'pas' || state == 'sel' ? 'true' : 'false');\n      }\n    }\n  };\n\n  // display a specific alttext\n  this.set_alttext = function(command, label)\n  {\n    var n, button, obj, link, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      obj = document.getElementById(button.id);\n\n      if (button.type == 'image' && obj) {\n        obj.setAttribute('alt', this.get_label(label));\n        if ((link = obj.parentNode) && link.tagName.toLowerCase() == 'a')\n          link.setAttribute('title', this.get_label(label));\n      }\n      else if (obj)\n        obj.setAttribute('title', this.get_label(label));\n    }\n  };\n\n  // mouse over button\n  this.button_over = function(command, id)\n  {\n    this.button_event(command, id, 'over');\n  };\n\n  // mouse down on button\n  this.button_sel = function(command, id)\n  {\n    this.button_event(command, id, 'sel');\n  };\n\n  // mouse out of button\n  this.button_out = function(command, id)\n  {\n    this.button_event(command, id, 'act');\n  };\n\n  // event of button\n  this.button_event = function(command, id, event)\n  {\n    var n, button, obj, a_buttons = this.buttons[command],\n      len = a_buttons ? a_buttons.length : 0;\n\n    for (n=0; n<len; n++) {\n      button = a_buttons[n];\n      if (button.id == id && button.status == 'act') {\n        if (button[event] && (obj = document.getElementById(button.id))) {\n          obj[button.type == 'image' ? 'src' : 'className'] = button[event];\n        }\n\n        if (event == 'sel') {\n          this.buttons_sel[id] = command;\n        }\n      }\n    }\n  };\n\n  // write to the document/window title\n  this.set_pagetitle = function(title)\n  {\n    if (title && document.title)\n      document.title = title;\n  };\n\n  // display a system message, list of types in common.css (below #message definition)\n  this.display_message = function(msg, type, timeout, key)\n  {\n    // pass command to parent window\n    if (this.is_framed())\n      return parent.rcmail.display_message(msg, type, timeout);\n\n    if (!this.gui_objects.message) {\n      // save message in order to display after page loaded\n      if (type != 'loading')\n        this.pending_message = [msg, type, timeout, key];\n      return 1;\n    }\n\n    if (!type)\n      type = 'notice';\n\n    if (!key)\n      key = this.html_identifier(msg);\n\n    var date = new Date(),\n      id = type + date.getTime();\n\n    if (!timeout) {\n      switch (type) {\n        case 'error':\n        case 'warning':\n          timeout = this.message_time * 2;\n          break;\n\n        case 'uploading':\n          timeout = 0;\n          break;\n\n        default:\n          timeout = this.message_time;\n      }\n    }\n\n    if (type == 'loading') {\n      key = 'loading';\n      timeout = this.env.request_timeout * 1000;\n      if (!msg)\n        msg = this.get_label('loading');\n    }\n\n    // The same message is already displayed\n    if (this.messages[key]) {\n      // replace label\n      if (this.messages[key].obj)\n        this.messages[key].obj.html(msg);\n      // store label in stack\n      if (type == 'loading') {\n        this.messages[key].labels.push({'id': id, 'msg': msg});\n      }\n      // add element and set timeout\n      this.messages[key].elements.push(id);\n      setTimeout(function() { ref.hide_message(id, type == 'loading'); }, timeout);\n      return id;\n    }\n\n    // create DOM object and display it\n    var obj = $('<div>').addClass(type).html(msg).data('key', key),\n      cont = $(this.gui_objects.message).append(obj).show();\n\n    this.messages[key] = {'obj': obj, 'elements': [id]};\n\n    if (type == 'loading') {\n      this.messages[key].labels = [{'id': id, 'msg': msg}];\n    }\n    else if (type != 'uploading') {\n      obj.click(function() { return ref.hide_message(obj); })\n        .attr('role', 'alert');\n    }\n\n    this.triggerEvent('message', { message:msg, type:type, timeout:timeout, object:obj });\n\n    if (timeout > 0)\n      setTimeout(function() { ref.hide_message(id, type != 'loading'); }, timeout);\n\n    return id;\n  };\n\n  // make a message to disapear\n  this.hide_message = function(obj, fade)\n  {\n    // pass command to parent window\n    if (this.is_framed())\n      return parent.rcmail.hide_message(obj, fade);\n\n    if (!this.gui_objects.message)\n      return;\n\n    var k, n, i, o, m = this.messages;\n\n    // Hide message by object, don't use for 'loading'!\n    if (typeof obj === 'object') {\n      o = $(obj);\n      k = o.data('key');\n      this.hide_message_object(o, fade);\n      if (m[k])\n        delete m[k];\n    }\n    // Hide message by id\n    else {\n      for (k in m) {\n        for (n in m[k].elements) {\n          if (m[k] && m[k].elements[n] == obj) {\n            m[k].elements.splice(n, 1);\n            // hide DOM element if last instance is removed\n            if (!m[k].elements.length) {\n              this.hide_message_object(m[k].obj, fade);\n              delete m[k];\n            }\n            // set pending action label for 'loading' message\n            else if (k == 'loading') {\n              for (i in m[k].labels) {\n                if (m[k].labels[i].id == obj) {\n                  delete m[k].labels[i];\n                }\n                else {\n                  o = m[k].labels[i].msg;\n                  m[k].obj.html(o);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  // hide message object and remove from the DOM\n  this.hide_message_object = function(o, fade)\n  {\n    if (fade)\n      o.fadeOut(600, function() {$(this).remove(); });\n    else\n      o.hide().remove();\n  };\n\n  // remove all messages immediately\n  this.clear_messages = function()\n  {\n    // pass command to parent window\n    if (this.is_framed())\n      return parent.rcmail.clear_messages();\n\n    var k, n, m = this.messages;\n\n    for (k in m)\n      for (n in m[k].elements)\n        if (m[k].obj)\n          this.hide_message_object(m[k].obj);\n\n    this.messages = {};\n  };\n\n  // display uploading message with progress indicator\n  // data should contain: name, total, current, percent, text\n  this.display_progress = function(data)\n  {\n    if (!data || !data.name)\n      return;\n\n    var msg = this.messages['progress' + data.name];\n\n    if (!data.label)\n      data.label = this.get_label('uploadingmany');\n\n    if (!msg) {\n      if (!data.percent || data.percent < 100)\n        this.display_message(data.label, 'uploading', 0, 'progress' + data.name);\n      return;\n    }\n\n    if (!data.total || data.percent >= 100) {\n      this.hide_message(msg.obj);\n      return;\n    }\n\n    if (data.text)\n      data.label += ' ' + data.text;\n\n    msg.obj.text(data.label);\n  };\n\n  // open a jquery UI dialog with the given content\n  this.show_popup_dialog = function(content, title, buttons, options)\n  {\n    // forward call to parent window\n    if (this.is_framed()) {\n      return parent.rcmail.show_popup_dialog(content, title, buttons, options);\n    }\n\n    var popup = $('<div class=\"popup\">');\n\n    if (typeof content == 'object')\n      popup.append(content);\n    else\n      popup.html(content);\n\n    options = $.extend({\n        title: title,\n        buttons: buttons,\n        modal: true,\n        resizable: true,\n        width: 500,\n        close: function(event, ui) { $(this).remove(); }\n      }, options || {});\n\n    popup.dialog(options);\n\n    // resize and center popup\n    var win = $(window), w = win.width(), h = win.height(),\n      width = popup.width(), height = popup.height();\n\n    popup.dialog('option', {\n      height: Math.min(h - 40, height + 75 + (buttons ? 50 : 0)),\n      width: Math.min(w - 20, width + 36)\n    });\n\n    // assign special classes to dialog buttons\n    $.each(options.button_classes || [], function(i, v) {\n      if (v) $($('.ui-dialog-buttonpane button.ui-button', popup.parent()).get(i)).addClass(v);\n    });\n\n    return popup;\n  };\n\n  // enable/disable buttons for page shifting\n  this.set_page_buttons = function()\n  {\n    this.enable_command('nextpage', 'lastpage', this.env.pagecount > this.env.current_page);\n    this.enable_command('previouspage', 'firstpage', this.env.current_page > 1);\n\n    this.update_pagejumper();\n  };\n\n  // mark a mailbox as selected and set environment variable\n  this.select_folder = function(name, prefix, encode)\n  {\n    if (this.savedsearchlist) {\n      this.savedsearchlist.select('');\n    }\n\n    if (this.treelist) {\n      this.treelist.select(name);\n    }\n    else if (this.gui_objects.folderlist) {\n      $('li.selected', this.gui_objects.folderlist).removeClass('selected');\n      $(this.get_folder_li(name, prefix, encode)).addClass('selected');\n\n      // trigger event hook\n      this.triggerEvent('selectfolder', { folder:name, prefix:prefix });\n    }\n  };\n\n  // adds a class to selected folder\n  this.mark_folder = function(name, class_name, prefix, encode)\n  {\n    $(this.get_folder_li(name, prefix, encode)).addClass(class_name);\n    this.triggerEvent('markfolder', {folder: name, mark: class_name, status: true});\n  };\n\n  // adds a class to selected folder\n  this.unmark_folder = function(name, class_name, prefix, encode)\n  {\n    $(this.get_folder_li(name, prefix, encode)).removeClass(class_name);\n    this.triggerEvent('markfolder', {folder: name, mark: class_name, status: false});\n  };\n\n  // helper method to find a folder list item\n  this.get_folder_li = function(name, prefix, encode)\n  {\n    if (!prefix)\n      prefix = 'rcmli';\n\n    if (this.gui_objects.folderlist) {\n      name = this.html_identifier(name, encode);\n      return document.getElementById(prefix+name);\n    }\n  };\n\n  // for reordering column array (Konqueror workaround)\n  // and for setting some message list global variables\n  this.set_message_coltypes = function(listcols, repl, smart_col)\n  {\n    var list = this.message_list,\n      thead = list ? list.thead : null,\n      repl, cell, col, n, len, tr;\n\n    this.env.listcols = listcols;\n\n    if (!this.env.coltypes)\n      this.env.coltypes = {};\n\n    // replace old column headers\n    if (thead) {\n      if (repl) {\n        thead.innerHTML = '';\n        tr = document.createElement('tr');\n\n        for (c=0, len=repl.length; c < len; c++) {\n          cell = document.createElement('th');\n          cell.innerHTML = repl[c].html || '';\n          if (repl[c].id) cell.id = repl[c].id;\n          if (repl[c].className) cell.className = repl[c].className;\n          tr.appendChild(cell);\n        }\n        thead.appendChild(tr);\n      }\n\n      for (n=0, len=this.env.listcols.length; n<len; n++) {\n        col = this.env.listcols[n];\n        if ((cell = thead.rows[0].cells[n]) && (col == 'from' || col == 'to' || col == 'fromto')) {\n          $(cell).attr('rel', col).find('span,a').text(this.get_label(col == 'fromto' ? smart_col : col));\n        }\n      }\n    }\n\n    this.env.subject_col = null;\n    this.env.flagged_col = null;\n    this.env.status_col = null;\n\n    if (this.env.coltypes.folder)\n      this.env.coltypes.folder.hidden = !(this.env.search_request || this.env.search_id) || this.env.search_scope == 'base';\n\n    if ((n = $.inArray('subject', this.env.listcols)) >= 0) {\n      this.env.subject_col = n;\n      if (list)\n        list.subject_col = n;\n    }\n    if ((n = $.inArray('flag', this.env.listcols)) >= 0)\n      this.env.flagged_col = n;\n    if ((n = $.inArray('status', this.env.listcols)) >= 0)\n      this.env.status_col = n;\n\n    if (list) {\n      list.hide_column('folder', (this.env.coltypes.folder && this.env.coltypes.folder.hidden) || $.inArray('folder', this.env.listcols) < 0);\n      list.init_header();\n    }\n  };\n\n  // replace content of row count display\n  this.set_rowcount = function(text, mbox)\n  {\n    // #1487752\n    if (mbox && mbox != this.env.mailbox)\n      return false;\n\n    $(this.gui_objects.countdisplay).html(text);\n\n    // update page navigation buttons\n    this.set_page_buttons();\n  };\n\n  // replace content of mailboxname display\n  this.set_mailboxname = function(content)\n  {\n    if (this.gui_objects.mailboxname && content)\n      this.gui_objects.mailboxname.innerHTML = content;\n  };\n\n  // replace content of quota display\n  this.set_quota = function(content)\n  {\n    if (this.gui_objects.quotadisplay && content && content.type == 'text')\n      $(this.gui_objects.quotadisplay).text((content.percent||0) + '%').attr('title', content.title);\n\n    this.triggerEvent('setquota', content);\n    this.env.quota_content = content;\n  };\n\n  // update trash folder state\n  this.set_trash_count = function(count)\n  {\n    this[(count ? 'un' : '') + 'mark_folder'](this.env.trash_mailbox, 'empty', '', true);\n  };\n\n  // update the mailboxlist\n  this.set_unread_count = function(mbox, count, set_title, mark)\n  {\n    if (!this.gui_objects.mailboxlist)\n      return false;\n\n    this.env.unread_counts[mbox] = count;\n    this.set_unread_count_display(mbox, set_title);\n\n    if (mark)\n      this.mark_folder(mbox, mark, '', true);\n    else if (!count)\n      this.unmark_folder(mbox, 'recent', '', true);\n  };\n\n  // update the mailbox count display\n  this.set_unread_count_display = function(mbox, set_title)\n  {\n    var reg, link, text_obj, item, mycount, childcount, div;\n\n    if (item = this.get_folder_li(mbox, '', true)) {\n      mycount = this.env.unread_counts[mbox] ? this.env.unread_counts[mbox] : 0;\n      link = $(item).children('a').eq(0);\n      text_obj = link.children('span.unreadcount');\n      if (!text_obj.length && mycount)\n        text_obj = $('<span>').addClass('unreadcount').appendTo(link);\n      reg = /\\s+\\([0-9]+\\)$/i;\n\n      childcount = 0;\n      if ((div = item.getElementsByTagName('div')[0]) &&\n          div.className.match(/collapsed/)) {\n        // add children's counters\n        for (var k in this.env.unread_counts)\n          if (k.startsWith(mbox + this.env.delimiter))\n            childcount += this.env.unread_counts[k];\n      }\n\n      if (mycount && text_obj.length)\n        text_obj.html(this.env.unreadwrap.replace(/%[sd]/, mycount));\n      else if (text_obj.length)\n        text_obj.remove();\n\n      // set parent's display\n      reg = new RegExp(RegExp.escape(this.env.delimiter) + '[^' + RegExp.escape(this.env.delimiter) + ']+$');\n      if (mbox.match(reg))\n        this.set_unread_count_display(mbox.replace(reg, ''), false);\n\n      // set the right classes\n      if ((mycount+childcount)>0)\n        $(item).addClass('unread');\n      else\n        $(item).removeClass('unread');\n    }\n\n    // set unread count to window title\n    reg = /^\\([0-9]+\\)\\s+/i;\n    if (set_title && document.title) {\n      var new_title = '',\n        doc_title = String(document.title);\n\n      if (mycount && doc_title.match(reg))\n        new_title = doc_title.replace(reg, '('+mycount+') ');\n      else if (mycount)\n        new_title = '('+mycount+') '+doc_title;\n      else\n        new_title = doc_title.replace(reg, '');\n\n      this.set_pagetitle(new_title);\n    }\n  };\n\n  // display fetched raw headers\n  this.set_headers = function(content)\n  {\n    if (this.gui_objects.all_headers_row && this.gui_objects.all_headers_box && content)\n      $(this.gui_objects.all_headers_box).html(content).show();\n  };\n\n  // display all-headers row and fetch raw message headers\n  this.show_headers = function(props, elem)\n  {\n    if (!this.gui_objects.all_headers_row || !this.gui_objects.all_headers_box || !this.env.uid)\n      return;\n\n    $(elem).removeClass('show-headers').addClass('hide-headers');\n    $(this.gui_objects.all_headers_row).show();\n    elem.onclick = function() { ref.command('hide-headers', '', elem); };\n\n    // fetch headers only once\n    if (!this.gui_objects.all_headers_box.innerHTML) {\n      this.http_post('headers', {_uid: this.env.uid, _mbox: this.env.mailbox},\n        this.display_message(this.get_label('loading'), 'loading')\n      );\n    }\n  };\n\n  // hide all-headers row\n  this.hide_headers = function(props, elem)\n  {\n    if (!this.gui_objects.all_headers_row || !this.gui_objects.all_headers_box)\n      return;\n\n    $(elem).removeClass('hide-headers').addClass('show-headers');\n    $(this.gui_objects.all_headers_row).hide();\n    elem.onclick = function() { ref.command('show-headers', '', elem); };\n  };\n\n  // create folder selector popup, position and display it\n  this.folder_selector = function(event, callback)\n  {\n    var container = this.folder_selector_element;\n\n    if (!container) {\n      var rows = [],\n        delim = this.env.delimiter,\n        ul = $('<ul class=\"toolbarmenu\">'),\n        link = document.createElement('a');\n\n      container = $('<div id=\"folder-selector\" class=\"popupmenu\"></div>');\n      link.href = '#';\n      link.className = 'icon';\n\n      // loop over sorted folders list\n      $.each(this.env.mailboxes_list, function() {\n        var n = 0, s = 0,\n          folder = ref.env.mailboxes[this],\n          id = folder.id,\n          a = $(link.cloneNode(false)),\n          row = $('<li>');\n\n        if (folder.virtual)\n          a.addClass('virtual').attr('aria-disabled', 'true').attr('tabindex', '-1');\n        else\n          a.addClass('active').data('id', folder.id);\n\n        if (folder['class'])\n          a.addClass(folder['class']);\n\n        // calculate/set indentation level\n        while ((s = id.indexOf(delim, s)) >= 0) {\n          n++; s++;\n        }\n        a.css('padding-left', n ? (n * 16) + 'px' : 0);\n\n        // add folder name element\n        a.append($('<span>').text(folder.name));\n\n        row.append(a);\n        rows.push(row);\n      });\n\n      ul.append(rows).appendTo(container);\n\n      // temporarily show element to calculate its size\n      container.css({left: '-1000px', top: '-1000px'})\n        .appendTo($('body')).show();\n\n      // set max-height if the list is long\n      if (rows.length > 10)\n        container.css('max-height', $('li', container)[0].offsetHeight * 10 + 9);\n\n      // register delegate event handler for folder item clicks\n      container.on('click', 'a.active', function(e){\n        container.data('callback')($(this).data('id'));\n        return false;\n      });\n\n      this.folder_selector_element = container;\n    }\n\n    container.data('callback', callback);\n\n    // position menu on the screen\n    this.show_menu('folder-selector', true, event);\n  };\n\n\n  /***********************************************/\n  /*********    popup menu functions     *********/\n  /***********************************************/\n\n  // Show/hide a specific popup menu\n  this.show_menu = function(prop, show, event)\n  {\n    var name = typeof prop == 'object' ? prop.menu : prop,\n      obj = $('#'+name),\n      ref = event && event.target ? $(event.target) : $(obj.attr('rel') || '#'+name+'link'),\n      keyboard = rcube_event.is_keyboard(event),\n      align = obj.attr('data-align') || '',\n      stack = false;\n\n    // find \"real\" button element\n    if (ref.get(0).tagName != 'A' && ref.closest('a').length)\n      ref = ref.closest('a');\n\n    if (typeof prop == 'string')\n      prop = { menu:name };\n\n    // let plugins or skins provide the menu element\n    if (!obj.length) {\n      obj = this.triggerEvent('menu-get', { name:name, props:prop, originalEvent:event });\n    }\n\n    if (!obj || !obj.length) {\n      // just delegate the action to subscribers\n      return this.triggerEvent(show === false ? 'menu-close' : 'menu-open', { name:name, props:prop, originalEvent:event });\n    }\n\n    // move element to top for proper absolute positioning\n    obj.appendTo(document.body);\n\n    if (typeof show == 'undefined')\n      show = obj.is(':visible') ? false : true;\n\n    if (show && ref.length) {\n      var win = $(window),\n        pos = ref.offset(),\n        above = align.indexOf('bottom') >= 0;\n\n      stack = ref.attr('role') == 'menuitem' || ref.closest('[role=menuitem]').length > 0;\n\n      ref.offsetWidth = ref.outerWidth();\n      ref.offsetHeight = ref.outerHeight();\n      if (!above && pos.top + ref.offsetHeight + obj.height() > win.height()) {\n        above = true;\n      }\n      if (align.indexOf('right') >= 0) {\n        pos.left = pos.left + ref.outerWidth() - obj.width();\n      }\n      else if (stack) {\n        pos.left = pos.left + ref.offsetWidth - 5;\n        pos.top -= ref.offsetHeight;\n      }\n      if (pos.left + obj.width() > win.width()) {\n        pos.left = win.width() - obj.width() - 12;\n      }\n      pos.top = Math.max(0, pos.top + (above ? -obj.height() : ref.offsetHeight));\n      obj.css({ left:pos.left+'px', top:pos.top+'px' });\n    }\n\n    // add menu to stack\n    if (show) {\n      // truncate stack down to the one containing the ref link\n      for (var i = this.menu_stack.length - 1; stack && i >= 0; i--) {\n        if (!$(ref).parents('#'+this.menu_stack[i]).length && $(event.target).parent().attr('role') != 'menuitem')\n          this.hide_menu(this.menu_stack[i], event);\n      }\n      if (stack && this.menu_stack.length) {\n        obj.data('parent', $.last(this.menu_stack));\n        obj.css('z-index', ($('#'+$.last(this.menu_stack)).css('z-index') || 0) + 1);\n      }\n      else if (!stack && this.menu_stack.length) {\n        this.hide_menu(this.menu_stack[0], event);\n      }\n\n      obj.show().attr('aria-hidden', 'false').data('opener', ref.attr('aria-expanded', 'true').get(0));\n      this.triggerEvent('menu-open', { name:name, obj:obj, props:prop, originalEvent:event });\n      this.menu_stack.push(name);\n\n      this.menu_keyboard_active = show && keyboard;\n      if (this.menu_keyboard_active) {\n        this.focused_menu = name;\n        obj.find('a,input:not(:disabled)').not('[aria-disabled=true]').first().focus();\n      }\n    }\n    else {  // close menu\n      this.hide_menu(name, event);\n    }\n\n    return show;\n  };\n\n  // hide the given popup menu (and it's childs)\n  this.hide_menu = function(name, event)\n  {\n    if (!this.menu_stack.length) {\n      // delegate to subscribers\n      this.triggerEvent('menu-close', { name:name, props:{ menu:name }, originalEvent:event });\n      return;\n    }\n\n    var obj, keyboard = rcube_event.is_keyboard(event);\n    for (var j=this.menu_stack.length-1; j >= 0; j--) {\n      obj = $('#' + this.menu_stack[j]).hide().attr('aria-hidden', 'true').data('parent', false);\n      this.triggerEvent('menu-close', { name:this.menu_stack[j], obj:obj, props:{ menu:this.menu_stack[j] }, originalEvent:event });\n      if (this.menu_stack[j] == name) {\n        j = -1;  // stop loop\n        if (obj.data('opener')) {\n          $(obj.data('opener')).attr('aria-expanded', 'false');\n          if (keyboard)\n            obj.data('opener').focus();\n        }\n      }\n      this.menu_stack.pop();\n    }\n\n    // focus previous menu in stack\n    if (this.menu_stack.length && keyboard) {\n      this.menu_keyboard_active = true;\n      this.focused_menu = $.last(this.menu_stack);\n      if (!obj || !obj.data('opener'))\n        $('#'+this.focused_menu).find('a,input:not(:disabled)').not('[aria-disabled=true]').first().focus();\n    }\n    else {\n      this.focused_menu = null;\n      this.menu_keyboard_active = false;\n    }\n  }\n\n\n  // position a menu element on the screen in relation to other object\n  this.element_position = function(element, obj)\n  {\n    var obj = $(obj), win = $(window),\n      width = obj.outerWidth(),\n      height = obj.outerHeight(),\n      menu_pos = obj.data('menu-pos'),\n      win_height = win.height(),\n      elem_height = $(element).height(),\n      elem_width = $(element).width(),\n      pos = obj.offset(),\n      top = pos.top,\n      left = pos.left + width;\n\n    if (menu_pos == 'bottom') {\n      top += height;\n      left -= width;\n    }\n    else\n      left -= 5;\n\n    if (top + elem_height > win_height) {\n      top -= elem_height - height;\n      if (top < 0)\n        top = Math.max(0, (win_height - elem_height) / 2);\n    }\n\n    if (left + elem_width > win.width())\n      left -= elem_width + width;\n\n    element.css({left: left + 'px', top: top + 'px'});\n  };\n\n  // initialize HTML editor\n  this.editor_init = function(config, id)\n  {\n    this.editor = new rcube_text_editor(config, id);\n  };\n\n\n  /********************************************************/\n  /*********  html to text conversion functions   *********/\n  /********************************************************/\n\n  this.html2plain = function(html, func)\n  {\n    return this.format_converter(html, 'html', func);\n  };\n\n  this.plain2html = function(plain, func)\n  {\n    return this.format_converter(plain, 'plain', func);\n  };\n\n  this.format_converter = function(text, format, func)\n  {\n    // warn the user (if converted content is not empty)\n    if (!text\n      || (format == 'html' && !(text.replace(/<[^>]+>|&nbsp;|\\xC2\\xA0|\\s/g, '')).length)\n      || (format != 'html' && !(text.replace(/\\xC2\\xA0|\\s/g, '')).length)\n    ) {\n      // without setTimeout() here, textarea is filled with initial (onload) content\n      if (func)\n        setTimeout(function() { func(''); }, 50);\n      return true;\n    }\n\n    var confirmed = this.env.editor_warned || confirm(this.get_label('editorwarning'));\n\n    this.env.editor_warned = true;\n\n    if (!confirmed)\n      return false;\n\n    var url = '?_task=utils&_action=' + (format == 'html' ? 'html2text' : 'text2html'),\n      lock = this.set_busy(true, 'converting');\n\n    this.log('HTTP POST: ' + url);\n\n    $.ajax({ type: 'POST', url: url, data: text, contentType: 'application/octet-stream',\n      error: function(o, status, err) { ref.http_error(o, status, err, lock); },\n      success: function(data) {\n        ref.set_busy(false, null, lock);\n        if (func) func(data);\n      }\n    });\n\n    return true;\n  };\n\n\n  /********************************************************/\n  /*********        remote request methods        *********/\n  /********************************************************/\n\n  // compose a valid url with the given parameters\n  this.url = function(action, query)\n  {\n    var querystring = typeof query === 'string' ? query : '';\n\n    if (typeof action !== 'string')\n      query = action;\n    else if (!query || typeof query !== 'object')\n      query = {};\n\n    if (action)\n      query._action = action;\n    else if (this.env.action)\n      query._action = this.env.action;\n\n    var url = this.env.comm_path, k, param = {};\n\n    // overwrite task name\n    if (action && action.match(/([a-z0-9_-]+)\\/([a-z0-9-_.]+)/)) {\n      query._action = RegExp.$2;\n      url = url.replace(/\\_task=[a-z0-9_-]+/, '_task=' + RegExp.$1);\n    }\n\n    // remove undefined values\n    for (k in query) {\n      if (query[k] !== undefined && query[k] !== null)\n        param[k] = query[k];\n    }\n\n    if (param = $.param(param))\n      url += (url.indexOf('?') > -1 ? '&' : '?') + param;\n\n    if (querystring)\n      url += (url.indexOf('?') > -1 ? '&' : '?') + querystring;\n\n    return url;\n  };\n\n  this.redirect = function(url, lock)\n  {\n    if (lock || lock === null)\n      this.set_busy(true);\n\n    if (this.is_framed()) {\n      parent.rcmail.redirect(url, lock);\n    }\n    else {\n      if (this.env.extwin) {\n        if (typeof url == 'string')\n          url += (url.indexOf('?') < 0 ? '?' : '&') + '_extwin=1';\n        else\n          url._extwin = 1;\n      }\n      this.location_href(url, window);\n    }\n  };\n\n  this.goto_url = function(action, query, lock, secure)\n  {\n    var url = this.url(action, query)\n    if (secure) url = this.secure_url(url);\n    this.redirect(url, lock);\n  };\n\n  this.location_href = function(url, target, frame)\n  {\n    if (frame)\n      this.lock_frame();\n\n    if (typeof url == 'object')\n      url = this.env.comm_path + '&' + $.param(url);\n\n    // simulate real link click to force IE to send referer header\n    if (bw.ie && target == window)\n      $('<a>').attr('href', url).appendTo(document.body).get(0).click();\n    else\n      target.location.href = url;\n\n    // reset keep-alive interval\n    this.start_keepalive();\n  };\n\n  // update browser location to remember current view\n  this.update_state = function(query)\n  {\n    if (window.history.replaceState)\n      window.history.replaceState({}, document.title, rcmail.url('', query));\n  };\n\n  // send a http request to the server\n  this.http_request = function(action, data, lock, type)\n  {\n    if (type != 'POST')\n      type = 'GET';\n\n    if (typeof data !== 'object')\n      data = rcube_parse_query(data);\n\n    data._remote = 1;\n    data._unlock = lock ? lock : 0;\n\n    // trigger plugin hook\n    var result = this.triggerEvent('request' + action, data);\n\n    // abort if one of the handlers returned false\n    if (result === false) {\n      if (data._unlock)\n        this.set_busy(false, null, data._unlock);\n      return false;\n    }\n    else if (result !== undefined) {\n      data = result;\n      if (data._action) {\n        action = data._action;\n        delete data._action;\n      }\n    }\n\n    var url = this.url(action);\n\n    // reset keep-alive interval\n    this.start_keepalive();\n\n    // send request\n    return $.ajax({\n      type: type, url: url, data: data, dataType: 'json',\n      success: function(data) { ref.http_response(data); },\n      error: function(o, status, err) { ref.http_error(o, status, err, lock, action); }\n    });\n  };\n\n  // send a http GET request to the server\n  this.http_get = this.http_request;\n\n  // send a http POST request to the server\n  this.http_post = function(action, data, lock)\n  {\n    return this.http_request(action, data, lock, 'POST');\n  };\n\n  // aborts ajax request\n  this.abort_request = function(r)\n  {\n    if (r.request)\n      r.request.abort();\n    if (r.lock)\n      this.set_busy(false, null, r.lock);\n  };\n\n  // handle HTTP response\n  this.http_response = function(response)\n  {\n    if (!response)\n      return;\n\n    if (response.unlock)\n      this.set_busy(false);\n\n    this.triggerEvent('responsebefore', {response: response});\n    this.triggerEvent('responsebefore'+response.action, {response: response});\n\n    // set env vars\n    if (response.env)\n      this.set_env(response.env);\n\n    // we have labels to add\n    if (typeof response.texts === 'object') {\n      for (var name in response.texts)\n        if (typeof response.texts[name] === 'string')\n          this.add_label(name, response.texts[name]);\n    }\n\n    // if we get javascript code from server -> execute it\n    if (response.exec) {\n      this.log(response.exec);\n      eval(response.exec);\n    }\n\n    // execute callback functions of plugins\n    if (response.callbacks && response.callbacks.length) {\n      for (var i=0; i < response.callbacks.length; i++)\n        this.triggerEvent(response.callbacks[i][0], response.callbacks[i][1]);\n    }\n\n    // process the response data according to the sent action\n    switch (response.action) {\n      case 'delete':\n        if (this.task == 'addressbook') {\n          var sid, uid = this.contact_list.get_selection(), writable = false;\n\n          if (uid && this.contact_list.rows[uid]) {\n            // search results, get source ID from record ID\n            if (this.env.source == '') {\n              sid = String(uid).replace(/^[^-]+-/, '');\n              writable = sid && this.env.address_sources[sid] && !this.env.address_sources[sid].readonly;\n            }\n            else {\n              writable = !this.env.address_sources[this.env.source].readonly;\n            }\n          }\n          this.enable_command('compose', (uid && this.contact_list.rows[uid]));\n          this.enable_command('delete', 'edit', writable);\n          this.enable_command('export', (this.contact_list && this.contact_list.rowcount > 0));\n          this.enable_command('export-selected', 'print', false);\n        }\n\n      case 'move':\n        if (this.env.action == 'show') {\n          // re-enable commands on move/delete error\n          this.enable_command(this.env.message_commands, true);\n          if (!this.env.list_post)\n            this.enable_command('reply-list', false);\n        }\n        else if (this.task == 'addressbook') {\n          this.triggerEvent('listupdate', { folder:this.env.source, rowcount:this.contact_list.rowcount });\n        }\n\n      case 'purge':\n      case 'expunge':\n        if (this.task == 'mail') {\n          if (!this.env.exists) {\n            // clear preview pane content\n            if (this.env.contentframe)\n              this.show_contentframe(false);\n            // disable commands useless when mailbox is empty\n            this.enable_command(this.env.message_commands, 'purge', 'expunge',\n              'select-all', 'select-none', 'expand-all', 'expand-unread', 'collapse-all', false);\n          }\n          if (this.message_list)\n            this.triggerEvent('listupdate', { folder:this.env.mailbox, rowcount:this.message_list.rowcount });\n        }\n        break;\n\n      case 'refresh':\n      case 'check-recent':\n        // update message flags\n        $.each(this.env.recent_flags || {}, function(uid, flags) {\n          ref.set_message(uid, 'deleted', flags.deleted);\n          ref.set_message(uid, 'replied', flags.answered);\n          ref.set_message(uid, 'unread', !flags.seen);\n          ref.set_message(uid, 'forwarded', flags.forwarded);\n          ref.set_message(uid, 'flagged', flags.flagged);\n        });\n        delete this.env.recent_flags;\n\n      case 'getunread':\n      case 'search':\n        this.env.qsearch = null;\n      case 'list':\n        if (this.task == 'mail') {\n          var is_multifolder = this.is_multifolder_listing(),\n            list = this.message_list,\n            uid = this.env.list_uid;\n\n          this.enable_command('show', 'select-all', 'select-none', this.env.messagecount > 0);\n          this.enable_command('expunge', this.env.exists && !is_multifolder);\n          this.enable_command('purge', this.purge_mailbox_test() && !is_multifolder);\n          this.enable_command('import-messages', !is_multifolder);\n          this.enable_command('expand-all', 'expand-unread', 'collapse-all', this.env.threading && this.env.messagecount && !is_multifolder);\n\n          if (list) {\n            if (response.action == 'list' || response.action == 'search') {\n              // highlight message row when we're back from message page\n              if (uid) {\n                if (!list.rows[uid])\n                  uid += '-' + this.env.mailbox;\n                if (list.rows[uid]) {\n                  list.select(uid);\n                }\n                delete this.env.list_uid;\n              }\n\n              this.enable_command('set-listmode', this.env.threads && !is_multifolder);\n              if (list.rowcount > 0 && !$(document.activeElement).is('input,textarea'))\n                list.focus();\n\n              // trigger 'select' so all dependent actions update its state\n              // e.g. plugins use this event to activate buttons (#1490647)\n              list.triggerEvent('select');\n            }\n\n            if (response.action != 'getunread')\n              this.triggerEvent('listupdate', { folder:this.env.mailbox, rowcount:list.rowcount });\n          }\n        }\n        else if (this.task == 'addressbook') {\n          this.enable_command('export', (this.contact_list && this.contact_list.rowcount > 0));\n\n          if (response.action == 'list' || response.action == 'search') {\n            this.enable_command('search-create', this.env.source == '');\n            this.enable_command('search-delete', this.env.search_id);\n            this.update_group_commands();\n            if (this.contact_list.rowcount > 0 && !$(document.activeElement).is('input,textarea'))\n              this.contact_list.focus();\n            this.triggerEvent('listupdate', { folder:this.env.source, rowcount:this.contact_list.rowcount });\n          }\n        }\n        break;\n\n      case 'list-contacts':\n      case 'search-contacts':\n        if (this.contact_list && this.contact_list.rowcount > 0)\n          this.contact_list.focus();\n        break;\n    }\n\n    if (response.unlock)\n      this.hide_message(response.unlock);\n\n    this.triggerEvent('responseafter', {response: response});\n    this.triggerEvent('responseafter'+response.action, {response: response});\n\n    // reset keep-alive interval\n    this.start_keepalive();\n  };\n\n  // handle HTTP request errors\n  this.http_error = function(request, status, err, lock, action)\n  {\n    var errmsg = request.statusText;\n\n    this.set_busy(false, null, lock);\n    request.abort();\n\n    // don't display error message on page unload (#1488547)\n    if (this.unload)\n      return;\n\n    if (request.status && errmsg)\n      this.display_message(this.get_label('servererror') + ' (' + errmsg + ')', 'error');\n    else if (status == 'timeout')\n      this.display_message(this.get_label('requesttimedout'), 'error');\n    else if (request.status == 0 && status != 'abort')\n      this.display_message(this.get_label('connerror'), 'error');\n\n    // redirect to url specified in location header if not empty\n    var location_url = request.getResponseHeader(\"Location\");\n    if (location_url && this.env.action != 'compose')  // don't redirect on compose screen, contents might get lost (#1488926)\n      this.redirect(location_url);\n\n    // 403 Forbidden response (CSRF prevention) - reload the page.\n    // In case there's a new valid session it will be used, otherwise\n    // login form will be presented (#1488960).\n    if (request.status == 403) {\n      (this.is_framed() ? parent : window).location.reload();\n      return;\n    }\n\n    // re-send keep-alive requests after 30 seconds\n    if (action == 'keep-alive')\n      setTimeout(function(){ ref.keep_alive(); ref.start_keepalive(); }, 30000);\n  };\n\n  // handler for session errors detected on the server\n  this.session_error = function(redirect_url)\n  {\n    this.env.server_error = 401;\n\n    // save message in local storage and do not redirect\n    if (this.env.action == 'compose') {\n      this.save_compose_form_local();\n      this.compose_skip_unsavedcheck = true;\n    }\n    else if (redirect_url) {\n      setTimeout(function(){ ref.redirect(redirect_url, true); }, 2000);\n    }\n  };\n\n  // callback when an iframe finished loading\n  this.iframe_loaded = function(unlock)\n  {\n    this.set_busy(false, null, unlock);\n\n    if (this.submit_timer)\n      clearTimeout(this.submit_timer);\n  };\n\n  /**\n   Send multi-threaded parallel HTTP requests to the server for a list if items.\n   The string '%' in either a GET query or POST parameters will be replaced with the respective item value.\n   This is the argument object expected: {\n       items: ['foo','bar','gna'],      // list of items to send requests for\n       action: 'task/some-action',      // Roudncube action to call\n       query: { q:'%s' },               // GET query parameters\n       postdata: { source:'%s' },       // POST data (sends a POST request if present)\n       threads: 3,                      // max. number of concurrent requests\n       onresponse: function(data){ },   // Callback function called for every response received from server\n       whendone: function(alldata){ }   // Callback function called when all requests have been sent\n   }\n  */\n  this.multi_thread_http_request = function(prop)\n  {\n    var i, item, reqid = new Date().getTime(),\n      threads = prop.threads || 1;\n\n    prop.reqid = reqid;\n    prop.running = 0;\n    prop.requests = [];\n    prop.result = [];\n    prop._items = $.extend([], prop.items);  // copy items\n\n    if (!prop.lock)\n      prop.lock = this.display_message(this.get_label('loading'), 'loading');\n\n    // add the request arguments to the jobs pool\n    this.http_request_jobs[reqid] = prop;\n\n    // start n threads\n    for (i=0; i < threads; i++) {\n      item = prop._items.shift();\n      if (item === undefined)\n        break;\n\n      prop.running++;\n      prop.requests.push(this.multi_thread_send_request(prop, item));\n    }\n\n    return reqid;\n  };\n\n  // helper method to send an HTTP request with the given iterator value\n  this.multi_thread_send_request = function(prop, item)\n  {\n    var k, postdata, query;\n\n    // replace %s in post data\n    if (prop.postdata) {\n      postdata = {};\n      for (k in prop.postdata) {\n        postdata[k] = String(prop.postdata[k]).replace('%s', item);\n      }\n      postdata._reqid = prop.reqid;\n    }\n    // replace %s in query\n    else if (typeof prop.query == 'string') {\n      query = prop.query.replace('%s', item);\n      query += '&_reqid=' + prop.reqid;\n    }\n    else if (typeof prop.query == 'object' && prop.query) {\n      query = {};\n      for (k in prop.query) {\n        query[k] = String(prop.query[k]).replace('%s', item);\n      }\n      query._reqid = prop.reqid;\n    }\n\n    // send HTTP GET or POST request\n    return postdata ? this.http_post(prop.action, postdata) : this.http_request(prop.action, query);\n  };\n\n  // callback function for multi-threaded http responses\n  this.multi_thread_http_response = function(data, reqid)\n  {\n    var prop = this.http_request_jobs[reqid];\n    if (!prop || prop.running <= 0 || prop.cancelled)\n      return;\n\n    prop.running--;\n\n    // trigger response callback\n    if (prop.onresponse && typeof prop.onresponse == 'function') {\n      prop.onresponse(data);\n    }\n\n    prop.result = $.extend(prop.result, data);\n\n    // send next request if prop.items is not yet empty\n    var item = prop._items.shift();\n    if (item !== undefined) {\n      prop.running++;\n      prop.requests.push(this.multi_thread_send_request(prop, item));\n    }\n    // trigger whendone callback and mark this request as done\n    else if (prop.running == 0) {\n      if (prop.whendone && typeof prop.whendone == 'function') {\n        prop.whendone(prop.result);\n      }\n\n      this.set_busy(false, '', prop.lock);\n\n      // remove from this.http_request_jobs pool\n      delete this.http_request_jobs[reqid];\n    }\n  };\n\n  // abort a running multi-thread request with the given identifier\n  this.multi_thread_request_abort = function(reqid)\n  {\n    var prop = this.http_request_jobs[reqid];\n    if (prop) {\n      for (var i=0; prop.running > 0 && i < prop.requests.length; i++) {\n        if (prop.requests[i].abort)\n          prop.requests[i].abort();\n      }\n\n      prop.running = 0;\n      prop.cancelled = true;\n      this.set_busy(false, '', prop.lock);\n    }\n  };\n\n  // post the given form to a hidden iframe\n  this.async_upload_form = function(form, action, onload)\n  {\n    // create hidden iframe\n    var ts = new Date().getTime(),\n      frame_name = 'rcmupload' + ts,\n      frame = this.async_upload_form_frame(frame_name);\n\n    // upload progress support\n    if (this.env.upload_progress_name) {\n      var fname = this.env.upload_progress_name,\n        field = $('input[name='+fname+']', form);\n\n      if (!field.length) {\n        field = $('<input>').attr({type: 'hidden', name: fname});\n        field.prependTo(form);\n      }\n\n      field.val(ts);\n    }\n\n    // handle upload errors by parsing iframe content in onload\n    frame.on('load', {ts:ts}, onload);\n\n    $(form).attr({\n        target: frame_name,\n        action: this.url(action, {_id: this.env.compose_id || '', _uploadid: ts, _from: this.env.action}),\n        method: 'POST'})\n      .attr(form.encoding ? 'encoding' : 'enctype', 'multipart/form-data')\n      .submit();\n\n    return frame_name;\n  };\n\n  // create iframe element for files upload\n  this.async_upload_form_frame = function(name)\n  {\n    return $('<iframe>').attr({name: name, style: 'border: none; width: 0; height: 0; visibility: hidden'})\n      .appendTo(document.body);\n  };\n\n  // html5 file-drop API\n  this.document_drag_hover = function(e, over)\n  {\n    // don't e.preventDefault() here to not block text dragging on the page (#1490619)\n    $(this.gui_objects.filedrop)[(over?'addClass':'removeClass')]('active');\n  };\n\n  this.file_drag_hover = function(e, over)\n  {\n    e.preventDefault();\n    e.stopPropagation();\n    $(this.gui_objects.filedrop)[(over?'addClass':'removeClass')]('hover');\n  };\n\n  // handler when files are dropped to a designated area.\n  // compose a multipart form data and submit it to the server\n  this.file_dropped = function(e)\n  {\n    // abort event and reset UI\n    this.file_drag_hover(e, false);\n\n    // prepare multipart form data composition\n    var uri, files = e.target.files || e.dataTransfer.files,\n      formdata = window.FormData ? new FormData() : null,\n      fieldname = (this.env.filedrop.fieldname || '_file') + (this.env.filedrop.single ? '' : '[]'),\n      boundary = '------multipartformboundary' + (new Date).getTime(),\n      dashdash = '--', crlf = '\\r\\n',\n      multipart = dashdash + boundary + crlf,\n      args = {_id: this.env.compose_id || this.env.cid || '', _remote: 1, _from: this.env.action};\n\n    if (!files || !files.length) {\n      // Roundcube attachment, pass its uri to the backend and attach\n      if (uri = e.dataTransfer.getData('roundcube-uri')) {\n        var ts = new Date().getTime(),\n          // jQuery way to escape filename (#1490530)\n          content = $('<span>').text(e.dataTransfer.getData('roundcube-name') || this.get_label('attaching')).html();\n\n        args._uri = uri;\n        args._uploadid = ts;\n\n        // add to attachments list\n        if (!this.add2attachment_list(ts, {name: '', html: content, classname: 'uploading', complete: false}))\n          this.file_upload_id = this.set_busy(true, 'attaching');\n\n        this.http_post(this.env.filedrop.action || 'upload', args);\n      }\n      return;\n    }\n\n    // inline function to submit the files to the server\n    var submit_data = function() {\n      var multiple = files.length > 1,\n        ts = new Date().getTime(),\n        // jQuery way to escape filename (#1490530)\n        content = $('<span>').text(multiple ? ref.get_label('uploadingmany') : files[0].name).html();\n\n      // add to attachments list\n      if (!ref.add2attachment_list(ts, { name:'', html:content, classname:'uploading', complete:false }))\n        ref.file_upload_id = ref.set_busy(true, 'uploading');\n\n      // complete multipart content and post request\n      multipart += dashdash + boundary + dashdash + crlf;\n\n      args._uploadid = ts;\n\n      $.ajax({\n        type: 'POST',\n        dataType: 'json',\n        url: ref.url(ref.env.filedrop.action || 'upload', args),\n        contentType: formdata ? false : 'multipart/form-data; boundary=' + boundary,\n        processData: false,\n        timeout: 0, // disable default timeout set in ajaxSetup()\n        data: formdata || multipart,\n        headers: {'X-Roundcube-Request': ref.env.request_token},\n        xhr: function() { var xhr = jQuery.ajaxSettings.xhr(); if (!formdata && xhr.sendAsBinary) xhr.send = xhr.sendAsBinary; return xhr; },\n        success: function(data){ ref.http_response(data); },\n        error: function(o, status, err) { ref.http_error(o, status, err, null, 'attachment'); }\n      });\n    };\n\n    // get contents of all dropped files\n    var last = this.env.filedrop.single ? 0 : files.length - 1;\n    for (var j=0, i=0, f; j <= last && (f = files[i]); i++) {\n      if (!f.name) f.name = f.fileName;\n      if (!f.size) f.size = f.fileSize;\n      if (!f.type) f.type = 'application/octet-stream';\n\n      // file name contains non-ASCII characters, do UTF8-binary string conversion.\n      if (!formdata && /[^\\x20-\\x7E]/.test(f.name))\n        f.name_bin = unescape(encodeURIComponent(f.name));\n\n      // filter by file type if requested\n      if (this.env.filedrop.filter && !f.type.match(new RegExp(this.env.filedrop.filter))) {\n        // TODO: show message to user\n        continue;\n      }\n\n      // do it the easy way with FormData (FF 4+, Chrome 5+, Safari 5+)\n      if (formdata) {\n        formdata.append(fieldname, f);\n        if (j == last)\n          return submit_data();\n      }\n      // use FileReader supporetd by Firefox 3.6\n      else if (window.FileReader) {\n        var reader = new FileReader();\n\n        // closure to pass file properties to async callback function\n        reader.onload = (function(file, j) {\n          return function(e) {\n            multipart += 'Content-Disposition: form-data; name=\"' + fieldname + '\"';\n            multipart += '; filename=\"' + (f.name_bin || file.name) + '\"' + crlf;\n            multipart += 'Content-Length: ' + file.size + crlf;\n            multipart += 'Content-Type: ' + file.type + crlf + crlf;\n            multipart += reader.result + crlf;\n            multipart += dashdash + boundary + crlf;\n\n            if (j == last)  // we're done, submit the data\n              return submit_data();\n          }\n        })(f,j);\n        reader.readAsBinaryString(f);\n      }\n      // Firefox 3\n      else if (f.getAsBinary) {\n        multipart += 'Content-Disposition: form-data; name=\"' + fieldname + '\"';\n        multipart += '; filename=\"' + (f.name_bin || f.name) + '\"' + crlf;\n        multipart += 'Content-Length: ' + f.size + crlf;\n        multipart += 'Content-Type: ' + f.type + crlf + crlf;\n        multipart += f.getAsBinary() + crlf;\n        multipart += dashdash + boundary +crlf;\n\n        if (j == last)\n          return submit_data();\n      }\n\n      j++;\n    }\n  };\n\n  // starts interval for keep-alive signal\n  this.start_keepalive = function()\n  {\n    if (!this.env.session_lifetime || this.env.framed || this.env.extwin || this.task == 'login' || this.env.action == 'print')\n      return;\n\n    if (this._keepalive)\n      clearInterval(this._keepalive);\n\n    this._keepalive = setInterval(function(){ ref.keep_alive(); }, this.env.session_lifetime * 0.5 * 1000);\n  };\n\n  // starts interval for refresh signal\n  this.start_refresh = function()\n  {\n    if (!this.env.refresh_interval || this.env.framed || this.env.extwin || this.task == 'login' || this.env.action == 'print')\n      return;\n\n    if (this._refresh)\n      clearInterval(this._refresh);\n\n    this._refresh = setInterval(function(){ ref.refresh(); }, this.env.refresh_interval * 1000);\n  };\n\n  // sends keep-alive signal\n  this.keep_alive = function()\n  {\n    if (!this.busy)\n      this.http_request('keep-alive');\n  };\n\n  // sends refresh signal\n  this.refresh = function()\n  {\n    if (this.busy) {\n      // try again after 10 seconds\n      setTimeout(function(){ ref.refresh(); ref.start_refresh(); }, 10000);\n      return;\n    }\n\n    var params = {}, lock = this.set_busy(true, 'refreshing');\n\n    if (this.task == 'mail' && this.gui_objects.mailboxlist)\n      params = this.check_recent_params();\n\n    params._last = Math.floor(this.env.lastrefresh.getTime() / 1000);\n    this.env.lastrefresh = new Date();\n\n    // plugins should bind to 'requestrefresh' event to add own params\n    this.http_post('refresh', params, lock);\n  };\n\n  // returns check-recent request parameters\n  this.check_recent_params = function()\n  {\n    var params = {_mbox: this.env.mailbox};\n\n    if (this.gui_objects.mailboxlist)\n      params._folderlist = 1;\n    if (this.gui_objects.quotadisplay)\n      params._quota = 1;\n    if (this.env.search_request)\n      params._search = this.env.search_request;\n\n    if (this.gui_objects.messagelist) {\n      params._list = 1;\n\n      // message uids for flag updates check\n      params._uids = $.map(this.message_list.rows, function(row, uid) { return uid; }).join(',');\n    }\n\n    return params;\n  };\n\n\n  /********************************************************/\n  /*********            helper methods            *********/\n  /********************************************************/\n\n  /**\n   * Quote html entities\n   */\n  this.quote_html = function(str)\n  {\n    return String(str).replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n  };\n\n  // get window.opener.rcmail if available\n  this.opener = function(deep, filter)\n  {\n    var i, win = window.opener;\n\n    // catch Error: Permission denied to access property rcmail\n    try {\n      if (win && !win.closed) {\n        // try parent of the opener window, e.g. preview frame\n        if (deep && (!win.rcmail || win.rcmail.env.framed) && win.parent && win.parent.rcmail)\n          win = win.parent;\n\n        if (win.rcmail && filter)\n          for (i in filter)\n            if (win.rcmail.env[i] != filter[i])\n              return;\n\n        return win.rcmail;\n      }\n    }\n    catch (e) {}\n  };\n\n  // check if we're in show mode or if we have a unique selection\n  // and return the message uid\n  this.get_single_uid = function()\n  {\n    var uid = this.env.uid || (this.message_list ? this.message_list.get_single_selection() : null);\n    var result = ref.triggerEvent('get_single_uid', { uid: uid });\n    return result || uid;\n  };\n\n  // same as above but for contacts\n  this.get_single_cid = function()\n  {\n    var cid = this.env.cid || (this.contact_list ? this.contact_list.get_single_selection() : null);\n    var result = ref.triggerEvent('get_single_cid', { cid: cid });\n    return result || cid;\n  };\n\n  // get the IMP mailbox of the message with the given UID\n  this.get_message_mailbox = function(uid)\n  {\n    var msg = (this.env.messages && uid ? this.env.messages[uid] : null) || {};\n    return msg.mbox || this.env.mailbox;\n  };\n\n  // build request parameters from single message id (maybe with mailbox name)\n  this.params_from_uid = function(uid, params)\n  {\n    if (!params)\n      params = {};\n\n    params._uid = String(uid).split('-')[0];\n    params._mbox = this.get_message_mailbox(uid);\n\n    return params;\n  };\n\n  // gets cursor position\n  this.get_caret_pos = function(obj)\n  {\n    if (obj.selectionEnd !== undefined)\n      return obj.selectionEnd;\n\n    return obj.value.length;\n  };\n\n  // moves cursor to specified position\n  this.set_caret_pos = function(obj, pos)\n  {\n    try {\n      if (obj.setSelectionRange)\n        obj.setSelectionRange(pos, pos);\n    }\n    catch(e) {} // catch Firefox exception if obj is hidden\n  };\n\n  // get selected text from an input field\n  this.get_input_selection = function(obj)\n  {\n    var start = 0, end = 0, normalizedValue = '';\n\n    if (typeof obj.selectionStart == \"number\" && typeof obj.selectionEnd == \"number\") {\n      normalizedValue = obj.value;\n      start = obj.selectionStart;\n      end = obj.selectionEnd;\n    }\n\n    return {start: start, end: end, text: normalizedValue.substr(start, end-start)};\n  };\n\n  // disable/enable all fields of a form\n  this.lock_form = function(form, lock)\n  {\n    if (!form || !form.elements)\n      return;\n\n    var n, len, elm;\n\n    if (lock)\n      this.disabled_form_elements = [];\n\n    for (n=0, len=form.elements.length; n<len; n++) {\n      elm = form.elements[n];\n\n      if (elm.type == 'hidden')\n        continue;\n      // remember which elem was disabled before lock\n      if (lock && elm.disabled)\n        this.disabled_form_elements.push(elm);\n      else if (lock || $.inArray(elm, this.disabled_form_elements) < 0)\n        elm.disabled = lock;\n    }\n  };\n\n  this.mailto_handler_uri = function()\n  {\n    return location.href.split('?')[0] + '?_task=mail&_action=compose&_to=%s';\n  };\n\n  this.register_protocol_handler = function(name)\n  {\n    try {\n      window.navigator.registerProtocolHandler('mailto', this.mailto_handler_uri(), name);\n    }\n    catch(e) {\n      this.display_message(String(e), 'error');\n    }\n  };\n\n  this.check_protocol_handler = function(name, elem)\n  {\n    var nav = window.navigator;\n\n    if (!nav || (typeof nav.registerProtocolHandler != 'function')) {\n      $(elem).addClass('disabled').click(function(){ return false; });\n    }\n    else if (typeof nav.isProtocolHandlerRegistered == 'function') {\n      var status = nav.isProtocolHandlerRegistered('mailto', this.mailto_handler_uri());\n      if (status)\n        $(elem).parent().find('.mailtoprotohandler-status').html(status);\n    }\n    else {\n      $(elem).click(function() { ref.register_protocol_handler(name); return false; });\n    }\n  };\n\n  // Checks browser capabilities eg. PDF support, TIF support\n  this.browser_capabilities_check = function()\n  {\n    if (!this.env.browser_capabilities)\n      this.env.browser_capabilities = {};\n\n    $.each(['pdf', 'flash', 'tif'], function() {\n      if (ref.env.browser_capabilities[this] === undefined)\n        ref.env.browser_capabilities[this] = ref[this + '_support_check']();\n    });\n  };\n\n  // Returns browser capabilities string\n  this.browser_capabilities = function()\n  {\n    if (!this.env.browser_capabilities)\n      return '';\n\n    var n, ret = [];\n\n    for (n in this.env.browser_capabilities)\n      ret.push(n + '=' + this.env.browser_capabilities[n]);\n\n    return ret.join();\n  };\n\n  this.tif_support_check = function()\n  {\n    window.setTimeout(function() {\n      var img = new Image();\n      img.onload = function() { ref.env.browser_capabilities.tif = 1; };\n      img.onerror = function() { ref.env.browser_capabilities.tif = 0; };\n      img.src = ref.assets_path('program/resources/blank.tif');\n    }, 10);\n\n    return 0;\n  };\n\n  this.pdf_support_check = function()\n  {\n    var plugin = navigator.mimeTypes ? navigator.mimeTypes[\"application/pdf\"] : {},\n      plugins = navigator.plugins,\n      len = plugins.length,\n      regex = /Adobe Reader|PDF|Acrobat/i;\n\n    if (plugin && plugin.enabledPlugin)\n        return 1;\n\n    if ('ActiveXObject' in window) {\n      try {\n        if (plugin = new ActiveXObject(\"AcroPDF.PDF\"))\n          return 1;\n      }\n      catch (e) {}\n      try {\n        if (plugin = new ActiveXObject(\"PDF.PdfCtrl\"))\n          return 1;\n      }\n      catch (e) {}\n    }\n\n    for (i=0; i<len; i++) {\n      plugin = plugins[i];\n      if (typeof plugin === 'String') {\n        if (regex.test(plugin))\n          return 1;\n      }\n      else if (plugin.name && regex.test(plugin.name))\n        return 1;\n    }\n\n    window.setTimeout(function() {\n      $('<object>').css({position: 'absolute', left: '-10000px'})\n        .attr({data: ref.assets_path('program/resources/dummy.pdf'), width: 1, height: 1, type: 'application/pdf'})\n        .load(function() { ref.env.browser_capabilities.pdf = 1; })\n        .error(function() { ref.env.browser_capabilities.pdf = 0; })\n        .appendTo($('body'));\n      }, 10);\n\n    return 0;\n  };\n\n  this.flash_support_check = function()\n  {\n    var plugin = navigator.mimeTypes ? navigator.mimeTypes[\"application/x-shockwave-flash\"] : {};\n\n    if (plugin && plugin.enabledPlugin)\n        return 1;\n\n    if ('ActiveXObject' in window) {\n      try {\n        if (plugin = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\"))\n          return 1;\n      }\n      catch (e) {}\n    }\n\n    return 0;\n  };\n\n  this.assets_path = function(path)\n  {\n    if (this.env.assets_path && !path.startsWith(this.env.assets_path)) {\n      path = this.env.assets_path + path;\n    }\n\n    return path;\n  };\n\n  // Cookie setter\n  this.set_cookie = function(name, value, expires)\n  {\n    setCookie(name, value, expires, this.env.cookie_path, this.env.cookie_domain, this.env.cookie_secure);\n  };\n\n  this.get_local_storage_prefix = function()\n  {\n    if (!this.local_storage_prefix)\n      this.local_storage_prefix = 'roundcube.' + (this.env.user_id || 'anonymous') + '.';\n\n    return this.local_storage_prefix;\n  };\n\n  // wrapper for localStorage.getItem(key)\n  this.local_storage_get_item = function(key, deflt, encrypted)\n  {\n    var item, result;\n\n    // TODO: add encryption\n    try {\n      item = localStorage.getItem(this.get_local_storage_prefix() + key);\n      result = JSON.parse(item);\n    }\n    catch (e) { }\n\n    return result || deflt || null;\n  };\n\n  // wrapper for localStorage.setItem(key, data)\n  this.local_storage_set_item = function(key, data, encrypted)\n  {\n    // try/catch to handle no localStorage support, but also error\n    // in Safari-in-private-browsing-mode where localStorage exists\n    // but can't be used (#1489996)\n    try {\n      // TODO: add encryption\n      localStorage.setItem(this.get_local_storage_prefix() + key, JSON.stringify(data));\n      return true;\n    }\n    catch (e) {\n      return false;\n    }\n  };\n\n  // wrapper for localStorage.removeItem(key)\n  this.local_storage_remove_item = function(key)\n  {\n    try {\n      localStorage.removeItem(this.get_local_storage_prefix() + key);\n      return true;\n    }\n    catch (e) {\n      return false;\n    }\n  };\n\n  this.print_dialog = function()\n  {\n    if (bw.safari)\n      setTimeout('window.print()', 10);\n    else\n      window.print();\n  };\n}  // end object rcube_webmail\n\n\n// some static methods\nrcube_webmail.long_subject_title = function(elem, indent)\n{\n  if (!elem.title) {\n    var $elem = $(elem);\n    if ($elem.width() + (indent || 0) * 15 > $elem.parent().width())\n      elem.title = rcube_webmail.subject_text(elem);\n  }\n};\n\nrcube_webmail.long_subject_title_ex = function(elem)\n{\n  if (!elem.title) {\n    var $elem = $(elem),\n      txt = $.trim($elem.text()),\n      tmp = $('<span>').text(txt)\n        .css({'position': 'absolute', 'float': 'left', 'visibility': 'hidden',\n          'font-size': $elem.css('font-size'), 'font-weight': $elem.css('font-weight')})\n        .appendTo($('body')),\n      w = tmp.width();\n\n    tmp.remove();\n    if (w + $('span.branch', $elem).width() * 15 > $elem.width())\n      elem.title = rcube_webmail.subject_text(elem);\n  }\n};\n\nrcube_webmail.subject_text = function(elem)\n{\n  var t = $(elem).clone();\n  t.find('.skip-on-drag').remove();\n  return t.text();\n};\n\nrcube_webmail.prototype.get_cookie = getCookie;\n\n// copy event engine prototype\nrcube_webmail.prototype.addEventListener = rcube_event_engine.prototype.addEventListener;\nrcube_webmail.prototype.removeEventListener = rcube_event_engine.prototype.removeEventListener;\nrcube_webmail.prototype.triggerEvent = rcube_event_engine.prototype.triggerEvent;\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2008-2014, The Roundcube Dev Team                       |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Logical representation of a mail message with all its data          |\n |   and related functions                                               |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Logical representation of a mail message with all its data\n * and related functions\n *\n * @package    Framework\n * @subpackage Storage\n * @author     Thomas Bruederli <roundcube@gmail.com>\n */\nclass rcube_message\n{\n    /**\n     * Instace of framework class.\n     *\n     * @var rcube\n     */\n    private $app;\n\n    /**\n     * Instance of storage class\n     *\n     * @var rcube_storage\n     */\n    private $storage;\n\n    /**\n     * Instance of mime class\n     *\n     * @var rcube_mime\n     */\n    private $mime;\n    private $opt = array();\n    private $parse_alternative = false;\n\n    public $uid;\n    public $folder;\n    public $headers;\n    public $sender;\n    public $parts        = array();\n    public $mime_parts   = array();\n    public $inline_parts = array();\n    public $attachments  = array();\n    public $subject      = '';\n    public $is_safe      = false;\n\n    const BODY_MAX_SIZE = 1048576; // 1MB\n\n\n    /**\n     * __construct\n     *\n     * Provide a uid, and parse message structure.\n     *\n     * @param string $uid     The message UID.\n     * @param string $folder  Folder name\n     * @param bool   $is_safe Security flag\n     *\n     * @see self::$app, self::$storage, self::$opt, self::$parts\n     */\n    function __construct($uid, $folder = null, $is_safe = false)\n    {\n        // decode combined UID-folder identifier\n        if (preg_match('/^\\d+-.+/', $uid)) {\n            list($uid, $folder) = explode('-', $uid, 2);\n        }\n\n        $this->uid     = $uid;\n        $this->app     = rcube::get_instance();\n        $this->storage = $this->app->get_storage();\n        $this->folder  = strlen($folder) ? $folder : $this->storage->get_folder();\n\n        // Set current folder\n        $this->storage->set_folder($this->folder);\n        $this->storage->set_options(array('all_headers' => true));\n\n        $this->headers = $this->storage->get_message($uid);\n\n        if (!$this->headers) {\n            return;\n        }\n\n        $this->mime    = new rcube_mime($this->headers->charset);\n        $this->subject = $this->headers->get('subject');\n        list(, $this->sender) = each($this->mime->decode_address_list($this->headers->from, 1));\n\n        $this->set_safe($is_safe || $_SESSION['safe_messages'][$this->folder.':'.$uid]);\n        $this->opt = array(\n            'safe'        => $this->is_safe,\n            'prefer_html' => $this->app->config->get('prefer_html'),\n            'get_url'     => $this->app->url(array(\n                    'action' => 'get',\n                    'mbox'   => $this->folder,\n                    'uid'    => $uid),\n                false, false, true)\n        );\n\n        if (!empty($this->headers->structure)) {\n            $this->get_mime_numbers($this->headers->structure);\n            $this->parse_structure($this->headers->structure);\n        }\n        else {\n            $this->body = $this->storage->get_body($uid);\n        }\n\n        // notify plugins and let them analyze this structured message object\n        $this->app->plugins->exec_hook('message_load', array('object' => $this));\n    }\n\n    /**\n     * Return a (decoded) message header\n     *\n     * @param string $name Header name\n     * @param bool   $row  Don't mime-decode the value\n     * @return string Header value\n     */\n    public function get_header($name, $raw = false)\n    {\n        if (empty($this->headers)) {\n            return null;\n        }\n\n        return $this->headers->get($name, !$raw);\n    }\n\n    /**\n     * Set is_safe var and session data\n     *\n     * @param bool $safe enable/disable\n     */\n    public function set_safe($safe = true)\n    {\n        $_SESSION['safe_messages'][$this->folder.':'.$this->uid] = $this->is_safe = $safe;\n    }\n\n    /**\n     * Compose a valid URL for getting a message part\n     *\n     * @param string $mime_id Part MIME-ID\n     * @param mixed  $embed Mimetype class for parts to be embedded\n     * @return string URL or false if part does not exist\n     */\n    public function get_part_url($mime_id, $embed = false)\n    {\n        if ($this->mime_parts[$mime_id])\n            return $this->opt['get_url'] . '&_part=' . $mime_id . ($embed ? '&_embed=1&_mimeclass=' . $embed : '');\n        else\n            return false;\n    }\n\n    /**\n     * Get content of a specific part of this message\n     *\n     * @param string   $mime_id           Part MIME-ID\n     * @param resource $fp File           pointer to save the message part\n     * @param boolean  $skip_charset_conv Disables charset conversion\n     * @param int      $max_bytes         Only read this number of bytes\n     * @param boolean  $formatted         Enables formatting of text/* parts bodies\n     *\n     * @return string Part content\n     * @deprecated\n     */\n    public function get_part_content($mime_id, $fp = null, $skip_charset_conv = false, $max_bytes = 0, $formatted = true)\n    {\n        if ($part = $this->mime_parts[$mime_id]) {\n            // stored in message structure (winmail/inline-uuencode)\n            if (!empty($part->body) || $part->encoding == 'stream') {\n                if ($fp) {\n                    fwrite($fp, $part->body);\n                }\n                return $fp ? true : $part->body;\n            }\n\n            // get from IMAP\n            $this->storage->set_folder($this->folder);\n\n            return $this->storage->get_message_part($this->uid, $mime_id, $part,\n                NULL, $fp, $skip_charset_conv, $max_bytes, $formatted);\n        }\n    }\n\n    /**\n     * Get content of a specific part of this message\n     *\n     * @param string  $mime_id   Part ID\n     * @param boolean $formatted Enables formatting of text/* parts bodies\n     * @param int     $max_bytes Only return/read this number of bytes\n     * @param mixed   $mode      NULL to return a string, -1 to print body\n     *                           or file pointer to save the body into\n     *\n     * @return string|bool Part content or operation status\n     */\n    public function get_part_body($mime_id, $formatted = false, $max_bytes = 0, $mode = null)\n    {\n        if (!($part = $this->mime_parts[$mime_id])) {\n            return;\n        }\n\n        // allow plugins to modify part body\n        $plugin = $this->app->plugins->exec_hook('message_part_body',\n            array('object' => $this, 'part' => $part));\n\n        // only text parts can be formatted\n        $formatted = $formatted && $part->ctype_primary == 'text';\n\n        // part body not fetched yet... save in memory if it's small enough\n        if ($part->body === null && is_numeric($mime_id) && $part->size < self::BODY_MAX_SIZE) {\n            $this->storage->set_folder($this->folder);\n            // Warning: body here should be always unformatted\n            $part->body = $this->storage->get_message_part($this->uid, $mime_id, $part,\n                null, null, true, 0, false);\n        }\n\n        // body stored in message structure (winmail/inline-uuencode)\n        if ($part->body !== null || $part->encoding == 'stream') {\n            $body = $part->body;\n\n            if ($formatted && $body) {\n                $body = self::format_part_body($body, $part, $this->headers->charset);\n            }\n\n            if ($max_bytes && strlen($body) > $max_bytes) {\n                $body = substr($body, 0, $max_bytes);\n            }\n\n            if (is_resource($mode)) {\n                if ($body !== false) {\n                    fwrite($mode, $body);\n                    rewind($mode);\n                }\n\n                return $body !== false;\n            }\n\n            if ($mode === -1) {\n                if ($body !== false) {\n                    print($body);\n                }\n\n                return $body !== false;\n            }\n\n            return $body;\n        }\n\n        // get the body from IMAP\n        $this->storage->set_folder($this->folder);\n\n        $body = $this->storage->get_message_part($this->uid, $mime_id, $part,\n            $mode === -1, is_resource($mode) ? $mode : null,\n            !($mode && $formatted), $max_bytes, $mode && $formatted);\n\n        if (is_resource($mode)) {\n            rewind($mode);\n            return $body !== false;\n        }\n\n        if (!$mode && $body && $formatted) {\n            $body = self::format_part_body($body, $part, $this->headers->charset);\n        }\n\n        return $body;\n    }\n\n    /**\n     * Format text message part for display\n     *\n     * @param string             $body            Part body\n     * @param rcube_message_part $part            Part object\n     * @param string             $default_charset Fallback charset if part charset is not specified\n     *\n     * @return string Formatted body\n     */\n    public static function format_part_body($body, $part, $default_charset = null)\n    {\n        // remove useless characters\n        $body = preg_replace('/[\\t\\r\\0\\x0B]+\\n/', \"\\n\", $body);\n\n        // remove NULL characters if any (#1486189)\n        if (strpos($body, \"\\x00\") !== false) {\n            $body = str_replace(\"\\x00\", '', $body);\n        }\n\n        // detect charset...\n        if (!$part->charset || strtoupper($part->charset) == 'US-ASCII') {\n            // try to extract charset information from HTML meta tag (#1488125)\n            if ($part->ctype_secondary == 'html' && preg_match('/<meta[^>]+charset=([a-z0-9-_]+)/i', $body, $m)) {\n                $part->charset = strtoupper($m[1]);\n            }\n            else if ($default_charset) {\n                $part->charset = $default_charset;\n            }\n            else {\n                $rcube         = rcube::get_instance();\n                $part->charset = $rcube->config->get('default_charset', RCUBE_CHARSET);\n            }\n        }\n\n        // ..convert charset encoding\n        $body = rcube_charset::convert($body, $part->charset);\n\n        return $body;\n    }\n\n    /**\n     * Determine if the message contains a HTML part. This must to be\n     * a real part not an attachment (or its part)\n     *\n     * @param bool               $enriched Enables checking for text/enriched parts too\n     * @param rcube_message_part &$part    Reference to the part if found\n     *\n     * @return bool True if a HTML is available, False if not\n     */\n    public function has_html_part($enriched = false, &$part = null)\n    {\n        // check all message parts\n        foreach ($this->mime_parts as $part) {\n            if ($part->mimetype == 'text/html' || ($enriched && $part->mimetype == 'text/enriched')) {\n                // Skip if part is an attachment, don't use is_attachment() here\n                if ($part->filename) {\n                    continue;\n                }\n\n                $level = explode('.', $part->mime_id);\n                $depth = count($level);\n                $last  = '';\n\n                // Check if the part belongs to higher-level's multipart part\n                // this can be alternative/related/signed/encrypted or mixed\n                while (array_pop($level) !== null) {\n                    $parent_depth = count($level);\n                    if (!$parent_depth) {\n                        return true;\n                    }\n\n                    $parent    = $this->mime_parts[join('.', $level)];\n                    $max_delta = $depth - (1 + ($last == 'multipart/alternative' ? 1 : 0));\n                    $last      = $parent->mimetype;\n\n                    if (!preg_match('/^multipart\\/(alternative|related|signed|encrypted|mixed)$/', $parent->mimetype)\n                        || ($parent->mimetype == 'multipart/mixed' && $parent_depth < $max_delta)) {\n                        continue 2;\n                    }\n                }\n\n                if ($part->size) {\n                    return true;\n                }\n            }\n        }\n\n        $part = null;\n\n        return false;\n    }\n\n    /**\n     * Determine if the message contains a text/plain part. This must to be\n     * a real part not an attachment (or its part)\n     *\n     * @param rcube_message_part &$part Reference to the part if found\n     *\n     * @return bool True if a plain text part is available, False if not\n     */\n    public function has_text_part(&$part = null)\n    {\n        // check all message parts\n        foreach ($this->mime_parts as $part) {\n            if ($part->mimetype == 'text/plain') {\n                // Skip if part is an attachment, don't use is_attachment() here\n                if ($part->filename) {\n                    continue;\n                }\n\n                $level = explode('.', $part->mime_id);\n\n                // Check if the part belongs to higher-level's alternative/related\n                while (array_pop($level) !== null) {\n                    if (!count($level)) {\n                        return true;\n                    }\n\n                    $parent = $this->mime_parts[join('.', $level)];\n                    if ($parent->mimetype != 'multipart/alternative' && $parent->mimetype != 'multipart/related') {\n                        continue 2;\n                    }\n                }\n\n                if ($part->size) {\n                    return true;\n                }\n            }\n        }\n\n        $part = null;\n\n        return false;\n    }\n\n    /**\n     * Return the first HTML part of this message\n     *\n     * @param rcube_message_part &$part    Reference to the part if found\n     * @param bool               $enriched Enables checking for text/enriched parts too\n     *\n     * @return string HTML message part content\n     */\n    public function first_html_part(&$part = null, $enriched = false)\n    {\n        if ($this->has_html_part($enriched, $part)) {\n            $body = $this->get_part_body($part->mime_id, true);\n\n            if ($part->mimetype == 'text/enriched') {\n                $body = rcube_enriched::to_html($body);\n            }\n\n            return $body;\n        }\n    }\n\n    /**\n     * Return the first text part of this message.\n     * If there's no text/plain part but $strict=true and text/html part\n     * exists, it will be returned in text/plain format.\n     *\n     * @param rcube_message_part &$part  Reference to the part if found\n     * @param bool               $strict Check only text/plain parts\n     *\n     * @return string Plain text message/part content\n     */\n    public function first_text_part(&$part = null, $strict = false)\n    {\n        // no message structure, return complete body\n        if (empty($this->parts)) {\n            return $this->body;\n        }\n\n        if ($this->has_text_part($part)) {\n            return $this->get_part_body($part->mime_id, true);\n        }\n\n        if (!$strict && ($body = $this->first_html_part($part, true))) {\n            // create instance of html2text class\n            $h2t  = new rcube_html2text($body);\n            return $h2t->get_text();\n        }\n    }\n\n    /**\n     * Checks if part of the message is an attachment (or part of it)\n     *\n     * @param rcube_message_part $part Message part\n     *\n     * @return bool True if the part is an attachment part\n     */\n    public function is_attachment($part)\n    {\n        foreach ($this->attachments as $att_part) {\n            if ($att_part->mime_id == $part->mime_id) {\n                return true;\n            }\n\n            // check if the part is a subpart of another attachment part (message/rfc822)\n            if ($att_part->mimetype == 'message/rfc822') {\n                if (in_array($part, (array)$att_part->parts)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * In a multipart/encrypted encrypted message,\n     * find the encrypted message payload part.\n     *\n     * @return rcube_message_part\n     */\n    public function get_multipart_encrypted_part()\n    {\n        foreach ($this->mime_parts as $mime_id => $mpart) {\n            if ($mpart->mimetype == 'multipart/encrypted') {\n                $this->pgp_mime = true;\n            }\n            if ($this->pgp_mime && ($mpart->mimetype == 'application/octet-stream' ||\n                    (!empty($mpart->filename) && $mpart->filename != 'version.txt'))) {\n                $this->encrypted_part = $mime_id;\n                return $mpart;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Read the message structure returend by the IMAP server\n     * and build flat lists of content parts and attachments\n     *\n     * @param rcube_message_part $structure Message structure node\n     * @param bool               $recursive True when called recursively\n     */\n    private function parse_structure($structure, $recursive = false)\n    {\n        // real content-type of message/rfc822 part\n        if ($structure->mimetype == 'message/rfc822' && $structure->real_mimetype) {\n            $mimetype = $structure->real_mimetype;\n\n            // parse headers from message/rfc822 part\n            if (!isset($structure->headers['subject']) && !isset($structure->headers['from'])) {\n                list($headers, ) = explode(\"\\r\\n\\r\\n\", $this->get_part_body($structure->mime_id, false, 32768));\n                $structure->headers = rcube_mime::parse_headers($headers);\n            }\n        }\n        else {\n            $mimetype = $structure->mimetype;\n        }\n\n        // show message headers\n        if ($recursive && is_array($structure->headers) &&\n                (isset($structure->headers['subject']) || $structure->headers['from'] || $structure->headers['to'])) {\n            $c = new stdClass;\n            $c->type = 'headers';\n            $c->headers = $structure->headers;\n            $this->parts[] = $c;\n        }\n\n        // Allow plugins to handle message parts\n        $plugin = $this->app->plugins->exec_hook('message_part_structure',\n            array('object' => $this, 'structure' => $structure,\n                'mimetype' => $mimetype, 'recursive' => $recursive));\n\n        if ($plugin['abort']) {\n            return;\n        }\n\n        $structure = $plugin['structure'];\n        $mimetype  = $plugin['mimetype'];\n        $recursive = $plugin['recursive'];\n\n        list($message_ctype_primary, $message_ctype_secondary) = explode('/', $mimetype);\n\n        // print body if message doesn't have multiple parts\n        if ($message_ctype_primary == 'text' && !$recursive) {\n            // parts with unsupported type add to attachments list\n            if (!in_array($message_ctype_secondary, array('plain', 'html', 'enriched'))) {\n                $this->attachments[] = $structure;\n                return;\n            }\n\n            $structure->type = 'content';\n            $this->parts[] = $structure;\n\n            // Parse simple (plain text) message body\n            if ($message_ctype_secondary == 'plain') {\n                foreach ((array)$this->uu_decode($structure) as $uupart) {\n                    $this->mime_parts[$uupart->mime_id] = $uupart;\n                    $this->attachments[] = $uupart;\n                }\n            }\n        }\n        // the same for pgp signed messages\n        else if ($mimetype == 'application/pgp' && !$recursive) {\n            $structure->type = 'content';\n            $this->parts[] = $structure;\n        }\n        // message contains (more than one!) alternative parts\n        else if ($mimetype == 'multipart/alternative'\n            && is_array($structure->parts) && count($structure->parts) > 1\n        ) {\n            // get html/plaintext parts, other add to attachments list\n            foreach ($structure->parts as $p => $sub_part) {\n                $sub_mimetype = $sub_part->mimetype;\n                $is_multipart = preg_match('/^multipart\\/(related|relative|mixed|alternative)/', $sub_mimetype);\n\n                // skip empty text parts\n                if (!$sub_part->size && !$is_multipart) {\n                    continue;\n                }\n\n                // We've encountered (malformed) messages with more than\n                // one text/plain or text/html part here. There's no way to choose\n                // which one is better, so we'll display first of them and add\n                // others as attachments (#1489358)\n\n                // check if sub part is\n                if ($is_multipart)\n                    $related_part = $p;\n                else if ($sub_mimetype == 'text/plain' && !$plain_part)\n                    $plain_part = $p;\n                else if ($sub_mimetype == 'text/html' && !$html_part) {\n                    $html_part = $p;\n                    $this->got_html_part = true;\n                }\n                else if ($sub_mimetype == 'text/enriched' && !$enriched_part)\n                    $enriched_part = $p;\n                else {\n                    // add unsupported/unrecognized parts to attachments list\n                    $this->attachments[] = $sub_part;\n                }\n            }\n\n            // parse related part (alternative part could be in here)\n            if ($related_part !== null && !$this->parse_alternative) {\n                $this->parse_alternative = true;\n                $this->parse_structure($structure->parts[$related_part], true);\n                $this->parse_alternative = false;\n\n                // if plain part was found, we should unset it if html is preferred\n                if ($this->opt['prefer_html'] && count($this->parts))\n                    $plain_part = null;\n            }\n\n            // choose html/plain part to print\n            if ($html_part !== null && $this->opt['prefer_html']) {\n                $print_part = $structure->parts[$html_part];\n            }\n            else if ($enriched_part !== null) {\n                $print_part = $structure->parts[$enriched_part];\n            }\n            else if ($plain_part !== null) {\n                $print_part = $structure->parts[$plain_part];\n            }\n\n            // add the right message body\n            if (is_object($print_part)) {\n                $print_part->type = 'content';\n                $this->parts[] = $print_part;\n            }\n            // show plaintext warning\n            else if ($html_part !== null && empty($this->parts)) {\n                $c = new stdClass;\n                $c->type            = 'content';\n                $c->ctype_primary   = 'text';\n                $c->ctype_secondary = 'plain';\n                $c->mimetype        = 'text/plain';\n                $c->realtype        = 'text/html';\n\n                $this->parts[] = $c;\n            }\n        }\n        // this is an ecrypted message -> create a plaintext body with the according message\n        else if ($mimetype == 'multipart/encrypted') {\n            $p = new stdClass;\n            $p->type            = 'content';\n            $p->ctype_primary   = 'text';\n            $p->ctype_secondary = 'plain';\n            $p->mimetype        = 'text/plain';\n            $p->realtype        = 'multipart/encrypted';\n            $p->mime_id         = $structure->mime_id;\n\n            $this->parts[] = $p;\n\n            // add encrypted payload part as attachment\n            if (is_array($structure->parts)) {\n                for ($i=0; $i < count($structure->parts); $i++) {\n                    $subpart = $structure->parts[$i];\n                    if ($subpart->mimetype == 'application/octet-stream' || !empty($subpart->filename)) {\n                        $this->attachments[] = $subpart;\n                    }\n                }\n            }\n        }\n        // this is an S/MIME ecrypted message -> create a plaintext body with the according message\n        else if ($mimetype == 'application/pkcs7-mime') {\n            $p = new stdClass;\n            $p->type            = 'content';\n            $p->ctype_primary   = 'text';\n            $p->ctype_secondary = 'plain';\n            $p->mimetype        = 'text/plain';\n            $p->realtype        = 'application/pkcs7-mime';\n            $p->mime_id         = $structure->mime_id;\n\n            $this->parts[] = $p;\n\n            if (!empty($structure->filename)) {\n                $this->attachments[] = $structure;\n            }\n        }\n        // message contains multiple parts\n        else if (is_array($structure->parts) && !empty($structure->parts)) {\n            // iterate over parts\n            for ($i=0; $i < count($structure->parts); $i++) {\n                $mail_part      = &$structure->parts[$i];\n                $primary_type   = $mail_part->ctype_primary;\n                $secondary_type = $mail_part->ctype_secondary;\n                $part_mimetype  = $mail_part->mimetype;\n\n                // multipart/alternative or message/rfc822\n                if ($primary_type == 'multipart' || $part_mimetype == 'message/rfc822') {\n                    $this->parse_structure($mail_part, true);\n\n                    // list message/rfc822 as attachment as well (mostly .eml)\n                    if ($primary_type == 'message' && !empty($mail_part->filename)) {\n                        $this->attachments[] = $mail_part;\n                    }\n                }\n                // part text/[plain|html] or delivery status\n                else if ((($part_mimetype == 'text/plain' || $part_mimetype == 'text/html') && $mail_part->disposition != 'attachment') ||\n                    in_array($part_mimetype, array('message/delivery-status', 'text/rfc822-headers', 'message/disposition-notification'))\n                ) {\n                    // Allow plugins to handle also this part\n                    $plugin = $this->app->plugins->exec_hook('message_part_structure',\n                        array('object' => $this, 'structure' => $mail_part,\n                            'mimetype' => $part_mimetype, 'recursive' => true));\n\n                    if ($plugin['abort']) {\n                        continue;\n                    }\n\n                    if ($part_mimetype == 'text/html' && $mail_part->size) {\n                        $this->got_html_part = true;\n                    }\n\n                    $mail_part = $plugin['structure'];\n                    list($primary_type, $secondary_type) = explode('/', $plugin['mimetype']);\n\n                    // add text part if it matches the prefs\n                    if (!$this->parse_alternative ||\n                        ($secondary_type == 'html' && $this->opt['prefer_html']) ||\n                        ($secondary_type == 'plain' && !$this->opt['prefer_html'])\n                    ) {\n                        $mail_part->type = 'content';\n                        $this->parts[] = $mail_part;\n                    }\n\n                    // list as attachment as well\n                    if (!empty($mail_part->filename)) {\n                        $this->attachments[] = $mail_part;\n                    }\n                }\n                // ignore \"virtual\" protocol parts\n                else if ($primary_type == 'protocol') {\n                    continue;\n                }\n                // part is Microsoft Outlook TNEF (winmail.dat)\n                else if ($part_mimetype == 'application/ms-tnef') {\n                    $tnef_parts = (array) $this->tnef_decode($mail_part);\n                    foreach ($tnef_parts as $tpart) {\n                        $this->mime_parts[$tpart->mime_id] = $tpart;\n                        $this->attachments[] = $tpart;\n                    }\n\n                    // add winmail.dat to the list if it's content is unknown\n                    if (empty($tnef_parts) && !empty($mail_part->filename)) {\n                        $this->mime_parts[$mail_part->mime_id] = $mail_part;\n                        $this->attachments[] = $mail_part;\n                    }\n                }\n                // part is a file/attachment\n                else if (preg_match('/^(inline|attach)/', $mail_part->disposition) ||\n                    $mail_part->headers['content-id'] ||\n                    ($mail_part->filename &&\n                        (empty($mail_part->disposition) || preg_match('/^[a-z0-9!#$&.+^_-]+$/i', $mail_part->disposition)))\n                ) {\n                    // skip apple resource forks\n                    if ($message_ctype_secondary == 'appledouble' && $secondary_type == 'applefile')\n                        continue;\n\n                    // part belongs to a related message and is linked\n                    if (preg_match('/^multipart\\/(related|relative)/', $mimetype)\n                        && ($mail_part->headers['content-id'] || $mail_part->headers['content-location'])\n                    ) {\n                        if ($mail_part->headers['content-id'])\n                            $mail_part->content_id = preg_replace(array('/^</', '/>$/'), '', $mail_part->headers['content-id']);\n                        if ($mail_part->headers['content-location'])\n                            $mail_part->content_location = $mail_part->headers['content-base'] . $mail_part->headers['content-location'];\n\n                        $this->inline_parts[] = $mail_part;\n                    }\n                    // regular attachment with valid content type\n                    // (content-type name regexp according to RFC4288.4.2)\n                    else if (preg_match('/^[a-z0-9!#$&.+^_-]+\\/[a-z0-9!#$&.+^_-]+$/i', $part_mimetype)) {\n                        $this->attachments[] = $mail_part;\n                    }\n                    // attachment with invalid content type\n                    // replace malformed content type with application/octet-stream (#1487767)\n                    else if ($mail_part->filename) {\n                        $mail_part->ctype_primary   = 'application';\n                        $mail_part->ctype_secondary = 'octet-stream';\n                        $mail_part->mimetype        = 'application/octet-stream';\n\n                        $this->attachments[] = $mail_part;\n                    }\n                }\n                // calendar part not marked as attachment (#1490325)\n                else if ($part_mimetype == 'text/calendar') {\n                    if (!$mail_part->filename) {\n                        $mail_part->filename = 'calendar.ics';\n                    }\n\n                    $this->attachments[] = $mail_part;\n                }\n            }\n\n            // if this was a related part try to resolve references\n            if (preg_match('/^multipart\\/(related|relative)/', $mimetype) && sizeof($this->inline_parts)) {\n                $a_replaces = array();\n                $img_regexp = '/^image\\/(gif|jpe?g|png|tiff|bmp|svg)/';\n\n                foreach ($this->inline_parts as $inline_object) {\n                    $part_url = $this->get_part_url($inline_object->mime_id, $inline_object->ctype_primary);\n                    if (isset($inline_object->content_id))\n                        $a_replaces['cid:'.$inline_object->content_id] = $part_url;\n                    if ($inline_object->content_location) {\n                        $a_replaces[$inline_object->content_location] = $part_url;\n                    }\n\n                    if (!empty($inline_object->filename)) {\n                        // MS Outlook sends sometimes non-related attachments as related\n                        // In this case multipart/related message has only one text part\n                        // We'll add all such attachments to the attachments list\n                        if (!isset($this->got_html_part)) {\n                            $this->attachments[] = $inline_object;\n                        }\n                        // MS Outlook sometimes also adds non-image attachments as related\n                        // We'll add all such attachments to the attachments list\n                        // Warning: some browsers support pdf in <img/>\n                        else if (!preg_match($img_regexp, $inline_object->mimetype)) {\n                            $this->attachments[] = $inline_object;\n                        }\n                        // @TODO: we should fetch HTML body and find attachment's content-id\n                        // to handle also image attachments without reference in the body\n                        // @TODO: should we list all image attachments in text mode?\n                    }\n                }\n\n                // add replace array to each content part\n                // (will be applied later when part body is available)\n                foreach ($this->parts as $i => $part) {\n                    if ($part->type == 'content')\n                        $this->parts[$i]->replaces = $a_replaces;\n                }\n            }\n        }\n        // message is a single part non-text\n        else if ($structure->filename) {\n            $this->attachments[] = $structure;\n        }\n        // message is a single part non-text (without filename)\n        else if (preg_match('/application\\//i', $mimetype)) {\n            $this->attachments[] = $structure;\n        }\n    }\n\n    /**\n     * Fill aflat array with references to all parts, indexed by part numbers\n     *\n     * @param rcube_message_part $part Message body structure\n     */\n    private function get_mime_numbers(&$part)\n    {\n        if (strlen($part->mime_id))\n            $this->mime_parts[$part->mime_id] = &$part;\n\n        if (is_array($part->parts))\n            for ($i=0; $i<count($part->parts); $i++)\n                $this->get_mime_numbers($part->parts[$i]);\n    }\n\n    /**\n     * Decode a Microsoft Outlook TNEF part (winmail.dat)\n     *\n     * @param rcube_message_part $part Message part to decode\n     * @return array\n     */\n    function tnef_decode(&$part)\n    {\n        // @TODO: attachment may be huge, handle body via file\n        $body     = $this->get_part_body($part->mime_id);\n        $tnef     = new rcube_tnef_decoder;\n        $tnef_arr = $tnef->decompress($body);\n        $parts    = array();\n\n        unset($body);\n\n        foreach ($tnef_arr as $pid => $winatt) {\n            $tpart = new rcube_message_part;\n\n            $tpart->filename        = $this->fix_attachment_name(trim($winatt['name']), $part);\n            $tpart->encoding        = 'stream';\n            $tpart->ctype_primary   = trim(strtolower($winatt['type']));\n            $tpart->ctype_secondary = trim(strtolower($winatt['subtype']));\n            $tpart->mimetype        = $tpart->ctype_primary . '/' . $tpart->ctype_secondary;\n            $tpart->mime_id         = 'winmail.' . $part->mime_id . '.' . $pid;\n            $tpart->size            = $winatt['size'];\n            $tpart->body            = $winatt['stream'];\n\n            $parts[] = $tpart;\n            unset($tnef_arr[$pid]);\n        }\n\n        return $parts;\n    }\n\n    /**\n     * Parse message body for UUencoded attachments bodies\n     *\n     * @param rcube_message_part $part Message part to decode\n     * @return array\n     */\n    function uu_decode(&$part)\n    {\n        // @TODO: messages may be huge, handle body via file\n        $part->body = $this->get_part_body($part->mime_id);\n        $parts      = array();\n        $pid        = 0;\n\n        // FIXME: line length is max.65?\n        $uu_regexp_begin = '/begin [0-7]{3,4} ([^\\r\\n]+)\\r?\\n/s';\n        $uu_regexp_end   = '/`\\r?\\nend((\\r?\\n)|($))/s';\n\n        while (preg_match($uu_regexp_begin, $part->body, $matches, PREG_OFFSET_CAPTURE)) {\n            $startpos = $matches[0][1];\n\n            if (!preg_match($uu_regexp_end, $part->body, $m, PREG_OFFSET_CAPTURE, $startpos)) {\n                break;\n            }\n\n            $endpos    = $m[0][1];\n            $begin_len = strlen($matches[0][0]);\n            $end_len   = strlen($m[0][0]);\n\n            // extract attachment body\n            $filebody = substr($part->body, $startpos + $begin_len, $endpos - $startpos - $begin_len - 1);\n            $filebody = str_replace(\"\\r\\n\", \"\\n\", $filebody);\n\n            // remove attachment body from the message body\n            $part->body = substr_replace($part->body, '', $startpos, $endpos + $end_len - $startpos);\n            // mark body as modified so it will not be cached by rcube_imap_cache\n            $part->body_modified = true;\n\n            // add attachments to the structure\n            $uupart = new rcube_message_part;\n            $uupart->filename = trim($matches[1][0]);\n            $uupart->encoding = 'stream';\n            $uupart->body     = convert_uudecode($filebody);\n            $uupart->size     = strlen($uupart->body);\n            $uupart->mime_id  = 'uu.' . $part->mime_id . '.' . $pid;\n\n            $ctype = rcube_mime::file_content_type($uupart->body, $uupart->filename, 'application/octet-stream', true);\n            $uupart->mimetype = $ctype;\n            list($uupart->ctype_primary, $uupart->ctype_secondary) = explode('/', $ctype);\n\n            $parts[] = $uupart;\n            $pid++;\n        }\n\n        return $parts;\n    }\n\n    /**\n     * Fix attachment name encoding if needed/possible\n     */\n    protected function fix_attachment_name($name, $part)\n    {\n        if ($name == rcube_charset::clean($name)) {\n            return $name;\n        }\n\n        // find charset from part or its parent(s)\n        if ($part->charset) {\n            $charsets[] = $part->charset;\n        }\n        else {\n            // check first part (common case)\n            $n = strpos($part->mime_id, '.') ? preg_replace('/\\.[0-9]+$/', '', $part->mime_id) . '.1' : 1;\n            if (($_part = $this->mime_parts[$n]) && $_part->charset) {\n                $charsets[] = $_part->charset;\n            }\n\n            // check parents' charset\n            $items = explode('.', $part->mime_id);\n            for ($i = count($items)-1; $i > 0; $i--) {\n                $last   = array_pop($items);\n                $parent = $this->mime_parts[join('.', $items)];\n\n                if ($parent && $parent->charset) {\n                    $charsets[] = $parent->charset;\n                }\n            }\n        }\n\n        if ($this->headers->charset) {\n            $charsets[] = $this->headers->charset;\n        }\n\n        if (empty($charsets)) {\n            $rcube      = rcube::get_instance();\n            $charsets[] = rcube_charset::detect($name, $rcube->config->get('default_charset', RCUBE_CHARSET));\n        }\n\n        foreach (array_unique($charsets) as $charset) {\n            $_name = rcube_charset::convert($name, $charset);\n\n            if ($_name == rcube_charset::clean($_name)) {\n                if (!$part->charset) {\n                    $part->charset = $charset;\n                }\n\n                return $_name;\n            }\n        }\n\n        return $name;\n    }\n\n    /**\n     * Deprecated methods (to be removed)\n     */\n\n    public static function unfold_flowed($text)\n    {\n        return rcube_mime::unfold_flowed($text);\n    }\n\n    public static function format_flowed($text, $length = 72)\n    {\n        return rcube_mime::format_flowed($text, $length);\n    }\n}\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | This file is part of the Roundcube PHP suite                          |\n | Copyright (C) 2005-2014 The Roundcube Dev Team                        |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | CONTENTS:                                                             |\n |   Abstract class for output generation                                |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <alec@alec.pl>                            |\n +-----------------------------------------------------------------------+\n*/\n\n/**\n * Class for output generation\n *\n * @package    Framework\n * @subpackage View\n */\nabstract class rcube_output\n{\n    public $browser;\n\n    protected $app;\n    protected $config;\n    protected $charset = RCUBE_CHARSET;\n    protected $env = array();\n    protected $skins = array();\n\n\n    /**\n     * Object constructor\n     */\n    public function __construct()\n    {\n        $this->app     = rcube::get_instance();\n        $this->config  = $this->app->config;\n        $this->browser = new rcube_browser();\n    }\n\n    /**\n     * Magic getter\n     */\n    public function __get($var)\n    {\n        // allow read-only access to some members\n        switch ($var) {\n            case 'env':     return $this->env;\n            case 'skins':   return $this->skins;\n            case 'charset': return $this->charset;\n        }\n\n        return null;\n    }\n\n    /**\n     * Setter for output charset.\n     * To be specified in a meta tag and sent as http-header\n     *\n     * @param string $charset Charset name\n     */\n    public function set_charset($charset)\n    {\n        $this->charset = $charset;\n    }\n\n    /**\n     * Getter for output charset\n     *\n     * @return string Output charset name\n     */\n    public function get_charset()\n    {\n        return $this->charset;\n    }\n\n    /**\n     * Set environment variable\n     *\n     * @param string $name   Property name\n     * @param mixed  $value  Property value\n     */\n    public function set_env($name, $value)\n    {\n        $this->env[$name] = $value;\n    }\n\n    /**\n     * Environment variable getter.\n     *\n     * @param string $name  Property name\n     *\n     * @return mixed Property value\n     */\n    public function get_env($name)\n    {\n        return $this->env[$name];\n    }\n\n    /**\n     * Delete all stored env variables and commands\n     */\n    public function reset()\n    {\n        $this->env = array();\n    }\n\n    /**\n     * Invoke display_message command\n     *\n     * @param string  $message  Message to display\n     * @param string  $type     Message type [notice|confirm|error]\n     * @param array   $vars     Key-value pairs to be replaced in localized text\n     * @param boolean $override Override last set message\n     * @param int     $timeout  Message displaying time in seconds\n     */\n    abstract function show_message($message, $type = 'notice', $vars = null, $override = true, $timeout = 0);\n\n    /**\n     * Redirect to a certain url.\n     *\n     * @param mixed $p     Either a string with the action or url parameters as key-value pairs\n     * @param int   $delay Delay in seconds\n     */\n    abstract function redirect($p = array(), $delay = 1);\n\n    /**\n     * Send output to the client.\n     */\n    abstract function send();\n\n    /**\n     * Send HTTP headers to prevent caching a page\n     */\n    public function nocacheing_headers()\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        header(\"Expires: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\n        header(\"Last-Modified: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\n\n        // We need to set the following headers to make downloads work using IE in HTTPS mode.\n        if ($this->browser->ie && rcube_utils::https_check()) {\n            header('Pragma: private');\n            header(\"Cache-Control: private, must-revalidate\");\n        }\n        else {\n            header(\"Cache-Control: private, no-cache, no-store, must-revalidate, post-check=0, pre-check=0\");\n            header(\"Pragma: no-cache\");\n        }\n    }\n\n    /**\n     * Send header with expire date 30 days in future\n     *\n     * @param int Expiration time in seconds\n     */\n    public function future_expire_header($offset = 2600000)\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        header(\"Expires: \" . gmdate(\"D, d M Y H:i:s\", time()+$offset) . \" GMT\");\n        header(\"Cache-Control: max-age=$offset\");\n        header(\"Pragma: \");\n    }\n\n    /**\n     * Send browser compatibility/security/etc. headers\n     */\n    public function common_headers()\n    {\n        if (headers_sent()) {\n            return;\n        }\n\n        // Unlock IE compatibility mode\n        if ($this->browser->ie) {\n            header('X-UA-Compatible: IE=edge');\n        }\n\n        // Request browser to disable DNS prefetching (CVE-2010-0464)\n        header(\"X-DNS-Prefetch-Control: off\");\n\n        // send CSRF and clickjacking protection headers\n        if ($xframe = $this->app->config->get('x_frame_options', 'sameorigin')) {\n            header('X-Frame-Options: ' . $xframe);\n        }\n    }\n\n    /**\n     * Show error page and terminate script execution\n     *\n     * @param int    $code     Error code\n     * @param string $message  Error message\n     */\n    public function raise_error($code, $message)\n    {\n        // STUB: to be overloaded by specific output classes\n        fputs(STDERR, \"Error $code: $message\\n\");\n        exit(-1);\n    }\n\n    /**\n     * Create an edit field for inclusion on a form\n     *\n     * @param string col field name\n     * @param string value field value\n     * @param array attrib HTML element attributes for field\n     * @param string type HTML element type (default 'text')\n     *\n     * @return string HTML field definition\n     */\n    public static function get_edit_field($col, $value, $attrib, $type = 'text')\n    {\n        static $colcounts = array();\n\n        $fname = '_'.$col;\n        $attrib['name']  = $fname . ($attrib['array'] ? '[]' : '');\n        $attrib['class'] = trim($attrib['class'] . ' ff_' . $col);\n\n        if ($type == 'checkbox') {\n            $attrib['value'] = '1';\n            $input = new html_checkbox($attrib);\n        }\n        else if ($type == 'textarea') {\n            $attrib['cols'] = $attrib['size'];\n            $input = new html_textarea($attrib);\n        }\n        else if ($type == 'select') {\n            $input = new html_select($attrib);\n            $input->add('---', '');\n            $input->add(array_values($attrib['options']), array_keys($attrib['options']));\n        }\n        else if ($attrib['type'] == 'password') {\n            $input = new html_passwordfield($attrib);\n        }\n        else {\n            if ($attrib['type'] != 'text' && $attrib['type'] != 'hidden') {\n                $attrib['type'] = 'text';\n            }\n            $input = new html_inputfield($attrib);\n        }\n\n        // use value from post\n        if (isset($_POST[$fname])) {\n            $postvalue = rcube_utils::get_input_value($fname, rcube_utils::INPUT_POST, true);\n            $value = $attrib['array'] ? $postvalue[intval($colcounts[$col]++)] : $postvalue;\n        }\n\n        $out = $input->show($value);\n\n        return $out;\n    }\n\n    /**\n     * Convert a variable into a javascript object notation\n     *\n     * @param mixed Input value\n     *\n     * @return string Serialized JSON string\n     */\n    public static function json_serialize($input)\n    {\n        $input = rcube_charset::clean($input);\n\n        // sometimes even using rcube_charset::clean() the input contains invalid UTF-8 sequences\n        // that's why we have @ here\n        return @json_encode($input);\n    }\n}\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | program/steps/addressbook/export.inc                                  |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2008-2013, The Roundcube Dev Team                       |\n | Copyright (C) 2011-2013, Kolab Systems AG                             |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Export the selected address book as vCard file                      |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n | Author: Aleksander Machniak <machniak@kolabsys.com>                   |\n +-----------------------------------------------------------------------+\n*/\n\n$RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n\n// Use search result\nif (!empty($_REQUEST['_search']) && isset($_SESSION['search'][$_REQUEST['_search']])) {\n    $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n    $search  = (array)$_SESSION['search'][$_REQUEST['_search']];\n    $records = array();\n\n    // Get records from all sources\n    foreach ($search as $s => $set) {\n        $source = $RCMAIL->get_address_book($s);\n\n        // reset page\n        $source->set_page(1);\n        $source->set_pagesize(99999);\n        $source->set_search_set($set);\n\n        // get records\n        $result = $source->list_records();\n\n        while ($record = $result->next()) {\n            // because vcard_map is per-source we need to create vcard here\n            prepare_for_export($record, $source);\n\n            $record['sourceid'] = $s;\n            $key = rcube_addressbook::compose_contact_key($record, $sort_col);\n            $records[$key] = $record;\n        }\n\n        unset($result);\n    }\n\n    // sort the records\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $result = new rcube_result_set($count);\n    $result->records = array_values($records);\n}\n// selected contacts\nelse if (!empty($_REQUEST['_cid'])) {\n    $sort_col = $RCMAIL->config->get('addressbook_sort_col', 'name');\n    $records  = array();\n\n    // Selected contact IDs (with multi-source support)\n    $cids = rcmail_get_cids();\n\n    foreach ($cids as $s => $ids) {\n        $source = $RCMAIL->get_address_book($s);\n        $result = $source->search('ID', $ids, 1, true, true);\n\n        while ($record = $result->next()) {\n            // because vcard_map is per-source we need to create vcard here\n            prepare_for_export($record, $source);\n\n            $record['sourceid'] = $s;\n            $key = rcube_addressbook::compose_contact_key($record, $sort_col);\n            $records[$key] = $record;\n        }\n    }\n\n    ksort($records, SORT_LOCALE_STRING);\n\n    // create resultset object\n    $count  = count($records);\n    $result = new rcube_result_set($count);\n    $result->records = array_values($records);\n}\n// selected directory/group\nelse {\n    $CONTACTS = rcmail_contact_source(null, true);\n\n    // get contacts for this user\n    $CONTACTS->set_page(1);\n    $CONTACTS->set_pagesize(99999);\n    $result = $CONTACTS->list_records(null, 0, true);\n}\n\n// Give plugins a possibility to implement other output formats or modify the result\n$plugin = $RCMAIL->plugins->exec_hook('addressbook_export', array('result' => $result));\n$result = $plugin['result'];\n\nif ($plugin['abort']) {\n    exit;\n}\n\n// send downlaod headers\nheader('Content-Type: text/x-vcard; charset='.RCUBE_CHARSET);\nheader('Content-Disposition: attachment; filename=\"contacts.vcf\"');\n\nwhile ($result && ($row = $result->next())) {\n    if ($CONTACTS) {\n        prepare_for_export($row, $CONTACTS);\n    }\n\n    // fix folding and end-of-line chars\n    $row['vcard'] = preg_replace('/\\r|\\n\\s+/', '', $row['vcard']);\n    $row['vcard'] = preg_replace('/\\n/', rcube_vcard::$eol, $row['vcard']);\n    echo rcube_vcard::rfc2425_fold($row['vcard']) . rcube_vcard::$eol;\n}\n\nexit;\n\n\n/**\n * Copy contact record properties into a vcard object\n */\nfunction prepare_for_export(&$record, $source = null)\n{\n    $groups   = $source && $source->groups && $source->export_groups ? $source->get_record_groups($record['ID']) : null;\n    $fieldmap = $source ? $source->vcard_map : null;\n\n    if (empty($record['vcard'])) {\n        $vcard = new rcube_vcard($record['vcard'], RCUBE_CHARSET, false, $fieldmap);\n        $vcard->reset();\n\n        foreach ($record as $key => $values) {\n            list($field, $section) = explode(':', $key);\n            // avoid unwanted casting of DateTime objects to an array\n            // (same as in rcube_contacts::convert_save_data())\n            if (is_object($values) && is_a($values, 'DateTime')) {\n                $values = array($values);\n            }\n\n            foreach ((array) $values as $value) {\n                if (is_array($value) || is_a($value, 'DateTime') || @strlen($value)) {\n                    $vcard->set($field, $value, strtoupper($section));\n                }\n            }\n        }\n\n        // append group names\n        if ($groups) {\n            $vcard->set('groups', join(',', $groups), null);\n        }\n\n        $record['vcard'] = $vcard->export();\n    }\n    // patch categories to alread existing vcard block\n    else if ($record['vcard']) {\n        $vcard = new rcube_vcard($record['vcard'], RCUBE_CHARSET, false, $fieldmap);\n\n        // unset CATEGORIES entry, it might be not up-to-date (#1490277)\n        $vcard->set('groups', null);\n        $record['vcard'] = $vcard->export();\n\n        if (!empty($groups)) {\n            $vgroups = 'CATEGORIES:' . rcube_vcard::vcard_quote($groups, ',');\n            $record['vcard'] = str_replace('END:VCARD', $vgroups . rcube_vcard::$eol . 'END:VCARD', $record['vcard']);\n        }\n    }\n}\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | program/steps/mail/get.inc                                            |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2005-2013, The Roundcube Dev Team                       |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Delivering a specific part of a mail message                        |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\n\n// show loading page\nif (!empty($_GET['_preload'])) {\n    $_get = $_GET + array('_mimewarning' => 1, '_embed' => 1);\n    unset($_get['_preload']);\n    $url = $RCMAIL->url($_get);\n    $message = $RCMAIL->gettext('loadingdata');\n\n    header('Content-Type: text/html; charset=' . RCUBE_CHARSET);\n    print \"<html>\\n<head>\\n\"\n        . '<meta http-equiv=\"refresh\" content=\"0; url='.rcube::Q($url).'\">' . \"\\n\"\n        . '<meta http-equiv=\"content-type\" content=\"text/html; charset='.RCUBE_CHARSET.'\">' . \"\\n\"\n        . \"</head>\\n<body>\\n$message\\n</body>\\n</html>\";\n    exit;\n}\n\nob_end_clean();\n\n// similar code as in program/steps/mail/show.inc\nif (!empty($_GET['_uid'])) {\n    $uid = rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GET);\n    $RCMAIL->config->set('prefer_html', true);\n    $MESSAGE = new rcube_message($uid, null, intval($_GET['_safe']));\n}\n\n// check connection status\ncheck_storage_status();\n\n$part_id = rcube_utils::get_input_value('_part', rcube_utils::INPUT_GPC);\n\n// show part page\nif (!empty($_GET['_frame'])) {\n    if ($part_id && ($part = $MESSAGE->mime_parts[$part_id])) {\n        $filename = rcmail_attachment_name($part);\n        $OUTPUT->set_pagetitle($filename);\n    }\n\n    // register UI objects\n    $OUTPUT->add_handlers(array(\n        'messagepartframe'    => 'rcmail_message_part_frame',\n        'messagepartcontrols' => 'rcmail_message_part_controls',\n    ));\n\n    $OUTPUT->set_env('mailbox', $RCMAIL->storage->get_folder());\n    $OUTPUT->set_env('uid', $uid);\n    $OUTPUT->set_env('part', $part_id);\n    $OUTPUT->set_env('filename', $filename);\n\n    $OUTPUT->send('messagepart');\n    exit;\n}\n\n// render thumbnail of an image attachment\nelse if ($_GET['_thumb']) {\n    $pid = rcube_utils::get_input_value('_part', rcube_utils::INPUT_GET);\n    if ($part = $MESSAGE->mime_parts[$pid]) {\n        $thumbnail_size = $RCMAIL->config->get('image_thumbnail_size', 240);\n        $temp_dir       = $RCMAIL->config->get('temp_dir');\n        $mimetype       = $part->mimetype;\n        $file_ident     = $MESSAGE->headers->messageID . ':' . $part->mime_id . ':' . $part->size . ':' . $part->mimetype;\n        $cache_basename = $temp_dir . '/' . md5($file_ident . ':' . $RCMAIL->user->ID . ':' . $thumbnail_size);\n        $cache_file     = $cache_basename . '.thumb';\n\n        // render thumbnail image if not done yet\n        if (!is_file($cache_file)) {\n            if ($fp = fopen(($orig_name = $cache_basename . '.tmp'), 'w')) {\n                $MESSAGE->get_part_body($part->mime_id, false, 0, $fp);\n                fclose($fp);\n\n                $image = new rcube_image($orig_name);\n                if ($imgtype = $image->resize($thumbnail_size, $cache_file, true)) {\n                    $mimetype = 'image/' . $imgtype;\n                    unlink($orig_name);\n                }\n                else if (stripos($mimetype, 'image/svg') === 0) {\n                    $content = rcmail_svg_filter(file_get_contents($orig_name));\n                    file_put_contents($cache_file, $content);\n                    unlink($orig_name);\n                }\n                else {\n                    rename($orig_name, $cache_file);\n                }\n            }\n        }\n\n        if (is_file($cache_file)) {\n            header('Content-Type: ' . $mimetype);\n            readfile($cache_file);\n        }\n    }\n\n    exit;\n}\nelse if (strlen($part_id)) {\n    if ($part = $MESSAGE->mime_parts[$part_id]) {\n        $mimetype = rcmail_fix_mimetype($part->mimetype);\n\n        // allow post-processing of the message body\n        $plugin = $RCMAIL->plugins->exec_hook('message_part_get', array(\n            'uid'      => $MESSAGE->uid,\n            'id'       => $part->mime_id,\n            'mimetype' => $mimetype,\n            'part'     => $part,\n            'download' => !empty($_GET['_download'])\n        ));\n\n        if ($plugin['abort']) {\n            exit;\n        }\n\n        // require CSRF protected url for downloads\n        if ($plugin['download'])\n            $RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n\n        // overwrite modified vars from plugin\n        $mimetype   = $plugin['mimetype'];\n        $extensions = rcube_mime::get_mime_extensions($mimetype);\n\n        if ($plugin['body']) {\n            $body = $plugin['body'];\n        }\n\n        // compare file mimetype with the stated content-type headers and file extension to avoid malicious operations\n        if (!empty($_REQUEST['_embed']) && empty($_REQUEST['_nocheck'])) {\n            $file_extension = strtolower(pathinfo($part->filename, PATHINFO_EXTENSION));\n\n            // 1. compare filename suffix with expected suffix derived from mimetype\n            $valid = $file_extension && in_array($file_extension, (array)$extensions) || empty($extensions) || !empty($_REQUEST['_mimeclass']);\n\n            // 2. detect the real mimetype of the attachment part and compare it with the stated mimetype and filename extension\n            if ($valid || !$file_extension || $mimetype == 'application/octet-stream' || stripos($mimetype, 'text/') === 0) {\n                $tmp_body = $body ?: $MESSAGE->get_part_body($part->mime_id, false, 2048);\n\n                // detect message part mimetype\n                $real_mimetype = rcube_mime::file_content_type($tmp_body, $part->filename, $mimetype, true, true);\n                list($real_ctype_primary, $real_ctype_secondary) = explode('/', $real_mimetype);\n\n                // accept text/plain with any extension\n                if ($real_mimetype == 'text/plain' && $real_mimetype == $mimetype) {\n                    $valid_extension = true;\n                }\n                // ignore differences in text/* mimetypes. Filetype detection isn't very reliable here\n                else if ($real_ctype_primary == 'text' && strpos($mimetype, $real_ctype_primary) === 0) {\n                    $real_mimetype   = $mimetype;\n                    $valid_extension = true;\n                }\n                // ignore filename extension if mimeclass matches (#1489029)\n                else if (!empty($_REQUEST['_mimeclass']) && $real_ctype_primary == $_REQUEST['_mimeclass']) {\n                    $valid_extension = true;\n                }\n                else {\n                    // get valid file extensions\n                    $extensions      = rcube_mime::get_mime_extensions($real_mimetype);\n                    $valid_extension = !$file_extension || empty($extensions) || in_array($file_extension, (array)$extensions);\n                }\n\n                // fix mimetype for images wrongly declared as octet-stream\n                if ($mimetype == 'application/octet-stream' && strpos($real_mimetype, 'image/') === 0 && $valid_extension) {\n                    $mimetype = $real_mimetype;\n                }\n\n                // \"fix\" real mimetype the same way the original is before comparison\n                $real_mimetype = rcmail_fix_mimetype($real_mimetype);\n\n                $valid = $real_mimetype == $mimetype && $valid_extension;\n            }\n            else {\n                $real_mimetype = $mimetype;\n            }\n\n            // show warning if validity checks failed\n            if (!$valid) {\n                // send blocked.gif for expected images\n                if (empty($_REQUEST['_mimewarning']) && strpos($mimetype, 'image/') === 0) {\n                    // Do not cache. Failure might be the result of a misconfiguration, thus real content should be returned once fixed. \n                    $content = $RCMAIL->get_resource_content('blocked.gif');\n                    $OUTPUT->nocacheing_headers();\n                    header(\"Content-Type: image/gif\");\n                    header(\"Content-Transfer-Encoding: binary\");\n                    header(\"Content-Length: \" . strlen($content));\n                    echo $content;\n                }\n                else {  // html warning with a button to load the file anyway\n                    $OUTPUT = new rcmail_html_page();\n                    $OUTPUT->write(html::tag('html', null, html::tag('body', 'embed',\n                        html::div(array('class' => 'rcmail-inline-message rcmail-inline-warning'),\n                            $RCMAIL->gettext(array(\n                                'name' => 'attachmentvalidationerror',\n                                'vars' => array(\n                                    'expected' => $mimetype . ($file_extension ? \" (.$file_extension)\" : ''),\n                                    'detected' => $real_mimetype . ($extensions[0] ? \" (.$extensions[0])\" : ''),\n                                )\n                            ))\n                            . html::p(array('class' => 'rcmail-inline-buttons'),\n                                html::tag('button', array(\n                                    'onclick' => \"location.href='\" . $RCMAIL->url(array_merge($_GET, array('_nocheck' => 1))) . \"'\"\n                                ),\n                                $RCMAIL->gettext('showanyway'))\n                            )\n                        ))));\n                }\n\n                exit;\n            }\n        }\n\n\n        // TIFF to JPEG conversion, if needed\n        $tiff_support = !empty($_SESSION['browser_caps']) && !empty($_SESSION['browser_caps']['tif']);\n        if (!empty($_REQUEST['_embed']) && !$tiff_support\n            && rcube_image::is_convertable('image/tiff')\n            && rcmail_part_image_type($part) == 'image/tiff'\n        ) {\n            $tiff2jpeg = true;\n            $mimetype  = 'image/jpeg';\n        }\n\n\n        $browser = $RCMAIL->output->browser;\n        list($ctype_primary, $ctype_secondary) = explode('/', $mimetype);\n\n        if (!$plugin['download'] && $ctype_primary == 'text') {\n            header(\"Content-Type: text/$ctype_secondary; charset=\" . ($part->charset ?: RCUBE_CHARSET));\n        }\n        else {\n            header(\"Content-Type: $mimetype\");\n            header(\"Content-Transfer-Encoding: binary\");\n        }\n\n        // deliver part content\n        if ($ctype_primary == 'text' && $ctype_secondary == 'html' && empty($plugin['download'])) {\n            // Check if we have enough memory to handle the message in it\n            // #1487424: we need up to 10x more memory than the body\n            if (!rcube_utils::mem_check($part->size * 10)) {\n                $out = '<body>' . $RCMAIL->gettext('messagetoobig'). ' '\n                    . html::a('?_task=mail&_action=get&_download=1&_uid='.$MESSAGE->uid.'&_part='.$part->mime_id\n                        .'&_mbox='. urlencode($MESSAGE->folder), $RCMAIL->gettext('download')) . '</body></html>';\n            }\n            else {\n                // get part body if not available\n                if (!isset($body)) {\n                    $body = $MESSAGE->get_part_body($part->mime_id, true);\n                }\n\n                // show images?\n                rcmail_check_safe($MESSAGE);\n\n                // render HTML body\n                $out = rcmail_print_body($body, $part, array('safe' => $MESSAGE->is_safe, 'inline_html' => false));\n\n                // insert remote objects warning into HTML body\n                if ($REMOTE_OBJECTS) {\n                    $body_start = 0;\n                    if ($body_pos = strpos($out, '<body')) {\n                        $body_start = strpos($out, '>', $body_pos) + 1;\n                    }\n\n                    $out = substr($out, 0, $body_start)\n                        . html::div(array('class' => 'rcmail-inline-message rcmail-inline-warning'),\n                            rcube::Q($RCMAIL->gettext('blockedimages')) . '&nbsp;' .\n                            html::tag('button',\n                                array('onclick' => \"location.href='\" . $RCMAIL->url(array_merge($_GET, array('_safe' => 1))) . \"'\"),\n                                rcube::Q($RCMAIL->gettext('showimages')))\n                        )\n                        . substr($out, $body_start);\n                }\n            }\n\n            // check connection status\n            if ($part->size && empty($body)) {\n                check_storage_status();\n            }\n\n            $OUTPUT = new rcmail_html_page();\n            $OUTPUT->write($out);\n        }\n        else {\n            // don't kill the connection if download takes more than 30 sec.\n            @set_time_limit(0);\n\n            $filename = rcmail_attachment_name($part);\n\n            if ($browser->ie)\n                $filename = rawurlencode($filename);\n            else\n                $filename = addcslashes($filename, '\"');\n\n            $disposition = !empty($plugin['download']) ? 'attachment' : 'inline';\n\n            // Workaround for nasty IE bug (#1488844)\n            // If Content-Disposition header contains string \"attachment\" e.g. in filename\n            // IE handles data as attachment not inline\n            if ($disposition == 'inline' && $browser->ie && $browser->ver < 9) {\n                $filename = str_ireplace('attachment', 'attach', $filename);\n            }\n\n            // add filename extension if missing\n            if (!pathinfo($filename, PATHINFO_EXTENSION) && ($extensions = rcube_mime::get_mime_extensions($mimetype))) {\n                $filename .= '.' . $extensions[0];\n            }\n\n            header(\"Content-Disposition: $disposition; filename=\\\"$filename\\\"\");\n\n            // handle tiff to jpeg conversion\n            if (!empty($tiff2jpeg)) {\n                $temp_dir  = unslashify($RCMAIL->config->get('temp_dir'));\n                $file_path = tempnam($temp_dir, 'rcmAttmnt');\n\n                // write content to temp file\n                if ($body) {\n                    $saved = file_put_contents($file_path, $body);\n                }\n                else if ($part->size) {\n                    $fd    = fopen($file_path, 'w');\n                    $saved = $MESSAGE->get_part_body($part->mime_id, false, 0, $fd);\n                    fclose($fd);\n                }\n\n                // convert image to jpeg and send it to the browser\n                if ($sent = $saved) {\n                    $image = new rcube_image($file_path);\n                    if ($image->convert(rcube_image::TYPE_JPG, $file_path)) {\n                        header(\"Content-Length: \" . filesize($file_path));\n                        readfile($file_path);\n                    }\n                    unlink($file_path);\n                }\n            }\n            else {\n                $sent = rcmail_message_part_output($body, $part, $mimetype, $plugin['download']);\n            }\n\n            // check connection status\n            if ($part->size && !$sent) {\n                check_storage_status();\n            }\n        }\n\n        exit;\n    }\n}\n// print message\nelse {\n    // send correct headers for content type\n    header(\"Content-Type: text/html\");\n\n    $cont = \"<html>\\n<head><title></title>\\n</head>\\n<body>\";\n    $cont .= rcmail_message_body(array());\n    $cont .= \"\\n</body>\\n</html>\";\n\n    $OUTPUT = new rcmail_html_page();\n    $OUTPUT->write($cont);\n\n    exit;\n}\n\n\n// if we arrive here, the requested part was not found\nheader('HTTP/1.1 404 Not Found');\nexit;\n\n/**\n * Handles nicely storage connection errors\n */\nfunction check_storage_status()\n{\n    $error = rcmail::get_instance()->storage->get_error_code();\n\n    // Check if we have a connection error\n    if ($error == rcube_imap_generic::ERROR_BAD) {\n        ob_end_clean();\n\n        // Get action is often executed simultanously.\n        // Some servers have MAXPERIP or other limits.\n        // To workaround this we'll wait for some time\n        // and try again (once).\n        // Note: Random sleep interval is used to minimize concurency\n        // in getting message parts\n\n        if (!isset($_GET['_redirected'])) {\n            usleep(rand(10,30)*100000); // 1-3 sec.\n            header('Location: ' . $_SERVER['REQUEST_URI'] . '&_redirected=1');\n        }\n        else {\n            rcube::raise_error(array(\n                'code' => 500, 'type' => 'php',\n                'file' => __FILE__, 'line' => __LINE__,\n                'message' => 'Unable to get/display message part. IMAP connection error'),\n                true, true);\n        }\n\n        // Don't kill session, just quit (#1486995)\n        exit;\n    }\n}\n\n/**\n * Attachment properties table\n */\nfunction rcmail_message_part_controls($attrib)\n{\n    global $MESSAGE, $RCMAIL;\n\n    $part = asciiwords(rcube_utils::get_input_value('_part', rcube_utils::INPUT_GPC));\n    if (!is_object($MESSAGE) || !is_array($MESSAGE->parts)\n        || !($_GET['_uid'] && $_GET['_part']) || !$MESSAGE->mime_parts[$part]\n    ) {\n        return '';\n    }\n\n    $part  = $MESSAGE->mime_parts[$part];\n    $table = new html_table(array('cols' => 2));\n\n    $table->add('title', rcube::Q($RCMAIL->gettext('namex')).':');\n    $table->add('header', rcube::Q(rcmail_attachment_name($part)));\n\n    $table->add('title', rcube::Q($RCMAIL->gettext('type')).':');\n    $table->add('header', rcube::Q($part->mimetype));\n\n    $table->add('title', rcube::Q($RCMAIL->gettext('size')).':');\n    $table->add('header', rcube::Q($RCMAIL->message_part_size($part)));\n\n    return $table->show($attrib);\n}\n\n/**\n * Attachment preview frame\n */\nfunction rcmail_message_part_frame($attrib)\n{\n    global $MESSAGE, $RCMAIL;\n\n    $part = $MESSAGE->mime_parts[asciiwords(rcube_utils::get_input_value('_part', rcube_utils::INPUT_GPC))];\n    $ctype_primary = strtolower($part->ctype_primary);\n\n    $attrib['src'] = './?' . str_replace('_frame=', ($ctype_primary=='text' ? '_embed=' : '_preload='), $_SERVER['QUERY_STRING']);\n\n    $RCMAIL->output->add_gui_object('messagepartframe', $attrib['id']);\n\n    return html::iframe($attrib);\n}\n\n/**\n * Output attachment body with content filtering\n */\nfunction rcmail_message_part_output($body, $part, $mimetype, $download)\n{\n    global $MESSAGE, $RCMAIL;\n\n    if (!$part->size && !$body) {\n        return false;\n    }\n\n    $browser = $RCMAIL->output->browser;\n    $secure  = stripos($mimetype, 'image/') === false || $download;\n\n    // Remove <script> in SVG images\n    if (!$secure && stripos($mimetype, 'image/svg') === 0) {\n        if (!$body) {\n            $body = $MESSAGE->get_part_body($part->mime_id, false);\n            if (empty($body)) {\n                return false;\n            }\n        }\n\n        echo rcmail_svg_filter($body);\n        return true;\n    }\n\n    // Remove dangerous content in images for older IE (to be removed)\n    if (!$secure && $browser->ie && $browser->ver <= 8) {\n        if ($body) {\n            echo preg_match('/<(script|iframe|object)/i', $body) ? '' : $body;\n            return true;\n        }\n        else {\n            $stdout = fopen('php://output', 'w');\n            stream_filter_register('rcube_content', 'rcube_content_filter') or die('Failed to register content filter');\n            stream_filter_append($stdout, 'rcube_content');\n            return $MESSAGE->get_part_body($part->mime_id, true, 0, $stdout);\n        }\n    }\n\n    if ($body && !$download) {\n        header(\"Content-Length: \" . strlen($body));\n        echo $body;\n        return true;\n    }\n\n    // Don't be tempted to set Content-Length to $part->d_parameters['size'] (#1490482)\n    // RFC2183 says \"The size parameter indicates an approximate size\"\n\n    return $MESSAGE->get_part_body($part->mime_id, false, 0, -1);\n}\n\n/**\n * Remove <script> in SVG images\n */\nfunction rcmail_svg_filter($body)\n{\n    // clean SVG with washhtml\n    $wash_opts = array(\n        'show_washed'   => false,\n        'allow_remote'  => false,\n        'charset'       => RCUBE_CHARSET,\n        'html_elements' => array('title'),\n//        'blocked_src'   => 'program/resources/blocked.gif',\n    );\n\n    // initialize HTML washer\n    $washer = new rcube_washtml($wash_opts);\n\n    // allow CSS styles, will be sanitized by rcmail_washtml_callback()\n    $washer->add_callback('style', 'rcmail_washtml_callback');\n\n    return $washer->wash($body);\n}\n", "<?php\n\n/**\n +-----------------------------------------------------------------------+\n | program/steps/mail/viewsource.inc                                     |\n |                                                                       |\n | This file is part of the Roundcube Webmail client                     |\n | Copyright (C) 2005-2013, The Roundcube Dev Team                       |\n |                                                                       |\n | Licensed under the GNU General Public License version 3 or            |\n | any later version with exceptions for skins & plugins.                |\n | See the README file for a full license statement.                     |\n |                                                                       |\n | PURPOSE:                                                              |\n |   Display a mail message similar as a usual mail application does     |\n |                                                                       |\n +-----------------------------------------------------------------------+\n | Author: Thomas Bruederli <roundcube@gmail.com>                        |\n +-----------------------------------------------------------------------+\n*/\n\nif (!empty($_GET['_save'])) {\n    $RCMAIL->request_security_check(rcube_utils::INPUT_GET);\n}\n\nob_end_clean();\n\n// similar code as in program/steps/mail/get.inc\nif ($uid = rcube_utils::get_input_value('_uid', rcube_utils::INPUT_GET)) {\n    $headers = $RCMAIL->storage->get_message_headers($uid);\n    $charset = $headers->charset ?: $RCMAIL->config->get('default_charset');\n\n    header(\"Content-Type: text/plain; charset={$charset}\");\n\n    if (!empty($_GET['_save'])) {\n        $subject  = rcube_mime::decode_header($headers->subject, $headers->charset);\n        $filename = ($subject ?: $RCMAIL->config->get('product_name', 'email')) . '.eml';\n        $browser  = $RCMAIL->output->browser;\n\n        if ($browser->ie)\n            $filename = rawurlencode($filename);\n        else\n            $filename = addcslashes($filename, '\"');\n\n        header(\"Content-Length: {$headers->size}\");\n        header(\"Content-Disposition: attachment; filename=\\\"$filename\\\"\");\n    }\n\n    $RCMAIL->storage->print_raw_body($uid, empty($_GET['_save']));\n}\nelse {\n    rcube::raise_error(array(\n            'code'    => 500,\n            'type'    => 'php',\n            'file'    => __FILE__,\n            'line'    => __LINE__,\n            'message' => \"Message UID $uid not found\"\n        ),\n        true, true);\n}\n\nexit;\n"], "filenames": ["plugins/enigma/enigma.js", "plugins/enigma/lib/enigma_ui.php", "plugins/managesieve/lib/Roundcube/rcube_sieve_engine.php", "plugins/managesieve/managesieve.js", "plugins/zipdownload/zipdownload.js", "plugins/zipdownload/zipdownload.php", "program/include/rcmail.php", "program/include/rcmail_output_html.php", "program/js/app.js", "program/lib/Roundcube/rcube_message.php", "program/lib/Roundcube/rcube_output.php", "program/steps/addressbook/export.inc", "program/steps/mail/get.inc", "program/steps/mail/viewsource.inc"], "buggy_code_start_loc": [160, 461, 399, 184, 57, 66, 842, 519, 1027, 111, 192, 22, 131, 20], "buggy_code_end_loc": [161, 461, 399, 185, 58, 122, 842, 523, 7905, 112, 192, 22, 131, 20], "fixing_code_start_loc": [160, 462, 400, 184, 57, 66, 843, 519, 1027, 111, 193, 23, 132, 21], "fixing_code_end_loc": [161, 464, 402, 185, 58, 127, 845, 523, 7913, 113, 198, 25, 136, 25], "type": "CWE-352", "message": "Cross-site request forgery (CSRF) vulnerability in Roundcube Webmail before 1.1.5 allows remote attackers to hijack the authentication of users for requests that download attachments and cause a denial of service (disk consumption) via unspecified vectors.", "other": {"cve": {"id": "CVE-2016-4069", "sourceIdentifier": "security@debian.org", "published": "2016-08-25T18:59:00.097", "lastModified": "2018-10-30T16:27:32.030", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Cross-site request forgery (CSRF) vulnerability in Roundcube Webmail before 1.1.5 allows remote attackers to hijack the authentication of users for requests that download attachments and cause a denial of service (disk consumption) via unspecified vectors."}, {"lang": "es", "value": "Vulnerabilidad de CSRF en Roundcube Webmail en versiones anteriores a1.1.5 permite a atacantes remotos secuestrar la autenticaci\u00f3n de usuarios para peticiones que descargan archivos adjuntos y provocar una denegaci\u00f3n del servicio (consumo del disco) a trav\u00e9s de vectores no especificados."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:42.1:*:*:*:*:*:*:*", "matchCriteriaId": "4863BE36-D16A-4D75-90D9-FD76DB5B48B7"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:roundcube:webmail:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.1.4", "matchCriteriaId": "01EF6262-F377-47C1-8929-3A099A85FFBA"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-updates/2016-08/msg00079.html", "source": "security@debian.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2016/04/23/4", "source": "security@debian.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/92654", "source": "security@debian.org"}, {"url": "https://github.com/roundcube/roundcubemail/commit/4a408843b0ef816daf70a472a02b78cd6073a4d5", "source": "security@debian.org", "tags": ["Issue Tracking", "Patch"]}, {"url": "https://github.com/roundcube/roundcubemail/commit/699af1e5206ed9114322adaa3c25c1c969640a53", "source": "security@debian.org", "tags": ["Issue Tracking", "Patch"]}, {"url": "https://github.com/roundcube/roundcubemail/issues/4957", "source": "security@debian.org", "tags": ["Mailing List", "Issue Tracking"]}, {"url": "https://github.com/roundcube/roundcubemail/releases/tag/1.1.5", "source": "security@debian.org", "tags": ["Release Notes"]}, {"url": "https://github.com/roundcube/roundcubemail/wiki/Changelog#release-115", "source": "security@debian.org", "tags": ["Release Notes"]}]}, "github_commit_url": "https://github.com/roundcube/roundcubemail/commit/4a408843b0ef816daf70a472a02b78cd6073a4d5"}}