{"buggy_code": ["/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Author:     Chris Brame\n *  Updated:    1/20/19 4:43 PM\n *  Copyright (c) 2014-2019. All rights reserved.\n */\n\nconst _ = require('lodash')\nconst async = require('async')\nconst path = require('path')\nconst passport = require('passport')\nconst winston = require('winston')\nconst pkg = require('../../package')\nconst xss = require('xss')\nconst RateLimiterMemory = require('rate-limiter-flexible').RateLimiterMemory\n\nconst limiterSlowBruteByIP = new RateLimiterMemory({\n  keyPrefix: 'login_fail_ip_per_day',\n  points: 15,\n  duration: 60 * 60 * 24,\n  blockDuration: 60 * 60\n})\n\nconst mainController = {}\n\nmainController.content = {}\n\nmainController.index = function (req, res) {\n  const content = {}\n  content.title = 'Login'\n  content.layout = false\n  content.flash = req.flash('loginMessage')\n\n  const settingsUtil = require('../settings/settingsUtil')\n  settingsUtil.getSettings(function (err, s) {\n    if (err) throw new Error(err)\n    const settings = s.data.settings\n    content.siteTitle = settings.siteTitle.value\n\n    content.allowUserRegistration = settings.allowUserRegistration.value\n    content.mailerEnabled = settings.mailerEnabled.value\n\n    content.colorPrimary = settings.colorPrimary.value\n    content.colorSecondary = settings.colorSecondary.value\n    content.colorTertiary = settings.colorTertiary.value\n\n    content.pageLogo = '/img/defaultLogoDark.png'\n    if (settings.hasCustomPageLogo.value && settings.customPageLogoFilename.value.length > 0) {\n      content.pageLogo = '/assets/' + settings.customPageLogoFilename.value\n    }\n\n    content.bottom = 'Trudesk v' + pkg.version\n\n    res.render('login', content)\n  })\n}\n\nmainController.about = function (req, res) {\n  const pkg = require('../../package.json')\n  const marked = require('marked')\n  const settings = require('../models/setting')\n  settings.getSettingByName('legal:privacypolicy', function (err, privacyPolicy) {\n    if (err)\n      return res.render('error', {\n        layout: false,\n        error: err,\n        message: err.message\n      })\n\n    const content = {}\n    content.title = 'About'\n    content.nav = 'about'\n\n    content.data = {}\n    content.data.user = req.user\n    content.data.common = req.viewdata\n\n    content.data.version = pkg.version\n    if (privacyPolicy === null || _.isUndefined(privacyPolicy.value)) {\n      content.data.privacyPolicy = 'No Privacy Policy has been set.'\n    } else {\n      content.data.privacyPolicy = xss(marked.parse(privacyPolicy.value))\n    }\n\n    return res.render('about', content)\n  })\n}\n\nmainController.dashboard = function (req, res) {\n  const content = {}\n  content.title = 'Dashboard'\n  content.nav = 'dashboard'\n\n  content.data = {}\n  content.data.user = req.user\n  content.data.common = req.viewdata\n\n  return res.render('dashboard', content)\n}\n\nmainController.loginPost = async function (req, res, next) {\n  const ipAddress = req.ip\n  const [resEmailAndIP] = await Promise.all([limiterSlowBruteByIP.get(ipAddress)])\n\n  let retrySecs = 0\n  if (resEmailAndIP !== null && resEmailAndIP.consumedPoints > 2) {\n    retrySecs = Math.round(resEmailAndIP.msBeforeNext / 1000) || 1\n  }\n\n  if (retrySecs > 0) {\n    res.set('Retry-After', retrySecs.toString())\n    // res.status(429).send(`Too many requests. Retry after ${retrySecs} seconds.`)\n    res.status(429).render('429', { timeout: retrySecs.toString(), layout: false })\n  } else {\n    passport.authenticate('local', async function (err, user) {\n      if (err) {\n        winston.error(err)\n        return next(err)\n      }\n      if (!user) {\n        try {\n          await limiterSlowBruteByIP.consume(ipAddress)\n          return res.redirect('/')\n        } catch (rlRejected) {\n          if (rlRejected instanceof Error) throw rlRejected\n          else {\n            const timeout = String(Math.round(rlRejected.msBeforeNext / 1000)) || 1\n            res.set('Retry-After', timeout)\n            res.status(429).render('429', { timeout, layout: false })\n          }\n        }\n      }\n\n      if (user) {\n        let redirectUrl = '/dashboard'\n\n        if (req.session.redirectUrl) {\n          redirectUrl = req.session.redirectUrl\n          req.session.redirectUrl = null\n        }\n\n        if (req.user.role === 'user') {\n          redirectUrl = '/tickets'\n        }\n\n        req.logIn(user, function (err) {\n          if (err) {\n            winston.debug(err)\n            return next(err)\n          }\n\n          return res.redirect(redirectUrl)\n        })\n      }\n    })(req, res, next)\n  }\n}\n\nmainController.l2AuthPost = function (req, res, next) {\n  if (!req.user) {\n    return res.redirect('/')\n  }\n  passport.authenticate('totp', function (err, success) {\n    if (err) {\n      winston.error(err)\n      return next(err)\n    }\n\n    if (!success) return res.redirect('/l2auth')\n\n    req.session.l2auth = 'totp'\n\n    let redirectUrl = '/dashboard'\n\n    if (req.session.redirectUrl) {\n      redirectUrl = req.session.redirectUrl\n      req.session.redirectUrl = null\n    }\n\n    return res.redirect(redirectUrl)\n  })(req, res, next)\n}\n\nmainController.logout = function (req, res) {\n  req.session.l2auth = null\n  req.session.destroy(function () {\n    req.logout()\n    res.clearCookie('connect.sid')\n    return res.redirect('/')\n  })\n}\n\nmainController.forgotL2Auth = function (req, res) {\n  const data = req.body\n  if (_.isUndefined(data['forgotl2auth-email'])) {\n    return res.status(400).send('No Form Data')\n  }\n\n  const email = data['forgotl2auth-email']\n  const userSchema = require('../models/user')\n  userSchema.getUserByEmail(email, function (err, user) {\n    if (err) {\n      return res.status(400).send(err.message)\n    }\n\n    if (!user) {\n      return res.status(400).send('Invalid Email: Account not found!')\n    }\n\n    const Chance = require('chance')\n    const chance = new Chance()\n\n    user.resetL2AuthHash = chance.hash({ casing: 'upper' })\n    const expireDate = new Date()\n    expireDate.setDate(expireDate.getDate() + 2)\n    user.resetL2AuthExpire = expireDate\n\n    user.save(function (err, savedUser) {\n      if (err) {\n        return res.status(400).send(err.message)\n      }\n\n      const mailer = require('../mailer')\n      const Email = require('email-templates')\n      const templateDir = path.resolve(__dirname, '..', 'mailer', 'templates')\n\n      const email = new Email({\n        views: {\n          root: templateDir,\n          options: {\n            extension: 'handlebars'\n          }\n        }\n      })\n\n      savedUser = savedUser.toJSON()\n\n      const data = {\n        base_url: req.protocol + '://' + req.get('host'),\n        user: savedUser\n      }\n\n      email\n        .render('l2auth-reset', data)\n        .then(function (html) {\n          const mailOptions = {\n            to: savedUser.email,\n            subject: '[Trudesk] Account Recovery',\n            html: html,\n            generateTextFromHTML: true\n          }\n\n          mailer.sendMail(mailOptions, function (err) {\n            if (err) {\n              winston.warn(err)\n              return res.status(400).send(err)\n            }\n\n            return res.send('OK')\n          })\n        })\n        .catch(function (err) {\n          winston.warn(err)\n          return res.status(400).send(err.message)\n        })\n    })\n  })\n}\n\nmainController.forgotPass = function (req, res) {\n  const data = req.body\n  if (_.isUndefined(data['forgotPass-email'])) {\n    return res.status(400).send('No Form Data')\n  }\n\n  const email = data['forgotPass-email']\n  const userSchema = require('../models/user')\n  userSchema.getUserByEmail(email, function (err, user) {\n    if (err) {\n      req.flash(err)\n      return res.status(400).send(err.message)\n    }\n\n    if (_.isUndefined(user) || _.isEmpty(user)) {\n      req.flash('Invalid Email: Account not found!')\n      return res.status(400).send('Invalid Email: Account not found!')\n    }\n\n    // Found user send Password Reset Email.\n    // Set User Reset Hash and Expire Date.\n    const Chance = require('chance')\n    const chance = new Chance()\n\n    user.resetPassHash = chance.hash({ casing: 'upper' })\n    const expireDate = new Date()\n    expireDate.setDate(expireDate.getDate() + 2)\n    user.resetPassExpire = expireDate\n\n    user.save(function (err, savedUser) {\n      if (err) {\n        req.flash(err)\n        return res.status(400).send(err.message)\n      }\n\n      // Send mail\n      const mailer = require('../mailer')\n      const Email = require('email-templates')\n      const templateDir = path.resolve(__dirname, '..', 'mailer', 'templates')\n      const templateSchema = require('../models/template')\n\n      let email = null\n\n      savedUser = savedUser.toJSON()\n\n      const data = {\n        base_url: req.protocol + '://' + req.get('host'),\n        user: savedUser\n      }\n\n      async.waterfall(\n        [\n          function (next) {\n            const settingsSchema = require('../models/setting')\n            settingsSchema.getSetting('beta:email', function (err, setting) {\n              if (err) return next(err)\n              const betaEnabled = !setting ? false : setting.value\n\n              return next(null, betaEnabled)\n            })\n          },\n          function (betaEnabled, next) {\n            if (!betaEnabled) return next(null, { betaEnabled: false })\n            templateSchema.findOne({ name: 'password-reset' }, function (err, template) {\n              if (err) return next(err)\n              if (!template) return next(null, { betaEnabled: false })\n\n              email = new Email({\n                render: function (view, locals) {\n                  return new Promise(function (resolve, reject) {\n                    if (!global.Handlebars) return reject(new Error('Could not load global.Handlebars'))\n                    templateSchema.findOne({ name: view }, function (err, template) {\n                      if (err) return reject(err)\n                      if (!template) return reject(new Error('Invalid Template'))\n                      const html = global.Handlebars.compile(template.data['gjs-fullHtml'])(locals)\n                      email.juiceResources(html).then(resolve)\n                    })\n                  })\n                }\n              })\n\n              return next(null, { betaEnabled: true, template: template })\n            })\n          },\n          function (obj, next) {\n            if (obj.betaEnabled) return next(null, obj.template)\n\n            email = new Email({\n              views: {\n                root: templateDir,\n                options: {\n                  extension: 'handlebars'\n                }\n              }\n            })\n\n            return next(null, false)\n          }\n        ],\n        function (err, template) {\n          if (err) {\n            req.flash('loginMessage', 'Error: ' + err)\n            winston.warn(err)\n            return res.status(500).send(err)\n          }\n\n          let subject = '[Trudesk] Password Reset Request'\n          if (template) subject = global.Handlebars.compile(template.subject)(data)\n\n          email\n            .render('password-reset', data)\n            .then(function (html) {\n              const mailOptions = {\n                to: savedUser.email,\n                subject: subject,\n                html: html,\n                generateTextFromHTML: true\n              }\n\n              mailer.sendMail(mailOptions, function (err) {\n                if (err) {\n                  winston.warn(err)\n                  return res.status(400).send(err)\n                }\n                return res.status(200).send()\n              })\n            })\n            .catch(function (err) {\n              req.flash('loginMessage', 'Error: ' + err)\n              winston.warn(err)\n              return res.status(400).send(err.message)\n            })\n        }\n      )\n    })\n  })\n}\n\nmainController.resetl2auth = function (req, res) {\n  const hash = req.params.hash\n  if (_.isUndefined(hash)) {\n    return res.status(400).send('Invalid Link!')\n  }\n\n  const userSchema = require('../models/user')\n  userSchema.getUserByL2ResetHash(hash, function (err, user) {\n    if (err) {\n      return res.status(400).send('Invalid Link!')\n    }\n\n    if (_.isUndefined(user) || _.isEmpty(user)) {\n      return res.status(400).send('Invalid Link!')\n    }\n\n    const now = new Date()\n    if (now < user.resetL2AuthExpire) {\n      user.tOTPKey = undefined\n      user.hasL2Auth = false\n      user.resetL2AuthHash = undefined\n      user.resetL2AuthExpire = undefined\n\n      user.save(function (err, updated) {\n        if (err) {\n          return res.status(500).send(err.message)\n        }\n\n        // Send mail\n        const mailer = require('../mailer')\n        const Email = require('email-templates')\n        const templateDir = path.resolve(__dirname, '..', 'mailer', 'templates')\n\n        const email = new Email({\n          views: {\n            root: templateDir,\n            options: {\n              extension: 'handlebars'\n            }\n          }\n        })\n\n        updated = updated.toJSON()\n\n        email\n          .render('l2auth-cleared', user)\n          .then(function (html) {\n            const mailOptions = {\n              to: updated.email,\n              subject: '[Trudesk] Two-Factor Authentication Removed!',\n              html: html,\n              generateTextFromHTML: true\n            }\n\n            mailer.sendMail(mailOptions, function (err) {\n              if (err) {\n                winston.warn(err)\n                req.flash('loginMessage', err.message)\n                return res.redirect(307, '/')\n              }\n\n              req.flash('loginMessage', 'Account Recovery Email Sent.')\n              return mainController.logout(req, res)\n            })\n          })\n          .catch(function (err) {\n            winston.warn(err)\n            req.flash('loginMessage', err.message)\n            return res.status(400).send(err.message)\n          })\n      })\n    } else {\n      return res.status(400).send('Invalid Link!')\n    }\n  })\n}\n\nmainController.resetPass = function (req, res) {\n  const hash = req.params.hash\n\n  if (_.isUndefined(hash)) {\n    return res.status(400).send('Invalid Link!')\n  }\n\n  const userSchema = require('../models/user')\n  userSchema.getUserByResetHash(hash, function (err, user) {\n    if (err) {\n      return res.status(400).send('Invalid Link!')\n    }\n\n    if (_.isUndefined(user) || _.isEmpty(user)) {\n      return res.status(400).send('Invalid Link!')\n    }\n\n    const now = new Date()\n    if (now < user.resetPassExpire) {\n      const Chance = require('chance')\n      const chance = new Chance()\n      const gPass = chance.string({ length: 8 })\n      user.password = gPass\n\n      user.resetPassHash = undefined\n      user.resetPassExpire = undefined\n\n      user.save(function (err, updated) {\n        if (err) {\n          return res.status(500).send(err.message)\n        }\n\n        // Send mail\n        const mailer = require('../mailer')\n        const Email = require('email-templates')\n        const templateDir = path.resolve(__dirname, '..', 'mailer', 'templates')\n\n        const email = new Email({\n          views: {\n            root: templateDir,\n            options: {\n              extension: 'handlebars'\n            }\n          }\n        })\n\n        updated = updated.toJSON()\n\n        const data = {\n          password: gPass,\n          user: updated\n        }\n\n        email\n          .render('new-password', data)\n          .then(function (html) {\n            const mailOptions = {\n              to: updated.email,\n              subject: '[Trudesk] New Password',\n              html: html,\n              generateTextFromHTML: true\n            }\n\n            mailer.sendMail(mailOptions, function (err) {\n              if (err) {\n                winston.warn(err)\n                req.flash('loginMessage', err.message)\n                return res.redirect(307, '/')\n              }\n\n              req.flash('loginMessage', 'Password reset successfully')\n              return res.redirect(307, '/')\n            })\n          })\n          .catch(function (err) {\n            winston.warn(err)\n            req.flash('Error: ' + err.message)\n            res.status(400).send(err.message)\n          })\n      })\n    }\n  })\n}\n\nmainController.l2authget = function (req, res) {\n  if (!req.user || !req.user.hasL2Auth) {\n    req.logout()\n    return res.redirect('/')\n  }\n\n  const content = {}\n  content.title = 'Login'\n  content.layout = false\n\n  const settings = require('../models/setting')\n  settings.getSettingByName('mailer:enable', function (err, setting) {\n    if (err) {\n      throw new Error(err)\n    }\n\n    if (!_.isNull(setting)) {\n      content.mailerEnabled = setting.value\n    }\n\n    return res.render('login-otp', content)\n  })\n}\n\nmainController.uploadFavicon = function (req, res) {\n  const fs = require('fs')\n  const settingUtil = require('../settings/settingsUtil')\n  const Busboy = require('busboy')\n  const busboy = Busboy({\n    headers: req.headers,\n    limit: {\n      file: 1,\n      fileSize: 1024 * 1024 * 1\n    }\n  })\n\n  const object = {}\n  let error\n\n  busboy.on('file', function (name, file, info) {\n    const filename = info.filename\n    const mimetype = info.mimeType\n\n    if (mimetype.indexOf('image/') === -1) {\n      error = {\n        status: 400,\n        message: 'Invalid File Type'\n      }\n\n      return file.resume()\n    }\n\n    const savePath = path.join(__dirname, '../../public/uploads/assets')\n    if (!fs.existsSync(savePath)) fs.mkdirSync(savePath)\n\n    object.filePath = path.join(savePath, 'favicon' + path.extname(filename))\n    object.filename = 'favicon' + path.extname(filename)\n    object.mimetype = mimetype\n\n    file.on('limit', function () {\n      error = {\n        stats: 400,\n        message: 'File size too large. File size limit: 1mb'\n      }\n\n      return file.resume()\n    })\n\n    file.pipe(fs.createWriteStream(object.filePath))\n  })\n\n  busboy.on('finish', function () {\n    if (error) {\n      winston.warn(error)\n      return res.status(error.status).send(error.message)\n    }\n\n    if (_.isUndefined(object.filePath) || _.isUndefined(object.filename)) {\n      return res.status(400).send('Invalid image data')\n    }\n\n    if (!fs.existsSync(object.filePath)) return res.status(400).send('File failed to save to disk')\n\n    settingUtil.setSetting('gen:customfavicon', true, function (err) {\n      if (err) return res.status(400).send('Failed to save setting to database')\n\n      settingUtil.setSetting('gen:customfaviconfilename', object.filename, function (err) {\n        if (err) return res.status(400).send('Failed to save setting to database')\n\n        return res.send(object.filename)\n      })\n    })\n  })\n\n  req.pipe(busboy)\n}\n\nmainController.uploadLogo = function (req, res) {\n  const fs = require('fs')\n  const settingUtil = require('../settings/settingsUtil')\n  const Busboy = require('busboy')\n  const busboy = Busboy({\n    headers: req.headers,\n    limits: {\n      files: 1,\n      fileSize: 1024 * 1024 * 3 // 3mb\n    }\n  })\n\n  const object = {}\n  let error\n\n  busboy.on('file', function (name, file, info) {\n    const filename = info.filename\n    const mimetype = info.mimeType\n    if (mimetype.indexOf('image/') === -1) {\n      error = {\n        status: 400,\n        message: 'Invalid File Type'\n      }\n\n      return file.resume()\n    }\n\n    const savePath = path.join(__dirname, '../../public/uploads/assets')\n    if (!fs.existsSync(savePath)) fs.mkdirSync(savePath)\n\n    object.filePath = path.join(savePath, 'topLogo' + path.extname(filename))\n    object.filename = 'topLogo' + path.extname(filename)\n    object.mimetype = mimetype\n\n    file.on('limit', function () {\n      error = {\n        stats: 400,\n        message: 'File size too large. File size limit: 3mb'\n      }\n\n      return file.resume()\n    })\n\n    file.pipe(fs.createWriteStream(object.filePath))\n  })\n\n  busboy.once('finish', function () {\n    if (error) {\n      winston.warn(error)\n      return res.status(error.status).send(error.message)\n    }\n\n    if (_.isUndefined(object.filePath) || _.isUndefined(object.filename)) {\n      return res.status(400).send('Invalid image data')\n    }\n\n    if (!fs.existsSync(object.filePath)) return res.status(400).send('File failed to save to disk')\n\n    settingUtil.setSetting('gen:customlogo', true, function (err) {\n      if (err) return res.status(400).send('Failed to save setting to database')\n\n      settingUtil.setSetting('gen:customlogofilename', object.filename, function (err) {\n        if (err) return res.status(400).send('Failed to save setting to database')\n\n        return res.send(object.filename)\n      })\n    })\n  })\n\n  req.pipe(busboy)\n}\n\nmainController.uploadPageLogo = function (req, res) {\n  const fs = require('fs')\n  const settingUtil = require('../settings/settingsUtil')\n  const Busboy = require('busboy')\n  const busboy = Busboy({\n    headers: req.headers,\n    limits: {\n      files: 1,\n      fileSize: 1024 * 1024 * 3 // 3mb\n    }\n  })\n\n  const object = {}\n  let error\n\n  busboy.on('file', function (name, file, info) {\n    const filename = info.filename\n    const mimetype = info.mimeType\n\n    if (mimetype.indexOf('image/') === -1) {\n      error = {\n        status: 400,\n        message: 'Invalid File Type'\n      }\n\n      return file.resume()\n    }\n\n    const savePath = path.join(__dirname, '../../public/uploads/assets')\n    if (!fs.existsSync(savePath)) fs.mkdirSync(savePath)\n\n    object.filePath = path.join(savePath, 'pageLogo' + path.extname(filename))\n    object.filename = 'pageLogo' + path.extname(filename)\n    object.mimetype = mimetype\n\n    file.on('limit', function () {\n      error = {\n        stats: 400,\n        message: 'File size too large. File size limit: 3mb'\n      }\n\n      return file.resume()\n    })\n\n    file.pipe(fs.createWriteStream(object.filePath))\n  })\n\n  busboy.once('finish', function () {\n    if (error) {\n      winston.warn(error)\n      return res.status(error.status).send(error.message)\n    }\n\n    if (_.isUndefined(object.filePath) || _.isUndefined(object.filename)) {\n      return res.status(400).send('Invalid image data')\n    }\n\n    if (!fs.existsSync(object.filePath)) return res.status(400).send('File failed to save to disk')\n\n    settingUtil.setSetting('gen:custompagelogo', true, function (err) {\n      if (err) return res.status(400).send('Failed to save setting to database')\n\n      settingUtil.setSetting('gen:custompagelogofilename', object.filename, function (err) {\n        if (err) return res.status(400).send('Failed to save setting to database')\n\n        return res.send(object.filename)\n      })\n    })\n  })\n\n  req.pipe(busboy)\n}\n\nmodule.exports = mainController\n"], "fixing_code": ["/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Author:     Chris Brame\n *  Updated:    1/20/19 4:43 PM\n *  Copyright (c) 2014-2019. All rights reserved.\n */\n\nconst _ = require('lodash')\nconst async = require('async')\nconst path = require('path')\nconst passport = require('passport')\nconst winston = require('winston')\nconst pkg = require('../../package')\nconst xss = require('xss')\nconst RateLimiterMemory = require('rate-limiter-flexible').RateLimiterMemory\n\nconst limiterSlowBruteByIP = new RateLimiterMemory({\n  keyPrefix: 'login_fail_ip_per_day',\n  points: 15,\n  duration: 60 * 60 * 24,\n  blockDuration: 60 * 60\n})\n\nconst mainController = {}\n\nmainController.content = {}\n\nmainController.index = function (req, res) {\n  const content = {}\n  content.title = 'Login'\n  content.layout = false\n  content.flash = req.flash('loginMessage')\n\n  const settingsUtil = require('../settings/settingsUtil')\n  settingsUtil.getSettings(function (err, s) {\n    if (err) throw new Error(err)\n    const settings = s.data.settings\n    content.siteTitle = settings.siteTitle.value\n\n    content.allowUserRegistration = settings.allowUserRegistration.value\n    content.mailerEnabled = settings.mailerEnabled.value\n\n    content.colorPrimary = settings.colorPrimary.value\n    content.colorSecondary = settings.colorSecondary.value\n    content.colorTertiary = settings.colorTertiary.value\n\n    content.pageLogo = '/img/defaultLogoDark.png'\n    if (settings.hasCustomPageLogo.value && settings.customPageLogoFilename.value.length > 0) {\n      content.pageLogo = '/assets/' + settings.customPageLogoFilename.value\n    }\n\n    content.bottom = 'Trudesk v' + pkg.version\n\n    res.render('login', content)\n  })\n}\n\nmainController.about = function (req, res) {\n  const pkg = require('../../package.json')\n  const marked = require('marked')\n  const settings = require('../models/setting')\n  settings.getSettingByName('legal:privacypolicy', function (err, privacyPolicy) {\n    if (err)\n      return res.render('error', {\n        layout: false,\n        error: err,\n        message: err.message\n      })\n\n    const content = {}\n    content.title = 'About'\n    content.nav = 'about'\n\n    content.data = {}\n    content.data.user = req.user\n    content.data.common = req.viewdata\n\n    content.data.version = pkg.version\n    if (privacyPolicy === null || _.isUndefined(privacyPolicy.value)) {\n      content.data.privacyPolicy = 'No Privacy Policy has been set.'\n    } else {\n      content.data.privacyPolicy = xss(marked.parse(privacyPolicy.value))\n    }\n\n    return res.render('about', content)\n  })\n}\n\nmainController.dashboard = function (req, res) {\n  const content = {}\n  content.title = 'Dashboard'\n  content.nav = 'dashboard'\n\n  content.data = {}\n  content.data.user = req.user\n  content.data.common = req.viewdata\n\n  return res.render('dashboard', content)\n}\n\nmainController.loginPost = async function (req, res, next) {\n  const ipAddress = req.ip\n  const [resEmailAndIP] = await Promise.all([limiterSlowBruteByIP.get(ipAddress)])\n\n  let retrySecs = 0\n  if (resEmailAndIP !== null && resEmailAndIP.consumedPoints > 2) {\n    retrySecs = Math.round(resEmailAndIP.msBeforeNext / 1000) || 1\n  }\n\n  if (retrySecs > 0) {\n    res.set('Retry-After', retrySecs.toString())\n    // res.status(429).send(`Too many requests. Retry after ${retrySecs} seconds.`)\n    res.status(429).render('429', { timeout: retrySecs.toString(), layout: false })\n  } else {\n    passport.authenticate('local', async function (err, user) {\n      if (err) {\n        winston.error(err)\n        return next(err)\n      }\n      if (!user) {\n        try {\n          await limiterSlowBruteByIP.consume(ipAddress)\n          return res.redirect('/')\n        } catch (rlRejected) {\n          if (rlRejected instanceof Error) throw rlRejected\n          else {\n            const timeout = String(Math.round(rlRejected.msBeforeNext / 1000)) || 1\n            res.set('Retry-After', timeout)\n            res.status(429).render('429', { timeout, layout: false })\n          }\n        }\n      }\n\n      if (user) {\n        let redirectUrl = '/dashboard'\n\n        if (req.session.redirectUrl) {\n          redirectUrl = req.session.redirectUrl\n          req.session.redirectUrl = null\n        }\n\n        if (req.user.role === 'user') {\n          redirectUrl = '/tickets'\n        }\n\n        req.logIn(user, function (err) {\n          if (err) {\n            winston.debug(err)\n            return next(err)\n          }\n\n          return res.redirect(redirectUrl)\n        })\n      }\n    })(req, res, next)\n  }\n}\n\nmainController.l2AuthPost = function (req, res, next) {\n  if (!req.user) {\n    return res.redirect('/')\n  }\n  passport.authenticate('totp', function (err, success) {\n    if (err) {\n      winston.error(err)\n      return next(err)\n    }\n\n    if (!success) return res.redirect('/l2auth')\n\n    req.session.l2auth = 'totp'\n\n    let redirectUrl = '/dashboard'\n\n    if (req.session.redirectUrl) {\n      redirectUrl = req.session.redirectUrl\n      req.session.redirectUrl = null\n    }\n\n    return res.redirect(redirectUrl)\n  })(req, res, next)\n}\n\nmainController.logout = function (req, res) {\n  req.session.l2auth = null\n  req.session.destroy(function () {\n    req.logout()\n    res.clearCookie('connect.sid')\n    return res.redirect('/')\n  })\n}\n\nmainController.forgotL2Auth = function (req, res) {\n  const data = req.body\n  if (_.isUndefined(data['forgotl2auth-email'])) {\n    return res.status(400).send('No Form Data')\n  }\n\n  const email = data['forgotl2auth-email']\n  const userSchema = require('../models/user')\n  userSchema.getUserByEmail(email, function (err, user) {\n    if (err) {\n      return res.status(400).send(err.message)\n    }\n\n    if (!user) {\n      return res.status(400).send('Invalid Email: Account not found!')\n    }\n\n    const Chance = require('chance')\n    const chance = new Chance()\n\n    user.resetL2AuthHash = chance.hash({ casing: 'upper' })\n    const expireDate = new Date()\n    expireDate.setDate(expireDate.getDate() + 2)\n    user.resetL2AuthExpire = expireDate\n\n    user.save(function (err, savedUser) {\n      if (err) {\n        return res.status(400).send(err.message)\n      }\n\n      const mailer = require('../mailer')\n      const Email = require('email-templates')\n      const templateDir = path.resolve(__dirname, '..', 'mailer', 'templates')\n\n      const email = new Email({\n        views: {\n          root: templateDir,\n          options: {\n            extension: 'handlebars'\n          }\n        }\n      })\n\n      savedUser = savedUser.toJSON()\n\n      const data = {\n        base_url: req.protocol + '://' + req.get('host'),\n        user: savedUser\n      }\n\n      email\n        .render('l2auth-reset', data)\n        .then(function (html) {\n          const mailOptions = {\n            to: savedUser.email,\n            subject: '[Trudesk] Account Recovery',\n            html: html,\n            generateTextFromHTML: true\n          }\n\n          mailer.sendMail(mailOptions, function (err) {\n            if (err) {\n              winston.warn(err)\n              return res.status(400).send(err)\n            }\n\n            return res.send('OK')\n          })\n        })\n        .catch(function (err) {\n          winston.warn(err)\n          return res.status(400).send(err.message)\n        })\n    })\n  })\n}\n\nmainController.forgotPass = function (req, res) {\n  const data = req.body\n  if (_.isUndefined(data['forgotPass-email'])) {\n    return res.status(400).send('No Form Data')\n  }\n\n  const email = data['forgotPass-email']\n  const userSchema = require('../models/user')\n  userSchema.getUserByEmail(email, function (err, user) {\n    if (err) {\n      req.flash(err)\n      return res.status(400).send(err.message)\n    }\n\n    if (_.isUndefined(user) || _.isEmpty(user)) {\n      req.flash('Invalid Email: Account not found!')\n      return res.status(400).send('Invalid Email: Account not found!')\n    }\n\n    // Found user send Password Reset Email.\n    // Set User Reset Hash and Expire Date.\n    const Chance = require('chance')\n    const chance = new Chance()\n\n    user.resetPassHash = chance.hash({ casing: 'upper' })\n    const expireDate = new Date()\n    expireDate.setDate(expireDate.getDate() + 2)\n    user.resetPassExpire = expireDate\n\n    user.save(function (err, savedUser) {\n      if (err) {\n        req.flash(err)\n        return res.status(400).send(err.message)\n      }\n\n      // Send mail\n      const mailer = require('../mailer')\n      const Email = require('email-templates')\n      const templateDir = path.resolve(__dirname, '..', 'mailer', 'templates')\n      const templateSchema = require('../models/template')\n\n      let email = null\n\n      savedUser = savedUser.toJSON()\n\n      const data = {\n        base_url: req.protocol + '://' + req.get('host'),\n        user: savedUser\n      }\n\n      async.waterfall(\n        [\n          function (next) {\n            const settingsSchema = require('../models/setting')\n            settingsSchema.getSetting('beta:email', function (err, setting) {\n              if (err) return next(err)\n              const betaEnabled = !setting ? false : setting.value\n\n              return next(null, betaEnabled)\n            })\n          },\n          function (betaEnabled, next) {\n            if (!betaEnabled) return next(null, { betaEnabled: false })\n            templateSchema.findOne({ name: 'password-reset' }, function (err, template) {\n              if (err) return next(err)\n              if (!template) return next(null, { betaEnabled: false })\n\n              email = new Email({\n                render: function (view, locals) {\n                  return new Promise(function (resolve, reject) {\n                    if (!global.Handlebars) return reject(new Error('Could not load global.Handlebars'))\n                    templateSchema.findOne({ name: view }, function (err, template) {\n                      if (err) return reject(err)\n                      if (!template) return reject(new Error('Invalid Template'))\n                      const html = global.Handlebars.compile(template.data['gjs-fullHtml'])(locals)\n                      email.juiceResources(html).then(resolve)\n                    })\n                  })\n                }\n              })\n\n              return next(null, { betaEnabled: true, template: template })\n            })\n          },\n          function (obj, next) {\n            if (obj.betaEnabled) return next(null, obj.template)\n\n            email = new Email({\n              views: {\n                root: templateDir,\n                options: {\n                  extension: 'handlebars'\n                }\n              }\n            })\n\n            return next(null, false)\n          }\n        ],\n        function (err, template) {\n          if (err) {\n            req.flash('loginMessage', 'Error: ' + err)\n            winston.warn(err)\n            return res.status(500).send(err)\n          }\n\n          let subject = '[Trudesk] Password Reset Request'\n          if (template) subject = global.Handlebars.compile(template.subject)(data)\n\n          email\n            .render('password-reset', data)\n            .then(function (html) {\n              const mailOptions = {\n                to: savedUser.email,\n                subject: subject,\n                html: html,\n                generateTextFromHTML: true\n              }\n\n              mailer.sendMail(mailOptions, function (err) {\n                if (err) {\n                  winston.warn(err)\n                  return res.status(400).send(err)\n                }\n                return res.status(200).send()\n              })\n            })\n            .catch(function (err) {\n              req.flash('loginMessage', 'Error: ' + err)\n              winston.warn(err)\n              return res.status(400).send(err.message)\n            })\n        }\n      )\n    })\n  })\n}\n\nmainController.resetl2auth = function (req, res) {\n  const hash = req.params.hash\n  if (_.isUndefined(hash)) {\n    return res.status(400).send('Invalid Link!')\n  }\n\n  const userSchema = require('../models/user')\n  userSchema.getUserByL2ResetHash(hash, function (err, user) {\n    if (err) {\n      return res.status(400).send('Invalid Link!')\n    }\n\n    if (_.isUndefined(user) || _.isEmpty(user)) {\n      return res.status(400).send('Invalid Link!')\n    }\n\n    const now = new Date()\n    if (now < user.resetL2AuthExpire) {\n      user.tOTPKey = undefined\n      user.hasL2Auth = false\n      user.resetL2AuthHash = undefined\n      user.resetL2AuthExpire = undefined\n\n      user.save(function (err, updated) {\n        if (err) {\n          return res.status(500).send(err.message)\n        }\n\n        // Send mail\n        const mailer = require('../mailer')\n        const Email = require('email-templates')\n        const templateDir = path.resolve(__dirname, '..', 'mailer', 'templates')\n\n        const email = new Email({\n          views: {\n            root: templateDir,\n            options: {\n              extension: 'handlebars'\n            }\n          }\n        })\n\n        updated = updated.toJSON()\n\n        email\n          .render('l2auth-cleared', user)\n          .then(function (html) {\n            const mailOptions = {\n              to: updated.email,\n              subject: '[Trudesk] Two-Factor Authentication Removed!',\n              html: html,\n              generateTextFromHTML: true\n            }\n\n            mailer.sendMail(mailOptions, function (err) {\n              if (err) {\n                winston.warn(err)\n                req.flash('loginMessage', err.message)\n                return res.redirect(307, '/')\n              }\n\n              req.flash('loginMessage', 'Account Recovery Email Sent.')\n              return mainController.logout(req, res)\n            })\n          })\n          .catch(function (err) {\n            winston.warn(err)\n            req.flash('loginMessage', err.message)\n            return res.status(400).send(err.message)\n          })\n      })\n    } else {\n      return res.status(400).send('Invalid Link!')\n    }\n  })\n}\n\nmainController.resetPass = function (req, res) {\n  const hash = req.params.hash\n\n  if (_.isUndefined(hash)) {\n    return res.status(400).send('Invalid Link!')\n  }\n\n  const userSchema = require('../models/user')\n  userSchema.getUserByResetHash(hash, function (err, user) {\n    if (err) {\n      return res.status(400).send('Invalid Link!')\n    }\n\n    if (_.isUndefined(user) || _.isEmpty(user)) {\n      return res.status(400).send('Invalid Link!')\n    }\n\n    const now = new Date()\n    if (now < user.resetPassExpire) {\n      const Chance = require('chance')\n      const chance = new Chance()\n      const gPass = chance.string({ length: 8 })\n      user.password = gPass\n\n      user.resetPassHash = undefined\n      user.resetPassExpire = undefined\n\n      user.save(function (err, updated) {\n        if (err) {\n          return res.status(500).send(err.message)\n        }\n\n        // Send mail\n        const mailer = require('../mailer')\n        const Email = require('email-templates')\n        const templateDir = path.resolve(__dirname, '..', 'mailer', 'templates')\n\n        const email = new Email({\n          views: {\n            root: templateDir,\n            options: {\n              extension: 'handlebars'\n            }\n          }\n        })\n\n        updated = updated.toJSON()\n\n        const data = {\n          password: gPass,\n          user: updated\n        }\n\n        email\n          .render('new-password', data)\n          .then(function (html) {\n            const mailOptions = {\n              to: updated.email,\n              subject: '[Trudesk] New Password',\n              html: html,\n              generateTextFromHTML: true\n            }\n\n            mailer.sendMail(mailOptions, function (err) {\n              if (err) {\n                winston.warn(err)\n                req.flash('loginMessage', err.message)\n                return res.redirect(307, '/')\n              }\n\n              req.flash('loginMessage', 'Password reset successfully')\n              return res.redirect(307, '/')\n            })\n          })\n          .catch(function (err) {\n            winston.warn(err)\n            req.flash('Error: ' + err.message)\n            res.status(400).send(err.message)\n          })\n      })\n    }\n  })\n}\n\nmainController.l2authget = function (req, res) {\n  if (!req.user || !req.user.hasL2Auth) {\n    req.logout()\n    return res.redirect('/')\n  }\n\n  const content = {}\n  content.title = 'Login'\n  content.layout = false\n\n  const settings = require('../models/setting')\n  settings.getSettingByName('mailer:enable', function (err, setting) {\n    if (err) {\n      throw new Error(err)\n    }\n\n    if (!_.isNull(setting)) {\n      content.mailerEnabled = setting.value\n    }\n\n    return res.render('login-otp', content)\n  })\n}\n\nmainController.uploadFavicon = function (req, res) {\n  const fs = require('fs')\n  const settingUtil = require('../settings/settingsUtil')\n  const Busboy = require('busboy')\n  const busboy = Busboy({\n    headers: req.headers,\n    limit: {\n      file: 1,\n      fileSize: 1024 * 1024 * 1\n    }\n  })\n\n  const object = {}\n  let error\n\n  busboy.on('file', function (name, file, info) {\n    const filename = info.filename\n    const mimetype = info.mimeType\n\n    if (mimetype.indexOf('image/') === -1) {\n      error = {\n        status: 400,\n        message: 'Invalid File Type'\n      }\n\n      return file.resume()\n    }\n\n    const savePath = path.join(__dirname, '../../public/uploads/assets')\n    if (!fs.existsSync(savePath)) fs.mkdirSync(savePath)\n\n    object.filePath = path.join(savePath, 'favicon' + path.extname(filename))\n    object.filename = 'favicon' + path.extname(filename)\n    object.mimetype = mimetype\n\n    file.on('limit', function () {\n      error = {\n        stats: 400,\n        message: 'File size too large. File size limit: 1mb'\n      }\n\n      return file.resume()\n    })\n\n    file.pipe(fs.createWriteStream(object.filePath))\n  })\n\n  busboy.on('finish', function () {\n    if (error) {\n      winston.warn(error)\n      return res.status(error.status).send(error.message)\n    }\n\n    if (_.isUndefined(object.filePath) || _.isUndefined(object.filename)) {\n      return res.status(400).send('Invalid image data')\n    }\n\n    if (!fs.existsSync(object.filePath)) return res.status(400).send('File failed to save to disk')\n    if (path.extname(object.filename) === '.jpg' || path.extname(object.filename) === '.jpeg') {\n      require('../helpers/utils').stripExifData(object.filePath)\n    }\n\n    settingUtil.setSetting('gen:customfavicon', true, function (err) {\n      if (err) return res.status(400).send('Failed to save setting to database')\n\n      settingUtil.setSetting('gen:customfaviconfilename', object.filename, function (err) {\n        if (err) return res.status(400).send('Failed to save setting to database')\n\n        return res.send(object.filename)\n      })\n    })\n  })\n\n  req.pipe(busboy)\n}\n\nmainController.uploadLogo = function (req, res) {\n  const fs = require('fs')\n  const settingUtil = require('../settings/settingsUtil')\n  const Busboy = require('busboy')\n  const busboy = Busboy({\n    headers: req.headers,\n    limits: {\n      files: 1,\n      fileSize: 1024 * 1024 * 3 // 3mb\n    }\n  })\n\n  const object = {}\n  let error\n\n  busboy.on('file', function (name, file, info) {\n    const filename = info.filename\n    const mimetype = info.mimeType\n    if (mimetype.indexOf('image/') === -1) {\n      error = {\n        status: 400,\n        message: 'Invalid File Type'\n      }\n\n      return file.resume()\n    }\n\n    const savePath = path.join(__dirname, '../../public/uploads/assets')\n    if (!fs.existsSync(savePath)) fs.mkdirSync(savePath)\n\n    object.filePath = path.join(savePath, 'topLogo' + path.extname(filename))\n    object.filename = 'topLogo' + path.extname(filename)\n    object.mimetype = mimetype\n\n    file.on('limit', function () {\n      error = {\n        stats: 400,\n        message: 'File size too large. File size limit: 3mb'\n      }\n\n      return file.resume()\n    })\n\n    file.pipe(fs.createWriteStream(object.filePath))\n  })\n\n  busboy.once('finish', function () {\n    if (error) {\n      winston.warn(error)\n      return res.status(error.status).send(error.message)\n    }\n\n    if (_.isUndefined(object.filePath) || _.isUndefined(object.filename)) {\n      return res.status(400).send('Invalid image data')\n    }\n\n    if (!fs.existsSync(object.filePath)) return res.status(400).send('File failed to save to disk')\n    if (path.extname(object.filename) === '.jpg' || path.extname(object.filename) === '.jpeg') {\n      require('../helpers/utils').stripExifData(object.filePath)\n    }\n\n    settingUtil.setSetting('gen:customlogo', true, function (err) {\n      if (err) return res.status(400).send('Failed to save setting to database')\n\n      settingUtil.setSetting('gen:customlogofilename', object.filename, function (err) {\n        if (err) return res.status(400).send('Failed to save setting to database')\n\n        return res.send(object.filename)\n      })\n    })\n  })\n\n  req.pipe(busboy)\n}\n\nmainController.uploadPageLogo = function (req, res) {\n  const fs = require('fs')\n  const settingUtil = require('../settings/settingsUtil')\n  const Busboy = require('busboy')\n  const busboy = Busboy({\n    headers: req.headers,\n    limits: {\n      files: 1,\n      fileSize: 1024 * 1024 * 3 // 3mb\n    }\n  })\n\n  const object = {}\n  let error\n\n  busboy.on('file', function (name, file, info) {\n    const filename = info.filename\n    const mimetype = info.mimeType\n\n    if (mimetype.indexOf('image/') === -1) {\n      error = {\n        status: 400,\n        message: 'Invalid File Type'\n      }\n\n      return file.resume()\n    }\n\n    const savePath = path.join(__dirname, '../../public/uploads/assets')\n    if (!fs.existsSync(savePath)) fs.mkdirSync(savePath)\n\n    object.filePath = path.join(savePath, 'pageLogo' + path.extname(filename))\n    object.filename = 'pageLogo' + path.extname(filename)\n    object.mimetype = mimetype\n\n    file.on('limit', function () {\n      error = {\n        stats: 400,\n        message: 'File size too large. File size limit: 3mb'\n      }\n\n      return file.resume()\n    })\n\n    file.pipe(fs.createWriteStream(object.filePath))\n  })\n\n  busboy.once('finish', function () {\n    if (error) {\n      winston.warn(error)\n      return res.status(error.status).send(error.message)\n    }\n\n    if (_.isUndefined(object.filePath) || _.isUndefined(object.filename)) {\n      return res.status(400).send('Invalid image data')\n    }\n\n    if (!fs.existsSync(object.filePath)) return res.status(400).send('File failed to save to disk')\n    if (path.extname(object.filename) === '.jpg' || path.extname(object.filename) === '.jpeg') {\n      require('../helpers/utils').stripExifData(object.filePath)\n    }\n\n    settingUtil.setSetting('gen:custompagelogo', true, function (err) {\n      if (err) return res.status(400).send('Failed to save setting to database')\n\n      settingUtil.setSetting('gen:custompagelogofilename', object.filename, function (err) {\n        if (err) return res.status(400).send('Failed to save setting to database')\n\n        return res.send(object.filename)\n      })\n    })\n  })\n\n  req.pipe(busboy)\n}\n\nmodule.exports = mainController\n"], "filenames": ["src/controllers/main.js"], "buggy_code_start_loc": [657], "buggy_code_end_loc": [802], "fixing_code_start_loc": [658], "fixing_code_end_loc": [812], "type": "CWE-200", "message": "Exposure of Sensitive Information to an Unauthorized Actor in GitHub repository polonel/trudesk prior to 1.2.3.", "other": {"cve": {"id": "CVE-2022-1893", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-31T22:15:08.710", "lastModified": "2022-06-14T19:10:07.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Exposure of Sensitive Information to an Unauthorized Actor in GitHub repository polonel/trudesk prior to 1.2.3."}, {"lang": "es", "value": "Una Exposici\u00f3n de Informaci\u00f3n Sensible a un Actor no Autorizado en el repositorio de GitHub polonel/trudesk versiones anteriores a 1.2.3"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:trudesk_project:trudesk:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.3", "matchCriteriaId": "D498F5B4-C37B-4226-A1FF-580B69B2AB0E"}]}]}], "references": [{"url": "https://github.com/polonel/trudesk/commit/ae904d37eaa38bffebfbfe8e949c0385c63e3263", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/a1cfe61b-5248-4a73-9a80-0b764edc9b26", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/polonel/trudesk/commit/ae904d37eaa38bffebfbfe8e949c0385c63e3263"}}