{"buggy_code": ["<?php\n/* Copyright (c) 1998-2009 ILIAS open source, Extended GPL, see docs/LICENSE */\n\nrequire_once(\"Services/MediaObjects/classes/class.ilMapArea.php\");\n\n/**\n* Class ilMediaItem\n*\n* Media Item, component of a media object (file or reference)\n*\n* @author Alex Killing <alex.killing@gmx.de>\n* @version $Id$\n*\n* @ingroup ServicesMediaObjects\n*/\nclass ilMediaItem\n{\n\t/**\n\t * @var ilDB\n\t */\n\tprotected $db;\n\n\t/**\n\t * @var ilLanguage\n\t */\n\tprotected $lng;\n\n\tvar $id;\n\tvar $purpose;\n\tvar $location;\n\tvar $location_type;\n\tvar $format;\n\tvar $width;\n\tvar $height;\n\tvar $caption;\n\tvar $halign;\n\tvar $parameters;\n\tvar $mob_id;\n\tvar $nr;\n\tvar $mapareas;\n\tvar $map_cnt;\n\tvar $map_image;\t\t\t// image map work copy image\n\tvar $color1;\t\t\t// map area line color 1\n\tvar $color2;\t\t\t// map area line color 2\n\n\tfunction __construct($a_id = 0)\n\t{\n\t\tglobal $DIC;\n\n\t\t$this->db = $DIC->database();\n\t\t$this->lng = $DIC->language();\n\t\t$this->parameters = array();\n\t\t$this->mapareas = array();\n\t\t$this->map_cnt = 0;\n\n\t\tif ($a_id != 0)\n\t\t{\n\t\t\t$this->setId($a_id);\n\t\t\t$this->read();\n\t\t}\n\t}\n\n\t/**\n\t* set media item id\n\t*\n\t* @param\tint\t\t$a_id\t\tmedia item id\n\t*/\n\tfunction setId($a_id)\n\t{\n\t\t$this->id = $a_id;\n\t}\n\n\t/**\n\t* get media item id\n\t*\n\t* @return\tint\t\tmedia item id\n\t*/\n\tfunction getId()\n\t{\n\t\treturn $this->id;\n\t}\n\n\t/**\n\t* set id of parent media object\n\t*\n\t* @param\tint\t\t$a_mob_id\t\tmedia object id\n\t*/\n\tfunction setMobId($a_mob_id)\n\t{\n\t\t$this->mob_id = $a_mob_id;\n\t}\n\n\t/**\n\t* get id of parent media object\n\t*\n\t* @return\tint\t\tmedia object id\n\t*/\n\tfunction getMobId()\n\t{\n\t\treturn $this->mob_id;\n\t}\n\n\t/**\n\t* set number of media item within media object\n\t*/\n\tfunction setNr($a_nr)\n\t{\n\t\t$this->nr = $a_nr;\n\t}\n\n\tfunction getNr()\n\t{\n\t\treturn $this->nr;\n\t}\n\n\t/**\n\t * Set text representation\n\t *\n\t * @param\tstring\ttext representation\n\t */\n\tfunction setTextRepresentation($a_val)\n\t{\n\t\t$this->text_representation = $a_val;\n\t}\n\t\n\t/**\n\t * Get text representation\n\t *\n\t * @return\tstring\ttext representation\n\t */\n\tfunction getTextRepresentation()\n\t{\n\t\treturn $this->text_representation;\n\t}\n\t\n\n\t/**\n\t* create persistent media item\n\t*/\n\tfunction create()\n\t{\n\t\t$ilDB = $this->db;\n\n\t\t$item_id = $ilDB->nextId(\"media_item\");\n\t\t$query = \"INSERT INTO media_item (id,mob_id, purpose, location, \".\n\t\t\t\"location_type, format, width, \".\n\t\t\t\"height, halign, caption, nr, text_representation) VALUES \".\n\t\t\t\"(\".\n\t\t\t$ilDB->quote($item_id, \"integer\").\",\".\n\t\t\t$ilDB->quote($this->getMobId(), \"integer\").\",\".\n\t\t\t$ilDB->quote($this->getPurpose(), \"text\").\",\".\n\t\t\t$ilDB->quote($this->getLocation(), \"text\").\",\".\n\t\t\t$ilDB->quote($this->getLocationType(), \"text\").\",\".\n\t\t\t$ilDB->quote($this->getFormat(), \"text\").\",\".\n\t\t\t$ilDB->quote($this->getWidth(), \"text\").\",\".\n\t\t\t$ilDB->quote($this->getHeight(), \"text\").\",\".\n\t\t\t$ilDB->quote($this->getHAlign(), \"text\").\",\".\n\t\t\t$ilDB->quote($this->getCaption(), \"text\").\",\".\n\t\t\t$ilDB->quote($this->getNr(), \"integer\").\",\".\n\t\t\t$ilDB->quote($this->getTextRepresentation(), \"text\").\")\";\n\t\t$ilDB->manipulate($query);\n\t\t\n\t\t$this->setId($item_id);\n\n\t\t// create mob parameters\n\t\t$params = $this->getParameters();\n\t\tforeach($params as $name => $value)\n\t\t{\n\t\t\t$query = \"INSERT INTO mob_parameter (med_item_id, name, value) VALUES \".\n\t\t\t\t\"(\".$ilDB->quote($item_id, \"integer\").\",\".\n\t\t\t\t$ilDB->quote($name, \"text\").\",\".\n\t\t\t\t$ilDB->quote($value, \"text\").\")\";\n\t\t\t$ilDB->manipulate($query);\n\t\t}\n\n\t\t// create map areas\n\t\tfor ($i=0; $i < count($this->mapareas); $i++)\n\t\t{\n\t\t\tif (is_object($this->mapareas[$i]))\n\t\t\t{\n\t\t\t\t$this->mapareas[$i]->setItemId($this->getId());\n\t\t\t\t$this->mapareas[$i]->setNr($i + 1);\n\t\t\t\t$this->mapareas[$i]->create();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* update media item data (without map areas!)\n\t*/\n\tfunction update()\n\t{\n\t\t$ilDB = $this->db;\n\n\t\t$query = \"UPDATE media_item SET \".\n\t\t\t\" mob_id = \".$ilDB->quote($this->getMobId(), \"integer\").\",\".\n\t\t\t\" purpose = \".$ilDB->quote($this->getPurpose(), \"text\").\",\".\n\t\t\t\" location = \".$ilDB->quote($this->getLocation(), \"text\").\",\".\n\t\t\t\" location_type = \".$ilDB->quote($this->getLocationType(), \"text\").\",\".\n\t\t\t\" format = \".$ilDB->quote($this->getFormat(), \"text\").\",\".\n\t\t\t\" width = \".$ilDB->quote($this->getWidth(), \"text\").\",\".\n\t\t\t\" height = \".$ilDB->quote($this->getHeight(), \"text\").\",\".\n\t\t\t\" halign = \".$ilDB->quote($this->getHAlign(), \"text\").\",\".\n\t\t\t\" caption = \".$ilDB->quote($this->getCaption(), \"text\").\",\".\n\t\t\t\" nr = \".$ilDB->quote($this->getNr(), \"integer\").\",\".\n\t\t\t\" text_representation = \".$ilDB->quote($this->getTextRepresentation(), \"text\").\n\t\t\t\" WHERE id = \".$ilDB->quote($this->getId(), \"integer\");\n\t\t$ilDB->manipulate($query);\n\n\t\t// delete mob parameters\n\t\t$query = \"DELETE FROM mob_parameter WHERE med_item_id = \".\n\t\t\t$ilDB->quote($this->getId(), \"integer\");\n\n\t\t// create mob parameters\n\t\t$params = $this->getParameters();\n\t\tforeach($params as $name => $value)\n\t\t{\n\t\t\t$query = \"INSERT INTO mob_parameter (med_item_id, name, value) VALUES \".\n\t\t\t\t\"(\".$ilDB->quote($this->getId(), \"integer\").\",\".\n\t\t\t\t$ilDB->quote($name, \"text\").\",\".\n\t\t\t\t$ilDB->quote($value, \"text\").\")\";\n\t\t\t$ilDB->manipulate($query);\n\t\t}\n\t}\n\n\t/**\n\t * Write parameter\n\t *\n\t * @param\n\t * @return\n\t */\n\tfunction writeParameter($a_name, $a_value)\n\t{\n\t\t$ilDB = $this->db;\n\n\t\t$query = \"INSERT INTO mob_parameter (med_item_id, name, value) VALUES \".\n\t\t\t\"(\".$ilDB->quote($this->getId(), \"integer\").\",\".\n\t\t\t$ilDB->quote($a_name, \"text\").\",\".\n\t\t\t$ilDB->quote($a_value, \"text\").\")\";\n\t\t$ilDB->manipulate($query);\n\t}\n\n\t/**\n\t* read media item data (item id or (mob_id and nr) must be set)\n\t*/\n\tfunction read()\n\t{\n\t\t$ilDB = $this->db;\n\n\t\t$item_id = $this->getId();\n\t\t$mob_id = $this->getMobId();\n\t\t$nr = $this->getNr();\n\t\t$query = \"\";\n\t\tif($item_id > 0)\n\t\t{\n\t\t\t$query = \"SELECT * FROM media_item WHERE id = \".\n\t\t\t\t$ilDB->quote($this->getId(), \"integer\");\n\t\t}\n\t\telse if ($mob_id > 0 && $nr > 0)\n\t\t{\n\t\t\t$query = \"SELECT * FROM media_item WHERE mob_id = \".\n\t\t\t\t$ilDB->quote($this->getMobId(), \"integer\").\" \".\n\t\t\t\t\"AND nr=\".$ilDB->quote($this->getNr(), \"integer\");\n\t\t}\n\t\tif ($query != \"\")\n\t\t{\n\t\t\t$item_set = $ilDB->query($query);\n\t\t\t$item_rec = $ilDB->fetchAssoc($item_set);\n\n\t\t\t$this->setLocation($item_rec[\"location\"]);\n\t\t\t$this->setLocationType($item_rec[\"location_type\"]);\n\t\t\t$this->setFormat($item_rec[\"format\"]);\n\t\t\t$this->setWidth($item_rec[\"width\"]);\n\t\t\t$this->setHeight($item_rec[\"height\"]);\n\t\t\t$this->setHAlign($item_rec[\"halign\"]);\n\t\t\t$this->setCaption($item_rec[\"caption\"]);\n\t\t\t$this->setPurpose($item_rec[\"purpose\"]);\n\t\t\t$this->setNr($item_rec[\"nr\"]);\n\t\t\t$this->setMobId($item_rec[\"mob_id\"]);\n\t\t\t$this->setId($item_rec[\"id\"]);\n\t\t\t$this->setThumbTried($item_rec[\"tried_thumb\"]);\n\t\t\t$this->setTextRepresentation($item_rec[\"text_representation\"]);\n\n\t\t\t// get item parameter\n\t\t\t$query = \"SELECT * FROM mob_parameter WHERE med_item_id = \".\n\t\t\t\t$ilDB->quote($this->getId(), \"integer\");\n\t\t\t$par_set = $ilDB->query($query);\n\t\t\twhile ($par_rec = $ilDB->fetchAssoc($par_set))\n\t\t\t{\n\t\t\t\t$this->setParameter($par_rec[\"name\"], $par_rec[\"value\"]);\n\t\t\t}\n\n\t\t\t// get item map areas\n\t\t\t$max = ilMapArea::_getMaxNr($this->getId());\n\t\t\tfor ($i = 1; $i <= $max; $i++)\n\t\t\t{\n\t\t\t\t$area = new ilMapArea($this->getId(), $i);\n\t\t\t\t$this->addMapArea($area);\n\t\t\t}\n\t\t}\n\n\t}\n\t\n\t/**\n\t* write thumbnail creation try data (\"y\"/\"n\")\n\t*/\n\tfunction writeThumbTried($a_tried)\n\t{\n\t\t$ilDB = $this->db;\n\t\t\n\t\t$q = \"UPDATE media_item SET tried_thumb = \".\n\t\t\t$ilDB->quote($a_tried, \"text\").\n\t\t\t\" WHERE id = \".$ilDB->quote($this->getId(), \"integer\");\n\t\t\t\n\t\t$ilDB->manipulate($q);\n\t}\n\n\t/**\n\t* Lookup location for mob id\n\t*\n\t* @param\tint\t\t$a_mob_id\tmedia object id\n\t* @param\tstring\t$a_purpose\tpurpose\n\t*/\n\tstatic function _lookupLocationForMobId($a_mob_id, $a_purpose)\n\t{\n\t\tglobal $DIC;\n\n\t\t$ilDB = $DIC->database();\n\t\t\n\t\t// read media_object record\n\t\t$query = \"SELECT * FROM media_item WHERE mob_id = \".\n\t\t\t$ilDB->quote($a_mob_id, \"integer\").\" \".\n\t\t\t\"AND purpose = \".$ilDB->quote($a_purpose, \"text\");\n\t\t$set = $ilDB->query($query);\n\t\tif ($rec = $ilDB->fetchAssoc($set))\n\t\t{\n\t\t\treturn $rec[\"location\"];\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\t/**\n\t* Lookup Mob ID\n\t*\n\t* @param\tint\t\t$a_med_id\tmedia item id\n\t*/\n\tstatic function _lookupMobId($a_med_id)\n\t{\n\t\tglobal $DIC;\n\n\t\t$ilDB = $DIC->database();\n\t\t\n\t\t// read media_object record\n\t\t$query = \"SELECT * FROM media_item WHERE id = \".\n\t\t\t$ilDB->quote($a_med_id, \"integer\");\n\t\t$set = $ilDB->query($query);\n\t\tif ($rec = $ilDB->fetchAssoc($set))\n\t\t{\n\t\t\treturn $rec[\"mob_id\"];\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\t/* read media item with specific purpose and mobId\n\t*\n\t* @param\tinteger\t\t$a_mobId\t \tmedia object id\n\t* @param\tstring\t\t$a_purpose\t \tmedia object purpose\n\t* @return \tarray\t\t$mob\t\t\tmedia object\n\t*/\n\tstatic function _getMediaItemsOfMObId($a_mobId, $a_purpose)\n\t{\n\t\tglobal $DIC;\n\n\t\t$ilDB = $DIC->database();\n\t\t\n\t\t// read media_object record\n\t\t$query = \"SELECT * FROM media_item WHERE mob_id = \".\n\t\t\t$ilDB->quote($a_mobId, \"integer\").\" \".\n\t\t\t\"AND purpose=\" . $ilDB->quote($a_purpose, \"text\").\" ORDER BY nr\";\n\t\t$item_set = $ilDB->query($query);\n\t\t\n\t\twhile ($item_rec = $ilDB->fetchAssoc($item_set))\n\t\t{\n\t\t\treturn $item_rec;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t* read media items into media objects (static)\n\t*\n\t* @param\tobject\t\t$a_mob\t \tmedia object\n\t*/\n\tstatic function _getMediaItemsOfMOb(&$a_mob)\n\t{\n\t\tglobal $DIC;\n\n\t\t$ilDB = $DIC->database();\n\t\t\n\t\t// read media_object record\n\t\t$query = \"SELECT * FROM media_item WHERE mob_id = \".\n\t\t\t$ilDB->quote($a_mob->getId(), \"integer\").\" \".\n\t\t\t\"ORDER BY nr\";\n\t\t$item_set = $ilDB->query($query);\n\t\twhile ($item_rec = $ilDB->fetchAssoc($item_set))\n\t\t{\n\t\t\t$media_item = new ilMediaItem();\n\t\t\t$media_item->setNr($item_rec[\"nr\"]);\n\t\t\t$media_item->setId($item_rec[\"id\"]);\n\t\t\t$media_item->setLocation($item_rec[\"location\"]);\n\t\t\t$media_item->setLocationType($item_rec[\"location_type\"]);\n\t\t\t$media_item->setFormat($item_rec[\"format\"]);\n\t\t\t$media_item->setWidth($item_rec[\"width\"]);\n\t\t\t$media_item->setHeight($item_rec[\"height\"]);\n\t\t\t$media_item->setHAlign($item_rec[\"halign\"]);\n\t\t\t$media_item->setCaption($item_rec[\"caption\"]);\n\t\t\t$media_item->setPurpose($item_rec[\"purpose\"]);\n\t\t\t$media_item->setMobId($item_rec[\"mob_id\"]);\n\t\t\t$media_item->setThumbTried($item_rec[\"tried_thumb\"]);\n\t\t\t$media_item->setTextRepresentation($item_rec[\"text_representation\"]);\n\n\t\t\t// get item parameter\n\t\t\t$query = \"SELECT * FROM mob_parameter WHERE med_item_id = \".\n\t\t\t\t$ilDB->quote($item_rec[\"id\"], \"integer\");\n\t\t\t$par_set = $ilDB->query($query);\n\t\t\twhile ($par_rec = $ilDB->fetchAssoc($par_set))\n\t\t\t{\n\t\t\t\t$media_item->setParameter($par_rec[\"name\"], $par_rec[\"value\"]);\n\t\t\t}\n\n\t\t\t// get item map areas\n\t\t\t$max = ilMapArea::_getMaxNr($media_item->getId());\n\t\t\tfor ($i = 1; $i <= $max; $i++)\n\t\t\t{\n\t\t\t\t$area = new ilMapArea($media_item->getId(), $i);\n\t\t\t\t$media_item->addMapArea($area);\n\t\t\t}\n\n\t\t\t// add media item to media object\n\t\t\t$a_mob->addMediaItem($media_item);\n\t\t}\n\t}\n\n\t/**\n\t * Delete all items of a mob\n\t *\n\t * @param int $a_mob_id media object id\n\t */\n\tstatic function deleteAllItemsOfMob($a_mob_id)\n\t{\n\t\tglobal $DIC;\n\n\t\t$ilDB = $DIC->database();\n\t\t\n\t\t// iterate all media items ob mob\n\t\t$query = \"SELECT * FROM media_item WHERE mob_id = \".\n\t\t\t$ilDB->quote($a_mob_id, \"integer\");\n\t\t$item_set = $ilDB->query($query);\n\t\twhile ($item_rec = $ilDB->fetchAssoc($item_set))\n\t\t{\n\t\t\t// delete all parameters of media item\n\t\t\t$query = \"DELETE FROM mob_parameter WHERE med_item_id = \".\n\t\t\t\t$ilDB->quote($item_rec[\"id\"], \"integer\");\n\t\t\t$ilDB->manipulate($query);\n\n\t\t\t// delete all map areas of media item\n\t\t\t$query = \"DELETE FROM map_area WHERE item_id = \".\n\t\t\t\t$ilDB->quote($item_rec[\"id\"], \"integer\");\n\t\t\t$ilDB->manipulate($query);\n\t\t}\n\n\t\t// delete media items\n\t\t$query = \"DELETE FROM media_item WHERE mob_id = \".\n\t\t\t$ilDB->quote($a_mob_id, \"integer\");\n\t\t$ilDB->manipulate($query);\n\t}\n\n\tfunction setPurpose($a_purpose)\n\t{\n\t\t$this->purpose = $a_purpose;\n\t}\n\n\tfunction getPurpose()\n\t{\n\t\treturn $this->purpose;\n\t}\n\n\tfunction setLocation($a_location)\n\t{\n\t\t$this->location = $a_location;\n\t}\n\n\tfunction getLocation()\n\t{\n\t\treturn $this->location;\n\t}\n\n\tfunction setLocationType($a_type)\n\t{\n\t\t$this->location_type = $a_type;\n\t}\n\n\tfunction getLocationType()\n\t{\n\t\treturn $this->location_type;\n\t}\n\n\tfunction setFormat($a_format)\n\t{\n\t\t$this->format = $a_format;\n\t}\n\n\tfunction getFormat()\n\t{\n\t\treturn $this->format;\n\t}\n\n\tfunction setThumbTried($a_tried)\n\t{\n\t\t$this->tried_thumb = $a_tried;\n\t}\n\n\tfunction getThumbTried()\n\t{\n\t\treturn $this->tried_thumb;\n\t}\n\n\tfunction addMapArea(&$a_map_area)\n\t{\n\t\t$this->mapareas[$this->map_cnt] = $a_map_area;\n\t\t$this->map_cnt++;\n\t}\n\n\t/**\n\t* delete map area\n\t*/\n\tfunction deleteMapArea($nr)\n\t{\n\t\tfor ($i=1; $i<=$this->map_cnt; $i++)\n\t\t{\n\t\t\tif($i > $nr)\n\t\t\t{\n\t\t\t\t$this->mapareas[$i-2] = $this->mapareas[$i-1];\n\t\t\t\t$this->mapareas[$i-2]->setNr($i-1);\n\t\t\t}\n\t\t}\n\t\tif($nr <= $this->map_cnt)\n\t\t{\n\t\t\tunset($this->mapareas[$this->map_cnt - 1]);\n\t\t\t$this->map_cnt--;\n\t\t}\n\t}\n\n\t/**\n\t* get map area\n\t*/\n\tfunction &getMapArea($nr)\n\t{\n\t\treturn $this->mapareas[$nr-1];\n\t}\n\n\t/**\n\t* get map areas\n\t*/\n\tfunction getMapAreas()\n\t{\n\t\treturn $this->mapareas;\n\t}\n\n\t/**\n\t* get width\n\t*/\n\tfunction getWidth()\n\t{\n\t\treturn $this->width;\n\t}\n\n\t/**\n\t* set width\n\t*/\n\tfunction setWidth($a_width)\n\t{\n\t\t$this->width = $a_width;\n\t}\n\n\t/**\n\t* get height\n\t*/\n\tfunction getHeight()\n\t{\n\t\treturn $this->height;\n\t}\n\n\t/**\n\t* set height\n\t*/\n\tfunction setHeight($a_height)\n\t{\n\t\t$this->height = $a_height;\n\t}\n\n\t/**\n\t* get original size\n\t*/\n\tfunction getOriginalSize()\n\t{\n\t\t$mob_dir = ilObjMediaObject::_getDirectory($this->getMobId());\n\n\t\tif (ilUtil::deducibleSize($this->getFormat()))\n\t\t{\n\t\t\tif ($this->getLocationType() == \"LocalFile\")\n\t\t\t{\n\t\t\t\t$loc = $mob_dir.\"/\".$this->getLocation();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$loc = $this->getLocation();\n\t\t\t}\n\n\t\t\tinclude_once(\"./Services/MediaObjects/classes/class.ilMediaImageUtil.php\");\n\t\t\t$size = ilMediaImageUtil::getImageSize($loc);\n\t\t\tif ($size[0] > 0 && $size[1] > 0)\n\t\t\t{\n\t\t\t\treturn array(\"width\" => $size[0], \"height\" => $size[1]);\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* set caption\n\t*/\n\tfunction setCaption($a_caption)\n\t{\n\t\t$this->caption = $a_caption;\n\t}\n\n\t/**\n\t* get caption\n\t*/\n\tfunction getCaption()\n\t{\n\t\treturn $this->caption;\n\t}\n\n\t/**\n\t* set horizontal align\n\t*/\n\tfunction setHAlign($a_halign)\n\t{\n\t\t$this->halign = $a_halign;\n\t}\n\n\t/**\n\t* get horizontal align\n\t*/\n\tfunction getHAlign()\n\t{\n\t\treturn $this->halign;\n\t}\n\n\n\t/**\n\t* set parameter\n\t*\n\t* @param\tstring\t$a_name\t\tparameter name\n\t* @param\tstring\t$a_value\tparameter value\n\t*/\n\tfunction setParameter($a_name, $a_value)\n\t{\n\t\t$this->parameters[$a_name] = $a_value;\n\t}\n\n\t/**\n\t* reset parameters\n\t*/\n\tfunction resetParameters()\n\t{\n\t\t$this->parameters = array();\n\t}\n\n\t/**\n\t* set alle parameters via parameter string (format: par1=\"value1\", par2=\"value2\", ...)\n\t*\n\t* @param\tstring\t\t$a_par\t\tparameter string\n\t*/\n\tfunction setParameters($a_par)\n\t{\n\t\t$this->resetParameters();\n\t\t$par_arr = ilUtil::extractParameterString($a_par);\n\t\tif(is_array($par_arr))\n\t\t{\n\t\t\tforeach($par_arr as $par => $val)\n\t\t\t{\n\t\t\t\t$this->setParameter($par, $val);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t* get all parameters (in array)\n\t*/\n\tfunction getParameters()\n\t{\n\t\treturn $this->parameters;\n\t}\n\n\n\t/**\n\t* get all parameters (as string)\n\t*/\n\tfunction getParameterString()\n\t{\n\t\treturn ilUtil::assembleParameterString($this->parameters);\n\t}\n\n\n\t/**\n\t* get a single parameter\n\t*/\n\tfunction getParameter($a_name)\n\t{\n\t\treturn $this->parameters[$a_name];\n\t}\n\n\t/**\n\t* get work directory for image map editing\n\t*/\n\tfunction getWorkDirectory()\n\t{\n\t\treturn ilUtil::getDataDir().\"/map_workfiles/item_\".$this->getId();\n\t}\n\n\t/**\n\t* create work directory for image map editing\n\t*/\n\tfunction createWorkDirectory()\n\t{\n\t\tif(!@is_dir(ilUtil::getDataDir().\"/map_workfiles\"))\n\t\t{\n\t\t\tilUtil::createDirectory(ilUtil::getDataDir().\"/map_workfiles\");\n\t\t}\n\t\t$work_dir = $this->getWorkDirectory();\n\t\tif(!@is_dir($work_dir))\n\t\t{\n\t\t\tilUtil::createDirectory($work_dir);\n\t\t}\n\t}\n\n\t/**\n\t* get location suffix\n\t*/\n\tfunction getSuffix()\n\t{\n\t\t$loc_arr = explode(\".\", $this->getLocation());\n\n\t\treturn $loc_arr[count($loc_arr) - 1];\n\t}\n\n\t/**\n\t* get image type of image map work copy\n\t*/\n\tfunction getMapWorkCopyType()\n\t{\n\t\treturn ilUtil::getGDSupportedImageType($this->getSuffix());\n\t}\n\n\t/**\n\t* Get name of image map work copy file\n\t*\n\t* @param\tstring\t\tGet name, for copy of external referenced image\n\t*/\n\tfunction getMapWorkCopyName($a_reference_copy = false)\n\t{\n\t\t$file_arr = explode(\"/\", $this->getLocation());\n\t\t$o_file = $file_arr[count($file_arr) - 1];\n\t\t$file_arr = explode(\".\", $o_file);\n\t\tunset($file_arr[count($file_arr) - 1]);\n\t\t$file = implode($file_arr, \".\");\n\n\t\tif (!$a_reference_copy)\n\t\t{\n\t\t\treturn $this->getWorkDirectory().\"/\".$file.\".\".$this->getMapWorkCopyType();\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn $this->getWorkDirectory().\"/l_copy_\".$o_file;\n\t\t}\n\t}\n\n\t/**\n\t* get media file directory\n\t*/\n\tfunction getDirectory()\n\t{\n\t\treturn ilObjMediaObject::_getDirectory($this->getMobId());\n\t}\n\n\t/**\n\t* get media file directory\n\t*/\n\tfunction getThumbnailDirectory($a_mode = \"filesystem\")\n\t{\n\t\treturn ilObjMediaObject::_getThumbnailDirectory($this->getMobId(), $a_mode);\n\t}\n\n\t/**\n\t* get thumbnail target\n\t*/\n\tfunction getThumbnailTarget($a_size = \"\")\n\t{\n\t\tif (is_int(strpos($this->getFormat(), \"image\")))\n\t\t{\n\t\t\t$thumb_file = $this->getThumbnailDirectory().\"/\".\n\t\t\t\t$this->getPurpose().\".jpeg\";\n\n\t\t\t$thumb_file_small = $this->getThumbnailDirectory().\"/\".\n\t\t\t\t$this->getPurpose().\"_small.jpeg\";\n\n\t\t\t// generate thumbnail (if not tried before)\n\t\t\tif ($this->getThumbTried() == \"n\" && $this->getLocationType() == \"LocalFile\")\n\t\t\t{\n\t\t\t\tif (is_file($thumb_file))\n\t\t\t\t{\n\t\t\t\t\tunlink($thumb_file);\n\t\t\t\t}\n\t\t\t\tif (is_file($thumb_file_small))\n\t\t\t\t{\n\t\t\t\t\tunlink($thumb_file_small);\n\t\t\t\t}\n\t\t\t\t$this->writeThumbTried(\"y\");\n\t\t\t\tilObjMediaObject::_createThumbnailDirectory($this->getMobId());\n\t\t\t\t$med_file = $this->getDirectory().\"/\".$this->getLocation();\n\n\t\t\t\tif (is_file($med_file))\n\t\t\t\t{\n\t\t\t\t\tilUtil::convertImage($med_file, $thumb_file, \"jpeg\", \"80\");\n\t\t\t\t\tilUtil::convertImage($med_file, $thumb_file_small, \"jpeg\", \"40\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($a_size == \"small\")\n\t\t\t{\n\t\t\t\tif (is_file($thumb_file_small))\n\t\t\t\t{\n\t\t\t\t\treturn $this->getThumbnailDirectory(\"output\").\"/\".\n\t\t\t\t\t\t$this->getPurpose().\"_small.jpeg?dummy=\".rand(1, 999999);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (is_file($thumb_file))\n\t\t\t\t{\n\t\t\t\t\treturn $this->getThumbnailDirectory(\"output\").\"/\".\n\t\t\t\t\t\t$this->getPurpose().\".jpeg?dummy=\".rand(1, 999999);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\n\t/**\n\t* Copy the orginal file\n\t*/\n\tfunction copyOriginal()\n\t{\n\t\t$lng = $this->lng;\n\t    $this->createWorkDirectory();\n\n\t\t$geom = ($this->getWidth() != \"\" && $this->getHeight() != \"\")\n\t\t\t? $this->getWidth().\"x\".$this->getHeight()\n\t\t\t: \"\";\n\n\t\tif ($this->getLocationType() != \"Reference\")\n\t\t{\n\t\t\tilUtil::convertImage($this->getDirectory().\"/\".$this->getLocation(),\n\t\t\t\t$this->getMapWorkCopyName(),\n\t\t\t\t$this->getMapWorkCopyType(), $geom);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// first copy the external file, if necessary\n\t\t\tif (!is_file($this->getMapWorkCopyName(true)) || (filesize($this->getMapWorkCopyName(true)) == 0))\n\t\t\t{\n\t\t\t\t$handle = @fopen($this->getLocation(), \"r\");\n\t\t\t\t$lcopy = fopen($this->getMapWorkCopyName(true), \"w\");\n\t\t\t\tif ($handle && $lcopy)\n\t\t\t\t{\n\t\t\t\t\twhile (!feof($handle))\n\t\t\t\t\t{\n\t\t\t\t\t\t$content = fread($handle, 4096);\n\t\t\t\t\t\tfwrite($lcopy, $content);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t@fclose($lcopy);\n\t\t\t\t@fclose($handle);\n\t\t\t}\n\t\t\t\n\t\t\t// now, create working copy\n\t\t\tilUtil::convertImage($this->getMapWorkCopyName(true),\n\t\t\t\t$this->getMapWorkCopyName(),\n\t\t\t\t$this->getMapWorkCopyType(), $geom);\n\t\t}\n\n\t\tif (!is_file($this->getMapWorkCopyName()))\n\t\t{\n\t\t    \n\t\t\tilUtil::sendFailure($lng->txt(\"cont_map_file_not_generated\"));\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t/**\n\t* make map work copy of image\n\t*\n\t* @param\tint\t\t\t$a_area_nr\t\tdraw area $a_area_nr only\n\t* @param\tboolean\t\t$a_exclude\t\ttrue: draw all areas but area $a_area_nr\n\t*/\n\tfunction makeMapWorkCopy($a_area_nr = 0, $a_exclude = false)\n\t{\n\t\t$lng = $this->lng;\n\t\t\n\t\tif (!$this->copyOriginal())\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t$this->buildMapWorkImage();\n\t\t\n\t\t// determine ratios\n\t\t$size = @getimagesize($this->getMapWorkCopyName());\n\t\t$x_ratio = 1;\n\t\tif ($size[0] > 0 && $this->getWidth() > 0)\n\t\t{\n\t\t\t$x_ratio = $this->getWidth() / $size[0];\n\t\t}\n\t\t$y_ratio = 1;\n\t\tif ($size[1] > 0 && $this->getHeight() > 0)\n\t\t{\n\t\t\t$y_ratio = $this->getHeight() / $size[1];\n\t\t}\n\n\t\t// draw map areas\n\t\tfor ($i=0; $i < count($this->mapareas); $i++)\n\t\t{\n\t\t\tif (\t((($i+1) == $a_area_nr) && !$a_exclude) ||\n\t\t\t\t\t((($i+1) != $a_area_nr) && $a_exclude) ||\n\t\t\t\t\t($a_area_nr == 0)\n\t\t\t\t)\n\t\t\t{\n\t\t\t\t$area = $this->mapareas[$i];\n\t\t\t\t$area->draw($this->getMapWorkImage(), $this->color1, $this->color2, true,\n\t\t\t\t\t$x_ratio, $y_ratio);\n\t\t\t}\n\t\t}\n\n\t\t$this->saveMapWorkImage();\n\t\t\n\t\treturn true;\n\t}\n\n\n\t/**\n\t* draw a new area in work image\n\t*\n\t* @param\tstring\t\t$a_shape\t\tshape\n\t* @param\tstring\t\t$a_coords\t\tcoordinates string\n\t*/\n\tfunction addAreaToMapWorkCopy($a_shape, $a_coords)\n\t{\n\t\t$this->buildMapWorkImage();\n\n\t\t// determine ratios\n\t\t$size = @getimagesize($this->getMapWorkCopyName());\n\t\t$x_ratio = 1;\n\t\tif ($size[0] > 0 && $this->getWidth() > 0)\n\t\t{\n\t\t\t$x_ratio = $this->getWidth() / $size[0];\n\t\t}\n\t\t$y_ratio = 1;\n\t\tif ($size[1] > 0 && $this->getHeight() > 0)\n\t\t{\n\t\t\t$y_ratio = $this->getHeight() / $size[1];\n\t\t}\n\n\t\t// add new area to work image\n\t\t$area = new ilMapArea();\n\t\t$area->setShape($a_shape);\n\t\t$area->setCoords($a_coords);\n\t\t$area->draw($this->getMapWorkImage(), $this->color1, $this->color2, false,\n\t\t\t$x_ratio, $y_ratio);\n\n\t\t$this->saveMapWorkImage();\n\t}\n\n\t/**\n\t* output raw map work copy file\n\t*/\n\tfunction outputMapWorkCopy()\n\t{\n\t\tif ($this->getMapWorkCopyType() != \"\")\n\t\t{\n\t\t\theader(\"Pragma: no-cache\");\n\t\t\theader(\"Expires: 0\");\n\t\t\theader(\"Content-type: image/\".strtolower($this->getMapWorkCopyType()));\n\t\t\treadfile($this->getMapWorkCopyName());\n\t\t}\n\t\texit;\n\t}\n\n\t/**\n\t* build image map work image\n\t*/\n\tfunction buildMapWorkImage()\n\t{\n\t\t$im_type = strtolower($this->getMapWorkCopyType());\n\n\t\tswitch ($im_type)\n\t\t{\n\t\t\tcase \"gif\":\n\t\t\t\t$this->map_image = ImageCreateFromGIF($this->getMapWorkCopyName());\n\t\t\t\tbreak;\n\n\t\t\tcase \"jpg\":\n\t\t\tcase \"jpeg\":\n\t\t\t\t$this->map_image = ImageCreateFromJPEG($this->getMapWorkCopyName());\n\t\t\t\tbreak;\n\n\t\t\tcase \"png\":\n\t\t\t\t$this->map_image = ImageCreateFromPNG($this->getMapWorkCopyName());\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// try to allocate black and white as color. if this is not possible, get the closest colors\n\t\tif (imagecolorstotal($this->map_image) > 250)\n\t\t{\n\t\t\t$this->color1 = imagecolorclosest($this->map_image, 0, 0, 0);\n\t\t\t$this->color2 = imagecolorclosest($this->map_image, 255, 255, 255);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->color1 = imagecolorallocate($this->map_image, 0, 0, 0);\n\t\t\t$this->color2 = imagecolorallocate($this->map_image, 255, 255, 255);\n\t\t}\n\t}\n\n\t/**\n\t* save image map work image\n\t*/\n\tfunction saveMapWorkImage()\n\t{\n\t\t$im_type = strtolower($this->getMapWorkCopyType());\n\n\t\t// save image work-copy and free memory\n\t\tswitch ($im_type)\n\t\t{\n\t\t\tcase \"gif\":\n\t\t\t\tImageGIF($this->map_image, $this->getMapWorkCopyName());\n\t\t\t\tbreak;\n\n\t\t\tcase \"jpg\":\n\t\t\tcase \"jpeg\":\n\t\t\t\tImageJPEG($this->map_image, $this->getMapWorkCopyName());\n\t\t\t\tbreak;\n\n\t\t\tcase \"png\":\n\t\t\t\tImagePNG($this->map_image, $this->getMapWorkCopyName());\n\t\t\t\tbreak;\n\t\t}\n\n\t\tImageDestroy($this->map_image);\n\t}\n\n\t/**\n\t* get image map work image\n\t*/\n\tfunction &getMapWorkImage()\n\t{\n\t\treturn $this->map_image;\n\t}\n\n\n\t/**\n\t* get xml code of media items' areas\n\t*/\n\tfunction getMapAreasXML($a_insert_inst = false, $a_inst = 0)\n\t{\n\t\t$xml = \"\";\n\n\t\t// build xml of map areas\n\t\tfor ($i=0; $i < count($this->mapareas); $i++)\n\t\t{\n\t\t\t$area = $this->mapareas[$i];\n\t\t\t\n\t\t\t// highlight mode\n\t\t\t$hm = \"\";\n\t\t\tif ($area->getHighlightMode() != \"\")\n\t\t\t{\n\t\t\t\t$hm = ' HighlightMode=\"'.$area->getHighlightMode().'\" ';\n\t\t\t\t$hcl = ($area->getHighlightClass() != \"\")\n\t\t\t\t\t? $area->getHighlightClass()\n\t\t\t\t\t: \"Accented\";\n\t\t\t\t$hm.= 'HighlightClass=\"'.$hcl.'\" ';\n\t\t\t}\n\t\t\t\n\t\t\t$xml .= \"<MapArea Shape=\\\"\".$area->getShape().\"\\\" Coords=\\\"\".$area->getCoords().\"\\\" \".$hm.\">\";\n\t\t\tif ($area->getLinkType() == IL_INT_LINK)\n\t\t\t{\n\t\t\t\t$target_frame = $area->getTargetFrame();\n\n\t\t\t\tif ($area->getType() == \"GlossaryItem\" && $target_frame == \"\")\n\t\t\t\t{\n\t\t\t\t\t$target_frame = \"Glossary\";\n\t\t\t\t}\n\n\t\t\t\t$tf_str = ($target_frame == \"\")\n\t\t\t\t\t? \"\"\n\t\t\t\t\t: \"TargetFrame=\\\"\".$target_frame.\"\\\"\";\n\t\t\t\t\n\t\t\t\t$xml .= \"<IntLink Target=\\\"\".$area->getTarget($a_insert_inst, $a_inst).\"\\\" Type=\\\"\".\n\t\t\t\t\t$area->getType().\"\\\" $tf_str>\";\n\t\t\t\t// see bug 17893 and http://stackoverflow.com/questions/4026502/xml-error-at-ampersand\n\t\t\t\t$xml .= htmlspecialchars($area->getTitle(), ENT_QUOTES);\n\t\t\t\t$xml .=\"</IntLink>\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$xml .= \"<ExtLink Href=\\\"\".str_replace(\"&\", \"&amp;\",$area->getHref()).\"\\\" Title=\\\"\".\n\t\t\t\t\tstr_replace(\"&\", \"&amp;\",$area->getExtTitle()).\"\\\">\";\n\t\t\t\t$xml .= str_replace(\"&\", \"&amp;\", $area->getTitle());\n\t\t\t\t$xml .=\"</ExtLink>\";\n\t\t\t}\n\t\t\t$xml .= \"</MapArea>\";\n\t\t}\n\t\treturn $xml;\n\t}\n\n\n\t/**\n\t* resolve internal links of all media items of a media object\n\t*\n\t* @param\tint\t\t$a_mob_id\t\tmedia object id\n\t*/\n\tstatic function _resolveMapAreaLinks($a_mob_id)\n\t{\n\t\tglobal $DIC;\n\n\t\t$ilDB = $DIC->database();\n\t\t\n//echo \"mediaItems::resolve<br>\";\n\t\t// read media_object record\n\t\t$query = \"SELECT * FROM media_item WHERE mob_id = \".\n\t\t\t$ilDB->quote($a_mob_id, \"integer\").\" \".\n\t\t\t\"ORDER BY nr\";\n\t\t$item_set = $ilDB->query($query);\n\t\twhile ($item_rec = $ilDB->fetchAssoc($item_set))\n\t\t{\n\t\t\tilMapArea::_resolveIntLinks($item_rec[\"id\"]);\n\t\t}\n\t}\n\n\t/**\n\t* get all internal links of map areas of a mob\n\t*\n\t* @param\tint\t\t$a_mob_id\t\tmedia object id\n\t*/\n\tstatic function _getMapAreasIntLinks($a_mob_id)\n\t{\n\t\tglobal $DIC;\n\n\t\t$ilDB = $DIC->database();\n\t\t\n\t\t// read media_items records\n\t\t$query = \"SELECT * FROM media_item WHERE mob_id = \".\n\t\t\t$ilDB->quote($a_mob_id, \"integer\").\" ORDER BY nr\";\n\n\t\t$item_set = $ilDB->query($query);\n\t\t$links = array();\n\t\twhile ($item_rec = $ilDB->fetchAssoc($item_set))\n\t\t{\n\t\t\t$map_links = ilMapArea::_getIntLinks($item_rec[\"id\"]);\n\t\t\tforeach($map_links as $key => $map_link)\n\t\t\t{\n\t\t\t\t$links[$key] = $map_link;\n\t\t\t}\n\t\t}\n\t\treturn $links;\n\t}\n\n\t/**\n\t* Extract parameters of special external references to parameter array\n\t*/\n\tfunction extractUrlParameters()\n\t{\n\t\tinclude_once(\"./Services/MediaObjects/classes/class.ilExternalMediaAnalyzer.php\");\n\t\t$par = ilExternalMediaAnalyzer::extractUrlParameters(\n\t\t\t$this->getLocation(), $this->getParameters());\n\t\tforeach ($par as $k => $v)\n\t\t{\n\t\t\t$this->setParameter($k, $v);\n\t\t}\n\t}\n}\n?>\n"], "fixing_code": ["<?php\n/* Copyright (c) 1998-2009 ILIAS open source, Extended GPL, see docs/LICENSE */\n\nrequire_once(\"Services/MediaObjects/classes/class.ilMapArea.php\");\n\n/**\n* Class ilMediaItem\n*\n* Media Item, component of a media object (file or reference)\n*\n* @author Alex Killing <alex.killing@gmx.de>\n* @version $Id$\n*\n* @ingroup ServicesMediaObjects\n*/\nclass ilMediaItem\n{\n\t/**\n\t * @var ilDB\n\t */\n\tprotected $db;\n\n\t/**\n\t * @var ilLanguage\n\t */\n\tprotected $lng;\n\n\tvar $id;\n\tvar $purpose;\n\tvar $location;\n\tvar $location_type;\n\tvar $format;\n\tvar $width;\n\tvar $height;\n\tvar $caption;\n\tvar $halign;\n\tvar $parameters;\n\tvar $mob_id;\n\tvar $nr;\n\tvar $mapareas;\n\tvar $map_cnt;\n\tvar $map_image;\t\t\t// image map work copy image\n\tvar $color1;\t\t\t// map area line color 1\n\tvar $color2;\t\t\t// map area line color 2\n\n\tfunction __construct($a_id = 0)\n\t{\n\t\tglobal $DIC;\n\n\t\t$this->db = $DIC->database();\n\t\t$this->lng = $DIC->language();\n\t\t$this->parameters = array();\n\t\t$this->mapareas = array();\n\t\t$this->map_cnt = 0;\n\n\t\tif ($a_id != 0)\n\t\t{\n\t\t\t$this->setId($a_id);\n\t\t\t$this->read();\n\t\t}\n\t}\n\n\t/**\n\t* set media item id\n\t*\n\t* @param\tint\t\t$a_id\t\tmedia item id\n\t*/\n\tfunction setId($a_id)\n\t{\n\t\t$this->id = $a_id;\n\t}\n\n\t/**\n\t* get media item id\n\t*\n\t* @return\tint\t\tmedia item id\n\t*/\n\tfunction getId()\n\t{\n\t\treturn $this->id;\n\t}\n\n\t/**\n\t* set id of parent media object\n\t*\n\t* @param\tint\t\t$a_mob_id\t\tmedia object id\n\t*/\n\tfunction setMobId($a_mob_id)\n\t{\n\t\t$this->mob_id = $a_mob_id;\n\t}\n\n\t/**\n\t* get id of parent media object\n\t*\n\t* @return\tint\t\tmedia object id\n\t*/\n\tfunction getMobId()\n\t{\n\t\treturn $this->mob_id;\n\t}\n\n\t/**\n\t* set number of media item within media object\n\t*/\n\tfunction setNr($a_nr)\n\t{\n\t\t$this->nr = $a_nr;\n\t}\n\n\tfunction getNr()\n\t{\n\t\treturn $this->nr;\n\t}\n\n\t/**\n\t * Set text representation\n\t *\n\t * @param\tstring\ttext representation\n\t */\n\tfunction setTextRepresentation($a_val)\n\t{\n\t\t$this->text_representation = $a_val;\n\t}\n\t\n\t/**\n\t * Get text representation\n\t *\n\t * @return\tstring\ttext representation\n\t */\n\tfunction getTextRepresentation()\n\t{\n\t\treturn $this->text_representation;\n\t}\n\t\n\n\t/**\n\t* create persistent media item\n\t*/\n\tfunction create()\n\t{\n\t\t$ilDB = $this->db;\n\n\t\t$item_id = $ilDB->nextId(\"media_item\");\n\t\t$query = \"INSERT INTO media_item (id,mob_id, purpose, location, \".\n\t\t\t\"location_type, format, width, \".\n\t\t\t\"height, halign, caption, nr, text_representation) VALUES \".\n\t\t\t\"(\".\n\t\t\t$ilDB->quote($item_id, \"integer\").\",\".\n\t\t\t$ilDB->quote($this->getMobId(), \"integer\").\",\".\n\t\t\t$ilDB->quote($this->getPurpose(), \"text\").\",\".\n\t\t\t$ilDB->quote($this->getLocation(), \"text\").\",\".\n\t\t\t$ilDB->quote($this->getLocationType(), \"text\").\",\".\n\t\t\t$ilDB->quote($this->getFormat(), \"text\").\",\".\n\t\t\t$ilDB->quote($this->getWidth(), \"text\").\",\".\n\t\t\t$ilDB->quote($this->getHeight(), \"text\").\",\".\n\t\t\t$ilDB->quote($this->getHAlign(), \"text\").\",\".\n\t\t\t$ilDB->quote($this->getCaption(), \"text\").\",\".\n\t\t\t$ilDB->quote($this->getNr(), \"integer\").\",\".\n\t\t\t$ilDB->quote($this->getTextRepresentation(), \"text\").\")\";\n\t\t$ilDB->manipulate($query);\n\t\t\n\t\t$this->setId($item_id);\n\n\t\t// create mob parameters\n\t\t$params = $this->getParameters();\n\t\tforeach($params as $name => $value)\n\t\t{\n\t\t\t$query = \"INSERT INTO mob_parameter (med_item_id, name, value) VALUES \".\n\t\t\t\t\"(\".$ilDB->quote($item_id, \"integer\").\",\".\n\t\t\t\t$ilDB->quote($name, \"text\").\",\".\n\t\t\t\t$ilDB->quote($value, \"text\").\")\";\n\t\t\t$ilDB->manipulate($query);\n\t\t}\n\n\t\t// create map areas\n\t\tfor ($i=0; $i < count($this->mapareas); $i++)\n\t\t{\n\t\t\tif (is_object($this->mapareas[$i]))\n\t\t\t{\n\t\t\t\t$this->mapareas[$i]->setItemId($this->getId());\n\t\t\t\t$this->mapareas[$i]->setNr($i + 1);\n\t\t\t\t$this->mapareas[$i]->create();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* update media item data (without map areas!)\n\t*/\n\tfunction update()\n\t{\n\t\t$ilDB = $this->db;\n\n\t\t$query = \"UPDATE media_item SET \".\n\t\t\t\" mob_id = \".$ilDB->quote($this->getMobId(), \"integer\").\",\".\n\t\t\t\" purpose = \".$ilDB->quote($this->getPurpose(), \"text\").\",\".\n\t\t\t\" location = \".$ilDB->quote($this->getLocation(), \"text\").\",\".\n\t\t\t\" location_type = \".$ilDB->quote($this->getLocationType(), \"text\").\",\".\n\t\t\t\" format = \".$ilDB->quote($this->getFormat(), \"text\").\",\".\n\t\t\t\" width = \".$ilDB->quote($this->getWidth(), \"text\").\",\".\n\t\t\t\" height = \".$ilDB->quote($this->getHeight(), \"text\").\",\".\n\t\t\t\" halign = \".$ilDB->quote($this->getHAlign(), \"text\").\",\".\n\t\t\t\" caption = \".$ilDB->quote($this->getCaption(), \"text\").\",\".\n\t\t\t\" nr = \".$ilDB->quote($this->getNr(), \"integer\").\",\".\n\t\t\t\" text_representation = \".$ilDB->quote($this->getTextRepresentation(), \"text\").\n\t\t\t\" WHERE id = \".$ilDB->quote($this->getId(), \"integer\");\n\t\t$ilDB->manipulate($query);\n\n\t\t// delete mob parameters\n\t\t$query = \"DELETE FROM mob_parameter WHERE med_item_id = \".\n\t\t\t$ilDB->quote($this->getId(), \"integer\");\n\n\t\t// create mob parameters\n\t\t$params = $this->getParameters();\n\t\tforeach($params as $name => $value)\n\t\t{\n\t\t\t$query = \"INSERT INTO mob_parameter (med_item_id, name, value) VALUES \".\n\t\t\t\t\"(\".$ilDB->quote($this->getId(), \"integer\").\",\".\n\t\t\t\t$ilDB->quote($name, \"text\").\",\".\n\t\t\t\t$ilDB->quote($value, \"text\").\")\";\n\t\t\t$ilDB->manipulate($query);\n\t\t}\n\t}\n\n\t/**\n\t * Write parameter\n\t *\n\t * @param\n\t * @return\n\t */\n\tfunction writeParameter($a_name, $a_value)\n\t{\n\t\t$ilDB = $this->db;\n\n\t\t$query = \"INSERT INTO mob_parameter (med_item_id, name, value) VALUES \".\n\t\t\t\"(\".$ilDB->quote($this->getId(), \"integer\").\",\".\n\t\t\t$ilDB->quote($a_name, \"text\").\",\".\n\t\t\t$ilDB->quote($a_value, \"text\").\")\";\n\t\t$ilDB->manipulate($query);\n\t}\n\n\t/**\n\t* read media item data (item id or (mob_id and nr) must be set)\n\t*/\n\tfunction read()\n\t{\n\t\t$ilDB = $this->db;\n\n\t\t$item_id = $this->getId();\n\t\t$mob_id = $this->getMobId();\n\t\t$nr = $this->getNr();\n\t\t$query = \"\";\n\t\tif($item_id > 0)\n\t\t{\n\t\t\t$query = \"SELECT * FROM media_item WHERE id = \".\n\t\t\t\t$ilDB->quote($this->getId(), \"integer\");\n\t\t}\n\t\telse if ($mob_id > 0 && $nr > 0)\n\t\t{\n\t\t\t$query = \"SELECT * FROM media_item WHERE mob_id = \".\n\t\t\t\t$ilDB->quote($this->getMobId(), \"integer\").\" \".\n\t\t\t\t\"AND nr=\".$ilDB->quote($this->getNr(), \"integer\");\n\t\t}\n\t\tif ($query != \"\")\n\t\t{\n\t\t\t$item_set = $ilDB->query($query);\n\t\t\t$item_rec = $ilDB->fetchAssoc($item_set);\n\n\t\t\t$this->setLocation($item_rec[\"location\"]);\n\t\t\t$this->setLocationType($item_rec[\"location_type\"]);\n\t\t\t$this->setFormat($item_rec[\"format\"]);\n\t\t\t$this->setWidth($item_rec[\"width\"]);\n\t\t\t$this->setHeight($item_rec[\"height\"]);\n\t\t\t$this->setHAlign($item_rec[\"halign\"]);\n\t\t\t$this->setCaption($item_rec[\"caption\"]);\n\t\t\t$this->setPurpose($item_rec[\"purpose\"]);\n\t\t\t$this->setNr($item_rec[\"nr\"]);\n\t\t\t$this->setMobId($item_rec[\"mob_id\"]);\n\t\t\t$this->setId($item_rec[\"id\"]);\n\t\t\t$this->setThumbTried($item_rec[\"tried_thumb\"]);\n\t\t\t$this->setTextRepresentation($item_rec[\"text_representation\"]);\n\n\t\t\t// get item parameter\n\t\t\t$query = \"SELECT * FROM mob_parameter WHERE med_item_id = \".\n\t\t\t\t$ilDB->quote($this->getId(), \"integer\");\n\t\t\t$par_set = $ilDB->query($query);\n\t\t\twhile ($par_rec = $ilDB->fetchAssoc($par_set))\n\t\t\t{\n\t\t\t\t$this->setParameter($par_rec[\"name\"], $par_rec[\"value\"]);\n\t\t\t}\n\n\t\t\t// get item map areas\n\t\t\t$max = ilMapArea::_getMaxNr($this->getId());\n\t\t\tfor ($i = 1; $i <= $max; $i++)\n\t\t\t{\n\t\t\t\t$area = new ilMapArea($this->getId(), $i);\n\t\t\t\t$this->addMapArea($area);\n\t\t\t}\n\t\t}\n\n\t}\n\t\n\t/**\n\t* write thumbnail creation try data (\"y\"/\"n\")\n\t*/\n\tfunction writeThumbTried($a_tried)\n\t{\n\t\t$ilDB = $this->db;\n\t\t\n\t\t$q = \"UPDATE media_item SET tried_thumb = \".\n\t\t\t$ilDB->quote($a_tried, \"text\").\n\t\t\t\" WHERE id = \".$ilDB->quote($this->getId(), \"integer\");\n\t\t\t\n\t\t$ilDB->manipulate($q);\n\t}\n\n\t/**\n\t* Lookup location for mob id\n\t*\n\t* @param\tint\t\t$a_mob_id\tmedia object id\n\t* @param\tstring\t$a_purpose\tpurpose\n\t*/\n\tstatic function _lookupLocationForMobId($a_mob_id, $a_purpose)\n\t{\n\t\tglobal $DIC;\n\n\t\t$ilDB = $DIC->database();\n\t\t\n\t\t// read media_object record\n\t\t$query = \"SELECT * FROM media_item WHERE mob_id = \".\n\t\t\t$ilDB->quote($a_mob_id, \"integer\").\" \".\n\t\t\t\"AND purpose = \".$ilDB->quote($a_purpose, \"text\");\n\t\t$set = $ilDB->query($query);\n\t\tif ($rec = $ilDB->fetchAssoc($set))\n\t\t{\n\t\t\treturn $rec[\"location\"];\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\t/**\n\t* Lookup Mob ID\n\t*\n\t* @param\tint\t\t$a_med_id\tmedia item id\n\t*/\n\tstatic function _lookupMobId($a_med_id)\n\t{\n\t\tglobal $DIC;\n\n\t\t$ilDB = $DIC->database();\n\t\t\n\t\t// read media_object record\n\t\t$query = \"SELECT * FROM media_item WHERE id = \".\n\t\t\t$ilDB->quote($a_med_id, \"integer\");\n\t\t$set = $ilDB->query($query);\n\t\tif ($rec = $ilDB->fetchAssoc($set))\n\t\t{\n\t\t\treturn $rec[\"mob_id\"];\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\t/* read media item with specific purpose and mobId\n\t*\n\t* @param\tinteger\t\t$a_mobId\t \tmedia object id\n\t* @param\tstring\t\t$a_purpose\t \tmedia object purpose\n\t* @return \tarray\t\t$mob\t\t\tmedia object\n\t*/\n\tstatic function _getMediaItemsOfMObId($a_mobId, $a_purpose)\n\t{\n\t\tglobal $DIC;\n\n\t\t$ilDB = $DIC->database();\n\t\t\n\t\t// read media_object record\n\t\t$query = \"SELECT * FROM media_item WHERE mob_id = \".\n\t\t\t$ilDB->quote($a_mobId, \"integer\").\" \".\n\t\t\t\"AND purpose=\" . $ilDB->quote($a_purpose, \"text\").\" ORDER BY nr\";\n\t\t$item_set = $ilDB->query($query);\n\t\t\n\t\twhile ($item_rec = $ilDB->fetchAssoc($item_set))\n\t\t{\n\t\t\treturn $item_rec;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/**\n\t* read media items into media objects (static)\n\t*\n\t* @param\tobject\t\t$a_mob\t \tmedia object\n\t*/\n\tstatic function _getMediaItemsOfMOb(&$a_mob)\n\t{\n\t\tglobal $DIC;\n\n\t\t$ilDB = $DIC->database();\n\t\t\n\t\t// read media_object record\n\t\t$query = \"SELECT * FROM media_item WHERE mob_id = \".\n\t\t\t$ilDB->quote($a_mob->getId(), \"integer\").\" \".\n\t\t\t\"ORDER BY nr\";\n\t\t$item_set = $ilDB->query($query);\n\t\twhile ($item_rec = $ilDB->fetchAssoc($item_set))\n\t\t{\n\t\t\t$media_item = new ilMediaItem();\n\t\t\t$media_item->setNr($item_rec[\"nr\"]);\n\t\t\t$media_item->setId($item_rec[\"id\"]);\n\t\t\t$media_item->setLocation($item_rec[\"location\"]);\n\t\t\t$media_item->setLocationType($item_rec[\"location_type\"]);\n\t\t\t$media_item->setFormat($item_rec[\"format\"]);\n\t\t\t$media_item->setWidth($item_rec[\"width\"]);\n\t\t\t$media_item->setHeight($item_rec[\"height\"]);\n\t\t\t$media_item->setHAlign($item_rec[\"halign\"]);\n\t\t\t$media_item->setCaption($item_rec[\"caption\"]);\n\t\t\t$media_item->setPurpose($item_rec[\"purpose\"]);\n\t\t\t$media_item->setMobId($item_rec[\"mob_id\"]);\n\t\t\t$media_item->setThumbTried($item_rec[\"tried_thumb\"]);\n\t\t\t$media_item->setTextRepresentation($item_rec[\"text_representation\"]);\n\n\t\t\t// get item parameter\n\t\t\t$query = \"SELECT * FROM mob_parameter WHERE med_item_id = \".\n\t\t\t\t$ilDB->quote($item_rec[\"id\"], \"integer\");\n\t\t\t$par_set = $ilDB->query($query);\n\t\t\twhile ($par_rec = $ilDB->fetchAssoc($par_set))\n\t\t\t{\n\t\t\t\t$media_item->setParameter($par_rec[\"name\"], $par_rec[\"value\"]);\n\t\t\t}\n\n\t\t\t// get item map areas\n\t\t\t$max = ilMapArea::_getMaxNr($media_item->getId());\n\t\t\tfor ($i = 1; $i <= $max; $i++)\n\t\t\t{\n\t\t\t\t$area = new ilMapArea($media_item->getId(), $i);\n\t\t\t\t$media_item->addMapArea($area);\n\t\t\t}\n\n\t\t\t// add media item to media object\n\t\t\t$a_mob->addMediaItem($media_item);\n\t\t}\n\t}\n\n\t/**\n\t * Delete all items of a mob\n\t *\n\t * @param int $a_mob_id media object id\n\t */\n\tstatic function deleteAllItemsOfMob($a_mob_id)\n\t{\n\t\tglobal $DIC;\n\n\t\t$ilDB = $DIC->database();\n\t\t\n\t\t// iterate all media items ob mob\n\t\t$query = \"SELECT * FROM media_item WHERE mob_id = \".\n\t\t\t$ilDB->quote($a_mob_id, \"integer\");\n\t\t$item_set = $ilDB->query($query);\n\t\twhile ($item_rec = $ilDB->fetchAssoc($item_set))\n\t\t{\n\t\t\t// delete all parameters of media item\n\t\t\t$query = \"DELETE FROM mob_parameter WHERE med_item_id = \".\n\t\t\t\t$ilDB->quote($item_rec[\"id\"], \"integer\");\n\t\t\t$ilDB->manipulate($query);\n\n\t\t\t// delete all map areas of media item\n\t\t\t$query = \"DELETE FROM map_area WHERE item_id = \".\n\t\t\t\t$ilDB->quote($item_rec[\"id\"], \"integer\");\n\t\t\t$ilDB->manipulate($query);\n\t\t}\n\n\t\t// delete media items\n\t\t$query = \"DELETE FROM media_item WHERE mob_id = \".\n\t\t\t$ilDB->quote($a_mob_id, \"integer\");\n\t\t$ilDB->manipulate($query);\n\t}\n\n\tfunction setPurpose($a_purpose)\n\t{\n\t\t$this->purpose = $a_purpose;\n\t}\n\n\tfunction getPurpose()\n\t{\n\t\treturn $this->purpose;\n\t}\n\n\tfunction setLocation($a_location)\n\t{\n\t\t$this->location = $a_location;\n\t}\n\n\tfunction getLocation()\n\t{\n\t\treturn $this->location;\n\t}\n\n\tfunction setLocationType($a_type)\n\t{\n\t\t$this->location_type = $a_type;\n\t}\n\n\tfunction getLocationType()\n\t{\n\t\treturn $this->location_type;\n\t}\n\n\tfunction setFormat($a_format)\n\t{\n\t\t$this->format = $a_format;\n\t}\n\n\tfunction getFormat()\n\t{\n\t\treturn $this->format;\n\t}\n\n\tfunction setThumbTried($a_tried)\n\t{\n\t\t$this->tried_thumb = $a_tried;\n\t}\n\n\tfunction getThumbTried()\n\t{\n\t\treturn $this->tried_thumb;\n\t}\n\n\tfunction addMapArea(&$a_map_area)\n\t{\n\t\t$this->mapareas[$this->map_cnt] = $a_map_area;\n\t\t$this->map_cnt++;\n\t}\n\n\t/**\n\t* delete map area\n\t*/\n\tfunction deleteMapArea($nr)\n\t{\n\t\tfor ($i=1; $i<=$this->map_cnt; $i++)\n\t\t{\n\t\t\tif($i > $nr)\n\t\t\t{\n\t\t\t\t$this->mapareas[$i-2] = $this->mapareas[$i-1];\n\t\t\t\t$this->mapareas[$i-2]->setNr($i-1);\n\t\t\t}\n\t\t}\n\t\tif($nr <= $this->map_cnt)\n\t\t{\n\t\t\tunset($this->mapareas[$this->map_cnt - 1]);\n\t\t\t$this->map_cnt--;\n\t\t}\n\t}\n\n\t/**\n\t* get map area\n\t*/\n\tfunction &getMapArea($nr)\n\t{\n\t\treturn $this->mapareas[$nr-1];\n\t}\n\n\t/**\n\t* get map areas\n\t*/\n\tfunction getMapAreas()\n\t{\n\t\treturn $this->mapareas;\n\t}\n\n\t/**\n\t* get width\n\t*/\n\tfunction getWidth()\n\t{\n\t\treturn $this->width;\n\t}\n\n\t/**\n\t* set width\n\t*/\n\tfunction setWidth($a_width)\n\t{\n\t\t$this->width = $a_width;\n\t}\n\n\t/**\n\t* get height\n\t*/\n\tfunction getHeight()\n\t{\n\t\treturn $this->height;\n\t}\n\n\t/**\n\t* set height\n\t*/\n\tfunction setHeight($a_height)\n\t{\n\t\t$this->height = $a_height;\n\t}\n\n\t/**\n\t* get original size\n\t*/\n\tfunction getOriginalSize()\n\t{\n\t\t$mob_dir = ilObjMediaObject::_getDirectory($this->getMobId());\n\n\t\tif (ilUtil::deducibleSize($this->getFormat()))\n\t\t{\n\t\t\tif ($this->getLocationType() == \"LocalFile\")\n\t\t\t{\n\t\t\t\t$loc = $mob_dir.\"/\".$this->getLocation();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$loc = $this->getLocation();\n\t\t\t}\n\n\t\t\tinclude_once(\"./Services/MediaObjects/classes/class.ilMediaImageUtil.php\");\n\t\t\t$size = ilMediaImageUtil::getImageSize($loc);\n\t\t\tif ($size[0] > 0 && $size[1] > 0)\n\t\t\t{\n\t\t\t\treturn array(\"width\" => $size[0], \"height\" => $size[1]);\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* set caption\n\t*/\n\tfunction setCaption($a_caption)\n\t{\n\t\t$this->caption = $a_caption;\n\t}\n\n\t/**\n\t* get caption\n\t*/\n\tfunction getCaption()\n\t{\n\t\treturn $this->caption;\n\t}\n\n\t/**\n\t* set horizontal align\n\t*/\n\tfunction setHAlign($a_halign)\n\t{\n\t\t$this->halign = $a_halign;\n\t}\n\n\t/**\n\t* get horizontal align\n\t*/\n\tfunction getHAlign()\n\t{\n\t\treturn $this->halign;\n\t}\n\n\n\t/**\n\t* set parameter\n\t*\n\t* @param\tstring\t$a_name\t\tparameter name\n\t* @param\tstring\t$a_value\tparameter value\n\t*/\n\tfunction setParameter($a_name, $a_value)\n\t{\n\t\tif ($this->checkParameter($a_name, $a_value))\n\t\t{\n\t\t\t$this->parameters[$a_name] = $a_value;\n\t\t}\n\t}\n\n\t/**\n\t* reset parameters\n\t*/\n\tfunction resetParameters()\n\t{\n\t\t$this->parameters = array();\n\t}\n\n\t/**\n\t* set alle parameters via parameter string (format: par1=\"value1\", par2=\"value2\", ...)\n\t*\n\t* @param\tstring\t\t$a_par\t\tparameter string\n\t*/\n\tfunction setParameters($a_par)\n\t{\n\t\t$this->resetParameters();\n\t\t$par_arr = ilUtil::extractParameterString($a_par);\n\t\tif(is_array($par_arr))\n\t\t{\n\t\t\tforeach($par_arr as $par => $val)\n\t\t\t{\n\t\t\t\t$this->setParameter($par, $val);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Check parameter (filter javascript related and other unsafe parameters/values)\n\t *\n\t * @param string $a_par parameter\n\t * @param string $a_val value\n\t * @return bool\n\t */\n\tfunction checkParameter($a_par, $a_val)\n\t{\n\t\t// do not allow event attributes\n\t\tif (substr(strtolower(trim($a_par)), 0, 2) == \"on\")\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t// no javascript in value\n\t\tif (is_int(strpos(strtolower($a_val), \"javascript\")))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t// do not allow to change the src attribute\n\t\tif (in_array(strtolower(trim($a_par)), array(\"src\")))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\n\t/**\n\t* get all parameters (in array)\n\t*/\n\tfunction getParameters()\n\t{\n\t\treturn $this->parameters;\n\t}\n\n\n\t/**\n\t* get all parameters (as string)\n\t*/\n\tfunction getParameterString()\n\t{\n\t\treturn ilUtil::assembleParameterString($this->parameters);\n\t}\n\n\n\t/**\n\t* get a single parameter\n\t*/\n\tfunction getParameter($a_name)\n\t{\n\t\treturn $this->parameters[$a_name];\n\t}\n\n\t/**\n\t* get work directory for image map editing\n\t*/\n\tfunction getWorkDirectory()\n\t{\n\t\treturn ilUtil::getDataDir().\"/map_workfiles/item_\".$this->getId();\n\t}\n\n\t/**\n\t* create work directory for image map editing\n\t*/\n\tfunction createWorkDirectory()\n\t{\n\t\tif(!@is_dir(ilUtil::getDataDir().\"/map_workfiles\"))\n\t\t{\n\t\t\tilUtil::createDirectory(ilUtil::getDataDir().\"/map_workfiles\");\n\t\t}\n\t\t$work_dir = $this->getWorkDirectory();\n\t\tif(!@is_dir($work_dir))\n\t\t{\n\t\t\tilUtil::createDirectory($work_dir);\n\t\t}\n\t}\n\n\t/**\n\t* get location suffix\n\t*/\n\tfunction getSuffix()\n\t{\n\t\t$loc_arr = explode(\".\", $this->getLocation());\n\n\t\treturn $loc_arr[count($loc_arr) - 1];\n\t}\n\n\t/**\n\t* get image type of image map work copy\n\t*/\n\tfunction getMapWorkCopyType()\n\t{\n\t\treturn ilUtil::getGDSupportedImageType($this->getSuffix());\n\t}\n\n\t/**\n\t* Get name of image map work copy file\n\t*\n\t* @param\tstring\t\tGet name, for copy of external referenced image\n\t*/\n\tfunction getMapWorkCopyName($a_reference_copy = false)\n\t{\n\t\t$file_arr = explode(\"/\", $this->getLocation());\n\t\t$o_file = $file_arr[count($file_arr) - 1];\n\t\t$file_arr = explode(\".\", $o_file);\n\t\tunset($file_arr[count($file_arr) - 1]);\n\t\t$file = implode($file_arr, \".\");\n\n\t\tif (!$a_reference_copy)\n\t\t{\n\t\t\treturn $this->getWorkDirectory().\"/\".$file.\".\".$this->getMapWorkCopyType();\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn $this->getWorkDirectory().\"/l_copy_\".$o_file;\n\t\t}\n\t}\n\n\t/**\n\t* get media file directory\n\t*/\n\tfunction getDirectory()\n\t{\n\t\treturn ilObjMediaObject::_getDirectory($this->getMobId());\n\t}\n\n\t/**\n\t* get media file directory\n\t*/\n\tfunction getThumbnailDirectory($a_mode = \"filesystem\")\n\t{\n\t\treturn ilObjMediaObject::_getThumbnailDirectory($this->getMobId(), $a_mode);\n\t}\n\n\t/**\n\t* get thumbnail target\n\t*/\n\tfunction getThumbnailTarget($a_size = \"\")\n\t{\n\t\tif (is_int(strpos($this->getFormat(), \"image\")))\n\t\t{\n\t\t\t$thumb_file = $this->getThumbnailDirectory().\"/\".\n\t\t\t\t$this->getPurpose().\".jpeg\";\n\n\t\t\t$thumb_file_small = $this->getThumbnailDirectory().\"/\".\n\t\t\t\t$this->getPurpose().\"_small.jpeg\";\n\n\t\t\t// generate thumbnail (if not tried before)\n\t\t\tif ($this->getThumbTried() == \"n\" && $this->getLocationType() == \"LocalFile\")\n\t\t\t{\n\t\t\t\tif (is_file($thumb_file))\n\t\t\t\t{\n\t\t\t\t\tunlink($thumb_file);\n\t\t\t\t}\n\t\t\t\tif (is_file($thumb_file_small))\n\t\t\t\t{\n\t\t\t\t\tunlink($thumb_file_small);\n\t\t\t\t}\n\t\t\t\t$this->writeThumbTried(\"y\");\n\t\t\t\tilObjMediaObject::_createThumbnailDirectory($this->getMobId());\n\t\t\t\t$med_file = $this->getDirectory().\"/\".$this->getLocation();\n\n\t\t\t\tif (is_file($med_file))\n\t\t\t\t{\n\t\t\t\t\tilUtil::convertImage($med_file, $thumb_file, \"jpeg\", \"80\");\n\t\t\t\t\tilUtil::convertImage($med_file, $thumb_file_small, \"jpeg\", \"40\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($a_size == \"small\")\n\t\t\t{\n\t\t\t\tif (is_file($thumb_file_small))\n\t\t\t\t{\n\t\t\t\t\treturn $this->getThumbnailDirectory(\"output\").\"/\".\n\t\t\t\t\t\t$this->getPurpose().\"_small.jpeg?dummy=\".rand(1, 999999);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (is_file($thumb_file))\n\t\t\t\t{\n\t\t\t\t\treturn $this->getThumbnailDirectory(\"output\").\"/\".\n\t\t\t\t\t\t$this->getPurpose().\".jpeg?dummy=\".rand(1, 999999);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\n\t/**\n\t* Copy the orginal file\n\t*/\n\tfunction copyOriginal()\n\t{\n\t\t$lng = $this->lng;\n\t    $this->createWorkDirectory();\n\n\t\t$geom = ($this->getWidth() != \"\" && $this->getHeight() != \"\")\n\t\t\t? $this->getWidth().\"x\".$this->getHeight()\n\t\t\t: \"\";\n\n\t\tif ($this->getLocationType() != \"Reference\")\n\t\t{\n\t\t\tilUtil::convertImage($this->getDirectory().\"/\".$this->getLocation(),\n\t\t\t\t$this->getMapWorkCopyName(),\n\t\t\t\t$this->getMapWorkCopyType(), $geom);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// first copy the external file, if necessary\n\t\t\tif (!is_file($this->getMapWorkCopyName(true)) || (filesize($this->getMapWorkCopyName(true)) == 0))\n\t\t\t{\n\t\t\t\t$handle = @fopen($this->getLocation(), \"r\");\n\t\t\t\t$lcopy = fopen($this->getMapWorkCopyName(true), \"w\");\n\t\t\t\tif ($handle && $lcopy)\n\t\t\t\t{\n\t\t\t\t\twhile (!feof($handle))\n\t\t\t\t\t{\n\t\t\t\t\t\t$content = fread($handle, 4096);\n\t\t\t\t\t\tfwrite($lcopy, $content);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t@fclose($lcopy);\n\t\t\t\t@fclose($handle);\n\t\t\t}\n\t\t\t\n\t\t\t// now, create working copy\n\t\t\tilUtil::convertImage($this->getMapWorkCopyName(true),\n\t\t\t\t$this->getMapWorkCopyName(),\n\t\t\t\t$this->getMapWorkCopyType(), $geom);\n\t\t}\n\n\t\tif (!is_file($this->getMapWorkCopyName()))\n\t\t{\n\t\t    \n\t\t\tilUtil::sendFailure($lng->txt(\"cont_map_file_not_generated\"));\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t/**\n\t* make map work copy of image\n\t*\n\t* @param\tint\t\t\t$a_area_nr\t\tdraw area $a_area_nr only\n\t* @param\tboolean\t\t$a_exclude\t\ttrue: draw all areas but area $a_area_nr\n\t*/\n\tfunction makeMapWorkCopy($a_area_nr = 0, $a_exclude = false)\n\t{\n\t\t$lng = $this->lng;\n\t\t\n\t\tif (!$this->copyOriginal())\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t$this->buildMapWorkImage();\n\t\t\n\t\t// determine ratios\n\t\t$size = @getimagesize($this->getMapWorkCopyName());\n\t\t$x_ratio = 1;\n\t\tif ($size[0] > 0 && $this->getWidth() > 0)\n\t\t{\n\t\t\t$x_ratio = $this->getWidth() / $size[0];\n\t\t}\n\t\t$y_ratio = 1;\n\t\tif ($size[1] > 0 && $this->getHeight() > 0)\n\t\t{\n\t\t\t$y_ratio = $this->getHeight() / $size[1];\n\t\t}\n\n\t\t// draw map areas\n\t\tfor ($i=0; $i < count($this->mapareas); $i++)\n\t\t{\n\t\t\tif (\t((($i+1) == $a_area_nr) && !$a_exclude) ||\n\t\t\t\t\t((($i+1) != $a_area_nr) && $a_exclude) ||\n\t\t\t\t\t($a_area_nr == 0)\n\t\t\t\t)\n\t\t\t{\n\t\t\t\t$area = $this->mapareas[$i];\n\t\t\t\t$area->draw($this->getMapWorkImage(), $this->color1, $this->color2, true,\n\t\t\t\t\t$x_ratio, $y_ratio);\n\t\t\t}\n\t\t}\n\n\t\t$this->saveMapWorkImage();\n\t\t\n\t\treturn true;\n\t}\n\n\n\t/**\n\t* draw a new area in work image\n\t*\n\t* @param\tstring\t\t$a_shape\t\tshape\n\t* @param\tstring\t\t$a_coords\t\tcoordinates string\n\t*/\n\tfunction addAreaToMapWorkCopy($a_shape, $a_coords)\n\t{\n\t\t$this->buildMapWorkImage();\n\n\t\t// determine ratios\n\t\t$size = @getimagesize($this->getMapWorkCopyName());\n\t\t$x_ratio = 1;\n\t\tif ($size[0] > 0 && $this->getWidth() > 0)\n\t\t{\n\t\t\t$x_ratio = $this->getWidth() / $size[0];\n\t\t}\n\t\t$y_ratio = 1;\n\t\tif ($size[1] > 0 && $this->getHeight() > 0)\n\t\t{\n\t\t\t$y_ratio = $this->getHeight() / $size[1];\n\t\t}\n\n\t\t// add new area to work image\n\t\t$area = new ilMapArea();\n\t\t$area->setShape($a_shape);\n\t\t$area->setCoords($a_coords);\n\t\t$area->draw($this->getMapWorkImage(), $this->color1, $this->color2, false,\n\t\t\t$x_ratio, $y_ratio);\n\n\t\t$this->saveMapWorkImage();\n\t}\n\n\t/**\n\t* output raw map work copy file\n\t*/\n\tfunction outputMapWorkCopy()\n\t{\n\t\tif ($this->getMapWorkCopyType() != \"\")\n\t\t{\n\t\t\theader(\"Pragma: no-cache\");\n\t\t\theader(\"Expires: 0\");\n\t\t\theader(\"Content-type: image/\".strtolower($this->getMapWorkCopyType()));\n\t\t\treadfile($this->getMapWorkCopyName());\n\t\t}\n\t\texit;\n\t}\n\n\t/**\n\t* build image map work image\n\t*/\n\tfunction buildMapWorkImage()\n\t{\n\t\t$im_type = strtolower($this->getMapWorkCopyType());\n\n\t\tswitch ($im_type)\n\t\t{\n\t\t\tcase \"gif\":\n\t\t\t\t$this->map_image = ImageCreateFromGIF($this->getMapWorkCopyName());\n\t\t\t\tbreak;\n\n\t\t\tcase \"jpg\":\n\t\t\tcase \"jpeg\":\n\t\t\t\t$this->map_image = ImageCreateFromJPEG($this->getMapWorkCopyName());\n\t\t\t\tbreak;\n\n\t\t\tcase \"png\":\n\t\t\t\t$this->map_image = ImageCreateFromPNG($this->getMapWorkCopyName());\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// try to allocate black and white as color. if this is not possible, get the closest colors\n\t\tif (imagecolorstotal($this->map_image) > 250)\n\t\t{\n\t\t\t$this->color1 = imagecolorclosest($this->map_image, 0, 0, 0);\n\t\t\t$this->color2 = imagecolorclosest($this->map_image, 255, 255, 255);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->color1 = imagecolorallocate($this->map_image, 0, 0, 0);\n\t\t\t$this->color2 = imagecolorallocate($this->map_image, 255, 255, 255);\n\t\t}\n\t}\n\n\t/**\n\t* save image map work image\n\t*/\n\tfunction saveMapWorkImage()\n\t{\n\t\t$im_type = strtolower($this->getMapWorkCopyType());\n\n\t\t// save image work-copy and free memory\n\t\tswitch ($im_type)\n\t\t{\n\t\t\tcase \"gif\":\n\t\t\t\tImageGIF($this->map_image, $this->getMapWorkCopyName());\n\t\t\t\tbreak;\n\n\t\t\tcase \"jpg\":\n\t\t\tcase \"jpeg\":\n\t\t\t\tImageJPEG($this->map_image, $this->getMapWorkCopyName());\n\t\t\t\tbreak;\n\n\t\t\tcase \"png\":\n\t\t\t\tImagePNG($this->map_image, $this->getMapWorkCopyName());\n\t\t\t\tbreak;\n\t\t}\n\n\t\tImageDestroy($this->map_image);\n\t}\n\n\t/**\n\t* get image map work image\n\t*/\n\tfunction &getMapWorkImage()\n\t{\n\t\treturn $this->map_image;\n\t}\n\n\n\t/**\n\t* get xml code of media items' areas\n\t*/\n\tfunction getMapAreasXML($a_insert_inst = false, $a_inst = 0)\n\t{\n\t\t$xml = \"\";\n\n\t\t// build xml of map areas\n\t\tfor ($i=0; $i < count($this->mapareas); $i++)\n\t\t{\n\t\t\t$area = $this->mapareas[$i];\n\t\t\t\n\t\t\t// highlight mode\n\t\t\t$hm = \"\";\n\t\t\tif ($area->getHighlightMode() != \"\")\n\t\t\t{\n\t\t\t\t$hm = ' HighlightMode=\"'.$area->getHighlightMode().'\" ';\n\t\t\t\t$hcl = ($area->getHighlightClass() != \"\")\n\t\t\t\t\t? $area->getHighlightClass()\n\t\t\t\t\t: \"Accented\";\n\t\t\t\t$hm.= 'HighlightClass=\"'.$hcl.'\" ';\n\t\t\t}\n\t\t\t\n\t\t\t$xml .= \"<MapArea Shape=\\\"\".$area->getShape().\"\\\" Coords=\\\"\".$area->getCoords().\"\\\" \".$hm.\">\";\n\t\t\tif ($area->getLinkType() == IL_INT_LINK)\n\t\t\t{\n\t\t\t\t$target_frame = $area->getTargetFrame();\n\n\t\t\t\tif ($area->getType() == \"GlossaryItem\" && $target_frame == \"\")\n\t\t\t\t{\n\t\t\t\t\t$target_frame = \"Glossary\";\n\t\t\t\t}\n\n\t\t\t\t$tf_str = ($target_frame == \"\")\n\t\t\t\t\t? \"\"\n\t\t\t\t\t: \"TargetFrame=\\\"\".$target_frame.\"\\\"\";\n\t\t\t\t\n\t\t\t\t$xml .= \"<IntLink Target=\\\"\".$area->getTarget($a_insert_inst, $a_inst).\"\\\" Type=\\\"\".\n\t\t\t\t\t$area->getType().\"\\\" $tf_str>\";\n\t\t\t\t// see bug 17893 and http://stackoverflow.com/questions/4026502/xml-error-at-ampersand\n\t\t\t\t$xml .= htmlspecialchars($area->getTitle(), ENT_QUOTES);\n\t\t\t\t$xml .=\"</IntLink>\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$xml .= \"<ExtLink Href=\\\"\".str_replace(\"&\", \"&amp;\",$area->getHref()).\"\\\" Title=\\\"\".\n\t\t\t\t\tstr_replace(\"&\", \"&amp;\",$area->getExtTitle()).\"\\\">\";\n\t\t\t\t$xml .= str_replace(\"&\", \"&amp;\", $area->getTitle());\n\t\t\t\t$xml .=\"</ExtLink>\";\n\t\t\t}\n\t\t\t$xml .= \"</MapArea>\";\n\t\t}\n\t\treturn $xml;\n\t}\n\n\n\t/**\n\t* resolve internal links of all media items of a media object\n\t*\n\t* @param\tint\t\t$a_mob_id\t\tmedia object id\n\t*/\n\tstatic function _resolveMapAreaLinks($a_mob_id)\n\t{\n\t\tglobal $DIC;\n\n\t\t$ilDB = $DIC->database();\n\t\t\n//echo \"mediaItems::resolve<br>\";\n\t\t// read media_object record\n\t\t$query = \"SELECT * FROM media_item WHERE mob_id = \".\n\t\t\t$ilDB->quote($a_mob_id, \"integer\").\" \".\n\t\t\t\"ORDER BY nr\";\n\t\t$item_set = $ilDB->query($query);\n\t\twhile ($item_rec = $ilDB->fetchAssoc($item_set))\n\t\t{\n\t\t\tilMapArea::_resolveIntLinks($item_rec[\"id\"]);\n\t\t}\n\t}\n\n\t/**\n\t* get all internal links of map areas of a mob\n\t*\n\t* @param\tint\t\t$a_mob_id\t\tmedia object id\n\t*/\n\tstatic function _getMapAreasIntLinks($a_mob_id)\n\t{\n\t\tglobal $DIC;\n\n\t\t$ilDB = $DIC->database();\n\t\t\n\t\t// read media_items records\n\t\t$query = \"SELECT * FROM media_item WHERE mob_id = \".\n\t\t\t$ilDB->quote($a_mob_id, \"integer\").\" ORDER BY nr\";\n\n\t\t$item_set = $ilDB->query($query);\n\t\t$links = array();\n\t\twhile ($item_rec = $ilDB->fetchAssoc($item_set))\n\t\t{\n\t\t\t$map_links = ilMapArea::_getIntLinks($item_rec[\"id\"]);\n\t\t\tforeach($map_links as $key => $map_link)\n\t\t\t{\n\t\t\t\t$links[$key] = $map_link;\n\t\t\t}\n\t\t}\n\t\treturn $links;\n\t}\n\n\t/**\n\t* Extract parameters of special external references to parameter array\n\t*/\n\tfunction extractUrlParameters()\n\t{\n\t\tinclude_once(\"./Services/MediaObjects/classes/class.ilExternalMediaAnalyzer.php\");\n\t\t$par = ilExternalMediaAnalyzer::extractUrlParameters(\n\t\t\t$this->getLocation(), $this->getParameters());\n\t\tforeach ($par as $k => $v)\n\t\t{\n\t\t\t$this->setParameter($k, $v);\n\t\t}\n\t}\n}\n?>\n"], "filenames": ["Services/MediaObjects/classes/class.ilMediaItem.php"], "buggy_code_start_loc": [674], "buggy_code_end_loc": [700], "fixing_code_start_loc": [674], "fixing_code_end_loc": [732], "type": "CWE-79", "message": "Stored XSS vulnerability in the Media Objects component of ILIAS before 5.1.21 and 5.2.x before 5.2.9 allows an authenticated user to inject JavaScript to gain administrator privileges, related to the setParameter function in Services/MediaObjects/classes/class.ilMediaItem.php.", "other": {"cve": {"id": "CVE-2017-15538", "sourceIdentifier": "cve@mitre.org", "published": "2017-10-17T20:29:00.197", "lastModified": "2018-06-19T14:59:47.717", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Stored XSS vulnerability in the Media Objects component of ILIAS before 5.1.21 and 5.2.x before 5.2.9 allows an authenticated user to inject JavaScript to gain administrator privileges, related to the setParameter function in Services/MediaObjects/classes/class.ilMediaItem.php."}, {"lang": "es", "value": "Vulnerabilidad Cross-Site Scripting (XSS) persistente en el componente Media Objects de ILIAS en versiones anteriores a 5.1.21 y 5.2.x anteriores a 5.2.9 permite que un usuario autenticado inyecte JavaScript para obtener privilegios de administrador, relacionado con la funci\u00f3n setParameter en Services/MediaObjects/classes/class.ilMediaItem.php."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:*:*:*:*:*:*:*:*", "versionEndIncluding": "5.1.21", "matchCriteriaId": "2FCDD5A5-A108-4618-AB21-B6846FF59472"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.2.0", "versionEndExcluding": "5.2.9", "matchCriteriaId": "516BEB53-5FE4-465E-992D-9033DC4664E9"}]}]}], "references": [{"url": "http://openwall.com/lists/oss-security/2017/10/17/3", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/ILIAS-eLearning/ILIAS/commit/b2a4660afec1e87d41c83c8e381f549bc6dfc70f", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://lists.ilias.de/pipermail/ilias-admins/2017-October/000053.html", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://www.ilias.de/docu/goto_docu_pg_75377_35.html", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Release Notes", "Vendor Advisory"]}, {"url": "https://www.ilias.de/docu/goto_docu_pg_75378_1719.html", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Release Notes", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/ILIAS-eLearning/ILIAS/commit/b2a4660afec1e87d41c83c8e381f549bc6dfc70f"}}