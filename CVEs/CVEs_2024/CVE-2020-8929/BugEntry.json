{"buggy_code": ["load(\"@build_bazel_rules_android//android:rules.bzl\", \"android_library\")\nload(\"@tink_base//:tink_version.bzl\", \"TINK_VERSION_LABEL\")\nload(\"@tink_base//tools:common.bzl\", \"template_rule\")\n\nlicenses([\"notice\"])\n\npackage(default_visibility = [\"//visibility:public\"])\n\n# Primitives\n\njava_library(\n    name = \"aead\",\n    srcs = [\"Aead.java\"],\n)\n\njava_library(\n    name = \"streaming_aead\",\n    srcs = [\"StreamingAead.java\"],\n)\n\njava_library(\n    name = \"deterministic_aead\",\n    srcs = [\"DeterministicAead.java\"],\n)\n\njava_library(\n    name = \"hybrid_decrypt\",\n    srcs = [\"HybridDecrypt.java\"],\n)\n\njava_library(\n    name = \"hybrid_encrypt\",\n    srcs = [\"HybridEncrypt.java\"],\n)\n\njava_library(\n    name = \"mac\",\n    srcs = [\"Mac.java\"],\n)\n\njava_library(\n    name = \"key_wrap\",\n    srcs = [\"KeyWrap.java\"],\n)\n\njava_library(\n    name = \"public_key_sign\",\n    srcs = [\"PublicKeySign.java\"],\n)\n\njava_library(\n    name = \"public_key_verify\",\n    srcs = [\"PublicKeyVerify.java\"],\n)\n\n# Other public interfaces\n\njava_library(\n    name = \"crypto_format\",\n    srcs = [\"CryptoFormat.java\"],\n    deps = [\"//proto:tink_java_proto\"],\n)\n\nandroid_library(\n    name = \"crypto_format-android\",\n    srcs = [\"CryptoFormat.java\"],\n    deps = [\"//proto:tink_java_proto_lite\"],\n)\n\njava_library(\n    name = \"primitive_wrapper\",\n    srcs = [\"PrimitiveWrapper.java\"],\n    deps = [\":primitive_set\"],\n)\n\nandroid_library(\n    name = \"primitive_wrapper-android\",\n    srcs = [\"PrimitiveWrapper.java\"],\n    deps = [\":primitive_set-android\"],\n)\n\njava_library(\n    name = \"kms_client\",\n    srcs = [\"KmsClient.java\"],\n    deps = [\":aead\"],\n)\n\njava_library(\n    name = \"kms_clients\",\n    srcs = [\"KmsClients.java\"],\n    deps = [\":kms_client\"],\n)\n\njava_library(\n    name = \"keyset_writer\",\n    srcs = [\"KeysetWriter.java\"],\n    deps = [\"//proto:tink_java_proto\"],\n)\n\nandroid_library(\n    name = \"keyset_writer-android\",\n    srcs = [\"KeysetWriter.java\"],\n    deps = [\"//proto:tink_java_proto_lite\"],\n)\n\njava_library(\n    name = \"binary_keyset_writer\",\n    srcs = [\"BinaryKeysetWriter.java\"],\n    deps = [\n        \":keyset_writer\",\n        \"//proto:tink_java_proto\",\n    ],\n)\n\nandroid_library(\n    name = \"binary_keyset_writer-android\",\n    srcs = [\"BinaryKeysetWriter.java\"],\n    deps = [\n        \":keyset_writer-android\",\n        \"//proto:tink_java_proto_lite\",\n    ],\n)\n\njava_library(\n    name = \"json_keyset_writer\",\n    srcs = [\"JsonKeysetWriter.java\"],\n    deps = [\n        \":keyset_writer\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink/subtle:base64\",\n        \"@maven//:org_json_json\",\n    ],\n)\n\nandroid_library(\n    name = \"json_keyset_writer-android\",\n    srcs = [\"JsonKeysetWriter.java\"],\n    deps = [\n        \":keyset_writer\",\n        \":keyset_writer-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"//src/main/java/com/google/crypto/tink/subtle:base64\",\n        \"@maven//:org_json_json\",\n    ],\n)\n\njava_library(\n    name = \"keyset_reader\",\n    srcs = [\"KeysetReader.java\"],\n    deps = [\"//proto:tink_java_proto\"],\n)\n\nandroid_library(\n    name = \"keyset_reader-android\",\n    srcs = [\"KeysetReader.java\"],\n    deps = [\"//proto:tink_java_proto_lite\"],\n)\n\njava_library(\n    name = \"binary_keyset_reader\",\n    srcs = [\"BinaryKeysetReader.java\"],\n    deps = [\n        \":keyset_reader\",\n        \"//proto:tink_java_proto\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"binary_keyset_reader-android\",\n    srcs = [\"BinaryKeysetReader.java\"],\n    deps = [\n        \":keyset_reader-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"json_keyset_reader\",\n    srcs = [\"JsonKeysetReader.java\"],\n    deps = [\n        \":keyset_reader\",\n        \":util\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink/subtle:base64\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:org_json_json\",\n    ],\n)\n\nandroid_library(\n    name = \"json_keyset_reader-android\",\n    srcs = [\"JsonKeysetReader.java\"],\n    deps = [\n        \":keyset_reader-android\",\n        \":util-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"//src/main/java/com/google/crypto/tink/subtle:base64\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:org_json_json\",\n    ],\n)\n\njava_library(\n    name = \"private_key_manager\",\n    srcs = [\"PrivateKeyManager.java\"],\n    deps = [\n        \":key_manager\",\n        \"//proto:tink_java_proto\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"private_key_manager-android\",\n    srcs = [\"PrivateKeyManager.java\"],\n    deps = [\n        \":key_manager-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"privileged_registry\",\n    srcs = [\"PrivilegedRegistry.java\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":registry_cluster\",\n        \"//proto:tink_java_proto\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"privileged_registry-android\",\n    srcs = [\"PrivilegedRegistry.java\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":registry_cluster-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"key_type_manager\",\n    srcs = [\"KeyTypeManager.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink/annotations:alpha\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"key_type_manager-android\",\n    srcs = [\"KeyTypeManager.java\"],\n    deps = [\n        \"//proto:tink_java_proto_lite\",\n        \"//src/main/java/com/google/crypto/tink/annotations:alpha\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"key_template\",\n    srcs = [\"KeyTemplate.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_errorprone_error_prone_annotations\",\n    ],\n)\n\nandroid_library(\n    name = \"key_template-android\",\n    srcs = [\"KeyTemplate.java\"],\n    deps = [\n        \"//proto:tink_java_proto_lite\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_errorprone_error_prone_annotations\",\n    ],\n)\n\njava_library(\n    name = \"config\",\n    srcs = [\"Config.java\"],\n    deps = [\n        \":catalogue\",\n        \":key_manager\",\n        \":registry_cluster\",\n        \"//proto:config_java_proto\",\n    ],\n)\n\nandroid_library(\n    name = \"config-android\",\n    srcs = [\"Config.java\"],\n    deps = [\n        \":catalogue-android\",\n        \":key_manager-android\",\n        \":registry_cluster-android\",\n        \"//proto:config_java_proto_lite\",\n    ],\n)\n\njava_library(\n    name = \"private_key_manager_impl\",\n    srcs = [\"PrivateKeyManagerImpl.java\"],\n    deps = [\n        \":key_manager_impl\",\n        \":key_type_manager\",\n        \":private_key_manager\",\n        \":private_key_type_manager\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink/annotations:alpha\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"private_key_manager_impl-android\",\n    srcs = [\"PrivateKeyManagerImpl.java\"],\n    deps = [\n        \":key_manager_impl-android\",\n        \":key_type_manager-android\",\n        \":private_key_manager-android\",\n        \":private_key_type_manager-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"//src/main/java/com/google/crypto/tink/annotations:alpha\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"no_secret_keyset_handle\",\n    srcs = [\"NoSecretKeysetHandle.java\"],\n    deps = [\n        \":keyset_reader\",\n        \":registry_cluster\",\n        \"//proto:tink_java_proto\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"no_secret_keyset_handle-android\",\n    srcs = [\"NoSecretKeysetHandle.java\"],\n    deps = [\n        \":keyset_reader-android\",\n        \":registry_cluster-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"cleartext_keyset_handle\",\n    srcs = [\"CleartextKeysetHandle.java\"],\n    deps = [\n        \":keyset_reader\",\n        \":keyset_writer\",\n        \":registry_cluster\",\n        \"//proto:tink_java_proto\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"cleartext_keyset_handle-android\",\n    srcs = [\"CleartextKeysetHandle.java\"],\n    deps = [\n        \":keyset_reader-android\",\n        \":keyset_writer-android\",\n        \":registry_cluster-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"private_key_type_manager\",\n    srcs = [\"PrivateKeyTypeManager.java\"],\n    deps = [\n        \":key_type_manager\",\n        \"//src/main/java/com/google/crypto/tink/annotations:alpha\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"private_key_type_manager-android\",\n    srcs = [\"PrivateKeyTypeManager.java\"],\n    deps = [\n        \":key_type_manager-android\",\n        \"//src/main/java/com/google/crypto/tink/annotations:alpha\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"util\",\n    srcs = [\"Util.java\"],\n    deps = [\"//proto:tink_java_proto\"],\n)\n\nandroid_library(\n    name = \"util-android\",\n    srcs = [\"Util.java\"],\n    deps = [\"//proto:tink_java_proto_lite\"],\n)\n\njava_library(\n    name = \"catalogue\",\n    srcs = [\"Catalogue.java\"],\n    deps = [\n        \":key_manager\",\n        \":primitive_wrapper\",\n    ],\n)\n\nandroid_library(\n    name = \"catalogue-android\",\n    srcs = [\"Catalogue.java\"],\n    deps = [\n        \":key_manager-android\",\n        \":primitive_wrapper-android\",\n    ],\n)\n\njava_library(\n    name = \"key_manager\",\n    srcs = [\"KeyManager.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"key_manager-android\",\n    srcs = [\"KeyManager.java\"],\n    deps = [\n        \"//proto:tink_java_proto_lite\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"key_manager_impl\",\n    srcs = [\"KeyManagerImpl.java\"],\n    deps = [\n        \":key_manager\",\n        \":key_type_manager\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink/annotations:alpha\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"key_manager_impl-android\",\n    srcs = [\"KeyManagerImpl.java\"],\n    deps = [\n        \":key_manager-android\",\n        \":key_type_manager-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"//src/main/java/com/google/crypto/tink/annotations:alpha\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"primitive_set\",\n    srcs = [\"PrimitiveSet.java\"],\n    deps = [\n        \":crypto_format\",\n        \"//proto:tink_java_proto\",\n    ],\n)\n\nandroid_library(\n    name = \"primitive_set-android\",\n    srcs = [\"PrimitiveSet.java\"],\n    deps = [\n        \":crypto_format-android\",\n        \"//proto:tink_java_proto_lite\",\n    ],\n)\n\njava_library(\n    name = \"registry_cluster\",\n    srcs = [\n        \"KeysetHandle.java\",\n        \"KeysetManager.java\",\n        \"Registry.java\",\n    ],\n    deps = [\n        \":aead\",\n        \":catalogue\",\n        \":key_manager\",\n        \":key_manager_impl\",\n        \":key_template\",\n        \":key_type_manager\",\n        \":keyset_reader\",\n        \":keyset_writer\",\n        \":primitive_set\",\n        \":primitive_wrapper\",\n        \":private_key_manager\",\n        \":private_key_manager_impl\",\n        \":private_key_type_manager\",\n        \":util\",\n        \"//proto:tink_java_proto\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_code_findbugs_jsr305\",\n    ],\n)\n\nandroid_library(\n    name = \"registry_cluster-android\",\n    srcs = [\n        \"KeysetHandle.java\",\n        \"KeysetManager.java\",\n        \"Registry.java\",\n    ],\n    deps = [\n        \":aead\",\n        \":catalogue-android\",\n        \":key_manager-android\",\n        \":key_manager_impl-android\",\n        \":key_template-android\",\n        \":key_type_manager-android\",\n        \":keyset_reader-android\",\n        \":keyset_writer-android\",\n        \":primitive_set-android\",\n        \":primitive_wrapper-android\",\n        \":private_key_manager-android\",\n        \":private_key_manager_impl-android\",\n        \":private_key_type_manager-android\",\n        \":util-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_code_findbugs_jsr305\",\n    ],\n)\n\ntemplate_rule(\n    name = \"version_java\",\n    src = \"Version.java.templ\",\n    out = \"Version.java\",\n    substitutions = {\n        \"TINK_VERSION_LABEL\": \"%s\" % TINK_VERSION_LABEL,\n    },\n)\n\njava_library(\n    name = \"version\",\n    srcs = [\":version_java\"],\n)\n", "// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////////\n\npackage com.google.crypto.tink;\n\nimport com.google.crypto.tink.proto.KeyStatusType;\nimport com.google.crypto.tink.proto.Keyset;\nimport com.google.crypto.tink.proto.OutputPrefixType;\nimport java.nio.charset.Charset;\nimport java.security.GeneralSecurityException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * A container class for a set of primitives -- implementations of cryptographic primitives offered\n * by Tink.\n *\n * <p>It provides also additional properties for the primitives it holds. In particular, one of the\n * primitives in the set can be distinguished as \"the primary\" one.\n *\n * <p>PrimitiveSet is an auxiliary class used for supporting key rotation: primitives in a set\n * correspond to keys in a keyset. Users will usually work with primitive instances, which\n * essentially wrap primitive sets. For example an instance of an Aead-primitive for a given keyset\n * holds a set of Aead-primitives corresponding to the keys in the keyset, and uses the set members\n * to do the actual crypto operations: to encrypt data the primary Aead-primitive from the set is\n * used, and upon decryption the ciphertext's prefix determines the id of the primitive from the\n * set.\n *\n * <p>PrimitiveSet is a public class to allow its use in implementations of custom primitives.\n *\n * @since 1.0.0\n */\npublic final class PrimitiveSet<P> {\n  private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n  /**\n   * A single entry in the set. In addition to the actual primitive it holds also some extra\n   * information about the primitive.\n   */\n  public static final class Entry<P> {\n    // The actual primitive.\n    private final P primitive;\n    // Identifies the primitive within the set.\n    // It is the ciphertext prefix of the corresponding key.\n    private final byte[] identifier;\n    // The status of the key represented by the primitive.\n    private final KeyStatusType status;\n    // The output prefix type of the key represented by the primitive.\n    private final OutputPrefixType outputPrefixType;\n    // The id of the key.\n    private final int keyId;\n\n    Entry(\n        P primitive,\n        final byte[] identifier,\n        KeyStatusType status,\n        OutputPrefixType outputPrefixType,\n        int keyId) {\n      this.primitive = primitive;\n      this.identifier = Arrays.copyOf(identifier, identifier.length);\n      this.status = status;\n      this.outputPrefixType = outputPrefixType;\n      this.keyId = keyId;\n    }\n\n    public P getPrimitive() {\n      return this.primitive;\n    }\n\n    public KeyStatusType getStatus() {\n      return status;\n    }\n\n    public OutputPrefixType getOutputPrefixType() {\n      return outputPrefixType;\n    }\n\n    public final byte[] getIdentifier() {\n      if (identifier == null) {\n        return null;\n      } else {\n        return Arrays.copyOf(identifier, identifier.length);\n      }\n    }\n\n    public int getKeyId() {\n      return keyId;\n    }\n  }\n\n  /** @return the entry with the primary primitive. */\n  public Entry<P> getPrimary() {\n    return primary;\n  }\n\n  /** @return all primitives using RAW prefix. */\n  public List<Entry<P>> getRawPrimitives() {\n    return getPrimitive(CryptoFormat.RAW_PREFIX);\n  }\n\n  /** @return the entries with primitive identifed by {@code identifier}. */\n  public List<Entry<P>> getPrimitive(final byte[] identifier) {\n    List<Entry<P>> found = primitives.get(new String(identifier, UTF_8));\n    return found != null ? found : Collections.<Entry<P>>emptyList();\n  }\n\n  /** Returns the entries with primitives identified by the ciphertext prefix of {@code key}. */\n  protected List<Entry<P>> getPrimitive(Keyset.Key key) throws GeneralSecurityException {\n    return getPrimitive(CryptoFormat.getOutputPrefix(key));\n  }\n\n  /** @return all primitives */\n  public Collection<List<Entry<P>>> getAll() {\n    return primitives.values();\n  }\n\n  /**\n   * The primitives are stored in a hash map of (ciphertext prefix, list of primivies sharing the\n   * prefix). This allows quickly retrieving the list of primitives sharing some particular prefix.\n   * Because all RAW keys are using an empty prefix, this also quickly allows retrieving them.\n   */\n  private ConcurrentMap<java.lang.String, List<Entry<P>>> primitives =\n      new ConcurrentHashMap<java.lang.String, List<Entry<P>>>();\n\n  private Entry<P> primary;\n  private final Class<P> primitiveClass;\n\n  private PrimitiveSet(Class<P> primitiveClass) {\n    this.primitiveClass = primitiveClass;\n  }\n\n  public static <P> PrimitiveSet<P> newPrimitiveSet(Class<P> primitiveClass) {\n    return new PrimitiveSet<P>(primitiveClass);\n  }\n\n  /** Sets given Entry {@code primary} as the primary one. */\n  public void setPrimary(final Entry<P> primary) {\n    if (primary == null) {\n      throw new IllegalArgumentException(\"the primary entry must be non-null\");\n    }\n    if (primary.getStatus() != KeyStatusType.ENABLED) {\n      throw new IllegalArgumentException(\"the primary entry has to be ENABLED\");\n    }\n    List<Entry<P>> entries = getPrimitive(primary.getIdentifier());\n    if (entries.isEmpty()) {\n      throw new IllegalArgumentException(\n          \"the primary entry cannot be set to an entry which is not held by this primitive set\");\n    }\n    this.primary = primary;\n  }\n\n  /**\n   * Creates an entry in the primitive table.\n   *\n   * @return the added entry\n   */\n  public Entry<P> addPrimitive(final P primitive, Keyset.Key key)\n      throws GeneralSecurityException {\n    if (key.getStatus() != KeyStatusType.ENABLED) {\n      throw new GeneralSecurityException(\"only ENABLED key is allowed\");\n    }\n    Entry<P> entry =\n        new Entry<P>(\n            primitive,\n            CryptoFormat.getOutputPrefix(key),\n            key.getStatus(),\n            key.getOutputPrefixType(),\n            key.getKeyId());\n    List<Entry<P>> list = new ArrayList<Entry<P>>();\n    list.add(entry);\n    // Cannot use [] as keys in hash map, convert to string.\n    String identifier = new String(entry.getIdentifier(), UTF_8);\n    List<Entry<P>> existing = primitives.put(identifier, Collections.unmodifiableList(list));\n    if (existing != null) {\n      List<Entry<P>> newList = new ArrayList<Entry<P>>();\n      newList.addAll(existing);\n      newList.add(entry);\n      primitives.put(identifier, Collections.unmodifiableList(newList));\n    }\n    return entry;\n  }\n\n  public Class<P> getPrimitiveClass() {\n    return primitiveClass;\n  }\n}\n", "licenses([\"notice\"])\n\njava_test(\n    name = \"NoSecretKeysetHandleTest\",\n    size = \"small\",\n    srcs = [\"NoSecretKeysetHandleTest.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:binary_keyset_reader\",\n        \"//src/main/java/com/google/crypto/tink:no_secret_keyset_handle\",\n        \"//src/main/java/com/google/crypto/tink:registry_cluster\",\n        \"//src/main/java/com/google/crypto/tink/config:tink_config\",\n        \"//src/main/java/com/google/crypto/tink/mac:mac_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"CleartextKeysetHandleTest\",\n    size = \"small\",\n    srcs = [\"CleartextKeysetHandleTest.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:binary_keyset_reader\",\n        \"//src/main/java/com/google/crypto/tink:binary_keyset_writer\",\n        \"//src/main/java/com/google/crypto/tink:cleartext_keyset_handle\",\n        \"//src/main/java/com/google/crypto/tink:keyset_reader\",\n        \"//src/main/java/com/google/crypto/tink:keyset_writer\",\n        \"//src/main/java/com/google/crypto/tink:mac\",\n        \"//src/main/java/com/google/crypto/tink:registry_cluster\",\n        \"//src/main/java/com/google/crypto/tink/config:tink_config\",\n        \"//src/main/java/com/google/crypto/tink/mac:mac_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"ConfigTest\",\n    size = \"small\",\n    srcs = [\"ConfigTest.java\"],\n    deps = [\n        \"//proto:config_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:config\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"PrivateKeyManagerImplTest\",\n    size = \"small\",\n    srcs = [\"PrivateKeyManagerImplTest.java\"],\n    deps = [\n        \"//proto:ed25519_java_proto\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:key_type_manager\",\n        \"//src/main/java/com/google/crypto/tink:private_key_manager\",\n        \"//src/main/java/com/google/crypto/tink:private_key_manager_impl\",\n        \"//src/main/java/com/google/crypto/tink:private_key_type_manager\",\n        \"//src/main/java/com/google/crypto/tink/subtle:random\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"JsonKeysetReaderTest\",\n    size = \"small\",\n    srcs = [\"JsonKeysetReaderTest.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:aead\",\n        \"//src/main/java/com/google/crypto/tink:cleartext_keyset_handle\",\n        \"//src/main/java/com/google/crypto/tink:config\",\n        \"//src/main/java/com/google/crypto/tink:json_keyset_reader\",\n        \"//src/main/java/com/google/crypto/tink:json_keyset_writer\",\n        \"//src/main/java/com/google/crypto/tink:mac\",\n        \"//src/main/java/com/google/crypto/tink:registry_cluster\",\n        \"//src/main/java/com/google/crypto/tink/aead:aead_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/config:tink_config\",\n        \"//src/main/java/com/google/crypto/tink/mac:mac_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/subtle:random\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n        \"@maven//:org_json_json\",\n    ],\n)\n\njava_test(\n    name = \"KeysetManagerTest\",\n    size = \"small\",\n    srcs = [\"KeysetManagerTest.java\"],\n    deps = [\n        \"//proto:aes_gcm_java_proto\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:key_template\",\n        \"//src/main/java/com/google/crypto/tink:registry_cluster\",\n        \"//src/main/java/com/google/crypto/tink/aead:aes_gcm_key_manager\",\n        \"//src/main/java/com/google/crypto/tink/config:tink_config\",\n        \"//src/main/java/com/google/crypto/tink/mac:mac_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"VersionTest\",\n    size = \"small\",\n    srcs = [\"VersionTest.java\"],\n    deps = [\n        \"//src/main/java/com/google/crypto/tink:version\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"JsonKeysetWriterTest\",\n    size = \"small\",\n    srcs = [\"JsonKeysetWriterTest.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:aead\",\n        \"//src/main/java/com/google/crypto/tink:cleartext_keyset_handle\",\n        \"//src/main/java/com/google/crypto/tink:config\",\n        \"//src/main/java/com/google/crypto/tink:json_keyset_reader\",\n        \"//src/main/java/com/google/crypto/tink:json_keyset_writer\",\n        \"//src/main/java/com/google/crypto/tink:mac\",\n        \"//src/main/java/com/google/crypto/tink:registry_cluster\",\n        \"//src/main/java/com/google/crypto/tink/aead:aead_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/config:tink_config\",\n        \"//src/main/java/com/google/crypto/tink/mac:mac_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/subtle:random\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"EcdsaProtoTest\",\n    size = \"small\",\n    srcs = [\"EcdsaProtoTest.java\"],\n    deps = [\n        \"//proto:ecdsa_java_proto\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"CryptoFormatTest\",\n    size = \"small\",\n    srcs = [\"CryptoFormatTest.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:crypto_format\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"PrimitiveSetTest\",\n    size = \"small\",\n    srcs = [\"PrimitiveSetTest.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:crypto_format\",\n        \"//src/main/java/com/google/crypto/tink:mac\",\n        \"//src/main/java/com/google/crypto/tink:primitive_set\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"KeyTypeManagerTest\",\n    size = \"small\",\n    srcs = [\"KeyTypeManagerTest.java\"],\n    deps = [\n        \"//proto:aes_gcm_java_proto\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:key_type_manager\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"RegistryTest\",\n    size = \"small\",\n    srcs = [\"RegistryTest.java\"],\n    deps = [\n        \"//proto:aes_eax_java_proto\",\n        \"//proto:aes_gcm_java_proto\",\n        \"//proto:common_java_proto\",\n        \"//proto:ed25519_java_proto\",\n        \"//proto:hmac_java_proto\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:aead\",\n        \"//src/main/java/com/google/crypto/tink:catalogue\",\n        \"//src/main/java/com/google/crypto/tink:key_manager\",\n        \"//src/main/java/com/google/crypto/tink:key_template\",\n        \"//src/main/java/com/google/crypto/tink:key_type_manager\",\n        \"//src/main/java/com/google/crypto/tink:mac\",\n        \"//src/main/java/com/google/crypto/tink:primitive_set\",\n        \"//src/main/java/com/google/crypto/tink:primitive_wrapper\",\n        \"//src/main/java/com/google/crypto/tink:private_key_type_manager\",\n        \"//src/main/java/com/google/crypto/tink:public_key_sign\",\n        \"//src/main/java/com/google/crypto/tink:public_key_verify\",\n        \"//src/main/java/com/google/crypto/tink:registry_cluster\",\n        \"//src/main/java/com/google/crypto/tink/aead:aead_config\",\n        \"//src/main/java/com/google/crypto/tink/aead:aead_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/config:tink_config\",\n        \"//src/main/java/com/google/crypto/tink/mac:mac_config\",\n        \"//src/main/java/com/google/crypto/tink/mac:mac_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/signature:signature_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/subtle:aes_eax_jce\",\n        \"//src/main/java/com/google/crypto/tink/subtle:aes_gcm_jce\",\n        \"//src/main/java/com/google/crypto/tink/subtle:encrypt_then_authenticate\",\n        \"//src/main/java/com/google/crypto/tink/subtle:prf_mac\",\n        \"//src/main/java/com/google/crypto/tink/subtle:random\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"IntegrationTest\",\n    size = \"small\",\n    srcs = [\"IntegrationTest.java\"],\n    data = [\n        \"@tink_base//testdata:ecies_keysets\",\n    ],\n    deps = [\n        \"//src/main/java/com/google/crypto/tink:binary_keyset_reader\",\n        \"//src/main/java/com/google/crypto/tink:cleartext_keyset_handle\",\n        \"//src/main/java/com/google/crypto/tink:config\",\n        \"//src/main/java/com/google/crypto/tink:crypto_format\",\n        \"//src/main/java/com/google/crypto/tink:hybrid_decrypt\",\n        \"//src/main/java/com/google/crypto/tink:hybrid_encrypt\",\n        \"//src/main/java/com/google/crypto/tink/config:tink_config\",\n        \"//src/main/java/com/google/crypto/tink/subtle:random\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"UtilTest\",\n    size = \"small\",\n    srcs = [\"UtilTest.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:util\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"KeysetHandleTest\",\n    size = \"small\",\n    srcs = [\"KeysetHandleTest.java\"],\n    deps = [\n        \"//proto:aes_gcm_java_proto\",\n        \"//proto:ecdsa_java_proto\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:aead\",\n        \"//src/main/java/com/google/crypto/tink:binary_keyset_reader\",\n        \"//src/main/java/com/google/crypto/tink:binary_keyset_writer\",\n        \"//src/main/java/com/google/crypto/tink:config\",\n        \"//src/main/java/com/google/crypto/tink:key_manager\",\n        \"//src/main/java/com/google/crypto/tink:key_manager_impl\",\n        \"//src/main/java/com/google/crypto/tink:key_template\",\n        \"//src/main/java/com/google/crypto/tink:key_type_manager\",\n        \"//src/main/java/com/google/crypto/tink:keyset_reader\",\n        \"//src/main/java/com/google/crypto/tink:keyset_writer\",\n        \"//src/main/java/com/google/crypto/tink:primitive_set\",\n        \"//src/main/java/com/google/crypto/tink:primitive_wrapper\",\n        \"//src/main/java/com/google/crypto/tink:public_key_sign\",\n        \"//src/main/java/com/google/crypto/tink:public_key_verify\",\n        \"//src/main/java/com/google/crypto/tink:registry_cluster\",\n        \"//src/main/java/com/google/crypto/tink/aead:aead_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/aead:aes_gcm_key_manager\",\n        \"//src/main/java/com/google/crypto/tink/config:tink_config\",\n        \"//src/main/java/com/google/crypto/tink/mac:mac_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/signature:public_key_sign_factory\",\n        \"//src/main/java/com/google/crypto/tink/signature:public_key_verify_factory\",\n        \"//src/main/java/com/google/crypto/tink/signature:signature_config\",\n        \"//src/main/java/com/google/crypto/tink/signature:signature_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/subtle:random\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"TinkProtoTest\",\n    size = \"small\",\n    srcs = [\"TinkProtoTest.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"KeyManagerImplTest\",\n    size = \"small\",\n    srcs = [\"KeyManagerImplTest.java\"],\n    deps = [\n        \"//proto:aes_gcm_java_proto\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:aead\",\n        \"//src/main/java/com/google/crypto/tink:key_manager\",\n        \"//src/main/java/com/google/crypto/tink:key_manager_impl\",\n        \"//src/main/java/com/google/crypto/tink:key_type_manager\",\n        \"//src/main/java/com/google/crypto/tink/subtle:aes_gcm_jce\",\n        \"//src/main/java/com/google/crypto/tink/subtle:random\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n    ],\n)\n", "// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////////\n\npackage com.google.crypto.tink;\n\nimport static com.google.common.truth.Truth.assertThat;\nimport static com.google.crypto.tink.testing.TestUtil.assertExceptionContains;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\n\nimport com.google.crypto.tink.proto.KeyStatusType;\nimport com.google.crypto.tink.proto.Keyset.Key;\nimport com.google.crypto.tink.proto.OutputPrefixType;\nimport java.nio.charset.Charset;\nimport java.security.GeneralSecurityException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n/** Tests for PrimitiveSet. */\n@RunWith(JUnit4.class)\npublic class PrimitiveSetTest {\n  private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n\n  private static class DummyMac1 implements Mac {\n    public DummyMac1() {}\n\n    @Override\n    public byte[] computeMac(byte[] data) throws GeneralSecurityException {\n      return this.getClass().getSimpleName().getBytes(UTF_8);\n    }\n\n    @Override\n    public void verifyMac(byte[] mac, byte[] data) throws GeneralSecurityException {\n      return;\n    }\n  }\n\n  private static class DummyMac2 implements Mac {\n    public DummyMac2() {}\n\n    @Override\n    public byte[] computeMac(byte[] data) throws GeneralSecurityException {\n      return this.getClass().getSimpleName().getBytes(UTF_8);\n    }\n\n    @Override\n    public void verifyMac(byte[] mac, byte[] data) throws GeneralSecurityException {\n      return;\n    }\n  }\n\n  @Test\n  public void testBasicFunctionality() throws Exception {\n    PrimitiveSet<Mac> pset = PrimitiveSet.newPrimitiveSet(Mac.class);\n    Key key1 =\n        Key.newBuilder()\n            .setKeyId(1)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.TINK)\n            .build();\n    pset.addPrimitive(new DummyMac1(), key1);\n    Key key2 =\n        Key.newBuilder()\n            .setKeyId(2)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.RAW)\n            .build();\n    pset.setPrimary(pset.addPrimitive(new DummyMac2(), key2));\n    Key key3 =\n        Key.newBuilder()\n            .setKeyId(3)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.LEGACY)\n            .build();\n    pset.addPrimitive(new DummyMac1(), key3);\n\n    assertEquals(3, pset.getAll().size());\n\n    List<PrimitiveSet.Entry<Mac>> entries = pset.getPrimitive(key1);\n    assertEquals(1, entries.size());\n    PrimitiveSet.Entry<Mac> entry = entries.get(0);\n    assertEquals(\n        DummyMac1.class.getSimpleName(),\n        new String(entry.getPrimitive().computeMac(null), \"UTF-8\"));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertEquals(CryptoFormat.TINK_START_BYTE, entry.getIdentifier()[0]);\n    assertArrayEquals(CryptoFormat.getOutputPrefix(key1), entry.getIdentifier());\n    assertEquals(entry.getKeyId(), 1);\n\n    entries = pset.getPrimitive(key2);\n    assertEquals(1, entries.size());\n    entry = entries.get(0);\n    assertEquals(\n        DummyMac2.class.getSimpleName(),\n        new String(entry.getPrimitive().computeMac(null), \"UTF-8\"));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertEquals(0, entry.getIdentifier().length);\n    assertArrayEquals(CryptoFormat.getOutputPrefix(key2), entry.getIdentifier());\n    assertEquals(2, entry.getKeyId());\n\n    entries = pset.getPrimitive(key3);\n    assertEquals(1, entries.size());\n    entry = entries.get(0);\n    assertEquals(\n        DummyMac1.class.getSimpleName(),\n        new String(entry.getPrimitive().computeMac(null), \"UTF-8\"));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertEquals(CryptoFormat.LEGACY_START_BYTE, entry.getIdentifier()[0]);\n    assertArrayEquals(CryptoFormat.getOutputPrefix(key3), entry.getIdentifier());\n    assertEquals(entry.getKeyId(), 3);\n\n    entry = pset.getPrimary();\n    assertEquals(\n        DummyMac2.class.getSimpleName(),\n        new String(entry.getPrimitive().computeMac(null), \"UTF-8\"));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertArrayEquals(CryptoFormat.getOutputPrefix(key2), entry.getIdentifier());\n    assertEquals(2, entry.getKeyId());\n  }\n\n  @Test\n  public void testDuplicateKeys() throws Exception {\n    PrimitiveSet<Mac> pset = PrimitiveSet.newPrimitiveSet(Mac.class);\n    Key key1 =\n        Key.newBuilder()\n            .setKeyId(1)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.TINK)\n            .build();\n    pset.addPrimitive(new DummyMac1(), key1);\n\n    Key key2 =\n        Key.newBuilder()\n            .setKeyId(1)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.RAW)\n            .build();\n    pset.setPrimary(pset.addPrimitive(new DummyMac2(), key2));\n\n    Key key3 =\n        Key.newBuilder()\n            .setKeyId(2)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.LEGACY)\n            .build();\n    pset.addPrimitive(new DummyMac1(), key3);\n\n    Key key4 =\n        Key.newBuilder()\n            .setKeyId(2)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.LEGACY)\n            .build();\n    pset.addPrimitive(new DummyMac2(), key4);\n\n    Key key5 =\n        Key.newBuilder()\n            .setKeyId(3)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.RAW)\n            .build();\n    pset.addPrimitive(new DummyMac1(), key5);\n\n    Key key6 =\n        Key.newBuilder()\n            .setKeyId(3)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.RAW)\n            .build();\n    pset.addPrimitive(new DummyMac1(), key6);\n\n    assertEquals(3, pset.getAll().size()); // 3 instead of 6 because of duplicated key ids\n\n    // tink keys\n    List<PrimitiveSet.Entry<Mac>> entries = pset.getPrimitive(key1);\n    assertEquals(1, entries.size());\n    PrimitiveSet.Entry<Mac> entry = entries.get(0);\n    assertEquals(\n        DummyMac1.class.getSimpleName(), new String(entry.getPrimitive().computeMac(null), UTF_8));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertEquals(CryptoFormat.TINK_START_BYTE, entry.getIdentifier()[0]);\n    assertArrayEquals(CryptoFormat.getOutputPrefix(key1), entry.getIdentifier());\n    assertEquals(1, entry.getKeyId());\n\n    // raw keys\n    List<Integer> ids = new ArrayList<>(); // The order of the keys is an implementation detail.\n    entries = pset.getPrimitive(key2);\n    assertEquals(3, entries.size());\n    entry = entries.get(0);\n    assertEquals(\n        DummyMac2.class.getSimpleName(), new String(entry.getPrimitive().computeMac(null), UTF_8));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertEquals(0, entry.getIdentifier().length);\n    ids.add(entry.getKeyId());\n    entry = entries.get(1);\n    assertEquals(\n        DummyMac1.class.getSimpleName(), new String(entry.getPrimitive().computeMac(null), UTF_8));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertEquals(0, entry.getIdentifier().length);\n    ids.add(entry.getKeyId());\n    entry = entries.get(2);\n    assertEquals(\n        DummyMac1.class.getSimpleName(), new String(entry.getPrimitive().computeMac(null), UTF_8));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertEquals(0, entry.getIdentifier().length);\n    ids.add(entry.getKeyId());\n\n    assertThat(ids).containsExactly(1, 3, 3);\n    // legacy keys\n    entries = pset.getPrimitive(key3);\n    assertEquals(2, entries.size());\n    entry = entries.get(0);\n    assertEquals(\n        DummyMac1.class.getSimpleName(), new String(entry.getPrimitive().computeMac(null), UTF_8));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertArrayEquals(CryptoFormat.getOutputPrefix(key3), entry.getIdentifier());\n    assertEquals(2, entry.getKeyId());\n    entry = entries.get(1);\n    assertEquals(\n        DummyMac2.class.getSimpleName(), new String(entry.getPrimitive().computeMac(null), UTF_8));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertArrayEquals(CryptoFormat.getOutputPrefix(key4), entry.getIdentifier());\n    assertEquals(2, entry.getKeyId());\n\n    entry = pset.getPrimary();\n    assertEquals(\n        DummyMac2.class.getSimpleName(), new String(entry.getPrimitive().computeMac(null), UTF_8));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertEquals(0, entry.getIdentifier().length);\n    assertArrayEquals(CryptoFormat.getOutputPrefix(key2), entry.getIdentifier());\n    assertEquals(1, entry.getKeyId());\n  }\n\n  @Test\n  public void testAddPrimive_withUnknownPrefixType_shouldFail() throws Exception {\n    PrimitiveSet<Mac> pset = PrimitiveSet.newPrimitiveSet(Mac.class);\n    Key key1 = Key.newBuilder().setKeyId(1).setStatus(KeyStatusType.ENABLED).build();\n    try {\n      pset.addPrimitive(new DummyMac1(), key1);\n      fail(\"Expected GeneralSecurityException.\");\n    } catch (GeneralSecurityException e) {\n      assertExceptionContains(e, \"unknown output prefix type\");\n    }\n  }\n\n  @Test\n  public void testAddPrimive_WithDisabledKey_shouldFail() throws Exception {\n    PrimitiveSet<Mac> pset = PrimitiveSet.newPrimitiveSet(Mac.class);\n    Key key1 =\n        Key.newBuilder()\n            .setKeyId(1)\n            .setStatus(KeyStatusType.DISABLED)\n            .setOutputPrefixType(OutputPrefixType.TINK)\n            .build();\n    try {\n      pset.addPrimitive(new DummyMac1(), key1);\n      fail(\"Expected GeneralSecurityException.\");\n    } catch (GeneralSecurityException e) {\n      assertExceptionContains(e, \"only ENABLED key is allowed\");\n    }\n  }\n}\n"], "fixing_code": ["load(\"@build_bazel_rules_android//android:rules.bzl\", \"android_library\")\nload(\"@tink_base//:tink_version.bzl\", \"TINK_VERSION_LABEL\")\nload(\"@tink_base//tools:common.bzl\", \"template_rule\")\n\nlicenses([\"notice\"])\n\npackage(default_visibility = [\"//visibility:public\"])\n\n# Primitives\n\njava_library(\n    name = \"aead\",\n    srcs = [\"Aead.java\"],\n)\n\njava_library(\n    name = \"streaming_aead\",\n    srcs = [\"StreamingAead.java\"],\n)\n\njava_library(\n    name = \"deterministic_aead\",\n    srcs = [\"DeterministicAead.java\"],\n)\n\njava_library(\n    name = \"hybrid_decrypt\",\n    srcs = [\"HybridDecrypt.java\"],\n)\n\njava_library(\n    name = \"hybrid_encrypt\",\n    srcs = [\"HybridEncrypt.java\"],\n)\n\njava_library(\n    name = \"mac\",\n    srcs = [\"Mac.java\"],\n)\n\njava_library(\n    name = \"key_wrap\",\n    srcs = [\"KeyWrap.java\"],\n)\n\njava_library(\n    name = \"public_key_sign\",\n    srcs = [\"PublicKeySign.java\"],\n)\n\njava_library(\n    name = \"public_key_verify\",\n    srcs = [\"PublicKeyVerify.java\"],\n)\n\n# Other public interfaces\n\njava_library(\n    name = \"crypto_format\",\n    srcs = [\"CryptoFormat.java\"],\n    deps = [\"//proto:tink_java_proto\"],\n)\n\nandroid_library(\n    name = \"crypto_format-android\",\n    srcs = [\"CryptoFormat.java\"],\n    deps = [\"//proto:tink_java_proto_lite\"],\n)\n\njava_library(\n    name = \"primitive_wrapper\",\n    srcs = [\"PrimitiveWrapper.java\"],\n    deps = [\":primitive_set\"],\n)\n\nandroid_library(\n    name = \"primitive_wrapper-android\",\n    srcs = [\"PrimitiveWrapper.java\"],\n    deps = [\":primitive_set-android\"],\n)\n\njava_library(\n    name = \"kms_client\",\n    srcs = [\"KmsClient.java\"],\n    deps = [\":aead\"],\n)\n\njava_library(\n    name = \"kms_clients\",\n    srcs = [\"KmsClients.java\"],\n    deps = [\":kms_client\"],\n)\n\njava_library(\n    name = \"keyset_writer\",\n    srcs = [\"KeysetWriter.java\"],\n    deps = [\"//proto:tink_java_proto\"],\n)\n\nandroid_library(\n    name = \"keyset_writer-android\",\n    srcs = [\"KeysetWriter.java\"],\n    deps = [\"//proto:tink_java_proto_lite\"],\n)\n\njava_library(\n    name = \"binary_keyset_writer\",\n    srcs = [\"BinaryKeysetWriter.java\"],\n    deps = [\n        \":keyset_writer\",\n        \"//proto:tink_java_proto\",\n    ],\n)\n\nandroid_library(\n    name = \"binary_keyset_writer-android\",\n    srcs = [\"BinaryKeysetWriter.java\"],\n    deps = [\n        \":keyset_writer-android\",\n        \"//proto:tink_java_proto_lite\",\n    ],\n)\n\njava_library(\n    name = \"json_keyset_writer\",\n    srcs = [\"JsonKeysetWriter.java\"],\n    deps = [\n        \":keyset_writer\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink/subtle:base64\",\n        \"@maven//:org_json_json\",\n    ],\n)\n\nandroid_library(\n    name = \"json_keyset_writer-android\",\n    srcs = [\"JsonKeysetWriter.java\"],\n    deps = [\n        \":keyset_writer\",\n        \":keyset_writer-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"//src/main/java/com/google/crypto/tink/subtle:base64\",\n        \"@maven//:org_json_json\",\n    ],\n)\n\njava_library(\n    name = \"keyset_reader\",\n    srcs = [\"KeysetReader.java\"],\n    deps = [\"//proto:tink_java_proto\"],\n)\n\nandroid_library(\n    name = \"keyset_reader-android\",\n    srcs = [\"KeysetReader.java\"],\n    deps = [\"//proto:tink_java_proto_lite\"],\n)\n\njava_library(\n    name = \"binary_keyset_reader\",\n    srcs = [\"BinaryKeysetReader.java\"],\n    deps = [\n        \":keyset_reader\",\n        \"//proto:tink_java_proto\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"binary_keyset_reader-android\",\n    srcs = [\"BinaryKeysetReader.java\"],\n    deps = [\n        \":keyset_reader-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"json_keyset_reader\",\n    srcs = [\"JsonKeysetReader.java\"],\n    deps = [\n        \":keyset_reader\",\n        \":util\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink/subtle:base64\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:org_json_json\",\n    ],\n)\n\nandroid_library(\n    name = \"json_keyset_reader-android\",\n    srcs = [\"JsonKeysetReader.java\"],\n    deps = [\n        \":keyset_reader-android\",\n        \":util-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"//src/main/java/com/google/crypto/tink/subtle:base64\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:org_json_json\",\n    ],\n)\n\njava_library(\n    name = \"private_key_manager\",\n    srcs = [\"PrivateKeyManager.java\"],\n    deps = [\n        \":key_manager\",\n        \"//proto:tink_java_proto\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"private_key_manager-android\",\n    srcs = [\"PrivateKeyManager.java\"],\n    deps = [\n        \":key_manager-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"privileged_registry\",\n    srcs = [\"PrivilegedRegistry.java\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":registry_cluster\",\n        \"//proto:tink_java_proto\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"privileged_registry-android\",\n    srcs = [\"PrivilegedRegistry.java\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":registry_cluster-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"key_type_manager\",\n    srcs = [\"KeyTypeManager.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink/annotations:alpha\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"key_type_manager-android\",\n    srcs = [\"KeyTypeManager.java\"],\n    deps = [\n        \"//proto:tink_java_proto_lite\",\n        \"//src/main/java/com/google/crypto/tink/annotations:alpha\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"key_template\",\n    srcs = [\"KeyTemplate.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_errorprone_error_prone_annotations\",\n    ],\n)\n\nandroid_library(\n    name = \"key_template-android\",\n    srcs = [\"KeyTemplate.java\"],\n    deps = [\n        \"//proto:tink_java_proto_lite\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_errorprone_error_prone_annotations\",\n    ],\n)\n\njava_library(\n    name = \"config\",\n    srcs = [\"Config.java\"],\n    deps = [\n        \":catalogue\",\n        \":key_manager\",\n        \":registry_cluster\",\n        \"//proto:config_java_proto\",\n    ],\n)\n\nandroid_library(\n    name = \"config-android\",\n    srcs = [\"Config.java\"],\n    deps = [\n        \":catalogue-android\",\n        \":key_manager-android\",\n        \":registry_cluster-android\",\n        \"//proto:config_java_proto_lite\",\n    ],\n)\n\njava_library(\n    name = \"private_key_manager_impl\",\n    srcs = [\"PrivateKeyManagerImpl.java\"],\n    deps = [\n        \":key_manager_impl\",\n        \":key_type_manager\",\n        \":private_key_manager\",\n        \":private_key_type_manager\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink/annotations:alpha\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"private_key_manager_impl-android\",\n    srcs = [\"PrivateKeyManagerImpl.java\"],\n    deps = [\n        \":key_manager_impl-android\",\n        \":key_type_manager-android\",\n        \":private_key_manager-android\",\n        \":private_key_type_manager-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"//src/main/java/com/google/crypto/tink/annotations:alpha\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"no_secret_keyset_handle\",\n    srcs = [\"NoSecretKeysetHandle.java\"],\n    deps = [\n        \":keyset_reader\",\n        \":registry_cluster\",\n        \"//proto:tink_java_proto\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"no_secret_keyset_handle-android\",\n    srcs = [\"NoSecretKeysetHandle.java\"],\n    deps = [\n        \":keyset_reader-android\",\n        \":registry_cluster-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"cleartext_keyset_handle\",\n    srcs = [\"CleartextKeysetHandle.java\"],\n    deps = [\n        \":keyset_reader\",\n        \":keyset_writer\",\n        \":registry_cluster\",\n        \"//proto:tink_java_proto\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"cleartext_keyset_handle-android\",\n    srcs = [\"CleartextKeysetHandle.java\"],\n    deps = [\n        \":keyset_reader-android\",\n        \":keyset_writer-android\",\n        \":registry_cluster-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"private_key_type_manager\",\n    srcs = [\"PrivateKeyTypeManager.java\"],\n    deps = [\n        \":key_type_manager\",\n        \"//src/main/java/com/google/crypto/tink/annotations:alpha\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"private_key_type_manager-android\",\n    srcs = [\"PrivateKeyTypeManager.java\"],\n    deps = [\n        \":key_type_manager-android\",\n        \"//src/main/java/com/google/crypto/tink/annotations:alpha\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"util\",\n    srcs = [\"Util.java\"],\n    deps = [\"//proto:tink_java_proto\"],\n)\n\nandroid_library(\n    name = \"util-android\",\n    srcs = [\"Util.java\"],\n    deps = [\"//proto:tink_java_proto_lite\"],\n)\n\njava_library(\n    name = \"catalogue\",\n    srcs = [\"Catalogue.java\"],\n    deps = [\n        \":key_manager\",\n        \":primitive_wrapper\",\n    ],\n)\n\nandroid_library(\n    name = \"catalogue-android\",\n    srcs = [\"Catalogue.java\"],\n    deps = [\n        \":key_manager-android\",\n        \":primitive_wrapper-android\",\n    ],\n)\n\njava_library(\n    name = \"key_manager\",\n    srcs = [\"KeyManager.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"key_manager-android\",\n    srcs = [\"KeyManager.java\"],\n    deps = [\n        \"//proto:tink_java_proto_lite\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"key_manager_impl\",\n    srcs = [\"KeyManagerImpl.java\"],\n    deps = [\n        \":key_manager\",\n        \":key_type_manager\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink/annotations:alpha\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\nandroid_library(\n    name = \"key_manager_impl-android\",\n    srcs = [\"KeyManagerImpl.java\"],\n    deps = [\n        \":key_manager-android\",\n        \":key_type_manager-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"//src/main/java/com/google/crypto/tink/annotations:alpha\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n    ],\n)\n\njava_library(\n    name = \"primitive_set\",\n    srcs = [\"PrimitiveSet.java\"],\n    deps = [\n        \":crypto_format\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink/subtle:hex\",\n    ],\n)\n\nandroid_library(\n    name = \"primitive_set-android\",\n    srcs = [\"PrimitiveSet.java\"],\n    deps = [\n        \":crypto_format-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"//src/main/java/com/google/crypto/tink/subtle:hex\",\n    ],\n)\n\njava_library(\n    name = \"registry_cluster\",\n    srcs = [\n        \"KeysetHandle.java\",\n        \"KeysetManager.java\",\n        \"Registry.java\",\n    ],\n    deps = [\n        \":aead\",\n        \":catalogue\",\n        \":key_manager\",\n        \":key_manager_impl\",\n        \":key_template\",\n        \":key_type_manager\",\n        \":keyset_reader\",\n        \":keyset_writer\",\n        \":primitive_set\",\n        \":primitive_wrapper\",\n        \":private_key_manager\",\n        \":private_key_manager_impl\",\n        \":private_key_type_manager\",\n        \":util\",\n        \"//proto:tink_java_proto\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_code_findbugs_jsr305\",\n    ],\n)\n\nandroid_library(\n    name = \"registry_cluster-android\",\n    srcs = [\n        \"KeysetHandle.java\",\n        \"KeysetManager.java\",\n        \"Registry.java\",\n    ],\n    deps = [\n        \":aead\",\n        \":catalogue-android\",\n        \":key_manager-android\",\n        \":key_manager_impl-android\",\n        \":key_template-android\",\n        \":key_type_manager-android\",\n        \":keyset_reader-android\",\n        \":keyset_writer-android\",\n        \":primitive_set-android\",\n        \":primitive_wrapper-android\",\n        \":private_key_manager-android\",\n        \":private_key_manager_impl-android\",\n        \":private_key_type_manager-android\",\n        \":util-android\",\n        \"//proto:tink_java_proto_lite\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_code_findbugs_jsr305\",\n    ],\n)\n\ntemplate_rule(\n    name = \"version_java\",\n    src = \"Version.java.templ\",\n    out = \"Version.java\",\n    substitutions = {\n        \"TINK_VERSION_LABEL\": \"%s\" % TINK_VERSION_LABEL,\n    },\n)\n\njava_library(\n    name = \"version\",\n    srcs = [\":version_java\"],\n)\n", "// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////////\n\npackage com.google.crypto.tink;\n\nimport com.google.crypto.tink.proto.KeyStatusType;\nimport com.google.crypto.tink.proto.Keyset;\nimport com.google.crypto.tink.proto.OutputPrefixType;\nimport com.google.crypto.tink.subtle.Hex;\nimport java.security.GeneralSecurityException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * A container class for a set of primitives -- implementations of cryptographic primitives offered\n * by Tink.\n *\n * <p>It provides also additional properties for the primitives it holds. In particular, one of the\n * primitives in the set can be distinguished as \"the primary\" one.\n *\n * <p>PrimitiveSet is an auxiliary class used for supporting key rotation: primitives in a set\n * correspond to keys in a keyset. Users will usually work with primitive instances, which\n * essentially wrap primitive sets. For example an instance of an Aead-primitive for a given keyset\n * holds a set of Aead-primitives corresponding to the keys in the keyset, and uses the set members\n * to do the actual crypto operations: to encrypt data the primary Aead-primitive from the set is\n * used, and upon decryption the ciphertext's prefix determines the id of the primitive from the\n * set.\n *\n * <p>PrimitiveSet is a public class to allow its use in implementations of custom primitives.\n *\n * @since 1.0.0\n */\npublic final class PrimitiveSet<P> {\n  /**\n   * A single entry in the set. In addition to the actual primitive it holds also some extra\n   * information about the primitive.\n   */\n  public static final class Entry<P> {\n    // The actual primitive.\n    private final P primitive;\n    // Identifies the primitive within the set.\n    // It is the ciphertext prefix of the corresponding key.\n    private final byte[] identifier;\n    // The status of the key represented by the primitive.\n    private final KeyStatusType status;\n    // The output prefix type of the key represented by the primitive.\n    private final OutputPrefixType outputPrefixType;\n    // The id of the key.\n    private final int keyId;\n\n    Entry(\n        P primitive,\n        final byte[] identifier,\n        KeyStatusType status,\n        OutputPrefixType outputPrefixType,\n        int keyId) {\n      this.primitive = primitive;\n      this.identifier = Arrays.copyOf(identifier, identifier.length);\n      this.status = status;\n      this.outputPrefixType = outputPrefixType;\n      this.keyId = keyId;\n    }\n\n    public P getPrimitive() {\n      return this.primitive;\n    }\n\n    public KeyStatusType getStatus() {\n      return status;\n    }\n\n    public OutputPrefixType getOutputPrefixType() {\n      return outputPrefixType;\n    }\n\n    public final byte[] getIdentifier() {\n      if (identifier == null) {\n        return null;\n      } else {\n        return Arrays.copyOf(identifier, identifier.length);\n      }\n    }\n\n    public int getKeyId() {\n      return keyId;\n    }\n  }\n\n  /** @return the entry with the primary primitive. */\n  public Entry<P> getPrimary() {\n    return primary;\n  }\n\n  /** @return all primitives using RAW prefix. */\n  public List<Entry<P>> getRawPrimitives() {\n    return getPrimitive(CryptoFormat.RAW_PREFIX);\n  }\n\n  /** @return the entries with primitive identifed by {@code identifier}. */\n  public List<Entry<P>> getPrimitive(final byte[] identifier) {\n    List<Entry<P>> found = primitives.get(new Prefix(identifier));\n    return found != null ? found : Collections.<Entry<P>>emptyList();\n  }\n\n  /** Returns the entries with primitives identified by the ciphertext prefix of {@code key}. */\n  protected List<Entry<P>> getPrimitive(Keyset.Key key) throws GeneralSecurityException {\n    return getPrimitive(CryptoFormat.getOutputPrefix(key));\n  }\n\n  /** @return all primitives */\n  public Collection<List<Entry<P>>> getAll() {\n    return primitives.values();\n  }\n\n  /**\n   * The primitives are stored in a hash map of (ciphertext prefix, list of primivies sharing the\n   * prefix). This allows quickly retrieving the list of primitives sharing some particular prefix.\n   * Because all RAW keys are using an empty prefix, this also quickly allows retrieving them.\n   */\n  private final ConcurrentMap<Prefix, List<Entry<P>>> primitives =\n      new ConcurrentHashMap<Prefix, List<Entry<P>>>();\n\n  private Entry<P> primary;\n  private final Class<P> primitiveClass;\n\n  private PrimitiveSet(Class<P> primitiveClass) {\n    this.primitiveClass = primitiveClass;\n  }\n\n  public static <P> PrimitiveSet<P> newPrimitiveSet(Class<P> primitiveClass) {\n    return new PrimitiveSet<P>(primitiveClass);\n  }\n\n  /** Sets given Entry {@code primary} as the primary one. */\n  public void setPrimary(final Entry<P> primary) {\n    if (primary == null) {\n      throw new IllegalArgumentException(\"the primary entry must be non-null\");\n    }\n    if (primary.getStatus() != KeyStatusType.ENABLED) {\n      throw new IllegalArgumentException(\"the primary entry has to be ENABLED\");\n    }\n    List<Entry<P>> entries = getPrimitive(primary.getIdentifier());\n    if (entries.isEmpty()) {\n      throw new IllegalArgumentException(\n          \"the primary entry cannot be set to an entry which is not held by this primitive set\");\n    }\n    this.primary = primary;\n  }\n\n  /**\n   * Creates an entry in the primitive table.\n   *\n   * @return the added entry\n   */\n  public Entry<P> addPrimitive(final P primitive, Keyset.Key key)\n      throws GeneralSecurityException {\n    if (key.getStatus() != KeyStatusType.ENABLED) {\n      throw new GeneralSecurityException(\"only ENABLED key is allowed\");\n    }\n    Entry<P> entry =\n        new Entry<P>(\n            primitive,\n            CryptoFormat.getOutputPrefix(key),\n            key.getStatus(),\n            key.getOutputPrefixType(),\n            key.getKeyId());\n    List<Entry<P>> list = new ArrayList<Entry<P>>();\n    list.add(entry);\n    // Cannot use [] as keys in hash map, convert to Prefix wrapper class.\n    Prefix identifier = new Prefix(entry.getIdentifier());\n    List<Entry<P>> existing = primitives.put(identifier, Collections.unmodifiableList(list));\n    if (existing != null) {\n      List<Entry<P>> newList = new ArrayList<Entry<P>>();\n      newList.addAll(existing);\n      newList.add(entry);\n      primitives.put(identifier, Collections.unmodifiableList(newList));\n    }\n    return entry;\n  }\n\n  public Class<P> getPrimitiveClass() {\n    return primitiveClass;\n  }\n\n  private static class Prefix implements Comparable<Prefix> {\n    private final byte[] prefix;\n\n    private Prefix(byte[] prefix) {\n      this.prefix = Arrays.copyOf(prefix, prefix.length);\n    }\n\n    @Override\n    public int hashCode() {\n      return Arrays.hashCode(prefix);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      if (!(o instanceof Prefix)) {\n        return false;\n      }\n      Prefix other = (Prefix) o;\n      return Arrays.equals(prefix, other.prefix);\n    }\n\n    @Override\n    public int compareTo(Prefix o) {\n      if (prefix.length != o.prefix.length) {\n        return prefix.length - o.prefix.length;\n      }\n      for (int i = 0; i < prefix.length; i++) {\n        if (prefix[i] != o.prefix[i]) {\n          return prefix[i] - o.prefix[i];\n        }\n      }\n      return 0;\n    }\n\n    @Override\n    public String toString() {\n      return Hex.encode(prefix);\n    }\n  }\n\n}\n", "licenses([\"notice\"])\n\njava_test(\n    name = \"NoSecretKeysetHandleTest\",\n    size = \"small\",\n    srcs = [\"NoSecretKeysetHandleTest.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:binary_keyset_reader\",\n        \"//src/main/java/com/google/crypto/tink:no_secret_keyset_handle\",\n        \"//src/main/java/com/google/crypto/tink:registry_cluster\",\n        \"//src/main/java/com/google/crypto/tink/config:tink_config\",\n        \"//src/main/java/com/google/crypto/tink/mac:mac_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"CleartextKeysetHandleTest\",\n    size = \"small\",\n    srcs = [\"CleartextKeysetHandleTest.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:binary_keyset_reader\",\n        \"//src/main/java/com/google/crypto/tink:binary_keyset_writer\",\n        \"//src/main/java/com/google/crypto/tink:cleartext_keyset_handle\",\n        \"//src/main/java/com/google/crypto/tink:keyset_reader\",\n        \"//src/main/java/com/google/crypto/tink:keyset_writer\",\n        \"//src/main/java/com/google/crypto/tink:mac\",\n        \"//src/main/java/com/google/crypto/tink:registry_cluster\",\n        \"//src/main/java/com/google/crypto/tink/config:tink_config\",\n        \"//src/main/java/com/google/crypto/tink/mac:mac_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"ConfigTest\",\n    size = \"small\",\n    srcs = [\"ConfigTest.java\"],\n    deps = [\n        \"//proto:config_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:config\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"PrivateKeyManagerImplTest\",\n    size = \"small\",\n    srcs = [\"PrivateKeyManagerImplTest.java\"],\n    deps = [\n        \"//proto:ed25519_java_proto\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:key_type_manager\",\n        \"//src/main/java/com/google/crypto/tink:private_key_manager\",\n        \"//src/main/java/com/google/crypto/tink:private_key_manager_impl\",\n        \"//src/main/java/com/google/crypto/tink:private_key_type_manager\",\n        \"//src/main/java/com/google/crypto/tink/subtle:random\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"JsonKeysetReaderTest\",\n    size = \"small\",\n    srcs = [\"JsonKeysetReaderTest.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:aead\",\n        \"//src/main/java/com/google/crypto/tink:cleartext_keyset_handle\",\n        \"//src/main/java/com/google/crypto/tink:config\",\n        \"//src/main/java/com/google/crypto/tink:json_keyset_reader\",\n        \"//src/main/java/com/google/crypto/tink:json_keyset_writer\",\n        \"//src/main/java/com/google/crypto/tink:mac\",\n        \"//src/main/java/com/google/crypto/tink:registry_cluster\",\n        \"//src/main/java/com/google/crypto/tink/aead:aead_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/config:tink_config\",\n        \"//src/main/java/com/google/crypto/tink/mac:mac_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/subtle:random\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n        \"@maven//:org_json_json\",\n    ],\n)\n\njava_test(\n    name = \"KeysetManagerTest\",\n    size = \"small\",\n    srcs = [\"KeysetManagerTest.java\"],\n    deps = [\n        \"//proto:aes_gcm_java_proto\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:key_template\",\n        \"//src/main/java/com/google/crypto/tink:registry_cluster\",\n        \"//src/main/java/com/google/crypto/tink/aead:aes_gcm_key_manager\",\n        \"//src/main/java/com/google/crypto/tink/config:tink_config\",\n        \"//src/main/java/com/google/crypto/tink/mac:mac_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"VersionTest\",\n    size = \"small\",\n    srcs = [\"VersionTest.java\"],\n    deps = [\n        \"//src/main/java/com/google/crypto/tink:version\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"JsonKeysetWriterTest\",\n    size = \"small\",\n    srcs = [\"JsonKeysetWriterTest.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:aead\",\n        \"//src/main/java/com/google/crypto/tink:cleartext_keyset_handle\",\n        \"//src/main/java/com/google/crypto/tink:config\",\n        \"//src/main/java/com/google/crypto/tink:json_keyset_reader\",\n        \"//src/main/java/com/google/crypto/tink:json_keyset_writer\",\n        \"//src/main/java/com/google/crypto/tink:mac\",\n        \"//src/main/java/com/google/crypto/tink:registry_cluster\",\n        \"//src/main/java/com/google/crypto/tink/aead:aead_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/config:tink_config\",\n        \"//src/main/java/com/google/crypto/tink/mac:mac_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/subtle:random\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"EcdsaProtoTest\",\n    size = \"small\",\n    srcs = [\"EcdsaProtoTest.java\"],\n    deps = [\n        \"//proto:ecdsa_java_proto\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"CryptoFormatTest\",\n    size = \"small\",\n    srcs = [\"CryptoFormatTest.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:crypto_format\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"PrimitiveSetTest\",\n    size = \"small\",\n    srcs = [\"PrimitiveSetTest.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:crypto_format\",\n        \"//src/main/java/com/google/crypto/tink:mac\",\n        \"//src/main/java/com/google/crypto/tink:primitive_set\",\n        \"//src/main/java/com/google/crypto/tink/subtle:hex\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"KeyTypeManagerTest\",\n    size = \"small\",\n    srcs = [\"KeyTypeManagerTest.java\"],\n    deps = [\n        \"//proto:aes_gcm_java_proto\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:key_type_manager\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"RegistryTest\",\n    size = \"small\",\n    srcs = [\"RegistryTest.java\"],\n    deps = [\n        \"//proto:aes_eax_java_proto\",\n        \"//proto:aes_gcm_java_proto\",\n        \"//proto:common_java_proto\",\n        \"//proto:ed25519_java_proto\",\n        \"//proto:hmac_java_proto\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:aead\",\n        \"//src/main/java/com/google/crypto/tink:catalogue\",\n        \"//src/main/java/com/google/crypto/tink:key_manager\",\n        \"//src/main/java/com/google/crypto/tink:key_template\",\n        \"//src/main/java/com/google/crypto/tink:key_type_manager\",\n        \"//src/main/java/com/google/crypto/tink:mac\",\n        \"//src/main/java/com/google/crypto/tink:primitive_set\",\n        \"//src/main/java/com/google/crypto/tink:primitive_wrapper\",\n        \"//src/main/java/com/google/crypto/tink:private_key_type_manager\",\n        \"//src/main/java/com/google/crypto/tink:public_key_sign\",\n        \"//src/main/java/com/google/crypto/tink:public_key_verify\",\n        \"//src/main/java/com/google/crypto/tink:registry_cluster\",\n        \"//src/main/java/com/google/crypto/tink/aead:aead_config\",\n        \"//src/main/java/com/google/crypto/tink/aead:aead_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/config:tink_config\",\n        \"//src/main/java/com/google/crypto/tink/mac:mac_config\",\n        \"//src/main/java/com/google/crypto/tink/mac:mac_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/signature:signature_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/subtle:aes_eax_jce\",\n        \"//src/main/java/com/google/crypto/tink/subtle:aes_gcm_jce\",\n        \"//src/main/java/com/google/crypto/tink/subtle:encrypt_then_authenticate\",\n        \"//src/main/java/com/google/crypto/tink/subtle:prf_mac\",\n        \"//src/main/java/com/google/crypto/tink/subtle:random\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"IntegrationTest\",\n    size = \"small\",\n    srcs = [\"IntegrationTest.java\"],\n    data = [\n        \"@tink_base//testdata:ecies_keysets\",\n    ],\n    deps = [\n        \"//src/main/java/com/google/crypto/tink:binary_keyset_reader\",\n        \"//src/main/java/com/google/crypto/tink:cleartext_keyset_handle\",\n        \"//src/main/java/com/google/crypto/tink:config\",\n        \"//src/main/java/com/google/crypto/tink:crypto_format\",\n        \"//src/main/java/com/google/crypto/tink:hybrid_decrypt\",\n        \"//src/main/java/com/google/crypto/tink:hybrid_encrypt\",\n        \"//src/main/java/com/google/crypto/tink/config:tink_config\",\n        \"//src/main/java/com/google/crypto/tink/subtle:random\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"UtilTest\",\n    size = \"small\",\n    srcs = [\"UtilTest.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:util\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"KeysetHandleTest\",\n    size = \"small\",\n    srcs = [\"KeysetHandleTest.java\"],\n    deps = [\n        \"//proto:aes_gcm_java_proto\",\n        \"//proto:ecdsa_java_proto\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:aead\",\n        \"//src/main/java/com/google/crypto/tink:binary_keyset_reader\",\n        \"//src/main/java/com/google/crypto/tink:binary_keyset_writer\",\n        \"//src/main/java/com/google/crypto/tink:config\",\n        \"//src/main/java/com/google/crypto/tink:key_manager\",\n        \"//src/main/java/com/google/crypto/tink:key_manager_impl\",\n        \"//src/main/java/com/google/crypto/tink:key_template\",\n        \"//src/main/java/com/google/crypto/tink:key_type_manager\",\n        \"//src/main/java/com/google/crypto/tink:keyset_reader\",\n        \"//src/main/java/com/google/crypto/tink:keyset_writer\",\n        \"//src/main/java/com/google/crypto/tink:primitive_set\",\n        \"//src/main/java/com/google/crypto/tink:primitive_wrapper\",\n        \"//src/main/java/com/google/crypto/tink:public_key_sign\",\n        \"//src/main/java/com/google/crypto/tink:public_key_verify\",\n        \"//src/main/java/com/google/crypto/tink:registry_cluster\",\n        \"//src/main/java/com/google/crypto/tink/aead:aead_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/aead:aes_gcm_key_manager\",\n        \"//src/main/java/com/google/crypto/tink/config:tink_config\",\n        \"//src/main/java/com/google/crypto/tink/mac:mac_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/signature:public_key_sign_factory\",\n        \"//src/main/java/com/google/crypto/tink/signature:public_key_verify_factory\",\n        \"//src/main/java/com/google/crypto/tink/signature:signature_config\",\n        \"//src/main/java/com/google/crypto/tink/signature:signature_key_templates\",\n        \"//src/main/java/com/google/crypto/tink/subtle:random\",\n        \"//src/main/java/com/google/crypto/tink/testing:test_util\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"TinkProtoTest\",\n    size = \"small\",\n    srcs = [\"TinkProtoTest.java\"],\n    deps = [\n        \"//proto:tink_java_proto\",\n        \"@maven//:junit_junit\",\n    ],\n)\n\njava_test(\n    name = \"KeyManagerImplTest\",\n    size = \"small\",\n    srcs = [\"KeyManagerImplTest.java\"],\n    deps = [\n        \"//proto:aes_gcm_java_proto\",\n        \"//proto:tink_java_proto\",\n        \"//src/main/java/com/google/crypto/tink:aead\",\n        \"//src/main/java/com/google/crypto/tink:key_manager\",\n        \"//src/main/java/com/google/crypto/tink:key_manager_impl\",\n        \"//src/main/java/com/google/crypto/tink:key_type_manager\",\n        \"//src/main/java/com/google/crypto/tink/subtle:aes_gcm_jce\",\n        \"//src/main/java/com/google/crypto/tink/subtle:random\",\n        \"@com_google_protobuf//:protobuf_javalite\",\n        \"@maven//:com_google_truth_truth\",\n        \"@maven//:junit_junit\",\n    ],\n)\n", "// Copyright 2017 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////////\n\npackage com.google.crypto.tink;\n\nimport static com.google.common.truth.Truth.assertThat;\nimport static com.google.crypto.tink.testing.TestUtil.assertExceptionContains;\nimport static java.nio.charset.StandardCharsets.UTF_8;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\n\nimport com.google.crypto.tink.proto.KeyStatusType;\nimport com.google.crypto.tink.proto.Keyset.Key;\nimport com.google.crypto.tink.proto.OutputPrefixType;\nimport com.google.crypto.tink.subtle.Hex;\nimport java.security.GeneralSecurityException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n/** Tests for PrimitiveSet. */\n@RunWith(JUnit4.class)\npublic class PrimitiveSetTest {\n\n  private static class DummyMac1 implements Mac {\n    public DummyMac1() {}\n\n    @Override\n    public byte[] computeMac(byte[] data) throws GeneralSecurityException {\n      return this.getClass().getSimpleName().getBytes(UTF_8);\n    }\n\n    @Override\n    public void verifyMac(byte[] mac, byte[] data) throws GeneralSecurityException {\n      return;\n    }\n  }\n\n  private static class DummyMac2 implements Mac {\n    public DummyMac2() {}\n\n    @Override\n    public byte[] computeMac(byte[] data) throws GeneralSecurityException {\n      return this.getClass().getSimpleName().getBytes(UTF_8);\n    }\n\n    @Override\n    public void verifyMac(byte[] mac, byte[] data) throws GeneralSecurityException {\n      return;\n    }\n  }\n\n  @Test\n  public void testBasicFunctionality() throws Exception {\n    PrimitiveSet<Mac> pset = PrimitiveSet.newPrimitiveSet(Mac.class);\n    Key key1 =\n        Key.newBuilder()\n            .setKeyId(1)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.TINK)\n            .build();\n    pset.addPrimitive(new DummyMac1(), key1);\n    Key key2 =\n        Key.newBuilder()\n            .setKeyId(2)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.RAW)\n            .build();\n    pset.setPrimary(pset.addPrimitive(new DummyMac2(), key2));\n    Key key3 =\n        Key.newBuilder()\n            .setKeyId(3)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.LEGACY)\n            .build();\n    pset.addPrimitive(new DummyMac1(), key3);\n\n    assertThat(pset.getAll()).hasSize(3);\n\n    List<PrimitiveSet.Entry<Mac>> entries = pset.getPrimitive(key1);\n    assertThat(entries).hasSize(1);\n    PrimitiveSet.Entry<Mac> entry = entries.get(0);\n    assertEquals(\n        DummyMac1.class.getSimpleName(), new String(entry.getPrimitive().computeMac(null), UTF_8));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertEquals(CryptoFormat.TINK_START_BYTE, entry.getIdentifier()[0]);\n    assertArrayEquals(CryptoFormat.getOutputPrefix(key1), entry.getIdentifier());\n    assertEquals(entry.getKeyId(), 1);\n\n    entries = pset.getPrimitive(key2);\n    assertThat(entries).hasSize(1);\n    entry = entries.get(0);\n    assertEquals(\n        DummyMac2.class.getSimpleName(),\n        new String(entry.getPrimitive().computeMac(null), UTF_8));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertThat(entry.getIdentifier()).isEmpty();\n    assertArrayEquals(CryptoFormat.getOutputPrefix(key2), entry.getIdentifier());\n    assertEquals(2, entry.getKeyId());\n\n    entries = pset.getPrimitive(key3);\n    assertThat(entries).hasSize(1);\n    entry = entries.get(0);\n    assertEquals(\n        DummyMac1.class.getSimpleName(), new String(entry.getPrimitive().computeMac(null), UTF_8));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertEquals(CryptoFormat.LEGACY_START_BYTE, entry.getIdentifier()[0]);\n    assertArrayEquals(CryptoFormat.getOutputPrefix(key3), entry.getIdentifier());\n    assertEquals(entry.getKeyId(), 3);\n\n    entry = pset.getPrimary();\n    assertEquals(\n        DummyMac2.class.getSimpleName(),\n        new String(entry.getPrimitive().computeMac(null), UTF_8));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertArrayEquals(CryptoFormat.getOutputPrefix(key2), entry.getIdentifier());\n    assertEquals(2, entry.getKeyId());\n  }\n\n  @Test\n  public void testDuplicateKeys() throws Exception {\n    PrimitiveSet<Mac> pset = PrimitiveSet.newPrimitiveSet(Mac.class);\n    Key key1 =\n        Key.newBuilder()\n            .setKeyId(1)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.TINK)\n            .build();\n    pset.addPrimitive(new DummyMac1(), key1);\n\n    Key key2 =\n        Key.newBuilder()\n            .setKeyId(1)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.RAW)\n            .build();\n    pset.setPrimary(pset.addPrimitive(new DummyMac2(), key2));\n\n    Key key3 =\n        Key.newBuilder()\n            .setKeyId(2)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.LEGACY)\n            .build();\n    pset.addPrimitive(new DummyMac1(), key3);\n\n    Key key4 =\n        Key.newBuilder()\n            .setKeyId(2)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.LEGACY)\n            .build();\n    pset.addPrimitive(new DummyMac2(), key4);\n\n    Key key5 =\n        Key.newBuilder()\n            .setKeyId(3)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.RAW)\n            .build();\n    pset.addPrimitive(new DummyMac1(), key5);\n\n    Key key6 =\n        Key.newBuilder()\n            .setKeyId(3)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.RAW)\n            .build();\n    pset.addPrimitive(new DummyMac1(), key6);\n\n    assertEquals(3, pset.getAll().size()); // 3 instead of 6 because of duplicated key ids\n\n    // tink keys\n    List<PrimitiveSet.Entry<Mac>> entries = pset.getPrimitive(key1);\n    assertEquals(1, entries.size());\n    PrimitiveSet.Entry<Mac> entry = entries.get(0);\n    assertEquals(\n        DummyMac1.class.getSimpleName(), new String(entry.getPrimitive().computeMac(null), UTF_8));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertEquals(CryptoFormat.TINK_START_BYTE, entry.getIdentifier()[0]);\n    assertArrayEquals(CryptoFormat.getOutputPrefix(key1), entry.getIdentifier());\n    assertEquals(1, entry.getKeyId());\n\n    // raw keys\n    List<Integer> ids = new ArrayList<>(); // The order of the keys is an implementation detail.\n    entries = pset.getPrimitive(key2);\n    assertEquals(3, entries.size());\n    entry = entries.get(0);\n    assertEquals(\n        DummyMac2.class.getSimpleName(), new String(entry.getPrimitive().computeMac(null), UTF_8));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertEquals(0, entry.getIdentifier().length);\n    ids.add(entry.getKeyId());\n    entry = entries.get(1);\n    assertEquals(\n        DummyMac1.class.getSimpleName(), new String(entry.getPrimitive().computeMac(null), UTF_8));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertEquals(0, entry.getIdentifier().length);\n    ids.add(entry.getKeyId());\n    entry = entries.get(2);\n    assertEquals(\n        DummyMac1.class.getSimpleName(), new String(entry.getPrimitive().computeMac(null), UTF_8));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertEquals(0, entry.getIdentifier().length);\n    ids.add(entry.getKeyId());\n\n    assertThat(ids).containsExactly(1, 3, 3);\n    // legacy keys\n    entries = pset.getPrimitive(key3);\n    assertEquals(2, entries.size());\n    entry = entries.get(0);\n    assertEquals(\n        DummyMac1.class.getSimpleName(), new String(entry.getPrimitive().computeMac(null), UTF_8));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertArrayEquals(CryptoFormat.getOutputPrefix(key3), entry.getIdentifier());\n    assertEquals(2, entry.getKeyId());\n    entry = entries.get(1);\n    assertEquals(\n        DummyMac2.class.getSimpleName(), new String(entry.getPrimitive().computeMac(null), UTF_8));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertArrayEquals(CryptoFormat.getOutputPrefix(key4), entry.getIdentifier());\n    assertEquals(2, entry.getKeyId());\n\n    entry = pset.getPrimary();\n    assertEquals(\n        DummyMac2.class.getSimpleName(), new String(entry.getPrimitive().computeMac(null), UTF_8));\n    assertEquals(KeyStatusType.ENABLED, entry.getStatus());\n    assertEquals(0, entry.getIdentifier().length);\n    assertArrayEquals(CryptoFormat.getOutputPrefix(key2), entry.getIdentifier());\n    assertEquals(1, entry.getKeyId());\n  }\n\n  @Test\n  public void testAddPrimive_withUnknownPrefixType_shouldFail() throws Exception {\n    PrimitiveSet<Mac> pset = PrimitiveSet.newPrimitiveSet(Mac.class);\n    Key key1 = Key.newBuilder().setKeyId(1).setStatus(KeyStatusType.ENABLED).build();\n    try {\n      pset.addPrimitive(new DummyMac1(), key1);\n      fail(\"Expected GeneralSecurityException.\");\n    } catch (GeneralSecurityException e) {\n      assertExceptionContains(e, \"unknown output prefix type\");\n    }\n  }\n\n  @Test\n  public void testAddPrimive_WithDisabledKey_shouldFail() throws Exception {\n    PrimitiveSet<Mac> pset = PrimitiveSet.newPrimitiveSet(Mac.class);\n    Key key1 =\n        Key.newBuilder()\n            .setKeyId(1)\n            .setStatus(KeyStatusType.DISABLED)\n            .setOutputPrefixType(OutputPrefixType.TINK)\n            .build();\n    try {\n      pset.addPrimitive(new DummyMac1(), key1);\n      fail(\"Expected GeneralSecurityException.\");\n    } catch (GeneralSecurityException e) {\n      assertExceptionContains(e, \"only ENABLED key is allowed\");\n    }\n  }\n\n  @Test\n  public void testPrefix_isUnique() throws Exception {\n    PrimitiveSet<Mac> pset = PrimitiveSet.newPrimitiveSet(Mac.class);\n    Key key1 =\n        Key.newBuilder()\n            .setKeyId(0xffffffff)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.TINK)\n            .build();\n    pset.addPrimitive(new DummyMac1(), key1);\n    Key key2 =\n        Key.newBuilder()\n            .setKeyId(0xffffffdf)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.RAW)\n            .build();\n    pset.setPrimary(pset.addPrimitive(new DummyMac2(), key2));\n    Key key3 =\n        Key.newBuilder()\n            .setKeyId(0xffffffef)\n            .setStatus(KeyStatusType.ENABLED)\n            .setOutputPrefixType(OutputPrefixType.LEGACY)\n            .build();\n    pset.addPrimitive(new DummyMac1(), key3);\n\n    assertThat(pset.getAll()).hasSize(3);\n\n    assertThat(pset.getPrimitive(Hex.decode(\"01ffffffff\"))).hasSize(1);\n    assertThat(pset.getPrimitive(Hex.decode(\"01ffffffef\"))).isEmpty();\n    assertThat(pset.getPrimitive(Hex.decode(\"00ffffffff\"))).isEmpty();\n    assertThat(pset.getPrimitive(Hex.decode(\"00ffffffef\"))).hasSize(1);\n  }\n}\n"], "filenames": ["java_src/src/main/java/com/google/crypto/tink/BUILD.bazel", "java_src/src/main/java/com/google/crypto/tink/PrimitiveSet.java", "java_src/src/test/java/com/google/crypto/tink/BUILD.bazel", "java_src/src/test/java/com/google/crypto/tink/PrimitiveSetTest.java"], "buggy_code_start_loc": [480, 22, 174, 20], "buggy_code_end_loc": [489, 202, 174, 278], "fixing_code_start_loc": [481, 22, 175, 21], "fixing_code_end_loc": [492, 243, 176, 310], "type": "NVD-CWE-Other", "message": "A mis-handling of invalid unicode characters in the Java implementation of Tink versions prior to 1.5 allows an attacker to change the ID part of a ciphertext, which result in the creation of a second ciphertext that can decrypt to the same plaintext. This can be a problem with encrypting deterministic AEAD with a single key, and rely on a unique ciphertext-per-plaintext.", "other": {"cve": {"id": "CVE-2020-8929", "sourceIdentifier": "cve-coordination@google.com", "published": "2020-10-19T13:15:13.437", "lastModified": "2020-10-29T22:16:48.257", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A mis-handling of invalid unicode characters in the Java implementation of Tink versions prior to 1.5 allows an attacker to change the ID part of a ciphertext, which result in the creation of a second ciphertext that can decrypt to the same plaintext. This can be a problem with encrypting deterministic AEAD with a single key, and rely on a unique ciphertext-per-plaintext."}, {"lang": "es", "value": "Un manejo inapropiado de caracteres Unicode no v\u00e1lidos en la implementaci\u00f3n de Java Tink versiones anteriores a 1.5, permite a un atacante cambiar la parte del ID de un texto cifrado, lo que resulta en la creaci\u00f3n de un segundo texto cifrado que puede descifrarse en el mismo texto plano.&#xa0;Esto puede ser un problema con el cifrado AEAD determinista con una sola clave y depender de un \u00fanico texto cifrado por texto plano"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "cve-coordination@google.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}, {"source": "cve-coordination@google.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-176"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tink:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.5", "matchCriteriaId": "72E3E34A-E2CF-43CE-9D67-0E6ED1BC4EE3"}]}]}], "references": [{"url": "https://github.com/google/tink/commit/93d839a5865b9d950dffdc9d0bc99b71280a8899", "source": "cve-coordination@google.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/google/tink/security/advisories/GHSA-g5vf-v6wf-7w2r", "source": "cve-coordination@google.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/google/tink/commit/93d839a5865b9d950dffdc9d0bc99b71280a8899"}}