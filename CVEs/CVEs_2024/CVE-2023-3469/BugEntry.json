{"buggy_code": ["<?php\n\n/**\n * The import function to import the phpMyFAQ backups.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at https://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2003-2023 phpMyFAQ Team\n * @license   https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2003-02-24\n */\n\nuse phpMyFAQ\\Backup;\nuse phpMyFAQ\\Component\\Alert;\nuse phpMyFAQ\\Database;\nuse phpMyFAQ\\Database\\DatabaseHelper;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Session\\Token;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Translation;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n$csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_SANITIZE_SPECIAL_CHARS);\n\nif (!Token::getInstance()->verifyToken('restore', $csrfToken)) {\n    $csrfCheck = false;\n} else {\n    $csrfCheck = true;\n}\n?>\n    <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n        <h1 class=\"h2\">\n            <i aria-hidden=\"true\" class=\"fa fa-download\"></i>\n            <?= Translation::get('ad_csv_rest') ?>\n        </h1>\n    </div>\n<?php\n\nif ($user->perm->hasPermission($user->getUserId(), 'restore') && $csrfCheck) {\n    if (isset($_FILES['userfile']) && 0 === $_FILES['userfile']['error']) {\n        $ok = 1;\n        $fileInfo = new finfo(FILEINFO_MIME_ENCODING);\n\n        $dbHelper = new DatabaseHelper($faqConfig);\n        $backup = new Backup($faqConfig, $dbHelper);\n\n        if ('utf-8' !== $fileInfo->file($_FILES['userfile']['tmp_name'])) {\n            echo 'This file is not UTF-8 encoded.<br>';\n            $ok = 0;\n        }\n\n        $handle = fopen($_FILES['userfile']['tmp_name'], 'r');\n        $backupData = fgets($handle, 65536);\n        $versionFound = Strings::substr($backupData, 0, 9);\n        $versionExpected = '-- pmf' . substr((string) $faqConfig->getVersion(), 0, 3);\n        $queries = [];\n\n        $fileName = $_FILES['userfile']['name'];\n\n        try {\n            $verification = $backup->verifyBackup(file_get_contents($_FILES['userfile']['tmp_name']), $fileName);\n            if ($verification) {\n                $ok = 1;\n            } else {\n                $ok = 0;\n            }\n        } catch (SodiumException) {\n            echo 'This file cannot be verified.<br>';\n            $ok = 0;\n        }\n\n        if ($versionFound !== $versionExpected) {\n            printf(\n                '%s (Version check failure: \"%s\" found, \"%s\" expected)',\n                Translation::get('ad_csv_no'),\n                $versionFound,\n                $versionExpected\n            );\n            $ok = 0;\n        } else {\n            // @todo: Start transaction for better recovery if something really bad happens\n            $backupData = trim(Strings::substr($backupData, 11));\n            $tables = explode(' ', $backupData);\n            $numTables = count($tables);\n            for ($h = 0; $h < $numTables; ++$h) {\n                $queries[] = sprintf('DELETE FROM %s', $tables[$h]);\n            }\n            $ok = 1;\n        }\n\n        if ($ok == 1) {\n            $tablePrefix = '';\n            printf(\"<p>%s</p>\\n\", Translation::get('ad_csv_prepare'));\n            while ($backupData = fgets($handle, 65536)) {\n                $backupData = trim($backupData);\n                $backupPrefixPattern = '-- pmftableprefix:';\n                $backupPrefixPatternLength = Strings::strlen($backupPrefixPattern);\n                if (Strings::substr($backupData, 0, $backupPrefixPatternLength) === $backupPrefixPattern) {\n                    $tablePrefix = trim(Strings::substr($backupData, $backupPrefixPatternLength));\n                }\n                if ((Strings::substr($backupData, 0, 2) != '--') && ($backupData != '')) {\n                    $queries[] = trim(Strings::substr($backupData, 0, -1));\n                }\n            }\n\n            $k = 0;\n            $g = 0;\n\n            printf(\"<p>%s</p>\\n\", Translation::get('ad_csv_process'));\n\n            $numTables = count($queries);\n            $kg = '';\n            for ($i = 0; $i < $numTables; ++$i) {\n                $queries[$i] = DatabaseHelper::alignTablePrefix($queries[$i], $tablePrefix, Database::getTablePrefix());\n\n                $kg = $faqConfig->getDb()->query($queries[$i]);\n                if (!$kg) {\n                    printf(\n                        '<div style=\"alert alert-danger\"><strong>Query</strong>: \"%s\" failed (Reason: %s)</div>%s',\n                        Strings::htmlspecialchars($queries[$i], ENT_QUOTES, 'utf-8'),\n                        $faqConfig->getDb()->error(),\n                        \"\\n\"\n                    );\n                    ++$k;\n                } else {\n                    printf(\n                        '<!-- <div class=\"alert alert-success\"><strong>Query</strong>: \"%s\" okay</div> -->%s',\n                        Strings::htmlspecialchars($queries[$i], ENT_QUOTES, 'utf-8'),\n                        \"\\n\"\n                    );\n                    ++$g;\n                }\n            }\n            printf(\n                '<p class=\"alert alert-success\">%d %s %d %s</p>',\n                $g,\n                Translation::get('ad_csv_of'),\n                $numTables,\n                Translation::get('ad_csv_suc')\n            );\n        }\n    } else {\n        $errorMessage = match ($_FILES['userfile']['error']) {\n            1 => 'The uploaded file exceeds the upload_max_filesize directive in php.ini.',\n            2 => 'The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the ' . 'HTML form.',\n            3 => 'The uploaded file was only partially uploaded.',\n            4 => 'No file was uploaded.',\n            6 => 'Missing a temporary folder.',\n            7 => 'Failed to write file to disk.',\n            8 => 'A PHP extension stopped the file upload.',\n            default => 'Undefined error.',\n        };\n        echo Alert::danger('ad_csv_no', $errorMessage);\n    }\n} else {\n    echo Translation::get('err_NotAuth');\n}\n", "<?php\n\n/**\n * phpMyFAQ main error class.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at https://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2020-2023 phpMyFAQ Team\n * @license   https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2020-11-13\n */\n\nnamespace phpMyFAQ\\Core;\n\nuse ErrorException;\n\n/**\n * Class Error\n *\n * @package phpMyFAQ\n */\nclass Error\n{\n    /**\n     * Error handler to convert all errors to PHP exceptions by\n     * throwing a PHP ErrorException.\n     *\n     * @throws ErrorException\n     */\n    public static function errorHandler(int $level, string $message, string $filename, int $line): void\n    {\n        if (error_reporting() !== 0) {\n            $filename = (DEBUG ? $filename : basename($filename));\n            throw new ErrorException($message, 0, $level, $filename, $line);\n        }\n    }\n\n    /**\n     * Exception handler.\n     *\n     * @param $exception\n     */\n    public static function exceptionHandler($exception): void\n    {\n        $code = $exception->getCode();\n        if ($code !== 404) {\n            $code = 500;\n        }\n        http_response_code($code);\n        echo \"<h1>phpMyFAQ Fatal error</h1>\";\n        echo \"<p>Uncaught exception: '\" . $exception::class . \"'</p>\";\n        echo \"<p>Message: '\" . $exception->getMessage() . \"'</p>\";\n        echo \"<p>Stack trace:<pre>\" . $exception->getTraceAsString() . \"</pre></p>\";\n        echo \"<p>Thrown in '\" . $exception->getFile() . \"' on line \" . $exception->getLine() . \"</p>\";\n        if (ini_get('log_errors')) {\n            error_log(\n                sprintf(\n                    \"phpMyFAQ %s: %s in %s on line %d\\nStack trace:\\n%s\",\n                    $exception::class,\n                    $exception->getMessage(),\n                    $exception->getFile(),\n                    $exception->getLine(),\n                    $exception->getTraceAsString()\n                )\n            );\n        }\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * The import function to import the phpMyFAQ backups.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at https://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2003-2023 phpMyFAQ Team\n * @license   https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2003-02-24\n */\n\nuse phpMyFAQ\\Backup;\nuse phpMyFAQ\\Component\\Alert;\nuse phpMyFAQ\\Database;\nuse phpMyFAQ\\Database\\DatabaseHelper;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Session\\Token;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Translation;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n$csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_SANITIZE_SPECIAL_CHARS);\n\nif (!Token::getInstance()->verifyToken('restore', $csrfToken)) {\n    $csrfCheck = false;\n} else {\n    $csrfCheck = true;\n}\n?>\n    <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n        <h1 class=\"h2\">\n            <i aria-hidden=\"true\" class=\"fa fa-download\"></i>\n            <?= Translation::get('ad_csv_rest') ?>\n        </h1>\n    </div>\n<?php\n\nif ($user->perm->hasPermission($user->getUserId(), 'restore') && $csrfCheck) {\n    if (isset($_FILES['userfile']) && 0 === $_FILES['userfile']['error']) {\n        $ok = 1;\n        $fileInfo = new finfo(FILEINFO_MIME_ENCODING);\n\n        $dbHelper = new DatabaseHelper($faqConfig);\n        $backup = new Backup($faqConfig, $dbHelper);\n\n        if ('utf-8' !== $fileInfo->file($_FILES['userfile']['tmp_name'])) {\n            echo 'This file is not UTF-8 encoded.<br>';\n            $ok = 0;\n        }\n\n        $handle = fopen($_FILES['userfile']['tmp_name'], 'r');\n        $backupData = fgets($handle, 65536);\n        $versionFound = Strings::substr($backupData, 0, 9);\n        $versionExpected = '-- pmf' . substr($faqConfig->getVersion(), 0, 3);\n        $queries = [];\n\n        $fileName = $_FILES['userfile']['name'];\n\n        try {\n            $verification = $backup->verifyBackup(file_get_contents($_FILES['userfile']['tmp_name']), $fileName);\n            if ($verification) {\n                $ok = 1;\n            } else {\n                echo 'This file is not a verified backup file.<br>';\n                $ok = 0;\n            }\n        } catch (SodiumException) {\n            echo 'This file cannot be verified.<br>';\n            $ok = 0;\n        }\n\n        if ($versionFound !== $versionExpected) {\n            printf(\n                '%s (Version check failure: \"%s\" found, \"%s\" expected)',\n                Translation::get('ad_csv_no'),\n                $versionFound,\n                $versionExpected\n            );\n            $ok = 0;\n        }\n\n        if ($ok === 1) {\n            // @todo: Start transaction for better recovery if something really bad happens\n            $backupData = trim(Strings::substr($backupData, 11));\n            $tables = explode(' ', $backupData);\n            $numTables = count($tables);\n            for ($h = 0; $h < $numTables; ++$h) {\n                $queries[] = sprintf('DELETE FROM %s', $tables[$h]);\n            }\n            $ok = 1;\n        }\n\n        if ($ok === 1) {\n            $tablePrefix = '';\n            printf(\"<p>%s</p>\\n\", Translation::get('ad_csv_prepare'));\n            while ($backupData = fgets($handle, 65536)) {\n                $backupData = trim($backupData);\n                $backupPrefixPattern = '-- pmftableprefix:';\n                $backupPrefixPatternLength = Strings::strlen($backupPrefixPattern);\n                if (Strings::substr($backupData, 0, $backupPrefixPatternLength) === $backupPrefixPattern) {\n                    $tablePrefix = trim(Strings::substr($backupData, $backupPrefixPatternLength));\n                }\n                if ((Strings::substr($backupData, 0, 2) != '--') && ($backupData != '')) {\n                    $queries[] = trim(Strings::substr($backupData, 0, -1));\n                }\n            }\n\n            $k = 0;\n            $g = 0;\n\n            printf(\"<p>%s</p>\\n\", Translation::get('ad_csv_process'));\n\n            $numTables = count($queries);\n            $kg = '';\n            for ($i = 0; $i < $numTables; ++$i) {\n                $queries[$i] = DatabaseHelper::alignTablePrefix($queries[$i], $tablePrefix, Database::getTablePrefix());\n\n                $kg = $faqConfig->getDb()->query($queries[$i]);\n                if (!$kg) {\n                    printf(\n                        '<div style=\"alert alert-danger\"><strong>Query</strong>: \"%s\" failed (Reason: %s)</div>%s',\n                        Strings::htmlspecialchars($queries[$i], ENT_QUOTES, 'utf-8'),\n                        $faqConfig->getDb()->error(),\n                        \"\\n\"\n                    );\n                    ++$k;\n                } else {\n                    printf(\n                        '<!-- <div class=\"alert alert-success\"><strong>Query</strong>: \"%s\" okay</div> -->%s',\n                        Strings::htmlspecialchars($queries[$i], ENT_QUOTES, 'utf-8'),\n                        \"\\n\"\n                    );\n                    ++$g;\n                }\n            }\n            printf(\n                '<p class=\"alert alert-success\">%d %s %d %s</p>',\n                $g,\n                Translation::get('ad_csv_of'),\n                $numTables,\n                Translation::get('ad_csv_suc')\n            );\n        } else {\n            echo Alert::danger('ad_csv_no', 'Import not possible.');\n        }\n    } else {\n        $errorMessage = match ($_FILES['userfile']['error']) {\n            1 => 'The uploaded file exceeds the upload_max_filesize directive in php.ini.',\n            2 => 'The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the ' . 'HTML form.',\n            3 => 'The uploaded file was only partially uploaded.',\n            4 => 'No file was uploaded.',\n            6 => 'Missing a temporary folder.',\n            7 => 'Failed to write file to disk.',\n            8 => 'A PHP extension stopped the file upload.',\n            default => 'Undefined error.',\n        };\n        echo Alert::danger('ad_csv_no', $errorMessage);\n    }\n} else {\n    echo Translation::get('err_NotAuth');\n}\n", "<?php\n\n/**\n * phpMyFAQ main error class.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at https://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2020-2023 phpMyFAQ Team\n * @license   https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2020-11-13\n */\n\nnamespace phpMyFAQ\\Core;\n\nuse ErrorException;\nuse phpMyFAQ\\Strings;\n\n/**\n * Class Error\n *\n * @package phpMyFAQ\n */\nclass Error\n{\n    /**\n     * Error handler to convert all errors to PHP exceptions by\n     * throwing a PHP ErrorException.\n     *\n     * @throws ErrorException\n     */\n    public static function errorHandler(int $level, string $message, string $filename, int $line): void\n    {\n        if (error_reporting() !== 0) {\n            $filename = (DEBUG ? $filename : basename($filename));\n            throw new ErrorException($message, 0, $level, $filename, $line);\n        }\n    }\n\n    /**\n     * Exception handler.\n     *\n     * @param $exception\n     */\n    public static function exceptionHandler($exception): void\n    {\n        $code = $exception->getCode();\n        if ($code !== 404) {\n            $code = 500;\n        }\n        http_response_code($code);\n        echo \"<h1>phpMyFAQ Fatal error</h1>\";\n        echo \"<p>Uncaught exception: '\" . $exception::class . \"'</p>\";\n        echo \"<p>Message: '\" . Strings::htmlentities($exception->getMessage()) . \"'</p>\";\n        echo \"<p>Stack trace:<pre>\" . $exception->getTraceAsString() . \"</pre></p>\";\n        echo \"<p>Thrown in '\" . $exception->getFile() . \"' on line \" . $exception->getLine() . \"</p>\";\n        if (ini_get('log_errors')) {\n            error_log(\n                sprintf(\n                    \"phpMyFAQ %s: %s in %s on line %d\\nStack trace:\\n%s\",\n                    $exception::class,\n                    $exception->getMessage(),\n                    $exception->getFile(),\n                    $exception->getLine(),\n                    $exception->getTraceAsString()\n                )\n            );\n        }\n    }\n}\n"], "filenames": ["phpmyfaq/admin/backup.import.php", "phpmyfaq/src/phpMyFAQ/Core/Error.php"], "buggy_code_start_loc": [64, 20], "buggy_code_end_loc": [149, 58], "fixing_code_start_loc": [64, 21], "fixing_code_end_loc": [155, 59], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository thorsten/phpmyfaq prior to 3.2.0-beta.2.", "other": {"cve": {"id": "CVE-2023-3469", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-30T01:15:08.880", "lastModified": "2023-07-06T18:43:07.970", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository thorsten/phpmyfaq prior to 3.2.0-beta.2."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.2, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.9, "impactScore": 4.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.1.14", "matchCriteriaId": "8A23CE37-3356-4EBD-AB7D-060CF611CF6C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:3.2.0:alpha:*:*:*:*:*:*", "matchCriteriaId": "71D0A0BD-EC7D-47C7-8C0F-716EE0843E52"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:3.2.0:beta:*:*:*:*:*:*", "matchCriteriaId": "AA3CB4E9-252B-4326-BE77-679284864A4F"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/04a0183c25dd425f4c2bfb5f75b7650b932ae278", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/3565cfc9-82c4-4db8-9b8f-494dd81b56ca", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/04a0183c25dd425f4c2bfb5f75b7650b932ae278"}}