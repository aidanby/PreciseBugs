{"buggy_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.api;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Vector;\n\nimport org.apache.commons.fileupload.FileItem;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.suigeneris.jrcs.diff.DifferentiationFailedException;\nimport org.suigeneris.jrcs.diff.delta.Delta;\nimport org.suigeneris.jrcs.rcs.Version;\nimport org.xwiki.context.Execution;\nimport org.xwiki.context.ExecutionContext;\nimport org.xwiki.display.internal.DocumentDisplayerParameters;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.DocumentReferenceResolver;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.model.reference.ObjectReference;\nimport org.xwiki.model.reference.PageReference;\nimport org.xwiki.rendering.block.XDOM;\nimport org.xwiki.rendering.parser.ParseException;\nimport org.xwiki.rendering.syntax.Syntax;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.stability.Unstable;\n\nimport com.xpn.xwiki.XWiki;\nimport com.xpn.xwiki.XWikiConstant;\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.criteria.impl.Period;\nimport com.xpn.xwiki.criteria.impl.PeriodFactory;\nimport com.xpn.xwiki.criteria.impl.Range;\nimport com.xpn.xwiki.criteria.impl.RangeFactory;\nimport com.xpn.xwiki.criteria.impl.RevisionCriteria;\nimport com.xpn.xwiki.criteria.impl.Scope;\nimport com.xpn.xwiki.criteria.impl.ScopeFactory;\nimport com.xpn.xwiki.doc.DocumentRevisionProvider;\nimport com.xpn.xwiki.doc.MetaDataDiff;\nimport com.xpn.xwiki.doc.XWikiAttachment;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.doc.XWikiDocumentArchive;\nimport com.xpn.xwiki.doc.XWikiLink;\nimport com.xpn.xwiki.doc.XWikiLock;\nimport com.xpn.xwiki.objects.BaseObject;\nimport com.xpn.xwiki.objects.BaseProperty;\nimport com.xpn.xwiki.objects.ObjectDiff;\nimport com.xpn.xwiki.objects.classes.BaseClass;\nimport com.xpn.xwiki.plugin.fileupload.FileUploadPlugin;\nimport com.xpn.xwiki.stats.api.XWikiStatsService;\nimport com.xpn.xwiki.stats.impl.DocumentStats;\nimport com.xpn.xwiki.stats.impl.RefererStats;\nimport com.xpn.xwiki.util.TOCGenerator;\nimport com.xpn.xwiki.util.Util;\nimport com.xpn.xwiki.web.Utils;\n\n/**\n * This class represents a document or page in the wiki. This is a security and usability wrapper which wraps\n * {@link com.xpn.xwiki.doc.XWikiDocument} In scripting, an object representing the document in which the script resides\n * will be bound to a variable called doc.\n *\n * @version $Id$\n */\npublic class Document extends Api\n{\n    /** Logging helper object. */\n    private static final Logger LOGGER = LoggerFactory.getLogger(Document.class);\n\n    /**\n     * The XWikiDocument object wrapped by this API.\n     */\n    protected XWikiDocument initialDoc;\n\n    /**\n     * The XWikiDocument object wrapped by this API.\n     */\n    protected XWikiDocument doc;\n\n    /**\n     * Convenience object used by object related methods.\n     */\n    protected Object currentObj;\n\n    /**\n     * Used to resolve a string into a proper Document Reference using the current document's reference to fill the\n     * blanks, except for the page name for which the default page name is used instead and for the wiki name for which\n     * the current wiki is used instead of the current document reference's wiki.\n     */\n    private DocumentReferenceResolver<String> currentMixedDocumentReferenceResolver;\n\n    /**\n     * Used to convert a proper Document Reference to string (standard form).\n     */\n    private EntityReferenceSerializer<String> defaultEntityReferenceSerializer;\n\n    /**\n     * Used to convert a proper Document Reference to a string but without the wiki name.\n     */\n    private EntityReferenceSerializer<String> localEntityReferenceSerializer;\n\n    /**\n     * Used to convert user references to string.\n     */\n    private EntityReferenceSerializer<String> compactWikiEntityReferenceSerializer;\n\n    private DocumentRevisionProvider documentRevisionProvider;\n\n    private DocumentReferenceResolver<String> getCurrentMixedDocumentReferenceResolver()\n    {\n        if (this.currentMixedDocumentReferenceResolver == null) {\n            this.currentMixedDocumentReferenceResolver =\n                Utils.getComponent(DocumentReferenceResolver.TYPE_STRING, \"currentmixed\");\n        }\n\n        return this.currentMixedDocumentReferenceResolver;\n    }\n\n    private EntityReferenceSerializer<String> getDefaultEntityReferenceSerializer()\n    {\n        if (this.defaultEntityReferenceSerializer == null) {\n            this.defaultEntityReferenceSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING);\n        }\n\n        return this.defaultEntityReferenceSerializer;\n    }\n\n    private EntityReferenceSerializer<String> getLocalEntityReferenceSerializer()\n    {\n        if (this.localEntityReferenceSerializer == null) {\n            this.localEntityReferenceSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, \"local\");\n        }\n\n        return this.localEntityReferenceSerializer;\n    }\n\n    private EntityReferenceSerializer<String> getCompactWikiEntityReferenceSerializer()\n    {\n        if (this.compactWikiEntityReferenceSerializer == null) {\n            this.compactWikiEntityReferenceSerializer =\n                Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, \"compactwiki\");\n        }\n\n        return this.compactWikiEntityReferenceSerializer;\n    }\n\n    private DocumentRevisionProvider getDocumentRevisionProvider()\n    {\n        if (this.documentRevisionProvider == null) {\n            this.documentRevisionProvider = Utils.getComponent(DocumentRevisionProvider.class);\n        }\n\n        return this.documentRevisionProvider;\n    }\n\n    /**\n     * Document constructor.\n     *\n     * @param doc The XWikiDocument object to wrap.\n     * @param context The current request context.\n     */\n    public Document(XWikiDocument doc, XWikiContext context)\n    {\n        super(context);\n\n        this.initialDoc = doc;\n        this.doc = this.initialDoc;\n    }\n\n    /**\n     * Get the XWikiDocument wrapped by this API. This function is accessible only if you have the programming rights\n     * give access to the priviledged API of the Document.\n     *\n     * @return The XWikiDocument wrapped by this API.\n     */\n    public XWikiDocument getDocument()\n    {\n        if (hasProgrammingRights()) {\n            return this.doc;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Get a clone of the XWikiDocument wrapped by this API.\n     *\n     * @return A clone of the XWikiDocument wrapped by this API.\n     */\n    protected XWikiDocument getDoc()\n    {\n        if (this.initialDoc == this.doc) {\n            this.doc = this.initialDoc.clone();\n        }\n\n        return this.doc;\n    }\n\n    /**\n     * return the ID of the document. this ID is unique across the wiki.\n     *\n     * @return the id of the document.\n     */\n    public long getId()\n    {\n        return this.doc.getId();\n    }\n\n    /**\n     * returns the DocumentReference for the current document\n     *\n     * @return the DocumentReference of the current document\n     * @since 2.3M1\n     */\n    public DocumentReference getDocumentReference()\n    {\n        return this.doc.getDocumentReference();\n    }\n\n    /**\n     * @return the {@link DocumentReference} of the document also containing the document {@link Locale}\n     * @since 9.3RC1\n     */\n    public DocumentReference getDocumentReferenceWithLocale()\n    {\n        return this.doc.getDocumentReferenceWithLocale();\n    }\n\n    /**\n     * @return the reference of the document as {@link PageReference} without the {@link Locale}\n     * @since 10.6RC1\n     */\n    public PageReference getPageReference()\n    {\n        return this.doc.getPageReference();\n    }\n\n    /**\n     * @return the reference of the document as {@link PageReference} including the {@link Locale}\n     * @since 10.6RC1\n     */\n    public PageReference getPageReferenceWithLocale()\n    {\n        return this.doc.getPageReferenceWithLocale();\n    }\n\n    /**\n     * @return the last part of the document's reference. For example if the reference of a document is\n     *         {@code MySpace.Mydoc}, the returned name is {@code MyDoc}. For a nested document, the last part of the\n     *         reference is always {@code WebHome} and thus the returned name is {@code Webhome}. It's better to use\n     *         {@link #getPageReference()} or {@link #getDocumentReference()}, e.g. with\n     *         {@code getPageReference().getName()} or {@code getDocumentReference().getName()}. To get the space name\n     *         of the nested document you can use {@code getPageReference().getName()} or\n     *         {@code getDocumentReference().getParent().getName()}.\n     * @see #getPageReference()\n     * @see #getDocumentReference()\n     * @deprecated since 11.0, use {@link #getDocumentReference()} instead\n     */\n    @Deprecated\n    public String getName()\n{\n    return this.doc.getDocumentReference().getName();\n}\n\n    /**\n     * Return the full local space reference of the Document. For example a document located in sub-space\n     * <code>space11</code> of space <code>space1</code> will return <code>space1.space11</code>.\n     *\n     * @return the name of the spaces of the document\n     */\n    public String getSpace()\n    {\n        return this.doc.getSpace();\n    }\n\n    /**\n     * Get the name wiki where the document is stored.\n     *\n     * @return The name of the wiki where this document is stored.\n     * @since 1.1.2\n     * @since 1.2M2\n     */\n    public String getWiki()\n    {\n        return this.doc.getDocumentReference().getWikiReference().getName();\n    }\n\n    /**\n     * Get the fullName of the document. If a document is named \"MyDoc\" in space \"MySpace\", the fullname is\n     * \"MySpace.MyDoc\". In a wiki, all the documents have a different fullName.\n     *\n     * @return fullName of the document.\n     */\n    public String getFullName()\n    {\n        return getLocalEntityReferenceSerializer().serialize(this.doc.getDocumentReference());\n    }\n\n    /**\n     * Get the complete fullName of the document. The real full name of the document containing the name of the wiki\n     * where the document is stored. For a document stored in the wiki \"xwiki\", in space \"MySpace\", named \"MyDoc\", its\n     * complete full name is \"xwiki:MySpace.MyDoc\".\n     *\n     * @return The complete fullName of the document.\n     * @since 1.1.2\n     * @since 1.2M2\n     */\n    public String getPrefixedFullName()\n    {\n        return getDefaultEntityReferenceSerializer().serialize(this.doc.getDocumentReference());\n    }\n\n    /**\n     * Get a Version object representing the current version of the document.\n     *\n     * @return A Version object representing the current version of the document\n     */\n    public Version getRCSVersion()\n    {\n        return this.doc.getRCSVersion();\n    }\n\n    /**\n     * Get a string representing the current version of the document.\n     *\n     * @return A string representing the current version of the document.\n     */\n    public String getVersion()\n    {\n        return this.doc.getVersion();\n    }\n\n    /**\n     * Get a string representing the previous version of the document.\n     *\n     * @return A string representing the previous version of the document. If this is the first version then it returns\n     *         null.\n     */\n    public String getPreviousVersion()\n    {\n        return this.doc.getPreviousVersion();\n    }\n\n    /**\n     * Get the value of the title field of the document.\n     *\n     * @return The value of the title field of the document.\n     */\n    public String getTitle()\n    {\n        return this.doc.getTitle();\n    }\n\n    /**\n     * Get document title. If a title has not been provided through the title field, it looks for a section title in the\n     * document's content and if not found return the page name. The returned title is also interpreted which means it's\n     * allowed to use Velocity, Groovy, etc syntax within a title.\n     *\n     * @return The document title as XHTML\n     */\n    public String getDisplayTitle()\n    {\n        return this.doc.getRenderedTitle(getXWikiContext());\n    }\n\n    /**\n     * Returns the document title as plain text\n     *\n     * @return the document title as plain text (all markup removed)\n     * @since 3.0M1\n     */\n    public String getPlainTitle()\n    {\n        return this.doc.getRenderedTitle(Syntax.PLAIN_1_0, getXWikiContext());\n    }\n\n    /**\n     * Returns the title of the document rendered through wiki syntax and velocity\n     *\n     * @return the title rendered through wiki syntax and velocity\n     * @see XWikiDocument#getRenderedTitle(Syntax, XWikiContext)\n     */\n    public String getRenderedTitle(String syntaxId) throws XWikiException\n    {\n        try {\n            return this.doc.getRenderedTitle(Syntax.valueOf(syntaxId), getXWikiContext());\n        } catch (ParseException e) {\n            LOGGER.error(\"Failed to parse provided syntax identifier [\" + syntaxId + \"]\", e);\n\n            throw new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_UNKNOWN,\n                \"Failed to parse syntax identifier [\" + syntaxId + \"]\", e);\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to render document [\" + getPrefixedFullName() + \"] title content\", e);\n\n            throw new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_UNKNOWN,\n                \"Failed to render document [\" + getPrefixedFullName() + \"] content title\", e);\n        }\n    }\n\n    /**\n     * TODO document this or mark it deprecated\n     */\n    public String getFormat()\n    {\n        return this.doc.getFormat();\n    }\n\n    /**\n     * Get fullName of the profile document of the author of the current version of the document. Example: XWiki.Admin.\n     *\n     * @return The fullName of the profile document of the author of the current version of the document.\n     */\n    public String getAuthor()\n    {\n        return this.doc.getAuthor();\n    }\n\n    /**\n     * @return the document author reference\n     * @since 6.4RC1\n     */\n    public DocumentReference getAuthorReference()\n    {\n        return this.doc.getAuthorReference();\n    }\n\n    /**\n     * Get fullName of the profile document of the author of the content modification of this document version. Example:\n     * XWiki.Admin.\n     *\n     * @return The fullName of the profile document of the author of the content modification in this document version.\n     */\n    public String getContentAuthor()\n    {\n        return this.doc.getContentAuthor();\n    }\n\n    /**\n     * @return the document content author reference\n     * @since 6.4RC1\n     */\n    public DocumentReference getContentAuthorReference()\n    {\n        return this.doc.getContentAuthorReference();\n    }\n\n    /**\n     * @return The date when this document version has been modified.\n     */\n    public Date getDate()\n    {\n        return this.doc.getDate();\n    }\n\n    /**\n     * Get the date when the content modification has been done on this document version. A content update excludes\n     * modifications to meta data fields or comments of the document.\n     *\n     * @return The date where the content modification has been done on this document version.\n     */\n    public Date getContentUpdateDate()\n    {\n        return this.doc.getContentUpdateDate();\n    }\n\n    /**\n     * @return the original creation date of the document.\n     */\n    public Date getCreationDate()\n    {\n        return this.doc.getCreationDate();\n    }\n\n    /**\n     * Get the name of the parent of this document.\n     *\n     * @return The name of the parent of this document.\n     */\n    public String getParent()\n    {\n        return this.doc.getParent();\n    }\n\n    /**\n     * @return the parent reference or null if the parent is not set\n     * @since 7.3M1\n     */\n    public DocumentReference getParentReference()\n    {\n        return this.doc.getParentReference();\n    }\n\n    /**\n     * Get fullName of the profile document of the document creator.\n     *\n     * @return The fullName of the profile document of the document creator.\n     */\n    public String getCreator()\n    {\n        return this.doc.getCreator();\n    }\n\n    /**\n     * @return the document creator reference\n     * @since 6.4RC1\n     */\n    public DocumentReference getCreatorReference()\n    {\n        return this.doc.getCreatorReference();\n    }\n\n    /**\n     * Get raw content of the document, i.e. the content that is visible through the wiki editor.\n     *\n     * @return The raw content of the document.\n     */\n    public String getContent()\n    {\n        return this.doc.getContent();\n    }\n\n    /**\n     * NOTE: This method caches the XDOM and returns a clone that can be safely modified.\n     *\n     * @return the XDOM corresponding to the document's string content\n     * @since 7.0RC1\n     */\n    public XDOM getXDOM()\n    {\n        return this.doc.getXDOM();\n    }\n\n    /**\n     * @return The syntax representing the syntax used for the document's content\n     * @since 2.3M1\n     */\n    public Syntax getSyntax()\n    {\n        return this.doc.getSyntax();\n    }\n\n    /**\n     * Get the Syntax id representing the syntax used for the document. For example \"xwiki/1.0\" represents the first\n     * version XWiki syntax while \"xwiki/2.0\" represents version 2.0 of the XWiki Syntax.\n     *\n     * @return The syntax id representing the syntax used for the document.\n     * @deprecated since 2.3M1 use {@link #getSyntax()} instead\n     */\n    @Deprecated\n    public String getSyntaxId()\n    {\n        return this.doc.getSyntax().toIdString();\n    }\n\n    /**\n     * Same as {@link #getLocale()} but as String.\n     *\n     * @return the locale of the document.\n     * @deprecated since 5.4M1 use {@link #getLocale()} instead\n     */\n    @Deprecated\n    public String getLanguage()\n    {\n        return this.doc.getLanguage();\n    }\n\n    /**\n     * Get the locale of the document. If the document is a translation it returns the locale set for it, otherwise, it\n     * returns the root locale.\n     *\n     * @return the locale of the document\n     * @since 5.4M1\n     */\n    public Locale getLocale()\n    {\n        return this.doc.getLocale();\n    }\n\n    /**\n     * TODO document this or mark it deprecated\n     */\n    public String getTemplate()\n    {\n        String templateReferenceAsString = \"\";\n        DocumentReference templateDocumentReference = this.doc.getTemplateDocumentReference();\n        if (templateDocumentReference != null) {\n            templateReferenceAsString = getLocalEntityReferenceSerializer().serialize(templateDocumentReference);\n        }\n        return templateReferenceAsString;\n    }\n\n    /**\n     * Same as {@link #getRealLocale()} but as String.\n     *\n     * @return the real locale\n     * @deprecated since 8.0M1, use {@link #getRealLocale()} instead\n     */\n    @Deprecated\n    public String getRealLanguage() throws XWikiException\n    {\n        return this.doc.getRealLanguage(getXWikiContext());\n    }\n\n    /**\n     * Gets the real locale of the document. The real locale is either the default locale field when the locale field is\n     * empty (when the document is the default document) or the locale field otherwise when the document is a\n     * translation document\n     * \n     * @return the actual locale of the document\n     * @since 8.0M1\n     */\n    public Locale getRealLocale()\n    {\n        return this.doc.getRealLocale();\n    }\n\n    /**\n     * Same as {@link #getDefaultLocale()} but as String.\n     * \n     * @return the locale of the default document\n     * @deprecated since 8.0M1, use {@link #getDefaultLocale()} instead\n     */\n    @Deprecated\n    public String getDefaultLanguage()\n    {\n        return this.doc.getDefaultLanguage();\n    }\n\n    /**\n     * @return the Locale of the default version of the document (usually {@link Locale#ROOT} or {@link Locale#ENGLISH})\n     * @since 8.0M1\n     */\n    public Locale getDefaultLocale()\n    {\n        return this.doc.getDefaultLocale();\n    }\n\n    /**\n     * @param defaultLocale the locale content in the default document version\n     * @since 11.9RC1\n     */\n    public void setDefaultLocale(Locale defaultLocale)\n    {\n        this.doc.setDefaultLocale(defaultLocale);\n    }\n\n    /**\n     * TODO document this or mark it deprecated\n     */\n    public String getDefaultTemplate()\n    {\n        return this.doc.getDefaultTemplate();\n    }\n\n    /**\n     * @return the comment of of the document version\n     */\n    public String getComment()\n    {\n        return this.doc.getComment();\n    }\n\n    /**\n     * @return true if the this document version was a minor edit.\n     */\n    public boolean isMinorEdit()\n    {\n        return this.doc.isMinorEdit();\n    }\n\n    /**\n     * @return the list of locales for which this document has a translation; the original (default) locale is not\n     *         included\n     * @throws XWikiException if retrieving the document translations from the database fails\n     * @since 12.4RC1\n     */\n    @Unstable\n    public List<Locale> getTranslationLocales() throws XWikiException\n    {\n        return this.doc.getTranslationLocales(getXWikiContext());\n    }\n\n    /**\n     * @return the translated document's content if the wiki is multilingual, the locale is first checked in the URL,\n     *         the cookie, the user profile and finally the wiki configuration if not, the locale is the one on the wiki\n     *         configuration.\n     */\n    public String getTranslatedContent() throws XWikiException\n    {\n        return this.doc.getTranslatedContent(getXWikiContext());\n    }\n\n    /**\n     * @return the translated content in the given locale\n     */\n    public String getTranslatedContent(String locale) throws XWikiException\n    {\n        return this.doc.getTranslatedContent(locale, getXWikiContext());\n    }\n\n    /**\n     * @return the translated document in the given locale\n     */\n    public Document getTranslatedDocument(String locale) throws XWikiException\n    {\n        return this.doc.getTranslatedDocument(locale, getXWikiContext()).newDocument(getXWikiContext());\n    }\n\n    /**\n     * @return the tranlated Document if the wiki is multilingual, the locale is first checked in the URL, the cookie,\n     *         the user profile and finally the wiki configuration if not, the locale is the one on the wiki\n     *         configuration.\n     */\n    public Document getTranslatedDocument() throws XWikiException\n    {\n        return this.doc.getTranslatedDocument(getXWikiContext()).newDocument(getXWikiContext());\n    }\n\n    /**\n     * @param targetSyntax the syntax in which to render the document content\n     * @return the content of the current document rendered.\n     * @since 11.3RC1\n     */\n    public String displayDocument(Syntax targetSyntax) throws XWikiException\n    {\n        return this.doc.displayDocument(targetSyntax, getXWikiContext());\n    }\n\n    /**\n     * @param targetSyntax the syntax in which to render the document content\n     * @param restricted see {@link DocumentDisplayerParameters#isTransformationContextRestricted}.\n     * @return the content of the current document rendered.\n     * @since 11.5RC1\n     */\n    public String displayDocument(Syntax targetSyntax, boolean restricted) throws XWikiException\n    {\n        return this.doc.displayDocument(targetSyntax, restricted, getXWikiContext());\n    }\n\n    /**\n     * @return the content of the current document rendered.\n     * @since 11.3RC1\n     */\n    public String displayDocument() throws XWikiException\n    {\n        return this.doc.displayDocument(getXWikiContext());\n    }\n\n    /**\n     * @return the content of the current document rendered.\n     * @param restricted see {@link DocumentDisplayerParameters#isTransformationContextRestricted}.\n     * @since 11.5RC1\n     */\n    public String displayDocument(boolean restricted) throws XWikiException\n    {\n        return this.doc.displayDocument(restricted, getXWikiContext());\n    }\n\n    /**\n     * @return the content of the document or its translations rendered.\n     */\n    public String getRenderedContent() throws XWikiException\n    {\n        return this.doc.getRenderedContent(getXWikiContext());\n    }\n\n    /**\n     * Execute and render the document in the current context.\n     * <p>\n     * The code is executed with right of this document content author.\n     * \n     * @param transformationContextIsolated see {@link DocumentDisplayerParameters#isTransformationContextIsolated()}\n     * @return the result\n     * @throws XWikiException when failing to display the document\n     * @since 8.4RC1\n     */\n    public String getRenderedContent(boolean transformationContextIsolated) throws XWikiException\n    {\n        return this.doc.getRenderedContent(transformationContextIsolated, getXWikiContext());\n    }\n\n    /**\n     * @param text the text to render\n     * @return the given text rendered in the context of this document\n     * @deprecated since 1.6M1 use {@link #getRenderedContent(String, String)}\n     */\n    @Deprecated\n    public String getRenderedContent(String text) throws XWikiException\n    {\n        return getRenderedContent(text, Syntax.XWIKI_1_0.toIdString());\n    }\n\n    /**\n     * @param text the text to render\n     * @param syntaxId the id of the Syntax used by the passed text (for example: \"xwiki/1.0\")\n     * @return the given text rendered in the context of this document using the passed Syntax\n     * @since 1.6M1\n     */\n    public String getRenderedContent(String text, String syntaxId) throws XWikiException\n    {\n        return getRenderedContent(text, syntaxId, false);\n    }\n\n    /**\n     * Render a text in a restricted mode, where script macros are completely disabled.\n     *\n     * @param text the text to render\n     * @param syntaxId the id of the Syntax used by the passed text (for example: \"xwiki/1.0\")\n     * @return the given text rendered in the context of this document using the passed Syntax\n     * @since 4.2M1\n     */\n    public String getRenderedContentRestricted(String text, String syntaxId) throws XWikiException\n    {\n        return getRenderedContent(text, syntaxId, true);\n    }\n\n    /**\n     * Render a text in a restricted mode, where script macros are completely disabled.\n     *\n     * @param text the text to render\n     * @param syntaxId the id of the Syntax used by the passed text (for example: \"xwiki/1.0\")\n     * @param restricted see {@link DocumentDisplayerParameters#isTransformationContextRestricted}.\n     * @return the given text rendered in the context of this document using the passed Syntax\n     */\n    private String getRenderedContent(String text, String syntaxId, boolean restricted) throws XWikiException\n    {\n        // Make sure we keep using current author as passed content author\n        return this.doc.getRenderedContent(text, syntaxId, restricted, getCallerDocument(getXWikiContext()),\n            getXWikiContext());\n    }\n\n    /**\n     * @param text the text to render\n     * @param sourceSyntaxId the id of the Syntax used by the passed text (for example: \"xwiki/1.0\")\n     * @param targetSyntaxId the id of the syntax in which to render the document content\n     * @return the given text rendered in the context of this document using the passed Syntax\n     * @since 2.0M3\n     */\n    public String getRenderedContent(String text, String sourceSyntaxId, String targetSyntaxId) throws XWikiException\n    {\n        // Make sure we keep using current author as passed content author\n        return this.doc.getRenderedContent(text, sourceSyntaxId, targetSyntaxId, false,\n            getCallerDocument(getXWikiContext()), getXWikiContext());\n    }\n\n    private XWikiDocument getCallerDocument(XWikiContext xcontext)\n    {\n        XWikiDocument sdoc = (XWikiDocument) xcontext.get(\"sdoc\");\n        if (sdoc == null) {\n            sdoc = xcontext.getDoc();\n        }\n\n        return sdoc;\n    }\n\n    /**\n     * @param targetSyntax the syntax in which to render the document content\n     * @return the rendered content\n     * @throws XWikiException error when rendering content\n     */\n    public String getRenderedContent(Syntax targetSyntax) throws XWikiException\n    {\n        return this.doc.getRenderedContent(targetSyntax, getXWikiContext());\n    }\n\n    /**\n     * Get the document's content XML-escaped.\n     *\n     * @return an XML-escaped version of the content of this document.\n     */\n    public String getEscapedContent() throws XWikiException\n    {\n        return this.doc.getEscapedContent(getXWikiContext());\n    }\n\n    /**\n     * @return the archive of this document's history in string format\n     */\n    public String getArchive() throws XWikiException\n    {\n        return this.doc.getDocumentArchive(getXWikiContext()).getArchive(getXWikiContext());\n    }\n\n    /**\n     * Get the archive of this document's history. This function is accessible only if you have the programming rights.\n     *\n     * @return the archive of this document's history as an {@link XWikiDocumentArchive}.\n     */\n    public XWikiDocumentArchive getDocumentArchive() throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            return this.doc.getDocumentArchive(getXWikiContext());\n        }\n        return null;\n    }\n\n    /**\n     * @return true if the document is a new one (ie it has never been saved) or false otherwise\n     */\n    public boolean isNew()\n    {\n        return this.doc.isNew();\n    }\n\n    /**\n     * Return the relative URL of download for the the given attachment name.\n     *\n     * @param filename the name of the attachment\n     * @return A String with the URL or null if the file name is empty\n     */\n    public String getAttachmentURL(String filename)\n    {\n        return this.doc.getAttachmentURL(filename, getXWikiContext());\n    }\n\n    /**\n     * Get the relative URL of the given action for the the given attachment name.\n     *\n     * @param filename the name of the attachment.\n     * @param action what to do to the file for example \"delattachment\", \"download\" or \"downloadrev\".\n     * @return a string representation of a URL to do the given operation or null if the file name is empty\n     */\n    public String getAttachmentURL(String filename, String action)\n    {\n        return this.doc.getAttachmentURL(filename, action, getXWikiContext());\n    }\n\n    /**\n     * Get the relative URL of an action on an attachment. the given action for the the given attachment name with\n     * \"queryString\" parameters\n     *\n     * @param filename the name of the attachment.\n     * @param action what to do to the file for example \"delattachment\", \"download\" or \"downloadrev\"\n     * @param queryString parameters added to the URL, the \"rev\" parameter is used to specify a revision if using the\n     *            \"downloadrev\" action. The query string must not begin with an ? character.\n     * @return a string representation of a URL to do the given operation or null if the file name is empty\n     */\n    public String getAttachmentURL(String filename, String action, String queryString)\n    {\n        return this.doc.getAttachmentURL(filename, action, queryString, getXWikiContext());\n    }\n\n    /**\n     * Get an old revision of an attachment.\n     *\n     * @param filename the name of the attachment.\n     * @param version a revision number such as \"1.1\" or \"1.2\".\n     * @return the URL for accessing to the archive of the attachment \"filename\" at the version \"version\" or null if the\n     *         file name is empty\n     */\n    public String getAttachmentRevisionURL(String filename, String version)\n    {\n        return this.doc.getAttachmentRevisionURL(filename, version, getXWikiContext());\n    }\n\n    /**\n     * Get an old revision of an attachment.\n     *\n     * @param filename the name of the attachment.\n     * @param version a revision number such as \"1.1\" or \"1.2\".\n     * @param queryString additional query parameters to pass in the request.\n     * @return the URL for accessing to the archive of the attachment \"filename\" at the version \"version\" with the given\n     *         queryString parameters or null if the file name is empty\n     */\n    public String getAttachmentRevisionURL(String filename, String version, String queryString)\n    {\n        return this.doc.getAttachmentRevisionURL(filename, version, queryString, getXWikiContext());\n    }\n\n    /**\n     * Get the URL of this document.\n     *\n     * @return the URL to view this document, this will be a relative URL for example: /xwiki/bin/view/Main/WebHome\n     * @see #getExternalURL() for an absolute URL which can used outside of the site.\n     */\n    public String getURL()\n    {\n        return this.doc.getURL(\"view\", getXWikiContext());\n    }\n\n    /**\n     * Get the URL to do a given action on this document.\n     *\n     * @param action what to do to the document for example \"view\", \"edit\" or \"inline\".\n     * @return the URL of this document with the given action.\n     * @see #getExternalURL(String) for an absolute URL which can used outside of the site.\n     */\n    public String getURL(String action)\n    {\n        return this.doc.getURL(action, getXWikiContext());\n    }\n\n    /**\n     * Get the URL to do a given action on this document.\n     *\n     * @param action what to do to the document for example \"view\", \"edit\" or \"inline\".\n     * @param queryString parameters to pass in the request eg: {@code paramA=value1&paramB=value2}\n     * @return the URL of this document with the given action and queryString as parameters.\n     * @see #getExternalURL(String, String) for an absolute URL which can used outside of the site.\n     */\n    public String getURL(String action, String queryString)\n    {\n        return this.doc.getURL(action, queryString, getXWikiContext());\n    }\n\n    /**\n     * Get the external URL to do a given action on this document.\n     *\n     * @return the full URL of the document, sutable for use at external websites for example:\n     *         http://www.xwiki.org/xwiki/bin/view/Main/WebHome\n     * @see #getURL() for a relative URL which can only be used inside of the site.\n     */\n    public String getExternalURL()\n    {\n        return this.doc.getExternalURL(\"view\", getXWikiContext());\n    }\n\n    /**\n     * Get the external URL to do a given action on this document.\n     *\n     * @param action what to do to the document for example \"view\", \"edit\" or \"inline\".\n     * @return the URL of this document with the given action.\n     * @see #getURL() for a relative URL which can only be used inside of the site.\n     */\n    public String getExternalURL(String action)\n    {\n        return this.doc.getExternalURL(action, getXWikiContext());\n    }\n\n    /**\n     * Get the URL to do a given action on this document.\n     *\n     * @param action what to do to the document for example \"view\", \"edit\" or \"inline\".\n     * @param queryString parameters to pass in the request eg: {@code paramA=value1&paramB=value2}\n     * @return the URL of this document with the given action and queryString as parameters.\n     * @see #getURL() for a relative URL which can only be used inside of the site.\n     */\n    public String getExternalURL(String action, String queryString)\n    {\n        return this.doc.getExternalURL(action, queryString, getXWikiContext());\n    }\n\n    /**\n     * @return the relative URL of the parent document of this document\n     */\n    public String getParentURL() throws XWikiException\n    {\n        return this.doc.getParentURL(getXWikiContext());\n    }\n\n    /**\n     * @return the XClass associated to this document when the document represents an XWiki Class\n     */\n    public Class getxWikiClass()\n    {\n        BaseClass bclass = this.getDoc().getXClass();\n        if (bclass == null) {\n            return null;\n        } else {\n            return new Class(bclass, getXWikiContext());\n        }\n    }\n\n    /**\n     * @return the array of XClasses representing the objects of this document\n     */\n    public Class[] getxWikiClasses()\n    {\n        List<BaseClass> list = this.getDoc().getXClasses(getXWikiContext());\n        if (list == null) {\n            return null;\n        }\n        Class[] result = new Class[list.size()];\n        for (int i = 0; i < list.size(); i++) {\n            result[i] = new Class(list.get(i), getXWikiContext());\n        }\n        return result;\n    }\n\n    /**\n     * Creates a New XWiki Object of the given classname\n     *\n     * @param classname the classname used\n     * @return the number of the object created\n     */\n    public int createNewObject(String classname) throws XWikiException\n    {\n        int index = getDoc().createNewObject(classname, getXWikiContext());\n\n        updateAuthor();\n\n        return index;\n    }\n\n    /**\n     * Creates a New XWiki Object of the given classname\n     *\n     * @param classname the classname used\n     * @return the object created\n     */\n    public Object newObject(String classname) throws XWikiException\n    {\n        int nb = createNewObject(classname);\n        return getObject(classname, nb);\n    }\n\n    /**\n     * @return true of the document has been loaded from cache\n     */\n    public boolean isFromCache()\n    {\n        return this.doc.isFromCache();\n    }\n\n    /**\n     * @param classname the classname used\n     * @return the number of objects available for a given classname\n     */\n    public int getObjectNumbers(String classname)\n    {\n        return this.doc.getObjectNumbers(classname);\n    }\n\n    /**\n     * Get the list of all objects available in this document organized in a Map by classname\n     *\n     * @return the map of objects\n     */\n    public Map<String, Vector<Object>> getxWikiObjects()\n    {\n        Map<DocumentReference, List<BaseObject>> map = this.getDoc().getXObjects();\n        Map<String, Vector<Object>> resultmap = new HashMap<String, Vector<Object>>();\n        for (Map.Entry<DocumentReference, List<BaseObject>> entry : map.entrySet()) {\n            List<BaseObject> objects = entry.getValue();\n            if (objects != null) {\n                resultmap.put(getLocalEntityReferenceSerializer().serialize(entry.getKey()), getXObjects(objects));\n            }\n        }\n        return resultmap;\n    }\n\n    protected Vector<Object> getXObjects(List<BaseObject> objects)\n    {\n        if (objects == null) {\n            return new Vector<Object>(0);\n        }\n        Vector<Object> result = new Vector<Object>(objects.size());\n        for (BaseObject bobj : objects) {\n            if (bobj != null) {\n                result.add(newObjectApi(bobj, getXWikiContext()));\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Get the list of objects for a given classname classname\n     *\n     * @return the vector of objects\n     */\n    public Vector<Object> getObjects(String className)\n    {\n        List<BaseObject> objects = this.getDoc().getXObjects(this.doc.resolveClassReference(className));\n        return getXObjects(objects);\n    }\n\n    /**\n     * Get the first object that contains the given fieldname\n     *\n     * @param fieldname name of the field to find in the object\n     * @return the XWiki Object\n     */\n    public Object getFirstObject(String fieldname)\n    {\n        try {\n            BaseObject obj = this.getDoc().getFirstObject(fieldname, getXWikiContext());\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Get the first object of a given classname that has a field name matching the given value\n     *\n     * @param classname name of the class of the object to look for\n     * @param key name of the field to find in the object\n     * @param value value of the field to find in the object\n     * @param failover true if the first object will be given when none found\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname, String key, String value, boolean failover)\n    {\n        try {\n            BaseObject obj = this.getDoc().getObject(classname, key, value, failover);\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Select a subset of objects from a given class, filtered on a \"key = value\" criteria.\n     *\n     * @param classname The type of objects to return.\n     * @param key The name of the property used for filtering.\n     * @param value The required value.\n     * @return A Vector of {@link Object objects} matching the criteria. If no objects are found, or if the key is an\n     *         empty String, then an empty vector is returned.\n     */\n    public Vector<Object> getObjects(String classname, String key, String value)\n    {\n        Vector<Object> result = new Vector<Object>();\n        if (StringUtils.isBlank(key) || value == null) {\n            return getObjects(classname);\n        }\n        try {\n            Vector<BaseObject> allObjects = this.getDoc().getObjects(classname);\n            if (allObjects == null || allObjects.size() == 0) {\n                return result;\n            } else {\n                for (BaseObject obj : allObjects) {\n                    if (obj != null) {\n                        BaseProperty prop = (BaseProperty) obj.get(key);\n                        if (prop == null || prop.getValue() == null) {\n                            continue;\n                        }\n                        if (value.equals(prop.getValue().toString())) {\n                            result.add(newObjectApi(obj, getXWikiContext()));\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n        }\n        return result;\n    }\n\n    /**\n     * Get the first object of a given classname that has a field name matching the given value When none found this\n     * method will return null\n     *\n     * @param classname name of the class of the object to look for\n     * @param key name of the field to find in the object\n     * @param value value of the field to find in the object\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname, String key, String value)\n    {\n        try {\n            BaseObject obj = this.getDoc().getObject(classname, key, value);\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Get the first object matching the given classname\n     *\n     * @param classname name of the class of the object to look for\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname)\n    {\n        return getObject(classname, false);\n    }\n\n    /**\n     * get the object of the given className. If there is no object of this className and the create parameter at true,\n     * the object is created.\n     *\n     * @param classname name of the class of the object to look for\n     * @param create true of the object should be created when it does not exist\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname, boolean create)\n    {\n        try {\n            BaseObject obj = getDoc().getObject(classname, create, getXWikiContext());\n\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Get the object matching the given classname and given object number\n     *\n     * @param classname name of the class of the object\n     * @param nb number of the object\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname, int nb)\n    {\n        try {\n            BaseObject obj = this.getDoc().getObject(classname, nb);\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * @param objectReference the object reference\n     * @return the XWiki object from this document that matches the specified object reference\n     * @since 12.3RC1\n     */\n    public Object getObject(ObjectReference objectReference)\n    {\n        try {\n            BaseObject obj = this.getDoc().getXObject(objectReference);\n            return obj == null ? null : newObjectApi(obj, getXWikiContext());\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    private Object newObjectApi(BaseObject obj, XWikiContext context)\n    {\n        return obj.newObjectApi(obj, context);\n    }\n\n    public String getXMLContent() throws XWikiException\n    {\n        String xml = this.doc.getXMLContent(getXWikiContext());\n        return getXWikiContext().getUtil().substitute(\"s/<email>.*?<\\\\/email>/<email>********<\\\\/email>/goi\",\n            getXWikiContext().getUtil().substitute(\"s/<password>.*?<\\\\/password>/<password>********<\\\\/password>/goi\",\n                xml));\n    }\n\n    public String toXML() throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            return this.doc.toXML(getXWikiContext());\n        } else {\n            return \"\";\n        }\n    }\n\n    public org.dom4j.Document toXMLDocument() throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            return this.doc.toXMLDocument(getXWikiContext());\n        } else {\n            return null;\n        }\n    }\n\n    public Version[] getRevisions() throws XWikiException\n    {\n        return this.doc.getRevisions(getXWikiContext());\n    }\n\n    public String[] getRecentRevisions() throws XWikiException\n    {\n        return this.doc.getRecentRevisions(5, getXWikiContext());\n    }\n\n    public String[] getRecentRevisions(int nb) throws XWikiException\n    {\n        return this.doc.getRecentRevisions(nb, getXWikiContext());\n    }\n\n    /**\n     * Get document versions matching criterias like author, minimum creation date, etc.\n     *\n     * @param criteria criteria used to match versions\n     * @return a list of matching versions\n     */\n    public List<String> getRevisions(RevisionCriteria criteria) throws XWikiException\n    {\n        return this.doc.getRevisions(criteria, this.context);\n    }\n\n    /**\n     * Get information about a document version : author, date, etc.\n     *\n     * @param version the version you want to get information about\n     * @return a new RevisionInfo object\n     */\n    public RevisionInfo getRevisionInfo(String version) throws XWikiException\n    {\n        return new RevisionInfo(this.doc.getRevisionInfo(version, getXWikiContext()), getXWikiContext());\n    }\n\n    public List<Attachment> getAttachmentList()\n    {\n        List<Attachment> apis = new ArrayList<Attachment>();\n        for (XWikiAttachment attachment : this.getDoc().getAttachmentList()) {\n            apis.add(new Attachment(this, attachment, getXWikiContext()));\n        }\n        return apis;\n    }\n\n    public Vector<Object> getComments()\n    {\n        return getComments(true);\n    }\n\n    public Vector<Object> getComments(boolean asc)\n    {\n        return getXObjects(this.getDoc().getComments(asc));\n    }\n\n    /**\n     * Setting the current object to the given object. Following calls to display() will use this object as the\n     * reference for finding properties.\n     *\n     * @param object Object to use as a reference for further display calls\n     */\n    public void use(Object object)\n    {\n        this.currentObj = object;\n    }\n\n    /**\n     * Setting the current object to the first object of the given class name. Following calls to display() will use\n     * this object as the reference for finding properties.\n     *\n     * @param className class used to find the first object to use as the reference for display calls\n     */\n    public void use(String className)\n    {\n        this.currentObj = getObject(className);\n    }\n\n    /**\n     * Setting the current object to the object of the given class name and the given number. Following calls to\n     * display() will use this object as the reference for finding properties.\n     *\n     * @param className class used to find the object to use as the reference for display calls\n     * @param nb number of the object to use as the reference for display calls\n     */\n    public void use(String className, int nb)\n    {\n        this.currentObj = getObject(className, nb);\n    }\n\n    /**\n     * @return the className of the current active object use for display calls.\n     */\n    public String getActiveClass()\n    {\n        if (this.currentObj == null) {\n            return null;\n        } else {\n            return this.currentObj.getName();\n        }\n    }\n\n    /**\n     * Displays the pretty name of the given field. This function uses the active object or will find the first object\n     * that has the given field.\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname)\n    {\n        if (this.currentObj == null) {\n            return this.doc.displayPrettyName(fieldname, getXWikiContext());\n        } else {\n            return this.doc.displayPrettyName(fieldname, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the pretty name of the given field of the given object.\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param obj Object to find the class to display the pretty name of\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.displayPrettyName(fieldname, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the pretty name of the given field. This function uses the active object or will find the first object\n     * that has the given field. with the optional addition of a mandatory field.\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param showMandatory true to display a mandatory sign\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, boolean showMandatory)\n    {\n        if (this.currentObj == null) {\n            return this.doc.displayPrettyName(fieldname, showMandatory, getXWikiContext());\n        } else {\n            return this.doc.displayPrettyName(fieldname, showMandatory, this.currentObj.getBaseObject(),\n                getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the pretty name of the given field of the given object. with the optional addition of a mandatory field.\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param obj Object to find the class to display the pretty name of\n     * @param showMandatory true to display a mandatory sign\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, boolean showMandatory, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.displayPrettyName(fieldname, showMandatory, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the pretty name of the given field. This function uses the active object or will find the first object\n     * that has the given field. with the optional addition of a mandatory field before or after the field\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param showMandatory true to display a mandatory sign\n     * @param before true if the mandatory sign should be before the field\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, boolean showMandatory, boolean before)\n    {\n        if (this.currentObj == null) {\n            return this.doc.displayPrettyName(fieldname, showMandatory, before, getXWikiContext());\n        } else {\n            return this.doc.displayPrettyName(fieldname, showMandatory, before, this.currentObj.getBaseObject(),\n                getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the pretty name of the given field of the given object. with the optional addition of a mandatory field\n     * before or after the field\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param showMandatory true to display a mandatory sign\n     * @param before true if the mandatory sign should be before the field\n     * @param obj Object to find the class to display the pretty name of\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, boolean showMandatory, boolean before, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.displayPrettyName(fieldname, showMandatory, before, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the tooltip of the given field. This function uses the active object or will find the first object that\n     * has the given field.\n     *\n     * @param fieldname fieldname to display the tooltip of\n     * @return the tooltip display of the field.\n     */\n    public String displayTooltip(String fieldname)\n    {\n        if (this.currentObj == null) {\n            return this.doc.displayTooltip(fieldname, getXWikiContext());\n        } else {\n            return this.doc.displayTooltip(fieldname, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the tooltip of the given field of the given object.\n     *\n     * @param fieldname fieldname to display the tooltip of\n     * @param obj Object to find the class to display the tooltip of\n     * @return the tooltip display of the field.\n     */\n    public String displayTooltip(String fieldname, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.displayTooltip(fieldname, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the given field. The display mode will be decided depending on page context (edit or inline context will\n     * display in edit, view context in view) This function uses the active object or will find the first object that\n     * has the given field. This function can return html inside and html macro\n     *\n     * @param fieldname fieldname to display\n     * @return the display of the field.\n     */\n    public String display(String fieldname)\n    {\n        if (this.currentObj == null) {\n            return this.doc.display(fieldname, getXWikiContext());\n        } else {\n            return this.doc.display(fieldname, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the given field in the given mode. This function uses the active object or will find the first object\n     * that has the given field. This function can return html inside and html macro\n     *\n     * @param fieldname fieldname to display\n     * @param mode display mode to use (view, edit, hidden, search)\n     * @return the display of the field.\n     */\n    public String display(String fieldname, String mode)\n    {\n        if (this.currentObj == null) {\n            return this.doc.display(fieldname, mode, getXWikiContext());\n        } else {\n            return this.doc.display(fieldname, mode, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the given field in the given mode. This function uses the active object or will find the first object\n     * that has the given field. This function can return html inside and html macro A given prefix is added to the\n     * field names when these are forms.\n     *\n     * @param fieldname fieldname to display\n     * @param mode display mode to use (view, edit, hidden, search)\n     * @param prefix prefix to use for the form names\n     * @return the display of the field.\n     */\n    public String display(String fieldname, String mode, String prefix)\n    {\n        if (this.currentObj == null) {\n            return this.doc.display(fieldname, mode, prefix, getXWikiContext());\n        } else {\n            return this.doc.display(fieldname, mode, prefix, this.currentObj.getBaseObject(), getSyntaxId(),\n                getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the given field of the given object The display mode will be decided depending on page context (edit or\n     * inline context will display in edit, view context in view) This function can return html inside and html macro\n     *\n     * @param fieldname fieldname to display\n     * @param obj object from which to take the field\n     * @return the display of the field.\n     */\n    public String display(String fieldname, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.display(fieldname, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the given field of the given object using the given mode and syntax rendering The display mode will be\n     * decided depending on page context (edit or inline context will display in edit, view context in view) This\n     * function can return html inside and html macro\n     *\n     * @param fieldname the name of the field to display\n     * @param type the type of the field to display\n     * @param obj the object containing the field to display\n     * @param wrappingSyntaxId the syntax of the content in which the result will be included. This to take care of some\n     *            escaping depending of the syntax.\n     * @return the rendered field\n     */\n    public String display(String fieldname, String type, Object obj, String wrappingSyntaxId)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.display(fieldname, type, obj.getBaseObject(), wrappingSyntaxId, getXWikiContext());\n    }\n\n    /**\n     * Displays the given field of the given object in the given mode. This function can return html inside and html\n     * macro\n     *\n     * @param fieldname fieldname to display\n     * @param mode display mode to use (view, edit, hidden, search)\n     * @param obj the object containing the field to display\n     * @return the display of the field.\n     */\n    public String display(String fieldname, String mode, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.display(fieldname, mode, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the given field of the given object in the given mode. This function can return html inside and html\n     * macro A given prefix is added to the field names when these are forms.\n     *\n     * @param fieldname fieldname to display\n     * @param mode display mode to use (view, edit, hidden, search)\n     * @param prefix prefix to use for the form names\n     * @param obj the object containing the field to display\n     * @return the display of the field.\n     */\n    public String display(String fieldname, String mode, String prefix, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.display(fieldname, mode, prefix, obj.getBaseObject(), getSyntaxId(), getXWikiContext());\n    }\n\n    public String displayForm(String className, String header, String format)\n    {\n        return this.doc.displayForm(className, header, format, getXWikiContext());\n    }\n\n    public String displayForm(String className, String header, String format, boolean linebreak)\n    {\n        return this.doc.displayForm(className, header, format, linebreak, getXWikiContext());\n    }\n\n    public String displayForm(String className)\n    {\n        return this.doc.displayForm(className, getXWikiContext());\n    }\n\n    public String displayRendered(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object)\n        throws XWikiException\n    {\n        if ((pclass == null) || (object == null)) {\n            return \"\";\n        }\n        return this.doc.displayRendered(pclass.getBasePropertyClass(), prefix, object.getCollection(),\n            getXWikiContext());\n    }\n\n    public String displayView(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object)\n    {\n        if ((pclass == null) || (object == null)) {\n            return \"\";\n        }\n        return this.doc.displayView(pclass.getBasePropertyClass(), prefix, object.getCollection(), getXWikiContext());\n    }\n\n    public String displayEdit(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object)\n    {\n        if ((pclass == null) || (object == null)) {\n            return \"\";\n        }\n        return this.doc.displayEdit(pclass.getBasePropertyClass(), prefix, object.getCollection(), getXWikiContext());\n    }\n\n    public String displayHidden(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object)\n    {\n        if ((pclass == null) || (object == null)) {\n            return \"\";\n        }\n        return this.doc.displayHidden(pclass.getBasePropertyClass(), prefix, object.getCollection(), getXWikiContext());\n    }\n\n    public List<String> getIncludedPages()\n    {\n        return this.doc.getIncludedPages(getXWikiContext());\n    }\n\n    public List<String> getIncludedMacros()\n    {\n        return this.doc.getIncludedMacros(getXWikiContext());\n    }\n\n    public List<String> getLinkedPages()\n    {\n        return new ArrayList<String>(this.doc.getUniqueLinkedPages(getXWikiContext()));\n    }\n\n    public Attachment getAttachment(String filename)\n    {\n        XWikiAttachment attach = this.getDoc().getAttachment(filename);\n        if (attach == null) {\n            return null;\n        } else {\n            return new Attachment(this, attach, getXWikiContext());\n        }\n    }\n\n    public List<Delta> getContentDiff(Document origdoc, Document newdoc)\n        throws XWikiException, DifferentiationFailedException\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getContentDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getContentDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getContentDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_CONTENT_ERROR,\n                    \"Error while making content diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<Delta> getXMLDiff(Document origdoc, Document newdoc)\n        throws XWikiException, DifferentiationFailedException\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getXMLDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getXMLDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getXMLDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_XML_ERROR,\n                    \"Error while making xml diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<Delta> getRenderedContentDiff(Document origdoc, Document newdoc)\n        throws XWikiException, DifferentiationFailedException\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getRenderedContentDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getRenderedContentDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getRenderedContentDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_RENDERED_ERROR,\n                    \"Error while making rendered diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<MetaDataDiff> getMetaDataDiff(Document origdoc, Document newdoc) throws XWikiException\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getMetaDataDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getMetaDataDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getMetaDataDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_METADATA_ERROR,\n                    \"Error while making meta data diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<List<ObjectDiff>> getObjectDiff(Document origdoc, Document newdoc)\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getObjectDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getObjectDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getObjectDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_OBJECT_ERROR,\n                    \"Error while making meta object diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<List<ObjectDiff>> getClassDiff(Document origdoc, Document newdoc)\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getClassDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getClassDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getClassDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_CLASS_ERROR,\n                    \"Error while making class diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<AttachmentDiff> getAttachmentDiff(Document origdoc, Document newdoc)\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return wrapAttachmentDiff(this.doc.getAttachmentDiff(new XWikiDocument(newdoc.getDocumentReference()),\n                    newdoc.doc, getXWikiContext()));\n            }\n            if (newdoc == null) {\n                return wrapAttachmentDiff(this.doc.getAttachmentDiff(origdoc.doc,\n                    new XWikiDocument(origdoc.getDocumentReference()), getXWikiContext()));\n            }\n\n            return wrapAttachmentDiff(this.doc.getAttachmentDiff(origdoc.doc, newdoc.doc, getXWikiContext()));\n        } catch (Exception e) {\n            java.lang.Object[] args = { (origdoc != null) ? origdoc.getFullName() : null,\n            (origdoc != null) ? origdoc.getVersion() : null, (newdoc != null) ? newdoc.getVersion() : null };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_ATTACHMENT_ERROR,\n                    \"Error while making attachment diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    private List<AttachmentDiff> wrapAttachmentDiff(List<com.xpn.xwiki.doc.AttachmentDiff> diffs)\n    {\n        List<AttachmentDiff> safeAttachmentDiffs = new ArrayList<>();\n        for (com.xpn.xwiki.doc.AttachmentDiff diff : diffs) {\n            safeAttachmentDiffs.add(new AttachmentDiff(diff, getXWikiContext()));\n        }\n        return safeAttachmentDiffs;\n    }\n\n    public List<Delta> getLastChanges() throws XWikiException, DifferentiationFailedException\n    {\n        return this.doc.getLastChanges(getXWikiContext());\n    }\n\n    /**\n     * Get statistics about the number of request for the current page during the current month.\n     *\n     * @param action the type of request for which to retrieve statistics: view, edit...\n     * @return the statistics object holding information for this document and the current month\n     */\n    public DocumentStats getCurrentMonthPageStats(String action)\n    {\n        Scope scope = ScopeFactory.createPageScope(this.getFullName());\n        Range range = RangeFactory.ALL;\n        Period period = PeriodFactory.getCurrentMonth();\n        XWikiStatsService statisticsService = getXWikiContext().getWiki().getStatsService(getXWikiContext());\n        List<DocumentStats> stats = statisticsService.getDocumentStatistics(action, scope, period, range, this.context);\n        if (stats.size() > 0) {\n            return stats.get(0);\n        }\n        return new DocumentStats();\n    }\n\n    /**\n     * Get statistics about the number of request for the current space during the current month.\n     *\n     * @param action the type of request for which to retrieve statistics: view, edit...\n     * @return the statistics object holding information for the document's space and the current month\n     */\n    public DocumentStats getCurrentMonthSpaceStats(String action)\n    {\n        Scope scope = ScopeFactory.createSpaceScope(this.doc.getSpace(), false);\n        Range range = RangeFactory.ALL;\n        Period period = PeriodFactory.getCurrentMonth();\n        XWikiStatsService statisticsService = getXWikiContext().getWiki().getStatsService(getXWikiContext());\n        List<DocumentStats> stats = statisticsService.getDocumentStatistics(action, scope, period, range, this.context);\n        if (stats.size() > 0) {\n            return stats.get(0);\n        }\n        return new DocumentStats();\n    }\n\n    /**\n     * Get referer statistics for the current document during the current month.\n     *\n     * @return a list of referer statistics for the document's space\n     */\n    public List<RefererStats> getCurrentMonthRefStats()\n    {\n        Scope scope = ScopeFactory.createPageScope(this.getFullName());\n        Range range = RangeFactory.ALL;\n        Period period = PeriodFactory.getCurrentMonth();\n        XWikiStatsService statisticsService = getXWikiContext().getWiki().getStatsService(getXWikiContext());\n        List<RefererStats> stats = statisticsService.getRefererStatistics(\"\", scope, period, range, this.context);\n        return stats;\n    }\n\n    public boolean checkAccess(String right)\n    {\n        try {\n            return getXWikiContext().getWiki().checkAccess(right, this.doc, getXWikiContext());\n        } catch (XWikiException e) {\n            return false;\n        }\n    }\n\n    public boolean hasAccessLevel(String level)\n    {\n        try {\n            return getXWikiContext().getWiki().getRightService().hasAccessLevel(level, getXWikiContext().getUser(),\n                this.getPrefixedFullName(), getXWikiContext());\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    @Override\n    public boolean hasAccessLevel(String level, String user)\n    {\n        try {\n            return getXWikiContext().getWiki().getRightService().hasAccessLevel(level, user, this.getPrefixedFullName(),\n                getXWikiContext());\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    /**\n     * Verifies if the user identified by {@code userReference} has the access identified by {@code right} on this\n     * document.\n     * \n     * @param right the right to check\n     * @param userReference the user to check the right for\n     * @return {@code true} if the user has the specified right on this document, {@code false} otherwise\n     * @since 10.6RC1\n     */\n    public boolean hasAccess(Right right, DocumentReference userReference)\n    {\n        return getAuthorizationManager().hasAccess(right, userReference, getDocumentReference());\n    }\n\n    public boolean getLocked()\n    {\n        try {\n            XWikiLock lock = this.doc.getLock(getXWikiContext());\n            if (lock != null && !getXWikiContext().getUser().equals(lock.getUserName())) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public String getLockingUser()\n    {\n        try {\n            XWikiLock lock = this.doc.getLock(getXWikiContext());\n            if (lock != null && !getXWikiContext().getUser().equals(lock.getUserName())) {\n                return lock.getUserName();\n            } else {\n                return \"\";\n            }\n        } catch (XWikiException e) {\n            return \"\";\n        }\n    }\n\n    public Date getLockingDate()\n    {\n        try {\n            XWikiLock lock = this.doc.getLock(getXWikiContext());\n            if (lock != null && !getXWikiContext().getUser().equals(lock.getUserName())) {\n                return lock.getDate();\n            } else {\n                return null;\n            }\n        } catch (XWikiException e) {\n            return null;\n        }\n    }\n\n    public java.lang.Object get(String classOrFieldName)\n    {\n        if (this.currentObj != null) {\n            return this.doc.display(classOrFieldName, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n        BaseObject object = this.doc.getFirstObject(classOrFieldName, getXWikiContext());\n        if (object != null) {\n            return this.doc.display(classOrFieldName, object, getXWikiContext());\n        }\n        return this.getDoc().getObject(classOrFieldName);\n    }\n\n    public java.lang.Object getValue(String fieldName)\n    {\n        Object object;\n        if (this.currentObj == null) {\n            object = new Object(this.getDoc().getFirstObject(fieldName, getXWikiContext()), getXWikiContext());\n        } else {\n            object = this.currentObj;\n        }\n        return getValue(fieldName, object);\n    }\n\n    public java.lang.Object getValue(String fieldName, Object object)\n    {\n        if (object != null) {\n            return object.getValue(fieldName);\n        }\n\n        return null;\n    }\n\n    public String getTextArea()\n    {\n        return com.xpn.xwiki.XWiki.getTextArea(this.doc.getContent(), getXWikiContext());\n    }\n\n    /**\n     * Returns data needed for a generation of Table of Content for this document.\n     *\n     * @param init an intial level where the TOC generation should start at\n     * @param max maximum level TOC is generated for\n     * @param numbered if should generate numbering for headings\n     * @return a map where an heading (title) ID is the key and value is another map with two keys: text, level and\n     *         numbering\n     */\n    public Map<String, Map<String, java.lang.Object>> getTOC(int init, int max, boolean numbered)\n    {\n        getXWikiContext().put(\"tocNumbered\", new Boolean(numbered));\n        return TOCGenerator.generateTOC(getContent(), init, max, numbered, getXWikiContext());\n    }\n\n    public String getTags()\n    {\n        return this.doc.getTags(getXWikiContext());\n    }\n\n    public List<String> getTagList()\n    {\n        return this.getDoc().getTagsList(getXWikiContext());\n    }\n\n    public List<String> getTagsPossibleValues()\n    {\n        return this.doc.getTagsPossibleValues(getXWikiContext());\n    }\n\n    public void insertText(String text, String marker) throws XWikiException\n    {\n        if (hasAccessLevel(\"edit\")) {\n            getDoc().insertText(text, marker, getXWikiContext());\n\n            updateAuthor();\n            updateContentAuthor();\n        }\n    }\n\n    @Override\n    public boolean equals(java.lang.Object arg0)\n    {\n        if (!(arg0 instanceof Document)) {\n            return false;\n        }\n        Document d = (Document) arg0;\n        return d.getXWikiContext().equals(getXWikiContext()) && this.doc.equals(d.doc);\n    }\n\n    /**\n     * Check if the passed one is the one wrapped by this {@link Document}.\n     * \n     * @param document the document to compare\n     * @return true if passed document is the wrapped one\n     * @since 8.3M1\n     */\n    public boolean same(XWikiDocument document)\n    {\n        return document == this.doc || document == this.initialDoc;\n    }\n\n    public List<String> getBacklinks() throws XWikiException\n    {\n        return this.doc.getBackLinkedPages(getXWikiContext());\n    }\n\n    /**\n     * Retrieve the references of the page containing a link to the current page.\n     *\n     * @return a list of references of the page containing a link to the current page.\n     * @throws XWikiException in case of problem to perform the query.\n     * @since 12.5RC1\n     */\n    @Unstable\n    public List<DocumentReference> getBackLinkedReferences() throws XWikiException\n    {\n        return this.doc.getBackLinkedReferences(getXWikiContext());\n    }\n\n    public List<XWikiLink> getLinks() throws XWikiException\n    {\n        return new ArrayList<XWikiLink>(this.doc.getUniqueWikiLinkedPages(getXWikiContext()));\n    }\n\n    /**\n     * Get the top sections contained in the document.\n     * <p>\n     * The section are filtered by xwiki.section.depth property on the maximum depth of the sections to return. This\n     * method is usually used to get \"editable\" sections.\n     *\n     * @return the sections in the current document\n     */\n    public List<DocumentSection> getSections() throws XWikiException\n    {\n        return this.doc.getSections();\n    }\n\n    /**\n     * Get document children. Children are documents with the current document as parent.\n     *\n     * @return The list of children for the current document.\n     * @since 1.8 Milestone 2\n     */\n    public List<String> getChildren() throws XWikiException\n    {\n        return this.doc.getChildren(getXWikiContext());\n    }\n\n    /**\n     * Get document children references. Children are documents with the current document as parent.\n     * @return The list of children for the current document.\n     * @throws XWikiException in case of problem to query the children.\n     * @since 12.5RC1\n     */\n    @Unstable\n    public List<DocumentReference> getChildrenReferences() throws XWikiException\n    {\n        return this.doc.getChildrenReferences(getXWikiContext());\n    }\n\n    /**\n     * Get document children. Children are documents with the current document as parent. Where a document has a large\n     * number of children, one may desire to return a certain number of children (nb) and skip some number (start) of\n     * the first results.\n     *\n     * @param nb The number of results to return.\n     * @param start The number of results to skip before we begin returning results.\n     * @return The list of children for the current document.\n     */\n    public List<String> getChildren(int nb, int start) throws XWikiException\n    {\n        return this.doc.getChildren(nb, start, getXWikiContext());\n    }\n\n    /**\n     * Gets the default edit mode for this document. An edit mode (other than the default \"edit\") can be enforced by\n     * creating an {@code XWiki.EditModeClass} object in the current document, with the appropriate value for the\n     * defaultEditMode property, or by adding this object in a sheet included by the document. This function also falls\n     * back on the old {@code SheetClass}, deprecated since 3.1M2, which can be attached to included documents to\n     * specify that the current document should be edited inline.\n     *\n     * @return the default edit mode for this document (\"edit\" or \"inline\" usually)\n     * @throws XWikiException since XWiki 6.3M1 it's not used anymore and \"edit\" is returned in case of error, with an\n     *             error log\n     */\n    public String getDefaultEditMode() throws XWikiException\n    {\n        return this.doc.getDefaultEditMode(getXWikiContext());\n    }\n\n    public String getDefaultEditURL() throws XWikiException\n    {\n        return this.doc.getDefaultEditURL(getXWikiContext());\n    }\n\n    public String getEditURL(String action, String mode) throws XWikiException\n    {\n        return this.doc.getEditURL(action, mode, getXWikiContext());\n    }\n\n    public String getEditURL(String action, String mode, String locale)\n    {\n        return this.doc.getEditURL(action, mode, locale, getXWikiContext());\n    }\n\n    public boolean isCurrentUserCreator()\n    {\n        return this.doc.isCurrentUserCreator(getXWikiContext());\n    }\n\n    public boolean isCurrentUserPage()\n    {\n        return this.doc.isCurrentUserPage(getXWikiContext());\n    }\n\n    public boolean isCurrentLocalUserPage()\n    {\n        return this.doc.isCurrentLocalUserPage(getXWikiContext());\n    }\n\n    public boolean isCreator(String username)\n    {\n        return this.doc.isCreator(username);\n    }\n\n    public void set(String fieldname, java.lang.Object value)\n    {\n        Object obj;\n        if (this.currentObj != null) {\n            obj = this.currentObj;\n        } else {\n            obj = getFirstObject(fieldname);\n        }\n        set(fieldname, value, obj);\n    }\n\n    public void set(String fieldname, java.lang.Object value, Object obj)\n    {\n        if (obj == null) {\n            return;\n        }\n        obj.set(fieldname, value);\n    }\n\n    public void setTitle(String title)\n    {\n        getDoc().setTitle(title);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    public void setCustomClass(String customClass)\n    {\n        getDoc().setCustomClass(customClass);\n\n        updateAuthor();\n    }\n\n    public void setParent(String parent)\n    {\n        getDoc().setParent(parent);\n\n        updateAuthor();\n    }\n\n    private void updateContentAuthor()\n    {\n        // Temporary set as content author of the document the current script author (until the document is saved)\n        XWikiContext xcontext = getXWikiContext();\n        getDoc().setContentAuthorReference(xcontext.getAuthorReference());\n    }\n\n    private void updateAuthor()\n    {\n        // Temporary set as author of the document the current script author (until the document is saved)\n        XWikiContext xcontext = getXWikiContext();\n        getDoc().setAuthorReference(xcontext.getAuthorReference());\n    }\n\n    public void setContent(String content)\n    {\n        getDoc().setContent(content);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    /**\n     * @param content the content as XDOM\n     * @throws XWikiException when failing to convert the XDOM to String content\n     * @since 7.0RC1\n     */\n    public void setContent(XDOM content) throws XWikiException\n    {\n        getDoc().setContent(content);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    /**\n     * @param syntax the Syntax representing the syntax used for the current document's content.\n     * @since 2.3M1\n     */\n    public void setSyntax(Syntax syntax)\n    {\n        getDoc().setSyntax(syntax);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    /**\n     * @param syntaxId the Syntax id representing the syntax used for the current document. For example \"xwiki/1.0\"\n     *            represents the first version XWiki syntax while \"xwiki/2.0\" represents version 2.0 of the XWiki\n     *            Syntax.\n     */\n    public void setSyntaxId(String syntaxId)\n    {\n        getDoc().setSyntaxId(syntaxId);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    public void setDefaultTemplate(String dtemplate)\n    {\n        getDoc().setDefaultTemplate(dtemplate);\n\n        updateAuthor();\n    }\n\n    public void setComment(String comment)\n    {\n        getDoc().setComment(comment);\n    }\n\n    public void setMinorEdit(boolean isMinor)\n    {\n        getDoc().setMinorEdit(isMinor);\n    }\n\n    public void save() throws XWikiException\n    {\n        save(\"\", false);\n    }\n\n    public void save(String comment) throws XWikiException\n    {\n        save(comment, false);\n    }\n\n    public void save(String comment, boolean minorEdit) throws XWikiException\n    {\n        if (hasAccessLevel(\"edit\")) {\n            // If the current author does not have PR don't let it set current user as author of the saved document\n            // since it can lead to right escalation\n            if (hasProgrammingRights()) {\n                saveDocument(comment, minorEdit);\n            } else {\n                saveAsAuthor(comment, minorEdit);\n            }\n        } else {\n            java.lang.Object[] args = {getDefaultEntityReferenceSerializer().serialize(getDocumentReference())};\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied in edit mode on document {0}\", null, args);\n        }\n    }\n\n    public void saveWithProgrammingRights() throws XWikiException\n    {\n        saveWithProgrammingRights(\"\", false);\n    }\n\n    public void saveWithProgrammingRights(String comment) throws XWikiException\n    {\n        saveWithProgrammingRights(comment, false);\n    }\n\n    public void saveWithProgrammingRights(String comment, boolean minorEdit) throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            // The rights check above is generic, but the current method is a save operation, thus it should not be\n            // performed if the document's wiki is in read only mode.\n            XWikiContext context = getXWikiContext();\n            String currentWikiId = context.getWikiId();\n            try {\n                // Make sure we check the current document's wiki and not the current context's wiki.\n                context.setWikiId(getWiki());\n\n                if (!context.getWiki().isReadOnly()) {\n                    saveDocument(comment, minorEdit, false);\n                } else {\n                    java.lang.Object[] args =\n                        { getDefaultEntityReferenceSerializer().serialize(getDocumentReference()), getWiki() };\n                    throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS,\n                        XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                        \"Access denied in edit mode on document [{0}]. The wiki [{1}] is in read only mode.\", null,\n                        args);\n                }\n            } finally {\n                // Restore the context wiki.\n                context.setWikiId(currentWikiId);\n            }\n        } else {\n            java.lang.Object[] args = { this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied with no programming rights document {0}\", null, args);\n        }\n    }\n\n    /**\n     * Save the document if the current author of the script calling this method has permission to do so. The author of\n     * this document is also set to the said author.\n     *\n     * @throws XWikiException if script author is not allowed to save the document or if save operation fails.\n     * @since 2.3M2\n     */\n    public void saveAsAuthor() throws XWikiException\n    {\n        saveAsAuthor(\"\", false);\n    }\n\n    /**\n     * Save the document if the current author of the script calling this method has permission to do so. The author of\n     * this document is also set to the said author.\n     *\n     * @param comment The comment to display in document history (what did you change in the document)\n     * @throws XWikiException if script author is not allowed to save the document or if save operation fails.\n     * @since 2.3M2\n     */\n    public void saveAsAuthor(String comment) throws XWikiException\n    {\n        saveAsAuthor(comment, false);\n    }\n\n    /**\n     * Save the document if the current author of the script calling this method has permission to do so. The author of\n     * this document is also set to the said author.\n     *\n     * @param comment The comment to display in document history (what did you change in the document)\n     * @param minorEdit Set true to advance the document version number by 0.1 or false to advance version to the next\n     *            integer + 0.1 eg: 25.1\n     * @throws XWikiException if script author is not allowed to save the document or if save operation fails.\n     * @since 2.3M2\n     */\n    public void saveAsAuthor(String comment, boolean minorEdit) throws XWikiException\n    {\n        XWikiContext xcontext = getXWikiContext();\n\n        DocumentReference author = getEffectiveAuthorReference();\n        if (hasAccess(Right.EDIT, author)) {\n            DocumentReference currentUser = xcontext.getUserReference();\n            try {\n                xcontext.setUserReference(author);\n\n                saveDocument(comment, minorEdit);\n            } finally {\n                xcontext.setUserReference(currentUser);\n            }\n        } else {\n            java.lang.Object[] args = { author, xcontext.getDoc(), getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied; user {0}, acting through script in document {1} cannot save document {2}\", null, args);\n        }\n    }\n\n    protected void saveDocument(String comment, boolean minorEdit) throws XWikiException\n    {\n        saveDocument(comment, minorEdit, true);\n    }\n\n    private void saveDocument(String comment, boolean minorEdit, boolean checkSaving) throws XWikiException\n    {\n        XWikiDocument doc = getDoc();\n\n        DocumentReference currentUserReference = getXWikiContext().getUserReference();\n\n        doc.setAuthorReference(currentUserReference);\n\n        if (doc.isNew()) {\n            doc.setCreatorReference(currentUserReference);\n        }\n\n        if (checkSaving) {\n            // Make sure the user is allowed to make this modification\n            getXWikiContext().getWiki().checkSavingDocument(doc.getAuthorReference(), doc, comment, minorEdit,\n                getXWikiContext());\n        }\n\n        getXWikiContext().getWiki().saveDocument(doc, comment, minorEdit, getXWikiContext());\n        this.initialDoc = this.doc;\n    }\n\n    public com.xpn.xwiki.api.Object addObjectFromRequest() throws XWikiException\n    {\n        // Call to getDoc() ensures that we are working on a clone()\n        com.xpn.xwiki.api.Object obj =\n            new com.xpn.xwiki.api.Object(getDoc().addXObjectFromRequest(getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public com.xpn.xwiki.api.Object addObjectFromRequest(String className) throws XWikiException\n    {\n        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object(\n            getDoc().addObjectFromRequest(className, getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public List<Object> addObjectsFromRequest(String className) throws XWikiException\n    {\n        return addObjectsFromRequest(className, \"\");\n    }\n\n    public com.xpn.xwiki.api.Object addObjectFromRequest(String className, String prefix) throws XWikiException\n    {\n        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object(\n            getDoc().addObjectFromRequest(className, prefix, getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public List<Object> addObjectsFromRequest(String className, String prefix) throws XWikiException\n    {\n        List<BaseObject> objs = getDoc().addObjectsFromRequest(className, prefix, getXWikiContext());\n        List<Object> wrapped = new ArrayList<Object>();\n        for (BaseObject object : objs) {\n            wrapped.add(new com.xpn.xwiki.api.Object(object, getXWikiContext()));\n        }\n\n        updateAuthor();\n\n        return wrapped;\n    }\n\n    public com.xpn.xwiki.api.Object updateObjectFromRequest(String className) throws XWikiException\n    {\n        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object(\n            getDoc().updateObjectFromRequest(className, getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public List<Object> updateObjectsFromRequest(String className) throws XWikiException\n    {\n        return updateObjectsFromRequest(className, \"\");\n    }\n\n    public com.xpn.xwiki.api.Object updateObjectFromRequest(String className, String prefix) throws XWikiException\n    {\n        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object(\n            getDoc().updateObjectFromRequest(className, prefix, getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public List<Object> updateObjectsFromRequest(String className, String prefix) throws XWikiException\n    {\n        List<BaseObject> objs = getDoc().updateObjectsFromRequest(className, prefix, getXWikiContext());\n        List<Object> wrapped = new ArrayList<Object>();\n        for (BaseObject object : objs) {\n            wrapped.add(new com.xpn.xwiki.api.Object(object, getXWikiContext()));\n        }\n\n        updateAuthor();\n\n        return wrapped;\n    }\n\n    public boolean isAdvancedContent()\n    {\n        return this.doc.isAdvancedContent();\n    }\n\n    public boolean isProgrammaticContent()\n    {\n        return this.doc.isProgrammaticContent();\n    }\n\n    /**\n     * Remove an XObject from the document. The changes are not persisted until the document is saved.\n     *\n     * @param object the object to remove\n     * @return {@code true} if the object was successfully removed, {@code false} if the object was not found in the\n     *         current document.\n     */\n    public boolean removeObject(Object object)\n    {\n        return getDoc().removeObject(object.getBaseObject());\n    }\n\n    /**\n     * Remove all the objects of a given type (XClass) from the document. The object counter is left unchanged, so that\n     * future objects will have new (different) numbers. However, on some storage engines the counter will be reset if\n     * the document is removed from the cache and reloaded from the persistent storage.\n     *\n     * @param className The class name of the objects to be removed.\n     * @return {@code true} if the objects were successfully removed, {@code false} if no object from the target class\n     *         was in the current document.\n     */\n    public boolean removeObjects(String className)\n    {\n        return getDoc().removeObjects(className);\n    }\n\n    /**\n     * Remove document from the wiki. Reinit <code>cloned</code>.\n     *\n     * @throws XWikiException\n     */\n    protected void deleteDocument() throws XWikiException\n    {\n        getXWikiContext().getWiki().deleteDocument(this.doc, getXWikiContext());\n        this.initialDoc = this.doc;\n    }\n\n    public void delete() throws XWikiException\n    {\n        if (hasAccessLevel(\"delete\")) {\n            deleteDocument();\n        } else {\n            java.lang.Object[] args = { this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied in edit mode on document {0}\", null, args);\n        }\n    }\n\n    /**\n     * Delete the document if the {@link #getContentAuthor content author} of the script calling this method has\n     * permission to do so. The deleter is also set to the said content author.\n     *\n     * @throws XWikiException if script author is not allowed to delete the document or if save operation fails.\n     * @since 2.3M2\n     */\n    public void deleteAsAuthor() throws XWikiException\n    {\n        XWikiContext xcontext = getXWikiContext();\n\n        DocumentReference author = getEffectiveAuthorReference();\n        if (hasAccess(Right.DELETE, author)) {\n            DocumentReference currentUser = xcontext.getUserReference();\n            try {\n                xcontext.setUserReference(author);\n\n                deleteDocument();\n            } finally {\n                xcontext.setUserReference(currentUser);\n            }\n        } else {\n            java.lang.Object[] args = { author, xcontext.getDoc(), this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied; user {0}, acting through script in document {1} cannot delete document {2}\", null,\n                args);\n        }\n    }\n\n    public void deleteWithProgrammingRights() throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            deleteDocument();\n        } else {\n            java.lang.Object[] args = { this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied with no programming rights document {0}\", null, args);\n        }\n    }\n\n    public String getVersionHashCode()\n    {\n        return this.doc.getVersionHashCode(getXWikiContext());\n    }\n\n    public int addAttachments() throws XWikiException\n    {\n        return addAttachments(null);\n    }\n\n    public int addAttachments(String fieldName) throws XWikiException\n    {\n        if (!hasAccessLevel(\"edit\")) {\n            java.lang.Object[] args = { this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied in edit mode on document {0}\", null, args);\n        }\n        XWiki xwiki = getXWikiContext().getWiki();\n        FileUploadPlugin fileupload = (FileUploadPlugin) xwiki.getPlugin(\"fileupload\", getXWikiContext());\n        List<FileItem> fileuploadlist = fileupload.getFileItems(getXWikiContext());\n        List<XWikiAttachment> attachments = new ArrayList<XWikiAttachment>();\n        // adding attachment list to context so we find the names\n        this.context.put(\"addedAttachments\", attachments);\n        int nb = 0;\n\n        if (fileuploadlist == null) {\n            return 0;\n        }\n\n        for (FileItem item : fileuploadlist) {\n            String name = item.getFieldName();\n            if (fieldName != null && !fieldName.equals(name)) {\n                continue;\n            }\n            if (item.isFormField()) {\n                continue;\n            }\n            byte[] data = fileupload.getFileItemData(name, getXWikiContext());\n            String filename;\n            String fname = fileupload.getFileName(name, getXWikiContext());\n            int i = fname.lastIndexOf(\"\\\\\");\n            if (i == -1) {\n                i = fname.lastIndexOf(\"/\");\n            }\n            filename = fname.substring(i + 1);\n            filename = filename.replaceAll(\"\\\\+\", \" \");\n\n            if ((data != null) && (data.length > 0)) {\n                XWikiAttachment attachment = this.getDoc().addAttachment(filename, data, getXWikiContext());\n                getDoc().saveAttachmentContent(attachment, getXWikiContext());\n                // commenting because this was already done by addAttachment\n                // getDoc().getAttachmentList().add(attachment);\n                attachments.add(attachment);\n                nb++;\n            }\n        }\n\n        if (nb > 0) {\n            getXWikiContext().getWiki().saveDocument(getDoc(), getXWikiContext());\n            this.initialDoc = this.doc;\n        }\n\n        return nb;\n    }\n\n    public Attachment addAttachment(String fileName, InputStream iStream)\n    {\n        try {\n            return new Attachment(this, this.getDoc().setAttachment(fileName, iStream, getXWikiContext()),\n                getXWikiContext());\n        } catch (IOException e) {\n            // TODO Log the error and let the user know about it\n        } finally {\n            updateAuthor();\n        }\n\n        return null;\n    }\n\n    public Attachment addAttachment(String fileName, byte[] data)\n    {\n        try {\n            return new Attachment(this, this.getDoc().addAttachment(fileName, data, getXWikiContext()),\n                getXWikiContext());\n        } catch (XWikiException e) {\n            // TODO Log the error and let the user know about it\n        } finally {\n            updateAuthor();\n        }\n\n        return null;\n    }\n\n    public boolean validate() throws XWikiException\n    {\n        return this.doc.validate(getXWikiContext());\n    }\n\n    public boolean validate(String[] classNames) throws XWikiException\n    {\n        return this.doc.validate(classNames, getXWikiContext());\n    }\n\n    /**\n     * Retrieves the validation script associated with this document, a Velocity script that is executed when validating\n     * the document data.\n     *\n     * @return A <code>String</code> representation of the validation script, or an empty string if there is no such\n     *         script.\n     */\n    public String getValidationScript()\n    {\n        return getDoc().getValidationScript();\n    }\n\n    /**\n     * Sets a new validation script for this document, a Velocity script that is executed when validating the document\n     * data.\n     *\n     * @param validationScript The new validation script, which can be an empty string or <code>null</code> if the\n     *            script should be removed.\n     */\n    public void setValidationScript(String validationScript)\n    {\n        getDoc().setValidationScript(validationScript);\n\n        updateAuthor();\n    }\n\n    /**\n     * Rename the current document and all the backlinks leading to it. Will also change parent field in all documents\n     * which list the document we are renaming as their parent. See\n     * {@link #rename(String, java.util.List, java.util.List)} for more details.\n     *\n     * @param newReference the reference to the new document\n     * @throws XWikiException in case of an error\n     * @since 2.3M2\n     */\n    public void rename(DocumentReference newReference) throws XWikiException\n    {\n        if (hasAccessLevel(\"delete\") && this.context.getWiki().checkAccess(\"edit\",\n            this.context.getWiki().getDocument(newReference, this.context), this.context)) {\n            this.getDoc().rename(newReference, getXWikiContext());\n        }\n    }\n\n    /**\n     * Rename the current document and all the links pointing to it in the list of passed backlink documents. The\n     * renaming algorithm takes into account the fact that there are several ways to write a link to a given page and\n     * all those forms need to be renamed. For example the following links all point to the same page:\n     * <ul>\n     * <li>[Page]</li>\n     * <li>[Page?param=1]</li>\n     * <li>[currentwiki:Page]</li>\n     * <li>[currentwiki:CurrentSpace.Page]</li>\n     * </ul>\n     * <p>\n     * Note: links without a space are renamed with the space added and all documents which have the document being\n     * renamed as parent have their parent field set to \"currentwiki:CurrentSpace.Page\".\n     * </p>\n     *\n     * @param newDocumentName the new document name. If the space is not specified then defaults to the current space.\n     * @param backlinkDocumentNames the list of documents to parse and for which links will be modified to point to the\n     *            new renamed document.\n     * @throws XWikiException in case of an error\n     */\n    public void rename(String newDocumentName, List<String> backlinkDocumentNames) throws XWikiException\n    {\n        rename(newDocumentName, backlinkDocumentNames, Collections.emptyList());\n    }\n\n    /**\n     * Same as {@link #rename(String, List)} but the list of documents having the current document as their parent is\n     * passed in parameter.\n     *\n     * @param newDocumentName the new document name. If the space is not specified then defaults to the current space.\n     * @param backlinkDocumentNames the list of documents to parse and for which links will be modified to point to the\n     *            new renamed document.\n     * @param childDocumentNames the list of documents whose parent field will be set to the new document name.\n     * @throws XWikiException in case of an error\n     */\n    public void rename(String newDocumentName, List<String> backlinkDocumentNames, List<String> childDocumentNames)\n        throws XWikiException\n    {\n        List<DocumentReference> backlinkDocumentReferences = new ArrayList<DocumentReference>();\n        for (String backlinkDocumentName : backlinkDocumentNames) {\n            backlinkDocumentReferences.add(getCurrentMixedDocumentReferenceResolver().resolve(backlinkDocumentName));\n        }\n\n        List<DocumentReference> childDocumentReferences = new ArrayList<DocumentReference>();\n        for (String childDocumentName : childDocumentNames) {\n            childDocumentReferences.add(getCurrentMixedDocumentReferenceResolver().resolve(childDocumentName));\n        }\n\n        rename(getCurrentMixedDocumentReferenceResolver().resolve(newDocumentName), backlinkDocumentReferences,\n            childDocumentReferences);\n    }\n\n    /**\n     * Same as {@link #rename(String, List)} but the list of documents having the current document as their parent is\n     * passed in parameter.\n     *\n     * @param newReference the reference to the new document\n     * @param backlinkDocumentNames the list of reference to documents to parse and for which links will be modified to\n     *            point to the new renamed document\n     * @param childDocumentNames the list of references to documents whose parent field will be set to the new document\n     *            reference\n     * @throws XWikiException in case of an error\n     * @since 2.3M2\n     */\n    public void rename(DocumentReference newReference, List<DocumentReference> backlinkDocumentNames,\n        List<DocumentReference> childDocumentNames) throws XWikiException\n    {\n        if (hasAccessLevel(\"delete\") && this.context.getWiki().checkAccess(\"edit\",\n            this.context.getWiki().getDocument(newReference, this.context), this.context)) {\n\n            // Every page given in childDocumentNames has it's parent changed whether it needs it or not.\n            // Let's make sure the user has edit permission on any page given which is not actually a child.\n            // Otherwise it would be embarrassing if a user called:\n            // $doc.rename(\"mynewpage\",$doc.getBacklinks(),$xwiki.searchDocuments(\"true\"))\n            int counter = childDocumentNames.size();\n            List<String> actuallyChildren = getChildren();\n            while (counter > 0) {\n                counter--;\n                if (!actuallyChildren.contains(childDocumentNames.get(counter))\n                    && !this.context.getWiki().checkAccess(\"edit\",\n                        this.context.getWiki().getDocument(childDocumentNames.get(counter), this.context),\n                        this.context)) {\n                    return;\n                }\n            }\n\n            this.getDoc().rename(newReference, backlinkDocumentNames, childDocumentNames, getXWikiContext());\n        }\n    }\n\n    /**\n     * Allow to easily access any revision of a document\n     *\n     * @param revision the version to access\n     * @return the document corresponding to the requested revision or {@code null} if the revision does not exist.\n     */\n    public Document getDocumentRevision(String revision)\n    {\n        try {\n            XWikiDocument documentRevision = getDocumentRevisionProvider().getRevision(this.doc, revision);\n\n            return documentRevision != null ? new Document(documentRevision, this.context) : null;\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to load revision [{}] of document [{}]\", revision, getDocumentReferenceWithLocale(),\n                e);\n\n            return null;\n        }\n    }\n\n    /**\n     * Allow to easily access the previous revision of a document\n     *\n     * @return Document\n     * @throws XWikiException\n     */\n    public Document getPreviousDocument() throws XWikiException\n    {\n        return getDocumentRevision(getPreviousVersion());\n    }\n\n    /**\n     * @return is document most recent. false if and only if there are older versions of this document.\n     */\n    public boolean isMostRecent()\n    {\n        return this.doc.isMostRecent();\n    }\n\n    @Override\n    public String toString()\n    {\n        return this.doc.toString();\n    }\n\n    /**\n     * Convert the current document content from its current syntax to the new syntax passed as parameter.\n     *\n     * @param targetSyntaxId the syntax to convert to (eg \"xwiki/2.0\", \"xhtml/1.0\", etc)\n     * @throws XWikiException if an exception occurred during the conversion process\n     */\n    public boolean convertSyntax(String targetSyntaxId) throws XWikiException\n    {\n        try {\n            getDoc().convertSyntax(targetSyntaxId, this.context);\n        } catch (Exception ex) {\n            LOGGER.error(\n                \"Failed to convert document [\" + getPrefixedFullName() + \"] to syntax [\" + targetSyntaxId + \"]\", ex);\n\n            return false;\n        } finally {\n            updateAuthor();\n            updateContentAuthor();\n        }\n\n        return true;\n    }\n\n    /**\n     * Indicates whether the document is 'hidden' or not, meaning that it should not be returned in public search\n     * results or appear in the User Interface in general.\n     *\n     * @return <code>true</code> if the document is hidden, <code>false</code> otherwise.\n     */\n    public boolean isHidden()\n    {\n        return this.doc.isHidden();\n    }\n\n    /**\n     * Indicates whether the document should be 'hidden' or not, meaning that it should not be returned in public search\n     * results or appear in the User Interface in general.\n     *\n     * @param hidden <code>true</code> if the document should be 'hidden', <code>false</code> otherwise.\n     */\n    public void setHidden(boolean hidden)\n    {\n        this.doc.setHidden(hidden);\n    }\n\n    /**\n     * Drop permissions for the remainder of the rendering cycle. After this is called:\n     * <ul>\n     * <li>1. {@link com.xpn.xwiki.api.Api#hasProgrammingRights()} will always return false.</li>\n     * <li>2. {@link com.xpn.xwiki.api.XWiki#getDocumentAsAuthor(org.xwiki.model.reference.DocumentReference)},\n     * {@link com.xpn.xwiki.api.XWiki#getDocumentAsAuthor(String)}, {@link com.xpn.xwiki.api.Document#saveAsAuthor()},\n     * {@link com.xpn.xwiki.api.Document#saveAsAuthor(String)},\n     * {@link com.xpn.xwiki.api.Document#saveAsAuthor(String, boolean)}, and\n     * {@link com.xpn.xwiki.api.Document#deleteAsAuthor()} will perform all of their actions as if the document's\n     * content author was the guest user (XWiki.XWikiGuest).</li>\n     * </ul>\n     * <p>\n     * This sandboxing will expire at the end of the rendering cycle and can be suspended by beginning a new rendering\n     * cycle. A rendering cycle can be begin by calling {@link #getRenderedContent(String)}, {@link #display(String)}\n     * (or variations thereof) or by invoking the include macro or using\n     * {@link com.xpn.xwiki.api.XWiki#includeTopic(String)}\n     * <p>\n     * NOTE: Even if you include the same document, permissions will be regained. What this does is sandbox the\n     * remainder of the code on the page because although it can temporarily suspend the permissions drop, it cannot get\n     * itself to be executed with permissions because if it calls itself, it will hit the drop function first.\n     * <p>\n     * If you are interested in a more secure sandboxing method where code is guaranteed not to have permissions for the\n     * remainder of the request, you should consider {@link com.xpn.xwiki.api.Context#dropPermissions()}.\n     * <p>\n     *\n     * @since 3.2M2\n     */\n    public void dropPermissions()\n    {\n        // Set the droppedPermissions key to the context so if the context is cloned and\n        // pushed, it will return false until it is popped again.\n        final ExecutionContext context = Utils.getComponent(Execution.class).getContext();\n        context.setProperty(XWikiConstant.DROPPED_PERMISSIONS, System.identityHashCode(context));\n    }\n\n    /**\n     * @return true if this document is a translation of the main document (i.e. returned by\n     *         {@link #getTranslatedDocument(String)}); false if this is actually the main document (i.e. returned by\n     *         {@link com.xpn.xwiki.api.XWiki#getDocument(DocumentReference)}.\n     * @since 6.2M2\n     */\n    public boolean isTranslation()\n    {\n        return 1 == this.getDoc().getTranslation();\n    }\n\n    /**\n     * @return the maximum authorized length for a document full name (see {@link #getFullName()}).\n     * @since 11.4RC1\n     */\n    public int getLocalReferenceMaxLength()\n    {\n        return this.doc.getLocalReferenceMaxLength();\n    }\n}\n", "# ---------------------------------------------------------------------------\n# See the NOTICE file distributed with this work for additional\n# information regarding copyright ownership.\n#\n# This is free software; you can redistribute it and/or modify it\n# under the terms of the GNU Lesser General Public License as\n# published by the Free Software Foundation; either version 2.1 of\n# the License, or (at your option) any later version.\n#\n# This software is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this software; if not, write to the Free\n# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n# 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n# ---------------------------------------------------------------------------\n\n# This is the new XWiki configuration file. In the future it'll replace the old\n# xwiki.cfg file. However right now it's only used by some XWiki components.\n# As time progresses more and more component will get their configurations from\n# this file.\n# \n# This file come from one of those locations (in this order):\n# * [since 9.3] /etc/xwiki/xwiki.properties\n# * /WEB-INF/xwiki.properties in the web application resources\n\n#-------------------------------------------------------------------------------------\n# Core\n#-------------------------------------------------------------------------------------\n\n#-# [Since 1.8RC2]\n#-# Specifies the default syntax to use when creating new documents.\n#-# Default value is xwiki/2.1.\n# core.defaultDocumentSyntax = xwiki/2.1\n\n#-# [Since 2.4M1]\n#-# Indicate if the rendering cache is enabled.\n#-# Default value is false.\n# core.renderingcache.enabled = true\n\n#-# [Since 2.4M1]\n#-# A list of Java regex patterns matching full documents reference.\n# core.renderingcache.documents = wiki:Space\\.Page\n# core.renderingcache.documents = wiki:Space\\..*\n# core.renderingcache.documents = Space\\.PageOnWhateverWiki\n\n#-# [Since 2.4M1]\n#-# The time (in seconds) after which data should be removed from the cache when not used.\n#-# Default value is 300 (5 min).\n# core.renderingcache.duration = 300\n\n#-# [Since 2.4M1]\n#-# The size of the rendering cache. Not that it's not the number of cached documents but the number of cached results.\n#-# (For a single document several cache entries are created, because each action, language and request query string\n#-# produces a unique rendering result)\n#-# Default value is 100.\n# core.renderingcache.size = 100\n\n#-# [Since 7.2M2]\n#-# Define which hierarchy is used between pages (for example inside the breadcrumb).\n#-# Possible values are \"reference\" (default) or \"parentchild\".\n#-# If \"parentchild\" is used, the hierachy is based on the parent/child relationship, which means that any document\n#-# could be defined as the parent of an other document.\n#-# If \"reference\" is used, then the children of a document must be placed inside this document. It's less flexible but\n#-# more clear.\n# core.hierarchyMode = reference\n\n#-------------------------------------------------------------------------------------\n# Environment\n#-------------------------------------------------------------------------------------\n\n#-# [Since 3.5M1, replaces the container.persistentDirectory property]\n#-# The directory used to store persistent data (data that should persist across server restarts). This is an\n#-# important directory containing important data and thus it should never be deleted (it should be backed-up along\n#-# with the database).\n#-# For example this is where the Extension Manager stores downloaded extensions if the extension.localRepository\n#-# property isn't configured.\n#-#\n#-# You can set:\n#-# * an absolute path (recommended)\n#-# * a relative path (not recommended at all)but in this case the directory will be relative to where the XWiki server\n#-#   is started and thus the user under which XWiki is started will need write permissions for the current directory\n#-#\n#-# Note if the system property xwiki.data.dir is set then this property is not used.\n#-# If neither the system property nor this configuration value here are set then the Servlet container's temporary\n#-# directory is used; This is absolutely not recommended since that directory could be wiped out at any time and you\n#-# should specify a value.\n#if ($xwikiPropertiesEnvironmentPermanentDirectory)\nenvironment.permanentDirectory = $xwikiPropertiesEnvironmentPermanentDirectory\n#else\n# environment.permanentDirectory = /var/lib/xwiki/data/\n#end\n\n#-------------------------------------------------------------------------------------\n# Rendering\n#-------------------------------------------------------------------------------------\n\n#-# [Since 1.8RC2]\n#-# Specifies how links labels are displayed when the user doesn't specify the label explicitly.\n#-# Valid values:\n#-#   %w: wiki name\n#-#   %s: full space name (e.g. space1.space2)\n#-#       Note: Prior to 7.4.2/8.0M2 this was only displaying the last space name\n#-#   %ls: last space name. New in 7.4.2/8.0M2\n#-#   %p: page name\n#-#   %np: nested page name (i.e. will display the space name for Nested Pages). New in 7.4.2/8.0M2\n#-#   %P: page name with spaces between camel case words, i.e. \"My Page\" if the page name is \"MyPage\"\n#-#   %NP: nested page name with spaces between camel case words, i.e. \"My Page\" if the page name is \"MyPage\".\n#-#        New in 7.4.2/8.0M2\n#-#   %t: page title\n#-#\n#-# Note that if the page title is empty or not defined then it defaults to %np. This is also the case\n#-# if the title cannot be retrieved for the document.\n#-#\n#-# The default is \"%np\". Some examples: \"%s.%p\", \"%w:%s.%p\".\n# rendering.linkLabelFormat = %np\n\n#-# [Since 2.0M3]\n#-# Overrides default macro categories (Each macro has a default category already defined, for example\n#-# \"presentation\" for the Table of Contents Macro).\n#-#\n#-# Ex: To redefine the macro category for the TOC macro so that it'd be in the \"My Category\" category +\n#-# redefine the category for the Script Macro to be \"My Other Category\", you'd use:\n# rendering.macroCategories = toc:My Category\n# rendering.macroCategories = script:My Other Category\n\n#-# [Since 2.5M2]\n#-# Specify whether the image dimensions should be extracted from the image parameters and included in the image URL\n#-# or not. When image dimensions are included in the image URL the image can be resized on the server side before being\n#-# downloaded, improving thus the page loading speed.\n#-#\n#-# Default value is true.\n# rendering.imageDimensionsIncludedInImageURL = true\n\n#-# [Since 2.5M2]\n#-# One way to improve page load speed is to resize images on the server side just before rendering the page. The\n#-# rendering module can use the image width provided by the user to scale the image (See\n#-# rendering.includeImageDimensionsInImageURL configuration parameter). When the user doesn't specify the image width\n#-# the rendering module can limit the width of the image based on this configuration parameter.\n#-#\n#-# The default value is -1 which means image width is not limited by default. Use a value greater than 0 to limit the\n#-# image width (pixels). Note that the aspect ratio is kept even when both the width and the height of the image are\n#-# limited.\n# rendering.imageWidthLimit = 1024\n# rendering.imageWidthLimit = -1\n\n#-# [Since 2.5M2]\n#-# See rendering.imageWidthLimit\n# rendering.imageHeightLimit = 768\n# rendering.imageHeightLimit = -1\n\n#-# [Since 2.5M2]\n#-# InterWiki definitions in the format alias = URL\n#-# See http://en.wikipedia.org/wiki/Interwiki_links for a definition of an InterWiki link\n# Some examples:\n# rendering.interWikiDefinitions = wikipedia = http://en.wikipedia.org/wiki/\n# rendering.interWikiDefinitions = definition = http://www.yourdictionary.com/\n\n#-# [Since 2.4M1]\n#-# Change the Pygments style used in the code macro (see http://pygments.org/docs/styles/)\n#-# If not set \"default\" style is used.\n# rendering.macro.code.pygments.style = vs\n\n#-------------------------------------------------------------------------------------\n# Rendering Transformations\n#-------------------------------------------------------------------------------------\n\n#-# [Since 2.6RC1]\n#-# Controls what transformations will be executed when rendering content.\n#-# A transformation modifies the parsed content. For example the Icon transformation replaces some characters with\n#-# icons, a WikiWord transformation will automatically create links when it finds wiki words, etc.\n#-# Note that the Macro transformation is a special transformation that replaces macro markers by the result of the\n#-# macro execution. If you don't list it, macros won't get executed.\n#-# The default value is: macro, icon\n#if ($xwikiRenderingTransformations)\nrendering.transformations = $xwikiRenderingTransformations\n#else\n# rendering.transformations = macro, icon\n#end\n\n#-# [Since 2.6RC1]\n#-# Icon Transformation Configuration\n#-# Defines mappings between suite of characters and the icon to display when those characters are found.\n#-# The format is: rendering.transformation.icon.mappings = <suite of characters> = <icon name>\n#-# The following mappings are already predefined and you don't need to redefine them unless you wish to override them\n#-# [Since 9.3RC1/8.4.5] To disable a default mapping, define it with an empty value. For example:\n#-#   rendering.transformation.icon.mappings = (n) =\n#-#\n#-# rendering.transformation.icon.mappings = :) = emoticon_smile\n#-# rendering.transformation.icon.mappings = :( = emoticon_unhappy\n#-# rendering.transformation.icon.mappings = :P = emoticon_tongue\n#-# rendering.transformation.icon.mappings = :D = emoticon_grin\n#-# rendering.transformation.icon.mappings = ;) = emoticon_wink\n#-# rendering.transformation.icon.mappings = (y) = thumb_up\n#-# rendering.transformation.icon.mappings = (n) = thumb_down\n#-# rendering.transformation.icon.mappings = (i) = information\n#-# rendering.transformation.icon.mappings = (/) = accept\n#-# rendering.transformation.icon.mappings = (x) = cancel\n#-# rendering.transformation.icon.mappings = (!) = error\n#-# rendering.transformation.icon.mappings = (+) = add\n#-# rendering.transformation.icon.mappings = (-) = delete\n#-# rendering.transformation.icon.mappings = (?) = help\n#-# rendering.transformation.icon.mappings = (on) = lightbulb\n#-# rendering.transformation.icon.mappings = (off) = lightbulb_off\n#-# rendering.transformation.icon.mappings = (*) = star\n\n#-------------------------------------------------------------------------------------\n# LinkChecker Transformation\n#-------------------------------------------------------------------------------------\n\n#-# [Since 3.3M2]\n#-# Defines the time (in ms) after which an external link should be checked again for validity.\n#-# the default configuration is:\n# rendering.transformation.linkchecker.timeout = 3600000\n\n#-# [Since 5.3RC1]\n#-# List of document references that are excluded from link checking, specified using regexes.\n#-# the default configuration is:\n# rendering.transformation.linkchecker.excludedReferencePatterns = .*:XWiki\\.ExternalLinksJSON\n\n#-------------------------------------------------------------------------------------\n# Rendering Macros\n#-------------------------------------------------------------------------------------\n\n#-# Velocity Macro\n\n#-# [Since 2.0M1]\n#-# Defines which Velocity Filter to use by default. This offers the possibility to filter the Velocity macro content\n#-# before and after the Velocity Engine execution.\n#-# The following filters are available:\n#-# - indent (the default): Remove all first whites spaces of lines to support source code indentation without\n#-#          generating whitespaces in the resulting XDOM.\n#-# - none: Doesn't change the content\n#-# - html: Removes all leading and trailing white spaces and new lines. If you need a space you'll need to use\n#-#         \\$sp and if you need a new line you'll need to use \\$nl\n#-# rendering.macro.velocity.filter = indent\n\n#-------------------------------------------------------------------------------------\n# Cache\n#-------------------------------------------------------------------------------------\n\n#-# [Since 1.7M1]\n#-# The standard cache component implementation to use (can be local or distributed depending on the implementation).\n#-# The default standard cache implementation is Infinispan.\n# cache.defaultCache = infinispan\n\n#-# [Since 1.7M1]\n#-# The local cache implementation to use.\n#-# The default local cache implementation is Infinispan.\n# cache.defaultLocalCache = infinispan/local\n\n#-------------------------------------------------------------------------------------\n# Settings for the OpenOffice server instance consumed by the OfficeImporter component\n#-------------------------------------------------------------------------------------\n\n#-# [Since 1.9M2]\n#-# Type of the openoffice server instance used by officeimporter component.\n#-# 0 - Internally managed server instance. (Default)\n#-# 1 - Externally managed (local) server instance.\n# openoffice.serverType = 0\n\n#-# [Since 12.1RC1]\n#-# Port numbers used for connecting to the openoffice server instance.\n#-# For an internally managed server instance, it will create the process for all ports.\n#-# For an externally managed server instance, only the first server port is taken into account.\n# openoffice.serverPorts = 8100,8101\n\n#-# [Since 1.9M2]\n#-# If the openoffice server should be started / connected upon XE start.\n#-# Default value is false\n# openoffice.autoStart = false\n\n#-# [Since 1.8RC3]\n#-# Path to openoffice installation (serverType:0 only).\n#-# If no path is provided, a default value will be calculated based on the operating environment.\n# openoffice.homePath = /opt/openoffice.org3/\n\n#-# [Since 1.8RC3]\n#-# Path to openoffice execution profile (serverType:0 only).\n#-# If no path is provided, a default value will be calculated based on the operating environment.\n# openoffice.profilePath = /home/user/.openoffice.org/3\n\n#-# [Since 1.8RC3]\n#-# Maximum number of simultaneous conversion tasks to be handled by a single openoffice process (serverType:0 only).\n#-# Default value is 50\n# openoffice.maxTasksPerProcess = 50\n\n#-# [Since 1.8RC3]\n#-# Timeout for conversion tasks (in milliseconds) (serverType:0 only).\n#-# Default value is 60 seconds\n# openoffice.taskExecutionTimeout = 60000\n\n#-------------------------------------------------------------------------------------\n# Velocity\n#-------------------------------------------------------------------------------------\n\n#-# [Since 2.0M1]\n#-# Velocity Tools that will be available from your scripts. The format is\n#-# velocity.tools = <name under which it'll be available in the context> = <class name>\n#-# Default values (no need to add them)\n#-#   velocity.tools = numbertool = org.xwiki.velocity.internal.XWikiNumberTool\n#-#   velocity.tools = datetool = org.xwiki.velocity.internal.XWikiDateTool\n#-#   velocity.tools = mathtool = org.xwiki.velocity.internal.XWikiMathTool\n#-#   velocity.tools = escapetool = org.apache.velocity.tools.generic.EscapeTool\n#-#   velocity.tools = regextool = org.xwiki.velocity.tools.RegexTool\n#-#   velocity.tools = collectiontool = org.xwiki.velocity.tools.CollectionTool\n#-#   velocity.tools = stringtool = org.xwiki.text.StringUtils\n#-#   velocity.tools = jsontool = org.xwiki.velocity.tools.JSONTool\n#-#   velocity.tools = urltool = org.xwiki.velocity.tools.URLTool\n#-#   velocity.tools = exceptiontool = org.apache.commons.lang3.exception.ExceptionUtils\n#-#   velocity.tools = niotool = org.xwiki.velocity.tools.nio.NIOTool\n#-#   velocity.tools = logtool = org.apache.velocity.tools.generic.LogTool\n#-#   velocity.tools = objecttool = org.xwiki.velocity.tools.ObjectTool\n#-#   velocity.tools = listtool = org.apache.velocity.tools.generic.ListTool (deprecated)\n#-#   velocity.tools = sorttool = org.apache.velocity.tools.generic.SortTool (deprecated)\n#-#   velocity.tools = collectionstool = org.xwiki.velocity.tools.CollectionsTool (deprecated)\n\n#-# [Since 2.0M1]\n#-# Velocity configuration properties. The format is\n#-# velocity.properties = <Velocity property name> = <value>\n#-# Default values (no need to add them)\n#-#   velocity.properties = resource.loader = xwiki\n#-#   velocity.properties = xwiki.resource.loader.class = org.xwiki.velocity.XWikiWebappResourceLoader\n#-#   velocity.properties = velocimacro.library = \"/templates/macros.vm\"\n#-#   velocity.properties = velocimacro.max_depth = 100\n#-#   velocity.properties = resource.manager.log_when_found = false\n#-#   velocity.properties = velocimacro.inline.local_scope = true\n#-#   velocity.properties = velocimacro.inline.replace_global = true\n#-#   velocity.properties = directive.if.empty_check = false\n#-#   velocity.properties = parser.space_gobbling = bc\n#-#   velocity.properties = parser.allow_hyphen_in_identifiers = true\n#-#   velocity.properties = velocimacro.enable_bc_mode = true\n#-#   velocity.properties = context.scope_control.template = true\n#-#   velocity.properties = context.scope_control.macro = true\n#-#   velocity.properties = event_handler.include.class = org.xwiki.velocity.internal.util.RestrictParseLocationEventHandler\n#-#   velocity.properties = runtime.introspection.uberspect = org.xwiki.velocity.introspection.SecureUberspector\\,org.apache.velocity.util.introspection.DeprecatedCheckUberspector\\,org.xwiki.velocity.introspection.MethodArgumentsUberspector\n\n#-------------------------------------------------------------------------------------\n# Groovy\n#-------------------------------------------------------------------------------------\n\n#-# [Since 4.1M1]\n#-# Allows to specify Compiler customization for the Groovy execution engine.\n#-# There's no customizers defined by default. Available customizer ids:\n#-# - timedinterrupt: interrupt script execution if it takes longer than a given time (default to 1 minute)\n#-# - secure: runs Groovy in a security sandbox\n#-# groovy.compilationCustomizers = <list of customizer ids here>\n\n#-# Timed Interrupt Customizer\n\n#-# [Since 4.1M1]\n#-# Default execution time for a script before a timeout occurs, in seconds.\n#-# groovy.customizer.timedInterrupt.timeout = 60\n\n#-------------------------------------------------------------------------------------\n# Events distribution\n#-------------------------------------------------------------------------------------\n\n#-# [Since 2.0M3]\n#-# Indicate if the network distribution module is enabled or not.\n#-# By default remote events are disabled.\n# observation.remote.enabled = false\n\n#-# [Since 2.0M3]\n#-# The list of events communication channels to start when the application starts.\n#-# By default no channel is configured.\n#-#\n#-# The default remote event distribution implementation is using JGroups and you'll need to either use embedded\n#-# JGroups configuration files or drop your custom configuration in the WEB-INF/observation/remote/jgroups/ directory.\n#-# There's a README file in that directory with more information.\n#-# Example: observation.remote.channels = public, cluster\n\n#-# [Since 2.0M4]\n#-# The implementation of network adapter to use.\n#-# The default is jgroups.\n#-#\n#-# By default only jgroups is provided. To add one implements NetworkAdaptor component interface. The identifier\n#-# provided in the configuration is matched with the component role hint.\n#-# Example: observation.remote.networkadapter = jgroups\n\n#-------------------------------------------------------------------------------------\n# CSRF token component\n#-------------------------------------------------------------------------------------\n\n#-# [Since 2.5M2]\n#-# Controls whether secret token validation mechanism should be used (to prevent CSRF attacks).\n#-#\n#-# If enabled, all actions requiring \"comment\", \"edit\", \"delete\", \"admin\" or \"programming\" rights\n#-# will check that the parameter \"form_token\" with the value of a random secret token is present\n#-# in the request.\n#-#\n#-# Valid values:\n#-#   true : Enabled\n#-#   false: Disabled\n#-#\n#-# Default value is true\n# csrf.enabled = true\n\n#-------------------------------------------------------------------------------------\n# Jobs\n#-------------------------------------------------------------------------------------\n\n#-# [Since 4.0M1]\n#-# The folder containing job executing status.\n#-# The default is {environment.permanentDirectory}/jobs/\n# job.statusFolder = /var/lib/xwiki/data/jobs/\n\n#-# [Since 7.2M2]\n#-# The maximum number of entries to put in the job status cache.\n#-# The default is 50.\n# job.statusCacheSize = 50\n\n#-# [Since 12.5RC1]\n#-# The maximum number of entries to put in cache for the GroupedJobInitializer components.\n#-# The default is 100.\n# job.groupedJobInitializerCacheSize = 100\n\n#-# [Since 12.5RC1]\n#-# The thread keep-alive time in milliseconds for the single job executor.\n#-# This value defines how long a thread can be idle before being terminated by the executor.\n#-# The default value is 60000 for 60 000ms.\n# job.singleJobThreadKeepAliveTime = 60000\n\n#-# [Since 12.5RC1]\n#-# The thread keep-alive time in milliseconds for the grouped job executors.\n#-# This value defines how long a thread can be idle before being terminated by an executor.\n#-# The default value is 60000 for 60 000ms.\n# job.groupedJobThreadKeepAliveTime = 60000\n\n#-------------------------------------------------------------------------------------\n# Extension Manager\n#-------------------------------------------------------------------------------------\n\n#-# [Since 2.5]\n#-# Repositories to use when searching and downloading extensions.\n#-# Repositories will be checked in the same order they have in this configuration file.\n#-#\n#-# The format is <id>:<type>:<url> where\n#-# * id can be anything as long as there is only one\n#-# * type is the type of the repository (maven, xwiki, etc.)\n#-# * url is the URL or the root of the repository\n#-#\n#-# [Since 4.3] It's also possible to associate various properties to each repository.\n#-# Here are the standard properties:\n#-# * user: the user to use to authenticate to the repository\n#-# * password: the password to use to authenticate to the repository\n#-# \n#-# And here those for \"maven\" repositories:\n#-# * [Since 10.7RC1] checksumPolicy: what to do when checksum validation fail. Possible values are \"fail\", \"warn\"\n#-#   (the default) and \"ignore\"\n#-# * [Since 13.0RC1] http.headers: Custom HTTP headers to be used when connecting to the maven repository.\n#-#\n#-# Here is an example:\n# extension.repositories = privatemavenid:maven:http://host.com/private/maven/\n# extension.repositories.privatemavenid.auth.user = someuser\n# extension.repositories.privatemavenid.auth.password = thepassword\n# extension.repositories.privatemavenid.http.headers.headername = headervalue\n#-#\n#-# Here's an example to add your local Maven Repository\n## Note: Since this file is parsed by Velocity in the Maven Remote Resource plugin we need to escape the\n## Apache Commons Configuration syntax for specifying the user.home system property!\n#set ($userHome = '${sys:user.home}')\n# extension.repositories = maven-local:maven:file://${userHome}/.m2/repository\n#-#\n#-# And an example to add the XWiki Maven Snapshot Repository\n# extension.repositories = maven-xwiki-snapshot:maven:https://nexus.xwiki.org/nexus/content/groups/public-snapshots\n#-#\n#-# When not set the following is taken (in this order):\n# extension.repositories = maven-xwiki:maven:https://nexus.xwiki.org/nexus/content/groups/public\n# extension.repositories = store.xwiki.com:xwiki:https://store.xwiki.com/xwiki/rest/\n# extension.repositories = extensions.xwiki.org:xwiki:https://extensions.xwiki.org/xwiki/rest/\n#-#\n#-# To not have any repository enabled (including disabling default repositories) you can explicitly make this list\n#-# empty:\n# extension.repositories=\n#if ($xwikiExtensionRepositories)\n#foreach ($extensionRepository in $xwikiExtensionRepositories.split(','))\nextension.repositories = $extensionRepository\n#end\n#end\n\n#-# [Since 2.5]\n#-# The directory where extensions are stored after being downloaded.\n#-#\n#-# The default is extension/repository in whatever is the general persistent directory.\n#-# See container.persistentDirectory.\n# extension.localRepository=extension/repository\n\n#-# [Since 3.4]\n#-# The user agent to use when communication with external services (generally repositories).\n#-#\n#-# The default is:\n# extension.userAgent=XWikiExtensionManager\n\n#-# [Since 7.1RC1]\n#-# Some extensions considered now as flavor but released before the category exists\n#-#\n#if ($xwikiPropertiesExtensionOldFlavors)\n#foreach($oldFlavor in $xwikiPropertiesExtensionOldFlavors.split(','))\nextension.oldflavors=$oldFlavor.trim()\n#end\n#else\n# extension.oldflavors=\n#end\n\n#-# [Since 8.3]\n#-# Indicate if XWiki should try to find more informations about the core extension in the repositories.\n#-#\n#-# The default is:\n# extension.core.resolve=true\n\n#-# [Since 9.6]\n#-# Indicate a list of pattern extension ids and the corresponding recommended version.\n#-# This version will be used for dependencies matching the pattern and fallback on the version declared by the\n#-# extension in case of failure.\n#-#\n#-# Here is an example:\n# extension.recommendedVersions=org.xwiki.commons:.*/[9.6]\n# extension.recommendedVersions=org.xwiki.rendering:.*/[9.6]\n# extension.recommendedVersions=org.xwiki.platform:.*/[9.6]\n# extension.recommendedVersions=com.mygroupid:.*/[1.9]\n\n#-# [Since 9.9]\n#-# Indicate whether the server should automatically check for new available environment versions.\n#-#\n#if ($xwikiPropertiesEnvironmentVersionCheck)\nextension.versioncheck.environment.enabled=$xwikiPropertiesEnvironmentVersionCheck\n#else\n#-# The default is:\n# extension.versioncheck.environment.enabled=false\n#end\n#-#\n#-# If the version check is enabled (through extension.versioncheck.environment.enabled), the following properties\n#-# can be used to customize how the version check is performed.\n#-#\n#-# Indicate the number of seconds between each check for a new version of the server.\n#-# The default is:\n# extension.versioncheck.environment.interval=3600\n#-#\n#-# Indicate a pattern that will be used to filter which version should be considered as a new version.\n#-# By default, no pattern is given an the pattern is not applied.\n#-# Example:\n# extension.versioncheck.environment.allowedVersions=9.*\n\n#-# [Since 10.5RC1]\n#-# Indicate how extension documents are protected.\n#-#\n#-# The possible choices are:\n#-# * none: no protection at all\n#-# * warning (the default): everyone get a warning when trying to edit a protected document\n#-# * deny = EDIT/DELETE right is denied for everyone except for admins who just get a warning\n#-# * forcedDeny = EDIT/DELETE right is denied for everyone, admins can't force edit/delete\n#-# * denySimple = EDIT/DELETE right is denied for simple users except for simple admins who just get a warning\n#-# * forcedDenySimple = EDIT/DELETE right is denied for all simple users, simple admins can't force edit/delete\n# extension.xar.protection=warning\n\n#-# [Since 12.2RC and 11.10.4]\n#-# Indicate a list of extension dependencies to ignore\n#-# \n#-# The default list is:\n# extension.ignoredDependencies=stax:stax\n# extension.ignoredDependencies=javax.xml.stream:stax-api\n# extension.ignoredDependencies=stax:stax-api\n# extension.ignoredDependencies=xalan:xalan\n# extension.ignoredDependencies=xalan:serializer\n\n#-------------------------------------------------------------------------------------\n# Distribution Wizard\n#-------------------------------------------------------------------------------------\n\n#-# [Since 7.1RC1] Enable or disable the automatic start of Distribution Wizard on empty/outdated wiki.\n#-#\n#-# The default is:\n# distribution.automaticStartOnMainWiki=true\n# distribution.automaticStartOnWiki=true\n\n#-#\u00a0[Since 10.2RC1] Control if the Distribution Wizard should be automatic or interactive (the default)\n#-# \n#-# On the main wiki\n# distribution.job.interactive=true\n#-# On the subwikis\n# distribution.job.interactive.wiki=true\n\n#-# [Since 10.2RC1] Override the default UI indicated in the \"environment extension\" (usually means the WAR).\n#-# It usually make more sense to set that at the WAR level (since it's usually synchronized with it).\n#-# If this is set it also means the Distribution Wizard will switch to default UI mode in which you cannot choose the\n#-# flavor.\n#-#\n#-# The id[/version] of the default UI for the main wiki. If the version is not indicated it will be the version of the\n#-# environment extension.\n# distribution.defaultUI=org.my.groupid:artifactid-mainwiki/1.5\n#-# The id[/version] default UI for the subwikis.  If the version is not indicated it will be the version of the\n#-# environment extension.\n# distribution.defaultWikiUI=org.my.groupid:artifactid-wiki/1.5\n\n#-------------------------------------------------------------------------------------\n# Solr Search\n#-------------------------------------------------------------------------------------\n\n#-# [Since 4.5M1]\n#-# The Solr server type. Currently accepted values are \"embedded\" (default) and \"remote\".\n# solr.type=embedded\n\n#-# [Since 4.5M1]\n#-# The location where the embedded Solr instance home folder is located.\n#-# The default is the subfolder \"store/solr\" inside folder defined by the property \"environment.permanentDirectory\".\n# solr.embedded.home=/var/local/xwiki/store/solr\n\n#-# [Since 12.2]\n#-# The URL of the Solr server (the root server and not the URL of a core).\n#-# The default value assumes that the remote Solr server is started in a different process on the same machine,\n#-# using the default port.\n# solr.remote.baseURL=http://localhost:8983/solr\n\n#-# [Since 12.6]\n#-# The prefix to add in front on each remote core name to avoid collisions with non-XWiki cores.\n#-# The default is \"xwiki\" which will produce names likes \"xwiki_events\" for example.\n# solr.remote.corePrefix=xwiki\n\n#-# [Since 5.1M1]\n#-# Elements to index are not sent to the Solr server one by one but in batch to improve performances.\n#-# It's possible to configure this behavior with the following properties:\n#-#\n#-# The maximum number of elements sent at the same time to the Solr server\n#-# The default is 50.\n# solr.indexer.batch.size=50\n#-# The maximum number of characters in the batch of elements to send to the Solr server.\n#-# The default is 10000.\n# solr.indexer.batch.maxLength=10000\n\n#-# [Since 5.1M1]\n#-# The maximum number of elements in the background queue of elements to index/delete\n#-# The default is 10000.\n# solr.indexer.queue.capacity=100000\n\n#-# [Since 6.1M2]\n#-# Indicates if a synchronization between SOLR index and XWiki database should be performed at startup.\n#-# Synchronization can be started from the search administration UI.\n#-# The default is true.\n# solr.synchronizeAtStartup=false\n\n#-# [Since 12.5RC1]\n#-# Indicates which wiki synchronization to perform when the \"solr.synchronizeAtStartup\" property is set to true.\n#-# Two modes are available:\n#-#   - WIKI: indicate that the synchronization is performed when each wiki is accessed for the first time.\n#-#   - FARM: indicate that the synchronization is performed once for the full farm when XWiki is started.\n#-# For large farms and in order to spread the machine's indexing load, the WIKI value is recommended, especially if\n#-# some wikis are not used.\n#-# The default is:\n# solr.synchronizeAtStartupMode=FARM\n\n#-------------------------------------------------------------------------------------\n# Security\n#-------------------------------------------------------------------------------------\n\n#-# [Since 5.0M2]\n#-# Define the authorization policies by choosing another implementation of the AuthorizationSettler. This component\n#-# is solely responsible for settling access decisions based on user, target entity and available security rules.\n#-# The identifier provided here is matched with the component role hint.\n#-#\n#-# The default is:\n# security.authorization.settler=default\n\n#-------------------------------------------------------------------------------------\n# URL\n#-------------------------------------------------------------------------------------\n\n#-# IMPORTANT: The URL module is a feature still in development and as such should be considered experimental at the\n#-# moment. The configuration parameters below are used only in some part of the code at the moment. The idea is to\n#-# progressively refactor more and more till only the new properties are used. For the moment you should continue to\n#-# use the following old properties located in xwiki.cfg:\n#-#  xwiki.virtual.usepath\n#-#  xwiki.virtual.usepath.servletpath\n\n#-# [Since 5.1M1]\n#-# The id of the URL format to use. This allows to plug in different implementations and thus allows to completely\n#-# control the format of XWiki URLs.\n#-#\n#-# The default is:\n# url.format=standard\n\n#-# [Since 5.1M1]\n#-# Defines where the wiki part is defined in a URL pointing to a subwiki\n#-# If true then the wiki part is located in the URL path (a.k.a path-based), for example:\n#-#   http://server/xwiki/wiki/mywiki/view/Space/Page\n#-# If false then the wiki part is located in the URL host domain (a.k.a domain-based), for example:\n#-#   http://mywiki.domain/xwiki/bin/view/Space/Page\n#-#\n#-# The default is:\n# url.standard.multiwiki.isPathBased=true\n\n#-# [Since 5.1M1]\n#-# For path-based setups, this property defines the path segment before the one identifying the subwiki in the URL.\n#-# For example if set to \"thewiki\", then the following URL will point to a subwiki named \"mywiki\":\n#-#   http://server/xwiki/thewiki/mywiki/view/Space/Page\n#-# Note that the mapping in web.xml has to be modified accordingly if you don't use the default value:\n#-#   <servlet-mapping>\n#-#     <servlet-name>action</servlet-name>\n#-#     <url-pattern>/wiki/*</url-pattern>\n#-#   </servlet-mapping>\n#-#\n#-# The default is:\n# url.standard.multiwiki.wikiPathPrefix=wiki\n\n#-# [Since 5.2M1]\n#-# Defines the URL path prefix used for Entity URLs, i.e. URLs pointing to a Document, Space, Object, etc.\n#-# For example this is the \"bin\" part in the following URL:\n#-#   http://server/xwiki/bin/view/space/page\n#-# Note that this replaces the old xwiki.defaultservletpath property in the xwiki.cfg file.\n#-#\n#-# The default is:\n# url.standard.entityPathPrefix=bin\n\n#-# [Since 5.3M1]\n#-# The action to take when a subwiki is not found (ie there's no wiki descriptor for it). Valid values are:\n#-# - redirect_to_main_wiki: default to displaying the main wiki\n#-# - display_error: redirect to a vm to display an error\n#-#\n#-# The default is:\n# url.standard.multiwiki.notFoundBehavior=redirect_to_main_wiki\n\n#-# [Since 7.2M1]\n#-# Whether the \"view\" action is omitted in URLs (in order to have shorter URLs).\n#-# Note that this replaces the old xwiki.showviewaction property in the xwiki.cfg file.\n#-#\n#-# The default is:\n# url.standard.hideViewAction=false\n\n#-# [Since 11.1RC1]\n#-# Whether a the last modified date of the file to be loaded should be checked and put in the URL query parameter.\n#-# Disabling this might improve a bit the performance on some old hard drives, or custom filesystem, however\n#-# it might imply the need to force-reload some resources in the browser, when migrating.\n#-#\n#-# The default is:\n# url.useResourceLastModificationDate=true\n\n#-------------------------------------------------------------------------------------\n# Attachment\n#-------------------------------------------------------------------------------------\n\n#-# [Since 5.2M2]\n#-# Define the kind of attachment that can be displayed inline. You can either choose to do it through a whitelist\n#-# (only the mimetypes defined in this list would be displayed inline) or a blacklist (every mimetype that is not in\n#-# this list would be displayed inline if possible).\n#-# Note that only one configuration is used between the whitelist and the blacklist, and the whitelist always have\n#-# the priority over the blacklist. Also note that these configurations exist for security reason so they are only\n#-# impacting attachments added by users who do not have programming rights.\n#-# If you want to force downloading some attachments types please check the configuration below.\n#-#\n#-# By default we use the following whitelist (coma separated list of values).\n# attachment.download.whitelist=audio/basic,audio/L24,audio/mp4,audio/mpeg,audio/ogg,audio/vorbis,audio/vnd.rn-realaudio,audio/vnd.wave,audio/webm,image/gif,image/jpeg,image/pjpeg,image/png,image/svg+xml,image/tiff,text/csv,text/plain,text/xml,text/rtf,video/mpeg,video/ogg,video/quicktime,video/webm,video/x-matroska,video/x-ms-wmv,video/x-flv\n#-#\n#-# If you prefer to use a blacklist instead, you can define the forbidden types here, as a coma separated list of\n#-# values. We advise you to forbid at least the following mimetypes : text/html, text/javascript\n# attachment.download.blacklist=text/html,text/javascript\n\n#-# [Since 12.10]\n#-# Define the kind of attachment that you always want to be downloaded and never displayed inline.\n#-# By default this list is empty, but you can specify a list of mime-types (coma separated list of values) which\n#-# should be always downloaded no matter who attached them or what is the whitelist/blacklist configuration.\n#-#\n#-# The distinction with the blacklist configuration above is that the blacklist won't affect file attached by a user\n#-# with programming rights, while this configuration affect any attachment.\n# attachment.download.forceDownload=\n\n#-------------------------------------------------------------------------------------\n# Active Installs\n#-------------------------------------------------------------------------------------\n\n#-# [Since 5.2M2]\n#-# The URL of where the Active Installs module should connect to in order to send a ping of activity. This feature\n#-# regularly sends the following information to xwiki.org about the current instance:\n#-# - its unique id\n#-# - the id and versions of all installed extensions)\n#-# The goal is to count the number of active installs of XWiki out there and provide statistics on xwiki.org\n#-#\n#-# The default is:\n# activeinstalls.pingURL=http://extensions.xwiki.org/activeinstalls\n\n#-------------------------------------------------------------------------------------\n# Wikis\n#-------------------------------------------------------------------------------------\n\n#-# [Since 5.4.4]\n#-# Add a default suffix to the alias of a new wiki in the wiki creation wizard, only when the path mode is not used\n#-# (i.e. domain-based, see url.standard.multiwiki.isPathBased). If this value is empty, XWiki will try to compute it\n#-# automatically from the request URL.\n#-#\n#-# eg: if wiki.alias.suffix is \"xwiki.org\" and the wiki name is \"playground\"\n#-#     then the computed alias will be: \"playground.xwiki.org\".\n#-#\n#-# The default is:\n# wiki.alias.suffix=\n\n#-------------------------------------------------------------------------------------\n# Store\n#-------------------------------------------------------------------------------------\n\n#-# [Since 6.1M2]\n#-# If active, the Filesystem Attachment Store will automatically clear empty directories on startup,\n#-# in some cases this may create undue load on the server and may need to be disabled. To do that,\n#-# set the following to false.\n#-# Note that if you disable this feature, empty directories will accumulate and you are responsible\n#-# for cleaning them up.\n# store.fsattach.cleanOnStartup=true\n\n#-# [Since 11.4RC1]\n#-# The root directory used by the various \"file\" stores implementation (attachment, deleted document, etc.).\n#-# \n#-# The default is ${environment.permanentDirectory}/store/file.\n#if ($xwikiPropertiesStoreFileDirectory)\nstore.file.directory=$xwikiPropertiesStoreFileDirectory\n#else\n# store.file.directory=/var/lib/xwiki/data/store/file/\n#end\n\n#-------------------------------------------------------------------------------------\n# Mail\n#-------------------------------------------------------------------------------------\n\n#-# [Since 6.1M2]\n#-# SMTP host when sending emails, defaults to \"localhost\".\n#-# This configuration property can be overridden in XWikiPreferences objects, by using the \"smtp_server\" property name.\n# mail.sender.host = localhost\n\n#-# [Since 6.1M2]\n#-# SMTP port when sending emails, defaults to 25.\n#-# This configuration property can be overridden in XWikiPreferences objects, by using the \"smtp_port\" property name.\n# mail.sender.port = 25\n\n#-# [Since 6.1M2]\n#-# From email address to use. Not defined by default and needs to be set up when calling the mail API.\n#-# This configuration property can be overridden in XWikiPreferences objects, by using the \"admin_email\" property name.\n# mail.sender.from = john@doe.com\n\n#-# [Since 6.1M2]\n#-# Username to authenticate on the SMTP server, if needed. By default no authentication is performed.\n#-# This configuration property can be overridden in XWikiPreferences objects, by using the \"smtp_server_username\"\n#-# property name.\n# mail.sender.username = someuser\n\n#-# [Since 6.1M2]\n#-# Password to authenticate on the SMTP server, if needed. By default no authentication is performed.\n#-# This configuration property can be overridden in XWikiPreferences objects, by using the \"smtp_server_password\"\n#-# property name.\n# mail.sender.password = somepassword\n\n#-# [Since 6.1M2]\n#-# Extra Java Mail options (see https://javamail.java.net/nonav/docs/api/).\n#-# This configuration property can be overridden in XWikiPreferences objects, by using the \"javamail_extra_props\"\n#-# property name.\n#-# By default the following properties are set automatically:\n#-#   mail.transport.protocol = smtp\n#-#   mail.smtp.host = <value of the mail.sender.host property>\n#-#   mail.smtp.port = <value of the mail.sender.port property>\n#-#   mail.smtp.user = <value of the mail.sender.username property>\n#-#   mail.smtp.from = <value of the mail.sender.from property>\n#-# Example:\n# mail.sender.properties = mail.smtp.starttls.enable = true\n# mail.sender.properties = mail.smtp.socks.host = someserver\n\n#-# [Since 6.4M2]\n#-# Defines which authorization checks are done when sending mails using the Mail Sender Script Service.\n#-# Example of valid values:\n#-# - \"programmingrights\": the current document must have Programming Rights\n#-# - \"alwaysallow\": no check is performed. This is useful when running XWiki in a secure environment where we\n#-#   want to allow all users to be able to send emails through the Script Service.\n#-# The default is:\n# mail.sender.scriptServiceCheckerHint = programmingrights\n\n#-# [Since 6.4M2]\n#-# optional default email addresses to add to the BCC mail header when sending email.\n# mail.sender.bcc = john@doe.com,mary@doe.com\n\n#-# [Since 6.4RC1]\n#-# The delay to wait between each mail being sent, in milliseconds. This is done to support mail throttling and not\n#-# be considered a spammer by mail servers.\n#-# The default is 8 seconds:\n# mail.sender.sendWaitTime = 8000\n\n#-# [Since 6.4.1, 7.0M1]\n#-# When using the Database Mail Listener, whether mail statuses for mails that have been sent successfully must be\n#-# discarded or not. They could be kept for tracability purpose for example.\n#-# The default is:\n# mail.sender.database.discardSuccessStatuses = true\n\n#-# [Since 11.6RC1]\n#-# Max queue size for the prepare mail thread. When the max size is reached, asynchronously sending a mail will block\n#-# till the first mail item in the prepare queue has been processed.\n# mail.sender.prepareQueueCapacity = 1000\n\n#-# [Since 11.6RC1]\n#-# Max queue size for the send mail thread. When the max size is reached, the prepare queue will block till the first\n# mail item in the send queue has been sent.\n# mail.sender.sendQueueCapacity = 1000\n\n#-# [Since 12.9RC1]\n#-# Decides if XWiki should resend automatically mails that were prepared but not sent, at restart.\n#-# Note that emails that were in the prepare_error state are not resent since they failed to be saved and thus cannot\n#-# be resent.\n# mail.sender.database.resendAutomaticallyAtStartup = true\n\n#-------------------------------------------------------------------------------------\n# Debug\n#-------------------------------------------------------------------------------------\n\n#-# [Since 7.0RC1]\n#-# Indicate if web resources should be loaded minified by default.\n#-# It's enabled by default which can make js/css hard to read.\n# debug.minify=false\n\n#-------------------------------------------------------------------------------------\n# LESS CSS\n#-------------------------------------------------------------------------------------\n\n#-# [Since 7.4.2, 8.0M2]\n#-# The number of LESS compilations that can be performed simultaneously. Put a little number if your resources are\n#-# limited.\n#-#\n#-# The default is:\n# lesscss.maximumSimultaneousCompilations = 4\n\n#-# [Since 8.0RC1]\n#-# Generate sourcemaps inline in the CSS files.\n#-#\n#-# The default is:\n# lesscss.generateInlineSourceMaps = false\n\n#-------------------------------------------------------------------------------------\n# Edit\n#-------------------------------------------------------------------------------------\n\n#-# [Since 8.2RC1]\n#-# Indicate the default editor to use for a specific data type.\n#-# The editors are components so they are specified using their role hints.\n#-# Some data types can be edited in multiple ways, by different types of editors.\n#-# Thus you can also indicate the default editor to use from a specific category (editor type).\n#-#\n#-# The format is this:\n#-# edit.defaultEditor.<dataType>=<roleHintOrCategory>\n#-# edit.defaultEditor.<dataType>#<category>=<roleHintOrSubCategory>\n#-#\n#-# The default bindings are:\n# edit.defaultEditor.org.xwiki.rendering.syntax.SyntaxContent=text\n# edit.defaultEditor.org.xwiki.rendering.syntax.SyntaxContent#text=text\n# edit.defaultEditor.org.xwiki.rendering.block.XDOM=text\n# edit.defaultEditor.org.xwiki.rendering.block.XDOM#text=text\n#if ($xwikiPropertiesDefaultWysiwygEditor)\nedit.defaultEditor.org.xwiki.rendering.syntax.SyntaxContent#wysiwyg=$xwikiPropertiesDefaultWysiwygEditor\nedit.defaultEditor.org.xwiki.rendering.block.XDOM#wysiwyg=$xwikiPropertiesDefaultWysiwygEditor\n#end\n\n#-# [Since 11.3.2, 11.6RC1]\n#-# Indicate if the mechanism to detect and handle edition conflicts should be enabled or not.\n#-# If disabled, it means that in case of edition conflicts, the latest save will be always take into account, and\n#-# erase previous data (which can always be recovered in the history of the document).\n#-# This option is provided because the feature is still experimental and it could be useful is some specific usecases\n#-# to switch it off. However it is not recommended to do so.\n#-#\n#-# The default is:\n# edit.conflictChecking.enabled = true\n\n#-# [Since 12.5]\n#-# Indicate if the XWiki documents should be edited in-place, without leaving the view mode, whenever possible (e.g. if\n#-# the default edit mode for that document and the preferred editor both support in-place editing). When enabled,\n#-# clicking on the document Edit button makes the document title and content editable in-place, without leaving the\n#-# view mode. When disabled, clicking on the document Edit button loads the default (stand-alone) edit mode for that\n#-# document.\n#-#\n#-# The default is:\n# edit.document.inPlaceEditing.enabled = true\n\n#-------------------------------------------------------------------------------------\n# Notifications\n#-------------------------------------------------------------------------------------\n\n#-# [Since 9.4RC1]\n#-# Indicates if the notifications module should be enabled on the platform.\n#-#\n#-# The default is :\n# notifications.enabled = true\n\n#-# [Since 9.5C1]\n#-# Indicates if the notifications module can send emails.\n#-#\n#-# The default is :\n# notifications.emails.enabled = true\n\n#-# [Since 9.6RC1]\n#-# Indicate the grace time used when sending live email notifications.\n#-# When an event is triggered in the wiki (for example, a document update), the platform will wait X minutes\n#-# before sending live notifications emails. During this time, if events of the same kind are recieved, they will\n#-# be grouped in the same email.\n#-#\n#-# The grace time define the period (in minutes) for which the platform should wait before sending a notification\n#-# mail after an event.\n#-#\n#-# The default is :\n# notifications.emails.live.graceTime = 10\n\n#-# [Since 9.8RC1]\n#-# Indicate if the \"watched entities\" feature is enabled on the platform.\n#-# This feature mimics what the \"Watchlist Application\" does so it may not be a good idea to have both on the platform.\n#-#\n#-# The default is :\n# notifications.watchedEntities.enabled = true\n\n#-# [Since 9.11.8]\n#-# [Since 10.6RC1]\n#-# The automatic watch mode used by default. The value can be changed by an administrator in the wiki's administration\n#-# or by any user in their own settings.\n#-#\n#-# Possible values:\n#-#\n#-# - none:  no page is added to the list of watched pages automatically.\n#-# - all:   everytime a user makes a change on a page, it is automatically added to her list of watched pages.\n#-# - major: everytime a user makes a major change on a page, it is automatically added to her list of watched pages.\n#-# - new:   only pages created by a user are added to her list of watched pages.\n#-#\n#-# The default is :\n# notifications.watchedEntities.autoWatch = major\n\n#-# [Since 10.11.4]\n#-# [Since 11.2]\n#-# The search for notifications in the REST API is done trough a thread pool to limit the impact on the rest of the\n#-# XWiki instance.\n#-# This properties controls the size of this pool. Any number lower than 1 disable the thread pool system.\n#-# \n#-# The default is :\n# notifications.rest.poolSize = 2\n\n#-# [Since 10.11.8]\n#-# [Since 11.3]\n#-# Enable or disable caching of notification search result in the REST or async API.\n#-# \n#-# The default is :\n# notifications.rest.cache = true\n\n#-# [Since 12.6]\n#-# When this option is enabled the relation between users and events is evaluated and stored when the events are\n#-# generated instead of each time they are displayed.\n#-#\n#-# The default is :\n# notifications.eventPrefilteringEnabled = true\n\n#-# [Since 12.5RC1]\n#-# The async notifications renderer is using a dedicated thread pool to limit the impact on the rest of the XWiki\n#-# instance.\n#-# This properties controls the size of this pool.\n#-#\n#-# The default is :\n# notifications.async.poolSize = 2\n\n#-------------------------------------------------------------------------------------\n# Mentions\n#-------------------------------------------------------------------------------------\n\n#-# [Since 12.6]\n#-# The detection and notification for the user mentions in created or edited content is done asynchronously \n#-# by a pool of consumers.\n#-# This properties controls the size of this pool.\n#-#\n#-# The default is :\n# mentions.poolSize = 1\n\n#-------------------------------------------------------------------------------------\n# Event Stream\n#-------------------------------------------------------------------------------------\n\n#-# [Since 11.1RC1]\n#-# The Event Stream, on which the notifications are based, stores data in a dedicated table in the database.\n#-#\u00a0Each wiki has its own database. The feature can be configured to store its data into the database corresponding to\n#-# the wiki, into the main database (default: xwiki) or both. These options should not be both set to false (in this\n#-# case the local store will be forced).\n#-# Important note: disabling storage in the main store will prevent the notifications from retrieving events from\n#-# subwikis. Moreover, disabling the main store makes impossible for global users to watch pages from subwikis. It is\n#-# not recommended.\n#-#\n#-# This feature was originally implemented by the Activity Stream plugin so these settings might sound familiar to you.\n#-#\n#-# The default is :\n# eventstream.uselocalstore = true\n#-#\n#-# The default is :\n# eventstream.usemainstore = true\n#-#\n#-# Number of days the events should be kept (0 or any negative value: infinite duration)\n#-# Note: if this value is greater than 0 a scheduler job will be created, this job will then be fired every week to\n#-# delete events older than the configured value.\n#-# The default is :\n# eventstream.daystokeepevents = 0\n\n#-# [Since 12.4]\n#-# Indicate if the new no-SQL oriented event store is enabled. Once enabled the Solr implementation is\n#-# used by default but other implementations (like a MongoDB based implementation for example) might come later.\n#-# It's enabled by default since 12.6.\n# eventstream.store.enabled = true\n#-# Indicate which event store implementation to use. The default implementation is based on Solr.\n# eventstream.store = solr\n\n#-------------------------------------------------------------------------------------\n# Logging\n#-------------------------------------------------------------------------------------\n\n#-# [Since 12.0RC1]\n#-# Indicate of logging about the use of deprecated APIs/feature should be enabled.\n#-# \n#-# The default is:\n# logging.deprecated.enabled = true\n\n#-------------------------------------------------------------------------------------\n# User\n#-------------------------------------------------------------------------------------\n\n#-# [Since 12.2]\n#-# Indicate where users are stored.\n#-#\n#-# The default (and currently the only supported option) is:\n# user.store.hint = document\n\n#-# [Since 12.2]\n#-# Define preferences for the SuperAdmin user.\n#-#\n#-# The format is:\n#-# user.preferences.superadmin.<preference name> = <value>\n#-#\n#-# Examples:\n#-# user.preferences.superadmin.displayHiddenDocuments = 0\n#-# user.preferences.superadmin.editor = Text\n\n#-# [Since 12.2]\n#-# Define preferences for the Guest user.\n#-#\n#-# The format is:\n#-# user.preferences.guest.<preference name> = <value>\n#-#\n#-# Examples:\n#-# user.preferences.guest.displayHiddenDocuments = 1\n#-# user.preferences.guest.editor = Text\n\n#-------------------------------------------------------------------------------------\n# Refactoring\n#-------------------------------------------------------------------------------------\n\n#-# [Since 12.5RC1]\n#-# Indicate to use the old implementation based on copy and delete, or the new implementation using an atomic operation\n#-# on database (which is a lot more performant).\n#-# This property aims at being removed in the future once the atomic rename has been validated to work 100% fine.\n#-# Only use it if you are facing an issue with the move/rename features.\n#-#\n#-# The default value is:\n# refactoring.rename.useAtomicRename = true\n\n#-# [Since 12.9RC1]\n#-# Indicates whether skipping the recycle bin when deleting pages is allowed for Advanced users.\n#-# It is disabled by default.\n#-# This setting is only used if the wiki has a recycle bin activated (xwiki.recyclebin=1 in xwiki.cfg).\n#-# This setting can be overloaded:\n#-# * By the main wiki in the Refactoring.Code.RefactoringConfigurationClass class of the\n#-#   Refactoring.Code.RefactoringConfiguration document of the main wiki.\n#-# * By sub-wikis in the Refactoring.Code.RefactoringConfigurationClass class of the\n#-#   Refactoring.Code.RefactoringConfiguration document of the sub-wikis (itself overloading the main wiki's\n#-#   configuration).\n#-#\n#-# The default value is:\n# refactoring.isRecycleBinSkippingActivated = false\n\n#-------------------------------------------------------------------------------------\n# Skin Extensions\n#-------------------------------------------------------------------------------------\n\n#-# [Since 12.7.1, 12.8RC1]\n#-# Indicate whether the JavaScript skin extensions should be parsed and minified using strict mode. When strict mode is\n#-# enabled:\n#-# * the JavaScript minification may fail if the code is poorly written. See\n#-#   https://github.com/google/closure-compiler/wiki/Warnings for a list of errors that may occur. When this happens\n#-#   XWiki uses the original (unminified) JavaScript source as a fall-back and logs some error messages that indicate\n#-#   how the bad code can be fixed.\n#-# * the minified JavaScript includes the \"use strict;\" statement which means the code may fail at runtime if it doesn't\n#-#   follow the ECMAScript strict rules. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\n#-#\n#-# The default value is:\n# skinx.jsStrictModeEnabled = false\n\n$!xwikiPropertiesAdditionalProperties"], "fixing_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.api;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Vector;\n\nimport org.apache.commons.fileupload.FileItem;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.suigeneris.jrcs.diff.DifferentiationFailedException;\nimport org.suigeneris.jrcs.diff.delta.Delta;\nimport org.suigeneris.jrcs.rcs.Version;\nimport org.xwiki.configuration.ConfigurationSource;\nimport org.xwiki.context.Execution;\nimport org.xwiki.context.ExecutionContext;\nimport org.xwiki.display.internal.DocumentDisplayerParameters;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.DocumentReferenceResolver;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.model.reference.ObjectReference;\nimport org.xwiki.model.reference.PageReference;\nimport org.xwiki.rendering.block.XDOM;\nimport org.xwiki.rendering.parser.ParseException;\nimport org.xwiki.rendering.syntax.Syntax;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.stability.Unstable;\n\nimport com.xpn.xwiki.XWiki;\nimport com.xpn.xwiki.XWikiConstant;\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.criteria.impl.Period;\nimport com.xpn.xwiki.criteria.impl.PeriodFactory;\nimport com.xpn.xwiki.criteria.impl.Range;\nimport com.xpn.xwiki.criteria.impl.RangeFactory;\nimport com.xpn.xwiki.criteria.impl.RevisionCriteria;\nimport com.xpn.xwiki.criteria.impl.Scope;\nimport com.xpn.xwiki.criteria.impl.ScopeFactory;\nimport com.xpn.xwiki.doc.DocumentRevisionProvider;\nimport com.xpn.xwiki.doc.MetaDataDiff;\nimport com.xpn.xwiki.doc.XWikiAttachment;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.doc.XWikiDocumentArchive;\nimport com.xpn.xwiki.doc.XWikiLink;\nimport com.xpn.xwiki.doc.XWikiLock;\nimport com.xpn.xwiki.internal.XWikiCfgConfigurationSource;\nimport com.xpn.xwiki.objects.BaseObject;\nimport com.xpn.xwiki.objects.BaseProperty;\nimport com.xpn.xwiki.objects.ObjectDiff;\nimport com.xpn.xwiki.objects.classes.BaseClass;\nimport com.xpn.xwiki.plugin.fileupload.FileUploadPlugin;\nimport com.xpn.xwiki.stats.api.XWikiStatsService;\nimport com.xpn.xwiki.stats.impl.DocumentStats;\nimport com.xpn.xwiki.stats.impl.RefererStats;\nimport com.xpn.xwiki.util.TOCGenerator;\nimport com.xpn.xwiki.util.Util;\nimport com.xpn.xwiki.web.Utils;\n\n/**\n * This class represents a document or page in the wiki. This is a security and usability wrapper which wraps\n * {@link com.xpn.xwiki.doc.XWikiDocument} In scripting, an object representing the document in which the script resides\n * will be bound to a variable called doc.\n *\n * @version $Id$\n */\npublic class Document extends Api\n{\n    /** Logging helper object. */\n    private static final Logger LOGGER = LoggerFactory.getLogger(Document.class);\n\n    /**\n     * The XWikiDocument object wrapped by this API.\n     */\n    protected XWikiDocument initialDoc;\n\n    /**\n     * The XWikiDocument object wrapped by this API.\n     */\n    protected XWikiDocument doc;\n\n    /**\n     * Convenience object used by object related methods.\n     */\n    protected Object currentObj;\n\n    /**\n     * Used to resolve a string into a proper Document Reference using the current document's reference to fill the\n     * blanks, except for the page name for which the default page name is used instead and for the wiki name for which\n     * the current wiki is used instead of the current document reference's wiki.\n     */\n    private DocumentReferenceResolver<String> currentMixedDocumentReferenceResolver;\n\n    /**\n     * Used to convert a proper Document Reference to string (standard form).\n     */\n    private EntityReferenceSerializer<String> defaultEntityReferenceSerializer;\n\n    /**\n     * Used to convert a proper Document Reference to a string but without the wiki name.\n     */\n    private EntityReferenceSerializer<String> localEntityReferenceSerializer;\n\n    /**\n     * Used to convert user references to string.\n     */\n    private EntityReferenceSerializer<String> compactWikiEntityReferenceSerializer;\n\n    private DocumentRevisionProvider documentRevisionProvider;\n\n    private ConfigurationSource configuration;\n\n    private DocumentReferenceResolver<String> getCurrentMixedDocumentReferenceResolver()\n    {\n        if (this.currentMixedDocumentReferenceResolver == null) {\n            this.currentMixedDocumentReferenceResolver =\n                Utils.getComponent(DocumentReferenceResolver.TYPE_STRING, \"currentmixed\");\n        }\n\n        return this.currentMixedDocumentReferenceResolver;\n    }\n\n    private EntityReferenceSerializer<String> getDefaultEntityReferenceSerializer()\n    {\n        if (this.defaultEntityReferenceSerializer == null) {\n            this.defaultEntityReferenceSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING);\n        }\n\n        return this.defaultEntityReferenceSerializer;\n    }\n\n    private EntityReferenceSerializer<String> getLocalEntityReferenceSerializer()\n    {\n        if (this.localEntityReferenceSerializer == null) {\n            this.localEntityReferenceSerializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, \"local\");\n        }\n\n        return this.localEntityReferenceSerializer;\n    }\n\n    private EntityReferenceSerializer<String> getCompactWikiEntityReferenceSerializer()\n    {\n        if (this.compactWikiEntityReferenceSerializer == null) {\n            this.compactWikiEntityReferenceSerializer =\n                Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, \"compactwiki\");\n        }\n\n        return this.compactWikiEntityReferenceSerializer;\n    }\n\n    private DocumentRevisionProvider getDocumentRevisionProvider()\n    {\n        if (this.documentRevisionProvider == null) {\n            this.documentRevisionProvider = Utils.getComponent(DocumentRevisionProvider.class);\n        }\n\n        return this.documentRevisionProvider;\n    }\n\n    private ConfigurationSource getConfiguration()\n    {\n        if (this.configuration == null) {\n            this.configuration = Utils.getComponent(ConfigurationSource.class);\n        }\n\n        return this.configuration;\n    }\n\n    /**\n     * Document constructor.\n     *\n     * @param doc The XWikiDocument object to wrap.\n     * @param context The current request context.\n     */\n    public Document(XWikiDocument doc, XWikiContext context)\n    {\n        super(context);\n\n        this.initialDoc = doc;\n        this.doc = this.initialDoc;\n    }\n\n    /**\n     * Get the XWikiDocument wrapped by this API. This function is accessible only if you have the programming rights\n     * give access to the priviledged API of the Document.\n     *\n     * @return The XWikiDocument wrapped by this API.\n     */\n    public XWikiDocument getDocument()\n    {\n        if (hasProgrammingRights()) {\n            return this.doc;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Get a clone of the XWikiDocument wrapped by this API.\n     *\n     * @return A clone of the XWikiDocument wrapped by this API.\n     */\n    protected XWikiDocument getDoc()\n    {\n        if (this.initialDoc == this.doc) {\n            this.doc = this.initialDoc.clone();\n        }\n\n        return this.doc;\n    }\n\n    /**\n     * return the ID of the document. this ID is unique across the wiki.\n     *\n     * @return the id of the document.\n     */\n    public long getId()\n    {\n        return this.doc.getId();\n    }\n\n    /**\n     * returns the DocumentReference for the current document\n     *\n     * @return the DocumentReference of the current document\n     * @since 2.3M1\n     */\n    public DocumentReference getDocumentReference()\n    {\n        return this.doc.getDocumentReference();\n    }\n\n    /**\n     * @return the {@link DocumentReference} of the document also containing the document {@link Locale}\n     * @since 9.3RC1\n     */\n    public DocumentReference getDocumentReferenceWithLocale()\n    {\n        return this.doc.getDocumentReferenceWithLocale();\n    }\n\n    /**\n     * @return the reference of the document as {@link PageReference} without the {@link Locale}\n     * @since 10.6RC1\n     */\n    public PageReference getPageReference()\n    {\n        return this.doc.getPageReference();\n    }\n\n    /**\n     * @return the reference of the document as {@link PageReference} including the {@link Locale}\n     * @since 10.6RC1\n     */\n    public PageReference getPageReferenceWithLocale()\n    {\n        return this.doc.getPageReferenceWithLocale();\n    }\n\n    /**\n     * @return the last part of the document's reference. For example if the reference of a document is\n     *         {@code MySpace.Mydoc}, the returned name is {@code MyDoc}. For a nested document, the last part of the\n     *         reference is always {@code WebHome} and thus the returned name is {@code Webhome}. It's better to use\n     *         {@link #getPageReference()} or {@link #getDocumentReference()}, e.g. with\n     *         {@code getPageReference().getName()} or {@code getDocumentReference().getName()}. To get the space name\n     *         of the nested document you can use {@code getPageReference().getName()} or\n     *         {@code getDocumentReference().getParent().getName()}.\n     * @see #getPageReference()\n     * @see #getDocumentReference()\n     * @deprecated since 11.0, use {@link #getDocumentReference()} instead\n     */\n    @Deprecated\n    public String getName()\n{\n    return this.doc.getDocumentReference().getName();\n}\n\n    /**\n     * Return the full local space reference of the Document. For example a document located in sub-space\n     * <code>space11</code> of space <code>space1</code> will return <code>space1.space11</code>.\n     *\n     * @return the name of the spaces of the document\n     */\n    public String getSpace()\n    {\n        return this.doc.getSpace();\n    }\n\n    /**\n     * Get the name wiki where the document is stored.\n     *\n     * @return The name of the wiki where this document is stored.\n     * @since 1.1.2\n     * @since 1.2M2\n     */\n    public String getWiki()\n    {\n        return this.doc.getDocumentReference().getWikiReference().getName();\n    }\n\n    /**\n     * Get the fullName of the document. If a document is named \"MyDoc\" in space \"MySpace\", the fullname is\n     * \"MySpace.MyDoc\". In a wiki, all the documents have a different fullName.\n     *\n     * @return fullName of the document.\n     */\n    public String getFullName()\n    {\n        return getLocalEntityReferenceSerializer().serialize(this.doc.getDocumentReference());\n    }\n\n    /**\n     * Get the complete fullName of the document. The real full name of the document containing the name of the wiki\n     * where the document is stored. For a document stored in the wiki \"xwiki\", in space \"MySpace\", named \"MyDoc\", its\n     * complete full name is \"xwiki:MySpace.MyDoc\".\n     *\n     * @return The complete fullName of the document.\n     * @since 1.1.2\n     * @since 1.2M2\n     */\n    public String getPrefixedFullName()\n    {\n        return getDefaultEntityReferenceSerializer().serialize(this.doc.getDocumentReference());\n    }\n\n    /**\n     * Get a Version object representing the current version of the document.\n     *\n     * @return A Version object representing the current version of the document\n     */\n    public Version getRCSVersion()\n    {\n        return this.doc.getRCSVersion();\n    }\n\n    /**\n     * Get a string representing the current version of the document.\n     *\n     * @return A string representing the current version of the document.\n     */\n    public String getVersion()\n    {\n        return this.doc.getVersion();\n    }\n\n    /**\n     * Get a string representing the previous version of the document.\n     *\n     * @return A string representing the previous version of the document. If this is the first version then it returns\n     *         null.\n     */\n    public String getPreviousVersion()\n    {\n        return this.doc.getPreviousVersion();\n    }\n\n    /**\n     * Get the value of the title field of the document.\n     *\n     * @return The value of the title field of the document.\n     */\n    public String getTitle()\n    {\n        return this.doc.getTitle();\n    }\n\n    /**\n     * Get document title. If a title has not been provided through the title field, it looks for a section title in the\n     * document's content and if not found return the page name. The returned title is also interpreted which means it's\n     * allowed to use Velocity, Groovy, etc syntax within a title.\n     *\n     * @return The document title as XHTML\n     */\n    public String getDisplayTitle()\n    {\n        return this.doc.getRenderedTitle(getXWikiContext());\n    }\n\n    /**\n     * Returns the document title as plain text\n     *\n     * @return the document title as plain text (all markup removed)\n     * @since 3.0M1\n     */\n    public String getPlainTitle()\n    {\n        return this.doc.getRenderedTitle(Syntax.PLAIN_1_0, getXWikiContext());\n    }\n\n    /**\n     * Returns the title of the document rendered through wiki syntax and velocity\n     *\n     * @return the title rendered through wiki syntax and velocity\n     * @see XWikiDocument#getRenderedTitle(Syntax, XWikiContext)\n     */\n    public String getRenderedTitle(String syntaxId) throws XWikiException\n    {\n        try {\n            return this.doc.getRenderedTitle(Syntax.valueOf(syntaxId), getXWikiContext());\n        } catch (ParseException e) {\n            LOGGER.error(\"Failed to parse provided syntax identifier [\" + syntaxId + \"]\", e);\n\n            throw new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_UNKNOWN,\n                \"Failed to parse syntax identifier [\" + syntaxId + \"]\", e);\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to render document [\" + getPrefixedFullName() + \"] title content\", e);\n\n            throw new XWikiException(XWikiException.MODULE_XWIKI_RENDERING, XWikiException.ERROR_XWIKI_UNKNOWN,\n                \"Failed to render document [\" + getPrefixedFullName() + \"] content title\", e);\n        }\n    }\n\n    /**\n     * TODO document this or mark it deprecated\n     */\n    public String getFormat()\n    {\n        return this.doc.getFormat();\n    }\n\n    /**\n     * Get fullName of the profile document of the author of the current version of the document. Example: XWiki.Admin.\n     *\n     * @return The fullName of the profile document of the author of the current version of the document.\n     */\n    public String getAuthor()\n    {\n        return this.doc.getAuthor();\n    }\n\n    /**\n     * @return the document author reference\n     * @since 6.4RC1\n     */\n    public DocumentReference getAuthorReference()\n    {\n        return this.doc.getAuthorReference();\n    }\n\n    /**\n     * Get fullName of the profile document of the author of the content modification of this document version. Example:\n     * XWiki.Admin.\n     *\n     * @return The fullName of the profile document of the author of the content modification in this document version.\n     */\n    public String getContentAuthor()\n    {\n        return this.doc.getContentAuthor();\n    }\n\n    /**\n     * @return the document content author reference\n     * @since 6.4RC1\n     */\n    public DocumentReference getContentAuthorReference()\n    {\n        return this.doc.getContentAuthorReference();\n    }\n\n    /**\n     * @return The date when this document version has been modified.\n     */\n    public Date getDate()\n    {\n        return this.doc.getDate();\n    }\n\n    /**\n     * Get the date when the content modification has been done on this document version. A content update excludes\n     * modifications to meta data fields or comments of the document.\n     *\n     * @return The date where the content modification has been done on this document version.\n     */\n    public Date getContentUpdateDate()\n    {\n        return this.doc.getContentUpdateDate();\n    }\n\n    /**\n     * @return the original creation date of the document.\n     */\n    public Date getCreationDate()\n    {\n        return this.doc.getCreationDate();\n    }\n\n    /**\n     * Get the name of the parent of this document.\n     *\n     * @return The name of the parent of this document.\n     */\n    public String getParent()\n    {\n        return this.doc.getParent();\n    }\n\n    /**\n     * @return the parent reference or null if the parent is not set\n     * @since 7.3M1\n     */\n    public DocumentReference getParentReference()\n    {\n        return this.doc.getParentReference();\n    }\n\n    /**\n     * Get fullName of the profile document of the document creator.\n     *\n     * @return The fullName of the profile document of the document creator.\n     */\n    public String getCreator()\n    {\n        return this.doc.getCreator();\n    }\n\n    /**\n     * @return the document creator reference\n     * @since 6.4RC1\n     */\n    public DocumentReference getCreatorReference()\n    {\n        return this.doc.getCreatorReference();\n    }\n\n    /**\n     * Get raw content of the document, i.e. the content that is visible through the wiki editor.\n     *\n     * @return The raw content of the document.\n     */\n    public String getContent()\n    {\n        return this.doc.getContent();\n    }\n\n    /**\n     * NOTE: This method caches the XDOM and returns a clone that can be safely modified.\n     *\n     * @return the XDOM corresponding to the document's string content\n     * @since 7.0RC1\n     */\n    public XDOM getXDOM()\n    {\n        return this.doc.getXDOM();\n    }\n\n    /**\n     * @return The syntax representing the syntax used for the document's content\n     * @since 2.3M1\n     */\n    public Syntax getSyntax()\n    {\n        return this.doc.getSyntax();\n    }\n\n    /**\n     * Get the Syntax id representing the syntax used for the document. For example \"xwiki/1.0\" represents the first\n     * version XWiki syntax while \"xwiki/2.0\" represents version 2.0 of the XWiki Syntax.\n     *\n     * @return The syntax id representing the syntax used for the document.\n     * @deprecated since 2.3M1 use {@link #getSyntax()} instead\n     */\n    @Deprecated\n    public String getSyntaxId()\n    {\n        return this.doc.getSyntax().toIdString();\n    }\n\n    /**\n     * Same as {@link #getLocale()} but as String.\n     *\n     * @return the locale of the document.\n     * @deprecated since 5.4M1 use {@link #getLocale()} instead\n     */\n    @Deprecated\n    public String getLanguage()\n    {\n        return this.doc.getLanguage();\n    }\n\n    /**\n     * Get the locale of the document. If the document is a translation it returns the locale set for it, otherwise, it\n     * returns the root locale.\n     *\n     * @return the locale of the document\n     * @since 5.4M1\n     */\n    public Locale getLocale()\n    {\n        return this.doc.getLocale();\n    }\n\n    /**\n     * TODO document this or mark it deprecated\n     */\n    public String getTemplate()\n    {\n        String templateReferenceAsString = \"\";\n        DocumentReference templateDocumentReference = this.doc.getTemplateDocumentReference();\n        if (templateDocumentReference != null) {\n            templateReferenceAsString = getLocalEntityReferenceSerializer().serialize(templateDocumentReference);\n        }\n        return templateReferenceAsString;\n    }\n\n    /**\n     * Same as {@link #getRealLocale()} but as String.\n     *\n     * @return the real locale\n     * @deprecated since 8.0M1, use {@link #getRealLocale()} instead\n     */\n    @Deprecated\n    public String getRealLanguage() throws XWikiException\n    {\n        return this.doc.getRealLanguage(getXWikiContext());\n    }\n\n    /**\n     * Gets the real locale of the document. The real locale is either the default locale field when the locale field is\n     * empty (when the document is the default document) or the locale field otherwise when the document is a\n     * translation document\n     * \n     * @return the actual locale of the document\n     * @since 8.0M1\n     */\n    public Locale getRealLocale()\n    {\n        return this.doc.getRealLocale();\n    }\n\n    /**\n     * Same as {@link #getDefaultLocale()} but as String.\n     * \n     * @return the locale of the default document\n     * @deprecated since 8.0M1, use {@link #getDefaultLocale()} instead\n     */\n    @Deprecated\n    public String getDefaultLanguage()\n    {\n        return this.doc.getDefaultLanguage();\n    }\n\n    /**\n     * @return the Locale of the default version of the document (usually {@link Locale#ROOT} or {@link Locale#ENGLISH})\n     * @since 8.0M1\n     */\n    public Locale getDefaultLocale()\n    {\n        return this.doc.getDefaultLocale();\n    }\n\n    /**\n     * @param defaultLocale the locale content in the default document version\n     * @since 11.9RC1\n     */\n    public void setDefaultLocale(Locale defaultLocale)\n    {\n        this.doc.setDefaultLocale(defaultLocale);\n    }\n\n    /**\n     * TODO document this or mark it deprecated\n     */\n    public String getDefaultTemplate()\n    {\n        return this.doc.getDefaultTemplate();\n    }\n\n    /**\n     * @return the comment of of the document version\n     */\n    public String getComment()\n    {\n        return this.doc.getComment();\n    }\n\n    /**\n     * @return true if the this document version was a minor edit.\n     */\n    public boolean isMinorEdit()\n    {\n        return this.doc.isMinorEdit();\n    }\n\n    /**\n     * @return the list of locales for which this document has a translation; the original (default) locale is not\n     *         included\n     * @throws XWikiException if retrieving the document translations from the database fails\n     * @since 12.4RC1\n     */\n    @Unstable\n    public List<Locale> getTranslationLocales() throws XWikiException\n    {\n        return this.doc.getTranslationLocales(getXWikiContext());\n    }\n\n    /**\n     * @return the translated document's content if the wiki is multilingual, the locale is first checked in the URL,\n     *         the cookie, the user profile and finally the wiki configuration if not, the locale is the one on the wiki\n     *         configuration.\n     */\n    public String getTranslatedContent() throws XWikiException\n    {\n        return this.doc.getTranslatedContent(getXWikiContext());\n    }\n\n    /**\n     * @return the translated content in the given locale\n     */\n    public String getTranslatedContent(String locale) throws XWikiException\n    {\n        return this.doc.getTranslatedContent(locale, getXWikiContext());\n    }\n\n    /**\n     * @return the translated document in the given locale\n     */\n    public Document getTranslatedDocument(String locale) throws XWikiException\n    {\n        return this.doc.getTranslatedDocument(locale, getXWikiContext()).newDocument(getXWikiContext());\n    }\n\n    /**\n     * @return the tranlated Document if the wiki is multilingual, the locale is first checked in the URL, the cookie,\n     *         the user profile and finally the wiki configuration if not, the locale is the one on the wiki\n     *         configuration.\n     */\n    public Document getTranslatedDocument() throws XWikiException\n    {\n        return this.doc.getTranslatedDocument(getXWikiContext()).newDocument(getXWikiContext());\n    }\n\n    /**\n     * @param targetSyntax the syntax in which to render the document content\n     * @return the content of the current document rendered.\n     * @since 11.3RC1\n     */\n    public String displayDocument(Syntax targetSyntax) throws XWikiException\n    {\n        return this.doc.displayDocument(targetSyntax, getXWikiContext());\n    }\n\n    /**\n     * @param targetSyntax the syntax in which to render the document content\n     * @param restricted see {@link DocumentDisplayerParameters#isTransformationContextRestricted}.\n     * @return the content of the current document rendered.\n     * @since 11.5RC1\n     */\n    public String displayDocument(Syntax targetSyntax, boolean restricted) throws XWikiException\n    {\n        return this.doc.displayDocument(targetSyntax, restricted, getXWikiContext());\n    }\n\n    /**\n     * @return the content of the current document rendered.\n     * @since 11.3RC1\n     */\n    public String displayDocument() throws XWikiException\n    {\n        return this.doc.displayDocument(getXWikiContext());\n    }\n\n    /**\n     * @return the content of the current document rendered.\n     * @param restricted see {@link DocumentDisplayerParameters#isTransformationContextRestricted}.\n     * @since 11.5RC1\n     */\n    public String displayDocument(boolean restricted) throws XWikiException\n    {\n        return this.doc.displayDocument(restricted, getXWikiContext());\n    }\n\n    /**\n     * @return the content of the document or its translations rendered.\n     */\n    public String getRenderedContent() throws XWikiException\n    {\n        return this.doc.getRenderedContent(getXWikiContext());\n    }\n\n    /**\n     * Execute and render the document in the current context.\n     * <p>\n     * The code is executed with right of this document content author.\n     * \n     * @param transformationContextIsolated see {@link DocumentDisplayerParameters#isTransformationContextIsolated()}\n     * @return the result\n     * @throws XWikiException when failing to display the document\n     * @since 8.4RC1\n     */\n    public String getRenderedContent(boolean transformationContextIsolated) throws XWikiException\n    {\n        return this.doc.getRenderedContent(transformationContextIsolated, getXWikiContext());\n    }\n\n    /**\n     * @param text the text to render\n     * @return the given text rendered in the context of this document\n     * @deprecated since 1.6M1 use {@link #getRenderedContent(String, String)}\n     */\n    @Deprecated\n    public String getRenderedContent(String text) throws XWikiException\n    {\n        return getRenderedContent(text, Syntax.XWIKI_1_0.toIdString());\n    }\n\n    /**\n     * @param text the text to render\n     * @param syntaxId the id of the Syntax used by the passed text (for example: \"xwiki/1.0\")\n     * @return the given text rendered in the context of this document using the passed Syntax\n     * @since 1.6M1\n     */\n    public String getRenderedContent(String text, String syntaxId) throws XWikiException\n    {\n        return getRenderedContent(text, syntaxId, false);\n    }\n\n    /**\n     * Render a text in a restricted mode, where script macros are completely disabled.\n     *\n     * @param text the text to render\n     * @param syntaxId the id of the Syntax used by the passed text (for example: \"xwiki/1.0\")\n     * @return the given text rendered in the context of this document using the passed Syntax\n     * @since 4.2M1\n     */\n    public String getRenderedContentRestricted(String text, String syntaxId) throws XWikiException\n    {\n        return getRenderedContent(text, syntaxId, true);\n    }\n\n    /**\n     * Render a text in a restricted mode, where script macros are completely disabled.\n     *\n     * @param text the text to render\n     * @param syntaxId the id of the Syntax used by the passed text (for example: \"xwiki/1.0\")\n     * @param restricted see {@link DocumentDisplayerParameters#isTransformationContextRestricted}.\n     * @return the given text rendered in the context of this document using the passed Syntax\n     */\n    private String getRenderedContent(String text, String syntaxId, boolean restricted) throws XWikiException\n    {\n        // Make sure we keep using current author as passed content author\n        return this.doc.getRenderedContent(text, syntaxId, restricted, getCallerDocument(getXWikiContext()),\n            getXWikiContext());\n    }\n\n    /**\n     * @param text the text to render\n     * @param sourceSyntaxId the id of the Syntax used by the passed text (for example: \"xwiki/1.0\")\n     * @param targetSyntaxId the id of the syntax in which to render the document content\n     * @return the given text rendered in the context of this document using the passed Syntax\n     * @since 2.0M3\n     */\n    public String getRenderedContent(String text, String sourceSyntaxId, String targetSyntaxId) throws XWikiException\n    {\n        // Make sure we keep using current author as passed content author\n        return this.doc.getRenderedContent(text, sourceSyntaxId, targetSyntaxId, false,\n            getCallerDocument(getXWikiContext()), getXWikiContext());\n    }\n\n    private XWikiDocument getCallerDocument(XWikiContext xcontext)\n    {\n        XWikiDocument sdoc = (XWikiDocument) xcontext.get(\"sdoc\");\n        if (sdoc == null) {\n            sdoc = xcontext.getDoc();\n        }\n\n        return sdoc;\n    }\n\n    /**\n     * @param targetSyntax the syntax in which to render the document content\n     * @return the rendered content\n     * @throws XWikiException error when rendering content\n     */\n    public String getRenderedContent(Syntax targetSyntax) throws XWikiException\n    {\n        return this.doc.getRenderedContent(targetSyntax, getXWikiContext());\n    }\n\n    /**\n     * Get the document's content XML-escaped.\n     *\n     * @return an XML-escaped version of the content of this document.\n     */\n    public String getEscapedContent() throws XWikiException\n    {\n        return this.doc.getEscapedContent(getXWikiContext());\n    }\n\n    /**\n     * @return the archive of this document's history in string format\n     */\n    public String getArchive() throws XWikiException\n    {\n        return this.doc.getDocumentArchive(getXWikiContext()).getArchive(getXWikiContext());\n    }\n\n    /**\n     * Get the archive of this document's history. This function is accessible only if you have the programming rights.\n     *\n     * @return the archive of this document's history as an {@link XWikiDocumentArchive}.\n     */\n    public XWikiDocumentArchive getDocumentArchive() throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            return this.doc.getDocumentArchive(getXWikiContext());\n        }\n        return null;\n    }\n\n    /**\n     * @return true if the document is a new one (ie it has never been saved) or false otherwise\n     */\n    public boolean isNew()\n    {\n        return this.doc.isNew();\n    }\n\n    /**\n     * Return the relative URL of download for the the given attachment name.\n     *\n     * @param filename the name of the attachment\n     * @return A String with the URL or null if the file name is empty\n     */\n    public String getAttachmentURL(String filename)\n    {\n        return this.doc.getAttachmentURL(filename, getXWikiContext());\n    }\n\n    /**\n     * Get the relative URL of the given action for the the given attachment name.\n     *\n     * @param filename the name of the attachment.\n     * @param action what to do to the file for example \"delattachment\", \"download\" or \"downloadrev\".\n     * @return a string representation of a URL to do the given operation or null if the file name is empty\n     */\n    public String getAttachmentURL(String filename, String action)\n    {\n        return this.doc.getAttachmentURL(filename, action, getXWikiContext());\n    }\n\n    /**\n     * Get the relative URL of an action on an attachment. the given action for the the given attachment name with\n     * \"queryString\" parameters\n     *\n     * @param filename the name of the attachment.\n     * @param action what to do to the file for example \"delattachment\", \"download\" or \"downloadrev\"\n     * @param queryString parameters added to the URL, the \"rev\" parameter is used to specify a revision if using the\n     *            \"downloadrev\" action. The query string must not begin with an ? character.\n     * @return a string representation of a URL to do the given operation or null if the file name is empty\n     */\n    public String getAttachmentURL(String filename, String action, String queryString)\n    {\n        return this.doc.getAttachmentURL(filename, action, queryString, getXWikiContext());\n    }\n\n    /**\n     * Get an old revision of an attachment.\n     *\n     * @param filename the name of the attachment.\n     * @param version a revision number such as \"1.1\" or \"1.2\".\n     * @return the URL for accessing to the archive of the attachment \"filename\" at the version \"version\" or null if the\n     *         file name is empty\n     */\n    public String getAttachmentRevisionURL(String filename, String version)\n    {\n        return this.doc.getAttachmentRevisionURL(filename, version, getXWikiContext());\n    }\n\n    /**\n     * Get an old revision of an attachment.\n     *\n     * @param filename the name of the attachment.\n     * @param version a revision number such as \"1.1\" or \"1.2\".\n     * @param queryString additional query parameters to pass in the request.\n     * @return the URL for accessing to the archive of the attachment \"filename\" at the version \"version\" with the given\n     *         queryString parameters or null if the file name is empty\n     */\n    public String getAttachmentRevisionURL(String filename, String version, String queryString)\n    {\n        return this.doc.getAttachmentRevisionURL(filename, version, queryString, getXWikiContext());\n    }\n\n    /**\n     * Get the URL of this document.\n     *\n     * @return the URL to view this document, this will be a relative URL for example: /xwiki/bin/view/Main/WebHome\n     * @see #getExternalURL() for an absolute URL which can used outside of the site.\n     */\n    public String getURL()\n    {\n        return this.doc.getURL(\"view\", getXWikiContext());\n    }\n\n    /**\n     * Get the URL to do a given action on this document.\n     *\n     * @param action what to do to the document for example \"view\", \"edit\" or \"inline\".\n     * @return the URL of this document with the given action.\n     * @see #getExternalURL(String) for an absolute URL which can used outside of the site.\n     */\n    public String getURL(String action)\n    {\n        return this.doc.getURL(action, getXWikiContext());\n    }\n\n    /**\n     * Get the URL to do a given action on this document.\n     *\n     * @param action what to do to the document for example \"view\", \"edit\" or \"inline\".\n     * @param queryString parameters to pass in the request eg: {@code paramA=value1&paramB=value2}\n     * @return the URL of this document with the given action and queryString as parameters.\n     * @see #getExternalURL(String, String) for an absolute URL which can used outside of the site.\n     */\n    public String getURL(String action, String queryString)\n    {\n        return this.doc.getURL(action, queryString, getXWikiContext());\n    }\n\n    /**\n     * Get the external URL to do a given action on this document.\n     *\n     * @return the full URL of the document, sutable for use at external websites for example:\n     *         http://www.xwiki.org/xwiki/bin/view/Main/WebHome\n     * @see #getURL() for a relative URL which can only be used inside of the site.\n     */\n    public String getExternalURL()\n    {\n        return this.doc.getExternalURL(\"view\", getXWikiContext());\n    }\n\n    /**\n     * Get the external URL to do a given action on this document.\n     *\n     * @param action what to do to the document for example \"view\", \"edit\" or \"inline\".\n     * @return the URL of this document with the given action.\n     * @see #getURL() for a relative URL which can only be used inside of the site.\n     */\n    public String getExternalURL(String action)\n    {\n        return this.doc.getExternalURL(action, getXWikiContext());\n    }\n\n    /**\n     * Get the URL to do a given action on this document.\n     *\n     * @param action what to do to the document for example \"view\", \"edit\" or \"inline\".\n     * @param queryString parameters to pass in the request eg: {@code paramA=value1&paramB=value2}\n     * @return the URL of this document with the given action and queryString as parameters.\n     * @see #getURL() for a relative URL which can only be used inside of the site.\n     */\n    public String getExternalURL(String action, String queryString)\n    {\n        return this.doc.getExternalURL(action, queryString, getXWikiContext());\n    }\n\n    /**\n     * @return the relative URL of the parent document of this document\n     */\n    public String getParentURL() throws XWikiException\n    {\n        return this.doc.getParentURL(getXWikiContext());\n    }\n\n    /**\n     * @return the XClass associated to this document when the document represents an XWiki Class\n     */\n    public Class getxWikiClass()\n    {\n        BaseClass bclass = this.getDoc().getXClass();\n        if (bclass == null) {\n            return null;\n        } else {\n            return new Class(bclass, getXWikiContext());\n        }\n    }\n\n    /**\n     * @return the array of XClasses representing the objects of this document\n     */\n    public Class[] getxWikiClasses()\n    {\n        List<BaseClass> list = this.getDoc().getXClasses(getXWikiContext());\n        if (list == null) {\n            return null;\n        }\n        Class[] result = new Class[list.size()];\n        for (int i = 0; i < list.size(); i++) {\n            result[i] = new Class(list.get(i), getXWikiContext());\n        }\n        return result;\n    }\n\n    /**\n     * Creates a New XWiki Object of the given classname\n     *\n     * @param classname the classname used\n     * @return the number of the object created\n     */\n    public int createNewObject(String classname) throws XWikiException\n    {\n        int index = getDoc().createNewObject(classname, getXWikiContext());\n\n        updateAuthor();\n\n        return index;\n    }\n\n    /**\n     * Creates a New XWiki Object of the given classname\n     *\n     * @param classname the classname used\n     * @return the object created\n     */\n    public Object newObject(String classname) throws XWikiException\n    {\n        int nb = createNewObject(classname);\n        return getObject(classname, nb);\n    }\n\n    /**\n     * @return true of the document has been loaded from cache\n     */\n    public boolean isFromCache()\n    {\n        return this.doc.isFromCache();\n    }\n\n    /**\n     * @param classname the classname used\n     * @return the number of objects available for a given classname\n     */\n    public int getObjectNumbers(String classname)\n    {\n        return this.doc.getObjectNumbers(classname);\n    }\n\n    /**\n     * Get the list of all objects available in this document organized in a Map by classname\n     *\n     * @return the map of objects\n     */\n    public Map<String, Vector<Object>> getxWikiObjects()\n    {\n        Map<DocumentReference, List<BaseObject>> map = this.getDoc().getXObjects();\n        Map<String, Vector<Object>> resultmap = new HashMap<String, Vector<Object>>();\n        for (Map.Entry<DocumentReference, List<BaseObject>> entry : map.entrySet()) {\n            List<BaseObject> objects = entry.getValue();\n            if (objects != null) {\n                resultmap.put(getLocalEntityReferenceSerializer().serialize(entry.getKey()), getXObjects(objects));\n            }\n        }\n        return resultmap;\n    }\n\n    protected Vector<Object> getXObjects(List<BaseObject> objects)\n    {\n        if (objects == null) {\n            return new Vector<Object>(0);\n        }\n        Vector<Object> result = new Vector<Object>(objects.size());\n        for (BaseObject bobj : objects) {\n            if (bobj != null) {\n                result.add(newObjectApi(bobj, getXWikiContext()));\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Get the list of objects for a given classname classname\n     *\n     * @return the vector of objects\n     */\n    public Vector<Object> getObjects(String className)\n    {\n        List<BaseObject> objects = this.getDoc().getXObjects(this.doc.resolveClassReference(className));\n        return getXObjects(objects);\n    }\n\n    /**\n     * Get the first object that contains the given fieldname\n     *\n     * @param fieldname name of the field to find in the object\n     * @return the XWiki Object\n     */\n    public Object getFirstObject(String fieldname)\n    {\n        try {\n            BaseObject obj = this.getDoc().getFirstObject(fieldname, getXWikiContext());\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Get the first object of a given classname that has a field name matching the given value\n     *\n     * @param classname name of the class of the object to look for\n     * @param key name of the field to find in the object\n     * @param value value of the field to find in the object\n     * @param failover true if the first object will be given when none found\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname, String key, String value, boolean failover)\n    {\n        try {\n            BaseObject obj = this.getDoc().getObject(classname, key, value, failover);\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Select a subset of objects from a given class, filtered on a \"key = value\" criteria.\n     *\n     * @param classname The type of objects to return.\n     * @param key The name of the property used for filtering.\n     * @param value The required value.\n     * @return A Vector of {@link Object objects} matching the criteria. If no objects are found, or if the key is an\n     *         empty String, then an empty vector is returned.\n     */\n    public Vector<Object> getObjects(String classname, String key, String value)\n    {\n        Vector<Object> result = new Vector<Object>();\n        if (StringUtils.isBlank(key) || value == null) {\n            return getObjects(classname);\n        }\n        try {\n            Vector<BaseObject> allObjects = this.getDoc().getObjects(classname);\n            if (allObjects == null || allObjects.size() == 0) {\n                return result;\n            } else {\n                for (BaseObject obj : allObjects) {\n                    if (obj != null) {\n                        BaseProperty prop = (BaseProperty) obj.get(key);\n                        if (prop == null || prop.getValue() == null) {\n                            continue;\n                        }\n                        if (value.equals(prop.getValue().toString())) {\n                            result.add(newObjectApi(obj, getXWikiContext()));\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n        }\n        return result;\n    }\n\n    /**\n     * Get the first object of a given classname that has a field name matching the given value When none found this\n     * method will return null\n     *\n     * @param classname name of the class of the object to look for\n     * @param key name of the field to find in the object\n     * @param value value of the field to find in the object\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname, String key, String value)\n    {\n        try {\n            BaseObject obj = this.getDoc().getObject(classname, key, value);\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Get the first object matching the given classname\n     *\n     * @param classname name of the class of the object to look for\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname)\n    {\n        return getObject(classname, false);\n    }\n\n    /**\n     * get the object of the given className. If there is no object of this className and the create parameter at true,\n     * the object is created.\n     *\n     * @param classname name of the class of the object to look for\n     * @param create true of the object should be created when it does not exist\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname, boolean create)\n    {\n        try {\n            BaseObject obj = getDoc().getObject(classname, create, getXWikiContext());\n\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * Get the object matching the given classname and given object number\n     *\n     * @param classname name of the class of the object\n     * @param nb number of the object\n     * @return the XWiki Object\n     */\n    public Object getObject(String classname, int nb)\n    {\n        try {\n            BaseObject obj = this.getDoc().getObject(classname, nb);\n            if (obj == null) {\n                return null;\n            } else {\n                return newObjectApi(obj, getXWikiContext());\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    /**\n     * @param objectReference the object reference\n     * @return the XWiki object from this document that matches the specified object reference\n     * @since 12.3RC1\n     */\n    public Object getObject(ObjectReference objectReference)\n    {\n        try {\n            BaseObject obj = this.getDoc().getXObject(objectReference);\n            return obj == null ? null : newObjectApi(obj, getXWikiContext());\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    private Object newObjectApi(BaseObject obj, XWikiContext context)\n    {\n        return obj.newObjectApi(obj, context);\n    }\n\n    public String getXMLContent() throws XWikiException\n    {\n        String xml = this.doc.getXMLContent(getXWikiContext());\n        return getXWikiContext().getUtil().substitute(\"s/<email>.*?<\\\\/email>/<email>********<\\\\/email>/goi\",\n            getXWikiContext().getUtil().substitute(\"s/<password>.*?<\\\\/password>/<password>********<\\\\/password>/goi\",\n                xml));\n    }\n\n    public String toXML() throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            return this.doc.toXML(getXWikiContext());\n        } else {\n            return \"\";\n        }\n    }\n\n    public org.dom4j.Document toXMLDocument() throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            return this.doc.toXMLDocument(getXWikiContext());\n        } else {\n            return null;\n        }\n    }\n\n    public Version[] getRevisions() throws XWikiException\n    {\n        return this.doc.getRevisions(getXWikiContext());\n    }\n\n    public String[] getRecentRevisions() throws XWikiException\n    {\n        return this.doc.getRecentRevisions(5, getXWikiContext());\n    }\n\n    public String[] getRecentRevisions(int nb) throws XWikiException\n    {\n        return this.doc.getRecentRevisions(nb, getXWikiContext());\n    }\n\n    /**\n     * Get document versions matching criterias like author, minimum creation date, etc.\n     *\n     * @param criteria criteria used to match versions\n     * @return a list of matching versions\n     */\n    public List<String> getRevisions(RevisionCriteria criteria) throws XWikiException\n    {\n        return this.doc.getRevisions(criteria, this.context);\n    }\n\n    /**\n     * Get information about a document version : author, date, etc.\n     *\n     * @param version the version you want to get information about\n     * @return a new RevisionInfo object\n     */\n    public RevisionInfo getRevisionInfo(String version) throws XWikiException\n    {\n        return new RevisionInfo(this.doc.getRevisionInfo(version, getXWikiContext()), getXWikiContext());\n    }\n\n    public List<Attachment> getAttachmentList()\n    {\n        List<Attachment> apis = new ArrayList<Attachment>();\n        for (XWikiAttachment attachment : this.getDoc().getAttachmentList()) {\n            apis.add(new Attachment(this, attachment, getXWikiContext()));\n        }\n        return apis;\n    }\n\n    public Vector<Object> getComments()\n    {\n        return getComments(true);\n    }\n\n    public Vector<Object> getComments(boolean asc)\n    {\n        return getXObjects(this.getDoc().getComments(asc));\n    }\n\n    /**\n     * Setting the current object to the given object. Following calls to display() will use this object as the\n     * reference for finding properties.\n     *\n     * @param object Object to use as a reference for further display calls\n     */\n    public void use(Object object)\n    {\n        this.currentObj = object;\n    }\n\n    /**\n     * Setting the current object to the first object of the given class name. Following calls to display() will use\n     * this object as the reference for finding properties.\n     *\n     * @param className class used to find the first object to use as the reference for display calls\n     */\n    public void use(String className)\n    {\n        this.currentObj = getObject(className);\n    }\n\n    /**\n     * Setting the current object to the object of the given class name and the given number. Following calls to\n     * display() will use this object as the reference for finding properties.\n     *\n     * @param className class used to find the object to use as the reference for display calls\n     * @param nb number of the object to use as the reference for display calls\n     */\n    public void use(String className, int nb)\n    {\n        this.currentObj = getObject(className, nb);\n    }\n\n    /**\n     * @return the className of the current active object use for display calls.\n     */\n    public String getActiveClass()\n    {\n        if (this.currentObj == null) {\n            return null;\n        } else {\n            return this.currentObj.getName();\n        }\n    }\n\n    /**\n     * Displays the pretty name of the given field. This function uses the active object or will find the first object\n     * that has the given field.\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname)\n    {\n        if (this.currentObj == null) {\n            return this.doc.displayPrettyName(fieldname, getXWikiContext());\n        } else {\n            return this.doc.displayPrettyName(fieldname, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the pretty name of the given field of the given object.\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param obj Object to find the class to display the pretty name of\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.displayPrettyName(fieldname, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the pretty name of the given field. This function uses the active object or will find the first object\n     * that has the given field. with the optional addition of a mandatory field.\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param showMandatory true to display a mandatory sign\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, boolean showMandatory)\n    {\n        if (this.currentObj == null) {\n            return this.doc.displayPrettyName(fieldname, showMandatory, getXWikiContext());\n        } else {\n            return this.doc.displayPrettyName(fieldname, showMandatory, this.currentObj.getBaseObject(),\n                getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the pretty name of the given field of the given object. with the optional addition of a mandatory field.\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param obj Object to find the class to display the pretty name of\n     * @param showMandatory true to display a mandatory sign\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, boolean showMandatory, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.displayPrettyName(fieldname, showMandatory, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the pretty name of the given field. This function uses the active object or will find the first object\n     * that has the given field. with the optional addition of a mandatory field before or after the field\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param showMandatory true to display a mandatory sign\n     * @param before true if the mandatory sign should be before the field\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, boolean showMandatory, boolean before)\n    {\n        if (this.currentObj == null) {\n            return this.doc.displayPrettyName(fieldname, showMandatory, before, getXWikiContext());\n        } else {\n            return this.doc.displayPrettyName(fieldname, showMandatory, before, this.currentObj.getBaseObject(),\n                getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the pretty name of the given field of the given object. with the optional addition of a mandatory field\n     * before or after the field\n     *\n     * @param fieldname fieldname to display the pretty name of\n     * @param showMandatory true to display a mandatory sign\n     * @param before true if the mandatory sign should be before the field\n     * @param obj Object to find the class to display the pretty name of\n     * @return the pretty name display of the field.\n     */\n    public String displayPrettyName(String fieldname, boolean showMandatory, boolean before, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.displayPrettyName(fieldname, showMandatory, before, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the tooltip of the given field. This function uses the active object or will find the first object that\n     * has the given field.\n     *\n     * @param fieldname fieldname to display the tooltip of\n     * @return the tooltip display of the field.\n     */\n    public String displayTooltip(String fieldname)\n    {\n        if (this.currentObj == null) {\n            return this.doc.displayTooltip(fieldname, getXWikiContext());\n        } else {\n            return this.doc.displayTooltip(fieldname, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the tooltip of the given field of the given object.\n     *\n     * @param fieldname fieldname to display the tooltip of\n     * @param obj Object to find the class to display the tooltip of\n     * @return the tooltip display of the field.\n     */\n    public String displayTooltip(String fieldname, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.displayTooltip(fieldname, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the given field. The display mode will be decided depending on page context (edit or inline context will\n     * display in edit, view context in view) This function uses the active object or will find the first object that\n     * has the given field. This function can return html inside and html macro\n     *\n     * @param fieldname fieldname to display\n     * @return the display of the field.\n     */\n    public String display(String fieldname)\n    {\n        if (this.currentObj == null) {\n            return this.doc.display(fieldname, getXWikiContext());\n        } else {\n            return this.doc.display(fieldname, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the given field in the given mode. This function uses the active object or will find the first object\n     * that has the given field. This function can return html inside and html macro\n     *\n     * @param fieldname fieldname to display\n     * @param mode display mode to use (view, edit, hidden, search)\n     * @return the display of the field.\n     */\n    public String display(String fieldname, String mode)\n    {\n        if (this.currentObj == null) {\n            return this.doc.display(fieldname, mode, getXWikiContext());\n        } else {\n            return this.doc.display(fieldname, mode, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the given field in the given mode. This function uses the active object or will find the first object\n     * that has the given field. This function can return html inside and html macro A given prefix is added to the\n     * field names when these are forms.\n     *\n     * @param fieldname fieldname to display\n     * @param mode display mode to use (view, edit, hidden, search)\n     * @param prefix prefix to use for the form names\n     * @return the display of the field.\n     */\n    public String display(String fieldname, String mode, String prefix)\n    {\n        if (this.currentObj == null) {\n            return this.doc.display(fieldname, mode, prefix, getXWikiContext());\n        } else {\n            return this.doc.display(fieldname, mode, prefix, this.currentObj.getBaseObject(), getSyntaxId(),\n                getXWikiContext());\n        }\n    }\n\n    /**\n     * Displays the given field of the given object The display mode will be decided depending on page context (edit or\n     * inline context will display in edit, view context in view) This function can return html inside and html macro\n     *\n     * @param fieldname fieldname to display\n     * @param obj object from which to take the field\n     * @return the display of the field.\n     */\n    public String display(String fieldname, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.display(fieldname, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the given field of the given object using the given mode and syntax rendering The display mode will be\n     * decided depending on page context (edit or inline context will display in edit, view context in view) This\n     * function can return html inside and html macro\n     *\n     * @param fieldname the name of the field to display\n     * @param type the type of the field to display\n     * @param obj the object containing the field to display\n     * @param wrappingSyntaxId the syntax of the content in which the result will be included. This to take care of some\n     *            escaping depending of the syntax.\n     * @return the rendered field\n     */\n    public String display(String fieldname, String type, Object obj, String wrappingSyntaxId)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.display(fieldname, type, obj.getBaseObject(), wrappingSyntaxId, getXWikiContext());\n    }\n\n    /**\n     * Displays the given field of the given object in the given mode. This function can return html inside and html\n     * macro\n     *\n     * @param fieldname fieldname to display\n     * @param mode display mode to use (view, edit, hidden, search)\n     * @param obj the object containing the field to display\n     * @return the display of the field.\n     */\n    public String display(String fieldname, String mode, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.display(fieldname, mode, obj.getBaseObject(), getXWikiContext());\n    }\n\n    /**\n     * Displays the given field of the given object in the given mode. This function can return html inside and html\n     * macro A given prefix is added to the field names when these are forms.\n     *\n     * @param fieldname fieldname to display\n     * @param mode display mode to use (view, edit, hidden, search)\n     * @param prefix prefix to use for the form names\n     * @param obj the object containing the field to display\n     * @return the display of the field.\n     */\n    public String display(String fieldname, String mode, String prefix, Object obj)\n    {\n        if (obj == null) {\n            return \"\";\n        }\n        return this.doc.display(fieldname, mode, prefix, obj.getBaseObject(), getSyntaxId(), getXWikiContext());\n    }\n\n    public String displayForm(String className, String header, String format)\n    {\n        return this.doc.displayForm(className, header, format, getXWikiContext());\n    }\n\n    public String displayForm(String className, String header, String format, boolean linebreak)\n    {\n        return this.doc.displayForm(className, header, format, linebreak, getXWikiContext());\n    }\n\n    public String displayForm(String className)\n    {\n        return this.doc.displayForm(className, getXWikiContext());\n    }\n\n    public String displayRendered(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object)\n        throws XWikiException\n    {\n        if ((pclass == null) || (object == null)) {\n            return \"\";\n        }\n        return this.doc.displayRendered(pclass.getBasePropertyClass(), prefix, object.getCollection(),\n            getXWikiContext());\n    }\n\n    public String displayView(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object)\n    {\n        if ((pclass == null) || (object == null)) {\n            return \"\";\n        }\n        return this.doc.displayView(pclass.getBasePropertyClass(), prefix, object.getCollection(), getXWikiContext());\n    }\n\n    public String displayEdit(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object)\n    {\n        if ((pclass == null) || (object == null)) {\n            return \"\";\n        }\n        return this.doc.displayEdit(pclass.getBasePropertyClass(), prefix, object.getCollection(), getXWikiContext());\n    }\n\n    public String displayHidden(com.xpn.xwiki.api.PropertyClass pclass, String prefix, Collection object)\n    {\n        if ((pclass == null) || (object == null)) {\n            return \"\";\n        }\n        return this.doc.displayHidden(pclass.getBasePropertyClass(), prefix, object.getCollection(), getXWikiContext());\n    }\n\n    public List<String> getIncludedPages()\n    {\n        return this.doc.getIncludedPages(getXWikiContext());\n    }\n\n    public List<String> getIncludedMacros()\n    {\n        return this.doc.getIncludedMacros(getXWikiContext());\n    }\n\n    public List<String> getLinkedPages()\n    {\n        return new ArrayList<String>(this.doc.getUniqueLinkedPages(getXWikiContext()));\n    }\n\n    public Attachment getAttachment(String filename)\n    {\n        XWikiAttachment attach = this.getDoc().getAttachment(filename);\n        if (attach == null) {\n            return null;\n        } else {\n            return new Attachment(this, attach, getXWikiContext());\n        }\n    }\n\n    public List<Delta> getContentDiff(Document origdoc, Document newdoc)\n        throws XWikiException, DifferentiationFailedException\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getContentDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getContentDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getContentDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_CONTENT_ERROR,\n                    \"Error while making content diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<Delta> getXMLDiff(Document origdoc, Document newdoc)\n        throws XWikiException, DifferentiationFailedException\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getXMLDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getXMLDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getXMLDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_XML_ERROR,\n                    \"Error while making xml diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<Delta> getRenderedContentDiff(Document origdoc, Document newdoc)\n        throws XWikiException, DifferentiationFailedException\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getRenderedContentDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getRenderedContentDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getRenderedContentDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_RENDERED_ERROR,\n                    \"Error while making rendered diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<MetaDataDiff> getMetaDataDiff(Document origdoc, Document newdoc) throws XWikiException\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getMetaDataDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getMetaDataDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getMetaDataDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_METADATA_ERROR,\n                    \"Error while making meta data diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<List<ObjectDiff>> getObjectDiff(Document origdoc, Document newdoc)\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getObjectDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getObjectDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getObjectDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_OBJECT_ERROR,\n                    \"Error while making meta object diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<List<ObjectDiff>> getClassDiff(Document origdoc, Document newdoc)\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return this.doc.getClassDiff(new XWikiDocument(newdoc.getDocumentReference()), newdoc.doc,\n                    getXWikiContext());\n            }\n            if (newdoc == null) {\n                return this.doc.getClassDiff(origdoc.doc, new XWikiDocument(origdoc.getDocumentReference()),\n                    getXWikiContext());\n            }\n\n            return this.doc.getClassDiff(origdoc.doc, newdoc.doc, getXWikiContext());\n        } catch (Exception e) {\n            java.lang.Object[] args = { origdoc.getFullName(), origdoc.getVersion(), newdoc.getVersion() };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_CLASS_ERROR,\n                    \"Error while making class diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    public List<AttachmentDiff> getAttachmentDiff(Document origdoc, Document newdoc)\n    {\n        try {\n            if ((origdoc == null) && (newdoc == null)) {\n                return Collections.emptyList();\n            }\n            if (origdoc == null) {\n                return wrapAttachmentDiff(this.doc.getAttachmentDiff(new XWikiDocument(newdoc.getDocumentReference()),\n                    newdoc.doc, getXWikiContext()));\n            }\n            if (newdoc == null) {\n                return wrapAttachmentDiff(this.doc.getAttachmentDiff(origdoc.doc,\n                    new XWikiDocument(origdoc.getDocumentReference()), getXWikiContext()));\n            }\n\n            return wrapAttachmentDiff(this.doc.getAttachmentDiff(origdoc.doc, newdoc.doc, getXWikiContext()));\n        } catch (Exception e) {\n            java.lang.Object[] args = { (origdoc != null) ? origdoc.getFullName() : null,\n            (origdoc != null) ? origdoc.getVersion() : null, (newdoc != null) ? newdoc.getVersion() : null };\n            List list = new ArrayList();\n            XWikiException xe =\n                new XWikiException(XWikiException.MODULE_XWIKI_DIFF, XWikiException.ERROR_XWIKI_DIFF_ATTACHMENT_ERROR,\n                    \"Error while making attachment diff of {0} between version {1} and version {2}\", e, args);\n            String errormsg = Util.getHTMLExceptionMessage(xe, getXWikiContext());\n            list.add(errormsg);\n            return list;\n        }\n    }\n\n    private List<AttachmentDiff> wrapAttachmentDiff(List<com.xpn.xwiki.doc.AttachmentDiff> diffs)\n    {\n        List<AttachmentDiff> safeAttachmentDiffs = new ArrayList<>();\n        for (com.xpn.xwiki.doc.AttachmentDiff diff : diffs) {\n            safeAttachmentDiffs.add(new AttachmentDiff(diff, getXWikiContext()));\n        }\n        return safeAttachmentDiffs;\n    }\n\n    public List<Delta> getLastChanges() throws XWikiException, DifferentiationFailedException\n    {\n        return this.doc.getLastChanges(getXWikiContext());\n    }\n\n    /**\n     * Get statistics about the number of request for the current page during the current month.\n     *\n     * @param action the type of request for which to retrieve statistics: view, edit...\n     * @return the statistics object holding information for this document and the current month\n     */\n    public DocumentStats getCurrentMonthPageStats(String action)\n    {\n        Scope scope = ScopeFactory.createPageScope(this.getFullName());\n        Range range = RangeFactory.ALL;\n        Period period = PeriodFactory.getCurrentMonth();\n        XWikiStatsService statisticsService = getXWikiContext().getWiki().getStatsService(getXWikiContext());\n        List<DocumentStats> stats = statisticsService.getDocumentStatistics(action, scope, period, range, this.context);\n        if (stats.size() > 0) {\n            return stats.get(0);\n        }\n        return new DocumentStats();\n    }\n\n    /**\n     * Get statistics about the number of request for the current space during the current month.\n     *\n     * @param action the type of request for which to retrieve statistics: view, edit...\n     * @return the statistics object holding information for the document's space and the current month\n     */\n    public DocumentStats getCurrentMonthSpaceStats(String action)\n    {\n        Scope scope = ScopeFactory.createSpaceScope(this.doc.getSpace(), false);\n        Range range = RangeFactory.ALL;\n        Period period = PeriodFactory.getCurrentMonth();\n        XWikiStatsService statisticsService = getXWikiContext().getWiki().getStatsService(getXWikiContext());\n        List<DocumentStats> stats = statisticsService.getDocumentStatistics(action, scope, period, range, this.context);\n        if (stats.size() > 0) {\n            return stats.get(0);\n        }\n        return new DocumentStats();\n    }\n\n    /**\n     * Get referer statistics for the current document during the current month.\n     *\n     * @return a list of referer statistics for the document's space\n     */\n    public List<RefererStats> getCurrentMonthRefStats()\n    {\n        Scope scope = ScopeFactory.createPageScope(this.getFullName());\n        Range range = RangeFactory.ALL;\n        Period period = PeriodFactory.getCurrentMonth();\n        XWikiStatsService statisticsService = getXWikiContext().getWiki().getStatsService(getXWikiContext());\n        List<RefererStats> stats = statisticsService.getRefererStatistics(\"\", scope, period, range, this.context);\n        return stats;\n    }\n\n    public boolean checkAccess(String right)\n    {\n        try {\n            return getXWikiContext().getWiki().checkAccess(right, this.doc, getXWikiContext());\n        } catch (XWikiException e) {\n            return false;\n        }\n    }\n\n    public boolean hasAccessLevel(String level)\n    {\n        try {\n            return getXWikiContext().getWiki().getRightService().hasAccessLevel(level, getXWikiContext().getUser(),\n                this.getPrefixedFullName(), getXWikiContext());\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    @Override\n    public boolean hasAccessLevel(String level, String user)\n    {\n        try {\n            return getXWikiContext().getWiki().getRightService().hasAccessLevel(level, user, this.getPrefixedFullName(),\n                getXWikiContext());\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    /**\n     * Verifies if the user identified by {@code userReference} has the access identified by {@code right} on this\n     * document.\n     * \n     * @param right the right to check\n     * @param userReference the user to check the right for\n     * @return {@code true} if the user has the specified right on this document, {@code false} otherwise\n     * @since 10.6RC1\n     */\n    public boolean hasAccess(Right right, DocumentReference userReference)\n    {\n        return getAuthorizationManager().hasAccess(right, userReference, getDocumentReference());\n    }\n\n    public boolean getLocked()\n    {\n        try {\n            XWikiLock lock = this.doc.getLock(getXWikiContext());\n            if (lock != null && !getXWikiContext().getUser().equals(lock.getUserName())) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public String getLockingUser()\n    {\n        try {\n            XWikiLock lock = this.doc.getLock(getXWikiContext());\n            if (lock != null && !getXWikiContext().getUser().equals(lock.getUserName())) {\n                return lock.getUserName();\n            } else {\n                return \"\";\n            }\n        } catch (XWikiException e) {\n            return \"\";\n        }\n    }\n\n    public Date getLockingDate()\n    {\n        try {\n            XWikiLock lock = this.doc.getLock(getXWikiContext());\n            if (lock != null && !getXWikiContext().getUser().equals(lock.getUserName())) {\n                return lock.getDate();\n            } else {\n                return null;\n            }\n        } catch (XWikiException e) {\n            return null;\n        }\n    }\n\n    public java.lang.Object get(String classOrFieldName)\n    {\n        if (this.currentObj != null) {\n            return this.doc.display(classOrFieldName, this.currentObj.getBaseObject(), getXWikiContext());\n        }\n        BaseObject object = this.doc.getFirstObject(classOrFieldName, getXWikiContext());\n        if (object != null) {\n            return this.doc.display(classOrFieldName, object, getXWikiContext());\n        }\n        return this.getDoc().getObject(classOrFieldName);\n    }\n\n    public java.lang.Object getValue(String fieldName)\n    {\n        Object object;\n        if (this.currentObj == null) {\n            object = new Object(this.getDoc().getFirstObject(fieldName, getXWikiContext()), getXWikiContext());\n        } else {\n            object = this.currentObj;\n        }\n        return getValue(fieldName, object);\n    }\n\n    public java.lang.Object getValue(String fieldName, Object object)\n    {\n        if (object != null) {\n            return object.getValue(fieldName);\n        }\n\n        return null;\n    }\n\n    public String getTextArea()\n    {\n        return com.xpn.xwiki.XWiki.getTextArea(this.doc.getContent(), getXWikiContext());\n    }\n\n    /**\n     * Returns data needed for a generation of Table of Content for this document.\n     *\n     * @param init an intial level where the TOC generation should start at\n     * @param max maximum level TOC is generated for\n     * @param numbered if should generate numbering for headings\n     * @return a map where an heading (title) ID is the key and value is another map with two keys: text, level and\n     *         numbering\n     */\n    public Map<String, Map<String, java.lang.Object>> getTOC(int init, int max, boolean numbered)\n    {\n        getXWikiContext().put(\"tocNumbered\", new Boolean(numbered));\n        return TOCGenerator.generateTOC(getContent(), init, max, numbered, getXWikiContext());\n    }\n\n    public String getTags()\n    {\n        return this.doc.getTags(getXWikiContext());\n    }\n\n    public List<String> getTagList()\n    {\n        return this.getDoc().getTagsList(getXWikiContext());\n    }\n\n    public List<String> getTagsPossibleValues()\n    {\n        return this.doc.getTagsPossibleValues(getXWikiContext());\n    }\n\n    public void insertText(String text, String marker) throws XWikiException\n    {\n        if (hasAccessLevel(\"edit\")) {\n            getDoc().insertText(text, marker, getXWikiContext());\n\n            updateAuthor();\n            updateContentAuthor();\n        }\n    }\n\n    @Override\n    public boolean equals(java.lang.Object arg0)\n    {\n        if (!(arg0 instanceof Document)) {\n            return false;\n        }\n        Document d = (Document) arg0;\n        return d.getXWikiContext().equals(getXWikiContext()) && this.doc.equals(d.doc);\n    }\n\n    /**\n     * Check if the passed one is the one wrapped by this {@link Document}.\n     * \n     * @param document the document to compare\n     * @return true if passed document is the wrapped one\n     * @since 8.3M1\n     */\n    public boolean same(XWikiDocument document)\n    {\n        return document == this.doc || document == this.initialDoc;\n    }\n\n    public List<String> getBacklinks() throws XWikiException\n    {\n        return this.doc.getBackLinkedPages(getXWikiContext());\n    }\n\n    /**\n     * Retrieve the references of the page containing a link to the current page.\n     *\n     * @return a list of references of the page containing a link to the current page.\n     * @throws XWikiException in case of problem to perform the query.\n     * @since 12.5RC1\n     */\n    @Unstable\n    public List<DocumentReference> getBackLinkedReferences() throws XWikiException\n    {\n        return this.doc.getBackLinkedReferences(getXWikiContext());\n    }\n\n    public List<XWikiLink> getLinks() throws XWikiException\n    {\n        return new ArrayList<XWikiLink>(this.doc.getUniqueWikiLinkedPages(getXWikiContext()));\n    }\n\n    /**\n     * Get the top sections contained in the document.\n     * <p>\n     * The section are filtered by xwiki.section.depth property on the maximum depth of the sections to return. This\n     * method is usually used to get \"editable\" sections.\n     *\n     * @return the sections in the current document\n     */\n    public List<DocumentSection> getSections() throws XWikiException\n    {\n        return this.doc.getSections();\n    }\n\n    /**\n     * Get document children. Children are documents with the current document as parent.\n     *\n     * @return The list of children for the current document.\n     * @since 1.8 Milestone 2\n     */\n    public List<String> getChildren() throws XWikiException\n    {\n        return this.doc.getChildren(getXWikiContext());\n    }\n\n    /**\n     * Get document children references. Children are documents with the current document as parent.\n     * @return The list of children for the current document.\n     * @throws XWikiException in case of problem to query the children.\n     * @since 12.5RC1\n     */\n    @Unstable\n    public List<DocumentReference> getChildrenReferences() throws XWikiException\n    {\n        return this.doc.getChildrenReferences(getXWikiContext());\n    }\n\n    /**\n     * Get document children. Children are documents with the current document as parent. Where a document has a large\n     * number of children, one may desire to return a certain number of children (nb) and skip some number (start) of\n     * the first results.\n     *\n     * @param nb The number of results to return.\n     * @param start The number of results to skip before we begin returning results.\n     * @return The list of children for the current document.\n     */\n    public List<String> getChildren(int nb, int start) throws XWikiException\n    {\n        return this.doc.getChildren(nb, start, getXWikiContext());\n    }\n\n    /**\n     * Gets the default edit mode for this document. An edit mode (other than the default \"edit\") can be enforced by\n     * creating an {@code XWiki.EditModeClass} object in the current document, with the appropriate value for the\n     * defaultEditMode property, or by adding this object in a sheet included by the document. This function also falls\n     * back on the old {@code SheetClass}, deprecated since 3.1M2, which can be attached to included documents to\n     * specify that the current document should be edited inline.\n     *\n     * @return the default edit mode for this document (\"edit\" or \"inline\" usually)\n     * @throws XWikiException since XWiki 6.3M1 it's not used anymore and \"edit\" is returned in case of error, with an\n     *             error log\n     */\n    public String getDefaultEditMode() throws XWikiException\n    {\n        return this.doc.getDefaultEditMode(getXWikiContext());\n    }\n\n    public String getDefaultEditURL() throws XWikiException\n    {\n        return this.doc.getDefaultEditURL(getXWikiContext());\n    }\n\n    public String getEditURL(String action, String mode) throws XWikiException\n    {\n        return this.doc.getEditURL(action, mode, getXWikiContext());\n    }\n\n    public String getEditURL(String action, String mode, String locale)\n    {\n        return this.doc.getEditURL(action, mode, locale, getXWikiContext());\n    }\n\n    public boolean isCurrentUserCreator()\n    {\n        return this.doc.isCurrentUserCreator(getXWikiContext());\n    }\n\n    public boolean isCurrentUserPage()\n    {\n        return this.doc.isCurrentUserPage(getXWikiContext());\n    }\n\n    public boolean isCurrentLocalUserPage()\n    {\n        return this.doc.isCurrentLocalUserPage(getXWikiContext());\n    }\n\n    public boolean isCreator(String username)\n    {\n        return this.doc.isCreator(username);\n    }\n\n    public void set(String fieldname, java.lang.Object value)\n    {\n        Object obj;\n        if (this.currentObj != null) {\n            obj = this.currentObj;\n        } else {\n            obj = getFirstObject(fieldname);\n        }\n        set(fieldname, value, obj);\n    }\n\n    public void set(String fieldname, java.lang.Object value, Object obj)\n    {\n        if (obj == null) {\n            return;\n        }\n        obj.set(fieldname, value);\n    }\n\n    public void setTitle(String title)\n    {\n        getDoc().setTitle(title);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    public void setCustomClass(String customClass)\n    {\n        getDoc().setCustomClass(customClass);\n\n        updateAuthor();\n    }\n\n    public void setParent(String parent)\n    {\n        getDoc().setParent(parent);\n\n        updateAuthor();\n    }\n\n    private void updateContentAuthor()\n    {\n        // Temporary set as content author of the document the current script author (until the document is saved)\n        XWikiContext xcontext = getXWikiContext();\n        getDoc().setContentAuthorReference(xcontext.getAuthorReference());\n    }\n\n    private void updateAuthor()\n    {\n        // Temporary set as author of the document the current script author (until the document is saved)\n        XWikiContext xcontext = getXWikiContext();\n        getDoc().setAuthorReference(xcontext.getAuthorReference());\n    }\n\n    public void setContent(String content)\n    {\n        getDoc().setContent(content);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    /**\n     * @param content the content as XDOM\n     * @throws XWikiException when failing to convert the XDOM to String content\n     * @since 7.0RC1\n     */\n    public void setContent(XDOM content) throws XWikiException\n    {\n        getDoc().setContent(content);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    /**\n     * @param syntax the Syntax representing the syntax used for the current document's content.\n     * @since 2.3M1\n     */\n    public void setSyntax(Syntax syntax)\n    {\n        getDoc().setSyntax(syntax);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    /**\n     * @param syntaxId the Syntax id representing the syntax used for the current document. For example \"xwiki/1.0\"\n     *            represents the first version XWiki syntax while \"xwiki/2.0\" represents version 2.0 of the XWiki\n     *            Syntax.\n     */\n    public void setSyntaxId(String syntaxId)\n    {\n        getDoc().setSyntaxId(syntaxId);\n\n        updateAuthor();\n        updateContentAuthor();\n    }\n\n    public void setDefaultTemplate(String dtemplate)\n    {\n        getDoc().setDefaultTemplate(dtemplate);\n\n        updateAuthor();\n    }\n\n    public void setComment(String comment)\n    {\n        getDoc().setComment(comment);\n    }\n\n    public void setMinorEdit(boolean isMinor)\n    {\n        getDoc().setMinorEdit(isMinor);\n    }\n\n    public void save() throws XWikiException\n    {\n        save(\"\", false);\n    }\n\n    public void save(String comment) throws XWikiException\n    {\n        save(comment, false);\n    }\n\n    public void save(String comment, boolean minorEdit) throws XWikiException\n    {\n        if (hasAccessLevel(\"edit\")) {\n            // If the current author does not have PR don't let it set current user as author of the saved document\n            // since it can lead to right escalation\n            if (hasProgrammingRights() || !getConfiguration().getProperty(\"security.script.save.checkAuthor\", true)) {\n                saveDocument(comment, minorEdit);\n            } else {\n                saveAsAuthor(comment, minorEdit);\n            }\n        } else {\n            java.lang.Object[] args = {getDefaultEntityReferenceSerializer().serialize(getDocumentReference())};\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied in edit mode on document {0}\", null, args);\n        }\n    }\n\n    public void saveWithProgrammingRights() throws XWikiException\n    {\n        saveWithProgrammingRights(\"\", false);\n    }\n\n    public void saveWithProgrammingRights(String comment) throws XWikiException\n    {\n        saveWithProgrammingRights(comment, false);\n    }\n\n    public void saveWithProgrammingRights(String comment, boolean minorEdit) throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            // The rights check above is generic, but the current method is a save operation, thus it should not be\n            // performed if the document's wiki is in read only mode.\n            XWikiContext context = getXWikiContext();\n            String currentWikiId = context.getWikiId();\n            try {\n                // Make sure we check the current document's wiki and not the current context's wiki.\n                context.setWikiId(getWiki());\n\n                if (!context.getWiki().isReadOnly()) {\n                    saveDocument(comment, minorEdit, false);\n                } else {\n                    java.lang.Object[] args =\n                        { getDefaultEntityReferenceSerializer().serialize(getDocumentReference()), getWiki() };\n                    throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS,\n                        XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                        \"Access denied in edit mode on document [{0}]. The wiki [{1}] is in read only mode.\", null,\n                        args);\n                }\n            } finally {\n                // Restore the context wiki.\n                context.setWikiId(currentWikiId);\n            }\n        } else {\n            java.lang.Object[] args = { this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied with no programming rights document {0}\", null, args);\n        }\n    }\n\n    /**\n     * Save the document if the current author of the script calling this method has permission to do so. The author of\n     * this document is also set to the said author.\n     *\n     * @throws XWikiException if script author is not allowed to save the document or if save operation fails.\n     * @since 2.3M2\n     */\n    public void saveAsAuthor() throws XWikiException\n    {\n        saveAsAuthor(\"\", false);\n    }\n\n    /**\n     * Save the document if the current author of the script calling this method has permission to do so. The author of\n     * this document is also set to the said author.\n     *\n     * @param comment The comment to display in document history (what did you change in the document)\n     * @throws XWikiException if script author is not allowed to save the document or if save operation fails.\n     * @since 2.3M2\n     */\n    public void saveAsAuthor(String comment) throws XWikiException\n    {\n        saveAsAuthor(comment, false);\n    }\n\n    /**\n     * Save the document if the current author of the script calling this method has permission to do so. The author of\n     * this document is also set to the said author.\n     *\n     * @param comment The comment to display in document history (what did you change in the document)\n     * @param minorEdit Set true to advance the document version number by 0.1 or false to advance version to the next\n     *            integer + 0.1 eg: 25.1\n     * @throws XWikiException if script author is not allowed to save the document or if save operation fails.\n     * @since 2.3M2\n     */\n    public void saveAsAuthor(String comment, boolean minorEdit) throws XWikiException\n    {\n        XWikiContext xcontext = getXWikiContext();\n\n        DocumentReference author = getEffectiveAuthorReference();\n        if (hasAccess(Right.EDIT, author)) {\n            DocumentReference currentUser = xcontext.getUserReference();\n            try {\n                xcontext.setUserReference(author);\n\n                saveDocument(comment, minorEdit);\n            } finally {\n                xcontext.setUserReference(currentUser);\n            }\n        } else {\n            java.lang.Object[] args = { author, xcontext.getDoc(), getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied; user {0}, acting through script in document {1} cannot save document {2}\", null, args);\n        }\n    }\n\n    protected void saveDocument(String comment, boolean minorEdit) throws XWikiException\n    {\n        saveDocument(comment, minorEdit, true);\n    }\n\n    private void saveDocument(String comment, boolean minorEdit, boolean checkSaving) throws XWikiException\n    {\n        XWikiDocument doc = getDoc();\n\n        DocumentReference currentUserReference = getXWikiContext().getUserReference();\n\n        doc.setAuthorReference(currentUserReference);\n\n        if (doc.isNew()) {\n            doc.setCreatorReference(currentUserReference);\n        }\n\n        if (checkSaving) {\n            // Make sure the user is allowed to make this modification\n            getXWikiContext().getWiki().checkSavingDocument(doc.getAuthorReference(), doc, comment, minorEdit,\n                getXWikiContext());\n        }\n\n        getXWikiContext().getWiki().saveDocument(doc, comment, minorEdit, getXWikiContext());\n        this.initialDoc = this.doc;\n    }\n\n    public com.xpn.xwiki.api.Object addObjectFromRequest() throws XWikiException\n    {\n        // Call to getDoc() ensures that we are working on a clone()\n        com.xpn.xwiki.api.Object obj =\n            new com.xpn.xwiki.api.Object(getDoc().addXObjectFromRequest(getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public com.xpn.xwiki.api.Object addObjectFromRequest(String className) throws XWikiException\n    {\n        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object(\n            getDoc().addObjectFromRequest(className, getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public List<Object> addObjectsFromRequest(String className) throws XWikiException\n    {\n        return addObjectsFromRequest(className, \"\");\n    }\n\n    public com.xpn.xwiki.api.Object addObjectFromRequest(String className, String prefix) throws XWikiException\n    {\n        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object(\n            getDoc().addObjectFromRequest(className, prefix, getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public List<Object> addObjectsFromRequest(String className, String prefix) throws XWikiException\n    {\n        List<BaseObject> objs = getDoc().addObjectsFromRequest(className, prefix, getXWikiContext());\n        List<Object> wrapped = new ArrayList<Object>();\n        for (BaseObject object : objs) {\n            wrapped.add(new com.xpn.xwiki.api.Object(object, getXWikiContext()));\n        }\n\n        updateAuthor();\n\n        return wrapped;\n    }\n\n    public com.xpn.xwiki.api.Object updateObjectFromRequest(String className) throws XWikiException\n    {\n        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object(\n            getDoc().updateObjectFromRequest(className, getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public List<Object> updateObjectsFromRequest(String className) throws XWikiException\n    {\n        return updateObjectsFromRequest(className, \"\");\n    }\n\n    public com.xpn.xwiki.api.Object updateObjectFromRequest(String className, String prefix) throws XWikiException\n    {\n        com.xpn.xwiki.api.Object obj = new com.xpn.xwiki.api.Object(\n            getDoc().updateObjectFromRequest(className, prefix, getXWikiContext()), getXWikiContext());\n\n        updateAuthor();\n\n        return obj;\n    }\n\n    public List<Object> updateObjectsFromRequest(String className, String prefix) throws XWikiException\n    {\n        List<BaseObject> objs = getDoc().updateObjectsFromRequest(className, prefix, getXWikiContext());\n        List<Object> wrapped = new ArrayList<Object>();\n        for (BaseObject object : objs) {\n            wrapped.add(new com.xpn.xwiki.api.Object(object, getXWikiContext()));\n        }\n\n        updateAuthor();\n\n        return wrapped;\n    }\n\n    public boolean isAdvancedContent()\n    {\n        return this.doc.isAdvancedContent();\n    }\n\n    public boolean isProgrammaticContent()\n    {\n        return this.doc.isProgrammaticContent();\n    }\n\n    /**\n     * Remove an XObject from the document. The changes are not persisted until the document is saved.\n     *\n     * @param object the object to remove\n     * @return {@code true} if the object was successfully removed, {@code false} if the object was not found in the\n     *         current document.\n     */\n    public boolean removeObject(Object object)\n    {\n        return getDoc().removeObject(object.getBaseObject());\n    }\n\n    /**\n     * Remove all the objects of a given type (XClass) from the document. The object counter is left unchanged, so that\n     * future objects will have new (different) numbers. However, on some storage engines the counter will be reset if\n     * the document is removed from the cache and reloaded from the persistent storage.\n     *\n     * @param className The class name of the objects to be removed.\n     * @return {@code true} if the objects were successfully removed, {@code false} if no object from the target class\n     *         was in the current document.\n     */\n    public boolean removeObjects(String className)\n    {\n        return getDoc().removeObjects(className);\n    }\n\n    /**\n     * Remove document from the wiki. Reinit <code>cloned</code>.\n     *\n     * @throws XWikiException\n     */\n    protected void deleteDocument() throws XWikiException\n    {\n        getXWikiContext().getWiki().deleteDocument(this.doc, getXWikiContext());\n        this.initialDoc = this.doc;\n    }\n\n    public void delete() throws XWikiException\n    {\n        if (hasAccessLevel(\"delete\")) {\n            deleteDocument();\n        } else {\n            java.lang.Object[] args = { this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied in edit mode on document {0}\", null, args);\n        }\n    }\n\n    /**\n     * Delete the document if the {@link #getContentAuthor content author} of the script calling this method has\n     * permission to do so. The deleter is also set to the said content author.\n     *\n     * @throws XWikiException if script author is not allowed to delete the document or if save operation fails.\n     * @since 2.3M2\n     */\n    public void deleteAsAuthor() throws XWikiException\n    {\n        XWikiContext xcontext = getXWikiContext();\n\n        DocumentReference author = getEffectiveAuthorReference();\n        if (hasAccess(Right.DELETE, author)) {\n            DocumentReference currentUser = xcontext.getUserReference();\n            try {\n                xcontext.setUserReference(author);\n\n                deleteDocument();\n            } finally {\n                xcontext.setUserReference(currentUser);\n            }\n        } else {\n            java.lang.Object[] args = { author, xcontext.getDoc(), this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied; user {0}, acting through script in document {1} cannot delete document {2}\", null,\n                args);\n        }\n    }\n\n    public void deleteWithProgrammingRights() throws XWikiException\n    {\n        if (hasProgrammingRights()) {\n            deleteDocument();\n        } else {\n            java.lang.Object[] args = { this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied with no programming rights document {0}\", null, args);\n        }\n    }\n\n    public String getVersionHashCode()\n    {\n        return this.doc.getVersionHashCode(getXWikiContext());\n    }\n\n    public int addAttachments() throws XWikiException\n    {\n        return addAttachments(null);\n    }\n\n    public int addAttachments(String fieldName) throws XWikiException\n    {\n        if (!hasAccessLevel(\"edit\")) {\n            java.lang.Object[] args = { this.getFullName() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"Access denied in edit mode on document {0}\", null, args);\n        }\n        XWiki xwiki = getXWikiContext().getWiki();\n        FileUploadPlugin fileupload = (FileUploadPlugin) xwiki.getPlugin(\"fileupload\", getXWikiContext());\n        List<FileItem> fileuploadlist = fileupload.getFileItems(getXWikiContext());\n        List<XWikiAttachment> attachments = new ArrayList<XWikiAttachment>();\n        // adding attachment list to context so we find the names\n        this.context.put(\"addedAttachments\", attachments);\n        int nb = 0;\n\n        if (fileuploadlist == null) {\n            return 0;\n        }\n\n        for (FileItem item : fileuploadlist) {\n            String name = item.getFieldName();\n            if (fieldName != null && !fieldName.equals(name)) {\n                continue;\n            }\n            if (item.isFormField()) {\n                continue;\n            }\n            byte[] data = fileupload.getFileItemData(name, getXWikiContext());\n            String filename;\n            String fname = fileupload.getFileName(name, getXWikiContext());\n            int i = fname.lastIndexOf(\"\\\\\");\n            if (i == -1) {\n                i = fname.lastIndexOf(\"/\");\n            }\n            filename = fname.substring(i + 1);\n            filename = filename.replaceAll(\"\\\\+\", \" \");\n\n            if ((data != null) && (data.length > 0)) {\n                XWikiAttachment attachment = this.getDoc().addAttachment(filename, data, getXWikiContext());\n                getDoc().saveAttachmentContent(attachment, getXWikiContext());\n                // commenting because this was already done by addAttachment\n                // getDoc().getAttachmentList().add(attachment);\n                attachments.add(attachment);\n                nb++;\n            }\n        }\n\n        if (nb > 0) {\n            getXWikiContext().getWiki().saveDocument(getDoc(), getXWikiContext());\n            this.initialDoc = this.doc;\n        }\n\n        return nb;\n    }\n\n    public Attachment addAttachment(String fileName, InputStream iStream)\n    {\n        try {\n            return new Attachment(this, this.getDoc().setAttachment(fileName, iStream, getXWikiContext()),\n                getXWikiContext());\n        } catch (IOException e) {\n            // TODO Log the error and let the user know about it\n        } finally {\n            updateAuthor();\n        }\n\n        return null;\n    }\n\n    public Attachment addAttachment(String fileName, byte[] data)\n    {\n        try {\n            return new Attachment(this, this.getDoc().addAttachment(fileName, data, getXWikiContext()),\n                getXWikiContext());\n        } catch (XWikiException e) {\n            // TODO Log the error and let the user know about it\n        } finally {\n            updateAuthor();\n        }\n\n        return null;\n    }\n\n    public boolean validate() throws XWikiException\n    {\n        return this.doc.validate(getXWikiContext());\n    }\n\n    public boolean validate(String[] classNames) throws XWikiException\n    {\n        return this.doc.validate(classNames, getXWikiContext());\n    }\n\n    /**\n     * Retrieves the validation script associated with this document, a Velocity script that is executed when validating\n     * the document data.\n     *\n     * @return A <code>String</code> representation of the validation script, or an empty string if there is no such\n     *         script.\n     */\n    public String getValidationScript()\n    {\n        return getDoc().getValidationScript();\n    }\n\n    /**\n     * Sets a new validation script for this document, a Velocity script that is executed when validating the document\n     * data.\n     *\n     * @param validationScript The new validation script, which can be an empty string or <code>null</code> if the\n     *            script should be removed.\n     */\n    public void setValidationScript(String validationScript)\n    {\n        getDoc().setValidationScript(validationScript);\n\n        updateAuthor();\n    }\n\n    /**\n     * Rename the current document and all the backlinks leading to it. Will also change parent field in all documents\n     * which list the document we are renaming as their parent. See\n     * {@link #rename(String, java.util.List, java.util.List)} for more details.\n     *\n     * @param newReference the reference to the new document\n     * @throws XWikiException in case of an error\n     * @since 2.3M2\n     */\n    public void rename(DocumentReference newReference) throws XWikiException\n    {\n        if (hasAccessLevel(\"delete\") && this.context.getWiki().checkAccess(\"edit\",\n            this.context.getWiki().getDocument(newReference, this.context), this.context)) {\n            this.getDoc().rename(newReference, getXWikiContext());\n        }\n    }\n\n    /**\n     * Rename the current document and all the links pointing to it in the list of passed backlink documents. The\n     * renaming algorithm takes into account the fact that there are several ways to write a link to a given page and\n     * all those forms need to be renamed. For example the following links all point to the same page:\n     * <ul>\n     * <li>[Page]</li>\n     * <li>[Page?param=1]</li>\n     * <li>[currentwiki:Page]</li>\n     * <li>[currentwiki:CurrentSpace.Page]</li>\n     * </ul>\n     * <p>\n     * Note: links without a space are renamed with the space added and all documents which have the document being\n     * renamed as parent have their parent field set to \"currentwiki:CurrentSpace.Page\".\n     * </p>\n     *\n     * @param newDocumentName the new document name. If the space is not specified then defaults to the current space.\n     * @param backlinkDocumentNames the list of documents to parse and for which links will be modified to point to the\n     *            new renamed document.\n     * @throws XWikiException in case of an error\n     */\n    public void rename(String newDocumentName, List<String> backlinkDocumentNames) throws XWikiException\n    {\n        rename(newDocumentName, backlinkDocumentNames, Collections.emptyList());\n    }\n\n    /**\n     * Same as {@link #rename(String, List)} but the list of documents having the current document as their parent is\n     * passed in parameter.\n     *\n     * @param newDocumentName the new document name. If the space is not specified then defaults to the current space.\n     * @param backlinkDocumentNames the list of documents to parse and for which links will be modified to point to the\n     *            new renamed document.\n     * @param childDocumentNames the list of documents whose parent field will be set to the new document name.\n     * @throws XWikiException in case of an error\n     */\n    public void rename(String newDocumentName, List<String> backlinkDocumentNames, List<String> childDocumentNames)\n        throws XWikiException\n    {\n        List<DocumentReference> backlinkDocumentReferences = new ArrayList<DocumentReference>();\n        for (String backlinkDocumentName : backlinkDocumentNames) {\n            backlinkDocumentReferences.add(getCurrentMixedDocumentReferenceResolver().resolve(backlinkDocumentName));\n        }\n\n        List<DocumentReference> childDocumentReferences = new ArrayList<DocumentReference>();\n        for (String childDocumentName : childDocumentNames) {\n            childDocumentReferences.add(getCurrentMixedDocumentReferenceResolver().resolve(childDocumentName));\n        }\n\n        rename(getCurrentMixedDocumentReferenceResolver().resolve(newDocumentName), backlinkDocumentReferences,\n            childDocumentReferences);\n    }\n\n    /**\n     * Same as {@link #rename(String, List)} but the list of documents having the current document as their parent is\n     * passed in parameter.\n     *\n     * @param newReference the reference to the new document\n     * @param backlinkDocumentNames the list of reference to documents to parse and for which links will be modified to\n     *            point to the new renamed document\n     * @param childDocumentNames the list of references to documents whose parent field will be set to the new document\n     *            reference\n     * @throws XWikiException in case of an error\n     * @since 2.3M2\n     */\n    public void rename(DocumentReference newReference, List<DocumentReference> backlinkDocumentNames,\n        List<DocumentReference> childDocumentNames) throws XWikiException\n    {\n        if (hasAccessLevel(\"delete\") && this.context.getWiki().checkAccess(\"edit\",\n            this.context.getWiki().getDocument(newReference, this.context), this.context)) {\n\n            // Every page given in childDocumentNames has it's parent changed whether it needs it or not.\n            // Let's make sure the user has edit permission on any page given which is not actually a child.\n            // Otherwise it would be embarrassing if a user called:\n            // $doc.rename(\"mynewpage\",$doc.getBacklinks(),$xwiki.searchDocuments(\"true\"))\n            int counter = childDocumentNames.size();\n            List<String> actuallyChildren = getChildren();\n            while (counter > 0) {\n                counter--;\n                if (!actuallyChildren.contains(childDocumentNames.get(counter))\n                    && !this.context.getWiki().checkAccess(\"edit\",\n                        this.context.getWiki().getDocument(childDocumentNames.get(counter), this.context),\n                        this.context)) {\n                    return;\n                }\n            }\n\n            this.getDoc().rename(newReference, backlinkDocumentNames, childDocumentNames, getXWikiContext());\n        }\n    }\n\n    /**\n     * Allow to easily access any revision of a document\n     *\n     * @param revision the version to access\n     * @return the document corresponding to the requested revision or {@code null} if the revision does not exist.\n     */\n    public Document getDocumentRevision(String revision)\n    {\n        try {\n            XWikiDocument documentRevision = getDocumentRevisionProvider().getRevision(this.doc, revision);\n\n            return documentRevision != null ? new Document(documentRevision, this.context) : null;\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to load revision [{}] of document [{}]\", revision, getDocumentReferenceWithLocale(),\n                e);\n\n            return null;\n        }\n    }\n\n    /**\n     * Allow to easily access the previous revision of a document\n     *\n     * @return Document\n     * @throws XWikiException\n     */\n    public Document getPreviousDocument() throws XWikiException\n    {\n        return getDocumentRevision(getPreviousVersion());\n    }\n\n    /**\n     * @return is document most recent. false if and only if there are older versions of this document.\n     */\n    public boolean isMostRecent()\n    {\n        return this.doc.isMostRecent();\n    }\n\n    @Override\n    public String toString()\n    {\n        return this.doc.toString();\n    }\n\n    /**\n     * Convert the current document content from its current syntax to the new syntax passed as parameter.\n     *\n     * @param targetSyntaxId the syntax to convert to (eg \"xwiki/2.0\", \"xhtml/1.0\", etc)\n     * @throws XWikiException if an exception occurred during the conversion process\n     */\n    public boolean convertSyntax(String targetSyntaxId) throws XWikiException\n    {\n        try {\n            getDoc().convertSyntax(targetSyntaxId, this.context);\n        } catch (Exception ex) {\n            LOGGER.error(\n                \"Failed to convert document [\" + getPrefixedFullName() + \"] to syntax [\" + targetSyntaxId + \"]\", ex);\n\n            return false;\n        } finally {\n            updateAuthor();\n            updateContentAuthor();\n        }\n\n        return true;\n    }\n\n    /**\n     * Indicates whether the document is 'hidden' or not, meaning that it should not be returned in public search\n     * results or appear in the User Interface in general.\n     *\n     * @return <code>true</code> if the document is hidden, <code>false</code> otherwise.\n     */\n    public boolean isHidden()\n    {\n        return this.doc.isHidden();\n    }\n\n    /**\n     * Indicates whether the document should be 'hidden' or not, meaning that it should not be returned in public search\n     * results or appear in the User Interface in general.\n     *\n     * @param hidden <code>true</code> if the document should be 'hidden', <code>false</code> otherwise.\n     */\n    public void setHidden(boolean hidden)\n    {\n        this.doc.setHidden(hidden);\n    }\n\n    /**\n     * Drop permissions for the remainder of the rendering cycle. After this is called:\n     * <ul>\n     * <li>1. {@link com.xpn.xwiki.api.Api#hasProgrammingRights()} will always return false.</li>\n     * <li>2. {@link com.xpn.xwiki.api.XWiki#getDocumentAsAuthor(org.xwiki.model.reference.DocumentReference)},\n     * {@link com.xpn.xwiki.api.XWiki#getDocumentAsAuthor(String)}, {@link com.xpn.xwiki.api.Document#saveAsAuthor()},\n     * {@link com.xpn.xwiki.api.Document#saveAsAuthor(String)},\n     * {@link com.xpn.xwiki.api.Document#saveAsAuthor(String, boolean)}, and\n     * {@link com.xpn.xwiki.api.Document#deleteAsAuthor()} will perform all of their actions as if the document's\n     * content author was the guest user (XWiki.XWikiGuest).</li>\n     * </ul>\n     * <p>\n     * This sandboxing will expire at the end of the rendering cycle and can be suspended by beginning a new rendering\n     * cycle. A rendering cycle can be begin by calling {@link #getRenderedContent(String)}, {@link #display(String)}\n     * (or variations thereof) or by invoking the include macro or using\n     * {@link com.xpn.xwiki.api.XWiki#includeTopic(String)}\n     * <p>\n     * NOTE: Even if you include the same document, permissions will be regained. What this does is sandbox the\n     * remainder of the code on the page because although it can temporarily suspend the permissions drop, it cannot get\n     * itself to be executed with permissions because if it calls itself, it will hit the drop function first.\n     * <p>\n     * If you are interested in a more secure sandboxing method where code is guaranteed not to have permissions for the\n     * remainder of the request, you should consider {@link com.xpn.xwiki.api.Context#dropPermissions()}.\n     * <p>\n     *\n     * @since 3.2M2\n     */\n    public void dropPermissions()\n    {\n        // Set the droppedPermissions key to the context so if the context is cloned and\n        // pushed, it will return false until it is popped again.\n        final ExecutionContext context = Utils.getComponent(Execution.class).getContext();\n        context.setProperty(XWikiConstant.DROPPED_PERMISSIONS, System.identityHashCode(context));\n    }\n\n    /**\n     * @return true if this document is a translation of the main document (i.e. returned by\n     *         {@link #getTranslatedDocument(String)}); false if this is actually the main document (i.e. returned by\n     *         {@link com.xpn.xwiki.api.XWiki#getDocument(DocumentReference)}.\n     * @since 6.2M2\n     */\n    public boolean isTranslation()\n    {\n        return 1 == this.getDoc().getTranslation();\n    }\n\n    /**\n     * @return the maximum authorized length for a document full name (see {@link #getFullName()}).\n     * @since 11.4RC1\n     */\n    public int getLocalReferenceMaxLength()\n    {\n        return this.doc.getLocalReferenceMaxLength();\n    }\n}\n", "# ---------------------------------------------------------------------------\n# See the NOTICE file distributed with this work for additional\n# information regarding copyright ownership.\n#\n# This is free software; you can redistribute it and/or modify it\n# under the terms of the GNU Lesser General Public License as\n# published by the Free Software Foundation; either version 2.1 of\n# the License, or (at your option) any later version.\n#\n# This software is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this software; if not, write to the Free\n# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n# 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n# ---------------------------------------------------------------------------\n\n# This is the new XWiki configuration file. In the future it'll replace the old\n# xwiki.cfg file. However right now it's only used by some XWiki components.\n# As time progresses more and more component will get their configurations from\n# this file.\n# \n# This file come from one of those locations (in this order):\n# * [since 9.3] /etc/xwiki/xwiki.properties\n# * /WEB-INF/xwiki.properties in the web application resources\n\n#-------------------------------------------------------------------------------------\n# Core\n#-------------------------------------------------------------------------------------\n\n#-# [Since 1.8RC2]\n#-# Specifies the default syntax to use when creating new documents.\n#-# Default value is xwiki/2.1.\n# core.defaultDocumentSyntax = xwiki/2.1\n\n#-# [Since 2.4M1]\n#-# Indicate if the rendering cache is enabled.\n#-# Default value is false.\n# core.renderingcache.enabled = true\n\n#-# [Since 2.4M1]\n#-# A list of Java regex patterns matching full documents reference.\n# core.renderingcache.documents = wiki:Space\\.Page\n# core.renderingcache.documents = wiki:Space\\..*\n# core.renderingcache.documents = Space\\.PageOnWhateverWiki\n\n#-# [Since 2.4M1]\n#-# The time (in seconds) after which data should be removed from the cache when not used.\n#-# Default value is 300 (5 min).\n# core.renderingcache.duration = 300\n\n#-# [Since 2.4M1]\n#-# The size of the rendering cache. Not that it's not the number of cached documents but the number of cached results.\n#-# (For a single document several cache entries are created, because each action, language and request query string\n#-# produces a unique rendering result)\n#-# Default value is 100.\n# core.renderingcache.size = 100\n\n#-# [Since 7.2M2]\n#-# Define which hierarchy is used between pages (for example inside the breadcrumb).\n#-# Possible values are \"reference\" (default) or \"parentchild\".\n#-# If \"parentchild\" is used, the hierachy is based on the parent/child relationship, which means that any document\n#-# could be defined as the parent of an other document.\n#-# If \"reference\" is used, then the children of a document must be placed inside this document. It's less flexible but\n#-# more clear.\n# core.hierarchyMode = reference\n\n#-------------------------------------------------------------------------------------\n# Environment\n#-------------------------------------------------------------------------------------\n\n#-# [Since 3.5M1, replaces the container.persistentDirectory property]\n#-# The directory used to store persistent data (data that should persist across server restarts). This is an\n#-# important directory containing important data and thus it should never be deleted (it should be backed-up along\n#-# with the database).\n#-# For example this is where the Extension Manager stores downloaded extensions if the extension.localRepository\n#-# property isn't configured.\n#-#\n#-# You can set:\n#-# * an absolute path (recommended)\n#-# * a relative path (not recommended at all)but in this case the directory will be relative to where the XWiki server\n#-#   is started and thus the user under which XWiki is started will need write permissions for the current directory\n#-#\n#-# Note if the system property xwiki.data.dir is set then this property is not used.\n#-# If neither the system property nor this configuration value here are set then the Servlet container's temporary\n#-# directory is used; This is absolutely not recommended since that directory could be wiped out at any time and you\n#-# should specify a value.\n#if ($xwikiPropertiesEnvironmentPermanentDirectory)\nenvironment.permanentDirectory = $xwikiPropertiesEnvironmentPermanentDirectory\n#else\n# environment.permanentDirectory = /var/lib/xwiki/data/\n#end\n\n#-------------------------------------------------------------------------------------\n# Rendering\n#-------------------------------------------------------------------------------------\n\n#-# [Since 1.8RC2]\n#-# Specifies how links labels are displayed when the user doesn't specify the label explicitly.\n#-# Valid values:\n#-#   %w: wiki name\n#-#   %s: full space name (e.g. space1.space2)\n#-#       Note: Prior to 7.4.2/8.0M2 this was only displaying the last space name\n#-#   %ls: last space name. New in 7.4.2/8.0M2\n#-#   %p: page name\n#-#   %np: nested page name (i.e. will display the space name for Nested Pages). New in 7.4.2/8.0M2\n#-#   %P: page name with spaces between camel case words, i.e. \"My Page\" if the page name is \"MyPage\"\n#-#   %NP: nested page name with spaces between camel case words, i.e. \"My Page\" if the page name is \"MyPage\".\n#-#        New in 7.4.2/8.0M2\n#-#   %t: page title\n#-#\n#-# Note that if the page title is empty or not defined then it defaults to %np. This is also the case\n#-# if the title cannot be retrieved for the document.\n#-#\n#-# The default is \"%np\". Some examples: \"%s.%p\", \"%w:%s.%p\".\n# rendering.linkLabelFormat = %np\n\n#-# [Since 2.0M3]\n#-# Overrides default macro categories (Each macro has a default category already defined, for example\n#-# \"presentation\" for the Table of Contents Macro).\n#-#\n#-# Ex: To redefine the macro category for the TOC macro so that it'd be in the \"My Category\" category +\n#-# redefine the category for the Script Macro to be \"My Other Category\", you'd use:\n# rendering.macroCategories = toc:My Category\n# rendering.macroCategories = script:My Other Category\n\n#-# [Since 2.5M2]\n#-# Specify whether the image dimensions should be extracted from the image parameters and included in the image URL\n#-# or not. When image dimensions are included in the image URL the image can be resized on the server side before being\n#-# downloaded, improving thus the page loading speed.\n#-#\n#-# Default value is true.\n# rendering.imageDimensionsIncludedInImageURL = true\n\n#-# [Since 2.5M2]\n#-# One way to improve page load speed is to resize images on the server side just before rendering the page. The\n#-# rendering module can use the image width provided by the user to scale the image (See\n#-# rendering.includeImageDimensionsInImageURL configuration parameter). When the user doesn't specify the image width\n#-# the rendering module can limit the width of the image based on this configuration parameter.\n#-#\n#-# The default value is -1 which means image width is not limited by default. Use a value greater than 0 to limit the\n#-# image width (pixels). Note that the aspect ratio is kept even when both the width and the height of the image are\n#-# limited.\n# rendering.imageWidthLimit = 1024\n# rendering.imageWidthLimit = -1\n\n#-# [Since 2.5M2]\n#-# See rendering.imageWidthLimit\n# rendering.imageHeightLimit = 768\n# rendering.imageHeightLimit = -1\n\n#-# [Since 2.5M2]\n#-# InterWiki definitions in the format alias = URL\n#-# See http://en.wikipedia.org/wiki/Interwiki_links for a definition of an InterWiki link\n# Some examples:\n# rendering.interWikiDefinitions = wikipedia = http://en.wikipedia.org/wiki/\n# rendering.interWikiDefinitions = definition = http://www.yourdictionary.com/\n\n#-# [Since 2.4M1]\n#-# Change the Pygments style used in the code macro (see http://pygments.org/docs/styles/)\n#-# If not set \"default\" style is used.\n# rendering.macro.code.pygments.style = vs\n\n#-------------------------------------------------------------------------------------\n# Rendering Transformations\n#-------------------------------------------------------------------------------------\n\n#-# [Since 2.6RC1]\n#-# Controls what transformations will be executed when rendering content.\n#-# A transformation modifies the parsed content. For example the Icon transformation replaces some characters with\n#-# icons, a WikiWord transformation will automatically create links when it finds wiki words, etc.\n#-# Note that the Macro transformation is a special transformation that replaces macro markers by the result of the\n#-# macro execution. If you don't list it, macros won't get executed.\n#-# The default value is: macro, icon\n#if ($xwikiRenderingTransformations)\nrendering.transformations = $xwikiRenderingTransformations\n#else\n# rendering.transformations = macro, icon\n#end\n\n#-# [Since 2.6RC1]\n#-# Icon Transformation Configuration\n#-# Defines mappings between suite of characters and the icon to display when those characters are found.\n#-# The format is: rendering.transformation.icon.mappings = <suite of characters> = <icon name>\n#-# The following mappings are already predefined and you don't need to redefine them unless you wish to override them\n#-# [Since 9.3RC1/8.4.5] To disable a default mapping, define it with an empty value. For example:\n#-#   rendering.transformation.icon.mappings = (n) =\n#-#\n#-# rendering.transformation.icon.mappings = :) = emoticon_smile\n#-# rendering.transformation.icon.mappings = :( = emoticon_unhappy\n#-# rendering.transformation.icon.mappings = :P = emoticon_tongue\n#-# rendering.transformation.icon.mappings = :D = emoticon_grin\n#-# rendering.transformation.icon.mappings = ;) = emoticon_wink\n#-# rendering.transformation.icon.mappings = (y) = thumb_up\n#-# rendering.transformation.icon.mappings = (n) = thumb_down\n#-# rendering.transformation.icon.mappings = (i) = information\n#-# rendering.transformation.icon.mappings = (/) = accept\n#-# rendering.transformation.icon.mappings = (x) = cancel\n#-# rendering.transformation.icon.mappings = (!) = error\n#-# rendering.transformation.icon.mappings = (+) = add\n#-# rendering.transformation.icon.mappings = (-) = delete\n#-# rendering.transformation.icon.mappings = (?) = help\n#-# rendering.transformation.icon.mappings = (on) = lightbulb\n#-# rendering.transformation.icon.mappings = (off) = lightbulb_off\n#-# rendering.transformation.icon.mappings = (*) = star\n\n#-------------------------------------------------------------------------------------\n# LinkChecker Transformation\n#-------------------------------------------------------------------------------------\n\n#-# [Since 3.3M2]\n#-# Defines the time (in ms) after which an external link should be checked again for validity.\n#-# the default configuration is:\n# rendering.transformation.linkchecker.timeout = 3600000\n\n#-# [Since 5.3RC1]\n#-# List of document references that are excluded from link checking, specified using regexes.\n#-# the default configuration is:\n# rendering.transformation.linkchecker.excludedReferencePatterns = .*:XWiki\\.ExternalLinksJSON\n\n#-------------------------------------------------------------------------------------\n# Rendering Macros\n#-------------------------------------------------------------------------------------\n\n#-# Velocity Macro\n\n#-# [Since 2.0M1]\n#-# Defines which Velocity Filter to use by default. This offers the possibility to filter the Velocity macro content\n#-# before and after the Velocity Engine execution.\n#-# The following filters are available:\n#-# - indent (the default): Remove all first whites spaces of lines to support source code indentation without\n#-#          generating whitespaces in the resulting XDOM.\n#-# - none: Doesn't change the content\n#-# - html: Removes all leading and trailing white spaces and new lines. If you need a space you'll need to use\n#-#         \\$sp and if you need a new line you'll need to use \\$nl\n#-# rendering.macro.velocity.filter = indent\n\n#-------------------------------------------------------------------------------------\n# Cache\n#-------------------------------------------------------------------------------------\n\n#-# [Since 1.7M1]\n#-# The standard cache component implementation to use (can be local or distributed depending on the implementation).\n#-# The default standard cache implementation is Infinispan.\n# cache.defaultCache = infinispan\n\n#-# [Since 1.7M1]\n#-# The local cache implementation to use.\n#-# The default local cache implementation is Infinispan.\n# cache.defaultLocalCache = infinispan/local\n\n#-------------------------------------------------------------------------------------\n# Settings for the OpenOffice server instance consumed by the OfficeImporter component\n#-------------------------------------------------------------------------------------\n\n#-# [Since 1.9M2]\n#-# Type of the openoffice server instance used by officeimporter component.\n#-# 0 - Internally managed server instance. (Default)\n#-# 1 - Externally managed (local) server instance.\n# openoffice.serverType = 0\n\n#-# [Since 12.1RC1]\n#-# Port numbers used for connecting to the openoffice server instance.\n#-# For an internally managed server instance, it will create the process for all ports.\n#-# For an externally managed server instance, only the first server port is taken into account.\n# openoffice.serverPorts = 8100,8101\n\n#-# [Since 1.9M2]\n#-# If the openoffice server should be started / connected upon XE start.\n#-# Default value is false\n# openoffice.autoStart = false\n\n#-# [Since 1.8RC3]\n#-# Path to openoffice installation (serverType:0 only).\n#-# If no path is provided, a default value will be calculated based on the operating environment.\n# openoffice.homePath = /opt/openoffice.org3/\n\n#-# [Since 1.8RC3]\n#-# Path to openoffice execution profile (serverType:0 only).\n#-# If no path is provided, a default value will be calculated based on the operating environment.\n# openoffice.profilePath = /home/user/.openoffice.org/3\n\n#-# [Since 1.8RC3]\n#-# Maximum number of simultaneous conversion tasks to be handled by a single openoffice process (serverType:0 only).\n#-# Default value is 50\n# openoffice.maxTasksPerProcess = 50\n\n#-# [Since 1.8RC3]\n#-# Timeout for conversion tasks (in milliseconds) (serverType:0 only).\n#-# Default value is 60 seconds\n# openoffice.taskExecutionTimeout = 60000\n\n#-------------------------------------------------------------------------------------\n# Velocity\n#-------------------------------------------------------------------------------------\n\n#-# [Since 2.0M1]\n#-# Velocity Tools that will be available from your scripts. The format is\n#-# velocity.tools = <name under which it'll be available in the context> = <class name>\n#-# Default values (no need to add them)\n#-#   velocity.tools = numbertool = org.xwiki.velocity.internal.XWikiNumberTool\n#-#   velocity.tools = datetool = org.xwiki.velocity.internal.XWikiDateTool\n#-#   velocity.tools = mathtool = org.xwiki.velocity.internal.XWikiMathTool\n#-#   velocity.tools = escapetool = org.apache.velocity.tools.generic.EscapeTool\n#-#   velocity.tools = regextool = org.xwiki.velocity.tools.RegexTool\n#-#   velocity.tools = collectiontool = org.xwiki.velocity.tools.CollectionTool\n#-#   velocity.tools = stringtool = org.xwiki.text.StringUtils\n#-#   velocity.tools = jsontool = org.xwiki.velocity.tools.JSONTool\n#-#   velocity.tools = urltool = org.xwiki.velocity.tools.URLTool\n#-#   velocity.tools = exceptiontool = org.apache.commons.lang3.exception.ExceptionUtils\n#-#   velocity.tools = niotool = org.xwiki.velocity.tools.nio.NIOTool\n#-#   velocity.tools = logtool = org.apache.velocity.tools.generic.LogTool\n#-#   velocity.tools = objecttool = org.xwiki.velocity.tools.ObjectTool\n#-#   velocity.tools = listtool = org.apache.velocity.tools.generic.ListTool (deprecated)\n#-#   velocity.tools = sorttool = org.apache.velocity.tools.generic.SortTool (deprecated)\n#-#   velocity.tools = collectionstool = org.xwiki.velocity.tools.CollectionsTool (deprecated)\n\n#-# [Since 2.0M1]\n#-# Velocity configuration properties. The format is\n#-# velocity.properties = <Velocity property name> = <value>\n#-# Default values (no need to add them)\n#-#   velocity.properties = resource.loader = xwiki\n#-#   velocity.properties = xwiki.resource.loader.class = org.xwiki.velocity.XWikiWebappResourceLoader\n#-#   velocity.properties = velocimacro.library = \"/templates/macros.vm\"\n#-#   velocity.properties = velocimacro.max_depth = 100\n#-#   velocity.properties = resource.manager.log_when_found = false\n#-#   velocity.properties = velocimacro.inline.local_scope = true\n#-#   velocity.properties = velocimacro.inline.replace_global = true\n#-#   velocity.properties = directive.if.empty_check = false\n#-#   velocity.properties = parser.space_gobbling = bc\n#-#   velocity.properties = parser.allow_hyphen_in_identifiers = true\n#-#   velocity.properties = velocimacro.enable_bc_mode = true\n#-#   velocity.properties = context.scope_control.template = true\n#-#   velocity.properties = context.scope_control.macro = true\n#-#   velocity.properties = event_handler.include.class = org.xwiki.velocity.internal.util.RestrictParseLocationEventHandler\n#-#   velocity.properties = runtime.introspection.uberspect = org.xwiki.velocity.introspection.SecureUberspector\\,org.apache.velocity.util.introspection.DeprecatedCheckUberspector\\,org.xwiki.velocity.introspection.MethodArgumentsUberspector\n\n#-------------------------------------------------------------------------------------\n# Groovy\n#-------------------------------------------------------------------------------------\n\n#-# [Since 4.1M1]\n#-# Allows to specify Compiler customization for the Groovy execution engine.\n#-# There's no customizers defined by default. Available customizer ids:\n#-# - timedinterrupt: interrupt script execution if it takes longer than a given time (default to 1 minute)\n#-# - secure: runs Groovy in a security sandbox\n#-# groovy.compilationCustomizers = <list of customizer ids here>\n\n#-# Timed Interrupt Customizer\n\n#-# [Since 4.1M1]\n#-# Default execution time for a script before a timeout occurs, in seconds.\n#-# groovy.customizer.timedInterrupt.timeout = 60\n\n#-------------------------------------------------------------------------------------\n# Events distribution\n#-------------------------------------------------------------------------------------\n\n#-# [Since 2.0M3]\n#-# Indicate if the network distribution module is enabled or not.\n#-# By default remote events are disabled.\n# observation.remote.enabled = false\n\n#-# [Since 2.0M3]\n#-# The list of events communication channels to start when the application starts.\n#-# By default no channel is configured.\n#-#\n#-# The default remote event distribution implementation is using JGroups and you'll need to either use embedded\n#-# JGroups configuration files or drop your custom configuration in the WEB-INF/observation/remote/jgroups/ directory.\n#-# There's a README file in that directory with more information.\n#-# Example: observation.remote.channels = public, cluster\n\n#-# [Since 2.0M4]\n#-# The implementation of network adapter to use.\n#-# The default is jgroups.\n#-#\n#-# By default only jgroups is provided. To add one implements NetworkAdaptor component interface. The identifier\n#-# provided in the configuration is matched with the component role hint.\n#-# Example: observation.remote.networkadapter = jgroups\n\n#-------------------------------------------------------------------------------------\n# CSRF token component\n#-------------------------------------------------------------------------------------\n\n#-# [Since 2.5M2]\n#-# Controls whether secret token validation mechanism should be used (to prevent CSRF attacks).\n#-#\n#-# If enabled, all actions requiring \"comment\", \"edit\", \"delete\", \"admin\" or \"programming\" rights\n#-# will check that the parameter \"form_token\" with the value of a random secret token is present\n#-# in the request.\n#-#\n#-# Valid values:\n#-#   true : Enabled\n#-#   false: Disabled\n#-#\n#-# Default value is true\n# csrf.enabled = true\n\n#-------------------------------------------------------------------------------------\n# Jobs\n#-------------------------------------------------------------------------------------\n\n#-# [Since 4.0M1]\n#-# The folder containing job executing status.\n#-# The default is {environment.permanentDirectory}/jobs/\n# job.statusFolder = /var/lib/xwiki/data/jobs/\n\n#-# [Since 7.2M2]\n#-# The maximum number of entries to put in the job status cache.\n#-# The default is 50.\n# job.statusCacheSize = 50\n\n#-# [Since 12.5RC1]\n#-# The maximum number of entries to put in cache for the GroupedJobInitializer components.\n#-# The default is 100.\n# job.groupedJobInitializerCacheSize = 100\n\n#-# [Since 12.5RC1]\n#-# The thread keep-alive time in milliseconds for the single job executor.\n#-# This value defines how long a thread can be idle before being terminated by the executor.\n#-# The default value is 60000 for 60 000ms.\n# job.singleJobThreadKeepAliveTime = 60000\n\n#-# [Since 12.5RC1]\n#-# The thread keep-alive time in milliseconds for the grouped job executors.\n#-# This value defines how long a thread can be idle before being terminated by an executor.\n#-# The default value is 60000 for 60 000ms.\n# job.groupedJobThreadKeepAliveTime = 60000\n\n#-------------------------------------------------------------------------------------\n# Extension Manager\n#-------------------------------------------------------------------------------------\n\n#-# [Since 2.5]\n#-# Repositories to use when searching and downloading extensions.\n#-# Repositories will be checked in the same order they have in this configuration file.\n#-#\n#-# The format is <id>:<type>:<url> where\n#-# * id can be anything as long as there is only one\n#-# * type is the type of the repository (maven, xwiki, etc.)\n#-# * url is the URL or the root of the repository\n#-#\n#-# [Since 4.3] It's also possible to associate various properties to each repository.\n#-# Here are the standard properties:\n#-# * user: the user to use to authenticate to the repository\n#-# * password: the password to use to authenticate to the repository\n#-# \n#-# And here those for \"maven\" repositories:\n#-# * [Since 10.7RC1] checksumPolicy: what to do when checksum validation fail. Possible values are \"fail\", \"warn\"\n#-#   (the default) and \"ignore\"\n#-# * [Since 13.0RC1] http.headers: Custom HTTP headers to be used when connecting to the maven repository.\n#-#\n#-# Here is an example:\n# extension.repositories = privatemavenid:maven:http://host.com/private/maven/\n# extension.repositories.privatemavenid.auth.user = someuser\n# extension.repositories.privatemavenid.auth.password = thepassword\n# extension.repositories.privatemavenid.http.headers.headername = headervalue\n#-#\n#-# Here's an example to add your local Maven Repository\n## Note: Since this file is parsed by Velocity in the Maven Remote Resource plugin we need to escape the\n## Apache Commons Configuration syntax for specifying the user.home system property!\n#set ($userHome = '${sys:user.home}')\n# extension.repositories = maven-local:maven:file://${userHome}/.m2/repository\n#-#\n#-# And an example to add the XWiki Maven Snapshot Repository\n# extension.repositories = maven-xwiki-snapshot:maven:https://nexus.xwiki.org/nexus/content/groups/public-snapshots\n#-#\n#-# When not set the following is taken (in this order):\n# extension.repositories = maven-xwiki:maven:https://nexus.xwiki.org/nexus/content/groups/public\n# extension.repositories = store.xwiki.com:xwiki:https://store.xwiki.com/xwiki/rest/\n# extension.repositories = extensions.xwiki.org:xwiki:https://extensions.xwiki.org/xwiki/rest/\n#-#\n#-# To not have any repository enabled (including disabling default repositories) you can explicitly make this list\n#-# empty:\n# extension.repositories=\n#if ($xwikiExtensionRepositories)\n#foreach ($extensionRepository in $xwikiExtensionRepositories.split(','))\nextension.repositories = $extensionRepository\n#end\n#end\n\n#-# [Since 2.5]\n#-# The directory where extensions are stored after being downloaded.\n#-#\n#-# The default is extension/repository in whatever is the general persistent directory.\n#-# See container.persistentDirectory.\n# extension.localRepository=extension/repository\n\n#-# [Since 3.4]\n#-# The user agent to use when communication with external services (generally repositories).\n#-#\n#-# The default is:\n# extension.userAgent=XWikiExtensionManager\n\n#-# [Since 7.1RC1]\n#-# Some extensions considered now as flavor but released before the category exists\n#-#\n#if ($xwikiPropertiesExtensionOldFlavors)\n#foreach($oldFlavor in $xwikiPropertiesExtensionOldFlavors.split(','))\nextension.oldflavors=$oldFlavor.trim()\n#end\n#else\n# extension.oldflavors=\n#end\n\n#-# [Since 8.3]\n#-# Indicate if XWiki should try to find more informations about the core extension in the repositories.\n#-#\n#-# The default is:\n# extension.core.resolve=true\n\n#-# [Since 9.6]\n#-# Indicate a list of pattern extension ids and the corresponding recommended version.\n#-# This version will be used for dependencies matching the pattern and fallback on the version declared by the\n#-# extension in case of failure.\n#-#\n#-# Here is an example:\n# extension.recommendedVersions=org.xwiki.commons:.*/[9.6]\n# extension.recommendedVersions=org.xwiki.rendering:.*/[9.6]\n# extension.recommendedVersions=org.xwiki.platform:.*/[9.6]\n# extension.recommendedVersions=com.mygroupid:.*/[1.9]\n\n#-# [Since 9.9]\n#-# Indicate whether the server should automatically check for new available environment versions.\n#-#\n#if ($xwikiPropertiesEnvironmentVersionCheck)\nextension.versioncheck.environment.enabled=$xwikiPropertiesEnvironmentVersionCheck\n#else\n#-# The default is:\n# extension.versioncheck.environment.enabled=false\n#end\n#-#\n#-# If the version check is enabled (through extension.versioncheck.environment.enabled), the following properties\n#-# can be used to customize how the version check is performed.\n#-#\n#-# Indicate the number of seconds between each check for a new version of the server.\n#-# The default is:\n# extension.versioncheck.environment.interval=3600\n#-#\n#-# Indicate a pattern that will be used to filter which version should be considered as a new version.\n#-# By default, no pattern is given an the pattern is not applied.\n#-# Example:\n# extension.versioncheck.environment.allowedVersions=9.*\n\n#-# [Since 10.5RC1]\n#-# Indicate how extension documents are protected.\n#-#\n#-# The possible choices are:\n#-# * none: no protection at all\n#-# * warning (the default): everyone get a warning when trying to edit a protected document\n#-# * deny = EDIT/DELETE right is denied for everyone except for admins who just get a warning\n#-# * forcedDeny = EDIT/DELETE right is denied for everyone, admins can't force edit/delete\n#-# * denySimple = EDIT/DELETE right is denied for simple users except for simple admins who just get a warning\n#-# * forcedDenySimple = EDIT/DELETE right is denied for all simple users, simple admins can't force edit/delete\n# extension.xar.protection=warning\n\n#-# [Since 12.2RC and 11.10.4]\n#-# Indicate a list of extension dependencies to ignore\n#-# \n#-# The default list is:\n# extension.ignoredDependencies=stax:stax\n# extension.ignoredDependencies=javax.xml.stream:stax-api\n# extension.ignoredDependencies=stax:stax-api\n# extension.ignoredDependencies=xalan:xalan\n# extension.ignoredDependencies=xalan:serializer\n\n#-------------------------------------------------------------------------------------\n# Distribution Wizard\n#-------------------------------------------------------------------------------------\n\n#-# [Since 7.1RC1] Enable or disable the automatic start of Distribution Wizard on empty/outdated wiki.\n#-#\n#-# The default is:\n# distribution.automaticStartOnMainWiki=true\n# distribution.automaticStartOnWiki=true\n\n#-#\u00a0[Since 10.2RC1] Control if the Distribution Wizard should be automatic or interactive (the default)\n#-# \n#-# On the main wiki\n# distribution.job.interactive=true\n#-# On the subwikis\n# distribution.job.interactive.wiki=true\n\n#-# [Since 10.2RC1] Override the default UI indicated in the \"environment extension\" (usually means the WAR).\n#-# It usually make more sense to set that at the WAR level (since it's usually synchronized with it).\n#-# If this is set it also means the Distribution Wizard will switch to default UI mode in which you cannot choose the\n#-# flavor.\n#-#\n#-# The id[/version] of the default UI for the main wiki. If the version is not indicated it will be the version of the\n#-# environment extension.\n# distribution.defaultUI=org.my.groupid:artifactid-mainwiki/1.5\n#-# The id[/version] default UI for the subwikis.  If the version is not indicated it will be the version of the\n#-# environment extension.\n# distribution.defaultWikiUI=org.my.groupid:artifactid-wiki/1.5\n\n#-------------------------------------------------------------------------------------\n# Solr Search\n#-------------------------------------------------------------------------------------\n\n#-# [Since 4.5M1]\n#-# The Solr server type. Currently accepted values are \"embedded\" (default) and \"remote\".\n# solr.type=embedded\n\n#-# [Since 4.5M1]\n#-# The location where the embedded Solr instance home folder is located.\n#-# The default is the subfolder \"store/solr\" inside folder defined by the property \"environment.permanentDirectory\".\n# solr.embedded.home=/var/local/xwiki/store/solr\n\n#-# [Since 12.2]\n#-# The URL of the Solr server (the root server and not the URL of a core).\n#-# The default value assumes that the remote Solr server is started in a different process on the same machine,\n#-# using the default port.\n# solr.remote.baseURL=http://localhost:8983/solr\n\n#-# [Since 12.6]\n#-# The prefix to add in front on each remote core name to avoid collisions with non-XWiki cores.\n#-# The default is \"xwiki\" which will produce names likes \"xwiki_events\" for example.\n# solr.remote.corePrefix=xwiki\n\n#-# [Since 5.1M1]\n#-# Elements to index are not sent to the Solr server one by one but in batch to improve performances.\n#-# It's possible to configure this behavior with the following properties:\n#-#\n#-# The maximum number of elements sent at the same time to the Solr server\n#-# The default is 50.\n# solr.indexer.batch.size=50\n#-# The maximum number of characters in the batch of elements to send to the Solr server.\n#-# The default is 10000.\n# solr.indexer.batch.maxLength=10000\n\n#-# [Since 5.1M1]\n#-# The maximum number of elements in the background queue of elements to index/delete\n#-# The default is 10000.\n# solr.indexer.queue.capacity=100000\n\n#-# [Since 6.1M2]\n#-# Indicates if a synchronization between SOLR index and XWiki database should be performed at startup.\n#-# Synchronization can be started from the search administration UI.\n#-# The default is true.\n# solr.synchronizeAtStartup=false\n\n#-# [Since 12.5RC1]\n#-# Indicates which wiki synchronization to perform when the \"solr.synchronizeAtStartup\" property is set to true.\n#-# Two modes are available:\n#-#   - WIKI: indicate that the synchronization is performed when each wiki is accessed for the first time.\n#-#   - FARM: indicate that the synchronization is performed once for the full farm when XWiki is started.\n#-# For large farms and in order to spread the machine's indexing load, the WIKI value is recommended, especially if\n#-# some wikis are not used.\n#-# The default is:\n# solr.synchronizeAtStartupMode=FARM\n\n#-------------------------------------------------------------------------------------\n# Security\n#-------------------------------------------------------------------------------------\n\n#-# [Since 5.0M2]\n#-# Define the authorization policies by choosing another implementation of the AuthorizationSettler. This component\n#-# is solely responsible for settling access decisions based on user, target entity and available security rules.\n#-# The identifier provided here is matched with the component role hint.\n#-#\n#-# The default is:\n# security.authorization.settler=default\n\n#-# [Since 13.0]\n#-# Control if document save API should also check the right of the script author when saving a document.\n#-# When false only the current user right is checked.\n#-#\n#-# The default is:\n# security.script.save.checkAuthor=true\n\n#-------------------------------------------------------------------------------------\n# URL\n#-------------------------------------------------------------------------------------\n\n#-# IMPORTANT: The URL module is a feature still in development and as such should be considered experimental at the\n#-# moment. The configuration parameters below are used only in some part of the code at the moment. The idea is to\n#-# progressively refactor more and more till only the new properties are used. For the moment you should continue to\n#-# use the following old properties located in xwiki.cfg:\n#-#  xwiki.virtual.usepath\n#-#  xwiki.virtual.usepath.servletpath\n\n#-# [Since 5.1M1]\n#-# The id of the URL format to use. This allows to plug in different implementations and thus allows to completely\n#-# control the format of XWiki URLs.\n#-#\n#-# The default is:\n# url.format=standard\n\n#-# [Since 5.1M1]\n#-# Defines where the wiki part is defined in a URL pointing to a subwiki\n#-# If true then the wiki part is located in the URL path (a.k.a path-based), for example:\n#-#   http://server/xwiki/wiki/mywiki/view/Space/Page\n#-# If false then the wiki part is located in the URL host domain (a.k.a domain-based), for example:\n#-#   http://mywiki.domain/xwiki/bin/view/Space/Page\n#-#\n#-# The default is:\n# url.standard.multiwiki.isPathBased=true\n\n#-# [Since 5.1M1]\n#-# For path-based setups, this property defines the path segment before the one identifying the subwiki in the URL.\n#-# For example if set to \"thewiki\", then the following URL will point to a subwiki named \"mywiki\":\n#-#   http://server/xwiki/thewiki/mywiki/view/Space/Page\n#-# Note that the mapping in web.xml has to be modified accordingly if you don't use the default value:\n#-#   <servlet-mapping>\n#-#     <servlet-name>action</servlet-name>\n#-#     <url-pattern>/wiki/*</url-pattern>\n#-#   </servlet-mapping>\n#-#\n#-# The default is:\n# url.standard.multiwiki.wikiPathPrefix=wiki\n\n#-# [Since 5.2M1]\n#-# Defines the URL path prefix used for Entity URLs, i.e. URLs pointing to a Document, Space, Object, etc.\n#-# For example this is the \"bin\" part in the following URL:\n#-#   http://server/xwiki/bin/view/space/page\n#-# Note that this replaces the old xwiki.defaultservletpath property in the xwiki.cfg file.\n#-#\n#-# The default is:\n# url.standard.entityPathPrefix=bin\n\n#-# [Since 5.3M1]\n#-# The action to take when a subwiki is not found (ie there's no wiki descriptor for it). Valid values are:\n#-# - redirect_to_main_wiki: default to displaying the main wiki\n#-# - display_error: redirect to a vm to display an error\n#-#\n#-# The default is:\n# url.standard.multiwiki.notFoundBehavior=redirect_to_main_wiki\n\n#-# [Since 7.2M1]\n#-# Whether the \"view\" action is omitted in URLs (in order to have shorter URLs).\n#-# Note that this replaces the old xwiki.showviewaction property in the xwiki.cfg file.\n#-#\n#-# The default is:\n# url.standard.hideViewAction=false\n\n#-# [Since 11.1RC1]\n#-# Whether a the last modified date of the file to be loaded should be checked and put in the URL query parameter.\n#-# Disabling this might improve a bit the performance on some old hard drives, or custom filesystem, however\n#-# it might imply the need to force-reload some resources in the browser, when migrating.\n#-#\n#-# The default is:\n# url.useResourceLastModificationDate=true\n\n#-------------------------------------------------------------------------------------\n# Attachment\n#-------------------------------------------------------------------------------------\n\n#-# [Since 5.2M2]\n#-# Define the kind of attachment that can be displayed inline. You can either choose to do it through a whitelist\n#-# (only the mimetypes defined in this list would be displayed inline) or a blacklist (every mimetype that is not in\n#-# this list would be displayed inline if possible).\n#-# Note that only one configuration is used between the whitelist and the blacklist, and the whitelist always have\n#-# the priority over the blacklist. Also note that these configurations exist for security reason so they are only\n#-# impacting attachments added by users who do not have programming rights.\n#-# If you want to force downloading some attachments types please check the configuration below.\n#-#\n#-# By default we use the following whitelist (coma separated list of values).\n# attachment.download.whitelist=audio/basic,audio/L24,audio/mp4,audio/mpeg,audio/ogg,audio/vorbis,audio/vnd.rn-realaudio,audio/vnd.wave,audio/webm,image/gif,image/jpeg,image/pjpeg,image/png,image/svg+xml,image/tiff,text/csv,text/plain,text/xml,text/rtf,video/mpeg,video/ogg,video/quicktime,video/webm,video/x-matroska,video/x-ms-wmv,video/x-flv\n#-#\n#-# If you prefer to use a blacklist instead, you can define the forbidden types here, as a coma separated list of\n#-# values. We advise you to forbid at least the following mimetypes : text/html, text/javascript\n# attachment.download.blacklist=text/html,text/javascript\n\n#-# [Since 12.10]\n#-# Define the kind of attachment that you always want to be downloaded and never displayed inline.\n#-# By default this list is empty, but you can specify a list of mime-types (coma separated list of values) which\n#-# should be always downloaded no matter who attached them or what is the whitelist/blacklist configuration.\n#-#\n#-# The distinction with the blacklist configuration above is that the blacklist won't affect file attached by a user\n#-# with programming rights, while this configuration affect any attachment.\n# attachment.download.forceDownload=\n\n#-------------------------------------------------------------------------------------\n# Active Installs\n#-------------------------------------------------------------------------------------\n\n#-# [Since 5.2M2]\n#-# The URL of where the Active Installs module should connect to in order to send a ping of activity. This feature\n#-# regularly sends the following information to xwiki.org about the current instance:\n#-# - its unique id\n#-# - the id and versions of all installed extensions)\n#-# The goal is to count the number of active installs of XWiki out there and provide statistics on xwiki.org\n#-#\n#-# The default is:\n# activeinstalls.pingURL=http://extensions.xwiki.org/activeinstalls\n\n#-------------------------------------------------------------------------------------\n# Wikis\n#-------------------------------------------------------------------------------------\n\n#-# [Since 5.4.4]\n#-# Add a default suffix to the alias of a new wiki in the wiki creation wizard, only when the path mode is not used\n#-# (i.e. domain-based, see url.standard.multiwiki.isPathBased). If this value is empty, XWiki will try to compute it\n#-# automatically from the request URL.\n#-#\n#-# eg: if wiki.alias.suffix is \"xwiki.org\" and the wiki name is \"playground\"\n#-#     then the computed alias will be: \"playground.xwiki.org\".\n#-#\n#-# The default is:\n# wiki.alias.suffix=\n\n#-------------------------------------------------------------------------------------\n# Store\n#-------------------------------------------------------------------------------------\n\n#-# [Since 6.1M2]\n#-# If active, the Filesystem Attachment Store will automatically clear empty directories on startup,\n#-# in some cases this may create undue load on the server and may need to be disabled. To do that,\n#-# set the following to false.\n#-# Note that if you disable this feature, empty directories will accumulate and you are responsible\n#-# for cleaning them up.\n# store.fsattach.cleanOnStartup=true\n\n#-# [Since 11.4RC1]\n#-# The root directory used by the various \"file\" stores implementation (attachment, deleted document, etc.).\n#-# \n#-# The default is ${environment.permanentDirectory}/store/file.\n#if ($xwikiPropertiesStoreFileDirectory)\nstore.file.directory=$xwikiPropertiesStoreFileDirectory\n#else\n# store.file.directory=/var/lib/xwiki/data/store/file/\n#end\n\n#-------------------------------------------------------------------------------------\n# Mail\n#-------------------------------------------------------------------------------------\n\n#-# [Since 6.1M2]\n#-# SMTP host when sending emails, defaults to \"localhost\".\n#-# This configuration property can be overridden in XWikiPreferences objects, by using the \"smtp_server\" property name.\n# mail.sender.host = localhost\n\n#-# [Since 6.1M2]\n#-# SMTP port when sending emails, defaults to 25.\n#-# This configuration property can be overridden in XWikiPreferences objects, by using the \"smtp_port\" property name.\n# mail.sender.port = 25\n\n#-# [Since 6.1M2]\n#-# From email address to use. Not defined by default and needs to be set up when calling the mail API.\n#-# This configuration property can be overridden in XWikiPreferences objects, by using the \"admin_email\" property name.\n# mail.sender.from = john@doe.com\n\n#-# [Since 6.1M2]\n#-# Username to authenticate on the SMTP server, if needed. By default no authentication is performed.\n#-# This configuration property can be overridden in XWikiPreferences objects, by using the \"smtp_server_username\"\n#-# property name.\n# mail.sender.username = someuser\n\n#-# [Since 6.1M2]\n#-# Password to authenticate on the SMTP server, if needed. By default no authentication is performed.\n#-# This configuration property can be overridden in XWikiPreferences objects, by using the \"smtp_server_password\"\n#-# property name.\n# mail.sender.password = somepassword\n\n#-# [Since 6.1M2]\n#-# Extra Java Mail options (see https://javamail.java.net/nonav/docs/api/).\n#-# This configuration property can be overridden in XWikiPreferences objects, by using the \"javamail_extra_props\"\n#-# property name.\n#-# By default the following properties are set automatically:\n#-#   mail.transport.protocol = smtp\n#-#   mail.smtp.host = <value of the mail.sender.host property>\n#-#   mail.smtp.port = <value of the mail.sender.port property>\n#-#   mail.smtp.user = <value of the mail.sender.username property>\n#-#   mail.smtp.from = <value of the mail.sender.from property>\n#-# Example:\n# mail.sender.properties = mail.smtp.starttls.enable = true\n# mail.sender.properties = mail.smtp.socks.host = someserver\n\n#-# [Since 6.4M2]\n#-# Defines which authorization checks are done when sending mails using the Mail Sender Script Service.\n#-# Example of valid values:\n#-# - \"programmingrights\": the current document must have Programming Rights\n#-# - \"alwaysallow\": no check is performed. This is useful when running XWiki in a secure environment where we\n#-#   want to allow all users to be able to send emails through the Script Service.\n#-# The default is:\n# mail.sender.scriptServiceCheckerHint = programmingrights\n\n#-# [Since 6.4M2]\n#-# optional default email addresses to add to the BCC mail header when sending email.\n# mail.sender.bcc = john@doe.com,mary@doe.com\n\n#-# [Since 6.4RC1]\n#-# The delay to wait between each mail being sent, in milliseconds. This is done to support mail throttling and not\n#-# be considered a spammer by mail servers.\n#-# The default is 8 seconds:\n# mail.sender.sendWaitTime = 8000\n\n#-# [Since 6.4.1, 7.0M1]\n#-# When using the Database Mail Listener, whether mail statuses for mails that have been sent successfully must be\n#-# discarded or not. They could be kept for tracability purpose for example.\n#-# The default is:\n# mail.sender.database.discardSuccessStatuses = true\n\n#-# [Since 11.6RC1]\n#-# Max queue size for the prepare mail thread. When the max size is reached, asynchronously sending a mail will block\n#-# till the first mail item in the prepare queue has been processed.\n# mail.sender.prepareQueueCapacity = 1000\n\n#-# [Since 11.6RC1]\n#-# Max queue size for the send mail thread. When the max size is reached, the prepare queue will block till the first\n# mail item in the send queue has been sent.\n# mail.sender.sendQueueCapacity = 1000\n\n#-# [Since 12.9RC1]\n#-# Decides if XWiki should resend automatically mails that were prepared but not sent, at restart.\n#-# Note that emails that were in the prepare_error state are not resent since they failed to be saved and thus cannot\n#-# be resent.\n# mail.sender.database.resendAutomaticallyAtStartup = true\n\n#-------------------------------------------------------------------------------------\n# Debug\n#-------------------------------------------------------------------------------------\n\n#-# [Since 7.0RC1]\n#-# Indicate if web resources should be loaded minified by default.\n#-# It's enabled by default which can make js/css hard to read.\n# debug.minify=false\n\n#-------------------------------------------------------------------------------------\n# LESS CSS\n#-------------------------------------------------------------------------------------\n\n#-# [Since 7.4.2, 8.0M2]\n#-# The number of LESS compilations that can be performed simultaneously. Put a little number if your resources are\n#-# limited.\n#-#\n#-# The default is:\n# lesscss.maximumSimultaneousCompilations = 4\n\n#-# [Since 8.0RC1]\n#-# Generate sourcemaps inline in the CSS files.\n#-#\n#-# The default is:\n# lesscss.generateInlineSourceMaps = false\n\n#-------------------------------------------------------------------------------------\n# Edit\n#-------------------------------------------------------------------------------------\n\n#-# [Since 8.2RC1]\n#-# Indicate the default editor to use for a specific data type.\n#-# The editors are components so they are specified using their role hints.\n#-# Some data types can be edited in multiple ways, by different types of editors.\n#-# Thus you can also indicate the default editor to use from a specific category (editor type).\n#-#\n#-# The format is this:\n#-# edit.defaultEditor.<dataType>=<roleHintOrCategory>\n#-# edit.defaultEditor.<dataType>#<category>=<roleHintOrSubCategory>\n#-#\n#-# The default bindings are:\n# edit.defaultEditor.org.xwiki.rendering.syntax.SyntaxContent=text\n# edit.defaultEditor.org.xwiki.rendering.syntax.SyntaxContent#text=text\n# edit.defaultEditor.org.xwiki.rendering.block.XDOM=text\n# edit.defaultEditor.org.xwiki.rendering.block.XDOM#text=text\n#if ($xwikiPropertiesDefaultWysiwygEditor)\nedit.defaultEditor.org.xwiki.rendering.syntax.SyntaxContent#wysiwyg=$xwikiPropertiesDefaultWysiwygEditor\nedit.defaultEditor.org.xwiki.rendering.block.XDOM#wysiwyg=$xwikiPropertiesDefaultWysiwygEditor\n#end\n\n#-# [Since 11.3.2, 11.6RC1]\n#-# Indicate if the mechanism to detect and handle edition conflicts should be enabled or not.\n#-# If disabled, it means that in case of edition conflicts, the latest save will be always take into account, and\n#-# erase previous data (which can always be recovered in the history of the document).\n#-# This option is provided because the feature is still experimental and it could be useful is some specific usecases\n#-# to switch it off. However it is not recommended to do so.\n#-#\n#-# The default is:\n# edit.conflictChecking.enabled = true\n\n#-# [Since 12.5]\n#-# Indicate if the XWiki documents should be edited in-place, without leaving the view mode, whenever possible (e.g. if\n#-# the default edit mode for that document and the preferred editor both support in-place editing). When enabled,\n#-# clicking on the document Edit button makes the document title and content editable in-place, without leaving the\n#-# view mode. When disabled, clicking on the document Edit button loads the default (stand-alone) edit mode for that\n#-# document.\n#-#\n#-# The default is:\n# edit.document.inPlaceEditing.enabled = true\n\n#-------------------------------------------------------------------------------------\n# Notifications\n#-------------------------------------------------------------------------------------\n\n#-# [Since 9.4RC1]\n#-# Indicates if the notifications module should be enabled on the platform.\n#-#\n#-# The default is :\n# notifications.enabled = true\n\n#-# [Since 9.5C1]\n#-# Indicates if the notifications module can send emails.\n#-#\n#-# The default is :\n# notifications.emails.enabled = true\n\n#-# [Since 9.6RC1]\n#-# Indicate the grace time used when sending live email notifications.\n#-# When an event is triggered in the wiki (for example, a document update), the platform will wait X minutes\n#-# before sending live notifications emails. During this time, if events of the same kind are recieved, they will\n#-# be grouped in the same email.\n#-#\n#-# The grace time define the period (in minutes) for which the platform should wait before sending a notification\n#-# mail after an event.\n#-#\n#-# The default is :\n# notifications.emails.live.graceTime = 10\n\n#-# [Since 9.8RC1]\n#-# Indicate if the \"watched entities\" feature is enabled on the platform.\n#-# This feature mimics what the \"Watchlist Application\" does so it may not be a good idea to have both on the platform.\n#-#\n#-# The default is :\n# notifications.watchedEntities.enabled = true\n\n#-# [Since 9.11.8]\n#-# [Since 10.6RC1]\n#-# The automatic watch mode used by default. The value can be changed by an administrator in the wiki's administration\n#-# or by any user in their own settings.\n#-#\n#-# Possible values:\n#-#\n#-# - none:  no page is added to the list of watched pages automatically.\n#-# - all:   everytime a user makes a change on a page, it is automatically added to her list of watched pages.\n#-# - major: everytime a user makes a major change on a page, it is automatically added to her list of watched pages.\n#-# - new:   only pages created by a user are added to her list of watched pages.\n#-#\n#-# The default is :\n# notifications.watchedEntities.autoWatch = major\n\n#-# [Since 10.11.4]\n#-# [Since 11.2]\n#-# The search for notifications in the REST API is done trough a thread pool to limit the impact on the rest of the\n#-# XWiki instance.\n#-# This properties controls the size of this pool. Any number lower than 1 disable the thread pool system.\n#-# \n#-# The default is :\n# notifications.rest.poolSize = 2\n\n#-# [Since 10.11.8]\n#-# [Since 11.3]\n#-# Enable or disable caching of notification search result in the REST or async API.\n#-# \n#-# The default is :\n# notifications.rest.cache = true\n\n#-# [Since 12.6]\n#-# When this option is enabled the relation between users and events is evaluated and stored when the events are\n#-# generated instead of each time they are displayed.\n#-#\n#-# The default is :\n# notifications.eventPrefilteringEnabled = true\n\n#-# [Since 12.5RC1]\n#-# The async notifications renderer is using a dedicated thread pool to limit the impact on the rest of the XWiki\n#-# instance.\n#-# This properties controls the size of this pool.\n#-#\n#-# The default is :\n# notifications.async.poolSize = 2\n\n#-------------------------------------------------------------------------------------\n# Mentions\n#-------------------------------------------------------------------------------------\n\n#-# [Since 12.6]\n#-# The detection and notification for the user mentions in created or edited content is done asynchronously \n#-# by a pool of consumers.\n#-# This properties controls the size of this pool.\n#-#\n#-# The default is :\n# mentions.poolSize = 1\n\n#-------------------------------------------------------------------------------------\n# Event Stream\n#-------------------------------------------------------------------------------------\n\n#-# [Since 11.1RC1]\n#-# The Event Stream, on which the notifications are based, stores data in a dedicated table in the database.\n#-#\u00a0Each wiki has its own database. The feature can be configured to store its data into the database corresponding to\n#-# the wiki, into the main database (default: xwiki) or both. These options should not be both set to false (in this\n#-# case the local store will be forced).\n#-# Important note: disabling storage in the main store will prevent the notifications from retrieving events from\n#-# subwikis. Moreover, disabling the main store makes impossible for global users to watch pages from subwikis. It is\n#-# not recommended.\n#-#\n#-# This feature was originally implemented by the Activity Stream plugin so these settings might sound familiar to you.\n#-#\n#-# The default is :\n# eventstream.uselocalstore = true\n#-#\n#-# The default is :\n# eventstream.usemainstore = true\n#-#\n#-# Number of days the events should be kept (0 or any negative value: infinite duration)\n#-# Note: if this value is greater than 0 a scheduler job will be created, this job will then be fired every week to\n#-# delete events older than the configured value.\n#-# The default is :\n# eventstream.daystokeepevents = 0\n\n#-# [Since 12.4]\n#-# Indicate if the new no-SQL oriented event store is enabled. Once enabled the Solr implementation is\n#-# used by default but other implementations (like a MongoDB based implementation for example) might come later.\n#-# It's enabled by default since 12.6.\n# eventstream.store.enabled = true\n#-# Indicate which event store implementation to use. The default implementation is based on Solr.\n# eventstream.store = solr\n\n#-------------------------------------------------------------------------------------\n# Logging\n#-------------------------------------------------------------------------------------\n\n#-# [Since 12.0RC1]\n#-# Indicate of logging about the use of deprecated APIs/feature should be enabled.\n#-# \n#-# The default is:\n# logging.deprecated.enabled = true\n\n#-------------------------------------------------------------------------------------\n# User\n#-------------------------------------------------------------------------------------\n\n#-# [Since 12.2]\n#-# Indicate where users are stored.\n#-#\n#-# The default (and currently the only supported option) is:\n# user.store.hint = document\n\n#-# [Since 12.2]\n#-# Define preferences for the SuperAdmin user.\n#-#\n#-# The format is:\n#-# user.preferences.superadmin.<preference name> = <value>\n#-#\n#-# Examples:\n#-# user.preferences.superadmin.displayHiddenDocuments = 0\n#-# user.preferences.superadmin.editor = Text\n\n#-# [Since 12.2]\n#-# Define preferences for the Guest user.\n#-#\n#-# The format is:\n#-# user.preferences.guest.<preference name> = <value>\n#-#\n#-# Examples:\n#-# user.preferences.guest.displayHiddenDocuments = 1\n#-# user.preferences.guest.editor = Text\n\n#-------------------------------------------------------------------------------------\n# Refactoring\n#-------------------------------------------------------------------------------------\n\n#-# [Since 12.5RC1]\n#-# Indicate to use the old implementation based on copy and delete, or the new implementation using an atomic operation\n#-# on database (which is a lot more performant).\n#-# This property aims at being removed in the future once the atomic rename has been validated to work 100% fine.\n#-# Only use it if you are facing an issue with the move/rename features.\n#-#\n#-# The default value is:\n# refactoring.rename.useAtomicRename = true\n\n#-# [Since 12.9RC1]\n#-# Indicates whether skipping the recycle bin when deleting pages is allowed for Advanced users.\n#-# It is disabled by default.\n#-# This setting is only used if the wiki has a recycle bin activated (xwiki.recyclebin=1 in xwiki.cfg).\n#-# This setting can be overloaded:\n#-# * By the main wiki in the Refactoring.Code.RefactoringConfigurationClass class of the\n#-#   Refactoring.Code.RefactoringConfiguration document of the main wiki.\n#-# * By sub-wikis in the Refactoring.Code.RefactoringConfigurationClass class of the\n#-#   Refactoring.Code.RefactoringConfiguration document of the sub-wikis (itself overloading the main wiki's\n#-#   configuration).\n#-#\n#-# The default value is:\n# refactoring.isRecycleBinSkippingActivated = false\n\n#-------------------------------------------------------------------------------------\n# Skin Extensions\n#-------------------------------------------------------------------------------------\n\n#-# [Since 12.7.1, 12.8RC1]\n#-# Indicate whether the JavaScript skin extensions should be parsed and minified using strict mode. When strict mode is\n#-# enabled:\n#-# * the JavaScript minification may fail if the code is poorly written. See\n#-#   https://github.com/google/closure-compiler/wiki/Warnings for a list of errors that may occur. When this happens\n#-#   XWiki uses the original (unminified) JavaScript source as a fall-back and logs some error messages that indicate\n#-#   how the bad code can be fixed.\n#-# * the minified JavaScript includes the \"use strict;\" statement which means the code may fail at runtime if it doesn't\n#-#   follow the ECMAScript strict rules. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\n#-#\n#-# The default value is:\n# skinx.jsStrictModeEnabled = false\n\n$!xwikiPropertiesAdditionalProperties\n"], "filenames": ["xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/api/Document.java", "xwiki-platform-tools/xwiki-platform-tool-configuration-resources/src/main/resources/xwiki.properties.vm"], "buggy_code_start_loc": [39, 666], "buggy_code_end_loc": [2541, 1189], "fixing_code_start_loc": [40, 667], "fixing_code_end_loc": [2554, 1196], "type": "CWE-863", "message": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In affected versions any user with SCRIPT right can save a document with the right of the current user which allow accessing API requiring programming right if the current user has programming right. This has been patched in XWiki 13.0. Users are advised to update to resolve this issue. The only known workaround is to limit SCRIPT access.", "other": {"cve": {"id": "CVE-2022-23615", "sourceIdentifier": "security-advisories@github.com", "published": "2022-02-09T21:15:07.813", "lastModified": "2022-02-16T16:15:28.717", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In affected versions any user with SCRIPT right can save a document with the right of the current user which allow accessing API requiring programming right if the current user has programming right. This has been patched in XWiki 13.0. Users are advised to update to resolve this issue. The only known workaround is to limit SCRIPT access."}, {"lang": "es", "value": "XWiki Platform es una plataforma wiki gen\u00e9rica que ofrece servicios de ejecuci\u00f3n para las aplicaciones construidas sobre ella. En las versiones afectadas, cualquier usuario con derecho de SCRIPT puede guardar un documento con el derecho del usuario actual, lo que permite acceder a la API que requiere derecho de programaci\u00f3n si el usuario actual presenta derecho de programaci\u00f3n. Esto ha sido parcheado en XWiki versi\u00f3n 13.0. Es recomendado a usuarios actualizar para resolver este problema. La \u00fanica medida de mitigaci\u00f3n conocida es limitar el acceso a SCRIPT"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-863"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-863"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.0", "versionEndExcluding": "13.0", "matchCriteriaId": "6C69440C-1B21-409C-9461-2FB8B1FC1F1F"}]}]}], "references": [{"url": "https://github.com/xwiki/xwiki-platform/commit/7ab0fe7b96809c7a3881454147598d46a1c9bbbe", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-f4cj-3q3h-884r", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-5024", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-platform/commit/7ab0fe7b96809c7a3881454147598d46a1c9bbbe"}}