{"buggy_code": ["name: Release\nconcurrency: build\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  build_test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Prepare - Checkout\n        uses: actions/checkout@v3.1.0\n\n      - name: Prepare - Inject short Variables\n        uses: rlespinasse/github-slug-action@v4.3.2\n\n      - name: Prepare - Set up QEMU\n        uses: docker/setup-qemu-action@v2.1.0\n\n      - name: Prepare - Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2.2.1\n\n      - name: Build - BUILD\n        uses: docker/build-push-action@v3.2.0\n        with:\n          load: true\n          build-args: \"SQUIDEX__BUILD__VERSION=${{ env.GITHUB_REF_SLUG }},SQUIDEX__RUNTIME__VERSION=${{ env.GITHUB_REF_SLUG }}\"\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n          tags: squidex-local\n\n      - name: Test - Start Compose\n        run: docker-compose up -d\n        working-directory: tools/TestSuite\n\n      - name: Test - RUN\n        uses: kohlerdominik/docker-run-action@v1.1.0\n        with:\n          image: squidex/build:7\n          environment: |\n            CONFIG__BACKUPURL=http://localhost:5000\n            CONFIG__WAIT=60\n            CONFIG__SERVER__URL=http://localhost:8080\n            WEBHOOKCATCHER__HOST__ENDPOINT=webhookcatcher\n          default_network: host\n          options: --name test1\n          volumes: ${{ github.workspace }}:/src\n          run: dotnet test /src/tools/TestSuite/TestSuite.ApiTests/TestSuite.ApiTests.csproj --filter Category!=NotAutomated\n\n      - name: Test - RUN on path\n        uses: kohlerdominik/docker-run-action@v1.1.0\n        with:\n          image: squidex/build:7\n          environment: |\n            CONFIG__BACKUPURL=http://localhost:5000\n            CONFIG__WAIT=60\n            CONFIG__SERVER__URL=http://localhost:8081/squidex\n            WEBHOOKCATCHER__HOST__ENDPOINT=webhookcatcher\n          default_network: host\n          options: --name test2\n          volumes: ${{ github.workspace }}:/src\n          run: dotnet test /src/tools/TestSuite/TestSuite.ApiTests/TestSuite.ApiTests.csproj --filter Category!=NotAutomated\n\n      - name: Test - RUN with dedicated collections\n        uses: kohlerdominik/docker-run-action@v1.1.0\n        with:\n          image: squidex/build:7\n          environment: |\n            CONFIG__BACKUPURL=http://localhost:5000\n            CONFIG__WAIT=60\n            CONFIG__SERVER__URL=http://localhost:8082\n            WEBHOOKCATCHER__HOST__ENDPOINT=webhookcatcher\n          default_network: host\n          options: --name test3\n          volumes: ${{ github.workspace }}:/src\n          run: dotnet test /src/tools/TestSuite/TestSuite.ApiTests/TestSuite.ApiTests.csproj --filter Category!=NotAutomated\n       \n      - name: Test - Dump docker logs on failure\n        if: failure()\n        uses: jwalton/gh-docker-logs@v2.2.1\n        with:\n         images: 'squidex-local,squidex/resizer'\n         tail: '100'\n\n      - name: Test - Cleanup\n        if: always()\n        run: docker-compose down\n        working-directory: tools/TestSuite\n\n      - name: Publish - Get Major Version\n        id: version\n        uses: rishabhgupta/split-by@v1\n        with:\n          string: \"${{ env.GITHUB_REF_SLUG }}\"\n          split-by: \".\"\n\n      - name: Publish - Check Tag\n        id: normal-version\n        run: |\n          if [[ ${{ env.GITHUB_REF_SLUG }} =~ ^[0-9]+\\.[0-9]+$ ]]; then\n              echo \"STABLE_VERSION=true\" >> $GITHUB_ENV\n          fi\n\n      - name: Publish - Login to Docker Hub\n        uses: docker/login-action@v2.1.0\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Publish - Rename Tags\n        run: |\n          docker tag squidex-local squidex/squidex:latest\n          docker tag squidex-local squidex/squidex:${{ env.GITHUB_REF_SLUG }}\n          docker tag squidex-local squidex/squidex:${{ steps.version.outputs._0 }}\n    \n      - name: Publish - Push Tags\n        run: |\n          docker tag squidex-local squidex/squidex:${{ env.GITHUB_REF_SLUG }}\n          docker tag squidex-local squidex/squidex:${{ steps.version.outputs._0 }}\n    \n      - name: Publish - Push Latest\n        if: env.STABLE_VERSION == 'true'\n        run: |\n          docker tag squidex-local squidex/squidex:latest\n\n      - name: Release - Make directories\n        run: sudo mkdir /build /release\n\n      - name: Release - Create container\n        run: docker create --name squidex-container squidex-local\n\n      - name: Release - Get binaries\n        run: sudo docker cp squidex-container:/app/. /build\n\n      - name: Release - Zip Binaries\n        run: sudo zip -r /release/binaries.zip .\n        working-directory: /build\n\n      - name: Release - Get Changelog Entry\n        id: changelog_reader\n        uses: mindsers/changelog-reader-action@v2\n        with:\n          version: ${{ env.GITHUB_REF_SLUG }}\n          path: ./CHANGELOG.md\n\n      - name: Release - Publish Binaries\n        uses: ncipollo/release-action@v1\n        with:\n          allowUpdates: true\n          artifactErrorsFailBuild: true\n          artifacts: \"/release/binaries.zip\"\n          body: ${{ steps.changelog_reader.outputs.changes }}\n          name: ${{ env.GITHUB_REF_SLUG }}\n          replacesArtifacts: true\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Release - Cleanup Binaries\n        if: always()\n        run: docker rm squidex-container"], "fixing_code": ["name: Release\nconcurrency: build\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  build_test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Prepare - Checkout\n        uses: actions/checkout@v3.1.0\n\n      - name: Prepare - Inject short Variables\n        uses: rlespinasse/github-slug-action@v4.3.2\n\n      - name: Prepare - Set up QEMU\n        uses: docker/setup-qemu-action@v2.1.0\n\n      - name: Prepare - Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2.2.1\n\n      - name: Build - BUILD\n        uses: docker/build-push-action@v3.2.0\n        with:\n          load: true\n          build-args: \"SQUIDEX__BUILD__VERSION=${{ env.GITHUB_REF_SLUG }},SQUIDEX__RUNTIME__VERSION=${{ env.GITHUB_REF_SLUG }}\"\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n          tags: squidex-local\n\n      - name: Test - Start Compose\n        run: docker-compose up -d\n        working-directory: tools/TestSuite\n\n      - name: Test - RUN\n        uses: kohlerdominik/docker-run-action@v1.1.0\n        with:\n          image: squidex/build:7\n          environment: |\n            CONFIG__BACKUPURL=http://localhost:5000\n            CONFIG__WAIT=60\n            CONFIG__SERVER__URL=http://localhost:8080\n            WEBHOOKCATCHER__HOST__ENDPOINT=webhookcatcher\n          default_network: host\n          options: --name test1\n          volumes: ${{ github.workspace }}:/src\n          run: dotnet test /src/tools/TestSuite/TestSuite.ApiTests/TestSuite.ApiTests.csproj --filter Category!=NotAutomated\n\n      - name: Test - RUN on path\n        uses: kohlerdominik/docker-run-action@v1.1.0\n        with:\n          image: squidex/build:7\n          environment: |\n            CONFIG__BACKUPURL=http://localhost:5000\n            CONFIG__WAIT=60\n            CONFIG__SERVER__URL=http://localhost:8081/squidex\n            WEBHOOKCATCHER__HOST__ENDPOINT=webhookcatcher\n          default_network: host\n          options: --name test2\n          volumes: ${{ github.workspace }}:/src\n          run: dotnet test /src/tools/TestSuite/TestSuite.ApiTests/TestSuite.ApiTests.csproj --filter Category!=NotAutomated\n\n      - name: Test - RUN with dedicated collections\n        uses: kohlerdominik/docker-run-action@v1.1.0\n        with:\n          image: squidex/build:7\n          environment: |\n            CONFIG__BACKUPURL=http://localhost:5000\n            CONFIG__WAIT=60\n            CONFIG__SERVER__URL=http://localhost:8082\n            WEBHOOKCATCHER__HOST__ENDPOINT=webhookcatcher\n          default_network: host\n          options: --name test3\n          volumes: ${{ github.workspace }}:/src\n          run: dotnet test /src/tools/TestSuite/TestSuite.ApiTests/TestSuite.ApiTests.csproj --filter Category!=NotAutomated\n       \n      - name: Test - Dump docker logs on failure\n        if: failure()\n        uses: jwalton/gh-docker-logs@v2.2.1\n        with:\n         images: 'squidex-local,squidex/resizer'\n         tail: '100'\n\n      - name: Test - Cleanup\n        if: always()\n        run: docker-compose down\n        working-directory: tools/TestSuite\n\n      - name: Publish - Get Major Version\n        id: version\n        uses: rishabhgupta/split-by@v1\n        with:\n          string: \"${{ env.GITHUB_REF_SLUG }}\"\n          split-by: \".\"\n\n      - name: Publish - Check Tag\n        id: normal-version\n        run: |\n          if [[ ${{ env.GITHUB_REF_SLUG }} =~ ^[0-9]+\\.[0-9]+(\\.[0-9]+){0,2}$ ]]; then\n              echo \"STABLE_VERSION=true\" >> $GITHUB_ENV\n          fi\n\n      - name: Publish - Login to Docker Hub\n        uses: docker/login-action@v2.1.0\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Publish - Rename Tags\n        run: |\n          docker tag squidex-local squidex/squidex:latest\n          docker tag squidex-local squidex/squidex:${{ env.GITHUB_REF_SLUG }}\n          docker tag squidex-local squidex/squidex:${{ steps.version.outputs._0 }}\n    \n      - name: Publish - Push Tags\n        run: |\n          docker push squidex/squidex:${{ env.GITHUB_REF_SLUG }}\n          docker push squidex/squidex:${{ steps.version.outputs._0 }}\n    \n      - name: Publish - Push Tags Latest\n        if: env.STABLE_VERSION == 'true'\n        run: |\n          docker push squidex/squidex:latest\n\n      - name: Release - Make directories\n        run: sudo mkdir /build /release\n\n      - name: Release - Create container\n        run: docker create --name squidex-container squidex-local\n\n      - name: Release - Get binaries\n        run: sudo docker cp squidex-container:/app/. /build\n\n      - name: Release - Zip Binaries\n        run: sudo zip -r /release/binaries.zip .\n        working-directory: /build\n\n      - name: Release - Get Changelog Entry\n        id: changelog_reader\n        uses: mindsers/changelog-reader-action@v2\n        with:\n          version: ${{ env.GITHUB_REF_SLUG }}\n          path: ./CHANGELOG.md\n\n      - name: Release - Publish Binaries\n        uses: ncipollo/release-action@v1\n        with:\n          allowUpdates: true\n          artifactErrorsFailBuild: true\n          artifacts: \"/release/binaries.zip\"\n          body: ${{ steps.changelog_reader.outputs.changes }}\n          name: ${{ env.GITHUB_REF_SLUG }}\n          replacesArtifacts: true\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Release - Cleanup Binaries\n        if: always()\n        run: docker rm squidex-container"], "filenames": [".github/workflows/release.yml"], "buggy_code_start_loc": [102], "buggy_code_end_loc": [127], "fixing_code_start_loc": [102], "fixing_code_end_loc": [127], "type": "NVD-CWE-Other", "message": "Improper Handling of Additional Special Element in GitHub repository squidex/squidex prior to 7.4.0.", "other": {"cve": {"id": "CVE-2023-3580", "sourceIdentifier": "security@huntr.dev", "published": "2023-07-10T16:15:56.727", "lastModified": "2023-07-18T15:14:36.807", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Handling of Additional Special Element in GitHub repository squidex/squidex prior to 7.4.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-167"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:squidex.io:squidex:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.4.0", "matchCriteriaId": "1B5AA83C-C544-40BA-AAC6-A2D0A9E64895"}]}]}], "references": [{"url": "https://github.com/squidex/squidex/commit/2aca7621845ce18ed4065cba8e3d0fa68aaf02bf", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/4eed53ca-06c2-43aa-aea8-c03ea5f13ce4", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/squidex/squidex/commit/2aca7621845ce18ed4065cba8e3d0fa68aaf02bf"}}