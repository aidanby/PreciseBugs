{"buggy_code": ["#\n# FileBroker - Common Library\n# (c) 2010-2013 Jakub Zubielik <jakub.zubielik@nordea.com>\n#\n\nclass AVScanner\n  class AVScannerNotAvailable < StandardError\n  end\n\n  class AVScannerDatabaseNotAvailable < StandardError\n  end\n\n  class VirusDetected < StandardError\n  end\n\n  def initialize\n    @sys = System.new\n  end\n\n  def scan(file)\n    begin\n      @sys.exec(\"clamscan -i \\\"#{file}\\\" 2>&1\")\n    rescue\n      if $!.to_s.strip =~ /command not found/\n        raise AVScannerNotAvailable, \"av scanner is not available\"\n      elsif $!.to_s.strip =~ /No supported database files found in/\n        raise AVScannerDatabaseNotAvailable 'av scanner database is not available'\n      else\n        $!.to_s.split(\"\\n\").each { |l|\n          if l.strip =~ /^#{file.gsub(/\\//, \"\\\\\\/\")}\\:\\s(.+)\\sFOUND/\n            virus = $1\n            raise VirusDetected, \"virus detected: #{virus}\"\n          end\n        }\n      end\n    end\n  end\nend\n\nclass Mail\n  def Mail.send(options)\n#   user     = options['user']\n    from     = options['from']\n    to       = options['to']\n#    pass     = options['pass']\n    server   = options['server']\n    subject  = options['subject']\n    port    = options['port']\n\n    body =  \"From: FES Admin <#{from}>\\n\"\n    body << \"To: #{to}\\n\"\n    body << \"Subject: #{subject}\\n\"\n    body << \"Date: #{Time.now}\\n\"\n    body << \"Importance:high\\n\"\n    body << \"MIME-Version:1.0\\n\"\n    body << \"\\n\\n\\n\"\n    body << options['body']\n\n    t = []\n    t << Thread.new {\n      begin\n        s = TCPSocket.open(server, port)\n\n        s.print \"HELO localhost\\r\\n\"\n        s.recvfrom(1024)\n\n        s.print \"EHLO localhost\\r\\n\"\n        s.recvfrom(1024)\n\n        s.print \"MAIL FROM: #{from}\\r\\n\"\n        s.recvfrom(1024)\n\n        s.print \"RCPT TO: #{to}\\r\\n\"\n        s.recvfrom(1024)\n\n        s.print \"DATA\\r\\n\"\n        s.recvfrom(1024)\n\n        s.print body\n\n\n        s.print \"\\r\\n.\\r\\n\"\n        s.recvfrom(1024)\n\n        s.print \"QUIT\\r\\n\"\n        s.recvfrom(1024)\n\n        s.close\n      rescue\n        STDERR.puts $!.to_s\n      end\n    }\n  end\nend\n\nclass System\n  class CommandExecutionError < StandardError\n  end\n\n  class CompressionFailed < StandardError\n  end\n\n  class DecompressionFailed < StandardError\n  end\n\n  class IncorrectMD5 < StandardError\n  end\n\n  class EncodingFailed < StandardError\n  end\n\n  class ArchivingFailed < StandardError\n  end\n\n  def initialize\n\n  end\n\n  def compress(transfer_id, file, level = 0)\n    begin\n\n      self.exec(\"zip -#{level} 'process/#{transfer_id}/files_#{transfer_id}.zip' 'process/#{transfer_id}/#{file}'\")\n      File.unlink(\"process/#{transfer_id}/#{file}\") if File.exist?(\"process/#{transfer_id}/#{file}\")\n    rescue\n      raise CompressionFailed, $!\n    end\n  end\n\n  def decompress(transfer_id, file)\n    begin\n\n      if file =~ /\\.tar\\.bz2$/\n        self.exec(\"tar jxf 'process/#{transfer_id}/#{file}' -C 'process/#{transfer_id}'\")\n      elsif file =~ /\\.tar\\.gz$/\n        self.exec(\"tar zxf 'process/#{transfer_id}/#{file}' -C 'process/#{transfer_id}'\")\n      elsif file =~ /\\.tar$/\n        self.exec(\"tar xf 'process/#{transfer_id}/#{file}' -C 'process/#{transfer_id}'\")\n      elsif file =~ /\\.bz2$/\n        self.exec(\"bzip2 -d 'process/#{transfer_id}/#{file}'\")\n      elsif file =~ /\\.gz$/\n        self.exec(\"gzip -d 'process/#{transfer_id}/#{file}'\")\n      elsif file =~ /\\.zip$/\n        self.exec(\"unzip -o 'process/#{transfer_id}/#{file}' -d 'process/#{transfer_id}'\")\n      else\n        raise DecompressionFailed, 'unknown archive type'\n      end\n      File.unlink(\"process/#{transfer_id}/#{file}\") if File.exist?(\"process/#{transfer_id}/#{file}\")\n    rescue\n      raise DecompressionFailed, $!\n    end\n  end\n\n  def archive(transfer_id, file)\n    begin\n      self.exec(\"zip -5 'archive/#{transfer_id}' 'process/#{transfer_id}/#{file}'\")\n    rescue\n      raise ArchivingFailed, $!\n    end\n  end\n\n  def is_compressed(path)\n    out = self.exec(\"file -b #{path}\")\n    return true if out =~ /bzip2/\n    false\n  end\n\n  def verify_md5(file, file_md5)\n    begin\n      md5_local  = self.exec(\"md5sum \\\"#{file}\\\"\").split(' ')\n      md5_remote = self.exec(\"cat \\\"#{file_md5}\\\"\").split(' ')\n\n      md5_local  = md5_local[0]  if md5_local.is_a?(Array)\n      md5_remote = md5_remote[0] if md5_remote.is_a?(Array)\n    rescue\n      raise \"unknown MD5 verification error: #{$!.to_s}\"\n    end\n\n    raise IncorrectMD5, \"MD5 signature is incorrect\" if md5_remote != md5_local\n    md5_remote\n  end\n\n  def iconv(path, from, to, inline = false)\n    begin\n      self.exec(\"iconv -c -f #{from} -t #{to} #{path} > #{path}.conv\")\n      File.rename(\"#{path}.conv\", path) if inline\n    rescue\n      raise EncodingFailed, $!\n    ensure\n      File.unlink(\"#{path}.conv\")  if File.exist?(\"#{path}.conv\")\n    end\n  end\n\n  def exec(cmd)\n    begin\n      rootdir = __FILE__.split('/')[0..-3].join('/')\n      out_name = Digest::MD5.hexdigest(cmd + rand(Time.now().to_i).to_s) + '.log'\n\n      while File.exist?(\"#{rootdir}/tmp/#{out_name}\")\n        STDERR.puts \"=> File already exist: #{rootdir}/tmp/#{out_name}\"\n        out_name = Digest::MD5.hexdigest(cmd + rand(Time.now().to_i).to_s) + '.log'\n        sleep 1\n      end\n\n      system(\"(#{cmd}) > #{rootdir}/tmp/#{out_name} 2>&1\")\n      out = File.open(\"#{rootdir}/tmp/#{out_name}\", 'r').readlines.join\n      raise StandardError, out.strip if $?.exitstatus > 0\n      out\n    rescue\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      STDERR.puts \"=> System.exec: (#{cmd}) > #{rootdir}/tmp/#{out_name} 2>&1\"\n      STDERR.puts $!.backtrace\n      STDERR.puts $!.message\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      raise $!\n    ensure\n      File.unlink(\"#{rootdir}/tmp/#{out_name}\") if File.exist?(\"#{rootdir}/tmp/#{out_name}\")\n    end\n  end\nend\n\nclass Array\n  def sort_array\n    d = []\n    self.each_with_index { |x, i| d[i] = [x, i]}\n    if block_given?\n      d.sort { |x, y| yield x[0], y[0] }.collect { |x| x[1] }\n    else\n      d.sort.collect { |x| x[1] }\n    end\n  end\n\n  def sort_with(ord = [])\n    return nil if self.length != ord.length\n    self.values_at(*ord)\n  end\nend\n\nclass String\n  def escape_path\n    self.dump.gsub(/\\s/, \"\\\\ \")\n  end\n\n  # 'Natural order' comparison of two strings\n  def String.natcmp(str1, str2, caseInsensitive=false)\n    str1, str2 = str1.dup, str2.dup\n    compareExpression = /^(\\D*)(\\d*)(.*)$/\n\n    if caseInsensitive\n      str1.downcase!\n      str2.downcase!\n    end\n\n        # Remove all whitespace\n    str1.gsub!(/\\s*/, '')\n    str2.gsub!(/\\s*/, '')\n\n    while (str1.length > 0) or (str2.length > 0) do\n      # Extract non-digits, digits and rest of string\n      str1 =~ compareExpression\n      chars1, num1, str1 = $1.dup, $2.dup, $3.dup\n\n      str2 =~ compareExpression\n      chars2, num2, str2 = $1.dup, $2.dup, $3.dup\n\n      # Compare the non-digits\n      case (chars1 <=> chars2)\n        when 0 # Non-digits are the same, compare the digits...\n               # If either number begins with a zero, then compare\n               # alphabetically, otherwise compare numerically\n          if (num1[0] != 48) and (num2[0] != 48)\n            num1, num2 = num1.to_i, num2.to_i\n          end\n\n          case (num1 <=> num2)\n            when -1 then return -1\n            when 1 then return 1\n          end\n\n        when -1 then return -1\n        when 1 then return 1\n      end # case\n\n    end # while\n\n    # Strings are naturally equal\n    return 0\n  end\nend\n\nclass GPG\n\n  class DecryptionFailed < StandardError\n  end\n\n  class EncryptionFailed < StandardError\n  end\n\n  def initialize\n    @sys = System.new\n    @rootdir = File.absolute_path(\"#{File.dirname(__FILE__)}/..\")\n  end\n\n  def encrypt(file, recipients)\n    begin\n      @sys.exec(\"gpg --no-tty --homedir #{@rootdir}/etc/gnupg --batch --encrypt --sign -r #{recipients.join(' -r ')} < \\\"#{file}\\\" > \\\"#{file}.gpg\\\"\")\n      File.unlink(file)\n    rescue\n      File.delete(\"#{file}.gpg\") if File.exist? \"#{file}.gpg\"\n      raise $!\n    end\n  end\n\n  def decrypt(file)\n    if file =~ /^(.+)\\.([gpg|pgp|asc]{3})$/\n      begin\n        @sys.exec(\"gpg --no-tty --homedir #{@rootdir}/etc/gnupg --batch -o \\\"#{$1}\\\" --decrypt \\\"#{$1}.#{$2}\\\" 2>&1\")\n        File.unlink(file)\n      rescue\n        File.unlink(\"#{$1}\") if File.exist?(\"#{$1}\")\n        raise StandardError, 'failed to decrypt file' if out.split(\"\\n\").last =~ /gpg: decrypt_message failed: eof/\n        raise $!\n      end\n    else\n      begin\n        @sys.exec(\"gpg --no-tty --homedir #{@rootdir}/etc/gnupg --batch -o \\\"#{file}.out\\\" --decrypt \\\"#{file}\\\"\")\n        File.rename(\"#{file}.out\", file) if File.exist?(\"#{file}.out\")\n      rescue\n        raise StandardError, \"failed to decrypt file: '#{file}'\" if $!.message =~ /gpg: decrypt_message failed: eof/\n        raise $!\n      ensure\n        File.unlink(\"#{file}.out\") if File.exist?(\"#{file}.out\")\n      end\n    end\n  end\nend\n\nclass Logger\n  def self.puts_error(id, log)\n    File.open(\"log/transfer/#{id}.err\", \"a\") { |f|\n      f.write \"================= trace - #{Time.now}  =================\\n\"\n      f.write \"#{log}\\n\"\n      f.write \"================= trace - #{Time.now}  =================\\n\\n\"\n      f.flush\n    }\n  end\n\n  def self.puts(msg, type = :WARN)\n    Syslog.open(\"FBService\", Syslog::LOG_PID | Syslog::LOG_CONS, Syslog::LOG_LOCAL7) { |s| s.err msg.gsub(/\\%/, \"%%\")     } if type == :ERROR\n    Syslog.open(\"FBService\", Syslog::LOG_PID | Syslog::LOG_CONS, Syslog::LOG_LOCAL7) { |s| s.notice msg.gsub(/\\%/, \"%%\")  } if type == :NOTICE\n    Syslog.open(\"FBService\", Syslog::LOG_PID | Syslog::LOG_CONS, Syslog::LOG_LOCAL7) { |s| s.warning msg.gsub(/\\%/, \"%%\") } if type == :WARN\n  end\nend\n\nclass Database\n  class AccountNotExist < StandardError\n  end\n\n  class ClientNotExist < StandardError\n  end\n\n  class ClientAlreadyExist < StandardError\n  end\n\n  def initialize\n\n    @cfg = {}\n    File.open(\"#{File.dirname(__FILE__)}/../etc/filebroker.conf\").readlines.each { |l|\n      next if l !~ /^\\S+\\s*=\\s*\\S+$/\n      @cfg[\"#{l.split('=').first}\"] = l.split('=').last.strip\n    }\n\n    @db = PGconn.new(:hostaddr => @cfg['dbhost'], :port => @cfg['dbport'], :dbname => @cfg['dbname'], :user => @cfg['dbuser'], :password => @cfg['dbpass'])\n    @sys = System.new\n    @log2zbx = \"/tech/nordea/common/bin/log2zbx.pl\"\n    @hostname = @sys.exec(\"hostname\").strip\n  end\n\n  def initdb\n    sql = File.open(\"#{File.dirname(__FILE__)}/../etc/fb_db.sql\", \"r\").readlines\n    @db.exec(sql)\n  end\n\n  def cleandb\n    sql = \"\n    DELETE FROM fb_account\n    \"\n  end\n\n  def import_key(key)\n    id = @db.exec(\"SELECT nextval('fb_keys_key_id_seq') AS id\")[0]['id']\n    File.open(\"#{File.dirname(__FILE__)}/../etc/keys/#{'0x%06x.key' % id}\", 'w') { |fd| fd.write(File.open(key['file'], 'r').readline) }\n    @db.exec(\"INSERT into fb_keys (key_id, type, description) VALUES (#{id}, E'#{key['type']}', E'#{key['description']}')\")\n    id\n  end\n\n  def insert_transfer(transfer_hash, source_id, target_id, source_path, target_path)\n    id = @db.exec(\"SELECT nextval('fb_transfer_transfer_id_seq') AS id\")[0]['id']\n    @db.exec(\"INSERT into fb_transfer (transfer_id, transfer_hash, source_id, target_id, source_path, target_path) VALUES (#{id}, '#{transfer_hash}', #{source_id}, #{target_id}, '#{source_path}', '#{target_path}')\")\n    id\n  end\n\n  def insert_transfer_status(transfer_id, status_id, status_time)\n    @db.exec(\"INSERT into fb_transfer_status (transfer_id, status_id, status_time) VALUES (#{transfer_id}, #{status_id}, '#{status_time}')\")\n    sql = \"\n    SELECT\n      fb_transfer.transfer_id,\n      fb_transfer.transfer_hash,\n      fb_transfer_status.status_time,\n      fb_transfer_status_dict.status_id,\n      fb_transfer_status_dict.status_desc,\n      fb_transfer.source_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.source_id) AS source_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_login,\n      fb_transfer.source_path,\n      fb_transfer.target_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.target_id) AS target_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_login,\n      fb_transfer.target_path\n    FROM\n      public.fb_transfer,\n      public.fb_transfer_status,\n      public.fb_transfer_status_dict,\n      public.fb_account\n    WHERE\n      fb_transfer_status.transfer_id = fb_transfer.transfer_id AND\n      fb_transfer_status_dict.status_id = fb_transfer_status.status_id AND\n      (fb_account.account_id = fb_transfer.source_id OR fb_account.account_id = fb_transfer.target_id) AND\n      fb_transfer.transfer_id = #{transfer_id}\n    ORDER BY fb_transfer_status.status_time ASC\"\n\n    t = @db.exec(sql)[0]\n    if self.select_configuration('syslog') != 'false'\n      log_str = \"TID [#{t['transfer_hash']}]: #{t['status_desc'].upcase}: #{t['source_protocol']}://#{t['source_login']}@#{t['source_address']}:#{t['source_port']}:#{t['source_path']} => #{t['target_protocol']}://#{t['target_login']}@#{t['target_address']}:#{t['target_port']}:#{t['target_path']}\"\n      if status_id == FBService::TRANSFER_COMPLETED_SUCCESSFULLY\n        Logger.puts(log_str, :NOTICE)\n      elsif status_id == FBService::TRANSFER_COMPLETED_WITH_ERRORS\n        Logger.puts(log_str, :ERROR)\n      else\n        Logger.puts(log_str, :WARN)\n      end\n    end\n  end\n\n  def update_transfer_status(transfer_id, status_id, status_time)\n    @db.exec(\"UPDATE fb_transfer_status SET status_id=#{status_id}, status_time='#{status_time}' WHERE transfer_id=#{transfer_id}\")\n    sql = \"\n    SELECT\n      fb_transfer.transfer_id,\n      fb_transfer.transfer_hash,\n      fb_transfer_status.status_time,\n      fb_transfer_status_dict.status_id,\n      fb_transfer_status_dict.status_desc,\n      fb_transfer.source_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.source_id) AS source_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_login,\n      fb_transfer.source_path,\n      fb_transfer.target_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.target_id) AS target_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_login,\n      fb_transfer.target_path\n    FROM\n      public.fb_transfer,\n      public.fb_transfer_status,\n      public.fb_transfer_status_dict,\n      public.fb_account\n    WHERE\n      fb_transfer_status.transfer_id = fb_transfer.transfer_id AND\n      fb_transfer_status_dict.status_id = fb_transfer_status.status_id AND\n      (fb_account.account_id = fb_transfer.source_id OR fb_account.account_id = fb_transfer.target_id) AND\n      fb_transfer.transfer_id = #{transfer_id}\n    ORDER BY fb_transfer_status.status_time ASC\"\n\n    t = @db.exec(sql)[0]\n    if self.select_configuration('syslog') != 'false'\n      log_str = \"TID [#{t['transfer_hash']}]: #{t['status_desc'].upcase}: #{t['source_protocol']}://#{t['source_login']}@#{t['source_address']}:#{t['source_port']}:#{t['source_path']} => #{t['target_protocol']}://#{t['target_login']}@#{t['target_address']}:#{t['target_port']}:#{t['target_path']}\"\n      if status_id.to_i == FBService::TRANSFER_COMPLETED_SUCCESSFULLY\n        Logger.puts(log_str, :NOTICE)\n      elsif status_id.to_i == FBService::TRANSFER_COMPLETED_WITH_ERRORS\n        Logger.puts(log_str, :ERROR)\n      else\n        Logger.puts(log_str, :WARN)\n      end\n    end\n  end\n\n  def select_transfer_status(transfer_id)\n    transfer_id = @db.exec(\"SELECT transfer_id FROM fb_transfer WHERE transfer_hash='#{transfer_id}'\")[0]['transfer_id'] if transfer_id =~ /^\\S{32}$/\n    @db.exec(\"SELECT * FROM fb_transfer_status WHERE transfer_id=#{transfer_id}\")[0]\n  end\n\n  def select_transfer_status_desc(status_id)\n    @db.exec(\"SELECT status_desc FROM fb_transfer_status_dict WHERE status_id=#{status_id}\")[0]['status_desc']\n  end\n\n  def insert_file_status(transfer_id, file, status_id, status_time)\n    @db.exec(\"INSERT into fb_file_status (transfer_id, filename, status_id, status_time) VALUES (#{transfer_id}, '#{file}', #{status_id}, '#{status_time}')\")\n  end\n\n  def update_file_status(transfer_id, file, status_id, status_time)\n    if @db.exec(\"SELECT * FROM fb_file_status WHERE transfer_id=#{transfer_id} AND filename='#{file}'\").count > 0\n      @db.exec(\"UPDATE fb_file_status SET status_id=#{status_id}, status_time='#{status_time}' WHERE transfer_id=#{transfer_id} AND filename='#{file}'\")\n    else\n      insert_file_status(transfer_id, file, status_id, status_time)\n    end\n  end\n\n  def select_file_status(transfer_id)\n    transfer_id = @db.exec(\"SELECT transfer_id FROM fb_transfer WHERE transfer_hash='#{transfer_id}'\")[0]['transfer_id'] if transfer_id =~ /^\\S{32}$/\n    @db.exec(\"SELECT * FROM fb_file_status WHERE transfer_id=#{transfer_id} ORDER BY filename ASC\")\n  end\n\n  def select_file_status_desc(status_id)\n    @db.exec(\"SELECT status_desc FROM fb_file_status_dict WHERE status_id=#{status_id}\")[0]['status_desc']\n  end\n\n  def select_file_status_type(status_id)\n    @db.exec(\"SELECT status_type FROM fb_file_status_dict WHERE status_id=#{status_id}\")[0]['status_type']\n  end\n\n  def select_configuration(key)\n    @db.exec(\"SELECT value FROM fb_configuration WHERE key='#{key}'\")[0]['value']\n  end\n\n  def insert_configuration(key, value)\n    @db.exec(\"INSERT INTO fb_configuration (key, value) VALUES ('#{key}', '#{value}')\")\n  end\n\n  def select_client_acl(client_id)\n    @db.exec(\"SELECT ace_id FROM fb_client_acl WHERE client_id='#{client_id}'\")\n  end\n\n  def select_client_acl_desc(ace_id)\n    @db.exec(\"SELECT * FROM fb_client_acl_dict WHERE ace_id=#{ace_id}\")[0]['ace_desc']\n  end\n\n  def select_transfer_by_status(status_id)\n    @db.exec(\"SELECT * FROM fb_transfer WHERE status_id=#{status_id}\")\n  end\n\n  def select_transfer_by_source(source_id)\n    @db.exec(\"SELECT * FROM fb_transfer WHERE source_id=#{source_id}\")\n  end\n\n  def select_running_transfers_by_source(status_id, source_id, source_path)\n    @db.exec(\"SELECT fb_transfer.transfer_id FROM fb_transfer, fb_transfer_status WHERE fb_transfer.source_id=#{source_id} AND fb_transfer_status.status_id=#{status_id} AND fb_transfer.source_path='#{source_path}' AND fb_transfer.transfer_id=fb_transfer_status.transfer_id\")\n  end\n\n  def select_running_transfers\n    sql = \"\n    SELECT DISTINCT\n      fb_transfer.transfer_id,\n      fb_transfer.transfer_hash,\n      fb_transfer_status.status_time,\n      fb_transfer_status_dict.status_id,\n      fb_transfer_status_dict.status_desc,\n      fb_transfer.source_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.source_id) AS source_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_login,\n      fb_transfer.source_path,\n      fb_transfer.target_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.target_id) AS target_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_login,\n      fb_transfer.target_path\n    FROM\n      public.fb_transfer,\n      public.fb_transfer_status,\n      public.fb_transfer_status_dict,\n      public.fb_account\n    WHERE\n      fb_transfer_status.transfer_id = fb_transfer.transfer_id AND\n      fb_transfer_status_dict.status_id = fb_transfer_status.status_id AND\n      fb_transfer_status.status_id = #{FBService::TRANSFER_RUNNING} AND\n      (fb_account.account_id = fb_transfer.source_id OR fb_account.account_id = fb_transfer.target_id)\n    ORDER BY fb_transfer_status.status_time ASC\"\n\n    @db.exec(sql)\n  end\n\n  def select_last_transfers(n)\n    sql = \"\n    SELECT DISTINCT\n      fb_transfer.transfer_id,\n      fb_transfer.transfer_hash,\n      fb_transfer_status.status_time,\n      fb_transfer_status_dict.status_id,\n      fb_transfer_status_dict.status_desc,\n      fb_transfer.source_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.source_id) AS source_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_login,\n      fb_transfer.source_path,\n      fb_transfer.target_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.target_id) AS target_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_login,\n      fb_transfer.target_path\n    FROM\n      public.fb_transfer,\n      public.fb_transfer_status,\n      public.fb_transfer_status_dict,\n      public.fb_account\n    WHERE\n      fb_transfer_status.transfer_id = fb_transfer.transfer_id AND\n      fb_transfer_status_dict.status_id = fb_transfer_status.status_id AND\n\t\t\tfb_transfer_status.status_id <> #{FBService::TRANSFER_RUNNING} AND\n      (fb_account.account_id = fb_transfer.source_id OR fb_account.account_id = fb_transfer.target_id)\n    ORDER BY fb_transfer_status.status_time DESC LIMIT #{n}\"\n\n    @db.exec(sql)\n  end\n\n  def select_failed_transfers(n)\n    sql = \"\n    SELECT\n      fb_transfer.transfer_id,\n      fb_transfer.transfer_hash,\n      fb_transfer_status.status_time,\n      fb_transfer_status_dict.status_id,\n      fb_transfer_status_dict.status_desc,\n      fb_transfer.source_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.source_id) AS source_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_login,\n      fb_transfer.source_path,\n      fb_transfer.target_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.target_id) AS target_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_login,\n      fb_transfer.target_path\n    FROM\n      public.fb_transfer,\n      public.fb_transfer_status,\n      public.fb_transfer_status_dict,\n      public.fb_account\n    WHERE\n      fb_transfer_status.transfer_id = fb_transfer.transfer_id AND\n      fb_transfer_status_dict.status_id = fb_transfer_status.status_id AND\n      fb_transfer_status.status_id = #{FBService::TRANSFER_COMPLETED_WITH_ERRORS} AND\n      (fb_account.account_id = fb_transfer.source_id OR fb_account.account_id = fb_transfer.target_id)\n    ORDER BY fb_transfer_status.status_time ASC LIMIT #{n}\"\n\n    @db.exec(sql)\n  end\n\n  def select_transfers_by_hash(h)\n    sql = \"\n    SELECT\n      fb_transfer.transfer_id,\n      fb_transfer.transfer_hash,\n      fb_transfer_status.status_time,\n      fb_transfer_status_dict.status_id,\n      fb_transfer_status_dict.status_desc,\n      fb_transfer.source_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.source_id) AS source_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_login,\n      fb_transfer.source_path,\n      fb_transfer.target_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.target_id) AS target_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_login,\n      fb_transfer.target_path\n    FROM\n      public.fb_transfer,\n      public.fb_transfer_status,\n      public.fb_transfer_status_dict,\n      public.fb_account\n    WHERE\n      fb_transfer.transfer_hash = '#{h}' AND\n      fb_transfer_status.transfer_id = fb_transfer.transfer_id AND\n      fb_transfer_status_dict.status_id = fb_transfer_status.status_id AND\n      (fb_account.account_id = fb_transfer.source_id OR fb_account.account_id = fb_transfer.target_id)\n    ORDER BY fb_transfer_status.status_time ASC\"\n\n    @db.exec(sql)\n  end\n\n  def select_transfer_between(s_time, e_time)\n    sql = \"\n      SELECT\n        fb_transfer.transfer_id,\n        fb_transfer.transfer_hash,\n        fb_transfer_status.status_time,\n        fb_transfer_status_dict.status_id,\n        fb_transfer_status_dict.status_desc,\n        fb_transfer.source_id,\n        (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_address,\n        (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_port,\n        (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.source_id) AS source_protocol,\n        (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_login,\n        fb_transfer.source_path,\n        fb_transfer.target_id,\n        (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_address,\n        (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_port,\n        (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.target_id) AS target_protocol,\n        (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_login,\n        fb_transfer.target_path\n      FROM\n        public.fb_transfer,\n        public.fb_transfer_status,\n        public.fb_transfer_status_dict,\n        public.fb_account\n      WHERE\n        fb_transfer.source_id = fb_account.account_id AND\n        fb_transfer.target_id = fb_account.account_id AND\n        fb_transfer_status.transfer_id = fb_transfer.transfer_id AND\n        fb_transfer_status_dict.status_id = fb_transfer_status.status_id AND\n        fb_transfer_status.status_time > '#{s_time}' AND\n        fb_transfer_status.status_time < '#{e_time}'\n      ORDER BY fb_transfer_status.status_time ASC\"\n    @db.exec(sql)\n  end\n\n  def select_transfer_files(transfer_id)\n    sql = \"\n    SELECT\n      fb_file_status.transfer_id,\n      fb_file_status.filename,\n      fb_file_status.status_time,\n      fb_file_status_dict.status_id,\n      fb_file_status_dict.status_desc,\n      fb_file_status_dict.status_type\n    FROM\n      public.fb_file_status,\n      public.fb_file_status_dict\n    WHERE\n      fb_file_status.status_id = fb_file_status_dict.status_id AND\n      fb_file_status.transfer_id = #{transfer_id}\n    ORDER BY fb_file_status.filename ASC\"\n    @db.exec(sql)\n  end\n\n  def add_client(client)\n    if @db.exec(\"SELECT login FROM fb_client WHERE login=E'#{client['login']}'\")[0] != nil\n      raise ClientAlreadyExist, \"login already exist\"\n    end\n\n    id = @db.exec('SELECT nextval(fb_client_client_id_seq)')[0][0]\n    @db.exec(\"INSERT INTO fb_client (client_id, login, password) VALUES (#{id}, '#{client['login']}', '#{client['password']}')\")\n\n    client['acl'].each { |x| @db.exec(\"INSERT INTO fb_client_acl (client_id, ace_id) VALUES (#{id}, #{self.get_client_acl_id(x)})\") }\n    client['client_id'] = id\n    client\n  end\n\n  def remove_client(client)\n    client['client_id'] = @db.exec(\"SELECT client_id FROM fb_client WHERE login=E'#{client['login']}'\")[0]['client_id']\n    @db.exec(\"DELETE FROM fb_client_acl WHERE client_id='#{client['client_id']}'\")\n    @db.exec(\"DELETE FROM fb_client WHERE login=E'#{client['login']}'\")\n  end\n\n  def get_client(client)\n    if client['id'] != nil\n      @db.exec(\"SELECT * FROM fb_client WHERE client_id=#{client['client_id']}\").each { |x|\n        client['login'] \t= x['login']\n        client['password'] = x['password']\n        return client\n      }\n    elsif client['login'] != nil\n      @db.exec(\"SELECT * FROM fb_client WHERE login=E'#{client['login']}'\").each { |x|\n        client['client_id'] = x['client_id']\n        client['password']  = x['password']\n        return client\n      }\n    end\n\n    raise ClientNotExist, \"client does not exist\"\n  end\n\n  def get_client_list\n    @db.exec('SELECT * FROM fb_client')\n  end\n\n  def get_client_acl(client)\n    client['acl'] = []\n    sql = \"\n      SELECT\n        fb_client_acl.ace_id,\n        fb_client_acl_dict.ace_desc,\n        fb_client_acl.client_id\n      FROM\n        public.fb_client_acl_dict,\n        public.fb_client_acl\n      WHERE\n        fb_client_acl.ace_id = fb_client_acl_dict.ace_id AND\n        fb_client_acl.client_id = #{client['client_id']}\"\n    @db.exec(sql).each { |x| client['acl'] << x['ace_desc'] }\n    return client\n    raise ClientNotExist, 'client does not exist'\n  end\n\n  def insert_client(client)\n    client['client_id'] = @db.exec(\"INSERT INTO fb_client (login, password) VALUES ('#{client['login']}', '#{client['password']}') RETURNING client_id\")[0]['client_id']\n    client['acl'].each { |x|\n      @db.exec(\"INSERT INTO fb_client_acl (client_id, ace_id) VALUES (#{client['client_id']}, #{self.get_client_acl_id(x)})\")\n    }\n  end\n\n  def get_client_acl_id(desc)\n    @db.exec(\"SELECT * FROM fb_client_acl_dict WHERE ace_desc='#{desc}'\")[0]['ace_id']\n  end\n\n  def set_client_acl(client)\n    @db.exec(\"DELETE FROM fb_client_acl WHERE client_id=#{client['client_id']}\")\n    client['acl'].each { |x|\n      @db.exec(\"INSERT INTO fb_client_acl (client_id, ace_id) VALUES (#{client['client_id']}, #{self.get_client_acl_id(x)})\")\n    }\n  end\n\n  def set_client_password(client)\n    @db.exec(\"UPDATE fb_client SET password='#{client['password']}' WHERE login=E'#{client['login']}'\");\n  end\n\n  def insert_account(account)\n    id = @db.exec(\"SELECT nextval('fb_account_account_id_seq') AS id\")[0]['id']\n    @db.exec(\"INSERT INTO fb_account (account_id, protocol_id, address, port, login) VALUES (#{id}, (SELECT protocol_id FROM fb_protocol_dict WHERE protocol_desc='#{account['protocol']}'), '#{account['address']}', #{account['port']}, E'#{account['login'].gsub(/\\\\/, '\\\\\\\\\\\\\\\\')}')\")\n\n    account['account_id'] = id\n    account\n  end\n\n  def remove_account(account)\n\n  end\n\n  def select_account(account)\n    if account['account_id'] != nil\n      @db.exec(\"SELECT * FROM fb_account WHERE account_id=#{account['account_id']}\").each { |x|\n        account['protocol_id'] \t= x['protocol_id']\n        account['address'] \t\t  = x['address']\n        account['port'] \t\t    = x['port']\n        account['login'] \t\t    = x['login']\n        return account\n      }\n    else\n      @db.exec(\"SELECT * FROM fb_account WHERE protocol_id=(SELECT protocol_id FROM fb_protocol_dict WHERE protocol_desc='#{account['protocol']}') AND address='#{account['address']}' AND port=#{account['port']} AND login=E'#{account['login'].gsub(/\\\\/, '\\\\\\\\\\\\\\\\')}'\").each { |x|\n        account['account_id'] = x['account_id']\n        return account\n      }\n    end\n\n    raise AccountNotExist, 'account does not exist'\n  end\n\n  def select_configuration(key)\n    return @db.exec('SELECT * FROM fb_configuration') if key == 'all'\n    @db.exec(\"SELECT value FROM fb_configuration WHERE key='#{key}'\").each { |x| return x['value'] }\n  end\n\n  def update_configuration(key, value)\n    @db.exec(\"UPDATE fb_configuration SET VALUE='#{value}' WHERE key='#{key}'\")\n  end\n\n  def select_key_list\n    @db.exec('SELECT * FROM fb_keys')\n  end\n\nend\n\nclass Connector\n  class AuthenticationFailed < StandardError\n  end\n\n  class HostUnreachable < StandardError\n  end\n\n  class NetworkUnreachable < StandardError\n  end\n\n  class BadNetworkName < StandardError\n  end\n\n  class ConnectionRefused < StandardError\n  end\n\n  class ConnectionBroken < StandardError\n  end\n\n  class ConnectionRefused < StandardError\n  end\n\n  class NoSuchFileOrDirectory < StandardError\n  end\n\n  class ErrorOpeningLocalFile < StandardError\n  end\n\n  class PermissionDenied < StandardError\n  end\n\n  class FileAlreadyExist < StandardError\n  end\n\n  class NoSpaceLeft < StandardError\n  end\n\n  class SFTP\n    attr_accessor :address, :port, :login, :password\n\n    def connect\n      begin\n        if @password != ''\n          @sftp = Net::SFTP.start(@address, @login, :password => @password, :port => @port)\n        else\n          @sftp = Net::SFTP.start(@address, @login, :port => @port, :keys => [ \"#{File.dirname(__FILE__)}/../etc/ssh/id_rsa\" ])\n        end\n      rescue Net::SSH::AuthenticationFailed\n        raise Connector::AuthenticationFailed, 'login credentials rejected'\n      rescue Net::SFTP::StatusException => e\n        raise Connector::PermissionDenied if e.description == 'permission denied'\n        raise e\n      rescue\n        msg = $!.to_s\n        raise Connector::HostUnreachable, \"unable to resolve host: '#{@address}'\" if $!.to_s =~ /getaddrinfo: Name or service not known/\n        raise \"cannot connect to '#{@address}': #{msg}\"\n      end\n    end\n\n    def disconnect\n      begin\n        @sftp.session.close\n      rescue\n        msg = $!.to_s\n        raise \"error on disconnect: #{msg}\"\n      end\n    end\n\n    def put(src, dst)\n      begin\n        @sftp.upload!(src, dst)\n      rescue\n        msg = $!.to_s\n        raise \"cannot upload file '#{src.split(\"/\").last}': #{msg}\"\n      end\n    end\n\n    def get(src, dst)\n      begin\n        @sftp.download!(src, dst)\n      rescue\n        msg = $!.to_s\n        raise Connector::NoSuchFileOrDirectory, \"no such file or directory: '#{src}'\" if $!.to_s =~ /no such file/\n        raise Connector::PermissionDenied, \"permission denied: '#{src}'\" if $!.to_s =~ /permission denied/\n        raise \"cannot download file '#{src.split(\"/\").last}': #{msg}\"\n      end\n    end\n\n    def remove(file)\n      begin\n        @sftp.remove!(file)\n      rescue Net::SFTP::StatusException => e\n        raise Connector::PermissionDenied, \"permission denied: '#{file}'\" if e.description == 'permission denied'\n        raise e\n      rescue\n        msg = $!.to_s\n        raise Connector::NoSuchFileOrDirectory, \"no such file or directory: '#{file}'\" if $!.to_s =~ /no such file/\n        raise \"cannot remove file '#{file.split(\"/\").last}': #{msg}\"\n      end\n    end\n\n    def rename(src, dst)\n      begin\n        #begin\n        #  @sftp.remove!(dst) if sftp.stat!(dst) != nil\n        #rescue\n        #end\n        @sftp.rename!(src, dst, 0x0004)\n      rescue Net::SFTP::StatusException => e\n        raise Connector::PermissionDenied, \"permission denied: '#{dst}'\" if e.description == 'permission denied'\n        raise Connector::FileAlreadyExist, \"file already exist: '#{dst}'\" if e.description == 'failure'\n        raise e\n      rescue\n        msg = $!.to_s\n        raise Connector::NoSuchFileOrDirectory, \"no such file or directory: '#{src}'\" if $!.to_s =~ /no such file/\n        raise \"cannot rename file '#{src.split(\"/\").last}': #{msg}\"\n      end\n    end\n\n    def list(path)\n      begin\n        items = []\n        fd = @sftp.opendir!(path)\n        while (entries = @sftp.readdir!(fd)) do\n          entries.each { |item|\n            next if item.name == \".\" or item.name == \"..\"\n            next if item.longname[0] != '-'\n\n            i = {}\n            i['name']  = item.name\n            i['size']  = item.attributes.size\n            i['mtime'] = i['mtime'] = Time.at(item.attributes.mtime).to_s\n            items << i\n          }\n        end\n\n        return items.sort { |a, b| a['name'] <=> b['name'] }\n      rescue Net::SFTP::StatusException => e\n        raise Connector::PermissionDenied, \"permission denied: '#{path}'\" if e.description == 'permission denied'\n        raise e\n      rescue\n        msg = $!.to_s\n        raise Connector::NoSuchFileOrDirectory, \"no such file or directory: #{path}\" if $!.to_s =~ /no such file/\n      end\n    end\n  end\n\n  class FTP\n    attr_accessor :address, :port, :login, :password, :presite, :postsite, :passive, :text, :binary\n\n    def connect\n      begin\n        @ftp = Net::FTP.new\n        @ftp.debug_mode = false\n        @ftp.connect(@address, @port)\n        @ftp.login(@login, @password)\n        @ftp.passive = true if @passive == 'true'\n      rescue\n        raise Connector::HostUnreachable, \"unable to resolve: '#{@address}'\" if $!.to_s =~ /getaddrinfo: Name or service not known/\n        raise Connector::ConnectionRefused, \"connection refused: '#{@address}'\" if $!.to_s =~ /onnection refused/\n      end\n    end\n\n    def disconnect\n      begin\n        @ftp.quit\n        @ftp.close\n      rescue\n        msg = $!.to_s\n        raise \"error on disconnect: #{msg}\"\n      end\n    end\n\n    def put(src, dst)\n      begin\n        @ftp.site(@presite)\t\t\t      if @presite   != ''\n        if @binary == \"true\" or @text == \"\" or @text == \"false\"\n          @ftp.putbinaryfile(src, dst)\n        else\n          @ftp.puttextfile(src, dst)\n        end\n        @ftp.site(@postsite)\t\t\t    if @postsite  != \"\"\n      rescue\n        msg = $!.to_s\n        raise \"cannot upload file '#{src.split(\"/\").last}': #{msg}\"\n      end\n    end\n\n    def get(src, dst)\n      begin\n        @ftp.site(@presite)\t\t\t      if @presite != ''\n\n        if @binary == 'true' or @text == '' or @text == 'false'\n          @ftp.getbinaryfile(src, dst)\n        else\n          @ftp.gettextfile(src, dst)\n        end\n        @ftp.site(@postsite)\t\t\t    if @postsite != ''\n      rescue\n        msg = $!.to_s\n        raise Connector::NoSuchFileOrDirectory, \"no such file or directory: '#{src}'\" if $!.to_s =~ /no such file/\n        raise Connector::PermissionDenied, \"permission denied: '#{src}'\" if $!.to_s =~ /permission denied/\n        raise \"cannot download file '#{src.split(\"/\").last}': #{msg.strip}\"\n      end\n    end\n\n    def remove(file)\n      begin\n        @ftp.delete(file)\n      rescue\n        msg = $!.to_s\n        raise Connector::NoSuchFileOrDirectory, \"no such file or directory: #{file}\" if $!.to_s =~ /no such file/\n        raise \"cannot remove file '#{file.split(\"/\").last}': #{msg.strip}\"\n      end\n    end\n\n    def rename(src, dst)\n      begin\n        @ftp.rename(src, dst)\n      rescue\n        msg = $!.to_s\n        raise Connector::NoSuchFileOrDirectory, \"no such file or directory: #{src}\" if $!.to_s =~ /no such file/\n        raise \"cannot rename file '#{src.split(\"/\").last}': #{msg}\"\n      end\n    end\n\n    def list(path)\n      begin\n        items = []\n        @ftp.chdir(path)\n        @ftp.list.each { |e|\n          i = {}\n          item = Net::FTP::List.parse(e)\n          next unless item.file?\n          i['name']  = item.name\n          i['size']  = item.size\n          i['mtime'] = Time.at(Time.parse(item.mtime.to_s).to_i).to_s\n          items << i\n        }\n\n        return items.sort { |a, b| a['name'] <=> b['name'] }\n      rescue\n        msg = $!.to_s\n        raise Connector::NoSuchFileOrDirectory, \"no such file: #{path}\" if $!.to_s =~ /no such file/\n        raise \"cannot get file list: #{msg}\"\n      end\n    end\n  end\n\n  class CIFS\n    attr_accessor :address, :port, :login, :password, :share, :debug\n\n    def initialize\n      @debug = false\n      @sys = System.new\n      @port = 445\n    end\n\n    def connect\n      begin\n        @rand  = Digest::MD5.hexdigest(\"#{@address}_#{@port}_#{@share}_#{@login}\" + rand(Time.now().to_i).to_s)\n        @authfile = \"tmp/#{@rand}.pwd\"\n      rescue\n        raise $!\n      end\n    end\n\n    def disconnect\n      File.delete(@authfile) if File.exist?(@authfile)\n    end\n\n    def cd(path)\n      begin\n        File.open(@authfile, 'w', 0600) { |fd| fd.puts \"username = #{@login}\\npassword = #{@password}\\n\" }\n\n        cmd = ''\n        path.split('/').each { |item|\n          next if item == ''\n          next if item == path.split('/')[1] # share\n          cmd = cmd + \"cd \\\\\\\"#{item}\\\\\\\"\\n\"\n        }\n\n        @sys.exec(\"echo \\\"#{cmd}\\\" | smbclient -E -g -A #{@authfile} -p #{@port} //#{@address}/#{@share} 2>&1\").split(\"\\n\").each { |out|\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if out =~ /NT_STATUS_LOGON_FAILURE/\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if out =~ /NT_STATUS_UNSUCCESSFUL/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if out =~ /NT_STATUS_HOST_UNREACHABLE/\n          raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                  if out =~ /NT_STATUS_BAD_NETWORK_NAME/\n          raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"           if out =~ /NT_STATUS_NETWORK_UNREACHABLE/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if out =~ /NT_STATUS_CONNECTION_REFUSED/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if out =~ /Receiving SMB: Server \\S+ stopped responding/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{path}'\"  if out =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /NT_STATUS_ACCOUNT_DISABLED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /NT_STATUS_ACCOUNT_LOCKED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /not a directory/\n        }\n      rescue\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if $!.message =~ /NT_STATUS_LOGON_FAILURE/\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if $!.message =~ /NT_STATUS_UNSUCCESSFUL/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if $!.message =~ /NT_STATUS_HOST_UNREACHABLE/\n        raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                  if $!.message =~ /NT_STATUS_BAD_NETWORK_NAME/\n        raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"           if $!.message =~ /NT_STATUS_NETWORK_UNREACHABLE/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if $!.message =~ /NT_STATUS_CONNECTION_REFUSED/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if $!.message =~ /Receiving SMB: Server \\S+ stopped responding/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{path}'\"  if $!.message =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /NT_STATUS_ACCOUNT_DISABLED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /NT_STATUS_ACCOUNT_LOCKED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /not a directory/\n        raise $!\n      ensure\n        File.delete(@authfile) if File.exist?(@authfile)\n      end\n    end\n\n    def put(src, dst)\n      begin\n        File.open(@authfile, 'w', 0600) { |fd| fd.puts \"username = #{@login}\\npassword = #{@password}\\n\" }\n        STDERR.puts \"->putting #{src}\" if @debug\n\n        cmd = ''\n        dst.split('/')[0...-1].each { |item|\n          next if item == ''\n          next if item == dst.split('/')[1] # share\n          cmd = cmd + \"cd \\\\\\\"#{item}\\\\\\\"\\n\"\n        }\n\n        cmd = cmd + \"put \\\\\\\"#{src}\\\\\\\" \\\\\\\"#{dst.split('/').last}\\\\\\\"\\n\"\n        @sys.exec(\"echo \\\"#{cmd}\\\" | smbclient -E -g -A #{@authfile} -p #{@port} //#{@address}/#{@share} 2>&1\").split(\"\\n\").each { |out|\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"           if out =~ /NT_STATUS_LOGON_FAILURE/\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"           if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                if out =~ /NT_STATUS_UNSUCCESSFUL/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                if out =~ /NT_STATUS_HOST_UNREACHABLE/\n          raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                 if out =~ /NT_STATUS_BAD_NETWORK_NAME/\n          raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"          if out =~ /NT_STATUS_NETWORK_UNREACHABLE/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"         if out =~ /NT_STATUS_CONNECTION_REFUSED/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"         if out =~ /Receiving SMB: Server \\S+ stopped responding/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{dst}'\"  if out =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n          raise Connector::PermissionDenied, \"permission denied for file '#{dst}'\"          if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::NoSpaceLeft, \"no space left for file '#{dst}'\"                   if out =~ /NT_STATUS_DISK_FULL/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if out =~ /NT_STATUS_ACCOUNT_DISABLED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if out =~ /NT_STATUS_ACCOUNT_LOCKED/\n          raise Connector::PermissionDenied, \"unknown error '#{out}'\"                       if out =~ /session setup failed/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if out =~ /not a directory/\n        }\n      rescue\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"           if $!.message =~ /NT_STATUS_LOGON_FAILURE/\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"           if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                if $!.message =~ /NT_STATUS_UNSUCCESSFUL/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                if $!.message =~ /NT_STATUS_HOST_UNREACHABLE/\n        raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                 if $!.message =~ /NT_STATUS_BAD_NETWORK_NAME/\n        raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"          if $!.message =~ /NT_STATUS_NETWORK_UNREACHABLE/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"         if $!.message =~ /NT_STATUS_CONNECTION_REFUSED/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"         if $!.message =~ /Receiving SMB: Server \\S+ stopped responding/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{dst}'\"  if $!.message =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n        raise Connector::PermissionDenied, \"permission denied for file '#{dst}'\"          if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::NoSpaceLeft, \"no space left for file '#{dst}'\"                   if $!.message =~ /NT_STATUS_DISK_FULL/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if $!.message =~ /NT_STATUS_ACCOUNT_DISABLED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if $!.message =~ /NT_STATUS_ACCOUNT_LOCKED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if $!.message =~ /not a directory/\n        raise $!\n      ensure\n        File.delete(@authfile) if File.exist?(@authfile)\n      end\n    end\n\n    def get(src, dst)\n      begin\n        File.open(@authfile, 'w', 0600) { |fd| fd.puts \"username = #{@login}\\npassword = #{@password}\\n\" }\n        STDERR.puts \"->getting #{src}\" if @debug\n\n        cmd = ''\n        src.split('/')[0...-1].each { |item|\n          next if item == ''\n          next if item == src.split('/')[1] # share\n          cmd = cmd + \"cd \\\\\\\"#{item}\\\\\\\"\\n\"\n        }\n\n        cmd = cmd + \"get \\\\\\\"#{src.split('/').last}\\\\\\\" \\\\\\\"#{dst}\\\\\\\"\\n\"\n        @sys.exec(\"echo \\\"#{cmd}\\\" | smbclient -E -g -A #{@authfile} -p #{@port} //#{@address}/#{@share} 2>&1\").split(\"\\n\").each { |out|\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"           if out =~ /NT_STATUS_LOGON_FAILURE/\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"           if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                if out =~ /NT_STATUS_UNSUCCESSFUL/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                if out =~ /NT_STATUS_HOST_UNREACHABLE/\n          raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                 if out =~ /NT_STATUS_BAD_NETWORK_NAME/\n          raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"          if out =~ /NT_STATUS_NETWORK_UNREACHABLE/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"         if out =~ /NT_STATUS_CONNECTION_REFUSED/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"         if out =~ /Receiving SMB: Server \\S+ stopped responding/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{src}'\"  if out =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n          raise Connector::PermissionDenied, \"permission denied for file '#{src}'\"          if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::NoSpaceLeft, \"no space left for file '#{src}'\"                   if out =~ /NT_STATUS_DISK_FULL/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if out =~ /NT_STATUS_ACCOUNT_DISABLED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if out =~ /NT_STATUS_ACCOUNT_LOCKED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if out =~ /NT_STATUS_FILE_IS_A_DIRECTORY opening remote file/\n          raise Connector::PermissionDenied, \"unknown error '#{out}'\"                       if out =~ /session setup failed/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if out =~ /not a directory/\n        }\n      rescue\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"           if $!.message =~ /NT_STATUS_LOGON_FAILURE/\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"           if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                if $!.message =~ /NT_STATUS_UNSUCCESSFUL/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                if $!.message =~ /NT_STATUS_HOST_UNREACHABLE/\n        raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                 if $!.message =~ /NT_STATUS_BAD_NETWORK_NAME/\n        raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"          if $!.message =~ /NT_STATUS_NETWORK_UNREACHABLE/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"         if $!.message =~ /NT_STATUS_CONNECTION_REFUSED/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"         if $!.message =~ /Receiving SMB: Server \\S+ stopped responding/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{src}'\"  if $!.message =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n        raise Connector::PermissionDenied, \"permission denied for file '#{src}'\"          if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::NoSpaceLeft, \"no space left for file '#{src}'\"                   if $!.message =~ /NT_STATUS_DISK_FULL/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if $!.message =~ /NT_STATUS_ACCOUNT_DISABLED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if $!.message =~ /NT_STATUS_ACCOUNT_LOCKED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if $!.message =~ /not a directory/\n        raise $!\n      ensure\n        File.delete(@authfile) if File.exist?(@authfile)\n      end\n    end\n\n    def remove(file)\n      begin\n        File.open(@authfile, 'w', 0600) { |fd| fd.puts \"username = #{@login}\\npassword = #{@password}\\n\" }\n        STDERR.puts \"->removing #{file}\" if @debug\n\n        cmd = ''\n        file.split('/')[0...-1].each { |item|\n          next if item == ''\n          next if item == file.split('/')[1] # share\n          cmd = cmd + \"cd \\\\\\\"#{item}\\\\\\\"\\n\"\n        }\n\n        cmd = cmd + \"rm \\\\\\\"#{file.split('/').last}\\\\\\\"\\n\"\n        @sys.exec(\"echo \\\"#{cmd}\\\" | smbclient -E -g -A #{@authfile} -p #{@port} //#{@address}/#{@share} 2>&1\").split(\"\\n\").each { |out|\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if out =~ /NT_STATUS_LOGON_FAILURE/\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if out =~ /NT_STATUS_UNSUCCESSFUL/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if out =~ /NT_STATUS_HOST_UNREACHABLE/\n          raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                  if out =~ /NT_STATUS_BAD_NETWORK_NAME/\n          raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"           if out =~ /NT_STATUS_NETWORK_UNREACHABLE/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if out =~ /NT_STATUS_CONNECTION_REFUSED/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if out =~ /Receiving SMB: Server \\S+ stopped responding/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{file}'\"  if out =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{file}'\"  if out =~ /NT_STATUS_NO_SUCH_FILE/\n          raise Connector::PermissionDenied, \"permission denied for file '#{file}'\"          if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{file}'\"          if out =~ /NT_STATUS_CANNOT_DELETE/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /NT_STATUS_ACCOUNT_DISABLED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /NT_STATUS_ACCOUNT_LOCKED/\n          raise Connector::PermissionDenied, \"unknown error '#{out}'\"                        if out =~ /session setup failed/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /not a directory/\n        }\n      rescue\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if $!.message =~ /NT_STATUS_LOGON_FAILURE/\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if $!.message =~ /NT_STATUS_UNSUCCESSFUL/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if $!.message =~ /NT_STATUS_HOST_UNREACHABLE/\n        raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                  if $!.message =~ /NT_STATUS_BAD_NETWORK_NAME/\n        raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"           if $!.message =~ /NT_STATUS_NETWORK_UNREACHABLE/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if $!.message =~ /NT_STATUS_CONNECTION_REFUSED/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if $!.message =~ /Receiving SMB: Server \\S+ stopped responding/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{file}'\"  if $!.message =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{file}'\"  if $!.message =~ /NT_STATUS_NO_SUCH_FILE/\n        raise Connector::PermissionDenied, \"permission denied for file '#{file}'\"          if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{file}'\"          if $!.message =~ /NT_STATUS_CANNOT_DELETE/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /NT_STATUS_ACCOUNT_DISABLED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /NT_STATUS_ACCOUNT_LOCKED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /not a directory/\n        raise $!\n      ensure\n        File.delete(@authfile) if File.exist?(@authfile)\n      end\n    end\n\n    def rename(src, dst)\n      begin\n        File.open(@authfile, 'w', 0600) { |fd| fd.puts \"username = #{@login}\\npassword = #{@password}\\n\" }\n        STDERR.puts \"->renaming #{src} to #{dst}\" if @debug\n\n        cmd = ''\n        src.split('/')[0...-1].each { |item|\n          next if item == ''\n          next if item == src.split('/')[1] # share\n          cmd = cmd + \"cd \\\\\\\"#{item}\\\\\\\"\\n\"\n        }\n\n        cmd = cmd + \"rename \\\\\\\"#{src.split('/').last}\\\\\\\" \\\\\\\"#{dst.split('/').last}\\\\\\\"\\n\"\n        @sys.exec(\"echo \\\"#{cmd}\\\" | smbclient -E -g -A #{@authfile} -p #{@port} //#{@address}/#{@share} 2>&1\").split(\"\\n\").each { |out|\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if out =~ /NT_STATUS_LOGON_FAILURE/\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if out =~ /NT_STATUS_UNSUCCESSFUL/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if out =~ /NT_STATUS_HOST_UNREACHABLE/\n          raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                  if out =~ /NT_STATUS_BAD_NETWORK_NAME/\n          raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"           if out =~ /NT_STATUS_NETWORK_UNREACHABLE/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if out =~ /NT_STATUS_CONNECTION_REFUSED/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if out =~ /Receiving SMB: Server \\S+ stopped responding/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{dst}'\"   if out =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{dst}'\"   if out =~ /NT_STATUS_NO_SUCH_FILE/\n          raise Connector::PermissionDenied, \"permission denied for file '#{dst}'\"           if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::FileAlreadyExist, \"file already exist '#{dst}'\"                   if out =~ /NT_STATUS_OBJECT_NAME_COLLISION/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /NT_STATUS_ACCOUNT_DISABLED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /NT_STATUS_ACCOUNT_LOCKED/\n          raise Connector::PermissionDenied, \"unknown error '#{out}'\"                        if out =~ /session setup failed/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /not a directory/\n        }\n      rescue\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if $!.message =~ /NT_STATUS_LOGON_FAILURE/\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if $!.message =~ /NT_STATUS_UNSUCCESSFUL/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if $!.message =~ /NT_STATUS_HOST_UNREACHABLE/\n        raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                  if $!.message =~ /NT_STATUS_BAD_NETWORK_NAME/\n        raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"           if $!.message =~ /NT_STATUS_NETWORK_UNREACHABLE/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if $!.message =~ /NT_STATUS_CONNECTION_REFUSED/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if $!.message =~ /Receiving SMB: Server \\S+ stopped responding/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{dst}'\"   if $!.message =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{dst}'\"   if $!.message =~ /NT_STATUS_NO_SUCH_FILE/\n        raise Connector::PermissionDenied, \"permission denied for file '#{dst}'\"           if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::FileAlreadyExist, \"file already exist '#{dst}'\"                   if $!.message =~ /NT_STATUS_OBJECT_NAME_COLLISION/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /NT_STATUS_ACCOUNT_DISABLED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /NT_STATUS_ACCOUNT_LOCKED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /not a directory/\n        raise $!\n      ensure\n        File.delete(@authfile) if File.exist?(@authfile)\n      end\n    end\n\n    def list(path)\n      begin\n        File.open(@authfile, 'w', 0600) { |fd| fd.puts \"username = #{@login}\\npassword = #{@password}\\n\" }\n        STDERR.puts \"->listing #{path}\" if @debug\n        lines = []\n\n        cmd = ''\n        path.split('/').each { |item|\n          next if item == ''\n          next if item == path.split('/')[1] # share\n          cmd = cmd + \"cd \\\\\\\"#{item}\\\\\\\"\\n\"\n        }\n\n\n        cmd = cmd + \"dir\\n\"\n        @sys.exec(\"echo \\\"#{cmd}\\\" | smbclient -E -g -A #{@authfile} -p #{@port} //#{@address}/#{@share} 2>&1\").split(\"\\n\").each { |out|\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if out =~ /NT_STATUS_LOGON_FAILURE/\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if out =~ /NT_STATUS_UNSUCCESSFUL/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if out =~ /NT_STATUS_HOST_UNREACHABLE/\n          raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                  if out =~ /NT_STATUS_BAD_NETWORK_NAME/\n          raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"           if out =~ /NT_STATUS_NETWORK_UNREACHABLE/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if out =~ /NT_STATUS_CONNECTION_REFUSED/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if out =~ /Receiving SMB: Server \\S+ stopped responding/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{path}'\"  if out =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{path}'\"  if out =~ /NT_STATUS_NO_SUCH_FILE/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{path}'\"  if out =~ /NT_STATUS_OBJECT_NAME_INVALID/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /NT_STATUS_ACCOUNT_DISABLED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /NT_STATUS_ACCOUNT_LOCKED/\n          raise Connector::PermissionDenied, \"unknown error '#{out}'\"                        if out =~ /session setup failed/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /not a directory/\n          lines << out\n        }\n\n        items = []\n        lines[0..(lines.length - 2)].each { |line|\n          next if line !~ /^\\s{2}\\S+/\n          next if line =~ /^\\s{2}\\.+/\n\n          words = line.split(' ')\n          next if words.length > 7 and words[(words.length - 7)].split('').include?('D')\n\n\n          file  = line[0..(line.length - 40)].strip\n          size  = words[(words.length - 6)]\n          mtime = Time.at(Time.parse((words[(words.length - 5)..(words.length - 1)]).join(' ')).to_i).to_s\n\n          i = {}\n          i['name']  = file\n          i['size']  = size\n          i['mtime'] = mtime\n          items << i\n        }\n\n        return items.sort { |a, b| a['name'] <=> b['name'] }\n      rescue\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if $!.message =~ /NT_STATUS_LOGON_FAILURE/\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if $!.message =~ /NT_STATUS_UNSUCCESSFUL/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if $!.message =~ /NT_STATUS_HOST_UNREACHABLE/\n        raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                  if $!.message =~ /NT_STATUS_BAD_NETWORK_NAME/\n        raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"           if $!.message =~ /NT_STATUS_NETWORK_UNREACHABLE/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if $!.message =~ /NT_STATUS_CONNECTION_REFUSED/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if $!.message =~ /Receiving SMB: Server \\S+ stopped responding/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{path}'\"  if $!.message =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{path}'\"  if $!.message =~ /NT_STATUS_NO_SUCH_FILE/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{path}'\"  if $!.message =~ /NT_STATUS_OBJECT_NAME_INVALID/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /NT_STATUS_ACCOUNT_DISABLED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /NT_STATUS_ACCOUNT_LOCKED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /not a directory/\n        raise $!\n      ensure\n        File.delete(@authfile) if File.exist?(@authfile)\n      end\n    end\n  end\nend\n", "#\n# FileBroker - FileBrokerService\n# (c) 2010-2013 Jakub Zubielik <jakub.zubielik@nordea.com>\n#\n\nclass FBService < Sinatra::Base\n  # File status\n  FAILED_TO_ARCHIVE_FILE\t\t\t\t= 1\n  FAILED_TO_COMPRESS_FILE\t\t\t\t= 2\n  FAILED_TO_DECOMPRESS_FILE\t\t\t= 3\n  FAILED_TO_DECRYPT_FILE\t\t\t\t= 4\n  FAILED_TO_DOWNLOAD_MD5_FILE\t  = 5\n  FAILED_TO_DOWNLOAD_FILE\t\t\t\t= 6\n  FAILED_TO_ENCRYPT_FILE\t\t\t\t= 7\n  FAILED_TO_REMOVE_FILE\t\t\t\t\t= 8\n  FAILED_TO_REMOVE_MD5_FILE\t\t\t= 9\n  FAILED_TO_UPLOAD_FILE\t\t\t\t\t= 10\n  FAILED_TO_UPLOAD_MD5_FILE\t\t\t= 11\n  FAILED_TO_VERIFY_MD5\t\t\t\t\t= 12\n  FILE_ARCHIVED\t\t\t\t\t\t\t\t\t= 13\n  FILE_COMPRESSED\t\t\t\t\t\t\t\t= 14\n  FILE_DECOMPRESSED\t\t\t\t\t\t\t= 15\n  FILE_DECRYPTED\t\t\t\t\t\t\t\t= 16\n  FILE_DOWNLOADED\t\t\t\t\t\t\t\t= 17\n  FILE_ENCRYPTED\t\t\t\t\t\t\t\t= 18\n  FILE_REMOVED\t\t\t\t\t\t\t\t\t= 19\n  FILE_SCANNED\t\t\t\t\t\t\t\t\t= 20\n  FILE_UPLOADED\t\t\t\t\t\t\t\t\t= 21\n  INTERNAL_SYSTEM_ERROR         = 22\n  MALICIOUS_CODE_DETECTED\t\t\t\t= 23\n  MD5_FILE_DOWNLOADED\t\t\t\t\t\t= 24\n  MD5_FILE_REMOVED\t\t\t\t\t\t\t= 25\n  MD5_FILE_UPLOADED\t\t\t\t\t\t\t= 26\n  MD5_VERIFIED\t\t\t\t\t\t\t\t\t= 27\n  TRANSFER_COMPLETED\t\t\t\t\t\t= 28\n  TRANSFER_SCHEDULED\t\t\t\t\t\t= 29\n  FILE_ENCODED\t\t\t\t\t\t\t\t\t= 30\n  FAILED_TO_ENCODE_FILE\t\t\t\t\t= 31\n  FAILED_TO_CALCULATE_MD5\t\t\t\t= 32\n\n  # Transfer status\n  TRANSFER_RUNNING                = 33\n  TRANSFER_COMPLETED_SUCCESSFULLY = 34\n  TRANSFER_COMPLETED_WITH_ERRORS  = 35\n\n  class StopTransfer < StandardError\n  end\n\n  module SoapFault\n    class MustUnderstandError < StandardError\n      def fault_code\n        'MustUnderstand'\n      end\n    end\n\n    class ClientError < StandardError\n      def fault_code\n        'Client'\n      end\n    end\n  end\n\n  class CleanUpTemporaryFiles < StandardError\n  end\n\n  class InternalSystemError < StandardError\n  end\n\n  set :show_exceptions, false\n  set :root, \"#{File.dirname(__FILE__)}/..\"\n\n  configure do\n    mime_type :xml, 'text/xml'\n  end\n\n  def initialize(*args)\n    GC.enable\n\n    @avs\t= AVScanner.new\n    @db   = Database.new\n    @xsd \t= Nokogiri::XML::Schema(File.read(\"#{File.dirname(__FILE__)}/../public/filebroker_service.xsd\"))\n    @xslt = Nokogiri::XSLT(File.read(\"#{File.dirname(__FILE__)}/soap_body.xslt\"))\n    @sys\t= System.new\n    @gpg\t= GPG.new\n    @threads = []\n    @stderr_mutex = Mutex.new\n\n    @fb_shutdown = false\n    do_quit = Proc.new {\n      @fb_shutdown = true\n      @threads.each { |t| t.join }\n      sleep 0.5 while @threads.length > 0\n      Rack::Handler::WEBrick.shutdown\n      File.delete(\"#{File.dirname(__FILE__)}/../tmp/filebroker.pid\")\n    }\n\n    Signal.trap('SIGTERM', do_quit)\n    Signal.trap('SIGQUIT', do_quit)\n    Signal.trap('SIGINT',  do_quit)\n    Signal.trap('CLD', 'IGNORE')\n\n    super\n  end\n\n  # SOAP endpoint\n  post '/filebroker_service' do\n    begin\n\n      GC.enable\n      GC.start\n\n      soap_message = Nokogiri::XML(request.body.read)\n      soap_body = @xslt.transform(soap_message)\n      errors = @xsd.validate(soap_body).map{ |e| e.message }.join(', ')\n      raise(SoapFault::ClientError, errors) unless errors == ''\n\n      if @db.select_configuration('debug') == 'true'\n        log_msg = soap_message.to_s\n        log_msg = log_msg.gsub(/assword>.+<\\/.*assword>/, \"#{$1}******#{$2}\")              if log_msg =~ /(assword>).+(<\\/.*assword>)/\n        log_msg = log_msg.to_s.gsub(/PasswordDigest\">.+<\\/.*assword>/, \"#{$1}******#{$2}\") if log_msg =~ /(PasswordDigest\">).+(<\\/.*assword>)/\n        log_msg = log_msg.to_s.gsub(/PasswordText\">.+<\\/.*assword>/, \"#{$1}******#{$2}\")   if log_msg =~ /(PasswordText\">).+(<\\/.*assword>)/\n\n        log_path = \"#{File.dirname(__FILE__)}/../log/#{soap_operation_to_method(soap_body).to_s.gsub(/^do_/, '')}/#{Time.new.strftime(\"%Y-%m-%d\")}/\"\n        FileUtils.mkdir_p(log_path) if !Dir.exist?(log_path)\n        log_name = \"#{soap_operation_to_method(soap_body).to_s.gsub(/^do_/, '')}-#{DateTime.parse(Time.now.to_s)}-#{Digest::MD5.hexdigest(soap_body.to_s + rand(Time.now().to_i).to_s)}.log\"\n        File.open(\"#{log_path}/#{log_name}\", 'w') { |log| log.puts log_msg }\n      end\n\n      if soap_message.root.at_xpath('//soap:Header/*[@soap:mustUnderstand=\"1\" and not(@soap:actor)]', 'soap' => 'http://schemas.xmlsoap.org/soap/envelope/')\n        raise(SoapFault::MustUnderstandError, 'SOAP Must Understand Error', 'MustUnderstand')\n      end\n\n\n      auth_type = @db.select_configuration('auth')\n\n      if auth_type != 'none'\n        prefix \t = soap_message.root.namespace.prefix\n        login \t = soap_message.root.xpath(\"//#{prefix}:Envelope/#{prefix}:Header/wsse:Security/wsse:UsernameToken/wsse:Username\").text\n        password = soap_message.root.xpath(\"//#{prefix}:Envelope/#{prefix}:Header/wsse:Security/wsse:UsernameToken/wsse:Password\").text\n\n        client = {}\n        client['login'] = login\n        client = @db.get_client(client)\n        client = @db.get_client_acl(client)\n        raise(SoapFault::ClientError, 'not authorized') if [login, Digest::MD5.hexdigest(password).to_s] != [client['login'], client['password']]\n\n        got_access = false\n        @db.select_client_acl(client['client_id']).each { |ace|\n          ace_desc = @db.select_client_acl_desc(ace['ace_id'])\n          got_access = true if 'do_' + ace_desc.to_s == soap_operation_to_method(soap_body).to_s\n        }\n        raise(SoapFault::ClientError, 'method not allowed') if !got_access\n      end\n\n      if @fb_shutdown\n        builder(:fault, :locals => { :fault_string => 'Service unavailable', :fault_code => 'Server' })\n      else\n        @stderr_mutex.lock\n        STDERR.puts \"- -> Received request message type: #{soap_operation_to_method(soap_body).to_s}\"\n        @stderr_mutex.unlock\n        self.send(soap_operation_to_method(soap_body), soap_body)\n      end\n    rescue\n      err_msg = \"#{$!.backtrace.join(\"\\n\")}\\n#{$!.message}\\n\"\n      @stderr_mutex.try_lock\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      STDERR.puts \"Exception time: #{DateTime.parse(Time.now.to_s)}\"\n      STDERR.puts err_msg\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      @stderr_mutex.unlock\n\n      fault_code = $!.respond_to?(:fault_code) ? $!.fault_code : 'Server'\n      builder(:fault, :locals => { :fault_string => err_msg, :fault_code => fault_code })\n    end\n  end\n\n  # WSDL endpoint\n  get '/filebroker_service' do\n    if params.keys.first. != nil and params.keys.first.downcase == 'wsdl'\n      url = ENV['BASE_URL'] || \"http://#{request.env['SERVER_NAME']}:#{request.port}\"\n      url = ENV['BASE_URL'] || \"https://#{request.env['SERVER_NAME']}:#{request.port}\" if @db.select_configuration('ssl') == 'true'\n      erb(:filebroker_service_wsdl, :locals => { :url => url }, :content_type => :xml)\n    else\n      builder(:fault, :locals => { :fault_string => 'unknown parameter', :fault_code => 'Client' })\n    end\n  end\n\n  private\n\n  # Detect the SOAP operation based on the root element in the SOAP body\n  def soap_operation_to_method(soap_body)\n    method = ('do_' + soap_body.root.name.sub(/Request$/, '').gsub(/([A-Z]+)([A-Z][a-z])/,'\\1_\\2').gsub(/([a-z\\d])([A-Z])/,'\\1_\\2')).downcase.to_sym\n  end\n\n  # Transfer operation, send back transfer ID\n  def do_collection_transfer(soap_body)\n    begin\n      prefix = soap_body.root.namespace.prefix\n\n      transfer = {}\n      transfer['transfer_id']                   = Digest::MD5.hexdigest(soap_body.to_s + rand(Time.now().to_i).to_s)\n\n      transfer['source'] = {}\n      transfer['source']['protocol'] \t          = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:Protocol/text()\").to_s.downcase\n      transfer['source']['address'] \t          = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:Address/text()\").to_s\n      transfer['source']['port'] \t\t            = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:Port/text()\").to_s\n      transfer['source']['login'] \t            = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:Login/text()\").to_s\n      transfer['source']['password'] \t          = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:Password/text()\").to_s\n      transfer['source']['path'] \t\t            = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:Path/text()\").to_s\n      transfer['source']['passive'] \t          = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:PassiveMode/text()\").to_s\n      transfer['source']['binary'] \t            = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:BinaryMode/text()\").to_s\n      transfer['source']['text'] \t\t            = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:TextMode/text()\").to_s\n      transfer['source']['presite'] \t          = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:PreSite/text()\").to_s\n      transfer['source']['postsite'] \t          = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:PostSite/text()\").to_s\n\n      transfer['source']['files'] = []\n      soap_body.xpath(\"//#{prefix}:Source/#{prefix}:Files\").each { |node|\n        node.xpath(\"//#{prefix}:File\").each { |x|\n          transfer['source']['files'] << x.text.to_s\n        }\n      }\n\n      transfer['target'] = {}\n      transfer['target']['protocol'] \t          = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:Protocol/text()\").to_s.downcase\n      transfer['target']['address'] \t          = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:Address/text()\").to_s\n      transfer['target']['port'] \t\t            = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:Port/text()\").to_s\n      transfer['target']['login'] \t            = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:Login/text()\").to_s\n      transfer['target']['password'] \t          = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:Password/text()\").to_s\n      transfer['target']['path'] \t\t            = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:Path/text()\").to_s\n      transfer['target']['passive'] \t          = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:PassiveMode/text()\").to_s\n      transfer['target']['binary'] \t            = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:BinaryMode/text()\").to_s\n      transfer['target']['text'] \t\t            = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:TextMode/text()\").to_s\n      transfer['target']['presite'] \t          = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:PreSite/text()\").to_s\n      transfer['target']['postsite'] \t          = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:PostSite/text()\").to_s\n\n      transfer['options'] = {}\n      transfer['options']['archive']\t \t\t\t    = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Archive/text()\").to_s\n      transfer['options']['avscanning'] \t\t\t  = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:AVScanning/text()\").to_s\n      transfer['options']['compression'] \t\t\t  = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Compression/text()\").to_s\n      transfer['options']['decompression'] \t\t  = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Decompression/text()\").to_s\n      transfer['options']['remove_source_file'] = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:RemoveSourceFile/text()\").to_s\n      transfer['options']['md5']\t \t\t\t\t      = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:MD5/text()\").to_s\n      transfer['options']['direct_upload'] \t\t  = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:DirectUpload/text()\").to_s\n      transfer['options']['filename_suffix'] \t\t= soap_body.xpath(\"//#{prefix}:Options/#{prefix}:FilenameSuffix/text()\").to_s\n      transfer['options']['dec_method']         = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Decryption/#{prefix}:Method/text()\").to_s.downcase\n      transfer['options']['dec_key_id']         = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Decryption/#{prefix}:KeyID/text()\").to_s\n      transfer['options']['enc_method']         = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Encryption/#{prefix}:Method/text()\").to_s.downcase\n      transfer['options']['enc_key_id']         = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Encryption/#{prefix}:KeyID/text()\").to_s\n      transfer['options']['encoding_from'] \t\t\t= soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Encoding/#{prefix}:From/text()\").to_s\n      transfer['options']['encoding_to'] \t\t\t  = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Encoding/#{prefix}:To/text()\").to_s\n\n      transfer['options']['enc_recipients'] = []\n      soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Encryption\").each { |node|\n        node.xpath(\"//#{prefix}:Recipient\").each { |x|\n          transfer['options']['enc_recipients'] << x.text.to_s\n        }\n      }\n\n      transfer['source']['files'].sort! { |x, y| String.natcmp(x, y)}\n\n      @threads << Thread.new {\n        begin\n          err = File.open(\"log/transfer/#{transfer['transfer_id']}.log\", 'w')\n          err.sync = true\n          err.puts \"Trace file for transfer request: #{transfer['transfer_id']}\"\n          err.puts \"Transfer started at: #{Time.now.to_s}\"\n\n          #\n          # Add unknown transfer endpoints\n          #\n\n          begin\n            transfer['source'] = @db.select_account(transfer['source'])\n          rescue Database::AccountNotExist\n            transfer['source'] = @db.insert_account(transfer['source'])\n          end\n\n          begin\n            transfer['target'] = @db.select_account(transfer['target'])\n          rescue Database::AccountNotExist\n            transfer['target'] = @db.insert_account(transfer['target'])\n          end\n\n\n          #\n          # Set initial transfer status\n          #\n\n          transfer_id = @db.insert_transfer(transfer['transfer_id'],\n                                            transfer['source']['account_id'],\n                                            transfer['target']['account_id'],\n                                            transfer['source']['path'],\n                                            transfer['target']['path'])\n\n          @db.insert_transfer_status(transfer_id, FBService::TRANSFER_RUNNING, DateTime.now)\n\n\n          #\n          # Set initial file status\n          #\n\n          @db.insert_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::TRANSFER_SCHEDULED, DateTime.now) if transfer['options']['md5'] != ''\n          transfer['source']['files'].each { |file| @db.insert_file_status(transfer_id, file, FBService::TRANSFER_SCHEDULED, DateTime.now) }\n\n\n          #\n          # Download files\n          #\n\n          files_download  = []\n          if transfer['source']['protocol'] == 'cifs'\n            src_conn = Connector::CIFS.new\n            src_conn.address \t  = transfer['source']['address']\n            src_conn.port \t\t  = transfer['source']['port']\n            src_conn.login \t\t  = transfer['source']['login']\n            src_conn.password \t= transfer['source']['password']\n            src_conn.share \t    = transfer['source']['path'].split('/')[1]\n\n            begin\n              src_conn.connect\n              src_conn.cd(transfer['source']['path'])\n              Dir.mkdir(\"process/#{transfer['transfer_id']}\", 0700)\n            rescue\n              transfer['source']['files'].each { |file| @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DOWNLOAD_FILE, DateTime.now) }\n              raise FBService::StopTransfer, $!\n            end\n\n            if transfer['options']['md5'] != ''\n              begin\n                src_conn.get(transfer['options']['md5'], \"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\")\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::MD5_FILE_DOWNLOADED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::FAILED_TO_DOWNLOAD_MD5_FILE, DateTime.now)\n                raise FBService::StopTransfer, $!\n              end\n            end\n\n            transfer['source']['files'].each { |file|\n              begin\n                src_conn.get(\"#{transfer['source']['path']}/#{file}\", \"process/#{transfer['transfer_id']}/#{file}\")\n                files_download << file\n                @db.update_file_status(transfer_id, file, FBService::FILE_DOWNLOADED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DOWNLOAD_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n              end\n            }\n\n            src_conn.disconnect\n          elsif transfer['source']['protocol'] == 'ftp'\n            src_conn = Connector::FTP.new\n            src_conn.address \t= transfer['source']['address']\n            src_conn.port \t\t= transfer['source']['port']\n            src_conn.login \t\t= transfer['source']['login']\n            src_conn.password = transfer['source']['password']\n            src_conn.passive \t= transfer['source']['passive']\n            src_conn.binary \t= transfer['source']['binary']\n            src_conn.text \t\t= transfer['source']['text']\n            src_conn.presite \t= transfer['source']['presite']\n            src_conn.postsite = transfer['source']['postsite']\n\n            begin\n              src_conn.connect\n              Dir.mkdir(\"process/#{transfer['transfer_id']}\", 0700)\n            rescue\n              transfer['source']['files'].each { |file| @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DOWNLOAD_FILE, DateTime.now) }\n              raise FBService::StopTransfer, $!\n            end\n\n            if transfer['options']['md5'] != ''\n              begin\n                src_conn.get(transfer['options']['md5'], \"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\")\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::MD5_FILE_DOWNLOADED, DateTime.now)\n              rescue\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::FAILED_TO_DOWNLOAD_MD5_FILE, DateTime.now)\n                raise FBService::StopTransfer, $!\n              end\n            end\n\n            transfer['source']['files'].each { |file|\n              begin\n                src_conn.get(\"#{transfer['source']['path']}/#{file}\", \"process/#{transfer['transfer_id']}/#{file}\")\n                files_download << file\n                @db.update_file_status(transfer_id, file, FBService::FILE_DOWNLOADED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DOWNLOAD_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n              end\n            }\n\n            src_conn.disconnect\n          elsif transfer['source']['protocol'] == 'sftp'\n            begin\n              src_conn = Connector::SFTP.new\n              src_conn.address \t= transfer['source']['address']\n              src_conn.port \t\t= transfer['source']['port']\n              src_conn.login \t\t= transfer['source']['login']\n              src_conn.password = transfer['source']['password']\n\n              begin\n                src_conn.connect\n                Dir.mkdir(\"process/#{transfer['transfer_id']}\", 0700)\n              rescue\n                transfer['source']['files'].each { |file| @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DOWNLOAD_FILE, DateTime.now) }\n                raise FBService::StopTransfer, $!\n              end\n\n              if transfer['options']['md5'] != ''\n                begin\n                  src_conn.get(transfer['options']['md5'], \"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\")\n                  @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::MD5_FILE_DOWNLOADED, DateTime.now)\n                rescue\n                  @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::FAILED_TO_DOWNLOAD_MD5_FILE, DateTime.now)\n                  raise FBService::StopTransfer, $!\n                end\n              end\n\n              transfer['source']['files'].each { |file|\n                begin\n                  src_conn.get(\"#{transfer['source']['path']}/#{file}\", \"process/#{transfer['transfer_id']}/#{file}\")\n                  files_download << file\n                  @db.update_file_status(transfer_id, file, FBService::FILE_DOWNLOADED, DateTime.now)\n                rescue\n                  err.puts \"Exception raised at: #{Time.now.to_s}\"\n                  err.puts $!.backtrace\n                  err.puts $!.message\n                  @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DOWNLOAD_FILE, DateTime.now)\n                  File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n                end\n              }\n\n              src_conn.disconnect\n            rescue\n              @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DOWNLOAD_FILE, DateTime.now)\n              raise FBService::InternalSystemError, $!.to_s\n            end\n          end\n\n\n          #\n          # Process files\n          #\n\n          files_remove = files_download.dup\n          files_download.each { |file|\n\n            #\n            # Archive files\n            #\n\n            if transfer['options']['archive'] == 'true'\n              begin\n                @sys.archive(transfer['transfer_id'], file)\n                @db.update_file_status(transfer_id, file, FBService::FILE_ARCHIVED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_ARCHIVE_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\")\n              end\n            end\n\n\n            #\n            # Verify files\n            #\n\n            if transfer['options']['md5'] != ''\n              begin\n                src_md5 = ''\n                cur_md5 = Digest::MD5.new()\n\n                File.open(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\", 'r').readlines.each { |l|\n                  if l =~ /^(\\S{32})\\s+#{file}$/\n                    src_md5 = $1\n                    break\n                  end\n                }\n\n                File.open(\"process/#{transfer['transfer_id']}/#{file}\", 'r').each_line { |l| cur_md5 << l }\n                raise System::IncorrectMD5, \"incorrect md5 for file '#{file}'\" if cur_md5.hexdigest != src_md5\n                @db.update_file_status(transfer_id, file, FBService::MD5_VERIFIED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_VERIFY_MD5, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\")\n                files_remove.delete_if { |t| t == file }\n                next\n              end\n            end\n\n\n            #\n            # Decrypt files\n            #\n\n            if transfer['options']['dec_method'] == 'gpg' or transfer['options']['dec_method'] == 'pgp'\n              begin\n                @gpg.decrypt(\"process/#{transfer['transfer_id']}/#{file}\")\n                @db.update_file_status(transfer_id, file, FBService::FILE_DECRYPTED, DateTime.now)\n                if file =~ /^(.+)\\.([gpg|pgp|asc]{3})$/\n                  file = $1\n                end\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DECRYPT_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n                files_remove.delete_if { |t| t == file }\n                next\n              end\n            elsif transfer['options']['dec_method'] =~ /des-blb/\n              begin\n                key = File.open(\"etc/keys/#{transfer['options']['dec_key_id']}.key\", 'r').readlines.first.strip\n                @sys.exec(\"sbin/des-blb-i386 -D -u -k '#{key}' process/#{transfer['transfer_id']}/#{file} process/#{transfer['transfer_id']}/#{file}.dec\")\n                File.rename(\"process/#{transfer['transfer_id']}/#{file}.dec\", \"process/#{transfer['transfer_id']}/#{file}\")\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DECRYPT_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}.dec\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}.dec\")\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n                files_remove.delete_if { |t| t == file }\n                next\n              end\n            end\n\n\n            #\n            # Decompress files\n            #\n\n            if transfer['options']['decompression'] == 'true'\n              begin\n                @sys.decompress(transfer['transfer_id'], file)\n                @db.update_file_status(transfer_id, file, FBService::FILE_DECOMPRESSED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DECOMPRESS_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n                files_remove.delete_if { |t| t == file }\n                next\n              end\n            end\n          }\n\n\n          #\n          # Remove old MD5 file\n          #\n\n          if transfer['options']['md5'] != ''\n            begin\n              File.unlink(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\")\n            rescue\n              err.puts \"Exception raised at: #{Time.now.to_s}\"\n              err.puts $!.backtrace\n              err.puts $!.message\n            end\n          end\n\n\n          #\n          # Process files\n          #\n\n\n          files_process = Dir.entries(\"process/#{transfer['transfer_id']}\").sort { |x, y| String.natcmp(x, y)}\n          files_process.each { |file|\n            next if File.directory?(file)\n\n            #\n            # AV scanning\n            #\n\n            if transfer['options']['avscanning'] == 'true'\n              begin\n                @avs.scan(\"process/#{transfer['transfer_id']}/#{file}\")\n                @db.update_file_status(transfer_id, file, FBService::FILE_SCANNED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::MALICIOUS_CODE_DETECTED, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\")\n                next\n              end\n            end\n\n\n            # File encoding\n            if transfer['options']['encoding_from'] != '' and transfer['options']['encoding_to'] != ''\n              begin\n                @sys.iconv(\"process/#{transfer['transfer_id']}/#{file}\", transfer['options']['encoding_from'], transfer['options']['encoding_to'], true)\n                @db.update_file_status(transfer_id, file, FBService::FILE_ENCODED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_ENCODE_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\")\n                next\n              end\n            end\n          }\n\n\n          #\n          # Compress files\n          #\n\n          if transfer['options']['compression'] != ''\n            files_compress = Dir.entries(\"process/#{transfer['transfer_id']}\")\n            files_compress.each { |file|\n              next if File.directory?(file)\n\n              begin\n                @sys.compress(transfer['transfer_id'], file, transfer['options']['compression'])\n                @db.update_file_status(transfer_id, file, FBService::FILE_COMPRESSED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_COMPRESS_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\")\n                next\n              end\n            }\n          end\n\n\n          #\n          # Encrypt files\n          #\n\n          if transfer['options']['enc_method'] == 'gpg' or transfer['options']['enc_method'] == 'pgp'\n            files_compress = Dir.entries(\"process/#{transfer['transfer_id']}\")\n            files_compress.each { |file|\n              next if File.directory?(file)\n              next if file == transfer['options']['md5'].split('/').last\n\n              begin\n                @gpg.encrypt(\"process/#{transfer['transfer_id']}/#{file}\", transfer['options']['enc_recipients'])\n                @db.update_file_status(transfer_id, file, FBService::FILE_ENCRYPTED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_ENCRYPT_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\")\n                files_remove.delete_if { |t| t == file }\n                next\n              end\n            }\n          elsif transfer['options']['enc_method'] =~ /des/\n            files_compress = Dir.entries(\"process/#{transfer['transfer_id']}\")\n            files_compress.each { |file|\n              next if File.directory?(file)\n              next if file == transfer['options']['md5'].split('/').last\n\n              begin\n                @sys.exec(\"openssl enc -e -#{transfer['options']['enc_method']} -kfile etc/keys/#{transfer['options']['enc_key_id']}.key -in process/#{transfer['transfer_id']}/#{file} -out process/#{transfer['transfer_id']}/#{file}.enc\")\n                File.rename(\"process/#{transfer['transfer_id']}/#{file}.enc\", \"process/#{transfer['transfer_id']}/#{file}\")\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_ENCRYPT_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}.enc\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}.enc\")\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n                files_remove.delete_if { |t| t == file }\n              end\n            }\n          end\n\n          #\n          # Recalculate MD5\n          #\n\n          if transfer['options']['md5'] != ''\n            files_md5 = Dir.entries(\"process/#{transfer['transfer_id']}\")\n            files_md5.each { |file|\n              next if File.directory?(file)\n              next if file == transfer['options']['md5'].split('/').last\n\n              begin\n                cur_md5 = Digest::MD5.new()\n                File.open(\"process/#{transfer['transfer_id']}/#{file}\", 'r').each_line { |l| cur_md5 << l }\n\n                File.open(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\", 'a') { |f|\n                  f << \"#{cur_md5}  #{file}\\n\"\n                }\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_CALCULATE_MD5, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\")\n                next\n              end\n            }\n          end\n\n          #\n          # Upload files\n          #\n\n          files_upload = Dir.entries(\"process/#{transfer['transfer_id']}\").sort { |x, y| String.natcmp(x, y)}\n          files_upload.delete_at(files_upload.find_index(transfer['options']['md5'].split('/').last)) if transfer['options']['md5'] != ''\n\n\n          if transfer['target']['protocol'] == 'cifs'\n            trg_conn = Connector::CIFS.new\n            trg_conn.address \t= transfer['target']['address']\n            trg_conn.port \t\t= transfer['target']['port']\n            trg_conn.login \t\t= transfer['target']['login']\n            trg_conn.password = transfer['target']['password']\n            trg_conn.share \t  = transfer['target']['path'].split('/')[1]\n\n            begin\n              trg_conn.connect\n              trg_conn.cd(transfer['target']['path'])\n            rescue\n              files_upload.each { |file|\n                next if File.directory?(file)\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_UPLOAD_FILE, DateTime.now)\n              }\n              raise FBService::StopTransfer, $!\n            end\n\n            files_upload.each { |file|\n              next if File.directory?(file)\n\n              begin\n                if transfer['options']['direct_upload'] == 'true'\n                  trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"#{transfer['target']['path']}/#{file}\") if transfer['options']['filename_suffix'] == ''\n                  trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"#{transfer['target']['path']}/#{file}#{transfer['options']['filename_suffix']}\") if transfer['options']['filename_suffix'] != ''\n                else\n                  trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"#{transfer['target']['path']}/#{file}.partial\")\n                  trg_conn.rename(\"#{transfer['target']['path']}/#{file}.partial\", \"#{transfer['target']['path']}/#{file}\") if transfer['options']['filename_suffix'] == ''\n                  trg_conn.rename(\"#{transfer['target']['path']}/#{file}.partial\", \"#{transfer['target']['path']}/#{file}#{transfer['options']['filename_suffix']}\") if transfer['options']['filename_suffix'] != ''\n                end\n\n                @db.update_file_status(transfer_id, file, FBService::FILE_UPLOADED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_UPLOAD_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n                files_remove.delete_if { |t| t == file }\n                files_remove.delete_if { |t| t == file.gsub(/\\.gpg/, '') }\n                next\n              end\n            }\n\n\n            if transfer['options']['md5'] != '' and files_remove.length > 0\n              begin\n                if transfer['options']['direct_upload'] == 'true'\n                  if transfer['options']['filename_suffix'] == ''\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}\")\n                  else\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}#{transfer['options']['filename_suffix']}\")\n                  end\n                else\n                  if transfer['options']['filename_suffix'] == ''\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\")\n                    trg_conn.rename(\"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\",\n                                    \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}\")\n                  else\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\")\n                    trg_conn.rename(\"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\",\n                                    \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}#{transfer['options']['filename_suffix']}\")\n                  end\n                end\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::MD5_FILE_UPLOADED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::FAILED_TO_UPLOAD_MD5_FILE, DateTime.now)\n              end\n            end\n\n            trg_conn.disconnect\n          elsif transfer['target']['protocol'] == 'ftp'\n            trg_conn = Connector::FTP.new\n            trg_conn.address \t= transfer['target']['address']\n            trg_conn.port \t\t= transfer['target']['port']\n            trg_conn.login \t\t= transfer['target']['login']\n            trg_conn.password = transfer['target']['password']\n            trg_conn.passive \t= transfer['target']['passive']\n            trg_conn.binary \t= transfer['target']['binary']\n            trg_conn.text \t\t= transfer['target']['text']\n            trg_conn.presite \t= transfer['target']['presite']\n            trg_conn.postsite = transfer['target']['postsite']\n\n            begin\n              trg_conn.connect\n            rescue\n              files_upload.each { |file|\n                next if File.directory?(file)\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_UPLOAD_FILE, DateTime.now)\n              }\n              raise FBService::StopTransfer, $!\n            end\n\n            files_upload.each { |file|\n              next if File.directory?(file)\n\n              begin\n                if transfer['options']['direct_upload'] == 'true'\n                  # EXCEPTION FOR MVS - OMIT PATH AND PUT FILENAME IN ''\n                  #trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"#{transfer['target']['path']}/#{file}\") if transfer['options']['filename_suffix'] == ''\n                  #if transfer['options']['filename_suffix'] != ''\n                  #  trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"#{transfer['target']['path']}/#{file}#{transfer['options']['filename_suffix']}\")\n                  #end\n                  trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"'#{file}'\") if transfer['options']['filename_suffix'] == ''\n                  if transfer['options']['filename_suffix'] != ''\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"'#{file}#{transfer['options']['filename_suffix']}'\")\n                  end\n                else\n                  trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"#{transfer['target']['path']}/#{file}.partial\")\n                  trg_conn.rename(\"#{transfer['target']['path']}/#{file}.partial\", \"#{transfer['target']['path']}/#{file}\") if transfer['options']['filename_suffix'] == ''\n                  if transfer['options']['filename_suffix'] != ''\n                    trg_conn.rename(\"#{transfer['target']['path']}/#{file}.partial\", \"#{transfer['target']['path']}/#{file}#{transfer['options']['filename_suffix']}\")\n                  end\n                end\n\n                @db.update_file_status(transfer_id, file, FBService::FILE_UPLOADED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_UPLOAD_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n                files_remove.delete_if { |t| t == file }\n                files_remove.delete_if { |t| t == file.gsub(/\\.gpg/, '') }\n                next\n              end\n            }\n\n            if transfer['options']['md5'] != '' and files_remove.length > 0\n              begin\n                if transfer['options']['direct_upload'] == 'true'\n                  if transfer['options']['filename_suffix'] == ''\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}\")\n                  else\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}#{transfer['options']['filename_suffix']}\")\n                  end\n                else\n                  if transfer['options']['filename_suffix'] == ''\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\")\n                    trg_conn.rename(\"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\",\n                                    \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}\")\n                  else\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\")\n                    trg_conn.rename(\"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\",\n                                    \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}#{transfer['options']['filename_suffix']}\")\n                  end\n                end\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::MD5_FILE_UPLOADED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::FAILED_TO_UPLOAD_MD5_FILE, DateTime.now)\n              end\n            end\n\n            trg_conn.disconnect\n          elsif transfer['target']['protocol'] == 'sftp'\n            trg_conn = Connector::SFTP.new\n            trg_conn.address \t= transfer['target']['address']\n            trg_conn.port \t\t= transfer['target']['port']\n            trg_conn.login \t\t= transfer['target']['login']\n            trg_conn.password = transfer['target']['password']\n\n            begin\n              trg_conn.connect\n            rescue\n              files_upload.each { |file|\n                next if File.directory?(file)\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_UPLOAD_FILE, DateTime.now)\n              }\n              raise FBService::StopTransfer, $!\n            end\n\n            files_upload.each { |file|\n              next if File.directory?(file)\n\n              begin\n                if transfer['options']['direct_upload'] == 'true'\n                  trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"#{transfer['target']['path']}/#{file}\") if transfer['options']['filename_suffix'] == ''\n                  if transfer['options']['filename_suffix'] != ''\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"#{transfer['target']['path']}/#{file}#{transfer['options']['filename_suffix']}\")\n                  end\n                else\n                  trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"#{transfer['target']['path']}/#{file}.partial\")\n                  trg_conn.rename(\"#{transfer['target']['path']}/#{file}.partial\", \"#{transfer['target']['path']}/#{file}\") if transfer['options']['filename_suffix'] == ''\n                  if transfer['options']['filename_suffix'] != ''\n                    trg_conn.rename(\"#{transfer['target']['path']}/#{file}.partial\", \"#{transfer['target']['path']}/#{file}#{transfer['options']['filename_suffix']}\")\n                  end\n                end\n\n                @db.update_file_status(transfer_id, file, FBService::FILE_UPLOADED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message.to_s\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_UPLOAD_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n                files_remove.delete_if { |t| t == file }\n                files_remove.delete_if { |t| t == file.gsub(/\\.gpg/, '') }\n                next\n              end\n            }\n\n            if transfer['options']['md5'] != '' and files_remove.length > 0\n              begin\n                if transfer['options']['direct_upload'] == 'true'\n                  if transfer['options']['filename_suffix'] == ''\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}\")\n                  else\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}#{transfer['options']['filename_suffix']}\")\n                  end\n                else\n                  if transfer['options']['filename_suffix'] == ''\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\")\n                    trg_conn.rename(\"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\",\n                                    \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}\")\n                  else\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\")\n                    trg_conn.rename(\"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\",\n                                    \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}#{transfer['options']['filename_suffix']}\")\n                  end\n                end\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::MD5_FILE_UPLOADED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message.to_s\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::FAILED_TO_UPLOAD_MD5_FILE, DateTime.now)\n              end\n            end\n\n            trg_conn.disconnect\n          end\n\n\n          #\n          # Removing source files\n          #\n\n          if transfer['options']['remove_source_file'] == 'true'\n            if transfer['source']['protocol'] == 'cifs'\n              src_conn = Connector::CIFS.new\n              src_conn.address \t= transfer['source']['address']\n              src_conn.port \t\t= transfer['source']['port']\n              src_conn.login \t\t= transfer['source']['login']\n              src_conn.password = transfer['source']['password']\n              src_conn.share \t  = transfer['source']['path'].split('/')[1]\n\n              begin\n                src_conn.connect\n                src_conn.cd(transfer['source']['path'])\n              rescue\n                files_remove.each { |file|\n                  next if File.directory?(file)\n                  @db.update_file_status(transfer_id, file, FBService::FAILED_TO_REMOVE_FILE, DateTime.now)\n                }\n                raise FBService::StopTransfer, $!\n              end\n\n              files_remove.each { |file|\n                begin\n                  src_conn.remove(\"#{transfer['source']['path']}/#{file}\")\n                  @db.update_file_status(transfer_id, file, FBService::FILE_REMOVED, DateTime.now)\n                rescue\n                  err.puts \"Exception raised at: #{Time.now.to_s}\"\n                  err.puts $!.backtrace\n                  err.puts $!.message.to_s\n                  @db.update_file_status(transfer_id, file, FBService::FAILED_TO_REMOVE_FILE, DateTime.now)\n                  next\n                end\n              }\n\n              if transfer['options']['md5'] != '' and files_remove.length > 0\n                begin\n                  src_conn.remove(transfer['options']['md5'])\n                  @db.update_file_status(transfer_id, File.split(transfer['options']['md5']).last, FBService::MD5_FILE_REMOVED, DateTime.now)\n                rescue\n                  err.puts \"Exception raised at: #{Time.now.to_s}\"\n                  err.puts $!.backtrace\n                  err.puts $!.message.to_s\n                  @db.update_file_status(transfer_id, File.split(transfer['options']['md5']).last, FBService::FAILED_TO_REMOVE_MD5_FILE, DateTime.now)\n                end\n              end\n\n              src_conn.disconnect\n            elsif transfer['source']['protocol'] == 'ftp'\n              src_conn = Connector::FTP.new\n              src_conn.address \t= transfer['source']['address']\n              src_conn.port \t\t= transfer['source']['port']\n              src_conn.login \t\t= transfer['source']['login']\n              src_conn.password = transfer['source']['password']\n\n              begin\n                src_conn.connect\n              rescue\n                files_remove.each { |file|\n                  next if File.directory?(file)\n                  @db.update_file_status(transfer_id, file, FBService::FAILED_TO_REMOVE_FILE, DateTime.now)\n                }\n                raise FBService::StopTransfer, $!\n              end\n\n              files_remove.each { |file|\n                begin\n                  src_conn.remove(\"#{transfer['source']['path']}/#{file}\")\n                  @db.update_file_status(transfer_id, file, FBService::FILE_REMOVED, DateTime.now)\n                rescue\n                  err.puts \"Exception raised at: #{Time.now.to_s}\"\n                  err.puts $!.backtrace\n                  err.puts $!.message.to_s\n                  @db.update_file_status(transfer_id, file, FBService::FAILED_TO_REMOVE_FILE, DateTime.now)\n                  next\n                end\n              }\n\n              if transfer['options']['md5'] != '' and files_remove.length > 0\n                begin\n                  src_conn.remove(transfer['options']['md5'])\n                  @db.update_file_status(transfer_id, File.split(transfer['options']['md5']).last, FBService::MD5_FILE_REMOVED, DateTime.now)\n                rescue\n                  err.puts \"Exception raised at: #{Time.now.to_s}\"\n                  err.puts $!.backtrace\n                  err.puts $!.message.to_s\n                  @db.update_file_status(transfer_id, File.split(transfer['options']['md5']).last, FBService::FAILED_TO_REMOVE_MD5_FILE, DateTime.now)\n                end\n              end\n\n              src_conn.disconnect\n            elsif transfer['source']['protocol'] == 'sftp'\n              src_conn = Connector::SFTP.new\n              src_conn.address \t= transfer['source']['address']\n              src_conn.port \t\t= transfer['source']['port']\n              src_conn.login \t\t= transfer['source']['login']\n              src_conn.password = transfer['source']['password']\n\n              begin\n                src_conn.connect\n              rescue\n                files_remove.each { |file|\n                  next if File.directory?(file)\n                  @db.update_file_status(transfer_id, file, FBService::FAILED_TO_REMOVE_FILE, DateTime.now)\n                }\n                raise FBService::StopTransfer, $!\n              end\n\n              files_remove.each { |file|\n                begin\n                  src_conn.remove(\"#{transfer['source']['path']}/#{file}\")\n                  @db.update_file_status(transfer_id, file, FBService::FILE_REMOVED, DateTime.now)\n                rescue\n                  err.puts \"Exception raised at: #{Time.now.to_s}\"\n                  err.puts $!.backtrace\n                  err.puts $!.message.to_s\n                  @db.update_file_status(transfer_id, file, FBService::FAILED_TO_REMOVE_FILE, DateTime.now)\n                  next\n                end\n              }\n\n              if transfer['options']['md5'] != '' and files_remove.length > 0\n                begin\n                  src_conn.remove(transfer['options']['md5'])\n                  @db.update_file_status(transfer_id, File.split(transfer['options']['md5']).last, FBService::MD5_FILE_REMOVED, DateTime.now)\n                rescue\n                  err.puts \"Exception raised at: #{Time.now.to_s}\"\n                  err.puts $!.backtrace\n                  err.puts $!.message.to_s\n                  @db.update_file_status(transfer_id, File.split(transfer['options']['md5']).last, FBService::FAILED_TO_REMOVE_MD5_FILE, DateTime.now)\n                end\n              end\n\n              src_conn.disconnect\n            end\n          end\n\n          @db.select_file_status(transfer_id).each { |file|\n            if  file['status_id'].to_i == FBService::FILE_UPLOADED or\n                file['status_id'].to_i == FBService::FILE_REMOVED or\n                file['status_id'].to_i == FBService::MD5_FILE_UPLOADED or\n                file['status_id'].to_i == FBService::MD5_FILE_REMOVED\n              @db.update_file_status(transfer_id, file['filename'], FBService::TRANSFER_COMPLETED, DateTime.now)\n            end\n          }\n\n          err.puts \"Transfer finished at: #{Time.now.to_s}\"\n          err.close\n\n          got_errors = false\n          @db.select_file_status(transfer_id).each { |file|\n            got_errors = true if  file['status_id'].to_i == FBService::FAILED_TO_ARCHIVE_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_COMPRESS_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_DECOMPRESS_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_DECRYPT_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_DOWNLOAD_MD5_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_DOWNLOAD_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_ENCRYPT_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_REMOVE_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_REMOVE_MD5_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_UPLOAD_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_UPLOAD_MD5_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_VERIFY_MD5 or\n                file['status_id'].to_i == FBService::MALICIOUS_CODE_DETECTED or\n                file['status_id'].to_i == FBService::FAILED_TO_ENCODE_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_CALCULATE_MD5\n          }\n\n          @db.update_transfer_status(transfer_id, FBService::TRANSFER_COMPLETED_SUCCESSFULLY, DateTime.now) if !got_errors\n          @db.update_transfer_status(transfer_id, FBService::TRANSFER_COMPLETED_WITH_ERRORS,  DateTime.now) if  got_errors\n        rescue\n          err.puts \"Exception raised at: #{Time.now.to_s}\"\n          err.puts $!.backtrace\n          err.puts $!.message.to_s\n          err.puts \"Transfer finished at: #{Time.now.to_s}\"\n          err.close\n          @db.update_transfer_status(transfer_id, FBService::TRANSFER_COMPLETED_WITH_ERRORS, DateTime.now)\n        ensure\n          FileUtils.rm_rf(\"process/#{transfer['transfer_id']}\")\n          @threads.delete_if { |x| x == Thread.current }\n        end\n      }\n\n      builder(:collection_transfer_response, :locals => { :transfer_id => transfer['transfer_id'] })\n    rescue StandardError => e\n      err_msg = \"#{$!.backtrace.join(\"\\n\")}\\n#{$!.message}\\n\"\n      @stderr_mutex.try_lock\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      STDERR.puts \"Transfer ID: #{transfer['transfer_id']}\"\n      STDERR.puts \"Exception time: #{DateTime.parse(Time.now.to_s)}\"\n      STDERR.puts err_msg\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      @stderr_mutex.unlock\n\n      fault_code = e.respond_to?(:fault_code) ? e.fault_code : 'Server'\n      builder(:fault, :locals => { :fault_string => e.message, :fault_code => fault_code })\n    end\n  end\n\n  # Status operation, send back transfer status\n  def do_collection_status(soap_body)\n    begin\n      prefix = soap_body.root.namespace.prefix\n      transfer_id = soap_body.xpath(\"//#{prefix}:TransferID/text()\").to_s\n\n      status = @db.select_transfer_status(transfer_id)\n      status['status_desc'] = @db.select_transfer_status_desc(status['status_id'])\n      status['status_time'] = DateTime.parse(status['status_time'])\n\n      files  = []\n      @db.select_file_status(transfer_id).each { |file|\n        file['status_desc'] = @db.select_file_status_desc(file['status_id'])\n        file['status_type'] = @db.select_file_status_type(file['status_id'])\n        file['status_time'] = DateTime.parse(file['status_time'])\n        files << file\n      }\n\n      builder(:collection_status_response, :locals => { :transfer_id => transfer_id, :files => files, :status => status })\n    rescue\n      err_msg = \"#{$!.backtrace.join(\"\\n\")}\\n#{$!.message}\\n\"\n      @stderr_mutex.try_lock\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      STDERR.puts \"Exception time: #{DateTime.parse(Time.now.to_s)}\"\n      STDERR.puts err_msg\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      @stderr_mutex.unlock\n\n      builder(:fault, :locals => { :fault_string => 'failed to get status', :fault_code => 'Server' })\n    end\n  end\n\n  # List operation, send back remote directory list\n  def do_list(soap_body)\n    begin\n      prefix = soap_body.root.namespace.prefix\n\n      req = {}\n      req['protocol'] = soap_body.xpath(\"//#{prefix}:Protocol/text()\").to_s.downcase\n      req['address'] \t= soap_body.xpath(\"//#{prefix}:Address/text()\").to_s\n      req['port'] \t\t= soap_body.xpath(\"//#{prefix}:Port/text()\").to_s\n      req['login'] \t\t= soap_body.xpath(\"//#{prefix}:Login/text()\").to_s\n      req['password'] = soap_body.xpath(\"//#{prefix}:Password/text()\").to_s\n      req['path'] \t\t= soap_body.xpath(\"//#{prefix}:Path/text()\").to_s\n\n      begin\n        source = @db.select_account(req)\n      rescue Database::AccountNotExist\n        source = @db.insert_account(req)\n      end\n\n      list = []\n      if req['protocol'] == 'cifs'\n        conn = Connector::CIFS.new\n        conn.address \t= req['address']\n        conn.login \t\t= req['login']\n        conn.password = req['password']\n        conn.share \t  = req['path'].split('/')[1]\n        conn.connect\n        conn.cd(req['path'])\n        list = conn.list(req['path'])\n        conn.disconnect\n      elsif req['protocol'] == 'ftp'\n        conn = Connector::FTP.new\n        conn.address \t= req['address']\n        conn.port \t\t= req['port']\n        conn.login \t\t= req['login']\n        conn.password = req['password']\n        conn.connect\n        list = conn.list(req['path'])\n        conn.disconnect\n      elsif req['protocol'] == 'sftp'\n        conn = Connector::SFTP.new\n        conn.address \t= req['address']\n        conn.port \t\t= req['port']\n        conn.login \t\t= req['login']\n        conn.password = req['password']\n        conn.connect\n        list = conn.list(req['path'])\n        conn.disconnect\n      end\n\n      # Convert time format\n      list.map { |j| j['mtime'] = DateTime.parse(j['mtime']) }\n\n      # Remove currently transferred files\n      @db.select_running_transfers_by_source(FBService::TRANSFER_RUNNING, source['account_id'], source['path']).each { |i|\n        @db.select_transfer_files(i['transfer_id']).each { |j|\n          list.delete_if { |k| k['name'] == j['filename'] }\n        }\n      }\n\n      # Remove temporary files\n      list.delete_if { |j| j['name'] =~ /\\.partial$/ }\n\n      builder(:list_response, :locals => { :list => list })\n    rescue\n      err_msg = \"#{$!.backtrace.join(\"\\n\")}\\n#{$!.message}\\n\"\n      @stderr_mutex.try_lock\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      STDERR.puts \"Exception time: #{DateTime.parse(Time.now.to_s)}\"\n      STDERR.puts err_msg\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      @stderr_mutex.unlock\n\n      builder(:fault, :locals => { :fault_string => 'failed to list directory', :fault_code => 'Server' })\n    end\n  end\n\n  # Status operation, send back transfer trace log\n  def do_log(soap_body)\n    begin\n      prefix = soap_body.root.namespace.prefix\n      transfer_id = soap_body.xpath(\"//#{prefix}:TransferID/text()\").to_s\n      log = File.open(\"#{File.dirname(__FILE__)}/../log/transfer/#{transfer_id}.log\", 'r').readlines.join\n      log = \"\\n<![CDATA[\\n\" + log + \"]]>\\n\"\n      builder(:log_response, :locals => { :transfer_id => transfer_id, :log => log })\n    rescue\n      err_msg = \"#{$!.backtrace.join(\"\\n\")}\\n#{$!.message}\\n\"\n      @stderr_mutex.try_lock\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      STDERR.puts \"Exception time: #{DateTime.parse(Time.now.to_s)}\"\n      STDERR.puts err_msg\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      @stderr_mutex.unlock\n\n      builder(:fault, :locals => { :fault_string => 'failed to get log', :fault_code => 'Server' })\n    end\n  end\n\n  # Service status operation, send back last transfer time\n  def do_service_status(soap_body)\n    begin\n      time = 0\n      @db.select_last_transfers(1).each { |t| time = DateTime.parse(t['status_time']) }\n\n      builder(:service_status_response, :locals => { :time => time })\n    rescue\n      err_msg = \"#{$!.backtrace.join(\"\\n\")}\\n#{$!.message}\\n\"\n      @stderr_mutex.try_lock\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      STDERR.puts \"Exception time: #{DateTime.parse(Time.now.to_s)}\"\n      STDERR.puts err_msg\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      @stderr_mutex.unlock\n\n      builder(:fault, :locals => { :fault_string => 'failed to get log', :fault_code => 'Server' })\n    end\n  end\nend\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xs:schema targetNamespace=\"http://nordea.com/filebroker\" xmlns=\"http://nordea.com/filebroker\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" attributeFormDefault=\"qualified\" elementFormDefault=\"qualified\" xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\n\n  <xs:simpleType name=\"EncodingType\">\n    <xs:restriction base=\"xs:string\">\n      <xs:enumeration value=\"437\" />\n      <xs:enumeration value=\"500\" />\n      <xs:enumeration value=\"500V1\" />\n      <xs:enumeration value=\"850\" />\n      <xs:enumeration value=\"851\" />\n      <xs:enumeration value=\"852\" />\n      <xs:enumeration value=\"855\" />\n      <xs:enumeration value=\"856\" />\n      <xs:enumeration value=\"857\" />\n      <xs:enumeration value=\"860\" />\n      <xs:enumeration value=\"861\" />\n      <xs:enumeration value=\"862\" />\n      <xs:enumeration value=\"863\" />\n      <xs:enumeration value=\"864\" />\n      <xs:enumeration value=\"865\" />\n      <xs:enumeration value=\"866\" />\n      <xs:enumeration value=\"866NAV\" />\n      <xs:enumeration value=\"869\" />\n      <xs:enumeration value=\"874\" />\n      <xs:enumeration value=\"904\" />\n      <xs:enumeration value=\"1026\" />\n      <xs:enumeration value=\"1046\" />\n      <xs:enumeration value=\"1047\" />\n      <xs:enumeration value=\"8859_1\" />\n      <xs:enumeration value=\"8859_2\" />\n      <xs:enumeration value=\"8859_3\" />\n      <xs:enumeration value=\"8859_4\" />\n      <xs:enumeration value=\"8859_5\" />\n      <xs:enumeration value=\"8859_6\" />\n      <xs:enumeration value=\"8859_7\" />\n      <xs:enumeration value=\"8859_8\" />\n      <xs:enumeration value=\"8859_9\" />\n      <xs:enumeration value=\"10646-1:1993\" />\n      <xs:enumeration value=\"10646-1:1993/UCS4/\" />\n      <xs:enumeration value=\"ANSI_X3.4-1968\" />\n      <xs:enumeration value=\"ANSI_X3.4-1986\" />\n      <xs:enumeration value=\"ANSI_X3.4\" />\n      <xs:enumeration value=\"ANSI_X3.110-1983\" />\n      <xs:enumeration value=\"ANSI_X3.110\" />\n      <xs:enumeration value=\"ARABIC\" />\n      <xs:enumeration value=\"ARABIC7\" />\n      <xs:enumeration value=\"ARMSCII-8\" />\n      <xs:enumeration value=\"ASCII\" />\n      <xs:enumeration value=\"ASMO-708\" />\n      <xs:enumeration value=\"ASMO_449\" />\n      <xs:enumeration value=\"BALTIC\" />\n      <xs:enumeration value=\"BIG-5\" />\n      <xs:enumeration value=\"BIG-FIVE\" />\n      <xs:enumeration value=\"BIG5-HKSCS\" />\n      <xs:enumeration value=\"BIG5\" />\n      <xs:enumeration value=\"BIG5HKSCS\" />\n      <xs:enumeration value=\"BIGFIVE\" />\n      <xs:enumeration value=\"BRF\" />\n      <xs:enumeration value=\"BS_4730\" />\n      <xs:enumeration value=\"CA\" />\n      <xs:enumeration value=\"CN-BIG5\" />\n      <xs:enumeration value=\"CN-GB\" />\n      <xs:enumeration value=\"CN\" />\n      <xs:enumeration value=\"CP-AR\" />\n      <xs:enumeration value=\"CP-GR\" />\n      <xs:enumeration value=\"CP-HU\" />\n      <xs:enumeration value=\"CP037\" />\n      <xs:enumeration value=\"CP038\" />\n      <xs:enumeration value=\"CP273\" />\n      <xs:enumeration value=\"CP274\" />\n      <xs:enumeration value=\"CP275\" />\n      <xs:enumeration value=\"CP278\" />\n      <xs:enumeration value=\"CP280\" />\n      <xs:enumeration value=\"CP281\" />\n      <xs:enumeration value=\"CP282\" />\n      <xs:enumeration value=\"CP284\" />\n      <xs:enumeration value=\"CP285\" />\n      <xs:enumeration value=\"CP290\" />\n      <xs:enumeration value=\"CP297\" />\n      <xs:enumeration value=\"CP367\" />\n      <xs:enumeration value=\"CP420\" />\n      <xs:enumeration value=\"CP423\" />\n      <xs:enumeration value=\"CP424\" />\n      <xs:enumeration value=\"CP437\" />\n      <xs:enumeration value=\"CP500\" />\n      <xs:enumeration value=\"CP737\" />\n      <xs:enumeration value=\"CP775\" />\n      <xs:enumeration value=\"CP803\" />\n      <xs:enumeration value=\"CP813\" />\n      <xs:enumeration value=\"CP819\" />\n      <xs:enumeration value=\"CP850\" />\n      <xs:enumeration value=\"CP851\" />\n      <xs:enumeration value=\"CP852\" />\n      <xs:enumeration value=\"CP855\" />\n      <xs:enumeration value=\"CP856\" />\n      <xs:enumeration value=\"CP857\" />\n      <xs:enumeration value=\"CP860\" />\n      <xs:enumeration value=\"CP861\" />\n      <xs:enumeration value=\"CP862\" />\n      <xs:enumeration value=\"CP863\" />\n      <xs:enumeration value=\"CP864\" />\n      <xs:enumeration value=\"CP865\" />\n      <xs:enumeration value=\"CP866\" />\n      <xs:enumeration value=\"CP866NAV\" />\n      <xs:enumeration value=\"CP868\" />\n      <xs:enumeration value=\"CP869\" />\n      <xs:enumeration value=\"CP870\" />\n      <xs:enumeration value=\"CP871\" />\n      <xs:enumeration value=\"CP874\" />\n      <xs:enumeration value=\"CP875\" />\n      <xs:enumeration value=\"CP880\" />\n      <xs:enumeration value=\"CP891\" />\n      <xs:enumeration value=\"CP901\" />\n      <xs:enumeration value=\"CP902\" />\n      <xs:enumeration value=\"CP903\" />\n      <xs:enumeration value=\"CP904\" />\n      <xs:enumeration value=\"CP905\" />\n      <xs:enumeration value=\"CP912\" />\n      <xs:enumeration value=\"CP915\" />\n      <xs:enumeration value=\"CP916\" />\n      <xs:enumeration value=\"CP918\" />\n      <xs:enumeration value=\"CP920\" />\n      <xs:enumeration value=\"CP921\" />\n      <xs:enumeration value=\"CP922\" />\n      <xs:enumeration value=\"CP930\" />\n      <xs:enumeration value=\"CP932\" />\n      <xs:enumeration value=\"CP933\" />\n      <xs:enumeration value=\"CP935\" />\n      <xs:enumeration value=\"CP936\" />\n      <xs:enumeration value=\"CP937\" />\n      <xs:enumeration value=\"CP939\" />\n      <xs:enumeration value=\"CP949\" />\n      <xs:enumeration value=\"CP950\" />\n      <xs:enumeration value=\"CP1004\" />\n      <xs:enumeration value=\"CP1008\" />\n      <xs:enumeration value=\"CP1025\" />\n      <xs:enumeration value=\"CP1026\" />\n      <xs:enumeration value=\"CP1046\" />\n      <xs:enumeration value=\"CP1047\" />\n      <xs:enumeration value=\"CP1070\" />\n      <xs:enumeration value=\"CP1079\" />\n      <xs:enumeration value=\"CP1081\" />\n      <xs:enumeration value=\"CP1084\" />\n      <xs:enumeration value=\"CP1089\" />\n      <xs:enumeration value=\"CP1097\" />\n      <xs:enumeration value=\"CP1112\" />\n      <xs:enumeration value=\"CP1122\" />\n      <xs:enumeration value=\"CP1123\" />\n      <xs:enumeration value=\"CP1124\" />\n      <xs:enumeration value=\"CP1125\" />\n      <xs:enumeration value=\"CP1129\" />\n      <xs:enumeration value=\"CP1130\" />\n      <xs:enumeration value=\"CP1132\" />\n      <xs:enumeration value=\"CP1133\" />\n      <xs:enumeration value=\"CP1137\" />\n      <xs:enumeration value=\"CP1140\" />\n      <xs:enumeration value=\"CP1141\" />\n      <xs:enumeration value=\"CP1142\" />\n      <xs:enumeration value=\"CP1143\" />\n      <xs:enumeration value=\"CP1144\" />\n      <xs:enumeration value=\"CP1145\" />\n      <xs:enumeration value=\"CP1146\" />\n      <xs:enumeration value=\"CP1147\" />\n      <xs:enumeration value=\"CP1148\" />\n      <xs:enumeration value=\"CP1149\" />\n      <xs:enumeration value=\"CP1153\" />\n      <xs:enumeration value=\"CP1154\" />\n      <xs:enumeration value=\"CP1155\" />\n      <xs:enumeration value=\"CP1156\" />\n      <xs:enumeration value=\"CP1157\" />\n      <xs:enumeration value=\"CP1158\" />\n      <xs:enumeration value=\"CP1160\" />\n      <xs:enumeration value=\"CP1161\" />\n      <xs:enumeration value=\"CP1162\" />\n      <xs:enumeration value=\"CP1163\" />\n      <xs:enumeration value=\"CP1164\" />\n      <xs:enumeration value=\"CP1166\" />\n      <xs:enumeration value=\"CP1167\" />\n      <xs:enumeration value=\"CP1250\" />\n      <xs:enumeration value=\"CP1251\" />\n      <xs:enumeration value=\"CP1252\" />\n      <xs:enumeration value=\"CP1253\" />\n      <xs:enumeration value=\"CP1254\" />\n      <xs:enumeration value=\"CP1255\" />\n      <xs:enumeration value=\"CP1256\" />\n      <xs:enumeration value=\"CP1257\" />\n      <xs:enumeration value=\"CP1258\" />\n      <xs:enumeration value=\"CP1282\" />\n      <xs:enumeration value=\"CP1361\" />\n      <xs:enumeration value=\"CP1364\" />\n      <xs:enumeration value=\"CP1371\" />\n      <xs:enumeration value=\"CP1388\" />\n      <xs:enumeration value=\"CP1390\" />\n      <xs:enumeration value=\"CP1399\" />\n      <xs:enumeration value=\"CP4517\" />\n      <xs:enumeration value=\"CP4899\" />\n      <xs:enumeration value=\"CP4909\" />\n      <xs:enumeration value=\"CP4971\" />\n      <xs:enumeration value=\"CP5347\" />\n      <xs:enumeration value=\"CP9030\" />\n      <xs:enumeration value=\"CP9066\" />\n      <xs:enumeration value=\"CP9448\" />\n      <xs:enumeration value=\"CP10007\" />\n      <xs:enumeration value=\"CP12712\" />\n      <xs:enumeration value=\"CP16804\" />\n      <xs:enumeration value=\"CPIBM861\" />\n      <xs:enumeration value=\"CSA7-1\" />\n      <xs:enumeration value=\"CSA7-2\" />\n      <xs:enumeration value=\"CSASCII\" />\n      <xs:enumeration value=\"CSA_T500-1983\" />\n      <xs:enumeration value=\"CSA_T500\" />\n      <xs:enumeration value=\"CSA_Z243.4-1985-1\" />\n      <xs:enumeration value=\"CSA_Z243.4-1985-2\" />\n      <xs:enumeration value=\"CSA_Z243.419851\" />\n      <xs:enumeration value=\"CSA_Z243.419852\" />\n      <xs:enumeration value=\"CSDECMCS\" />\n      <xs:enumeration value=\"CSEBCDICATDE\" />\n      <xs:enumeration value=\"CSEBCDICATDEA\" />\n      <xs:enumeration value=\"CSEBCDICCAFR\" />\n      <xs:enumeration value=\"CSEBCDICDKNO\" />\n      <xs:enumeration value=\"CSEBCDICDKNOA\" />\n      <xs:enumeration value=\"CSEBCDICES\" />\n      <xs:enumeration value=\"CSEBCDICESA\" />\n      <xs:enumeration value=\"CSEBCDICESS\" />\n      <xs:enumeration value=\"CSEBCDICFISE\" />\n      <xs:enumeration value=\"CSEBCDICFISEA\" />\n      <xs:enumeration value=\"CSEBCDICFR\" />\n      <xs:enumeration value=\"CSEBCDICIT\" />\n      <xs:enumeration value=\"CSEBCDICPT\" />\n      <xs:enumeration value=\"CSEBCDICUK\" />\n      <xs:enumeration value=\"CSEBCDICUS\" />\n      <xs:enumeration value=\"CSEUCKR\" />\n      <xs:enumeration value=\"CSEUCPKDFMTJAPANESE\" />\n      <xs:enumeration value=\"CSGB2312\" />\n      <xs:enumeration value=\"CSHPROMAN8\" />\n      <xs:enumeration value=\"CSIBM037\" />\n      <xs:enumeration value=\"CSIBM038\" />\n      <xs:enumeration value=\"CSIBM273\" />\n      <xs:enumeration value=\"CSIBM274\" />\n      <xs:enumeration value=\"CSIBM275\" />\n      <xs:enumeration value=\"CSIBM277\" />\n      <xs:enumeration value=\"CSIBM278\" />\n      <xs:enumeration value=\"CSIBM280\" />\n      <xs:enumeration value=\"CSIBM281\" />\n      <xs:enumeration value=\"CSIBM284\" />\n      <xs:enumeration value=\"CSIBM285\" />\n      <xs:enumeration value=\"CSIBM290\" />\n      <xs:enumeration value=\"CSIBM297\" />\n      <xs:enumeration value=\"CSIBM420\" />\n      <xs:enumeration value=\"CSIBM423\" />\n      <xs:enumeration value=\"CSIBM424\" />\n      <xs:enumeration value=\"CSIBM500\" />\n      <xs:enumeration value=\"CSIBM803\" />\n      <xs:enumeration value=\"CSIBM851\" />\n      <xs:enumeration value=\"CSIBM855\" />\n      <xs:enumeration value=\"CSIBM856\" />\n      <xs:enumeration value=\"CSIBM857\" />\n      <xs:enumeration value=\"CSIBM860\" />\n      <xs:enumeration value=\"CSIBM863\" />\n      <xs:enumeration value=\"CSIBM864\" />\n      <xs:enumeration value=\"CSIBM865\" />\n      <xs:enumeration value=\"CSIBM866\" />\n      <xs:enumeration value=\"CSIBM868\" />\n      <xs:enumeration value=\"CSIBM869\" />\n      <xs:enumeration value=\"CSIBM870\" />\n      <xs:enumeration value=\"CSIBM871\" />\n      <xs:enumeration value=\"CSIBM880\" />\n      <xs:enumeration value=\"CSIBM891\" />\n      <xs:enumeration value=\"CSIBM901\" />\n      <xs:enumeration value=\"CSIBM902\" />\n      <xs:enumeration value=\"CSIBM903\" />\n      <xs:enumeration value=\"CSIBM904\" />\n      <xs:enumeration value=\"CSIBM905\" />\n      <xs:enumeration value=\"CSIBM918\" />\n      <xs:enumeration value=\"CSIBM921\" />\n      <xs:enumeration value=\"CSIBM922\" />\n      <xs:enumeration value=\"CSIBM930\" />\n      <xs:enumeration value=\"CSIBM932\" />\n      <xs:enumeration value=\"CSIBM933\" />\n      <xs:enumeration value=\"CSIBM935\" />\n      <xs:enumeration value=\"CSIBM937\" />\n      <xs:enumeration value=\"CSIBM939\" />\n      <xs:enumeration value=\"CSIBM943\" />\n      <xs:enumeration value=\"CSIBM1008\" />\n      <xs:enumeration value=\"CSIBM1025\" />\n      <xs:enumeration value=\"CSIBM1026\" />\n      <xs:enumeration value=\"CSIBM1097\" />\n      <xs:enumeration value=\"CSIBM1112\" />\n      <xs:enumeration value=\"CSIBM1122\" />\n      <xs:enumeration value=\"CSIBM1123\" />\n      <xs:enumeration value=\"CSIBM1124\" />\n      <xs:enumeration value=\"CSIBM1129\" />\n      <xs:enumeration value=\"CSIBM1130\" />\n      <xs:enumeration value=\"CSIBM1132\" />\n      <xs:enumeration value=\"CSIBM1133\" />\n      <xs:enumeration value=\"CSIBM1137\" />\n      <xs:enumeration value=\"CSIBM1140\" />\n      <xs:enumeration value=\"CSIBM1141\" />\n      <xs:enumeration value=\"CSIBM1142\" />\n      <xs:enumeration value=\"CSIBM1143\" />\n      <xs:enumeration value=\"CSIBM1144\" />\n      <xs:enumeration value=\"CSIBM1145\" />\n      <xs:enumeration value=\"CSIBM1146\" />\n      <xs:enumeration value=\"CSIBM1147\" />\n      <xs:enumeration value=\"CSIBM1148\" />\n      <xs:enumeration value=\"CSIBM1149\" />\n      <xs:enumeration value=\"CSIBM1153\" />\n      <xs:enumeration value=\"CSIBM1154\" />\n      <xs:enumeration value=\"CSIBM1155\" />\n      <xs:enumeration value=\"CSIBM1156\" />\n      <xs:enumeration value=\"CSIBM1157\" />\n      <xs:enumeration value=\"CSIBM1158\" />\n      <xs:enumeration value=\"CSIBM1160\" />\n      <xs:enumeration value=\"CSIBM1161\" />\n      <xs:enumeration value=\"CSIBM1163\" />\n      <xs:enumeration value=\"CSIBM1164\" />\n      <xs:enumeration value=\"CSIBM1166\" />\n      <xs:enumeration value=\"CSIBM1167\" />\n      <xs:enumeration value=\"CSIBM1364\" />\n      <xs:enumeration value=\"CSIBM1371\" />\n      <xs:enumeration value=\"CSIBM1388\" />\n      <xs:enumeration value=\"CSIBM1390\" />\n      <xs:enumeration value=\"CSIBM1399\" />\n      <xs:enumeration value=\"CSIBM4517\" />\n      <xs:enumeration value=\"CSIBM4899\" />\n      <xs:enumeration value=\"CSIBM4909\" />\n      <xs:enumeration value=\"CSIBM4971\" />\n      <xs:enumeration value=\"CSIBM5347\" />\n      <xs:enumeration value=\"CSIBM9030\" />\n      <xs:enumeration value=\"CSIBM9066\" />\n      <xs:enumeration value=\"CSIBM9448\" />\n      <xs:enumeration value=\"CSIBM12712\" />\n      <xs:enumeration value=\"CSIBM16804\" />\n      <xs:enumeration value=\"CSIBM11621162\" />\n      <xs:enumeration value=\"CSISO4UNITEDKINGDOM\" />\n      <xs:enumeration value=\"CSISO10SWEDISH\" />\n      <xs:enumeration value=\"CSISO11SWEDISHFORNAMES\" />\n      <xs:enumeration value=\"CSISO14JISC6220RO\" />\n      <xs:enumeration value=\"CSISO15ITALIAN\" />\n      <xs:enumeration value=\"CSISO16PORTUGESE\" />\n      <xs:enumeration value=\"CSISO17SPANISH\" />\n      <xs:enumeration value=\"CSISO18GREEK7OLD\" />\n      <xs:enumeration value=\"CSISO19LATINGREEK\" />\n      <xs:enumeration value=\"CSISO21GERMAN\" />\n      <xs:enumeration value=\"CSISO25FRENCH\" />\n      <xs:enumeration value=\"CSISO27LATINGREEK1\" />\n      <xs:enumeration value=\"CSISO49INIS\" />\n      <xs:enumeration value=\"CSISO50INIS8\" />\n      <xs:enumeration value=\"CSISO51INISCYRILLIC\" />\n      <xs:enumeration value=\"CSISO58GB1988\" />\n      <xs:enumeration value=\"CSISO60DANISHNORWEGIAN\" />\n      <xs:enumeration value=\"CSISO60NORWEGIAN1\" />\n      <xs:enumeration value=\"CSISO61NORWEGIAN2\" />\n      <xs:enumeration value=\"CSISO69FRENCH\" />\n      <xs:enumeration value=\"CSISO84PORTUGUESE2\" />\n      <xs:enumeration value=\"CSISO85SPANISH2\" />\n      <xs:enumeration value=\"CSISO86HUNGARIAN\" />\n      <xs:enumeration value=\"CSISO88GREEK7\" />\n      <xs:enumeration value=\"CSISO89ASMO449\" />\n      <xs:enumeration value=\"CSISO90\" />\n      <xs:enumeration value=\"CSISO92JISC62991984B\" />\n      <xs:enumeration value=\"CSISO99NAPLPS\" />\n      <xs:enumeration value=\"CSISO103T618BIT\" />\n      <xs:enumeration value=\"CSISO111ECMACYRILLIC\" />\n      <xs:enumeration value=\"CSISO121CANADIAN1\" />\n      <xs:enumeration value=\"CSISO122CANADIAN2\" />\n      <xs:enumeration value=\"CSISO139CSN369103\" />\n      <xs:enumeration value=\"CSISO141JUSIB1002\" />\n      <xs:enumeration value=\"CSISO143IECP271\" />\n      <xs:enumeration value=\"CSISO150\" />\n      <xs:enumeration value=\"CSISO150GREEKCCITT\" />\n      <xs:enumeration value=\"CSISO151CUBA\" />\n      <xs:enumeration value=\"CSISO153GOST1976874\" />\n      <xs:enumeration value=\"CSISO646DANISH\" />\n      <xs:enumeration value=\"CSISO2022CN\" />\n      <xs:enumeration value=\"CSISO2022JP\" />\n      <xs:enumeration value=\"CSISO2022JP2\" />\n      <xs:enumeration value=\"CSISO2022KR\" />\n      <xs:enumeration value=\"CSISO2033\" />\n      <xs:enumeration value=\"CSISO5427CYRILLIC\" />\n      <xs:enumeration value=\"CSISO5427CYRILLIC1981\" />\n      <xs:enumeration value=\"CSISO5428GREEK\" />\n      <xs:enumeration value=\"CSISO10367BOX\" />\n      <xs:enumeration value=\"CSISOLATIN1\" />\n      <xs:enumeration value=\"CSISOLATIN2\" />\n      <xs:enumeration value=\"CSISOLATIN3\" />\n      <xs:enumeration value=\"CSISOLATIN4\" />\n      <xs:enumeration value=\"CSISOLATIN5\" />\n      <xs:enumeration value=\"CSISOLATIN6\" />\n      <xs:enumeration value=\"CSISOLATINARABIC\" />\n      <xs:enumeration value=\"CSISOLATINCYRILLIC\" />\n      <xs:enumeration value=\"CSISOLATINGREEK\" />\n      <xs:enumeration value=\"CSISOLATINHEBREW\" />\n      <xs:enumeration value=\"CSKOI8R\" />\n      <xs:enumeration value=\"CSKSC5636\" />\n      <xs:enumeration value=\"CSMACINTOSH\" />\n      <xs:enumeration value=\"CSNATSDANO\" />\n      <xs:enumeration value=\"CSNATSSEFI\" />\n      <xs:enumeration value=\"CSN_369103\" />\n      <xs:enumeration value=\"CSPC8CODEPAGE437\" />\n      <xs:enumeration value=\"CSPC775BALTIC\" />\n      <xs:enumeration value=\"CSPC850MULTILINGUAL\" />\n      <xs:enumeration value=\"CSPC862LATINHEBREW\" />\n      <xs:enumeration value=\"CSPCP852\" />\n      <xs:enumeration value=\"CSSHIFTJIS\" />\n      <xs:enumeration value=\"CSUCS4\" />\n      <xs:enumeration value=\"CSUNICODE\" />\n      <xs:enumeration value=\"CSWINDOWS31J\" />\n      <xs:enumeration value=\"CUBA\" />\n      <xs:enumeration value=\"CWI-2\" />\n      <xs:enumeration value=\"CWI\" />\n      <xs:enumeration value=\"CYRILLIC\" />\n      <xs:enumeration value=\"DE\" />\n      <xs:enumeration value=\"DEC-MCS\" />\n      <xs:enumeration value=\"DEC\" />\n      <xs:enumeration value=\"DECMCS\" />\n      <xs:enumeration value=\"DIN_66003\" />\n      <xs:enumeration value=\"DK\" />\n      <xs:enumeration value=\"DS2089\" />\n      <xs:enumeration value=\"DS_2089\" />\n      <xs:enumeration value=\"E13B\" />\n      <xs:enumeration value=\"EBCDIC-AT-DE-A\" />\n      <xs:enumeration value=\"EBCDIC-AT-DE\" />\n      <xs:enumeration value=\"EBCDIC-BE\" />\n      <xs:enumeration value=\"EBCDIC-BR\" />\n      <xs:enumeration value=\"EBCDIC-CA-FR\" />\n      <xs:enumeration value=\"EBCDIC-CP-AR1\" />\n      <xs:enumeration value=\"EBCDIC-CP-AR2\" />\n      <xs:enumeration value=\"EBCDIC-CP-BE\" />\n      <xs:enumeration value=\"EBCDIC-CP-CA\" />\n      <xs:enumeration value=\"EBCDIC-CP-CH\" />\n      <xs:enumeration value=\"EBCDIC-CP-DK\" />\n      <xs:enumeration value=\"EBCDIC-CP-ES\" />\n      <xs:enumeration value=\"EBCDIC-CP-FI\" />\n      <xs:enumeration value=\"EBCDIC-CP-FR\" />\n      <xs:enumeration value=\"EBCDIC-CP-GB\" />\n      <xs:enumeration value=\"EBCDIC-CP-GR\" />\n      <xs:enumeration value=\"EBCDIC-CP-HE\" />\n      <xs:enumeration value=\"EBCDIC-CP-IS\" />\n      <xs:enumeration value=\"EBCDIC-CP-IT\" />\n      <xs:enumeration value=\"EBCDIC-CP-NL\" />\n      <xs:enumeration value=\"EBCDIC-CP-NO\" />\n      <xs:enumeration value=\"EBCDIC-CP-ROECE\" />\n      <xs:enumeration value=\"EBCDIC-CP-SE\" />\n      <xs:enumeration value=\"EBCDIC-CP-TR\" />\n      <xs:enumeration value=\"EBCDIC-CP-US\" />\n      <xs:enumeration value=\"EBCDIC-CP-WT\" />\n      <xs:enumeration value=\"EBCDIC-CP-YU\" />\n      <xs:enumeration value=\"EBCDIC-CYRILLIC\" />\n      <xs:enumeration value=\"EBCDIC-DK-NO-A\" />\n      <xs:enumeration value=\"EBCDIC-DK-NO\" />\n      <xs:enumeration value=\"EBCDIC-ES-A\" />\n      <xs:enumeration value=\"EBCDIC-ES-S\" />\n      <xs:enumeration value=\"EBCDIC-ES\" />\n      <xs:enumeration value=\"EBCDIC-FI-SE-A\" />\n      <xs:enumeration value=\"EBCDIC-FI-SE\" />\n      <xs:enumeration value=\"EBCDIC-FR\" />\n      <xs:enumeration value=\"EBCDIC-GREEK\" />\n      <xs:enumeration value=\"EBCDIC-INT\" />\n      <xs:enumeration value=\"EBCDIC-INT1\" />\n      <xs:enumeration value=\"EBCDIC-IS-FRISS\" />\n      <xs:enumeration value=\"EBCDIC-IT\" />\n      <xs:enumeration value=\"EBCDIC-JP-E\" />\n      <xs:enumeration value=\"EBCDIC-JP-KANA\" />\n      <xs:enumeration value=\"EBCDIC-PT\" />\n      <xs:enumeration value=\"EBCDIC-UK\" />\n      <xs:enumeration value=\"EBCDIC-US\" />\n      <xs:enumeration value=\"EBCDICATDE\" />\n      <xs:enumeration value=\"EBCDICATDEA\" />\n      <xs:enumeration value=\"EBCDICCAFR\" />\n      <xs:enumeration value=\"EBCDICDKNO\" />\n      <xs:enumeration value=\"EBCDICDKNOA\" />\n      <xs:enumeration value=\"EBCDICES\" />\n      <xs:enumeration value=\"EBCDICESA\" />\n      <xs:enumeration value=\"EBCDICESS\" />\n      <xs:enumeration value=\"EBCDICFISE\" />\n      <xs:enumeration value=\"EBCDICFISEA\" />\n      <xs:enumeration value=\"EBCDICFR\" />\n      <xs:enumeration value=\"EBCDICISFRISS\" />\n      <xs:enumeration value=\"EBCDICIT\" />\n      <xs:enumeration value=\"EBCDICPT\" />\n      <xs:enumeration value=\"EBCDICUK\" />\n      <xs:enumeration value=\"EBCDICUS\" />\n      <xs:enumeration value=\"ECMA-114\" />\n      <xs:enumeration value=\"ECMA-118\" />\n      <xs:enumeration value=\"ECMA-128\" />\n      <xs:enumeration value=\"ECMA-CYRILLIC\" />\n      <xs:enumeration value=\"ECMACYRILLIC\" />\n      <xs:enumeration value=\"ELOT_928\" />\n      <xs:enumeration value=\"ES\" />\n      <xs:enumeration value=\"ES2\" />\n      <xs:enumeration value=\"EUC-CN\" />\n      <xs:enumeration value=\"EUC-JISX0213\" />\n      <xs:enumeration value=\"EUC-JP-MS\" />\n      <xs:enumeration value=\"EUC-JP\" />\n      <xs:enumeration value=\"EUC-KR\" />\n      <xs:enumeration value=\"EUC-TW\" />\n      <xs:enumeration value=\"EUCCN\" />\n      <xs:enumeration value=\"EUCJP-MS\" />\n      <xs:enumeration value=\"EUCJP-OPEN\" />\n      <xs:enumeration value=\"EUCJP-WIN\" />\n      <xs:enumeration value=\"EUCJP\" />\n      <xs:enumeration value=\"EUCKR\" />\n      <xs:enumeration value=\"EUCTW\" />\n      <xs:enumeration value=\"FI\" />\n      <xs:enumeration value=\"FR\" />\n      <xs:enumeration value=\"GB\" />\n      <xs:enumeration value=\"GB2312\" />\n      <xs:enumeration value=\"GB13000\" />\n      <xs:enumeration value=\"GB18030\" />\n      <xs:enumeration value=\"GBK\" />\n      <xs:enumeration value=\"GB_1988-80\" />\n      <xs:enumeration value=\"GB_198880\" />\n      <xs:enumeration value=\"GEORGIAN-ACADEMY\" />\n      <xs:enumeration value=\"GEORGIAN-PS\" />\n      <xs:enumeration value=\"GOST_19768-74\" />\n      <xs:enumeration value=\"GOST_19768\" />\n      <xs:enumeration value=\"GOST_1976874\" />\n      <xs:enumeration value=\"GREEK-CCITT\" />\n      <xs:enumeration value=\"GREEK\" />\n      <xs:enumeration value=\"GREEK7-OLD\" />\n      <xs:enumeration value=\"GREEK7\" />\n      <xs:enumeration value=\"GREEK7OLD\" />\n      <xs:enumeration value=\"GREEK8\" />\n      <xs:enumeration value=\"GREEKCCITT\" />\n      <xs:enumeration value=\"HEBREW\" />\n      <xs:enumeration value=\"HP-GREEK8\" />\n      <xs:enumeration value=\"HP-ROMAN8\" />\n      <xs:enumeration value=\"HP-ROMAN9\" />\n      <xs:enumeration value=\"HP-THAI8\" />\n      <xs:enumeration value=\"HP-TURKISH8\" />\n      <xs:enumeration value=\"HPGREEK8\" />\n      <xs:enumeration value=\"HPROMAN8\" />\n      <xs:enumeration value=\"HPROMAN9\" />\n      <xs:enumeration value=\"HPTHAI8\" />\n      <xs:enumeration value=\"HPTURKISH8\" />\n      <xs:enumeration value=\"HU\" />\n      <xs:enumeration value=\"IBM-803\" />\n      <xs:enumeration value=\"IBM-856\" />\n      <xs:enumeration value=\"IBM-901\" />\n      <xs:enumeration value=\"IBM-902\" />\n      <xs:enumeration value=\"IBM-921\" />\n      <xs:enumeration value=\"IBM-922\" />\n      <xs:enumeration value=\"IBM-930\" />\n      <xs:enumeration value=\"IBM-932\" />\n      <xs:enumeration value=\"IBM-933\" />\n      <xs:enumeration value=\"IBM-935\" />\n      <xs:enumeration value=\"IBM-937\" />\n      <xs:enumeration value=\"IBM-939\" />\n      <xs:enumeration value=\"IBM-943\" />\n      <xs:enumeration value=\"IBM-1008\" />\n      <xs:enumeration value=\"IBM-1025\" />\n      <xs:enumeration value=\"IBM-1046\" />\n      <xs:enumeration value=\"IBM-1047\" />\n      <xs:enumeration value=\"IBM-1097\" />\n      <xs:enumeration value=\"IBM-1112\" />\n      <xs:enumeration value=\"IBM-1122\" />\n      <xs:enumeration value=\"IBM-1123\" />\n      <xs:enumeration value=\"IBM-1124\" />\n      <xs:enumeration value=\"IBM-1129\" />\n      <xs:enumeration value=\"IBM-1130\" />\n      <xs:enumeration value=\"IBM-1132\" />\n      <xs:enumeration value=\"IBM-1133\" />\n      <xs:enumeration value=\"IBM-1137\" />\n      <xs:enumeration value=\"IBM-1140\" />\n      <xs:enumeration value=\"IBM-1141\" />\n      <xs:enumeration value=\"IBM-1142\" />\n      <xs:enumeration value=\"IBM-1143\" />\n      <xs:enumeration value=\"IBM-1144\" />\n      <xs:enumeration value=\"IBM-1145\" />\n      <xs:enumeration value=\"IBM-1146\" />\n      <xs:enumeration value=\"IBM-1147\" />\n      <xs:enumeration value=\"IBM-1148\" />\n      <xs:enumeration value=\"IBM-1149\" />\n      <xs:enumeration value=\"IBM-1153\" />\n      <xs:enumeration value=\"IBM-1154\" />\n      <xs:enumeration value=\"IBM-1155\" />\n      <xs:enumeration value=\"IBM-1156\" />\n      <xs:enumeration value=\"IBM-1157\" />\n      <xs:enumeration value=\"IBM-1158\" />\n      <xs:enumeration value=\"IBM-1160\" />\n      <xs:enumeration value=\"IBM-1161\" />\n      <xs:enumeration value=\"IBM-1162\" />\n      <xs:enumeration value=\"IBM-1163\" />\n      <xs:enumeration value=\"IBM-1164\" />\n      <xs:enumeration value=\"IBM-1166\" />\n      <xs:enumeration value=\"IBM-1167\" />\n      <xs:enumeration value=\"IBM-1364\" />\n      <xs:enumeration value=\"IBM-1371\" />\n      <xs:enumeration value=\"IBM-1388\" />\n      <xs:enumeration value=\"IBM-1390\" />\n      <xs:enumeration value=\"IBM-1399\" />\n      <xs:enumeration value=\"IBM-4517\" />\n      <xs:enumeration value=\"IBM-4899\" />\n      <xs:enumeration value=\"IBM-4909\" />\n      <xs:enumeration value=\"IBM-4971\" />\n      <xs:enumeration value=\"IBM-5347\" />\n      <xs:enumeration value=\"IBM-9030\" />\n      <xs:enumeration value=\"IBM-9066\" />\n      <xs:enumeration value=\"IBM-9448\" />\n      <xs:enumeration value=\"IBM-12712\" />\n      <xs:enumeration value=\"IBM-16804\" />\n      <xs:enumeration value=\"IBM037\" />\n      <xs:enumeration value=\"IBM038\" />\n      <xs:enumeration value=\"IBM256\" />\n      <xs:enumeration value=\"IBM273\" />\n      <xs:enumeration value=\"IBM274\" />\n      <xs:enumeration value=\"IBM275\" />\n      <xs:enumeration value=\"IBM277\" />\n      <xs:enumeration value=\"IBM278\" />\n      <xs:enumeration value=\"IBM280\" />\n      <xs:enumeration value=\"IBM281\" />\n      <xs:enumeration value=\"IBM284\" />\n      <xs:enumeration value=\"IBM285\" />\n      <xs:enumeration value=\"IBM290\" />\n      <xs:enumeration value=\"IBM297\" />\n      <xs:enumeration value=\"IBM367\" />\n      <xs:enumeration value=\"IBM420\" />\n      <xs:enumeration value=\"IBM423\" />\n      <xs:enumeration value=\"IBM424\" />\n      <xs:enumeration value=\"IBM437\" />\n      <xs:enumeration value=\"IBM500\" />\n      <xs:enumeration value=\"IBM775\" />\n      <xs:enumeration value=\"IBM803\" />\n      <xs:enumeration value=\"IBM813\" />\n      <xs:enumeration value=\"IBM819\" />\n      <xs:enumeration value=\"IBM848\" />\n      <xs:enumeration value=\"IBM850\" />\n      <xs:enumeration value=\"IBM851\" />\n      <xs:enumeration value=\"IBM852\" />\n      <xs:enumeration value=\"IBM855\" />\n      <xs:enumeration value=\"IBM856\" />\n      <xs:enumeration value=\"IBM857\" />\n      <xs:enumeration value=\"IBM860\" />\n      <xs:enumeration value=\"IBM861\" />\n      <xs:enumeration value=\"IBM862\" />\n      <xs:enumeration value=\"IBM863\" />\n      <xs:enumeration value=\"IBM864\" />\n      <xs:enumeration value=\"IBM865\" />\n      <xs:enumeration value=\"IBM866\" />\n      <xs:enumeration value=\"IBM866NAV\" />\n      <xs:enumeration value=\"IBM868\" />\n      <xs:enumeration value=\"IBM869\" />\n      <xs:enumeration value=\"IBM870\" />\n      <xs:enumeration value=\"IBM871\" />\n      <xs:enumeration value=\"IBM874\" />\n      <xs:enumeration value=\"IBM875\" />\n      <xs:enumeration value=\"IBM880\" />\n      <xs:enumeration value=\"IBM891\" />\n      <xs:enumeration value=\"IBM901\" />\n      <xs:enumeration value=\"IBM902\" />\n      <xs:enumeration value=\"IBM903\" />\n      <xs:enumeration value=\"IBM904\" />\n      <xs:enumeration value=\"IBM905\" />\n      <xs:enumeration value=\"IBM912\" />\n      <xs:enumeration value=\"IBM915\" />\n      <xs:enumeration value=\"IBM916\" />\n      <xs:enumeration value=\"IBM918\" />\n      <xs:enumeration value=\"IBM920\" />\n      <xs:enumeration value=\"IBM921\" />\n      <xs:enumeration value=\"IBM922\" />\n      <xs:enumeration value=\"IBM930\" />\n      <xs:enumeration value=\"IBM932\" />\n      <xs:enumeration value=\"IBM933\" />\n      <xs:enumeration value=\"IBM935\" />\n      <xs:enumeration value=\"IBM937\" />\n      <xs:enumeration value=\"IBM939\" />\n      <xs:enumeration value=\"IBM943\" />\n      <xs:enumeration value=\"IBM1004\" />\n      <xs:enumeration value=\"IBM1008\" />\n      <xs:enumeration value=\"IBM1025\" />\n      <xs:enumeration value=\"IBM1026\" />\n      <xs:enumeration value=\"IBM1046\" />\n      <xs:enumeration value=\"IBM1047\" />\n      <xs:enumeration value=\"IBM1089\" />\n      <xs:enumeration value=\"IBM1097\" />\n      <xs:enumeration value=\"IBM1112\" />\n      <xs:enumeration value=\"IBM1122\" />\n      <xs:enumeration value=\"IBM1123\" />\n      <xs:enumeration value=\"IBM1124\" />\n      <xs:enumeration value=\"IBM1129\" />\n      <xs:enumeration value=\"IBM1130\" />\n      <xs:enumeration value=\"IBM1132\" />\n      <xs:enumeration value=\"IBM1133\" />\n      <xs:enumeration value=\"IBM1137\" />\n      <xs:enumeration value=\"IBM1140\" />\n      <xs:enumeration value=\"IBM1141\" />\n      <xs:enumeration value=\"IBM1142\" />\n      <xs:enumeration value=\"IBM1143\" />\n      <xs:enumeration value=\"IBM1144\" />\n      <xs:enumeration value=\"IBM1145\" />\n      <xs:enumeration value=\"IBM1146\" />\n      <xs:enumeration value=\"IBM1147\" />\n      <xs:enumeration value=\"IBM1148\" />\n      <xs:enumeration value=\"IBM1149\" />\n      <xs:enumeration value=\"IBM1153\" />\n      <xs:enumeration value=\"IBM1154\" />\n      <xs:enumeration value=\"IBM1155\" />\n      <xs:enumeration value=\"IBM1156\" />\n      <xs:enumeration value=\"IBM1157\" />\n      <xs:enumeration value=\"IBM1158\" />\n      <xs:enumeration value=\"IBM1160\" />\n      <xs:enumeration value=\"IBM1161\" />\n      <xs:enumeration value=\"IBM1162\" />\n      <xs:enumeration value=\"IBM1163\" />\n      <xs:enumeration value=\"IBM1164\" />\n      <xs:enumeration value=\"IBM1166\" />\n      <xs:enumeration value=\"IBM1167\" />\n      <xs:enumeration value=\"IBM1364\" />\n      <xs:enumeration value=\"IBM1371\" />\n      <xs:enumeration value=\"IBM1388\" />\n      <xs:enumeration value=\"IBM1390\" />\n      <xs:enumeration value=\"IBM1399\" />\n      <xs:enumeration value=\"IBM4517\" />\n      <xs:enumeration value=\"IBM4899\" />\n      <xs:enumeration value=\"IBM4909\" />\n      <xs:enumeration value=\"IBM4971\" />\n      <xs:enumeration value=\"IBM5347\" />\n      <xs:enumeration value=\"IBM9030\" />\n      <xs:enumeration value=\"IBM9066\" />\n      <xs:enumeration value=\"IBM9448\" />\n      <xs:enumeration value=\"IBM12712\" />\n      <xs:enumeration value=\"IBM16804\" />\n      <xs:enumeration value=\"IEC_P27-1\" />\n      <xs:enumeration value=\"IEC_P271\" />\n      <xs:enumeration value=\"INIS-8\" />\n      <xs:enumeration value=\"INIS-CYRILLIC\" />\n      <xs:enumeration value=\"INIS\" />\n      <xs:enumeration value=\"INIS8\" />\n      <xs:enumeration value=\"INISCYRILLIC\" />\n      <xs:enumeration value=\"ISIRI-3342\" />\n      <xs:enumeration value=\"ISIRI3342\" />\n      <xs:enumeration value=\"ISO-2022-CN-EXT\" />\n      <xs:enumeration value=\"ISO-2022-CN\" />\n      <xs:enumeration value=\"ISO-2022-JP-2\" />\n      <xs:enumeration value=\"ISO-2022-JP-3\" />\n      <xs:enumeration value=\"ISO-2022-JP\" />\n      <xs:enumeration value=\"ISO-2022-KR\" />\n      <xs:enumeration value=\"ISO-8859-1\" />\n      <xs:enumeration value=\"ISO-8859-2\" />\n      <xs:enumeration value=\"ISO-8859-3\" />\n      <xs:enumeration value=\"ISO-8859-4\" />\n      <xs:enumeration value=\"ISO-8859-5\" />\n      <xs:enumeration value=\"ISO-8859-6\" />\n      <xs:enumeration value=\"ISO-8859-7\" />\n      <xs:enumeration value=\"ISO-8859-8\" />\n      <xs:enumeration value=\"ISO-8859-9\" />\n      <xs:enumeration value=\"ISO-8859-9E\" />\n      <xs:enumeration value=\"ISO-8859-10\" />\n      <xs:enumeration value=\"ISO-8859-11\" />\n      <xs:enumeration value=\"ISO-8859-13\" />\n      <xs:enumeration value=\"ISO-8859-14\" />\n      <xs:enumeration value=\"ISO-8859-15\" />\n      <xs:enumeration value=\"ISO-8859-16\" />\n      <xs:enumeration value=\"ISO-10646\" />\n      <xs:enumeration value=\"ISO-10646/UCS2/\" />\n      <xs:enumeration value=\"ISO-10646/UCS4/\" />\n      <xs:enumeration value=\"ISO-10646/UTF-8/\" />\n      <xs:enumeration value=\"ISO-10646/UTF8/\" />\n      <xs:enumeration value=\"ISO-CELTIC\" />\n      <xs:enumeration value=\"ISO-IR-4\" />\n      <xs:enumeration value=\"ISO-IR-6\" />\n      <xs:enumeration value=\"ISO-IR-8-1\" />\n      <xs:enumeration value=\"ISO-IR-9-1\" />\n      <xs:enumeration value=\"ISO-IR-10\" />\n      <xs:enumeration value=\"ISO-IR-11\" />\n      <xs:enumeration value=\"ISO-IR-14\" />\n      <xs:enumeration value=\"ISO-IR-15\" />\n      <xs:enumeration value=\"ISO-IR-16\" />\n      <xs:enumeration value=\"ISO-IR-17\" />\n      <xs:enumeration value=\"ISO-IR-18\" />\n      <xs:enumeration value=\"ISO-IR-19\" />\n      <xs:enumeration value=\"ISO-IR-21\" />\n      <xs:enumeration value=\"ISO-IR-25\" />\n      <xs:enumeration value=\"ISO-IR-27\" />\n      <xs:enumeration value=\"ISO-IR-37\" />\n      <xs:enumeration value=\"ISO-IR-49\" />\n      <xs:enumeration value=\"ISO-IR-50\" />\n      <xs:enumeration value=\"ISO-IR-51\" />\n      <xs:enumeration value=\"ISO-IR-54\" />\n      <xs:enumeration value=\"ISO-IR-55\" />\n      <xs:enumeration value=\"ISO-IR-57\" />\n      <xs:enumeration value=\"ISO-IR-60\" />\n      <xs:enumeration value=\"ISO-IR-61\" />\n      <xs:enumeration value=\"ISO-IR-69\" />\n      <xs:enumeration value=\"ISO-IR-84\" />\n      <xs:enumeration value=\"ISO-IR-85\" />\n      <xs:enumeration value=\"ISO-IR-86\" />\n      <xs:enumeration value=\"ISO-IR-88\" />\n      <xs:enumeration value=\"ISO-IR-89\" />\n      <xs:enumeration value=\"ISO-IR-90\" />\n      <xs:enumeration value=\"ISO-IR-92\" />\n      <xs:enumeration value=\"ISO-IR-98\" />\n      <xs:enumeration value=\"ISO-IR-99\" />\n      <xs:enumeration value=\"ISO-IR-100\" />\n      <xs:enumeration value=\"ISO-IR-101\" />\n      <xs:enumeration value=\"ISO-IR-103\" />\n      <xs:enumeration value=\"ISO-IR-109\" />\n      <xs:enumeration value=\"ISO-IR-110\" />\n      <xs:enumeration value=\"ISO-IR-111\" />\n      <xs:enumeration value=\"ISO-IR-121\" />\n      <xs:enumeration value=\"ISO-IR-122\" />\n      <xs:enumeration value=\"ISO-IR-126\" />\n      <xs:enumeration value=\"ISO-IR-127\" />\n      <xs:enumeration value=\"ISO-IR-138\" />\n      <xs:enumeration value=\"ISO-IR-139\" />\n      <xs:enumeration value=\"ISO-IR-141\" />\n      <xs:enumeration value=\"ISO-IR-143\" />\n      <xs:enumeration value=\"ISO-IR-144\" />\n      <xs:enumeration value=\"ISO-IR-148\" />\n      <xs:enumeration value=\"ISO-IR-150\" />\n      <xs:enumeration value=\"ISO-IR-151\" />\n      <xs:enumeration value=\"ISO-IR-153\" />\n      <xs:enumeration value=\"ISO-IR-155\" />\n      <xs:enumeration value=\"ISO-IR-156\" />\n      <xs:enumeration value=\"ISO-IR-157\" />\n      <xs:enumeration value=\"ISO-IR-166\" />\n      <xs:enumeration value=\"ISO-IR-179\" />\n      <xs:enumeration value=\"ISO-IR-193\" />\n      <xs:enumeration value=\"ISO-IR-197\" />\n      <xs:enumeration value=\"ISO-IR-199\" />\n      <xs:enumeration value=\"ISO-IR-203\" />\n      <xs:enumeration value=\"ISO-IR-209\" />\n      <xs:enumeration value=\"ISO-IR-226\" />\n      <xs:enumeration value=\"ISO/TR_11548-1/\" />\n      <xs:enumeration value=\"ISO646-CA\" />\n      <xs:enumeration value=\"ISO646-CA2\" />\n      <xs:enumeration value=\"ISO646-CN\" />\n      <xs:enumeration value=\"ISO646-CU\" />\n      <xs:enumeration value=\"ISO646-DE\" />\n      <xs:enumeration value=\"ISO646-DK\" />\n      <xs:enumeration value=\"ISO646-ES\" />\n      <xs:enumeration value=\"ISO646-ES2\" />\n      <xs:enumeration value=\"ISO646-FI\" />\n      <xs:enumeration value=\"ISO646-FR\" />\n      <xs:enumeration value=\"ISO646-FR1\" />\n      <xs:enumeration value=\"ISO646-GB\" />\n      <xs:enumeration value=\"ISO646-HU\" />\n      <xs:enumeration value=\"ISO646-IT\" />\n      <xs:enumeration value=\"ISO646-JP-OCR-B\" />\n      <xs:enumeration value=\"ISO646-JP\" />\n      <xs:enumeration value=\"ISO646-KR\" />\n      <xs:enumeration value=\"ISO646-NO\" />\n      <xs:enumeration value=\"ISO646-NO2\" />\n      <xs:enumeration value=\"ISO646-PT\" />\n      <xs:enumeration value=\"ISO646-PT2\" />\n      <xs:enumeration value=\"ISO646-SE\" />\n      <xs:enumeration value=\"ISO646-SE2\" />\n      <xs:enumeration value=\"ISO646-US\" />\n      <xs:enumeration value=\"ISO646-YU\" />\n      <xs:enumeration value=\"ISO2022CN\" />\n      <xs:enumeration value=\"ISO2022CNEXT\" />\n      <xs:enumeration value=\"ISO2022JP\" />\n      <xs:enumeration value=\"ISO2022JP2\" />\n      <xs:enumeration value=\"ISO2022KR\" />\n      <xs:enumeration value=\"ISO6937\" />\n      <xs:enumeration value=\"ISO8859-1\" />\n      <xs:enumeration value=\"ISO8859-2\" />\n      <xs:enumeration value=\"ISO8859-3\" />\n      <xs:enumeration value=\"ISO8859-4\" />\n      <xs:enumeration value=\"ISO8859-5\" />\n      <xs:enumeration value=\"ISO8859-6\" />\n      <xs:enumeration value=\"ISO8859-7\" />\n      <xs:enumeration value=\"ISO8859-8\" />\n      <xs:enumeration value=\"ISO8859-9\" />\n      <xs:enumeration value=\"ISO8859-9E\" />\n      <xs:enumeration value=\"ISO8859-10\" />\n      <xs:enumeration value=\"ISO8859-11\" />\n      <xs:enumeration value=\"ISO8859-13\" />\n      <xs:enumeration value=\"ISO8859-14\" />\n      <xs:enumeration value=\"ISO8859-15\" />\n      <xs:enumeration value=\"ISO8859-16\" />\n      <xs:enumeration value=\"ISO11548-1\" />\n      <xs:enumeration value=\"ISO88591\" />\n      <xs:enumeration value=\"ISO88592\" />\n      <xs:enumeration value=\"ISO88593\" />\n      <xs:enumeration value=\"ISO88594\" />\n      <xs:enumeration value=\"ISO88595\" />\n      <xs:enumeration value=\"ISO88596\" />\n      <xs:enumeration value=\"ISO88597\" />\n      <xs:enumeration value=\"ISO88598\" />\n      <xs:enumeration value=\"ISO88599\" />\n      <xs:enumeration value=\"ISO88599E\" />\n      <xs:enumeration value=\"ISO885910\" />\n      <xs:enumeration value=\"ISO885911\" />\n      <xs:enumeration value=\"ISO885913\" />\n      <xs:enumeration value=\"ISO885914\" />\n      <xs:enumeration value=\"ISO885915\" />\n      <xs:enumeration value=\"ISO885916\" />\n      <xs:enumeration value=\"ISO_646.IRV:1991\" />\n      <xs:enumeration value=\"ISO_2033-1983\" />\n      <xs:enumeration value=\"ISO_2033\" />\n      <xs:enumeration value=\"ISO_5427-EXT\" />\n      <xs:enumeration value=\"ISO_5427\" />\n      <xs:enumeration value=\"ISO_5427:1981\" />\n      <xs:enumeration value=\"ISO_5427EXT\" />\n      <xs:enumeration value=\"ISO_5428\" />\n      <xs:enumeration value=\"ISO_5428:1980\" />\n      <xs:enumeration value=\"ISO_6937-2\" />\n      <xs:enumeration value=\"ISO_6937-2:1983\" />\n      <xs:enumeration value=\"ISO_6937\" />\n      <xs:enumeration value=\"ISO_6937:1992\" />\n      <xs:enumeration value=\"ISO_8859-1\" />\n      <xs:enumeration value=\"ISO_8859-1:1987\" />\n      <xs:enumeration value=\"ISO_8859-2\" />\n      <xs:enumeration value=\"ISO_8859-2:1987\" />\n      <xs:enumeration value=\"ISO_8859-3\" />\n      <xs:enumeration value=\"ISO_8859-3:1988\" />\n      <xs:enumeration value=\"ISO_8859-4\" />\n      <xs:enumeration value=\"ISO_8859-4:1988\" />\n      <xs:enumeration value=\"ISO_8859-5\" />\n      <xs:enumeration value=\"ISO_8859-5:1988\" />\n      <xs:enumeration value=\"ISO_8859-6\" />\n      <xs:enumeration value=\"ISO_8859-6:1987\" />\n      <xs:enumeration value=\"ISO_8859-7\" />\n      <xs:enumeration value=\"ISO_8859-7:1987\" />\n      <xs:enumeration value=\"ISO_8859-7:2003\" />\n      <xs:enumeration value=\"ISO_8859-8\" />\n      <xs:enumeration value=\"ISO_8859-8:1988\" />\n      <xs:enumeration value=\"ISO_8859-9\" />\n      <xs:enumeration value=\"ISO_8859-9:1989\" />\n      <xs:enumeration value=\"ISO_8859-9E\" />\n      <xs:enumeration value=\"ISO_8859-10\" />\n      <xs:enumeration value=\"ISO_8859-10:1992\" />\n      <xs:enumeration value=\"ISO_8859-14\" />\n      <xs:enumeration value=\"ISO_8859-14:1998\" />\n      <xs:enumeration value=\"ISO_8859-15\" />\n      <xs:enumeration value=\"ISO_8859-15:1998\" />\n      <xs:enumeration value=\"ISO_8859-16\" />\n      <xs:enumeration value=\"ISO_8859-16:2001\" />\n      <xs:enumeration value=\"ISO_9036\" />\n      <xs:enumeration value=\"ISO_10367-BOX\" />\n      <xs:enumeration value=\"ISO_10367BOX\" />\n      <xs:enumeration value=\"ISO_11548-1\" />\n      <xs:enumeration value=\"ISO_69372\" />\n      <xs:enumeration value=\"IT\" />\n      <xs:enumeration value=\"JIS_C6220-1969-RO\" />\n      <xs:enumeration value=\"JIS_C6229-1984-B\" />\n      <xs:enumeration value=\"JIS_C62201969RO\" />\n      <xs:enumeration value=\"JIS_C62291984B\" />\n      <xs:enumeration value=\"JOHAB\" />\n      <xs:enumeration value=\"JP-OCR-B\" />\n      <xs:enumeration value=\"JP\" />\n      <xs:enumeration value=\"JS\" />\n      <xs:enumeration value=\"JUS_I.B1.002\" />\n      <xs:enumeration value=\"KOI-7\" />\n      <xs:enumeration value=\"KOI-8\" />\n      <xs:enumeration value=\"KOI8-R\" />\n      <xs:enumeration value=\"KOI8-RU\" />\n      <xs:enumeration value=\"KOI8-T\" />\n      <xs:enumeration value=\"KOI8-U\" />\n      <xs:enumeration value=\"KOI8\" />\n      <xs:enumeration value=\"KOI8R\" />\n      <xs:enumeration value=\"KOI8U\" />\n      <xs:enumeration value=\"KSC5636\" />\n      <xs:enumeration value=\"L1\" />\n      <xs:enumeration value=\"L2\" />\n      <xs:enumeration value=\"L3\" />\n      <xs:enumeration value=\"L4\" />\n      <xs:enumeration value=\"L5\" />\n      <xs:enumeration value=\"L6\" />\n      <xs:enumeration value=\"L7\" />\n      <xs:enumeration value=\"L8\" />\n      <xs:enumeration value=\"L10\" />\n      <xs:enumeration value=\"LATIN-9\" />\n      <xs:enumeration value=\"LATIN-GREEK-1\" />\n      <xs:enumeration value=\"LATIN-GREEK\" />\n      <xs:enumeration value=\"LATIN1\" />\n      <xs:enumeration value=\"LATIN2\" />\n      <xs:enumeration value=\"LATIN3\" />\n      <xs:enumeration value=\"LATIN4\" />\n      <xs:enumeration value=\"LATIN5\" />\n      <xs:enumeration value=\"LATIN6\" />\n      <xs:enumeration value=\"LATIN7\" />\n      <xs:enumeration value=\"LATIN8\" />\n      <xs:enumeration value=\"LATIN9\" />\n      <xs:enumeration value=\"LATIN10\" />\n      <xs:enumeration value=\"LATINGREEK\" />\n      <xs:enumeration value=\"LATINGREEK1\" />\n      <xs:enumeration value=\"MAC-CENTRALEUROPE\" />\n      <xs:enumeration value=\"MAC-CYRILLIC\" />\n      <xs:enumeration value=\"MAC-IS\" />\n      <xs:enumeration value=\"MAC-SAMI\" />\n      <xs:enumeration value=\"MAC-UK\" />\n      <xs:enumeration value=\"MAC\" />\n      <xs:enumeration value=\"MACCYRILLIC\" />\n      <xs:enumeration value=\"MACINTOSH\" />\n      <xs:enumeration value=\"MACIS\" />\n      <xs:enumeration value=\"MACUK\" />\n      <xs:enumeration value=\"MACUKRAINIAN\" />\n      <xs:enumeration value=\"MIK\" />\n      <xs:enumeration value=\"MS-ANSI\" />\n      <xs:enumeration value=\"MS-ARAB\" />\n      <xs:enumeration value=\"MS-CYRL\" />\n      <xs:enumeration value=\"MS-EE\" />\n      <xs:enumeration value=\"MS-GREEK\" />\n      <xs:enumeration value=\"MS-HEBR\" />\n      <xs:enumeration value=\"MS-MAC-CYRILLIC\" />\n      <xs:enumeration value=\"MS-TURK\" />\n      <xs:enumeration value=\"MS932\" />\n      <xs:enumeration value=\"MS936\" />\n      <xs:enumeration value=\"MSCP949\" />\n      <xs:enumeration value=\"MSCP1361\" />\n      <xs:enumeration value=\"MSMACCYRILLIC\" />\n      <xs:enumeration value=\"MSZ_7795.3\" />\n      <xs:enumeration value=\"MS_KANJI\" />\n      <xs:enumeration value=\"NAPLPS\" />\n      <xs:enumeration value=\"NATS-DANO\" />\n      <xs:enumeration value=\"NATS-SEFI\" />\n      <xs:enumeration value=\"NATSDANO\" />\n      <xs:enumeration value=\"NATSSEFI\" />\n      <xs:enumeration value=\"NC_NC0010\" />\n      <xs:enumeration value=\"NC_NC00-10\" />\n      <xs:enumeration value=\"NC_NC00-10:81\" />\n      <xs:enumeration value=\"NF_Z_62-010\" />\n      <xs:enumeration value=\"NF_Z_62-010_(1973)\" />\n      <xs:enumeration value=\"NF_Z_62-010_1973\" />\n      <xs:enumeration value=\"NF_Z_62010\" />\n      <xs:enumeration value=\"NF_Z_62010_1973\" />\n      <xs:enumeration value=\"NO\" />\n      <xs:enumeration value=\"NO2\" />\n      <xs:enumeration value=\"NS_4551-1\" />\n      <xs:enumeration value=\"NS_4551-2\" />\n      <xs:enumeration value=\"NS_45511\" />\n      <xs:enumeration value=\"NS_45512\" />\n      <xs:enumeration value=\"OS2LATIN1\" />\n      <xs:enumeration value=\"OSF00010001\" />\n      <xs:enumeration value=\"OSF00010002\" />\n      <xs:enumeration value=\"OSF00010003\" />\n      <xs:enumeration value=\"OSF00010004\" />\n      <xs:enumeration value=\"OSF00010005\" />\n      <xs:enumeration value=\"OSF00010006\" />\n      <xs:enumeration value=\"OSF00010007\" />\n      <xs:enumeration value=\"OSF00010008\" />\n      <xs:enumeration value=\"OSF00010009\" />\n      <xs:enumeration value=\"OSF0001000A\" />\n      <xs:enumeration value=\"OSF00010020\" />\n      <xs:enumeration value=\"OSF00010100\" />\n      <xs:enumeration value=\"OSF00010101\" />\n      <xs:enumeration value=\"OSF00010102\" />\n      <xs:enumeration value=\"OSF00010104\" />\n      <xs:enumeration value=\"OSF00010105\" />\n      <xs:enumeration value=\"OSF00010106\" />\n      <xs:enumeration value=\"OSF00030010\" />\n      <xs:enumeration value=\"OSF0004000A\" />\n      <xs:enumeration value=\"OSF0005000A\" />\n      <xs:enumeration value=\"OSF05010001\" />\n      <xs:enumeration value=\"OSF100201A4\" />\n      <xs:enumeration value=\"OSF100201A8\" />\n      <xs:enumeration value=\"OSF100201B5\" />\n      <xs:enumeration value=\"OSF100201F4\" />\n      <xs:enumeration value=\"OSF100203B5\" />\n      <xs:enumeration value=\"OSF1002011C\" />\n      <xs:enumeration value=\"OSF1002011D\" />\n      <xs:enumeration value=\"OSF1002035D\" />\n      <xs:enumeration value=\"OSF1002035E\" />\n      <xs:enumeration value=\"OSF1002035F\" />\n      <xs:enumeration value=\"OSF1002036B\" />\n      <xs:enumeration value=\"OSF1002037B\" />\n      <xs:enumeration value=\"OSF10010001\" />\n      <xs:enumeration value=\"OSF10010004\" />\n      <xs:enumeration value=\"OSF10010006\" />\n      <xs:enumeration value=\"OSF10020025\" />\n      <xs:enumeration value=\"OSF10020111\" />\n      <xs:enumeration value=\"OSF10020115\" />\n      <xs:enumeration value=\"OSF10020116\" />\n      <xs:enumeration value=\"OSF10020118\" />\n      <xs:enumeration value=\"OSF10020122\" />\n      <xs:enumeration value=\"OSF10020129\" />\n      <xs:enumeration value=\"OSF10020352\" />\n      <xs:enumeration value=\"OSF10020354\" />\n      <xs:enumeration value=\"OSF10020357\" />\n      <xs:enumeration value=\"OSF10020359\" />\n      <xs:enumeration value=\"OSF10020360\" />\n      <xs:enumeration value=\"OSF10020364\" />\n      <xs:enumeration value=\"OSF10020365\" />\n      <xs:enumeration value=\"OSF10020366\" />\n      <xs:enumeration value=\"OSF10020367\" />\n      <xs:enumeration value=\"OSF10020370\" />\n      <xs:enumeration value=\"OSF10020387\" />\n      <xs:enumeration value=\"OSF10020388\" />\n      <xs:enumeration value=\"OSF10020396\" />\n      <xs:enumeration value=\"OSF10020402\" />\n      <xs:enumeration value=\"OSF10020417\" />\n      <xs:enumeration value=\"PT\" />\n      <xs:enumeration value=\"PT2\" />\n      <xs:enumeration value=\"PT154\" />\n      <xs:enumeration value=\"R8\" />\n      <xs:enumeration value=\"R9\" />\n      <xs:enumeration value=\"RK1048\" />\n      <xs:enumeration value=\"ROMAN8\" />\n      <xs:enumeration value=\"ROMAN9\" />\n      <xs:enumeration value=\"RUSCII\" />\n      <xs:enumeration value=\"SE\" />\n      <xs:enumeration value=\"SE2\" />\n      <xs:enumeration value=\"SEN_850200_B\" />\n      <xs:enumeration value=\"SEN_850200_C\" />\n      <xs:enumeration value=\"SHIFT-JIS\" />\n      <xs:enumeration value=\"SHIFT_JIS\" />\n      <xs:enumeration value=\"SHIFT_JISX0213\" />\n      <xs:enumeration value=\"SJIS-OPEN\" />\n      <xs:enumeration value=\"SJIS-WIN\" />\n      <xs:enumeration value=\"SJIS\" />\n      <xs:enumeration value=\"SS636127\" />\n      <xs:enumeration value=\"STRK1048-2002\" />\n      <xs:enumeration value=\"ST_SEV_358-88\" />\n      <xs:enumeration value=\"T.61-8BIT\" />\n      <xs:enumeration value=\"T.61\" />\n      <xs:enumeration value=\"T.618BIT\" />\n      <xs:enumeration value=\"TCVN-5712\" />\n      <xs:enumeration value=\"TCVN\" />\n      <xs:enumeration value=\"TCVN5712-1\" />\n      <xs:enumeration value=\"TCVN5712-1:1993\" />\n      <xs:enumeration value=\"THAI8\" />\n      <xs:enumeration value=\"TIS-620\" />\n      <xs:enumeration value=\"TIS620-0\" />\n      <xs:enumeration value=\"TIS620.2529-1\" />\n      <xs:enumeration value=\"TIS620.2533-0\" />\n      <xs:enumeration value=\"TIS620\" />\n      <xs:enumeration value=\"TS-5881\" />\n      <xs:enumeration value=\"TSCII\" />\n      <xs:enumeration value=\"TURKISH8\" />\n      <xs:enumeration value=\"UCS-2\" />\n      <xs:enumeration value=\"UCS-2BE\" />\n      <xs:enumeration value=\"UCS-2LE\" />\n      <xs:enumeration value=\"UCS-4\" />\n      <xs:enumeration value=\"UCS-4BE\" />\n      <xs:enumeration value=\"UCS-4LE\" />\n      <xs:enumeration value=\"UCS2\" />\n      <xs:enumeration value=\"UCS4\" />\n      <xs:enumeration value=\"UHC\" />\n      <xs:enumeration value=\"UJIS\" />\n      <xs:enumeration value=\"UK\" />\n      <xs:enumeration value=\"UNICODE\" />\n      <xs:enumeration value=\"UNICODEBIG\" />\n      <xs:enumeration value=\"UNICODELITTLE\" />\n      <xs:enumeration value=\"US-ASCII\" />\n      <xs:enumeration value=\"US\" />\n      <xs:enumeration value=\"UTF-7\" />\n      <xs:enumeration value=\"UTF-8\" />\n      <xs:enumeration value=\"UTF-16\" />\n      <xs:enumeration value=\"UTF-16BE\" />\n      <xs:enumeration value=\"UTF-16LE\" />\n      <xs:enumeration value=\"UTF-32\" />\n      <xs:enumeration value=\"UTF-32BE\" />\n      <xs:enumeration value=\"UTF-32LE\" />\n      <xs:enumeration value=\"UTF7\" />\n      <xs:enumeration value=\"UTF8\" />\n      <xs:enumeration value=\"UTF16\" />\n      <xs:enumeration value=\"UTF16BE\" />\n      <xs:enumeration value=\"UTF16LE\" />\n      <xs:enumeration value=\"UTF32\" />\n      <xs:enumeration value=\"UTF32BE\" />\n      <xs:enumeration value=\"UTF32LE\" />\n      <xs:enumeration value=\"VISCII\" />\n      <xs:enumeration value=\"WCHAR_T\" />\n      <xs:enumeration value=\"WIN-SAMI-2\" />\n      <xs:enumeration value=\"WINBALTRIM\" />\n      <xs:enumeration value=\"WINDOWS-31J\" />\n      <xs:enumeration value=\"WINDOWS-874\" />\n      <xs:enumeration value=\"WINDOWS-936\" />\n      <xs:enumeration value=\"WINDOWS-1250\" />\n      <xs:enumeration value=\"WINDOWS-1251\" />\n      <xs:enumeration value=\"WINDOWS-1252\" />\n      <xs:enumeration value=\"WINDOWS-1253\" />\n      <xs:enumeration value=\"WINDOWS-1254\" />\n      <xs:enumeration value=\"WINDOWS-1255\" />\n      <xs:enumeration value=\"WINDOWS-1256\" />\n      <xs:enumeration value=\"WINDOWS-1257\" />\n      <xs:enumeration value=\"WINDOWS-1258\" />\n      <xs:enumeration value=\"WINSAMI2\" />\n      <xs:enumeration value=\"WS2\" />\n      <xs:enumeration value=\"YU\" />\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:simpleType name=\"ProtocolType\">\n    <xs:restriction base=\"xs:string\">\n      <xs:pattern value=\"[Cc][Ii][Ff][Ss]\" />\n      <xs:pattern value=\"[Ff][Tt][Pp]\" />\n      <xs:pattern value=\"[Ss][Ff][Tt][Pp]\" />\n      <!--<xs:enumeration value=\"cifs\" />-->\n      <!--<xs:enumeration value=\"ftp\" />-->\n      <!--<xs:enumeration value=\"sftp\" />-->\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:simpleType name=\"CryptMethodType\">\n    <xs:restriction base=\"xs:string\">\n      <xs:pattern value=\"[Pp][Gg][Pp]\" />\n      <xs:pattern value=\"[Gg][Pp][Gg]\" />\n      <xs:pattern value=\"[Bb][Ff]\" />\n      <xs:pattern value=\"[Dd][Ee][Ss]-[Bb][Ll][Bb]\" />\n      <xs:pattern value=\"[Dd][Ee][Ss][3]\" />\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:simpleType name=\"CompressionRange\">\n    <xs:restriction base=\"xs:integer\">\n      <xs:minInclusive value=\"1\" />\n      <xs:maxInclusive value=\"9\" />\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:complexType name=\"CollectionTransferRequestMessageType\">\n    <xs:sequence>\n\n      <xs:element name=\"Source\">\n        <xs:complexType>\n          <xs:sequence>\n            <xs:element name=\"Protocol\" type=\"ProtocolType\" minOccurs=\"1\" />\n            <xs:element name=\"Address\" type=\"xs:string\" minOccurs=\"1\" />\n            <xs:element name=\"Port\" type=\"xs:int\" minOccurs=\"1\" />\n            <xs:element name=\"Login\" type=\"xs:string\" minOccurs=\"1\" />\n            <xs:element name=\"Password\" type=\"xs:string\" minOccurs=\"0\" />\n            <xs:element name=\"Path\" type=\"xs:string\" minOccurs=\"1\" />\n            <xs:element name=\"Files\" minOccurs=\"1\" maxOccurs=\"1\">\n              <xs:complexType>\n                <xs:sequence>\n                  <xs:element name=\"File\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"unbounded\" />\n                </xs:sequence>\n              </xs:complexType>\n            </xs:element>\n            <xs:element name=\"PassiveMode\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"PreSite\" type=\"xs:string\" minOccurs=\"0\" />\n            <xs:element name=\"PostSite\" type=\"xs:string\" minOccurs=\"0\" />\n            <xs:element name=\"BinaryMode\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"TextMode\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n          </xs:sequence>\n        </xs:complexType>\n      </xs:element>\n\n      <xs:element name=\"Target\">\n        <xs:complexType>\n          <xs:sequence>\n            <xs:element name=\"Protocol\" type=\"ProtocolType\" minOccurs=\"1\" />\n            <xs:element name=\"Address\" type=\"xs:string\" minOccurs=\"1\" />\n            <xs:element name=\"Port\" type=\"xs:int\" minOccurs=\"1\" />\n            <xs:element name=\"Login\" type=\"xs:string\" minOccurs=\"1\" />\n            <xs:element name=\"Password\" type=\"xs:string\" minOccurs=\"0\" />\n            <xs:element name=\"Path\" type=\"xs:string\" minOccurs=\"1\" />\n            <xs:element name=\"PassiveMode\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"PreSite\" type=\"xs:string\" minOccurs=\"0\" />\n            <xs:element name=\"PostSite\" type=\"xs:string\" minOccurs=\"0\" />\n            <xs:element name=\"BinaryMode\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"TextMode\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n          </xs:sequence>\n        </xs:complexType>\n      </xs:element>\n\n      <xs:element name=\"Options\">\n        <xs:complexType>\n          <xs:sequence>\n            <xs:element name=\"Archive\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"AVScanning\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"Compression\" type=\"CompressionRange\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"Decompression\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"RemoveSourceFile\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"MD5\" type=\"xs:string\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"FilenameSuffix\" type=\"xs:string\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"DirectUpload\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n\n            <xs:element name=\"Encryption\" minOccurs=\"0\" maxOccurs=\"1\">\n              <xs:complexType>\n                <xs:sequence>\n                  <xs:element name=\"Method\" type=\"CryptMethodType\" minOccurs=\"0\" maxOccurs=\"1\" />\n                  <xs:element name=\"KeyID\" type=\"xs:string\" minOccurs=\"0\" maxOccurs=\"1\" />\n                  <xs:element name=\"Recipient\" type=\"xs:string\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n                </xs:sequence>\n              </xs:complexType>\n            </xs:element>\n\n            <xs:element name=\"Decryption\" minOccurs=\"0\" maxOccurs=\"1\">\n              <xs:complexType>\n                <xs:sequence>\n                  <xs:element name=\"Method\" type=\"CryptMethodType\" minOccurs=\"0\" maxOccurs=\"1\" />\n                  <xs:element name=\"KeyID\" type=\"xs:string\" minOccurs=\"0\" maxOccurs=\"1\" />\n                </xs:sequence>\n              </xs:complexType>\n            </xs:element>\n\n            <!--<xs:element name=\"Decryption\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />-->\n            <xs:element name=\"Signing\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"SignVerification\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n\n\n\n            <xs:element name=\"Encoding\" minOccurs=\"0\" maxOccurs=\"1\">\n              <xs:complexType>\n                <xs:sequence>\n                  <xs:element name=\"From\" type=\"EncodingType\" minOccurs=\"1\" maxOccurs=\"unbounded\" />\n                  <xs:element name=\"To\" type=\"EncodingType\" minOccurs=\"1\" maxOccurs=\"unbounded\" />\n                </xs:sequence>\n              </xs:complexType>\n            </xs:element>\n          </xs:sequence>\n        </xs:complexType>\n      </xs:element>\n\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"CollectionTransferResponseMessageType\">\n    <xs:sequence>\n      <xs:element name=\"TransferID\" type=\"xs:string\" minOccurs=\"1\" />\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"CollectionStatusRequestMessageType\">\n    <xs:sequence>\n      <xs:element name=\"TransferID\" type=\"xs:string\" minOccurs=\"1\" />\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"CollectionStatusResponseMessageType\">\n    <xs:sequence>\n      <xs:element name=\"TransferID\" type=\"xs:string\" minOccurs=\"1\" />\n      <xs:element name=\"TransferStatus\" minOccurs=\"1\" maxOccurs=\"1\">\n        <xs:complexType>\n          <xs:sequence>\n            <xs:element name=\"Time\" type=\"xs:dateTime\"  minOccurs=\"1\" maxOccurs=\"1\" />\n            <xs:element name=\"StatusID\" type=\"xs:integer\"  minOccurs=\"1\" maxOccurs=\"1\" />\n            <xs:element name=\"StatusDescription\" type=\"xs:string\"  minOccurs=\"1\" maxOccurs=\"1\" />\n          </xs:sequence>\n        </xs:complexType>\n      </xs:element>\n      <xs:element name=\"Files\" minOccurs=\"1\" maxOccurs=\"1\">\n        <xs:complexType>\n          <xs:sequence>\n            <xs:element name=\"File\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n              <xs:complexType>\n                <xs:sequence>\n                  <xs:element name=\"Name\" type=\"xs:string\"  minOccurs=\"1\" maxOccurs=\"1\" />\n                  <xs:element name=\"Time\" type=\"xs:dateTime\"  minOccurs=\"1\" maxOccurs=\"1\" />\n                  <xs:element name=\"StatusID\" type=\"xs:integer\"  minOccurs=\"1\" maxOccurs=\"1\" />\n                  <xs:element name=\"StatusType\" type=\"xs:string\"  minOccurs=\"1\" maxOccurs=\"1\" />\n                  <xs:element name=\"StatusDescription\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\" />\n                </xs:sequence>\n              </xs:complexType>\n            </xs:element>\n          </xs:sequence>\n        </xs:complexType>\n      </xs:element>\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"ListRequestMessageType\">\n    <xs:sequence>\n      <xs:element name=\"Protocol\" type=\"ProtocolType\" minOccurs=\"1\" maxOccurs=\"1\"/>\n      <xs:element name=\"Address\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\" />\n      <xs:element name=\"Port\" type=\"xs:int\" minOccurs=\"1\" maxOccurs=\"1\" />\n      <xs:element name=\"Login\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\" />\n      <xs:element name=\"Password\" type=\"xs:string\" minOccurs=\"0\" maxOccurs=\"1\" />\n      <xs:element name=\"Path\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\" />\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"FileType\">\n    <xs:sequence>\n      <xs:element name=\"Name\" type=\"xs:string\"  minOccurs=\"1\" maxOccurs=\"1\" />\n      <xs:element name=\"Size\" type=\"xs:long\"  minOccurs=\"1\" maxOccurs=\"1\" />\n      <xs:element name=\"ModificationTime\" type=\"xs:dateTime\"  minOccurs=\"1\" maxOccurs=\"1\" />\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"ListResponseMessageType\">\n    <xs:sequence>\n      <xs:element name=\"List\" minOccurs=\"1\" maxOccurs=\"unbounded\">\n        <xs:complexType>\n          <xs:sequence>\n            <xs:element name=\"File\" type=\"FileType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n          </xs:sequence>\n        </xs:complexType>\n      </xs:element>\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"ServiceStatusRequestMessageType\"/>\n\n  <xs:complexType name=\"ServiceStatusResponseMessageType\">\n    <xs:sequence>\n      <xs:element name=\"LastTransferTime\" type=\"xs:dateTime\"  minOccurs=\"1\" maxOccurs=\"1\" />\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"LogRequestMessageType\">\n    <xs:sequence>\n      <xs:element name=\"TransferID\" type=\"xs:string\" minOccurs=\"1\" />\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"LogResponseMessageType\">\n    <xs:sequence>\n      <xs:element name=\"TransferID\" type=\"xs:string\" minOccurs=\"1\" />\n      <xs:element name=\"TransferLog\" type=\"xs:string\"  minOccurs=\"1\" maxOccurs=\"1\" />\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:element name=\"CollectionTransferRequest\" type=\"CollectionTransferRequestMessageType\"/>\n  <xs:element name=\"CollectionTransferResponse\" type=\"CollectionTransferResponseMessageType\"/>\n  <xs:element name=\"CollectionStatusRequest\" type=\"CollectionStatusRequestMessageType\"/>\n  <xs:element name=\"CollectionStatusResponse\" type=\"CollectionStatusResponseMessageType\"/>\n  <xs:element name=\"LogRequest\" type=\"LogRequestMessageType\"/>\n  <xs:element name=\"LogResponse\" type=\"LogResponseMessageType\"/>\n  <xs:element name=\"ListRequest\" type=\"ListRequestMessageType\"/>\n  <xs:element name=\"ListResponse\" type=\"ListResponseMessageType\"/>\n  <xs:element name=\"ServiceStatusRequest\" type=\"ServiceStatusRequestMessageType\"/>\n  <xs:element name=\"ServiceStatusResponse\" type=\"ServiceStatusResponseMessageType\"/>\n</xs:schema>\n"], "fixing_code": ["#\n# FileBroker - Common Library\n# (c) 2010-2013 Jakub Zubielik <jakub.zubielik@nordea.com>\n#\n\nclass AVScanner\n  class AVScannerNotAvailable < StandardError\n  end\n\n  class AVScannerDatabaseNotAvailable < StandardError\n  end\n\n  class VirusDetected < StandardError\n  end\n\n  def initialize\n    @sys = System.new\n  end\n\n  def scan(file)\n    begin\n      @sys.exec(\"clamscan -i \\\"#{file}\\\" 2>&1\")\n    rescue\n      if $!.to_s.strip =~ /command not found/\n        raise AVScannerNotAvailable, \"av scanner is not available\"\n      elsif $!.to_s.strip =~ /No supported database files found in/\n        raise AVScannerDatabaseNotAvailable 'av scanner database is not available'\n      else\n        $!.to_s.split(\"\\n\").each { |l|\n          if l.strip =~ /^#{file.gsub(/\\//, \"\\\\\\/\")}\\:\\s(.+)\\sFOUND/\n            virus = $1\n            raise VirusDetected, \"virus detected: #{virus}\"\n          end\n        }\n      end\n    end\n  end\nend\n\nclass Mail\n  def Mail.send(options)\n#   user     = options['user']\n    from     = options['from']\n    to       = options['to']\n#    pass     = options['pass']\n    server   = options['server']\n    subject  = options['subject']\n    port    = options['port']\n\n    body =  \"From: FES Admin <#{from}>\\n\"\n    body << \"To: #{to}\\n\"\n    body << \"Subject: #{subject}\\n\"\n    body << \"Date: #{Time.now}\\n\"\n    body << \"Importance:high\\n\"\n    body << \"MIME-Version:1.0\\n\"\n    body << \"\\n\\n\\n\"\n    body << options['body']\n\n    t = []\n    t << Thread.new {\n      begin\n        s = TCPSocket.open(server, port)\n\n        s.print \"HELO localhost\\r\\n\"\n        s.recvfrom(1024)\n\n        s.print \"EHLO localhost\\r\\n\"\n        s.recvfrom(1024)\n\n        s.print \"MAIL FROM: #{from}\\r\\n\"\n        s.recvfrom(1024)\n\n        s.print \"RCPT TO: #{to}\\r\\n\"\n        s.recvfrom(1024)\n\n        s.print \"DATA\\r\\n\"\n        s.recvfrom(1024)\n\n        s.print body\n\n\n        s.print \"\\r\\n.\\r\\n\"\n        s.recvfrom(1024)\n\n        s.print \"QUIT\\r\\n\"\n        s.recvfrom(1024)\n\n        s.close\n      rescue\n        STDERR.puts $!.to_s\n      end\n    }\n  end\nend\n\nclass System\n  class CommandExecutionError < StandardError\n  end\n\n  class CompressionFailed < StandardError\n  end\n\n  class DecompressionFailed < StandardError\n  end\n\n  class IncorrectMD5 < StandardError\n  end\n\n  class EncodingFailed < StandardError\n  end\n\n  class ArchivingFailed < StandardError\n  end\n\n  def initialize\n\n  end\n\n  def compress(transfer_id, file, level = 0)\n    begin\n\n      self.exec(\"zip -#{level} 'process/#{transfer_id}/files_#{transfer_id}.zip' 'process/#{transfer_id}/#{file}'\")\n      File.unlink(\"process/#{transfer_id}/#{file}\") if File.exist?(\"process/#{transfer_id}/#{file}\")\n    rescue\n      raise CompressionFailed, $!\n    end\n  end\n\n  def decompress(transfer_id, file)\n    begin\n\n      if file =~ /\\.tar\\.bz2$/\n        self.exec(\"tar jxf 'process/#{transfer_id}/#{file}' -C 'process/#{transfer_id}'\")\n      elsif file =~ /\\.tar\\.gz$/\n        self.exec(\"tar zxf 'process/#{transfer_id}/#{file}' -C 'process/#{transfer_id}'\")\n      elsif file =~ /\\.tar$/\n        self.exec(\"tar xf 'process/#{transfer_id}/#{file}' -C 'process/#{transfer_id}'\")\n      elsif file =~ /\\.bz2$/\n        self.exec(\"bzip2 -d 'process/#{transfer_id}/#{file}'\")\n      elsif file =~ /\\.gz$/\n        self.exec(\"gzip -d 'process/#{transfer_id}/#{file}'\")\n      elsif file =~ /\\.zip$/\n        self.exec(\"unzip -o 'process/#{transfer_id}/#{file}' -d 'process/#{transfer_id}'\")\n      else\n        raise DecompressionFailed, 'unknown archive type'\n      end\n      File.unlink(\"process/#{transfer_id}/#{file}\") if File.exist?(\"process/#{transfer_id}/#{file}\")\n    rescue\n      raise DecompressionFailed, $!\n    end\n  end\n\n  def archive(transfer_id, file)\n    begin\n      self.exec(\"zip -5 'archive/#{transfer_id}' 'process/#{transfer_id}/#{file}'\")\n    rescue\n      raise ArchivingFailed, $!\n    end\n  end\n\n  def is_compressed(path)\n    out = self.exec(\"file -b #{path}\")\n    return true if out =~ /bzip2/\n    false\n  end\n\n  def verify_md5(file, file_md5)\n    begin\n      md5_local  = self.exec(\"md5sum \\\"#{file}\\\"\").split(' ')\n      md5_remote = self.exec(\"cat \\\"#{file_md5}\\\"\").split(' ')\n\n      md5_local  = md5_local[0]  if md5_local.is_a?(Array)\n      md5_remote = md5_remote[0] if md5_remote.is_a?(Array)\n    rescue\n      raise \"unknown MD5 verification error: #{$!.to_s}\"\n    end\n\n    raise IncorrectMD5, \"MD5 signature is incorrect\" if md5_remote != md5_local\n    md5_remote\n  end\n\n  def iconv(path, from, to, inline = false)\n    begin\n      self.exec(\"iconv -c -f #{from} -t #{to} #{path} > #{path}.conv\")\n      File.rename(\"#{path}.conv\", path) if inline\n    rescue\n      raise EncodingFailed, $!\n    ensure\n      File.unlink(\"#{path}.conv\")  if File.exist?(\"#{path}.conv\")\n    end\n  end\n\n  def exec(cmd)\n    begin\n      rootdir = __FILE__.split('/')[0..-3].join('/')\n      out_name = Digest::MD5.hexdigest(cmd + rand(Time.now().to_i).to_s) + '.log'\n\n      while File.exist?(\"#{rootdir}/tmp/#{out_name}\")\n        STDERR.puts \"=> File already exist: #{rootdir}/tmp/#{out_name}\"\n        out_name = Digest::MD5.hexdigest(cmd + rand(Time.now().to_i).to_s) + '.log'\n        sleep 1\n      end\n\n      system(\"(#{cmd}) > #{rootdir}/tmp/#{out_name} 2>&1\")\n      out = File.open(\"#{rootdir}/tmp/#{out_name}\", 'r').readlines.join\n      raise StandardError, out.strip if $?.exitstatus > 0\n      out\n    rescue\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      STDERR.puts \"=> System.exec: (#{cmd}) > #{rootdir}/tmp/#{out_name} 2>&1\"\n      STDERR.puts $!.backtrace\n      STDERR.puts $!.message\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      raise $!\n    ensure\n      File.unlink(\"#{rootdir}/tmp/#{out_name}\") if File.exist?(\"#{rootdir}/tmp/#{out_name}\")\n    end\n  end\nend\n\nclass Array\n  def sort_array\n    d = []\n    self.each_with_index { |x, i| d[i] = [x, i]}\n    if block_given?\n      d.sort { |x, y| yield x[0], y[0] }.collect { |x| x[1] }\n    else\n      d.sort.collect { |x| x[1] }\n    end\n  end\n\n  def sort_with(ord = [])\n    return nil if self.length != ord.length\n    self.values_at(*ord)\n  end\nend\n\nclass String\n  def escape_path\n    self.dump.gsub(/\\s/, \"\\\\ \")\n  end\n\n  # 'Natural order' comparison of two strings\n  def String.natcmp(str1, str2, caseInsensitive=false)\n    str1, str2 = str1.dup, str2.dup\n    compareExpression = /^(\\D*)(\\d*)(.*)$/\n\n    if caseInsensitive\n      str1.downcase!\n      str2.downcase!\n    end\n\n        # Remove all whitespace\n    str1.gsub!(/\\s*/, '')\n    str2.gsub!(/\\s*/, '')\n\n    while (str1.length > 0) or (str2.length > 0) do\n      # Extract non-digits, digits and rest of string\n      str1 =~ compareExpression\n      chars1, num1, str1 = $1.dup, $2.dup, $3.dup\n\n      str2 =~ compareExpression\n      chars2, num2, str2 = $1.dup, $2.dup, $3.dup\n\n      # Compare the non-digits\n      case (chars1 <=> chars2)\n        when 0 # Non-digits are the same, compare the digits...\n               # If either number begins with a zero, then compare\n               # alphabetically, otherwise compare numerically\n          if (num1[0] != 48) and (num2[0] != 48)\n            num1, num2 = num1.to_i, num2.to_i\n          end\n\n          case (num1 <=> num2)\n            when -1 then return -1\n            when 1 then return 1\n          end\n\n        when -1 then return -1\n        when 1 then return 1\n      end # case\n\n    end # while\n\n    # Strings are naturally equal\n    return 0\n  end\nend\n\nclass GPG\n\n  class DecryptionFailed < StandardError\n  end\n\n  class EncryptionFailed < StandardError\n  end\n\n  def initialize\n    @sys = System.new\n    @rootdir = File.absolute_path(\"#{File.dirname(__FILE__)}/..\")\n  end\n\n  def encrypt(file, recipients)\n    begin\n      @sys.exec(\"gpg --no-tty --homedir #{@rootdir}/etc/gnupg --batch --encrypt --sign -r #{recipients.join(' -r ')} < \\\"#{file}\\\" > \\\"#{file}.gpg\\\"\")\n      File.unlink(file)\n    rescue\n      File.delete(\"#{file}.gpg\") if File.exist? \"#{file}.gpg\"\n      raise $!\n    end\n  end\n\n  def decrypt(file)\n    if file =~ /^(.+)\\.([gpg|pgp|asc]{3})$/\n      begin\n        @sys.exec(\"gpg --no-tty --homedir #{@rootdir}/etc/gnupg --batch -o \\\"#{$1}\\\" --decrypt \\\"#{$1}.#{$2}\\\" 2>&1\")\n        File.unlink(file)\n      rescue\n        File.unlink(\"#{$1}\") if File.exist?(\"#{$1}\")\n        raise StandardError, 'failed to decrypt file' if out.split(\"\\n\").last =~ /gpg: decrypt_message failed: eof/\n        raise $!\n      end\n    else\n      begin\n        @sys.exec(\"gpg --no-tty --homedir #{@rootdir}/etc/gnupg --batch -o \\\"#{file}.out\\\" --decrypt \\\"#{file}\\\"\")\n        File.rename(\"#{file}.out\", file) if File.exist?(\"#{file}.out\")\n      rescue\n        raise StandardError, \"failed to decrypt file: '#{file}'\" if $!.message =~ /gpg: decrypt_message failed: eof/\n        raise $!\n      ensure\n        File.unlink(\"#{file}.out\") if File.exist?(\"#{file}.out\")\n      end\n    end\n  end\nend\n\nclass Logger\n  def self.puts_error(id, log)\n    File.open(\"log/transfer/#{id}.err\", \"a\") { |f|\n      f.write \"================= trace - #{Time.now}  =================\\n\"\n      f.write \"#{log}\\n\"\n      f.write \"================= trace - #{Time.now}  =================\\n\\n\"\n      f.flush\n    }\n  end\n\n  def self.puts(msg, type = :WARN)\n    Syslog.open(\"FBService\", Syslog::LOG_PID | Syslog::LOG_CONS, Syslog::LOG_LOCAL7) { |s| s.err msg.gsub(/\\%/, \"%%\")     } if type == :ERROR\n    Syslog.open(\"FBService\", Syslog::LOG_PID | Syslog::LOG_CONS, Syslog::LOG_LOCAL7) { |s| s.notice msg.gsub(/\\%/, \"%%\")  } if type == :NOTICE\n    Syslog.open(\"FBService\", Syslog::LOG_PID | Syslog::LOG_CONS, Syslog::LOG_LOCAL7) { |s| s.warning msg.gsub(/\\%/, \"%%\") } if type == :WARN\n  end\nend\n\nclass Database\n  class AccountNotExist < StandardError\n  end\n\n  class ClientNotExist < StandardError\n  end\n\n  class ClientAlreadyExist < StandardError\n  end\n\n  def initialize\n\n    @cfg = {}\n    File.open(\"#{File.dirname(__FILE__)}/../etc/filebroker.conf\").readlines.each { |l|\n      next if l !~ /^\\S+\\s*=\\s*\\S+$/\n      @cfg[\"#{l.split('=').first}\"] = l.split('=').last.strip\n    }\n\n    @db = PGconn.new(:hostaddr => @cfg['dbhost'], :port => @cfg['dbport'], :dbname => @cfg['dbname'], :user => @cfg['dbuser'], :password => @cfg['dbpass'])\n    @sys = System.new\n    @log2zbx = \"/tech/nordea/common/bin/log2zbx.pl\"\n    @hostname = @sys.exec(\"hostname\").strip\n  end\n\n  def initdb\n    sql = File.open(\"#{File.dirname(__FILE__)}/../etc/fb_db.sql\", \"r\").readlines\n    @db.exec(sql)\n  end\n\n  def cleandb\n    sql = \"\n    DELETE FROM fb_account\n    \"\n  end\n\n  def import_key(key)\n    id = @db.exec(\"SELECT nextval('fb_keys_key_id_seq') AS id\")[0]['id']\n    File.open(\"#{File.dirname(__FILE__)}/../etc/keys/#{'0x%06x.key' % id}\", 'w') { |fd| fd.write(File.open(key['file'], 'r').readline) }\n    @db.exec(\"INSERT into fb_keys (key_id, type, description) VALUES (#{id}, E'#{key['type']}', E'#{key['description']}')\")\n    id\n  end\n\n  def insert_transfer(transfer_hash, source_id, target_id, source_path, target_path)\n    id = @db.exec(\"SELECT nextval('fb_transfer_transfer_id_seq') AS id\")[0]['id']\n    @db.exec(\"INSERT into fb_transfer (transfer_id, transfer_hash, source_id, target_id, source_path, target_path) VALUES (#{id}, '#{transfer_hash}', #{source_id}, #{target_id}, '#{source_path}', '#{target_path}')\")\n    id\n  end\n\n  def insert_transfer_status(transfer_id, status_id, status_time)\n    @db.exec(\"INSERT into fb_transfer_status (transfer_id, status_id, status_time) VALUES (#{transfer_id}, #{status_id}, '#{status_time}')\")\n    sql = \"\n    SELECT\n      fb_transfer.transfer_id,\n      fb_transfer.transfer_hash,\n      fb_transfer_status.status_time,\n      fb_transfer_status_dict.status_id,\n      fb_transfer_status_dict.status_desc,\n      fb_transfer.source_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.source_id) AS source_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_login,\n      fb_transfer.source_path,\n      fb_transfer.target_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.target_id) AS target_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_login,\n      fb_transfer.target_path\n    FROM\n      public.fb_transfer,\n      public.fb_transfer_status,\n      public.fb_transfer_status_dict,\n      public.fb_account\n    WHERE\n      fb_transfer_status.transfer_id = fb_transfer.transfer_id AND\n      fb_transfer_status_dict.status_id = fb_transfer_status.status_id AND\n      (fb_account.account_id = fb_transfer.source_id OR fb_account.account_id = fb_transfer.target_id) AND\n      fb_transfer.transfer_id = #{transfer_id}\n    ORDER BY fb_transfer_status.status_time ASC\"\n\n    t = @db.exec(sql)[0]\n    if self.select_configuration('syslog') != 'false'\n      log_str = \"TID [#{t['transfer_hash']}]: #{t['status_desc'].upcase}: #{t['source_protocol']}://#{t['source_login']}@#{t['source_address']}:#{t['source_port']}:#{t['source_path']} => #{t['target_protocol']}://#{t['target_login']}@#{t['target_address']}:#{t['target_port']}:#{t['target_path']}\"\n      if status_id == FBService::TRANSFER_COMPLETED_SUCCESSFULLY\n        Logger.puts(log_str, :NOTICE)\n      elsif status_id == FBService::TRANSFER_COMPLETED_WITH_ERRORS\n        Logger.puts(log_str, :ERROR)\n      else\n        Logger.puts(log_str, :WARN)\n      end\n    end\n  end\n\n  def update_transfer_status(transfer_id, status_id, status_time)\n    @db.exec(\"UPDATE fb_transfer_status SET status_id=#{status_id}, status_time='#{status_time}' WHERE transfer_id=#{transfer_id}\")\n    sql = \"\n    SELECT\n      fb_transfer.transfer_id,\n      fb_transfer.transfer_hash,\n      fb_transfer_status.status_time,\n      fb_transfer_status_dict.status_id,\n      fb_transfer_status_dict.status_desc,\n      fb_transfer.source_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.source_id) AS source_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_login,\n      fb_transfer.source_path,\n      fb_transfer.target_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.target_id) AS target_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_login,\n      fb_transfer.target_path\n    FROM\n      public.fb_transfer,\n      public.fb_transfer_status,\n      public.fb_transfer_status_dict,\n      public.fb_account\n    WHERE\n      fb_transfer_status.transfer_id = fb_transfer.transfer_id AND\n      fb_transfer_status_dict.status_id = fb_transfer_status.status_id AND\n      (fb_account.account_id = fb_transfer.source_id OR fb_account.account_id = fb_transfer.target_id) AND\n      fb_transfer.transfer_id = #{transfer_id}\n    ORDER BY fb_transfer_status.status_time ASC\"\n\n    t = @db.exec(sql)[0]\n    if self.select_configuration('syslog') != 'false'\n      log_str = \"TID [#{t['transfer_hash']}]: #{t['status_desc'].upcase}: #{t['source_protocol']}://#{t['source_login']}@#{t['source_address']}:#{t['source_port']}:#{t['source_path']} => #{t['target_protocol']}://#{t['target_login']}@#{t['target_address']}:#{t['target_port']}:#{t['target_path']}\"\n      if status_id.to_i == FBService::TRANSFER_COMPLETED_SUCCESSFULLY\n        Logger.puts(log_str, :NOTICE)\n      elsif status_id.to_i == FBService::TRANSFER_COMPLETED_WITH_ERRORS\n        Logger.puts(log_str, :ERROR)\n      else\n        Logger.puts(log_str, :WARN)\n      end\n    end\n  end\n\n  def select_transfer_status(transfer_id)\n    transfer_id = @db.exec(\"SELECT transfer_id FROM fb_transfer WHERE transfer_hash='#{transfer_id}'\")[0]['transfer_id'] if transfer_id =~ /^\\S{32}$/\n    @db.exec(\"SELECT * FROM fb_transfer_status WHERE transfer_id=#{transfer_id}\")[0]\n  end\n\n  def select_transfer_status_desc(status_id)\n    @db.exec(\"SELECT status_desc FROM fb_transfer_status_dict WHERE status_id=#{status_id}\")[0]['status_desc']\n  end\n\n  def insert_file_status(transfer_id, file, status_id, status_time)\n    sql = \"INSERT into fb_file_status (transfer_id, filename, status_id, status_time) VALUES ($1::int, $2::text, $3::int, $4::timestamp)\"\n    @db.exec(sql, [transfer_id, file, status_id, status_time])\n  end\n\n  def update_file_status(transfer_id, file, status_id, status_time)\n    sql_count = \"SELECT * FROM fb_file_status WHERE transfer_id=$1::int AND filename=$2::text\"\n    if @db.exec(sql_count, [transfer_id, file]).count > 0\n      sql_update = \"UPDATE fb_file_status SET status_id=$1::int, status_time=$2::timestamp WHERE transfer_id=$3::int AND filename=$4::text\"\n      @db.exec(sql_update, [status_id, status_time, transfer_id, file])\n    else\n      insert_file_status(transfer_id, file, status_id, status_time)\n    end\n  end\n\n  def select_file_status(transfer_id)\n    transfer_id = @db.exec(\"SELECT transfer_id FROM fb_transfer WHERE transfer_hash='#{transfer_id}'\")[0]['transfer_id'] if transfer_id =~ /^\\S{32}$/\n    @db.exec(\"SELECT * FROM fb_file_status WHERE transfer_id=#{transfer_id} ORDER BY filename ASC\")\n  end\n\n  def select_file_status_desc(status_id)\n    @db.exec(\"SELECT status_desc FROM fb_file_status_dict WHERE status_id=#{status_id}\")[0]['status_desc']\n  end\n\n  def select_file_status_type(status_id)\n    @db.exec(\"SELECT status_type FROM fb_file_status_dict WHERE status_id=#{status_id}\")[0]['status_type']\n  end\n\n  def select_configuration(key)\n    @db.exec(\"SELECT value FROM fb_configuration WHERE key='#{key}'\")[0]['value']\n  end\n\n  def insert_configuration(key, value)\n    @db.exec(\"INSERT INTO fb_configuration (key, value) VALUES ('#{key}', '#{value}')\")\n  end\n\n  def select_client_acl(client_id)\n    @db.exec(\"SELECT ace_id FROM fb_client_acl WHERE client_id='#{client_id}'\")\n  end\n\n  def select_client_acl_desc(ace_id)\n    @db.exec(\"SELECT * FROM fb_client_acl_dict WHERE ace_id=#{ace_id}\")[0]['ace_desc']\n  end\n\n  def select_transfer_by_status(status_id)\n    @db.exec(\"SELECT * FROM fb_transfer WHERE status_id=#{status_id}\")\n  end\n\n  def select_transfer_by_source(source_id)\n    @db.exec(\"SELECT * FROM fb_transfer WHERE source_id=#{source_id}\")\n  end\n\n  def select_running_transfers_by_source(status_id, source_id, source_path)\n    @db.exec(\"SELECT fb_transfer.transfer_id FROM fb_transfer, fb_transfer_status WHERE fb_transfer.source_id=#{source_id} AND fb_transfer_status.status_id=#{status_id} AND fb_transfer.source_path='#{source_path}' AND fb_transfer.transfer_id=fb_transfer_status.transfer_id\")\n  end\n\n  def select_files_by_transfer_status(status_id, source_id, source_path, file_name)\n    sql = \"\n    SELECT \n      fb_transfer.transfer_id, \n      fb_file_status.filename,\n      fb_file_status.status_time\n    FROM \n        fb_transfer, fb_transfer_status, public.fb_file_status\n    WHERE fb_transfer.source_id = $1::bigint \n      AND fb_transfer_status.status_id = $2::int\n      AND fb_transfer.source_path = $3::text\n      AND fb_transfer.transfer_id = fb_transfer_status.transfer_id\n      AND fb_file_status.filename = $4::text\n      AND fb_file_status.transfer_id = fb_transfer.transfer_id\"\n    @db.exec(sql, [source_id, status_id, source_path, file_name])\n  end\n\n  def select_running_transfers\n    sql = \"\n    SELECT DISTINCT\n      fb_transfer.transfer_id,\n      fb_transfer.transfer_hash,\n      fb_transfer_status.status_time,\n      fb_transfer_status_dict.status_id,\n      fb_transfer_status_dict.status_desc,\n      fb_transfer.source_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.source_id) AS source_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_login,\n      fb_transfer.source_path,\n      fb_transfer.target_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.target_id) AS target_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_login,\n      fb_transfer.target_path\n    FROM\n      public.fb_transfer,\n      public.fb_transfer_status,\n      public.fb_transfer_status_dict,\n      public.fb_account\n    WHERE\n      fb_transfer_status.transfer_id = fb_transfer.transfer_id AND\n      fb_transfer_status_dict.status_id = fb_transfer_status.status_id AND\n      fb_transfer_status.status_id = #{FBService::TRANSFER_RUNNING} AND\n      (fb_account.account_id = fb_transfer.source_id OR fb_account.account_id = fb_transfer.target_id)\n    ORDER BY fb_transfer_status.status_time ASC\"\n\n    @db.exec(sql)\n  end\n\n  def select_last_transfers(n)\n    sql = \"\n    SELECT DISTINCT\n      fb_transfer.transfer_id,\n      fb_transfer.transfer_hash,\n      fb_transfer_status.status_time,\n      fb_transfer_status_dict.status_id,\n      fb_transfer_status_dict.status_desc,\n      fb_transfer.source_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.source_id) AS source_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_login,\n      fb_transfer.source_path,\n      fb_transfer.target_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.target_id) AS target_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_login,\n      fb_transfer.target_path\n    FROM\n      public.fb_transfer,\n      public.fb_transfer_status,\n      public.fb_transfer_status_dict,\n      public.fb_account\n    WHERE\n      fb_transfer_status.transfer_id = fb_transfer.transfer_id AND\n      fb_transfer_status_dict.status_id = fb_transfer_status.status_id AND\n\t\t\tfb_transfer_status.status_id <> #{FBService::TRANSFER_RUNNING} AND\n      (fb_account.account_id = fb_transfer.source_id OR fb_account.account_id = fb_transfer.target_id)\n    ORDER BY fb_transfer_status.status_time DESC LIMIT #{n}\"\n\n    @db.exec(sql)\n  end\n\n  def select_failed_transfers(n)\n    sql = \"\n    SELECT\n      fb_transfer.transfer_id,\n      fb_transfer.transfer_hash,\n      fb_transfer_status.status_time,\n      fb_transfer_status_dict.status_id,\n      fb_transfer_status_dict.status_desc,\n      fb_transfer.source_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.source_id) AS source_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_login,\n      fb_transfer.source_path,\n      fb_transfer.target_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.target_id) AS target_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_login,\n      fb_transfer.target_path\n    FROM\n      public.fb_transfer,\n      public.fb_transfer_status,\n      public.fb_transfer_status_dict,\n      public.fb_account\n    WHERE\n      fb_transfer_status.transfer_id = fb_transfer.transfer_id AND\n      fb_transfer_status_dict.status_id = fb_transfer_status.status_id AND\n      fb_transfer_status.status_id = #{FBService::TRANSFER_COMPLETED_WITH_ERRORS} AND\n      (fb_account.account_id = fb_transfer.source_id OR fb_account.account_id = fb_transfer.target_id)\n    ORDER BY fb_transfer_status.status_time ASC LIMIT #{n}\"\n\n    @db.exec(sql)\n  end\n\n  def select_transfers_by_hash(h)\n    sql = \"\n    SELECT\n      fb_transfer.transfer_id,\n      fb_transfer.transfer_hash,\n      fb_transfer_status.status_time,\n      fb_transfer_status_dict.status_id,\n      fb_transfer_status_dict.status_desc,\n      fb_transfer.source_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.source_id) AS source_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_login,\n      fb_transfer.source_path,\n      fb_transfer.target_id,\n      (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_address,\n      (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_port,\n      (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.target_id) AS target_protocol,\n      (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_login,\n      fb_transfer.target_path\n    FROM\n      public.fb_transfer,\n      public.fb_transfer_status,\n      public.fb_transfer_status_dict,\n      public.fb_account\n    WHERE\n      fb_transfer.transfer_hash = '#{h}' AND\n      fb_transfer_status.transfer_id = fb_transfer.transfer_id AND\n      fb_transfer_status_dict.status_id = fb_transfer_status.status_id AND\n      (fb_account.account_id = fb_transfer.source_id OR fb_account.account_id = fb_transfer.target_id)\n    ORDER BY fb_transfer_status.status_time ASC\"\n\n    @db.exec(sql)\n  end\n\n  def select_transfer_between(s_time, e_time)\n    sql = \"\n      SELECT\n        fb_transfer.transfer_id,\n        fb_transfer.transfer_hash,\n        fb_transfer_status.status_time,\n        fb_transfer_status_dict.status_id,\n        fb_transfer_status_dict.status_desc,\n        fb_transfer.source_id,\n        (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_address,\n        (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_port,\n        (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.source_id) AS source_protocol,\n        (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.source_id) AS source_login,\n        fb_transfer.source_path,\n        fb_transfer.target_id,\n        (SELECT fb_account.address FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_address,\n        (SELECT fb_account.port FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_port,\n        (SELECT fb_protocol_dict.protocol_desc FROM fb_protocol_dict, fb_account WHERE fb_protocol_dict.protocol_id = fb_account.protocol_id AND fb_account.account_id = fb_transfer.target_id) AS target_protocol,\n        (SELECT fb_account.login FROM fb_account WHERE fb_account.account_id = fb_transfer.target_id) AS target_login,\n        fb_transfer.target_path\n      FROM\n        public.fb_transfer,\n        public.fb_transfer_status,\n        public.fb_transfer_status_dict,\n        public.fb_account\n      WHERE\n        fb_transfer.source_id = fb_account.account_id AND\n        fb_transfer.target_id = fb_account.account_id AND\n        fb_transfer_status.transfer_id = fb_transfer.transfer_id AND\n        fb_transfer_status_dict.status_id = fb_transfer_status.status_id AND\n        fb_transfer_status.status_time > '#{s_time}' AND\n        fb_transfer_status.status_time < '#{e_time}'\n      ORDER BY fb_transfer_status.status_time ASC\"\n    @db.exec(sql)\n  end\n\n  def select_transfer_files(transfer_id)\n    sql = \"\n    SELECT\n      fb_file_status.transfer_id,\n      fb_file_status.filename,\n      fb_file_status.status_time,\n      fb_file_status_dict.status_id,\n      fb_file_status_dict.status_desc,\n      fb_file_status_dict.status_type\n    FROM\n      public.fb_file_status,\n      public.fb_file_status_dict\n    WHERE\n      fb_file_status.status_id = fb_file_status_dict.status_id AND\n      fb_file_status.transfer_id = $1::int\n    ORDER BY fb_file_status.filename ASC\"\n    @db.exec(sql, [transfer_id])\n  end\n\n  def add_client(client)\n    if @db.exec(\"SELECT login FROM fb_client WHERE login=E'#{client['login']}'\")[0] != nil\n      raise ClientAlreadyExist, \"login already exist\"\n    end\n\n    id = @db.exec('SELECT nextval(fb_client_client_id_seq)')[0][0]\n    @db.exec(\"INSERT INTO fb_client (client_id, login, password) VALUES (#{id}, '#{client['login']}', '#{client['password']}')\")\n\n    client['acl'].each { |x| @db.exec(\"INSERT INTO fb_client_acl (client_id, ace_id) VALUES (#{id}, #{self.get_client_acl_id(x)})\") }\n    client['client_id'] = id\n    client\n  end\n\n  def remove_client(client)\n    client['client_id'] = @db.exec(\"SELECT client_id FROM fb_client WHERE login=E'#{client['login']}'\")[0]['client_id']\n    @db.exec(\"DELETE FROM fb_client_acl WHERE client_id='#{client['client_id']}'\")\n    @db.exec(\"DELETE FROM fb_client WHERE login=E'#{client['login']}'\")\n  end\n\n  def get_client(client)\n    if client['id'] != nil\n      @db.exec(\"SELECT * FROM fb_client WHERE client_id=#{client['client_id']}\").each { |x|\n        client['login'] \t= x['login']\n        client['password'] = x['password']\n        return client\n      }\n    elsif client['login'] != nil\n      @db.exec(\"SELECT * FROM fb_client WHERE login=E'#{client['login']}'\").each { |x|\n        client['client_id'] = x['client_id']\n        client['password']  = x['password']\n        return client\n      }\n    end\n\n    raise ClientNotExist, \"client does not exist\"\n  end\n\n  def get_client_list\n    @db.exec('SELECT * FROM fb_client')\n  end\n\n  def get_client_acl(client)\n    client['acl'] = []\n    sql = \"\n      SELECT\n        fb_client_acl.ace_id,\n        fb_client_acl_dict.ace_desc,\n        fb_client_acl.client_id\n      FROM\n        public.fb_client_acl_dict,\n        public.fb_client_acl\n      WHERE\n        fb_client_acl.ace_id = fb_client_acl_dict.ace_id AND\n        fb_client_acl.client_id = #{client['client_id']}\"\n    @db.exec(sql).each { |x| client['acl'] << x['ace_desc'] }\n    return client\n    raise ClientNotExist, 'client does not exist'\n  end\n\n  def insert_client(client)\n    client['client_id'] = @db.exec(\"INSERT INTO fb_client (login, password) VALUES ('#{client['login']}', '#{client['password']}') RETURNING client_id\")[0]['client_id']\n    client['acl'].each { |x|\n      @db.exec(\"INSERT INTO fb_client_acl (client_id, ace_id) VALUES (#{client['client_id']}, #{self.get_client_acl_id(x)})\")\n    }\n  end\n\n  def get_client_acl_id(desc)\n    @db.exec(\"SELECT * FROM fb_client_acl_dict WHERE ace_desc='#{desc}'\")[0]['ace_id']\n  end\n\n  def set_client_acl(client)\n    @db.exec(\"DELETE FROM fb_client_acl WHERE client_id=#{client['client_id']}\")\n    client['acl'].each { |x|\n      @db.exec(\"INSERT INTO fb_client_acl (client_id, ace_id) VALUES (#{client['client_id']}, #{self.get_client_acl_id(x)})\")\n    }\n  end\n\n  def set_client_password(client)\n    @db.exec(\"UPDATE fb_client SET password='#{client['password']}' WHERE login=E'#{client['login']}'\");\n  end\n\n  def insert_account(account)\n    id = @db.exec(\"SELECT nextval('fb_account_account_id_seq') AS id\")[0]['id']\n    @db.exec(\"INSERT INTO fb_account (account_id, protocol_id, address, port, login) VALUES (#{id}, (SELECT protocol_id FROM fb_protocol_dict WHERE protocol_desc='#{account['protocol']}'), '#{account['address']}', #{account['port']}, E'#{account['login'].gsub(/\\\\/, '\\\\\\\\\\\\\\\\')}')\")\n\n    account['account_id'] = id\n    account\n  end\n\n  def remove_account(account)\n\n  end\n\n  def select_account(account)\n    if account['account_id'] != nil\n      @db.exec(\"SELECT * FROM fb_account WHERE account_id=#{account['account_id']}\").each { |x|\n        account['protocol_id'] \t= x['protocol_id']\n        account['address'] \t\t  = x['address']\n        account['port'] \t\t    = x['port']\n        account['login'] \t\t    = x['login']\n        return account\n      }\n    else\n      @db.exec(\"SELECT * FROM fb_account WHERE protocol_id=(SELECT protocol_id FROM fb_protocol_dict WHERE protocol_desc='#{account['protocol']}') AND address='#{account['address']}' AND port=#{account['port']} AND login=E'#{account['login'].gsub(/\\\\/, '\\\\\\\\\\\\\\\\')}'\").each { |x|\n        account['account_id'] = x['account_id']\n        return account\n      }\n    end\n\n    raise AccountNotExist, 'account does not exist'\n  end\n\n  def select_configuration(key)\n    return @db.exec('SELECT * FROM fb_configuration') if key == 'all'\n    @db.exec(\"SELECT value FROM fb_configuration WHERE key='#{key}'\").each { |x| return x['value'] }\n  end\n\n  def update_configuration(key, value)\n    @db.exec(\"UPDATE fb_configuration SET VALUE='#{value}' WHERE key='#{key}'\")\n  end\n\n  def select_key_list\n    @db.exec('SELECT * FROM fb_keys')\n  end\n\nend\n\nclass Connector\n  class AuthenticationFailed < StandardError\n  end\n\n  class HostUnreachable < StandardError\n  end\n\n  class NetworkUnreachable < StandardError\n  end\n\n  class BadNetworkName < StandardError\n  end\n\n  class ConnectionRefused < StandardError\n  end\n\n  class ConnectionBroken < StandardError\n  end\n\n  class ConnectionRefused < StandardError\n  end\n\n  class NoSuchFileOrDirectory < StandardError\n  end\n\n  class ErrorOpeningLocalFile < StandardError\n  end\n\n  class PermissionDenied < StandardError\n  end\n\n  class FileAlreadyExist < StandardError\n  end\n\n  class NoSpaceLeft < StandardError\n  end\n\n  class SFTP\n    attr_accessor :address, :port, :login, :password\n\n    def connect\n      begin\n        if @password != ''\n          @sftp = Net::SFTP.start(@address, @login, :password => @password, :port => @port)\n        else\n          @sftp = Net::SFTP.start(@address, @login, :port => @port, :keys => [ \"#{File.dirname(__FILE__)}/../etc/ssh/id_rsa\" ])\n        end\n      rescue Net::SSH::AuthenticationFailed\n        raise Connector::AuthenticationFailed, 'login credentials rejected'\n      rescue Net::SFTP::StatusException => e\n        raise Connector::PermissionDenied if e.description == 'permission denied'\n        raise e\n      rescue\n        msg = $!.to_s\n        raise Connector::HostUnreachable, \"unable to resolve host: '#{@address}'\" if $!.to_s =~ /getaddrinfo: Name or service not known/\n        raise \"cannot connect to '#{@address}': #{msg}\"\n      end\n    end\n\n    def disconnect\n      begin\n        @sftp.session.close\n      rescue\n        msg = $!.to_s\n        raise \"error on disconnect: #{msg}\"\n      end\n    end\n\n    def put(src, dst)\n      begin\n        @sftp.upload!(src, dst)\n      rescue\n        msg = $!.to_s\n        raise \"cannot upload file '#{src.split(\"/\").last}': #{msg}\"\n      end\n    end\n\n    def get(src, dst)\n      begin\n        @sftp.download!(src, dst)\n      rescue\n        msg = $!.to_s\n        raise Connector::NoSuchFileOrDirectory, \"no such file or directory: '#{src}'\" if $!.to_s =~ /no such file/\n        raise Connector::PermissionDenied, \"permission denied: '#{src}'\" if $!.to_s =~ /permission denied/\n        raise \"cannot download file '#{src.split(\"/\").last}': #{msg}\"\n      end\n    end\n\n    def remove(file)\n      begin\n        @sftp.remove!(file)\n      rescue Net::SFTP::StatusException => e\n        raise Connector::PermissionDenied, \"permission denied: '#{file}'\" if e.description == 'permission denied'\n        raise e\n      rescue\n        msg = $!.to_s\n        raise Connector::NoSuchFileOrDirectory, \"no such file or directory: '#{file}'\" if $!.to_s =~ /no such file/\n        raise \"cannot remove file '#{file.split(\"/\").last}': #{msg}\"\n      end\n    end\n\n    def rename(src, dst)\n      begin\n        #begin\n        #  @sftp.remove!(dst) if sftp.stat!(dst) != nil\n        #rescue\n        #end\n        @sftp.rename!(src, dst, 0x0004)\n      rescue Net::SFTP::StatusException => e\n        raise Connector::PermissionDenied, \"permission denied: '#{dst}'\" if e.description == 'permission denied'\n        raise Connector::FileAlreadyExist, \"file already exist: '#{dst}'\" if e.description == 'failure'\n        raise e\n      rescue\n        msg = $!.to_s\n        raise Connector::NoSuchFileOrDirectory, \"no such file or directory: '#{src}'\" if $!.to_s =~ /no such file/\n        raise \"cannot rename file '#{src.split(\"/\").last}': #{msg}\"\n      end\n    end\n\n    def list(path)\n      begin\n        items = []\n        fd = @sftp.opendir!(path)\n        while (entries = @sftp.readdir!(fd)) do\n          entries.each { |item|\n            next if item.name == \".\" or item.name == \"..\"\n            next if item.longname[0] != '-'\n\n            i = {}\n            i['name']  = item.name\n            i['size']  = item.attributes.size\n            i['mtime'] = i['mtime'] = Time.at(item.attributes.mtime).to_s\n            items << i\n          }\n        end\n\n        return items.sort { |a, b| a['name'] <=> b['name'] }\n      rescue Net::SFTP::StatusException => e\n        raise Connector::PermissionDenied, \"permission denied: '#{path}'\" if e.description == 'permission denied'\n        raise e\n      rescue\n        msg = $!.to_s\n        raise Connector::NoSuchFileOrDirectory, \"no such file or directory: #{path}\" if $!.to_s =~ /no such file/\n      end\n    end\n  end\n\n  class FTP\n    attr_accessor :address, :port, :login, :password, :presite, :postsite, :passive, :text, :binary\n\n    def connect\n      begin\n        @ftp = Net::FTP.new\n        @ftp.debug_mode = false\n        @ftp.connect(@address, @port)\n        @ftp.login(@login, @password)\n        @ftp.passive = true if @passive == 'true'\n      rescue\n        raise Connector::HostUnreachable, \"unable to resolve: '#{@address}'\" if $!.to_s =~ /getaddrinfo: Name or service not known/\n        raise Connector::ConnectionRefused, \"connection refused: '#{@address}'\" if $!.to_s =~ /onnection refused/\n      end\n    end\n\n    def disconnect\n      begin\n        @ftp.quit\n        @ftp.close\n      rescue\n        msg = $!.to_s\n        raise \"error on disconnect: #{msg}\"\n      end\n    end\n\n    def put(src, dst)\n      begin\n        @ftp.site(@presite)\t\t\t      if @presite   != ''\n        if @binary == \"true\" or @text == \"\" or @text == \"false\"\n          @ftp.putbinaryfile(src, dst)\n        else\n          @ftp.puttextfile(src, dst)\n        end\n        @ftp.site(@postsite)\t\t\t    if @postsite  != \"\"\n      rescue\n        msg = $!.to_s\n        raise \"cannot upload file '#{src.split(\"/\").last}': #{msg}\"\n      end\n    end\n\n    def get(src, dst)\n      begin\n        @ftp.site(@presite)\t\t\t      if @presite != ''\n\n        if @binary == 'true' or @text == '' or @text == 'false'\n          @ftp.getbinaryfile(src, dst)\n        else\n          @ftp.gettextfile(src, dst)\n        end\n        @ftp.site(@postsite)\t\t\t    if @postsite != ''\n      rescue\n        msg = $!.to_s\n        raise Connector::NoSuchFileOrDirectory, \"no such file or directory: '#{src}'\" if $!.to_s =~ /no such file/\n        raise Connector::PermissionDenied, \"permission denied: '#{src}'\" if $!.to_s =~ /permission denied/\n        raise \"cannot download file '#{src.split(\"/\").last}': #{msg.strip}\"\n      end\n    end\n\n    def remove(file)\n      begin\n        @ftp.delete(file)\n      rescue\n        msg = $!.to_s\n        raise Connector::NoSuchFileOrDirectory, \"no such file or directory: #{file}\" if $!.to_s =~ /no such file/\n        raise \"cannot remove file '#{file.split(\"/\").last}': #{msg.strip}\"\n      end\n    end\n\n    def rename(src, dst)\n      begin\n        @ftp.rename(src, dst)\n      rescue\n        msg = $!.to_s\n        raise Connector::NoSuchFileOrDirectory, \"no such file or directory: #{src}\" if $!.to_s =~ /no such file/\n        raise \"cannot rename file '#{src.split(\"/\").last}': #{msg}\"\n      end\n    end\n\n    def list(path)\n      begin\n        items = []\n        @ftp.chdir(path)\n        @ftp.list.each { |e|\n          i = {}\n          item = Net::FTP::List.parse(e)\n          next unless item.file?\n          i['name']  = item.name\n          i['size']  = item.size\n          i['mtime'] = Time.at(Time.parse(item.mtime.to_s).to_i).to_s\n          items << i\n        }\n\n        return items.sort { |a, b| a['name'] <=> b['name'] }\n      rescue\n        msg = $!.to_s\n        raise Connector::NoSuchFileOrDirectory, \"no such file: #{path}\" if $!.to_s =~ /no such file/\n        raise \"cannot get file list: #{msg}\"\n      end\n    end\n  end\n\n  class CIFS\n    attr_accessor :address, :port, :login, :password, :share, :debug\n\n    def initialize\n      @debug = false\n      @sys = System.new\n      @port = 445\n    end\n\n    def connect\n      begin\n        @rand  = Digest::MD5.hexdigest(\"#{@address}_#{@port}_#{@share}_#{@login}\" + rand(Time.now().to_i).to_s)\n        @authfile = \"tmp/#{@rand}.pwd\"\n      rescue\n        raise $!\n      end\n    end\n\n    def disconnect\n      File.delete(@authfile) if File.exist?(@authfile)\n    end\n\n    def cd(path)\n      begin\n        File.open(@authfile, 'w', 0600) { |fd| fd.puts \"username = #{@login}\\npassword = #{@password}\\n\" }\n\n        cmd = ''\n        path.split('/').each { |item|\n          next if item == ''\n          next if item == path.split('/')[1] # share\n          cmd = cmd + \"cd \\\\\\\"#{item}\\\\\\\"\\n\"\n        }\n\n        @sys.exec(\"echo \\\"#{cmd}\\\" | smbclient -E -g -A #{@authfile} -p #{@port} //#{@address}/#{@share} 2>&1\").split(\"\\n\").each { |out|\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if out =~ /NT_STATUS_LOGON_FAILURE/\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if out =~ /NT_STATUS_UNSUCCESSFUL/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if out =~ /NT_STATUS_HOST_UNREACHABLE/\n          raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                  if out =~ /NT_STATUS_BAD_NETWORK_NAME/\n          raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"           if out =~ /NT_STATUS_NETWORK_UNREACHABLE/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if out =~ /NT_STATUS_CONNECTION_REFUSED/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if out =~ /Receiving SMB: Server \\S+ stopped responding/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{path}'\"  if out =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /NT_STATUS_ACCOUNT_DISABLED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /NT_STATUS_ACCOUNT_LOCKED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /not a directory/\n        }\n      rescue\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if $!.message =~ /NT_STATUS_LOGON_FAILURE/\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if $!.message =~ /NT_STATUS_UNSUCCESSFUL/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if $!.message =~ /NT_STATUS_HOST_UNREACHABLE/\n        raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                  if $!.message =~ /NT_STATUS_BAD_NETWORK_NAME/\n        raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"           if $!.message =~ /NT_STATUS_NETWORK_UNREACHABLE/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if $!.message =~ /NT_STATUS_CONNECTION_REFUSED/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if $!.message =~ /Receiving SMB: Server \\S+ stopped responding/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{path}'\"  if $!.message =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /NT_STATUS_ACCOUNT_DISABLED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /NT_STATUS_ACCOUNT_LOCKED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /not a directory/\n        raise $!\n      ensure\n        File.delete(@authfile) if File.exist?(@authfile)\n      end\n    end\n\n    def put(src, dst)\n      begin\n        File.open(@authfile, 'w', 0600) { |fd| fd.puts \"username = #{@login}\\npassword = #{@password}\\n\" }\n        STDERR.puts \"->putting #{src}\" if @debug\n\n        cmd = ''\n        dst.split('/')[0...-1].each { |item|\n          next if item == ''\n          next if item == dst.split('/')[1] # share\n          cmd = cmd + \"cd \\\\\\\"#{item}\\\\\\\"\\n\"\n        }\n\n        cmd = cmd + \"put \\\\\\\"#{src}\\\\\\\" \\\\\\\"#{dst.split('/').last}\\\\\\\"\\n\"\n        @sys.exec(\"echo \\\"#{cmd}\\\" | smbclient -E -g -A #{@authfile} -p #{@port} //#{@address}/#{@share} 2>&1\").split(\"\\n\").each { |out|\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"           if out =~ /NT_STATUS_LOGON_FAILURE/\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"           if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                if out =~ /NT_STATUS_UNSUCCESSFUL/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                if out =~ /NT_STATUS_HOST_UNREACHABLE/\n          raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                 if out =~ /NT_STATUS_BAD_NETWORK_NAME/\n          raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"          if out =~ /NT_STATUS_NETWORK_UNREACHABLE/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"         if out =~ /NT_STATUS_CONNECTION_REFUSED/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"         if out =~ /Receiving SMB: Server \\S+ stopped responding/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{dst}'\"  if out =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n          raise Connector::PermissionDenied, \"permission denied for file '#{dst}'\"          if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::NoSpaceLeft, \"no space left for file '#{dst}'\"                   if out =~ /NT_STATUS_DISK_FULL/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if out =~ /NT_STATUS_ACCOUNT_DISABLED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if out =~ /NT_STATUS_ACCOUNT_LOCKED/\n          raise Connector::PermissionDenied, \"unknown error '#{out}'\"                       if out =~ /session setup failed/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if out =~ /not a directory/\n        }\n      rescue\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"           if $!.message =~ /NT_STATUS_LOGON_FAILURE/\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"           if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                if $!.message =~ /NT_STATUS_UNSUCCESSFUL/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                if $!.message =~ /NT_STATUS_HOST_UNREACHABLE/\n        raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                 if $!.message =~ /NT_STATUS_BAD_NETWORK_NAME/\n        raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"          if $!.message =~ /NT_STATUS_NETWORK_UNREACHABLE/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"         if $!.message =~ /NT_STATUS_CONNECTION_REFUSED/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"         if $!.message =~ /Receiving SMB: Server \\S+ stopped responding/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{dst}'\"  if $!.message =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n        raise Connector::PermissionDenied, \"permission denied for file '#{dst}'\"          if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::NoSpaceLeft, \"no space left for file '#{dst}'\"                   if $!.message =~ /NT_STATUS_DISK_FULL/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if $!.message =~ /NT_STATUS_ACCOUNT_DISABLED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if $!.message =~ /NT_STATUS_ACCOUNT_LOCKED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if $!.message =~ /not a directory/\n        raise $!\n      ensure\n        File.delete(@authfile) if File.exist?(@authfile)\n      end\n    end\n\n    def get(src, dst)\n      begin\n        File.open(@authfile, 'w', 0600) { |fd| fd.puts \"username = #{@login}\\npassword = #{@password}\\n\" }\n        STDERR.puts \"->getting #{src}\" if @debug\n\n        cmd = ''\n        src.split('/')[0...-1].each { |item|\n          next if item == ''\n          next if item == src.split('/')[1] # share\n          cmd = cmd + \"cd \\\\\\\"#{item}\\\\\\\"\\n\"\n        }\n\n        cmd = cmd + \"get \\\\\\\"#{src.split('/').last}\\\\\\\" \\\\\\\"#{dst}\\\\\\\"\\n\"\n        @sys.exec(\"echo \\\"#{cmd}\\\" | smbclient -E -g -A #{@authfile} -p #{@port} //#{@address}/#{@share} 2>&1\").split(\"\\n\").each { |out|\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"           if out =~ /NT_STATUS_LOGON_FAILURE/\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"           if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                if out =~ /NT_STATUS_UNSUCCESSFUL/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                if out =~ /NT_STATUS_HOST_UNREACHABLE/\n          raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                 if out =~ /NT_STATUS_BAD_NETWORK_NAME/\n          raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"          if out =~ /NT_STATUS_NETWORK_UNREACHABLE/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"         if out =~ /NT_STATUS_CONNECTION_REFUSED/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"         if out =~ /Receiving SMB: Server \\S+ stopped responding/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{src}'\"  if out =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n          raise Connector::PermissionDenied, \"permission denied for file '#{src}'\"          if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::NoSpaceLeft, \"no space left for file '#{src}'\"                   if out =~ /NT_STATUS_DISK_FULL/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if out =~ /NT_STATUS_ACCOUNT_DISABLED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if out =~ /NT_STATUS_ACCOUNT_LOCKED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if out =~ /NT_STATUS_FILE_IS_A_DIRECTORY opening remote file/\n          raise Connector::PermissionDenied, \"unknown error '#{out}'\"                       if out =~ /session setup failed/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if out =~ /not a directory/\n        }\n      rescue\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"           if $!.message =~ /NT_STATUS_LOGON_FAILURE/\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"           if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                if $!.message =~ /NT_STATUS_UNSUCCESSFUL/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                if $!.message =~ /NT_STATUS_HOST_UNREACHABLE/\n        raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                 if $!.message =~ /NT_STATUS_BAD_NETWORK_NAME/\n        raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"          if $!.message =~ /NT_STATUS_NETWORK_UNREACHABLE/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"         if $!.message =~ /NT_STATUS_CONNECTION_REFUSED/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"         if $!.message =~ /Receiving SMB: Server \\S+ stopped responding/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{src}'\"  if $!.message =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n        raise Connector::PermissionDenied, \"permission denied for file '#{src}'\"          if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::NoSpaceLeft, \"no space left for file '#{src}'\"                   if $!.message =~ /NT_STATUS_DISK_FULL/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if $!.message =~ /NT_STATUS_ACCOUNT_DISABLED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if $!.message =~ /NT_STATUS_ACCOUNT_LOCKED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"         if $!.message =~ /not a directory/\n        raise $!\n      ensure\n        File.delete(@authfile) if File.exist?(@authfile)\n      end\n    end\n\n    def remove(file)\n      begin\n        File.open(@authfile, 'w', 0600) { |fd| fd.puts \"username = #{@login}\\npassword = #{@password}\\n\" }\n        STDERR.puts \"->removing #{file}\" if @debug\n\n        cmd = ''\n        file.split('/')[0...-1].each { |item|\n          next if item == ''\n          next if item == file.split('/')[1] # share\n          cmd = cmd + \"cd \\\\\\\"#{item}\\\\\\\"\\n\"\n        }\n\n        cmd = cmd + \"rm \\\\\\\"#{file.split('/').last}\\\\\\\"\\n\"\n        @sys.exec(\"echo \\\"#{cmd}\\\" | smbclient -E -g -A #{@authfile} -p #{@port} //#{@address}/#{@share} 2>&1\").split(\"\\n\").each { |out|\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if out =~ /NT_STATUS_LOGON_FAILURE/\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if out =~ /NT_STATUS_UNSUCCESSFUL/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if out =~ /NT_STATUS_HOST_UNREACHABLE/\n          raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                  if out =~ /NT_STATUS_BAD_NETWORK_NAME/\n          raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"           if out =~ /NT_STATUS_NETWORK_UNREACHABLE/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if out =~ /NT_STATUS_CONNECTION_REFUSED/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if out =~ /Receiving SMB: Server \\S+ stopped responding/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{file}'\"  if out =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{file}'\"  if out =~ /NT_STATUS_NO_SUCH_FILE/\n          raise Connector::PermissionDenied, \"permission denied for file '#{file}'\"          if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{file}'\"          if out =~ /NT_STATUS_CANNOT_DELETE/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /NT_STATUS_ACCOUNT_DISABLED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /NT_STATUS_ACCOUNT_LOCKED/\n          raise Connector::PermissionDenied, \"unknown error '#{out}'\"                        if out =~ /session setup failed/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /not a directory/\n        }\n      rescue\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if $!.message =~ /NT_STATUS_LOGON_FAILURE/\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if $!.message =~ /NT_STATUS_UNSUCCESSFUL/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if $!.message =~ /NT_STATUS_HOST_UNREACHABLE/\n        raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                  if $!.message =~ /NT_STATUS_BAD_NETWORK_NAME/\n        raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"           if $!.message =~ /NT_STATUS_NETWORK_UNREACHABLE/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if $!.message =~ /NT_STATUS_CONNECTION_REFUSED/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if $!.message =~ /Receiving SMB: Server \\S+ stopped responding/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{file}'\"  if $!.message =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{file}'\"  if $!.message =~ /NT_STATUS_NO_SUCH_FILE/\n        raise Connector::PermissionDenied, \"permission denied for file '#{file}'\"          if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{file}'\"          if $!.message =~ /NT_STATUS_CANNOT_DELETE/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /NT_STATUS_ACCOUNT_DISABLED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /NT_STATUS_ACCOUNT_LOCKED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /not a directory/\n        raise $!\n      ensure\n        File.delete(@authfile) if File.exist?(@authfile)\n      end\n    end\n\n    def rename(src, dst)\n      begin\n        File.open(@authfile, 'w', 0600) { |fd| fd.puts \"username = #{@login}\\npassword = #{@password}\\n\" }\n        STDERR.puts \"->renaming #{src} to #{dst}\" if @debug\n\n        cmd = ''\n        src.split('/')[0...-1].each { |item|\n          next if item == ''\n          next if item == src.split('/')[1] # share\n          cmd = cmd + \"cd \\\\\\\"#{item}\\\\\\\"\\n\"\n        }\n\n        cmd = cmd + \"rename \\\\\\\"#{src.split('/').last}\\\\\\\" \\\\\\\"#{dst.split('/').last}\\\\\\\"\\n\"\n        @sys.exec(\"echo \\\"#{cmd}\\\" | smbclient -E -g -A #{@authfile} -p #{@port} //#{@address}/#{@share} 2>&1\").split(\"\\n\").each { |out|\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if out =~ /NT_STATUS_LOGON_FAILURE/\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if out =~ /NT_STATUS_UNSUCCESSFUL/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if out =~ /NT_STATUS_HOST_UNREACHABLE/\n          raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                  if out =~ /NT_STATUS_BAD_NETWORK_NAME/\n          raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"           if out =~ /NT_STATUS_NETWORK_UNREACHABLE/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if out =~ /NT_STATUS_CONNECTION_REFUSED/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if out =~ /Receiving SMB: Server \\S+ stopped responding/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{dst}'\"   if out =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{dst}'\"   if out =~ /NT_STATUS_NO_SUCH_FILE/\n          raise Connector::PermissionDenied, \"permission denied for file '#{dst}'\"           if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::FileAlreadyExist, \"file already exist '#{dst}'\"                   if out =~ /NT_STATUS_OBJECT_NAME_COLLISION/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /NT_STATUS_ACCOUNT_DISABLED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /NT_STATUS_ACCOUNT_LOCKED/\n          raise Connector::PermissionDenied, \"unknown error '#{out}'\"                        if out =~ /session setup failed/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /not a directory/\n        }\n      rescue\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if $!.message =~ /NT_STATUS_LOGON_FAILURE/\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if $!.message =~ /NT_STATUS_UNSUCCESSFUL/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if $!.message =~ /NT_STATUS_HOST_UNREACHABLE/\n        raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                  if $!.message =~ /NT_STATUS_BAD_NETWORK_NAME/\n        raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"           if $!.message =~ /NT_STATUS_NETWORK_UNREACHABLE/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if $!.message =~ /NT_STATUS_CONNECTION_REFUSED/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if $!.message =~ /Receiving SMB: Server \\S+ stopped responding/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{dst}'\"   if $!.message =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{dst}'\"   if $!.message =~ /NT_STATUS_NO_SUCH_FILE/\n        raise Connector::PermissionDenied, \"permission denied for file '#{dst}'\"           if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::FileAlreadyExist, \"file already exist '#{dst}'\"                   if $!.message =~ /NT_STATUS_OBJECT_NAME_COLLISION/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /NT_STATUS_ACCOUNT_DISABLED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /NT_STATUS_ACCOUNT_LOCKED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /not a directory/\n        raise $!\n      ensure\n        File.delete(@authfile) if File.exist?(@authfile)\n      end\n    end\n\n    def list(path)\n      begin\n        File.open(@authfile, 'w', 0600) { |fd| fd.puts \"username = #{@login}\\npassword = #{@password}\\n\" }\n        STDERR.puts \"->listing #{path}\" if @debug\n        lines = []\n\n        cmd = ''\n        path.split('/').each { |item|\n          next if item == ''\n          next if item == path.split('/')[1] # share\n          cmd = cmd + \"cd \\\\\\\"#{item}\\\\\\\"\\n\"\n        }\n\n\n        cmd = cmd + \"dir\\n\"\n        @sys.exec(\"echo \\\"#{cmd}\\\" | smbclient -E -g -A #{@authfile} -p #{@port} //#{@address}/#{@share} 2>&1\").split(\"\\n\").each { |out|\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if out =~ /NT_STATUS_LOGON_FAILURE/\n          raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if out =~ /NT_STATUS_UNSUCCESSFUL/\n          raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if out =~ /NT_STATUS_HOST_UNREACHABLE/\n          raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                  if out =~ /NT_STATUS_BAD_NETWORK_NAME/\n          raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"           if out =~ /NT_STATUS_NETWORK_UNREACHABLE/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if out =~ /NT_STATUS_CONNECTION_REFUSED/\n          raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if out =~ /Receiving SMB: Server \\S+ stopped responding/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{path}'\"  if out =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{path}'\"  if out =~ /NT_STATUS_NO_SUCH_FILE/\n          raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{path}'\"  if out =~ /NT_STATUS_OBJECT_NAME_INVALID/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /NT_STATUS_ACCESS_DENIED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /NT_STATUS_ACCOUNT_DISABLED/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /NT_STATUS_ACCOUNT_LOCKED/\n          raise Connector::PermissionDenied, \"unknown error '#{out}'\"                        if out =~ /session setup failed/\n          raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if out =~ /not a directory/\n          lines << out\n        }\n\n        items = []\n        lines[0..(lines.length - 2)].each { |line|\n          next if line !~ /^\\s{2}\\S+/\n          next if line =~ /^\\s{2}\\.+/\n\n          words = line.split(' ')\n          next if words.length > 7 and words[(words.length - 7)].split('').include?('D')\n\n\n          file  = line[0..(line.length - 40)].strip\n          size  = words[(words.length - 6)]\n          mtime = Time.at(Time.parse((words[(words.length - 5)..(words.length - 1)]).join(' ')).to_i).to_s\n\n          i = {}\n          i['name']  = file\n          i['size']  = size\n          i['mtime'] = mtime\n          items << i\n        }\n\n        return items.sort { |a, b| a['name'] <=> b['name'] }\n      rescue\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if $!.message =~ /NT_STATUS_LOGON_FAILURE/\n        raise Connector::AuthenticationFailed, \"login refused by '#{@address}'\"            if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if $!.message =~ /NT_STATUS_UNSUCCESSFUL/\n        raise Connector::HostUnreachable, \"host unreachable '#{@address}'\"                 if $!.message =~ /NT_STATUS_HOST_UNREACHABLE/\n        raise Connector::BadNetworkName, \"bad network name '#{@address}'\"                  if $!.message =~ /NT_STATUS_BAD_NETWORK_NAME/\n        raise Connector::NetworkUnreachable, \"network unreachable '#{@address}'\"           if $!.message =~ /NT_STATUS_NETWORK_UNREACHABLE/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if $!.message =~ /NT_STATUS_CONNECTION_REFUSED/\n        raise Connector::ConnectionRefused, \"connection refused by '#{@address}'\"          if $!.message =~ /Receiving SMB: Server \\S+ stopped responding/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{path}'\"  if $!.message =~ /NT_STATUS_OBJECT_(NAME|PATH)_NOT_FOUND/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{path}'\"  if $!.message =~ /NT_STATUS_NO_SUCH_FILE/\n        raise Connector::NoSuchFileOrDirectory, \"cannot open file or directory '#{path}'\"  if $!.message =~ /NT_STATUS_OBJECT_NAME_INVALID/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /NT_STATUS_ACCESS_DENIED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /NT_STATUS_ACCOUNT_DISABLED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /NT_STATUS_ACCOUNT_LOCKED/\n        raise Connector::PermissionDenied, \"permission denied for file '#{path}'\"          if $!.message =~ /not a directory/\n        raise $!\n      ensure\n        File.delete(@authfile) if File.exist?(@authfile)\n      end\n    end\n  end\nend\n", "#\n# FileBroker - FileBrokerService\n# (c) 2010-2013 Jakub Zubielik <jakub.zubielik@nordea.com>\n#\n\nclass FBService < Sinatra::Base\n  # File status\n  FAILED_TO_ARCHIVE_FILE\t\t\t\t= 1\n  FAILED_TO_COMPRESS_FILE\t\t\t\t= 2\n  FAILED_TO_DECOMPRESS_FILE\t\t\t= 3\n  FAILED_TO_DECRYPT_FILE\t\t\t\t= 4\n  FAILED_TO_DOWNLOAD_MD5_FILE\t  = 5\n  FAILED_TO_DOWNLOAD_FILE\t\t\t\t= 6\n  FAILED_TO_ENCRYPT_FILE\t\t\t\t= 7\n  FAILED_TO_REMOVE_FILE\t\t\t\t\t= 8\n  FAILED_TO_REMOVE_MD5_FILE\t\t\t= 9\n  FAILED_TO_UPLOAD_FILE\t\t\t\t\t= 10\n  FAILED_TO_UPLOAD_MD5_FILE\t\t\t= 11\n  FAILED_TO_VERIFY_MD5\t\t\t\t\t= 12\n  FILE_ARCHIVED\t\t\t\t\t\t\t\t\t= 13\n  FILE_COMPRESSED\t\t\t\t\t\t\t\t= 14\n  FILE_DECOMPRESSED\t\t\t\t\t\t\t= 15\n  FILE_DECRYPTED\t\t\t\t\t\t\t\t= 16\n  FILE_DOWNLOADED\t\t\t\t\t\t\t\t= 17\n  FILE_ENCRYPTED\t\t\t\t\t\t\t\t= 18\n  FILE_REMOVED\t\t\t\t\t\t\t\t\t= 19\n  FILE_SCANNED\t\t\t\t\t\t\t\t\t= 20\n  FILE_UPLOADED\t\t\t\t\t\t\t\t\t= 21\n  INTERNAL_SYSTEM_ERROR         = 22\n  MALICIOUS_CODE_DETECTED\t\t\t\t= 23\n  MD5_FILE_DOWNLOADED\t\t\t\t\t\t= 24\n  MD5_FILE_REMOVED\t\t\t\t\t\t\t= 25\n  MD5_FILE_UPLOADED\t\t\t\t\t\t\t= 26\n  MD5_VERIFIED\t\t\t\t\t\t\t\t\t= 27\n  TRANSFER_COMPLETED\t\t\t\t\t\t= 28\n  TRANSFER_SCHEDULED\t\t\t\t\t\t= 29\n  FILE_ENCODED\t\t\t\t\t\t\t\t\t= 30\n  FAILED_TO_ENCODE_FILE\t\t\t\t\t= 31\n  FAILED_TO_CALCULATE_MD5\t\t\t\t= 32\n\n  # Transfer status\n  TRANSFER_RUNNING                = 33\n  TRANSFER_COMPLETED_SUCCESSFULLY = 34\n  TRANSFER_COMPLETED_WITH_ERRORS  = 35\n\n  class StopTransfer < StandardError\n  end\n\n  module SoapFault\n    class MustUnderstandError < StandardError\n      def fault_code\n        'MustUnderstand'\n      end\n    end\n\n    class ClientError < StandardError\n      def fault_code\n        'Client'\n      end\n    end\n  end\n\n  class CleanUpTemporaryFiles < StandardError\n  end\n\n  class InternalSystemError < StandardError\n  end\n\n  set :show_exceptions, false\n  set :root, \"#{File.dirname(__FILE__)}/..\"\n\n  configure do\n    mime_type :xml, 'text/xml'\n  end\n\n  def initialize(*args)\n    GC.enable\n\n    @avs\t= AVScanner.new\n    @db   = Database.new\n    @xsd \t= Nokogiri::XML::Schema(File.read(\"#{File.dirname(__FILE__)}/../public/filebroker_service.xsd\"))\n    @xslt = Nokogiri::XSLT(File.read(\"#{File.dirname(__FILE__)}/soap_body.xslt\"))\n    @sys\t= System.new\n    @gpg\t= GPG.new\n    @threads = []\n    @stderr_mutex = Mutex.new\n\n    @fb_shutdown = false\n    do_quit = Proc.new {\n      @fb_shutdown = true\n      @threads.each { |t| t.join }\n      sleep 0.5 while @threads.length > 0\n      Rack::Handler::WEBrick.shutdown\n      File.delete(\"#{File.dirname(__FILE__)}/../tmp/filebroker.pid\")\n    }\n\n    Signal.trap('SIGTERM', do_quit)\n    Signal.trap('SIGQUIT', do_quit)\n    Signal.trap('SIGINT',  do_quit)\n    Signal.trap('CLD', 'IGNORE')\n\n    super\n  end\n\n  # SOAP endpoint\n  post '/filebroker_service' do\n    begin\n\n      GC.enable\n      GC.start\n\n      soap_message = Nokogiri::XML(request.body.read)\n      soap_body = @xslt.transform(soap_message)\n      errors = @xsd.validate(soap_body).map{ |e| e.message }.join(', ')\n      raise(SoapFault::ClientError, errors) unless errors == ''\n\n      if @db.select_configuration('debug') == 'true'\n        log_msg = soap_message.to_s\n        log_msg = log_msg.gsub(/assword>.+<\\/.*assword>/, \"#{$1}******#{$2}\")              if log_msg =~ /(assword>).+(<\\/.*assword>)/\n        log_msg = log_msg.to_s.gsub(/PasswordDigest\">.+<\\/.*assword>/, \"#{$1}******#{$2}\") if log_msg =~ /(PasswordDigest\">).+(<\\/.*assword>)/\n        log_msg = log_msg.to_s.gsub(/PasswordText\">.+<\\/.*assword>/, \"#{$1}******#{$2}\")   if log_msg =~ /(PasswordText\">).+(<\\/.*assword>)/\n\n        log_path = \"#{File.dirname(__FILE__)}/../log/#{soap_operation_to_method(soap_body).to_s.gsub(/^do_/, '')}/#{Time.new.strftime(\"%Y-%m-%d\")}/\"\n        FileUtils.mkdir_p(log_path) if !Dir.exist?(log_path)\n        log_name = \"#{soap_operation_to_method(soap_body).to_s.gsub(/^do_/, '')}-#{DateTime.parse(Time.now.to_s)}-#{Digest::MD5.hexdigest(soap_body.to_s + rand(Time.now().to_i).to_s)}.log\"\n        File.open(\"#{log_path}/#{log_name}\", 'w') { |log| log.puts log_msg }\n      end\n\n      if soap_message.root.at_xpath('//soap:Header/*[@soap:mustUnderstand=\"1\" and not(@soap:actor)]', 'soap' => 'http://schemas.xmlsoap.org/soap/envelope/')\n        raise(SoapFault::MustUnderstandError, 'SOAP Must Understand Error', 'MustUnderstand')\n      end\n\n\n      auth_type = @db.select_configuration('auth')\n\n      if auth_type != 'none'\n        prefix \t = soap_message.root.namespace.prefix\n        login \t = soap_message.root.xpath(\"//#{prefix}:Envelope/#{prefix}:Header/wsse:Security/wsse:UsernameToken/wsse:Username\").text\n        password = soap_message.root.xpath(\"//#{prefix}:Envelope/#{prefix}:Header/wsse:Security/wsse:UsernameToken/wsse:Password\").text\n\n        client = {}\n        client['login'] = login\n        client = @db.get_client(client)\n        client = @db.get_client_acl(client)\n        raise(SoapFault::ClientError, 'not authorized') if [login, Digest::MD5.hexdigest(password).to_s] != [client['login'], client['password']]\n\n        got_access = false\n        @db.select_client_acl(client['client_id']).each { |ace|\n          ace_desc = @db.select_client_acl_desc(ace['ace_id'])\n          got_access = true if 'do_' + ace_desc.to_s == soap_operation_to_method(soap_body).to_s\n        }\n        raise(SoapFault::ClientError, 'method not allowed') if !got_access\n      end\n\n      if @fb_shutdown\n        builder(:fault, :locals => { :fault_string => 'Service unavailable', :fault_code => 'Server' })\n      else\n        @stderr_mutex.lock\n        STDERR.puts \"- -> Received request message type: #{soap_operation_to_method(soap_body).to_s}\"\n        @stderr_mutex.unlock\n        self.send(soap_operation_to_method(soap_body), soap_body)\n      end\n    rescue\n      err_msg = \"#{$!.backtrace.join(\"\\n\")}\\n#{$!.message}\\n\"\n      @stderr_mutex.try_lock\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      STDERR.puts \"Exception time: #{DateTime.parse(Time.now.to_s)}\"\n      STDERR.puts err_msg\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      @stderr_mutex.unlock\n\n      fault_code = $!.respond_to?(:fault_code) ? $!.fault_code : 'Server'\n      builder(:fault, :locals => { :fault_string => err_msg, :fault_code => fault_code })\n    end\n  end\n\n  # WSDL endpoint\n  get '/filebroker_service' do\n    if params.keys.first. != nil and params.keys.first.downcase == 'wsdl'\n      url = ENV['BASE_URL'] || \"http://#{request.env['SERVER_NAME']}:#{request.port}\"\n      url = ENV['BASE_URL'] || \"https://#{request.env['SERVER_NAME']}:#{request.port}\" if @db.select_configuration('ssl') == 'true'\n      erb(:filebroker_service_wsdl, :locals => { :url => url }, :content_type => :xml)\n    else\n      builder(:fault, :locals => { :fault_string => 'unknown parameter', :fault_code => 'Client' })\n    end\n  end\n\n  private\n\n  # Detect the SOAP operation based on the root element in the SOAP body\n  def soap_operation_to_method(soap_body)\n    method = ('do_' + soap_body.root.name.sub(/Request$/, '').gsub(/([A-Z]+)([A-Z][a-z])/,'\\1_\\2').gsub(/([a-z\\d])([A-Z])/,'\\1_\\2')).downcase.to_sym\n  end\n\n  # Transfer operation, send back transfer ID\n  def do_collection_transfer(soap_body)\n    begin\n      prefix = soap_body.root.namespace.prefix\n\n      transfer = {}\n      transfer['transfer_id']                   = Digest::MD5.hexdigest(soap_body.to_s + rand(Time.now().to_i).to_s)\n\n      transfer['source'] = {}\n      transfer['source']['protocol'] \t          = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:Protocol/text()\").to_s.downcase\n      transfer['source']['address'] \t          = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:Address/text()\").to_s\n      transfer['source']['port'] \t\t            = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:Port/text()\").to_s\n      transfer['source']['login'] \t            = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:Login/text()\").to_s\n      transfer['source']['password'] \t          = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:Password/text()\").to_s\n      transfer['source']['path'] \t\t            = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:Path/text()\").to_s\n      transfer['source']['passive'] \t          = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:PassiveMode/text()\").to_s\n      transfer['source']['binary'] \t            = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:BinaryMode/text()\").to_s\n      transfer['source']['text'] \t\t            = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:TextMode/text()\").to_s\n      transfer['source']['presite'] \t          = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:PreSite/text()\").to_s\n      transfer['source']['postsite'] \t          = soap_body.xpath(\"//#{prefix}:Source/#{prefix}:PostSite/text()\").to_s\n\n      transfer['source']['files'] = []\n      soap_body.xpath(\"//#{prefix}:Source/#{prefix}:Files\").each { |node|\n        node.xpath(\"//#{prefix}:File\").each { |x|\n          transfer['source']['files'] << x.text.to_s\n        }\n      }\n\n      transfer['target'] = {}\n      transfer['target']['protocol'] \t          = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:Protocol/text()\").to_s.downcase\n      transfer['target']['address'] \t          = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:Address/text()\").to_s\n      transfer['target']['port'] \t\t            = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:Port/text()\").to_s\n      transfer['target']['login'] \t            = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:Login/text()\").to_s\n      transfer['target']['password'] \t          = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:Password/text()\").to_s\n      transfer['target']['path'] \t\t            = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:Path/text()\").to_s\n      transfer['target']['passive'] \t          = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:PassiveMode/text()\").to_s\n      transfer['target']['binary'] \t            = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:BinaryMode/text()\").to_s\n      transfer['target']['text'] \t\t            = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:TextMode/text()\").to_s\n      transfer['target']['presite'] \t          = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:PreSite/text()\").to_s\n      transfer['target']['postsite'] \t          = soap_body.xpath(\"//#{prefix}:Target/#{prefix}:PostSite/text()\").to_s\n\n      transfer['options'] = {}\n      transfer['options']['archive']\t \t\t\t    = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Archive/text()\").to_s\n      transfer['options']['avscanning'] \t\t\t  = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:AVScanning/text()\").to_s\n      transfer['options']['compression'] \t\t\t  = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Compression/text()\").to_s\n      transfer['options']['decompression'] \t\t  = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Decompression/text()\").to_s\n      transfer['options']['remove_source_file'] = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:RemoveSourceFile/text()\").to_s\n      transfer['options']['md5']\t \t\t\t\t      = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:MD5/text()\").to_s\n      transfer['options']['direct_upload'] \t\t  = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:DirectUpload/text()\").to_s\n      transfer['options']['filename_suffix'] \t\t= soap_body.xpath(\"//#{prefix}:Options/#{prefix}:FilenameSuffix/text()\").to_s\n      transfer['options']['dec_method']         = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Decryption/#{prefix}:Method/text()\").to_s.downcase\n      transfer['options']['dec_key_id']         = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Decryption/#{prefix}:KeyID/text()\").to_s\n      transfer['options']['enc_method']         = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Encryption/#{prefix}:Method/text()\").to_s.downcase\n      transfer['options']['enc_key_id']         = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Encryption/#{prefix}:KeyID/text()\").to_s\n      transfer['options']['encoding_from'] \t\t\t= soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Encoding/#{prefix}:From/text()\").to_s\n      transfer['options']['encoding_to'] \t\t\t  = soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Encoding/#{prefix}:To/text()\").to_s\n\n      transfer['options']['enc_recipients'] = []\n      soap_body.xpath(\"//#{prefix}:Options/#{prefix}:Encryption\").each { |node|\n        node.xpath(\"//#{prefix}:Recipient\").each { |x|\n          transfer['options']['enc_recipients'] << x.text.to_s\n        }\n      }\n\n      transfer['source']['files'].sort! { |x, y| String.natcmp(x, y)}\n\n      @threads << Thread.new {\n        begin\n          err = File.open(\"log/transfer/#{transfer['transfer_id']}.log\", 'w')\n          err.sync = true\n          err.puts \"Trace file for transfer request: #{transfer['transfer_id']}\"\n          err.puts \"Transfer started at: #{Time.now.to_s}\"\n\n          #\n          # Add unknown transfer endpoints\n          #\n\n          begin\n            transfer['source'] = @db.select_account(transfer['source'])\n          rescue Database::AccountNotExist\n            transfer['source'] = @db.insert_account(transfer['source'])\n          end\n\n          begin\n            transfer['target'] = @db.select_account(transfer['target'])\n          rescue Database::AccountNotExist\n            transfer['target'] = @db.insert_account(transfer['target'])\n          end\n\n\n          #\n          # Set initial transfer status\n          #\n\n          transfer_id = @db.insert_transfer(transfer['transfer_id'],\n                                            transfer['source']['account_id'],\n                                            transfer['target']['account_id'],\n                                            transfer['source']['path'],\n                                            transfer['target']['path'])\n\n          @db.insert_transfer_status(transfer_id, FBService::TRANSFER_RUNNING, DateTime.now)\n\n\n          #\n          # Set initial file status\n          #\n\n          @db.insert_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::TRANSFER_SCHEDULED, DateTime.now) if transfer['options']['md5'] != ''\n          transfer['source']['files'].each { |file| @db.insert_file_status(transfer_id, file, FBService::TRANSFER_SCHEDULED, DateTime.now) }\n\n\n          #\n          # Download files\n          #\n\n          files_download  = []\n          if transfer['source']['protocol'] == 'cifs'\n            src_conn = Connector::CIFS.new\n            src_conn.address \t  = transfer['source']['address']\n            src_conn.port \t\t  = transfer['source']['port']\n            src_conn.login \t\t  = transfer['source']['login']\n            src_conn.password \t= transfer['source']['password']\n            src_conn.share \t    = transfer['source']['path'].split('/')[1]\n\n            begin\n              src_conn.connect\n              src_conn.cd(transfer['source']['path'])\n              Dir.mkdir(\"process/#{transfer['transfer_id']}\", 0700)\n            rescue\n              transfer['source']['files'].each { |file| @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DOWNLOAD_FILE, DateTime.now) }\n              raise FBService::StopTransfer, $!\n            end\n\n            if transfer['options']['md5'] != ''\n              begin\n                src_conn.get(transfer['options']['md5'], \"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\")\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::MD5_FILE_DOWNLOADED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::FAILED_TO_DOWNLOAD_MD5_FILE, DateTime.now)\n                raise FBService::StopTransfer, $!\n              end\n            end\n\n            transfer['source']['files'].each { |file|\n              begin\n                src_conn.get(\"#{transfer['source']['path']}/#{file}\", \"process/#{transfer['transfer_id']}/#{file}\")\n                files_download << file\n                @db.update_file_status(transfer_id, file, FBService::FILE_DOWNLOADED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DOWNLOAD_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n              end\n            }\n\n            src_conn.disconnect\n          elsif transfer['source']['protocol'] == 'ftp'\n            src_conn = Connector::FTP.new\n            src_conn.address \t= transfer['source']['address']\n            src_conn.port \t\t= transfer['source']['port']\n            src_conn.login \t\t= transfer['source']['login']\n            src_conn.password = transfer['source']['password']\n            src_conn.passive \t= transfer['source']['passive']\n            src_conn.binary \t= transfer['source']['binary']\n            src_conn.text \t\t= transfer['source']['text']\n            src_conn.presite \t= transfer['source']['presite']\n            src_conn.postsite = transfer['source']['postsite']\n\n            begin\n              src_conn.connect\n              Dir.mkdir(\"process/#{transfer['transfer_id']}\", 0700)\n            rescue\n              transfer['source']['files'].each { |file| @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DOWNLOAD_FILE, DateTime.now) }\n              raise FBService::StopTransfer, $!\n            end\n\n            if transfer['options']['md5'] != ''\n              begin\n                src_conn.get(transfer['options']['md5'], \"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\")\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::MD5_FILE_DOWNLOADED, DateTime.now)\n              rescue\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::FAILED_TO_DOWNLOAD_MD5_FILE, DateTime.now)\n                raise FBService::StopTransfer, $!\n              end\n            end\n\n            transfer['source']['files'].each { |file|\n              begin\n                src_conn.get(\"#{transfer['source']['path']}/#{file}\", \"process/#{transfer['transfer_id']}/#{file}\")\n                files_download << file\n                @db.update_file_status(transfer_id, file, FBService::FILE_DOWNLOADED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DOWNLOAD_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n              end\n            }\n\n            src_conn.disconnect\n          elsif transfer['source']['protocol'] == 'sftp'\n            begin\n              src_conn = Connector::SFTP.new\n              src_conn.address \t= transfer['source']['address']\n              src_conn.port \t\t= transfer['source']['port']\n              src_conn.login \t\t= transfer['source']['login']\n              src_conn.password = transfer['source']['password']\n\n              begin\n                src_conn.connect\n                Dir.mkdir(\"process/#{transfer['transfer_id']}\", 0700)\n              rescue\n                transfer['source']['files'].each { |file| @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DOWNLOAD_FILE, DateTime.now) }\n                raise FBService::StopTransfer, $!\n              end\n\n              if transfer['options']['md5'] != ''\n                begin\n                  src_conn.get(transfer['options']['md5'], \"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\")\n                  @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::MD5_FILE_DOWNLOADED, DateTime.now)\n                rescue\n                  @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::FAILED_TO_DOWNLOAD_MD5_FILE, DateTime.now)\n                  raise FBService::StopTransfer, $!\n                end\n              end\n\n              transfer['source']['files'].each { |file|\n                begin\n                  src_conn.get(\"#{transfer['source']['path']}/#{file}\", \"process/#{transfer['transfer_id']}/#{file}\")\n                  files_download << file\n                  @db.update_file_status(transfer_id, file, FBService::FILE_DOWNLOADED, DateTime.now)\n                rescue\n                  err.puts \"Exception raised at: #{Time.now.to_s}\"\n                  err.puts $!.backtrace\n                  err.puts $!.message\n                  @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DOWNLOAD_FILE, DateTime.now)\n                  File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n                end\n              }\n\n              src_conn.disconnect\n            rescue\n              @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DOWNLOAD_FILE, DateTime.now)\n              raise FBService::InternalSystemError, $!.to_s\n            end\n          end\n\n\n          #\n          # Process files\n          #\n\n          files_remove = files_download.dup\n          files_download.each { |file|\n\n            #\n            # Archive files\n            #\n\n            if transfer['options']['archive'] == 'true'\n              begin\n                @sys.archive(transfer['transfer_id'], file)\n                @db.update_file_status(transfer_id, file, FBService::FILE_ARCHIVED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_ARCHIVE_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\")\n              end\n            end\n\n\n            #\n            # Verify files\n            #\n\n            if transfer['options']['md5'] != ''\n              begin\n                src_md5 = ''\n                cur_md5 = Digest::MD5.new()\n\n                File.open(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\", 'r').readlines.each { |l|\n                  if l =~ /^(\\S{32})\\s+#{file}$/\n                    src_md5 = $1\n                    break\n                  end\n                }\n\n                File.open(\"process/#{transfer['transfer_id']}/#{file}\", 'r').each_line { |l| cur_md5 << l }\n                raise System::IncorrectMD5, \"incorrect md5 for file '#{file}'\" if cur_md5.hexdigest != src_md5\n                @db.update_file_status(transfer_id, file, FBService::MD5_VERIFIED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_VERIFY_MD5, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\")\n                files_remove.delete_if { |t| t == file }\n                next\n              end\n            end\n\n\n            #\n            # Decrypt files\n            #\n\n            if transfer['options']['dec_method'] == 'gpg' or transfer['options']['dec_method'] == 'pgp'\n              begin\n                @gpg.decrypt(\"process/#{transfer['transfer_id']}/#{file}\")\n                @db.update_file_status(transfer_id, file, FBService::FILE_DECRYPTED, DateTime.now)\n                if file =~ /^(.+)\\.([gpg|pgp|asc]{3})$/\n                  file = $1\n                end\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DECRYPT_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n                files_remove.delete_if { |t| t == file }\n                next\n              end\n            elsif transfer['options']['dec_method'] =~ /des-blb/\n              begin\n                key = File.open(\"etc/keys/#{transfer['options']['dec_key_id']}.key\", 'r').readlines.first.strip\n                @sys.exec(\"sbin/des-blb-i386 -D -u -k '#{key}' process/#{transfer['transfer_id']}/#{file} process/#{transfer['transfer_id']}/#{file}.dec\")\n                File.rename(\"process/#{transfer['transfer_id']}/#{file}.dec\", \"process/#{transfer['transfer_id']}/#{file}\")\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DECRYPT_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}.dec\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}.dec\")\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n                files_remove.delete_if { |t| t == file }\n                next\n              end\n            end\n\n\n            #\n            # Decompress files\n            #\n\n            if transfer['options']['decompression'] == 'true'\n              begin\n                @sys.decompress(transfer['transfer_id'], file)\n                @db.update_file_status(transfer_id, file, FBService::FILE_DECOMPRESSED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_DECOMPRESS_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n                files_remove.delete_if { |t| t == file }\n                next\n              end\n            end\n          }\n\n\n          #\n          # Remove old MD5 file\n          #\n\n          if transfer['options']['md5'] != ''\n            begin\n              File.unlink(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\")\n            rescue\n              err.puts \"Exception raised at: #{Time.now.to_s}\"\n              err.puts $!.backtrace\n              err.puts $!.message\n            end\n          end\n\n\n          #\n          # Process files\n          #\n\n\n          files_process = Dir.entries(\"process/#{transfer['transfer_id']}\").sort { |x, y| String.natcmp(x, y)}\n          files_process.each { |file|\n            next if File.directory?(file)\n\n            #\n            # AV scanning\n            #\n\n            if transfer['options']['avscanning'] == 'true'\n              begin\n                @avs.scan(\"process/#{transfer['transfer_id']}/#{file}\")\n                @db.update_file_status(transfer_id, file, FBService::FILE_SCANNED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::MALICIOUS_CODE_DETECTED, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\")\n                next\n              end\n            end\n\n\n            # File encoding\n            if transfer['options']['encoding_from'] != '' and transfer['options']['encoding_to'] != ''\n              begin\n                @sys.iconv(\"process/#{transfer['transfer_id']}/#{file}\", transfer['options']['encoding_from'], transfer['options']['encoding_to'], true)\n                @db.update_file_status(transfer_id, file, FBService::FILE_ENCODED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_ENCODE_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\")\n                next\n              end\n            end\n          }\n\n\n          #\n          # Compress files\n          #\n\n          if transfer['options']['compression'] != ''\n            files_compress = Dir.entries(\"process/#{transfer['transfer_id']}\")\n            files_compress.each { |file|\n              next if File.directory?(file)\n\n              begin\n                @sys.compress(transfer['transfer_id'], file, transfer['options']['compression'])\n                @db.update_file_status(transfer_id, file, FBService::FILE_COMPRESSED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_COMPRESS_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\")\n                next\n              end\n            }\n          end\n\n\n          #\n          # Encrypt files\n          #\n\n          if transfer['options']['enc_method'] == 'gpg' or transfer['options']['enc_method'] == 'pgp'\n            files_compress = Dir.entries(\"process/#{transfer['transfer_id']}\")\n            files_compress.each { |file|\n              next if File.directory?(file)\n              next if file == transfer['options']['md5'].split('/').last\n\n              begin\n                @gpg.encrypt(\"process/#{transfer['transfer_id']}/#{file}\", transfer['options']['enc_recipients'])\n                @db.update_file_status(transfer_id, file, FBService::FILE_ENCRYPTED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_ENCRYPT_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\")\n                files_remove.delete_if { |t| t == file }\n                next\n              end\n            }\n          elsif transfer['options']['enc_method'] =~ /des/\n            files_compress = Dir.entries(\"process/#{transfer['transfer_id']}\")\n            files_compress.each { |file|\n              next if File.directory?(file)\n              next if file == transfer['options']['md5'].split('/').last\n\n              begin\n                @sys.exec(\"openssl enc -e -#{transfer['options']['enc_method']} -kfile etc/keys/#{transfer['options']['enc_key_id']}.key -in process/#{transfer['transfer_id']}/#{file} -out process/#{transfer['transfer_id']}/#{file}.enc\")\n                File.rename(\"process/#{transfer['transfer_id']}/#{file}.enc\", \"process/#{transfer['transfer_id']}/#{file}\")\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_ENCRYPT_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}.enc\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}.enc\")\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n                files_remove.delete_if { |t| t == file }\n              end\n            }\n          end\n\n          #\n          # Recalculate MD5\n          #\n\n          if transfer['options']['md5'] != ''\n            files_md5 = Dir.entries(\"process/#{transfer['transfer_id']}\")\n            files_md5.each { |file|\n              next if File.directory?(file)\n              next if file == transfer['options']['md5'].split('/').last\n\n              begin\n                cur_md5 = Digest::MD5.new()\n                File.open(\"process/#{transfer['transfer_id']}/#{file}\", 'r').each_line { |l| cur_md5 << l }\n\n                File.open(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\", 'a') { |f|\n                  f << \"#{cur_md5}  #{file}\\n\"\n                }\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_CALCULATE_MD5, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\")\n                next\n              end\n            }\n          end\n\n          #\n          # Upload files\n          #\n\n          files_upload = Dir.entries(\"process/#{transfer['transfer_id']}\").sort { |x, y| String.natcmp(x, y)}\n          files_upload.delete_at(files_upload.find_index(transfer['options']['md5'].split('/').last)) if transfer['options']['md5'] != ''\n\n\n          if transfer['target']['protocol'] == 'cifs'\n            trg_conn = Connector::CIFS.new\n            trg_conn.address \t= transfer['target']['address']\n            trg_conn.port \t\t= transfer['target']['port']\n            trg_conn.login \t\t= transfer['target']['login']\n            trg_conn.password = transfer['target']['password']\n            trg_conn.share \t  = transfer['target']['path'].split('/')[1]\n\n            begin\n              trg_conn.connect\n              trg_conn.cd(transfer['target']['path'])\n            rescue\n              files_upload.each { |file|\n                next if File.directory?(file)\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_UPLOAD_FILE, DateTime.now)\n              }\n              raise FBService::StopTransfer, $!\n            end\n\n            files_upload.each { |file|\n              next if File.directory?(file)\n\n              begin\n                if transfer['options']['direct_upload'] == 'true'\n                  trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"#{transfer['target']['path']}/#{file}\") if transfer['options']['filename_suffix'] == ''\n                  trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"#{transfer['target']['path']}/#{file}#{transfer['options']['filename_suffix']}\") if transfer['options']['filename_suffix'] != ''\n                else\n                  trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"#{transfer['target']['path']}/#{file}.partial\")\n                  trg_conn.rename(\"#{transfer['target']['path']}/#{file}.partial\", \"#{transfer['target']['path']}/#{file}\") if transfer['options']['filename_suffix'] == ''\n                  trg_conn.rename(\"#{transfer['target']['path']}/#{file}.partial\", \"#{transfer['target']['path']}/#{file}#{transfer['options']['filename_suffix']}\") if transfer['options']['filename_suffix'] != ''\n                end\n\n                @db.update_file_status(transfer_id, file, FBService::FILE_UPLOADED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_UPLOAD_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n                files_remove.delete_if { |t| t == file }\n                files_remove.delete_if { |t| t == file.gsub(/\\.gpg/, '') }\n                next\n              end\n            }\n\n\n            if transfer['options']['md5'] != '' and files_remove.length > 0\n              begin\n                if transfer['options']['direct_upload'] == 'true'\n                  if transfer['options']['filename_suffix'] == ''\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}\")\n                  else\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}#{transfer['options']['filename_suffix']}\")\n                  end\n                else\n                  if transfer['options']['filename_suffix'] == ''\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\")\n                    trg_conn.rename(\"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\",\n                                    \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}\")\n                  else\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\")\n                    trg_conn.rename(\"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\",\n                                    \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}#{transfer['options']['filename_suffix']}\")\n                  end\n                end\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::MD5_FILE_UPLOADED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::FAILED_TO_UPLOAD_MD5_FILE, DateTime.now)\n              end\n            end\n\n            trg_conn.disconnect\n          elsif transfer['target']['protocol'] == 'ftp'\n            trg_conn = Connector::FTP.new\n            trg_conn.address \t= transfer['target']['address']\n            trg_conn.port \t\t= transfer['target']['port']\n            trg_conn.login \t\t= transfer['target']['login']\n            trg_conn.password = transfer['target']['password']\n            trg_conn.passive \t= transfer['target']['passive']\n            trg_conn.binary \t= transfer['target']['binary']\n            trg_conn.text \t\t= transfer['target']['text']\n            trg_conn.presite \t= transfer['target']['presite']\n            trg_conn.postsite = transfer['target']['postsite']\n\n            begin\n              trg_conn.connect\n            rescue\n              files_upload.each { |file|\n                next if File.directory?(file)\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_UPLOAD_FILE, DateTime.now)\n              }\n              raise FBService::StopTransfer, $!\n            end\n\n            files_upload.each { |file|\n              next if File.directory?(file)\n\n              begin\n                if transfer['options']['direct_upload'] == 'true'\n                  # EXCEPTION FOR MVS - OMIT PATH AND PUT FILENAME IN ''\n                  #trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"#{transfer['target']['path']}/#{file}\") if transfer['options']['filename_suffix'] == ''\n                  #if transfer['options']['filename_suffix'] != ''\n                  #  trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"#{transfer['target']['path']}/#{file}#{transfer['options']['filename_suffix']}\")\n                  #end\n                  trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"'#{file}'\") if transfer['options']['filename_suffix'] == ''\n                  if transfer['options']['filename_suffix'] != ''\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"'#{file}#{transfer['options']['filename_suffix']}'\")\n                  end\n                else\n                  trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"#{transfer['target']['path']}/#{file}.partial\")\n                  trg_conn.rename(\"#{transfer['target']['path']}/#{file}.partial\", \"#{transfer['target']['path']}/#{file}\") if transfer['options']['filename_suffix'] == ''\n                  if transfer['options']['filename_suffix'] != ''\n                    trg_conn.rename(\"#{transfer['target']['path']}/#{file}.partial\", \"#{transfer['target']['path']}/#{file}#{transfer['options']['filename_suffix']}\")\n                  end\n                end\n\n                @db.update_file_status(transfer_id, file, FBService::FILE_UPLOADED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_UPLOAD_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n                files_remove.delete_if { |t| t == file }\n                files_remove.delete_if { |t| t == file.gsub(/\\.gpg/, '') }\n                next\n              end\n            }\n\n            if transfer['options']['md5'] != '' and files_remove.length > 0\n              begin\n                if transfer['options']['direct_upload'] == 'true'\n                  if transfer['options']['filename_suffix'] == ''\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}\")\n                  else\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}#{transfer['options']['filename_suffix']}\")\n                  end\n                else\n                  if transfer['options']['filename_suffix'] == ''\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\")\n                    trg_conn.rename(\"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\",\n                                    \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}\")\n                  else\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\")\n                    trg_conn.rename(\"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\",\n                                    \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}#{transfer['options']['filename_suffix']}\")\n                  end\n                end\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::MD5_FILE_UPLOADED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::FAILED_TO_UPLOAD_MD5_FILE, DateTime.now)\n              end\n            end\n\n            trg_conn.disconnect\n          elsif transfer['target']['protocol'] == 'sftp'\n            trg_conn = Connector::SFTP.new\n            trg_conn.address \t= transfer['target']['address']\n            trg_conn.port \t\t= transfer['target']['port']\n            trg_conn.login \t\t= transfer['target']['login']\n            trg_conn.password = transfer['target']['password']\n\n            begin\n              trg_conn.connect\n            rescue\n              files_upload.each { |file|\n                next if File.directory?(file)\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_UPLOAD_FILE, DateTime.now)\n              }\n              raise FBService::StopTransfer, $!\n            end\n\n            files_upload.each { |file|\n              next if File.directory?(file)\n\n              begin\n                if transfer['options']['direct_upload'] == 'true'\n                  trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"#{transfer['target']['path']}/#{file}\") if transfer['options']['filename_suffix'] == ''\n                  if transfer['options']['filename_suffix'] != ''\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"#{transfer['target']['path']}/#{file}#{transfer['options']['filename_suffix']}\")\n                  end\n                else\n                  trg_conn.put(\"process/#{transfer['transfer_id']}/#{file}\", \"#{transfer['target']['path']}/#{file}.partial\")\n                  trg_conn.rename(\"#{transfer['target']['path']}/#{file}.partial\", \"#{transfer['target']['path']}/#{file}\") if transfer['options']['filename_suffix'] == ''\n                  if transfer['options']['filename_suffix'] != ''\n                    trg_conn.rename(\"#{transfer['target']['path']}/#{file}.partial\", \"#{transfer['target']['path']}/#{file}#{transfer['options']['filename_suffix']}\")\n                  end\n                end\n\n                @db.update_file_status(transfer_id, file, FBService::FILE_UPLOADED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message.to_s\n                @db.update_file_status(transfer_id, file, FBService::FAILED_TO_UPLOAD_FILE, DateTime.now)\n                File.unlink(\"process/#{transfer['transfer_id']}/#{file}\") if File.exist?(\"process/#{transfer['transfer_id']}/#{file}\")\n                files_remove.delete_if { |t| t == file }\n                files_remove.delete_if { |t| t == file.gsub(/\\.gpg/, '') }\n                next\n              end\n            }\n\n            if transfer['options']['md5'] != '' and files_remove.length > 0\n              begin\n                if transfer['options']['direct_upload'] == 'true'\n                  if transfer['options']['filename_suffix'] == ''\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}\")\n                  else\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}#{transfer['options']['filename_suffix']}\")\n                  end\n                else\n                  if transfer['options']['filename_suffix'] == ''\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\")\n                    trg_conn.rename(\"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\",\n                                    \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}\")\n                  else\n                    trg_conn.put(\"process/#{transfer['transfer_id']}/#{transfer['options']['md5'].split('/').last}\",\n                                 \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\")\n                    trg_conn.rename(\"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}.partial\",\n                                    \"#{transfer['target']['path']}/#{transfer['options']['md5'].split('/').last}#{transfer['options']['filename_suffix']}\")\n                  end\n                end\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::MD5_FILE_UPLOADED, DateTime.now)\n              rescue\n                err.puts \"Exception raised at: #{Time.now.to_s}\"\n                err.puts $!.backtrace\n                err.puts $!.message.to_s\n                @db.update_file_status(transfer_id, transfer['options']['md5'].split('/').last, FBService::FAILED_TO_UPLOAD_MD5_FILE, DateTime.now)\n              end\n            end\n\n            trg_conn.disconnect\n          end\n\n\n          #\n          # Removing source files\n          #\n\n          if transfer['options']['remove_source_file'] == 'true'\n            if transfer['source']['protocol'] == 'cifs'\n              src_conn = Connector::CIFS.new\n              src_conn.address \t= transfer['source']['address']\n              src_conn.port \t\t= transfer['source']['port']\n              src_conn.login \t\t= transfer['source']['login']\n              src_conn.password = transfer['source']['password']\n              src_conn.share \t  = transfer['source']['path'].split('/')[1]\n\n              begin\n                src_conn.connect\n                src_conn.cd(transfer['source']['path'])\n              rescue\n                files_remove.each { |file|\n                  next if File.directory?(file)\n                  @db.update_file_status(transfer_id, file, FBService::FAILED_TO_REMOVE_FILE, DateTime.now)\n                }\n                raise FBService::StopTransfer, $!\n              end\n\n              files_remove.each { |file|\n                begin\n                  src_conn.remove(\"#{transfer['source']['path']}/#{file}\")\n                  @db.update_file_status(transfer_id, file, FBService::FILE_REMOVED, DateTime.now)\n                rescue\n                  err.puts \"Exception raised at: #{Time.now.to_s}\"\n                  err.puts $!.backtrace\n                  err.puts $!.message.to_s\n                  @db.update_file_status(transfer_id, file, FBService::FAILED_TO_REMOVE_FILE, DateTime.now)\n                  next\n                end\n              }\n\n              if transfer['options']['md5'] != '' and files_remove.length > 0\n                begin\n                  src_conn.remove(transfer['options']['md5'])\n                  @db.update_file_status(transfer_id, File.split(transfer['options']['md5']).last, FBService::MD5_FILE_REMOVED, DateTime.now)\n                rescue\n                  err.puts \"Exception raised at: #{Time.now.to_s}\"\n                  err.puts $!.backtrace\n                  err.puts $!.message.to_s\n                  @db.update_file_status(transfer_id, File.split(transfer['options']['md5']).last, FBService::FAILED_TO_REMOVE_MD5_FILE, DateTime.now)\n                end\n              end\n\n              src_conn.disconnect\n            elsif transfer['source']['protocol'] == 'ftp'\n              src_conn = Connector::FTP.new\n              src_conn.address \t= transfer['source']['address']\n              src_conn.port \t\t= transfer['source']['port']\n              src_conn.login \t\t= transfer['source']['login']\n              src_conn.password = transfer['source']['password']\n\n              begin\n                src_conn.connect\n              rescue\n                files_remove.each { |file|\n                  next if File.directory?(file)\n                  @db.update_file_status(transfer_id, file, FBService::FAILED_TO_REMOVE_FILE, DateTime.now)\n                }\n                raise FBService::StopTransfer, $!\n              end\n\n              files_remove.each { |file|\n                begin\n                  src_conn.remove(\"#{transfer['source']['path']}/#{file}\")\n                  @db.update_file_status(transfer_id, file, FBService::FILE_REMOVED, DateTime.now)\n                rescue\n                  err.puts \"Exception raised at: #{Time.now.to_s}\"\n                  err.puts $!.backtrace\n                  err.puts $!.message.to_s\n                  @db.update_file_status(transfer_id, file, FBService::FAILED_TO_REMOVE_FILE, DateTime.now)\n                  next\n                end\n              }\n\n              if transfer['options']['md5'] != '' and files_remove.length > 0\n                begin\n                  src_conn.remove(transfer['options']['md5'])\n                  @db.update_file_status(transfer_id, File.split(transfer['options']['md5']).last, FBService::MD5_FILE_REMOVED, DateTime.now)\n                rescue\n                  err.puts \"Exception raised at: #{Time.now.to_s}\"\n                  err.puts $!.backtrace\n                  err.puts $!.message.to_s\n                  @db.update_file_status(transfer_id, File.split(transfer['options']['md5']).last, FBService::FAILED_TO_REMOVE_MD5_FILE, DateTime.now)\n                end\n              end\n\n              src_conn.disconnect\n            elsif transfer['source']['protocol'] == 'sftp'\n              src_conn = Connector::SFTP.new\n              src_conn.address \t= transfer['source']['address']\n              src_conn.port \t\t= transfer['source']['port']\n              src_conn.login \t\t= transfer['source']['login']\n              src_conn.password = transfer['source']['password']\n\n              begin\n                src_conn.connect\n              rescue\n                files_remove.each { |file|\n                  next if File.directory?(file)\n                  @db.update_file_status(transfer_id, file, FBService::FAILED_TO_REMOVE_FILE, DateTime.now)\n                }\n                raise FBService::StopTransfer, $!\n              end\n\n              files_remove.each { |file|\n                begin\n                  src_conn.remove(\"#{transfer['source']['path']}/#{file}\")\n                  @db.update_file_status(transfer_id, file, FBService::FILE_REMOVED, DateTime.now)\n                rescue\n                  err.puts \"Exception raised at: #{Time.now.to_s}\"\n                  err.puts $!.backtrace\n                  err.puts $!.message.to_s\n                  @db.update_file_status(transfer_id, file, FBService::FAILED_TO_REMOVE_FILE, DateTime.now)\n                  next\n                end\n              }\n\n              if transfer['options']['md5'] != '' and files_remove.length > 0\n                begin\n                  src_conn.remove(transfer['options']['md5'])\n                  @db.update_file_status(transfer_id, File.split(transfer['options']['md5']).last, FBService::MD5_FILE_REMOVED, DateTime.now)\n                rescue\n                  err.puts \"Exception raised at: #{Time.now.to_s}\"\n                  err.puts $!.backtrace\n                  err.puts $!.message.to_s\n                  @db.update_file_status(transfer_id, File.split(transfer['options']['md5']).last, FBService::FAILED_TO_REMOVE_MD5_FILE, DateTime.now)\n                end\n              end\n\n              src_conn.disconnect\n            end\n          end\n\n          @db.select_file_status(transfer_id).each { |file|\n            if  file['status_id'].to_i == FBService::FILE_UPLOADED or\n                file['status_id'].to_i == FBService::FILE_REMOVED or\n                file['status_id'].to_i == FBService::MD5_FILE_UPLOADED or\n                file['status_id'].to_i == FBService::MD5_FILE_REMOVED\n              @db.update_file_status(transfer_id, file['filename'], FBService::TRANSFER_COMPLETED, DateTime.now)\n            end\n          }\n\n          err.puts \"Transfer finished at: #{Time.now.to_s}\"\n          err.close\n\n          got_errors = false\n          @db.select_file_status(transfer_id).each { |file|\n            got_errors = true if  file['status_id'].to_i == FBService::FAILED_TO_ARCHIVE_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_COMPRESS_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_DECOMPRESS_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_DECRYPT_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_DOWNLOAD_MD5_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_DOWNLOAD_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_ENCRYPT_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_REMOVE_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_REMOVE_MD5_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_UPLOAD_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_UPLOAD_MD5_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_VERIFY_MD5 or\n                file['status_id'].to_i == FBService::MALICIOUS_CODE_DETECTED or\n                file['status_id'].to_i == FBService::FAILED_TO_ENCODE_FILE or\n                file['status_id'].to_i == FBService::FAILED_TO_CALCULATE_MD5\n          }\n\n          @db.update_transfer_status(transfer_id, FBService::TRANSFER_COMPLETED_SUCCESSFULLY, DateTime.now) if !got_errors\n          @db.update_transfer_status(transfer_id, FBService::TRANSFER_COMPLETED_WITH_ERRORS,  DateTime.now) if  got_errors\n        rescue\n          err.puts \"Exception raised at: #{Time.now.to_s}\"\n          err.puts $!.backtrace\n          err.puts $!.message.to_s\n          err.puts \"Transfer finished at: #{Time.now.to_s}\"\n          err.close\n          @db.update_transfer_status(transfer_id, FBService::TRANSFER_COMPLETED_WITH_ERRORS, DateTime.now)\n        ensure\n          FileUtils.rm_rf(\"process/#{transfer['transfer_id']}\")\n          @threads.delete_if { |x| x == Thread.current }\n        end\n      }\n\n      builder(:collection_transfer_response, :locals => { :transfer_id => transfer['transfer_id'] })\n    rescue StandardError => e\n      err_msg = \"#{$!.backtrace.join(\"\\n\")}\\n#{$!.message}\\n\"\n      @stderr_mutex.try_lock\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      STDERR.puts \"Transfer ID: #{transfer['transfer_id']}\"\n      STDERR.puts \"Exception time: #{DateTime.parse(Time.now.to_s)}\"\n      STDERR.puts err_msg\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      @stderr_mutex.unlock\n\n      fault_code = e.respond_to?(:fault_code) ? e.fault_code : 'Server'\n      builder(:fault, :locals => { :fault_string => e.message, :fault_code => fault_code })\n    end\n  end\n\n  # Status operation, send back transfer status\n  def do_collection_status(soap_body)\n    begin\n      prefix = soap_body.root.namespace.prefix\n      transfer_id = soap_body.xpath(\"//#{prefix}:TransferID/text()\").to_s\n\n      status = @db.select_transfer_status(transfer_id)\n      status['status_desc'] = @db.select_transfer_status_desc(status['status_id'])\n      status['status_time'] = DateTime.parse(status['status_time'])\n\n      files  = []\n      @db.select_file_status(transfer_id).each { |file|\n        file['status_desc'] = @db.select_file_status_desc(file['status_id'])\n        file['status_type'] = @db.select_file_status_type(file['status_id'])\n        file['status_time'] = DateTime.parse(file['status_time'])\n        files << file\n      }\n\n      builder(:collection_status_response, :locals => { :transfer_id => transfer_id, :files => files, :status => status })\n    rescue\n      err_msg = \"#{$!.backtrace.join(\"\\n\")}\\n#{$!.message}\\n\"\n      @stderr_mutex.try_lock\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      STDERR.puts \"Exception time: #{DateTime.parse(Time.now.to_s)}\"\n      STDERR.puts err_msg\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      @stderr_mutex.unlock\n\n      builder(:fault, :locals => { :fault_string => 'failed to get status', :fault_code => 'Server' })\n    end\n  end\n\n  # List operation, send back remote directory list\n  def do_list(soap_body)\n    begin\n      prefix = soap_body.root.namespace.prefix\n\n      req = {}\n      req['protocol'] = soap_body.xpath(\"//#{prefix}:Protocol/text()\").to_s.downcase\n      req['address'] \t= soap_body.xpath(\"//#{prefix}:Address/text()\").to_s\n      req['port'] \t\t= soap_body.xpath(\"//#{prefix}:Port/text()\").to_s\n      req['login'] \t\t= soap_body.xpath(\"//#{prefix}:Login/text()\").to_s\n      req['password'] = soap_body.xpath(\"//#{prefix}:Password/text()\").to_s\n      req['path'] \t\t= soap_body.xpath(\"//#{prefix}:Path/text()\").to_s\n      req['filter_out_transferred'] = soap_body.xpath(\"//#{prefix}:FilterOutTransferred/text()\").to_s\n\n      begin\n        source = @db.select_account(req)\n      rescue Database::AccountNotExist\n        source = @db.insert_account(req)\n      end\n\n      list = []\n      if req['protocol'] == 'cifs'\n        conn = Connector::CIFS.new\n        conn.address \t= req['address']\n        conn.login \t\t= req['login']\n        conn.password = req['password']\n        conn.share \t  = req['path'].split('/')[1]\n        conn.connect\n        conn.cd(req['path'])\n        list = conn.list(req['path'])\n        conn.disconnect\n      elsif req['protocol'] == 'ftp'\n        conn = Connector::FTP.new\n        conn.address \t= req['address']\n        conn.port \t\t= req['port']\n        conn.login \t\t= req['login']\n        conn.password = req['password']\n        conn.connect\n        list = conn.list(req['path'])\n        conn.disconnect\n      elsif req['protocol'] == 'sftp'\n        conn = Connector::SFTP.new\n        conn.address \t= req['address']\n        conn.port \t\t= req['port']\n        conn.login \t\t= req['login']\n        conn.password = req['password']\n        conn.connect\n        list = conn.list(req['path'])\n        conn.disconnect\n      end\n\n      # Convert time format\n      list.map { |j| j['mtime'] = DateTime.parse(j['mtime']) }\n\n      # Remove currently transferring files\n      @db.select_running_transfers_by_source(FBService::TRANSFER_RUNNING, source['account_id'], source['path']).each { |i|\n        @db.select_transfer_files(i['transfer_id']).each { |j|\n          list.delete_if { |k| k['name'] == j['filename'] }\n        }\n      }\n\n      # Remove already transferred files - optional depends on FilterOutTransferred option\n      if source['filter_out_transferred'] == 'true'\n        list.delete_if { |k| \n          @db.select_files_by_transfer_status(FBService::TRANSFER_COMPLETED_SUCCESSFULLY, source['account_id'], source['path'], k['name']).ntuples() > 0\n        }\n      end\n\n      # Remove temporary files\n      list.delete_if { |j| j['name'] =~ /\\.partial$/ }\n\n      builder(:list_response, :locals => { :list => list })\n    rescue\n      err_msg = \"#{$!.backtrace.join(\"\\n\")}\\n#{$!.message}\\n\"\n      @stderr_mutex.try_lock\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      STDERR.puts \"Exception time: #{DateTime.parse(Time.now.to_s)}\"\n      STDERR.puts err_msg\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      @stderr_mutex.unlock\n\n      builder(:fault, :locals => { :fault_string => 'failed to list directory', :fault_code => 'Server' })\n    end\n  end\n\n  # Status operation, send back transfer trace log\n  def do_log(soap_body)\n    begin\n      prefix = soap_body.root.namespace.prefix\n      transfer_id = soap_body.xpath(\"//#{prefix}:TransferID/text()\").to_s\n      log = File.open(\"#{File.dirname(__FILE__)}/../log/transfer/#{transfer_id}.log\", 'r').readlines.join\n      log = \"\\n<![CDATA[\\n\" + log + \"]]>\\n\"\n      builder(:log_response, :locals => { :transfer_id => transfer_id, :log => log })\n    rescue\n      err_msg = \"#{$!.backtrace.join(\"\\n\")}\\n#{$!.message}\\n\"\n      @stderr_mutex.try_lock\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      STDERR.puts \"Exception time: #{DateTime.parse(Time.now.to_s)}\"\n      STDERR.puts err_msg\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      @stderr_mutex.unlock\n\n      builder(:fault, :locals => { :fault_string => 'failed to get log', :fault_code => 'Server' })\n    end\n  end\n\n  # Service status operation, send back last transfer time\n  def do_service_status(soap_body)\n    begin\n      time = 0\n      @db.select_last_transfers(1).each { |t| time = DateTime.parse(t['status_time']) }\n\n      builder(:service_status_response, :locals => { :time => time })\n    rescue\n      err_msg = \"#{$!.backtrace.join(\"\\n\")}\\n#{$!.message}\\n\"\n      @stderr_mutex.try_lock\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      STDERR.puts \"Exception time: #{DateTime.parse(Time.now.to_s)}\"\n      STDERR.puts err_msg\n      80.times { STDERR.print '-' }\n      STDERR.puts\n      @stderr_mutex.unlock\n\n      builder(:fault, :locals => { :fault_string => 'failed to get log', :fault_code => 'Server' })\n    end\n  end\nend\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xs:schema targetNamespace=\"http://nordea.com/filebroker\" xmlns=\"http://nordea.com/filebroker\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" attributeFormDefault=\"qualified\" elementFormDefault=\"qualified\" xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\n\n  <xs:simpleType name=\"EncodingType\">\n    <xs:restriction base=\"xs:string\">\n      <xs:enumeration value=\"437\" />\n      <xs:enumeration value=\"500\" />\n      <xs:enumeration value=\"500V1\" />\n      <xs:enumeration value=\"850\" />\n      <xs:enumeration value=\"851\" />\n      <xs:enumeration value=\"852\" />\n      <xs:enumeration value=\"855\" />\n      <xs:enumeration value=\"856\" />\n      <xs:enumeration value=\"857\" />\n      <xs:enumeration value=\"860\" />\n      <xs:enumeration value=\"861\" />\n      <xs:enumeration value=\"862\" />\n      <xs:enumeration value=\"863\" />\n      <xs:enumeration value=\"864\" />\n      <xs:enumeration value=\"865\" />\n      <xs:enumeration value=\"866\" />\n      <xs:enumeration value=\"866NAV\" />\n      <xs:enumeration value=\"869\" />\n      <xs:enumeration value=\"874\" />\n      <xs:enumeration value=\"904\" />\n      <xs:enumeration value=\"1026\" />\n      <xs:enumeration value=\"1046\" />\n      <xs:enumeration value=\"1047\" />\n      <xs:enumeration value=\"8859_1\" />\n      <xs:enumeration value=\"8859_2\" />\n      <xs:enumeration value=\"8859_3\" />\n      <xs:enumeration value=\"8859_4\" />\n      <xs:enumeration value=\"8859_5\" />\n      <xs:enumeration value=\"8859_6\" />\n      <xs:enumeration value=\"8859_7\" />\n      <xs:enumeration value=\"8859_8\" />\n      <xs:enumeration value=\"8859_9\" />\n      <xs:enumeration value=\"10646-1:1993\" />\n      <xs:enumeration value=\"10646-1:1993/UCS4/\" />\n      <xs:enumeration value=\"ANSI_X3.4-1968\" />\n      <xs:enumeration value=\"ANSI_X3.4-1986\" />\n      <xs:enumeration value=\"ANSI_X3.4\" />\n      <xs:enumeration value=\"ANSI_X3.110-1983\" />\n      <xs:enumeration value=\"ANSI_X3.110\" />\n      <xs:enumeration value=\"ARABIC\" />\n      <xs:enumeration value=\"ARABIC7\" />\n      <xs:enumeration value=\"ARMSCII-8\" />\n      <xs:enumeration value=\"ASCII\" />\n      <xs:enumeration value=\"ASMO-708\" />\n      <xs:enumeration value=\"ASMO_449\" />\n      <xs:enumeration value=\"BALTIC\" />\n      <xs:enumeration value=\"BIG-5\" />\n      <xs:enumeration value=\"BIG-FIVE\" />\n      <xs:enumeration value=\"BIG5-HKSCS\" />\n      <xs:enumeration value=\"BIG5\" />\n      <xs:enumeration value=\"BIG5HKSCS\" />\n      <xs:enumeration value=\"BIGFIVE\" />\n      <xs:enumeration value=\"BRF\" />\n      <xs:enumeration value=\"BS_4730\" />\n      <xs:enumeration value=\"CA\" />\n      <xs:enumeration value=\"CN-BIG5\" />\n      <xs:enumeration value=\"CN-GB\" />\n      <xs:enumeration value=\"CN\" />\n      <xs:enumeration value=\"CP-AR\" />\n      <xs:enumeration value=\"CP-GR\" />\n      <xs:enumeration value=\"CP-HU\" />\n      <xs:enumeration value=\"CP037\" />\n      <xs:enumeration value=\"CP038\" />\n      <xs:enumeration value=\"CP273\" />\n      <xs:enumeration value=\"CP274\" />\n      <xs:enumeration value=\"CP275\" />\n      <xs:enumeration value=\"CP278\" />\n      <xs:enumeration value=\"CP280\" />\n      <xs:enumeration value=\"CP281\" />\n      <xs:enumeration value=\"CP282\" />\n      <xs:enumeration value=\"CP284\" />\n      <xs:enumeration value=\"CP285\" />\n      <xs:enumeration value=\"CP290\" />\n      <xs:enumeration value=\"CP297\" />\n      <xs:enumeration value=\"CP367\" />\n      <xs:enumeration value=\"CP420\" />\n      <xs:enumeration value=\"CP423\" />\n      <xs:enumeration value=\"CP424\" />\n      <xs:enumeration value=\"CP437\" />\n      <xs:enumeration value=\"CP500\" />\n      <xs:enumeration value=\"CP737\" />\n      <xs:enumeration value=\"CP775\" />\n      <xs:enumeration value=\"CP803\" />\n      <xs:enumeration value=\"CP813\" />\n      <xs:enumeration value=\"CP819\" />\n      <xs:enumeration value=\"CP850\" />\n      <xs:enumeration value=\"CP851\" />\n      <xs:enumeration value=\"CP852\" />\n      <xs:enumeration value=\"CP855\" />\n      <xs:enumeration value=\"CP856\" />\n      <xs:enumeration value=\"CP857\" />\n      <xs:enumeration value=\"CP860\" />\n      <xs:enumeration value=\"CP861\" />\n      <xs:enumeration value=\"CP862\" />\n      <xs:enumeration value=\"CP863\" />\n      <xs:enumeration value=\"CP864\" />\n      <xs:enumeration value=\"CP865\" />\n      <xs:enumeration value=\"CP866\" />\n      <xs:enumeration value=\"CP866NAV\" />\n      <xs:enumeration value=\"CP868\" />\n      <xs:enumeration value=\"CP869\" />\n      <xs:enumeration value=\"CP870\" />\n      <xs:enumeration value=\"CP871\" />\n      <xs:enumeration value=\"CP874\" />\n      <xs:enumeration value=\"CP875\" />\n      <xs:enumeration value=\"CP880\" />\n      <xs:enumeration value=\"CP891\" />\n      <xs:enumeration value=\"CP901\" />\n      <xs:enumeration value=\"CP902\" />\n      <xs:enumeration value=\"CP903\" />\n      <xs:enumeration value=\"CP904\" />\n      <xs:enumeration value=\"CP905\" />\n      <xs:enumeration value=\"CP912\" />\n      <xs:enumeration value=\"CP915\" />\n      <xs:enumeration value=\"CP916\" />\n      <xs:enumeration value=\"CP918\" />\n      <xs:enumeration value=\"CP920\" />\n      <xs:enumeration value=\"CP921\" />\n      <xs:enumeration value=\"CP922\" />\n      <xs:enumeration value=\"CP930\" />\n      <xs:enumeration value=\"CP932\" />\n      <xs:enumeration value=\"CP933\" />\n      <xs:enumeration value=\"CP935\" />\n      <xs:enumeration value=\"CP936\" />\n      <xs:enumeration value=\"CP937\" />\n      <xs:enumeration value=\"CP939\" />\n      <xs:enumeration value=\"CP949\" />\n      <xs:enumeration value=\"CP950\" />\n      <xs:enumeration value=\"CP1004\" />\n      <xs:enumeration value=\"CP1008\" />\n      <xs:enumeration value=\"CP1025\" />\n      <xs:enumeration value=\"CP1026\" />\n      <xs:enumeration value=\"CP1046\" />\n      <xs:enumeration value=\"CP1047\" />\n      <xs:enumeration value=\"CP1070\" />\n      <xs:enumeration value=\"CP1079\" />\n      <xs:enumeration value=\"CP1081\" />\n      <xs:enumeration value=\"CP1084\" />\n      <xs:enumeration value=\"CP1089\" />\n      <xs:enumeration value=\"CP1097\" />\n      <xs:enumeration value=\"CP1112\" />\n      <xs:enumeration value=\"CP1122\" />\n      <xs:enumeration value=\"CP1123\" />\n      <xs:enumeration value=\"CP1124\" />\n      <xs:enumeration value=\"CP1125\" />\n      <xs:enumeration value=\"CP1129\" />\n      <xs:enumeration value=\"CP1130\" />\n      <xs:enumeration value=\"CP1132\" />\n      <xs:enumeration value=\"CP1133\" />\n      <xs:enumeration value=\"CP1137\" />\n      <xs:enumeration value=\"CP1140\" />\n      <xs:enumeration value=\"CP1141\" />\n      <xs:enumeration value=\"CP1142\" />\n      <xs:enumeration value=\"CP1143\" />\n      <xs:enumeration value=\"CP1144\" />\n      <xs:enumeration value=\"CP1145\" />\n      <xs:enumeration value=\"CP1146\" />\n      <xs:enumeration value=\"CP1147\" />\n      <xs:enumeration value=\"CP1148\" />\n      <xs:enumeration value=\"CP1149\" />\n      <xs:enumeration value=\"CP1153\" />\n      <xs:enumeration value=\"CP1154\" />\n      <xs:enumeration value=\"CP1155\" />\n      <xs:enumeration value=\"CP1156\" />\n      <xs:enumeration value=\"CP1157\" />\n      <xs:enumeration value=\"CP1158\" />\n      <xs:enumeration value=\"CP1160\" />\n      <xs:enumeration value=\"CP1161\" />\n      <xs:enumeration value=\"CP1162\" />\n      <xs:enumeration value=\"CP1163\" />\n      <xs:enumeration value=\"CP1164\" />\n      <xs:enumeration value=\"CP1166\" />\n      <xs:enumeration value=\"CP1167\" />\n      <xs:enumeration value=\"CP1250\" />\n      <xs:enumeration value=\"CP1251\" />\n      <xs:enumeration value=\"CP1252\" />\n      <xs:enumeration value=\"CP1253\" />\n      <xs:enumeration value=\"CP1254\" />\n      <xs:enumeration value=\"CP1255\" />\n      <xs:enumeration value=\"CP1256\" />\n      <xs:enumeration value=\"CP1257\" />\n      <xs:enumeration value=\"CP1258\" />\n      <xs:enumeration value=\"CP1282\" />\n      <xs:enumeration value=\"CP1361\" />\n      <xs:enumeration value=\"CP1364\" />\n      <xs:enumeration value=\"CP1371\" />\n      <xs:enumeration value=\"CP1388\" />\n      <xs:enumeration value=\"CP1390\" />\n      <xs:enumeration value=\"CP1399\" />\n      <xs:enumeration value=\"CP4517\" />\n      <xs:enumeration value=\"CP4899\" />\n      <xs:enumeration value=\"CP4909\" />\n      <xs:enumeration value=\"CP4971\" />\n      <xs:enumeration value=\"CP5347\" />\n      <xs:enumeration value=\"CP9030\" />\n      <xs:enumeration value=\"CP9066\" />\n      <xs:enumeration value=\"CP9448\" />\n      <xs:enumeration value=\"CP10007\" />\n      <xs:enumeration value=\"CP12712\" />\n      <xs:enumeration value=\"CP16804\" />\n      <xs:enumeration value=\"CPIBM861\" />\n      <xs:enumeration value=\"CSA7-1\" />\n      <xs:enumeration value=\"CSA7-2\" />\n      <xs:enumeration value=\"CSASCII\" />\n      <xs:enumeration value=\"CSA_T500-1983\" />\n      <xs:enumeration value=\"CSA_T500\" />\n      <xs:enumeration value=\"CSA_Z243.4-1985-1\" />\n      <xs:enumeration value=\"CSA_Z243.4-1985-2\" />\n      <xs:enumeration value=\"CSA_Z243.419851\" />\n      <xs:enumeration value=\"CSA_Z243.419852\" />\n      <xs:enumeration value=\"CSDECMCS\" />\n      <xs:enumeration value=\"CSEBCDICATDE\" />\n      <xs:enumeration value=\"CSEBCDICATDEA\" />\n      <xs:enumeration value=\"CSEBCDICCAFR\" />\n      <xs:enumeration value=\"CSEBCDICDKNO\" />\n      <xs:enumeration value=\"CSEBCDICDKNOA\" />\n      <xs:enumeration value=\"CSEBCDICES\" />\n      <xs:enumeration value=\"CSEBCDICESA\" />\n      <xs:enumeration value=\"CSEBCDICESS\" />\n      <xs:enumeration value=\"CSEBCDICFISE\" />\n      <xs:enumeration value=\"CSEBCDICFISEA\" />\n      <xs:enumeration value=\"CSEBCDICFR\" />\n      <xs:enumeration value=\"CSEBCDICIT\" />\n      <xs:enumeration value=\"CSEBCDICPT\" />\n      <xs:enumeration value=\"CSEBCDICUK\" />\n      <xs:enumeration value=\"CSEBCDICUS\" />\n      <xs:enumeration value=\"CSEUCKR\" />\n      <xs:enumeration value=\"CSEUCPKDFMTJAPANESE\" />\n      <xs:enumeration value=\"CSGB2312\" />\n      <xs:enumeration value=\"CSHPROMAN8\" />\n      <xs:enumeration value=\"CSIBM037\" />\n      <xs:enumeration value=\"CSIBM038\" />\n      <xs:enumeration value=\"CSIBM273\" />\n      <xs:enumeration value=\"CSIBM274\" />\n      <xs:enumeration value=\"CSIBM275\" />\n      <xs:enumeration value=\"CSIBM277\" />\n      <xs:enumeration value=\"CSIBM278\" />\n      <xs:enumeration value=\"CSIBM280\" />\n      <xs:enumeration value=\"CSIBM281\" />\n      <xs:enumeration value=\"CSIBM284\" />\n      <xs:enumeration value=\"CSIBM285\" />\n      <xs:enumeration value=\"CSIBM290\" />\n      <xs:enumeration value=\"CSIBM297\" />\n      <xs:enumeration value=\"CSIBM420\" />\n      <xs:enumeration value=\"CSIBM423\" />\n      <xs:enumeration value=\"CSIBM424\" />\n      <xs:enumeration value=\"CSIBM500\" />\n      <xs:enumeration value=\"CSIBM803\" />\n      <xs:enumeration value=\"CSIBM851\" />\n      <xs:enumeration value=\"CSIBM855\" />\n      <xs:enumeration value=\"CSIBM856\" />\n      <xs:enumeration value=\"CSIBM857\" />\n      <xs:enumeration value=\"CSIBM860\" />\n      <xs:enumeration value=\"CSIBM863\" />\n      <xs:enumeration value=\"CSIBM864\" />\n      <xs:enumeration value=\"CSIBM865\" />\n      <xs:enumeration value=\"CSIBM866\" />\n      <xs:enumeration value=\"CSIBM868\" />\n      <xs:enumeration value=\"CSIBM869\" />\n      <xs:enumeration value=\"CSIBM870\" />\n      <xs:enumeration value=\"CSIBM871\" />\n      <xs:enumeration value=\"CSIBM880\" />\n      <xs:enumeration value=\"CSIBM891\" />\n      <xs:enumeration value=\"CSIBM901\" />\n      <xs:enumeration value=\"CSIBM902\" />\n      <xs:enumeration value=\"CSIBM903\" />\n      <xs:enumeration value=\"CSIBM904\" />\n      <xs:enumeration value=\"CSIBM905\" />\n      <xs:enumeration value=\"CSIBM918\" />\n      <xs:enumeration value=\"CSIBM921\" />\n      <xs:enumeration value=\"CSIBM922\" />\n      <xs:enumeration value=\"CSIBM930\" />\n      <xs:enumeration value=\"CSIBM932\" />\n      <xs:enumeration value=\"CSIBM933\" />\n      <xs:enumeration value=\"CSIBM935\" />\n      <xs:enumeration value=\"CSIBM937\" />\n      <xs:enumeration value=\"CSIBM939\" />\n      <xs:enumeration value=\"CSIBM943\" />\n      <xs:enumeration value=\"CSIBM1008\" />\n      <xs:enumeration value=\"CSIBM1025\" />\n      <xs:enumeration value=\"CSIBM1026\" />\n      <xs:enumeration value=\"CSIBM1097\" />\n      <xs:enumeration value=\"CSIBM1112\" />\n      <xs:enumeration value=\"CSIBM1122\" />\n      <xs:enumeration value=\"CSIBM1123\" />\n      <xs:enumeration value=\"CSIBM1124\" />\n      <xs:enumeration value=\"CSIBM1129\" />\n      <xs:enumeration value=\"CSIBM1130\" />\n      <xs:enumeration value=\"CSIBM1132\" />\n      <xs:enumeration value=\"CSIBM1133\" />\n      <xs:enumeration value=\"CSIBM1137\" />\n      <xs:enumeration value=\"CSIBM1140\" />\n      <xs:enumeration value=\"CSIBM1141\" />\n      <xs:enumeration value=\"CSIBM1142\" />\n      <xs:enumeration value=\"CSIBM1143\" />\n      <xs:enumeration value=\"CSIBM1144\" />\n      <xs:enumeration value=\"CSIBM1145\" />\n      <xs:enumeration value=\"CSIBM1146\" />\n      <xs:enumeration value=\"CSIBM1147\" />\n      <xs:enumeration value=\"CSIBM1148\" />\n      <xs:enumeration value=\"CSIBM1149\" />\n      <xs:enumeration value=\"CSIBM1153\" />\n      <xs:enumeration value=\"CSIBM1154\" />\n      <xs:enumeration value=\"CSIBM1155\" />\n      <xs:enumeration value=\"CSIBM1156\" />\n      <xs:enumeration value=\"CSIBM1157\" />\n      <xs:enumeration value=\"CSIBM1158\" />\n      <xs:enumeration value=\"CSIBM1160\" />\n      <xs:enumeration value=\"CSIBM1161\" />\n      <xs:enumeration value=\"CSIBM1163\" />\n      <xs:enumeration value=\"CSIBM1164\" />\n      <xs:enumeration value=\"CSIBM1166\" />\n      <xs:enumeration value=\"CSIBM1167\" />\n      <xs:enumeration value=\"CSIBM1364\" />\n      <xs:enumeration value=\"CSIBM1371\" />\n      <xs:enumeration value=\"CSIBM1388\" />\n      <xs:enumeration value=\"CSIBM1390\" />\n      <xs:enumeration value=\"CSIBM1399\" />\n      <xs:enumeration value=\"CSIBM4517\" />\n      <xs:enumeration value=\"CSIBM4899\" />\n      <xs:enumeration value=\"CSIBM4909\" />\n      <xs:enumeration value=\"CSIBM4971\" />\n      <xs:enumeration value=\"CSIBM5347\" />\n      <xs:enumeration value=\"CSIBM9030\" />\n      <xs:enumeration value=\"CSIBM9066\" />\n      <xs:enumeration value=\"CSIBM9448\" />\n      <xs:enumeration value=\"CSIBM12712\" />\n      <xs:enumeration value=\"CSIBM16804\" />\n      <xs:enumeration value=\"CSIBM11621162\" />\n      <xs:enumeration value=\"CSISO4UNITEDKINGDOM\" />\n      <xs:enumeration value=\"CSISO10SWEDISH\" />\n      <xs:enumeration value=\"CSISO11SWEDISHFORNAMES\" />\n      <xs:enumeration value=\"CSISO14JISC6220RO\" />\n      <xs:enumeration value=\"CSISO15ITALIAN\" />\n      <xs:enumeration value=\"CSISO16PORTUGESE\" />\n      <xs:enumeration value=\"CSISO17SPANISH\" />\n      <xs:enumeration value=\"CSISO18GREEK7OLD\" />\n      <xs:enumeration value=\"CSISO19LATINGREEK\" />\n      <xs:enumeration value=\"CSISO21GERMAN\" />\n      <xs:enumeration value=\"CSISO25FRENCH\" />\n      <xs:enumeration value=\"CSISO27LATINGREEK1\" />\n      <xs:enumeration value=\"CSISO49INIS\" />\n      <xs:enumeration value=\"CSISO50INIS8\" />\n      <xs:enumeration value=\"CSISO51INISCYRILLIC\" />\n      <xs:enumeration value=\"CSISO58GB1988\" />\n      <xs:enumeration value=\"CSISO60DANISHNORWEGIAN\" />\n      <xs:enumeration value=\"CSISO60NORWEGIAN1\" />\n      <xs:enumeration value=\"CSISO61NORWEGIAN2\" />\n      <xs:enumeration value=\"CSISO69FRENCH\" />\n      <xs:enumeration value=\"CSISO84PORTUGUESE2\" />\n      <xs:enumeration value=\"CSISO85SPANISH2\" />\n      <xs:enumeration value=\"CSISO86HUNGARIAN\" />\n      <xs:enumeration value=\"CSISO88GREEK7\" />\n      <xs:enumeration value=\"CSISO89ASMO449\" />\n      <xs:enumeration value=\"CSISO90\" />\n      <xs:enumeration value=\"CSISO92JISC62991984B\" />\n      <xs:enumeration value=\"CSISO99NAPLPS\" />\n      <xs:enumeration value=\"CSISO103T618BIT\" />\n      <xs:enumeration value=\"CSISO111ECMACYRILLIC\" />\n      <xs:enumeration value=\"CSISO121CANADIAN1\" />\n      <xs:enumeration value=\"CSISO122CANADIAN2\" />\n      <xs:enumeration value=\"CSISO139CSN369103\" />\n      <xs:enumeration value=\"CSISO141JUSIB1002\" />\n      <xs:enumeration value=\"CSISO143IECP271\" />\n      <xs:enumeration value=\"CSISO150\" />\n      <xs:enumeration value=\"CSISO150GREEKCCITT\" />\n      <xs:enumeration value=\"CSISO151CUBA\" />\n      <xs:enumeration value=\"CSISO153GOST1976874\" />\n      <xs:enumeration value=\"CSISO646DANISH\" />\n      <xs:enumeration value=\"CSISO2022CN\" />\n      <xs:enumeration value=\"CSISO2022JP\" />\n      <xs:enumeration value=\"CSISO2022JP2\" />\n      <xs:enumeration value=\"CSISO2022KR\" />\n      <xs:enumeration value=\"CSISO2033\" />\n      <xs:enumeration value=\"CSISO5427CYRILLIC\" />\n      <xs:enumeration value=\"CSISO5427CYRILLIC1981\" />\n      <xs:enumeration value=\"CSISO5428GREEK\" />\n      <xs:enumeration value=\"CSISO10367BOX\" />\n      <xs:enumeration value=\"CSISOLATIN1\" />\n      <xs:enumeration value=\"CSISOLATIN2\" />\n      <xs:enumeration value=\"CSISOLATIN3\" />\n      <xs:enumeration value=\"CSISOLATIN4\" />\n      <xs:enumeration value=\"CSISOLATIN5\" />\n      <xs:enumeration value=\"CSISOLATIN6\" />\n      <xs:enumeration value=\"CSISOLATINARABIC\" />\n      <xs:enumeration value=\"CSISOLATINCYRILLIC\" />\n      <xs:enumeration value=\"CSISOLATINGREEK\" />\n      <xs:enumeration value=\"CSISOLATINHEBREW\" />\n      <xs:enumeration value=\"CSKOI8R\" />\n      <xs:enumeration value=\"CSKSC5636\" />\n      <xs:enumeration value=\"CSMACINTOSH\" />\n      <xs:enumeration value=\"CSNATSDANO\" />\n      <xs:enumeration value=\"CSNATSSEFI\" />\n      <xs:enumeration value=\"CSN_369103\" />\n      <xs:enumeration value=\"CSPC8CODEPAGE437\" />\n      <xs:enumeration value=\"CSPC775BALTIC\" />\n      <xs:enumeration value=\"CSPC850MULTILINGUAL\" />\n      <xs:enumeration value=\"CSPC862LATINHEBREW\" />\n      <xs:enumeration value=\"CSPCP852\" />\n      <xs:enumeration value=\"CSSHIFTJIS\" />\n      <xs:enumeration value=\"CSUCS4\" />\n      <xs:enumeration value=\"CSUNICODE\" />\n      <xs:enumeration value=\"CSWINDOWS31J\" />\n      <xs:enumeration value=\"CUBA\" />\n      <xs:enumeration value=\"CWI-2\" />\n      <xs:enumeration value=\"CWI\" />\n      <xs:enumeration value=\"CYRILLIC\" />\n      <xs:enumeration value=\"DE\" />\n      <xs:enumeration value=\"DEC-MCS\" />\n      <xs:enumeration value=\"DEC\" />\n      <xs:enumeration value=\"DECMCS\" />\n      <xs:enumeration value=\"DIN_66003\" />\n      <xs:enumeration value=\"DK\" />\n      <xs:enumeration value=\"DS2089\" />\n      <xs:enumeration value=\"DS_2089\" />\n      <xs:enumeration value=\"E13B\" />\n      <xs:enumeration value=\"EBCDIC-AT-DE-A\" />\n      <xs:enumeration value=\"EBCDIC-AT-DE\" />\n      <xs:enumeration value=\"EBCDIC-BE\" />\n      <xs:enumeration value=\"EBCDIC-BR\" />\n      <xs:enumeration value=\"EBCDIC-CA-FR\" />\n      <xs:enumeration value=\"EBCDIC-CP-AR1\" />\n      <xs:enumeration value=\"EBCDIC-CP-AR2\" />\n      <xs:enumeration value=\"EBCDIC-CP-BE\" />\n      <xs:enumeration value=\"EBCDIC-CP-CA\" />\n      <xs:enumeration value=\"EBCDIC-CP-CH\" />\n      <xs:enumeration value=\"EBCDIC-CP-DK\" />\n      <xs:enumeration value=\"EBCDIC-CP-ES\" />\n      <xs:enumeration value=\"EBCDIC-CP-FI\" />\n      <xs:enumeration value=\"EBCDIC-CP-FR\" />\n      <xs:enumeration value=\"EBCDIC-CP-GB\" />\n      <xs:enumeration value=\"EBCDIC-CP-GR\" />\n      <xs:enumeration value=\"EBCDIC-CP-HE\" />\n      <xs:enumeration value=\"EBCDIC-CP-IS\" />\n      <xs:enumeration value=\"EBCDIC-CP-IT\" />\n      <xs:enumeration value=\"EBCDIC-CP-NL\" />\n      <xs:enumeration value=\"EBCDIC-CP-NO\" />\n      <xs:enumeration value=\"EBCDIC-CP-ROECE\" />\n      <xs:enumeration value=\"EBCDIC-CP-SE\" />\n      <xs:enumeration value=\"EBCDIC-CP-TR\" />\n      <xs:enumeration value=\"EBCDIC-CP-US\" />\n      <xs:enumeration value=\"EBCDIC-CP-WT\" />\n      <xs:enumeration value=\"EBCDIC-CP-YU\" />\n      <xs:enumeration value=\"EBCDIC-CYRILLIC\" />\n      <xs:enumeration value=\"EBCDIC-DK-NO-A\" />\n      <xs:enumeration value=\"EBCDIC-DK-NO\" />\n      <xs:enumeration value=\"EBCDIC-ES-A\" />\n      <xs:enumeration value=\"EBCDIC-ES-S\" />\n      <xs:enumeration value=\"EBCDIC-ES\" />\n      <xs:enumeration value=\"EBCDIC-FI-SE-A\" />\n      <xs:enumeration value=\"EBCDIC-FI-SE\" />\n      <xs:enumeration value=\"EBCDIC-FR\" />\n      <xs:enumeration value=\"EBCDIC-GREEK\" />\n      <xs:enumeration value=\"EBCDIC-INT\" />\n      <xs:enumeration value=\"EBCDIC-INT1\" />\n      <xs:enumeration value=\"EBCDIC-IS-FRISS\" />\n      <xs:enumeration value=\"EBCDIC-IT\" />\n      <xs:enumeration value=\"EBCDIC-JP-E\" />\n      <xs:enumeration value=\"EBCDIC-JP-KANA\" />\n      <xs:enumeration value=\"EBCDIC-PT\" />\n      <xs:enumeration value=\"EBCDIC-UK\" />\n      <xs:enumeration value=\"EBCDIC-US\" />\n      <xs:enumeration value=\"EBCDICATDE\" />\n      <xs:enumeration value=\"EBCDICATDEA\" />\n      <xs:enumeration value=\"EBCDICCAFR\" />\n      <xs:enumeration value=\"EBCDICDKNO\" />\n      <xs:enumeration value=\"EBCDICDKNOA\" />\n      <xs:enumeration value=\"EBCDICES\" />\n      <xs:enumeration value=\"EBCDICESA\" />\n      <xs:enumeration value=\"EBCDICESS\" />\n      <xs:enumeration value=\"EBCDICFISE\" />\n      <xs:enumeration value=\"EBCDICFISEA\" />\n      <xs:enumeration value=\"EBCDICFR\" />\n      <xs:enumeration value=\"EBCDICISFRISS\" />\n      <xs:enumeration value=\"EBCDICIT\" />\n      <xs:enumeration value=\"EBCDICPT\" />\n      <xs:enumeration value=\"EBCDICUK\" />\n      <xs:enumeration value=\"EBCDICUS\" />\n      <xs:enumeration value=\"ECMA-114\" />\n      <xs:enumeration value=\"ECMA-118\" />\n      <xs:enumeration value=\"ECMA-128\" />\n      <xs:enumeration value=\"ECMA-CYRILLIC\" />\n      <xs:enumeration value=\"ECMACYRILLIC\" />\n      <xs:enumeration value=\"ELOT_928\" />\n      <xs:enumeration value=\"ES\" />\n      <xs:enumeration value=\"ES2\" />\n      <xs:enumeration value=\"EUC-CN\" />\n      <xs:enumeration value=\"EUC-JISX0213\" />\n      <xs:enumeration value=\"EUC-JP-MS\" />\n      <xs:enumeration value=\"EUC-JP\" />\n      <xs:enumeration value=\"EUC-KR\" />\n      <xs:enumeration value=\"EUC-TW\" />\n      <xs:enumeration value=\"EUCCN\" />\n      <xs:enumeration value=\"EUCJP-MS\" />\n      <xs:enumeration value=\"EUCJP-OPEN\" />\n      <xs:enumeration value=\"EUCJP-WIN\" />\n      <xs:enumeration value=\"EUCJP\" />\n      <xs:enumeration value=\"EUCKR\" />\n      <xs:enumeration value=\"EUCTW\" />\n      <xs:enumeration value=\"FI\" />\n      <xs:enumeration value=\"FR\" />\n      <xs:enumeration value=\"GB\" />\n      <xs:enumeration value=\"GB2312\" />\n      <xs:enumeration value=\"GB13000\" />\n      <xs:enumeration value=\"GB18030\" />\n      <xs:enumeration value=\"GBK\" />\n      <xs:enumeration value=\"GB_1988-80\" />\n      <xs:enumeration value=\"GB_198880\" />\n      <xs:enumeration value=\"GEORGIAN-ACADEMY\" />\n      <xs:enumeration value=\"GEORGIAN-PS\" />\n      <xs:enumeration value=\"GOST_19768-74\" />\n      <xs:enumeration value=\"GOST_19768\" />\n      <xs:enumeration value=\"GOST_1976874\" />\n      <xs:enumeration value=\"GREEK-CCITT\" />\n      <xs:enumeration value=\"GREEK\" />\n      <xs:enumeration value=\"GREEK7-OLD\" />\n      <xs:enumeration value=\"GREEK7\" />\n      <xs:enumeration value=\"GREEK7OLD\" />\n      <xs:enumeration value=\"GREEK8\" />\n      <xs:enumeration value=\"GREEKCCITT\" />\n      <xs:enumeration value=\"HEBREW\" />\n      <xs:enumeration value=\"HP-GREEK8\" />\n      <xs:enumeration value=\"HP-ROMAN8\" />\n      <xs:enumeration value=\"HP-ROMAN9\" />\n      <xs:enumeration value=\"HP-THAI8\" />\n      <xs:enumeration value=\"HP-TURKISH8\" />\n      <xs:enumeration value=\"HPGREEK8\" />\n      <xs:enumeration value=\"HPROMAN8\" />\n      <xs:enumeration value=\"HPROMAN9\" />\n      <xs:enumeration value=\"HPTHAI8\" />\n      <xs:enumeration value=\"HPTURKISH8\" />\n      <xs:enumeration value=\"HU\" />\n      <xs:enumeration value=\"IBM-803\" />\n      <xs:enumeration value=\"IBM-856\" />\n      <xs:enumeration value=\"IBM-901\" />\n      <xs:enumeration value=\"IBM-902\" />\n      <xs:enumeration value=\"IBM-921\" />\n      <xs:enumeration value=\"IBM-922\" />\n      <xs:enumeration value=\"IBM-930\" />\n      <xs:enumeration value=\"IBM-932\" />\n      <xs:enumeration value=\"IBM-933\" />\n      <xs:enumeration value=\"IBM-935\" />\n      <xs:enumeration value=\"IBM-937\" />\n      <xs:enumeration value=\"IBM-939\" />\n      <xs:enumeration value=\"IBM-943\" />\n      <xs:enumeration value=\"IBM-1008\" />\n      <xs:enumeration value=\"IBM-1025\" />\n      <xs:enumeration value=\"IBM-1046\" />\n      <xs:enumeration value=\"IBM-1047\" />\n      <xs:enumeration value=\"IBM-1097\" />\n      <xs:enumeration value=\"IBM-1112\" />\n      <xs:enumeration value=\"IBM-1122\" />\n      <xs:enumeration value=\"IBM-1123\" />\n      <xs:enumeration value=\"IBM-1124\" />\n      <xs:enumeration value=\"IBM-1129\" />\n      <xs:enumeration value=\"IBM-1130\" />\n      <xs:enumeration value=\"IBM-1132\" />\n      <xs:enumeration value=\"IBM-1133\" />\n      <xs:enumeration value=\"IBM-1137\" />\n      <xs:enumeration value=\"IBM-1140\" />\n      <xs:enumeration value=\"IBM-1141\" />\n      <xs:enumeration value=\"IBM-1142\" />\n      <xs:enumeration value=\"IBM-1143\" />\n      <xs:enumeration value=\"IBM-1144\" />\n      <xs:enumeration value=\"IBM-1145\" />\n      <xs:enumeration value=\"IBM-1146\" />\n      <xs:enumeration value=\"IBM-1147\" />\n      <xs:enumeration value=\"IBM-1148\" />\n      <xs:enumeration value=\"IBM-1149\" />\n      <xs:enumeration value=\"IBM-1153\" />\n      <xs:enumeration value=\"IBM-1154\" />\n      <xs:enumeration value=\"IBM-1155\" />\n      <xs:enumeration value=\"IBM-1156\" />\n      <xs:enumeration value=\"IBM-1157\" />\n      <xs:enumeration value=\"IBM-1158\" />\n      <xs:enumeration value=\"IBM-1160\" />\n      <xs:enumeration value=\"IBM-1161\" />\n      <xs:enumeration value=\"IBM-1162\" />\n      <xs:enumeration value=\"IBM-1163\" />\n      <xs:enumeration value=\"IBM-1164\" />\n      <xs:enumeration value=\"IBM-1166\" />\n      <xs:enumeration value=\"IBM-1167\" />\n      <xs:enumeration value=\"IBM-1364\" />\n      <xs:enumeration value=\"IBM-1371\" />\n      <xs:enumeration value=\"IBM-1388\" />\n      <xs:enumeration value=\"IBM-1390\" />\n      <xs:enumeration value=\"IBM-1399\" />\n      <xs:enumeration value=\"IBM-4517\" />\n      <xs:enumeration value=\"IBM-4899\" />\n      <xs:enumeration value=\"IBM-4909\" />\n      <xs:enumeration value=\"IBM-4971\" />\n      <xs:enumeration value=\"IBM-5347\" />\n      <xs:enumeration value=\"IBM-9030\" />\n      <xs:enumeration value=\"IBM-9066\" />\n      <xs:enumeration value=\"IBM-9448\" />\n      <xs:enumeration value=\"IBM-12712\" />\n      <xs:enumeration value=\"IBM-16804\" />\n      <xs:enumeration value=\"IBM037\" />\n      <xs:enumeration value=\"IBM038\" />\n      <xs:enumeration value=\"IBM256\" />\n      <xs:enumeration value=\"IBM273\" />\n      <xs:enumeration value=\"IBM274\" />\n      <xs:enumeration value=\"IBM275\" />\n      <xs:enumeration value=\"IBM277\" />\n      <xs:enumeration value=\"IBM278\" />\n      <xs:enumeration value=\"IBM280\" />\n      <xs:enumeration value=\"IBM281\" />\n      <xs:enumeration value=\"IBM284\" />\n      <xs:enumeration value=\"IBM285\" />\n      <xs:enumeration value=\"IBM290\" />\n      <xs:enumeration value=\"IBM297\" />\n      <xs:enumeration value=\"IBM367\" />\n      <xs:enumeration value=\"IBM420\" />\n      <xs:enumeration value=\"IBM423\" />\n      <xs:enumeration value=\"IBM424\" />\n      <xs:enumeration value=\"IBM437\" />\n      <xs:enumeration value=\"IBM500\" />\n      <xs:enumeration value=\"IBM775\" />\n      <xs:enumeration value=\"IBM803\" />\n      <xs:enumeration value=\"IBM813\" />\n      <xs:enumeration value=\"IBM819\" />\n      <xs:enumeration value=\"IBM848\" />\n      <xs:enumeration value=\"IBM850\" />\n      <xs:enumeration value=\"IBM851\" />\n      <xs:enumeration value=\"IBM852\" />\n      <xs:enumeration value=\"IBM855\" />\n      <xs:enumeration value=\"IBM856\" />\n      <xs:enumeration value=\"IBM857\" />\n      <xs:enumeration value=\"IBM860\" />\n      <xs:enumeration value=\"IBM861\" />\n      <xs:enumeration value=\"IBM862\" />\n      <xs:enumeration value=\"IBM863\" />\n      <xs:enumeration value=\"IBM864\" />\n      <xs:enumeration value=\"IBM865\" />\n      <xs:enumeration value=\"IBM866\" />\n      <xs:enumeration value=\"IBM866NAV\" />\n      <xs:enumeration value=\"IBM868\" />\n      <xs:enumeration value=\"IBM869\" />\n      <xs:enumeration value=\"IBM870\" />\n      <xs:enumeration value=\"IBM871\" />\n      <xs:enumeration value=\"IBM874\" />\n      <xs:enumeration value=\"IBM875\" />\n      <xs:enumeration value=\"IBM880\" />\n      <xs:enumeration value=\"IBM891\" />\n      <xs:enumeration value=\"IBM901\" />\n      <xs:enumeration value=\"IBM902\" />\n      <xs:enumeration value=\"IBM903\" />\n      <xs:enumeration value=\"IBM904\" />\n      <xs:enumeration value=\"IBM905\" />\n      <xs:enumeration value=\"IBM912\" />\n      <xs:enumeration value=\"IBM915\" />\n      <xs:enumeration value=\"IBM916\" />\n      <xs:enumeration value=\"IBM918\" />\n      <xs:enumeration value=\"IBM920\" />\n      <xs:enumeration value=\"IBM921\" />\n      <xs:enumeration value=\"IBM922\" />\n      <xs:enumeration value=\"IBM930\" />\n      <xs:enumeration value=\"IBM932\" />\n      <xs:enumeration value=\"IBM933\" />\n      <xs:enumeration value=\"IBM935\" />\n      <xs:enumeration value=\"IBM937\" />\n      <xs:enumeration value=\"IBM939\" />\n      <xs:enumeration value=\"IBM943\" />\n      <xs:enumeration value=\"IBM1004\" />\n      <xs:enumeration value=\"IBM1008\" />\n      <xs:enumeration value=\"IBM1025\" />\n      <xs:enumeration value=\"IBM1026\" />\n      <xs:enumeration value=\"IBM1046\" />\n      <xs:enumeration value=\"IBM1047\" />\n      <xs:enumeration value=\"IBM1089\" />\n      <xs:enumeration value=\"IBM1097\" />\n      <xs:enumeration value=\"IBM1112\" />\n      <xs:enumeration value=\"IBM1122\" />\n      <xs:enumeration value=\"IBM1123\" />\n      <xs:enumeration value=\"IBM1124\" />\n      <xs:enumeration value=\"IBM1129\" />\n      <xs:enumeration value=\"IBM1130\" />\n      <xs:enumeration value=\"IBM1132\" />\n      <xs:enumeration value=\"IBM1133\" />\n      <xs:enumeration value=\"IBM1137\" />\n      <xs:enumeration value=\"IBM1140\" />\n      <xs:enumeration value=\"IBM1141\" />\n      <xs:enumeration value=\"IBM1142\" />\n      <xs:enumeration value=\"IBM1143\" />\n      <xs:enumeration value=\"IBM1144\" />\n      <xs:enumeration value=\"IBM1145\" />\n      <xs:enumeration value=\"IBM1146\" />\n      <xs:enumeration value=\"IBM1147\" />\n      <xs:enumeration value=\"IBM1148\" />\n      <xs:enumeration value=\"IBM1149\" />\n      <xs:enumeration value=\"IBM1153\" />\n      <xs:enumeration value=\"IBM1154\" />\n      <xs:enumeration value=\"IBM1155\" />\n      <xs:enumeration value=\"IBM1156\" />\n      <xs:enumeration value=\"IBM1157\" />\n      <xs:enumeration value=\"IBM1158\" />\n      <xs:enumeration value=\"IBM1160\" />\n      <xs:enumeration value=\"IBM1161\" />\n      <xs:enumeration value=\"IBM1162\" />\n      <xs:enumeration value=\"IBM1163\" />\n      <xs:enumeration value=\"IBM1164\" />\n      <xs:enumeration value=\"IBM1166\" />\n      <xs:enumeration value=\"IBM1167\" />\n      <xs:enumeration value=\"IBM1364\" />\n      <xs:enumeration value=\"IBM1371\" />\n      <xs:enumeration value=\"IBM1388\" />\n      <xs:enumeration value=\"IBM1390\" />\n      <xs:enumeration value=\"IBM1399\" />\n      <xs:enumeration value=\"IBM4517\" />\n      <xs:enumeration value=\"IBM4899\" />\n      <xs:enumeration value=\"IBM4909\" />\n      <xs:enumeration value=\"IBM4971\" />\n      <xs:enumeration value=\"IBM5347\" />\n      <xs:enumeration value=\"IBM9030\" />\n      <xs:enumeration value=\"IBM9066\" />\n      <xs:enumeration value=\"IBM9448\" />\n      <xs:enumeration value=\"IBM12712\" />\n      <xs:enumeration value=\"IBM16804\" />\n      <xs:enumeration value=\"IEC_P27-1\" />\n      <xs:enumeration value=\"IEC_P271\" />\n      <xs:enumeration value=\"INIS-8\" />\n      <xs:enumeration value=\"INIS-CYRILLIC\" />\n      <xs:enumeration value=\"INIS\" />\n      <xs:enumeration value=\"INIS8\" />\n      <xs:enumeration value=\"INISCYRILLIC\" />\n      <xs:enumeration value=\"ISIRI-3342\" />\n      <xs:enumeration value=\"ISIRI3342\" />\n      <xs:enumeration value=\"ISO-2022-CN-EXT\" />\n      <xs:enumeration value=\"ISO-2022-CN\" />\n      <xs:enumeration value=\"ISO-2022-JP-2\" />\n      <xs:enumeration value=\"ISO-2022-JP-3\" />\n      <xs:enumeration value=\"ISO-2022-JP\" />\n      <xs:enumeration value=\"ISO-2022-KR\" />\n      <xs:enumeration value=\"ISO-8859-1\" />\n      <xs:enumeration value=\"ISO-8859-2\" />\n      <xs:enumeration value=\"ISO-8859-3\" />\n      <xs:enumeration value=\"ISO-8859-4\" />\n      <xs:enumeration value=\"ISO-8859-5\" />\n      <xs:enumeration value=\"ISO-8859-6\" />\n      <xs:enumeration value=\"ISO-8859-7\" />\n      <xs:enumeration value=\"ISO-8859-8\" />\n      <xs:enumeration value=\"ISO-8859-9\" />\n      <xs:enumeration value=\"ISO-8859-9E\" />\n      <xs:enumeration value=\"ISO-8859-10\" />\n      <xs:enumeration value=\"ISO-8859-11\" />\n      <xs:enumeration value=\"ISO-8859-13\" />\n      <xs:enumeration value=\"ISO-8859-14\" />\n      <xs:enumeration value=\"ISO-8859-15\" />\n      <xs:enumeration value=\"ISO-8859-16\" />\n      <xs:enumeration value=\"ISO-10646\" />\n      <xs:enumeration value=\"ISO-10646/UCS2/\" />\n      <xs:enumeration value=\"ISO-10646/UCS4/\" />\n      <xs:enumeration value=\"ISO-10646/UTF-8/\" />\n      <xs:enumeration value=\"ISO-10646/UTF8/\" />\n      <xs:enumeration value=\"ISO-CELTIC\" />\n      <xs:enumeration value=\"ISO-IR-4\" />\n      <xs:enumeration value=\"ISO-IR-6\" />\n      <xs:enumeration value=\"ISO-IR-8-1\" />\n      <xs:enumeration value=\"ISO-IR-9-1\" />\n      <xs:enumeration value=\"ISO-IR-10\" />\n      <xs:enumeration value=\"ISO-IR-11\" />\n      <xs:enumeration value=\"ISO-IR-14\" />\n      <xs:enumeration value=\"ISO-IR-15\" />\n      <xs:enumeration value=\"ISO-IR-16\" />\n      <xs:enumeration value=\"ISO-IR-17\" />\n      <xs:enumeration value=\"ISO-IR-18\" />\n      <xs:enumeration value=\"ISO-IR-19\" />\n      <xs:enumeration value=\"ISO-IR-21\" />\n      <xs:enumeration value=\"ISO-IR-25\" />\n      <xs:enumeration value=\"ISO-IR-27\" />\n      <xs:enumeration value=\"ISO-IR-37\" />\n      <xs:enumeration value=\"ISO-IR-49\" />\n      <xs:enumeration value=\"ISO-IR-50\" />\n      <xs:enumeration value=\"ISO-IR-51\" />\n      <xs:enumeration value=\"ISO-IR-54\" />\n      <xs:enumeration value=\"ISO-IR-55\" />\n      <xs:enumeration value=\"ISO-IR-57\" />\n      <xs:enumeration value=\"ISO-IR-60\" />\n      <xs:enumeration value=\"ISO-IR-61\" />\n      <xs:enumeration value=\"ISO-IR-69\" />\n      <xs:enumeration value=\"ISO-IR-84\" />\n      <xs:enumeration value=\"ISO-IR-85\" />\n      <xs:enumeration value=\"ISO-IR-86\" />\n      <xs:enumeration value=\"ISO-IR-88\" />\n      <xs:enumeration value=\"ISO-IR-89\" />\n      <xs:enumeration value=\"ISO-IR-90\" />\n      <xs:enumeration value=\"ISO-IR-92\" />\n      <xs:enumeration value=\"ISO-IR-98\" />\n      <xs:enumeration value=\"ISO-IR-99\" />\n      <xs:enumeration value=\"ISO-IR-100\" />\n      <xs:enumeration value=\"ISO-IR-101\" />\n      <xs:enumeration value=\"ISO-IR-103\" />\n      <xs:enumeration value=\"ISO-IR-109\" />\n      <xs:enumeration value=\"ISO-IR-110\" />\n      <xs:enumeration value=\"ISO-IR-111\" />\n      <xs:enumeration value=\"ISO-IR-121\" />\n      <xs:enumeration value=\"ISO-IR-122\" />\n      <xs:enumeration value=\"ISO-IR-126\" />\n      <xs:enumeration value=\"ISO-IR-127\" />\n      <xs:enumeration value=\"ISO-IR-138\" />\n      <xs:enumeration value=\"ISO-IR-139\" />\n      <xs:enumeration value=\"ISO-IR-141\" />\n      <xs:enumeration value=\"ISO-IR-143\" />\n      <xs:enumeration value=\"ISO-IR-144\" />\n      <xs:enumeration value=\"ISO-IR-148\" />\n      <xs:enumeration value=\"ISO-IR-150\" />\n      <xs:enumeration value=\"ISO-IR-151\" />\n      <xs:enumeration value=\"ISO-IR-153\" />\n      <xs:enumeration value=\"ISO-IR-155\" />\n      <xs:enumeration value=\"ISO-IR-156\" />\n      <xs:enumeration value=\"ISO-IR-157\" />\n      <xs:enumeration value=\"ISO-IR-166\" />\n      <xs:enumeration value=\"ISO-IR-179\" />\n      <xs:enumeration value=\"ISO-IR-193\" />\n      <xs:enumeration value=\"ISO-IR-197\" />\n      <xs:enumeration value=\"ISO-IR-199\" />\n      <xs:enumeration value=\"ISO-IR-203\" />\n      <xs:enumeration value=\"ISO-IR-209\" />\n      <xs:enumeration value=\"ISO-IR-226\" />\n      <xs:enumeration value=\"ISO/TR_11548-1/\" />\n      <xs:enumeration value=\"ISO646-CA\" />\n      <xs:enumeration value=\"ISO646-CA2\" />\n      <xs:enumeration value=\"ISO646-CN\" />\n      <xs:enumeration value=\"ISO646-CU\" />\n      <xs:enumeration value=\"ISO646-DE\" />\n      <xs:enumeration value=\"ISO646-DK\" />\n      <xs:enumeration value=\"ISO646-ES\" />\n      <xs:enumeration value=\"ISO646-ES2\" />\n      <xs:enumeration value=\"ISO646-FI\" />\n      <xs:enumeration value=\"ISO646-FR\" />\n      <xs:enumeration value=\"ISO646-FR1\" />\n      <xs:enumeration value=\"ISO646-GB\" />\n      <xs:enumeration value=\"ISO646-HU\" />\n      <xs:enumeration value=\"ISO646-IT\" />\n      <xs:enumeration value=\"ISO646-JP-OCR-B\" />\n      <xs:enumeration value=\"ISO646-JP\" />\n      <xs:enumeration value=\"ISO646-KR\" />\n      <xs:enumeration value=\"ISO646-NO\" />\n      <xs:enumeration value=\"ISO646-NO2\" />\n      <xs:enumeration value=\"ISO646-PT\" />\n      <xs:enumeration value=\"ISO646-PT2\" />\n      <xs:enumeration value=\"ISO646-SE\" />\n      <xs:enumeration value=\"ISO646-SE2\" />\n      <xs:enumeration value=\"ISO646-US\" />\n      <xs:enumeration value=\"ISO646-YU\" />\n      <xs:enumeration value=\"ISO2022CN\" />\n      <xs:enumeration value=\"ISO2022CNEXT\" />\n      <xs:enumeration value=\"ISO2022JP\" />\n      <xs:enumeration value=\"ISO2022JP2\" />\n      <xs:enumeration value=\"ISO2022KR\" />\n      <xs:enumeration value=\"ISO6937\" />\n      <xs:enumeration value=\"ISO8859-1\" />\n      <xs:enumeration value=\"ISO8859-2\" />\n      <xs:enumeration value=\"ISO8859-3\" />\n      <xs:enumeration value=\"ISO8859-4\" />\n      <xs:enumeration value=\"ISO8859-5\" />\n      <xs:enumeration value=\"ISO8859-6\" />\n      <xs:enumeration value=\"ISO8859-7\" />\n      <xs:enumeration value=\"ISO8859-8\" />\n      <xs:enumeration value=\"ISO8859-9\" />\n      <xs:enumeration value=\"ISO8859-9E\" />\n      <xs:enumeration value=\"ISO8859-10\" />\n      <xs:enumeration value=\"ISO8859-11\" />\n      <xs:enumeration value=\"ISO8859-13\" />\n      <xs:enumeration value=\"ISO8859-14\" />\n      <xs:enumeration value=\"ISO8859-15\" />\n      <xs:enumeration value=\"ISO8859-16\" />\n      <xs:enumeration value=\"ISO11548-1\" />\n      <xs:enumeration value=\"ISO88591\" />\n      <xs:enumeration value=\"ISO88592\" />\n      <xs:enumeration value=\"ISO88593\" />\n      <xs:enumeration value=\"ISO88594\" />\n      <xs:enumeration value=\"ISO88595\" />\n      <xs:enumeration value=\"ISO88596\" />\n      <xs:enumeration value=\"ISO88597\" />\n      <xs:enumeration value=\"ISO88598\" />\n      <xs:enumeration value=\"ISO88599\" />\n      <xs:enumeration value=\"ISO88599E\" />\n      <xs:enumeration value=\"ISO885910\" />\n      <xs:enumeration value=\"ISO885911\" />\n      <xs:enumeration value=\"ISO885913\" />\n      <xs:enumeration value=\"ISO885914\" />\n      <xs:enumeration value=\"ISO885915\" />\n      <xs:enumeration value=\"ISO885916\" />\n      <xs:enumeration value=\"ISO_646.IRV:1991\" />\n      <xs:enumeration value=\"ISO_2033-1983\" />\n      <xs:enumeration value=\"ISO_2033\" />\n      <xs:enumeration value=\"ISO_5427-EXT\" />\n      <xs:enumeration value=\"ISO_5427\" />\n      <xs:enumeration value=\"ISO_5427:1981\" />\n      <xs:enumeration value=\"ISO_5427EXT\" />\n      <xs:enumeration value=\"ISO_5428\" />\n      <xs:enumeration value=\"ISO_5428:1980\" />\n      <xs:enumeration value=\"ISO_6937-2\" />\n      <xs:enumeration value=\"ISO_6937-2:1983\" />\n      <xs:enumeration value=\"ISO_6937\" />\n      <xs:enumeration value=\"ISO_6937:1992\" />\n      <xs:enumeration value=\"ISO_8859-1\" />\n      <xs:enumeration value=\"ISO_8859-1:1987\" />\n      <xs:enumeration value=\"ISO_8859-2\" />\n      <xs:enumeration value=\"ISO_8859-2:1987\" />\n      <xs:enumeration value=\"ISO_8859-3\" />\n      <xs:enumeration value=\"ISO_8859-3:1988\" />\n      <xs:enumeration value=\"ISO_8859-4\" />\n      <xs:enumeration value=\"ISO_8859-4:1988\" />\n      <xs:enumeration value=\"ISO_8859-5\" />\n      <xs:enumeration value=\"ISO_8859-5:1988\" />\n      <xs:enumeration value=\"ISO_8859-6\" />\n      <xs:enumeration value=\"ISO_8859-6:1987\" />\n      <xs:enumeration value=\"ISO_8859-7\" />\n      <xs:enumeration value=\"ISO_8859-7:1987\" />\n      <xs:enumeration value=\"ISO_8859-7:2003\" />\n      <xs:enumeration value=\"ISO_8859-8\" />\n      <xs:enumeration value=\"ISO_8859-8:1988\" />\n      <xs:enumeration value=\"ISO_8859-9\" />\n      <xs:enumeration value=\"ISO_8859-9:1989\" />\n      <xs:enumeration value=\"ISO_8859-9E\" />\n      <xs:enumeration value=\"ISO_8859-10\" />\n      <xs:enumeration value=\"ISO_8859-10:1992\" />\n      <xs:enumeration value=\"ISO_8859-14\" />\n      <xs:enumeration value=\"ISO_8859-14:1998\" />\n      <xs:enumeration value=\"ISO_8859-15\" />\n      <xs:enumeration value=\"ISO_8859-15:1998\" />\n      <xs:enumeration value=\"ISO_8859-16\" />\n      <xs:enumeration value=\"ISO_8859-16:2001\" />\n      <xs:enumeration value=\"ISO_9036\" />\n      <xs:enumeration value=\"ISO_10367-BOX\" />\n      <xs:enumeration value=\"ISO_10367BOX\" />\n      <xs:enumeration value=\"ISO_11548-1\" />\n      <xs:enumeration value=\"ISO_69372\" />\n      <xs:enumeration value=\"IT\" />\n      <xs:enumeration value=\"JIS_C6220-1969-RO\" />\n      <xs:enumeration value=\"JIS_C6229-1984-B\" />\n      <xs:enumeration value=\"JIS_C62201969RO\" />\n      <xs:enumeration value=\"JIS_C62291984B\" />\n      <xs:enumeration value=\"JOHAB\" />\n      <xs:enumeration value=\"JP-OCR-B\" />\n      <xs:enumeration value=\"JP\" />\n      <xs:enumeration value=\"JS\" />\n      <xs:enumeration value=\"JUS_I.B1.002\" />\n      <xs:enumeration value=\"KOI-7\" />\n      <xs:enumeration value=\"KOI-8\" />\n      <xs:enumeration value=\"KOI8-R\" />\n      <xs:enumeration value=\"KOI8-RU\" />\n      <xs:enumeration value=\"KOI8-T\" />\n      <xs:enumeration value=\"KOI8-U\" />\n      <xs:enumeration value=\"KOI8\" />\n      <xs:enumeration value=\"KOI8R\" />\n      <xs:enumeration value=\"KOI8U\" />\n      <xs:enumeration value=\"KSC5636\" />\n      <xs:enumeration value=\"L1\" />\n      <xs:enumeration value=\"L2\" />\n      <xs:enumeration value=\"L3\" />\n      <xs:enumeration value=\"L4\" />\n      <xs:enumeration value=\"L5\" />\n      <xs:enumeration value=\"L6\" />\n      <xs:enumeration value=\"L7\" />\n      <xs:enumeration value=\"L8\" />\n      <xs:enumeration value=\"L10\" />\n      <xs:enumeration value=\"LATIN-9\" />\n      <xs:enumeration value=\"LATIN-GREEK-1\" />\n      <xs:enumeration value=\"LATIN-GREEK\" />\n      <xs:enumeration value=\"LATIN1\" />\n      <xs:enumeration value=\"LATIN2\" />\n      <xs:enumeration value=\"LATIN3\" />\n      <xs:enumeration value=\"LATIN4\" />\n      <xs:enumeration value=\"LATIN5\" />\n      <xs:enumeration value=\"LATIN6\" />\n      <xs:enumeration value=\"LATIN7\" />\n      <xs:enumeration value=\"LATIN8\" />\n      <xs:enumeration value=\"LATIN9\" />\n      <xs:enumeration value=\"LATIN10\" />\n      <xs:enumeration value=\"LATINGREEK\" />\n      <xs:enumeration value=\"LATINGREEK1\" />\n      <xs:enumeration value=\"MAC-CENTRALEUROPE\" />\n      <xs:enumeration value=\"MAC-CYRILLIC\" />\n      <xs:enumeration value=\"MAC-IS\" />\n      <xs:enumeration value=\"MAC-SAMI\" />\n      <xs:enumeration value=\"MAC-UK\" />\n      <xs:enumeration value=\"MAC\" />\n      <xs:enumeration value=\"MACCYRILLIC\" />\n      <xs:enumeration value=\"MACINTOSH\" />\n      <xs:enumeration value=\"MACIS\" />\n      <xs:enumeration value=\"MACUK\" />\n      <xs:enumeration value=\"MACUKRAINIAN\" />\n      <xs:enumeration value=\"MIK\" />\n      <xs:enumeration value=\"MS-ANSI\" />\n      <xs:enumeration value=\"MS-ARAB\" />\n      <xs:enumeration value=\"MS-CYRL\" />\n      <xs:enumeration value=\"MS-EE\" />\n      <xs:enumeration value=\"MS-GREEK\" />\n      <xs:enumeration value=\"MS-HEBR\" />\n      <xs:enumeration value=\"MS-MAC-CYRILLIC\" />\n      <xs:enumeration value=\"MS-TURK\" />\n      <xs:enumeration value=\"MS932\" />\n      <xs:enumeration value=\"MS936\" />\n      <xs:enumeration value=\"MSCP949\" />\n      <xs:enumeration value=\"MSCP1361\" />\n      <xs:enumeration value=\"MSMACCYRILLIC\" />\n      <xs:enumeration value=\"MSZ_7795.3\" />\n      <xs:enumeration value=\"MS_KANJI\" />\n      <xs:enumeration value=\"NAPLPS\" />\n      <xs:enumeration value=\"NATS-DANO\" />\n      <xs:enumeration value=\"NATS-SEFI\" />\n      <xs:enumeration value=\"NATSDANO\" />\n      <xs:enumeration value=\"NATSSEFI\" />\n      <xs:enumeration value=\"NC_NC0010\" />\n      <xs:enumeration value=\"NC_NC00-10\" />\n      <xs:enumeration value=\"NC_NC00-10:81\" />\n      <xs:enumeration value=\"NF_Z_62-010\" />\n      <xs:enumeration value=\"NF_Z_62-010_(1973)\" />\n      <xs:enumeration value=\"NF_Z_62-010_1973\" />\n      <xs:enumeration value=\"NF_Z_62010\" />\n      <xs:enumeration value=\"NF_Z_62010_1973\" />\n      <xs:enumeration value=\"NO\" />\n      <xs:enumeration value=\"NO2\" />\n      <xs:enumeration value=\"NS_4551-1\" />\n      <xs:enumeration value=\"NS_4551-2\" />\n      <xs:enumeration value=\"NS_45511\" />\n      <xs:enumeration value=\"NS_45512\" />\n      <xs:enumeration value=\"OS2LATIN1\" />\n      <xs:enumeration value=\"OSF00010001\" />\n      <xs:enumeration value=\"OSF00010002\" />\n      <xs:enumeration value=\"OSF00010003\" />\n      <xs:enumeration value=\"OSF00010004\" />\n      <xs:enumeration value=\"OSF00010005\" />\n      <xs:enumeration value=\"OSF00010006\" />\n      <xs:enumeration value=\"OSF00010007\" />\n      <xs:enumeration value=\"OSF00010008\" />\n      <xs:enumeration value=\"OSF00010009\" />\n      <xs:enumeration value=\"OSF0001000A\" />\n      <xs:enumeration value=\"OSF00010020\" />\n      <xs:enumeration value=\"OSF00010100\" />\n      <xs:enumeration value=\"OSF00010101\" />\n      <xs:enumeration value=\"OSF00010102\" />\n      <xs:enumeration value=\"OSF00010104\" />\n      <xs:enumeration value=\"OSF00010105\" />\n      <xs:enumeration value=\"OSF00010106\" />\n      <xs:enumeration value=\"OSF00030010\" />\n      <xs:enumeration value=\"OSF0004000A\" />\n      <xs:enumeration value=\"OSF0005000A\" />\n      <xs:enumeration value=\"OSF05010001\" />\n      <xs:enumeration value=\"OSF100201A4\" />\n      <xs:enumeration value=\"OSF100201A8\" />\n      <xs:enumeration value=\"OSF100201B5\" />\n      <xs:enumeration value=\"OSF100201F4\" />\n      <xs:enumeration value=\"OSF100203B5\" />\n      <xs:enumeration value=\"OSF1002011C\" />\n      <xs:enumeration value=\"OSF1002011D\" />\n      <xs:enumeration value=\"OSF1002035D\" />\n      <xs:enumeration value=\"OSF1002035E\" />\n      <xs:enumeration value=\"OSF1002035F\" />\n      <xs:enumeration value=\"OSF1002036B\" />\n      <xs:enumeration value=\"OSF1002037B\" />\n      <xs:enumeration value=\"OSF10010001\" />\n      <xs:enumeration value=\"OSF10010004\" />\n      <xs:enumeration value=\"OSF10010006\" />\n      <xs:enumeration value=\"OSF10020025\" />\n      <xs:enumeration value=\"OSF10020111\" />\n      <xs:enumeration value=\"OSF10020115\" />\n      <xs:enumeration value=\"OSF10020116\" />\n      <xs:enumeration value=\"OSF10020118\" />\n      <xs:enumeration value=\"OSF10020122\" />\n      <xs:enumeration value=\"OSF10020129\" />\n      <xs:enumeration value=\"OSF10020352\" />\n      <xs:enumeration value=\"OSF10020354\" />\n      <xs:enumeration value=\"OSF10020357\" />\n      <xs:enumeration value=\"OSF10020359\" />\n      <xs:enumeration value=\"OSF10020360\" />\n      <xs:enumeration value=\"OSF10020364\" />\n      <xs:enumeration value=\"OSF10020365\" />\n      <xs:enumeration value=\"OSF10020366\" />\n      <xs:enumeration value=\"OSF10020367\" />\n      <xs:enumeration value=\"OSF10020370\" />\n      <xs:enumeration value=\"OSF10020387\" />\n      <xs:enumeration value=\"OSF10020388\" />\n      <xs:enumeration value=\"OSF10020396\" />\n      <xs:enumeration value=\"OSF10020402\" />\n      <xs:enumeration value=\"OSF10020417\" />\n      <xs:enumeration value=\"PT\" />\n      <xs:enumeration value=\"PT2\" />\n      <xs:enumeration value=\"PT154\" />\n      <xs:enumeration value=\"R8\" />\n      <xs:enumeration value=\"R9\" />\n      <xs:enumeration value=\"RK1048\" />\n      <xs:enumeration value=\"ROMAN8\" />\n      <xs:enumeration value=\"ROMAN9\" />\n      <xs:enumeration value=\"RUSCII\" />\n      <xs:enumeration value=\"SE\" />\n      <xs:enumeration value=\"SE2\" />\n      <xs:enumeration value=\"SEN_850200_B\" />\n      <xs:enumeration value=\"SEN_850200_C\" />\n      <xs:enumeration value=\"SHIFT-JIS\" />\n      <xs:enumeration value=\"SHIFT_JIS\" />\n      <xs:enumeration value=\"SHIFT_JISX0213\" />\n      <xs:enumeration value=\"SJIS-OPEN\" />\n      <xs:enumeration value=\"SJIS-WIN\" />\n      <xs:enumeration value=\"SJIS\" />\n      <xs:enumeration value=\"SS636127\" />\n      <xs:enumeration value=\"STRK1048-2002\" />\n      <xs:enumeration value=\"ST_SEV_358-88\" />\n      <xs:enumeration value=\"T.61-8BIT\" />\n      <xs:enumeration value=\"T.61\" />\n      <xs:enumeration value=\"T.618BIT\" />\n      <xs:enumeration value=\"TCVN-5712\" />\n      <xs:enumeration value=\"TCVN\" />\n      <xs:enumeration value=\"TCVN5712-1\" />\n      <xs:enumeration value=\"TCVN5712-1:1993\" />\n      <xs:enumeration value=\"THAI8\" />\n      <xs:enumeration value=\"TIS-620\" />\n      <xs:enumeration value=\"TIS620-0\" />\n      <xs:enumeration value=\"TIS620.2529-1\" />\n      <xs:enumeration value=\"TIS620.2533-0\" />\n      <xs:enumeration value=\"TIS620\" />\n      <xs:enumeration value=\"TS-5881\" />\n      <xs:enumeration value=\"TSCII\" />\n      <xs:enumeration value=\"TURKISH8\" />\n      <xs:enumeration value=\"UCS-2\" />\n      <xs:enumeration value=\"UCS-2BE\" />\n      <xs:enumeration value=\"UCS-2LE\" />\n      <xs:enumeration value=\"UCS-4\" />\n      <xs:enumeration value=\"UCS-4BE\" />\n      <xs:enumeration value=\"UCS-4LE\" />\n      <xs:enumeration value=\"UCS2\" />\n      <xs:enumeration value=\"UCS4\" />\n      <xs:enumeration value=\"UHC\" />\n      <xs:enumeration value=\"UJIS\" />\n      <xs:enumeration value=\"UK\" />\n      <xs:enumeration value=\"UNICODE\" />\n      <xs:enumeration value=\"UNICODEBIG\" />\n      <xs:enumeration value=\"UNICODELITTLE\" />\n      <xs:enumeration value=\"US-ASCII\" />\n      <xs:enumeration value=\"US\" />\n      <xs:enumeration value=\"UTF-7\" />\n      <xs:enumeration value=\"UTF-8\" />\n      <xs:enumeration value=\"UTF-16\" />\n      <xs:enumeration value=\"UTF-16BE\" />\n      <xs:enumeration value=\"UTF-16LE\" />\n      <xs:enumeration value=\"UTF-32\" />\n      <xs:enumeration value=\"UTF-32BE\" />\n      <xs:enumeration value=\"UTF-32LE\" />\n      <xs:enumeration value=\"UTF7\" />\n      <xs:enumeration value=\"UTF8\" />\n      <xs:enumeration value=\"UTF16\" />\n      <xs:enumeration value=\"UTF16BE\" />\n      <xs:enumeration value=\"UTF16LE\" />\n      <xs:enumeration value=\"UTF32\" />\n      <xs:enumeration value=\"UTF32BE\" />\n      <xs:enumeration value=\"UTF32LE\" />\n      <xs:enumeration value=\"VISCII\" />\n      <xs:enumeration value=\"WCHAR_T\" />\n      <xs:enumeration value=\"WIN-SAMI-2\" />\n      <xs:enumeration value=\"WINBALTRIM\" />\n      <xs:enumeration value=\"WINDOWS-31J\" />\n      <xs:enumeration value=\"WINDOWS-874\" />\n      <xs:enumeration value=\"WINDOWS-936\" />\n      <xs:enumeration value=\"WINDOWS-1250\" />\n      <xs:enumeration value=\"WINDOWS-1251\" />\n      <xs:enumeration value=\"WINDOWS-1252\" />\n      <xs:enumeration value=\"WINDOWS-1253\" />\n      <xs:enumeration value=\"WINDOWS-1254\" />\n      <xs:enumeration value=\"WINDOWS-1255\" />\n      <xs:enumeration value=\"WINDOWS-1256\" />\n      <xs:enumeration value=\"WINDOWS-1257\" />\n      <xs:enumeration value=\"WINDOWS-1258\" />\n      <xs:enumeration value=\"WINSAMI2\" />\n      <xs:enumeration value=\"WS2\" />\n      <xs:enumeration value=\"YU\" />\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:simpleType name=\"ProtocolType\">\n    <xs:restriction base=\"xs:string\">\n      <xs:pattern value=\"[Cc][Ii][Ff][Ss]\" />\n      <xs:pattern value=\"[Ff][Tt][Pp]\" />\n      <xs:pattern value=\"[Ss][Ff][Tt][Pp]\" />\n      <!--<xs:enumeration value=\"cifs\" />-->\n      <!--<xs:enumeration value=\"ftp\" />-->\n      <!--<xs:enumeration value=\"sftp\" />-->\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:simpleType name=\"CryptMethodType\">\n    <xs:restriction base=\"xs:string\">\n      <xs:pattern value=\"[Pp][Gg][Pp]\" />\n      <xs:pattern value=\"[Gg][Pp][Gg]\" />\n      <xs:pattern value=\"[Bb][Ff]\" />\n      <xs:pattern value=\"[Dd][Ee][Ss]-[Bb][Ll][Bb]\" />\n      <xs:pattern value=\"[Dd][Ee][Ss][3]\" />\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:simpleType name=\"CompressionRange\">\n    <xs:restriction base=\"xs:integer\">\n      <xs:minInclusive value=\"1\" />\n      <xs:maxInclusive value=\"9\" />\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:complexType name=\"CollectionTransferRequestMessageType\">\n    <xs:sequence>\n\n      <xs:element name=\"Source\">\n        <xs:complexType>\n          <xs:sequence>\n            <xs:element name=\"Protocol\" type=\"ProtocolType\" minOccurs=\"1\" />\n            <xs:element name=\"Address\" type=\"xs:string\" minOccurs=\"1\" />\n            <xs:element name=\"Port\" type=\"xs:int\" minOccurs=\"1\" />\n            <xs:element name=\"Login\" type=\"xs:string\" minOccurs=\"1\" />\n            <xs:element name=\"Password\" type=\"xs:string\" minOccurs=\"0\" />\n            <xs:element name=\"Path\" type=\"xs:string\" minOccurs=\"1\" />\n            <xs:element name=\"Files\" minOccurs=\"1\" maxOccurs=\"1\">\n              <xs:complexType>\n                <xs:sequence>\n                  <xs:element name=\"File\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"unbounded\" />\n                </xs:sequence>\n              </xs:complexType>\n            </xs:element>\n            <xs:element name=\"PassiveMode\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"PreSite\" type=\"xs:string\" minOccurs=\"0\" />\n            <xs:element name=\"PostSite\" type=\"xs:string\" minOccurs=\"0\" />\n            <xs:element name=\"BinaryMode\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"TextMode\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n          </xs:sequence>\n        </xs:complexType>\n      </xs:element>\n\n      <xs:element name=\"Target\">\n        <xs:complexType>\n          <xs:sequence>\n            <xs:element name=\"Protocol\" type=\"ProtocolType\" minOccurs=\"1\" />\n            <xs:element name=\"Address\" type=\"xs:string\" minOccurs=\"1\" />\n            <xs:element name=\"Port\" type=\"xs:int\" minOccurs=\"1\" />\n            <xs:element name=\"Login\" type=\"xs:string\" minOccurs=\"1\" />\n            <xs:element name=\"Password\" type=\"xs:string\" minOccurs=\"0\" />\n            <xs:element name=\"Path\" type=\"xs:string\" minOccurs=\"1\" />\n            <xs:element name=\"PassiveMode\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"PreSite\" type=\"xs:string\" minOccurs=\"0\" />\n            <xs:element name=\"PostSite\" type=\"xs:string\" minOccurs=\"0\" />\n            <xs:element name=\"BinaryMode\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"TextMode\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n          </xs:sequence>\n        </xs:complexType>\n      </xs:element>\n\n      <xs:element name=\"Options\">\n        <xs:complexType>\n          <xs:sequence>\n            <xs:element name=\"Archive\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"AVScanning\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"Compression\" type=\"CompressionRange\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"Decompression\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"RemoveSourceFile\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"MD5\" type=\"xs:string\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"FilenameSuffix\" type=\"xs:string\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"DirectUpload\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n\n            <xs:element name=\"Encryption\" minOccurs=\"0\" maxOccurs=\"1\">\n              <xs:complexType>\n                <xs:sequence>\n                  <xs:element name=\"Method\" type=\"CryptMethodType\" minOccurs=\"0\" maxOccurs=\"1\" />\n                  <xs:element name=\"KeyID\" type=\"xs:string\" minOccurs=\"0\" maxOccurs=\"1\" />\n                  <xs:element name=\"Recipient\" type=\"xs:string\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n                </xs:sequence>\n              </xs:complexType>\n            </xs:element>\n\n            <xs:element name=\"Decryption\" minOccurs=\"0\" maxOccurs=\"1\">\n              <xs:complexType>\n                <xs:sequence>\n                  <xs:element name=\"Method\" type=\"CryptMethodType\" minOccurs=\"0\" maxOccurs=\"1\" />\n                  <xs:element name=\"KeyID\" type=\"xs:string\" minOccurs=\"0\" maxOccurs=\"1\" />\n                </xs:sequence>\n              </xs:complexType>\n            </xs:element>\n\n            <!--<xs:element name=\"Decryption\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />-->\n            <xs:element name=\"Signing\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element name=\"SignVerification\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n\n\n\n            <xs:element name=\"Encoding\" minOccurs=\"0\" maxOccurs=\"1\">\n              <xs:complexType>\n                <xs:sequence>\n                  <xs:element name=\"From\" type=\"EncodingType\" minOccurs=\"1\" maxOccurs=\"unbounded\" />\n                  <xs:element name=\"To\" type=\"EncodingType\" minOccurs=\"1\" maxOccurs=\"unbounded\" />\n                </xs:sequence>\n              </xs:complexType>\n            </xs:element>\n          </xs:sequence>\n        </xs:complexType>\n      </xs:element>\n\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"CollectionTransferResponseMessageType\">\n    <xs:sequence>\n      <xs:element name=\"TransferID\" type=\"xs:string\" minOccurs=\"1\" />\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"CollectionStatusRequestMessageType\">\n    <xs:sequence>\n      <xs:element name=\"TransferID\" type=\"xs:string\" minOccurs=\"1\" />\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"CollectionStatusResponseMessageType\">\n    <xs:sequence>\n      <xs:element name=\"TransferID\" type=\"xs:string\" minOccurs=\"1\" />\n      <xs:element name=\"TransferStatus\" minOccurs=\"1\" maxOccurs=\"1\">\n        <xs:complexType>\n          <xs:sequence>\n            <xs:element name=\"Time\" type=\"xs:dateTime\"  minOccurs=\"1\" maxOccurs=\"1\" />\n            <xs:element name=\"StatusID\" type=\"xs:integer\"  minOccurs=\"1\" maxOccurs=\"1\" />\n            <xs:element name=\"StatusDescription\" type=\"xs:string\"  minOccurs=\"1\" maxOccurs=\"1\" />\n          </xs:sequence>\n        </xs:complexType>\n      </xs:element>\n      <xs:element name=\"Files\" minOccurs=\"1\" maxOccurs=\"1\">\n        <xs:complexType>\n          <xs:sequence>\n            <xs:element name=\"File\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n              <xs:complexType>\n                <xs:sequence>\n                  <xs:element name=\"Name\" type=\"xs:string\"  minOccurs=\"1\" maxOccurs=\"1\" />\n                  <xs:element name=\"Time\" type=\"xs:dateTime\"  minOccurs=\"1\" maxOccurs=\"1\" />\n                  <xs:element name=\"StatusID\" type=\"xs:integer\"  minOccurs=\"1\" maxOccurs=\"1\" />\n                  <xs:element name=\"StatusType\" type=\"xs:string\"  minOccurs=\"1\" maxOccurs=\"1\" />\n                  <xs:element name=\"StatusDescription\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\" />\n                </xs:sequence>\n              </xs:complexType>\n            </xs:element>\n          </xs:sequence>\n        </xs:complexType>\n      </xs:element>\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"ListRequestMessageType\">\n    <xs:sequence>\n      <xs:element name=\"Protocol\" type=\"ProtocolType\" minOccurs=\"1\" maxOccurs=\"1\"/>\n      <xs:element name=\"Address\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\" />\n      <xs:element name=\"Port\" type=\"xs:int\" minOccurs=\"1\" maxOccurs=\"1\" />\n      <xs:element name=\"Login\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\" />\n      <xs:element name=\"Password\" type=\"xs:string\" minOccurs=\"0\" maxOccurs=\"1\" />\n      <xs:element name=\"Path\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\" />\n      <xs:element name=\"FilterOutTransferred\" type=\"xs:boolean\" minOccurs=\"0\" maxOccurs=\"1\" />\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"FileType\">\n    <xs:sequence>\n      <xs:element name=\"Name\" type=\"xs:string\"  minOccurs=\"1\" maxOccurs=\"1\" />\n      <xs:element name=\"Size\" type=\"xs:long\"  minOccurs=\"1\" maxOccurs=\"1\" />\n      <xs:element name=\"ModificationTime\" type=\"xs:dateTime\"  minOccurs=\"1\" maxOccurs=\"1\" />\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"ListResponseMessageType\">\n    <xs:sequence>\n      <xs:element name=\"List\" minOccurs=\"1\" maxOccurs=\"unbounded\">\n        <xs:complexType>\n          <xs:sequence>\n            <xs:element name=\"File\" type=\"FileType\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n          </xs:sequence>\n        </xs:complexType>\n      </xs:element>\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"ServiceStatusRequestMessageType\"/>\n\n  <xs:complexType name=\"ServiceStatusResponseMessageType\">\n    <xs:sequence>\n      <xs:element name=\"LastTransferTime\" type=\"xs:dateTime\"  minOccurs=\"1\" maxOccurs=\"1\" />\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"LogRequestMessageType\">\n    <xs:sequence>\n      <xs:element name=\"TransferID\" type=\"xs:string\" minOccurs=\"1\" />\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"LogResponseMessageType\">\n    <xs:sequence>\n      <xs:element name=\"TransferID\" type=\"xs:string\" minOccurs=\"1\" />\n      <xs:element name=\"TransferLog\" type=\"xs:string\"  minOccurs=\"1\" maxOccurs=\"1\" />\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:element name=\"CollectionTransferRequest\" type=\"CollectionTransferRequestMessageType\"/>\n  <xs:element name=\"CollectionTransferResponse\" type=\"CollectionTransferResponseMessageType\"/>\n  <xs:element name=\"CollectionStatusRequest\" type=\"CollectionStatusRequestMessageType\"/>\n  <xs:element name=\"CollectionStatusResponse\" type=\"CollectionStatusResponseMessageType\"/>\n  <xs:element name=\"LogRequest\" type=\"LogRequestMessageType\"/>\n  <xs:element name=\"LogResponse\" type=\"LogResponseMessageType\"/>\n  <xs:element name=\"ListRequest\" type=\"ListRequestMessageType\"/>\n  <xs:element name=\"ListResponse\" type=\"ListResponseMessageType\"/>\n  <xs:element name=\"ServiceStatusRequest\" type=\"ServiceStatusRequestMessageType\"/>\n  <xs:element name=\"ServiceStatusResponse\" type=\"ServiceStatusResponseMessageType\"/>\n</xs:schema>\n"], "filenames": ["lib/common.rb", "lib/filebroker.rb", "public/filebroker_service.xsd"], "buggy_code_start_loc": [506, 1230, 1354], "buggy_code_end_loc": [751, 1277, 1354], "fixing_code_start_loc": [506, 1231, 1355], "fixing_code_end_loc": [771, 1286, 1356], "type": "CWE-89", "message": "** UNSUPPPORTED WHEN ASSIGNED **** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in peel filebroker and classified as critical. Affected by this issue is the function select_transfer_status_desc of the file lib/common.rb. The manipulation leads to sql injection. The name of the patch is 91097e26a6c84d3208a351afaa52e0f62e5853ef. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217616. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.", "other": {"cve": {"id": "CVE-2014-125061", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-07T13:15:09.210", "lastModified": "2023-01-12T18:13:13.230", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "** UNSUPPPORTED WHEN ASSIGNED **** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in peel filebroker and classified as critical. Affected by this issue is the function select_transfer_status_desc of the file lib/common.rb. The manipulation leads to sql injection. The name of the patch is 91097e26a6c84d3208a351afaa52e0f62e5853ef. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217616. NOTE: This vulnerability only affects products that are no longer supported by the maintainer."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:filebroker_project:filebroker:*:*:*:*:*:*:*:*", "versionEndExcluding": "2014-02-18", "matchCriteriaId": "7FE7743D-66EA-4616-A904-48DBAEA67203"}]}]}], "references": [{"url": "https://github.com/peel/filebroker/commit/91097e26a6c84d3208a351afaa52e0f62e5853ef", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217616", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217616", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/peel/filebroker/commit/91097e26a6c84d3208a351afaa52e0f62e5853ef"}}