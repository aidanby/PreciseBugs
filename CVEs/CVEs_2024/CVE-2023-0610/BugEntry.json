{"buggy_code": ["<?php\n\nnamespace Wallabag\\AnnotationBundle\\Controller;\n\nuse FOS\\RestBundle\\Controller\\FOSRestController;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\ParamConverter;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Wallabag\\AnnotationBundle\\Entity\\Annotation;\nuse Wallabag\\AnnotationBundle\\Form\\EditAnnotationType;\nuse Wallabag\\AnnotationBundle\\Form\\NewAnnotationType;\nuse Wallabag\\CoreBundle\\Entity\\Entry;\n\nclass WallabagAnnotationController extends FOSRestController\n{\n    /**\n     * Retrieve annotations for an entry.\n     *\n     * @see Wallabag\\ApiBundle\\Controller\\WallabagRestController\n     *\n     * @return JsonResponse\n     */\n    public function getAnnotationsAction(Entry $entry)\n    {\n        $annotationRows = $this\n            ->getDoctrine()\n            ->getRepository('WallabagAnnotationBundle:Annotation')\n            ->findAnnotationsByPageId($entry->getId(), $this->getUser()->getId());\n        $total = \\count($annotationRows);\n        $annotations = ['total' => $total, 'rows' => $annotationRows];\n\n        $json = $this->get('jms_serializer')->serialize($annotations, 'json');\n\n        return (new JsonResponse())->setJson($json);\n    }\n\n    /**\n     * Creates a new annotation.\n     *\n     * @return JsonResponse\n     *\n     * @see Wallabag\\ApiBundle\\Controller\\WallabagRestController\n     */\n    public function postAnnotationAction(Request $request, Entry $entry)\n    {\n        $data = json_decode($request->getContent(), true);\n\n        $em = $this->getDoctrine()->getManager();\n        $annotation = new Annotation($this->getUser());\n        $annotation->setEntry($entry);\n\n        $form = $this->get('form.factory')->createNamed('', NewAnnotationType::class, $annotation, [\n            'csrf_protection' => false,\n            'allow_extra_fields' => true,\n        ]);\n        $form->submit($data);\n\n        if ($form->isValid()) {\n            $em->persist($annotation);\n            $em->flush();\n\n            $json = $this->get('jms_serializer')->serialize($annotation, 'json');\n\n            return JsonResponse::fromJsonString($json);\n        }\n\n        return $form;\n    }\n\n    /**\n     * Updates an annotation.\n     *\n     * @see Wallabag\\ApiBundle\\Controller\\WallabagRestController\n     *\n     * @ParamConverter(\"annotation\", class=\"WallabagAnnotationBundle:Annotation\")\n     *\n     * @return JsonResponse\n     */\n    public function putAnnotationAction(Annotation $annotation, Request $request)\n    {\n        $data = json_decode($request->getContent(), true);\n\n        $form = $this->get('form.factory')->createNamed('', EditAnnotationType::class, $annotation, [\n            'csrf_protection' => false,\n            'allow_extra_fields' => true,\n        ]);\n        $form->submit($data);\n\n        if ($form->isValid()) {\n            $em = $this->getDoctrine()->getManager();\n            $em->persist($annotation);\n            $em->flush();\n\n            $json = $this->get('jms_serializer')->serialize($annotation, 'json');\n\n            return JsonResponse::fromJsonString($json);\n        }\n\n        return $form;\n    }\n\n    /**\n     * Removes an annotation.\n     *\n     * @see Wallabag\\ApiBundle\\Controller\\WallabagRestController\n     *\n     * @ParamConverter(\"annotation\", class=\"WallabagAnnotationBundle:Annotation\")\n     *\n     * @return JsonResponse\n     */\n    public function deleteAnnotationAction(Annotation $annotation)\n    {\n        $em = $this->getDoctrine()->getManager();\n        $em->remove($annotation);\n        $em->flush();\n\n        $json = $this->get('jms_serializer')->serialize($annotation, 'json');\n\n        return (new JsonResponse())->setJson($json);\n    }\n}\n", "<?php\n\nnamespace Wallabag\\AnnotationBundle\\DataFixtures;\n\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Persistence\\ObjectManager;\nuse Wallabag\\AnnotationBundle\\Entity\\Annotation;\nuse Wallabag\\CoreBundle\\DataFixtures\\EntryFixtures;\nuse Wallabag\\UserBundle\\DataFixtures\\UserFixtures;\n\nclass AnnotationFixtures extends Fixture implements DependentFixtureInterface\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function load(ObjectManager $manager)\n    {\n        $annotation1 = new Annotation($this->getReference('admin-user'));\n        $annotation1->setEntry($this->getReference('entry1'));\n        $annotation1->setText('This is my annotation /o/');\n        $annotation1->setQuote('content');\n\n        $manager->persist($annotation1);\n\n        $this->addReference('annotation1', $annotation1);\n\n        $annotation2 = new Annotation($this->getReference('admin-user'));\n        $annotation2->setEntry($this->getReference('entry2'));\n        $annotation2->setText('This is my 2nd annotation /o/');\n        $annotation2->setQuote('content');\n\n        $manager->persist($annotation2);\n\n        $this->addReference('annotation2', $annotation2);\n\n        $manager->flush();\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getDependencies()\n    {\n        return [\n            EntryFixtures::class,\n            UserFixtures::class,\n        ];\n    }\n}\n", "<?php\n\nnamespace Wallabag\\AnnotationBundle\\Repository;\n\nuse Doctrine\\ORM\\EntityRepository;\nuse Doctrine\\ORM\\QueryBuilder;\nuse Wallabag\\AnnotationBundle\\Entity\\Annotation;\n\n/**\n * AnnotationRepository.\n */\nclass AnnotationRepository extends EntityRepository\n{\n    /**\n     * Retrieves all annotations for a user.\n     *\n     * @param int $userId\n     *\n     * @return QueryBuilder\n     */\n    public function getBuilderForAllByUser($userId)\n    {\n        return $this\n            ->getSortedQueryBuilderByUser($userId)\n        ;\n    }\n\n    /**\n     * Get annotation for this id.\n     *\n     * @param int $annotationId\n     *\n     * @return array\n     */\n    public function findAnnotationById($annotationId)\n    {\n        return $this->createQueryBuilder('a')\n            ->andWhere('a.id = :annotationId')->setParameter('annotationId', $annotationId)\n            ->getQuery()\n            ->getSingleResult()\n        ;\n    }\n\n    /**\n     * Find annotations for entry id.\n     *\n     * @param int $entryId\n     * @param int $userId\n     *\n     * @return array\n     */\n    public function findAnnotationsByPageId($entryId, $userId)\n    {\n        return $this->createQueryBuilder('a')\n            ->where('a.entry = :entryId')->setParameter('entryId', $entryId)\n            ->andwhere('a.user = :userId')->setParameter('userId', $userId)\n            ->getQuery()\n            ->getResult()\n        ;\n    }\n\n    /**\n     * Find last annotation for a given entry id. Used only for tests.\n     *\n     * @param int $entryId\n     *\n     * @return array\n     */\n    public function findLastAnnotationByPageId($entryId, $userId)\n    {\n        return $this->createQueryBuilder('a')\n            ->where('a.entry = :entryId')->setParameter('entryId', $entryId)\n            ->andwhere('a.user = :userId')->setParameter('userId', $userId)\n            ->orderBy('a.id', 'DESC')\n            ->setMaxResults(1)\n            ->getQuery()\n            ->getOneOrNullResult();\n    }\n\n    /**\n     * Used only in test case to get the right annotation associated to the right user.\n     *\n     * @param string $username\n     *\n     * @return Annotation\n     */\n    public function findOneByUsername($username)\n    {\n        return $this->createQueryBuilder('a')\n            ->leftJoin('a.user', 'u')\n            ->where('u.username = :username')->setParameter('username', $username)\n            ->orderBy('a.id', 'DESC')\n            ->setMaxResults(1)\n            ->getQuery()\n            ->getSingleResult();\n    }\n\n    /**\n     * Remove all annotations for a user id.\n     * Used when a user want to reset all informations.\n     *\n     * @param int $userId\n     */\n    public function removeAllByUserId($userId)\n    {\n        $this->getEntityManager()\n            ->createQuery('DELETE FROM Wallabag\\AnnotationBundle\\Entity\\Annotation a WHERE a.user = :userId')\n            ->setParameter('userId', $userId)\n            ->execute();\n    }\n\n    /**\n     * Find all annotations related to archived entries.\n     *\n     * @param $userId\n     *\n     * @return mixed\n     */\n    public function findAllArchivedEntriesByUser($userId)\n    {\n        return $this->createQueryBuilder('a')\n            ->leftJoin('a.entry', 'e')\n            ->where('a.user = :userid')->setParameter(':userid', $userId)\n            ->andWhere('e.isArchived = true')\n            ->getQuery()\n            ->getResult();\n    }\n\n    /**\n     * Return a query builder to used by other getBuilderFor* method.\n     *\n     * @param int $userId\n     *\n     * @return QueryBuilder\n     */\n    private function getSortedQueryBuilderByUser($userId)\n    {\n        return $this->createQueryBuilder('a')\n            ->leftJoin('a.user', 'u')\n            ->andWhere('u.id = :userId')->setParameter('userId', $userId)\n            ->orderBy('a.id', 'desc')\n        ;\n    }\n}\n", "<?php\n\nnamespace Wallabag\\ApiBundle\\Controller;\n\nuse Nelmio\\ApiDocBundle\\Annotation\\ApiDoc;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\ParamConverter;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Wallabag\\AnnotationBundle\\Entity\\Annotation;\nuse Wallabag\\CoreBundle\\Entity\\Entry;\n\nclass AnnotationRestController extends WallabagRestController\n{\n    /**\n     * Retrieve annotations for an entry.\n     *\n     * @ApiDoc(\n     *      requirements={\n     *          {\"name\"=\"entry\", \"dataType\"=\"integer\", \"requirement\"=\"\\w+\", \"description\"=\"The entry ID\"}\n     *      }\n     * )\n     *\n     * @return JsonResponse\n     */\n    public function getAnnotationsAction(Entry $entry)\n    {\n        $this->validateAuthentication();\n\n        return $this->forward('WallabagAnnotationBundle:WallabagAnnotation:getAnnotations', [\n            'entry' => $entry,\n        ]);\n    }\n\n    /**\n     * Creates a new annotation.\n     *\n     * @ApiDoc(\n     *      requirements={\n     *          {\"name\"=\"ranges\", \"dataType\"=\"array\", \"requirement\"=\"\\w+\", \"description\"=\"The range array for the annotation\"},\n     *          {\"name\"=\"quote\", \"dataType\"=\"string\", \"description\"=\"The annotated text\"},\n     *          {\"name\"=\"text\", \"dataType\"=\"string\", \"required\"=true, \"description\"=\"Content of annotation\"},\n     *      }\n     * )\n     *\n     * @return JsonResponse\n     */\n    public function postAnnotationAction(Request $request, Entry $entry)\n    {\n        $this->validateAuthentication();\n\n        return $this->forward('WallabagAnnotationBundle:WallabagAnnotation:postAnnotation', [\n            'request' => $request,\n            'entry' => $entry,\n        ]);\n    }\n\n    /**\n     * Updates an annotation.\n     *\n     * @ApiDoc(\n     *      requirements={\n     *          {\"name\"=\"annotation\", \"dataType\"=\"string\", \"requirement\"=\"\\w+\", \"description\"=\"The annotation ID\"}\n     *      }\n     * )\n     *\n     * @ParamConverter(\"annotation\", class=\"WallabagAnnotationBundle:Annotation\")\n     *\n     * @return JsonResponse\n     */\n    public function putAnnotationAction(Annotation $annotation, Request $request)\n    {\n        $this->validateAuthentication();\n\n        return $this->forward('WallabagAnnotationBundle:WallabagAnnotation:putAnnotation', [\n            'annotation' => $annotation,\n            'request' => $request,\n        ]);\n    }\n\n    /**\n     * Removes an annotation.\n     *\n     * @ApiDoc(\n     *      requirements={\n     *          {\"name\"=\"annotation\", \"dataType\"=\"string\", \"requirement\"=\"\\w+\", \"description\"=\"The annotation ID\"}\n     *      }\n     * )\n     *\n     * @ParamConverter(\"annotation\", class=\"WallabagAnnotationBundle:Annotation\")\n     *\n     * @return JsonResponse\n     */\n    public function deleteAnnotationAction(Annotation $annotation)\n    {\n        $this->validateAuthentication();\n\n        return $this->forward('WallabagAnnotationBundle:WallabagAnnotation:deleteAnnotation', [\n            'annotation' => $annotation,\n        ]);\n    }\n}\n", "<?php\n\nnamespace Tests\\Wallabag\\AnnotationBundle\\Controller;\n\nuse Tests\\Wallabag\\AnnotationBundle\\WallabagAnnotationTestCase;\nuse Wallabag\\AnnotationBundle\\Entity\\Annotation;\nuse Wallabag\\CoreBundle\\Entity\\Entry;\n\nclass AnnotationControllerTest extends WallabagAnnotationTestCase\n{\n    /**\n     * This data provider allow to tests annotation from the :\n     *     - API POV (when user use the api to manage annotations)\n     *     - and User POV (when user use the web interface - using javascript - to manage annotations).\n     */\n    public function dataForEachAnnotations()\n    {\n        return [\n            ['/api/annotations'],\n            ['annotations'],\n        ];\n    }\n\n    /**\n     * Test fetching annotations for an entry.\n     *\n     * @dataProvider dataForEachAnnotations\n     */\n    public function testGetAnnotations($prefixUrl)\n    {\n        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUserName('admin');\n        $entry = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findOneByUsernameAndNotArchived('admin');\n\n        $annotation = new Annotation($user);\n        $annotation->setEntry($entry);\n        $annotation->setText('This is my annotation /o/');\n        $annotation->setQuote('content');\n\n        $em->persist($annotation);\n        $em->flush();\n\n        if ('annotations' === $prefixUrl) {\n            $this->logInAs('admin');\n        }\n\n        $this->client->request('GET', $prefixUrl . '/' . $entry->getId() . '.json');\n        $this->assertSame(200, $this->client->getResponse()->getStatusCode());\n\n        $content = json_decode($this->client->getResponse()->getContent(), true);\n        $this->assertGreaterThanOrEqual(1, $content['total']);\n        $this->assertSame($annotation->getText(), $content['rows'][0]['text']);\n\n        // we need to re-fetch the annotation becase after the flush, it has been \"detached\" from the entity manager\n        $annotation = $em->getRepository('WallabagAnnotationBundle:Annotation')->findAnnotationById($annotation->getId());\n        $em->remove($annotation);\n        $em->flush();\n    }\n\n    /**\n     * Test creating an annotation for an entry.\n     *\n     * @dataProvider dataForEachAnnotations\n     */\n    public function testSetAnnotation($prefixUrl)\n    {\n        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n\n        if ('annotations' === $prefixUrl) {\n            $this->logInAs('admin');\n        }\n\n        /** @var Entry $entry */\n        $entry = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findOneByUsernameAndNotArchived('admin');\n\n        $headers = ['CONTENT_TYPE' => 'application/json'];\n        $content = json_encode([\n            'text' => 'my annotation',\n            'quote' => 'my quote',\n            'ranges' => [\n                ['start' => '', 'startOffset' => 24, 'end' => '', 'endOffset' => 31],\n            ],\n        ]);\n        $this->client->request('POST', $prefixUrl . '/' . $entry->getId() . '.json', [], [], $headers, $content);\n\n        $this->assertSame(200, $this->client->getResponse()->getStatusCode());\n\n        $content = json_decode($this->client->getResponse()->getContent(), true);\n\n        $this->assertSame('Big boss', $content['user']);\n        $this->assertSame('v1.0', $content['annotator_schema_version']);\n        $this->assertSame('my annotation', $content['text']);\n        $this->assertSame('my quote', $content['quote']);\n\n        /** @var Annotation $annotation */\n        $annotation = $em\n            ->getRepository('WallabagAnnotationBundle:Annotation')\n            ->findLastAnnotationByPageId($entry->getId(), 1);\n\n        $this->assertSame('my annotation', $annotation->getText());\n    }\n\n    public function testAllowEmptyQuote()\n    {\n        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n\n        /** @var Entry $entry */\n        $entry = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findOneByUsernameAndNotArchived('admin');\n\n        $headers = ['CONTENT_TYPE' => 'application/json'];\n        $content = json_encode([\n            'text' => 'my annotation',\n            'quote' => null,\n            'ranges' => [\n                ['start' => '', 'startOffset' => 24, 'end' => '', 'endOffset' => 31],\n            ],\n        ]);\n        $this->client->request('POST', '/api/annotations/' . $entry->getId() . '.json', [], [], $headers, $content);\n\n        $this->assertSame(200, $this->client->getResponse()->getStatusCode());\n\n        $content = json_decode($this->client->getResponse()->getContent(), true);\n\n        $this->assertSame('Big boss', $content['user']);\n        $this->assertSame('v1.0', $content['annotator_schema_version']);\n        $this->assertSame('my annotation', $content['text']);\n        $this->assertSame('', $content['quote']);\n    }\n\n    public function testAllowOmmittedQuote()\n    {\n        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n\n        /** @var Entry $entry */\n        $entry = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findOneByUsernameAndNotArchived('admin');\n\n        $headers = ['CONTENT_TYPE' => 'application/json'];\n        $content = json_encode([\n            'text' => 'my new annotation',\n            'ranges' => [\n                ['start' => '', 'startOffset' => 25, 'end' => '', 'endOffset' => 32],\n            ],\n        ]);\n        $this->client->request('POST', '/api/annotations/' . $entry->getId() . '.json', [], [], $headers, $content);\n\n        $this->assertSame(200, $this->client->getResponse()->getStatusCode());\n\n        $content = json_decode($this->client->getResponse()->getContent(), true);\n\n        $this->assertSame('Big boss', $content['user']);\n        $this->assertSame('v1.0', $content['annotator_schema_version']);\n        $this->assertSame('my new annotation', $content['text']);\n        $this->assertSame('', $content['quote']);\n    }\n\n    /**\n     * @dataProvider dataForEachAnnotations\n     */\n    public function testSetAnnotationWithQuoteTooLong($prefixUrl)\n    {\n        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n\n        if ('annotations' === $prefixUrl) {\n            $this->logInAs('admin');\n        }\n\n        /** @var Entry $entry */\n        $entry = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findOneByUsernameAndNotArchived('admin');\n\n        $longQuote = str_repeat('a', 10001);\n        $headers = ['CONTENT_TYPE' => 'application/json'];\n        $content = json_encode([\n            'text' => 'my annotation',\n            'quote' => $longQuote,\n            'ranges' => [\n                ['start' => '', 'startOffset' => 24, 'end' => '', 'endOffset' => 31],\n            ],\n        ]);\n        $this->client->request('POST', $prefixUrl . '/' . $entry->getId() . '.json', [], [], $headers, $content);\n\n        $this->assertSame(400, $this->client->getResponse()->getStatusCode());\n    }\n\n    /**\n     * Test editing an existing annotation.\n     *\n     * @dataProvider dataForEachAnnotations\n     */\n    public function testEditAnnotation($prefixUrl)\n    {\n        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUserName('admin');\n        $entry = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findOneByUsernameAndNotArchived('admin');\n\n        $annotation = new Annotation($user);\n        $annotation->setEntry($entry);\n        $annotation->setText('This is my annotation /o/');\n        $annotation->setQuote('my quote');\n\n        $em->persist($annotation);\n        $em->flush();\n\n        $headers = ['CONTENT_TYPE' => 'application/json'];\n        $content = json_encode([\n            'text' => 'a modified annotation',\n        ]);\n        $this->client->request('PUT', $prefixUrl . '/' . $annotation->getId() . '.json', [], [], $headers, $content);\n        $this->assertSame(200, $this->client->getResponse()->getStatusCode());\n\n        $content = json_decode($this->client->getResponse()->getContent(), true);\n\n        $this->assertSame('Big boss', $content['user']);\n        $this->assertSame('v1.0', $content['annotator_schema_version']);\n        $this->assertSame('a modified annotation', $content['text']);\n        $this->assertSame('my quote', $content['quote']);\n\n        /** @var Annotation $annotationUpdated */\n        $annotationUpdated = $em\n            ->getRepository('WallabagAnnotationBundle:Annotation')\n            ->findOneById($annotation->getId());\n        $this->assertSame('a modified annotation', $annotationUpdated->getText());\n\n        $em->remove($annotationUpdated);\n        $em->flush();\n    }\n\n    /**\n     * Test deleting an annotation.\n     *\n     * @dataProvider dataForEachAnnotations\n     */\n    public function testDeleteAnnotation($prefixUrl)\n    {\n        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUserName('admin');\n        $entry = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findOneByUsernameAndNotArchived('admin');\n\n        $annotation = new Annotation($user);\n        $annotation->setEntry($entry);\n        $annotation->setText('This is my annotation /o/');\n        $annotation->setQuote('my quote');\n\n        $em->persist($annotation);\n        $em->flush();\n\n        if ('annotations' === $prefixUrl) {\n            $this->logInAs('admin');\n        }\n\n        $headers = ['CONTENT_TYPE' => 'application/json'];\n        $content = json_encode([\n            'text' => 'a modified annotation',\n        ]);\n        $this->client->request('DELETE', $prefixUrl . '/' . $annotation->getId() . '.json', [], [], $headers, $content);\n        $this->assertSame(200, $this->client->getResponse()->getStatusCode());\n\n        $content = json_decode($this->client->getResponse()->getContent(), true);\n\n        $this->assertSame('This is my annotation /o/', $content['text']);\n\n        $annotationDeleted = $em\n            ->getRepository('WallabagAnnotationBundle:Annotation')\n            ->findOneById($annotation->getId());\n\n        $this->assertNull($annotationDeleted);\n    }\n}\n", "<?php\n\nnamespace Tests\\Wallabag\\CoreBundle\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Tests\\Wallabag\\CoreBundle\\WallabagCoreTestCase;\nuse Wallabag\\AnnotationBundle\\Entity\\Annotation;\nuse Wallabag\\CoreBundle\\Entity\\Config;\nuse Wallabag\\CoreBundle\\Entity\\Entry;\nuse Wallabag\\CoreBundle\\Entity\\Tag;\nuse Wallabag\\UserBundle\\Entity\\User;\n\nclass ConfigControllerTest extends WallabagCoreTestCase\n{\n    public function testLogin()\n    {\n        $client = $this->getClient();\n\n        $client->request('GET', '/new');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('login', $client->getResponse()->headers->get('location'));\n    }\n\n    public function testIndex()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertCount(1, $crawler->filter('button[id=config_save]'));\n        $this->assertCount(1, $crawler->filter('button[id=change_passwd_save]'));\n        $this->assertCount(1, $crawler->filter('button[id=update_user_save]'));\n        $this->assertCount(1, $crawler->filter('button[id=feed_config_save]'));\n    }\n\n    public function testUpdate()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=config_save]')->form();\n\n        $data = [\n            'config[theme]' => 'baggy',\n            'config[items_per_page]' => '30',\n            'config[reading_speed]' => '100',\n            'config[action_mark_as_read]' => '0',\n            'config[language]' => 'en',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.config_saved', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function testChangeReadingSpeed()\n    {\n        $this->logInAs('admin');\n        $this->useTheme('baggy');\n        $client = $this->getClient();\n\n        $entry = new Entry($this->getLoggedInUser());\n        $entry->setUrl('http://0.0.0.0/test-entry1')\n            ->setReadingTime(22);\n        $this->getEntityManager()->persist($entry);\n\n        $this->getEntityManager()->flush();\n        $this->getEntityManager()->clear();\n\n        $crawler = $client->request('GET', '/unread/list');\n        $form = $crawler->filter('button[id=submit-filter]')->form();\n        $dataFilters = [\n            'entry_filter[readingTime][right_number]' => 22,\n            'entry_filter[readingTime][left_number]' => 22,\n        ];\n        $crawler = $client->submit($form, $dataFilters);\n        $this->assertCount(1, $crawler->filter('div[class=entry]'));\n\n        // Change reading speed\n        $crawler = $client->request('GET', '/config');\n        $form = $crawler->filter('button[id=config_save]')->form();\n        $data = [\n            'config[reading_speed]' => '400',\n        ];\n        $client->submit($form, $data);\n\n        // Is the entry still available via filters?\n        $crawler = $client->request('GET', '/unread/list');\n        $form = $crawler->filter('button[id=submit-filter]')->form();\n        $crawler = $client->submit($form, $dataFilters);\n        $this->assertCount(0, $crawler->filter('div[class=entry]'));\n\n        // Restore old configuration\n        $crawler = $client->request('GET', '/config');\n        $form = $crawler->filter('button[id=config_save]')->form();\n        $data = [\n            'config[reading_speed]' => '100',\n        ];\n        $client->submit($form, $data);\n    }\n\n    public function dataForUpdateFailed()\n    {\n        return [\n            [[\n                'config[theme]' => 'baggy',\n                'config[items_per_page]' => '',\n                'config[language]' => 'en',\n            ]],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForUpdateFailed\n     */\n    public function testUpdateFailed($data)\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=config_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('This value should not be blank', $alert[0]);\n    }\n\n    public function dataForChangePasswordFailed()\n    {\n        return [\n            [\n                [\n                    'change_passwd[old_password]' => 'material',\n                    'change_passwd[new_password][first]' => '',\n                    'change_passwd[new_password][second]' => '',\n                ],\n                'validator.password_wrong_value',\n            ],\n            [\n                [\n                    'change_passwd[old_password]' => 'mypassword',\n                    'change_passwd[new_password][first]' => '',\n                    'change_passwd[new_password][second]' => '',\n                ],\n                'This value should not be blank',\n            ],\n            [\n                [\n                    'change_passwd[old_password]' => 'mypassword',\n                    'change_passwd[new_password][first]' => 'hop',\n                    'change_passwd[new_password][second]' => '',\n                ],\n                'validator.password_must_match',\n            ],\n            [\n                [\n                    'change_passwd[old_password]' => 'mypassword',\n                    'change_passwd[new_password][first]' => 'hop',\n                    'change_passwd[new_password][second]' => 'hop',\n                ],\n                'validator.password_too_short',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForChangePasswordFailed\n     */\n    public function testChangePasswordFailed($data, $expectedMessage)\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=change_passwd_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString($expectedMessage, $alert[0]);\n    }\n\n    public function testChangePassword()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=change_passwd_save]')->form();\n\n        $data = [\n            'change_passwd[old_password]' => 'mypassword',\n            'change_passwd[new_password][first]' => 'mypassword',\n            'change_passwd[new_password][second]' => 'mypassword',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.password_updated', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function dataForUserFailed()\n    {\n        return [\n            [\n                [\n                    'update_user[name]' => '',\n                    'update_user[email]' => '',\n                ],\n                'fos_user.email.blank',\n            ],\n            [\n                [\n                    'update_user[name]' => '',\n                    'update_user[email]' => 'test',\n                ],\n                'fos_user.email.invalid',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForUserFailed\n     */\n    public function testUserFailed($data, $expectedMessage)\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=update_user_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString($expectedMessage, $alert[0]);\n    }\n\n    public function testUserUpdate()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=update_user_save]')->form();\n\n        $data = [\n            'update_user[name]' => 'new name',\n            'update_user[email]' => 'admin@wallabag.io',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('flashes.config.notice.user_updated', $alert[0]);\n    }\n\n    public function testFeedUpdateResetToken()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        // reset the token\n        $em = $client->getContainer()->get('doctrine.orm.entity_manager');\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('admin');\n\n        if (!$user) {\n            $this->markTestSkipped('No user found in db.');\n        }\n\n        $config = $user->getConfig();\n        $config->setFeedToken(null);\n        $em->persist($config);\n        $em->flush();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('config.form_feed.no_token', $body[0]);\n\n        $client->request('GET', '/generate-token');\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('config.form_feed.token_reset', $body[0]);\n    }\n\n    public function testGenerateTokenAjax()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $client->request(\n            'GET',\n            '/generate-token',\n            [],\n            [],\n            ['HTTP_X-Requested-With' => 'XMLHttpRequest']\n        );\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n        $content = json_decode($client->getResponse()->getContent(), true);\n        $this->assertArrayHasKey('token', $content);\n    }\n\n    public function testRevokeTokenAjax()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $client->request(\n            'GET',\n            '/revoke-token',\n            [],\n            [],\n            ['HTTP_X-Requested-With' => 'XMLHttpRequest']\n        );\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n    }\n\n    public function testFeedUpdate()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=feed_config_save]')->form();\n\n        $data = [\n            'feed_config[feed_limit]' => 12,\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.feed_updated', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function dataForFeedFailed()\n    {\n        return [\n            [\n                [\n                    'feed_config[feed_limit]' => 0,\n                ],\n                'This value should be 1 or more.',\n            ],\n            [\n                [\n                    'feed_config[feed_limit]' => 1000000000000,\n                ],\n                'validator.feed_limit_too_high',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForFeedFailed\n     */\n    public function testFeedFailed($data, $expectedMessage)\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=feed_config_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString($expectedMessage, $alert[0]);\n    }\n\n    public function testTaggingRuleCreation()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=tagging_rule_save]')->form();\n\n        $data = [\n            'tagging_rule[rule]' => 'readingTime <= 3',\n            'tagging_rule[tags]' => 'short reading',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.tagging_rules_updated', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $editLink = $crawler->filter('div[id=set5] a.mode_edit')->last()->link();\n\n        $crawler = $client->click($editLink);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('?tagging-rule=', $client->getResponse()->headers->get('location'));\n\n        $crawler = $client->followRedirect();\n\n        $form = $crawler->filter('button[id=tagging_rule_save]')->form();\n\n        $data = [\n            'tagging_rule[rule]' => 'readingTime <= 30',\n            'tagging_rule[tags]' => 'short reading',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.tagging_rules_updated', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $this->assertStringContainsString('readingTime <= 30', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $deleteLink = $crawler->filter('div[id=set5] a.delete')->last()->link();\n\n        $crawler = $client->click($deleteLink);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n        $this->assertStringContainsString('flashes.config.notice.tagging_rules_deleted', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function dataForTaggingRuleFailed()\n    {\n        return [\n            [\n                [\n                    'tagging_rule[rule]' => 'unknownVar <= 3',\n                    'tagging_rule[tags]' => 'cool tag',\n                ],\n                [\n                    'The variable',\n                    'does not exist.',\n                ],\n            ],\n            [\n                [\n                    'tagging_rule[rule]' => 'length(domainName) <= 42',\n                    'tagging_rule[tags]' => 'cool tag',\n                ],\n                [\n                    'The operator',\n                    'does not exist.',\n                ],\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForTaggingRuleFailed\n     */\n    public function testTaggingRuleCreationFail($data, $messages)\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=tagging_rule_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n\n        foreach ($messages as $message) {\n            $this->assertStringContainsString($message, $body[0]);\n        }\n    }\n\n    public function testTaggingRuleTooLong()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=tagging_rule_save]')->form();\n\n        $crawler = $client->submit($form, [\n            'tagging_rule[rule]' => str_repeat('title', 60),\n            'tagging_rule[tags]' => 'cool tag',\n        ]);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n\n        $this->assertStringContainsString('255 characters', $body[0]);\n    }\n\n    public function testDeletingTaggingRuleFromAnOtherUser()\n    {\n        $this->logInAs('bob');\n        $client = $this->getClient();\n\n        $rule = $client->getContainer()->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:TaggingRule')\n            ->findAll()[0];\n\n        $crawler = $client->request('GET', '/tagging-rule/delete/' . $rule->getId());\n\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('You can not access this rule', $body[0]);\n    }\n\n    public function testEditingTaggingRuleFromAnOtherUser()\n    {\n        $this->logInAs('bob');\n        $client = $this->getClient();\n\n        $rule = $client->getContainer()->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:TaggingRule')\n            ->findAll()[0];\n\n        $crawler = $client->request('GET', '/tagging-rule/edit/' . $rule->getId());\n\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('You can not access this rule', $body[0]);\n    }\n\n    public function testIgnoreOriginRuleCreation()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=ignore_origin_user_rule_save]')->form();\n\n        $data = [\n            'ignore_origin_user_rule[rule]' => 'host = \"example.com\"',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.ignore_origin_rules_updated', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $editLink = $crawler->filter('div[id=set6] a.mode_edit')->last()->link();\n\n        $crawler = $client->click($editLink);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('?ignore-origin-user-rule=', $client->getResponse()->headers->get('location'));\n\n        $crawler = $client->followRedirect();\n\n        $form = $crawler->filter('button[id=ignore_origin_user_rule_save]')->form();\n\n        $data = [\n            'ignore_origin_user_rule[rule]' => 'host = \"example.org\"',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.ignore_origin_rules_updated', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $this->assertStringContainsString('host = \"example.org\"', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $deleteLink = $crawler->filter('div[id=set6] a.delete')->last()->link();\n\n        $crawler = $client->click($deleteLink);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n        $this->assertStringContainsString('flashes.config.notice.ignore_origin_rules_deleted', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function dataForIgnoreOriginRuleCreationFail()\n    {\n        return [\n            [\n                [\n                    'ignore_origin_user_rule[rule]' => 'foo = \"bar\"',\n                ],\n                [\n                    'The variable',\n                    'does not exist.',\n                ],\n            ],\n            [\n                [\n                    'ignore_origin_user_rule[rule]' => '_all != \"none\"',\n                ],\n                [\n                    'The operator',\n                    'does not exist.',\n                ],\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForIgnoreOriginRuleCreationFail\n     */\n    public function testIgnoreOriginRuleCreationFail($data, $messages)\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=ignore_origin_user_rule_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n\n        foreach ($messages as $message) {\n            $this->assertStringContainsString($message, $body[0]);\n        }\n    }\n\n    public function testDeletingIgnoreOriginRuleFromAnOtherUser()\n    {\n        $this->logInAs('bob');\n        $client = $this->getClient();\n\n        $rule = $client->getContainer()->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:IgnoreOriginUserRule')\n            ->findAll()[0];\n\n        $crawler = $client->request('GET', '/ignore-origin-user-rule/edit/' . $rule->getId());\n\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('You can not access this rule', $body[0]);\n    }\n\n    public function testEditingIgnoreOriginRuleFromAnOtherUser()\n    {\n        $this->logInAs('bob');\n        $client = $this->getClient();\n\n        $rule = $client->getContainer()->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:IgnoreOriginUserRule')\n            ->findAll()[0];\n\n        $crawler = $client->request('GET', '/ignore-origin-user-rule/edit/' . $rule->getId());\n\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('You can not access this rule', $body[0]);\n    }\n\n    public function testDemoMode()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $config = $client->getContainer()->get('craue_config');\n        $config->set('demo_mode_enabled', 1);\n        $config->set('demo_mode_username', 'admin');\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=change_passwd_save]')->form();\n\n        $data = [\n            'change_passwd[old_password]' => 'mypassword',\n            'change_passwd[new_password][first]' => 'mypassword',\n            'change_passwd[new_password][second]' => 'mypassword',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.password_not_updated_demo', $client->getContainer()->get('session')->getFlashBag()->get('notice')[0]);\n\n        $config->set('demo_mode_enabled', 0);\n        $config->set('demo_mode_username', 'wallabag');\n    }\n\n    public function testDeleteUserButtonVisibility()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('config.form_user.delete.button', $body[0]);\n\n        $em = $client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('empty');\n        $user->setEnabled(false);\n        $em->persist($user);\n\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('bob');\n        $user->setEnabled(false);\n        $em->persist($user);\n\n        $em->flush();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringNotContainsString('config.form_user.delete.button', $body[0]);\n\n        $client->request('GET', '/account/delete');\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('empty');\n        $user->setEnabled(true);\n        $em->persist($user);\n\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('bob');\n        $user->setEnabled(true);\n        $em->persist($user);\n\n        $em->flush();\n    }\n\n    /**\n     * @group NetworkCalls\n     */\n    public function testDeleteAccount()\n    {\n        $client = $this->getClient();\n        $em = $client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $user = new User();\n        $user->setName('Wallace');\n        $user->setEmail('wallace@wallabag.org');\n        $user->setUsername('wallace');\n        $user->setPlainPassword('wallace');\n        $user->setEnabled(true);\n        $user->addRole('ROLE_SUPER_ADMIN');\n\n        $em->persist($user);\n\n        $config = new Config($user);\n\n        $config->setTheme('material');\n        $config->setItemsPerPage(30);\n        $config->setReadingSpeed(200);\n        $config->setLanguage('en');\n        $config->setPocketConsumerKey('xxxxx');\n\n        $em->persist($config);\n        $em->flush();\n\n        $this->logInAs('wallace');\n        $loggedInUserId = $this->getLoggedInUserId();\n\n        // create entry to check after user deletion\n        // that this entry is also deleted\n        $crawler = $client->request('GET', '/new');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('form[name=entry]')->form();\n        $data = [\n            'entry[url]' => $url = 'https://github.com/wallabag/wallabag',\n        ];\n\n        $client->submit($form, $data);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->request('GET', '/config');\n\n        $deleteLink = $crawler->filter('.delete-account')->last()->link();\n\n        $client->click($deleteLink);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $em = $client->getContainer()->get('doctrine.orm.entity_manager');\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->createQueryBuilder('u')\n            ->where('u.username = :username')->setParameter('username', 'wallace')\n            ->getQuery()\n            ->getOneOrNullResult()\n        ;\n\n        $this->assertNull($user);\n\n        $entries = $client->getContainer()\n            ->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findByUser($loggedInUserId);\n\n        $this->assertEmpty($entries);\n    }\n\n    public function testReset()\n    {\n        $this->logInAs('empty');\n        $client = $this->getClient();\n\n        $em = $client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $user = static::$kernel->getContainer()->get('security.token_storage')->getToken()->getUser();\n\n        $tag = new Tag();\n        $tag->setLabel('super');\n        $em->persist($tag);\n\n        $entry = new Entry($user);\n        $entry->setUrl('https://www.lemonde.fr/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entry->setContent('Youhou');\n        $entry->setTitle('Youhou');\n        $entry->addTag($tag);\n        $em->persist($entry);\n\n        $entry2 = new Entry($user);\n        $entry2->setUrl('http://www.lemonde.de/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entry2->setContent('Youhou');\n        $entry2->setTitle('Youhou');\n        $entry2->addTag($tag);\n        $em->persist($entry2);\n\n        $annotation = new Annotation($user);\n        $annotation->setText('annotated');\n        $annotation->setQuote('annotated');\n        $annotation->setRanges([]);\n        $annotation->setEntry($entry);\n        $em->persist($annotation);\n\n        $em->flush();\n\n        // reset annotations\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->click($crawler->selectLink('config.reset.annotations')->link());\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.annotations_reset', $client->getContainer()->get('session')->getFlashBag()->get('notice')[0]);\n\n        $annotationsReset = $em\n            ->getRepository('WallabagAnnotationBundle:Annotation')\n            ->findAnnotationsByPageId($entry->getId(), $user->getId());\n\n        $this->assertEmpty($annotationsReset, 'Annotations were reset');\n\n        // reset tags\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->click($crawler->selectLink('config.reset.tags')->link());\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.tags_reset', $client->getContainer()->get('session')->getFlashBag()->get('notice')[0]);\n\n        $tagReset = $em\n            ->getRepository('WallabagCoreBundle:Tag')\n            ->countAllTags($user->getId());\n\n        $this->assertSame(0, $tagReset, 'Tags were reset');\n\n        // reset entries\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->click($crawler->selectLink('config.reset.entries')->link());\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.entries_reset', $client->getContainer()->get('session')->getFlashBag()->get('notice')[0]);\n\n        $entryReset = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->countAllEntriesByUser($user->getId());\n\n        $this->assertSame(0, $entryReset, 'Entries were reset');\n    }\n\n    public function testResetArchivedEntries()\n    {\n        $this->logInAs('empty');\n        $client = $this->getClient();\n\n        $em = $client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $user = static::$kernel->getContainer()->get('security.token_storage')->getToken()->getUser();\n\n        $tag = new Tag();\n        $tag->setLabel('super');\n        $em->persist($tag);\n\n        $entry = new Entry($user);\n        $entry->setUrl('https://www.lemonde.fr/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entry->setContent('Youhou');\n        $entry->setTitle('Youhou');\n        $entry->addTag($tag);\n        $em->persist($entry);\n\n        $annotation = new Annotation($user);\n        $annotation->setText('annotated');\n        $annotation->setQuote('annotated');\n        $annotation->setRanges([]);\n        $annotation->setEntry($entry);\n        $em->persist($annotation);\n\n        $tagArchived = new Tag();\n        $tagArchived->setLabel('super');\n        $em->persist($tagArchived);\n\n        $entryArchived = new Entry($user);\n        $entryArchived->setUrl('https://www.lemonde.fr/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entryArchived->setContent('Youhou');\n        $entryArchived->setTitle('Youhou');\n        $entryArchived->addTag($tagArchived);\n        $entryArchived->updateArchived(true);\n        $em->persist($entryArchived);\n\n        $annotationArchived = new Annotation($user);\n        $annotationArchived->setText('annotated');\n        $annotationArchived->setQuote('annotated');\n        $annotationArchived->setRanges([]);\n        $annotationArchived->setEntry($entryArchived);\n        $em->persist($annotationArchived);\n\n        $em->flush();\n\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->click($crawler->selectLink('config.reset.archived')->link());\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.archived_reset', $client->getContainer()->get('session')->getFlashBag()->get('notice')[0]);\n\n        $entryReset = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->countAllEntriesByUser($user->getId());\n\n        $this->assertSame(1, $entryReset, 'Entries were reset');\n\n        $tagReset = $em\n            ->getRepository('WallabagCoreBundle:Tag')\n            ->countAllTags($user->getId());\n\n        $this->assertSame(1, $tagReset, 'Tags were reset');\n\n        $annotationsReset = $em\n            ->getRepository('WallabagAnnotationBundle:Annotation')\n            ->findAnnotationsByPageId($annotationArchived->getId(), $user->getId());\n\n        $this->assertEmpty($annotationsReset, 'Annotations were reset');\n    }\n\n    public function testResetEntriesCascade()\n    {\n        $this->logInAs('empty');\n        $client = $this->getClient();\n\n        $em = $client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $user = static::$kernel->getContainer()->get('security.token_storage')->getToken()->getUser();\n\n        $tag = new Tag();\n        $tag->setLabel('super');\n        $em->persist($tag);\n\n        $entry = new Entry($user);\n        $entry->setUrl('https://www.lemonde.fr/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entry->setContent('Youhou');\n        $entry->setTitle('Youhou');\n        $entry->addTag($tag);\n        $em->persist($entry);\n\n        $annotation = new Annotation($user);\n        $annotation->setText('annotated');\n        $annotation->setQuote('annotated');\n        $annotation->setRanges([]);\n        $annotation->setEntry($entry);\n        $em->persist($annotation);\n\n        $em->flush();\n\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->click($crawler->selectLink('config.reset.entries')->link());\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.entries_reset', $client->getContainer()->get('session')->getFlashBag()->get('notice')[0]);\n\n        $entryReset = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->countAllEntriesByUser($user->getId());\n\n        $this->assertSame(0, $entryReset, 'Entries were reset');\n\n        $tagReset = $em\n            ->getRepository('WallabagCoreBundle:Tag')\n            ->countAllTags($user->getId());\n\n        $this->assertSame(0, $tagReset, 'Tags were reset');\n\n        $annotationsReset = $em\n            ->getRepository('WallabagAnnotationBundle:Annotation')\n            ->findAnnotationsByPageId($entry->getId(), $user->getId());\n\n        $this->assertEmpty($annotationsReset, 'Annotations were reset');\n    }\n\n    public function testSwitchViewMode()\n    {\n        $this->logInAs('admin');\n        $this->useTheme('baggy');\n        $client = $this->getClient();\n\n        $client->request('GET', '/unread/list');\n\n        $this->assertStringNotContainsString('listmode', $client->getResponse()->getContent());\n\n        $client->request('GET', '/config/view-mode');\n        $crawler = $client->followRedirect();\n\n        $client->request('GET', '/unread/list');\n\n        $this->assertStringContainsString('listmode', $client->getResponse()->getContent());\n\n        $client->request('GET', '/config/view-mode');\n    }\n\n    public function testChangeLocaleWithoutReferer()\n    {\n        $client = $this->getClient();\n\n        $client->request('GET', '/locale/de');\n        $client->followRedirect();\n\n        $this->assertSame('de', $client->getRequest()->getLocale());\n        $this->assertSame('de', $client->getContainer()->get('session')->get('_locale'));\n    }\n\n    public function testChangeLocaleWithReferer()\n    {\n        $client = $this->getClient();\n\n        $client->request('GET', '/login');\n        $client->request('GET', '/locale/de');\n        $client->followRedirect();\n\n        $this->assertSame('de', $client->getRequest()->getLocale());\n        $this->assertSame('de', $client->getContainer()->get('session')->get('_locale'));\n    }\n\n    public function testChangeLocaleToBadLocale()\n    {\n        $client = $this->getClient();\n\n        $client->request('GET', '/login');\n        $client->request('GET', '/locale/yuyuyuyu');\n        $client->followRedirect();\n\n        $this->assertNotSame('yuyuyuyu', $client->getRequest()->getLocale());\n        $this->assertNotSame('yuyuyuyu', $client->getContainer()->get('session')->get('_locale'));\n    }\n\n    public function testUserEnable2faEmail()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config/otp/email');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('flashes.config.notice.otp_enabled', $alert[0]);\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('admin');\n\n        $this->assertTrue($user->isEmailTwoFactor());\n\n        $user->setEmailTwoFactor(false);\n        $em->persist($user);\n        $em->flush();\n    }\n\n    public function testUserDisable2faEmail()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config/otp/email/disable');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('flashes.config.notice.otp_disabled', $alert[0]);\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('admin');\n\n        $this->assertFalse($user->isEmailTwoFactor());\n    }\n\n    public function testUserEnable2faGoogle()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config/otp/app');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('admin');\n\n        $this->assertTrue($user->isGoogleTwoFactor());\n        $this->assertGreaterThan(0, $user->getBackupCodes());\n\n        $user->setGoogleAuthenticatorSecret(false);\n        $user->setBackupCodes(null);\n        $em->persist($user);\n        $em->flush();\n    }\n\n    public function testUserEnable2faGoogleCancel()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config/otp/app');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('admin');\n\n        $this->assertTrue($user->isGoogleTwoFactor());\n        $this->assertGreaterThan(0, $user->getBackupCodes());\n\n        $crawler = $client->request('GET', '/config/otp/app/cancel');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('admin');\n\n        $this->assertFalse($user->isGoogleTwoFactor());\n        $this->assertEmpty($user->getBackupCodes());\n    }\n\n    public function testUserDisable2faGoogle()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config/otp/app/disable');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('flashes.config.notice.otp_disabled', $alert[0]);\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('admin');\n\n        $this->assertEmpty($user->getGoogleAuthenticatorSecret());\n        $this->assertEmpty($user->getBackupCodes());\n    }\n\n    public function testExportTaggingRule()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        ob_start();\n        $crawler = $client->request('GET', '/tagging-rule/export');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/json', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"tagging_rules_admin.json\"', $headers->get('content-disposition'));\n        $this->assertSame('UTF-8', $headers->get('content-transfer-encoding'));\n\n        $content = json_decode($client->getResponse()->getContent(), true);\n\n        $this->assertCount(4, $content);\n        $this->assertSame('content matches \"spurs\"', $content[0]['rule']);\n        $this->assertSame('sport', $content[0]['tags'][0]);\n    }\n\n    public function testImportTagginfRuleBadFile()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n        $form = $crawler->filter('form[name=upload_tagging_rule_file] > button[type=submit]')->form();\n\n        $data = [\n            'upload_tagging_rule_file[file]' => '',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n    }\n\n    public function testImportTagginfRuleFile()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n        $form = $crawler->filter('form[name=upload_tagging_rule_file] > button[type=submit]')->form();\n\n        $file = new UploadedFile(__DIR__ . '/../fixtures/tagging_rules_admin.json', 'tagging_rules_admin.json');\n\n        $data = [\n            'upload_tagging_rule_file[file]' => $file,\n        ];\n\n        $client->submit($form, $data);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $user = $client->getContainer()->get('fos_user.user_manager.test')->findUserBy(['username' => 'admin']);\n        $taggingRules = $user->getConfig()->getTaggingRules()->toArray();\n        $this->assertCount(5, $taggingRules);\n        $this->assertSame('title matches \"football\"', $taggingRules[4]->getRule());\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Wallabag\\AnnotationBundle\\Controller;\n\nuse FOS\\RestBundle\\Controller\\FOSRestController;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\nuse Wallabag\\AnnotationBundle\\Entity\\Annotation;\nuse Wallabag\\AnnotationBundle\\Form\\EditAnnotationType;\nuse Wallabag\\AnnotationBundle\\Form\\NewAnnotationType;\nuse Wallabag\\CoreBundle\\Entity\\Entry;\n\nclass WallabagAnnotationController extends FOSRestController\n{\n    /**\n     * Retrieve annotations for an entry.\n     *\n     * @see Wallabag\\ApiBundle\\Controller\\WallabagRestController\n     *\n     * @return JsonResponse\n     */\n    public function getAnnotationsAction(Entry $entry)\n    {\n        $annotationRows = $this\n            ->getDoctrine()\n            ->getRepository('WallabagAnnotationBundle:Annotation')\n            ->findByEntryIdAndUserId($entry->getId(), $this->getUser()->getId());\n        $total = \\count($annotationRows);\n        $annotations = ['total' => $total, 'rows' => $annotationRows];\n\n        $json = $this->get('jms_serializer')->serialize($annotations, 'json');\n\n        return (new JsonResponse())->setJson($json);\n    }\n\n    /**\n     * Creates a new annotation.\n     *\n     * @return JsonResponse\n     *\n     * @see Wallabag\\ApiBundle\\Controller\\WallabagRestController\n     */\n    public function postAnnotationAction(Request $request, Entry $entry)\n    {\n        $data = json_decode($request->getContent(), true);\n\n        $em = $this->getDoctrine()->getManager();\n        $annotation = new Annotation($this->getUser());\n        $annotation->setEntry($entry);\n\n        $form = $this->get('form.factory')->createNamed('', NewAnnotationType::class, $annotation, [\n            'csrf_protection' => false,\n            'allow_extra_fields' => true,\n        ]);\n        $form->submit($data);\n\n        if ($form->isValid()) {\n            $em->persist($annotation);\n            $em->flush();\n\n            $json = $this->get('jms_serializer')->serialize($annotation, 'json');\n\n            return JsonResponse::fromJsonString($json);\n        }\n\n        return $form;\n    }\n\n    /**\n     * Updates an annotation.\n     *\n     * @see Wallabag\\ApiBundle\\Controller\\WallabagRestController\n     *\n     * @return JsonResponse\n     */\n    public function putAnnotationAction(Request $request, int $annotation)\n    {\n        try {\n            $annotation = $this->validateAnnotation($annotation, $this->getUser()->getId());\n\n            $data = json_decode($request->getContent(), true, 512, \\JSON_THROW_ON_ERROR);\n\n            $form = $this->get('form.factory')->createNamed('', EditAnnotationType::class, $annotation, [\n                'csrf_protection' => false,\n                'allow_extra_fields' => true,\n            ]);\n            $form->submit($data);\n\n            if ($form->isValid()) {\n                $em = $this->getDoctrine()->getManager();\n                $em->persist($annotation);\n                $em->flush();\n\n                $json = $this->get('jms_serializer')->serialize($annotation, 'json');\n\n                return JsonResponse::fromJsonString($json);\n            }\n\n            return $form;\n        } catch (\\InvalidArgumentException $e) {\n            throw new NotFoundHttpException($e);\n        }\n    }\n\n    /**\n     * Removes an annotation.\n     *\n     * @see Wallabag\\ApiBundle\\Controller\\WallabagRestController\n     *\n     * @return JsonResponse\n     */\n    public function deleteAnnotationAction(int $annotation)\n    {\n        try {\n            $annotation = $this->validateAnnotation($annotation, $this->getUser()->getId());\n\n            $em = $this->getDoctrine()->getManager();\n            $em->remove($annotation);\n            $em->flush();\n\n            $json = $this->get('jms_serializer')->serialize($annotation, 'json');\n\n            return (new JsonResponse())->setJson($json);\n        } catch (\\InvalidArgumentException $e) {\n            throw new NotFoundHttpException($e);\n        }\n    }\n\n    private function validateAnnotation(int $annotationId, int $userId)\n    {\n        $em = $this->getDoctrine()->getManager();\n\n        $annotation = $em->getRepository('WallabagAnnotationBundle:Annotation')->findOneByIdAndUserId($annotationId, $userId);\n\n        if (null === $annotation) {\n            throw new NotFoundHttpException();\n        }\n\n        return $annotation;\n    }\n}\n", "<?php\n\nnamespace Wallabag\\AnnotationBundle\\DataFixtures;\n\nuse Doctrine\\Bundle\\FixturesBundle\\Fixture;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Persistence\\ObjectManager;\nuse Wallabag\\AnnotationBundle\\Entity\\Annotation;\nuse Wallabag\\CoreBundle\\DataFixtures\\EntryFixtures;\nuse Wallabag\\UserBundle\\DataFixtures\\UserFixtures;\n\nclass AnnotationFixtures extends Fixture implements DependentFixtureInterface\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function load(ObjectManager $manager)\n    {\n        $annotation1 = new Annotation($this->getReference('admin-user'));\n        $annotation1->setEntry($this->getReference('entry1'));\n        $annotation1->setText('This is my annotation /o/');\n        $annotation1->setQuote('content');\n\n        $manager->persist($annotation1);\n\n        $this->addReference('annotation1', $annotation1);\n\n        $annotation2 = new Annotation($this->getReference('admin-user'));\n        $annotation2->setEntry($this->getReference('entry2'));\n        $annotation2->setText('This is my 2nd annotation /o/');\n        $annotation2->setQuote('content');\n\n        $manager->persist($annotation2);\n\n        $this->addReference('annotation2', $annotation2);\n\n        $annotation3 = new Annotation($this->getReference('bob-user'));\n        $annotation3->setEntry($this->getReference('entry3'));\n        $annotation3->setText('This is my first annotation !');\n        $annotation3->setQuote('content');\n\n        $manager->persist($annotation3);\n\n        $this->addReference('annotation3', $annotation3);\n\n        $manager->flush();\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getDependencies()\n    {\n        return [\n            EntryFixtures::class,\n            UserFixtures::class,\n        ];\n    }\n}\n", "<?php\n\nnamespace Wallabag\\AnnotationBundle\\Repository;\n\nuse Doctrine\\ORM\\EntityRepository;\nuse Doctrine\\ORM\\QueryBuilder;\nuse Wallabag\\AnnotationBundle\\Entity\\Annotation;\n\n/**\n * AnnotationRepository.\n */\nclass AnnotationRepository extends EntityRepository\n{\n    /**\n     * Retrieves all annotations for a user.\n     *\n     * @param int $userId\n     *\n     * @return QueryBuilder\n     */\n    public function getBuilderForAllByUser($userId)\n    {\n        return $this\n            ->getSortedQueryBuilderByUser($userId)\n        ;\n    }\n\n    /**\n     * Get annotation for this id.\n     *\n     * @param int $annotationId\n     *\n     * @return array\n     */\n    public function findAnnotationById($annotationId)\n    {\n        return $this->createQueryBuilder('a')\n            ->andWhere('a.id = :annotationId')->setParameter('annotationId', $annotationId)\n            ->getQuery()\n            ->getSingleResult()\n        ;\n    }\n\n    /**\n     * Find annotation by id and user.\n     *\n     * @param int $annotationId\n     * @param int $userId\n     *\n     * @return Annotation\n     */\n    public function findOneByIdAndUserId($annotationId, $userId)\n    {\n        return $this->createQueryBuilder('a')\n                    ->where('a.id = :annotationId')->setParameter('annotationId', $annotationId)\n                    ->andWhere('a.user = :userId')->setParameter('userId', $userId)\n                    ->setMaxResults(1)\n                    ->getQuery()\n                    ->getOneOrNullResult();\n    }\n\n    /**\n     * Find annotations for entry id.\n     *\n     * @param int $entryId\n     * @param int $userId\n     *\n     * @return array\n     */\n    public function findByEntryIdAndUserId($entryId, $userId)\n    {\n        return $this->createQueryBuilder('a')\n            ->where('a.entry = :entryId')->setParameter('entryId', $entryId)\n            ->andwhere('a.user = :userId')->setParameter('userId', $userId)\n            ->getQuery()\n            ->getResult()\n        ;\n    }\n\n    /**\n     * Find last annotation for a given entry id. Used only for tests.\n     *\n     * @param int $entryId\n     *\n     * @return array\n     */\n    public function findLastAnnotationByUserId($entryId, $userId)\n    {\n        return $this->createQueryBuilder('a')\n            ->where('a.entry = :entryId')->setParameter('entryId', $entryId)\n            ->andwhere('a.user = :userId')->setParameter('userId', $userId)\n            ->orderBy('a.id', 'DESC')\n            ->setMaxResults(1)\n            ->getQuery()\n            ->getOneOrNullResult();\n    }\n\n    /**\n     * Used only in test case to get the right annotation associated to the right user.\n     *\n     * @param string $username\n     *\n     * @return Annotation\n     */\n    public function findOneByUsername($username)\n    {\n        return $this->createQueryBuilder('a')\n            ->leftJoin('a.user', 'u')\n            ->where('u.username = :username')->setParameter('username', $username)\n            ->orderBy('a.id', 'DESC')\n            ->setMaxResults(1)\n            ->getQuery()\n            ->getSingleResult();\n    }\n\n    /**\n     * Remove all annotations for a user id.\n     * Used when a user want to reset all informations.\n     *\n     * @param int $userId\n     */\n    public function removeAllByUserId($userId)\n    {\n        $this->getEntityManager()\n            ->createQuery('DELETE FROM Wallabag\\AnnotationBundle\\Entity\\Annotation a WHERE a.user = :userId')\n            ->setParameter('userId', $userId)\n            ->execute();\n    }\n\n    /**\n     * Find all annotations related to archived entries.\n     *\n     * @param $userId\n     *\n     * @return mixed\n     */\n    public function findAllArchivedEntriesByUser($userId)\n    {\n        return $this->createQueryBuilder('a')\n            ->leftJoin('a.entry', 'e')\n            ->where('a.user = :userid')->setParameter(':userid', $userId)\n            ->andWhere('e.isArchived = true')\n            ->getQuery()\n            ->getResult();\n    }\n\n    /**\n     * Return a query builder to used by other getBuilderFor* method.\n     *\n     * @param int $userId\n     *\n     * @return QueryBuilder\n     */\n    private function getSortedQueryBuilderByUser($userId)\n    {\n        return $this->createQueryBuilder('a')\n            ->leftJoin('a.user', 'u')\n            ->andWhere('u.id = :userId')->setParameter('userId', $userId)\n            ->orderBy('a.id', 'desc')\n        ;\n    }\n}\n", "<?php\n\nnamespace Wallabag\\ApiBundle\\Controller;\n\nuse Nelmio\\ApiDocBundle\\Annotation\\ApiDoc;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Wallabag\\AnnotationBundle\\Entity\\Annotation;\nuse Wallabag\\CoreBundle\\Entity\\Entry;\n\nclass AnnotationRestController extends WallabagRestController\n{\n    /**\n     * Retrieve annotations for an entry.\n     *\n     * @ApiDoc(\n     *      requirements={\n     *          {\"name\"=\"entry\", \"dataType\"=\"integer\", \"requirement\"=\"\\w+\", \"description\"=\"The entry ID\"}\n     *      }\n     * )\n     *\n     * @return JsonResponse\n     */\n    public function getAnnotationsAction(Entry $entry)\n    {\n        $this->validateAuthentication();\n\n        return $this->forward('WallabagAnnotationBundle:WallabagAnnotation:getAnnotations', [\n            'entry' => $entry,\n        ]);\n    }\n\n    /**\n     * Creates a new annotation.\n     *\n     * @ApiDoc(\n     *      requirements={\n     *          {\"name\"=\"ranges\", \"dataType\"=\"array\", \"requirement\"=\"\\w+\", \"description\"=\"The range array for the annotation\"},\n     *          {\"name\"=\"quote\", \"dataType\"=\"string\", \"description\"=\"The annotated text\"},\n     *          {\"name\"=\"text\", \"dataType\"=\"string\", \"required\"=true, \"description\"=\"Content of annotation\"},\n     *      }\n     * )\n     *\n     * @return JsonResponse\n     */\n    public function postAnnotationAction(Request $request, Entry $entry)\n    {\n        $this->validateAuthentication();\n\n        return $this->forward('WallabagAnnotationBundle:WallabagAnnotation:postAnnotation', [\n            'request' => $request,\n            'entry' => $entry,\n        ]);\n    }\n\n    /**\n     * Updates an annotation.\n     *\n     * @ApiDoc(\n     *      requirements={\n     *          {\"name\"=\"annotation\", \"dataType\"=\"string\", \"requirement\"=\"\\w+\", \"description\"=\"The annotation ID\"}\n     *      }\n     * )\n     *\n     * @return JsonResponse\n     */\n    public function putAnnotationAction(int $annotation, Request $request)\n    {\n        $this->validateAuthentication();\n\n        return $this->forward('WallabagAnnotationBundle:WallabagAnnotation:putAnnotation', [\n            'annotation' => $annotation,\n            'request' => $request,\n        ]);\n    }\n\n    /**\n     * Removes an annotation.\n     *\n     * @ApiDoc(\n     *      requirements={\n     *          {\"name\"=\"annotation\", \"dataType\"=\"string\", \"requirement\"=\"\\w+\", \"description\"=\"The annotation ID\"}\n     *      }\n     * )\n     *\n     * @return JsonResponse\n     */\n    public function deleteAnnotationAction(int $annotation)\n    {\n        $this->validateAuthentication();\n\n        return $this->forward('WallabagAnnotationBundle:WallabagAnnotation:deleteAnnotation', [\n            'annotation' => $annotation,\n        ]);\n    }\n}\n", "<?php\n\nnamespace Tests\\Wallabag\\AnnotationBundle\\Controller;\n\nuse Tests\\Wallabag\\AnnotationBundle\\WallabagAnnotationTestCase;\nuse Wallabag\\AnnotationBundle\\Entity\\Annotation;\nuse Wallabag\\CoreBundle\\Entity\\Entry;\n\nclass AnnotationControllerTest extends WallabagAnnotationTestCase\n{\n    /**\n     * This data provider allow to tests annotation from the :\n     *     - API POV (when user use the api to manage annotations)\n     *     - and User POV (when user use the web interface - using javascript - to manage annotations).\n     */\n    public function dataForEachAnnotations()\n    {\n        return [\n            ['/api/annotations'],\n            ['annotations'],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForEachAnnotations\n     */\n    public function testGetAnnotations($prefixUrl)\n    {\n        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUserName('admin');\n        $entry = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findByUrlAndUserId('http://0.0.0.0/entry1', $user->getId());\n\n        if ('annotations' === $prefixUrl) {\n            $this->logInAs('admin');\n        }\n\n        $this->client->request('GET', $prefixUrl . '/' . $entry->getId() . '.json');\n        $this->assertSame(200, $this->client->getResponse()->getStatusCode());\n\n        $content = json_decode($this->client->getResponse()->getContent(), true);\n        $this->assertGreaterThanOrEqual(1, $content['total']);\n    }\n\n    /**\n     * @dataProvider dataForEachAnnotations\n     */\n    public function testGetAnnotationsFromAnOtherUser($prefixUrl)\n    {\n        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $otherUser = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUserName('bob');\n        $entry = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findByUrlAndUserId('http://0.0.0.0/entry3', $otherUser->getId());\n\n        if ('annotations' === $prefixUrl) {\n            $this->logInAs('admin');\n        }\n\n        $this->client->request('GET', $prefixUrl . '/' . $entry->getId() . '.json');\n        $this->assertSame(200, $this->client->getResponse()->getStatusCode());\n\n        $content = json_decode($this->client->getResponse()->getContent(), true);\n        $this->assertGreaterThanOrEqual(0, $content['total']);\n    }\n\n    /**\n     * @dataProvider dataForEachAnnotations\n     */\n    public function testSetAnnotation($prefixUrl)\n    {\n        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUserName('admin');\n\n        if ('annotations' === $prefixUrl) {\n            $this->logInAs('admin');\n        }\n\n        /** @var Entry $entry */\n        $entry = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findOneByUsernameAndNotArchived('admin');\n\n        $headers = ['CONTENT_TYPE' => 'application/json'];\n        $content = json_encode([\n            'text' => 'my annotation',\n            'quote' => 'my quote',\n            'ranges' => [\n                ['start' => '', 'startOffset' => 24, 'end' => '', 'endOffset' => 31],\n            ],\n        ]);\n        $this->client->request('POST', $prefixUrl . '/' . $entry->getId() . '.json', [], [], $headers, $content);\n\n        $this->assertSame(200, $this->client->getResponse()->getStatusCode());\n\n        $content = json_decode($this->client->getResponse()->getContent(), true);\n\n        $this->assertSame('Big boss', $content['user']);\n        $this->assertSame('v1.0', $content['annotator_schema_version']);\n        $this->assertSame('my annotation', $content['text']);\n        $this->assertSame('my quote', $content['quote']);\n\n        /** @var Annotation $annotation */\n        $annotation = $em\n            ->getRepository('WallabagAnnotationBundle:Annotation')\n            ->findLastAnnotationByUserId($entry->getId(), $user->getId());\n\n        $this->assertSame('my annotation', $annotation->getText());\n    }\n\n    public function testAllowEmptyQuote()\n    {\n        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n\n        /** @var Entry $entry */\n        $entry = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findOneByUsernameAndNotArchived('admin');\n\n        $headers = ['CONTENT_TYPE' => 'application/json'];\n        $content = json_encode([\n            'text' => 'my annotation',\n            'quote' => null,\n            'ranges' => [\n                ['start' => '', 'startOffset' => 24, 'end' => '', 'endOffset' => 31],\n            ],\n        ]);\n        $this->client->request('POST', '/api/annotations/' . $entry->getId() . '.json', [], [], $headers, $content);\n\n        $this->assertSame(200, $this->client->getResponse()->getStatusCode());\n\n        $content = json_decode($this->client->getResponse()->getContent(), true);\n\n        $this->assertSame('Big boss', $content['user']);\n        $this->assertSame('v1.0', $content['annotator_schema_version']);\n        $this->assertSame('my annotation', $content['text']);\n        $this->assertSame('', $content['quote']);\n    }\n\n    public function testAllowOmmittedQuote()\n    {\n        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n\n        /** @var Entry $entry */\n        $entry = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findOneByUsernameAndNotArchived('admin');\n\n        $headers = ['CONTENT_TYPE' => 'application/json'];\n        $content = json_encode([\n            'text' => 'my new annotation',\n            'ranges' => [\n                ['start' => '', 'startOffset' => 25, 'end' => '', 'endOffset' => 32],\n            ],\n        ]);\n        $this->client->request('POST', '/api/annotations/' . $entry->getId() . '.json', [], [], $headers, $content);\n\n        $this->assertSame(200, $this->client->getResponse()->getStatusCode());\n\n        $content = json_decode($this->client->getResponse()->getContent(), true);\n\n        $this->assertSame('Big boss', $content['user']);\n        $this->assertSame('v1.0', $content['annotator_schema_version']);\n        $this->assertSame('my new annotation', $content['text']);\n        $this->assertSame('', $content['quote']);\n    }\n\n    /**\n     * @dataProvider dataForEachAnnotations\n     */\n    public function testSetAnnotationWithQuoteTooLong($prefixUrl)\n    {\n        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n\n        if ('annotations' === $prefixUrl) {\n            $this->logInAs('admin');\n        }\n\n        /** @var Entry $entry */\n        $entry = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findOneByUsernameAndNotArchived('admin');\n\n        $longQuote = str_repeat('a', 10001);\n        $headers = ['CONTENT_TYPE' => 'application/json'];\n        $content = json_encode([\n            'text' => 'my annotation',\n            'quote' => $longQuote,\n            'ranges' => [\n                ['start' => '', 'startOffset' => 24, 'end' => '', 'endOffset' => 31],\n            ],\n        ]);\n        $this->client->request('POST', $prefixUrl . '/' . $entry->getId() . '.json', [], [], $headers, $content);\n\n        $this->assertSame(400, $this->client->getResponse()->getStatusCode());\n    }\n\n    /**\n     * @dataProvider dataForEachAnnotations\n     */\n    public function testEditAnnotation($prefixUrl)\n    {\n        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUserName('admin');\n        $entry = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findOneByUsernameAndNotArchived('admin');\n\n        $annotation = new Annotation($user);\n        $annotation->setEntry($entry);\n        $annotation->setText('This is my annotation /o/');\n        $annotation->setQuote('my quote');\n\n        $em->persist($annotation);\n        $em->flush();\n\n        $headers = ['CONTENT_TYPE' => 'application/json'];\n        $content = json_encode([\n            'text' => 'a modified annotation',\n        ]);\n        $this->client->request('PUT', $prefixUrl . '/' . $annotation->getId() . '.json', [], [], $headers, $content);\n        $this->assertSame(200, $this->client->getResponse()->getStatusCode());\n\n        $content = json_decode($this->client->getResponse()->getContent(), true);\n\n        $this->assertSame('Big boss', $content['user']);\n        $this->assertSame('v1.0', $content['annotator_schema_version']);\n        $this->assertSame('a modified annotation', $content['text']);\n        $this->assertSame('my quote', $content['quote']);\n\n        /** @var Annotation $annotationUpdated */\n        $annotationUpdated = $em\n            ->getRepository('WallabagAnnotationBundle:Annotation')\n            ->findOneById($annotation->getId());\n        $this->assertSame('a modified annotation', $annotationUpdated->getText());\n\n        $em->remove($annotationUpdated);\n        $em->flush();\n    }\n\n    /**\n     * @dataProvider dataForEachAnnotations\n     */\n    public function testEditAnnotationFromAnOtherUser($prefixUrl)\n    {\n        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $otherUser = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUserName('bob');\n        $entry = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findByUrlAndUserId('http://0.0.0.0/entry3', $otherUser->getId());\n        $annotation = $em\n            ->getRepository('WallabagAnnotationBundle:Annotation')\n            ->findLastAnnotationByUserId($entry->getId(), $otherUser->getId());\n\n        $headers = ['CONTENT_TYPE' => 'application/json'];\n        $content = json_encode([\n            'text' => 'a modified annotation',\n        ]);\n        $this->client->request('PUT', $prefixUrl . '/' . $annotation->getId() . '.json', [], [], $headers, $content);\n        $this->assertSame(404, $this->client->getResponse()->getStatusCode());\n    }\n\n    /**\n     * @dataProvider dataForEachAnnotations\n     */\n    public function testDeleteAnnotation($prefixUrl)\n    {\n        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUserName('admin');\n        $entry = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findOneByUsernameAndNotArchived('admin');\n\n        $annotation = new Annotation($user);\n        $annotation->setEntry($entry);\n        $annotation->setText('This is my annotation /o/');\n        $annotation->setQuote('my quote');\n\n        $em->persist($annotation);\n        $em->flush();\n\n        if ('annotations' === $prefixUrl) {\n            $this->logInAs('admin');\n        }\n\n        $headers = ['CONTENT_TYPE' => 'application/json'];\n        $content = json_encode([\n            'text' => 'a modified annotation',\n        ]);\n        $this->client->request('DELETE', $prefixUrl . '/' . $annotation->getId() . '.json', [], [], $headers, $content);\n        $this->assertSame(200, $this->client->getResponse()->getStatusCode());\n\n        $content = json_decode($this->client->getResponse()->getContent(), true);\n\n        $this->assertSame('This is my annotation /o/', $content['text']);\n\n        $annotationDeleted = $em\n            ->getRepository('WallabagAnnotationBundle:Annotation')\n            ->findOneById($annotation->getId());\n\n        $this->assertNull($annotationDeleted);\n    }\n\n    /**\n     * @dataProvider dataForEachAnnotations\n     */\n    public function testDeleteAnnotationFromAnOtherUser($prefixUrl)\n    {\n        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $otherUser = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUserName('bob');\n        $entry = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findByUrlAndUserId('http://0.0.0.0/entry3', $otherUser->getId());\n        $annotation = $em\n            ->getRepository('WallabagAnnotationBundle:Annotation')\n            ->findLastAnnotationByUserId($entry->getId(), $otherUser->getId());\n\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUserName('admin');\n        $entry = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findOneByUsernameAndNotArchived('admin');\n\n        if ('annotations' === $prefixUrl) {\n            $this->logInAs('admin');\n        }\n\n        $headers = ['CONTENT_TYPE' => 'application/json'];\n        $content = json_encode([\n            'text' => 'a modified annotation',\n        ]);\n        $this->client->request('DELETE', $prefixUrl . '/' . $annotation->getId() . '.json', [], [], $headers, $content);\n        $this->assertSame(404, $this->client->getResponse()->getStatusCode());\n    }\n}\n", "<?php\n\nnamespace Tests\\Wallabag\\CoreBundle\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Tests\\Wallabag\\CoreBundle\\WallabagCoreTestCase;\nuse Wallabag\\AnnotationBundle\\Entity\\Annotation;\nuse Wallabag\\CoreBundle\\Entity\\Config;\nuse Wallabag\\CoreBundle\\Entity\\Entry;\nuse Wallabag\\CoreBundle\\Entity\\Tag;\nuse Wallabag\\UserBundle\\Entity\\User;\n\nclass ConfigControllerTest extends WallabagCoreTestCase\n{\n    public function testLogin()\n    {\n        $client = $this->getClient();\n\n        $client->request('GET', '/new');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('login', $client->getResponse()->headers->get('location'));\n    }\n\n    public function testIndex()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertCount(1, $crawler->filter('button[id=config_save]'));\n        $this->assertCount(1, $crawler->filter('button[id=change_passwd_save]'));\n        $this->assertCount(1, $crawler->filter('button[id=update_user_save]'));\n        $this->assertCount(1, $crawler->filter('button[id=feed_config_save]'));\n    }\n\n    public function testUpdate()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=config_save]')->form();\n\n        $data = [\n            'config[theme]' => 'baggy',\n            'config[items_per_page]' => '30',\n            'config[reading_speed]' => '100',\n            'config[action_mark_as_read]' => '0',\n            'config[language]' => 'en',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.config_saved', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function testChangeReadingSpeed()\n    {\n        $this->logInAs('admin');\n        $this->useTheme('baggy');\n        $client = $this->getClient();\n\n        $entry = new Entry($this->getLoggedInUser());\n        $entry->setUrl('http://0.0.0.0/test-entry1')\n            ->setReadingTime(22);\n        $this->getEntityManager()->persist($entry);\n\n        $this->getEntityManager()->flush();\n        $this->getEntityManager()->clear();\n\n        $crawler = $client->request('GET', '/unread/list');\n        $form = $crawler->filter('button[id=submit-filter]')->form();\n        $dataFilters = [\n            'entry_filter[readingTime][right_number]' => 22,\n            'entry_filter[readingTime][left_number]' => 22,\n        ];\n        $crawler = $client->submit($form, $dataFilters);\n        $this->assertCount(1, $crawler->filter('div[class=entry]'));\n\n        // Change reading speed\n        $crawler = $client->request('GET', '/config');\n        $form = $crawler->filter('button[id=config_save]')->form();\n        $data = [\n            'config[reading_speed]' => '400',\n        ];\n        $client->submit($form, $data);\n\n        // Is the entry still available via filters?\n        $crawler = $client->request('GET', '/unread/list');\n        $form = $crawler->filter('button[id=submit-filter]')->form();\n        $crawler = $client->submit($form, $dataFilters);\n        $this->assertCount(0, $crawler->filter('div[class=entry]'));\n\n        // Restore old configuration\n        $crawler = $client->request('GET', '/config');\n        $form = $crawler->filter('button[id=config_save]')->form();\n        $data = [\n            'config[reading_speed]' => '100',\n        ];\n        $client->submit($form, $data);\n    }\n\n    public function dataForUpdateFailed()\n    {\n        return [\n            [[\n                'config[theme]' => 'baggy',\n                'config[items_per_page]' => '',\n                'config[language]' => 'en',\n            ]],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForUpdateFailed\n     */\n    public function testUpdateFailed($data)\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=config_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('This value should not be blank', $alert[0]);\n    }\n\n    public function dataForChangePasswordFailed()\n    {\n        return [\n            [\n                [\n                    'change_passwd[old_password]' => 'material',\n                    'change_passwd[new_password][first]' => '',\n                    'change_passwd[new_password][second]' => '',\n                ],\n                'validator.password_wrong_value',\n            ],\n            [\n                [\n                    'change_passwd[old_password]' => 'mypassword',\n                    'change_passwd[new_password][first]' => '',\n                    'change_passwd[new_password][second]' => '',\n                ],\n                'This value should not be blank',\n            ],\n            [\n                [\n                    'change_passwd[old_password]' => 'mypassword',\n                    'change_passwd[new_password][first]' => 'hop',\n                    'change_passwd[new_password][second]' => '',\n                ],\n                'validator.password_must_match',\n            ],\n            [\n                [\n                    'change_passwd[old_password]' => 'mypassword',\n                    'change_passwd[new_password][first]' => 'hop',\n                    'change_passwd[new_password][second]' => 'hop',\n                ],\n                'validator.password_too_short',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForChangePasswordFailed\n     */\n    public function testChangePasswordFailed($data, $expectedMessage)\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=change_passwd_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString($expectedMessage, $alert[0]);\n    }\n\n    public function testChangePassword()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=change_passwd_save]')->form();\n\n        $data = [\n            'change_passwd[old_password]' => 'mypassword',\n            'change_passwd[new_password][first]' => 'mypassword',\n            'change_passwd[new_password][second]' => 'mypassword',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.password_updated', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function dataForUserFailed()\n    {\n        return [\n            [\n                [\n                    'update_user[name]' => '',\n                    'update_user[email]' => '',\n                ],\n                'fos_user.email.blank',\n            ],\n            [\n                [\n                    'update_user[name]' => '',\n                    'update_user[email]' => 'test',\n                ],\n                'fos_user.email.invalid',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForUserFailed\n     */\n    public function testUserFailed($data, $expectedMessage)\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=update_user_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString($expectedMessage, $alert[0]);\n    }\n\n    public function testUserUpdate()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=update_user_save]')->form();\n\n        $data = [\n            'update_user[name]' => 'new name',\n            'update_user[email]' => 'admin@wallabag.io',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('flashes.config.notice.user_updated', $alert[0]);\n    }\n\n    public function testFeedUpdateResetToken()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        // reset the token\n        $em = $client->getContainer()->get('doctrine.orm.entity_manager');\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('admin');\n\n        if (!$user) {\n            $this->markTestSkipped('No user found in db.');\n        }\n\n        $config = $user->getConfig();\n        $config->setFeedToken(null);\n        $em->persist($config);\n        $em->flush();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('config.form_feed.no_token', $body[0]);\n\n        $client->request('GET', '/generate-token');\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('config.form_feed.token_reset', $body[0]);\n    }\n\n    public function testGenerateTokenAjax()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $client->request(\n            'GET',\n            '/generate-token',\n            [],\n            [],\n            ['HTTP_X-Requested-With' => 'XMLHttpRequest']\n        );\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n        $content = json_decode($client->getResponse()->getContent(), true);\n        $this->assertArrayHasKey('token', $content);\n    }\n\n    public function testRevokeTokenAjax()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $client->request(\n            'GET',\n            '/revoke-token',\n            [],\n            [],\n            ['HTTP_X-Requested-With' => 'XMLHttpRequest']\n        );\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n    }\n\n    public function testFeedUpdate()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=feed_config_save]')->form();\n\n        $data = [\n            'feed_config[feed_limit]' => 12,\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.feed_updated', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function dataForFeedFailed()\n    {\n        return [\n            [\n                [\n                    'feed_config[feed_limit]' => 0,\n                ],\n                'This value should be 1 or more.',\n            ],\n            [\n                [\n                    'feed_config[feed_limit]' => 1000000000000,\n                ],\n                'validator.feed_limit_too_high',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForFeedFailed\n     */\n    public function testFeedFailed($data, $expectedMessage)\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=feed_config_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString($expectedMessage, $alert[0]);\n    }\n\n    public function testTaggingRuleCreation()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=tagging_rule_save]')->form();\n\n        $data = [\n            'tagging_rule[rule]' => 'readingTime <= 3',\n            'tagging_rule[tags]' => 'short reading',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.tagging_rules_updated', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $editLink = $crawler->filter('div[id=set5] a.mode_edit')->last()->link();\n\n        $crawler = $client->click($editLink);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('?tagging-rule=', $client->getResponse()->headers->get('location'));\n\n        $crawler = $client->followRedirect();\n\n        $form = $crawler->filter('button[id=tagging_rule_save]')->form();\n\n        $data = [\n            'tagging_rule[rule]' => 'readingTime <= 30',\n            'tagging_rule[tags]' => 'short reading',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.tagging_rules_updated', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $this->assertStringContainsString('readingTime <= 30', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $deleteLink = $crawler->filter('div[id=set5] a.delete')->last()->link();\n\n        $crawler = $client->click($deleteLink);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n        $this->assertStringContainsString('flashes.config.notice.tagging_rules_deleted', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function dataForTaggingRuleFailed()\n    {\n        return [\n            [\n                [\n                    'tagging_rule[rule]' => 'unknownVar <= 3',\n                    'tagging_rule[tags]' => 'cool tag',\n                ],\n                [\n                    'The variable',\n                    'does not exist.',\n                ],\n            ],\n            [\n                [\n                    'tagging_rule[rule]' => 'length(domainName) <= 42',\n                    'tagging_rule[tags]' => 'cool tag',\n                ],\n                [\n                    'The operator',\n                    'does not exist.',\n                ],\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForTaggingRuleFailed\n     */\n    public function testTaggingRuleCreationFail($data, $messages)\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=tagging_rule_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n\n        foreach ($messages as $message) {\n            $this->assertStringContainsString($message, $body[0]);\n        }\n    }\n\n    public function testTaggingRuleTooLong()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=tagging_rule_save]')->form();\n\n        $crawler = $client->submit($form, [\n            'tagging_rule[rule]' => str_repeat('title', 60),\n            'tagging_rule[tags]' => 'cool tag',\n        ]);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n\n        $this->assertStringContainsString('255 characters', $body[0]);\n    }\n\n    public function testDeletingTaggingRuleFromAnOtherUser()\n    {\n        $this->logInAs('bob');\n        $client = $this->getClient();\n\n        $rule = $client->getContainer()->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:TaggingRule')\n            ->findAll()[0];\n\n        $crawler = $client->request('GET', '/tagging-rule/delete/' . $rule->getId());\n\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('You can not access this rule', $body[0]);\n    }\n\n    public function testEditingTaggingRuleFromAnOtherUser()\n    {\n        $this->logInAs('bob');\n        $client = $this->getClient();\n\n        $rule = $client->getContainer()->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:TaggingRule')\n            ->findAll()[0];\n\n        $crawler = $client->request('GET', '/tagging-rule/edit/' . $rule->getId());\n\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('You can not access this rule', $body[0]);\n    }\n\n    public function testIgnoreOriginRuleCreation()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=ignore_origin_user_rule_save]')->form();\n\n        $data = [\n            'ignore_origin_user_rule[rule]' => 'host = \"example.com\"',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.ignore_origin_rules_updated', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $editLink = $crawler->filter('div[id=set6] a.mode_edit')->last()->link();\n\n        $crawler = $client->click($editLink);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('?ignore-origin-user-rule=', $client->getResponse()->headers->get('location'));\n\n        $crawler = $client->followRedirect();\n\n        $form = $crawler->filter('button[id=ignore_origin_user_rule_save]')->form();\n\n        $data = [\n            'ignore_origin_user_rule[rule]' => 'host = \"example.org\"',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.ignore_origin_rules_updated', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $this->assertStringContainsString('host = \"example.org\"', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $deleteLink = $crawler->filter('div[id=set6] a.delete')->last()->link();\n\n        $crawler = $client->click($deleteLink);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n        $this->assertStringContainsString('flashes.config.notice.ignore_origin_rules_deleted', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function dataForIgnoreOriginRuleCreationFail()\n    {\n        return [\n            [\n                [\n                    'ignore_origin_user_rule[rule]' => 'foo = \"bar\"',\n                ],\n                [\n                    'The variable',\n                    'does not exist.',\n                ],\n            ],\n            [\n                [\n                    'ignore_origin_user_rule[rule]' => '_all != \"none\"',\n                ],\n                [\n                    'The operator',\n                    'does not exist.',\n                ],\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForIgnoreOriginRuleCreationFail\n     */\n    public function testIgnoreOriginRuleCreationFail($data, $messages)\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=ignore_origin_user_rule_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n\n        foreach ($messages as $message) {\n            $this->assertStringContainsString($message, $body[0]);\n        }\n    }\n\n    public function testDeletingIgnoreOriginRuleFromAnOtherUser()\n    {\n        $this->logInAs('bob');\n        $client = $this->getClient();\n\n        $rule = $client->getContainer()->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:IgnoreOriginUserRule')\n            ->findAll()[0];\n\n        $crawler = $client->request('GET', '/ignore-origin-user-rule/edit/' . $rule->getId());\n\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('You can not access this rule', $body[0]);\n    }\n\n    public function testEditingIgnoreOriginRuleFromAnOtherUser()\n    {\n        $this->logInAs('bob');\n        $client = $this->getClient();\n\n        $rule = $client->getContainer()->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:IgnoreOriginUserRule')\n            ->findAll()[0];\n\n        $crawler = $client->request('GET', '/ignore-origin-user-rule/edit/' . $rule->getId());\n\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('You can not access this rule', $body[0]);\n    }\n\n    public function testDemoMode()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $config = $client->getContainer()->get('craue_config');\n        $config->set('demo_mode_enabled', 1);\n        $config->set('demo_mode_username', 'admin');\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=change_passwd_save]')->form();\n\n        $data = [\n            'change_passwd[old_password]' => 'mypassword',\n            'change_passwd[new_password][first]' => 'mypassword',\n            'change_passwd[new_password][second]' => 'mypassword',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.password_not_updated_demo', $client->getContainer()->get('session')->getFlashBag()->get('notice')[0]);\n\n        $config->set('demo_mode_enabled', 0);\n        $config->set('demo_mode_username', 'wallabag');\n    }\n\n    public function testDeleteUserButtonVisibility()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('config.form_user.delete.button', $body[0]);\n\n        $em = $client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('empty');\n        $user->setEnabled(false);\n        $em->persist($user);\n\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('bob');\n        $user->setEnabled(false);\n        $em->persist($user);\n\n        $em->flush();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringNotContainsString('config.form_user.delete.button', $body[0]);\n\n        $client->request('GET', '/account/delete');\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('empty');\n        $user->setEnabled(true);\n        $em->persist($user);\n\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('bob');\n        $user->setEnabled(true);\n        $em->persist($user);\n\n        $em->flush();\n    }\n\n    /**\n     * @group NetworkCalls\n     */\n    public function testDeleteAccount()\n    {\n        $client = $this->getClient();\n        $em = $client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $user = new User();\n        $user->setName('Wallace');\n        $user->setEmail('wallace@wallabag.org');\n        $user->setUsername('wallace');\n        $user->setPlainPassword('wallace');\n        $user->setEnabled(true);\n        $user->addRole('ROLE_SUPER_ADMIN');\n\n        $em->persist($user);\n\n        $config = new Config($user);\n\n        $config->setTheme('material');\n        $config->setItemsPerPage(30);\n        $config->setReadingSpeed(200);\n        $config->setLanguage('en');\n        $config->setPocketConsumerKey('xxxxx');\n\n        $em->persist($config);\n        $em->flush();\n\n        $this->logInAs('wallace');\n        $loggedInUserId = $this->getLoggedInUserId();\n\n        // create entry to check after user deletion\n        // that this entry is also deleted\n        $crawler = $client->request('GET', '/new');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('form[name=entry]')->form();\n        $data = [\n            'entry[url]' => $url = 'https://github.com/wallabag/wallabag',\n        ];\n\n        $client->submit($form, $data);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->request('GET', '/config');\n\n        $deleteLink = $crawler->filter('.delete-account')->last()->link();\n\n        $client->click($deleteLink);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $em = $client->getContainer()->get('doctrine.orm.entity_manager');\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->createQueryBuilder('u')\n            ->where('u.username = :username')->setParameter('username', 'wallace')\n            ->getQuery()\n            ->getOneOrNullResult()\n        ;\n\n        $this->assertNull($user);\n\n        $entries = $client->getContainer()\n            ->get('doctrine.orm.entity_manager')\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->findByUser($loggedInUserId);\n\n        $this->assertEmpty($entries);\n    }\n\n    public function testReset()\n    {\n        $this->logInAs('empty');\n        $client = $this->getClient();\n\n        $em = $client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $user = static::$kernel->getContainer()->get('security.token_storage')->getToken()->getUser();\n\n        $tag = new Tag();\n        $tag->setLabel('super');\n        $em->persist($tag);\n\n        $entry = new Entry($user);\n        $entry->setUrl('https://www.lemonde.fr/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entry->setContent('Youhou');\n        $entry->setTitle('Youhou');\n        $entry->addTag($tag);\n        $em->persist($entry);\n\n        $entry2 = new Entry($user);\n        $entry2->setUrl('http://www.lemonde.de/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entry2->setContent('Youhou');\n        $entry2->setTitle('Youhou');\n        $entry2->addTag($tag);\n        $em->persist($entry2);\n\n        $annotation = new Annotation($user);\n        $annotation->setText('annotated');\n        $annotation->setQuote('annotated');\n        $annotation->setRanges([]);\n        $annotation->setEntry($entry);\n        $em->persist($annotation);\n\n        $em->flush();\n\n        // reset annotations\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->click($crawler->selectLink('config.reset.annotations')->link());\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.annotations_reset', $client->getContainer()->get('session')->getFlashBag()->get('notice')[0]);\n\n        $annotationsReset = $em\n            ->getRepository('WallabagAnnotationBundle:Annotation')\n            ->findByEntryIdAndUserId($entry->getId(), $user->getId());\n\n        $this->assertEmpty($annotationsReset, 'Annotations were reset');\n\n        // reset tags\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->click($crawler->selectLink('config.reset.tags')->link());\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.tags_reset', $client->getContainer()->get('session')->getFlashBag()->get('notice')[0]);\n\n        $tagReset = $em\n            ->getRepository('WallabagCoreBundle:Tag')\n            ->countAllTags($user->getId());\n\n        $this->assertSame(0, $tagReset, 'Tags were reset');\n\n        // reset entries\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->click($crawler->selectLink('config.reset.entries')->link());\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.entries_reset', $client->getContainer()->get('session')->getFlashBag()->get('notice')[0]);\n\n        $entryReset = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->countAllEntriesByUser($user->getId());\n\n        $this->assertSame(0, $entryReset, 'Entries were reset');\n    }\n\n    public function testResetArchivedEntries()\n    {\n        $this->logInAs('empty');\n        $client = $this->getClient();\n\n        $em = $client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $user = static::$kernel->getContainer()->get('security.token_storage')->getToken()->getUser();\n\n        $tag = new Tag();\n        $tag->setLabel('super');\n        $em->persist($tag);\n\n        $entry = new Entry($user);\n        $entry->setUrl('https://www.lemonde.fr/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entry->setContent('Youhou');\n        $entry->setTitle('Youhou');\n        $entry->addTag($tag);\n        $em->persist($entry);\n\n        $annotation = new Annotation($user);\n        $annotation->setText('annotated');\n        $annotation->setQuote('annotated');\n        $annotation->setRanges([]);\n        $annotation->setEntry($entry);\n        $em->persist($annotation);\n\n        $tagArchived = new Tag();\n        $tagArchived->setLabel('super');\n        $em->persist($tagArchived);\n\n        $entryArchived = new Entry($user);\n        $entryArchived->setUrl('https://www.lemonde.fr/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entryArchived->setContent('Youhou');\n        $entryArchived->setTitle('Youhou');\n        $entryArchived->addTag($tagArchived);\n        $entryArchived->updateArchived(true);\n        $em->persist($entryArchived);\n\n        $annotationArchived = new Annotation($user);\n        $annotationArchived->setText('annotated');\n        $annotationArchived->setQuote('annotated');\n        $annotationArchived->setRanges([]);\n        $annotationArchived->setEntry($entryArchived);\n        $em->persist($annotationArchived);\n\n        $em->flush();\n\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->click($crawler->selectLink('config.reset.archived')->link());\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.archived_reset', $client->getContainer()->get('session')->getFlashBag()->get('notice')[0]);\n\n        $entryReset = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->countAllEntriesByUser($user->getId());\n\n        $this->assertSame(1, $entryReset, 'Entries were reset');\n\n        $tagReset = $em\n            ->getRepository('WallabagCoreBundle:Tag')\n            ->countAllTags($user->getId());\n\n        $this->assertSame(1, $tagReset, 'Tags were reset');\n\n        $annotationsReset = $em\n            ->getRepository('WallabagAnnotationBundle:Annotation')\n            ->findByEntryIdAndUserId($annotationArchived->getId(), $user->getId());\n\n        $this->assertEmpty($annotationsReset, 'Annotations were reset');\n    }\n\n    public function testResetEntriesCascade()\n    {\n        $this->logInAs('empty');\n        $client = $this->getClient();\n\n        $em = $client->getContainer()->get('doctrine.orm.entity_manager');\n\n        $user = static::$kernel->getContainer()->get('security.token_storage')->getToken()->getUser();\n\n        $tag = new Tag();\n        $tag->setLabel('super');\n        $em->persist($tag);\n\n        $entry = new Entry($user);\n        $entry->setUrl('https://www.lemonde.fr/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entry->setContent('Youhou');\n        $entry->setTitle('Youhou');\n        $entry->addTag($tag);\n        $em->persist($entry);\n\n        $annotation = new Annotation($user);\n        $annotation->setText('annotated');\n        $annotation->setQuote('annotated');\n        $annotation->setRanges([]);\n        $annotation->setEntry($entry);\n        $em->persist($annotation);\n\n        $em->flush();\n\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->click($crawler->selectLink('config.reset.entries')->link());\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.entries_reset', $client->getContainer()->get('session')->getFlashBag()->get('notice')[0]);\n\n        $entryReset = $em\n            ->getRepository('WallabagCoreBundle:Entry')\n            ->countAllEntriesByUser($user->getId());\n\n        $this->assertSame(0, $entryReset, 'Entries were reset');\n\n        $tagReset = $em\n            ->getRepository('WallabagCoreBundle:Tag')\n            ->countAllTags($user->getId());\n\n        $this->assertSame(0, $tagReset, 'Tags were reset');\n\n        $annotationsReset = $em\n            ->getRepository('WallabagAnnotationBundle:Annotation')\n            ->findByEntryIdAndUserId($entry->getId(), $user->getId());\n\n        $this->assertEmpty($annotationsReset, 'Annotations were reset');\n    }\n\n    public function testSwitchViewMode()\n    {\n        $this->logInAs('admin');\n        $this->useTheme('baggy');\n        $client = $this->getClient();\n\n        $client->request('GET', '/unread/list');\n\n        $this->assertStringNotContainsString('listmode', $client->getResponse()->getContent());\n\n        $client->request('GET', '/config/view-mode');\n        $crawler = $client->followRedirect();\n\n        $client->request('GET', '/unread/list');\n\n        $this->assertStringContainsString('listmode', $client->getResponse()->getContent());\n\n        $client->request('GET', '/config/view-mode');\n    }\n\n    public function testChangeLocaleWithoutReferer()\n    {\n        $client = $this->getClient();\n\n        $client->request('GET', '/locale/de');\n        $client->followRedirect();\n\n        $this->assertSame('de', $client->getRequest()->getLocale());\n        $this->assertSame('de', $client->getContainer()->get('session')->get('_locale'));\n    }\n\n    public function testChangeLocaleWithReferer()\n    {\n        $client = $this->getClient();\n\n        $client->request('GET', '/login');\n        $client->request('GET', '/locale/de');\n        $client->followRedirect();\n\n        $this->assertSame('de', $client->getRequest()->getLocale());\n        $this->assertSame('de', $client->getContainer()->get('session')->get('_locale'));\n    }\n\n    public function testChangeLocaleToBadLocale()\n    {\n        $client = $this->getClient();\n\n        $client->request('GET', '/login');\n        $client->request('GET', '/locale/yuyuyuyu');\n        $client->followRedirect();\n\n        $this->assertNotSame('yuyuyuyu', $client->getRequest()->getLocale());\n        $this->assertNotSame('yuyuyuyu', $client->getContainer()->get('session')->get('_locale'));\n    }\n\n    public function testUserEnable2faEmail()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config/otp/email');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('flashes.config.notice.otp_enabled', $alert[0]);\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('admin');\n\n        $this->assertTrue($user->isEmailTwoFactor());\n\n        $user->setEmailTwoFactor(false);\n        $em->persist($user);\n        $em->flush();\n    }\n\n    public function testUserDisable2faEmail()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config/otp/email/disable');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('flashes.config.notice.otp_disabled', $alert[0]);\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('admin');\n\n        $this->assertFalse($user->isEmailTwoFactor());\n    }\n\n    public function testUserEnable2faGoogle()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config/otp/app');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('admin');\n\n        $this->assertTrue($user->isGoogleTwoFactor());\n        $this->assertGreaterThan(0, $user->getBackupCodes());\n\n        $user->setGoogleAuthenticatorSecret(false);\n        $user->setBackupCodes(null);\n        $em->persist($user);\n        $em->flush();\n    }\n\n    public function testUserEnable2faGoogleCancel()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config/otp/app');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('admin');\n\n        $this->assertTrue($user->isGoogleTwoFactor());\n        $this->assertGreaterThan(0, $user->getBackupCodes());\n\n        $crawler = $client->request('GET', '/config/otp/app/cancel');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('admin');\n\n        $this->assertFalse($user->isGoogleTwoFactor());\n        $this->assertEmpty($user->getBackupCodes());\n    }\n\n    public function testUserDisable2faGoogle()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config/otp/app/disable');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('flashes.config.notice.otp_disabled', $alert[0]);\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository('WallabagUserBundle:User')\n            ->findOneByUsername('admin');\n\n        $this->assertEmpty($user->getGoogleAuthenticatorSecret());\n        $this->assertEmpty($user->getBackupCodes());\n    }\n\n    public function testExportTaggingRule()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        ob_start();\n        $crawler = $client->request('GET', '/tagging-rule/export');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/json', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"tagging_rules_admin.json\"', $headers->get('content-disposition'));\n        $this->assertSame('UTF-8', $headers->get('content-transfer-encoding'));\n\n        $content = json_decode($client->getResponse()->getContent(), true);\n\n        $this->assertCount(4, $content);\n        $this->assertSame('content matches \"spurs\"', $content[0]['rule']);\n        $this->assertSame('sport', $content[0]['tags'][0]);\n    }\n\n    public function testImportTagginfRuleBadFile()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n        $form = $crawler->filter('form[name=upload_tagging_rule_file] > button[type=submit]')->form();\n\n        $data = [\n            'upload_tagging_rule_file[file]' => '',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n    }\n\n    public function testImportTagginfRuleFile()\n    {\n        $this->logInAs('admin');\n        $client = $this->getClient();\n\n        $crawler = $client->request('GET', '/config');\n        $form = $crawler->filter('form[name=upload_tagging_rule_file] > button[type=submit]')->form();\n\n        $file = new UploadedFile(__DIR__ . '/../fixtures/tagging_rules_admin.json', 'tagging_rules_admin.json');\n\n        $data = [\n            'upload_tagging_rule_file[file]' => $file,\n        ];\n\n        $client->submit($form, $data);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $user = $client->getContainer()->get('fos_user.user_manager.test')->findUserBy(['username' => 'admin']);\n        $taggingRules = $user->getConfig()->getTaggingRules()->toArray();\n        $this->assertCount(5, $taggingRules);\n        $this->assertSame('title matches \"football\"', $taggingRules[4]->getRule());\n    }\n}\n"], "filenames": ["src/Wallabag/AnnotationBundle/Controller/WallabagAnnotationController.php", "src/Wallabag/AnnotationBundle/DataFixtures/AnnotationFixtures.php", "src/Wallabag/AnnotationBundle/Repository/AnnotationRepository.php", "src/Wallabag/ApiBundle/Controller/AnnotationRestController.php", "tests/Wallabag/AnnotationBundle/Controller/AnnotationControllerTest.php", "tests/Wallabag/CoreBundle/Controller/ConfigControllerTest.php"], "buggy_code_start_loc": [6, 36, 44, 6, 25, 935], "buggy_code_end_loc": [120, 36, 70, 94, 289, 1101], "fixing_code_start_loc": [5, 37, 45, 5, 24, 935], "fixing_code_end_loc": [141, 46, 88, 89, 358, 1101], "type": "CWE-285", "message": "Improper Authorization in GitHub repository wallabag/wallabag prior to 2.5.3.", "other": {"cve": {"id": "CVE-2023-0610", "sourceIdentifier": "security@huntr.dev", "published": "2023-02-01T12:15:09.257", "lastModified": "2023-02-08T14:15:40.750", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Authorization in GitHub repository wallabag/wallabag prior to 2.5.3."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-285"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wallabag:wallabag:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.5.3", "matchCriteriaId": "D7AC40AC-B5ED-41CB-B044-3D6B8D807FEC"}]}]}], "references": [{"url": "https://github.com/wallabag/wallabag/commit/5ac6b6bff9e2e3a87fd88c2904ff3c6aac40722e", "source": "security@huntr.dev", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://huntr.dev/bounties/8fdd9b31-d89b-4bbe-9557-20b960faf926", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wallabag/wallabag/commit/5ac6b6bff9e2e3a87fd88c2904ff3c6aac40722e"}}