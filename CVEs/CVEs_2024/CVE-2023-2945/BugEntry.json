{"buggy_code": ["<?php\n\n/**\n * handle_note.php\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2016-2017 Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n// Will start the (patient) portal OpenEMR session/cookie.\nrequire_once(dirname(__FILE__) . \"/../../src/Common/Session/SessionUtil.php\");\nOpenEMR\\Common\\Session\\SessionUtil::portalSessionStart();\n\nif (isset($_SESSION['pid']) && isset($_SESSION['patient_portal_onsite_two'])) {\n    // ensure patient is bootstrapped (if sent)\n    if (!empty($_POST['pid'])) {\n        if ($_POST['pid'] != $_SESSION['pid']) {\n            echo \"illegal Action\";\n            OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n            exit;\n        }\n    }\n    $ignoreAuth_onsite_portal = true;\n    require_once(dirname(__FILE__) . \"/../../interface/globals.php\");\n    if (empty($_SESSION['portal_username'])) {\n        echo xlt(\"illegal Action\");\n        OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n        exit;\n    }\n    // owner is the patient portal_username\n    $owner = $_SESSION['portal_username'];\n} else {\n    OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n    $ignoreAuth = false;\n    require_once(dirname(__FILE__) . \"/../../interface/globals.php\");\n    if (!isset($_SESSION['authUserID']) || empty($_SESSION['authUser'])) {\n        $landingpage = \"index.php\";\n        header('Location: ' . $landingpage);\n        exit();\n    }\n    //owner is the user authUser\n    $owner = $_SESSION['authUser'];\n}\n\nrequire_once(dirname(__FILE__) . \"/../lib/portal_mail.inc.php\");\nrequire_once(\"$srcdir/pnotes.inc.php\");\n\nuse OpenEMR\\Common\\Csrf\\CsrfUtils;\n\nif (!(isset($GLOBALS['portal_onsite_two_enable'])) || !($GLOBALS['portal_onsite_two_enable'])) {\n    echo xlt('Patient Portal is turned off');\n    exit;\n}\n// confirm csrf (from both portal and core)\nif (!CsrfUtils::verifyCsrfToken($_POST[\"csrf_token_form\"], 'messages-portal')) {\n    CsrfUtils::csrfNotVerified();\n}\n\nif (empty($owner)) {\n    echo xlt('Critical error, so exiting');\n    exit;\n}\n\n$task = $_POST['task'];\nif (! $task) {\n    return 'no task';\n}\n\n$noteid = ($_POST['noteid'] ?? null) ?: 0;\n$notejson = ($_POST['notejson'] ?? null) ? json_decode($_POST['notejson'], true) : 0;\n$reply_noteid = $_POST['replyid'] ?? null ?: 0;\n$note = $_POST['inputBody'] ?? null;\n$title = $_POST['title'] ?? null;\n$sid = $_POST['sender_id'] ?? null;\n$sn = $_POST['sender_name'] ?? null;\n$rid = $_POST['recipient_id'] ?? null;\n$rn = $_POST['recipient_name'] ?? null;\n$header = '';\n\nswitch ($task) {\n    case \"forward\":\n        $pid = isset($_POST['pid']) ? $_POST['pid'] : 0;\n        addPnote($pid, $note, 1, 1, $title, $sid, '', 'New');\n        updatePortalMailMessageStatus($noteid, 'Sent', $owner);\n        if (empty($_POST[\"submit\"])) {\n            echo 'ok';\n        }\n\n        break;\n    case \"add\":\n        // each user has their own copy of message\n        sendMail($owner, $note, $title, $header, $noteid, $sid, $sn, $rid, $rn, 'New');\n        sendMail($rid, $note, $title, $header, $noteid, $sid, $sn, $rid, $rn, 'New', $reply_noteid);\n        if (empty($_POST[\"submit\"])) {\n            echo 'ok';\n        }\n        break;\n    case \"reply\":\n        sendMail($owner, $note, $title, $header, $noteid, $sid, $sn, $rid, $rn, 'Reply', '');\n        sendMail($rid, $note, $title, $header, $noteid, $sid, $sn, $rid, $rn, 'New', $reply_noteid);\n        if (empty($_POST[\"submit\"])) {\n            echo 'ok';\n        }\n        break;\n    case \"delete\":\n        updatePortalMailMessageStatus($noteid, 'Delete', $owner);\n        if (empty($_POST[\"submit\"])) {\n            echo 'ok';\n        }\n        break;\n    case \"massdelete\":\n        foreach ($notejson as $deleteid) {\n            updatePortalMailMessageStatus($deleteid, 'Delete', $owner);\n            if (empty($_POST[\"submit\"])) {\n                echo 'ok';\n            }\n        }\n        break;\n    case \"setread\":\n        if ($noteid > 0) {\n            updatePortalMailMessageStatus($noteid, 'Read', $owner);\n            if (empty($_POST[\"submit\"])) {\n                echo 'ok';\n            }\n        } else {\n            echo 'missing note id';\n        }\n        break;\n    case \"getinbox\":\n        if ($owner) {\n            $result = getMails($owner, 'inbox', '', '');\n            echo json_encode($result);\n        } else {\n            echo 'error';\n        }\n        break;\n    case \"getsent\":\n        if ($owner) {\n            $result = getMails($owner, 'sent', '', '');\n            echo json_encode($result);\n        } else {\n            echo 'error';\n        }\n        break;\n    case \"getall\":\n        if ($owner) {\n            $result = getMails($owner, 'all', '', '');\n            echo json_encode($result);\n        } else {\n            echo 'error';\n        }\n        break;\n    case \"getdeleted\":\n        if ($owner) {\n            $result = getMails($owner, 'deleted', '', '');\n            echo json_encode($result);\n        } else {\n            echo 'error';\n        }\n        break;\n    default:\n        echo 'failed';\n        break;\n}\n\nif (!empty($_POST[\"submit\"])) {\n    $url = $_POST[\"submit\"];\n    header(\"Location: \" . $url);\n    exit();\n}\n"], "fixing_code": ["<?php\n\n/**\n * handle_note.php\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2016-2017 Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n// Will start the (patient) portal OpenEMR session/cookie.\nrequire_once(dirname(__FILE__) . \"/../../src/Common/Session/SessionUtil.php\");\nOpenEMR\\Common\\Session\\SessionUtil::portalSessionStart();\n\nif (isset($_SESSION['pid']) && isset($_SESSION['patient_portal_onsite_two'])) {\n    // ensure patient is bootstrapped (if sent)\n    if (!empty($_POST['pid'])) {\n        if ($_POST['pid'] != $_SESSION['pid']) {\n            echo \"illegal Action\";\n            OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n            exit;\n        }\n    }\n    $ignoreAuth_onsite_portal = true;\n    require_once(dirname(__FILE__) . \"/../../interface/globals.php\");\n    if (empty($_SESSION['portal_username'])) {\n        echo xlt(\"illegal Action\");\n        OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n        exit;\n    }\n    // owner is the patient portal_username\n    $owner = $_SESSION['portal_username'];\n\n    // ensure the owner is bootstrapped to the $_POST['sender_id'] and\n    //   $_POST['sender_name'], if applicable\n    if (empty($_POST['sender_id']) && !empty($_POST['sender_name'])) {\n        echo xlt(\"illegal Action\");\n        OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n        exit;\n    }\n    if (!empty($_POST['sender_id'])) {\n        if ($_POST['sender_id'] != $owner) {\n            echo xlt(\"illegal Action\");\n            OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n            exit;\n        }\n    }\n    if (!empty($_POST['sender_name'])) {\n        $nameCheck = sqlQuery(\"SELECT `fname`, `lname` FROM `patient_data` WHERE `pid` = ?\", [$_SESSION['pid']]);\n        if (empty($nameCheck) || ($_POST['sender_name'] != ($nameCheck['fname'] . \" \" . $nameCheck['lname']))) {\n            echo xlt(\"illegal Action\");\n            OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n            exit;\n        }\n    }\n} else {\n    OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n    $ignoreAuth = false;\n    require_once(dirname(__FILE__) . \"/../../interface/globals.php\");\n    if (!isset($_SESSION['authUserID']) || empty($_SESSION['authUser'])) {\n        $landingpage = \"index.php\";\n        header('Location: ' . $landingpage);\n        exit();\n    }\n    //owner is the user authUser\n    $owner = $_SESSION['authUser'];\n}\n\nrequire_once(dirname(__FILE__) . \"/../lib/portal_mail.inc.php\");\nrequire_once(\"$srcdir/pnotes.inc.php\");\n\nuse OpenEMR\\Common\\Csrf\\CsrfUtils;\n\nif (!(isset($GLOBALS['portal_onsite_two_enable'])) || !($GLOBALS['portal_onsite_two_enable'])) {\n    echo xlt('Patient Portal is turned off');\n    exit;\n}\n// confirm csrf (from both portal and core)\nif (!CsrfUtils::verifyCsrfToken($_POST[\"csrf_token_form\"], 'messages-portal')) {\n    CsrfUtils::csrfNotVerified();\n}\n\nif (empty($owner)) {\n    echo xlt('Critical error, so exiting');\n    exit;\n}\n\n$task = $_POST['task'];\nif (! $task) {\n    return 'no task';\n}\n\n$noteid = ($_POST['noteid'] ?? null) ?: 0;\n$notejson = ($_POST['notejson'] ?? null) ? json_decode($_POST['notejson'], true) : 0;\n$reply_noteid = $_POST['replyid'] ?? null ?: 0;\n$note = $_POST['inputBody'] ?? null;\n$title = $_POST['title'] ?? null;\n$sid = $_POST['sender_id'] ?? null;\n$sn = $_POST['sender_name'] ?? null;\n$rid = $_POST['recipient_id'] ?? null;\n$rn = $_POST['recipient_name'] ?? null;\n$header = '';\n\nswitch ($task) {\n    case \"forward\":\n        $pid = isset($_POST['pid']) ? $_POST['pid'] : 0;\n        addPnote($pid, $note, 1, 1, $title, $sid, '', 'New');\n        updatePortalMailMessageStatus($noteid, 'Sent', $owner);\n        if (empty($_POST[\"submit\"])) {\n            echo 'ok';\n        }\n\n        break;\n    case \"add\":\n        // each user has their own copy of message\n        sendMail($owner, $note, $title, $header, $noteid, $sid, $sn, $rid, $rn, 'New');\n        sendMail($rid, $note, $title, $header, $noteid, $sid, $sn, $rid, $rn, 'New', $reply_noteid);\n        if (empty($_POST[\"submit\"])) {\n            echo 'ok';\n        }\n        break;\n    case \"reply\":\n        sendMail($owner, $note, $title, $header, $noteid, $sid, $sn, $rid, $rn, 'Reply', '');\n        sendMail($rid, $note, $title, $header, $noteid, $sid, $sn, $rid, $rn, 'New', $reply_noteid);\n        if (empty($_POST[\"submit\"])) {\n            echo 'ok';\n        }\n        break;\n    case \"delete\":\n        updatePortalMailMessageStatus($noteid, 'Delete', $owner);\n        if (empty($_POST[\"submit\"])) {\n            echo 'ok';\n        }\n        break;\n    case \"massdelete\":\n        foreach ($notejson as $deleteid) {\n            updatePortalMailMessageStatus($deleteid, 'Delete', $owner);\n            if (empty($_POST[\"submit\"])) {\n                echo 'ok';\n            }\n        }\n        break;\n    case \"setread\":\n        if ($noteid > 0) {\n            updatePortalMailMessageStatus($noteid, 'Read', $owner);\n            if (empty($_POST[\"submit\"])) {\n                echo 'ok';\n            }\n        } else {\n            echo 'missing note id';\n        }\n        break;\n    case \"getinbox\":\n        if ($owner) {\n            $result = getMails($owner, 'inbox', '', '');\n            echo json_encode($result);\n        } else {\n            echo 'error';\n        }\n        break;\n    case \"getsent\":\n        if ($owner) {\n            $result = getMails($owner, 'sent', '', '');\n            echo json_encode($result);\n        } else {\n            echo 'error';\n        }\n        break;\n    case \"getall\":\n        if ($owner) {\n            $result = getMails($owner, 'all', '', '');\n            echo json_encode($result);\n        } else {\n            echo 'error';\n        }\n        break;\n    case \"getdeleted\":\n        if ($owner) {\n            $result = getMails($owner, 'deleted', '', '');\n            echo json_encode($result);\n        } else {\n            echo 'error';\n        }\n        break;\n    default:\n        echo 'failed';\n        break;\n}\n\nif (!empty($_POST[\"submit\"])) {\n    $url = $_POST[\"submit\"];\n    header(\"Location: \" . $url);\n    exit();\n}\n"], "filenames": ["portal/messaging/handle_note.php"], "buggy_code_start_loc": [36], "buggy_code_end_loc": [36], "fixing_code_start_loc": [37], "fixing_code_end_loc": [60], "type": "CWE-862", "message": "Missing Authorization in GitHub repository openemr/openemr prior to 7.0.1.", "other": {"cve": {"id": "CVE-2023-2945", "sourceIdentifier": "security@huntr.dev", "published": "2023-05-27T22:15:10.167", "lastModified": "2023-06-01T03:46:34.900", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Missing Authorization in GitHub repository openemr/openemr prior to 7.0.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open-emr:openemr:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.0.1", "matchCriteriaId": "30B2EE3F-FA55-46FB-BC32-B041753826A4"}]}]}], "references": [{"url": "https://github.com/openemr/openemr/commit/3656bc88288957d68ba040cad2e5f9dbd1b607b1", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/62de71bd-333d-4593-91a5-534ef7f0c435", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openemr/openemr/commit/3656bc88288957d68ba040cad2e5f9dbd1b607b1"}}