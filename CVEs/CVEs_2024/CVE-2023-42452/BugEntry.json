{"buggy_code": ["# frozen_string_literal: true\n\nclass TranslateStatusService < BaseService\n  CACHE_TTL = 1.day.freeze\n\n  include ERB::Util\n  include FormattingHelper\n\n  def call(status, target_language)\n    @status = status\n    @source_texts = source_texts\n    @target_language = target_language\n\n    raise Mastodon::NotPermittedError unless permitted?\n\n    status_translation = Rails.cache.fetch(\"v2:translations/#{@status.language}/#{@target_language}/#{content_hash}\", expires_in: CACHE_TTL) do\n      translations = translation_backend.translate(@source_texts.values, @status.language, @target_language)\n      build_status_translation(translations)\n    end\n\n    status_translation.status = @status\n\n    status_translation\n  end\n\n  private\n\n  def translation_backend\n    @translation_backend ||= TranslationService.configured\n  end\n\n  def permitted?\n    return false unless @status.distributable? && TranslationService.configured?\n\n    languages[@status.language]&.include?(@target_language)\n  end\n\n  def languages\n    Rails.cache.fetch('translation_service/languages', expires_in: 7.days, race_condition_ttl: 1.hour) { TranslationService.configured.languages }\n  end\n\n  def content_hash\n    Digest::SHA256.base64digest(@source_texts.transform_keys { |key| key.respond_to?(:id) ? \"#{key.class}-#{key.id}\" : key }.to_json)\n  end\n\n  def source_texts\n    texts = {}\n    texts[:content] = wrap_emoji_shortcodes(status_content_format(@status)) if @status.content.present?\n    texts[:spoiler_text] = wrap_emoji_shortcodes(html_escape(@status.spoiler_text)) if @status.spoiler_text.present?\n\n    @status.preloadable_poll&.loaded_options&.each do |option|\n      texts[option] = wrap_emoji_shortcodes(html_escape(option.title))\n    end\n\n    @status.media_attachments.each do |media_attachment|\n      texts[media_attachment] = html_escape(media_attachment.description)\n    end\n\n    texts\n  end\n\n  def build_status_translation(translations)\n    status_translation = Translation.new(\n      detected_source_language: translations.first&.detected_source_language,\n      language: @target_language,\n      provider: translations.first&.provider,\n      content: '',\n      spoiler_text: '',\n      poll_options: [],\n      media_attachments: []\n    )\n\n    @source_texts.keys.each_with_index do |source, index|\n      translation = translations[index]\n\n      case source\n      when :content\n        status_translation.content = unwrap_emoji_shortcodes(translation.text).to_html\n      when :spoiler_text\n        status_translation.spoiler_text = unwrap_emoji_shortcodes(translation.text).content\n      when Poll::Option\n        status_translation.poll_options << Translation::Option.new(\n          title: unwrap_emoji_shortcodes(translation.text).content\n        )\n      when MediaAttachment\n        status_translation.media_attachments << Translation::MediaAttachment.new(\n          id: source.id,\n          description: html_entities.decode(translation.text)\n        )\n      end\n    end\n\n    status_translation\n  end\n\n  def wrap_emoji_shortcodes(text)\n    EmojiFormatter.new(text, @status.emojis, { raw_shortcode: true }).to_s\n  end\n\n  def unwrap_emoji_shortcodes(html)\n    fragment = Nokogiri::HTML.fragment(html)\n    fragment.css('span[translate=\"no\"]').each do |element|\n      element.remove_attribute('translate')\n      element.replace(element.children) if element.attributes.empty?\n    end\n    fragment\n  end\n\n  def html_entities\n    HTMLEntities.new\n  end\nend\n"], "fixing_code": ["# frozen_string_literal: true\n\nclass TranslateStatusService < BaseService\n  CACHE_TTL = 1.day.freeze\n\n  include ERB::Util\n  include FormattingHelper\n\n  def call(status, target_language)\n    @status = status\n    @source_texts = source_texts\n    @target_language = target_language\n\n    raise Mastodon::NotPermittedError unless permitted?\n\n    status_translation = Rails.cache.fetch(\"v2:translations/#{@status.language}/#{@target_language}/#{content_hash}\", expires_in: CACHE_TTL) do\n      translations = translation_backend.translate(@source_texts.values, @status.language, @target_language)\n      build_status_translation(translations)\n    end\n\n    status_translation.status = @status\n\n    status_translation\n  end\n\n  private\n\n  def translation_backend\n    @translation_backend ||= TranslationService.configured\n  end\n\n  def permitted?\n    return false unless @status.distributable? && TranslationService.configured?\n\n    languages[@status.language]&.include?(@target_language)\n  end\n\n  def languages\n    Rails.cache.fetch('translation_service/languages', expires_in: 7.days, race_condition_ttl: 1.hour) { TranslationService.configured.languages }\n  end\n\n  def content_hash\n    Digest::SHA256.base64digest(@source_texts.transform_keys { |key| key.respond_to?(:id) ? \"#{key.class}-#{key.id}\" : key }.to_json)\n  end\n\n  def source_texts\n    texts = {}\n    texts[:content] = wrap_emoji_shortcodes(status_content_format(@status)) if @status.content.present?\n    texts[:spoiler_text] = wrap_emoji_shortcodes(html_escape(@status.spoiler_text)) if @status.spoiler_text.present?\n\n    @status.preloadable_poll&.loaded_options&.each do |option|\n      texts[option] = wrap_emoji_shortcodes(html_escape(option.title))\n    end\n\n    @status.media_attachments.each do |media_attachment|\n      texts[media_attachment] = html_escape(media_attachment.description)\n    end\n\n    texts\n  end\n\n  def build_status_translation(translations)\n    status_translation = Translation.new(\n      detected_source_language: translations.first&.detected_source_language,\n      language: @target_language,\n      provider: translations.first&.provider,\n      content: '',\n      spoiler_text: '',\n      poll_options: [],\n      media_attachments: []\n    )\n\n    @source_texts.keys.each_with_index do |source, index|\n      translation = translations[index]\n\n      case source\n      when :content\n        node = unwrap_emoji_shortcodes(translation.text)\n        Sanitize.node!(node, Sanitize::Config::MASTODON_STRICT)\n        status_translation.content = node.to_html\n      when :spoiler_text\n        status_translation.spoiler_text = unwrap_emoji_shortcodes(translation.text).content\n      when Poll::Option\n        status_translation.poll_options << Translation::Option.new(\n          title: unwrap_emoji_shortcodes(translation.text).content\n        )\n      when MediaAttachment\n        status_translation.media_attachments << Translation::MediaAttachment.new(\n          id: source.id,\n          description: html_entities.decode(translation.text)\n        )\n      end\n    end\n\n    status_translation\n  end\n\n  def wrap_emoji_shortcodes(text)\n    EmojiFormatter.new(text, @status.emojis, { raw_shortcode: true }).to_s\n  end\n\n  def unwrap_emoji_shortcodes(html)\n    fragment = Nokogiri::HTML.fragment(html)\n    fragment.css('span[translate=\"no\"]').each do |element|\n      element.remove_attribute('translate')\n      element.replace(element.children) if element.attributes.empty?\n    end\n    fragment\n  end\n\n  def html_entities\n    HTMLEntities.new\n  end\nend\n"], "filenames": ["app/services/translate_status_service.rb"], "buggy_code_start_loc": [78], "buggy_code_end_loc": [79], "fixing_code_start_loc": [78], "fixing_code_end_loc": [81], "type": "CWE-79", "message": "Mastodon is a free, open-source social network server based on ActivityPub. In versions on the 4.x branch prior to versions 4.0.10, 4.2.8, and 4.2.0-rc2, under certain conditions, attackers can abuse the translation feature to bypass the server-side HTML sanitization, allowing unescaped HTML to execute in the browser. The impact is limited thanks to Mastodon's strict Content Security Policy, blocking inline scripts, etc. However a CSP bypass or loophole could be exploited to execute malicious XSS. Furthermore, it requires user interaction, as this can only occur upon clicking the \u201cTranslate\u201d button on a malicious post. Versions 4.0.10, 4.2.8, and 4.2.0-rc2 contain a patch for this issue.", "other": {"cve": {"id": "CVE-2023-42452", "sourceIdentifier": "security-advisories@github.com", "published": "2023-09-19T16:15:13.630", "lastModified": "2023-09-22T17:12:47.737", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Mastodon is a free, open-source social network server based on ActivityPub. In versions on the 4.x branch prior to versions 4.0.10, 4.2.8, and 4.2.0-rc2, under certain conditions, attackers can abuse the translation feature to bypass the server-side HTML sanitization, allowing unescaped HTML to execute in the browser. The impact is limited thanks to Mastodon's strict Content Security Policy, blocking inline scripts, etc. However a CSP bypass or loophole could be exploited to execute malicious XSS. Furthermore, it requires user interaction, as this can only occur upon clicking the \u201cTranslate\u201d button on a malicious post. Versions 4.0.10, 4.2.8, and 4.2.0-rc2 contain a patch for this issue."}, {"lang": "es", "value": "Mastodon es un servidor de red social gratuito y de c\u00f3digo abierto basado en ActivityPub. En las versiones de la rama 4.x anteriores a las versiones 4.0.10, 4.2.8 y 4.2.0-rc2, bajo ciertas condiciones, los atacantes pueden abusar de la funci\u00f3n de traducci\u00f3n para evitar la sanitizaci\u00f3n de HTML del lado del servidor, permitiendo que se ejecute HTML sin escape en el navegador. El impacto es limitado gracias a la estricta Pol\u00edtica de Seguridad de Contenido de Mastodon, el bloqueo de scripts en l\u00ednea, etc. Sin embargo, se podr\u00eda aprovechar una omisi\u00f3n o laguna del CSP para ejecutar XSS malicioso. Adem\u00e1s, requiere la interacci\u00f3n del usuario, ya que esto s\u00f3lo puede ocurrir al hacer clic en el bot\u00f3n \"Traducir\" en una publicaci\u00f3n maliciosa. Las versiones 4.0.10, 4.2.8 y 4.2.0-rc2 contienen un parche para este problema."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:joinmastodon:mastodon:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.0.0", "versionEndExcluding": "4.0.10", "matchCriteriaId": "98C89C5A-7235-4260-8656-CA90DB36CC96"}, {"vulnerable": true, "criteria": "cpe:2.3:a:joinmastodon:mastodon:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.1.0", "versionEndExcluding": "4.1.8", "matchCriteriaId": "E58F736C-6245-4EF4-AE4D-FB6AA20F0D7B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:joinmastodon:mastodon:4.2.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "D76FF8DD-B11D-4119-9B4E-32CE8365A25B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:joinmastodon:mastodon:4.2.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "19DC8A22-E8EF-4FAB-B60E-64FE54AE0968"}, {"vulnerable": true, "criteria": "cpe:2.3:a:joinmastodon:mastodon:4.2.0:beta3:*:*:*:*:*:*", "matchCriteriaId": "1406EB6A-186B-4A9C-95F6-5EC509867C3C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:joinmastodon:mastodon:4.2.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "089015EE-D7E4-4370-B1ED-52283B06FF0A"}]}]}], "references": [{"url": "https://github.com/mastodon/mastodon/commit/ff32475f5f4a84ebf9619e7eef5bf8b4c075d0e2", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/mastodon/mastodon/security/advisories/GHSA-2693-xr3m-jhqr", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/mastodon/mastodon/commit/ff32475f5f4a84ebf9619e7eef5bf8b4c075d0e2"}}