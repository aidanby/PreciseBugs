{"buggy_code": ["<?php\n\n/**\n * This file contains functions for handling notes attached to patient files.\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * 2013-02-08 EMR Direct: changes to allow notes added by background-services with pid=0\n */\n\nuse OpenEMR\\Common\\Logging\\SystemLogger;\n\n/**\n * Retrieve a note, given its ID\n *\n * @param string $id the ID of the note to retrieve.\n * @param string $cols A list of columns to retrieve. defaults to '*' for all.\n */\nfunction getPnoteById($id, $cols = \"*\")\n{\n    return sqlQuery(\"SELECT \"  . escape_sql_column_name(process_cols_escape($cols), array('pnotes')) . \" FROM pnotes WHERE id=? \" .\n    ' AND deleted != 1 ' . // exclude ALL deleted notes\n    'order by date DESC limit 0,1', array($id));\n}\n\n/**\n * Get the patient notes for the given user.\n *\n * This function is used to retrieve notes assigned to the given user, or\n * optionally notes assigned to any user.\n *\n * @param string $activity 0 for deleted notes, 1 (the default) for active\n *                         notes, or 'All' for all.\n * @param string $show_all whether to display only the selected user's\n *                         messages, or all users' messages.\n * @param string $user The user whom's notes you want to retrieve.\n * @param bool $count Whether to return a count, or just return 0.\n * @param string $sortby A field to sort results by. (options are users.lname,patient_data.lname,pnotes.title,pnotes.date,pnotes.message_status) (will default to users.lname)\n * @param string $sortorder whether to sort ascending or descending.\n * @param string $begin what row to start retrieving results from.\n * @param string $listnumber number of rows to return.\n * @return int The number of rows retrieved, or 0 if $count was true.\n */\nfunction getPnotesByUser($activity = \"1\", $show_all = \"no\", $user = '', $count = false, $sortby = '', $sortorder = '', $begin = '', $listnumber = '')\n{\n\n  // Set the activity part of query\n    if ($activity == '1') {\n        $activity_query = \" pnotes.message_status != 'Done' AND pnotes.activity = 1 AND \";\n    } elseif ($activity == '0') {\n        $activity_query = \" (pnotes.message_status = 'Done' OR pnotes.activity = 0) AND \";\n    } else { //$activity=='all'\n        $activity_query = \" \";\n    }\n\n  // Set whether to show chosen user or all users\n    if ($show_all == 'yes') {\n        $usrvar = '_%';\n    } else {\n        $usrvar = $user;\n    }\n\n  // run the query\n  // 2013-02-08 EMR Direct: minor changes to query so notes with pid=0 don't disappear\n    $sql = \"SELECT pnotes.id, pnotes.user, pnotes.pid, pnotes.title, pnotes.date, pnotes.message_status, pnotes.activity,\n          IF(pnotes.pid = 0 OR pnotes.user != pnotes.pid,users.fname,patient_data.fname) as users_fname,\n          IF(pnotes.pid = 0 OR pnotes.user != pnotes.pid,users.lname,patient_data.lname) as users_lname,\n          patient_data.fname as patient_data_fname, patient_data.lname as patient_data_lname\n          FROM ((pnotes LEFT JOIN users ON pnotes.user = users.username)\n          LEFT JOIN patient_data ON pnotes.pid = patient_data.pid) WHERE $activity_query\n          pnotes.deleted != '1' AND pnotes.assigned_to LIKE ?\";\n    if (!empty($sortby) || !empty($sortorder)  || !empty($begin) || !empty($listnumber)) {\n        $sql .= \" order by \" . escape_sql_column_name($sortby, array('users','patient_data','pnotes'), true) .\n            \" \" . escape_sort_order($sortorder) .\n            \" limit \" . escape_limit($begin) . \", \" . escape_limit($listnumber);\n    }\n\n    $result = sqlStatement($sql, array($usrvar));\n\n  // return the results\n    if ($count) {\n        if (sqlNumRows($result) != 0) {\n            $total = sqlNumRows($result);\n        } else {\n            $total = 0;\n        }\n\n        return $total;\n    } else {\n        return $result;\n    }\n}\n\nfunction getPnotesByDate(\n    $date,\n    $activity = \"1\",\n    $cols = \"*\",\n    $pid = \"%\",\n    $limit = \"all\",\n    $start = 0,\n    $username = '',\n    $docid = 0,\n    $status = \"\",\n    $orderid = 0\n) {\n\n    $sqlParameterArray = array();\n    if ($docid) {\n        $sql = \"SELECT \" . escape_sql_column_name(process_cols_escape($cols), array('pnotes', 'gprelations')) . \" FROM pnotes AS p, gprelations AS r \" .\n        \"WHERE p.date LIKE ? AND r.type1 = 1 AND \" .\n        \"r.id1 = ? AND r.type2 = 6 AND p.id = r.id2 AND p.pid != p.user\";\n        array_push($sqlParameterArray, '%' . $date . '%', $docid);\n    } elseif ($orderid) {\n        $sql = \"SELECT \" . escape_sql_column_name(process_cols_escape($cols), array('pnotes', 'gprelations')) . \" FROM pnotes AS p, gprelations AS r \" .\n        \"WHERE p.date LIKE ? AND r.type1 = 2 AND \" .\n        \"r.id1 = ? AND r.type2 = 6 AND p.id = r.id2 AND p.pid != p.user\";\n        array_push($sqlParameterArray, '%' . $date . '%', $orderid);\n    } else {\n        $sql = \"SELECT \"  . escape_sql_column_name(process_cols_escape($cols), array('pnotes')) . \" FROM pnotes AS p \" .\n        \"WHERE date LIKE ? AND pid LIKE ? AND p.pid != p.user\";\n        array_push($sqlParameterArray, '%' . $date . '%', $pid);\n    }\n\n    $sql .= \" AND deleted != 1\"; // exclude ALL deleted notes\n    if ($activity != \"all\") {\n        if ($activity == '0') {\n            // only return inactive\n            $sql .= \" AND (activity = '0' OR message_status = 'Done') \";\n        } else { // $activity == '1'\n            // only return active\n            $sql .= \" AND activity = '1' AND message_status != 'Done' \";\n        }\n    }\n\n    if ($username) {\n        $sql .= \" AND assigned_to LIKE ?\";\n        array_push($sqlParameterArray, $username);\n    }\n\n    if ($status) {\n        $sql .= \" AND message_status IN ('\" . str_replace(\",\", \"','\", add_escape_custom($status)) . \"')\";\n    }\n\n    $sql .= \" ORDER BY date DESC\";\n    if ($limit != \"all\") {\n        $sql .= \" LIMIT \" . escape_limit($start) . \", \" . escape_limit($limit);\n    }\n\n    $res = sqlStatement($sql, $sqlParameterArray);\n\n    $all = array();\n    for ($iter = 0; $row = sqlFetchArray($res); $iter++) {\n        $all[$iter] = $row;\n    }\n\n    return $all;\n}\n\n// activity can only be 0, 1, or 'all'\nfunction getSentPnotesByDate(\n    $date,\n    $activity = \"1\",\n    $cols = \"*\",\n    $pid = \"%\",\n    $limit = \"all\",\n    $start = 0,\n    $username = '',\n    $docid = 0,\n    $status = \"\",\n    $orderid = 0\n) {\n\n    $sqlParameterArray = array();\n    if ($docid) {\n        $sql = \"SELECT \" . escape_sql_column_name(process_cols_escape($cols), array('pnotes', 'gprelations')) . \" FROM pnotes AS p, gprelations AS r \" .\n        \"WHERE p.date LIKE ? AND r.type1 = 1 AND \" .\n        \"r.id1 = ? AND r.type2 = 6 AND p.id = r.id2 AND p.pid = p.user\";\n        array_push($sqlParameterArray, '%' . $date . '%', $docid);\n    } elseif ($orderid) {\n        $sql = \"SELECT \" . escape_sql_column_name(process_cols_escape($cols), array('pnotes','gprelations')) . \" FROM pnotes AS p, gprelations AS r \" .\n        \"WHERE p.date LIKE ? AND r.type1 = 2 AND \" .\n        \"r.id1 = ? AND r.type2 = 6 AND p.id = r.id2 AND p.pid = p.user\";\n        array_push($sqlParameterArray, '%' . $date . '%', $orderid);\n    } else {\n        $sql = \"SELECT \" . escape_sql_column_name(process_cols_escape($cols), array('pnotes')) . \" FROM pnotes AS p \" .\n        \"WHERE date LIKE ? AND pid LIKE ? AND p.pid = p.user\";\n        array_push($sqlParameterArray, '%' . $date . '%', $pid);\n    }\n\n    $sql .= \" AND deleted != 1\"; // exclude ALL deleted notes\n    if ($activity != \"all\") {\n        if ($activity == '0') {\n            // only return inactive\n            $sql .= \" AND (activity = '0' OR message_status = 'Done') \";\n        } else { // $activity == '1'\n            // only return active\n            $sql .= \" AND activity = '1' AND message_status != 'Done' \";\n        }\n    }\n\n    if ($username) {\n        $sql .= \" AND assigned_to LIKE ?\";\n        array_push($sqlParameterArray, $username);\n    }\n\n    if ($status) {\n        $sql .= \" AND message_status IN ('\" . str_replace(\",\", \"','\", add_escape_custom($status)) . \"')\";\n    }\n\n    $sql .= \" ORDER BY date DESC\";\n    if ($limit != \"all\") {\n        $sql .= \" LIMIT \" . escape_limit($start) . \", \" . escape_limit($limit);\n    }\n\n    $res = sqlStatement($sql, $sqlParameterArray);\n\n    $all = array();\n    for ($iter = 0; $row = sqlFetchArray($res); $iter++) {\n        $all[$iter] = $row;\n    }\n\n    return $all;\n}\n\nfunction getPatientNotes($pid = '', $limit = '', $offset = 0, $search = '')\n{\n    if ($limit) {\n        $limit = \"LIMIT \" . escape_limit($offset) . \", \" . escape_limit($limit);\n    }\n\n    $sql = \"\n    SELECT\n      p.id,\n      p.date,\n      p.user,\n      p.title,\n      REPLACE(\n        p.body,\n        '-patient-',\n        CONCAT(pd.fname, ' ', pd.lname)\n      ) AS body,\n      p.message_status,\n      'Message' as `type`,\n      p.activity\n    FROM\n      pnotes AS p\n      LEFT JOIN patient_data AS pd\n        ON pd.id = p.pid\n    WHERE assigned_to = '-patient-'\n      AND p.deleted != 1\n      AND p.pid = ?\n      $search\n    ORDER BY `date` desc\n    $limit\n  \";\n    $res = sqlStatement($sql, array($pid));\n    for ($iter = 0; $row = sqlFetchArray($res); $iter++) {\n        $all[$iter] = $row;\n    }\n\n    return $all;\n}\n\nfunction getPatientNotifications($pid = '', $limit = '', $offset = 0, $search = '')\n{\n    if ($limit) {\n        $limit = \"LIMIT \" . escape_limit($offset) . \", \" . escape_limit($limit);\n    }\n\n    $sql = \"\n    SELECT\n      pr.id,\n      date_created AS `date`,\n      'Patient Reminders' AS `user`,\n      due_status AS title,\n      CONCAT(lo.title, ':', lo2.title) AS body,\n      '' as message_status,\n      'Notification' as `type`\n    FROM\n      patient_reminders AS pr\n      LEFT JOIN list_options AS lo\n        ON lo.option_id = pr.category\n        AND lo.list_id = 'rule_action_category' AND lo.activity = 1\n      LEFT JOIN list_options AS lo2\n        ON lo2.option_id = pr.item\n        AND lo2.list_id = 'rule_action' AND lo2.activity = 1\n    WHERE pid = ?\n      AND active = 1\n      AND date_created > DATE_SUB(NOW(), INTERVAL 1 MONTH)\n      $search\n    ORDER BY `date` desc\n    $limit\n  \";\n    $res = sqlStatement($sql, array($pid));\n    for ($iter = 0; $row = sqlFetchArray($res); $iter++) {\n        $all[$iter] = $row;\n    }\n\n    return $all;\n}\n\nfunction getPatientSentNotes($pid = '', $limit = '', $offset = 0, $search = '')\n{\n    if ($limit) {\n        $limit = \"LIMIT \" . escape_limit($offset) . \", \" . escape_limit($limit);\n    }\n\n    $sql = \"\n    SELECT\n      p.id,\n      p.date,\n      p.assigned_to,\n      p.title,\n      REPLACE(\n        p.body,\n        '-patient-',\n        CONCAT(pd.lname, ' ', pd.fname)\n      ) AS body,\n      p.activity,\n      p.message_status,\n      'Message' as `type`\n    FROM\n      pnotes AS p\n      LEFT JOIN patient_data AS pd\n        ON pd.id = p.pid\n    WHERE `user` = ?\n      AND p.deleted != 1\n      AND p.pid = ?\n      AND p.message_status != 'Done'\n      $search\n    ORDER BY `date` desc\n    $limit\n  \";\n    $res = sqlStatement($sql, array($pid,$pid));\n    for ($iter = 0; $row = sqlFetchArray($res); $iter++) {\n        $all[$iter] = $row;\n    }\n\n    return $all;\n}\n\n\n\n/** Add a note to a patient's medical record.\n *\n * @param int $pid the ID of the patient whos medical record this note is going to be attached to.\n * @param string $newtext the note contents.\n * @param int $authorized\n * @param int $activity\n * @param string $title\n * @param string $assigned_to\n * @param string $datetime\n * @param string $message_status\n * @param string $background_user if set then the pnote is created by a background-service rather than a user\n * @return int the ID of the added note.\n */\nfunction addPnote(\n    $pid,\n    $newtext,\n    $authorized = '0',\n    $activity = '1',\n    $title = 'Unassigned',\n    $assigned_to = '',\n    $datetime = '',\n    $message_status = 'New',\n    $background_user = \"\"\n) {\n\n    if (empty($datetime)) {\n        $datetime = date('Y-m-d H:i:s');\n    }\n\n  // make inactive if set as Done\n    if ($message_status == 'Done') {\n        $activity = 0;\n    }\n    $user = ($background_user != \"\" ? $background_user : $_SESSION['authUser']);\n    $body = date('Y-m-d H:i') . ' (' . $user;\n    if ($assigned_to) {\n        $body .= \" to $assigned_to\";\n    }\n\n    $body = $body . ') ' . $newtext;\n\n    return sqlInsert(\n        'INSERT INTO pnotes (date, body, pid, user, groupname, ' .\n        'authorized, activity, title, assigned_to, message_status, update_by, update_date) VALUES ' .\n        '(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())',\n        array($datetime, $body, $pid, $user, $_SESSION['authProvider'], $authorized, $activity, $title, $assigned_to, $message_status, $_SESSION['authUserID'])\n    );\n}\n\nfunction addMailboxPnote(\n    $pid,\n    $newtext,\n    $authorized = '0',\n    $activity = '1',\n    $title = 'Unassigned',\n    $assigned_to = '',\n    $datetime = '',\n    $message_status = \"New\"\n) {\n\n    if (empty($datetime)) {\n        $datetime = date('Y-m-d H:i:s');\n    }\n\n  // make inactive if set as Done\n    if ($message_status == \"Done\") {\n        $activity = 0;\n    }\n\n    $body = date('Y-m-d H:i') . ' (' . $pid;\n    if ($assigned_to) {\n        $body .= \" to $assigned_to\";\n    }\n\n    $body = $body . ') ' . $newtext;\n\n    return sqlInsert(\n        \"INSERT INTO pnotes (date, body, pid, user, groupname, \" .\n        \"authorized, activity, title, assigned_to, message_status, update_by, update_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())\",\n        array($datetime, $body, $pid, $pid, 'Default', $authorized, $activity, $title, $assigned_to, $message_status, $_SESSION['authUserID'])\n    );\n}\n\nfunction updatePnote($id, $newtext, $title, $assigned_to, $message_status = \"\", $datetime = \"\")\n{\n    $row = getPnoteById($id);\n    if (! $row) {\n        die(\"updatePnote() did not find id '\" . text($id) . \"'\");\n    }\n\n    if (empty($datetime)) {\n        $datetime = date('Y-m-d H:i:s');\n    }\n\n    $activity = $assigned_to ? '1' : '0';\n\n  // make inactive if set as Done\n    if ($message_status == \"Done\") {\n        $activity = 0;\n    }\n\n    $body = $row['body'] . \"\\n\" . date('Y-m-d H:i') .\n    ' (' . $_SESSION['authUser'];\n    if ($assigned_to) {\n        $body .= \" to $assigned_to\";\n    }\n\n    $body = $body . ') ' . $newtext;\n\n\n    $sql = \"UPDATE pnotes SET \" .\n        \"body = ?, activity = ?, title= ?, \" .\n        \"assigned_to = ?, update_by = ?, update_date = NOW()\";\n    $bindingParams =  array($body, $activity, $title, $assigned_to, $_SESSION['authUserID']);\n    if ($message_status) {\n        $sql .= \" ,message_status = ?\";\n        $bindingParams[] = $message_status;\n    }\n    if ($GLOBALS['messages_due_date']) {\n        $sql .= \" ,date = ?\";\n        $bindingParams[] = $datetime;\n    }\n    $sql .= \" WHERE id = ?\";\n    $bindingParams[] = $id;\n    sqlStatement($sql, $bindingParams);\n}\n\nfunction updatePnoteMessageStatus($id, $message_status)\n{\n    if ($message_status == \"Done\") {\n        sqlStatement(\"update pnotes set message_status = ?, activity = '0', update_by = ?, update_date = NOW() where id = ?\", array($message_status, $_SESSION['authUserID'], $id));\n    } else {\n        sqlStatement(\"update pnotes set message_status = ?, activity = '1', update_by = ?, update_date = NOW() where id = ?\", array($message_status, $_SESSION['authUserID'], $id));\n    }\n}\n\n/**\n * Set the patient id in an existing message where pid=0\n * @param $id the id of the existing note\n * @param $patient_id the patient id to associate with the note\n * @author EMR Direct <http://www.emrdirect.com/>\n */\nfunction updatePnotePatient($id, $patient_id)\n{\n    $row = getPnoteById($id);\n    if (! $row) {\n        die(\"updatePnotePatient() did not find id '\" . text($id) . \"'\");\n    }\n\n    $activity = $assigned_to ? '1' : '0';\n\n    $pid = $row['pid'];\n\n    if ($pid != 0 || (int)$patient_id < 1) {\n        (new SystemLogger())->errorLogCaller(\"invalid operation\", ['id' => $id, 'patient_id' => $patient_id, 'pid' => $pid]);\n        die(\"updatePnotePatient invalid operation\");\n    }\n\n    $pid = (int) $patient_id;\n    $newtext = \"\\n\" . date('Y-m-d H:i') . \" (patient set by \" . $_SESSION['authUser'] . \")\";\n    $body = $row['body'] . $newtext;\n\n    sqlStatement(\"UPDATE pnotes SET pid = ?, body = ?, update_by = ?, update_date = NOW() WHERE id = ?\", array($pid, $body, $_SESSION['authUserID'], $id));\n}\n\nfunction authorizePnote($id, $authorized = \"1\")\n{\n    sqlQuery(\"UPDATE pnotes SET authorized = ? , update_by = ?, update_date = NOW() WHERE id = ?\", array ($authorized, $_SESSION['authUserID'], $id));\n}\n\nfunction disappearPnote($id)\n{\n    sqlStatement(\"UPDATE pnotes SET activity = '0', message_status = 'Done', update_by = ?, update_date = NOW()  WHERE id=?\", array($_SESSION['authUserID'], $id));\n    return true;\n}\n\nfunction reappearPnote($id)\n{\n    sqlStatement(\"UPDATE pnotes SET activity = '1', message_status = IF(message_status='Done','New',message_status), update_by = ?, update_date = NOW() WHERE id=?\", array($_SESSION['authUserID'], $id));\n    return true;\n}\n\nfunction deletePnote($id)\n{\n    if (\n        getAssignedToById($id) == $_SESSION['authUser']\n        || getMessageStatusById($id) == 'Done'\n    ) {\n        sqlStatement(\"UPDATE pnotes SET deleted = '1', update_by = ?, update_date = NOW() WHERE id=?\", array($_SESSION['authUserID'], $id));\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Note that it is assumed that html escaping has happened before this function is called\nfunction pnoteConvertLinks($note)\n{\n    $noteActiveLink = preg_replace('!(https://[-a-zA-Z()0-9@:%_+.~#?&;//=]+)!i', '<a href=\"$1\" target=\"_blank\" rel=\"noopener\">$1</a>', $note);\n    if (empty($noteActiveLink)) {\n        // something bad happened (preg_replace returned null) or the $note was empty\n        return $note;\n    } else {\n        return $noteActiveLink;\n    }\n}\n\n/**\n * Retrieve assigned_to field given the note ID\n *\n * @param string $id the ID of the note to retrieve.\n */\nfunction getAssignedToById($id)\n{\n    $result = sqlQuery(\"SELECT assigned_to FROM pnotes WHERE id=?\", array($id));\n    return $result['assigned_to'];\n}\n\n/**\n * Retrieve message_status field given the note ID\n *\n * @param string $id the ID of the note to retrieve.\n */\nfunction getMessageStatusById($id)\n{\n    $result = sqlQuery(\"SELECT message_status FROM pnotes WHERE id=?\", array($id));\n    return $result['message_status'];\n}\n", "<?php\n\n/**\n *\n * Modified from interface/main/calendar/add_edit_event.php for\n * the patient portal.\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Rod Roark <rod@sunsetsystems.com>\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (C) 2005-2006 Rod Roark <rod@sunsetsystems.com>\n * @copyright Copyright (C) 2016-2021 Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n// Will start the (patient) portal OpenEMR session/cookie.\nrequire_once(__DIR__ . \"/../src/Common/Session/SessionUtil.php\");\nOpenEMR\\Common\\Session\\SessionUtil::portalSessionStart();\n\nrequire_once(\"./../library/pnotes.inc.php\");\n\n//landing page definition -- where to go if something goes wrong\n$landingpage = \"index.php?site=\" . urlencode($_SESSION['site_id']);\n//\n\n// kick out if patient not authenticated\nif (isset($_SESSION['pid']) && isset($_SESSION['patient_portal_onsite_two'])) {\n    $pid = $_SESSION['pid'];\n} else {\n    OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n    header('Location: ' . $landingpage . '&w');\n    exit;\n}\n\n$ignoreAuth_onsite_portal = true;\nglobal $ignoreAuth_onsite_portal;\n\nrequire_once(\"../interface/globals.php\");\nrequire_once(\"$srcdir/patient.inc.php\");\nrequire_once(\"$srcdir/forms.inc.php\");\nrequire_once(\"$srcdir/appointments.inc.php\");\n\nuse OpenEMR\\Core\\Header;\n\n// Things that might be passed by our opener.\n//\n$eid = $_GET['eid'] ?? null;         // only for existing events\n$date = $_GET['date'] ?? null;        // this and below only for new events\n$userid = $_GET['userid'] ?? null;\n$default_catid = ($_GET['catid'] ?? null) ? $_GET['catid'] : '5';\n$patientid = $_GET['patid'] ?? null;\n//\n\n// did someone tamper with eid?\n$checkEidInAppt = false;\n$patient_appointments = fetchAppointments('1970-01-01', '2382-12-31', $_SESSION['pid']);\n$checkEidInAppt = array_search($eid, array_column($patient_appointments, 'pc_eid'));\n\nif (!empty($eid) && !$checkEidInAppt) {\n    echo js_escape(\"error\");\n    exit();\n}\n\nif ($date) {\n    $date = substr($date, 0, 4) . '-' . substr($date, 4, 2) . '-' . substr($date, 6);\n} else {\n    $date = date(\"Y-m-d\");\n}\n\n//\n$starttimem = '00';\nif (isset($_GET['starttimem'])) {\n    $starttimem = substr('00' . $_GET['starttimem'], -2);\n}\n\n//\nif (isset($_GET['starttimeh'])) {\n    $starttimeh = $_GET['starttimeh'];\n    if (isset($_GET['startampm'])) {\n        if ($_GET['startampm'] == '2' && $starttimeh < 12) {\n            $starttimeh += 12;\n        }\n    }\n} else {\n    $starttimeh = date(\"G\");\n}\n\n$startampm = '';\n\n$info_msg = \"\";\n\n// EVENTS TO FACILITIES (lemonsoftware)\n//(CHEMED) get facility name\n// edit event case - if there is no association made, then insert one with the first facility\nif ($eid) {\n    $selfacil = '';\n    $facility = sqlQuery(\"SELECT pc_facility, pc_multiple, pc_aid, facility.name\n                        FROM openemr_postcalendar_events\n                          LEFT JOIN facility ON (openemr_postcalendar_events.pc_facility = facility.id)\n                          WHERE pc_eid = ?\", array($eid));\n    if (!$facility['pc_facility']) {\n        $qmin = sqlQuery(\"SELECT facility_id as minId, facility FROM users WHERE id = ?\", array($facility['pc_aid']));\n        $min = $qmin['minId'];\n        $min_name = $qmin['facility'];\n\n        // multiple providers case\n        if ($GLOBALS['select_multi_providers']) {\n            $mul = $facility['pc_multiple'];\n            sqlStatement(\"UPDATE openemr_postcalendar_events SET pc_facility = ? WHERE pc_multiple = ?\", array($min, $mul));\n        }\n\n        // EOS multiple\n\n        sqlStatement(\"UPDATE openemr_postcalendar_events SET pc_facility = ? WHERE pc_eid = ?\", array($min, $eid));\n        $e2f = $min;\n        $e2f_name = $min_name;\n    } else {\n        $e2f = $facility['pc_facility'];\n        $e2f_name = $facility['name'];\n    }\n}\n\n// EOS E2F\n// ===========================\n\n\n// If we are saving, then save and close the window.\n//\nif (($_POST['form_action'] ?? null) == \"save\") {\n//print_r($_POST);\n//exit();\n    $event_date = fixDate($_POST['form_date']);\n\n// Compute start and end time strings to be saved.\n    if ($_POST['form_allday']) {\n        $tmph = 0;\n        $tmpm = 0;\n        $duration = 24 * 60;\n    } else {\n        $tmph = $_POST['form_hour'] + 0;\n        $tmpm = $_POST['form_minute'] + 0;\n        if ($_POST['form_ampm'] == '2' && $tmph < 12) {\n            $tmph += 12;\n        }\n\n        $duration = $_POST['form_duration'];\n    }\n\n    $starttime = \"$tmph:$tmpm:00\";\n//\n    $tmpm += $duration;\n    while ($tmpm >= 60) {\n        $tmpm -= 60;\n        ++$tmph;\n    }\n\n    $endtime = \"$tmph:$tmpm:00\";\n\n// Useless garbage that we must save.\n    $locationspec = 'a:6:{s:14:\"event_location\";N;s:13:\"event_street1\";N;' .\n        's:13:\"event_street2\";N;s:10:\"event_city\";N;s:11:\"event_state\";N;s:12:\"event_postal\";N;}';\n\n// More garbage, but this time 1 character of it is used to save the\n// repeat type.\n    if ($_POST['form_repeat']) {\n        $recurrspec = 'a:5:{' .\n            's:17:\"event_repeat_freq\";s:1:\"' . $_POST['form_repeat_freq'] . '\";' .\n            's:22:\"event_repeat_freq_type\";s:1:\"' . $_POST['form_repeat_type'] . '\";' .\n            's:19:\"event_repeat_on_num\";s:1:\"1\";' .\n            's:19:\"event_repeat_on_day\";s:1:\"0\";' .\n            's:20:\"event_repeat_on_freq\";s:1:\"0\";}';\n    } else {\n        $recurrspec = 'a:5:{' .\n            's:17:\"event_repeat_freq\";N;' .\n            's:22:\"event_repeat_freq_type\";s:1:\"0\";' .\n            's:19:\"event_repeat_on_num\";s:1:\"1\";' .\n            's:19:\"event_repeat_on_day\";s:1:\"0\";' .\n            's:20:\"event_repeat_on_freq\";s:1:\"1\";}';\n    }\n\n//The modification of the start date for events that take place on one day of the week\n//for example monday, or thursday. We set the start date on the first day of the week\n//that the event is scheduled. For example if you set the event to repeat on each monday\n//the start date of the event will be set on the first monday after the day the event is scheduled\n    if ($_POST['form_repeat_type'] == 5) {\n        $exploded_date = explode(\"-\", $event_date);\n        $edate = date(\"D\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2], $exploded_date[0]));\n        if ($edate == \"Tue\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 6, $exploded_date[0]));\n        } elseif ($edate == \"Wed\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 5, $exploded_date[0]));\n        } elseif ($edate == \"Thu\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 4, $exploded_date[0]));\n        } elseif ($edate == \"Fri\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 3, $exploded_date[0]));\n        } elseif ($edate == \"Sat\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 2, $exploded_date[0]));\n        } elseif ($edate == \"Sun\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 1, $exploded_date[0]));\n        }\n    } elseif ($_POST['form_repeat_type'] == 6) {\n        $exploded_date = explode(\"-\", $event_date);\n        $edate = date(\"D\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2], $exploded_date[0]));\n        if ($edate == \"Wed\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 6, $exploded_date[0]));\n        } elseif ($edate == \"Thu\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 5, $exploded_date[0]));\n        } elseif ($edate == \"Fri\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 4, $exploded_date[0]));\n        } elseif ($edate == \"Sat\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 3, $exploded_date[0]));\n        } elseif ($edate == \"Sun\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 2, $exploded_date[0]));\n        } elseif ($edate == \"Mon\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 1, $exploded_date[0]));\n        }\n    } elseif ($_POST['form_repeat_type'] == 7) {\n        $exploded_date = explode(\"-\", $event_date);\n        $edate = date(\"D\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2], $exploded_date[0]));\n        if ($edate == \"Thu\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 6, $exploded_date[0]));\n        } elseif ($edate == \"Fri\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 5, $exploded_date[0]));\n        } elseif ($edate == \"Sat\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 4, $exploded_date[0]));\n        } elseif ($edate == \"Sun\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 3, $exploded_date[0]));\n        } elseif ($edate == \"Mon\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 2, $exploded_date[0]));\n        } elseif ($edate == \"Tue\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 1, $exploded_date[0]));\n        }\n    } elseif ($_POST['form_repeat_type'] == 8) {\n        $exploded_date = explode(\"-\", $event_date);\n        $edate = date(\"D\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2], $exploded_date[0]));\n        if ($edate == \"Fri\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 6, $exploded_date[0]));\n        } elseif ($edate == \"Sat\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 5, $exploded_date[0]));\n        } elseif ($edate == \"Sun\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 4, $exploded_date[0]));\n        } elseif ($edate == \"Mon\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 3, $exploded_date[0]));\n        } elseif ($edate == \"Tue\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 2, $exploded_date[0]));\n        } elseif ($edate == \"Wed\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 1, $exploded_date[0]));\n        }\n    } elseif ($_POST['form_repeat_type'] == 9) {\n        $exploded_date = explode(\"-\", $event_date);\n        $edate = date(\"D\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2], $exploded_date[0]));\n        if ($edate == \"Sat\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 6, $exploded_date[0]));\n        } elseif ($edate == \"Sun\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 5, $exploded_date[0]));\n        } elseif ($edate == \"Mon\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 4, $exploded_date[0]));\n        } elseif ($edate == \"Tue\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 3, $exploded_date[0]));\n        } elseif ($edate == \"Wed\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 2, $exploded_date[0]));\n        } elseif ($edate == \"Thu\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 1, $exploded_date[0]));\n        }\n    }//if end\n    /* =======================================================\n    //                                  UPDATE EVENTS\n    ========================================================*/\n    if ($eid) {\n        // what is multiple key around this $eid?\n        $row = sqlQuery(\"SELECT pc_multiple FROM openemr_postcalendar_events WHERE pc_eid = ?\", array($eid));\n\n        if ($GLOBALS['select_multi_providers'] && $row['pc_multiple']) {\n            /* ==========================================\n            // multi providers BOS\n            ==========================================*/\n\n            // obtain current list of providers regarding the multiple key\n            $up = sqlStatement(\"SELECT pc_aid FROM openemr_postcalendar_events WHERE pc_multiple = ?\", array($row['pc_multiple']));\n            while ($current = sqlFetchArray($up)) {\n                $providers_current[] = $current['pc_aid'];\n            }\n\n            $providers_new = $_POST['form_provider_ae'];\n\n            // this difference means that some providers from current was UNCHECKED\n            // so we must delete this event for them\n            $r1 = array_diff($providers_current, $providers_new);\n            if (count($r1)) {\n                foreach ($r1 as $to_be_removed) {\n                    sqlQuery(\"DELETE FROM openemr_postcalendar_events WHERE pc_aid = ? AND pc_multiple = ?\", array($to_be_removed, $row['pc_multiple']));\n                }\n            }\n\n            // this difference means that some providers was added\n            // so we must insert this event for them\n            $r2 = array_diff($providers_new, $providers_current);\n            if (count($r2)) {\n                foreach ($r2 as $to_be_inserted) {\n                    sqlStatement(\"INSERT INTO openemr_postcalendar_events ( pc_catid, pc_multiple, pc_aid, pc_pid, pc_title, pc_time, pc_hometext, pc_informant, pc_eventDate, pc_endDate, pc_duration, pc_recurrtype, pc_recurrspec, pc_startTime, pc_endTime, pc_alldayevent, pc_apptstatus, pc_prefcatid, pc_location, pc_eventstatus, pc_sharing, pc_facility)\n            VALUES ( \" .\n                        \"'\" . add_escape_custom($_POST['form_category']) . \"', \" .\n                        \"'\" . add_escape_custom($row['pc_multiple']) . \"', \" .\n                        \"'\" . add_escape_custom($to_be_inserted) . \"', \" .\n                        \"'\" . add_escape_custom($_POST['form_pid']) . \"', \" .\n                        \"'\" . add_escape_custom($_POST['form_title']) . \"', \" .\n                        \"NOW(), \" .\n                        \"'\" . add_escape_custom($_POST['form_comments']) . \"', \" .\n                        \"'\" . add_escape_custom($_SESSION['providerId']) . \"', \" .\n                        \"'\" . add_escape_custom($event_date) . \"', \" .\n                        \"'\" . add_escape_custom(fixDate($_POST['form_enddate'])) . \"', \" .\n                        \"'\" . add_escape_custom(($duration * 60)) . \"', \" .\n                        \"'\" . ($_POST['form_repeat'] ? '1' : '0') . \"', \" .\n                        \"'\" . add_escape_custom($recurrspec) . \"', \" .\n                        \"'\" . add_escape_custom($starttime) . \"', \" .\n                        \"'\" . add_escape_custom($endtime) . \"', \" .\n                        \"'\" . add_escape_custom($_POST['form_allday']) . \"', \" .\n                        \"'\" . add_escape_custom($_POST['form_apptstatus']) . \"', \" .\n                        \"'\" . add_escape_custom($_POST['form_prefcat']) . \"', \" .\n                        \"'\" . add_escape_custom($locationspec) . \"', \" .\n                        \"1, \" .\n                        \"1, \" . (int)$_POST['facility'] . \" )\"); // FF stuff\n                } // foreach\n            } //if count\n\n\n            // after the two diffs above, we must update for remaining providers\n            // those who are intersected in $providers_current and $providers_new\n            foreach ($_POST['form_provider_ae'] as $provider) {\n                sqlStatement(\"UPDATE openemr_postcalendar_events SET \" .\n                    \"pc_catid = '\" . add_escape_custom($_POST['form_category']) . \"', \" .\n                    \"pc_pid = '\" . add_escape_custom($_POST['form_pid']) . \"', \" .\n                    \"pc_title = '\" . add_escape_custom($_POST['form_title']) . \"', \" .\n                    \"pc_time = NOW(), \" .\n                    \"pc_hometext = '\" . add_escape_custom($_POST['form_comments']) . \"', \" .\n                    \"pc_informant = '\" . add_escape_custom($_SESSION['providerId']) . \"', \" .\n                    \"pc_eventDate = '\" . add_escape_custom($event_date) . \"', \" .\n                    \"pc_endDate = '\" . add_escape_custom(fixDate($_POST['form_enddate'])) . \"', \" .\n                    \"pc_duration = '\" . add_escape_custom(($duration * 60)) . \"', \" .\n                    \"pc_recurrtype = '\" . ($_POST['form_repeat'] ? '1' : '0') . \"', \" .\n                    \"pc_recurrspec = '\" . add_escape_custom($recurrspec) . \"', \" .\n                    \"pc_startTime = '\" . add_escape_custom($starttime) . \"', \" .\n                    \"pc_endTime = '\" . add_escape_custom($endtime) . \"', \" .\n                    \"pc_alldayevent = '\" . add_escape_custom($_POST['form_allday']) . \"', \" .\n                    \"pc_apptstatus = '\" . add_escape_custom($_POST['form_apptstatus']) . \"', \" .\n                    \"pc_prefcatid = '\" . add_escape_custom($_POST['form_prefcat']) . \"', \" .\n                    \"pc_facility = '\" . (int)$_POST['facility'] . \"' \" . // FF stuff\n                    \"WHERE pc_aid = '\" . add_escape_custom($provider) . \"' AND pc_multiple='\" . add_escape_custom($row['pc_multiple']) . \"'\");\n            } // foreach\n\n            /* ==========================================\n          // multi providers EOS\n            ==========================================*/\n        } elseif (!$row['pc_multiple']) {\n            if ($GLOBALS['select_multi_providers']) {\n                $prov = $_POST['form_provider_ae'][0];\n            } else {\n                $prov = $_POST['form_provider_ae'];\n            }\n            $insert = false;\n            // simple provider case\n            sqlStatement(\"UPDATE openemr_postcalendar_events SET \" .\n                \"pc_catid = '\" . add_escape_custom($_POST['form_category']) . \"', \" .\n                \"pc_aid = '\" . add_escape_custom($prov) . \"', \" .\n                \"pc_pid = '\" . add_escape_custom($_POST['form_pid']) . \"', \" .\n                \"pc_title = '\" . add_escape_custom($_POST['form_title']) . \"', \" .\n                \"pc_time = NOW(), \" .\n                \"pc_hometext = '\" . add_escape_custom($_POST['form_comments']) . \"', \" .\n                \"pc_informant = '\" . add_escape_custom($_SESSION['providerId']) . \"', \" .\n                \"pc_eventDate = '\" . add_escape_custom($event_date) . \"', \" .\n                \"pc_endDate = '\" . add_escape_custom(fixDate($_POST['form_enddate'])) . \"', \" .\n                \"pc_duration = '\" . add_escape_custom(($duration * 60)) . \"', \" .\n                \"pc_recurrtype = '\" . ($_POST['form_repeat'] ? '1' : '0') . \"', \" .\n                \"pc_recurrspec = '\" . add_escape_custom($recurrspec) . \"', \" .\n                \"pc_startTime = '\" . add_escape_custom($starttime) . \"', \" .\n                \"pc_endTime = '\" . add_escape_custom($endtime) . \"', \" .\n                \"pc_alldayevent = '\" . add_escape_custom($_POST['form_allday']) . \"', \" .\n                \"pc_apptstatus = '\" . add_escape_custom($_POST['form_apptstatus']) . \"', \" .\n                \"pc_prefcatid = '\" . add_escape_custom($_POST['form_prefcat']) . \"', \" .\n                \"pc_facility = '\" . (int)$_POST['facility'] . \"' \" . // FF stuff\n                \"WHERE pc_eid = '\" . add_escape_custom($eid) . \"'\");\n        }\n\n        // =======================================\n        // EOS multi providers case\n        // =======================================\n\n        // EVENTS TO FACILITIES\n\n        $e2f = (int)$eid;\n\n        /* =======================================================\n      //                                  INSERT EVENTS\n        ========================================================*/\n    } else {\n        // =======================================\n        // multi providers case\n        // =======================================\n\n        if (is_array($_POST['form_provider_ae'])) {\n            // obtain the next available unique key to group multiple providers around some event\n            $q = sqlStatement(\"SELECT MAX(pc_multiple) as max FROM openemr_postcalendar_events\");\n            $max = sqlFetchArray($q);\n            $new_multiple_value = $max['max'] + 1;\n\n            foreach ($_POST['form_provider_ae'] as $provider) {\n                sqlStatement(\"INSERT INTO openemr_postcalendar_events ( \" .\n                    \"pc_catid, pc_multiple, pc_aid, pc_pid, pc_title, pc_time, pc_hometext, \" .\n                    \"pc_informant, pc_eventDate, pc_endDate, pc_duration, pc_recurrtype, \" .\n                    \"pc_recurrspec, pc_startTime, pc_endTime, pc_alldayevent, \" .\n                    \"pc_apptstatus, pc_prefcatid, pc_location, pc_eventstatus, pc_sharing, pc_facility \" .\n                    \") VALUES ( \" .\n                    \"'\" . add_escape_custom($_POST['form_category']) . \"', \" .\n                    \"'\" . add_escape_custom($new_multiple_value) . \"', \" .\n                    \"'\" . add_escape_custom($provider) . \"', \" .\n                    \"'\" . add_escape_custom($_POST['form_pid']) . \"', \" .\n                    \"'\" . add_escape_custom($_POST['form_title']) . \"', \" .\n                    \"NOW(), \" .\n                    \"'\" . add_escape_custom($_POST['form_comments']) . \"', \" .\n                    \"'\" . add_escape_custom($_SESSION['providerId']) . \"', \" .\n                    \"'\" . add_escape_custom($event_date) . \"', \" .\n                    \"'\" . add_escape_custom(fixDate($_POST['form_enddate'])) . \"', \" .\n                    \"'\" . add_escape_custom(($duration * 60)) . \"', \" .\n                    \"'\" . ($_POST['form_repeat'] ? '1' : '0') . \"', \" .\n                    \"'\" . add_escape_custom($recurrspec) . \"', \" .\n                    \"'\" . add_escape_custom($starttime) . \"', \" .\n                    \"'\" . add_escape_custom($endtime) . \"', \" .\n                    \"'\" . add_escape_custom($_POST['form_allday']) . \"', \" .\n                    \"'\" . add_escape_custom($_POST['form_apptstatus']) . \"', \" .\n                    \"'\" . add_escape_custom($_POST['form_prefcat']) . \"', \" .\n                    \"'\" . add_escape_custom($locationspec) . \"', \" .\n                    \"1, \" .\n                    \"1, \" . (int)$_POST['facility'] . \" )\"); // FF stuff\n            } // foreach\n        } else {\n            $_POST['form_apptstatus'] = '^';\n            $insert = true;\n            sqlStatement(\"INSERT INTO openemr_postcalendar_events ( \" .\n                \"pc_catid, pc_aid, pc_pid, pc_title, pc_time, pc_hometext, \" .\n                \"pc_informant, pc_eventDate, pc_endDate, pc_duration, pc_recurrtype, \" .\n                \"pc_recurrspec, pc_startTime, pc_endTime, pc_alldayevent, \" .\n                \"pc_apptstatus, pc_prefcatid, pc_location, pc_eventstatus, pc_sharing, pc_facility \" .\n                \") VALUES ( \" .\n                \"'\" . add_escape_custom($_POST['form_category']) . \"', \" .\n                \"'\" . add_escape_custom($_POST['form_provider_ae']) . \"', \" .\n                \"'\" . add_escape_custom($_POST['form_pid']) . \"', \" .\n                \"'\" . add_escape_custom($_POST['form_title']) . \"', \" .\n                \"NOW(), \" .\n                \"'\" . add_escape_custom($_POST['form_comments']) . \"', \" .\n                \"'\" . add_escape_custom($_SESSION['providerId']) . \"', \" .\n                \"'\" . add_escape_custom($event_date) . \"', \" .\n                \"'\" . add_escape_custom(fixDate($_POST['form_enddate'])) . \"', \" .\n                \"'\" . add_escape_custom(($duration * 60)) . \"', \" .\n                \"'\" . ($_POST['form_repeat'] ? '1' : '0') . \"', \" .\n                \"'\" . add_escape_custom($recurrspec) . \"', \" .\n                \"'\" . add_escape_custom($starttime) . \"', \" .\n                \"'\" . add_escape_custom($endtime) . \"', \" .\n                \"'\" . add_escape_custom($_POST['form_allday']) . \"', \" .\n                \"'\" . add_escape_custom($_POST['form_apptstatus']) . \"', \" .\n                \"'\" . add_escape_custom($_POST['form_prefcat']) . \"', \" .\n                \"'\" . add_escape_custom($locationspec) . \"', \" .\n                \"1, \" .\n                \"1, \" . (int)$_POST['facility'] . \")\"); // FF stuff\n        } // INSERT single\n    } // else - insert\n} elseif (($_POST['form_action'] ?? null) == \"delete\") {\n// =======================================\n//  multi providers case\n// =======================================\n    if ($GLOBALS['select_multi_providers']) {\n        // what is multiple key around this $eid?\n        $row = sqlQuery(\"SELECT pc_multiple FROM openemr_postcalendar_events WHERE pc_eid = ?\", array($eid));\n        if ($row['pc_multiple']) {\n            sqlStatement(\"DELETE FROM openemr_postcalendar_events WHERE pc_multiple = ?\", array($row['pc_multiple']));\n        } else {\n            sqlStatement(\"DELETE FROM openemr_postcalendar_events WHERE pc_eid = ?\", array($eid));\n        }\n\n        // =======================================\n        //  EOS multi providers case\n        // =======================================\n    } else {\n        sqlStatement(\"DELETE FROM openemr_postcalendar_events WHERE pc_eid = ?\", array($eid));\n    }\n}\n\nif (!empty($_POST['form_action'])) {\n    // Leave\n    $type = $insert ? xl(\"A New Appointment\") : xl(\"An Updated Appointment\");\n    $note = $type . \" \" . xl(\"request was received from portal patient\") . \" \";\n    $note .= $_SESSION['ptName'] . \" \" . xl(\"regarding appointment dated\") . \" \" . $event_date . \" \" . $starttime . \". \";\n    $note .= !empty($_POST['form_comments']) ? (xl(\"Reason\") . \" \" . $_POST['form_comments']) : \"\";\n    $note .= \". \" . xl(\"Use Portal Dashboard to confirm with patient.\");\n    $title = xl(\"Patient Reminders\");\n    $user = sqlQueryNoLog(\"SELECT users.username FROM users WHERE authorized = 1 And id = ?\", array($_POST['form_provider_ae']));\n    $rtn = addPnote($_POST['form_pid'], $note, 1, 1, $title, $user['username'], '', 'New');\n\n    $_SESSION['whereto'] = '#appointmentcard';\n    header('Location:./home.php');\n    exit();\n}\n\n// If we get this far then we are displaying the form.\n\n$statuses = array(\n    '-' => '',\n    '*' => xl('* Reminder done'),\n    '+' => xl('+ Chart pulled'),\n    'x' => xl('x Cancelled'), // added Apr 2008 by JRM\n    '?' => xl('? No show'),\n    '@' => xl('@ Arrived'),\n    '~' => xl('~ Arrived late'),\n    '!' => xl('! Left w/o visit'),\n    '#' => xl('# Ins/fin issue'),\n    '<' => xl('< In exam room'),\n    '>' => xl('> Checked out'),\n    '$' => xl('$ Coding done'),\n    '^' => xl('^ Pending'),\n);\n\n$repeats = 0; // if the event repeats\n$repeattype = '0';\n$repeatfreq = '0';\n$patienttitle = \"\";\n$hometext = \"\";\n$row = array();\n\n// If we are editing an existing event, then get its data.\nif ($eid) {\n    $row = sqlQuery(\"SELECT * FROM openemr_postcalendar_events WHERE pc_eid = ?\", array($eid));\n    $date = $row['pc_eventDate'];\n    $userid = $row['pc_aid'];\n    $patientid = $row['pc_pid'];\n    $starttimeh = substr($row['pc_startTime'], 0, 2) + 0;\n    $starttimem = substr($row['pc_startTime'], 3, 2);\n    $repeats = $row['pc_recurrtype'];\n    $multiple_value = $row['pc_multiple'];\n\n    if (preg_match('/\"event_repeat_freq_type\";s:1:\"(\\d)\"/', $row['pc_recurrspec'], $matches)) {\n        $repeattype = $matches[1];\n    }\n\n    if (preg_match('/\"event_repeat_freq\";s:1:\"(\\d)\"/', $row['pc_recurrspec'], $matches)) {\n        $repeatfreq = $matches[1];\n    }\n\n    $hometext = $row['pc_hometext'];\n    if (substr($hometext, 0, 6) == ':text:') {\n        $hometext = substr($hometext, 6);\n    }\n} else {\n    $patientid = $_GET['pid'];\n}\n\n// If we have a patient ID, get the name and phone numbers to display.\nif ($patientid) {\n    $prow = sqlQuery(\"SELECT lname, fname, phone_home, phone_biz, DOB \" .\n        \"FROM patient_data WHERE pid = ?\", array($patientid));\n    $patientname = $prow['lname'] . \", \" . $prow['fname'];\n    if ($prow['phone_home']) {\n        $patienttitle .= \" H=\" . $prow['phone_home'];\n    }\n\n    if ($prow['phone_biz']) {\n        $patienttitle .= \" W=\" . $prow['phone_biz'];\n    }\n}\n\n// Get the providers list.\n$ures = sqlStatement(\"SELECT `id`, `username`, `fname`, `lname`, `mname` FROM `users` WHERE \" .\n    \"`authorized` != 0 AND `active` = 1 AND `username` > '' ORDER BY `lname`, `fname`\");\n\n//Set default facility for a new event based on the given 'userid'\nif ($userid) {\n    $pref_facility = sqlFetchArray(sqlStatement(\"SELECT facility_id, facility FROM users WHERE id = ?\", array($userid)));\n    $e2f = $pref_facility['facility_id'];\n    $e2f_name = $pref_facility['facility'];\n}\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title><?php echo $eid ? xlt(\"Edit Event\") : xlt(\"Add New Event\"); ?></title>\n    <?php // no header necessary. scope is home.php ?>\n</head>\n<script>\n    var durations = Array();\n    <?php\n    // Read the event categories, generate their options list, and get\n    // the default event duration from them if this is a new event.\n    $cattype = 0;\n\n    // Get event categories.\n    $cres = sqlStatement(\"SELECT pc_catid, pc_cattype, pc_catname, \" .\n        \"pc_recurrtype, pc_duration, pc_end_all_day \" .\n        \"FROM openemr_postcalendar_categories where pc_active = 1 ORDER BY pc_seq\");\n    $catoptions = \"\";\n    $prefcat_options = \"    <option value='0'>-- \" . xlt(\"None{{Category}}\") . \" --</option>\\n\";\n    $thisduration = 0;\n    if ($eid) {\n        $thisduration = $row['pc_alldayevent'] ? 1440 : round($row['pc_duration'] / 60);\n    }\n    while ($crow = sqlFetchArray($cres)) {\n        $duration = round($crow['pc_duration'] / 60);\n        if ($crow['pc_end_all_day']) {\n            $duration = 1440;\n        }\n\n        // This section is to build the list of preferred categories:\n        if ($duration) {\n            $prefcat_options .= \" <option value='\" . attr($crow['pc_catid']) . \"'\";\n            if ($eid) {\n                if ($crow['pc_catid'] == $row['pc_prefcatid']) {\n                    $prefcat_options .= \" selected\";\n                }\n            }\n\n            $prefcat_options .= \">\" . text(xl_appt_category($crow['pc_catname'])) . \"</option>\\n\";\n        }\n\n        if ($crow['pc_cattype'] != $cattype) {\n            continue;\n        }\n\n        echo \" durations[\" . attr($crow['pc_catid']) . \"] = \" . attr($duration) . \";\\n\";\n        // echo \" rectypes[\" . $crow['pc_catid'] . \"] = \" . $crow['pc_recurrtype'] . \"\\n\";\n        $catoptions .= \"    <option value='\" . attr($crow['pc_catid']) . \"'\";\n        if ($eid) {\n            if ($crow['pc_catid'] == $row['pc_catid']) {\n                $catoptions .= \" selected\";\n            }\n        } else {\n            if ($crow['pc_catid'] == $default_catid) {\n                $catoptions .= \" selected\";\n                $thisduration = $duration;\n            }\n        }\n\n        $catoptions .= \">\" . text(xl_appt_category($crow['pc_catname'])) . \"</option>\\n\";\n    }\n    // Fix up the time format for AM/PM.\n    $startampm = '1';\n    if ($starttimeh >= 12) { // p.m. starts at noon and not 12:01\n        $startampm = '2';\n        if ($starttimeh > 12) {\n            $starttimeh -= 12;\n        }\n    }\n\n    ?>\n</script>\n<body class=\"skin-blue\">\n    <div class=\"container-fluid\">\n        <form method='post' name='theaddform' id='theaddform' action='add_edit_event_user.php?eid=<?php echo attr_url($eid); ?>'>\n            <div class=\"col-12\">\n                <input type=\"hidden\" name=\"form_action\" id=\"form_action\" value=\"\" />\n                <input type='hidden' name='form_title' id='form_title' value='<?php echo $row['pc_catid'] ? attr($row['pc_title']) : xla(\"Office Visit\"); ?>' />\n                <input type='hidden' name='form_apptstatus' id='form_apptstatus' value='<?php echo $row['pc_apptstatus'] ? attr($row['pc_apptstatus']) : \"^\" ?>' />\n                <div class=\"row form-group\">\n                    <div class=\"input-group col-12 col-md-6\">\n                        <label class=\"mr-2\" for=\"form_category\"><?php echo xlt('Visit'); ?>:</label>\n                        <select class=\"form-control mb-1\" onchange='set_category()' id='form_category' name='form_category' value='<?php echo ($row['pc_catid'] > \"\") ? attr($row['pc_catid']) : '5'; ?>'>\n                            <?php echo $catoptions ?>\n                        </select>\n                    </div>\n                    <div class=\"input-group col-12 col-md-6\">\n                        <label class=\"mr-2\" for=\"form_date\"><?php echo xlt('Date'); ?>:</label>\n                        <input class=\"form-control mb-1\" type='text' name='form_date' readonly id='form_date' value='<?php echo (isset($eid) && $eid) ? attr($row['pc_eventDate']) : attr($date); ?>' />\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"form-group form-inline col-12\">\n                        <div class=\"input-group mb-1\">\n                            <label class=\"mr-2\"><?php echo xlt('Time'); ?>:</label>\n                            <input class=\"form-control col-2 col-md-3\" type='text' name='form_hour' size='2' value='<?php echo (isset($eid)) ? $starttimeh : ''; ?>' title='<?php echo xla('Event start time'); ?>' readonly />\n                            <input class=\"form-control col-2 col-md-3\" type='text' name='form_minute' size='2' value='<?php echo (isset($eid)) ? $starttimem : ''; ?>' title='<?php echo xla('Event start time'); ?>' readonly />\n                            <select class=\"form-control col-3 col-md-4\" name='form_ampm' title='Note: 12:00 noon is PM, not AM' readonly>\n                                <option value='1'><?php echo xlt('AM'); ?></option>\n                                <option value='2'<?php echo ($startampm == '2') ? \" selected\" : \"\"; ?>><?php echo xlt('PM'); ?></option>\n                            </select>\n                        </div>\n                        <div class=\"input-group\">\n                            <label class=\"mr-2\" for=\"form_duration\"><?php echo xlt('Duration'); ?></label>\n                            <input class=\"form-control\" type='text' size='1' id='form_duration' name='form_duration' value='<?php echo $row['pc_duration'] ? ($row['pc_duration'] * 1 / 60) : attr($thisduration) ?>' readonly />\n                            <span class=\"input-group-append\">\n                            <span class=\"input-group-text\"><?php echo \"&nbsp;\" . xlt('minutes'); ?></span>\n                        </span>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"input-group col-12 mb-1\">\n                        <label class=\"mr-2\" for=\"form_patient\"><?php echo xlt('Patient'); ?>:</label>\n                        <input class=\"form-control\" type='text' id='form_patient' name='form_patient' value='<?php echo attr($patientname); ?>' title='Patient' readonly />\n                        <input type='hidden' name='form_pid' value='<?php echo attr($patientid); ?>' />\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"input-group col-12 mb-1\">\n                        <label class=\"mr-2\" for=\"form_provider_ae\"><?php echo xlt('Provider'); ?>:</label>\n                        <select class=\"form-control\" name='form_provider_ae' id='form_provider_ae' onchange='change_provider();'>\n                            <?php\n                            // present a list of providers to choose from\n                            // default to the currently logged-in user\n                            while ($urow = sqlFetchArray($ures)) {\n                                echo \"<option value='\" . attr($urow['id']) . \"'\";\n                                if (($urow['id'] == ($_GET['userid'] ?? null)) || ($urow['id'] == $userid)) {\n                                    echo \" selected\";\n                                }\n                                echo \">\" . text($urow['lname']);\n                                if ($urow['fname']) {\n                                    echo \", \" . text($urow['fname']);\n                                }\n                                echo \"</option>\\n\";\n                            }\n                            ?>\n                        </select>\n                        <div class=\"text-right\">\n                            <input type='button' class='btn btn-success' value='<?php echo xla('Openings'); ?>' onclick='find_available()' />\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"input-group col-12\">\n                        <label class=\"mr-2\"><?php echo xlt('Reason'); ?>:</label>\n                        <input class=\"form-control\" type='text' size='40' name='form_comments' value='<?php echo attr($hometext); ?>' title='<?php echo xla('Optional information about this event'); ?>' />\n                    </div>\n                </div>\n                <div class=\"row input-group my-1\">\n                    <?php if ($_GET['eid'] && $row['pc_apptstatus'] !== 'x') { ?>\n                        <input type='button' id='form_cancel' class='btn btn-danger' onsubmit='return false' value='<?php echo xla('Cancel Appointment'); ?>' onclick=\"cancel_appointment()\" />\n                    <?php } ?>\n                    <input type='button' name='form_save' class='btn btn-success' onsubmit='return false' value='<?php echo xla('Save'); ?>' onclick=\"validate()\" />\n                </div>\n            </div>\n        </form>\n        <script>\n            function change_provider() {\n                var f = document.forms.namedItem(\"theaddform\");\n                f.form_date.value = '';\n                f.form_hour.value = '';\n                f.form_minute.value = '';\n            }\n\n            function set_display() {\n                var f = document.forms.namedItem(\"theaddform\");\n                var si = document.getElementById('form_category');\n                if (si.selectedIndex >= 0) {\n                    var catid = si.options[si.selectedIndex].value;\n                    //var style_apptstatus = document.getElementById('title_apptstatus').style;\n                    //var style_prefcat = document.getElementById('title_prefcat').style;\n                    // will keep this for future. not needed now.\n                }\n            }\n\n            function cancel_appointment() {\n                let f = document.forms.namedItem(\"theaddform\");\n                let msg = <?php echo xlj(\"Click Okay if you are sure you want to cancel this appointment?\") . \"\\n\" .\n                    xlj(\"It is prudent to follow up with provider if not contacted.\") ?>;\n                let msg_reason = <?php echo xlj(\"You must enter a reason to cancel this appointment?\") . \"\\n\" .\n                    xlj(\"Reason must be at least 10 characters!\") ?>;\n                if (f.form_comments.value.length <= 10) {\n                    alert(msg_reason);\n                    return false;\n                }\n                let yn = confirm(msg);\n                if (!yn) {\n                    return false;\n                }\n                document.getElementById('form_apptstatus').value = \"x\";\n                validate();\n            }\n\n            // Do whatever is needed when a new event category is selected.\n            // For now this means changing the event title and duration.\n            function set_category() {\n                var f = document.forms.namedItem(\"theaddform\");\n                var s = f.form_category;\n                if (s.selectedIndex >= 0) {\n                    var catid = s.options[s.selectedIndex].value;\n                    f.form_title.value = s.options[s.selectedIndex].text;\n                    f.form_duration.value = durations[catid];\n                    set_display();\n                }\n            }\n\n            // This is for callback by the find-available popup.\n            function setappt(year, mon, mday, hours, minutes) {\n                var f = document.forms.namedItem(\"theaddform\");\n                f.form_date.value = '' + year + '-' +\n                    ('' + (mon + 100)).substring(1) + '-' +\n                    ('' + (mday + 100)).substring(1);\n                f.form_ampm.selectedIndex = (hours > 12) ? 1 : 0;\n                if (hours == 0) {\n                    f.form_hour.value = 12;\n                } else {\n                    f.form_hour.value = (hours >= 13) ? hours - 12 : hours;\n                }\n                f.form_minute.value = minutes;\n            }\n\n            function get_form_category_value() {\n                var catid = 0;\n                var f = document.forms.namedItem(\"theaddform\");\n                var s = f.form_category;\n                if (s.selectedIndex >= 0) {\n                    catid = s.options[s.selectedIndex].value;\n                }\n                return catid;\n            }\n\n            // Invoke the find-available popup.\n            function find_available() {\n                // when making an appointment for a specific provider\n                var catId = get_form_category_value() || 5;\n                var se = document.getElementById('form_provider_ae');\n                <?php if ($userid != 0) { ?>\n                s = se.value;\n                <?php } else {?>\n                s = se.options[se.selectedIndex].value;\n                <?php }?>\n                var formDate = document.getElementById('form_date');\n                var url = 'find_appt_popup_user.php?bypatient&providerid=' + encodeURIComponent(s) + '&catid=' + encodeURIComponent(catId)\n                    + '&startdate=' + encodeURIComponent(formDate.value);\n                var params = {\n                    buttons: [\n                        {text: <?php echo xlj('Cancel'); ?>, close: true, style: 'danger btn-sm'}\n\n                    ],\n                    allowResize: true,\n                    dialogId: 'apptDialog',\n                    type: 'iframe'\n                };\n                dlgopen(url, 'apptFind', 'modal-md', 300, '', 'Find Date', params);\n            }\n\n            // Check for errors when the form is submitted.\n            function validate() {\n                var f = document.getElementById('theaddform');\n                if (!f.form_date.value || !f.form_hour.value || !f.form_minute.value) {\n                    alert(<?php echo xlj('Please click on Openings to select a time.'); ?>);\n                    return false;\n                }\n\n                if (f.form_patient.value == '') {\n                    alert(<?php echo xlj('Your Id is missing. Cancel and try again.'); ?>);\n                    return false;\n                }\n\n                var form_action = document.getElementById('form_action');\n                form_action.value = \"save\";\n                f.submit();\n                return false;\n            }\n\n            <?php if ($eid) { ?>\n            set_display();\n            <?php } ?>\n            $(function () {\n\n            });\n        </script>\n    </div>\n</body>\n</html>\n", "<?php\n\n/**\n *\n * Modified from main codebase for the patient portal.\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Rod Roark <rod@sunsetsystems.com>\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @author    Ian Jardine ( github.com/epsdky )\n * @copyright Copyright (C) 2005-2013 Rod Roark <rod@sunsetsystems.com>\n * @copyright Copyright (C) 2016-2017 Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (C) 2019 Ian Jardine ( github.com/epsdky )\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n// Note from Rod 2013-01-22:\n// This module needs to be refactored to share the same code that is in\n// interface/main/calendar/find_appt_popup.php.  It contains an old version\n// of that logic and does not support exception dates for repeating events.\n\n// Rod mentioned in the previous comment that the code \"does not support exception dates for repeating events\".\n// This issue no longer exists - epsdky 2019\n\n//continue session\n// Will start the (patient) portal OpenEMR session/cookie.\nrequire_once(dirname(__FILE__) . \"/../src/Common/Session/SessionUtil.php\");\nOpenEMR\\Common\\Session\\SessionUtil::portalSessionStart();\n//\n\n//landing page definition -- where to go if something goes wrong\n$landingpage = \"index.php?site=\" . urlencode($_SESSION['site_id']);\n//\n\n// kick out if patient not authenticated\nif (isset($_SESSION['pid']) && isset($_SESSION['patient_portal_onsite_two'])) {\n    $pid = $_SESSION['pid'];\n} else {\n    OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n    header('Location: ' . $landingpage . '&w');\n    exit();\n}\n\n//\n\n$ignoreAuth_onsite_portal = true;\n\nrequire_once(\"../interface/globals.php\");\nrequire_once(\"$srcdir/patient.inc.php\");\nrequire_once(dirname(__FILE__) . \"/../library/appointments.inc.php\");\n\nuse OpenEMR\\Core\\Header;\n\n$input_catid = $_REQUEST['catid'];\n\n// Record an event into the slots array for a specified day.\nfunction doOneDay($catid, $udate, $starttime, $duration, $prefcatid)\n{\n    global $slots, $slotsecs, $slotstime, $slotbase, $slotcount, $input_catid;\n    $udate = strtotime($starttime, $udate);\n    if ($udate < $slotstime) {\n        return;\n    }\n\n    $i = (int)($udate / $slotsecs) - $slotbase;\n    $iend = (int)(($duration + $slotsecs - 1) / $slotsecs) + $i;\n    if ($iend > $slotcount) {\n        $iend = $slotcount;\n    }\n\n    if ($iend <= $i) {\n        $iend = $i + 1;\n    }\n\n    for (; $i < $iend; ++$i) {\n        if ($catid == 2) {        // in office\n            // If a category ID was specified when this popup was invoked, then select\n            // only IN events with a matching preferred category or with no preferred\n            // category; other IN events are to be treated as OUT events.\n            if ($input_catid) {\n                if ($prefcatid == $input_catid || !$prefcatid) {\n                    $slots[$i] |= 1;\n                } else {\n                    $slots[$i] |= 2;\n                }\n            } else {\n                $slots[$i] |= 1;\n            }\n\n            break; // ignore any positive duration for IN\n        } elseif ($catid == 3) { // out of office\n            $slots[$i] |= 2;\n            break; // ignore any positive duration for OUT\n        } else { // all other events reserve time\n            $slots[$i] |= 4;\n        }\n    }\n}\n\n// seconds per time slot\n$slotsecs = $GLOBALS['calendar_interval'] * 60;\n\n$catslots = 1;\nif ($input_catid) {\n    $srow = sqlQuery(\"SELECT pc_duration FROM openemr_postcalendar_categories WHERE pc_catid = ?\", array($input_catid));\n    if ($srow['pc_duration']) {\n        $catslots = ceil($srow['pc_duration'] / $slotsecs);\n    }\n}\n\n$info_msg = \"\";\n\n$searchdays = 7; // default to a 1-week lookahead\nif ($_REQUEST['searchdays']) {\n    $searchdays = $_REQUEST['searchdays'];\n}\n\n// Get a start date.\nif (\n    $_REQUEST['startdate'] && preg_match(\n        \"/(\\d\\d\\d\\d)\\D*(\\d\\d)\\D*(\\d\\d)/\",\n        $_REQUEST['startdate'],\n        $matches\n    )\n) {\n    $sdate = $matches[1] . '-' . $matches[2] . '-' . $matches[3];\n} else {\n    $sdate = date(\"Y-m-d\");\n}\n\n// Get an end date - actually the date after the end date.\npreg_match(\"/(\\d\\d\\d\\d)\\D*(\\d\\d)\\D*(\\d\\d)/\", $sdate, $matches);\n$edate = date(\n    \"Y-m-d\",\n    mktime(0, 0, 0, $matches[2], $matches[3] + $searchdays, $matches[1])\n);\n\n// compute starting time slot number and number of slots.\n$slotstime = strtotime(\"$sdate 00:00:00\");\n$slotetime = strtotime(\"$edate 00:00:00\");\n$slotbase = (int)($slotstime / $slotsecs);\n$slotcount = (int)($slotetime / $slotsecs) - $slotbase;\n\nif ($slotcount <= 0 || $slotcount > 100000) {\n    die(\"Invalid date range.\");\n}\n\n$slotsperday = (int)(60 * 60 * 24 / $slotsecs);\n\n// If we have a provider, search.\n//\nif ($_REQUEST['providerid']) {\n    $providerid = $_REQUEST['providerid'];\n\n    // Create and initialize the slot array. Values are bit-mapped:\n    //   bit 0 = in-office occurs here\n    //   bit 1 = out-of-office occurs here\n    //   bit 2 = reserved\n    // So, values may range from 0 to 7.\n    //\n    $slots = array_pad(array(), $slotcount, 0);\n\n    // Note there is no need to sort the query results.\n    //  echo $sdate.\" -- \".$edate;\n    $query = \"SELECT pc_eventDate, pc_endDate, pc_startTime, pc_duration, \" .\n        \"pc_recurrtype, pc_recurrspec, pc_alldayevent, pc_catid, pc_prefcatid, pc_title \" .\n        \"FROM openemr_postcalendar_events \" .\n        \"WHERE pc_aid = ? AND \" .\n        \"((pc_endDate >= ? AND pc_eventDate < ?) OR \" .\n        \"(pc_endDate = '0000-00-00' AND pc_eventDate >= ? AND pc_eventDate < ?))\";\n\n    $sqlBindArray = array();\n    array_push($sqlBindArray, $providerid, $sdate, $edate, $sdate, $edate);\n    //////\n    $events2 = fetchEvents($sdate, $edate, null, null, false, 0, $sqlBindArray, $query);\n    foreach ($events2 as $row) {\n        $thistime = strtotime($row['pc_eventDate'] . \" 00:00:00\");\n        doOneDay(\n            $row['pc_catid'],\n            $thistime,\n            $row['pc_startTime'],\n            $row['pc_duration'],\n            $row['pc_prefcatid']\n        );\n    }\n    //////\n\n    // Mark all slots reserved where the provider is not in-office.\n    // Actually we could do this in the display loop instead.\n    $inoffice = false;\n    for ($i = 0; $i < $slotcount; ++$i) {\n        if (($i % $slotsperday) == 0) {\n            $inoffice = false;\n        }\n\n        if ($slots[$i] & 1) {\n            $inoffice = true;\n        }\n\n        if ($slots[$i] & 2) {\n            $inoffice = false;\n        }\n\n        if (!$inoffice) {\n            $slots[$i] |= 4;\n        }\n    }\n}\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title><?php echo xlt('Find Available Appointments'); ?></title>\n    <?php Header::setupHeader(['no_main-theme', 'datetime-picker', 'opener']); ?>\n    <script>\n\n        function setappt(year, mon, mday, hours, minutes) {\n            opener.setappt(year, mon, mday, hours, minutes);\n            dlgclose();\n            return false;\n        }\n\n    </script>\n\n    <style>\n      form {\n        /* this eliminates the padding normally around a FORM tag */\n        padding: 0;\n        margin: 0;\n      }\n\n      #searchCriteria {\n        text-align: center;\n        width: 100%;\n        font-weight: bold;\n        padding: 0.1875rem;\n      }\n\n      #searchResults {\n        width: 100%;\n        height: 100%;\n        overflow: auto;\n      }\n\n      #searchResults table {\n        width: 100%;\n        border-collapse: collapse;\n        background-color: var(--white);\n      }\n\n      #searchResults td {\n        border-bottom: 1px solid var(--gray600);\n        padding: 1px 5px;\n      }\n\n      .blue_highlight {\n        background-color: #BBCCDD;\n        color: var(--white);\n      }\n\n      #am a, #am a:hover {\n        padding: 4px;\n        text-decoration: none;\n      }\n\n      #pm a, #pm a:hover {\n        color: var(--danger);\n        padding: 4px;\n        text-decoration: none;\n      }\n    </style>\n\n</head>\n\n<body class=\"body_top\">\n\n    <div class=\"table-primary\" id=\"searchCriteria\">\n        <form method='post' name='theform' action='./find_appt_popup_user.php?providerid=<?php echo attr_url($providerid); ?>&catid=<?php echo attr_url($input_catid); ?>'>\n            <input type=\"hidden\" name='bypatient' />\n            <div class=\"form-row mx-0 align-items-center\">\n                <label for=\"startdate\" class=\"col-1 mx-2 col-form-label\"><?php echo xlt('Start date:'); ?></label>\n                <div class=\"col-auto\">\n                    <input type='text' class='datepicker form-control' name='startdate' id='startdate' size='10' value='<?php echo attr($sdate); ?>' title='yyyy-mm-dd starting date for search' />\n                </div>\n                <label for=\"searchdays\" class=\"col-auto col-form-label\"><?php echo xlt('for'); ?></label>\n                <div class=\"col-auto\">\n                    <input type='text' class=\"form-control\" name='searchdays' id='searchdays' size='3' value='<?php echo attr($searchdays); ?>' title='Number of days to search from the start date' />\n                </div>\n                <label for=\"searchdays\" class=\"col-auto col-form-label\"><?php echo xlt('days'); ?></label>\n                <div class=\"col-auto\">\n                    <input type='submit' class=\"btn btn-primary btn-sm btn-block\" value='<?php echo xla('Search'); ?>' />\n                </div>\n            </div>\n    </div>\n\n    <?php if (!empty($slots)) : ?>\n        <div id=\"searchResultsHeader\">\n            <table class='table table-bordered'>\n\n            </table>\n        </div>\n\n        <div id=\"searchResults\" class=\"container-fluid\">\n            <div class=\"table-responsive\">\n                <table class='table table-sm table-striped table-bordered'>\n                    <thead id=\"searchResultsHeader\">\n                    <tr>\n                        <th class=\"table-dark text-light\"><?php echo xlt('Day'); ?></th>\n                        <th class=\"srTimes\"><?php echo xlt('Available Times'); ?></th>\n                    </tr>\n                    </thead>\n                    <?php\n                    $lastdate = \"\";\n                    $ampmFlag = \"am\"; // establish an AM-PM line break flag\n                    for ($i = 0; $i < $slotcount; ++$i) {\n                        $available = true;\n                        for ($j = $i; $j < $i + $catslots; ++$j) {\n                            if ($slots[$j] >= 4) {\n                                $available = false;\n                            }\n                        }\n\n                        if (!$available) {\n                            continue; // skip reserved slots\n                        }\n\n                        $utime = ($slotbase + $i) * $slotsecs;\n                        $thisdate = date(\"Y-m-d\", $utime);\n                        if ($thisdate != $lastdate) {\n                            // if a new day, start a new row\n                            if ($lastdate) {\n                                echo \"</div>\";\n                                echo \"</td>\\n\";\n                                echo \" </tr>\\n\";\n                            }\n\n                            $lastdate = $thisdate;\n                            echo \" <tr class='oneresult'>\\n\";\n                            echo \"  <td class='table-dark text-light'>\" . date(\"l\", $utime) . \"<br />\" . date(\"Y-m-d\", $utime) . \"</td>\\n\";\n                            echo \"  <td class='srTimes'>\";\n                            echo \"<div id='am'>AM<hr class='m-0 p-0 mb-n3'/><br/>\";\n                            $ampmFlag = \"am\";  // reset the AMPM flag\n                        }\n\n                        $ampm = date('a', $utime);\n                        if ($ampmFlag != $ampm) {\n                            echo \"</div><div id='pm'><hr class='m-0 p-0' />PM<hr class='m-0 p-0 mb-n3' /><br/>\";\n                        }\n\n                        $ampmFlag = $ampm;\n\n                        $atitle = \"Choose \" . date(\"h:i a\", $utime);\n                        $adate = getdate($utime);\n\n                        $anchor = \"<a href='' onclick='return setappt(\" .\n                            attr_js(date(\"Y\", $utime)) . \",\" .\n                            attr_js($adate['mon']) . \",\" .\n                            attr_js($adate['mday']) . \",\" .\n                            attr_js(date(\"G\", $utime)) . \",\" .\n                            attr_js(date(\"i\", $utime)) . \",\" .\n                            attr_js(date('a', $utime)) . \")'\" .\n                            \" title='\" . attr($atitle) . \"' alt='\" . attr($atitle) . \"'\" .\n                            \">\";\n                        echo (strlen(date('g', $utime)) < 2 ? \"<span style='visibility:hidden'>0</span>\" : \"\") .\n                            $anchor . date(\"g:i\", $utime) . \"</a> \";\n\n                        // If category duration is more than 1 slot, increment $i appropriately.\n                        // This is to avoid reporting available times on undesirable boundaries.\n                        $i += $catslots - 1;\n                    }\n\n                    if ($lastdate) {\n                        echo \"</td>\\n\";\n                        echo \" </tr>\\n\";\n                    } else {\n                        echo \" <tr><td colspan='2'> \" . xlt('No openings were found for this period.') . \"</td></tr>\\n\";\n                    }\n                    ?>\n                </table>\n            </div>\n        </div>\n        </div>\n    <?php endif; ?>\n\n    </form>\n\n    <script>\n\n        // jQuery stuff to make the page a little easier to use\n        $(function () {\n            $(\".oneresult\").hover(function () {\n                $(this).toggleClass(\"highlight\");\n            }, function () {\n                $(this).toggleClass(\"highlight\");\n            });\n            $(\".oneresult a\").hover(function () {\n                $(this).toggleClass(\"blue_highlight\");\n                $(this).children().toggleClass(\"blue_highlight\");\n            }, function () {\n                $(this).toggleClass(\"blue_highlight\");\n                $(this).children().toggleClass(\"blue_highlight\");\n            });\n\n            $('.datepicker').datetimepicker({\n                <?php $datetimepicker_timepicker = false; ?>\n                <?php $datetimepicker_formatInput = false; ?>\n                <?php require($GLOBALS['srcdir'] . '/js/xl/jquery-datetimepicker-2-5-4.js.php'); ?>\n                <?php // can add any additional javascript settings to datetimepicker here; need to prepend first setting with a comma ?>\n            });\n\n        });\n\n    </script>\n</body>\n</html>\n", "<?php\n\n/**\n * secure_chat.php\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @author    Tyler Wrenn <tyler@tylerwrenn.com>\n * @copyright Copyright (c) 2016-2021 Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2022 Tyler Wrenn <tyler@tylerwrenn.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nnamespace PatientPortal;\n\n// Will start the (patient) portal OpenEMR session/cookie.\nrequire_once(__DIR__ . \"/../../src/Common/Session/SessionUtil.php\");\n\\OpenEMR\\Common\\Session\\SessionUtil::portalSessionStart();\n\nif (isset($_SESSION['pid']) && isset($_SESSION['patient_portal_onsite_two'])) {\n    $pid = $_SESSION['pid'];\n    $ignoreAuth_onsite_portal = true;\n    require_once(__DIR__ . \"/../../interface/globals.php\");\n    define('IS_DASHBOARD', false);\n    define('IS_PORTAL', $_SESSION['pid']);\n} else {\n    \\OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n    $ignoreAuth = false;\n    require_once(__DIR__ . \"/../../interface/globals.php\");\n    if (!isset($_SESSION['authUserID'])) {\n        $landingpage = \"index.php\";\n        header('Location: ' . $landingpage);\n        exit;\n    }\n    $admin = sqlQueryNoLog(\n        \"SELECT CONCAT(users.fname,' ',users.lname) as user_name FROM users WHERE id = ?\",\n        array($_SESSION['authUserID'])\n    );\n    define('ADMIN_USERNAME', $admin['user_name']);\n    define('IS_DASHBOARD', $_SESSION['authUser']);\n    define('IS_PORTAL', false);\n    $_SERVER['REMOTE_ADDR'] = 'admin::' . $_SERVER['REMOTE_ADDR'];\n}\n\n// Ensure that username GET or POST parameters are not manipulated\n$usernameManipulatedFlag = false;\nif (!empty($_GET['username']) && ($_GET['username'] != 'currentol')) {\n    if (empty(IS_PORTAL)) {\n        if ($_GET['username'] != ADMIN_USERNAME) {\n            $usernameManipulatedFlag = true;\n        }\n    } else {\n        if ($_GET['username'] != $_SESSION['ptName']) {\n            $usernameManipulatedFlag = true;\n        }\n    }\n}\nif (!empty($_POST['username'])) {\n    if (empty(IS_PORTAL)) {\n        if ($_POST['username'] != ADMIN_USERNAME) {\n            $usernameManipulatedFlag = true;\n        }\n    } else {\n        if ($_POST['username'] != $_SESSION['ptName']) {\n            $usernameManipulatedFlag = true;\n        }\n    }\n}\nif ($usernameManipulatedFlag) {\n    http_response_code(401);\n    die(xlt(\"Something went wrong\"));\n}\n\nuse OpenEMR\\Core\\Header;\nuse OpenEMR\\PatientPortal\\Chat\\ChatController;\n\ndefine('C_USER', IS_PORTAL ?: IS_DASHBOARD);\ndefine('CHAT_HISTORY', '150');\ndefine('CHAT_ONLINE_RANGE', '1');\ndefine('ADMIN_USERNAME_PREFIX', 'adm_');\n\n// Start application.\n$msgApp = new ChatController();\n?>\n<!doctype html>\n<html ng-app=\"MsgApp\">\n<head>\n    <meta charset=\"utf-8\" />\n    <?php\n    Header::setupHeader(['no_main-theme', 'ckeditor', 'angular', 'angular-sanitize', 'checklist-model']);\n    ?>\n    <title><?php echo xlt('Secure Chat'); ?></title>\n    <meta name=\"author\" content=\"Jerry Padgett sjpadgett{{at}} gmail {{dot}} com\" />\n</head>\n<script>\n    (function () {\n        var MsgApp = angular.module('MsgApp', ['ngSanitize', \"checklist-model\"]);\n        MsgApp.config(function ($compileProvider) {\n                $compileProvider.aHrefSanitizationWhitelist(/^\\s*(https?|file|ftp|blob):|data:image\\//);\n            }\n        );\n        MsgApp.directive('ngEnter', function () {\n            return function (scope, element, attrs) {\n                element.bind(\"keydown keypress\", function (event) {\n                    if (event.which === 13) {\n                        scope.$apply(function () {\n                            scope.$eval(attrs.ngEnter);\n                        });\n                        event.preventDefault();\n                    }\n                });\n            };\n        });\n        MsgApp.directive('tooltip', function (e) {\n            return {\n                restrict: 'A',\n                link: function (scope, element, attrs) {\n                    $(element).hover(function () {\n                        $(element).tooltip('show');\n                    }, function () {\n                        $(element).tooltip('hide');\n                    });\n                }\n            };\n        });\n        MsgApp.filter('unique', function () {\n            return function (collection, keyname) {\n                var output = [],\n                    keys = [];\n                angular.forEach(collection, function (item) {\n                    var key = item[keyname];\n                    if (keys.indexOf(key) === -1) {\n                        keys.push(key);\n                        output.push(item);\n                    }\n                });\n                return output;\n            };\n        });\n\n        MsgApp.controller('MsgAppCtrl', ['$scope', '$http', '$filter', function ($scope, $http, $filter) {\n            $scope.urlListMessages = '?action=list'; // actions for restful\n            $scope.urlSaveMessage = '?action=save';\n            $scope.urlListOnlines = '?action=ping';\n            $scope.urlGetAuthUsers = '?action=authusers';\n\n            $scope.pidMessages = null;\n            $scope.pidPingServer = null;\n\n            $scope.beep = new Audio('beep.ogg'); // you've got mail!!!! really just a beep\n            $scope.messages = [];\n            $scope.online = null;\n            $scope.lastMessageId = null;\n            $scope.historyFromId = null;\n            $scope.onlines = []; // all online users id and ip's\n            $scope.user = <?php echo $_SESSION['ptName'] ? js_escape($_SESSION['ptName']) : js_escape(ADMIN_USERNAME); ?>;// current user - dashboard user is from session authUserID\n            $scope.userid = <?php echo IS_PORTAL ? js_escape($_SESSION['pid']) : js_escape($_SESSION['authUser']); ?>;\n            $scope.isPortal = \"<?php echo IS_PORTAL;?>\";\n            $scope.pusers = []; // selected recipients for chat\n            $scope.chatusers = []; // authorize chat recipients for dashboard user\n            $scope.noRecipError = <?php echo xlj(\"Please Select a Recipient for Message.\") ?>;\n            $scope.me = {\n                username: $scope.user,\n                message: null,\n                sender_id: $scope.userid,\n                recip_id: 0\n            };\n            $scope.checkAll = function () {\n                $scope.pusers = [];\n                $scope.pusers = $scope.chatusers.map(function (item) {\n                    return item.recip_id;\n                });\n                $scope.getAuthUsers();\n            };\n            $scope.uncheckAll = function () {\n                $scope.pusers = [];\n                $scope.getAuthUsers();\n            };\n            $scope.makeCurrent = function (sel) {\n                if (!sel.me) {\n                    $scope.pusers.splice(0, $scope.pusers.length);\n                    $scope.pusers.push(sel.sender_id);\n                }\n            };\n            $scope.pageTitleNotificator = {\n                vars: {\n                    originalTitle: window.document.title,\n                    interval: null,\n                    status: 0\n                },\n                on: function (title, intervalSpeed) {\n                    var self = this;\n                    if (!self.vars.status) {\n                        self.vars.interval = window.setInterval(function () {\n                            window.document.title = (self.vars.originalTitle === window.document.title) ?\n                                title : self.vars.originalTitle;\n                        }, intervalSpeed || 500);\n                        self.vars.status = 1;\n                    }\n                },\n                off: function () {\n                    window.clearInterval(this.vars.interval);\n                    window.document.title = this.vars.originalTitle;\n                    this.vars.status = 0;\n                }\n            };\n\n            $scope.editor = '';\n            $scope.editmsg = function () {\n                $scope.editor = CKEDITOR.instances['messageContent'];\n                if ($scope.editor) {\n                    $scope.editor.destroy(true);\n                }\n                $scope.editor = CKEDITOR.replace('messageContent', {\n                    toolbarGroups: [\n                        { name: 'document', groups: [ 'mode', 'document', 'doctools' ] },\n                        { name: 'clipboard', groups: [ 'clipboard', 'undo' ] },\n                        { name: 'editing', groups: [ 'find', 'selection', 'spellchecker', 'editing' ] },\n                        { name: 'forms', groups: [ 'forms' ] },\n                        { name: 'basicstyles', groups: [ 'basicstyles', 'cleanup' ] },\n                        { name: 'paragraph', groups: [ 'list', 'indent', 'blocks', 'align', 'bidi', 'paragraph' ] },\n                        { name: 'links', groups: [ 'links' ] },\n                        { name: 'insert', groups: [ 'insert' ] },\n                        { name: 'styles', groups: [ 'styles' ] },\n                        { name: 'colors', groups: [ 'colors' ] },\n                        { name: 'tools', groups: [ 'tools' ] },\n                        { name: 'others', groups: [ 'others' ] },\n                        { name: 'about', groups: [ 'about' ] }\n                    ],\n                    removeButtons: 'About,Table,Smiley,SpecialChar,PageBreak,Iframe,HorizontalRule,Anchor,Unlink,Link,NumberedList,BulletedList,Outdent,Indent,Blockquote,CreateDiv,JustifyLeft,JustifyCenter,JustifyRight,JustifyBlock,Language,BidiRtl,BidiLtr,CopyFormatting,RemoveFormat,Superscript,Subscript,Strike,Underline,Italic,Bold,Form,Checkbox,Radio,TextField,Textarea,Select,Button,ImageButton,HiddenField,SelectAll,Scayt,Find,Replace,PasteFromWord,Templates,NewPage,ExportPdf,Maximize,ShowBlocks,Source,Save,Preview,Print,Cut,Copy,Paste,PasteText,TextColor,BGColor',\n                    height: 250,\n                    width: '100%',\n                    resize_maxHeight: 650\n                });\n            };\n\n            $scope.saveedit = function () {\n                $scope.me.message = CKEDITOR.instances.messageContent.getData();\n                $scope.saveMessage();\n                $scope.editor.destroy(true);\n            };\n\n            $scope.saveMessage = function (form, callback) {\n                $scope.me.recip_id = JSON.stringify(angular.copy($scope.pusers));\n                var data = $.param($scope.me);\n                if (!($scope.me.username && $scope.me.username.trim())) {\n                    return $scope.openModal();\n                }\n                if (!($scope.me.message && $scope.me.message.trim() &&\n                    $scope.me.username && $scope.me.username.trim())) {\n                    return;\n                }\n                if ($scope.me.recip_id == \"[]\") {\n                    alert($scope.noRecipError);\n                    return;\n                }\n                $scope.me.message = '';\n                return $http({\n                    method: 'POST',\n                    url: $scope.urlSaveMessage,\n                    data: data,\n                    headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n                }).then(function successCallback(response) {\n                    $scope.listMessages(true);\n                }, function errorCallback(response) {\n                });\n            };\n\n            $scope.replaceShortcodes = function (message) {\n                var msg = '';\n                msg = message.toString().replace(/(\\[img])(.*)(\\[\\/img])/, \"<img class='img-responsive' src='$2' />\");\n                msg = msg.toString().replace(/(\\[url])(.*)(\\[\\/url])/, \"<a href='$2'>$2</a>\");\n                msg = message.toString().replace(\"<img \", \"<img class='img-responsive' \");\n                return msg;\n            };\n\n            $scope.notifyLastMessage = function () {\n                if (typeof window.Notification === 'undefined') {\n                    return;\n                }\n                window.Notification.requestPermission(function (permission) {\n                    var lastMessage = $scope.getLastMessage();\n                    if (permission === 'granted' && lastMessage && lastMessage.username) {\n                        var notify = new window.Notification('Message notification from ' + lastMessage.username + ' : ', {\n                            body: 'New message' //lastMessage.message\n                        });\n                        notify.onclick = function () {\n                            window.focus();\n                        };\n                        notify.onclose = function () {\n                            $scope.pageTitleNotificator.off();\n                        };\n                        let timer = setInterval(function () {\n                            notify && notify.close();\n                            typeof timer !== 'undefined' && window.clearInterval(timer);\n                        }, 100000);\n                    }\n                });\n            };\n\n            $scope.getLastMessage = function () {\n                return $scope.messages[$scope.messages.length - 1];\n            };\n\n            $scope.listMessages = function (wasListingForMySubmission) {\n                return $http.post($scope.urlListMessages, {}).then(function successCallback(response) {\n                    $scope.messages = [];\n                    angular.forEach(response.data, function (message) {\n                        message.message = $scope.replaceShortcodes(message.message);\n                        $scope.messages.push(message);\n                    });\n\n                    var lastMessage = $scope.getLastMessage();\n                    var lastMessageId = lastMessage && lastMessage.id;\n\n                    if ($scope.lastMessageId !== lastMessageId) {\n                        $scope.onNewMessage(wasListingForMySubmission);\n                    }\n                    $scope.lastMessageId = lastMessageId;\n                    if ($scope.pusers === '') { // refresh current in chat list.\n                        angular.forEach($filter('unique')($scope.messages, 'sender_id'), function (m, k) {\n                            var flg = false;\n                            angular.forEach($scope.pusers, function (id) {\n                                if (id === m.sender_id) {\n                                    flg = true;\n                                }\n                            });\n                            if (!flg) $scope.pusers.push(m.sender_id);\n                        });\n                    }\n                    $scope.getOnlines();\n                }, function errorCallback(response) {\n                });\n            };\n\n            $scope.onNewMessage = function (wasListingForMySubmission) {\n                if ($scope.lastMessageId && !wasListingForMySubmission) {\n                    $scope.playAudio();\n                    $scope.pageTitleNotificator.on('New message');\n                    $scope.notifyLastMessage();\n                }\n                $scope.scrollDown();\n                window.addEventListener('focus', function () {\n                    $scope.pageTitleNotificator.off();\n                });\n            };\n\n            $scope.getAuthUsers = function () {\n                $scope.chatusers = [];\n                return $http.post($scope.urlGetAuthUsers, {}).then(function successCallback(response) {\n                    $scope.chatusers = response.data;\n                }, function errorCallback(response) {\n                });\n            };\n\n            $scope.pingServer = function (msgItem) {\n                return $http.post($scope.urlListOnlines + '&username=' + $scope.user, {}).then(function successCallback(response) {\n                    $scope.online = response.data;\n                }, function errorCallback(response) {\n                });\n            };\n\n            $scope.getOnlines = function () {\n                return $http.post($scope.urlListOnlines + '&username=currentol', {}).then(function successCallback(response) {\n                    $scope.onlines = response.data;\n                }, function errorCallback(response) {\n                });\n            };\n\n            $scope.init = function () {\n                $scope.listMessages();\n                $scope.pidMessages = window.setInterval($scope.listMessages, 3000);\n                $scope.pidPingServer = window.setInterval($scope.pingServer, 5000);\n                $scope.getAuthUsers();\n                $(\"#popeditor\").on(\"show.bs.modal\", function () {\n                    var height = $(window).height() - 200;\n                    $(this).find(\".modal-body\").css(\"max-height\", height);\n                });\n            };\n\n            $scope.scrollDown = function () {\n                var pidScroll;\n                pidScroll = window.setInterval(function () {\n                    $('.direct-chat-messages').scrollTop(window.Number.MAX_SAFE_INTEGER * 0.001);\n                    window.clearInterval(pidScroll);\n                }, 100);\n            };\n\n            $scope.clearHistory = function () {\n                var lastMessage = $scope.getLastMessage();\n                var lastMessageId = lastMessage && lastMessage.id;\n                lastMessageId = (lastMessageId - 1 >= 2) ? lastMessageId - 1 : lastMessageId;\n                lastMessageId && ($scope.historyFromId = lastMessageId);\n            };\n\n            $scope.openModal = function (e) {\n                var mi = $('#popeditor').modal({backdrop: \"static\"});\n                $scope.editmsg();\n            };\n\n            $scope.playAudio = function () {\n                $scope.beep && $scope.beep.play();\n            };\n\n            $scope.renderMessageBody = function (html) {\n                return html;\n            };\n            $scope.init();\n        }]);\n    })();\n</script>\n<style>\n  .direct-chat-text {\n    border-radius: 5px;\n    position: relative;\n    padding: 5px 10px;\n    background: #FBFBFB;\n    border: 1px solid var(--gray);\n    margin: 5px 0 0 50px;\n    color: var(--dark);\n  }\n\n  .direct-chat-msg,\n  .direct-chat-text {\n    display: block;\n    word-wrap: break-word;\n  }\n\n  .direct-chat-img {\n    border-radius: 50%;\n    float: left;\n    width: 40px;\n    height: 40px;\n  }\n\n  .direct-chat-info {\n    display: block;\n    margin-bottom: 2px;\n    font-size: 12px;\n  }\n\n  .direct-chat-msg {\n    margin-bottom: 5px;\n  }\n\n  .direct-chat-messages {\n    -webkit-transform: translate(0, 0);\n    -ms-transform: translate(0, 0);\n    -o-transform: translate(0, 0);\n    transform: translate(0, 0);\n    padding: 5px;\n    height: calc(100vh - 175px);\n    overflow: auto;\n    word-wrap: break-word;\n  }\n\n  .direct-chat-text:before {\n    border-width: 6px;\n    margin-top: -6px;\n  }\n\n  .direct-chat-text:after {\n    border-width: 5px;\n    margin-top: -5px;\n  }\n\n  .direct-chat-text:after,\n  .direct-chat-text:before {\n    position: absolute;\n    right: 100%;\n    top: 15px;\n    border: solid rgba(0, 0, 0, 0);\n    border-right-color: #D2D6DE;\n    content: ' ';\n    height: 0;\n    width: 0;\n    pointer-events: none;\n  }\n\n  .direct-chat-warning .right > .direct-chat-text {\n    background: rgba(251, 255, 178, 0.34);\n    border-color: var(--danger);\n    color: var(--black);\n  }\n\n  .right .direct-chat-text {\n    margin-right: 50px;\n    margin-left: 0;\n  }\n\n  .direct-chat-warning .right > .direct-chat-text:after,\n  .direct-chat-warning .right > .direct-chat-text:before {\n    border-left-color: #F39C12;\n  }\n\n  .right .direct-chat-text:after,\n  .right .direct-chat-text:before {\n    right: auto;\n    left: 100%;\n    border-right-color: rgba(0, 0, 0, 0);\n    border-left-color: #D2D6DE;\n  }\n\n  .right .direct-chat-img {\n    float: right;\n  }\n\n  .direct-chat-name {\n    font-weight: 600;\n  }\n\n  .box-footer form {\n    margin-bottom: 10px;\n  }\n\n  input,\n  .btn,\n  .alert,\n  .modal-content {\n    border-radius: 0 !important;\n  }\n\n  .sidebar {\n    background-color: #f8f8ff;\n    max-height: 95vh;\n    margin-top: 5px;\n    margin-right: 0;\n    padding-right: 5px;\n    overflow: auto;\n  }\n\n  .rtsidebar {\n    background-color: #f8f8ff;\n    max-height: 95vh;\n    margin-top: 5px;\n    margin-right: 0;\n    overflow: auto;\n  }\n\n  .fixed-panel {\n    height: 100%;\n    padding: 5px 5px 0 5px;\n  }\n\n  h5 {\n    font-size: 16px !important;\n  }\n\n  label {\n    display: block;\n  }\n\n  legend {\n    font-size: 14px;\n    margin-bottom: 2px;\n    background: var(--white);\n  }\n\n  .modal.modal-wide .modal-dialog {\n    width: 75%;\n  }\n\n  .modal-wide .modal-body {\n    overflow-y: auto;\n  }\n</style>\n\n<body ng-controller=\"MsgAppCtrl\">\n    <div class=\"container-fluid\">\n        <!-- <h2 class=\"d-none\">Secure Chat</h2> -->\n        <div class=\"row\">\n            <div class=\"col-md-2 sidebar\">\n                <h5><span class=\"badge badge-primary\"><?php echo xlt('Current Recipients'); ?></span></h5>\n                <label ng-repeat=\"user in chatusers | unique : 'username'\" ng-if=\"pusers.indexOf(user.recip_id) !== -1 && user.recip_id != me.sender_id\">\n                    <input type=\"checkbox\" data-checklist-model=\"pusers\" data-checklist-value=\"user.recip_id\"> {{user.username}}\n                </label>\n                <h5><span class=\"badge badge-primary\"><?php echo xlt('Available Recipients'); ?></span></h5>\n                <span>\n                    <button id=\"chkall\" class=\"btn btn-sm btn-success\" ng-show=\"!isPortal\" ng-click=\"checkAll()\" type=\"button\"><?php echo xlt('All{{Recipients}}'); ?></button>\n                    <button id=\"chknone\" class=\"btn btn-sm btn-success\" ng-show=\"!isPortal\" ng-click=\"uncheckAll()\" type=\"button\"><?php echo xlt('None{{Recipients}}'); ?></button>\n                </span>\n                <label ng-repeat=\"user in chatusers | unique : 'username'\" ng-show=\"!isPortal || (isPortal && user.dash)\">\n                    <input type=\"checkbox\" data-checklist-model=\"pusers\" data-checklist-value=\"user.recip_id\"> {{user.username}}\n                </label>\n            </div>\n            <div class=\"col-md-8 fixed-panel\">\n                <div class=\"card direct-chat direct-chat-warning\">\n                    <div class=\"card-heading bg-dark text-light py-2\">\n                        <div class=\"clearfix btn-group ml-2\">\n                            <a class='btn btn-primary' href='./../patient/provider' ng-show='!isPortal'><?php echo xlt('Home'); ?></a>\n                            <a class=\"btn btn-secondary\" href=\"\" data-toggle=\"modal\" data-target=\"#clear-history\"><?php echo xlt('Clear history'); ?></a>\n                        </div>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"direct-chat-messages\">\n                            <div class=\"direct-chat-msg\" ng-repeat=\"message in messages\" ng-if=\"historyFromId < message.id\" ng-class=\"{'right':!message.me}\">\n                                <div class=\"direct-chat-info clearfix\">\n                                    <span class=\"direct-chat-name\" ng-class=\"{'float-left':message.me,'float-right':!message.me}\">{{message.username }}</span>\n                                    <span class=\"direct-chat-timestamp \" ng-class=\"{'float-left':!message.me,'float-right':message.me}\">{{message.date }}</span>\n                                </div>\n                                <i class=\"direct-chat-img fa fa-hand-o-left\" style=\"cursor: pointer; font-size: 24px\" ng-show=\"!message.me\" ng-click=\"makeCurrent(message)\" title=\"<?php echo xla('Click to activate and send to this recipient.'); ?>\"></i>\n                                <i class=\"direct-chat-img fa fa-hand-o-right\" style=\"cursor: pointer; font-size:24px\" ng-show=\"message.me\" ng-click=\"makeCurrent(message)\" title=\"<?php echo xla('Click to activate and send to this recipient.'); ?>\"></i>\n\n                                <div class=\"direct-chat-text right\">\n                                    <div class='px-0' title=\"<?php echo xla('Click to activate and send to this recipient.'); ?>\" ng-click=\"makeCurrent(message)\" ng-bind-html=\"renderMessageBody(message.message)\"></div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"card-footer box-footer-hide\">\n                            <form id='msgfrm' ng-submit=\"saveMessage()\">\n                                <div class=\"input-group\">\n                                    <input type=\"text\" placeholder=\"<?php echo xla('Type Message...'); ?>\" id=\"msgedit\" autofocus=\"autofocus\" class=\"form-control\" ng-model=\"me.message\" ng-enter=\"saveMessage()\">\n                                    <span class=\"input-group-append\">\n                                        <button type=\"submit\" class=\"btn btn-danger btn-flat\"><?php echo xlt('Send'); ?></button>\n                                        <button type=\"button\" class=\"btn btn-success btn-flat\" ng-click=\"openModal(event)\"><?php echo xlt('Edit'); ?></button>\n                                    </span>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-2 rtsidebar\">\n                <h5><span class=\"badge badge-primary\"><?php echo xlt(\"Online Users\"); ?> : {{ online.total || '0' }}</span>\n                </h5>\n                <label ng-repeat=\"ol in onlines | unique : 'username'\">\n                    <input type=\"checkbox\" data-checklist-model=\"onlines\" data-checklist-value=\"ol\"> {{ol.username}}\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"modal modal-wide fade\" id=\"popeditor\">\n        <div class=\"modal-dialog modal-lg\">\n            <div class=\"modal-content\">\n                <form>\n                    <div class=\"modal-header\">\n                        <h5 class='modal-title'><?php echo xlt('You may send Message with Image or Video'); ?></h5>\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\">\n                            <span aria-hidden=\"true\">&times;</span>\n                            <span class=\"sr-only\"><?php echo xlt('Close'); ?></span>\n                        </button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <textarea cols='80' rows='10' id='messageContent' name='content'></textarea>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-sm\" data-dismiss=\"modal\"><?php echo xlt('Dismiss'); ?></button>\n                        <button type=\"button\" class=\"btn btn-success\" data-dismiss=\"modal\" ng-click=\"saveedit()\"><?php echo xlt('Send It'); ?></button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n    <div class=\"modal\" id=\"clear-history\">\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <form>\n                    <div class=\"modal-header\">\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\">\n                            <span aria-hidden=\"true\">&times;</span>\n                            <span class=\"sr-only\"><?php echo xlt('Close'); ?></span>\n                        </button>\n                        <h4 class=\"modal-title\"><?php echo xlt('Chat history'); ?></h4>\n                    </div>\n                    <div class=\"modal-body\">\n                        <label class=\"radio\"><?php echo xlt('Are you sure you want to clear chats session history?'); ?></label>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-sm btn-secondary\" data-dismiss=\"modal\"><?php echo xlt('Cancel'); ?></button>\n                        <button type=\"button\" class=\"btn btn-sm btn-primary\" data-dismiss=\"modal\" ng-click=\"clearHistory()\"><?php echo xlt('Accept'); ?></button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n\n</body>\n</html>\n", "<?php\n\n/**\n *  Chat Class ChatController\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2020-2021 Jerry Padgett <sjpadgett@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nnamespace OpenEMR\\PatientPortal\\Chat;\n\nuse OpenEMR\\PatientPortal\\Chat\\ChatDispatcher;\nuse OpenEMR\\PatientPortal\\Chat\\ChatModel;\n\nclass ChatController extends ChatDispatcher\n{\n    protected $_model;\n\n    public function __construct()\n    {\n        $this->setModel(ChatModel::class);\n        parent::__construct();\n    }\n\n    public function indexAction()\n    {\n    }\n\n    public function authusersAction()\n    {\n        return $this->getModel()->getAuthUsers(true);\n    }\n\n    public function listAction()\n    {\n        $this->setHeader(array('Content-Type' => 'application/json'));\n        $messages = $this->getModel()->getMessages();\n        foreach ($messages as &$message) {\n            $message['me'] = C_USER === $message['sender_id']; // $this->getServer('REMOTE_ADDR') === $message['ip'];\n        }\n\n        return json_encode($messages);\n    }\n\n    public function saveAction()\n    {\n        $username = $this->getPost('username');\n        $message = $this->getPost('message');\n        $ip = $this->getServer('REMOTE_ADDR');\n        $this->setCookie('username', $username, 9999 * 9999);\n        $recipid = $this->getPost('recip_id');\n\n        if (IS_PORTAL) {\n            $senderid = IS_PORTAL;\n        } else {\n            $senderid = IS_DASHBOARD;\n        }\n\n        $result = array('success' => false);\n        if ($username && $message) {\n            $cleanUsername = preg_replace('/^' . ADMIN_USERNAME_PREFIX . '/', '', $username);\n            $result = array(\n                'success' => $this->getModel()->addMessage($cleanUsername, $message, $ip, $senderid, $recipid)\n            );\n        }\n\n        if ($this->_isAdmin($username)) {\n            $this->_parseAdminCommand($message);\n        }\n\n        $this->setHeader(array('Content-Type' => 'application/json'));\n        return json_encode($result);\n    }\n\n    private function _isAdmin($username)\n    {\n        return (bool)IS_DASHBOARD;\n    }\n\n    private function _parseAdminCommand($message)\n    {\n        if (str_contains($message, '/clear')) {\n            $this->getModel()->removeMessages();\n            return true;\n        }\n\n        if (str_contains($message, '/online')) {\n            $online = $this->getModel()->getOnline(false);\n            $ipArr = array();\n            foreach ($online as $item) {\n                $ipArr[] = $item->ip;\n            }\n\n            $message = 'Online: ' . implode(\", \", $ipArr);\n            $this->getModel()->addMessage('Admin Command', $message, '0.0.0.0');\n            return true;\n        }\n    }\n\n    private function _getMyUniqueHash()\n    {\n        $unique = $this->getServer('REMOTE_ADDR');\n        $unique .= $this->getServer('HTTP_USER_AGENT');\n        $unique .= $this->getServer('HTTP_ACCEPT_LANGUAGE');\n        $unique .= C_USER;\n        return md5($unique);\n    }\n\n    public function pingAction()\n    {\n        $ip = $this->getServer('REMOTE_ADDR');\n        $hash = $this->_getMyUniqueHash();\n        $user = $this->getRequest('username', 'No Username');\n        if ($user == 'currentol') {\n            $onlines = $this->getModel()->getOnline(false);\n            $this->setHeader(array('Content-Type' => 'application/json'));\n            return json_encode($onlines);\n        }\n\n        if (IS_PORTAL) {\n            $userid = IS_PORTAL;\n        } else {\n            $userid = IS_DASHBOARD;\n        }\n\n        $this->getModel()->updateOnline($hash, $ip, $user, $userid);\n        $this->getModel()->clearOffline();\n\n        $onlines = $this->getModel()->getOnline();\n\n        $this->setHeader(array('Content-Type' => 'application/json'));\n        return json_encode($onlines);\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * This file contains functions for handling notes attached to patient files.\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * 2013-02-08 EMR Direct: changes to allow notes added by background-services with pid=0\n */\n\nuse OpenEMR\\Common\\Logging\\SystemLogger;\n\n/**\n * Retrieve a note, given its ID\n *\n * @param string $id the ID of the note to retrieve.\n * @param string $cols A list of columns to retrieve. defaults to '*' for all.\n */\nfunction getPnoteById($id, $cols = \"*\")\n{\n    return sqlQuery(\"SELECT \"  . escape_sql_column_name(process_cols_escape($cols), array('pnotes')) . \" FROM pnotes WHERE id=? \" .\n    ' AND deleted != 1 ' . // exclude ALL deleted notes\n    'order by date DESC limit 0,1', array($id));\n}\n\n/**\n * Get the patient notes for the given user.\n *\n * This function is used to retrieve notes assigned to the given user, or\n * optionally notes assigned to any user.\n *\n * @param string $activity 0 for deleted notes, 1 (the default) for active\n *                         notes, or 'All' for all.\n * @param string $show_all whether to display only the selected user's\n *                         messages, or all users' messages.\n * @param string $user The user whom's notes you want to retrieve.\n * @param bool $count Whether to return a count, or just return 0.\n * @param string $sortby A field to sort results by. (options are users.lname,patient_data.lname,pnotes.title,pnotes.date,pnotes.message_status) (will default to users.lname)\n * @param string $sortorder whether to sort ascending or descending.\n * @param string $begin what row to start retrieving results from.\n * @param string $listnumber number of rows to return.\n * @return int The number of rows retrieved, or 0 if $count was true.\n */\nfunction getPnotesByUser($activity = \"1\", $show_all = \"no\", $user = '', $count = false, $sortby = '', $sortorder = '', $begin = '', $listnumber = '')\n{\n\n  // Set the activity part of query\n    if ($activity == '1') {\n        $activity_query = \" pnotes.message_status != 'Done' AND pnotes.activity = 1 AND \";\n    } elseif ($activity == '0') {\n        $activity_query = \" (pnotes.message_status = 'Done' OR pnotes.activity = 0) AND \";\n    } else { //$activity=='all'\n        $activity_query = \" \";\n    }\n\n  // Set whether to show chosen user or all users\n    if ($show_all == 'yes') {\n        $usrvar = '_%';\n    } else {\n        $usrvar = $user;\n    }\n\n  // run the query\n  // 2013-02-08 EMR Direct: minor changes to query so notes with pid=0 don't disappear\n    $sql = \"SELECT pnotes.id, pnotes.user, pnotes.pid, pnotes.title, pnotes.date, pnotes.message_status, pnotes.activity,\n          IF(pnotes.pid = 0 OR pnotes.user != pnotes.pid,users.fname,patient_data.fname) as users_fname,\n          IF(pnotes.pid = 0 OR pnotes.user != pnotes.pid,users.lname,patient_data.lname) as users_lname,\n          patient_data.fname as patient_data_fname, patient_data.lname as patient_data_lname\n          FROM ((pnotes LEFT JOIN users ON pnotes.user = users.username)\n          LEFT JOIN patient_data ON pnotes.pid = patient_data.pid) WHERE $activity_query\n          pnotes.deleted != '1' AND pnotes.assigned_to LIKE ?\";\n    if (!empty($sortby) || !empty($sortorder)  || !empty($begin) || !empty($listnumber)) {\n        $sql .= \" order by \" . escape_sql_column_name($sortby, array('users','patient_data','pnotes'), true) .\n            \" \" . escape_sort_order($sortorder) .\n            \" limit \" . escape_limit($begin) . \", \" . escape_limit($listnumber);\n    }\n\n    $result = sqlStatement($sql, array($usrvar));\n\n  // return the results\n    if ($count) {\n        if (sqlNumRows($result) != 0) {\n            $total = sqlNumRows($result);\n        } else {\n            $total = 0;\n        }\n\n        return $total;\n    } else {\n        return $result;\n    }\n}\n\nfunction getPnotesByDate(\n    $date,\n    $activity = \"1\",\n    $cols = \"*\",\n    $pid = \"%\",\n    $limit = \"all\",\n    $start = 0,\n    $username = '',\n    $docid = 0,\n    $status = \"\",\n    $orderid = 0\n) {\n\n    $sqlParameterArray = array();\n    if ($docid) {\n        $sql = \"SELECT \" . escape_sql_column_name(process_cols_escape($cols), array('pnotes', 'gprelations')) . \" FROM pnotes AS p, gprelations AS r \" .\n        \"WHERE p.date LIKE ? AND r.type1 = 1 AND \" .\n        \"r.id1 = ? AND r.type2 = 6 AND p.id = r.id2 AND p.pid != p.user\";\n        array_push($sqlParameterArray, '%' . $date . '%', $docid);\n    } elseif ($orderid) {\n        $sql = \"SELECT \" . escape_sql_column_name(process_cols_escape($cols), array('pnotes', 'gprelations')) . \" FROM pnotes AS p, gprelations AS r \" .\n        \"WHERE p.date LIKE ? AND r.type1 = 2 AND \" .\n        \"r.id1 = ? AND r.type2 = 6 AND p.id = r.id2 AND p.pid != p.user\";\n        array_push($sqlParameterArray, '%' . $date . '%', $orderid);\n    } else {\n        $sql = \"SELECT \"  . escape_sql_column_name(process_cols_escape($cols), array('pnotes')) . \" FROM pnotes AS p \" .\n        \"WHERE date LIKE ? AND pid LIKE ? AND p.pid != p.user\";\n        array_push($sqlParameterArray, '%' . $date . '%', $pid);\n    }\n\n    $sql .= \" AND deleted != 1\"; // exclude ALL deleted notes\n    if ($activity != \"all\") {\n        if ($activity == '0') {\n            // only return inactive\n            $sql .= \" AND (activity = '0' OR message_status = 'Done') \";\n        } else { // $activity == '1'\n            // only return active\n            $sql .= \" AND activity = '1' AND message_status != 'Done' \";\n        }\n    }\n\n    if ($username) {\n        $sql .= \" AND assigned_to LIKE ?\";\n        array_push($sqlParameterArray, $username);\n    }\n\n    if ($status) {\n        $sql .= \" AND message_status IN ('\" . str_replace(\",\", \"','\", add_escape_custom($status)) . \"')\";\n    }\n\n    $sql .= \" ORDER BY date DESC\";\n    if ($limit != \"all\") {\n        $sql .= \" LIMIT \" . escape_limit($start) . \", \" . escape_limit($limit);\n    }\n\n    $res = sqlStatement($sql, $sqlParameterArray);\n\n    $all = array();\n    for ($iter = 0; $row = sqlFetchArray($res); $iter++) {\n        $all[$iter] = $row;\n    }\n\n    return $all;\n}\n\n// activity can only be 0, 1, or 'all'\nfunction getSentPnotesByDate(\n    $date,\n    $activity = \"1\",\n    $cols = \"*\",\n    $pid = \"%\",\n    $limit = \"all\",\n    $start = 0,\n    $username = '',\n    $docid = 0,\n    $status = \"\",\n    $orderid = 0\n) {\n\n    $sqlParameterArray = array();\n    if ($docid) {\n        $sql = \"SELECT \" . escape_sql_column_name(process_cols_escape($cols), array('pnotes', 'gprelations')) . \" FROM pnotes AS p, gprelations AS r \" .\n        \"WHERE p.date LIKE ? AND r.type1 = 1 AND \" .\n        \"r.id1 = ? AND r.type2 = 6 AND p.id = r.id2 AND p.pid = p.user\";\n        array_push($sqlParameterArray, '%' . $date . '%', $docid);\n    } elseif ($orderid) {\n        $sql = \"SELECT \" . escape_sql_column_name(process_cols_escape($cols), array('pnotes','gprelations')) . \" FROM pnotes AS p, gprelations AS r \" .\n        \"WHERE p.date LIKE ? AND r.type1 = 2 AND \" .\n        \"r.id1 = ? AND r.type2 = 6 AND p.id = r.id2 AND p.pid = p.user\";\n        array_push($sqlParameterArray, '%' . $date . '%', $orderid);\n    } else {\n        $sql = \"SELECT \" . escape_sql_column_name(process_cols_escape($cols), array('pnotes')) . \" FROM pnotes AS p \" .\n        \"WHERE date LIKE ? AND pid LIKE ? AND p.pid = p.user\";\n        array_push($sqlParameterArray, '%' . $date . '%', $pid);\n    }\n\n    $sql .= \" AND deleted != 1\"; // exclude ALL deleted notes\n    if ($activity != \"all\") {\n        if ($activity == '0') {\n            // only return inactive\n            $sql .= \" AND (activity = '0' OR message_status = 'Done') \";\n        } else { // $activity == '1'\n            // only return active\n            $sql .= \" AND activity = '1' AND message_status != 'Done' \";\n        }\n    }\n\n    if ($username) {\n        $sql .= \" AND assigned_to LIKE ?\";\n        array_push($sqlParameterArray, $username);\n    }\n\n    if ($status) {\n        $sql .= \" AND message_status IN ('\" . str_replace(\",\", \"','\", add_escape_custom($status)) . \"')\";\n    }\n\n    $sql .= \" ORDER BY date DESC\";\n    if ($limit != \"all\") {\n        $sql .= \" LIMIT \" . escape_limit($start) . \", \" . escape_limit($limit);\n    }\n\n    $res = sqlStatement($sql, $sqlParameterArray);\n\n    $all = array();\n    for ($iter = 0; $row = sqlFetchArray($res); $iter++) {\n        $all[$iter] = $row;\n    }\n\n    return $all;\n}\n\nfunction getPatientNotes($pid = '', $limit = '', $offset = 0, $search = '')\n{\n    if ($limit) {\n        $limit = \"LIMIT \" . escape_limit($offset) . \", \" . escape_limit($limit);\n    }\n\n    $sql = \"\n    SELECT\n      p.id,\n      p.date,\n      p.user,\n      p.title,\n      REPLACE(\n        p.body,\n        '-patient-',\n        CONCAT(pd.fname, ' ', pd.lname)\n      ) AS body,\n      p.message_status,\n      'Message' as `type`,\n      p.activity\n    FROM\n      pnotes AS p\n      LEFT JOIN patient_data AS pd\n        ON pd.id = p.pid\n    WHERE assigned_to = '-patient-'\n      AND p.deleted != 1\n      AND p.pid = ?\n      $search\n    ORDER BY `date` desc\n    $limit\n  \";\n    $res = sqlStatement($sql, array($pid));\n    for ($iter = 0; $row = sqlFetchArray($res); $iter++) {\n        $all[$iter] = $row;\n    }\n\n    return $all;\n}\n\nfunction getPatientNotifications($pid = '', $limit = '', $offset = 0, $search = '')\n{\n    if ($limit) {\n        $limit = \"LIMIT \" . escape_limit($offset) . \", \" . escape_limit($limit);\n    }\n\n    $sql = \"\n    SELECT\n      pr.id,\n      date_created AS `date`,\n      'Patient Reminders' AS `user`,\n      due_status AS title,\n      CONCAT(lo.title, ':', lo2.title) AS body,\n      '' as message_status,\n      'Notification' as `type`\n    FROM\n      patient_reminders AS pr\n      LEFT JOIN list_options AS lo\n        ON lo.option_id = pr.category\n        AND lo.list_id = 'rule_action_category' AND lo.activity = 1\n      LEFT JOIN list_options AS lo2\n        ON lo2.option_id = pr.item\n        AND lo2.list_id = 'rule_action' AND lo2.activity = 1\n    WHERE pid = ?\n      AND active = 1\n      AND date_created > DATE_SUB(NOW(), INTERVAL 1 MONTH)\n      $search\n    ORDER BY `date` desc\n    $limit\n  \";\n    $res = sqlStatement($sql, array($pid));\n    for ($iter = 0; $row = sqlFetchArray($res); $iter++) {\n        $all[$iter] = $row;\n    }\n\n    return $all;\n}\n\nfunction getPatientSentNotes($pid = '', $limit = '', $offset = 0, $search = '')\n{\n    if ($limit) {\n        $limit = \"LIMIT \" . escape_limit($offset) . \", \" . escape_limit($limit);\n    }\n\n    $sql = \"\n    SELECT\n      p.id,\n      p.date,\n      p.assigned_to,\n      p.title,\n      REPLACE(\n        p.body,\n        '-patient-',\n        CONCAT(pd.lname, ' ', pd.fname)\n      ) AS body,\n      p.activity,\n      p.message_status,\n      'Message' as `type`\n    FROM\n      pnotes AS p\n      LEFT JOIN patient_data AS pd\n        ON pd.id = p.pid\n    WHERE `user` = ?\n      AND p.deleted != 1\n      AND p.pid = ?\n      AND p.message_status != 'Done'\n      $search\n    ORDER BY `date` desc\n    $limit\n  \";\n    $res = sqlStatement($sql, array($pid,$pid));\n    for ($iter = 0; $row = sqlFetchArray($res); $iter++) {\n        $all[$iter] = $row;\n    }\n\n    return $all;\n}\n\n\n\n/** Add a note to a patient's medical record.\n *\n * @param int $pid the ID of the patient whos medical record this note is going to be attached to.\n * @param string $newtext the note contents.\n * @param int $authorized\n * @param int $activity\n * @param string $title\n * @param string $assigned_to\n * @param string $datetime\n * @param string $message_status\n * @param string $background_user if set then the pnote is created by a background-service rather than a user\n * @return int the ID of the added note.\n */\nfunction addPnote(\n    $pid,\n    $newtext,\n    $authorized = '0',\n    $activity = '1',\n    $title = 'Unassigned',\n    $assigned_to = '',\n    $datetime = '',\n    $message_status = 'New',\n    $background_user = \"\"\n) {\n\n    if (empty($datetime)) {\n        $datetime = date('Y-m-d H:i:s');\n    }\n\n  // make inactive if set as Done\n    if ($message_status == 'Done') {\n        $activity = 0;\n    }\n    $user = ($background_user != \"\" ? $background_user : $_SESSION['authUser']);\n    $body = date('Y-m-d H:i') . ' (' . $user;\n    if ($assigned_to) {\n        $body .= \" to $assigned_to\";\n    }\n\n    $body = $body . ') ' . $newtext;\n\n    return sqlInsert(\n        'INSERT INTO pnotes (date, body, pid, user, groupname, ' .\n        'authorized, activity, title, assigned_to, message_status, update_by, update_date) VALUES ' .\n        '(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())',\n        array($datetime, $body, $pid, $user, ($_SESSION['authProvider'] ?? null), $authorized, $activity, $title, $assigned_to, $message_status, ($_SESSION['authUserID'] ?? null))\n    );\n}\n\nfunction addMailboxPnote(\n    $pid,\n    $newtext,\n    $authorized = '0',\n    $activity = '1',\n    $title = 'Unassigned',\n    $assigned_to = '',\n    $datetime = '',\n    $message_status = \"New\"\n) {\n\n    if (empty($datetime)) {\n        $datetime = date('Y-m-d H:i:s');\n    }\n\n  // make inactive if set as Done\n    if ($message_status == \"Done\") {\n        $activity = 0;\n    }\n\n    $body = date('Y-m-d H:i') . ' (' . $pid;\n    if ($assigned_to) {\n        $body .= \" to $assigned_to\";\n    }\n\n    $body = $body . ') ' . $newtext;\n\n    return sqlInsert(\n        \"INSERT INTO pnotes (date, body, pid, user, groupname, \" .\n        \"authorized, activity, title, assigned_to, message_status, update_by, update_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())\",\n        array($datetime, $body, $pid, $pid, 'Default', $authorized, $activity, $title, $assigned_to, $message_status, $_SESSION['authUserID'])\n    );\n}\n\nfunction updatePnote($id, $newtext, $title, $assigned_to, $message_status = \"\", $datetime = \"\")\n{\n    $row = getPnoteById($id);\n    if (! $row) {\n        die(\"updatePnote() did not find id '\" . text($id) . \"'\");\n    }\n\n    if (empty($datetime)) {\n        $datetime = date('Y-m-d H:i:s');\n    }\n\n    $activity = $assigned_to ? '1' : '0';\n\n  // make inactive if set as Done\n    if ($message_status == \"Done\") {\n        $activity = 0;\n    }\n\n    $body = $row['body'] . \"\\n\" . date('Y-m-d H:i') .\n    ' (' . $_SESSION['authUser'];\n    if ($assigned_to) {\n        $body .= \" to $assigned_to\";\n    }\n\n    $body = $body . ') ' . $newtext;\n\n\n    $sql = \"UPDATE pnotes SET \" .\n        \"body = ?, activity = ?, title= ?, \" .\n        \"assigned_to = ?, update_by = ?, update_date = NOW()\";\n    $bindingParams =  array($body, $activity, $title, $assigned_to, $_SESSION['authUserID']);\n    if ($message_status) {\n        $sql .= \" ,message_status = ?\";\n        $bindingParams[] = $message_status;\n    }\n    if ($GLOBALS['messages_due_date']) {\n        $sql .= \" ,date = ?\";\n        $bindingParams[] = $datetime;\n    }\n    $sql .= \" WHERE id = ?\";\n    $bindingParams[] = $id;\n    sqlStatement($sql, $bindingParams);\n}\n\nfunction updatePnoteMessageStatus($id, $message_status)\n{\n    if ($message_status == \"Done\") {\n        sqlStatement(\"update pnotes set message_status = ?, activity = '0', update_by = ?, update_date = NOW() where id = ?\", array($message_status, $_SESSION['authUserID'], $id));\n    } else {\n        sqlStatement(\"update pnotes set message_status = ?, activity = '1', update_by = ?, update_date = NOW() where id = ?\", array($message_status, $_SESSION['authUserID'], $id));\n    }\n}\n\n/**\n * Set the patient id in an existing message where pid=0\n * @param $id the id of the existing note\n * @param $patient_id the patient id to associate with the note\n * @author EMR Direct <http://www.emrdirect.com/>\n */\nfunction updatePnotePatient($id, $patient_id)\n{\n    $row = getPnoteById($id);\n    if (! $row) {\n        die(\"updatePnotePatient() did not find id '\" . text($id) . \"'\");\n    }\n\n    $activity = $assigned_to ? '1' : '0';\n\n    $pid = $row['pid'];\n\n    if ($pid != 0 || (int)$patient_id < 1) {\n        (new SystemLogger())->errorLogCaller(\"invalid operation\", ['id' => $id, 'patient_id' => $patient_id, 'pid' => $pid]);\n        die(\"updatePnotePatient invalid operation\");\n    }\n\n    $pid = (int) $patient_id;\n    $newtext = \"\\n\" . date('Y-m-d H:i') . \" (patient set by \" . $_SESSION['authUser'] . \")\";\n    $body = $row['body'] . $newtext;\n\n    sqlStatement(\"UPDATE pnotes SET pid = ?, body = ?, update_by = ?, update_date = NOW() WHERE id = ?\", array($pid, $body, $_SESSION['authUserID'], $id));\n}\n\nfunction authorizePnote($id, $authorized = \"1\")\n{\n    sqlQuery(\"UPDATE pnotes SET authorized = ? , update_by = ?, update_date = NOW() WHERE id = ?\", array ($authorized, $_SESSION['authUserID'], $id));\n}\n\nfunction disappearPnote($id)\n{\n    sqlStatement(\"UPDATE pnotes SET activity = '0', message_status = 'Done', update_by = ?, update_date = NOW()  WHERE id=?\", array($_SESSION['authUserID'], $id));\n    return true;\n}\n\nfunction reappearPnote($id)\n{\n    sqlStatement(\"UPDATE pnotes SET activity = '1', message_status = IF(message_status='Done','New',message_status), update_by = ?, update_date = NOW() WHERE id=?\", array($_SESSION['authUserID'], $id));\n    return true;\n}\n\nfunction deletePnote($id)\n{\n    if (\n        getAssignedToById($id) == $_SESSION['authUser']\n        || getMessageStatusById($id) == 'Done'\n    ) {\n        sqlStatement(\"UPDATE pnotes SET deleted = '1', update_by = ?, update_date = NOW() WHERE id=?\", array($_SESSION['authUserID'], $id));\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Note that it is assumed that html escaping has happened before this function is called\nfunction pnoteConvertLinks($note)\n{\n    $noteActiveLink = preg_replace('!(https://[-a-zA-Z()0-9@:%_+.~#?&;//=]+)!i', '<a href=\"$1\" target=\"_blank\" rel=\"noopener\">$1</a>', $note);\n    if (empty($noteActiveLink)) {\n        // something bad happened (preg_replace returned null) or the $note was empty\n        return $note;\n    } else {\n        return $noteActiveLink;\n    }\n}\n\n/**\n * Retrieve assigned_to field given the note ID\n *\n * @param string $id the ID of the note to retrieve.\n */\nfunction getAssignedToById($id)\n{\n    $result = sqlQuery(\"SELECT assigned_to FROM pnotes WHERE id=?\", array($id));\n    return $result['assigned_to'];\n}\n\n/**\n * Retrieve message_status field given the note ID\n *\n * @param string $id the ID of the note to retrieve.\n */\nfunction getMessageStatusById($id)\n{\n    $result = sqlQuery(\"SELECT message_status FROM pnotes WHERE id=?\", array($id));\n    return $result['message_status'];\n}\n", "<?php\n\n/**\n *\n * Modified from interface/main/calendar/add_edit_event.php for\n * the patient portal.\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Rod Roark <rod@sunsetsystems.com>\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (C) 2005-2006 Rod Roark <rod@sunsetsystems.com>\n * @copyright Copyright (C) 2016-2021 Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n// Will start the (patient) portal OpenEMR session/cookie.\nrequire_once(__DIR__ . \"/../src/Common/Session/SessionUtil.php\");\nOpenEMR\\Common\\Session\\SessionUtil::portalSessionStart();\n\nrequire_once(\"./../library/pnotes.inc.php\");\n\n//landing page definition -- where to go if something goes wrong\n$landingpage = \"index.php?site=\" . urlencode($_SESSION['site_id']);\n//\n\n// kick out if patient not authenticated\nif (isset($_SESSION['pid']) && isset($_SESSION['patient_portal_onsite_two'])) {\n    $pid = $_SESSION['pid'];\n} else {\n    OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n    header('Location: ' . $landingpage . '&w');\n    exit;\n}\n\n$ignoreAuth_onsite_portal = true;\nglobal $ignoreAuth_onsite_portal;\n\nrequire_once(\"../interface/globals.php\");\nrequire_once(\"$srcdir/patient.inc.php\");\nrequire_once(\"$srcdir/forms.inc.php\");\nrequire_once(\"$srcdir/appointments.inc.php\");\n\nuse OpenEMR\\Services\\AppointmentService;\n\n// Things that might be passed by our opener.\n//\n$eid = $_GET['eid'] ?? null;         // only for existing events\n$date = $_GET['date'] ?? null;        // this and below only for new events\n$userid = $_GET['userid'] ?? null;\n$default_catid = ($_GET['catid'] ?? null) ? $_GET['catid'] : '5';\n$patientid = $_GET['patid'] ?? null;\n//\n\n// did someone tamper with eid?\n$checkEidInAppt = false;\n$patient_appointments = fetchAppointments('1970-01-01', '2382-12-31', $_SESSION['pid']);\n$checkEidInAppt = array_search($eid, array_column($patient_appointments, 'pc_eid'));\n\nif (!empty($eid) && !$checkEidInAppt) {\n    echo js_escape(\"error\");\n    exit();\n}\n\nif (!empty($_POST['form_pid'])) {\n    if ($_POST['form_pid'] != $_SESSION['pid']) {\n        echo js_escape(\"error\");\n        exit();\n    }\n\n    if (! getAvailableSlots($_POST['form_date'], date('Y-m-d', strtotime(\"+1 year \" . $_POST['form_date'])), $_POST['form_provider_ae'])) {\n        echo js_escape(\"error\");\n        exit();\n    }\n\n    $appointment_service = (new AppointmentService())->getOneCalendarCategory($_POST['form_category']);\n    if (($_POST['form_duration'] * 60) != ($appointment_service[0]['pc_duration'])) {\n        echo js_escape(\"error\");\n        exit();\n    }\n}\n\nif ($date) {\n    $date = substr($date, 0, 4) . '-' . substr($date, 4, 2) . '-' . substr($date, 6);\n} else {\n    $date = date(\"Y-m-d\");\n}\n\n//\n$starttimem = '00';\nif (isset($_GET['starttimem'])) {\n    $starttimem = substr('00' . $_GET['starttimem'], -2);\n}\n\n//\nif (isset($_GET['starttimeh'])) {\n    $starttimeh = $_GET['starttimeh'];\n    if (isset($_GET['startampm'])) {\n        if ($_GET['startampm'] == '2' && $starttimeh < 12) {\n            $starttimeh += 12;\n        }\n    }\n} else {\n    $starttimeh = date(\"G\");\n}\n\n$startampm = '';\n\n$info_msg = \"\";\n\n// EVENTS TO FACILITIES (lemonsoftware)\n//(CHEMED) get facility name\n// edit event case - if there is no association made, then insert one with the first facility\nif ($eid) {\n    $selfacil = '';\n    $facility = sqlQuery(\"SELECT pc_facility, pc_multiple, pc_aid, facility.name\n                        FROM openemr_postcalendar_events\n                          LEFT JOIN facility ON (openemr_postcalendar_events.pc_facility = facility.id)\n                          WHERE pc_eid = ?\", array($eid));\n    if (!$facility['pc_facility']) {\n        $qmin = sqlQuery(\"SELECT facility_id as minId, facility FROM users WHERE id = ?\", array($facility['pc_aid']));\n        $min = $qmin['minId'];\n        $min_name = $qmin['facility'];\n\n        // multiple providers case\n        if ($GLOBALS['select_multi_providers']) {\n            $mul = $facility['pc_multiple'];\n            sqlStatement(\"UPDATE openemr_postcalendar_events SET pc_facility = ? WHERE pc_multiple = ?\", array($min, $mul));\n        }\n\n        // EOS multiple\n\n        sqlStatement(\"UPDATE openemr_postcalendar_events SET pc_facility = ? WHERE pc_eid = ?\", array($min, $eid));\n        $e2f = $min;\n        $e2f_name = $min_name;\n    } else {\n        $e2f = $facility['pc_facility'];\n        $e2f_name = $facility['name'];\n    }\n}\n\n// EOS E2F\n// ===========================\n\n\n// If we are saving, then save and close the window.\n//\nif (($_POST['form_action'] ?? null) == \"save\") {\n//print_r($_POST);\n//exit();\n    $event_date = fixDate($_POST['form_date']);\n\n// Compute start and end time strings to be saved.\n    if ($_POST['form_allday'] ?? null) {\n        $tmph = 0;\n        $tmpm = 0;\n        $duration = 24 * 60;\n    } else {\n        $tmph = $_POST['form_hour'] + 0;\n        $tmpm = $_POST['form_minute'] + 0;\n        if ($_POST['form_ampm'] == '2' && $tmph < 12) {\n            $tmph += 12;\n        }\n\n        $duration = $_POST['form_duration'];\n    }\n\n    $starttime = \"$tmph:$tmpm:00\";\n//\n    $tmpm += $duration;\n    while ($tmpm >= 60) {\n        $tmpm -= 60;\n        ++$tmph;\n    }\n\n    $endtime = \"$tmph:$tmpm:00\";\n\n// Useless garbage that we must save.\n    $locationspec = 'a:6:{s:14:\"event_location\";N;s:13:\"event_street1\";N;' .\n        's:13:\"event_street2\";N;s:10:\"event_city\";N;s:11:\"event_state\";N;s:12:\"event_postal\";N;}';\n\n// More garbage, but this time 1 character of it is used to save the\n// repeat type.\n    if ($_POST['form_repeat'] ?? null) {\n        $recurrspec = 'a:5:{' .\n            's:17:\"event_repeat_freq\";s:1:\"' . $_POST['form_repeat_freq'] . '\";' .\n            's:22:\"event_repeat_freq_type\";s:1:\"' . $_POST['form_repeat_type'] . '\";' .\n            's:19:\"event_repeat_on_num\";s:1:\"1\";' .\n            's:19:\"event_repeat_on_day\";s:1:\"0\";' .\n            's:20:\"event_repeat_on_freq\";s:1:\"0\";}';\n    } else {\n        $recurrspec = 'a:5:{' .\n            's:17:\"event_repeat_freq\";N;' .\n            's:22:\"event_repeat_freq_type\";s:1:\"0\";' .\n            's:19:\"event_repeat_on_num\";s:1:\"1\";' .\n            's:19:\"event_repeat_on_day\";s:1:\"0\";' .\n            's:20:\"event_repeat_on_freq\";s:1:\"1\";}';\n    }\n\n//The modification of the start date for events that take place on one day of the week\n//for example monday, or thursday. We set the start date on the first day of the week\n//that the event is scheduled. For example if you set the event to repeat on each monday\n//the start date of the event will be set on the first monday after the day the event is scheduled\n    if (($_POST['form_repeat_type'] ?? null) == 5) {\n        $exploded_date = explode(\"-\", $event_date);\n        $edate = date(\"D\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2], $exploded_date[0]));\n        if ($edate == \"Tue\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 6, $exploded_date[0]));\n        } elseif ($edate == \"Wed\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 5, $exploded_date[0]));\n        } elseif ($edate == \"Thu\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 4, $exploded_date[0]));\n        } elseif ($edate == \"Fri\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 3, $exploded_date[0]));\n        } elseif ($edate == \"Sat\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 2, $exploded_date[0]));\n        } elseif ($edate == \"Sun\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 1, $exploded_date[0]));\n        }\n    } elseif (($_POST['form_repeat_type'] ?? null) == 6) {\n        $exploded_date = explode(\"-\", $event_date);\n        $edate = date(\"D\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2], $exploded_date[0]));\n        if ($edate == \"Wed\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 6, $exploded_date[0]));\n        } elseif ($edate == \"Thu\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 5, $exploded_date[0]));\n        } elseif ($edate == \"Fri\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 4, $exploded_date[0]));\n        } elseif ($edate == \"Sat\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 3, $exploded_date[0]));\n        } elseif ($edate == \"Sun\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 2, $exploded_date[0]));\n        } elseif ($edate == \"Mon\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 1, $exploded_date[0]));\n        }\n    } elseif (($_POST['form_repeat_type'] ?? null) == 7) {\n        $exploded_date = explode(\"-\", $event_date);\n        $edate = date(\"D\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2], $exploded_date[0]));\n        if ($edate == \"Thu\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 6, $exploded_date[0]));\n        } elseif ($edate == \"Fri\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 5, $exploded_date[0]));\n        } elseif ($edate == \"Sat\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 4, $exploded_date[0]));\n        } elseif ($edate == \"Sun\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 3, $exploded_date[0]));\n        } elseif ($edate == \"Mon\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 2, $exploded_date[0]));\n        } elseif ($edate == \"Tue\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 1, $exploded_date[0]));\n        }\n    } elseif (($_POST['form_repeat_type'] ?? null) == 8) {\n        $exploded_date = explode(\"-\", $event_date);\n        $edate = date(\"D\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2], $exploded_date[0]));\n        if ($edate == \"Fri\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 6, $exploded_date[0]));\n        } elseif ($edate == \"Sat\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 5, $exploded_date[0]));\n        } elseif ($edate == \"Sun\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 4, $exploded_date[0]));\n        } elseif ($edate == \"Mon\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 3, $exploded_date[0]));\n        } elseif ($edate == \"Tue\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 2, $exploded_date[0]));\n        } elseif ($edate == \"Wed\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 1, $exploded_date[0]));\n        }\n    } elseif (($_POST['form_repeat_type'] ?? null) == 9) {\n        $exploded_date = explode(\"-\", $event_date);\n        $edate = date(\"D\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2], $exploded_date[0]));\n        if ($edate == \"Sat\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 6, $exploded_date[0]));\n        } elseif ($edate == \"Sun\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 5, $exploded_date[0]));\n        } elseif ($edate == \"Mon\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 4, $exploded_date[0]));\n        } elseif ($edate == \"Tue\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 3, $exploded_date[0]));\n        } elseif ($edate == \"Wed\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 2, $exploded_date[0]));\n        } elseif ($edate == \"Thu\") {\n            $event_date = date(\"Y-m-d\", mktime(0, 0, 0, $exploded_date[1], $exploded_date[2] + 1, $exploded_date[0]));\n        }\n    }//if end\n    /* =======================================================\n    //                                  UPDATE EVENTS\n    ========================================================*/\n    if ($eid) {\n        // what is multiple key around this $eid?\n        $row = sqlQuery(\"SELECT pc_multiple FROM openemr_postcalendar_events WHERE pc_eid = ?\", array($eid));\n\n        if ($GLOBALS['select_multi_providers'] && $row['pc_multiple']) {\n            /* ==========================================\n            // multi providers BOS\n            ==========================================*/\n\n            // obtain current list of providers regarding the multiple key\n            $up = sqlStatement(\"SELECT pc_aid FROM openemr_postcalendar_events WHERE pc_multiple = ?\", array($row['pc_multiple']));\n            while ($current = sqlFetchArray($up)) {\n                $providers_current[] = $current['pc_aid'];\n            }\n\n            $providers_new = $_POST['form_provider_ae'];\n\n            // this difference means that some providers from current was UNCHECKED\n            // so we must delete this event for them\n            $r1 = array_diff($providers_current, $providers_new);\n            if (count($r1)) {\n                foreach ($r1 as $to_be_removed) {\n                    sqlQuery(\"DELETE FROM openemr_postcalendar_events WHERE pc_aid = ? AND pc_multiple = ?\", array($to_be_removed, $row['pc_multiple']));\n                }\n            }\n\n            // this difference means that some providers was added\n            // so we must insert this event for them\n            $r2 = array_diff($providers_new, $providers_current);\n            if (count($r2)) {\n                foreach ($r2 as $to_be_inserted) {\n                    sqlStatement(\"INSERT INTO openemr_postcalendar_events ( pc_catid, pc_multiple, pc_aid, pc_pid, pc_title, pc_time, pc_hometext, pc_informant, pc_eventDate, pc_endDate, pc_duration, pc_recurrtype, pc_recurrspec, pc_startTime, pc_endTime, pc_alldayevent, pc_apptstatus, pc_prefcatid, pc_location, pc_eventstatus, pc_sharing, pc_facility)\n            VALUES ( \" .\n                        \"'\" . add_escape_custom($_POST['form_category']) . \"', \" .\n                        \"'\" . add_escape_custom($row['pc_multiple']) . \"', \" .\n                        \"'\" . add_escape_custom($to_be_inserted) . \"', \" .\n                        \"'\" . add_escape_custom($_SESSION['pid']) . \"', \" .\n                        \"'\" . add_escape_custom($_POST['form_title']) . \"', \" .\n                        \"NOW(), \" .\n                        \"'\" . add_escape_custom($_POST['form_comments']) . \"', \" .\n                        \"'\" . add_escape_custom($_SESSION['providerId']) . \"', \" .\n                        \"'\" . add_escape_custom($event_date) . \"', \" .\n                        \"'\" . add_escape_custom(fixDate($_POST['form_enddate'])) . \"', \" .\n                        \"'\" . add_escape_custom(($duration * 60)) . \"', \" .\n                        \"'\" . ($_POST['form_repeat'] ? '1' : '0') . \"', \" .\n                        \"'\" . add_escape_custom($recurrspec) . \"', \" .\n                        \"'\" . add_escape_custom($starttime) . \"', \" .\n                        \"'\" . add_escape_custom($endtime) . \"', \" .\n                        \"'\" . add_escape_custom($_POST['form_allday']) . \"', \" .\n                        \"'\" . add_escape_custom($_POST['form_apptstatus']) . \"', \" .\n                        \"'\" . add_escape_custom($_POST['form_prefcat']) . \"', \" .\n                        \"'\" . add_escape_custom($locationspec) . \"', \" .\n                        \"1, \" .\n                        \"1, \" . (int)$_POST['facility'] . \" )\"); // FF stuff\n                } // foreach\n            } //if count\n\n\n            // after the two diffs above, we must update for remaining providers\n            // those who are intersected in $providers_current and $providers_new\n            foreach ($_POST['form_provider_ae'] as $provider) {\n                sqlStatement(\"UPDATE openemr_postcalendar_events SET \" .\n                    \"pc_catid = '\" . add_escape_custom($_POST['form_category']) . \"', \" .\n                    \"pc_pid = '\" . add_escape_custom($_SESSION['pid']) . \"', \" .\n                    \"pc_title = '\" . add_escape_custom($_POST['form_title']) . \"', \" .\n                    \"pc_time = NOW(), \" .\n                    \"pc_hometext = '\" . add_escape_custom($_POST['form_comments']) . \"', \" .\n                    \"pc_informant = '\" . add_escape_custom($_SESSION['providerId']) . \"', \" .\n                    \"pc_eventDate = '\" . add_escape_custom($event_date) . \"', \" .\n                    \"pc_endDate = '\" . add_escape_custom(fixDate($_POST['form_enddate'])) . \"', \" .\n                    \"pc_duration = '\" . add_escape_custom(($duration * 60)) . \"', \" .\n                    \"pc_recurrtype = '\" . ($_POST['form_repeat'] ? '1' : '0') . \"', \" .\n                    \"pc_recurrspec = '\" . add_escape_custom($recurrspec) . \"', \" .\n                    \"pc_startTime = '\" . add_escape_custom($starttime) . \"', \" .\n                    \"pc_endTime = '\" . add_escape_custom($endtime) . \"', \" .\n                    \"pc_alldayevent = '\" . add_escape_custom($_POST['form_allday']) . \"', \" .\n                    \"pc_apptstatus = '\" . add_escape_custom($_POST['form_apptstatus']) . \"', \" .\n                    \"pc_prefcatid = '\" . add_escape_custom($_POST['form_prefcat']) . \"', \" .\n                    \"pc_facility = '\" . (int)$_POST['facility'] . \"' \" . // FF stuff\n                    \"WHERE pc_aid = '\" . add_escape_custom($provider) . \"' AND pc_multiple='\" . add_escape_custom($row['pc_multiple']) . \"'\");\n            } // foreach\n\n            /* ==========================================\n          // multi providers EOS\n            ==========================================*/\n        } elseif (!$row['pc_multiple']) {\n            if ($GLOBALS['select_multi_providers']) {\n                $prov = $_POST['form_provider_ae'][0];\n            } else {\n                $prov = $_POST['form_provider_ae'];\n            }\n            $insert = false;\n            // simple provider case\n            sqlStatement(\"UPDATE openemr_postcalendar_events SET \" .\n                \"pc_catid = '\" . add_escape_custom($_POST['form_category']) . \"', \" .\n                \"pc_aid = '\" . add_escape_custom($prov) . \"', \" .\n                \"pc_pid = '\" . add_escape_custom($_SESSION['pid']) . \"', \" .\n                \"pc_title = '\" . add_escape_custom($_POST['form_title']) . \"', \" .\n                \"pc_time = NOW(), \" .\n                \"pc_hometext = '\" . add_escape_custom($_POST['form_comments']) . \"', \" .\n                \"pc_informant = '\" . add_escape_custom($_SESSION['providerId']) . \"', \" .\n                \"pc_eventDate = '\" . add_escape_custom($event_date) . \"', \" .\n                \"pc_endDate = '\" . add_escape_custom(fixDate($_POST['form_enddate'] ?? '')) . \"', \" .\n                \"pc_duration = '\" . add_escape_custom(($duration * 60)) . \"', \" .\n                \"pc_recurrtype = '\" . (($_POST['form_repeat'] ?? null) ? '1' : '0') . \"', \" .\n                \"pc_recurrspec = '\" . add_escape_custom($recurrspec) . \"', \" .\n                \"pc_startTime = '\" . add_escape_custom($starttime) . \"', \" .\n                \"pc_endTime = '\" . add_escape_custom($endtime) . \"', \" .\n                \"pc_alldayevent = '\" . add_escape_custom(($_POST['form_allday'] ?? '')) . \"', \" .\n                \"pc_apptstatus = '\" . add_escape_custom($_POST['form_apptstatus']) . \"', \" .\n                \"pc_prefcatid = '\" . add_escape_custom(($_POST['form_prefcat'] ?? '')) . \"', \" .\n                \"pc_facility = '\" . (int)($_POST['facility'] ?? null) . \"' \" . // FF stuff\n                \"WHERE pc_eid = '\" . add_escape_custom($eid) . \"'\");\n        }\n\n        // =======================================\n        // EOS multi providers case\n        // =======================================\n\n        // EVENTS TO FACILITIES\n\n        $e2f = (int)$eid;\n\n        /* =======================================================\n      //                                  INSERT EVENTS\n        ========================================================*/\n    } else {\n        // =======================================\n        // multi providers case\n        // =======================================\n\n        if (is_array($_POST['form_provider_ae'])) {\n            // obtain the next available unique key to group multiple providers around some event\n            $q = sqlStatement(\"SELECT MAX(pc_multiple) as max FROM openemr_postcalendar_events\");\n            $max = sqlFetchArray($q);\n            $new_multiple_value = $max['max'] + 1;\n\n            foreach ($_POST['form_provider_ae'] as $provider) {\n                sqlStatement(\"INSERT INTO openemr_postcalendar_events ( \" .\n                    \"pc_catid, pc_multiple, pc_aid, pc_pid, pc_title, pc_time, pc_hometext, \" .\n                    \"pc_informant, pc_eventDate, pc_endDate, pc_duration, pc_recurrtype, \" .\n                    \"pc_recurrspec, pc_startTime, pc_endTime, pc_alldayevent, \" .\n                    \"pc_apptstatus, pc_prefcatid, pc_location, pc_eventstatus, pc_sharing, pc_facility \" .\n                    \") VALUES ( \" .\n                    \"'\" . add_escape_custom($_POST['form_category']) . \"', \" .\n                    \"'\" . add_escape_custom($new_multiple_value) . \"', \" .\n                    \"'\" . add_escape_custom($provider) . \"', \" .\n                    \"'\" . add_escape_custom($_SESSION['pid']) . \"', \" .\n                    \"'\" . add_escape_custom($_POST['form_title']) . \"', \" .\n                    \"NOW(), \" .\n                    \"'\" . add_escape_custom($_POST['form_comments']) . \"', \" .\n                    \"'\" . add_escape_custom($_SESSION['providerId']) . \"', \" .\n                    \"'\" . add_escape_custom($event_date) . \"', \" .\n                    \"'\" . add_escape_custom(fixDate($_POST['form_enddate'])) . \"', \" .\n                    \"'\" . add_escape_custom(($duration * 60)) . \"', \" .\n                    \"'\" . ($_POST['form_repeat'] ? '1' : '0') . \"', \" .\n                    \"'\" . add_escape_custom($recurrspec) . \"', \" .\n                    \"'\" . add_escape_custom($starttime) . \"', \" .\n                    \"'\" . add_escape_custom($endtime) . \"', \" .\n                    \"'\" . add_escape_custom($_POST['form_allday']) . \"', \" .\n                    \"'\" . add_escape_custom($_POST['form_apptstatus']) . \"', \" .\n                    \"'\" . add_escape_custom($_POST['form_prefcat']) . \"', \" .\n                    \"'\" . add_escape_custom($locationspec) . \"', \" .\n                    \"1, \" .\n                    \"1, \" . (int)$_POST['facility'] . \" )\"); // FF stuff\n            } // foreach\n        } else {\n            $_POST['form_apptstatus'] = '^';\n            $insert = true;\n            sqlStatement(\"INSERT INTO openemr_postcalendar_events ( \" .\n                \"pc_catid, pc_aid, pc_pid, pc_title, pc_time, pc_hometext, \" .\n                \"pc_informant, pc_eventDate, pc_endDate, pc_duration, pc_recurrtype, \" .\n                \"pc_recurrspec, pc_startTime, pc_endTime, pc_alldayevent, \" .\n                \"pc_apptstatus, pc_prefcatid, pc_location, pc_eventstatus, pc_sharing, pc_facility \" .\n                \") VALUES ( \" .\n                \"'\" . add_escape_custom($_POST['form_category']) . \"', \" .\n                \"'\" . add_escape_custom($_POST['form_provider_ae']) . \"', \" .\n                \"'\" . add_escape_custom($_SESSION['pid']) . \"', \" .\n                \"'\" . add_escape_custom($_POST['form_title']) . \"', \" .\n                \"NOW(), \" .\n                \"'\" . add_escape_custom($_POST['form_comments']) . \"', \" .\n                \"'\" . add_escape_custom($_SESSION['providerId']) . \"', \" .\n                \"'\" . add_escape_custom($event_date) . \"', \" .\n                \"'\" . add_escape_custom(fixDate(($_POST['form_enddate'] ?? ''))) . \"', \" .\n                \"'\" . add_escape_custom(($duration * 60)) . \"', \" .\n                \"'\" . (($_POST['form_repeat'] ?? null) ? '1' : '0') . \"', \" .\n                \"'\" . add_escape_custom($recurrspec) . \"', \" .\n                \"'\" . add_escape_custom($starttime) . \"', \" .\n                \"'\" . add_escape_custom($endtime) . \"', \" .\n                \"'\" . add_escape_custom(($_POST['form_allday'] ?? '')) . \"', \" .\n                \"'\" . add_escape_custom($_POST['form_apptstatus']) . \"', \" .\n                \"'\" . add_escape_custom(($_POST['form_prefcat'] ?? null)) . \"', \" .\n                \"'\" . add_escape_custom($locationspec) . \"', \" .\n                \"1, \" .\n                \"1, \" . (int)($_POST['facility'] ?? null) . \")\"); // FF stuff\n        } // INSERT single\n    } // else - insert\n} elseif (($_POST['form_action'] ?? null) == \"delete\") {\n// =======================================\n//  multi providers case\n// =======================================\n    if ($GLOBALS['select_multi_providers']) {\n        // what is multiple key around this $eid?\n        $row = sqlQuery(\"SELECT pc_multiple FROM openemr_postcalendar_events WHERE pc_eid = ?\", array($eid));\n        if ($row['pc_multiple']) {\n            sqlStatement(\"DELETE FROM openemr_postcalendar_events WHERE pc_multiple = ?\", array($row['pc_multiple']));\n        } else {\n            sqlStatement(\"DELETE FROM openemr_postcalendar_events WHERE pc_eid = ?\", array($eid));\n        }\n\n        // =======================================\n        //  EOS multi providers case\n        // =======================================\n    } else {\n        sqlStatement(\"DELETE FROM openemr_postcalendar_events WHERE pc_eid = ?\", array($eid));\n    }\n}\n\nif (!empty($_POST['form_action'])) {\n    // Leave\n    $type = $insert ? xl(\"A New Appointment\") : xl(\"An Updated Appointment\");\n    $note = $type . \" \" . xl(\"request was received from portal patient\") . \" \";\n    $note .= $_SESSION['ptName'] . \" \" . xl(\"regarding appointment dated\") . \" \" . $event_date . \" \" . $starttime . \". \";\n    $note .= !empty($_POST['form_comments']) ? (xl(\"Reason\") . \" \" . $_POST['form_comments']) : \"\";\n    $note .= \". \" . xl(\"Use Portal Dashboard to confirm with patient.\");\n    $title = xl(\"Patient Reminders\");\n    $user = sqlQueryNoLog(\"SELECT users.username FROM users WHERE authorized = 1 And id = ?\", array($_POST['form_provider_ae']));\n    $rtn = addPnote($_SESSION['pid'], $note, 1, 1, $title, $user['username'], '', 'New');\n\n    $_SESSION['whereto'] = '#appointmentcard';\n    header('Location:./home.php');\n    exit();\n}\n\n// If we get this far then we are displaying the form.\n\n$statuses = array(\n    '-' => '',\n    '*' => xl('* Reminder done'),\n    '+' => xl('+ Chart pulled'),\n    'x' => xl('x Cancelled'), // added Apr 2008 by JRM\n    '?' => xl('? No show'),\n    '@' => xl('@ Arrived'),\n    '~' => xl('~ Arrived late'),\n    '!' => xl('! Left w/o visit'),\n    '#' => xl('# Ins/fin issue'),\n    '<' => xl('< In exam room'),\n    '>' => xl('> Checked out'),\n    '$' => xl('$ Coding done'),\n    '^' => xl('^ Pending'),\n);\n\n$repeats = 0; // if the event repeats\n$repeattype = '0';\n$repeatfreq = '0';\n$patienttitle = \"\";\n$hometext = \"\";\n$row = array();\n\n// If we are editing an existing event, then get its data.\nif ($eid) {\n    $row = sqlQuery(\"SELECT * FROM openemr_postcalendar_events WHERE pc_eid = ?\", array($eid));\n    $date = $row['pc_eventDate'];\n    $userid = $row['pc_aid'];\n    $patientid = $row['pc_pid'];\n    $starttimeh = substr($row['pc_startTime'], 0, 2) + 0;\n    $starttimem = substr($row['pc_startTime'], 3, 2);\n    $repeats = $row['pc_recurrtype'];\n    $multiple_value = $row['pc_multiple'];\n\n    if (preg_match('/\"event_repeat_freq_type\";s:1:\"(\\d)\"/', $row['pc_recurrspec'], $matches)) {\n        $repeattype = $matches[1];\n    }\n\n    if (preg_match('/\"event_repeat_freq\";s:1:\"(\\d)\"/', $row['pc_recurrspec'], $matches)) {\n        $repeatfreq = $matches[1];\n    }\n\n    $hometext = $row['pc_hometext'];\n    if (substr($hometext, 0, 6) == ':text:') {\n        $hometext = substr($hometext, 6);\n    }\n} else {\n    $patientid = $_GET['pid'];\n}\n\n// If we have a patient ID, get the name and phone numbers to display.\nif ($patientid) {\n    $prow = sqlQuery(\"SELECT lname, fname, phone_home, phone_biz, DOB \" .\n        \"FROM patient_data WHERE pid = ?\", array($patientid));\n    $patientname = $prow['lname'] . \", \" . $prow['fname'];\n    if ($prow['phone_home']) {\n        $patienttitle .= \" H=\" . $prow['phone_home'];\n    }\n\n    if ($prow['phone_biz']) {\n        $patienttitle .= \" W=\" . $prow['phone_biz'];\n    }\n}\n\n// Get the providers list.\n$ures = sqlStatement(\"SELECT `id`, `username`, `fname`, `lname`, `mname` FROM `users` WHERE \" .\n    \"`authorized` != 0 AND `active` = 1 AND `username` > '' ORDER BY `lname`, `fname`\");\n\n//Set default facility for a new event based on the given 'userid'\nif ($userid) {\n    $pref_facility = sqlFetchArray(sqlStatement(\"SELECT facility_id, facility FROM users WHERE id = ?\", array($userid)));\n    $e2f = $pref_facility['facility_id'];\n    $e2f_name = $pref_facility['facility'];\n}\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title><?php echo $eid ? xlt(\"Edit Event\") : xlt(\"Add New Event\"); ?></title>\n    <?php // no header necessary. scope is home.php ?>\n</head>\n<script>\n    var durations = Array();\n    <?php\n    // Read the event categories, generate their options list, and get\n    // the default event duration from them if this is a new event.\n    $cattype = 0;\n\n    // Get event categories.\n    $cres = sqlStatement(\"SELECT pc_catid, pc_cattype, pc_catname, \" .\n        \"pc_recurrtype, pc_duration, pc_end_all_day \" .\n        \"FROM openemr_postcalendar_categories where pc_active = 1 ORDER BY pc_seq\");\n    $catoptions = \"\";\n    $prefcat_options = \"    <option value='0'>-- \" . xlt(\"None{{Category}}\") . \" --</option>\\n\";\n    $thisduration = 0;\n    if ($eid) {\n        $thisduration = $row['pc_alldayevent'] ? 1440 : round($row['pc_duration'] / 60);\n    }\n    while ($crow = sqlFetchArray($cres)) {\n        $duration = round($crow['pc_duration'] / 60);\n        if ($crow['pc_end_all_day']) {\n            $duration = 1440;\n        }\n\n        // This section is to build the list of preferred categories:\n        if ($duration) {\n            $prefcat_options .= \" <option value='\" . attr($crow['pc_catid']) . \"'\";\n            if ($eid) {\n                if ($crow['pc_catid'] == $row['pc_prefcatid']) {\n                    $prefcat_options .= \" selected\";\n                }\n            }\n\n            $prefcat_options .= \">\" . text(xl_appt_category($crow['pc_catname'])) . \"</option>\\n\";\n        }\n\n        if ($crow['pc_cattype'] != $cattype) {\n            continue;\n        }\n\n        echo \" durations[\" . attr($crow['pc_catid']) . \"] = \" . attr($duration) . \";\\n\";\n        // echo \" rectypes[\" . $crow['pc_catid'] . \"] = \" . $crow['pc_recurrtype'] . \"\\n\";\n        $catoptions .= \"    <option value='\" . attr($crow['pc_catid']) . \"'\";\n        if ($eid) {\n            if ($crow['pc_catid'] == $row['pc_catid']) {\n                $catoptions .= \" selected\";\n            }\n        } else {\n            if ($crow['pc_catid'] == $default_catid) {\n                $catoptions .= \" selected\";\n                $thisduration = $duration;\n            }\n        }\n\n        $catoptions .= \">\" . text(xl_appt_category($crow['pc_catname'])) . \"</option>\\n\";\n    }\n    // Fix up the time format for AM/PM.\n    $startampm = '1';\n    if ($starttimeh >= 12) { // p.m. starts at noon and not 12:01\n        $startampm = '2';\n        if ($starttimeh > 12) {\n            $starttimeh -= 12;\n        }\n    }\n\n    ?>\n</script>\n<body class=\"skin-blue\">\n    <div class=\"container-fluid\">\n        <form method='post' name='theaddform' id='theaddform' action='add_edit_event_user.php?eid=<?php echo attr_url($eid); ?>'>\n            <div class=\"col-12\">\n                <input type=\"hidden\" name=\"form_action\" id=\"form_action\" value=\"\" />\n                <input type='hidden' name='form_title' id='form_title' value='<?php echo ($row['pc_catid'] ?? '') ? attr($row['pc_title']) : xla(\"Office Visit\"); ?>' />\n                <input type='hidden' name='form_apptstatus' id='form_apptstatus' value='<?php echo ($row['pc_apptstatus'] ?? '') ? attr($row['pc_apptstatus'] ?? '') : \"^\" ?>' />\n                <div class=\"row form-group\">\n                    <div class=\"input-group col-12 col-md-6\">\n                        <label class=\"mr-2\" for=\"form_category\"><?php echo xlt('Visit'); ?>:</label>\n                        <select class=\"form-control mb-1\" onchange='set_category()' id='form_category' name='form_category' value='<?php echo (($row['pc_catid'] ?? '') > \"\") ? attr($row['pc_catid']) : '5'; ?>'>\n                            <?php echo $catoptions ?>\n                        </select>\n                    </div>\n                    <div class=\"input-group col-12 col-md-6\">\n                        <label class=\"mr-2\" for=\"form_date\"><?php echo xlt('Date'); ?>:</label>\n                        <input class=\"form-control mb-1\" type='text' name='form_date' readonly id='form_date' value='<?php echo (isset($eid) && $eid) ? attr($row['pc_eventDate']) : attr($date); ?>' />\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"form-group form-inline col-12\">\n                        <div class=\"input-group mb-1\">\n                            <label class=\"mr-2\"><?php echo xlt('Time'); ?>:</label>\n                            <input class=\"form-control col-2 col-md-3\" type='text' name='form_hour' size='2' value='<?php echo (isset($eid)) ? $starttimeh : ''; ?>' title='<?php echo xla('Event start time'); ?>' readonly />\n                            <input class=\"form-control col-2 col-md-3\" type='text' name='form_minute' size='2' value='<?php echo (isset($eid)) ? $starttimem : ''; ?>' title='<?php echo xla('Event start time'); ?>' readonly />\n                            <select class=\"form-control col-3 col-md-4\" name='form_ampm' title='Note: 12:00 noon is PM, not AM' readonly>\n                                <option value='1'><?php echo xlt('AM'); ?></option>\n                                <option value='2'<?php echo ($startampm == '2') ? \" selected\" : \"\"; ?>><?php echo xlt('PM'); ?></option>\n                            </select>\n                        </div>\n                        <div class=\"input-group\">\n                            <label class=\"mr-2\" for=\"form_duration\"><?php echo xlt('Duration'); ?></label>\n                            <input class=\"form-control\" type='text' size='1' id='form_duration' name='form_duration' value='<?php echo ($row['pc_duration'] ?? '') ? ($row['pc_duration'] * 1 / 60) : attr($thisduration) ?>' readonly />\n                            <span class=\"input-group-append\">\n                            <span class=\"input-group-text\"><?php echo \"&nbsp;\" . xlt('minutes'); ?></span>\n                        </span>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"input-group col-12 mb-1\">\n                        <label class=\"mr-2\" for=\"form_patient\"><?php echo xlt('Patient'); ?>:</label>\n                        <input class=\"form-control\" type='text' id='form_patient' name='form_patient' value='<?php echo attr($patientname); ?>' title='Patient' readonly />\n                        <input type='hidden' name='form_pid' value='<?php echo attr($patientid); ?>' />\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"input-group col-12 mb-1\">\n                        <label class=\"mr-2\" for=\"form_provider_ae\"><?php echo xlt('Provider'); ?>:</label>\n                        <select class=\"form-control\" name='form_provider_ae' id='form_provider_ae' onchange='change_provider();'>\n                            <?php\n                            // present a list of providers to choose from\n                            // default to the currently logged-in user\n                            while ($urow = sqlFetchArray($ures)) {\n                                echo \"<option value='\" . attr($urow['id']) . \"'\";\n                                if (($urow['id'] == ($_GET['userid'] ?? null)) || ($urow['id'] == $userid)) {\n                                    echo \" selected\";\n                                }\n                                echo \">\" . text($urow['lname']);\n                                if ($urow['fname']) {\n                                    echo \", \" . text($urow['fname']);\n                                }\n                                echo \"</option>\\n\";\n                            }\n                            ?>\n                        </select>\n                        <div class=\"text-right\">\n                            <input type='button' class='btn btn-success' value='<?php echo xla('Openings'); ?>' onclick='find_available()' />\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"input-group col-12\">\n                        <label class=\"mr-2\"><?php echo xlt('Reason'); ?>:</label>\n                        <input class=\"form-control\" type='text' size='40' name='form_comments' value='<?php echo attr($hometext); ?>' title='<?php echo xla('Optional information about this event'); ?>' />\n                    </div>\n                </div>\n                <div class=\"row input-group my-1\">\n                    <?php if (($_GET['eid'] ?? null) && $row['pc_apptstatus'] !== 'x') { ?>\n                        <input type='button' id='form_cancel' class='btn btn-danger' onsubmit='return false' value='<?php echo xla('Cancel Appointment'); ?>' onclick=\"cancel_appointment()\" />\n                    <?php } ?>\n                    <input type='button' name='form_save' class='btn btn-success' onsubmit='return false' value='<?php echo xla('Save'); ?>' onclick=\"validate()\" />\n                </div>\n            </div>\n        </form>\n        <script>\n            function change_provider() {\n                var f = document.forms.namedItem(\"theaddform\");\n                f.form_date.value = '';\n                f.form_hour.value = '';\n                f.form_minute.value = '';\n            }\n\n            function set_display() {\n                var f = document.forms.namedItem(\"theaddform\");\n                var si = document.getElementById('form_category');\n                if (si.selectedIndex >= 0) {\n                    var catid = si.options[si.selectedIndex].value;\n                    //var style_apptstatus = document.getElementById('title_apptstatus').style;\n                    //var style_prefcat = document.getElementById('title_prefcat').style;\n                    // will keep this for future. not needed now.\n                }\n            }\n\n            function cancel_appointment() {\n                let f = document.forms.namedItem(\"theaddform\");\n                let msg = <?php echo xlj(\"Click Okay if you are sure you want to cancel this appointment?\") . \"\\n\" .\n                    xlj(\"It is prudent to follow up with provider if not contacted.\") ?>;\n                let msg_reason = <?php echo xlj(\"You must enter a reason to cancel this appointment?\") . \"\\n\" .\n                    xlj(\"Reason must be at least 10 characters!\") ?>;\n                if (f.form_comments.value.length <= 10) {\n                    alert(msg_reason);\n                    return false;\n                }\n                let yn = confirm(msg);\n                if (!yn) {\n                    return false;\n                }\n                document.getElementById('form_apptstatus').value = \"x\";\n                validate();\n            }\n\n            // Do whatever is needed when a new event category is selected.\n            // For now this means changing the event title and duration.\n            function set_category() {\n                var f = document.forms.namedItem(\"theaddform\");\n                var s = f.form_category;\n                if (s.selectedIndex >= 0) {\n                    var catid = s.options[s.selectedIndex].value;\n                    f.form_title.value = s.options[s.selectedIndex].text;\n                    f.form_duration.value = durations[catid];\n                    set_display();\n                }\n            }\n\n            // This is for callback by the find-available popup.\n            function setappt(year, mon, mday, hours, minutes) {\n                var f = document.forms.namedItem(\"theaddform\");\n                f.form_date.value = '' + year + '-' +\n                    ('' + (mon + 100)).substring(1) + '-' +\n                    ('' + (mday + 100)).substring(1);\n                f.form_ampm.selectedIndex = (hours > 12) ? 1 : 0;\n                if (hours == 0) {\n                    f.form_hour.value = 12;\n                } else {\n                    f.form_hour.value = (hours >= 13) ? hours - 12 : hours;\n                }\n                f.form_minute.value = minutes;\n            }\n\n            function get_form_category_value() {\n                var catid = 0;\n                var f = document.forms.namedItem(\"theaddform\");\n                var s = f.form_category;\n                if (s.selectedIndex >= 0) {\n                    catid = s.options[s.selectedIndex].value;\n                }\n                return catid;\n            }\n\n            // Invoke the find-available popup.\n            function find_available() {\n                // when making an appointment for a specific provider\n                var catId = get_form_category_value() || 5;\n                var se = document.getElementById('form_provider_ae');\n                <?php if ($userid != 0) { ?>\n                s = se.value;\n                <?php } else {?>\n                s = se.options[se.selectedIndex].value;\n                <?php }?>\n                var formDate = document.getElementById('form_date');\n                var url = 'find_appt_popup_user.php?bypatient&providerid=' + encodeURIComponent(s) + '&catid=' + encodeURIComponent(catId)\n                    + '&startdate=' + encodeURIComponent(formDate.value);\n                var params = {\n                    buttons: [\n                        {text: <?php echo xlj('Cancel'); ?>, close: true, style: 'danger btn-sm'}\n\n                    ],\n                    allowResize: true,\n                    dialogId: 'apptDialog',\n                    type: 'iframe'\n                };\n                dlgopen(url, 'apptFind', 'modal-md', 300, '', 'Find Date', params);\n            }\n\n            // Check for errors when the form is submitted.\n            function validate() {\n                var f = document.getElementById('theaddform');\n                if (!f.form_date.value || !f.form_hour.value || !f.form_minute.value) {\n                    alert(<?php echo xlj('Please click on Openings to select a time.'); ?>);\n                    return false;\n                }\n\n                if (f.form_patient.value == '') {\n                    alert(<?php echo xlj('Your Id is missing. Cancel and try again.'); ?>);\n                    return false;\n                }\n\n                var form_action = document.getElementById('form_action');\n                form_action.value = \"save\";\n                f.submit();\n                return false;\n            }\n\n            <?php if ($eid) { ?>\n            set_display();\n            <?php } ?>\n            $(function () {\n\n            });\n        </script>\n    </div>\n</body>\n</html>\n", "<?php\n\n/**\n *\n * Modified from main codebase for the patient portal.\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Rod Roark <rod@sunsetsystems.com>\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @author    Ian Jardine ( github.com/epsdky )\n * @copyright Copyright (C) 2005-2013 Rod Roark <rod@sunsetsystems.com>\n * @copyright Copyright (C) 2016-2017 Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (C) 2019 Ian Jardine ( github.com/epsdky )\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n// Note from Rod 2013-01-22:\n// This module needs to be refactored to share the same code that is in\n// interface/main/calendar/find_appt_popup.php.  It contains an old version\n// of that logic and does not support exception dates for repeating events.\n\n// Rod mentioned in the previous comment that the code \"does not support exception dates for repeating events\".\n// This issue no longer exists - epsdky 2019\n\n//continue session\n// Will start the (patient) portal OpenEMR session/cookie.\nrequire_once(dirname(__FILE__) . \"/../src/Common/Session/SessionUtil.php\");\nOpenEMR\\Common\\Session\\SessionUtil::portalSessionStart();\n//\n\n//landing page definition -- where to go if something goes wrong\n$landingpage = \"index.php?site=\" . urlencode($_SESSION['site_id']);\n//\n\n// kick out if patient not authenticated\nif (isset($_SESSION['pid']) && isset($_SESSION['patient_portal_onsite_two'])) {\n    $pid = $_SESSION['pid'];\n} else {\n    OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n    header('Location: ' . $landingpage . '&w');\n    exit();\n}\n\n//\n\n$ignoreAuth_onsite_portal = true;\n\nrequire_once(\"../interface/globals.php\");\nrequire_once(\"$srcdir/patient.inc.php\");\nrequire_once(dirname(__FILE__) . \"/../library/appointments.inc.php\");\n\nuse OpenEMR\\Core\\Header;\n\n$input_catid = $_REQUEST['catid'];\n\n// Record an event into the slots array for a specified day.\nfunction doOneDay($catid, $udate, $starttime, $duration, $prefcatid)\n{\n    global $slots, $slotsecs, $slotstime, $slotbase, $slotcount, $input_catid;\n    $udate = strtotime($starttime, $udate);\n    if ($udate < $slotstime) {\n        return;\n    }\n\n    $i = (int)($udate / $slotsecs) - $slotbase;\n    $iend = (int)(($duration + $slotsecs - 1) / $slotsecs) + $i;\n    if ($iend > $slotcount) {\n        $iend = $slotcount;\n    }\n\n    if ($iend <= $i) {\n        $iend = $i + 1;\n    }\n\n    for (; $i < $iend; ++$i) {\n        if ($catid == 2) {        // in office\n            // If a category ID was specified when this popup was invoked, then select\n            // only IN events with a matching preferred category or with no preferred\n            // category; other IN events are to be treated as OUT events.\n            if ($input_catid) {\n                if (!empty($slots[$i])) {\n                    if ($prefcatid == $input_catid || !$prefcatid) {\n                        $slots[$i] |= 1;\n                    } else {\n                        $slots[$i] |= 2;\n                    }\n                } else {\n                    $slots[$i] |= 1;\n                }\n            } else {\n                $slots[$i] |= 1;\n            }\n\n            break; // ignore any positive duration for IN\n        } elseif ($catid == 3) { // out of office\n            $slots[$i] |= 2;\n            break; // ignore any positive duration for OUT\n        } else { // all other events reserve time\n            $slots[$i] |= 4;\n        }\n    }\n}\n\n// seconds per time slot\n$slotsecs = $GLOBALS['calendar_interval'] * 60;\n\n$catslots = 1;\nif ($input_catid) {\n    $srow = sqlQuery(\"SELECT pc_duration FROM openemr_postcalendar_categories WHERE pc_catid = ?\", array($input_catid));\n    if ($srow['pc_duration']) {\n        $catslots = ceil($srow['pc_duration'] / $slotsecs);\n    }\n}\n\n$info_msg = \"\";\n\n$searchdays = 7; // default to a 1-week lookahead\nif ($_REQUEST['searchdays'] ?? null) {\n    $searchdays = $_REQUEST['searchdays'];\n}\n\n// Get a start date.\nif (\n    $_REQUEST['startdate'] && preg_match(\n        \"/(\\d\\d\\d\\d)\\D*(\\d\\d)\\D*(\\d\\d)/\",\n        $_REQUEST['startdate'],\n        $matches\n    )\n) {\n    $sdate = $matches[1] . '-' . $matches[2] . '-' . $matches[3];\n} else {\n    $sdate = date(\"Y-m-d\");\n}\n\n// Get an end date - actually the date after the end date.\npreg_match(\"/(\\d\\d\\d\\d)\\D*(\\d\\d)\\D*(\\d\\d)/\", $sdate, $matches);\n$edate = date(\n    \"Y-m-d\",\n    mktime(0, 0, 0, $matches[2], $matches[3] + $searchdays, $matches[1])\n);\n\n// compute starting time slot number and number of slots.\n$slotstime = strtotime(\"$sdate 00:00:00\");\n$slotetime = strtotime(\"$edate 00:00:00\");\n$slotbase = (int)($slotstime / $slotsecs);\n$slotcount = (int)($slotetime / $slotsecs) - $slotbase;\n\nif ($slotcount <= 0 || $slotcount > 100000) {\n    die(\"Invalid date range.\");\n}\n\n$slotsperday = (int)(60 * 60 * 24 / $slotsecs);\n\n// If we have a provider, search.\n//\nif ($_REQUEST['providerid']) {\n    $providerid = $_REQUEST['providerid'];\n\n    // Create and initialize the slot array. Values are bit-mapped:\n    //   bit 0 = in-office occurs here\n    //   bit 1 = out-of-office occurs here\n    //   bit 2 = reserved\n    // So, values may range from 0 to 7.\n    //\n    $slots = array_pad(array(), $slotcount, 0);\n\n    // Note there is no need to sort the query results.\n    //  echo $sdate.\" -- \".$edate;\n    $query = \"SELECT pc_eventDate, pc_endDate, pc_startTime, pc_duration, \" .\n        \"pc_recurrtype, pc_recurrspec, pc_alldayevent, pc_catid, pc_prefcatid, pc_title \" .\n        \"FROM openemr_postcalendar_events \" .\n        \"WHERE pc_aid = ? AND \" .\n        \"((pc_endDate >= ? AND pc_eventDate < ?) OR \" .\n        \"(pc_endDate = '0000-00-00' AND pc_eventDate >= ? AND pc_eventDate < ?))\";\n\n    $sqlBindArray = array();\n    array_push($sqlBindArray, $providerid, $sdate, $edate, $sdate, $edate);\n    //////\n    $events2 = fetchEvents($sdate, $edate, null, null, false, 0, $sqlBindArray, $query);\n    foreach ($events2 as $row) {\n        $thistime = strtotime($row['pc_eventDate'] . \" 00:00:00\");\n        doOneDay(\n            $row['pc_catid'],\n            $thistime,\n            $row['pc_startTime'],\n            $row['pc_duration'],\n            $row['pc_prefcatid']\n        );\n    }\n    //////\n\n    // Mark all slots reserved where the provider is not in-office.\n    // Actually we could do this in the display loop instead.\n    $inoffice = false;\n    for ($i = 0; $i < $slotcount; ++$i) {\n        if (($i % $slotsperday) == 0) {\n            $inoffice = false;\n        }\n\n        if ($slots[$i] & 1) {\n            $inoffice = true;\n        }\n\n        if ($slots[$i] & 2) {\n            $inoffice = false;\n        }\n\n        if (!$inoffice) {\n            $slots[$i] |= 4;\n        }\n    }\n}\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title><?php echo xlt('Find Available Appointments'); ?></title>\n    <?php Header::setupHeader(['no_main-theme', 'datetime-picker', 'opener']); ?>\n    <script>\n\n        function setappt(year, mon, mday, hours, minutes) {\n            opener.setappt(year, mon, mday, hours, minutes);\n            dlgclose();\n            return false;\n        }\n\n    </script>\n\n    <style>\n      form {\n        /* this eliminates the padding normally around a FORM tag */\n        padding: 0;\n        margin: 0;\n      }\n\n      #searchCriteria {\n        text-align: center;\n        width: 100%;\n        font-weight: bold;\n        padding: 0.1875rem;\n      }\n\n      #searchResults {\n        width: 100%;\n        height: 100%;\n        overflow: auto;\n      }\n\n      #searchResults table {\n        width: 100%;\n        border-collapse: collapse;\n        background-color: var(--white);\n      }\n\n      #searchResults td {\n        border-bottom: 1px solid var(--gray600);\n        padding: 1px 5px;\n      }\n\n      .blue_highlight {\n        background-color: #BBCCDD;\n        color: var(--white);\n      }\n\n      #am a, #am a:hover {\n        padding: 4px;\n        text-decoration: none;\n      }\n\n      #pm a, #pm a:hover {\n        color: var(--danger);\n        padding: 4px;\n        text-decoration: none;\n      }\n    </style>\n\n</head>\n\n<body class=\"body_top\">\n\n    <div class=\"table-primary\" id=\"searchCriteria\">\n        <form method='post' name='theform' action='./find_appt_popup_user.php?providerid=<?php echo attr_url($providerid); ?>&catid=<?php echo attr_url($input_catid); ?>'>\n            <input type=\"hidden\" name='bypatient' />\n            <div class=\"form-row mx-0 align-items-center\">\n                <label for=\"startdate\" class=\"col-1 mx-2 col-form-label\"><?php echo xlt('Start date:'); ?></label>\n                <div class=\"col-auto\">\n                    <input type='text' class='datepicker form-control' name='startdate' id='startdate' size='10' value='<?php echo attr($sdate); ?>' title='yyyy-mm-dd starting date for search' />\n                </div>\n                <label for=\"searchdays\" class=\"col-auto col-form-label\"><?php echo xlt('for'); ?></label>\n                <div class=\"col-auto\">\n                    <input type='text' class=\"form-control\" name='searchdays' id='searchdays' size='3' value='<?php echo attr($searchdays); ?>' title='Number of days to search from the start date' />\n                </div>\n                <label for=\"searchdays\" class=\"col-auto col-form-label\"><?php echo xlt('days'); ?></label>\n                <div class=\"col-auto\">\n                    <input type='submit' class=\"btn btn-primary btn-sm btn-block\" value='<?php echo xla('Search'); ?>' />\n                </div>\n            </div>\n    </div>\n\n    <?php if (!empty($slots)) : ?>\n        <div id=\"searchResultsHeader\">\n            <table class='table table-bordered'>\n\n            </table>\n        </div>\n\n        <div id=\"searchResults\" class=\"container-fluid\">\n            <div class=\"table-responsive\">\n                <table class='table table-sm table-striped table-bordered'>\n                    <thead id=\"searchResultsHeader\">\n                    <tr>\n                        <th class=\"table-dark text-light\"><?php echo xlt('Day'); ?></th>\n                        <th class=\"srTimes\"><?php echo xlt('Available Times'); ?></th>\n                    </tr>\n                    </thead>\n                    <?php\n                    $lastdate = \"\";\n                    $ampmFlag = \"am\"; // establish an AM-PM line break flag\n                    for ($i = 0; $i < $slotcount; ++$i) {\n                        $available = true;\n                        for ($j = $i; $j < $i + $catslots; ++$j) {\n                            if ($slots[$j] >= 4) {\n                                $available = false;\n                            }\n                        }\n\n                        if (!$available) {\n                            continue; // skip reserved slots\n                        }\n\n                        $utime = ($slotbase + $i) * $slotsecs;\n                        $thisdate = date(\"Y-m-d\", $utime);\n                        if ($thisdate != $lastdate) {\n                            // if a new day, start a new row\n                            if ($lastdate) {\n                                echo \"</div>\";\n                                echo \"</td>\\n\";\n                                echo \" </tr>\\n\";\n                            }\n\n                            $lastdate = $thisdate;\n                            echo \" <tr class='oneresult'>\\n\";\n                            echo \"  <td class='table-dark text-light'>\" . date(\"l\", $utime) . \"<br />\" . date(\"Y-m-d\", $utime) . \"</td>\\n\";\n                            echo \"  <td class='srTimes'>\";\n                            echo \"<div id='am'>AM<hr class='m-0 p-0 mb-n3'/><br/>\";\n                            $ampmFlag = \"am\";  // reset the AMPM flag\n                        }\n\n                        $ampm = date('a', $utime);\n                        if ($ampmFlag != $ampm) {\n                            echo \"</div><div id='pm'><hr class='m-0 p-0' />PM<hr class='m-0 p-0 mb-n3' /><br/>\";\n                        }\n\n                        $ampmFlag = $ampm;\n\n                        $atitle = \"Choose \" . date(\"h:i a\", $utime);\n                        $adate = getdate($utime);\n\n                        $anchor = \"<a href='' onclick='return setappt(\" .\n                            attr_js(date(\"Y\", $utime)) . \",\" .\n                            attr_js($adate['mon']) . \",\" .\n                            attr_js($adate['mday']) . \",\" .\n                            attr_js(date(\"G\", $utime)) . \",\" .\n                            attr_js(date(\"i\", $utime)) . \",\" .\n                            attr_js(date('a', $utime)) . \")'\" .\n                            \" title='\" . attr($atitle) . \"' alt='\" . attr($atitle) . \"'\" .\n                            \">\";\n                        echo (strlen(date('g', $utime)) < 2 ? \"<span style='visibility:hidden'>0</span>\" : \"\") .\n                            $anchor . date(\"g:i\", $utime) . \"</a> \";\n\n                        // If category duration is more than 1 slot, increment $i appropriately.\n                        // This is to avoid reporting available times on undesirable boundaries.\n                        $i += $catslots - 1;\n                    }\n\n                    if ($lastdate) {\n                        echo \"</td>\\n\";\n                        echo \" </tr>\\n\";\n                    } else {\n                        echo \" <tr><td colspan='2'> \" . xlt('No openings were found for this period.') . \"</td></tr>\\n\";\n                    }\n                    ?>\n                </table>\n            </div>\n        </div>\n        </div>\n    <?php endif; ?>\n\n    </form>\n\n    <script>\n\n        // jQuery stuff to make the page a little easier to use\n        $(function () {\n            $(\".oneresult\").hover(function () {\n                $(this).toggleClass(\"highlight\");\n            }, function () {\n                $(this).toggleClass(\"highlight\");\n            });\n            $(\".oneresult a\").hover(function () {\n                $(this).toggleClass(\"blue_highlight\");\n                $(this).children().toggleClass(\"blue_highlight\");\n            }, function () {\n                $(this).toggleClass(\"blue_highlight\");\n                $(this).children().toggleClass(\"blue_highlight\");\n            });\n\n            $('.datepicker').datetimepicker({\n                <?php $datetimepicker_timepicker = false; ?>\n                <?php $datetimepicker_formatInput = false; ?>\n                <?php require($GLOBALS['srcdir'] . '/js/xl/jquery-datetimepicker-2-5-4.js.php'); ?>\n                <?php // can add any additional javascript settings to datetimepicker here; need to prepend first setting with a comma ?>\n            });\n\n        });\n\n    </script>\n</body>\n</html>\n", "<?php\n\n/**\n * secure_chat.php\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @author    Tyler Wrenn <tyler@tylerwrenn.com>\n * @copyright Copyright (c) 2016-2021 Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2022 Tyler Wrenn <tyler@tylerwrenn.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nnamespace PatientPortal;\n\n// Will start the (patient) portal OpenEMR session/cookie.\nrequire_once(__DIR__ . \"/../../src/Common/Session/SessionUtil.php\");\n\\OpenEMR\\Common\\Session\\SessionUtil::portalSessionStart();\n\nif (isset($_SESSION['pid']) && isset($_SESSION['patient_portal_onsite_two'])) {\n    $pid = $_SESSION['pid'];\n    $ignoreAuth_onsite_portal = true;\n    require_once(__DIR__ . \"/../../interface/globals.php\");\n    define('IS_DASHBOARD', false);\n    define('IS_PORTAL', $_SESSION['pid']);\n} else {\n    \\OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n    $ignoreAuth = false;\n    require_once(__DIR__ . \"/../../interface/globals.php\");\n    if (!isset($_SESSION['authUserID'])) {\n        $landingpage = \"index.php\";\n        header('Location: ' . $landingpage);\n        exit;\n    }\n    $admin = sqlQueryNoLog(\n        \"SELECT CONCAT(users.fname,' ',users.lname) as user_name FROM users WHERE id = ?\",\n        array($_SESSION['authUserID'])\n    );\n    define('ADMIN_USERNAME', $admin['user_name']);\n    define('IS_DASHBOARD', $_SESSION['authUser']);\n    define('IS_PORTAL', false);\n    $_SERVER['REMOTE_ADDR'] = 'admin::' . $_SERVER['REMOTE_ADDR'];\n}\n\n// Ensure that username GET or POST parameters are not manipulated\n$usernameManipulatedFlag = false;\nif (!empty($_GET['username']) && ($_GET['username'] != 'currentol')) {\n    if (empty(IS_PORTAL)) {\n        if ($_GET['username'] != ADMIN_USERNAME) {\n            $usernameManipulatedFlag = true;\n        }\n    } else {\n        if ($_GET['username'] != $_SESSION['ptName']) {\n            $usernameManipulatedFlag = true;\n        }\n    }\n}\nif (!empty($_POST['username'])) {\n    if (empty(IS_PORTAL)) {\n        if ($_POST['username'] != ADMIN_USERNAME) {\n            $usernameManipulatedFlag = true;\n        }\n    } else {\n        if ($_POST['username'] != $_SESSION['ptName']) {\n            $usernameManipulatedFlag = true;\n        }\n    }\n}\nif ($usernameManipulatedFlag) {\n    http_response_code(401);\n    die(xlt(\"Something went wrong\"));\n}\n\nuse OpenEMR\\Core\\Header;\nuse OpenEMR\\PatientPortal\\Chat\\ChatController;\n\ndefine('C_USER', IS_PORTAL ?: IS_DASHBOARD);\ndefine('CHAT_HISTORY', '150');\ndefine('CHAT_ONLINE_RANGE', '1');\ndefine('ADMIN_USERNAME_PREFIX', 'adm_');\n\n// Start application.\n$msgApp = new ChatController();\n?>\n<!doctype html>\n<html ng-app=\"MsgApp\">\n<head>\n    <meta charset=\"utf-8\" />\n    <?php\n    Header::setupHeader(['no_main-theme', 'ckeditor', 'angular', 'angular-sanitize', 'checklist-model']);\n    ?>\n    <title><?php echo xlt('Secure Chat'); ?></title>\n    <meta name=\"author\" content=\"Jerry Padgett sjpadgett{{at}} gmail {{dot}} com\" />\n</head>\n<script>\n    (function () {\n        var MsgApp = angular.module('MsgApp', ['ngSanitize', \"checklist-model\"]);\n        MsgApp.config(function ($compileProvider) {\n                $compileProvider.aHrefSanitizationWhitelist(/^\\s*(https?|file|ftp|blob):|data:image\\//);\n            }\n        );\n        MsgApp.directive('ngEnter', function () {\n            return function (scope, element, attrs) {\n                element.bind(\"keydown keypress\", function (event) {\n                    if (event.which === 13) {\n                        scope.$apply(function () {\n                            scope.$eval(attrs.ngEnter);\n                        });\n                        event.preventDefault();\n                    }\n                });\n            };\n        });\n        MsgApp.directive('tooltip', function (e) {\n            return {\n                restrict: 'A',\n                link: function (scope, element, attrs) {\n                    $(element).hover(function () {\n                        $(element).tooltip('show');\n                    }, function () {\n                        $(element).tooltip('hide');\n                    });\n                }\n            };\n        });\n        MsgApp.filter('unique', function () {\n            return function (collection, keyname) {\n                var output = [],\n                    keys = [];\n                angular.forEach(collection, function (item) {\n                    var key = item[keyname];\n                    if (keys.indexOf(key) === -1) {\n                        keys.push(key);\n                        output.push(item);\n                    }\n                });\n                return output;\n            };\n        });\n\n        MsgApp.controller('MsgAppCtrl', ['$scope', '$http', '$filter', function ($scope, $http, $filter) {\n            $scope.urlListMessages = '?action=list'; // actions for restful\n            $scope.urlSaveMessage = '?action=save';\n            $scope.urlListOnlines = '?action=ping';\n            $scope.urlGetAuthUsers = '?action=authusers';\n\n            $scope.pidMessages = null;\n            $scope.pidPingServer = null;\n\n            $scope.beep = new Audio('beep.ogg'); // you've got mail!!!! really just a beep\n            $scope.messages = [];\n            $scope.online = null;\n            $scope.lastMessageId = null;\n            $scope.historyFromId = null;\n            $scope.onlines = []; // all online users id and ip's\n            $scope.user = <?php echo $_SESSION['ptName'] ? js_escape($_SESSION['ptName']) : js_escape(ADMIN_USERNAME); ?>;// current user - dashboard user is from session authUserID\n            $scope.userid = <?php echo IS_PORTAL ? js_escape($_SESSION['pid']) : js_escape($_SESSION['authUser']); ?>;\n            $scope.isPortal = \"<?php echo IS_PORTAL;?>\";\n            $scope.pusers = []; // selected recipients for chat\n            $scope.chatusers = []; // authorize chat recipients for dashboard user\n            $scope.noRecipError = <?php echo xlj(\"Please Select a Recipient for Message.\") ?>;\n            $scope.me = {\n                username: $scope.user,\n                message: null,\n                sender_id: $scope.userid,\n                recip_id: 0\n            };\n            $scope.checkAll = function () {\n                $scope.pusers = [];\n                $scope.pusers = $scope.chatusers.map(function (item) {\n                    return item.recip_id;\n                });\n                $scope.getAuthUsers();\n            };\n            $scope.uncheckAll = function () {\n                $scope.pusers = [];\n                $scope.getAuthUsers();\n            };\n            $scope.makeCurrent = function (sel) {\n                if (!sel.me) {\n                    $scope.pusers.splice(0, $scope.pusers.length);\n                    $scope.pusers.push(sel.sender_id);\n                }\n            };\n            $scope.pageTitleNotificator = {\n                vars: {\n                    originalTitle: window.document.title,\n                    interval: null,\n                    status: 0\n                },\n                on: function (title, intervalSpeed) {\n                    var self = this;\n                    if (!self.vars.status) {\n                        self.vars.interval = window.setInterval(function () {\n                            window.document.title = (self.vars.originalTitle === window.document.title) ?\n                                title : self.vars.originalTitle;\n                        }, intervalSpeed || 500);\n                        self.vars.status = 1;\n                    }\n                },\n                off: function () {\n                    window.clearInterval(this.vars.interval);\n                    window.document.title = this.vars.originalTitle;\n                    this.vars.status = 0;\n                }\n            };\n\n            $scope.editor = '';\n            $scope.editmsg = function () {\n                $scope.editor = CKEDITOR.instances['messageContent'];\n                if ($scope.editor) {\n                    $scope.editor.destroy(true);\n                }\n                $scope.editor = CKEDITOR.replace('messageContent', {\n                    toolbarGroups: [\n                        { name: 'document', groups: [ 'mode', 'document', 'doctools' ] },\n                        { name: 'clipboard', groups: [ 'clipboard', 'undo' ] },\n                        { name: 'editing', groups: [ 'find', 'selection', 'spellchecker', 'editing' ] },\n                        { name: 'forms', groups: [ 'forms' ] },\n                        { name: 'basicstyles', groups: [ 'basicstyles', 'cleanup' ] },\n                        { name: 'paragraph', groups: [ 'list', 'indent', 'blocks', 'align', 'bidi', 'paragraph' ] },\n                        { name: 'links', groups: [ 'links' ] },\n                        { name: 'insert', groups: [ 'insert' ] },\n                        { name: 'styles', groups: [ 'styles' ] },\n                        { name: 'colors', groups: [ 'colors' ] },\n                        { name: 'tools', groups: [ 'tools' ] },\n                        { name: 'others', groups: [ 'others' ] },\n                        { name: 'about', groups: [ 'about' ] }\n                    ],\n                    removeButtons: 'About,Table,Smiley,SpecialChar,PageBreak,Iframe,HorizontalRule,Anchor,Unlink,Link,NumberedList,BulletedList,Outdent,Indent,Blockquote,CreateDiv,JustifyLeft,JustifyCenter,JustifyRight,JustifyBlock,Language,BidiRtl,BidiLtr,CopyFormatting,RemoveFormat,Superscript,Subscript,Strike,Underline,Italic,Bold,Form,Checkbox,Radio,TextField,Textarea,Select,Button,ImageButton,HiddenField,SelectAll,Scayt,Find,Replace,PasteFromWord,Templates,NewPage,ExportPdf,Maximize,ShowBlocks,Source,Save,Preview,Print,Cut,Copy,Paste,PasteText,TextColor,BGColor',\n                    height: 250,\n                    width: '100%',\n                    resize_maxHeight: 650\n                });\n            };\n\n            $scope.saveedit = function () {\n                $scope.me.message = CKEDITOR.instances.messageContent.getData();\n                $scope.saveMessage();\n                $scope.editor.destroy(true);\n            };\n\n            $scope.saveMessage = function (form, callback) {\n                $scope.me.recip_id = JSON.stringify(angular.copy($scope.pusers));\n                var data = $.param($scope.me);\n                if (!($scope.me.username && $scope.me.username.trim())) {\n                    return $scope.openModal();\n                }\n                if (!($scope.me.message && $scope.me.message.trim() &&\n                    $scope.me.username && $scope.me.username.trim())) {\n                    return;\n                }\n                if ($scope.me.recip_id == \"[]\") {\n                    alert($scope.noRecipError);\n                    return;\n                }\n                $scope.me.message = '';\n                return $http({\n                    method: 'POST',\n                    url: $scope.urlSaveMessage,\n                    data: data,\n                    headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n                }).then(function successCallback(response) {\n                    $scope.listMessages(true);\n                }, function errorCallback(response) {\n                });\n            };\n\n            $scope.replaceShortcodes = function (message) {\n                var msg = '';\n                msg = message.toString().replace(/(\\[img])(.*)(\\[\\/img])/, \"<img class='img-responsive' src='$2' />\");\n                msg = msg.toString().replace(/(\\[url])(.*)(\\[\\/url])/, \"<a href='$2'>$2</a>\");\n                msg = message.toString().replace(\"<img \", \"<img class='img-responsive' \");\n                return msg;\n            };\n\n            $scope.notifyLastMessage = function () {\n                if (typeof window.Notification === 'undefined') {\n                    return;\n                }\n                window.Notification.requestPermission(function (permission) {\n                    var lastMessage = $scope.getLastMessage();\n                    if (permission === 'granted' && lastMessage && lastMessage.username) {\n                        var notify = new window.Notification('Message notification from ' + lastMessage.username + ' : ', {\n                            body: 'New message' //lastMessage.message\n                        });\n                        notify.onclick = function () {\n                            window.focus();\n                        };\n                        notify.onclose = function () {\n                            $scope.pageTitleNotificator.off();\n                        };\n                        let timer = setInterval(function () {\n                            notify && notify.close();\n                            typeof timer !== 'undefined' && window.clearInterval(timer);\n                        }, 100000);\n                    }\n                });\n            };\n\n            $scope.getLastMessage = function () {\n                return $scope.messages[$scope.messages.length - 1];\n            };\n\n            $scope.listMessages = function (wasListingForMySubmission) {\n                return $http.post($scope.urlListMessages, {}).then(function successCallback(response) {\n                    $scope.messages = [];\n                    angular.forEach(response.data, function (message) {\n                        message.message = $scope.replaceShortcodes(message.message);\n                        $scope.messages.push(message);\n                    });\n\n                    var lastMessage = $scope.getLastMessage();\n                    var lastMessageId = lastMessage && lastMessage.id;\n\n                    if ($scope.lastMessageId !== lastMessageId) {\n                        $scope.onNewMessage(wasListingForMySubmission);\n                    }\n                    $scope.lastMessageId = lastMessageId;\n                    if ($scope.pusers === '') { // refresh current in chat list.\n                        angular.forEach($filter('unique')($scope.messages, 'sender_id'), function (m, k) {\n                            var flg = false;\n                            angular.forEach($scope.pusers, function (id) {\n                                if (id === m.sender_id) {\n                                    flg = true;\n                                }\n                            });\n                            if (!flg) $scope.pusers.push(m.sender_id);\n                        });\n                    }\n                    $scope.getOnlines();\n                }, function errorCallback(response) {\n                });\n            };\n\n            $scope.onNewMessage = function (wasListingForMySubmission) {\n                if ($scope.lastMessageId && !wasListingForMySubmission) {\n                    $scope.playAudio();\n                    $scope.pageTitleNotificator.on('New message');\n                    $scope.notifyLastMessage();\n                }\n                $scope.scrollDown();\n                window.addEventListener('focus', function () {\n                    $scope.pageTitleNotificator.off();\n                });\n            };\n\n            $scope.getAuthUsers = function () {\n                $scope.chatusers = [];\n                return $http.post($scope.urlGetAuthUsers, {}).then(function successCallback(response) {\n                    $scope.chatusers = response.data;\n                }, function errorCallback(response) {\n                });\n            };\n\n            $scope.pingServer = function (msgItem) {\n                return $http.post($scope.urlListOnlines + '&username=' + $scope.user, {}).then(function successCallback(response) {\n                    $scope.online = response.data;\n                }, function errorCallback(response) {\n                });\n            };\n\n            $scope.getOnlines = function () {\n                return $http.post($scope.urlListOnlines + '&username=currentol', {}).then(function successCallback(response) {\n                    $scope.onlines = response.data;\n                }, function errorCallback(response) {\n                });\n            };\n\n            $scope.init = function () {\n                $scope.listMessages();\n                $scope.pidMessages = window.setInterval($scope.listMessages, 3000);\n                $scope.pidPingServer = window.setInterval($scope.pingServer, 5000);\n                $scope.getAuthUsers();\n                $(\"#popeditor\").on(\"show.bs.modal\", function () {\n                    var height = $(window).height() - 200;\n                    $(this).find(\".modal-body\").css(\"max-height\", height);\n                });\n            };\n\n            $scope.scrollDown = function () {\n                var pidScroll;\n                pidScroll = window.setInterval(function () {\n                    $('.direct-chat-messages').scrollTop(window.Number.MAX_SAFE_INTEGER * 0.001);\n                    window.clearInterval(pidScroll);\n                }, 100);\n            };\n\n            $scope.clearHistory = function () {\n                var lastMessage = $scope.getLastMessage();\n                var lastMessageId = lastMessage && lastMessage.id;\n                lastMessageId = (lastMessageId - 1 >= 2) ? lastMessageId - 1 : lastMessageId;\n                lastMessageId && ($scope.historyFromId = lastMessageId);\n            };\n\n            $scope.openModal = function (e) {\n                var mi = $('#popeditor').modal({backdrop: \"static\"});\n                $scope.editmsg();\n            };\n\n            $scope.playAudio = function () {\n                $scope.beep && $scope.beep.play();\n            };\n\n            $scope.renderMessageBody = function (html) {\n                return jsAttr(html);\n            };\n            $scope.init();\n        }]);\n    })();\n</script>\n<style>\n  .direct-chat-text {\n    border-radius: 5px;\n    position: relative;\n    padding: 5px 10px;\n    background: #FBFBFB;\n    border: 1px solid var(--gray);\n    margin: 5px 0 0 50px;\n    color: var(--dark);\n  }\n\n  .direct-chat-msg,\n  .direct-chat-text {\n    display: block;\n    word-wrap: break-word;\n  }\n\n  .direct-chat-img {\n    border-radius: 50%;\n    float: left;\n    width: 40px;\n    height: 40px;\n  }\n\n  .direct-chat-info {\n    display: block;\n    margin-bottom: 2px;\n    font-size: 12px;\n  }\n\n  .direct-chat-msg {\n    margin-bottom: 5px;\n  }\n\n  .direct-chat-messages {\n    -webkit-transform: translate(0, 0);\n    -ms-transform: translate(0, 0);\n    -o-transform: translate(0, 0);\n    transform: translate(0, 0);\n    padding: 5px;\n    height: calc(100vh - 175px);\n    overflow: auto;\n    word-wrap: break-word;\n  }\n\n  .direct-chat-text:before {\n    border-width: 6px;\n    margin-top: -6px;\n  }\n\n  .direct-chat-text:after {\n    border-width: 5px;\n    margin-top: -5px;\n  }\n\n  .direct-chat-text:after,\n  .direct-chat-text:before {\n    position: absolute;\n    right: 100%;\n    top: 15px;\n    border: solid rgba(0, 0, 0, 0);\n    border-right-color: #D2D6DE;\n    content: ' ';\n    height: 0;\n    width: 0;\n    pointer-events: none;\n  }\n\n  .direct-chat-warning .right > .direct-chat-text {\n    background: rgba(251, 255, 178, 0.34);\n    border-color: var(--danger);\n    color: var(--black);\n  }\n\n  .right .direct-chat-text {\n    margin-right: 50px;\n    margin-left: 0;\n  }\n\n  .direct-chat-warning .right > .direct-chat-text:after,\n  .direct-chat-warning .right > .direct-chat-text:before {\n    border-left-color: #F39C12;\n  }\n\n  .right .direct-chat-text:after,\n  .right .direct-chat-text:before {\n    right: auto;\n    left: 100%;\n    border-right-color: rgba(0, 0, 0, 0);\n    border-left-color: #D2D6DE;\n  }\n\n  .right .direct-chat-img {\n    float: right;\n  }\n\n  .direct-chat-name {\n    font-weight: 600;\n  }\n\n  .box-footer form {\n    margin-bottom: 10px;\n  }\n\n  input,\n  .btn,\n  .alert,\n  .modal-content {\n    border-radius: 0 !important;\n  }\n\n  .sidebar {\n    background-color: #f8f8ff;\n    max-height: 95vh;\n    margin-top: 5px;\n    margin-right: 0;\n    padding-right: 5px;\n    overflow: auto;\n  }\n\n  .rtsidebar {\n    background-color: #f8f8ff;\n    max-height: 95vh;\n    margin-top: 5px;\n    margin-right: 0;\n    overflow: auto;\n  }\n\n  .fixed-panel {\n    height: 100%;\n    padding: 5px 5px 0 5px;\n  }\n\n  h5 {\n    font-size: 16px !important;\n  }\n\n  label {\n    display: block;\n  }\n\n  legend {\n    font-size: 14px;\n    margin-bottom: 2px;\n    background: var(--white);\n  }\n\n  .modal.modal-wide .modal-dialog {\n    width: 75%;\n  }\n\n  .modal-wide .modal-body {\n    overflow-y: auto;\n  }\n</style>\n\n<body ng-controller=\"MsgAppCtrl\">\n    <div class=\"container-fluid\">\n        <!-- <h2 class=\"d-none\">Secure Chat</h2> -->\n        <div class=\"row\">\n            <div class=\"col-md-2 sidebar\">\n                <h5><span class=\"badge badge-primary\"><?php echo xlt('Current Recipients'); ?></span></h5>\n                <label ng-repeat=\"user in chatusers | unique : 'username'\" ng-if=\"pusers.indexOf(user.recip_id) !== -1 && user.recip_id != me.sender_id\">\n                    <input type=\"checkbox\" data-checklist-model=\"pusers\" data-checklist-value=\"user.recip_id\"> {{user.username}}\n                </label>\n                <h5><span class=\"badge badge-primary\"><?php echo xlt('Available Recipients'); ?></span></h5>\n                <span>\n                    <button id=\"chkall\" class=\"btn btn-sm btn-success\" ng-show=\"!isPortal\" ng-click=\"checkAll()\" type=\"button\"><?php echo xlt('All{{Recipients}}'); ?></button>\n                    <button id=\"chknone\" class=\"btn btn-sm btn-success\" ng-show=\"!isPortal\" ng-click=\"uncheckAll()\" type=\"button\"><?php echo xlt('None{{Recipients}}'); ?></button>\n                </span>\n                <label ng-repeat=\"user in chatusers | unique : 'username'\" ng-show=\"!isPortal || (isPortal && user.dash)\">\n                    <input type=\"checkbox\" data-checklist-model=\"pusers\" data-checklist-value=\"user.recip_id\"> {{user.username}}\n                </label>\n            </div>\n            <div class=\"col-md-8 fixed-panel\">\n                <div class=\"card direct-chat direct-chat-warning\">\n                    <div class=\"card-heading bg-dark text-light py-2\">\n                        <div class=\"clearfix btn-group ml-2\">\n                            <a class='btn btn-primary' href='./../patient/provider' ng-show='!isPortal'><?php echo xlt('Home'); ?></a>\n                            <a class=\"btn btn-secondary\" href=\"\" data-toggle=\"modal\" data-target=\"#clear-history\"><?php echo xlt('Clear history'); ?></a>\n                        </div>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"direct-chat-messages\">\n                            <div class=\"direct-chat-msg\" ng-repeat=\"message in messages\" ng-if=\"historyFromId < message.id\" ng-class=\"{'right':!message.me}\">\n                                <div class=\"direct-chat-info clearfix\">\n                                    <span class=\"direct-chat-name\" ng-class=\"{'float-left':message.me,'float-right':!message.me}\">{{message.username }}</span>\n                                    <span class=\"direct-chat-timestamp \" ng-class=\"{'float-left':!message.me,'float-right':message.me}\">{{message.date }}</span>\n                                </div>\n                                <i class=\"direct-chat-img fa fa-hand-o-left\" style=\"cursor: pointer; font-size: 24px\" ng-show=\"!message.me\" ng-click=\"makeCurrent(message)\" title=\"<?php echo xla('Click to activate and send to this recipient.'); ?>\"></i>\n                                <i class=\"direct-chat-img fa fa-hand-o-right\" style=\"cursor: pointer; font-size:24px\" ng-show=\"message.me\" ng-click=\"makeCurrent(message)\" title=\"<?php echo xla('Click to activate and send to this recipient.'); ?>\"></i>\n\n                                <div class=\"direct-chat-text right\">\n                                    <div class='px-0' title=\"<?php echo xla('Click to activate and send to this recipient.'); ?>\" ng-click=\"makeCurrent(message)\" ng-bind-html=\"renderMessageBody(message.message)\"></div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"card-footer box-footer-hide\">\n                            <form id='msgfrm' ng-submit=\"saveMessage()\">\n                                <div class=\"input-group\">\n                                    <input type=\"text\" placeholder=\"<?php echo xla('Type Message...'); ?>\" id=\"msgedit\" autofocus=\"autofocus\" class=\"form-control\" ng-model=\"me.message\" ng-enter=\"saveMessage()\">\n                                    <span class=\"input-group-append\">\n                                        <button type=\"submit\" class=\"btn btn-danger btn-flat\"><?php echo xlt('Send'); ?></button>\n                                        <button type=\"button\" class=\"btn btn-success btn-flat\" ng-click=\"openModal(event)\"><?php echo xlt('Edit'); ?></button>\n                                    </span>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-2 rtsidebar\">\n                <h5><span class=\"badge badge-primary\"><?php echo xlt(\"Online Users\"); ?> : {{ online.total || '0' }}</span>\n                </h5>\n                <label ng-repeat=\"ol in onlines | unique : 'username'\">\n                    <input type=\"checkbox\" data-checklist-model=\"onlines\" data-checklist-value=\"ol\"> {{ol.username}}\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"modal modal-wide fade\" id=\"popeditor\">\n        <div class=\"modal-dialog modal-lg\">\n            <div class=\"modal-content\">\n                <form>\n                    <div class=\"modal-header\">\n                        <h5 class='modal-title'><?php echo xlt('You may send Message with Image or Video'); ?></h5>\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\">\n                            <span aria-hidden=\"true\">&times;</span>\n                            <span class=\"sr-only\"><?php echo xlt('Close'); ?></span>\n                        </button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <textarea cols='80' rows='10' id='messageContent' name='content'></textarea>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-sm\" data-dismiss=\"modal\"><?php echo xlt('Dismiss'); ?></button>\n                        <button type=\"button\" class=\"btn btn-success\" data-dismiss=\"modal\" ng-click=\"saveedit()\"><?php echo xlt('Send It'); ?></button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n    <div class=\"modal\" id=\"clear-history\">\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <form>\n                    <div class=\"modal-header\">\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\">\n                            <span aria-hidden=\"true\">&times;</span>\n                            <span class=\"sr-only\"><?php echo xlt('Close'); ?></span>\n                        </button>\n                        <h4 class=\"modal-title\"><?php echo xlt('Chat history'); ?></h4>\n                    </div>\n                    <div class=\"modal-body\">\n                        <label class=\"radio\"><?php echo xlt('Are you sure you want to clear chats session history?'); ?></label>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-sm btn-secondary\" data-dismiss=\"modal\"><?php echo xlt('Cancel'); ?></button>\n                        <button type=\"button\" class=\"btn btn-sm btn-primary\" data-dismiss=\"modal\" ng-click=\"clearHistory()\"><?php echo xlt('Accept'); ?></button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n\n</body>\n</html>\n", "<?php\n\n/**\n *  Chat Class ChatController\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2020-2021 Jerry Padgett <sjpadgett@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nnamespace OpenEMR\\PatientPortal\\Chat;\n\nuse OpenEMR\\PatientPortal\\Chat\\ChatDispatcher;\nuse OpenEMR\\PatientPortal\\Chat\\ChatModel;\n\nclass ChatController extends ChatDispatcher\n{\n    protected $_model;\n\n    public function __construct()\n    {\n        $this->setModel(ChatModel::class);\n        parent::__construct();\n    }\n\n    public function indexAction()\n    {\n    }\n\n    public function authusersAction()\n    {\n        return $this->getModel()->getAuthUsers(true);\n    }\n\n    public function listAction()\n    {\n        $this->setHeader(array('Content-Type' => 'application/json'));\n        $messages = $this->getModel()->getMessages();\n        foreach ($messages as &$message) {\n            $message['me'] = C_USER === $message['sender_id']; // $this->getServer('REMOTE_ADDR') === $message['ip'];\n        }\n\n        return json_encode($messages);\n    }\n\n    public function saveAction()\n    {\n        $username = $this->getPost('username');\n        $message = $this->getPost('message');\n        $ip = $this->getServer('REMOTE_ADDR');\n        $this->setCookie('username', $username, 9999 * 9999);\n        $recipid = $this->getPost('recip_id');\n\n        if (IS_PORTAL) {\n            $senderid = IS_PORTAL;\n        } else {\n            $senderid = IS_DASHBOARD;\n        }\n\n        $result = array('success' => false);\n        if ($username && $message) {\n            $cleanUsername = preg_replace('/^' . ADMIN_USERNAME_PREFIX . '/', '', $username);\n            $result = array(\n                'success' => $this->getModel()->addMessage($cleanUsername, $message, $ip, $senderid, $recipid)\n            );\n        }\n\n        if ($this->isAdmin($username)) {\n            $this->parseAdminCommand($message);\n        }\n\n        $this->setHeader(array('Content-Type' => 'application/json'));\n        return json_encode($result);\n    }\n\n    private function isAdmin($username)\n    {\n        return (bool)IS_DASHBOARD;\n    }\n\n    private function parseAdminCommand($message)\n    {\n        if (str_contains($message, '/clear')) {\n            $this->getModel()->removeMessages();\n            return true;\n        }\n\n        if (str_contains($message, '/online')) {\n            $online = $this->getModel()->getOnline(false);\n            $ipArr = array();\n            foreach ($online as $item) {\n                $ipArr[] = $item->ip;\n            }\n\n            $message = 'Online: ' . implode(\", \", $ipArr);\n            $this->getModel()->addMessage('Admin Command', $message, '0.0.0.0');\n            return true;\n        }\n    }\n\n    private function getMyUniqueHash()\n    {\n        $unique = $this->getServer('REMOTE_ADDR');\n        $unique .= $this->getServer('HTTP_USER_AGENT');\n        $unique .= $this->getServer('HTTP_ACCEPT_LANGUAGE');\n        $unique .= C_USER;\n        return md5($unique);\n    }\n\n    public function pingAction()\n    {\n        $ip = $this->getServer('REMOTE_ADDR');\n        $hash = $this->getMyUniqueHash();\n        $user = $this->getRequest('username', 'No Username');\n        if ($user == 'currentol') {\n            $onlines = $this->getModel()->getOnline(false);\n            $this->setHeader(array('Content-Type' => 'application/json'));\n            return json_encode($onlines);\n        }\n\n        if (IS_PORTAL) {\n            $userid = IS_PORTAL;\n        } else {\n            $userid = IS_DASHBOARD;\n        }\n\n        $this->getModel()->updateOnline($hash, $ip, $user, $userid);\n        $this->getModel()->clearOffline();\n\n        $onlines = $this->getModel()->getOnline();\n\n        $this->setHeader(array('Content-Type' => 'application/json'));\n        return json_encode($onlines);\n    }\n}\n"], "filenames": ["library/pnotes.inc.php", "portal/add_edit_event_user.php", "portal/find_appt_popup_user.php", "portal/messaging/secure_chat.php", "src/PatientPortal/Chat/ChatController.php"], "buggy_code_start_loc": [392, 46, 84, 409, 70], "buggy_code_end_loc": [393, 734, 118, 410, 116], "fixing_code_start_loc": [392, 46, 84, 409, 70], "fixing_code_end_loc": [393, 752, 122, 410, 116], "type": "CWE-94", "message": "Code Injection in GitHub repository openemr/openemr prior to 7.0.1.", "other": {"cve": {"id": "CVE-2023-2943", "sourceIdentifier": "security@huntr.dev", "published": "2023-05-27T22:15:10.007", "lastModified": "2023-06-01T03:45:56.243", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Code Injection in GitHub repository openemr/openemr prior to 7.0.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 2.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open-emr:openemr:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.0.1", "matchCriteriaId": "30B2EE3F-FA55-46FB-BC32-B041753826A4"}]}]}], "references": [{"url": "https://github.com/openemr/openemr/commit/c1c0805696ca68577c37bf30e29f90e5f3e0f1a9", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/4190f944-dc2c-4624-9abf-31479456faa9", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openemr/openemr/commit/c1c0805696ca68577c37bf30e29f90e5f3e0f1a9"}}