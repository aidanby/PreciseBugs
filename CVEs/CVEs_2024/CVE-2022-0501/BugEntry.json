{"buggy_code": ["<?php\r\n\r\n/**\r\n * @link https://github.com/ptrofimov/beanstalk_console\r\n * @link http://kr.github.com/beanstalkd/\r\n * @author Petr Trofimov, Sergey Lysenko\r\n */\r\nfunction autoload_class($class) {\r\n    require_once str_replace('_', '/', $class) . '.php';\r\n}\r\n\r\nspl_autoload_register('autoload_class');\r\n\r\nsession_start();\r\nrequire_once 'Pheanstalk/ClassLoader.php';\r\nPheanstalk_ClassLoader::register(dirname(__FILE__));\r\n\r\nrequire_once 'BeanstalkInterface.class.php';\r\nrequire_once dirname(__FILE__) . '/../config.php';\r\nrequire_once dirname(__FILE__) . '/../src/Storage.php';\r\n\r\n$GLOBALS['server'] = !empty($_GET['server']) ? $_GET['server'] : '';\r\n$GLOBALS['action'] = !empty($_GET['action']) ? $_GET['action'] : '';\r\n$GLOBALS['state'] = !empty($_GET['state']) ? $_GET['state'] : '';\r\n$GLOBALS['count'] = !empty($_GET['count']) ? $_GET['count'] : '';\r\n$GLOBALS['tube'] = !empty($_GET['tube']) ? $_GET['tube'] : '';\r\n$GLOBALS['tplMain'] = !empty($_GET['tplMain']) ? $_GET['tplMain'] : '';\r\n$GLOBALS['tplBlock'] = !empty($_GET['tplBlock']) ? $_GET['tplBlock'] : '';\r\n\r\nclass Console {\r\n\r\n    /**\r\n     * @var BeanstalkInterface\r\n     */\r\n    public $interface;\r\n    protected $_tplVars = array();\r\n    protected $_globalVar = array();\r\n    protected $_errors = array();\r\n    private $serversConfig = array();\r\n    private $serversEnv = array();\r\n    private $serversCookie = array();\r\n    private $searchResults = array();\r\n    private $actionTimeStart = 0;\r\n\r\n    public function __construct() {\r\n        $this->__init();\r\n        $this->_main();\r\n    }\r\n\r\n    /** @return array */\r\n    public function getServers() {\r\n        return array_merge($this->serversConfig, $this->serversEnv, $this->serversCookie);\r\n    }\r\n\r\n    /** @return array */\r\n    public function getServersConfig() {\r\n        return $this->serversConfig;\r\n    }\r\n\r\n    /** @return array */\r\n    public function getServersEnv() {\r\n        return $this->serversEnv;\r\n    }\r\n\r\n    /** @return array */\r\n    public function getServersCookie() {\r\n        return $this->serversCookie;\r\n    }\r\n\r\n    public function getServerStats($server) {\r\n        try {\r\n            $interface = new BeanstalkInterface($server);\r\n            $stats = $interface->getServerStats();\r\n        } catch (Pheanstalk_Exception_ConnectionException $e) {\r\n            $stats = array();\r\n        }\r\n\r\n        return $stats;\r\n    }\r\n\r\n    public function getServerStatsGroups() {\r\n        return array(\r\n            'binlog' => array(\r\n                'binlog-current-index' => 'the index of the current binlog file being written to. If binlog is not active this value will be 0',\r\n                'binlog-max-size' => 'the maximum size in bytes a binlog file is allowed to get before a new binlog file is opened',\r\n                'binlog-oldest-index' => 'the index of the oldest binlog file needed to store the current jobs',\r\n                'binlog-records-migrated' => 'the cumulative number of records written as part of compaction',\r\n                'binlog-records-written' => 'the cumulative number of records written to the binlog',\r\n            ),\r\n            'cmd' => array(\r\n                'cmd-bury' => 'the cumulative number of bury commands',\r\n                'cmd-delete' => 'the cumulative number of delete commands',\r\n                'cmd-ignore' => 'the cumulative number of ignore commands',\r\n                'cmd-kick' => 'the cumulative number of kick commands',\r\n                'cmd-list-tube-used' => 'the cumulative number of list-tube-used commands',\r\n                'cmd-list-tubes' => 'the cumulative number of list-tubes commands',\r\n                'cmd-list-tubes-watched' => 'the cumulative number of list-tubes-watched commands',\r\n                'cmd-pause-tube' => 'the cumulative number of pause-tube commands',\r\n                'cmd-peek' => 'the cumulative number of peek commands',\r\n                'cmd-peek-buried' => 'the cumulative number of peek-buried commands',\r\n                'cmd-peek-delayed' => 'the cumulative number of peek-delayed commands',\r\n                'cmd-peek-ready' => 'the cumulative number of peek-ready commands',\r\n                'cmd-put' => 'the cumulative number of put commands',\r\n                'cmd-release' => 'the cumulative number of release commands',\r\n                'cmd-reserve' => 'the cumulative number of reserve commands',\r\n                'cmd-stats' => 'the cumulative number of stats commands',\r\n                'cmd-stats-job' => 'the cumulative number of stats-job commands',\r\n                'cmd-stats-tube' => 'the cumulative number of stats-tube commands',\r\n                'cmd-use' => 'the cumulative number of use commands',\r\n                'cmd-watch' => 'the cumulative number of watch commands',\r\n            ),\r\n            'current' => array(\r\n                'current-connections' => 'the number of currently open connections',\r\n                'current-jobs-buried' => 'the number of buried jobs',\r\n                'current-jobs-delayed' => 'the number of delayed jobs',\r\n                'current-jobs-ready' => 'the number of jobs in the ready queue',\r\n                'current-jobs-reserved' => 'the number of jobs reserved by all clients',\r\n                'current-jobs-urgent' => 'the number of ready jobs with priority < 1024',\r\n                'current-producers' => 'the number of open connections that have each issued at least one put command',\r\n                'current-tubes' => 'the number of currently-existing tubes',\r\n                'current-waiting' => 'the number of open connections that have issued a reserve command but not yet received a response',\r\n                'current-workers' => 'the number of open connections that have each issued at least one reserve command',\r\n            ),\r\n            'other' => array(\r\n                'hostname' => 'the hostname of the machine as determined by uname',\r\n                'id' => 'a random id string for this server process, generated when each beanstalkd process starts',\r\n                'job-timeouts' => 'the cumulative count of times a job has timed out',\r\n                'max-job-size' => 'the maximum number of bytes in a job',\r\n                'pid' => 'the process id of the server',\r\n                'rusage-stime' => 'the cumulative system CPU time of this process in seconds and microseconds',\r\n                'rusage-utime' => 'the cumulative user CPU time of this process in seconds and microseconds',\r\n                'total-connections' => 'the cumulative count of connections',\r\n                'total-jobs' => 'the cumulative count of jobs created',\r\n                'uptime' => 'the number of seconds since this server process started running',\r\n                'version' => 'the version string of the server',\r\n            ),\r\n        );\r\n    }\r\n\r\n    public function getTubeStatFields() {\r\n        return array(\r\n            'current-jobs-urgent' => 'number of ready jobs with priority < 1024 in this tube',\r\n            'current-jobs-ready' => 'number of jobs in the ready queue in this tube',\r\n            'current-jobs-reserved' => 'number of jobs reserved by all clients in this tube',\r\n            'current-jobs-delayed' => 'number of delayed jobs in this tube',\r\n            'current-jobs-buried' => 'number of buried jobs in this tube',\r\n            'total-jobs' => 'cumulative count of jobs created in this tube in the current beanstalkd process',\r\n            'current-using' => 'number of open connections that are currently using this tube',\r\n            'current-waiting' => 'number of open connections that have issued a reserve command while watching this tube but not yet received a response',\r\n            'current-watching' => 'number of open connections that are currently watching this tube',\r\n            'pause' => 'number of seconds the tube has been paused for',\r\n            'cmd-delete' => 'cumulative number of delete commands for this tube',\r\n            'cmd-pause-tube' => 'cumulative number of pause-tube commands for this tube',\r\n            'pause-time-left' => 'number of seconds until the tube is un-paused',\r\n        );\r\n    }\r\n\r\n    public function getTubeStatGroups() {\r\n        return array(\r\n            'current' => array(\r\n                'current-jobs-buried',\r\n                'current-jobs-delayed',\r\n                'current-jobs-ready',\r\n                'current-jobs-reserved',\r\n                'current-jobs-urgent',\r\n                'current-using',\r\n                'current-waiting',\r\n                'current-watching',\r\n            ),\r\n            'other' => array(\r\n                'cmd-delete',\r\n                'cmd-pause-tube',\r\n                'pause',\r\n                'pause-time-left',\r\n                'total-jobs',\r\n            ),\r\n        );\r\n    }\r\n\r\n    public function getTubeStatVisible() {\r\n        if (!empty($_COOKIE['tubefilter'])) {\r\n            return explode(',', $_COOKIE['tubefilter']);\r\n        } else {\r\n            return array(\r\n                'current-jobs-buried',\r\n                'current-jobs-delayed',\r\n                'current-jobs-ready',\r\n                'current-jobs-reserved',\r\n                'current-jobs-urgent',\r\n                'total-jobs',\r\n            );\r\n        }\r\n    }\r\n\r\n    public function getTubeStatValues($tube) {\r\n        // make sure, that rapid tube disappearance (eg: anonymous tubes, don't kill the interface, as they might be missing)\r\n        try {\r\n            return $this->interface->_client->statsTube($tube);\r\n        } catch (Pheanstalk_Exception_ServerException $ex) {\r\n            if (strpos($ex->getMessage(), Pheanstalk_Response::RESPONSE_NOT_FOUND) !== false) {\r\n                return array();\r\n            } else {\r\n                throw $ex;\r\n            }\r\n        }\r\n    }\r\n\r\n    public function getSearchResult() {\r\n        return $this->searchResults;\r\n    }\r\n\r\n    protected function __init() {\r\n        $this->_globalVar = array(\r\n            'server' => $GLOBALS['server'],\r\n            'action' => $GLOBALS['action'],\r\n            'state' => $GLOBALS['state'],\r\n            'count' => $GLOBALS['count'],\r\n            'tube' => $GLOBALS['tube'],\r\n            '_tplMain' => $GLOBALS['tplMain'],\r\n            '_tplBlock' => $GLOBALS['tplBlock'],\r\n            'config' => $GLOBALS['config']);\r\n        $this->_tplVars = $this->_globalVar;\r\n        if (!in_array($this->_tplVars['_tplBlock'], array('allTubes', 'serversList'))) {\r\n            unset($this->_tplVars['_tplBlock']);\r\n        }\r\n        if (!in_array($this->_tplVars['_tplMain'], array('main', 'ajax'))) {\r\n            unset($this->_tplVars['_tplMain']);\r\n        }\r\n        if (empty($this->_tplVars['_tplMain'])) {\r\n            $this->_tplVars['_tplMain'] = 'main';\r\n        }\r\n\r\n        foreach ($GLOBALS['config']['servers'] as $key => $server) {\r\n            $this->serversConfig[$key] = $server;\r\n        }\r\n        if (false !== getenv('BEANSTALK_SERVERS')) {\r\n            foreach (explode(',', getenv('BEANSTALK_SERVERS')) as $key => $server) {\r\n                $this->serversEnv[$key] = $server;\r\n            }\r\n        }\r\n        if (isset($_COOKIE['beansServers'])) {\r\n            foreach (explode(';', $_COOKIE['beansServers']) as $key => $server) {\r\n                $this->serversCookie[$key] = $server;\r\n            }\r\n        }\r\n        try {\r\n            $storage = new Storage($GLOBALS['config']['storage']);\r\n        } catch (Exception $ex) {\r\n            $this->_errors[] = $ex->getMessage();\r\n        }\r\n    }\r\n\r\n    public function getErrors() {\r\n        return $this->_errors;\r\n    }\r\n\r\n    public function getTplVars($var = null) {\r\n        if (!empty($var)) {\r\n            $result = !empty($this->_tplVars[$var]) ? $this->_tplVars[$var] : null;\r\n        } else {\r\n            $result = $this->_tplVars;\r\n        }\r\n\r\n        return $result;\r\n    }\r\n\r\n    protected function deleteAllFromTube($state, $tube) {\r\n        try {\r\n            do {\r\n                switch ($state) {\r\n                    case 'ready':\r\n                        $job = $this->interface->_client->useTube($tube)->peekReady();\r\n                        break;\r\n                    case 'delayed':\r\n                        try {\r\n                            $ready = $this->interface->_client->useTube($tube)->peekReady();\r\n                            if ($ready) {\r\n                                $this->_errors[] = 'Cannot delete Delayed until there are Ready messages on this tube';\r\n                                return;\r\n                            }\r\n                        } catch (Exception $e) {\r\n                            // there might be no jobs to peek at, and peekReady raises exception in this situation\r\n                            if (strpos($e->getMessage(), Pheanstalk_Response::RESPONSE_NOT_FOUND) === false) {\r\n                                throw $e;\r\n                            }\r\n                        }\r\n                        try {\r\n                            $bury = $this->interface->_client->useTube($tube)->peekBuried();\r\n                            if ($bury) {\r\n                                $this->_errors[] = 'Cannot delete Delayed until there are Bury messages on this tube';\r\n                                return;\r\n                            }\r\n                        } catch (Exception $e) {\r\n                            // there might be no jobs to peek at, and peekReady raises exception in this situation\r\n                            if (strpos($e->getMessage(), Pheanstalk_Response::RESPONSE_NOT_FOUND) === false) {\r\n                                throw $e;\r\n                            }\r\n                        }\r\n                        $job = $this->interface->_client->useTube($tube)->peekDelayed();\r\n                        if ($job) {\r\n                            //when we found job with Delayed, kick all messages, to be ready, so that we can Delete them.\r\n                            $this->interface->kick($tube, 100000000);\r\n                            $this->deleteAllFromTube('ready', $tube);\r\n                            return;\r\n                        }\r\n                        break;\r\n                    case 'buried':\r\n                        $job = $this->interface->_client->useTube($tube)->peekBuried();\r\n                        break;\r\n                }\r\n\r\n                if ($job) {\r\n                    $this->interface->_client->delete($job);\r\n                    set_time_limit(5);\r\n                }\r\n            } while (!empty($job));\r\n        } catch (Exception $e) {\r\n            // there might be no jobs to peek at, and peekReady raises exception in this situation\r\n            // skip not found exception\r\n            if (strpos($e->getMessage(), Pheanstalk_Response::RESPONSE_NOT_FOUND) === false) {\r\n                $this->_errors[] = $e->getMessage();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected function _main() {\r\n\r\n\r\n        if (!isset($_GET['server'])) {\r\n            // execute methods without a server\r\n            if (isset($_GET['action']) && in_array($_GET['action'], array('serversRemove', 'manageSamples', 'deleteSample', 'editSample', 'newSample'))) {\r\n                $funcName = \"_action\" . ucfirst($this->_globalVar['action']);\r\n                if (method_exists($this, $funcName)) {\r\n                    $this->$funcName();\r\n                }\r\n                return;\r\n            }\r\n            return;\r\n        }\r\n\r\n        try {\r\n            $this->interface = new BeanstalkInterface($this->_globalVar['server']);\r\n\r\n            $this->_tplVars['tubes'] = $this->interface->getTubes();\r\n\r\n            $stats = $this->interface->getTubesStats();\r\n\r\n            $this->_tplVars['tubesStats'] = $stats;\r\n            $this->_tplVars['peek'] = $this->interface->peekAll($this->_globalVar['tube']);\r\n            $this->_tplVars['contentType'] = $this->interface->getContentType();\r\n            if (!empty($_GET['action'])) {\r\n                $funcName = \"_action\" . ucfirst($this->_globalVar['action']);\r\n                if (method_exists($this, $funcName)) {\r\n                    $this->$funcName();\r\n                }\r\n                return;\r\n            }\r\n        } catch (Pheanstalk_Exception_ConnectionException $e) {\r\n            $this->_errors[] = 'The server is unavailable';\r\n        } catch (Pheanstalk_Exception_ServerException $e) {\r\n            // if we get response not found, we just skip it (as the peekAll reached a tube which no longer existed)\r\n            if (strpos($e->getMessage(), Pheanstalk_Response::RESPONSE_NOT_FOUND) === false) {\r\n                $this->_errors[] = $e->getMessage();\r\n            }\r\n        } catch (Exception $e) {\r\n            $this->_errors[] = $e->getMessage();\r\n        }\r\n    }\r\n\r\n    protected function _actionKick() {\r\n        $this->interface->kick($this->_globalVar['tube'], $this->_globalVar['count']);\r\n        header(\r\n                sprintf('Location: ./?server=%s&tube=%s', $this->_globalVar['server'], urlencode($this->_globalVar['tube'])));\r\n        exit();\r\n    }\r\n\r\n    protected function _actionKickJob() {\r\n        $job = $this->interface->_client->peek(intval($_GET['jobid']));\r\n        if ($job) {\r\n            $this->interface->_client->kickJob($job);\r\n        }\r\n        header(\r\n                sprintf('Location: ./?server=%s&tube=%s', $this->_globalVar['server'], urlencode($this->_globalVar['tube'])));\r\n        exit();\r\n    }\r\n\r\n    protected function _actionDelete() {\r\n        switch ($this->_globalVar['state']) {\r\n            case 'ready':\r\n                $this->interface->deleteReady($this->_globalVar['tube']);\r\n                break;\r\n            case 'delayed':\r\n                $this->interface->deleteDelayed($this->_globalVar['tube']);\r\n                break;\r\n            case 'buried':\r\n                $this->interface->deleteBuried($this->_globalVar['tube']);\r\n                break;\r\n        }\r\n\r\n        $this->_postDelete();\r\n    }\r\n\r\n    protected function _actionDeleteJob() {\r\n        $job = $this->interface->_client->peek(intval($_GET['jobid']));\r\n        if ($job) {\r\n            $this->interface->_client->delete($job);\r\n        }\r\n        $this->_postDelete();\r\n    }\r\n\r\n    protected function _postDelete() {\r\n        $arr = $this->getTubeStatValues($this->_globalVar['tube']);\r\n        $availableJobs = $arr['current-jobs-urgent'] + $arr['current-jobs-ready'] + $arr['current-jobs-reserved'] + $arr['current-jobs-delayed'] + $arr['current-jobs-buried'];\r\n        if (empty($availableJobs)) {\r\n            // make sure we redirect to all tubes, as this tube no longer exists\r\n            $this->_globalVar['tube'] = null;\r\n        }\r\n        header(\r\n                sprintf('Location: ./?server=%s&tube=%s', $this->_globalVar['server'], urlencode($this->_globalVar['tube'])));\r\n        exit();\r\n    }\r\n\r\n    protected function _actionDeleteAll($tube = null) {\r\n        if (empty($tube)) {\r\n            $tube = $this->_globalVar['tube'];\r\n        }\r\n        $this->deleteAllFromTube($this->_globalVar['state'], $tube);\r\n        if (empty($this->_errors)) {\r\n            $this->_postDelete();\r\n        }\r\n    }\r\n\r\n    protected function _actionServersRemove() {\r\n        $server = $_GET['removeServer'];\r\n        $cookie_servers = array_diff($this->getServersCookie(), array($server));\r\n        if (count($cookie_servers)) {\r\n            setcookie('beansServers', implode(';', $cookie_servers), time() + 86400 * 365);\r\n        } else {\r\n            // no servers, clear cookie\r\n            setcookie('beansServers', '', time() - 86400 * 365);\r\n        }\r\n        header('Location: ./?');\r\n        exit();\r\n    }\r\n\r\n    protected function _actionAddjob() {\r\n        $result = array('result' => false);\r\n\r\n        $tubeName = !empty($_POST['tubeName']) ? $_POST['tubeName'] : '';\r\n        $tubeData = !empty($_POST['tubeData']) ? stripcslashes($_POST['tubeData']) : '';\r\n        $tubePriority = !empty($_POST['tubePriority']) ? $_POST['tubePriority'] : '';\r\n        $tubeDelay = !empty($_POST['tubeDelay']) ? $_POST['tubeDelay'] : '';\r\n        $tubeTtr = !empty($_POST['tubeTtr']) ? $_POST['tubeTtr'] : '';\r\n\r\n        $id = $this->interface->addJob($tubeName, $tubeData, $tubePriority, $tubeDelay, $tubeTtr);\r\n\r\n        if (!empty($id)) {\r\n            $result = array('result' => true, 'id' => $id);\r\n        }\r\n\r\n        echo json_encode($result);\r\n        exit();\r\n    }\r\n\r\n    protected function _actionReloader() {\r\n        $this->_tplVars['_tplMain'] = 'ajax';\r\n        $this->_tplVars['_tplBlock'] = 'allTubes';\r\n    }\r\n\r\n    protected function _actionClearTubes() {\r\n        if (is_array($_POST)) {\r\n            foreach ($_POST as $tube => $v) {\r\n                $states = array('ready', 'delayed', 'buried');\r\n                foreach ($states as $state) {\r\n                    $this->deleteAllFromTube($state, $tube);\r\n                }\r\n            }\r\n        }\r\n        echo json_encode(array('result' => true));\r\n        exit();\r\n    }\r\n\r\n    protected function _actionPause() {\r\n        if ($this->_globalVar['count'] == -1) {\r\n            if (!@empty($_COOKIE['tubePauseSeconds'])) {\r\n                $this->_globalVar['count'] = $_COOKIE['tubePauseSeconds'];\r\n            } else {\r\n                $this->_globalVar['count'] = 3600;\r\n            }\r\n        }\r\n        $this->interface->pauseTube($this->_globalVar['tube'], $this->_globalVar['count']);\r\n        header(\r\n                sprintf('Location: ./?server=%s&tube=%s', $this->_globalVar['server'], urlencode($this->_globalVar['tube'])));\r\n        exit();\r\n    }\r\n\r\n    protected function _actionAddSample() {\r\n        $success = false;\r\n        $error = '';\r\n        $response = array('result' => &$success, 'error' => &$error);\r\n        if (isset($_POST['addsamplejobid']) && isset($_POST['addsamplename']) && isset($_POST['tube']) && isset($_POST['tubes'])) {\r\n            try {\r\n                $job = $this->interface->_client->peek(intval($_POST['addsamplejobid']));\r\n                if ($job) {\r\n                    $res = $this->_storeSampleJob($_POST, $job->getData());\r\n                    if ($res === true) {\r\n                        $success = true;\r\n                    } else {\r\n                        $error = $res;\r\n                    }\r\n                } else {\r\n                    $error = 'Invalid state option';\r\n                }\r\n            } catch (Exception $e) {\r\n                // there might be no jobs to peek at, and peekReady raises exception in this situation\r\n                $error = $e->getMessage();\r\n            }\r\n        } else {\r\n            $error = 'Required fields are not set';\r\n        }\r\n        echo json_encode($response);\r\n        exit();\r\n    }\r\n\r\n    protected function _actionLoadSample() {\r\n        $key = $_GET['key'];\r\n        if (!empty($key)) {\r\n            $storage = new Storage($this->_globalVar['config']['storage']);\r\n            $job = $storage->load($key);\r\n            if ($job) {\r\n                $this->interface->addJob($this->_globalVar['tube'], $job['data']);\r\n            }\r\n        }\r\n        if (isset($_GET['redirect'])) {\r\n            $_SESSION['info'] = 'Job placed on tube';\r\n            header(sprintf('Location: %s', $_GET['redirect']));\r\n        } else {\r\n            header(sprintf('Location: ./?server=%s&tube=%s', $this->_globalVar['server'], urlencode($this->_globalVar['tube'])));\r\n        }\r\n        exit();\r\n    }\r\n\r\n    protected function _actionManageSamples() {\r\n        $this->_tplVars['_tplMain'] = 'main';\r\n        $this->_tplVars['_tplPage'] = 'sampleJobsManage';\r\n    }\r\n\r\n    protected function _actionEditSample() {\r\n        $this->_tplVars['_tplMain'] = 'main';\r\n        $this->_tplVars['_tplPage'] = 'sampleJobsEdit';\r\n        $key = $_GET['key'];\r\n        if (!empty($key)) {\r\n            $storage = new Storage($this->_globalVar['config']['storage']);\r\n            $job = $storage->load($key);\r\n            if ($_SERVER['REQUEST_METHOD'] == 'POST') {\r\n                if (isset($_POST['jobdata']) && isset($_POST['name']) && isset($_POST['tubes'])) {\r\n                    $oldjob = $job;\r\n                    $storage->delete($key);\r\n                    $job['name'] = $_POST['name'];\r\n                    $job['tubes'] = $_POST['tubes'];\r\n                    $job['data'] = htmlspecialchars_decode($_POST['jobdata']);\r\n                    if ($storage->saveJob($job)) {\r\n                        header('Location: ./?action=manageSamples');\r\n                    } else {\r\n                        $storage->saveJob($oldjob);\r\n                        $this->_tplVars['error'] = $storage->getError();\r\n                    }\r\n                } else {\r\n                    $job['name'] = @$_POST['name'];\r\n                    $job['data'] = @$_POST['jobdata'];\r\n                    $job['tubes'] = @$_POST['tubes'];\r\n                    $this->_tplVars['error'] = 'Required fields are not set';\r\n                }\r\n            }\r\n            if ($job) {\r\n                $this->_tplVars['job'] = $job;\r\n            } else {\r\n                $this->_errors[] = 'Cannot locate job';\r\n                return;\r\n            }\r\n        } else {\r\n            $this->_errors[] = 'The requested key is invalid';\r\n            return;\r\n        }\r\n        $serverTubes = array();\r\n        if (is_array($this->getServers())) {\r\n            foreach ($this->getServers() as $server) {\r\n                try {\r\n                    $interface = new BeanstalkInterface($server);\r\n                    $tubes = $interface->getTubes();\r\n                    if (is_array($tubes)) {\r\n                        $serverTubes[$server] = $tubes;\r\n                    }\r\n                } catch (Exception $e) {\r\n                    \r\n                }\r\n            }\r\n        }\r\n        if (empty($serverTubes)) {\r\n            $this->_errors[] = 'No tubes were found, please connect a server.';\r\n            return;\r\n        }\r\n        $this->_tplVars['serverTubes'] = $serverTubes;\r\n    }\r\n\r\n    protected function _actionNewSample() {\r\n        $this->_tplVars['_tplMain'] = 'main';\r\n        $this->_tplVars['_tplPage'] = 'sampleJobsEdit';\r\n        $this->_tplVars['isNewRecord'] = true;\r\n        $storage = new Storage($this->_globalVar['config']['storage']);\r\n        if ($_SERVER['REQUEST_METHOD'] == 'POST') {\r\n            if (isset($_POST['jobdata']) && isset($_POST['name']) && isset($_POST['tubes'])) {\r\n                $job['name'] = $_POST['name'];\r\n                $job['tubes'] = $_POST['tubes'];\r\n                $job['data'] = htmlspecialchars_decode($_POST['jobdata']);\r\n                if ($storage->saveJob($job)) {\r\n                    header('Location: ./?action=manageSamples');\r\n                } else {\r\n                    $this->_tplVars['error'] = $storage->getError();\r\n                }\r\n            } else {\r\n                $job['name'] = @$_POST['name'];\r\n                $job['data'] = @$_POST['jobdata'];\r\n                $job['tubes'] = @$_POST['tubes'];\r\n                $this->_tplVars['error'] = 'Required fields are not set';\r\n            }\r\n        }\r\n\r\n        $serverTubes = array();\r\n        if (is_array($this->getServers())) {\r\n            foreach ($this->getServers() as $server) {\r\n                try {\r\n                    $interface = new BeanstalkInterface($server);\r\n                    $tubes = $interface->getTubes();\r\n                    if (is_array($tubes)) {\r\n                        $serverTubes[$server] = $tubes;\r\n                    }\r\n                } catch (Exception $e) {\r\n                    \r\n                }\r\n            }\r\n        }\r\n        if (empty($serverTubes)) {\r\n            $this->_errors[] = 'No tubes were found, please connect a server.';\r\n            return;\r\n        }\r\n        $this->_tplVars['serverTubes'] = $serverTubes;\r\n    }\r\n\r\n    protected function _actionDeleteSample() {\r\n        $key = $_GET['key'];\r\n        if (!empty($key)) {\r\n            $storage = new Storage($this->_globalVar['config']['storage']);\r\n            $job = $storage->load($key);\r\n            if ($job) {\r\n                $storage->delete($key);\r\n            }\r\n        }\r\n        header('Location: ./?action=manageSamples');\r\n        exit();\r\n    }\r\n\r\n    protected function _actionMoveJobsTo() {\r\n        $destServer = (isset($_GET['server'])) ? $_GET['server'] : null;\r\n        $destTube = (isset($_GET['destTube'])) ? $_GET['destTube'] : null;\r\n        $destState = (isset($_GET['destState'])) ? $_GET['destState'] : null;\r\n        if (!empty($destTube) && in_array($GLOBALS['state'], array('ready', 'delayed', 'buried'))) {\r\n            $this->moveJobsFromTo($destServer, $GLOBALS['tube'], $GLOBALS['state'], $destTube);\r\n        }\r\n        if (!empty($destState)) {\r\n            $this->moveJobsToState($destServer, $GLOBALS['tube'], $GLOBALS['state'], $destState);\r\n        }\r\n    }\r\n\r\n    protected function _actionSearch() {\r\n        $this->actionTimeStart = microtime(true);\r\n        $timelimit_in_seconds = 15;\r\n        $searchStr = (isset($_GET['searchStr'])) ? $_GET['searchStr'] : null;\r\n        $states = array('ready', 'delayed', 'buried');\r\n        $jobList = array();\r\n        $limit = null;\r\n\r\n        if ($searchStr === null or $searchStr === '')\r\n            return false;\r\n\r\n        if (isset($_GET['limit'])) {\r\n            $limit = intval($_GET['limit']);\r\n        }\r\n\r\n        foreach ($states as $state) {\r\n            $jobList[$state] = $this->findJobsByState($GLOBALS['tube'], $state, $searchStr, $limit);\r\n            $jobList['total']+=count($jobList[$state]);\r\n        }\r\n\r\n        $this->searchResults = $jobList;\r\n    }\r\n\r\n    private function findJobsByState($tube, $state, $searchStr, $limit = 25) {\r\n        $jobList = array();\r\n        $job = null;\r\n\r\n        try {\r\n            $stats = $this->interface->getServerStats();\r\n        } catch (Exception $e) {\r\n            return $jobList;\r\n        }\r\n\r\n        $ready = $stats['current-jobs-ready']['value'];\r\n        $reserved = $stats['current-jobs-reserved']['value'];\r\n        $delayed = $stats['current-jobs-delayed']['value'];\r\n        $buried = $stats['current-jobs-buried']['value'];\r\n        $deleted = $stats['cmd-delete']['value'];\r\n\r\n        try {\r\n            switch ($state) {\r\n                case 'ready':\r\n                    $job = $this->interface->_client->useTube($tube)->peekReady();\r\n                    break;\r\n                case 'delayed':\r\n                    $job = $this->interface->_client->useTube($tube)->peekDelayed();\r\n                    break;\r\n                case 'buried':\r\n                    $job = $this->interface->_client->useTube($tube)->peekBuried();\r\n                    break;\r\n            }\r\n        } catch (Exception $e) {\r\n            \r\n        }\r\n\r\n        if ($job === null)\r\n            return $jobList;\r\n\r\n        $jobList = array();\r\n        $lastId = $ready + $reserved + $delayed + $buried + $deleted;\r\n\r\n        $added = 0;\r\n        for ($id = $job->getId(); $id <= $lastId; $id++) {\r\n            try {\r\n                /** @var Pheanstalk_Job $job */\r\n                $job = $this->interface->_client->peek($id);\r\n                if ($job) {\r\n                    $jobStats = $this->interface->_client->statsJob($job);\r\n                    if ($jobStats->tube === $tube &&\r\n                        $jobStats->state === $state &&\r\n                        strpos($job->getData(), $searchStr) !== false\r\n                    ) {\r\n                        $jobList[$id] = $job;\r\n                        $added++;\r\n                    }\r\n                }\r\n            } catch (Pheanstalk_Exception_ServerException $e) {\r\n                \r\n            }\r\n            if ($added >= $limit || (microtime(true) - $this->actionTimeStart) > $limit) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return $jobList;\r\n    }\r\n\r\n    private function _storeSampleJob($post, $jobData) {\r\n        $storage = new Storage($this->_globalVar['config']['storage']);\r\n        $job_array = array();\r\n        $job_array['name'] = trim($post['addsamplename']);\r\n        $job_array['tubes'] = $post['tubes'];\r\n        $job_array['data'] = $jobData;\r\n        if ($storage->saveJob($job_array)) {\r\n            return true;\r\n        } else {\r\n            return $storage->getError();\r\n        }\r\n    }\r\n\r\n    public function getSampleJobs($tube = null) {\r\n        $storage = new Storage($this->_globalVar['config']['storage']);\r\n        if ($tube) {\r\n            return $storage->getJobsForTube($tube);\r\n        } else {\r\n            return $storage->getJobs();\r\n        }\r\n    }\r\n\r\n    private function moveJobsFromTo($server, $tube, $state, $destTube) {\r\n        try {\r\n            do {\r\n                switch ($state) {\r\n                    case 'ready':\r\n                        $job = $this->interface->_client->useTube($tube)->peekReady();\r\n                        break;\r\n                    case 'delayed':\r\n                        $job = $this->interface->_client->useTube($tube)->peekDelayed();\r\n                        break;\r\n                    case 'buried':\r\n                        $job = $this->interface->_client->useTube($tube)->peekBuried();\r\n                        break;\r\n                }\r\n\r\n                if ($job) {\r\n                    $this->interface->addJob($destTube, $job->getData());\r\n                    $this->interface->_client->delete($job);\r\n                    set_time_limit(5);\r\n                }\r\n            } while (!empty($job));\r\n        } catch (Exception $e) {\r\n            // there might be no jobs to peek at, and peekReady raises exception in this situation\r\n        }\r\n        header(sprintf('Location: ./?server=%s&tube=%s', $server, urlencode($destTube)));\r\n    }\r\n\r\n    private function moveJobsToState($server, $tube, $state, $destState) {\r\n        try {\r\n            do {\r\n                $job = null;\r\n                switch ($state) {\r\n                    case 'ready':\r\n                        $job = $this->interface->_client->watch($tube)->reserve(0);\r\n                        break;\r\n                    default:\r\n                        return;\r\n                }\r\n\r\n                if ($job) {\r\n                    switch ($destState) {\r\n                        case 'buried':\r\n                            $this->interface->_client->bury($job);\r\n                            break;\r\n                        default:\r\n                            return;\r\n                    }\r\n                    set_time_limit(5);\r\n                }\r\n            } while (!empty($job));\r\n        } catch (Exception $e) {\r\n            // there might be no jobs to peek at, and peekReady raises exception in this situation\r\n        }\r\n        header(sprintf('Location: ./?server=%s&tube=%s', $server, urlencode($tube)));\r\n    }\r\n\r\n}\r\n"], "fixing_code": ["<?php\r\n\r\n/**\r\n * @link https://github.com/ptrofimov/beanstalk_console\r\n * @link http://kr.github.com/beanstalkd/\r\n * @author Petr Trofimov, Sergey Lysenko\r\n */\r\nfunction autoload_class($class) {\r\n    require_once str_replace('_', '/', $class) . '.php';\r\n}\r\n\r\nspl_autoload_register('autoload_class');\r\n\r\nsession_start();\r\nrequire_once 'Pheanstalk/ClassLoader.php';\r\nPheanstalk_ClassLoader::register(dirname(__FILE__));\r\n\r\nrequire_once 'BeanstalkInterface.class.php';\r\nrequire_once dirname(__FILE__) . '/../config.php';\r\nrequire_once dirname(__FILE__) . '/../src/Storage.php';\r\n\r\n$GLOBALS['server'] = !empty($_GET['server']) ? htmlspecialchars($_GET['server']) : '';\r\n$GLOBALS['action'] = !empty($_GET['action']) ? $_GET['action'] : '';\r\n$GLOBALS['state'] = !empty($_GET['state']) ? $_GET['state'] : '';\r\n$GLOBALS['count'] = !empty($_GET['count']) ? $_GET['count'] : '';\r\n$GLOBALS['tube'] = !empty($_GET['tube']) ? $_GET['tube'] : '';\r\n$GLOBALS['tplMain'] = !empty($_GET['tplMain']) ? $_GET['tplMain'] : '';\r\n$GLOBALS['tplBlock'] = !empty($_GET['tplBlock']) ? $_GET['tplBlock'] : '';\r\n\r\nclass Console {\r\n\r\n    /**\r\n     * @var BeanstalkInterface\r\n     */\r\n    public $interface;\r\n    protected $_tplVars = array();\r\n    protected $_globalVar = array();\r\n    protected $_errors = array();\r\n    private $serversConfig = array();\r\n    private $serversEnv = array();\r\n    private $serversCookie = array();\r\n    private $searchResults = array();\r\n    private $actionTimeStart = 0;\r\n\r\n    public function __construct() {\r\n        $this->__init();\r\n        $this->_main();\r\n    }\r\n\r\n    /** @return array */\r\n    public function getServers() {\r\n        return array_merge($this->serversConfig, $this->serversEnv, $this->serversCookie);\r\n    }\r\n\r\n    /** @return array */\r\n    public function getServersConfig() {\r\n        return $this->serversConfig;\r\n    }\r\n\r\n    /** @return array */\r\n    public function getServersEnv() {\r\n        return $this->serversEnv;\r\n    }\r\n\r\n    /** @return array */\r\n    public function getServersCookie() {\r\n        return $this->serversCookie;\r\n    }\r\n\r\n    public function getServerStats($server) {\r\n        try {\r\n            $interface = new BeanstalkInterface($server);\r\n            $stats = $interface->getServerStats();\r\n        } catch (Pheanstalk_Exception_ConnectionException $e) {\r\n            $stats = array();\r\n        }\r\n\r\n        return $stats;\r\n    }\r\n\r\n    public function getServerStatsGroups() {\r\n        return array(\r\n            'binlog' => array(\r\n                'binlog-current-index' => 'the index of the current binlog file being written to. If binlog is not active this value will be 0',\r\n                'binlog-max-size' => 'the maximum size in bytes a binlog file is allowed to get before a new binlog file is opened',\r\n                'binlog-oldest-index' => 'the index of the oldest binlog file needed to store the current jobs',\r\n                'binlog-records-migrated' => 'the cumulative number of records written as part of compaction',\r\n                'binlog-records-written' => 'the cumulative number of records written to the binlog',\r\n            ),\r\n            'cmd' => array(\r\n                'cmd-bury' => 'the cumulative number of bury commands',\r\n                'cmd-delete' => 'the cumulative number of delete commands',\r\n                'cmd-ignore' => 'the cumulative number of ignore commands',\r\n                'cmd-kick' => 'the cumulative number of kick commands',\r\n                'cmd-list-tube-used' => 'the cumulative number of list-tube-used commands',\r\n                'cmd-list-tubes' => 'the cumulative number of list-tubes commands',\r\n                'cmd-list-tubes-watched' => 'the cumulative number of list-tubes-watched commands',\r\n                'cmd-pause-tube' => 'the cumulative number of pause-tube commands',\r\n                'cmd-peek' => 'the cumulative number of peek commands',\r\n                'cmd-peek-buried' => 'the cumulative number of peek-buried commands',\r\n                'cmd-peek-delayed' => 'the cumulative number of peek-delayed commands',\r\n                'cmd-peek-ready' => 'the cumulative number of peek-ready commands',\r\n                'cmd-put' => 'the cumulative number of put commands',\r\n                'cmd-release' => 'the cumulative number of release commands',\r\n                'cmd-reserve' => 'the cumulative number of reserve commands',\r\n                'cmd-stats' => 'the cumulative number of stats commands',\r\n                'cmd-stats-job' => 'the cumulative number of stats-job commands',\r\n                'cmd-stats-tube' => 'the cumulative number of stats-tube commands',\r\n                'cmd-use' => 'the cumulative number of use commands',\r\n                'cmd-watch' => 'the cumulative number of watch commands',\r\n            ),\r\n            'current' => array(\r\n                'current-connections' => 'the number of currently open connections',\r\n                'current-jobs-buried' => 'the number of buried jobs',\r\n                'current-jobs-delayed' => 'the number of delayed jobs',\r\n                'current-jobs-ready' => 'the number of jobs in the ready queue',\r\n                'current-jobs-reserved' => 'the number of jobs reserved by all clients',\r\n                'current-jobs-urgent' => 'the number of ready jobs with priority < 1024',\r\n                'current-producers' => 'the number of open connections that have each issued at least one put command',\r\n                'current-tubes' => 'the number of currently-existing tubes',\r\n                'current-waiting' => 'the number of open connections that have issued a reserve command but not yet received a response',\r\n                'current-workers' => 'the number of open connections that have each issued at least one reserve command',\r\n            ),\r\n            'other' => array(\r\n                'hostname' => 'the hostname of the machine as determined by uname',\r\n                'id' => 'a random id string for this server process, generated when each beanstalkd process starts',\r\n                'job-timeouts' => 'the cumulative count of times a job has timed out',\r\n                'max-job-size' => 'the maximum number of bytes in a job',\r\n                'pid' => 'the process id of the server',\r\n                'rusage-stime' => 'the cumulative system CPU time of this process in seconds and microseconds',\r\n                'rusage-utime' => 'the cumulative user CPU time of this process in seconds and microseconds',\r\n                'total-connections' => 'the cumulative count of connections',\r\n                'total-jobs' => 'the cumulative count of jobs created',\r\n                'uptime' => 'the number of seconds since this server process started running',\r\n                'version' => 'the version string of the server',\r\n            ),\r\n        );\r\n    }\r\n\r\n    public function getTubeStatFields() {\r\n        return array(\r\n            'current-jobs-urgent' => 'number of ready jobs with priority < 1024 in this tube',\r\n            'current-jobs-ready' => 'number of jobs in the ready queue in this tube',\r\n            'current-jobs-reserved' => 'number of jobs reserved by all clients in this tube',\r\n            'current-jobs-delayed' => 'number of delayed jobs in this tube',\r\n            'current-jobs-buried' => 'number of buried jobs in this tube',\r\n            'total-jobs' => 'cumulative count of jobs created in this tube in the current beanstalkd process',\r\n            'current-using' => 'number of open connections that are currently using this tube',\r\n            'current-waiting' => 'number of open connections that have issued a reserve command while watching this tube but not yet received a response',\r\n            'current-watching' => 'number of open connections that are currently watching this tube',\r\n            'pause' => 'number of seconds the tube has been paused for',\r\n            'cmd-delete' => 'cumulative number of delete commands for this tube',\r\n            'cmd-pause-tube' => 'cumulative number of pause-tube commands for this tube',\r\n            'pause-time-left' => 'number of seconds until the tube is un-paused',\r\n        );\r\n    }\r\n\r\n    public function getTubeStatGroups() {\r\n        return array(\r\n            'current' => array(\r\n                'current-jobs-buried',\r\n                'current-jobs-delayed',\r\n                'current-jobs-ready',\r\n                'current-jobs-reserved',\r\n                'current-jobs-urgent',\r\n                'current-using',\r\n                'current-waiting',\r\n                'current-watching',\r\n            ),\r\n            'other' => array(\r\n                'cmd-delete',\r\n                'cmd-pause-tube',\r\n                'pause',\r\n                'pause-time-left',\r\n                'total-jobs',\r\n            ),\r\n        );\r\n    }\r\n\r\n    public function getTubeStatVisible() {\r\n        if (!empty($_COOKIE['tubefilter'])) {\r\n            return explode(',', $_COOKIE['tubefilter']);\r\n        } else {\r\n            return array(\r\n                'current-jobs-buried',\r\n                'current-jobs-delayed',\r\n                'current-jobs-ready',\r\n                'current-jobs-reserved',\r\n                'current-jobs-urgent',\r\n                'total-jobs',\r\n            );\r\n        }\r\n    }\r\n\r\n    public function getTubeStatValues($tube) {\r\n        // make sure, that rapid tube disappearance (eg: anonymous tubes, don't kill the interface, as they might be missing)\r\n        try {\r\n            return $this->interface->_client->statsTube($tube);\r\n        } catch (Pheanstalk_Exception_ServerException $ex) {\r\n            if (strpos($ex->getMessage(), Pheanstalk_Response::RESPONSE_NOT_FOUND) !== false) {\r\n                return array();\r\n            } else {\r\n                throw $ex;\r\n            }\r\n        }\r\n    }\r\n\r\n    public function getSearchResult() {\r\n        return $this->searchResults;\r\n    }\r\n\r\n    protected function __init() {\r\n        $this->_globalVar = array(\r\n            'server' => $GLOBALS['server'],\r\n            'action' => $GLOBALS['action'],\r\n            'state' => $GLOBALS['state'],\r\n            'count' => $GLOBALS['count'],\r\n            'tube' => $GLOBALS['tube'],\r\n            '_tplMain' => $GLOBALS['tplMain'],\r\n            '_tplBlock' => $GLOBALS['tplBlock'],\r\n            'config' => $GLOBALS['config']);\r\n        $this->_tplVars = $this->_globalVar;\r\n        if (!in_array($this->_tplVars['_tplBlock'], array('allTubes', 'serversList'))) {\r\n            unset($this->_tplVars['_tplBlock']);\r\n        }\r\n        if (!in_array($this->_tplVars['_tplMain'], array('main', 'ajax'))) {\r\n            unset($this->_tplVars['_tplMain']);\r\n        }\r\n        if (empty($this->_tplVars['_tplMain'])) {\r\n            $this->_tplVars['_tplMain'] = 'main';\r\n        }\r\n\r\n        foreach ($GLOBALS['config']['servers'] as $key => $server) {\r\n            $this->serversConfig[$key] = $server;\r\n        }\r\n        if (false !== getenv('BEANSTALK_SERVERS')) {\r\n            foreach (explode(',', getenv('BEANSTALK_SERVERS')) as $key => $server) {\r\n                $this->serversEnv[$key] = $server;\r\n            }\r\n        }\r\n        if (isset($_COOKIE['beansServers'])) {\r\n            foreach (explode(';', $_COOKIE['beansServers']) as $key => $server) {\r\n                $this->serversCookie[$key] = $server;\r\n            }\r\n        }\r\n        try {\r\n            $storage = new Storage($GLOBALS['config']['storage']);\r\n        } catch (Exception $ex) {\r\n            $this->_errors[] = $ex->getMessage();\r\n        }\r\n    }\r\n\r\n    public function getErrors() {\r\n        return $this->_errors;\r\n    }\r\n\r\n    public function getTplVars($var = null) {\r\n        if (!empty($var)) {\r\n            $result = !empty($this->_tplVars[$var]) ? $this->_tplVars[$var] : null;\r\n        } else {\r\n            $result = $this->_tplVars;\r\n        }\r\n\r\n        return $result;\r\n    }\r\n\r\n    protected function deleteAllFromTube($state, $tube) {\r\n        try {\r\n            do {\r\n                switch ($state) {\r\n                    case 'ready':\r\n                        $job = $this->interface->_client->useTube($tube)->peekReady();\r\n                        break;\r\n                    case 'delayed':\r\n                        try {\r\n                            $ready = $this->interface->_client->useTube($tube)->peekReady();\r\n                            if ($ready) {\r\n                                $this->_errors[] = 'Cannot delete Delayed until there are Ready messages on this tube';\r\n                                return;\r\n                            }\r\n                        } catch (Exception $e) {\r\n                            // there might be no jobs to peek at, and peekReady raises exception in this situation\r\n                            if (strpos($e->getMessage(), Pheanstalk_Response::RESPONSE_NOT_FOUND) === false) {\r\n                                throw $e;\r\n                            }\r\n                        }\r\n                        try {\r\n                            $bury = $this->interface->_client->useTube($tube)->peekBuried();\r\n                            if ($bury) {\r\n                                $this->_errors[] = 'Cannot delete Delayed until there are Bury messages on this tube';\r\n                                return;\r\n                            }\r\n                        } catch (Exception $e) {\r\n                            // there might be no jobs to peek at, and peekReady raises exception in this situation\r\n                            if (strpos($e->getMessage(), Pheanstalk_Response::RESPONSE_NOT_FOUND) === false) {\r\n                                throw $e;\r\n                            }\r\n                        }\r\n                        $job = $this->interface->_client->useTube($tube)->peekDelayed();\r\n                        if ($job) {\r\n                            //when we found job with Delayed, kick all messages, to be ready, so that we can Delete them.\r\n                            $this->interface->kick($tube, 100000000);\r\n                            $this->deleteAllFromTube('ready', $tube);\r\n                            return;\r\n                        }\r\n                        break;\r\n                    case 'buried':\r\n                        $job = $this->interface->_client->useTube($tube)->peekBuried();\r\n                        break;\r\n                }\r\n\r\n                if ($job) {\r\n                    $this->interface->_client->delete($job);\r\n                    set_time_limit(5);\r\n                }\r\n            } while (!empty($job));\r\n        } catch (Exception $e) {\r\n            // there might be no jobs to peek at, and peekReady raises exception in this situation\r\n            // skip not found exception\r\n            if (strpos($e->getMessage(), Pheanstalk_Response::RESPONSE_NOT_FOUND) === false) {\r\n                $this->_errors[] = $e->getMessage();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected function _main() {\r\n\r\n\r\n        if (!isset($_GET['server'])) {\r\n            // execute methods without a server\r\n            if (isset($_GET['action']) && in_array($_GET['action'], array('serversRemove', 'manageSamples', 'deleteSample', 'editSample', 'newSample'))) {\r\n                $funcName = \"_action\" . ucfirst($this->_globalVar['action']);\r\n                if (method_exists($this, $funcName)) {\r\n                    $this->$funcName();\r\n                }\r\n                return;\r\n            }\r\n            return;\r\n        }\r\n\r\n        try {\r\n            $this->interface = new BeanstalkInterface($this->_globalVar['server']);\r\n\r\n            $this->_tplVars['tubes'] = $this->interface->getTubes();\r\n\r\n            $stats = $this->interface->getTubesStats();\r\n\r\n            $this->_tplVars['tubesStats'] = $stats;\r\n            $this->_tplVars['peek'] = $this->interface->peekAll($this->_globalVar['tube']);\r\n            $this->_tplVars['contentType'] = $this->interface->getContentType();\r\n            if (!empty($_GET['action'])) {\r\n                $funcName = \"_action\" . ucfirst($this->_globalVar['action']);\r\n                if (method_exists($this, $funcName)) {\r\n                    $this->$funcName();\r\n                }\r\n                return;\r\n            }\r\n        } catch (Pheanstalk_Exception_ConnectionException $e) {\r\n            $this->_errors[] = 'The server is unavailable';\r\n        } catch (Pheanstalk_Exception_ServerException $e) {\r\n            // if we get response not found, we just skip it (as the peekAll reached a tube which no longer existed)\r\n            if (strpos($e->getMessage(), Pheanstalk_Response::RESPONSE_NOT_FOUND) === false) {\r\n                $this->_errors[] = $e->getMessage();\r\n            }\r\n        } catch (Exception $e) {\r\n            $this->_errors[] = $e->getMessage();\r\n        }\r\n    }\r\n\r\n    protected function _actionKick() {\r\n        $this->interface->kick($this->_globalVar['tube'], $this->_globalVar['count']);\r\n        header(\r\n                sprintf('Location: ./?server=%s&tube=%s', $this->_globalVar['server'], urlencode($this->_globalVar['tube'])));\r\n        exit();\r\n    }\r\n\r\n    protected function _actionKickJob() {\r\n        $job = $this->interface->_client->peek(intval($_GET['jobid']));\r\n        if ($job) {\r\n            $this->interface->_client->kickJob($job);\r\n        }\r\n        header(\r\n                sprintf('Location: ./?server=%s&tube=%s', $this->_globalVar['server'], urlencode($this->_globalVar['tube'])));\r\n        exit();\r\n    }\r\n\r\n    protected function _actionDelete() {\r\n        switch ($this->_globalVar['state']) {\r\n            case 'ready':\r\n                $this->interface->deleteReady($this->_globalVar['tube']);\r\n                break;\r\n            case 'delayed':\r\n                $this->interface->deleteDelayed($this->_globalVar['tube']);\r\n                break;\r\n            case 'buried':\r\n                $this->interface->deleteBuried($this->_globalVar['tube']);\r\n                break;\r\n        }\r\n\r\n        $this->_postDelete();\r\n    }\r\n\r\n    protected function _actionDeleteJob() {\r\n        $job = $this->interface->_client->peek(intval($_GET['jobid']));\r\n        if ($job) {\r\n            $this->interface->_client->delete($job);\r\n        }\r\n        $this->_postDelete();\r\n    }\r\n\r\n    protected function _postDelete() {\r\n        $arr = $this->getTubeStatValues($this->_globalVar['tube']);\r\n        $availableJobs = $arr['current-jobs-urgent'] + $arr['current-jobs-ready'] + $arr['current-jobs-reserved'] + $arr['current-jobs-delayed'] + $arr['current-jobs-buried'];\r\n        if (empty($availableJobs)) {\r\n            // make sure we redirect to all tubes, as this tube no longer exists\r\n            $this->_globalVar['tube'] = null;\r\n        }\r\n        header(\r\n                sprintf('Location: ./?server=%s&tube=%s', $this->_globalVar['server'], urlencode($this->_globalVar['tube'])));\r\n        exit();\r\n    }\r\n\r\n    protected function _actionDeleteAll($tube = null) {\r\n        if (empty($tube)) {\r\n            $tube = $this->_globalVar['tube'];\r\n        }\r\n        $this->deleteAllFromTube($this->_globalVar['state'], $tube);\r\n        if (empty($this->_errors)) {\r\n            $this->_postDelete();\r\n        }\r\n    }\r\n\r\n    protected function _actionServersRemove() {\r\n        $server = $_GET['removeServer'];\r\n        $cookie_servers = array_diff($this->getServersCookie(), array($server));\r\n        if (count($cookie_servers)) {\r\n            setcookie('beansServers', implode(';', $cookie_servers), time() + 86400 * 365);\r\n        } else {\r\n            // no servers, clear cookie\r\n            setcookie('beansServers', '', time() - 86400 * 365);\r\n        }\r\n        header('Location: ./?');\r\n        exit();\r\n    }\r\n\r\n    protected function _actionAddjob() {\r\n        $result = array('result' => false);\r\n\r\n        $tubeName = !empty($_POST['tubeName']) ? $_POST['tubeName'] : '';\r\n        $tubeData = !empty($_POST['tubeData']) ? stripcslashes($_POST['tubeData']) : '';\r\n        $tubePriority = !empty($_POST['tubePriority']) ? $_POST['tubePriority'] : '';\r\n        $tubeDelay = !empty($_POST['tubeDelay']) ? $_POST['tubeDelay'] : '';\r\n        $tubeTtr = !empty($_POST['tubeTtr']) ? $_POST['tubeTtr'] : '';\r\n\r\n        $id = $this->interface->addJob($tubeName, $tubeData, $tubePriority, $tubeDelay, $tubeTtr);\r\n\r\n        if (!empty($id)) {\r\n            $result = array('result' => true, 'id' => $id);\r\n        }\r\n\r\n        echo json_encode($result);\r\n        exit();\r\n    }\r\n\r\n    protected function _actionReloader() {\r\n        $this->_tplVars['_tplMain'] = 'ajax';\r\n        $this->_tplVars['_tplBlock'] = 'allTubes';\r\n    }\r\n\r\n    protected function _actionClearTubes() {\r\n        if (is_array($_POST)) {\r\n            foreach ($_POST as $tube => $v) {\r\n                $states = array('ready', 'delayed', 'buried');\r\n                foreach ($states as $state) {\r\n                    $this->deleteAllFromTube($state, $tube);\r\n                }\r\n            }\r\n        }\r\n        echo json_encode(array('result' => true));\r\n        exit();\r\n    }\r\n\r\n    protected function _actionPause() {\r\n        if ($this->_globalVar['count'] == -1) {\r\n            if (!@empty($_COOKIE['tubePauseSeconds'])) {\r\n                $this->_globalVar['count'] = $_COOKIE['tubePauseSeconds'];\r\n            } else {\r\n                $this->_globalVar['count'] = 3600;\r\n            }\r\n        }\r\n        $this->interface->pauseTube($this->_globalVar['tube'], $this->_globalVar['count']);\r\n        header(\r\n                sprintf('Location: ./?server=%s&tube=%s', $this->_globalVar['server'], urlencode($this->_globalVar['tube'])));\r\n        exit();\r\n    }\r\n\r\n    protected function _actionAddSample() {\r\n        $success = false;\r\n        $error = '';\r\n        $response = array('result' => &$success, 'error' => &$error);\r\n        if (isset($_POST['addsamplejobid']) && isset($_POST['addsamplename']) && isset($_POST['tube']) && isset($_POST['tubes'])) {\r\n            try {\r\n                $job = $this->interface->_client->peek(intval($_POST['addsamplejobid']));\r\n                if ($job) {\r\n                    $res = $this->_storeSampleJob($_POST, $job->getData());\r\n                    if ($res === true) {\r\n                        $success = true;\r\n                    } else {\r\n                        $error = $res;\r\n                    }\r\n                } else {\r\n                    $error = 'Invalid state option';\r\n                }\r\n            } catch (Exception $e) {\r\n                // there might be no jobs to peek at, and peekReady raises exception in this situation\r\n                $error = $e->getMessage();\r\n            }\r\n        } else {\r\n            $error = 'Required fields are not set';\r\n        }\r\n        echo json_encode($response);\r\n        exit();\r\n    }\r\n\r\n    protected function _actionLoadSample() {\r\n        $key = $_GET['key'];\r\n        if (!empty($key)) {\r\n            $storage = new Storage($this->_globalVar['config']['storage']);\r\n            $job = $storage->load($key);\r\n            if ($job) {\r\n                $this->interface->addJob($this->_globalVar['tube'], $job['data']);\r\n            }\r\n        }\r\n        if (isset($_GET['redirect'])) {\r\n            $_SESSION['info'] = 'Job placed on tube';\r\n            header(sprintf('Location: %s', $_GET['redirect']));\r\n        } else {\r\n            header(sprintf('Location: ./?server=%s&tube=%s', $this->_globalVar['server'], urlencode($this->_globalVar['tube'])));\r\n        }\r\n        exit();\r\n    }\r\n\r\n    protected function _actionManageSamples() {\r\n        $this->_tplVars['_tplMain'] = 'main';\r\n        $this->_tplVars['_tplPage'] = 'sampleJobsManage';\r\n    }\r\n\r\n    protected function _actionEditSample() {\r\n        $this->_tplVars['_tplMain'] = 'main';\r\n        $this->_tplVars['_tplPage'] = 'sampleJobsEdit';\r\n        $key = $_GET['key'];\r\n        if (!empty($key)) {\r\n            $storage = new Storage($this->_globalVar['config']['storage']);\r\n            $job = $storage->load($key);\r\n            if ($_SERVER['REQUEST_METHOD'] == 'POST') {\r\n                if (isset($_POST['jobdata']) && isset($_POST['name']) && isset($_POST['tubes'])) {\r\n                    $oldjob = $job;\r\n                    $storage->delete($key);\r\n                    $job['name'] = $_POST['name'];\r\n                    $job['tubes'] = $_POST['tubes'];\r\n                    $job['data'] = htmlspecialchars_decode($_POST['jobdata']);\r\n                    if ($storage->saveJob($job)) {\r\n                        header('Location: ./?action=manageSamples');\r\n                    } else {\r\n                        $storage->saveJob($oldjob);\r\n                        $this->_tplVars['error'] = $storage->getError();\r\n                    }\r\n                } else {\r\n                    $job['name'] = @$_POST['name'];\r\n                    $job['data'] = @$_POST['jobdata'];\r\n                    $job['tubes'] = @$_POST['tubes'];\r\n                    $this->_tplVars['error'] = 'Required fields are not set';\r\n                }\r\n            }\r\n            if ($job) {\r\n                $this->_tplVars['job'] = $job;\r\n            } else {\r\n                $this->_errors[] = 'Cannot locate job';\r\n                return;\r\n            }\r\n        } else {\r\n            $this->_errors[] = 'The requested key is invalid';\r\n            return;\r\n        }\r\n        $serverTubes = array();\r\n        if (is_array($this->getServers())) {\r\n            foreach ($this->getServers() as $server) {\r\n                try {\r\n                    $interface = new BeanstalkInterface($server);\r\n                    $tubes = $interface->getTubes();\r\n                    if (is_array($tubes)) {\r\n                        $serverTubes[$server] = $tubes;\r\n                    }\r\n                } catch (Exception $e) {\r\n                    \r\n                }\r\n            }\r\n        }\r\n        if (empty($serverTubes)) {\r\n            $this->_errors[] = 'No tubes were found, please connect a server.';\r\n            return;\r\n        }\r\n        $this->_tplVars['serverTubes'] = $serverTubes;\r\n    }\r\n\r\n    protected function _actionNewSample() {\r\n        $this->_tplVars['_tplMain'] = 'main';\r\n        $this->_tplVars['_tplPage'] = 'sampleJobsEdit';\r\n        $this->_tplVars['isNewRecord'] = true;\r\n        $storage = new Storage($this->_globalVar['config']['storage']);\r\n        if ($_SERVER['REQUEST_METHOD'] == 'POST') {\r\n            if (isset($_POST['jobdata']) && isset($_POST['name']) && isset($_POST['tubes'])) {\r\n                $job['name'] = $_POST['name'];\r\n                $job['tubes'] = $_POST['tubes'];\r\n                $job['data'] = htmlspecialchars_decode($_POST['jobdata']);\r\n                if ($storage->saveJob($job)) {\r\n                    header('Location: ./?action=manageSamples');\r\n                } else {\r\n                    $this->_tplVars['error'] = $storage->getError();\r\n                }\r\n            } else {\r\n                $job['name'] = @$_POST['name'];\r\n                $job['data'] = @$_POST['jobdata'];\r\n                $job['tubes'] = @$_POST['tubes'];\r\n                $this->_tplVars['error'] = 'Required fields are not set';\r\n            }\r\n        }\r\n\r\n        $serverTubes = array();\r\n        if (is_array($this->getServers())) {\r\n            foreach ($this->getServers() as $server) {\r\n                try {\r\n                    $interface = new BeanstalkInterface($server);\r\n                    $tubes = $interface->getTubes();\r\n                    if (is_array($tubes)) {\r\n                        $serverTubes[$server] = $tubes;\r\n                    }\r\n                } catch (Exception $e) {\r\n                    \r\n                }\r\n            }\r\n        }\r\n        if (empty($serverTubes)) {\r\n            $this->_errors[] = 'No tubes were found, please connect a server.';\r\n            return;\r\n        }\r\n        $this->_tplVars['serverTubes'] = $serverTubes;\r\n    }\r\n\r\n    protected function _actionDeleteSample() {\r\n        $key = $_GET['key'];\r\n        if (!empty($key)) {\r\n            $storage = new Storage($this->_globalVar['config']['storage']);\r\n            $job = $storage->load($key);\r\n            if ($job) {\r\n                $storage->delete($key);\r\n            }\r\n        }\r\n        header('Location: ./?action=manageSamples');\r\n        exit();\r\n    }\r\n\r\n    protected function _actionMoveJobsTo() {\r\n        $destServer = (isset($_GET['server'])) ? $_GET['server'] : null;\r\n        $destTube = (isset($_GET['destTube'])) ? $_GET['destTube'] : null;\r\n        $destState = (isset($_GET['destState'])) ? $_GET['destState'] : null;\r\n        if (!empty($destTube) && in_array($GLOBALS['state'], array('ready', 'delayed', 'buried'))) {\r\n            $this->moveJobsFromTo($destServer, $GLOBALS['tube'], $GLOBALS['state'], $destTube);\r\n        }\r\n        if (!empty($destState)) {\r\n            $this->moveJobsToState($destServer, $GLOBALS['tube'], $GLOBALS['state'], $destState);\r\n        }\r\n    }\r\n\r\n    protected function _actionSearch() {\r\n        $this->actionTimeStart = microtime(true);\r\n        $timelimit_in_seconds = 15;\r\n        $searchStr = (isset($_GET['searchStr'])) ? $_GET['searchStr'] : null;\r\n        $states = array('ready', 'delayed', 'buried');\r\n        $jobList = array();\r\n        $limit = null;\r\n\r\n        if ($searchStr === null or $searchStr === '')\r\n            return false;\r\n\r\n        if (isset($_GET['limit'])) {\r\n            $limit = intval($_GET['limit']);\r\n        }\r\n\r\n        foreach ($states as $state) {\r\n            $jobList[$state] = $this->findJobsByState($GLOBALS['tube'], $state, $searchStr, $limit);\r\n            $jobList['total']+=count($jobList[$state]);\r\n        }\r\n\r\n        $this->searchResults = $jobList;\r\n    }\r\n\r\n    private function findJobsByState($tube, $state, $searchStr, $limit = 25) {\r\n        $jobList = array();\r\n        $job = null;\r\n\r\n        try {\r\n            $stats = $this->interface->getServerStats();\r\n        } catch (Exception $e) {\r\n            return $jobList;\r\n        }\r\n\r\n        $ready = $stats['current-jobs-ready']['value'];\r\n        $reserved = $stats['current-jobs-reserved']['value'];\r\n        $delayed = $stats['current-jobs-delayed']['value'];\r\n        $buried = $stats['current-jobs-buried']['value'];\r\n        $deleted = $stats['cmd-delete']['value'];\r\n\r\n        try {\r\n            switch ($state) {\r\n                case 'ready':\r\n                    $job = $this->interface->_client->useTube($tube)->peekReady();\r\n                    break;\r\n                case 'delayed':\r\n                    $job = $this->interface->_client->useTube($tube)->peekDelayed();\r\n                    break;\r\n                case 'buried':\r\n                    $job = $this->interface->_client->useTube($tube)->peekBuried();\r\n                    break;\r\n            }\r\n        } catch (Exception $e) {\r\n            \r\n        }\r\n\r\n        if ($job === null)\r\n            return $jobList;\r\n\r\n        $jobList = array();\r\n        $lastId = $ready + $reserved + $delayed + $buried + $deleted;\r\n\r\n        $added = 0;\r\n        for ($id = $job->getId(); $id <= $lastId; $id++) {\r\n            try {\r\n                /** @var Pheanstalk_Job $job */\r\n                $job = $this->interface->_client->peek($id);\r\n                if ($job) {\r\n                    $jobStats = $this->interface->_client->statsJob($job);\r\n                    if ($jobStats->tube === $tube &&\r\n                        $jobStats->state === $state &&\r\n                        strpos($job->getData(), $searchStr) !== false\r\n                    ) {\r\n                        $jobList[$id] = $job;\r\n                        $added++;\r\n                    }\r\n                }\r\n            } catch (Pheanstalk_Exception_ServerException $e) {\r\n                \r\n            }\r\n            if ($added >= $limit || (microtime(true) - $this->actionTimeStart) > $limit) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return $jobList;\r\n    }\r\n\r\n    private function _storeSampleJob($post, $jobData) {\r\n        $storage = new Storage($this->_globalVar['config']['storage']);\r\n        $job_array = array();\r\n        $job_array['name'] = trim($post['addsamplename']);\r\n        $job_array['tubes'] = $post['tubes'];\r\n        $job_array['data'] = $jobData;\r\n        if ($storage->saveJob($job_array)) {\r\n            return true;\r\n        } else {\r\n            return $storage->getError();\r\n        }\r\n    }\r\n\r\n    public function getSampleJobs($tube = null) {\r\n        $storage = new Storage($this->_globalVar['config']['storage']);\r\n        if ($tube) {\r\n            return $storage->getJobsForTube($tube);\r\n        } else {\r\n            return $storage->getJobs();\r\n        }\r\n    }\r\n\r\n    private function moveJobsFromTo($server, $tube, $state, $destTube) {\r\n        try {\r\n            do {\r\n                switch ($state) {\r\n                    case 'ready':\r\n                        $job = $this->interface->_client->useTube($tube)->peekReady();\r\n                        break;\r\n                    case 'delayed':\r\n                        $job = $this->interface->_client->useTube($tube)->peekDelayed();\r\n                        break;\r\n                    case 'buried':\r\n                        $job = $this->interface->_client->useTube($tube)->peekBuried();\r\n                        break;\r\n                }\r\n\r\n                if ($job) {\r\n                    $this->interface->addJob($destTube, $job->getData());\r\n                    $this->interface->_client->delete($job);\r\n                    set_time_limit(5);\r\n                }\r\n            } while (!empty($job));\r\n        } catch (Exception $e) {\r\n            // there might be no jobs to peek at, and peekReady raises exception in this situation\r\n        }\r\n        header(sprintf('Location: ./?server=%s&tube=%s', $server, urlencode($destTube)));\r\n    }\r\n\r\n    private function moveJobsToState($server, $tube, $state, $destState) {\r\n        try {\r\n            do {\r\n                $job = null;\r\n                switch ($state) {\r\n                    case 'ready':\r\n                        $job = $this->interface->_client->watch($tube)->reserve(0);\r\n                        break;\r\n                    default:\r\n                        return;\r\n                }\r\n\r\n                if ($job) {\r\n                    switch ($destState) {\r\n                        case 'buried':\r\n                            $this->interface->_client->bury($job);\r\n                            break;\r\n                        default:\r\n                            return;\r\n                    }\r\n                    set_time_limit(5);\r\n                }\r\n            } while (!empty($job));\r\n        } catch (Exception $e) {\r\n            // there might be no jobs to peek at, and peekReady raises exception in this situation\r\n        }\r\n        header(sprintf('Location: ./?server=%s&tube=%s', $server, urlencode($tube)));\r\n    }\r\n\r\n}\r\n"], "filenames": ["lib/include.php"], "buggy_code_start_loc": [22], "buggy_code_end_loc": [23], "fixing_code_start_loc": [22], "fixing_code_end_loc": [23], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in Packagist ptrofimov/beanstalk_console prior to 1.7.12.", "other": {"cve": {"id": "CVE-2022-0501", "sourceIdentifier": "security@huntr.dev", "published": "2022-02-05T16:15:07.607", "lastModified": "2022-02-11T03:13:54.597", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in Packagist ptrofimov/beanstalk_console prior to 1.7.12."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Reflejado en Packagist ptrofimov/beanstalk_console versiones anteriores a 1.7.12"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 8.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:beanstalk_console_project:beanstalk_console:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.7.12", "matchCriteriaId": "45B88B21-053D-4078-8F53-672CFC1E3400"}]}]}], "references": [{"url": "https://github.com/ptrofimov/beanstalk_console/commit/e351c8260ec1d3718d9e475ee57c7e12c47f19da", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/9af1c35e-3f74-4c93-a241-e8be01335ec7", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ptrofimov/beanstalk_console/commit/e351c8260ec1d3718d9e475ee57c7e12c47f19da"}}