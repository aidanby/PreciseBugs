{"buggy_code": ["<?php\n\nnamespace Backend\\Modules\\FormBuilder\\Engine;\n\nuse Backend\\Core\\Language\\Language as BL;\nuse Backend\\Core\\Engine\\Model as BackendModel;\nuse Common\\ModuleExtraType;\nuse Frontend\\Core\\Language\\Language as FL;\nuse Symfony\\Component\\Finder\\Finder;\n\n/**\n * In this file we store all generic functions that we will be using in the form_builder module\n */\nclass Model\n{\n    const QUERY_BROWSE =\n        'SELECT i.id, i.name, i.email, i.method,\n         (SELECT COUNT(fd.form_id) FROM forms_data AS fd WHERE fd.form_id = i.id) AS sent_forms\n         FROM forms AS i\n         WHERE i.language = ?';\n\n    /**\n     * Calculate time ago.\n     *\n     * @param int $timestamp Unix timestamp from the past.\n     *\n     * @return string\n     */\n    public static function calculateTimeAgo(int $timestamp): string\n    {\n        $secondsBetween = time() - $timestamp;\n\n        // calculate\n        $hours = floor($secondsBetween / (60 * 60));\n        $minutes = floor($secondsBetween / 60);\n        $seconds = floor($secondsBetween);\n\n        // today start\n        $todayStart = (int) strtotime(date('d F Y'));\n\n        // today\n        if ($timestamp >= $todayStart) {\n            // today\n            if ($hours >= 1) {\n                return BL::getLabel('Today') . ' ' . date('H:i', $timestamp);\n            }\n\n            if ($minutes > 1) {\n                // more than one minute\n                return sprintf(BL::getLabel('MinutesAgo'), $minutes);\n            }\n\n            if ($minutes == 1) {\n                // one minute\n                return BL::getLabel('OneMinuteAgo');\n            }\n\n            if ($seconds > 1) {\n                // more than one second\n                return sprintf(BL::getLabel('SecondsAgo'), $seconds);\n            }\n\n            return BL::getLabel('OneSecondAgo');\n        }\n\n        if ($timestamp < $todayStart && $timestamp >= ($todayStart - 86400)) {\n            // yesterday\n            return BL::getLabel('Yesterday') . ' ' . date('H:i', $timestamp);\n        }\n\n        // older\n        return date('d/m/Y H:i', $timestamp);\n    }\n\n    /**\n     * Create an unique identifier.\n     *\n     * @return string\n     */\n    public static function createIdentifier(): string\n    {\n        // get last id\n        $id = (int) BackendModel::getContainer()->get('database')->getVar(\n            'SELECT i.id FROM forms AS i ORDER BY i.id DESC LIMIT 1'\n        );\n\n        // create identifier\n        do {\n            ++$id;\n            $identifier = 'form' . $id;\n        } while (self::identifierExist($identifier));\n\n        return $identifier;\n    }\n\n    /**\n     * @param string $identifier\n     *\n     * @return bool\n     */\n    private static function identifierExist(string $identifier): bool\n    {\n        return (int) BackendModel::getContainer()->get('database')\n                ->getVar(\n                    'SELECT 1\n                 FROM forms AS i\n                 WHERE i.identifier = ?\n                 LIMIT 1',\n                    $identifier\n                ) > 0;\n    }\n\n    /**\n     * Delete an item.\n     *\n     * @param int $id The id of the record to delete.\n     */\n    public static function delete(int $id): void\n    {\n        $database = BackendModel::getContainer()->get('database');\n\n        // get field ids\n        $fieldIds = (array) $database->getColumn('SELECT i.id FROM forms_fields AS i WHERE i.form_id = ?', $id);\n\n        // we have items to be deleted\n        if (!empty($fieldIds)) {\n            // delete all fields\n            $database->delete('forms_fields', 'form_id = ?', $id);\n            $database->delete('forms_fields_validation', 'field_id IN(' . implode(',', $fieldIds) . ')');\n        }\n\n        // get data ids\n        $dataIds = (array) $database->getColumn('SELECT i.id FROM forms_data AS i WHERE i.form_id = ?', $id);\n\n        // we have items to be deleted\n        if (!empty($dataIds)) {\n            self::deleteData($dataIds);\n        }\n\n        // delete extra\n        BackendModel::deleteExtra('FormBuilder', 'widget', ['id' => $id]);\n\n        // delete form\n        $database->delete('forms', 'id = ?', $id);\n    }\n\n    /**\n     * Deletes one or more data items.\n     *\n     * @param array $ids Ids of data items.\n     */\n    public static function deleteData(array $ids): void\n    {\n        $database = BackendModel::getContainer()->get('database');\n\n        $database->delete('forms_data', 'id IN(' . implode(',', $ids) . ')');\n        $database->delete('forms_data_fields', 'data_id IN(' . implode(',', $ids) . ')');\n    }\n\n    /**\n     * Delete a field.\n     *\n     * @param int $id Id of a field.\n     */\n    public static function deleteField(int $id): void\n    {\n        // delete linked validation\n        self::deleteFieldValidation($id);\n\n        // delete field\n        BackendModel::getContainer()->get('database')->delete('forms_fields', 'id = ?', $id);\n    }\n\n    /**\n     * Delete all validation of a field.\n     *\n     * @param int $id Id of a field.\n     */\n    public static function deleteFieldValidation(int $id): void\n    {\n        BackendModel::getContainer()->get('database')->delete('forms_fields_validation', 'field_id = ?', $id);\n    }\n\n    /**\n     * Does the item exist.\n     *\n     * @param int $id Id of a form.\n     *\n     * @return bool\n     */\n    public static function exists(int $id): bool\n    {\n        return (bool) BackendModel::getContainer()->get('database')->getVar(\n            'SELECT 1\n             FROM forms AS f\n             WHERE f.id = ?\n             LIMIT 1',\n            $id\n        );\n    }\n\n    /**\n     * Does the data item exist.\n     *\n     * @param int $id Id of the data item.\n     *\n     * @return bool\n     */\n    public static function existsData(int $id): bool\n    {\n        return (bool) BackendModel::getContainer()->get('database')->getVar(\n            'SELECT 1\n             FROM forms_data AS fd\n             WHERE fd.id = ?\n             LIMIT 1',\n            $id\n        );\n    }\n\n    /**\n     * Does a field exist (within a form).\n     *\n     * @param int $id Id of a field.\n     * @param int $formId Id of a form.\n     *\n     * @return bool\n     */\n    public static function existsField(int $id, int $formId = null): bool\n    {\n        // exists\n        if ($formId === null) {\n            return (bool) BackendModel::getContainer()->get('database')->getVar(\n                'SELECT 1\n                 FROM forms_fields AS ff\n                 WHERE ff.id = ?\n                 LIMIT 1',\n                $id\n            );\n        }\n\n        // exists and ignore an id\n        return (bool) BackendModel::getContainer()->get('database')->getVar(\n            'SELECT 1\n             FROM forms_fields AS ff\n             WHERE ff.id = ? AND ff.form_id = ?\n             LIMIT 1',\n            [$id, $formId]\n        );\n    }\n\n    /**\n     * Does an identifier exist.\n     *\n     * @param string $identifier Identifier.\n     * @param int $ignoreId Field id to ignore.\n     *\n     * @return bool\n     */\n    public static function existsIdentifier(string $identifier, int $ignoreId = null): bool\n    {\n        // exists\n        if ($ignoreId === null) {\n            return (bool) BackendModel::getContainer()->get('database')->getVar(\n                'SELECT 1\n                 FROM forms AS f\n                 WHERE f.identifier = ?\n                 LIMIT 1',\n                $identifier\n            );\n        }\n\n        // exists and ignore an id\n        return (bool) BackendModel::getContainer()->get('database')->getVar(\n            'SELECT 1\n             FROM forms AS f\n             WHERE f.identifier = ? AND f.id != ?\n             LIMIT 1',\n            [$identifier, $ignoreId]\n        );\n    }\n\n    /**\n     * Formats the recipients based on the serialized string\n     *\n     * @param string $string The serialized string that should be formatted\n     *\n     * @return string\n     */\n    public static function formatRecipients(string $string): string\n    {\n        return implode(\n            ', ',\n            (array) array_map(\n                'htmlspecialchars',\n                @unserialize($string, ['allowed_classes' => false])\n            )\n        );\n    }\n\n    /**\n     * Get all data for a given id.\n     *\n     * @param int $id The id for the record to get.\n     *\n     * @return array\n     */\n    public static function get(int $id): array\n    {\n        $return = (array) BackendModel::getContainer()->get('database')->getRecord(\n            'SELECT f.* FROM forms AS f WHERE f.id = ?',\n            $id\n        );\n\n        // unserialize the emailaddresses\n        if (isset($return['email'])) {\n            $return['email'] = (array) unserialize($return['email'], ['allowed_classes' => false]);\n        }\n\n        return $return;\n    }\n\n    /**\n     * Get data for a given id.\n     *\n     * @param int $id The id for the record to get.\n     *\n     * @return array\n     */\n    public static function getData(int $id): array\n    {\n        // get data\n        $data = (array) BackendModel::getContainer()->get('database')->getRecord(\n            'SELECT fd.id, fd.form_id, UNIX_TIMESTAMP(fd.sent_on) AS sent_on\n             FROM forms_data AS fd\n             WHERE fd.id = ?',\n            $id\n        );\n\n        // get fields\n        $data['fields'] = (array) BackendModel::getContainer()->get('database')->getRecords(\n            'SELECT fdf.label, fdf.value\n             FROM forms_data_fields AS fdf\n             WHERE fdf.data_id = ?\n             ORDER BY fdf.id',\n            (int) $data['id']\n        );\n\n        // unserialize values\n        foreach ($data['fields'] as &$field) {\n            if ($field['value'] !== null) {\n                $field['value'] = unserialize($field['value'], ['allowed_classes' => false]);\n            }\n        }\n\n        return $data;\n    }\n\n    /**\n     * Get errors (optional by type).\n     *\n     * @param string $type Type of error.\n     *\n     * @return mixed\n     */\n    public static function getErrors(string $type = null)\n    {\n        $errors = [];\n        $errors['required'] = FL::getError('FieldIsRequired');\n        $errors['email'] = FL::getError('EmailIsInvalid');\n        $errors['number'] = FL::getError('NumericCharactersOnly');\n        $errors['time'] = FL::getError('TimeIsInvalid');\n\n        // specific type\n        if ($type !== null) {\n            return $errors[$type];\n        }\n\n        // all errors\n        $return = [];\n\n        // loop errors\n        foreach ($errors as $key => $error) {\n            $return[] = ['type' => $key, 'message' => $error];\n        }\n\n        return $return;\n    }\n\n    /**\n     * Get a field.\n     *\n     * @param int $id Id of a field.\n     *\n     * @return array\n     */\n    public static function getField(int $id): array\n    {\n        $field = (array) BackendModel::getContainer()->get('database')->getRecord(\n            'SELECT ff.id, ff.form_id, ff.type, ff.settings\n             FROM forms_fields AS ff\n             WHERE ff.id = ?',\n            $id\n        );\n\n        // unserialize settings\n        if ($field['settings'] !== null) {\n            $field['settings'] = unserialize($field['settings'], ['allowed_classes' => false]);\n        }\n\n        // get validation\n        $field['validations'] = (array) BackendModel::getContainer()->get('database')->getRecords(\n            'SELECT ffv.type, ffv.parameter, ffv.error_message\n             FROM forms_fields_validation AS ffv\n             WHERE ffv.field_id = ?',\n            $field['id'],\n            'type'\n        );\n\n        return $field;\n    }\n\n    /**\n     * Get all fields of a form.\n     *\n     * @param int $id Id of a form.\n     *\n     * @return array\n     */\n    public static function getFields(int $id): array\n    {\n        $fields = (array) BackendModel::getContainer()->get('database')->getRecords(\n            'SELECT ff.id, ff.type, ff.settings\n             FROM forms_fields AS ff\n             WHERE ff.form_id = ?\n             ORDER BY ff.sequence ASC',\n            $id\n        );\n\n        foreach ($fields as &$field) {\n            // unserialize\n            if ($field['settings'] !== null) {\n                $field['settings'] = unserialize($field['settings'], ['allowed_classes' => false]);\n            }\n\n            // get validation\n            $field['validations'] = (array) BackendModel::getContainer()->get('database')->getRecords(\n                'SELECT ffv.type, ffv.parameter, ffv.error_message\n                 FROM forms_fields_validation AS ffv\n                 WHERE ffv.field_id = ?',\n                $field['id'],\n                'type'\n            );\n        }\n\n        return $fields;\n    }\n\n    /**\n     * Get a label/action/message from locale.\n     * Used as datagridfunction.\n     *\n     * @param string $name Name of the locale item.\n     * @param string $type Type of locale item.\n     * @param string $application Name of the application.\n     *\n     * @return string\n     */\n    public static function getLocale(string $name, string $type = 'label', string $application = 'Backend'): string\n    {\n        $name = \\SpoonFilter::toCamelCase($name);\n        $class = \\SpoonFilter::ucfirst($application) . '\\Core\\Language\\Language';\n        $function = 'get' . \\SpoonFilter::ucfirst($type);\n\n        // execute and return value\n        return \\SpoonFilter::ucfirst(call_user_func_array([$class, $function], [$name]));\n    }\n\n    /**\n     * Get the maximum sequence for fields in a form.\n     *\n     * @param int $formId Id of the form.\n     *\n     * @return int\n     */\n    public static function getMaximumSequence(int $formId): int\n    {\n        return (int) BackendModel::getContainer()->get('database')->getVar(\n            'SELECT MAX(ff.sequence)\n             FROM forms_fields AS ff\n             WHERE ff.form_id = ?',\n            $formId\n        );\n    }\n\n    /**\n     * Add a new item.\n     *\n     * @param array $values The data to insert.\n     *\n     * @return int\n     */\n    public static function insert(array $values): int\n    {\n        // define form id\n        $formId = BackendModel::getContainer()->get('database')->insert('forms', $values);\n\n        // insert extra\n        BackendModel::insertExtra(\n            ModuleExtraType::widget(),\n            'FormBuilder',\n            'Form',\n            'FormBuilder',\n            [\n                'id' => $formId,\n                'extra_label' => $values['name'],\n                'language' => $values['language'],\n                'edit_url' => BackendModel::createUrlForAction('Edit') . '&id=' . $formId,\n            ],\n            false,\n            '400' . $formId\n        );\n\n        return $formId;\n    }\n\n    /**\n     * Add a new field.\n     *\n     * @param array $values The data to insert.\n     *\n     * @return int\n     */\n    public static function insertField(array $values): int\n    {\n        return BackendModel::getContainer()->get('database')->insert('forms_fields', $values);\n    }\n\n    /**\n     * Add validation for a field.\n     *\n     * @param array $values The data to insert.\n     *\n     * @return int\n     */\n    public static function insertFieldValidation(array $values): int\n    {\n        return BackendModel::getContainer()->get('database')->insert('forms_fields_validation', $values);\n    }\n\n    /**\n     * Update an existing item.\n     *\n     * @param int $id The id for the item to update.\n     * @param array $values The new data.\n     *\n     * @return int\n     */\n    public static function update(int $id, array $values): int\n    {\n        $database = BackendModel::getContainer()->get('database');\n\n        // update item\n        $database->update('forms', $values, 'id = ?', $id);\n\n        // build array\n        $extra = [\n            'data' => serialize(\n                [\n                    'language' => BL::getWorkingLanguage(),\n                    'extra_label' => $values['name'],\n                    'id' => $id,\n                    'edit_url' => BackendModel::createUrlForAction('Edit') . '&id=' . $id,\n                ]\n            ),\n        ];\n\n        // update extra\n        $database->update(\n            'modules_extras',\n            $extra,\n            'module = ? AND type = ? AND sequence = ?',\n            ['FormBuilder', 'widget', '400' . $id]\n        );\n\n        return $id;\n    }\n\n    /**\n     * Update a field.\n     *\n     * @param int $id The id for the item to update.\n     * @param array $values The new data.\n     *\n     * @return int\n     */\n    public static function updateField(int $id, array $values): int\n    {\n        BackendModel::getContainer()->get('database')->update('forms_fields', $values, 'id = ?', $id);\n\n        return $id;\n    }\n\n    /**\n     * Get templates.\n     *\n     * @return array\n     */\n    public static function getTemplates(): array\n    {\n        $templates = [];\n        $finder = new Finder();\n        $finder->name('*.html.twig');\n        $finder->in(FRONTEND_MODULES_PATH . '/FormBuilder/Layout/Templates/Mails');\n\n        // if there is a custom theme we should include the templates there also\n        $theme = BackendModel::get('fork.settings')->get('Core', 'theme', 'Fork');\n        if ($theme !== 'core') {\n            $path = FRONTEND_PATH . '/Themes/' . $theme . '/Modules/FormBuilder/Layout/Templates/Mails';\n            if (is_dir($path)) {\n                $finder->in($path);\n            }\n        }\n\n        foreach ($finder->files() as $file) {\n            $templates[] = $file->getBasename();\n        }\n\n        return array_unique($templates);\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Backend\\Modules\\FormBuilder\\Engine;\n\nuse Backend\\Core\\Language\\Language as BL;\nuse Backend\\Core\\Engine\\Model as BackendModel;\nuse Common\\ModuleExtraType;\nuse Frontend\\Core\\Language\\Language as FL;\nuse Symfony\\Component\\Finder\\Finder;\n\n/**\n * In this file we store all generic functions that we will be using in the form_builder module\n */\nclass Model\n{\n    const QUERY_BROWSE =\n        'SELECT i.id, i.name, i.email, i.method,\n         (SELECT COUNT(fd.form_id) FROM forms_data AS fd WHERE fd.form_id = i.id) AS sent_forms\n         FROM forms AS i\n         WHERE i.language = ?';\n\n    /**\n     * Calculate time ago.\n     *\n     * @param int $timestamp Unix timestamp from the past.\n     *\n     * @return string\n     */\n    public static function calculateTimeAgo(int $timestamp): string\n    {\n        $secondsBetween = time() - $timestamp;\n\n        // calculate\n        $hours = floor($secondsBetween / (60 * 60));\n        $minutes = floor($secondsBetween / 60);\n        $seconds = floor($secondsBetween);\n\n        // today start\n        $todayStart = (int) strtotime(date('d F Y'));\n\n        // today\n        if ($timestamp >= $todayStart) {\n            // today\n            if ($hours >= 1) {\n                return BL::getLabel('Today') . ' ' . date('H:i', $timestamp);\n            }\n\n            if ($minutes > 1) {\n                // more than one minute\n                return sprintf(BL::getLabel('MinutesAgo'), $minutes);\n            }\n\n            if ($minutes == 1) {\n                // one minute\n                return BL::getLabel('OneMinuteAgo');\n            }\n\n            if ($seconds > 1) {\n                // more than one second\n                return sprintf(BL::getLabel('SecondsAgo'), $seconds);\n            }\n\n            return BL::getLabel('OneSecondAgo');\n        }\n\n        if ($timestamp < $todayStart && $timestamp >= ($todayStart - 86400)) {\n            // yesterday\n            return BL::getLabel('Yesterday') . ' ' . date('H:i', $timestamp);\n        }\n\n        // older\n        return date('d/m/Y H:i', $timestamp);\n    }\n\n    /**\n     * Create an unique identifier.\n     *\n     * @return string\n     */\n    public static function createIdentifier(): string\n    {\n        // get last id\n        $id = (int) BackendModel::getContainer()->get('database')->getVar(\n            'SELECT i.id FROM forms AS i ORDER BY i.id DESC LIMIT 1'\n        );\n\n        // create identifier\n        do {\n            ++$id;\n            $identifier = 'form' . $id;\n        } while (self::identifierExist($identifier));\n\n        return $identifier;\n    }\n\n    /**\n     * @param string $identifier\n     *\n     * @return bool\n     */\n    private static function identifierExist(string $identifier): bool\n    {\n        return (int) BackendModel::getContainer()->get('database')\n                ->getVar(\n                    'SELECT 1\n                 FROM forms AS i\n                 WHERE i.identifier = ?\n                 LIMIT 1',\n                    $identifier\n                ) > 0;\n    }\n\n    /**\n     * Delete an item.\n     *\n     * @param int $id The id of the record to delete.\n     */\n    public static function delete(int $id): void\n    {\n        $database = BackendModel::getContainer()->get('database');\n\n        // get field ids\n        $fieldIds = (array) $database->getColumn('SELECT i.id FROM forms_fields AS i WHERE i.form_id = ?', $id);\n\n        // we have items to be deleted\n        if (!empty($fieldIds)) {\n            // delete all fields\n            $database->delete('forms_fields', 'form_id = ?', $id);\n            $database->delete('forms_fields_validation', 'field_id IN(' . implode(',', $fieldIds) . ')');\n        }\n\n        // get data ids\n        $dataIds = (array) $database->getColumn('SELECT i.id FROM forms_data AS i WHERE i.form_id = ?', $id);\n\n        // we have items to be deleted\n        if (!empty($dataIds)) {\n            self::deleteData($dataIds);\n        }\n\n        // delete extra\n        BackendModel::deleteExtra('FormBuilder', 'widget', ['id' => $id]);\n\n        // delete form\n        $database->delete('forms', 'id = ?', $id);\n    }\n\n    /**\n     * Deletes one or more data items.\n     *\n     * @param array $ids Ids of data items.\n     */\n    public static function deleteData(array $ids): void\n    {\n        $database = BackendModel::getContainer()->get('database');\n        $ids = array_map('intval', $ids);\n\n        $database->delete('forms_data', 'id IN(' . implode(',', $ids) . ')');\n        $database->delete('forms_data_fields', 'data_id IN(' . implode(',', $ids) . ')');\n    }\n\n    /**\n     * Delete a field.\n     *\n     * @param int $id Id of a field.\n     */\n    public static function deleteField(int $id): void\n    {\n        // delete linked validation\n        self::deleteFieldValidation($id);\n\n        // delete field\n        BackendModel::getContainer()->get('database')->delete('forms_fields', 'id = ?', $id);\n    }\n\n    /**\n     * Delete all validation of a field.\n     *\n     * @param int $id Id of a field.\n     */\n    public static function deleteFieldValidation(int $id): void\n    {\n        BackendModel::getContainer()->get('database')->delete('forms_fields_validation', 'field_id = ?', $id);\n    }\n\n    /**\n     * Does the item exist.\n     *\n     * @param int $id Id of a form.\n     *\n     * @return bool\n     */\n    public static function exists(int $id): bool\n    {\n        return (bool) BackendModel::getContainer()->get('database')->getVar(\n            'SELECT 1\n             FROM forms AS f\n             WHERE f.id = ?\n             LIMIT 1',\n            $id\n        );\n    }\n\n    /**\n     * Does the data item exist.\n     *\n     * @param int $id Id of the data item.\n     *\n     * @return bool\n     */\n    public static function existsData(int $id): bool\n    {\n        return (bool) BackendModel::getContainer()->get('database')->getVar(\n            'SELECT 1\n             FROM forms_data AS fd\n             WHERE fd.id = ?\n             LIMIT 1',\n            $id\n        );\n    }\n\n    /**\n     * Does a field exist (within a form).\n     *\n     * @param int $id Id of a field.\n     * @param int $formId Id of a form.\n     *\n     * @return bool\n     */\n    public static function existsField(int $id, int $formId = null): bool\n    {\n        // exists\n        if ($formId === null) {\n            return (bool) BackendModel::getContainer()->get('database')->getVar(\n                'SELECT 1\n                 FROM forms_fields AS ff\n                 WHERE ff.id = ?\n                 LIMIT 1',\n                $id\n            );\n        }\n\n        // exists and ignore an id\n        return (bool) BackendModel::getContainer()->get('database')->getVar(\n            'SELECT 1\n             FROM forms_fields AS ff\n             WHERE ff.id = ? AND ff.form_id = ?\n             LIMIT 1',\n            [$id, $formId]\n        );\n    }\n\n    /**\n     * Does an identifier exist.\n     *\n     * @param string $identifier Identifier.\n     * @param int $ignoreId Field id to ignore.\n     *\n     * @return bool\n     */\n    public static function existsIdentifier(string $identifier, int $ignoreId = null): bool\n    {\n        // exists\n        if ($ignoreId === null) {\n            return (bool) BackendModel::getContainer()->get('database')->getVar(\n                'SELECT 1\n                 FROM forms AS f\n                 WHERE f.identifier = ?\n                 LIMIT 1',\n                $identifier\n            );\n        }\n\n        // exists and ignore an id\n        return (bool) BackendModel::getContainer()->get('database')->getVar(\n            'SELECT 1\n             FROM forms AS f\n             WHERE f.identifier = ? AND f.id != ?\n             LIMIT 1',\n            [$identifier, $ignoreId]\n        );\n    }\n\n    /**\n     * Formats the recipients based on the serialized string\n     *\n     * @param string $string The serialized string that should be formatted\n     *\n     * @return string\n     */\n    public static function formatRecipients(string $string): string\n    {\n        return implode(\n            ', ',\n            (array) array_map(\n                'htmlspecialchars',\n                @unserialize($string, ['allowed_classes' => false])\n            )\n        );\n    }\n\n    /**\n     * Get all data for a given id.\n     *\n     * @param int $id The id for the record to get.\n     *\n     * @return array\n     */\n    public static function get(int $id): array\n    {\n        $return = (array) BackendModel::getContainer()->get('database')->getRecord(\n            'SELECT f.* FROM forms AS f WHERE f.id = ?',\n            $id\n        );\n\n        // unserialize the emailaddresses\n        if (isset($return['email'])) {\n            $return['email'] = (array) unserialize($return['email'], ['allowed_classes' => false]);\n        }\n\n        return $return;\n    }\n\n    /**\n     * Get data for a given id.\n     *\n     * @param int $id The id for the record to get.\n     *\n     * @return array\n     */\n    public static function getData(int $id): array\n    {\n        // get data\n        $data = (array) BackendModel::getContainer()->get('database')->getRecord(\n            'SELECT fd.id, fd.form_id, UNIX_TIMESTAMP(fd.sent_on) AS sent_on\n             FROM forms_data AS fd\n             WHERE fd.id = ?',\n            $id\n        );\n\n        // get fields\n        $data['fields'] = (array) BackendModel::getContainer()->get('database')->getRecords(\n            'SELECT fdf.label, fdf.value\n             FROM forms_data_fields AS fdf\n             WHERE fdf.data_id = ?\n             ORDER BY fdf.id',\n            (int) $data['id']\n        );\n\n        // unserialize values\n        foreach ($data['fields'] as &$field) {\n            if ($field['value'] !== null) {\n                $field['value'] = unserialize($field['value'], ['allowed_classes' => false]);\n            }\n        }\n\n        return $data;\n    }\n\n    /**\n     * Get errors (optional by type).\n     *\n     * @param string $type Type of error.\n     *\n     * @return mixed\n     */\n    public static function getErrors(string $type = null)\n    {\n        $errors = [];\n        $errors['required'] = FL::getError('FieldIsRequired');\n        $errors['email'] = FL::getError('EmailIsInvalid');\n        $errors['number'] = FL::getError('NumericCharactersOnly');\n        $errors['time'] = FL::getError('TimeIsInvalid');\n\n        // specific type\n        if ($type !== null) {\n            return $errors[$type];\n        }\n\n        // all errors\n        $return = [];\n\n        // loop errors\n        foreach ($errors as $key => $error) {\n            $return[] = ['type' => $key, 'message' => $error];\n        }\n\n        return $return;\n    }\n\n    /**\n     * Get a field.\n     *\n     * @param int $id Id of a field.\n     *\n     * @return array\n     */\n    public static function getField(int $id): array\n    {\n        $field = (array) BackendModel::getContainer()->get('database')->getRecord(\n            'SELECT ff.id, ff.form_id, ff.type, ff.settings\n             FROM forms_fields AS ff\n             WHERE ff.id = ?',\n            $id\n        );\n\n        // unserialize settings\n        if ($field['settings'] !== null) {\n            $field['settings'] = unserialize($field['settings'], ['allowed_classes' => false]);\n        }\n\n        // get validation\n        $field['validations'] = (array) BackendModel::getContainer()->get('database')->getRecords(\n            'SELECT ffv.type, ffv.parameter, ffv.error_message\n             FROM forms_fields_validation AS ffv\n             WHERE ffv.field_id = ?',\n            $field['id'],\n            'type'\n        );\n\n        return $field;\n    }\n\n    /**\n     * Get all fields of a form.\n     *\n     * @param int $id Id of a form.\n     *\n     * @return array\n     */\n    public static function getFields(int $id): array\n    {\n        $fields = (array) BackendModel::getContainer()->get('database')->getRecords(\n            'SELECT ff.id, ff.type, ff.settings\n             FROM forms_fields AS ff\n             WHERE ff.form_id = ?\n             ORDER BY ff.sequence ASC',\n            $id\n        );\n\n        foreach ($fields as &$field) {\n            // unserialize\n            if ($field['settings'] !== null) {\n                $field['settings'] = unserialize($field['settings'], ['allowed_classes' => false]);\n            }\n\n            // get validation\n            $field['validations'] = (array) BackendModel::getContainer()->get('database')->getRecords(\n                'SELECT ffv.type, ffv.parameter, ffv.error_message\n                 FROM forms_fields_validation AS ffv\n                 WHERE ffv.field_id = ?',\n                $field['id'],\n                'type'\n            );\n        }\n\n        return $fields;\n    }\n\n    /**\n     * Get a label/action/message from locale.\n     * Used as datagridfunction.\n     *\n     * @param string $name Name of the locale item.\n     * @param string $type Type of locale item.\n     * @param string $application Name of the application.\n     *\n     * @return string\n     */\n    public static function getLocale(string $name, string $type = 'label', string $application = 'Backend'): string\n    {\n        $name = \\SpoonFilter::toCamelCase($name);\n        $class = \\SpoonFilter::ucfirst($application) . '\\Core\\Language\\Language';\n        $function = 'get' . \\SpoonFilter::ucfirst($type);\n\n        // execute and return value\n        return \\SpoonFilter::ucfirst(call_user_func_array([$class, $function], [$name]));\n    }\n\n    /**\n     * Get the maximum sequence for fields in a form.\n     *\n     * @param int $formId Id of the form.\n     *\n     * @return int\n     */\n    public static function getMaximumSequence(int $formId): int\n    {\n        return (int) BackendModel::getContainer()->get('database')->getVar(\n            'SELECT MAX(ff.sequence)\n             FROM forms_fields AS ff\n             WHERE ff.form_id = ?',\n            $formId\n        );\n    }\n\n    /**\n     * Add a new item.\n     *\n     * @param array $values The data to insert.\n     *\n     * @return int\n     */\n    public static function insert(array $values): int\n    {\n        // define form id\n        $formId = BackendModel::getContainer()->get('database')->insert('forms', $values);\n\n        // insert extra\n        BackendModel::insertExtra(\n            ModuleExtraType::widget(),\n            'FormBuilder',\n            'Form',\n            'FormBuilder',\n            [\n                'id' => $formId,\n                'extra_label' => $values['name'],\n                'language' => $values['language'],\n                'edit_url' => BackendModel::createUrlForAction('Edit') . '&id=' . $formId,\n            ],\n            false,\n            '400' . $formId\n        );\n\n        return $formId;\n    }\n\n    /**\n     * Add a new field.\n     *\n     * @param array $values The data to insert.\n     *\n     * @return int\n     */\n    public static function insertField(array $values): int\n    {\n        return BackendModel::getContainer()->get('database')->insert('forms_fields', $values);\n    }\n\n    /**\n     * Add validation for a field.\n     *\n     * @param array $values The data to insert.\n     *\n     * @return int\n     */\n    public static function insertFieldValidation(array $values): int\n    {\n        return BackendModel::getContainer()->get('database')->insert('forms_fields_validation', $values);\n    }\n\n    /**\n     * Update an existing item.\n     *\n     * @param int $id The id for the item to update.\n     * @param array $values The new data.\n     *\n     * @return int\n     */\n    public static function update(int $id, array $values): int\n    {\n        $database = BackendModel::getContainer()->get('database');\n\n        // update item\n        $database->update('forms', $values, 'id = ?', $id);\n\n        // build array\n        $extra = [\n            'data' => serialize(\n                [\n                    'language' => BL::getWorkingLanguage(),\n                    'extra_label' => $values['name'],\n                    'id' => $id,\n                    'edit_url' => BackendModel::createUrlForAction('Edit') . '&id=' . $id,\n                ]\n            ),\n        ];\n\n        // update extra\n        $database->update(\n            'modules_extras',\n            $extra,\n            'module = ? AND type = ? AND sequence = ?',\n            ['FormBuilder', 'widget', '400' . $id]\n        );\n\n        return $id;\n    }\n\n    /**\n     * Update a field.\n     *\n     * @param int $id The id for the item to update.\n     * @param array $values The new data.\n     *\n     * @return int\n     */\n    public static function updateField(int $id, array $values): int\n    {\n        BackendModel::getContainer()->get('database')->update('forms_fields', $values, 'id = ?', $id);\n\n        return $id;\n    }\n\n    /**\n     * Get templates.\n     *\n     * @return array\n     */\n    public static function getTemplates(): array\n    {\n        $templates = [];\n        $finder = new Finder();\n        $finder->name('*.html.twig');\n        $finder->in(FRONTEND_MODULES_PATH . '/FormBuilder/Layout/Templates/Mails');\n\n        // if there is a custom theme we should include the templates there also\n        $theme = BackendModel::get('fork.settings')->get('Core', 'theme', 'Fork');\n        if ($theme !== 'core') {\n            $path = FRONTEND_PATH . '/Themes/' . $theme . '/Modules/FormBuilder/Layout/Templates/Mails';\n            if (is_dir($path)) {\n                $finder->in($path);\n            }\n        }\n\n        foreach ($finder->files() as $file) {\n            $templates[] = $file->getBasename();\n        }\n\n        return array_unique($templates);\n    }\n}\n"], "filenames": ["src/Backend/Modules/FormBuilder/Engine/Model.php"], "buggy_code_start_loc": [154], "buggy_code_end_loc": [154], "fixing_code_start_loc": [155], "fixing_code_end_loc": [156], "type": "CWE-89", "message": "SQL Injection in GitHub repository forkcms/forkcms prior to 5.11.1.", "other": {"cve": {"id": "CVE-2022-0153", "sourceIdentifier": "security@huntr.dev", "published": "2022-03-24T17:15:07.910", "lastModified": "2022-03-29T15:47:22.107", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SQL Injection in GitHub repository forkcms/forkcms prior to 5.11.1."}, {"lang": "es", "value": "Una Inyecci\u00f3n SQL en el repositorio de GitHub forkcms/forkcms versiones anteriores a 5.11.1"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.6, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.1, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fork-cms:fork_cms:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.11.1", "matchCriteriaId": "38A5F85C-5508-4425-B245-215759FF27B1"}]}]}], "references": [{"url": "https://github.com/forkcms/forkcms/commit/7a12046a67ae5d8cf04face3ee75e55f03a1a608", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/841503dd-311c-470a-a8ec-d4579b3274eb", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/forkcms/forkcms/commit/7a12046a67ae5d8cf04face3ee75e55f03a1a608"}}