{"buggy_code": ["<?php\n/**\n * Copyright (c) Enalean, 2012 - Present. All Rights Reserved.\n * Copyright (c) STMicroelectronics, 2009. All Rights Reserved.\n *\n * Originally written by Manuel VACELET, 2009.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nrequire_once 'LDAP.class.php';\nrequire_once 'LDAP_UserManager.class.php';\nrequire_once 'LDAP_SyncNotificationManager.class.php';\n\nuse Tuleap\\Project\\UserRemover;\nuse Tuleap\\Project\\UserRemoverDao;\n\nclass LDAP_DirectorySynchronization\n{\n    /**\n     * @var LDAP\n     */\n    protected $ldap;\n    protected $ldapTime;\n    protected $sync;\n    protected $lum;\n    protected $um;\n\n    /** @var \\Psr\\Log\\LoggerInterface */\n    private $logger;\n\n    public function __construct(LDAP $ldap, \\Psr\\Log\\LoggerInterface $logger)\n    {\n        $this->ldapTime = 0;\n        $this->ldap     = $ldap;\n        $this->logger   = $logger;\n    }\n\n    public function syncAll()\n    {\n        $sql = 'SELECT u.user_id, user_name, email, ldap_id, status, realname, ldap_uid\n        FROM user u\n         JOIN plugin_ldap_user ldap_user ON (ldap_user.user_id = u.user_id)\n        WHERE status IN (\"A\", \"R\")\n        AND u.user_id > 101\n        AND ldap_id IS NOT NULL\n        AND ldap_id <> \"\"';\n\n        $res = db_query($sql);\n        if ($res && ! db_error()) {\n            $nbr_all_users         = db_numrows($res);\n            $users_are_suspendable = $this->getLdapUserManager()->areUsersSupendable($nbr_all_users);\n            while ($row = db_fetch_array($res)) {\n                $this->ldapSync($row, $users_are_suspendable);\n            }\n            $this->getLdapUserManager()->triggerRenameOfUsers();\n            $this->remindAdminsBeforeCleanUp();\n        } else {\n            echo \"DB error: \" . db_error() . PHP_EOL;\n        }\n    }\n\n    public function ldapSync($row, $users_are_suspendable = true)\n    {\n        $ldap_query = $this->ldap->getLDAPParam('eduid') . '=' . $row['ldap_id'];\n        $userSync   = $this->getLdapUserSync();\n        $attributes = $userSync->getSyncAttributes($this->ldap);\n\n        $time_start = microtime(true);\n        $lri        = false;\n\n        $search_depth = LDAP::SCOPE_SUBTREE;\n        if ($this->ldap->getLDAPParam('search_depth') === LDAP::SCOPE_ONELEVEL_TEXT) {\n            $search_depth = LDAP::SCOPE_ONELEVEL;\n        }\n\n        foreach (explode(';', $this->ldap->getLDAPParam('people_dn') ?? '') as $PeopleDn) {\n            $lri = $this->ldap->search($PeopleDn, $ldap_query, $search_depth, $attributes);\n            if ($lri === false || count($lri) === 1) {\n                break;\n            }\n        }\n        $time_end        = microtime(true);\n        $this->ldapTime += ($time_end - $time_start);\n\n        if ($this->ldap->getErrno() === LDAP::ERR_SUCCESS && $lri) {\n            $user     = new PFUser($row);\n            $modified = false;\n\n            if (count($lri) == 1) {\n                $lr       = $lri->current();\n                $modified = $userSync->sync($user, $lr);\n\n                if ($row['ldap_uid'] != $lr->getLogin()) {\n                    $this->getLdapUserManager()->updateLdapUid($user, $lr->getLogin());\n                }\n            } elseif (count($lri) == 0 && $users_are_suspendable) {\n                $this->logger->warning('LDAP user to be suspended: ' . $user->getId() . ' ' . $user->getUserName());\n\n                $this->logger->debug(\n                    ' *** PEOPLEDN: ' . $PeopleDn .\n                    ' *** LDAP QUERY: ' . $ldap_query .\n                    ' *** ATTRIBUTES: ' . print_r($attributes, true)\n                );\n\n                // User not found in LDAP directory\n                $modified = true;\n                $user->setStatus('S');\n                $user->setUnixStatus('D');\n            }\n\n            if ($modified) {\n                $em = $this->getEventManager();\n                $em->processEvent(LDAP_DAILY_SYNCHRO_UPDATE_USER, $user);\n                if ($user->getStatus() == 'S' && $users_are_suspendable) {\n                    $this->getUserManager()->updateDb($user);\n                    if ($retentionPeriod = $this->ldap->getLDAPParam('daily_sync_retention_period')) {\n                        $projectManager = $this->getProjectManager();\n                        $this->getLdapSyncNotificationManager($projectManager, $retentionPeriod)->processNotification($user);\n                        $this->getCleanUpManager()->addUserDeletionForecastDate($user);\n                    }\n                } elseif ($user->getStatus() != 'S') {\n                    $this->getUserManager()->updateDb($user);\n                }\n            }\n        }\n    }\n\n    /**\n     * Send reminder notification for all projects administrators having users the automatic clean up process will delete\n     *\n     * @return void\n     */\n    public function remindAdminsBeforeCleanUp()\n    {\n        if ($retentionPeriod = $this->ldap->getLDAPParam('daily_sync_retention_period')) {\n            $projectManager = $this->getProjectManager();\n            $userManager    = $this->getUserManager();\n            $this->getLdapSyncReminderNotificationManager($projectManager, $userManager)->processReminders();\n        }\n    }\n\n    /**\n     * Wrapper for LDAP_SyncReminderNotificationManager object\n     *\n     * @return LDAP_SyncReminderNotificationManager\n     */\n    protected function getLdapSyncReminderNotificationManager($projectManager, $userManager)\n    {\n        return new LDAP_SyncReminderNotificationManager($projectManager, $userManager);\n    }\n\n    public function getElapsedLdapTime()\n    {\n        return $this->ldapTime;\n    }\n\n    protected function getUserManager()\n    {\n        return UserManager::instance();\n    }\n\n    public function getLdapUserManager()\n    {\n        if (! isset($this->lum)) {\n            $this->lum = new LDAP_UserManager($this->ldap, LDAP_UserSync::instance(), new \\Tuleap\\User\\UserNameNormalizer(new Rule_UserName(), new Cocur\\Slugify\\Slugify()));\n        }\n        return $this->lum;\n    }\n\n    protected function getLdapUserSync()\n    {\n        return LDAP_UserSync::instance();\n    }\n\n    protected function getLdapSyncNotificationManager(ProjectManager $projectManager, $retentionPeriod)\n    {\n        return new LDAP_SyncNotificationManager($projectManager, $retentionPeriod);\n    }\n\n    protected function getProjectManager()\n    {\n        return ProjectManager::instance();\n    }\n\n    protected function getCleanUpManager()\n    {\n        return new LDAP_CleanUpManager(\n            $this->getUserRemover(),\n            $this->ldap->getLDAPParam('daily_sync_retention_period')\n        );\n    }\n\n    private function getEventManager()\n    {\n        return EventManager::instance();\n    }\n\n    private function getUserRemover()\n    {\n        return new UserRemover(\n            ProjectManager::instance(),\n            EventManager::instance(),\n            new ArtifactTypeFactory(false),\n            new UserRemoverDao(),\n            UserManager::instance(),\n            new ProjectHistoryDao(),\n            new UGroupManager()\n        );\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2018-Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace Tuleap\\DB\\Compat\\Legacy2018;\n\n/**\n * @deprecated See \\Tuleap\\DB\\DBFactory\n */\ninterface LegacyDataAccessInterface\n{\n    /**\n     * Fetches a query resources and stores it in a local member\n     * @param $sql string the database query to run\n     * @deprecated\n     * @return object MySQLDataAccessResultInterface\n     *\n     * @psalm-taint-sink sql $sql\n     * @psalm-taint-sink sql $params\n     */\n    public function query($sql, $params = []);\n\n    /**\n     * Return ID generated from the previous INSERT operation.\n     *\n     * @deprecated\n     *\n     * @return false|int or 0 if the previous query does not generate an AUTO_INCREMENT value, or FALSE if no MySQL connection was established\n     */\n    public function lastInsertId();\n\n    /**\n     * Return number of rows affected by the last INSERT, UPDATE or DELETE.\n     *\n     * @deprecated\n     *\n     * @return int\n     */\n    public function affectedRows();\n\n    /**\n     * Returns any MySQL errors\n     * @deprecated\n     * @return string a MySQL error\n     */\n    public function isError();\n\n    /**\n     * @deprecated\n     */\n    public function getErrorMessage();\n\n    /**\n     * Quote variable to make safe\n     * @see http://php.net/mysql-real-escape-string\n     *\n     * @deprecated\n     *\n     * @return string\n     */\n    public function quoteSmart($value, $params = []);\n\n    /**\n     * Quote schema name to make safe\n     * @see http://php.net/mysql-real-escape-string\n     *\n     * @deprecated\n     *\n     * @return string\n     */\n    public function quoteSmartSchema($value, $params = []);\n\n    /**\n     * Safe implode function to use with SQL queries\n     * @deprecated\n     * @static\n     */\n    public function quoteSmartImplode($glue, $pieces, $params = []);\n\n    /**\n     * cast to int\n     *\n     * @deprecated\n     */\n    public function escapeInt($v, $null = CODENDI_DB_NOT_NULL): string;\n\n    /**\n     * @deprecated\n     */\n    public function escapeFloat($value);\n\n    /**\n     * Escape the ints, and implode them.\n     *\n     * @param array $ints\n     *\n     * @deprecated\n     *\n     * $return string\n     */\n    public function escapeIntImplode(array $ints);\n\n    /**\n     * Escape a value that will be used in a LIKE condition\n     *\n     * WARNING: This must be use only before quoteSmart otherwise you are still at risk of SQL injections\n     *\n     * Example escape chain:\n     * $this->getDa()->quoteSmart($this->getDa()->escapeLikeValue($value));\n     *\n     * @deprecated\n     *\n     * @return string\n     */\n    public function escapeLikeValue($value);\n\n    /**\n     * @deprecated\n     * @return string\n     */\n    public function quoteLikeValueSurround($value);\n\n    /**\n     * @deprecated\n     * @return string\n     */\n    public function quoteLikeValueSuffix($value);\n\n    /**\n     * @deprecated\n     * @return string\n     */\n    public function quoteLikeValuePrefix($value);\n\n    /**\n     * Retrieves the number of rows from a result set.\n     *\n     * @param resource $result The result resource that is being evaluated. This result comes from a call to query().\n     *\n     * @deprecated\n     *\n     * @return int The number of rows in a result set on success, or FALSE on failure.\n     */\n    public function numRows($result);\n\n    /**\n     * Fetch a result row as an associative array\n     *\n     * @param resource $result The result resource that is being evaluated. This result comes from a call to query().\n     *\n     * @deprecated\n     *\n     * @return array Returns an associative array of strings that corresponds to the fetched row, or FALSE if there are no more rows.\n     */\n    public function fetch($result);\n\n    /**\n     * Backward compatibility with database.php\n     *\n     * @deprecated since version 4.0\n     * @param type $result\n     *\n     * @return type\n     */\n    public function fetchArray($result);\n\n    /**\n     * Move internal result pointer\n     *\n     * @param resource $result The result resource that is being evaluated. This result comes from a call to query().\n     * @param int $row_number The desired row number of the new result pointer.\n     *\n     * @deprecated\n     *\n     * @return bool Returns TRUE on success or FALSE on failure.\n     */\n    public function dataSeek($result, $row_number);\n\n    /**\n     * Start a sql transaction\n     * @deprecated\n     */\n    public function startTransaction();\n\n    /**\n     * Rollback a sql transaction\n     * @deprecated\n     */\n    public function rollback();\n\n    /**\n     * Commit a sql transaction\n     * @deprecated\n     */\n    public function commit();\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright (c) Enalean, 2012 - Present. All Rights Reserved.\n * Copyright (c) STMicroelectronics, 2009. All Rights Reserved.\n *\n * Originally written by Manuel VACELET, 2009.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nrequire_once 'LDAP.class.php';\nrequire_once 'LDAP_UserManager.class.php';\nrequire_once 'LDAP_SyncNotificationManager.class.php';\n\nuse Tuleap\\Project\\UserRemover;\nuse Tuleap\\Project\\UserRemoverDao;\n\nclass LDAP_DirectorySynchronization\n{\n    /**\n     * @var LDAP\n     */\n    protected $ldap;\n    protected $ldapTime;\n    protected $sync;\n    protected $lum;\n    protected $um;\n\n    /** @var \\Psr\\Log\\LoggerInterface */\n    private $logger;\n\n    public function __construct(LDAP $ldap, \\Psr\\Log\\LoggerInterface $logger)\n    {\n        $this->ldapTime = 0;\n        $this->ldap     = $ldap;\n        $this->logger   = $logger;\n    }\n\n    public function syncAll()\n    {\n        $sql = 'SELECT u.user_id, user_name, email, ldap_id, status, realname, ldap_uid\n        FROM user u\n         JOIN plugin_ldap_user ldap_user ON (ldap_user.user_id = u.user_id)\n        WHERE status IN (\"A\", \"R\")\n        AND u.user_id > 101\n        AND ldap_id IS NOT NULL\n        AND ldap_id <> \"\"';\n\n        $res = db_query($sql);\n        if ($res && ! db_error()) {\n            $nbr_all_users         = db_numrows($res);\n            $users_are_suspendable = $this->getLdapUserManager()->areUsersSupendable($nbr_all_users);\n            while ($row = db_fetch_array($res)) {\n                $this->ldapSync($row, $users_are_suspendable);\n            }\n            $this->getLdapUserManager()->triggerRenameOfUsers();\n            $this->remindAdminsBeforeCleanUp();\n        } else {\n            echo \"DB error: \" . db_error() . PHP_EOL;\n        }\n    }\n\n    public function ldapSync($row, $users_are_suspendable = true)\n    {\n        $ldap_query = $this->ldap->getLDAPParam('eduid') . '=' . ldap_escape($row['ldap_id'], '', LDAP_ESCAPE_FILTER);\n        $userSync   = $this->getLdapUserSync();\n        $attributes = $userSync->getSyncAttributes($this->ldap);\n\n        $time_start = microtime(true);\n        $lri        = false;\n\n        $search_depth = LDAP::SCOPE_SUBTREE;\n        if ($this->ldap->getLDAPParam('search_depth') === LDAP::SCOPE_ONELEVEL_TEXT) {\n            $search_depth = LDAP::SCOPE_ONELEVEL;\n        }\n\n        foreach (explode(';', $this->ldap->getLDAPParam('people_dn') ?? '') as $PeopleDn) {\n            $lri = $this->ldap->search($PeopleDn, $ldap_query, $search_depth, $attributes);\n            if ($lri === false || count($lri) === 1) {\n                break;\n            }\n        }\n        $time_end        = microtime(true);\n        $this->ldapTime += ($time_end - $time_start);\n\n        if ($this->ldap->getErrno() === LDAP::ERR_SUCCESS && $lri) {\n            $user     = new PFUser($row);\n            $modified = false;\n\n            if (count($lri) == 1) {\n                $lr       = $lri->current();\n                $modified = $userSync->sync($user, $lr);\n\n                if ($row['ldap_uid'] != $lr->getLogin()) {\n                    $this->getLdapUserManager()->updateLdapUid($user, $lr->getLogin());\n                }\n            } elseif (count($lri) == 0 && $users_are_suspendable) {\n                $this->logger->warning('LDAP user to be suspended: ' . $user->getId() . ' ' . $user->getUserName());\n\n                $this->logger->debug(\n                    ' *** PEOPLEDN: ' . $PeopleDn .\n                    ' *** LDAP QUERY: ' . $ldap_query .\n                    ' *** ATTRIBUTES: ' . print_r($attributes, true)\n                );\n\n                // User not found in LDAP directory\n                $modified = true;\n                $user->setStatus('S');\n                $user->setUnixStatus('D');\n            }\n\n            if ($modified) {\n                $em = $this->getEventManager();\n                $em->processEvent(LDAP_DAILY_SYNCHRO_UPDATE_USER, $user);\n                if ($user->getStatus() == 'S' && $users_are_suspendable) {\n                    $this->getUserManager()->updateDb($user);\n                    if ($retentionPeriod = $this->ldap->getLDAPParam('daily_sync_retention_period')) {\n                        $projectManager = $this->getProjectManager();\n                        $this->getLdapSyncNotificationManager($projectManager, $retentionPeriod)->processNotification($user);\n                        $this->getCleanUpManager()->addUserDeletionForecastDate($user);\n                    }\n                } elseif ($user->getStatus() != 'S') {\n                    $this->getUserManager()->updateDb($user);\n                }\n            }\n        }\n    }\n\n    /**\n     * Send reminder notification for all projects administrators having users the automatic clean up process will delete\n     *\n     * @return void\n     */\n    public function remindAdminsBeforeCleanUp()\n    {\n        if ($retentionPeriod = $this->ldap->getLDAPParam('daily_sync_retention_period')) {\n            $projectManager = $this->getProjectManager();\n            $userManager    = $this->getUserManager();\n            $this->getLdapSyncReminderNotificationManager($projectManager, $userManager)->processReminders();\n        }\n    }\n\n    /**\n     * Wrapper for LDAP_SyncReminderNotificationManager object\n     *\n     * @return LDAP_SyncReminderNotificationManager\n     */\n    protected function getLdapSyncReminderNotificationManager($projectManager, $userManager)\n    {\n        return new LDAP_SyncReminderNotificationManager($projectManager, $userManager);\n    }\n\n    public function getElapsedLdapTime()\n    {\n        return $this->ldapTime;\n    }\n\n    protected function getUserManager()\n    {\n        return UserManager::instance();\n    }\n\n    public function getLdapUserManager()\n    {\n        if (! isset($this->lum)) {\n            $this->lum = new LDAP_UserManager($this->ldap, LDAP_UserSync::instance(), new \\Tuleap\\User\\UserNameNormalizer(new Rule_UserName(), new Cocur\\Slugify\\Slugify()));\n        }\n        return $this->lum;\n    }\n\n    protected function getLdapUserSync()\n    {\n        return LDAP_UserSync::instance();\n    }\n\n    protected function getLdapSyncNotificationManager(ProjectManager $projectManager, $retentionPeriod)\n    {\n        return new LDAP_SyncNotificationManager($projectManager, $retentionPeriod);\n    }\n\n    protected function getProjectManager()\n    {\n        return ProjectManager::instance();\n    }\n\n    protected function getCleanUpManager()\n    {\n        return new LDAP_CleanUpManager(\n            $this->getUserRemover(),\n            $this->ldap->getLDAPParam('daily_sync_retention_period')\n        );\n    }\n\n    private function getEventManager()\n    {\n        return EventManager::instance();\n    }\n\n    private function getUserRemover()\n    {\n        return new UserRemover(\n            ProjectManager::instance(),\n            EventManager::instance(),\n            new ArtifactTypeFactory(false),\n            new UserRemoverDao(),\n            UserManager::instance(),\n            new ProjectHistoryDao(),\n            new UGroupManager()\n        );\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2018-Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace Tuleap\\DB\\Compat\\Legacy2018;\n\n/**\n * @deprecated See \\Tuleap\\DB\\DBFactory\n */\ninterface LegacyDataAccessInterface\n{\n    /**\n     * Fetches a query resources and stores it in a local member\n     * @param $sql string the database query to run\n     * @deprecated\n     * @return object MySQLDataAccessResultInterface\n     *\n     * @psalm-taint-sink sql $sql\n     * @psalm-taint-sink sql $params\n     */\n    public function query($sql, $params = []);\n\n    /**\n     * Return ID generated from the previous INSERT operation.\n     *\n     * @deprecated\n     *\n     * @return false|int or 0 if the previous query does not generate an AUTO_INCREMENT value, or FALSE if no MySQL connection was established\n     */\n    public function lastInsertId();\n\n    /**\n     * Return number of rows affected by the last INSERT, UPDATE or DELETE.\n     *\n     * @deprecated\n     *\n     * @return int\n     */\n    public function affectedRows();\n\n    /**\n     * Returns any MySQL errors\n     * @deprecated\n     * @return string a MySQL error\n     */\n    public function isError();\n\n    /**\n     * @deprecated\n     */\n    public function getErrorMessage();\n\n    /**\n     * Quote variable to make safe\n     * @see http://php.net/mysql-real-escape-string\n     *\n     * @deprecated\n     *\n     * @return string\n     */\n    public function quoteSmart($value, $params = []);\n\n    /**\n     * Quote schema name to make safe\n     * @see http://php.net/mysql-real-escape-string\n     *\n     * @deprecated\n     *\n     * @return string\n     */\n    public function quoteSmartSchema($value, $params = []);\n\n    /**\n     * Safe implode function to use with SQL queries\n     * @deprecated\n     * @static\n     */\n    public function quoteSmartImplode($glue, $pieces, $params = []);\n\n    /**\n     * cast to int\n     *\n     * @deprecated\n     */\n    public function escapeInt($v, $null = CODENDI_DB_NOT_NULL): string;\n\n    /**\n     * @deprecated\n     */\n    public function escapeFloat($value);\n\n    /**\n     * Escape the ints, and implode them.\n     *\n     * @param array $ints\n     *\n     * @deprecated\n     *\n     * $return string\n     */\n    public function escapeIntImplode(array $ints);\n\n    /**\n     * Escape a value that will be used in a LIKE condition\n     *\n     * WARNING: This must be use only before quoteSmart otherwise you are still at risk of SQL injections\n     *\n     * Example escape chain:\n     * $this->getDa()->quoteSmart($this->getDa()->escapeLikeValue($value));\n     *\n     * @deprecated\n     *\n     * @return string\n     */\n    public function escapeLikeValue($value);\n\n    /**\n     * @deprecated\n     * @return string\n     */\n    public function quoteLikeValueSurround($value);\n\n    /**\n     * @deprecated\n     * @return string\n     */\n    public function quoteLikeValueSuffix($value);\n\n    /**\n     * @deprecated\n     * @return string\n     */\n    public function quoteLikeValuePrefix($value);\n\n    /**\n     * Retrieves the number of rows from a result set.\n     *\n     * @param resource $result The result resource that is being evaluated. This result comes from a call to query().\n     *\n     * @deprecated\n     *\n     * @return int The number of rows in a result set on success, or FALSE on failure.\n     */\n    public function numRows($result);\n\n    /**\n     * Fetch a result row as an associative array\n     *\n     * @param resource $result The result resource that is being evaluated. This result comes from a call to query().\n     *\n     * @deprecated\n     *\n     * @return array Returns an associative array of strings that corresponds to the fetched row, or FALSE if there are no more rows.\n     */\n    public function fetch($result);\n\n    /**\n     * Backward compatibility with database.php\n     *\n     * @deprecated since version 4.0\n     * @param type $result\n     *\n     * @return type\n     * @psalm-taint-source ldap\n     */\n    public function fetchArray($result);\n\n    /**\n     * Move internal result pointer\n     *\n     * @param resource $result The result resource that is being evaluated. This result comes from a call to query().\n     * @param int $row_number The desired row number of the new result pointer.\n     *\n     * @deprecated\n     *\n     * @return bool Returns TRUE on success or FALSE on failure.\n     */\n    public function dataSeek($result, $row_number);\n\n    /**\n     * Start a sql transaction\n     * @deprecated\n     */\n    public function startTransaction();\n\n    /**\n     * Rollback a sql transaction\n     * @deprecated\n     */\n    public function rollback();\n\n    /**\n     * Commit a sql transaction\n     * @deprecated\n     */\n    public function commit();\n}\n"], "filenames": ["plugins/ldap/include/LDAP_DirectorySynchronization.class.php", "src/common/DB/Compat/Legacy2018/LegacyDataAccessInterface.php"], "buggy_code_start_loc": [79, 179], "buggy_code_end_loc": [80, 179], "fixing_code_start_loc": [79, 180], "fixing_code_end_loc": [80, 181], "type": "CWE-74", "message": "Tuleap is a Libre and Open Source tool for end to end traceability of application and system developments. In affected versions Tuleap does not sanitize properly the search filter built from the ldap_id attribute of a user during the daily synchronization. A malicious user could force accounts to be suspended or take over another account by forcing the update of the ldap_uid attribute. Note that the malicious user either need to have site administrator capability on the Tuleap instance or be an LDAP operator with the capability to create/modify account. The Tuleap instance needs to have the LDAP plugin activated and enabled for this issue to be exploitable. This issue has been patched in Tuleap Community Edition 13.2.99.31, Tuleap Enterprise Edition 13.1-5, and Tuleap Enterprise Edition 13.2-3.", "other": {"cve": {"id": "CVE-2021-41276", "sourceIdentifier": "security-advisories@github.com", "published": "2021-12-15T20:15:08.423", "lastModified": "2022-08-09T13:23:00.167", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Tuleap is a Libre and Open Source tool for end to end traceability of application and system developments. In affected versions Tuleap does not sanitize properly the search filter built from the ldap_id attribute of a user during the daily synchronization. A malicious user could force accounts to be suspended or take over another account by forcing the update of the ldap_uid attribute. Note that the malicious user either need to have site administrator capability on the Tuleap instance or be an LDAP operator with the capability to create/modify account. The Tuleap instance needs to have the LDAP plugin activated and enabled for this issue to be exploitable. This issue has been patched in Tuleap Community Edition 13.2.99.31, Tuleap Enterprise Edition 13.1-5, and Tuleap Enterprise Edition 13.2-3."}, {"lang": "es", "value": "Tuleap es una herramienta libre y de c\u00f3digo abierto para la trazabilidad de extremo a extremo de los desarrollos de aplicaciones y sistemas. En las versiones afectadas Tuleap no sanea correctamente el filtro de b\u00fasqueda construido a partir del atributo ldap_id de un usuario durante la sincronizaci\u00f3n diaria. Un usuario malicioso podr\u00eda forzar la suspensi\u00f3n de cuentas o tomar el control de otra cuenta al forzar la actualizaci\u00f3n del atributo ldap_uid. Tenga en cuenta que el usuario malicioso debe tener capacidad de administrador del sitio en la instancia de Tuleap o ser un operador LDAP con capacidad para crear/modificar cuentas. La instancia de Tuleap necesita tener el plugin LDAP activado y habilitado para que este problema sea explotable. Este problema ha sido parcheado en Tuleap Community Edition versi\u00f3n 13.2.99.31, Tuleap Enterprise Edition versi\u00f3n 13.1-5, y Tuleap Enterprise Edition versi\u00f3n 13.2-3"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 6.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 5.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-90"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:community:*:*:*", "versionEndExcluding": "13.2.99.31", "matchCriteriaId": "3FD78921-2244-4540-9903-2DACB4EF1452"}, {"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:enterprise:*:*:*", "versionStartIncluding": "13.1-1", "versionEndExcluding": "13.1-5", "matchCriteriaId": "0DB8CEB4-390C-4031-8ED5-1B74416D6E77"}, {"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:enterprise:*:*:*", "versionStartIncluding": "13.2-1", "versionEndExcluding": "13.2-3", "matchCriteriaId": "43D14ED7-492F-44D1-A69D-D4CACA4869CF"}]}]}], "references": [{"url": "https://github.com/Enalean/tuleap/commit/bd47f29847fcd6a68d359bc8aefb8749bb8a1b7c", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Enalean/tuleap/security/advisories/GHSA-887w-pv2r-x8pm", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://tuleap.net/plugins/git/tuleap/tuleap/stable?a=commit&h=bd47f29847fcd6a68d359bc8aefb8749bb8a1b7c", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://tuleap.net/plugins/tracker/?aid=24149", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/Enalean/tuleap/commit/bd47f29847fcd6a68d359bc8aefb8749bb8a1b7c"}}