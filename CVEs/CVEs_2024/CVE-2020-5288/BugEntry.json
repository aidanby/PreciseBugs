{"buggy_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin;\n\nuse Product;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n/**\n * Admin controller for the attribute / attribute group.\n */\nclass AttributeController extends FrameworkBundleAdminController\n{\n    /**\n     * get All Attributes as json.\n     *\n     * @return string\n     */\n    public function getAllAttributesAction()\n    {\n        $response = new JsonResponse();\n        $locales = $this->get('prestashop.adapter.legacy.context')->getLanguages();\n        $attributes = $this->get('prestashop.adapter.data_provider.attribute')->getAttributes($locales[0]['id_lang'], true);\n\n        $dataGroupAttributes = [];\n        $data = [];\n        foreach ($attributes as $attribute) {\n            /* Construct attribute group selector. Ex : Color : All */\n            $dataGroupAttributes[$attribute['id_attribute_group']] = [\n                'value' => 'group-' . $attribute['id_attribute_group'],\n                'label' => $attribute['public_name'] . ' : ' . $this->trans('All', 'Admin.Global'),\n                'data' => [\n                    'id_group' => $attribute['id_attribute_group'],\n                    'name' => $attribute['public_name'],\n                ],\n            ];\n\n            $data[] = [\n                'value' => $attribute['id_attribute'],\n                'label' => $attribute['public_name'] . ' : ' . $attribute['name'],\n                'data' => [\n                    'id_group' => $attribute['id_attribute_group'],\n                    'name' => $attribute['name'],\n                ],\n            ];\n        }\n\n        $data = array_merge($dataGroupAttributes, $data);\n\n        $response->setData($data);\n\n        return $response;\n    }\n\n    /**\n     * Attributes generator.\n     *\n     * @param Request $request The request\n     *\n     * @return string\n     */\n    public function attributesGeneratorAction(Request $request)\n    {\n        $response = new JsonResponse();\n        $locales = $this->get('prestashop.adapter.legacy.context')->getLanguages();\n        $options = $request->get('options');\n        $idProduct = isset($request->get('form')['id_product']) ? $request->get('form')['id_product'] : null;\n\n        //get product\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $product = $productAdapter->getProduct((int) $idProduct);\n\n        if (!is_object($product) || empty($product->id) || empty($options) || !is_array($options)) {\n            $response->setStatusCode(400);\n\n            return $response;\n        }\n\n        //store exisiting product combinations\n        $existingCombinationsIds = array_map(function ($o) {\n            return $o['id_product_attribute'];\n        }, $product->getAttributeCombinations(1, false));\n\n        //get clean attributes ids\n        $newOptions = [];\n        foreach ($options as $idGroup => $attributes) {\n            foreach ($attributes as $attribute) {\n                //If attribute is a group attribute, replace group data by all attributes group\n                if (false !== strpos($attribute, 'group')) {\n                    $allGroupAttributes = $this->get('prestashop.adapter.data_provider.attribute')->getAttributeIdsByGroup((int) $idGroup, true);\n                    foreach ($allGroupAttributes as $groupAttribute) {\n                        $newOptions[$idGroup][$groupAttribute] = $groupAttribute;\n                    }\n                } else {\n                    $newOptions[$idGroup][$attribute] = $attribute;\n                }\n            }\n        }\n\n        //create attributes\n        $this->get('prestashop.adapter.admin.controller.attribute_generator')->processGenerate($product, $newOptions);\n\n        //get all product combinations\n        $allCombinations = $product->getAttributeCombinations(1, false);\n\n        $allCombinationsIds = array_map(function ($o) {\n            return $o['id_product_attribute'];\n        }, $allCombinations);\n\n        //get new created combinations Ids\n        $newCombinationIds = array_diff($allCombinationsIds, $existingCombinationsIds);\n\n        $attributes = $product->sortCombinationByAttributePosition($newCombinationIds, $locales[0]['id_lang']);\n        $this->ensureProductHasDefaultCombination($product, $attributes);\n\n        $response = new JsonResponse();\n        $combinationDataProvider = $this->get('prestashop.adapter.data_provider.combination');\n        $result = array(\n            'ids_product_attribute' => array(),\n            'form' => '',\n        );\n\n        foreach ($attributes as $attribute) {\n            foreach ($attribute as $combination) {\n                $form = $this->get('form.factory')\n                    ->createNamed(\n                        'combination_' . $combination['id_product_attribute'],\n                        'PrestaShopBundle\\Form\\Admin\\Product\\ProductCombination',\n                        $combinationDataProvider->getFormCombination($combination['id_product_attribute'])\n                    );\n                $result['form'] .= $this->renderView(\n                    '@Product/ProductPage/Forms/form_combination.html.twig',\n                    array(\n                        'form' => $form->createView(),\n                    )\n                );\n                $result['ids_product_attribute'][] = $combination['id_product_attribute'];\n            }\n        }\n\n        return $response->create($result);\n    }\n\n    /**\n     * @param Product $product\n     * @param array $combinations\n     */\n    public function ensureProductHasDefaultCombination(Product $product, array $combinations)\n    {\n        if (count($combinations)) {\n            $defaultProductAttributeId = $product->getDefaultIdProductAttribute();\n            if (!$defaultProductAttributeId) {\n                /*\n                 * Combinations indexed by position, then attribute id\n                 * ex: $combinations = [\n                 *  3 => [ //4th position attribute\n                 *      45 => [ //product_attribute id\n                 *      ]\n                 *  ]\n                 * ]\n                 */\n                $firstPosition = array_keys($combinations)[0];\n                if (!empty($combinations[$firstPosition])) {\n                    $firstAttributeId = array_keys($combinations[$firstPosition])[0];\n                    $product->setDefaultAttribute($firstAttributeId);\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete a product attribute.\n     *\n     * @param int $idProduct The product ID\n     * @param Request $request The request\n     *\n     * @return string\n     */\n    public function deleteAttributeAction($idProduct, Request $request)\n    {\n        $response = new JsonResponse();\n\n        if (!$request->isXmlHttpRequest()) {\n            return $response;\n        }\n\n        $legacyResponse = false;\n\n        if ($request->request->has('attribute-ids')) {\n            $attributeIds = $request->request->get('attribute-ids');\n            foreach ($attributeIds as $attributeId) {\n                $legacyResponse = $this->get('prestashop.adapter.admin.controller.attribute_generator')\n                    ->ajaxProcessDeleteProductAttribute($attributeId, $idProduct);\n            }\n\n            if ($legacyResponse['status'] == 'error') {\n                $response->setStatusCode(400);\n            }\n\n            $response->setData(['message' => $legacyResponse['message']]);\n        }\n\n        return $response;\n    }\n\n    /**\n     * Delete all product attributes.\n     *\n     * @param int $idProduct The product ID\n     * @param Request $request The request\n     *\n     * @return string\n     */\n    public function deleteAllAttributeAction($idProduct, Request $request)\n    {\n        $attributeAdapter = $this->get('prestashop.adapter.data_provider.attribute');\n        $response = new JsonResponse();\n\n        //get all attribute for a product\n        $combinations = $attributeAdapter->getProductCombinations($idProduct);\n\n        if (!$combinations || !$request->isXmlHttpRequest()) {\n            return $response;\n        }\n\n        $res = false;\n\n        foreach ($combinations as $combination) {\n            $res = $this->get('prestashop.adapter.admin.controller.attribute_generator')\n                ->ajaxProcessDeleteProductAttribute($combination['id_product_attribute'], $idProduct);\n\n            if ($res['status'] == 'error') {\n                $response->setStatusCode(400);\n\n                break;\n            }\n        }\n\n        $response->setData(['message' => $res['message']]);\n\n        return $response;\n    }\n\n    /**\n     * get the images form for a product combinations.\n     *\n     * @param int $idProduct The product id\n     * @param Request $request The request\n     *\n     * @return string Json\n     */\n    public function getFormImagesAction($idProduct, Request $request)\n    {\n        $response = new JsonResponse();\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $attributeAdapter = $this->get('prestashop.adapter.data_provider.attribute');\n        $locales = $this->get('prestashop.adapter.legacy.context')->getLanguages();\n\n        //get product\n        $product = $productAdapter->getProduct((int) $idProduct);\n\n        //get product images\n        $productImages = $productAdapter->getImages($idProduct, $locales[0]['id_lang']);\n\n        if (!$request->isXmlHttpRequest() || !is_object($product) || empty($product->id)) {\n            $response->setStatusCode(400);\n\n            return $response;\n        }\n\n        $data = [];\n        $combinations = $attributeAdapter->getProductCombinations($idProduct);\n        foreach ($combinations as $combination) {\n            //get combination images\n            $combinationImages = array_map(function ($o) {\n                return $o['id'];\n            }, $attributeAdapter->getImages($combination['id_product_attribute']));\n\n            $newProductImages = $productImages;\n            foreach ($newProductImages as $k => $image) {\n                $newProductImages[$k]['id_image_attr'] = false;\n                if (in_array($image['id'], $combinationImages)) {\n                    $newProductImages[$k]['id_image_attr'] = true;\n                }\n            }\n\n            $data[$combination['id_product_attribute']] = $newProductImages;\n        }\n\n        $response->setData($data);\n\n        return $response;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\Controller\\Admin;\n\nuse Product;\nuse PrestaShopBundle\\Security\\Annotation\\AdminSecurity;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n/**\n * Admin controller for the attribute / attribute group.\n */\nclass AttributeController extends FrameworkBundleAdminController\n{\n    /**\n     * get All Attributes as json.\n     *\n     * @AdminSecurity(\"is_granted(['read'], 'ADMINPRODUCTS_')\")\n     *\n     * @return JsonResponse\n     */\n    public function getAllAttributesAction()\n    {\n        $response = new JsonResponse();\n        $locales = $this->get('prestashop.adapter.legacy.context')->getLanguages();\n        $attributes = $this->get('prestashop.adapter.data_provider.attribute')->getAttributes($locales[0]['id_lang'], true);\n\n        $dataGroupAttributes = [];\n        $data = [];\n        foreach ($attributes as $attribute) {\n            /* Construct attribute group selector. Ex : Color : All */\n            $dataGroupAttributes[$attribute['id_attribute_group']] = [\n                'value' => 'group-' . $attribute['id_attribute_group'],\n                'label' => $attribute['public_name'] . ' : ' . $this->trans('All', 'Admin.Global'),\n                'data' => [\n                    'id_group' => $attribute['id_attribute_group'],\n                    'name' => $attribute['public_name'],\n                ],\n            ];\n\n            $data[] = [\n                'value' => $attribute['id_attribute'],\n                'label' => $attribute['public_name'] . ' : ' . $attribute['name'],\n                'data' => [\n                    'id_group' => $attribute['id_attribute_group'],\n                    'name' => $attribute['name'],\n                ],\n            ];\n        }\n\n        $data = array_merge($dataGroupAttributes, $data);\n\n        $response->setData($data);\n\n        return $response;\n    }\n\n    /**\n     * Attributes generator.\n     *\n     * @AdminSecurity(\"is_granted(['create', 'update'], 'ADMINPRODUCTS_')\")\n     *\n     * @param Request $request The request\n     *\n     * @return JsonResponse\n     */\n    public function attributesGeneratorAction(Request $request)\n    {\n        $response = new JsonResponse();\n        $locales = $this->get('prestashop.adapter.legacy.context')->getLanguages();\n        $options = $request->get('options');\n        $idProduct = isset($request->get('form')['id_product']) ? $request->get('form')['id_product'] : null;\n\n        //get product\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $product = $productAdapter->getProduct((int) $idProduct);\n\n        if (!is_object($product) || empty($product->id) || empty($options) || !is_array($options)) {\n            $response->setStatusCode(400);\n\n            return $response;\n        }\n\n        //store exisiting product combinations\n        $existingCombinationsIds = array_map(function ($o) {\n            return $o['id_product_attribute'];\n        }, $product->getAttributeCombinations(1, false));\n\n        //get clean attributes ids\n        $newOptions = [];\n        foreach ($options as $idGroup => $attributes) {\n            foreach ($attributes as $attribute) {\n                //If attribute is a group attribute, replace group data by all attributes group\n                if (false !== strpos($attribute, 'group')) {\n                    $allGroupAttributes = $this->get('prestashop.adapter.data_provider.attribute')->getAttributeIdsByGroup((int) $idGroup, true);\n                    foreach ($allGroupAttributes as $groupAttribute) {\n                        $newOptions[$idGroup][$groupAttribute] = $groupAttribute;\n                    }\n                } else {\n                    $newOptions[$idGroup][$attribute] = $attribute;\n                }\n            }\n        }\n\n        //create attributes\n        $this->get('prestashop.adapter.admin.controller.attribute_generator')->processGenerate($product, $newOptions);\n\n        //get all product combinations\n        $allCombinations = $product->getAttributeCombinations(1, false);\n\n        $allCombinationsIds = array_map(function ($o) {\n            return $o['id_product_attribute'];\n        }, $allCombinations);\n\n        //get new created combinations Ids\n        $newCombinationIds = array_diff($allCombinationsIds, $existingCombinationsIds);\n\n        $attributes = $product->sortCombinationByAttributePosition($newCombinationIds, $locales[0]['id_lang']);\n        $this->ensureProductHasDefaultCombination($product, $attributes);\n\n        $response = new JsonResponse();\n        $combinationDataProvider = $this->get('prestashop.adapter.data_provider.combination');\n        $result = array(\n            'ids_product_attribute' => array(),\n            'form' => '',\n        );\n\n        foreach ($attributes as $attribute) {\n            foreach ($attribute as $combination) {\n                $form = $this->get('form.factory')\n                    ->createNamed(\n                        'combination_' . $combination['id_product_attribute'],\n                        'PrestaShopBundle\\Form\\Admin\\Product\\ProductCombination',\n                        $combinationDataProvider->getFormCombination($combination['id_product_attribute'])\n                    );\n                $result['form'] .= $this->renderView(\n                    '@Product/ProductPage/Forms/form_combination.html.twig',\n                    array(\n                        'form' => $form->createView(),\n                    )\n                );\n                $result['ids_product_attribute'][] = $combination['id_product_attribute'];\n            }\n        }\n\n        return $response->create($result);\n    }\n\n    /**\n     * @param Product $product\n     * @param array $combinations\n     */\n    public function ensureProductHasDefaultCombination(Product $product, array $combinations)\n    {\n        if (count($combinations)) {\n            $defaultProductAttributeId = $product->getDefaultIdProductAttribute();\n            if (!$defaultProductAttributeId) {\n                /*\n                 * Combinations indexed by position, then attribute id\n                 * ex: $combinations = [\n                 *  3 => [ //4th position attribute\n                 *      45 => [ //product_attribute id\n                 *      ]\n                 *  ]\n                 * ]\n                 */\n                $firstPosition = array_keys($combinations)[0];\n                if (!empty($combinations[$firstPosition])) {\n                    $firstAttributeId = array_keys($combinations[$firstPosition])[0];\n                    $product->setDefaultAttribute($firstAttributeId);\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete a product attribute.\n     *\n     * @AdminSecurity(\"is_granted(['delete'], 'ADMINPRODUCTS_')\")\n     *\n     * @param int $idProduct The product ID\n     * @param Request $request The request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAttributeAction($idProduct, Request $request)\n    {\n        $response = new JsonResponse();\n\n        if (!$request->isXmlHttpRequest()) {\n            return $response;\n        }\n\n        $legacyResponse = false;\n\n        if ($request->request->has('attribute-ids')) {\n            $attributeIds = $request->request->get('attribute-ids');\n            foreach ($attributeIds as $attributeId) {\n                $legacyResponse = $this->get('prestashop.adapter.admin.controller.attribute_generator')\n                    ->ajaxProcessDeleteProductAttribute($attributeId, $idProduct);\n            }\n\n            if ($legacyResponse['status'] == 'error') {\n                $response->setStatusCode(400);\n            }\n\n            $response->setData(['message' => $legacyResponse['message']]);\n        }\n\n        return $response;\n    }\n\n    /**\n     * Delete all product attributes.\n     *\n     * @AdminSecurity(\"is_granted(['delete'], 'ADMINPRODUCTS_')\")\n     *\n     * @param int $idProduct The product ID\n     * @param Request $request The request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAllAttributeAction($idProduct, Request $request)\n    {\n        $attributeAdapter = $this->get('prestashop.adapter.data_provider.attribute');\n        $response = new JsonResponse();\n\n        //get all attribute for a product\n        $combinations = $attributeAdapter->getProductCombinations($idProduct);\n\n        if (!$combinations || !$request->isXmlHttpRequest()) {\n            return $response;\n        }\n\n        $res = false;\n\n        foreach ($combinations as $combination) {\n            $res = $this->get('prestashop.adapter.admin.controller.attribute_generator')\n                ->ajaxProcessDeleteProductAttribute($combination['id_product_attribute'], $idProduct);\n\n            if ($res['status'] == 'error') {\n                $response->setStatusCode(400);\n\n                break;\n            }\n        }\n\n        $response->setData(['message' => $res['message']]);\n\n        return $response;\n    }\n\n    /**\n     * get the images form for a product combinations.\n     *\n     * @AdminSecurity(\"is_granted(['read'], 'ADMINPRODUCTS_')\")\n     *\n     * @param int $idProduct The product id\n     * @param Request $request The request\n     *\n     * @return JsonResponse\n     */\n    public function getFormImagesAction($idProduct, Request $request)\n    {\n        $response = new JsonResponse();\n        $productAdapter = $this->get('prestashop.adapter.data_provider.product');\n        $attributeAdapter = $this->get('prestashop.adapter.data_provider.attribute');\n        $locales = $this->get('prestashop.adapter.legacy.context')->getLanguages();\n\n        //get product\n        $product = $productAdapter->getProduct((int) $idProduct);\n\n        //get product images\n        $productImages = $productAdapter->getImages($idProduct, $locales[0]['id_lang']);\n\n        if (!$request->isXmlHttpRequest() || !is_object($product) || empty($product->id)) {\n            $response->setStatusCode(400);\n\n            return $response;\n        }\n\n        $data = [];\n        $combinations = $attributeAdapter->getProductCombinations($idProduct);\n        foreach ($combinations as $combination) {\n            //get combination images\n            $combinationImages = array_map(function ($o) {\n                return $o['id'];\n            }, $attributeAdapter->getImages($combination['id_product_attribute']));\n\n            $newProductImages = $productImages;\n            foreach ($newProductImages as $k => $image) {\n                $newProductImages[$k]['id_image_attr'] = false;\n                if (in_array($image['id'], $combinationImages)) {\n                    $newProductImages[$k]['id_image_attr'] = true;\n                }\n            }\n\n            $data[$combination['id_product_attribute']] = $newProductImages;\n        }\n\n        $response->setData($data);\n\n        return $response;\n    }\n}\n"], "filenames": ["src/PrestaShopBundle/Controller/Admin/AttributeController.php"], "buggy_code_start_loc": [29], "buggy_code_end_loc": [275], "fixing_code_start_loc": [30], "fixing_code_end_loc": [286], "type": "CWE-863", "message": "\"In PrestaShop between versions 1.7.0.0 and 1.7.6.5, there is improper access controls on product attributes page. The problem is fixed in 1.7.6.5.", "other": {"cve": {"id": "CVE-2020-5288", "sourceIdentifier": "security-advisories@github.com", "published": "2020-04-20T17:15:16.243", "lastModified": "2020-04-27T17:52:06.833", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "\"In PrestaShop between versions 1.7.0.0 and 1.7.6.5, there is improper access controls on product attributes page. The problem is fixed in 1.7.6.5."}, {"lang": "es", "value": "En PrestaShop entre las versiones 1.7.0.0 y 1.7.6.5, tiene un control de acceso inapropiado en la p\u00e1gina de atributos del producto. El problema se corrigi\u00f3 en la versi\u00f3n 1.7.6.5"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 2.5}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-863"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionStartExcluding": "1.7.0.0", "versionEndExcluding": "1.7.6.5", "matchCriteriaId": "DCC343E4-96E9-4E8D-BC5B-FAF8133EDC71"}]}]}], "references": [{"url": "https://github.com/PrestaShop/PrestaShop/commit/fc1d796dda769efdbc4d9e02ea7a11e4167338d0", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-4wxg-33h3-3w5r", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/PrestaShop/commit/fc1d796dda769efdbc4d9e02ea7a11e4167338d0"}}