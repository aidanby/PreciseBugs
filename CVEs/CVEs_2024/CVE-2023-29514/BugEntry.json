{"buggy_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.administration.test.ui;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Order;\nimport org.junit.jupiter.api.Test;\nimport org.xwiki.administration.test.po.TemplateProviderInlinePage;\nimport org.xwiki.administration.test.po.TemplatesAdministrationSectionPage;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.LocalDocumentReference;\nimport org.xwiki.test.docker.junit5.TestReference;\nimport org.xwiki.test.docker.junit5.UITest;\nimport org.xwiki.test.ui.TestUtils;\nimport org.xwiki.test.ui.po.CreatePagePage;\nimport org.xwiki.test.ui.po.DocumentDoesNotExistPage;\nimport org.xwiki.test.ui.po.PageTypePicker;\nimport org.xwiki.test.ui.po.ViewPage;\nimport org.xwiki.test.ui.po.editor.EditPage;\nimport org.xwiki.test.ui.po.editor.WikiEditPage;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * Tests the page templates feature (create page templates, publish them using template providers and use them to create\n * new pages).\n *\n * @version $Id$\n * @since 12.9RC1\n */\n@UITest\nclass PageTemplatesIT\n{\n    /**\n     * Name of the template.\n     */\n    public static final String TEMPLATE_NAME = \"TestTemplate\";\n\n    @BeforeEach\n    public void setup(TestUtils setup)\n    {\n        setup.loginAsSuperAdmin();\n    }\n\n    /**\n     * Tests if a new page can be created from a template.\n     */\n    @Test\n    @Order(1)\n    void createPagesFromTemplate(TestUtils setup, TestReference testReference) throws Exception\n    {\n        // Step 0: Setup the correct environment for the test\n\n        cleanUp(setup, testReference);\n\n        String templateContent = \"Test Template Content\";\n        LocalDocumentReference templateProviderReference = new LocalDocumentReference(TEMPLATE_NAME + \"Provider\",\n            testReference.getLocalDocumentReference().getParent());\n        String templateProviderFullName = setup.serializeReference(templateProviderReference);\n        String testSpace = setup.serializeReference(templateProviderReference.getParent());\n\n        // Step 1: Create a Template and a Template Provider and try to create a new page by using the Add Menu and\n        // using the created Template\n\n        ViewPage templateProviderView = createTemplateAndTemplateProvider(setup, templateProviderReference,\n            templateContent, \"Test Template Title\", false);\n\n        // Create the new document from template\n        CreatePagePage createPagePage = templateProviderView.createPage();\n        // Save the number of available templates so that we can make some checks later on.\n        int availableTemplateSize = createPagePage.getAvailableTemplateSize();\n        String templateInstanceName = TEMPLATE_NAME + \"Instance\";\n        createPagePage.getDocumentPicker().toggleLocationAdvancedEdit();\n        EditPage templateInstanceEditWysiwyg =\n            createPagePage.createPageFromTemplate(templateInstanceName, testSpace, null, templateProviderFullName);\n        WikiEditPage templateInstanceEdit = templateInstanceEditWysiwyg.clickSaveAndView().editWiki();\n\n        // Verify template instance location and content\n        assertEquals(templateInstanceName, templateInstanceEdit.getTitle());\n        assertEquals(testSpace + \".\" + templateInstanceName, templateInstanceEdit.getMetaDataValue(\"space\"));\n        assertEquals(\"WebHome\", templateInstanceEdit.getMetaDataValue(\"page\"));\n        assertEquals(templateContent, templateInstanceEdit.getContent());\n        // check the parent of the template instance\n        assertEquals(templateProviderFullName, templateInstanceEdit.getParent());\n\n        // Step 2: Create a wanted link and verify that clicking it displays the Template and that we can use it.\n\n        // Put a wanted link in the template instance\n        templateInstanceEdit.setContent(\"[[doc:NewPage]]\");\n        ViewPage vp = templateInstanceEdit.clickSaveAndView();\n\n        // Verify that clicking on the wanted link pops up a box to choose the template.\n        EntityReference wantedLinkReference =\n            setup.resolveDocumentReference(testSpace + \".\" + TEMPLATE_NAME + \"Instance\" + \".NewPage\");\n        vp.clickWantedLink(wantedLinkReference, true);\n        PageTypePicker pageTypePicker = new PageTypePicker();\n        assertEquals(availableTemplateSize, pageTypePicker.countAvailableTemplates());\n        assertTrue(pageTypePicker.getAvailableTemplates().contains(templateProviderFullName));\n\n        // Step 3: Create a new page when located on a non-existing page\n\n        LocalDocumentReference unexistingPageReference =\n            new LocalDocumentReference(TEMPLATE_NAME + \"UnexistingInstance\", templateProviderReference.getParent());\n        setup.gotoPage(unexistingPageReference, \"view\", \"spaceRedirect=false\");\n        vp = new ViewPage();\n        assertFalse(vp.exists());\n        DocumentDoesNotExistPage unexistingPage = new DocumentDoesNotExistPage();\n        unexistingPage.clickEditThisPageToCreate();\n        CreatePagePage createUnexistingPage = new CreatePagePage();\n        // Make sure we're in create mode.\n        assertTrue(setup.isInCreateMode());\n        // count the available templates, make sure they're as many as before and that our template is among them\n        assertEquals(availableTemplateSize, createUnexistingPage.getAvailableTemplateSize());\n        assertTrue(createUnexistingPage.getAvailableTemplates().contains(templateProviderFullName));\n        // select it\n        createUnexistingPage.setTemplate(templateProviderFullName);\n        createUnexistingPage.setTerminalPage(true);\n        // and create\n        createUnexistingPage.clickCreate();\n        EditPage ep = new EditPage();\n        WikiEditPage unexistingPageEdit = ep.clickSaveAndView().editWiki();\n\n        // Verify template instance location and content\n        assertEquals(testSpace, unexistingPageEdit.getMetaDataValue(\"space\"));\n        assertEquals(TEMPLATE_NAME + \"UnexistingInstance\", unexistingPageEdit.getMetaDataValue(\"page\"));\n        assertEquals(TEMPLATE_NAME + \"UnexistingInstance\", unexistingPageEdit.getTitle());\n        assertEquals(templateContent, unexistingPageEdit.getContent());\n        // test that this page has no parent\n        assertEquals(\"Main.WebHome\", unexistingPageEdit.getParent());\n\n        // Step 4: Create an empty new page when there are Templates available\n\n        // Make sure we are on a page that exists so that Add > Page will show the space and page fields\n\n        CreatePagePage createEmptyPage = unexistingPageEdit.clickCancel().createPage();\n        assertTrue(createEmptyPage.getAvailableTemplateSize() > 0);\n        createEmptyPage.getDocumentPicker().toggleLocationAdvancedEdit();\n        EditPage editEmptyPage = createEmptyPage.createPage(testSpace, \"EmptyPage\");\n        ViewPage emptyPage = editEmptyPage.clickSaveAndView();\n        // make sure it's empty\n        assertEquals(\"\", emptyPage.getContent());\n        // make sure parent is the right one\n        assertEquals(\"/\" + testSpace.replace('.', '/') + \"/EmptyPage\", emptyPage.getBreadcrumbContent());\n        // mare sure title is the right one\n        assertEquals(\"EmptyPage\", emptyPage.getDocumentTitle());\n\n        // Step 5: Verify that restricting a Template to a space works\n\n        // Restrict the template to its own space\n        templateProviderView = setup.gotoPage(templateProviderReference);\n        templateProviderView.editInline();\n        TemplateProviderInlinePage templateProviderInline = new TemplateProviderInlinePage();\n        List<String> allowedSpaces = new ArrayList<String>();\n        allowedSpaces.add(testSpace);\n        templateProviderInline.setVisibilityRestrictions(allowedSpaces);\n        templateProviderInline.setCreationRestrictions(allowedSpaces);\n        templateProviderView = templateProviderInline.clickSaveAndView();\n\n        // Verify we can still create a page from template in the test space\n        createPagePage = templateProviderView.createPage();\n        // Make sure we get in create mode.\n        assertTrue(setup.isInCreateMode());\n        assertEquals(availableTemplateSize, createPagePage.getAvailableTemplateSize());\n        assertTrue(createPagePage.getAvailableTemplates().contains(templateProviderFullName));\n\n        // Modify the target space and verify the form can't be submitted\n        createPagePage.setTemplate(templateProviderFullName);\n        createPagePage.getDocumentPicker().toggleLocationAdvancedEdit();\n        createPagePage.getDocumentPicker().setParent(\"Foo\");\n        createPagePage.getDocumentPicker().setName(\"Bar\");\n        String currentURL = setup.getDriver().getCurrentUrl();\n        createPagePage.clickCreate(false);\n        assertEquals(currentURL, setup.getDriver().getCurrentUrl());\n        // and check that an error is displayed to the user\n        createPagePage.waitForFieldErrorMessage();\n\n        // Verify the template we have removed is no longer available.\n        createPagePage = CreatePagePage.gotoPage();\n\n        // make sure that the template provider is not in the list of templates\n        assertFalse(createPagePage.getAvailableTemplates().contains(templateProviderFullName));\n    }\n\n    /**\n     * Tests that creating a page or a space that already exists displays an error.\n     */\n    @Test\n    @Order(2)\n    void createExistingPageAndSpace(TestUtils setup, TestReference testReference) throws Exception\n    {\n        // Step 0: Setup the correct environment for the test\n\n        cleanUp(setup, testReference);\n\n        LocalDocumentReference templateProviderReference = new LocalDocumentReference(TEMPLATE_NAME + \"Provider\",\n            testReference.getLocalDocumentReference().getParent());\n        String templateProviderFullName = setup.serializeReference(templateProviderReference);\n        String testSpace = setup.serializeReference(templateProviderReference.getParent());\n\n        // create a template to make sure that we have a template to create from\n        createTemplateAndTemplateProvider(setup, templateProviderReference, \"Templates are fun\", \"Funny templates\",\n            false);\n\n        // create a page and a space webhome\n        EntityReference existingPageReference = setup.resolveDocumentReference(testSpace + \".ExistingPage.WebHome\");\n        String existingSpaceName = testSpace + \".ExistingSpace\";\n        setup.rest().savePage(existingPageReference, \"Page that already exists\", \"Existing page\");\n        setup.rest().savePage(new LocalDocumentReference(existingSpaceName, \"WebHome\"), \"Some content\",\n            \"Existing space\");\n\n        // Step 1: Create an empty page for a page that already exists\n        // First we must click on create from a page that already exists as otherwise we won't get the create UI\n        ViewPage vp = setup.gotoPage(existingPageReference);\n        CreatePagePage createPage = vp.createPage();\n        createPage.getDocumentPicker().toggleLocationAdvancedEdit();\n        createPage.getDocumentPicker().setParent(testSpace);\n        createPage.getDocumentPicker().setName(\"ExistingPage\");\n        String currentURL = setup.getDriver().getCurrentUrl();\n        createPage.clickCreate(false);\n        // make sure that we stay on the same page and that an error is displayed to the user. Maybe we should check the\n        // error\n        assertEquals(currentURL, setup.getDriver().getCurrentUrl());\n        createPage.waitForErrorMessage();\n\n        // Step 2: Create a page from Template for a page that already exists\n        // restart everything to make sure it's not the error before\n        vp = setup.gotoPage(existingPageReference);\n        createPage = vp.createPage();\n        createPage.getDocumentPicker().toggleLocationAdvancedEdit();\n        createPage.getDocumentPicker().setParent(testSpace);\n        createPage.getDocumentPicker().setName(\"ExistingPage\");\n        createPage.setTemplate(templateProviderFullName);\n        currentURL = setup.getDriver().getCurrentUrl();\n        createPage.clickCreate(false);\n        // make sure that we stay on the same page and that an error is displayed to the user. Maybe we should check the\n        // error\n        assertEquals(currentURL, setup.getDriver().getCurrentUrl());\n        createPage.waitForErrorMessage();\n\n        // Step 3: Create a space that already exists\n        // Since the Flamingo skin no longer supports creating a space from the UI, trigger the Space creation UI\n        // by using directly the direct action URL for it.\n        setup.gotoPage(existingPageReference, \"create\", \"tocreate=space\");\n        CreatePagePage createSpace = new CreatePagePage();\n        // Check that the terminal choice is not displayed in this mode.\n        assertFalse(createSpace.isTerminalOptionDisplayed());\n\n        currentURL = setup.getDriver().getCurrentUrl();\n        // strip the parameters out of this URL\n        currentURL =\n            currentURL.substring(0, currentURL.indexOf('?') > 0 ? currentURL.indexOf('?') : currentURL.length());\n        // Try to create the a space (non-terminal document) that already exist.\n        createSpace.getDocumentPicker().toggleLocationAdvancedEdit();\n        createSpace.fillForm(existingSpaceName, \"\", null, false);\n        createSpace.clickCreate(false);\n        String urlAfterSubmit = setup.getDriver().getCurrentUrl();\n        urlAfterSubmit = urlAfterSubmit.substring(0,\n            urlAfterSubmit.indexOf('?') > 0 ? urlAfterSubmit.indexOf('?') : urlAfterSubmit.length());\n        // make sure that we stay on the same page and that an error is displayed to the user. Maybe we should check the\n        // error\n        assertEquals(currentURL, urlAfterSubmit);\n        createSpace.waitForErrorMessage();\n    }\n\n    /**\n     * Tests the creation of a page from a save and edit template, tests that the page is indeed saved.\n     */\n    @Test\n    @Order(3)\n    void createPageWithSaveAndEditTemplate(TestUtils setup, TestReference testReference) throws Exception\n    {\n        cleanUp(setup, testReference);\n\n        // Create a template\n        String templateContent = \"Templates are fun\";\n        LocalDocumentReference templateProviderReference = new LocalDocumentReference(TEMPLATE_NAME + \"Provider\",\n            testReference.getLocalDocumentReference().getParent());\n        String templateProviderFullName = setup.serializeReference(templateProviderReference);\n        String testSpace = setup.serializeReference(templateProviderReference.getParent());\n        ViewPage templatePage = createTemplateAndTemplateProvider(setup, templateProviderReference, templateContent,\n            \"Funny templates\", true);\n\n        // create the page\n        CreatePagePage createPage = templatePage.createPage();\n        createPage.getDocumentPicker().toggleLocationAdvancedEdit();\n        EditPage editCreatedPage = createPage.createPageFromTemplate(testSpace, \"NewPage\", templateProviderFullName);\n        // and now cancel it\n        ViewPage newPage = editCreatedPage.clickCancel();\n        // make sure we're not in unexisting page\n        assertTrue(newPage.exists());\n        // we should be in view mode (useless check since the impl of isNonExisting page calls it anyway)\n        assertTrue(setup.isInViewMode());\n        // make sure it's the page we want\n        assertEquals(testSpace + \".NewPage\", newPage.getMetaDataValue(\"space\"));\n        assertEquals(\"WebHome\", newPage.getMetaDataValue(\"page\"));\n        // and now test the title is the name of the page and the content is the one from the template\n        assertEquals(\"NewPage\", newPage.getDocumentTitle());\n        assertEquals(templateContent, newPage.getContent());\n        // and the parent, it should be the template provider, since that's where we created it from\n        assertEquals(\"/\" + testSpace.replace('.', '/') + \"/NewPage\", newPage.getBreadcrumbContent());\n    }\n\n    /**\n     * The goal of this test is to check that if a template is forbidden for a user then:\n     *   1. the template content won't be displayed in the editor\n     *   2. the page will still be created properly from an empty template\n     */\n    @Test\n    @Order(4)\n    void createPageFromForbiddenTemplate(TestUtils setup, TestReference testReference) throws Exception\n    {\n        cleanUp(setup, testReference);\n\n        DocumentReference templateReference = new DocumentReference(\"Template\", testReference.getLastSpaceReference());\n        DocumentReference newDoc = new DocumentReference(\"Document\", testReference.getLastSpaceReference());\n\n        setup.createPage(templateReference, \"A forbidden template\");\n        String userName = testReference.getLastSpaceReference().getName();\n        setup.createUser(userName, userName, \"\");\n\n        // Prevent the user to see the template\n        setup.setRights(templateReference, \"\", userName, \"view\", false);\n\n        setup.login(userName, userName);\n        ViewPage viewPage = setup.gotoPage(templateReference);\n        assertTrue(viewPage.isForbidden());\n\n        setup.gotoPage(newDoc, \"edit\", \"template=\" + templateReference.toString());\n        WikiEditPage wikiEditPage = new WikiEditPage();\n\n        assertTrue(wikiEditPage.getContent().isEmpty());\n        wikiEditPage.setContent(\"Some content in that page\");\n\n        viewPage = wikiEditPage.clickSaveAndView();\n        assertEquals(\"Some content in that page\", viewPage.getContent());\n    }\n\n    /**\n     * Helper function to Create both a Template and a Template Provider for the tests in this class.\n     */\n    private ViewPage createTemplateAndTemplateProvider(TestUtils setup,\n        LocalDocumentReference templateProviderReference, String templateContent, String templateTitle,\n        boolean saveAndEdit) throws Exception\n    {\n        // Create the template page in the same space as the template provider.\n        LocalDocumentReference templateReference =\n            new LocalDocumentReference(TEMPLATE_NAME, templateProviderReference.getParent());\n        setup.rest().savePage(templateReference, templateContent, templateTitle);\n\n        // Create the template provider.\n        TemplatesAdministrationSectionPage sectionPage = TemplatesAdministrationSectionPage.gotoPage();\n        TemplateProviderInlinePage templateProviderInline =\n            sectionPage.createTemplateProvider(templateProviderReference);\n        templateProviderInline.setTemplateName(\"Test Template\");\n        templateProviderInline.setTemplate(setup.serializeReference(templateReference));\n        if (saveAndEdit) {\n            templateProviderInline.setActionOnCreate(TemplateProviderInlinePage.ACTION_SAVEANDEDIT);\n        }\n        return templateProviderInline.clickSaveAndView();\n    }\n\n    private void cleanUp(TestUtils setup, TestReference testReference) throws Exception\n    {\n        // We need to create the root page first in order to be able to delete all its child pages afterwards.\n        setup.rest().savePage(testReference);\n        setup.deletePage(testReference, true);\n    }\n}\n", "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.5\" reference=\"XWiki.AdminTemplatesSheet\" locale=\"\">\n  <web>XWiki</web>\n  <name>AdminTemplatesSheet</name>\n  <language/>\n  <defaultLanguage/>\n  <translation>0</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>XWiki.XWikiPreferences</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title>Admin Templates Sheet</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>xwiki/2.0</syntaxId>\n  <hidden>true</hidden>\n  <content>{{velocity}}\n## Create form, left column.\n(% class=\"col-xs-12 col-md-6\" %)(((\n(% id=\"HAdminTemplatesCreateProvider\" %)\n== {{translation key=\"admin.templates.createprovider\"/}} ==\n\n{{html}}\n  &lt;form class=\"xform\" action=\"$doc.getURL('create')\" method=\"post\"&gt;\n    &lt;fieldset&gt;\n    #template('locationPicker_macros.vm')\n    #locationPicker({\n      'id': 'target',\n      'title': {\n        'label': 'core.create.title',\n        'hint': 'core.create.title.hint',\n        'name': 'title',\n        'placeholder': 'admin.templates.createprovider.defaultdocname'\n      },\n      'preview': {\n        'label': 'core.create.locationPreview.label',\n        'hint': 'core.create.locationPreview.hint'\n      },\n      'parent': {\n        'label': 'core.create.spaceReference.label',\n        'hint': 'core.create.spaceReference.hint',\n        'name': 'spaceReference',\n        'reference': $doc.documentReference.lastSpaceReference,\n        'placeholder': 'core.create.spaceReference.placeholder'\n      },\n      'name': {\n        'label': 'core.create.name.label',\n        'hint': 'core.create.name.hint',\n        'name': 'name',\n        'value': '',\n        'placeholder': 'admin.templates.createprovider.defaultdocname'\n      }\n    })\n    #if ($isAdvancedUser || $isSuperAdmin)\n      &lt;dl&gt;\n        &lt;dt&gt;\n          &lt;label for=\"terminal\"&gt;\n            &lt;input type=\"checkbox\" id=\"terminal\" name=\"tocreate\" value=\"terminal\" checked=\"checked\" /&gt;\n            $services.localization.render('core.create.terminal.label')\n          &lt;/label&gt;\n        &lt;/dt&gt;\n        &lt;dd&gt;\n          &lt;span class=\"xHint\"&gt;$services.localization.render('core.create.terminal.hint')&lt;/span&gt;\n        &lt;/dd&gt;\n      &lt;/dl&gt;\n    #else\n      &lt;input type=\"hidden\" id=\"terminal\" name=\"tocreate\" value=\"terminal\" /&gt;\n    #end\n    &lt;div class=\"buttons\"&gt;\n      &lt;input type=\"hidden\" name=\"form_token\" value=\"$!{services.csrf.getToken()}\" /&gt;\n      &lt;input type=\"hidden\" name=\"parent\" value=\"XWiki.TemplateProviderClass\"/&gt;\n      &lt;input type=\"hidden\" name=\"template\" value=\"XWiki.TemplateProviderTemplate\"/&gt;\n      &lt;span class=\"buttonwrapper\"&gt;&lt;input id=\"createTemplateProvider\" type=\"submit\" value=\"$services.localization.render('admin.templates.createprovider.create')\" class=\"button\"/&gt;&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;/fieldset&gt;\n  &lt;/form&gt;\n{{/html}}\n)))\n\n## Available providers list, right column.\n#set($availableProviders = $services.query.hql(\"\n  , BaseObject obj\n  WHERE\n    doc.fullName=obj.name and obj.className='XWiki.TemplateProviderClass' and doc.fullName!='XWiki.TemplateProviderTemplate'\n  ORDER BY\n    doc.fullName\").execute())\n#if($availableProviders.size() &gt; 0)\n  (% class=\"col-xs-12 col-md-6\" %)(((\n  (% id=\"HAdminTemplatesProvidersList\" %)\n  == {{translation key=\"admin.templates.providerslist\"/}} ==\n\n    #foreach($providerFullname in $availableProviders)\n      * [[$services.rendering.escape($xwiki.getDocument($providerFullname).plainTitle, $xwiki.currentContentSyntaxId)&gt;&gt;$providerFullname]]\n    #end\n  )))\n#end\n\n{{/velocity}}</content>\n  <object>\n    <name>XWiki.AdminTemplatesSheet</name>\n    <number>0</number>\n    <className>XWiki.ConfigurableClass</className>\n    <guid>b03bf517-5cff-4873-a899-7f87e8829aaa</guid>\n    <class>\n      <name>XWiki.ConfigurableClass</name>\n      <customClass/>\n      <customMapping/>\n      <defaultViewSheet/>\n      <defaultEditSheet/>\n      <defaultWeb/>\n      <nameField/>\n      <validationScript/>\n      <categoryIcon>\n        <customDisplay/>\n        <disabled>0</disabled>\n        <hint/>\n        <name>categoryIcon</name>\n        <number>11</number>\n        <picker>0</picker>\n        <prettyName>categoryIcon</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </categoryIcon>\n      <codeToExecute>\n        <contenttype>VelocityWiki</contenttype>\n        <customDisplay/>\n        <disabled>0</disabled>\n        <editor>---</editor>\n        <hint/>\n        <name>codeToExecute</name>\n        <number>7</number>\n        <picker>0</picker>\n        <prettyName>codeToExecute</prettyName>\n        <rows>5</rows>\n        <size>40</size>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>\n      </codeToExecute>\n      <configurationClass>\n        <cache>0</cache>\n        <classname/>\n        <customDisplay/>\n        <defaultValue/>\n        <disabled>0</disabled>\n        <displayType>input</displayType>\n        <freeText/>\n        <hint/>\n        <idField/>\n        <largeStorage>0</largeStorage>\n        <multiSelect>0</multiSelect>\n        <name>configurationClass</name>\n        <number>3</number>\n        <picker>1</picker>\n        <prettyName>configurationClass</prettyName>\n        <relationalStorage>0</relationalStorage>\n        <separator> </separator>\n        <separators/>\n        <size>30</size>\n        <sort>none</sort>\n        <sql/>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <valueField/>\n        <classType>com.xpn.xwiki.objects.classes.PageClass</classType>\n      </configurationClass>\n      <displayBeforeCategory>\n        <customDisplay/>\n        <disabled>0</disabled>\n        <hint/>\n        <name>displayBeforeCategory</name>\n        <number>10</number>\n        <picker>0</picker>\n        <prettyName>displayBeforeCategory</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </displayBeforeCategory>\n      <displayInCategory>\n        <customDisplay/>\n        <disabled>0</disabled>\n        <hint/>\n        <name>displayInCategory</name>\n        <number>9</number>\n        <picker>0</picker>\n        <prettyName>displayInCategory</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </displayInCategory>\n      <displayInSection>\n        <customDisplay/>\n        <disabled>0</disabled>\n        <hint/>\n        <name>displayInSection</name>\n        <number>1</number>\n        <picker>0</picker>\n        <prettyName>displayInSection</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </displayInSection>\n      <heading>\n        <customDisplay/>\n        <disabled>0</disabled>\n        <hint/>\n        <name>heading</name>\n        <number>2</number>\n        <picker>0</picker>\n        <prettyName>heading</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </heading>\n      <iconAttachment>\n        <customDisplay/>\n        <disabled>0</disabled>\n        <hint/>\n        <name>iconAttachment</name>\n        <number>8</number>\n        <picker>0</picker>\n        <prettyName>iconAttachment</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </iconAttachment>\n      <linkPrefix>\n        <customDisplay/>\n        <disabled>0</disabled>\n        <hint/>\n        <name>linkPrefix</name>\n        <number>5</number>\n        <picker>0</picker>\n        <prettyName>linkPrefix</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </linkPrefix>\n      <propertiesToShow>\n        <cache>0</cache>\n        <customDisplay/>\n        <defaultValue/>\n        <disabled>0</disabled>\n        <displayType>input</displayType>\n        <freeText/>\n        <hint/>\n        <largeStorage>0</largeStorage>\n        <multiSelect>1</multiSelect>\n        <name>propertiesToShow</name>\n        <number>6</number>\n        <picker>0</picker>\n        <prettyName>propertiesToShow</prettyName>\n        <relationalStorage>1</relationalStorage>\n        <separator> </separator>\n        <separators> ,|</separators>\n        <size>20</size>\n        <sort>none</sort>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <values/>\n        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>\n      </propertiesToShow>\n      <scope>\n        <cache>0</cache>\n        <customDisplay/>\n        <defaultValue/>\n        <disabled>0</disabled>\n        <displayType>select</displayType>\n        <freeText/>\n        <hint/>\n        <largeStorage>0</largeStorage>\n        <multiSelect>0</multiSelect>\n        <name>scope</name>\n        <number>12</number>\n        <picker>1</picker>\n        <prettyName>scope</prettyName>\n        <relationalStorage>0</relationalStorage>\n        <separator> </separator>\n        <separators>|, </separators>\n        <size>1</size>\n        <sort/>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <values>WIKI|SPACE|ALL_SPACES|WIKI+ALL_SPACES</values>\n        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>\n      </scope>\n      <sectionOrder>\n        <customDisplay/>\n        <disabled>0</disabled>\n        <hint/>\n        <name>sectionOrder</name>\n        <number>12</number>\n        <numberType>integer</numberType>\n        <prettyName>sectionOrder</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <classType>com.xpn.xwiki.objects.classes.NumberClass</classType>\n      </sectionOrder>\n    </class>\n    <property>\n      <categoryIcon>page_white_text</categoryIcon>\n    </property>\n    <property>\n      <codeToExecute/>\n    </property>\n    <property>\n      <configurationClass/>\n    </property>\n    <property>\n      <displayBeforeCategory>edit</displayBeforeCategory>\n    </property>\n    <property>\n      <displayInCategory>content</displayInCategory>\n    </property>\n    <property>\n      <displayInSection>Templates</displayInSection>\n    </property>\n    <property>\n      <heading/>\n    </property>\n    <property>\n      <iconAttachment/>\n    </property>\n    <property>\n      <linkPrefix/>\n    </property>\n    <property>\n      <propertiesToShow/>\n    </property>\n    <property>\n      <scope>WIKI</scope>\n    </property>\n    <property>\n      <sectionOrder>100</sectionOrder>\n    </property>\n  </object>\n</xwikidoc>\n"], "fixing_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.administration.test.ui;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Order;\nimport org.junit.jupiter.api.Test;\nimport org.openqa.selenium.WebElement;\nimport org.xwiki.administration.test.po.TemplateProviderInlinePage;\nimport org.xwiki.administration.test.po.TemplatesAdministrationSectionPage;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.LocalDocumentReference;\nimport org.xwiki.test.docker.junit5.TestReference;\nimport org.xwiki.test.docker.junit5.UITest;\nimport org.xwiki.test.ui.TestUtils;\nimport org.xwiki.test.ui.po.CreatePagePage;\nimport org.xwiki.test.ui.po.DocumentDoesNotExistPage;\nimport org.xwiki.test.ui.po.PageTypePicker;\nimport org.xwiki.test.ui.po.ViewPage;\nimport org.xwiki.test.ui.po.editor.EditPage;\nimport org.xwiki.test.ui.po.editor.WikiEditPage;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * Tests the page templates feature (create page templates, publish them using template providers and use them to create\n * new pages).\n *\n * @version $Id$\n * @since 12.9RC1\n */\n@UITest\nclass PageTemplatesIT\n{\n    /**\n     * Name of the template.\n     */\n    public static final String TEMPLATE_NAME = \"TestTemplate\";\n\n    @BeforeEach\n    public void setup(TestUtils setup)\n    {\n        setup.loginAsSuperAdmin();\n    }\n\n    /**\n     * Tests if a new page can be created from a template.\n     */\n    @Test\n    @Order(1)\n    void createPagesFromTemplate(TestUtils setup, TestReference testReference) throws Exception\n    {\n        // Step 0: Setup the correct environment for the test\n\n        cleanUp(setup, testReference);\n\n        String templateContent = \"Test Template Content\";\n        LocalDocumentReference templateProviderReference = new LocalDocumentReference(TEMPLATE_NAME + \"Provider\",\n            testReference.getLocalDocumentReference().getParent());\n        String templateProviderFullName = setup.serializeReference(templateProviderReference);\n        String testSpace = setup.serializeReference(templateProviderReference.getParent());\n\n        // Step 1: Create a Template and a Template Provider and try to create a new page by using the Add Menu and\n        // using the created Template\n\n        ViewPage templateProviderView = createTemplateAndTemplateProvider(setup, templateProviderReference,\n            templateContent, \"Test Template Title\", false);\n\n        // Create the new document from template\n        CreatePagePage createPagePage = templateProviderView.createPage();\n        // Save the number of available templates so that we can make some checks later on.\n        int availableTemplateSize = createPagePage.getAvailableTemplateSize();\n        String templateInstanceName = TEMPLATE_NAME + \"Instance\";\n        createPagePage.getDocumentPicker().toggleLocationAdvancedEdit();\n        EditPage templateInstanceEditWysiwyg =\n            createPagePage.createPageFromTemplate(templateInstanceName, testSpace, null, templateProviderFullName);\n        WikiEditPage templateInstanceEdit = templateInstanceEditWysiwyg.clickSaveAndView().editWiki();\n\n        // Verify template instance location and content\n        assertEquals(templateInstanceName, templateInstanceEdit.getTitle());\n        assertEquals(testSpace + \".\" + templateInstanceName, templateInstanceEdit.getMetaDataValue(\"space\"));\n        assertEquals(\"WebHome\", templateInstanceEdit.getMetaDataValue(\"page\"));\n        assertEquals(templateContent, templateInstanceEdit.getContent());\n        // check the parent of the template instance\n        assertEquals(templateProviderFullName, templateInstanceEdit.getParent());\n\n        // Step 2: Create a wanted link and verify that clicking it displays the Template and that we can use it.\n\n        // Put a wanted link in the template instance\n        templateInstanceEdit.setContent(\"[[doc:NewPage]]\");\n        ViewPage vp = templateInstanceEdit.clickSaveAndView();\n\n        // Verify that clicking on the wanted link pops up a box to choose the template.\n        EntityReference wantedLinkReference =\n            setup.resolveDocumentReference(testSpace + \".\" + TEMPLATE_NAME + \"Instance\" + \".NewPage\");\n        vp.clickWantedLink(wantedLinkReference, true);\n        PageTypePicker pageTypePicker = new PageTypePicker();\n        assertEquals(availableTemplateSize, pageTypePicker.countAvailableTemplates());\n        assertTrue(pageTypePicker.getAvailableTemplates().contains(templateProviderFullName));\n\n        // Step 3: Create a new page when located on a non-existing page\n\n        LocalDocumentReference unexistingPageReference =\n            new LocalDocumentReference(TEMPLATE_NAME + \"UnexistingInstance\", templateProviderReference.getParent());\n        setup.gotoPage(unexistingPageReference, \"view\", \"spaceRedirect=false\");\n        vp = new ViewPage();\n        assertFalse(vp.exists());\n        DocumentDoesNotExistPage unexistingPage = new DocumentDoesNotExistPage();\n        unexistingPage.clickEditThisPageToCreate();\n        CreatePagePage createUnexistingPage = new CreatePagePage();\n        // Make sure we're in create mode.\n        assertTrue(setup.isInCreateMode());\n        // count the available templates, make sure they're as many as before and that our template is among them\n        assertEquals(availableTemplateSize, createUnexistingPage.getAvailableTemplateSize());\n        assertTrue(createUnexistingPage.getAvailableTemplates().contains(templateProviderFullName));\n        // select it\n        createUnexistingPage.setTemplate(templateProviderFullName);\n        createUnexistingPage.setTerminalPage(true);\n        // and create\n        createUnexistingPage.clickCreate();\n        EditPage ep = new EditPage();\n        WikiEditPage unexistingPageEdit = ep.clickSaveAndView().editWiki();\n\n        // Verify template instance location and content\n        assertEquals(testSpace, unexistingPageEdit.getMetaDataValue(\"space\"));\n        assertEquals(TEMPLATE_NAME + \"UnexistingInstance\", unexistingPageEdit.getMetaDataValue(\"page\"));\n        assertEquals(TEMPLATE_NAME + \"UnexistingInstance\", unexistingPageEdit.getTitle());\n        assertEquals(templateContent, unexistingPageEdit.getContent());\n        // test that this page has no parent\n        assertEquals(\"Main.WebHome\", unexistingPageEdit.getParent());\n\n        // Step 4: Create an empty new page when there are Templates available\n\n        // Make sure we are on a page that exists so that Add > Page will show the space and page fields\n\n        CreatePagePage createEmptyPage = unexistingPageEdit.clickCancel().createPage();\n        assertTrue(createEmptyPage.getAvailableTemplateSize() > 0);\n        createEmptyPage.getDocumentPicker().toggleLocationAdvancedEdit();\n        EditPage editEmptyPage = createEmptyPage.createPage(testSpace, \"EmptyPage\");\n        ViewPage emptyPage = editEmptyPage.clickSaveAndView();\n        // make sure it's empty\n        assertEquals(\"\", emptyPage.getContent());\n        // make sure parent is the right one\n        assertEquals(\"/\" + testSpace.replace('.', '/') + \"/EmptyPage\", emptyPage.getBreadcrumbContent());\n        // mare sure title is the right one\n        assertEquals(\"EmptyPage\", emptyPage.getDocumentTitle());\n\n        // Step 5: Verify that restricting a Template to a space works\n\n        // Restrict the template to its own space\n        templateProviderView = setup.gotoPage(templateProviderReference);\n        templateProviderView.editInline();\n        TemplateProviderInlinePage templateProviderInline = new TemplateProviderInlinePage();\n        List<String> allowedSpaces = new ArrayList<String>();\n        allowedSpaces.add(testSpace);\n        templateProviderInline.setVisibilityRestrictions(allowedSpaces);\n        templateProviderInline.setCreationRestrictions(allowedSpaces);\n        templateProviderView = templateProviderInline.clickSaveAndView();\n\n        // Verify we can still create a page from template in the test space\n        createPagePage = templateProviderView.createPage();\n        // Make sure we get in create mode.\n        assertTrue(setup.isInCreateMode());\n        assertEquals(availableTemplateSize, createPagePage.getAvailableTemplateSize());\n        assertTrue(createPagePage.getAvailableTemplates().contains(templateProviderFullName));\n\n        // Modify the target space and verify the form can't be submitted\n        createPagePage.setTemplate(templateProviderFullName);\n        createPagePage.getDocumentPicker().toggleLocationAdvancedEdit();\n        createPagePage.getDocumentPicker().setParent(\"Foo\");\n        createPagePage.getDocumentPicker().setName(\"Bar\");\n        String currentURL = setup.getDriver().getCurrentUrl();\n        createPagePage.clickCreate(false);\n        assertEquals(currentURL, setup.getDriver().getCurrentUrl());\n        // and check that an error is displayed to the user\n        createPagePage.waitForFieldErrorMessage();\n\n        // Verify the template we have removed is no longer available.\n        createPagePage = CreatePagePage.gotoPage();\n\n        // make sure that the template provider is not in the list of templates\n        assertFalse(createPagePage.getAvailableTemplates().contains(templateProviderFullName));\n    }\n\n    /**\n     * Tests that creating a page or a space that already exists displays an error.\n     */\n    @Test\n    @Order(2)\n    void createExistingPageAndSpace(TestUtils setup, TestReference testReference) throws Exception\n    {\n        // Step 0: Setup the correct environment for the test\n\n        cleanUp(setup, testReference);\n\n        LocalDocumentReference templateProviderReference = new LocalDocumentReference(TEMPLATE_NAME + \"Provider\",\n            testReference.getLocalDocumentReference().getParent());\n        String templateProviderFullName = setup.serializeReference(templateProviderReference);\n        String testSpace = setup.serializeReference(templateProviderReference.getParent());\n\n        // create a template to make sure that we have a template to create from\n        createTemplateAndTemplateProvider(setup, templateProviderReference, \"Templates are fun\", \"Funny templates\",\n            false);\n\n        // create a page and a space webhome\n        EntityReference existingPageReference = setup.resolveDocumentReference(testSpace + \".ExistingPage.WebHome\");\n        String existingSpaceName = testSpace + \".ExistingSpace\";\n        setup.rest().savePage(existingPageReference, \"Page that already exists\", \"Existing page\");\n        setup.rest().savePage(new LocalDocumentReference(existingSpaceName, \"WebHome\"), \"Some content\",\n            \"Existing space\");\n\n        // Step 1: Create an empty page for a page that already exists\n        // First we must click on create from a page that already exists as otherwise we won't get the create UI\n        ViewPage vp = setup.gotoPage(existingPageReference);\n        CreatePagePage createPage = vp.createPage();\n        createPage.getDocumentPicker().toggleLocationAdvancedEdit();\n        createPage.getDocumentPicker().setParent(testSpace);\n        createPage.getDocumentPicker().setName(\"ExistingPage\");\n        String currentURL = setup.getDriver().getCurrentUrl();\n        createPage.clickCreate(false);\n        // make sure that we stay on the same page and that an error is displayed to the user. Maybe we should check the\n        // error\n        assertEquals(currentURL, setup.getDriver().getCurrentUrl());\n        createPage.waitForErrorMessage();\n\n        // Step 2: Create a page from Template for a page that already exists\n        // restart everything to make sure it's not the error before\n        vp = setup.gotoPage(existingPageReference);\n        createPage = vp.createPage();\n        createPage.getDocumentPicker().toggleLocationAdvancedEdit();\n        createPage.getDocumentPicker().setParent(testSpace);\n        createPage.getDocumentPicker().setName(\"ExistingPage\");\n        createPage.setTemplate(templateProviderFullName);\n        currentURL = setup.getDriver().getCurrentUrl();\n        createPage.clickCreate(false);\n        // make sure that we stay on the same page and that an error is displayed to the user. Maybe we should check the\n        // error\n        assertEquals(currentURL, setup.getDriver().getCurrentUrl());\n        createPage.waitForErrorMessage();\n\n        // Step 3: Create a space that already exists\n        // Since the Flamingo skin no longer supports creating a space from the UI, trigger the Space creation UI\n        // by using directly the direct action URL for it.\n        setup.gotoPage(existingPageReference, \"create\", \"tocreate=space\");\n        CreatePagePage createSpace = new CreatePagePage();\n        // Check that the terminal choice is not displayed in this mode.\n        assertFalse(createSpace.isTerminalOptionDisplayed());\n\n        currentURL = setup.getDriver().getCurrentUrl();\n        // strip the parameters out of this URL\n        currentURL =\n            currentURL.substring(0, currentURL.indexOf('?') > 0 ? currentURL.indexOf('?') : currentURL.length());\n        // Try to create the a space (non-terminal document) that already exist.\n        createSpace.getDocumentPicker().toggleLocationAdvancedEdit();\n        createSpace.fillForm(existingSpaceName, \"\", null, false);\n        createSpace.clickCreate(false);\n        String urlAfterSubmit = setup.getDriver().getCurrentUrl();\n        urlAfterSubmit = urlAfterSubmit.substring(0,\n            urlAfterSubmit.indexOf('?') > 0 ? urlAfterSubmit.indexOf('?') : urlAfterSubmit.length());\n        // make sure that we stay on the same page and that an error is displayed to the user. Maybe we should check the\n        // error\n        assertEquals(currentURL, urlAfterSubmit);\n        createSpace.waitForErrorMessage();\n    }\n\n    /**\n     * Tests the creation of a page from a save and edit template, tests that the page is indeed saved.\n     */\n    @Test\n    @Order(3)\n    void createPageWithSaveAndEditTemplate(TestUtils setup, TestReference testReference) throws Exception\n    {\n        cleanUp(setup, testReference);\n\n        // Create a template\n        String templateContent = \"Templates are fun\";\n        LocalDocumentReference templateProviderReference = new LocalDocumentReference(TEMPLATE_NAME + \"Provider\",\n            testReference.getLocalDocumentReference().getParent());\n        String templateProviderFullName = setup.serializeReference(templateProviderReference);\n        String testSpace = setup.serializeReference(templateProviderReference.getParent());\n        ViewPage templatePage = createTemplateAndTemplateProvider(setup, templateProviderReference, templateContent,\n            \"Funny templates\", true);\n\n        // create the page\n        CreatePagePage createPage = templatePage.createPage();\n        createPage.getDocumentPicker().toggleLocationAdvancedEdit();\n        EditPage editCreatedPage = createPage.createPageFromTemplate(testSpace, \"NewPage\", templateProviderFullName);\n        // and now cancel it\n        ViewPage newPage = editCreatedPage.clickCancel();\n        // make sure we're not in unexisting page\n        assertTrue(newPage.exists());\n        // we should be in view mode (useless check since the impl of isNonExisting page calls it anyway)\n        assertTrue(setup.isInViewMode());\n        // make sure it's the page we want\n        assertEquals(testSpace + \".NewPage\", newPage.getMetaDataValue(\"space\"));\n        assertEquals(\"WebHome\", newPage.getMetaDataValue(\"page\"));\n        // and now test the title is the name of the page and the content is the one from the template\n        assertEquals(\"NewPage\", newPage.getDocumentTitle());\n        assertEquals(templateContent, newPage.getContent());\n        // and the parent, it should be the template provider, since that's where we created it from\n        assertEquals(\"/\" + testSpace.replace('.', '/') + \"/NewPage\", newPage.getBreadcrumbContent());\n    }\n\n    /**\n     * The goal of this test is to check that if a template is forbidden for a user then:\n     *   1. the template content won't be displayed in the editor\n     *   2. the page will still be created properly from an empty template\n     */\n    @Test\n    @Order(4)\n    void createPageFromForbiddenTemplate(TestUtils setup, TestReference testReference) throws Exception\n    {\n        cleanUp(setup, testReference);\n\n        DocumentReference templateReference = new DocumentReference(\"Template\", testReference.getLastSpaceReference());\n        DocumentReference newDoc = new DocumentReference(\"Document\", testReference.getLastSpaceReference());\n\n        setup.createPage(templateReference, \"A forbidden template\");\n        String userName = testReference.getLastSpaceReference().getName();\n        setup.createUser(userName, userName, \"\");\n\n        // Prevent the user to see the template\n        setup.setRights(templateReference, \"\", userName, \"view\", false);\n\n        setup.login(userName, userName);\n        ViewPage viewPage = setup.gotoPage(templateReference);\n        assertTrue(viewPage.isForbidden());\n\n        setup.gotoPage(newDoc, \"edit\", \"template=\" + templateReference.toString());\n        WikiEditPage wikiEditPage = new WikiEditPage();\n\n        assertTrue(wikiEditPage.getContent().isEmpty());\n        wikiEditPage.setContent(\"Some content in that page\");\n\n        viewPage = wikiEditPage.clickSaveAndView();\n        assertEquals(\"Some content in that page\", viewPage.getContent());\n    }\n\n    /**\n     * The goal of this test is to check that the template provider's title is correctly escaped.\n     */\n    @Test\n    @Order(5)\n    void templateProviderTitleEscaping(TestUtils setup, TestReference testReference) throws Exception\n    {\n        cleanUp(setup, testReference);\n\n        // Create a template\n        String templateContent = \"Templates are fun\";\n        String providerName = \"{{html}}<span>HTML</span>{{/html}}\";\n        LocalDocumentReference templateProviderReference = new LocalDocumentReference(providerName,\n            testReference.getLocalDocumentReference().getParent());\n        createTemplateAndTemplateProvider(setup, templateProviderReference, templateContent,\n            \"Funny templates\", true);\n\n        TemplatesAdministrationSectionPage adminPage = TemplatesAdministrationSectionPage.gotoPage();\n        List<WebElement> links = adminPage.getExistingTemplatesLinks();\n        assertFalse(links.stream().anyMatch(element -> element.getText().equals(\"HTML\")));\n        assertTrue(links.stream().anyMatch(element -> providerName.equals(element.getText())));\n    }\n\n    /**\n     * Helper function to Create both a Template and a Template Provider for the tests in this class.\n     */\n    private ViewPage createTemplateAndTemplateProvider(TestUtils setup,\n        LocalDocumentReference templateProviderReference, String templateContent, String templateTitle,\n        boolean saveAndEdit) throws Exception\n    {\n        // Create the template page in the same space as the template provider.\n        LocalDocumentReference templateReference =\n            new LocalDocumentReference(TEMPLATE_NAME, templateProviderReference.getParent());\n        setup.rest().savePage(templateReference, templateContent, templateTitle);\n\n        // Create the template provider.\n        TemplatesAdministrationSectionPage sectionPage = TemplatesAdministrationSectionPage.gotoPage();\n        TemplateProviderInlinePage templateProviderInline =\n            sectionPage.createTemplateProvider(templateProviderReference);\n        templateProviderInline.setTemplateName(\"Test Template\");\n        templateProviderInline.setTemplate(setup.serializeReference(templateReference));\n        if (saveAndEdit) {\n            templateProviderInline.setActionOnCreate(TemplateProviderInlinePage.ACTION_SAVEANDEDIT);\n        }\n        return templateProviderInline.clickSaveAndView();\n    }\n\n    private void cleanUp(TestUtils setup, TestReference testReference) throws Exception\n    {\n        // We need to create the root page first in order to be able to delete all its child pages afterwards.\n        setup.rest().savePage(testReference);\n        setup.deletePage(testReference, true);\n    }\n}\n", "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.5\" reference=\"XWiki.AdminTemplatesSheet\" locale=\"\">\n  <web>XWiki</web>\n  <name>AdminTemplatesSheet</name>\n  <language/>\n  <defaultLanguage/>\n  <translation>0</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>XWiki.XWikiPreferences</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title>Admin Templates Sheet</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>xwiki/2.0</syntaxId>\n  <hidden>true</hidden>\n  <content>{{velocity}}\n## Create form, left column.\n(% class=\"col-xs-12 col-md-6\" %)(((\n(% id=\"HAdminTemplatesCreateProvider\" %)\n== {{translation key=\"admin.templates.createprovider\"/}} ==\n\n{{html}}\n  &lt;form class=\"xform\" action=\"$doc.getURL('create')\" method=\"post\"&gt;\n    &lt;fieldset&gt;\n    #template('locationPicker_macros.vm')\n    #locationPicker({\n      'id': 'target',\n      'title': {\n        'label': 'core.create.title',\n        'hint': 'core.create.title.hint',\n        'name': 'title',\n        'placeholder': 'admin.templates.createprovider.defaultdocname'\n      },\n      'preview': {\n        'label': 'core.create.locationPreview.label',\n        'hint': 'core.create.locationPreview.hint'\n      },\n      'parent': {\n        'label': 'core.create.spaceReference.label',\n        'hint': 'core.create.spaceReference.hint',\n        'name': 'spaceReference',\n        'reference': $doc.documentReference.lastSpaceReference,\n        'placeholder': 'core.create.spaceReference.placeholder'\n      },\n      'name': {\n        'label': 'core.create.name.label',\n        'hint': 'core.create.name.hint',\n        'name': 'name',\n        'value': '',\n        'placeholder': 'admin.templates.createprovider.defaultdocname'\n      }\n    })\n    #if ($isAdvancedUser || $isSuperAdmin)\n      &lt;dl&gt;\n        &lt;dt&gt;\n          &lt;label for=\"terminal\"&gt;\n            &lt;input type=\"checkbox\" id=\"terminal\" name=\"tocreate\" value=\"terminal\" checked=\"checked\" /&gt;\n            $services.localization.render('core.create.terminal.label')\n          &lt;/label&gt;\n        &lt;/dt&gt;\n        &lt;dd&gt;\n          &lt;span class=\"xHint\"&gt;$services.localization.render('core.create.terminal.hint')&lt;/span&gt;\n        &lt;/dd&gt;\n      &lt;/dl&gt;\n    #else\n      &lt;input type=\"hidden\" id=\"terminal\" name=\"tocreate\" value=\"terminal\" /&gt;\n    #end\n    &lt;div class=\"buttons\"&gt;\n      &lt;input type=\"hidden\" name=\"form_token\" value=\"$!{services.csrf.getToken()}\" /&gt;\n      &lt;input type=\"hidden\" name=\"parent\" value=\"XWiki.TemplateProviderClass\"/&gt;\n      &lt;input type=\"hidden\" name=\"template\" value=\"XWiki.TemplateProviderTemplate\"/&gt;\n      &lt;span class=\"buttonwrapper\"&gt;&lt;input id=\"createTemplateProvider\" type=\"submit\" value=\"$services.localization.render('admin.templates.createprovider.create')\" class=\"button\"/&gt;&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;/fieldset&gt;\n  &lt;/form&gt;\n{{/html}}\n)))\n\n## Available providers list, right column.\n#set($availableProviders = $services.query.hql(\"\n  , BaseObject obj\n  WHERE\n    doc.fullName=obj.name and obj.className='XWiki.TemplateProviderClass' and doc.fullName!='XWiki.TemplateProviderTemplate'\n  ORDER BY\n    doc.fullName\").execute())\n#if($availableProviders.size() &gt; 0)\n  (% class=\"col-xs-12 col-md-6\" %)(((\n  (% id=\"HAdminTemplatesProvidersList\" %)\n  == {{translation key=\"admin.templates.providerslist\"/}} ==\n\n    #foreach($providerFullname in $availableProviders)\n      * [[$services.rendering.escape($services.rendering.escape($xwiki.getDocument($providerFullname).plainTitle, $xwiki.currentContentSyntaxId), $xwiki.currentContentSyntaxId)&gt;&gt;$services.rendering.escape($providerFullname, $xwiki.currentContentSyntaxId)]]\n    #end\n  )))\n#end\n\n{{/velocity}}</content>\n  <object>\n    <name>XWiki.AdminTemplatesSheet</name>\n    <number>0</number>\n    <className>XWiki.ConfigurableClass</className>\n    <guid>b03bf517-5cff-4873-a899-7f87e8829aaa</guid>\n    <class>\n      <name>XWiki.ConfigurableClass</name>\n      <customClass/>\n      <customMapping/>\n      <defaultViewSheet/>\n      <defaultEditSheet/>\n      <defaultWeb/>\n      <nameField/>\n      <validationScript/>\n      <categoryIcon>\n        <customDisplay/>\n        <disabled>0</disabled>\n        <hint/>\n        <name>categoryIcon</name>\n        <number>11</number>\n        <picker>0</picker>\n        <prettyName>categoryIcon</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </categoryIcon>\n      <codeToExecute>\n        <contenttype>VelocityWiki</contenttype>\n        <customDisplay/>\n        <disabled>0</disabled>\n        <editor>---</editor>\n        <hint/>\n        <name>codeToExecute</name>\n        <number>7</number>\n        <picker>0</picker>\n        <prettyName>codeToExecute</prettyName>\n        <rows>5</rows>\n        <size>40</size>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>\n      </codeToExecute>\n      <configurationClass>\n        <cache>0</cache>\n        <classname/>\n        <customDisplay/>\n        <defaultValue/>\n        <disabled>0</disabled>\n        <displayType>input</displayType>\n        <freeText/>\n        <hint/>\n        <idField/>\n        <largeStorage>0</largeStorage>\n        <multiSelect>0</multiSelect>\n        <name>configurationClass</name>\n        <number>3</number>\n        <picker>1</picker>\n        <prettyName>configurationClass</prettyName>\n        <relationalStorage>0</relationalStorage>\n        <separator> </separator>\n        <separators/>\n        <size>30</size>\n        <sort>none</sort>\n        <sql/>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <valueField/>\n        <classType>com.xpn.xwiki.objects.classes.PageClass</classType>\n      </configurationClass>\n      <displayBeforeCategory>\n        <customDisplay/>\n        <disabled>0</disabled>\n        <hint/>\n        <name>displayBeforeCategory</name>\n        <number>10</number>\n        <picker>0</picker>\n        <prettyName>displayBeforeCategory</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </displayBeforeCategory>\n      <displayInCategory>\n        <customDisplay/>\n        <disabled>0</disabled>\n        <hint/>\n        <name>displayInCategory</name>\n        <number>9</number>\n        <picker>0</picker>\n        <prettyName>displayInCategory</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </displayInCategory>\n      <displayInSection>\n        <customDisplay/>\n        <disabled>0</disabled>\n        <hint/>\n        <name>displayInSection</name>\n        <number>1</number>\n        <picker>0</picker>\n        <prettyName>displayInSection</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </displayInSection>\n      <heading>\n        <customDisplay/>\n        <disabled>0</disabled>\n        <hint/>\n        <name>heading</name>\n        <number>2</number>\n        <picker>0</picker>\n        <prettyName>heading</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </heading>\n      <iconAttachment>\n        <customDisplay/>\n        <disabled>0</disabled>\n        <hint/>\n        <name>iconAttachment</name>\n        <number>8</number>\n        <picker>0</picker>\n        <prettyName>iconAttachment</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </iconAttachment>\n      <linkPrefix>\n        <customDisplay/>\n        <disabled>0</disabled>\n        <hint/>\n        <name>linkPrefix</name>\n        <number>5</number>\n        <picker>0</picker>\n        <prettyName>linkPrefix</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </linkPrefix>\n      <propertiesToShow>\n        <cache>0</cache>\n        <customDisplay/>\n        <defaultValue/>\n        <disabled>0</disabled>\n        <displayType>input</displayType>\n        <freeText/>\n        <hint/>\n        <largeStorage>0</largeStorage>\n        <multiSelect>1</multiSelect>\n        <name>propertiesToShow</name>\n        <number>6</number>\n        <picker>0</picker>\n        <prettyName>propertiesToShow</prettyName>\n        <relationalStorage>1</relationalStorage>\n        <separator> </separator>\n        <separators> ,|</separators>\n        <size>20</size>\n        <sort>none</sort>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <values/>\n        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>\n      </propertiesToShow>\n      <scope>\n        <cache>0</cache>\n        <customDisplay/>\n        <defaultValue/>\n        <disabled>0</disabled>\n        <displayType>select</displayType>\n        <freeText/>\n        <hint/>\n        <largeStorage>0</largeStorage>\n        <multiSelect>0</multiSelect>\n        <name>scope</name>\n        <number>12</number>\n        <picker>1</picker>\n        <prettyName>scope</prettyName>\n        <relationalStorage>0</relationalStorage>\n        <separator> </separator>\n        <separators>|, </separators>\n        <size>1</size>\n        <sort/>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <values>WIKI|SPACE|ALL_SPACES|WIKI+ALL_SPACES</values>\n        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>\n      </scope>\n      <sectionOrder>\n        <customDisplay/>\n        <disabled>0</disabled>\n        <hint/>\n        <name>sectionOrder</name>\n        <number>12</number>\n        <numberType>integer</numberType>\n        <prettyName>sectionOrder</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <validationMessage/>\n        <validationRegExp/>\n        <classType>com.xpn.xwiki.objects.classes.NumberClass</classType>\n      </sectionOrder>\n    </class>\n    <property>\n      <categoryIcon>page_white_text</categoryIcon>\n    </property>\n    <property>\n      <codeToExecute/>\n    </property>\n    <property>\n      <configurationClass/>\n    </property>\n    <property>\n      <displayBeforeCategory>edit</displayBeforeCategory>\n    </property>\n    <property>\n      <displayInCategory>content</displayInCategory>\n    </property>\n    <property>\n      <displayInSection>Templates</displayInSection>\n    </property>\n    <property>\n      <heading/>\n    </property>\n    <property>\n      <iconAttachment/>\n    </property>\n    <property>\n      <linkPrefix/>\n    </property>\n    <property>\n      <propertiesToShow/>\n    </property>\n    <property>\n      <scope>WIKI</scope>\n    </property>\n    <property>\n      <sectionOrder>100</sectionOrder>\n    </property>\n  </object>\n</xwikidoc>\n"], "filenames": ["xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/PageTemplatesIT.java", "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-ui/src/main/resources/XWiki/AdminTemplatesSheet.xml"], "buggy_code_start_loc": [27, 115], "buggy_code_end_loc": [361, 116], "fixing_code_start_loc": [28, 115], "fixing_code_end_loc": [386, 116], "type": "CWE-74", "message": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Any user with edit rights on any document (e.g., their own user profile) can execute code with programming rights, leading to remote code execution. This vulnerability has been patched in XWiki 13.10.11, 14.4.8, 14.10.1 and 15.0 RC1. Users are advised to upgrade. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2023-29514", "sourceIdentifier": "security-advisories@github.com", "published": "2023-04-19T00:15:08.280", "lastModified": "2023-04-28T19:22:58.367", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Any user with edit rights on any document (e.g., their own user profile) can execute code with programming rights, leading to remote code execution. This vulnerability has been patched in XWiki 13.10.11, 14.4.8, 14.10.1 and 15.0 RC1. Users are advised to upgrade. There are no known workarounds for this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.9, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.1, "impactScore": 6.0}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionEndExcluding": "13.10.11", "matchCriteriaId": "A3CD7FFB-D491-4B7D-839D-D567B0C00E59"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "14.0", "versionEndExcluding": "14.4.8", "matchCriteriaId": "AD2B185D-F8A6-49EB-B485-744F234B8730"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "14.5", "versionEndExcluding": "14.10.1", "matchCriteriaId": "A0694EEC-0251-47D7-A062-7C257C408225"}]}]}], "references": [{"url": "https://github.com/xwiki/xwiki-platform/commit/7bf7094f8ffac095f5d66809af7554c9cc44de09", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-9j36-3cp4-rh4j", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-20268", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-platform/commit/7bf7094f8ffac095f5d66809af7554c9cc44de09"}}