{"buggy_code": ["/*\n * This library is part of OpenCms -\n * the Open Source Content Management System\n *\n * Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * For further information about Alkacon Software, please see the\n * company website: http://www.alkacon.com\n *\n * For further information about OpenCms, please see the\n * project website: http://www.opencms.org\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\npackage org.opencms.ade.galleries.client.ui;\n\nimport org.opencms.ade.galleries.client.ui.css.I_CmsLayoutBundle;\nimport org.opencms.ade.galleries.shared.CmsResultItemBean;\nimport org.opencms.gwt.client.CmsCoreProvider;\nimport org.opencms.gwt.client.dnd.I_CmsDragHandle;\nimport org.opencms.gwt.client.dnd.I_CmsDraggable;\nimport org.opencms.gwt.client.ui.CmsListItemWidget;\nimport org.opencms.gwt.client.ui.input.CmsLabel.I_TitleGenerator;\nimport org.opencms.gwt.client.util.CmsClientStringUtil;\nimport org.opencms.gwt.client.util.CmsToolTipHandler;\nimport org.opencms.gwt.shared.CmsAdditionalInfoBean;\nimport org.opencms.gwt.shared.CmsListInfoBean;\n\nimport com.google.gwt.user.client.ui.HTML;\n\n/**\n * The result list item widget.<p>\n *\n * Enabling the image tile view.<p>\n *\n * @since 8.0.0\n */\npublic class CmsResultItemWidget extends CmsListItemWidget {\n\n    /**\n     * Widget containing the image(s) for a result list item..<p>\n     */\n    public class ImageTile extends HTML implements I_CmsDragHandle {\n\n        /** The draggable result list item. */\n        private I_CmsDraggable m_draggable;\n\n        /**\n         * Creates a new instance with the given content.<p>\n         *\n         * @param content the HTML content\n         */\n        public ImageTile(String content) {\n\n            super(content);\n        }\n\n        /**\n         * @see org.opencms.gwt.client.dnd.I_CmsDragHandle#getDraggable()\n         */\n        public I_CmsDraggable getDraggable() {\n\n            return m_draggable;\n        }\n\n        /**\n         * Sets the draggable widget.<p>\n         *\n         * @param draggable the draggable widget\n         */\n        public void setDraggable(I_CmsDraggable draggable) {\n\n            m_draggable = draggable;\n        }\n\n    }\n\n    /** Standard image tile scale parameter. */\n    private static final String IMAGE_SCALE_PARAM = \"?__scale=t:1,c:ffffff,r:0\";\n\n    /** Tile view flag. */\n    private boolean m_hasTileView;\n\n    /** The image tile. */\n    private ImageTile m_imageTile;\n\n    /** The tool tip handler. */\n    private CmsToolTipHandler m_tooltipHandler;\n\n    /**\n     * Constructor.<p>\n     *\n     * @param infoBean the resource info bean\n     * @param showPath <code>true</code> to show the resource path in sub title\n     */\n    public CmsResultItemWidget(CmsResultItemBean infoBean, boolean showPath) {\n\n        super(infoBean);\n        if (showPath) {\n            setSubtitleLabel(infoBean.getPath());\n            setSubtitleTitle(infoBean.getSubTitle());\n        } else {\n            setSubtitleTitle(infoBean.getPath());\n        }\n\n        // if resourceType==\"image\" prepare for tile view\n        if (CmsResultsTab.isImagelikeType(infoBean.getType())) {\n            m_hasTileView = true;\n            // add tile view marker css classes\n            String src = infoBean.getViewLink();\n            if (src == null) {\n                src = CmsCoreProvider.get().link(infoBean.getPath());\n            }\n            String timeParam = \"&time=\" + System.currentTimeMillis();\n            // insert tile view image div\n            ImageTile imageTile = new ImageTile(\"<img src=\\\"\" + src + getBigImageScaleParam()\n            // add time stamp to override browser image caching\n                + timeParam\n                + \"\\\" class=\\\"\"\n                + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().bigImage()\n                + \"\\\" />\"\n                // using a second image tag for the small thumbnail variant\n                + \"<img src=\\\"\"\n                + src\n                + getSmallImageScaleParam(infoBean)\n                // add time stamp to override browser image caching\n                + timeParam\n                + \"\\\" class=\\\"\"\n                + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().smallImage()\n                + \"\\\" />\"\n                + \"<div class='\"\n                + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().expiredImageOverlay()\n                + \"' />\");\n            imageTile.setStyleName(I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().imageTile());\n            if (CmsClientStringUtil.checkIsPathOrLinkToSvg(infoBean.getPath())) {\n                imageTile.addStyleName(I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().svg());\n            }\n            m_imageTile = imageTile;\n            m_tooltipHandler = new CmsToolTipHandler(imageTile, generateTooltipHtml(infoBean));\n            m_contentPanel.insert(imageTile, 0);\n        }\n\n    }\n\n    /**\n     * Gets the image tile.<p>\n     *\n     * @return the image tile\n     */\n    public ImageTile getImageTile() {\n\n        return m_imageTile;\n    }\n\n    /**\n     * Indicates wther there is a tile view available for this widget.<p>\n     *\n     * @return <code>true</code> if a tiled view is available\n     */\n    public boolean hasTileView() {\n\n        return m_hasTileView;\n    }\n\n    /**\n     * Initializes the title attribute of the subtitle line.<p>\n     *\n     * @param subtitleTitle the value to set\n     */\n    public void setSubtitleTitle(final String subtitleTitle) {\n\n        m_subtitle.setTitle(subtitleTitle);\n        m_subtitle.setTitleGenerator(new I_TitleGenerator() {\n\n            public String getTitle(String originalText) {\n\n                return subtitleTitle;\n            }\n        });\n    }\n\n    /**\n     * @see com.google.gwt.user.client.ui.Composite#onDetach()\n     */\n    @Override\n    protected void onDetach() {\n\n        if (m_tooltipHandler != null) {\n            m_tooltipHandler.clearShowing();\n        }\n        super.onDetach();\n    }\n\n    /**\n     * Generates the HTML for the item tool-tip.<p>\n     *\n     * @param infoBean the item info\n     *\n     * @return the generated HTML\n     */\n    private String generateTooltipHtml(CmsListInfoBean infoBean) {\n\n        StringBuffer result = new StringBuffer();\n        result.append(\"<p><b>\").append(CmsClientStringUtil.shortenString(infoBean.getTitle(), 70)).append(\"</b></p>\");\n        if (infoBean.hasAdditionalInfo()) {\n            for (CmsAdditionalInfoBean additionalInfo : infoBean.getAdditionalInfo()) {\n                result.append(\"<p>\").append(additionalInfo.getName()).append(\":&nbsp;\");\n                // shorten the value to max 45 characters\n                result.append(CmsClientStringUtil.shortenString(additionalInfo.getValue(), 45)).append(\"</p>\");\n            }\n        }\n        return result.toString();\n    }\n\n    /**\n     * Returns the scale parameter for big thumbnail images.<p>\n     *\n     * @return the scale parameter\n     */\n    private String getBigImageScaleParam() {\n\n        return IMAGE_SCALE_PARAM\n            + \",w:\"\n            + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().bigImageWidth()\n            + \",h:\"\n            + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().bigImageHeight();\n    }\n\n    /**\n     * Returns the scale parameter for small thumbnail images.<p>\n     *\n     * @param infoBean the resource info\n     *\n     * @return the scale parameter\n     */\n    private String getSmallImageScaleParam(CmsResultItemBean infoBean) {\n\n        String result = null;\n        if (infoBean.getDimension() != null) {\n            String[] sizes = infoBean.getDimension().split(\"x\");\n            try {\n                int width = Integer.parseInt(sizes[0].trim());\n                int height = Integer.parseInt(sizes[1].trim());\n                // only use the small image dimensions in case of dimensions smaller than the big thumbnail\n                if ((I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().bigImageWidth() > width)\n                    || (I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().bigImageHeight() > height)) {\n                    result = IMAGE_SCALE_PARAM\n                        + \",w:\"\n                        + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().smallImageWidth()\n                        + \",h:\"\n                        + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().smallImageHeight();\n                }\n            } catch (Exception e) {\n                // failed parsing the dimensions, will use big image\n            }\n        }\n        if (result == null) {\n            result = getBigImageScaleParam();\n        }\n        return result;\n    }\n}\n"], "fixing_code": ["/*\n * This library is part of OpenCms -\n * the Open Source Content Management System\n *\n * Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * For further information about Alkacon Software, please see the\n * company website: http://www.alkacon.com\n *\n * For further information about OpenCms, please see the\n * project website: http://www.opencms.org\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\npackage org.opencms.ade.galleries.client.ui;\n\nimport org.opencms.ade.galleries.client.ui.css.I_CmsLayoutBundle;\nimport org.opencms.ade.galleries.shared.CmsResultItemBean;\nimport org.opencms.gwt.client.CmsCoreProvider;\nimport org.opencms.gwt.client.dnd.I_CmsDragHandle;\nimport org.opencms.gwt.client.dnd.I_CmsDraggable;\nimport org.opencms.gwt.client.ui.CmsListItemWidget;\nimport org.opencms.gwt.client.ui.input.CmsLabel.I_TitleGenerator;\nimport org.opencms.gwt.client.util.CmsClientStringUtil;\nimport org.opencms.gwt.client.util.CmsToolTipHandler;\nimport org.opencms.gwt.shared.CmsAdditionalInfoBean;\nimport org.opencms.gwt.shared.CmsListInfoBean;\n\nimport com.google.gwt.dom.client.Element;\nimport com.google.gwt.user.client.DOM;\nimport com.google.gwt.user.client.ui.HTML;\n\n/**\n * The result list item widget.<p>\n *\n * Enabling the image tile view.<p>\n *\n * @since 8.0.0\n */\npublic class CmsResultItemWidget extends CmsListItemWidget {\n\n    /**\n     * Widget containing the image(s) for a result list item..<p>\n     */\n    public class ImageTile extends HTML implements I_CmsDragHandle {\n\n        /** The draggable result list item. */\n        private I_CmsDraggable m_draggable;\n\n        /**\n         * Creates a new instance with the given content.<p>\n         *\n         * @param content the HTML content\n         */\n        public ImageTile(String content) {\n\n            super(content);\n        }\n\n        /**\n         * @see org.opencms.gwt.client.dnd.I_CmsDragHandle#getDraggable()\n         */\n        public I_CmsDraggable getDraggable() {\n\n            return m_draggable;\n        }\n\n        /**\n         * Sets the draggable widget.<p>\n         *\n         * @param draggable the draggable widget\n         */\n        public void setDraggable(I_CmsDraggable draggable) {\n\n            m_draggable = draggable;\n        }\n\n    }\n\n    /** Standard image tile scale parameter. */\n    private static final String IMAGE_SCALE_PARAM = \"?__scale=t:1,c:ffffff,r:0\";\n\n    /** Tile view flag. */\n    private boolean m_hasTileView;\n\n    /** The image tile. */\n    private ImageTile m_imageTile;\n\n    /** The tool tip handler. */\n    private CmsToolTipHandler m_tooltipHandler;\n\n    /**\n     * Constructor.<p>\n     *\n     * @param infoBean the resource info bean\n     * @param showPath <code>true</code> to show the resource path in sub title\n     */\n    public CmsResultItemWidget(CmsResultItemBean infoBean, boolean showPath) {\n\n        super(infoBean);\n        if (showPath) {\n            setSubtitleLabel(infoBean.getPath());\n            setSubtitleTitle(infoBean.getSubTitle());\n        } else {\n            setSubtitleTitle(infoBean.getPath());\n        }\n\n        // if resourceType==\"image\" prepare for tile view\n        if (CmsResultsTab.isImagelikeType(infoBean.getType())) {\n            m_hasTileView = true;\n            // add tile view marker css classes\n            String src = infoBean.getViewLink();\n            if (src == null) {\n                src = CmsCoreProvider.get().link(infoBean.getPath());\n            }\n            String timeParam = \"&time=\" + System.currentTimeMillis();\n            // insert tile view image div\n            ImageTile imageTile = new ImageTile(\"<img src=\\\"\" + src + getBigImageScaleParam()\n            // add time stamp to override browser image caching\n                + timeParam\n                + \"\\\" class=\\\"\"\n                + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().bigImage()\n                + \"\\\" />\"\n                // using a second image tag for the small thumbnail variant\n                + \"<img src=\\\"\"\n                + src\n                + getSmallImageScaleParam(infoBean)\n                // add time stamp to override browser image caching\n                + timeParam\n                + \"\\\" class=\\\"\"\n                + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().smallImage()\n                + \"\\\" />\"\n                + \"<div class='\"\n                + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().expiredImageOverlay()\n                + \"' />\");\n            imageTile.setStyleName(I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().imageTile());\n            if (CmsClientStringUtil.checkIsPathOrLinkToSvg(infoBean.getPath())) {\n                imageTile.addStyleName(I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().svg());\n            }\n            m_imageTile = imageTile;\n            m_tooltipHandler = new CmsToolTipHandler(imageTile, generateTooltipHtml(infoBean));\n            m_contentPanel.insert(imageTile, 0);\n        }\n\n    }\n\n    private static Element appendDom(Element parent, String name) {\n\n        Element child = DOM.createElement(name);\n        parent.appendChild(child);\n        return child;\n    }\n\n    /**\n     * Gets the image tile.<p>\n     *\n     * @return the image tile\n     */\n    public ImageTile getImageTile() {\n\n        return m_imageTile;\n    }\n\n    /**\n     * Indicates wther there is a tile view available for this widget.<p>\n     *\n     * @return <code>true</code> if a tiled view is available\n     */\n    public boolean hasTileView() {\n\n        return m_hasTileView;\n    }\n\n    /**\n     * Initializes the title attribute of the subtitle line.<p>\n     *\n     * @param subtitleTitle the value to set\n     */\n    public void setSubtitleTitle(final String subtitleTitle) {\n\n        m_subtitle.setTitle(subtitleTitle);\n        m_subtitle.setTitleGenerator(new I_TitleGenerator() {\n\n            public String getTitle(String originalText) {\n\n                return subtitleTitle;\n            }\n        });\n    }\n\n    /**\n     * @see com.google.gwt.user.client.ui.Composite#onDetach()\n     */\n    @Override\n    protected void onDetach() {\n\n        if (m_tooltipHandler != null) {\n            m_tooltipHandler.clearShowing();\n        }\n        super.onDetach();\n    }\n\n    /**\n     * Generates the HTML for the item tool-tip.<p>\n     *\n     * @param infoBean the item info\n     *\n     * @return the generated HTML\n     */\n    private String generateTooltipHtml(CmsListInfoBean infoBean) {\n\n        Element root = DOM.createElement(\"div\");\n        appendDom(appendDom(root, \"p\"), \"b\").setInnerText(CmsClientStringUtil.shortenString(infoBean.getTitle(), 70));\n        if (infoBean.hasAdditionalInfo()) {\n            for (CmsAdditionalInfoBean additionalInfo : infoBean.getAdditionalInfo()) {\n                appendDom(root, \"p\").setInnerText(\n                    additionalInfo.getName()\n                        + \":\\u00a0\"\n                        + CmsClientStringUtil.shortenString(additionalInfo.getValue(), 45));\n            }\n        }\n        return root.getInnerHTML();\n    }\n\n    /**\n     * Returns the scale parameter for big thumbnail images.<p>\n     *\n     * @return the scale parameter\n     */\n    private String getBigImageScaleParam() {\n\n        return IMAGE_SCALE_PARAM\n            + \",w:\"\n            + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().bigImageWidth()\n            + \",h:\"\n            + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().bigImageHeight();\n    }\n\n    /**\n     * Returns the scale parameter for small thumbnail images.<p>\n     *\n     * @param infoBean the resource info\n     *\n     * @return the scale parameter\n     */\n    private String getSmallImageScaleParam(CmsResultItemBean infoBean) {\n\n        String result = null;\n        if (infoBean.getDimension() != null) {\n            String[] sizes = infoBean.getDimension().split(\"x\");\n            try {\n                int width = Integer.parseInt(sizes[0].trim());\n                int height = Integer.parseInt(sizes[1].trim());\n                // only use the small image dimensions in case of dimensions smaller than the big thumbnail\n                if ((I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().bigImageWidth() > width)\n                    || (I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().bigImageHeight() > height)) {\n                    result = IMAGE_SCALE_PARAM\n                        + \",w:\"\n                        + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().smallImageWidth()\n                        + \",h:\"\n                        + I_CmsLayoutBundle.INSTANCE.galleryResultItemCss().smallImageHeight();\n                }\n            } catch (Exception e) {\n                // failed parsing the dimensions, will use big image\n            }\n        }\n        if (result == null) {\n            result = getBigImageScaleParam();\n        }\n        return result;\n    }\n}\n"], "filenames": ["src-gwt/org/opencms/ade/galleries/client/ui/CmsResultItemWidget.java"], "buggy_code_start_loc": [41], "buggy_code_end_loc": [226], "fixing_code_start_loc": [42], "fixing_code_end_loc": [236], "type": "CWE-79", "message": "A stored cross-site scripting (XSS) vulnerability in alkacon-OpenCMS v11.0.0.0 allows attackers to execute arbitrary web scripts or HTML via a crafted payload injected into the Title field under the Upload Image module.", "other": {"cve": {"id": "CVE-2023-31544", "sourceIdentifier": "cve@mitre.org", "published": "2023-05-16T21:15:09.027", "lastModified": "2023-05-24T20:41:01.150", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A stored cross-site scripting (XSS) vulnerability in alkacon-OpenCMS v11.0.0.0 allows attackers to execute arbitrary web scripts or HTML via a crafted payload injected into the Title field under the Upload Image module."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:alkacon:opencms:11.0:-:*:*:*:*:*:*", "matchCriteriaId": "745FD94C-C000-4E6B-B294-2805AC3616F2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:alkacon:opencms:11.0:beta:*:*:*:*:*:*", "matchCriteriaId": "62CE8688-6DE4-4474-A4C5-407B35C7A981"}, {"vulnerable": true, "criteria": "cpe:2.3:a:alkacon:opencms:11.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "E88DB6B7-D5DC-464C-B8D7-A364448A5B13"}, {"vulnerable": true, "criteria": "cpe:2.3:a:alkacon:opencms:11.0:rc:*:*:*:*:*:*", "matchCriteriaId": "C051CC98-D045-481C-84D3-A86350BCAE42"}]}]}], "references": [{"url": "https://github.com/alkacon/opencms-core/commit/21bfbeaf6b038e2c03bb421ce7f0933dd7a7633e", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/alkacon/opencms-core/issues/652", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/alkacon/opencms-core/commit/21bfbeaf6b038e2c03bb421ce7f0933dd7a7633e"}}