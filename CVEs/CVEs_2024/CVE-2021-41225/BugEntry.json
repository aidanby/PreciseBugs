{"buggy_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/grappler/optimizers/auto_parallel.h\"\n\n#include \"tensorflow/core/framework/attr_value.pb.h\"\n#include \"tensorflow/core/framework/function.pb.h\"\n#include \"tensorflow/core/framework/node_def.pb.h\"\n#include \"tensorflow/core/framework/tensor.pb.h\"\n#include \"tensorflow/core/framework/versions.pb.h\"\n#include \"tensorflow/core/grappler/clusters/cluster.h\"\n#include \"tensorflow/core/grappler/devices.h\"\n#include \"tensorflow/core/grappler/grappler_item.h\"\n#include \"tensorflow/core/grappler/op_types.h\"\n#include \"tensorflow/core/grappler/utils.h\"\n#include \"tensorflow/core/grappler/utils/transitive_fanin.h\"\n#include \"tensorflow/core/lib/strings/strcat.h\"\n\nnamespace tensorflow {\nnamespace grappler {\nconst char kAutoParallelPrefix[] = \"AutoParallel\";\n\nNodeDef* AutoParallel::AddNodeDivConst() {\n  NodeDef* node = graph_.add_node();\n  node->set_name(strings::StrCat(kAutoParallelPrefix, \"-Div-Const\"));\n  node->set_op(\"Const\");\n\n  AttrValue attr_data_type;\n  attr_data_type.set_type(DT_FLOAT);\n  node->mutable_attr()->insert({\"dtype\", attr_data_type});\n\n  AttrValue attr_tensor;\n  auto tensor = attr_tensor.mutable_tensor();\n  tensor->add_float_val(static_cast<float>(num_replicas_));\n  tensor->set_dtype(DT_FLOAT);\n  node->mutable_attr()->insert({\"value\", attr_tensor});\n  return node;\n}\n\nNodeDef* AutoParallel::AddNodeDiv(const string& name, const string& input_a,\n                                  const string& input_b) {\n  NodeDef* node = graph_.add_node();\n  node->set_name(strings::StrCat(kAutoParallelPrefix, \"-Div-\", name));\n  node->set_op(\"RealDiv\");\n  node->add_input(input_a);\n  node->add_input(input_b);\n  AttrValue attr_type;\n  attr_type.set_type(DT_FLOAT);\n  node->mutable_attr()->insert({\"T\", attr_type});\n  return node;\n}\n\nNodeDef* AutoParallel::AddNodeControl(const string& name,\n                                      const std::set<string>& deps,\n                                      GraphDef* graph) {\n  NodeDef* node = graph->add_node();\n  node->set_name(name);\n  node->set_op(\"NoOp\");\n  for (const auto& dep : deps) {\n    node->add_input(strings::StrCat(\"^\", dep));\n  }\n  return node;\n}\n\nStatus AutoParallel::Initialize(const GrapplerItem& item) {\n  num_gpus_ = GetNumAvailableGPUs();\n  LOG(INFO) << \"Number of GPUs: \" << num_gpus_;\n  item_ = &item;\n  graph_ = item.graph;\n  LOG(INFO) << \"Original graph size: \" << graph_.node_size();\n  if (item.fetch.empty()) {\n    return Status(error::INVALID_ARGUMENT, \"No fetch nodes provided.\");\n  }\n\n  if (item.MainVariables().empty()) {\n    return Status(error::INVALID_ARGUMENT, \"No variables provided.\");\n  }\n\n  for (const auto& init : item.init_ops) {\n    VLOG(1) << \"Init node: \" << init;\n  }\n\n  for (const auto& fetch : item.fetch) {\n    VLOG(1) << \"Fetch node: \" << fetch;\n  }\n\n  for (const auto& var : item.MainVariables()) {\n    VLOG(2) << \"Variable: \" << var->name();\n  }\n\n  const std::set<string> apply_gradients_ops = {\"ApplyGradientDescent\",\n                                                \"ApplyProximalGradientDescent\",\n                                                \"ApplyAdadelta\",\n                                                \"ApplyAdagrad\",\n                                                \"ApplyProximalAdagrad\",\n                                                \"ApplyAdagradDA\",\n                                                \"ApplyFtrl\",\n                                                \"ApplyMomentum\",\n                                                \"ApplyAdam\",\n                                                \"ApplyRMSProp\",\n                                                \"ApplyCenteredRMSProp\"};\n  for (int i = 0; i < graph_.node_size(); i++) {\n    all_nodes_.insert(\n        std::make_pair(graph_.node(i).name(), graph_.mutable_node(i)));\n    if (apply_gradients_ops.find(graph_.node(i).op()) !=\n        apply_gradients_ops.end()) {\n      apply_gradients_nodes_.insert(graph_.node(i).name());\n      VLOG(2) << \"Apply gradients node: \" << graph_.node(i).name();\n    }\n  }\n\n  auto div_const_node = AddNodeDivConst();\n  all_nodes_.insert(std::make_pair(div_const_node->name(), div_const_node));\n  std::map<string, int> gradient_pos = {{\"ApplyGradientDescent\", 2},\n                                        {\"ApplyProximalGradientDescent\", 4},\n                                        {\"ApplyAdadelta\", 6},\n                                        {\"ApplyAdagrad\", 3},\n                                        {\"ApplyProximalAdagrad\", 5},\n                                        {\"ApplyAdagradDA\", 3},\n                                        {\"ApplyFtrl\", 3},\n                                        {\"ApplyMomentum\", 3},\n                                        {\"ApplyAdam\", 9},\n                                        {\"ApplyRMSProp\", 7},\n                                        {\"ApplyCenteredRMSProp\", 8}};\n  for (const auto& apply_gradient_node_name : apply_gradients_nodes_) {\n    auto apply_gradients_op = all_nodes_[apply_gradient_node_name]->op();\n    auto apply_gradients_node = all_nodes_[apply_gradient_node_name];\n\n    auto div_node = AddNodeDiv(\n        apply_gradient_node_name,\n        apply_gradients_node->input(gradient_pos[apply_gradients_op]),\n        div_const_node->name());\n    all_nodes_.insert(std::make_pair(div_node->name(), div_node));\n    *apply_gradients_node->mutable_input(gradient_pos[apply_gradients_op]) =\n        div_node->name();\n  }\n  LOG(INFO) << \"Graph size after adding div nodes: \" << all_nodes_.size();\n\n  std::vector<const NodeDef*> train_nodes;\n  TF_RETURN_IF_ERROR(ComputeTransitiveFanin(graph_, item.fetch, &train_nodes));\n  LOG(INFO) << \"Number of training nodes: \" << train_nodes.size();\n\n  const NodeDef* dequeue_node;\n  for (const auto& train_node : train_nodes) {\n    if (IsDequeueOp(*train_node)) {\n      dequeue_node = train_node;\n      break;\n    }\n  }\n\n  std::vector<const NodeDef*> input_nodes;\n  if (dequeue_node) {\n    LOG(INFO) << \"Dequeue node: \" << dequeue_node->name();\n    TF_RETURN_IF_ERROR(ComputeTransitiveFanin(graph_, {dequeue_node->name()},\n                                              {}, &input_nodes));\n  }\n  LOG(INFO) << \"Number of input nodes: \" << input_nodes.size();\n\n  std::set<string> dont_replicate_nodes;\n  for (const auto& variable : item.MainVariables()) {\n    dont_replicate_nodes.insert(variable->name());\n  }\n\n  for (const auto& init : item.init_ops) {\n    dont_replicate_nodes.insert(NodeName(init));\n  }\n\n  // Don't replicate all input nodes, except the dequeue node.\n  for (const auto& input_node : input_nodes) {\n    if (input_node->name() != dequeue_node->name()) {\n      dont_replicate_nodes.insert(input_node->name());\n    }\n  }\n\n  for (const auto& node : train_nodes) {\n    if (dont_replicate_nodes.find(node->name()) == dont_replicate_nodes.end()) {\n      replica_nodes_.insert(node->name());\n    }\n  }\n  LOG(INFO) << \"Number of replica nodes: \" << replica_nodes_.size();\n\n  for (const auto& node : all_nodes_) {\n    if (replica_nodes_.find(node.first) == replica_nodes_.end()) {\n      shared_nodes_.insert(node.first);\n    }\n  }\n  LOG(INFO) << \"Number of shared nodes: \" << shared_nodes_.size();\n  return Status::OK();\n}\n\nbool AutoParallel::NotSharedNode(const string& name) {\n  return shared_nodes_.find(name) == shared_nodes_.end();\n}\n\nvoid AutoParallel::AddSharedNodes(GraphDef* graph) {\n  string prefix = strings::StrCat(kAutoParallelPrefix, \"-Replica-\", 0);\n  for (const auto& node : shared_nodes_) {\n    auto new_node = graph->add_node();\n    *new_node = *all_nodes_[node];\n    for (int i = 0; i < new_node->input_size(); i++) {\n      if (NotSharedNode(NodeName(new_node->input(i)))) {\n        string new_name = AddPrefixToNodeName(new_node->input(i), prefix);\n        *new_node->mutable_input(i) = new_name;\n      }\n    }\n  }\n}\n\nvoid AutoParallel::AddOneReplica(GraphDef* graph, int number) {\n  string prefix = strings::StrCat(kAutoParallelPrefix, \"-Replica-\", number);\n  for (const auto& node : replica_nodes_) {\n    auto new_node = graph->add_node();\n    *new_node = *all_nodes_[node];\n    if (NotSharedNode(new_node->name())) {\n      new_node->set_name(AddPrefixToNodeName(new_node->name(), prefix));\n      if (num_gpus_ > 0) {\n        new_node->set_device(strings::StrCat(\"/gpu:\", number % num_gpus_));\n      }\n      for (int i = 0; i < new_node->input_size(); i++) {\n        if (NotSharedNode(NodeName(new_node->input(i)))) {\n          string new_name = AddPrefixToNodeName(new_node->input(i), prefix);\n          *new_node->mutable_input(i) = new_name;\n        }\n      }\n    }\n  }\n}\n\nvoid AutoParallel::BuildGraph(GraphDef* graph) {\n  AddSharedNodes(graph);\n  for (int i = 0; i < num_replicas_; i++) {\n    AddOneReplica(graph, i);\n  }\n  std::set<string> fetches;\n  for (size_t i = 0; i < item_->fetch.size(); i++) {\n    for (int j = 0; j < num_replicas_; j++) {\n      string prefix = strings::StrCat(kAutoParallelPrefix, \"-Replica-\", j);\n      string fetch = AddPrefixToNodeName(item_->fetch[i], prefix);\n      fetches.insert(fetch);\n    }\n  }\n  string name_control =\n      strings::StrCat(kAutoParallelPrefix, \"-Control-\", \"Fetch\");\n  auto control = AddNodeControl(name_control, fetches, graph);\n\n  for (const auto& fetch : item_->fetch) {\n    AddNodeControl(fetch, {control->name()}, graph);\n  }\n  *graph->mutable_library() = item_->graph.library();\n  *graph->mutable_versions() = item_->graph.versions();\n  LOG(INFO) << \"Parallelized graph size: \" << graph->node_size();\n}\n\nStatus AutoParallel::Optimize(Cluster* cluster, const GrapplerItem& item,\n                              GraphDef* output) {\n  TF_RETURN_IF_ERROR(Initialize(item));\n  BuildGraph(output);\n  return Status::OK();\n}\n\n}  // end namespace grappler\n}  // end namespace tensorflow\n", "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/grappler/optimizers/auto_parallel.h\"\n#include \"tensorflow/cc/ops/standard_ops.h\"\n#include \"tensorflow/core/framework/node_def.pb.h\"\n#include \"tensorflow/core/grappler/grappler_item.h\"\n#include \"tensorflow/core/grappler/utils.h\"\n#include \"tensorflow/core/lib/core/status_test_util.h\"\n#include \"tensorflow/core/platform/test.h\"\n\nnamespace tensorflow {\nnamespace grappler {\nnamespace {\n\nclass AutoParallelTest : public ::testing::Test {};\n\nTEST_F(AutoParallelTest, SimpleParallel) {\n  tensorflow::Scope s = tensorflow::Scope::DisabledShapeInferenceScope();\n  Output constant_a = ops::Const(s.WithOpName(\"constant_a\"), 1.0f, {1});\n  Output constant_b = ops::Const(s.WithOpName(\"constant_b\"), 1, {1});\n  Output var = ops::Variable(s.WithOpName(\"var\"), {1}, DT_FLOAT);\n  Output assign = ops::Assign(s.WithOpName(\"assign\"), {var}, {constant_a});\n  Output identity = ops::Identity(s.WithOpName(\"identity\"), {var});\n  Output fifo_queue = ops::FIFOQueue(s.WithOpName(\"fifo_queue\"), {DT_FLOAT});\n  auto dequeue = ops::QueueDequeueMany(s.WithOpName(\"dequeue\"), {fifo_queue},\n                                       {constant_b}, {DT_FLOAT});\n  Output add = ops::AddN(s.WithOpName(\"add\"), {constant_a, dequeue[0]});\n  Output learning_rate = ops::Const(s.WithOpName(\"learning_rate\"), 0.01f, {1});\n  Output apply_gradient = ops::ApplyGradientDescent(\n      s.WithOpName(\"apply_gradient\"), {var}, {learning_rate}, {add});\n\n  GrapplerItem item;\n  item.init_ops.push_back(\"assign\");\n  item.fetch.push_back(\"apply_gradient\");\n  item.init_ops.push_back(\"assign\");\n  TF_CHECK_OK(s.ToGraphDef(&item.graph));\n\n  AutoParallel parallel(2);\n  GraphDef output;\n  Status status = parallel.Optimize(nullptr, item, &output);\n  TF_EXPECT_OK(status);\n  EXPECT_EQ(21, output.node_size());\n\n  const NodeDef& node_assign = output.node(0);\n  EXPECT_EQ(\"assign\", node_assign.name());\n  EXPECT_EQ(\"AutoParallel-Replica-0/constant_a\", node_assign.input(1));\n\n  const NodeDef& node_constant_b = output.node(1);\n  EXPECT_EQ(\"constant_b\", node_constant_b.name());\n\n  const NodeDef& node_fifo_queue = output.node(2);\n  EXPECT_EQ(\"fifo_queue\", node_fifo_queue.name());\n\n  const NodeDef& node_identity = output.node(3);\n  EXPECT_EQ(\"identity\", node_identity.name());\n  EXPECT_EQ(\"var\", node_identity.input(0));\n\n  const NodeDef& node_var = output.node(4);\n  EXPECT_EQ(\"var\", node_var.name());\n\n  const NodeDef& node_div_const0 = output.node(5);\n  EXPECT_EQ(\"AutoParallel-Replica-0/AutoParallel-Div-Const\",\n            node_div_const0.name());\n\n  const NodeDef& node_div0 = output.node(6);\n  EXPECT_EQ(\"AutoParallel-Replica-0/AutoParallel-Div-apply_gradient\",\n            node_div0.name());\n  const NodeDef& node_add0 = output.node(7);\n  EXPECT_EQ(\"AutoParallel-Replica-0/add\", node_add0.name());\n\n  const NodeDef& node_gradient0 = output.node(8);\n  EXPECT_EQ(\"AutoParallel-Replica-0/apply_gradient\", node_gradient0.name());\n\n  const NodeDef& node_constant_a0 = output.node(9);\n  EXPECT_EQ(\"AutoParallel-Replica-0/constant_a\", node_constant_a0.name());\n\n  const NodeDef& node_dequeue0 = output.node(10);\n  EXPECT_EQ(\"AutoParallel-Replica-0/dequeue\", node_dequeue0.name());\n\n  const NodeDef& node_learning_rate0 = output.node(11);\n  EXPECT_EQ(\"AutoParallel-Replica-0/learning_rate\", node_learning_rate0.name());\n\n  const NodeDef& node_div_const1 = output.node(12);\n  EXPECT_EQ(\"AutoParallel-Replica-1/AutoParallel-Div-Const\",\n            node_div_const1.name());\n\n  const NodeDef& node_div1 = output.node(13);\n  EXPECT_EQ(\"AutoParallel-Replica-1/AutoParallel-Div-apply_gradient\",\n            node_div1.name());\n\n  const NodeDef& node_add1 = output.node(14);\n  EXPECT_EQ(\"AutoParallel-Replica-1/add\", node_add1.name());\n\n  const NodeDef& node_gradient1 = output.node(15);\n  EXPECT_EQ(\"AutoParallel-Replica-1/apply_gradient\", node_gradient1.name());\n\n  const NodeDef& node_constant_a1 = output.node(16);\n  EXPECT_EQ(\"AutoParallel-Replica-1/constant_a\", node_constant_a1.name());\n\n  const NodeDef& node_dequeue1 = output.node(17);\n  EXPECT_EQ(\"AutoParallel-Replica-1/dequeue\", node_dequeue1.name());\n\n  const NodeDef& node_learning_rate1 = output.node(18);\n  EXPECT_EQ(\"AutoParallel-Replica-1/learning_rate\", node_learning_rate1.name());\n\n  const NodeDef& node_fetch = output.node(19);\n  EXPECT_EQ(\"AutoParallel-Control-Fetch\", node_fetch.name());\n  EXPECT_EQ(\"^AutoParallel-Replica-0/apply_gradient\", node_fetch.input(0));\n  EXPECT_EQ(\"^AutoParallel-Replica-1/apply_gradient\", node_fetch.input(1));\n\n  const NodeDef& node_gradient = output.node(20);\n  EXPECT_EQ(\"apply_gradient\", node_gradient.name());\n  EXPECT_EQ(\"^AutoParallel-Control-Fetch\", node_gradient.input(0));\n}\n\n}  // namespace\n}  // namespace grappler\n}  // namespace tensorflow\n"], "fixing_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/grappler/optimizers/auto_parallel.h\"\n\n#include \"tensorflow/core/framework/attr_value.pb.h\"\n#include \"tensorflow/core/framework/function.pb.h\"\n#include \"tensorflow/core/framework/node_def.pb.h\"\n#include \"tensorflow/core/framework/tensor.pb.h\"\n#include \"tensorflow/core/framework/versions.pb.h\"\n#include \"tensorflow/core/grappler/clusters/cluster.h\"\n#include \"tensorflow/core/grappler/devices.h\"\n#include \"tensorflow/core/grappler/grappler_item.h\"\n#include \"tensorflow/core/grappler/op_types.h\"\n#include \"tensorflow/core/grappler/utils.h\"\n#include \"tensorflow/core/grappler/utils/transitive_fanin.h\"\n#include \"tensorflow/core/lib/strings/strcat.h\"\n\nnamespace tensorflow {\nnamespace grappler {\nconst char kAutoParallelPrefix[] = \"AutoParallel\";\n\nNodeDef* AutoParallel::AddNodeDivConst() {\n  NodeDef* node = graph_.add_node();\n  node->set_name(strings::StrCat(kAutoParallelPrefix, \"-Div-Const\"));\n  node->set_op(\"Const\");\n\n  AttrValue attr_data_type;\n  attr_data_type.set_type(DT_FLOAT);\n  node->mutable_attr()->insert({\"dtype\", attr_data_type});\n\n  AttrValue attr_tensor;\n  auto tensor = attr_tensor.mutable_tensor();\n  tensor->add_float_val(static_cast<float>(num_replicas_));\n  tensor->set_dtype(DT_FLOAT);\n  node->mutable_attr()->insert({\"value\", attr_tensor});\n  return node;\n}\n\nNodeDef* AutoParallel::AddNodeDiv(const string& name, const string& input_a,\n                                  const string& input_b) {\n  NodeDef* node = graph_.add_node();\n  node->set_name(strings::StrCat(kAutoParallelPrefix, \"-Div-\", name));\n  node->set_op(\"RealDiv\");\n  node->add_input(input_a);\n  node->add_input(input_b);\n  AttrValue attr_type;\n  attr_type.set_type(DT_FLOAT);\n  node->mutable_attr()->insert({\"T\", attr_type});\n  return node;\n}\n\nNodeDef* AutoParallel::AddNodeControl(const string& name,\n                                      const std::set<string>& deps,\n                                      GraphDef* graph) {\n  NodeDef* node = graph->add_node();\n  node->set_name(name);\n  node->set_op(\"NoOp\");\n  for (const auto& dep : deps) {\n    node->add_input(strings::StrCat(\"^\", dep));\n  }\n  return node;\n}\n\nStatus AutoParallel::Initialize(const GrapplerItem& item) {\n  num_gpus_ = GetNumAvailableGPUs();\n  LOG(INFO) << \"Number of GPUs: \" << num_gpus_;\n  item_ = &item;\n  graph_ = item.graph;\n  LOG(INFO) << \"Original graph size: \" << graph_.node_size();\n  if (item.fetch.empty()) {\n    return Status(error::INVALID_ARGUMENT, \"No fetch nodes provided.\");\n  }\n\n  if (item.MainVariables().empty()) {\n    return Status(error::INVALID_ARGUMENT, \"No variables provided.\");\n  }\n\n  for (const auto& init : item.init_ops) {\n    VLOG(1) << \"Init node: \" << init;\n  }\n\n  for (const auto& fetch : item.fetch) {\n    VLOG(1) << \"Fetch node: \" << fetch;\n  }\n\n  for (const auto& var : item.MainVariables()) {\n    VLOG(2) << \"Variable: \" << var->name();\n  }\n\n  const std::set<string> apply_gradients_ops = {\"ApplyGradientDescent\",\n                                                \"ApplyProximalGradientDescent\",\n                                                \"ApplyAdadelta\",\n                                                \"ApplyAdagrad\",\n                                                \"ApplyProximalAdagrad\",\n                                                \"ApplyAdagradDA\",\n                                                \"ApplyFtrl\",\n                                                \"ApplyMomentum\",\n                                                \"ApplyAdam\",\n                                                \"ApplyRMSProp\",\n                                                \"ApplyCenteredRMSProp\"};\n  for (int i = 0; i < graph_.node_size(); i++) {\n    all_nodes_.insert(\n        std::make_pair(graph_.node(i).name(), graph_.mutable_node(i)));\n    if (apply_gradients_ops.find(graph_.node(i).op()) !=\n        apply_gradients_ops.end()) {\n      apply_gradients_nodes_.insert(graph_.node(i).name());\n      VLOG(2) << \"Apply gradients node: \" << graph_.node(i).name();\n    }\n  }\n\n  auto div_const_node = AddNodeDivConst();\n  all_nodes_.insert(std::make_pair(div_const_node->name(), div_const_node));\n  std::map<string, int> gradient_pos = {{\"ApplyGradientDescent\", 2},\n                                        {\"ApplyProximalGradientDescent\", 4},\n                                        {\"ApplyAdadelta\", 6},\n                                        {\"ApplyAdagrad\", 3},\n                                        {\"ApplyProximalAdagrad\", 5},\n                                        {\"ApplyAdagradDA\", 3},\n                                        {\"ApplyFtrl\", 3},\n                                        {\"ApplyMomentum\", 3},\n                                        {\"ApplyAdam\", 9},\n                                        {\"ApplyRMSProp\", 7},\n                                        {\"ApplyCenteredRMSProp\", 8}};\n  for (const auto& apply_gradient_node_name : apply_gradients_nodes_) {\n    auto apply_gradients_op = all_nodes_[apply_gradient_node_name]->op();\n    auto apply_gradients_node = all_nodes_[apply_gradient_node_name];\n\n    auto div_node = AddNodeDiv(\n        apply_gradient_node_name,\n        apply_gradients_node->input(gradient_pos[apply_gradients_op]),\n        div_const_node->name());\n    all_nodes_.insert(std::make_pair(div_node->name(), div_node));\n    *apply_gradients_node->mutable_input(gradient_pos[apply_gradients_op]) =\n        div_node->name();\n  }\n  LOG(INFO) << \"Graph size after adding div nodes: \" << all_nodes_.size();\n\n  std::vector<const NodeDef*> train_nodes;\n  TF_RETURN_IF_ERROR(ComputeTransitiveFanin(graph_, item.fetch, &train_nodes));\n  LOG(INFO) << \"Number of training nodes: \" << train_nodes.size();\n\n  const NodeDef* dequeue_node = nullptr;\n  for (const auto& train_node : train_nodes) {\n    if (IsDequeueOp(*train_node)) {\n      dequeue_node = train_node;\n      break;\n    }\n  }\n\n  std::vector<const NodeDef*> input_nodes;\n  if (dequeue_node) {\n    LOG(INFO) << \"Dequeue node: \" << dequeue_node->name();\n    TF_RETURN_IF_ERROR(ComputeTransitiveFanin(graph_, {dequeue_node->name()},\n                                              {}, &input_nodes));\n  }\n  LOG(INFO) << \"Number of input nodes: \" << input_nodes.size();\n\n  std::set<string> dont_replicate_nodes;\n  for (const auto& variable : item.MainVariables()) {\n    dont_replicate_nodes.insert(variable->name());\n  }\n\n  for (const auto& init : item.init_ops) {\n    dont_replicate_nodes.insert(NodeName(init));\n  }\n\n  // Don't replicate all input nodes, except the dequeue node.\n  for (const auto& input_node : input_nodes) {\n    if (input_node->name() != dequeue_node->name()) {\n      dont_replicate_nodes.insert(input_node->name());\n    }\n  }\n\n  for (const auto& node : train_nodes) {\n    if (dont_replicate_nodes.find(node->name()) == dont_replicate_nodes.end()) {\n      replica_nodes_.insert(node->name());\n    }\n  }\n  LOG(INFO) << \"Number of replica nodes: \" << replica_nodes_.size();\n\n  for (const auto& node : all_nodes_) {\n    if (replica_nodes_.find(node.first) == replica_nodes_.end()) {\n      shared_nodes_.insert(node.first);\n    }\n  }\n  LOG(INFO) << \"Number of shared nodes: \" << shared_nodes_.size();\n  return Status::OK();\n}\n\nbool AutoParallel::NotSharedNode(const string& name) {\n  return shared_nodes_.find(name) == shared_nodes_.end();\n}\n\nvoid AutoParallel::AddSharedNodes(GraphDef* graph) {\n  string prefix = strings::StrCat(kAutoParallelPrefix, \"-Replica-\", 0);\n  for (const auto& node : shared_nodes_) {\n    auto new_node = graph->add_node();\n    *new_node = *all_nodes_[node];\n    for (int i = 0; i < new_node->input_size(); i++) {\n      if (NotSharedNode(NodeName(new_node->input(i)))) {\n        string new_name = AddPrefixToNodeName(new_node->input(i), prefix);\n        *new_node->mutable_input(i) = new_name;\n      }\n    }\n  }\n}\n\nvoid AutoParallel::AddOneReplica(GraphDef* graph, int number) {\n  string prefix = strings::StrCat(kAutoParallelPrefix, \"-Replica-\", number);\n  for (const auto& node : replica_nodes_) {\n    auto new_node = graph->add_node();\n    *new_node = *all_nodes_[node];\n    if (NotSharedNode(new_node->name())) {\n      new_node->set_name(AddPrefixToNodeName(new_node->name(), prefix));\n      if (num_gpus_ > 0) {\n        new_node->set_device(strings::StrCat(\"/gpu:\", number % num_gpus_));\n      }\n      for (int i = 0; i < new_node->input_size(); i++) {\n        if (NotSharedNode(NodeName(new_node->input(i)))) {\n          string new_name = AddPrefixToNodeName(new_node->input(i), prefix);\n          *new_node->mutable_input(i) = new_name;\n        }\n      }\n    }\n  }\n}\n\nvoid AutoParallel::BuildGraph(GraphDef* graph) {\n  AddSharedNodes(graph);\n  for (int i = 0; i < num_replicas_; i++) {\n    AddOneReplica(graph, i);\n  }\n  std::set<string> fetches;\n  for (size_t i = 0; i < item_->fetch.size(); i++) {\n    for (int j = 0; j < num_replicas_; j++) {\n      string prefix = strings::StrCat(kAutoParallelPrefix, \"-Replica-\", j);\n      string fetch = AddPrefixToNodeName(item_->fetch[i], prefix);\n      fetches.insert(fetch);\n    }\n  }\n  string name_control =\n      strings::StrCat(kAutoParallelPrefix, \"-Control-\", \"Fetch\");\n  auto control = AddNodeControl(name_control, fetches, graph);\n\n  for (const auto& fetch : item_->fetch) {\n    AddNodeControl(fetch, {control->name()}, graph);\n  }\n  *graph->mutable_library() = item_->graph.library();\n  *graph->mutable_versions() = item_->graph.versions();\n  LOG(INFO) << \"Parallelized graph size: \" << graph->node_size();\n}\n\nStatus AutoParallel::Optimize(Cluster* cluster, const GrapplerItem& item,\n                              GraphDef* output) {\n  TF_RETURN_IF_ERROR(Initialize(item));\n  BuildGraph(output);\n  return Status::OK();\n}\n\n}  // end namespace grappler\n}  // end namespace tensorflow\n", "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/grappler/optimizers/auto_parallel.h\"\n#include \"tensorflow/cc/ops/standard_ops.h\"\n#include \"tensorflow/core/framework/node_def.pb.h\"\n#include \"tensorflow/core/grappler/grappler_item.h\"\n#include \"tensorflow/core/grappler/utils.h\"\n#include \"tensorflow/core/lib/core/status_test_util.h\"\n#include \"tensorflow/core/platform/test.h\"\n\nnamespace tensorflow {\nnamespace grappler {\nnamespace {\n\nclass AutoParallelTest : public ::testing::Test {};\n\nTEST_F(AutoParallelTest, SimpleParallel) {\n  tensorflow::Scope s = tensorflow::Scope::DisabledShapeInferenceScope();\n  Output constant_a = ops::Const(s.WithOpName(\"constant_a\"), 1.0f, {1});\n  Output constant_b = ops::Const(s.WithOpName(\"constant_b\"), 1, {1});\n  Output var = ops::Variable(s.WithOpName(\"var\"), {1}, DT_FLOAT);\n  Output assign = ops::Assign(s.WithOpName(\"assign\"), {var}, {constant_a});\n  Output identity = ops::Identity(s.WithOpName(\"identity\"), {var});\n  Output fifo_queue = ops::FIFOQueue(s.WithOpName(\"fifo_queue\"), {DT_FLOAT});\n  auto dequeue = ops::QueueDequeueMany(s.WithOpName(\"dequeue\"), {fifo_queue},\n                                       {constant_b}, {DT_FLOAT});\n  Output add = ops::AddN(s.WithOpName(\"add\"), {constant_a, dequeue[0]});\n  Output learning_rate = ops::Const(s.WithOpName(\"learning_rate\"), 0.01f, {1});\n  Output apply_gradient = ops::ApplyGradientDescent(\n      s.WithOpName(\"apply_gradient\"), {var}, {learning_rate}, {add});\n\n  GrapplerItem item;\n  item.init_ops.push_back(\"assign\");\n  item.fetch.push_back(\"apply_gradient\");\n  item.init_ops.push_back(\"assign\");\n  TF_CHECK_OK(s.ToGraphDef(&item.graph));\n\n  AutoParallel parallel(2);\n  GraphDef output;\n  Status status = parallel.Optimize(nullptr, item, &output);\n  TF_EXPECT_OK(status);\n  EXPECT_EQ(21, output.node_size());\n\n  const NodeDef& node_assign = output.node(0);\n  EXPECT_EQ(\"assign\", node_assign.name());\n  EXPECT_EQ(\"AutoParallel-Replica-0/constant_a\", node_assign.input(1));\n\n  const NodeDef& node_constant_b = output.node(1);\n  EXPECT_EQ(\"constant_b\", node_constant_b.name());\n\n  const NodeDef& node_fifo_queue = output.node(2);\n  EXPECT_EQ(\"fifo_queue\", node_fifo_queue.name());\n\n  const NodeDef& node_identity = output.node(3);\n  EXPECT_EQ(\"identity\", node_identity.name());\n  EXPECT_EQ(\"var\", node_identity.input(0));\n\n  const NodeDef& node_var = output.node(4);\n  EXPECT_EQ(\"var\", node_var.name());\n\n  const NodeDef& node_div_const0 = output.node(5);\n  EXPECT_EQ(\"AutoParallel-Replica-0/AutoParallel-Div-Const\",\n            node_div_const0.name());\n\n  const NodeDef& node_div0 = output.node(6);\n  EXPECT_EQ(\"AutoParallel-Replica-0/AutoParallel-Div-apply_gradient\",\n            node_div0.name());\n  const NodeDef& node_add0 = output.node(7);\n  EXPECT_EQ(\"AutoParallel-Replica-0/add\", node_add0.name());\n\n  const NodeDef& node_gradient0 = output.node(8);\n  EXPECT_EQ(\"AutoParallel-Replica-0/apply_gradient\", node_gradient0.name());\n\n  const NodeDef& node_constant_a0 = output.node(9);\n  EXPECT_EQ(\"AutoParallel-Replica-0/constant_a\", node_constant_a0.name());\n\n  const NodeDef& node_dequeue0 = output.node(10);\n  EXPECT_EQ(\"AutoParallel-Replica-0/dequeue\", node_dequeue0.name());\n\n  const NodeDef& node_learning_rate0 = output.node(11);\n  EXPECT_EQ(\"AutoParallel-Replica-0/learning_rate\", node_learning_rate0.name());\n\n  const NodeDef& node_div_const1 = output.node(12);\n  EXPECT_EQ(\"AutoParallel-Replica-1/AutoParallel-Div-Const\",\n            node_div_const1.name());\n\n  const NodeDef& node_div1 = output.node(13);\n  EXPECT_EQ(\"AutoParallel-Replica-1/AutoParallel-Div-apply_gradient\",\n            node_div1.name());\n\n  const NodeDef& node_add1 = output.node(14);\n  EXPECT_EQ(\"AutoParallel-Replica-1/add\", node_add1.name());\n\n  const NodeDef& node_gradient1 = output.node(15);\n  EXPECT_EQ(\"AutoParallel-Replica-1/apply_gradient\", node_gradient1.name());\n\n  const NodeDef& node_constant_a1 = output.node(16);\n  EXPECT_EQ(\"AutoParallel-Replica-1/constant_a\", node_constant_a1.name());\n\n  const NodeDef& node_dequeue1 = output.node(17);\n  EXPECT_EQ(\"AutoParallel-Replica-1/dequeue\", node_dequeue1.name());\n\n  const NodeDef& node_learning_rate1 = output.node(18);\n  EXPECT_EQ(\"AutoParallel-Replica-1/learning_rate\", node_learning_rate1.name());\n\n  const NodeDef& node_fetch = output.node(19);\n  EXPECT_EQ(\"AutoParallel-Control-Fetch\", node_fetch.name());\n  EXPECT_EQ(\"^AutoParallel-Replica-0/apply_gradient\", node_fetch.input(0));\n  EXPECT_EQ(\"^AutoParallel-Replica-1/apply_gradient\", node_fetch.input(1));\n\n  const NodeDef& node_gradient = output.node(20);\n  EXPECT_EQ(\"apply_gradient\", node_gradient.name());\n  EXPECT_EQ(\"^AutoParallel-Control-Fetch\", node_gradient.input(0));\n}\n\nTEST_F(AutoParallelTest, SimpleParallelNoDequeue) {\n  tensorflow::Scope s = tensorflow::Scope::DisabledShapeInferenceScope();\n  Output constant_a = ops::Const(s.WithOpName(\"constant_a\"), 1.0f, {1});\n  Output constant_c = ops::Const(s.WithOpName(\"constant_c\"), 1.0f, {1});\n  Output constant_b = ops::Const(s.WithOpName(\"constant_b\"), 1, {1});\n  Output var = ops::Variable(s.WithOpName(\"var\"), {1}, DT_FLOAT);\n  Output assign = ops::Assign(s.WithOpName(\"assign\"), {var}, {constant_a});\n  Output add = ops::AddN(s.WithOpName(\"add\"), {constant_a, constant_c});\n  Output learning_rate = ops::Const(s.WithOpName(\"learning_rate\"), 0.01f, {1});\n  Output apply_gradient = ops::ApplyGradientDescent(\n      s.WithOpName(\"apply_gradient\"), {var}, {learning_rate}, {add});\n\n  GrapplerItem item;\n  item.init_ops.push_back(\"assign\");\n  item.fetch.push_back(\"apply_gradient\");\n  item.init_ops.push_back(\"assign\");\n  TF_CHECK_OK(s.ToGraphDef(&item.graph));\n\n  AutoParallel parallel(2);\n  GraphDef output;\n  Status status = parallel.Optimize(nullptr, item, &output);\n  TF_EXPECT_OK(status);\n}\n\n}  // namespace\n}  // namespace grappler\n}  // namespace tensorflow\n"], "filenames": ["tensorflow/core/grappler/optimizers/auto_parallel.cc", "tensorflow/core/grappler/optimizers/auto_parallel_test.cc"], "buggy_code_start_loc": [155, 128], "buggy_code_end_loc": [156, 128], "fixing_code_start_loc": [155, 129], "fixing_code_end_loc": [156, 153], "type": "CWE-908", "message": "TensorFlow is an open source platform for machine learning. In affected versions TensorFlow's Grappler optimizer has a use of unitialized variable. If the `train_nodes` vector (obtained from the saved model that gets optimized) does not contain a `Dequeue` node, then `dequeue_node` is left unitialized. The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2021-41225", "sourceIdentifier": "security-advisories@github.com", "published": "2021-11-05T23:15:08.543", "lastModified": "2021-11-10T16:55:42.707", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an open source platform for machine learning. In affected versions TensorFlow's Grappler optimizer has a use of unitialized variable. If the `train_nodes` vector (obtained from the saved model that gets optimized) does not contain a `Dequeue` node, then `dequeue_node` is left unitialized. The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto para el aprendizaje autom\u00e1tico. En las versiones afectadas el optimizador Grappler de TensorFlow presenta un uso de variable unitializada. Si el vector \"train_nodes\" (obtenido del modelo guardado que se optimiza) no contiene un nodo \"Dequeue\", entonces \"dequeue_node\" queda sin inicializar. La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.7.0. Tambi\u00e9n ser\u00e1 incluida este commit en TensorFlow versi\u00f3n 2.6.1, TensorFlow versi\u00f3n 2.5.2, y TensorFlow versi\u00f3n 2.4.4, ya que estos tambi\u00e9n est\u00e1n afectados y todav\u00eda est\u00e1n en el rango admitido"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-908"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.4", "matchCriteriaId": "0E596567-6F67-4880-8EC4-CB262BF02E0D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.5.0", "versionEndExcluding": "2.5.2", "matchCriteriaId": "035CDF63-1548-4FB4-B8A9-B8D328FAF910"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.6.0", "versionEndExcluding": "2.6.1", "matchCriteriaId": "5D68D8D1-DB27-4395-9D3D-2BED901B852C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.7.0:rc0:*:*:*:*:*:*", "matchCriteriaId": "A58EDA5C-66D6-46F1-962E-60AFB7C784A7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.7.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "89522760-C2DF-400D-9624-626D8F160CBA"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/68867bf01239d9e1048f98cbad185bf4761bedd3", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7r94-xv9v-63jw", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/68867bf01239d9e1048f98cbad185bf4761bedd3"}}