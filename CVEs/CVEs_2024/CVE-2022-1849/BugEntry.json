{"buggy_code": ["<?php\n\n/*\n * This file is part of the FileGator package.\n *\n * (c) Milos Stojanovic <alcalbg@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE file\n */\n\nnamespace Filegator\\Services\\Auth\\Adapters;\n\nuse Filegator\\Services\\Auth\\AuthInterface;\nuse Filegator\\Services\\Auth\\User;\nuse Filegator\\Services\\Auth\\UsersCollection;\nuse Filegator\\Services\\Service;\nuse Filegator\\Services\\Session\\SessionStorageInterface as Session;\nuse Filegator\\Utils\\PasswordHash;\n\nclass JsonFile implements Service, AuthInterface\n{\n    use PasswordHash;\n\n    const SESSION_KEY = 'json_auth';\n    const SESSION_HASH = 'json_auth_hash';\n\n    const GUEST_USERNAME = 'guest';\n\n    protected $session;\n\n    protected $file;\n\n    public function __construct(Session $session)\n    {\n        $this->session = $session;\n    }\n\n    public function init(array $config = [])\n    {\n        if (! file_exists($config['file'])) {\n            copy($config['file'].'.blank', $config['file']);\n        }\n\n        $this->file = $config['file'];\n    }\n\n    public function user(): ?User\n    {\n        if (! $this->session) return null;\n\n        $user = $this->session->get(self::SESSION_KEY, null);\n        $hash = $this->session->get(self::SESSION_HASH, null);\n\n        if ($user) {\n            foreach ($this->getUsers() as $u) {\n                if ($u['username'] == $user->getUsername() && $hash == $u['password']) {\n                    return $user;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    public function authenticate($username, $password): bool\n    {\n        $all_users = $this->getUsers();\n\n        foreach ($all_users as &$u) {\n            if ($u['username'] == $username && $this->verifyPassword($password, $u['password'])) {\n                $user = $this->mapToUserObject($u);\n                $this->store($user);\n                $this->session->set(self::SESSION_HASH, $u['password']);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public function forget()\n    {\n        return $this->session->invalidate();\n    }\n\n    public function store(User $user)\n    {\n        return $this->session->set(self::SESSION_KEY, $user);\n    }\n\n    public function update($username, User $user, $password = ''): User\n    {\n        $all_users = $this->getUsers();\n\n        if ($username != $user->getUsername() && $this->find($user->getUsername())) {\n            throw new \\Exception('Username already taken');\n        }\n\n        foreach ($all_users as &$u) {\n            if ($u['username'] == $username) {\n                $u['username'] = $user->getUsername();\n                $u['name'] = $user->getName();\n                $u['role'] = $user->getRole();\n                $u['homedir'] = $user->getHomeDir();\n                $u['permissions'] = $user->getPermissions(true);\n\n                if ($password) {\n                    $u['password'] = $this->hashPassword($password);\n                }\n\n                $this->saveUsers($all_users);\n\n                return $this->find($user->getUsername()) ?: $user;\n            }\n        }\n\n        throw new \\Exception('User not found');\n    }\n\n    public function add(User $user, $password): User\n    {\n        if ($this->find($user->getUsername())) {\n            throw new \\Exception('Username already taken');\n        }\n\n        $all_users = $this->getUsers();\n\n        $all_users[] = [\n            'username' => $user->getUsername(),\n            'name' => $user->getName(),\n            'role' => $user->getRole(),\n            'homedir' => $user->getHomeDir(),\n            'permissions' => $user->getPermissions(true),\n            'password' => $this->hashPassword($password),\n        ];\n\n        $this->saveUsers($all_users);\n\n        return $this->find($user->getUsername()) ?: $user;\n    }\n\n    public function delete(User $user)\n    {\n        $all_users = $this->getUsers();\n\n        foreach ($all_users as $key => $u) {\n            if ($u['username'] == $user->getUsername()) {\n                unset($all_users[$key]);\n                $this->saveUsers($all_users);\n\n                return true;\n            }\n        }\n\n        throw new \\Exception('User not found');\n    }\n\n    public function find($username): ?User\n    {\n        foreach ($this->getUsers() as $user) {\n            if ($user['username'] == $username) {\n                return $this->mapToUserObject($user);\n            }\n        }\n\n        return null;\n    }\n\n    public function getGuest(): User\n    {\n        $guest = $this->find(self::GUEST_USERNAME);\n\n        if (! $guest || ! $guest->isGuest()) {\n            throw new \\Exception('No guest account');\n        }\n\n        return $guest;\n    }\n\n    public function allUsers(): UsersCollection\n    {\n        $users = new UsersCollection();\n\n        foreach ($this->getUsers() as $user) {\n            $users->addUser($this->mapToUserObject($user));\n        }\n\n        return $users;\n    }\n\n    protected function mapToUserObject(array $user): User\n    {\n        $new = new User();\n\n        $new->setUsername($user['username']);\n        $new->setName($user['name']);\n        $new->setRole($user['role']);\n        $new->setHomedir($user['homedir']);\n        $new->setPermissions($user['permissions'], true);\n\n        return $new;\n    }\n\n    protected function getUsers(): array\n    {\n        $users = json_decode((string) file_get_contents($this->file), true);\n\n        return is_array($users) ? $users : [];\n    }\n\n    protected function saveUsers(array $users)\n    {\n        return file_put_contents($this->file, json_encode($users), LOCK_EX);\n    }\n}\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of the FileGator package.\n *\n * (c) Milos Stojanovic <alcalbg@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE file\n */\n\nnamespace Filegator\\Services\\Auth\\Adapters;\n\nuse Filegator\\Services\\Auth\\AuthInterface;\nuse Filegator\\Services\\Auth\\User;\nuse Filegator\\Services\\Auth\\UsersCollection;\nuse Filegator\\Services\\Service;\nuse Filegator\\Services\\Session\\SessionStorageInterface as Session;\nuse Filegator\\Utils\\PasswordHash;\n\nclass JsonFile implements Service, AuthInterface\n{\n    use PasswordHash;\n\n    const SESSION_KEY = 'json_auth';\n    const SESSION_HASH = 'json_auth_hash';\n\n    const GUEST_USERNAME = 'guest';\n\n    protected $session;\n\n    protected $file;\n\n    public function __construct(Session $session)\n    {\n        $this->session = $session;\n    }\n\n    public function init(array $config = [])\n    {\n        if (! file_exists($config['file'])) {\n            copy($config['file'].'.blank', $config['file']);\n        }\n\n        $this->file = $config['file'];\n    }\n\n    public function user(): ?User\n    {\n        if (! $this->session) return null;\n\n        $user = $this->session->get(self::SESSION_KEY, null);\n        $hash = $this->session->get(self::SESSION_HASH, null);\n\n        if ($user) {\n            foreach ($this->getUsers() as $u) {\n                if ($u['username'] == $user->getUsername() && $hash == $u['password'].$u['permissions'].$u['homedir'].$u['role']) {\n                    return $user;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    public function authenticate($username, $password): bool\n    {\n        $all_users = $this->getUsers();\n\n        foreach ($all_users as &$u) {\n            if ($u['username'] == $username && $this->verifyPassword($password, $u['password'])) {\n                $user = $this->mapToUserObject($u);\n                $this->store($user);\n                $this->session->set(self::SESSION_HASH, $u['password'].$u['permissions'].$u['homedir'].$u['role']);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public function forget()\n    {\n        return $this->session->invalidate();\n    }\n\n    public function store(User $user)\n    {\n        return $this->session->set(self::SESSION_KEY, $user);\n    }\n\n    public function update($username, User $user, $password = ''): User\n    {\n        $all_users = $this->getUsers();\n\n        if ($username != $user->getUsername() && $this->find($user->getUsername())) {\n            throw new \\Exception('Username already taken');\n        }\n\n        foreach ($all_users as &$u) {\n            if ($u['username'] == $username) {\n                $u['username'] = $user->getUsername();\n                $u['name'] = $user->getName();\n                $u['role'] = $user->getRole();\n                $u['homedir'] = $user->getHomeDir();\n                $u['permissions'] = $user->getPermissions(true);\n\n                if ($password) {\n                    $u['password'] = $this->hashPassword($password);\n                }\n\n                $this->saveUsers($all_users);\n\n                return $this->find($user->getUsername()) ?: $user;\n            }\n        }\n\n        throw new \\Exception('User not found');\n    }\n\n    public function add(User $user, $password): User\n    {\n        if ($this->find($user->getUsername())) {\n            throw new \\Exception('Username already taken');\n        }\n\n        $all_users = $this->getUsers();\n\n        $all_users[] = [\n            'username' => $user->getUsername(),\n            'name' => $user->getName(),\n            'role' => $user->getRole(),\n            'homedir' => $user->getHomeDir(),\n            'permissions' => $user->getPermissions(true),\n            'password' => $this->hashPassword($password),\n        ];\n\n        $this->saveUsers($all_users);\n\n        return $this->find($user->getUsername()) ?: $user;\n    }\n\n    public function delete(User $user)\n    {\n        $all_users = $this->getUsers();\n\n        foreach ($all_users as $key => $u) {\n            if ($u['username'] == $user->getUsername()) {\n                unset($all_users[$key]);\n                $this->saveUsers($all_users);\n\n                return true;\n            }\n        }\n\n        throw new \\Exception('User not found');\n    }\n\n    public function find($username): ?User\n    {\n        foreach ($this->getUsers() as $user) {\n            if ($user['username'] == $username) {\n                return $this->mapToUserObject($user);\n            }\n        }\n\n        return null;\n    }\n\n    public function getGuest(): User\n    {\n        $guest = $this->find(self::GUEST_USERNAME);\n\n        if (! $guest || ! $guest->isGuest()) {\n            throw new \\Exception('No guest account');\n        }\n\n        return $guest;\n    }\n\n    public function allUsers(): UsersCollection\n    {\n        $users = new UsersCollection();\n\n        foreach ($this->getUsers() as $user) {\n            $users->addUser($this->mapToUserObject($user));\n        }\n\n        return $users;\n    }\n\n    protected function mapToUserObject(array $user): User\n    {\n        $new = new User();\n\n        $new->setUsername($user['username']);\n        $new->setName($user['name']);\n        $new->setRole($user['role']);\n        $new->setHomedir($user['homedir']);\n        $new->setPermissions($user['permissions'], true);\n\n        return $new;\n    }\n\n    protected function getUsers(): array\n    {\n        $users = json_decode((string) file_get_contents($this->file), true);\n\n        return is_array($users) ? $users : [];\n    }\n\n    protected function saveUsers(array $users)\n    {\n        return file_put_contents($this->file, json_encode($users), LOCK_EX);\n    }\n}\n"], "filenames": ["backend/Services/Auth/Adapters/JsonFile.php"], "buggy_code_start_loc": [56], "buggy_code_end_loc": [74], "fixing_code_start_loc": [56], "fixing_code_end_loc": [74], "type": "CWE-384", "message": "Session Fixation in GitHub repository filegator/filegator prior to 7.8.0.", "other": {"cve": {"id": "CVE-2022-1849", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-24T16:15:07.813", "lastModified": "2022-06-03T16:15:12.823", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Session Fixation in GitHub repository filegator/filegator prior to 7.8.0."}, {"lang": "es", "value": "Una Fijaci\u00f3n de la Sesi\u00f3n en el repositorio GitHub filegator/filegator versiones anteriores a 7.8.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-384"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-384"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:filegator:filegator:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.8.0", "matchCriteriaId": "EB23DC73-0D86-48D4-8A73-5DC6B779F446"}]}]}], "references": [{"url": "https://github.com/filegator/filegator/commit/fcd3995f64f5dfc6a4c2c059cc22a2fef1e81225", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/881f8f36-d5c8-470d-8261-f109e6d5db4b", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/filegator/filegator/commit/fcd3995f64f5dfc6a4c2c059cc22a2fef1e81225"}}