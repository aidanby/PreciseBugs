{"buggy_code": ["<div class=\"bt_navbar\">\n  <div class=\"bt_navbar bt_notification\"><a href=\"@notification_url@\" class=\"bt_navbar\" title=\"@notification_title@\">@notification_label@</a></div>\n  <multiple name=\"links\"><a href=\"@links.url@\" class=\"bt_navbar\">@links.name@</a>&nbsp;|&nbsp;</multiple>\n  <form action=\"@form_action_url@\" method=\"get\" name=\"navbar_form_@bt_nav_bar_count@\">\n    <input name=\"bug_number\" type=\"text\" size=\"5\" class=\"bt_navbar\" value=\"@pretty_names.Bug@ #\" \n      onFocus=\"javascript:this.value='';\">\n      <input type=\"submit\" value=\"Go\" class=\"bt_navbar_btn\">\n  </form>\n  <if @search_mounted_p@>\n      <form action=\"@form_search_url@\" method=\"get\" name=\"search\">\n        <input name=\"q\" type=\"text\" size=\"15\" class=\"bt_navbar\" value=\"#bug-tracker.Search#\" \n          onFocus=\"javascript:this.value='';\">\n        <input name=\"search_package_id\" type=\"hidden\" value=\"@package_id@\">\n          <input type=\"submit\" value=\"#bug-tracker.Search#\" class=\"bt_navbar_btn\">\n      </form>\n  </if>\n\n</div>\n", "<contract>\n  Display one bug\n\n  @author Jeff Davis davis@xarg.net\n  @cvs-id $Id$\n\n  @param bug array of values as returned from bug_tracker::bug::get\n  @param comments html chunk of comments\n  @param style string (either \"feed\" or \"display\" -- default is display)\n  @param base_url url to the package (ok for this to be empty if in the package, trailing / expected)\n</contract>\n<h1>Bug @bug.bug_number_display@ - @bug.summary@ [@bug.component_name@]</h1>\n<p>State: @bug.pretty_state@</p>\n<if @bug.found_in_version_name@ not nil><p>Found in version: @bug.found_in_version_name@</p></if>\n<if @bug.fix_for_version_name@ not nil><p>Fix for version: @bug.fix_for_version_name@</p></if>\n<if @bug.fixed_in_version_name@ not nil><p>Fixed in version: @bug.fixed_in_version_name@</p></if>\n\n<multiple name=\"roles\"><p>@roles.role_pretty@: <a href=\"@roles.user_url@\">@roles.user_name@</a></p></multiple>\n\n@comments;noquote@", "ad_page_contract {\n    Shows one bug.\n\n    @author Lars Pind (lars@pinds.com)\n    @creation-date 2002-03-20\n    @cvs-id $Id$\n} [bug_tracker::get_page_variables {\n    bug_number:integer,notnull\n    {user_agent_p:boolean,notnull false}\n    {show_patch_status:word,notnull open}\n}] -validate {\n    check_show_patch_status -requires show_patch_status {\n\tif {$show_patch_status ni {\"open\" \"all\"}} {\n\t    ad_complain \"invalid value for show_patch_status\"\n\t}\n    }\n}\n\n#####\n#\n# Setup\n#\n#####\n\nset return_url [export_vars -base [ad_conn url] [bug_tracker::get_export_variables { bug_number }]]\n\nset project_name [bug_tracker::conn project_name]\nset package_id [ad_conn package_id]\nset package_key [ad_conn package_key]\n\nset user_id [ad_conn user_id]\n\nset bug_name [bug_tracker::conn Bug]\nset page_title [_ bug-tracker.Bug_Title]\n\nset context [list $page_title]\n\n# Is this project using multiple versions?\nset versions_p [bug_tracker::versions_p]\n\n# Paches enabled for this project?\nset patches_p [bug_tracker::patches_p]\n\n# Does project allow upload of related files?\nset related_files_p [bug_tracker::related_files_p]\n\n#####\n#\n# Get basic info\n#\n#####\n\n# Get the bug_id\nif { ![db_0or1row permission_info {} -column_array bug] } {\n    ad_return_complaint 1 [_ bug-tracker.Bug_not_found]\n    ad_script_abort\n}\n\nset case_id [workflow::case::get_id \\\n        -object_id $bug(bug_id) \\\n        -workflow_short_name [bug_tracker::bug::workflow_short_name]]\n\npermission::require_permission -object_id $bug(bug_id) -privilege read\n\nset workflow_id [bug_tracker::bug::get_instance_workflow_id ]\n\nset admin_p [permission::permission_p -object_id $bug(bug_id) -party_id $user_id -privilege admin]\n\n#####\n#\n# Action\n#\n#####\n\nset enabled_action_id [form get_action bug]\n\n# Registration required for all actions\nset action_id \"\"\nif { $enabled_action_id ne \"\" } {\n    ns_log Notice \"bug.tcl: enabled_action '$enabled_action_id'\"\n    auth::require_login\n    workflow::case::enabled_action_get -enabled_action_id $enabled_action_id -array enabled_action    \n    set action_id $enabled_action(action_id)\n}\n\n\n# Check permissions\nif { ![workflow::case::action::available_p -enabled_action_id $enabled_action_id] } {\n    bug_tracker::security_violation -user_id $user_id -bug_id $bug(bug_id) -action_id $action_id\n}\n\n\nns_log Notice \"actions: enabled_action_id: '${enabled_action_id}'\"\n\n# Buttons\nset actions [list]\nif { $enabled_action_id eq \"\" } {\n\n    #ns_log Notice \"actions: case_id: $case_id\"\n    #ns_log Notice \"actions: case_id: $case_id get_enabled_actions: [workflow::case::get_available_enabled_action_ids -case_id $case_id]\"\n\n    foreach available_enabled_action_id [workflow::case::get_available_enabled_action_ids -case_id $case_id] {\n        # TODO: avoid the enabled_action_get query by caching it, or caching only the enabled_action_id -> action_id lookup?\n        workflow::case::enabled_action_get -enabled_action_id $available_enabled_action_id -array enabled_action\n        workflow::action::get -action_id $enabled_action(action_id) -array available_action\n        lappend actions [list \"     [lang::util::localize $available_action(pretty_name)]     \" $available_enabled_action_id]\n    }\n}\n\n#####\n#\n# Create the form\n#\n#####\n\n# Set the variable that we need for the elements below\n\n\n# set patch label\n# JCD: The string map below is to work around a \"feature\" in the form generation that \n# lets you use +var+ for a var to eval on the second round.  \n# cf http://openacs.org/bugtracker/openacs/bug?bug%5fnumber=1099\n\nif { $enabled_action_id eq \"\" } {\n    set patch_href1 [export_vars -base [ad_conn url] -entire_form -override { { show_patch_status all } }]\n    set patch_href2 [export_vars -base [ad_conn url] -entire_form -override { { show_patch_status open } }]\n    set patch_label [ad_decode $show_patch_status \\\n                         \"open\" [subst {[_ bug-tracker.Open] [bug_tracker::conn Patches] (<a href=\"[ns_quotehtml $patch_href1]\">[_ bug-tracker.show_all]</a>)}] \\\n                         \"all\"  [subst {[_ bug-tracker.All]  [bug_tracker::conn Patches] (<a href=\"[ns_quotehtml $patch_href2]\">[_ bug-tracker.show_only_open]</a>)}] \\\n                         [bug_tracker::conn Patches]]\n} else {\n    set patch_label [ad_decode $show_patch_status \\\n                         \"open\" \"[_ bug-tracker.Open] [bug_tracker::conn Patches]\" \\\n                         \"all\"  \"[_ bug-tracker.All] [bug_tracker::conn Patches]\" \\\n                         [bug_tracker::conn Patches]]\n}\n\nad_form -name bug -cancel_url $return_url -mode display -has_edit 1 -actions $actions -form  {\n    {bug_number_display:text(inform)\n\t{label \"[bug_tracker::conn Bug] \\#\"}\n        {mode display}\n    }\n    {component_id:integer(select),optional\n\t{label \"[bug_tracker::conn Component]\"}\n\t{options {[bug_tracker::components_get_options]}}\n\t{mode display}\n    }\n    {summary:text(text)\n\t{label \"[_ bug-tracker.Summary]\"}\n\t{before_html \"<b>\"}\n\t{after_html \"</b>\"}\n\t{mode display}\n\t{html {size 50}}\n    }\n}\n\n\nad_form -extend -name bug -form {\n    {pretty_state:text(inform)\n\t{label \"[_ bug-tracker.Status]\"}\n\t{before_html \"<b>\"}\n\t{after_html  \"</b>\"}\n\t{mode display}\n    }\n    {resolution:text(select),optional\n\t{label \"[_ bug-tracker.Resolution]\"}\n\t{options {[bug_tracker::resolution_get_options]}}\n\t{mode display}\n    }\n}\n\nforeach {category_id category_name} [bug_tracker::category_types] {\n    ad_form -extend -name bug -form [list \\\n        [list \"${category_id}:integer(select)\" \\\n            [list label $category_name] \\\n            [list options [bug_tracker::category_get_options -parent_id $category_id]] \\\n            [list mode display] \\\n        ] \\\n    ]\n}\n\n\nad_form -extend -name bug -form {\n    {found_in_version:integer(select),optional\n\t{label \"[_ bug-tracker.Found_in_Version]\"}\n\t{options {[bug_tracker::version_get_options -include_unknown]}}\n\t{mode display}\n    }\n}\n\nworkflow::case::role::add_assignee_widgets -case_id $case_id -form_name bug\n\n# More fixed form elements\n\nad_form -extend -name bug -form {\n    {related_files:text(inform)\n\t{label \"[_ bug-tracker.Related_Files]\"}\n\t{mode display}\n    }\n    {patches:text(inform)\n\t{label $patch_label}\n\t{mode display}\n    }\n    {user_agent:text(inform)\n\t{label \"[_ bug-tracker.User_Agent]\"}\n\t{mode display}\n    }\n    {fix_for_version:integer(select),optional\n\t{label \"[_ bug-tracker.Fix_for_Version]\"}\n\t{options {[bug_tracker::version_get_options -include_undecided]}}\n\t{mode display}\n    }\n    {fixed_in_version:integer(select),optional\n\t{label \"[_ bug-tracker.Fixed_in_Version]\"}\n\t{options {[bug_tracker::version_get_options -include_undecided]}}\n\t{mode display}\n    }\n    {description:richtext(richtext),optional\n\t{label \"[_ bug-tracker.Description]\"} \n\t{html {cols 60 rows 13}} \n    }\n    {return_url:text(hidden) \n\t{value $return_url}\n    }\n    {bug_number:key}\n    {entry_id:integer(hidden),optional}\n}\n\n# TODO: Export filters\nset filters [list]\nforeach name [bug_tracker::get_export_variables] { \n    if { [info exists $name] } {\n        lappend filters [list \"${name}:text(hidden),optional\" [list value [set $name]]]\n    }\n}\nad_form -extend -name bug -form $filters\n\n# Set editable fields\nif { $enabled_action_id ne \"\" } {   \n    foreach field [workflow::action::get_element -action_id $action_id -element edit_fields] { \n\telement set_properties bug $field -mode edit \n    }\n    \n    # LARS: Hack! How do we set editing of dynamic fields?\n    if {[workflow::action::get_element -action_id $action_id -element short_name] eq \"edit\"} {\n        foreach { category_id category_name } [bug_tracker::category_types] {\n            element set_properties bug $category_id -mode edit\n        }\n    }\n} \n    \n\n# on_submit block\nad_form -extend -name bug -on_submit {\n\n    array set row [list] \n    \n    if { $enabled_action_id ne \"\" } { \n        foreach field [workflow::action::get_element -action_id $action_id -element edit_fields] {\n            set row($field) [element get_value bug $field]\n        }\n        foreach {category_id category_name} [bug_tracker::category_types] {\n            set row($category_id) [element get_value bug $category_id]\n        }\n    }\n\n    if { $enabled_action_id eq \"\"} {\n\tns_log notice \"====== reissleine ==== \"\n\tad_complain \"edit requires enabled_action_id, but no value was provided\"\n\tad_script_abort\n    }\n    \n    set description [element get_value bug description]\n    \n    bug_tracker::bug::edit \\\n            -bug_id $bug(bug_id) \\\n            -enabled_action_id $enabled_action_id \\\n            -description [template::util::richtext::get_property contents $description] \\\n            -desc_format [template::util::richtext::get_property format $description] \\\n            -array row \\\n            -entry_id [element get_value bug entry_id]    \n\n\n    ad_returnredirect $return_url\n    ad_script_abort\n\n} -edit_request {\n    # Dummy\n    # If we don't have this, ad_form complains\n}\n\n# Not-valid block (request or submit error)\n# Unfortunately, ad_form doesn't let us do what we want, namely have a block that executes\n# whenever the form is displayed, whether initially or because of a validation error.\nif { ![form is_valid bug] } {\n\n    # Get the bug data\n    bug_tracker::bug::get -bug_id $bug(bug_id) -array bug -enabled_action_id $enabled_action_id\n\n\n    # Make list of form fields\n    set element_names {\n        bug_number component_id summary pretty_state resolution \n        found_in_version user_agent fix_for_version fixed_in_version \n        bug_number_display entry_id\n    }\n\n    # update the element_name list and bug array with category stuff\n    foreach {category_id category_name} [bug_tracker::category_types] {\n        lappend element_names $category_id\n        set bug($category_id) [content::keyword::item_get_assigned -item_id $bug(bug_id) -parent_id $category_id]\n        if {$bug($category_id) eq \"\" } {\n            set bug($category_id) [bug_tracker::get_default_keyword -parent_id $category_id]\n        }\n    }\n    \n    # Display value for patches\n    set href_add [export_vars -base patch-add { { bug_number $bug(bug_number) } { component_id $bug(component_id) } }]\n    set bug(patches_display) [subst {\n\t[bug_tracker::get_patch_links -bug_id $bug(bug_id) -show_patch_status $show_patch_status]\n\t&nbsp; \\[ <a href=\"[ns_quotehtml $href_add]\">[_ bug-tracker.Upload_Patch]</a> \\]}]\n\n    # Display value for related files\n    set href_rel [export_vars -base related-file-add { { bug_number $bug(bug_number) } return_url }]\n    set bug(related_files_display) [subst {[bug_tracker::get_related_files_links -bug_id $bug(bug_id)]<br>\n\t\\[ <a href=\"[ns_quotehtml $href_rel]\">[_ bug-tracker.Upload_related_file]</a> \\]}]\n\n    # Hide elements that should be hidden depending on the bug status\n    foreach element $bug(hide_fields) {\n        element set_properties bug $element -widget hidden\n    }\n\n    if { !$versions_p } {\n        foreach element { found_in_version fix_for_version fixed_in_version } {\n            if { [info exists bug:$element] } {\n                element set_properties bug $element -widget hidden\n            }\n        }\n    }\n\n    if { !$patches_p } {\n        foreach element { patches } {\n            if { [info exists bug:$element] } {\n                element set_properties bug $element -widget hidden\n            }\n        }\n    }\n\n    if { !$related_files_p } {\n        foreach element { related_files } {\n            if { [info exists bug:$element] } {\n                element set_properties bug $element -widget hidden\n            }\n        }\n    }\n\n    # Optionally hide user agent\n    if { !$user_agent_p } {\n        element set_properties bug user_agent -widget hidden\n    }\n\n    # Set regular element values\n    foreach element $element_names { \n\n        # check that the element exists\n        if { [info exists bug:$element] && [info exists bug($element)] } {\n            if {[form is_request bug] \n                || [string equal [element get_property bug $element mode] \"display\"] } { \n                if { [string first \"#\" $bug($element)] == 0 } {\n                    element set_value bug $element [lang::util::localize $bug($element)]\n                } else {\n                    element set_value bug $element $bug($element)\n                }\n            }\n        }\n    }\n    \n    # Add empty option to resolution code\n    if { $enabled_action_id ne \"\" } {\n        if {\"resolution\" ni [workflow::action::get_element -action_id $action_id -element edit_fields]} {\n            element set_properties bug resolution -options [concat {{{} {}}} [element get_property bug resolution options]]\n        }\n    } else {\n        element set_properties bug resolution -widget hidden\n    }\n\n    # Get values for the role assignment widgets\n    workflow::case::role::set_assignee_values -case_id $case_id -form_name bug\n    \n    # Set values for elements with separate display value\n    foreach element { \n        patches\n        related_files\n    } {\n        # check that the element exists\n        if { [info exists bug:$element] } {\n            element set_properties bug $element -display_value $bug(${element}_display)\n        }\n    }\n\n    # Set values for description field\n    element set_properties bug description \\\n            -before_html [workflow::case::get_activity_html -case_id $case_id -action_id $action_id]\n\n    # Set page title\n    set page_title \"[bug_tracker::conn Bug] #$bug_number: $bug(summary)\"\n\n    # Context bar\n    # TODO: Make real\n    set filtered_p 1\n    if { $filtered_p } {\n        set bug_name [bug_tracker::conn bug]\n        set context [list \\\n                         [list \\\n                              [export_vars -base . [bug_tracker::get_export_variables]] \\\n                              [_ bug-tracker.Filtered]] \\\n                         $page_title]\n    } else {\n        set context [list $page_title]\n    }\n    \n    # User agent show/hide URLs\n    if { $enabled_action_id eq \"\" } {\n        set show_user_agent_url [export_vars -base bug -entire_form -override { { user_agent_p 1 }}]\n        set hide_user_agent_url [export_vars -base bug -entire_form -exclude { user_agent_p }]\n    }\n    \n    # Login\n    set login_url [ad_get_login_url]\n    \n    # Single-bug notifications \n    if { $enabled_action_id eq \"\"  } {\n        set notification_link [bug_tracker::bug::get_watch_link -bug_id $bug(bug_id)]\n    }\n\n\n    # Filter management\n    if { $enabled_action_id eq \"\" } {\n    \n        set filter_bug_numbers [bug_tracker::bug::get_bug_numbers]\n        set filter_bug_index [lsearch -exact $filter_bug_numbers $bug_number]\n\n        set first_url {}\n        set last_url {}\n        set prev_url {}\n        set next_url {}\n        \n        if { $filter_bug_index == -1 } {\n            # This bug is not included in the list, get the client property (if it exists)\n            set filter_bug_numbers [ad_get_client_property bug-tracker filter_bug_numbers]\n        } else {\n            # This bug is included in the list\n            ad_set_client_property bug-tracker filter_bug_numbers $filter_bug_numbers \n        }\n\n        set filter_bug_index [lsearch -exact $filter_bug_numbers $bug_number]\n\n        if { $filter_bug_index > 0 } {\n            set first_bug_number [lindex $filter_bug_numbers 0]\n            set first_url [export_vars -base bug -entire_form -override { { bug_number $first_bug_number } }]\n            set prev_bug_number [lindex $filter_bug_numbers $filter_bug_index-1]\n            set prev_url [export_vars -base bug -entire_form -override { { bug_number $prev_bug_number } }]\n        }\n        if { $filter_bug_index < [expr {[llength $filter_bug_numbers]-1}] } {\n            set next_bug_number [lindex $filter_bug_numbers $filter_bug_index+1]\n            set next_url [export_vars -base bug -entire_form -override { { bug_number $next_bug_number } }]\n            set last_bug_number [lindex $filter_bug_numbers end]\n            set last_url [export_vars -base bug -entire_form -override { { bug_number $last_bug_number } }]\n        }\n\n        multirow create navlinks url img alt label\n\n        if { $filter_bug_index != -1 } {\n\n            set next_bug_num [expr {$filter_bug_index+1}]\n            set all_bugs [llength $filter_bug_numbers]\n            multirow append navlinks \\\n                $first_url \\\n                \"/resources/acs-subsite/stock_first-16.png\" \\\n                [_ acs-kernel.common_first]\n\n            multirow append navlinks \\\n                $prev_url \\\n                \"/resources/acs-subsite/stock_left-16.png\" \\\n                [_ acs-kernel.common_previous]\n\n            multirow append navlinks \\\n                {} \\\n                {} \\\n                {} \\\n                [_ bug-tracker.No_of_All]\n\n            multirow append navlinks \\\n                $next_url \\\n                \"/resources/acs-subsite/stock_right-16.png\" \\\n                [_ acs-kernel.common_next]\n\n            multirow append navlinks \\\n                $last_url \\\n                \"/resources/acs-subsite/stock_last-16.png\" \\\n                [_ acs-kernel.common_last]\n        }\n    }\n}\n", "<master src=\"../lib/master\">\n<property name=\"doc(title)\">@page_title;literal@</property>\n<property name=\"context\">@context;literal@</property>\n<property name=\"displayed_object_id\">@patch.patch_id;literal@</property>\n\n<formtemplate id=\"patch\"></formtemplate>\n\n<p>\n<if @button_form_export_vars@ not nil>\n  <blockquote>\n    <form method=\"GET\" action=\"patch\">\n      @button_form_export_vars;noquote@\n      <multiple name=\"button\">\n        <input type=\"submit\" name=\"@button.name@\" value=\"     @button.label@     \">\n      </multiple>\n    </form>\n  </blockquote>\n</if>\n</p>\n\n<if @mode@ eq \"view\" and @deleted_p@ eq 0>\n<center>\n<p>\n<a href=\"patch?patch_number=@patch_number@&download=1\">#bug-tracker.Download_patch_content#</a>\n</p>\n</center>\n<p>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\" bgcolor=\"lightgrey\" width=\"100%\">\n  <tr>\n    <td>\n      <pre><%= [ad_quotehtml \"$patch(content)\"] %></pre>\n    </td>\n  </tr>\n</table>\n</p>\n<center>\n<p>\n<a href=\"patch?patch_number=@patch_number@&download=1\">#bug-tracker.Download_patch_content#</a>\n</p>\n</center>\n</if>\n\n\n\n\n\n\n\n\n", "ad_page_contract {\n    Page for viewing and editing one patch.\n\n    @author Peter Marklund (peter@collaboraid.biz)\n    @date 2002-09-04\n    @cvs-id $Id$\n} {\n    patch_number:integer,notnull\n    mode:optional\n    cancel_edit:optional    \n    edit:optional\n    accept:optional\n    refuse:optional\n    delete:optional    \n    reopen:optional\n    comment:optional\n    download:boolean,optional\n    {desc_format \"text/html\"}\n}\n\n# Assert read permission (should this check be in the request processor?)\npermission::require_permission -object_id [ad_conn package_id] -privilege read\n\n# Initialize variables related to the request that we'll need\nset package_id [ad_conn package_id]\nset user_id [ad_conn user_id]\n# Does the user have write privilege on the project?\nset write_p [permission::permission_p -object_id $package_id -privilege write]\n\nset submitter_id [bug_tracker::get_patch_submitter -patch_number $patch_number]\n\nset user_is_submitter_p [expr { $submitter_id ne \"\" && $user_id == $submitter_id }]\nset write_or_submitter_p [expr {$write_p || $user_is_submitter_p}]\nset project_name [bug_tracker::conn project_name]\nset package_key [ad_conn package_key]\nset view_patch_url [export_vars -base [ad_conn url] { patch_number }]\nset patch_status [db_string patch_status {}]\n\n# Is this project using multiple versions?\nset versions_p [bug_tracker::versions_p]\n\n# Abort editing and return to view mode if the user hit cancel on the edit form\nif { ([info exists cancel_edit] && $cancel_edit ne \"\") } {\n    ad_returnredirect $view_patch_url\n    ad_script_abort\n}\n\n# If the download link was clicked - return the text content of the patch\nif { ([info exists download] && $download ne \"\") } {\n    \n    set patch_content [db_string get_patch_content {}]\n    set outputheaders [ns_conn outputheaders]\n    ns_set cput $outputheaders \"Content-Disposition\" \"attachment; filename=patch-${patch_number}.txt\"\n    doc_return 200 \"text/plain\" $patch_content\n    ad_script_abort\n}\n\n# Initialize the page mode variable\n# We are in view mode per default\nif { ![info exists mode] } {\n    if { ([info exists edit] && $edit ne \"\") } {\n        set mode edit\n    } elseif { ([info exists accept] && $accept ne \"\") } {        \n        set mode accept\n    } elseif { ([info exists refuse] && $refuse ne \"\") } {\n        set mode refuse\n    } elseif { ([info exists delete] && $delete ne \"\") } {\n        set mode delete\n    } elseif { ([info exists reopen] && $reopen ne \"\") } {\n        set mode reopen\n    } elseif { ([info exists comment] && $comment ne \"\") } {\n        set mode comment\n    } else {\n        set mode view\n    }\n}\n\n# Specify which fields in the form are editable\n# And check that the user is permitted to take the chosen action\nswitch -- $mode {\n    edit {\n        if { ![expr {$write_p || $user_is_submitter_p}] } {\n            ad_return_forbidden \"[_ bug-tracker.Permission]\" \"[_ bug-tracker.You_2]\"\n            ad_script_abort\n        }\n\n        set edit_fields {component_id summary generated_from_version apply_to_version}\n    }\n    accept {\n        permission::require_permission -object_id $package_id -privilege write\n\n        # The user should indicate which version the patch is applied to\n        set edit_fields { applied_to_version }\n    }\n    refuse {\n        permission::require_permission -object_id $package_id -privilege write\n\n        set edit_fields {}\n    }\n    reopen {\n        # User must have write permission to reopen a refused patch\n        if { $patch_status eq \"refused\" && !$write_p } {\n            ad_return_forbidden \"[_ bug-tracker.Permission]\" \"[_ bug-tracker.You_3]\"\n            ad_script_abort\n        } elseif { $patch_status eq \"deleted\" && !($user_is_submitter_p || $write_p)} {\n            ad_return_forbidden \"[_ bug-tracker.Permission]\" \"[_ bug-tracker.You_4]\"\n            ad_script_abort\n        }\n\n        set edit_fields {}\n    }\n    delete {\n        # Only the submitter can delete a patch (admins can refuse it)\n        if { !$user_is_submitter_p } {\n            ad_return_forbidden \"[_ bug-tracker.Permission]\" \"[_ bug-tracker.You_5]\"\n            ad_script_abort\n        }\n        set edit_fields {}\n    }\n    comment {\n        set edit_fields {}\n    }\n    view {\n        set edit_fields {}\n    }\n    default {\n\tad_return_forbidden [_ bug-tracker.Permission] \"Invalid mode specified\"\n\tad_script_abort\n    }\n}\n\nforeach field $edit_fields {\n    set field_editable_p($field) 1\n}\n\nif { $mode ne \"view\" } {\n    auth::require_login\n}    \n\n# XXX FIXME TODO editing a patch invokes filename::validate, which is too paranoid...\n\n# Create the form\nswitch -- $mode {\n      view {\n          form create patch -has_submit 1 -cancel_url [export_vars -base [ad_conn url] -url { patch_number }]\n      } \n      default {\n          form create patch -html { enctype multipart/form-data } -cancel_url [export_vars -base [ad_conn url] -url { patch_number }]\n      }\n}\n\n# Create the elements of the form\nelement create patch patch_number \\\n        -datatype integer \\\n        -widget   hidden\n\nelement create patch patch_number_i \\\n        -datatype integer \\\n        -widget   inform \\\n        -label    \"[_ bug-tracker.Patch_1]\"\n\nelement create patch component_id \\\n        -datatype text \\\n        -widget [ad_decode [info exists field_editable_p(component_id)] 1 select inform] \\\n        -label \"[_ bug-tracker.Component]\" \\\n        -options [bug_tracker::components_get_options]\n\nif {$mode eq \"view\"} {\n    element create patch fixes_bugs \\\n        -datatype text \\\n        -widget inform \\\n        -label \"[_ bug-tracker.Fix_2]\"\n}\n\nelement create patch summary  \\\n        -datatype text \\\n        -widget [ad_decode [info exists field_editable_p(summary)] 1 text inform] \\\n        -label \"[_ bug-tracker.Summary]\" \\\n        -html { size 50 }\n\nelement create patch submitter \\\n        -datatype text \\\n        -widget inform \\\n        -label \"[_ bug-tracker.Submitted]\"\n\nelement create patch status \\\n        -widget inform \\\n        -datatype text \\\n        -label \"[_ bug-tracker.Status]\"\n\nelement create patch generated_from_version \\\n        -datatype text \\\n        -widget [ad_decode [info exists field_editable_p(generated_from_version)] 1 select inform] \\\n        -label \"[_ bug-tracker.Generated]\" \\\n        -options [bug_tracker::version_get_options -include_unknown] \\\n        -optional\n\nelement create patch apply_to_version \\\n        -datatype text \\\n        -widget [ad_decode [info exists field_editable_p(apply_to_version)] 1 select inform] \\\n        -label \"[_ bug-tracker.Apply_2]\" \\\n        -options [bug_tracker::version_get_options -include_undecided] \\\n        -optional\n\nelement create patch applied_to_version \\\n        -datatype text \\\n        -widget [ad_decode [info exists field_editable_p(applied_to_version)] 1 select inform] \\\n        -label \"[_ bug-tracker.Applied]\" \\\n        -options [bug_tracker::version_get_options -include_undecided] \\\n        -optional\n\nswitch -- $mode {\n    edit - comment - accept - refuse - reopen - delete {\n        element create patch description  \\\n\t    -datatype text \\\n\t    -widget comment \\\n\t    -label \"[_ bug-tracker.Description]\" \\\n\t    -html { cols 60 rows 13 } \\\n\t    -optional\n        \n        element create patch desc_format \\\n\t    -datatype text \\\n\t    -widget select \\\n\t    -label \"[_ bug-tracker.Description_1]\" \\\n\t    -options { { \"[_ bug-tracker.Plain]\" plain } { \"[_ bug-tracker.HTML]\" html } { \"[_ bug-tracker.Preformatted]\" pre } }\n\n    }\n    default {\n        # View mode\n        element create patch description \\\n\t    -datatype text \\\n\t    -widget inform \\\n\t    -label \"[_ bug-tracker.Description]\"\n    }\n}\n\n# In accept mode - give the user the ability to select associated\n# bugs to be resolved\nif {$mode eq \"accept\"} {\n\n    element create patch resolve_bugs \\\n            -datatype integer \\\n            -widget checkbox \\\n            -label \"[_ bug-tracker.Resolve_1]\" \\\n            -options [bug_tracker::get_mapped_bugs -patch_number $patch_number -only_open_p 1] \\\n            -optional\n}\n\nif {$mode eq \"edit\"} {\n    # Edit mode - display the file upload widget for patch content\n    element create patch patch_file \\\n          -datatype file \\\n          -widget file \\\n          -label \"[_ bug-tracker.Patch_2]\" \\\n          -optional\n} \n\nelement create patch mode \\\n        -datatype text \\\n        -widget hidden \\\n        -value $mode\n\nset page_title [_ bug-tracker.Patch_3]\nset Patches_name [bug_tracker::conn Patches]\nset context [list [list \"patch-list\" \"$Patches_name\"] $page_title]\n\nif { [form is_request patch] } {\n    # The form was requested\n\n    db_1row patch {} -column_array patch\n    set patch(generated_from_version_name) [ad_decode $patch(generated_from_version) \"\" \"[_ bug-tracker.Unknown]\" [bug_tracker::version_get_name -version_id $patch(generated_from_version)]]\n    set patch(apply_to_version_name) [ad_decode $patch(apply_to_version) \"\" \"[_ bug-tracker.Undecided]\" [bug_tracker::version_get_name -version_id $patch(apply_to_version)]]\n    set patch(applied_to_version_name) [bug_tracker::version_get_name -version_id $patch(applied_to_version)]\n\n    if {$user_id != 0} {\n\tset submitter_email_display \"(<a href=\\\"mailto:$patch(submitter_email)\\\">$patch(submitter_email)</a>)\"\n    } else {\n\tset submitter_email_display \"\"\n    }\n\n    # When the user is taking an action that should change the status of the patch\n    # - update the status (the new status will show up in the form)\n    switch -- $mode {\n        accept {\n            set patch(status) accepted\n        }\n        refuse {\n            set patch(status) refused\n        }\n        delete {\n            set patch(status) deleted\n        }\n        reopen {\n            set patch(status) open\n        }\n    }\n\n    element set_properties patch patch_number \\\n            -value $patch(patch_number)\n    element set_properties patch patch_number_i \\\n            -value $patch(patch_number)\n    element set_properties patch component_id \\\n            -value [ad_decode [info exists field_editable_p(component_id)] 1 $patch(component_id) $patch(component_name)]\n    if {$mode eq \"view\"} {\n        set bugs_name [bug_tracker::conn bugs]\n\tset map_to_bugs [_ bug-tracker.Map] \n        set map_new_bug_link [ad_decode $write_or_submitter_p \"1\" \"\\[ <a href=\\\"map-patch-to-bugs?patch_number=$patch(patch_number)\\\">$map_to_bugs</a> \\]\" \"\"]\n        element set_properties patch fixes_bugs \\\n            -value \"[bug_tracker::get_bug_links -patch_id $patch(patch_id) -patch_number $patch(patch_number) -write_or_submitter_p $write_or_submitter_p] <br>$map_new_bug_link\"\n    }\n    element set_properties patch summary \\\n            -value [ad_decode [info exists field_editable_p(summary)] 1 $patch(summary) \"<b>$patch(summary)</b>\"]\n    element set_properties patch submitter \\\n            -value \"\n    [acs_community_member_link -user_id $patch(submitter_user_id) \\\n            -label \"$patch(submitter_first_names) $patch(submitter_last_name)\"] $submitter_email_display\"\n\n    element set_properties patch status \\\n            -value [ad_decode [info exists field_editable_p(status)] 1 $patch(status) [bug_tracker::patch_status_pretty $patch(status)]]\n    element set_properties patch generated_from_version \\\n            -value [ad_decode [info exists field_editable_p(generated_from_version)] 1 $patch(generated_from_version) $patch(generated_from_version_name)]\n    element set_properties patch apply_to_version \\\n            -value [ad_decode [info exists field_editable_p(apply_to_version)] 1 $patch(apply_to_version) $patch(apply_to_version_name)]\n    element set_properties patch applied_to_version \\\n            -value [ad_decode [info exists field_editable_p(applied_to_version)] 1 $patch(applied_to_version) $patch(applied_to_version_name)]\n\n    set deleted_p [string equal $patch(status) \"deleted\"]\n\n    if { ( $patch(status) eq \"open\" && $mode ne \"accept\" ) || $patch(status) eq \"refused\" } {\n        element set_properties patch applied_to_version -widget hidden\n    }\n\n    # Description/Actions/History\n    set patch_id $patch(patch_id)\n    set action_html \"\"\n    db_foreach actions {} {\n        set comment $comment_text\n        append action_html \"<b>$action_date_pretty [bug_tracker::patch_action_pretty $action] by $actor_first_names $actor_last_name</b>\n        <blockquote>[bug_tracker::bug_convert_comment_to_html -comment $comment -format $comment_format]</blockquote>\"\n    }\n\n    if {$mode eq \"view\"} {\n        element set_properties patch description -value $action_html\n    } else {\n\n\tset patch_pretty_name $patch(now_pretty)\n\tset patch_action_pretty_mode [bug_tracker::patch_action_pretty $mode]\n\tset bt_user_first_names [bug_tracker::conn user_first_names]\n\tset bt_user_last_name [bug_tracker::conn user_last_name]\n\n        element set_properties patch description \\\n            -history $action_html \\\n            -header [_ bug-tracker.Patch_Header ] \\\n            -value \"\"\n    }\n\n    # Now that we have the patch summary we can make the page title more informative\n\n    set Patch_name [bug_tracker::conn Patch]\n    set patch_summary $patch(summary)\n    set page_title [_ bug-tracker.Patch_Page_Title]\n\n    # Create the buttons\n    # If the user has submitted the patch he gets full write access on the patch\n    set user_is_submitter_p [expr {$patch(submitter_user_id) == [ad_conn user_id]}]\n    if {$mode eq \"view\"} {\n        set button_form_export_vars [export_vars -form { patch_number }]\n        multirow create button name label\n\n        if { $write_p || $user_is_submitter_p } {\n            multirow append button \"comment\" \"[_ bug-tracker.Comment]\"\n            multirow append button \"edit\" \"[_ bug-tracker.Edit]\"\n        }\n\n        switch -- $patch(status) {\n            open {\n                if { $write_p } {\n                    multirow append button \"accept\" \"[_ bug-tracker.Accept]\"\n                    multirow append button \"refuse\" \"[_ bug-tracker.Refuse]\"\n                }\n\n                # Only the submitter can cancel the patch\n                if { $user_is_submitter_p } {\n                    multirow append button \"delete\" \"[_ bug-tracker.Delete]\"\n                }\n            }\n            accepted {\n                if { $write_p } {\n                    multirow append button \"reopen\" \"[_ bug-tracker.Reopen]\"\n                }\n            }\n            refused {\n                if { $write_p } {\n                    multirow append button \"reopen\" \"[_ bug-tracker.Reopen]\"    \n                }\n            }\n            deleted {\n                if { $write_p || $user_is_submitter_p } {\n                    multirow append button \"reopen\" \"[_ bug-tracker.Reopen]\"\n                }\n            }\n        }\n    }    \n\n    # Check that the user is permitted to change the patch\n    if { $mode ne \"view\" && !$write_p && !$user_is_submitter_p } {\n        ns_log notice \"$patch(submitter_user_id) doesn't have write on object $patch(patch_id)\"\n        ad_return_forbidden \"[_ bug-tracker.Permission]\" \"<blockquote>\n        [_ bug-tracker.You_6]\n        </blockquote>\"\n        ad_script_abort\n    }    \n\n    if { !$versions_p } {\n        element set_properties patch generated_from_version -widget hidden\n    }\n}\n\nif { [form is_valid patch] } {\n    # A valid submit of the form\n\n    set update_exprs [list]\n\n    form get_values patch patch_number\n\n    foreach column $edit_fields {\n        set $column [element get_value patch $column]\n        lappend update_exprs \"$column = :$column\"\n        if {$column eq \"summary\"} { \n            set new_title \"Patch \\#$patch_number: $summary\"\n        }\n    }\n    \n    switch -- $mode {\n        accept {\n            set status accepted\n            lappend update_exprs \"status = :status\"\n        }\n        refuse {\n            set status refused\n            lappend update_exprs \"status = :status\"            \n        }\n        reopen {\n            set status open\n            lappend update_exprs \"status = :status\"\n        }\n        edit {\n            # Get the contents of any new uploaded patch file\n            set content [bug_tracker::get_uploaded_patch_file_content]\n\n            if { $content ne \"\" } {\n                lappend update_exprs \"content = :content\"\n            } \n        }\n        delete {\n            set status deleted\n            lappend update_exprs \"status = :status\"            \n        }\n    }\n\n    db_transaction {\n        set patch_id [db_string patch_id {}]\n\n        if { [llength $update_exprs] > 0 } {\n            db_dml update_patch {}\n        }\n        if {[info exists new_title] && $new_title ne \"\"} { \n            db_dml update_patch_title {update acs_objects set title = :new_title where object_id = :patch_id}\n        }\n        set action_id [db_nextval \"acs_object_id_seq\"]\n\n\tforeach column { description desc_format } {\n\t    if {[element exists patch $column]} {\n\t\tset $column [element get_value patch $column]\n\t    }\n        }\n\n        set action $mode\n        db_dml patch_action {}\n\n        if {$mode eq \"accept\"} {\n            # Resolve any bugs that the user selected\n            set resolve_bugs [element get_values patch resolve_bugs]\n\n            foreach bug_number $resolve_bugs {\n\n                set resolve_description \"[_ bug-tracker.Fixed_2]\"                \n                set workflow_id [bug_tracker::bug::get_instance_workflow_id]\n                set bug_id [bug_tracker::get_bug_id -bug_number $bug_number -project_id $package_id]\n                set case_id [workflow::case::get_id \\\n                                 -workflow_short_name \"[bug_tracker::bug::workflow_short_name]\" \\\n                                 -object_id $bug_id]\n                set action_id [workflow::action::get_id -workflow_id $workflow_id -short_name \"resolve\"]\n                set enabled_action_id [db_string get_enabled_action_id \"\"]\n                         \n                bug_tracker::bug::edit \\\n                    -bug_id $bug_id \\\n                    -enabled_action_id $enabled_action_id \\\n                    -description $resolve_description \\\n                    -desc_format \"text/html\" \\\n                    -array bug_row\n            }\n        }\n    }\n\n    ad_returnredirect $view_patch_url\n    ad_script_abort\n}\n\nad_return_template\n"], "fixing_code": ["<div class=\"bt_navbar\">\n  <div class=\"bt_navbar bt_notification\"><a href=\"@notification_url@\" class=\"bt_navbar\" title=\"@notification_title@\">@notification_label@</a></div>\n  <multiple name=\"links\"><a href=\"@links.url@\" class=\"bt_navbar\">@links.name@</a>&nbsp;|&nbsp;</multiple>\n  <form action=\"@form_action_url@\" method=\"get\" name=\"navbar_form_@bt_nav_bar_count@\">\n    <input name=\"bug_number\" type=\"text\" size=\"5\" class=\"bt_navbar\" value=\"@pretty_names.Bug@ #\" \n      onFocus=\"javascript:this.value='';\">\n      <input type=\"submit\" value=\"Go\" class=\"bt_navbar_btn\">\n  </form>\n  <if @search_mounted_p@>\n      <form action=\"@form_search_url@\" method=\"get\" name=\"search\">\n        <input name=\"q\" type=\"text\" size=\"15\" class=\"bt_navbar\" value=\"#bug-tracker.Search#\" \n          onFocus=\"javascript:this.value='';\">\n          <input name=\"search_package_id\" type=\"hidden\" value=\"@package_id@\">\n          <if @::__csrf_token@ defined><input type=\"hidden\" name=\"__csrf_token\" value=\"@::__csrf_token;literal@\"></if>\n          <input type=\"submit\" value=\"#bug-tracker.Search#\" class=\"bt_navbar_btn\">\n      </form>\n  </if>\n\n</div>\n", "<contract>\n  Display one bug\n\n  @author Jeff Davis davis@xarg.net\n  @cvs-id $Id$\n\n  @param bug array of values as returned from bug_tracker::bug::get\n  @param comments html chunk of comments\n  @param style string (either \"feed\" or \"display\" -- default is display)\n  @param base_url url to the package (ok for this to be empty if in the package, trailing / expected)\n</contract>\n<h1>Bug @bug.bug_number_display@ - @bug.summary;noi18n@ [@bug.component_name@]</h1>\n<p>State: @bug.pretty_state@</p>\n<if @bug.found_in_version_name@ not nil><p>Found in version: @bug.found_in_version_name@</p></if>\n<if @bug.fix_for_version_name@ not nil><p>Fix for version: @bug.fix_for_version_name@</p></if>\n<if @bug.fixed_in_version_name@ not nil><p>Fixed in version: @bug.fixed_in_version_name@</p></if>\n\n<multiple name=\"roles\"><p>@roles.role_pretty@: <a href=\"@roles.user_url@\">@roles.user_name@</a></p></multiple>\n\n@comments;literal@", "ad_page_contract {\n    Shows one bug.\n\n    @author Lars Pind (lars@pinds.com)\n    @creation-date 2002-03-20\n    @cvs-id $Id$\n} [bug_tracker::get_page_variables {\n    bug_number:integer,notnull\n    {user_agent_p:boolean,notnull false}\n    {show_patch_status:word,notnull open}\n}] -validate {\n    check_show_patch_status -requires show_patch_status {\n\tif {$show_patch_status ni {\"open\" \"all\"}} {\n\t    ad_complain \"invalid value for show_patch_status\"\n\t}\n    }\n    check_bug_number -requires bug_number:integer {\n\tif {$bug_number > 2**31} {\n\t    ad_complain \"invalid bug number\"\n\t}\n    }\n}\n\n#####\n#\n# Setup\n#\n#####\n\nset return_url [export_vars -base [ad_conn url] [bug_tracker::get_export_variables { bug_number }]]\n\nset project_name [bug_tracker::conn project_name]\nset package_id [ad_conn package_id]\nset package_key [ad_conn package_key]\n\nset user_id [ad_conn user_id]\n\nset bug_name [bug_tracker::conn Bug]\nset page_title [_ bug-tracker.Bug_Title]\n\nset context [list $page_title]\n\n# Is this project using multiple versions?\nset versions_p [bug_tracker::versions_p]\n\n# Paches enabled for this project?\nset patches_p [bug_tracker::patches_p]\n\n# Does project allow upload of related files?\nset related_files_p [bug_tracker::related_files_p]\n\n#####\n#\n# Get basic info\n#\n#####\n\n# Get the bug_id\nif { ![db_0or1row permission_info {} -column_array bug] } {\n    ad_return_complaint 1 [_ bug-tracker.Bug_not_found]\n    ad_script_abort\n}\n\nset case_id [workflow::case::get_id \\\n        -object_id $bug(bug_id) \\\n        -workflow_short_name [bug_tracker::bug::workflow_short_name]]\n\npermission::require_permission -object_id $bug(bug_id) -privilege read\n\nset workflow_id [bug_tracker::bug::get_instance_workflow_id ]\n\nset admin_p [permission::permission_p -object_id $bug(bug_id) -party_id $user_id -privilege admin]\n\n#####\n#\n# Action\n#\n#####\n\nset enabled_action_id [form get_action bug]\n\n# Registration required for all actions\nset action_id \"\"\nif { $enabled_action_id ne \"\" } {\n    ns_log Notice \"bug.tcl: enabled_action '$enabled_action_id'\"\n    auth::require_login\n    workflow::case::enabled_action_get -enabled_action_id $enabled_action_id -array enabled_action    \n    set action_id $enabled_action(action_id)\n}\n\n\n# Check permissions\nif { ![workflow::case::action::available_p -enabled_action_id $enabled_action_id] } {\n    bug_tracker::security_violation -user_id $user_id -bug_id $bug(bug_id) -action_id $action_id\n}\n\n\nns_log Notice \"actions: enabled_action_id: '${enabled_action_id}'\"\n\n# Buttons\nset actions [list]\nif { $enabled_action_id eq \"\" } {\n\n    #ns_log Notice \"actions: case_id: $case_id\"\n    #ns_log Notice \"actions: case_id: $case_id get_enabled_actions: [workflow::case::get_available_enabled_action_ids -case_id $case_id]\"\n\n    foreach available_enabled_action_id [workflow::case::get_available_enabled_action_ids -case_id $case_id] {\n        # TODO: avoid the enabled_action_get query by caching it, or caching only the enabled_action_id -> action_id lookup?\n        workflow::case::enabled_action_get -enabled_action_id $available_enabled_action_id -array enabled_action\n        workflow::action::get -action_id $enabled_action(action_id) -array available_action\n        lappend actions [list \"     [lang::util::localize $available_action(pretty_name)]     \" $available_enabled_action_id]\n    }\n}\n\n#####\n#\n# Create the form\n#\n#####\n\n# Set the variable that we need for the elements below\n\n\n# set patch label\n# JCD: The string map below is to work around a \"feature\" in the form generation that \n# lets you use +var+ for a var to eval on the second round.  \n# cf http://openacs.org/bugtracker/openacs/bug?bug%5fnumber=1099\n\nif { $enabled_action_id eq \"\" } {\n    set patch_href1 [export_vars -base [ad_conn url] -entire_form -override { { show_patch_status all } }]\n    set patch_href2 [export_vars -base [ad_conn url] -entire_form -override { { show_patch_status open } }]\n    set patch_label [ad_decode $show_patch_status \\\n                         \"open\" [subst {[_ bug-tracker.Open] [bug_tracker::conn Patches] (<a href=\"[ns_quotehtml $patch_href1]\">[_ bug-tracker.show_all]</a>)}] \\\n                         \"all\"  [subst {[_ bug-tracker.All]  [bug_tracker::conn Patches] (<a href=\"[ns_quotehtml $patch_href2]\">[_ bug-tracker.show_only_open]</a>)}] \\\n                         [bug_tracker::conn Patches]]\n} else {\n    set patch_label [ad_decode $show_patch_status \\\n                         \"open\" \"[_ bug-tracker.Open] [bug_tracker::conn Patches]\" \\\n                         \"all\"  \"[_ bug-tracker.All] [bug_tracker::conn Patches]\" \\\n                         [bug_tracker::conn Patches]]\n}\n\nad_form -name bug -cancel_url $return_url -mode display -has_edit 1 -actions $actions -form  {\n    {bug_number_display:text(inform)\n\t{label \"[bug_tracker::conn Bug] \\#\"}\n        {mode display}\n    }\n    {component_id:integer(select),optional\n\t{label \"[bug_tracker::conn Component]\"}\n\t{options {[bug_tracker::components_get_options]}}\n\t{mode display}\n    }\n    {summary:text(text)\n\t{label \"[_ bug-tracker.Summary]\"}\n\t{before_html \"<b>\"}\n\t{after_html \"</b>\"}\n\t{mode display}\n\t{html {size 50}}\n    }\n}\n\n\nad_form -extend -name bug -form {\n    {pretty_state:text(inform)\n\t{label \"[_ bug-tracker.Status]\"}\n\t{before_html \"<b>\"}\n\t{after_html  \"</b>\"}\n\t{mode display}\n    }\n    {resolution:text(select),optional\n\t{label \"[_ bug-tracker.Resolution]\"}\n\t{options {[bug_tracker::resolution_get_options]}}\n\t{mode display}\n    }\n}\n\nforeach {category_id category_name} [bug_tracker::category_types] {\n    ad_form -extend -name bug -form [list \\\n        [list \"${category_id}:integer(select)\" \\\n            [list label $category_name] \\\n            [list options [bug_tracker::category_get_options -parent_id $category_id]] \\\n            [list mode display] \\\n        ] \\\n    ]\n}\n\n\nad_form -extend -name bug -form {\n    {found_in_version:integer(select),optional\n\t{label \"[_ bug-tracker.Found_in_Version]\"}\n\t{options {[bug_tracker::version_get_options -include_unknown]}}\n\t{mode display}\n    }\n}\n\nworkflow::case::role::add_assignee_widgets -case_id $case_id -form_name bug\n\n# More fixed form elements\n\nad_form -extend -name bug -form {\n    {related_files:text(inform)\n\t{label \"[_ bug-tracker.Related_Files]\"}\n\t{mode display}\n    }\n    {patches:text(inform)\n\t{label $patch_label}\n\t{mode display}\n    }\n    {user_agent:text(inform)\n\t{label \"[_ bug-tracker.User_Agent]\"}\n\t{mode display}\n    }\n    {fix_for_version:integer(select),optional\n\t{label \"[_ bug-tracker.Fix_for_Version]\"}\n\t{options {[bug_tracker::version_get_options -include_undecided]}}\n\t{mode display}\n    }\n    {fixed_in_version:integer(select),optional\n\t{label \"[_ bug-tracker.Fixed_in_Version]\"}\n\t{options {[bug_tracker::version_get_options -include_undecided]}}\n\t{mode display}\n    }\n    {description:richtext(richtext),optional\n\t{label \"[_ bug-tracker.Description]\"} \n\t{html {cols 60 rows 13}} \n    }\n    {return_url:text(hidden) \n\t{value $return_url}\n    }\n    {bug_number:key}\n    {entry_id:integer(hidden),optional}\n}\n\n# TODO: Export filters\nset filters [list]\nforeach name [bug_tracker::get_export_variables] { \n    if { [info exists $name] } {\n        lappend filters [list \"${name}:text(hidden),optional\" [list value [set $name]]]\n    }\n}\nad_form -extend -name bug -form $filters\n\n# Set editable fields\nif { $enabled_action_id ne \"\" } {   \n    foreach field [workflow::action::get_element -action_id $action_id -element edit_fields] { \n\telement set_properties bug $field -mode edit \n    }\n    \n    # LARS: Hack! How do we set editing of dynamic fields?\n    if {[workflow::action::get_element -action_id $action_id -element short_name] eq \"edit\"} {\n        foreach { category_id category_name } [bug_tracker::category_types] {\n            element set_properties bug $category_id -mode edit\n        }\n    }\n} \n    \n\n# on_submit block\nad_form -extend -name bug -on_submit {\n\n    array set row [list] \n    \n    if { $enabled_action_id ne \"\" } { \n        foreach field [workflow::action::get_element -action_id $action_id -element edit_fields] {\n            set row($field) [element get_value bug $field]\n        }\n        foreach {category_id category_name} [bug_tracker::category_types] {\n            set row($category_id) [element get_value bug $category_id]\n        }\n    }\n\n    if { $enabled_action_id eq \"\"} {\n\tns_log notice \"====== reissleine ==== \"\n\tad_complain \"edit requires enabled_action_id, but no value was provided\"\n\tad_script_abort\n    }\n    \n    set description [element get_value bug description]\n    \n    bug_tracker::bug::edit \\\n            -bug_id $bug(bug_id) \\\n            -enabled_action_id $enabled_action_id \\\n            -description [template::util::richtext::get_property contents $description] \\\n            -desc_format [template::util::richtext::get_property format $description] \\\n            -array row \\\n            -entry_id [element get_value bug entry_id]    \n\n\n    ad_returnredirect $return_url\n    ad_script_abort\n\n} -edit_request {\n    # Dummy\n    # If we don't have this, ad_form complains\n}\n\n# Not-valid block (request or submit error)\n# Unfortunately, ad_form doesn't let us do what we want, namely have a block that executes\n# whenever the form is displayed, whether initially or because of a validation error.\nif { ![form is_valid bug] } {\n\n    # Get the bug data\n    bug_tracker::bug::get -bug_id $bug(bug_id) -array bug -enabled_action_id $enabled_action_id\n\n\n    # Make list of form fields\n    set element_names {\n        bug_number component_id summary pretty_state resolution \n        found_in_version user_agent fix_for_version fixed_in_version \n        bug_number_display entry_id\n    }\n\n    # update the element_name list and bug array with category stuff\n    foreach {category_id category_name} [bug_tracker::category_types] {\n        lappend element_names $category_id\n        set bug($category_id) [content::keyword::item_get_assigned -item_id $bug(bug_id) -parent_id $category_id]\n        if {$bug($category_id) eq \"\" } {\n            set bug($category_id) [bug_tracker::get_default_keyword -parent_id $category_id]\n        }\n    }\n    \n    # Display value for patches\n    set href_add [export_vars -base patch-add { { bug_number $bug(bug_number) } { component_id $bug(component_id) } }]\n    set bug(patches_display) [subst {\n\t[bug_tracker::get_patch_links -bug_id $bug(bug_id) -show_patch_status $show_patch_status]\n\t&nbsp; \\[ <a href=\"[ns_quotehtml $href_add]\">[_ bug-tracker.Upload_Patch]</a> \\]}]\n\n    # Display value for related files\n    set href_rel [export_vars -base related-file-add { { bug_number $bug(bug_number) } return_url }]\n    set bug(related_files_display) [subst {[bug_tracker::get_related_files_links -bug_id $bug(bug_id)]<br>\n\t\\[ <a href=\"[ns_quotehtml $href_rel]\">[_ bug-tracker.Upload_related_file]</a> \\]}]\n\n    # Hide elements that should be hidden depending on the bug status\n    foreach element $bug(hide_fields) {\n        element set_properties bug $element -widget hidden\n    }\n\n    if { !$versions_p } {\n        foreach element { found_in_version fix_for_version fixed_in_version } {\n            if { [info exists bug:$element] } {\n                element set_properties bug $element -widget hidden\n            }\n        }\n    }\n\n    if { !$patches_p } {\n        foreach element { patches } {\n            if { [info exists bug:$element] } {\n                element set_properties bug $element -widget hidden\n            }\n        }\n    }\n\n    if { !$related_files_p } {\n        foreach element { related_files } {\n            if { [info exists bug:$element] } {\n                element set_properties bug $element -widget hidden\n            }\n        }\n    }\n\n    # Optionally hide user agent\n    if { !$user_agent_p } {\n        element set_properties bug user_agent -widget hidden\n    }\n\n    # Set regular element values\n    foreach element $element_names { \n\n        # check that the element exists\n        if { [info exists bug:$element] && [info exists bug($element)] } {\n            if {[form is_request bug] \n                || [string equal [element get_property bug $element mode] \"display\"] } { \n                if { [string first \"#\" $bug($element)] == 0 } {\n                    element set_value bug $element [lang::util::localize $bug($element)]\n                } else {\n                    element set_value bug $element $bug($element)\n                }\n            }\n        }\n    }\n    \n    # Add empty option to resolution code\n    if { $enabled_action_id ne \"\" } {\n        if {\"resolution\" ni [workflow::action::get_element -action_id $action_id -element edit_fields]} {\n            element set_properties bug resolution -options [concat {{{} {}}} [element get_property bug resolution options]]\n        }\n    } else {\n        element set_properties bug resolution -widget hidden\n    }\n\n    # Get values for the role assignment widgets\n    workflow::case::role::set_assignee_values -case_id $case_id -form_name bug\n    \n    # Set values for elements with separate display value\n    foreach element { \n        patches\n        related_files\n    } {\n        # check that the element exists\n        if { [info exists bug:$element] } {\n            element set_properties bug $element -display_value $bug(${element}_display)\n        }\n    }\n\n    # Set values for description field\n    element set_properties bug description \\\n            -before_html [workflow::case::get_activity_html -case_id $case_id -action_id $action_id]\n\n    # Set page title\n    set page_title \"[bug_tracker::conn Bug] #$bug_number: $bug(summary)\"\n\n    # Context bar\n    # TODO: Make real\n    set filtered_p 1\n    if { $filtered_p } {\n        set bug_name [bug_tracker::conn bug]\n        set context [list \\\n                         [list \\\n                              [export_vars -base . [bug_tracker::get_export_variables]] \\\n                              [_ bug-tracker.Filtered]] \\\n                         $page_title]\n    } else {\n        set context [list $page_title]\n    }\n    \n    # User agent show/hide URLs\n    if { $enabled_action_id eq \"\" } {\n        set show_user_agent_url [export_vars -base bug -entire_form -override { { user_agent_p 1 }}]\n        set hide_user_agent_url [export_vars -base bug -entire_form -exclude { user_agent_p }]\n    }\n    \n    # Login\n    set login_url [ad_get_login_url]\n    \n    # Single-bug notifications \n    if { $enabled_action_id eq \"\"  } {\n        set notification_link [bug_tracker::bug::get_watch_link -bug_id $bug(bug_id)]\n    }\n\n\n    # Filter management\n    if { $enabled_action_id eq \"\" } {\n    \n        set filter_bug_numbers [bug_tracker::bug::get_bug_numbers]\n        set filter_bug_index [lsearch -exact $filter_bug_numbers $bug_number]\n\n        set first_url {}\n        set last_url {}\n        set prev_url {}\n        set next_url {}\n        \n        if { $filter_bug_index == -1 } {\n            # This bug is not included in the list, get the client property (if it exists)\n            set filter_bug_numbers [ad_get_client_property bug-tracker filter_bug_numbers]\n        } else {\n            # This bug is included in the list\n            ad_set_client_property bug-tracker filter_bug_numbers $filter_bug_numbers \n        }\n\n        set filter_bug_index [lsearch -exact $filter_bug_numbers $bug_number]\n\n        if { $filter_bug_index > 0 } {\n            set first_bug_number [lindex $filter_bug_numbers 0]\n            set first_url [export_vars -base bug -entire_form -override { { bug_number $first_bug_number } }]\n            set prev_bug_number [lindex $filter_bug_numbers $filter_bug_index-1]\n            set prev_url [export_vars -base bug -entire_form -override { { bug_number $prev_bug_number } }]\n        }\n        if { $filter_bug_index < [expr {[llength $filter_bug_numbers]-1}] } {\n            set next_bug_number [lindex $filter_bug_numbers $filter_bug_index+1]\n            set next_url [export_vars -base bug -entire_form -override { { bug_number $next_bug_number } }]\n            set last_bug_number [lindex $filter_bug_numbers end]\n            set last_url [export_vars -base bug -entire_form -override { { bug_number $last_bug_number } }]\n        }\n\n        multirow create navlinks url img alt label\n\n        if { $filter_bug_index != -1 } {\n\n            set next_bug_num [expr {$filter_bug_index+1}]\n            set all_bugs [llength $filter_bug_numbers]\n            multirow append navlinks \\\n                $first_url \\\n                \"/resources/acs-subsite/stock_first-16.png\" \\\n                [_ acs-kernel.common_first]\n\n            multirow append navlinks \\\n                $prev_url \\\n                \"/resources/acs-subsite/stock_left-16.png\" \\\n                [_ acs-kernel.common_previous]\n\n            multirow append navlinks \\\n                {} \\\n                {} \\\n                {} \\\n                [_ bug-tracker.No_of_All]\n\n            multirow append navlinks \\\n                $next_url \\\n                \"/resources/acs-subsite/stock_right-16.png\" \\\n                [_ acs-kernel.common_next]\n\n            multirow append navlinks \\\n                $last_url \\\n                \"/resources/acs-subsite/stock_last-16.png\" \\\n                [_ acs-kernel.common_last]\n        }\n    }\n}\n", "<master src=\"../lib/master\">\n<property name=\"doc(title)\">@page_title;literal@</property>\n<property name=\"context\">@context;literal@</property>\n<if @patch.patch_id@ defined><property name=\"displayed_object_id\">@patch.patch_id;literal@</property></if>\n\n<formtemplate id=\"patch\"></formtemplate>\n\n<p>\n<if @button_form_export_vars@ not nil>\n  <blockquote>\n    <form method=\"GET\" action=\"patch\">\n      @button_form_export_vars;noquote@\n      <multiple name=\"button\">\n        <input type=\"submit\" name=\"@button.name@\" value=\"     @button.label@     \">\n      </multiple>\n    </form>\n  </blockquote>\n</if>\n</p>\n\n<if @mode@ eq \"view\" and @deleted_p@ eq 0>\n<center>\n<p>\n<a href=\"patch?patch_number=@patch_number@&download=1\">#bug-tracker.Download_patch_content#</a>\n</p>\n</center>\n<p>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\" bgcolor=\"lightgrey\" width=\"100%\">\n  <tr>\n    <td>\n      <pre><%= [ad_quotehtml \"$patch(content)\"] %></pre>\n    </td>\n  </tr>\n</table>\n</p>\n<center>\n<p>\n<a href=\"patch?patch_number=@patch_number@&download=1\">#bug-tracker.Download_patch_content#</a>\n</p>\n</center>\n</if>\n\n\n\n\n\n\n\n\n", "ad_page_contract {\n    Page for viewing and editing one patch.\n\n    @author Peter Marklund (peter@collaboraid.biz)\n    @date 2002-09-04\n    @cvs-id $Id$\n} {\n    patch_number:integer,notnull\n    mode:word,optional\n    cancel_edit:optional    \n    edit:optional\n    accept:optional\n    refuse:optional\n    delete:optional    \n    reopen:optional\n    comment:optional\n    download:boolean,optional\n    {desc_format \"text/html\"}\n}\n\n# Assert read permission (should this check be in the request processor?)\npermission::require_permission -object_id [ad_conn package_id] -privilege read\n\n# Initialize variables related to the request that we'll need\nset package_id [ad_conn package_id]\nset user_id [ad_conn user_id]\n# Does the user have write privilege on the project?\nset write_p [permission::permission_p -object_id $package_id -privilege write]\n\nset submitter_id [bug_tracker::get_patch_submitter -patch_number $patch_number]\n\nset user_is_submitter_p [expr { $submitter_id ne \"\" && $user_id == $submitter_id }]\nset write_or_submitter_p [expr {$write_p || $user_is_submitter_p}]\nset project_name [bug_tracker::conn project_name]\nset package_key [ad_conn package_key]\nset view_patch_url [export_vars -base [ad_conn url] { patch_number }]\nset patch_status [db_string patch_status {}]\n\n# Is this project using multiple versions?\nset versions_p [bug_tracker::versions_p]\n\n# Abort editing and return to view mode if the user hit cancel on the edit form\nif { [info exists cancel_edit] && $cancel_edit ne \"\" } {\n    ad_returnredirect $view_patch_url\n    ad_script_abort\n}\n\n# If the download link was clicked - return the text content of the patch\nif { ([info exists download] && $download ne \"\") } {\n    \n    set patch_content [db_string get_patch_content {}]\n    set outputheaders [ns_conn outputheaders]\n    ns_set cput $outputheaders \"Content-Disposition\" \"attachment; filename=patch-${patch_number}.txt\"\n    doc_return 200 \"text/plain\" $patch_content\n    ad_script_abort\n}\n\n# Initialize the page mode variable\n# We are in view mode per default\nif { ![info exists mode] } {\n    if { [info exists edit] && $edit ne \"\" } {\n        set mode edit\n    } elseif { [info exists accept] && $accept ne \"\" } {        \n        set mode accept\n    } elseif { [info exists refuse] && $refuse ne \"\" } {\n        set mode refuse\n    } elseif { [info exists delete] && $delete ne \"\" } {\n        set mode delete\n    } elseif { [info exists reopen] && $reopen ne \"\" } {\n        set mode reopen\n    } elseif { [info exists comment] && $comment ne \"\" } {\n        set mode comment\n    } else {\n        set mode view\n    }\n}\n\n# Specify which fields in the form are editable\n# And check that the user is permitted to take the chosen action\nswitch -- $mode {\n    edit {\n        if { ![expr {$write_p || $user_is_submitter_p}] } {\n            ad_return_forbidden \"[_ bug-tracker.Permission]\" \"[_ bug-tracker.You_2]\"\n            ad_script_abort\n        }\n\n        set edit_fields {component_id summary generated_from_version apply_to_version}\n    }\n    accept {\n        permission::require_permission -object_id $package_id -privilege write\n\n        # The user should indicate which version the patch is applied to\n        set edit_fields { applied_to_version }\n    }\n    refuse {\n        permission::require_permission -object_id $package_id -privilege write\n\n        set edit_fields {}\n    }\n    reopen {\n        # User must have write permission to reopen a refused patch\n        if { $patch_status eq \"refused\" && !$write_p } {\n            ad_return_forbidden \"[_ bug-tracker.Permission]\" \"[_ bug-tracker.You_3]\"\n            ad_script_abort\n        } elseif { $patch_status eq \"deleted\" && !($user_is_submitter_p || $write_p)} {\n            ad_return_forbidden \"[_ bug-tracker.Permission]\" \"[_ bug-tracker.You_4]\"\n            ad_script_abort\n        }\n\n        set edit_fields {}\n    }\n    delete {\n        # Only the submitter can delete a patch (admins can refuse it)\n        if { !$user_is_submitter_p } {\n            ad_return_forbidden \"[_ bug-tracker.Permission]\" \"[_ bug-tracker.You_5]\"\n            ad_script_abort\n        }\n        set edit_fields {}\n    }\n    comment {\n        set edit_fields {}\n    }\n    view {\n        set edit_fields {}\n    }\n    default {\n\tad_return_forbidden [_ bug-tracker.Permission] \"Invalid mode specified\"\n\tad_script_abort\n    }\n}\n\nforeach field $edit_fields {\n    set field_editable_p($field) 1\n}\n\nif { $mode ne \"view\" } {\n    auth::require_login\n}    \n\n# XXX FIXME TODO editing a patch invokes filename::validate, which is too paranoid...\n\n# Create the form\nswitch -- $mode {\n      view {\n          form create patch -has_submit 1 -cancel_url [export_vars -base [ad_conn url] -url { patch_number }]\n      } \n      default {\n          form create patch -html { enctype multipart/form-data } -cancel_url [export_vars -base [ad_conn url] -url { patch_number }]\n      }\n}\n\n# Create the elements of the form\nelement create patch patch_number \\\n        -datatype integer \\\n        -widget   hidden\n\nelement create patch patch_number_i \\\n        -datatype integer \\\n        -widget   inform \\\n        -label    \"[_ bug-tracker.Patch_1]\"\n\nelement create patch component_id \\\n        -datatype text \\\n        -widget [ad_decode [info exists field_editable_p(component_id)] 1 select inform] \\\n        -label \"[_ bug-tracker.Component]\" \\\n        -options [bug_tracker::components_get_options]\n\nif {$mode eq \"view\"} {\n    element create patch fixes_bugs \\\n        -datatype text \\\n        -widget inform \\\n        -label \"[_ bug-tracker.Fix_2]\"\n}\n\nelement create patch summary  \\\n        -datatype text \\\n        -widget [ad_decode [info exists field_editable_p(summary)] 1 text inform] \\\n        -label \"[_ bug-tracker.Summary]\" \\\n        -html { size 50 }\n\nelement create patch submitter \\\n        -datatype text \\\n        -widget inform \\\n        -label \"[_ bug-tracker.Submitted]\"\n\nelement create patch status \\\n        -widget inform \\\n        -datatype text \\\n        -label \"[_ bug-tracker.Status]\"\n\nelement create patch generated_from_version \\\n        -datatype text \\\n        -widget [ad_decode [info exists field_editable_p(generated_from_version)] 1 select inform] \\\n        -label \"[_ bug-tracker.Generated]\" \\\n        -options [bug_tracker::version_get_options -include_unknown] \\\n        -optional\n\nelement create patch apply_to_version \\\n        -datatype text \\\n        -widget [ad_decode [info exists field_editable_p(apply_to_version)] 1 select inform] \\\n        -label \"[_ bug-tracker.Apply_2]\" \\\n        -options [bug_tracker::version_get_options -include_undecided] \\\n        -optional\n\nelement create patch applied_to_version \\\n        -datatype text \\\n        -widget [ad_decode [info exists field_editable_p(applied_to_version)] 1 select inform] \\\n        -label \"[_ bug-tracker.Applied]\" \\\n        -options [bug_tracker::version_get_options -include_undecided] \\\n        -optional\n\nswitch -- $mode {\n    edit - comment - accept - refuse - reopen - delete {\n        element create patch description  \\\n\t    -datatype text \\\n\t    -widget comment \\\n\t    -label \"[_ bug-tracker.Description]\" \\\n\t    -html { cols 60 rows 13 } \\\n\t    -optional\n        \n        element create patch desc_format \\\n\t    -datatype text \\\n\t    -widget select \\\n\t    -label \"[_ bug-tracker.Description_1]\" \\\n\t    -options { { \"[_ bug-tracker.Plain]\" plain } { \"[_ bug-tracker.HTML]\" html } { \"[_ bug-tracker.Preformatted]\" pre } }\n\n    }\n    default {\n        # View mode\n        element create patch description \\\n\t    -datatype text \\\n\t    -widget inform \\\n\t    -label \"[_ bug-tracker.Description]\"\n    }\n}\n\n# In accept mode - give the user the ability to select associated\n# bugs to be resolved\nif {$mode eq \"accept\"} {\n\n    element create patch resolve_bugs \\\n            -datatype integer \\\n            -widget checkbox \\\n            -label \"[_ bug-tracker.Resolve_1]\" \\\n            -options [bug_tracker::get_mapped_bugs -patch_number $patch_number -only_open_p 1] \\\n            -optional\n}\n\nif {$mode eq \"edit\"} {\n    # Edit mode - display the file upload widget for patch content\n    element create patch patch_file \\\n          -datatype file \\\n          -widget file \\\n          -label \"[_ bug-tracker.Patch_2]\" \\\n          -optional\n} \n\nelement create patch mode \\\n        -datatype text \\\n        -widget hidden \\\n        -value $mode\n\nset page_title [_ bug-tracker.Patch_3]\nset Patches_name [bug_tracker::conn Patches]\nset context [list [list \"patch-list\" \"$Patches_name\"] $page_title]\n\nif { [form is_request patch] } {\n    # The form was requested\n\n    db_1row patch {} -column_array patch\n    set patch(generated_from_version_name) [ad_decode $patch(generated_from_version) \"\" \"[_ bug-tracker.Unknown]\" [bug_tracker::version_get_name -version_id $patch(generated_from_version)]]\n    set patch(apply_to_version_name) [ad_decode $patch(apply_to_version) \"\" \"[_ bug-tracker.Undecided]\" [bug_tracker::version_get_name -version_id $patch(apply_to_version)]]\n    set patch(applied_to_version_name) [bug_tracker::version_get_name -version_id $patch(applied_to_version)]\n\n    if {$user_id != 0} {\n\tset submitter_email_display \"(<a href=\\\"mailto:$patch(submitter_email)\\\">$patch(submitter_email)</a>)\"\n    } else {\n\tset submitter_email_display \"\"\n    }\n\n    # When the user is taking an action that should change the status of the patch\n    # - update the status (the new status will show up in the form)\n    switch -- $mode {\n        accept {\n            set patch(status) accepted\n        }\n        refuse {\n            set patch(status) refused\n        }\n        delete {\n            set patch(status) deleted\n        }\n        reopen {\n            set patch(status) open\n        }\n    }\n\n    element set_properties patch patch_number \\\n            -value $patch(patch_number)\n    element set_properties patch patch_number_i \\\n            -value $patch(patch_number)\n    element set_properties patch component_id \\\n            -value [ad_decode [info exists field_editable_p(component_id)] 1 $patch(component_id) $patch(component_name)]\n    if {$mode eq \"view\"} {\n        set bugs_name [bug_tracker::conn bugs]\n\tset map_to_bugs [_ bug-tracker.Map] \n        set map_new_bug_link [ad_decode $write_or_submitter_p \"1\" \"\\[ <a href=\\\"map-patch-to-bugs?patch_number=$patch(patch_number)\\\">$map_to_bugs</a> \\]\" \"\"]\n        element set_properties patch fixes_bugs \\\n            -value \"[bug_tracker::get_bug_links -patch_id $patch(patch_id) -patch_number $patch(patch_number) -write_or_submitter_p $write_or_submitter_p] <br>$map_new_bug_link\"\n    }\n    element set_properties patch summary \\\n            -value [ad_decode [info exists field_editable_p(summary)] 1 $patch(summary) \"<b>$patch(summary)</b>\"]\n    element set_properties patch submitter \\\n            -value \"\n    [acs_community_member_link -user_id $patch(submitter_user_id) \\\n            -label \"$patch(submitter_first_names) $patch(submitter_last_name)\"] $submitter_email_display\"\n\n    element set_properties patch status \\\n            -value [ad_decode [info exists field_editable_p(status)] 1 $patch(status) [bug_tracker::patch_status_pretty $patch(status)]]\n    element set_properties patch generated_from_version \\\n            -value [ad_decode [info exists field_editable_p(generated_from_version)] 1 $patch(generated_from_version) $patch(generated_from_version_name)]\n    element set_properties patch apply_to_version \\\n            -value [ad_decode [info exists field_editable_p(apply_to_version)] 1 $patch(apply_to_version) $patch(apply_to_version_name)]\n    element set_properties patch applied_to_version \\\n            -value [ad_decode [info exists field_editable_p(applied_to_version)] 1 $patch(applied_to_version) $patch(applied_to_version_name)]\n\n    set deleted_p [string equal $patch(status) \"deleted\"]\n\n    if { ( $patch(status) eq \"open\" && $mode ne \"accept\" ) || $patch(status) eq \"refused\" } {\n        element set_properties patch applied_to_version -widget hidden\n    }\n\n    # Description/Actions/History\n    set patch_id $patch(patch_id)\n    set action_html \"\"\n    db_foreach actions {} {\n        set comment $comment_text\n        append action_html \"<b>$action_date_pretty [bug_tracker::patch_action_pretty $action] by $actor_first_names $actor_last_name</b>\n        <blockquote>[bug_tracker::bug_convert_comment_to_html -comment $comment -format $comment_format]</blockquote>\"\n    }\n\n    if {$mode eq \"view\"} {\n        element set_properties patch description -value $action_html\n    } else {\n\n\tset patch_pretty_name $patch(now_pretty)\n\tset patch_action_pretty_mode [bug_tracker::patch_action_pretty $mode]\n\tset bt_user_first_names [bug_tracker::conn user_first_names]\n\tset bt_user_last_name [bug_tracker::conn user_last_name]\n\n        element set_properties patch description \\\n            -history $action_html \\\n            -header [_ bug-tracker.Patch_Header ] \\\n            -value \"\"\n    }\n\n    # Now that we have the patch summary we can make the page title more informative\n\n    set Patch_name [bug_tracker::conn Patch]\n    set patch_summary $patch(summary)\n    set page_title [_ bug-tracker.Patch_Page_Title]\n\n    # Create the buttons\n    # If the user has submitted the patch he gets full write access on the patch\n    set user_is_submitter_p [expr {$patch(submitter_user_id) == [ad_conn user_id]}]\n    if {$mode eq \"view\"} {\n        set button_form_export_vars [export_vars -form { patch_number }]\n        multirow create button name label\n\n        if { $write_p || $user_is_submitter_p } {\n            multirow append button \"comment\" \"[_ bug-tracker.Comment]\"\n            multirow append button \"edit\" \"[_ bug-tracker.Edit]\"\n        }\n\n        switch -- $patch(status) {\n            open {\n                if { $write_p } {\n                    multirow append button \"accept\" \"[_ bug-tracker.Accept]\"\n                    multirow append button \"refuse\" \"[_ bug-tracker.Refuse]\"\n                }\n\n                # Only the submitter can cancel the patch\n                if { $user_is_submitter_p } {\n                    multirow append button \"delete\" \"[_ bug-tracker.Delete]\"\n                }\n            }\n            accepted {\n                if { $write_p } {\n                    multirow append button \"reopen\" \"[_ bug-tracker.Reopen]\"\n                }\n            }\n            refused {\n                if { $write_p } {\n                    multirow append button \"reopen\" \"[_ bug-tracker.Reopen]\"    \n                }\n            }\n            deleted {\n                if { $write_p || $user_is_submitter_p } {\n                    multirow append button \"reopen\" \"[_ bug-tracker.Reopen]\"\n                }\n            }\n        }\n    }    \n\n    # Check that the user is permitted to change the patch\n    if { $mode ne \"view\" && !$write_p && !$user_is_submitter_p } {\n        ns_log notice \"$patch(submitter_user_id) doesn't have write on object $patch(patch_id)\"\n        ad_return_forbidden \"[_ bug-tracker.Permission]\" \"<blockquote>\n        [_ bug-tracker.You_6]\n        </blockquote>\"\n        ad_script_abort\n    }    \n\n    if { !$versions_p } {\n        element set_properties patch generated_from_version -widget hidden\n    }\n}\n\nif { [form is_valid patch] && $mode ne \"view\"} {\n    # A valid submit of the form\n\n    set update_exprs [list]\n\n    form get_values patch patch_number\n\n    foreach column $edit_fields {\n        set $column [element get_value patch $column]\n        lappend update_exprs \"$column = :$column\"\n        if {$column eq \"summary\"} { \n            set new_title \"Patch \\#$patch_number: $summary\"\n        }\n    }\n    \n    switch -- $mode {\n        accept {\n            set status accepted\n            lappend update_exprs \"status = :status\"\n        }\n        refuse {\n            set status refused\n            lappend update_exprs \"status = :status\"            \n        }\n        reopen {\n            set status open\n            lappend update_exprs \"status = :status\"\n        }\n        edit {\n            # Get the contents of any new uploaded patch file\n            set content [bug_tracker::get_uploaded_patch_file_content]\n\n            if { $content ne \"\" } {\n                lappend update_exprs \"content = :content\"\n            } \n        }\n        delete {\n            set status deleted\n            lappend update_exprs \"status = :status\"            \n        }\n    }\n\n    db_transaction {\n        set patch_id [db_string patch_id {}]\n\n        if { [llength $update_exprs] > 0 } {\n            db_dml update_patch {}\n        }\n        if {[info exists new_title] && $new_title ne \"\"} { \n            db_dml update_patch_title {update acs_objects set title = :new_title where object_id = :patch_id}\n        }\n        set action_id [db_nextval \"acs_object_id_seq\"]\n\n\tforeach column { description desc_format } {\n\t    if {[element exists patch $column]} {\n\t\tset $column [element get_value patch $column]\n\t    }\n        }\n\n        set action $mode\n        db_dml patch_action {}\n\n        if {$mode eq \"accept\"} {\n            # Resolve any bugs that the user selected\n            set resolve_bugs [element get_values patch resolve_bugs]\n\n            foreach bug_number $resolve_bugs {\n\n                set resolve_description \"[_ bug-tracker.Fixed_2]\"                \n                set workflow_id [bug_tracker::bug::get_instance_workflow_id]\n                set bug_id [bug_tracker::get_bug_id -bug_number $bug_number -project_id $package_id]\n                set case_id [workflow::case::get_id \\\n                                 -workflow_short_name \"[bug_tracker::bug::workflow_short_name]\" \\\n                                 -object_id $bug_id]\n                set action_id [workflow::action::get_id -workflow_id $workflow_id -short_name \"resolve\"]\n                set enabled_action_id [db_string get_enabled_action_id \"\"]\n                         \n                bug_tracker::bug::edit \\\n                    -bug_id $bug_id \\\n                    -enabled_action_id $enabled_action_id \\\n                    -description $resolve_description \\\n                    -desc_format \"text/html\" \\\n                    -array bug_row\n            }\n        }\n    }\n\n    ad_returnredirect $view_patch_url\n    ad_script_abort\n}\n\nad_return_template\n"], "filenames": ["lib/nav-bar.adp", "lib/one-bug.adp", "www/bug.tcl", "www/patch.adp", "www/patch.tcl"], "buggy_code_start_loc": [13, 12, 16, 4, 9], "buggy_code_end_loc": [14, 21, 16, 5, 420], "fixing_code_start_loc": [13, 12, 17, 4, 9], "fixing_code_end_loc": [15, 21, 22, 5, 420], "type": "CWE-352", "message": "A vulnerability classified as problematic has been found in OpenACS bug-tracker. Affected is an unknown function of the file lib/nav-bar.adp of the component Search. The manipulation leads to cross-site request forgery. It is possible to launch the attack remotely. The name of the patch is aee43e5714cd8b697355ec3bf83eefee176d3fc3. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217440.", "other": {"cve": {"id": "CVE-2016-15009", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-05T09:15:08.290", "lastModified": "2023-01-11T17:10:10.050", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as problematic has been found in OpenACS bug-tracker. Affected is an unknown function of the file lib/nav-bar.adp of the component Search. The manipulation leads to cross-site request forgery. It is possible to launch the attack remotely. The name of the patch is aee43e5714cd8b697355ec3bf83eefee176d3fc3. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217440."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openacs:bug-tracker:*:*:*:*:*:*:*:*", "versionEndExcluding": "2016-05-25", "matchCriteriaId": "DDD8B849-EED7-4E8F-B2A4-C80394ADD460"}]}]}], "references": [{"url": "https://github.com/openacs/bug-tracker/commit/aee43e5714cd8b697355ec3bf83eefee176d3fc3", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217440", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217440", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openacs/bug-tracker/commit/aee43e5714cd8b697355ec3bf83eefee176d3fc3"}}