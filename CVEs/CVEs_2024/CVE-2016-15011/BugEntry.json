{"buggy_code": ["/*\n * Digital Signature Service Protocol Project.\n * Copyright (C) 2013-2016 e-Contract.be BVBA.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License version\n * 3.0 as published by the Free Software Foundation.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, see \n * http://www.gnu.org/licenses/.\n */\n\npackage be.e_contract.dssp.client;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\n\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.UnmarshalException;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.crypto.MarshalException;\nimport javax.xml.crypto.dsig.XMLSignature;\nimport javax.xml.crypto.dsig.XMLSignatureException;\nimport javax.xml.crypto.dsig.XMLSignatureFactory;\nimport javax.xml.crypto.dsig.dom.DOMValidateContext;\nimport javax.xml.namespace.QName;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\n\nimport org.apache.xml.security.exceptions.Base64DecodingException;\nimport org.apache.xml.security.utils.Base64;\nimport org.joda.time.DateTime;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\n\nimport be.e_contract.dssp.client.exception.ClientRuntimeException;\nimport be.e_contract.dssp.client.exception.SubjectNotAuthorizedException;\nimport be.e_contract.dssp.client.exception.UserCancelException;\nimport be.e_contract.dssp.client.impl.SecurityTokenKeySelector;\nimport be.e_contract.dssp.ws.DigitalSignatureServiceConstants;\nimport be.e_contract.dssp.ws.jaxb.dss.AnyType;\nimport be.e_contract.dssp.ws.jaxb.dss.ObjectFactory;\nimport be.e_contract.dssp.ws.jaxb.dss.Result;\nimport be.e_contract.dssp.ws.jaxb.dss.SignResponse;\nimport be.e_contract.dssp.ws.jaxb.saml.protocol.NameIdentifierType;\nimport be.e_contract.dssp.ws.jaxb.wsa.AttributedURIType;\nimport be.e_contract.dssp.ws.jaxb.wsa.RelatesToType;\nimport be.e_contract.dssp.ws.jaxb.wsu.AttributedDateTime;\nimport be.e_contract.dssp.ws.jaxb.wsu.TimestampType;\n\n/**\n * Verifier for browser post dss:SignResponse messages.\n * \n * @author Frank Cornelis\n * \n */\npublic class SignResponseVerifier {\n\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(SignResponseVerifier.class);\n\n\tprivate static final QName RESPONSE_ID_QNAME = new QName(\n\t\t\t\"urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0\", \"ResponseID\");\n\n\tprivate final static QName TO_QNAME = new QName(\"http://www.w3.org/2005/08/addressing\", \"To\");\n\n\tprivate SignResponseVerifier() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Checks the signature on the SignResponse browser POST message.\n\t * \n\t * @param signResponseMessage\n\t *            the SignResponse message.\n\t * @param session\n\t *            the session object.\n\t * @return the verification result object.\n\t * @throws JAXBException\n\t * @throws ParserConfigurationException\n\t * @throws SAXException\n\t * @throws IOException\n\t * @throws MarshalException\n\t * @throws XMLSignatureException\n\t * @throws Base64DecodingException\n\t * @throws UserCancelException\n\t * @throws ClientRuntimeException\n\t * @throws SubjectNotAuthorizedException\n\t */\n\tpublic static SignResponseVerificationResult checkSignResponse(String signResponseMessage,\n\t\t\tDigitalSignatureServiceSession session) throws JAXBException, ParserConfigurationException, SAXException,\n\t\t\tIOException, MarshalException, XMLSignatureException, Base64DecodingException, UserCancelException,\n\t\t\tClientRuntimeException, SubjectNotAuthorizedException {\n\t\tif (null == session) {\n\t\t\tthrow new IllegalArgumentException(\"missing session\");\n\t\t}\n\n\t\tbyte[] decodedSignResponseMessage;\n\t\ttry {\n\t\t\tdecodedSignResponseMessage = Base64.decode(signResponseMessage);\n\t\t} catch (Base64DecodingException e) {\n\t\t\tthrow new SecurityException(\"no Base64\");\n\t\t}\n\t\t// JAXB parsing\n\t\tJAXBContext jaxbContext = JAXBContext.newInstance(ObjectFactory.class,\n\t\t\t\tbe.e_contract.dssp.ws.jaxb.dss.async.ObjectFactory.class,\n\t\t\t\tbe.e_contract.dssp.ws.jaxb.wsa.ObjectFactory.class, be.e_contract.dssp.ws.jaxb.wsu.ObjectFactory.class);\n\t\tUnmarshaller unmarshaller = jaxbContext.createUnmarshaller();\n\t\tSignResponse signResponse;\n\t\ttry {\n\t\t\tsignResponse = (SignResponse) unmarshaller.unmarshal(new ByteArrayInputStream(decodedSignResponseMessage));\n\t\t} catch (UnmarshalException e) {\n\t\t\tthrow new SecurityException(\"no valid SignResponse XML\");\n\t\t}\n\n\t\t// DOM parsing\n\t\tDocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n\t\tdocumentBuilderFactory.setNamespaceAware(true);\n\t\tDocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n\t\tInputStream signResponseInputStream = new ByteArrayInputStream(decodedSignResponseMessage);\n\t\tDocument signResponseDocument = documentBuilder.parse(signResponseInputStream);\n\n\t\t// signature verification\n\t\tNodeList signatureNodeList = signResponseDocument.getElementsByTagNameNS(\"http://www.w3.org/2000/09/xmldsig#\",\n\t\t\t\t\"Signature\");\n\t\tif (signatureNodeList.getLength() != 1) {\n\t\t\tthrow new SecurityException(\"requires 1 ds:Signature element\");\n\t\t}\n\t\tElement signatureElement = (Element) signatureNodeList.item(0);\n\t\tSecurityTokenKeySelector keySelector = new SecurityTokenKeySelector(session.getKey());\n\t\tDOMValidateContext domValidateContext = new DOMValidateContext(keySelector, signatureElement);\n\t\tXMLSignatureFactory xmlSignatureFactory = XMLSignatureFactory.getInstance(\"DOM\");\n\t\tXMLSignature xmlSignature = xmlSignatureFactory.unmarshalXMLSignature(domValidateContext);\n\t\tboolean validSignature = xmlSignature.validate(domValidateContext);\n\t\tif (false == validSignature) {\n\t\t\tthrow new SecurityException(\"invalid ds:Signature\");\n\t\t}\n\n\t\t// verify content\n\t\tString responseId = null;\n\t\tRelatesToType relatesTo = null;\n\t\tAttributedURIType to = null;\n\t\tTimestampType timestamp = null;\n\t\tString signerIdentity = null;\n\t\tAnyType optionalOutputs = signResponse.getOptionalOutputs();\n\t\tList<Object> optionalOutputsList = optionalOutputs.getAny();\n\t\tfor (Object optionalOutputObject : optionalOutputsList) {\n\t\t\tLOGGER.debug(\"optional output object type: {}\", optionalOutputObject.getClass().getName());\n\t\t\tif (optionalOutputObject instanceof JAXBElement) {\n\t\t\t\tJAXBElement optionalOutputElement = (JAXBElement) optionalOutputObject;\n\t\t\t\tLOGGER.debug(\"optional output name: {}\", optionalOutputElement.getName());\n\t\t\t\tLOGGER.debug(\"optional output value type: {}\", optionalOutputElement.getValue().getClass().getName());\n\t\t\t\tif (RESPONSE_ID_QNAME.equals(optionalOutputElement.getName())) {\n\t\t\t\t\tresponseId = (String) optionalOutputElement.getValue();\n\t\t\t\t} else if (optionalOutputElement.getValue() instanceof RelatesToType) {\n\t\t\t\t\trelatesTo = (RelatesToType) optionalOutputElement.getValue();\n\t\t\t\t} else if (TO_QNAME.equals(optionalOutputElement.getName())) {\n\t\t\t\t\tto = (AttributedURIType) optionalOutputElement.getValue();\n\t\t\t\t} else if (optionalOutputElement.getValue() instanceof TimestampType) {\n\t\t\t\t\ttimestamp = (TimestampType) optionalOutputElement.getValue();\n\t\t\t\t} else if (optionalOutputElement.getValue() instanceof NameIdentifierType) {\n\t\t\t\t\tNameIdentifierType nameIdentifier = (NameIdentifierType) optionalOutputElement.getValue();\n\t\t\t\t\tsignerIdentity = nameIdentifier.getValue();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tResult result = signResponse.getResult();\n\t\tLOGGER.debug(\"result major: {}\", result.getResultMajor());\n\t\tLOGGER.debug(\"result minor: {}\", result.getResultMinor());\n\t\tif (DigitalSignatureServiceConstants.REQUESTER_ERROR_RESULT_MAJOR.equals(result.getResultMajor())) {\n\t\t\tif (DigitalSignatureServiceConstants.USER_CANCEL_RESULT_MINOR.equals(result.getResultMinor())) {\n\t\t\t\tthrow new UserCancelException();\n\t\t\t}\n\t\t\tif (DigitalSignatureServiceConstants.CLIENT_RUNTIME_RESULT_MINOR.equals(result.getResultMinor())) {\n\t\t\t\tthrow new ClientRuntimeException();\n\t\t\t}\n\t\t\tif (DigitalSignatureServiceConstants.SUBJECT_NOT_AUTHORIZED_RESULT_MINOR.equals(result.getResultMinor())) {\n\t\t\t\tthrow new SubjectNotAuthorizedException(signerIdentity);\n\t\t\t}\n\t\t}\n\t\tif (false == DigitalSignatureServiceConstants.PENDING_RESULT_MAJOR.equals(result.getResultMajor())) {\n\t\t\tthrow new SecurityException(\"invalid dss:ResultMajor\");\n\t\t}\n\n\t\tif (null == responseId) {\n\t\t\tthrow new SecurityException(\"missing async:ResponseID\");\n\t\t}\n\t\tif (false == responseId.equals(session.getResponseId())) {\n\t\t\tthrow new SecurityException(\"invalid async:ResponseID\");\n\t\t}\n\n\t\tif (null == relatesTo) {\n\t\t\tthrow new SecurityException(\"missing wsa:RelatesTo\");\n\t\t}\n\t\tif (false == session.getInResponseTo().equals(relatesTo.getValue())) {\n\t\t\tthrow new SecurityException(\"invalid wsa:RelatesTo\");\n\t\t}\n\n\t\tif (null == to) {\n\t\t\tthrow new SecurityException(\"missing wsa:To\");\n\t\t}\n\t\tif (false == session.getDestination().equals(to.getValue())) {\n\t\t\tthrow new SecurityException(\"invalid wsa:To\");\n\t\t}\n\n\t\tif (null == timestamp) {\n\t\t\tthrow new SecurityException(\"missing wsu:Timestamp\");\n\t\t}\n\t\tAttributedDateTime expires = timestamp.getExpires();\n\t\tif (null == expires) {\n\t\t\tthrow new SecurityException(\"missing wsu:Timestamp/wsu:Expires\");\n\t\t}\n\t\tDateTime expiresDateTime = new DateTime(expires.getValue());\n\t\tDateTime now = new DateTime();\n\t\tif (now.isAfter(expiresDateTime)) {\n\t\t\tthrow new SecurityException(\"wsu:Timestamp expired\");\n\t\t}\n\n\t\tsession.setSignResponseVerified(true);\n\n\t\tSignResponseVerificationResult signResponseVerificationResult = new SignResponseVerificationResult(\n\t\t\t\tsignerIdentity);\n\t\treturn signResponseVerificationResult;\n\t}\n}\n", "/*\n * Digital Signature Service Protocol Project.\n * Copyright (C) 2016 e-Contract.be BVBA.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License version\n * 3.0 as published by the Free Software Foundation.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, see\n * http://www.gnu.org/licenses/.\n */\npackage be.e_contract.dssp.client.metadata;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.Serializable;\nimport java.net.URL;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport java.util.List;\n\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.namespace.QName;\n\nimport be.e_contract.dssp.ws.jaxb.dssp.DigitalSignatureServiceDescriptorType;\nimport be.e_contract.dssp.ws.jaxb.metadata.EntityDescriptorType;\nimport be.e_contract.dssp.ws.jaxb.metadata.KeyDescriptorType;\nimport be.e_contract.dssp.ws.jaxb.metadata.KeyTypes;\nimport be.e_contract.dssp.ws.jaxb.metadata.ObjectFactory;\nimport be.e_contract.dssp.ws.jaxb.metadata.RoleDescriptorType;\nimport be.e_contract.dssp.ws.jaxb.xmldsig.KeyInfoType;\nimport be.e_contract.dssp.ws.jaxb.xmldsig.X509DataType;\n\n/**\n * Digital Signature Service Metadata Consumer. This class is serializable so\n * you can store it within a servlet container's HTTP session.\n *\n * @author Frank Cornelis\n */\npublic class DigitalSignatureServiceMetadata implements Serializable {\n\n\tprivate final static QName _X509DataTypeX509Certificate_QNAME = new QName(\"http://www.w3.org/2000/09/xmldsig#\",\n\t\t\t\"X509Certificate\");\n\n\tprivate final String webServiceAddress;\n\n\tprivate final String browserPostAddress;\n\n\tprivate final X509Certificate certificate;\n\n\t/**\n\t * Main constructor.\n\t * \n\t * @param metadataLocation\n\t *            the URL of the DSS metadata document.\n\t * @throws Exception\n\t */\n\tpublic DigitalSignatureServiceMetadata(String metadataLocation) throws Exception {\n\t\tJAXBContext jaxbContext = JAXBContext.newInstance(ObjectFactory.class);\n\t\tUnmarshaller unmarshaller = jaxbContext.createUnmarshaller();\n\t\tJAXBElement<EntityDescriptorType> entityDescriptorElement = (JAXBElement<EntityDescriptorType>) unmarshaller\n\t\t\t\t.unmarshal(new URL(metadataLocation));\n\t\tEntityDescriptorType entityDescriptor = entityDescriptorElement.getValue();\n\t\tList<RoleDescriptorType> roleDescriptors = entityDescriptor\n\t\t\t\t.getRoleDescriptorOrIDPSSODescriptorOrSPSSODescriptor();\n\t\tString webServiceAddress = null;\n\t\tString browserPostAddress = null;\n\t\tbyte[] certificateData = null;\n\t\tfor (RoleDescriptorType roleDescriptor : roleDescriptors) {\n\t\t\tif (roleDescriptor instanceof DigitalSignatureServiceDescriptorType) {\n\t\t\t\tDigitalSignatureServiceDescriptorType dssDescriptor = (DigitalSignatureServiceDescriptorType) roleDescriptor;\n\t\t\t\tif (!dssDescriptor.getProtocolSupportEnumeration().contains(\"urn:be:e-contract:dssp\")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\twebServiceAddress = dssDescriptor.getWebServiceEndpoint().getEndpointReference().getAddress()\n\t\t\t\t\t\t.getValue();\n\t\t\t\tbrowserPostAddress = dssDescriptor.getBrowserPostEndpoint().getEndpointReference().getAddress()\n\t\t\t\t\t\t.getValue();\n\t\t\t\tList<KeyDescriptorType> keyDescriptors = dssDescriptor.getKeyDescriptor();\n\t\t\t\tfor (KeyDescriptorType keyDescriptor : keyDescriptors) {\n\t\t\t\t\tif (!keyDescriptor.getUse().equals(KeyTypes.SIGNING)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tKeyInfoType keyInfo = keyDescriptor.getKeyInfo();\n\t\t\t\t\tList<Object> keyInfoContent = keyInfo.getContent();\n\t\t\t\t\tfor (Object keyInfoObject : keyInfoContent) {\n\t\t\t\t\t\tif (keyInfoObject instanceof JAXBElement) {\n\t\t\t\t\t\t\tJAXBElement<?> keyInfoElement = (JAXBElement<?>) keyInfoObject;\n\t\t\t\t\t\t\tif (keyInfoElement.getValue() instanceof X509DataType) {\n\t\t\t\t\t\t\t\tX509DataType x509Data = (X509DataType) keyInfoElement.getValue();\n\t\t\t\t\t\t\t\tList<Object> x509DataContent = x509Data.getX509IssuerSerialOrX509SKIOrX509SubjectName();\n\t\t\t\t\t\t\t\tfor (Object x509DataObject : x509DataContent) {\n\t\t\t\t\t\t\t\t\tif (x509DataObject instanceof JAXBElement) {\n\t\t\t\t\t\t\t\t\t\tJAXBElement<?> x509DataElement = (JAXBElement<?>) x509DataObject;\n\t\t\t\t\t\t\t\t\t\tif (x509DataElement.getName().equals(_X509DataTypeX509Certificate_QNAME)) {\n\t\t\t\t\t\t\t\t\t\t\tcertificateData = (byte[]) x509DataElement.getValue();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.webServiceAddress = webServiceAddress;\n\t\tthis.browserPostAddress = browserPostAddress;\n\t\tif (null != certificateData) {\n\t\t\tCertificateFactory certificateFactory = CertificateFactory.getInstance(\"X.509\");\n\t\t\tthis.certificate = (X509Certificate) certificateFactory\n\t\t\t\t\t.generateCertificate(new ByteArrayInputStream(certificateData));\n\t\t} else {\n\t\t\tthis.certificate = null;\n\t\t}\n\t}\n\n\t/**\n\t * Gives back the URL of the DSS SOAP web service.\n\t * \n\t * @return\n\t */\n\tpublic String getWebServiceAddress() {\n\t\treturn this.webServiceAddress;\n\t}\n\n\t/**\n\t * Gives back the URL of the DSS Browser POST entry point.\n\t * \n\t * @return\n\t */\n\tpublic String getBrowserPostAddress() {\n\t\treturn this.browserPostAddress;\n\t}\n\n\t/**\n\t * Gives back the (optional) DSS signing certificate. This certificate is\n\t * used for signing of attestation SAML assertions by the DSS instance.\n\t * \n\t * @return\n\t */\n\tpublic X509Certificate getCertificate() {\n\t\treturn this.certificate;\n\t}\n}\n"], "fixing_code": ["/*\n * Digital Signature Service Protocol Project.\n * Copyright (C) 2013-2016 e-Contract.be BVBA.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License version\n * 3.0 as published by the Free Software Foundation.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, see \n * http://www.gnu.org/licenses/.\n */\n\npackage be.e_contract.dssp.client;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\n\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.UnmarshalException;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.crypto.MarshalException;\nimport javax.xml.crypto.dsig.XMLSignature;\nimport javax.xml.crypto.dsig.XMLSignatureException;\nimport javax.xml.crypto.dsig.XMLSignatureFactory;\nimport javax.xml.crypto.dsig.dom.DOMValidateContext;\nimport javax.xml.namespace.QName;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\n\nimport org.apache.xml.security.exceptions.Base64DecodingException;\nimport org.apache.xml.security.utils.Base64;\nimport org.joda.time.DateTime;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXParseException;\n\nimport be.e_contract.dssp.client.exception.ClientRuntimeException;\nimport be.e_contract.dssp.client.exception.SubjectNotAuthorizedException;\nimport be.e_contract.dssp.client.exception.UserCancelException;\nimport be.e_contract.dssp.client.impl.SecurityTokenKeySelector;\nimport be.e_contract.dssp.ws.DigitalSignatureServiceConstants;\nimport be.e_contract.dssp.ws.jaxb.dss.AnyType;\nimport be.e_contract.dssp.ws.jaxb.dss.ObjectFactory;\nimport be.e_contract.dssp.ws.jaxb.dss.Result;\nimport be.e_contract.dssp.ws.jaxb.dss.SignResponse;\nimport be.e_contract.dssp.ws.jaxb.saml.protocol.NameIdentifierType;\nimport be.e_contract.dssp.ws.jaxb.wsa.AttributedURIType;\nimport be.e_contract.dssp.ws.jaxb.wsa.RelatesToType;\nimport be.e_contract.dssp.ws.jaxb.wsu.AttributedDateTime;\nimport be.e_contract.dssp.ws.jaxb.wsu.TimestampType;\n\n/**\n * Verifier for browser post dss:SignResponse messages.\n * \n * @author Frank Cornelis\n * \n */\npublic class SignResponseVerifier {\n\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(SignResponseVerifier.class);\n\n\tprivate static final QName RESPONSE_ID_QNAME = new QName(\n\t\t\t\"urn:oasis:names:tc:dss:1.0:profiles:asynchronousprocessing:1.0\", \"ResponseID\");\n\n\tprivate final static QName TO_QNAME = new QName(\"http://www.w3.org/2005/08/addressing\", \"To\");\n\n\tprivate SignResponseVerifier() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Checks the signature on the SignResponse browser POST message.\n\t * \n\t * @param signResponseMessage\n\t *            the SignResponse message.\n\t * @param session\n\t *            the session object.\n\t * @return the verification result object.\n\t * @throws JAXBException\n\t * @throws ParserConfigurationException\n\t * @throws SAXException\n\t * @throws IOException\n\t * @throws MarshalException\n\t * @throws XMLSignatureException\n\t * @throws Base64DecodingException\n\t * @throws UserCancelException\n\t * @throws ClientRuntimeException\n\t * @throws SubjectNotAuthorizedException\n\t */\n\tpublic static SignResponseVerificationResult checkSignResponse(String signResponseMessage,\n\t\t\tDigitalSignatureServiceSession session) throws JAXBException, ParserConfigurationException, SAXException,\n\t\t\tIOException, MarshalException, XMLSignatureException, Base64DecodingException, UserCancelException,\n\t\t\tClientRuntimeException, SubjectNotAuthorizedException {\n\t\tif (null == session) {\n\t\t\tthrow new IllegalArgumentException(\"missing session\");\n\t\t}\n\n\t\tbyte[] decodedSignResponseMessage;\n\t\ttry {\n\t\t\tdecodedSignResponseMessage = Base64.decode(signResponseMessage);\n\t\t} catch (Base64DecodingException e) {\n\t\t\tthrow new SecurityException(\"no Base64\");\n\t\t}\n\n\t\t// DOM parsing\n\t\tDocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n\t\tdocumentBuilderFactory.setNamespaceAware(true);\n\t\tdocumentBuilderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n\t\tDocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n\t\tInputStream signResponseInputStream = new ByteArrayInputStream(decodedSignResponseMessage);\n\t\tDocument signResponseDocument;\n\t\ttry {\n\t\t\tsignResponseDocument = documentBuilder.parse(signResponseInputStream);\n\t\t} catch (SAXParseException e) {\n\t\t\tthrow new SecurityException(\"no valid SignResponse XML\");\n\t\t}\n\n\t\t// JAXB parsing\n\t\tJAXBContext jaxbContext = JAXBContext.newInstance(ObjectFactory.class,\n\t\t\t\tbe.e_contract.dssp.ws.jaxb.dss.async.ObjectFactory.class,\n\t\t\t\tbe.e_contract.dssp.ws.jaxb.wsa.ObjectFactory.class, be.e_contract.dssp.ws.jaxb.wsu.ObjectFactory.class);\n\t\tUnmarshaller unmarshaller = jaxbContext.createUnmarshaller();\n\t\tSignResponse signResponse;\n\t\ttry {\n\t\t\tsignResponse = (SignResponse) unmarshaller.unmarshal(signResponseDocument);\n\t\t} catch (UnmarshalException e) {\n\t\t\tthrow new SecurityException(\"no valid SignResponse XML\");\n\t\t}\n\n\t\t// signature verification\n\t\tNodeList signatureNodeList = signResponseDocument.getElementsByTagNameNS(\"http://www.w3.org/2000/09/xmldsig#\",\n\t\t\t\t\"Signature\");\n\t\tif (signatureNodeList.getLength() != 1) {\n\t\t\tthrow new SecurityException(\"requires 1 ds:Signature element\");\n\t\t}\n\t\tElement signatureElement = (Element) signatureNodeList.item(0);\n\t\tSecurityTokenKeySelector keySelector = new SecurityTokenKeySelector(session.getKey());\n\t\tDOMValidateContext domValidateContext = new DOMValidateContext(keySelector, signatureElement);\n\t\tXMLSignatureFactory xmlSignatureFactory = XMLSignatureFactory.getInstance(\"DOM\");\n\t\tXMLSignature xmlSignature = xmlSignatureFactory.unmarshalXMLSignature(domValidateContext);\n\t\tboolean validSignature = xmlSignature.validate(domValidateContext);\n\t\tif (false == validSignature) {\n\t\t\tthrow new SecurityException(\"invalid ds:Signature\");\n\t\t}\n\n\t\t// verify content\n\t\tString responseId = null;\n\t\tRelatesToType relatesTo = null;\n\t\tAttributedURIType to = null;\n\t\tTimestampType timestamp = null;\n\t\tString signerIdentity = null;\n\t\tAnyType optionalOutputs = signResponse.getOptionalOutputs();\n\t\tList<Object> optionalOutputsList = optionalOutputs.getAny();\n\t\tfor (Object optionalOutputObject : optionalOutputsList) {\n\t\t\tLOGGER.debug(\"optional output object type: {}\", optionalOutputObject.getClass().getName());\n\t\t\tif (optionalOutputObject instanceof JAXBElement) {\n\t\t\t\tJAXBElement optionalOutputElement = (JAXBElement) optionalOutputObject;\n\t\t\t\tLOGGER.debug(\"optional output name: {}\", optionalOutputElement.getName());\n\t\t\t\tLOGGER.debug(\"optional output value type: {}\", optionalOutputElement.getValue().getClass().getName());\n\t\t\t\tif (RESPONSE_ID_QNAME.equals(optionalOutputElement.getName())) {\n\t\t\t\t\tresponseId = (String) optionalOutputElement.getValue();\n\t\t\t\t} else if (optionalOutputElement.getValue() instanceof RelatesToType) {\n\t\t\t\t\trelatesTo = (RelatesToType) optionalOutputElement.getValue();\n\t\t\t\t} else if (TO_QNAME.equals(optionalOutputElement.getName())) {\n\t\t\t\t\tto = (AttributedURIType) optionalOutputElement.getValue();\n\t\t\t\t} else if (optionalOutputElement.getValue() instanceof TimestampType) {\n\t\t\t\t\ttimestamp = (TimestampType) optionalOutputElement.getValue();\n\t\t\t\t} else if (optionalOutputElement.getValue() instanceof NameIdentifierType) {\n\t\t\t\t\tNameIdentifierType nameIdentifier = (NameIdentifierType) optionalOutputElement.getValue();\n\t\t\t\t\tsignerIdentity = nameIdentifier.getValue();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tResult result = signResponse.getResult();\n\t\tLOGGER.debug(\"result major: {}\", result.getResultMajor());\n\t\tLOGGER.debug(\"result minor: {}\", result.getResultMinor());\n\t\tif (DigitalSignatureServiceConstants.REQUESTER_ERROR_RESULT_MAJOR.equals(result.getResultMajor())) {\n\t\t\tif (DigitalSignatureServiceConstants.USER_CANCEL_RESULT_MINOR.equals(result.getResultMinor())) {\n\t\t\t\tthrow new UserCancelException();\n\t\t\t}\n\t\t\tif (DigitalSignatureServiceConstants.CLIENT_RUNTIME_RESULT_MINOR.equals(result.getResultMinor())) {\n\t\t\t\tthrow new ClientRuntimeException();\n\t\t\t}\n\t\t\tif (DigitalSignatureServiceConstants.SUBJECT_NOT_AUTHORIZED_RESULT_MINOR.equals(result.getResultMinor())) {\n\t\t\t\tthrow new SubjectNotAuthorizedException(signerIdentity);\n\t\t\t}\n\t\t}\n\t\tif (false == DigitalSignatureServiceConstants.PENDING_RESULT_MAJOR.equals(result.getResultMajor())) {\n\t\t\tthrow new SecurityException(\"invalid dss:ResultMajor\");\n\t\t}\n\n\t\tif (null == responseId) {\n\t\t\tthrow new SecurityException(\"missing async:ResponseID\");\n\t\t}\n\t\tif (false == responseId.equals(session.getResponseId())) {\n\t\t\tthrow new SecurityException(\"invalid async:ResponseID\");\n\t\t}\n\n\t\tif (null == relatesTo) {\n\t\t\tthrow new SecurityException(\"missing wsa:RelatesTo\");\n\t\t}\n\t\tif (false == session.getInResponseTo().equals(relatesTo.getValue())) {\n\t\t\tthrow new SecurityException(\"invalid wsa:RelatesTo\");\n\t\t}\n\n\t\tif (null == to) {\n\t\t\tthrow new SecurityException(\"missing wsa:To\");\n\t\t}\n\t\tif (false == session.getDestination().equals(to.getValue())) {\n\t\t\tthrow new SecurityException(\"invalid wsa:To\");\n\t\t}\n\n\t\tif (null == timestamp) {\n\t\t\tthrow new SecurityException(\"missing wsu:Timestamp\");\n\t\t}\n\t\tAttributedDateTime expires = timestamp.getExpires();\n\t\tif (null == expires) {\n\t\t\tthrow new SecurityException(\"missing wsu:Timestamp/wsu:Expires\");\n\t\t}\n\t\tDateTime expiresDateTime = new DateTime(expires.getValue());\n\t\tDateTime now = new DateTime();\n\t\tif (now.isAfter(expiresDateTime)) {\n\t\t\tthrow new SecurityException(\"wsu:Timestamp expired\");\n\t\t}\n\n\t\tsession.setSignResponseVerified(true);\n\n\t\tSignResponseVerificationResult signResponseVerificationResult = new SignResponseVerificationResult(\n\t\t\t\tsignerIdentity);\n\t\treturn signResponseVerificationResult;\n\t}\n}\n", "/*\n * Digital Signature Service Protocol Project.\n * Copyright (C) 2016 e-Contract.be BVBA.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License version\n * 3.0 as published by the Free Software Foundation.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, see\n * http://www.gnu.org/licenses/.\n */\npackage be.e_contract.dssp.client.metadata;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.Serializable;\nimport java.net.URL;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport java.util.List;\n\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.namespace.QName;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\nimport org.w3c.dom.Document;\n\nimport be.e_contract.dssp.ws.jaxb.dssp.DigitalSignatureServiceDescriptorType;\nimport be.e_contract.dssp.ws.jaxb.metadata.EntityDescriptorType;\nimport be.e_contract.dssp.ws.jaxb.metadata.KeyDescriptorType;\nimport be.e_contract.dssp.ws.jaxb.metadata.KeyTypes;\nimport be.e_contract.dssp.ws.jaxb.metadata.ObjectFactory;\nimport be.e_contract.dssp.ws.jaxb.metadata.RoleDescriptorType;\nimport be.e_contract.dssp.ws.jaxb.xmldsig.KeyInfoType;\nimport be.e_contract.dssp.ws.jaxb.xmldsig.X509DataType;\n\n/**\n * Digital Signature Service Metadata Consumer. This class is serializable so\n * you can store it within a servlet container's HTTP session.\n *\n * @author Frank Cornelis\n */\npublic class DigitalSignatureServiceMetadata implements Serializable {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\tprivate final static QName _X509DataTypeX509Certificate_QNAME = new QName(\"http://www.w3.org/2000/09/xmldsig#\",\n\t\t\t\"X509Certificate\");\n\n\tprivate final String webServiceAddress;\n\n\tprivate final String browserPostAddress;\n\n\tprivate final X509Certificate certificate;\n\n\t/**\n\t * Main constructor.\n\t * \n\t * @param metadataLocation\n\t *            the URL of the DSS metadata document.\n\t * @throws Exception\n\t */\n\tpublic DigitalSignatureServiceMetadata(String metadataLocation) throws Exception {\n\t\tDocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n\t\tdocumentBuilderFactory.setNamespaceAware(true);\n\t\tdocumentBuilderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n\t\tDocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n\t\tDocument document = documentBuilder.parse(new URL(metadataLocation).openStream());\n\n\t\tJAXBContext jaxbContext = JAXBContext.newInstance(ObjectFactory.class);\n\t\tUnmarshaller unmarshaller = jaxbContext.createUnmarshaller();\n\t\tJAXBElement<EntityDescriptorType> entityDescriptorElement = (JAXBElement<EntityDescriptorType>) unmarshaller\n\t\t\t\t.unmarshal(document);\n\t\tEntityDescriptorType entityDescriptor = entityDescriptorElement.getValue();\n\t\tList<RoleDescriptorType> roleDescriptors = entityDescriptor\n\t\t\t\t.getRoleDescriptorOrIDPSSODescriptorOrSPSSODescriptor();\n\t\tString webServiceAddress = null;\n\t\tString browserPostAddress = null;\n\t\tbyte[] certificateData = null;\n\t\tfor (RoleDescriptorType roleDescriptor : roleDescriptors) {\n\t\t\tif (roleDescriptor instanceof DigitalSignatureServiceDescriptorType) {\n\t\t\t\tDigitalSignatureServiceDescriptorType dssDescriptor = (DigitalSignatureServiceDescriptorType) roleDescriptor;\n\t\t\t\tif (!dssDescriptor.getProtocolSupportEnumeration().contains(\"urn:be:e-contract:dssp\")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\twebServiceAddress = dssDescriptor.getWebServiceEndpoint().getEndpointReference().getAddress()\n\t\t\t\t\t\t.getValue();\n\t\t\t\tbrowserPostAddress = dssDescriptor.getBrowserPostEndpoint().getEndpointReference().getAddress()\n\t\t\t\t\t\t.getValue();\n\t\t\t\tList<KeyDescriptorType> keyDescriptors = dssDescriptor.getKeyDescriptor();\n\t\t\t\tfor (KeyDescriptorType keyDescriptor : keyDescriptors) {\n\t\t\t\t\tif (!keyDescriptor.getUse().equals(KeyTypes.SIGNING)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tKeyInfoType keyInfo = keyDescriptor.getKeyInfo();\n\t\t\t\t\tList<Object> keyInfoContent = keyInfo.getContent();\n\t\t\t\t\tfor (Object keyInfoObject : keyInfoContent) {\n\t\t\t\t\t\tif (keyInfoObject instanceof JAXBElement) {\n\t\t\t\t\t\t\tJAXBElement<?> keyInfoElement = (JAXBElement<?>) keyInfoObject;\n\t\t\t\t\t\t\tif (keyInfoElement.getValue() instanceof X509DataType) {\n\t\t\t\t\t\t\t\tX509DataType x509Data = (X509DataType) keyInfoElement.getValue();\n\t\t\t\t\t\t\t\tList<Object> x509DataContent = x509Data.getX509IssuerSerialOrX509SKIOrX509SubjectName();\n\t\t\t\t\t\t\t\tfor (Object x509DataObject : x509DataContent) {\n\t\t\t\t\t\t\t\t\tif (x509DataObject instanceof JAXBElement) {\n\t\t\t\t\t\t\t\t\t\tJAXBElement<?> x509DataElement = (JAXBElement<?>) x509DataObject;\n\t\t\t\t\t\t\t\t\t\tif (x509DataElement.getName().equals(_X509DataTypeX509Certificate_QNAME)) {\n\t\t\t\t\t\t\t\t\t\t\tcertificateData = (byte[]) x509DataElement.getValue();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.webServiceAddress = webServiceAddress;\n\t\tthis.browserPostAddress = browserPostAddress;\n\t\tif (null != certificateData) {\n\t\t\tCertificateFactory certificateFactory = CertificateFactory.getInstance(\"X.509\");\n\t\t\tthis.certificate = (X509Certificate) certificateFactory\n\t\t\t\t\t.generateCertificate(new ByteArrayInputStream(certificateData));\n\t\t} else {\n\t\t\tthis.certificate = null;\n\t\t}\n\t}\n\n\t/**\n\t * Gives back the URL of the DSS SOAP web service.\n\t * \n\t * @return\n\t */\n\tpublic String getWebServiceAddress() {\n\t\treturn this.webServiceAddress;\n\t}\n\n\t/**\n\t * Gives back the URL of the DSS Browser POST entry point.\n\t * \n\t * @return\n\t */\n\tpublic String getBrowserPostAddress() {\n\t\treturn this.browserPostAddress;\n\t}\n\n\t/**\n\t * Gives back the (optional) DSS signing certificate. This certificate is\n\t * used for signing of attestation SAML assertions by the DSS instance.\n\t * \n\t * @return\n\t */\n\tpublic X509Certificate getCertificate() {\n\t\treturn this.certificate;\n\t}\n}\n"], "filenames": ["dssp-client/src/main/java/be/e_contract/dssp/client/SignResponseVerifier.java", "dssp-client/src/main/java/be/e_contract/dssp/client/metadata/DigitalSignatureServiceMetadata.java"], "buggy_code_start_loc": [49, 30], "buggy_code_end_loc": [136, 70], "fixing_code_start_loc": [50, 31], "fixing_code_end_loc": [143, 82], "type": "CWE-611", "message": "A vulnerability classified as problematic was found in e-Contract dssp up to 1.3.1. Affected by this vulnerability is the function checkSignResponse of the file dssp-client/src/main/java/be/e_contract/dssp/client/SignResponseVerifier.java. The manipulation leads to xml external entity reference. Upgrading to version 1.3.2 is able to address this issue. The name of the patch is ec4238349691ec66dd30b416ec6eaab02d722302. It is recommended to upgrade the affected component. The identifier VDB-217549 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2016-15011", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-06T10:15:09.997", "lastModified": "2023-01-12T16:11:35.450", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as problematic was found in e-Contract dssp up to 1.3.1. Affected by this vulnerability is the function checkSignResponse of the file dssp-client/src/main/java/be/e_contract/dssp/client/SignResponseVerifier.java. The manipulation leads to xml external entity reference. Upgrading to version 1.3.2 is able to address this issue. The name of the patch is ec4238349691ec66dd30b416ec6eaab02d722302. It is recommended to upgrade the affected component. The identifier VDB-217549 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:M/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.9}, "baseSeverity": "MEDIUM", "exploitabilityScore": 4.4, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-611"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:e-contract:dssp:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3.2", "matchCriteriaId": "86A4BE0D-3C46-45CA-8C27-40CAA1320099"}]}]}], "references": [{"url": "https://github.com/e-Contract/dssp/commit/ec4238349691ec66dd30b416ec6eaab02d722302", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/e-Contract/dssp/releases/tag/dssp-1.3.2", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217549", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217549", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/e-Contract/dssp/commit/ec4238349691ec66dd30b416ec6eaab02d722302"}}