{"buggy_code": ["<?php\n/**\n * \u540e\u53f0\u5168\u5c40\u9879\u52a0\u8f7d\n * @package EMLOG (www.emlog.net)\n */\n\n/**\n * @var string $action\n * @var object $CACHE\n */\n\nrequire_once '../init.php';\n\nconst TEMPLATE_PATH = EMLOG_ROOT . '/admin/views/';              //\u540e\u53f0\u6a21\u677f\u8def\u5f84\nconst OFFICIAL_SERVICE_HOST = 'https://www.emlog.net/';          //\u5b98\u65b9\u670d\u52a1\u57df\u540d\nconst MSGCODE_EMKEY_INVALID = 1001;                              // \u9519\u8bef\u7684\u6ce8\u518c\u7801\nconst MSGCODE_NO_UPUPDATE = 1002;                                // \u6ca1\u6709\u53ef\u7528\u7684\u7248\u672c\u66f4\u65b0\nconst MSGCODE_SUCCESS = 200;                                     // \u6210\u529f\n\n$sta_cache = $CACHE->readCache('sta');\n$user_cache = $CACHE->readCache('user');\n$action = isset($_GET['action']) ? addslashes($_GET['action']) : '';\n$admin_path_code = isset($_GET['s']) ? addslashes($_GET['s']) : '';\n\nif ($action == 'login') {\n\tif (defined('ADMIN_PATH_CODE') && $admin_path_code !== ADMIN_PATH_CODE) {\n\t\tshow_404_page(true);\n\t}\n\t$username = isset($_POST['user']) ? addslashes(trim($_POST['user'])) : '';\n\t$password = isset($_POST['pw']) ? addslashes(trim($_POST['pw'])) : '';\n\t$ispersis = isset($_POST['ispersis']) ? (int)$_POST['ispersis'] : 0;\n\t$img_code = Option::get('login_code') == 'y' && isset($_POST['imgcode']) ? addslashes(trim(strtoupper($_POST['imgcode']))) : '';\n\n\t$uid = LoginAuth::checkUser($username, $password, $img_code);\n\n\tif ($uid > 0) {\n\t\tRegister::isRegServer();\n\t\t$User_Model = new User_Model();\n\t\t$User_Model->updateUser(['ip'=>getIp()], $uid);\n\t\tLoginAuth::setAuthCookie($username, $ispersis);\n\t\temDirect(\"./\");\n\t} else {\n\t\tLoginAuth::loginPage($uid);\n\t}\n}\n\nif ($action == 'logout') {\n\tsetcookie(AUTH_COOKIE_NAME, ' ', time() - 31536000, '/');\n\temDirect(\"../\");\n}\n\nif (ISLOGIN === false) {\n\tLoginAuth::loginPage(null, $admin_path_code);\n}\n\n$request_uri = strtolower(substr(basename($_SERVER['SCRIPT_NAME']), 0, -4));\nif (ROLE === ROLE_WRITER && !in_array($request_uri, array('article_write', 'article', 'twitter', 'blogger', 'comment', 'index', 'article_save'))) {\n\temMsg('\u6743\u9650\u4e0d\u8db3\uff01', './');\n}\n\nif (!Register::isRegLocal() && mt_rand(1,10) === 10) {\n\temDirect(\"register.php\");\n}\n"], "fixing_code": ["<?php\n/**\n * \u540e\u53f0\u5168\u5c40\u9879\u52a0\u8f7d\n * @package EMLOG (www.emlog.net)\n */\n\n/**\n * @var string $action\n * @var object $CACHE\n */\n\nrequire_once '../init.php';\n\nconst TEMPLATE_PATH = EMLOG_ROOT . '/admin/views/';              //\u540e\u53f0\u6a21\u677f\u8def\u5f84\nconst OFFICIAL_SERVICE_HOST = 'https://www.emlog.net/';          //\u5b98\u65b9\u670d\u52a1\u57df\u540d\nconst MSGCODE_EMKEY_INVALID = 1001;                              // \u9519\u8bef\u7684\u6ce8\u518c\u7801\nconst MSGCODE_NO_UPUPDATE = 1002;                                // \u6ca1\u6709\u53ef\u7528\u7684\u7248\u672c\u66f4\u65b0\nconst MSGCODE_SUCCESS = 200;                                     // \u6210\u529f\n\n$sta_cache = $CACHE->readCache('sta');\n$user_cache = $CACHE->readCache('user');\n$action = isset($_GET['action']) ? addslashes($_GET['action']) : '';\n$admin_path_code = isset($_GET['s']) ? addslashes(htmlClean($_GET['s'])) : '';\n\nif ($action == 'login') {\n\tif (defined('ADMIN_PATH_CODE') && $admin_path_code !== ADMIN_PATH_CODE) {\n\t\tshow_404_page(true);\n\t}\n\t$username = isset($_POST['user']) ? addslashes(trim($_POST['user'])) : '';\n\t$password = isset($_POST['pw']) ? addslashes(trim($_POST['pw'])) : '';\n\t$ispersis = isset($_POST['ispersis']) ? (int)$_POST['ispersis'] : 0;\n\t$img_code = Option::get('login_code') == 'y' && isset($_POST['imgcode']) ? addslashes(trim(strtoupper($_POST['imgcode']))) : '';\n\n\t$uid = LoginAuth::checkUser($username, $password, $img_code);\n\n\tif ($uid > 0) {\n\t\tRegister::isRegServer();\n\t\t$User_Model = new User_Model();\n\t\t$User_Model->updateUser(['ip'=>getIp()], $uid);\n\t\tLoginAuth::setAuthCookie($username, $ispersis);\n\t\temDirect(\"./\");\n\t} else {\n\t\tLoginAuth::loginPage($uid);\n\t}\n}\n\nif ($action == 'logout') {\n\tsetcookie(AUTH_COOKIE_NAME, ' ', time() - 31536000, '/');\n\temDirect(\"../\");\n}\n\nif (ISLOGIN === false) {\n\tLoginAuth::loginPage(null, $admin_path_code);\n}\n\n$request_uri = strtolower(substr(basename($_SERVER['SCRIPT_NAME']), 0, -4));\nif (ROLE === ROLE_WRITER && !in_array($request_uri, array('article_write', 'article', 'twitter', 'blogger', 'comment', 'index', 'article_save'))) {\n\temMsg('\u6743\u9650\u4e0d\u8db3\uff01', './');\n}\n\nif (!Register::isRegLocal() && mt_rand(1,10) === 10) {\n\temDirect(\"register.php\");\n}\n"], "filenames": ["admin/globals.php"], "buggy_code_start_loc": [23], "buggy_code_end_loc": [24], "fixing_code_start_loc": [23], "fixing_code_end_loc": [24], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in index.php in emlog version <= pro-1.0.7 allows remote attackers to inject arbitrary web script or HTML via the s parameter.", "other": {"cve": {"id": "CVE-2021-44584", "sourceIdentifier": "cve@mitre.org", "published": "2022-01-06T13:15:08.133", "lastModified": "2022-01-12T14:50:23.647", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in index.php in emlog version <= pro-1.0.7 allows remote attackers to inject arbitrary web script or HTML via the s parameter."}, {"lang": "es", "value": "Una vulnerabilidad de tipo cross-site scripting (XSS) en el archivo index.php en emlog versiones anteriores a pro-1.0.7 incluy\u00e9ndola, permite a atacantes remotos inyectar scripts web o HTML arbitrarios por medio del par\u00e1metro s."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:emlog:emlog:*:*:*:*:pro:*:*:*", "versionEndIncluding": "1.0.7", "matchCriteriaId": "3FD9FF70-3BB8-48DE-BC69-B3AD292CFF20"}]}]}], "references": [{"url": "https://github.com/emlog/emlog/commit/3f89610f721120ded3ff491cb9cd99d9927c7582", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/emlog/emlog/issues/113", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/emlog/emlog/commit/3f89610f721120ded3ff491cb9cd99d9927c7582"}}