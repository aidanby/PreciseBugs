{"buggy_code": ["/*\n// Copyright (C) 2014 The Syncthing Authors.\n//\n// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this file,\n// You can obtain one at https://mozilla.org/MPL/2.0/.\n\n*/\n\nbody {\n    padding-bottom: 70px;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n    overflow-y: scroll;\n}\n\nh1, h2, h3, h4, h5 {\n    font-family: \"Raleway\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n    line-height: 1.25;\n}\n\nul+h5 {\n    margin-top: 1.5em;\n}\n\n.content {\n    margin-bottom: 50px;\n}\n\n.panel-progress {\n    height: 3px;\n    left: 0;\n    position: absolute;\n    top: 0;\n    display: block;\n}\n\n.checkbox {\n    margin-top: 0px;\n}\n\n.checkbox input[type=\"checkbox\"], .radio input[type=\"radio\"] {\n    float: none; /* issue #1197 */\n}\n\n#advancedAccordion input.form-control[type=\"checkbox\"] {\n    box-shadow: none;\n    margin: 0;\n    width: auto;\n}\n\n.popover {\n    max-width: none;\n    min-width: 250px;\n}\n\n.tooltip {\n    word-wrap:break-word;\n}\n\n.text-monospace {\n    font-family: Menlo, Monaco, Consolas, \"Courier New\", monospace;\n}\n\n.table-condensed>thead>tr>th, .table-condensed>tbody>tr>th, .table-condensed>tfoot>tr>th, .table-condensed>thead>tr>td, .table-condensed>tbody>tr>td, .table-condensed>tfoot>tr>td {\n    border-top: none;\n}\n\n.logo {\n    margin: 0;\n    padding: 0;\n    top: -5px;\n    position: relative;\n}\n\n.list-no-bullet {\n    list-style-type: none;\n}\n\n.li-column {\n    display: inline-block;\n    min-width: 7em;\n    margin-right: 1em;\n    padding: 1px 4px;\n    margin: 2px 2px;\n}\n.li-column span.data {\n    margin-left: 0.5em;\n    min-width: 10em;\n    text-align: right;\n    display: inline-block;\n}\n\n.ng-cloak {\n    display: none !important;\n}\n\n.table th {\n    white-space: nowrap;\n    font-weight: 400;\n}\n\n.table td {\n    /*padding-left: 20px !important;*/\n}\n\n.table td.small-data {\n    white-space: nowrap;\n}\n\n/* Removing text decoration on anchor link hover pull request: #4135 */\n.table td.small-data span a:hover {\n    text-decoration: none;\n}\n\ntable.table-condensed {\n    table-layout: fixed;\n}\n\ntable.table-dynamic {\n    word-wrap: break-word;\n    word-break: break-all;\n}\n\ntable.table-condensed td,\ntable.table-condensed th {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n\ntable.table-condensed td.no-overflow-ellipse {\n    white-space: normal;\n}\n\ntable.table-auto {\n\ttable-layout: auto;\n}\n\ntable.table-auto th {\n\twidth: 1px;\n}\n\ntable.table-auto td {\n    max-width: 0px;\n}\n\ntd input[type=\"checkbox\"] {\n    margin-top: 13px;\n}\n\n/* Remote Devices connection-quality indicator */\n.reception-0 {\n    background: url('../../vendor/bootstrap/fonts/reception-0.svg') no-repeat;\n}\n\n.reception-1 {\n    background: url('../../vendor/bootstrap/fonts/reception-1.svg') no-repeat;\n}\n\n.reception-2 {\n    background: url('../../vendor/bootstrap/fonts/reception-2.svg') no-repeat;\n}\n\n.reception-3 {\n    background: url('../../vendor/bootstrap/fonts/reception-3.svg') no-repeat;\n}\n\n.reception-4 {\n    background: url('../../vendor/bootstrap/fonts/reception-4.svg') no-repeat;\n}\n\n.reception {\n    width: 1em;\n    height: 1em;\n    display: inline-block;\n    vertical-align: -10%;\n    background-size: contain;\n    /* Simulate same width as Fork Awesome icons. */\n    margin-left: .14285715em;\n    margin-right: .14285715em;\n}\n\n.remote-devices-panel {\n    display: inline-block;\n}\n\n/* Wrap long file paths to prevent text overflow. See issue #6268. */\n.file-path {\n    word-break: break-all;\n}\n\n.folder-advanced {\n    padding: 1rem;\n    margin-bottom: 15px;\n}\n\n.folder-advanced-toggle {\n    cursor: pointer;\n}\n.folder-advanced-toggle .collapse,\n.folder-advanced-toggle.collapsed .expand {\n    display: inline-block;\n}\n\n.folder-advanced-toggle.collapsed .collapse,\n.folder-advanced-toggle .expand{\n    display: none;\n}\n\nli[language-select] > .dropdown-menu {\n    column-count: 2;\n    column-gap: 0;\n    width: 450px;\n}\n\nli[language-select] > .dropdown-menu > li > a {\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.nav>li{\n    float: left;\n}\n.navbar-right {\n    /* to align with panel */\n    padding-right: 15px;\n    float: right;\n}\n\n.panel-body .table-condensed {\n    margin-bottom: 0;\n}\n\n.dl-horizontal.dl-narrow dt {\n    width: 40px;\n}\n\n.dl-horizontal.dl-narrow dd {\n    margin-left: 60px;\n}\n\n/**\n * Panel, Model and Accordion Title bars\n */\n\n.panel-icon {\n    float: left;\n    margin-right: 15px;\n    margin-top: 0.125em;\n    margin-bottom: 0.125em;\n    line-height: 1;\n}\n\n.modal-title .panel-icon {\n    margin-top: 0.25em;\n    margin-bottom: 0.25em;\n}\n\nbutton.panel-heading {\n    display: block;\n    position: relative;\n    width: 100%;\n    text-align: left;\n    border-top-width: 0;\n    border-left-width: 0;\n    border-right-width: 0;\n    border-radius: 0 !important;\n}\n\n.panel-heading .panel-title-text {\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n}\n\n.panel-heading .panel-status {\n    margin-left:15px;\n}\n\nidenticon {\n    width: 1em;\n    height: 1em;\n    line-height: 1;\n}\n\n.identicon {\n    width: 1em;\n    height: 1em;\n    shape-rendering: crispEdges;\n}\n\na.toggler {\n    color: inherit;\n}\na.toggler:hover {\n    border-bottom: 1px dashed;\n    text-decoration: none;\n}\n\n/**\n * Panel padding decrease\n */\n\n.panel-collapse .panel-body {\n    padding: 5px;\n}\n\n/**\n * Progress bars with centered text\n */\n\n.progress {\n    margin-bottom: 0px;\n    position: relative;\n}\n\n.progress span.frontal {\n    text-align: center;\n    position: absolute;\n    display: block;\n    width: 100%;\n}\n\n.three-columns {\n    -webkit-column-count: 3;\n    -moz-column-count: 3;\n    column-count: 3;\n}\n\n.two-columns {\n    -webkit-column-count: 2;\n    -moz-column-count: 2;\n    column-count: 2;\n}\n\nul.three-columns li, ul.two-columns li {\n    padding-left: 0.5em;\n    text-indent: -0.5em;\n}\n\n.navbar-fixed-bottom {\n    z-index: 980;\n}\n\n/*\n * Restore Versions tweaks\n */\n\n#restoreTree-container {\n    overflow-y: scroll;\n    resize: vertical;\n    /* Limit height to prevent vertical screen overflow. */\n    max-height: calc(100vh - 390px);\n    /* Always fit at least one folder with dropdown open. */\n    min-height: 136px;\n}\n@media (min-width: 768px) {\n    #restoreTree-container {\n        max-height: calc(100vh - 401px);\n    }\n}\n@media (min-width: 992px) {\n    #restoreTree-container {\n        max-height: calc(100vh - 333px);\n    }\n}\n\n/* Ignore fixed height when manually resized. */\n#restoreTree-container[style*=\"height\"] {\n    max-height: none;\n}\n\n/* Remove table outline as rows have own focus style already. */\n#restoreTree:focus {\n    outline: 0;\n}\n\n/* Align dropdown with title first line. */\n#restoreTree td + td {\n    padding-top: 4px;\n    vertical-align: top;\n}\n\n/* Reduce space between toggle and menu on mobile. */\n#restoreTree .dropdown-toggle {\n    margin-bottom: 0;\n}\n\n/* Change direction to remain on screen on mobile. */\n#restoreTree .dropdown-menu {\n    left: auto;\n    right: 0;\n}\n\n/* Ensure maximum space for filtering and date range. */\n#restoreVersions .form-group,\n#restoreVersions .form-control {\n    width: 100%;\n}\n\n/** Footer nav on small devices **/\n@media (max-width: 1199px) {\n    /* Stay at the end of the page, with space reserved for the footer\n    usually taking up two rows. */\n\n    html {\n        position: relative;\n        min-height: 100%;\n    }\n\n    body {\n        padding-bottom: 60px;\n    }\n\n    .navbar-fixed-bottom {\n        position: absolute;\n    }\n}\n\n@media (max-width: 768px) {\n    /* Layout after the normal contents, as this is when the footer switches\n    to a vertical layout. */\n\n    body {\n        padding-bottom: 0px;\n    }\n\n    .navbar-brand {\n        margin: 3.25px -15px;\n    }\n\n    .navbar-fixed-bottom {\n        position: relative;\n    }\n\n    .navbar-nav .open .dropdown-menu {\n        position: absolute;\n        left: auto;\n        right: 0;\n        background-color: #ffffff;\n        border: 1px solid #cccccc;\n        border: 1px solid rgba(0, 0, 0, 0.15);\n        -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\n        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\n        border-radius: 2px;\n    }\n\n    li[language-select] {\n        position: static !important;\n    }\n\n    li[language-select] > .dropdown-menu {\n        column-count: auto;\n        margin-left: 15px;\n        margin-right: 15px;\n        margin-top: -12px !important;\n        max-width: 450px;\n        overflow-y: scroll;\n        /* height of 5.5 elements + negative margin-top */\n        height: 276px;\n    }\n\n    .two-columns {\n        -webkit-column-count: 1;\n        -moz-column-count: 1;\n        column-count: 1;\n    }\n}\n\n@media (max-width:479px) {\n\n    nav .dropdown-toggle {\n        font-size: 1em;\n    }\n\n    .navbar-nav .open .dropdown-menu > li > a {\n        padding: 12px 15px 12px 25px;\n    }\n\n    .navbar-fixed-bottom li {\n         width: 100%;\n    }\n}\n\n.tab-content {\n    padding-top: 10px;\n}\n\n@media (max-width: 419px) {\n    /* the selectors are build to target only the content of folder and device\n       panels as it would \"destroy\" e.g. out of sync or recent changes listings */\n    div[id^='device-'].panel-collapse table,\n    div[id^='folder-'].panel-collapse table,\n    div[id^='device-'].panel-collapse tbody,\n    div[id^='folder-'].panel-collapse tbody,\n    div[id^='device-'].panel-collapse tr,\n    div[id^='folder-'].panel-collapse tr {\n        display: block;\n    }\n    div[id^='device-'].panel-collapse th,\n    div[id^='folder-'].panel-collapse th,\n    div[id^='device-'].panel-collapse td,\n    div[id^='folder-'].panel-collapse td {\n        display: block;\n        max-width: 100%;\n        width: 100%;\n    }\n\n    /* All buttons, except panel headings, get bottom margin, as they\n       won't fit beside each other anymore. Reduce footer padding to\n       compensate for the margin. */\n    .btn:not(.panel-heading),\n    .btn:not(.panel-heading) + .btn:not(.panel-heading) {\n        margin-bottom: 10px;\n    }\n    .panel-footer {\n        padding-bottom: 0;\n    }\n    .modal-footer {\n        padding-bottom: 5px;\n    }\n\n    table.table-auto td,\n    table.table-auto th,\n    table.table-condensed td,\n    table.table-condensed th {\n        /* for mobile phones to allow linebreaks in long repro folder/shared with\n        * columns. */\n        white-space: normal;\n    }\n\n    /* Move share buttons below device ID on small screens. */\n    #shareDeviceIdButtons {\n        display: inline-block;\n    }\n}\n\n.form-horizontal .form-group {\n    margin-bottom: 5px;\n}\n\n.form-horizontal {\n    margin-bottom: 10px;\n}\n\n/* Use the same style as Bootstrap uses for disabled <select>. */\n.form-control option[disabled] {\n    background-color: #eeeeee;\n    opacity: 1;\n}\n\n/* Make a \"well\" look more like a readonly text input when grouped with a button */\n.input-group .well-sm {\n  padding-top: 6px;\n  padding-bottom: 6px;\n}\n\n/* CJK languages don't use italic at all, hence don't force it on them. */\nhtml[lang|=\"zh\"] i,\nhtml[lang=\"ja\"] i,\nhtml[lang|=\"ko\"] i {\n    font-style: normal;\n}\n\n/* Prevent buttons from jumping up and down\n   when a tooltip is shown for one of them. */\n.btn-group-vertical > .tooltip + .btn,\n.btn-group-vertical > .tooltip + .btn-group {\n    margin-top: -1px;\n}\n\n.select-on-click {\n    -webkit-user-select: all;\n    user-select: all;\n}\n", "<!DOCTYPE html>\n<!--\n// Copyright (C) 2014 The Syncthing Authors.\n//\n// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this file,\n// You can obtain one at https://mozilla.org/MPL/2.0/.\n\n-->\n<html lang=\"en\" ng-app=\"syncthing\" ng-controller=\"SyncthingController\">\n<head>\n  <meta charset=\"utf-8\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <link rel=\"shortcut icon\" href=\"assets/img/favicon-{{syncthingStatus()}}.png\"/>\n  <link rel=\"mask-icon\" href=\"assets/img/safari-pinned-tab.svg\" color=\"#0882c8\"/>\n\n  <title ng-bind=\"thisDeviceName() + ' | Syncthing'\"></title>\n  <link href=\"vendor/bootstrap/css/bootstrap.css\" rel=\"stylesheet\"/>\n  <link href=\"vendor/daterangepicker/daterangepicker.css\" rel=\"stylesheet\"/>\n  <link href=\"assets/font/raleway.css\" rel=\"stylesheet\"/>\n  <link href=\"vendor/fork-awesome/css/fork-awesome.css\" rel=\"stylesheet\"/>\n  <link href=\"vendor/fork-awesome/css/v5-compat.css\" rel=\"stylesheet\"/>\n  <link href=\"assets/css/tree.css\" rel=\"stylesheet\"/>\n  <link href=\"assets/css/overrides.css\" rel=\"stylesheet\"/>\n  <link href=\"assets/css/theme.css\" rel=\"stylesheet\"/>\n</head>\n\n<body>\n  <noscript>\n    <nav class=\"navbar navbar-top navbar-default\" role=\"navigation\">\n      <div class=\"container\">\n        <span class=\"navbar-brand\" aria-hidden=\"true\">\n          <img class=\"logo hidden-xs\" src=\"assets/img/logo-horizontal.svg\" height=\"32\" width=\"117\" alt=\"\"/>\n          <img class=\"logo hidden visible-xs\" src=\"assets/img/favicon-default.png\" height=\"32\" alt=\"\"/>\n        </span>\n      </div>\n    </nav>\n\n    <div class=\"container content\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"panel panel-danger\">\n            <div class=\"panel-heading\">\n              <h3 class=\"panel-title\">\n                <div class=\"panel-icon\">\n                  <span class=\"fas fa-exclamation-circle\"></span>\n                </div>\n                Warning!\n              </h3>\n            </div>\n            <div class=\"panel-body\">\n              <p>\n              The Syncthing admin interface requires JavaScript. Please enable JavaScript in your web browser and try again.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </noscript>\n\n  <div class=\"ng-cloak\">\n    <script type=\"text/javascript\" src=\"syncthing/development/logbar.js\"></script>\n    <div ng-if=\"version.isBeta\" ng-include=\"'syncthing/development/logbar.html'\"></div>\n    <!-- Top bar -->\n\n    <nav class=\"navbar navbar-top navbar-default\" role=\"navigation\">\n      <div class=\"container\">\n        <span class=\"navbar-brand\" aria-hidden=\"true\">\n          <img class=\"logo hidden-xs\" src=\"assets/img/logo-horizontal.svg\" height=\"32\" width=\"117\" alt=\"\"/>\n          <img class=\"logo hidden visible-xs\" src=\"assets/img/favicon-default.png\" height=\"32\" alt=\"\"/>\n        </span>\n        <p class=\"navbar-text hidden-xs\" ng-class=\"{'hidden-sm':upgradeInfo && upgradeInfo.newer}\">{{thisDeviceName()}}</p>\n        <ul class=\"nav navbar-nav navbar-right\">\n          <li ng-if=\"upgradeInfo && upgradeInfo.newer\" class=\"upgrade-newer\">\n            <button type=\"button\" class=\"btn navbar-btn btn-primary btn-sm\" data-toggle=\"modal\" data-target=\"#upgrade\">\n              <span class=\"fas fa-arrow-circle-up\"></span>\n              <span class=\"hidden-xs\" translate translate-value-version=\"{{upgradeInfo.latest}}\">Upgrade To {%version%}</span>\n            </button>\n          </li>\n          <li ng-if=\"upgradeInfo && upgradeInfo.majorNewer\" class=\"upgrade-newer-major\">\n            <button type=\"button\" class=\"btn navbar-btn btn-danger btn-sm\" data-toggle=\"modal\" data-target=\"#majorUpgrade\">\n              <span class=\"fas fa-arrow-circle-up\"></span>\n              <span class=\"hidden-xs\" translate translate-value-version=\"{{upgradeInfo.latest}}\">Upgrade To {%version%}</span>\n            </button>\n          </li>\n          <li class=\"dropdown\" language-select></li>\n          <li>\n            <a class=\"navbar-link\" href=\"{{docsURL('intro/gui')}}\" target=\"_blank\">\n              <span class=\"fas fa-question-circle\"></span>\n              <span class=\"hidden-xs\" translate>Help</span>\n            </a>\n          </li>\n          <li class=\"dropdown action-menu\">\n            <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">\n              <span class=\"fas fa-cog\"></span>\n              <span class=\"hidden-xs\" translate>Actions</span>\n              <span class=\"caret\"></span>\n            </a>\n            <ul class=\"dropdown-menu\">\n              <li><a href=\"\" ng-click=\"showSettings()\"><span class=\"fas fa-fw fa-cog\"></span>&nbsp;<span translate>Settings</span></a></li>\n              <li><a href=\"\" ng-click=\"showDeviceIdentification(thisDevice())\"><span class=\"fas fa-fw fa-qrcode\"></span>&nbsp;<span translate>Show ID</span></a></li>\n              <li class=\"divider\" aria-hidden=\"true\"></li>\n              <li><a href=\"\" ng-click=\"shutdown()\"><span class=\"fas fa-fw fa-power-off\"></span>&nbsp;<span translate>Shutdown</span></a></li>\n              <li><a href=\"\" ng-click=\"restart()\"><span class=\"fas fa-fw fa-refresh\"></span>&nbsp;<span translate>Restart</span></a></li>\n              <li class=\"divider\" aria-hidden=\"true\"></li>\n              <li class=\"visible-xs\">\n                <a href=\"{{docsURL('intro/gui')}}\" target=\"_blank\">\n                  <span class=\"fas fa-fw fa-question-circle\"></span>&nbsp;<span translate>Help</span>\n                </a>\n              </li>\n              <li><a href=\"\" ng-click=\"about.show()\"><span class=\"far fa-fw fa-heart\"></span>&nbsp;<span translate>About</span></a></li>\n              <li class=\"divider\" aria-hidden=\"true\"></li>\n              <li><a href=\"\" ng-click=\"advanced()\"><span class=\"fas fa-fw fa-cogs\"></span>&nbsp;<span translate>Advanced</span></a></li>\n              <li><a href=\"\" ng-click=\"logging.show()\"><span class=\"far fa-fw fa-file-alt\"></span>&nbsp;<span translate>Logs</span></a></li>\n              <li class=\"divider\" aria-hidden=\"true\" ng-if=\"config.gui.debugging\"></li>\n              <li><a href=\"/rest/debug/support\" target=\"_blank\" ng-if=\"config.gui.debugging\"><span class=\"fa fa-user-md\"></span>&nbsp;<span translate>Support Bundle</span></a></li>\n            </ul>\n          </li>\n        </ul>\n      </div>\n    </nav>\n\n    <div class=\"container content\">\n\n      <!-- Panel: Open, no auth -->\n\n      <div ng-if=\"openNoAuth\" class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"panel panel-danger\">\n            <div class=\"panel-heading\">\n              <h3 class=\"panel-title\">\n                <div class=\"panel-icon\">\n                  <span class=\"fas fa-exclamation-circle\"></span>\n                </div>\n                <span translate>Danger!</span>\n              </h3>\n            </div>\n            <div class=\"panel-body\">\n              <p>\n              <span translate>The Syncthing admin interface is configured to allow remote access without a password.</span>\n              <b><span translate>This can easily give hackers access to read and change any files on your computer.</span></b>\n              <span translate>Please set a GUI Authentication User and Password in the Settings dialog.</span>\n              </p>\n            </div>\n            <div class=\"panel-footer\">\n              <button type=\"button\" class=\"btn btn-sm btn-default pull-right\" ng-click=\"showSettings()\">\n                <span class=\"fas fa-cog\"></span>&nbsp;<span translate>Settings</span>\n              </button>\n              <div class=\"clearfix\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Panel: Restart Needed -->\n\n      <div ng-if=\"!configInSync\" class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"panel panel-warning\">\n            <div class=\"panel-heading\">\n              <h3 class=\"panel-title\">\n                <div class=\"panel-icon\">\n                  <span class=\"fas fa-exclamation-circle\"></span>\n                </div>\n                <span translate>Restart Needed</span>\n              </h3>\n            </div>\n            <div class=\"panel-body\">\n              <p translate>The configuration has been saved but not activated. Syncthing must restart to activate the new configuration.</p>\n            </div>\n            <div class=\"panel-footer\">\n              <button type=\"button\" class=\"btn btn-sm btn-default pull-right\" ng-click=\"restart()\">\n                <span class=\"fas fa-refresh\"></span>&nbsp;<span translate>Restart</span>\n              </button>\n              <div class=\"clearfix\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div ng-if=\"config\">\n\n        <!-- Panel: Notifications -->\n\n        <div ng-if=\"config.options && config.options.unackedNotificationIDs\" ng-include=\"'syncthing/core/notifications.html'\"></div>\n\n        <!-- Panel: New Device -->\n\n        <div ng-repeat=\"(deviceID, pendingDevice) in pendingDevices\" class=\"row\">\n          <div class=\"col-md-12\">\n            <div class=\"panel panel-warning\">\n              <div class=\"panel-heading\">\n                <h3 class=\"panel-title\">\n                  <identicon class=\"panel-icon\" data-value=\"device\"></identicon>\n                  <span translate>New Device</span>\n                  <span class=\"pull-right\">{{ pendingDevice.time | date:\"yyyy-MM-dd HH:mm:ss\" }}</span>\n                </h3>\n              </div>\n              <div class=\"panel-body\">\n                <p>\n                  <span translate translate-value-device=\"{{ deviceID }}\" translate-value-address=\"{{ pendingDevice.address }}\" translate-value-name=\"{{ pendingDevice.name }}\">\n                    Device \"{%name%}\" ({%device%} at {%address%}) wants to connect. Add new device?\n                  </span>\n                </p>\n              </div>\n              <div class=\"panel-footer clearfix\">\n                <div class=\"pull-right\">\n                  <button type=\"button\" class=\"btn btn-sm btn-success\" ng-click=\"addDevice(deviceID, pendingDevice.name)\">\n                    <span class=\"fas fa-plus\"></span>&nbsp;<span translate>Add Device</span>\n                  </button>\n                  <button type=\"button\" class=\"btn btn-sm btn-danger\" ng-click=\"ignoreDevice(deviceID, pendingDevice)\" tooltip data-original-title=\"{{'Permanently add it to the ignore list, suppressing further notifications.' | translate}}\">\n                    <span class=\"fas fa-times\"></span>&nbsp;<span translate>Ignore</span>\n                  </button>\n                  <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"dismissPendingDevice(deviceID)\" tooltip data-original-title=\"{{'Do not add it to the ignore list, so this notification may recur.' | translate}}\">\n                    <span class=\"far fa-clock\"></span>&nbsp;<span translate>Dismiss</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Panel: New Folder -->\n        <div ng-repeat=\"(folderID, pendingFolder) in pendingFolders\">\n          <div ng-repeat=\"(deviceID, offeringDevice) in pendingFolder.offeredBy\" class=\"row reject\">\n            <div class=\"col-md-12\">\n              <div class=\"panel panel-warning\">\n                <div class=\"panel-heading\">\n                  <h3 class=\"panel-title\">\n                    <div class=\"panel-icon\">\n                      <span class=\"fas fa-folder\"></span>\n                    </div>\n                    <span translate ng-if=\"!folders[folderID]\">New Folder</span>\n                    <span translate ng-if=\"folders[folderID]\">Share Folder</span>\n                    <span class=\"pull-right\">{{ offeringDevice.time | date:\"yyyy-MM-dd HH:mm:ss\" }}</span>\n                  </h3>\n                </div>\n                <div class=\"panel-body\">\n                  <p>\n                    <span ng-if=\"offeringDevice.label.length == 0\" translate translate-value-device=\"{{ deviceName(devices[deviceID]) }}\" translate-value-folder=\"{{ folderID }}\">\n                      {%device%} wants to share folder \"{%folder%}\".\n                    </span>\n                    <span ng-if=\"offeringDevice.label.length != 0\" translate translate-value-device=\"{{ deviceName(devices[deviceID]) }}\" translate-value-folder=\"{{ folderID }}\" translate-value-folderlabel=\"{{ offeringDevice.label }}\">\n                      {%device%} wants to share folder \"{%folderlabel%}\" ({%folder%}).\n                    </span>\n                    <span translate ng-if=\"folders[folderID]\">Share this folder?</span>\n                    <span translate ng-if=\"!folders[folderID]\">Add new folder?</span>\n                  </p>\n                </div>\n                <div class=\"panel-footer clearfix\">\n                  <div class=\"pull-right\">\n                    <button type=\"button\" class=\"btn btn-sm btn-success\" ng-click=\"addFolderAndShare(folderID, pendingFolder, deviceID)\" ng-if=\"!folders[folderID]\">\n                      <span class=\"fas fa-check\"></span>&nbsp;<span translate>Add</span>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-sm btn-success\" ng-click=\"shareFolderWithDevice(folderID, deviceID)\" ng-if=\"folders[folderID]\">\n                      <span class=\"fas fa-check\"></span>&nbsp;<span translate>Share</span>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-sm btn-danger\" ng-click=\"ignoreFolder(deviceID, folderID, offeringDevice)\" tooltip data-original-title=\"{{'Permanently add it to the ignore list, suppressing further notifications.' | translate}}\">\n                      <span class=\"fas fa-times\"></span>&nbsp;<span translate>Ignore</span>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"dismissPendingFolder(folderID, deviceID)\" tooltip data-original-title=\"{{'Do not add it to the ignore list, so this notification may recur.' | translate}}\">\n                      <span class=\"far fa-clock\"></span>&nbsp;<span translate>Dismiss</span>\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n\n      <!-- Panel: Notice -->\n\n      <div ng-if=\"errorList().length > 0\" class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"panel panel-warning\">\n            <div class=\"panel-heading\">\n              <h3 class=\"panel-title\">\n                <div class=\"panel-icon\">\n                  <span class=\"fas fa-exclamation-circle\"></span>\n                </div>\n                <span translate>Notice</span>\n              </h3>\n            </div>\n            <div class=\"panel-body\">\n              <p ng-repeat=\"err in errorList()\">\n                <small>{{err.when | date:\"yyyy-MM-dd HH:mm:ss\"}}:</small>\n                <span ng-bind-html=\"friendlyDevices(err.message) | linky: '_blank'\"></span>\n              </p>\n            </div>\n            <div class=\"panel-footer\">\n              <button type=\"button\" class=\"btn btn-sm btn-default pull-right\" ng-click=\"clearErrors()\">\n                <span class=\"fas fa-check\"></span>&nbsp;<span translate>OK</span>\n              </button>\n              <div class=\"clearfix\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Panel: FS watcher errors -->\n\n      <div ng-if=\"sizeOf(fsWatcherErrorMap()) > 0\" class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"panel panel-warning\">\n            <div class=\"panel-heading\">\n              <h3 class=\"panel-title\">\n                <div class=\"panel-icon\">\n                  <span class=\"fas fa-exclamation-circle\"></span>\n                </div>\n                <span translate>Filesystem Watcher Errors</span>\n              </h3>\n            </div>\n            <div class=\"panel-body\">\n              <p>\n                <span translate>For the following folders an error occurred while starting to watch for changes. It will be retried every minute, so the errors might go away soon. If they persist, try to fix the underlying issue and ask for help if you can't.</span>&emsp;<a href=\"https://forum.syncthing.net\" target=\"_blank\"><span class=\"fas fa-question-circle\"></span>&nbsp;<span translate>Support</span></a>\n              </p>\n              <table>\n                <tr ng-repeat=\"(id, err) in fsWatcherErrorMap()\">\n                  <td>{{folderLabel(id)}}</td><td>{{err}}</td>\n                </tr>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- First regular row -->\n\n      <div class=\"row\">\n\n        <!-- Folder list (top left) -->\n\n        <div class=\"col-md-6\" aria-labelledby=\"folder_list\" role=\"region\" >\n          <h3 id=\"folder_list\"><span translate>Folders</span><span ng-if=\"folderList().length > 1\"> ({{folderList().length}})</span></h3>\n          <div class=\"panel-group\" id=\"folders\">\n            <div class=\"panel panel-default\" ng-repeat=\"folder in folderList()\">\n              <button class=\"btn panel-heading\" data-toggle=\"collapse\" data-parent=\"#folders\" data-target=\"#folder-{{$index}}\" aria-expanded=\"false\">\n                <div class=\"panel-progress\" ng-show=\"folderStatus(folder) == 'syncing'\" ng-attr-style=\"width: {{syncPercentage(folder.id) | percent}}\"></div>\n                <div class=\"panel-progress\" ng-show=\"folderStatus(folder) == 'scanning' && scanProgress[folder.id] != undefined\" ng-attr-style=\"width: {{scanPercentage(folder.id) | percent}}\"></div>\n                <h4 class=\"panel-title\">\n                  <div class=\"panel-icon hidden-xs\">\n                    <span ng-if=\"folder.type == 'sendreceive'\" class=\"fas fa-fw fa-folder\"></span>\n                    <span ng-if=\"folder.type == 'sendonly'\" class=\"fas fa-fw fa-upload\"></span>\n                    <span ng-if=\"folder.type == 'receiveonly'\" class=\"fas fa-fw fa-download\"></span>\n                    <span ng-if=\"folder.type == 'receiveencrypted'\" class=\"fas fa-fw fa-lock\"></span>\n                  </div>\n                  <div class=\"panel-status pull-right text-{{folderClass(folder)}}\" ng-switch=\"folderStatus(folder)\">\n                    <span ng-switch-when=\"paused\"><span class=\"hidden-xs\" translate>Paused</span><span class=\"visible-xs\" aria-label=\"{{'Paused' | translate}}\"><i class=\"fas fa-fw fa-pause\"></i></span></span>\n                    <span ng-switch-when=\"unknown\"><span class=\"hidden-xs\" translate>Unknown</span><span class=\"visible-xs\" aria-label=\"{{'Unknown' | translate}}\"><i class=\"fas fa-fw fa-question-circle\"></i></span></span>\n                    <span ng-switch-when=\"unshared\"><span class=\"hidden-xs\" translate>Unshared</span><span class=\"visible-xs\" aria-label=\"{{'Unshared' | translate}}\"><i class=\"fas fa-fw fa-unlink\"></i></span></span>\n                    <span ng-switch-when=\"scan-waiting\"><span class=\"hidden-xs\" translate>Waiting to Scan</span><span class=\"visible-xs\" aria-label=\"{{'Waiting to Scan' | translate}}\"><i class=\"fas fa-fw fa-hourglass-half\"></i></span></span>\n                    <span ng-switch-when=\"cleaning\"><span class=\"hidden-xs\" translate>Cleaning Versions</span><span class=\"visible-xs\" aria-label=\"{{'Cleaning Versions' | translate}}\"><i class=\"fas fa-fw fa-recycle\"></i></span></span>\n                    <span ng-switch-when=\"clean-waiting\"><span class=\"hidden-xs\" translate>Waiting to Clean</span><span class=\"visible-xs\" aria-label=\"{{'Waiting to Clean' | translate}}\"><i class=\"fas fa-fw fa-hourglass-half\"></i></span></span>\n                    <span ng-switch-when=\"stopped\"><span class=\"hidden-xs\" translate>Stopped</span><span class=\"visible-xs\" aria-label=\"{{'Stopped' | translate}}\"><i class=\"fas fa-fw fa-stop\"></i></span></span>\n                    <span ng-switch-when=\"scanning\">\n                      <span class=\"hidden-xs\" translate>Scanning</span>\n                      <span class=\"hidden-xs\" ng-if=\"scanPercentage(folder.id) != undefined\">\n                        ({{scanPercentage(folder.id) | percent}})\n                      </span>\n                      <span class=\"visible-xs\" aria-label=\"{{'Scanning' | translate}}\"><i class=\"fas fa-fw fa-search\"></i></span>\n                    </span>\n                    <span ng-switch-when=\"idle\"><span class=\"hidden-xs\" translate>Up to Date</span><span class=\"visible-xs\" aria-label=\"{{'Up to Date' | translate}}\"><i class=\"fas fa-fw fa-check\"></i></span></span>\n                    <span ng-switch-when=\"localadditions\"><span class=\"hidden-xs\" translate>Local Additions</span><span class=\"visible-xs\" aria-label=\"{{'Local Additions' | translate}}\"><i class=\"fas fa-fw fa-check\"></i></span></span>\n                    <span ng-switch-when=\"sync-waiting\">\n                      <span class=\"hidden-xs\" translate>Waiting to Sync</span>\n                      <span class=\"visible-xs\" aria-label=\"{{'Waiting to Sync' | translate}}\"><i class=\"fas fa-fw fa-hourglass-half\"></i></span>\n                    </span>\n                    <span ng-switch-when=\"sync-preparing\">\n                      <span class=\"hidden-xs\" translate>Preparing to Sync</span>\n                      <span class=\"visible-xs\" aria-label=\"{{'Preparing to Sync' | translate}}\"><i class=\"fas fa-fw fa-hourglass-half\"></i></span>\n                    </span>\n                    <span ng-switch-when=\"syncing\">\n                      <span class=\"hidden-xs\" translate>Syncing</span>\n                      <span>({{syncPercentage(folder.id) | percent}}, {{model[folder.id].needBytes | binary}}B)</span>\n                    </span>\n                    <span ng-switch-when=\"outofsync\"><span class=\"hidden-xs\" translate>Out of Sync</span><span class=\"visible-xs\" aria-label=\"{{'Out of Sync' | translate}}\"><i class=\"fas fa-fw fa-exclamation-circle\"></i></span></span>\n                    <span ng-switch-when=\"faileditems\"><span class=\"hidden-xs\" translate>Failed Items</span><span class=\"visible-xs\" aria-label=\"{{'Failed Items' | translate}}\"><i class=\"fas fa-fw fa-exclamation-circle\"></i></span></span>\n                    <span ng-switch-when=\"localunencrypted\"><span class=\"hidden-xs\">{{'Unexpected Items' | translate}}</span><span class=\"visible-xs\" aria-label=\"{{'Unexpected Items' | translate}}\"><i class=\"fas fa-fw fa-exclamation-circle\"></i></span></span>\n                  </div>\n                  <div class=\"panel-title-text\">\n                    <span tooltip data-original-title=\"{{folder.label.length != 0 ? folder.id : ''}}\">{{folder.label.length != 0 ? folder.label : folder.id}}</span>\n                  </div>\n                </h4>\n              </button>\n              <div id=\"folder-{{$index}}\" class=\"panel-collapse collapse\">\n                <div class=\"panel-body\">\n                  <table class=\"table table-condensed table-striped table-auto\">\n                    <tbody>\n                      <tr ng-show=\"folder.label != undefined && folder.label.length > 0\">\n                        <th><span class=\"fas fa-fw fa-info-circle\"></span>&nbsp;<span translate>Folder ID</span></th>\n                        <td class=\"text-right no-overflow-ellipse\">{{folder.id}}</td>\n                      </tr>\n                      <tr>\n                        <th><span class=\"fas fa-fw fa-folder-open\"></span>&nbsp;<span translate>Folder Path</span></th>\n                        <td class=\"text-right\">\n                          <span tooltip data-original-title=\"{{folder.path}}\">{{folder.path}}</span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"!folder.paused && (model[folder.id].invalid || model[folder.id].error)\">\n                        <th><span class=\"fas fa-fw fa-exclamation-triangle\"></span>&nbsp;<span translate>Error</span></th>\n                        <td class=\"text-right\">\n                          <span tooltip data-original-title=\"{{model[folder.id].invalid || model[folder.id].error}}\">{{model[folder.id].invalid || model[folder.id].error}}</span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"!folder.paused\">\n                        <th><span class=\"fas fa-fw fa-globe\"></span>&nbsp;<span translate>Global State</span></th>\n                        <td class=\"text-right\">\n                          <span tooltip data-original-title=\"{{model[folder.id].globalFiles | alwaysNumber | localeNumber}} {{'files' | translate}}, {{model[folder.id].globalDirectories | alwaysNumber | localeNumber}} {{'directories' | translate}}, ~{{model[folder.id].globalBytes | binary}}B\">\n                            <span class=\"far fa-copy\"></span>&nbsp;{{model[folder.id].globalFiles | alwaysNumber | localeNumber}}&ensp;\n                            <span class=\"far fa-folder\"></span>&nbsp;{{model[folder.id].globalDirectories | alwaysNumber | localeNumber}}&ensp;\n                            <span class=\"far fa-hdd\"></span>&nbsp;~{{model[folder.id].globalBytes | binary}}B\n                          </span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"!folder.paused\">\n                        <th><span class=\"fas fa-fw fa-home\"></span>&nbsp;<span translate>Local State</span></th>\n                        <td class=\"text-right\">\n                          <div>\n                            <span tooltip data-original-title=\"{{model[folder.id].localFiles | alwaysNumber | localeNumber}} {{'files' | translate}}, {{model[folder.id].localDirectories | alwaysNumber | localeNumber}} {{'directories' | translate}}, ~{{model[folder.id].localBytes | binary}}B\">\n                              <span class=\"far fa-copy\"></span>&nbsp;{{model[folder.id].localFiles | alwaysNumber | localeNumber}}&ensp;\n                              <span class=\"far fa-folder\"></span>&nbsp;{{model[folder.id].localDirectories | alwaysNumber | localeNumber}}&ensp;\n                              <span class=\"far fa-hdd\"></span>&nbsp;~{{model[folder.id].localBytes | binary}}B\n                            </span>\n                          </div>\n                          <div ng-if=\"model[folder.id].ignorePatterns\">\n                            <a href=\"\" ng-click=\"editFolderExisting(folder, '#folder-ignores')\"><i class=\"small\" translate>Reduced by ignore patterns</i></a>\n                          </div>\n                          <div ng-if=\"folder.ignoreDelete\">\n                            <i class=\"small\">\n                              <span translate>Altered by ignoring deletes.</span>\n                              <a href=\"{{docsURL('advanced/folder-ignoredelete')}}\" target=\"_blank\">\n                                <span class=\"fas fa-question-circle\"></span>&nbsp;<span translate>Help</span>\n                              </a>\n                            </i>\n                          </div>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"model[folder.id].needTotalItems > 0\">\n                        <th><span class=\"fas fa-fw fa-cloud-download-alt\"></span>&nbsp;<span translate>Out of Sync Items</span></th>\n                        <td class=\"text-right\">\n                          <a href=\"\" ng-click=\"showNeed(folder.id)\">{{model[folder.id].needTotalItems | alwaysNumber | localeNumber}} <span translate>items</span>, ~{{model[folder.id].needBytes | binary}}B</a>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"folderStatus(folder) === 'scanning' && scanRate(folder.id) > 0\">\n                        <th><span class=\"fas fa-fw fa-hourglass-half\"></span>&nbsp;<span translate>Scan Time Remaining</span></th>\n                        <td class=\"text-right\">\n                          <span tooltip data-original-title=\"{{scanRate(folder.id) | binary}}B/s\">~ {{scanRemaining(folder.id)}}</span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"hasFailedFiles(folder.id)\">\n                        <th><span class=\"fas fa-fw fa-exclamation-circle\"></span>&nbsp;<span translate>Failed Items</span></th>\n                        <!-- Show the number of failed items as a link to bring up the list. -->\n                        <td class=\"text-right\">\n                          <a href=\"\" ng-click=\"showFailed(folder.id)\">{{model[folder.id].pullErrors | alwaysNumber | localeNumber}}&nbsp;<span translate>items</span></a>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"hasReceiveOnlyChanged(folder)\">\n                        <th><span class=\"fas fa-fw fa-exclamation-circle\"></span>&nbsp;<span translate>Locally Changed Items</span></th>\n                        <td class=\"text-right\">\n                          <a href=\"\" ng-click=\"showLocalChanged(folder.id, folder.type)\">{{model[folder.id].receiveOnlyTotalItems | alwaysNumber | localeNumber}} <span translate>items</span>, ~{{model[folder.id].receiveOnlyChangedBytes | binary}}B</a>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"folder.type != 'sendreceive'\">\n                        <th><span class=\"fas fa-fw fa-folder\"></span>&nbsp;<span translate>Folder Type</span></th>\n                        <td class=\"text-right\">\n                          <span ng-if=\"folder.type == 'sendonly'\" translate>Send Only</span>\n                          <span ng-if=\"folder.type == 'receiveonly'\" translate>Receive Only</span>\n                          <span ng-if=\"folder.type == 'receiveencrypted'\" translate>Receive Encrypted</span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"folder.ignorePerms\">\n                        <th><span class=\"far fa-fw fa-minus-square\"></span>&nbsp;<span translate>Ignore Permissions</span></th>\n                        <td class=\"text-right\">\n                          <span translate>Yes</span>\n                        </td>\n                      </tr>\n                      <tr>\n                        <th><span class=\"fas fa-fw fa-refresh\"></span>&nbsp;<span translate>Rescans</span></th>\n                        <td class=\"text-right\">\n                          <div ng-if=\"folder.rescanIntervalS > 0\">\n                            <span ng-if=\"!folder.fsWatcherEnabled\" tooltip data-original-title=\"{{'Periodic scanning at given interval and disabled watching for changes' | translate}}\">\n                              <span class=\"far fa-clock\"></span>&nbsp;{{folder.rescanIntervalS | duration}}&ensp;\n                              <span class=\"fas fa-eye-slash\"></span>&nbsp;<span translate>Disabled</span>\n                            </span>\n                            <span ng-if=\"folder.fsWatcherEnabled && (!model[folder.id].watchError || folder.paused || folderStatus(folder) === 'stopped')\" tooltip data-original-title=\"{{'Periodic scanning at given interval and enabled watching for changes' | translate}}\">\n                              <span class=\"far fa-clock\"></span>&nbsp;{{folder.rescanIntervalS | duration}}&ensp;\n                              <span class=\"fas fa-eye\"></span>&nbsp;<span translate>Enabled</span>\n                            </span>\n                            <span ng-if=\"folder.fsWatcherEnabled && !folder.paused && folderStatus(folder) !== 'stopped' && model[folder.id].watchError\" tooltip data-original-title=\"{{'Periodic scanning at given interval and failed setting up watching for changes, retrying every 1m:' | translate}}<br/>{{model[folder.id].watchError}}\">\n                              <span class=\"far fa-clock\"></span>&nbsp;{{folder.rescanIntervalS | duration}}&ensp;\n                              <span class=\"fas fa-eye-slash\"></span>&nbsp;<span translate>Failed to setup, retrying</span>\n                            </span>\n                          </div>\n                          <div ng-if=\"folder.rescanIntervalS <= 0\">\n                            <span ng-if=\"!folder.fsWatcherEnabled\" tooltip data-original-title=\"{{'Disabled periodic scanning and disabled watching for changes' | translate}}\">\n                              <span class=\"far fa-clock\"></span>&nbsp;<span translate>Disabled</span>&ensp;\n                              <span class=\"fas fa-eye-slash\"></span>&nbsp;<span translate>Disabled</span>\n                            </span>\n                            <span ng-if=\"folder.fsWatcherEnabled && (!model[folder.id].watchError || folder.paused || folderStatus(folder) === 'stopped')\" tooltip data-original-title=\"{{'Disabled periodic scanning and enabled watching for changes' | translate}}\">\n                              <span class=\"far fa-clock\"></span>&nbsp;<span translate>Disabled</span>&ensp;\n                              <span class=\"fas fa-eye\"></span>&nbsp;<span translate>Enabled</span>\n                            </span>\n                            <span ng-if=\"folder.fsWatcherEnabled && !folder.paused && folderStatus(folder) !== 'stopped' && model[folder.id].watchError\" tooltip data-original-title=\"{{'Disabled periodic scanning and failed setting up watching for changes, retrying every 1m:' | translate}}<br/>{{model[folder.id].watchError}}\">\n                              <span class=\"far fa-clock\"></span>&nbsp;<span translate>Disabled</span>&ensp;\n                              <span class=\"fas fa-eye-slash\"></span>&nbsp;<span translate>Failed to setup, retrying</span>\n                            </span>\n                          </div>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"folder.order != 'random' && folder.type != 'sendonly'\">\n                        <th><span class=\"fas fa-fw fa-sort\"></span>&nbsp;<span translate>File Pull Order</span></th>\n                        <td class=\"text-right\" ng-switch=\"folder.order\">\n                          <span ng-switch-when=\"random\" translate>Random</span>\n                          <span ng-switch-when=\"alphabetic\" translate>Alphabetic</span>\n                          <span ng-switch-when=\"smallestFirst\" translate>Smallest First</span>\n                          <span ng-switch-when=\"largestFirst\" translate>Largest First</span>\n                          <span ng-switch-when=\"oldestFirst\" translate>Oldest First</span>\n                          <span ng-switch-when=\"newestFirst\" translate>Newest First</span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"folder.versioning.type\">\n                        <th><span class=\"fa fa-fw fa-file\"></span>&nbsp;<span translate>File Versioning</span></th>\n                        <td class=\"text-right\">\n                          <span ng-switch=\"folder.versioning.type\">\n                            <span ng-switch-when=\"trashcan\" translate>Trash Can</span>\n                            <span ng-switch-when=\"simple\" translate>Simple</span>\n                            <span ng-switch-when=\"staggered\" translate>Staggered</span>\n                            <span ng-switch-when=\"external\" tooltip data-original-title=\"<span class='text-monospace'>{{folder.versioning.params.command}}</span>\" translate>External</span>\n                          </span>\n                          <span ng-if=\"folder.versioning.type != 'external'\">\n                            <span ng-if=\"(folder.versioning.type == 'trashcan' || folder.versioning.type == 'simple') && folder.versioning.params.cleanoutDays != versioningDefaults.trashcanClean\" tooltip data-original-title=\"{{'Clean out after' | translate}}\">\n                              &ensp;<span class=\"fa fa-calendar\"></span>&nbsp;{{folder.versioning.params.cleanoutDays * 86400 | duration:\"d\"}}\n                            </span>\n                            <span ng-if=\"folder.versioning.type == 'simple' && folder.versioning.params.keep != versioningDefaults.simpleKeep\" tooltip data-original-title=\"{{'Keep Versions' | translate}}\">\n                              &ensp;<span class=\"fa fa-file-archive-o\"></span>&nbsp;{{folder.versioning.params.keep}}\n                            </span>\n                            <span ng-if=\"folder.versioning.type == 'staggered' && folder.versioning.params.maxAge / 86400 != versioningDefaults.staggeredMaxAge\" tooltip data-original-title=\"{{'Maximum Age' | translate}}\">\n                              &ensp;<span class=\"fa fa-calendar\"></span>&nbsp;<span ng-if=\"folder.versioning.params.maxAge == 0\" translate>Forever</span><span ng-if=\"folder.versioning.params.maxAge > 0\">{{folder.versioning.params.maxAge | duration}}</span>\n                            </span>\n                            <span ng-if=\"folder.versioning.cleanupIntervalS != versioningDefaults.cleanupIntervalS\" tooltip data-original-title=\"{{'Cleanup Interval' | translate}}\">\n                              &ensp;<span class=\"fa fa-recycle\"></span>&nbsp;<span ng-if=\"folder.versioning.cleanupIntervalS == 0\" translate>Disabled</span><span ng-if=\"folder.versioning.cleanupIntervalS > 0\">{{folder.versioning.cleanupIntervalS | duration}}</span>\n                            </span>\n                            <!-- Keep the path last, so that it truncates without pushing other information out of the screen. -->\n                            <span ng-if=\"folder.versioning.fsPath != ''\" tooltip data-original-title=\"{{folder.versioning.fsPath}}\">\n                              &ensp;<span class=\"fa fa-folder-open-o\"></span>&nbsp;{{folder.versioning.fsPath}}\n                            </span>\n                          </span>\n                        </td>\n                      </tr>\n                      <tr>\n                        <th><span class=\"fas fa-fw fa-share-alt\"></span>&nbsp;<span translate>Shared With</span></th>\n                        <td class=\"text-right\">\n                          <span tooltip data-original-title=\"{{sharesFolder(folder)}} {{folderHasUnacceptedDevices(folder) ? '<br/>(<sup>1</sup>' + ('The remote device has not accepted sharing this folder.' | translate) + ')' : ''}} {{folderHasPausedDevices(folder) ? '<br/>(<sup>2</sup>' + ('The remote device has paused this folder.' | translate) + ')' : ''}}\" ng-bind-html=\"sharesFolder(folder)\"></span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"folderStats[folder.id].lastScan\">\n                        <th><span class=\"far fa-fw fa-clock\"></span>&nbsp;<span translate>Last Scan</span></th>\n                        <td translate ng-if=\"folderStats[folder.id].lastScanDays >= 365\" class=\"text-right\">Never</td>\n                        <td ng-if=\"folderStats[folder.id].lastScanDays < 365\" class=\"text-right\">\n                          <span>{{folderStats[folder.id].lastScan | date:'yyyy-MM-dd HH:mm:ss'}}</span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"folder.type != 'sendonly' && folder.type != 'receiveencrypted' && folderStats[folder.id].lastFile && folderStats[folder.id].lastFile.filename\">\n                        <th><span class=\"fas fa-fw fa-exchange-alt\"></span>&nbsp;<span translate>Latest Change</span></th>\n                        <td class=\"text-right\">\n                          <span tooltip data-original-title=\"{{folderStats[folder.id].lastFile.filename}} @ {{folderStats[folder.id].lastFile.at | date:'yyyy-MM-dd HH:mm:ss'}}\">\n                            <span translate translate-value-file=\"{{folderStats[folder.id].lastFile.filename | basename}}\" ng-if=\"!folderStats[folder.id].lastFile.deleted\">Updated {%file%}</span>\n                            <span translate translate-value-file=\"{{folderStats[folder.id].lastFile.filename | basename}}\" ng-if=\"folderStats[folder.id].lastFile.deleted\">Deleted {%file%}</span>\n                          </span>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div class=\"panel-footer\">\n                  <button type=\"button\" class=\"btn btn-sm btn-danger pull-left\" ng-click=\"revertOverrideConfirmationModal('override', folder.id)\" ng-if=\"folderStatus(folder) == 'outofsync' && folder.type == 'sendonly'\">\n                    <span class=\"fas fa-arrow-circle-up\"></span>&nbsp;<span translate>Override Changes</span>\n                  </button>\n                  <button type=\"button\" class=\"btn btn-sm btn-danger pull-left\" ng-click=\"revertOverrideConfirmationModal('revert', folder.id)\" ng-if=\"hasReceiveOnlyChanged(folder)\">\n                    <span class=\"fa fa-arrow-circle-down\"></span>&nbsp;<span translate>Revert Local Changes</span>\n                  </button>\n                  <button type=\"button\" class=\"btn btn-sm btn-danger pull-left\" ng-click=\"revertOverrideConfirmationModal('deleteEnc', folder.id)\" ng-if=\"hasReceiveEncryptedItems(folder)\">\n                    <span class=\"fa fa-minus-circle\"></span>&nbsp;<span translate>Delete Unexpected Items</span>\n                  </button>\n                  <span class=\"pull-right\">\n                    <button ng-if=\"!folder.paused\" type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"setFolderPause(folder.id, true)\">\n                      <span class=\"fas fa-pause\"></span>&nbsp;<span translate>Pause</span>\n                    </button>\n                    <button ng-if=\"folder.paused\" type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"setFolderPause(folder.id, false)\">\n                      <span class=\"fas fa-play\"></span>&nbsp;<span translate>Resume</span>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"restoreVersions.show(folder.id)\" ng-if=\"folder.versioning.type && folder.versioning.type != 'external'\" ng-disabled=\"folder.paused\">\n                      <span class=\"fas fa-undo\"></span>&nbsp;<span translate>Versions</span>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"rescanFolder(folder.id)\" ng-disabled=\"['idle', 'stopped', 'unshared', 'outofsync', 'faileditems', 'localadditions'].indexOf(folderStatus(folder)) < 0\">\n                      <span class=\"fas fa-refresh\"></span>&nbsp;<span translate>Rescan</span>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"editFolderExisting(folder)\">\n                      <span class=\"fas fa-pencil-alt\"></span>&nbsp;<span translate>Edit</span>\n                    </button>\n                  </span>\n                  <div class=\"clearfix\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <span class=\"pull-right\">\n            <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"setAllFoldersPause(true)\" ng-if=\"isAtleastOneFolderPausedStateSetTo(false)\">\n              <span class=\"fas fa-pause\"></span>&nbsp;<span translate>Pause All</span>\n            </button>\n            <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"setAllFoldersPause(false)\" ng-if=\"isAtleastOneFolderPausedStateSetTo(true)\">\n              <span class=\"fas fa-play\"></span>&nbsp;<span translate>Resume All</span>\n            </button>\n            <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"rescanAllFolders()\" ng-if=\"folderList().length > 0\" ng-disabled=\"!isAtleastOneFolderPausedStateSetTo(false)\">\n              <span class=\"fas fa-refresh\"></span>&nbsp;<span translate>Rescan All</span>\n            </button>\n            <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"addFolder()\">\n              <span class=\"fas fa-plus\"></span>&nbsp;<span translate>Add Folder</span>\n            </button>\n          </span>\n          <div class=\"clearfix\"></div>\n          <hr class=\"visible-sm\"/>\n        </div>\n\n        <!-- Device list (top right) -->\n\n        <!-- This device -->\n\n        <div class=\"col-md-6\" aria-label=\"{{'Devices' | translate}}\" role=\"region\">\n          <h3 translate>This Device</h3>\n          <div class=\"panel panel-default\" ng-repeat=\"deviceCfg in [thisDevice()]\">\n            <button class=\"btn panel-heading\" data-toggle=\"collapse\" data-target=\"#device-this\" aria-expanded=\"true\">\n              <h4 class=\"panel-title\">\n                <identicon class=\"panel-icon\" data-value=\"deviceCfg.deviceID\"></identicon>\n                <div class=\"panel-title-text\">{{deviceName(deviceCfg)}}</div>\n              </h4>\n            </button>\n            <div id=\"device-this\" class=\"panel-collapse collapse in\">\n              <div class=\"panel-body\">\n                <table class=\"table table-condensed table-striped table-auto\">\n                  <tbody>\n                    <tr>\n                      <th><span class=\"fas fa-fw fa-cloud-download-alt\"></span>&nbsp;<span translate>Download Rate</span></th>\n                      <td class=\"text-right\">\n                        <a href=\"#\" class=\"toggler\" ng-click=\"toggleUnits()\">\n                          <span ng-if=\"!metricRates\">{{connectionsTotal.inbps | binary}}B/s</span>\n                          <span ng-if=\"metricRates\">{{connectionsTotal.inbps*8 | metric}}bps</span>\n                          ({{connectionsTotal.inBytesTotal | binary}}B)\n                          <small ng-if=\"config.options.maxRecvKbps > 0\"><br/>\n                            <i class=\"text-muted\"><span translate>Limit</span>:\n                              <span ng-if=\"!metricRates\">{{config.options.maxRecvKbps*1024 | binary}}B/s</span>\n                              <span ng-if=\"metricRates\">{{config.options.maxRecvKbps*1024*8 | metric}}bps</span>\n                            </i>\n                          </small>\n                        </a>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th><span class=\"fas fa-fw fa-cloud-upload-alt\"></span>&nbsp;<span translate>Upload Rate</span></th>\n                      <td class=\"text-right\">\n                        <a href=\"#\" class=\"toggler\" ng-click=\"toggleUnits()\">\n                          <span ng-if=\"!metricRates\">{{connectionsTotal.outbps | binary}}B/s</span>\n                          <span ng-if=\"metricRates\">{{connectionsTotal.outbps*8 | metric}}bps</span>\n                          ({{connectionsTotal.outBytesTotal | binary}}B)\n                          <small ng-if=\"config.options.maxSendKbps > 0\"><br/>\n                            <i class=\"text-muted\"><span translate>Limit</span>:\n                              <span ng-if=\"!metricRates\">{{config.options.maxSendKbps*1024 | binary}}B/s</span>\n                              <span ng-if=\"metricRates\">{{config.options.maxSendKbps*1024*8 | metric}}bps</span>\n                            </i>\n                          </small>\n                        </a>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th><span class=\"fas fa-fw fa-home\"></span>&nbsp;<span translate>Local State (Total)</span></th>\n                      <td class=\"text-right\">\n                          <span tooltip data-original-title=\"{{localStateTotal.files | alwaysNumber | localeNumber}} {{'files' | translate}}, {{ localStateTotal.directories | alwaysNumber | localeNumber}} {{'directories' | translate}}, ~{{ localStateTotal.bytes | binary}}B\">\n                            <span class=\"far fa-copy\"></span>&nbsp;{{localStateTotal.files | alwaysNumber | localeNumber}}&ensp;\n                            <span class=\"far fa-folder\"></span>&nbsp;{{localStateTotal.directories| alwaysNumber | localeNumber}}&ensp;\n                            <span class=\"far fa-hdd\"></span>&nbsp;~{{localStateTotal.bytes | binary}}B\n                          </span>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th><span class=\"fas fa-fw fa-sitemap\"></span>&nbsp;<span translate>Listeners</span></th>\n                      <td class=\"text-right\">\n                        <span class=\"data\" tooltip data-original-title=\"{{'Show detailed listener status' | translate}}.\">\n                          <a href=\"\" ng-class=\"{'text-success': listenersTotal > 0 && listenersFailed.length == 0, 'text-danger': listenersTotal > 0 && listenersFailed.length == listenersTotal}\" ng-click=\"showListenerStatus()\">\n                            {{listenersTotal-listenersFailed.length}}/{{listenersTotal}}\n                          </a>\n                        </span>\n                      </td>\n                    </tr>\n                    <tr ng-if=\"system.discoveryEnabled\">\n                      <th><span class=\"fas fa-fw fa-map-signs\"></span>&nbsp;<span translate>Discovery</span></th>\n                      <td class=\"text-right\">\n                        <span class=\"data\" tooltip data-original-title=\"{{'Show detailed discovery status' | translate}}.\">\n                          <a href=\"\" ng-class=\"{'text-success': discoveryFailed.length == 0, 'text-danger': discoveryFailed.length == discoveryTotal}\" ng-click=\"showDiscoveryStatus()\">\n                            {{discoveryTotal-discoveryFailed.length}}/{{discoveryTotal}}\n                          </a>\n                        </span>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th><span class=\"far fa-fw fa-clock\"></span>&nbsp;<span translate>Uptime</span></th>\n                      <td class=\"text-right\">{{system.uptime | duration:\"m\"}}</td>\n                    </tr>\n                    <tr>\n                      <th><span class=\"fas fa-fw fa-qrcode\"></span>&nbsp;<span translate>Identification</span></th>\n                      <td class=\"text-right\">\n                        <span tooltip data-original-title=\"{{'Click to see full identification string and QR code.' | translate}}\">\n                          <a href=\"\" ng-click=\"showDeviceIdentification(thisDevice())\">{{deviceShortID(deviceCfg.deviceID)}}</a>\n                        </span>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th><span class=\"fas fa-fw fa-tag\"></span>&nbsp;<span translate>Version</span></th>\n                      <td class=\"text-right no-overflow-ellipse\">{{versionString()}}</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n\n          <!-- Remote devices -->\n          <h3><span translate>Remote Devices</span> <span ng-if=\"otherDevices().length > 1\"> ({{otherDevices().length}})</span></h3>\n          <div class=\"panel-group\" id=\"devices\">\n            <div class=\"panel panel-default\" ng-repeat=\"deviceCfg in otherDevices()\">\n              <button class=\"btn panel-heading\" data-toggle=\"collapse\" data-parent=\"#devices\" data-target=\"#device-{{$index}}\" aria-expanded=\"false\">\n                <div class=\"panel-progress\" ng-show=\"deviceStatus(deviceCfg) == 'syncing'\" ng-attr-style=\"width: {{completion[deviceCfg.deviceID]._total | percent}}\"></div>\n                <h4 class=\"panel-title\">\n                  <identicon class=\"panel-icon\" data-value=\"deviceCfg.deviceID\"></identicon>\n                  <span class=\"pull-right text-{{deviceClass(deviceCfg)}}\">\n                    <span ng-switch=\"deviceStatus(deviceCfg)\" class=\"remote-devices-panel\">\n                      <span ng-switch-when=\"insync\"><span class=\"hidden-xs\" translate>Up to Date</span><span class=\"visible-xs\" aria-label=\"{{'Up to Date' | translate}}\"><i class=\"fas fa-fw fa-check\"></i></span></span>\n                      <span ng-switch-when=\"unused-insync\"><span class=\"hidden-xs\" translate>Connected (Unused)</span><span class=\"visible-xs\" aria-label=\"{{'Connected (Unused)' | translate}}\"><i class=\"fas fa-fw fa-unlink\"></i></span></span>\n                      <span ng-switch-when=\"syncing\">\n                        <span class=\"hidden-xs\" translate>Syncing</span> ({{completion[deviceCfg.deviceID]._total | percent}}, {{completion[deviceCfg.deviceID]._needBytes | binary}}B)\n                      </span>\n                      <span ng-switch-when=\"paused\"><span class=\"hidden-xs\" translate>Paused</span><span class=\"visible-xs\" aria-label=\"{{'Paused' | translate}}\"><i class=\"fas fa-fw fa-pause\"></i></span></span>\n                      <span ng-switch-when=\"unused-paused\"><span class=\"hidden-xs\" translate>Paused (Unused)</span><span class=\"visible-xs\" aria-label=\"{{'Paused (Unused)' | translate}}\"><i class=\"fas fa-fw fa-unlink\"></i></span></span>\n                      <span ng-switch-when=\"disconnected\"><span class=\"hidden-xs\" translate>Disconnected</span><span class=\"visible-xs\" aria-label=\"{{'Disconnected' | translate}}\"><i class=\"fas fa-fw fa-power-off\"></i></span></span>\n                      <span ng-switch-when=\"disconnected-inactive\"><span class=\"hidden-xs\" translate>Disconnected (Inactive)</span><span class=\"visible-xs\" aria-label=\"{{'Disconnected (Inactive)' | translate}}\"><i class=\"fas fa-fw fa-power-off\"></i></span></span>\n                      <span ng-switch-when=\"unused-disconnected\"><span class=\"hidden-xs\" translate>Disconnected (Unused)</span><span class=\"visible-xs\" aria-label=\"{{'Disconnected (Unused)' | translate}}\"><i class=\"fas fa-fw fa-unlink\"></i></span></span>\n                    </span>\n                    <span class=\"remote-devices-panel\">\n                      <span ng-class=\"rdConnTypeIcon(rdConnType(deviceCfg.deviceID))\" class=\"reception reception-theme\"></span>\n                    </span>\n                  </span>\n                  <div class=\"panel-title-text\">{{deviceName(deviceCfg)}}</div>\n                </h4>\n              </button>\n              <div id=\"device-{{$index}}\" class=\"panel-collapse collapse\">\n                <div class=\"panel-body\">\n                  <table class=\"table table-condensed table-striped table-auto\">\n                    <tbody>\n                      <tr ng-if=\"!connections[deviceCfg.deviceID].connected\">\n                        <th><span class=\"fas fa-fw fa-eye\"></span>&nbsp;<span translate>Last seen</span></th>\n                        <td class=\"text-right\">\n                          <div ng-if=\"!deviceStats[deviceCfg.deviceID].lastSeenDays\" translate>\n                            Never\n                          </div>\n                          <div ng-if=\"deviceStats[deviceCfg.deviceID].lastSeenDays\">\n                            <div>\n                              {{deviceStats[deviceCfg.deviceID].lastSeen | date:\"yyyy-MM-dd HH:mm:ss\"}}\n                            </div>\n                            <div ng-if=\"deviceStats[deviceCfg.deviceID].lastSeenDays >= 7\">\n                              <i ng-if=\"deviceStats[deviceCfg.deviceID].lastSeenDays < 30\" translate>More than a week ago</i>\n                              <i class=\"text-warning\" ng-if=\"deviceStats[deviceCfg.deviceID].lastSeenDays >= 30 && deviceStats[deviceCfg.deviceID].lastSeenDays < 365\" translate>More than a month ago</i>\n                              <i class=\"text-danger\" ng-if=\"deviceStats[deviceCfg.deviceID].lastSeenDays >= 365\" translate>More than a year ago</i>\n                            </div>\n                          </div>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"!connections[deviceCfg.deviceID].connected && deviceFolders(deviceCfg).length > 0\">\n                        <th><span class=\"fas fa-fw fa-cloud\"></span>&nbsp;<span translate>Sync Status</span></th>\n                        <td translate ng-if=\"completion[deviceCfg.deviceID]._total == 100\" class=\"text-right\">Up to Date</td>\n                        <td ng-if=\"completion[deviceCfg.deviceID]._total < 100\" class=\"text-right\">\n                            <span class=\"hidden-xs\" translate>Out of Sync</span> ({{completion[deviceCfg.deviceID]._total | percent}})\n                        </td>\n                      </tr>\n                      <tr ng-if=\"connections[deviceCfg.deviceID].connected\">\n                        <th><span class=\"fas fa-fw fa-cloud-download-alt\"></span>&nbsp;<span translate>Download Rate</span></th>\n                        <td class=\"text-right\">\n                          <a href=\"#\" class=\"toggler\" ng-click=\"toggleUnits()\">\n                            <span ng-if=\"!metricRates\">{{connections[deviceCfg.deviceID].inbps | binary}}B/s</span>\n                            <span ng-if=\"metricRates\">{{connections[deviceCfg.deviceID].inbps*8 | metric}}bps</span>\n                            ({{connections[deviceCfg.deviceID].inBytesTotal | binary}}B)\n                            <small ng-if=\"deviceCfg.maxRecvKbps > 0\"><br/>\n                              <i class=\"text-muted\"><span translate>Limit</span>:\n                                <span ng-if=\"!metricRates\">{{deviceCfg.maxRecvKbps*1024 | binary}}B/s</span>\n                                <span ng-if=\"metricRates\">{{deviceCfg.maxRecvKbps*1024*8 | metric}}bps</span>\n                              </i>\n                            </small>\n                          </a>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"connections[deviceCfg.deviceID].connected\">\n                        <th><span class=\"fas fa-fw fa-cloud-upload-alt\"></span>&nbsp;<span translate>Upload Rate</span></th>\n                        <td class=\"text-right\">\n                          <a href=\"#\" class=\"toggler\" ng-click=\"toggleUnits()\">\n                            <span ng-if=\"!metricRates\">{{connections[deviceCfg.deviceID].outbps | binary}}B/s</span>\n                            <span ng-if=\"metricRates\">{{connections[deviceCfg.deviceID].outbps*8 | metric}}bps</span>\n                            ({{connections[deviceCfg.deviceID].outBytesTotal | binary}}B)\n                            <small ng-if=\"deviceCfg.maxSendKbps > 0\"><br/>\n                              <i class=\"text-muted\"><span translate>Limit</span>:\n                                <span ng-if=\"!metricRates\">{{deviceCfg.maxSendKbps*1024 | binary}}B/s</span>\n                                <span ng-if=\"metricRates\">{{deviceCfg.maxSendKbps*1024*8 | metric}}bps</span>\n                              </i>\n                            </small>\n                          </a>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"completion[deviceCfg.deviceID]._needItems\">\n                        <th><span class=\"fas fa-fw fa-exchange-alt\"></span>&nbsp;<span translate>Out of Sync Items</span></th>\n                        <td class=\"text-right\">\n                          <a href=\"\" ng-click=\"showRemoteNeed(deviceCfg)\">{{completion[deviceCfg.deviceID]._needItems | alwaysNumber | localeNumber}} <span translate>items</span>, ~{{completion[deviceCfg.deviceID]._needBytes | binary}}B</a>\n                        </td>\n                      </tr>\n                      <tr>\n                        <th><span class=\"fas fa-fw fa-link\"></span>&nbsp;<span translate>Address</span></th>\n                        <td ng-if=\"connections[deviceCfg.deviceID].connected\" class=\"text-right\">\n                          <span tooltip data-original-title=\"{{ connections[deviceCfg.deviceID].type.indexOf('Relay') > -1 ? '' : connections[deviceCfg.deviceID].type }} {{ connections[deviceCfg.deviceID].crypto }}\">\n                            {{deviceAddr(deviceCfg)}}\n                          </span>\n                        </td>\n                        <td ng-if=\"!connections[deviceCfg.deviceID].connected\" class=\"text-right\">\n                          <span ng-repeat=\"addr in deviceCfg.addresses\">\n                            <span tooltip data-original-title=\"{{'Configured' | translate}}\">{{addr}}</span><br>\n                            <small ng-if=\"system.lastDialStatus[addr].error\" tooltip data-original-title=\"{{system.lastDialStatus[addr].error}}\" class=\"text-danger\">{{abbreviatedError(addr)}}<br></small>\n                          </span>\n                          <span ng-repeat=\"addr in discoveryCache[deviceCfg.deviceID].addresses\">\n                            <span tooltip data-original-title=\"{{'Discovered' | translate}}\">{{addr}}</span><br>\n                            <small ng-if=\"system.lastDialStatus[addr].error\" tooltip data-original-title=\"{{system.lastDialStatus[addr].error}}\" class=\"text-danger\">{{abbreviatedError(addr)}}<br></small>\n                          </span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"connections[deviceCfg.deviceID].connected\">\n                        <th><span class=\"reception reception-4 reception-theme\"></span>&nbsp;<span translate>Connection Type</span></th>\n                        <td class=\"text-right\">\n                          <span tooltip data-original-title=\"{{rdConnDetails(rdConnType(deviceCfg.deviceID))}}\">\n                            {{rdConnTypeString(rdConnType(deviceCfg.deviceID))}}\n                          </span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"deviceCfg.allowedNetworks.length > 0\">\n                        <th><span class=\"fas fa-fw fa-filter\"></span>&nbsp;<span translate>Allowed Networks</span></th>\n                        <td class=\"text-right\">\n                          <span>{{deviceCfg.allowedNetworks.join(\", \")}}</span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"deviceCfg.compression != 'metadata'\">\n                        <th><span class=\"fas fa-fw fa-compress\"></span>&nbsp;<span translate>Compression</span></th>\n                        <td class=\"text-right\">\n                          <span ng-if=\"deviceCfg.compression == 'always'\" translate>All Data</span>\n                          <span ng-if=\"deviceCfg.compression == 'never'\" translate>Off</span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"deviceCfg.introducer\">\n                        <th><span class=\"far fa-fw fa-thumbs-up\"></span>&nbsp;<span translate>Introducer</span></th>\n                        <td translate class=\"text-right\">Yes</td>\n                      </tr>\n                      <tr ng-if=\"deviceCfg.introducedBy\">\n                        <th><span class=\"far fa-fw fa-handshake-o\"></span>&nbsp;<span translate>Introduced By</span></th>\n                        <td class=\"text-right\">{{ deviceName(devices[deviceCfg.introducedBy]) || deviceCfg.introducedBy.substring(0, 5) }}</td>\n                      </tr>\n                      <tr>\n                        <th><span class=\"fas fa-fw fa-qrcode\"></span>&nbsp;<span translate>Identification</span></th>\n                        <td class=\"text-right\">\n                          <span tooltip data-original-title=\"{{'Click to see full identification string and QR code.' | translate}}\">\n                            <a href=\"\" ng-click=\"showDeviceIdentification(deviceCfg)\">{{deviceShortID(deviceCfg.deviceID)}}</a>\n                          </span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"connections[deviceCfg.deviceID].clientVersion\">\n                        <th><span class=\"fas fa-fw fa-tag\"></span>&nbsp;<span translate>Version</span></th>\n                        <td class=\"text-right\">{{connections[deviceCfg.deviceID].clientVersion}}</td>\n                      </tr>\n                      <tr ng-if=\"deviceFolders(deviceCfg).length > 0\">\n                        <th><span class=\"fas fa-fw fa-folder\"></span>&nbsp;<span translate>Folders</span></th>\n                        <td class=\"text-right\">\n                          <span tooltip data-original-title=\"{{sharedFolders(deviceCfg)}} {{deviceHasUnacceptedFolders(deviceCfg) ? '<br/>(<sup>1</sup>' + ('The remote device has not accepted sharing this folder.' | translate) + ')' : '' }} {{deviceHasPausedFolders(deviceCfg) ? '<br/>(<sup>2</sup>' + ('The remote device has paused this folder.' | translate) + ')' : '' }}\" ng-bind-html=\"sharedFolders(deviceCfg)\"></span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"deviceCfg.remoteGUIPort > 0\">\n                        <th><span class=\"fas fa-fw fa-desktop\"></span>&nbsp;<span translate>Remote GUI</span></th>\n                        <td class=\"text-right\" ng-attr-title=\"Port {{deviceCfg.remoteGUIPort}}\">\n                          <!-- Apply RFC6874 encoding for IPv6 link-local zone identifier -->\n                          <a ng-if=\"hasRemoteGUIAddress(deviceCfg)\" href=\"{{remoteGUIAddress(deviceCfg).replace('%', '%25')}}\">{{remoteGUIAddress(deviceCfg)}}</a>\n                          <span translate ng-if=\"!hasRemoteGUIAddress(deviceCfg)\">Unknown</span>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div class=\"panel-footer\">\n                  <span class=\"pull-right\">\n                    <button ng-if=\"!deviceCfg.paused\" type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"setDevicePause(deviceCfg.deviceID, true)\">\n                      <span class=\"fas fa-pause\"></span>&nbsp;<span translate>Pause</span>\n                    </button>\n                    <button ng-if=\"deviceCfg.paused\" type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"setDevicePause(deviceCfg.deviceID, false)\">\n                      <span class=\"fas fa-play\"></span>&nbsp;<span translate>Resume</span>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"editDeviceExisting(deviceCfg)\">\n                      <span class=\"fas fa-pencil-alt\"></span>&nbsp;<span translate>Edit</span>\n                    </button>\n                  </span>\n                  <div class=\"clearfix\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <span class=\"pull-right\">\n              <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"setAllDevicesPause(true)\" ng-if=\"isAtleastOneDevicePausedStateSetTo(false)\">\n                <span class=\"fas fa-pause\"></span>&nbsp;<span translate>Pause All</span>\n              </button>\n              <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"setAllDevicesPause(false)\" ng-if=\"isAtleastOneDevicePausedStateSetTo(true)\">\n                <span class=\"fas fa-play\"></span>&nbsp;<span translate>Resume All</span>\n              </button>\n              <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"globalChanges()\">\n                <span class=\"fas fa-fw fa-info-circle\"></span>&nbsp;<span translate>Recent Changes</span>\n              </button>\n              <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"addDevice()\">\n                <span class=\"fas fa-plus\"></span>&nbsp;<span translate>Add Remote Device</span>\n              </button>\n            </span>\n            <div class=\"clearfix\"></div>\n          </div>\n        </div>\n      </div> <!-- /row -->\n\n    </div> <!-- /container -->\n  </div> <!-- /ng-cloak -->\n\n  <!-- Bottom bar -->\n\n  <nav class=\"navbar navbar-default navbar-fixed-bottom\">\n    <div class=\"container\">\n      <ul class=\"nav navbar-nav\">\n        <li><a class=\"navbar-link\" href=\"https://syncthing.net/\" target=\"_blank\"><span class=\"fas fa-home\"></span>&nbsp;<span translate>Home page</span></a></li>\n        <li><a class=\"navbar-link\" href=\"{{docsURL()}}\" target=\"_blank\"><span class=\"fas fa-book\"></span>&nbsp;<span translate>Documentation</span></a></li>\n        <li><a class=\"navbar-link\" href=\"https://forum.syncthing.net\" target=\"_blank\"><span class=\"fas fa-question-circle\"></span>&nbsp;<span translate>Support</span></a></li>\n        <li><a class=\"navbar-link\" href=\"https://data.syncthing.net/\" target=\"_blank\"><span class=\"fas fa-bar-chart\"></span>&nbsp;<span translate>Statistics</span></a></li>\n        <li><a class=\"navbar-link\" href=\"https://github.com/syncthing/syncthing/releases\" target=\"_blank\"><span class=\"far fa-file-alt\"></span>&nbsp;<span translate>Changelog</span></a></li>\n        <li><a class=\"navbar-link\" href=\"https://github.com/syncthing/syncthing/issues\" target=\"_blank\"><span class=\"fas fa-bug\"></span>&nbsp;<span translate>Bugs</span></a></li>\n        <li><a class=\"navbar-link\" href=\"https://github.com/syncthing/syncthing\" target=\"_blank\"><span class=\"fas fa-wrench\"></span>&nbsp;<span translate>Source Code</span></a></li>\n        <li><a class=\"navbar-link\" href=\"https://twitter.com/syncthing\" target=\"_blank\"><span class=\"fab fa-twitter\"></span>&nbsp;<span translate>Twitter</span></a></li>\n      </ul>\n    </div>\n  </nav>\n\n  <ng-include src=\"'syncthing/core/networkErrorDialogView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/core/httpErrorDialogView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/core/restartingDialogView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/core/upgradingDialogView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/core/shutdownDialogView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/device/idqrModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/device/editDeviceModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/device/globalChangesModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/folder/editFolderModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/folder/restoreVersionsModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/folder/restoreVersionsConfirmation.html'\"></ng-include>\n  <ng-include src=\"'syncthing/settings/settingsModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/settings/advancedSettingsModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/settings/discardChangesConfirmation.html'\"></ng-include>\n  <ng-include src=\"'syncthing/usagereport/usageReportModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/usagereport/usageReportPreviewModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/transfer/neededFilesModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/transfer/failedFilesModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/transfer/remoteNeededFilesModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/transfer/localChangedFilesModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/core/upgradeModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/core/majorUpgradeModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/core/aboutModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/core/connectivityStatusModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/folder/removeFolderDialogView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/folder/revertOverrideView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/device/removeDeviceDialogView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/core/logViewerModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/device/shareDeviceIdDialogView.html'\"></ng-include>\n\n  <!-- vendor scripts -->\n  <script type=\"text/javascript\" src=\"vendor/jquery/jquery-2.2.2.js\"></script>\n  <script type=\"text/javascript\" src=\"vendor/angular/angular.js\"></script>\n  <script type=\"text/javascript\" src=\"vendor/angular/angular-sanitize.js\"></script>\n  <script type=\"text/javascript\" src=\"vendor/angular/angular-translate.js\"></script>\n  <script type=\"text/javascript\" src=\"vendor/angular/angular-translate-loader-static-files.js\"></script>\n  <script type=\"text/javascript\" src=\"vendor/angular/angular-dirPagination.js\"></script>\n  <script type=\"text/javascript\" src=\"vendor/moment/moment.js\"></script>\n  <script type=\"text/javascript\" src=\"vendor/bootstrap/js/bootstrap.js\"></script>\n  <script type=\"text/javascript\" src=\"vendor/daterangepicker/daterangepicker.js\"></script>\n  <script type=\"text/javascript\" src=\"vendor/fancytree/jquery.fancytree-all-deps.js\"></script>\n  <!-- / vendor scripts -->\n\n  <!-- gui application code -->\n  <script type=\"text/javascript\" src=\"syncthing/core/module.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/alwaysNumberFilter.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/basenameFilter.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/binaryFilter.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/localeNumberFilter.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/percentFilter.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/durationFilter.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/eventService.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/identiconDirective.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/languageSelectDirective.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/lastErrorComponentFilter.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/localeService.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/modalDirective.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/metricFilter.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/notificationDirective.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/pathIsSubDirDirective.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/popoverDirective.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/syncthingController.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/tooltipDirective.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/uncamelFilter.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/uniqueFolderDirective.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/validDeviceidDirective.js\"></script>\n  <script type=\"text/javascript\" src=\"assets/lang/valid-langs.js\"></script>\n  <script type=\"text/javascript\" src=\"assets/lang/prettyprint.js\"></script>\n  <script type=\"text/javascript\" src=\"meta.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/app.js\"></script>\n  <!-- / gui application code -->\n\n</body>\n</html>\n", "<modal id=\"about\" status=\"info\" icon=\"far fa-heart\" heading=\"{{'About' | translate}}\" large=\"yes\" closeable=\"yes\">\n  <div class=\"modal-body\">\n    <h1 class=\"text-center\">\n      <img alt=\"Syncthing\" src=\"assets/img/logo-horizontal.svg\" style=\"max-width: 366px; vertical-align: -16px\" />\n      <br />\n      <small>{{versionString()}}</small>\n      <br />\n      <small><i>\"{{version.codename}}\"</i></small>\n    </h1>\n    <p class=\"text-center\">\n      Build {{version.date | date:\"yyyy-MM-dd\"}}\n      <span ng-if=\"version.tags.length\">({{version.tags.join(\", \")}})</span>\n      <br />\n      Copyright &copy; 2014-{{version.date | date:\"yyyy\"}} the Syncthing Authors.\n    </p>\n    <p class=\"text-center\" translate>Syncthing is Free and Open Source Software licensed as MPL v2.0.</p>\n\n    <ul class=\"nav nav-tabs\">\n      <li class=\"active\"><a data-toggle=\"tab\" href=\"#about-authors\" translate>Authors</a></li>\n      <li><a data-toggle=\"tab\" href=\"#about-includes\" translate>Included Software</a></li>\n      <li><a data-toggle=\"tab\" href=\"#about-paths\" translate>Paths</a></li>\n    </ul>\n    <div class=\"tab-content\">\n\n      <div id=\"about-authors\" class=\"tab-pane in active\">\n        <h4 class=\"text-center\" translate>The Syncthing Authors</h4>\n        <div class=\"row\">\n          <div class=\"col-md-12\" id=\"contributor-list\">\nJakob Borg, Audrius Butkevicius, Jesse Lucas, Simon Frei, Alexander Graf, Alexandre Viau, Anderson Mesquita, Andr\u00e9 Colomb, Antony Male, Ben Schulz, Caleb Callaway, Daniel Harte, Evgeny Kuznetsov, Lars K.W. Gohlke, Lode Hoste, Michael Ploujnikov, Nate Morrison, Philippe Schommers, Ryan Sullivan, Sergey Mishin, Stefan Tatschner, Tomasz Wilczy\u0144ski, Wulf Weich, greatroar, Aaron Bieber, Adam Piggott, Adel Qalieh, Alan Pope, Alberto Donato, Aleksey Vasenev, Alessandro G., Alex Lindeman, Alex Xu, Alexandre Alves, Aman Gupta, Andreas Sommer, Andrew Dunham, Andrew Meyer, Andrew Rabert, Andrey D, Anjan Momi, Anthony Goeckner, Antoine Lamielle, Anur, Aranjedeath, Arkadiusz Tymi\u0144ski, Aroun, Arthur Axel fREW Schmidt, Artur Zubilewicz, Aur\u00e9lien Rainone, BAHADIR YILMAZ, Bart De Vries, Ben Curthoys, Ben Shepherd, Ben Sidhom, Benedikt Heine, Benedikt Morbach, Benjamin Nater, Benno F\u00fcnfst\u00fcck, Benny Ng, Boqin Qin, Boris Rybalkin, Brandon Philips, Brendan Long, Brian R. Becker, Carsten Hagemann, Cathryne Linenweaver, Cedric Staniewski, Chih-Hsuan Yen, Choongkyu, Chris Howie, Chris Joel, Chris Tonkinson, Christian Prescott, Colin Kennedy, Cromefire_, Cyprien Devillez, Dale Visser, Dan, Daniel Barczyk, Daniel Bergmann, Daniel Mart\u00ed, Darshil Chanpura, David Rimmer, Denis A., Dennis Wilson, Devon G. Redekopp, Dimitri Papadopoulos Orfanos, Dmitry Saveliev, Domenic Horner, Dominik Heidler, Elias Jarlebring, Elliot Huffman, Emil Hessman, Eng Zer Jun, Eric Lesiuta, Eric P, Erik Meitner, Evan Spensley, Federico Castagnini, Felix Ableitner, Felix Lampe, Felix Unterpaintner, Francois-Xavier Gsell, Frank Isemann, Gahl Saraf, Gilli Sigurdsson, Gleb Sinyavskiy, Graham Miln, Greg, Han Boetes, HansK-p, Harrison Jones, Heiko Zuerker, Hugo Locurcio, Iain Barnett, Ian Johnson, Ikko Ashimine, Ilya Brin, Iskander Sharipov, Jaakko Hannikainen, Jacek Szafarkiewicz, Jack Croft, Jacob, Jake Peterson, James O'Beirne, James Patterson, Jaroslav Lichtblau, Jaroslav Malec, Jauder Ho, Jaya Chithra, Jaya Kumar, Jeffery To, Jens Diemer, Jerry Jacobs, Jochen Voss, Johan Andersson, Johan Vromans, John Rinehart, Jonas Thelemann, Jonathan, Jonathan Cross, Jonta, Jose Manuel Delicado, J\u00f6rg Thalheim, J\u0119drzej Kula, K.B.Dharun Krishna, Kalle Laine, Karol R\u00f3\u017cycki, Kebin Liu, Keith Turner, Kelong Cong, Ken'ichi Kamada, Kevin Allen, Kevin Bushiri, Kevin White, Jr., Kurt Fitzner, LSmithx2, Lars Lehtonen, Laurent Arnoud, Laurent Etiemble, Leo Arias, Liu Siyuan, Lord Landon Agahnim, Lukas Lihotzki, Majed Abdulaziz, Marc Laporte, Marc Pujol, Marcin Dziadus, Marcus Legendre, Mario Majila, Mark Pulford, Martchus, Mateusz Na\u015bciszewski, Mateusz \u017b, Matic Poto\u010dnik, Matt Burke, Matt Robenolt, Matteo Ruina, Maurizio Tomasi, Max, Max Schulze, MaximAL, Maxime Thirouin, MichaIng, Michael Jephcote, Michael Rienstra, Michael Tilli, Mike Boone, MikeLund, MikolajTwarog, Mingxuan Lin, Naveen, Nicholas Rishel, Nick Busey, Nico Stapelbroek, Nicolas Braud-Santoni, Nicolas Perraut, Niels Peter Roest, Nils Jakobi, NinoM4ster, Nitroretro, NoLooseEnds, Oliver Freyermuth, Otiel, Oyebanji Jacob Mayowa, Pablo, Pascal Jungblut, Paul Brit, Pawel Palenica, Pawe\u0142 Rozlach, Peter Badida, Peter Dave Hello, Peter Hoeg, Peter Marquardt, Phani Rithvij, Phil Davis, Phill Luby, Pier Paolo Ramon, Piotr Bejda, Pramodh KP, Quentin Hibon, Rahmi Pruitt, Richard Hartmann, Robert Carosi, Roberto Santalla, Robin Schoonover, Roman Zaynetdinov, Ross Smith II, Ruslan Yevdokymov, Ryan Qian, Sacheendra Talluri, Scott Klupfel, Shaarad Dalvi, Simon Mwepu, Sly_tom_cat, Stefan Kuntz, Steven Eckhoff, Suhas Gundimeda, Taylor Khan, Thomas Hipp, Tim Abell, Tim Howes, Tobias Klauser, Tobias Nygren, Tobias Tom, Tom Jakubowski, Tommy Thorn, Tully Robinson, Tyler Brazier, Tyler Kropp, Unrud, Veeti Paananen, Victor Buinsky, Vik, Vil Brekin, Vladimir Rusinov, William A. Kennington III, Xavier O., Yannic A., andresvia, andyleap, boomsquared, bt90, chenrui, chucic, cui fliter, derekriemer, desbma, entity0xfe, georgespatton, ghjklw, ignacy123, janost, jaseg, jelle van der Waa, jtagcat, klemens, luzpaz, marco-m, mclang, mv1005, otbutz, overkill, perewa, red_led, rubenbe, sec65, villekalliomaki, wangguoliang, wouter bolsterlee, xarx00, xjtdy888, \u4f5b\u8df3\u5899, \u843d\u5fc3\n          </div>\n        </div>\n      </div>\n\n      <div id=\"about-includes\" class=\"tab-pane\">\n        <p translate>Syncthing includes the following software or portions thereof:</p>\n        <ul class=\"list-unstyled two-columns\" id=\"copyright-notices\">\n          <li><a href=\"http://getbootstrap.com/\">Bootstrap</a>, Copyright &copy; 2011-2016 Twitter, Inc.</li>\n          <li><a href=\"https://angularjs.org/\">AngularJS</a>, Copyright &copy; 2010-2014, 2016 Google, Inc.</li>\n          <li><a href=\"http://www.daterangepicker.com/\">Date Range Picker</a>, Copyright &copy; 2012-2018 Dan Grossman.</li>\n          <li><a href=\"https://github.com/mar10/fancytree\">JQuery Fancytree Plugin</a>, Copyright &copy; 2008-2018 Martin Wendt.</li>\n          <li><a href=\"https://forkaweso.me/Fork-Awesome/\">Fork Awesome</a>, Copyright &copy; 2018 Dave Gandy &amp; Fork Awesome.</li>\n          <li><a href=\"http://jquery.com/\">jQuery JavaScript Library</a>, Copyright &copy; jQuery Foundation and other contributors.</li>\n          <li><a href=\"http://momentjs.com/\">moment.js</a>, Copyright &copy; JS Foundation and other contributors.</li>\n          <li><a href=\"https://prometheus.io/\">Prometheus</a>, Copyright &copy; 2012-2015 The Prometheus Authors.</li>\n          <li><a href=\"https://github.com/AudriusButkevicius/go-nat-pmp\">AudriusButkevicius/go-nat-pmp</a>, Copyright &copy; 2013 John Howard Palevich.</li>\n          <li><a href=\"https://github.com/AudriusButkevicius/recli\">AudriusButkevicius/recli</a>, Copyright &copy; 2019 Audrius Butkevicius.</li>\n          <li><a href=\"https://github.com/beorn7/perks\">beorn7/perks</a>, Copyright &copy; 2013 Blake Mizerany.</li>\n          <li><a href=\"https://github.com/pierrec/lz4\">pierrec/lz4</a>, Copyright &copy; 2015 Pierre Curto.</li>\n          <li><a href=\"https://github.com/calmh/du\">calmh/du</a>, Public domain.</li>\n          <li><a href=\"https://github.com/calmh/xdr\">calmh/xdr</a>, Copyright &copy; 2014 Jakob Borg.</li>\n          <li><a href=\"https://github.com/chmduquesne/rollinghash\">chmduquesne/rollinghash</a>, Copyright &copy; 2015 Christophe-Marie Duquesne.</li>\n          <li><a href=\"https://github.com/d4l3k/messagediff\">d4l3k/messagediff</a>, Copyright &copy; 2015 Tristan Rice.</li>\n          <li><a href=\"https://github.com/flynn-archive/go-shlex\">flynn-archive/go-shlex</a>, Copyright &copy; 2012 Google Inc.</li>\n          <li><a href=\"https://github.com/gobwas/glob\">gobwas/glob</a>, Copyright &copy; 2016 Sergey Kamardin.</li>\n          <li><a href=\"https://github.com/gogo/protobuf\">gogo/protobuf</a>, Copyright &copy; 2013 The GoGo Authors.</li>\n          <li><a href=\"https://github.com/golang/groupcache\">golang/groupcache</a>, Copyright &copy; 2013 Google Inc.</li>\n          <li><a href=\"https://github.com/golang/protobuf\">golang/protobuf</a>, Copyright &copy; 2010 The Go Authors.</li>\n          <li><a href=\"https://github.com/golang/snappy\">golang/snappy</a>, Copyright &copy; 2011 The Snappy-Go Authors.</li>\n          <li><a href=\"https://github.com/jackpal/gateway\">jackpal/gateway</a>, Copyright &copy; 2010 Jack Palevich.</li>\n          <li><a href=\"https://github.com/kballard/go-shellquote\">kballard/go-shellquote</a>, Copyright &copy; 2014 Kevin Ballard.</li>\n          <li><a href=\"https://github.com/lib/pq\">lib/pq</a>, Copyright &copy; 2011-2013, 'pq' Contributors, portions Copyright &copy; 2011 Blake Mizerany.</li>\n          <li><a href=\"https://github.com/mattn/go-isatty\">mattn/go-isatty</a>, Copyright &copy; Yasuhiro MATSUMOTO.</li>\n          <li><a href=\"https://github.com/matttproud/golang_protobuf_extensions\">matttproud/golang_protobuf_extensions</a>, Copyright &copy; 2012 Matt T. Proud.</li>\n          <li><a href=\"https://github.com/minio/sha256-simd\">minio/sha256-simd</a>, Copyright &copy; 2016-2017 Minio, Inc.</li>\n          <li><a href=\"https://github.com/oschwald/geoip2-golang\">oschwald/geoip2-golang</a>, Copyright &copy; 2015, Gregory J. Oschwald.</li>\n          <li><a href=\"https://github.com/oschwald/maxminddb-golang\">oschwald/maxminddb-golang</a>, Copyright &copy; 2015, Gregory J. Oschwald.</li>\n          <li><a href=\"https://github.com/petermattis/goid\">petermattis/goid</a>, Copyright &copy; 2015-2016 Peter Mattis.</li>\n          <li><a href=\"https://github.com/pkg/errors\">pkg/errors</a>, Copyright &copy; 2015, Dave Cheney.</li>\n          <li><a href=\"https://github.com/rcrowley/go-metrics\">rcrowley/go-metrics</a>, Copyright &copy; 2012 Richard Crowley.</li>\n          <li><a href=\"https://github.com/sasha-s/go-deadlock\">sasha-s/go-deadlock</a>, Copyright &copy; 2016 sasha-s.</li>\n          <li><a href=\"https://github.com/syncthing/notify\">syncthing/notify</a>, Copyright &copy; 2014-2015 The Notify Authors.</li>\n          <li><a href=\"https://github.com/syndtr/goleveldb\">syndtr/goleveldb</a>, Copyright &copy; 2012 Suryandaru Triandana.</li>\n          <li><a href=\"https://github.com/thejerf/suture\">thejerf/suture</a>, Copyright &copy; 2014-2015 Barracuda Networks, Inc.</li>\n          <li><a href=\"https://github.com/urfave/cli\">urfave/cli</a>, Copyright &copy; 2016 Jeremy Saenz &amp; Contributors.</li>\n          <li><a href=\"https://github.com/vitrun/qart\">vitrun/qart</a>, Copyright &copy; 2010-2011 The Go Authors.</li>\n          <li><a href=\"https://gopkg.in/asn1-ber.v1\">gopkg.in/asn1-ber.v1</a>, Copyright &copy; 2011-2015 Michael Mitton, portions Copyright &copy; 2015-2016 go-asn1-ber Authors.</li>\n          <li><a href=\"https://gopkg.in/ldap.v2\">gopkg.in/ldap.v2</a>, Copyright &copy; 2011-2015 Michael Mitton, portions Copyright &copy; 2015-2016 go-ldap Authors.</li>\n          <li><a href=\"https://golang.org\">The Go Programming Language</a>, Copyright &copy; 2009 The Go Authors.</li>\n          <li>Font Awesome by Dave Gandy - <a href=\"http://fontawesome.io/\">http://fontawesome.io</a></li>\n        </ul>\n      </div>\n\n      <div id=\"about-paths\" class=\"tab-pane\">\n        <table class=\"table table-striped table-auto\">\n          <caption><label translate>Internally used paths:</label></caption>\n          <tbody>\n            <tr>\n              <th translate>User Home</th>\n              <td><code class=\"file-path\">{{ about.paths['baseDir-userHome'] }}</code></td>\n            </tr>\n            <tr>\n              <th><strong translate>Configuration Directory</strong></th>\n              <td><code class=\"file-path\"><strong>{{ about.paths['baseDir-config'] }}</strong></code></td>\n            </tr>\n            <tr>\n              <th translate>Configuration File</th>\n              <td><code class=\"file-path\">{{ about.paths['config'] }}</code></td>\n            </tr>\n            <tr>\n              <th translate>Device Certificate</th>\n              <td><code class=\"file-path\">{{ about.paths['certFile'] }}</code>\n                <br /><code class=\"file-path\">{{ about.paths['keyFile'] }}</code></td>\n            </tr>\n            <tr>\n              <th translate>GUI / API HTTPS Certificate</th>\n              <td><code class=\"file-path\">{{ about.paths['httpsCertFile'] }}</code>\n                <br /><code class=\"file-path\">{{ about.paths['httpsKeyFile'] }}</code></td>\n            </tr>\n            <tr>\n              <th translate>Database Location</th>\n              <td><code class=\"file-path\">{{ about.paths['database'] }}</code></td>\n            </tr>\n            <tr>\n              <th translate>Log File</th>\n              <td><code class=\"file-path\">{{ about.paths['logFile'] }}</code></td>\n            </tr>\n            <tr>\n              <th translate>GUI Override Directory</th>\n              <td><code class=\"file-path\">{{ about.paths['guiAssets'] }}</code></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" data-dismiss=\"modal\">\n      <span class=\"fas fa-times\"></span>&nbsp;<span translate>Close</span>\n    </button>\n  </div>\n</modal>\n", "<div class=\"col-md-6 checkbox\">\n  <label for=\"sharedwith-{{id}}\">\n    <input id=\"sharedwith-{{id}}\" ng-model=\"selected[id]\" type=\"checkbox\" />\n    <span tooltip data-original-title=\"{{id}}\" ng-bind-html=\"label\"></span>\n  </label>\n</div>\n<div class=\"col-md-6\">\n  <div class=\"input-group\">\n    <span class=\"input-group-addon\" ng-switch=\"folderType !== 'receiveencrypted' && !encryptionPasswords[id]\">\n      <span ng-switch-when='true' class=\"fas fa-fw fa-unlock\"></span>\n      <span ng-switch-default class=\"fas fa-fw fa-lock\"></span>\n    </span>\n    <span ng-switch=\"folderType === 'receiveencrypted'\">\n      <span ng-switch-when='true'>\n        <input class=\"form-control input-sm\" type=\"password\" placeholder=\"{{'Received data is already encrypted' | translate}}\" disabled />\n      </span>\n      <span ng-switch-default ng-switch=\"selected[id]\">\n        <span ng-switch-when='true' ng-switch=\"untrusted\">\n          <span ng-switch-when='true' ng-class=\"{'has-error': !encryptionPasswords[id]}\">\n            <input class=\"form-control input-sm\" type=\"{{plain ? 'text' : 'password'}}\" ng-model=\"encryptionPasswords[id]\" required placeholder=\"{{'Device is untrusted, enter encryption password' | translate}}\" />\n          </span>\n          <span ng-switch-default>\n            <input class=\"form-control input-sm\" type=\"{{plain ? 'text' : 'password'}}\" ng-model=\"encryptionPasswords[id]\" placeholder=\"{{'If untrusted, enter encryption password' | translate}}\" />\n          </span>\n        </span>\n        <span ng-switch-default>\n          <input class=\"form-control input-sm\" type=\"password\" placeholder=\"{{'Not shared' | translate}}\" disabled />\n        </span>\n      </span>\n    </span>\n    <span ng-switch=\"selected[id] && folderType !== 'receiveencrypted'\" class=\"input-group-addon\">\n      <span ng-switch-when='true'>\n        <span class=\"button fas fa-fw fa-eye\" ng-click=\"togglePasswordVisibility()\"></span>\n      </span>\n      <span ng-switch-default>\n        <span class=\"button fas fa-fw fa-eye\" disabled></span>\n      </span>\n    </span>\n  </div>\n</div>\n", "angular.module('syncthing.core')\n    .config(function ($locationProvider) {\n        $locationProvider.html5Mode({ enabled: true, requireBase: false }).hashPrefix('!');\n    })\n    .controller('SyncthingController', function ($scope, $http, $location, LocaleService, Events, $filter, $q, $compile, $timeout, $rootScope, $translate) {\n        'use strict';\n\n        // private/helper definitions\n\n        var prevDate = 0;\n        var navigatingAway = false;\n        var online = false;\n        var restarting = false;\n\n        function initController() {\n            LocaleService.autoConfigLocale();\n            setInterval($scope.refresh, 10000);\n            Events.start();\n        }\n\n        // public/scope definitions\n\n        $scope.completion = {};\n        $scope.config = {};\n        $scope.configInSync = true;\n        $scope.connections = {};\n        $scope.errors = [];\n        $scope.model = {};\n        $scope.myID = '';\n        $scope.devices = {};\n        $scope.discoveryCache = {};\n        $scope.protocolChanged = false;\n        $scope.reportData = {};\n        $scope.reportDataPreview = '';\n        $scope.reportPreview = false;\n        $scope.folders = {};\n        $scope.seenError = '';\n        $scope.upgradeInfo = null;\n        $scope.deviceStats = {};\n        $scope.folderStats = {};\n        $scope.pendingDevices = {};\n        $scope.pendingFolders = {};\n        $scope.progress = {};\n        $scope.version = {};\n        $scope.needed = {};\n        $scope.neededFolder = '';\n        $scope.failed = {};\n        $scope.localChanged = {};\n        $scope.scanProgress = {};\n        $scope.themes = [];\n        $scope.globalChangeEvents = {};\n        $scope.metricRates = false;\n        $scope.folderPathErrors = {};\n        $scope.currentSharing = {};\n        $scope.currentFolder = {};\n        $scope.currentDevice = {};\n        $scope.ignores = {\n            text: '',\n            error: null,\n            disabled: false,\n            originalLines: [],\n            defaultLines: [],\n            saved: false,\n        };\n        resetRemoteNeed();\n\n        try {\n            $scope.metricRates = (window.localStorage[\"metricRates\"] == \"true\");\n        } catch (exception) { }\n\n        $scope.versioningDefaults = {\n            selector: \"none\",\n            trashcanClean: 0,\n            cleanupIntervalS: 3600,\n            simpleKeep: 5,\n            staggeredMaxAge: 365,\n            externalCommand: \"\",\n        };\n\n        $scope.localStateTotal = {\n            bytes: 0,\n            directories: 0,\n            files: 0\n        };\n\n        $(window).bind('beforeunload', function () {\n            navigatingAway = true;\n        });\n\n        $scope.$on(\"$locationChangeSuccess\", function () {\n            LocaleService.useLocale($location.search().lang);\n        });\n\n        $scope.needActions = {\n            'rm': 'Del',\n            'rmdir': 'Del (dir)',\n            'sync': 'Sync',\n            'touch': 'Update'\n        };\n        $scope.needIcons = {\n            'rm': 'far fa-fw fa-trash-alt',\n            'rmdir': 'far fa-fw fa-trash-alt',\n            'sync': 'far fa-fw fa-arrow-alt-circle-down',\n            'touch': 'fas fa-fw fa-asterisk'\n        };\n\n        $scope.$on(Events.ONLINE, function () {\n            if (online && !restarting) {\n                return;\n            }\n\n            console.log('UIOnline');\n\n            refreshDeviceStats();\n            refreshFolderStats();\n            refreshGlobalChanges();\n            refreshThemes();\n\n            $q.all([\n                refreshSystem(),\n                refreshDiscoveryCache(),\n                refreshConfig(),\n                refreshCluster(),\n                refreshConnectionStats(),\n            ]).then(function() {\n                $http.get(urlbase + '/system/version').success(function (data) {\n                    console.log(\"version\", data);\n                    if ($scope.version.version && $scope.version.version !== data.version) {\n                        // We already have a version response, but it differs from\n                        // the new one. Reload the full GUI in case it's changed.\n                        document.location.reload(true);\n                    }\n\n                    $scope.version = data;\n                }).error($scope.emitHTTPError);\n\n                $http.get(urlbase + '/svc/report').success(function (data) {\n                    $scope.reportData = data;\n                    if ($scope.system && $scope.config.options.urAccepted > -1 && $scope.config.options.urSeen < $scope.system.urVersionMax && $scope.config.options.urAccepted < $scope.system.urVersionMax) {\n                        // Usage reporting format has changed, prompt the user to re-accept.\n                        $('#ur').modal();\n                    }\n                }).error($scope.emitHTTPError);\n\n                $http.get(urlbase + '/system/upgrade').success(function (data) {\n                    $scope.upgradeInfo = data;\n                }).error(function () {\n                    $scope.upgradeInfo = null;\n                });\n\n                online = true;\n                restarting = false;\n                $('#networkError').modal('hide');\n                $('#restarting').modal('hide');\n                $('#shutdown').modal('hide');\n            }).catch($scope.emitHTTPError);\n        });\n\n        $scope.$on(Events.OFFLINE, function () {\n            if (navigatingAway || !online) {\n                return;\n            }\n\n            console.log('UIOffline');\n            online = false;\n            if (!restarting) {\n                $('#networkError').modal();\n            }\n        });\n\n        $scope.$on('HTTPError', function (event, arg) {\n            // Emitted when a HTTP call fails. We use the status code to try\n            // to figure out what's wrong.\n\n            if (navigatingAway || !online) {\n                return;\n            }\n\n            console.log('HTTPError', arg);\n            online = false;\n            // We sometimes get arg == null from angularjs - no idea why\n            if (!restarting && arg) {\n                if (arg.status === 0) {\n                    // A network error, not an HTTP error\n                    $scope.$emit(Events.OFFLINE);\n                } else if (arg.status >= 400 && arg.status <= 599 && arg.status != 501) {\n                    // A genuine HTTP error. 501/NotImplemented is considered intentional\n                    // and not an error which we need to act upon.\n                    $('#networkError').modal('hide');\n                    $('#restarting').modal('hide');\n                    $('#shutdown').modal('hide');\n                    $('#httpError').modal();\n                }\n            }\n        });\n\n        $scope.$on(Events.STATE_CHANGED, function (event, arg) {\n            var data = arg.data;\n            if ($scope.model[data.folder]) {\n                $scope.model[data.folder].state = data.to;\n                $scope.model[data.folder].error = data.error;\n\n                // If a folder has started scanning, then any scan progress is\n                // also obsolete.\n                if (data.to === 'scanning') {\n                    delete $scope.scanProgress[data.folder];\n                }\n\n                // If a folder finished scanning, then refresh folder stats\n                // to update last scan time.\n                if (data.from === 'scanning' && data.to === 'idle') {\n                    refreshFolderStats();\n                }\n            }\n        });\n\n        $scope.$on(Events.LOCAL_INDEX_UPDATED, function (event, arg) {\n            refreshFolderStats();\n            refreshGlobalChanges();\n        });\n\n        $scope.$on(Events.DEVICE_DISCONNECTED, function (event, arg) {\n            if (!$scope.connections[arg.data.id]) {\n                return;\n            }\n            $scope.connections[arg.data.id].connected = false;\n            refreshDeviceStats();\n        });\n\n        $scope.$on(Events.DEVICE_CONNECTED, function (event, arg) {\n            if (!$scope.connections[arg.data.id]) {\n                $scope.connections[arg.data.id] = {\n                    inbps: 0,\n                    outbps: 0,\n                    inBytesTotal: 0,\n                    outBytesTotal: 0,\n                    type: arg.data.type,\n                    address: arg.data.addr\n                };\n                $scope.completion[arg.data.id] = {\n                    _total: 100,\n                    _needBytes: 0,\n                    _needItems: 0\n                };\n            }\n        });\n\n        $scope.$on(Events.PENDING_DEVICES_CHANGED, function (event, arg) {\n            if (!(arg.data.added || arg.data.removed)) {\n                // Not enough information to update in place, just refresh it completely\n                refreshCluster();\n                return;\n            }\n\n            if (arg.data.added) {\n                arg.data.added.forEach(function (rejected) {\n                    var pendingDevice = {\n                        time: arg.time,\n                        name: rejected.name,\n                        address: rejected.address\n                    };\n                    console.log(\"rejected device:\", rejected.deviceID, pendingDevice);\n                    $scope.pendingDevices[rejected.deviceID] = pendingDevice;\n                });\n            }\n\n            if (arg.data.removed) {\n                arg.data.removed.forEach(function (dev) {\n                    console.log(\"no longer pending device:\", dev.deviceID);\n                    delete $scope.pendingDevices[dev.deviceID];\n                });\n            }\n        });\n\n        $scope.$on(Events.PENDING_FOLDERS_CHANGED, function (event, arg) {\n            if (!(arg.data.added || arg.data.removed)) {\n                // Not enough information to update in place, just refresh it completely\n                refreshCluster();\n                return;\n            }\n\n            if (arg.data.added) {\n                arg.data.added.forEach(function (rejected) {\n                    var offeringDevice = {\n                        time: arg.time,\n                        label: rejected.folderLabel,\n                        receiveEncrypted: rejected.receiveEncrypted,\n                    };\n                    console.log(\"rejected folder\", rejected.folderID, \"from device:\", rejected.deviceID, offeringDevice);\n\n                    var pendingFolder = $scope.pendingFolders[rejected.folderID];\n                    if (pendingFolder === undefined) {\n                        pendingFolder = {\n                            offeredBy: {}\n                        };\n                    }\n                    pendingFolder.offeredBy[rejected.deviceID] = offeringDevice;\n                    $scope.pendingFolders[rejected.folderID] = pendingFolder;\n                });\n            }\n\n            if (arg.data.removed) {\n                arg.data.removed.forEach(function (folderDev) {\n                    console.log(\"no longer pending folder\", folderDev.folderID, \"from device:\", folderDev.deviceID);\n                    if (folderDev.deviceID === undefined) {\n                        delete $scope.pendingFolders[folderDev.folderID];\n                    } else if ($scope.pendingFolders[folderDev.folderID]) {\n                        delete $scope.pendingFolders[folderDev.folderID].offeredBy[folderDev.deviceID];\n                    }\n                });\n            }\n        });\n\n        $scope.$on('ConfigLoaded', function () {\n            if ($scope.config.options.urAccepted === 0) {\n                // If usage reporting has been neither accepted nor declined,\n                // we want to ask the user to make a choice. But we don't want\n                // to bug them during initial setup, so we set a cookie with\n                // the time of the first visit. When that cookie is present\n                // and the time is more than four hours ago, we ask the\n                // question.\n\n                var firstVisit = document.cookie.replace(/(?:(?:^|.*;\\s*)firstVisit\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\");\n                if (!firstVisit) {\n                    document.cookie = \"firstVisit=\" + Date.now() + \";max-age=\" + 30 * 24 * 3600;\n                } else {\n                    if (+firstVisit < Date.now() - 4 * 3600 * 1000) {\n                        $('#ur').modal();\n                    }\n                }\n            }\n        });\n\n        $scope.$on(Events.CONFIG_SAVED, function (event, arg) {\n            updateLocalConfig(arg.data);\n\n            $http.get(urlbase + '/config/insync').success(function (data) {\n                $scope.configInSync = data.configInSync;\n            }).error($scope.emitHTTPError);\n        });\n\n        $scope.$on(Events.DOWNLOAD_PROGRESS, function (event, arg) {\n            var stats = arg.data;\n            var progress = {};\n            for (var folder in stats) {\n                progress[folder] = {};\n                for (var file in stats[folder]) {\n                    var s = stats[folder][file];\n                    var reused = 100 * s.reused / s.total;\n                    var copiedFromOrigin = 100 * s.copiedFromOrigin / s.total;\n                    var copiedFromElsewhere = 100 * s.copiedFromElsewhere / s.total;\n                    var pulled = 100 * s.pulled / s.total;\n                    var pulling = 100 * s.pulling / s.total;\n                    // We try to round up pulling to at least a percent so that it would be at least a bit visible.\n                    if (pulling < 1 && pulled + copiedFromElsewhere + copiedFromOrigin + reused <= 99) {\n                        pulling = 1;\n                    }\n                    progress[folder][file] = {\n                        reused: reused,\n                        copiedFromOrigin: copiedFromOrigin,\n                        copiedFromElsewhere: copiedFromElsewhere,\n                        pulled: pulled,\n                        pulling: pulling,\n                        bytesTotal: s.bytesTotal,\n                        bytesDone: s.bytesDone,\n                    };\n                }\n            }\n            for (var folder in $scope.progress) {\n                if (!(folder in progress)) {\n                    if ($scope.neededFolder === folder) {\n                        $scope.refreshNeed($scope.needed.page, $scope.needed.perpage);\n                    }\n                } else if ($scope.neededFolder === folder) {\n                    for (file in $scope.progress[folder]) {\n                        if (!(file in progress[folder])) {\n                            $scope.refreshNeed($scope.needed.page, $scope.needed.perpage);\n                            break;\n                        }\n                    }\n                }\n            }\n            $scope.progress = progress;\n            console.log(\"DownloadProgress\", $scope.progress);\n        });\n\n        $scope.$on(Events.FOLDER_SUMMARY, function (event, arg) {\n            var data = arg.data;\n            $scope.model[data.folder] = data.summary;\n            recalcLocalStateTotal();\n        });\n\n        $scope.$on(Events.FOLDER_COMPLETION, function (event, arg) {\n            var data = arg.data;\n            if (!$scope.completion[data.device]) {\n                $scope.completion[data.device] = {};\n            }\n            $scope.completion[data.device][data.folder] = data;\n            recalcCompletion(data.device);\n        });\n\n        $scope.$on(Events.FOLDER_ERRORS, function (event, arg) {\n            if (!$scope.model[arg.data.folder]) {\n                console.log(\"Dropping folder errors event for unknown folder\", arg.data.folder)\n                return;\n            }\n            $scope.model[arg.data.folder].errors = arg.data.errors.length;\n        });\n\n        $scope.$on(Events.FOLDER_SCAN_PROGRESS, function (event, arg) {\n            var data = arg.data;\n            $scope.scanProgress[data.folder] = {\n                current: data.current,\n                total: data.total,\n                rate: data.rate\n            };\n            console.log(\"FolderScanProgress\", data);\n        });\n\n        // May be called through .error with the presented arguments, or through\n        // .catch with the http response object containing the same arguments.\n        $scope.emitHTTPError = function (data, status, headers, config) {\n            var out = data;\n            if (data && !data.data) {\n                out = { data: data, status: status, headers: headers, config: config };\n            }\n            $scope.$emit('HTTPError', out);\n        };\n\n        var debouncedFuncs = {};\n\n        function refreshFolder(folder) {\n            if ($scope.folders[folder].paused) {\n                return;\n            }\n            var key = \"refreshFolder\" + folder;\n            if (!debouncedFuncs[key]) {\n                debouncedFuncs[key] = debounce(function () {\n                    $http.get(urlbase + '/db/status?folder=' + encodeURIComponent(folder)).success(function (data) {\n                        $scope.model[folder] = data;\n                        recalcLocalStateTotal();\n                        console.log(\"refreshFolder\", folder, data);\n                    }).error($scope.emitHTTPError);\n                }, 1000);\n            }\n            debouncedFuncs[key]();\n        }\n\n        function updateLocalConfig(config) {\n            var hasConfig = !isEmptyObject($scope.config);\n\n            $scope.config = config;\n            $scope.config.options._listenAddressesStr = $scope.config.options.listenAddresses.join(', ');\n            $scope.config.options._globalAnnounceServersStr = $scope.config.options.globalAnnounceServers.join(', ');\n            $scope.config.options._urAcceptedStr = \"\" + $scope.config.options.urAccepted;\n\n            $scope.devices = deviceMap($scope.config.devices);\n            for (var id in $scope.devices) {\n                $scope.completion[id] = {\n                    _total: 100,\n                    _needBytes: 0,\n                    _needItems: 0\n                };\n            };\n            $scope.folders = folderMap($scope.config.folders);\n            Object.keys($scope.folders).forEach(function (folder) {\n                refreshFolder(folder);\n                $scope.folders[folder].devices.forEach(function (deviceCfg) {\n                    refreshCompletion(deviceCfg.deviceID, folder);\n                });\n            });\n\n            refreshNoAuthWarning();\n            setDefaultTheme();\n\n            if (!hasConfig) {\n                $scope.$emit('ConfigLoaded');\n            }\n        }\n\n        function refreshSystem() {\n            return $http.get(urlbase + '/system/status').success(function (data) {\n                $scope.myID = data.myID;\n                $scope.system = data;\n\n                if ($scope.reportDataPreviewVersion === '') {\n                    $scope.reportDataPreviewVersion = $scope.system.urVersionMax;\n                }\n\n                var listenersFailed = [];\n                var listenersRunning = [];\n                for (var address in data.connectionServiceStatus) {\n                    if (data.connectionServiceStatus[address].error) {\n                        listenersFailed.push(address + \": \" + data.connectionServiceStatus[address].error);\n                    } else {\n                        listenersRunning.push(address);\n                    }\n                }\n                $scope.listenersFailed = listenersFailed;\n                $scope.listenersRunning = listenersRunning;\n                $scope.listenersTotal = $scope.sizeOf(data.connectionServiceStatus);\n\n                var discoveryFailed = [];\n                var discoveryRunning = [];\n                for (var disco in data.discoveryStatus) {\n                    if (data.discoveryStatus[disco] && data.discoveryStatus[disco].error) {\n                        discoveryFailed.push(disco + \": \" + data.discoveryStatus[disco].error);\n                    } else {\n                        discoveryRunning.push(disco);\n                    }\n                }\n                $scope.discoveryFailed = discoveryFailed;\n                $scope.discoveryRunning = discoveryRunning;\n                $scope.discoveryTotal = $scope.sizeOf(data.discoveryStatus);\n\n                refreshNoAuthWarning();\n\n                console.log(\"refreshSystem\", data);\n            }).error($scope.emitHTTPError);\n        }\n\n        function refreshNoAuthWarning() {\n            if (!$scope.system || !$scope.config || !$scope.config.gui) {\n                // We need all to be able to determine the state.\n                return\n            }\n\n            // If we're not listening on localhost, and there is no\n            // authentication configured, and the magic setting to silence the\n            // warning isn't set, then yell at the user.\n            var addr = $scope.system.guiAddressUsed;\n            var guiCfg = $scope.config.gui;\n            $scope.openNoAuth = addr.substr(0, 4) !== \"127.\"\n                && addr.substr(0, 6) !== \"[::1]:\"\n                && addr.substr(0, 1) !== \"/\"\n                && (!guiCfg.user || !guiCfg.password)\n                && guiCfg.authMode !== 'ldap'\n                && !guiCfg.insecureAdminAccess;\n\n            if ((guiCfg.user && guiCfg.password) || guiCfg.authMode === 'ldap') {\n                $scope.dismissNotification('authenticationUserAndPassword');\n            }\n        }\n\n        function refreshCluster() {\n            return $q.all([\n                $http.get(urlbase + '/cluster/pending/devices').success(function (data) {\n                    $scope.pendingDevices = data;\n                    console.log(\"refreshCluster devices\", data);\n                }).error($scope.emitHTTPError),\n                $http.get(urlbase + '/cluster/pending/folders').success(function (data) {\n                    $scope.pendingFolders = data;\n                    console.log(\"refreshCluster folders\", data);\n                }).error($scope.emitHTTPError),\n            ]);\n        }\n\n        function refreshDiscoveryCache() {\n            return $http.get(urlbase + '/system/discovery').success(function (data) {\n                for (var device in data) {\n                    for (var i = 0; i < data[device].addresses.length; i++) {\n                        // Relay addresses are URLs with\n                        // .../?foo=barlongstuff that we strip away here. We\n                        // remove the final slash as well for symmetry with\n                        // tcp://192.0.2.42:1234 type addresses.\n                        data[device].addresses[i] = data[device].addresses[i].replace(/\\/\\?.*/, '');\n                    }\n                }\n                $scope.discoveryCache = data;\n                console.log(\"refreshDiscoveryCache\", data);\n            }).error($scope.emitHTTPError);\n        }\n\n        function recalcLocalStateTotal() {\n            $scope.localStateTotal = {\n                bytes: 0,\n                directories: 0,\n                files: 0\n            };\n\n            for (var f in $scope.model) {\n                $scope.localStateTotal.bytes += $scope.model[f].localBytes;\n                $scope.localStateTotal.files += $scope.model[f].localFiles;\n                $scope.localStateTotal.directories += $scope.model[f].localDirectories;\n            }\n        }\n\n        function recalcCompletion(device) {\n            var total = 0, needed = 0, deletes = 0, items = 0;\n            for (var folder in $scope.completion[device]) {\n                if (folder === \"_total\" || folder === '_needBytes' || folder === '_needItems') {\n                    continue;\n                }\n                total += $scope.completion[device][folder].globalBytes;\n                needed += $scope.completion[device][folder].needBytes;\n                items += $scope.completion[device][folder].needItems;\n                deletes += $scope.completion[device][folder].needDeletes;\n            }\n            if (total == 0) {\n                $scope.completion[device]._total = 100;\n                $scope.completion[device]._needBytes = 0;\n                $scope.completion[device]._needItems = 0;\n            } else {\n                $scope.completion[device]._total = Math.floor(100 * (1 - needed / total));\n                $scope.completion[device]._needBytes = needed;\n                $scope.completion[device]._needItems = items + deletes;\n            }\n\n            if (needed == 0 && deletes + items > 0 ) {\n                // We don't need any data, but we have deletes or\n                // dirs/links/empty files that we need to do. Drop down the\n                // completion percentage to indicate that we have stuff to do.\n                $scope.completion[device]._total = 95;\n            }\n\n            console.log(\"recalcCompletion\", device, $scope.completion[device]);\n        }\n\n        function refreshCompletion(device, folder) {\n            if (device === $scope.myID) {\n                return;\n            }\n\n            $http.get(urlbase + '/db/completion?device=' + device + '&folder=' + encodeURIComponent(folder)).success(function (data) {\n                if (!$scope.completion[device]) {\n                    $scope.completion[device] = {};\n                }\n                $scope.completion[device][folder] = data;\n                recalcCompletion(device);\n            }).error(function (data, status, headers, config) {\n                if (status === 404) {\n                    console.log(\"refreshCompletion:\", data);\n                } else {\n                    $scope.emitHTTPError(data, status, headers, config);\n                }\n            });\n        }\n\n        function refreshConnectionStats() {\n            return $http.get(urlbase + '/system/connections').success(function (data) {\n                var now = Date.now(),\n                    td = (now - prevDate) / 1000,\n                    id;\n\n                prevDate = now;\n\n                try {\n                    data.total.inbps = Math.max(0, (data.total.inBytesTotal - $scope.connectionsTotal.inBytesTotal) / td);\n                    data.total.outbps = Math.max(0, (data.total.outBytesTotal - $scope.connectionsTotal.outBytesTotal) / td);\n                } catch (e) {\n                    data.total.inbps = 0;\n                    data.total.outbps = 0;\n                }\n                $scope.connectionsTotal = data.total;\n\n                data = data.connections;\n                for (id in data) {\n                    if (!data.hasOwnProperty(id)) {\n                        continue;\n                    }\n                    try {\n                        data[id].inbps = Math.max(0, (data[id].inBytesTotal - $scope.connections[id].inBytesTotal) / td);\n                        data[id].outbps = Math.max(0, (data[id].outBytesTotal - $scope.connections[id].outBytesTotal) / td);\n                    } catch (e) {\n                        data[id].inbps = 0;\n                        data[id].outbps = 0;\n                    }\n                }\n                $scope.connections = data;\n                console.log(\"refreshConnections\", data);\n            }).error($scope.emitHTTPError);\n        }\n\n        function refreshErrors() {\n            $http.get(urlbase + '/system/error').success(function (data) {\n                $scope.errors = data.errors;\n                console.log(\"refreshErrors\", data);\n            }).error($scope.emitHTTPError);\n        }\n\n        function refreshConfig() {\n            return $q.all([\n                $http.get(urlbase + '/config').success(function (data) {\n                    updateLocalConfig(data);\n                    console.log(\"refreshConfig\", data);\n                }),\n                $http.get(urlbase + '/config/insync').success(function (data) {\n                    $scope.configInSync = data.configInSync;\n                }),\n            ]);\n        }\n\n        $scope.refreshNeed = function (page, perpage) {\n            if (!$scope.neededFolder) {\n                return;\n            }\n            var url = urlbase + \"/db/need?folder=\" + encodeURIComponent($scope.neededFolder);\n            url += \"&page=\" + page;\n            url += \"&perpage=\" + perpage;\n            $http.get(url).success(function (data) {\n                console.log(\"refreshNeed\", $scope.neededFolder, data);\n                parseNeeded(data);\n            }).error($scope.emitHTTPError);\n        };\n\n        function needAction(file) {\n            var fDelete = 4096;\n            var fDirectory = 16384;\n\n            if ((file.flags & (fDelete + fDirectory)) === fDelete + fDirectory) {\n                return 'rmdir';\n            } else if ((file.flags & fDelete) === fDelete) {\n                return 'rm';\n            } else if ((file.flags & fDirectory) === fDirectory) {\n                return 'touch';\n            } else {\n                return 'sync';\n            }\n        }\n\n        function parseNeeded(data) {\n            $scope.needed = data;\n            var merged = [];\n            data.progress.forEach(function (item) {\n                item.type = \"progress\";\n                item.action = needAction(item);\n                merged.push(item);\n            });\n            data.queued.forEach(function (item) {\n                item.type = \"queued\";\n                item.action = needAction(item);\n                merged.push(item);\n            });\n            data.rest.forEach(function (item) {\n                item.type = \"rest\";\n                item.action = needAction(item);\n                merged.push(item);\n            });\n            $scope.needed.items = merged;\n        }\n\n        function pathJoin(base, name) {\n            base = expandTilde(base);\n            if (base[base.length - 1] !== $scope.system.pathSeparator) {\n                return base + $scope.system.pathSeparator + name;\n            }\n            return base + name;\n        }\n\n        function expandTilde(path) {\n            if (path && path.trim().charAt(0) === '~') {\n                return $scope.system.tilde + path.trim().substring(1);\n            }\n            return path;\n        }\n\n        function shouldSetDefaultFolderPath() {\n            return $scope.config.defaults.folder.path && $scope.folderEditor.folderPath.$pristine && $scope.editingFolderNew();\n        }\n\n        function resetRemoteNeed() {\n            $scope.remoteNeed = {};\n            $scope.remoteNeedFolders = [];\n            $scope.remoteNeedDevice = undefined;\n        }\n\n        function setDefaultTheme() {\n            if (!document.getElementById(\"fallback-theme-css\")) {\n\n                // check if no support for prefers-color-scheme\n                var colorSchemeNotSupported = typeof window.matchMedia === \"undefined\" || window.matchMedia('(prefers-color-scheme: dark)').media === 'not all';\n\n                if ($scope.config.gui.theme === \"default\" && colorSchemeNotSupported) {\n                    document.documentElement.style.display = 'none';\n                    document.head.insertAdjacentHTML(\n                        'beforeend',\n                        '<link id=\"fallback-theme-css\" rel=\"stylesheet\" href=\"theme-assets/light/assets/css/theme.css\" onload=\"document.documentElement.style.display = \\'\\'\">'\n                    );\n                }\n            }\n        }\n\n        function saveIgnores(ignores) {\n            return $http.post(urlbase + '/db/ignores?folder=' + encodeURIComponent($scope.currentFolder.id), {\n                ignore: ignores\n            });\n        };\n\n        function initShareEditing(editing) {\n            $scope.currentSharing = {};\n            $scope.currentSharing.editing = editing;\n            $scope.currentSharing.shared = [];\n            $scope.currentSharing.unrelated = [];\n            $scope.currentSharing.selected = {};\n            $scope.currentSharing.encryptionPasswords = {};\n            if (editing === 'folder') {\n                initShareEditingFolder();\n            }\n        };\n\n        function initShareEditingFolder() {\n            $scope.currentFolder.devices.forEach(function (n) {\n                if (n.deviceID !== $scope.myID) {\n                    $scope.currentSharing.shared.push($scope.devices[n.deviceID]);\n                }\n                if (n.encryptionPassword !== '') {\n                    $scope.currentSharing.encryptionPasswords[n.deviceID] = n.encryptionPassword;\n                }\n                $scope.currentSharing.selected[n.deviceID] = true;\n            });\n            $scope.currentSharing.shared.sort(deviceCompare);\n            $scope.currentSharing.unrelated = $scope.deviceList().filter(function (n) {\n                return n.deviceID !== $scope.myID && !$scope.currentSharing.selected[n.deviceID];\n            });\n        }\n\n        $scope.pendingIsRemoteEncrypted = function (folderID, deviceID) {\n            var pending = $scope.pendingFolders[folderID];\n            if (!pending || !pending.offeredBy || !pending.offeredBy[deviceID]) {\n                return false;\n            }\n            return pending.offeredBy[deviceID].remoteEncrypted;\n        };\n\n        $scope.refreshFailed = function (page, perpage) {\n            if (!$scope.failed || !$scope.failed.folder) {\n                return;\n            }\n            var url = urlbase + '/folder/errors?folder=' + encodeURIComponent($scope.failed.folder);\n            url += \"&page=\" + page + \"&perpage=\" + perpage;\n            $http.get(url).success(function (data) {\n                $scope.failed = data;\n            }).error($scope.emitHTTPError);\n        };\n\n        $scope.refreshRemoteNeed = function (folder, page, perpage) {\n            if (!$scope.remoteNeedDevice) {\n                return;\n            }\n            var url = urlbase + '/db/remoteneed?device=' + $scope.remoteNeedDevice.deviceID;\n            url += '&folder=' + encodeURIComponent(folder);\n            url += \"&page=\" + page + \"&perpage=\" + perpage;\n            $http.get(url).success(function (data) {\n                $scope.remoteNeed[folder] = data;\n            }).error(function (err) {\n                $scope.remoteNeed[folder] = undefined;\n                $scope.emitHTTPError(err);\n            });\n        };\n\n        $scope.refreshLocalChanged = function (page, perpage) {\n            if (!$scope.localChangedFolder) {\n                return;\n            }\n            var url = urlbase + '/db/localchanged?folder=';\n            url += encodeURIComponent($scope.localChangedFolder);\n            url += \"&page=\" + page + \"&perpage=\" + perpage;\n            $http.get(url).success(function (data) {\n                $scope.localChanged = data;\n            }).error($scope.emitHTTPError);\n        };\n\n        var refreshDeviceStats = debounce(function () {\n            $http.get(urlbase + \"/stats/device\").success(function (data) {\n                $scope.deviceStats = data;\n                for (var device in $scope.deviceStats) {\n                    $scope.deviceStats[device].lastSeen = new Date($scope.deviceStats[device].lastSeen);\n                    if ($scope.deviceStats[device].lastSeen.toISOString() !== '1970-01-01T00:00:00.000Z') {\n                        $scope.deviceStats[device].lastSeenDays = (new Date() - $scope.deviceStats[device].lastSeen) / 1000 / 86400;\n                    }\n                }\n                console.log(\"refreshDeviceStats\", data);\n            }).error($scope.emitHTTPError);\n        }, 2500);\n\n        var refreshFolderStats = debounce(function () {\n            $http.get(urlbase + \"/stats/folder\").success(function (data) {\n                $scope.folderStats = data;\n                for (var folder in $scope.folderStats) {\n                    if ($scope.folderStats[folder].lastFile) {\n                        $scope.folderStats[folder].lastFile.at = new Date($scope.folderStats[folder].lastFile.at);\n                    }\n\n                    $scope.folderStats[folder].lastScan = new Date($scope.folderStats[folder].lastScan);\n                    $scope.folderStats[folder].lastScanDays = (new Date() - $scope.folderStats[folder].lastScan) / 1000 / 86400;\n                }\n                console.log(\"refreshfolderStats\", data);\n            }).error($scope.emitHTTPError);\n        }, 2500);\n\n        var refreshThemes = debounce(function () {\n            $http.get(\"themes.json\").success(function (data) { // no urlbase here as this is served by the asset handler\n                $scope.themes = data.themes;\n            }).error($scope.emitHTTPError);\n        }, 2500);\n\n        var refreshGlobalChanges = debounce(function () {\n            $http.get(urlbase + \"/events/disk?limit=25\").success(function (data) {\n                if (!data) {\n                    // For reasons unknown this is called with data being the empty\n                    // string on shutdown, causing an error on .reverse().\n                    return;\n                }\n                data = data.reverse();\n                $scope.globalChangeEvents = data;\n                console.log(\"refreshGlobalChanges\", data);\n            }).error($scope.emitHTTPError);\n        }, 2500);\n\n        $scope.refresh = function () {\n            refreshSystem();\n            refreshDiscoveryCache();\n            refreshConnectionStats();\n            refreshErrors();\n        };\n\n        $scope.folderStatus = function (folderCfg) {\n            if (folderCfg.paused) {\n                return 'paused';\n            }\n\n            var folderInfo = $scope.model[folderCfg.id];\n\n            // after restart syncthing process state may be empty\n            if (typeof folderInfo === 'undefined' || !folderInfo.state) {\n                return 'unknown';\n            }\n\n            var state = '' + folderInfo.state;\n            if (state === 'error') {\n                return 'stopped'; // legacy, the state is called \"stopped\" in the GUI\n            }\n\n            if (state !== 'idle') {\n                return state;\n            }\n\n            if (folderInfo.needTotalItems > 0) {\n                return 'outofsync';\n            }\n            if ($scope.hasFailedFiles(folderCfg.id)) {\n                return 'faileditems';\n            }\n            if ($scope.hasReceiveOnlyChanged(folderCfg)) {\n                if (folderCfg.type === \"receiveonly\") {\n                    return 'localadditions';\n                }\n                return 'localunencrypted';\n            }\n            if (folderCfg.devices.length <= 1) {\n                return 'unshared';\n            }\n\n            return state;\n        };\n\n        $scope.folderClass = function (folderCfg) {\n            var status = $scope.folderStatus(folderCfg);\n\n            if (status === 'idle' || status === 'localadditions') {\n                return 'success';\n            }\n            if (status == 'paused') {\n                return 'default';\n            }\n            if (status === 'syncing' || status === 'sync-preparing' || status === 'scanning' || status === 'cleaning') {\n                return 'primary';\n            }\n            if (status === 'unknown') {\n                return 'info';\n            }\n            if (status === 'stopped' || status === 'outofsync' || status === 'error' || status === 'faileditems' || status === 'localunencrypted') {\n                return 'danger';\n            }\n            if (status === 'unshared' || status === 'scan-waiting' || status === 'sync-waiting' || status === 'clean-waiting') {\n                return 'warning';\n            }\n\n            return 'info';\n        };\n\n        $scope.syncPercentage = function (folder) {\n            if (typeof $scope.model[folder] === 'undefined') {\n                return 100;\n            }\n            if ($scope.model[folder].needTotalItems === 0) {\n                return 100;\n            }\n            if (($scope.model[folder].needBytes == 0 && $scope.model[folder].needDeletes > 0) || $scope.model[folder].globalBytes == 0) {\n                // We don't need any data, but we have deletes that we need\n                // to do. Drop down the completion percentage to indicate\n                // that we have stuff to do.\n                // Do the same thing in case we only have zero byte files to sync.\n                return 95;\n            }\n            var pct = 100 * $scope.model[folder].inSyncBytes / $scope.model[folder].globalBytes;\n            return Math.floor(pct);\n        };\n\n        $scope.scanPercentage = function (folder) {\n            if (!$scope.scanProgress[folder]) {\n                return undefined;\n            }\n            var pct = 100 * $scope.scanProgress[folder].current / $scope.scanProgress[folder].total;\n            return Math.floor(pct);\n        };\n\n        $scope.scanRate = function (folder) {\n            if (!$scope.scanProgress[folder]) {\n                return 0;\n            }\n            return $scope.scanProgress[folder].rate;\n        };\n\n        $scope.scanRemaining = function (folder) {\n            // Formats the remaining scan time as a string. Includes days and\n            // hours only when relevant, resulting in time stamps like:\n            // 00m 40s\n            // 32m 40s\n            // 2h 32m\n            // 4d 2h\n            // In case remaining scan time appears to be >31d, omit the\n            // details, i.e.:\n            // > 1 month\n\n            if (!$scope.scanProgress[folder]) {\n                return \"\";\n            }\n            // Calculate remaining bytes and seconds based on our current\n            // rate.\n\n            var remainingBytes = $scope.scanProgress[folder].total - $scope.scanProgress[folder].current;\n            var seconds = remainingBytes / $scope.scanProgress[folder].rate;\n            // Round up to closest ten seconds to avoid flapping too much to\n            // and fro.\n\n            seconds = Math.ceil(seconds / 10) * 10;\n\n            // Separate out the number of days.\n            var days = 0;\n            var res = [];\n            if (seconds >= 86400) {\n                days = Math.floor(seconds / 86400);\n                if (days > 31) {\n                    return '> 1 month';\n                }\n                res.push('' + days + 'd');\n                seconds = seconds % 86400;\n            }\n\n            // Separate out the number of hours.\n            var hours = 0;\n            if (seconds > 3600) {\n                hours = Math.floor(seconds / 3600);\n                res.push('' + hours + 'h');\n                seconds = seconds % 3600;\n            }\n\n            var d = new Date(1970, 0, 1).setSeconds(seconds);\n\n            if (days === 0) {\n                // Format minutes only if we're within a day of completion.\n                var f = $filter('date')(d, \"m'm'\");\n                res.push(f);\n            }\n\n            if (days === 0 && hours === 0) {\n                // Format seconds only when we're within an hour of completion.\n                var f = $filter('date')(d, \"ss's'\");\n                res.push(f);\n            }\n\n            return res.join(' ');\n        };\n\n        $scope.deviceStatus = function (deviceCfg) {\n            var status = '';\n            var unused = $scope.deviceFolders(deviceCfg).length === 0;\n\n            if (unused) {\n                status = 'unused-';\n            }\n\n            if (typeof $scope.connections[deviceCfg.deviceID] === 'undefined') {\n                return 'unknown';\n            }\n\n            if (deviceCfg.paused) {\n                return status + 'paused';\n            }\n\n            if ($scope.connections[deviceCfg.deviceID].connected) {\n                if ($scope.completion[deviceCfg.deviceID] && $scope.completion[deviceCfg.deviceID]._total === 100) {\n                    return status + 'insync';\n                } else {\n                    return 'syncing';\n                }\n            }\n\n            // Disconnected\n            if (!unused && $scope.deviceStats[deviceCfg.deviceID].lastSeenDays && $scope.deviceStats[deviceCfg.deviceID].lastSeenDays >= 7) {\n                return status + 'disconnected-inactive';\n            } else {\n                return status + 'disconnected';\n            }\n        };\n\n        $scope.deviceClass = function (deviceCfg) {\n            if (typeof $scope.connections[deviceCfg.deviceID] === 'undefined') {\n                return 'info';\n            }\n\n            if (deviceCfg.paused) {\n                return 'default';\n            }\n\n            if ($scope.connections[deviceCfg.deviceID].connected) {\n                if ($scope.completion[deviceCfg.deviceID] && $scope.completion[deviceCfg.deviceID]._total === 100) {\n                    return 'success';\n                } else {\n                    return 'primary';\n                }\n            }\n\n            // Disconnected\n            return 'info';\n        };\n\n        $scope.syncthingStatus = function () {\n            var syncCount = 0;\n            var notifyCount = 0;\n            var pauseCount = 0;\n\n            // loop through all folders\n            var folderListCache = $scope.folderList();\n            for (var i = 0; i < folderListCache.length; i++) {\n                var status = $scope.folderStatus(folderListCache[i]);\n                switch (status) {\n                    case 'sync-preparing':\n                    case 'syncing':\n                        syncCount++;\n                        break;\n                    case 'stopped':\n                    case 'unknown':\n                    case 'outofsync':\n                    case 'error':\n                        notifyCount++;\n                        break;\n                }\n            }\n\n            // loop through all devices\n            var deviceCount = 0;\n            for (var id in $scope.devices) {\n                var status = $scope.deviceStatus({\n                    deviceID: id\n                });\n                switch (status) {\n                    case 'unknown':\n                        notifyCount++;\n                        break;\n                    case 'paused':\n                        pauseCount++;\n                        break;\n                    case 'unused':\n                        deviceCount--;\n                        break;\n                }\n                deviceCount++;\n            }\n\n            // enumerate notifications\n            if ($scope.openNoAuth || !$scope.configInSync || $scope.errorList().length > 0 || !online || Object.keys($scope.pendingDevices).length > 0 || Object.keys($scope.pendingFolders).length > 0) {\n                notifyCount++;\n            }\n\n            // at least one folder is syncing\n            if (syncCount > 0) {\n                return 'sync';\n            }\n\n            // a device is unknown or a folder is stopped/unknown/outofsync/error or some other notification is open or gui offline\n            if (notifyCount > 0) {\n                return 'notify';\n            }\n\n            // all used devices are paused except (this) one\n            if (pauseCount === deviceCount - 1) {\n                return 'pause';\n            }\n\n            return 'default';\n        };\n\n        $scope.deviceAddr = function (deviceCfg) {\n            var conn = $scope.connections[deviceCfg.deviceID];\n            if (conn && conn.connected) {\n                return conn.address;\n            }\n            return '?';\n        };\n\n        $scope.rdConnType = function (deviceID) {\n            var conn = $scope.connections[deviceID];\n            if (!conn) return \"-1\";\n            var type = \"disconnected\";\n            if (conn.type.indexOf('relay') === 0) type = \"relay\";\n            else if (conn.type.indexOf('quic') === 0) type = \"quic\";\n            else if (conn.type.indexOf('tcp') === 0) type = \"tcp\";\n            else return type;\n\n            if (conn.isLocal) type += \"lan\";\n            else type += \"wan\";\n            return type;\n        }\n\n        $scope.rdConnTypeString = function (type) {\n            switch (type) {\n                case \"relaywan\":\n                    return $translate.instant('Relay WAN');\n                case \"relaylan\":\n                    return $translate.instant('Relay LAN');\n                case \"quicwan\":\n                    return $translate.instant('QUIC WAN');\n                case \"quiclan\":\n                    return $translate.instant('QUIC LAN');\n                case \"tcpwan\":\n                    return $translate.instant('TCP WAN');\n                case \"tcplan\":\n                    return $translate.instant('TCP LAN');\n                default:\n                    return $translate.instant('Disconnected');\n            }\n        }\n\n        $scope.rdConnTypeIcon = function (type) {\n            switch (type) {\n            case \"tcplan\":\n            case \"quiclan\":\n                return \"reception-4\";\n            case \"tcpwan\":\n            case \"quicwan\":\n                return \"reception-3\";\n            case \"relaylan\":\n                return \"reception-2\";\n            case \"relaywan\":\n                return \"reception-1\";\n            case \"disconnected\":\n                return \"reception-0\";\n            }\n        }\n\n        $scope.rdConnDetails = function (type) {\n            switch (type) {\n                case \"relaylan\":\n                case \"relaywan\":\n                    return $translate.instant('Connections via relays might be rate limited by the relay');\n                case \"quiclan\":\n                    return $translate.instant('Using a QUIC connection over LAN');\n                case \"quicwan\":\n                    return $translate.instant('Using a QUIC connection over WAN');\n                case \"tcpwan\":\n                    return $translate.instant('Using a direct TCP connection over WAN');\n                case \"tcplan\":\n                    return $translate.instant('Using a direct TCP connection over LAN');\n                default:\n                    return $translate.instant('Unknown');\n            }\n        }\n\n        $scope.hasRemoteGUIAddress = function (deviceCfg) {\n            if (!deviceCfg.remoteGUIPort)\n                return false;\n            var conn = $scope.connections[deviceCfg.deviceID];\n            return conn && conn.connected && conn.address && conn.type.indexOf('Relay') == -1;\n        };\n\n        $scope.remoteGUIAddress = function (deviceCfg) {\n            // Assume hasRemoteGUIAddress is true or we would not be here\n            var conn = $scope.connections[deviceCfg.deviceID];\n            // Use regex to filter out scope ID from IPv6 addresses.\n            return 'http://' + replaceAddressPort(conn.address, deviceCfg.remoteGUIPort).replace('%.*?\\]:', ']:');\n        };\n\n        function replaceAddressPort(address, newPort) {\n            for (var index = address.length - 1; index >= 0; index--) {\n                if (address[index] === \":\") {\n                    return address.substr(0, index) + \":\" + newPort.toString();\n                }\n            }\n            return address;\n        }\n\n        $scope.friendlyNameFromShort = function (shortID) {\n            var matches = Object.keys($scope.devices).filter(function (id) {\n                return id.substr(0, 7) === shortID;\n            });\n            if (matches.length !== 1) {\n                return shortID;\n            }\n            return $scope.friendlyNameFromID(matches[0]);\n        };\n\n        $scope.friendlyNameFromID = function (deviceID) {\n            var match = $scope.devices[deviceID];\n            if (match) {\n                return $scope.deviceName(match);\n            }\n            return deviceID.substr(0, 6);\n        };\n\n        $scope.deviceName = function (deviceCfg) {\n            if (typeof deviceCfg === 'undefined') {\n                return \"\";\n            }\n            if (deviceCfg.name) {\n                return deviceCfg.name;\n            }\n            return $scope.deviceShortID(deviceCfg.deviceID);\n        };\n\n        $scope.deviceShortID = function (deviceID) {\n            if (typeof deviceID === 'undefined') {\n                return \"\";\n            }\n            return deviceID.substr(0, 6);\n        };\n\n        $scope.thisDeviceName = function () {\n            var device = $scope.thisDevice();\n            if (typeof device === 'undefined') {\n                return \"(unknown device)\";\n            }\n            if (device.name) {\n                return device.name;\n            }\n            return device.deviceID.substr(0, 6);\n        };\n\n        $scope.showDeviceIdentification = function (deviceCfg) {\n            $scope.currentDevice = deviceCfg;\n            $('#idqr').modal();\n        };\n\n        $scope.setDevicePause = function (device, pause) {\n            $scope.devices[device].paused = pause;\n            $scope.config.devices = $scope.deviceList();\n            $scope.saveConfig();\n        };\n\n        $scope.setFolderPause = function (folder, pause) {\n            var cfg = $scope.folders[folder];\n            if (cfg) {\n                cfg.paused = pause;\n                $scope.config.folders = folderList($scope.folders);\n                return $scope.saveConfig();\n            }\n            return $q.when();\n        };\n\n        $scope.showListenerStatus = function () {\n            var params = {\n                type: 'listeners',\n            };\n            if ($scope.listenersFailed.length > 0) {\n                params.status = 'danger';\n                params.heading = $translate.instant(\"Listener Failures\");\n            } else {\n                params.status = 'default';\n                params.heading = $translate.instant(\"Listener Status\");\n            }\n            $scope.connectivityStatusParams = params;\n            $('#connectivity-status').modal();\n        };\n\n        $scope.showDiscoveryStatus = function () {\n            var params = {\n                type: 'discovery',\n            };\n            if ($scope.discoveryFailed.length > 0) {\n                params.status = 'danger';\n                params.heading = $translate.instant(\"Discovery Failures\");\n            } else {\n                params.status = 'default';\n                params.heading = $translate.instant(\"Discovery Status\");\n            }\n            $scope.connectivityStatusParams = params;\n            $('#connectivity-status').modal();\n        };\n\n        $scope.logging = {\n            facilities: {},\n            refreshFacilities: function () {\n                $http.get(urlbase + '/system/debug').success(function (data) {\n                    var facilities = {};\n                    data.enabled = data.enabled || [];\n                    $.each(data.facilities, function (key, value) {\n                        facilities[key] = {\n                            description: value,\n                            enabled: data.enabled.indexOf(key) > -1\n                        }\n                    })\n                    $scope.logging.facilities = facilities;\n                }).error($scope.emitHTTPError);\n            },\n            show: function () {\n                $scope.logging.paused = false;\n                $scope.logging.refreshFacilities();\n                $scope.logging.timer = $timeout($scope.logging.fetch);\n                var textArea = $('#logViewerText');\n                textArea.on(\"scroll\", $scope.logging.onScroll);\n                $('#logViewer').modal().one('shown.bs.modal', function () {\n                    // Scroll to bottom.\n                    textArea.scrollTop(textArea[0].scrollHeight);\n                }).one('hidden.bs.modal', function () {\n                    $timeout.cancel($scope.logging.timer);\n                    textArea.off(\"scroll\", $scope.logging.onScroll);\n                    $scope.logging.timer = null;\n                    $scope.logging.entries = [];\n                });\n            },\n            onFacilityChange: function (facility) {\n                var enabled = $scope.logging.facilities[facility].enabled;\n                // Disable checkboxes while we're in flight.\n                $.each($scope.logging.facilities, function (key) {\n                    $scope.logging.facilities[key].enabled = null;\n                })\n                $http.post(urlbase + '/system/debug?' + (enabled ? 'enable=' : 'disable=') + facility)\n                    .success($scope.logging.refreshFacilities)\n                    .error($scope.emitHTTPError);\n            },\n            onScroll: function () {\n                var textArea = $('#logViewerText');\n                var scrollTop = textArea.prop('scrollTop');\n                var scrollHeight = textArea.prop('scrollHeight');\n                $scope.logging.paused = scrollHeight > (scrollTop + textArea.outerHeight());\n                // Browser events do not cause redraw, trigger manually.\n                $scope.$apply();\n            },\n            timer: null,\n            entries: [],\n            paused: false,\n            content: function () {\n                var content = \"\";\n                $.each($scope.logging.entries, function (idx, entry) {\n                    content += entry.when.split('.')[0].replace('T', ' ') + ' ' + entry.message + \"\\n\";\n                });\n                return content;\n            },\n            fetch: function () {\n                var textArea = $('#logViewerText');\n                if ($scope.logging.paused) {\n                    if (!$scope.logging.timer) return;\n                    $scope.logging.timer = $timeout($scope.logging.fetch, 500);\n                    return;\n                }\n\n                var last = null;\n                if ($scope.logging.entries.length > 0) {\n                    last = $scope.logging.entries[$scope.logging.entries.length - 1].when;\n                }\n\n                $http.get(urlbase + '/system/log' + (last ? '?since=' + encodeURIComponent(last) : '')).success(function (data) {\n                    if (!$scope.logging.timer) return;\n                    $scope.logging.timer = $timeout($scope.logging.fetch, 2000);\n                    if (!$scope.logging.paused) {\n                        if (data.messages) {\n                            $scope.logging.entries.push.apply($scope.logging.entries, data.messages);\n                            // Wait for the text area to be redrawn, adding new lines, and then scroll to bottom.\n                            $timeout(function () {\n                                textArea.scrollTop(textArea[0].scrollHeight);\n                            });\n                        }\n                    }\n                });\n            }\n        };\n\n        $scope.about = {\n            paths: {},\n            refreshPaths: function () {\n                $http.get(urlbase + '/system/paths').success(function (data) {\n                    $scope.about.paths = data;\n                }).error($scope.emitHTTPError);\n            },\n            show: function () {\n                $scope.about.refreshPaths();\n                $('#about').modal(\"show\");\n            },\n        };\n\n        $scope.discardChangedSettings = function () {\n            $(\"#discard-changes-confirmation\").modal(\"hide\");\n            $(\"#settings\").off(\"hide.bs.modal\").modal(\"hide\");\n        };\n\n        $scope.showSettings = function () {\n            // Make a working copy\n            $scope.tmpOptions = angular.copy($scope.config.options);\n            $scope.tmpOptions.deviceName = $scope.thisDevice().name;\n            $scope.tmpOptions.upgrades = \"none\";\n            if ($scope.tmpOptions.autoUpgradeIntervalH > 0) {\n                $scope.tmpOptions.upgrades = \"stable\";\n            }\n            if ($scope.tmpOptions.upgradeToPreReleases) {\n                $scope.tmpOptions.upgrades = \"candidate\";\n            }\n            $scope.tmpGUI = angular.copy($scope.config.gui);\n            $scope.tmpRemoteIgnoredDevices = angular.copy($scope.config.remoteIgnoredDevices);\n            $scope.tmpDevices = angular.copy($scope.config.devices);\n            $('#settings').modal(\"show\");\n            $(\"#settings a[href='#settings-general']\").tab(\"show\");\n            $(\"#settings\").on('hide.bs.modal', function (event) {\n                if ($scope.settingsModified()) {\n                    event.preventDefault();\n                    $(\"#discard-changes-confirmation\").modal(\"show\");\n                } else {\n                    $(\"#settings\").off(\"hide.bs.modal\");\n                }\n            });\n        };\n\n        $scope.saveConfig = function () {\n            var cfg = JSON.stringify($scope.config);\n            var opts = {\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            };\n            return $http.put(urlbase + '/config', cfg, opts).finally(refreshConfig).catch($scope.emitHTTPError);\n        };\n\n        $scope.urVersions = function () {\n            var result = [];\n            if ($scope.system) {\n                for (var i = $scope.system.urVersionMax; i >= 2; i--) {\n                    result.push(\"\" + i);\n                }\n            }\n            return result;\n        };\n\n        $scope.settingsModified = function () {\n            // Options has artificial properties injected into the temp config.\n            // Need to recompute them before we can check equality\n            var options = angular.copy($scope.config.options);\n            options.deviceName = $scope.thisDevice().name;\n            options.upgrades = \"none\";\n            if (options.autoUpgradeIntervalH > 0) {\n                options.upgrades = \"stable\";\n            }\n            if (options.upgradeToPreReleases) {\n                options.upgrades = \"candidate\";\n            }\n            var optionsEqual = angular.equals(options, $scope.tmpOptions);\n            var guiEquals = angular.equals($scope.config.gui, $scope.tmpGUI);\n            var ignoredDevicesEquals = angular.equals($scope.config.remoteIgnoredDevices, $scope.tmpRemoteIgnoredDevices);\n            var ignoredFoldersEquals = angular.equals($scope.config.devices, $scope.tmpDevices);\n            console.log(\"settings equals - options: \" + optionsEqual + \" gui: \" + guiEquals + \" ignDev: \" + ignoredDevicesEquals + \" ignFol: \" + ignoredFoldersEquals);\n            return !optionsEqual || !guiEquals || !ignoredDevicesEquals || !ignoredFoldersEquals;\n        };\n\n        $scope.saveSettings = function () {\n            // Make sure something changed\n            if ($scope.settingsModified()) {\n                var themeChanged = $scope.config.gui.theme !== $scope.tmpGUI.theme;\n                // Angular has issues with selects with numeric values, so we handle strings here.\n                $scope.tmpOptions.urAccepted = parseInt($scope.tmpOptions._urAcceptedStr);\n                // Check if auto-upgrade has been enabled or disabled. This\n                // also has an effect on usage reporting, so do the check\n                // for that later.\n                if ($scope.tmpOptions.upgrades == \"candidate\") {\n                    $scope.tmpOptions.autoUpgradeIntervalH = $scope.tmpOptions.autoUpgradeIntervalH || 12;\n                    $scope.tmpOptions.upgradeToPreReleases = true;\n                    $scope.tmpOptions.urAccepted = $scope.system.urVersionMax;\n                    $scope.tmpOptions.urSeen = $scope.system.urVersionMax;\n                } else if ($scope.tmpOptions.upgrades == \"stable\") {\n                    $scope.tmpOptions.autoUpgradeIntervalH = $scope.tmpOptions.autoUpgradeIntervalH || 12;\n                    $scope.tmpOptions.upgradeToPreReleases = false;\n                } else {\n                    $scope.tmpOptions.autoUpgradeIntervalH = 0;\n                    $scope.tmpOptions.upgradeToPreReleases = false;\n                }\n\n                // Check if protocol will need to be changed on restart\n                if ($scope.config.gui.useTLS !== $scope.tmpGUI.useTLS) {\n                    $scope.protocolChanged = true;\n                }\n\n                // Parse strings to arrays before copying over\n                ['listenAddresses', 'globalAnnounceServers'].forEach(function (key) {\n                    $scope.tmpOptions[key] = $scope.tmpOptions[\"_\" + key + \"Str\"].split(/[ ,]+/).map(function (x) {\n                        return x.trim();\n                    });\n                });\n\n                // Apply new settings locally\n                $scope.thisDeviceIn($scope.tmpDevices).name = $scope.tmpOptions.deviceName;\n                $scope.config.options = angular.copy($scope.tmpOptions);\n                $scope.config.gui = angular.copy($scope.tmpGUI);\n                $scope.config.remoteIgnoredDevices = angular.copy($scope.tmpRemoteIgnoredDevices);\n                $scope.config.devices = angular.copy($scope.tmpDevices);\n                // $scope.devices is updated by updateLocalConfig based on\n                // the config changed event, but settingsModified will look\n                // at it before that and conclude that the settings are\n                // modified (even though we just saved) unless we update\n                // here as well...\n                $scope.devices = deviceMap($scope.config.devices);\n\n                $scope.saveConfig().then(function () {\n                    if (themeChanged) {\n                        document.location.reload(true);\n                    }\n                });\n            }\n\n            $(\"#settings\").off(\"hide.bs.modal\").modal(\"hide\");\n        };\n\n        $scope.saveAdvanced = function () {\n            $scope.config = $scope.advancedConfig;\n            $scope.saveConfig();\n            $('#advanced').modal(\"hide\");\n        };\n\n        $scope.restart = function () {\n            restarting = true;\n            $('#restarting').modal();\n            $http.post(urlbase + '/system/restart');\n            $scope.configInSync = true;\n\n            // Switch webpage protocol if needed\n            if ($scope.protocolChanged) {\n                var protocol = 'http';\n\n                if ($scope.config.gui.useTLS) {\n                    protocol = 'https';\n                }\n\n                setTimeout(function () {\n                    window.location.protocol = protocol;\n                }, 2500);\n\n                $scope.protocolChanged = false;\n            }\n        };\n\n        $scope.upgrade = function () {\n            restarting = true;\n            $('#upgrade').modal('hide');\n            $('#majorUpgrade').modal('hide');\n            $('#upgrading').modal();\n            $http.post(urlbase + '/system/upgrade').success(function () {\n                $('#restarting').modal();\n                $('#upgrading').modal('hide');\n            }).error(function () {\n                $('#upgrading').modal('hide');\n            });\n        };\n\n        $scope.shutdown = function () {\n            restarting = true;\n            $http.post(urlbase + '/system/shutdown').success(function () {\n                $('#shutdown').modal();\n            }).error($scope.emitHTTPError);\n            $scope.configInSync = true;\n        };\n\n        function editDeviceModal() {\n            $scope.currentDevice._addressesStr = $scope.currentDevice.addresses.join(', ');\n            $scope.deviceEditor.$setPristine();\n            $('#editDevice').modal();\n        }\n\n        $scope.editDeviceModalTitle = function() {\n            if ($scope.editingDeviceDefaults()) {\n                return $translate.instant(\"Edit Device Defaults\");\n            }\n            var title = '';\n            if ($scope.editingDeviceExisting()) {\n                title += $translate.instant(\"Edit Device\");\n            } else {\n                title += $translate.instant(\"Add Device\");\n            }\n            var name = $scope.deviceName($scope.currentDevice);\n            if (name !== '') {\n                title += ' (' + name + ')';\n            }\n            return title;\n        };\n\n        $scope.editDeviceModalIcon = function() {\n            if ($scope.has([\"existing\", \"defaults\"], $scope.currentDevice._editing)) {\n                return 'fas fa-pencil-alt';\n            }\n            return 'fas fa-desktop';\n        };\n\n        $scope.editingDeviceDefaults = function() {\n            return $scope.currentDevice._editing == 'defaults';\n        }\n\n        $scope.editingDeviceExisting = function() {\n            return $scope.currentDevice._editing == 'existing';\n        }\n\n        $scope.editingDeviceNew = function() {\n            // The \"new-pending\" value is intentionally disregarded here.\n            return $scope.currentDevice._editing == 'new';\n        }\n\n        $scope.editDeviceExisting = function (deviceCfg) {\n            $scope.currentDevice = $.extend({}, deviceCfg);\n            $scope.currentDevice._editing = \"existing\";\n            $scope.willBeReintroducedBy = undefined;\n            if (deviceCfg.introducedBy) {\n                var introducerDevice = $scope.devices[deviceCfg.introducedBy];\n                if (introducerDevice && introducerDevice.introducer) {\n                    $scope.willBeReintroducedBy = $scope.deviceName(introducerDevice);\n                }\n            }\n            initShareEditing('device');\n            $scope.deviceFolders($scope.currentDevice).forEach(function (folderID) {\n                $scope.currentSharing.shared.push($scope.folders[folderID]);\n                $scope.currentSharing.selected[folderID] = true;\n                var folderdevices = $scope.folders[folderID].devices;\n                for (var i = 0; i < folderdevices.length; i++) {\n                    if (folderdevices[i].deviceID === deviceCfg.deviceID) {\n                        $scope.currentSharing.encryptionPasswords[folderID] = folderdevices[i].encryptionPassword;\n                        break;\n                    }\n                }\n            });\n            $scope.currentSharing.unrelated = $scope.folderList().filter(function (n) {\n                return !$scope.currentSharing.selected[n.id];\n            });\n            editDeviceModal();\n        };\n\n        $scope.editDeviceDefaults = function () {\n            $http.get(urlbase + '/config/defaults/device').then(function (p) {\n                $scope.currentDevice = p.data;\n                $scope.currentDevice._editing = \"defaults\";\n                editDeviceModal();\n            }, $scope.emitHTTPError);\n        };\n\n        $scope.selectAllSharedFolders = function (state) {\n            var folders = $scope.currentSharing.shared;\n            for (var i = 0; i < folders.length; i++) {\n                $scope.currentSharing.selected[folders[i].id] = !!state;\n            }\n        };\n\n        $scope.selectAllUnrelatedFolders = function (state) {\n            var folders = $scope.currentSharing.unrelated;\n            for (var i = 0; i < folders.length; i++) {\n                $scope.currentSharing.selected[folders[i].id] = !!state;\n            }\n        };\n\n        $scope.addDevice = function (deviceID, name) {\n            $scope.discoveryUnknown = [];\n            for (var id in $scope.discoveryCache) {\n                if ($scope.discoveryUnknown.length === 100) {\n                    break;\n                }\n                if (id in $scope.devices) {\n                    continue\n                }\n                $scope.discoveryUnknown.push(id);\n            }\n            return $http.get(urlbase + '/config/defaults/device').then(function (p) {\n                $scope.currentDevice = p.data;\n                $scope.currentDevice.name = name;\n                $scope.currentDevice.deviceID = deviceID;\n                if (deviceID) {\n                    $scope.currentDevice._editing = \"new-pending\";\n                } else {\n                    $scope.currentDevice._editing = \"new\";\n                }\n                initShareEditing('device');\n                $scope.currentSharing.unrelated = $scope.folderList();\n                editDeviceModal();\n            }, $scope.emitHTTPError);\n        };\n\n        $scope.deleteDevice = function () {\n            $('#editDevice').modal('hide');\n            if ($scope.currentDevice._editing != \"existing\") {\n                return;\n            }\n\n            var id = $scope.currentDevice.deviceID\n            delete $scope.devices[id];\n            $scope.config.devices = $scope.deviceList();\n\n            for (var id in $scope.folders) {\n                $scope.folders[id].devices = $scope.folders[id].devices.filter(function (n) {\n                    return n.deviceID !== $scope.currentDevice.deviceID;\n                });\n            }\n\n            $scope.saveConfig();\n        };\n\n        $scope.saveDevice = function () {\n            $('#editDevice').modal('hide');\n            $scope.currentDevice.addresses = $scope.currentDevice._addressesStr.split(',').map(function (x) {\n                return x.trim();\n            });\n            delete $scope.currentDevice._addressesStr;\n            if ($scope.currentDevice._editing == \"defaults\") {\n                $scope.config.defaults.device = $scope.currentDevice;\n            } else {\n                setDeviceConfig();\n            }\n            delete $scope.currentSharing;\n            $scope.currentDevice = {};\n            $scope.saveConfig();\n        };\n\n        function setDeviceConfig() {\n            var currentID = $scope.currentDevice.deviceID;\n            $scope.devices[currentID] = $scope.currentDevice;\n            $scope.config.devices = deviceList($scope.devices);\n\n            for (var id in $scope.currentSharing.selected) {\n                if ($scope.currentSharing.selected[id]) {\n                    var found = false;\n                    for (i = 0; i < $scope.folders[id].devices.length; i++) {\n                        if ($scope.folders[id].devices[i].deviceID === currentID) {\n                            found = true;\n                            // Update encryption pw\n                            $scope.folders[id].devices[i].encryptionPassword = $scope.currentSharing.encryptionPasswords[id];\n                            break;\n                        }\n                    }\n\n                    if (!found) {\n                        // Add device to folder\n                        $scope.folders[id].devices.push({\n                            deviceID: currentID,\n                            encryptionPassword: $scope.currentSharing.encryptionPasswords[id],\n                        });\n                    }\n                } else {\n                    // Remove device from folder\n                    $scope.folders[id].devices = $scope.folders[id].devices.filter(function (n) {\n                        return n.deviceID !== currentID;\n                    });\n                }\n            }\n\n            $scope.config.folders = folderList($scope.folders);\n        };\n\n        $scope.ignoreDevice = function (deviceID, pendingDevice) {\n            var ignoredDevice = angular.copy(pendingDevice);\n            ignoredDevice.deviceID = deviceID;\n            // Bump time\n            ignoredDevice.time = (new Date()).toISOString();\n            $scope.config.remoteIgnoredDevices.push(ignoredDevice);\n            $scope.saveConfig();\n        };\n\n        $scope.dismissPendingDevice = function (deviceID) {\n            $http.delete(urlbase + '/cluster/pending/devices?device=' + encodeURIComponent(deviceID));\n        };\n\n        $scope.unignoreDeviceFromTemporaryConfig = function (ignoredDevice) {\n            $scope.tmpRemoteIgnoredDevices = $scope.tmpRemoteIgnoredDevices.filter(function (existingIgnoredDevice) {\n                return ignoredDevice.deviceID !== existingIgnoredDevice.deviceID;\n            });\n        };\n\n        $scope.ignoredFoldersCountTmpConfig = function () {\n            var count = 0;\n            ($scope.tmpDevices || []).forEach(function (deviceCfg) {\n                count += deviceCfg.ignoredFolders.length;\n            });\n            return count;\n        };\n\n        $scope.unignoreFolderFromTemporaryConfig = function (device, ignoredFolderID) {\n            for (var i = 0; i < $scope.tmpDevices.length; i++) {\n                if ($scope.tmpDevices[i].deviceID == device) {\n                    $scope.tmpDevices[i].ignoredFolders = $scope.tmpDevices[i].ignoredFolders.filter(function (existingIgnoredFolder) {\n                        return existingIgnoredFolder.id !== ignoredFolderID;\n                    });\n                    return;\n                }\n            }\n        };\n\n        $scope.otherDevices = function () {\n            return $scope.deviceList().filter(function (n) {\n                return n.deviceID !== $scope.myID;\n            });\n        };\n\n        $scope.thisDevice = function () {\n            return $scope.devices[$scope.myID];\n        };\n\n        $scope.thisDeviceIn = function (l) {\n            for (var i = 0; i < l.length; i++) {\n                var n = l[i];\n                if (n.deviceID === $scope.myID) {\n                    return n;\n                }\n            }\n        };\n\n        $scope.allDevices = function () {\n            var devices = $scope.otherDevices();\n            devices.push($scope.thisDevice());\n            return devices;\n        };\n\n        $scope.setAllDevicesPause = function (pause) {\n            for (var id in $scope.devices) {\n                $scope.devices[id].paused = pause;\n            };\n            $scope.config.devices = deviceList($scope.devices);\n            $scope.saveConfig();\n        };\n\n        $scope.isAtleastOneDevicePausedStateSetTo = function (pause) {\n            for (var id in $scope.devices) {\n                if ($scope.devices[id].paused == pause) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n\n        $scope.errorList = function () {\n            if (!$scope.errors) {\n                return [];\n            }\n            return $scope.errors.filter(function (e) {\n                return e.when > $scope.seenError;\n            });\n        };\n\n        $scope.clearErrors = function () {\n            $scope.seenError = $scope.errors[$scope.errors.length - 1].when;\n            $http.post(urlbase + '/system/error/clear');\n        };\n\n        $scope.fsWatcherErrorMap = function () {\n            var errs = {}\n            $.each($scope.folders, function (id, cfg) {\n                if (cfg.fsWatcherEnabled && $scope.model[cfg.id] && $scope.model[id].watchError && !cfg.paused && $scope.folderStatus(cfg) !== 'stopped') {\n                    errs[id] = $scope.model[id].watchError;\n                }\n            });\n            return errs;\n        };\n\n        $scope.friendlyDevices = function (str) {\n            for (var id in $scope.devices) {\n                str = str.replace(id, $scope.deviceName($scope.devices[id]));\n            }\n            return str;\n        };\n\n        $scope.folderList = function () {\n            return folderList($scope.folders);\n        };\n\n        $scope.deviceList = function () {\n            return deviceList($scope.devices);\n        };\n\n        $scope.directoryList = [];\n\n        $scope.$watch('currentFolder.path', function (newvalue) {\n            if (!newvalue) {\n                return;\n            }\n            $scope.currentFolder.path = expandTilde(newvalue);\n            $http.get(urlbase + '/system/browse', {\n                params: { current: newvalue }\n            }).success(function (data) {\n                $scope.directoryList = data;\n            }).error($scope.emitHTTPError);\n        });\n\n        $scope.$watch('currentFolder.label', function (newvalue) {\n            if (!newvalue || !shouldSetDefaultFolderPath()) {\n                return;\n            }\n            $scope.currentFolder.path = pathJoin($scope.config.defaults.folder.path, newvalue);\n        });\n\n        $scope.$watch('currentFolder.id', function (newvalue) {\n            if (!newvalue || !shouldSetDefaultFolderPath() || $scope.currentFolder.label) {\n                return;\n            }\n            $scope.currentFolder.path = pathJoin($scope.config.defaults.folder.path, newvalue);\n        });\n\n        $scope.setFSWatcherIntervalDefault = function () {\n            var defaultRescanIntervals = [60, 3600, 3600*24];\n            if (defaultRescanIntervals.indexOf($scope.currentFolder.rescanIntervalS) === -1) {\n                return;\n            }\n            var idx;\n            if ($scope.currentFolder.type === 'receiveencrypted') {\n                idx = 2;\n            } else if ($scope.currentFolder.fsWatcherEnabled) {\n                idx = 1;\n            } else {\n                idx = 0;\n            }\n            $scope.currentFolder.rescanIntervalS = defaultRescanIntervals[idx];\n        };\n\n        $scope.setDefaultsForFolderType = function () {\n            if ($scope.currentFolder.type === 'receiveencrypted') {\n                $scope.currentFolder.fsWatcherEnabled = false;\n                $scope.currentFolder.ignorePerms = true;\n                delete $scope.currentFolder.versioning;\n            } else {\n                $scope.currentFolder.fsWatcherEnabled = true;\n            }\n            $scope.setFSWatcherIntervalDefault();\n        };\n\n        $scope.loadFormIntoScope = function (form) {\n            console.log('loadFormIntoScope', form.$name);\n            switch (form.$name) {\n                case 'deviceEditor':\n                    $scope.deviceEditor = form;\n                    break;\n                case 'folderEditor':\n                    $scope.folderEditor = form;\n                    break;\n            }\n        };\n\n        $scope.globalChanges = function () {\n            $('#globalChanges').modal();\n        };\n\n        function editFolderModal(initialTab) {\n            initVersioningEditing();\n            $scope.currentFolder._recvEnc = $scope.currentFolder.type === 'receiveencrypted';\n            $scope.folderPathErrors = {};\n            $scope.folderEditor.$setPristine();\n            if (!initialTab) {\n                initialTab = \"#folder-general\";\n            }\n            $('.nav-tabs a[href=\"' + initialTab + '\"]').tab('show');\n            $('#editFolder').modal().one('shown.bs.tab', function (e) {\n                if (e.target.attributes.href.value === \"#folder-ignores\") {\n                    $('#folder-ignores textarea').focus();\n                }\n            }).one('hidden.bs.modal', function () {\n                var p = $q.when();\n                // If the modal was closed default patterns should still apply\n                if ($scope.currentFolder._editing == \"new-ignores\" && !$scope.ignores.saved && $scope.ignores.defaultLines) {\n                    p = saveFolderAddIgnores($scope.currentFolder.id, true);\n                }\n                p.then(function () {\n                    window.location.hash = \"\";\n                    $scope.currentFolder = {};\n                    $scope.ignores = {};\n                });\n            });\n        };\n\n        $scope.editFolderModalTitle = function() {\n            if ($scope.editingFolderDefaults()) {\n                return $translate.instant(\"Edit Folder Defaults\");\n            }\n            var title = '';\n            switch ($scope.currentFolder._editing) {\n            case \"existing\":\n                title = $translate.instant(\"Edit Folder\");\n                break;\n            case \"new\":\n            case \"new-pending\":\n                title = $translate.instant(\"Add Folder\");\n                break;\n            case \"new-ignores\":\n                title = $translate.instant(\"Set Ignores on Added Folder\");\n                break;\n            }\n            if ($scope.currentFolder.id !== '') {\n                title += ' (' + $scope.folderLabel($scope.currentFolder.id) + ')';\n            }\n            return title;\n        };\n\n        $scope.editFolderModalIcon = function() {\n            if ($scope.has([\"existing\", \"defaults\"], $scope.currentFolder._editing)) {\n                return 'fas fa-pencil-alt';\n            }\n            return 'fas fa-folder';\n        };\n\n        $scope.editingFolderDefaults = function() {\n            return $scope.currentFolder._editing == 'defaults';\n        }\n\n        $scope.editingFolderExisting = function() {\n            return $scope.currentFolder._editing == 'existing';\n        }\n\n        $scope.editingFolderNew = function() {\n            return $scope.has(['new', 'new-pending'], $scope.currentFolder._editing);\n        }\n\n        function editFolder(initialTab) {\n            if ($scope.currentFolder.path.length > 1 && $scope.currentFolder.path.slice(-1) === $scope.system.pathSeparator) {\n                $scope.currentFolder.path = $scope.currentFolder.path.slice(0, -1);\n            } else if (!$scope.currentFolder.path) {\n                // undefined path leads to invalid input field\n                $scope.currentFolder.path = '';\n            }\n            initShareEditing('folder');\n            editFolderModal(initialTab);\n        }\n\n        $scope.internalVersioningEnabled = function (guiVersioning) {\n            if (!$scope.currentFolder._guiVersioning) {\n                return false;\n            }\n            return ['none', 'external'].indexOf($scope.currentFolder._guiVersioning.selector) === -1;\n        };\n\n        function initVersioningEditing() {\n            $scope.currentFolder._guiVersioning = angular.copy($scope.versioningDefaults);\n\n            var currentVersioning = $scope.currentFolder.versioning;\n\n            if (!currentVersioning || !currentVersioning.type || currentVersioning.type === 'none') {\n                return;\n            }\n\n            $scope.currentFolder._guiVersioning.cleanupIntervalS = +currentVersioning.cleanupIntervalS;\n            $scope.currentFolder._guiVersioning.selector = currentVersioning.type;\n\n            // Apply parameters currently in use\n            switch (currentVersioning.type) {\n            case \"trashcan\":\n                $scope.currentFolder._guiVersioning.trashcanClean = +currentVersioning.params.cleanoutDays;\n                break;\n            case \"simple\":\n                $scope.currentFolder._guiVersioning.simpleKeep = +currentVersioning.params.keep;\n                $scope.currentFolder._guiVersioning.trashcanClean = +currentVersioning.params.cleanoutDays;\n                break;\n            case \"staggered\":\n                $scope.currentFolder._guiVersioning.staggeredMaxAge = Math.floor(+currentVersioning.params.maxAge / 86400);\n                break;\n            case \"external\":\n                $scope.currentFolder._guiVersioning.externalCommand = currentVersioning.params.command;\n                break;\n            }\n        };\n\n        $scope.editFolderExisting = function (folderCfg, initialTab) {\n            $scope.currentFolder = angular.copy(folderCfg);\n            $scope.currentFolder._editing = \"existing\";\n            editFolderLoadIgnores();\n            editFolder(initialTab);\n        };\n\n        function editFolderLoadingIgnores() {\n            $scope.ignores.text = 'Loading...';\n            $scope.ignores.error = null;\n            $scope.ignores.disabled = true;\n        }\n\n        function editFolderGetIgnores() {\n            return $http.get(urlbase + '/db/ignores?folder=' + encodeURIComponent($scope.currentFolder.id))\n                .then(function (r) {\n                    return r.data;\n                }, function (response) {\n                    $scope.ignores.text = $translate.instant(\"Failed to load ignore patterns.\");\n                    return $q.reject(response);\n            });\n        };\n\n        function editFolderLoadIgnores() {\n            editFolderLoadingIgnores();\n            return editFolderGetIgnores().then(function (data) {\n                if (!data) {\n                    return;\n                }\n                editFolderInitIgnores(data.ignore, data.error);\n            }, $scope.emitHTTPError);\n        }\n\n        $scope.editFolderDefaults = function() {\n            $q.all([\n                $http.get(urlbase + '/config/defaults/folder').then(function (response) {\n                    $scope.currentFolder = response.data;\n                    $scope.currentFolder._editing = \"defaults\";\n                }),\n                getDefaultIgnores().then(editFolderInitIgnores),\n            ]).then(editFolder, $scope.emitHTTPError);\n        };\n\n        function getDefaultIgnores() {\n            return $http.get(urlbase + '/config/defaults/ignores').then(function (r) {\n                return r.data.lines;\n            });\n        }\n\n        function editFolderInitIgnores(lines, error) {\n            $scope.ignores.originalLines = lines || [];\n            setIgnoresText(lines);\n            $scope.ignores.error = error;\n            $scope.ignores.disabled = false;\n        }\n\n        function setIgnoresText(lines) {\n            $scope.ignores.text = lines ? lines.join('\\n') : \"\";\n        }\n\n        $scope.selectAllSharedDevices = function (state) {\n            var devices = $scope.currentSharing.shared;\n            for (var i = 0; i < devices.length; i++) {\n                $scope.currentSharing.selected[devices[i].deviceID] = !!state;\n            }\n        };\n\n        $scope.selectAllUnrelatedDevices = function (state) {\n            var devices = $scope.currentSharing.unrelated;\n            for (var i = 0; i < devices.length; i++) {\n                $scope.currentSharing.selected[devices[i].deviceID] = !!state;\n            }\n        };\n\n        $scope.addFolder = function () {\n            $http.get(urlbase + '/svc/random/string?length=10').success(function (data) {\n                var folderID = (data.random.substr(0, 5) + '-' + data.random.substr(5, 5)).toLowerCase();\n                addFolderInit(folderID).then(function() {\n                    // Triggers the watch that sets the path\n                    $scope.currentFolder._editing = \"new\";\n                    $scope.currentFolder.label = $scope.currentFolder.label;\n                    editFolderModal();\n                });\n            });\n        };\n\n        $scope.addFolderAndShare = function (folderID, pendingFolder, device) {\n            addFolderInit(folderID).then(function() {\n                $scope.currentSharing.selected[device] = true;\n                $scope.currentFolder.label = pendingFolder.offeredBy[device].label;\n                for (var k in pendingFolder.offeredBy) {\n                    if (pendingFolder.offeredBy[k].receiveEncrypted) {\n                        $scope.currentFolder.type = \"receiveencrypted\";\n                        $scope.setDefaultsForFolderType();\n                        break;\n                    }\n                }\n                $scope.currentFolder._editing = \"new-pending\";\n                editFolderModal();\n            });\n        };\n\n        function addFolderInit(folderID) {\n            return $http.get(urlbase + '/config/defaults/folder').then(function (response) {\n                $scope.currentFolder = response.data;\n                $scope.currentFolder.id = folderID;\n                initShareEditing('folder');\n                $scope.currentSharing.unrelated = $scope.currentSharing.unrelated.concat($scope.currentSharing.shared);\n                $scope.currentSharing.shared = [];\n                // Ignores don't need to be initialized here, as that happens in\n                // a second step if the user indicates in the creation modal\n                // that they want to set ignores\n            }, $scope.emitHTTPError);\n        }\n\n        $scope.shareFolderWithDevice = function (folder, device) {\n            var folderCfg = $scope.folders[folder];\n            if (folderCfg.type == \"receiveencrypted\" || !$scope.pendingIsRemoteEncrypted(folder, device)) {\n                $scope.folders[folder].devices.push({\n                    deviceID: device\n                });\n                $scope.config.folders = folderList($scope.folders);\n                $scope.saveConfig();\n            } else {\n                // Open edit folder dialog to enter encryption password\n                $scope.editFolderExisting(folderCfg, \"#folder-sharing\");\n                $scope.currentSharing.selected[device] = true;\n            }\n        };\n\n        $scope.saveFolder = function () {\n            if ($scope.currentFolder._editing == \"new-ignores\") {\n                // On modal being hidden without clicking save, the defaults will be saved.\n                $scope.ignores.saved = true;\n                saveFolderAddIgnores($scope.currentFolder.id);\n                hideFolderModal();\n                return;\n            }\n\n            $scope.validateXattrFilter();\n            var folderCfg = angular.copy($scope.currentFolder);\n            $scope.currentSharing.selected[$scope.myID] = true;\n            var newDevices = [];\n            folderCfg.devices.forEach(function (dev) {\n                if ($scope.currentSharing.selected[dev.deviceID] === true) {\n                    dev.encryptionPassword = $scope.currentSharing.encryptionPasswords[dev.deviceID];\n                    newDevices.push(dev);\n                    delete $scope.currentSharing.selected[dev.deviceID];\n                };\n            });\n            for (var deviceID in $scope.currentSharing.selected) {\n                if ($scope.currentSharing.selected[deviceID] === true) {\n                    newDevices.push({\n                        deviceID: deviceID,\n                        encryptionPassword: $scope.currentSharing.encryptionPasswords[deviceID],\n                    });\n                }\n            }\n            folderCfg.devices = newDevices;\n            delete $scope.currentSharing;\n\n            if (!folderCfg.versioning) {\n                folderCfg.versioning = {params: {}};\n            }\n            folderCfg.versioning.type = folderCfg._guiVersioning.selector;\n            if ($scope.internalVersioningEnabled()) {\n                folderCfg.versioning.cleanupIntervalS = folderCfg._guiVersioning.cleanupIntervalS;\n            }\n            switch (folderCfg._guiVersioning.selector) {\n            case \"trashcan\":\n                folderCfg.versioning.params.cleanoutDays = '' + folderCfg._guiVersioning.trashcanClean;\n                break;\n            case \"simple\":\n                folderCfg.versioning.params.keep = '' + folderCfg._guiVersioning.simpleKeep,\n                folderCfg.versioning.params.cleanoutDays = '' + folderCfg._guiVersioning.trashcanClean;\n                break;\n            case \"staggered\":\n                folderCfg.versioning.params.maxAge = '' + (folderCfg._guiVersioning.staggeredMaxAge * 86400);\n                break;\n            case \"external\":\n                folderCfg.versioning.params.command = '' + folderCfg._guiVersioning.externalCommand;\n                break;\n            default:\n                folderCfg.versioning = {type: ''};\n            }\n            delete folderCfg._guiVersioning;\n\n            if ($scope.currentFolder._editing == \"defaults\") {\n                hideFolderModal();\n                $scope.config.defaults.ignores.lines = ignoresArray();\n                $scope.config.defaults.folder = folderCfg;\n                $scope.saveConfig();\n                return;\n            }\n\n            // This is a new folder where ignores should apply before it first starts.\n            if ($scope.currentFolder._addIgnores) {\n                folderCfg.paused = true;\n            }\n            $scope.folders[folderCfg.id] = folderCfg;\n            $scope.config.folders = folderList($scope.folders);\n\n            if ($scope.currentFolder._editing == \"existing\") {\n                hideFolderModal();\n                saveFolderIgnoresExisting();\n                $scope.saveConfig();\n                return;\n            }\n\n            // No ignores to be set on the new folder, save directly.\n            if (!$scope.currentFolder._addIgnores) {\n                hideFolderModal();\n                $scope.saveConfig();\n                return;\n            }\n\n            // Add folder (paused), load existing ignores and if there are none,\n            // load default ignores, then let the user edit them.\n            $scope.saveConfig().then(function() {\n                editFolderLoadingIgnores();\n                $scope.currentFolder._editing = \"new-ignores\";\n                $('.nav-tabs a[href=\"#folder-ignores\"]').tab('show');\n                return editFolderGetIgnores();\n            }).then(function (data) {\n                // Error getting ignores -> leave error message.\n                if (!data) {\n                    return;\n                }\n                if ((data.ignore && data.ignore.length > 0) || data.error) {\n                    editFolderInitIgnores(data.ignore, data.error);\n                } else {\n                    getDefaultIgnores().then(function (lines) {\n                        setIgnoresText(lines);\n                        $scope.ignores.defaultLines = lines;\n                        $scope.ignores.disabled = false;\n                    });\n                }\n            }, $scope.emitHTTPError);\n        };\n\n        function saveFolderIgnoresExisting() {\n            if ($scope.ignores.disabled) {\n                return;\n            }\n            var ignores = ignoresArray();\n\n            function arrayDiffers(a, b) {\n                return !a !== !b || a.length !== b.length || a.some(function (v, i) { return v !== b[i]; });\n            }\n            if (arrayDiffers(ignores, $scope.ignores.originalLines)) {\n                return saveIgnores(ignores);\n            };\n        }\n\n        function saveFolderAddIgnores(folderID, useDefault) {\n            var ignores = useDefault ? $scope.ignores.defaultLines : ignoresArray();\n            return saveIgnores(ignores).then(function () {\n                return $scope.setFolderPause(folderID, $scope.currentFolder.paused);\n            });\n        };\n\n        function ignoresArray() {\n            var ignores = $scope.ignores.text.split('\\n');\n            // Split always returns a minimum 1-length array even for no patterns\n            if (ignores.length === 1 && ignores[0] === \"\") {\n                ignores = [];\n            }\n            return ignores;\n        }\n\n        $scope.ignoreFolder = function (device, folderID, offeringDevice) {\n            var ignoredFolder = {\n                id: folderID,\n                label: offeringDevice.label,\n                // Bump time\n                time: (new Date()).toISOString()\n            }\n\n            if (device in $scope.devices) {\n                $scope.devices[device].ignoredFolders.push(ignoredFolder);\n                $scope.saveConfig();\n            }\n        };\n\n        $scope.dismissPendingFolder = function (folderID, deviceID) {\n            $http.delete(urlbase + '/cluster/pending/folders?folder=' + encodeURIComponent(folderID)\n                         + '&device=' + encodeURIComponent(deviceID));\n        };\n\n        $scope.deviceNameMarkRemoteState = function (deviceID, folderID) {\n            var name = $scope.deviceName($scope.devices[deviceID]);\n            // Add footnote if sharing was not accepted on the remote device\n            if (deviceID in $scope.completion && folderID in $scope.completion[deviceID]) {\n                if ($scope.completion[deviceID][folderID].remoteState == 'notSharing') {\n                    name += '<sup>1</sup>';\n                } else if ($scope.completion[deviceID][folderID].remoteState == 'paused') {\n                    name += '<sup>2</sup>';\n                }\n            }\n            return name;\n        };\n\n        $scope.sharesFolder = function (folderCfg) {\n            var names = [];\n            folderCfg.devices.forEach(function (device) {\n                if (device.deviceID !== $scope.myID) {\n                    names.push($scope.deviceNameMarkRemoteState(device.deviceID, folderCfg.id));\n                }\n            });\n            names.sort();\n            return names.join(\", \");\n        };\n\n        $scope.folderHasUnacceptedDevices = function (folderCfg) {\n            for (var deviceID in $scope.completion) {\n                if (deviceID in $scope.devices\n                    && folderCfg.id in $scope.completion[deviceID]\n                    && $scope.completion[deviceID][folderCfg.id].remoteState == 'notSharing') {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        $scope.folderHasPausedDevices = function (folderCfg) {\n            for (var deviceID in $scope.completion) {\n                if (deviceID in $scope.devices\n                    && folderCfg.id in $scope.completion[deviceID]\n                    && $scope.completion[deviceID][folderCfg.id].remoteState == 'paused') {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        $scope.deviceFolders = function (deviceCfg) {\n            var folders = [];\n            $scope.folderList().forEach(function (folder) {\n                for (var i = 0; i < folder.devices.length; i++) {\n                    if (folder.devices[i].deviceID === deviceCfg.deviceID) {\n                        folders.push(folder.id);\n                        break;\n                    }\n                }\n            });\n            return folders;\n        };\n\n        $scope.folderLabel = function (folderID) {\n            if (!$scope.folders[folderID]) {\n                return folderID;\n            }\n            var label = $scope.folders[folderID].label;\n            return label && label.length > 0 ? label : folderID;\n        };\n\n        $scope.folderLabelMarkRemoteState = function (folderID, deviceID) {\n            var label = $scope.folderLabel(folderID);\n            // Add footnote if sharing was not accepted on the remote device\n            if (deviceID in $scope.completion && folderID in $scope.completion[deviceID]) {\n                if ($scope.completion[deviceID][folderID].remoteState == 'notSharing') {\n                    label += '<sup>1</sup>';\n                } else if ($scope.completion[deviceID][folderID].remoteState == 'paused') {\n                    label += '<sup>2</sup>';\n                }\n            }\n            return label;\n        };\n\n        $scope.sharedFolders = function (deviceCfg) {\n            var labels = [];\n            $scope.deviceFolders(deviceCfg).forEach(function (folderID) {\n                labels.push($scope.folderLabelMarkRemoteState(folderID, deviceCfg.deviceID));\n            });\n            return labels.join(', ');\n        };\n\n        $scope.deviceHasUnacceptedFolders = function (deviceCfg) {\n            if (!(deviceCfg.deviceID in $scope.completion)) {\n                return false;\n            }\n            for (var folderID in $scope.completion[deviceCfg.deviceID]) {\n                if (folderID in $scope.folders\n                    && $scope.completion[deviceCfg.deviceID][folderID].remoteState == 'notSharing') {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        $scope.deviceHasPausedFolders = function (deviceCfg) {\n            if (!(deviceCfg.deviceID in $scope.completion)) {\n                return false;\n            }\n            for (var folderID in $scope.completion[deviceCfg.deviceID]) {\n                if (folderID in $scope.folders\n                    && $scope.completion[deviceCfg.deviceID][folderID].remoteState == 'paused') {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        $scope.deleteFolder = function (id) {\n            hideFolderModal();\n            if ($scope.currentFolder._editing != \"existing\") {\n                return;\n            }\n\n            delete $scope.folders[id];\n            delete $scope.model[id];\n            $scope.config.folders = folderList($scope.folders);\n            recalcLocalStateTotal();\n\n            $scope.saveConfig();\n        };\n\n        function hideFolderModal() {\n            $('#editFolder').modal('hide');\n        }\n\n        function resetRestoreVersions() {\n            $scope.restoreVersions = {\n                folder: null,\n                selections: {},\n                versions: null,\n                tree: null,\n                errors: null,\n                filters: {},\n                massAction: function (name, action) {\n                    $.each($scope.restoreVersions.versions, function (key) {\n                        if (key.indexOf(name + '/') == 0 && (!$scope.restoreVersions.filters.text || key.indexOf($scope.restoreVersions.filters.text) > -1)) {\n                            if (action == 'unset') {\n                                delete $scope.restoreVersions.selections[key];\n                                return;\n                            }\n\n                            var availableVersions = [];\n                            $.each($scope.restoreVersions.filterVersions($scope.restoreVersions.versions[key]), function (idx, version) {\n                                availableVersions.push(version.versionTime);\n                            })\n\n                            if (availableVersions.length) {\n                                availableVersions.sort(function (a, b) { return a - b; });\n                                if (action == 'latest') {\n                                    $scope.restoreVersions.selections[key] = availableVersions.pop();\n                                } else if (action == 'oldest') {\n                                    $scope.restoreVersions.selections[key] = availableVersions.shift();\n                                }\n                            }\n                        }\n                    });\n                },\n                filterVersions: function (versions) {\n                    var filteredVersions = [];\n                    $.each(versions, function (idx, version) {\n                        if (moment(version.versionTime).isBetween($scope.restoreVersions.filters['start'], $scope.restoreVersions.filters['end'], null, '[]')) {\n                            filteredVersions.push(version);\n                        }\n                    });\n                    return filteredVersions;\n                },\n                selectionCount: function () {\n                    var count = 0;\n                    $.each($scope.restoreVersions.selections, function (key, value) {\n                        if (value) {\n                            count++;\n                        }\n                    });\n                    return count;\n                },\n\n                restore: function () {\n                    $scope.restoreVersions.tree.clear();\n                    $scope.restoreVersions.tree = null;\n                    $scope.restoreVersions.versions = null;\n                    var selections = {};\n                    $.each($scope.restoreVersions.selections, function (key, value) {\n                        if (value) {\n                            selections[key] = value;\n                        }\n                    });\n                    $scope.restoreVersions.selections = {};\n\n                    $http.post(urlbase + '/folder/versions?folder=' + encodeURIComponent($scope.restoreVersions.folder), selections).success(function (data) {\n                        if (Object.keys(data).length == 0) {\n                            $('#restoreVersions').modal('hide');\n                        } else {\n                            $scope.restoreVersions.errors = data;\n                        }\n                    });\n                },\n                show: function (folder) {\n                    $scope.restoreVersions.folder = folder;\n\n                    var closed = false;\n                    var modalShown = $q.defer();\n                    $('#restoreVersions').modal().one('hidden.bs.modal', function () {\n                        closed = true;\n                        resetRestoreVersions();\n                    }).one('shown.bs.modal', function () {\n                        modalShown.resolve();\n                    });\n\n                    var dataReceived = $http.get(urlbase + '/folder/versions?folder=' + encodeURIComponent($scope.restoreVersions.folder))\n                        .success(function (data) {\n                            $.each(data, function (key, values) {\n                                $.each(values, function (idx, value) {\n                                    value.modTime = new Date(value.modTime);\n                                    value.versionTime = new Date(value.versionTime);\n                                });\n                                values.sort(function (a, b) {\n                                    return b.versionTime - a.versionTime;\n                                });\n                            });\n                            if (closed) return;\n                            $scope.restoreVersions.versions = data;\n                        });\n\n                    $q.all([dataReceived, modalShown.promise]).then(function () {\n                        $timeout(function () {\n                            if (closed) {\n                                resetRestoreVersions();\n                                return;\n                            } else if ($scope.sizeOf($scope.restoreVersions.versions) === '0') {\n                                return;\n                            }\n\n                            $scope.restoreVersions.tree = $(\"#restoreTree\").fancytree({\n                                extensions: [\"table\", \"filter\", \"glyph\"],\n                                quicksearch: true,\n                                filter: {\n                                    hideExpanders: true,\n                                    mode: \"hide\"\n                                },\n                                glyph: {\n                                    preset: \"awesome5\",\n                                },\n                                table: {\n                                    indentation: 24,\n                                },\n                                strings: {\n                                    loading: $translate.instant(\"Loading data...\"),\n                                    loadError: $translate.instant(\"Failed to load file versions.\"),\n                                    noData: $translate.instant(\"There are no file versions to restore.\")\n                                },\n                                // Set to '1' to silence errors after pressing arrow keys on file nodes.\n                                // Happens on the official option configuration from the developer's site\n                                // too, so probably a bug?\n                                debugLevel: 1,\n                                source: buildTree($scope.restoreVersions.versions),\n                                renderColumns: function (event, data) {\n                                    // Case insensitive sort with folders on top.\n                                    var cmp = function (a, b) {\n                                        var x = (a.isFolder() ? \"0\" : \"1\") + a.title.toLowerCase(),\n                                            y = (b.isFolder() ? \"0\" : \"1\") + b.title.toLowerCase();\n                                        return x === y ? 0 : x > y ? 1 : -1;\n                                    };\n                                    data.tree.getRootNode().sortChildren(cmp, true);\n\n                                    var node = data.node,\n                                        $tdList = $(node.tr).find(\">td\"),\n                                        template;\n                                    if (node.folder) {\n                                        template = '<div ng-include=\"\\'syncthing/folder/restoreVersionsMassActions.html\\'\"/>';\n                                    } else {\n                                        template = '<div ng-include=\"\\'syncthing/folder/restoreVersionsVersionSelector.html\\'\"/>';\n                                    }\n\n                                    var scope = $rootScope.$new(true);\n                                    scope.key = node.key;\n                                    scope.restoreVersions = $scope.restoreVersions;\n\n                                    $tdList.eq(1).html(\n                                        $compile(template)(scope)\n                                    );\n\n                                    // Force angular to redraw.\n                                    $timeout(function () {\n                                        $scope.$apply();\n                                    });\n                                }\n                            }).fancytree(\"getTree\");\n\n                            var minDate = moment(),\n                                maxDate = moment(0, 'X'),\n                                date;\n\n                            // Find version window.\n                            $.each($scope.restoreVersions.versions, function (key) {\n                                $.each($scope.restoreVersions.versions[key], function (idx, version) {\n                                    date = moment(version.versionTime);\n                                    if (date.isBefore(minDate)) {\n                                        minDate = date;\n                                    }\n                                    if (date.isAfter(maxDate)) {\n                                        maxDate = date;\n                                    }\n                                });\n                            });\n\n                            $scope.restoreVersions.filters['start'] = minDate;\n                            $scope.restoreVersions.filters['end'] = maxDate;\n\n                            var ranges = {};\n                            ranges[$translate.instant(\"All Time\")] = [minDate, maxDate];\n                            ranges[$translate.instant(\"Today\")] = [moment().startOf('day'), moment()];\n                            ranges[$translate.instant(\"Yesterday\")] = [moment().subtract(1, 'days').startOf('day'), moment().startOf('day')];\n                            ranges[$translate.instant(\"Last 7 Days\")] = [moment().subtract(6, 'days').startOf('day'), moment()];\n                            ranges[$translate.instant(\"Last 30 Days\")] = [moment().subtract(29, 'days').startOf('day'), moment()];\n                            ranges[$translate.instant(\"This Month\")] = [moment().startOf('month'), moment()];\n                            ranges[$translate.instant(\"Last Month\")] = [moment().subtract(1, 'month').startOf('month'), moment().startOf('month')];\n\n                            // Filter out invalid ranges.\n                            $.each(ranges, function (key, range) {\n                                if (!range[0].isBetween(minDate, maxDate, null, '[]') && !range[1].isBetween(minDate, maxDate, null, '[]')) {\n                                    delete ranges[key];\n                                }\n                            });\n\n                            $(\"#restoreVersionDateRange\").daterangepicker({\n                                timePicker: true,\n                                timePicker24Hour: true,\n                                timePickerSeconds: true,\n                                opens: \"left\",\n                                drops: \"up\",\n                                startDate: minDate,\n                                endDate: maxDate,\n                                minDate: minDate,\n                                maxDate: maxDate,\n                                ranges: ranges,\n                                locale: {\n                                    applyLabel: $translate.instant(\"Apply\"),\n                                    cancelLabel: $translate.instant(\"Cancel\"),\n                                    customRangeLabel: $translate.instant(\"Custom Range\"),\n                                    format: 'YYYY/MM/DD HH:mm:ss',\n                                }\n                            }).on('apply.daterangepicker', function (ev, picker) {\n                                $scope.restoreVersions.filters['start'] = picker.startDate;\n                                $scope.restoreVersions.filters['end'] = picker.endDate;\n                                // Events for this UI element are not managed by angular.\n                                // Force angular to wake up.\n                                $timeout(function () {\n                                    $scope.$apply();\n                                });\n                            });\n                        });\n                    });\n                }\n            };\n        }\n        resetRestoreVersions();\n\n        $scope.$watchCollection('restoreVersions.filters', function () {\n            if (!$scope.restoreVersions.tree) return;\n\n            $scope.restoreVersions.tree.filterNodes(function (node) {\n                if (node.folder) return false;\n                if ($scope.restoreVersions.filters.text && node.key.indexOf($scope.restoreVersions.filters.text) < 0) {\n                    return false;\n                }\n                if ($scope.restoreVersions.filterVersions(node.data.versions).length == 0) {\n                    return false;\n                }\n                return true;\n            });\n        });\n\n        $scope.setAPIKey = function (cfg) {\n            $http.get(urlbase + '/svc/random/string?length=32').success(function (data) {\n                cfg.apiKey = data.random;\n            });\n        };\n\n        $scope.acceptUR = function () {\n            $scope.config.options.urAccepted = $scope.system.urVersionMax;\n            $scope.config.options.urSeen = $scope.system.urVersionMax;\n            $scope.saveConfig();\n            $('#ur').modal('hide');\n        };\n\n        $scope.declineUR = function () {\n            if ($scope.config.options.urAccepted === 0) {\n                $scope.config.options.urAccepted = -1;\n            }\n            $scope.config.options.urSeen = $scope.system.urVersionMax;\n            $scope.saveConfig();\n            $('#ur').modal('hide');\n        };\n\n        $scope.showNeed = function (folder) {\n            $scope.neededFolder = folder;\n            $scope.refreshNeed(1, 10);\n            $('#needed').modal().one('hidden.bs.modal', function () {\n                $scope.needed = undefined;\n                $scope.neededFolder = '';\n            });\n        };\n\n        $scope.showRemoteNeed = function (device) {\n            resetRemoteNeed();\n            $scope.remoteNeedDevice = device;\n            $scope.deviceFolders(device).forEach(function (folder) {\n                var comp = $scope.completion[device.deviceID][folder];\n                if (comp !== undefined && comp.needItems + comp.needDeletes === 0) {\n                    return;\n                }\n                $scope.remoteNeedFolders.push(folder);\n                $scope.refreshRemoteNeed(folder, 1, 10);\n            });\n            $('#remoteNeed').modal().one('hidden.bs.modal', function () {\n                resetRemoteNeed();\n            });\n        };\n\n        $scope.downloadProgressEnabled = function() {\n            return $scope.config.options &&\n                $scope.config.options.progressUpdateIntervalS > 0 &&\n                $scope.folders[$scope.neededFolder] &&\n                $scope.folders[$scope.neededFolder].type != 'receiveencrypted';\n        }\n\n        $scope.showFailed = function (folder) {\n            $scope.failed.folder = folder;\n            $scope.failed = $scope.refreshFailed(1, 10);\n            $('#failed').modal().one('hidden.bs.modal', function () {\n                $scope.failed = {};\n            });\n        };\n\n        $scope.hasFailedFiles = function (folder) {\n            if (!$scope.model[folder]) {\n                return false;\n            }\n            return $scope.model[folder].errors !== 0;\n        };\n\n        $scope.showLocalChanged = function (folder, folderType) {\n            $scope.localChangedFolder = folder;\n            $scope.localChangedType = folderType;\n            $scope.localChanged = $scope.refreshLocalChanged(1, 10);\n            $('#localChanged').modal().one('hidden.bs.modal', function () {\n                $scope.localChanged = {};\n                $scope.localChangedFolder = undefined;\n                $scope.localChangedType = undefined;\n            });\n        };\n\n        $scope.hasReceiveOnlyChanged = function (folderCfg) {\n            if (!folderCfg || folderCfg.type !== [\"receiveonly\",  \"receiveencrypted\"].indexOf(folderCfg.type) === -1) {\n                return false;\n            }\n            var counts = $scope.model[folderCfg.id];\n            return counts && counts.receiveOnlyTotalItems > 0;\n        };\n\n        $scope.revertOverride = function () {\n            $http.post(\n                urlbase + \"/db/\" + $scope.revertOverrideParams.operation +\"?folder=\"\n                +encodeURIComponent($scope.revertOverrideParams.folderID));\n        };\n\n        $scope.revertOverrideConfirmationModal = function (type, folderID) {\n            var params = {\n                type: type,\n                folderID: folderID,\n            };\n            switch (type) {\n                case \"override\":\n                    params.heading = $translate.instant(\"Override Changes\");\n                    params.icon = \"fas fa-arrow-circle-up\"\n                    params.operation = \"override\";\n                    break;\n                case \"revert\":\n                    params.heading = $translate.instant(\"Revert Local Changes\");\n                    params.icon = \"fas fa-arrow-circle-down\"\n                    params.operation = \"revert\";\n                    break;\n                case \"deleteEnc\":\n                    params.heading = $translate.instant(\"Delete Unexpected Items\");\n                    params.icon = \"fas fa-minus-circle\"\n                    params.operation = \"revert\";\n                    break;\n            }\n            $scope.revertOverrideParams = params;\n            $('#revert-override-confirmation').modal('show');\n        };\n\n        $scope.advanced = function () {\n            $scope.advancedConfig = angular.copy($scope.config);\n            $scope.advancedConfig.devices.sort(deviceCompare);\n            $scope.advancedConfig.folders.sort(folderCompare);\n            $scope.advancedConfig.defaults.ignores._lines = function (newValue) {\n                if (arguments.length) {\n                    $scope.advancedConfig.defaults.ignores.lines = newValue.split('\\n');\n                }\n                return $scope.advancedConfig.defaults.ignores.lines.join('\\n');\n            };\n            $('#advanced').modal('show');\n        };\n\n        $scope.showReportPreview = function () {\n            $scope.reportPreview = true;\n        };\n\n        $scope.refreshReportDataPreview = function (ver, diff) {\n            $scope.reportDataPreview = '';\n            if (!ver) {\n                return;\n            }\n            var version = parseInt(ver);\n            if (diff && version > 2) {\n                $q.all([\n                    $http.get(urlbase + '/svc/report?version=' + version),\n                    $http.get(urlbase + '/svc/report?version=' + (version - 1)),\n                ]).then(function (responses) {\n                    var newReport = responses[0].data;\n                    var oldReport = responses[1].data;\n                    angular.forEach(oldReport, function (_, key) {\n                        delete newReport[key];\n                    });\n                    $scope.reportDataPreview = newReport;\n                });\n            } else {\n                $http.get(urlbase + '/svc/report?version=' + version).success(function (data) {\n                    $scope.reportDataPreview = data;\n                }).error($scope.emitHTTPError);\n            }\n        };\n\n        $scope.rescanAllFolders = function () {\n            $http.post(urlbase + \"/db/scan\");\n        };\n\n        $scope.rescanFolder = function (folder) {\n            $http.post(urlbase + \"/db/scan?folder=\" + encodeURIComponent(folder));\n        };\n\n        $scope.setAllFoldersPause = function (pause) {\n            var folderListCache = $scope.folderList();\n\n            for (var i = 0; i < folderListCache.length; i++) {\n                folderListCache[i].paused = pause;\n            }\n\n            $scope.config.folders = folderList(folderListCache);\n            $scope.saveConfig();\n        };\n\n        $scope.isAtleastOneFolderPausedStateSetTo = function (pause) {\n            var folderListCache = $scope.folderList();\n\n            for (var i = 0; i < folderListCache.length; i++) {\n                if (folderListCache[i].paused == pause) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n\n        $scope.activateAllFsWatchers = function () {\n            var folders = $scope.folderList();\n\n            $.each(folders, function (i) {\n                if (folders[i].fsWatcherEnabled) {\n                    return;\n                }\n                folders[i].fsWatcherEnabled = true;\n                if (folders[i].rescanIntervalS === 0) {\n                    return;\n                }\n                // Delay full scans, but scan at least once per day\n                folders[i].rescanIntervalS *= 60;\n                if (folders[i].rescanIntervalS > 86400) {\n                    folders[i].rescanIntervalS = 86400;\n                }\n            });\n\n            $scope.config.folders = folders;\n            $scope.saveConfig();\n        };\n\n        $scope.bumpFile = function (folder, file) {\n            var url = urlbase + \"/db/prio?folder=\" + encodeURIComponent(folder) + \"&file=\" + encodeURIComponent(file);\n            // In order to get the right view of data in the response.\n            url += \"&page=\" + $scope.needed.page;\n            url += \"&perpage=\" + $scope.needed.perpage;\n            $http.post(url).success(function (data) {\n                if ($scope.neededFolder === folder) {\n                    console.log(\"bumpFile\", folder, data);\n                    parseNeeded(data);\n                }\n            }).error($scope.emitHTTPError);\n        };\n\n        $scope.versionString = function () {\n            if (!$scope.version.version) {\n                return '';\n            }\n\n            var os = {\n                'darwin': 'macOS',\n                'dragonfly': 'DragonFly BSD',\n                'freebsd': 'FreeBSD',\n                'openbsd': 'OpenBSD',\n                'netbsd': 'NetBSD',\n                'linux': 'Linux',\n                'windows': 'Windows',\n                'solaris': 'Solaris'\n            }[$scope.version.os] || $scope.version.os;\n\n            var arch = {\n                '386': '32-bit Intel/AMD',\n                'amd64': '64-bit Intel/AMD',\n                'arm': '32-bit ARM',\n                'arm64': '64-bit ARM',\n                'ppc64': '64-bit PowerPC',\n                'ppc64le': '64-bit PowerPC (LE)',\n                'mips': '32-bit MIPS',\n                'mipsle': '32-bit MIPS (LE)',\n                'mips64': '64-bit MIPS',\n                'mips64le': '64-bit MIPS (LE)',\n                'riscv64': '64-bit RISC-V',\n                's390x': '64-bit z/Architecture',\n            }[$scope.version.arch] || $scope.version.arch;\n\n            if ($scope.version.container) {\n                arch += \" Container\";\n            }\n\n            return $scope.version.version + ', ' + os + ' (' + arch + ')';\n        };\n\n        $scope.versionBase = function () {\n            if (!$scope.version.version) {\n                return '';\n            }\n            var version = $scope.version.version;\n            var pos = version.indexOf('-');\n            if (pos > 0) {\n                version = version.slice(0, pos);\n            }\n            return version;\n        };\n\n        $scope.docsURL = function (path) {\n            var url = 'https://docs.syncthing.net';\n            if (!path) {\n                // Undefined or null should become a valid string.\n                path = '';\n            }\n            var hash = path.indexOf('#');\n            if (hash != -1) {\n                url += '/' + path.slice(0, hash);\n                url += '?version=' + $scope.versionBase();\n                url += path.slice(hash);\n            } else {\n                url += '/' + path;\n                url += '?version=' + $scope.versionBase();\n            }\n            return url;\n        };\n\n        $scope.inputTypeFor = function (key, value) {\n            if (key.substr(0, 1) === '_') {\n                return 'skip';\n            }\n            if (value === null) {\n                return 'null';\n            }\n            if (typeof value === 'number') {\n                return 'number';\n            }\n            if (typeof value === 'boolean') {\n                return 'checkbox';\n            }\n            if (value instanceof Array) {\n                return 'list';\n            }\n            if (typeof value === 'object') {\n                return 'skip';\n            }\n            return 'text';\n        };\n\n        $scope.themeName = function (theme) {\n            var translation = $translate.instant(\"theme-name-\" + theme);\n            if (translation.indexOf(\"theme-name-\") == 0) {\n                // Fall back to simple Title Casing on missing translation\n                translation = theme.toLowerCase().replace(/(?:^|\\s)\\S/g, function (a) {\n                    return a.toUpperCase();\n                });\n            }\n            return translation;\n        };\n\n        $scope.modalLoaded = function () {\n            // once all modal elements have been processed\n            if ($('modal').length === 0) {\n                // pseudo main. called on all definitions assigned\n                initController();\n            }\n        };\n\n        $scope.toggleUnits = function () {\n            $scope.metricRates = !$scope.metricRates;\n            try {\n                window.localStorage[\"metricRates\"] = $scope.metricRates;\n            } catch (exception) { }\n        };\n\n        $scope.sizeOf = function (dict) {\n            if (dict === undefined) {\n                return 0;\n            }\n            return Object.keys(dict).length;\n        };\n\n        $scope.has = function (array, element) {\n            return array.indexOf(element) >= 0;\n        };\n\n        $scope.dismissNotification = function (id) {\n            var idx = $scope.config.options.unackedNotificationIDs.indexOf(id);\n            if (idx > -1) {\n                $scope.config.options.unackedNotificationIDs.splice(idx, 1);\n                $scope.saveConfig();\n            }\n        };\n\n        $scope.abbreviatedError = function (addr) {\n            var status = $scope.system.lastDialStatus[addr];\n            if (!status || !status.error) {\n                return null;\n            }\n            var time = $filter('date')(status.when, \"HH:mm:ss\")\n            var err = status.error.replace(/.+: /, '');\n            return err + \" (\" + time + \")\";\n        };\n\n        $scope.setCrashReportingEnabled = function (enabled) {\n            $scope.config.options.crashReportingEnabled = enabled;\n            $scope.saveConfig();\n        };\n\n        $scope.isUnixAddress = function (address) {\n            return address != null &&\n                (address.indexOf('/') == 0 ||\n                    address.indexOf('unix://') == 0 ||\n                    address.indexOf('unixs://') == 0);\n        };\n\n        $scope.shareDeviceIdDialog = function (method) {\n            // This function can be used to share both user's own and remote\n            // device IDs. Three sharing methods are used - copy to clipboard,\n            // send by email, and send by SMS.\n            var params = {\n                method: method,\n            };\n            var deviceID = $scope.currentDevice.deviceID;\n            var deviceName = $scope.deviceName($scope.currentDevice);\n\n            // Title and footer can be reused between different sharing\n            // methods, hence we define them separately before the body.\n            var title = $translate.instant('Syncthing device ID for \"{%devicename%}\"', {devicename: deviceName});\n            var footer = $translate.instant(\"Learn more at {%url%}\", {url: \"https://syncthing.net\"});\n\n            switch (method) {\n                case \"email\":\n                    params.heading = $translate.instant(\"Share by Email\");\n                    params.icon = \"fa fa-envelope-o\";\n                    // Email message format requires using CRLF for line breaks.\n                    // Ref: https://datatracker.ietf.org/doc/html/rfc5322\n                    params.subject = title;\n                    params.body = [\n                        $translate.instant('To connect with the Syncthing device named \"{%devicename%}\", add a new remote device on your end with this ID:', {devicename: deviceName}),\n                        deviceID,\n                        $translate.instant(\"Syncthing is a continuous file synchronization program. It synchronizes files between two or more computers in real time, safely protected from prying eyes. Your data is your data alone and you deserve to choose where it is stored, whether it is shared with some third party, and how it's transmitted over the internet.\"),\n                        footer\n                    ].join('\\r\\n\\r\\n');\n                    break;\n                case \"sms\":\n                    params.heading = $translate.instant(\"Share by SMS\");\n                    params.icon = \"fa fa-comments-o\";\n                    // SMS is limited to 160 characters (non-Unicode), so we keep\n                    // it as short as possible, e.g. by stripping hyphens from\n                    // device ID. The current minimum length is around 140 chars,\n                    // but some room is required for longer sharing device names.\n                    params.body = [\n                        title,\n                        deviceID.replace(/-/g, ''),\n                        footer\n                    ].join('\\n');\n                    break;\n            }\n\n            $scope.shareDeviceIdParams = params;\n            $('#share-device-id-dialog').modal('show');\n        };\n\n        $scope.shareDeviceId = function () {\n            switch ($scope.shareDeviceIdParams.method) {\n                case 'email':\n                    location.href = 'mailto:?subject=' + encodeURIComponent($scope.shareDeviceIdParams.subject) + '&body=' + encodeURIComponent($scope.shareDeviceIdParams.body);\n                    break;\n                case 'sms':\n                    // Ref1: https://rfc-editor.org/rfc/rfc5724\n                    // Ref2: https://stackoverflow.com/questions/6480462/how-to-pre-populate-the-sms-body-text-via-an-html-link\n                    location.href = 'sms:?&body=' + encodeURIComponent($scope.shareDeviceIdParams.body);\n                    break;\n            }\n        }\n\n        $scope.showTemporaryTooltip = function (event, tooltip) {\n            // This function can be used to display a temporary tooltip above\n            // the current element. This way, we can dynamically add a tooltip\n            // with explanatory text after the user performs an interactive\n            // operation, e.g. clicks a button. If the element already has a\n            // tooltip, it will be saved first and then restored once the user\n            // moves focus to a different element.\n            var e = event.currentTarget;\n            var oldTooltip = e.getAttribute('data-original-title');\n\n            e.setAttribute('data-original-title', tooltip);\n            $(e).tooltip('show');\n\n            if (oldTooltip) {\n                e.setAttribute('data-original-title', oldTooltip);\n            } else {\n                e.removeAttribute('data-original-title');\n            }\n        };\n\n        $scope.copyToClipboard = function (event, content) {\n            var success = $translate.instant(\"Copied!\");\n            var failure = $translate.instant(\"Copy failed! Try to select and copy manually.\");\n            var message = success;\n\n            if (navigator.clipboard && navigator.clipboard.writeText) {\n                // Default for modern browsers on localhost or HTTPS. Doesn't\n                // work on unencrypted HTTP for security reasons.\n                navigator.clipboard.writeText(content);\n            } else if (window.clipboardData && window.clipboardData.setData) {\n                // Fallback for Internet Explorer. Needs to go second before\n                // \"document.queryCommandSupported\", as the browser supports the\n                // other method too, yet it can often be disabled for security\n                // reasons, causing the copy to fail. The IE-specific method is\n                // more reliable.\n                window.clipboardData.setData('Text', content);\n            } else if (document.queryCommandSupported) {\n                // Fallback for modern browsers on HTTP and non-IE old browsers.\n                // Check for document.queryCommandSupported(\"copy\") support is\n                // omitted on purpose, as old Chrome versions reported \"false\"\n                // despite supporting the feature. The position and opacity\n                // hacks are needed to work inside Bootstrap modals.\n                var e = event.currentTarget;\n                var textarea = document.createElement(\"textarea\");\n\n                e.appendChild(textarea);\n                textarea.style.position = \"fixed\";\n                textarea.style.opacity = \"0\";\n                textarea.textContent = content;\n                textarea.select();\n\n                try {\n                    document.execCommand(\"copy\");\n                } catch (ex) {\n                    message = failure;\n                } finally {\n                    e.removeChild(textarea);\n                }\n            } else {\n                message = failure;\n            }\n\n            $scope.showTemporaryTooltip(event, message);\n        };\n\n        $scope.newXattrEntry = function () {\n            var entries = $scope.currentFolder.xattrFilter.entries;\n            var newEntry = {match: '', permit: false};\n\n            if (entries.some(function (n) {\n                return n.match == '';\n            })) {\n                return;\n            }\n\n            if (entries.length > 0 && entries[entries.length -1].match === '*') {\n                if (newEntry.match !== '*') {\n                    entries.splice(entries.length - 1, 0, newEntry);\n                }\n\n                return;\n            }\n\n            entries.push(newEntry);\n        };\n\n        $scope.removeXattrEntry = function (entry) {\n            $scope.currentFolder.xattrFilter.entries = $scope.currentFolder.xattrFilter.entries.filter(function (n) {\n                return n !== entry;\n            });\n        };\n\n        $scope.getXattrHint = function () {\n            var xattrFilter = $scope.currentFolder.xattrFilter;\n            if (xattrFilter == null || xattrFilter == {}) {\n                return '';\n            }\n            var filterEntries = xattrFilter.entries;\n            if (filterEntries.length === 0) {\n                return '';\n            }\n\n            // When the user explicitly added a wild-card, we don't show hints.\n            if (filterEntries.length === 1 && filterEntries[0].match === '*') {\n                return '';\n            }\n            // If all the filter entries are 'deny', we suggest adding a permit-any\n            // rule in the end since the default is already deny in that case.\n            if (filterEntries.every(function (entry) {\n                return entry.permit === false;\n            })) {\n                return  $translate.instant('Hint: only deny-rules detected while the default is deny. Consider adding \"permit any\" as last rule.');\n            }\n\n            return '';\n        };\n\n        $scope.getXattrDefault = function () {\n            var xattrFilter = $scope.currentFolder.xattrFilter;\n            if (xattrFilter == null || xattrFilter == {}) {\n                return '';\n            }\n\n            var filterEntries = xattrFilter.entries;\n            // No entries present, default is thus 'allow'\n            if (filterEntries.length === 0) {\n                return $translate.instant('permit');\n            }\n            // If any rule is present and the last entry isn't a wild-card, the default is deny.\n            if (filterEntries[filterEntries.length -1].match !== '*') {\n                return $translate.instant('deny');\n            }\n\n            return '';\n        };\n\n        $scope.validateXattrFilter = function () {\n            // Filtering out empty rules when saving the config\n            $scope.currentFolder.xattrFilter.entries = $scope.currentFolder.xattrFilter.entries.filter(function (n) {\n                return n.match !== \"\";\n            });\n        };\n    })\n    .directive('shareTemplate', function () {\n        return {\n            templateUrl: 'syncthing/core/editShareTemplate.html',\n            scope: {\n                selected: '=',\n                encryptionPasswords: '=',\n                id: '@',\n                label: '@',\n                folderType: '@',\n                untrusted: '=',\n            },\n            link: function (scope, elem, attrs) {\n                var plain = false;\n                scope.togglePasswordVisibility = function() {\n                    scope.plain = !scope.plain;\n                };\n            },\n        }\n    });\n", "<modal id=\"editDevice\" status=\"default\" icon=\"{{editDeviceModalIcon()}}\" heading=\"{{editDeviceModalTitle()}}\" large=\"yes\" closeable=\"yes\">\n  <div class=\"modal-body\">\n    <form role=\"form\" name=\"deviceEditor\">\n      <ul class=\"nav nav-tabs\" ng-init=\"loadFormIntoScope(deviceEditor)\">\n        <li class=\"active\"><a data-toggle=\"tab\" href=\"#device-general\"><span class=\"fas fa-cog\"></span> <span translate>General</span></a></li>\n        <li ng-if=\"!editingDeviceDefaults()\"><a data-toggle=\"tab\" href=\"#device-sharing\"><span class=\"fas fa-share-alt\"></span> <span translate>Sharing</span></a></li>\n        <li><a data-toggle=\"tab\" href=\"#device-advanced\"><span class=\"fas fa-cogs\"></span> <span translate>Advanced</span></a></li>\n      </ul>\n      <div class=\"tab-content\">\n        <div id=\"device-general\" class=\"tab-pane in active\">\n          <div ng-if=\"!editingDeviceDefaults()\" class=\"form-group\" ng-class=\"{'has-error': deviceEditor.deviceID.$invalid && deviceEditor.deviceID.$dirty}\" ng-init=\"loadFormIntoScope(deviceEditor)\">\n            <label translate for=\"deviceID\">Device ID</label>\n            <div class=\"input-group\">\n              <input ng-if=\"editingDeviceNew()\" name=\"deviceID\" id=\"deviceID\" class=\"form-control text-monospace\" type=\"text\" ng-model=\"currentDevice.deviceID\" required=\"\" valid-deviceid list=\"discovery-list\" aria-required=\"true\" />\n              <div ng-if=\"!editingDeviceNew()\" class=\"well well-sm form-control text-monospace\" style=\"height: auto;\" select-on-click>{{currentDevice.deviceID}}</div>\n              <div id=\"shareDeviceIdButtons\" class=\"input-group-btn\">\n                <button type=\"button\" class=\"btn btn-default\" ng-click=\"copyToClipboard($event, currentDevice.deviceID)\" ng-disabled=\"editingDeviceNew() && !deviceEditor.deviceID.$valid\" tooltip data-original-title=\"{{ 'Copy' | translate }}\">\n                  <span class=\"fa fa-lg fa-clone\"></span>\n                </button>\n                <button type=\"button\" class=\"btn btn-default\" ng-click=\"shareDeviceIdDialog('email')\" ng-disabled=\"editingDeviceNew() && !deviceEditor.deviceID.$valid\" tooltip data-original-title=\"{{ 'Share by Email' | translate }}\">\n                  <span class=\"fa fa-lg fa-envelope-o\"></span>\n                </button>\n                <button type=\"button\" class=\"btn btn-default\" ng-click=\"shareDeviceIdDialog('sms')\" ng-disabled=\"editingDeviceNew() && !deviceEditor.deviceID.$valid\" tooltip data-original-title=\"{{ 'Share by SMS' | translate }}\">\n                  <span class=\"fa fa-lg fa-comments-o\"></span>\n                </button>\n                <button type=\"button\" class=\"btn btn-default\" data-toggle=\"modal\" data-target=\"#idqr\" ng-disabled=\"editingDeviceNew() && !deviceEditor.deviceID.$valid\" tooltip data-original-title=\"{{ 'Show QR' | translate }}\">\n                  <span class=\"fa fa-lg fa-qrcode\"></span>\n                </button>\n              </div>\n            </div>\n            <div ng-if=\"editingDeviceNew()\">\n              <datalist id=\"discovery-list\">\n                <option ng-repeat=\"id in discoveryUnknown\" value=\"{{id}}\" />\n              </datalist>\n              <div class=\"help-block\" ng-if=\"discoveryUnknown && discoveryUnknown.length !== 0\">\n                <span translate>You can also select one of these nearby devices:</span>\n                <ul>\n                  <li ng-repeat=\"id in discoveryUnknown.slice(0, 5)\" style=\"list-style-type: none;\">\n                    <a href=\"#\" ng-click=\"currentDevice.deviceID = id\">\n                      <identicon data-value=\"id\"></identicon>&nbsp;&nbsp;{{id}}\n                    </a>\n                  </li>\n                </ul>\n              </div>\n              <p class=\"help-block\">\n                <span translate ng-if=\"deviceEditor.deviceID.$valid || deviceEditor.deviceID.$pristine\">The device ID to enter here can be found in the \"Actions &gt; Show ID\" dialog on the other device. Spaces and dashes are optional (ignored).</span>\n                <span translate ng-show=\"deviceEditor.deviceID.$valid || deviceEditor.deviceID.$pristine\">When adding a new device, keep in mind that this device must be added on the other side too.</span>\n                <span translate ng-if=\"deviceEditor.deviceID.$error.required && deviceEditor.deviceID.$dirty\">The device ID cannot be blank.</span>\n                <span translate ng-if=\"deviceEditor.deviceID.$error.validDeviceid && deviceEditor.deviceID.$dirty\">The entered device ID does not look valid. It should be a 52 or 56 character string consisting of letters and numbers, with spaces and dashes being optional.</span>\n                <span translate ng-if=\"deviceEditor.deviceID.$error.unique && deviceEditor.deviceID.$dirty\">A device with that ID is already added.</span>\n              </p>\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label translate for=\"name\">Device Name</label>\n            <input id=\"name\" class=\"form-control\" type=\"text\" ng-model=\"currentDevice.name\" />\n            <p translate ng-if=\"currentDevice.deviceID == myID\" class=\"help-block\">Shown instead of Device ID in the cluster status. Will be advertised to other devices as an optional default name.</p>\n            <p translate ng-if=\"currentDevice.deviceID != myID\" class=\"help-block\">Shown instead of Device ID in the cluster status. Will be updated to the name the device advertises if left empty.</p>\n          </div>\n        </div>\n        <div ng-if=\"!editingDeviceDefaults()\" id=\"device-sharing\" class=\"tab-pane\">\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <div class=\"checkbox\">\n                  <label>\n                    <input type=\"checkbox\" ng-model=\"currentDevice.introducer\">\n                    <span translate>Introducer</span>\n                    <p translate class=\"help-block\">Add devices from the introducer to our device list, for mutually shared folders.</p>\n                  </label>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <div class=\"checkbox\">\n                  <label>\n                    <input type=\"checkbox\" ng-model=\"currentDevice.autoAcceptFolders\">\n                    <span translate>Auto Accept</span>\n                    <p translate class=\"help-block\">Automatically create or share folders that this device advertises at the default path.</p>\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <div class=\"form-horizontal\" ng-if=\"currentSharing.shared.length\">\n              <label translate for=\"folders\">Shared Folders</label>\n              <p class=\"help-block\">\n                <span translate>Deselect folders to stop sharing with this device.</span>&emsp;\n                <small><a href=\"#\" ng-click=\"selectAllSharedFolders(true)\" translate>Select All</a>&emsp;\n                  <a href=\"#\" ng-click=\"selectAllSharedFolders(false)\" translate>Deselect All</a></small>\n              </p>\n              <div class=\"form-group\" ng-repeat=\"folder in currentSharing.shared\">\n                <share-template selected=\"currentSharing.selected\" encryption-passwords=\"currentSharing.encryptionPasswords\" id=\"{{folder.id}}\" label=\"{{folderLabelMarkRemoteState(folder.id, currentDevice.deviceID)}}\" folder-type=\"{{folder.type}}\" untrusted=\"currentDevice.untrusted\" />\n              </div>\n              <p class=\"help-block\" ng-if=\"deviceHasUnacceptedFolders(currentDevice)\">\n                <sup>1</sup> <span translate>The remote device has not accepted sharing this folder.</span>\n              </p>\n              <p class=\"help-block\" ng-if=\"deviceHasPausedFolders(currentDevice)\">\n                <sup>2</sup> <span translate>The remote device has paused this folder.</span>\n              </p>\n            </div>\n            <div class=\"form-horizontal\" ng-if=\"currentSharing.unrelated.length\">\n              <label translate for=\"folders\">Unshared Folders</label>\n              <p class=\"help-block\" ng-if=\"folderList().length > 0\">\n                <span translate>Select additional folders to share with this device.</span>&emsp;\n                <small><a href=\"#\" ng-click=\"selectAllUnrelatedFolders(true)\" translate>Select All</a>&emsp;\n                  <a href=\"#\" ng-click=\"selectAllUnrelatedFolders(false)\" translate>Deselect All</a></small>\n              </p>\n              <p class=\"help-block\" ng-if=\"folderList().length == 0\">\n                <span translate>There are no folders to share with this device.</span>\n              </p>\n              <div class=\"form-group\" ng-repeat=\"folder in currentSharing.unrelated\">\n                <share-template selected=\"currentSharing.selected\" encryption-passwords=\"currentSharing.encryptionPasswords\" id=\"{{folder.id}}\" label=\"{{folderLabel(folder.id)}}\" folder-type=\"{{folder.type}}\" untrusted=\"currentDevice.untrusted\" />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div id=\"device-advanced\" class=\"tab-pane\">\n          <div class=\"row form-group\">\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label translate for=\"addresses\">Addresses</label>\n                <input ng-disabled=\"currentDevice.deviceID == myID\" id=\"addresses\" class=\"form-control\" type=\"text\" ng-model=\"currentDevice._addressesStr\"></input>\n                <p translate class=\"help-block\">Enter comma separated (\"tcp://ip:port\", \"tcp://host:port\") addresses or \"dynamic\" to perform automatic discovery of the address.</p>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label translate>Compression</label>\n                <select class=\"form-control\" ng-model=\"currentDevice.compression\">\n                  <option value=\"always\" translate>All Data</option>\n                  <option value=\"metadata\" translate>Metadata Only</option>\n                  <option value=\"never\" translate>Off</option>\n                </select>\n              </div>\n            </div>\n          </div>\n          <div class=\"row form-group\">\n            <div class=\"col-md-12\">\n              <label translate>Device rate limits</label>\n              <div class=\"row\">\n                <div class=\"col-md-6\" ng-class=\"{'has-error': deviceEditor.maxRecvKbps.$invalid && deviceEditor.maxRecvKbps.$dirty}\">\n                  <div class=\"row\">\n                    <span class=\"col-md-8\" translate>Incoming Rate Limit (KiB/s)</span>\n                    <div class=\"col-md-4\">\n                      <input name=\"maxRecvKbps\" id=\"maxRecvKbps\" class=\"form-control\" type=\"number\" pattern=\"\\d+\" ng-model=\"currentDevice.maxRecvKbps\" min=\"0\" />\n                    </div>\n                  </div>\n                  <p class=\"help-block\" ng-if=\"!deviceEditor.maxRecvKbps.$valid && deviceEditor.maxRecvKbps.$dirty\" translate>The rate limit must be a non-negative number (0: no limit)</p>\n                </div>\n                <div class=\"col-md-6\" ng-class=\"{'has-error': deviceEditor.maxSendKbps.$invalid && deviceEditor.maxSendKbps.$dirty}\">\n                  <div class=\"row\">\n                    <span class=\"col-md-8\" translate>Outgoing Rate Limit (KiB/s)</span>\n                    <div class=\"col-md-4\">\n                      <input name=\"maxSendKbps\" id=\"maxSendKbps\" class=\"form-control\" type=\"number\" pattern=\"\\d+\" ng-model=\"currentDevice.maxSendKbps\" min=\"0\" />\n                    </div>\n                  </div>\n                  <p class=\"help-block\" ng-if=\"!deviceEditor.maxSendKbps.$valid && deviceEditor.maxSendKbps.$dirty\" translate>The rate limit must be a non-negative number (0: no limit)</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"form-group col-md-6\">\n              <input type=\"checkbox\" id=\"untrusted\" ng-model=\"currentDevice.untrusted\" />\n              <label for=\"untrusted\" translate>Untrusted</label>\n              <p translate class=\"help-block\">All folders shared with this device must be protected by a password, such that all sent data is unreadable without the given password.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-primary btn-sm\" ng-click=\"saveDevice()\" ng-disabled=\"deviceEditor.$invalid\">\n      <span class=\"fas fa-check\"></span>&nbsp;<span translate>Save</span>\n    </button>\n    <button type=\"button\" class=\"btn btn-default btn-sm\" data-dismiss=\"modal\">\n      <span class=\"fas fa-times\"></span>&nbsp;<span translate>Close</span>\n    </button>\n    <div ng-if=\"editingDeviceExisting()\" class=\"pull-left\">\n      <button type=\"button\" class=\"btn btn-warning btn-sm\" data-toggle=\"modal\" data-target=\"#remove-device-confirmation\">\n        <span class=\"fas fa-minus-circle\"></span>&nbsp;<span translate>Remove</span>\n      </button>\n    </div>\n  </div>\n</modal>\n", "<style> th, td { padding: 6px; } </style>\n<modal id=\"globalChanges\" status=\"default\" icon=\"fas fa-info-circle\" heading=\"{{'Recent Changes' | translate}}\" large=\"yes\" closeable=\"yes\">\n  <div class=\"modal-body\">\n    <div class=\"table-responsive\">\n      <table class=\"table-condensed table-striped table\" style=\"table-layout: auto;\">\n        <thead>\n          <tr>\n            <th translate>Device</th>\n            <th translate>Action</th>\n            <th translate>Type</th>\n            <th translate>Folder</th>\n            <th translate>Path</th>\n            <th translate>Time</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr ng-repeat=\"changeEvent in globalChangeEvents\">\n            <td ng-if=\"changeEvent.data.modifiedBy\">{{friendlyNameFromShort(changeEvent.data.modifiedBy)}}</td>\n            <td ng-if=\"!changeEvent.data.modifiedBy\"><span translate>Unknown</span></td>\n            <td ng-switch=\"changeEvent.data.action\">\n              <span ng-switch-when=\"modified\" translate>modified</span>\n              <span ng-switch-when=\"deleted\" translate>deleted</span>\n              <span ng-switch-default>{{changeEvent.data.action}}</span>\n            </td>\n            <td ng-switch=\"changeEvent.data.type\">\n              <span ng-switch-when=\"file\" translate>file</span>\n              <span ng-switch-when=\"folder\" translate>folder</span>\n              <span ng-switch-default>{{changeEvent.data.type}}</span>\n            </td>\n            <td class=\"no-overflow-ellipse\">{{folderLabel(changeEvent.data.folder)}}</td>\n            <td class=\"file-path no-overflow-ellipse\">{{changeEvent.data.path}}</td>\n            <td class=\"no-overflow-ellipse\">{{changeEvent.time | date:\"yyyy-MM-dd HH:mm:ss\"}}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" data-dismiss=\"modal\">\n      <span class=\"fas fa-times\"></span>&nbsp;<span translate>Close</span>\n    </button>\n  </div>\n</modal>\n", "<modal id=\"editFolder\" status=\"default\" icon=\"{{editFolderModalIcon()}}\" heading=\"{{editFolderModalTitle()}}\" large=\"yes\" closeable=\"yes\">\n  <div class=\"modal-body\">\n    <form role=\"form\" name=\"folderEditor\">\n      <ul class=\"nav nav-tabs\" ng-init=\"loadFormIntoScope(folderEditor)\">\n        <li ng-class=\"{'disabled': currentFolder._editing == 'new-ignores'}\" class=\"active\"><a data-toggle=\"tab\" href=\"{{currentFolder._editing == 'new-ignores' ? '' : '#folder-general'}}\"><span class=\"fas fa-cog\"></span> <span translate>General</span></a></li>\n        <li ng-class=\"{'disabled': currentFolder._editing == 'new-ignores'}\"><a data-toggle=\"tab\" href=\"{{currentFolder._editing == 'new-ignores' ? '' : '#folder-sharing'}}\"><span class=\"fas fa-share-alt\"></span> <span translate>Sharing</span></a></li>\n        <li ng-class=\"{'disabled': currentFolder._editing == 'new-ignores'}\"><a data-toggle=\"tab\" href=\"{{currentFolder._editing == 'new-ignores' ? '' : '#folder-versioning'}}\"><span class=\"fas fa-copy\"></span> <span translate>File Versioning</span></a></li>\n        <li ng-class=\"{'disabled': currentFolder._recvEnc}\"><a data-toggle=\"tab\" href=\"{{currentFolder._recvEnc ? '' : '#folder-ignores'}}\"><span class=\"fas fa-filter\"></span> <span translate>Ignore Patterns</span></a></li>\n        <li ng-class=\"{'disabled': currentFolder._editing == 'new-ignores'}\"><a data-toggle=\"tab\" href=\"{{currentFolder._editing == 'new-ignores' ? '' : '#folder-advanced'}}\"><span class=\"fas fa-cogs\"></span> <span translate>Advanced</span></a></li>\n      </ul>\n      <div class=\"tab-content\">\n\n        <div id=\"folder-general\" class=\"tab-pane in active\">\n          <div class=\"form-group\" ng-class=\"{'has-error': folderEditor.folderLabel.$invalid && folderEditor.folderLabel.$dirty && !editingFolderDefaults()}\">\n            <label for=\"folderLabel\"><span translate>Folder Label</span></label>\n            <input name=\"folderLabel\" id=\"folderLabel\" class=\"form-control\" type=\"text\" ng-model=\"currentFolder.label\" value=\"{{currentFolder.label}}\" />\n            <p class=\"help-block\">\n              <span translate ng-if=\"folderEditor.folderLabel.$valid || folderEditor.folderLabel.$pristine\">Optional descriptive label for the folder. Can be different on each device.</span>\n            </p>\n          </div>\n          <div ng-if=\"!editingFolderDefaults()\" class=\"form-group\" ng-class=\"{'has-error': folderEditor.folderID.$invalid && folderEditor.folderID.$dirty}\">\n            <label for=\"folderID\"><span translate>Folder ID</span></label>\n            <input name=\"folderID\" ng-readonly=\"has(['existing', 'new-pending'], currentFolder._editing)\" id=\"folderID\" class=\"form-control\" type=\"text\" ng-model=\"currentFolder.id\" required=\"\" aria-required=\"true\" unique-folder value=\"{{currentFolder.id}}\" />\n            <p class=\"help-block\">\n              <span translate ng-if=\"folderEditor.folderID.$valid || folderEditor.folderID.$pristine\">Required identifier for the folder. Must be the same on all cluster devices.</span>\n              <span translate ng-if=\"folderEditor.folderID.$error.uniqueFolder\">The folder ID must be unique.</span>\n              <span translate ng-if=\"folderEditor.folderID.$error.required && folderEditor.folderID.$dirty\">The folder ID cannot be blank.</span>\n              <span translate ng-show=\"!editingFolderExisting()\">When adding a new folder, keep in mind that the Folder ID is used to tie folders together between devices. They are case sensitive and must match exactly between all devices.</span>\n            </p>\n          </div>\n          <div class=\"form-group\" ng-class=\"{'has-error': folderEditor.folderPath.$invalid && folderEditor.folderPath.$dirty && !editingFolderDefaults()}\">\n            <label translate for=\"folderPath\">Folder Path</label>\n            <input name=\"folderPath\" ng-readonly=\"editingFolderExisting()\" id=\"folderPath\" class=\"form-control\" type=\"text\" ng-model=\"currentFolder.path\" list=\"directory-list\" ng-required=\"!editingFolderDefaults()\" ng-aria-required=\"!editingFolderDefaults()\" path-is-sub-dir />\n            <datalist id=\"directory-list\">\n              <option ng-repeat=\"directory in directoryList\" value=\"{{ directory }}\" />\n            </datalist>\n            <p class=\"help-block\">\n              <span ng-if=\"folderEditor.folderPath.$valid || folderEditor.folderPath.$pristine\"><span translate>Path to the folder on the local computer. Will be created if it does not exist. The tilde character (~) can be used as a shortcut for</span> <code>{{system.tilde}}</code>.</br></span>\n              <span translate ng-if=\"folderEditor.folderPath.$error.required && folderEditor.folderPath.$dirty && !editingFolderDefaults()\">The folder path cannot be blank.</span>\n              <span class=\"text-danger\" translate translate-value-other-folder=\"{{folderPathErrors.otherID}}\" ng-if=\"folderPathErrors.isSub && folderPathErrors.otherLabel.length == 0\">Warning, this path is a subdirectory of an existing folder \"{%otherFolder%}\".</span>\n              <span class=\"text-danger\" translate translate-value-other-folder=\"{{folderPathErrors.otherID}}\" translate-value-other-folder-label=\"{{folderPathErrors.otherLabel}}\" ng-if=\"folderPathErrors.isSub && folderPathErrors.otherLabel.length != 0\">Warning, this path is a subdirectory of an existing folder \"{%otherFolderLabel%}\" ({%otherFolder%}).</span>\n              <span ng-if=\"folderPathErrors.isParent && !editingFolderDefaults()\">\n                <span class=\"text-danger\" translate translate-value-other-folder=\"{{folderPathErrors.otherID}}\" ng-if=\"folderPathErrors.otherLabel.length == 0\">Warning, this path is a parent directory of an existing folder \"{%otherFolder%}\".</span>\n                <span class=\"text-danger\" translate translate-value-other-folder=\"{{folderPathErrors.otherID}}\" translate-value-other-folder-label=\"{{folderPathErrors.otherLabel}}\" ng-if=\"folderPathErrors.otherLabel.length != 0\">Warning, this path is a parent directory of an existing folder \"{%otherFolderLabel%}\" ({%otherFolder%}).</span>\n              </span>\n            </p>\n          </div>\n        </div>\n\n        <div id=\"folder-sharing\" class=\"tab-pane\">\n          <div class=\"form-horizontal\" ng-if=\"currentSharing.shared.length\">\n            <label translate>Currently Shared With Devices</label>\n            <p class=\"help-block\">\n              <span translate>Deselect devices to stop sharing this folder with.</span>&emsp;\n              <small><a href=\"#\" ng-click=\"selectAllSharedDevices(true)\" translate>Select All</a>&emsp;\n                <a href=\"#\" ng-click=\"selectAllSharedDevices(false)\" translate>Deselect All</a></small>\n            </p>\n            <div class=\"form-group\" ng-repeat=\"device in currentSharing.shared\">\n              <share-template selected=\"currentSharing.selected\" encryption-passwords=\"currentSharing.encryptionPasswords\" id=\"{{device.deviceID}}\" label=\"{{deviceNameMarkRemoteState(device.deviceID, currentFolder.id)}}\" folder-type=\"{{currentFolder.type}}\" untrusted=\"device.untrusted || pendingIsRemoteEncrypted(currentFolder.id, device.deviceID)\" />\n            </div>\n            <p class=\"help-block\" ng-if=\"folderHasUnacceptedDevices(currentFolder)\">\n              <sup>1</sup> <span translate>The remote device has not accepted sharing this folder.</span>\n            </p>\n            <p class=\"help-block\" ng-if=\"folderHasPausedDevices(currentFolder)\">\n              <sup>2</sup> <span translate>The remote device has paused this folder.</span>\n            </p>\n          </div>\n          <div class=\"form-horizontal\" ng-if=\"currentSharing.unrelated.length || otherDevices().length <= 0\">\n            <label translate>Unshared Devices</label>\n            <p class=\"help-block\" ng-if=\"otherDevices().length > 0\">\n              <span translate>Select additional devices to share this folder with.</span>&emsp;\n              <small><a href=\"#\" ng-click=\"selectAllUnrelatedDevices(true)\" translate>Select All</a>&emsp;\n                <a href=\"#\" ng-click=\"selectAllUnrelatedDevices(false)\" translate>Deselect All</a></small>\n            </p>\n            <p class=\"help-block\" ng-if=\"otherDevices().length <= 0\">\n              <span translate>There are no devices to share this folder with.</span>\n            </p>\n            <div class=\"form-group\" ng-repeat=\"device in currentSharing.unrelated\" ng-init=\"id = device.deviceID; folder = currentFolder\">\n              <share-template selected=\"currentSharing.selected\" encryption-passwords=\"currentSharing.encryptionPasswords\" id=\"{{device.deviceID}}\" label=\"{{deviceName(device)}}\" folder-type=\"{{currentFolder.type}}\" untrusted=\"device.untrusted || pendingIsRemoteEncrypted(currentFolder.id, device.deviceID)\" />\n            </div>\n          </div>\n        </div>\n\n        <div id=\"folder-versioning\" class=\"tab-pane\">\n          <div class=\"form-group\">\n            <label translate>File Versioning</label>&emsp;<a href=\"{{docsURL('users/versioning')}}\" target=\"_blank\"><span class=\"fas fa-question-circle\"></span>&nbsp;<span translate>Help</span></a>\n            <select class=\"form-control\" ng-model=\"currentFolder._guiVersioning.selector\">\n              <option value=\"none\" translate>No File Versioning</option>\n              <option value=\"trashcan\" translate>Trash Can File Versioning</option>\n              <option value=\"simple\" translate>Simple File Versioning</option>\n              <option value=\"staggered\" translate>Staggered File Versioning</option>\n              <option value=\"external\" translate>External File Versioning</option>\n            </select>\n          </div>\n          <div class=\"form-group\" ng-if=\"currentFolder._guiVersioning.selector=='trashcan' || currentFolder._guiVersioning.selector=='simple'\" ng-class=\"{'has-error': folderEditor.trashcanClean.$invalid && folderEditor.trashcanClean.$dirty}\">\n            <p translate class=\"help-block\" ng-if=\"currentFolder._guiVersioning.selector=='trashcan'\">Files are moved to .stversions directory when replaced or deleted by Syncthing.</p>\n            <p translate class=\"help-block\" ng-if=\"currentFolder._guiVersioning.selector=='simple'\">Files are moved to date stamped versions in a .stversions directory when replaced or deleted by Syncthing.</p>\n            <label translate for=\"trashcanClean\">Clean out after</label>\n            <div class=\"input-group\">\n              <input name=\"trashcanClean\" id=\"trashcanClean\" class=\"form-control text-right\" type=\"number\" ng-model=\"currentFolder._guiVersioning.trashcanClean\" required=\"\" aria-required=\"true\" min=\"0\" />\n              <div class=\"input-group-addon\" translate>days</div>\n            </div>\n            <p class=\"help-block\">\n              <span translate ng-if=\"folderEditor.trashcanClean.$valid || folderEditor.trashcanClean.$pristine\">The number of days to keep files in the trash can. Zero means forever.</span>\n              <span translate ng-if=\"folderEditor.trashcanClean.$error.required && folderEditor.trashcanClean.$dirty\">The number of days must be a number and cannot be blank.</span>\n              <span translate ng-if=\"folderEditor.trashcanClean.$error.min && folderEditor.trashcanClean.$dirty\">A negative number of days doesn't make sense.</span>\n            </p>\n          </div>\n          <div class=\"form-group\" ng-if=\"currentFolder._guiVersioning.selector=='simple'\" ng-class=\"{'has-error': folderEditor.simpleKeep.$invalid && folderEditor.simpleKeep.$dirty}\">\n            <label translate for=\"simpleKeep\">Keep Versions</label>\n            <input name=\"simpleKeep\" id=\"simpleKeep\" class=\"form-control\" type=\"number\" ng-model=\"currentFolder._guiVersioning.simpleKeep\" required=\"\" aria-required=\"true\" min=\"1\" />\n            <p class=\"help-block\">\n              <span translate ng-if=\"folderEditor.simpleKeep.$valid || folderEditor.simpleKeep.$pristine\">The number of old versions to keep, per file.</span>\n              <span translate ng-if=\"folderEditor.simpleKeep.$error.required && folderEditor.simpleKeep.$dirty\">The number of versions must be a number and cannot be blank.</span>\n              <span translate ng-if=\"folderEditor.simpleKeep.$error.min && folderEditor.simpleKeep.$dirty\">You must keep at least one version.</span>\n            </p>\n          </div>\n          <div class=\"form-group\" ng-if=\"currentFolder._guiVersioning.selector=='staggered'\" ng-class=\"{'has-error': folderEditor.staggeredMaxAge.$invalid && folderEditor.staggeredMaxAge.$dirty}\">\n            <p class=\"help-block\"><span translate>Files are moved to date stamped versions in a .stversions directory when replaced or deleted by Syncthing.</span> <span translate>Versions are automatically deleted if they are older than the maximum age or exceed the number of files allowed in an interval.</span></p>\n            <p translate class=\"help-block\">The following intervals are used: for the first hour a version is kept every 30 seconds, for the first day a version is kept every hour, for the first 30 days a version is kept every day, until the maximum age a version is kept every week.</p>\n            <label translate for=\"staggeredMaxAge\">Maximum Age</label>\n            <div class=\"input-group\">\n              <input name=\"staggeredMaxAge\" id=\"staggeredMaxAge\" class=\"form-control text-right\" type=\"number\" ng-model=\"currentFolder._guiVersioning.staggeredMaxAge\" required=\"\" aria-required=\"true\" min=\"0\" />\n              <div class=\"input-group-addon\" translate>days</div>\n            </div>\n            <p class=\"help-block\">\n              <span translate ng-if=\"folderEditor.staggeredMaxAge.$valid || folderEditor.staggeredMaxAge.$pristine\">The maximum time to keep a version (in days, set to 0 to keep versions forever).</span>\n              <span translate ng-if=\"folderEditor.staggeredMaxAge.$error.required && folderEditor.staggeredMaxAge.$dirty\">The maximum age must be a number and cannot be blank.</span>\n              <span translate ng-if=\"folderEditor.staggeredMaxAge.$error.min && folderEditor.staggeredMaxAge.$dirty\">A negative number of days doesn't make sense.</span>\n            </p>\n          </div>\n          <div class=\"form-group\" ng-if=\"internalVersioningEnabled()\">\n            <label translate for=\"fsPath\">Versions Path</label>\n            <input name=\"fsPath\" id=\"fsPath\" class=\"form-control\" type=\"text\" ng-model=\"currentFolder.versioning.fsPath\" />\n            <p translate class=\"help-block\">Path where versions should be stored (leave empty for the default .stversions directory in the shared folder).</p>\n          </div>\n          <div class=\"form-group\" ng-if=\"currentFolder._guiVersioning.selector=='external'\" ng-class=\"{'has-error': folderEditor.externalCommand.$invalid && folderEditor.externalCommand.$dirty}\">\n            <p translate class=\"help-block\">An external command handles the versioning. It has to remove the file from the shared folder. If the path to the application contains spaces, it should be quoted.</p>\n            <label translate for=\"externalCommand\">Command</label>\n            <input name=\"externalCommand\" id=\"externalCommand\" class=\"form-control\" type=\"text\" ng-model=\"currentFolder._guiVersioning.externalCommand\" required=\"\" aria-required=\"true\" />\n            <p class=\"help-block\">\n              <span translate ng-if=\"folderEditor.externalCommand.$valid || folderEditor.externalCommand.$pristine\">See external versioning help for supported templated command line parameters.</span>\n              <span translate ng-if=\"folderEditor.externalCommand.$error.required && folderEditor.externalCommand.$dirty\">The path cannot be blank.</span>\n            </p>\n          </div>\n          <div class=\"form-group\" ng-if=\"internalVersioningEnabled()\" ng-class=\"{'has-error': folderEditor.cleanupIntervalS.$invalid && folderEditor.cleanupIntervalS.$dirty}\">\n            <label translate for=\"cleanupIntervalS\">Cleanup Interval</label>\n            <div class=\"input-group\">\n              <input name=\"cleanupIntervalS\" id=\"cleanupIntervalS\" class=\"form-control text-right\" type=\"number\" ng-model=\"currentFolder._guiVersioning.cleanupIntervalS\" required=\"\" min=\"0\" max=\"31536000\" aria-required=\"true\" />\n              <div class=\"input-group-addon\" translate>seconds</div>\n            </div>\n            <p class=\"help-block\">\n              <span translate ng-if=\"folderEditor.cleanupIntervalS.$valid || folderEditor.cleanupIntervalS.$pristine\"class=\"help-block\">The interval, in seconds, for running cleanup in the versions directory. Zero to disable periodic cleaning.</span>\n              <span translate ng-if=\"folderEditor.cleanupIntervalS.$error.required && folderEditor.cleanupIntervalS.$dirty\">The cleanup interval cannot be blank.</span>\n              <span translate ng-if=\"folderEditor.cleanupIntervalS.$error.min && folderEditor.cleanupIntervalS.$dirty\">The interval must be a positive number of seconds.</span>\n            </p>\n          </div>\n        </div>\n\n        <div id=\"folder-ignores\" class=\"tab-pane\" ng-switch=\"editingFolderNew()\">\n          <div ng-switch-when=\"true\">\n            <label>\n              <input type=\"checkbox\" ng-model=\"currentFolder._addIgnores\" >&nbsp;<span translate>Add ignore patterns</span>\n            </label>\n            <p translate class=\"help-block\">Ignore patterns can only be added after the folder is created. If checked, an input field to enter ignore patterns will be presented after saving.</p>\n          </div>\n          <div ng-switch-default>\n            <p translate>Enter ignore patterns, one per line.</p>\n            <div ng-class=\"{'has-error': ignores.error != null}\">\n              <textarea class=\"form-control\" name=\"ignoresText\" rows=\"5\" ng-model=\"ignores.text\" ng-disabled=\"ignores.disabled\"></textarea>\n              <p class=\"help-block\" ng-if=\"ignores.error\">\n                {{ignores.error}}\n              </p>\n            </div>\n            <hr />\n            <p class=\"small\"><span translate>Quick guide to supported patterns</span> (<a href=\"{{docsURL('users/ignoring')}}\" target=\"_blank\" translate>full documentation</a>):</p>\n            <dl class=\"dl-horizontal dl-narrow small\">\n              <dt><code>(?d)</code></dt>\n              <dd><b><span translate>Prefix indicating that the file can be deleted if preventing directory removal</span></b></dd>\n              <dt><code>(?i)</code></dt>\n              <dd><span translate>Prefix indicating that the pattern should be matched without case sensitivity</span></dd>\n              <dt><code>!</code></dt>\n              <dd><span translate>Inversion of the given condition (i.e. do not exclude)</span></dd>\n              <dt><code>*</code></dt>\n              <dd><span translate>Single level wildcard (matches within a directory only)</span></dd>\n              <dt><code>**</code></dt>\n              <dd><span translate>Multi level wildcard (matches multiple directory levels)</span></dd>\n              <dt><code>//</code></dt>\n              <dd><span translate>Comment, when used at the start of a line</span></dd>\n            </dl>\n            <div ng-if=\"!editingFolderDefaults()\">\n              <hr />\n              <span translate translate-value-path=\"{{currentFolder.path}}{{system.pathSeparator}}.stignore\">Editing {%path%}.</span>\n            </div>\n          </div>\n        </div>\n\n        <div id=\"folder-advanced\" class=\"tab-pane\">\n          <div class=\"row form-group\" ng-class=\"{'has-error': folderEditor.rescanIntervalS.$invalid && folderEditor.rescanIntervalS.$dirty}\">\n            <div class=\"col-md-12\">\n              <label translate>Scanning</label>\n              &nbsp;<a href=\"{{docsURL('users/syncing#scanning')}}\" target=\"_blank\"><span class=\"fas fa-question-circle\"></span>&nbsp;<span translate>Help</span></a></br>\n\n              <div class=\"row\">\n                <div class=\"col-md-6\">\n                  <label>\n                    <input type=\"checkbox\" ng-model=\"currentFolder.fsWatcherEnabled\" ng-change=\"setFSWatcherIntervalDefault()\">&nbsp;<span translate>Watch for Changes</span>\n                  </label>\n                  <p class=\"help-block\">\n                    <span translate>Use notifications from the filesystem to detect changed items.</span>\n                    <span translate>Watching for changes discovers most changes without periodic scanning.</span>\n                  </p>\n                </div>\n                <div class=\"col-md-6\">\n                  <label for=\"rescanIntervalS\" translate>Full Rescan Interval (s)</label>\n                  <input name=\"rescanIntervalS\" id=\"rescanIntervalS\" class=\"form-control\" type=\"number\" ng-model=\"currentFolder.rescanIntervalS\" required=\"\" aria-required=\"true\" min=\"0\" />\n                  <p class=\"help-block\" ng-if=\"!folderEditor.rescanIntervalS.$valid && folderEditor.rescanIntervalS.$dirty\" translate>\n                    The rescan interval must be a non-negative number of seconds.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-md-6 form-group\">\n              <label translate>Folder Type</label>\n              &nbsp;<a href=\"{{docsURL('users/foldertypes')}}\" target=\"_blank\"><span class=\"fas fa-question-circle\"></span>&nbsp;<span translate>Help</span></a>\n              <select class=\"form-control\" ng-change=\"setDefaultsForFolderType()\" ng-model=\"currentFolder.type\" ng-disabled=\"editingFolderExisting() && currentFolder.type == 'receiveencrypted'\">\n                <option value=\"sendreceive\" translate>Send &amp; Receive</option>\n                <option value=\"sendonly\" translate>Send Only</option>\n                <option value=\"receiveonly\" translate>Receive Only</option>\n                <option value=\"receiveencrypted\" ng-disabled=\"editingFolderExisting()\" translate>Receive Encrypted</option>\n              </select>\n              <p ng-if=\"currentFolder.type == 'sendonly'\" translate class=\"help-block\">Files are protected from changes made on other devices, but changes made on this device will be sent to the rest of the cluster.</p>\n              <p ng-if=\"currentFolder.type == 'receiveonly'\" translate class=\"help-block\">Files are synchronized from the cluster, but any changes made locally will not be sent to other devices.</p>\n              <p ng-if=\"currentFolder.type == 'receiveencrypted'\" translate class=\"help-block\" translate-value-receive-encrypted=\"{{'Receive Encrypted' | translate}}\">Stores and syncs only encrypted data. Folders on all connected devices need to be set up with the same password or be of type \"{%receiveEncrypted%}\" too.</p>\n              <p ng-if=\"editingFolderExisting() && currentFolder.type == 'receiveencrypted'\" translate class=\"help-block\" translate-value-receive-encrypted=\"{{'Receive Encrypted' | translate}}\">Folder type \"{%receiveEncrypted%}\" cannot be changed after adding the folder. You need to remove the folder, delete or decrypt the data on disk, and add the folder again.</p>\n              <p ng-if=\"editingFolderExisting() && currentFolder.type != 'receiveencrypted'\" translate class=\"help-block\" translate-value-receive-encrypted=\"{{'Receive Encrypted' | translate}}\">Folder type \"{%receiveEncrypted%}\" can only be set when adding a new folder.</p>\n            </div>\n            <div class=\"col-md-6 form-group\">\n              <label translate>File Pull Order</label>\n              <select class=\"form-control\" ng-model=\"currentFolder.order\" ng-if=\"currentFolder.type != 'sendonly'\">\n                <option value=\"random\" translate>Random</option>\n                <option value=\"alphabetic\" translate>Alphabetic</option>\n                <option value=\"smallestFirst\" translate>Smallest First</option>\n                <option value=\"largestFirst\" translate>Largest First</option>\n                <option value=\"oldestFirst\" translate>Oldest First</option>\n                <option value=\"newestFirst\" translate>Newest First</option>\n              </select>\n              <select class=\"form-control\" ng-if=\"currentFolder.type == 'sendonly'\" disabled>\n                <option value=\"disabled\" translate>Disabled</option>\n              </select>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-md-6 form-group\" ng-class=\"{'has-error': folderEditor.minDiskFree.$invalid && folderEditor.minDiskFree.$dirty}\">\n              <label for=\"minDiskFree\" translate>Minimum Free Disk Space</label><br />\n              <div class=\"row\">\n                <div class=\"col-xs-9\">\n                  <input name=\"minDiskFree\" id=\"minDiskFree\" class=\"form-control\" type=\"number\" ng-model=\"currentFolder.minDiskFree.value\" required=\"\" aria-required=\"true\" min=\"0\" step=\"0.01\" />\n                </div>\n                <div class=\"col-xs-3\">\n                  <select class=\"form-control\" ng-model=\"currentFolder.minDiskFree.unit\">\n                    <option value=\"%\">%</option>\n                    <option value=\"kB\">kB</option>\n                    <option value=\"MB\">MB</option>\n                    <option value=\"GB\">GB</option>\n                    <option value=\"TB\">TB</option>\n                  </select>\n                </div>\n              </div>\n              <p class=\"help-block\" ng-show=\"folderEditor.minDiskFree.$invalid\" translate>\n                Enter a non-negative number (e.g., \"2.35\") and select a unit. Percentages are as part of the total disk size.\n              </p>\n            </div>\n            <div class=\"col-md-6 form-group\">\n              <label>\n                <input type=\"checkbox\" ng-disabled=\"currentFolder._recvEnc\" ng-model=\"currentFolder.ignorePerms\" /> <span translate>Ignore Permissions</span>\n              </label>\n              <p translate class=\"help-block\">\n                Disables comparing and syncing file permissions. Useful on systems with nonexistent or custom permissions (e.g. FAT, exFAT, Synology, Android).\n              </p>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-md-6 form-group\">\n              <p>\n                <label translate>Ownership</label>\n                &nbsp;<a href=\"{{docsURL('advanced/folder-sync-ownership')}}\" target=\"_blank\"><span class=\"fas fa-question-circle\"></span>&nbsp;<span translate>Help</span></a>\n              </p>\n              <label>\n                <input type=\"checkbox\" ng-disabled=\"currentFolder.type == 'sendonly' || currentFolder.type == 'receiveencrypted'\" ng-model=\"currentFolder.syncOwnership\" /> <span translate>Sync Ownership</span>\n              </label>\n              <p translate class=\"help-block\">\n                Enables sending ownership information to other devices, and applying incoming ownership information. Typically requires running with elevated privileges.\n              </p>\n              <label>\n                <input type=\"checkbox\" ng-disabled=\"currentFolder.type == 'receiveonly' || currentFolder.type == 'receiveencrypted' || currentFolder.syncOwnership\" ng-checked=\"currentFolder.sendOwnership || currentFolder.syncOwnership\" ng-model=\"currentFolder.sendOwnership\" /> <span translate>Send Ownership</span>\n              </label>\n              <p translate class=\"help-block\">\n                Enables sending ownership information to other devices, but not applying incoming ownership information. This can have a significant performance impact. Always enabled when \"Sync Ownership\" is enabled.\n              </p>\n            </div>\n            <div class=\"col-md-6 form-group\">\n              <p>\n                <label translate>Extended Attributes</label>\n                &nbsp;<a href=\"{{docsURL('advanced/folder-sync-xattrs')}}\" target=\"_blank\"><span class=\"fas fa-question-circle\"></span>&nbsp;<span translate>Help</span></a>\n              </p>\n              <label>\n                <input type=\"checkbox\" ng-disabled=\"currentFolder.type == 'sendonly' || currentFolder.type == 'receiveencrypted'\" ng-model=\"currentFolder.syncXattrs\" /> <span translate>Sync Extended Attributes</span>\n              </label>\n              <p translate class=\"help-block\">\n                Enables sending extended attributes to other devices, and applying incoming extended attributes. May require running with elevated privileges.\n              </p>\n              <label>\n                <input type=\"checkbox\" ng-disabled=\"currentFolder.type == 'receiveonly' || currentFolder.type == 'receiveencrypted' || currentFolder.syncXattrs\" ng-checked=\"currentFolder.sendXattrs || currentFolder.syncXattrs\" ng-model=\"currentFolder.sendXattrs\" /> <span translate>Send Extended Attributes</span>\n              </label>\n              <p translate class=\"help-block\">\n                Enables sending extended attributes to other devices, but not applying incoming extended attributes. This can have a significant performance impact. Always enabled when \"Sync Extended Attributes\" is enabled.\n              </p>\n            </div>\n          </div>\n\n          <div class=\"row\" ng-if=\"currentFolder.syncXattrs\">\n            <div class=\"col-md-12\">\n              <p>\n                <label translate>Extended Attributes Filter</label>\n                &nbsp;<a href=\"{{docsURL('advanced/folder-xattr-filter')}}\" target=\"_blank\"><span class=\"fas fa-question-circle\"></span>&nbsp;<span translate>Help</span></a>\n              </p>\n            </div>\n            <div class=\"col-md-6\">\n              <p translate class=\"help-block\">\n                To permit a rule, have the checkbox checked. To deny a rule, leave it unchecked.\n              </p>\n              <label translate>Active filter rules</label>\n              <table class=\"table table-condensed\">\n                <colgroup>\n                  <col class=\"col-xs-1 center\"/>\n                  <col class=\"col-xs-9\"/>\n                  <col class=\"col-xs-2\"/>\n                </colgroup>\n                <tr ng-repeat=\"entry in currentFolder.xattrFilter.entries\">\n                  <td>\n                    <input type=\"checkbox\" ng-model=\"entry.permit\">\n                  </td>\n                  <td><input class=\"form-control text-left\" aria-required=\"true\" ng-model=\"entry.match\"/></td>\n                  <td>\n                    <button type=\"button\" class=\"btn btn-default form-control\" ng-click=\"removeXattrEntry(entry)\">\n                      <span class=\"fas fa-trash-alt\"></span>\n                    </button>\n                  </td>\n                </tr>\n              </table>\n              <div class=\"form-group\">\n                <button type=\"button\" class=\"btn btn-default\" ng-click=\"newXattrEntry()\">\n                  <span class=\"fas fa-plus\"></span>&nbsp;<span translate>Add filter entry</span>\n                </button>\n              </div>\n              <p ng-if=\"currentFolder.xattrFilter.entries.length === 0\">\n                <i translate>No rules set</i>\n              </p>\n              <p ng-if=\"getXattrDefault() !== ''\">\n                <i><span translate>Default</span>: {{getXattrDefault()}}</i>\n              </p>\n              <p ng-if=\"getXattrHint() !== ''\">\n                <i>{{getXattrHint()}}</i>\n              </p>\n            </div>\n            <div class=\"col-md-6 form-group\">\n              <label for=\"xattrMaxSingleEntrySize\" translate>Maximum single entry size</label>\n              <input name=\"xattrMaxSingleEntrySize\" id=\"xattrMaxSingleEntrySize\" class=\"form-control\" type=\"number\" ng-model=\"currentFolder.xattrFilter.maxSingleEntrySize\" required=\"\" aria-required=\"true\" min=\"0\" />\n            </div>\n            <div class=\"col-md-6 form-group\">\n              <label for=\"xattrMaxTotalSize\" translate>Maximum total size</label>\n              <input name=\"xattrMaxTotalSize\" id=\"xattrMaxTotalSize\" class=\"form-control\" type=\"number\" ng-model=\"currentFolder.xattrFilter.maxTotalSize\" required=\"\" aria-required=\"true\" min=\"0\" />\n            </div>\n          </div>\n        </div>\n\n      </div>\n    </form>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-primary btn-sm\" ng-click=\"saveFolder()\" ng-disabled=\"folderEditor.$invalid\">\n      <span class=\"fas fa-check\"></span>&nbsp;<span translate>Save</span>\n    </button>\n    <button type=\"button\" class=\"btn btn-default btn-sm\" data-dismiss=\"modal\">\n      <span class=\"fas fa-times\"></span>&nbsp;<span translate>Close</span>\n    </button>\n    <button type=\"button\" class=\"btn btn-warning pull-left btn-sm\" data-toggle=\"modal\" data-target=\"#remove-folder-confirmation\" ng-if=\"editingFolderExisting()\">\n      <span class=\"fas fa-minus-circle\"></span>&nbsp;<span translate>Remove</span>\n    </button>\n  </div>\n</modal>\n", "<modal id=\"localChanged\" status=\"{{localChangedType === 'receiveencrypted' ? 'warning' : 'info'}}\" icon=\"fas fa-exclamation-circle\" heading=\"{{localChangedHeading(localChangedType)}}\" large=\"yes\" closeable=\"yes\">\n  <div class=\"modal-body\" ng-switch=\"localChangedType\">\n    <p ng-switch-when=\"receiveonly\" translate>\n      The following items were changed locally.\n    </p>\n    <p ng-switch-when=\"receiveencrypted\">\n      <span translate>The following unexpected items were found.</span>\n      <span translate translate-value-receive-encrypted=\"{{'Receive Encrypted' | translate}}\">You should never add or change anything locally in a \"{%receiveEncrypted%}\" folder.</span>\n    </p>\n    <table class=\"table table-striped\">\n      <thead>\n        <tr>\n          <th translate>Path</th>\n          <th translate>Size</th>\n        </tr>\n      </thead>\n      <tr dir-paginate=\"file in localChanged.files | itemsPerPage: localChanged.perpage\" current-page=\"localChanged.page\" total-items=\"model[localChangedFolder].receiveOnlyTotalItems\" pagination-id=\"localChanged\">\n        <td class=\"file-path\">{{file.name}}</td>\n        <td><span ng-hide=\"file.type == 'DIRECTORY'\">{{file.size | binary}}B</span></td>\n      </tr>\n    </table>\n    <dir-pagination-controls on-page-change=\"refreshLocalChanged(newPageNumber, localChanged.perpage)\" pagination-id=\"localChanged\"></dir-pagination-controls>\n    <ul class=\"pagination pull-right\">\n      <li ng-repeat=\"option in [10, 25, 50]\" ng-class=\"{ active: localChanged.perpage == option }\">\n        <a href=\"#\" ng-click=\"refreshLocalChanged(localChanged.page, option)\">{{option}}</a>\n      </li>\n    </ul>\n    <div class=\"clearfix\"></div>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" data-dismiss=\"modal\">\n      <span class=\"fas fa-times\"></span>&nbsp;<span translate>Close</span>\n    </button>\n  </div>\n</modal>\n", "<modal id=\"remoteNeed\" status=\"info\" icon=\"fas fa-exchange-alt\" heading=\"{{'Out of Sync Items' | translate}} - {{deviceName(remoteNeedDevice)}}\" large=\"yes\" closeable=\"yes\">\n  <div class=\"modal-body\">\n    <div ng-if=\"sizeOf(remoteNeed) == 0\">\n      <span translate>Loading data...</span>\n    </div>\n    <div ng-if=\"sizeOf(remoteNeed) > 0\">\n      <div class=\"panel panel-default\" ng-repeat=\"folder in remoteNeedFolders\" ng-if=\"remoteNeed[folder] && remoteNeed[folder].files.length > 0\">\n        <button class=\"btn panel-heading\" data-toggle=\"collapse\" data-target=\"#remoteNeed-{{$index}}\" aria-expanded=\"false\">\n          <h4 class=\"panel-title\">\n            <span>{{folderLabel(folder)}}</span>\n          </h4>\n        </button>\n        <div id=\"remoteNeed-{{$index}}\" class=\"panel-collapse\" ng-class=\"{collapse: sizeOf(remoteNeedFolders) > 1}\">\n          <div class=\"panel-body\">\n            <table class=\"table table-striped\">\n              <thead>\n                <tr>\n                  <th translate>Path</th>\n                  <th translate>Size</th>\n                  <th><span tooltip data-original-title=\"{{'Time the item was last modified' | translate}}\" translate>Mod. Time</span></th>\n                  <th><span tooltip data-original-title=\"{{'Device that last modified the item' | translate}}\" translate>Mod. Device</span></th>\n                </tr>\n              </thead>\n              <tr dir-paginate=\"file in remoteNeed[folder].files | itemsPerPage: remoteNeed[folder].perpage\" current-page=\"remoteNeed[folder].page\" total-items=\"completion[remoteNeedDevice.deviceID][folder].needItems\" pagination-id=\"'remoteNeed-' + folder\">\n                <td class=\"file-path\">{{file.name}}</td>\n                <td><span ng-hide=\"file.type == 'DIRECTORY'\">{{file.size | binary}}B</span></td>\n                <td>{{file.modified | date:\"yyyy-MM-dd HH:mm:ss\"}}</td>\n                <td ng-if=\"file.modifiedBy\">{{friendlyNameFromShort(file.modifiedBy)}}</td>\n                <td ng-if=\"!file.modifiedBy\"><span translate>Unknown</span></td>\n              </tr>\n            </table>\n\n            <dir-pagination-controls on-page-change=\"refreshRemoteNeed(folder, newPageNumber, remoteNeed[folder].perpage)\" pagination-id=\"'remoteNeed-' + folder\"></dir-pagination-controls>\n            <ul class=\"pagination pull-right\">\n              <li ng-repeat=\"option in [10, 25, 50]\" ng-class=\"{ active: remoteNeed[folder].perpage == option }\">\n                <a href=\"#\" ng-click=\"refreshRemoteNeed(folder, remoteNeed[folder].page, option)\">{{option}}</a>\n              </li>\n            </ul>\n            <div class=\"clearfix\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" data-dismiss=\"modal\">\n      <span class=\"fas fa-times\"></span>&nbsp;<span translate>Close</span>\n    </button>\n  </div>\n</modal>\n"], "fixing_code": ["/*\n// Copyright (C) 2014 The Syncthing Authors.\n//\n// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this file,\n// You can obtain one at https://mozilla.org/MPL/2.0/.\n\n*/\n\nbody {\n    padding-bottom: 70px;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n    overflow-y: scroll;\n}\n\nh1, h2, h3, h4, h5 {\n    font-family: \"Raleway\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n    line-height: 1.25;\n}\n\nul+h5 {\n    margin-top: 1.5em;\n}\n\n.content {\n    margin-bottom: 50px;\n}\n\n.panel-progress {\n    height: 3px;\n    left: 0;\n    position: absolute;\n    top: 0;\n    display: block;\n}\n\n.checkbox {\n    margin-top: 0px;\n}\n\n.checkbox input[type=\"checkbox\"], .radio input[type=\"radio\"] {\n    float: none; /* issue #1197 */\n}\n\n#advancedAccordion input.form-control[type=\"checkbox\"] {\n    box-shadow: none;\n    margin: 0;\n    width: auto;\n}\n\n.popover {\n    max-width: none;\n    min-width: 250px;\n}\n\n.tooltip {\n    word-wrap:break-word;\n}\n\n.text-monospace {\n    font-family: Menlo, Monaco, Consolas, \"Courier New\", monospace;\n}\n\n.table-condensed>thead>tr>th, .table-condensed>tbody>tr>th, .table-condensed>tfoot>tr>th, .table-condensed>thead>tr>td, .table-condensed>tbody>tr>td, .table-condensed>tfoot>tr>td {\n    border-top: none;\n}\n\n.logo {\n    margin: 0;\n    padding: 0;\n    top: -5px;\n    position: relative;\n}\n\n.list-no-bullet {\n    list-style-type: none;\n}\n\n.li-column {\n    display: inline-block;\n    min-width: 7em;\n    margin-right: 1em;\n    padding: 1px 4px;\n    margin: 2px 2px;\n}\n.li-column span.data {\n    margin-left: 0.5em;\n    min-width: 10em;\n    text-align: right;\n    display: inline-block;\n}\n\n.ng-cloak {\n    display: none !important;\n}\n\n.table th {\n    white-space: nowrap;\n    font-weight: 400;\n}\n\n.table td {\n    /*padding-left: 20px !important;*/\n}\n\n.table td.small-data {\n    white-space: nowrap;\n}\n\n/* Removing text decoration on anchor link hover pull request: #4135 */\n.table td.small-data span a:hover {\n    text-decoration: none;\n}\n\ntable.table-condensed {\n    table-layout: fixed;\n}\n\ntable.table-dynamic {\n    word-wrap: break-word;\n    word-break: break-all;\n}\n\ntable.table-condensed td,\ntable.table-condensed th {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n\ntable.table-condensed td.no-overflow-ellipse {\n    white-space: normal;\n}\n\ntable.table-auto {\n\ttable-layout: auto;\n}\n\ntable.table-auto th {\n\twidth: 1px;\n}\n\ntable.table-auto td {\n    max-width: 0px;\n}\n\ntd input[type=\"checkbox\"] {\n    margin-top: 13px;\n}\n\n/* Remote Devices connection-quality indicator */\n.reception-0 {\n    background: url('../../vendor/bootstrap/fonts/reception-0.svg') no-repeat;\n}\n\n.reception-1 {\n    background: url('../../vendor/bootstrap/fonts/reception-1.svg') no-repeat;\n}\n\n.reception-2 {\n    background: url('../../vendor/bootstrap/fonts/reception-2.svg') no-repeat;\n}\n\n.reception-3 {\n    background: url('../../vendor/bootstrap/fonts/reception-3.svg') no-repeat;\n}\n\n.reception-4 {\n    background: url('../../vendor/bootstrap/fonts/reception-4.svg') no-repeat;\n}\n\n.reception {\n    width: 1em;\n    height: 1em;\n    display: inline-block;\n    vertical-align: -10%;\n    background-size: contain;\n    /* Simulate same width as Fork Awesome icons. */\n    margin-left: .14285715em;\n    margin-right: .14285715em;\n}\n\n.remote-devices-panel {\n    display: inline-block;\n}\n\n/* Wrap long file paths to prevent text overflow. See issue #6268. */\n.word-break-all {\n    word-break: break-all;\n}\n\n.folder-advanced {\n    padding: 1rem;\n    margin-bottom: 15px;\n}\n\n.folder-advanced-toggle {\n    cursor: pointer;\n}\n.folder-advanced-toggle .collapse,\n.folder-advanced-toggle.collapsed .expand {\n    display: inline-block;\n}\n\n.folder-advanced-toggle.collapsed .collapse,\n.folder-advanced-toggle .expand{\n    display: none;\n}\n\nli[language-select] > .dropdown-menu {\n    column-count: 2;\n    column-gap: 0;\n    width: 450px;\n}\n\nli[language-select] > .dropdown-menu > li > a {\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.nav>li{\n    float: left;\n}\n.navbar-right {\n    /* to align with panel */\n    padding-right: 15px;\n    float: right;\n}\n\n.panel-body .table-condensed {\n    margin-bottom: 0;\n}\n\n.dl-horizontal.dl-narrow dt {\n    width: 40px;\n}\n\n.dl-horizontal.dl-narrow dd {\n    margin-left: 60px;\n}\n\n/**\n * Panel, Model and Accordion Title bars\n */\n\n.panel-icon {\n    float: left;\n    margin-right: 15px;\n    margin-top: 0.125em;\n    margin-bottom: 0.125em;\n    line-height: 1;\n}\n\n.modal-title .panel-icon {\n    margin-top: 0.25em;\n    margin-bottom: 0.25em;\n}\n\nbutton.panel-heading {\n    display: block;\n    position: relative;\n    width: 100%;\n    text-align: left;\n    border-top-width: 0;\n    border-left-width: 0;\n    border-right-width: 0;\n    border-radius: 0 !important;\n}\n\n.panel-heading .panel-title-text {\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n}\n\n.panel-heading .panel-status {\n    margin-left:15px;\n}\n\nidenticon {\n    width: 1em;\n    height: 1em;\n    line-height: 1;\n}\n\n.identicon {\n    width: 1em;\n    height: 1em;\n    shape-rendering: crispEdges;\n}\n\na.toggler {\n    color: inherit;\n}\na.toggler:hover {\n    border-bottom: 1px dashed;\n    text-decoration: none;\n}\n\n/**\n * Panel padding decrease\n */\n\n.panel-collapse .panel-body {\n    padding: 5px;\n}\n\n/**\n * Progress bars with centered text\n */\n\n.progress {\n    margin-bottom: 0px;\n    position: relative;\n}\n\n.progress span.frontal {\n    text-align: center;\n    position: absolute;\n    display: block;\n    width: 100%;\n}\n\n.three-columns {\n    -webkit-column-count: 3;\n    -moz-column-count: 3;\n    column-count: 3;\n}\n\n.two-columns {\n    -webkit-column-count: 2;\n    -moz-column-count: 2;\n    column-count: 2;\n}\n\nul.three-columns li, ul.two-columns li {\n    padding-left: 0.5em;\n    text-indent: -0.5em;\n}\n\n.navbar-fixed-bottom {\n    z-index: 980;\n}\n\n/*\n * Restore Versions tweaks\n */\n\n#restoreTree-container {\n    overflow-y: scroll;\n    resize: vertical;\n    /* Limit height to prevent vertical screen overflow. */\n    max-height: calc(100vh - 390px);\n    /* Always fit at least one folder with dropdown open. */\n    min-height: 136px;\n}\n@media (min-width: 768px) {\n    #restoreTree-container {\n        max-height: calc(100vh - 401px);\n    }\n}\n@media (min-width: 992px) {\n    #restoreTree-container {\n        max-height: calc(100vh - 333px);\n    }\n}\n\n/* Ignore fixed height when manually resized. */\n#restoreTree-container[style*=\"height\"] {\n    max-height: none;\n}\n\n/* Remove table outline as rows have own focus style already. */\n#restoreTree:focus {\n    outline: 0;\n}\n\n/* Align dropdown with title first line. */\n#restoreTree td + td {\n    padding-top: 4px;\n    vertical-align: top;\n}\n\n/* Reduce space between toggle and menu on mobile. */\n#restoreTree .dropdown-toggle {\n    margin-bottom: 0;\n}\n\n/* Change direction to remain on screen on mobile. */\n#restoreTree .dropdown-menu {\n    left: auto;\n    right: 0;\n}\n\n/* Ensure maximum space for filtering and date range. */\n#restoreVersions .form-group,\n#restoreVersions .form-control {\n    width: 100%;\n}\n\n/** Footer nav on small devices **/\n@media (max-width: 1199px) {\n    /* Stay at the end of the page, with space reserved for the footer\n    usually taking up two rows. */\n\n    html {\n        position: relative;\n        min-height: 100%;\n    }\n\n    body {\n        padding-bottom: 60px;\n    }\n\n    .navbar-fixed-bottom {\n        position: absolute;\n    }\n}\n\n@media (max-width: 768px) {\n    /* Layout after the normal contents, as this is when the footer switches\n    to a vertical layout. */\n\n    body {\n        padding-bottom: 0px;\n    }\n\n    .navbar-brand {\n        margin: 3.25px -15px;\n    }\n\n    .navbar-fixed-bottom {\n        position: relative;\n    }\n\n    .navbar-nav .open .dropdown-menu {\n        position: absolute;\n        left: auto;\n        right: 0;\n        background-color: #ffffff;\n        border: 1px solid #cccccc;\n        border: 1px solid rgba(0, 0, 0, 0.15);\n        -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\n        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\n        border-radius: 2px;\n    }\n\n    li[language-select] {\n        position: static !important;\n    }\n\n    li[language-select] > .dropdown-menu {\n        column-count: auto;\n        margin-left: 15px;\n        margin-right: 15px;\n        margin-top: -12px !important;\n        max-width: 450px;\n        overflow-y: scroll;\n        /* height of 5.5 elements + negative margin-top */\n        height: 276px;\n    }\n\n    .two-columns {\n        -webkit-column-count: 1;\n        -moz-column-count: 1;\n        column-count: 1;\n    }\n}\n\n@media (max-width:479px) {\n\n    nav .dropdown-toggle {\n        font-size: 1em;\n    }\n\n    .navbar-nav .open .dropdown-menu > li > a {\n        padding: 12px 15px 12px 25px;\n    }\n\n    .navbar-fixed-bottom li {\n         width: 100%;\n    }\n}\n\n.tab-content {\n    padding-top: 10px;\n}\n\n@media (max-width: 419px) {\n    /* the selectors are build to target only the content of folder and device\n       panels as it would \"destroy\" e.g. out of sync or recent changes listings */\n    div[id^='device-'].panel-collapse table,\n    div[id^='folder-'].panel-collapse table,\n    div[id^='device-'].panel-collapse tbody,\n    div[id^='folder-'].panel-collapse tbody,\n    div[id^='device-'].panel-collapse tr,\n    div[id^='folder-'].panel-collapse tr {\n        display: block;\n    }\n    div[id^='device-'].panel-collapse th,\n    div[id^='folder-'].panel-collapse th,\n    div[id^='device-'].panel-collapse td,\n    div[id^='folder-'].panel-collapse td {\n        display: block;\n        max-width: 100%;\n        width: 100%;\n    }\n\n    /* All buttons, except panel headings, get bottom margin, as they\n       won't fit beside each other anymore. Reduce footer padding to\n       compensate for the margin. */\n    .btn:not(.panel-heading),\n    .btn:not(.panel-heading) + .btn:not(.panel-heading) {\n        margin-bottom: 10px;\n    }\n    .panel-footer {\n        padding-bottom: 0;\n    }\n    .modal-footer {\n        padding-bottom: 5px;\n    }\n\n    table.table-auto td,\n    table.table-auto th,\n    table.table-condensed td,\n    table.table-condensed th {\n        /* for mobile phones to allow linebreaks in long repro folder/shared with\n        * columns. */\n        white-space: normal;\n    }\n\n    /* Move share buttons below device ID on small screens. */\n    #shareDeviceIdButtons {\n        display: inline-block;\n    }\n}\n\n.form-horizontal .form-group {\n    margin-bottom: 5px;\n}\n\n.form-horizontal {\n    margin-bottom: 10px;\n}\n\n/* Use the same style as Bootstrap uses for disabled <select>. */\n.form-control option[disabled] {\n    background-color: #eeeeee;\n    opacity: 1;\n}\n\n/* Make a \"well\" look more like a readonly text input when grouped with a button */\n.input-group .well-sm {\n  padding-top: 6px;\n  padding-bottom: 6px;\n}\n\n/* CJK languages don't use italic at all, hence don't force it on them. */\nhtml[lang|=\"zh\"] i,\nhtml[lang=\"ja\"] i,\nhtml[lang|=\"ko\"] i {\n    font-style: normal;\n}\n\n/* Prevent buttons from jumping up and down\n   when a tooltip is shown for one of them. */\n.btn-group-vertical > .tooltip + .btn,\n.btn-group-vertical > .tooltip + .btn-group {\n    margin-top: -1px;\n}\n\n.select-on-click {\n    -webkit-user-select: all;\n    user-select: all;\n}\n", "<!DOCTYPE html>\n<!--\n// Copyright (C) 2014 The Syncthing Authors.\n//\n// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this file,\n// You can obtain one at https://mozilla.org/MPL/2.0/.\n\n-->\n<html lang=\"en\" ng-app=\"syncthing\" ng-controller=\"SyncthingController\">\n<head>\n  <meta charset=\"utf-8\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <link rel=\"shortcut icon\" href=\"assets/img/favicon-{{syncthingStatus()}}.png\"/>\n  <link rel=\"mask-icon\" href=\"assets/img/safari-pinned-tab.svg\" color=\"#0882c8\"/>\n\n  <title ng-bind=\"thisDeviceName() + ' | Syncthing'\"></title>\n  <link href=\"vendor/bootstrap/css/bootstrap.css\" rel=\"stylesheet\"/>\n  <link href=\"vendor/daterangepicker/daterangepicker.css\" rel=\"stylesheet\"/>\n  <link href=\"assets/font/raleway.css\" rel=\"stylesheet\"/>\n  <link href=\"vendor/fork-awesome/css/fork-awesome.css\" rel=\"stylesheet\"/>\n  <link href=\"vendor/fork-awesome/css/v5-compat.css\" rel=\"stylesheet\"/>\n  <link href=\"assets/css/tree.css\" rel=\"stylesheet\"/>\n  <link href=\"assets/css/overrides.css\" rel=\"stylesheet\"/>\n  <link href=\"assets/css/theme.css\" rel=\"stylesheet\"/>\n</head>\n\n<body>\n  <noscript>\n    <nav class=\"navbar navbar-top navbar-default\" role=\"navigation\">\n      <div class=\"container\">\n        <span class=\"navbar-brand\" aria-hidden=\"true\">\n          <img class=\"logo hidden-xs\" src=\"assets/img/logo-horizontal.svg\" height=\"32\" width=\"117\" alt=\"\"/>\n          <img class=\"logo hidden visible-xs\" src=\"assets/img/favicon-default.png\" height=\"32\" alt=\"\"/>\n        </span>\n      </div>\n    </nav>\n\n    <div class=\"container content\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"panel panel-danger\">\n            <div class=\"panel-heading\">\n              <h3 class=\"panel-title\">\n                <div class=\"panel-icon\">\n                  <span class=\"fas fa-exclamation-circle\"></span>\n                </div>\n                Warning!\n              </h3>\n            </div>\n            <div class=\"panel-body\">\n              <p>\n              The Syncthing admin interface requires JavaScript. Please enable JavaScript in your web browser and try again.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </noscript>\n\n  <div class=\"ng-cloak\">\n    <script type=\"text/javascript\" src=\"syncthing/development/logbar.js\"></script>\n    <div ng-if=\"version.isBeta\" ng-include=\"'syncthing/development/logbar.html'\"></div>\n    <!-- Top bar -->\n\n    <nav class=\"navbar navbar-top navbar-default\" role=\"navigation\">\n      <div class=\"container\">\n        <span class=\"navbar-brand\" aria-hidden=\"true\">\n          <img class=\"logo hidden-xs\" src=\"assets/img/logo-horizontal.svg\" height=\"32\" width=\"117\" alt=\"\"/>\n          <img class=\"logo hidden visible-xs\" src=\"assets/img/favicon-default.png\" height=\"32\" alt=\"\"/>\n        </span>\n        <p class=\"navbar-text hidden-xs\" ng-class=\"{'hidden-sm':upgradeInfo && upgradeInfo.newer}\">{{thisDeviceName()}}</p>\n        <ul class=\"nav navbar-nav navbar-right\">\n          <li ng-if=\"upgradeInfo && upgradeInfo.newer\" class=\"upgrade-newer\">\n            <button type=\"button\" class=\"btn navbar-btn btn-primary btn-sm\" data-toggle=\"modal\" data-target=\"#upgrade\">\n              <span class=\"fas fa-arrow-circle-up\"></span>\n              <span class=\"hidden-xs\" translate translate-value-version=\"{{upgradeInfo.latest}}\">Upgrade To {%version%}</span>\n            </button>\n          </li>\n          <li ng-if=\"upgradeInfo && upgradeInfo.majorNewer\" class=\"upgrade-newer-major\">\n            <button type=\"button\" class=\"btn navbar-btn btn-danger btn-sm\" data-toggle=\"modal\" data-target=\"#majorUpgrade\">\n              <span class=\"fas fa-arrow-circle-up\"></span>\n              <span class=\"hidden-xs\" translate translate-value-version=\"{{upgradeInfo.latest}}\">Upgrade To {%version%}</span>\n            </button>\n          </li>\n          <li class=\"dropdown\" language-select></li>\n          <li>\n            <a class=\"navbar-link\" href=\"{{docsURL('intro/gui')}}\" target=\"_blank\">\n              <span class=\"fas fa-question-circle\"></span>\n              <span class=\"hidden-xs\" translate>Help</span>\n            </a>\n          </li>\n          <li class=\"dropdown action-menu\">\n            <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">\n              <span class=\"fas fa-cog\"></span>\n              <span class=\"hidden-xs\" translate>Actions</span>\n              <span class=\"caret\"></span>\n            </a>\n            <ul class=\"dropdown-menu\">\n              <li><a href=\"\" ng-click=\"showSettings()\"><span class=\"fas fa-fw fa-cog\"></span>&nbsp;<span translate>Settings</span></a></li>\n              <li><a href=\"\" ng-click=\"showDeviceIdentification(thisDevice())\"><span class=\"fas fa-fw fa-qrcode\"></span>&nbsp;<span translate>Show ID</span></a></li>\n              <li class=\"divider\" aria-hidden=\"true\"></li>\n              <li><a href=\"\" ng-click=\"shutdown()\"><span class=\"fas fa-fw fa-power-off\"></span>&nbsp;<span translate>Shutdown</span></a></li>\n              <li><a href=\"\" ng-click=\"restart()\"><span class=\"fas fa-fw fa-refresh\"></span>&nbsp;<span translate>Restart</span></a></li>\n              <li class=\"divider\" aria-hidden=\"true\"></li>\n              <li class=\"visible-xs\">\n                <a href=\"{{docsURL('intro/gui')}}\" target=\"_blank\">\n                  <span class=\"fas fa-fw fa-question-circle\"></span>&nbsp;<span translate>Help</span>\n                </a>\n              </li>\n              <li><a href=\"\" ng-click=\"about.show()\"><span class=\"far fa-fw fa-heart\"></span>&nbsp;<span translate>About</span></a></li>\n              <li class=\"divider\" aria-hidden=\"true\"></li>\n              <li><a href=\"\" ng-click=\"advanced()\"><span class=\"fas fa-fw fa-cogs\"></span>&nbsp;<span translate>Advanced</span></a></li>\n              <li><a href=\"\" ng-click=\"logging.show()\"><span class=\"far fa-fw fa-file-alt\"></span>&nbsp;<span translate>Logs</span></a></li>\n              <li class=\"divider\" aria-hidden=\"true\" ng-if=\"config.gui.debugging\"></li>\n              <li><a href=\"/rest/debug/support\" target=\"_blank\" ng-if=\"config.gui.debugging\"><span class=\"fa fa-user-md\"></span>&nbsp;<span translate>Support Bundle</span></a></li>\n            </ul>\n          </li>\n        </ul>\n      </div>\n    </nav>\n\n    <div class=\"container content\">\n\n      <!-- Panel: Open, no auth -->\n\n      <div ng-if=\"openNoAuth\" class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"panel panel-danger\">\n            <div class=\"panel-heading\">\n              <h3 class=\"panel-title\">\n                <div class=\"panel-icon\">\n                  <span class=\"fas fa-exclamation-circle\"></span>\n                </div>\n                <span translate>Danger!</span>\n              </h3>\n            </div>\n            <div class=\"panel-body\">\n              <p>\n              <span translate>The Syncthing admin interface is configured to allow remote access without a password.</span>\n              <b><span translate>This can easily give hackers access to read and change any files on your computer.</span></b>\n              <span translate>Please set a GUI Authentication User and Password in the Settings dialog.</span>\n              </p>\n            </div>\n            <div class=\"panel-footer\">\n              <button type=\"button\" class=\"btn btn-sm btn-default pull-right\" ng-click=\"showSettings()\">\n                <span class=\"fas fa-cog\"></span>&nbsp;<span translate>Settings</span>\n              </button>\n              <div class=\"clearfix\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Panel: Restart Needed -->\n\n      <div ng-if=\"!configInSync\" class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"panel panel-warning\">\n            <div class=\"panel-heading\">\n              <h3 class=\"panel-title\">\n                <div class=\"panel-icon\">\n                  <span class=\"fas fa-exclamation-circle\"></span>\n                </div>\n                <span translate>Restart Needed</span>\n              </h3>\n            </div>\n            <div class=\"panel-body\">\n              <p translate>The configuration has been saved but not activated. Syncthing must restart to activate the new configuration.</p>\n            </div>\n            <div class=\"panel-footer\">\n              <button type=\"button\" class=\"btn btn-sm btn-default pull-right\" ng-click=\"restart()\">\n                <span class=\"fas fa-refresh\"></span>&nbsp;<span translate>Restart</span>\n              </button>\n              <div class=\"clearfix\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div ng-if=\"config\">\n\n        <!-- Panel: Notifications -->\n\n        <div ng-if=\"config.options && config.options.unackedNotificationIDs\" ng-include=\"'syncthing/core/notifications.html'\"></div>\n\n        <!-- Panel: New Device -->\n\n        <div ng-repeat=\"(deviceID, pendingDevice) in pendingDevices\" class=\"row\">\n          <div class=\"col-md-12\">\n            <div class=\"panel panel-warning\">\n              <div class=\"panel-heading\">\n                <h3 class=\"panel-title\">\n                  <identicon class=\"panel-icon\" data-value=\"device\"></identicon>\n                  <span translate>New Device</span>\n                  <span class=\"pull-right\">{{ pendingDevice.time | date:\"yyyy-MM-dd HH:mm:ss\" }}</span>\n                </h3>\n              </div>\n              <div class=\"panel-body\">\n                <p>\n                  <span translate translate-value-device=\"{{ deviceID }}\" translate-value-address=\"{{ pendingDevice.address }}\" translate-value-name=\"{{ pendingDevice.name }}\">\n                    Device \"{%name%}\" ({%device%} at {%address%}) wants to connect. Add new device?\n                  </span>\n                </p>\n              </div>\n              <div class=\"panel-footer clearfix\">\n                <div class=\"pull-right\">\n                  <button type=\"button\" class=\"btn btn-sm btn-success\" ng-click=\"addDevice(deviceID, pendingDevice.name)\">\n                    <span class=\"fas fa-plus\"></span>&nbsp;<span translate>Add Device</span>\n                  </button>\n                  <button type=\"button\" class=\"btn btn-sm btn-danger\" ng-click=\"ignoreDevice(deviceID, pendingDevice)\" tooltip data-original-title=\"{{'Permanently add it to the ignore list, suppressing further notifications.' | translate}}\">\n                    <span class=\"fas fa-times\"></span>&nbsp;<span translate>Ignore</span>\n                  </button>\n                  <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"dismissPendingDevice(deviceID)\" tooltip data-original-title=\"{{'Do not add it to the ignore list, so this notification may recur.' | translate}}\">\n                    <span class=\"far fa-clock\"></span>&nbsp;<span translate>Dismiss</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Panel: New Folder -->\n        <div ng-repeat=\"(folderID, pendingFolder) in pendingFolders\">\n          <div ng-repeat=\"(deviceID, offeringDevice) in pendingFolder.offeredBy\" class=\"row reject\">\n            <div class=\"col-md-12\">\n              <div class=\"panel panel-warning\">\n                <div class=\"panel-heading\">\n                  <h3 class=\"panel-title\">\n                    <div class=\"panel-icon\">\n                      <span class=\"fas fa-folder\"></span>\n                    </div>\n                    <span translate ng-if=\"!folders[folderID]\">New Folder</span>\n                    <span translate ng-if=\"folders[folderID]\">Share Folder</span>\n                    <span class=\"pull-right\">{{ offeringDevice.time | date:\"yyyy-MM-dd HH:mm:ss\" }}</span>\n                  </h3>\n                </div>\n                <div class=\"panel-body\">\n                  <p>\n                    <span ng-if=\"offeringDevice.label.length == 0\" translate translate-value-device=\"{{ deviceName(devices[deviceID]) }}\" translate-value-folder=\"{{ folderID }}\">\n                      {%device%} wants to share folder \"{%folder%}\".\n                    </span>\n                    <span ng-if=\"offeringDevice.label.length != 0\" translate translate-value-device=\"{{ deviceName(devices[deviceID]) }}\" translate-value-folder=\"{{ folderID }}\" translate-value-folderlabel=\"{{ offeringDevice.label }}\">\n                      {%device%} wants to share folder \"{%folderlabel%}\" ({%folder%}).\n                    </span>\n                    <span translate ng-if=\"folders[folderID]\">Share this folder?</span>\n                    <span translate ng-if=\"!folders[folderID]\">Add new folder?</span>\n                  </p>\n                </div>\n                <div class=\"panel-footer clearfix\">\n                  <div class=\"pull-right\">\n                    <button type=\"button\" class=\"btn btn-sm btn-success\" ng-click=\"addFolderAndShare(folderID, pendingFolder, deviceID)\" ng-if=\"!folders[folderID]\">\n                      <span class=\"fas fa-check\"></span>&nbsp;<span translate>Add</span>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-sm btn-success\" ng-click=\"shareFolderWithDevice(folderID, deviceID)\" ng-if=\"folders[folderID]\">\n                      <span class=\"fas fa-check\"></span>&nbsp;<span translate>Share</span>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-sm btn-danger\" ng-click=\"ignoreFolder(deviceID, folderID, offeringDevice)\" tooltip data-original-title=\"{{'Permanently add it to the ignore list, suppressing further notifications.' | translate}}\">\n                      <span class=\"fas fa-times\"></span>&nbsp;<span translate>Ignore</span>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"dismissPendingFolder(folderID, deviceID)\" tooltip data-original-title=\"{{'Do not add it to the ignore list, so this notification may recur.' | translate}}\">\n                      <span class=\"far fa-clock\"></span>&nbsp;<span translate>Dismiss</span>\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n\n      <!-- Panel: Notice -->\n\n      <div ng-if=\"errorList().length > 0\" class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"panel panel-warning\">\n            <div class=\"panel-heading\">\n              <h3 class=\"panel-title\">\n                <div class=\"panel-icon\">\n                  <span class=\"fas fa-exclamation-circle\"></span>\n                </div>\n                <span translate>Notice</span>\n              </h3>\n            </div>\n            <div class=\"panel-body\">\n              <p ng-repeat=\"err in errorList()\">\n                <small>{{err.when | date:\"yyyy-MM-dd HH:mm:ss\"}}:</small>\n                <span ng-bind=\"friendlyDevices(err.message)\"></span>\n              </p>\n            </div>\n            <div class=\"panel-footer\">\n              <button type=\"button\" class=\"btn btn-sm btn-default pull-right\" ng-click=\"clearErrors()\">\n                <span class=\"fas fa-check\"></span>&nbsp;<span translate>OK</span>\n              </button>\n              <div class=\"clearfix\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Panel: FS watcher errors -->\n\n      <div ng-if=\"sizeOf(fsWatcherErrorMap()) > 0\" class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"panel panel-warning\">\n            <div class=\"panel-heading\">\n              <h3 class=\"panel-title\">\n                <div class=\"panel-icon\">\n                  <span class=\"fas fa-exclamation-circle\"></span>\n                </div>\n                <span translate>Filesystem Watcher Errors</span>\n              </h3>\n            </div>\n            <div class=\"panel-body\">\n              <p>\n                <span translate>For the following folders an error occurred while starting to watch for changes. It will be retried every minute, so the errors might go away soon. If they persist, try to fix the underlying issue and ask for help if you can't.</span>&emsp;<a href=\"https://forum.syncthing.net\" target=\"_blank\"><span class=\"fas fa-question-circle\"></span>&nbsp;<span translate>Support</span></a>\n              </p>\n              <table>\n                <tr ng-repeat=\"(id, err) in fsWatcherErrorMap()\">\n                  <td>{{folderLabel(id)}}</td><td>{{err}}</td>\n                </tr>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- First regular row -->\n\n      <div class=\"row\">\n\n        <!-- Folder list (top left) -->\n\n        <div class=\"col-md-6\" aria-labelledby=\"folder_list\" role=\"region\" >\n          <h3 id=\"folder_list\"><span translate>Folders</span><span ng-if=\"folderList().length > 1\"> ({{folderList().length}})</span></h3>\n          <div class=\"panel-group\" id=\"folders\">\n            <div class=\"panel panel-default\" ng-repeat=\"folder in folderList()\">\n              <button class=\"btn panel-heading\" data-toggle=\"collapse\" data-parent=\"#folders\" data-target=\"#folder-{{$index}}\" aria-expanded=\"false\">\n                <div class=\"panel-progress\" ng-show=\"folderStatus(folder) == 'syncing'\" ng-attr-style=\"width: {{syncPercentage(folder.id) | percent}}\"></div>\n                <div class=\"panel-progress\" ng-show=\"folderStatus(folder) == 'scanning' && scanProgress[folder.id] != undefined\" ng-attr-style=\"width: {{scanPercentage(folder.id) | percent}}\"></div>\n                <h4 class=\"panel-title\">\n                  <div class=\"panel-icon hidden-xs\">\n                    <span ng-if=\"folder.type == 'sendreceive'\" class=\"fas fa-fw fa-folder\"></span>\n                    <span ng-if=\"folder.type == 'sendonly'\" class=\"fas fa-fw fa-upload\"></span>\n                    <span ng-if=\"folder.type == 'receiveonly'\" class=\"fas fa-fw fa-download\"></span>\n                    <span ng-if=\"folder.type == 'receiveencrypted'\" class=\"fas fa-fw fa-lock\"></span>\n                  </div>\n                  <div class=\"panel-status pull-right text-{{folderClass(folder)}}\" ng-switch=\"folderStatus(folder)\">\n                    <span ng-switch-when=\"paused\"><span class=\"hidden-xs\" translate>Paused</span><span class=\"visible-xs\" aria-label=\"{{'Paused' | translate}}\"><i class=\"fas fa-fw fa-pause\"></i></span></span>\n                    <span ng-switch-when=\"unknown\"><span class=\"hidden-xs\" translate>Unknown</span><span class=\"visible-xs\" aria-label=\"{{'Unknown' | translate}}\"><i class=\"fas fa-fw fa-question-circle\"></i></span></span>\n                    <span ng-switch-when=\"unshared\"><span class=\"hidden-xs\" translate>Unshared</span><span class=\"visible-xs\" aria-label=\"{{'Unshared' | translate}}\"><i class=\"fas fa-fw fa-unlink\"></i></span></span>\n                    <span ng-switch-when=\"scan-waiting\"><span class=\"hidden-xs\" translate>Waiting to Scan</span><span class=\"visible-xs\" aria-label=\"{{'Waiting to Scan' | translate}}\"><i class=\"fas fa-fw fa-hourglass-half\"></i></span></span>\n                    <span ng-switch-when=\"cleaning\"><span class=\"hidden-xs\" translate>Cleaning Versions</span><span class=\"visible-xs\" aria-label=\"{{'Cleaning Versions' | translate}}\"><i class=\"fas fa-fw fa-recycle\"></i></span></span>\n                    <span ng-switch-when=\"clean-waiting\"><span class=\"hidden-xs\" translate>Waiting to Clean</span><span class=\"visible-xs\" aria-label=\"{{'Waiting to Clean' | translate}}\"><i class=\"fas fa-fw fa-hourglass-half\"></i></span></span>\n                    <span ng-switch-when=\"stopped\"><span class=\"hidden-xs\" translate>Stopped</span><span class=\"visible-xs\" aria-label=\"{{'Stopped' | translate}}\"><i class=\"fas fa-fw fa-stop\"></i></span></span>\n                    <span ng-switch-when=\"scanning\">\n                      <span class=\"hidden-xs\" translate>Scanning</span>\n                      <span class=\"hidden-xs\" ng-if=\"scanPercentage(folder.id) != undefined\">\n                        ({{scanPercentage(folder.id) | percent}})\n                      </span>\n                      <span class=\"visible-xs\" aria-label=\"{{'Scanning' | translate}}\"><i class=\"fas fa-fw fa-search\"></i></span>\n                    </span>\n                    <span ng-switch-when=\"idle\"><span class=\"hidden-xs\" translate>Up to Date</span><span class=\"visible-xs\" aria-label=\"{{'Up to Date' | translate}}\"><i class=\"fas fa-fw fa-check\"></i></span></span>\n                    <span ng-switch-when=\"localadditions\"><span class=\"hidden-xs\" translate>Local Additions</span><span class=\"visible-xs\" aria-label=\"{{'Local Additions' | translate}}\"><i class=\"fas fa-fw fa-check\"></i></span></span>\n                    <span ng-switch-when=\"sync-waiting\">\n                      <span class=\"hidden-xs\" translate>Waiting to Sync</span>\n                      <span class=\"visible-xs\" aria-label=\"{{'Waiting to Sync' | translate}}\"><i class=\"fas fa-fw fa-hourglass-half\"></i></span>\n                    </span>\n                    <span ng-switch-when=\"sync-preparing\">\n                      <span class=\"hidden-xs\" translate>Preparing to Sync</span>\n                      <span class=\"visible-xs\" aria-label=\"{{'Preparing to Sync' | translate}}\"><i class=\"fas fa-fw fa-hourglass-half\"></i></span>\n                    </span>\n                    <span ng-switch-when=\"syncing\">\n                      <span class=\"hidden-xs\" translate>Syncing</span>\n                      <span>({{syncPercentage(folder.id) | percent}}, {{model[folder.id].needBytes | binary}}B)</span>\n                    </span>\n                    <span ng-switch-when=\"outofsync\"><span class=\"hidden-xs\" translate>Out of Sync</span><span class=\"visible-xs\" aria-label=\"{{'Out of Sync' | translate}}\"><i class=\"fas fa-fw fa-exclamation-circle\"></i></span></span>\n                    <span ng-switch-when=\"faileditems\"><span class=\"hidden-xs\" translate>Failed Items</span><span class=\"visible-xs\" aria-label=\"{{'Failed Items' | translate}}\"><i class=\"fas fa-fw fa-exclamation-circle\"></i></span></span>\n                    <span ng-switch-when=\"localunencrypted\"><span class=\"hidden-xs\">{{'Unexpected Items' | translate}}</span><span class=\"visible-xs\" aria-label=\"{{'Unexpected Items' | translate}}\"><i class=\"fas fa-fw fa-exclamation-circle\"></i></span></span>\n                  </div>\n                  <div class=\"panel-title-text\">\n                    <span tooltip data-original-title=\"{{folder.label.length != 0 ? folder.id : ''}}\">{{folder.label.length != 0 ? folder.label : folder.id}}</span>\n                  </div>\n                </h4>\n              </button>\n              <div id=\"folder-{{$index}}\" class=\"panel-collapse collapse\">\n                <div class=\"panel-body\">\n                  <table class=\"table table-condensed table-striped table-auto\">\n                    <tbody>\n                      <tr ng-show=\"folder.label != undefined && folder.label.length > 0\">\n                        <th><span class=\"fas fa-fw fa-info-circle\"></span>&nbsp;<span translate>Folder ID</span></th>\n                        <td class=\"text-right no-overflow-ellipse\">{{folder.id}}</td>\n                      </tr>\n                      <tr>\n                        <th><span class=\"fas fa-fw fa-folder-open\"></span>&nbsp;<span translate>Folder Path</span></th>\n                        <td class=\"text-right\">\n                          <span tooltip data-original-title=\"{{folder.path}}\">{{folder.path}}</span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"!folder.paused && (model[folder.id].invalid || model[folder.id].error)\">\n                        <th><span class=\"fas fa-fw fa-exclamation-triangle\"></span>&nbsp;<span translate>Error</span></th>\n                        <td class=\"text-right\">\n                          <span tooltip data-original-title=\"{{model[folder.id].invalid || model[folder.id].error}}\">{{model[folder.id].invalid || model[folder.id].error}}</span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"!folder.paused\">\n                        <th><span class=\"fas fa-fw fa-globe\"></span>&nbsp;<span translate>Global State</span></th>\n                        <td class=\"text-right\">\n                          <span tooltip data-original-title=\"{{model[folder.id].globalFiles | alwaysNumber | localeNumber}} {{'files' | translate}}, {{model[folder.id].globalDirectories | alwaysNumber | localeNumber}} {{'directories' | translate}}, ~{{model[folder.id].globalBytes | binary}}B\">\n                            <span class=\"far fa-copy\"></span>&nbsp;{{model[folder.id].globalFiles | alwaysNumber | localeNumber}}&ensp;\n                            <span class=\"far fa-folder\"></span>&nbsp;{{model[folder.id].globalDirectories | alwaysNumber | localeNumber}}&ensp;\n                            <span class=\"far fa-hdd\"></span>&nbsp;~{{model[folder.id].globalBytes | binary}}B\n                          </span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"!folder.paused\">\n                        <th><span class=\"fas fa-fw fa-home\"></span>&nbsp;<span translate>Local State</span></th>\n                        <td class=\"text-right\">\n                          <div>\n                            <span tooltip data-original-title=\"{{model[folder.id].localFiles | alwaysNumber | localeNumber}} {{'files' | translate}}, {{model[folder.id].localDirectories | alwaysNumber | localeNumber}} {{'directories' | translate}}, ~{{model[folder.id].localBytes | binary}}B\">\n                              <span class=\"far fa-copy\"></span>&nbsp;{{model[folder.id].localFiles | alwaysNumber | localeNumber}}&ensp;\n                              <span class=\"far fa-folder\"></span>&nbsp;{{model[folder.id].localDirectories | alwaysNumber | localeNumber}}&ensp;\n                              <span class=\"far fa-hdd\"></span>&nbsp;~{{model[folder.id].localBytes | binary}}B\n                            </span>\n                          </div>\n                          <div ng-if=\"model[folder.id].ignorePatterns\">\n                            <a href=\"\" ng-click=\"editFolderExisting(folder, '#folder-ignores')\"><i class=\"small\" translate>Reduced by ignore patterns</i></a>\n                          </div>\n                          <div ng-if=\"folder.ignoreDelete\">\n                            <i class=\"small\">\n                              <span translate>Altered by ignoring deletes.</span>\n                              <a href=\"{{docsURL('advanced/folder-ignoredelete')}}\" target=\"_blank\">\n                                <span class=\"fas fa-question-circle\"></span>&nbsp;<span translate>Help</span>\n                              </a>\n                            </i>\n                          </div>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"model[folder.id].needTotalItems > 0\">\n                        <th><span class=\"fas fa-fw fa-cloud-download-alt\"></span>&nbsp;<span translate>Out of Sync Items</span></th>\n                        <td class=\"text-right\">\n                          <a href=\"\" ng-click=\"showNeed(folder.id)\">{{model[folder.id].needTotalItems | alwaysNumber | localeNumber}} <span translate>items</span>, ~{{model[folder.id].needBytes | binary}}B</a>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"folderStatus(folder) === 'scanning' && scanRate(folder.id) > 0\">\n                        <th><span class=\"fas fa-fw fa-hourglass-half\"></span>&nbsp;<span translate>Scan Time Remaining</span></th>\n                        <td class=\"text-right\">\n                          <span tooltip data-original-title=\"{{scanRate(folder.id) | binary}}B/s\">~ {{scanRemaining(folder.id)}}</span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"hasFailedFiles(folder.id)\">\n                        <th><span class=\"fas fa-fw fa-exclamation-circle\"></span>&nbsp;<span translate>Failed Items</span></th>\n                        <!-- Show the number of failed items as a link to bring up the list. -->\n                        <td class=\"text-right\">\n                          <a href=\"\" ng-click=\"showFailed(folder.id)\">{{model[folder.id].pullErrors | alwaysNumber | localeNumber}}&nbsp;<span translate>items</span></a>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"hasReceiveOnlyChanged(folder)\">\n                        <th><span class=\"fas fa-fw fa-exclamation-circle\"></span>&nbsp;<span translate>Locally Changed Items</span></th>\n                        <td class=\"text-right\">\n                          <a href=\"\" ng-click=\"showLocalChanged(folder.id, folder.type)\">{{model[folder.id].receiveOnlyTotalItems | alwaysNumber | localeNumber}} <span translate>items</span>, ~{{model[folder.id].receiveOnlyChangedBytes | binary}}B</a>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"folder.type != 'sendreceive'\">\n                        <th><span class=\"fas fa-fw fa-folder\"></span>&nbsp;<span translate>Folder Type</span></th>\n                        <td class=\"text-right\">\n                          <span ng-if=\"folder.type == 'sendonly'\" translate>Send Only</span>\n                          <span ng-if=\"folder.type == 'receiveonly'\" translate>Receive Only</span>\n                          <span ng-if=\"folder.type == 'receiveencrypted'\" translate>Receive Encrypted</span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"folder.ignorePerms\">\n                        <th><span class=\"far fa-fw fa-minus-square\"></span>&nbsp;<span translate>Ignore Permissions</span></th>\n                        <td class=\"text-right\">\n                          <span translate>Yes</span>\n                        </td>\n                      </tr>\n                      <tr>\n                        <th><span class=\"fas fa-fw fa-refresh\"></span>&nbsp;<span translate>Rescans</span></th>\n                        <td class=\"text-right\">\n                          <div ng-if=\"folder.rescanIntervalS > 0\">\n                            <span ng-if=\"!folder.fsWatcherEnabled\" tooltip data-original-title=\"{{'Periodic scanning at given interval and disabled watching for changes' | translate}}\">\n                              <span class=\"far fa-clock\"></span>&nbsp;{{folder.rescanIntervalS | duration}}&ensp;\n                              <span class=\"fas fa-eye-slash\"></span>&nbsp;<span translate>Disabled</span>\n                            </span>\n                            <span ng-if=\"folder.fsWatcherEnabled && (!model[folder.id].watchError || folder.paused || folderStatus(folder) === 'stopped')\" tooltip data-original-title=\"{{'Periodic scanning at given interval and enabled watching for changes' | translate}}\">\n                              <span class=\"far fa-clock\"></span>&nbsp;{{folder.rescanIntervalS | duration}}&ensp;\n                              <span class=\"fas fa-eye\"></span>&nbsp;<span translate>Enabled</span>\n                            </span>\n                            <span ng-if=\"folder.fsWatcherEnabled && !folder.paused && folderStatus(folder) !== 'stopped' && model[folder.id].watchError\" tooltip data-original-title=\"{{'Periodic scanning at given interval and failed setting up watching for changes, retrying every 1m:' | translate}}<br/>{{model[folder.id].watchError}}\">\n                              <span class=\"far fa-clock\"></span>&nbsp;{{folder.rescanIntervalS | duration}}&ensp;\n                              <span class=\"fas fa-eye-slash\"></span>&nbsp;<span translate>Failed to setup, retrying</span>\n                            </span>\n                          </div>\n                          <div ng-if=\"folder.rescanIntervalS <= 0\">\n                            <span ng-if=\"!folder.fsWatcherEnabled\" tooltip data-original-title=\"{{'Disabled periodic scanning and disabled watching for changes' | translate}}\">\n                              <span class=\"far fa-clock\"></span>&nbsp;<span translate>Disabled</span>&ensp;\n                              <span class=\"fas fa-eye-slash\"></span>&nbsp;<span translate>Disabled</span>\n                            </span>\n                            <span ng-if=\"folder.fsWatcherEnabled && (!model[folder.id].watchError || folder.paused || folderStatus(folder) === 'stopped')\" tooltip data-original-title=\"{{'Disabled periodic scanning and enabled watching for changes' | translate}}\">\n                              <span class=\"far fa-clock\"></span>&nbsp;<span translate>Disabled</span>&ensp;\n                              <span class=\"fas fa-eye\"></span>&nbsp;<span translate>Enabled</span>\n                            </span>\n                            <span ng-if=\"folder.fsWatcherEnabled && !folder.paused && folderStatus(folder) !== 'stopped' && model[folder.id].watchError\" tooltip data-original-title=\"{{'Disabled periodic scanning and failed setting up watching for changes, retrying every 1m:' | translate}}<br/>{{model[folder.id].watchError}}\">\n                              <span class=\"far fa-clock\"></span>&nbsp;<span translate>Disabled</span>&ensp;\n                              <span class=\"fas fa-eye-slash\"></span>&nbsp;<span translate>Failed to setup, retrying</span>\n                            </span>\n                          </div>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"folder.order != 'random' && folder.type != 'sendonly'\">\n                        <th><span class=\"fas fa-fw fa-sort\"></span>&nbsp;<span translate>File Pull Order</span></th>\n                        <td class=\"text-right\" ng-switch=\"folder.order\">\n                          <span ng-switch-when=\"random\" translate>Random</span>\n                          <span ng-switch-when=\"alphabetic\" translate>Alphabetic</span>\n                          <span ng-switch-when=\"smallestFirst\" translate>Smallest First</span>\n                          <span ng-switch-when=\"largestFirst\" translate>Largest First</span>\n                          <span ng-switch-when=\"oldestFirst\" translate>Oldest First</span>\n                          <span ng-switch-when=\"newestFirst\" translate>Newest First</span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"folder.versioning.type\">\n                        <th><span class=\"fa fa-fw fa-file\"></span>&nbsp;<span translate>File Versioning</span></th>\n                        <td class=\"text-right\">\n                          <span ng-switch=\"folder.versioning.type\">\n                            <span ng-switch-when=\"trashcan\" translate>Trash Can</span>\n                            <span ng-switch-when=\"simple\" translate>Simple</span>\n                            <span ng-switch-when=\"staggered\" translate>Staggered</span>\n                            <span ng-switch-when=\"external\" tooltip data-original-title=\"<span class='text-monospace'>{{folder.versioning.params.command}}</span>\" translate>External</span>\n                          </span>\n                          <span ng-if=\"folder.versioning.type != 'external'\">\n                            <span ng-if=\"(folder.versioning.type == 'trashcan' || folder.versioning.type == 'simple') && folder.versioning.params.cleanoutDays != versioningDefaults.trashcanClean\" tooltip data-original-title=\"{{'Clean out after' | translate}}\">\n                              &ensp;<span class=\"fa fa-calendar\"></span>&nbsp;{{folder.versioning.params.cleanoutDays * 86400 | duration:\"d\"}}\n                            </span>\n                            <span ng-if=\"folder.versioning.type == 'simple' && folder.versioning.params.keep != versioningDefaults.simpleKeep\" tooltip data-original-title=\"{{'Keep Versions' | translate}}\">\n                              &ensp;<span class=\"fa fa-file-archive-o\"></span>&nbsp;{{folder.versioning.params.keep}}\n                            </span>\n                            <span ng-if=\"folder.versioning.type == 'staggered' && folder.versioning.params.maxAge / 86400 != versioningDefaults.staggeredMaxAge\" tooltip data-original-title=\"{{'Maximum Age' | translate}}\">\n                              &ensp;<span class=\"fa fa-calendar\"></span>&nbsp;<span ng-if=\"folder.versioning.params.maxAge == 0\" translate>Forever</span><span ng-if=\"folder.versioning.params.maxAge > 0\">{{folder.versioning.params.maxAge | duration}}</span>\n                            </span>\n                            <span ng-if=\"folder.versioning.cleanupIntervalS != versioningDefaults.cleanupIntervalS\" tooltip data-original-title=\"{{'Cleanup Interval' | translate}}\">\n                              &ensp;<span class=\"fa fa-recycle\"></span>&nbsp;<span ng-if=\"folder.versioning.cleanupIntervalS == 0\" translate>Disabled</span><span ng-if=\"folder.versioning.cleanupIntervalS > 0\">{{folder.versioning.cleanupIntervalS | duration}}</span>\n                            </span>\n                            <!-- Keep the path last, so that it truncates without pushing other information out of the screen. -->\n                            <span ng-if=\"folder.versioning.fsPath != ''\" tooltip data-original-title=\"{{folder.versioning.fsPath}}\">\n                              &ensp;<span class=\"fa fa-folder-open-o\"></span>&nbsp;{{folder.versioning.fsPath}}\n                            </span>\n                          </span>\n                        </td>\n                      </tr>\n                      <tr>\n                        <th><span class=\"fas fa-fw fa-share-alt\"></span>&nbsp;<span translate>Shared With</span></th>\n                        <td class=\"text-right no-overflow-ellipse word-break-all\">\n                          <span ng-repeat=\"device in folder.devices\">\n                            <span ng-if=\"device.deviceID != myID\" ng-switch=\"completion[device.deviceID][folder.id].remoteState\">\n                              <span ng-switch-when=\"notSharing\" data-original-title=\"{{'The remote device has not accepted sharing this folder.' | translate}}\" tooltip>{{deviceName(devices[device.deviceID])}}<sup>1</sup><span ng-if=\"!$last\">,</span></span>\n                              <span ng-switch-when=\"paused\" data-original-title=\"{{'The remote device has paused this folder.' | translate}}\" tooltip>{{deviceName(devices[device.deviceID])}}<sup>2</sup><span ng-if=\"!$last\">,</span></span>\n                              <span ng-switch-default>{{deviceName(devices[device.deviceID])}}<span ng-if=\"!$last\">,</span></span>\n                            </span>\n                          </span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"folderStats[folder.id].lastScan\">\n                        <th><span class=\"far fa-fw fa-clock\"></span>&nbsp;<span translate>Last Scan</span></th>\n                        <td translate ng-if=\"folderStats[folder.id].lastScanDays >= 365\" class=\"text-right\">Never</td>\n                        <td ng-if=\"folderStats[folder.id].lastScanDays < 365\" class=\"text-right\">\n                          <span>{{folderStats[folder.id].lastScan | date:'yyyy-MM-dd HH:mm:ss'}}</span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"folder.type != 'sendonly' && folder.type != 'receiveencrypted' && folderStats[folder.id].lastFile && folderStats[folder.id].lastFile.filename\">\n                        <th><span class=\"fas fa-fw fa-exchange-alt\"></span>&nbsp;<span translate>Latest Change</span></th>\n                        <td class=\"text-right\">\n                          <span tooltip data-original-title=\"{{folderStats[folder.id].lastFile.filename}} @ {{folderStats[folder.id].lastFile.at | date:'yyyy-MM-dd HH:mm:ss'}}\">\n                            <span translate translate-value-file=\"{{folderStats[folder.id].lastFile.filename | basename}}\" ng-if=\"!folderStats[folder.id].lastFile.deleted\">Updated {%file%}</span>\n                            <span translate translate-value-file=\"{{folderStats[folder.id].lastFile.filename | basename}}\" ng-if=\"folderStats[folder.id].lastFile.deleted\">Deleted {%file%}</span>\n                          </span>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div class=\"panel-footer\">\n                  <button type=\"button\" class=\"btn btn-sm btn-danger pull-left\" ng-click=\"revertOverrideConfirmationModal('override', folder.id)\" ng-if=\"folderStatus(folder) == 'outofsync' && folder.type == 'sendonly'\">\n                    <span class=\"fas fa-arrow-circle-up\"></span>&nbsp;<span translate>Override Changes</span>\n                  </button>\n                  <button type=\"button\" class=\"btn btn-sm btn-danger pull-left\" ng-click=\"revertOverrideConfirmationModal('revert', folder.id)\" ng-if=\"hasReceiveOnlyChanged(folder)\">\n                    <span class=\"fa fa-arrow-circle-down\"></span>&nbsp;<span translate>Revert Local Changes</span>\n                  </button>\n                  <button type=\"button\" class=\"btn btn-sm btn-danger pull-left\" ng-click=\"revertOverrideConfirmationModal('deleteEnc', folder.id)\" ng-if=\"hasReceiveEncryptedItems(folder)\">\n                    <span class=\"fa fa-minus-circle\"></span>&nbsp;<span translate>Delete Unexpected Items</span>\n                  </button>\n                  <span class=\"pull-right\">\n                    <button ng-if=\"!folder.paused\" type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"setFolderPause(folder.id, true)\">\n                      <span class=\"fas fa-pause\"></span>&nbsp;<span translate>Pause</span>\n                    </button>\n                    <button ng-if=\"folder.paused\" type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"setFolderPause(folder.id, false)\">\n                      <span class=\"fas fa-play\"></span>&nbsp;<span translate>Resume</span>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"restoreVersions.show(folder.id)\" ng-if=\"folder.versioning.type && folder.versioning.type != 'external'\" ng-disabled=\"folder.paused\">\n                      <span class=\"fas fa-undo\"></span>&nbsp;<span translate>Versions</span>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"rescanFolder(folder.id)\" ng-disabled=\"['idle', 'stopped', 'unshared', 'outofsync', 'faileditems', 'localadditions'].indexOf(folderStatus(folder)) < 0\">\n                      <span class=\"fas fa-refresh\"></span>&nbsp;<span translate>Rescan</span>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"editFolderExisting(folder)\">\n                      <span class=\"fas fa-pencil-alt\"></span>&nbsp;<span translate>Edit</span>\n                    </button>\n                  </span>\n                  <div class=\"clearfix\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <span class=\"pull-right\">\n            <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"setAllFoldersPause(true)\" ng-if=\"isAtleastOneFolderPausedStateSetTo(false)\">\n              <span class=\"fas fa-pause\"></span>&nbsp;<span translate>Pause All</span>\n            </button>\n            <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"setAllFoldersPause(false)\" ng-if=\"isAtleastOneFolderPausedStateSetTo(true)\">\n              <span class=\"fas fa-play\"></span>&nbsp;<span translate>Resume All</span>\n            </button>\n            <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"rescanAllFolders()\" ng-if=\"folderList().length > 0\" ng-disabled=\"!isAtleastOneFolderPausedStateSetTo(false)\">\n              <span class=\"fas fa-refresh\"></span>&nbsp;<span translate>Rescan All</span>\n            </button>\n            <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"addFolder()\">\n              <span class=\"fas fa-plus\"></span>&nbsp;<span translate>Add Folder</span>\n            </button>\n          </span>\n          <div class=\"clearfix\"></div>\n          <hr class=\"visible-sm\"/>\n        </div>\n\n        <!-- Device list (top right) -->\n\n        <!-- This device -->\n\n        <div class=\"col-md-6\" aria-label=\"{{'Devices' | translate}}\" role=\"region\">\n          <h3 translate>This Device</h3>\n          <div class=\"panel panel-default\" ng-repeat=\"deviceCfg in [thisDevice()]\">\n            <button class=\"btn panel-heading\" data-toggle=\"collapse\" data-target=\"#device-this\" aria-expanded=\"true\">\n              <h4 class=\"panel-title\">\n                <identicon class=\"panel-icon\" data-value=\"deviceCfg.deviceID\"></identicon>\n                <div class=\"panel-title-text\">{{deviceName(deviceCfg)}}</div>\n              </h4>\n            </button>\n            <div id=\"device-this\" class=\"panel-collapse collapse in\">\n              <div class=\"panel-body\">\n                <table class=\"table table-condensed table-striped table-auto\">\n                  <tbody>\n                    <tr>\n                      <th><span class=\"fas fa-fw fa-cloud-download-alt\"></span>&nbsp;<span translate>Download Rate</span></th>\n                      <td class=\"text-right\">\n                        <a href=\"#\" class=\"toggler\" ng-click=\"toggleUnits()\">\n                          <span ng-if=\"!metricRates\">{{connectionsTotal.inbps | binary}}B/s</span>\n                          <span ng-if=\"metricRates\">{{connectionsTotal.inbps*8 | metric}}bps</span>\n                          ({{connectionsTotal.inBytesTotal | binary}}B)\n                          <small ng-if=\"config.options.maxRecvKbps > 0\"><br/>\n                            <i class=\"text-muted\"><span translate>Limit</span>:\n                              <span ng-if=\"!metricRates\">{{config.options.maxRecvKbps*1024 | binary}}B/s</span>\n                              <span ng-if=\"metricRates\">{{config.options.maxRecvKbps*1024*8 | metric}}bps</span>\n                            </i>\n                          </small>\n                        </a>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th><span class=\"fas fa-fw fa-cloud-upload-alt\"></span>&nbsp;<span translate>Upload Rate</span></th>\n                      <td class=\"text-right\">\n                        <a href=\"#\" class=\"toggler\" ng-click=\"toggleUnits()\">\n                          <span ng-if=\"!metricRates\">{{connectionsTotal.outbps | binary}}B/s</span>\n                          <span ng-if=\"metricRates\">{{connectionsTotal.outbps*8 | metric}}bps</span>\n                          ({{connectionsTotal.outBytesTotal | binary}}B)\n                          <small ng-if=\"config.options.maxSendKbps > 0\"><br/>\n                            <i class=\"text-muted\"><span translate>Limit</span>:\n                              <span ng-if=\"!metricRates\">{{config.options.maxSendKbps*1024 | binary}}B/s</span>\n                              <span ng-if=\"metricRates\">{{config.options.maxSendKbps*1024*8 | metric}}bps</span>\n                            </i>\n                          </small>\n                        </a>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th><span class=\"fas fa-fw fa-home\"></span>&nbsp;<span translate>Local State (Total)</span></th>\n                      <td class=\"text-right\">\n                          <span tooltip data-original-title=\"{{localStateTotal.files | alwaysNumber | localeNumber}} {{'files' | translate}}, {{ localStateTotal.directories | alwaysNumber | localeNumber}} {{'directories' | translate}}, ~{{ localStateTotal.bytes | binary}}B\">\n                            <span class=\"far fa-copy\"></span>&nbsp;{{localStateTotal.files | alwaysNumber | localeNumber}}&ensp;\n                            <span class=\"far fa-folder\"></span>&nbsp;{{localStateTotal.directories| alwaysNumber | localeNumber}}&ensp;\n                            <span class=\"far fa-hdd\"></span>&nbsp;~{{localStateTotal.bytes | binary}}B\n                          </span>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th><span class=\"fas fa-fw fa-sitemap\"></span>&nbsp;<span translate>Listeners</span></th>\n                      <td class=\"text-right\">\n                        <span class=\"data\" tooltip data-original-title=\"{{'Show detailed listener status' | translate}}.\">\n                          <a href=\"\" ng-class=\"{'text-success': listenersTotal > 0 && listenersFailed.length == 0, 'text-danger': listenersTotal > 0 && listenersFailed.length == listenersTotal}\" ng-click=\"showListenerStatus()\">\n                            {{listenersTotal-listenersFailed.length}}/{{listenersTotal}}\n                          </a>\n                        </span>\n                      </td>\n                    </tr>\n                    <tr ng-if=\"system.discoveryEnabled\">\n                      <th><span class=\"fas fa-fw fa-map-signs\"></span>&nbsp;<span translate>Discovery</span></th>\n                      <td class=\"text-right\">\n                        <span class=\"data\" tooltip data-original-title=\"{{'Show detailed discovery status' | translate}}.\">\n                          <a href=\"\" ng-class=\"{'text-success': discoveryFailed.length == 0, 'text-danger': discoveryFailed.length == discoveryTotal}\" ng-click=\"showDiscoveryStatus()\">\n                            {{discoveryTotal-discoveryFailed.length}}/{{discoveryTotal}}\n                          </a>\n                        </span>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th><span class=\"far fa-fw fa-clock\"></span>&nbsp;<span translate>Uptime</span></th>\n                      <td class=\"text-right\">{{system.uptime | duration:\"m\"}}</td>\n                    </tr>\n                    <tr>\n                      <th><span class=\"fas fa-fw fa-qrcode\"></span>&nbsp;<span translate>Identification</span></th>\n                      <td class=\"text-right\">\n                        <span tooltip data-original-title=\"{{'Click to see full identification string and QR code.' | translate}}\">\n                          <a href=\"\" ng-click=\"showDeviceIdentification(thisDevice())\">{{deviceShortID(deviceCfg.deviceID)}}</a>\n                        </span>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th><span class=\"fas fa-fw fa-tag\"></span>&nbsp;<span translate>Version</span></th>\n                      <td class=\"text-right no-overflow-ellipse\">{{versionString()}}</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n\n          <!-- Remote devices -->\n          <h3><span translate>Remote Devices</span> <span ng-if=\"otherDevices().length > 1\"> ({{otherDevices().length}})</span></h3>\n          <div class=\"panel-group\" id=\"devices\">\n            <div class=\"panel panel-default\" ng-repeat=\"deviceCfg in otherDevices()\">\n              <button class=\"btn panel-heading\" data-toggle=\"collapse\" data-parent=\"#devices\" data-target=\"#device-{{$index}}\" aria-expanded=\"false\">\n                <div class=\"panel-progress\" ng-show=\"deviceStatus(deviceCfg) == 'syncing'\" ng-attr-style=\"width: {{completion[deviceCfg.deviceID]._total | percent}}\"></div>\n                <h4 class=\"panel-title\">\n                  <identicon class=\"panel-icon\" data-value=\"deviceCfg.deviceID\"></identicon>\n                  <span class=\"pull-right text-{{deviceClass(deviceCfg)}}\">\n                    <span ng-switch=\"deviceStatus(deviceCfg)\" class=\"remote-devices-panel\">\n                      <span ng-switch-when=\"insync\"><span class=\"hidden-xs\" translate>Up to Date</span><span class=\"visible-xs\" aria-label=\"{{'Up to Date' | translate}}\"><i class=\"fas fa-fw fa-check\"></i></span></span>\n                      <span ng-switch-when=\"unused-insync\"><span class=\"hidden-xs\" translate>Connected (Unused)</span><span class=\"visible-xs\" aria-label=\"{{'Connected (Unused)' | translate}}\"><i class=\"fas fa-fw fa-unlink\"></i></span></span>\n                      <span ng-switch-when=\"syncing\">\n                        <span class=\"hidden-xs\" translate>Syncing</span> ({{completion[deviceCfg.deviceID]._total | percent}}, {{completion[deviceCfg.deviceID]._needBytes | binary}}B)\n                      </span>\n                      <span ng-switch-when=\"paused\"><span class=\"hidden-xs\" translate>Paused</span><span class=\"visible-xs\" aria-label=\"{{'Paused' | translate}}\"><i class=\"fas fa-fw fa-pause\"></i></span></span>\n                      <span ng-switch-when=\"unused-paused\"><span class=\"hidden-xs\" translate>Paused (Unused)</span><span class=\"visible-xs\" aria-label=\"{{'Paused (Unused)' | translate}}\"><i class=\"fas fa-fw fa-unlink\"></i></span></span>\n                      <span ng-switch-when=\"disconnected\"><span class=\"hidden-xs\" translate>Disconnected</span><span class=\"visible-xs\" aria-label=\"{{'Disconnected' | translate}}\"><i class=\"fas fa-fw fa-power-off\"></i></span></span>\n                      <span ng-switch-when=\"disconnected-inactive\"><span class=\"hidden-xs\" translate>Disconnected (Inactive)</span><span class=\"visible-xs\" aria-label=\"{{'Disconnected (Inactive)' | translate}}\"><i class=\"fas fa-fw fa-power-off\"></i></span></span>\n                      <span ng-switch-when=\"unused-disconnected\"><span class=\"hidden-xs\" translate>Disconnected (Unused)</span><span class=\"visible-xs\" aria-label=\"{{'Disconnected (Unused)' | translate}}\"><i class=\"fas fa-fw fa-unlink\"></i></span></span>\n                    </span>\n                    <span class=\"remote-devices-panel\">\n                      <span ng-class=\"rdConnTypeIcon(rdConnType(deviceCfg.deviceID))\" class=\"reception reception-theme\"></span>\n                    </span>\n                  </span>\n                  <div class=\"panel-title-text\">{{deviceName(deviceCfg)}}</div>\n                </h4>\n              </button>\n              <div id=\"device-{{$index}}\" class=\"panel-collapse collapse\">\n                <div class=\"panel-body\">\n                  <table class=\"table table-condensed table-striped table-auto\">\n                    <tbody>\n                      <tr ng-if=\"!connections[deviceCfg.deviceID].connected\">\n                        <th><span class=\"fas fa-fw fa-eye\"></span>&nbsp;<span translate>Last seen</span></th>\n                        <td class=\"text-right\">\n                          <div ng-if=\"!deviceStats[deviceCfg.deviceID].lastSeenDays\" translate>\n                            Never\n                          </div>\n                          <div ng-if=\"deviceStats[deviceCfg.deviceID].lastSeenDays\">\n                            <div>\n                              {{deviceStats[deviceCfg.deviceID].lastSeen | date:\"yyyy-MM-dd HH:mm:ss\"}}\n                            </div>\n                            <div ng-if=\"deviceStats[deviceCfg.deviceID].lastSeenDays >= 7\">\n                              <i ng-if=\"deviceStats[deviceCfg.deviceID].lastSeenDays < 30\" translate>More than a week ago</i>\n                              <i class=\"text-warning\" ng-if=\"deviceStats[deviceCfg.deviceID].lastSeenDays >= 30 && deviceStats[deviceCfg.deviceID].lastSeenDays < 365\" translate>More than a month ago</i>\n                              <i class=\"text-danger\" ng-if=\"deviceStats[deviceCfg.deviceID].lastSeenDays >= 365\" translate>More than a year ago</i>\n                            </div>\n                          </div>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"!connections[deviceCfg.deviceID].connected && deviceFolders(deviceCfg).length > 0\">\n                        <th><span class=\"fas fa-fw fa-cloud\"></span>&nbsp;<span translate>Sync Status</span></th>\n                        <td translate ng-if=\"completion[deviceCfg.deviceID]._total == 100\" class=\"text-right\">Up to Date</td>\n                        <td ng-if=\"completion[deviceCfg.deviceID]._total < 100\" class=\"text-right\">\n                            <span class=\"hidden-xs\" translate>Out of Sync</span> ({{completion[deviceCfg.deviceID]._total | percent}})\n                        </td>\n                      </tr>\n                      <tr ng-if=\"connections[deviceCfg.deviceID].connected\">\n                        <th><span class=\"fas fa-fw fa-cloud-download-alt\"></span>&nbsp;<span translate>Download Rate</span></th>\n                        <td class=\"text-right\">\n                          <a href=\"#\" class=\"toggler\" ng-click=\"toggleUnits()\">\n                            <span ng-if=\"!metricRates\">{{connections[deviceCfg.deviceID].inbps | binary}}B/s</span>\n                            <span ng-if=\"metricRates\">{{connections[deviceCfg.deviceID].inbps*8 | metric}}bps</span>\n                            ({{connections[deviceCfg.deviceID].inBytesTotal | binary}}B)\n                            <small ng-if=\"deviceCfg.maxRecvKbps > 0\"><br/>\n                              <i class=\"text-muted\"><span translate>Limit</span>:\n                                <span ng-if=\"!metricRates\">{{deviceCfg.maxRecvKbps*1024 | binary}}B/s</span>\n                                <span ng-if=\"metricRates\">{{deviceCfg.maxRecvKbps*1024*8 | metric}}bps</span>\n                              </i>\n                            </small>\n                          </a>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"connections[deviceCfg.deviceID].connected\">\n                        <th><span class=\"fas fa-fw fa-cloud-upload-alt\"></span>&nbsp;<span translate>Upload Rate</span></th>\n                        <td class=\"text-right\">\n                          <a href=\"#\" class=\"toggler\" ng-click=\"toggleUnits()\">\n                            <span ng-if=\"!metricRates\">{{connections[deviceCfg.deviceID].outbps | binary}}B/s</span>\n                            <span ng-if=\"metricRates\">{{connections[deviceCfg.deviceID].outbps*8 | metric}}bps</span>\n                            ({{connections[deviceCfg.deviceID].outBytesTotal | binary}}B)\n                            <small ng-if=\"deviceCfg.maxSendKbps > 0\"><br/>\n                              <i class=\"text-muted\"><span translate>Limit</span>:\n                                <span ng-if=\"!metricRates\">{{deviceCfg.maxSendKbps*1024 | binary}}B/s</span>\n                                <span ng-if=\"metricRates\">{{deviceCfg.maxSendKbps*1024*8 | metric}}bps</span>\n                              </i>\n                            </small>\n                          </a>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"completion[deviceCfg.deviceID]._needItems\">\n                        <th><span class=\"fas fa-fw fa-exchange-alt\"></span>&nbsp;<span translate>Out of Sync Items</span></th>\n                        <td class=\"text-right\">\n                          <a href=\"\" ng-click=\"showRemoteNeed(deviceCfg)\">{{completion[deviceCfg.deviceID]._needItems | alwaysNumber | localeNumber}} <span translate>items</span>, ~{{completion[deviceCfg.deviceID]._needBytes | binary}}B</a>\n                        </td>\n                      </tr>\n                      <tr>\n                        <th><span class=\"fas fa-fw fa-link\"></span>&nbsp;<span translate>Address</span></th>\n                        <td ng-if=\"connections[deviceCfg.deviceID].connected\" class=\"text-right\">\n                          <span tooltip data-original-title=\"{{ connections[deviceCfg.deviceID].type.indexOf('Relay') > -1 ? '' : connections[deviceCfg.deviceID].type }} {{ connections[deviceCfg.deviceID].crypto }}\">\n                            {{deviceAddr(deviceCfg)}}\n                          </span>\n                        </td>\n                        <td ng-if=\"!connections[deviceCfg.deviceID].connected\" class=\"text-right\">\n                          <span ng-repeat=\"addr in deviceCfg.addresses\">\n                            <span tooltip data-original-title=\"{{'Configured' | translate}}\">{{addr}}</span><br>\n                            <small ng-if=\"system.lastDialStatus[addr].error\" tooltip data-original-title=\"{{system.lastDialStatus[addr].error}}\" class=\"text-danger\">{{abbreviatedError(addr)}}<br></small>\n                          </span>\n                          <span ng-repeat=\"addr in discoveryCache[deviceCfg.deviceID].addresses\">\n                            <span tooltip data-original-title=\"{{'Discovered' | translate}}\">{{addr}}</span><br>\n                            <small ng-if=\"system.lastDialStatus[addr].error\" tooltip data-original-title=\"{{system.lastDialStatus[addr].error}}\" class=\"text-danger\">{{abbreviatedError(addr)}}<br></small>\n                          </span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"connections[deviceCfg.deviceID].connected\">\n                        <th><span class=\"reception reception-4 reception-theme\"></span>&nbsp;<span translate>Connection Type</span></th>\n                        <td class=\"text-right\">\n                          <span tooltip data-original-title=\"{{rdConnDetails(rdConnType(deviceCfg.deviceID))}}\">\n                            {{rdConnTypeString(rdConnType(deviceCfg.deviceID))}}\n                          </span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"deviceCfg.allowedNetworks.length > 0\">\n                        <th><span class=\"fas fa-fw fa-filter\"></span>&nbsp;<span translate>Allowed Networks</span></th>\n                        <td class=\"text-right\">\n                          <span>{{deviceCfg.allowedNetworks.join(\", \")}}</span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"deviceCfg.compression != 'metadata'\">\n                        <th><span class=\"fas fa-fw fa-compress\"></span>&nbsp;<span translate>Compression</span></th>\n                        <td class=\"text-right\">\n                          <span ng-if=\"deviceCfg.compression == 'always'\" translate>All Data</span>\n                          <span ng-if=\"deviceCfg.compression == 'never'\" translate>Off</span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"deviceCfg.introducer\">\n                        <th><span class=\"far fa-fw fa-thumbs-up\"></span>&nbsp;<span translate>Introducer</span></th>\n                        <td translate class=\"text-right\">Yes</td>\n                      </tr>\n                      <tr ng-if=\"deviceCfg.introducedBy\">\n                        <th><span class=\"far fa-fw fa-handshake-o\"></span>&nbsp;<span translate>Introduced By</span></th>\n                        <td class=\"text-right\">{{ deviceName(devices[deviceCfg.introducedBy]) || deviceCfg.introducedBy.substring(0, 5) }}</td>\n                      </tr>\n                      <tr>\n                        <th><span class=\"fas fa-fw fa-qrcode\"></span>&nbsp;<span translate>Identification</span></th>\n                        <td class=\"text-right\">\n                          <span tooltip data-original-title=\"{{'Click to see full identification string and QR code.' | translate}}\">\n                            <a href=\"\" ng-click=\"showDeviceIdentification(deviceCfg)\">{{deviceShortID(deviceCfg.deviceID)}}</a>\n                          </span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"connections[deviceCfg.deviceID].clientVersion\">\n                        <th><span class=\"fas fa-fw fa-tag\"></span>&nbsp;<span translate>Version</span></th>\n                        <td class=\"text-right\">{{connections[deviceCfg.deviceID].clientVersion}}</td>\n                      </tr>\n                      <tr ng-if=\"deviceFolders(deviceCfg).length > 0\">\n                        <th><span class=\"fas fa-fw fa-folder\"></span>&nbsp;<span translate>Folders</span></th>\n                        <td class=\"text-right no-overflow-ellipse word-break-all\">\n                          <span ng-repeat=\"folderID in deviceFolders(deviceCfg)\">\n                            <span ng-switch=\"completion[deviceCfg.deviceID][folderID].remoteState\">\n                              <span ng-switch-when=\"notSharing\" data-original-title=\"{{'The remote device has not accepted sharing this folder.' | translate}}\" tooltip>{{folderLabel(folderID)}}<sup>1</sup><span ng-if=\"!$last\">,</span></span>\n                              <span ng-switch-when=\"paused\" data-original-title=\"{{'The remote device has paused this folder.' | translate}}\" tooltip>{{folderLabel(folderID)}}<sup>2</sup><span ng-if=\"!$last\">,</span></span>\n                              <span ng-switch-default>{{folderLabel(folderID)}}<span ng-if=\"!$last\">,</span></span>\n                            </span>\n                          </span>\n                        </td>\n                      </tr>\n                      <tr ng-if=\"deviceCfg.remoteGUIPort > 0\">\n                        <th><span class=\"fas fa-fw fa-desktop\"></span>&nbsp;<span translate>Remote GUI</span></th>\n                        <td class=\"text-right\" ng-attr-title=\"Port {{deviceCfg.remoteGUIPort}}\">\n                          <!-- Apply RFC6874 encoding for IPv6 link-local zone identifier -->\n                          <a ng-if=\"hasRemoteGUIAddress(deviceCfg)\" href=\"{{remoteGUIAddress(deviceCfg).replace('%', '%25')}}\">{{remoteGUIAddress(deviceCfg)}}</a>\n                          <span translate ng-if=\"!hasRemoteGUIAddress(deviceCfg)\">Unknown</span>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div class=\"panel-footer\">\n                  <span class=\"pull-right\">\n                    <button ng-if=\"!deviceCfg.paused\" type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"setDevicePause(deviceCfg.deviceID, true)\">\n                      <span class=\"fas fa-pause\"></span>&nbsp;<span translate>Pause</span>\n                    </button>\n                    <button ng-if=\"deviceCfg.paused\" type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"setDevicePause(deviceCfg.deviceID, false)\">\n                      <span class=\"fas fa-play\"></span>&nbsp;<span translate>Resume</span>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"editDeviceExisting(deviceCfg)\">\n                      <span class=\"fas fa-pencil-alt\"></span>&nbsp;<span translate>Edit</span>\n                    </button>\n                  </span>\n                  <div class=\"clearfix\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <span class=\"pull-right\">\n              <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"setAllDevicesPause(true)\" ng-if=\"isAtleastOneDevicePausedStateSetTo(false)\">\n                <span class=\"fas fa-pause\"></span>&nbsp;<span translate>Pause All</span>\n              </button>\n              <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"setAllDevicesPause(false)\" ng-if=\"isAtleastOneDevicePausedStateSetTo(true)\">\n                <span class=\"fas fa-play\"></span>&nbsp;<span translate>Resume All</span>\n              </button>\n              <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"globalChanges()\">\n                <span class=\"fas fa-fw fa-info-circle\"></span>&nbsp;<span translate>Recent Changes</span>\n              </button>\n              <button type=\"button\" class=\"btn btn-sm btn-default\" ng-click=\"addDevice()\">\n                <span class=\"fas fa-plus\"></span>&nbsp;<span translate>Add Remote Device</span>\n              </button>\n            </span>\n            <div class=\"clearfix\"></div>\n          </div>\n        </div>\n      </div> <!-- /row -->\n\n    </div> <!-- /container -->\n  </div> <!-- /ng-cloak -->\n\n  <!-- Bottom bar -->\n\n  <nav class=\"navbar navbar-default navbar-fixed-bottom\">\n    <div class=\"container\">\n      <ul class=\"nav navbar-nav\">\n        <li><a class=\"navbar-link\" href=\"https://syncthing.net/\" target=\"_blank\"><span class=\"fas fa-home\"></span>&nbsp;<span translate>Home page</span></a></li>\n        <li><a class=\"navbar-link\" href=\"{{docsURL()}}\" target=\"_blank\"><span class=\"fas fa-book\"></span>&nbsp;<span translate>Documentation</span></a></li>\n        <li><a class=\"navbar-link\" href=\"https://forum.syncthing.net\" target=\"_blank\"><span class=\"fas fa-question-circle\"></span>&nbsp;<span translate>Support</span></a></li>\n        <li><a class=\"navbar-link\" href=\"https://data.syncthing.net/\" target=\"_blank\"><span class=\"fas fa-bar-chart\"></span>&nbsp;<span translate>Statistics</span></a></li>\n        <li><a class=\"navbar-link\" href=\"https://github.com/syncthing/syncthing/releases\" target=\"_blank\"><span class=\"far fa-file-alt\"></span>&nbsp;<span translate>Changelog</span></a></li>\n        <li><a class=\"navbar-link\" href=\"https://github.com/syncthing/syncthing/issues\" target=\"_blank\"><span class=\"fas fa-bug\"></span>&nbsp;<span translate>Bugs</span></a></li>\n        <li><a class=\"navbar-link\" href=\"https://github.com/syncthing/syncthing\" target=\"_blank\"><span class=\"fas fa-wrench\"></span>&nbsp;<span translate>Source Code</span></a></li>\n        <li><a class=\"navbar-link\" href=\"https://twitter.com/syncthing\" target=\"_blank\"><span class=\"fab fa-twitter\"></span>&nbsp;<span translate>Twitter</span></a></li>\n      </ul>\n    </div>\n  </nav>\n\n  <ng-include src=\"'syncthing/core/networkErrorDialogView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/core/httpErrorDialogView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/core/restartingDialogView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/core/upgradingDialogView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/core/shutdownDialogView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/device/idqrModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/device/editDeviceModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/device/globalChangesModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/folder/editFolderModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/folder/restoreVersionsModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/folder/restoreVersionsConfirmation.html'\"></ng-include>\n  <ng-include src=\"'syncthing/settings/settingsModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/settings/advancedSettingsModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/settings/discardChangesConfirmation.html'\"></ng-include>\n  <ng-include src=\"'syncthing/usagereport/usageReportModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/usagereport/usageReportPreviewModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/transfer/neededFilesModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/transfer/failedFilesModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/transfer/remoteNeededFilesModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/transfer/localChangedFilesModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/core/upgradeModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/core/majorUpgradeModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/core/aboutModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/core/connectivityStatusModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/folder/removeFolderDialogView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/folder/revertOverrideView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/device/removeDeviceDialogView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/core/logViewerModalView.html'\"></ng-include>\n  <ng-include src=\"'syncthing/device/shareDeviceIdDialogView.html'\"></ng-include>\n\n  <!-- vendor scripts -->\n  <script type=\"text/javascript\" src=\"vendor/jquery/jquery-2.2.2.js\"></script>\n  <script type=\"text/javascript\" src=\"vendor/angular/angular.js\"></script>\n  <script type=\"text/javascript\" src=\"vendor/angular/angular-sanitize.js\"></script>\n  <script type=\"text/javascript\" src=\"vendor/angular/angular-translate.js\"></script>\n  <script type=\"text/javascript\" src=\"vendor/angular/angular-translate-loader-static-files.js\"></script>\n  <script type=\"text/javascript\" src=\"vendor/angular/angular-dirPagination.js\"></script>\n  <script type=\"text/javascript\" src=\"vendor/moment/moment.js\"></script>\n  <script type=\"text/javascript\" src=\"vendor/bootstrap/js/bootstrap.js\"></script>\n  <script type=\"text/javascript\" src=\"vendor/daterangepicker/daterangepicker.js\"></script>\n  <script type=\"text/javascript\" src=\"vendor/fancytree/jquery.fancytree-all-deps.js\"></script>\n  <!-- / vendor scripts -->\n\n  <!-- gui application code -->\n  <script type=\"text/javascript\" src=\"syncthing/core/module.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/alwaysNumberFilter.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/basenameFilter.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/binaryFilter.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/localeNumberFilter.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/percentFilter.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/durationFilter.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/eventService.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/identiconDirective.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/languageSelectDirective.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/lastErrorComponentFilter.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/localeService.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/modalDirective.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/metricFilter.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/notificationDirective.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/pathIsSubDirDirective.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/popoverDirective.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/syncthingController.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/tooltipDirective.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/uncamelFilter.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/uniqueFolderDirective.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/core/validDeviceidDirective.js\"></script>\n  <script type=\"text/javascript\" src=\"assets/lang/valid-langs.js\"></script>\n  <script type=\"text/javascript\" src=\"assets/lang/prettyprint.js\"></script>\n  <script type=\"text/javascript\" src=\"meta.js\"></script>\n  <script type=\"text/javascript\" src=\"syncthing/app.js\"></script>\n  <!-- / gui application code -->\n\n</body>\n</html>\n", "<modal id=\"about\" status=\"info\" icon=\"far fa-heart\" heading=\"{{'About' | translate}}\" large=\"yes\" closeable=\"yes\">\n  <div class=\"modal-body\">\n    <h1 class=\"text-center\">\n      <img alt=\"Syncthing\" src=\"assets/img/logo-horizontal.svg\" style=\"max-width: 366px; vertical-align: -16px\" />\n      <br />\n      <small>{{versionString()}}</small>\n      <br />\n      <small><i>\"{{version.codename}}\"</i></small>\n    </h1>\n    <p class=\"text-center\">\n      Build {{version.date | date:\"yyyy-MM-dd\"}}\n      <span ng-if=\"version.tags.length\">({{version.tags.join(\", \")}})</span>\n      <br />\n      Copyright &copy; 2014-{{version.date | date:\"yyyy\"}} the Syncthing Authors.\n    </p>\n    <p class=\"text-center\" translate>Syncthing is Free and Open Source Software licensed as MPL v2.0.</p>\n\n    <ul class=\"nav nav-tabs\">\n      <li class=\"active\"><a data-toggle=\"tab\" href=\"#about-authors\" translate>Authors</a></li>\n      <li><a data-toggle=\"tab\" href=\"#about-includes\" translate>Included Software</a></li>\n      <li><a data-toggle=\"tab\" href=\"#about-paths\" translate>Paths</a></li>\n    </ul>\n    <div class=\"tab-content\">\n\n      <div id=\"about-authors\" class=\"tab-pane in active\">\n        <h4 class=\"text-center\" translate>The Syncthing Authors</h4>\n        <div class=\"row\">\n          <div class=\"col-md-12\" id=\"contributor-list\">\nJakob Borg, Audrius Butkevicius, Jesse Lucas, Simon Frei, Alexander Graf, Alexandre Viau, Anderson Mesquita, Andr\u00e9 Colomb, Antony Male, Ben Schulz, Caleb Callaway, Daniel Harte, Evgeny Kuznetsov, Lars K.W. Gohlke, Lode Hoste, Michael Ploujnikov, Nate Morrison, Philippe Schommers, Ryan Sullivan, Sergey Mishin, Stefan Tatschner, Tomasz Wilczy\u0144ski, Wulf Weich, greatroar, Aaron Bieber, Adam Piggott, Adel Qalieh, Alan Pope, Alberto Donato, Aleksey Vasenev, Alessandro G., Alex Lindeman, Alex Xu, Alexandre Alves, Aman Gupta, Andreas Sommer, Andrew Dunham, Andrew Meyer, Andrew Rabert, Andrey D, Anjan Momi, Anthony Goeckner, Antoine Lamielle, Anur, Aranjedeath, Arkadiusz Tymi\u0144ski, Aroun, Arthur Axel fREW Schmidt, Artur Zubilewicz, Aur\u00e9lien Rainone, BAHADIR YILMAZ, Bart De Vries, Ben Curthoys, Ben Shepherd, Ben Sidhom, Benedikt Heine, Benedikt Morbach, Benjamin Nater, Benno F\u00fcnfst\u00fcck, Benny Ng, Boqin Qin, Boris Rybalkin, Brandon Philips, Brendan Long, Brian R. Becker, Carsten Hagemann, Cathryne Linenweaver, Cedric Staniewski, Chih-Hsuan Yen, Choongkyu, Chris Howie, Chris Joel, Chris Tonkinson, Christian Prescott, Colin Kennedy, Cromefire_, Cyprien Devillez, Dale Visser, Dan, Daniel Barczyk, Daniel Bergmann, Daniel Mart\u00ed, Darshil Chanpura, David Rimmer, Denis A., Dennis Wilson, Devon G. Redekopp, Dimitri Papadopoulos Orfanos, Dmitry Saveliev, Domenic Horner, Dominik Heidler, Elias Jarlebring, Elliot Huffman, Emil Hessman, Eng Zer Jun, Eric Lesiuta, Eric P, Erik Meitner, Evan Spensley, Federico Castagnini, Felix Ableitner, Felix Lampe, Felix Unterpaintner, Francois-Xavier Gsell, Frank Isemann, Gahl Saraf, Gilli Sigurdsson, Gleb Sinyavskiy, Graham Miln, Greg, Han Boetes, HansK-p, Harrison Jones, Heiko Zuerker, Hugo Locurcio, Iain Barnett, Ian Johnson, Ikko Ashimine, Ilya Brin, Iskander Sharipov, Jaakko Hannikainen, Jacek Szafarkiewicz, Jack Croft, Jacob, Jake Peterson, James O'Beirne, James Patterson, Jaroslav Lichtblau, Jaroslav Malec, Jauder Ho, Jaya Chithra, Jaya Kumar, Jeffery To, Jens Diemer, Jerry Jacobs, Jochen Voss, Johan Andersson, Johan Vromans, John Rinehart, Jonas Thelemann, Jonathan, Jonathan Cross, Jonta, Jose Manuel Delicado, J\u00f6rg Thalheim, J\u0119drzej Kula, K.B.Dharun Krishna, Kalle Laine, Karol R\u00f3\u017cycki, Kebin Liu, Keith Turner, Kelong Cong, Ken'ichi Kamada, Kevin Allen, Kevin Bushiri, Kevin White, Jr., Kurt Fitzner, LSmithx2, Lars Lehtonen, Laurent Arnoud, Laurent Etiemble, Leo Arias, Liu Siyuan, Lord Landon Agahnim, Lukas Lihotzki, Majed Abdulaziz, Marc Laporte, Marc Pujol, Marcin Dziadus, Marcus Legendre, Mario Majila, Mark Pulford, Martchus, Mateusz Na\u015bciszewski, Mateusz \u017b, Matic Poto\u010dnik, Matt Burke, Matt Robenolt, Matteo Ruina, Maurizio Tomasi, Max, Max Schulze, MaximAL, Maxime Thirouin, MichaIng, Michael Jephcote, Michael Rienstra, Michael Tilli, Mike Boone, MikeLund, MikolajTwarog, Mingxuan Lin, Naveen, Nicholas Rishel, Nick Busey, Nico Stapelbroek, Nicolas Braud-Santoni, Nicolas Perraut, Niels Peter Roest, Nils Jakobi, NinoM4ster, Nitroretro, NoLooseEnds, Oliver Freyermuth, Otiel, Oyebanji Jacob Mayowa, Pablo, Pascal Jungblut, Paul Brit, Pawel Palenica, Pawe\u0142 Rozlach, Peter Badida, Peter Dave Hello, Peter Hoeg, Peter Marquardt, Phani Rithvij, Phil Davis, Phill Luby, Pier Paolo Ramon, Piotr Bejda, Pramodh KP, Quentin Hibon, Rahmi Pruitt, Richard Hartmann, Robert Carosi, Roberto Santalla, Robin Schoonover, Roman Zaynetdinov, Ross Smith II, Ruslan Yevdokymov, Ryan Qian, Sacheendra Talluri, Scott Klupfel, Shaarad Dalvi, Simon Mwepu, Sly_tom_cat, Stefan Kuntz, Steven Eckhoff, Suhas Gundimeda, Taylor Khan, Thomas Hipp, Tim Abell, Tim Howes, Tobias Klauser, Tobias Nygren, Tobias Tom, Tom Jakubowski, Tommy Thorn, Tully Robinson, Tyler Brazier, Tyler Kropp, Unrud, Veeti Paananen, Victor Buinsky, Vik, Vil Brekin, Vladimir Rusinov, William A. Kennington III, Xavier O., Yannic A., andresvia, andyleap, boomsquared, bt90, chenrui, chucic, cui fliter, derekriemer, desbma, entity0xfe, georgespatton, ghjklw, ignacy123, janost, jaseg, jelle van der Waa, jtagcat, klemens, luzpaz, marco-m, mclang, mv1005, otbutz, overkill, perewa, red_led, rubenbe, sec65, villekalliomaki, wangguoliang, wouter bolsterlee, xarx00, xjtdy888, \u4f5b\u8df3\u5899, \u843d\u5fc3\n          </div>\n        </div>\n      </div>\n\n      <div id=\"about-includes\" class=\"tab-pane\">\n        <p translate>Syncthing includes the following software or portions thereof:</p>\n        <ul class=\"list-unstyled two-columns\" id=\"copyright-notices\">\n          <li><a href=\"http://getbootstrap.com/\">Bootstrap</a>, Copyright &copy; 2011-2016 Twitter, Inc.</li>\n          <li><a href=\"https://angularjs.org/\">AngularJS</a>, Copyright &copy; 2010-2014, 2016 Google, Inc.</li>\n          <li><a href=\"http://www.daterangepicker.com/\">Date Range Picker</a>, Copyright &copy; 2012-2018 Dan Grossman.</li>\n          <li><a href=\"https://github.com/mar10/fancytree\">JQuery Fancytree Plugin</a>, Copyright &copy; 2008-2018 Martin Wendt.</li>\n          <li><a href=\"https://forkaweso.me/Fork-Awesome/\">Fork Awesome</a>, Copyright &copy; 2018 Dave Gandy &amp; Fork Awesome.</li>\n          <li><a href=\"http://jquery.com/\">jQuery JavaScript Library</a>, Copyright &copy; jQuery Foundation and other contributors.</li>\n          <li><a href=\"http://momentjs.com/\">moment.js</a>, Copyright &copy; JS Foundation and other contributors.</li>\n          <li><a href=\"https://prometheus.io/\">Prometheus</a>, Copyright &copy; 2012-2015 The Prometheus Authors.</li>\n          <li><a href=\"https://github.com/AudriusButkevicius/go-nat-pmp\">AudriusButkevicius/go-nat-pmp</a>, Copyright &copy; 2013 John Howard Palevich.</li>\n          <li><a href=\"https://github.com/AudriusButkevicius/recli\">AudriusButkevicius/recli</a>, Copyright &copy; 2019 Audrius Butkevicius.</li>\n          <li><a href=\"https://github.com/beorn7/perks\">beorn7/perks</a>, Copyright &copy; 2013 Blake Mizerany.</li>\n          <li><a href=\"https://github.com/pierrec/lz4\">pierrec/lz4</a>, Copyright &copy; 2015 Pierre Curto.</li>\n          <li><a href=\"https://github.com/calmh/du\">calmh/du</a>, Public domain.</li>\n          <li><a href=\"https://github.com/calmh/xdr\">calmh/xdr</a>, Copyright &copy; 2014 Jakob Borg.</li>\n          <li><a href=\"https://github.com/chmduquesne/rollinghash\">chmduquesne/rollinghash</a>, Copyright &copy; 2015 Christophe-Marie Duquesne.</li>\n          <li><a href=\"https://github.com/d4l3k/messagediff\">d4l3k/messagediff</a>, Copyright &copy; 2015 Tristan Rice.</li>\n          <li><a href=\"https://github.com/flynn-archive/go-shlex\">flynn-archive/go-shlex</a>, Copyright &copy; 2012 Google Inc.</li>\n          <li><a href=\"https://github.com/gobwas/glob\">gobwas/glob</a>, Copyright &copy; 2016 Sergey Kamardin.</li>\n          <li><a href=\"https://github.com/gogo/protobuf\">gogo/protobuf</a>, Copyright &copy; 2013 The GoGo Authors.</li>\n          <li><a href=\"https://github.com/golang/groupcache\">golang/groupcache</a>, Copyright &copy; 2013 Google Inc.</li>\n          <li><a href=\"https://github.com/golang/protobuf\">golang/protobuf</a>, Copyright &copy; 2010 The Go Authors.</li>\n          <li><a href=\"https://github.com/golang/snappy\">golang/snappy</a>, Copyright &copy; 2011 The Snappy-Go Authors.</li>\n          <li><a href=\"https://github.com/jackpal/gateway\">jackpal/gateway</a>, Copyright &copy; 2010 Jack Palevich.</li>\n          <li><a href=\"https://github.com/kballard/go-shellquote\">kballard/go-shellquote</a>, Copyright &copy; 2014 Kevin Ballard.</li>\n          <li><a href=\"https://github.com/lib/pq\">lib/pq</a>, Copyright &copy; 2011-2013, 'pq' Contributors, portions Copyright &copy; 2011 Blake Mizerany.</li>\n          <li><a href=\"https://github.com/mattn/go-isatty\">mattn/go-isatty</a>, Copyright &copy; Yasuhiro MATSUMOTO.</li>\n          <li><a href=\"https://github.com/matttproud/golang_protobuf_extensions\">matttproud/golang_protobuf_extensions</a>, Copyright &copy; 2012 Matt T. Proud.</li>\n          <li><a href=\"https://github.com/minio/sha256-simd\">minio/sha256-simd</a>, Copyright &copy; 2016-2017 Minio, Inc.</li>\n          <li><a href=\"https://github.com/oschwald/geoip2-golang\">oschwald/geoip2-golang</a>, Copyright &copy; 2015, Gregory J. Oschwald.</li>\n          <li><a href=\"https://github.com/oschwald/maxminddb-golang\">oschwald/maxminddb-golang</a>, Copyright &copy; 2015, Gregory J. Oschwald.</li>\n          <li><a href=\"https://github.com/petermattis/goid\">petermattis/goid</a>, Copyright &copy; 2015-2016 Peter Mattis.</li>\n          <li><a href=\"https://github.com/pkg/errors\">pkg/errors</a>, Copyright &copy; 2015, Dave Cheney.</li>\n          <li><a href=\"https://github.com/rcrowley/go-metrics\">rcrowley/go-metrics</a>, Copyright &copy; 2012 Richard Crowley.</li>\n          <li><a href=\"https://github.com/sasha-s/go-deadlock\">sasha-s/go-deadlock</a>, Copyright &copy; 2016 sasha-s.</li>\n          <li><a href=\"https://github.com/syncthing/notify\">syncthing/notify</a>, Copyright &copy; 2014-2015 The Notify Authors.</li>\n          <li><a href=\"https://github.com/syndtr/goleveldb\">syndtr/goleveldb</a>, Copyright &copy; 2012 Suryandaru Triandana.</li>\n          <li><a href=\"https://github.com/thejerf/suture\">thejerf/suture</a>, Copyright &copy; 2014-2015 Barracuda Networks, Inc.</li>\n          <li><a href=\"https://github.com/urfave/cli\">urfave/cli</a>, Copyright &copy; 2016 Jeremy Saenz &amp; Contributors.</li>\n          <li><a href=\"https://github.com/vitrun/qart\">vitrun/qart</a>, Copyright &copy; 2010-2011 The Go Authors.</li>\n          <li><a href=\"https://gopkg.in/asn1-ber.v1\">gopkg.in/asn1-ber.v1</a>, Copyright &copy; 2011-2015 Michael Mitton, portions Copyright &copy; 2015-2016 go-asn1-ber Authors.</li>\n          <li><a href=\"https://gopkg.in/ldap.v2\">gopkg.in/ldap.v2</a>, Copyright &copy; 2011-2015 Michael Mitton, portions Copyright &copy; 2015-2016 go-ldap Authors.</li>\n          <li><a href=\"https://golang.org\">The Go Programming Language</a>, Copyright &copy; 2009 The Go Authors.</li>\n          <li>Font Awesome by Dave Gandy - <a href=\"http://fontawesome.io/\">http://fontawesome.io</a></li>\n        </ul>\n      </div>\n\n      <div id=\"about-paths\" class=\"tab-pane\">\n        <table class=\"table table-striped table-auto\">\n          <caption><label translate>Internally used paths:</label></caption>\n          <tbody>\n            <tr>\n              <th translate>User Home</th>\n              <td><code class=\"word-break-all\">{{ about.paths['baseDir-userHome'] }}</code></td>\n            </tr>\n            <tr>\n              <th><strong translate>Configuration Directory</strong></th>\n              <td><code class=\"word-break-all\"><strong>{{ about.paths['baseDir-config'] }}</strong></code></td>\n            </tr>\n            <tr>\n              <th translate>Configuration File</th>\n              <td><code class=\"word-break-all\">{{ about.paths['config'] }}</code></td>\n            </tr>\n            <tr>\n              <th translate>Device Certificate</th>\n              <td><code class=\"word-break-all\">{{ about.paths['certFile'] }}</code>\n                <br /><code class=\"word-break-all\">{{ about.paths['keyFile'] }}</code></td>\n            </tr>\n            <tr>\n              <th translate>GUI / API HTTPS Certificate</th>\n              <td><code class=\"word-break-all\">{{ about.paths['httpsCertFile'] }}</code>\n                <br /><code class=\"word-break-all\">{{ about.paths['httpsKeyFile'] }}</code></td>\n            </tr>\n            <tr>\n              <th translate>Database Location</th>\n              <td><code class=\"word-break-all\">{{ about.paths['database'] }}</code></td>\n            </tr>\n            <tr>\n              <th translate>Log File</th>\n              <td><code class=\"word-break-all\">{{ about.paths['logFile'] }}</code></td>\n            </tr>\n            <tr>\n              <th translate>GUI Override Directory</th>\n              <td><code class=\"word-break-all\">{{ about.paths['guiAssets'] }}</code></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" data-dismiss=\"modal\">\n      <span class=\"fas fa-times\"></span>&nbsp;<span translate>Close</span>\n    </button>\n  </div>\n</modal>\n", "<div class=\"col-md-6 checkbox\">\n  <label for=\"sharedwith-{{id}}\">\n    <input id=\"sharedwith-{{id}}\" ng-model=\"selected[id]\" type=\"checkbox\" />\n    <span tooltip data-original-title=\"{{id}}\">\n      <span ng-switch=\"remoteState\">\n        <span ng-switch-when=\"notSharing\">{{label}}<sup>1</sup></span>\n        <span ng-switch-when=\"paused\">{{label}}<sup>2</sup></span>\n        <span ng-switch-default>{{label}}</span>\n      </span>\n    </span>\n  </label>\n</div>\n<div class=\"col-md-6\">\n  <div class=\"input-group\">\n    <span class=\"input-group-addon\" ng-switch=\"folderType !== 'receiveencrypted' && !encryptionPasswords[id]\">\n      <span ng-switch-when='true' class=\"fas fa-fw fa-unlock\"></span>\n      <span ng-switch-default class=\"fas fa-fw fa-lock\"></span>\n    </span>\n    <span ng-switch=\"folderType === 'receiveencrypted'\">\n      <span ng-switch-when='true'>\n        <input class=\"form-control input-sm\" type=\"password\" placeholder=\"{{'Received data is already encrypted' | translate}}\" disabled />\n      </span>\n      <span ng-switch-default ng-switch=\"selected[id]\">\n        <span ng-switch-when='true' ng-switch=\"untrusted\">\n          <span ng-switch-when='true' ng-class=\"{'has-error': !encryptionPasswords[id]}\">\n            <input class=\"form-control input-sm\" type=\"{{plain ? 'text' : 'password'}}\" ng-model=\"encryptionPasswords[id]\" required placeholder=\"{{'Device is untrusted, enter encryption password' | translate}}\" />\n          </span>\n          <span ng-switch-default>\n            <input class=\"form-control input-sm\" type=\"{{plain ? 'text' : 'password'}}\" ng-model=\"encryptionPasswords[id]\" placeholder=\"{{'If untrusted, enter encryption password' | translate}}\" />\n          </span>\n        </span>\n        <span ng-switch-default>\n          <input class=\"form-control input-sm\" type=\"password\" placeholder=\"{{'Not shared' | translate}}\" disabled />\n        </span>\n      </span>\n    </span>\n    <span ng-switch=\"selected[id] && folderType !== 'receiveencrypted'\" class=\"input-group-addon\">\n      <span ng-switch-when='true'>\n        <span class=\"button fas fa-fw fa-eye\" ng-click=\"togglePasswordVisibility()\"></span>\n      </span>\n      <span ng-switch-default>\n        <span class=\"button fas fa-fw fa-eye\" disabled></span>\n      </span>\n    </span>\n  </div>\n</div>\n", "angular.module('syncthing.core')\n    .config(function ($locationProvider) {\n        $locationProvider.html5Mode({ enabled: true, requireBase: false }).hashPrefix('!');\n    })\n    .controller('SyncthingController', function ($scope, $http, $location, LocaleService, Events, $filter, $q, $compile, $timeout, $rootScope, $translate) {\n        'use strict';\n\n        // private/helper definitions\n\n        var prevDate = 0;\n        var navigatingAway = false;\n        var online = false;\n        var restarting = false;\n\n        function initController() {\n            LocaleService.autoConfigLocale();\n            setInterval($scope.refresh, 10000);\n            Events.start();\n        }\n\n        // public/scope definitions\n\n        $scope.completion = {};\n        $scope.config = {};\n        $scope.configInSync = true;\n        $scope.connections = {};\n        $scope.errors = [];\n        $scope.model = {};\n        $scope.myID = '';\n        $scope.devices = {};\n        $scope.discoveryCache = {};\n        $scope.protocolChanged = false;\n        $scope.reportData = {};\n        $scope.reportDataPreview = '';\n        $scope.reportPreview = false;\n        $scope.folders = {};\n        $scope.seenError = '';\n        $scope.upgradeInfo = null;\n        $scope.deviceStats = {};\n        $scope.folderStats = {};\n        $scope.pendingDevices = {};\n        $scope.pendingFolders = {};\n        $scope.progress = {};\n        $scope.version = {};\n        $scope.needed = {};\n        $scope.neededFolder = '';\n        $scope.failed = {};\n        $scope.localChanged = {};\n        $scope.scanProgress = {};\n        $scope.themes = [];\n        $scope.globalChangeEvents = {};\n        $scope.metricRates = false;\n        $scope.folderPathErrors = {};\n        $scope.currentSharing = {};\n        $scope.currentFolder = {};\n        $scope.currentDevice = {};\n        $scope.ignores = {\n            text: '',\n            error: null,\n            disabled: false,\n            originalLines: [],\n            defaultLines: [],\n            saved: false,\n        };\n        resetRemoteNeed();\n\n        try {\n            $scope.metricRates = (window.localStorage[\"metricRates\"] == \"true\");\n        } catch (exception) { }\n\n        $scope.versioningDefaults = {\n            selector: \"none\",\n            trashcanClean: 0,\n            cleanupIntervalS: 3600,\n            simpleKeep: 5,\n            staggeredMaxAge: 365,\n            externalCommand: \"\",\n        };\n\n        $scope.localStateTotal = {\n            bytes: 0,\n            directories: 0,\n            files: 0\n        };\n\n        $(window).bind('beforeunload', function () {\n            navigatingAway = true;\n        });\n\n        $scope.$on(\"$locationChangeSuccess\", function () {\n            LocaleService.useLocale($location.search().lang);\n        });\n\n        $scope.needActions = {\n            'rm': 'Del',\n            'rmdir': 'Del (dir)',\n            'sync': 'Sync',\n            'touch': 'Update'\n        };\n        $scope.needIcons = {\n            'rm': 'far fa-fw fa-trash-alt',\n            'rmdir': 'far fa-fw fa-trash-alt',\n            'sync': 'far fa-fw fa-arrow-alt-circle-down',\n            'touch': 'fas fa-fw fa-asterisk'\n        };\n\n        $scope.$on(Events.ONLINE, function () {\n            if (online && !restarting) {\n                return;\n            }\n\n            console.log('UIOnline');\n\n            refreshDeviceStats();\n            refreshFolderStats();\n            refreshGlobalChanges();\n            refreshThemes();\n\n            $q.all([\n                refreshSystem(),\n                refreshDiscoveryCache(),\n                refreshConfig(),\n                refreshCluster(),\n                refreshConnectionStats(),\n            ]).then(function() {\n                $http.get(urlbase + '/system/version').success(function (data) {\n                    console.log(\"version\", data);\n                    if ($scope.version.version && $scope.version.version !== data.version) {\n                        // We already have a version response, but it differs from\n                        // the new one. Reload the full GUI in case it's changed.\n                        document.location.reload(true);\n                    }\n\n                    $scope.version = data;\n                }).error($scope.emitHTTPError);\n\n                $http.get(urlbase + '/svc/report').success(function (data) {\n                    $scope.reportData = data;\n                    if ($scope.system && $scope.config.options.urAccepted > -1 && $scope.config.options.urSeen < $scope.system.urVersionMax && $scope.config.options.urAccepted < $scope.system.urVersionMax) {\n                        // Usage reporting format has changed, prompt the user to re-accept.\n                        $('#ur').modal();\n                    }\n                }).error($scope.emitHTTPError);\n\n                $http.get(urlbase + '/system/upgrade').success(function (data) {\n                    $scope.upgradeInfo = data;\n                }).error(function () {\n                    $scope.upgradeInfo = null;\n                });\n\n                online = true;\n                restarting = false;\n                $('#networkError').modal('hide');\n                $('#restarting').modal('hide');\n                $('#shutdown').modal('hide');\n            }).catch($scope.emitHTTPError);\n        });\n\n        $scope.$on(Events.OFFLINE, function () {\n            if (navigatingAway || !online) {\n                return;\n            }\n\n            console.log('UIOffline');\n            online = false;\n            if (!restarting) {\n                $('#networkError').modal();\n            }\n        });\n\n        $scope.$on('HTTPError', function (event, arg) {\n            // Emitted when a HTTP call fails. We use the status code to try\n            // to figure out what's wrong.\n\n            if (navigatingAway || !online) {\n                return;\n            }\n\n            console.log('HTTPError', arg);\n            online = false;\n            // We sometimes get arg == null from angularjs - no idea why\n            if (!restarting && arg) {\n                if (arg.status === 0) {\n                    // A network error, not an HTTP error\n                    $scope.$emit(Events.OFFLINE);\n                } else if (arg.status >= 400 && arg.status <= 599 && arg.status != 501) {\n                    // A genuine HTTP error. 501/NotImplemented is considered intentional\n                    // and not an error which we need to act upon.\n                    $('#networkError').modal('hide');\n                    $('#restarting').modal('hide');\n                    $('#shutdown').modal('hide');\n                    $('#httpError').modal();\n                }\n            }\n        });\n\n        $scope.$on(Events.STATE_CHANGED, function (event, arg) {\n            var data = arg.data;\n            if ($scope.model[data.folder]) {\n                $scope.model[data.folder].state = data.to;\n                $scope.model[data.folder].error = data.error;\n\n                // If a folder has started scanning, then any scan progress is\n                // also obsolete.\n                if (data.to === 'scanning') {\n                    delete $scope.scanProgress[data.folder];\n                }\n\n                // If a folder finished scanning, then refresh folder stats\n                // to update last scan time.\n                if (data.from === 'scanning' && data.to === 'idle') {\n                    refreshFolderStats();\n                }\n            }\n        });\n\n        $scope.$on(Events.LOCAL_INDEX_UPDATED, function (event, arg) {\n            refreshFolderStats();\n            refreshGlobalChanges();\n        });\n\n        $scope.$on(Events.DEVICE_DISCONNECTED, function (event, arg) {\n            if (!$scope.connections[arg.data.id]) {\n                return;\n            }\n            $scope.connections[arg.data.id].connected = false;\n            refreshDeviceStats();\n        });\n\n        $scope.$on(Events.DEVICE_CONNECTED, function (event, arg) {\n            if (!$scope.connections[arg.data.id]) {\n                $scope.connections[arg.data.id] = {\n                    inbps: 0,\n                    outbps: 0,\n                    inBytesTotal: 0,\n                    outBytesTotal: 0,\n                    type: arg.data.type,\n                    address: arg.data.addr\n                };\n                $scope.completion[arg.data.id] = {\n                    _total: 100,\n                    _needBytes: 0,\n                    _needItems: 0\n                };\n            }\n        });\n\n        $scope.$on(Events.PENDING_DEVICES_CHANGED, function (event, arg) {\n            if (!(arg.data.added || arg.data.removed)) {\n                // Not enough information to update in place, just refresh it completely\n                refreshCluster();\n                return;\n            }\n\n            if (arg.data.added) {\n                arg.data.added.forEach(function (rejected) {\n                    var pendingDevice = {\n                        time: arg.time,\n                        name: rejected.name,\n                        address: rejected.address\n                    };\n                    console.log(\"rejected device:\", rejected.deviceID, pendingDevice);\n                    $scope.pendingDevices[rejected.deviceID] = pendingDevice;\n                });\n            }\n\n            if (arg.data.removed) {\n                arg.data.removed.forEach(function (dev) {\n                    console.log(\"no longer pending device:\", dev.deviceID);\n                    delete $scope.pendingDevices[dev.deviceID];\n                });\n            }\n        });\n\n        $scope.$on(Events.PENDING_FOLDERS_CHANGED, function (event, arg) {\n            if (!(arg.data.added || arg.data.removed)) {\n                // Not enough information to update in place, just refresh it completely\n                refreshCluster();\n                return;\n            }\n\n            if (arg.data.added) {\n                arg.data.added.forEach(function (rejected) {\n                    var offeringDevice = {\n                        time: arg.time,\n                        label: rejected.folderLabel,\n                        receiveEncrypted: rejected.receiveEncrypted,\n                    };\n                    console.log(\"rejected folder\", rejected.folderID, \"from device:\", rejected.deviceID, offeringDevice);\n\n                    var pendingFolder = $scope.pendingFolders[rejected.folderID];\n                    if (pendingFolder === undefined) {\n                        pendingFolder = {\n                            offeredBy: {}\n                        };\n                    }\n                    pendingFolder.offeredBy[rejected.deviceID] = offeringDevice;\n                    $scope.pendingFolders[rejected.folderID] = pendingFolder;\n                });\n            }\n\n            if (arg.data.removed) {\n                arg.data.removed.forEach(function (folderDev) {\n                    console.log(\"no longer pending folder\", folderDev.folderID, \"from device:\", folderDev.deviceID);\n                    if (folderDev.deviceID === undefined) {\n                        delete $scope.pendingFolders[folderDev.folderID];\n                    } else if ($scope.pendingFolders[folderDev.folderID]) {\n                        delete $scope.pendingFolders[folderDev.folderID].offeredBy[folderDev.deviceID];\n                    }\n                });\n            }\n        });\n\n        $scope.$on('ConfigLoaded', function () {\n            if ($scope.config.options.urAccepted === 0) {\n                // If usage reporting has been neither accepted nor declined,\n                // we want to ask the user to make a choice. But we don't want\n                // to bug them during initial setup, so we set a cookie with\n                // the time of the first visit. When that cookie is present\n                // and the time is more than four hours ago, we ask the\n                // question.\n\n                var firstVisit = document.cookie.replace(/(?:(?:^|.*;\\s*)firstVisit\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\");\n                if (!firstVisit) {\n                    document.cookie = \"firstVisit=\" + Date.now() + \";max-age=\" + 30 * 24 * 3600;\n                } else {\n                    if (+firstVisit < Date.now() - 4 * 3600 * 1000) {\n                        $('#ur').modal();\n                    }\n                }\n            }\n        });\n\n        $scope.$on(Events.CONFIG_SAVED, function (event, arg) {\n            updateLocalConfig(arg.data);\n\n            $http.get(urlbase + '/config/insync').success(function (data) {\n                $scope.configInSync = data.configInSync;\n            }).error($scope.emitHTTPError);\n        });\n\n        $scope.$on(Events.DOWNLOAD_PROGRESS, function (event, arg) {\n            var stats = arg.data;\n            var progress = {};\n            for (var folder in stats) {\n                progress[folder] = {};\n                for (var file in stats[folder]) {\n                    var s = stats[folder][file];\n                    var reused = 100 * s.reused / s.total;\n                    var copiedFromOrigin = 100 * s.copiedFromOrigin / s.total;\n                    var copiedFromElsewhere = 100 * s.copiedFromElsewhere / s.total;\n                    var pulled = 100 * s.pulled / s.total;\n                    var pulling = 100 * s.pulling / s.total;\n                    // We try to round up pulling to at least a percent so that it would be at least a bit visible.\n                    if (pulling < 1 && pulled + copiedFromElsewhere + copiedFromOrigin + reused <= 99) {\n                        pulling = 1;\n                    }\n                    progress[folder][file] = {\n                        reused: reused,\n                        copiedFromOrigin: copiedFromOrigin,\n                        copiedFromElsewhere: copiedFromElsewhere,\n                        pulled: pulled,\n                        pulling: pulling,\n                        bytesTotal: s.bytesTotal,\n                        bytesDone: s.bytesDone,\n                    };\n                }\n            }\n            for (var folder in $scope.progress) {\n                if (!(folder in progress)) {\n                    if ($scope.neededFolder === folder) {\n                        $scope.refreshNeed($scope.needed.page, $scope.needed.perpage);\n                    }\n                } else if ($scope.neededFolder === folder) {\n                    for (file in $scope.progress[folder]) {\n                        if (!(file in progress[folder])) {\n                            $scope.refreshNeed($scope.needed.page, $scope.needed.perpage);\n                            break;\n                        }\n                    }\n                }\n            }\n            $scope.progress = progress;\n            console.log(\"DownloadProgress\", $scope.progress);\n        });\n\n        $scope.$on(Events.FOLDER_SUMMARY, function (event, arg) {\n            var data = arg.data;\n            $scope.model[data.folder] = data.summary;\n            recalcLocalStateTotal();\n        });\n\n        $scope.$on(Events.FOLDER_COMPLETION, function (event, arg) {\n            var data = arg.data;\n            if (!$scope.completion[data.device]) {\n                $scope.completion[data.device] = {};\n            }\n            $scope.completion[data.device][data.folder] = data;\n            recalcCompletion(data.device);\n        });\n\n        $scope.$on(Events.FOLDER_ERRORS, function (event, arg) {\n            if (!$scope.model[arg.data.folder]) {\n                console.log(\"Dropping folder errors event for unknown folder\", arg.data.folder)\n                return;\n            }\n            $scope.model[arg.data.folder].errors = arg.data.errors.length;\n        });\n\n        $scope.$on(Events.FOLDER_SCAN_PROGRESS, function (event, arg) {\n            var data = arg.data;\n            $scope.scanProgress[data.folder] = {\n                current: data.current,\n                total: data.total,\n                rate: data.rate\n            };\n            console.log(\"FolderScanProgress\", data);\n        });\n\n        // May be called through .error with the presented arguments, or through\n        // .catch with the http response object containing the same arguments.\n        $scope.emitHTTPError = function (data, status, headers, config) {\n            var out = data;\n            if (data && !data.data) {\n                out = { data: data, status: status, headers: headers, config: config };\n            }\n            $scope.$emit('HTTPError', out);\n        };\n\n        var debouncedFuncs = {};\n\n        function refreshFolder(folder) {\n            if ($scope.folders[folder].paused) {\n                return;\n            }\n            var key = \"refreshFolder\" + folder;\n            if (!debouncedFuncs[key]) {\n                debouncedFuncs[key] = debounce(function () {\n                    $http.get(urlbase + '/db/status?folder=' + encodeURIComponent(folder)).success(function (data) {\n                        $scope.model[folder] = data;\n                        recalcLocalStateTotal();\n                        console.log(\"refreshFolder\", folder, data);\n                    }).error($scope.emitHTTPError);\n                }, 1000);\n            }\n            debouncedFuncs[key]();\n        }\n\n        function updateLocalConfig(config) {\n            var hasConfig = !isEmptyObject($scope.config);\n\n            $scope.config = config;\n            $scope.config.options._listenAddressesStr = $scope.config.options.listenAddresses.join(', ');\n            $scope.config.options._globalAnnounceServersStr = $scope.config.options.globalAnnounceServers.join(', ');\n            $scope.config.options._urAcceptedStr = \"\" + $scope.config.options.urAccepted;\n\n            $scope.devices = deviceMap($scope.config.devices);\n            for (var id in $scope.devices) {\n                $scope.completion[id] = {\n                    _total: 100,\n                    _needBytes: 0,\n                    _needItems: 0\n                };\n            };\n            $scope.folders = folderMap($scope.config.folders);\n            Object.keys($scope.folders).forEach(function (folder) {\n                refreshFolder(folder);\n                $scope.folders[folder].devices.forEach(function (deviceCfg) {\n                    refreshCompletion(deviceCfg.deviceID, folder);\n                });\n            });\n\n            refreshNoAuthWarning();\n            setDefaultTheme();\n\n            if (!hasConfig) {\n                $scope.$emit('ConfigLoaded');\n            }\n        }\n\n        function refreshSystem() {\n            return $http.get(urlbase + '/system/status').success(function (data) {\n                $scope.myID = data.myID;\n                $scope.system = data;\n\n                if ($scope.reportDataPreviewVersion === '') {\n                    $scope.reportDataPreviewVersion = $scope.system.urVersionMax;\n                }\n\n                var listenersFailed = [];\n                var listenersRunning = [];\n                for (var address in data.connectionServiceStatus) {\n                    if (data.connectionServiceStatus[address].error) {\n                        listenersFailed.push(address + \": \" + data.connectionServiceStatus[address].error);\n                    } else {\n                        listenersRunning.push(address);\n                    }\n                }\n                $scope.listenersFailed = listenersFailed;\n                $scope.listenersRunning = listenersRunning;\n                $scope.listenersTotal = $scope.sizeOf(data.connectionServiceStatus);\n\n                var discoveryFailed = [];\n                var discoveryRunning = [];\n                for (var disco in data.discoveryStatus) {\n                    if (data.discoveryStatus[disco] && data.discoveryStatus[disco].error) {\n                        discoveryFailed.push(disco + \": \" + data.discoveryStatus[disco].error);\n                    } else {\n                        discoveryRunning.push(disco);\n                    }\n                }\n                $scope.discoveryFailed = discoveryFailed;\n                $scope.discoveryRunning = discoveryRunning;\n                $scope.discoveryTotal = $scope.sizeOf(data.discoveryStatus);\n\n                refreshNoAuthWarning();\n\n                console.log(\"refreshSystem\", data);\n            }).error($scope.emitHTTPError);\n        }\n\n        function refreshNoAuthWarning() {\n            if (!$scope.system || !$scope.config || !$scope.config.gui) {\n                // We need all to be able to determine the state.\n                return\n            }\n\n            // If we're not listening on localhost, and there is no\n            // authentication configured, and the magic setting to silence the\n            // warning isn't set, then yell at the user.\n            var addr = $scope.system.guiAddressUsed;\n            var guiCfg = $scope.config.gui;\n            $scope.openNoAuth = addr.substr(0, 4) !== \"127.\"\n                && addr.substr(0, 6) !== \"[::1]:\"\n                && addr.substr(0, 1) !== \"/\"\n                && (!guiCfg.user || !guiCfg.password)\n                && guiCfg.authMode !== 'ldap'\n                && !guiCfg.insecureAdminAccess;\n\n            if ((guiCfg.user && guiCfg.password) || guiCfg.authMode === 'ldap') {\n                $scope.dismissNotification('authenticationUserAndPassword');\n            }\n        }\n\n        function refreshCluster() {\n            return $q.all([\n                $http.get(urlbase + '/cluster/pending/devices').success(function (data) {\n                    $scope.pendingDevices = data;\n                    console.log(\"refreshCluster devices\", data);\n                }).error($scope.emitHTTPError),\n                $http.get(urlbase + '/cluster/pending/folders').success(function (data) {\n                    $scope.pendingFolders = data;\n                    console.log(\"refreshCluster folders\", data);\n                }).error($scope.emitHTTPError),\n            ]);\n        }\n\n        function refreshDiscoveryCache() {\n            return $http.get(urlbase + '/system/discovery').success(function (data) {\n                for (var device in data) {\n                    for (var i = 0; i < data[device].addresses.length; i++) {\n                        // Relay addresses are URLs with\n                        // .../?foo=barlongstuff that we strip away here. We\n                        // remove the final slash as well for symmetry with\n                        // tcp://192.0.2.42:1234 type addresses.\n                        data[device].addresses[i] = data[device].addresses[i].replace(/\\/\\?.*/, '');\n                    }\n                }\n                $scope.discoveryCache = data;\n                console.log(\"refreshDiscoveryCache\", data);\n            }).error($scope.emitHTTPError);\n        }\n\n        function recalcLocalStateTotal() {\n            $scope.localStateTotal = {\n                bytes: 0,\n                directories: 0,\n                files: 0\n            };\n\n            for (var f in $scope.model) {\n                $scope.localStateTotal.bytes += $scope.model[f].localBytes;\n                $scope.localStateTotal.files += $scope.model[f].localFiles;\n                $scope.localStateTotal.directories += $scope.model[f].localDirectories;\n            }\n        }\n\n        function recalcCompletion(device) {\n            var total = 0, needed = 0, deletes = 0, items = 0;\n            for (var folder in $scope.completion[device]) {\n                if (folder === \"_total\" || folder === '_needBytes' || folder === '_needItems') {\n                    continue;\n                }\n                total += $scope.completion[device][folder].globalBytes;\n                needed += $scope.completion[device][folder].needBytes;\n                items += $scope.completion[device][folder].needItems;\n                deletes += $scope.completion[device][folder].needDeletes;\n            }\n            if (total == 0) {\n                $scope.completion[device]._total = 100;\n                $scope.completion[device]._needBytes = 0;\n                $scope.completion[device]._needItems = 0;\n            } else {\n                $scope.completion[device]._total = Math.floor(100 * (1 - needed / total));\n                $scope.completion[device]._needBytes = needed;\n                $scope.completion[device]._needItems = items + deletes;\n            }\n\n            if (needed == 0 && deletes + items > 0 ) {\n                // We don't need any data, but we have deletes or\n                // dirs/links/empty files that we need to do. Drop down the\n                // completion percentage to indicate that we have stuff to do.\n                $scope.completion[device]._total = 95;\n            }\n\n            console.log(\"recalcCompletion\", device, $scope.completion[device]);\n        }\n\n        function refreshCompletion(device, folder) {\n            if (device === $scope.myID) {\n                return;\n            }\n\n            $http.get(urlbase + '/db/completion?device=' + device + '&folder=' + encodeURIComponent(folder)).success(function (data) {\n                if (!$scope.completion[device]) {\n                    $scope.completion[device] = {};\n                }\n                $scope.completion[device][folder] = data;\n                recalcCompletion(device);\n            }).error(function (data, status, headers, config) {\n                if (status === 404) {\n                    console.log(\"refreshCompletion:\", data);\n                } else {\n                    $scope.emitHTTPError(data, status, headers, config);\n                }\n            });\n        }\n\n        function refreshConnectionStats() {\n            return $http.get(urlbase + '/system/connections').success(function (data) {\n                var now = Date.now(),\n                    td = (now - prevDate) / 1000,\n                    id;\n\n                prevDate = now;\n\n                try {\n                    data.total.inbps = Math.max(0, (data.total.inBytesTotal - $scope.connectionsTotal.inBytesTotal) / td);\n                    data.total.outbps = Math.max(0, (data.total.outBytesTotal - $scope.connectionsTotal.outBytesTotal) / td);\n                } catch (e) {\n                    data.total.inbps = 0;\n                    data.total.outbps = 0;\n                }\n                $scope.connectionsTotal = data.total;\n\n                data = data.connections;\n                for (id in data) {\n                    if (!data.hasOwnProperty(id)) {\n                        continue;\n                    }\n                    try {\n                        data[id].inbps = Math.max(0, (data[id].inBytesTotal - $scope.connections[id].inBytesTotal) / td);\n                        data[id].outbps = Math.max(0, (data[id].outBytesTotal - $scope.connections[id].outBytesTotal) / td);\n                    } catch (e) {\n                        data[id].inbps = 0;\n                        data[id].outbps = 0;\n                    }\n                }\n                $scope.connections = data;\n                console.log(\"refreshConnections\", data);\n            }).error($scope.emitHTTPError);\n        }\n\n        function refreshErrors() {\n            $http.get(urlbase + '/system/error').success(function (data) {\n                $scope.errors = data.errors;\n                console.log(\"refreshErrors\", data);\n            }).error($scope.emitHTTPError);\n        }\n\n        function refreshConfig() {\n            return $q.all([\n                $http.get(urlbase + '/config').success(function (data) {\n                    updateLocalConfig(data);\n                    console.log(\"refreshConfig\", data);\n                }),\n                $http.get(urlbase + '/config/insync').success(function (data) {\n                    $scope.configInSync = data.configInSync;\n                }),\n            ]);\n        }\n\n        $scope.refreshNeed = function (page, perpage) {\n            if (!$scope.neededFolder) {\n                return;\n            }\n            var url = urlbase + \"/db/need?folder=\" + encodeURIComponent($scope.neededFolder);\n            url += \"&page=\" + page;\n            url += \"&perpage=\" + perpage;\n            $http.get(url).success(function (data) {\n                console.log(\"refreshNeed\", $scope.neededFolder, data);\n                parseNeeded(data);\n            }).error($scope.emitHTTPError);\n        };\n\n        function needAction(file) {\n            var fDelete = 4096;\n            var fDirectory = 16384;\n\n            if ((file.flags & (fDelete + fDirectory)) === fDelete + fDirectory) {\n                return 'rmdir';\n            } else if ((file.flags & fDelete) === fDelete) {\n                return 'rm';\n            } else if ((file.flags & fDirectory) === fDirectory) {\n                return 'touch';\n            } else {\n                return 'sync';\n            }\n        }\n\n        function parseNeeded(data) {\n            $scope.needed = data;\n            var merged = [];\n            data.progress.forEach(function (item) {\n                item.type = \"progress\";\n                item.action = needAction(item);\n                merged.push(item);\n            });\n            data.queued.forEach(function (item) {\n                item.type = \"queued\";\n                item.action = needAction(item);\n                merged.push(item);\n            });\n            data.rest.forEach(function (item) {\n                item.type = \"rest\";\n                item.action = needAction(item);\n                merged.push(item);\n            });\n            $scope.needed.items = merged;\n        }\n\n        function pathJoin(base, name) {\n            base = expandTilde(base);\n            if (base[base.length - 1] !== $scope.system.pathSeparator) {\n                return base + $scope.system.pathSeparator + name;\n            }\n            return base + name;\n        }\n\n        function expandTilde(path) {\n            if (path && path.trim().charAt(0) === '~') {\n                return $scope.system.tilde + path.trim().substring(1);\n            }\n            return path;\n        }\n\n        function shouldSetDefaultFolderPath() {\n            return $scope.config.defaults.folder.path && $scope.folderEditor.folderPath.$pristine && $scope.editingFolderNew();\n        }\n\n        function resetRemoteNeed() {\n            $scope.remoteNeed = {};\n            $scope.remoteNeedFolders = [];\n            $scope.remoteNeedDevice = undefined;\n        }\n\n        function setDefaultTheme() {\n            if (!document.getElementById(\"fallback-theme-css\")) {\n\n                // check if no support for prefers-color-scheme\n                var colorSchemeNotSupported = typeof window.matchMedia === \"undefined\" || window.matchMedia('(prefers-color-scheme: dark)').media === 'not all';\n\n                if ($scope.config.gui.theme === \"default\" && colorSchemeNotSupported) {\n                    document.documentElement.style.display = 'none';\n                    document.head.insertAdjacentHTML(\n                        'beforeend',\n                        '<link id=\"fallback-theme-css\" rel=\"stylesheet\" href=\"theme-assets/light/assets/css/theme.css\" onload=\"document.documentElement.style.display = \\'\\'\">'\n                    );\n                }\n            }\n        }\n\n        function saveIgnores(ignores) {\n            return $http.post(urlbase + '/db/ignores?folder=' + encodeURIComponent($scope.currentFolder.id), {\n                ignore: ignores\n            });\n        };\n\n        function initShareEditing(editing) {\n            $scope.currentSharing = {};\n            $scope.currentSharing.editing = editing;\n            $scope.currentSharing.shared = [];\n            $scope.currentSharing.unrelated = [];\n            $scope.currentSharing.selected = {};\n            $scope.currentSharing.encryptionPasswords = {};\n            if (editing === 'folder') {\n                initShareEditingFolder();\n            }\n        };\n\n        function initShareEditingFolder() {\n            $scope.currentFolder.devices.forEach(function (n) {\n                if (n.deviceID !== $scope.myID) {\n                    $scope.currentSharing.shared.push($scope.devices[n.deviceID]);\n                }\n                if (n.encryptionPassword !== '') {\n                    $scope.currentSharing.encryptionPasswords[n.deviceID] = n.encryptionPassword;\n                }\n                $scope.currentSharing.selected[n.deviceID] = true;\n            });\n            $scope.currentSharing.shared.sort(deviceCompare);\n            $scope.currentSharing.unrelated = $scope.deviceList().filter(function (n) {\n                return n.deviceID !== $scope.myID && !$scope.currentSharing.selected[n.deviceID];\n            });\n        }\n\n        $scope.pendingIsRemoteEncrypted = function (folderID, deviceID) {\n            var pending = $scope.pendingFolders[folderID];\n            if (!pending || !pending.offeredBy || !pending.offeredBy[deviceID]) {\n                return false;\n            }\n            return pending.offeredBy[deviceID].remoteEncrypted;\n        };\n\n        $scope.refreshFailed = function (page, perpage) {\n            if (!$scope.failed || !$scope.failed.folder) {\n                return;\n            }\n            var url = urlbase + '/folder/errors?folder=' + encodeURIComponent($scope.failed.folder);\n            url += \"&page=\" + page + \"&perpage=\" + perpage;\n            $http.get(url).success(function (data) {\n                $scope.failed = data;\n            }).error($scope.emitHTTPError);\n        };\n\n        $scope.refreshRemoteNeed = function (folder, page, perpage) {\n            if (!$scope.remoteNeedDevice) {\n                return;\n            }\n            var url = urlbase + '/db/remoteneed?device=' + $scope.remoteNeedDevice.deviceID;\n            url += '&folder=' + encodeURIComponent(folder);\n            url += \"&page=\" + page + \"&perpage=\" + perpage;\n            $http.get(url).success(function (data) {\n                $scope.remoteNeed[folder] = data;\n            }).error(function (err) {\n                $scope.remoteNeed[folder] = undefined;\n                $scope.emitHTTPError(err);\n            });\n        };\n\n        $scope.refreshLocalChanged = function (page, perpage) {\n            if (!$scope.localChangedFolder) {\n                return;\n            }\n            var url = urlbase + '/db/localchanged?folder=';\n            url += encodeURIComponent($scope.localChangedFolder);\n            url += \"&page=\" + page + \"&perpage=\" + perpage;\n            $http.get(url).success(function (data) {\n                $scope.localChanged = data;\n            }).error($scope.emitHTTPError);\n        };\n\n        var refreshDeviceStats = debounce(function () {\n            $http.get(urlbase + \"/stats/device\").success(function (data) {\n                $scope.deviceStats = data;\n                for (var device in $scope.deviceStats) {\n                    $scope.deviceStats[device].lastSeen = new Date($scope.deviceStats[device].lastSeen);\n                    if ($scope.deviceStats[device].lastSeen.toISOString() !== '1970-01-01T00:00:00.000Z') {\n                        $scope.deviceStats[device].lastSeenDays = (new Date() - $scope.deviceStats[device].lastSeen) / 1000 / 86400;\n                    }\n                }\n                console.log(\"refreshDeviceStats\", data);\n            }).error($scope.emitHTTPError);\n        }, 2500);\n\n        var refreshFolderStats = debounce(function () {\n            $http.get(urlbase + \"/stats/folder\").success(function (data) {\n                $scope.folderStats = data;\n                for (var folder in $scope.folderStats) {\n                    if ($scope.folderStats[folder].lastFile) {\n                        $scope.folderStats[folder].lastFile.at = new Date($scope.folderStats[folder].lastFile.at);\n                    }\n\n                    $scope.folderStats[folder].lastScan = new Date($scope.folderStats[folder].lastScan);\n                    $scope.folderStats[folder].lastScanDays = (new Date() - $scope.folderStats[folder].lastScan) / 1000 / 86400;\n                }\n                console.log(\"refreshfolderStats\", data);\n            }).error($scope.emitHTTPError);\n        }, 2500);\n\n        var refreshThemes = debounce(function () {\n            $http.get(\"themes.json\").success(function (data) { // no urlbase here as this is served by the asset handler\n                $scope.themes = data.themes;\n            }).error($scope.emitHTTPError);\n        }, 2500);\n\n        var refreshGlobalChanges = debounce(function () {\n            $http.get(urlbase + \"/events/disk?limit=25\").success(function (data) {\n                if (!data) {\n                    // For reasons unknown this is called with data being the empty\n                    // string on shutdown, causing an error on .reverse().\n                    return;\n                }\n                data = data.reverse();\n                $scope.globalChangeEvents = data;\n                console.log(\"refreshGlobalChanges\", data);\n            }).error($scope.emitHTTPError);\n        }, 2500);\n\n        $scope.refresh = function () {\n            refreshSystem();\n            refreshDiscoveryCache();\n            refreshConnectionStats();\n            refreshErrors();\n        };\n\n        $scope.folderStatus = function (folderCfg) {\n            if (folderCfg.paused) {\n                return 'paused';\n            }\n\n            var folderInfo = $scope.model[folderCfg.id];\n\n            // after restart syncthing process state may be empty\n            if (typeof folderInfo === 'undefined' || !folderInfo.state) {\n                return 'unknown';\n            }\n\n            var state = '' + folderInfo.state;\n            if (state === 'error') {\n                return 'stopped'; // legacy, the state is called \"stopped\" in the GUI\n            }\n\n            if (state !== 'idle') {\n                return state;\n            }\n\n            if (folderInfo.needTotalItems > 0) {\n                return 'outofsync';\n            }\n            if ($scope.hasFailedFiles(folderCfg.id)) {\n                return 'faileditems';\n            }\n            if ($scope.hasReceiveOnlyChanged(folderCfg)) {\n                if (folderCfg.type === \"receiveonly\") {\n                    return 'localadditions';\n                }\n                return 'localunencrypted';\n            }\n            if (folderCfg.devices.length <= 1) {\n                return 'unshared';\n            }\n\n            return state;\n        };\n\n        $scope.folderClass = function (folderCfg) {\n            var status = $scope.folderStatus(folderCfg);\n\n            if (status === 'idle' || status === 'localadditions') {\n                return 'success';\n            }\n            if (status == 'paused') {\n                return 'default';\n            }\n            if (status === 'syncing' || status === 'sync-preparing' || status === 'scanning' || status === 'cleaning') {\n                return 'primary';\n            }\n            if (status === 'unknown') {\n                return 'info';\n            }\n            if (status === 'stopped' || status === 'outofsync' || status === 'error' || status === 'faileditems' || status === 'localunencrypted') {\n                return 'danger';\n            }\n            if (status === 'unshared' || status === 'scan-waiting' || status === 'sync-waiting' || status === 'clean-waiting') {\n                return 'warning';\n            }\n\n            return 'info';\n        };\n\n        $scope.syncPercentage = function (folder) {\n            if (typeof $scope.model[folder] === 'undefined') {\n                return 100;\n            }\n            if ($scope.model[folder].needTotalItems === 0) {\n                return 100;\n            }\n            if (($scope.model[folder].needBytes == 0 && $scope.model[folder].needDeletes > 0) || $scope.model[folder].globalBytes == 0) {\n                // We don't need any data, but we have deletes that we need\n                // to do. Drop down the completion percentage to indicate\n                // that we have stuff to do.\n                // Do the same thing in case we only have zero byte files to sync.\n                return 95;\n            }\n            var pct = 100 * $scope.model[folder].inSyncBytes / $scope.model[folder].globalBytes;\n            return Math.floor(pct);\n        };\n\n        $scope.scanPercentage = function (folder) {\n            if (!$scope.scanProgress[folder]) {\n                return undefined;\n            }\n            var pct = 100 * $scope.scanProgress[folder].current / $scope.scanProgress[folder].total;\n            return Math.floor(pct);\n        };\n\n        $scope.scanRate = function (folder) {\n            if (!$scope.scanProgress[folder]) {\n                return 0;\n            }\n            return $scope.scanProgress[folder].rate;\n        };\n\n        $scope.scanRemaining = function (folder) {\n            // Formats the remaining scan time as a string. Includes days and\n            // hours only when relevant, resulting in time stamps like:\n            // 00m 40s\n            // 32m 40s\n            // 2h 32m\n            // 4d 2h\n            // In case remaining scan time appears to be >31d, omit the\n            // details, i.e.:\n            // > 1 month\n\n            if (!$scope.scanProgress[folder]) {\n                return \"\";\n            }\n            // Calculate remaining bytes and seconds based on our current\n            // rate.\n\n            var remainingBytes = $scope.scanProgress[folder].total - $scope.scanProgress[folder].current;\n            var seconds = remainingBytes / $scope.scanProgress[folder].rate;\n            // Round up to closest ten seconds to avoid flapping too much to\n            // and fro.\n\n            seconds = Math.ceil(seconds / 10) * 10;\n\n            // Separate out the number of days.\n            var days = 0;\n            var res = [];\n            if (seconds >= 86400) {\n                days = Math.floor(seconds / 86400);\n                if (days > 31) {\n                    return '> 1 month';\n                }\n                res.push('' + days + 'd');\n                seconds = seconds % 86400;\n            }\n\n            // Separate out the number of hours.\n            var hours = 0;\n            if (seconds > 3600) {\n                hours = Math.floor(seconds / 3600);\n                res.push('' + hours + 'h');\n                seconds = seconds % 3600;\n            }\n\n            var d = new Date(1970, 0, 1).setSeconds(seconds);\n\n            if (days === 0) {\n                // Format minutes only if we're within a day of completion.\n                var f = $filter('date')(d, \"m'm'\");\n                res.push(f);\n            }\n\n            if (days === 0 && hours === 0) {\n                // Format seconds only when we're within an hour of completion.\n                var f = $filter('date')(d, \"ss's'\");\n                res.push(f);\n            }\n\n            return res.join(' ');\n        };\n\n        $scope.deviceStatus = function (deviceCfg) {\n            var status = '';\n            var unused = $scope.deviceFolders(deviceCfg).length === 0;\n\n            if (unused) {\n                status = 'unused-';\n            }\n\n            if (typeof $scope.connections[deviceCfg.deviceID] === 'undefined') {\n                return 'unknown';\n            }\n\n            if (deviceCfg.paused) {\n                return status + 'paused';\n            }\n\n            if ($scope.connections[deviceCfg.deviceID].connected) {\n                if ($scope.completion[deviceCfg.deviceID] && $scope.completion[deviceCfg.deviceID]._total === 100) {\n                    return status + 'insync';\n                } else {\n                    return 'syncing';\n                }\n            }\n\n            // Disconnected\n            if (!unused && $scope.deviceStats[deviceCfg.deviceID].lastSeenDays && $scope.deviceStats[deviceCfg.deviceID].lastSeenDays >= 7) {\n                return status + 'disconnected-inactive';\n            } else {\n                return status + 'disconnected';\n            }\n        };\n\n        $scope.deviceClass = function (deviceCfg) {\n            if (typeof $scope.connections[deviceCfg.deviceID] === 'undefined') {\n                return 'info';\n            }\n\n            if (deviceCfg.paused) {\n                return 'default';\n            }\n\n            if ($scope.connections[deviceCfg.deviceID].connected) {\n                if ($scope.completion[deviceCfg.deviceID] && $scope.completion[deviceCfg.deviceID]._total === 100) {\n                    return 'success';\n                } else {\n                    return 'primary';\n                }\n            }\n\n            // Disconnected\n            return 'info';\n        };\n\n        $scope.syncthingStatus = function () {\n            var syncCount = 0;\n            var notifyCount = 0;\n            var pauseCount = 0;\n\n            // loop through all folders\n            var folderListCache = $scope.folderList();\n            for (var i = 0; i < folderListCache.length; i++) {\n                var status = $scope.folderStatus(folderListCache[i]);\n                switch (status) {\n                    case 'sync-preparing':\n                    case 'syncing':\n                        syncCount++;\n                        break;\n                    case 'stopped':\n                    case 'unknown':\n                    case 'outofsync':\n                    case 'error':\n                        notifyCount++;\n                        break;\n                }\n            }\n\n            // loop through all devices\n            var deviceCount = 0;\n            for (var id in $scope.devices) {\n                var status = $scope.deviceStatus({\n                    deviceID: id\n                });\n                switch (status) {\n                    case 'unknown':\n                        notifyCount++;\n                        break;\n                    case 'paused':\n                        pauseCount++;\n                        break;\n                    case 'unused':\n                        deviceCount--;\n                        break;\n                }\n                deviceCount++;\n            }\n\n            // enumerate notifications\n            if ($scope.openNoAuth || !$scope.configInSync || $scope.errorList().length > 0 || !online || Object.keys($scope.pendingDevices).length > 0 || Object.keys($scope.pendingFolders).length > 0) {\n                notifyCount++;\n            }\n\n            // at least one folder is syncing\n            if (syncCount > 0) {\n                return 'sync';\n            }\n\n            // a device is unknown or a folder is stopped/unknown/outofsync/error or some other notification is open or gui offline\n            if (notifyCount > 0) {\n                return 'notify';\n            }\n\n            // all used devices are paused except (this) one\n            if (pauseCount === deviceCount - 1) {\n                return 'pause';\n            }\n\n            return 'default';\n        };\n\n        $scope.deviceAddr = function (deviceCfg) {\n            var conn = $scope.connections[deviceCfg.deviceID];\n            if (conn && conn.connected) {\n                return conn.address;\n            }\n            return '?';\n        };\n\n        $scope.rdConnType = function (deviceID) {\n            var conn = $scope.connections[deviceID];\n            if (!conn) return \"-1\";\n            var type = \"disconnected\";\n            if (conn.type.indexOf('relay') === 0) type = \"relay\";\n            else if (conn.type.indexOf('quic') === 0) type = \"quic\";\n            else if (conn.type.indexOf('tcp') === 0) type = \"tcp\";\n            else return type;\n\n            if (conn.isLocal) type += \"lan\";\n            else type += \"wan\";\n            return type;\n        }\n\n        $scope.rdConnTypeString = function (type) {\n            switch (type) {\n                case \"relaywan\":\n                    return $translate.instant('Relay WAN');\n                case \"relaylan\":\n                    return $translate.instant('Relay LAN');\n                case \"quicwan\":\n                    return $translate.instant('QUIC WAN');\n                case \"quiclan\":\n                    return $translate.instant('QUIC LAN');\n                case \"tcpwan\":\n                    return $translate.instant('TCP WAN');\n                case \"tcplan\":\n                    return $translate.instant('TCP LAN');\n                default:\n                    return $translate.instant('Disconnected');\n            }\n        }\n\n        $scope.rdConnTypeIcon = function (type) {\n            switch (type) {\n            case \"tcplan\":\n            case \"quiclan\":\n                return \"reception-4\";\n            case \"tcpwan\":\n            case \"quicwan\":\n                return \"reception-3\";\n            case \"relaylan\":\n                return \"reception-2\";\n            case \"relaywan\":\n                return \"reception-1\";\n            case \"disconnected\":\n                return \"reception-0\";\n            }\n        }\n\n        $scope.rdConnDetails = function (type) {\n            switch (type) {\n                case \"relaylan\":\n                case \"relaywan\":\n                    return $translate.instant('Connections via relays might be rate limited by the relay');\n                case \"quiclan\":\n                    return $translate.instant('Using a QUIC connection over LAN');\n                case \"quicwan\":\n                    return $translate.instant('Using a QUIC connection over WAN');\n                case \"tcpwan\":\n                    return $translate.instant('Using a direct TCP connection over WAN');\n                case \"tcplan\":\n                    return $translate.instant('Using a direct TCP connection over LAN');\n                default:\n                    return $translate.instant('Unknown');\n            }\n        }\n\n        $scope.hasRemoteGUIAddress = function (deviceCfg) {\n            if (!deviceCfg.remoteGUIPort)\n                return false;\n            var conn = $scope.connections[deviceCfg.deviceID];\n            return conn && conn.connected && conn.address && conn.type.indexOf('Relay') == -1;\n        };\n\n        $scope.remoteGUIAddress = function (deviceCfg) {\n            // Assume hasRemoteGUIAddress is true or we would not be here\n            var conn = $scope.connections[deviceCfg.deviceID];\n            // Use regex to filter out scope ID from IPv6 addresses.\n            return 'http://' + replaceAddressPort(conn.address, deviceCfg.remoteGUIPort).replace('%.*?\\]:', ']:');\n        };\n\n        function replaceAddressPort(address, newPort) {\n            for (var index = address.length - 1; index >= 0; index--) {\n                if (address[index] === \":\") {\n                    return address.substr(0, index) + \":\" + newPort.toString();\n                }\n            }\n            return address;\n        }\n\n        $scope.friendlyNameFromShort = function (shortID) {\n            var matches = Object.keys($scope.devices).filter(function (id) {\n                return id.substr(0, 7) === shortID;\n            });\n            if (matches.length !== 1) {\n                return shortID;\n            }\n            return $scope.friendlyNameFromID(matches[0]);\n        };\n\n        $scope.friendlyNameFromID = function (deviceID) {\n            var match = $scope.devices[deviceID];\n            if (match) {\n                return $scope.deviceName(match);\n            }\n            return deviceID.substr(0, 6);\n        };\n\n        $scope.deviceName = function (deviceCfg) {\n            if (typeof deviceCfg === 'undefined') {\n                return \"\";\n            }\n            if (deviceCfg.name) {\n                return deviceCfg.name;\n            }\n            return $scope.deviceShortID(deviceCfg.deviceID);\n        };\n\n        $scope.deviceShortID = function (deviceID) {\n            if (typeof deviceID === 'undefined') {\n                return \"\";\n            }\n            return deviceID.substr(0, 6);\n        };\n\n        $scope.thisDeviceName = function () {\n            var device = $scope.thisDevice();\n            if (typeof device === 'undefined') {\n                return \"(unknown device)\";\n            }\n            if (device.name) {\n                return device.name;\n            }\n            return device.deviceID.substr(0, 6);\n        };\n\n        $scope.showDeviceIdentification = function (deviceCfg) {\n            $scope.currentDevice = deviceCfg;\n            $('#idqr').modal();\n        };\n\n        $scope.setDevicePause = function (device, pause) {\n            $scope.devices[device].paused = pause;\n            $scope.config.devices = $scope.deviceList();\n            $scope.saveConfig();\n        };\n\n        $scope.setFolderPause = function (folder, pause) {\n            var cfg = $scope.folders[folder];\n            if (cfg) {\n                cfg.paused = pause;\n                $scope.config.folders = folderList($scope.folders);\n                return $scope.saveConfig();\n            }\n            return $q.when();\n        };\n\n        $scope.showListenerStatus = function () {\n            var params = {\n                type: 'listeners',\n            };\n            if ($scope.listenersFailed.length > 0) {\n                params.status = 'danger';\n                params.heading = $translate.instant(\"Listener Failures\");\n            } else {\n                params.status = 'default';\n                params.heading = $translate.instant(\"Listener Status\");\n            }\n            $scope.connectivityStatusParams = params;\n            $('#connectivity-status').modal();\n        };\n\n        $scope.showDiscoveryStatus = function () {\n            var params = {\n                type: 'discovery',\n            };\n            if ($scope.discoveryFailed.length > 0) {\n                params.status = 'danger';\n                params.heading = $translate.instant(\"Discovery Failures\");\n            } else {\n                params.status = 'default';\n                params.heading = $translate.instant(\"Discovery Status\");\n            }\n            $scope.connectivityStatusParams = params;\n            $('#connectivity-status').modal();\n        };\n\n        $scope.logging = {\n            facilities: {},\n            refreshFacilities: function () {\n                $http.get(urlbase + '/system/debug').success(function (data) {\n                    var facilities = {};\n                    data.enabled = data.enabled || [];\n                    $.each(data.facilities, function (key, value) {\n                        facilities[key] = {\n                            description: value,\n                            enabled: data.enabled.indexOf(key) > -1\n                        }\n                    })\n                    $scope.logging.facilities = facilities;\n                }).error($scope.emitHTTPError);\n            },\n            show: function () {\n                $scope.logging.paused = false;\n                $scope.logging.refreshFacilities();\n                $scope.logging.timer = $timeout($scope.logging.fetch);\n                var textArea = $('#logViewerText');\n                textArea.on(\"scroll\", $scope.logging.onScroll);\n                $('#logViewer').modal().one('shown.bs.modal', function () {\n                    // Scroll to bottom.\n                    textArea.scrollTop(textArea[0].scrollHeight);\n                }).one('hidden.bs.modal', function () {\n                    $timeout.cancel($scope.logging.timer);\n                    textArea.off(\"scroll\", $scope.logging.onScroll);\n                    $scope.logging.timer = null;\n                    $scope.logging.entries = [];\n                });\n            },\n            onFacilityChange: function (facility) {\n                var enabled = $scope.logging.facilities[facility].enabled;\n                // Disable checkboxes while we're in flight.\n                $.each($scope.logging.facilities, function (key) {\n                    $scope.logging.facilities[key].enabled = null;\n                })\n                $http.post(urlbase + '/system/debug?' + (enabled ? 'enable=' : 'disable=') + facility)\n                    .success($scope.logging.refreshFacilities)\n                    .error($scope.emitHTTPError);\n            },\n            onScroll: function () {\n                var textArea = $('#logViewerText');\n                var scrollTop = textArea.prop('scrollTop');\n                var scrollHeight = textArea.prop('scrollHeight');\n                $scope.logging.paused = scrollHeight > (scrollTop + textArea.outerHeight());\n                // Browser events do not cause redraw, trigger manually.\n                $scope.$apply();\n            },\n            timer: null,\n            entries: [],\n            paused: false,\n            content: function () {\n                var content = \"\";\n                $.each($scope.logging.entries, function (idx, entry) {\n                    content += entry.when.split('.')[0].replace('T', ' ') + ' ' + entry.message + \"\\n\";\n                });\n                return content;\n            },\n            fetch: function () {\n                var textArea = $('#logViewerText');\n                if ($scope.logging.paused) {\n                    if (!$scope.logging.timer) return;\n                    $scope.logging.timer = $timeout($scope.logging.fetch, 500);\n                    return;\n                }\n\n                var last = null;\n                if ($scope.logging.entries.length > 0) {\n                    last = $scope.logging.entries[$scope.logging.entries.length - 1].when;\n                }\n\n                $http.get(urlbase + '/system/log' + (last ? '?since=' + encodeURIComponent(last) : '')).success(function (data) {\n                    if (!$scope.logging.timer) return;\n                    $scope.logging.timer = $timeout($scope.logging.fetch, 2000);\n                    if (!$scope.logging.paused) {\n                        if (data.messages) {\n                            $scope.logging.entries.push.apply($scope.logging.entries, data.messages);\n                            // Wait for the text area to be redrawn, adding new lines, and then scroll to bottom.\n                            $timeout(function () {\n                                textArea.scrollTop(textArea[0].scrollHeight);\n                            });\n                        }\n                    }\n                });\n            }\n        };\n\n        $scope.about = {\n            paths: {},\n            refreshPaths: function () {\n                $http.get(urlbase + '/system/paths').success(function (data) {\n                    $scope.about.paths = data;\n                }).error($scope.emitHTTPError);\n            },\n            show: function () {\n                $scope.about.refreshPaths();\n                $('#about').modal(\"show\");\n            },\n        };\n\n        $scope.discardChangedSettings = function () {\n            $(\"#discard-changes-confirmation\").modal(\"hide\");\n            $(\"#settings\").off(\"hide.bs.modal\").modal(\"hide\");\n        };\n\n        $scope.showSettings = function () {\n            // Make a working copy\n            $scope.tmpOptions = angular.copy($scope.config.options);\n            $scope.tmpOptions.deviceName = $scope.thisDevice().name;\n            $scope.tmpOptions.upgrades = \"none\";\n            if ($scope.tmpOptions.autoUpgradeIntervalH > 0) {\n                $scope.tmpOptions.upgrades = \"stable\";\n            }\n            if ($scope.tmpOptions.upgradeToPreReleases) {\n                $scope.tmpOptions.upgrades = \"candidate\";\n            }\n            $scope.tmpGUI = angular.copy($scope.config.gui);\n            $scope.tmpRemoteIgnoredDevices = angular.copy($scope.config.remoteIgnoredDevices);\n            $scope.tmpDevices = angular.copy($scope.config.devices);\n            $('#settings').modal(\"show\");\n            $(\"#settings a[href='#settings-general']\").tab(\"show\");\n            $(\"#settings\").on('hide.bs.modal', function (event) {\n                if ($scope.settingsModified()) {\n                    event.preventDefault();\n                    $(\"#discard-changes-confirmation\").modal(\"show\");\n                } else {\n                    $(\"#settings\").off(\"hide.bs.modal\");\n                }\n            });\n        };\n\n        $scope.saveConfig = function () {\n            var cfg = JSON.stringify($scope.config);\n            var opts = {\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            };\n            return $http.put(urlbase + '/config', cfg, opts).finally(refreshConfig).catch($scope.emitHTTPError);\n        };\n\n        $scope.urVersions = function () {\n            var result = [];\n            if ($scope.system) {\n                for (var i = $scope.system.urVersionMax; i >= 2; i--) {\n                    result.push(\"\" + i);\n                }\n            }\n            return result;\n        };\n\n        $scope.settingsModified = function () {\n            // Options has artificial properties injected into the temp config.\n            // Need to recompute them before we can check equality\n            var options = angular.copy($scope.config.options);\n            options.deviceName = $scope.thisDevice().name;\n            options.upgrades = \"none\";\n            if (options.autoUpgradeIntervalH > 0) {\n                options.upgrades = \"stable\";\n            }\n            if (options.upgradeToPreReleases) {\n                options.upgrades = \"candidate\";\n            }\n            var optionsEqual = angular.equals(options, $scope.tmpOptions);\n            var guiEquals = angular.equals($scope.config.gui, $scope.tmpGUI);\n            var ignoredDevicesEquals = angular.equals($scope.config.remoteIgnoredDevices, $scope.tmpRemoteIgnoredDevices);\n            var ignoredFoldersEquals = angular.equals($scope.config.devices, $scope.tmpDevices);\n            console.log(\"settings equals - options: \" + optionsEqual + \" gui: \" + guiEquals + \" ignDev: \" + ignoredDevicesEquals + \" ignFol: \" + ignoredFoldersEquals);\n            return !optionsEqual || !guiEquals || !ignoredDevicesEquals || !ignoredFoldersEquals;\n        };\n\n        $scope.saveSettings = function () {\n            // Make sure something changed\n            if ($scope.settingsModified()) {\n                var themeChanged = $scope.config.gui.theme !== $scope.tmpGUI.theme;\n                // Angular has issues with selects with numeric values, so we handle strings here.\n                $scope.tmpOptions.urAccepted = parseInt($scope.tmpOptions._urAcceptedStr);\n                // Check if auto-upgrade has been enabled or disabled. This\n                // also has an effect on usage reporting, so do the check\n                // for that later.\n                if ($scope.tmpOptions.upgrades == \"candidate\") {\n                    $scope.tmpOptions.autoUpgradeIntervalH = $scope.tmpOptions.autoUpgradeIntervalH || 12;\n                    $scope.tmpOptions.upgradeToPreReleases = true;\n                    $scope.tmpOptions.urAccepted = $scope.system.urVersionMax;\n                    $scope.tmpOptions.urSeen = $scope.system.urVersionMax;\n                } else if ($scope.tmpOptions.upgrades == \"stable\") {\n                    $scope.tmpOptions.autoUpgradeIntervalH = $scope.tmpOptions.autoUpgradeIntervalH || 12;\n                    $scope.tmpOptions.upgradeToPreReleases = false;\n                } else {\n                    $scope.tmpOptions.autoUpgradeIntervalH = 0;\n                    $scope.tmpOptions.upgradeToPreReleases = false;\n                }\n\n                // Check if protocol will need to be changed on restart\n                if ($scope.config.gui.useTLS !== $scope.tmpGUI.useTLS) {\n                    $scope.protocolChanged = true;\n                }\n\n                // Parse strings to arrays before copying over\n                ['listenAddresses', 'globalAnnounceServers'].forEach(function (key) {\n                    $scope.tmpOptions[key] = $scope.tmpOptions[\"_\" + key + \"Str\"].split(/[ ,]+/).map(function (x) {\n                        return x.trim();\n                    });\n                });\n\n                // Apply new settings locally\n                $scope.thisDeviceIn($scope.tmpDevices).name = $scope.tmpOptions.deviceName;\n                $scope.config.options = angular.copy($scope.tmpOptions);\n                $scope.config.gui = angular.copy($scope.tmpGUI);\n                $scope.config.remoteIgnoredDevices = angular.copy($scope.tmpRemoteIgnoredDevices);\n                $scope.config.devices = angular.copy($scope.tmpDevices);\n                // $scope.devices is updated by updateLocalConfig based on\n                // the config changed event, but settingsModified will look\n                // at it before that and conclude that the settings are\n                // modified (even though we just saved) unless we update\n                // here as well...\n                $scope.devices = deviceMap($scope.config.devices);\n\n                $scope.saveConfig().then(function () {\n                    if (themeChanged) {\n                        document.location.reload(true);\n                    }\n                });\n            }\n\n            $(\"#settings\").off(\"hide.bs.modal\").modal(\"hide\");\n        };\n\n        $scope.saveAdvanced = function () {\n            $scope.config = $scope.advancedConfig;\n            $scope.saveConfig();\n            $('#advanced').modal(\"hide\");\n        };\n\n        $scope.restart = function () {\n            restarting = true;\n            $('#restarting').modal();\n            $http.post(urlbase + '/system/restart');\n            $scope.configInSync = true;\n\n            // Switch webpage protocol if needed\n            if ($scope.protocolChanged) {\n                var protocol = 'http';\n\n                if ($scope.config.gui.useTLS) {\n                    protocol = 'https';\n                }\n\n                setTimeout(function () {\n                    window.location.protocol = protocol;\n                }, 2500);\n\n                $scope.protocolChanged = false;\n            }\n        };\n\n        $scope.upgrade = function () {\n            restarting = true;\n            $('#upgrade').modal('hide');\n            $('#majorUpgrade').modal('hide');\n            $('#upgrading').modal();\n            $http.post(urlbase + '/system/upgrade').success(function () {\n                $('#restarting').modal();\n                $('#upgrading').modal('hide');\n            }).error(function () {\n                $('#upgrading').modal('hide');\n            });\n        };\n\n        $scope.shutdown = function () {\n            restarting = true;\n            $http.post(urlbase + '/system/shutdown').success(function () {\n                $('#shutdown').modal();\n            }).error($scope.emitHTTPError);\n            $scope.configInSync = true;\n        };\n\n        function editDeviceModal() {\n            $scope.currentDevice._addressesStr = $scope.currentDevice.addresses.join(', ');\n            $scope.deviceEditor.$setPristine();\n            $('#editDevice').modal();\n        }\n\n        $scope.editDeviceModalTitle = function() {\n            if ($scope.editingDeviceDefaults()) {\n                return $translate.instant(\"Edit Device Defaults\");\n            }\n            var title = '';\n            if ($scope.editingDeviceExisting()) {\n                title += $translate.instant(\"Edit Device\");\n            } else {\n                title += $translate.instant(\"Add Device\");\n            }\n            var name = $scope.deviceName($scope.currentDevice);\n            if (name !== '') {\n                title += ' (' + name + ')';\n            }\n            return title;\n        };\n\n        $scope.editDeviceModalIcon = function() {\n            if ($scope.has([\"existing\", \"defaults\"], $scope.currentDevice._editing)) {\n                return 'fas fa-pencil-alt';\n            }\n            return 'fas fa-desktop';\n        };\n\n        $scope.editingDeviceDefaults = function() {\n            return $scope.currentDevice._editing == 'defaults';\n        }\n\n        $scope.editingDeviceExisting = function() {\n            return $scope.currentDevice._editing == 'existing';\n        }\n\n        $scope.editingDeviceNew = function() {\n            // The \"new-pending\" value is intentionally disregarded here.\n            return $scope.currentDevice._editing == 'new';\n        }\n\n        $scope.editDeviceExisting = function (deviceCfg) {\n            $scope.currentDevice = $.extend({}, deviceCfg);\n            $scope.currentDevice._editing = \"existing\";\n            $scope.willBeReintroducedBy = undefined;\n            if (deviceCfg.introducedBy) {\n                var introducerDevice = $scope.devices[deviceCfg.introducedBy];\n                if (introducerDevice && introducerDevice.introducer) {\n                    $scope.willBeReintroducedBy = $scope.deviceName(introducerDevice);\n                }\n            }\n            initShareEditing('device');\n            $scope.deviceFolders($scope.currentDevice).forEach(function (folderID) {\n                $scope.currentSharing.shared.push($scope.folders[folderID]);\n                $scope.currentSharing.selected[folderID] = true;\n                var folderdevices = $scope.folders[folderID].devices;\n                for (var i = 0; i < folderdevices.length; i++) {\n                    if (folderdevices[i].deviceID === deviceCfg.deviceID) {\n                        $scope.currentSharing.encryptionPasswords[folderID] = folderdevices[i].encryptionPassword;\n                        break;\n                    }\n                }\n            });\n            $scope.currentSharing.unrelated = $scope.folderList().filter(function (n) {\n                return !$scope.currentSharing.selected[n.id];\n            });\n            editDeviceModal();\n        };\n\n        $scope.editDeviceDefaults = function () {\n            $http.get(urlbase + '/config/defaults/device').then(function (p) {\n                $scope.currentDevice = p.data;\n                $scope.currentDevice._editing = \"defaults\";\n                editDeviceModal();\n            }, $scope.emitHTTPError);\n        };\n\n        $scope.selectAllSharedFolders = function (state) {\n            var folders = $scope.currentSharing.shared;\n            for (var i = 0; i < folders.length; i++) {\n                $scope.currentSharing.selected[folders[i].id] = !!state;\n            }\n        };\n\n        $scope.selectAllUnrelatedFolders = function (state) {\n            var folders = $scope.currentSharing.unrelated;\n            for (var i = 0; i < folders.length; i++) {\n                $scope.currentSharing.selected[folders[i].id] = !!state;\n            }\n        };\n\n        $scope.addDevice = function (deviceID, name) {\n            $scope.discoveryUnknown = [];\n            for (var id in $scope.discoveryCache) {\n                if ($scope.discoveryUnknown.length === 100) {\n                    break;\n                }\n                if (id in $scope.devices) {\n                    continue\n                }\n                $scope.discoveryUnknown.push(id);\n            }\n            return $http.get(urlbase + '/config/defaults/device').then(function (p) {\n                $scope.currentDevice = p.data;\n                $scope.currentDevice.name = name;\n                $scope.currentDevice.deviceID = deviceID;\n                if (deviceID) {\n                    $scope.currentDevice._editing = \"new-pending\";\n                } else {\n                    $scope.currentDevice._editing = \"new\";\n                }\n                initShareEditing('device');\n                $scope.currentSharing.unrelated = $scope.folderList();\n                editDeviceModal();\n            }, $scope.emitHTTPError);\n        };\n\n        $scope.deleteDevice = function () {\n            $('#editDevice').modal('hide');\n            if ($scope.currentDevice._editing != \"existing\") {\n                return;\n            }\n\n            var id = $scope.currentDevice.deviceID\n            delete $scope.devices[id];\n            $scope.config.devices = $scope.deviceList();\n\n            for (var id in $scope.folders) {\n                $scope.folders[id].devices = $scope.folders[id].devices.filter(function (n) {\n                    return n.deviceID !== $scope.currentDevice.deviceID;\n                });\n            }\n\n            $scope.saveConfig();\n        };\n\n        $scope.saveDevice = function () {\n            $('#editDevice').modal('hide');\n            $scope.currentDevice.addresses = $scope.currentDevice._addressesStr.split(',').map(function (x) {\n                return x.trim();\n            });\n            delete $scope.currentDevice._addressesStr;\n            if ($scope.currentDevice._editing == \"defaults\") {\n                $scope.config.defaults.device = $scope.currentDevice;\n            } else {\n                setDeviceConfig();\n            }\n            delete $scope.currentSharing;\n            $scope.currentDevice = {};\n            $scope.saveConfig();\n        };\n\n        function setDeviceConfig() {\n            var currentID = $scope.currentDevice.deviceID;\n            $scope.devices[currentID] = $scope.currentDevice;\n            $scope.config.devices = deviceList($scope.devices);\n\n            for (var id in $scope.currentSharing.selected) {\n                if ($scope.currentSharing.selected[id]) {\n                    var found = false;\n                    for (i = 0; i < $scope.folders[id].devices.length; i++) {\n                        if ($scope.folders[id].devices[i].deviceID === currentID) {\n                            found = true;\n                            // Update encryption pw\n                            $scope.folders[id].devices[i].encryptionPassword = $scope.currentSharing.encryptionPasswords[id];\n                            break;\n                        }\n                    }\n\n                    if (!found) {\n                        // Add device to folder\n                        $scope.folders[id].devices.push({\n                            deviceID: currentID,\n                            encryptionPassword: $scope.currentSharing.encryptionPasswords[id],\n                        });\n                    }\n                } else {\n                    // Remove device from folder\n                    $scope.folders[id].devices = $scope.folders[id].devices.filter(function (n) {\n                        return n.deviceID !== currentID;\n                    });\n                }\n            }\n\n            $scope.config.folders = folderList($scope.folders);\n        };\n\n        $scope.ignoreDevice = function (deviceID, pendingDevice) {\n            var ignoredDevice = angular.copy(pendingDevice);\n            ignoredDevice.deviceID = deviceID;\n            // Bump time\n            ignoredDevice.time = (new Date()).toISOString();\n            $scope.config.remoteIgnoredDevices.push(ignoredDevice);\n            $scope.saveConfig();\n        };\n\n        $scope.dismissPendingDevice = function (deviceID) {\n            $http.delete(urlbase + '/cluster/pending/devices?device=' + encodeURIComponent(deviceID));\n        };\n\n        $scope.unignoreDeviceFromTemporaryConfig = function (ignoredDevice) {\n            $scope.tmpRemoteIgnoredDevices = $scope.tmpRemoteIgnoredDevices.filter(function (existingIgnoredDevice) {\n                return ignoredDevice.deviceID !== existingIgnoredDevice.deviceID;\n            });\n        };\n\n        $scope.ignoredFoldersCountTmpConfig = function () {\n            var count = 0;\n            ($scope.tmpDevices || []).forEach(function (deviceCfg) {\n                count += deviceCfg.ignoredFolders.length;\n            });\n            return count;\n        };\n\n        $scope.unignoreFolderFromTemporaryConfig = function (device, ignoredFolderID) {\n            for (var i = 0; i < $scope.tmpDevices.length; i++) {\n                if ($scope.tmpDevices[i].deviceID == device) {\n                    $scope.tmpDevices[i].ignoredFolders = $scope.tmpDevices[i].ignoredFolders.filter(function (existingIgnoredFolder) {\n                        return existingIgnoredFolder.id !== ignoredFolderID;\n                    });\n                    return;\n                }\n            }\n        };\n\n        $scope.otherDevices = function () {\n            return $scope.deviceList().filter(function (n) {\n                return n.deviceID !== $scope.myID;\n            });\n        };\n\n        $scope.thisDevice = function () {\n            return $scope.devices[$scope.myID];\n        };\n\n        $scope.thisDeviceIn = function (l) {\n            for (var i = 0; i < l.length; i++) {\n                var n = l[i];\n                if (n.deviceID === $scope.myID) {\n                    return n;\n                }\n            }\n        };\n\n        $scope.allDevices = function () {\n            var devices = $scope.otherDevices();\n            devices.push($scope.thisDevice());\n            return devices;\n        };\n\n        $scope.setAllDevicesPause = function (pause) {\n            for (var id in $scope.devices) {\n                $scope.devices[id].paused = pause;\n            };\n            $scope.config.devices = deviceList($scope.devices);\n            $scope.saveConfig();\n        };\n\n        $scope.isAtleastOneDevicePausedStateSetTo = function (pause) {\n            for (var id in $scope.devices) {\n                if ($scope.devices[id].paused == pause) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n\n        $scope.errorList = function () {\n            if (!$scope.errors) {\n                return [];\n            }\n            return $scope.errors.filter(function (e) {\n                return e.when > $scope.seenError;\n            });\n        };\n\n        $scope.clearErrors = function () {\n            $scope.seenError = $scope.errors[$scope.errors.length - 1].when;\n            $http.post(urlbase + '/system/error/clear');\n        };\n\n        $scope.fsWatcherErrorMap = function () {\n            var errs = {}\n            $.each($scope.folders, function (id, cfg) {\n                if (cfg.fsWatcherEnabled && $scope.model[cfg.id] && $scope.model[id].watchError && !cfg.paused && $scope.folderStatus(cfg) !== 'stopped') {\n                    errs[id] = $scope.model[id].watchError;\n                }\n            });\n            return errs;\n        };\n\n        $scope.friendlyDevices = function (str) {\n            for (var id in $scope.devices) {\n                str = str.replace(id, $scope.deviceName($scope.devices[id]));\n            }\n            return str;\n        };\n\n        $scope.folderList = function () {\n            return folderList($scope.folders);\n        };\n\n        $scope.deviceList = function () {\n            return deviceList($scope.devices);\n        };\n\n        $scope.directoryList = [];\n\n        $scope.$watch('currentFolder.path', function (newvalue) {\n            if (!newvalue) {\n                return;\n            }\n            $scope.currentFolder.path = expandTilde(newvalue);\n            $http.get(urlbase + '/system/browse', {\n                params: { current: newvalue }\n            }).success(function (data) {\n                $scope.directoryList = data;\n            }).error($scope.emitHTTPError);\n        });\n\n        $scope.$watch('currentFolder.label', function (newvalue) {\n            if (!newvalue || !shouldSetDefaultFolderPath()) {\n                return;\n            }\n            $scope.currentFolder.path = pathJoin($scope.config.defaults.folder.path, newvalue);\n        });\n\n        $scope.$watch('currentFolder.id', function (newvalue) {\n            if (!newvalue || !shouldSetDefaultFolderPath() || $scope.currentFolder.label) {\n                return;\n            }\n            $scope.currentFolder.path = pathJoin($scope.config.defaults.folder.path, newvalue);\n        });\n\n        $scope.setFSWatcherIntervalDefault = function () {\n            var defaultRescanIntervals = [60, 3600, 3600*24];\n            if (defaultRescanIntervals.indexOf($scope.currentFolder.rescanIntervalS) === -1) {\n                return;\n            }\n            var idx;\n            if ($scope.currentFolder.type === 'receiveencrypted') {\n                idx = 2;\n            } else if ($scope.currentFolder.fsWatcherEnabled) {\n                idx = 1;\n            } else {\n                idx = 0;\n            }\n            $scope.currentFolder.rescanIntervalS = defaultRescanIntervals[idx];\n        };\n\n        $scope.setDefaultsForFolderType = function () {\n            if ($scope.currentFolder.type === 'receiveencrypted') {\n                $scope.currentFolder.fsWatcherEnabled = false;\n                $scope.currentFolder.ignorePerms = true;\n                delete $scope.currentFolder.versioning;\n            } else {\n                $scope.currentFolder.fsWatcherEnabled = true;\n            }\n            $scope.setFSWatcherIntervalDefault();\n        };\n\n        $scope.loadFormIntoScope = function (form) {\n            console.log('loadFormIntoScope', form.$name);\n            switch (form.$name) {\n                case 'deviceEditor':\n                    $scope.deviceEditor = form;\n                    break;\n                case 'folderEditor':\n                    $scope.folderEditor = form;\n                    break;\n            }\n        };\n\n        $scope.globalChanges = function () {\n            $('#globalChanges').modal();\n        };\n\n        function editFolderModal(initialTab) {\n            initVersioningEditing();\n            $scope.currentFolder._recvEnc = $scope.currentFolder.type === 'receiveencrypted';\n            $scope.folderPathErrors = {};\n            $scope.folderEditor.$setPristine();\n            if (!initialTab) {\n                initialTab = \"#folder-general\";\n            }\n            $('.nav-tabs a[href=\"' + initialTab + '\"]').tab('show');\n            $('#editFolder').modal().one('shown.bs.tab', function (e) {\n                if (e.target.attributes.href.value === \"#folder-ignores\") {\n                    $('#folder-ignores textarea').focus();\n                }\n            }).one('hidden.bs.modal', function () {\n                var p = $q.when();\n                // If the modal was closed default patterns should still apply\n                if ($scope.currentFolder._editing == \"new-ignores\" && !$scope.ignores.saved && $scope.ignores.defaultLines) {\n                    p = saveFolderAddIgnores($scope.currentFolder.id, true);\n                }\n                p.then(function () {\n                    window.location.hash = \"\";\n                    $scope.currentFolder = {};\n                    $scope.ignores = {};\n                });\n            });\n        };\n\n        $scope.editFolderModalTitle = function() {\n            if ($scope.editingFolderDefaults()) {\n                return $translate.instant(\"Edit Folder Defaults\");\n            }\n            var title = '';\n            switch ($scope.currentFolder._editing) {\n            case \"existing\":\n                title = $translate.instant(\"Edit Folder\");\n                break;\n            case \"new\":\n            case \"new-pending\":\n                title = $translate.instant(\"Add Folder\");\n                break;\n            case \"new-ignores\":\n                title = $translate.instant(\"Set Ignores on Added Folder\");\n                break;\n            }\n            if ($scope.currentFolder.id !== '') {\n                title += ' (' + $scope.folderLabel($scope.currentFolder.id) + ')';\n            }\n            return title;\n        };\n\n        $scope.editFolderModalIcon = function() {\n            if ($scope.has([\"existing\", \"defaults\"], $scope.currentFolder._editing)) {\n                return 'fas fa-pencil-alt';\n            }\n            return 'fas fa-folder';\n        };\n\n        $scope.editingFolderDefaults = function() {\n            return $scope.currentFolder._editing == 'defaults';\n        }\n\n        $scope.editingFolderExisting = function() {\n            return $scope.currentFolder._editing == 'existing';\n        }\n\n        $scope.editingFolderNew = function() {\n            return $scope.has(['new', 'new-pending'], $scope.currentFolder._editing);\n        }\n\n        function editFolder(initialTab) {\n            if ($scope.currentFolder.path.length > 1 && $scope.currentFolder.path.slice(-1) === $scope.system.pathSeparator) {\n                $scope.currentFolder.path = $scope.currentFolder.path.slice(0, -1);\n            } else if (!$scope.currentFolder.path) {\n                // undefined path leads to invalid input field\n                $scope.currentFolder.path = '';\n            }\n            initShareEditing('folder');\n            editFolderModal(initialTab);\n        }\n\n        $scope.internalVersioningEnabled = function (guiVersioning) {\n            if (!$scope.currentFolder._guiVersioning) {\n                return false;\n            }\n            return ['none', 'external'].indexOf($scope.currentFolder._guiVersioning.selector) === -1;\n        };\n\n        function initVersioningEditing() {\n            $scope.currentFolder._guiVersioning = angular.copy($scope.versioningDefaults);\n\n            var currentVersioning = $scope.currentFolder.versioning;\n\n            if (!currentVersioning || !currentVersioning.type || currentVersioning.type === 'none') {\n                return;\n            }\n\n            $scope.currentFolder._guiVersioning.cleanupIntervalS = +currentVersioning.cleanupIntervalS;\n            $scope.currentFolder._guiVersioning.selector = currentVersioning.type;\n\n            // Apply parameters currently in use\n            switch (currentVersioning.type) {\n            case \"trashcan\":\n                $scope.currentFolder._guiVersioning.trashcanClean = +currentVersioning.params.cleanoutDays;\n                break;\n            case \"simple\":\n                $scope.currentFolder._guiVersioning.simpleKeep = +currentVersioning.params.keep;\n                $scope.currentFolder._guiVersioning.trashcanClean = +currentVersioning.params.cleanoutDays;\n                break;\n            case \"staggered\":\n                $scope.currentFolder._guiVersioning.staggeredMaxAge = Math.floor(+currentVersioning.params.maxAge / 86400);\n                break;\n            case \"external\":\n                $scope.currentFolder._guiVersioning.externalCommand = currentVersioning.params.command;\n                break;\n            }\n        };\n\n        $scope.editFolderExisting = function (folderCfg, initialTab) {\n            $scope.currentFolder = angular.copy(folderCfg);\n            $scope.currentFolder._editing = \"existing\";\n            editFolderLoadIgnores();\n            editFolder(initialTab);\n        };\n\n        function editFolderLoadingIgnores() {\n            $scope.ignores.text = 'Loading...';\n            $scope.ignores.error = null;\n            $scope.ignores.disabled = true;\n        }\n\n        function editFolderGetIgnores() {\n            return $http.get(urlbase + '/db/ignores?folder=' + encodeURIComponent($scope.currentFolder.id))\n                .then(function (r) {\n                    return r.data;\n                }, function (response) {\n                    $scope.ignores.text = $translate.instant(\"Failed to load ignore patterns.\");\n                    return $q.reject(response);\n            });\n        };\n\n        function editFolderLoadIgnores() {\n            editFolderLoadingIgnores();\n            return editFolderGetIgnores().then(function (data) {\n                if (!data) {\n                    return;\n                }\n                editFolderInitIgnores(data.ignore, data.error);\n            }, $scope.emitHTTPError);\n        }\n\n        $scope.editFolderDefaults = function() {\n            $q.all([\n                $http.get(urlbase + '/config/defaults/folder').then(function (response) {\n                    $scope.currentFolder = response.data;\n                    $scope.currentFolder._editing = \"defaults\";\n                }),\n                getDefaultIgnores().then(editFolderInitIgnores),\n            ]).then(editFolder, $scope.emitHTTPError);\n        };\n\n        function getDefaultIgnores() {\n            return $http.get(urlbase + '/config/defaults/ignores').then(function (r) {\n                return r.data.lines;\n            });\n        }\n\n        function editFolderInitIgnores(lines, error) {\n            $scope.ignores.originalLines = lines || [];\n            setIgnoresText(lines);\n            $scope.ignores.error = error;\n            $scope.ignores.disabled = false;\n        }\n\n        function setIgnoresText(lines) {\n            $scope.ignores.text = lines ? lines.join('\\n') : \"\";\n        }\n\n        $scope.selectAllSharedDevices = function (state) {\n            var devices = $scope.currentSharing.shared;\n            for (var i = 0; i < devices.length; i++) {\n                $scope.currentSharing.selected[devices[i].deviceID] = !!state;\n            }\n        };\n\n        $scope.selectAllUnrelatedDevices = function (state) {\n            var devices = $scope.currentSharing.unrelated;\n            for (var i = 0; i < devices.length; i++) {\n                $scope.currentSharing.selected[devices[i].deviceID] = !!state;\n            }\n        };\n\n        $scope.addFolder = function () {\n            $http.get(urlbase + '/svc/random/string?length=10').success(function (data) {\n                var folderID = (data.random.substr(0, 5) + '-' + data.random.substr(5, 5)).toLowerCase();\n                addFolderInit(folderID).then(function() {\n                    // Triggers the watch that sets the path\n                    $scope.currentFolder._editing = \"new\";\n                    $scope.currentFolder.label = $scope.currentFolder.label;\n                    editFolderModal();\n                });\n            });\n        };\n\n        $scope.addFolderAndShare = function (folderID, pendingFolder, device) {\n            addFolderInit(folderID).then(function() {\n                $scope.currentSharing.selected[device] = true;\n                $scope.currentFolder.label = pendingFolder.offeredBy[device].label;\n                for (var k in pendingFolder.offeredBy) {\n                    if (pendingFolder.offeredBy[k].receiveEncrypted) {\n                        $scope.currentFolder.type = \"receiveencrypted\";\n                        $scope.setDefaultsForFolderType();\n                        break;\n                    }\n                }\n                $scope.currentFolder._editing = \"new-pending\";\n                editFolderModal();\n            });\n        };\n\n        function addFolderInit(folderID) {\n            return $http.get(urlbase + '/config/defaults/folder').then(function (response) {\n                $scope.currentFolder = response.data;\n                $scope.currentFolder.id = folderID;\n                initShareEditing('folder');\n                $scope.currentSharing.unrelated = $scope.currentSharing.unrelated.concat($scope.currentSharing.shared);\n                $scope.currentSharing.shared = [];\n                // Ignores don't need to be initialized here, as that happens in\n                // a second step if the user indicates in the creation modal\n                // that they want to set ignores\n            }, $scope.emitHTTPError);\n        }\n\n        $scope.shareFolderWithDevice = function (folder, device) {\n            var folderCfg = $scope.folders[folder];\n            if (folderCfg.type == \"receiveencrypted\" || !$scope.pendingIsRemoteEncrypted(folder, device)) {\n                $scope.folders[folder].devices.push({\n                    deviceID: device\n                });\n                $scope.config.folders = folderList($scope.folders);\n                $scope.saveConfig();\n            } else {\n                // Open edit folder dialog to enter encryption password\n                $scope.editFolderExisting(folderCfg, \"#folder-sharing\");\n                $scope.currentSharing.selected[device] = true;\n            }\n        };\n\n        $scope.saveFolder = function () {\n            if ($scope.currentFolder._editing == \"new-ignores\") {\n                // On modal being hidden without clicking save, the defaults will be saved.\n                $scope.ignores.saved = true;\n                saveFolderAddIgnores($scope.currentFolder.id);\n                hideFolderModal();\n                return;\n            }\n\n            $scope.validateXattrFilter();\n            var folderCfg = angular.copy($scope.currentFolder);\n            $scope.currentSharing.selected[$scope.myID] = true;\n            var newDevices = [];\n            folderCfg.devices.forEach(function (dev) {\n                if ($scope.currentSharing.selected[dev.deviceID] === true) {\n                    dev.encryptionPassword = $scope.currentSharing.encryptionPasswords[dev.deviceID];\n                    newDevices.push(dev);\n                    delete $scope.currentSharing.selected[dev.deviceID];\n                };\n            });\n            for (var deviceID in $scope.currentSharing.selected) {\n                if ($scope.currentSharing.selected[deviceID] === true) {\n                    newDevices.push({\n                        deviceID: deviceID,\n                        encryptionPassword: $scope.currentSharing.encryptionPasswords[deviceID],\n                    });\n                }\n            }\n            folderCfg.devices = newDevices;\n            delete $scope.currentSharing;\n\n            if (!folderCfg.versioning) {\n                folderCfg.versioning = {params: {}};\n            }\n            folderCfg.versioning.type = folderCfg._guiVersioning.selector;\n            if ($scope.internalVersioningEnabled()) {\n                folderCfg.versioning.cleanupIntervalS = folderCfg._guiVersioning.cleanupIntervalS;\n            }\n            switch (folderCfg._guiVersioning.selector) {\n            case \"trashcan\":\n                folderCfg.versioning.params.cleanoutDays = '' + folderCfg._guiVersioning.trashcanClean;\n                break;\n            case \"simple\":\n                folderCfg.versioning.params.keep = '' + folderCfg._guiVersioning.simpleKeep,\n                folderCfg.versioning.params.cleanoutDays = '' + folderCfg._guiVersioning.trashcanClean;\n                break;\n            case \"staggered\":\n                folderCfg.versioning.params.maxAge = '' + (folderCfg._guiVersioning.staggeredMaxAge * 86400);\n                break;\n            case \"external\":\n                folderCfg.versioning.params.command = '' + folderCfg._guiVersioning.externalCommand;\n                break;\n            default:\n                folderCfg.versioning = {type: ''};\n            }\n            delete folderCfg._guiVersioning;\n\n            if ($scope.currentFolder._editing == \"defaults\") {\n                hideFolderModal();\n                $scope.config.defaults.ignores.lines = ignoresArray();\n                $scope.config.defaults.folder = folderCfg;\n                $scope.saveConfig();\n                return;\n            }\n\n            // This is a new folder where ignores should apply before it first starts.\n            if ($scope.currentFolder._addIgnores) {\n                folderCfg.paused = true;\n            }\n            $scope.folders[folderCfg.id] = folderCfg;\n            $scope.config.folders = folderList($scope.folders);\n\n            if ($scope.currentFolder._editing == \"existing\") {\n                hideFolderModal();\n                saveFolderIgnoresExisting();\n                $scope.saveConfig();\n                return;\n            }\n\n            // No ignores to be set on the new folder, save directly.\n            if (!$scope.currentFolder._addIgnores) {\n                hideFolderModal();\n                $scope.saveConfig();\n                return;\n            }\n\n            // Add folder (paused), load existing ignores and if there are none,\n            // load default ignores, then let the user edit them.\n            $scope.saveConfig().then(function() {\n                editFolderLoadingIgnores();\n                $scope.currentFolder._editing = \"new-ignores\";\n                $('.nav-tabs a[href=\"#folder-ignores\"]').tab('show');\n                return editFolderGetIgnores();\n            }).then(function (data) {\n                // Error getting ignores -> leave error message.\n                if (!data) {\n                    return;\n                }\n                if ((data.ignore && data.ignore.length > 0) || data.error) {\n                    editFolderInitIgnores(data.ignore, data.error);\n                } else {\n                    getDefaultIgnores().then(function (lines) {\n                        setIgnoresText(lines);\n                        $scope.ignores.defaultLines = lines;\n                        $scope.ignores.disabled = false;\n                    });\n                }\n            }, $scope.emitHTTPError);\n        };\n\n        function saveFolderIgnoresExisting() {\n            if ($scope.ignores.disabled) {\n                return;\n            }\n            var ignores = ignoresArray();\n\n            function arrayDiffers(a, b) {\n                return !a !== !b || a.length !== b.length || a.some(function (v, i) { return v !== b[i]; });\n            }\n            if (arrayDiffers(ignores, $scope.ignores.originalLines)) {\n                return saveIgnores(ignores);\n            };\n        }\n\n        function saveFolderAddIgnores(folderID, useDefault) {\n            var ignores = useDefault ? $scope.ignores.defaultLines : ignoresArray();\n            return saveIgnores(ignores).then(function () {\n                return $scope.setFolderPause(folderID, $scope.currentFolder.paused);\n            });\n        };\n\n        function ignoresArray() {\n            var ignores = $scope.ignores.text.split('\\n');\n            // Split always returns a minimum 1-length array even for no patterns\n            if (ignores.length === 1 && ignores[0] === \"\") {\n                ignores = [];\n            }\n            return ignores;\n        }\n\n        $scope.ignoreFolder = function (device, folderID, offeringDevice) {\n            var ignoredFolder = {\n                id: folderID,\n                label: offeringDevice.label,\n                // Bump time\n                time: (new Date()).toISOString()\n            }\n\n            if (device in $scope.devices) {\n                $scope.devices[device].ignoredFolders.push(ignoredFolder);\n                $scope.saveConfig();\n            }\n        };\n\n        $scope.dismissPendingFolder = function (folderID, deviceID) {\n            $http.delete(urlbase + '/cluster/pending/folders?folder=' + encodeURIComponent(folderID)\n                         + '&device=' + encodeURIComponent(deviceID));\n        };\n\n        $scope.folderHasUnacceptedDevices = function (folderCfg) {\n            for (var deviceID in $scope.completion) {\n                if (deviceID in $scope.devices\n                    && folderCfg.id in $scope.completion[deviceID]\n                    && $scope.completion[deviceID][folderCfg.id].remoteState == 'notSharing') {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        $scope.folderHasPausedDevices = function (folderCfg) {\n            for (var deviceID in $scope.completion) {\n                if (deviceID in $scope.devices\n                    && folderCfg.id in $scope.completion[deviceID]\n                    && $scope.completion[deviceID][folderCfg.id].remoteState == 'paused') {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        $scope.deviceFolders = function (deviceCfg) {\n            var folders = [];\n            $scope.folderList().forEach(function (folder) {\n                for (var i = 0; i < folder.devices.length; i++) {\n                    if (folder.devices[i].deviceID === deviceCfg.deviceID) {\n                        folders.push(folder.id);\n                        break;\n                    }\n                }\n            });\n            return folders;\n        };\n\n        $scope.folderLabel = function (folderID) {\n            if (!$scope.folders[folderID]) {\n                return folderID;\n            }\n            var label = $scope.folders[folderID].label;\n            return label && label.length > 0 ? label : folderID;\n        };\n\n        $scope.deviceHasUnacceptedFolders = function (deviceCfg) {\n            if (!(deviceCfg.deviceID in $scope.completion)) {\n                return false;\n            }\n            for (var folderID in $scope.completion[deviceCfg.deviceID]) {\n                if (folderID in $scope.folders\n                    && $scope.completion[deviceCfg.deviceID][folderID].remoteState == 'notSharing') {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        $scope.deviceHasPausedFolders = function (deviceCfg) {\n            if (!(deviceCfg.deviceID in $scope.completion)) {\n                return false;\n            }\n            for (var folderID in $scope.completion[deviceCfg.deviceID]) {\n                if (folderID in $scope.folders\n                    && $scope.completion[deviceCfg.deviceID][folderID].remoteState == 'paused') {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        $scope.deleteFolder = function (id) {\n            hideFolderModal();\n            if ($scope.currentFolder._editing != \"existing\") {\n                return;\n            }\n\n            delete $scope.folders[id];\n            delete $scope.model[id];\n            $scope.config.folders = folderList($scope.folders);\n            recalcLocalStateTotal();\n\n            $scope.saveConfig();\n        };\n\n        function hideFolderModal() {\n            $('#editFolder').modal('hide');\n        }\n\n        function resetRestoreVersions() {\n            $scope.restoreVersions = {\n                folder: null,\n                selections: {},\n                versions: null,\n                tree: null,\n                errors: null,\n                filters: {},\n                massAction: function (name, action) {\n                    $.each($scope.restoreVersions.versions, function (key) {\n                        if (key.indexOf(name + '/') == 0 && (!$scope.restoreVersions.filters.text || key.indexOf($scope.restoreVersions.filters.text) > -1)) {\n                            if (action == 'unset') {\n                                delete $scope.restoreVersions.selections[key];\n                                return;\n                            }\n\n                            var availableVersions = [];\n                            $.each($scope.restoreVersions.filterVersions($scope.restoreVersions.versions[key]), function (idx, version) {\n                                availableVersions.push(version.versionTime);\n                            })\n\n                            if (availableVersions.length) {\n                                availableVersions.sort(function (a, b) { return a - b; });\n                                if (action == 'latest') {\n                                    $scope.restoreVersions.selections[key] = availableVersions.pop();\n                                } else if (action == 'oldest') {\n                                    $scope.restoreVersions.selections[key] = availableVersions.shift();\n                                }\n                            }\n                        }\n                    });\n                },\n                filterVersions: function (versions) {\n                    var filteredVersions = [];\n                    $.each(versions, function (idx, version) {\n                        if (moment(version.versionTime).isBetween($scope.restoreVersions.filters['start'], $scope.restoreVersions.filters['end'], null, '[]')) {\n                            filteredVersions.push(version);\n                        }\n                    });\n                    return filteredVersions;\n                },\n                selectionCount: function () {\n                    var count = 0;\n                    $.each($scope.restoreVersions.selections, function (key, value) {\n                        if (value) {\n                            count++;\n                        }\n                    });\n                    return count;\n                },\n\n                restore: function () {\n                    $scope.restoreVersions.tree.clear();\n                    $scope.restoreVersions.tree = null;\n                    $scope.restoreVersions.versions = null;\n                    var selections = {};\n                    $.each($scope.restoreVersions.selections, function (key, value) {\n                        if (value) {\n                            selections[key] = value;\n                        }\n                    });\n                    $scope.restoreVersions.selections = {};\n\n                    $http.post(urlbase + '/folder/versions?folder=' + encodeURIComponent($scope.restoreVersions.folder), selections).success(function (data) {\n                        if (Object.keys(data).length == 0) {\n                            $('#restoreVersions').modal('hide');\n                        } else {\n                            $scope.restoreVersions.errors = data;\n                        }\n                    });\n                },\n                show: function (folder) {\n                    $scope.restoreVersions.folder = folder;\n\n                    var closed = false;\n                    var modalShown = $q.defer();\n                    $('#restoreVersions').modal().one('hidden.bs.modal', function () {\n                        closed = true;\n                        resetRestoreVersions();\n                    }).one('shown.bs.modal', function () {\n                        modalShown.resolve();\n                    });\n\n                    var dataReceived = $http.get(urlbase + '/folder/versions?folder=' + encodeURIComponent($scope.restoreVersions.folder))\n                        .success(function (data) {\n                            $.each(data, function (key, values) {\n                                $.each(values, function (idx, value) {\n                                    value.modTime = new Date(value.modTime);\n                                    value.versionTime = new Date(value.versionTime);\n                                });\n                                values.sort(function (a, b) {\n                                    return b.versionTime - a.versionTime;\n                                });\n                            });\n                            if (closed) return;\n                            $scope.restoreVersions.versions = data;\n                        });\n\n                    $q.all([dataReceived, modalShown.promise]).then(function () {\n                        $timeout(function () {\n                            if (closed) {\n                                resetRestoreVersions();\n                                return;\n                            } else if ($scope.sizeOf($scope.restoreVersions.versions) === '0') {\n                                return;\n                            }\n\n                            $scope.restoreVersions.tree = $(\"#restoreTree\").fancytree({\n                                extensions: [\"table\", \"filter\", \"glyph\"],\n                                quicksearch: true,\n                                filter: {\n                                    hideExpanders: true,\n                                    mode: \"hide\"\n                                },\n                                glyph: {\n                                    preset: \"awesome5\",\n                                },\n                                table: {\n                                    indentation: 24,\n                                },\n                                strings: {\n                                    loading: $translate.instant(\"Loading data...\"),\n                                    loadError: $translate.instant(\"Failed to load file versions.\"),\n                                    noData: $translate.instant(\"There are no file versions to restore.\")\n                                },\n                                // Set to '1' to silence errors after pressing arrow keys on file nodes.\n                                // Happens on the official option configuration from the developer's site\n                                // too, so probably a bug?\n                                debugLevel: 1,\n                                source: buildTree($scope.restoreVersions.versions),\n                                renderColumns: function (event, data) {\n                                    // Case insensitive sort with folders on top.\n                                    var cmp = function (a, b) {\n                                        var x = (a.isFolder() ? \"0\" : \"1\") + a.title.toLowerCase(),\n                                            y = (b.isFolder() ? \"0\" : \"1\") + b.title.toLowerCase();\n                                        return x === y ? 0 : x > y ? 1 : -1;\n                                    };\n                                    data.tree.getRootNode().sortChildren(cmp, true);\n\n                                    var node = data.node,\n                                        $tdList = $(node.tr).find(\">td\"),\n                                        template;\n                                    if (node.folder) {\n                                        template = '<div ng-include=\"\\'syncthing/folder/restoreVersionsMassActions.html\\'\"/>';\n                                    } else {\n                                        template = '<div ng-include=\"\\'syncthing/folder/restoreVersionsVersionSelector.html\\'\"/>';\n                                    }\n\n                                    var scope = $rootScope.$new(true);\n                                    scope.key = node.key;\n                                    scope.restoreVersions = $scope.restoreVersions;\n\n                                    $tdList.eq(1).html(\n                                        $compile(template)(scope)\n                                    );\n\n                                    // Force angular to redraw.\n                                    $timeout(function () {\n                                        $scope.$apply();\n                                    });\n                                }\n                            }).fancytree(\"getTree\");\n\n                            var minDate = moment(),\n                                maxDate = moment(0, 'X'),\n                                date;\n\n                            // Find version window.\n                            $.each($scope.restoreVersions.versions, function (key) {\n                                $.each($scope.restoreVersions.versions[key], function (idx, version) {\n                                    date = moment(version.versionTime);\n                                    if (date.isBefore(minDate)) {\n                                        minDate = date;\n                                    }\n                                    if (date.isAfter(maxDate)) {\n                                        maxDate = date;\n                                    }\n                                });\n                            });\n\n                            $scope.restoreVersions.filters['start'] = minDate;\n                            $scope.restoreVersions.filters['end'] = maxDate;\n\n                            var ranges = {};\n                            ranges[$translate.instant(\"All Time\")] = [minDate, maxDate];\n                            ranges[$translate.instant(\"Today\")] = [moment().startOf('day'), moment()];\n                            ranges[$translate.instant(\"Yesterday\")] = [moment().subtract(1, 'days').startOf('day'), moment().startOf('day')];\n                            ranges[$translate.instant(\"Last 7 Days\")] = [moment().subtract(6, 'days').startOf('day'), moment()];\n                            ranges[$translate.instant(\"Last 30 Days\")] = [moment().subtract(29, 'days').startOf('day'), moment()];\n                            ranges[$translate.instant(\"This Month\")] = [moment().startOf('month'), moment()];\n                            ranges[$translate.instant(\"Last Month\")] = [moment().subtract(1, 'month').startOf('month'), moment().startOf('month')];\n\n                            // Filter out invalid ranges.\n                            $.each(ranges, function (key, range) {\n                                if (!range[0].isBetween(minDate, maxDate, null, '[]') && !range[1].isBetween(minDate, maxDate, null, '[]')) {\n                                    delete ranges[key];\n                                }\n                            });\n\n                            $(\"#restoreVersionDateRange\").daterangepicker({\n                                timePicker: true,\n                                timePicker24Hour: true,\n                                timePickerSeconds: true,\n                                opens: \"left\",\n                                drops: \"up\",\n                                startDate: minDate,\n                                endDate: maxDate,\n                                minDate: minDate,\n                                maxDate: maxDate,\n                                ranges: ranges,\n                                locale: {\n                                    applyLabel: $translate.instant(\"Apply\"),\n                                    cancelLabel: $translate.instant(\"Cancel\"),\n                                    customRangeLabel: $translate.instant(\"Custom Range\"),\n                                    format: 'YYYY/MM/DD HH:mm:ss',\n                                }\n                            }).on('apply.daterangepicker', function (ev, picker) {\n                                $scope.restoreVersions.filters['start'] = picker.startDate;\n                                $scope.restoreVersions.filters['end'] = picker.endDate;\n                                // Events for this UI element are not managed by angular.\n                                // Force angular to wake up.\n                                $timeout(function () {\n                                    $scope.$apply();\n                                });\n                            });\n                        });\n                    });\n                }\n            };\n        }\n        resetRestoreVersions();\n\n        $scope.$watchCollection('restoreVersions.filters', function () {\n            if (!$scope.restoreVersions.tree) return;\n\n            $scope.restoreVersions.tree.filterNodes(function (node) {\n                if (node.folder) return false;\n                if ($scope.restoreVersions.filters.text && node.key.indexOf($scope.restoreVersions.filters.text) < 0) {\n                    return false;\n                }\n                if ($scope.restoreVersions.filterVersions(node.data.versions).length == 0) {\n                    return false;\n                }\n                return true;\n            });\n        });\n\n        $scope.setAPIKey = function (cfg) {\n            $http.get(urlbase + '/svc/random/string?length=32').success(function (data) {\n                cfg.apiKey = data.random;\n            });\n        };\n\n        $scope.acceptUR = function () {\n            $scope.config.options.urAccepted = $scope.system.urVersionMax;\n            $scope.config.options.urSeen = $scope.system.urVersionMax;\n            $scope.saveConfig();\n            $('#ur').modal('hide');\n        };\n\n        $scope.declineUR = function () {\n            if ($scope.config.options.urAccepted === 0) {\n                $scope.config.options.urAccepted = -1;\n            }\n            $scope.config.options.urSeen = $scope.system.urVersionMax;\n            $scope.saveConfig();\n            $('#ur').modal('hide');\n        };\n\n        $scope.showNeed = function (folder) {\n            $scope.neededFolder = folder;\n            $scope.refreshNeed(1, 10);\n            $('#needed').modal().one('hidden.bs.modal', function () {\n                $scope.needed = undefined;\n                $scope.neededFolder = '';\n            });\n        };\n\n        $scope.showRemoteNeed = function (device) {\n            resetRemoteNeed();\n            $scope.remoteNeedDevice = device;\n            $scope.deviceFolders(device).forEach(function (folder) {\n                var comp = $scope.completion[device.deviceID][folder];\n                if (comp !== undefined && comp.needItems + comp.needDeletes === 0) {\n                    return;\n                }\n                $scope.remoteNeedFolders.push(folder);\n                $scope.refreshRemoteNeed(folder, 1, 10);\n            });\n            $('#remoteNeed').modal().one('hidden.bs.modal', function () {\n                resetRemoteNeed();\n            });\n        };\n\n        $scope.downloadProgressEnabled = function() {\n            return $scope.config.options &&\n                $scope.config.options.progressUpdateIntervalS > 0 &&\n                $scope.folders[$scope.neededFolder] &&\n                $scope.folders[$scope.neededFolder].type != 'receiveencrypted';\n        }\n\n        $scope.showFailed = function (folder) {\n            $scope.failed.folder = folder;\n            $scope.failed = $scope.refreshFailed(1, 10);\n            $('#failed').modal().one('hidden.bs.modal', function () {\n                $scope.failed = {};\n            });\n        };\n\n        $scope.hasFailedFiles = function (folder) {\n            if (!$scope.model[folder]) {\n                return false;\n            }\n            return $scope.model[folder].errors !== 0;\n        };\n\n        $scope.showLocalChanged = function (folder, folderType) {\n            $scope.localChangedFolder = folder;\n            $scope.localChangedType = folderType;\n            $scope.localChanged = $scope.refreshLocalChanged(1, 10);\n            $('#localChanged').modal().one('hidden.bs.modal', function () {\n                $scope.localChanged = {};\n                $scope.localChangedFolder = undefined;\n                $scope.localChangedType = undefined;\n            });\n        };\n\n        $scope.hasReceiveOnlyChanged = function (folderCfg) {\n            if (!folderCfg || folderCfg.type !== [\"receiveonly\",  \"receiveencrypted\"].indexOf(folderCfg.type) === -1) {\n                return false;\n            }\n            var counts = $scope.model[folderCfg.id];\n            return counts && counts.receiveOnlyTotalItems > 0;\n        };\n\n        $scope.revertOverride = function () {\n            $http.post(\n                urlbase + \"/db/\" + $scope.revertOverrideParams.operation +\"?folder=\"\n                +encodeURIComponent($scope.revertOverrideParams.folderID));\n        };\n\n        $scope.revertOverrideConfirmationModal = function (type, folderID) {\n            var params = {\n                type: type,\n                folderID: folderID,\n            };\n            switch (type) {\n                case \"override\":\n                    params.heading = $translate.instant(\"Override Changes\");\n                    params.icon = \"fas fa-arrow-circle-up\"\n                    params.operation = \"override\";\n                    break;\n                case \"revert\":\n                    params.heading = $translate.instant(\"Revert Local Changes\");\n                    params.icon = \"fas fa-arrow-circle-down\"\n                    params.operation = \"revert\";\n                    break;\n                case \"deleteEnc\":\n                    params.heading = $translate.instant(\"Delete Unexpected Items\");\n                    params.icon = \"fas fa-minus-circle\"\n                    params.operation = \"revert\";\n                    break;\n            }\n            $scope.revertOverrideParams = params;\n            $('#revert-override-confirmation').modal('show');\n        };\n\n        $scope.advanced = function () {\n            $scope.advancedConfig = angular.copy($scope.config);\n            $scope.advancedConfig.devices.sort(deviceCompare);\n            $scope.advancedConfig.folders.sort(folderCompare);\n            $scope.advancedConfig.defaults.ignores._lines = function (newValue) {\n                if (arguments.length) {\n                    $scope.advancedConfig.defaults.ignores.lines = newValue.split('\\n');\n                }\n                return $scope.advancedConfig.defaults.ignores.lines.join('\\n');\n            };\n            $('#advanced').modal('show');\n        };\n\n        $scope.showReportPreview = function () {\n            $scope.reportPreview = true;\n        };\n\n        $scope.refreshReportDataPreview = function (ver, diff) {\n            $scope.reportDataPreview = '';\n            if (!ver) {\n                return;\n            }\n            var version = parseInt(ver);\n            if (diff && version > 2) {\n                $q.all([\n                    $http.get(urlbase + '/svc/report?version=' + version),\n                    $http.get(urlbase + '/svc/report?version=' + (version - 1)),\n                ]).then(function (responses) {\n                    var newReport = responses[0].data;\n                    var oldReport = responses[1].data;\n                    angular.forEach(oldReport, function (_, key) {\n                        delete newReport[key];\n                    });\n                    $scope.reportDataPreview = newReport;\n                });\n            } else {\n                $http.get(urlbase + '/svc/report?version=' + version).success(function (data) {\n                    $scope.reportDataPreview = data;\n                }).error($scope.emitHTTPError);\n            }\n        };\n\n        $scope.rescanAllFolders = function () {\n            $http.post(urlbase + \"/db/scan\");\n        };\n\n        $scope.rescanFolder = function (folder) {\n            $http.post(urlbase + \"/db/scan?folder=\" + encodeURIComponent(folder));\n        };\n\n        $scope.setAllFoldersPause = function (pause) {\n            var folderListCache = $scope.folderList();\n\n            for (var i = 0; i < folderListCache.length; i++) {\n                folderListCache[i].paused = pause;\n            }\n\n            $scope.config.folders = folderList(folderListCache);\n            $scope.saveConfig();\n        };\n\n        $scope.isAtleastOneFolderPausedStateSetTo = function (pause) {\n            var folderListCache = $scope.folderList();\n\n            for (var i = 0; i < folderListCache.length; i++) {\n                if (folderListCache[i].paused == pause) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n\n        $scope.activateAllFsWatchers = function () {\n            var folders = $scope.folderList();\n\n            $.each(folders, function (i) {\n                if (folders[i].fsWatcherEnabled) {\n                    return;\n                }\n                folders[i].fsWatcherEnabled = true;\n                if (folders[i].rescanIntervalS === 0) {\n                    return;\n                }\n                // Delay full scans, but scan at least once per day\n                folders[i].rescanIntervalS *= 60;\n                if (folders[i].rescanIntervalS > 86400) {\n                    folders[i].rescanIntervalS = 86400;\n                }\n            });\n\n            $scope.config.folders = folders;\n            $scope.saveConfig();\n        };\n\n        $scope.bumpFile = function (folder, file) {\n            var url = urlbase + \"/db/prio?folder=\" + encodeURIComponent(folder) + \"&file=\" + encodeURIComponent(file);\n            // In order to get the right view of data in the response.\n            url += \"&page=\" + $scope.needed.page;\n            url += \"&perpage=\" + $scope.needed.perpage;\n            $http.post(url).success(function (data) {\n                if ($scope.neededFolder === folder) {\n                    console.log(\"bumpFile\", folder, data);\n                    parseNeeded(data);\n                }\n            }).error($scope.emitHTTPError);\n        };\n\n        $scope.versionString = function () {\n            if (!$scope.version.version) {\n                return '';\n            }\n\n            var os = {\n                'darwin': 'macOS',\n                'dragonfly': 'DragonFly BSD',\n                'freebsd': 'FreeBSD',\n                'openbsd': 'OpenBSD',\n                'netbsd': 'NetBSD',\n                'linux': 'Linux',\n                'windows': 'Windows',\n                'solaris': 'Solaris'\n            }[$scope.version.os] || $scope.version.os;\n\n            var arch = {\n                '386': '32-bit Intel/AMD',\n                'amd64': '64-bit Intel/AMD',\n                'arm': '32-bit ARM',\n                'arm64': '64-bit ARM',\n                'ppc64': '64-bit PowerPC',\n                'ppc64le': '64-bit PowerPC (LE)',\n                'mips': '32-bit MIPS',\n                'mipsle': '32-bit MIPS (LE)',\n                'mips64': '64-bit MIPS',\n                'mips64le': '64-bit MIPS (LE)',\n                'riscv64': '64-bit RISC-V',\n                's390x': '64-bit z/Architecture',\n            }[$scope.version.arch] || $scope.version.arch;\n\n            if ($scope.version.container) {\n                arch += \" Container\";\n            }\n\n            return $scope.version.version + ', ' + os + ' (' + arch + ')';\n        };\n\n        $scope.versionBase = function () {\n            if (!$scope.version.version) {\n                return '';\n            }\n            var version = $scope.version.version;\n            var pos = version.indexOf('-');\n            if (pos > 0) {\n                version = version.slice(0, pos);\n            }\n            return version;\n        };\n\n        $scope.docsURL = function (path) {\n            var url = 'https://docs.syncthing.net';\n            if (!path) {\n                // Undefined or null should become a valid string.\n                path = '';\n            }\n            var hash = path.indexOf('#');\n            if (hash != -1) {\n                url += '/' + path.slice(0, hash);\n                url += '?version=' + $scope.versionBase();\n                url += path.slice(hash);\n            } else {\n                url += '/' + path;\n                url += '?version=' + $scope.versionBase();\n            }\n            return url;\n        };\n\n        $scope.inputTypeFor = function (key, value) {\n            if (key.substr(0, 1) === '_') {\n                return 'skip';\n            }\n            if (value === null) {\n                return 'null';\n            }\n            if (typeof value === 'number') {\n                return 'number';\n            }\n            if (typeof value === 'boolean') {\n                return 'checkbox';\n            }\n            if (value instanceof Array) {\n                return 'list';\n            }\n            if (typeof value === 'object') {\n                return 'skip';\n            }\n            return 'text';\n        };\n\n        $scope.themeName = function (theme) {\n            var translation = $translate.instant(\"theme-name-\" + theme);\n            if (translation.indexOf(\"theme-name-\") == 0) {\n                // Fall back to simple Title Casing on missing translation\n                translation = theme.toLowerCase().replace(/(?:^|\\s)\\S/g, function (a) {\n                    return a.toUpperCase();\n                });\n            }\n            return translation;\n        };\n\n        $scope.modalLoaded = function () {\n            // once all modal elements have been processed\n            if ($('modal').length === 0) {\n                // pseudo main. called on all definitions assigned\n                initController();\n            }\n        };\n\n        $scope.toggleUnits = function () {\n            $scope.metricRates = !$scope.metricRates;\n            try {\n                window.localStorage[\"metricRates\"] = $scope.metricRates;\n            } catch (exception) { }\n        };\n\n        $scope.sizeOf = function (dict) {\n            if (dict === undefined) {\n                return 0;\n            }\n            return Object.keys(dict).length;\n        };\n\n        $scope.has = function (array, element) {\n            return array.indexOf(element) >= 0;\n        };\n\n        $scope.dismissNotification = function (id) {\n            var idx = $scope.config.options.unackedNotificationIDs.indexOf(id);\n            if (idx > -1) {\n                $scope.config.options.unackedNotificationIDs.splice(idx, 1);\n                $scope.saveConfig();\n            }\n        };\n\n        $scope.abbreviatedError = function (addr) {\n            var status = $scope.system.lastDialStatus[addr];\n            if (!status || !status.error) {\n                return null;\n            }\n            var time = $filter('date')(status.when, \"HH:mm:ss\")\n            var err = status.error.replace(/.+: /, '');\n            return err + \" (\" + time + \")\";\n        };\n\n        $scope.setCrashReportingEnabled = function (enabled) {\n            $scope.config.options.crashReportingEnabled = enabled;\n            $scope.saveConfig();\n        };\n\n        $scope.isUnixAddress = function (address) {\n            return address != null &&\n                (address.indexOf('/') == 0 ||\n                    address.indexOf('unix://') == 0 ||\n                    address.indexOf('unixs://') == 0);\n        };\n\n        $scope.shareDeviceIdDialog = function (method) {\n            // This function can be used to share both user's own and remote\n            // device IDs. Three sharing methods are used - copy to clipboard,\n            // send by email, and send by SMS.\n            var params = {\n                method: method,\n            };\n            var deviceID = $scope.currentDevice.deviceID;\n            var deviceName = $scope.deviceName($scope.currentDevice);\n\n            // Title and footer can be reused between different sharing\n            // methods, hence we define them separately before the body.\n            var title = $translate.instant('Syncthing device ID for \"{%devicename%}\"', {devicename: deviceName});\n            var footer = $translate.instant(\"Learn more at {%url%}\", {url: \"https://syncthing.net\"});\n\n            switch (method) {\n                case \"email\":\n                    params.heading = $translate.instant(\"Share by Email\");\n                    params.icon = \"fa fa-envelope-o\";\n                    // Email message format requires using CRLF for line breaks.\n                    // Ref: https://datatracker.ietf.org/doc/html/rfc5322\n                    params.subject = title;\n                    params.body = [\n                        $translate.instant('To connect with the Syncthing device named \"{%devicename%}\", add a new remote device on your end with this ID:', {devicename: deviceName}),\n                        deviceID,\n                        $translate.instant(\"Syncthing is a continuous file synchronization program. It synchronizes files between two or more computers in real time, safely protected from prying eyes. Your data is your data alone and you deserve to choose where it is stored, whether it is shared with some third party, and how it's transmitted over the internet.\"),\n                        footer\n                    ].join('\\r\\n\\r\\n');\n                    break;\n                case \"sms\":\n                    params.heading = $translate.instant(\"Share by SMS\");\n                    params.icon = \"fa fa-comments-o\";\n                    // SMS is limited to 160 characters (non-Unicode), so we keep\n                    // it as short as possible, e.g. by stripping hyphens from\n                    // device ID. The current minimum length is around 140 chars,\n                    // but some room is required for longer sharing device names.\n                    params.body = [\n                        title,\n                        deviceID.replace(/-/g, ''),\n                        footer\n                    ].join('\\n');\n                    break;\n            }\n\n            $scope.shareDeviceIdParams = params;\n            $('#share-device-id-dialog').modal('show');\n        };\n\n        $scope.shareDeviceId = function () {\n            switch ($scope.shareDeviceIdParams.method) {\n                case 'email':\n                    location.href = 'mailto:?subject=' + encodeURIComponent($scope.shareDeviceIdParams.subject) + '&body=' + encodeURIComponent($scope.shareDeviceIdParams.body);\n                    break;\n                case 'sms':\n                    // Ref1: https://rfc-editor.org/rfc/rfc5724\n                    // Ref2: https://stackoverflow.com/questions/6480462/how-to-pre-populate-the-sms-body-text-via-an-html-link\n                    location.href = 'sms:?&body=' + encodeURIComponent($scope.shareDeviceIdParams.body);\n                    break;\n            }\n        }\n\n        $scope.showTemporaryTooltip = function (event, tooltip) {\n            // This function can be used to display a temporary tooltip above\n            // the current element. This way, we can dynamically add a tooltip\n            // with explanatory text after the user performs an interactive\n            // operation, e.g. clicks a button. If the element already has a\n            // tooltip, it will be saved first and then restored once the user\n            // moves focus to a different element.\n            var e = event.currentTarget;\n            var oldTooltip = e.getAttribute('data-original-title');\n\n            e.setAttribute('data-original-title', tooltip);\n            $(e).tooltip('show');\n\n            if (oldTooltip) {\n                e.setAttribute('data-original-title', oldTooltip);\n            } else {\n                e.removeAttribute('data-original-title');\n            }\n        };\n\n        $scope.copyToClipboard = function (event, content) {\n            var success = $translate.instant(\"Copied!\");\n            var failure = $translate.instant(\"Copy failed! Try to select and copy manually.\");\n            var message = success;\n\n            if (navigator.clipboard && navigator.clipboard.writeText) {\n                // Default for modern browsers on localhost or HTTPS. Doesn't\n                // work on unencrypted HTTP for security reasons.\n                navigator.clipboard.writeText(content);\n            } else if (window.clipboardData && window.clipboardData.setData) {\n                // Fallback for Internet Explorer. Needs to go second before\n                // \"document.queryCommandSupported\", as the browser supports the\n                // other method too, yet it can often be disabled for security\n                // reasons, causing the copy to fail. The IE-specific method is\n                // more reliable.\n                window.clipboardData.setData('Text', content);\n            } else if (document.queryCommandSupported) {\n                // Fallback for modern browsers on HTTP and non-IE old browsers.\n                // Check for document.queryCommandSupported(\"copy\") support is\n                // omitted on purpose, as old Chrome versions reported \"false\"\n                // despite supporting the feature. The position and opacity\n                // hacks are needed to work inside Bootstrap modals.\n                var e = event.currentTarget;\n                var textarea = document.createElement(\"textarea\");\n\n                e.appendChild(textarea);\n                textarea.style.position = \"fixed\";\n                textarea.style.opacity = \"0\";\n                textarea.textContent = content;\n                textarea.select();\n\n                try {\n                    document.execCommand(\"copy\");\n                } catch (ex) {\n                    message = failure;\n                } finally {\n                    e.removeChild(textarea);\n                }\n            } else {\n                message = failure;\n            }\n\n            $scope.showTemporaryTooltip(event, message);\n        };\n\n        $scope.newXattrEntry = function () {\n            var entries = $scope.currentFolder.xattrFilter.entries;\n            var newEntry = {match: '', permit: false};\n\n            if (entries.some(function (n) {\n                return n.match == '';\n            })) {\n                return;\n            }\n\n            if (entries.length > 0 && entries[entries.length -1].match === '*') {\n                if (newEntry.match !== '*') {\n                    entries.splice(entries.length - 1, 0, newEntry);\n                }\n\n                return;\n            }\n\n            entries.push(newEntry);\n        };\n\n        $scope.removeXattrEntry = function (entry) {\n            $scope.currentFolder.xattrFilter.entries = $scope.currentFolder.xattrFilter.entries.filter(function (n) {\n                return n !== entry;\n            });\n        };\n\n        $scope.getXattrHint = function () {\n            var xattrFilter = $scope.currentFolder.xattrFilter;\n            if (xattrFilter == null || xattrFilter == {}) {\n                return '';\n            }\n            var filterEntries = xattrFilter.entries;\n            if (filterEntries.length === 0) {\n                return '';\n            }\n\n            // When the user explicitly added a wild-card, we don't show hints.\n            if (filterEntries.length === 1 && filterEntries[0].match === '*') {\n                return '';\n            }\n            // If all the filter entries are 'deny', we suggest adding a permit-any\n            // rule in the end since the default is already deny in that case.\n            if (filterEntries.every(function (entry) {\n                return entry.permit === false;\n            })) {\n                return  $translate.instant('Hint: only deny-rules detected while the default is deny. Consider adding \"permit any\" as last rule.');\n            }\n\n            return '';\n        };\n\n        $scope.getXattrDefault = function () {\n            var xattrFilter = $scope.currentFolder.xattrFilter;\n            if (xattrFilter == null || xattrFilter == {}) {\n                return '';\n            }\n\n            var filterEntries = xattrFilter.entries;\n            // No entries present, default is thus 'allow'\n            if (filterEntries.length === 0) {\n                return $translate.instant('permit');\n            }\n            // If any rule is present and the last entry isn't a wild-card, the default is deny.\n            if (filterEntries[filterEntries.length -1].match !== '*') {\n                return $translate.instant('deny');\n            }\n\n            return '';\n        };\n\n        $scope.validateXattrFilter = function () {\n            // Filtering out empty rules when saving the config\n            $scope.currentFolder.xattrFilter.entries = $scope.currentFolder.xattrFilter.entries.filter(function (n) {\n                return n.match !== \"\";\n            });\n        };\n    })\n    .directive('shareTemplate', function () {\n        return {\n            templateUrl: 'syncthing/core/editShareTemplate.html',\n            scope: {\n                selected: '=',\n                encryptionPasswords: '=',\n                id: '@',\n                label: '@',\n                folderType: '@',\n                remoteState: '@',\n                untrusted: '=',\n            },\n            link: function (scope, elem, attrs) {\n                var plain = false;\n                scope.togglePasswordVisibility = function() {\n                    scope.plain = !scope.plain;\n                };\n            },\n        }\n    });\n", "<modal id=\"editDevice\" status=\"default\" icon=\"{{editDeviceModalIcon()}}\" heading=\"{{editDeviceModalTitle()}}\" large=\"yes\" closeable=\"yes\">\n  <div class=\"modal-body\">\n    <form role=\"form\" name=\"deviceEditor\">\n      <ul class=\"nav nav-tabs\" ng-init=\"loadFormIntoScope(deviceEditor)\">\n        <li class=\"active\"><a data-toggle=\"tab\" href=\"#device-general\"><span class=\"fas fa-cog\"></span> <span translate>General</span></a></li>\n        <li ng-if=\"!editingDeviceDefaults()\"><a data-toggle=\"tab\" href=\"#device-sharing\"><span class=\"fas fa-share-alt\"></span> <span translate>Sharing</span></a></li>\n        <li><a data-toggle=\"tab\" href=\"#device-advanced\"><span class=\"fas fa-cogs\"></span> <span translate>Advanced</span></a></li>\n      </ul>\n      <div class=\"tab-content\">\n        <div id=\"device-general\" class=\"tab-pane in active\">\n          <div ng-if=\"!editingDeviceDefaults()\" class=\"form-group\" ng-class=\"{'has-error': deviceEditor.deviceID.$invalid && deviceEditor.deviceID.$dirty}\" ng-init=\"loadFormIntoScope(deviceEditor)\">\n            <label translate for=\"deviceID\">Device ID</label>\n            <div class=\"input-group\">\n              <input ng-if=\"editingDeviceNew()\" name=\"deviceID\" id=\"deviceID\" class=\"form-control text-monospace\" type=\"text\" ng-model=\"currentDevice.deviceID\" required=\"\" valid-deviceid list=\"discovery-list\" aria-required=\"true\" />\n              <div ng-if=\"!editingDeviceNew()\" class=\"well well-sm form-control text-monospace\" style=\"height: auto;\" select-on-click>{{currentDevice.deviceID}}</div>\n              <div id=\"shareDeviceIdButtons\" class=\"input-group-btn\">\n                <button type=\"button\" class=\"btn btn-default\" ng-click=\"copyToClipboard($event, currentDevice.deviceID)\" ng-disabled=\"editingDeviceNew() && !deviceEditor.deviceID.$valid\" tooltip data-original-title=\"{{ 'Copy' | translate }}\">\n                  <span class=\"fa fa-lg fa-clone\"></span>\n                </button>\n                <button type=\"button\" class=\"btn btn-default\" ng-click=\"shareDeviceIdDialog('email')\" ng-disabled=\"editingDeviceNew() && !deviceEditor.deviceID.$valid\" tooltip data-original-title=\"{{ 'Share by Email' | translate }}\">\n                  <span class=\"fa fa-lg fa-envelope-o\"></span>\n                </button>\n                <button type=\"button\" class=\"btn btn-default\" ng-click=\"shareDeviceIdDialog('sms')\" ng-disabled=\"editingDeviceNew() && !deviceEditor.deviceID.$valid\" tooltip data-original-title=\"{{ 'Share by SMS' | translate }}\">\n                  <span class=\"fa fa-lg fa-comments-o\"></span>\n                </button>\n                <button type=\"button\" class=\"btn btn-default\" data-toggle=\"modal\" data-target=\"#idqr\" ng-disabled=\"editingDeviceNew() && !deviceEditor.deviceID.$valid\" tooltip data-original-title=\"{{ 'Show QR' | translate }}\">\n                  <span class=\"fa fa-lg fa-qrcode\"></span>\n                </button>\n              </div>\n            </div>\n            <div ng-if=\"editingDeviceNew()\">\n              <datalist id=\"discovery-list\">\n                <option ng-repeat=\"id in discoveryUnknown\" value=\"{{id}}\" />\n              </datalist>\n              <div class=\"help-block\" ng-if=\"discoveryUnknown && discoveryUnknown.length !== 0\">\n                <span translate>You can also select one of these nearby devices:</span>\n                <ul>\n                  <li ng-repeat=\"id in discoveryUnknown.slice(0, 5)\" style=\"list-style-type: none;\">\n                    <a href=\"#\" ng-click=\"currentDevice.deviceID = id\">\n                      <identicon data-value=\"id\"></identicon>&nbsp;&nbsp;{{id}}\n                    </a>\n                  </li>\n                </ul>\n              </div>\n              <p class=\"help-block\">\n                <span translate ng-if=\"deviceEditor.deviceID.$valid || deviceEditor.deviceID.$pristine\">The device ID to enter here can be found in the \"Actions &gt; Show ID\" dialog on the other device. Spaces and dashes are optional (ignored).</span>\n                <span translate ng-show=\"deviceEditor.deviceID.$valid || deviceEditor.deviceID.$pristine\">When adding a new device, keep in mind that this device must be added on the other side too.</span>\n                <span translate ng-if=\"deviceEditor.deviceID.$error.required && deviceEditor.deviceID.$dirty\">The device ID cannot be blank.</span>\n                <span translate ng-if=\"deviceEditor.deviceID.$error.validDeviceid && deviceEditor.deviceID.$dirty\">The entered device ID does not look valid. It should be a 52 or 56 character string consisting of letters and numbers, with spaces and dashes being optional.</span>\n                <span translate ng-if=\"deviceEditor.deviceID.$error.unique && deviceEditor.deviceID.$dirty\">A device with that ID is already added.</span>\n              </p>\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label translate for=\"name\">Device Name</label>\n            <input id=\"name\" class=\"form-control\" type=\"text\" ng-model=\"currentDevice.name\" />\n            <p translate ng-if=\"currentDevice.deviceID == myID\" class=\"help-block\">Shown instead of Device ID in the cluster status. Will be advertised to other devices as an optional default name.</p>\n            <p translate ng-if=\"currentDevice.deviceID != myID\" class=\"help-block\">Shown instead of Device ID in the cluster status. Will be updated to the name the device advertises if left empty.</p>\n          </div>\n        </div>\n        <div ng-if=\"!editingDeviceDefaults()\" id=\"device-sharing\" class=\"tab-pane\">\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <div class=\"checkbox\">\n                  <label>\n                    <input type=\"checkbox\" ng-model=\"currentDevice.introducer\">\n                    <span translate>Introducer</span>\n                    <p translate class=\"help-block\">Add devices from the introducer to our device list, for mutually shared folders.</p>\n                  </label>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <div class=\"checkbox\">\n                  <label>\n                    <input type=\"checkbox\" ng-model=\"currentDevice.autoAcceptFolders\">\n                    <span translate>Auto Accept</span>\n                    <p translate class=\"help-block\">Automatically create or share folders that this device advertises at the default path.</p>\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <div class=\"form-horizontal\" ng-if=\"currentSharing.shared.length\">\n              <label translate for=\"folders\">Shared Folders</label>\n              <p class=\"help-block\">\n                <span translate>Deselect folders to stop sharing with this device.</span>&emsp;\n                <small><a href=\"#\" ng-click=\"selectAllSharedFolders(true)\" translate>Select All</a>&emsp;\n                  <a href=\"#\" ng-click=\"selectAllSharedFolders(false)\" translate>Deselect All</a></small>\n              </p>\n              <div class=\"form-group\" ng-repeat=\"folder in currentSharing.shared\">\n                <share-template selected=\"currentSharing.selected\" encryption-passwords=\"currentSharing.encryptionPasswords\" id=\"{{folder.id}}\" label=\"{{folderLabel(folder.id)}}\" folder-type=\"{{folder.type}}\" untrusted=\"currentDevice.untrusted\" remote-state=\"{{completion[currentDevice.deviceID][folder.id].remoteState}}\" />\n              </div>\n              <p class=\"help-block\" ng-if=\"deviceHasUnacceptedFolders(currentDevice)\">\n                <sup>1</sup> <span translate>The remote device has not accepted sharing this folder.</span>\n              </p>\n              <p class=\"help-block\" ng-if=\"deviceHasPausedFolders(currentDevice)\">\n                <sup>2</sup> <span translate>The remote device has paused this folder.</span>\n              </p>\n            </div>\n            <div class=\"form-horizontal\" ng-if=\"currentSharing.unrelated.length\">\n              <label translate for=\"folders\">Unshared Folders</label>\n              <p class=\"help-block\" ng-if=\"folderList().length > 0\">\n                <span translate>Select additional folders to share with this device.</span>&emsp;\n                <small><a href=\"#\" ng-click=\"selectAllUnrelatedFolders(true)\" translate>Select All</a>&emsp;\n                  <a href=\"#\" ng-click=\"selectAllUnrelatedFolders(false)\" translate>Deselect All</a></small>\n              </p>\n              <p class=\"help-block\" ng-if=\"folderList().length == 0\">\n                <span translate>There are no folders to share with this device.</span>\n              </p>\n              <div class=\"form-group\" ng-repeat=\"folder in currentSharing.unrelated\">\n                <share-template selected=\"currentSharing.selected\" encryption-passwords=\"currentSharing.encryptionPasswords\" id=\"{{folder.id}}\" label=\"{{folderLabel(folder.id)}}\" folder-type=\"{{folder.type}}\" untrusted=\"currentDevice.untrusted\" />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div id=\"device-advanced\" class=\"tab-pane\">\n          <div class=\"row form-group\">\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label translate for=\"addresses\">Addresses</label>\n                <input ng-disabled=\"currentDevice.deviceID == myID\" id=\"addresses\" class=\"form-control\" type=\"text\" ng-model=\"currentDevice._addressesStr\"></input>\n                <p translate class=\"help-block\">Enter comma separated (\"tcp://ip:port\", \"tcp://host:port\") addresses or \"dynamic\" to perform automatic discovery of the address.</p>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label translate>Compression</label>\n                <select class=\"form-control\" ng-model=\"currentDevice.compression\">\n                  <option value=\"always\" translate>All Data</option>\n                  <option value=\"metadata\" translate>Metadata Only</option>\n                  <option value=\"never\" translate>Off</option>\n                </select>\n              </div>\n            </div>\n          </div>\n          <div class=\"row form-group\">\n            <div class=\"col-md-12\">\n              <label translate>Device rate limits</label>\n              <div class=\"row\">\n                <div class=\"col-md-6\" ng-class=\"{'has-error': deviceEditor.maxRecvKbps.$invalid && deviceEditor.maxRecvKbps.$dirty}\">\n                  <div class=\"row\">\n                    <span class=\"col-md-8\" translate>Incoming Rate Limit (KiB/s)</span>\n                    <div class=\"col-md-4\">\n                      <input name=\"maxRecvKbps\" id=\"maxRecvKbps\" class=\"form-control\" type=\"number\" pattern=\"\\d+\" ng-model=\"currentDevice.maxRecvKbps\" min=\"0\" />\n                    </div>\n                  </div>\n                  <p class=\"help-block\" ng-if=\"!deviceEditor.maxRecvKbps.$valid && deviceEditor.maxRecvKbps.$dirty\" translate>The rate limit must be a non-negative number (0: no limit)</p>\n                </div>\n                <div class=\"col-md-6\" ng-class=\"{'has-error': deviceEditor.maxSendKbps.$invalid && deviceEditor.maxSendKbps.$dirty}\">\n                  <div class=\"row\">\n                    <span class=\"col-md-8\" translate>Outgoing Rate Limit (KiB/s)</span>\n                    <div class=\"col-md-4\">\n                      <input name=\"maxSendKbps\" id=\"maxSendKbps\" class=\"form-control\" type=\"number\" pattern=\"\\d+\" ng-model=\"currentDevice.maxSendKbps\" min=\"0\" />\n                    </div>\n                  </div>\n                  <p class=\"help-block\" ng-if=\"!deviceEditor.maxSendKbps.$valid && deviceEditor.maxSendKbps.$dirty\" translate>The rate limit must be a non-negative number (0: no limit)</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"form-group col-md-6\">\n              <input type=\"checkbox\" id=\"untrusted\" ng-model=\"currentDevice.untrusted\" />\n              <label for=\"untrusted\" translate>Untrusted</label>\n              <p translate class=\"help-block\">All folders shared with this device must be protected by a password, such that all sent data is unreadable without the given password.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-primary btn-sm\" ng-click=\"saveDevice()\" ng-disabled=\"deviceEditor.$invalid\">\n      <span class=\"fas fa-check\"></span>&nbsp;<span translate>Save</span>\n    </button>\n    <button type=\"button\" class=\"btn btn-default btn-sm\" data-dismiss=\"modal\">\n      <span class=\"fas fa-times\"></span>&nbsp;<span translate>Close</span>\n    </button>\n    <div ng-if=\"editingDeviceExisting()\" class=\"pull-left\">\n      <button type=\"button\" class=\"btn btn-warning btn-sm\" data-toggle=\"modal\" data-target=\"#remove-device-confirmation\">\n        <span class=\"fas fa-minus-circle\"></span>&nbsp;<span translate>Remove</span>\n      </button>\n    </div>\n  </div>\n</modal>\n", "<style> th, td { padding: 6px; } </style>\n<modal id=\"globalChanges\" status=\"default\" icon=\"fas fa-info-circle\" heading=\"{{'Recent Changes' | translate}}\" large=\"yes\" closeable=\"yes\">\n  <div class=\"modal-body\">\n    <div class=\"table-responsive\">\n      <table class=\"table-condensed table-striped table\" style=\"table-layout: auto;\">\n        <thead>\n          <tr>\n            <th translate>Device</th>\n            <th translate>Action</th>\n            <th translate>Type</th>\n            <th translate>Folder</th>\n            <th translate>Path</th>\n            <th translate>Time</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr ng-repeat=\"changeEvent in globalChangeEvents\">\n            <td ng-if=\"changeEvent.data.modifiedBy\">{{friendlyNameFromShort(changeEvent.data.modifiedBy)}}</td>\n            <td ng-if=\"!changeEvent.data.modifiedBy\"><span translate>Unknown</span></td>\n            <td ng-switch=\"changeEvent.data.action\">\n              <span ng-switch-when=\"modified\" translate>modified</span>\n              <span ng-switch-when=\"deleted\" translate>deleted</span>\n              <span ng-switch-default>{{changeEvent.data.action}}</span>\n            </td>\n            <td ng-switch=\"changeEvent.data.type\">\n              <span ng-switch-when=\"file\" translate>file</span>\n              <span ng-switch-when=\"folder\" translate>folder</span>\n              <span ng-switch-default>{{changeEvent.data.type}}</span>\n            </td>\n            <td class=\"no-overflow-ellipse\">{{folderLabel(changeEvent.data.folder)}}</td>\n            <td class=\"word-break-all no-overflow-ellipse\">{{changeEvent.data.path}}</td>\n            <td class=\"no-overflow-ellipse\">{{changeEvent.time | date:\"yyyy-MM-dd HH:mm:ss\"}}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" data-dismiss=\"modal\">\n      <span class=\"fas fa-times\"></span>&nbsp;<span translate>Close</span>\n    </button>\n  </div>\n</modal>\n", "<modal id=\"editFolder\" status=\"default\" icon=\"{{editFolderModalIcon()}}\" heading=\"{{editFolderModalTitle()}}\" large=\"yes\" closeable=\"yes\">\n  <div class=\"modal-body\">\n    <form role=\"form\" name=\"folderEditor\">\n      <ul class=\"nav nav-tabs\" ng-init=\"loadFormIntoScope(folderEditor)\">\n        <li ng-class=\"{'disabled': currentFolder._editing == 'new-ignores'}\" class=\"active\"><a data-toggle=\"tab\" href=\"{{currentFolder._editing == 'new-ignores' ? '' : '#folder-general'}}\"><span class=\"fas fa-cog\"></span> <span translate>General</span></a></li>\n        <li ng-class=\"{'disabled': currentFolder._editing == 'new-ignores'}\"><a data-toggle=\"tab\" href=\"{{currentFolder._editing == 'new-ignores' ? '' : '#folder-sharing'}}\"><span class=\"fas fa-share-alt\"></span> <span translate>Sharing</span></a></li>\n        <li ng-class=\"{'disabled': currentFolder._editing == 'new-ignores'}\"><a data-toggle=\"tab\" href=\"{{currentFolder._editing == 'new-ignores' ? '' : '#folder-versioning'}}\"><span class=\"fas fa-copy\"></span> <span translate>File Versioning</span></a></li>\n        <li ng-class=\"{'disabled': currentFolder._recvEnc}\"><a data-toggle=\"tab\" href=\"{{currentFolder._recvEnc ? '' : '#folder-ignores'}}\"><span class=\"fas fa-filter\"></span> <span translate>Ignore Patterns</span></a></li>\n        <li ng-class=\"{'disabled': currentFolder._editing == 'new-ignores'}\"><a data-toggle=\"tab\" href=\"{{currentFolder._editing == 'new-ignores' ? '' : '#folder-advanced'}}\"><span class=\"fas fa-cogs\"></span> <span translate>Advanced</span></a></li>\n      </ul>\n      <div class=\"tab-content\">\n\n        <div id=\"folder-general\" class=\"tab-pane in active\">\n          <div class=\"form-group\" ng-class=\"{'has-error': folderEditor.folderLabel.$invalid && folderEditor.folderLabel.$dirty && !editingFolderDefaults()}\">\n            <label for=\"folderLabel\"><span translate>Folder Label</span></label>\n            <input name=\"folderLabel\" id=\"folderLabel\" class=\"form-control\" type=\"text\" ng-model=\"currentFolder.label\" value=\"{{currentFolder.label}}\" />\n            <p class=\"help-block\">\n              <span translate ng-if=\"folderEditor.folderLabel.$valid || folderEditor.folderLabel.$pristine\">Optional descriptive label for the folder. Can be different on each device.</span>\n            </p>\n          </div>\n          <div ng-if=\"!editingFolderDefaults()\" class=\"form-group\" ng-class=\"{'has-error': folderEditor.folderID.$invalid && folderEditor.folderID.$dirty}\">\n            <label for=\"folderID\"><span translate>Folder ID</span></label>\n            <input name=\"folderID\" ng-readonly=\"has(['existing', 'new-pending'], currentFolder._editing)\" id=\"folderID\" class=\"form-control\" type=\"text\" ng-model=\"currentFolder.id\" required=\"\" aria-required=\"true\" unique-folder value=\"{{currentFolder.id}}\" />\n            <p class=\"help-block\">\n              <span translate ng-if=\"folderEditor.folderID.$valid || folderEditor.folderID.$pristine\">Required identifier for the folder. Must be the same on all cluster devices.</span>\n              <span translate ng-if=\"folderEditor.folderID.$error.uniqueFolder\">The folder ID must be unique.</span>\n              <span translate ng-if=\"folderEditor.folderID.$error.required && folderEditor.folderID.$dirty\">The folder ID cannot be blank.</span>\n              <span translate ng-show=\"!editingFolderExisting()\">When adding a new folder, keep in mind that the Folder ID is used to tie folders together between devices. They are case sensitive and must match exactly between all devices.</span>\n            </p>\n          </div>\n          <div class=\"form-group\" ng-class=\"{'has-error': folderEditor.folderPath.$invalid && folderEditor.folderPath.$dirty && !editingFolderDefaults()}\">\n            <label translate for=\"folderPath\">Folder Path</label>\n            <input name=\"folderPath\" ng-readonly=\"editingFolderExisting()\" id=\"folderPath\" class=\"form-control\" type=\"text\" ng-model=\"currentFolder.path\" list=\"directory-list\" ng-required=\"!editingFolderDefaults()\" ng-aria-required=\"!editingFolderDefaults()\" path-is-sub-dir />\n            <datalist id=\"directory-list\">\n              <option ng-repeat=\"directory in directoryList\" value=\"{{ directory }}\" />\n            </datalist>\n            <p class=\"help-block\">\n              <span ng-if=\"folderEditor.folderPath.$valid || folderEditor.folderPath.$pristine\"><span translate>Path to the folder on the local computer. Will be created if it does not exist. The tilde character (~) can be used as a shortcut for</span> <code>{{system.tilde}}</code>.</br></span>\n              <span translate ng-if=\"folderEditor.folderPath.$error.required && folderEditor.folderPath.$dirty && !editingFolderDefaults()\">The folder path cannot be blank.</span>\n              <span class=\"text-danger\" translate translate-value-other-folder=\"{{folderPathErrors.otherID}}\" ng-if=\"folderPathErrors.isSub && folderPathErrors.otherLabel.length == 0\">Warning, this path is a subdirectory of an existing folder \"{%otherFolder%}\".</span>\n              <span class=\"text-danger\" translate translate-value-other-folder=\"{{folderPathErrors.otherID}}\" translate-value-other-folder-label=\"{{folderPathErrors.otherLabel}}\" ng-if=\"folderPathErrors.isSub && folderPathErrors.otherLabel.length != 0\">Warning, this path is a subdirectory of an existing folder \"{%otherFolderLabel%}\" ({%otherFolder%}).</span>\n              <span ng-if=\"folderPathErrors.isParent && !editingFolderDefaults()\">\n                <span class=\"text-danger\" translate translate-value-other-folder=\"{{folderPathErrors.otherID}}\" ng-if=\"folderPathErrors.otherLabel.length == 0\">Warning, this path is a parent directory of an existing folder \"{%otherFolder%}\".</span>\n                <span class=\"text-danger\" translate translate-value-other-folder=\"{{folderPathErrors.otherID}}\" translate-value-other-folder-label=\"{{folderPathErrors.otherLabel}}\" ng-if=\"folderPathErrors.otherLabel.length != 0\">Warning, this path is a parent directory of an existing folder \"{%otherFolderLabel%}\" ({%otherFolder%}).</span>\n              </span>\n            </p>\n          </div>\n        </div>\n\n        <div id=\"folder-sharing\" class=\"tab-pane\">\n          <div class=\"form-horizontal\" ng-if=\"currentSharing.shared.length\">\n            <label translate>Currently Shared With Devices</label>\n            <p class=\"help-block\">\n              <span translate>Deselect devices to stop sharing this folder with.</span>&emsp;\n              <small><a href=\"#\" ng-click=\"selectAllSharedDevices(true)\" translate>Select All</a>&emsp;\n                <a href=\"#\" ng-click=\"selectAllSharedDevices(false)\" translate>Deselect All</a></small>\n            </p>\n            <div class=\"form-group\" ng-repeat=\"device in currentSharing.shared\">\n              <share-template selected=\"currentSharing.selected\" encryption-passwords=\"currentSharing.encryptionPasswords\" id=\"{{device.deviceID}}\" label=\"{{deviceName(device)}}\" folder-type=\"{{currentFolder.type}}\" untrusted=\"device.untrusted || pendingIsRemoteEncrypted(currentFolder.id, device.deviceID)\" remote-state=\"{{completion[device.deviceID][currentFolder.id].remoteState}}\" />\n            </div>\n            <p class=\"help-block\" ng-if=\"folderHasUnacceptedDevices(currentFolder)\">\n              <sup>1</sup> <span translate>The remote device has not accepted sharing this folder.</span>\n            </p>\n            <p class=\"help-block\" ng-if=\"folderHasPausedDevices(currentFolder)\">\n              <sup>2</sup> <span translate>The remote device has paused this folder.</span>\n            </p>\n          </div>\n          <div class=\"form-horizontal\" ng-if=\"currentSharing.unrelated.length || otherDevices().length <= 0\">\n            <label translate>Unshared Devices</label>\n            <p class=\"help-block\" ng-if=\"otherDevices().length > 0\">\n              <span translate>Select additional devices to share this folder with.</span>&emsp;\n              <small><a href=\"#\" ng-click=\"selectAllUnrelatedDevices(true)\" translate>Select All</a>&emsp;\n                <a href=\"#\" ng-click=\"selectAllUnrelatedDevices(false)\" translate>Deselect All</a></small>\n            </p>\n            <p class=\"help-block\" ng-if=\"otherDevices().length <= 0\">\n              <span translate>There are no devices to share this folder with.</span>\n            </p>\n            <div class=\"form-group\" ng-repeat=\"device in currentSharing.unrelated\" ng-init=\"id = device.deviceID; folder = currentFolder\">\n              <share-template selected=\"currentSharing.selected\" encryption-passwords=\"currentSharing.encryptionPasswords\" id=\"{{device.deviceID}}\" label=\"{{deviceName(device)}}\" folder-type=\"{{currentFolder.type}}\" untrusted=\"device.untrusted || pendingIsRemoteEncrypted(currentFolder.id, device.deviceID)\" />\n            </div>\n          </div>\n        </div>\n\n        <div id=\"folder-versioning\" class=\"tab-pane\">\n          <div class=\"form-group\">\n            <label translate>File Versioning</label>&emsp;<a href=\"{{docsURL('users/versioning')}}\" target=\"_blank\"><span class=\"fas fa-question-circle\"></span>&nbsp;<span translate>Help</span></a>\n            <select class=\"form-control\" ng-model=\"currentFolder._guiVersioning.selector\">\n              <option value=\"none\" translate>No File Versioning</option>\n              <option value=\"trashcan\" translate>Trash Can File Versioning</option>\n              <option value=\"simple\" translate>Simple File Versioning</option>\n              <option value=\"staggered\" translate>Staggered File Versioning</option>\n              <option value=\"external\" translate>External File Versioning</option>\n            </select>\n          </div>\n          <div class=\"form-group\" ng-if=\"currentFolder._guiVersioning.selector=='trashcan' || currentFolder._guiVersioning.selector=='simple'\" ng-class=\"{'has-error': folderEditor.trashcanClean.$invalid && folderEditor.trashcanClean.$dirty}\">\n            <p translate class=\"help-block\" ng-if=\"currentFolder._guiVersioning.selector=='trashcan'\">Files are moved to .stversions directory when replaced or deleted by Syncthing.</p>\n            <p translate class=\"help-block\" ng-if=\"currentFolder._guiVersioning.selector=='simple'\">Files are moved to date stamped versions in a .stversions directory when replaced or deleted by Syncthing.</p>\n            <label translate for=\"trashcanClean\">Clean out after</label>\n            <div class=\"input-group\">\n              <input name=\"trashcanClean\" id=\"trashcanClean\" class=\"form-control text-right\" type=\"number\" ng-model=\"currentFolder._guiVersioning.trashcanClean\" required=\"\" aria-required=\"true\" min=\"0\" />\n              <div class=\"input-group-addon\" translate>days</div>\n            </div>\n            <p class=\"help-block\">\n              <span translate ng-if=\"folderEditor.trashcanClean.$valid || folderEditor.trashcanClean.$pristine\">The number of days to keep files in the trash can. Zero means forever.</span>\n              <span translate ng-if=\"folderEditor.trashcanClean.$error.required && folderEditor.trashcanClean.$dirty\">The number of days must be a number and cannot be blank.</span>\n              <span translate ng-if=\"folderEditor.trashcanClean.$error.min && folderEditor.trashcanClean.$dirty\">A negative number of days doesn't make sense.</span>\n            </p>\n          </div>\n          <div class=\"form-group\" ng-if=\"currentFolder._guiVersioning.selector=='simple'\" ng-class=\"{'has-error': folderEditor.simpleKeep.$invalid && folderEditor.simpleKeep.$dirty}\">\n            <label translate for=\"simpleKeep\">Keep Versions</label>\n            <input name=\"simpleKeep\" id=\"simpleKeep\" class=\"form-control\" type=\"number\" ng-model=\"currentFolder._guiVersioning.simpleKeep\" required=\"\" aria-required=\"true\" min=\"1\" />\n            <p class=\"help-block\">\n              <span translate ng-if=\"folderEditor.simpleKeep.$valid || folderEditor.simpleKeep.$pristine\">The number of old versions to keep, per file.</span>\n              <span translate ng-if=\"folderEditor.simpleKeep.$error.required && folderEditor.simpleKeep.$dirty\">The number of versions must be a number and cannot be blank.</span>\n              <span translate ng-if=\"folderEditor.simpleKeep.$error.min && folderEditor.simpleKeep.$dirty\">You must keep at least one version.</span>\n            </p>\n          </div>\n          <div class=\"form-group\" ng-if=\"currentFolder._guiVersioning.selector=='staggered'\" ng-class=\"{'has-error': folderEditor.staggeredMaxAge.$invalid && folderEditor.staggeredMaxAge.$dirty}\">\n            <p class=\"help-block\"><span translate>Files are moved to date stamped versions in a .stversions directory when replaced or deleted by Syncthing.</span> <span translate>Versions are automatically deleted if they are older than the maximum age or exceed the number of files allowed in an interval.</span></p>\n            <p translate class=\"help-block\">The following intervals are used: for the first hour a version is kept every 30 seconds, for the first day a version is kept every hour, for the first 30 days a version is kept every day, until the maximum age a version is kept every week.</p>\n            <label translate for=\"staggeredMaxAge\">Maximum Age</label>\n            <div class=\"input-group\">\n              <input name=\"staggeredMaxAge\" id=\"staggeredMaxAge\" class=\"form-control text-right\" type=\"number\" ng-model=\"currentFolder._guiVersioning.staggeredMaxAge\" required=\"\" aria-required=\"true\" min=\"0\" />\n              <div class=\"input-group-addon\" translate>days</div>\n            </div>\n            <p class=\"help-block\">\n              <span translate ng-if=\"folderEditor.staggeredMaxAge.$valid || folderEditor.staggeredMaxAge.$pristine\">The maximum time to keep a version (in days, set to 0 to keep versions forever).</span>\n              <span translate ng-if=\"folderEditor.staggeredMaxAge.$error.required && folderEditor.staggeredMaxAge.$dirty\">The maximum age must be a number and cannot be blank.</span>\n              <span translate ng-if=\"folderEditor.staggeredMaxAge.$error.min && folderEditor.staggeredMaxAge.$dirty\">A negative number of days doesn't make sense.</span>\n            </p>\n          </div>\n          <div class=\"form-group\" ng-if=\"internalVersioningEnabled()\">\n            <label translate for=\"fsPath\">Versions Path</label>\n            <input name=\"fsPath\" id=\"fsPath\" class=\"form-control\" type=\"text\" ng-model=\"currentFolder.versioning.fsPath\" />\n            <p translate class=\"help-block\">Path where versions should be stored (leave empty for the default .stversions directory in the shared folder).</p>\n          </div>\n          <div class=\"form-group\" ng-if=\"currentFolder._guiVersioning.selector=='external'\" ng-class=\"{'has-error': folderEditor.externalCommand.$invalid && folderEditor.externalCommand.$dirty}\">\n            <p translate class=\"help-block\">An external command handles the versioning. It has to remove the file from the shared folder. If the path to the application contains spaces, it should be quoted.</p>\n            <label translate for=\"externalCommand\">Command</label>\n            <input name=\"externalCommand\" id=\"externalCommand\" class=\"form-control\" type=\"text\" ng-model=\"currentFolder._guiVersioning.externalCommand\" required=\"\" aria-required=\"true\" />\n            <p class=\"help-block\">\n              <span translate ng-if=\"folderEditor.externalCommand.$valid || folderEditor.externalCommand.$pristine\">See external versioning help for supported templated command line parameters.</span>\n              <span translate ng-if=\"folderEditor.externalCommand.$error.required && folderEditor.externalCommand.$dirty\">The path cannot be blank.</span>\n            </p>\n          </div>\n          <div class=\"form-group\" ng-if=\"internalVersioningEnabled()\" ng-class=\"{'has-error': folderEditor.cleanupIntervalS.$invalid && folderEditor.cleanupIntervalS.$dirty}\">\n            <label translate for=\"cleanupIntervalS\">Cleanup Interval</label>\n            <div class=\"input-group\">\n              <input name=\"cleanupIntervalS\" id=\"cleanupIntervalS\" class=\"form-control text-right\" type=\"number\" ng-model=\"currentFolder._guiVersioning.cleanupIntervalS\" required=\"\" min=\"0\" max=\"31536000\" aria-required=\"true\" />\n              <div class=\"input-group-addon\" translate>seconds</div>\n            </div>\n            <p class=\"help-block\">\n              <span translate ng-if=\"folderEditor.cleanupIntervalS.$valid || folderEditor.cleanupIntervalS.$pristine\"class=\"help-block\">The interval, in seconds, for running cleanup in the versions directory. Zero to disable periodic cleaning.</span>\n              <span translate ng-if=\"folderEditor.cleanupIntervalS.$error.required && folderEditor.cleanupIntervalS.$dirty\">The cleanup interval cannot be blank.</span>\n              <span translate ng-if=\"folderEditor.cleanupIntervalS.$error.min && folderEditor.cleanupIntervalS.$dirty\">The interval must be a positive number of seconds.</span>\n            </p>\n          </div>\n        </div>\n\n        <div id=\"folder-ignores\" class=\"tab-pane\" ng-switch=\"editingFolderNew()\">\n          <div ng-switch-when=\"true\">\n            <label>\n              <input type=\"checkbox\" ng-model=\"currentFolder._addIgnores\" >&nbsp;<span translate>Add ignore patterns</span>\n            </label>\n            <p translate class=\"help-block\">Ignore patterns can only be added after the folder is created. If checked, an input field to enter ignore patterns will be presented after saving.</p>\n          </div>\n          <div ng-switch-default>\n            <p translate>Enter ignore patterns, one per line.</p>\n            <div ng-class=\"{'has-error': ignores.error != null}\">\n              <textarea class=\"form-control\" name=\"ignoresText\" rows=\"5\" ng-model=\"ignores.text\" ng-disabled=\"ignores.disabled\"></textarea>\n              <p class=\"help-block\" ng-if=\"ignores.error\">\n                {{ignores.error}}\n              </p>\n            </div>\n            <hr />\n            <p class=\"small\"><span translate>Quick guide to supported patterns</span> (<a href=\"{{docsURL('users/ignoring')}}\" target=\"_blank\" translate>full documentation</a>):</p>\n            <dl class=\"dl-horizontal dl-narrow small\">\n              <dt><code>(?d)</code></dt>\n              <dd><b><span translate>Prefix indicating that the file can be deleted if preventing directory removal</span></b></dd>\n              <dt><code>(?i)</code></dt>\n              <dd><span translate>Prefix indicating that the pattern should be matched without case sensitivity</span></dd>\n              <dt><code>!</code></dt>\n              <dd><span translate>Inversion of the given condition (i.e. do not exclude)</span></dd>\n              <dt><code>*</code></dt>\n              <dd><span translate>Single level wildcard (matches within a directory only)</span></dd>\n              <dt><code>**</code></dt>\n              <dd><span translate>Multi level wildcard (matches multiple directory levels)</span></dd>\n              <dt><code>//</code></dt>\n              <dd><span translate>Comment, when used at the start of a line</span></dd>\n            </dl>\n            <div ng-if=\"!editingFolderDefaults()\">\n              <hr />\n              <span translate translate-value-path=\"{{currentFolder.path}}{{system.pathSeparator}}.stignore\">Editing {%path%}.</span>\n            </div>\n          </div>\n        </div>\n\n        <div id=\"folder-advanced\" class=\"tab-pane\">\n          <div class=\"row form-group\" ng-class=\"{'has-error': folderEditor.rescanIntervalS.$invalid && folderEditor.rescanIntervalS.$dirty}\">\n            <div class=\"col-md-12\">\n              <label translate>Scanning</label>\n              &nbsp;<a href=\"{{docsURL('users/syncing#scanning')}}\" target=\"_blank\"><span class=\"fas fa-question-circle\"></span>&nbsp;<span translate>Help</span></a></br>\n\n              <div class=\"row\">\n                <div class=\"col-md-6\">\n                  <label>\n                    <input type=\"checkbox\" ng-model=\"currentFolder.fsWatcherEnabled\" ng-change=\"setFSWatcherIntervalDefault()\">&nbsp;<span translate>Watch for Changes</span>\n                  </label>\n                  <p class=\"help-block\">\n                    <span translate>Use notifications from the filesystem to detect changed items.</span>\n                    <span translate>Watching for changes discovers most changes without periodic scanning.</span>\n                  </p>\n                </div>\n                <div class=\"col-md-6\">\n                  <label for=\"rescanIntervalS\" translate>Full Rescan Interval (s)</label>\n                  <input name=\"rescanIntervalS\" id=\"rescanIntervalS\" class=\"form-control\" type=\"number\" ng-model=\"currentFolder.rescanIntervalS\" required=\"\" aria-required=\"true\" min=\"0\" />\n                  <p class=\"help-block\" ng-if=\"!folderEditor.rescanIntervalS.$valid && folderEditor.rescanIntervalS.$dirty\" translate>\n                    The rescan interval must be a non-negative number of seconds.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-md-6 form-group\">\n              <label translate>Folder Type</label>\n              &nbsp;<a href=\"{{docsURL('users/foldertypes')}}\" target=\"_blank\"><span class=\"fas fa-question-circle\"></span>&nbsp;<span translate>Help</span></a>\n              <select class=\"form-control\" ng-change=\"setDefaultsForFolderType()\" ng-model=\"currentFolder.type\" ng-disabled=\"editingFolderExisting() && currentFolder.type == 'receiveencrypted'\">\n                <option value=\"sendreceive\" translate>Send &amp; Receive</option>\n                <option value=\"sendonly\" translate>Send Only</option>\n                <option value=\"receiveonly\" translate>Receive Only</option>\n                <option value=\"receiveencrypted\" ng-disabled=\"editingFolderExisting()\" translate>Receive Encrypted</option>\n              </select>\n              <p ng-if=\"currentFolder.type == 'sendonly'\" translate class=\"help-block\">Files are protected from changes made on other devices, but changes made on this device will be sent to the rest of the cluster.</p>\n              <p ng-if=\"currentFolder.type == 'receiveonly'\" translate class=\"help-block\">Files are synchronized from the cluster, but any changes made locally will not be sent to other devices.</p>\n              <p ng-if=\"currentFolder.type == 'receiveencrypted'\" translate class=\"help-block\" translate-value-receive-encrypted=\"{{'Receive Encrypted' | translate}}\">Stores and syncs only encrypted data. Folders on all connected devices need to be set up with the same password or be of type \"{%receiveEncrypted%}\" too.</p>\n              <p ng-if=\"editingFolderExisting() && currentFolder.type == 'receiveencrypted'\" translate class=\"help-block\" translate-value-receive-encrypted=\"{{'Receive Encrypted' | translate}}\">Folder type \"{%receiveEncrypted%}\" cannot be changed after adding the folder. You need to remove the folder, delete or decrypt the data on disk, and add the folder again.</p>\n              <p ng-if=\"editingFolderExisting() && currentFolder.type != 'receiveencrypted'\" translate class=\"help-block\" translate-value-receive-encrypted=\"{{'Receive Encrypted' | translate}}\">Folder type \"{%receiveEncrypted%}\" can only be set when adding a new folder.</p>\n            </div>\n            <div class=\"col-md-6 form-group\">\n              <label translate>File Pull Order</label>\n              <select class=\"form-control\" ng-model=\"currentFolder.order\" ng-if=\"currentFolder.type != 'sendonly'\">\n                <option value=\"random\" translate>Random</option>\n                <option value=\"alphabetic\" translate>Alphabetic</option>\n                <option value=\"smallestFirst\" translate>Smallest First</option>\n                <option value=\"largestFirst\" translate>Largest First</option>\n                <option value=\"oldestFirst\" translate>Oldest First</option>\n                <option value=\"newestFirst\" translate>Newest First</option>\n              </select>\n              <select class=\"form-control\" ng-if=\"currentFolder.type == 'sendonly'\" disabled>\n                <option value=\"disabled\" translate>Disabled</option>\n              </select>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-md-6 form-group\" ng-class=\"{'has-error': folderEditor.minDiskFree.$invalid && folderEditor.minDiskFree.$dirty}\">\n              <label for=\"minDiskFree\" translate>Minimum Free Disk Space</label><br />\n              <div class=\"row\">\n                <div class=\"col-xs-9\">\n                  <input name=\"minDiskFree\" id=\"minDiskFree\" class=\"form-control\" type=\"number\" ng-model=\"currentFolder.minDiskFree.value\" required=\"\" aria-required=\"true\" min=\"0\" step=\"0.01\" />\n                </div>\n                <div class=\"col-xs-3\">\n                  <select class=\"form-control\" ng-model=\"currentFolder.minDiskFree.unit\">\n                    <option value=\"%\">%</option>\n                    <option value=\"kB\">kB</option>\n                    <option value=\"MB\">MB</option>\n                    <option value=\"GB\">GB</option>\n                    <option value=\"TB\">TB</option>\n                  </select>\n                </div>\n              </div>\n              <p class=\"help-block\" ng-show=\"folderEditor.minDiskFree.$invalid\" translate>\n                Enter a non-negative number (e.g., \"2.35\") and select a unit. Percentages are as part of the total disk size.\n              </p>\n            </div>\n            <div class=\"col-md-6 form-group\">\n              <label>\n                <input type=\"checkbox\" ng-disabled=\"currentFolder._recvEnc\" ng-model=\"currentFolder.ignorePerms\" /> <span translate>Ignore Permissions</span>\n              </label>\n              <p translate class=\"help-block\">\n                Disables comparing and syncing file permissions. Useful on systems with nonexistent or custom permissions (e.g. FAT, exFAT, Synology, Android).\n              </p>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-md-6 form-group\">\n              <p>\n                <label translate>Ownership</label>\n                &nbsp;<a href=\"{{docsURL('advanced/folder-sync-ownership')}}\" target=\"_blank\"><span class=\"fas fa-question-circle\"></span>&nbsp;<span translate>Help</span></a>\n              </p>\n              <label>\n                <input type=\"checkbox\" ng-disabled=\"currentFolder.type == 'sendonly' || currentFolder.type == 'receiveencrypted'\" ng-model=\"currentFolder.syncOwnership\" /> <span translate>Sync Ownership</span>\n              </label>\n              <p translate class=\"help-block\">\n                Enables sending ownership information to other devices, and applying incoming ownership information. Typically requires running with elevated privileges.\n              </p>\n              <label>\n                <input type=\"checkbox\" ng-disabled=\"currentFolder.type == 'receiveonly' || currentFolder.type == 'receiveencrypted' || currentFolder.syncOwnership\" ng-checked=\"currentFolder.sendOwnership || currentFolder.syncOwnership\" ng-model=\"currentFolder.sendOwnership\" /> <span translate>Send Ownership</span>\n              </label>\n              <p translate class=\"help-block\">\n                Enables sending ownership information to other devices, but not applying incoming ownership information. This can have a significant performance impact. Always enabled when \"Sync Ownership\" is enabled.\n              </p>\n            </div>\n            <div class=\"col-md-6 form-group\">\n              <p>\n                <label translate>Extended Attributes</label>\n                &nbsp;<a href=\"{{docsURL('advanced/folder-sync-xattrs')}}\" target=\"_blank\"><span class=\"fas fa-question-circle\"></span>&nbsp;<span translate>Help</span></a>\n              </p>\n              <label>\n                <input type=\"checkbox\" ng-disabled=\"currentFolder.type == 'sendonly' || currentFolder.type == 'receiveencrypted'\" ng-model=\"currentFolder.syncXattrs\" /> <span translate>Sync Extended Attributes</span>\n              </label>\n              <p translate class=\"help-block\">\n                Enables sending extended attributes to other devices, and applying incoming extended attributes. May require running with elevated privileges.\n              </p>\n              <label>\n                <input type=\"checkbox\" ng-disabled=\"currentFolder.type == 'receiveonly' || currentFolder.type == 'receiveencrypted' || currentFolder.syncXattrs\" ng-checked=\"currentFolder.sendXattrs || currentFolder.syncXattrs\" ng-model=\"currentFolder.sendXattrs\" /> <span translate>Send Extended Attributes</span>\n              </label>\n              <p translate class=\"help-block\">\n                Enables sending extended attributes to other devices, but not applying incoming extended attributes. This can have a significant performance impact. Always enabled when \"Sync Extended Attributes\" is enabled.\n              </p>\n            </div>\n          </div>\n\n          <div class=\"row\" ng-if=\"currentFolder.syncXattrs\">\n            <div class=\"col-md-12\">\n              <p>\n                <label translate>Extended Attributes Filter</label>\n                &nbsp;<a href=\"{{docsURL('advanced/folder-xattr-filter')}}\" target=\"_blank\"><span class=\"fas fa-question-circle\"></span>&nbsp;<span translate>Help</span></a>\n              </p>\n            </div>\n            <div class=\"col-md-6\">\n              <p translate class=\"help-block\">\n                To permit a rule, have the checkbox checked. To deny a rule, leave it unchecked.\n              </p>\n              <label translate>Active filter rules</label>\n              <table class=\"table table-condensed\">\n                <colgroup>\n                  <col class=\"col-xs-1 center\"/>\n                  <col class=\"col-xs-9\"/>\n                  <col class=\"col-xs-2\"/>\n                </colgroup>\n                <tr ng-repeat=\"entry in currentFolder.xattrFilter.entries\">\n                  <td>\n                    <input type=\"checkbox\" ng-model=\"entry.permit\">\n                  </td>\n                  <td><input class=\"form-control text-left\" aria-required=\"true\" ng-model=\"entry.match\"/></td>\n                  <td>\n                    <button type=\"button\" class=\"btn btn-default form-control\" ng-click=\"removeXattrEntry(entry)\">\n                      <span class=\"fas fa-trash-alt\"></span>\n                    </button>\n                  </td>\n                </tr>\n              </table>\n              <div class=\"form-group\">\n                <button type=\"button\" class=\"btn btn-default\" ng-click=\"newXattrEntry()\">\n                  <span class=\"fas fa-plus\"></span>&nbsp;<span translate>Add filter entry</span>\n                </button>\n              </div>\n              <p ng-if=\"currentFolder.xattrFilter.entries.length === 0\">\n                <i translate>No rules set</i>\n              </p>\n              <p ng-if=\"getXattrDefault() !== ''\">\n                <i><span translate>Default</span>: {{getXattrDefault()}}</i>\n              </p>\n              <p ng-if=\"getXattrHint() !== ''\">\n                <i>{{getXattrHint()}}</i>\n              </p>\n            </div>\n            <div class=\"col-md-6 form-group\">\n              <label for=\"xattrMaxSingleEntrySize\" translate>Maximum single entry size</label>\n              <input name=\"xattrMaxSingleEntrySize\" id=\"xattrMaxSingleEntrySize\" class=\"form-control\" type=\"number\" ng-model=\"currentFolder.xattrFilter.maxSingleEntrySize\" required=\"\" aria-required=\"true\" min=\"0\" />\n            </div>\n            <div class=\"col-md-6 form-group\">\n              <label for=\"xattrMaxTotalSize\" translate>Maximum total size</label>\n              <input name=\"xattrMaxTotalSize\" id=\"xattrMaxTotalSize\" class=\"form-control\" type=\"number\" ng-model=\"currentFolder.xattrFilter.maxTotalSize\" required=\"\" aria-required=\"true\" min=\"0\" />\n            </div>\n          </div>\n        </div>\n\n      </div>\n    </form>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-primary btn-sm\" ng-click=\"saveFolder()\" ng-disabled=\"folderEditor.$invalid\">\n      <span class=\"fas fa-check\"></span>&nbsp;<span translate>Save</span>\n    </button>\n    <button type=\"button\" class=\"btn btn-default btn-sm\" data-dismiss=\"modal\">\n      <span class=\"fas fa-times\"></span>&nbsp;<span translate>Close</span>\n    </button>\n    <button type=\"button\" class=\"btn btn-warning pull-left btn-sm\" data-toggle=\"modal\" data-target=\"#remove-folder-confirmation\" ng-if=\"editingFolderExisting()\">\n      <span class=\"fas fa-minus-circle\"></span>&nbsp;<span translate>Remove</span>\n    </button>\n  </div>\n</modal>\n", "<modal id=\"localChanged\" status=\"{{localChangedType === 'receiveencrypted' ? 'warning' : 'info'}}\" icon=\"fas fa-exclamation-circle\" heading=\"{{localChangedHeading(localChangedType)}}\" large=\"yes\" closeable=\"yes\">\n  <div class=\"modal-body\" ng-switch=\"localChangedType\">\n    <p ng-switch-when=\"receiveonly\" translate>\n      The following items were changed locally.\n    </p>\n    <p ng-switch-when=\"receiveencrypted\">\n      <span translate>The following unexpected items were found.</span>\n      <span translate translate-value-receive-encrypted=\"{{'Receive Encrypted' | translate}}\">You should never add or change anything locally in a \"{%receiveEncrypted%}\" folder.</span>\n    </p>\n    <table class=\"table table-striped\">\n      <thead>\n        <tr>\n          <th translate>Path</th>\n          <th translate>Size</th>\n        </tr>\n      </thead>\n      <tr dir-paginate=\"file in localChanged.files | itemsPerPage: localChanged.perpage\" current-page=\"localChanged.page\" total-items=\"model[localChangedFolder].receiveOnlyTotalItems\" pagination-id=\"localChanged\">\n        <td class=\"word-break-all\">{{file.name}}</td>\n        <td><span ng-hide=\"file.type == 'DIRECTORY'\">{{file.size | binary}}B</span></td>\n      </tr>\n    </table>\n    <dir-pagination-controls on-page-change=\"refreshLocalChanged(newPageNumber, localChanged.perpage)\" pagination-id=\"localChanged\"></dir-pagination-controls>\n    <ul class=\"pagination pull-right\">\n      <li ng-repeat=\"option in [10, 25, 50]\" ng-class=\"{ active: localChanged.perpage == option }\">\n        <a href=\"#\" ng-click=\"refreshLocalChanged(localChanged.page, option)\">{{option}}</a>\n      </li>\n    </ul>\n    <div class=\"clearfix\"></div>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" data-dismiss=\"modal\">\n      <span class=\"fas fa-times\"></span>&nbsp;<span translate>Close</span>\n    </button>\n  </div>\n</modal>\n", "<modal id=\"remoteNeed\" status=\"info\" icon=\"fas fa-exchange-alt\" heading=\"{{'Out of Sync Items' | translate}} - {{deviceName(remoteNeedDevice)}}\" large=\"yes\" closeable=\"yes\">\n  <div class=\"modal-body\">\n    <div ng-if=\"sizeOf(remoteNeed) == 0\">\n      <span translate>Loading data...</span>\n    </div>\n    <div ng-if=\"sizeOf(remoteNeed) > 0\">\n      <div class=\"panel panel-default\" ng-repeat=\"folder in remoteNeedFolders\" ng-if=\"remoteNeed[folder] && remoteNeed[folder].files.length > 0\">\n        <button class=\"btn panel-heading\" data-toggle=\"collapse\" data-target=\"#remoteNeed-{{$index}}\" aria-expanded=\"false\">\n          <h4 class=\"panel-title\">\n            <span>{{folderLabel(folder)}}</span>\n          </h4>\n        </button>\n        <div id=\"remoteNeed-{{$index}}\" class=\"panel-collapse\" ng-class=\"{collapse: sizeOf(remoteNeedFolders) > 1}\">\n          <div class=\"panel-body\">\n            <table class=\"table table-striped\">\n              <thead>\n                <tr>\n                  <th translate>Path</th>\n                  <th translate>Size</th>\n                  <th><span tooltip data-original-title=\"{{'Time the item was last modified' | translate}}\" translate>Mod. Time</span></th>\n                  <th><span tooltip data-original-title=\"{{'Device that last modified the item' | translate}}\" translate>Mod. Device</span></th>\n                </tr>\n              </thead>\n              <tr dir-paginate=\"file in remoteNeed[folder].files | itemsPerPage: remoteNeed[folder].perpage\" current-page=\"remoteNeed[folder].page\" total-items=\"completion[remoteNeedDevice.deviceID][folder].needItems\" pagination-id=\"'remoteNeed-' + folder\">\n                <td class=\"word-break-all\">{{file.name}}</td>\n                <td><span ng-hide=\"file.type == 'DIRECTORY'\">{{file.size | binary}}B</span></td>\n                <td>{{file.modified | date:\"yyyy-MM-dd HH:mm:ss\"}}</td>\n                <td ng-if=\"file.modifiedBy\">{{friendlyNameFromShort(file.modifiedBy)}}</td>\n                <td ng-if=\"!file.modifiedBy\"><span translate>Unknown</span></td>\n              </tr>\n            </table>\n\n            <dir-pagination-controls on-page-change=\"refreshRemoteNeed(folder, newPageNumber, remoteNeed[folder].perpage)\" pagination-id=\"'remoteNeed-' + folder\"></dir-pagination-controls>\n            <ul class=\"pagination pull-right\">\n              <li ng-repeat=\"option in [10, 25, 50]\" ng-class=\"{ active: remoteNeed[folder].perpage == option }\">\n                <a href=\"#\" ng-click=\"refreshRemoteNeed(folder, remoteNeed[folder].page, option)\">{{option}}</a>\n              </li>\n            </ul>\n            <div class=\"clearfix\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-default btn-sm\" data-dismiss=\"modal\">\n      <span class=\"fas fa-times\"></span>&nbsp;<span translate>Close</span>\n    </button>\n  </div>\n</modal>\n"], "filenames": ["gui/default/assets/css/overrides.css", "gui/default/index.html", "gui/default/syncthing/core/aboutModalView.html", "gui/default/syncthing/core/editShareTemplate.html", "gui/default/syncthing/core/syncthingController.js", "gui/default/syncthing/device/editDeviceModalView.html", "gui/default/syncthing/device/globalChangesModalView.html", "gui/default/syncthing/folder/editFolderModalView.html", "gui/default/syncthing/transfer/localChangedFilesModalView.html", "gui/default/syncthing/transfer/remoteNeededFilesModalView.html"], "buggy_code_start_loc": [188, 291, 89, 4, 2455, 95, 31, 59, 18, 25], "buggy_code_end_loc": [189, 888, 120, 5, 3431, 96, 32, 60, 19, 26], "fixing_code_start_loc": [188, 291, 89, 4, 2454, 95, 31, 59, 18, 25], "fixing_code_end_loc": [189, 900, 120, 11, 3388, 96, 32, 60, 19, 26], "type": "CWE-79", "message": "Syncthing is an open source, continuous file synchronization program. In versions prior to 1.23.5 a compromised instance with shared folders could sync malicious files which contain arbitrary HTML and JavaScript in the name. If the owner of another device looks over the shared folder settings and moves the mouse over the latest sync, a script could be executed to change settings for shared folders or add devices automatically. Additionally adding a new device with a malicious name could embed HTML or JavaScript inside parts of the page. As a result the webUI may be subject to a stored cross site scripting attack. This issue has been addressed in version 1.23.5. Users are advised to upgrade. Users unable to upgrade should avoid sharing folders with untrusted users.", "other": {"cve": {"id": "CVE-2022-46165", "sourceIdentifier": "security-advisories@github.com", "published": "2023-06-06T18:15:10.100", "lastModified": "2023-06-16T04:15:11.407", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Syncthing is an open source, continuous file synchronization program. In versions prior to 1.23.5 a compromised instance with shared folders could sync malicious files which contain arbitrary HTML and JavaScript in the name. If the owner of another device looks over the shared folder settings and moves the mouse over the latest sync, a script could be executed to change settings for shared folders or add devices automatically. Additionally adding a new device with a malicious name could embed HTML or JavaScript inside parts of the page. As a result the webUI may be subject to a stored cross site scripting attack. This issue has been addressed in version 1.23.5. Users are advised to upgrade. Users unable to upgrade should avoid sharing folders with untrusted users."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 2.5}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:syncthing:syncthing:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.23.5", "matchCriteriaId": "DF5DEFA6-C51C-4649-AD75-0E00E44B1301"}]}]}], "references": [{"url": "https://github.com/syncthing/syncthing/commit/73c52eafb6566435dffd979c3c49562b6d5a4238", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/syncthing/syncthing/security/advisories/GHSA-9rp6-23gf-4c3h", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IRYGBFJPVBW6PPTETNIBWQJE4HJSA5PJ/", "source": "security-advisories@github.com"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XEBWSQVGHSTR4ZO7LVVEMPEGMV2DS5XR/", "source": "security-advisories@github.com"}]}, "github_commit_url": "https://github.com/syncthing/syncthing/commit/73c52eafb6566435dffd979c3c49562b6d5a4238"}}