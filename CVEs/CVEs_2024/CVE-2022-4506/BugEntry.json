{"buggy_code": ["<?php\n\n/**\n * C_Document.class.php\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nrequire_once(__DIR__ . \"/../library/forms.inc\");\nrequire_once(__DIR__ . \"/../library/patient.inc\");\n\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Crypto\\CryptoGen;\nuse OpenEMR\\Common\\Csrf\\CsrfUtils;\nuse OpenEMR\\Common\\Twig\\TwigContainer;\nuse OpenEMR\\Services\\FacilityService;\nuse OpenEMR\\Services\\PatientService;\nuse OpenEMR\\Events\\PatientDocuments\\PatientDocumentTreeViewFilterEvent;\n\nclass C_Document extends Controller\n{\n    public $documents;\n    public $document_categories;\n    public $tree;\n    public $_config;\n    public $manual_set_owner = false; // allows manual setting of a document owner/service\n    public $facilityService;\n    public $patientService;\n    public $_last_node;\n    private $Document;\n    private $cryptoGen;\n\n    public function __construct($template_mod = \"general\")\n    {\n        parent::__construct();\n        $this->facilityService = new FacilityService();\n        $this->patientService = new PatientService();\n        $this->documents = array();\n        $this->template_mod = $template_mod;\n        $this->assign(\"FORM_ACTION\", $GLOBALS['webroot'] . \"/controller.php?\" . attr($_SERVER['QUERY_STRING'] ?? ''));\n        $this->assign(\"CURRENT_ACTION\", $GLOBALS['webroot'] . \"/controller.php?\" . \"document&\");\n\n        if (php_sapi_name() !== 'cli') {\n            // skip when this is being called via command line for the ccda importing\n            $this->assign(\"CSRF_TOKEN_FORM\", CsrfUtils::collectCsrfToken());\n        }\n\n        $this->assign(\"IMAGES_STATIC_RELATIVE\", $GLOBALS['images_static_relative']);\n\n        //get global config options for this namespace\n        $this->_config = $GLOBALS['oer_config']['documents'];\n\n        $this->_args = array(\"patient_id\" => ($_GET['patient_id'] ?? null));\n\n        $this->assign(\"STYLE\", $GLOBALS['style']);\n        $t = new CategoryTree(1);\n        //print_r($t->tree);\n        $this->tree = $t;\n        $this->Document = new Document();\n\n        // Create a crypto object that will be used for for encryption/decryption\n        $this->cryptoGen = new CryptoGen();\n    }\n\n    public function upload_action($patient_id, $category_id)\n    {\n        $category_name = $this->tree->get_node_name($category_id);\n        $this->assign(\"category_id\", $category_id);\n        $this->assign(\"category_name\", $category_name);\n        $this->assign(\"hide_encryption\", $GLOBALS['hide_document_encryption']);\n        $this->assign(\"patient_id\", $patient_id);\n\n        // Added by Rod to support document template download from general_upload.html.\n        // Cloned from similar stuff in manage_document_templates.php.\n        $templatedir = $GLOBALS['OE_SITE_DIR'] . '/documents/doctemplates';\n        $templates_options = \"<option value=''>-- \" . xlt('Select Template') . \" --</option>\";\n        if (file_exists($templatedir)) {\n              $dh = opendir($templatedir);\n        }\n        if (!empty($dh)) {\n              $templateslist = array();\n            while (false !== ($sfname = readdir($dh))) {\n                if (substr($sfname, 0, 1) == '.') {\n                    continue;\n                }\n                $templateslist[$sfname] = $sfname;\n            }\n              closedir($dh);\n              ksort($templateslist);\n            foreach ($templateslist as $sfname) {\n                $templates_options .= \"<option value='\" . attr($sfname) .\n                  \"'>\" . text($sfname) . \"</option>\";\n            }\n        }\n        $this->assign(\"TEMPLATES_LIST\", $templates_options);\n\n        // duplicate template list for new template form editor sjp 05/20/2019\n        // will call as module or individual template.\n        $templatedir = $GLOBALS['OE_SITE_DIR'] . '/documents/onsite_portal_documents/templates';\n        $templates_options = \"<option value=''>-- \" . xlt('Open Forms Module') . \" --</option>\";\n        if (file_exists($templatedir)) {\n            $dh = opendir($templatedir);\n        }\n        if ($dh) {\n            $templateslist = array();\n            while (false !== ($sfname = readdir($dh))) {\n                if (substr($sfname, 0, 1) == '.') {\n                    continue;\n                }\n                if (substr(strtolower($sfname), strlen($sfname) - 4) == '.tpl') {\n                    $templateslist[$sfname] = $sfname;\n                }\n            }\n            closedir($dh);\n            ksort($templateslist);\n            foreach ($templateslist as $sfname) {\n                $optname = str_replace('_', ' ', basename($sfname, \".tpl\"));\n                $templates_options .= \"<option value='\" . attr($sfname) . \"'>\" . text($optname) . \"</option>\";\n            }\n        }\n        $this->assign(\"TEMPLATES_LIST_PATIENT\", $templates_options);\n\n        $activity = $this->fetch($GLOBALS['template_dir'] . \"documents/\" . $this->template_mod . \"_upload.html\");\n        $this->assign(\"activity\", $activity);\n        return $this->list_action($patient_id);\n    }\n\n    public function zip_dicom_folder($study_name = null)\n    {\n        $zip = new ZipArchive();\n        $zip_name = $GLOBALS['temporary_files_dir'] . \"/\" . $study_name;\n        if ($zip->open($zip_name, (ZipArchive::CREATE | ZipArchive::OVERWRITE)) === true) {\n            foreach ($_FILES['dicom_folder']['name'] as $i => $name) {\n                $zfn = $GLOBALS['temporary_files_dir'] . \"/\" . $name;\n                $fparts = pathinfo($name);\n                if (empty($fparts['extension'])) {\n                    // viewer requires lowercase.\n                    $fparts['extension'] = \"dcm\";\n                    $name = $fparts['filename'] . \".dcm\";\n                }\n                if ($fparts['extension'] == \"DCM\") {\n                    // viewer requires lowercase.\n                    $fparts['extension'] = \"dcm\";\n                    $name = $fparts['filename'] . \".dcm\";\n                }\n                // required extension for viewer\n                if ($fparts['extension'] != \"dcm\") {\n                    continue;\n                }\n                move_uploaded_file($_FILES['dicom_folder']['tmp_name'][$i], $zfn);\n                $zip->addFile($zfn, $name);\n            }\n            $zip->close();\n        } else {\n            return false;\n        }\n        $file_array['name'][] = $study_name;\n        $file_array['type'][] = 'zip';\n        $file_array['tmp_name'][] = $zip_name;\n        $file_array['error'][] = '';\n        $file_array['size'][] = filesize($zip_name);\n        return $file_array;\n    }\n\n    //Upload multiple files on single click\n    public function upload_action_process()\n    {\n\n        // Collect a manually set owner if this has been set\n        // Used when want to manually assign the owning user/service such as the Direct mechanism\n        $non_HTTP_owner = false;\n        if ($this->manual_set_owner) {\n            $non_HTTP_owner = $this->manual_set_owner;\n        }\n\n        $couchDB = false;\n        $harddisk = false;\n        if ($GLOBALS['document_storage_method'] == 0) {\n            $harddisk = true;\n        }\n        if ($GLOBALS['document_storage_method'] == 1) {\n            $couchDB = true;\n        }\n\n        if ($_POST['process'] != \"true\") {\n            return;\n        }\n\n        $doDecryption = false;\n        $encrypted = $_POST['encrypted'] ?? false;\n        $passphrase = $_POST['passphrase'] ?? '';\n        if (\n            !$GLOBALS['hide_document_encryption'] &&\n            $encrypted && $passphrase\n        ) {\n            $doDecryption = true;\n        }\n\n        if (is_numeric($_POST['category_id'])) {\n            $category_id = $_POST['category_id'];\n        }\n\n        $patient_id = 0;\n        if (isset($_GET['patient_id']) && !$couchDB) {\n            $patient_id = $_GET['patient_id'];\n        } elseif (is_numeric($_POST['patient_id'])) {\n            $patient_id = $_POST['patient_id'];\n        }\n\n        if (!empty($_FILES['dicom_folder']['name'][0])) {\n            // let's zip um up then pass along new zip\n            $study_name = $_POST['destination'] ? (trim($_POST['destination']) . \".zip\") : 'DicomStudy.zip';\n            $study_name =  preg_replace('/\\s+/', '_', $study_name);\n            $_POST['destination'] = \"\";\n            $zipped = $this->zip_dicom_folder($study_name);\n            if ($zipped) {\n                $_FILES['file'] = $zipped;\n            }\n            // and off we go! just fall through and let routine\n            // do its normal file processing..\n        }\n\n        $sentUploadStatus = array();\n        if (count($_FILES['file']['name']) > 0) {\n            $upl_inc = 0;\n\n            foreach ($_FILES['file']['name'] as $key => $value) {\n                $fname = $value;\n                $error = \"\";\n                if ($_FILES['file']['error'][$key] > 0 || empty($fname) || $_FILES['file']['size'][$key] == 0) {\n                    $fname = $value;\n                    if (empty($fname)) {\n                        $fname = htmlentities(\"<empty>\");\n                    }\n                    $error = xl(\"Error number\") . \": \" . $_FILES['file']['error'][$key] . \" \" . xl(\"occurred while uploading file named\") . \": \" . $fname . \"\\n\";\n                    if ($_FILES['file']['size'][$key] == 0) {\n                        $error .= xl(\"The system does not permit uploading files of with size 0.\") . \"\\n\";\n                    }\n                } elseif ($GLOBALS['secure_upload'] && !isWhiteFile($_FILES['file']['tmp_name'][$key])) {\n                    $error = xl(\"The system does not permit uploading files with MIME content type\") . \" - \" . mime_content_type($_FILES['file']['tmp_name'][$key]) . \".\\n\";\n                } else {\n                    // Test for a zip of DICOM images\n                    if (stripos($_FILES['file']['type'][$key], 'zip') !== false) {\n                        $za = new ZipArchive();\n                        $handler = $za->open($_FILES['file']['tmp_name'][$key]);\n                        if ($handler) {\n                            $mimetype = \"application/dicom+zip\";\n                            for ($i = 0; $i < $za->numFiles; $i++) {\n                                $stat = $za->statIndex($i);\n                                $fp = $za->getStream($stat['name']);\n                                if ($fp) {\n                                    $head = fread($fp, 256);\n                                    fclose($fp);\n                                    if (strpos($head, 'DICM') === false) { // Fixed at offset 128. even one non DICOM makes zip invalid.\n                                        $mimetype = \"application/zip\";\n                                        break;\n                                    }\n                                    unset($head);\n                                    // if here -then a DICOM\n                                    $parts = pathinfo($stat['name']);\n                                    if ($parts['extension'] != \"dcm\" || empty($parts['extension'])) { // required extension for viewer\n                                        $new_name = $parts['filename'] . \".dcm\";\n                                        $za->renameIndex($i, $new_name);\n                                        $za->renameName($parts['filename'], $new_name);\n                                    }\n                                } else { // Rarely here\n                                    $mimetype = \"application/zip\";\n                                    break;\n                                }\n                            }\n                            $za->close();\n                            if ($mimetype == \"application/dicom+zip\") {\n                                $_FILES['file']['type'][$key] = $mimetype;\n                                sleep(1); // Timing insurance in case of re-compression. Only acted on index so...!\n                                $_FILES['file']['size'][$key] = filesize($_FILES['file']['tmp_name'][$key]); // file may have grown.\n                            }\n                        }\n                    }\n                    $tmpfile = fopen($_FILES['file']['tmp_name'][$key], \"r\");\n                    $filetext = fread($tmpfile, $_FILES['file']['size'][$key]);\n                    fclose($tmpfile);\n                    if ($doDecryption) {\n                        $filetext = $this->cryptoGen->decryptStandard($filetext, $passphrase);\n                        if ($filetext === false) {\n                            error_log(\"OpenEMR Error: Unable to decrypt a document since decryption failed.\");\n                            $filetext = \"\";\n                        }\n                    }\n                    if ($_POST['destination'] != '') {\n                        $fname = $_POST['destination'];\n                    }\n                    // set mime, test for single DICOM and assign extension if missing.\n                    $mimetype = $_FILES['file']['type'][$key];\n                    if (strpos($filetext, 'DICM') !== false) {\n                        $mimetype = 'application/dicom';\n                        $parts = pathinfo($fname);\n                        if (!$parts['extension']) {\n                            $fname .= '.dcm';\n                        }\n                    }\n                    $d = new Document();\n                    $rc = $d->createDocument(\n                        $patient_id,\n                        $category_id,\n                        $fname,\n                        $mimetype,\n                        $filetext,\n                        empty($_GET['higher_level_path']) ? '' : $_GET['higher_level_path'],\n                        empty($_POST['path_depth']) ? 1 : $_POST['path_depth'],\n                        $non_HTTP_owner,\n                        $_FILES['file']['tmp_name'][$key]\n                    );\n                    if ($rc) {\n                        $error .= $rc . \"\\n\";\n                    } else {\n                        $this->assign(\"upload_success\", \"true\");\n                    }\n                    $sentUploadStatus[] = $d;\n                    $this->assign(\"file\", $sentUploadStatus);\n                }\n\n                // Option to run a custom plugin for each file upload.\n                // This was initially created to delete the original source file in a custom setting.\n                $upload_plugin = $GLOBALS['OE_SITE_DIR'] . \"/documentUpload.plugin.php\";\n                if (file_exists($upload_plugin)) {\n                    include_once($upload_plugin);\n                }\n                $upload_plugin_pp = 'documentUploadPostProcess';\n                if (function_exists($upload_plugin_pp)) {\n                    $tmp = call_user_func($upload_plugin_pp, $value, $d);\n                    if ($tmp) {\n                        $error = $tmp;\n                    }\n                }\n                // Following is just an example of code in such a plugin file.\n                /*****************************************************\n                public function documentUploadPostProcess($filename, &$d) {\n                  $userid = $_SESSION['authUserID'];\n                  $row = sqlQuery(\"SELECT username FROM users WHERE id = ?\", array($userid));\n                  $owner = strtolower($row['username']);\n                  $dn = '1_' . ucfirst($owner);\n                  $filepath = \"/shared_network_directory/$dn/$filename\";\n                  if (@unlink($filepath)) return '';\n                  return \"Failed to delete '$filepath'.\";\n                }\n                *****************************************************/\n            }\n        }\n\n        $this->assign(\"error\", $error);\n        //$this->_state = false;\n        $_POST['process'] = \"\";\n        //return $this->fetch($GLOBALS['template_dir'] . \"documents/\" . $this->template_mod . \"_upload.html\");\n    }\n\n    public function note_action_process($patient_id)\n    {\n        // this public function is a dual public function that will set up a note associated with a document or send a document via email.\n\n        if ($_POST['process'] != \"true\") {\n            return;\n        }\n\n        $n = new Note();\n        $n->set_owner($_SESSION['authUserID']);\n        parent::populate_object($n);\n        if ($_POST['identifier'] == \"no\") {\n            // associate a note with a document\n            $n->persist();\n        } elseif ($_POST['identifier'] == \"yes\") {\n            // send the document via email\n            $d = new Document($_POST['foreign_id']);\n            $url =  $d->get_url();\n            $storagemethod = $d->get_storagemethod();\n            $couch_docid = $d->get_couch_docid();\n            $couch_revid = $d->get_couch_revid();\n            if ($couch_docid && $couch_revid) {\n                $couch = new CouchDB();\n                $resp = $couch->retrieve_doc($couch_docid);\n                $content = $resp->data;\n                if ($content == '' && $GLOBALS['couchdb_log'] == 1) {\n                    $log_content = date('Y-m-d H:i:s') . \" ==> Retrieving document\\r\\n\";\n                    $log_content = date('Y-m-d H:i:s') . \" ==> URL: \" . $url . \"\\r\\n\";\n                    $log_content .= date('Y-m-d H:i:s') . \" ==> CouchDB Document Id: \" . $couch_docid . \"\\r\\n\";\n                    $log_content .= date('Y-m-d H:i:s') . \" ==> CouchDB Revision Id: \" . $couch_revid . \"\\r\\n\";\n                    $log_content .= date('Y-m-d H:i:s') . \" ==> Failed to fetch document content from CouchDB.\\r\\n\";\n                    //$log_content .= date('Y-m-d H:i:s').\" ==> Will try to download file from HardDisk if exists.\\r\\n\\r\\n\";\n                    $this->document_upload_download_log($d->get_foreign_id(), $log_content);\n                    die(xlt(\"File retrieval from CouchDB failed\"));\n                }\n                // place it in a temporary file and will remove the file below after emailed\n                $temp_couchdb_url = $GLOBALS['OE_SITE_DIR'] . '/documents/temp/couch_' . date(\"YmdHis\") . $d->get_url_file();\n                $fh = fopen($temp_couchdb_url, \"w\");\n                fwrite($fh, base64_decode($content));\n                fclose($fh);\n                $temp_url = $temp_couchdb_url; // doing this ensure hard drive file never deleted in case something weird happens\n            } else {\n                $url = preg_replace(\"|^(.*)://|\", \"\", $url);\n        // Collect filename and path\n                $from_all = explode(\"/\", $url);\n                $from_filename = array_pop($from_all);\n                $from_pathname_array = array();\n                for ($i = 0; $i < $d->get_path_depth(); $i++) {\n                    $from_pathname_array[] = array_pop($from_all);\n                }\n                $from_pathname_array = array_reverse($from_pathname_array);\n                $from_pathname = implode(\"/\", $from_pathname_array);\n                $temp_url = $GLOBALS['OE_SITE_DIR'] . '/documents/' . $from_pathname . '/' . $from_filename;\n            }\n            if (!file_exists($temp_url)) {\n                echo xl('The requested document is not present at the expected location on the filesystem or there are not sufficient permissions to access it.', '', '', ' ') . $temp_url;\n            }\n            $url = $temp_url;\n            $pdetails = getPatientData($patient_id);\n            $pname = $pdetails['fname'] . \" \" . $pdetails['lname'];\n            $this->document_send($_POST['provide_email'], $_POST['note'], $url, $pname);\n            if ($couch_docid && $couch_revid) {\n      // remove the temporary couchdb file\n                unlink($temp_couchdb_url);\n            }\n        }\n        $this->_state = false;\n        $_POST['process'] = \"\";\n        return $this->view_action($patient_id, $n->get_foreign_id());\n    }\n\n    public function default_action()\n    {\n        return $this->list_action();\n    }\n\n    public function view_action(string $patient_id = null, $doc_id)\n    {\n        global $ISSUE_TYPES;\n\n        require_once(dirname(__FILE__) . \"/../library/lists.inc\");\n\n        $d = new Document($doc_id);\n        $notes = $d->get_notes();\n\n        $this->assign(\"csrf_token_form\", CsrfUtils::collectCsrfToken());\n\n        $this->assign(\"file\", $d);\n        $this->assign(\"web_path\", $this->_link(\"retrieve\") . \"document_id=\" . urlencode($d->get_id()) . \"&\");\n        $this->assign(\"NOTE_ACTION\", $this->_link(\"note\"));\n        $this->assign(\"MOVE_ACTION\", $this->_link(\"move\") . \"document_id=\" . urlencode($d->get_id()) . \"&process=true\");\n        $this->assign(\"hide_encryption\", $GLOBALS['hide_document_encryption']);\n        $this->assign(\"assets_static_relative\", $GLOBALS['assets_static_relative']);\n        $this->assign(\"webroot\", $GLOBALS['webroot']);\n\n        // Added by Rod to support document delete:\n        $delete_string = '';\n        if (AclMain::aclCheckCore('patients', 'docs_rm')) {\n            $delete_string = \"<a href='' class='btn btn-danger' onclick='return deleteme(\" . attr_js($d->get_id()) .\n                \")'>\" . xlt('Delete') . \"</a>\";\n        }\n        $this->assign(\"delete_string\", $delete_string);\n        $this->assign(\"REFRESH_ACTION\", $this->_link(\"list\"));\n\n        $this->assign(\"VALIDATE_ACTION\", $this->_link(\"validate\") .\n            \"document_id=\" . $d->get_id() . \"&process=true\");\n\n        // Added by Rod to support document date update:\n        $this->assign(\"DOCDATE\", $d->get_docdate());\n        $this->assign(\"UPDATE_ACTION\", $this->_link(\"update\") .\n            \"document_id=\" . $d->get_id() . \"&process=true\");\n\n        // Added by Rod to support document issue update:\n        $issues_options = \"<option value='0'>-- \" . xlt('Select Issue') . \" --</option>\";\n        $ires = sqlStatement(\"SELECT id, type, title, begdate FROM lists WHERE \" .\n            \"pid = ? \" . // AND enddate IS NULL \" .\n            \"ORDER BY type, begdate\", array($patient_id));\n        while ($irow = sqlFetchArray($ires)) {\n            $desc = $irow['type'];\n            if ($ISSUE_TYPES[$desc]) {\n                $desc = $ISSUE_TYPES[$desc][2];\n            }\n            $desc .= \": \" . text($irow['begdate']) . \" \" . text(substr($irow['title'], 0, 40));\n            $sel = ($irow['id'] == $d->get_list_id()) ? ' selected' : '';\n            $issues_options .= \"<option value='\" . attr($irow['id']) . \"'$sel>$desc</option>\";\n        }\n        $this->assign(\"ISSUES_LIST\", $issues_options);\n\n        // For tagging to encounter\n        // Populate the dropdown with patient's encounter list\n        $this->assign(\"TAG_ACTION\", $this->_link(\"tag\") . \"document_id=\" . urlencode($d->get_id()) . \"&process=true\");\n        $encOptions = \"<option value='0'>-- \" . xlt('Select Encounter') . \" --</option>\";\n        $result_docs = sqlStatement(\"SELECT fe.encounter,fe.date,openemr_postcalendar_categories.pc_catname FROM form_encounter AS fe \" .\n            \"LEFT JOIN openemr_postcalendar_categories ON fe.pc_catid=openemr_postcalendar_categories.pc_catid  WHERE fe.pid = ? ORDER BY fe.date desc\", array($patient_id));\n        if (sqlNumRows($result_docs) > 0) {\n            while ($row_result_docs = sqlFetchArray($result_docs)) {\n                $sel_enc = ($row_result_docs['encounter'] == $d->get_encounter_id()) ? ' selected' : '';\n                $encOptions .= \"<option value='\" . attr($row_result_docs['encounter']) . \"' $sel_enc>\" . text(oeFormatShortDate(date('Y-m-d', strtotime($row_result_docs['date'])))) . \"-\" . text(xl_appt_category($row_result_docs['pc_catname'])) . \"</option>\";\n            }\n        }\n        $this->assign(\"ENC_LIST\", $encOptions);\n\n        //clear encounter tag\n        if ($d->get_encounter_id() != 0) {\n            $this->assign('clear_encounter_tag', $this->_link('clear_encounter_tag') . \"document_id=\" . urlencode($d->get_id()));\n        } else {\n            $this->assign('clear_encounter_tag', 'javascript:void(0)');\n        }\n\n        //Populate the dropdown with category list\n        $visit_category_list = \"<option value='0'>-- \" . xlt('Select One') . \" --</option>\";\n        $cres = sqlStatement(\"SELECT pc_catid, pc_catname FROM openemr_postcalendar_categories ORDER BY pc_catname\");\n        while ($crow = sqlFetchArray($cres)) {\n            $catid = $crow['pc_catid'];\n            if ($catid < 9 && $catid != 5) {\n                continue; // Applying same logic as in new encounter page.\n            }\n            $visit_category_list .= \"<option value='\" . attr($catid) . \"'>\" . text(xl_appt_category($crow['pc_catname'])) . \"</option>\\n\";\n        }\n        $this->assign(\"VISIT_CATEGORY_LIST\", $visit_category_list);\n\n        $this->assign(\"notes\", $notes);\n\n        $this->assign(\"PROCEDURE_TAG_ACTION\", $this->_link(\"image_procedure\") . \"document_id=\" . urlencode($d->get_id()));\n        // Populate the dropdown with procedure order list\n        $imgOptions = \"<option value='0'>-- \" . xlt('Select Procedure') . \" --</option>\";\n        $imgOrders  = sqlStatement(\"select procedure_name,po.procedure_order_id,procedure_code,poc.procedure_order_title from procedure_order po inner join procedure_order_code poc on poc.procedure_order_id = po.procedure_order_id where po.patient_id = ?\", array($patient_id));\n        $mapping    = $this->get_mapped_procedure($d->get_id());\n        if (sqlNumRows($imgOrders) > 0) {\n            while ($row = sqlFetchArray($imgOrders)) {\n                $sel_proc = '';\n                if ((isset($mapping['procedure_code']) && $mapping['procedure_code'] == $row['procedure_code']) && (isset($mapping['procedure_code']) && $mapping['procedure_order_id'] == $row['procedure_order_id'])) {\n                    $sel_proc = 'selected';\n                }\n                $imgOptions .= \"<option value='\" . attr($row['procedure_order_id']) . \"' data-code='\" . attr($row['procedure_code']) . \"' $sel_proc>\" . text($row['procedure_name'] . ' - ' . $row['procedure_code'] . ' : ' . ucfirst($row['procedure_order_title'])) . \"</option>\";\n            }\n        }\n\n        $this->assign('TAG_PROCEDURE_LIST', $imgOptions);\n\n        $this->assign('clear_procedure_tag', $this->_link('clear_procedure_tag') . \"document_id=\" . urlencode($d->get_id()));\n\n        $this->_last_node = null;\n\n        $menu  = new HTML_TreeMenu();\n\n        //pass an empty array because we don't want the documents for each category showing up in this list box\n        $rnode = $this->array_recurse($this->tree->tree, $patient_id, array());\n        $menu->addItem($rnode);\n        $treeMenu_listbox  = new HTML_TreeMenu_Listbox($menu, array(\"promoText\" => xl('Move Document to Category:')));\n\n        $this->assign(\"tree_html_listbox\", $treeMenu_listbox->toHTML());\n\n        $activity = $this->fetch($GLOBALS['template_dir'] . \"documents/\" . $this->template_mod . \"_view.html\");\n        $this->assign(\"activity\", $activity);\n\n        return $this->list_action($patient_id);\n    }\n\n    /**\n     * Retrieve file from hard disk / CouchDB.\n     * In case that file isn't download this public function will return thumbnail image (if exist).\n     * @param (boolean) $show_original - enable to show the original image (not thumbnail) in inline status.\n     * @param (string) $context - given a special document scenario (e.g.: patient avatar, custom image viewer document, etc), the context can be set so that a switch statement can execute a custom strategy.\n     * */\n    public function retrieve_action(string $patient_id = null, $document_id, $as_file = true, $original_file = true, $disable_exit = false, $show_original = false, $context = \"normal\")\n    {\n        $encrypted = $_POST['encrypted'] ?? false;\n        $passphrase = $_POST['passphrase'] ?? '';\n        $doEncryption = false;\n        if (\n            !$GLOBALS['hide_document_encryption'] &&\n            $encrypted == \"true\" &&\n            $passphrase\n        ) {\n            $doEncryption = true;\n        }\n\n            //controller public function ruins booleans, so need to manually re-convert to booleans\n        if ($as_file == \"true\") {\n                $as_file = true;\n        } elseif ($as_file == \"false\") {\n                $as_file = false;\n        }\n        if ($original_file == \"true\") {\n                $original_file = true;\n        } elseif ($original_file == \"false\") {\n                $original_file = false;\n        }\n        if ($disable_exit == \"true\") {\n                $disable_exit = true;\n        } elseif ($disable_exit == \"false\") {\n                $disable_exit = false;\n        }\n        if ($show_original == \"true\") {\n            $show_original = true;\n        } elseif ($show_original == \"false\") {\n            $show_original = false;\n        }\n\n        switch ($context) {\n            case \"patient_picture\":\n                $document_id = $this->patientService->getPatientPictureDocumentId($patient_id);\n                break;\n        }\n\n        $d = new Document($document_id);\n        $url =  $d->get_url();\n        $th_url = $d->get_thumb_url();\n\n        $storagemethod = $d->get_storagemethod();\n        $couch_docid = $d->get_couch_docid();\n        $couch_revid = $d->get_couch_revid();\n\n        if ($couch_docid && $couch_revid && $original_file) {\n            // standard case for collecting a document from couchdb\n            $couch = new CouchDB();\n            $resp = $couch->retrieve_doc($couch_docid);\n            //Take thumbnail file when is not null and file is presented online\n            if (!$as_file && !is_null($th_url) && !$show_original) {\n                $content = $resp->th_data;\n            } else {\n                $content = $resp->data;\n            }\n            if ($content == '' && $GLOBALS['couchdb_log'] == 1) {\n                $log_content = date('Y-m-d H:i:s') . \" ==> Retrieving document\\r\\n\";\n                $log_content = date('Y-m-d H:i:s') . \" ==> URL: \" . $url . \"\\r\\n\";\n                $log_content .= date('Y-m-d H:i:s') . \" ==> CouchDB Document Id: \" . $couch_docid . \"\\r\\n\";\n                $log_content .= date('Y-m-d H:i:s') . \" ==> CouchDB Revision Id: \" . $couch_revid . \"\\r\\n\";\n                $log_content .= date('Y-m-d H:i:s') . \" ==> Failed to fetch document content from CouchDB.\\r\\n\";\n                $log_content .= date('Y-m-d H:i:s') . \" ==> Will try to download file from HardDisk if exists.\\r\\n\\r\\n\";\n                $this->document_upload_download_log($d->get_foreign_id(), $log_content);\n                die(xlt(\"File retrieval from CouchDB failed\"));\n            }\n            if ($d->get_encrypted() == 1) {\n                $filetext = $this->cryptoGen->decryptStandard($content, null, 'database');\n            } else {\n                $filetext = base64_decode($content);\n            }\n            if ($disable_exit == true) {\n                return $filetext;\n            }\n            header('Content-Description: File Transfer');\n            header('Content-Transfer-Encoding: binary');\n            header('Expires: 0');\n            header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n            header('Pragma: public');\n            if ($doEncryption) {\n                $ciphertext = $this->cryptoGen->encryptStandard($filetext, $passphrase);\n                header('Content-Disposition: attachment; filename=\"' . \"/encrypted_aes_\" . $d->get_name() . '\"');\n                header(\"Content-Type: application/octet-stream\");\n                header(\"Content-Length: \" . strlen($ciphertext));\n                echo $ciphertext;\n            } else {\n                header(\"Content-Disposition: \" . ($as_file ? \"attachment\" : \"inline\") . \"; filename=\\\"\" . $d->get_name() . \"\\\"\");\n                header(\"Content-Type: \" . $d->get_mimetype());\n                header(\"Content-Length: \" . strlen($filetext));\n                echo $filetext;\n            }\n            exit;//exits only if file download from CouchDB is successfull.\n        }\n        if ($couch_docid && $couch_revid) {\n            //special case when retrieving a document from couchdb that has been converted to a jpg and not directly referenced in openemr documents table\n            //try to convert it if it has not yet been converted\n            //first, see if the converted jpg already exists\n            $couch = new CouchDB();\n            $resp = $couch->retrieve_doc(\"converted_\" . $couch_docid);\n            $content = $resp->data;\n            if ($content == '') {\n                //create the converted jpg\n                $couchM = new CouchDB();\n                $respM = $couchM->retrieve_doc($couch_docid);\n                if ($d->get_encrypted() == 1) {\n                    $contentM = $this->cryptoGen->decryptStandard($respM->data, null, 'database');\n                } else {\n                    $contentM = base64_decode($respM->data);\n                }\n                if ($contentM == '' && $GLOBALS['couchdb_log'] == 1) {\n                    $log_content = date('Y-m-d H:i:s') . \" ==> Retrieving document\\r\\n\";\n                    $log_content = date('Y-m-d H:i:s') . \" ==> URL: \" . $url . \"\\r\\n\";\n                    $log_content .= date('Y-m-d H:i:s') . \" ==> CouchDB Document Id: \" . $couch_docid . \"\\r\\n\";\n                    $log_content .= date('Y-m-d H:i:s') . \" ==> CouchDB Revision Id: \" . $couch_revid . \"\\r\\n\";\n                    $log_content .= date('Y-m-d H:i:s') . \" ==> Failed to fetch document content from CouchDB.\\r\\n\";\n                    $log_content .= date('Y-m-d H:i:s') . \" ==> Will try to download file from HardDisk if exists.\\r\\n\\r\\n\";\n                    $this->document_upload_download_log($d->get_foreign_id(), $log_content);\n                    die(xlt(\"File retrieval from CouchDB failed\"));\n                }\n                // place the from-file into a temporary file\n                $from_file_tmp_name = tempnam($GLOBALS['temporary_files_dir'], \"oer\");\n                file_put_contents($from_file_tmp_name, $contentM);\n                // prepare a temporary file for the to-file\n                $to_file_tmp = tempnam($GLOBALS['temporary_files_dir'], \"oer\");\n                $to_file_tmp_name = $to_file_tmp . \".jpg\";\n                // convert file to jpg\n                exec(\"convert -density 200 \" . escapeshellarg($from_file_tmp_name) . \" -append -resize 850 \" . escapeshellarg($to_file_tmp_name));\n                // remove from tmp file\n                unlink($from_file_tmp_name);\n                // save the to-file if a to-file was created in above convert call\n                if (is_file($to_file_tmp_name)) {\n                    $couchI = new CouchDB();\n                    if ($d->get_encrypted() == 1) {\n                        $document = $this->cryptoGen->encryptStandard(file_get_contents($to_file_tmp_name), null, 'database');\n                    } else {\n                        $document = base64_encode(file_get_contents($to_file_tmp_name));\n                    }\n                    $couchI->save_doc(['_id' => \"converted_\" . $couch_docid, 'data' => $document]);\n                    // remove to tmp files\n                    unlink($to_file_tmp);\n                    unlink($to_file_tmp_name);\n                } else {\n                    error_log(\"ERROR: Document '\" . errorLogEscape($d->get_name()) . \"' cannot be converted to JPEG. Perhaps ImageMagick is not installed?\");\n                }\n                // now collect the newly created converted jpg\n                $couchF = new CouchDB();\n                $respF = $couchF->retrieve_doc(\"converted_\" . $couch_docid);\n                if ($d->get_encrypted() == 1) {\n                    $content = $this->cryptoGen->decryptStandard($respF->data, null, 'database');\n                } else {\n                    $content = base64_decode($respF->data);\n                }\n            } else {\n                // decrypt/decode when converted jpg already exists\n                if ($d->get_encrypted() == 1) {\n                    $content = $this->cryptoGen->decryptStandard($resp->data, null, 'database');\n                } else {\n                    $content = base64_decode($resp->data);\n                }\n            }\n            $filetext = $content;\n            if ($disable_exit == true) {\n                return $filetext;\n            }\n            header(\"Pragma: public\");\n            header(\"Expires: 0\");\n            header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n            header(\"Content-Disposition: \" . ($as_file ? \"attachment\" : \"inline\") . \"; filename=\\\"\" . $d->get_name() . \"\\\"\");\n            header(\"Content-Type: image/jpeg\");\n            header(\"Content-Length: \" . strlen($filetext));\n            echo $filetext;\n            exit;\n        }\n\n        //Take thumbnail file when is not null and file is presented online\n        if (!$as_file && !is_null($th_url) && !$show_original) {\n            $url = $th_url;\n        }\n\n        //strip url of protocol handler\n        $url = preg_replace(\"|^(.*)://|\", \"\", $url);\n\n        //change full path to current webroot.  this is for documents that may have\n        //been moved from a different filesystem and the full path in the database\n        //is not current.  this is also for documents that may of been moved to\n        //different patients. Note that the path_depth is used to see how far down\n                //the path to go. For example, originally the path_depth was always 1, which\n                //only allowed things like documents/1/<file>, but now can have more structured\n                //directories. For example a path_depth of 2 can give documents/encounters/1/<file>\n                // etc.\n        // NOTE that $from_filename and basename($url) are the same thing\n        $from_all = explode(\"/\", $url);\n        $from_filename = array_pop($from_all);\n        $from_pathname_array = array();\n        for ($i = 0; $i < $d->get_path_depth(); $i++) {\n            $from_pathname_array[] = array_pop($from_all);\n        }\n        $from_pathname_array = array_reverse($from_pathname_array);\n        $from_pathname = implode(\"/\", $from_pathname_array);\n        if ($couch_docid && $couch_revid) {\n            //for couchDB no URL is available in the table, hence using the foreign_id which is patientID\n            $temp_url = $GLOBALS['OE_SITE_DIR'] . '/documents/temp/' . $d->get_foreign_id() . '_' . $from_filename;\n        } else {\n            $temp_url = $GLOBALS['OE_SITE_DIR'] . '/documents/' . $from_pathname . '/' . $from_filename;\n        }\n\n        if (file_exists($temp_url)) {\n            $url = $temp_url;\n        }\n\n        if (!file_exists($url)) {\n            echo xl('The requested document is not present at the expected location on the filesystem or there are not sufficient permissions to access it.', '', '', ' ') . $url;\n        } else {\n            if ($original_file) {\n                //normal case when serving the file referenced in database\n                if ($d->get_encrypted() == 1) {\n                    $filetext = $this->cryptoGen->decryptStandard(file_get_contents($url), null, 'database');\n                } else {\n                    if (!is_dir($url)) {\n                        $filetext = file_get_contents($url);\n                    }\n                }\n                if ($disable_exit == true) {\n                    return $filetext ?? '';\n                }\n                header('Content-Description: File Transfer');\n                header('Content-Transfer-Encoding: binary');\n                header('Expires: 0');\n                header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n                header('Pragma: public');\n                if ($doEncryption) {\n                    $ciphertext = $this->cryptoGen->encryptStandard($filetext, $passphrase);\n                    header('Content-Disposition: attachment; filename=\"' . \"/encrypted_aes_\" . $d->get_name() . '\"');\n                    header(\"Content-Type: application/octet-stream\");\n                    header(\"Content-Length: \" . strlen($ciphertext));\n                    echo $ciphertext;\n                } else {\n                    header(\"Content-Disposition: \" . ($as_file ? \"attachment\" : \"inline\") . \"; filename=\\\"\" . $d->get_name() . \"\\\"\");\n                    header(\"Content-Type: \" . $d->get_mimetype());\n                    header(\"Content-Length: \" . strlen($filetext ?? ''));\n                    echo $filetext ?? '';\n                }\n                exit;\n            } else {\n                //special case when retrieving a document that has been converted to a jpg and not directly referenced in database\n                //try to convert it if it has not yet been converted\n                $originalUrl = $url;\n                if (strrpos(basename_international($url), '.') === false) {\n                    $convertedFile = basename_international($url) . '_converted.jpg';\n                } else {\n                    $convertedFile = substr(basename_international($url), 0, strrpos(basename_international($url), '.')) . '_converted.jpg';\n                }\n                $url = $GLOBALS['OE_SITE_DIR'] . '/documents/' . $from_pathname . '/' . $convertedFile;\n                if (!is_file($url)) {\n                    if ($d->get_encrypted() == 1) {\n                        // decrypt the from-file into a temporary file\n                        $from_file_unencrypted = $this->cryptoGen->decryptStandard(file_get_contents($originalUrl), null, 'database');\n                        $from_file_tmp_name = tempnam($GLOBALS['temporary_files_dir'], \"oer\");\n                        file_put_contents($from_file_tmp_name, $from_file_unencrypted);\n                        // prepare a temporary file for the unencrypted to-file\n                        $to_file_tmp = tempnam($GLOBALS['temporary_files_dir'], \"oer\");\n                        $to_file_tmp_name = $to_file_tmp . \".jpg\";\n                        // convert file to jpg\n                        exec(\"convert -density 200 \" . escapeshellarg($from_file_tmp_name) . \" -append -resize 850 \" . escapeshellarg($to_file_tmp_name));\n                        // remove unencrypted tmp file\n                        unlink($from_file_tmp_name);\n                        // make the encrypted to-file if a to-file was created in above convert call\n                        if (is_file($to_file_tmp_name)) {\n                            $to_file_encrypted = $this->cryptoGen->encryptStandard(file_get_contents($to_file_tmp_name), null, 'database');\n                            file_put_contents($url, $to_file_encrypted);\n                            // remove unencrypted tmp files\n                            unlink($to_file_tmp);\n                            unlink($to_file_tmp_name);\n                        }\n                    } else {\n                        // convert file to jpg\n                        exec(\"convert -density 200 \" . escapeshellarg($originalUrl) . \" -append -resize 850 \" . escapeshellarg($url));\n                    }\n                }\n                if (is_file($url)) {\n                    if ($d->get_encrypted() == 1) {\n                        $filetext = $this->cryptoGen->decryptStandard(file_get_contents($url), null, 'database');\n                    } else {\n                        $filetext = file_get_contents($url);\n                    }\n                } else {\n                    $filetext = '';\n                    error_log(\"ERROR: Document '\" . errorLogEscape(basename_international($url)) . \"' cannot be converted to JPEG. Perhaps ImageMagick is not installed?\");\n                }\n                if ($disable_exit == true) {\n                    return $filetext;\n                }\n                header(\"Pragma: public\");\n                header(\"Expires: 0\");\n                header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n                header(\"Content-Disposition: \" . ($as_file ? \"attachment\" : \"inline\") . \"; filename=\\\"\" . $d->get_name() . \"\\\"\");\n                header(\"Content-Type: image/jpeg\");\n                header(\"Content-Length: \" . strlen($filetext));\n                echo $filetext;\n                exit;\n            }\n        }\n    }\n\n    public function move_action_process(string $patient_id = null, $document_id)\n    {\n        if ($_POST['process'] != \"true\") {\n            return;\n        }\n\n        $messages = '';\n\n        $new_category_id = $_POST['new_category_id'];\n        $new_patient_id = $_POST['new_patient_id'];\n\n        //move to new category\n        if (is_numeric($new_category_id) && is_numeric($document_id)) {\n            $sql = \"UPDATE categories_to_documents set category_id = ? where document_id = ?\";\n            $messages .= xl('Document moved to new category', '', '', ' \\'') . $this->tree->_id_name[$new_category_id]['name']  . xl('successfully.', '', '\\' ') . \"\\n\";\n            //echo $sql;\n            $this->tree->_db->Execute($sql, [$new_category_id, $document_id]);\n        }\n\n        //move to new patient\n        if (is_numeric($new_patient_id) && is_numeric($document_id)) {\n            $d = new Document($document_id);\n            $sql = \"SELECT pid from patient_data where pid = ?\";\n            $result = $d->_db->Execute($sql, [$new_patient_id]);\n\n            if (!$result || $result->EOF) {\n                //patient id does not exist\n                $messages .= xl('Document could not be moved to patient id', '', '', ' \\'') . $new_patient_id  . xl('because that id does not exist.', '', '\\' ') . \"\\n\";\n            } else {\n                $changefailed = !$d->change_patient($new_patient_id);\n\n                $this->_state = false;\n                if (!$changefailed) {\n                    $messages .= xl('Document moved to patient id', '', '', ' \\'') . $new_patient_id  . xl('successfully.', '', '\\' ') . \"\\n\";\n                } else {\n                    $messages .= xl('Document moved to patient id', '', '', ' \\'') . $new_patient_id  . xl('Failed.', '', '\\' ') . \"\\n\";\n                }\n                $this->assign(\"messages\", $messages);\n                return $this->list_action($patient_id);\n            }\n        }\n\n        $this->_state = false;\n        $this->assign(\"messages\", $messages);\n        return $this->view_action($patient_id, $document_id);\n    }\n\n    public function validate_action_process(string $patient_id = null, $document_id)\n    {\n\n        $d = new Document($document_id);\n        if ($d->couch_docid && $d->couch_revid) {\n            $file_path = $GLOBALS['OE_SITE_DIR'] . '/documents/temp/';\n            $url = $file_path . $d->get_url();\n            $couch = new CouchDB();\n            $resp = $couch->retrieve_doc($d->couch_docid);\n            if ($d->get_encrypted() == 1) {\n                $content = $this->cryptoGen->decryptStandard($resp->data, null, 'database');\n            } else {\n                $content = base64_decode($resp->data);\n            }\n        } else {\n                $url =  $d->get_url();\n\n                //strip url of protocol handler\n                $url = preg_replace(\"|^(.*)://|\", \"\", $url);\n\n                //change full path to current webroot.  this is for documents that may have\n                //been moved from a different filesystem and the full path in the database\n                //is not current.  this is also for documents that may of been moved to\n                //different patients. Note that the path_depth is used to see how far down\n                //the path to go. For example, originally the path_depth was always 1, which\n                //only allowed things like documents/1/<file>, but now can have more structured\n                //directories. For example a path_depth of 2 can give documents/encounters/1/<file>\n                // etc.\n                // NOTE that $from_filename and basename($url) are the same thing\n                $from_all = explode(\"/\", $url);\n                $from_filename = array_pop($from_all);\n                $from_pathname_array = array();\n            for ($i = 0; $i < $d->get_path_depth(); $i++) {\n                $from_pathname_array[] = array_pop($from_all);\n            }\n                $from_pathname_array = array_reverse($from_pathname_array);\n                $from_pathname = implode(\"/\", $from_pathname_array);\n                $temp_url = $GLOBALS['OE_SITE_DIR'] . '/documents/' . $from_pathname . '/' . $from_filename;\n            if (file_exists($temp_url)) {\n                $url = $temp_url;\n            }\n\n            if ($_POST['process'] != \"true\") {\n                die(\"process is '\" . text($_POST['process']) . \"', expected 'true'\");\n                return;\n            }\n\n            if ($d->get_encrypted() == 1) {\n                $content = $this->cryptoGen->decryptStandard(file_get_contents($url), null, 'database');\n            } else {\n                $content = file_get_contents($url);\n            }\n        }\n\n        if (!empty($d->get_hash()) && (strlen($d->get_hash()) < 50)) {\n            // backward compatibility for documents that were hashed prior to OpenEMR 6.0.0\n            $current_hash = sha1($content);\n        } else {\n            $current_hash = hash('sha3-512', $content);\n        }\n        $messages = xl('Current Hash') . \": \" . $current_hash . \" | \";\n        $messages .= xl('Stored Hash') . \": \" . $d->get_hash();\n        if ($d->get_hash() == '') {\n            $d->hash = $current_hash;\n            $d->persist();\n            $d->populate();\n            $messages .= xl('Hash did not exist for this file. A new hash was generated.');\n        } elseif ($current_hash != $d->get_hash()) {\n            $messages .= xl('Hash does not match. Data integrity has been compromised.');\n        } else {\n            $messages = xl('Document passed integrity check.') . ' | ' . $messages;\n        }\n        $this->_state = false;\n        $this->assign(\"messages\", $messages);\n        return $this->view_action($patient_id, $document_id);\n    }\n\n    // Added by Rod for metadata update.\n    //\n    public function update_action_process(string $patient_id = null, $document_id)\n    {\n\n        if ($_POST['process'] != \"true\") {\n            die(\"process is '\" . $_POST['process'] . \"', expected 'true'\");\n            return;\n        }\n\n        $docdate = $_POST['docdate'];\n        $docname = $_POST['docname'];\n        $issue_id = $_POST['issue_id'];\n\n        if (is_numeric($document_id)) {\n            $messages = '';\n            $d = new Document($document_id);\n            $file_name = $d->get_name();\n            if (\n                $docname != '' &&\n                 $docname != $file_name\n            ) {\n                // Rename\n                $d->set_name($docname);\n                $d->persist();\n                $d->populate();\n                $messages .= xl('Document successfully renamed.') . \"<br />\";\n            }\n\n            if (preg_match('/^\\d\\d\\d\\d-\\d+-\\d+$/', $docdate)) {\n                $docdate = \"$docdate\";\n            } else {\n                $docdate = \"NULL\";\n            }\n            if (!is_numeric($issue_id)) {\n                $issue_id = 0;\n            }\n            $couch_docid = $d->get_couch_docid();\n            $couch_revid = $d->get_couch_revid();\n            if ($couch_docid && $couch_revid) {\n                $sql = \"UPDATE documents SET docdate = ?, url = ?, list_id = ? WHERE id = ?\";\n                $this->tree->_db->Execute($sql, [$docdate, $_POST['docname'], $issue_id, $document_id]);\n            } else {\n                $sql = \"UPDATE documents SET docdate = ?, list_id = ? WHERE id = ?\";\n                $this->tree->_db->Execute($sql, [$docdate, $issue_id, $document_id]);\n            }\n            $messages .= xl('Document date and issue updated successfully') . \"<br />\";\n        }\n\n        $this->_state = false;\n        $this->assign(\"messages\", $messages);\n        return $this->view_action($patient_id, $document_id);\n    }\n\n    public function list_action($patient_id = \"\")\n    {\n        $this->_last_node = null;\n        $categories_list = $this->tree->_get_categories_array($patient_id);\n        //print_r($categories_list);\n\n        $menu  = new HTML_TreeMenu();\n        $rnode = $this->array_recurse($this->tree->tree, $patient_id, $categories_list);\n        $menu->addItem($rnode);\n        $treeMenu = new HTML_TreeMenu_DHTML($menu, array('images' => 'public/images', 'defaultClass' => 'treeMenuDefault'));\n        $treeMenu_listbox  = new HTML_TreeMenu_Listbox($menu, array('linkTarget' => '_self'));\n        $this->assign(\"tree_html\", $treeMenu->toHTML());\n\n        $is_new = isset($_GET['patient_name']) ? 1 : false;\n        $place_hld = isset($_GET['patient_name']) ? filter_input(INPUT_GET, 'patient_name') : xl(\"Patient search or select.\");\n        $cur_pid = isset($_GET['patient_id']) ? filter_input(INPUT_GET, 'patient_id') : '';\n        $used_msg = xl('Current patient unavailable here. Use Patient Documents');\n        if ($cur_pid == '00') {\n            if (!AclMain::aclCheckCore('patients', 'docs', '', ['write', 'addonly'])) {\n                echo (new TwigContainer(null, $GLOBALS['kernel']))->getTwig()->render('core/unauthorized.html.twig', ['pageTitle' => xl(\"Documents\")]);\n                exit;\n            }\n            $cur_pid = '0';\n            $is_new = 1;\n        }\n        if (!AclMain::aclCheckCore('patients', 'docs')) {\n            echo (new TwigContainer(null, $GLOBALS['kernel']))->getTwig()->render('core/unauthorized.html.twig', ['pageTitle' => xl(\"Documents\")]);\n            exit;\n        }\n        $this->assign('is_new', $is_new);\n        $this->assign('place_hld', $place_hld);\n        $this->assign('cur_pid', $cur_pid);\n        $this->assign('used_msg', $used_msg);\n        $this->assign('demo_pid', ($_SESSION['pid'] ?? null));\n\n        return $this->fetch($GLOBALS['template_dir'] . \"documents/\" . $this->template_mod . \"_list.html\");\n    }\n\n    public function &array_recurse($array, $patient_id, $categories = array())\n    {\n        if (!is_array($array)) {\n            $array = array();\n        }\n        $node = &$this->_last_node;\n        $current_node = &$node;\n        $expandedIcon = 'folder-expanded.gif';\n        foreach ($array as $id => $ar) {\n            $icon = 'folder.gif';\n            if (is_array($ar)  || !empty($id)) {\n                if ($node == null) {\n                    //echo \"r:\" . $this->tree->get_node_name($id) . \"<br />\";\n                    $rnode = new HTML_TreeNode(array(\"id\" => $id, 'text' => $this->tree->get_node_name($id), 'link' => $this->_link(\"upload\") . \"parent_id=\" . $id . \"&\", 'icon' => $icon, 'expandedIcon' => $expandedIcon, 'expanded' => false));\n                    $this->_last_node = &$rnode;\n                    $node = &$rnode;\n                    $current_node = &$rnode;\n                } else {\n                    //echo \"p:\" . $this->tree->get_node_name($id) . \"<br />\";\n                    $this->_last_node = &$node->addItem(new HTML_TreeNode(array(\"id\" => $id, 'text' => $this->tree->get_node_name($id), 'link' => $this->_link(\"upload\") . \"parent_id=\" . $id . \"&\", 'icon' => $icon, 'expandedIcon' => $expandedIcon)));\n                    $current_node = &$this->_last_node;\n                }\n\n                $this->array_recurse($ar, $patient_id, $categories);\n            } else {\n                if ($id === 0 && !empty($ar)) {\n                    $info = $this->tree->get_node_info($id);\n                  //echo \"b:\" . $this->tree->get_node_name($id) . \"<br />\";\n                    $current_node = &$node->addItem(new HTML_TreeNode(array(\"id\" => $id, 'text' => $info['value'], 'link' => $this->_link(\"upload\") . \"parent_id=\" . $id . \"&\", 'icon' => $icon, 'expandedIcon' => $expandedIcon)));\n                } else {\n                    //there is a third case that is implicit here when title === 0 and $ar is empty, in that case we do not want to do anything\n                    //this conditional tree could be more efficient but working with recursive trees makes my head hurt, TODO\n                    if ($id !== 0 && is_object($node)) {\n                      //echo \"n:\" . $this->tree->get_node_name($id) . \"<br />\";\n                        $current_node = &$node->addItem(new HTML_TreeNode(array(\"id\" => $id, 'text' => $this->tree->get_node_name($id), 'link' => $this->_link(\"upload\") . \"parent_id=\" . $id . \"&\", 'icon' => $icon, 'expandedIcon' => $expandedIcon)));\n                    }\n                }\n            }\n\n            // If there are documents in this document category, then add their\n            // attributes to the current node.\n            $icon = \"file3.png\";\n            if (!empty($categories[$id]) && is_array($categories[$id])) {\n                foreach ($categories[$id] as $doc) {\n                    $link = $this->_link(\"view\") . \"doc_id=\" . urlencode($doc['document_id']) . \"&\";\n          // If user has no access then there will be no link.\n                    if (!AclMain::aclCheckAcoSpec($doc['aco_spec'])) {\n                        $link = '';\n                    }\n                    // CCD view\n                    $nodeInfo = $this->tree->get_node_info($id);\n                    $treeViewFilterEvent = new PatientDocumentTreeViewFilterEvent();\n                    $treeViewFilterEvent->setCategoryTreeNode($this->tree);\n                    $treeViewFilterEvent->setDocumentId($doc['document_id']);\n                    $treeViewFilterEvent->setDocumentName($doc['document_name']);\n                    $treeViewFilterEvent->setCategoryId($id);\n                    $treeViewFilterEvent->setCategoryInfo($nodeInfo);\n                    $treeViewFilterEvent->setPid($patient_id);\n\n                    $htmlNode = new HTML_TreeNode(array(\n                        'text' => oeFormatShortDate($doc['docdate']) . ' ' . $doc['document_name'] . '-' . $doc['document_id'],\n                        'link' => $link,\n                        'icon' => $icon,\n                        'expandedIcon' => $expandedIcon\n                    ));\n\n                    $treeViewFilterEvent->setHtmlTreeNode($htmlNode);\n                    $filteredEvent = $GLOBALS['kernel']->getEventDispatcher()->dispatch($treeViewFilterEvent, PatientDocumentTreeViewFilterEvent::EVENT_NAME);\n                    if ($filteredEvent->getHtmlTreeNode() != null) {\n                        $current_node->addItem($filteredEvent->getHtmlTreeNode());\n                    } else {\n                        // add the original node if we got back nothing from the server\n                        $current_node->addItem($htmlNode);\n                    }\n                }\n            }\n        }\n        return $node;\n    }\n\n    //public function for logging  the errors in writing file to CouchDB/Hard Disk\n    public function document_upload_download_log($patientid, $content)\n    {\n        $log_path = $GLOBALS['OE_SITE_DIR'] . \"/documents/couchdb/\";\n        $log_file = 'log.txt';\n        if (!is_dir($log_path)) {\n            mkdir($log_path, 0777, true);\n        }\n\n        $LOG = file_get_contents($log_path . $log_file);\n\n        if ($this->cryptoGen->cryptCheckStandard($LOG)) {\n            $LOG = $this->cryptoGen->decryptStandard($LOG, null, 'database');\n        }\n\n        $LOG .= $content;\n\n        if (!empty($LOG)) {\n            if ($GLOBALS['drive_encryption']) {\n                $LOG = $this->cryptoGen->encryptStandard($LOG, null, 'database');\n            }\n            file_put_contents($log_path . $log_file, $LOG);\n        }\n    }\n\n    public function document_send($email, $body, $attfile, $pname)\n    {\n        if (empty($email)) {\n            $this->assign(\"process_result\", \"Email could not be sent, the address supplied: '$email' was empty or invalid.\");\n            return;\n        }\n\n          $desc = \"Please check the attached patient document.\\n Content:\" . $body;\n          $mail = new MyMailer();\n          $from_name = $GLOBALS[\"practice_return_email_path\"];\n          $from =  $GLOBALS[\"practice_return_email_path\"];\n          $mail->AddReplyTo($from, $from_name);\n          $mail->SetFrom($from, $from);\n          $to = $email ;\n        $to_name = $email;\n          $mail->AddAddress($to, $to_name);\n          $subject = \"Patient documents\";\n          $mail->Subject = $subject;\n          $mail->Body = $desc;\n          $mail->AddAttachment($attfile);\n        if ($mail->Send()) {\n            $retstatus = \"email_sent\";\n        } else {\n            $email_status = $mail->ErrorInfo;\n            //echo \"EMAIL ERROR: \".$email_status;\n            $retstatus =  \"email_fail\";\n        }\n    }\n\n//place to hold optional code\n//$first_node = array_keys($t->tree);\n        //$first_node = $first_node[0];\n        //$node1 = new HTML_TreeNode(array('text' => $t->get_node_name($first_node), 'link' => \"test.php\", 'icon' => $icon, 'expandedIcon' => $expandedIcon, 'expanded' => true), array('onclick' => \"alert('foo'); return false\", 'onexpand' => \"alert('Expanded')\"));\n\n        //$this->_last_node = &$node1;\n\n// public function to tag a document to an encounter.\n    public function tag_action_process(string $patient_id = null, $document_id)\n    {\n        if ($_POST['process'] != \"true\") {\n            die(\"process is '\" . text($_POST['process']) . \"', expected 'true'\");\n            return;\n        }\n\n        // Create Encounter and Tag it.\n        $event_date = date('Y-m-d H:i:s');\n        $encounter_id = $_POST['encounter_id'];\n        $encounter_check = $_POST['encounter_check'];\n        $visit_category_id = $_POST['visit_category_id'];\n\n        if (is_numeric($document_id)) {\n            $messages = '';\n            $d = new Document($document_id);\n            $file_name = $d->get_url_file();\n            if (!is_numeric($encounter_id)) {\n                $encounter_id = 0;\n            }\n\n            $encounter_check = ( $encounter_check == 'on') ? 1 : 0;\n            if ($encounter_check) {\n                $provider_id = $_SESSION['authUserID'] ;\n\n                // Get the logged in user's facility\n                $facilityRow = sqlQuery(\"SELECT username, facility, facility_id FROM users WHERE id = ?\", array(\"$provider_id\"));\n                $username = $facilityRow['username'];\n                $facility = $facilityRow['facility'];\n                $facility_id = $facilityRow['facility_id'];\n                // Get the primary Business Entity facility to set as billing facility, if null take user's facility as billing facility\n                $billingFacility = $this->facilityService->getPrimaryBusinessEntity();\n                $billingFacilityID = ( $billingFacility['id'] ) ? $billingFacility['id'] : $facility_id;\n\n                $conn = $GLOBALS['adodb']['db'];\n                $encounter = $conn->GenID(\"sequences\");\n                $query = \"INSERT INTO form_encounter SET\n\t\t\t\t\t\tdate = ?,\n\t\t\t\t\t\treason = ?,\n\t\t\t\t\t\tfacility = ?,\n\t\t\t\t\t\tsensitivity = 'normal',\n\t\t\t\t\t\tpc_catid = ?,\n\t\t\t\t\t\tfacility_id = ?,\n\t\t\t\t\t\tbilling_facility = ?,\n\t\t\t\t\t\tprovider_id = ?,\n\t\t\t\t\t\tpid = ?,\n\t\t\t\t\t\tencounter = ?\";\n                $bindArray = array($event_date,$file_name,$facility,$_POST['visit_category_id'],(int)$facility_id,(int)$billingFacilityID,(int)$provider_id,$patient_id,$encounter);\n                $formID = sqlInsert($query, $bindArray);\n                addForm($encounter, \"New Patient Encounter\", $formID, \"newpatient\", $patient_id, \"1\", date(\"Y-m-d H:i:s\"), $username);\n                $d->set_encounter_id($encounter);\n                $this->image_result_indication($d->id, $encounter);\n            } else {\n                $d->set_encounter_id($encounter_id);\n                $this->image_result_indication($d->id, $encounter_id);\n            }\n            $d->set_encounter_check($encounter_check);\n            $d->persist();\n\n            $messages .= xlt('Document tagged to Encounter successfully') . \"<br />\";\n        }\n\n        $this->_state = false;\n        $this->assign(\"messages\", $messages);\n\n        return $this->view_action($patient_id, $document_id);\n    }\n\n    public function image_procedure_action(string $patient_id = null, $document_id)\n    {\n\n        $img_procedure_id = $_POST['image_procedure_id'];\n        $proc_code = $_POST['procedure_code'];\n\n        if (is_numeric($document_id)) {\n            $img_order  = sqlQuery(\"select * from procedure_order_code where procedure_order_id = ? and procedure_code = ? \", array($img_procedure_id,$proc_code));\n            $img_report = sqlQuery(\"select * from procedure_report where procedure_order_id = ? and procedure_order_seq = ? \", array($img_procedure_id,$img_order['procedure_order_seq']));\n            $img_report_id = !empty($img_report['procedure_report_id']) ? $img_report['procedure_report_id'] : 0;\n            if ($img_report_id == 0) {\n                $report_date = date('Y-m-d H:i:s');\n                $img_report_id = sqlInsert(\"INSERT INTO procedure_report(procedure_order_id,procedure_order_seq,date_collected,date_report,report_status) values(?,?,?,?,'final')\", array($img_procedure_id,$img_order['procedure_order_seq'],$img_order['date_collected'],$report_date));\n            }\n\n            $img_result = sqlQuery(\"select * from procedure_result where procedure_report_id = ? and document_id = ?\", array($img_report_id,$document_id));\n            if (empty($img_result)) {\n                sqlStatement(\"INSERT INTO procedure_result(procedure_report_id,date,document_id,result_status) values(?,?,?,'final')\", array($img_report_id,date('Y-m-d H:i:s'),$document_id));\n            }\n\n            $this->image_result_indication($document_id, 0, $img_procedure_id);\n        }\n        return $this->view_action($patient_id, $document_id);\n    }\n\n    public function clear_procedure_tag_action(string $patient_id = null, $document_id)\n    {\n        if (is_numeric($document_id)) {\n            sqlStatement(\"delete from procedure_result where document_id = ?\", $document_id);\n        }\n        return $this->view_action($patient_id, $document_id);\n    }\n\n    public function get_mapped_procedure($document_id)\n    {\n        $map = array();\n        if (is_numeric($document_id)) {\n            $map = sqlQuery(\"select poc.procedure_order_id,poc.procedure_code from procedure_result pres\n\t\t\t\t\t\t   inner join procedure_report pr on pr.procedure_report_id = pres.procedure_report_id\n\t\t\t\t\t\t   inner join procedure_order_code poc on (poc.procedure_order_id = pr.procedure_order_id and poc.procedure_order_seq = pr.procedure_order_seq)\n\t\t\t\t\t\t   inner join procedure_order po on po.procedure_order_id = poc.procedure_order_id\n\t\t\t\t\t\t   where pres.document_id = ?\", array($document_id));\n        }\n        return $map;\n    }\n\n    public function image_result_indication($doc_id, $encounter, $image_procedure_id = 0)\n    {\n        $doc_notes = sqlQuery(\"select note from notes where foreign_id = ?\", array($doc_id));\n        $narration = isset($doc_notes['note']) ? 'With Narration' : 'Without Narration';\n\n        // TODO: This should be moved into a service so we can handle things such as uuid generation....\n        if ($encounter != 0) {\n            $ep = sqlQuery(\"select u.username as assigned_to from form_encounter inner join users u on u.id = provider_id where encounter = ?\", array($encounter));\n        } elseif ($image_procedure_id != 0) {\n            $ep = sqlQuery(\"select u.username as assigned_to from procedure_order inner join users u on u.id = provider_id where procedure_order_id = ?\", array($image_procedure_id));\n        } else {\n            $ep = array('assigned_to' => $_SESSION['authUser']);\n        }\n\n        $encounter_provider = isset($ep['assigned_to']) ? $ep['assigned_to'] : $_SESSION['authUser'];\n        $noteid = addPnote($_SESSION['pid'], 'New Image Report received ' . $narration, 0, 1, 'Image Results', $encounter_provider, '', 'New', '');\n        setGpRelation(1, $doc_id, 6, $noteid);\n    }\n\n//clear encounter tag public function\n    public function clear_encounter_tag_action(string $patient_id = null, $document_id)\n    {\n        if (is_numeric($document_id)) {\n            sqlStatement(\"update documents set encounter_id='0' where foreign_id=? and id = ?\", array($patient_id,$document_id));\n        }\n        return $this->view_action($patient_id, $document_id);\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * C_Document.class.php\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nrequire_once(__DIR__ . \"/../library/forms.inc\");\nrequire_once(__DIR__ . \"/../library/patient.inc\");\n\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Crypto\\CryptoGen;\nuse OpenEMR\\Common\\Csrf\\CsrfUtils;\nuse OpenEMR\\Common\\Twig\\TwigContainer;\nuse OpenEMR\\Services\\FacilityService;\nuse OpenEMR\\Services\\PatientService;\nuse OpenEMR\\Events\\PatientDocuments\\PatientDocumentTreeViewFilterEvent;\n\nclass C_Document extends Controller\n{\n    public $documents;\n    public $document_categories;\n    public $tree;\n    public $_config;\n    public $manual_set_owner = false; // allows manual setting of a document owner/service\n    public $facilityService;\n    public $patientService;\n    public $_last_node;\n    private $Document;\n    private $cryptoGen;\n\n    public function __construct($template_mod = \"general\")\n    {\n        parent::__construct();\n        $this->facilityService = new FacilityService();\n        $this->patientService = new PatientService();\n        $this->documents = array();\n        $this->template_mod = $template_mod;\n        $this->assign(\"FORM_ACTION\", $GLOBALS['webroot'] . \"/controller.php?\" . attr($_SERVER['QUERY_STRING'] ?? ''));\n        $this->assign(\"CURRENT_ACTION\", $GLOBALS['webroot'] . \"/controller.php?\" . \"document&\");\n\n        if (php_sapi_name() !== 'cli') {\n            // skip when this is being called via command line for the ccda importing\n            $this->assign(\"CSRF_TOKEN_FORM\", CsrfUtils::collectCsrfToken());\n        }\n\n        $this->assign(\"IMAGES_STATIC_RELATIVE\", $GLOBALS['images_static_relative']);\n\n        //get global config options for this namespace\n        $this->_config = $GLOBALS['oer_config']['documents'];\n\n        $this->_args = array(\"patient_id\" => ($_GET['patient_id'] ?? null));\n\n        $this->assign(\"STYLE\", $GLOBALS['style']);\n        $t = new CategoryTree(1);\n        //print_r($t->tree);\n        $this->tree = $t;\n        $this->Document = new Document();\n\n        // Create a crypto object that will be used for for encryption/decryption\n        $this->cryptoGen = new CryptoGen();\n    }\n\n    public function upload_action($patient_id, $category_id)\n    {\n        $category_name = $this->tree->get_node_name($category_id);\n        $this->assign(\"category_id\", $category_id);\n        $this->assign(\"category_name\", $category_name);\n        $this->assign(\"hide_encryption\", $GLOBALS['hide_document_encryption']);\n        $this->assign(\"patient_id\", $patient_id);\n\n        // Added by Rod to support document template download from general_upload.html.\n        // Cloned from similar stuff in manage_document_templates.php.\n        $templatedir = $GLOBALS['OE_SITE_DIR'] . '/documents/doctemplates';\n        $templates_options = \"<option value=''>-- \" . xlt('Select Template') . \" --</option>\";\n        if (file_exists($templatedir)) {\n              $dh = opendir($templatedir);\n        }\n        if (!empty($dh)) {\n              $templateslist = array();\n            while (false !== ($sfname = readdir($dh))) {\n                if (substr($sfname, 0, 1) == '.') {\n                    continue;\n                }\n                $templateslist[$sfname] = $sfname;\n            }\n              closedir($dh);\n              ksort($templateslist);\n            foreach ($templateslist as $sfname) {\n                $templates_options .= \"<option value='\" . attr($sfname) .\n                  \"'>\" . text($sfname) . \"</option>\";\n            }\n        }\n        $this->assign(\"TEMPLATES_LIST\", $templates_options);\n\n        // duplicate template list for new template form editor sjp 05/20/2019\n        // will call as module or individual template.\n        $templatedir = $GLOBALS['OE_SITE_DIR'] . '/documents/onsite_portal_documents/templates';\n        $templates_options = \"<option value=''>-- \" . xlt('Open Forms Module') . \" --</option>\";\n        if (file_exists($templatedir)) {\n            $dh = opendir($templatedir);\n        }\n        if ($dh) {\n            $templateslist = array();\n            while (false !== ($sfname = readdir($dh))) {\n                if (substr($sfname, 0, 1) == '.') {\n                    continue;\n                }\n                if (substr(strtolower($sfname), strlen($sfname) - 4) == '.tpl') {\n                    $templateslist[$sfname] = $sfname;\n                }\n            }\n            closedir($dh);\n            ksort($templateslist);\n            foreach ($templateslist as $sfname) {\n                $optname = str_replace('_', ' ', basename($sfname, \".tpl\"));\n                $templates_options .= \"<option value='\" . attr($sfname) . \"'>\" . text($optname) . \"</option>\";\n            }\n        }\n        $this->assign(\"TEMPLATES_LIST_PATIENT\", $templates_options);\n\n        $activity = $this->fetch($GLOBALS['template_dir'] . \"documents/\" . $this->template_mod . \"_upload.html\");\n        $this->assign(\"activity\", $activity);\n        return $this->list_action($patient_id);\n    }\n\n    public function zip_dicom_folder($study_name = null)\n    {\n        $zip = new ZipArchive();\n        $zip_name = $GLOBALS['temporary_files_dir'] . \"/\" . $study_name;\n        if ($zip->open($zip_name, (ZipArchive::CREATE | ZipArchive::OVERWRITE)) === true) {\n            foreach ($_FILES['dicom_folder']['name'] as $i => $name) {\n                $zfn = $GLOBALS['temporary_files_dir'] . \"/\" . $name;\n                $fparts = pathinfo($name);\n                if (empty($fparts['extension'])) {\n                    // viewer requires lowercase.\n                    $fparts['extension'] = \"dcm\";\n                    $name = $fparts['filename'] . \".dcm\";\n                }\n                if ($fparts['extension'] == \"DCM\") {\n                    // viewer requires lowercase.\n                    $fparts['extension'] = \"dcm\";\n                    $name = $fparts['filename'] . \".dcm\";\n                }\n                // required extension for viewer\n                if ($fparts['extension'] != \"dcm\") {\n                    continue;\n                }\n                move_uploaded_file($_FILES['dicom_folder']['tmp_name'][$i], $zfn);\n                $zip->addFile($zfn, $name);\n            }\n            $zip->close();\n        } else {\n            return false;\n        }\n        $file_array['name'][] = $study_name;\n        $file_array['type'][] = 'zip';\n        $file_array['tmp_name'][] = $zip_name;\n        $file_array['error'][] = '';\n        $file_array['size'][] = filesize($zip_name);\n        return $file_array;\n    }\n\n    //Upload multiple files on single click\n    public function upload_action_process()\n    {\n\n        // Collect a manually set owner if this has been set\n        // Used when want to manually assign the owning user/service such as the Direct mechanism\n        $non_HTTP_owner = false;\n        if ($this->manual_set_owner) {\n            $non_HTTP_owner = $this->manual_set_owner;\n        }\n\n        $couchDB = false;\n        $harddisk = false;\n        if ($GLOBALS['document_storage_method'] == 0) {\n            $harddisk = true;\n        }\n        if ($GLOBALS['document_storage_method'] == 1) {\n            $couchDB = true;\n        }\n\n        if ($_POST['process'] != \"true\") {\n            return;\n        }\n\n        $doDecryption = false;\n        $encrypted = $_POST['encrypted'] ?? false;\n        $passphrase = $_POST['passphrase'] ?? '';\n        if (\n            !$GLOBALS['hide_document_encryption'] &&\n            $encrypted && $passphrase\n        ) {\n            $doDecryption = true;\n        }\n\n        if (is_numeric($_POST['category_id'])) {\n            $category_id = $_POST['category_id'];\n        }\n\n        $patient_id = 0;\n        if (isset($_GET['patient_id']) && !$couchDB) {\n            $patient_id = $_GET['patient_id'];\n        } elseif (is_numeric($_POST['patient_id'])) {\n            $patient_id = $_POST['patient_id'];\n        }\n\n        if (!empty($_FILES['dicom_folder']['name'][0])) {\n            // let's zip um up then pass along new zip\n            $study_name = $_POST['destination'] ? (trim($_POST['destination']) . \".zip\") : 'DicomStudy.zip';\n            $study_name =  preg_replace('/\\s+/', '_', $study_name);\n            $_POST['destination'] = \"\";\n            $zipped = $this->zip_dicom_folder($study_name);\n            if ($zipped) {\n                $_FILES['file'] = $zipped;\n            }\n            // and off we go! just fall through and let routine\n            // do its normal file processing..\n        }\n\n        $sentUploadStatus = array();\n        if (count($_FILES['file']['name']) > 0) {\n            $upl_inc = 0;\n\n            foreach ($_FILES['file']['name'] as $key => $value) {\n                $fname = $value;\n                $error = \"\";\n                if ($_FILES['file']['error'][$key] > 0 || empty($fname) || $_FILES['file']['size'][$key] == 0) {\n                    $fname = $value;\n                    if (empty($fname)) {\n                        $fname = htmlentities(\"<empty>\");\n                    }\n                    $error = xl(\"Error number\") . \": \" . $_FILES['file']['error'][$key] . \" \" . xl(\"occurred while uploading file named\") . \": \" . $fname . \"\\n\";\n                    if ($_FILES['file']['size'][$key] == 0) {\n                        $error .= xl(\"The system does not permit uploading files of with size 0.\") . \"\\n\";\n                    }\n                } elseif ($GLOBALS['secure_upload'] && !isWhiteFile($_FILES['file']['tmp_name'][$key])) {\n                    $error = xl(\"The system does not permit uploading files with MIME content type\") . \" - \" . mime_content_type($_FILES['file']['tmp_name'][$key]) . \".\\n\";\n                } else {\n                    // Test for a zip of DICOM images\n                    if (stripos($_FILES['file']['type'][$key], 'zip') !== false) {\n                        $za = new ZipArchive();\n                        $handler = $za->open($_FILES['file']['tmp_name'][$key]);\n                        if ($handler) {\n                            $mimetype = \"application/dicom+zip\";\n                            for ($i = 0; $i < $za->numFiles; $i++) {\n                                $stat = $za->statIndex($i);\n                                $fp = $za->getStream($stat['name']);\n                                if ($fp) {\n                                    $head = fread($fp, 256);\n                                    fclose($fp);\n                                    if (strpos($head, 'DICM') === false) { // Fixed at offset 128. even one non DICOM makes zip invalid.\n                                        $mimetype = \"application/zip\";\n                                        break;\n                                    }\n                                    unset($head);\n                                    // if here -then a DICOM\n                                    $parts = pathinfo($stat['name']);\n                                    if ($parts['extension'] != \"dcm\" || empty($parts['extension'])) { // required extension for viewer\n                                        $new_name = $parts['filename'] . \".dcm\";\n                                        $za->renameIndex($i, $new_name);\n                                        $za->renameName($parts['filename'], $new_name);\n                                    }\n                                } else { // Rarely here\n                                    $mimetype = \"application/zip\";\n                                    break;\n                                }\n                            }\n                            $za->close();\n                            if ($mimetype == \"application/dicom+zip\") {\n                                sleep(1); // Timing insurance in case of re-compression. Only acted on index so...!\n                                $_FILES['file']['size'][$key] = filesize($_FILES['file']['tmp_name'][$key]); // file may have grown.\n                            }\n                        }\n                    }\n                    $tmpfile = fopen($_FILES['file']['tmp_name'][$key], \"r\");\n                    $filetext = fread($tmpfile, $_FILES['file']['size'][$key]);\n                    fclose($tmpfile);\n                    if ($doDecryption) {\n                        $filetext = $this->cryptoGen->decryptStandard($filetext, $passphrase);\n                        if ($filetext === false) {\n                            error_log(\"OpenEMR Error: Unable to decrypt a document since decryption failed.\");\n                            $filetext = \"\";\n                        }\n                    }\n                    if ($_POST['destination'] != '') {\n                        $fname = $_POST['destination'];\n                    }\n                    // test for single DICOM and assign extension if missing.\n                    if (strpos($filetext, 'DICM') !== false) {\n                        $mimetype = 'application/dicom';\n                        $parts = pathinfo($fname);\n                        if (!$parts['extension']) {\n                            $fname .= '.dcm';\n                        }\n                    }\n                    // set mimetype (if not already set above)\n                    if (empty($mimetype)) {\n                        $mimetype = mime_content_type($_FILES['file']['tmp_name'][$key]);\n                    }\n                    // if mimetype still empty, then do not upload the file\n                    if (empty($mimetype)) {\n                        $error = xl(\"Unable to discover mimetype, so did not upload \" . $_FILES['file']['tmp_name'][$key]) . \".\\n\";\n                        continue;\n                    }\n                    $d = new Document();\n                    $rc = $d->createDocument(\n                        $patient_id,\n                        $category_id,\n                        $fname,\n                        $mimetype,\n                        $filetext,\n                        empty($_GET['higher_level_path']) ? '' : $_GET['higher_level_path'],\n                        empty($_POST['path_depth']) ? 1 : $_POST['path_depth'],\n                        $non_HTTP_owner,\n                        $_FILES['file']['tmp_name'][$key]\n                    );\n                    if ($rc) {\n                        $error .= $rc . \"\\n\";\n                    } else {\n                        $this->assign(\"upload_success\", \"true\");\n                    }\n                    $sentUploadStatus[] = $d;\n                    $this->assign(\"file\", $sentUploadStatus);\n                }\n\n                // Option to run a custom plugin for each file upload.\n                // This was initially created to delete the original source file in a custom setting.\n                $upload_plugin = $GLOBALS['OE_SITE_DIR'] . \"/documentUpload.plugin.php\";\n                if (file_exists($upload_plugin)) {\n                    include_once($upload_plugin);\n                }\n                $upload_plugin_pp = 'documentUploadPostProcess';\n                if (function_exists($upload_plugin_pp)) {\n                    $tmp = call_user_func($upload_plugin_pp, $value, $d);\n                    if ($tmp) {\n                        $error = $tmp;\n                    }\n                }\n                // Following is just an example of code in such a plugin file.\n                /*****************************************************\n                public function documentUploadPostProcess($filename, &$d) {\n                  $userid = $_SESSION['authUserID'];\n                  $row = sqlQuery(\"SELECT username FROM users WHERE id = ?\", array($userid));\n                  $owner = strtolower($row['username']);\n                  $dn = '1_' . ucfirst($owner);\n                  $filepath = \"/shared_network_directory/$dn/$filename\";\n                  if (@unlink($filepath)) return '';\n                  return \"Failed to delete '$filepath'.\";\n                }\n                *****************************************************/\n            }\n        }\n\n        $this->assign(\"error\", $error);\n        //$this->_state = false;\n        $_POST['process'] = \"\";\n        //return $this->fetch($GLOBALS['template_dir'] . \"documents/\" . $this->template_mod . \"_upload.html\");\n    }\n\n    public function note_action_process($patient_id)\n    {\n        // this public function is a dual public function that will set up a note associated with a document or send a document via email.\n\n        if ($_POST['process'] != \"true\") {\n            return;\n        }\n\n        $n = new Note();\n        $n->set_owner($_SESSION['authUserID']);\n        parent::populate_object($n);\n        if ($_POST['identifier'] == \"no\") {\n            // associate a note with a document\n            $n->persist();\n        } elseif ($_POST['identifier'] == \"yes\") {\n            // send the document via email\n            $d = new Document($_POST['foreign_id']);\n            $url =  $d->get_url();\n            $storagemethod = $d->get_storagemethod();\n            $couch_docid = $d->get_couch_docid();\n            $couch_revid = $d->get_couch_revid();\n            if ($couch_docid && $couch_revid) {\n                $couch = new CouchDB();\n                $resp = $couch->retrieve_doc($couch_docid);\n                $content = $resp->data;\n                if ($content == '' && $GLOBALS['couchdb_log'] == 1) {\n                    $log_content = date('Y-m-d H:i:s') . \" ==> Retrieving document\\r\\n\";\n                    $log_content = date('Y-m-d H:i:s') . \" ==> URL: \" . $url . \"\\r\\n\";\n                    $log_content .= date('Y-m-d H:i:s') . \" ==> CouchDB Document Id: \" . $couch_docid . \"\\r\\n\";\n                    $log_content .= date('Y-m-d H:i:s') . \" ==> CouchDB Revision Id: \" . $couch_revid . \"\\r\\n\";\n                    $log_content .= date('Y-m-d H:i:s') . \" ==> Failed to fetch document content from CouchDB.\\r\\n\";\n                    //$log_content .= date('Y-m-d H:i:s').\" ==> Will try to download file from HardDisk if exists.\\r\\n\\r\\n\";\n                    $this->document_upload_download_log($d->get_foreign_id(), $log_content);\n                    die(xlt(\"File retrieval from CouchDB failed\"));\n                }\n                // place it in a temporary file and will remove the file below after emailed\n                $temp_couchdb_url = $GLOBALS['OE_SITE_DIR'] . '/documents/temp/couch_' . date(\"YmdHis\") . $d->get_url_file();\n                $fh = fopen($temp_couchdb_url, \"w\");\n                fwrite($fh, base64_decode($content));\n                fclose($fh);\n                $temp_url = $temp_couchdb_url; // doing this ensure hard drive file never deleted in case something weird happens\n            } else {\n                $url = preg_replace(\"|^(.*)://|\", \"\", $url);\n        // Collect filename and path\n                $from_all = explode(\"/\", $url);\n                $from_filename = array_pop($from_all);\n                $from_pathname_array = array();\n                for ($i = 0; $i < $d->get_path_depth(); $i++) {\n                    $from_pathname_array[] = array_pop($from_all);\n                }\n                $from_pathname_array = array_reverse($from_pathname_array);\n                $from_pathname = implode(\"/\", $from_pathname_array);\n                $temp_url = $GLOBALS['OE_SITE_DIR'] . '/documents/' . $from_pathname . '/' . $from_filename;\n            }\n            if (!file_exists($temp_url)) {\n                echo xl('The requested document is not present at the expected location on the filesystem or there are not sufficient permissions to access it.', '', '', ' ') . $temp_url;\n            }\n            $url = $temp_url;\n            $pdetails = getPatientData($patient_id);\n            $pname = $pdetails['fname'] . \" \" . $pdetails['lname'];\n            $this->document_send($_POST['provide_email'], $_POST['note'], $url, $pname);\n            if ($couch_docid && $couch_revid) {\n      // remove the temporary couchdb file\n                unlink($temp_couchdb_url);\n            }\n        }\n        $this->_state = false;\n        $_POST['process'] = \"\";\n        return $this->view_action($patient_id, $n->get_foreign_id());\n    }\n\n    public function default_action()\n    {\n        return $this->list_action();\n    }\n\n    public function view_action(string $patient_id = null, $doc_id)\n    {\n        global $ISSUE_TYPES;\n\n        require_once(dirname(__FILE__) . \"/../library/lists.inc\");\n\n        $d = new Document($doc_id);\n        $notes = $d->get_notes();\n\n        $this->assign(\"csrf_token_form\", CsrfUtils::collectCsrfToken());\n\n        $this->assign(\"file\", $d);\n        $this->assign(\"web_path\", $this->_link(\"retrieve\") . \"document_id=\" . urlencode($d->get_id()) . \"&\");\n        $this->assign(\"NOTE_ACTION\", $this->_link(\"note\"));\n        $this->assign(\"MOVE_ACTION\", $this->_link(\"move\") . \"document_id=\" . urlencode($d->get_id()) . \"&process=true\");\n        $this->assign(\"hide_encryption\", $GLOBALS['hide_document_encryption']);\n        $this->assign(\"assets_static_relative\", $GLOBALS['assets_static_relative']);\n        $this->assign(\"webroot\", $GLOBALS['webroot']);\n\n        // Added by Rod to support document delete:\n        $delete_string = '';\n        if (AclMain::aclCheckCore('patients', 'docs_rm')) {\n            $delete_string = \"<a href='' class='btn btn-danger' onclick='return deleteme(\" . attr_js($d->get_id()) .\n                \")'>\" . xlt('Delete') . \"</a>\";\n        }\n        $this->assign(\"delete_string\", $delete_string);\n        $this->assign(\"REFRESH_ACTION\", $this->_link(\"list\"));\n\n        $this->assign(\"VALIDATE_ACTION\", $this->_link(\"validate\") .\n            \"document_id=\" . $d->get_id() . \"&process=true\");\n\n        // Added by Rod to support document date update:\n        $this->assign(\"DOCDATE\", $d->get_docdate());\n        $this->assign(\"UPDATE_ACTION\", $this->_link(\"update\") .\n            \"document_id=\" . $d->get_id() . \"&process=true\");\n\n        // Added by Rod to support document issue update:\n        $issues_options = \"<option value='0'>-- \" . xlt('Select Issue') . \" --</option>\";\n        $ires = sqlStatement(\"SELECT id, type, title, begdate FROM lists WHERE \" .\n            \"pid = ? \" . // AND enddate IS NULL \" .\n            \"ORDER BY type, begdate\", array($patient_id));\n        while ($irow = sqlFetchArray($ires)) {\n            $desc = $irow['type'];\n            if ($ISSUE_TYPES[$desc]) {\n                $desc = $ISSUE_TYPES[$desc][2];\n            }\n            $desc .= \": \" . text($irow['begdate']) . \" \" . text(substr($irow['title'], 0, 40));\n            $sel = ($irow['id'] == $d->get_list_id()) ? ' selected' : '';\n            $issues_options .= \"<option value='\" . attr($irow['id']) . \"'$sel>$desc</option>\";\n        }\n        $this->assign(\"ISSUES_LIST\", $issues_options);\n\n        // For tagging to encounter\n        // Populate the dropdown with patient's encounter list\n        $this->assign(\"TAG_ACTION\", $this->_link(\"tag\") . \"document_id=\" . urlencode($d->get_id()) . \"&process=true\");\n        $encOptions = \"<option value='0'>-- \" . xlt('Select Encounter') . \" --</option>\";\n        $result_docs = sqlStatement(\"SELECT fe.encounter,fe.date,openemr_postcalendar_categories.pc_catname FROM form_encounter AS fe \" .\n            \"LEFT JOIN openemr_postcalendar_categories ON fe.pc_catid=openemr_postcalendar_categories.pc_catid  WHERE fe.pid = ? ORDER BY fe.date desc\", array($patient_id));\n        if (sqlNumRows($result_docs) > 0) {\n            while ($row_result_docs = sqlFetchArray($result_docs)) {\n                $sel_enc = ($row_result_docs['encounter'] == $d->get_encounter_id()) ? ' selected' : '';\n                $encOptions .= \"<option value='\" . attr($row_result_docs['encounter']) . \"' $sel_enc>\" . text(oeFormatShortDate(date('Y-m-d', strtotime($row_result_docs['date'])))) . \"-\" . text(xl_appt_category($row_result_docs['pc_catname'])) . \"</option>\";\n            }\n        }\n        $this->assign(\"ENC_LIST\", $encOptions);\n\n        //clear encounter tag\n        if ($d->get_encounter_id() != 0) {\n            $this->assign('clear_encounter_tag', $this->_link('clear_encounter_tag') . \"document_id=\" . urlencode($d->get_id()));\n        } else {\n            $this->assign('clear_encounter_tag', 'javascript:void(0)');\n        }\n\n        //Populate the dropdown with category list\n        $visit_category_list = \"<option value='0'>-- \" . xlt('Select One') . \" --</option>\";\n        $cres = sqlStatement(\"SELECT pc_catid, pc_catname FROM openemr_postcalendar_categories ORDER BY pc_catname\");\n        while ($crow = sqlFetchArray($cres)) {\n            $catid = $crow['pc_catid'];\n            if ($catid < 9 && $catid != 5) {\n                continue; // Applying same logic as in new encounter page.\n            }\n            $visit_category_list .= \"<option value='\" . attr($catid) . \"'>\" . text(xl_appt_category($crow['pc_catname'])) . \"</option>\\n\";\n        }\n        $this->assign(\"VISIT_CATEGORY_LIST\", $visit_category_list);\n\n        $this->assign(\"notes\", $notes);\n\n        $this->assign(\"PROCEDURE_TAG_ACTION\", $this->_link(\"image_procedure\") . \"document_id=\" . urlencode($d->get_id()));\n        // Populate the dropdown with procedure order list\n        $imgOptions = \"<option value='0'>-- \" . xlt('Select Procedure') . \" --</option>\";\n        $imgOrders  = sqlStatement(\"select procedure_name,po.procedure_order_id,procedure_code,poc.procedure_order_title from procedure_order po inner join procedure_order_code poc on poc.procedure_order_id = po.procedure_order_id where po.patient_id = ?\", array($patient_id));\n        $mapping    = $this->get_mapped_procedure($d->get_id());\n        if (sqlNumRows($imgOrders) > 0) {\n            while ($row = sqlFetchArray($imgOrders)) {\n                $sel_proc = '';\n                if ((isset($mapping['procedure_code']) && $mapping['procedure_code'] == $row['procedure_code']) && (isset($mapping['procedure_code']) && $mapping['procedure_order_id'] == $row['procedure_order_id'])) {\n                    $sel_proc = 'selected';\n                }\n                $imgOptions .= \"<option value='\" . attr($row['procedure_order_id']) . \"' data-code='\" . attr($row['procedure_code']) . \"' $sel_proc>\" . text($row['procedure_name'] . ' - ' . $row['procedure_code'] . ' : ' . ucfirst($row['procedure_order_title'])) . \"</option>\";\n            }\n        }\n\n        $this->assign('TAG_PROCEDURE_LIST', $imgOptions);\n\n        $this->assign('clear_procedure_tag', $this->_link('clear_procedure_tag') . \"document_id=\" . urlencode($d->get_id()));\n\n        $this->_last_node = null;\n\n        $menu  = new HTML_TreeMenu();\n\n        //pass an empty array because we don't want the documents for each category showing up in this list box\n        $rnode = $this->array_recurse($this->tree->tree, $patient_id, array());\n        $menu->addItem($rnode);\n        $treeMenu_listbox  = new HTML_TreeMenu_Listbox($menu, array(\"promoText\" => xl('Move Document to Category:')));\n\n        $this->assign(\"tree_html_listbox\", $treeMenu_listbox->toHTML());\n\n        $activity = $this->fetch($GLOBALS['template_dir'] . \"documents/\" . $this->template_mod . \"_view.html\");\n        $this->assign(\"activity\", $activity);\n\n        return $this->list_action($patient_id);\n    }\n\n    /**\n     * Retrieve file from hard disk / CouchDB.\n     * In case that file isn't download this public function will return thumbnail image (if exist).\n     * @param (boolean) $show_original - enable to show the original image (not thumbnail) in inline status.\n     * @param (string) $context - given a special document scenario (e.g.: patient avatar, custom image viewer document, etc), the context can be set so that a switch statement can execute a custom strategy.\n     * */\n    public function retrieve_action(string $patient_id = null, $document_id, $as_file = true, $original_file = true, $disable_exit = false, $show_original = false, $context = \"normal\")\n    {\n        $encrypted = $_POST['encrypted'] ?? false;\n        $passphrase = $_POST['passphrase'] ?? '';\n        $doEncryption = false;\n        if (\n            !$GLOBALS['hide_document_encryption'] &&\n            $encrypted == \"true\" &&\n            $passphrase\n        ) {\n            $doEncryption = true;\n        }\n\n            //controller public function ruins booleans, so need to manually re-convert to booleans\n        if ($as_file == \"true\") {\n                $as_file = true;\n        } elseif ($as_file == \"false\") {\n                $as_file = false;\n        }\n        if ($original_file == \"true\") {\n                $original_file = true;\n        } elseif ($original_file == \"false\") {\n                $original_file = false;\n        }\n        if ($disable_exit == \"true\") {\n                $disable_exit = true;\n        } elseif ($disable_exit == \"false\") {\n                $disable_exit = false;\n        }\n        if ($show_original == \"true\") {\n            $show_original = true;\n        } elseif ($show_original == \"false\") {\n            $show_original = false;\n        }\n\n        switch ($context) {\n            case \"patient_picture\":\n                $document_id = $this->patientService->getPatientPictureDocumentId($patient_id);\n                break;\n        }\n\n        $d = new Document($document_id);\n        $url =  $d->get_url();\n        $th_url = $d->get_thumb_url();\n\n        $storagemethod = $d->get_storagemethod();\n        $couch_docid = $d->get_couch_docid();\n        $couch_revid = $d->get_couch_revid();\n\n        if ($couch_docid && $couch_revid && $original_file) {\n            // standard case for collecting a document from couchdb\n            $couch = new CouchDB();\n            $resp = $couch->retrieve_doc($couch_docid);\n            //Take thumbnail file when is not null and file is presented online\n            if (!$as_file && !is_null($th_url) && !$show_original) {\n                $content = $resp->th_data;\n            } else {\n                $content = $resp->data;\n            }\n            if ($content == '' && $GLOBALS['couchdb_log'] == 1) {\n                $log_content = date('Y-m-d H:i:s') . \" ==> Retrieving document\\r\\n\";\n                $log_content = date('Y-m-d H:i:s') . \" ==> URL: \" . $url . \"\\r\\n\";\n                $log_content .= date('Y-m-d H:i:s') . \" ==> CouchDB Document Id: \" . $couch_docid . \"\\r\\n\";\n                $log_content .= date('Y-m-d H:i:s') . \" ==> CouchDB Revision Id: \" . $couch_revid . \"\\r\\n\";\n                $log_content .= date('Y-m-d H:i:s') . \" ==> Failed to fetch document content from CouchDB.\\r\\n\";\n                $log_content .= date('Y-m-d H:i:s') . \" ==> Will try to download file from HardDisk if exists.\\r\\n\\r\\n\";\n                $this->document_upload_download_log($d->get_foreign_id(), $log_content);\n                die(xlt(\"File retrieval from CouchDB failed\"));\n            }\n            if ($d->get_encrypted() == 1) {\n                $filetext = $this->cryptoGen->decryptStandard($content, null, 'database');\n            } else {\n                $filetext = base64_decode($content);\n            }\n            if ($disable_exit == true) {\n                return $filetext;\n            }\n            header('Content-Description: File Transfer');\n            header('Content-Transfer-Encoding: binary');\n            header('Expires: 0');\n            header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n            header('Pragma: public');\n            if ($doEncryption) {\n                $ciphertext = $this->cryptoGen->encryptStandard($filetext, $passphrase);\n                header('Content-Disposition: attachment; filename=\"' . \"/encrypted_aes_\" . $d->get_name() . '\"');\n                header(\"Content-Type: application/octet-stream\");\n                header(\"Content-Length: \" . strlen($ciphertext));\n                echo $ciphertext;\n            } else {\n                header(\"Content-Disposition: \" . ($as_file ? \"attachment\" : \"inline\") . \"; filename=\\\"\" . $d->get_name() . \"\\\"\");\n                header(\"Content-Type: \" . $d->get_mimetype());\n                header(\"Content-Length: \" . strlen($filetext));\n                echo $filetext;\n            }\n            exit;//exits only if file download from CouchDB is successfull.\n        }\n        if ($couch_docid && $couch_revid) {\n            //special case when retrieving a document from couchdb that has been converted to a jpg and not directly referenced in openemr documents table\n            //try to convert it if it has not yet been converted\n            //first, see if the converted jpg already exists\n            $couch = new CouchDB();\n            $resp = $couch->retrieve_doc(\"converted_\" . $couch_docid);\n            $content = $resp->data;\n            if ($content == '') {\n                //create the converted jpg\n                $couchM = new CouchDB();\n                $respM = $couchM->retrieve_doc($couch_docid);\n                if ($d->get_encrypted() == 1) {\n                    $contentM = $this->cryptoGen->decryptStandard($respM->data, null, 'database');\n                } else {\n                    $contentM = base64_decode($respM->data);\n                }\n                if ($contentM == '' && $GLOBALS['couchdb_log'] == 1) {\n                    $log_content = date('Y-m-d H:i:s') . \" ==> Retrieving document\\r\\n\";\n                    $log_content = date('Y-m-d H:i:s') . \" ==> URL: \" . $url . \"\\r\\n\";\n                    $log_content .= date('Y-m-d H:i:s') . \" ==> CouchDB Document Id: \" . $couch_docid . \"\\r\\n\";\n                    $log_content .= date('Y-m-d H:i:s') . \" ==> CouchDB Revision Id: \" . $couch_revid . \"\\r\\n\";\n                    $log_content .= date('Y-m-d H:i:s') . \" ==> Failed to fetch document content from CouchDB.\\r\\n\";\n                    $log_content .= date('Y-m-d H:i:s') . \" ==> Will try to download file from HardDisk if exists.\\r\\n\\r\\n\";\n                    $this->document_upload_download_log($d->get_foreign_id(), $log_content);\n                    die(xlt(\"File retrieval from CouchDB failed\"));\n                }\n                // place the from-file into a temporary file\n                $from_file_tmp_name = tempnam($GLOBALS['temporary_files_dir'], \"oer\");\n                file_put_contents($from_file_tmp_name, $contentM);\n                // prepare a temporary file for the to-file\n                $to_file_tmp = tempnam($GLOBALS['temporary_files_dir'], \"oer\");\n                $to_file_tmp_name = $to_file_tmp . \".jpg\";\n                // convert file to jpg\n                exec(\"convert -density 200 \" . escapeshellarg($from_file_tmp_name) . \" -append -resize 850 \" . escapeshellarg($to_file_tmp_name));\n                // remove from tmp file\n                unlink($from_file_tmp_name);\n                // save the to-file if a to-file was created in above convert call\n                if (is_file($to_file_tmp_name)) {\n                    $couchI = new CouchDB();\n                    if ($d->get_encrypted() == 1) {\n                        $document = $this->cryptoGen->encryptStandard(file_get_contents($to_file_tmp_name), null, 'database');\n                    } else {\n                        $document = base64_encode(file_get_contents($to_file_tmp_name));\n                    }\n                    $couchI->save_doc(['_id' => \"converted_\" . $couch_docid, 'data' => $document]);\n                    // remove to tmp files\n                    unlink($to_file_tmp);\n                    unlink($to_file_tmp_name);\n                } else {\n                    error_log(\"ERROR: Document '\" . errorLogEscape($d->get_name()) . \"' cannot be converted to JPEG. Perhaps ImageMagick is not installed?\");\n                }\n                // now collect the newly created converted jpg\n                $couchF = new CouchDB();\n                $respF = $couchF->retrieve_doc(\"converted_\" . $couch_docid);\n                if ($d->get_encrypted() == 1) {\n                    $content = $this->cryptoGen->decryptStandard($respF->data, null, 'database');\n                } else {\n                    $content = base64_decode($respF->data);\n                }\n            } else {\n                // decrypt/decode when converted jpg already exists\n                if ($d->get_encrypted() == 1) {\n                    $content = $this->cryptoGen->decryptStandard($resp->data, null, 'database');\n                } else {\n                    $content = base64_decode($resp->data);\n                }\n            }\n            $filetext = $content;\n            if ($disable_exit == true) {\n                return $filetext;\n            }\n            header(\"Pragma: public\");\n            header(\"Expires: 0\");\n            header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n            header(\"Content-Disposition: \" . ($as_file ? \"attachment\" : \"inline\") . \"; filename=\\\"\" . $d->get_name() . \"\\\"\");\n            header(\"Content-Type: image/jpeg\");\n            header(\"Content-Length: \" . strlen($filetext));\n            echo $filetext;\n            exit;\n        }\n\n        //Take thumbnail file when is not null and file is presented online\n        if (!$as_file && !is_null($th_url) && !$show_original) {\n            $url = $th_url;\n        }\n\n        //strip url of protocol handler\n        $url = preg_replace(\"|^(.*)://|\", \"\", $url);\n\n        //change full path to current webroot.  this is for documents that may have\n        //been moved from a different filesystem and the full path in the database\n        //is not current.  this is also for documents that may of been moved to\n        //different patients. Note that the path_depth is used to see how far down\n                //the path to go. For example, originally the path_depth was always 1, which\n                //only allowed things like documents/1/<file>, but now can have more structured\n                //directories. For example a path_depth of 2 can give documents/encounters/1/<file>\n                // etc.\n        // NOTE that $from_filename and basename($url) are the same thing\n        $from_all = explode(\"/\", $url);\n        $from_filename = array_pop($from_all);\n        $from_pathname_array = array();\n        for ($i = 0; $i < $d->get_path_depth(); $i++) {\n            $from_pathname_array[] = array_pop($from_all);\n        }\n        $from_pathname_array = array_reverse($from_pathname_array);\n        $from_pathname = implode(\"/\", $from_pathname_array);\n        if ($couch_docid && $couch_revid) {\n            //for couchDB no URL is available in the table, hence using the foreign_id which is patientID\n            $temp_url = $GLOBALS['OE_SITE_DIR'] . '/documents/temp/' . $d->get_foreign_id() . '_' . $from_filename;\n        } else {\n            $temp_url = $GLOBALS['OE_SITE_DIR'] . '/documents/' . $from_pathname . '/' . $from_filename;\n        }\n\n        if (file_exists($temp_url)) {\n            $url = $temp_url;\n        }\n\n        if (!file_exists($url)) {\n            echo xl('The requested document is not present at the expected location on the filesystem or there are not sufficient permissions to access it.', '', '', ' ') . $url;\n        } else {\n            if ($original_file) {\n                //normal case when serving the file referenced in database\n                if ($d->get_encrypted() == 1) {\n                    $filetext = $this->cryptoGen->decryptStandard(file_get_contents($url), null, 'database');\n                } else {\n                    if (!is_dir($url)) {\n                        $filetext = file_get_contents($url);\n                    }\n                }\n                if ($disable_exit == true) {\n                    return $filetext ?? '';\n                }\n                header('Content-Description: File Transfer');\n                header('Content-Transfer-Encoding: binary');\n                header('Expires: 0');\n                header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n                header('Pragma: public');\n                if ($doEncryption) {\n                    $ciphertext = $this->cryptoGen->encryptStandard($filetext, $passphrase);\n                    header('Content-Disposition: attachment; filename=\"' . \"/encrypted_aes_\" . $d->get_name() . '\"');\n                    header(\"Content-Type: application/octet-stream\");\n                    header(\"Content-Length: \" . strlen($ciphertext));\n                    echo $ciphertext;\n                } else {\n                    header(\"Content-Disposition: \" . ($as_file ? \"attachment\" : \"inline\") . \"; filename=\\\"\" . $d->get_name() . \"\\\"\");\n                    header(\"Content-Type: \" . $d->get_mimetype());\n                    header(\"Content-Length: \" . strlen($filetext ?? ''));\n                    echo $filetext ?? '';\n                }\n                exit;\n            } else {\n                //special case when retrieving a document that has been converted to a jpg and not directly referenced in database\n                //try to convert it if it has not yet been converted\n                $originalUrl = $url;\n                if (strrpos(basename_international($url), '.') === false) {\n                    $convertedFile = basename_international($url) . '_converted.jpg';\n                } else {\n                    $convertedFile = substr(basename_international($url), 0, strrpos(basename_international($url), '.')) . '_converted.jpg';\n                }\n                $url = $GLOBALS['OE_SITE_DIR'] . '/documents/' . $from_pathname . '/' . $convertedFile;\n                if (!is_file($url)) {\n                    if ($d->get_encrypted() == 1) {\n                        // decrypt the from-file into a temporary file\n                        $from_file_unencrypted = $this->cryptoGen->decryptStandard(file_get_contents($originalUrl), null, 'database');\n                        $from_file_tmp_name = tempnam($GLOBALS['temporary_files_dir'], \"oer\");\n                        file_put_contents($from_file_tmp_name, $from_file_unencrypted);\n                        // prepare a temporary file for the unencrypted to-file\n                        $to_file_tmp = tempnam($GLOBALS['temporary_files_dir'], \"oer\");\n                        $to_file_tmp_name = $to_file_tmp . \".jpg\";\n                        // convert file to jpg\n                        exec(\"convert -density 200 \" . escapeshellarg($from_file_tmp_name) . \" -append -resize 850 \" . escapeshellarg($to_file_tmp_name));\n                        // remove unencrypted tmp file\n                        unlink($from_file_tmp_name);\n                        // make the encrypted to-file if a to-file was created in above convert call\n                        if (is_file($to_file_tmp_name)) {\n                            $to_file_encrypted = $this->cryptoGen->encryptStandard(file_get_contents($to_file_tmp_name), null, 'database');\n                            file_put_contents($url, $to_file_encrypted);\n                            // remove unencrypted tmp files\n                            unlink($to_file_tmp);\n                            unlink($to_file_tmp_name);\n                        }\n                    } else {\n                        // convert file to jpg\n                        exec(\"convert -density 200 \" . escapeshellarg($originalUrl) . \" -append -resize 850 \" . escapeshellarg($url));\n                    }\n                }\n                if (is_file($url)) {\n                    if ($d->get_encrypted() == 1) {\n                        $filetext = $this->cryptoGen->decryptStandard(file_get_contents($url), null, 'database');\n                    } else {\n                        $filetext = file_get_contents($url);\n                    }\n                } else {\n                    $filetext = '';\n                    error_log(\"ERROR: Document '\" . errorLogEscape(basename_international($url)) . \"' cannot be converted to JPEG. Perhaps ImageMagick is not installed?\");\n                }\n                if ($disable_exit == true) {\n                    return $filetext;\n                }\n                header(\"Pragma: public\");\n                header(\"Expires: 0\");\n                header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n                header(\"Content-Disposition: \" . ($as_file ? \"attachment\" : \"inline\") . \"; filename=\\\"\" . $d->get_name() . \"\\\"\");\n                header(\"Content-Type: image/jpeg\");\n                header(\"Content-Length: \" . strlen($filetext));\n                echo $filetext;\n                exit;\n            }\n        }\n    }\n\n    public function move_action_process(string $patient_id = null, $document_id)\n    {\n        if ($_POST['process'] != \"true\") {\n            return;\n        }\n\n        $messages = '';\n\n        $new_category_id = $_POST['new_category_id'];\n        $new_patient_id = $_POST['new_patient_id'];\n\n        //move to new category\n        if (is_numeric($new_category_id) && is_numeric($document_id)) {\n            $sql = \"UPDATE categories_to_documents set category_id = ? where document_id = ?\";\n            $messages .= xl('Document moved to new category', '', '', ' \\'') . $this->tree->_id_name[$new_category_id]['name']  . xl('successfully.', '', '\\' ') . \"\\n\";\n            //echo $sql;\n            $this->tree->_db->Execute($sql, [$new_category_id, $document_id]);\n        }\n\n        //move to new patient\n        if (is_numeric($new_patient_id) && is_numeric($document_id)) {\n            $d = new Document($document_id);\n            $sql = \"SELECT pid from patient_data where pid = ?\";\n            $result = $d->_db->Execute($sql, [$new_patient_id]);\n\n            if (!$result || $result->EOF) {\n                //patient id does not exist\n                $messages .= xl('Document could not be moved to patient id', '', '', ' \\'') . $new_patient_id  . xl('because that id does not exist.', '', '\\' ') . \"\\n\";\n            } else {\n                $changefailed = !$d->change_patient($new_patient_id);\n\n                $this->_state = false;\n                if (!$changefailed) {\n                    $messages .= xl('Document moved to patient id', '', '', ' \\'') . $new_patient_id  . xl('successfully.', '', '\\' ') . \"\\n\";\n                } else {\n                    $messages .= xl('Document moved to patient id', '', '', ' \\'') . $new_patient_id  . xl('Failed.', '', '\\' ') . \"\\n\";\n                }\n                $this->assign(\"messages\", $messages);\n                return $this->list_action($patient_id);\n            }\n        }\n\n        $this->_state = false;\n        $this->assign(\"messages\", $messages);\n        return $this->view_action($patient_id, $document_id);\n    }\n\n    public function validate_action_process(string $patient_id = null, $document_id)\n    {\n\n        $d = new Document($document_id);\n        if ($d->couch_docid && $d->couch_revid) {\n            $file_path = $GLOBALS['OE_SITE_DIR'] . '/documents/temp/';\n            $url = $file_path . $d->get_url();\n            $couch = new CouchDB();\n            $resp = $couch->retrieve_doc($d->couch_docid);\n            if ($d->get_encrypted() == 1) {\n                $content = $this->cryptoGen->decryptStandard($resp->data, null, 'database');\n            } else {\n                $content = base64_decode($resp->data);\n            }\n        } else {\n                $url =  $d->get_url();\n\n                //strip url of protocol handler\n                $url = preg_replace(\"|^(.*)://|\", \"\", $url);\n\n                //change full path to current webroot.  this is for documents that may have\n                //been moved from a different filesystem and the full path in the database\n                //is not current.  this is also for documents that may of been moved to\n                //different patients. Note that the path_depth is used to see how far down\n                //the path to go. For example, originally the path_depth was always 1, which\n                //only allowed things like documents/1/<file>, but now can have more structured\n                //directories. For example a path_depth of 2 can give documents/encounters/1/<file>\n                // etc.\n                // NOTE that $from_filename and basename($url) are the same thing\n                $from_all = explode(\"/\", $url);\n                $from_filename = array_pop($from_all);\n                $from_pathname_array = array();\n            for ($i = 0; $i < $d->get_path_depth(); $i++) {\n                $from_pathname_array[] = array_pop($from_all);\n            }\n                $from_pathname_array = array_reverse($from_pathname_array);\n                $from_pathname = implode(\"/\", $from_pathname_array);\n                $temp_url = $GLOBALS['OE_SITE_DIR'] . '/documents/' . $from_pathname . '/' . $from_filename;\n            if (file_exists($temp_url)) {\n                $url = $temp_url;\n            }\n\n            if ($_POST['process'] != \"true\") {\n                die(\"process is '\" . text($_POST['process']) . \"', expected 'true'\");\n                return;\n            }\n\n            if ($d->get_encrypted() == 1) {\n                $content = $this->cryptoGen->decryptStandard(file_get_contents($url), null, 'database');\n            } else {\n                $content = file_get_contents($url);\n            }\n        }\n\n        if (!empty($d->get_hash()) && (strlen($d->get_hash()) < 50)) {\n            // backward compatibility for documents that were hashed prior to OpenEMR 6.0.0\n            $current_hash = sha1($content);\n        } else {\n            $current_hash = hash('sha3-512', $content);\n        }\n        $messages = xl('Current Hash') . \": \" . $current_hash . \" | \";\n        $messages .= xl('Stored Hash') . \": \" . $d->get_hash();\n        if ($d->get_hash() == '') {\n            $d->hash = $current_hash;\n            $d->persist();\n            $d->populate();\n            $messages .= xl('Hash did not exist for this file. A new hash was generated.');\n        } elseif ($current_hash != $d->get_hash()) {\n            $messages .= xl('Hash does not match. Data integrity has been compromised.');\n        } else {\n            $messages = xl('Document passed integrity check.') . ' | ' . $messages;\n        }\n        $this->_state = false;\n        $this->assign(\"messages\", $messages);\n        return $this->view_action($patient_id, $document_id);\n    }\n\n    // Added by Rod for metadata update.\n    //\n    public function update_action_process(string $patient_id = null, $document_id)\n    {\n\n        if ($_POST['process'] != \"true\") {\n            die(\"process is '\" . $_POST['process'] . \"', expected 'true'\");\n            return;\n        }\n\n        $docdate = $_POST['docdate'];\n        $docname = $_POST['docname'];\n        $issue_id = $_POST['issue_id'];\n\n        if (is_numeric($document_id)) {\n            $messages = '';\n            $d = new Document($document_id);\n            $file_name = $d->get_name();\n            if (\n                $docname != '' &&\n                 $docname != $file_name\n            ) {\n                // Rename\n                $d->set_name($docname);\n                $d->persist();\n                $d->populate();\n                $messages .= xl('Document successfully renamed.') . \"<br />\";\n            }\n\n            if (preg_match('/^\\d\\d\\d\\d-\\d+-\\d+$/', $docdate)) {\n                $docdate = \"$docdate\";\n            } else {\n                $docdate = \"NULL\";\n            }\n            if (!is_numeric($issue_id)) {\n                $issue_id = 0;\n            }\n            $couch_docid = $d->get_couch_docid();\n            $couch_revid = $d->get_couch_revid();\n            if ($couch_docid && $couch_revid) {\n                $sql = \"UPDATE documents SET docdate = ?, url = ?, list_id = ? WHERE id = ?\";\n                $this->tree->_db->Execute($sql, [$docdate, $_POST['docname'], $issue_id, $document_id]);\n            } else {\n                $sql = \"UPDATE documents SET docdate = ?, list_id = ? WHERE id = ?\";\n                $this->tree->_db->Execute($sql, [$docdate, $issue_id, $document_id]);\n            }\n            $messages .= xl('Document date and issue updated successfully') . \"<br />\";\n        }\n\n        $this->_state = false;\n        $this->assign(\"messages\", $messages);\n        return $this->view_action($patient_id, $document_id);\n    }\n\n    public function list_action($patient_id = \"\")\n    {\n        $this->_last_node = null;\n        $categories_list = $this->tree->_get_categories_array($patient_id);\n        //print_r($categories_list);\n\n        $menu  = new HTML_TreeMenu();\n        $rnode = $this->array_recurse($this->tree->tree, $patient_id, $categories_list);\n        $menu->addItem($rnode);\n        $treeMenu = new HTML_TreeMenu_DHTML($menu, array('images' => 'public/images', 'defaultClass' => 'treeMenuDefault'));\n        $treeMenu_listbox  = new HTML_TreeMenu_Listbox($menu, array('linkTarget' => '_self'));\n        $this->assign(\"tree_html\", $treeMenu->toHTML());\n\n        $is_new = isset($_GET['patient_name']) ? 1 : false;\n        $place_hld = isset($_GET['patient_name']) ? filter_input(INPUT_GET, 'patient_name') : xl(\"Patient search or select.\");\n        $cur_pid = isset($_GET['patient_id']) ? filter_input(INPUT_GET, 'patient_id') : '';\n        $used_msg = xl('Current patient unavailable here. Use Patient Documents');\n        if ($cur_pid == '00') {\n            if (!AclMain::aclCheckCore('patients', 'docs', '', ['write', 'addonly'])) {\n                echo (new TwigContainer(null, $GLOBALS['kernel']))->getTwig()->render('core/unauthorized.html.twig', ['pageTitle' => xl(\"Documents\")]);\n                exit;\n            }\n            $cur_pid = '0';\n            $is_new = 1;\n        }\n        if (!AclMain::aclCheckCore('patients', 'docs')) {\n            echo (new TwigContainer(null, $GLOBALS['kernel']))->getTwig()->render('core/unauthorized.html.twig', ['pageTitle' => xl(\"Documents\")]);\n            exit;\n        }\n        $this->assign('is_new', $is_new);\n        $this->assign('place_hld', $place_hld);\n        $this->assign('cur_pid', $cur_pid);\n        $this->assign('used_msg', $used_msg);\n        $this->assign('demo_pid', ($_SESSION['pid'] ?? null));\n\n        return $this->fetch($GLOBALS['template_dir'] . \"documents/\" . $this->template_mod . \"_list.html\");\n    }\n\n    public function &array_recurse($array, $patient_id, $categories = array())\n    {\n        if (!is_array($array)) {\n            $array = array();\n        }\n        $node = &$this->_last_node;\n        $current_node = &$node;\n        $expandedIcon = 'folder-expanded.gif';\n        foreach ($array as $id => $ar) {\n            $icon = 'folder.gif';\n            if (is_array($ar)  || !empty($id)) {\n                if ($node == null) {\n                    //echo \"r:\" . $this->tree->get_node_name($id) . \"<br />\";\n                    $rnode = new HTML_TreeNode(array(\"id\" => $id, 'text' => $this->tree->get_node_name($id), 'link' => $this->_link(\"upload\") . \"parent_id=\" . $id . \"&\", 'icon' => $icon, 'expandedIcon' => $expandedIcon, 'expanded' => false));\n                    $this->_last_node = &$rnode;\n                    $node = &$rnode;\n                    $current_node = &$rnode;\n                } else {\n                    //echo \"p:\" . $this->tree->get_node_name($id) . \"<br />\";\n                    $this->_last_node = &$node->addItem(new HTML_TreeNode(array(\"id\" => $id, 'text' => $this->tree->get_node_name($id), 'link' => $this->_link(\"upload\") . \"parent_id=\" . $id . \"&\", 'icon' => $icon, 'expandedIcon' => $expandedIcon)));\n                    $current_node = &$this->_last_node;\n                }\n\n                $this->array_recurse($ar, $patient_id, $categories);\n            } else {\n                if ($id === 0 && !empty($ar)) {\n                    $info = $this->tree->get_node_info($id);\n                  //echo \"b:\" . $this->tree->get_node_name($id) . \"<br />\";\n                    $current_node = &$node->addItem(new HTML_TreeNode(array(\"id\" => $id, 'text' => $info['value'], 'link' => $this->_link(\"upload\") . \"parent_id=\" . $id . \"&\", 'icon' => $icon, 'expandedIcon' => $expandedIcon)));\n                } else {\n                    //there is a third case that is implicit here when title === 0 and $ar is empty, in that case we do not want to do anything\n                    //this conditional tree could be more efficient but working with recursive trees makes my head hurt, TODO\n                    if ($id !== 0 && is_object($node)) {\n                      //echo \"n:\" . $this->tree->get_node_name($id) . \"<br />\";\n                        $current_node = &$node->addItem(new HTML_TreeNode(array(\"id\" => $id, 'text' => $this->tree->get_node_name($id), 'link' => $this->_link(\"upload\") . \"parent_id=\" . $id . \"&\", 'icon' => $icon, 'expandedIcon' => $expandedIcon)));\n                    }\n                }\n            }\n\n            // If there are documents in this document category, then add their\n            // attributes to the current node.\n            $icon = \"file3.png\";\n            if (!empty($categories[$id]) && is_array($categories[$id])) {\n                foreach ($categories[$id] as $doc) {\n                    $link = $this->_link(\"view\") . \"doc_id=\" . urlencode($doc['document_id']) . \"&\";\n          // If user has no access then there will be no link.\n                    if (!AclMain::aclCheckAcoSpec($doc['aco_spec'])) {\n                        $link = '';\n                    }\n                    // CCD view\n                    $nodeInfo = $this->tree->get_node_info($id);\n                    $treeViewFilterEvent = new PatientDocumentTreeViewFilterEvent();\n                    $treeViewFilterEvent->setCategoryTreeNode($this->tree);\n                    $treeViewFilterEvent->setDocumentId($doc['document_id']);\n                    $treeViewFilterEvent->setDocumentName($doc['document_name']);\n                    $treeViewFilterEvent->setCategoryId($id);\n                    $treeViewFilterEvent->setCategoryInfo($nodeInfo);\n                    $treeViewFilterEvent->setPid($patient_id);\n\n                    $htmlNode = new HTML_TreeNode(array(\n                        'text' => oeFormatShortDate($doc['docdate']) . ' ' . $doc['document_name'] . '-' . $doc['document_id'],\n                        'link' => $link,\n                        'icon' => $icon,\n                        'expandedIcon' => $expandedIcon\n                    ));\n\n                    $treeViewFilterEvent->setHtmlTreeNode($htmlNode);\n                    $filteredEvent = $GLOBALS['kernel']->getEventDispatcher()->dispatch($treeViewFilterEvent, PatientDocumentTreeViewFilterEvent::EVENT_NAME);\n                    if ($filteredEvent->getHtmlTreeNode() != null) {\n                        $current_node->addItem($filteredEvent->getHtmlTreeNode());\n                    } else {\n                        // add the original node if we got back nothing from the server\n                        $current_node->addItem($htmlNode);\n                    }\n                }\n            }\n        }\n        return $node;\n    }\n\n    //public function for logging  the errors in writing file to CouchDB/Hard Disk\n    public function document_upload_download_log($patientid, $content)\n    {\n        $log_path = $GLOBALS['OE_SITE_DIR'] . \"/documents/couchdb/\";\n        $log_file = 'log.txt';\n        if (!is_dir($log_path)) {\n            mkdir($log_path, 0777, true);\n        }\n\n        $LOG = file_get_contents($log_path . $log_file);\n\n        if ($this->cryptoGen->cryptCheckStandard($LOG)) {\n            $LOG = $this->cryptoGen->decryptStandard($LOG, null, 'database');\n        }\n\n        $LOG .= $content;\n\n        if (!empty($LOG)) {\n            if ($GLOBALS['drive_encryption']) {\n                $LOG = $this->cryptoGen->encryptStandard($LOG, null, 'database');\n            }\n            file_put_contents($log_path . $log_file, $LOG);\n        }\n    }\n\n    public function document_send($email, $body, $attfile, $pname)\n    {\n        if (empty($email)) {\n            $this->assign(\"process_result\", \"Email could not be sent, the address supplied: '$email' was empty or invalid.\");\n            return;\n        }\n\n          $desc = \"Please check the attached patient document.\\n Content:\" . $body;\n          $mail = new MyMailer();\n          $from_name = $GLOBALS[\"practice_return_email_path\"];\n          $from =  $GLOBALS[\"practice_return_email_path\"];\n          $mail->AddReplyTo($from, $from_name);\n          $mail->SetFrom($from, $from);\n          $to = $email ;\n        $to_name = $email;\n          $mail->AddAddress($to, $to_name);\n          $subject = \"Patient documents\";\n          $mail->Subject = $subject;\n          $mail->Body = $desc;\n          $mail->AddAttachment($attfile);\n        if ($mail->Send()) {\n            $retstatus = \"email_sent\";\n        } else {\n            $email_status = $mail->ErrorInfo;\n            //echo \"EMAIL ERROR: \".$email_status;\n            $retstatus =  \"email_fail\";\n        }\n    }\n\n//place to hold optional code\n//$first_node = array_keys($t->tree);\n        //$first_node = $first_node[0];\n        //$node1 = new HTML_TreeNode(array('text' => $t->get_node_name($first_node), 'link' => \"test.php\", 'icon' => $icon, 'expandedIcon' => $expandedIcon, 'expanded' => true), array('onclick' => \"alert('foo'); return false\", 'onexpand' => \"alert('Expanded')\"));\n\n        //$this->_last_node = &$node1;\n\n// public function to tag a document to an encounter.\n    public function tag_action_process(string $patient_id = null, $document_id)\n    {\n        if ($_POST['process'] != \"true\") {\n            die(\"process is '\" . text($_POST['process']) . \"', expected 'true'\");\n            return;\n        }\n\n        // Create Encounter and Tag it.\n        $event_date = date('Y-m-d H:i:s');\n        $encounter_id = $_POST['encounter_id'];\n        $encounter_check = $_POST['encounter_check'];\n        $visit_category_id = $_POST['visit_category_id'];\n\n        if (is_numeric($document_id)) {\n            $messages = '';\n            $d = new Document($document_id);\n            $file_name = $d->get_url_file();\n            if (!is_numeric($encounter_id)) {\n                $encounter_id = 0;\n            }\n\n            $encounter_check = ( $encounter_check == 'on') ? 1 : 0;\n            if ($encounter_check) {\n                $provider_id = $_SESSION['authUserID'] ;\n\n                // Get the logged in user's facility\n                $facilityRow = sqlQuery(\"SELECT username, facility, facility_id FROM users WHERE id = ?\", array(\"$provider_id\"));\n                $username = $facilityRow['username'];\n                $facility = $facilityRow['facility'];\n                $facility_id = $facilityRow['facility_id'];\n                // Get the primary Business Entity facility to set as billing facility, if null take user's facility as billing facility\n                $billingFacility = $this->facilityService->getPrimaryBusinessEntity();\n                $billingFacilityID = ( $billingFacility['id'] ) ? $billingFacility['id'] : $facility_id;\n\n                $conn = $GLOBALS['adodb']['db'];\n                $encounter = $conn->GenID(\"sequences\");\n                $query = \"INSERT INTO form_encounter SET\n\t\t\t\t\t\tdate = ?,\n\t\t\t\t\t\treason = ?,\n\t\t\t\t\t\tfacility = ?,\n\t\t\t\t\t\tsensitivity = 'normal',\n\t\t\t\t\t\tpc_catid = ?,\n\t\t\t\t\t\tfacility_id = ?,\n\t\t\t\t\t\tbilling_facility = ?,\n\t\t\t\t\t\tprovider_id = ?,\n\t\t\t\t\t\tpid = ?,\n\t\t\t\t\t\tencounter = ?\";\n                $bindArray = array($event_date,$file_name,$facility,$_POST['visit_category_id'],(int)$facility_id,(int)$billingFacilityID,(int)$provider_id,$patient_id,$encounter);\n                $formID = sqlInsert($query, $bindArray);\n                addForm($encounter, \"New Patient Encounter\", $formID, \"newpatient\", $patient_id, \"1\", date(\"Y-m-d H:i:s\"), $username);\n                $d->set_encounter_id($encounter);\n                $this->image_result_indication($d->id, $encounter);\n            } else {\n                $d->set_encounter_id($encounter_id);\n                $this->image_result_indication($d->id, $encounter_id);\n            }\n            $d->set_encounter_check($encounter_check);\n            $d->persist();\n\n            $messages .= xlt('Document tagged to Encounter successfully') . \"<br />\";\n        }\n\n        $this->_state = false;\n        $this->assign(\"messages\", $messages);\n\n        return $this->view_action($patient_id, $document_id);\n    }\n\n    public function image_procedure_action(string $patient_id = null, $document_id)\n    {\n\n        $img_procedure_id = $_POST['image_procedure_id'];\n        $proc_code = $_POST['procedure_code'];\n\n        if (is_numeric($document_id)) {\n            $img_order  = sqlQuery(\"select * from procedure_order_code where procedure_order_id = ? and procedure_code = ? \", array($img_procedure_id,$proc_code));\n            $img_report = sqlQuery(\"select * from procedure_report where procedure_order_id = ? and procedure_order_seq = ? \", array($img_procedure_id,$img_order['procedure_order_seq']));\n            $img_report_id = !empty($img_report['procedure_report_id']) ? $img_report['procedure_report_id'] : 0;\n            if ($img_report_id == 0) {\n                $report_date = date('Y-m-d H:i:s');\n                $img_report_id = sqlInsert(\"INSERT INTO procedure_report(procedure_order_id,procedure_order_seq,date_collected,date_report,report_status) values(?,?,?,?,'final')\", array($img_procedure_id,$img_order['procedure_order_seq'],$img_order['date_collected'],$report_date));\n            }\n\n            $img_result = sqlQuery(\"select * from procedure_result where procedure_report_id = ? and document_id = ?\", array($img_report_id,$document_id));\n            if (empty($img_result)) {\n                sqlStatement(\"INSERT INTO procedure_result(procedure_report_id,date,document_id,result_status) values(?,?,?,'final')\", array($img_report_id,date('Y-m-d H:i:s'),$document_id));\n            }\n\n            $this->image_result_indication($document_id, 0, $img_procedure_id);\n        }\n        return $this->view_action($patient_id, $document_id);\n    }\n\n    public function clear_procedure_tag_action(string $patient_id = null, $document_id)\n    {\n        if (is_numeric($document_id)) {\n            sqlStatement(\"delete from procedure_result where document_id = ?\", $document_id);\n        }\n        return $this->view_action($patient_id, $document_id);\n    }\n\n    public function get_mapped_procedure($document_id)\n    {\n        $map = array();\n        if (is_numeric($document_id)) {\n            $map = sqlQuery(\"select poc.procedure_order_id,poc.procedure_code from procedure_result pres\n\t\t\t\t\t\t   inner join procedure_report pr on pr.procedure_report_id = pres.procedure_report_id\n\t\t\t\t\t\t   inner join procedure_order_code poc on (poc.procedure_order_id = pr.procedure_order_id and poc.procedure_order_seq = pr.procedure_order_seq)\n\t\t\t\t\t\t   inner join procedure_order po on po.procedure_order_id = poc.procedure_order_id\n\t\t\t\t\t\t   where pres.document_id = ?\", array($document_id));\n        }\n        return $map;\n    }\n\n    public function image_result_indication($doc_id, $encounter, $image_procedure_id = 0)\n    {\n        $doc_notes = sqlQuery(\"select note from notes where foreign_id = ?\", array($doc_id));\n        $narration = isset($doc_notes['note']) ? 'With Narration' : 'Without Narration';\n\n        // TODO: This should be moved into a service so we can handle things such as uuid generation....\n        if ($encounter != 0) {\n            $ep = sqlQuery(\"select u.username as assigned_to from form_encounter inner join users u on u.id = provider_id where encounter = ?\", array($encounter));\n        } elseif ($image_procedure_id != 0) {\n            $ep = sqlQuery(\"select u.username as assigned_to from procedure_order inner join users u on u.id = provider_id where procedure_order_id = ?\", array($image_procedure_id));\n        } else {\n            $ep = array('assigned_to' => $_SESSION['authUser']);\n        }\n\n        $encounter_provider = isset($ep['assigned_to']) ? $ep['assigned_to'] : $_SESSION['authUser'];\n        $noteid = addPnote($_SESSION['pid'], 'New Image Report received ' . $narration, 0, 1, 'Image Results', $encounter_provider, '', 'New', '');\n        setGpRelation(1, $doc_id, 6, $noteid);\n    }\n\n//clear encounter tag public function\n    public function clear_encounter_tag_action(string $patient_id = null, $document_id)\n    {\n        if (is_numeric($document_id)) {\n            sqlStatement(\"update documents set encounter_id='0' where foreign_id=? and id = ?\", array($patient_id,$document_id));\n        }\n        return $this->view_action($patient_id, $document_id);\n    }\n}\n"], "filenames": ["controllers/C_Document.class.php"], "buggy_code_start_loc": [277], "buggy_code_end_loc": [303], "fixing_code_start_loc": [276], "fixing_code_end_loc": [311], "type": "CWE-434", "message": "Unrestricted Upload of File with Dangerous Type in GitHub repository openemr/openemr prior to 7.0.0.2.", "other": {"cve": {"id": "CVE-2022-4506", "sourceIdentifier": "security@huntr.dev", "published": "2022-12-15T01:15:11.227", "lastModified": "2022-12-16T15:09:39.797", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Unrestricted Upload of File with Dangerous Type in GitHub repository openemr/openemr prior to 7.0.0.2."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open-emr:openemr:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.0.0.2", "matchCriteriaId": "C397DED6-5350-43A0-B65D-FB92E8587CED"}]}]}], "references": [{"url": "https://github.com/openemr/openemr/commit/2e7678d812df167ea3c0756382408b670e8aa51f", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/f423d193-4ab0-4f03-ad90-25e4f02e7942", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openemr/openemr/commit/2e7678d812df167ea3c0756382408b670e8aa51f"}}