{"buggy_code": ["/*\n * The copyright in this software is being made available under the 2-clauses\n * BSD License, included below. This software may be subject to other third\n * party and contributor rights, including patent rights, and no such rights\n * are granted under this license.\n *\n * Copyright (c) 2002-2014, Universite catholique de Louvain (UCL), Belgium\n * Copyright (c) 2002-2014, Professor Benoit Macq\n * Copyright (c) 2003-2007, Francois-Olivier Devaux\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS `AS IS'\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"openjpeg.h\"\n#include \"cio.h\"\n#include \"j2k.h\"\n#include \"jp2.h\"\n#include \"mj2.h\"\n\n/* -------------------------------------------------------------------------- */\n\n/**\nsample error callback expecting a FILE* client object\n*/\nvoid error_callback(const char *msg, void *client_data)\n{\n    FILE *stream = (FILE*)client_data;\n    fprintf(stream, \"[ERROR] %s\", msg);\n}\n/**\nsample warning callback expecting a FILE* client object\n*/\nvoid warning_callback(const char *msg, void *client_data)\n{\n    FILE *stream = (FILE*)client_data;\n    fprintf(stream, \"[WARNING] %s\", msg);\n}\n/**\nsample debug callback expecting a FILE* client object\n*/\nvoid info_callback(const char *msg, void *client_data)\n{\n    FILE *stream = (FILE*)client_data;\n    fprintf(stream, \"[INFO] %s\", msg);\n}\n\n/* -------------------------------------------------------------------------- */\n\n\nint main(int argc, char *argv[])\n{\n    opj_dinfo_t* dinfo;\n    opj_event_mgr_t event_mgr;      /* event manager */\n    int tnum;\n    unsigned int snum;\n    opj_mj2_t *movie;\n    mj2_tk_t *track;\n    mj2_sample_t *sample;\n    unsigned char* frame_codestream;\n    FILE *file, *outfile;\n    char outfilename[50];\n    mj2_dparameters_t parameters;\n\n    if (argc != 3) {\n        printf(\"Usage: %s mj2filename output_location\\n\", argv[0]);\n        printf(\"Example: %s foreman.mj2 output/foreman\\n\", argv[0]);\n        return 1;\n    }\n\n    file = fopen(argv[1], \"rb\");\n\n    if (!file) {\n        fprintf(stderr, \"failed to open %s for reading\\n\", argv[1]);\n        return 1;\n    }\n\n    /*\n    configure the event callbacks (not required)\n    setting of each callback is optional\n    */\n    memset(&event_mgr, 0, sizeof(opj_event_mgr_t));\n    event_mgr.error_handler = error_callback;\n    event_mgr.warning_handler = warning_callback;\n    event_mgr.info_handler = info_callback;\n\n    /* get a MJ2 decompressor handle */\n    dinfo = mj2_create_decompress();\n\n    /* catch events using our callbacks and give a local context */\n    opj_set_event_mgr((opj_common_ptr)dinfo, &event_mgr, stderr);\n\n    /* setup the decoder decoding parameters using user parameters */\n    memset(&parameters, 0, sizeof(mj2_dparameters_t));\n    movie = (opj_mj2_t*) dinfo->mj2_handle;\n    mj2_setup_decoder(movie, &parameters);\n\n    if (mj2_read_struct(file, movie)) { /* Creating the movie structure*/\n        return 1;\n    }\n\n    /* Decode first video track */\n    tnum = 0;\n    while (movie->tk[tnum].track_type != 0) {\n        tnum ++;\n    }\n\n    track = &movie->tk[tnum];\n\n    fprintf(stdout, \"Extracting %d frames from file...\\n\", track->num_samples);\n\n    for (snum = 0; snum < track->num_samples; snum++) {\n        sample = &track->sample[snum];\n        frame_codestream = (unsigned char*) malloc(sample->sample_size -\n                           8); /* Skipping JP2C marker*/\n        fseek(file, sample->offset + 8, SEEK_SET);\n        fread(frame_codestream, sample->sample_size - 8, 1,\n              file); /* Assuming that jp and ftyp markers size do*/\n\n        sprintf(outfilename, \"%s_%05d.j2k\", argv[2], snum);\n        outfile = fopen(outfilename, \"wb\");\n        if (!outfile) {\n            fprintf(stderr, \"failed to open %s for writing\\n\", outfilename);\n            return 1;\n        }\n        fwrite(frame_codestream, sample->sample_size - 8, 1, outfile);\n        fclose(outfile);\n        free(frame_codestream);\n    }\n    fclose(file);\n    fprintf(stdout, \"%d frames correctly extracted\\n\", snum);\n\n    /* free remaining structures */\n    if (dinfo) {\n        mj2_destroy_decompress((opj_mj2_t*)dinfo->mj2_handle);\n    }\n\n    return 0;\n}\n"], "fixing_code": ["/*\n * The copyright in this software is being made available under the 2-clauses\n * BSD License, included below. This software may be subject to other third\n * party and contributor rights, including patent rights, and no such rights\n * are granted under this license.\n *\n * Copyright (c) 2002-2014, Universite catholique de Louvain (UCL), Belgium\n * Copyright (c) 2002-2014, Professor Benoit Macq\n * Copyright (c) 2003-2007, Francois-Olivier Devaux\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS `AS IS'\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"openjpeg.h\"\n#include \"cio.h\"\n#include \"j2k.h\"\n#include \"jp2.h\"\n#include \"mj2.h\"\n\n/* -------------------------------------------------------------------------- */\n\n/**\nsample error callback expecting a FILE* client object\n*/\nvoid error_callback(const char *msg, void *client_data)\n{\n    FILE *stream = (FILE*)client_data;\n    fprintf(stream, \"[ERROR] %s\", msg);\n}\n/**\nsample warning callback expecting a FILE* client object\n*/\nvoid warning_callback(const char *msg, void *client_data)\n{\n    FILE *stream = (FILE*)client_data;\n    fprintf(stream, \"[WARNING] %s\", msg);\n}\n/**\nsample debug callback expecting a FILE* client object\n*/\nvoid info_callback(const char *msg, void *client_data)\n{\n    FILE *stream = (FILE*)client_data;\n    fprintf(stream, \"[INFO] %s\", msg);\n}\n\n/* -------------------------------------------------------------------------- */\n\n\nint main(int argc, char *argv[])\n{\n    opj_dinfo_t* dinfo;\n    opj_event_mgr_t event_mgr;      /* event manager */\n    int tnum;\n    unsigned int snum;\n    opj_mj2_t *movie;\n    mj2_tk_t *track;\n    mj2_sample_t *sample;\n    unsigned char* frame_codestream;\n    FILE *file, *outfile;\n    char outfilename[50];\n    mj2_dparameters_t parameters;\n\n    if (argc != 3) {\n        printf(\"Usage: %s mj2filename output_location\\n\", argv[0]);\n        printf(\"Example: %s foreman.mj2 output/foreman\\n\", argv[0]);\n        return 1;\n    }\n\n    file = fopen(argv[1], \"rb\");\n\n    if (!file) {\n        fprintf(stderr, \"failed to open %s for reading\\n\", argv[1]);\n        return 1;\n    }\n\n    /*\n    configure the event callbacks (not required)\n    setting of each callback is optional\n    */\n    memset(&event_mgr, 0, sizeof(opj_event_mgr_t));\n    event_mgr.error_handler = error_callback;\n    event_mgr.warning_handler = warning_callback;\n    event_mgr.info_handler = info_callback;\n\n    /* get a MJ2 decompressor handle */\n    dinfo = mj2_create_decompress();\n\n    /* catch events using our callbacks and give a local context */\n    opj_set_event_mgr((opj_common_ptr)dinfo, &event_mgr, stderr);\n\n    /* setup the decoder decoding parameters using user parameters */\n    memset(&parameters, 0, sizeof(mj2_dparameters_t));\n    movie = (opj_mj2_t*) dinfo->mj2_handle;\n    mj2_setup_decoder(movie, &parameters);\n\n    if (mj2_read_struct(file, movie)) { /* Creating the movie structure*/\n        return 1;\n    }\n\n    /* Decode first video track */\n    tnum = 0;\n    while (movie->tk[tnum].track_type != 0) {\n        tnum ++;\n    }\n\n    track = &movie->tk[tnum];\n\n    fprintf(stdout, \"Extracting %d frames from file...\\n\", track->num_samples);\n\n    for (snum = 0; snum < track->num_samples; snum++) {\n        sample = &track->sample[snum];\n        frame_codestream = (unsigned char*) malloc(sample->sample_size -\n                           8); /* Skipping JP2C marker*/\n        fseek(file, sample->offset + 8, SEEK_SET);\n        fread(frame_codestream, sample->sample_size - 8, 1,\n              file); /* Assuming that jp and ftyp markers size do*/\n\n        {\n            int num = snprintf(outfilename, sizeof(outfilename),\n                               \"%s_%05d.j2k\", argv[2],\n                               snum);\n            if (num >= sizeof(outfilename)) {\n                fprintf(stderr, \"maximum length of output prefix exceeded\\n\");\n                free(frame_codestream);\n                return 1;\n            }\n        }\n\n        outfile = fopen(outfilename, \"wb\");\n        if (!outfile) {\n            fprintf(stderr, \"failed to open %s for writing\\n\", outfilename);\n            free(frame_codestream);\n            return 1;\n        }\n        fwrite(frame_codestream, sample->sample_size - 8, 1, outfile);\n        fclose(outfile);\n        free(frame_codestream);\n    }\n    fclose(file);\n    fprintf(stdout, \"%d frames correctly extracted\\n\", snum);\n\n    /* free remaining structures */\n    if (dinfo) {\n        mj2_destroy_decompress((opj_mj2_t*)dinfo->mj2_handle);\n    }\n\n    return 0;\n}\n"], "filenames": ["src/bin/mj2/opj_mj2_extract.c"], "buggy_code_start_loc": [143], "buggy_code_end_loc": [146], "fixing_code_start_loc": [143], "fixing_code_end_loc": [158], "type": "CWE-119", "message": "An issue was discovered in mj2/opj_mj2_extract.c in OpenJPEG 2.3.0. The output prefix was not checked for length, which could overflow a buffer, when providing a prefix with 50 or more characters on the command line.", "other": {"cve": {"id": "CVE-2018-7648", "sourceIdentifier": "cve@mitre.org", "published": "2018-03-02T16:29:00.213", "lastModified": "2021-01-26T12:50:41.693", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in mj2/opj_mj2_extract.c in OpenJPEG 2.3.0. The output prefix was not checked for length, which could overflow a buffer, when providing a prefix with 50 or more characters on the command line."}, {"lang": "es", "value": "Se ha descubierto un problema en mj2/opj_mj2_extract.c en OpenJPEG 2.3.0. No se comprob\u00f3 la longitud del prefijo de salida, que podr\u00eda desbordar un b\u00fafer al proporcionar un prefijo con 50 o m\u00e1s caracteres en la l\u00ednea de comandos."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-119"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:uclouvain:openjpeg:2.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "459BFDFA-A27B-4C47-A966-9E99E022BD04"}]}]}], "references": [{"url": "https://github.com/uclouvain/openjpeg/commit/cc3824767bde397fedb8a1ae4786a222ba860c8d", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/uclouvain/openjpeg/issues/1088", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/uclouvain/openjpeg/commit/cc3824767bde397fedb8a1ae4786a222ba860c8d"}}