{"buggy_code": ["<?php\n/*\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the\n * Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.  Please see LICENSE.txt at the top level of\n * the source code distribution for details.\n *\n * @package    LibreNMS\n * @subpackage webui\n * @link       https://www.librenms.org\n * @copyright  2017 LibreNMS\n * @author     LibreNMS Contributors\n*/\n\nuse App\\Models\\Port;\nuse Illuminate\\Database\\Eloquent\\ModelNotFoundException;\n\n$pagetitle[] = 'Ports';\n\n// Set Defaults here\n\nif (! isset($vars['format'])) {\n    $vars['format'] = 'list_basic';\n}\n\n$displayLists = '<span style=\"font-weight: bold;\">Ports lists</span> &#187; ';\n\n$menu_options = ['basic' => 'Basic', 'detail' => 'Detail'];\n\n$sep = '';\nforeach ($menu_options as $option => $text) {\n    $displayLists .= $sep;\n    if ($vars['format'] == 'list_' . $option) {\n        $displayLists .= '<span class=\"pagemenu-selected\">';\n    }\n    $displayLists .= '<a href=\"' . \\LibreNMS\\Util\\Url::generate($vars, ['format' => 'list_' . $option]) . '\">' . $text . '</a>';\n    if ($vars['format'] == 'list_' . $option) {\n        $displayLists .= '</span>';\n    }\n    $sep = ' | ';\n}\n$displayLists .= '&nbsp;&nbsp;<span style=\"font-weight: bold;\">Graphs</span> &#187;&nbsp;';\n\n$menu_options = ['bits' => 'Bits',\n    'upkts' => 'Unicast Packets',\n    'nupkts' => 'Non-Unicast Packets',\n    'errors' => 'Errors', ];\n\n$sep = '';\nforeach ($menu_options as $option => $text) {\n    $displayLists .= $sep;\n    if ($vars['format'] == 'graph_' . $option) {\n        $displayLists .= '<span class=\"pagemenu-selected\">';\n    }\n    $displayLists .= '<a href=\"' . \\LibreNMS\\Util\\Url::generate($vars, ['format' => 'graph_' . $option]) . '\">' . $text . '</a>';\n    if ($vars['format'] == 'graph_' . $option) {\n        $displayLists .= '</span>';\n    }\n    $sep = ' | ';\n}\n\n$displayLists .= '<div style=\"float: right;\">';\n$displayLists .= '<a href=\"' . \\LibreNMS\\Util\\Url::generate($vars, ['format' => '', 'page' => 'csv.php', 'report' => 'ports']) . '\" title=\"Export as CSV\" target=\"_blank\" rel=\"noopener\">Export CSV</a> | <a href=\"' . \\LibreNMS\\Util\\Url::generate($vars) . '\" title=\"Update the browser URL to reflect the search criteria.\">Update URL</a> | ';\n\nif (isset($vars['searchbar']) && $vars['searchbar'] == 'hide') {\n    $displayLists .= '<a href=\"' . \\LibreNMS\\Util\\Url::generate($vars, ['searchbar' => '']) . '\">Search</a>';\n} else {\n    $displayLists .= '<a href=\"' . \\LibreNMS\\Util\\Url::generate($vars, ['searchbar' => 'hide']) . '\">Search</a>';\n}\n\n$displayLists .= ' | ';\n\nif (isset($vars['bare']) && $vars['bare'] == 'yes') {\n    $displayLists .= '<a href=\"' . \\LibreNMS\\Util\\Url::generate($vars, ['bare' => '']) . '\">Header</a>';\n} else {\n    $displayLists .= '<a href=\"' . \\LibreNMS\\Util\\Url::generate($vars, ['bare' => 'yes']) . '\">Header</a>';\n}\n\n$displayLists .= ' | ';\n$displayLists .= '<span style=\"font-weight: bold;\">Bulk actions</span> &#187';\n\n$displayLists .= '<a href=\"ports/deleted=1/purge=all\" title=\"Delete ports\"> Purge all deleted</a>';\n\n$displayLists .= '</div>';\n\nif ((isset($vars['searchbar']) && $vars['searchbar'] != 'hide') || ! isset($vars['searchbar'])) {\n    $output = \"<form method='post' action='' class='form-inline' role='form'>\";\n    $output .= addslashes(csrf_field());\n    $output .= \"<div style='margin-bottom:4px;text-align:left;'>\";\n    $output .= \"<div class='form-group'>\";\n    $output .= \"<select name='device_id' id='device_id' class='form-control input-sm'></select>&nbsp;\";\n\n    $hasvalue = ! empty($vars['hostname']) ? \"value='\" . $vars['hostname'] . \"'\" : '';\n\n    $output .= \"<input type='text' name='hostname' id='hostname' title='Hostname' class='form-control input-sm' \" . $hasvalue . \" placeholder='Hostname'>\";\n\n    $output .= '</div>&nbsp;';\n\n    switch ($vars['state'] ?? '') {\n        case 'up':\n            $isup = 'selected';\n            $isdown = '';\n            $admindown = '';\n            break;\n        case 'down':\n            $isup = '';\n            $isdown = 'selected';\n            $admindown = '';\n            break;\n        case 'admindown':\n            $isup = '';\n            $isdown = '';\n            $admindown = 'selected';\n            break;\n        default:\n            $isup = '';\n            $isdown = '';\n            $admindown = '';\n    }\n\n    $output .= \"<div class='form-group'>\";\n    $output .= \"<select name='state' id='state' class='form-control input-sm'>\";\n    $output .= \"<option value=''>All States</option>\";\n    $output .= \"<option value='up' \" . $isup . '>Up</option>';\n    $output .= \"<option value='down' \" . $isdown . '>Down</option>';\n    $output .= \"<option value='admindown' \" . $admindown . '>Shutdown</option>';\n    $output .= '</select>&nbsp;';\n\n    $output .= \"<select name='ifSpeed' id='ifSpeed' class='form-control input-sm'>\";\n    $output .= \"<option value=''>All Speeds</option>\";\n\n    $ifSpeed = Port::select('ifSpeed')\n        ->hasAccess(Auth::user())\n        ->groupBy('ifSpeed')\n        ->orderBy('ifSpeed')\n        ->get();\n\n    foreach ($ifSpeed as $data) {\n        if ($data['ifSpeed']) {\n            $speedselected = isset($vars['ifSpeed']) && $data['ifSpeed'] == $vars['ifSpeed'] ? 'selected' : '';\n            $output .= \"<option value='\" . $data['ifSpeed'] . \"'\" . $speedselected . '>' . \\LibreNMS\\Util\\Number::formatSi($data['ifSpeed'], 2, 3, 'bps') . '</option>';\n        }\n    }\n\n    $output .= '</select>&nbsp;';\n    $output .= '</div>';\n    $output .= \"<div class='form-group'>\";\n    $output .= \"<select name='ifType' id='ifType' class='form-control input-sm'>\";\n    $output .= \"<option value=''>All Media</option>\";\n\n    $ifType = Port::select('ifType')\n        ->hasAccess(Auth::user())\n        ->groupBy('ifType')\n        ->orderBy('ifType')\n        ->get();\n\n    foreach ($ifType as $data) {\n        if ($data['ifType']) {\n            $dataselected = isset($vars['ifType']) && $data['ifType'] == $vars['ifType'] ? 'selected' : '';\n            $output .= \"<option value='\" . clean_bootgrid($data['ifType']) . \"' \" . $dataselected . '>' . clean_bootgrid($data['ifType']) . '</option>';\n        }\n    }\n\n    $output .= '</select>&nbsp;';\n    $output .= \"<select name='port_descr_type' id='port_descr_type' class='form-control input-sm'>\";\n    $output .= \"<option value=''>All Port Types</option>\";\n\n    if (Auth::user()->hasGlobalRead()) {\n        $sql = 'SELECT `port_descr_type` FROM `ports` GROUP BY `port_descr_type` ORDER BY `port_descr_type`';\n    } else {\n        $sql = 'SELECT `port_descr_type` FROM `ports` AS `I`, `devices` AS `D`, `devices_perms` AS `P`, `ports_perms` AS `PP` WHERE ((`P`.`user_id` = ? AND `P`.`device_id` = `D`.`device_id`) OR (`PP`.`user_id` = ? AND `PP`.`port_id` = `I`.`port_id` AND `I`.`device_id` = `D`.`device_id`)) AND `D`.`device_id` = `I`.`device_id` GROUP BY `port_descr_type` ORDER BY `port_descr_type`';\n        $param[] = [Auth::id(), Auth::id()];\n    }\n    $port_descr_type = Port::select('port_descr_type')\n        ->hasAccess(Auth::user())\n        ->groupBy('port_descr_type')\n        ->orderBy('port_descr_type')\n        ->get();\n\n    foreach ($port_descr_type as $data) {\n        if ($data['port_descr_type']) {\n            if (isset($vars['port_descr_type']) && $data['port_descr_type'] == $vars['port_descr_type']) {\n                $portdescrib = 'selected';\n            } else {\n                $portdescrib = '';\n            }\n            $output .= \"<option value='\" . clean_bootgrid($data['port_descr_type']) . \"' \" . $portdescrib . '>' . ucfirst(clean_bootgrid($data['port_descr_type'])) . '</option>';\n        }\n    }\n\n    $output .= '</select>&nbsp;';\n    $output .= '</div>';\n    $output .= \"<div class='form-group'>\";\n\n    $ifaliasvalue = isset($vars['ifAlias']) ? \"value='\" . $vars['ifAlias'] . \"'\" : '';\n\n    $output .= '</div>';\n\n    $output .= '</div>';\n    $output .= \"<div style='text-align:left;'>\";\n\n    $output .= \"<input title='Port Description' type='text' name='ifAlias' id='ifAlias' class='form-control input-sm' \" . $ifaliasvalue . \" placeholder='Port Description'>&nbsp;\";\n    $output .= \"<select title='Location' name='location' id='location' class='form-control input-sm'></select>&nbsp;\";\n\n    $ignorecheck = isset($vars['ignore']) ? 'checked' : '';\n    $disabledcheck = isset($vars['disabled']) ? 'checked' : '';\n    $deletedcheck = isset($vars['deleted']) ? 'checked' : '';\n\n    $output .= \"<label for='ignore'>Ignored</label>&nbsp;\";\n    $output .= \"<input type='checkbox' id='ignore' name='ignore' value='1' \" . $ignorecheck . '>&nbsp;';\n    $output .= \"<label for='disabled'>Disabled</label>&nbsp;\";\n    $output .= \"<input type='checkbox' id='disabled' name='disabled' value='1' \" . $disabledcheck . '>&nbsp;';\n    $output .= \"<label for='deleted'>Deleted</label>&nbsp;\";\n    $output .= \"<input type='checkbox' id='deleted' name='deleted' value='1' \" . $deletedcheck . '>&nbsp;';\n\n    $output .= \"<button type='submit' class='btn btn-default btn-sm'>Search</button>&nbsp;\";\n    $output .= \"<a class='btn btn-default btn-sm' href='\" . \\LibreNMS\\Util\\Url::generate(['page' => 'ports', 'section' => $vars['section'] ?? '', 'bare' => $vars['bare'] ?? '']) . \"' title='Reset critera to default.'>Reset</a>\";\n\n    $output .= '</div>';\n\n    $output .= '</form>';\n}\n\nif (! isset($vars['ignore'])) {\n    $vars['ignore'] = '0';\n}\nif (! isset($vars['disabled'])) {\n    $vars['disabled'] = '0';\n}\nif (! isset($vars['deleted'])) {\n    $vars['deleted'] = '0';\n}\n\nif (isset($vars['purge'])) {\n    if ($vars['purge'] === 'all') {\n        Port::hasAccess(Auth::user())->with(['device' => function ($query) {\n            $query->select('device_id', 'hostname');\n        }])->isDeleted()->chunkById(100, function ($ports) {\n            foreach ($ports as $port) {\n                $port->delete();\n            }\n        });\n    } else {\n        try {\n            Port::hasAccess(Auth::user())->where('port_id', $vars['purge'])->firstOrFail()->delete();\n        } catch (ModelNotFoundException $e) {\n            echo \"<div class='alert alert-danger'>Port ID {$vars['purge']} not found! Could not purge port.</div>\";\n        }\n    }\n}\n\n[$format, $subformat] = explode('_', basename($vars['format']));\n\nif (file_exists('includes/html/pages/ports/' . $format . '.inc.php')) {\n    require 'includes/html/pages/ports/' . $format . '.inc.php';\n}\n"], "fixing_code": ["<?php\n/*\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the\n * Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.  Please see LICENSE.txt at the top level of\n * the source code distribution for details.\n *\n * @package    LibreNMS\n * @subpackage webui\n * @link       https://www.librenms.org\n * @copyright  2017 LibreNMS\n * @author     LibreNMS Contributors\n*/\n\nuse App\\Models\\Port;\nuse Illuminate\\Database\\Eloquent\\ModelNotFoundException;\n\n$pagetitle[] = 'Ports';\n\n// Set Defaults here\n\nif (! isset($vars['format'])) {\n    $vars['format'] = 'list_basic';\n}\n\n$displayLists = '<span style=\"font-weight: bold;\">Ports lists</span> &#187; ';\n\n$menu_options = ['basic' => 'Basic', 'detail' => 'Detail'];\n\n$sep = '';\nforeach ($menu_options as $option => $text) {\n    $displayLists .= $sep;\n    if ($vars['format'] == 'list_' . $option) {\n        $displayLists .= '<span class=\"pagemenu-selected\">';\n    }\n    $displayLists .= '<a href=\"' . \\LibreNMS\\Util\\Url::generate($vars, ['format' => 'list_' . $option]) . '\">' . $text . '</a>';\n    if ($vars['format'] == 'list_' . $option) {\n        $displayLists .= '</span>';\n    }\n    $sep = ' | ';\n}\n$displayLists .= '&nbsp;&nbsp;<span style=\"font-weight: bold;\">Graphs</span> &#187;&nbsp;';\n\n$menu_options = ['bits' => 'Bits',\n    'upkts' => 'Unicast Packets',\n    'nupkts' => 'Non-Unicast Packets',\n    'errors' => 'Errors', ];\n\n$sep = '';\nforeach ($menu_options as $option => $text) {\n    $displayLists .= $sep;\n    if ($vars['format'] == 'graph_' . $option) {\n        $displayLists .= '<span class=\"pagemenu-selected\">';\n    }\n    $displayLists .= '<a href=\"' . \\LibreNMS\\Util\\Url::generate($vars, ['format' => 'graph_' . $option]) . '\">' . $text . '</a>';\n    if ($vars['format'] == 'graph_' . $option) {\n        $displayLists .= '</span>';\n    }\n    $sep = ' | ';\n}\n\n$displayLists .= '<div style=\"float: right;\">';\n$displayLists .= '<a href=\"' . \\LibreNMS\\Util\\Url::generate($vars, ['format' => '', 'page' => 'csv.php', 'report' => 'ports']) . '\" title=\"Export as CSV\" target=\"_blank\" rel=\"noopener\">Export CSV</a> | <a href=\"' . \\LibreNMS\\Util\\Url::generate($vars) . '\" title=\"Update the browser URL to reflect the search criteria.\">Update URL</a> | ';\n\nif (isset($vars['searchbar']) && $vars['searchbar'] == 'hide') {\n    $displayLists .= '<a href=\"' . \\LibreNMS\\Util\\Url::generate($vars, ['searchbar' => '']) . '\">Search</a>';\n} else {\n    $displayLists .= '<a href=\"' . \\LibreNMS\\Util\\Url::generate($vars, ['searchbar' => 'hide']) . '\">Search</a>';\n}\n\n$displayLists .= ' | ';\n\nif (isset($vars['bare']) && $vars['bare'] == 'yes') {\n    $displayLists .= '<a href=\"' . \\LibreNMS\\Util\\Url::generate($vars, ['bare' => '']) . '\">Header</a>';\n} else {\n    $displayLists .= '<a href=\"' . \\LibreNMS\\Util\\Url::generate($vars, ['bare' => 'yes']) . '\">Header</a>';\n}\n\n$displayLists .= ' | ';\n$displayLists .= '<span style=\"font-weight: bold;\">Bulk actions</span> &#187';\n\n$displayLists .= '<a href=\"ports/deleted=1/purge=all\" title=\"Delete ports\"> Purge all deleted</a>';\n\n$displayLists .= '</div>';\n\nif ((isset($vars['searchbar']) && $vars['searchbar'] != 'hide') || ! isset($vars['searchbar'])) {\n    $output = \"<form method='post' action='' class='form-inline' role='form'>\";\n    $output .= addslashes(csrf_field());\n    $output .= \"<div style='margin-bottom:4px;text-align:left;'>\";\n    $output .= \"<div class='form-group'>\";\n    $output .= \"<select name='device_id' id='device_id' class='form-control input-sm'></select>&nbsp;\";\n\n    $hasvalue = ! empty($vars['hostname']) ? \"value='\" . htmlspecialchars($vars['hostname']) . \"'\" : '';\n\n    $output .= \"<input type='text' name='hostname' id='hostname' title='Hostname' class='form-control input-sm' \" . $hasvalue . \" placeholder='Hostname'>\";\n\n    $output .= '</div>&nbsp;';\n\n    switch ($vars['state'] ?? '') {\n        case 'up':\n            $isup = 'selected';\n            $isdown = '';\n            $admindown = '';\n            break;\n        case 'down':\n            $isup = '';\n            $isdown = 'selected';\n            $admindown = '';\n            break;\n        case 'admindown':\n            $isup = '';\n            $isdown = '';\n            $admindown = 'selected';\n            break;\n        default:\n            $isup = '';\n            $isdown = '';\n            $admindown = '';\n    }\n\n    $output .= \"<div class='form-group'>\";\n    $output .= \"<select name='state' id='state' class='form-control input-sm'>\";\n    $output .= \"<option value=''>All States</option>\";\n    $output .= \"<option value='up' \" . $isup . '>Up</option>';\n    $output .= \"<option value='down' \" . $isdown . '>Down</option>';\n    $output .= \"<option value='admindown' \" . $admindown . '>Shutdown</option>';\n    $output .= '</select>&nbsp;';\n\n    $output .= \"<select name='ifSpeed' id='ifSpeed' class='form-control input-sm'>\";\n    $output .= \"<option value=''>All Speeds</option>\";\n\n    $ifSpeed = Port::select('ifSpeed')\n        ->hasAccess(Auth::user())\n        ->groupBy('ifSpeed')\n        ->orderBy('ifSpeed')\n        ->get();\n\n    foreach ($ifSpeed as $data) {\n        if ($data['ifSpeed']) {\n            $speedselected = isset($vars['ifSpeed']) && $data['ifSpeed'] == $vars['ifSpeed'] ? 'selected' : '';\n            $output .= \"<option value='\" . $data['ifSpeed'] . \"'\" . $speedselected . '>' . \\LibreNMS\\Util\\Number::formatSi($data['ifSpeed'], 2, 3, 'bps') . '</option>';\n        }\n    }\n\n    $output .= '</select>&nbsp;';\n    $output .= '</div>';\n    $output .= \"<div class='form-group'>\";\n    $output .= \"<select name='ifType' id='ifType' class='form-control input-sm'>\";\n    $output .= \"<option value=''>All Media</option>\";\n\n    $ifType = Port::select('ifType')\n        ->hasAccess(Auth::user())\n        ->groupBy('ifType')\n        ->orderBy('ifType')\n        ->get();\n\n    foreach ($ifType as $data) {\n        if ($data['ifType']) {\n            $dataselected = isset($vars['ifType']) && $data['ifType'] == $vars['ifType'] ? 'selected' : '';\n            $output .= \"<option value='\" . clean_bootgrid($data['ifType']) . \"' \" . $dataselected . '>' . clean_bootgrid($data['ifType']) . '</option>';\n        }\n    }\n\n    $output .= '</select>&nbsp;';\n    $output .= \"<select name='port_descr_type' id='port_descr_type' class='form-control input-sm'>\";\n    $output .= \"<option value=''>All Port Types</option>\";\n\n    if (Auth::user()->hasGlobalRead()) {\n        $sql = 'SELECT `port_descr_type` FROM `ports` GROUP BY `port_descr_type` ORDER BY `port_descr_type`';\n    } else {\n        $sql = 'SELECT `port_descr_type` FROM `ports` AS `I`, `devices` AS `D`, `devices_perms` AS `P`, `ports_perms` AS `PP` WHERE ((`P`.`user_id` = ? AND `P`.`device_id` = `D`.`device_id`) OR (`PP`.`user_id` = ? AND `PP`.`port_id` = `I`.`port_id` AND `I`.`device_id` = `D`.`device_id`)) AND `D`.`device_id` = `I`.`device_id` GROUP BY `port_descr_type` ORDER BY `port_descr_type`';\n        $param[] = [Auth::id(), Auth::id()];\n    }\n    $port_descr_type = Port::select('port_descr_type')\n        ->hasAccess(Auth::user())\n        ->groupBy('port_descr_type')\n        ->orderBy('port_descr_type')\n        ->get();\n\n    foreach ($port_descr_type as $data) {\n        if ($data['port_descr_type']) {\n            if (isset($vars['port_descr_type']) && $data['port_descr_type'] == $vars['port_descr_type']) {\n                $portdescrib = 'selected';\n            } else {\n                $portdescrib = '';\n            }\n            $output .= \"<option value='\" . clean_bootgrid($data['port_descr_type']) . \"' \" . $portdescrib . '>' . ucfirst(clean_bootgrid($data['port_descr_type'])) . '</option>';\n        }\n    }\n\n    $output .= '</select>&nbsp;';\n    $output .= '</div>';\n    $output .= \"<div class='form-group'>\";\n\n    $ifaliasvalue = isset($vars['ifAlias']) ? \"value='\" . htmlspecialchars($vars['ifAlias']) . \"'\" : '';\n\n    $output .= '</div>';\n\n    $output .= '</div>';\n    $output .= \"<div style='text-align:left;'>\";\n\n    $output .= \"<input title='Port Description' type='text' name='ifAlias' id='ifAlias' class='form-control input-sm' \" . $ifaliasvalue . \" placeholder='Port Description'>&nbsp;\";\n    $output .= \"<select title='Location' name='location' id='location' class='form-control input-sm'></select>&nbsp;\";\n\n    $ignorecheck = isset($vars['ignore']) ? 'checked' : '';\n    $disabledcheck = isset($vars['disabled']) ? 'checked' : '';\n    $deletedcheck = isset($vars['deleted']) ? 'checked' : '';\n\n    $output .= \"<label for='ignore'>Ignored</label>&nbsp;\";\n    $output .= \"<input type='checkbox' id='ignore' name='ignore' value='1' \" . $ignorecheck . '>&nbsp;';\n    $output .= \"<label for='disabled'>Disabled</label>&nbsp;\";\n    $output .= \"<input type='checkbox' id='disabled' name='disabled' value='1' \" . $disabledcheck . '>&nbsp;';\n    $output .= \"<label for='deleted'>Deleted</label>&nbsp;\";\n    $output .= \"<input type='checkbox' id='deleted' name='deleted' value='1' \" . $deletedcheck . '>&nbsp;';\n\n    $output .= \"<button type='submit' class='btn btn-default btn-sm'>Search</button>&nbsp;\";\n    $output .= \"<a class='btn btn-default btn-sm' href='\" . \\LibreNMS\\Util\\Url::generate(['page' => 'ports', 'section' => $vars['section'] ?? '', 'bare' => $vars['bare'] ?? '']) . \"' title='Reset critera to default.'>Reset</a>\";\n\n    $output .= '</div>';\n\n    $output .= '</form>';\n}\n\nif (! isset($vars['ignore'])) {\n    $vars['ignore'] = '0';\n}\nif (! isset($vars['disabled'])) {\n    $vars['disabled'] = '0';\n}\nif (! isset($vars['deleted'])) {\n    $vars['deleted'] = '0';\n}\n\nif (isset($vars['purge'])) {\n    if ($vars['purge'] === 'all') {\n        Port::hasAccess(Auth::user())->with(['device' => function ($query) {\n            $query->select('device_id', 'hostname');\n        }])->isDeleted()->chunkById(100, function ($ports) {\n            foreach ($ports as $port) {\n                $port->delete();\n            }\n        });\n    } else {\n        try {\n            Port::hasAccess(Auth::user())->where('port_id', $vars['purge'])->firstOrFail()->delete();\n        } catch (ModelNotFoundException $e) {\n            echo \"<div class='alert alert-danger'>Port ID \" . htmlspecialchars($vars['purge']) . ' not found! Could not purge port.</div>';\n        }\n    }\n}\n\n[$format, $subformat] = explode('_', basename($vars['format']));\n\nif (file_exists('includes/html/pages/ports/' . $format . '.inc.php')) {\n    require 'includes/html/pages/ports/' . $format . '.inc.php';\n}\n"], "filenames": ["includes/html/pages/ports.inc.php"], "buggy_code_start_loc": [94], "buggy_code_end_loc": [249], "fixing_code_start_loc": [94], "fixing_code_end_loc": [249], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Generic in GitHub repository librenms/librenms prior to 23.9.0.", "other": {"cve": {"id": "CVE-2023-4980", "sourceIdentifier": "security@huntr.dev", "published": "2023-09-15T01:15:08.623", "lastModified": "2023-09-20T13:12:54.970", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Generic in GitHub repository librenms/librenms prior to 23.9.0."}, {"lang": "es", "value": " Cross-site Scripting (XSS): gen\u00e9rico en librenms/librenms del repositorio de GitHub anteriores a 23.9.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:librenms:librenms:*:*:*:*:*:*:*:*", "versionEndExcluding": "23.9.0", "matchCriteriaId": "D11631AD-0BBB-4877-B426-D0D036598849"}]}]}], "references": [{"url": "https://github.com/librenms/librenms/commit/cfd642be6a1e988453bd63069d17db3664e7de97", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/470b9b13-b7fe-4b3f-a186-fdc5dc193976", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/librenms/librenms/commit/cfd642be6a1e988453bd63069d17db3664e7de97"}}