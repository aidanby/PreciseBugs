{"buggy_code": ["@push('css')\n<link rel=\"stylesheet\" href=\"{{ url(mix('css/dist/bootstrap-table.css')) }}\">\n\n@endpush\n\n@push('js')\n<script src=\"{{ url(mix('js/dist/bootstrap-table.js')) }}\"></script>\n<script nonce=\"{{ csrf_token() }}\">\n\n    $(function () {\n\n\n        var stickyHeaderOffsetY = 0;\n\n        if ( $('.navbar-fixed-top').css('height') ) {\n            stickyHeaderOffsetY = +$('.navbar-fixed-top').css('height').replace('px','');\n        }\n        if ( $('.navbar-fixed-top').css('margin-bottom') ) {\n            stickyHeaderOffsetY += +$('.navbar-fixed-top').css('margin-bottom').replace('px','');\n        }\n\n        var blockedFields = \"searchable,sortable,switchable,title,visible,formatter,class\".split(\",\");\n\n        var keyBlocked = function(key) {\n            for(var j in blockedFields) {\n                if (key === blockedFields[j]) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        $('.snipe-table').bootstrapTable('destroy').bootstrapTable({\n            classes: 'table table-responsive table-no-bordered',\n            ajaxOptions: {\n                headers: {\n                    'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n                }\n            },\n            stickyHeader: true,\n            stickyHeaderOffsetY: stickyHeaderOffsetY + 'px',\n            undefinedText: '',\n            iconsPrefix: 'fa',\n            cookie: true,\n            cookieExpire: '2y',\n            mobileResponsive: true,\n            maintainSelected: true,\n            trimOnSearch: false,\n            showSearchClearButton: true,\n            paginationFirstText: \"{{ trans('general.first') }}\",\n            paginationLastText: \"{{ trans('general.last') }}\",\n            paginationPreText: \"{{ trans('general.previous') }}\",\n            paginationNextText: \"{{ trans('general.next') }}\",\n            pageList: ['10','20', '30','50','100','150','200', '500', '1000'],\n            pageSize: {{  (($snipeSettings->per_page!='') && ($snipeSettings->per_page > 0)) ? $snipeSettings->per_page : 20 }},\n            paginationVAlign: 'both',\n            queryParams: function (params) {\n                var newParams = {};\n                for(var i in params) {\n                    if(!keyBlocked(i)) { // only send the field if it's not in blockedFields\n                        newParams[i] = params[i];\n                    }\n                }\n                return newParams;\n            },\n            formatLoadingMessage: function () {\n                return '<h2><i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i> Loading... please wait.... </h4>';\n            },\n            icons: {\n                advancedSearchIcon: 'fa fa-search-plus',\n                paginationSwitchDown: 'fa-caret-square-o-down',\n                paginationSwitchUp: 'fa-caret-square-o-up',\n                columns: 'fa-columns',\n                refresh: 'fa-refresh',\n                export: 'fa-download',\n                clearSearch: 'fa-times'\n            },\n            exportTypes: ['csv', 'excel', 'doc', 'txt','json', 'xml', 'pdf'],\n            onLoadSuccess: function () {\n                $('[data-toggle=\"tooltip\"]').tooltip(); // Needed to attach tooltips after ajax call\n            }\n\n        });   \n\n    });\n\n\n\n\n\n    function dateRowCheckStyle(value) {\n        if ((value.days_to_next_audit) && (value.days_to_next_audit < {{ $snipeSettings->audit_warning_days ?: 0 }})) {\n            return { classes : \"danger\" }\n        }\n        return {};\n    }\n\n\n    // These methods dynamically add/remove hidden input values in the bulk actions form\n    $('.snipe-table').on('check.bs.table .btSelectItem', function (row, $element) {\n        $('#bulkEdit').removeAttr('disabled');\n        $('#bulkEdit').prepend('<input id=\"checkbox_' + $element.id + '\" type=\"hidden\" name=\"ids[]\" value=\"' + $element.id + '\">');\n    });\n\n    $('.snipe-table').on('uncheck.bs.table .btSelectItem', function (row, $element) {\n        $( \"#checkbox_\" + $element.id).remove();\n    });\n    \n\n    // Handle whether or not the edit button should be disabled\n    $('.snipe-table').on('uncheck.bs.table', function () {\n        if ($('.snipe-table').bootstrapTable('getSelections').length == 0) {\n            $('#bulkEdit').attr('disabled', 'disabled');\n        }\n    });\n\n    $('.snipe-table').on('uncheck-all.bs.table', function (event, rowsAfter, rowsBefore) {\n        $('#bulkEdit').attr('disabled', 'disabled');\n        //console.dir(rowsBefore);\n\n        for (var i in rowsBefore) {\n            $( \"#checkbox_\" + rowsBefore[i].id).remove();\n        }\n\n    });\n\n    $('.snipe-table').on('check-all.bs.table', function (event, rowsAfter, rowsBefore) {\n        \n        $('#bulkEdit').removeAttr('disabled');\n        //console.dir(rowsAfter);\n        \n        for (var i in rowsAfter) {\n            // console.log(rowsAfter[i].id);\n            $('#bulkEdit').prepend('<input id=\"checkbox_' + rowsAfter[i].id + '\" type=\"hidden\" name=\"ids[]\" value=\"' + rowsAfter[i].id + '\">');\n        }\n    });\n\n    \n\n    // This only works for model index pages because it uses the row's model ID\n    function genericRowLinkFormatter(destination) {\n        return function (value,row) {\n            if (value) {\n                return '<a href=\"{{ url('/') }}/' + destination + '/' + row.id + '\"> ' + value + '</a>';\n            }\n        };\n    }\n\n    // Use this when we're introspecting into a column object and need to link\n    function genericColumnObjLinkFormatter(destination) {\n        return function (value,row) {\n            if ((value) && (value.status_meta)) {\n\n                var text_color;\n                var icon_style;\n                var text_help;\n                var status_meta = {\n                  'deployed': '{{ strtolower(trans('general.deployed')) }}',\n                  'deployable': '{{ strtolower(trans('admin/hardware/general.deployable')) }}',\n                  'pending': '{{ strtolower(trans('general.pending')) }}'\n                }\n\n                switch (value.status_meta) {\n                    case 'deployed':\n                        text_color = 'blue';\n                        icon_style = 'fa-circle';\n                        text_help = '<label class=\"label label-default\">{{ trans('general.deployed') }}</label>';\n                    break;\n                    case 'deployable':\n                        text_color = 'green';\n                        icon_style = 'fa-circle';\n                        text_help = '';\n                    break;\n                    case 'pending':\n                        text_color = 'orange';\n                        icon_style = 'fa-circle';\n                        text_help = '';\n                        break;\n                    default:\n                        text_color = 'red';\n                        icon_style = 'fa-times';\n                        text_help = '';\n                }\n\n                return '<nobr><a href=\"{{ url('/') }}/' + destination + '/' + value.id + '\" data-toggle=\"tooltip\" title=\"'+ status_meta[value.status_meta] + '\"> <i class=\"fa ' + icon_style + ' text-' + text_color + '\"></i> ' + value.name + ' ' + text_help + ' </a> </nobr>';\n            } else if ((value) && (value.name)) {\n\n                // Add some overrides for any funny urls we have\n                var dest = destination;\n                var dpolymorphicItemFormatterest = '';\n                if (destination=='fieldsets') {\n                    var dpolymorphicItemFormatterest = 'fields/';\n                }\n\n                return '<nobr><a href=\"{{ url('/') }}/' + dpolymorphicItemFormatterest + dest + '/' + value.id + '\"> ' + value.name + '</a></span>';\n            }\n        };\n    }\n\n    function hardwareAuditFormatter(value, row) {\n        return '<a href=\"{{ url('/') }}/hardware/audit/' + row.id + '/\" class=\"btn btn-sm bg-yellow\" data-tooltip=\"true\" title=\"Audit this item\">{{ trans('general.audit') }}</a>';\n    }\n\n\n    // Make the edit/delete buttons\n    function genericActionsFormatter(owner_name, element_name) {\n        if (!element_name) {\n            element_name = '';\n        }\n\n        return function (value,row) {\n\n            var actions = '<nobr>';\n\n            // Add some overrides for any funny urls we have\n            var dest = owner_name;\n\n            if (dest =='groups') {\n                var dest = 'admin/groups';\n            }\n\n            if (dest =='maintenances') {\n                var dest = 'hardware/maintenances';\n            }\n\n            if(element_name != '') {\n                dest = dest + '/' + row.owner_id + '/' + element_name;\n            }\n\n            if ((row.available_actions) && (row.available_actions.clone === true)) {\n                actions += '<a href=\"{{ url('/') }}/' + dest + '/' + row.id + '/clone\" class=\"btn btn-sm btn-info\" data-tooltip=\"true\" title=\"Clone Item\"><i class=\"fa fa-copy\" aria-hidden=\"true\"></i><span class=\"sr-only\">Clone</span></a>&nbsp;';\n            }\n\n            if ((row.available_actions) && (row.available_actions.update === true)) {\n                actions += '<a href=\"{{ url('/') }}/' + dest + '/' + row.id + '/edit\" class=\"btn btn-sm btn-warning\" data-tooltip=\"true\" title=\"{{ trans('general.update') }}\"><i class=\"fa fa-pencil\" aria-hidden=\"true\"></i><span class=\"sr-only\">{{ trans('general.update') }}</span></a>&nbsp;';\n            }\n\n            if ((row.available_actions) && (row.available_actions.delete === true)) {\n                actions += '<a href=\"{{ url('/') }}/' + dest + '/' + row.id + '\" '\n                    + ' class=\"btn btn-danger btn-sm delete-asset\"  data-toggle=\"tooltip\"  '\n                    + ' data-toggle=\"modal\" '\n                    + ' data-content=\"{{ trans('general.sure_to_delete') }} ' + row.name + '?\" '\n                    + ' data-title=\"{{  trans('general.delete') }}\" onClick=\"return false;\">'\n                    + '<i class=\"fa fa-trash\" aria-hidden=\"true\"></i><span class=\"sr-only\">{{ trans('general.delete') }}</span></a>&nbsp;';\n            } else {\n                actions += '<a class=\"btn btn-danger btn-sm delete-asset disabled\" onClick=\"return false;\"><i class=\"fa fa-trash\"></i></a>&nbsp;';\n            }\n            \n\n            if ((row.available_actions) && (row.available_actions.restore === true)) {\n                actions += '<form style=\"display: inline;\" method=\"POST\" action=\"{{ url('/') }}/' + dest + '/' + row.id + '/restore\"> ';\n                actions += '@csrf';\n                actions += '<button class=\"btn btn-sm btn-warning\" data-toggle=\"tooltip\" title=\"{{ trans('general.restore') }}\">';\n                actions += '<i class=\"fa fa-retweet\" aria-hidden=\"true\"></i><span class=\"sr-only\">{{ trans('general.restore') }}</span></button></form>&nbsp;';\n            }\n\n            actions +='</nobr>';\n            return actions;\n\n        };\n    }\n\n\n    // This handles the icons and display of polymorphic entries\n    function polymorphicItemFormatter(value) {\n\n        var item_destination = '';\n        var item_icon;\n\n        if ((value) && (value.type)) {\n\n            if (value.type == 'asset') {\n                item_destination = 'hardware';\n                item_icon = 'fa-barcode';\n            } else if (value.type == 'accessory') {\n                item_destination = 'accessories';\n                item_icon = 'fa-keyboard-o';\n            } else if (value.type == 'component') {\n                item_destination = 'components';\n                item_icon = 'fa-hdd-o';\n            } else if (value.type == 'consumable') {\n                item_destination = 'consumables';\n                item_icon = 'fa-tint';\n            } else if (value.type == 'license') {\n                item_destination = 'licenses';\n                item_icon = 'fa-floppy-o';\n            } else if (value.type == 'user') {\n                item_destination = 'users';\n                item_icon = 'fa-user';\n            } else if (value.type == 'location') {\n                item_destination = 'locations'\n                item_icon = 'fa-map-marker';\n            }\n\n            return '<nobr><a href=\"{{ url('/') }}/' + item_destination +'/' + value.id + '\" data-tooltip=\"true\" title=\"' + value.type + '\"><i class=\"fa ' + item_icon + ' text-{{ $snipeSettings->skin!='' ? $snipeSettings->skin : 'blue' }} \"></i> ' + value.name + '</a></nobr>';\n\n        } else {\n            return '';\n        }\n\n\n    }\n\n    // This just prints out the item type in the activity report\n    function itemTypeFormatter(value, row) {\n\n        if ((row) && (row.item) && (row.item.type)) {\n            return row.item.type;\n        }\n    }\n\n\n    // Convert line breaks to <br>\n    function notesFormatter(value) {\n        if (value) {\n            return value.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');;\n        }\n    }\n\n\n    // We need a special formatter for license seats, since they don't work exactly the same\n    // Checkouts need the license ID, checkins need the specific seat ID\n\n    function licenseSeatInOutFormatter(value, row) {\n        // The user is allowed to check the license seat out and it's available\n        if ((row.available_actions.checkout == true) && (row.user_can_checkout == true) && ((!row.asset_id) && (!row.assigned_to))) {\n            return '<a href=\"{{ url('/') }}/licenses/' + row.license_id + '/checkout/'+row.id+'\" class=\"btn btn-sm bg-maroon\" data-toggle=\"tooltip\" title=\"Check this item out\">{{ trans('general.checkout') }}</a>';\n        } else {\n            return '<a href=\"{{ url('/') }}/licenses/' + row.id + '/checkin\" class=\"btn btn-sm bg-purple\" data-toggle=\"tooltip\" title=\"Check in this license seat.\">{{ trans('general.checkin') }}</a>';\n        }\n\n    }\n\n    function genericCheckinCheckoutFormatter(destination) {\n        return function (value,row) {\n\n            // The user is allowed to check items out, AND the item is deployable\n            if ((row.available_actions.checkout == true) && (row.user_can_checkout == true) && ((!row.asset_id) && (!row.assigned_to))) {\n                    return '<a href=\"{{ url('/') }}/' + destination + '/' + row.id + '/checkout\" class=\"btn btn-sm bg-maroon\" data-toggle=\"tooltip\" title=\"Check this item out\">{{ trans('general.checkout') }}</a>';\n\n            // The user is allowed to check items out, but the item is not deployable\n            } else if (((row.user_can_checkout == false)) && (row.available_actions.checkout == true) && (!row.assigned_to)) {\n                return '<div  data-toggle=\"tooltip\" title=\"This item has a status label that is undeployable and cannot be checked out at this time.\"><a class=\"btn btn-sm bg-maroon disabled\">{{ trans('general.checkout') }}</a></div>';\n\n            // The user is allowed to check items in\n            } else if (row.available_actions.checkin == true)  {\n                if (row.assigned_to) {\n                    return '<a href=\"{{ url('/') }}/' + destination + '/' + row.id + '/checkin\" class=\"btn btn-sm bg-purple\" data-toggle=\"tooltip\" title=\"Check this item in so it is available for re-imaging, re-issue, etc.\">{{ trans('general.checkin') }}</a>';\n                } else if (row.assigned_pivot_id) {\n                    return '<a href=\"{{ url('/') }}/' + destination + '/' + row.assigned_pivot_id + '/checkin\" class=\"btn btn-sm bg-purple\" data-toggle=\"tooltip\" title=\"Check this item in so it is available for re-imaging, re-issue, etc.\">{{ trans('general.checkin') }}</a>';\n                }\n\n            }\n\n        }\n\n\n    }\n\n\n    // This is only used by the requestable assets section\n    function assetRequestActionsFormatter (row, value) {\n        if (value.available_actions.cancel == true)  {\n            return '<form action=\"{{ url('/') }}/account/request-asset/'+ value.id + '\" method=\"GET\"><button class=\"btn btn-danger btn-sm\" data-toggle=\"tooltip\" title=\"Cancel this item request\">{{ trans('button.cancel') }}</button></form>';\n        } else if (value.available_actions.request == true)  {\n            return '<form action=\"{{ url('/') }}/account/request-asset/'+ value.id + '\" method=\"GET\"><button class=\"btn btn-primary btn-sm\" data-toggle=\"tooltip\" title=\"Request this item\">{{ trans('button.request') }}</button></form>';\n        }\n\n    }\n\n\n\n    var formatters = [\n        'hardware',\n        'accessories',\n        'consumables',\n        'components',\n        'locations',\n        'users',\n        'manufacturers',\n        'maintenances',\n        'statuslabels',\n        'models',\n        'licenses',\n        'categories',\n        'suppliers',\n        'departments',\n        'companies',\n        'depreciations',\n        'fieldsets',\n        'groups',\n        'kits'\n    ];\n\n    for (var i in formatters) {\n        window[formatters[i] + 'LinkFormatter'] = genericRowLinkFormatter(formatters[i]);\n        window[formatters[i] + 'LinkObjFormatter'] = genericColumnObjLinkFormatter(formatters[i]);\n        window[formatters[i] + 'ActionsFormatter'] = genericActionsFormatter(formatters[i]);\n        window[formatters[i] + 'InOutFormatter'] = genericCheckinCheckoutFormatter(formatters[i]);\n    }\n\n    var child_formatters = [\n        ['kits', 'models'],\n        ['kits', 'licenses'],\n        ['kits', 'consumables'],\n        ['kits', 'accessories'],\n    ];\n\n    for (var i in child_formatters) {\n        var owner_name = child_formatters[i][0];\n        var child_name = child_formatters[i][1];\n        window[owner_name + '_' + child_name + 'ActionsFormatter'] = genericActionsFormatter(owner_name, child_name);\n    }\n\n\n\n    // This is  gross, but necessary so that we can package the API response\n    // for custom fields in a more useful way.\n    function customFieldsFormatter(value, row) {\n\n\n            if ((!this) || (!this.title)) {\n                return '';\n            }\n\n            var field_column = this.title;\n\n            // Pull out any HTMl that might be passed via the presenter\n            // (for example, the locked icon for encrypted fields)\n            var field_column_plain = field_column.replace(/<(?:.|\\n)*?> ?/gm, '');\n            if ((row.custom_fields) && (row.custom_fields[field_column_plain])) {\n\n                // If the field type needs special formatting, do that here\n                if ((row.custom_fields[field_column_plain].field_format) && (row.custom_fields[field_column_plain].value)) {\n                    if (row.custom_fields[field_column_plain].field_format=='URL') {\n                        return '<a href=\"' + row.custom_fields[field_column_plain].value + '\" target=\"_blank\" rel=\"noopener\">' + row.custom_fields[field_column_plain].value + '</a>';\n                    } else if (row.custom_fields[field_column_plain].field_format=='EMAIL') {\n                        return '<a href=\"mailto:' + row.custom_fields[field_column_plain].value + '\">' + row.custom_fields[field_column_plain].value + '</a>';\n                    }\n                }\n                return row.custom_fields[field_column_plain].value;\n\n            }\n\n    }\n\n\n    function createdAtFormatter(value) {\n        if ((value) && (value.formatted)) {\n            return value.formatted;\n        }\n    }\n\n    function externalLinkFormatter(value) {\n        if (value) {\n            return '<a href=\"' + value + '\" target=\"_blank\">' + value + '</a>';\n        }\n    }\n\n    function groupsFormatter(value) {\n\n        if (value) {\n            var groups = '';\n            for (var index in value.rows) {\n                groups += '<a href=\"{{ url('/') }}/admin/groups/' + value.rows[index].id + '\" class=\"label label-default\"> ' + value.rows[index].name + '</a> ';\n            }\n            return groups;\n        }\n    }\n\n\n\n    function changeLogFormatter(value) {\n        var result = '';\n            for (var index in value) {\n                result += index + ': <del>' + value[index].old + '</del>  <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ' + value[index].new + '<br>'\n            }\n\n        return result;\n\n    }\n\n\n    // Create a linked phone number in the table list\n    function phoneFormatter(value) {\n        if (value) {\n            return  '<a href=\"tel:' + value + '\">' + value + '</a>';\n        }\n    }\n\n\n    function deployedLocationFormatter(row, value) {\n        if ((row) && (row!=undefined)) {\n            return '<a href=\"{{ url('/') }}/locations/' + row.id + '\"> ' + row.name + '</a>';\n        } else if (value.rtd_location) {\n            return '<a href=\"{{ url('/') }}/locations/' + value.rtd_location.id + '\" data-toggle=\"tooltip\" title=\"Default Location\"> ' + value.rtd_location.name + '</a>';\n        }\n\n    }\n\n    function groupsAdminLinkFormatter(value, row) {\n        return '<a href=\"{{ url('/') }}/admin/groups/' + row.id + '\"> ' + value + '</a>';\n    }\n\n    function assetTagLinkFormatter(value, row) {\n        if ((row.asset) && (row.asset.id)) {\n            return '<a href=\"{{ url('/') }}/hardware/' + row.asset.id + '\"> ' + row.asset.asset_tag + '</a>';\n        }\n        return '';\n\n    }\n\n    function departmentNameLinkFormatter(value, row) {\n        if ((row.assigned_user) && (row.assigned_user.department) && (row.assigned_user.department.name)) {\n            return '<a href=\"{{ url('/') }}/department/' + row.assigned_user.department.id + '\"> ' + row.assigned_user.department.name + '</a>';\n        }\n\n    }\n\n    function assetNameLinkFormatter(value, row) {\n        if ((row.asset) && (row.asset.name)) {\n            return '<a href=\"{{ url('/') }}/hardware/' + row.asset.id + '\"> ' + row.asset.name + '</a>';\n        }\n\n    }\n\n    function trueFalseFormatter(value) {\n        if ((value) && ((value == 'true') || (value == '1'))) {\n            return '<i class=\"fa fa-check text-success\"></i>';\n        } else {\n            return '<i class=\"fa fa-times text-danger\"></i>';\n        }\n    }\n\n    function dateDisplayFormatter(value) {\n        if (value) {\n            return  value.formatted;\n        }\n    }\n\n    function iconFormatter(value) {\n        if (value) {\n            return '<i class=\"' + value + '  icon-med\"></i>';\n        }\n    }\n\n    function emailFormatter(value) {\n        if (value) {\n            return '<a href=\"mailto:' + value + '\"> ' + value + '</a>';\n        }\n    }\n\n    function linkFormatter(value) {\n        if (value) {\n            return '<a href=\"' + value + '\"> ' + value + '</a>';\n        }\n    }\n\n    function assetCompanyFilterFormatter(value, row) {\n        if (value) {\n            return '<a href=\"{{ url('/') }}/hardware/?company_id=' + row.id + '\"> ' + value + '</a>';\n        }\n    }\n\n    function assetCompanyObjFilterFormatter(value, row) {\n        if ((row) && (row.company)) {\n            return '<a href=\"{{ url('/') }}/hardware/?company_id=' + row.company.id + '\"> ' + row.company.name + '</a>';\n        }\n    }\n\n    function usersCompanyObjFilterFormatter(value, row) {\n        if (value) {\n            return '<a href=\"{{ url('/') }}/users/?company_id=' + row.id + '\"> ' + value + '</a>';\n        } else {\n            return value;\n        }\n    }\n\n    function employeeNumFormatter(value, row) {\n\n        if ((row) && (row.assigned_to) && ((row.assigned_to.employee_number))) {\n            return '<a href=\"{{ url('/') }}/users/' + row.assigned_to.id + '\"> ' + row.assigned_to.employee_number + '</a>';\n        }\n    }\n\n    function orderNumberObjFilterFormatter(value, row) {\n        if (value) {\n            return '<a href=\"{{ url('/') }}/hardware/?order_number=' + row.order_number + '\"> ' + row.order_number + '</a>';\n        }\n    }\n\n\n   function imageFormatter(value, row) {\n\n\n\n        if (value) {\n\n            if (row.name) {\n                var altName = row.name;\n            }\n                else if ((row) && (row.model)) {\n                var altName = row.model.name;\n           }\n            return '<a href=\"' + value + '\" data-toggle=\"lightbox\" data-type=\"image\"><img src=\"' + value + '\" style=\"max-height: {{ $snipeSettings->thumbnail_max_h }}px; width: auto;\" class=\"img-responsive\" alt=\"' + altName + '\"></a>';\n        }\n    }\n\n    function fileUploadFormatter(value) {\n        if ((value) && (value.url) && (value.inlineable)) {\n            return '<a href=\"' + value.url + '\" data-toggle=\"lightbox\" data-type=\"image\"><img src=\"' + value.url + '\" style=\"max-height: {{ $snipeSettings->thumbnail_max_h }}px; width: auto;\" class=\"img-responsive\"></a>';\n        } else if ((value) && (value.url)) {\n            return '<a href=\"' + value.url + '\" class=\"btn btn-default\"><i class=\"fa fa-download\"></i></a>';\n        }\n    }\n\n\n    function fileUploadNameFormatter(value) {\n        console.dir(value);\n        if ((value) && (value.filename) && (value.url)) {\n            return '<a href=\"' + value.url + '\">' + value.filename + '</a>';\n        }\n    }\n\n    function cleanFloat(number) {\n        if(!number) { // in a JavaScript context, meaning, if it's null or zero or unset\n            return 0.0;\n        }\n        if (\"{{$snipeSettings->digit_separator}}\" == \"1.234,56\") {\n            // yank periods, change commas to periods\n            periodless = number.toString().replace(/\\./g,\"\");\n            decimalfixed = periodless.replace(/,/g,\".\");\n        } else {\n            // yank commas, that's it.\n            decimalfixed = number.toString().replace(\",\",\"\");\n        }\n        return parseFloat(decimalfixed);\n    }\n\n    function sumFormatter(data) {\n        if (Array.isArray(data)) {\n            var field = this.field;\n            var total_sum = data.reduce(function(sum, row) {\n                return (sum) + (cleanFloat(row[field]) || 0);\n            }, 0);\n            return numberWithCommas(total_sum.toFixed(2));\n        }\n        return 'not an array';\n    }\n\n    function numberWithCommas(value) {\n        if ((value) && (\"{{$snipeSettings->digit_separator}}\" == \"1.234,56\")){\n            var parts = value.toString().split(\".\");\n             parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n             return parts.join(\",\");\n         } else {\n             var parts = value.toString().split(\",\");\n             parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n             return parts.join(\".\");\n        }\n        return value\n    }\n\n    $(function () {\n        $('#bulkEdit').click(function () {\n            var selectedIds = $('.snipe-table').bootstrapTable('getSelections');\n            $.each(selectedIds, function(key,value) {\n                $( \"#bulkForm\" ).append($('<input type=\"hidden\" name=\"ids[' + value.id + ']\" value=\"' + value.id + '\">' ));\n            });\n\n        });\n    });\n\n\n\n    $(function() {\n\n        // This handles the search box highlighting on both ajax and client-side\n        // bootstrap tables\n        var searchboxHighlighter = function (event) {\n\n            $('.search-input').each(function (index, element) {\n\n                if ($(element).val() != '') {\n                    $(element).addClass('search-highlight');\n                    $(element).next().children().addClass('search-highlight');\n                } else {\n                    $(element).removeClass('search-highlight');\n                    $(element).next().children().removeClass('search-highlight');\n                }\n            });\n        };\n\n        $('.search button[name=clearSearch]').click(searchboxHighlighter);\n        searchboxHighlighter({ name:'pageload'});\n        $('.search-input').keyup(searchboxHighlighter);\n\n        //  This is necessary to make the bootstrap tooltips work inside of the\n        // wenzhixin/bootstrap-table formatters\n        $('#table').on('post-body.bs.table', function () {\n            $('[data-toggle=\"tooltip\"]').tooltip({\n                container: 'body'\n            });\n\n\n        });\n    });\n\n</script>\n    \n@endpush\n"], "fixing_code": ["@push('css')\n<link rel=\"stylesheet\" href=\"{{ url(mix('css/dist/bootstrap-table.css')) }}\">\n\n@endpush\n\n@push('js')\n<script src=\"{{ url(mix('js/dist/bootstrap-table.js')) }}\"></script>\n<script nonce=\"{{ csrf_token() }}\">\n\n    $(function () {\n\n\n        var stickyHeaderOffsetY = 0;\n\n        if ( $('.navbar-fixed-top').css('height') ) {\n            stickyHeaderOffsetY = +$('.navbar-fixed-top').css('height').replace('px','');\n        }\n        if ( $('.navbar-fixed-top').css('margin-bottom') ) {\n            stickyHeaderOffsetY += +$('.navbar-fixed-top').css('margin-bottom').replace('px','');\n        }\n\n        var blockedFields = \"searchable,sortable,switchable,title,visible,formatter,class\".split(\",\");\n\n        var keyBlocked = function(key) {\n            for(var j in blockedFields) {\n                if (key === blockedFields[j]) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        $('.snipe-table').bootstrapTable('destroy').bootstrapTable({\n            classes: 'table table-responsive table-no-bordered',\n            ajaxOptions: {\n                headers: {\n                    'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n                }\n            },\n            stickyHeader: true,\n            stickyHeaderOffsetY: stickyHeaderOffsetY + 'px',\n            undefinedText: '',\n            iconsPrefix: 'fa',\n            cookie: true,\n            cookieExpire: '2y',\n            mobileResponsive: true,\n            maintainSelected: true,\n            trimOnSearch: false,\n            showSearchClearButton: true,\n            paginationFirstText: \"{{ trans('general.first') }}\",\n            paginationLastText: \"{{ trans('general.last') }}\",\n            paginationPreText: \"{{ trans('general.previous') }}\",\n            paginationNextText: \"{{ trans('general.next') }}\",\n            pageList: ['10','20', '30','50','100','150','200', '500', '1000'],\n            pageSize: {{  (($snipeSettings->per_page!='') && ($snipeSettings->per_page > 0)) ? $snipeSettings->per_page : 20 }},\n            paginationVAlign: 'both',\n            queryParams: function (params) {\n                var newParams = {};\n                for(var i in params) {\n                    if(!keyBlocked(i)) { // only send the field if it's not in blockedFields\n                        newParams[i] = params[i];\n                    }\n                }\n                return newParams;\n            },\n            formatLoadingMessage: function () {\n                return '<h2><i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i> Loading... please wait.... </h4>';\n            },\n            icons: {\n                advancedSearchIcon: 'fa fa-search-plus',\n                paginationSwitchDown: 'fa-caret-square-o-down',\n                paginationSwitchUp: 'fa-caret-square-o-up',\n                columns: 'fa-columns',\n                refresh: 'fa-refresh',\n                export: 'fa-download',\n                clearSearch: 'fa-times'\n            },\n            exportOptions: {\n                htmlContent: true,\n            },\n\n            exportTypes: ['csv', 'excel', 'doc', 'txt','json', 'xml', 'pdf'],\n            onLoadSuccess: function () {\n                $('[data-toggle=\"tooltip\"]').tooltip(); // Needed to attach tooltips after ajax call\n            }\n\n        });   \n\n    });\n\n\n\n\n\n    function dateRowCheckStyle(value) {\n        if ((value.days_to_next_audit) && (value.days_to_next_audit < {{ $snipeSettings->audit_warning_days ?: 0 }})) {\n            return { classes : \"danger\" }\n        }\n        return {};\n    }\n\n\n    // These methods dynamically add/remove hidden input values in the bulk actions form\n    $('.snipe-table').on('check.bs.table .btSelectItem', function (row, $element) {\n        $('#bulkEdit').removeAttr('disabled');\n        $('#bulkEdit').prepend('<input id=\"checkbox_' + $element.id + '\" type=\"hidden\" name=\"ids[]\" value=\"' + $element.id + '\">');\n    });\n\n    $('.snipe-table').on('uncheck.bs.table .btSelectItem', function (row, $element) {\n        $( \"#checkbox_\" + $element.id).remove();\n    });\n    \n\n    // Handle whether or not the edit button should be disabled\n    $('.snipe-table').on('uncheck.bs.table', function () {\n        if ($('.snipe-table').bootstrapTable('getSelections').length == 0) {\n            $('#bulkEdit').attr('disabled', 'disabled');\n        }\n    });\n\n    $('.snipe-table').on('uncheck-all.bs.table', function (event, rowsAfter, rowsBefore) {\n        $('#bulkEdit').attr('disabled', 'disabled');\n        //console.dir(rowsBefore);\n\n        for (var i in rowsBefore) {\n            $( \"#checkbox_\" + rowsBefore[i].id).remove();\n        }\n\n    });\n\n    $('.snipe-table').on('check-all.bs.table', function (event, rowsAfter, rowsBefore) {\n        \n        $('#bulkEdit').removeAttr('disabled');\n        //console.dir(rowsAfter);\n        \n        for (var i in rowsAfter) {\n            // console.log(rowsAfter[i].id);\n            $('#bulkEdit').prepend('<input id=\"checkbox_' + rowsAfter[i].id + '\" type=\"hidden\" name=\"ids[]\" value=\"' + rowsAfter[i].id + '\">');\n        }\n    });\n\n    \n\n    // This only works for model index pages because it uses the row's model ID\n    function genericRowLinkFormatter(destination) {\n        return function (value,row) {\n            if (value) {\n                return '<a href=\"{{ url('/') }}/' + destination + '/' + row.id + '\"> ' + value + '</a>';\n            }\n        };\n    }\n\n    // Use this when we're introspecting into a column object and need to link\n    function genericColumnObjLinkFormatter(destination) {\n        return function (value,row) {\n            if ((value) && (value.status_meta)) {\n\n                var text_color;\n                var icon_style;\n                var text_help;\n                var status_meta = {\n                  'deployed': '{{ strtolower(trans('general.deployed')) }}',\n                  'deployable': '{{ strtolower(trans('admin/hardware/general.deployable')) }}',\n                  'pending': '{{ strtolower(trans('general.pending')) }}'\n                }\n\n                switch (value.status_meta) {\n                    case 'deployed':\n                        text_color = 'blue';\n                        icon_style = 'fa-circle';\n                        text_help = '<label class=\"label label-default\">{{ trans('general.deployed') }}</label>';\n                    break;\n                    case 'deployable':\n                        text_color = 'green';\n                        icon_style = 'fa-circle';\n                        text_help = '';\n                    break;\n                    case 'pending':\n                        text_color = 'orange';\n                        icon_style = 'fa-circle';\n                        text_help = '';\n                        break;\n                    default:\n                        text_color = 'red';\n                        icon_style = 'fa-times';\n                        text_help = '';\n                }\n\n                return '<nobr><a href=\"{{ url('/') }}/' + destination + '/' + value.id + '\" data-toggle=\"tooltip\" title=\"'+ status_meta[value.status_meta] + '\"> <i class=\"fa ' + icon_style + ' text-' + text_color + '\"></i> ' + value.name + ' ' + text_help + ' </a> </nobr>';\n            } else if ((value) && (value.name)) {\n\n                // Add some overrides for any funny urls we have\n                var dest = destination;\n                var dpolymorphicItemFormatterest = '';\n                if (destination=='fieldsets') {\n                    var dpolymorphicItemFormatterest = 'fields/';\n                }\n\n                return '<nobr><a href=\"{{ url('/') }}/' + dpolymorphicItemFormatterest + dest + '/' + value.id + '\"> ' + value.name + '</a></span>';\n            }\n        };\n    }\n\n    function hardwareAuditFormatter(value, row) {\n        return '<a href=\"{{ url('/') }}/hardware/audit/' + row.id + '/\" class=\"btn btn-sm bg-yellow\" data-tooltip=\"true\" title=\"Audit this item\">{{ trans('general.audit') }}</a>';\n    }\n\n\n    // Make the edit/delete buttons\n    function genericActionsFormatter(owner_name, element_name) {\n        if (!element_name) {\n            element_name = '';\n        }\n\n        return function (value,row) {\n\n            var actions = '<nobr>';\n\n            // Add some overrides for any funny urls we have\n            var dest = owner_name;\n\n            if (dest =='groups') {\n                var dest = 'admin/groups';\n            }\n\n            if (dest =='maintenances') {\n                var dest = 'hardware/maintenances';\n            }\n\n            if(element_name != '') {\n                dest = dest + '/' + row.owner_id + '/' + element_name;\n            }\n\n            if ((row.available_actions) && (row.available_actions.clone === true)) {\n                actions += '<a href=\"{{ url('/') }}/' + dest + '/' + row.id + '/clone\" class=\"btn btn-sm btn-info\" data-tooltip=\"true\" title=\"Clone Item\"><i class=\"fa fa-copy\" aria-hidden=\"true\"></i><span class=\"sr-only\">Clone</span></a>&nbsp;';\n            }\n\n            if ((row.available_actions) && (row.available_actions.update === true)) {\n                actions += '<a href=\"{{ url('/') }}/' + dest + '/' + row.id + '/edit\" class=\"btn btn-sm btn-warning\" data-tooltip=\"true\" title=\"{{ trans('general.update') }}\"><i class=\"fa fa-pencil\" aria-hidden=\"true\"></i><span class=\"sr-only\">{{ trans('general.update') }}</span></a>&nbsp;';\n            }\n\n            if ((row.available_actions) && (row.available_actions.delete === true)) {\n                actions += '<a href=\"{{ url('/') }}/' + dest + '/' + row.id + '\" '\n                    + ' class=\"btn btn-danger btn-sm delete-asset\"  data-toggle=\"tooltip\"  '\n                    + ' data-toggle=\"modal\" '\n                    + ' data-content=\"{{ trans('general.sure_to_delete') }} ' + row.name + '?\" '\n                    + ' data-title=\"{{  trans('general.delete') }}\" onClick=\"return false;\">'\n                    + '<i class=\"fa fa-trash\" aria-hidden=\"true\"></i><span class=\"sr-only\">{{ trans('general.delete') }}</span></a>&nbsp;';\n            } else {\n                actions += '<a class=\"btn btn-danger btn-sm delete-asset disabled\" onClick=\"return false;\"><i class=\"fa fa-trash\"></i></a>&nbsp;';\n            }\n            \n\n            if ((row.available_actions) && (row.available_actions.restore === true)) {\n                actions += '<form style=\"display: inline;\" method=\"POST\" action=\"{{ url('/') }}/' + dest + '/' + row.id + '/restore\"> ';\n                actions += '@csrf';\n                actions += '<button class=\"btn btn-sm btn-warning\" data-toggle=\"tooltip\" title=\"{{ trans('general.restore') }}\">';\n                actions += '<i class=\"fa fa-retweet\" aria-hidden=\"true\"></i><span class=\"sr-only\">{{ trans('general.restore') }}</span></button></form>&nbsp;';\n            }\n\n            actions +='</nobr>';\n            return actions;\n\n        };\n    }\n\n\n    // This handles the icons and display of polymorphic entries\n    function polymorphicItemFormatter(value) {\n\n        var item_destination = '';\n        var item_icon;\n\n        if ((value) && (value.type)) {\n\n            if (value.type == 'asset') {\n                item_destination = 'hardware';\n                item_icon = 'fa-barcode';\n            } else if (value.type == 'accessory') {\n                item_destination = 'accessories';\n                item_icon = 'fa-keyboard-o';\n            } else if (value.type == 'component') {\n                item_destination = 'components';\n                item_icon = 'fa-hdd-o';\n            } else if (value.type == 'consumable') {\n                item_destination = 'consumables';\n                item_icon = 'fa-tint';\n            } else if (value.type == 'license') {\n                item_destination = 'licenses';\n                item_icon = 'fa-floppy-o';\n            } else if (value.type == 'user') {\n                item_destination = 'users';\n                item_icon = 'fa-user';\n            } else if (value.type == 'location') {\n                item_destination = 'locations'\n                item_icon = 'fa-map-marker';\n            }\n\n            return '<nobr><a href=\"{{ url('/') }}/' + item_destination +'/' + value.id + '\" data-tooltip=\"true\" title=\"' + value.type + '\"><i class=\"fa ' + item_icon + ' text-{{ $snipeSettings->skin!='' ? $snipeSettings->skin : 'blue' }} \"></i> ' + value.name + '</a></nobr>';\n\n        } else {\n            return '';\n        }\n\n\n    }\n\n    // This just prints out the item type in the activity report\n    function itemTypeFormatter(value, row) {\n\n        if ((row) && (row.item) && (row.item.type)) {\n            return row.item.type;\n        }\n    }\n\n\n    // Convert line breaks to <br>\n    function notesFormatter(value) {\n        if (value) {\n            return value.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');;\n        }\n    }\n\n\n    // We need a special formatter for license seats, since they don't work exactly the same\n    // Checkouts need the license ID, checkins need the specific seat ID\n\n    function licenseSeatInOutFormatter(value, row) {\n        // The user is allowed to check the license seat out and it's available\n        if ((row.available_actions.checkout == true) && (row.user_can_checkout == true) && ((!row.asset_id) && (!row.assigned_to))) {\n            return '<a href=\"{{ url('/') }}/licenses/' + row.license_id + '/checkout/'+row.id+'\" class=\"btn btn-sm bg-maroon\" data-toggle=\"tooltip\" title=\"Check this item out\">{{ trans('general.checkout') }}</a>';\n        } else {\n            return '<a href=\"{{ url('/') }}/licenses/' + row.id + '/checkin\" class=\"btn btn-sm bg-purple\" data-toggle=\"tooltip\" title=\"Check in this license seat.\">{{ trans('general.checkin') }}</a>';\n        }\n\n    }\n\n    function genericCheckinCheckoutFormatter(destination) {\n        return function (value,row) {\n\n            // The user is allowed to check items out, AND the item is deployable\n            if ((row.available_actions.checkout == true) && (row.user_can_checkout == true) && ((!row.asset_id) && (!row.assigned_to))) {\n                    return '<a href=\"{{ url('/') }}/' + destination + '/' + row.id + '/checkout\" class=\"btn btn-sm bg-maroon\" data-toggle=\"tooltip\" title=\"Check this item out\">{{ trans('general.checkout') }}</a>';\n\n            // The user is allowed to check items out, but the item is not deployable\n            } else if (((row.user_can_checkout == false)) && (row.available_actions.checkout == true) && (!row.assigned_to)) {\n                return '<div  data-toggle=\"tooltip\" title=\"This item has a status label that is undeployable and cannot be checked out at this time.\"><a class=\"btn btn-sm bg-maroon disabled\">{{ trans('general.checkout') }}</a></div>';\n\n            // The user is allowed to check items in\n            } else if (row.available_actions.checkin == true)  {\n                if (row.assigned_to) {\n                    return '<a href=\"{{ url('/') }}/' + destination + '/' + row.id + '/checkin\" class=\"btn btn-sm bg-purple\" data-toggle=\"tooltip\" title=\"Check this item in so it is available for re-imaging, re-issue, etc.\">{{ trans('general.checkin') }}</a>';\n                } else if (row.assigned_pivot_id) {\n                    return '<a href=\"{{ url('/') }}/' + destination + '/' + row.assigned_pivot_id + '/checkin\" class=\"btn btn-sm bg-purple\" data-toggle=\"tooltip\" title=\"Check this item in so it is available for re-imaging, re-issue, etc.\">{{ trans('general.checkin') }}</a>';\n                }\n\n            }\n\n        }\n\n\n    }\n\n\n    // This is only used by the requestable assets section\n    function assetRequestActionsFormatter (row, value) {\n        if (value.available_actions.cancel == true)  {\n            return '<form action=\"{{ url('/') }}/account/request-asset/'+ value.id + '\" method=\"GET\"><button class=\"btn btn-danger btn-sm\" data-toggle=\"tooltip\" title=\"Cancel this item request\">{{ trans('button.cancel') }}</button></form>';\n        } else if (value.available_actions.request == true)  {\n            return '<form action=\"{{ url('/') }}/account/request-asset/'+ value.id + '\" method=\"GET\"><button class=\"btn btn-primary btn-sm\" data-toggle=\"tooltip\" title=\"Request this item\">{{ trans('button.request') }}</button></form>';\n        }\n\n    }\n\n\n\n    var formatters = [\n        'hardware',\n        'accessories',\n        'consumables',\n        'components',\n        'locations',\n        'users',\n        'manufacturers',\n        'maintenances',\n        'statuslabels',\n        'models',\n        'licenses',\n        'categories',\n        'suppliers',\n        'departments',\n        'companies',\n        'depreciations',\n        'fieldsets',\n        'groups',\n        'kits'\n    ];\n\n    for (var i in formatters) {\n        window[formatters[i] + 'LinkFormatter'] = genericRowLinkFormatter(formatters[i]);\n        window[formatters[i] + 'LinkObjFormatter'] = genericColumnObjLinkFormatter(formatters[i]);\n        window[formatters[i] + 'ActionsFormatter'] = genericActionsFormatter(formatters[i]);\n        window[formatters[i] + 'InOutFormatter'] = genericCheckinCheckoutFormatter(formatters[i]);\n    }\n\n    var child_formatters = [\n        ['kits', 'models'],\n        ['kits', 'licenses'],\n        ['kits', 'consumables'],\n        ['kits', 'accessories'],\n    ];\n\n    for (var i in child_formatters) {\n        var owner_name = child_formatters[i][0];\n        var child_name = child_formatters[i][1];\n        window[owner_name + '_' + child_name + 'ActionsFormatter'] = genericActionsFormatter(owner_name, child_name);\n    }\n\n\n\n    // This is  gross, but necessary so that we can package the API response\n    // for custom fields in a more useful way.\n    function customFieldsFormatter(value, row) {\n\n\n            if ((!this) || (!this.title)) {\n                return '';\n            }\n\n            var field_column = this.title;\n\n            // Pull out any HTMl that might be passed via the presenter\n            // (for example, the locked icon for encrypted fields)\n            var field_column_plain = field_column.replace(/<(?:.|\\n)*?> ?/gm, '');\n            if ((row.custom_fields) && (row.custom_fields[field_column_plain])) {\n\n                // If the field type needs special formatting, do that here\n                if ((row.custom_fields[field_column_plain].field_format) && (row.custom_fields[field_column_plain].value)) {\n                    if (row.custom_fields[field_column_plain].field_format=='URL') {\n                        return '<a href=\"' + row.custom_fields[field_column_plain].value + '\" target=\"_blank\" rel=\"noopener\">' + row.custom_fields[field_column_plain].value + '</a>';\n                    } else if (row.custom_fields[field_column_plain].field_format=='EMAIL') {\n                        return '<a href=\"mailto:' + row.custom_fields[field_column_plain].value + '\">' + row.custom_fields[field_column_plain].value + '</a>';\n                    }\n                }\n                return row.custom_fields[field_column_plain].value;\n\n            }\n\n    }\n\n\n    function createdAtFormatter(value) {\n        if ((value) && (value.formatted)) {\n            return value.formatted;\n        }\n    }\n\n    function externalLinkFormatter(value) {\n        if (value) {\n            return '<a href=\"' + value + '\" target=\"_blank\">' + value + '</a>';\n        }\n    }\n\n    function groupsFormatter(value) {\n\n        if (value) {\n            var groups = '';\n            for (var index in value.rows) {\n                groups += '<a href=\"{{ url('/') }}/admin/groups/' + value.rows[index].id + '\" class=\"label label-default\"> ' + value.rows[index].name + '</a> ';\n            }\n            return groups;\n        }\n    }\n\n\n\n    function changeLogFormatter(value) {\n        var result = '';\n            for (var index in value) {\n                result += index + ': <del>' + value[index].old + '</del>  <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ' + value[index].new + '<br>'\n            }\n\n        return result;\n\n    }\n\n\n    // Create a linked phone number in the table list\n    function phoneFormatter(value) {\n        if (value) {\n            return  '<a href=\"tel:' + value + '\">' + value + '</a>';\n        }\n    }\n\n\n    function deployedLocationFormatter(row, value) {\n        if ((row) && (row!=undefined)) {\n            return '<a href=\"{{ url('/') }}/locations/' + row.id + '\"> ' + row.name + '</a>';\n        } else if (value.rtd_location) {\n            return '<a href=\"{{ url('/') }}/locations/' + value.rtd_location.id + '\" data-toggle=\"tooltip\" title=\"Default Location\"> ' + value.rtd_location.name + '</a>';\n        }\n\n    }\n\n    function groupsAdminLinkFormatter(value, row) {\n        return '<a href=\"{{ url('/') }}/admin/groups/' + row.id + '\"> ' + value + '</a>';\n    }\n\n    function assetTagLinkFormatter(value, row) {\n        if ((row.asset) && (row.asset.id)) {\n            return '<a href=\"{{ url('/') }}/hardware/' + row.asset.id + '\"> ' + row.asset.asset_tag + '</a>';\n        }\n        return '';\n\n    }\n\n    function departmentNameLinkFormatter(value, row) {\n        if ((row.assigned_user) && (row.assigned_user.department) && (row.assigned_user.department.name)) {\n            return '<a href=\"{{ url('/') }}/department/' + row.assigned_user.department.id + '\"> ' + row.assigned_user.department.name + '</a>';\n        }\n\n    }\n\n    function assetNameLinkFormatter(value, row) {\n        if ((row.asset) && (row.asset.name)) {\n            return '<a href=\"{{ url('/') }}/hardware/' + row.asset.id + '\"> ' + row.asset.name + '</a>';\n        }\n\n    }\n\n    function trueFalseFormatter(value) {\n        if ((value) && ((value == 'true') || (value == '1'))) {\n            return '<i class=\"fa fa-check text-success\"></i>';\n        } else {\n            return '<i class=\"fa fa-times text-danger\"></i>';\n        }\n    }\n\n    function dateDisplayFormatter(value) {\n        if (value) {\n            return  value.formatted;\n        }\n    }\n\n    function iconFormatter(value) {\n        if (value) {\n            return '<i class=\"' + value + '  icon-med\"></i>';\n        }\n    }\n\n    function emailFormatter(value) {\n        if (value) {\n            return '<a href=\"mailto:' + value + '\"> ' + value + '</a>';\n        }\n    }\n\n    function linkFormatter(value) {\n        if (value) {\n            return '<a href=\"' + value + '\"> ' + value + '</a>';\n        }\n    }\n\n    function assetCompanyFilterFormatter(value, row) {\n        if (value) {\n            return '<a href=\"{{ url('/') }}/hardware/?company_id=' + row.id + '\"> ' + value + '</a>';\n        }\n    }\n\n    function assetCompanyObjFilterFormatter(value, row) {\n        if ((row) && (row.company)) {\n            return '<a href=\"{{ url('/') }}/hardware/?company_id=' + row.company.id + '\"> ' + row.company.name + '</a>';\n        }\n    }\n\n    function usersCompanyObjFilterFormatter(value, row) {\n        if (value) {\n            return '<a href=\"{{ url('/') }}/users/?company_id=' + row.id + '\"> ' + value + '</a>';\n        } else {\n            return value;\n        }\n    }\n\n    function employeeNumFormatter(value, row) {\n\n        if ((row) && (row.assigned_to) && ((row.assigned_to.employee_number))) {\n            return '<a href=\"{{ url('/') }}/users/' + row.assigned_to.id + '\"> ' + row.assigned_to.employee_number + '</a>';\n        }\n    }\n\n    function orderNumberObjFilterFormatter(value, row) {\n        if (value) {\n            return '<a href=\"{{ url('/') }}/hardware/?order_number=' + row.order_number + '\"> ' + row.order_number + '</a>';\n        }\n    }\n\n\n   function imageFormatter(value, row) {\n\n\n\n        if (value) {\n\n            if (row.name) {\n                var altName = row.name;\n            }\n                else if ((row) && (row.model)) {\n                var altName = row.model.name;\n           }\n            return '<a href=\"' + value + '\" data-toggle=\"lightbox\" data-type=\"image\"><img src=\"' + value + '\" style=\"max-height: {{ $snipeSettings->thumbnail_max_h }}px; width: auto;\" class=\"img-responsive\" alt=\"' + altName + '\"></a>';\n        }\n    }\n\n    function fileUploadFormatter(value) {\n        if ((value) && (value.url) && (value.inlineable)) {\n            return '<a href=\"' + value.url + '\" data-toggle=\"lightbox\" data-type=\"image\"><img src=\"' + value.url + '\" style=\"max-height: {{ $snipeSettings->thumbnail_max_h }}px; width: auto;\" class=\"img-responsive\"></a>';\n        } else if ((value) && (value.url)) {\n            return '<a href=\"' + value.url + '\" class=\"btn btn-default\"><i class=\"fa fa-download\"></i></a>';\n        }\n    }\n\n\n    function fileUploadNameFormatter(value) {\n        console.dir(value);\n        if ((value) && (value.filename) && (value.url)) {\n            return '<a href=\"' + value.url + '\">' + value.filename + '</a>';\n        }\n    }\n\n    function cleanFloat(number) {\n        if(!number) { // in a JavaScript context, meaning, if it's null or zero or unset\n            return 0.0;\n        }\n        if (\"{{$snipeSettings->digit_separator}}\" == \"1.234,56\") {\n            // yank periods, change commas to periods\n            periodless = number.toString().replace(/\\./g,\"\");\n            decimalfixed = periodless.replace(/,/g,\".\");\n        } else {\n            // yank commas, that's it.\n            decimalfixed = number.toString().replace(\",\",\"\");\n        }\n        return parseFloat(decimalfixed);\n    }\n\n    function sumFormatter(data) {\n        if (Array.isArray(data)) {\n            var field = this.field;\n            var total_sum = data.reduce(function(sum, row) {\n                return (sum) + (cleanFloat(row[field]) || 0);\n            }, 0);\n            return numberWithCommas(total_sum.toFixed(2));\n        }\n        return 'not an array';\n    }\n\n    function numberWithCommas(value) {\n        if ((value) && (\"{{$snipeSettings->digit_separator}}\" == \"1.234,56\")){\n            var parts = value.toString().split(\".\");\n             parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n             return parts.join(\",\");\n         } else {\n             var parts = value.toString().split(\",\");\n             parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n             return parts.join(\".\");\n        }\n        return value\n    }\n\n    $(function () {\n        $('#bulkEdit').click(function () {\n            var selectedIds = $('.snipe-table').bootstrapTable('getSelections');\n            $.each(selectedIds, function(key,value) {\n                $( \"#bulkForm\" ).append($('<input type=\"hidden\" name=\"ids[' + value.id + ']\" value=\"' + value.id + '\">' ));\n            });\n\n        });\n    });\n\n\n\n    $(function() {\n\n        // This handles the search box highlighting on both ajax and client-side\n        // bootstrap tables\n        var searchboxHighlighter = function (event) {\n\n            $('.search-input').each(function (index, element) {\n\n                if ($(element).val() != '') {\n                    $(element).addClass('search-highlight');\n                    $(element).next().children().addClass('search-highlight');\n                } else {\n                    $(element).removeClass('search-highlight');\n                    $(element).next().children().removeClass('search-highlight');\n                }\n            });\n        };\n\n        $('.search button[name=clearSearch]').click(searchboxHighlighter);\n        searchboxHighlighter({ name:'pageload'});\n        $('.search-input').keyup(searchboxHighlighter);\n\n        //  This is necessary to make the bootstrap tooltips work inside of the\n        // wenzhixin/bootstrap-table formatters\n        $('#table').on('post-body.bs.table', function () {\n            $('[data-toggle=\"tooltip\"]').tooltip({\n                container: 'body'\n            });\n\n\n        });\n    });\n\n</script>\n    \n@endpush\n"], "filenames": ["resources/views/partials/bootstrap-table.blade.php"], "buggy_code_start_loc": [77], "buggy_code_end_loc": [77], "fixing_code_start_loc": [78], "fixing_code_end_loc": [82], "type": "CWE-79", "message": "snipe-it is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2021-3879", "sourceIdentifier": "security@huntr.dev", "published": "2021-10-19T13:15:11.870", "lastModified": "2021-10-21T23:57:43.137", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "snipe-it is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "snipe-it es vulnerable a una Neutralizaci\u00f3n Inapropiada de Entradas Durante la Generaci\u00f3n de P\u00e1ginas Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:snipeitapp:snipe-it:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.3.0", "matchCriteriaId": "85B46A84-DED5-4BBA-B245-16C07FABC847"}]}]}], "references": [{"url": "https://github.com/snipe/snipe-it/commit/bda23bb1e66fd7ce42c75c69cf5eea4e80865c1c", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/6dccc49e-3843-4a4a-b397-5c659e5f8bfe", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/snipe/snipe-it/commit/bda23bb1e66fd7ce42c75c69cf5eea4e80865c1c"}}