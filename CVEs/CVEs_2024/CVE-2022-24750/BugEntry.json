{"buggy_code": ["//  Copyright (C) 2002 UltraVNC Team Members. All Rights Reserved.\r\n//  Copyright (C) 2000-2002 Const Kaplinsky. All Rights Reserved.\r\n//  Copyright (C) 2002 TightVNC. All Rights Reserved.\r\n//  Copyright (C) 2002 RealVNC Ltd. All Rights Reserved.\r\n//  Copyright (C) 1999 AT&T Laboratories Cambridge. All Rights Reserved.\r\n//\r\n//  This file is part of the VNC system.\r\n//\r\n//  The VNC system is free software; you can redistribute it and/or modify\r\n//  it under the terms of the GNU General Public License as published by\r\n//  the Free Software Foundation; either version 2 of the License, or\r\n//  (at your option) any later version.\r\n//\r\n//  This program is distributed in the hope that it will be useful,\r\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n//  GNU General Public License for more details.\r\n//\r\n//  You should have received a copy of the GNU General Public License\r\n//  along with this program; if not, write to the Free Software\r\n//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,\r\n//  USA.\r\n//\r\n// If the source code for the VNC system is not available from the place \r\n// whence you received this file, check http://www.uk.research.att.com/vnc or contact\r\n// the authors on vnc@uk.research.att.com for information on obtaining it.\r\n\r\n\r\n// vncProperties.cpp\r\n\r\n// Implementation of the Properties dialog!\r\n\r\n#include \"stdhdrs.h\"\r\n#include \"lmcons.h\"\r\n#include \"vncservice.h\"\r\n\r\n#include \"winvnc.h\"\r\n#include \"vncproperties.h\"\r\n#include \"vncserver.h\"\r\n#include \"vncpasswd.h\"\r\n#include \"vncOSVersion.h\"\r\n#include \"common/win32_helpers.h\"\r\n#include \"vncConnDialog.h\"\r\n\r\n#include \"Localization.h\" // ACT : Add localization on messages\r\n\r\n//extern HINSTANCE g_hInst;\r\n\r\nbool RunningAsAdministrator ();\r\nconst char WINVNC_REGISTRY_KEY [] = \"Software\\\\ORL\\\\WinVNC3\";\r\n\r\n// [v1.0.2-jp1 fix] Load resouce from dll\r\nextern HINSTANCE\thInstResDLL;\r\n\r\n// Marscha@2004 - authSSP: Function pointer for dyn. linking\r\ntypedef void (*vncEditSecurityFn) (HWND hwnd, HINSTANCE hInstance);\r\nvncEditSecurityFn vncEditSecurity = 0;\r\n// ethernet packet 1500 - 40 tcp/ip header - 8 PPPoE info\r\n//unsigned int G_SENDBUFFER=8192;\r\nunsigned int G_SENDBUFFER_EX=1452;\r\n\r\nvoid Secure_Save_Plugin_Config(char *szPlugin);\r\nvoid Secure_Plugin_elevated(char *szPlugin);\r\nvoid Secure_Plugin(char *szPlugin);\r\n\r\n// Constructor & Destructor\r\nvncProperties::vncProperties()\r\n{\r\n    m_alloweditclients = TRUE;\r\n\tm_allowproperties = TRUE;\r\n\tm_allowInjection = FALSE;\r\n\tm_allowshutdown = TRUE;\r\n\tm_dlgvisible = FALSE;\r\n\tm_usersettings = TRUE;\r\n\tLock_service_helper=TRUE;\r\n\tm_fUseRegistry = FALSE;\r\n    m_ftTimeout = FT_RECV_TIMEOUT;\r\n    m_keepAliveInterval = KEEPALIVE_INTERVAL;\r\n\tm_IdleInputTimeout = 0;\r\n\tm_pref_Primary=true;\r\n\tm_pref_Secondary=false;\r\n\r\n\tm_pref_DSMPluginConfig[0] = '\\0';\r\n\thBmpExpand = (HBITMAP)::LoadImage(hInstResDLL, MAKEINTRESOURCE(IDB_EXPAND), IMAGE_BITMAP, 0, 0, LR_LOADTRANSPARENT);\r\n\thBmpCollaps = (HBITMAP)::LoadImage(hInstResDLL, MAKEINTRESOURCE(IDB_COLLAPS), IMAGE_BITMAP, 0, 0, LR_LOADTRANSPARENT);\r\n\tm_bExpanded = true;\t\r\n\tcy = 0;\r\n\tcx = 0;\r\n\tservice_commandline[0] = '\\0';\r\n\taccept_reject_mesg[0] = '\\0';\r\n\r\n}\r\n\r\nvncProperties::~vncProperties()\r\n{\r\n}\r\n\r\n// Initialisation\r\nBOOL\r\nvncProperties::Init(vncServer *server)\r\n{\r\n\t// Save the server pointer\r\n\tm_server = server;\r\n\r\n\t// sf@2007 - Registry mode can still be forced for backward compatibility and OS version < Vista\r\n\tm_fUseRegistry = ((myIniFile.ReadInt(\"admin\", \"UseRegistry\", 0) == 1) ? TRUE : FALSE);\r\n\r\n\t// Load the settings\r\n\tif (m_fUseRegistry)\r\n\t\tLoad(TRUE);\r\n\telse\r\n\t\tLoadFromIniFile();\r\n\r\n\t// If the password is empty then always show a dialog\r\n\tchar passwd[MAXPWLEN];\r\n\tm_server->GetPassword(passwd);\r\n\t{\r\n\t    vncPasswd::ToText plain(passwd, m_pref_Secure);\r\n\t    if (strlen(plain) == 0)\r\n\t\t\t if (!m_allowproperties || !RunningAsAdministrator ()) {\r\n\t\t\t\tif(m_server->AuthRequired()) {\r\n\t\t\t\t\tMessageBoxSecure(NULL, sz_ID_NO_PASSWD_NO_OVERRIDE_ERR,\r\n\t\t\t\t\t\t\t\tsz_ID_WINVNC_ERROR,\r\n\t\t\t\t\t\t\t\tMB_OK | MB_ICONSTOP);\r\n\t\t\t\t\tPostQuitMessage(0);\r\n\t\t\t\t}\r\n\t\t\t\t/*else {\r\n\t\t\t\t\tif (!vncService::RunningAsService())\r\n\t\t\t\t\t\tMessageBoxSecure(NULL, sz_ID_NO_PASSWD_NO_OVERRIDE_WARN,\r\n\t\t\t\t\t\t\t\tsz_ID_WINVNC_ERROR,\r\n\t\t\t\t\t\t\t\tMB_OK | MB_ICONEXCLAMATION);\r\n\t\t\t\t}*/\r\n\t\t\t} else {\r\n\t\t\t\t// If null passwords are not allowed, ensure that one is entered!\r\n\t\t\t\tif (m_server->AuthRequired()) {\r\n\t\t\t\t\tchar username[UNLEN+1];\r\n\t\t\t\t\tif (!vncService::CurrentUser(username, sizeof(username)))\r\n\t\t\t\t\t\treturn FALSE;\r\n\t\t\t\t\tif (strcmp(username, \"\") == 0) {\r\n\t\t\t\t\t\tLock_service_helper=true;\r\n\t\t\t\t\t\tMessageBoxSecure(NULL, sz_ID_NO_PASSWD_NO_LOGON_WARN,\r\n\t\t\t\t\t\t\t\t\tsz_ID_WINVNC_ERROR,\r\n\t\t\t\t\t\t\t\t\tMB_OK | MB_ICONEXCLAMATION);\r\n\t\t\t\t\t\tShowAdmin(TRUE, FALSE);\r\n\t\t\t\t\t\tLock_service_helper=false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tShowAdmin(TRUE, TRUE);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t}\r\n\tLock_service_helper=false;\r\n\treturn TRUE;\r\n}\r\n\r\n\r\n\r\n// Dialog box handling functions\r\nvoid\r\nvncProperties::ShowAdmin(BOOL show, BOOL usersettings)\r\n{\r\n//\tif (Lock_service_helper) return;\r\n\tHANDLE hProcess=NULL;\r\n\tHANDLE hPToken=NULL;\r\n\tDWORD id = vncService::GetExplorerLogonPid();\r\n\tint iImpersonateResult=0;\r\n\t{\r\n\t\tchar WORKDIR[MAX_PATH];\r\n\t\tif (!GetTempPath(MAX_PATH,WORKDIR))\r\n\t\t\t{\r\n\t\t\t\t//Function failed, just set something\r\n\t\t\t\tif (GetModuleFileName(NULL, WORKDIR, MAX_PATH))\r\n\t\t\t\t{\r\n\t\t\t\t\tchar* p = strrchr(WORKDIR, '\\\\');\r\n\t\t\t\t\tif (p == NULL) return;\r\n\t\t\t\t\t*p = '\\0';\r\n\t\t\t\t}\r\n\t\t\t\t\tstrcpy_s(m_Tempfile,\"\");\r\n\t\t\t\t\tstrcat_s(m_Tempfile,WORKDIR);//set the directory\r\n\t\t\t\t\tstrcat_s(m_Tempfile,\"\\\\\");\r\n\t\t\t\t\tstrcat_s(m_Tempfile,INIFILE_NAME);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tstrcpy_s(m_Tempfile,\"\");\r\n\t\t\tstrcat_s(m_Tempfile,WORKDIR);//set the directory\r\n\t\t\tstrcat_s(m_Tempfile,INIFILE_NAME);\r\n\t\t}\r\n\t}\r\n\tif (id!=0 && usersettings)\r\n\t\t\t{\r\n\t\t\t\thProcess = OpenProcess(MAXIMUM_ALLOWED,FALSE,id);\r\n\t\t\t\tif(OpenProcessToken(hProcess,TOKEN_ADJUST_PRIVILEGES|TOKEN_QUERY\r\n\t\t\t\t\t\t\t\t\t\t|TOKEN_DUPLICATE|TOKEN_ASSIGN_PRIMARY|TOKEN_ADJUST_SESSIONID\r\n\t\t\t\t\t\t\t\t\t\t|TOKEN_READ|TOKEN_WRITE,&hPToken))\r\n\t\t\t\t{\r\n\t\t\t\t\tImpersonateLoggedOnUser(hPToken);\r\n\t\t\t\t\tiImpersonateResult = GetLastError();\r\n\t\t\t\t\tif(iImpersonateResult == ERROR_SUCCESS)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tExpandEnvironmentStringsForUser(hPToken, \"%TEMP%\", m_Tempfile, MAX_PATH);\r\n\t\t\t\t\t\tstrcat_s(m_Tempfile,\"\\\\\");\r\n\t\t\t\t\t\tstrcat_s(m_Tempfile,INIFILE_NAME);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t}\r\n\r\n\tif (!m_allowproperties) \r\n\t{\r\n\t\tif(iImpersonateResult == ERROR_SUCCESS)RevertToSelf();\r\n\t\tif (hProcess) CloseHandle(hProcess);\r\n\t\tif (hPToken) CloseHandle(hPToken);\r\n\t\treturn;\r\n\t}\r\n\t/*if (!RunningAsAdministrator ())\r\n\t\t{\r\n\t\tif(iImpersonateResult == ERROR_SUCCESS)RevertToSelf();\r\n\t\tCloseHandle(hProcess);\r\n\t\tCloseHandle(hPToken);\r\n\t\treturn;\r\n\t\t}*/\r\n\r\n\tif (m_fUseRegistry)\r\n\t{\r\n\t\tif (vncService::RunningAsService()) usersettings=false;\r\n\t\tm_usersettings=usersettings;\r\n\t}\r\n\r\n\tif (show)\r\n\t{\r\n\r\n\t\tif (!m_fUseRegistry) // Use the ini file\r\n\t\t{\r\n\t\t\t// We're trying to edit the default local settings - verify that we can\r\n\t\t\t/*if (!myIniFile.IsWritable())\r\n\t\t\t{\r\n\t\t\t\tif(iImpersonateResult == ERROR_SUCCESS)RevertToSelf();\r\n\t\t\t\tCloseHandle(hProcess);\r\n\t\t\t\tCloseHandle(hPToken);\r\n\t\t\t\treturn;\r\n\t\t\t}*/\r\n\t\t}\r\n\t\telse // Use the registry\r\n\t\t{\r\n\t\t\t// Verify that we know who is logged on\r\n\t\t\tif (usersettings)\r\n\t\t\t{\r\n\t\t\t\tchar username[UNLEN+1];\r\n\t\t\t\tif (!vncService::CurrentUser(username, sizeof(username)))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(iImpersonateResult == ERROR_SUCCESS)RevertToSelf();\r\n\t\t\t\t\t\tCloseHandle(hProcess);\r\n\t\t\t\t\t\tCloseHandle(hPToken);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\tif (strcmp(username, \"\") == 0) {\r\n\t\t\t\t\tMessageBoxSecure(NULL, sz_ID_NO_CURRENT_USER_ERR, sz_ID_WINVNC_ERROR, MB_OK | MB_ICONEXCLAMATION);\r\n\t\t\t\t\tif(iImpersonateResult == ERROR_SUCCESS)RevertToSelf();\r\n\t\t\t\t\tCloseHandle(hProcess);\r\n\t\t\t\t\tCloseHandle(hPToken);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// We're trying to edit the default local settings - verify that we can\r\n\t\t\t\tHKEY hkLocal=NULL;\r\n\t\t\t\tHKEY hkDefault=NULL;\r\n\t\t\t\tBOOL canEditDefaultPrefs = 1;\r\n\t\t\t\tDWORD dw;\r\n\t\t\t\tif (RegCreateKeyEx(HKEY_LOCAL_MACHINE,\r\n\t\t\t\t\tWINVNC_REGISTRY_KEY,\r\n\t\t\t\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\t\t\t\tKEY_READ, NULL, &hkLocal, &dw) != ERROR_SUCCESS)\r\n\t\t\t\t\tcanEditDefaultPrefs = 0;\r\n\t\t\t\telse if (RegCreateKeyEx(hkLocal,\r\n\t\t\t\t\t\"Default\",\r\n\t\t\t\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\t\t\t\tKEY_WRITE | KEY_READ, NULL, &hkDefault, &dw) != ERROR_SUCCESS)\r\n\t\t\t\t\tcanEditDefaultPrefs = 0;\r\n\t\t\t\tif (hkLocal) RegCloseKey(hkLocal);\r\n\t\t\t\tif (hkDefault) RegCloseKey(hkDefault);\r\n\r\n\t\t\t\tif (!canEditDefaultPrefs) {\r\n\t\t\t\t\tMessageBoxSecure(NULL, sz_ID_CANNOT_EDIT_DEFAULT_PREFS, sz_ID_WINVNC_ERROR, MB_OK | MB_ICONEXCLAMATION);\r\n\t\t\t\t\tif(iImpersonateResult == ERROR_SUCCESS)RevertToSelf();\r\n\t\t\t\t\tif (hProcess) CloseHandle(hProcess);\r\n\t\t\t\t\tif (hPToken) CloseHandle(hPToken);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Now, if the dialog is not already displayed, show it!\r\n\t\tif (!m_dlgvisible)\r\n\t\t{\r\n\t\t\tif (m_fUseRegistry) \r\n\t\t\t{\r\n\t\t\t\tif (usersettings)\r\n\t\t\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"show per-user Properties\\n\"));\r\n\t\t\t\telse\r\n\t\t\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"show default system Properties\\n\"));\r\n\r\n\t\t\t\t// Load in the settings relevant to the user or system\r\n\t\t\t\t//Load(usersettings);\r\n\t\t\t\tm_usersettings=usersettings;\r\n\t\t\t}\r\n\r\n\t\t\tfor (;;)\r\n\t\t\t{\r\n\t\t\t\tm_returncode_valid = FALSE;\r\n\r\n\t\t\t\t// Do the dialog box\r\n\t\t\t\t// [v1.0.2-jp1 fix]\r\n\t\t\t\t//int result = DialogBoxParam(hAppInstance,\r\n\t\t\t\tm_bExpanded = true;\r\n\t\t\t\tcy = 0;\r\n\t\t\t\tcx = 0;\r\n\t\t\t\tint result = (int)DialogBoxParam(hInstResDLL,\r\n\t\t\t\t    MAKEINTRESOURCE(IDD_PROPERTIES1), \r\n\t\t\t\t    NULL,\r\n\t\t\t\t    (DLGPROC) DialogProc,\r\n\t\t\t\t    (LONG_PTR) this);\r\n\r\n\t\t\t\tif (!m_returncode_valid)\r\n\t\t\t\t    result = IDCANCEL;\r\n\r\n\t\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"dialog result = %d\\n\"), result);\r\n\r\n\t\t\t\tif (result == -1)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Dialog box failed, so quit\r\n\t\t\t\t\tPostQuitMessage(0);\r\n\t\t\t\t\tif(iImpersonateResult == ERROR_SUCCESS)RevertToSelf();\r\n\t\t\t\t\tCloseHandle(hProcess);\r\n\t\t\t\t\tCloseHandle(hPToken);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// We're allowed to exit if the password is not empty\r\n\t\t\t\tchar passwd[MAXPWLEN];\r\n\t\t\t\tm_server->GetPassword(passwd);\r\n\t\t\t\t{\r\n\t\t\t\t    vncPasswd::ToText plain(passwd, m_server->Secure());\r\n\t\t\t\t    if ((strlen(plain) != 0) || !m_server->AuthRequired())\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvnclog.Print(LL_INTERR, VNCLOG(\"warning - empty password\\n\"));\r\n\r\n\t\t\t\t// If we reached here then OK was used & there is no password!\r\n\t\t\t\tint result2 = MessageBoxSecure(NULL, sz_ID_NO_PASSWORD_WARN,\r\n\t\t\t\t\tsz_ID_WINVNC_WARNIN, MB_OK | MB_ICONEXCLAMATION);\r\n\r\n\t\t\t\t// The password is empty, so if OK was used then redisplay the box,\r\n\t\t\t\t// otherwise, if CANCEL was used, close down WinVNC\r\n\t\t\t\tif (result == IDCANCEL)\r\n\t\t\t\t{\r\n\t\t\t\t    vnclog.Print(LL_INTERR, VNCLOG(\"no password - QUITTING\\n\"));\r\n\t\t\t\t    PostQuitMessage(0);\r\n\t\t\t\t    if(iImpersonateResult == ERROR_SUCCESS)RevertToSelf();\r\n\t\t\t\t\tCloseHandle(hProcess);\r\n\t\t\t\t\tCloseHandle(hPToken);\r\n\t\t\t\t\tfShutdownOrdered = true;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\t\t\t\t\r\n\r\n\t\t\t\tomni_thread::sleep(4);\r\n\t\t\t}\r\n\r\n\t\t\t// Load in all the settings\r\n\t\t\t// If you run as service, you reload the saved settings before they are actual saved\r\n\t\t\t// via runas.....\r\n\t\t\tif (!vncService::RunningAsService())\r\n\t\t\t{\r\n\t\t\tif (m_fUseRegistry) \r\n\t\t\t\tLoad(TRUE);\r\n\t\t\telse\r\n\t\t\t\tLoadFromIniFile();\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\tif(iImpersonateResult == ERROR_SUCCESS)RevertToSelf();\r\n\tif (hProcess) CloseHandle(hProcess);\r\n\tif (hPToken) CloseHandle(hPToken);\r\n}\r\n\r\nBOOL CALLBACK\r\nvncProperties::DialogProc(HWND hwnd,\r\n\t\t\t\t\t\t  UINT uMsg,\r\n\t\t\t\t\t\t  WPARAM wParam,\r\n\t\t\t\t\t\t  LPARAM lParam )\r\n{\r\n\t// We use the dialog-box's USERDATA to store a _this pointer\r\n\t// This is set only once WM_INITDIALOG has been recieved, though!\r\n     vncProperties *_this = helper::SafeGetWindowUserData<vncProperties>(hwnd);\r\n\r\n\tswitch (uMsg)\r\n\t{\r\n\r\n\tcase WM_INITDIALOG:\r\n\t\t{\t\t\t\r\n\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"INITDIALOG properties\\n\"));\r\n\t\t\t// Retrieve the Dialog box parameter and use it as a pointer\r\n\t\t\t// to the calling vncProperties object\r\n            helper::SafeSetWindowUserData(hwnd, lParam);\r\n\r\n\t\t\t_this = (vncProperties *) lParam;\r\n\t\t\t_this->m_dlgvisible = TRUE;\r\n\t\t\tif (_this->m_fUseRegistry)\r\n\t\t\t{\r\n\t\t\t\t_this->Load(_this->m_usersettings);\r\n\r\n\t\t\t\t// Set the dialog box's title to indicate which Properties we're editting\r\n\t\t\t\tif (_this->m_usersettings) {\r\n\t\t\t\t\tSetWindowText(hwnd, sz_ID_CURRENT_USER_PROP);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tSetWindowText(hwnd, sz_ID_DEFAULT_SYST_PROP);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t_this->LoadFromIniFile();\r\n\t\t\t}\r\n\r\n\t\t\t// Initialise the properties controls\r\n\t\t\tHWND hConnectSock = GetDlgItem(hwnd, IDC_CONNECT_SOCK);\r\n\r\n\t\t\t// Tight 1.2.7 method\r\n\t\t\tBOOL bConnectSock = _this->m_server->SockConnected();\r\n\t\t\tSendMessage(hConnectSock, BM_SETCHECK, bConnectSock, 0);\r\n\r\n\t\t\t// Set the content of the password field to a predefined string.\r\n\t\t    SetDlgItemText(hwnd, IDC_PASSWORD, \"~~~~~~~~\");\r\n\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PASSWORD), bConnectSock);\r\n\r\n\t\t\t// Set the content of the view-only password field to a predefined string. //PGM\r\n\t\t    SetDlgItemText(hwnd, IDC_PASSWORD2, \"~~~~~~~~\"); //PGM\r\n\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PASSWORD2), bConnectSock); //PGM\r\n\r\n\t\t\t// Set the initial keyboard focus\r\n\t\t\tif (bConnectSock)\r\n\t\t\t{\r\n\t\t\t\tSetFocus(GetDlgItem(hwnd, IDC_PASSWORD));\r\n\t\t\t\tSendDlgItemMessage(hwnd, IDC_PASSWORD, EM_SETSEL, 0, (LPARAM)-1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tSetFocus(hConnectSock);\r\n\t\t\t// Set display/ports settings\r\n\t\t\t_this->InitPortSettings(hwnd);\r\n\r\n\t\t\tHWND hConnectHTTP = GetDlgItem(hwnd, IDC_CONNECT_HTTP);\r\n\t\t\tSendMessage(hConnectHTTP,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->HTTPConnectEnabled(),\r\n\t\t\t\t0);\r\n\r\n\t\t   // Modif sf@2002 - v1.1.0\r\n\t\t   HWND hFileTransfer = GetDlgItem(hwnd, IDC_FILETRANSFER);\r\n           SendMessage(hFileTransfer, BM_SETCHECK, _this->m_server->FileTransferEnabled(), 0);\r\n\r\n\t\t   HWND hFileTransferUserImp = GetDlgItem(hwnd, IDC_FTUSERIMPERSONATION_CHECK);\r\n           SendMessage(hFileTransferUserImp, BM_SETCHECK, _this->m_server->FTUserImpersonation(), 0);\r\n\t\t   \r\n\t\t   HWND hBlank = GetDlgItem(hwnd, IDC_BLANK);\r\n           SendMessage(hBlank, BM_SETCHECK, _this->m_server->BlankMonitorEnabled(), 0);\r\n\t\t   if (!VNC_OSVersion::getInstance()->OS_WIN10_TRANS && VNC_OSVersion::getInstance()->OS_WIN10)\r\n\t\t\t   SetDlgItemText(hwnd, IDC_BLANK, \"Enable Blank Monitor on Viewer Request require Min Win10 build 19041 \");\r\n\t\t   if (VNC_OSVersion::getInstance()->OS_WIN8)\r\n\t\t\t   SetDlgItemText(hwnd, IDC_BLANK, \"Enable Blank Monitor on Viewer Not supported on windows 8 \");\r\n\t\t   HWND hBlank2 = GetDlgItem(hwnd, IDC_BLANK2); //PGM\r\n           SendMessage(hBlank2, BM_SETCHECK, _this->m_server->BlankInputsOnly(), 0); //PGM\r\n\t\t   \r\n\t\t   HWND hLoopback = GetDlgItem(hwnd, IDC_ALLOWLOOPBACK);\r\n\t\t   BOOL fLoopback = _this->m_server->LoopbackOk();\r\n\t\t   SendMessage(hLoopback, BM_SETCHECK, fLoopback, 0);\r\n#ifdef IPV6V4\r\n\t\t   HWND hIPV6 = GetDlgItem(hwnd, IDC_IPV6);\r\n\t\t   BOOL fIPV6 = _this->m_server->IPV6();\r\n\t\t   SendMessage(hIPV6, BM_SETCHECK, fIPV6, 0);\r\n#else\r\n\t\t   HWND hIPV6 = GetDlgItem(hwnd, IDC_IPV6);\r\n\t\t   EnableWindow(hIPV6, false);\r\n#endif\r\n\t\t   HWND hLoopbackonly = GetDlgItem(hwnd, IDC_LOOPBACKONLY);\r\n\t\t   BOOL fLoopbackonly = _this->m_server->LoopbackOnly();\r\n\t\t   SendMessage(hLoopbackonly, BM_SETCHECK, fLoopbackonly, 0);\r\n\r\n\t\t   HWND hTrayicon = GetDlgItem(hwnd, IDC_DISABLETRAY);\r\n\t\t   BOOL fTrayicon = _this->m_server->GetDisableTrayIcon();\r\n\t\t   SendMessage(hTrayicon, BM_SETCHECK, fTrayicon, 0);\r\n\r\n\t\t   HWND hrdpmode = GetDlgItem(hwnd, IDC_RDPMODE);\r\n\t\t   BOOL frdpmode = _this->m_server->GetRdpmode();\r\n\t\t   SendMessage(hrdpmode, BM_SETCHECK, frdpmode, 0);\r\n\r\n\t\t   HWND hNoScreensaver= GetDlgItem(hwnd,IDC_NOSCREENSAVER);\r\n\t\t   BOOL fNoScrensaver = _this->m_server->GetNoScreensaver();\r\n\t\t   SendMessage(hNoScreensaver, BM_SETCHECK, fNoScrensaver, 0);\r\n\r\n\t\t   HWND hAllowshutdown = GetDlgItem(hwnd, IDC_ALLOWSHUTDOWN);\r\n\t\t   SendMessage(hAllowshutdown, BM_SETCHECK, !_this->m_allowshutdown , 0);\r\n\r\n\t\t   HWND hm_alloweditclients = GetDlgItem(hwnd, IDC_ALLOWEDITCLIENTS);\r\n\t\t   SendMessage(hm_alloweditclients, BM_SETCHECK, !_this->m_alloweditclients , 0);\r\n\t\t   _this->m_server->SetAllowEditClients(_this->m_alloweditclients);\r\n\t\t   \r\n\r\n\t\t   if (vnclog.GetMode() >= 2)\r\n\t\t\t   CheckDlgButton(hwnd, IDC_LOG, BST_CHECKED);\r\n\t\t   else\r\n\t\t\t   CheckDlgButton(hwnd, IDC_LOG, BST_UNCHECKED);\r\n\r\n#ifndef AVILOG\r\n\t\t   ShowWindow (GetDlgItem(hwnd, IDC_CLEAR), SW_HIDE);\r\n\t\t   ShowWindow (GetDlgItem(hwnd, IDC_VIDEO), SW_HIDE);\r\n#endif\r\n\t\t   if (vnclog.GetVideo())\r\n\t\t   {\r\n\t\t\t   SetDlgItemText(hwnd, IDC_EDIT_PATH, vnclog.GetPath());\r\n\t\t\t   //EnableWindow(GetDlgItem(hwnd, IDC_EDIT_PATH), true);\r\n\t\t\t   CheckDlgButton(hwnd, IDC_VIDEO, BST_CHECKED);\r\n\t\t   }\r\n\t\t   else\r\n\t\t   {\r\n\t\t\t   SetDlgItemText(hwnd, IDC_EDIT_PATH, vnclog.GetPath());\r\n\t\t\t   //EnableWindow(GetDlgItem(hwnd, IDC_EDIT_PATH), false);\r\n\t\t\t   CheckDlgButton(hwnd, IDC_VIDEO, BST_UNCHECKED);\r\n\t\t   }\r\n\t\t   \r\n\t\t\t// Marscha@2004 - authSSP: moved MS-Logon checkbox back to admin props page\r\n\t\t\t// added New MS-Logon checkbox\r\n\t\t\t// only enable New MS-Logon checkbox and Configure MS-Logon groups when MS-Logon\r\n\t\t\t// is checked.\r\n\t\t   HWND hSecure = GetDlgItem(hwnd, IDC_SAVEPASSWORDSECURE);\r\n\t\t   SendMessage(hSecure, BM_SETCHECK, _this->m_server->Secure(), 0);\r\n\t\t   \r\n\t\t\tHWND hMSLogon = GetDlgItem(hwnd, IDC_MSLOGON_CHECKD);\r\n\t\t\tSendMessage(hMSLogon, BM_SETCHECK, _this->m_server->MSLogonRequired(), 0);\r\n\r\n\t\t\tHWND hNewMSLogon = GetDlgItem(hwnd, IDC_NEW_MSLOGON);\r\n\t\t\tSendMessage(hNewMSLogon, BM_SETCHECK, _this->m_server->GetNewMSLogon(), 0);\r\n\r\n\t\t\tHWND hReverseAuth = GetDlgItem(hwnd, IDC_REVERSEAUTH);\r\n\t\t\tSendMessage(hReverseAuth, BM_SETCHECK, _this->m_server->GetReverseAuthRequired(), 0);\r\n\r\n\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_NEW_MSLOGON), _this->m_server->MSLogonRequired());\r\n\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_MSLOGON), _this->m_server->MSLogonRequired());\r\n\t\t\t// Marscha@2004 - authSSP: end of change\r\n\r\n\t\t   SetDlgItemInt(hwnd, IDC_SCALE, _this->m_server->GetDefaultScale(), false);\r\n\r\n\t\t   \r\n\t\t   // Remote input settings\r\n\t\t\tHWND hEnableRemoteInputs = GetDlgItem(hwnd, IDC_DISABLE_INPUTS);\r\n\t\t\tSendMessage(hEnableRemoteInputs,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t!(_this->m_server->RemoteInputsEnabled()),\r\n\t\t\t\t0);\r\n\r\n\t\t\t// Local input settings\r\n\t\t\tHWND hDisableLocalInputs = GetDlgItem(hwnd, IDC_DISABLE_LOCAL_INPUTS);\r\n\t\t\tSendMessage(hDisableLocalInputs,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->LocalInputsDisabled(),\r\n\t\t\t\t0);\r\n\r\n\t\t\t// japanese keybaord\r\n\t\t\tHWND hJapInputs = GetDlgItem(hwnd, IDC_JAP_INPUTS);\r\n\t\t\tSendMessage(hJapInputs,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->JapInputEnabled(),\r\n\t\t\t\t0);\r\n\r\n\t\t\tHWND hUnicodeInputs = GetDlgItem(hwnd, IDC_UNICODE_INPUTS);\r\n\t\t\tSendMessage(hUnicodeInputs,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->UnicodeInputEnabled(),\r\n\t\t\t\t0);\r\n\r\n\t\t\tHWND hwinhelper = GetDlgItem(hwnd, IDC_WIN8_HELPER);\r\n\t\t\tSendMessage(hwinhelper,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->Win8HelperEnabled(),\r\n\t\t\t\t0);\r\n\r\n\t\t\t// Remove the wallpaper\r\n\t\t\tHWND hRemoveWallpaper = GetDlgItem(hwnd, IDC_REMOVE_WALLPAPER);\r\n\t\t\tSendMessage(hRemoveWallpaper,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->RemoveWallpaperEnabled(),\r\n\t\t\t\t0);\r\n\r\n\t\t\t// Lock settings\r\n\t\t\tHWND hLockSetting;\r\n\t\t\tswitch (_this->m_server->LockSettings()) {\r\n\t\t\tcase 1:\r\n\t\t\t\thLockSetting = GetDlgItem(hwnd, IDC_LOCKSETTING_LOCK);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\thLockSetting = GetDlgItem(hwnd, IDC_LOCKSETTING_LOGOFF);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\thLockSetting = GetDlgItem(hwnd, IDC_LOCKSETTING_NOTHING);\r\n\t\t\t};\r\n\t\t\tSendMessage(hLockSetting,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\tTRUE,\r\n\t\t\t\t0);\r\n\r\n\t\t\tHWND hNotificationSelection;\r\n\t\t\tswitch (_this->m_server->getNotificationSelection()) {\r\n\t\t\tcase 1:\r\n\t\t\t\thNotificationSelection = GetDlgItem(hwnd, IDC_RADIONOTIFICATIONIFPROVIDED);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\thNotificationSelection = GetDlgItem(hwnd,\r\n\t\t\t\t\tIDC_RADIONOTIFICATIONON);\r\n\t\t\t\tbreak;\r\n\t\t\t};\r\n\t\t\tSendMessage(hNotificationSelection,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\tTRUE,\r\n\t\t\t\t0);\r\n\r\n\t\t\tHWND hmvSetting = 0;\r\n\t\t\tswitch (_this->m_server->ConnectPriority()) {\r\n\t\t\tcase 0:\r\n\t\t\t\thmvSetting = GetDlgItem(hwnd, IDC_MV1);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\thmvSetting = GetDlgItem(hwnd, IDC_MV2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\thmvSetting = GetDlgItem(hwnd, IDC_MV3);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\thmvSetting = GetDlgItem(hwnd, IDC_MV4);\r\n\t\t\t\tbreak;\r\n\t\t\t};\r\n\t\t\tSendMessage(hmvSetting,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\tTRUE,\r\n\t\t\t\t0);\r\n\r\n\r\n\t\t\tHWND hQuerySetting;\r\n\t\t\tswitch (_this->m_server->QueryAccept()) {\r\n\t\t\tcase 0:\r\n\t\t\t\thQuerySetting = GetDlgItem(hwnd, IDC_DREFUSE);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\thQuerySetting = GetDlgItem(hwnd, IDC_DACCEPT);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\thQuerySetting = GetDlgItem(hwnd, IDC_DREFUSE);\r\n\t\t\t};\r\n\t\t\tSendMessage(hQuerySetting,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\tTRUE,\r\n\t\t\t\t0);\r\n\r\n\t\t\tHWND hMaxViewerSetting;\r\n\t\t\tswitch (_this->m_server->getMaxViewerSetting()) {\r\n\t\t\tcase 0:\r\n\t\t\t\thMaxViewerSetting = GetDlgItem(hwnd, IDC_MAXREFUSE);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\thMaxViewerSetting = GetDlgItem(hwnd, IDC_MAXDISCONNECT);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\thMaxViewerSetting = GetDlgItem(hwnd, IDC_MAXREFUSE);\r\n\t\t\t};\r\n\t\t\tSendMessage(hMaxViewerSetting,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\tTRUE,\r\n\t\t\t\t0);\r\n\r\n\t\t\tHWND hCollabo = GetDlgItem(hwnd, IDC_COLLABO);\r\n\t\t\tSendMessage(hCollabo,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->getCollabo(),\r\n\t\t\t\t0);\r\n\r\n\t\t\tHWND hwndDlg = GetDlgItem(hwnd, IDC_FRAME);\r\n\t\t\tSendMessage(hwndDlg,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->getFrame(),\r\n\t\t\t\t0);\r\n\r\n\t\t\thwndDlg = GetDlgItem(hwnd, IDC_NOTIFOCATION);\r\n\t\t\tSendMessage(hwndDlg,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->getNotification(),\r\n\t\t\t\t0);\r\n\r\n\t\t\thwndDlg = GetDlgItem(hwnd, IDC_OSD);\r\n\t\t\tSendMessage(hwndDlg,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->getOSD(),\r\n\t\t\t\t0);\r\n\r\n\t\t\tchar maxviewersChar[128];\r\n\t\t\tUINT maxviewers = _this->m_server->getMaxViewers();\r\n\t\t\tsprintf_s(maxviewersChar, \"%d\", (int)maxviewers);\r\n\t\t\tSetDlgItemText(hwnd, IDC_MAXVIEWERS, (const char*)maxviewersChar);\r\n\r\n\t\t\t// sf@2002 - List available DSM Plugins\r\n\t\t\tHWND hPlugins = GetDlgItem(hwnd, IDC_PLUGINS_COMBO);\r\n\t\t\tint nPlugins = _this->m_server->GetDSMPluginPointer()->ListPlugins(hPlugins);\r\n\t\t\tif (!nPlugins) \r\n\t\t\t{\r\n\t\t\t\tSendMessage(hPlugins, CB_ADDSTRING, 0, (LPARAM) sz_ID_NO_PLUGIN_DETECT);\r\n\t\t\t\tSendMessage(hPlugins, CB_SETCURSEL, 0, 0);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tSendMessage(hPlugins, CB_SELECTSTRING, 0, (LPARAM)_this->m_server->GetDSMPluginName());\r\n\r\n\t\t\t// Modif sf@2002\r\n\t\t\tSendMessage(GetDlgItem(hwnd, IDC_PLUGIN_CHECK), BM_SETCHECK, _this->m_server->IsDSMPluginEnabled(), 0);\r\n\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PLUGIN_BUTTON), _this->m_server->IsDSMPluginEnabled());\r\n\r\n\t\t\t// Query window option - Taken from TightVNC advanced properties \r\n\t\t\tBOOL queryEnabled = (_this->m_server->QuerySetting() == 4);\r\n\t\t\tSendMessage(GetDlgItem(hwnd, IDQUERY), BM_SETCHECK, queryEnabled, 0);\r\n\t\t\tEnableWindow(GetDlgItem(hwnd, IDQUERYTIMEOUT), queryEnabled);\r\n\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_QUERYDISABLETIME), queryEnabled);\r\n\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_DREFUSE), queryEnabled);\r\n\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_DACCEPT), queryEnabled);\r\n\r\n\t\t\tSetDlgItemText(hwnd, IDC_SERVICE_COMMANDLINE, _this->service_commandline);\r\n\t\t\tSetDlgItemText(hwnd, IDC_EDITQUERYTEXT, _this->accept_reject_mesg);\r\n\r\n\r\n\t\t\tchar timeout[128];\r\n\t\t\tUINT t = _this->m_server->QueryTimeout();\r\n\t\t\tsprintf_s(timeout, \"%d\", (int)t);\r\n\t\t    SetDlgItemText(hwnd, IDQUERYTIMEOUT, (const char *) timeout);\r\n\r\n\t\t\tchar disableTime[128];\r\n\t\t\tUINT tt = _this->m_server->QueryDisableTime();\r\n\t\t\tsprintf_s(disableTime, \"%d\", (int)tt);\r\n\t\t    SetDlgItemText(hwnd, IDC_QUERYDISABLETIME, (const char *) disableTime);\r\n\r\n\t\t\t_this->ExpandBox(hwnd, !_this->m_bExpanded);\r\n\t\t\tSendMessage(GetDlgItem(hwnd, IDC_BUTTON_EXPAND), BM_SETIMAGE, (WPARAM)IMAGE_BITMAP, (LPARAM)_this->hBmpExpand);\r\n\r\n\t\t\tSetForegroundWindow(hwnd);\r\n\r\n\t\t\treturn FALSE; // Because we've set the focus\r\n\t\t}\r\n\r\n\tcase WM_COMMAND:\r\n\t\tswitch (LOWORD(wParam))\r\n\t\t{\r\n\t\tcase IDC_SHOWOPTIONS:\r\n\t\tcase IDC_BUTTON_EXPAND:\r\n\t\t\t_this->ExpandBox(hwnd, !_this->m_bExpanded);\r\n//\t\t\tif (_this->m_bExpanded)\r\n//\t\t\t\t_this->InitTab(hwnd);\r\n\t\t\treturn TRUE;\r\n\t\tcase IDOK:\r\n\t\tcase IDC_APPLY:\r\n\t\t\t{\r\n\t\t\t\tchar path[512];\r\n\t\t\t\tint lenpath = GetDlgItemText(hwnd, IDC_EDIT_PATH, (LPSTR) &path, 512);\r\n\t\t\t\tif (lenpath != 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvnclog.SetPath(path);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tstrcpy_s(path,\"\");\r\n\t\t\t\t\tvnclog.SetPath(path);\r\n\t\t\t\t}\r\n\t\t\t\tbool Secure_old = _this->m_server->Secure();\r\n\t\t\t\tHWND hSecure = GetDlgItem(hwnd, IDC_SAVEPASSWORDSECURE);\r\n\t\t\t\t_this->m_server->Secure(SendMessage(hSecure, BM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\r\n\t\t\t\t// Save the password\r\n\t\t\t\tchar passwd[MAXPWLEN+1];\r\n\t\t\t\tchar passwd2[MAXPWLEN+1];\r\n\t\t\t\tmemset(passwd, '\\0', MAXPWLEN + 1); //PGM\r\n\t\t\t\tmemset(passwd2, '\\0', MAXPWLEN + 1); //PGM\r\n\t\t\t\t// TightVNC method\r\n\t\t\t\tint lenPassword = GetDlgItemText(hwnd, IDC_PASSWORD, (LPSTR) &passwd, MAXPWLEN+1);\t\t\t\t\r\n\t\t\t\tint lenPassword2 = GetDlgItemText(hwnd, IDC_PASSWORD2, (LPSTR)&passwd2, MAXPWLEN + 1); //PGM\r\n\r\n                bool bSecure = _this->m_server->Secure() ? true : false;\r\n\t\t\t\tif (Secure_old != bSecure) {\r\n\t\t\t\t\t//We changed the method to save the password\r\n\t\t\t\t\t//load passwords and encrypt the other method\r\n\t\t\t\t\tchar password[MAXPWLEN];\r\n\t\t\t\t\tchar password2[MAXPWLEN];\r\n\t\t\t\t\t_this->m_server->GetPassword(password);\r\n\t\t\t\t\tvncPasswd::ToText plain(password, Secure_old);\r\n\t\t\t\t\t_this->m_server->GetPassword2(password2);\r\n\t\t\t\t\tvncPasswd::ToText plain2(password2, Secure_old);\r\n\t\t\t\t\tmemset(passwd, '\\0', MAXPWLEN + 1); //PGM\r\n\t\t\t\t\tmemset(passwd2, '\\0', MAXPWLEN + 1); //PGM\r\n\t\t\t\t\tstrcpy_s(passwd,plain);\r\n\t\t\t\t\tstrcpy_s(passwd2, plain2);\r\n\t\t\t\t\tlenPassword = (int)strlen(passwd);\r\n\t\t\t\t\tlenPassword2 = (int)strlen(passwd2);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (strcmp(passwd, \"~~~~~~~~\") != 0) {\r\n\t\t\t\t\tif (lenPassword == 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvncPasswd::FromClear crypt(_this->m_server->Secure());\r\n\t\t\t\t\t\t_this->m_server->SetPassword(crypt);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvncPasswd::FromText crypt(passwd, _this->m_server->Secure());\r\n\t\t\t\t\t\t_this->m_server->SetPassword(crypt);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\r\n\t\t\t\tif (strcmp(passwd2, \"~~~~~~~~\") != 0) { //PGM\r\n\t\t\t\t\tif (lenPassword2 == 0) //PGM\r\n\t\t\t\t\t{ //PGM\r\n\t\t\t\t\t\tvncPasswd::FromClear crypt2(_this->m_server->Secure()); //PGM\r\n\t\t\t\t\t\t_this->m_server->SetPassword2(crypt2); //PGM\r\n\t\t\t\t\t} //PGM\r\n\t\t\t\t\telse //PGM\r\n\t\t\t\t\t{ //PGM\r\n\t\t\t\t\t\tvncPasswd::FromText crypt2(passwd2, _this->m_server->Secure()); //PGM\r\n\t\t\t\t\t\t_this->m_server->SetPassword2(crypt2); //PGM\r\n\t\t\t\t\t} //PGM\r\n\t\t\t\t} //PGM\r\n\r\n\r\n\t\t\t\t//avoid readonly and full passwd being set the same\r\n\t\t\t\tif (strcmp(passwd, \"~~~~~~~~\") != 0 && strcmp(passwd2, \"~~~~~~~~\") != 0) { \r\n\t\t\t\t\tif (strcmp(passwd,passwd2)==0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tMessageBox(NULL,\"View only and full password are the same\\nView only ignored\",\"Warning\",0);\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t} \r\n\r\n\t\t\t\t// Save the new settings to the server\r\n\t\t\t\tint state = (int)SendDlgItemMessage(hwnd, IDC_PORTNO_AUTO, BM_GETCHECK, 0, 0);\r\n\t\t\t\t_this->m_server->SetAutoPortSelect(state == BST_CHECKED);\r\n\r\n\t\t\t\t// Save port numbers if we're not auto selecting\r\n\t\t\t\tif (!_this->m_server->AutoPortSelect()) {\r\n\t\t\t\t\tif ( SendDlgItemMessage(hwnd, IDC_SPECDISPLAY,\r\n\t\t\t\t\t\t\t\t\t\t\tBM_GETCHECK, 0, 0) == BST_CHECKED ) {\r\n\t\t\t\t\t\t// Display number was specified\r\n\t\t\t\t\t\tBOOL ok;\r\n\t\t\t\t\t\tUINT display = GetDlgItemInt(hwnd, IDC_DISPLAYNO, &ok, TRUE);\r\n\t\t\t\t\t\tif (ok)\r\n\t\t\t\t\t\t\t_this->m_server->SetPorts(DISPLAY_TO_PORT(display),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  DISPLAY_TO_HPORT(display));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Assuming that port numbers were specified\r\n\t\t\t\t\t\tBOOL ok1, ok2;\r\n\t\t\t\t\t\tUINT port_rfb = GetDlgItemInt(hwnd, IDC_PORTRFB, &ok1, TRUE);\r\n\t\t\t\t\t\tUINT port_http = GetDlgItemInt(hwnd, IDC_PORTHTTP, &ok2, TRUE);\r\n\t\t\t\t\t\tif (ok1 && ok2)\r\n\t\t\t\t\t\t\t_this->m_server->SetPorts(port_rfb, port_http);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tHWND hConnectSock = GetDlgItem(hwnd, IDC_CONNECT_SOCK);\r\n\t\t\t\t_this->m_server->SockConnect(\r\n\t\t\t\t\tSendMessage(hConnectSock, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t// Update display/port controls on pressing the \"Apply\" button\r\n\t\t\t\tif (LOWORD(wParam) == IDC_APPLY)\r\n\t\t\t\t\t_this->InitPortSettings(hwnd);\r\n\r\n\t\t\t\t\r\n\r\n\t\t\t\tHWND hConnectHTTP = GetDlgItem(hwnd, IDC_CONNECT_HTTP);\r\n\t\t\t\t_this->m_server->EnableHTTPConnect(\r\n\t\t\t\t\tSendMessage(hConnectHTTP, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t\t);\r\n\t\t\t\t\r\n\t\t\t\t// Remote input stuff\r\n\t\t\t\tHWND hEnableRemoteInputs = GetDlgItem(hwnd, IDC_DISABLE_INPUTS);\r\n\t\t\t\t_this->m_server->EnableRemoteInputs(\r\n\t\t\t\t\tSendMessage(hEnableRemoteInputs, BM_GETCHECK, 0, 0) != BST_CHECKED\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t// Local input stuff\r\n\t\t\t\tHWND hDisableLocalInputs = GetDlgItem(hwnd, IDC_DISABLE_LOCAL_INPUTS);\r\n\t\t\t\t_this->m_server->DisableLocalInputs(\r\n\t\t\t\t\tSendMessage(hDisableLocalInputs, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t// japanese keyboard\r\n\t\t\t\tHWND hJapInputs = GetDlgItem(hwnd, IDC_JAP_INPUTS);\r\n\t\t\t\t_this->m_server->EnableJapInput(\r\n\t\t\t\t\tSendMessage(hJapInputs, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t// japanese keyboard\r\n\t\t\t\tHWND hUnicodeInputs = GetDlgItem(hwnd, IDC_UNICODE_INPUTS);\r\n\t\t\t\t_this->m_server->EnableUnicodeInput(\r\n\t\t\t\t\tSendMessage(hUnicodeInputs, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\tHWND hwinhelper = GetDlgItem(hwnd, IDC_WIN8_HELPER);\r\n\t\t\t\t_this->m_server->Win8HelperEnabled(\r\n\t\t\t\t\tSendMessage(hwinhelper, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t// Wallpaper handling\r\n\t\t\t\tHWND hRemoveWallpaper = GetDlgItem(hwnd, IDC_REMOVE_WALLPAPER);\r\n\t\t\t\t_this->m_server->EnableRemoveWallpaper(\r\n\t\t\t\t\tSendMessage(hRemoveWallpaper, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t// Lock settings handling\r\n\t\t\t\tif (SendMessage(GetDlgItem(hwnd, IDC_LOCKSETTING_LOCK), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->SetLockSettings(1);\r\n\t\t\t\t} else if (SendMessage(GetDlgItem(hwnd, IDC_LOCKSETTING_LOGOFF), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->SetLockSettings(2);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_this->m_server->SetLockSettings(0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (SendMessage(GetDlgItem(hwnd, IDC_RADIONOTIFICATIONON), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->setNotificationSelection(0);\r\n\t\t\t\t}\r\n\t\t\t\telse if (SendMessage(GetDlgItem(hwnd, IDC_RADIONOTIFICATIONIFPROVIDED), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->setNotificationSelection(1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (SendMessage(GetDlgItem(hwnd, IDC_DREFUSE), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->SetQueryAccept(0);\r\n\t\t\t\t} else if (SendMessage(GetDlgItem(hwnd, IDC_DACCEPT), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->SetQueryAccept(1);\r\n\t\t\t\t} \r\n\r\n\t\t\t\tif (SendMessage(GetDlgItem(hwnd, IDC_MAXREFUSE), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->setMaxViewerSetting(0);\r\n\t\t\t\t}\r\n\t\t\t\telse if (SendMessage(GetDlgItem(hwnd, IDC_MAXDISCONNECT), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->setMaxViewerSetting(1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchar maxViewerChar[256];\r\n\t\t\t\tstrcpy_s(maxViewerChar, \"128\");\t\t\t\t\r\n\t\t\t\tif (GetDlgItemText(hwnd, IDC_MAXVIEWERS, (LPSTR)&maxViewerChar, 256) == 0) {\r\n\t\t\t\t\tint value = atoi(maxViewerChar);\r\n\t\t\t\t\tif (value > 128) \r\n\t\t\t\t\t\tvalue = 128;\r\n\t\t\t\t\t_this->m_server->setMaxViewers(value);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\t_this->m_server->setMaxViewers(atoi(maxViewerChar));\r\n\r\n\t\t\t\tHWND hCollabo = GetDlgItem(hwnd, IDC_COLLABO);\r\n\t\t\t\t_this->m_server->setCollabo(\r\n\t\t\t\t\tSendMessage(hCollabo, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\tHWND hwndDlg = GetDlgItem(hwnd, IDC_FRAME);\r\n\t\t\t\t_this->m_server->setFrame(\r\n\t\t\t\t\tSendMessage(hwndDlg, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t);\r\n\r\n\t\t\t\thwndDlg = GetDlgItem(hwnd, IDC_NOTIFOCATION);\r\n\t\t\t\t_this->m_server->setNotification(\r\n\t\t\t\t\tSendMessage(hwndDlg, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t);\r\n\r\n\t\t\t\thwndDlg = GetDlgItem(hwnd, IDC_OSD);\r\n\t\t\t\t_this->m_server->setOSD(\r\n\t\t\t\t\tSendMessage(hwndDlg, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (SendMessage(GetDlgItem(hwnd, IDC_MV1), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->SetConnectPriority(0);\r\n\t\t\t\t} else if (SendMessage(GetDlgItem(hwnd, IDC_MV2), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->SetConnectPriority(1);\r\n\t\t\t\t} \r\n\t\t\t\t else if (SendMessage(GetDlgItem(hwnd, IDC_MV3), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->SetConnectPriority(2);\r\n\t\t\t\t} else if (SendMessage(GetDlgItem(hwnd, IDC_MV4), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->SetConnectPriority(3);\r\n\t\t\t\t} \r\n\t\t\t\t\r\n\t\t\t\t// Modif sf@2002 - v1.1.0\r\n\t\t\t\tHWND hFileTransfer = GetDlgItem(hwnd, IDC_FILETRANSFER);\r\n\t\t\t\t_this->m_server->EnableFileTransfer(SendMessage(hFileTransfer, BM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\r\n\t\t\t\tHWND hFileTransferUserImp = GetDlgItem(hwnd, IDC_FTUSERIMPERSONATION_CHECK);\r\n\t\t\t\t_this->m_server->FTUserImpersonation(SendMessage(hFileTransferUserImp, BM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\r\n\t\t\t\tHWND hBlank = GetDlgItem(hwnd, IDC_BLANK);\r\n\t\t\t\t_this->m_server->BlankMonitorEnabled(SendMessage(hBlank, BM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\t\t\t\tHWND hBlank2 = GetDlgItem(hwnd, IDC_BLANK2); //PGM\r\n\t\t\t\t_this->m_server->BlankInputsOnly(SendMessage(hBlank2, BM_GETCHECK, 0, 0) == BST_CHECKED); //PGM\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t_this->m_server->SetLoopbackOk(IsDlgButtonChecked(hwnd, IDC_ALLOWLOOPBACK));\r\n#ifdef IPV6V4\r\n\t\t\t\t_this->m_server->SetIPV6(IsDlgButtonChecked(hwnd, IDC_IPV6));\r\n#endif\r\n\t\t\t\t_this->m_server->SetLoopbackOnly(IsDlgButtonChecked(hwnd, IDC_LOOPBACKONLY));\r\n\r\n\t\t\t\t_this->m_server->SetDisableTrayIcon(IsDlgButtonChecked(hwnd, IDC_DISABLETRAY));\r\n\t\t\t\t_this->m_server->SetRdpmode(IsDlgButtonChecked(hwnd, IDC_RDPMODE));\r\n\t\t\t\t_this->m_server->SetNoScreensaver(IsDlgButtonChecked(hwnd, IDC_NOSCREENSAVER));\r\n\t\t\t\t_this->m_allowshutdown=!IsDlgButtonChecked(hwnd, IDC_ALLOWSHUTDOWN);\r\n\t\t\t\t_this->m_alloweditclients=!IsDlgButtonChecked(hwnd, IDC_ALLOWEDITCLIENTS);\r\n\t\t\t\t_this->m_server->SetAllowEditClients(_this->m_alloweditclients);\r\n\t\t\t\tif (IsDlgButtonChecked(hwnd, IDC_LOG))\r\n\t\t\t\t{\r\n\t\t\t\t\tvnclog.SetMode(2);\r\n\t\t\t\t\tvnclog.SetLevel(10);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tvnclog.SetMode(0);\r\n\t\t\t\t}\r\n\t\t\t\tif (IsDlgButtonChecked(hwnd, IDC_VIDEO))\r\n\t\t\t\t{\r\n\t\t\t\t\tvnclog.SetVideo(true);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tvnclog.SetVideo(false);\r\n\t\t\t\t}\r\n\t\t\t\t// Modif sf@2002 - v1.1.0\r\n\t\t\t\t// Marscha@2004 - authSSP: moved MS-Logon checkbox back to admin props page\r\n\t\t\t\t// added New MS-Logon checkbox\t\t\t\t\r\n\r\n\t\t\t\tHWND hMSLogon = GetDlgItem(hwnd, IDC_MSLOGON_CHECKD);\r\n\t\t\t\t_this->m_server->RequireMSLogon(SendMessage(hMSLogon, BM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\t\t\t\t\r\n\t\t\t\tHWND hNewMSLogon = GetDlgItem(hwnd, IDC_NEW_MSLOGON);\r\n\t\t\t\t_this->m_server->SetNewMSLogon(SendMessage(hNewMSLogon, BM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\t\t\t\t// Marscha@2004 - authSSP: end of change\r\n\r\n\t\t\t\tHWND hReverseAuth = GetDlgItem(hwnd, IDC_REVERSEAUTH);\r\n\t\t\t\t_this->m_server->SetReverseAuthRequired(SendMessage(hReverseAuth, BM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\r\n\t\t\t\tint nDScale = GetDlgItemInt(hwnd, IDC_SCALE, NULL, FALSE);\r\n\t\t\t\tif (nDScale < 1 || nDScale > 9) nDScale = 1;\r\n\t\t\t\t_this->m_server->SetDefaultScale(nDScale);\r\n\t\t\t\t\r\n\t\t\t\t// sf@2002 - DSM Plugin loading\r\n\t\t\t\t// If Use plugin is checked, load the plugin if necessary\r\n\t\t\t\tif (SendMessage(GetDlgItem(hwnd, IDC_PLUGIN_CHECK), BM_GETCHECK, 0, 0) == BST_CHECKED)\r\n\t\t\t\t{\r\n\t\t\t\t\tTCHAR szPlugin[MAX_PATH];\r\n\t\t\t\t\tGetDlgItemText(hwnd, IDC_PLUGINS_COMBO, szPlugin, MAX_PATH);\r\n\t\t\t\t\t_this->m_server->SetDSMPluginName(szPlugin);\r\n\t\t\t\t\t_this->m_server->EnableDSMPlugin(true);\r\n\t\t\t\t}\r\n\t\t\t\telse // If Use plugin unchecked but the plugin is loaded, unload it\r\n\t\t\t\t{\r\n\t\t\t\t\t_this->m_server->EnableDSMPlugin(false);\r\n\t\t\t\t\tif (_this->m_server->GetDSMPluginPointer()->IsLoaded())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t_this->m_server->GetDSMPluginPointer()->UnloadPlugin();\r\n\t\t\t\t\t\t_this->m_server->GetDSMPluginPointer()->SetEnabled(false);\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//adzm 2010-05-12 - dsmplugin config\r\n\t\t\t\t_this->m_server->SetDSMPluginConfig(_this->m_pref_DSMPluginConfig);\r\n\r\n\t\t\t\t// Query Window options - Taken from TightVNC advanced properties\r\n\t\t\t\tchar timeout[256];\r\n\t\t\t\tstrcpy_s(timeout,\"5\");\r\n\t\t\t\tif (GetDlgItemText(hwnd, IDQUERYTIMEOUT, (LPSTR) &timeout, 256) == 0)\r\n\t\t\t\t    _this->m_server->SetQueryTimeout(atoi(timeout));\r\n\t\t\t\telse\r\n\t\t\t\t    _this->m_server->SetQueryTimeout(atoi(timeout));\r\n\r\n\t\t\t\tchar disabletime[256];\r\n\t\t\t\tstrcpy_s(disabletime,\"5\");\r\n\t\t\t\tif (GetDlgItemText(hwnd, IDC_QUERYDISABLETIME, (LPSTR) &disabletime, 256) == 0)\r\n\t\t\t\t    _this->m_server->SetQueryDisableTime(atoi(disabletime));\r\n\t\t\t\telse\r\n\t\t\t\t    _this->m_server->SetQueryDisableTime(atoi(disabletime));\r\n\r\n\t\t\t\tGetDlgItemText(hwnd, IDC_SERVICE_COMMANDLINE, _this->service_commandline, 1024);\r\n\t\t\t\tGetDlgItemText(hwnd, IDC_EDITQUERYTEXT, _this->accept_reject_mesg, 512);\r\n\r\n\r\n\t\t\t\tHWND hQuery = GetDlgItem(hwnd, IDQUERY);\r\n\t\t\t\t_this->m_server->SetQuerySetting((SendMessage(hQuery, BM_GETCHECK, 0, 0) == BST_CHECKED) ? 4 : 2);\r\n\r\n\t\t\t\t// And to the registry\r\n\r\n\t\t\t\t/*if (!RunningAsAdministrator () && vncService::RunningAsService())\r\n\t\t\t\t{\r\n\t\t\t\t\tMessageBoxSecure(NULL,\"Only admins are allowed to save\",\"Warning\", MB_OK | MB_ICONINFORMATION);\r\n\t\t\t\t}\r\n\t\t\t\telse*/\r\n\t\t\t\t{\r\n\t\t\t\t// Load the settings\r\n\t\t\t\tif (_this->m_fUseRegistry)\r\n\t\t\t\t\t_this->Save();\r\n\t\t\t\telse\r\n\t\t\t\t\t_this->SaveToIniFile();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Was ok pressed?\r\n\t\t\t\tif (LOWORD(wParam) == IDOK)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Yes, so close the dialog\r\n\t\t\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"enddialog (OK)\\n\"));\r\n\r\n\t\t\t\t\t_this->m_returncode_valid = TRUE;\r\n\r\n\t\t\t\t\tEndDialog(hwnd, IDOK);\r\n\t\t\t\t\t_this->m_dlgvisible = FALSE;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_this->m_server->SetHookings();\r\n\r\n\t\t\t\treturn TRUE;\r\n\t\t\t}\r\n\r\n\t\tcase IDCANCEL:\r\n\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"enddialog (CANCEL)\\n\"));\r\n\r\n\t\t\t_this->m_returncode_valid = TRUE;\r\n\r\n\t\t\tEndDialog(hwnd, IDCANCEL);\r\n\t\t\t_this->m_dlgvisible = FALSE;\r\n\t\t\treturn TRUE;\r\n\r\n\t    // Added Jef Fix - 5 March 2008 paquette@atnetsend.net\r\n        case IDC_BLANK:\r\n            {\r\n                // only enable alpha blanking if blanking is enabled\r\n                HWND hBlank = ::GetDlgItem(hwnd, IDC_BLANK);               \r\n                HWND hBlank2 = ::GetDlgItem(hwnd, IDC_BLANK2); //PGM\r\n                ::EnableWindow(hBlank2, ::SendMessage(hBlank, BM_GETCHECK, 0, 0) == BST_CHECKED); //PGM\r\n            }\r\n            break;\r\n\r\n        case IDC_BLANK2: //PGM\r\n            { //PGM\r\n                // only enable alpha blanking if Disable Only Inputs is disabled //PGM\r\n                HWND hBlank = ::GetDlgItem(hwnd, IDC_BLANK2); //PGM              \r\n            } //PGM\r\n            break; //PGM\r\n\r\n\t\tcase IDC_VIDEO:\r\n\t\t\t{\r\n\t\t\t\tif (IsDlgButtonChecked(hwnd, IDC_VIDEO))\r\n\t\t\t\t   {\r\n\t\t\t\t\t   EnableWindow(GetDlgItem(hwnd, IDC_EDIT_PATH), true);\r\n\t\t\t\t\t   \r\n\t\t\t\t   }\r\n\t\t\t\t   else\r\n\t\t\t\t   {\r\n\t\t\t\t\t   EnableWindow(GetDlgItem(hwnd, IDC_EDIT_PATH), false);\r\n\t\t\t\t\t   \r\n\t\t\t\t   }\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\tcase IDC_CLEAR:\r\n\t\t\t{\r\n\t\t\t\tvnclog.ClearAviConfig();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\tcase IDC_CONNECT_SOCK:\r\n\t\t\t// TightVNC 1.2.7 method\r\n\t\t\t// The user has clicked on the socket connect tickbox\r\n\t\t\t{\r\n\t\t\t\tBOOL bConnectSock =\r\n\t\t\t\t\t(SendDlgItemMessage(hwnd, IDC_CONNECT_SOCK,\r\n\t\t\t\t\t\t\t\t\t\tBM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PASSWORD), bConnectSock);\r\n\r\n\t\t\t\tHWND hPortNoAuto = GetDlgItem(hwnd, IDC_PORTNO_AUTO);\r\n\t\t\t\tEnableWindow(hPortNoAuto, bConnectSock);\r\n\t\t\t\tHWND hSpecDisplay = GetDlgItem(hwnd, IDC_SPECDISPLAY);\r\n\t\t\t\tEnableWindow(hSpecDisplay, bConnectSock);\r\n\t\t\t\tHWND hSpecPort = GetDlgItem(hwnd, IDC_SPECPORT);\r\n\t\t\t\tEnableWindow(hSpecPort, bConnectSock);\r\n\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_DISPLAYNO), bConnectSock &&\r\n\t\t\t\t\t(SendMessage(hSpecDisplay, BM_GETCHECK, 0, 0) == BST_CHECKED));\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PORTRFB), bConnectSock &&\r\n\t\t\t\t\t(SendMessage(hSpecPort, BM_GETCHECK, 0, 0) == BST_CHECKED));\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PORTHTTP), bConnectSock &&\r\n\t\t\t\t\t(SendMessage(hSpecPort, BM_GETCHECK, 0, 0) == BST_CHECKED));\r\n\t\t\t}\r\n\t\t\treturn TRUE;\r\n\r\n\t\t// TightVNC 1.2.7 method\r\n\t\tcase IDC_PORTNO_AUTO:\r\n\t\t\t{\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_DISPLAYNO), FALSE);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PORTRFB), FALSE);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PORTHTTP), FALSE);\r\n\r\n\t\t\t\tSetDlgItemText(hwnd, IDC_DISPLAYNO, \"\");\r\n\t\t\t\tSetDlgItemText(hwnd, IDC_PORTRFB, \"\");\r\n\t\t\t\tSetDlgItemText(hwnd, IDC_PORTHTTP, \"\");\r\n\t\t\t}\r\n\t\t\treturn TRUE;\r\n\r\n\t\tcase IDC_SPECDISPLAY:\r\n\t\t\t{\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_DISPLAYNO), TRUE);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PORTRFB), FALSE);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PORTHTTP), FALSE);\r\n\r\n\t\t\t\tint display = PORT_TO_DISPLAY(_this->m_server->GetPort());\r\n\t\t\t\tif (display < 0 || display > 99)\r\n\t\t\t\t\tdisplay = 0;\r\n\t\t\t\tSetDlgItemInt(hwnd, IDC_DISPLAYNO, display, FALSE);\r\n\t\t\t\tSetDlgItemInt(hwnd, IDC_PORTRFB, _this->m_server->GetPort(), FALSE);\r\n\t\t\t\tSetDlgItemInt(hwnd, IDC_PORTHTTP, _this->m_server->GetHttpPort(), FALSE);\r\n\r\n\r\n\t\t\t\tSetFocus(GetDlgItem(hwnd, IDC_DISPLAYNO));\r\n\t\t\t\tSendDlgItemMessage(hwnd, IDC_DISPLAYNO, EM_SETSEL, 0, (LPARAM)-1);\r\n\t\t\t}\r\n\t\t\treturn TRUE;\r\n\r\n\t\tcase IDC_SPECPORT:\r\n\t\t\t{\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_DISPLAYNO), FALSE);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PORTRFB), TRUE);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PORTHTTP), TRUE);\r\n\r\n\t\t\t\tint d1 = PORT_TO_DISPLAY(_this->m_server->GetPort());\r\n\t\t\t\tint d2 = HPORT_TO_DISPLAY(_this->m_server->GetHttpPort());\r\n\t\t\t\tif (d1 == d2 && d1 >= 0 && d1 <= 99) {\r\n\t\t\t\t\tSetDlgItemInt(hwnd, IDC_DISPLAYNO, d1, FALSE);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tSetDlgItemText(hwnd, IDC_DISPLAYNO, \"\");\r\n\t\t\t\t}\r\n\t\t\t\tSetDlgItemInt(hwnd, IDC_PORTRFB, _this->m_server->GetPort(), FALSE);\r\n\t\t\t\tSetDlgItemInt(hwnd, IDC_PORTHTTP, _this->m_server->GetHttpPort(), FALSE);\r\n\r\n\r\n\t\t\t\tSetFocus(GetDlgItem(hwnd, IDC_PORTRFB));\r\n\t\t\t\tSendDlgItemMessage(hwnd, IDC_PORTRFB, EM_SETSEL, 0, (LPARAM)-1);\r\n\t\t\t}\r\n\t\t\treturn TRUE;\r\n\r\n\t\t// Query window option - Taken from TightVNC advanced properties code\r\n\t\tcase IDQUERY:\r\n\t\t\t{\r\n\t\t\t\tHWND hQuery = GetDlgItem(hwnd, IDQUERY);\r\n\t\t\t\tBOOL queryon = (SendMessage(hQuery, BM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDQUERYTIMEOUT), queryon);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_QUERYDISABLETIME), queryon);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_DREFUSE), queryon);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_DACCEPT), queryon);\r\n\t\t\t}\r\n\t\t\treturn TRUE;\r\n\r\n\t\tcase IDC_STARTREP:\r\n\t\t\t{\r\n\t\t\t\tvncConnDialog *newconn = new vncConnDialog(_this->m_server);\r\n\t\t\t\tif (newconn)\r\n\t\t\t\t{\r\n\t\t\t\t\tnewconn->DoDialog(true);\r\n\t\t\t\t\t// delete newconn; // NO ! Already done in vncConnDialog.\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t// sf@2002 - DSM Plugin\r\n\t\tcase IDC_PLUGIN_CHECK:\r\n\t\t\t{\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PLUGIN_BUTTON),\r\n\t\t\t\t\tSendMessage(GetDlgItem(hwnd, IDC_PLUGIN_CHECK), BM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\t\t\t}\r\n\t\t\treturn TRUE;\r\n\t\t\t// Marscha@2004 - authSSP: moved MSLogon checkbox back to admin props page\r\n\t\t\t// Reason: Different UI for old and new mslogon group config.\r\n\t\tcase IDC_MSLOGON_CHECKD:\r\n\t\t\t{\r\n\t\t\t\tBOOL bMSLogonChecked =\r\n\t\t\t\t(SendDlgItemMessage(hwnd, IDC_MSLOGON_CHECKD,\r\n\t\t\t\t\t\t\t\t\t\tBM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_NEW_MSLOGON), bMSLogonChecked);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_MSLOGON), bMSLogonChecked);\r\n\r\n\t\t\t}\r\n\t\t\treturn TRUE;\r\n\t\tcase IDC_MSLOGON:\r\n\t\t\t{\r\n\t\t\t\t// Marscha@2004 - authSSP: if \"New MS-Logon\" is checked,\r\n\t\t\t\t// call vncEditSecurity from SecurityEditor.dll,\r\n\t\t\t\t// else call \"old\" dialog.\r\n\t\t\t\tBOOL bNewMSLogonChecked =\r\n\t\t\t\t(SendDlgItemMessage(hwnd, IDC_NEW_MSLOGON,\r\n\t\t\t\t\t\t\t\t\t\tBM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\t\t\t\tif (bNewMSLogonChecked) {\r\n\t\t\t\t\tvoid winvncSecurityEditorHelper_as_admin();\r\n\t\t\t\t\t\tHANDLE hProcess,hPToken;\r\n\t\t\t\t\t\tDWORD id = vncService::GetExplorerLogonPid();\r\n\t\t\t\t\t\tif (id!=0) \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\thProcess = OpenProcess(MAXIMUM_ALLOWED,FALSE,id);\r\n\t\t\t\t\t\t\tif (!hProcess) goto error;\r\n\t\t\t\t\t\t\tif(!OpenProcessToken(hProcess,TOKEN_ADJUST_PRIVILEGES|TOKEN_QUERY\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t|TOKEN_DUPLICATE|TOKEN_ASSIGN_PRIMARY|TOKEN_ADJUST_SESSIONID\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t|TOKEN_READ|TOKEN_WRITE,&hPToken)) break;\r\n\r\n\t\t\t\t\t\t\tchar dir[MAX_PATH];\r\n\t\t\t\t\t\t\tchar exe_file_name[MAX_PATH];\r\n\t\t\t\t\t\t\tGetModuleFileName(0, exe_file_name, MAX_PATH);\r\n\t\t\t\t\t\t\tstrcpy_s(dir, exe_file_name);\r\n\t\t\t\t\t\t\tstrcat_s(dir, \" -securityeditorhelper\");\r\n\t\t\t\t\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tSTARTUPINFO          StartUPInfo;\r\n\t\t\t\t\t\t\t\tPROCESS_INFORMATION  ProcessInfo;\r\n\t\t\t\t\t\t\t\tZeroMemory(&StartUPInfo,sizeof(STARTUPINFO));\r\n\t\t\t\t\t\t\t\tZeroMemory(&ProcessInfo,sizeof(PROCESS_INFORMATION));\r\n\t\t\t\t\t\t\t\tStartUPInfo.wShowWindow = SW_SHOW;\r\n\t\t\t\t\t\t\t\tStartUPInfo.lpDesktop = \"Winsta0\\\\Default\";\r\n\t\t\t\t\t\t\t\tStartUPInfo.cb = sizeof(STARTUPINFO);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tCreateProcessAsUser(hPToken,NULL,dir,NULL,NULL,FALSE,DETACHED_PROCESS,NULL,NULL,&StartUPInfo,&ProcessInfo);\r\n\t\t\t\t\t\t\t\tDWORD errorcode=GetLastError();\r\n                                if (ProcessInfo.hThread) CloseHandle(ProcessInfo.hThread);\r\n                                if (ProcessInfo.hProcess) CloseHandle(ProcessInfo.hProcess);\r\n\t\t\t\t\t\t\t\tif (errorcode == 1314) goto error;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\terror:\r\n\t\t\t\t\t\t\t\t\t\twinvncSecurityEditorHelper_as_admin();\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t} else { \r\n\t\t\t\t\t// Marscha@2004 - authSSP: end of change\r\n\t\t\t\t\t_this->m_vncauth.Init(_this->m_server);\r\n\t\t\t\t\t_this->m_vncauth.SetTemp(_this->m_Tempfile);\r\n\t\t\t\t\t_this->m_vncauth.Show(TRUE);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn TRUE;\r\n\t\tcase IDC_CHECKDRIVER:\r\n\t\t\t{\r\n\t\t\t\tCheckVideoDriver(1);\r\n\t\t\t}\r\n\t\t\treturn TRUE;\r\n\t\tcase IDC_PLUGIN_BUTTON:\r\n\t\t\t{\r\n\t\t\t\tHWND hPlugin = GetDlgItem(hwnd, IDC_PLUGIN_CHECK);\r\n\t\t\t\tif (SendMessage(hPlugin, BM_GETCHECK, 0, 0) == BST_CHECKED)\r\n\t\t\t\t{\r\n\t\t\t\t\tTCHAR szPlugin[MAX_PATH];\r\n\t\t\t\t\tGetDlgItemText(hwnd, IDC_PLUGINS_COMBO, szPlugin, MAX_PATH);\r\n\t\t\t\t\tif (!_this->m_server->GetDSMPluginPointer()->IsLoaded())\r\n\t\t\t\t\t\t_this->m_server->GetDSMPluginPointer()->LoadPlugin(szPlugin, false);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// sf@2003 - We check if the loaded plugin is the same than\r\n\t\t\t\t\t\t// the currently selected one or not\r\n\t\t\t\t\t\t_this->m_server->GetDSMPluginPointer()->DescribePlugin();\r\n\t\t\t\t\t\tif (_stricmp(_this->m_server->GetDSMPluginPointer()->GetPluginFileName(), szPlugin))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t_this->m_server->GetDSMPluginPointer()->UnloadPlugin();\r\n\t\t\t\t\t\t\t_this->m_server->GetDSMPluginPointer()->LoadPlugin(szPlugin, false);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\tif (_this->m_server->GetDSMPluginPointer()->IsLoaded())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tSecure_Save_Plugin_Config(szPlugin);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tMessageBoxSecure(NULL, \r\n\t\t\t\t\t\t\tsz_ID_PLUGIN_NOT_LOAD, \r\n\t\t\t\t\t\t\tsz_ID_PLUGIN_LOADIN, MB_OK | MB_ICONEXCLAMATION );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\treturn TRUE;\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n\r\n\r\n// TightVNC 1.2.7\r\n// Set display/port settings to the correct state\r\nvoid\r\nvncProperties::InitPortSettings(HWND hwnd)\r\n{\r\n\tBOOL bConnectSock = m_server->SockConnected();\r\n\tBOOL bAutoPort = m_server->AutoPortSelect();\r\n\tUINT port_rfb = m_server->GetPort();\r\n\tUINT port_http = m_server->GetHttpPort();\r\n\tint d1 = PORT_TO_DISPLAY(port_rfb);\r\n\tint d2 = HPORT_TO_DISPLAY(port_http);\r\n\tBOOL bValidDisplay = (d1 == d2 && d1 >= 0 && d1 <= 99);\r\n\r\n\tCheckDlgButton(hwnd, IDC_PORTNO_AUTO,\r\n\t\t(bAutoPort) ? BST_CHECKED : BST_UNCHECKED);\r\n\tCheckDlgButton(hwnd, IDC_SPECDISPLAY,\r\n\t\t(!bAutoPort && bValidDisplay) ? BST_CHECKED : BST_UNCHECKED);\r\n\tCheckDlgButton(hwnd, IDC_SPECPORT,\r\n\t\t(!bAutoPort && !bValidDisplay) ? BST_CHECKED : BST_UNCHECKED);\r\n\r\n\tEnableWindow(GetDlgItem(hwnd, IDC_PORTNO_AUTO), bConnectSock);\r\n\tEnableWindow(GetDlgItem(hwnd, IDC_SPECDISPLAY), bConnectSock);\r\n\tEnableWindow(GetDlgItem(hwnd, IDC_SPECPORT), bConnectSock);\r\n\r\n\tif (bValidDisplay) {\r\n\t\tSetDlgItemInt(hwnd, IDC_DISPLAYNO, d1, FALSE);\r\n\t} else {\r\n\t\tSetDlgItemText(hwnd, IDC_DISPLAYNO, \"\");\r\n\t}\r\n\tSetDlgItemInt(hwnd, IDC_PORTRFB, port_rfb, FALSE);\r\n\tSetDlgItemInt(hwnd, IDC_PORTHTTP, port_http, FALSE);\r\n\r\n\tEnableWindow(GetDlgItem(hwnd, IDC_DISPLAYNO),\r\n\t\tbConnectSock && !bAutoPort && bValidDisplay);\r\n\tEnableWindow(GetDlgItem(hwnd, IDC_PORTRFB),\r\n\t\tbConnectSock && !bAutoPort && !bValidDisplay);\r\n\tEnableWindow(GetDlgItem(hwnd, IDC_PORTHTTP),\r\n\t\tbConnectSock && !bAutoPort && !bValidDisplay);\r\n}\r\n\r\n\r\n// Functions to load & save the settings\r\nLONG\r\nvncProperties::LoadInt(HKEY key, LPCSTR valname, LONG defval)\r\n{\r\n\tLONG pref;\r\n\tULONG type = REG_DWORD;\r\n\tULONG prefsize = sizeof(pref);\r\n\r\n\tif (RegQueryValueEx(key,\r\n\t\tvalname,\r\n\t\tNULL,\r\n\t\t&type,\r\n\t\t(LPBYTE) &pref,\r\n\t\t&prefsize) != ERROR_SUCCESS)\r\n\t\treturn defval;\r\n\r\n\tif (type != REG_DWORD)\r\n\t\treturn defval;\r\n\r\n\tif (prefsize != sizeof(pref))\r\n\t\treturn defval;\r\n\r\n\treturn pref;\r\n}\r\n\r\nvoid\r\nvncProperties::LoadPassword(HKEY key, char *buffer)\r\n{\r\n\tDWORD type = REG_BINARY;\r\n\tint slen=MAXPWLEN;\r\n\tchar inouttext[MAXPWLEN];\r\n\r\n\t// Retrieve the encrypted password\r\n\tif (RegQueryValueEx(key,\r\n\t\t\"Password\",\r\n\t\tNULL,\r\n\t\t&type,\r\n\t\t(LPBYTE) &inouttext,\r\n\t\t(LPDWORD) &slen) != ERROR_SUCCESS)\r\n\t\treturn;\r\n\r\n\tif (slen > MAXPWLEN)\r\n\t\treturn;\r\n\r\n\tmemcpy(buffer, inouttext, MAXPWLEN);\r\n}\r\n\r\nvoid //PGM\r\nvncProperties::LoadPassword2(HKEY key, char *buffer) //PGM\r\n{ //PGM\r\n\tDWORD type = REG_BINARY; //PGM\r\n\tint slen=MAXPWLEN; //PGM\r\n\tchar inouttext[MAXPWLEN]; //PGM\r\n\r\n\t// Retrieve the encrypted password //PGM\r\n\tif (RegQueryValueEx(key, //PGM\r\n\t\t\"Password2\", //PGM\r\n\t\tNULL, //PGM\r\n\t\t&type, //PGM\r\n\t\t(LPBYTE) &inouttext, //PGM\r\n\t\t(LPDWORD) &slen) != ERROR_SUCCESS) //PGM\r\n\t\treturn; //PGM\r\n\r\n\tif (slen > MAXPWLEN) //PGM\r\n\t\treturn; //PGM\r\n\r\n\tmemcpy(buffer, inouttext, MAXPWLEN); //PGM\r\n} //PGM\r\n\r\nchar *\r\nvncProperties::LoadString(HKEY key, LPCSTR keyname)\r\n{\r\n\tDWORD type = REG_SZ;\r\n\tDWORD buflen = 0;\r\n\tBYTE *buffer = 0;\r\n\r\n\t// Get the length of the AuthHosts string\r\n\tif (RegQueryValueEx(key,\r\n\t\tkeyname,\r\n\t\tNULL,\r\n\t\t&type,\r\n\t\tNULL,\r\n\t\t&buflen) != ERROR_SUCCESS)\r\n\t\treturn 0;\r\n\r\n\tif (type != REG_SZ)\r\n\t\treturn 0;\r\n\tbuffer = new BYTE[buflen];\r\n\tif (buffer == 0)\r\n\t\treturn 0;\r\n\r\n\t// Get the AuthHosts string data\r\n\tif (RegQueryValueEx(key,\r\n\t\tkeyname,\r\n\t\tNULL,\r\n\t\t&type,\r\n\t\tbuffer,\r\n\t\t&buflen) != ERROR_SUCCESS) {\r\n\t\tdelete [] buffer;\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t// Verify the type\r\n\tif (type != REG_SZ) {\r\n\t\tdelete [] buffer;\r\n\t\treturn 0;\r\n\t}\r\n\r\n\treturn (char *)buffer;\r\n}\r\n\r\n\r\nvoid\r\nvncProperties::ResetRegistry()\r\n{\t\r\n\tchar username[UNLEN+1];\r\n\tHKEY hkLocal, hkLocalUser, hkDefault;\r\n\tDWORD dw;\r\n\r\n\tif (!vncService::CurrentUser((char *)&username, sizeof(username)))\r\n\t\treturn;\r\n\r\n\t// If there is no user logged on them default to SYSTEM\r\n\tif (strcmp(username, \"\") == 0)\r\n\t\tstrcpy_s((char *)&username, UNLEN+1, \"SYSTEM\");\r\n\r\n\t// Try to get the machine registry key for WinVNC\r\n\tif (RegCreateKeyEx(HKEY_LOCAL_MACHINE,\r\n\t\tWINVNC_REGISTRY_KEY,\r\n\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\tKEY_READ, NULL, &hkLocal, &dw) != ERROR_SUCCESS)\r\n\t\t{\r\n\t\thkLocalUser=NULL;\r\n\t\thkDefault=NULL;\r\n\t\tgoto LABELUSERSETTINGS;\r\n\t\t}\r\n\r\n\t// Now try to get the per-user local key\r\n\tif (RegOpenKeyEx(hkLocal,\r\n\t\tusername,\r\n\t\t0, KEY_READ,\r\n\t\t&hkLocalUser) != ERROR_SUCCESS)\r\n\t\thkLocalUser = NULL;\r\n\r\n\t// Get the default key\r\n\tif (RegCreateKeyEx(hkLocal,\r\n\t\t\"Default\",\r\n\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\tKEY_READ,\r\n\t\tNULL,\r\n\t\t&hkDefault,\r\n\t\t&dw) != ERROR_SUCCESS)\r\n\t\thkDefault = NULL;\r\n\r\n\tif (hkLocalUser != NULL) RegCloseKey(hkLocalUser);\r\n\tif (hkDefault != NULL) RegCloseKey(hkDefault);\r\n\tif (hkLocal != NULL) RegCloseKey(hkLocal);\r\n\tRegCloseKey(HKEY_LOCAL_MACHINE);\r\nLABELUSERSETTINGS:\r\n\tif ((strcmp(username, \"SYSTEM\") != 0))\r\n\t\t{\r\n\t\t\tHKEY hkGlobalUser;\r\n\t\t\tif (RegCreateKeyEx(HKEY_CURRENT_USER,\r\n\t\t\t\tWINVNC_REGISTRY_KEY,\r\n\t\t\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\t\t\tKEY_READ, NULL, &hkGlobalUser, &dw) == ERROR_SUCCESS)\r\n\t\t\t{\r\n\t\t\t\tRegCloseKey(hkGlobalUser);\r\n\t\t\t\tRegCloseKey(HKEY_CURRENT_USER);\r\n\t\t\t}\r\n\t\t}\r\n\r\n}\r\n\r\nvoid\r\nvncProperties::Load(BOOL usersettings)\r\n{\r\n\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Entering Load\\n\"));\r\n\r\n\t//if (m_dlgvisible) {\r\n\t//\tvnclog.Print(LL_INTWARN, VNCLOG(\"service helper invoked while Properties panel displayed\\n\"));\r\n\t//\treturn;\r\n\t//}\r\n\tResetRegistry();\r\n\r\n\tif (vncService::RunningAsService()) usersettings=false;\r\n\r\n\t// sf@2007 - Vista mode\r\n\t// The WinVNC service mode is not used under Vista (due to Session0 isolation)\r\n\t// Default settings (Service mode) are used when WinVNC app in run under Vista login screen\r\n\t// User settings (loggued user mode) are used when WinVNC app in run in a user session\r\n\t// Todo: Maybe we should additionally check OS version...\r\n\tif (m_server->RunningFromExternalService())\r\n\t\tusersettings=false;\r\n\r\n\tm_usersettings = usersettings;\r\n\r\n\tif (m_usersettings)\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - User mode\\n\"));\r\n\telse\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Service mode\\n\"));\r\n\t\r\n\tchar username[UNLEN+1];\r\n\tHKEY hkLocal, hkLocalUser, hkDefault;\r\n\tDWORD dw;\r\n\t\r\n\t// NEW (R3) PREFERENCES ALGORITHM\r\n\t// 1.\tLook in HKEY_LOCAL_MACHINE/Software/ORL/WinVNC3/%username%\r\n\t//\t\tfor sysadmin-defined, user-specific settings.\r\n\t// 2.\tIf not found, fall back to %username%=Default\r\n\t// 3.\tIf AllowOverrides is set then load settings from\r\n\t//\t\tHKEY_CURRENT_USER/Software/ORL/WinVNC3\r\n\r\n\t// GET THE CORRECT KEY TO READ FROM\r\n\r\n\t// Get the user name / service name\r\n\tif (!vncService::CurrentUser((char *)&username, sizeof(username)))\r\n\t{\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - NO current user\\n\"));\r\n\t\treturn;\r\n\t}\r\n\r\n\t// If there is no user logged on them default to SYSTEM\r\n\tif (strcmp(username, \"\") == 0)\r\n\t{\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Force USER SYSTEM 1\\n\"));\r\n\t\tstrcpy_s((char *)&username, UNLEN+1, \"SYSTEM\");\r\n\t}\r\n\r\n\r\n\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - UserName = %s\\n\"), username);\r\n\r\n\t// Try to get the machine registry key for WinVNC\r\n\tif (RegCreateKeyEx(HKEY_LOCAL_MACHINE,\r\n\t\tWINVNC_REGISTRY_KEY,\r\n\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\tKEY_READ, NULL, &hkLocal, &dw) != ERROR_SUCCESS)\r\n\t\t{\r\n\t\thkLocalUser=NULL;\r\n\t\thkDefault=NULL;\r\n\t\tgoto LABELUSERSETTINGS;\r\n\t\t}\r\n\r\n\t// Now try to get the per-user local key\r\n\tif (RegOpenKeyEx(hkLocal,\r\n\t\tusername,\r\n\t\t0, KEY_READ,\r\n\t\t&hkLocalUser) != ERROR_SUCCESS)\r\n\t\thkLocalUser = NULL;\r\n\r\n\t// Get the default key\r\n\tif (RegCreateKeyEx(hkLocal,\r\n\t\t\"Default\",\r\n\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\tKEY_READ,\r\n\t\tNULL,\r\n\t\t&hkDefault,\r\n\t\t&dw) != ERROR_SUCCESS)\r\n\t\thkDefault = NULL;\r\n\r\n\t// LOAD THE MACHINE-LEVEL PREFS\r\n\r\n\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Machine level prefs\\n\"));\r\n\r\n\t// Logging/debugging prefs\r\n\tvnclog.Print(LL_INTINFO, VNCLOG(\"loading local-only settings\\n\"));\r\n\t//vnclog.SetMode(LoadInt(hkLocal, \"DebugMode\", 0));\r\n\t//vnclog.SetLevel(LoadInt(hkLocal, \"DebugLevel\", 0));\r\n\r\n\t// Disable Tray Icon\r\n\tm_server->SetDisableTrayIcon(LoadInt(hkLocal, \"DisableTrayIcon\", false));\r\n\tm_server->SetRdpmode(LoadInt(hkLocal, \"rdpmode\", 0));\r\n\tm_server->SetNoScreensaver(LoadInt(hkLocal, \"noscreensaver\", 0));\r\n\r\n\t// Authentication required, loopback allowed, loopbackOnly\r\n\r\n\tm_server->SetLoopbackOnly(LoadInt(hkLocal, \"LoopbackOnly\", false));\r\n\r\n\tm_pref_Secure = false;\r\n\tm_pref_Secure = LoadInt(hkLocal, \"Secure\", m_pref_Secure);\r\n\tm_server->Secure(m_pref_Secure);\r\n\r\n\tm_pref_RequireMSLogon=false;\r\n\tm_pref_RequireMSLogon = LoadInt(hkLocal, \"MSLogonRequired\", m_pref_RequireMSLogon);\r\n\tm_server->RequireMSLogon(m_pref_RequireMSLogon);\r\n\r\n\t// Marscha@2004 - authSSP: added NewMSLogon checkbox to admin props page\r\n\tm_pref_NewMSLogon = false;\r\n\tm_pref_NewMSLogon = LoadInt(hkLocal, \"NewMSLogon\", m_pref_NewMSLogon);\r\n\tm_server->SetNewMSLogon(m_pref_NewMSLogon);\r\n\r\n\tm_pref_ReverseAuthRequired = true;\r\n\tm_pref_ReverseAuthRequired = LoadInt(hkLocal, \"ReverseAuthRequired\", m_pref_ReverseAuthRequired);\r\n\tm_server->SetReverseAuthRequired(m_pref_ReverseAuthRequired);\r\n\r\n\t// sf@2003 - Moved DSM params here\r\n\tm_pref_UseDSMPlugin=false;\r\n\tm_pref_UseDSMPlugin = LoadInt(hkLocal, \"UseDSMPlugin\", m_pref_UseDSMPlugin);\r\n\tLoadDSMPluginName(hkLocal, m_pref_szDSMPlugin);\t\r\n\t\r\n\t//adzm 2010-05-12 - dsmplugin config\r\n\t{\r\n\t\tchar* szBuffer = LoadString(hkLocal, \"DSMPluginConfig\");\r\n\t\tif (szBuffer) {\r\n\t\t\tstrncpy_s(m_pref_DSMPluginConfig, sizeof(m_pref_DSMPluginConfig) - 1, szBuffer, _TRUNCATE);\r\n\t\t\tdelete[] szBuffer;\r\n\t\t} else {\r\n\t\t\tm_pref_DSMPluginConfig[0] = '\\0';\r\n\t\t}\r\n\t}\r\n#ifdef IPV6V4\r\n\tm_server->SetIPV6(LoadInt(hkLocal, \"UseIpv6\", true));\r\n#endif\r\n\tif (m_server->LoopbackOnly()) m_server->SetLoopbackOk(true);\r\n\telse m_server->SetLoopbackOk(LoadInt(hkLocal, \"AllowLoopback\", true));\r\n\tm_server->SetAuthRequired(LoadInt(hkLocal, \"AuthRequired\", true));\r\n\r\n\tm_server->SetConnectPriority(LoadInt(hkLocal, \"ConnectPriority\", 0));\r\n\tif (!m_server->LoopbackOnly())\r\n\t{\r\n\t\tchar *authhosts = LoadString(hkLocal, \"AuthHosts\");\r\n\t\tif (authhosts != 0) {\r\n\t\t\tm_server->SetAuthHosts(authhosts);\r\n\t\t\tdelete [] authhosts;\r\n\t\t} else {\r\n\t\t\tm_server->SetAuthHosts(0);\r\n\t\t}\r\n\t} else {\r\n\t\tm_server->SetAuthHosts(0);\r\n\t}\r\n\r\n\t// If Socket connections are allowed, should the HTTP server be enabled?\r\nLABELUSERSETTINGS:\r\n\t// LOAD THE USER PREFERENCES\r\n\t//vnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Load User Preferences\\n\"));\r\n\r\n\t// Set the default user prefs\r\n\tvnclog.Print(LL_INTINFO, VNCLOG(\"clearing user settings\\n\"));\r\n\tm_pref_AutoPortSelect=TRUE;\r\n    m_pref_HTTPConnect = TRUE;\r\n\tm_pref_PortNumber = RFB_PORT_OFFSET; \r\n\tm_pref_SockConnect=TRUE;\r\n\t{\r\n\t    vncPasswd::FromClear crypt(m_pref_Secure);\r\n\t    memcpy(m_pref_passwd, crypt, MAXPWLEN);\r\n\t}\r\n\tm_pref_QuerySetting=2;\r\n\tm_pref_QueryTimeout=10;\r\n\tm_pref_QueryDisableTime=0;\r\n\tm_pref_QueryAccept=0;\r\n\tm_pref_IdleTimeout=0;\r\n\tm_pref_MaxViewerSetting = 0;\r\n\tm_pref_MaxViewers = 128;\r\n\tm_pref_Collabo = false;\r\n\r\n\tm_pref_Frame = FALSE;\r\n\tm_pref_Notification = FALSE;\r\n\tm_pref_OSD = FALSE;\r\n\tm_pref_NotificationSelection = 0;\r\n\r\n\tm_pref_EnableRemoteInputs=TRUE;\r\n\tm_pref_DisableLocalInputs=FALSE;\r\n\tm_pref_EnableJapInput=FALSE;\r\n\tm_pref_EnableUnicodeInput=FALSE;\r\n\tm_pref_EnableWin8Helper=FALSE;\r\n\tm_pref_clearconsole=FALSE;\r\n\tm_pref_LockSettings=-1;\r\n\r\n\tm_pref_RemoveWallpaper=FALSE;\r\n\t// adzm - 2010-07 - Disable more effects or font smoothing\r\n\tm_pref_RemoveEffects=FALSE;\r\n\tm_pref_RemoveFontSmoothing=FALSE;\r\n    m_alloweditclients = TRUE;\r\n\tm_allowshutdown = TRUE;\r\n\tm_allowproperties = TRUE;\r\n\tm_allowInjection = FALSE;\r\n\r\n\t// Modif sf@2002\r\n\t// [v1.0.2-jp2 fix] Move to vncpropertiesPoll.cpp\r\n//\tm_pref_SingleWindow = FALSE;\r\n\tm_pref_UseDSMPlugin = FALSE;\r\n\t*m_pref_szDSMPlugin = '\\0';\r\n\tm_pref_DSMPluginConfig[0] = '\\0';\r\n\r\n\tm_pref_EnableFileTransfer = TRUE;\r\n\tm_pref_FTUserImpersonation = TRUE;\r\n\tm_pref_EnableBlankMonitor = TRUE;\r\n\tm_pref_BlankInputsOnly = FALSE;\r\n\tm_pref_QueryIfNoLogon = FALSE;\r\n\tm_pref_DefaultScale = 1;\r\n\r\n\t// Load the local prefs for this user\r\n\tif (hkDefault != NULL)\r\n\t{\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Local Preferences - Default\\n\"));\r\n\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"loading DEFAULT local settings\\n\"));\r\n\t\tLoadUserPrefs(hkDefault);\r\n\t\tm_allowshutdown = LoadInt(hkDefault, \"AllowShutdown\", m_allowshutdown);\r\n\t\tm_allowproperties = LoadInt(hkDefault, \"AllowProperties\", m_allowproperties);\r\n\t\tm_allowInjection = LoadInt(hkDefault, \"AllowInjection\", m_allowInjection);\r\n\t\tm_alloweditclients = LoadInt(hkDefault, \"AllowEditClients\", m_alloweditclients);\r\n\t}\r\n\r\n\t// Are we being asked to load the user settings, or just the default local system settings?\r\n\tif (usersettings)\r\n\t{\r\n\t\t// We want the user settings, so load them!\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - User Settings on\\n\"));\r\n\r\n\t\tif (hkLocalUser != NULL)\r\n\t\t{\r\n\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - LoadUser Preferences\\n\"));\r\n\r\n\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"loading \\\"%s\\\" local settings\\n\"), username);\r\n\t\t\tLoadUserPrefs(hkLocalUser);\r\n\t\t\tm_allowshutdown = LoadInt(hkLocalUser, \"AllowShutdown\", m_allowshutdown);\r\n\t\t\tm_allowproperties = LoadInt(hkLocalUser, \"AllowProperties\", m_allowproperties);\r\n\t\t\tm_allowInjection = LoadInt(hkLocalUser, \"AllowInjection\", m_allowInjection);\r\n\t\t  m_alloweditclients = LoadInt(hkLocalUser, \"AllowEditClients\", m_alloweditclients);\r\n\t\t}\r\n\r\n\t\t// Now override the system settings with the user's settings\r\n\t\t// If the username is SYSTEM then don't try to load them, because there aren't any...\r\n\t\tif (m_allowproperties && (strcmp(username, \"SYSTEM\") != 0))\r\n\t\t{\r\n\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Override system settings with users settings\\n\"));\r\n\t\t\tHKEY hkGlobalUser;\r\n\t\t\tif (RegCreateKeyEx(HKEY_CURRENT_USER,\r\n\t\t\t\tWINVNC_REGISTRY_KEY,\r\n\t\t\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\t\t\tKEY_READ, NULL, &hkGlobalUser, &dw) == ERROR_SUCCESS)\r\n\t\t\t{\r\n\t\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"loading \\\"%s\\\" global settings\\n\"), username);\r\n\t\t\t\tLoadUserPrefs(hkGlobalUser);\r\n\t\t\t\tRegCloseKey(hkGlobalUser);\r\n\r\n\t\t\t\t// Close the user registry hive so it can unload if required\r\n\t\t\t\tRegCloseKey(HKEY_CURRENT_USER);\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - User Settings off\\n\"));\r\n\t\tif (hkLocalUser != NULL)\r\n\t\t{\r\n\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"loading \\\"%s\\\" local settings\\n\"), username);\r\n\t\t\tLoadUserPrefs(hkLocalUser);\r\n\t\t\tm_allowshutdown = LoadInt(hkLocalUser, \"AllowShutdown\", m_allowshutdown);\r\n\t\t\tm_allowproperties = LoadInt(hkLocalUser, \"AllowProperties\", m_allowproperties);\r\n\t\t\tm_allowInjection = LoadInt(hkLocalUser, \"AllowInjection\", m_allowInjection);\r\n\t\t    m_alloweditclients = LoadInt(hkLocalUser, \"AllowEditClients\", m_alloweditclients);\t\t\t\r\n\t\t}\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"bypassing user-specific settings (both local and global)\\n\"));\r\n\t}\r\n\r\n\tif (hkLocalUser != NULL) RegCloseKey(hkLocalUser);\r\n\tif (hkDefault != NULL) RegCloseKey(hkDefault);\r\n\tif (hkLocal != NULL) RegCloseKey(hkLocal);\r\n\r\n\t// Make the loaded settings active..\r\n\tApplyUserPrefs();\r\n}\r\n\r\nvoid\r\nvncProperties::LoadUserPrefs(HKEY appkey)\r\n{\r\n\t// LOAD USER PREFS FROM THE SELECTED KEY\r\n\r\n\t// Modif sf@2002\r\n\tm_pref_EnableFileTransfer = LoadInt(appkey, \"FileTransferEnabled\", m_pref_EnableFileTransfer);\r\n\tm_pref_FTUserImpersonation = LoadInt(appkey, \"FTUserImpersonation\", m_pref_FTUserImpersonation); // sf@2005\r\n\tm_pref_EnableBlankMonitor = LoadInt(appkey, \"BlankMonitorEnabled\", m_pref_EnableBlankMonitor);\r\n\tm_pref_BlankInputsOnly = LoadInt(appkey, \"BlankInputsOnly\", m_pref_BlankInputsOnly); //PGM\r\n\tm_pref_DefaultScale = LoadInt(appkey, \"DefaultScale\", m_pref_DefaultScale);\r\n\t\r\n\tm_pref_Primary=LoadInt(appkey, \"primary\", m_pref_Primary);\r\n\tm_pref_Secondary=LoadInt(appkey, \"secondary\", m_pref_Secondary);\r\n\r\n\tm_pref_UseDSMPlugin = LoadInt(appkey, \"UseDSMPlugin\", m_pref_UseDSMPlugin);\r\n\tLoadDSMPluginName(appkey, m_pref_szDSMPlugin);\r\n\r\n\t// Connection prefs\r\n\tm_pref_SockConnect=LoadInt(appkey, \"SocketConnect\", m_pref_SockConnect);\r\n\tm_pref_HTTPConnect=LoadInt(appkey, \"HTTPConnect\", m_pref_HTTPConnect);\r\n\tm_pref_AutoPortSelect=LoadInt(appkey, \"AutoPortSelect\", m_pref_AutoPortSelect);\r\n\tm_pref_PortNumber=LoadInt(appkey, \"PortNumber\", m_pref_PortNumber);\r\n\tm_pref_HttpPortNumber=LoadInt(appkey, \"HTTPPortNumber\",\r\n\t\t\t\t\t\t\t\t\tDISPLAY_TO_HPORT(PORT_TO_DISPLAY(m_pref_PortNumber)));\r\n\tm_pref_IdleTimeout=LoadInt(appkey, \"IdleTimeout\", m_pref_IdleTimeout);\r\n\t\r\n\tm_pref_RemoveWallpaper=LoadInt(appkey, \"RemoveWallpaper\", m_pref_RemoveWallpaper);\r\n\t// adzm - 2010-07 - Disable more effects or font smoothing\r\n\tm_pref_RemoveEffects=LoadInt(appkey, \"RemoveEffects\", m_pref_RemoveEffects);\r\n\tm_pref_RemoveFontSmoothing=LoadInt(appkey, \"RemoveFontSmoothing\", m_pref_RemoveFontSmoothing);\r\n\r\n\t// Connection querying settings\r\n\tm_pref_QuerySetting=LoadInt(appkey, \"QuerySetting\", m_pref_QuerySetting);\r\n\tm_server->SetQuerySetting(m_pref_QuerySetting);\r\n\tm_pref_QueryTimeout=LoadInt(appkey, \"QueryTimeout\", m_pref_QueryTimeout);\r\n\tm_server->SetQueryTimeout(m_pref_QueryTimeout);\r\n\tm_pref_QueryDisableTime=LoadInt(appkey, \"QueryDisableTime\", m_pref_QueryDisableTime);\r\n\tm_server->SetQueryDisableTime(m_pref_QueryDisableTime);\r\n\tm_pref_QueryAccept=LoadInt(appkey, \"QueryAccept\", m_pref_QueryAccept);\r\n\tm_server->SetQueryAccept(m_pref_QueryAccept);\r\n\r\n\tm_pref_MaxViewerSetting = LoadInt(appkey, \"MaxViewerSetting\", m_pref_MaxViewerSetting);\r\n\tm_server->setMaxViewerSetting(m_pref_MaxViewerSetting);\r\n\tm_pref_MaxViewers = LoadInt(appkey, \"MaxViewers\", m_pref_MaxViewers);\r\n\tm_server->setMaxViewers(m_pref_MaxViewers);\t\r\n\tm_pref_Collabo = LoadInt(appkey, \"Collabo\", m_pref_Collabo);\r\n\tm_server->setCollabo(m_pref_Collabo);\r\n\r\n\tm_pref_Frame = LoadInt(appkey, \"Frame\", m_pref_Frame);\r\n\tm_server->setFrame(m_pref_Frame);\r\n\tm_pref_Notification = LoadInt(appkey, \"Notification\", m_pref_Notification);\r\n\tm_server->setNotification(m_pref_Notification);\r\n\tm_pref_OSD = LoadInt(appkey, \"OSD\", m_pref_OSD);\r\n\tm_server->setOSD(m_pref_OSD);\r\n\tm_pref_NotificationSelection = LoadInt(appkey, \"NotificationSelection\", m_pref_NotificationSelection);\r\n\tm_server->setNotificationSelection(m_pref_NotificationSelection);\r\n\t\r\n\r\n\t// marscha@2006 - Is AcceptDialog required even if no user is logged on\r\n\tm_pref_QueryIfNoLogon=LoadInt(appkey, \"QueryIfNoLogon\", m_pref_QueryIfNoLogon);\r\n\tm_server->SetQueryIfNoLogon(m_pref_QueryIfNoLogon);\r\n\r\n\t// Load the password\r\n\tLoadPassword(appkey, m_pref_passwd);\r\n\tLoadPassword2(appkey, m_pref_passwd2); //PGM\r\n\r\n\t// Remote access prefs\r\n\tm_pref_EnableRemoteInputs=LoadInt(appkey, \"InputsEnabled\", m_pref_EnableRemoteInputs);\r\n\tm_pref_LockSettings=LoadInt(appkey, \"LockSetting\", m_pref_LockSettings);\r\n\tm_pref_DisableLocalInputs=LoadInt(appkey, \"LocalInputsDisabled\", m_pref_DisableLocalInputs);\r\n\tm_pref_EnableJapInput=LoadInt(appkey, \"EnableJapInput\", m_pref_EnableJapInput);\r\n\tm_pref_EnableUnicodeInput=LoadInt(appkey, \"EnableUnicodeInput\", m_pref_EnableUnicodeInput);\r\n\tm_pref_EnableWin8Helper=LoadInt(appkey, \"EnableWin8Helper\", m_pref_EnableWin8Helper);\r\n\tm_pref_clearconsole=LoadInt(appkey, \"clearconsole\", m_pref_clearconsole);\r\n}\r\n\r\nvoid\r\nvncProperties::ApplyUserPrefs()\r\n{\r\n\t// APPLY THE CACHED PREFERENCES TO THE SERVER\r\n\r\n\t// Modif sf@2002\r\n\tm_server->EnableFileTransfer(m_pref_EnableFileTransfer);\r\n\tm_server->FTUserImpersonation(m_pref_FTUserImpersonation); // sf@2005\r\n\tm_server->Primary(m_pref_Primary);\r\n\tm_server->Secondary(m_pref_Secondary);\r\n\r\n\tm_server->BlankMonitorEnabled(m_pref_EnableBlankMonitor);\r\n\tm_server->BlankInputsOnly(m_pref_BlankInputsOnly); //PGM\r\n\tm_server->SetDefaultScale(m_pref_DefaultScale);\r\n\r\n\t// Update the connection querying settings\r\n\tm_server->SetQuerySetting(m_pref_QuerySetting);\r\n\tm_server->SetQueryTimeout(m_pref_QueryTimeout);\r\n\tm_server->SetQueryDisableTime(m_pref_QueryDisableTime);\r\n\tm_server->SetQueryAccept(m_pref_QueryAccept);\r\n\tm_server->setMaxViewerSetting(m_pref_MaxViewerSetting);\r\n\tm_server->setMaxViewers(m_pref_MaxViewers);\r\n\tm_server->setCollabo(m_pref_Collabo);\r\n\r\n\tm_server->setFrame(m_pref_Frame);\r\n\tm_server->setNotification(m_pref_Notification);\r\n\tm_server->setOSD(m_pref_OSD);\r\n\tm_server->setNotificationSelection(m_pref_NotificationSelection);\r\n\r\n\tm_server->SetAutoIdleDisconnectTimeout(m_pref_IdleTimeout);\r\n\tm_server->EnableRemoveWallpaper(m_pref_RemoveWallpaper);\r\n\t// adzm - 2010-07 - Disable more effects or font smoothing\r\n\tm_server->EnableRemoveFontSmoothing(m_pref_RemoveFontSmoothing);\r\n\tm_server->EnableRemoveEffects(m_pref_RemoveEffects);\r\n\r\n\t// Is the listening socket closing?\r\n\r\n\tif (!m_pref_SockConnect)\r\n\t\tm_server->SockConnect(m_pref_SockConnect);\r\n\r\n\tm_server->EnableHTTPConnect(m_pref_HTTPConnect);\r\n\r\n\t// Are inputs being disabled?\r\n\tif (!m_pref_EnableRemoteInputs)\r\n\t\tm_server->EnableRemoteInputs(m_pref_EnableRemoteInputs);\r\n\tif (m_pref_DisableLocalInputs)\r\n\t\tm_server->DisableLocalInputs(m_pref_DisableLocalInputs);\r\n\tif (m_pref_EnableJapInput)\r\n\t\tm_server->EnableJapInput(m_pref_EnableJapInput);\r\n\tif (m_pref_EnableUnicodeInput)\r\n\t\tm_server->EnableUnicodeInput(m_pref_EnableUnicodeInput);\r\n\tif (m_pref_EnableWin8Helper)\r\n\t\tm_server->Win8HelperEnabled(m_pref_EnableWin8Helper);\r\n\tm_server->Clearconsole(m_pref_clearconsole);\r\n\r\n\t// Update the password\r\n\tm_server->SetPassword(m_pref_passwd);\r\n\tm_server->SetPassword2(m_pref_passwd2); //PGM\r\n\r\n\t// Now change the listening port settings\r\n\tm_server->SetAutoPortSelect(m_pref_AutoPortSelect);\r\n\tif (!m_pref_AutoPortSelect)\r\n\t\t// m_server->SetPort(m_pref_PortNumber);\r\n\t\tm_server->SetPorts(m_pref_PortNumber, m_pref_HttpPortNumber); // Tight 1.2.7\r\n\r\n\tm_server->SockConnect(m_pref_SockConnect);\r\n\r\n\t// Remote access prefs\r\n\tm_server->EnableRemoteInputs(m_pref_EnableRemoteInputs);\r\n\tm_server->SetLockSettings(m_pref_LockSettings);\r\n\tm_server->DisableLocalInputs(m_pref_DisableLocalInputs);\r\n\tm_server->EnableJapInput(m_pref_EnableJapInput);\r\n\tm_server->EnableUnicodeInput(m_pref_EnableUnicodeInput);\r\n\tm_server->Win8HelperEnabled(m_pref_EnableWin8Helper);\r\n\tm_server->Clearconsole(m_pref_clearconsole);\r\n\t// DSM Plugin prefs\r\n\tm_server->EnableDSMPlugin(m_pref_UseDSMPlugin);\r\n\tm_server->SetDSMPluginName(m_pref_szDSMPlugin);\r\n\t\r\n\t//adzm 2010-05-12 - dsmplugin config\r\n\tm_server->SetDSMPluginConfig(m_pref_DSMPluginConfig);\r\n\r\n\tif (m_server->IsDSMPluginEnabled()) \r\n\t\tm_server->SetDSMPlugin(false);\r\n}\r\n\r\nvoid\r\nvncProperties::SaveInt(HKEY key, LPCSTR valname, LONG val)\r\n{\r\n\tRegSetValueEx(key, valname, 0, REG_DWORD, (LPBYTE) &val, sizeof(val));\r\n}\r\n\r\nvoid\r\nvncProperties::SavePassword(HKEY key, char *buffer)\r\n{\r\n\tRegSetValueEx(key, \"Password\", 0, REG_BINARY, (LPBYTE) buffer, MAXPWLEN);\r\n}\r\nvoid //PGM\r\nvncProperties::SavePassword2(HKEY key, char *buffer) //PGM\r\n{ //PGM\r\n\tRegSetValueEx(key, \"Password2\", 0, REG_BINARY, (LPBYTE) buffer, MAXPWLEN); //PGM\r\n} //PGM\r\nvoid\r\nvncProperties::SaveString(HKEY key,LPCSTR valname, const char *buffer)\r\n{\r\n\tRegSetValueEx(key, valname, 0, REG_BINARY, (LPBYTE) buffer, (DWORD)(strlen(buffer)+1));\r\n}\r\n\r\nvoid\r\nvncProperties::SaveDSMPluginName(HKEY key, char *buffer)\r\n{\r\n\tRegSetValueEx(key, \"DSMPlugin\", 0, REG_BINARY, (LPBYTE) buffer, MAXPATH);\r\n}\r\n\r\nvoid\r\nvncProperties::LoadDSMPluginName(HKEY key, char *buffer)\r\n{\r\n\tDWORD type = REG_BINARY;\r\n\tint slen=MAXPATH;\r\n\tchar inouttext[MAXPATH];\r\n\r\n\tif (RegQueryValueEx(key,\r\n\t\t\"DSMPlugin\",\r\n\t\tNULL,\r\n\t\t&type,\r\n\t\t(LPBYTE) &inouttext,\r\n\t\t(LPDWORD) &slen) != ERROR_SUCCESS)\r\n\t\treturn;\r\n\r\n\tif (slen > MAXPATH)\r\n\t\treturn;\r\n\r\n\tmemcpy(buffer, inouttext, MAXPATH);\r\n}\r\n\r\nvoid\r\nvncProperties::Save()\r\n{\r\n\tHKEY appkey;\r\n\tDWORD dw;\r\n\r\n\tif (!m_allowproperties)\r\n\t\treturn;\r\n\r\n\t// NEW (R3) PREFERENCES ALGORITHM\r\n\t// The user's prefs are only saved if the user is allowed to override\r\n\t// the machine-local settings specified for them.  Otherwise, the\r\n\t// properties entry on the tray icon menu will be greyed out.\r\n\r\n\t// GET THE CORRECT KEY TO READ FROM\r\n\r\n\t// Have we loaded user settings, or system settings?\r\n\tif (m_usersettings) {\r\n\t\t// Verify that we know who is logged on\r\n\t\tchar username[UNLEN+1];\r\n\t\tif (!vncService::CurrentUser((char *)&username, sizeof(username)))\r\n\t\t\treturn;\r\n\t\tif (strcmp(username, \"\") == 0)\r\n\t\t\treturn;\r\n\r\n\t\t// Try to get the per-user, global registry key for WinVNC\r\n\t\tif (RegCreateKeyEx(HKEY_CURRENT_USER,\r\n\t\t\tWINVNC_REGISTRY_KEY,\r\n\t\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\t\tKEY_WRITE | KEY_READ, NULL, &appkey, &dw) != ERROR_SUCCESS)\r\n\t\t\treturn;\r\n\t} else {\r\n\t\t// Try to get the default local registry key for WinVNC\r\n\t\tHKEY hkLocal;\r\n\t\tif (RegCreateKeyEx(HKEY_LOCAL_MACHINE,\r\n\t\t\tWINVNC_REGISTRY_KEY,\r\n\t\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\t\tKEY_READ, NULL, &hkLocal, &dw) != ERROR_SUCCESS) {\r\n\t\t\tMessageBoxSecure(NULL, sz_ID_MB1, sz_ID_WVNC, MB_OK);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (RegCreateKeyEx(hkLocal,\r\n\t\t\t\"Default\",\r\n\t\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\t\tKEY_WRITE | KEY_READ, NULL, &appkey, &dw) != ERROR_SUCCESS) {\r\n\t\t\tRegCloseKey(hkLocal);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tRegCloseKey(hkLocal);\r\n\t}\r\n\r\n\t// SAVE PER-USER PREFS IF ALLOWED\r\n\tSaveUserPrefs(appkey);\r\n\tRegCloseKey(appkey);\r\n\tRegCloseKey(HKEY_CURRENT_USER);\r\n\r\n\t// Machine Preferences\r\n\t// Get the machine registry key for WinVNC\r\n\tHKEY hkLocal,hkDefault;\r\n\tif (RegCreateKeyEx(HKEY_LOCAL_MACHINE,\r\n\t\tWINVNC_REGISTRY_KEY,\r\n\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\tKEY_WRITE | KEY_READ, NULL, &hkLocal, &dw) != ERROR_SUCCESS)\r\n\t\treturn;\r\n\tif (RegCreateKeyEx(hkLocal,\r\n\t\t\"Default\",\r\n\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\tKEY_WRITE | KEY_READ,\r\n\t\tNULL,\r\n\t\t&hkDefault,\r\n\t\t&dw) != ERROR_SUCCESS)\r\n\t\thkDefault = NULL;\r\n\t// sf@2003\r\n\tSaveInt(hkLocal, \"DebugMode\", vnclog.GetMode());\r\n\tSaveInt(hkLocal, \"Avilog\", vnclog.GetVideo());\r\n\tSaveString(hkLocal, \"path\", vnclog.GetPath());\r\n\tSaveInt(hkLocal, \"DebugLevel\", vnclog.GetLevel());\r\n\tSaveInt(hkLocal, \"AllowLoopback\", m_server->LoopbackOk());\r\n#ifdef IPV6V4\r\n\tSaveInt(hkLocal, \"UseIpv6\", m_server->IPV6());\r\n#endif\r\n\tSaveInt(hkLocal, \"LoopbackOnly\", m_server->LoopbackOnly());\r\n\tif (hkDefault) \r\n\t\t{\r\n\t\t\tSaveInt(hkDefault, \"AllowShutdown\", m_allowshutdown);\r\n\t\t\tSaveInt(hkDefault, \"AllowProperties\",  m_allowproperties);\r\n\t\t\tSaveInt(hkDefault, \"AllowEditClients\", m_alloweditclients);\r\n\t\t}\r\n\r\n\tSaveInt(hkLocal, \"DisableTrayIcon\", m_server->GetDisableTrayIcon());\r\n\tSaveInt(hkLocal, \"rdpmode\", m_server->GetRdpmode());\r\n\tSaveInt(hkLocal, \"noscreensaver\", m_server->GetNoScreensaver());\r\n\tSaveInt(hkLocal, \"Secure\", m_server->Secure());\r\n\tSaveInt(hkLocal, \"MSLogonRequired\", m_server->MSLogonRequired());\r\n\t// Marscha@2004 - authSSP: save \"New MS-Logon\" state\r\n\tSaveInt(hkLocal, \"NewMSLogon\", m_server->GetNewMSLogon());\r\n\tSaveInt(hkLocal, \"ReverseAuthRequired\", m_server->GetReverseAuthRequired());\r\n\t// sf@2003 - DSM params here\r\n\tSaveInt(hkLocal, \"UseDSMPlugin\", m_server->IsDSMPluginEnabled());\r\n\tSaveInt(hkLocal, \"ConnectPriority\", m_server->ConnectPriority());\r\n\tSaveDSMPluginName(hkLocal, m_server->GetDSMPluginName());\t\r\n\t\r\n\t//adzm 2010-05-12 - dsmplugin config\r\n\tSaveString(hkLocal, \"DSMPluginConfig\", m_server->GetDSMPluginConfig());\r\n\r\n\tif (hkDefault) RegCloseKey(hkDefault);\r\n\tif (hkLocal) RegCloseKey(hkLocal);\r\n}\r\n\r\nvoid\r\nvncProperties::SaveUserPrefs(HKEY appkey)\r\n{\r\n\t// SAVE THE PER USER PREFS\r\n\tvnclog.Print(LL_INTINFO, VNCLOG(\"saving current settings to registry\\n\"));\r\n\r\n\t// Modif sf@2002\r\n\tSaveInt(appkey, \"FileTransferEnabled\", m_server->FileTransferEnabled());\r\n\tSaveInt(appkey, \"FTUserImpersonation\", m_server->FTUserImpersonation()); // sf@2005\r\n\tSaveInt(appkey, \"BlankMonitorEnabled\", m_server->BlankMonitorEnabled());\r\n\tSaveInt(appkey, \"BlankInputsOnly\", m_server->BlankInputsOnly()); //PGM\r\n\tSaveInt(appkey, \"primary\", m_server->Primary());\r\n\tSaveInt(appkey, \"secondary\", m_server->Secondary());\r\n\r\n\tSaveInt(appkey, \"DefaultScale\", m_server->GetDefaultScale());\r\n\r\n\tSaveInt(appkey, \"UseDSMPlugin\", m_server->IsDSMPluginEnabled());\r\n\tSaveDSMPluginName(appkey, m_server->GetDSMPluginName());\r\n\t//adzm 2010-05-12 - dsmplugin config\r\n\tSaveString(appkey, \"DSMPluginConfig\", m_server->GetDSMPluginConfig());\r\n\r\n\t// Connection prefs\r\n\tSaveInt(appkey, \"SocketConnect\", m_server->SockConnected());\r\n\tSaveInt(appkey, \"HTTPConnect\", m_server->HTTPConnectEnabled());\r\n\tSaveInt(appkey, \"AutoPortSelect\", m_server->AutoPortSelect());\r\n\tif (!m_server->AutoPortSelect()) {\r\n\t\tSaveInt(appkey, \"PortNumber\", m_server->GetPort());\r\n\t\tSaveInt(appkey, \"HTTPPortNumber\", m_server->GetHttpPort());\r\n\t}\r\n\tSaveInt(appkey, \"InputsEnabled\", m_server->RemoteInputsEnabled());\r\n\tSaveInt(appkey, \"LocalInputsDisabled\", m_server->LocalInputsDisabled());\r\n\tSaveInt(appkey, \"IdleTimeout\", m_server->AutoIdleDisconnectTimeout());\r\n\tSaveInt(appkey, \"EnableJapInput\", m_server->JapInputEnabled());\r\n\tSaveInt(appkey, \"EnableUnicodeInput\", m_server->UnicodeInputEnabled());\r\n\tSaveInt(appkey, \"EnableWin8Helper\", m_server->Win8HelperEnabled());\r\n\r\n\t// Connection querying settings\r\n\tSaveInt(appkey, \"QuerySetting\", m_server->QuerySetting());\r\n\tSaveInt(appkey, \"QueryTimeout\", m_server->QueryTimeout());\r\n\tSaveInt(appkey, \"QueryDisableTime\", m_server->QueryDisableTime());\r\n\tSaveInt(appkey, \"QueryAccept\", m_server->QueryAcceptForSave());\r\n\tSaveInt(appkey, \"MaxViewerSetting\", m_server->getMaxViewerSetting());\r\n\tSaveInt(appkey, \"MaxViewers\", m_server->getMaxViewers());\r\n\tSaveInt(appkey, \"Collabo\", m_server->getCollabo());\r\n\tSaveInt(appkey, \"Frame\", m_server->getFrame());\r\n\tSaveInt(appkey, \"Notification\", m_server->getNotification());\r\n\tSaveInt(appkey, \"OSD\", m_server->getOSD());\r\n\tSaveInt(appkey, \"NotificationSelection\", m_server->getNotificationSelection());\r\n\r\n\r\n\t// Lock settings\r\n\tSaveInt(appkey, \"LockSetting\", m_server->LockSettings());\r\n\r\n\t// Wallpaper removal\r\n\tSaveInt(appkey, \"RemoveWallpaper\", m_server->RemoveWallpaperEnabled());\r\n\t// UI Effects\r\n\t// adzm - 2010-07 - Disable more effects or font smoothing\r\n\tSaveInt(appkey, \"RemoveEffects\", m_server->RemoveEffectsEnabled());\r\n\tSaveInt(appkey, \"RemoveFontSmoothing\", m_server->RemoveFontSmoothingEnabled());\r\n\r\n\t// Save the password\r\n\tchar passwd[MAXPWLEN];\r\n\tm_server->GetPassword(passwd);\r\n\tSavePassword(appkey, passwd);\r\n\tmemset(passwd, '\\0', MAXPWLEN); //PGM\r\n\tm_server->GetPassword2(passwd); //PGM\r\n\tSavePassword2(appkey, passwd); //PGM\r\n}\r\n\r\n\r\n// ********************************************************************\r\n// Ini file part - Wwill replace registry access completely, some day\r\n// WARNING: until then, when adding/modifying a config parameter\r\n//          don't forget to modify both ini file & registry parts !\r\n// ********************************************************************\r\n\r\nvoid vncProperties::LoadFromIniFile()\r\n{\r\n\t//if (m_dlgvisible)\r\n\t//{\r\n\t//\tvnclog.Print(LL_INTWARN, VNCLOG(\"service helper invoked while Properties panel displayed\\n\"));\r\n\t//\treturn;\r\n\t//}\r\n\r\n\tchar username[UNLEN+1];\r\n\r\n\t// Get the user name / service name\r\n\tif (!vncService::CurrentUser((char *)&username, sizeof(username)))\r\n\t{\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - NO current user\\n\"));\r\n\t\treturn;\r\n\t}\r\n\r\n\t// If there is no user logged on them default to SYSTEM\r\n\tif (strcmp(username, \"\") == 0)\r\n\t{\r\n\t\t//vnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Force USER SYSTEM 2\\n\"));\r\n\t\tstrcpy_s((char *)&username, UNLEN+1, \"SYSTEM\");\r\n\t}\r\n\r\n\t// Logging/debugging prefs\r\n\tvnclog.SetMode(myIniFile.ReadInt(\"admin\", \"DebugMode\", 0));\r\n\tchar temp[512];\r\n\tmyIniFile.ReadString(\"admin\", \"path\", temp,512);\t\r\n\tvnclog.SetPath(temp);\r\n\tvnclog.SetLevel(myIniFile.ReadInt(\"admin\", \"DebugLevel\", 0));\r\n\tvnclog.SetVideo(myIniFile.ReadInt(\"admin\", \"Avilog\", 0) ? true : false);\r\n\r\n\t// Disable Tray Icon\r\n\tm_server->SetDisableTrayIcon(myIniFile.ReadInt(\"admin\", \"DisableTrayIcon\", false));\r\n\tm_server->SetRdpmode(myIniFile.ReadInt(\"admin\", \"rdpmode\", 0));\r\n\tm_server->SetNoScreensaver(myIniFile.ReadInt(\"admin\", \"noscreensaver\", 0));\r\n\r\n\t// Authentication required, loopback allowed, loopbackOnly\r\n\r\n\tm_server->SetLoopbackOnly(myIniFile.ReadInt(\"admin\", \"LoopbackOnly\", false));\r\n\r\n\tm_pref_Secure = false;\r\n\tm_pref_Secure = myIniFile.ReadInt(\"admin\", \"Secure\", m_pref_Secure);\r\n\tm_server->Secure(m_pref_Secure);\r\n\r\n\tm_pref_RequireMSLogon=false;\r\n\tm_pref_RequireMSLogon = myIniFile.ReadInt(\"admin\", \"MSLogonRequired\", m_pref_RequireMSLogon);\r\n\tm_server->RequireMSLogon(m_pref_RequireMSLogon);\r\n\r\n\t// Marscha@2004 - authSSP: added NewMSLogon checkbox to admin props page\r\n\tm_pref_NewMSLogon = false;\r\n\tm_pref_NewMSLogon = myIniFile.ReadInt(\"admin\", \"NewMSLogon\", m_pref_NewMSLogon);\r\n\tm_server->SetNewMSLogon(m_pref_NewMSLogon);\r\n\r\n\t// sf@2003 - Moved DSM params here\r\n\tm_pref_UseDSMPlugin=false;\r\n\tm_pref_UseDSMPlugin = myIniFile.ReadInt(\"admin\", \"UseDSMPlugin\", m_pref_UseDSMPlugin);\r\n\tmyIniFile.ReadString(\"admin\", \"DSMPlugin\",m_pref_szDSMPlugin,128);\r\n\r\n\tm_pref_ReverseAuthRequired = true;\r\n\tm_pref_ReverseAuthRequired = myIniFile.ReadInt(\"admin\", \"ReverseAuthRequired\", m_pref_ReverseAuthRequired);\r\n\tm_server->SetReverseAuthRequired(m_pref_ReverseAuthRequired);\r\n\t\r\n\t//adzm 2010-05-12 - dsmplugin config\r\n\tmyIniFile.ReadString(\"admin\", \"DSMPluginConfig\", m_pref_DSMPluginConfig, 512);\r\n#ifdef IPV6V4\r\n\tm_server->SetIPV6(myIniFile.ReadInt(\"admin\", \"UseIpv6\", false));\r\n#endif\r\n\tif (m_server->LoopbackOnly()) m_server->SetLoopbackOk(true);\r\n\telse m_server->SetLoopbackOk(myIniFile.ReadInt(\"admin\", \"AllowLoopback\", true));\r\n\tm_server->SetAuthRequired(myIniFile.ReadInt(\"admin\", \"AuthRequired\", true));\r\n\r\n\tm_server->SetConnectPriority(myIniFile.ReadInt(\"admin\", \"ConnectPriority\", 0));\r\n\tif (!m_server->LoopbackOnly())\r\n\t{\r\n\t\tchar *authhosts=new char[150];\r\n\t\tmyIniFile.ReadString(\"admin\", \"AuthHosts\",authhosts,150);\r\n\t\tif (authhosts != 0) {\r\n\t\t\tm_server->SetAuthHosts(authhosts);\r\n\t\t\tdelete [] authhosts;\r\n\t\t} else {\r\n\t\t\tm_server->SetAuthHosts(0);\r\n\t\t}\r\n\t} else {\r\n\t\tm_server->SetAuthHosts(0);\r\n\t}\r\n\r\n\t//vnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Load User Preferences\\n\"));\r\n\r\n\t// Set the default user prefs\r\n\tvnclog.Print(LL_INTINFO, VNCLOG(\"clearing user settings\\n\"));\r\n\tm_pref_AutoPortSelect=TRUE;\r\n    m_pref_HTTPConnect = TRUE;\r\n\tm_pref_PortNumber = RFB_PORT_OFFSET; \r\n\tm_pref_SockConnect=TRUE;\r\n\t{\r\n\t    vncPasswd::FromClear crypt(m_pref_Secure);\r\n\t    memcpy(m_pref_passwd, crypt, MAXPWLEN);\r\n\t}\r\n\tm_pref_QuerySetting=2;\r\n\tm_pref_QueryTimeout=10;\r\n\tm_pref_QueryDisableTime=0;\r\n\tm_pref_QueryAccept=0;\r\n\tm_pref_IdleTimeout=0;\r\n\tm_pref_MaxViewerSetting = 0;\r\n\tm_pref_MaxViewers = 128;\r\n\tm_pref_EnableRemoteInputs=TRUE;\r\n\tm_pref_DisableLocalInputs=FALSE;\r\n\tm_pref_EnableJapInput=FALSE;\r\n\tm_pref_EnableUnicodeInput=FALSE;\r\n\tm_pref_EnableWin8Helper=FALSE;\r\n\tm_pref_clearconsole=FALSE;\r\n\tm_pref_LockSettings=-1;\r\n\tm_pref_Collabo=false;\r\n\r\n\tm_pref_Frame = FALSE;\r\n\tm_pref_Notification = FALSE;\r\n\tm_pref_OSD = FALSE;\r\n\tm_pref_NotificationSelection = 0;\r\n\r\n\tm_pref_RemoveWallpaper=FALSE;\r\n\t// adzm - 2010-07 - Disable more effects or font smoothing\r\n\tm_pref_RemoveEffects=FALSE;\r\n\tm_pref_RemoveFontSmoothing=FALSE;\r\n    m_alloweditclients = TRUE;\r\n\tm_allowshutdown = TRUE;\r\n\tm_allowproperties = TRUE;\r\n\tm_allowInjection = FALSE;\r\n\r\n\t// Modif sf@2002\r\n\tm_pref_SingleWindow = FALSE;\r\n\tm_pref_UseDSMPlugin = FALSE;\r\n\t*m_pref_szDSMPlugin = '\\0';\r\n\tm_pref_DSMPluginConfig[0] = '\\0';\r\n\r\n\tm_pref_EnableFileTransfer = TRUE;\r\n\tm_pref_FTUserImpersonation = TRUE;\r\n\tm_pref_EnableBlankMonitor = TRUE;\r\n\tm_pref_BlankInputsOnly = FALSE;\r\n\tm_pref_QueryIfNoLogon = FALSE;\r\n\tm_pref_DefaultScale = 1;\r\n\r\n\tLoadUserPrefsFromIniFile();\r\n\tm_allowshutdown = myIniFile.ReadInt(\"admin\", \"AllowShutdown\", m_allowshutdown);\r\n\tm_allowproperties = myIniFile.ReadInt(\"admin\", \"AllowProperties\", m_allowproperties);\r\n\tm_allowInjection = myIniFile.ReadInt(\"admin\", \"AllowInjection\", m_allowInjection);\r\n\tm_alloweditclients = myIniFile.ReadInt(\"admin\", \"AllowEditClients\", m_alloweditclients);\r\n\r\n    m_ftTimeout = myIniFile.ReadInt(\"admin\", \"FileTransferTimeout\", m_ftTimeout);\r\n    if (m_ftTimeout > 600)\r\n        m_ftTimeout = 600;\r\n\r\n    m_keepAliveInterval = myIniFile.ReadInt(\"admin\", \"KeepAliveInterval\", m_keepAliveInterval);\r\n\tm_IdleInputTimeout = myIniFile.ReadInt(\"admin\", \"IdleInputTimeout\", m_IdleInputTimeout);\r\n\r\n    if (m_keepAliveInterval >= (m_ftTimeout - KEEPALIVE_HEADROOM))\r\n        m_keepAliveInterval = m_ftTimeout - KEEPALIVE_HEADROOM;\r\n\r\n    m_server->SetFTTimeout(m_ftTimeout);\r\n    m_server->SetKeepAliveInterval(m_keepAliveInterval);\r\n\tm_server->SetIdleInputTimeout(m_IdleInputTimeout);\r\n    \r\n\tmyIniFile.ReadString(\"admin\", \"service_commandline\", service_commandline, 1024);\r\n\tmyIniFile.ReadString(\"admin\", \"accept_reject_mesg\", accept_reject_mesg, 512);\r\n\r\n\tApplyUserPrefs();\r\n}\r\n\r\n\r\nvoid vncProperties::LoadUserPrefsFromIniFile()\r\n{\r\n\t// Modif sf@2002\r\n\tm_pref_EnableFileTransfer = myIniFile.ReadInt(\"admin\", \"FileTransferEnabled\", m_pref_EnableFileTransfer);\r\n\tm_pref_FTUserImpersonation = myIniFile.ReadInt(\"admin\", \"FTUserImpersonation\", m_pref_FTUserImpersonation); // sf@2005\r\n\tm_pref_EnableBlankMonitor = myIniFile.ReadInt(\"admin\", \"BlankMonitorEnabled\", m_pref_EnableBlankMonitor);\r\n\tm_pref_BlankInputsOnly = myIniFile.ReadInt(\"admin\", \"BlankInputsOnly\", m_pref_BlankInputsOnly); //PGM\r\n\tm_pref_DefaultScale = myIniFile.ReadInt(\"admin\", \"DefaultScale\", m_pref_DefaultScale);\r\n\r\n\tm_pref_UseDSMPlugin = myIniFile.ReadInt(\"admin\", \"UseDSMPlugin\", m_pref_UseDSMPlugin);\r\n\tmyIniFile.ReadString(\"admin\", \"DSMPlugin\",m_pref_szDSMPlugin,128);\r\n\t\r\n\t//adzm 2010-05-12 - dsmplugin config\r\n\tmyIniFile.ReadString(\"admin\", \"DSMPluginConfig\", m_pref_DSMPluginConfig, 512);\r\n\t\r\n\tm_pref_Primary = myIniFile.ReadInt(\"admin\", \"primary\", m_pref_Primary);\r\n\tm_pref_Secondary = myIniFile.ReadInt(\"admin\", \"secondary\", m_pref_Secondary);\r\n\r\n\t// Connection prefs\r\n\tm_pref_SockConnect=myIniFile.ReadInt(\"admin\", \"SocketConnect\", m_pref_SockConnect);\r\n\tm_pref_HTTPConnect=myIniFile.ReadInt(\"admin\", \"HTTPConnect\", m_pref_HTTPConnect);\r\n\tm_pref_AutoPortSelect=myIniFile.ReadInt(\"admin\", \"AutoPortSelect\", m_pref_AutoPortSelect);\r\n\tm_pref_PortNumber=myIniFile.ReadInt(\"admin\", \"PortNumber\", m_pref_PortNumber);\r\n\tm_pref_HttpPortNumber=myIniFile.ReadInt(\"admin\", \"HTTPPortNumber\",\r\n\t\t\t\t\t\t\t\t\tDISPLAY_TO_HPORT(PORT_TO_DISPLAY(m_pref_PortNumber)));\r\n\tm_pref_IdleTimeout=myIniFile.ReadInt(\"admin\", \"IdleTimeout\", m_pref_IdleTimeout);\r\n\t\r\n\tm_pref_RemoveWallpaper=myIniFile.ReadInt(\"admin\", \"RemoveWallpaper\", m_pref_RemoveWallpaper);\r\n\t// adzm - 2010-07 - Disable more effects or font smoothing\r\n\tm_pref_RemoveEffects=myIniFile.ReadInt(\"admin\", \"RemoveEffects\", m_pref_RemoveEffects);\r\n\tm_pref_RemoveFontSmoothing=myIniFile.ReadInt(\"admin\", \"RemoveFontSmoothing\", m_pref_RemoveFontSmoothing);\r\n\r\n\t// Connection querying settings\r\n\tm_pref_QuerySetting=myIniFile.ReadInt(\"admin\", \"QuerySetting\", m_pref_QuerySetting);\r\n\tm_server->SetQuerySetting(m_pref_QuerySetting);\r\n\tm_pref_QueryTimeout=myIniFile.ReadInt(\"admin\", \"QueryTimeout\", m_pref_QueryTimeout);\r\n\tm_server->SetQueryTimeout(m_pref_QueryTimeout);\r\n\tm_pref_QueryDisableTime=myIniFile.ReadInt(\"admin\", \"QueryDisableTime\", m_pref_QueryDisableTime);\r\n\tm_server->SetQueryDisableTime(m_pref_QueryDisableTime);\t\r\n\tm_pref_QueryAccept=myIniFile.ReadInt(\"admin\", \"QueryAccept\", m_pref_QueryAccept);\r\n\tm_server->SetQueryAccept(m_pref_QueryAccept);\r\n\r\n\tm_pref_MaxViewerSetting = myIniFile.ReadInt(\"admin\", \"MaxViewerSetting\", m_pref_MaxViewerSetting);\r\n\tm_server->setMaxViewerSetting(m_pref_MaxViewerSetting);\r\n\tm_pref_MaxViewers = myIniFile.ReadInt(\"admin\", \"MaxViewers\", m_pref_MaxViewers);\r\n\tm_server->setMaxViewers(m_pref_MaxViewers);\r\n\r\n\tm_pref_Collabo = myIniFile.ReadInt(\"admin\", \"Collabo\", m_pref_Collabo);\r\n\tm_server->setCollabo(m_pref_Collabo);\r\n\r\n\tm_pref_Frame = myIniFile.ReadInt(\"admin\", \"Frame\", m_pref_Frame);\r\n\tm_server->setFrame(m_pref_Frame);\r\n\tm_pref_Notification = myIniFile.ReadInt(\"admin\", \"Notification\", m_pref_Notification);\r\n\tm_server->setNotification(m_pref_Notification);\r\n\r\n\tm_pref_OSD = myIniFile.ReadInt(\"admin\", \"OSD\", m_pref_OSD);\r\n\tm_server->setOSD(m_pref_OSD);\r\n\tm_pref_NotificationSelection = myIniFile.ReadInt(\"admin\", \"NotificationSelection\", m_pref_NotificationSelection);\r\n\tm_server->setNotificationSelection(m_pref_NotificationSelection);\r\n\r\n\t// marscha@2006 - Is AcceptDialog required even if no user is logged on\r\n\tm_pref_QueryIfNoLogon=myIniFile.ReadInt(\"admin\", \"QueryIfNoLogon\", m_pref_QueryIfNoLogon);\r\n\tm_server->SetQueryIfNoLogon(m_pref_QueryIfNoLogon);\r\n\r\n\t// Load the password\r\n\tmyIniFile.ReadPassword(m_pref_passwd,MAXPWLEN);\r\n\tmyIniFile.ReadPassword2(m_pref_passwd2,MAXPWLEN); //PGM\r\n\r\n\t// Remote access prefs\r\n\tm_pref_EnableRemoteInputs=myIniFile.ReadInt(\"admin\", \"InputsEnabled\", m_pref_EnableRemoteInputs);\r\n\tm_pref_LockSettings=myIniFile.ReadInt(\"admin\", \"LockSetting\", m_pref_LockSettings);\r\n\tm_pref_DisableLocalInputs=myIniFile.ReadInt(\"admin\", \"LocalInputsDisabled\", m_pref_DisableLocalInputs);\r\n\tm_pref_EnableJapInput=myIniFile.ReadInt(\"admin\", \"EnableJapInput\", m_pref_EnableJapInput);\r\n\tm_pref_EnableUnicodeInput=myIniFile.ReadInt(\"admin\", \"EnableUnicodeInput\", m_pref_EnableUnicodeInput);\r\n\tm_pref_EnableWin8Helper=myIniFile.ReadInt(\"admin\", \"EnableWin8Helper\", m_pref_EnableWin8Helper);\r\n\tm_pref_clearconsole=myIniFile.ReadInt(\"admin\", \"clearconsole\", m_pref_clearconsole);\r\n\tG_SENDBUFFER_EX=myIniFile.ReadInt(\"admin\", \"sendbuffer\", G_SENDBUFFER_EX);\r\n}\r\n\r\nvoid vncProperties::SaveToIniFile()\r\n{\r\n\tif (!m_allowproperties)\r\n\t\treturn;\r\n\r\n\t// SAVE PER-USER PREFS IF ALLOWED\r\n\tif (!myIniFile.IsWritable()  || vncService::RunningAsService())\r\n\t\t\t{\r\n\t\t\t\t//First check if temp file is writable\r\n\t\t\t\tmyIniFile.IniFileSetTemp( m_Tempfile);\r\n\t\t\t\tif (!myIniFile.IsWritable())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvnclog.Print(LL_INTERR, VNCLOG(\"file %s not writable, error saving new settings\\n\"), m_Tempfile);\r\n\t\t\t\t\t\treturn;\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\tif (!Copy_to_Temp( m_Tempfile))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvnclog.Print(LL_INTERR, VNCLOG(\"file %s not writable, error saving new settings\\n\"), m_Tempfile);\r\n\t\t\t\t\t\treturn;\t\t\t\t\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\tSaveUserPrefsToIniFile();\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"DebugMode\", vnclog.GetMode());\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"Avilog\", vnclog.GetVideo());\r\n\t\t\t\tmyIniFile.WriteString(\"admin\", \"path\", vnclog.GetPath());\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"DebugLevel\", vnclog.GetLevel());\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"AllowLoopback\", m_server->LoopbackOk());\r\n#ifdef IPV6V4\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"UseIpv6\", m_server->IPV6());\r\n#endif\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"LoopbackOnly\", m_server->LoopbackOnly());\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"AllowShutdown\", m_allowshutdown);\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"AllowProperties\",  m_allowproperties);\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"AllowInjection\",  m_allowInjection);\t\t\t\t\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"AllowEditClients\", m_alloweditclients);\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"FileTransferTimeout\", m_ftTimeout);\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"KeepAliveInterval\", m_keepAliveInterval);\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"IdleInputTimeout\", m_IdleInputTimeout);\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"DisableTrayIcon\", m_server->GetDisableTrayIcon());\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"rdpmode\", m_server->GetRdpmode());\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"noscreensaver\", m_server->GetNoScreensaver());\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"Secure\", m_server->Secure());\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"MSLogonRequired\", m_server->MSLogonRequired());\r\n\t\t\t\t// Marscha@2004 - authSSP: save \"New MS-Logon\" state\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"NewMSLogon\", m_server->GetNewMSLogon());\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"ReverseAuthRequired\", m_server->GetReverseAuthRequired());\r\n\t\t\t\t// sf@2003 - DSM params here\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"ConnectPriority\", m_server->ConnectPriority());\r\n\t\t\t\tmyIniFile.WriteString(\"admin\", \"service_commandline\", service_commandline);\r\n\t\t\t\tmyIniFile.WriteString(\"admin\", \"accept_reject_mesg\", accept_reject_mesg);\r\n\t\t\t\tmyIniFile.copy_to_secure();\r\n\t\t\t\tmyIniFile.IniFileSetSecure();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\tSaveUserPrefsToIniFile();\r\n\tmyIniFile.WriteInt(\"admin\", \"DebugMode\", vnclog.GetMode());\r\n\tmyIniFile.WriteInt(\"admin\", \"Avilog\", vnclog.GetVideo());\r\n\tmyIniFile.WriteString(\"admin\", \"path\", vnclog.GetPath());\r\n\tmyIniFile.WriteInt(\"admin\", \"DebugLevel\", vnclog.GetLevel());\r\n\tmyIniFile.WriteInt(\"admin\", \"AllowLoopback\", m_server->LoopbackOk());\r\n#ifdef IPV6V4\r\n\tmyIniFile.WriteInt(\"admin\", \"UseIpv6\", m_server->IPV6());\r\n#endif\r\n\tmyIniFile.WriteInt(\"admin\", \"LoopbackOnly\", m_server->LoopbackOnly());\r\n\tmyIniFile.WriteInt(\"admin\", \"AllowShutdown\", m_allowshutdown);\r\n\tmyIniFile.WriteInt(\"admin\", \"AllowProperties\",  m_allowproperties);\r\n\tmyIniFile.WriteInt(\"admin\", \"AllowInjection\",  m_allowInjection);\r\n\tmyIniFile.WriteInt(\"admin\", \"AllowEditClients\", m_alloweditclients);\r\n    myIniFile.WriteInt(\"admin\", \"FileTransferTimeout\", m_ftTimeout);\r\n    myIniFile.WriteInt(\"admin\", \"KeepAliveInterval\", m_keepAliveInterval);\r\n\tmyIniFile.WriteInt(\"admin\", \"IdleInputTimeout\", m_IdleInputTimeout);\r\n\tmyIniFile.WriteInt(\"admin\", \"DisableTrayIcon\", m_server->GetDisableTrayIcon());\r\n\tmyIniFile.WriteInt(\"admin\", \"rdpmode\", m_server->GetRdpmode());\r\n\tmyIniFile.WriteInt(\"admin\", \"noscreensaver\", m_server->GetNoScreensaver());\r\n\tmyIniFile.WriteInt(\"admin\", \"Secure\", m_server->Secure());\r\n\tmyIniFile.WriteInt(\"admin\", \"MSLogonRequired\", m_server->MSLogonRequired());\r\n\t// Marscha@2004 - authSSP: save \"New MS-Logon\" state\r\n\tmyIniFile.WriteInt(\"admin\", \"NewMSLogon\", m_server->GetNewMSLogon());\r\n\tmyIniFile.WriteInt(\"admin\", \"ReverseAuthRequired\", m_server->GetReverseAuthRequired());\r\n\t// sf@2003 - DSM params here\r\n\tmyIniFile.WriteInt(\"admin\", \"ConnectPriority\", m_server->ConnectPriority());\r\n\r\n\tmyIniFile.WriteString(\"admin\", \"service_commandline\", service_commandline);\r\n\tmyIniFile.WriteString(\"admin\", \"accept_reject_mesg\", accept_reject_mesg);\r\n\treturn;\r\n}\r\n\r\n\r\nvoid vncProperties::SaveUserPrefsToIniFile()\r\n{\r\n\t// SAVE THE PER USER PREFS\r\n\tvnclog.Print(LL_INTINFO, VNCLOG(\"saving current settings to registry\\n\"));\r\n\r\n\t// Modif sf@2002\r\n\tmyIniFile.WriteInt(\"admin\", \"FileTransferEnabled\", m_server->FileTransferEnabled());\r\n\tmyIniFile.WriteInt(\"admin\", \"FTUserImpersonation\", m_server->FTUserImpersonation()); // sf@2005\r\n\tmyIniFile.WriteInt(\"admin\", \"BlankMonitorEnabled\", m_server->BlankMonitorEnabled());\r\n\tmyIniFile.WriteInt(\"admin\", \"BlankInputsOnly\", m_server->BlankInputsOnly()); //PGM\r\n\r\n\tmyIniFile.WriteInt(\"admin\", \"DefaultScale\", m_server->GetDefaultScale());\r\n\r\n\tmyIniFile.WriteInt(\"admin\", \"UseDSMPlugin\", m_server->IsDSMPluginEnabled());\r\n\r\n\tmyIniFile.WriteString(\"admin\", \"DSMPlugin\",m_server->GetDSMPluginName());\r\n\r\n\t//adzm 2010-05-12 - dsmplugin config\r\n\t//myIniFile.WriteString(\"admin\", \"DSMPluginConfig\", m_server->GetDSMPluginConfig());\r\n\r\n\tmyIniFile.WriteInt(\"admin\", \"primary\", m_server->Primary());\r\n\tmyIniFile.WriteInt(\"admin\", \"secondary\", m_server->Secondary());\r\n\r\n\t// Connection prefs\r\n\tmyIniFile.WriteInt(\"admin\", \"SocketConnect\", m_server->SockConnected());\r\n\tmyIniFile.WriteInt(\"admin\", \"HTTPConnect\", m_server->HTTPConnectEnabled());\r\n\tmyIniFile.WriteInt(\"admin\", \"AutoPortSelect\", m_server->AutoPortSelect());\r\n\tif (!m_server->AutoPortSelect()) {\r\n\t\tmyIniFile.WriteInt(\"admin\", \"PortNumber\", m_server->GetPort());\r\n\t\tmyIniFile.WriteInt(\"admin\", \"HTTPPortNumber\", m_server->GetHttpPort());\r\n\t}\r\n\tmyIniFile.WriteInt(\"admin\", \"InputsEnabled\", m_server->RemoteInputsEnabled());\r\n\tmyIniFile.WriteInt(\"admin\", \"LocalInputsDisabled\", m_server->LocalInputsDisabled());\r\n\tmyIniFile.WriteInt(\"admin\", \"IdleTimeout\", m_server->AutoIdleDisconnectTimeout());\r\n\tmyIniFile.WriteInt(\"admin\", \"EnableJapInput\", m_server->JapInputEnabled());\r\n\tmyIniFile.WriteInt(\"admin\", \"EnableUnicodeInput\", m_server->UnicodeInputEnabled());\r\n\tmyIniFile.WriteInt(\"admin\", \"EnableWin8Helper\", m_server->Win8HelperEnabled());\r\n\r\n\t// Connection querying settings\r\n\tmyIniFile.WriteInt(\"admin\", \"QuerySetting\", m_server->QuerySetting());\r\n\tmyIniFile.WriteInt(\"admin\", \"QueryTimeout\", m_server->QueryTimeout());\r\n\tmyIniFile.WriteInt(\"admin\", \"QueryDisableTime\", m_server->QueryDisableTime());\r\n\tmyIniFile.WriteInt(\"admin\", \"QueryAccept\", m_server->QueryAcceptForSave());\r\n\tmyIniFile.WriteInt(\"admin\", \"MaxViewerSetting\", m_server->getMaxViewerSetting());\r\n\tmyIniFile.WriteInt(\"admin\", \"MaxViewers\", m_server->getMaxViewers());\r\n\tmyIniFile.WriteInt(\"admin\", \"Collabo\", m_server->getCollabo());\r\n\tmyIniFile.WriteInt(\"admin\", \"Frame\", m_server->getFrame());\r\n\tmyIniFile.WriteInt(\"admin\", \"Notification\", m_server->getNotification());\r\n\tmyIniFile.WriteInt(\"admin\", \"OSD\", m_server->getOSD());\r\n\tmyIniFile.WriteInt(\"admin\", \"NotificationSelection\", m_server->getNotificationSelection());\r\n\t// Lock settings\r\n\tmyIniFile.WriteInt(\"admin\", \"LockSetting\", m_server->LockSettings());\r\n\r\n\t// Wallpaper removal\r\n\tmyIniFile.WriteInt(\"admin\", \"RemoveWallpaper\", m_server->RemoveWallpaperEnabled());\r\n\t// UI Effects\r\n\t// adzm - 2010-07 - Disable more effects or font smoothing\r\n\tmyIniFile.WriteInt(\"admin\", \"RemoveEffects\", m_server->RemoveEffectsEnabled());\r\n\tmyIniFile.WriteInt(\"admin\", \"RemoveFontSmoothing\", m_server->RemoveFontSmoothingEnabled());\r\n\r\n\t// Save the password\r\n\tchar passwd[MAXPWLEN];\r\n\tm_server->GetPassword(passwd);\r\n\tmyIniFile.WritePassword(passwd);\r\n\tmemset(passwd, '\\0', MAXPWLEN); //PGM\r\n\tm_server->GetPassword2(passwd); //PGM\r\n\tmyIniFile.WritePassword2(passwd); //PGM\r\n}\r\n\r\n\r\nvoid vncProperties::ReloadDynamicSettings()\r\n{\r\n\tchar username[UNLEN+1];\r\n\r\n\t// Get the user name / service name\r\n\tif (!vncService::CurrentUser((char *)&username, sizeof(username)))\r\n\t{\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - NO current user\\n\"));\r\n\t\treturn;\r\n\t}\r\n\r\n\t// If there is no user logged on them default to SYSTEM\r\n\tif (strcmp(username, \"\") == 0)\r\n\t{\r\n\t\t//vnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Force USER SYSTEM 2\\n\"));\r\n\t\tstrcpy_s((char *)&username, UNLEN+1, \"SYSTEM\");\r\n\t}\r\n\r\n\t// Logging/debugging prefs\r\n\tvnclog.SetMode(myIniFile.ReadInt(\"admin\", \"DebugMode\", 0));\r\n\tvnclog.SetLevel(myIniFile.ReadInt(\"admin\", \"DebugLevel\", 0));\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nvoid Secure_Save_Plugin_Config(char *szPlugin)\r\n{\r\n\tHANDLE hProcess = NULL, hPToken = NULL;\r\n\tDWORD id = vncService::GetExplorerLogonPid();\r\n\tif (id != 0)\r\n\t{\r\n\t\thProcess = OpenProcess(MAXIMUM_ALLOWED, FALSE, id);\r\n\t\tif (!hProcess) goto error3;\r\n\t\tif (!OpenProcessToken(hProcess, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY\r\n\t\t\t| TOKEN_DUPLICATE | TOKEN_ASSIGN_PRIMARY | TOKEN_ADJUST_SESSIONID\r\n\t\t\t| TOKEN_READ | TOKEN_WRITE, &hPToken))\r\n\t\t{\r\n\t\t\tCloseHandle(hProcess);\r\n\t\t\tgoto error3;\r\n\t\t}\r\n\r\n\t\tchar dir[MAX_PATH];\r\n\t\tchar exe_file_name[MAX_PATH];\r\n\t\tGetModuleFileName(0, exe_file_name, MAX_PATH);\r\n\t\tstrcpy_s(dir, exe_file_name);\r\n\t\tstrcat_s(dir, \" -dsmpluginhelper \");\r\n\t\tstrcat_s(dir, szPlugin);\r\n\r\n\t\t{\r\n\t\t\tSTARTUPINFO          StartUPInfo;\r\n\t\t\tPROCESS_INFORMATION  ProcessInfo;\r\n\t\t\tHANDLE Token = NULL;\r\n\t\t\tHANDLE process = NULL;\r\n\t\t\tZeroMemory(&StartUPInfo, sizeof(STARTUPINFO));\r\n\t\t\tZeroMemory(&ProcessInfo, sizeof(PROCESS_INFORMATION));\r\n\t\t\tStartUPInfo.wShowWindow = SW_SHOW;\r\n\t\t\tStartUPInfo.lpDesktop = \"Winsta0\\\\Default\";\r\n\t\t\tStartUPInfo.cb = sizeof(STARTUPINFO);\r\n\r\n\t\t\tCreateProcessAsUser(hPToken, NULL, dir, NULL, NULL, FALSE, DETACHED_PROCESS, NULL, NULL, &StartUPInfo, &ProcessInfo);\r\n\t\t\tDWORD errorcode = GetLastError();\r\n\t\t\tif (errorcode == 1314) goto error1;\r\n\t\t\tif (process) CloseHandle(process);\r\n\t\t\tif (Token) CloseHandle(Token);\r\n\t\t\tif (ProcessInfo.hProcess) CloseHandle(ProcessInfo.hProcess);\r\n\t\t\tif (ProcessInfo.hThread) CloseHandle(ProcessInfo.hThread);\t\r\n\t\t\treturn;\r\n\t\terror1:\r\n\t\t\tSecure_Plugin(szPlugin);\r\n\t\t}\r\n\terror3:\r\n\t\treturn;\r\n\t}\r\n}\r\n\r\n\r\nvoid Secure_Plugin_elevated(char *szPlugin)\r\n{\r\n\tchar dir[MAX_PATH];\r\n\tchar exe_file_name[MAX_PATH];\r\n\tstrcpy_s(dir, \" -dsmplugininstance \");\r\n\tstrcat_s(dir, szPlugin);\r\n\r\n\tGetModuleFileName(0, exe_file_name, MAX_PATH);\r\n\tSHELLEXECUTEINFO shExecInfo;\r\n\tshExecInfo.cbSize = sizeof(SHELLEXECUTEINFO);\r\n\tshExecInfo.fMask = NULL;\r\n\tshExecInfo.hwnd = GetForegroundWindow();\r\n\tshExecInfo.lpVerb = \"runas\";\r\n\tshExecInfo.lpFile = exe_file_name;\r\n\tshExecInfo.lpParameters = dir;\r\n\tshExecInfo.lpDirectory = NULL;\r\n\tshExecInfo.nShow = SW_HIDE;\r\n\tshExecInfo.hInstApp = NULL;\r\n\tShellExecuteEx(&shExecInfo);\r\n}\r\n\r\nvoid Secure_Plugin(char *szPlugin)\r\n{\r\n\tCDSMPlugin* m_pDSMPlugin = NULL;\r\n\tm_pDSMPlugin = new CDSMPlugin();\r\n\tm_pDSMPlugin->LoadPlugin(szPlugin, false);\r\n\tif (m_pDSMPlugin->IsLoaded())\r\n\t{\r\n\t\tchar szParams[32];\r\n\t\tstrcpy_s(szParams, \"NoPassword,\");\r\n\t\tstrcat_s(szParams, \"server-app\");\r\n\r\n\t\tHDESK desktop;\r\n\t\tdesktop = OpenInputDesktop(0, FALSE,\r\n\t\t\tDESKTOP_CREATEMENU | DESKTOP_CREATEWINDOW |\r\n\t\t\tDESKTOP_ENUMERATE | DESKTOP_HOOKCONTROL |\r\n\t\t\tDESKTOP_WRITEOBJECTS | DESKTOP_READOBJECTS |\r\n\t\t\tDESKTOP_SWITCHDESKTOP | GENERIC_WRITE\r\n\t\t\t);\r\n\r\n\t\tif (desktop == NULL)\r\n\t\t\tvnclog.Print(LL_INTERR, VNCLOG(\"OpenInputdesktop Error \\n\"));\r\n\t\telse\r\n\t\t\tvnclog.Print(LL_INTERR, VNCLOG(\"OpenInputdesktop OK\\n\"));\r\n\r\n\t\tHDESK old_desktop = GetThreadDesktop(GetCurrentThreadId());\r\n\t\tDWORD dummy;\r\n\r\n\t\tchar new_name[256];\r\n\t\tif (desktop)\r\n\t\t{\r\n\t\t\tif (!GetUserObjectInformation(desktop, UOI_NAME, &new_name, 256, &dummy))\r\n\t\t\t{\r\n\t\t\t\tvnclog.Print(LL_INTERR, VNCLOG(\"!GetUserObjectInformation \\n\"));\r\n\t\t\t}\r\n\r\n\t\t\tvnclog.Print(LL_INTERR, VNCLOG(\"SelectHDESK to %s (%x) from %x\\n\"), new_name, desktop, old_desktop);\r\n\r\n\t\t\tif (!SetThreadDesktop(desktop))\r\n\t\t\t{\r\n\t\t\t\tvnclog.Print(LL_INTERR, VNCLOG(\"SelectHDESK:!SetThreadDesktop \\n\"));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tHRESULT hr = CoInitialize(NULL);\r\n\t\tHWND hwnd2 = CreateWindowA(\"STATIC\", \"dummy\", WS_VISIBLE, 0, 0, 100, 100, NULL, NULL, NULL, NULL);\r\n\t\tShowWindow(hwnd2, SW_HIDE);\r\n\t\tchar* szNewConfig = NULL;\r\n\t\tchar DSMPluginConfig[512];\r\n\t\tDSMPluginConfig[0] = '\\0';\r\n\t\tIniFile myIniFile;\r\n\t\tmyIniFile.ReadString(\"admin\", \"DSMPluginConfig\", DSMPluginConfig, 512);\r\n\t\tm_pDSMPlugin->SetPluginParams(hwnd2, szParams, DSMPluginConfig, &szNewConfig);\r\n\r\n\r\n\t\tif (szNewConfig != NULL && strlen(szNewConfig) > 0) {\r\n\t\t\tstrcpy_s(DSMPluginConfig, 511, szNewConfig);\r\n\t\t}\r\n\t\tmyIniFile.WriteString(\"admin\", \"DSMPluginConfig\", DSMPluginConfig);\r\n\r\n\r\n\t\tCoUninitialize();\r\n\t\tSetThreadDesktop(old_desktop);\r\n\t\tif (desktop) CloseDesktop(desktop);\r\n\t}\r\n\tif (m_pDSMPlugin != NULL) delete(m_pDSMPlugin);\r\n}\r\n\r\nvoid vncProperties::ExpandBox(HWND hDlg, BOOL fExpand)\r\n{\r\n\t// if the dialog is already in the requested state, return\r\n\t// immediately.\r\n\tif (fExpand == m_bExpanded) return;\r\n\r\n\tRECT rcWnd, rcDefaultBox, rcChild, rcIntersection;\r\n\tHWND wndChild = NULL;\r\n\tHWND wndDefaultBox = NULL;\r\n\r\n\t// get the window of the button \r\n\tHWND  pCtrl = GetDlgItem(hDlg, IDC_SHOWOPTIONS);\r\n\tif (pCtrl == NULL) return;\r\n\r\n\twndDefaultBox = GetDlgItem(hDlg, IDC_DEFAULTBOX);\r\n\tif (wndDefaultBox == NULL) return;\r\n\r\n\tif (!fExpand) SendMessage(GetDlgItem(hDlg, IDC_BUTTON_EXPAND), BM_SETIMAGE, (WPARAM)IMAGE_BITMAP, (LPARAM)hBmpExpand);\r\n\telse SendMessage(GetDlgItem(hDlg, IDC_BUTTON_EXPAND), BM_SETIMAGE, (WPARAM)IMAGE_BITMAP, (LPARAM)hBmpCollaps);\r\n\t// retrieve coordinates for the default child window\r\n\tGetWindowRect(wndDefaultBox, &rcDefaultBox);\r\n\r\n\t// enable/disable all of the child window outside of the default box.\r\n\twndChild = GetTopWindow(hDlg);\r\n\r\n\tfor (; wndChild != NULL; wndChild = GetWindow(wndChild, GW_HWNDNEXT))\r\n\t{\r\n\t\t// get rectangle occupied by child window in screen coordinates.\r\n\t\tGetWindowRect(wndChild, &rcChild);\r\n\r\n\t\tif (!IntersectRect(&rcIntersection, &rcChild, &rcDefaultBox))\r\n\t\t{\r\n\t\t\tEnableWindow(wndChild, fExpand);\r\n\t\t}\r\n\t}\r\n\r\n\tif (!fExpand)  // we are contracting\r\n\t{\r\n\t\t_ASSERT(m_bExpanded);\r\n\t\tGetWindowRect(hDlg, &rcWnd);\r\n\r\n\t\t// this is the first time we are being called to shrink the dialog\r\n\t\t// box.  The dialog box is currently in its expanded size and we must\r\n\t\t// save the expanded width and height so that it can be restored\r\n\t\t// later when the dialog box is expanded.\r\n\r\n\t\tif (cx == 0 && cy == 0)\r\n\t\t{\r\n\t\t\tcx = rcDefaultBox.right - rcWnd.left;\r\n\t\t\tcy = rcWnd.bottom - rcWnd.top;\r\n\r\n\t\t\t// we also hide the default box here so that it is not visible\r\n\t\t\tShowWindow(wndDefaultBox, SW_HIDE);\r\n\t\t}\r\n\r\n\r\n\t\t// shrink the dialog box so that it encompasses everything from the top,\r\n\t\t// left up to and including the default box.\r\n\t\tSetWindowPos(hDlg, NULL, 0, 0,\r\n\t\t\trcDefaultBox.right - rcWnd.left,\r\n\t\t\trcDefaultBox.bottom - rcWnd.top,\r\n\t\t\tSWP_NOZORDER | SWP_NOMOVE);\r\n\r\n\t\tSetWindowText(pCtrl, \"Advanced options\");\r\n\r\n\t\t// record that the dialog is contracted.\r\n\t\tm_bExpanded = FALSE;\r\n\t}\r\n\telse // we are expanding\r\n\t{\r\n\t\t_ASSERT(!m_bExpanded);\r\n\t\tSetWindowPos(hDlg, NULL, 0, 0, cx, cy, SWP_NOZORDER | SWP_NOMOVE);\r\n\r\n\t\t// make sure that the entire dialog box is visible on the user's\r\n\t\t// screen.\r\n\t\tSendMessage(hDlg, DM_REPOSITION, 0, 0);\r\n\t\tSetWindowText(pCtrl, \"Hide\");\r\n\t\tm_bExpanded = TRUE;\r\n\t}\r\n}"], "fixing_code": ["//  Copyright (C) 2002 UltraVNC Team Members. All Rights Reserved.\r\n//  Copyright (C) 2000-2002 Const Kaplinsky. All Rights Reserved.\r\n//  Copyright (C) 2002 TightVNC. All Rights Reserved.\r\n//  Copyright (C) 2002 RealVNC Ltd. All Rights Reserved.\r\n//  Copyright (C) 1999 AT&T Laboratories Cambridge. All Rights Reserved.\r\n//\r\n//  This file is part of the VNC system.\r\n//\r\n//  The VNC system is free software; you can redistribute it and/or modify\r\n//  it under the terms of the GNU General Public License as published by\r\n//  the Free Software Foundation; either version 2 of the License, or\r\n//  (at your option) any later version.\r\n//\r\n//  This program is distributed in the hope that it will be useful,\r\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n//  GNU General Public License for more details.\r\n//\r\n//  You should have received a copy of the GNU General Public License\r\n//  along with this program; if not, write to the Free Software\r\n//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,\r\n//  USA.\r\n//\r\n// If the source code for the VNC system is not available from the place \r\n// whence you received this file, check http://www.uk.research.att.com/vnc or contact\r\n// the authors on vnc@uk.research.att.com for information on obtaining it.\r\n\r\n\r\n// vncProperties.cpp\r\n\r\n// Implementation of the Properties dialog!\r\n\r\n#include \"stdhdrs.h\"\r\n#include \"lmcons.h\"\r\n#include \"vncservice.h\"\r\n\r\n#include \"winvnc.h\"\r\n#include \"vncproperties.h\"\r\n#include \"vncserver.h\"\r\n#include \"vncpasswd.h\"\r\n#include \"vncOSVersion.h\"\r\n#include \"common/win32_helpers.h\"\r\n#include \"vncConnDialog.h\"\r\n\r\n#include \"Localization.h\" // ACT : Add localization on messages\r\n#include \"shlwapi.h\"\r\n\r\n//extern HINSTANCE g_hInst;\r\n\r\nbool RunningAsAdministrator ();\r\nconst char WINVNC_REGISTRY_KEY [] = \"Software\\\\ORL\\\\WinVNC3\";\r\n\r\n// [v1.0.2-jp1 fix] Load resouce from dll\r\nextern HINSTANCE\thInstResDLL;\r\n\r\n// Marscha@2004 - authSSP: Function pointer for dyn. linking\r\ntypedef void (*vncEditSecurityFn) (HWND hwnd, HINSTANCE hInstance);\r\nvncEditSecurityFn vncEditSecurity = 0;\r\n// ethernet packet 1500 - 40 tcp/ip header - 8 PPPoE info\r\n//unsigned int G_SENDBUFFER=8192;\r\nunsigned int G_SENDBUFFER_EX=1452;\r\n\r\nvoid Secure_Save_Plugin_Config(char *szPlugin);\r\nvoid Secure_Plugin_elevated(char *szPlugin);\r\nvoid Secure_Plugin(char *szPlugin);\r\n\r\n// Constructor & Destructor\r\nvncProperties::vncProperties()\r\n{\r\n    m_alloweditclients = TRUE;\r\n\tm_allowproperties = TRUE;\r\n\tm_allowInjection = FALSE;\r\n\tm_allowshutdown = TRUE;\r\n\tm_dlgvisible = FALSE;\r\n\tm_usersettings = TRUE;\r\n\tLock_service_helper=TRUE;\r\n\tm_fUseRegistry = FALSE;\r\n    m_ftTimeout = FT_RECV_TIMEOUT;\r\n    m_keepAliveInterval = KEEPALIVE_INTERVAL;\r\n\tm_IdleInputTimeout = 0;\r\n\tm_pref_Primary=true;\r\n\tm_pref_Secondary=false;\r\n\r\n\tm_pref_DSMPluginConfig[0] = '\\0';\r\n\thBmpExpand = (HBITMAP)::LoadImage(hInstResDLL, MAKEINTRESOURCE(IDB_EXPAND), IMAGE_BITMAP, 0, 0, LR_LOADTRANSPARENT);\r\n\thBmpCollaps = (HBITMAP)::LoadImage(hInstResDLL, MAKEINTRESOURCE(IDB_COLLAPS), IMAGE_BITMAP, 0, 0, LR_LOADTRANSPARENT);\r\n\tm_bExpanded = true;\t\r\n\tcy = 0;\r\n\tcx = 0;\r\n\tservice_commandline[0] = '\\0';\r\n\taccept_reject_mesg[0] = '\\0';\r\n\r\n}\r\n\r\nvncProperties::~vncProperties()\r\n{\r\n}\r\n\r\n// Initialisation\r\nBOOL\r\nvncProperties::Init(vncServer *server)\r\n{\r\n\t// Save the server pointer\r\n\tm_server = server;\r\n\r\n\t// sf@2007 - Registry mode can still be forced for backward compatibility and OS version < Vista\r\n\tm_fUseRegistry = ((myIniFile.ReadInt(\"admin\", \"UseRegistry\", 0) == 1) ? TRUE : FALSE);\r\n\r\n\t// Load the settings\r\n\tif (m_fUseRegistry)\r\n\t\tLoad(TRUE);\r\n\telse\r\n\t\tLoadFromIniFile();\r\n\r\n\t// If the password is empty then always show a dialog\r\n\tchar passwd[MAXPWLEN];\r\n\tm_server->GetPassword(passwd);\r\n\t{\r\n\t    vncPasswd::ToText plain(passwd, m_pref_Secure);\r\n\t    if (strlen(plain) == 0)\r\n\t\t\t if (!m_allowproperties || !RunningAsAdministrator ()) {\r\n\t\t\t\tif(m_server->AuthRequired()) {\r\n\t\t\t\t\tMessageBoxSecure(NULL, sz_ID_NO_PASSWD_NO_OVERRIDE_ERR,\r\n\t\t\t\t\t\t\t\tsz_ID_WINVNC_ERROR,\r\n\t\t\t\t\t\t\t\tMB_OK | MB_ICONSTOP);\r\n\t\t\t\t\tPostQuitMessage(0);\r\n\t\t\t\t}\r\n\t\t\t\t/*else {\r\n\t\t\t\t\tif (!vncService::RunningAsService())\r\n\t\t\t\t\t\tMessageBoxSecure(NULL, sz_ID_NO_PASSWD_NO_OVERRIDE_WARN,\r\n\t\t\t\t\t\t\t\tsz_ID_WINVNC_ERROR,\r\n\t\t\t\t\t\t\t\tMB_OK | MB_ICONEXCLAMATION);\r\n\t\t\t\t}*/\r\n\t\t\t} else {\r\n\t\t\t\t// If null passwords are not allowed, ensure that one is entered!\r\n\t\t\t\tif (m_server->AuthRequired()) {\r\n\t\t\t\t\tchar username[UNLEN+1];\r\n\t\t\t\t\tif (!vncService::CurrentUser(username, sizeof(username)))\r\n\t\t\t\t\t\treturn FALSE;\r\n\t\t\t\t\tif (strcmp(username, \"\") == 0) {\r\n\t\t\t\t\t\tLock_service_helper=true;\r\n\t\t\t\t\t\tMessageBoxSecure(NULL, sz_ID_NO_PASSWD_NO_LOGON_WARN,\r\n\t\t\t\t\t\t\t\t\tsz_ID_WINVNC_ERROR,\r\n\t\t\t\t\t\t\t\t\tMB_OK | MB_ICONEXCLAMATION);\r\n\t\t\t\t\t\tShowAdmin(TRUE, FALSE);\r\n\t\t\t\t\t\tLock_service_helper=false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tShowAdmin(TRUE, TRUE);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t}\r\n\tLock_service_helper=false;\r\n\treturn TRUE;\r\n}\r\n\r\n\r\n\r\n// Dialog box handling functions\r\nvoid\r\nvncProperties::ShowAdmin(BOOL show, BOOL usersettings)\r\n{\r\n//\tif (Lock_service_helper) return;\r\n\tHANDLE hProcess=NULL;\r\n\tHANDLE hPToken=NULL;\r\n\tDWORD id = vncService::GetExplorerLogonPid();\r\n\tint iImpersonateResult=0;\r\n\t{\r\n\t\tchar WORKDIR[MAX_PATH];\r\n\t\tif (!GetTempPath(MAX_PATH,WORKDIR))\r\n\t\t\t{\r\n\t\t\t\t//Function failed, just set something\r\n\t\t\t\tif (GetModuleFileName(NULL, WORKDIR, MAX_PATH))\r\n\t\t\t\t{\r\n\t\t\t\t\tchar* p = strrchr(WORKDIR, '\\\\');\r\n\t\t\t\t\tif (p == NULL) return;\r\n\t\t\t\t\t*p = '\\0';\r\n\t\t\t\t}\r\n\t\t\t\t\tstrcpy_s(m_Tempfile,\"\");\r\n\t\t\t\t\tstrcat_s(m_Tempfile,WORKDIR);//set the directory\r\n\t\t\t\t\tstrcat_s(m_Tempfile,\"\\\\\");\r\n\t\t\t\t\tstrcat_s(m_Tempfile,INIFILE_NAME);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tstrcpy_s(m_Tempfile,\"\");\r\n\t\t\tstrcat_s(m_Tempfile,WORKDIR);//set the directory\r\n\t\t\tstrcat_s(m_Tempfile,INIFILE_NAME);\r\n\t\t}\r\n\t}\r\n\tif (id!=0 && usersettings)\r\n\t\t\t{\r\n\t\t\t\thProcess = OpenProcess(MAXIMUM_ALLOWED,FALSE,id);\r\n\t\t\t\tif(OpenProcessToken(hProcess,TOKEN_ADJUST_PRIVILEGES|TOKEN_QUERY\r\n\t\t\t\t\t\t\t\t\t\t|TOKEN_DUPLICATE|TOKEN_ASSIGN_PRIMARY|TOKEN_ADJUST_SESSIONID\r\n\t\t\t\t\t\t\t\t\t\t|TOKEN_READ|TOKEN_WRITE,&hPToken))\r\n\t\t\t\t{\r\n\t\t\t\t\tImpersonateLoggedOnUser(hPToken);\r\n\t\t\t\t\tiImpersonateResult = GetLastError();\r\n\t\t\t\t\tif(iImpersonateResult == ERROR_SUCCESS)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tExpandEnvironmentStringsForUser(hPToken, \"%TEMP%\", m_Tempfile, MAX_PATH);\r\n\t\t\t\t\t\tstrcat_s(m_Tempfile,\"\\\\\");\r\n\t\t\t\t\t\tstrcat_s(m_Tempfile,INIFILE_NAME);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t}\r\n\r\n\tif (!m_allowproperties) \r\n\t{\r\n\t\tif(iImpersonateResult == ERROR_SUCCESS)RevertToSelf();\r\n\t\tif (hProcess) CloseHandle(hProcess);\r\n\t\tif (hPToken) CloseHandle(hPToken);\r\n\t\treturn;\r\n\t}\r\n\t/*if (!RunningAsAdministrator ())\r\n\t\t{\r\n\t\tif(iImpersonateResult == ERROR_SUCCESS)RevertToSelf();\r\n\t\tCloseHandle(hProcess);\r\n\t\tCloseHandle(hPToken);\r\n\t\treturn;\r\n\t\t}*/\r\n\r\n\tif (m_fUseRegistry)\r\n\t{\r\n\t\tif (vncService::RunningAsService()) usersettings=false;\r\n\t\tm_usersettings=usersettings;\r\n\t}\r\n\r\n\tif (show)\r\n\t{\r\n\r\n\t\tif (!m_fUseRegistry) // Use the ini file\r\n\t\t{\r\n\t\t\t// We're trying to edit the default local settings - verify that we can\r\n\t\t\t/*if (!myIniFile.IsWritable())\r\n\t\t\t{\r\n\t\t\t\tif(iImpersonateResult == ERROR_SUCCESS)RevertToSelf();\r\n\t\t\t\tCloseHandle(hProcess);\r\n\t\t\t\tCloseHandle(hPToken);\r\n\t\t\t\treturn;\r\n\t\t\t}*/\r\n\t\t}\r\n\t\telse // Use the registry\r\n\t\t{\r\n\t\t\t// Verify that we know who is logged on\r\n\t\t\tif (usersettings)\r\n\t\t\t{\r\n\t\t\t\tchar username[UNLEN+1];\r\n\t\t\t\tif (!vncService::CurrentUser(username, sizeof(username)))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(iImpersonateResult == ERROR_SUCCESS)RevertToSelf();\r\n\t\t\t\t\t\tCloseHandle(hProcess);\r\n\t\t\t\t\t\tCloseHandle(hPToken);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\tif (strcmp(username, \"\") == 0) {\r\n\t\t\t\t\tMessageBoxSecure(NULL, sz_ID_NO_CURRENT_USER_ERR, sz_ID_WINVNC_ERROR, MB_OK | MB_ICONEXCLAMATION);\r\n\t\t\t\t\tif(iImpersonateResult == ERROR_SUCCESS)RevertToSelf();\r\n\t\t\t\t\tCloseHandle(hProcess);\r\n\t\t\t\t\tCloseHandle(hPToken);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// We're trying to edit the default local settings - verify that we can\r\n\t\t\t\tHKEY hkLocal=NULL;\r\n\t\t\t\tHKEY hkDefault=NULL;\r\n\t\t\t\tBOOL canEditDefaultPrefs = 1;\r\n\t\t\t\tDWORD dw;\r\n\t\t\t\tif (RegCreateKeyEx(HKEY_LOCAL_MACHINE,\r\n\t\t\t\t\tWINVNC_REGISTRY_KEY,\r\n\t\t\t\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\t\t\t\tKEY_READ, NULL, &hkLocal, &dw) != ERROR_SUCCESS)\r\n\t\t\t\t\tcanEditDefaultPrefs = 0;\r\n\t\t\t\telse if (RegCreateKeyEx(hkLocal,\r\n\t\t\t\t\t\"Default\",\r\n\t\t\t\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\t\t\t\tKEY_WRITE | KEY_READ, NULL, &hkDefault, &dw) != ERROR_SUCCESS)\r\n\t\t\t\t\tcanEditDefaultPrefs = 0;\r\n\t\t\t\tif (hkLocal) RegCloseKey(hkLocal);\r\n\t\t\t\tif (hkDefault) RegCloseKey(hkDefault);\r\n\r\n\t\t\t\tif (!canEditDefaultPrefs) {\r\n\t\t\t\t\tMessageBoxSecure(NULL, sz_ID_CANNOT_EDIT_DEFAULT_PREFS, sz_ID_WINVNC_ERROR, MB_OK | MB_ICONEXCLAMATION);\r\n\t\t\t\t\tif(iImpersonateResult == ERROR_SUCCESS)RevertToSelf();\r\n\t\t\t\t\tif (hProcess) CloseHandle(hProcess);\r\n\t\t\t\t\tif (hPToken) CloseHandle(hPToken);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Now, if the dialog is not already displayed, show it!\r\n\t\tif (!m_dlgvisible)\r\n\t\t{\r\n\t\t\tif (m_fUseRegistry) \r\n\t\t\t{\r\n\t\t\t\tif (usersettings)\r\n\t\t\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"show per-user Properties\\n\"));\r\n\t\t\t\telse\r\n\t\t\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"show default system Properties\\n\"));\r\n\r\n\t\t\t\t// Load in the settings relevant to the user or system\r\n\t\t\t\t//Load(usersettings);\r\n\t\t\t\tm_usersettings=usersettings;\r\n\t\t\t}\r\n\r\n\t\t\tfor (;;)\r\n\t\t\t{\r\n\t\t\t\tm_returncode_valid = FALSE;\r\n\r\n\t\t\t\t// Do the dialog box\r\n\t\t\t\t// [v1.0.2-jp1 fix]\r\n\t\t\t\t//int result = DialogBoxParam(hAppInstance,\r\n\t\t\t\tm_bExpanded = true;\r\n\t\t\t\tcy = 0;\r\n\t\t\t\tcx = 0;\r\n\t\t\t\tint result = (int)DialogBoxParam(hInstResDLL,\r\n\t\t\t\t    MAKEINTRESOURCE(IDD_PROPERTIES1), \r\n\t\t\t\t    NULL,\r\n\t\t\t\t    (DLGPROC) DialogProc,\r\n\t\t\t\t    (LONG_PTR) this);\r\n\r\n\t\t\t\tif (!m_returncode_valid)\r\n\t\t\t\t    result = IDCANCEL;\r\n\r\n\t\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"dialog result = %d\\n\"), result);\r\n\r\n\t\t\t\tif (result == -1)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Dialog box failed, so quit\r\n\t\t\t\t\tPostQuitMessage(0);\r\n\t\t\t\t\tif(iImpersonateResult == ERROR_SUCCESS)RevertToSelf();\r\n\t\t\t\t\tCloseHandle(hProcess);\r\n\t\t\t\t\tCloseHandle(hPToken);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// We're allowed to exit if the password is not empty\r\n\t\t\t\tchar passwd[MAXPWLEN];\r\n\t\t\t\tm_server->GetPassword(passwd);\r\n\t\t\t\t{\r\n\t\t\t\t    vncPasswd::ToText plain(passwd, m_server->Secure());\r\n\t\t\t\t    if ((strlen(plain) != 0) || !m_server->AuthRequired())\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvnclog.Print(LL_INTERR, VNCLOG(\"warning - empty password\\n\"));\r\n\r\n\t\t\t\t// If we reached here then OK was used & there is no password!\r\n\t\t\t\tint result2 = MessageBoxSecure(NULL, sz_ID_NO_PASSWORD_WARN,\r\n\t\t\t\t\tsz_ID_WINVNC_WARNIN, MB_OK | MB_ICONEXCLAMATION);\r\n\r\n\t\t\t\t// The password is empty, so if OK was used then redisplay the box,\r\n\t\t\t\t// otherwise, if CANCEL was used, close down WinVNC\r\n\t\t\t\tif (result == IDCANCEL)\r\n\t\t\t\t{\r\n\t\t\t\t    vnclog.Print(LL_INTERR, VNCLOG(\"no password - QUITTING\\n\"));\r\n\t\t\t\t    PostQuitMessage(0);\r\n\t\t\t\t    if(iImpersonateResult == ERROR_SUCCESS)RevertToSelf();\r\n\t\t\t\t\tCloseHandle(hProcess);\r\n\t\t\t\t\tCloseHandle(hPToken);\r\n\t\t\t\t\tfShutdownOrdered = true;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\t\t\t\t\r\n\r\n\t\t\t\tomni_thread::sleep(4);\r\n\t\t\t}\r\n\r\n\t\t\t// Load in all the settings\r\n\t\t\t// If you run as service, you reload the saved settings before they are actual saved\r\n\t\t\t// via runas.....\r\n\t\t\tif (!vncService::RunningAsService())\r\n\t\t\t{\r\n\t\t\tif (m_fUseRegistry) \r\n\t\t\t\tLoad(TRUE);\r\n\t\t\telse\r\n\t\t\t\tLoadFromIniFile();\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\tif(iImpersonateResult == ERROR_SUCCESS)RevertToSelf();\r\n\tif (hProcess) CloseHandle(hProcess);\r\n\tif (hPToken) CloseHandle(hPToken);\r\n}\r\n\r\nBOOL CALLBACK\r\nvncProperties::DialogProc(HWND hwnd,\r\n\t\t\t\t\t\t  UINT uMsg,\r\n\t\t\t\t\t\t  WPARAM wParam,\r\n\t\t\t\t\t\t  LPARAM lParam )\r\n{\r\n\t// We use the dialog-box's USERDATA to store a _this pointer\r\n\t// This is set only once WM_INITDIALOG has been recieved, though!\r\n     vncProperties *_this = helper::SafeGetWindowUserData<vncProperties>(hwnd);\r\n\r\n\tswitch (uMsg)\r\n\t{\r\n\r\n\tcase WM_INITDIALOG:\r\n\t\t{\t\t\t\r\n\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"INITDIALOG properties\\n\"));\r\n\t\t\t// Retrieve the Dialog box parameter and use it as a pointer\r\n\t\t\t// to the calling vncProperties object\r\n            helper::SafeSetWindowUserData(hwnd, lParam);\r\n\r\n\t\t\t_this = (vncProperties *) lParam;\r\n\t\t\t_this->m_dlgvisible = TRUE;\r\n\t\t\tif (_this->m_fUseRegistry)\r\n\t\t\t{\r\n\t\t\t\t_this->Load(_this->m_usersettings);\r\n\r\n\t\t\t\t// Set the dialog box's title to indicate which Properties we're editting\r\n\t\t\t\tif (_this->m_usersettings) {\r\n\t\t\t\t\tSetWindowText(hwnd, sz_ID_CURRENT_USER_PROP);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tSetWindowText(hwnd, sz_ID_DEFAULT_SYST_PROP);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t_this->LoadFromIniFile();\r\n\t\t\t}\r\n\r\n\t\t\t// Initialise the properties controls\r\n\t\t\tHWND hConnectSock = GetDlgItem(hwnd, IDC_CONNECT_SOCK);\r\n\r\n\t\t\t// Tight 1.2.7 method\r\n\t\t\tBOOL bConnectSock = _this->m_server->SockConnected();\r\n\t\t\tSendMessage(hConnectSock, BM_SETCHECK, bConnectSock, 0);\r\n\r\n\t\t\t// Set the content of the password field to a predefined string.\r\n\t\t    SetDlgItemText(hwnd, IDC_PASSWORD, \"~~~~~~~~\");\r\n\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PASSWORD), bConnectSock);\r\n\r\n\t\t\t// Set the content of the view-only password field to a predefined string. //PGM\r\n\t\t    SetDlgItemText(hwnd, IDC_PASSWORD2, \"~~~~~~~~\"); //PGM\r\n\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PASSWORD2), bConnectSock); //PGM\r\n\r\n\t\t\t// Set the initial keyboard focus\r\n\t\t\tif (bConnectSock)\r\n\t\t\t{\r\n\t\t\t\tSetFocus(GetDlgItem(hwnd, IDC_PASSWORD));\r\n\t\t\t\tSendDlgItemMessage(hwnd, IDC_PASSWORD, EM_SETSEL, 0, (LPARAM)-1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tSetFocus(hConnectSock);\r\n\t\t\t// Set display/ports settings\r\n\t\t\t_this->InitPortSettings(hwnd);\r\n\r\n\t\t\tHWND hConnectHTTP = GetDlgItem(hwnd, IDC_CONNECT_HTTP);\r\n\t\t\tSendMessage(hConnectHTTP,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->HTTPConnectEnabled(),\r\n\t\t\t\t0);\r\n\r\n\t\t   // Modif sf@2002 - v1.1.0\r\n\t\t   HWND hFileTransfer = GetDlgItem(hwnd, IDC_FILETRANSFER);\r\n           SendMessage(hFileTransfer, BM_SETCHECK, _this->m_server->FileTransferEnabled(), 0);\r\n\r\n\t\t   HWND hFileTransferUserImp = GetDlgItem(hwnd, IDC_FTUSERIMPERSONATION_CHECK);\r\n           SendMessage(hFileTransferUserImp, BM_SETCHECK, _this->m_server->FTUserImpersonation(), 0);\r\n\t\t   \r\n\t\t   HWND hBlank = GetDlgItem(hwnd, IDC_BLANK);\r\n           SendMessage(hBlank, BM_SETCHECK, _this->m_server->BlankMonitorEnabled(), 0);\r\n\t\t   if (!VNC_OSVersion::getInstance()->OS_WIN10_TRANS && VNC_OSVersion::getInstance()->OS_WIN10)\r\n\t\t\t   SetDlgItemText(hwnd, IDC_BLANK, \"Enable Blank Monitor on Viewer Request require Min Win10 build 19041 \");\r\n\t\t   if (VNC_OSVersion::getInstance()->OS_WIN8)\r\n\t\t\t   SetDlgItemText(hwnd, IDC_BLANK, \"Enable Blank Monitor on Viewer Not supported on windows 8 \");\r\n\t\t   HWND hBlank2 = GetDlgItem(hwnd, IDC_BLANK2); //PGM\r\n           SendMessage(hBlank2, BM_SETCHECK, _this->m_server->BlankInputsOnly(), 0); //PGM\r\n\t\t   \r\n\t\t   HWND hLoopback = GetDlgItem(hwnd, IDC_ALLOWLOOPBACK);\r\n\t\t   BOOL fLoopback = _this->m_server->LoopbackOk();\r\n\t\t   SendMessage(hLoopback, BM_SETCHECK, fLoopback, 0);\r\n#ifdef IPV6V4\r\n\t\t   HWND hIPV6 = GetDlgItem(hwnd, IDC_IPV6);\r\n\t\t   BOOL fIPV6 = _this->m_server->IPV6();\r\n\t\t   SendMessage(hIPV6, BM_SETCHECK, fIPV6, 0);\r\n#else\r\n\t\t   HWND hIPV6 = GetDlgItem(hwnd, IDC_IPV6);\r\n\t\t   EnableWindow(hIPV6, false);\r\n#endif\r\n\t\t   HWND hLoopbackonly = GetDlgItem(hwnd, IDC_LOOPBACKONLY);\r\n\t\t   BOOL fLoopbackonly = _this->m_server->LoopbackOnly();\r\n\t\t   SendMessage(hLoopbackonly, BM_SETCHECK, fLoopbackonly, 0);\r\n\r\n\t\t   HWND hTrayicon = GetDlgItem(hwnd, IDC_DISABLETRAY);\r\n\t\t   BOOL fTrayicon = _this->m_server->GetDisableTrayIcon();\r\n\t\t   SendMessage(hTrayicon, BM_SETCHECK, fTrayicon, 0);\r\n\r\n\t\t   HWND hrdpmode = GetDlgItem(hwnd, IDC_RDPMODE);\r\n\t\t   BOOL frdpmode = _this->m_server->GetRdpmode();\r\n\t\t   SendMessage(hrdpmode, BM_SETCHECK, frdpmode, 0);\r\n\r\n\t\t   HWND hNoScreensaver= GetDlgItem(hwnd,IDC_NOSCREENSAVER);\r\n\t\t   BOOL fNoScrensaver = _this->m_server->GetNoScreensaver();\r\n\t\t   SendMessage(hNoScreensaver, BM_SETCHECK, fNoScrensaver, 0);\r\n\r\n\t\t   HWND hAllowshutdown = GetDlgItem(hwnd, IDC_ALLOWSHUTDOWN);\r\n\t\t   SendMessage(hAllowshutdown, BM_SETCHECK, !_this->m_allowshutdown , 0);\r\n\r\n\t\t   HWND hm_alloweditclients = GetDlgItem(hwnd, IDC_ALLOWEDITCLIENTS);\r\n\t\t   SendMessage(hm_alloweditclients, BM_SETCHECK, !_this->m_alloweditclients , 0);\r\n\t\t   _this->m_server->SetAllowEditClients(_this->m_alloweditclients);\r\n\t\t   \r\n\r\n\t\t   if (vnclog.GetMode() >= 2)\r\n\t\t\t   CheckDlgButton(hwnd, IDC_LOG, BST_CHECKED);\r\n\t\t   else\r\n\t\t\t   CheckDlgButton(hwnd, IDC_LOG, BST_UNCHECKED);\r\n\r\n#ifndef AVILOG\r\n\t\t   ShowWindow (GetDlgItem(hwnd, IDC_CLEAR), SW_HIDE);\r\n\t\t   ShowWindow (GetDlgItem(hwnd, IDC_VIDEO), SW_HIDE);\r\n#endif\r\n\t\t   if (vnclog.GetVideo())\r\n\t\t   {\r\n\t\t\t   SetDlgItemText(hwnd, IDC_EDIT_PATH, vnclog.GetPath());\r\n\t\t\t   //EnableWindow(GetDlgItem(hwnd, IDC_EDIT_PATH), true);\r\n\t\t\t   CheckDlgButton(hwnd, IDC_VIDEO, BST_CHECKED);\r\n\t\t   }\r\n\t\t   else\r\n\t\t   {\r\n\t\t\t   SetDlgItemText(hwnd, IDC_EDIT_PATH, vnclog.GetPath());\r\n\t\t\t   //EnableWindow(GetDlgItem(hwnd, IDC_EDIT_PATH), false);\r\n\t\t\t   CheckDlgButton(hwnd, IDC_VIDEO, BST_UNCHECKED);\r\n\t\t   }\r\n\t\t   \r\n\t\t\t// Marscha@2004 - authSSP: moved MS-Logon checkbox back to admin props page\r\n\t\t\t// added New MS-Logon checkbox\r\n\t\t\t// only enable New MS-Logon checkbox and Configure MS-Logon groups when MS-Logon\r\n\t\t\t// is checked.\r\n\t\t   HWND hSecure = GetDlgItem(hwnd, IDC_SAVEPASSWORDSECURE);\r\n\t\t   SendMessage(hSecure, BM_SETCHECK, _this->m_server->Secure(), 0);\r\n\t\t   \r\n\t\t\tHWND hMSLogon = GetDlgItem(hwnd, IDC_MSLOGON_CHECKD);\r\n\t\t\tSendMessage(hMSLogon, BM_SETCHECK, _this->m_server->MSLogonRequired(), 0);\r\n\r\n\t\t\tHWND hNewMSLogon = GetDlgItem(hwnd, IDC_NEW_MSLOGON);\r\n\t\t\tSendMessage(hNewMSLogon, BM_SETCHECK, _this->m_server->GetNewMSLogon(), 0);\r\n\r\n\t\t\tHWND hReverseAuth = GetDlgItem(hwnd, IDC_REVERSEAUTH);\r\n\t\t\tSendMessage(hReverseAuth, BM_SETCHECK, _this->m_server->GetReverseAuthRequired(), 0);\r\n\r\n\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_NEW_MSLOGON), _this->m_server->MSLogonRequired());\r\n\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_MSLOGON), _this->m_server->MSLogonRequired());\r\n\t\t\t// Marscha@2004 - authSSP: end of change\r\n\r\n\t\t   SetDlgItemInt(hwnd, IDC_SCALE, _this->m_server->GetDefaultScale(), false);\r\n\r\n\t\t   \r\n\t\t   // Remote input settings\r\n\t\t\tHWND hEnableRemoteInputs = GetDlgItem(hwnd, IDC_DISABLE_INPUTS);\r\n\t\t\tSendMessage(hEnableRemoteInputs,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t!(_this->m_server->RemoteInputsEnabled()),\r\n\t\t\t\t0);\r\n\r\n\t\t\t// Local input settings\r\n\t\t\tHWND hDisableLocalInputs = GetDlgItem(hwnd, IDC_DISABLE_LOCAL_INPUTS);\r\n\t\t\tSendMessage(hDisableLocalInputs,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->LocalInputsDisabled(),\r\n\t\t\t\t0);\r\n\r\n\t\t\t// japanese keybaord\r\n\t\t\tHWND hJapInputs = GetDlgItem(hwnd, IDC_JAP_INPUTS);\r\n\t\t\tSendMessage(hJapInputs,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->JapInputEnabled(),\r\n\t\t\t\t0);\r\n\r\n\t\t\tHWND hUnicodeInputs = GetDlgItem(hwnd, IDC_UNICODE_INPUTS);\r\n\t\t\tSendMessage(hUnicodeInputs,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->UnicodeInputEnabled(),\r\n\t\t\t\t0);\r\n\r\n\t\t\tHWND hwinhelper = GetDlgItem(hwnd, IDC_WIN8_HELPER);\r\n\t\t\tSendMessage(hwinhelper,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->Win8HelperEnabled(),\r\n\t\t\t\t0);\r\n\r\n\t\t\t// Remove the wallpaper\r\n\t\t\tHWND hRemoveWallpaper = GetDlgItem(hwnd, IDC_REMOVE_WALLPAPER);\r\n\t\t\tSendMessage(hRemoveWallpaper,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->RemoveWallpaperEnabled(),\r\n\t\t\t\t0);\r\n\r\n\t\t\t// Lock settings\r\n\t\t\tHWND hLockSetting;\r\n\t\t\tswitch (_this->m_server->LockSettings()) {\r\n\t\t\tcase 1:\r\n\t\t\t\thLockSetting = GetDlgItem(hwnd, IDC_LOCKSETTING_LOCK);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\thLockSetting = GetDlgItem(hwnd, IDC_LOCKSETTING_LOGOFF);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\thLockSetting = GetDlgItem(hwnd, IDC_LOCKSETTING_NOTHING);\r\n\t\t\t};\r\n\t\t\tSendMessage(hLockSetting,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\tTRUE,\r\n\t\t\t\t0);\r\n\r\n\t\t\tHWND hNotificationSelection;\r\n\t\t\tswitch (_this->m_server->getNotificationSelection()) {\r\n\t\t\tcase 1:\r\n\t\t\t\thNotificationSelection = GetDlgItem(hwnd, IDC_RADIONOTIFICATIONIFPROVIDED);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\thNotificationSelection = GetDlgItem(hwnd,\r\n\t\t\t\t\tIDC_RADIONOTIFICATIONON);\r\n\t\t\t\tbreak;\r\n\t\t\t};\r\n\t\t\tSendMessage(hNotificationSelection,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\tTRUE,\r\n\t\t\t\t0);\r\n\r\n\t\t\tHWND hmvSetting = 0;\r\n\t\t\tswitch (_this->m_server->ConnectPriority()) {\r\n\t\t\tcase 0:\r\n\t\t\t\thmvSetting = GetDlgItem(hwnd, IDC_MV1);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\thmvSetting = GetDlgItem(hwnd, IDC_MV2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\thmvSetting = GetDlgItem(hwnd, IDC_MV3);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\thmvSetting = GetDlgItem(hwnd, IDC_MV4);\r\n\t\t\t\tbreak;\r\n\t\t\t};\r\n\t\t\tSendMessage(hmvSetting,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\tTRUE,\r\n\t\t\t\t0);\r\n\r\n\r\n\t\t\tHWND hQuerySetting;\r\n\t\t\tswitch (_this->m_server->QueryAccept()) {\r\n\t\t\tcase 0:\r\n\t\t\t\thQuerySetting = GetDlgItem(hwnd, IDC_DREFUSE);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\thQuerySetting = GetDlgItem(hwnd, IDC_DACCEPT);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\thQuerySetting = GetDlgItem(hwnd, IDC_DREFUSE);\r\n\t\t\t};\r\n\t\t\tSendMessage(hQuerySetting,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\tTRUE,\r\n\t\t\t\t0);\r\n\r\n\t\t\tHWND hMaxViewerSetting;\r\n\t\t\tswitch (_this->m_server->getMaxViewerSetting()) {\r\n\t\t\tcase 0:\r\n\t\t\t\thMaxViewerSetting = GetDlgItem(hwnd, IDC_MAXREFUSE);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\thMaxViewerSetting = GetDlgItem(hwnd, IDC_MAXDISCONNECT);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\thMaxViewerSetting = GetDlgItem(hwnd, IDC_MAXREFUSE);\r\n\t\t\t};\r\n\t\t\tSendMessage(hMaxViewerSetting,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\tTRUE,\r\n\t\t\t\t0);\r\n\r\n\t\t\tHWND hCollabo = GetDlgItem(hwnd, IDC_COLLABO);\r\n\t\t\tSendMessage(hCollabo,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->getCollabo(),\r\n\t\t\t\t0);\r\n\r\n\t\t\tHWND hwndDlg = GetDlgItem(hwnd, IDC_FRAME);\r\n\t\t\tSendMessage(hwndDlg,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->getFrame(),\r\n\t\t\t\t0);\r\n\r\n\t\t\thwndDlg = GetDlgItem(hwnd, IDC_NOTIFOCATION);\r\n\t\t\tSendMessage(hwndDlg,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->getNotification(),\r\n\t\t\t\t0);\r\n\r\n\t\t\thwndDlg = GetDlgItem(hwnd, IDC_OSD);\r\n\t\t\tSendMessage(hwndDlg,\r\n\t\t\t\tBM_SETCHECK,\r\n\t\t\t\t_this->m_server->getOSD(),\r\n\t\t\t\t0);\r\n\r\n\t\t\tchar maxviewersChar[128];\r\n\t\t\tUINT maxviewers = _this->m_server->getMaxViewers();\r\n\t\t\tsprintf_s(maxviewersChar, \"%d\", (int)maxviewers);\r\n\t\t\tSetDlgItemText(hwnd, IDC_MAXVIEWERS, (const char*)maxviewersChar);\r\n\r\n\t\t\t// sf@2002 - List available DSM Plugins\r\n\t\t\tHWND hPlugins = GetDlgItem(hwnd, IDC_PLUGINS_COMBO);\r\n\t\t\tint nPlugins = _this->m_server->GetDSMPluginPointer()->ListPlugins(hPlugins);\r\n\t\t\tif (!nPlugins) \r\n\t\t\t{\r\n\t\t\t\tSendMessage(hPlugins, CB_ADDSTRING, 0, (LPARAM) sz_ID_NO_PLUGIN_DETECT);\r\n\t\t\t\tSendMessage(hPlugins, CB_SETCURSEL, 0, 0);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tSendMessage(hPlugins, CB_SELECTSTRING, 0, (LPARAM)_this->m_server->GetDSMPluginName());\r\n\r\n\t\t\t// Modif sf@2002\r\n\t\t\tSendMessage(GetDlgItem(hwnd, IDC_PLUGIN_CHECK), BM_SETCHECK, _this->m_server->IsDSMPluginEnabled(), 0);\r\n\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PLUGIN_BUTTON),  (_this->m_server->AuthClientCount() == 0 ? _this->m_server->IsDSMPluginEnabled(): false));\r\n\r\n\t\t\t// Query window option - Taken from TightVNC advanced properties \r\n\t\t\tBOOL queryEnabled = (_this->m_server->QuerySetting() == 4);\r\n\t\t\tSendMessage(GetDlgItem(hwnd, IDQUERY), BM_SETCHECK, queryEnabled, 0);\r\n\t\t\tEnableWindow(GetDlgItem(hwnd, IDQUERYTIMEOUT), queryEnabled);\r\n\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_QUERYDISABLETIME), queryEnabled);\r\n\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_DREFUSE), queryEnabled);\r\n\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_DACCEPT), queryEnabled);\r\n\r\n\t\t\tSetDlgItemText(hwnd, IDC_SERVICE_COMMANDLINE, _this->service_commandline);\r\n\t\t\tSetDlgItemText(hwnd, IDC_EDITQUERYTEXT, _this->accept_reject_mesg);\r\n\r\n\r\n\t\t\tchar timeout[128];\r\n\t\t\tUINT t = _this->m_server->QueryTimeout();\r\n\t\t\tsprintf_s(timeout, \"%d\", (int)t);\r\n\t\t    SetDlgItemText(hwnd, IDQUERYTIMEOUT, (const char *) timeout);\r\n\r\n\t\t\tchar disableTime[128];\r\n\t\t\tUINT tt = _this->m_server->QueryDisableTime();\r\n\t\t\tsprintf_s(disableTime, \"%d\", (int)tt);\r\n\t\t    SetDlgItemText(hwnd, IDC_QUERYDISABLETIME, (const char *) disableTime);\r\n\r\n\t\t\t_this->ExpandBox(hwnd, !_this->m_bExpanded);\r\n\t\t\tSendMessage(GetDlgItem(hwnd, IDC_BUTTON_EXPAND), BM_SETIMAGE, (WPARAM)IMAGE_BITMAP, (LPARAM)_this->hBmpExpand);\r\n\r\n\t\t\tSetForegroundWindow(hwnd);\r\n\r\n\t\t\treturn FALSE; // Because we've set the focus\r\n\t\t}\r\n\r\n\tcase WM_COMMAND:\r\n\t\tswitch (LOWORD(wParam))\r\n\t\t{\r\n\t\tcase IDC_SHOWOPTIONS:\r\n\t\tcase IDC_BUTTON_EXPAND:\r\n\t\t\t_this->ExpandBox(hwnd, !_this->m_bExpanded);\r\n//\t\t\tif (_this->m_bExpanded)\r\n//\t\t\t\t_this->InitTab(hwnd);\r\n\t\t\treturn TRUE;\r\n\t\tcase IDOK:\r\n\t\tcase IDC_APPLY:\r\n\t\t\t{\r\n\t\t\t\tchar path[512];\r\n\t\t\t\tint lenpath = GetDlgItemText(hwnd, IDC_EDIT_PATH, (LPSTR) &path, 512);\r\n\t\t\t\tif (lenpath != 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvnclog.SetPath(path);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tstrcpy_s(path,\"\");\r\n\t\t\t\t\tvnclog.SetPath(path);\r\n\t\t\t\t}\r\n\t\t\t\tbool Secure_old = _this->m_server->Secure();\r\n\t\t\t\tHWND hSecure = GetDlgItem(hwnd, IDC_SAVEPASSWORDSECURE);\r\n\t\t\t\t_this->m_server->Secure(SendMessage(hSecure, BM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\r\n\t\t\t\t// Save the password\r\n\t\t\t\tchar passwd[MAXPWLEN+1];\r\n\t\t\t\tchar passwd2[MAXPWLEN+1];\r\n\t\t\t\tmemset(passwd, '\\0', MAXPWLEN + 1); //PGM\r\n\t\t\t\tmemset(passwd2, '\\0', MAXPWLEN + 1); //PGM\r\n\t\t\t\t// TightVNC method\r\n\t\t\t\tint lenPassword = GetDlgItemText(hwnd, IDC_PASSWORD, (LPSTR) &passwd, MAXPWLEN+1);\t\t\t\t\r\n\t\t\t\tint lenPassword2 = GetDlgItemText(hwnd, IDC_PASSWORD2, (LPSTR)&passwd2, MAXPWLEN + 1); //PGM\r\n\r\n                bool bSecure = _this->m_server->Secure() ? true : false;\r\n\t\t\t\tif (Secure_old != bSecure) {\r\n\t\t\t\t\t//We changed the method to save the password\r\n\t\t\t\t\t//load passwords and encrypt the other method\r\n\t\t\t\t\tchar password[MAXPWLEN];\r\n\t\t\t\t\tchar password2[MAXPWLEN];\r\n\t\t\t\t\t_this->m_server->GetPassword(password);\r\n\t\t\t\t\tvncPasswd::ToText plain(password, Secure_old);\r\n\t\t\t\t\t_this->m_server->GetPassword2(password2);\r\n\t\t\t\t\tvncPasswd::ToText plain2(password2, Secure_old);\r\n\t\t\t\t\tmemset(passwd, '\\0', MAXPWLEN + 1); //PGM\r\n\t\t\t\t\tmemset(passwd2, '\\0', MAXPWLEN + 1); //PGM\r\n\t\t\t\t\tstrcpy_s(passwd,plain);\r\n\t\t\t\t\tstrcpy_s(passwd2, plain2);\r\n\t\t\t\t\tlenPassword = (int)strlen(passwd);\r\n\t\t\t\t\tlenPassword2 = (int)strlen(passwd2);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (strcmp(passwd, \"~~~~~~~~\") != 0) {\r\n\t\t\t\t\tif (lenPassword == 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvncPasswd::FromClear crypt(_this->m_server->Secure());\r\n\t\t\t\t\t\t_this->m_server->SetPassword(crypt);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvncPasswd::FromText crypt(passwd, _this->m_server->Secure());\r\n\t\t\t\t\t\t_this->m_server->SetPassword(crypt);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\r\n\t\t\t\tif (strcmp(passwd2, \"~~~~~~~~\") != 0) { //PGM\r\n\t\t\t\t\tif (lenPassword2 == 0) //PGM\r\n\t\t\t\t\t{ //PGM\r\n\t\t\t\t\t\tvncPasswd::FromClear crypt2(_this->m_server->Secure()); //PGM\r\n\t\t\t\t\t\t_this->m_server->SetPassword2(crypt2); //PGM\r\n\t\t\t\t\t} //PGM\r\n\t\t\t\t\telse //PGM\r\n\t\t\t\t\t{ //PGM\r\n\t\t\t\t\t\tvncPasswd::FromText crypt2(passwd2, _this->m_server->Secure()); //PGM\r\n\t\t\t\t\t\t_this->m_server->SetPassword2(crypt2); //PGM\r\n\t\t\t\t\t} //PGM\r\n\t\t\t\t} //PGM\r\n\r\n\r\n\t\t\t\t//avoid readonly and full passwd being set the same\r\n\t\t\t\tif (strcmp(passwd, \"~~~~~~~~\") != 0 && strcmp(passwd2, \"~~~~~~~~\") != 0) { \r\n\t\t\t\t\tif (strcmp(passwd,passwd2)==0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tMessageBox(NULL,\"View only and full password are the same\\nView only ignored\",\"Warning\",0);\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t} \r\n\r\n\t\t\t\t// Save the new settings to the server\r\n\t\t\t\tint state = (int)SendDlgItemMessage(hwnd, IDC_PORTNO_AUTO, BM_GETCHECK, 0, 0);\r\n\t\t\t\t_this->m_server->SetAutoPortSelect(state == BST_CHECKED);\r\n\r\n\t\t\t\t// Save port numbers if we're not auto selecting\r\n\t\t\t\tif (!_this->m_server->AutoPortSelect()) {\r\n\t\t\t\t\tif ( SendDlgItemMessage(hwnd, IDC_SPECDISPLAY,\r\n\t\t\t\t\t\t\t\t\t\t\tBM_GETCHECK, 0, 0) == BST_CHECKED ) {\r\n\t\t\t\t\t\t// Display number was specified\r\n\t\t\t\t\t\tBOOL ok;\r\n\t\t\t\t\t\tUINT display = GetDlgItemInt(hwnd, IDC_DISPLAYNO, &ok, TRUE);\r\n\t\t\t\t\t\tif (ok)\r\n\t\t\t\t\t\t\t_this->m_server->SetPorts(DISPLAY_TO_PORT(display),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  DISPLAY_TO_HPORT(display));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Assuming that port numbers were specified\r\n\t\t\t\t\t\tBOOL ok1, ok2;\r\n\t\t\t\t\t\tUINT port_rfb = GetDlgItemInt(hwnd, IDC_PORTRFB, &ok1, TRUE);\r\n\t\t\t\t\t\tUINT port_http = GetDlgItemInt(hwnd, IDC_PORTHTTP, &ok2, TRUE);\r\n\t\t\t\t\t\tif (ok1 && ok2)\r\n\t\t\t\t\t\t\t_this->m_server->SetPorts(port_rfb, port_http);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tHWND hConnectSock = GetDlgItem(hwnd, IDC_CONNECT_SOCK);\r\n\t\t\t\t_this->m_server->SockConnect(\r\n\t\t\t\t\tSendMessage(hConnectSock, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t// Update display/port controls on pressing the \"Apply\" button\r\n\t\t\t\tif (LOWORD(wParam) == IDC_APPLY)\r\n\t\t\t\t\t_this->InitPortSettings(hwnd);\r\n\r\n\t\t\t\t\r\n\r\n\t\t\t\tHWND hConnectHTTP = GetDlgItem(hwnd, IDC_CONNECT_HTTP);\r\n\t\t\t\t_this->m_server->EnableHTTPConnect(\r\n\t\t\t\t\tSendMessage(hConnectHTTP, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t\t);\r\n\t\t\t\t\r\n\t\t\t\t// Remote input stuff\r\n\t\t\t\tHWND hEnableRemoteInputs = GetDlgItem(hwnd, IDC_DISABLE_INPUTS);\r\n\t\t\t\t_this->m_server->EnableRemoteInputs(\r\n\t\t\t\t\tSendMessage(hEnableRemoteInputs, BM_GETCHECK, 0, 0) != BST_CHECKED\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t// Local input stuff\r\n\t\t\t\tHWND hDisableLocalInputs = GetDlgItem(hwnd, IDC_DISABLE_LOCAL_INPUTS);\r\n\t\t\t\t_this->m_server->DisableLocalInputs(\r\n\t\t\t\t\tSendMessage(hDisableLocalInputs, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t// japanese keyboard\r\n\t\t\t\tHWND hJapInputs = GetDlgItem(hwnd, IDC_JAP_INPUTS);\r\n\t\t\t\t_this->m_server->EnableJapInput(\r\n\t\t\t\t\tSendMessage(hJapInputs, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t// japanese keyboard\r\n\t\t\t\tHWND hUnicodeInputs = GetDlgItem(hwnd, IDC_UNICODE_INPUTS);\r\n\t\t\t\t_this->m_server->EnableUnicodeInput(\r\n\t\t\t\t\tSendMessage(hUnicodeInputs, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\tHWND hwinhelper = GetDlgItem(hwnd, IDC_WIN8_HELPER);\r\n\t\t\t\t_this->m_server->Win8HelperEnabled(\r\n\t\t\t\t\tSendMessage(hwinhelper, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t// Wallpaper handling\r\n\t\t\t\tHWND hRemoveWallpaper = GetDlgItem(hwnd, IDC_REMOVE_WALLPAPER);\r\n\t\t\t\t_this->m_server->EnableRemoveWallpaper(\r\n\t\t\t\t\tSendMessage(hRemoveWallpaper, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t// Lock settings handling\r\n\t\t\t\tif (SendMessage(GetDlgItem(hwnd, IDC_LOCKSETTING_LOCK), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->SetLockSettings(1);\r\n\t\t\t\t} else if (SendMessage(GetDlgItem(hwnd, IDC_LOCKSETTING_LOGOFF), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->SetLockSettings(2);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_this->m_server->SetLockSettings(0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (SendMessage(GetDlgItem(hwnd, IDC_RADIONOTIFICATIONON), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->setNotificationSelection(0);\r\n\t\t\t\t}\r\n\t\t\t\telse if (SendMessage(GetDlgItem(hwnd, IDC_RADIONOTIFICATIONIFPROVIDED), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->setNotificationSelection(1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (SendMessage(GetDlgItem(hwnd, IDC_DREFUSE), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->SetQueryAccept(0);\r\n\t\t\t\t} else if (SendMessage(GetDlgItem(hwnd, IDC_DACCEPT), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->SetQueryAccept(1);\r\n\t\t\t\t} \r\n\r\n\t\t\t\tif (SendMessage(GetDlgItem(hwnd, IDC_MAXREFUSE), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->setMaxViewerSetting(0);\r\n\t\t\t\t}\r\n\t\t\t\telse if (SendMessage(GetDlgItem(hwnd, IDC_MAXDISCONNECT), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->setMaxViewerSetting(1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchar maxViewerChar[256];\r\n\t\t\t\tstrcpy_s(maxViewerChar, \"128\");\t\t\t\t\r\n\t\t\t\tif (GetDlgItemText(hwnd, IDC_MAXVIEWERS, (LPSTR)&maxViewerChar, 256) == 0) {\r\n\t\t\t\t\tint value = atoi(maxViewerChar);\r\n\t\t\t\t\tif (value > 128) \r\n\t\t\t\t\t\tvalue = 128;\r\n\t\t\t\t\t_this->m_server->setMaxViewers(value);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\t_this->m_server->setMaxViewers(atoi(maxViewerChar));\r\n\r\n\t\t\t\tHWND hCollabo = GetDlgItem(hwnd, IDC_COLLABO);\r\n\t\t\t\t_this->m_server->setCollabo(\r\n\t\t\t\t\tSendMessage(hCollabo, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\tHWND hwndDlg = GetDlgItem(hwnd, IDC_FRAME);\r\n\t\t\t\t_this->m_server->setFrame(\r\n\t\t\t\t\tSendMessage(hwndDlg, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t);\r\n\r\n\t\t\t\thwndDlg = GetDlgItem(hwnd, IDC_NOTIFOCATION);\r\n\t\t\t\t_this->m_server->setNotification(\r\n\t\t\t\t\tSendMessage(hwndDlg, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t);\r\n\r\n\t\t\t\thwndDlg = GetDlgItem(hwnd, IDC_OSD);\r\n\t\t\t\t_this->m_server->setOSD(\r\n\t\t\t\t\tSendMessage(hwndDlg, BM_GETCHECK, 0, 0) == BST_CHECKED\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (SendMessage(GetDlgItem(hwnd, IDC_MV1), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->SetConnectPriority(0);\r\n\t\t\t\t} else if (SendMessage(GetDlgItem(hwnd, IDC_MV2), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->SetConnectPriority(1);\r\n\t\t\t\t} \r\n\t\t\t\t else if (SendMessage(GetDlgItem(hwnd, IDC_MV3), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->SetConnectPriority(2);\r\n\t\t\t\t} else if (SendMessage(GetDlgItem(hwnd, IDC_MV4), BM_GETCHECK, 0, 0)\r\n\t\t\t\t\t== BST_CHECKED) {\r\n\t\t\t\t\t_this->m_server->SetConnectPriority(3);\r\n\t\t\t\t} \r\n\t\t\t\t\r\n\t\t\t\t// Modif sf@2002 - v1.1.0\r\n\t\t\t\tHWND hFileTransfer = GetDlgItem(hwnd, IDC_FILETRANSFER);\r\n\t\t\t\t_this->m_server->EnableFileTransfer(SendMessage(hFileTransfer, BM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\r\n\t\t\t\tHWND hFileTransferUserImp = GetDlgItem(hwnd, IDC_FTUSERIMPERSONATION_CHECK);\r\n\t\t\t\t_this->m_server->FTUserImpersonation(SendMessage(hFileTransferUserImp, BM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\r\n\t\t\t\tHWND hBlank = GetDlgItem(hwnd, IDC_BLANK);\r\n\t\t\t\t_this->m_server->BlankMonitorEnabled(SendMessage(hBlank, BM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\t\t\t\tHWND hBlank2 = GetDlgItem(hwnd, IDC_BLANK2); //PGM\r\n\t\t\t\t_this->m_server->BlankInputsOnly(SendMessage(hBlank2, BM_GETCHECK, 0, 0) == BST_CHECKED); //PGM\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t_this->m_server->SetLoopbackOk(IsDlgButtonChecked(hwnd, IDC_ALLOWLOOPBACK));\r\n#ifdef IPV6V4\r\n\t\t\t\t_this->m_server->SetIPV6(IsDlgButtonChecked(hwnd, IDC_IPV6));\r\n#endif\r\n\t\t\t\t_this->m_server->SetLoopbackOnly(IsDlgButtonChecked(hwnd, IDC_LOOPBACKONLY));\r\n\r\n\t\t\t\t_this->m_server->SetDisableTrayIcon(IsDlgButtonChecked(hwnd, IDC_DISABLETRAY));\r\n\t\t\t\t_this->m_server->SetRdpmode(IsDlgButtonChecked(hwnd, IDC_RDPMODE));\r\n\t\t\t\t_this->m_server->SetNoScreensaver(IsDlgButtonChecked(hwnd, IDC_NOSCREENSAVER));\r\n\t\t\t\t_this->m_allowshutdown=!IsDlgButtonChecked(hwnd, IDC_ALLOWSHUTDOWN);\r\n\t\t\t\t_this->m_alloweditclients=!IsDlgButtonChecked(hwnd, IDC_ALLOWEDITCLIENTS);\r\n\t\t\t\t_this->m_server->SetAllowEditClients(_this->m_alloweditclients);\r\n\t\t\t\tif (IsDlgButtonChecked(hwnd, IDC_LOG))\r\n\t\t\t\t{\r\n\t\t\t\t\tvnclog.SetMode(2);\r\n\t\t\t\t\tvnclog.SetLevel(10);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tvnclog.SetMode(0);\r\n\t\t\t\t}\r\n\t\t\t\tif (IsDlgButtonChecked(hwnd, IDC_VIDEO))\r\n\t\t\t\t{\r\n\t\t\t\t\tvnclog.SetVideo(true);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tvnclog.SetVideo(false);\r\n\t\t\t\t}\r\n\t\t\t\t// Modif sf@2002 - v1.1.0\r\n\t\t\t\t// Marscha@2004 - authSSP: moved MS-Logon checkbox back to admin props page\r\n\t\t\t\t// added New MS-Logon checkbox\t\t\t\t\r\n\r\n\t\t\t\tHWND hMSLogon = GetDlgItem(hwnd, IDC_MSLOGON_CHECKD);\r\n\t\t\t\t_this->m_server->RequireMSLogon(SendMessage(hMSLogon, BM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\t\t\t\t\r\n\t\t\t\tHWND hNewMSLogon = GetDlgItem(hwnd, IDC_NEW_MSLOGON);\r\n\t\t\t\t_this->m_server->SetNewMSLogon(SendMessage(hNewMSLogon, BM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\t\t\t\t// Marscha@2004 - authSSP: end of change\r\n\r\n\t\t\t\tHWND hReverseAuth = GetDlgItem(hwnd, IDC_REVERSEAUTH);\r\n\t\t\t\t_this->m_server->SetReverseAuthRequired(SendMessage(hReverseAuth, BM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\r\n\t\t\t\tint nDScale = GetDlgItemInt(hwnd, IDC_SCALE, NULL, FALSE);\r\n\t\t\t\tif (nDScale < 1 || nDScale > 9) nDScale = 1;\r\n\t\t\t\t_this->m_server->SetDefaultScale(nDScale);\r\n\t\t\t\t\r\n\t\t\t\t// sf@2002 - DSM Plugin loading\r\n\t\t\t\t// If Use plugin is checked, load the plugin if necessary\r\n\t\t\t\tif (SendMessage(GetDlgItem(hwnd, IDC_PLUGIN_CHECK), BM_GETCHECK, 0, 0) == BST_CHECKED)\r\n\t\t\t\t{\r\n\t\t\t\t\tTCHAR szPlugin[MAX_PATH];\r\n\t\t\t\t\tGetDlgItemText(hwnd, IDC_PLUGINS_COMBO, szPlugin, MAX_PATH);\r\n\t\t\t\t\t_this->m_server->SetDSMPluginName(szPlugin);\r\n\t\t\t\t\t_this->m_server->EnableDSMPlugin(true);\r\n\t\t\t\t}\r\n\t\t\t\telse // If Use plugin unchecked but the plugin is loaded, unload it\r\n\t\t\t\t{\r\n\t\t\t\t\t_this->m_server->EnableDSMPlugin(false);\r\n\t\t\t\t\tif (_this->m_server->GetDSMPluginPointer()->IsLoaded())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t_this->m_server->GetDSMPluginPointer()->UnloadPlugin();\r\n\t\t\t\t\t\t_this->m_server->GetDSMPluginPointer()->SetEnabled(false);\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//adzm 2010-05-12 - dsmplugin config\r\n\t\t\t\t_this->m_server->SetDSMPluginConfig(_this->m_pref_DSMPluginConfig);\r\n\r\n\t\t\t\t// Query Window options - Taken from TightVNC advanced properties\r\n\t\t\t\tchar timeout[256];\r\n\t\t\t\tstrcpy_s(timeout,\"5\");\r\n\t\t\t\tif (GetDlgItemText(hwnd, IDQUERYTIMEOUT, (LPSTR) &timeout, 256) == 0)\r\n\t\t\t\t    _this->m_server->SetQueryTimeout(atoi(timeout));\r\n\t\t\t\telse\r\n\t\t\t\t    _this->m_server->SetQueryTimeout(atoi(timeout));\r\n\r\n\t\t\t\tchar disabletime[256];\r\n\t\t\t\tstrcpy_s(disabletime,\"5\");\r\n\t\t\t\tif (GetDlgItemText(hwnd, IDC_QUERYDISABLETIME, (LPSTR) &disabletime, 256) == 0)\r\n\t\t\t\t    _this->m_server->SetQueryDisableTime(atoi(disabletime));\r\n\t\t\t\telse\r\n\t\t\t\t    _this->m_server->SetQueryDisableTime(atoi(disabletime));\r\n\r\n\t\t\t\tGetDlgItemText(hwnd, IDC_SERVICE_COMMANDLINE, _this->service_commandline, 1024);\r\n\t\t\t\tGetDlgItemText(hwnd, IDC_EDITQUERYTEXT, _this->accept_reject_mesg, 512);\r\n\r\n\r\n\t\t\t\tHWND hQuery = GetDlgItem(hwnd, IDQUERY);\r\n\t\t\t\t_this->m_server->SetQuerySetting((SendMessage(hQuery, BM_GETCHECK, 0, 0) == BST_CHECKED) ? 4 : 2);\r\n\r\n\t\t\t\t// And to the registry\r\n\r\n\t\t\t\t/*if (!RunningAsAdministrator () && vncService::RunningAsService())\r\n\t\t\t\t{\r\n\t\t\t\t\tMessageBoxSecure(NULL,\"Only admins are allowed to save\",\"Warning\", MB_OK | MB_ICONINFORMATION);\r\n\t\t\t\t}\r\n\t\t\t\telse*/\r\n\t\t\t\t{\r\n\t\t\t\t// Load the settings\r\n\t\t\t\tif (_this->m_fUseRegistry)\r\n\t\t\t\t\t_this->Save();\r\n\t\t\t\telse\r\n\t\t\t\t\t_this->SaveToIniFile();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Was ok pressed?\r\n\t\t\t\tif (LOWORD(wParam) == IDOK)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Yes, so close the dialog\r\n\t\t\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"enddialog (OK)\\n\"));\r\n\r\n\t\t\t\t\t_this->m_returncode_valid = TRUE;\r\n\r\n\t\t\t\t\tEndDialog(hwnd, IDOK);\r\n\t\t\t\t\t_this->m_dlgvisible = FALSE;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_this->m_server->SetHookings();\r\n\r\n\t\t\t\treturn TRUE;\r\n\t\t\t}\r\n\r\n\t\tcase IDCANCEL:\r\n\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"enddialog (CANCEL)\\n\"));\r\n\r\n\t\t\t_this->m_returncode_valid = TRUE;\r\n\r\n\t\t\tEndDialog(hwnd, IDCANCEL);\r\n\t\t\t_this->m_dlgvisible = FALSE;\r\n\t\t\treturn TRUE;\r\n\r\n\t    // Added Jef Fix - 5 March 2008 paquette@atnetsend.net\r\n        case IDC_BLANK:\r\n            {\r\n                // only enable alpha blanking if blanking is enabled\r\n                HWND hBlank = ::GetDlgItem(hwnd, IDC_BLANK);               \r\n                HWND hBlank2 = ::GetDlgItem(hwnd, IDC_BLANK2); //PGM\r\n                ::EnableWindow(hBlank2, ::SendMessage(hBlank, BM_GETCHECK, 0, 0) == BST_CHECKED); //PGM\r\n            }\r\n            break;\r\n\r\n        case IDC_BLANK2: //PGM\r\n            { //PGM\r\n                // only enable alpha blanking if Disable Only Inputs is disabled //PGM\r\n                HWND hBlank = ::GetDlgItem(hwnd, IDC_BLANK2); //PGM              \r\n            } //PGM\r\n            break; //PGM\r\n\r\n\t\tcase IDC_VIDEO:\r\n\t\t\t{\r\n\t\t\t\tif (IsDlgButtonChecked(hwnd, IDC_VIDEO))\r\n\t\t\t\t   {\r\n\t\t\t\t\t   EnableWindow(GetDlgItem(hwnd, IDC_EDIT_PATH), true);\r\n\t\t\t\t\t   \r\n\t\t\t\t   }\r\n\t\t\t\t   else\r\n\t\t\t\t   {\r\n\t\t\t\t\t   EnableWindow(GetDlgItem(hwnd, IDC_EDIT_PATH), false);\r\n\t\t\t\t\t   \r\n\t\t\t\t   }\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\tcase IDC_CLEAR:\r\n\t\t\t{\r\n\t\t\t\tvnclog.ClearAviConfig();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\tcase IDC_CONNECT_SOCK:\r\n\t\t\t// TightVNC 1.2.7 method\r\n\t\t\t// The user has clicked on the socket connect tickbox\r\n\t\t\t{\r\n\t\t\t\tBOOL bConnectSock =\r\n\t\t\t\t\t(SendDlgItemMessage(hwnd, IDC_CONNECT_SOCK,\r\n\t\t\t\t\t\t\t\t\t\tBM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PASSWORD), bConnectSock);\r\n\r\n\t\t\t\tHWND hPortNoAuto = GetDlgItem(hwnd, IDC_PORTNO_AUTO);\r\n\t\t\t\tEnableWindow(hPortNoAuto, bConnectSock);\r\n\t\t\t\tHWND hSpecDisplay = GetDlgItem(hwnd, IDC_SPECDISPLAY);\r\n\t\t\t\tEnableWindow(hSpecDisplay, bConnectSock);\r\n\t\t\t\tHWND hSpecPort = GetDlgItem(hwnd, IDC_SPECPORT);\r\n\t\t\t\tEnableWindow(hSpecPort, bConnectSock);\r\n\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_DISPLAYNO), bConnectSock &&\r\n\t\t\t\t\t(SendMessage(hSpecDisplay, BM_GETCHECK, 0, 0) == BST_CHECKED));\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PORTRFB), bConnectSock &&\r\n\t\t\t\t\t(SendMessage(hSpecPort, BM_GETCHECK, 0, 0) == BST_CHECKED));\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PORTHTTP), bConnectSock &&\r\n\t\t\t\t\t(SendMessage(hSpecPort, BM_GETCHECK, 0, 0) == BST_CHECKED));\r\n\t\t\t}\r\n\t\t\treturn TRUE;\r\n\r\n\t\t// TightVNC 1.2.7 method\r\n\t\tcase IDC_PORTNO_AUTO:\r\n\t\t\t{\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_DISPLAYNO), FALSE);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PORTRFB), FALSE);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PORTHTTP), FALSE);\r\n\r\n\t\t\t\tSetDlgItemText(hwnd, IDC_DISPLAYNO, \"\");\r\n\t\t\t\tSetDlgItemText(hwnd, IDC_PORTRFB, \"\");\r\n\t\t\t\tSetDlgItemText(hwnd, IDC_PORTHTTP, \"\");\r\n\t\t\t}\r\n\t\t\treturn TRUE;\r\n\r\n\t\tcase IDC_SPECDISPLAY:\r\n\t\t\t{\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_DISPLAYNO), TRUE);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PORTRFB), FALSE);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PORTHTTP), FALSE);\r\n\r\n\t\t\t\tint display = PORT_TO_DISPLAY(_this->m_server->GetPort());\r\n\t\t\t\tif (display < 0 || display > 99)\r\n\t\t\t\t\tdisplay = 0;\r\n\t\t\t\tSetDlgItemInt(hwnd, IDC_DISPLAYNO, display, FALSE);\r\n\t\t\t\tSetDlgItemInt(hwnd, IDC_PORTRFB, _this->m_server->GetPort(), FALSE);\r\n\t\t\t\tSetDlgItemInt(hwnd, IDC_PORTHTTP, _this->m_server->GetHttpPort(), FALSE);\r\n\r\n\r\n\t\t\t\tSetFocus(GetDlgItem(hwnd, IDC_DISPLAYNO));\r\n\t\t\t\tSendDlgItemMessage(hwnd, IDC_DISPLAYNO, EM_SETSEL, 0, (LPARAM)-1);\r\n\t\t\t}\r\n\t\t\treturn TRUE;\r\n\r\n\t\tcase IDC_SPECPORT:\r\n\t\t\t{\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_DISPLAYNO), FALSE);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PORTRFB), TRUE);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PORTHTTP), TRUE);\r\n\r\n\t\t\t\tint d1 = PORT_TO_DISPLAY(_this->m_server->GetPort());\r\n\t\t\t\tint d2 = HPORT_TO_DISPLAY(_this->m_server->GetHttpPort());\r\n\t\t\t\tif (d1 == d2 && d1 >= 0 && d1 <= 99) {\r\n\t\t\t\t\tSetDlgItemInt(hwnd, IDC_DISPLAYNO, d1, FALSE);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tSetDlgItemText(hwnd, IDC_DISPLAYNO, \"\");\r\n\t\t\t\t}\r\n\t\t\t\tSetDlgItemInt(hwnd, IDC_PORTRFB, _this->m_server->GetPort(), FALSE);\r\n\t\t\t\tSetDlgItemInt(hwnd, IDC_PORTHTTP, _this->m_server->GetHttpPort(), FALSE);\r\n\r\n\r\n\t\t\t\tSetFocus(GetDlgItem(hwnd, IDC_PORTRFB));\r\n\t\t\t\tSendDlgItemMessage(hwnd, IDC_PORTRFB, EM_SETSEL, 0, (LPARAM)-1);\r\n\t\t\t}\r\n\t\t\treturn TRUE;\r\n\r\n\t\t// Query window option - Taken from TightVNC advanced properties code\r\n\t\tcase IDQUERY:\r\n\t\t\t{\r\n\t\t\t\tHWND hQuery = GetDlgItem(hwnd, IDQUERY);\r\n\t\t\t\tBOOL queryon = (SendMessage(hQuery, BM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDQUERYTIMEOUT), queryon);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_QUERYDISABLETIME), queryon);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_DREFUSE), queryon);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_DACCEPT), queryon);\r\n\t\t\t}\r\n\t\t\treturn TRUE;\r\n\r\n\t\tcase IDC_STARTREP:\r\n\t\t\t{\r\n\t\t\t\tvncConnDialog *newconn = new vncConnDialog(_this->m_server);\r\n\t\t\t\tif (newconn)\r\n\t\t\t\t{\r\n\t\t\t\t\tnewconn->DoDialog(true);\r\n\t\t\t\t\t// delete newconn; // NO ! Already done in vncConnDialog.\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t// sf@2002 - DSM Plugin\r\n\t\tcase IDC_PLUGIN_CHECK:\r\n\t\t\t{\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_PLUGIN_BUTTON), _this->m_server->AuthClientCount() == 0 \r\n\t\t\t\t\t\t? SendMessage(GetDlgItem(hwnd, IDC_PLUGIN_CHECK), BM_GETCHECK, 0, 0) == BST_CHECKED \r\n\t\t\t\t\t\t: BST_UNCHECKED);\r\n\t\t\t}\r\n\t\t\treturn TRUE;\r\n\t\t\t// Marscha@2004 - authSSP: moved MSLogon checkbox back to admin props page\r\n\t\t\t// Reason: Different UI for old and new mslogon group config.\r\n\t\tcase IDC_MSLOGON_CHECKD:\r\n\t\t\t{\r\n\t\t\t\tBOOL bMSLogonChecked =\r\n\t\t\t\t(SendDlgItemMessage(hwnd, IDC_MSLOGON_CHECKD,\r\n\t\t\t\t\t\t\t\t\t\tBM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_NEW_MSLOGON), bMSLogonChecked);\r\n\t\t\t\tEnableWindow(GetDlgItem(hwnd, IDC_MSLOGON), bMSLogonChecked);\r\n\r\n\t\t\t}\r\n\t\t\treturn TRUE;\r\n\t\tcase IDC_MSLOGON:\r\n\t\t\t{\r\n\t\t\t\t// Marscha@2004 - authSSP: if \"New MS-Logon\" is checked,\r\n\t\t\t\t// call vncEditSecurity from SecurityEditor.dll,\r\n\t\t\t\t// else call \"old\" dialog.\r\n\t\t\t\tBOOL bNewMSLogonChecked =\r\n\t\t\t\t(SendDlgItemMessage(hwnd, IDC_NEW_MSLOGON,\r\n\t\t\t\t\t\t\t\t\t\tBM_GETCHECK, 0, 0) == BST_CHECKED);\r\n\t\t\t\tif (bNewMSLogonChecked) {\r\n\t\t\t\t\tvoid winvncSecurityEditorHelper_as_admin();\r\n\t\t\t\t\t\tHANDLE hProcess,hPToken;\r\n\t\t\t\t\t\tDWORD id = vncService::GetExplorerLogonPid();\r\n\t\t\t\t\t\tif (id!=0) \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\thProcess = OpenProcess(MAXIMUM_ALLOWED,FALSE,id);\r\n\t\t\t\t\t\t\tif (!hProcess) goto error;\r\n\t\t\t\t\t\t\tif(!OpenProcessToken(hProcess,TOKEN_ADJUST_PRIVILEGES|TOKEN_QUERY\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t|TOKEN_DUPLICATE|TOKEN_ASSIGN_PRIMARY|TOKEN_ADJUST_SESSIONID\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t|TOKEN_READ|TOKEN_WRITE,&hPToken)) break;\r\n\r\n\t\t\t\t\t\t\tchar dir[MAX_PATH];\r\n\t\t\t\t\t\t\tchar exe_file_name[MAX_PATH];\r\n\t\t\t\t\t\t\tGetModuleFileName(0, exe_file_name, MAX_PATH);\r\n\t\t\t\t\t\t\tstrcpy_s(dir, exe_file_name);\r\n\t\t\t\t\t\t\tstrcat_s(dir, \" -securityeditorhelper\");\r\n\t\t\t\t\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tSTARTUPINFO          StartUPInfo;\r\n\t\t\t\t\t\t\t\tPROCESS_INFORMATION  ProcessInfo;\r\n\t\t\t\t\t\t\t\tZeroMemory(&StartUPInfo,sizeof(STARTUPINFO));\r\n\t\t\t\t\t\t\t\tZeroMemory(&ProcessInfo,sizeof(PROCESS_INFORMATION));\r\n\t\t\t\t\t\t\t\tStartUPInfo.wShowWindow = SW_SHOW;\r\n\t\t\t\t\t\t\t\tStartUPInfo.lpDesktop = \"Winsta0\\\\Default\";\r\n\t\t\t\t\t\t\t\tStartUPInfo.cb = sizeof(STARTUPINFO);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tCreateProcessAsUser(hPToken,NULL,dir,NULL,NULL,FALSE,DETACHED_PROCESS,NULL,NULL,&StartUPInfo,&ProcessInfo);\r\n\t\t\t\t\t\t\t\tDWORD errorcode=GetLastError();\r\n                                if (ProcessInfo.hThread) CloseHandle(ProcessInfo.hThread);\r\n                                if (ProcessInfo.hProcess) CloseHandle(ProcessInfo.hProcess);\r\n\t\t\t\t\t\t\t\tif (errorcode == 1314) goto error;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\terror:\r\n\t\t\t\t\t\t\t\t\t\twinvncSecurityEditorHelper_as_admin();\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t} else { \r\n\t\t\t\t\t// Marscha@2004 - authSSP: end of change\r\n\t\t\t\t\t_this->m_vncauth.Init(_this->m_server);\r\n\t\t\t\t\t_this->m_vncauth.SetTemp(_this->m_Tempfile);\r\n\t\t\t\t\t_this->m_vncauth.Show(TRUE);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn TRUE;\r\n\t\tcase IDC_CHECKDRIVER:\r\n\t\t\t{\r\n\t\t\t\tCheckVideoDriver(1);\r\n\t\t\t}\r\n\t\t\treturn TRUE;\r\n\t\tcase IDC_PLUGIN_BUTTON:\r\n\t\t\t{\r\n\t\t\t\tHWND hPlugin = GetDlgItem(hwnd, IDC_PLUGIN_CHECK);\r\n\t\t\t\tif (SendMessage(hPlugin, BM_GETCHECK, 0, 0) == BST_CHECKED)\r\n\t\t\t\t{\r\n\t\t\t\t\tTCHAR szPlugin[MAX_PATH];\r\n\t\t\t\t\tGetDlgItemText(hwnd, IDC_PLUGINS_COMBO, szPlugin, MAX_PATH);\r\n\t\t\t\t\tPathStripPathA(szPlugin);\r\n\r\n\t\t\t\t\tif (!_this->m_server->GetDSMPluginPointer()->IsLoaded())\r\n\t\t\t\t\t\t_this->m_server->GetDSMPluginPointer()->LoadPlugin(szPlugin, false);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// sf@2003 - We check if the loaded plugin is the same than\r\n\t\t\t\t\t\t// the currently selected one or not\r\n\t\t\t\t\t\t_this->m_server->GetDSMPluginPointer()->DescribePlugin();\r\n\t\t\t\t\t\tif (_stricmp(_this->m_server->GetDSMPluginPointer()->GetPluginFileName(), szPlugin))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t_this->m_server->GetDSMPluginPointer()->UnloadPlugin();\r\n\t\t\t\t\t\t\t_this->m_server->GetDSMPluginPointer()->LoadPlugin(szPlugin, false);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\tif (_this->m_server->GetDSMPluginPointer()->IsLoaded())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tSecure_Save_Plugin_Config(szPlugin);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tMessageBoxSecure(NULL, \r\n\t\t\t\t\t\t\tsz_ID_PLUGIN_NOT_LOAD, \r\n\t\t\t\t\t\t\tsz_ID_PLUGIN_LOADIN, MB_OK | MB_ICONEXCLAMATION );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\treturn TRUE;\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n\r\n\r\n// TightVNC 1.2.7\r\n// Set display/port settings to the correct state\r\nvoid\r\nvncProperties::InitPortSettings(HWND hwnd)\r\n{\r\n\tBOOL bConnectSock = m_server->SockConnected();\r\n\tBOOL bAutoPort = m_server->AutoPortSelect();\r\n\tUINT port_rfb = m_server->GetPort();\r\n\tUINT port_http = m_server->GetHttpPort();\r\n\tint d1 = PORT_TO_DISPLAY(port_rfb);\r\n\tint d2 = HPORT_TO_DISPLAY(port_http);\r\n\tBOOL bValidDisplay = (d1 == d2 && d1 >= 0 && d1 <= 99);\r\n\r\n\tCheckDlgButton(hwnd, IDC_PORTNO_AUTO,\r\n\t\t(bAutoPort) ? BST_CHECKED : BST_UNCHECKED);\r\n\tCheckDlgButton(hwnd, IDC_SPECDISPLAY,\r\n\t\t(!bAutoPort && bValidDisplay) ? BST_CHECKED : BST_UNCHECKED);\r\n\tCheckDlgButton(hwnd, IDC_SPECPORT,\r\n\t\t(!bAutoPort && !bValidDisplay) ? BST_CHECKED : BST_UNCHECKED);\r\n\r\n\tEnableWindow(GetDlgItem(hwnd, IDC_PORTNO_AUTO), bConnectSock);\r\n\tEnableWindow(GetDlgItem(hwnd, IDC_SPECDISPLAY), bConnectSock);\r\n\tEnableWindow(GetDlgItem(hwnd, IDC_SPECPORT), bConnectSock);\r\n\r\n\tif (bValidDisplay) {\r\n\t\tSetDlgItemInt(hwnd, IDC_DISPLAYNO, d1, FALSE);\r\n\t} else {\r\n\t\tSetDlgItemText(hwnd, IDC_DISPLAYNO, \"\");\r\n\t}\r\n\tSetDlgItemInt(hwnd, IDC_PORTRFB, port_rfb, FALSE);\r\n\tSetDlgItemInt(hwnd, IDC_PORTHTTP, port_http, FALSE);\r\n\r\n\tEnableWindow(GetDlgItem(hwnd, IDC_DISPLAYNO),\r\n\t\tbConnectSock && !bAutoPort && bValidDisplay);\r\n\tEnableWindow(GetDlgItem(hwnd, IDC_PORTRFB),\r\n\t\tbConnectSock && !bAutoPort && !bValidDisplay);\r\n\tEnableWindow(GetDlgItem(hwnd, IDC_PORTHTTP),\r\n\t\tbConnectSock && !bAutoPort && !bValidDisplay);\r\n}\r\n\r\n\r\n// Functions to load & save the settings\r\nLONG\r\nvncProperties::LoadInt(HKEY key, LPCSTR valname, LONG defval)\r\n{\r\n\tLONG pref;\r\n\tULONG type = REG_DWORD;\r\n\tULONG prefsize = sizeof(pref);\r\n\r\n\tif (RegQueryValueEx(key,\r\n\t\tvalname,\r\n\t\tNULL,\r\n\t\t&type,\r\n\t\t(LPBYTE) &pref,\r\n\t\t&prefsize) != ERROR_SUCCESS)\r\n\t\treturn defval;\r\n\r\n\tif (type != REG_DWORD)\r\n\t\treturn defval;\r\n\r\n\tif (prefsize != sizeof(pref))\r\n\t\treturn defval;\r\n\r\n\treturn pref;\r\n}\r\n\r\nvoid\r\nvncProperties::LoadPassword(HKEY key, char *buffer)\r\n{\r\n\tDWORD type = REG_BINARY;\r\n\tint slen=MAXPWLEN;\r\n\tchar inouttext[MAXPWLEN];\r\n\r\n\t// Retrieve the encrypted password\r\n\tif (RegQueryValueEx(key,\r\n\t\t\"Password\",\r\n\t\tNULL,\r\n\t\t&type,\r\n\t\t(LPBYTE) &inouttext,\r\n\t\t(LPDWORD) &slen) != ERROR_SUCCESS)\r\n\t\treturn;\r\n\r\n\tif (slen > MAXPWLEN)\r\n\t\treturn;\r\n\r\n\tmemcpy(buffer, inouttext, MAXPWLEN);\r\n}\r\n\r\nvoid //PGM\r\nvncProperties::LoadPassword2(HKEY key, char *buffer) //PGM\r\n{ //PGM\r\n\tDWORD type = REG_BINARY; //PGM\r\n\tint slen=MAXPWLEN; //PGM\r\n\tchar inouttext[MAXPWLEN]; //PGM\r\n\r\n\t// Retrieve the encrypted password //PGM\r\n\tif (RegQueryValueEx(key, //PGM\r\n\t\t\"Password2\", //PGM\r\n\t\tNULL, //PGM\r\n\t\t&type, //PGM\r\n\t\t(LPBYTE) &inouttext, //PGM\r\n\t\t(LPDWORD) &slen) != ERROR_SUCCESS) //PGM\r\n\t\treturn; //PGM\r\n\r\n\tif (slen > MAXPWLEN) //PGM\r\n\t\treturn; //PGM\r\n\r\n\tmemcpy(buffer, inouttext, MAXPWLEN); //PGM\r\n} //PGM\r\n\r\nchar *\r\nvncProperties::LoadString(HKEY key, LPCSTR keyname)\r\n{\r\n\tDWORD type = REG_SZ;\r\n\tDWORD buflen = 0;\r\n\tBYTE *buffer = 0;\r\n\r\n\t// Get the length of the AuthHosts string\r\n\tif (RegQueryValueEx(key,\r\n\t\tkeyname,\r\n\t\tNULL,\r\n\t\t&type,\r\n\t\tNULL,\r\n\t\t&buflen) != ERROR_SUCCESS)\r\n\t\treturn 0;\r\n\r\n\tif (type != REG_SZ)\r\n\t\treturn 0;\r\n\tbuffer = new BYTE[buflen];\r\n\tif (buffer == 0)\r\n\t\treturn 0;\r\n\r\n\t// Get the AuthHosts string data\r\n\tif (RegQueryValueEx(key,\r\n\t\tkeyname,\r\n\t\tNULL,\r\n\t\t&type,\r\n\t\tbuffer,\r\n\t\t&buflen) != ERROR_SUCCESS) {\r\n\t\tdelete [] buffer;\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t// Verify the type\r\n\tif (type != REG_SZ) {\r\n\t\tdelete [] buffer;\r\n\t\treturn 0;\r\n\t}\r\n\r\n\treturn (char *)buffer;\r\n}\r\n\r\n\r\nvoid\r\nvncProperties::ResetRegistry()\r\n{\t\r\n\tchar username[UNLEN+1];\r\n\tHKEY hkLocal, hkLocalUser, hkDefault;\r\n\tDWORD dw;\r\n\r\n\tif (!vncService::CurrentUser((char *)&username, sizeof(username)))\r\n\t\treturn;\r\n\r\n\t// If there is no user logged on them default to SYSTEM\r\n\tif (strcmp(username, \"\") == 0)\r\n\t\tstrcpy_s((char *)&username, UNLEN+1, \"SYSTEM\");\r\n\r\n\t// Try to get the machine registry key for WinVNC\r\n\tif (RegCreateKeyEx(HKEY_LOCAL_MACHINE,\r\n\t\tWINVNC_REGISTRY_KEY,\r\n\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\tKEY_READ, NULL, &hkLocal, &dw) != ERROR_SUCCESS)\r\n\t\t{\r\n\t\thkLocalUser=NULL;\r\n\t\thkDefault=NULL;\r\n\t\tgoto LABELUSERSETTINGS;\r\n\t\t}\r\n\r\n\t// Now try to get the per-user local key\r\n\tif (RegOpenKeyEx(hkLocal,\r\n\t\tusername,\r\n\t\t0, KEY_READ,\r\n\t\t&hkLocalUser) != ERROR_SUCCESS)\r\n\t\thkLocalUser = NULL;\r\n\r\n\t// Get the default key\r\n\tif (RegCreateKeyEx(hkLocal,\r\n\t\t\"Default\",\r\n\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\tKEY_READ,\r\n\t\tNULL,\r\n\t\t&hkDefault,\r\n\t\t&dw) != ERROR_SUCCESS)\r\n\t\thkDefault = NULL;\r\n\r\n\tif (hkLocalUser != NULL) RegCloseKey(hkLocalUser);\r\n\tif (hkDefault != NULL) RegCloseKey(hkDefault);\r\n\tif (hkLocal != NULL) RegCloseKey(hkLocal);\r\n\tRegCloseKey(HKEY_LOCAL_MACHINE);\r\nLABELUSERSETTINGS:\r\n\tif ((strcmp(username, \"SYSTEM\") != 0))\r\n\t\t{\r\n\t\t\tHKEY hkGlobalUser;\r\n\t\t\tif (RegCreateKeyEx(HKEY_CURRENT_USER,\r\n\t\t\t\tWINVNC_REGISTRY_KEY,\r\n\t\t\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\t\t\tKEY_READ, NULL, &hkGlobalUser, &dw) == ERROR_SUCCESS)\r\n\t\t\t{\r\n\t\t\t\tRegCloseKey(hkGlobalUser);\r\n\t\t\t\tRegCloseKey(HKEY_CURRENT_USER);\r\n\t\t\t}\r\n\t\t}\r\n\r\n}\r\n\r\nvoid\r\nvncProperties::Load(BOOL usersettings)\r\n{\r\n\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Entering Load\\n\"));\r\n\r\n\t//if (m_dlgvisible) {\r\n\t//\tvnclog.Print(LL_INTWARN, VNCLOG(\"service helper invoked while Properties panel displayed\\n\"));\r\n\t//\treturn;\r\n\t//}\r\n\tResetRegistry();\r\n\r\n\tif (vncService::RunningAsService()) usersettings=false;\r\n\r\n\t// sf@2007 - Vista mode\r\n\t// The WinVNC service mode is not used under Vista (due to Session0 isolation)\r\n\t// Default settings (Service mode) are used when WinVNC app in run under Vista login screen\r\n\t// User settings (loggued user mode) are used when WinVNC app in run in a user session\r\n\t// Todo: Maybe we should additionally check OS version...\r\n\tif (m_server->RunningFromExternalService())\r\n\t\tusersettings=false;\r\n\r\n\tm_usersettings = usersettings;\r\n\r\n\tif (m_usersettings)\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - User mode\\n\"));\r\n\telse\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Service mode\\n\"));\r\n\t\r\n\tchar username[UNLEN+1];\r\n\tHKEY hkLocal, hkLocalUser, hkDefault;\r\n\tDWORD dw;\r\n\t\r\n\t// NEW (R3) PREFERENCES ALGORITHM\r\n\t// 1.\tLook in HKEY_LOCAL_MACHINE/Software/ORL/WinVNC3/%username%\r\n\t//\t\tfor sysadmin-defined, user-specific settings.\r\n\t// 2.\tIf not found, fall back to %username%=Default\r\n\t// 3.\tIf AllowOverrides is set then load settings from\r\n\t//\t\tHKEY_CURRENT_USER/Software/ORL/WinVNC3\r\n\r\n\t// GET THE CORRECT KEY TO READ FROM\r\n\r\n\t// Get the user name / service name\r\n\tif (!vncService::CurrentUser((char *)&username, sizeof(username)))\r\n\t{\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - NO current user\\n\"));\r\n\t\treturn;\r\n\t}\r\n\r\n\t// If there is no user logged on them default to SYSTEM\r\n\tif (strcmp(username, \"\") == 0)\r\n\t{\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Force USER SYSTEM 1\\n\"));\r\n\t\tstrcpy_s((char *)&username, UNLEN+1, \"SYSTEM\");\r\n\t}\r\n\r\n\r\n\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - UserName = %s\\n\"), username);\r\n\r\n\t// Try to get the machine registry key for WinVNC\r\n\tif (RegCreateKeyEx(HKEY_LOCAL_MACHINE,\r\n\t\tWINVNC_REGISTRY_KEY,\r\n\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\tKEY_READ, NULL, &hkLocal, &dw) != ERROR_SUCCESS)\r\n\t\t{\r\n\t\thkLocalUser=NULL;\r\n\t\thkDefault=NULL;\r\n\t\tgoto LABELUSERSETTINGS;\r\n\t\t}\r\n\r\n\t// Now try to get the per-user local key\r\n\tif (RegOpenKeyEx(hkLocal,\r\n\t\tusername,\r\n\t\t0, KEY_READ,\r\n\t\t&hkLocalUser) != ERROR_SUCCESS)\r\n\t\thkLocalUser = NULL;\r\n\r\n\t// Get the default key\r\n\tif (RegCreateKeyEx(hkLocal,\r\n\t\t\"Default\",\r\n\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\tKEY_READ,\r\n\t\tNULL,\r\n\t\t&hkDefault,\r\n\t\t&dw) != ERROR_SUCCESS)\r\n\t\thkDefault = NULL;\r\n\r\n\t// LOAD THE MACHINE-LEVEL PREFS\r\n\r\n\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Machine level prefs\\n\"));\r\n\r\n\t// Logging/debugging prefs\r\n\tvnclog.Print(LL_INTINFO, VNCLOG(\"loading local-only settings\\n\"));\r\n\t//vnclog.SetMode(LoadInt(hkLocal, \"DebugMode\", 0));\r\n\t//vnclog.SetLevel(LoadInt(hkLocal, \"DebugLevel\", 0));\r\n\r\n\t// Disable Tray Icon\r\n\tm_server->SetDisableTrayIcon(LoadInt(hkLocal, \"DisableTrayIcon\", false));\r\n\tm_server->SetRdpmode(LoadInt(hkLocal, \"rdpmode\", 0));\r\n\tm_server->SetNoScreensaver(LoadInt(hkLocal, \"noscreensaver\", 0));\r\n\r\n\t// Authentication required, loopback allowed, loopbackOnly\r\n\r\n\tm_server->SetLoopbackOnly(LoadInt(hkLocal, \"LoopbackOnly\", false));\r\n\r\n\tm_pref_Secure = false;\r\n\tm_pref_Secure = LoadInt(hkLocal, \"Secure\", m_pref_Secure);\r\n\tm_server->Secure(m_pref_Secure);\r\n\r\n\tm_pref_RequireMSLogon=false;\r\n\tm_pref_RequireMSLogon = LoadInt(hkLocal, \"MSLogonRequired\", m_pref_RequireMSLogon);\r\n\tm_server->RequireMSLogon(m_pref_RequireMSLogon);\r\n\r\n\t// Marscha@2004 - authSSP: added NewMSLogon checkbox to admin props page\r\n\tm_pref_NewMSLogon = false;\r\n\tm_pref_NewMSLogon = LoadInt(hkLocal, \"NewMSLogon\", m_pref_NewMSLogon);\r\n\tm_server->SetNewMSLogon(m_pref_NewMSLogon);\r\n\r\n\tm_pref_ReverseAuthRequired = true;\r\n\tm_pref_ReverseAuthRequired = LoadInt(hkLocal, \"ReverseAuthRequired\", m_pref_ReverseAuthRequired);\r\n\tm_server->SetReverseAuthRequired(m_pref_ReverseAuthRequired);\r\n\r\n\t// sf@2003 - Moved DSM params here\r\n\tm_pref_UseDSMPlugin=false;\r\n\tm_pref_UseDSMPlugin = LoadInt(hkLocal, \"UseDSMPlugin\", m_pref_UseDSMPlugin);\r\n\tLoadDSMPluginName(hkLocal, m_pref_szDSMPlugin);\t\r\n\t\r\n\t//adzm 2010-05-12 - dsmplugin config\r\n\t{\r\n\t\tchar* szBuffer = LoadString(hkLocal, \"DSMPluginConfig\");\r\n\t\tif (szBuffer) {\r\n\t\t\tstrncpy_s(m_pref_DSMPluginConfig, sizeof(m_pref_DSMPluginConfig) - 1, szBuffer, _TRUNCATE);\r\n\t\t\tdelete[] szBuffer;\r\n\t\t} else {\r\n\t\t\tm_pref_DSMPluginConfig[0] = '\\0';\r\n\t\t}\r\n\t}\r\n#ifdef IPV6V4\r\n\tm_server->SetIPV6(LoadInt(hkLocal, \"UseIpv6\", true));\r\n#endif\r\n\tif (m_server->LoopbackOnly()) m_server->SetLoopbackOk(true);\r\n\telse m_server->SetLoopbackOk(LoadInt(hkLocal, \"AllowLoopback\", true));\r\n\tm_server->SetAuthRequired(LoadInt(hkLocal, \"AuthRequired\", true));\r\n\r\n\tm_server->SetConnectPriority(LoadInt(hkLocal, \"ConnectPriority\", 0));\r\n\tif (!m_server->LoopbackOnly())\r\n\t{\r\n\t\tchar *authhosts = LoadString(hkLocal, \"AuthHosts\");\r\n\t\tif (authhosts != 0) {\r\n\t\t\tm_server->SetAuthHosts(authhosts);\r\n\t\t\tdelete [] authhosts;\r\n\t\t} else {\r\n\t\t\tm_server->SetAuthHosts(0);\r\n\t\t}\r\n\t} else {\r\n\t\tm_server->SetAuthHosts(0);\r\n\t}\r\n\r\n\t// If Socket connections are allowed, should the HTTP server be enabled?\r\nLABELUSERSETTINGS:\r\n\t// LOAD THE USER PREFERENCES\r\n\t//vnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Load User Preferences\\n\"));\r\n\r\n\t// Set the default user prefs\r\n\tvnclog.Print(LL_INTINFO, VNCLOG(\"clearing user settings\\n\"));\r\n\tm_pref_AutoPortSelect=TRUE;\r\n    m_pref_HTTPConnect = TRUE;\r\n\tm_pref_PortNumber = RFB_PORT_OFFSET; \r\n\tm_pref_SockConnect=TRUE;\r\n\t{\r\n\t    vncPasswd::FromClear crypt(m_pref_Secure);\r\n\t    memcpy(m_pref_passwd, crypt, MAXPWLEN);\r\n\t}\r\n\tm_pref_QuerySetting=2;\r\n\tm_pref_QueryTimeout=10;\r\n\tm_pref_QueryDisableTime=0;\r\n\tm_pref_QueryAccept=0;\r\n\tm_pref_IdleTimeout=0;\r\n\tm_pref_MaxViewerSetting = 0;\r\n\tm_pref_MaxViewers = 128;\r\n\tm_pref_Collabo = false;\r\n\r\n\tm_pref_Frame = FALSE;\r\n\tm_pref_Notification = FALSE;\r\n\tm_pref_OSD = FALSE;\r\n\tm_pref_NotificationSelection = 0;\r\n\r\n\tm_pref_EnableRemoteInputs=TRUE;\r\n\tm_pref_DisableLocalInputs=FALSE;\r\n\tm_pref_EnableJapInput=FALSE;\r\n\tm_pref_EnableUnicodeInput=FALSE;\r\n\tm_pref_EnableWin8Helper=FALSE;\r\n\tm_pref_clearconsole=FALSE;\r\n\tm_pref_LockSettings=-1;\r\n\r\n\tm_pref_RemoveWallpaper=FALSE;\r\n\t// adzm - 2010-07 - Disable more effects or font smoothing\r\n\tm_pref_RemoveEffects=FALSE;\r\n\tm_pref_RemoveFontSmoothing=FALSE;\r\n    m_alloweditclients = TRUE;\r\n\tm_allowshutdown = TRUE;\r\n\tm_allowproperties = TRUE;\r\n\tm_allowInjection = FALSE;\r\n\r\n\t// Modif sf@2002\r\n\t// [v1.0.2-jp2 fix] Move to vncpropertiesPoll.cpp\r\n//\tm_pref_SingleWindow = FALSE;\r\n\tm_pref_UseDSMPlugin = FALSE;\r\n\t*m_pref_szDSMPlugin = '\\0';\r\n\tm_pref_DSMPluginConfig[0] = '\\0';\r\n\r\n\tm_pref_EnableFileTransfer = TRUE;\r\n\tm_pref_FTUserImpersonation = TRUE;\r\n\tm_pref_EnableBlankMonitor = TRUE;\r\n\tm_pref_BlankInputsOnly = FALSE;\r\n\tm_pref_QueryIfNoLogon = FALSE;\r\n\tm_pref_DefaultScale = 1;\r\n\r\n\t// Load the local prefs for this user\r\n\tif (hkDefault != NULL)\r\n\t{\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Local Preferences - Default\\n\"));\r\n\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"loading DEFAULT local settings\\n\"));\r\n\t\tLoadUserPrefs(hkDefault);\r\n\t\tm_allowshutdown = LoadInt(hkDefault, \"AllowShutdown\", m_allowshutdown);\r\n\t\tm_allowproperties = LoadInt(hkDefault, \"AllowProperties\", m_allowproperties);\r\n\t\tm_allowInjection = LoadInt(hkDefault, \"AllowInjection\", m_allowInjection);\r\n\t\tm_alloweditclients = LoadInt(hkDefault, \"AllowEditClients\", m_alloweditclients);\r\n\t}\r\n\r\n\t// Are we being asked to load the user settings, or just the default local system settings?\r\n\tif (usersettings)\r\n\t{\r\n\t\t// We want the user settings, so load them!\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - User Settings on\\n\"));\r\n\r\n\t\tif (hkLocalUser != NULL)\r\n\t\t{\r\n\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - LoadUser Preferences\\n\"));\r\n\r\n\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"loading \\\"%s\\\" local settings\\n\"), username);\r\n\t\t\tLoadUserPrefs(hkLocalUser);\r\n\t\t\tm_allowshutdown = LoadInt(hkLocalUser, \"AllowShutdown\", m_allowshutdown);\r\n\t\t\tm_allowproperties = LoadInt(hkLocalUser, \"AllowProperties\", m_allowproperties);\r\n\t\t\tm_allowInjection = LoadInt(hkLocalUser, \"AllowInjection\", m_allowInjection);\r\n\t\t  m_alloweditclients = LoadInt(hkLocalUser, \"AllowEditClients\", m_alloweditclients);\r\n\t\t}\r\n\r\n\t\t// Now override the system settings with the user's settings\r\n\t\t// If the username is SYSTEM then don't try to load them, because there aren't any...\r\n\t\tif (m_allowproperties && (strcmp(username, \"SYSTEM\") != 0))\r\n\t\t{\r\n\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Override system settings with users settings\\n\"));\r\n\t\t\tHKEY hkGlobalUser;\r\n\t\t\tif (RegCreateKeyEx(HKEY_CURRENT_USER,\r\n\t\t\t\tWINVNC_REGISTRY_KEY,\r\n\t\t\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\t\t\tKEY_READ, NULL, &hkGlobalUser, &dw) == ERROR_SUCCESS)\r\n\t\t\t{\r\n\t\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"loading \\\"%s\\\" global settings\\n\"), username);\r\n\t\t\t\tLoadUserPrefs(hkGlobalUser);\r\n\t\t\t\tRegCloseKey(hkGlobalUser);\r\n\r\n\t\t\t\t// Close the user registry hive so it can unload if required\r\n\t\t\t\tRegCloseKey(HKEY_CURRENT_USER);\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - User Settings off\\n\"));\r\n\t\tif (hkLocalUser != NULL)\r\n\t\t{\r\n\t\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"loading \\\"%s\\\" local settings\\n\"), username);\r\n\t\t\tLoadUserPrefs(hkLocalUser);\r\n\t\t\tm_allowshutdown = LoadInt(hkLocalUser, \"AllowShutdown\", m_allowshutdown);\r\n\t\t\tm_allowproperties = LoadInt(hkLocalUser, \"AllowProperties\", m_allowproperties);\r\n\t\t\tm_allowInjection = LoadInt(hkLocalUser, \"AllowInjection\", m_allowInjection);\r\n\t\t    m_alloweditclients = LoadInt(hkLocalUser, \"AllowEditClients\", m_alloweditclients);\t\t\t\r\n\t\t}\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"bypassing user-specific settings (both local and global)\\n\"));\r\n\t}\r\n\r\n\tif (hkLocalUser != NULL) RegCloseKey(hkLocalUser);\r\n\tif (hkDefault != NULL) RegCloseKey(hkDefault);\r\n\tif (hkLocal != NULL) RegCloseKey(hkLocal);\r\n\r\n\t// Make the loaded settings active..\r\n\tApplyUserPrefs();\r\n}\r\n\r\nvoid\r\nvncProperties::LoadUserPrefs(HKEY appkey)\r\n{\r\n\t// LOAD USER PREFS FROM THE SELECTED KEY\r\n\r\n\t// Modif sf@2002\r\n\tm_pref_EnableFileTransfer = LoadInt(appkey, \"FileTransferEnabled\", m_pref_EnableFileTransfer);\r\n\tm_pref_FTUserImpersonation = LoadInt(appkey, \"FTUserImpersonation\", m_pref_FTUserImpersonation); // sf@2005\r\n\tm_pref_EnableBlankMonitor = LoadInt(appkey, \"BlankMonitorEnabled\", m_pref_EnableBlankMonitor);\r\n\tm_pref_BlankInputsOnly = LoadInt(appkey, \"BlankInputsOnly\", m_pref_BlankInputsOnly); //PGM\r\n\tm_pref_DefaultScale = LoadInt(appkey, \"DefaultScale\", m_pref_DefaultScale);\r\n\t\r\n\tm_pref_Primary=LoadInt(appkey, \"primary\", m_pref_Primary);\r\n\tm_pref_Secondary=LoadInt(appkey, \"secondary\", m_pref_Secondary);\r\n\r\n\tm_pref_UseDSMPlugin = LoadInt(appkey, \"UseDSMPlugin\", m_pref_UseDSMPlugin);\r\n\tLoadDSMPluginName(appkey, m_pref_szDSMPlugin);\r\n\r\n\t// Connection prefs\r\n\tm_pref_SockConnect=LoadInt(appkey, \"SocketConnect\", m_pref_SockConnect);\r\n\tm_pref_HTTPConnect=LoadInt(appkey, \"HTTPConnect\", m_pref_HTTPConnect);\r\n\tm_pref_AutoPortSelect=LoadInt(appkey, \"AutoPortSelect\", m_pref_AutoPortSelect);\r\n\tm_pref_PortNumber=LoadInt(appkey, \"PortNumber\", m_pref_PortNumber);\r\n\tm_pref_HttpPortNumber=LoadInt(appkey, \"HTTPPortNumber\",\r\n\t\t\t\t\t\t\t\t\tDISPLAY_TO_HPORT(PORT_TO_DISPLAY(m_pref_PortNumber)));\r\n\tm_pref_IdleTimeout=LoadInt(appkey, \"IdleTimeout\", m_pref_IdleTimeout);\r\n\t\r\n\tm_pref_RemoveWallpaper=LoadInt(appkey, \"RemoveWallpaper\", m_pref_RemoveWallpaper);\r\n\t// adzm - 2010-07 - Disable more effects or font smoothing\r\n\tm_pref_RemoveEffects=LoadInt(appkey, \"RemoveEffects\", m_pref_RemoveEffects);\r\n\tm_pref_RemoveFontSmoothing=LoadInt(appkey, \"RemoveFontSmoothing\", m_pref_RemoveFontSmoothing);\r\n\r\n\t// Connection querying settings\r\n\tm_pref_QuerySetting=LoadInt(appkey, \"QuerySetting\", m_pref_QuerySetting);\r\n\tm_server->SetQuerySetting(m_pref_QuerySetting);\r\n\tm_pref_QueryTimeout=LoadInt(appkey, \"QueryTimeout\", m_pref_QueryTimeout);\r\n\tm_server->SetQueryTimeout(m_pref_QueryTimeout);\r\n\tm_pref_QueryDisableTime=LoadInt(appkey, \"QueryDisableTime\", m_pref_QueryDisableTime);\r\n\tm_server->SetQueryDisableTime(m_pref_QueryDisableTime);\r\n\tm_pref_QueryAccept=LoadInt(appkey, \"QueryAccept\", m_pref_QueryAccept);\r\n\tm_server->SetQueryAccept(m_pref_QueryAccept);\r\n\r\n\tm_pref_MaxViewerSetting = LoadInt(appkey, \"MaxViewerSetting\", m_pref_MaxViewerSetting);\r\n\tm_server->setMaxViewerSetting(m_pref_MaxViewerSetting);\r\n\tm_pref_MaxViewers = LoadInt(appkey, \"MaxViewers\", m_pref_MaxViewers);\r\n\tm_server->setMaxViewers(m_pref_MaxViewers);\t\r\n\tm_pref_Collabo = LoadInt(appkey, \"Collabo\", m_pref_Collabo);\r\n\tm_server->setCollabo(m_pref_Collabo);\r\n\r\n\tm_pref_Frame = LoadInt(appkey, \"Frame\", m_pref_Frame);\r\n\tm_server->setFrame(m_pref_Frame);\r\n\tm_pref_Notification = LoadInt(appkey, \"Notification\", m_pref_Notification);\r\n\tm_server->setNotification(m_pref_Notification);\r\n\tm_pref_OSD = LoadInt(appkey, \"OSD\", m_pref_OSD);\r\n\tm_server->setOSD(m_pref_OSD);\r\n\tm_pref_NotificationSelection = LoadInt(appkey, \"NotificationSelection\", m_pref_NotificationSelection);\r\n\tm_server->setNotificationSelection(m_pref_NotificationSelection);\r\n\t\r\n\r\n\t// marscha@2006 - Is AcceptDialog required even if no user is logged on\r\n\tm_pref_QueryIfNoLogon=LoadInt(appkey, \"QueryIfNoLogon\", m_pref_QueryIfNoLogon);\r\n\tm_server->SetQueryIfNoLogon(m_pref_QueryIfNoLogon);\r\n\r\n\t// Load the password\r\n\tLoadPassword(appkey, m_pref_passwd);\r\n\tLoadPassword2(appkey, m_pref_passwd2); //PGM\r\n\r\n\t// Remote access prefs\r\n\tm_pref_EnableRemoteInputs=LoadInt(appkey, \"InputsEnabled\", m_pref_EnableRemoteInputs);\r\n\tm_pref_LockSettings=LoadInt(appkey, \"LockSetting\", m_pref_LockSettings);\r\n\tm_pref_DisableLocalInputs=LoadInt(appkey, \"LocalInputsDisabled\", m_pref_DisableLocalInputs);\r\n\tm_pref_EnableJapInput=LoadInt(appkey, \"EnableJapInput\", m_pref_EnableJapInput);\r\n\tm_pref_EnableUnicodeInput=LoadInt(appkey, \"EnableUnicodeInput\", m_pref_EnableUnicodeInput);\r\n\tm_pref_EnableWin8Helper=LoadInt(appkey, \"EnableWin8Helper\", m_pref_EnableWin8Helper);\r\n\tm_pref_clearconsole=LoadInt(appkey, \"clearconsole\", m_pref_clearconsole);\r\n}\r\n\r\nvoid\r\nvncProperties::ApplyUserPrefs()\r\n{\r\n\t// APPLY THE CACHED PREFERENCES TO THE SERVER\r\n\r\n\t// Modif sf@2002\r\n\tm_server->EnableFileTransfer(m_pref_EnableFileTransfer);\r\n\tm_server->FTUserImpersonation(m_pref_FTUserImpersonation); // sf@2005\r\n\tm_server->Primary(m_pref_Primary);\r\n\tm_server->Secondary(m_pref_Secondary);\r\n\r\n\tm_server->BlankMonitorEnabled(m_pref_EnableBlankMonitor);\r\n\tm_server->BlankInputsOnly(m_pref_BlankInputsOnly); //PGM\r\n\tm_server->SetDefaultScale(m_pref_DefaultScale);\r\n\r\n\t// Update the connection querying settings\r\n\tm_server->SetQuerySetting(m_pref_QuerySetting);\r\n\tm_server->SetQueryTimeout(m_pref_QueryTimeout);\r\n\tm_server->SetQueryDisableTime(m_pref_QueryDisableTime);\r\n\tm_server->SetQueryAccept(m_pref_QueryAccept);\r\n\tm_server->setMaxViewerSetting(m_pref_MaxViewerSetting);\r\n\tm_server->setMaxViewers(m_pref_MaxViewers);\r\n\tm_server->setCollabo(m_pref_Collabo);\r\n\r\n\tm_server->setFrame(m_pref_Frame);\r\n\tm_server->setNotification(m_pref_Notification);\r\n\tm_server->setOSD(m_pref_OSD);\r\n\tm_server->setNotificationSelection(m_pref_NotificationSelection);\r\n\r\n\tm_server->SetAutoIdleDisconnectTimeout(m_pref_IdleTimeout);\r\n\tm_server->EnableRemoveWallpaper(m_pref_RemoveWallpaper);\r\n\t// adzm - 2010-07 - Disable more effects or font smoothing\r\n\tm_server->EnableRemoveFontSmoothing(m_pref_RemoveFontSmoothing);\r\n\tm_server->EnableRemoveEffects(m_pref_RemoveEffects);\r\n\r\n\t// Is the listening socket closing?\r\n\r\n\tif (!m_pref_SockConnect)\r\n\t\tm_server->SockConnect(m_pref_SockConnect);\r\n\r\n\tm_server->EnableHTTPConnect(m_pref_HTTPConnect);\r\n\r\n\t// Are inputs being disabled?\r\n\tif (!m_pref_EnableRemoteInputs)\r\n\t\tm_server->EnableRemoteInputs(m_pref_EnableRemoteInputs);\r\n\tif (m_pref_DisableLocalInputs)\r\n\t\tm_server->DisableLocalInputs(m_pref_DisableLocalInputs);\r\n\tif (m_pref_EnableJapInput)\r\n\t\tm_server->EnableJapInput(m_pref_EnableJapInput);\r\n\tif (m_pref_EnableUnicodeInput)\r\n\t\tm_server->EnableUnicodeInput(m_pref_EnableUnicodeInput);\r\n\tif (m_pref_EnableWin8Helper)\r\n\t\tm_server->Win8HelperEnabled(m_pref_EnableWin8Helper);\r\n\tm_server->Clearconsole(m_pref_clearconsole);\r\n\r\n\t// Update the password\r\n\tm_server->SetPassword(m_pref_passwd);\r\n\tm_server->SetPassword2(m_pref_passwd2); //PGM\r\n\r\n\t// Now change the listening port settings\r\n\tm_server->SetAutoPortSelect(m_pref_AutoPortSelect);\r\n\tif (!m_pref_AutoPortSelect)\r\n\t\t// m_server->SetPort(m_pref_PortNumber);\r\n\t\tm_server->SetPorts(m_pref_PortNumber, m_pref_HttpPortNumber); // Tight 1.2.7\r\n\r\n\tm_server->SockConnect(m_pref_SockConnect);\r\n\r\n\t// Remote access prefs\r\n\tm_server->EnableRemoteInputs(m_pref_EnableRemoteInputs);\r\n\tm_server->SetLockSettings(m_pref_LockSettings);\r\n\tm_server->DisableLocalInputs(m_pref_DisableLocalInputs);\r\n\tm_server->EnableJapInput(m_pref_EnableJapInput);\r\n\tm_server->EnableUnicodeInput(m_pref_EnableUnicodeInput);\r\n\tm_server->Win8HelperEnabled(m_pref_EnableWin8Helper);\r\n\tm_server->Clearconsole(m_pref_clearconsole);\r\n\t// DSM Plugin prefs\r\n\tm_server->EnableDSMPlugin(m_pref_UseDSMPlugin);\r\n\tm_server->SetDSMPluginName(m_pref_szDSMPlugin);\r\n\t\r\n\t//adzm 2010-05-12 - dsmplugin config\r\n\tm_server->SetDSMPluginConfig(m_pref_DSMPluginConfig);\r\n\r\n\tif (m_server->IsDSMPluginEnabled()) \r\n\t\tm_server->SetDSMPlugin(false);\r\n}\r\n\r\nvoid\r\nvncProperties::SaveInt(HKEY key, LPCSTR valname, LONG val)\r\n{\r\n\tRegSetValueEx(key, valname, 0, REG_DWORD, (LPBYTE) &val, sizeof(val));\r\n}\r\n\r\nvoid\r\nvncProperties::SavePassword(HKEY key, char *buffer)\r\n{\r\n\tRegSetValueEx(key, \"Password\", 0, REG_BINARY, (LPBYTE) buffer, MAXPWLEN);\r\n}\r\nvoid //PGM\r\nvncProperties::SavePassword2(HKEY key, char *buffer) //PGM\r\n{ //PGM\r\n\tRegSetValueEx(key, \"Password2\", 0, REG_BINARY, (LPBYTE) buffer, MAXPWLEN); //PGM\r\n} //PGM\r\nvoid\r\nvncProperties::SaveString(HKEY key,LPCSTR valname, const char *buffer)\r\n{\r\n\tRegSetValueEx(key, valname, 0, REG_BINARY, (LPBYTE) buffer, (DWORD)(strlen(buffer)+1));\r\n}\r\n\r\nvoid\r\nvncProperties::SaveDSMPluginName(HKEY key, char *buffer)\r\n{\r\n\tRegSetValueEx(key, \"DSMPlugin\", 0, REG_BINARY, (LPBYTE) buffer, MAXPATH);\r\n}\r\n\r\nvoid\r\nvncProperties::LoadDSMPluginName(HKEY key, char *buffer)\r\n{\r\n\tDWORD type = REG_BINARY;\r\n\tint slen=MAXPATH;\r\n\tchar inouttext[MAXPATH];\r\n\r\n\tif (RegQueryValueEx(key,\r\n\t\t\"DSMPlugin\",\r\n\t\tNULL,\r\n\t\t&type,\r\n\t\t(LPBYTE) &inouttext,\r\n\t\t(LPDWORD) &slen) != ERROR_SUCCESS)\r\n\t\treturn;\r\n\r\n\tif (slen > MAXPATH)\r\n\t\treturn;\r\n\r\n\tmemcpy(buffer, inouttext, MAXPATH);\r\n}\r\n\r\nvoid\r\nvncProperties::Save()\r\n{\r\n\tHKEY appkey;\r\n\tDWORD dw;\r\n\r\n\tif (!m_allowproperties)\r\n\t\treturn;\r\n\r\n\t// NEW (R3) PREFERENCES ALGORITHM\r\n\t// The user's prefs are only saved if the user is allowed to override\r\n\t// the machine-local settings specified for them.  Otherwise, the\r\n\t// properties entry on the tray icon menu will be greyed out.\r\n\r\n\t// GET THE CORRECT KEY TO READ FROM\r\n\r\n\t// Have we loaded user settings, or system settings?\r\n\tif (m_usersettings) {\r\n\t\t// Verify that we know who is logged on\r\n\t\tchar username[UNLEN+1];\r\n\t\tif (!vncService::CurrentUser((char *)&username, sizeof(username)))\r\n\t\t\treturn;\r\n\t\tif (strcmp(username, \"\") == 0)\r\n\t\t\treturn;\r\n\r\n\t\t// Try to get the per-user, global registry key for WinVNC\r\n\t\tif (RegCreateKeyEx(HKEY_CURRENT_USER,\r\n\t\t\tWINVNC_REGISTRY_KEY,\r\n\t\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\t\tKEY_WRITE | KEY_READ, NULL, &appkey, &dw) != ERROR_SUCCESS)\r\n\t\t\treturn;\r\n\t} else {\r\n\t\t// Try to get the default local registry key for WinVNC\r\n\t\tHKEY hkLocal;\r\n\t\tif (RegCreateKeyEx(HKEY_LOCAL_MACHINE,\r\n\t\t\tWINVNC_REGISTRY_KEY,\r\n\t\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\t\tKEY_READ, NULL, &hkLocal, &dw) != ERROR_SUCCESS) {\r\n\t\t\tMessageBoxSecure(NULL, sz_ID_MB1, sz_ID_WVNC, MB_OK);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (RegCreateKeyEx(hkLocal,\r\n\t\t\t\"Default\",\r\n\t\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\t\tKEY_WRITE | KEY_READ, NULL, &appkey, &dw) != ERROR_SUCCESS) {\r\n\t\t\tRegCloseKey(hkLocal);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tRegCloseKey(hkLocal);\r\n\t}\r\n\r\n\t// SAVE PER-USER PREFS IF ALLOWED\r\n\tSaveUserPrefs(appkey);\r\n\tRegCloseKey(appkey);\r\n\tRegCloseKey(HKEY_CURRENT_USER);\r\n\r\n\t// Machine Preferences\r\n\t// Get the machine registry key for WinVNC\r\n\tHKEY hkLocal,hkDefault;\r\n\tif (RegCreateKeyEx(HKEY_LOCAL_MACHINE,\r\n\t\tWINVNC_REGISTRY_KEY,\r\n\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\tKEY_WRITE | KEY_READ, NULL, &hkLocal, &dw) != ERROR_SUCCESS)\r\n\t\treturn;\r\n\tif (RegCreateKeyEx(hkLocal,\r\n\t\t\"Default\",\r\n\t\t0, REG_NONE, REG_OPTION_NON_VOLATILE,\r\n\t\tKEY_WRITE | KEY_READ,\r\n\t\tNULL,\r\n\t\t&hkDefault,\r\n\t\t&dw) != ERROR_SUCCESS)\r\n\t\thkDefault = NULL;\r\n\t// sf@2003\r\n\tSaveInt(hkLocal, \"DebugMode\", vnclog.GetMode());\r\n\tSaveInt(hkLocal, \"Avilog\", vnclog.GetVideo());\r\n\tSaveString(hkLocal, \"path\", vnclog.GetPath());\r\n\tSaveInt(hkLocal, \"DebugLevel\", vnclog.GetLevel());\r\n\tSaveInt(hkLocal, \"AllowLoopback\", m_server->LoopbackOk());\r\n#ifdef IPV6V4\r\n\tSaveInt(hkLocal, \"UseIpv6\", m_server->IPV6());\r\n#endif\r\n\tSaveInt(hkLocal, \"LoopbackOnly\", m_server->LoopbackOnly());\r\n\tif (hkDefault) \r\n\t\t{\r\n\t\t\tSaveInt(hkDefault, \"AllowShutdown\", m_allowshutdown);\r\n\t\t\tSaveInt(hkDefault, \"AllowProperties\",  m_allowproperties);\r\n\t\t\tSaveInt(hkDefault, \"AllowEditClients\", m_alloweditclients);\r\n\t\t}\r\n\r\n\tSaveInt(hkLocal, \"DisableTrayIcon\", m_server->GetDisableTrayIcon());\r\n\tSaveInt(hkLocal, \"rdpmode\", m_server->GetRdpmode());\r\n\tSaveInt(hkLocal, \"noscreensaver\", m_server->GetNoScreensaver());\r\n\tSaveInt(hkLocal, \"Secure\", m_server->Secure());\r\n\tSaveInt(hkLocal, \"MSLogonRequired\", m_server->MSLogonRequired());\r\n\t// Marscha@2004 - authSSP: save \"New MS-Logon\" state\r\n\tSaveInt(hkLocal, \"NewMSLogon\", m_server->GetNewMSLogon());\r\n\tSaveInt(hkLocal, \"ReverseAuthRequired\", m_server->GetReverseAuthRequired());\r\n\t// sf@2003 - DSM params here\r\n\tSaveInt(hkLocal, \"UseDSMPlugin\", m_server->IsDSMPluginEnabled());\r\n\tSaveInt(hkLocal, \"ConnectPriority\", m_server->ConnectPriority());\r\n\tSaveDSMPluginName(hkLocal, m_server->GetDSMPluginName());\t\r\n\t\r\n\t//adzm 2010-05-12 - dsmplugin config\r\n\tSaveString(hkLocal, \"DSMPluginConfig\", m_server->GetDSMPluginConfig());\r\n\r\n\tif (hkDefault) RegCloseKey(hkDefault);\r\n\tif (hkLocal) RegCloseKey(hkLocal);\r\n}\r\n\r\nvoid\r\nvncProperties::SaveUserPrefs(HKEY appkey)\r\n{\r\n\t// SAVE THE PER USER PREFS\r\n\tvnclog.Print(LL_INTINFO, VNCLOG(\"saving current settings to registry\\n\"));\r\n\r\n\t// Modif sf@2002\r\n\tSaveInt(appkey, \"FileTransferEnabled\", m_server->FileTransferEnabled());\r\n\tSaveInt(appkey, \"FTUserImpersonation\", m_server->FTUserImpersonation()); // sf@2005\r\n\tSaveInt(appkey, \"BlankMonitorEnabled\", m_server->BlankMonitorEnabled());\r\n\tSaveInt(appkey, \"BlankInputsOnly\", m_server->BlankInputsOnly()); //PGM\r\n\tSaveInt(appkey, \"primary\", m_server->Primary());\r\n\tSaveInt(appkey, \"secondary\", m_server->Secondary());\r\n\r\n\tSaveInt(appkey, \"DefaultScale\", m_server->GetDefaultScale());\r\n\r\n\tSaveInt(appkey, \"UseDSMPlugin\", m_server->IsDSMPluginEnabled());\r\n\tSaveDSMPluginName(appkey, m_server->GetDSMPluginName());\r\n\t//adzm 2010-05-12 - dsmplugin config\r\n\tSaveString(appkey, \"DSMPluginConfig\", m_server->GetDSMPluginConfig());\r\n\r\n\t// Connection prefs\r\n\tSaveInt(appkey, \"SocketConnect\", m_server->SockConnected());\r\n\tSaveInt(appkey, \"HTTPConnect\", m_server->HTTPConnectEnabled());\r\n\tSaveInt(appkey, \"AutoPortSelect\", m_server->AutoPortSelect());\r\n\tif (!m_server->AutoPortSelect()) {\r\n\t\tSaveInt(appkey, \"PortNumber\", m_server->GetPort());\r\n\t\tSaveInt(appkey, \"HTTPPortNumber\", m_server->GetHttpPort());\r\n\t}\r\n\tSaveInt(appkey, \"InputsEnabled\", m_server->RemoteInputsEnabled());\r\n\tSaveInt(appkey, \"LocalInputsDisabled\", m_server->LocalInputsDisabled());\r\n\tSaveInt(appkey, \"IdleTimeout\", m_server->AutoIdleDisconnectTimeout());\r\n\tSaveInt(appkey, \"EnableJapInput\", m_server->JapInputEnabled());\r\n\tSaveInt(appkey, \"EnableUnicodeInput\", m_server->UnicodeInputEnabled());\r\n\tSaveInt(appkey, \"EnableWin8Helper\", m_server->Win8HelperEnabled());\r\n\r\n\t// Connection querying settings\r\n\tSaveInt(appkey, \"QuerySetting\", m_server->QuerySetting());\r\n\tSaveInt(appkey, \"QueryTimeout\", m_server->QueryTimeout());\r\n\tSaveInt(appkey, \"QueryDisableTime\", m_server->QueryDisableTime());\r\n\tSaveInt(appkey, \"QueryAccept\", m_server->QueryAcceptForSave());\r\n\tSaveInt(appkey, \"MaxViewerSetting\", m_server->getMaxViewerSetting());\r\n\tSaveInt(appkey, \"MaxViewers\", m_server->getMaxViewers());\r\n\tSaveInt(appkey, \"Collabo\", m_server->getCollabo());\r\n\tSaveInt(appkey, \"Frame\", m_server->getFrame());\r\n\tSaveInt(appkey, \"Notification\", m_server->getNotification());\r\n\tSaveInt(appkey, \"OSD\", m_server->getOSD());\r\n\tSaveInt(appkey, \"NotificationSelection\", m_server->getNotificationSelection());\r\n\r\n\r\n\t// Lock settings\r\n\tSaveInt(appkey, \"LockSetting\", m_server->LockSettings());\r\n\r\n\t// Wallpaper removal\r\n\tSaveInt(appkey, \"RemoveWallpaper\", m_server->RemoveWallpaperEnabled());\r\n\t// UI Effects\r\n\t// adzm - 2010-07 - Disable more effects or font smoothing\r\n\tSaveInt(appkey, \"RemoveEffects\", m_server->RemoveEffectsEnabled());\r\n\tSaveInt(appkey, \"RemoveFontSmoothing\", m_server->RemoveFontSmoothingEnabled());\r\n\r\n\t// Save the password\r\n\tchar passwd[MAXPWLEN];\r\n\tm_server->GetPassword(passwd);\r\n\tSavePassword(appkey, passwd);\r\n\tmemset(passwd, '\\0', MAXPWLEN); //PGM\r\n\tm_server->GetPassword2(passwd); //PGM\r\n\tSavePassword2(appkey, passwd); //PGM\r\n}\r\n\r\n\r\n// ********************************************************************\r\n// Ini file part - Wwill replace registry access completely, some day\r\n// WARNING: until then, when adding/modifying a config parameter\r\n//          don't forget to modify both ini file & registry parts !\r\n// ********************************************************************\r\n\r\nvoid vncProperties::LoadFromIniFile()\r\n{\r\n\t//if (m_dlgvisible)\r\n\t//{\r\n\t//\tvnclog.Print(LL_INTWARN, VNCLOG(\"service helper invoked while Properties panel displayed\\n\"));\r\n\t//\treturn;\r\n\t//}\r\n\r\n\tchar username[UNLEN+1];\r\n\r\n\t// Get the user name / service name\r\n\tif (!vncService::CurrentUser((char *)&username, sizeof(username)))\r\n\t{\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - NO current user\\n\"));\r\n\t\treturn;\r\n\t}\r\n\r\n\t// If there is no user logged on them default to SYSTEM\r\n\tif (strcmp(username, \"\") == 0)\r\n\t{\r\n\t\t//vnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Force USER SYSTEM 2\\n\"));\r\n\t\tstrcpy_s((char *)&username, UNLEN+1, \"SYSTEM\");\r\n\t}\r\n\r\n\t// Logging/debugging prefs\r\n\tvnclog.SetMode(myIniFile.ReadInt(\"admin\", \"DebugMode\", 0));\r\n\tchar temp[512];\r\n\tmyIniFile.ReadString(\"admin\", \"path\", temp,512);\t\r\n\tvnclog.SetPath(temp);\r\n\tvnclog.SetLevel(myIniFile.ReadInt(\"admin\", \"DebugLevel\", 0));\r\n\tvnclog.SetVideo(myIniFile.ReadInt(\"admin\", \"Avilog\", 0) ? true : false);\r\n\r\n\t// Disable Tray Icon\r\n\tm_server->SetDisableTrayIcon(myIniFile.ReadInt(\"admin\", \"DisableTrayIcon\", false));\r\n\tm_server->SetRdpmode(myIniFile.ReadInt(\"admin\", \"rdpmode\", 0));\r\n\tm_server->SetNoScreensaver(myIniFile.ReadInt(\"admin\", \"noscreensaver\", 0));\r\n\r\n\t// Authentication required, loopback allowed, loopbackOnly\r\n\r\n\tm_server->SetLoopbackOnly(myIniFile.ReadInt(\"admin\", \"LoopbackOnly\", false));\r\n\r\n\tm_pref_Secure = false;\r\n\tm_pref_Secure = myIniFile.ReadInt(\"admin\", \"Secure\", m_pref_Secure);\r\n\tm_server->Secure(m_pref_Secure);\r\n\r\n\tm_pref_RequireMSLogon=false;\r\n\tm_pref_RequireMSLogon = myIniFile.ReadInt(\"admin\", \"MSLogonRequired\", m_pref_RequireMSLogon);\r\n\tm_server->RequireMSLogon(m_pref_RequireMSLogon);\r\n\r\n\t// Marscha@2004 - authSSP: added NewMSLogon checkbox to admin props page\r\n\tm_pref_NewMSLogon = false;\r\n\tm_pref_NewMSLogon = myIniFile.ReadInt(\"admin\", \"NewMSLogon\", m_pref_NewMSLogon);\r\n\tm_server->SetNewMSLogon(m_pref_NewMSLogon);\r\n\r\n\t// sf@2003 - Moved DSM params here\r\n\tm_pref_UseDSMPlugin=false;\r\n\tm_pref_UseDSMPlugin = myIniFile.ReadInt(\"admin\", \"UseDSMPlugin\", m_pref_UseDSMPlugin);\r\n\tmyIniFile.ReadString(\"admin\", \"DSMPlugin\",m_pref_szDSMPlugin,128);\r\n\r\n\tm_pref_ReverseAuthRequired = true;\r\n\tm_pref_ReverseAuthRequired = myIniFile.ReadInt(\"admin\", \"ReverseAuthRequired\", m_pref_ReverseAuthRequired);\r\n\tm_server->SetReverseAuthRequired(m_pref_ReverseAuthRequired);\r\n\t\r\n\t//adzm 2010-05-12 - dsmplugin config\r\n\tmyIniFile.ReadString(\"admin\", \"DSMPluginConfig\", m_pref_DSMPluginConfig, 512);\r\n#ifdef IPV6V4\r\n\tm_server->SetIPV6(myIniFile.ReadInt(\"admin\", \"UseIpv6\", false));\r\n#endif\r\n\tif (m_server->LoopbackOnly()) m_server->SetLoopbackOk(true);\r\n\telse m_server->SetLoopbackOk(myIniFile.ReadInt(\"admin\", \"AllowLoopback\", true));\r\n\tm_server->SetAuthRequired(myIniFile.ReadInt(\"admin\", \"AuthRequired\", true));\r\n\r\n\tm_server->SetConnectPriority(myIniFile.ReadInt(\"admin\", \"ConnectPriority\", 0));\r\n\tif (!m_server->LoopbackOnly())\r\n\t{\r\n\t\tchar *authhosts=new char[150];\r\n\t\tmyIniFile.ReadString(\"admin\", \"AuthHosts\",authhosts,150);\r\n\t\tif (authhosts != 0) {\r\n\t\t\tm_server->SetAuthHosts(authhosts);\r\n\t\t\tdelete [] authhosts;\r\n\t\t} else {\r\n\t\t\tm_server->SetAuthHosts(0);\r\n\t\t}\r\n\t} else {\r\n\t\tm_server->SetAuthHosts(0);\r\n\t}\r\n\r\n\t//vnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Load User Preferences\\n\"));\r\n\r\n\t// Set the default user prefs\r\n\tvnclog.Print(LL_INTINFO, VNCLOG(\"clearing user settings\\n\"));\r\n\tm_pref_AutoPortSelect=TRUE;\r\n    m_pref_HTTPConnect = TRUE;\r\n\tm_pref_PortNumber = RFB_PORT_OFFSET; \r\n\tm_pref_SockConnect=TRUE;\r\n\t{\r\n\t    vncPasswd::FromClear crypt(m_pref_Secure);\r\n\t    memcpy(m_pref_passwd, crypt, MAXPWLEN);\r\n\t}\r\n\tm_pref_QuerySetting=2;\r\n\tm_pref_QueryTimeout=10;\r\n\tm_pref_QueryDisableTime=0;\r\n\tm_pref_QueryAccept=0;\r\n\tm_pref_IdleTimeout=0;\r\n\tm_pref_MaxViewerSetting = 0;\r\n\tm_pref_MaxViewers = 128;\r\n\tm_pref_EnableRemoteInputs=TRUE;\r\n\tm_pref_DisableLocalInputs=FALSE;\r\n\tm_pref_EnableJapInput=FALSE;\r\n\tm_pref_EnableUnicodeInput=FALSE;\r\n\tm_pref_EnableWin8Helper=FALSE;\r\n\tm_pref_clearconsole=FALSE;\r\n\tm_pref_LockSettings=-1;\r\n\tm_pref_Collabo=false;\r\n\r\n\tm_pref_Frame = FALSE;\r\n\tm_pref_Notification = FALSE;\r\n\tm_pref_OSD = FALSE;\r\n\tm_pref_NotificationSelection = 0;\r\n\r\n\tm_pref_RemoveWallpaper=FALSE;\r\n\t// adzm - 2010-07 - Disable more effects or font smoothing\r\n\tm_pref_RemoveEffects=FALSE;\r\n\tm_pref_RemoveFontSmoothing=FALSE;\r\n    m_alloweditclients = TRUE;\r\n\tm_allowshutdown = TRUE;\r\n\tm_allowproperties = TRUE;\r\n\tm_allowInjection = FALSE;\r\n\r\n\t// Modif sf@2002\r\n\tm_pref_SingleWindow = FALSE;\r\n\tm_pref_UseDSMPlugin = FALSE;\r\n\t*m_pref_szDSMPlugin = '\\0';\r\n\tm_pref_DSMPluginConfig[0] = '\\0';\r\n\r\n\tm_pref_EnableFileTransfer = TRUE;\r\n\tm_pref_FTUserImpersonation = TRUE;\r\n\tm_pref_EnableBlankMonitor = TRUE;\r\n\tm_pref_BlankInputsOnly = FALSE;\r\n\tm_pref_QueryIfNoLogon = FALSE;\r\n\tm_pref_DefaultScale = 1;\r\n\r\n\tLoadUserPrefsFromIniFile();\r\n\tm_allowshutdown = myIniFile.ReadInt(\"admin\", \"AllowShutdown\", m_allowshutdown);\r\n\tm_allowproperties = myIniFile.ReadInt(\"admin\", \"AllowProperties\", m_allowproperties);\r\n\tm_allowInjection = myIniFile.ReadInt(\"admin\", \"AllowInjection\", m_allowInjection);\r\n\tm_alloweditclients = myIniFile.ReadInt(\"admin\", \"AllowEditClients\", m_alloweditclients);\r\n\r\n    m_ftTimeout = myIniFile.ReadInt(\"admin\", \"FileTransferTimeout\", m_ftTimeout);\r\n    if (m_ftTimeout > 600)\r\n        m_ftTimeout = 600;\r\n\r\n    m_keepAliveInterval = myIniFile.ReadInt(\"admin\", \"KeepAliveInterval\", m_keepAliveInterval);\r\n\tm_IdleInputTimeout = myIniFile.ReadInt(\"admin\", \"IdleInputTimeout\", m_IdleInputTimeout);\r\n\r\n    if (m_keepAliveInterval >= (m_ftTimeout - KEEPALIVE_HEADROOM))\r\n        m_keepAliveInterval = m_ftTimeout - KEEPALIVE_HEADROOM;\r\n\r\n    m_server->SetFTTimeout(m_ftTimeout);\r\n    m_server->SetKeepAliveInterval(m_keepAliveInterval);\r\n\tm_server->SetIdleInputTimeout(m_IdleInputTimeout);\r\n    \r\n\tmyIniFile.ReadString(\"admin\", \"service_commandline\", service_commandline, 1024);\r\n\tmyIniFile.ReadString(\"admin\", \"accept_reject_mesg\", accept_reject_mesg, 512);\r\n\r\n\tApplyUserPrefs();\r\n}\r\n\r\n\r\nvoid vncProperties::LoadUserPrefsFromIniFile()\r\n{\r\n\t// Modif sf@2002\r\n\tm_pref_EnableFileTransfer = myIniFile.ReadInt(\"admin\", \"FileTransferEnabled\", m_pref_EnableFileTransfer);\r\n\tm_pref_FTUserImpersonation = myIniFile.ReadInt(\"admin\", \"FTUserImpersonation\", m_pref_FTUserImpersonation); // sf@2005\r\n\tm_pref_EnableBlankMonitor = myIniFile.ReadInt(\"admin\", \"BlankMonitorEnabled\", m_pref_EnableBlankMonitor);\r\n\tm_pref_BlankInputsOnly = myIniFile.ReadInt(\"admin\", \"BlankInputsOnly\", m_pref_BlankInputsOnly); //PGM\r\n\tm_pref_DefaultScale = myIniFile.ReadInt(\"admin\", \"DefaultScale\", m_pref_DefaultScale);\r\n\r\n\tm_pref_UseDSMPlugin = myIniFile.ReadInt(\"admin\", \"UseDSMPlugin\", m_pref_UseDSMPlugin);\r\n\tmyIniFile.ReadString(\"admin\", \"DSMPlugin\",m_pref_szDSMPlugin,128);\r\n\t\r\n\t//adzm 2010-05-12 - dsmplugin config\r\n\tmyIniFile.ReadString(\"admin\", \"DSMPluginConfig\", m_pref_DSMPluginConfig, 512);\r\n\t\r\n\tm_pref_Primary = myIniFile.ReadInt(\"admin\", \"primary\", m_pref_Primary);\r\n\tm_pref_Secondary = myIniFile.ReadInt(\"admin\", \"secondary\", m_pref_Secondary);\r\n\r\n\t// Connection prefs\r\n\tm_pref_SockConnect=myIniFile.ReadInt(\"admin\", \"SocketConnect\", m_pref_SockConnect);\r\n\tm_pref_HTTPConnect=myIniFile.ReadInt(\"admin\", \"HTTPConnect\", m_pref_HTTPConnect);\r\n\tm_pref_AutoPortSelect=myIniFile.ReadInt(\"admin\", \"AutoPortSelect\", m_pref_AutoPortSelect);\r\n\tm_pref_PortNumber=myIniFile.ReadInt(\"admin\", \"PortNumber\", m_pref_PortNumber);\r\n\tm_pref_HttpPortNumber=myIniFile.ReadInt(\"admin\", \"HTTPPortNumber\",\r\n\t\t\t\t\t\t\t\t\tDISPLAY_TO_HPORT(PORT_TO_DISPLAY(m_pref_PortNumber)));\r\n\tm_pref_IdleTimeout=myIniFile.ReadInt(\"admin\", \"IdleTimeout\", m_pref_IdleTimeout);\r\n\t\r\n\tm_pref_RemoveWallpaper=myIniFile.ReadInt(\"admin\", \"RemoveWallpaper\", m_pref_RemoveWallpaper);\r\n\t// adzm - 2010-07 - Disable more effects or font smoothing\r\n\tm_pref_RemoveEffects=myIniFile.ReadInt(\"admin\", \"RemoveEffects\", m_pref_RemoveEffects);\r\n\tm_pref_RemoveFontSmoothing=myIniFile.ReadInt(\"admin\", \"RemoveFontSmoothing\", m_pref_RemoveFontSmoothing);\r\n\r\n\t// Connection querying settings\r\n\tm_pref_QuerySetting=myIniFile.ReadInt(\"admin\", \"QuerySetting\", m_pref_QuerySetting);\r\n\tm_server->SetQuerySetting(m_pref_QuerySetting);\r\n\tm_pref_QueryTimeout=myIniFile.ReadInt(\"admin\", \"QueryTimeout\", m_pref_QueryTimeout);\r\n\tm_server->SetQueryTimeout(m_pref_QueryTimeout);\r\n\tm_pref_QueryDisableTime=myIniFile.ReadInt(\"admin\", \"QueryDisableTime\", m_pref_QueryDisableTime);\r\n\tm_server->SetQueryDisableTime(m_pref_QueryDisableTime);\t\r\n\tm_pref_QueryAccept=myIniFile.ReadInt(\"admin\", \"QueryAccept\", m_pref_QueryAccept);\r\n\tm_server->SetQueryAccept(m_pref_QueryAccept);\r\n\r\n\tm_pref_MaxViewerSetting = myIniFile.ReadInt(\"admin\", \"MaxViewerSetting\", m_pref_MaxViewerSetting);\r\n\tm_server->setMaxViewerSetting(m_pref_MaxViewerSetting);\r\n\tm_pref_MaxViewers = myIniFile.ReadInt(\"admin\", \"MaxViewers\", m_pref_MaxViewers);\r\n\tm_server->setMaxViewers(m_pref_MaxViewers);\r\n\r\n\tm_pref_Collabo = myIniFile.ReadInt(\"admin\", \"Collabo\", m_pref_Collabo);\r\n\tm_server->setCollabo(m_pref_Collabo);\r\n\r\n\tm_pref_Frame = myIniFile.ReadInt(\"admin\", \"Frame\", m_pref_Frame);\r\n\tm_server->setFrame(m_pref_Frame);\r\n\tm_pref_Notification = myIniFile.ReadInt(\"admin\", \"Notification\", m_pref_Notification);\r\n\tm_server->setNotification(m_pref_Notification);\r\n\r\n\tm_pref_OSD = myIniFile.ReadInt(\"admin\", \"OSD\", m_pref_OSD);\r\n\tm_server->setOSD(m_pref_OSD);\r\n\tm_pref_NotificationSelection = myIniFile.ReadInt(\"admin\", \"NotificationSelection\", m_pref_NotificationSelection);\r\n\tm_server->setNotificationSelection(m_pref_NotificationSelection);\r\n\r\n\t// marscha@2006 - Is AcceptDialog required even if no user is logged on\r\n\tm_pref_QueryIfNoLogon=myIniFile.ReadInt(\"admin\", \"QueryIfNoLogon\", m_pref_QueryIfNoLogon);\r\n\tm_server->SetQueryIfNoLogon(m_pref_QueryIfNoLogon);\r\n\r\n\t// Load the password\r\n\tmyIniFile.ReadPassword(m_pref_passwd,MAXPWLEN);\r\n\tmyIniFile.ReadPassword2(m_pref_passwd2,MAXPWLEN); //PGM\r\n\r\n\t// Remote access prefs\r\n\tm_pref_EnableRemoteInputs=myIniFile.ReadInt(\"admin\", \"InputsEnabled\", m_pref_EnableRemoteInputs);\r\n\tm_pref_LockSettings=myIniFile.ReadInt(\"admin\", \"LockSetting\", m_pref_LockSettings);\r\n\tm_pref_DisableLocalInputs=myIniFile.ReadInt(\"admin\", \"LocalInputsDisabled\", m_pref_DisableLocalInputs);\r\n\tm_pref_EnableJapInput=myIniFile.ReadInt(\"admin\", \"EnableJapInput\", m_pref_EnableJapInput);\r\n\tm_pref_EnableUnicodeInput=myIniFile.ReadInt(\"admin\", \"EnableUnicodeInput\", m_pref_EnableUnicodeInput);\r\n\tm_pref_EnableWin8Helper=myIniFile.ReadInt(\"admin\", \"EnableWin8Helper\", m_pref_EnableWin8Helper);\r\n\tm_pref_clearconsole=myIniFile.ReadInt(\"admin\", \"clearconsole\", m_pref_clearconsole);\r\n\tG_SENDBUFFER_EX=myIniFile.ReadInt(\"admin\", \"sendbuffer\", G_SENDBUFFER_EX);\r\n}\r\n\r\nvoid vncProperties::SaveToIniFile()\r\n{\r\n\tif (!m_allowproperties)\r\n\t\treturn;\r\n\r\n\t// SAVE PER-USER PREFS IF ALLOWED\r\n\tif (!myIniFile.IsWritable()  || vncService::RunningAsService())\r\n\t\t\t{\r\n\t\t\t\t//First check if temp file is writable\r\n\t\t\t\tmyIniFile.IniFileSetTemp( m_Tempfile);\r\n\t\t\t\tif (!myIniFile.IsWritable())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvnclog.Print(LL_INTERR, VNCLOG(\"file %s not writable, error saving new settings\\n\"), m_Tempfile);\r\n\t\t\t\t\t\treturn;\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\tif (!Copy_to_Temp( m_Tempfile))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvnclog.Print(LL_INTERR, VNCLOG(\"file %s not writable, error saving new settings\\n\"), m_Tempfile);\r\n\t\t\t\t\t\treturn;\t\t\t\t\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\tSaveUserPrefsToIniFile();\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"DebugMode\", vnclog.GetMode());\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"Avilog\", vnclog.GetVideo());\r\n\t\t\t\tmyIniFile.WriteString(\"admin\", \"path\", vnclog.GetPath());\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"DebugLevel\", vnclog.GetLevel());\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"AllowLoopback\", m_server->LoopbackOk());\r\n#ifdef IPV6V4\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"UseIpv6\", m_server->IPV6());\r\n#endif\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"LoopbackOnly\", m_server->LoopbackOnly());\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"AllowShutdown\", m_allowshutdown);\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"AllowProperties\",  m_allowproperties);\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"AllowInjection\",  m_allowInjection);\t\t\t\t\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"AllowEditClients\", m_alloweditclients);\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"FileTransferTimeout\", m_ftTimeout);\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"KeepAliveInterval\", m_keepAliveInterval);\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"IdleInputTimeout\", m_IdleInputTimeout);\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"DisableTrayIcon\", m_server->GetDisableTrayIcon());\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"rdpmode\", m_server->GetRdpmode());\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"noscreensaver\", m_server->GetNoScreensaver());\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"Secure\", m_server->Secure());\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"MSLogonRequired\", m_server->MSLogonRequired());\r\n\t\t\t\t// Marscha@2004 - authSSP: save \"New MS-Logon\" state\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"NewMSLogon\", m_server->GetNewMSLogon());\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"ReverseAuthRequired\", m_server->GetReverseAuthRequired());\r\n\t\t\t\t// sf@2003 - DSM params here\r\n\t\t\t\tmyIniFile.WriteInt(\"admin\", \"ConnectPriority\", m_server->ConnectPriority());\r\n\t\t\t\tmyIniFile.WriteString(\"admin\", \"service_commandline\", service_commandline);\r\n\t\t\t\tmyIniFile.WriteString(\"admin\", \"accept_reject_mesg\", accept_reject_mesg);\r\n\t\t\t\tmyIniFile.copy_to_secure();\r\n\t\t\t\tmyIniFile.IniFileSetSecure();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\tSaveUserPrefsToIniFile();\r\n\tmyIniFile.WriteInt(\"admin\", \"DebugMode\", vnclog.GetMode());\r\n\tmyIniFile.WriteInt(\"admin\", \"Avilog\", vnclog.GetVideo());\r\n\tmyIniFile.WriteString(\"admin\", \"path\", vnclog.GetPath());\r\n\tmyIniFile.WriteInt(\"admin\", \"DebugLevel\", vnclog.GetLevel());\r\n\tmyIniFile.WriteInt(\"admin\", \"AllowLoopback\", m_server->LoopbackOk());\r\n#ifdef IPV6V4\r\n\tmyIniFile.WriteInt(\"admin\", \"UseIpv6\", m_server->IPV6());\r\n#endif\r\n\tmyIniFile.WriteInt(\"admin\", \"LoopbackOnly\", m_server->LoopbackOnly());\r\n\tmyIniFile.WriteInt(\"admin\", \"AllowShutdown\", m_allowshutdown);\r\n\tmyIniFile.WriteInt(\"admin\", \"AllowProperties\",  m_allowproperties);\r\n\tmyIniFile.WriteInt(\"admin\", \"AllowInjection\",  m_allowInjection);\r\n\tmyIniFile.WriteInt(\"admin\", \"AllowEditClients\", m_alloweditclients);\r\n    myIniFile.WriteInt(\"admin\", \"FileTransferTimeout\", m_ftTimeout);\r\n    myIniFile.WriteInt(\"admin\", \"KeepAliveInterval\", m_keepAliveInterval);\r\n\tmyIniFile.WriteInt(\"admin\", \"IdleInputTimeout\", m_IdleInputTimeout);\r\n\tmyIniFile.WriteInt(\"admin\", \"DisableTrayIcon\", m_server->GetDisableTrayIcon());\r\n\tmyIniFile.WriteInt(\"admin\", \"rdpmode\", m_server->GetRdpmode());\r\n\tmyIniFile.WriteInt(\"admin\", \"noscreensaver\", m_server->GetNoScreensaver());\r\n\tmyIniFile.WriteInt(\"admin\", \"Secure\", m_server->Secure());\r\n\tmyIniFile.WriteInt(\"admin\", \"MSLogonRequired\", m_server->MSLogonRequired());\r\n\t// Marscha@2004 - authSSP: save \"New MS-Logon\" state\r\n\tmyIniFile.WriteInt(\"admin\", \"NewMSLogon\", m_server->GetNewMSLogon());\r\n\tmyIniFile.WriteInt(\"admin\", \"ReverseAuthRequired\", m_server->GetReverseAuthRequired());\r\n\t// sf@2003 - DSM params here\r\n\tmyIniFile.WriteInt(\"admin\", \"ConnectPriority\", m_server->ConnectPriority());\r\n\r\n\tmyIniFile.WriteString(\"admin\", \"service_commandline\", service_commandline);\r\n\tmyIniFile.WriteString(\"admin\", \"accept_reject_mesg\", accept_reject_mesg);\r\n\treturn;\r\n}\r\n\r\n\r\nvoid vncProperties::SaveUserPrefsToIniFile()\r\n{\r\n\t// SAVE THE PER USER PREFS\r\n\tvnclog.Print(LL_INTINFO, VNCLOG(\"saving current settings to registry\\n\"));\r\n\r\n\t// Modif sf@2002\r\n\tmyIniFile.WriteInt(\"admin\", \"FileTransferEnabled\", m_server->FileTransferEnabled());\r\n\tmyIniFile.WriteInt(\"admin\", \"FTUserImpersonation\", m_server->FTUserImpersonation()); // sf@2005\r\n\tmyIniFile.WriteInt(\"admin\", \"BlankMonitorEnabled\", m_server->BlankMonitorEnabled());\r\n\tmyIniFile.WriteInt(\"admin\", \"BlankInputsOnly\", m_server->BlankInputsOnly()); //PGM\r\n\r\n\tmyIniFile.WriteInt(\"admin\", \"DefaultScale\", m_server->GetDefaultScale());\r\n\r\n\tmyIniFile.WriteInt(\"admin\", \"UseDSMPlugin\", m_server->IsDSMPluginEnabled());\r\n\r\n\tmyIniFile.WriteString(\"admin\", \"DSMPlugin\",m_server->GetDSMPluginName());\r\n\r\n\t//adzm 2010-05-12 - dsmplugin config\r\n\t//myIniFile.WriteString(\"admin\", \"DSMPluginConfig\", m_server->GetDSMPluginConfig());\r\n\r\n\tmyIniFile.WriteInt(\"admin\", \"primary\", m_server->Primary());\r\n\tmyIniFile.WriteInt(\"admin\", \"secondary\", m_server->Secondary());\r\n\r\n\t// Connection prefs\r\n\tmyIniFile.WriteInt(\"admin\", \"SocketConnect\", m_server->SockConnected());\r\n\tmyIniFile.WriteInt(\"admin\", \"HTTPConnect\", m_server->HTTPConnectEnabled());\r\n\tmyIniFile.WriteInt(\"admin\", \"AutoPortSelect\", m_server->AutoPortSelect());\r\n\tif (!m_server->AutoPortSelect()) {\r\n\t\tmyIniFile.WriteInt(\"admin\", \"PortNumber\", m_server->GetPort());\r\n\t\tmyIniFile.WriteInt(\"admin\", \"HTTPPortNumber\", m_server->GetHttpPort());\r\n\t}\r\n\tmyIniFile.WriteInt(\"admin\", \"InputsEnabled\", m_server->RemoteInputsEnabled());\r\n\tmyIniFile.WriteInt(\"admin\", \"LocalInputsDisabled\", m_server->LocalInputsDisabled());\r\n\tmyIniFile.WriteInt(\"admin\", \"IdleTimeout\", m_server->AutoIdleDisconnectTimeout());\r\n\tmyIniFile.WriteInt(\"admin\", \"EnableJapInput\", m_server->JapInputEnabled());\r\n\tmyIniFile.WriteInt(\"admin\", \"EnableUnicodeInput\", m_server->UnicodeInputEnabled());\r\n\tmyIniFile.WriteInt(\"admin\", \"EnableWin8Helper\", m_server->Win8HelperEnabled());\r\n\r\n\t// Connection querying settings\r\n\tmyIniFile.WriteInt(\"admin\", \"QuerySetting\", m_server->QuerySetting());\r\n\tmyIniFile.WriteInt(\"admin\", \"QueryTimeout\", m_server->QueryTimeout());\r\n\tmyIniFile.WriteInt(\"admin\", \"QueryDisableTime\", m_server->QueryDisableTime());\r\n\tmyIniFile.WriteInt(\"admin\", \"QueryAccept\", m_server->QueryAcceptForSave());\r\n\tmyIniFile.WriteInt(\"admin\", \"MaxViewerSetting\", m_server->getMaxViewerSetting());\r\n\tmyIniFile.WriteInt(\"admin\", \"MaxViewers\", m_server->getMaxViewers());\r\n\tmyIniFile.WriteInt(\"admin\", \"Collabo\", m_server->getCollabo());\r\n\tmyIniFile.WriteInt(\"admin\", \"Frame\", m_server->getFrame());\r\n\tmyIniFile.WriteInt(\"admin\", \"Notification\", m_server->getNotification());\r\n\tmyIniFile.WriteInt(\"admin\", \"OSD\", m_server->getOSD());\r\n\tmyIniFile.WriteInt(\"admin\", \"NotificationSelection\", m_server->getNotificationSelection());\r\n\t// Lock settings\r\n\tmyIniFile.WriteInt(\"admin\", \"LockSetting\", m_server->LockSettings());\r\n\r\n\t// Wallpaper removal\r\n\tmyIniFile.WriteInt(\"admin\", \"RemoveWallpaper\", m_server->RemoveWallpaperEnabled());\r\n\t// UI Effects\r\n\t// adzm - 2010-07 - Disable more effects or font smoothing\r\n\tmyIniFile.WriteInt(\"admin\", \"RemoveEffects\", m_server->RemoveEffectsEnabled());\r\n\tmyIniFile.WriteInt(\"admin\", \"RemoveFontSmoothing\", m_server->RemoveFontSmoothingEnabled());\r\n\r\n\t// Save the password\r\n\tchar passwd[MAXPWLEN];\r\n\tm_server->GetPassword(passwd);\r\n\tmyIniFile.WritePassword(passwd);\r\n\tmemset(passwd, '\\0', MAXPWLEN); //PGM\r\n\tm_server->GetPassword2(passwd); //PGM\r\n\tmyIniFile.WritePassword2(passwd); //PGM\r\n}\r\n\r\n\r\nvoid vncProperties::ReloadDynamicSettings()\r\n{\r\n\tchar username[UNLEN+1];\r\n\r\n\t// Get the user name / service name\r\n\tif (!vncService::CurrentUser((char *)&username, sizeof(username)))\r\n\t{\r\n\t\tvnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - NO current user\\n\"));\r\n\t\treturn;\r\n\t}\r\n\r\n\t// If there is no user logged on them default to SYSTEM\r\n\tif (strcmp(username, \"\") == 0)\r\n\t{\r\n\t\t//vnclog.Print(LL_INTINFO, VNCLOG(\"***** DBG - Force USER SYSTEM 2\\n\"));\r\n\t\tstrcpy_s((char *)&username, UNLEN+1, \"SYSTEM\");\r\n\t}\r\n\r\n\t// Logging/debugging prefs\r\n\tvnclog.SetMode(myIniFile.ReadInt(\"admin\", \"DebugMode\", 0));\r\n\tvnclog.SetLevel(myIniFile.ReadInt(\"admin\", \"DebugLevel\", 0));\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nvoid Secure_Save_Plugin_Config(char *szPlugin)\r\n{\r\n\tHANDLE hProcess = NULL, hPToken = NULL;\r\n\tDWORD id = vncService::GetExplorerLogonPid();\r\n\tif (id != 0)\r\n\t{\r\n\t\thProcess = OpenProcess(MAXIMUM_ALLOWED, FALSE, id);\r\n\t\tif (!hProcess) goto error3;\r\n\t\tif (!OpenProcessToken(hProcess, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY\r\n\t\t\t| TOKEN_DUPLICATE | TOKEN_ASSIGN_PRIMARY | TOKEN_ADJUST_SESSIONID\r\n\t\t\t| TOKEN_READ | TOKEN_WRITE, &hPToken))\r\n\t\t{\r\n\t\t\tCloseHandle(hProcess);\r\n\t\t\tgoto error3;\r\n\t\t}\r\n\r\n\t\tchar dir[MAX_PATH];\r\n\t\tchar exe_file_name[MAX_PATH];\r\n\t\tGetModuleFileName(0, exe_file_name, MAX_PATH);\r\n\t\tstrcpy_s(dir, exe_file_name);\r\n\t\tstrcat_s(dir, \" -dsmpluginhelper \");\r\n\t\tstrcat_s(dir, szPlugin);\r\n\r\n\t\t{\r\n\t\t\tSTARTUPINFO          StartUPInfo;\r\n\t\t\tPROCESS_INFORMATION  ProcessInfo;\r\n\t\t\tHANDLE Token = NULL;\r\n\t\t\tHANDLE process = NULL;\r\n\t\t\tZeroMemory(&StartUPInfo, sizeof(STARTUPINFO));\r\n\t\t\tZeroMemory(&ProcessInfo, sizeof(PROCESS_INFORMATION));\r\n\t\t\tStartUPInfo.wShowWindow = SW_SHOW;\r\n\t\t\tStartUPInfo.lpDesktop = \"Winsta0\\\\Default\";\r\n\t\t\tStartUPInfo.cb = sizeof(STARTUPINFO);\r\n\r\n\t\t\tCreateProcessAsUser(hPToken, NULL, dir, NULL, NULL, FALSE, DETACHED_PROCESS, NULL, NULL, &StartUPInfo, &ProcessInfo);\r\n\t\t\tDWORD errorcode = GetLastError();\r\n\t\t\tif (errorcode == 1314) goto error1;\r\n\t\t\tif (process) CloseHandle(process);\r\n\t\t\tif (Token) CloseHandle(Token);\r\n\t\t\tif (ProcessInfo.hProcess) CloseHandle(ProcessInfo.hProcess);\r\n\t\t\tif (ProcessInfo.hThread) CloseHandle(ProcessInfo.hThread);\t\r\n\t\t\treturn;\r\n\t\terror1:\r\n\t\t\tSecure_Plugin(szPlugin);\r\n\t\t}\r\n\terror3:\r\n\t\treturn;\r\n\t}\r\n}\r\n\r\n\r\nvoid Secure_Plugin_elevated(char *szPlugin)\r\n{\r\n\tchar dir[MAX_PATH];\r\n\tchar exe_file_name[MAX_PATH];\r\n\tstrcpy_s(dir, \" -dsmplugininstance \");\r\n\tstrcat_s(dir, szPlugin);\r\n\r\n\tGetModuleFileName(0, exe_file_name, MAX_PATH);\r\n\tSHELLEXECUTEINFO shExecInfo;\r\n\tshExecInfo.cbSize = sizeof(SHELLEXECUTEINFO);\r\n\tshExecInfo.fMask = NULL;\r\n\tshExecInfo.hwnd = GetForegroundWindow();\r\n\tshExecInfo.lpVerb = \"runas\";\r\n\tshExecInfo.lpFile = exe_file_name;\r\n\tshExecInfo.lpParameters = dir;\r\n\tshExecInfo.lpDirectory = NULL;\r\n\tshExecInfo.nShow = SW_HIDE;\r\n\tshExecInfo.hInstApp = NULL;\r\n\tShellExecuteEx(&shExecInfo);\r\n}\r\n\r\nvoid Secure_Plugin(char *szPlugin)\r\n{\r\n\tCDSMPlugin* m_pDSMPlugin = NULL;\r\n\tm_pDSMPlugin = new CDSMPlugin();\r\n\tm_pDSMPlugin->LoadPlugin(szPlugin, false);\r\n\tif (m_pDSMPlugin->IsLoaded())\r\n\t{\r\n\t\tchar szParams[32];\r\n\t\tstrcpy_s(szParams, \"NoPassword,\");\r\n\t\tstrcat_s(szParams, \"server-app\");\r\n\r\n\t\tHDESK desktop;\r\n\t\tdesktop = OpenInputDesktop(0, FALSE,\r\n\t\t\tDESKTOP_CREATEMENU | DESKTOP_CREATEWINDOW |\r\n\t\t\tDESKTOP_ENUMERATE | DESKTOP_HOOKCONTROL |\r\n\t\t\tDESKTOP_WRITEOBJECTS | DESKTOP_READOBJECTS |\r\n\t\t\tDESKTOP_SWITCHDESKTOP | GENERIC_WRITE\r\n\t\t\t);\r\n\r\n\t\tif (desktop == NULL)\r\n\t\t\tvnclog.Print(LL_INTERR, VNCLOG(\"OpenInputdesktop Error \\n\"));\r\n\t\telse\r\n\t\t\tvnclog.Print(LL_INTERR, VNCLOG(\"OpenInputdesktop OK\\n\"));\r\n\r\n\t\tHDESK old_desktop = GetThreadDesktop(GetCurrentThreadId());\r\n\t\tDWORD dummy;\r\n\r\n\t\tchar new_name[256];\r\n\t\tif (desktop)\r\n\t\t{\r\n\t\t\tif (!GetUserObjectInformation(desktop, UOI_NAME, &new_name, 256, &dummy))\r\n\t\t\t{\r\n\t\t\t\tvnclog.Print(LL_INTERR, VNCLOG(\"!GetUserObjectInformation \\n\"));\r\n\t\t\t}\r\n\r\n\t\t\tvnclog.Print(LL_INTERR, VNCLOG(\"SelectHDESK to %s (%x) from %x\\n\"), new_name, desktop, old_desktop);\r\n\r\n\t\t\tif (!SetThreadDesktop(desktop))\r\n\t\t\t{\r\n\t\t\t\tvnclog.Print(LL_INTERR, VNCLOG(\"SelectHDESK:!SetThreadDesktop \\n\"));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tHRESULT hr = CoInitialize(NULL);\r\n\t\tHWND hwnd2 = CreateWindowA(\"STATIC\", \"dummy\", WS_VISIBLE, 0, 0, 100, 100, NULL, NULL, NULL, NULL);\r\n\t\tShowWindow(hwnd2, SW_HIDE);\r\n\t\tchar* szNewConfig = NULL;\r\n\t\tchar DSMPluginConfig[512];\r\n\t\tDSMPluginConfig[0] = '\\0';\r\n\t\tIniFile myIniFile;\r\n\t\tmyIniFile.ReadString(\"admin\", \"DSMPluginConfig\", DSMPluginConfig, 512);\r\n\t\tm_pDSMPlugin->SetPluginParams(hwnd2, szParams, DSMPluginConfig, &szNewConfig);\r\n\r\n\r\n\t\tif (szNewConfig != NULL && strlen(szNewConfig) > 0) {\r\n\t\t\tstrcpy_s(DSMPluginConfig, 511, szNewConfig);\r\n\t\t}\r\n\t\tmyIniFile.WriteString(\"admin\", \"DSMPluginConfig\", DSMPluginConfig);\r\n\r\n\r\n\t\tCoUninitialize();\r\n\t\tSetThreadDesktop(old_desktop);\r\n\t\tif (desktop) CloseDesktop(desktop);\r\n\t}\r\n\tif (m_pDSMPlugin != NULL) delete(m_pDSMPlugin);\r\n}\r\n\r\nvoid vncProperties::ExpandBox(HWND hDlg, BOOL fExpand)\r\n{\r\n\t// if the dialog is already in the requested state, return\r\n\t// immediately.\r\n\tif (fExpand == m_bExpanded) return;\r\n\r\n\tRECT rcWnd, rcDefaultBox, rcChild, rcIntersection;\r\n\tHWND wndChild = NULL;\r\n\tHWND wndDefaultBox = NULL;\r\n\r\n\t// get the window of the button \r\n\tHWND  pCtrl = GetDlgItem(hDlg, IDC_SHOWOPTIONS);\r\n\tif (pCtrl == NULL) return;\r\n\r\n\twndDefaultBox = GetDlgItem(hDlg, IDC_DEFAULTBOX);\r\n\tif (wndDefaultBox == NULL) return;\r\n\r\n\tif (!fExpand) SendMessage(GetDlgItem(hDlg, IDC_BUTTON_EXPAND), BM_SETIMAGE, (WPARAM)IMAGE_BITMAP, (LPARAM)hBmpExpand);\r\n\telse SendMessage(GetDlgItem(hDlg, IDC_BUTTON_EXPAND), BM_SETIMAGE, (WPARAM)IMAGE_BITMAP, (LPARAM)hBmpCollaps);\r\n\t// retrieve coordinates for the default child window\r\n\tGetWindowRect(wndDefaultBox, &rcDefaultBox);\r\n\r\n\t// enable/disable all of the child window outside of the default box.\r\n\twndChild = GetTopWindow(hDlg);\r\n\r\n\tfor (; wndChild != NULL; wndChild = GetWindow(wndChild, GW_HWNDNEXT))\r\n\t{\r\n\t\t// get rectangle occupied by child window in screen coordinates.\r\n\t\tGetWindowRect(wndChild, &rcChild);\r\n\r\n\t\tif (!IntersectRect(&rcIntersection, &rcChild, &rcDefaultBox))\r\n\t\t{\r\n\t\t\tEnableWindow(wndChild, fExpand);\r\n\t\t}\r\n\t}\r\n\r\n\tif (!fExpand)  // we are contracting\r\n\t{\r\n\t\t_ASSERT(m_bExpanded);\r\n\t\tGetWindowRect(hDlg, &rcWnd);\r\n\r\n\t\t// this is the first time we are being called to shrink the dialog\r\n\t\t// box.  The dialog box is currently in its expanded size and we must\r\n\t\t// save the expanded width and height so that it can be restored\r\n\t\t// later when the dialog box is expanded.\r\n\r\n\t\tif (cx == 0 && cy == 0)\r\n\t\t{\r\n\t\t\tcx = rcDefaultBox.right - rcWnd.left;\r\n\t\t\tcy = rcWnd.bottom - rcWnd.top;\r\n\r\n\t\t\t// we also hide the default box here so that it is not visible\r\n\t\t\tShowWindow(wndDefaultBox, SW_HIDE);\r\n\t\t}\r\n\r\n\r\n\t\t// shrink the dialog box so that it encompasses everything from the top,\r\n\t\t// left up to and including the default box.\r\n\t\tSetWindowPos(hDlg, NULL, 0, 0,\r\n\t\t\trcDefaultBox.right - rcWnd.left,\r\n\t\t\trcDefaultBox.bottom - rcWnd.top,\r\n\t\t\tSWP_NOZORDER | SWP_NOMOVE);\r\n\r\n\t\tSetWindowText(pCtrl, \"Advanced options\");\r\n\r\n\t\t// record that the dialog is contracted.\r\n\t\tm_bExpanded = FALSE;\r\n\t}\r\n\telse // we are expanding\r\n\t{\r\n\t\t_ASSERT(!m_bExpanded);\r\n\t\tSetWindowPos(hDlg, NULL, 0, 0, cx, cy, SWP_NOZORDER | SWP_NOMOVE);\r\n\r\n\t\t// make sure that the entire dialog box is visible on the user's\r\n\t\t// screen.\r\n\t\tSendMessage(hDlg, DM_REPOSITION, 0, 0);\r\n\t\tSetWindowText(pCtrl, \"Hide\");\r\n\t\tm_bExpanded = TRUE;\r\n\t}\r\n}"], "filenames": ["winvnc/winvnc/vncproperties.cpp"], "buggy_code_start_loc": [45], "buggy_code_end_loc": [1370], "fixing_code_start_loc": [46], "fixing_code_end_loc": [1375], "type": "CWE-269", "message": "UltraVNC is a free and open source remote pc access software. A vulnerability has been found in versions prior to 1.3.8.0 in which the DSM plugin module, which allows a local authenticated user to achieve local privilege escalation (LPE) on a vulnerable system. The vulnerability has been fixed to allow loading of plugins from the installed directory. Affected users should upgrade their UltraVNC to 1.3.8.1. Users unable to upgrade should not install and run UltraVNC server as a service. It is advisable to create a scheduled task on a low privilege account to launch WinVNC.exe instead. There are no known workarounds if winvnc needs to be started as a service.", "other": {"cve": {"id": "CVE-2022-24750", "sourceIdentifier": "security-advisories@github.com", "published": "2022-03-10T21:15:14.693", "lastModified": "2023-03-01T16:21:31.620", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "UltraVNC is a free and open source remote pc access software. A vulnerability has been found in versions prior to 1.3.8.0 in which the DSM plugin module, which allows a local authenticated user to achieve local privilege escalation (LPE) on a vulnerable system. The vulnerability has been fixed to allow loading of plugins from the installed directory. Affected users should upgrade their UltraVNC to 1.3.8.1. Users unable to upgrade should not install and run UltraVNC server as a service. It is advisable to create a scheduled task on a low privilege account to launch WinVNC.exe instead. There are no known workarounds if winvnc needs to be started as a service."}, {"lang": "es", "value": "UltraVNC es un software de acceso remoto a PC gratuito y de c\u00f3digo abierto. Se ha encontrado una vulnerabilidad en versiones anteriores a la 1.3.8.0 en la que el m\u00f3dulo de plugins DSM, que permite a un usuario local autenticado conseguir una escalada de privilegios local (LPE) en un sistema vulnerable. La vulnerabilidad ha sido corregida para permitir la carga de plugins desde el directorio instalado. Los usuarios afectados deben actualizar su UltraVNC a versi\u00f3n 1.3.8.0. Los usuarios que no puedan actualizar no deben instalar y ejecutar el servidor UltraVNC como servicio. Es aconsejable crear una tarea programada en una cuenta con pocos privilegios para lanzar WinVNC.exe en su lugar. No se presentan medidas de mitigaci\u00f3n conocidas si wincnc necesita ser iniciado como un servicio"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.0, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:C/I:C/A:C", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 7.2}, "baseSeverity": "HIGH", "exploitabilityScore": 3.9, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:uvnc:ultravnc:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3.8.1", "matchCriteriaId": "E9D60BE0-349D-46C8-9051-0CA4C8C01BFE"}]}]}], "references": [{"url": "https://github.com/bowtiejicode/UltraVNC-DSMPlugin-LPE", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ultravnc/UltraVNC/commit/36a31b37b98f70c1db0428f5ad83170d604fb352", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ultravnc/UltraVNC/security/advisories/GHSA-3mvp-cp5x-vj5g", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ultravnc/UltraVNC/commit/36a31b37b98f70c1db0428f5ad83170d604fb352"}}