{"buggy_code": ["#!/usr/bin/env php\n<?php\n    ##################################################\n    #\n    # Copyright (c) 2004-2016 OIC Group, Inc.\n    #\n    # This file is part of Exponent\n    #\n    # Exponent is free software; you can redistribute\n    # it and/or modify it under the terms of the GNU\n    # General Public License as published by the Free\n    # Software Foundation; either version 2 of the\n    # License, or (at your option) any later version.\n    #\n    # GPL: http://www.gnu.org/licenses/gpl.txt\n    #\n    ##################################################\n\n    $param_array = array();\n    $verbose = false;\n    $recur = true;\n    $total_new = 0;\n\n    include_once('../exponent.php');\n    if (php_sapi_name() == 'cli') {\n        $nl = \"\\n\";\n        if (!empty($_SERVER['argc'])) for ($ac = 1; $ac < $_SERVER['argc']; $ac++) {\n            if ($_SERVER['argv'][$ac] == '-v') {\n                $verbose = true;\n            } elseif (!empty($_SERVER['argv'][$ac])) {\n                $version_title = $_SERVER['argv'][$ac];\n                $version = $db->selectValue('help_version', 'id', 'version=\"' . $_SERVER['argv'][$ac] . '\"');\n            }\n        }\n    } else {\n        $nl = '<br>';\n        if (!empty($_GET['verbose'])) {\n            $verbose = true;\n        }\n        if (!empty($_GET['version'])) {\n            $version_title = $_GET['version'];\n            $version = $db->selectValue('help_version', 'id', 'version=\"' . expString::sanitize($_GET['version']) . '\"');\n        }\n    }\n    /**\n     * find_help.php - attempts to auto-check all ExponentCMS help links\n     * by collecting them and checking them against the doc.exponentcms.org db tables\n     */\n    print $nl . \"Checking the Exponent Help System!\" . $nl . $nl;\n    print \"Grabbing links from the folders!\" . $nl;\n    parse_files('..', false);\n    $filelist = array('../cron', '../framework', '../install', '../themes');\n    foreach ($filelist as $file) {\n        parse_files($file);\n    }\n\n    print $nl . \"Completed grabbing \" . $total_new . \" Total Help Links!\" . $nl . $nl;\n    if (empty($version)) {\n        $version = $db->selectValue('help_version', 'id', 'is_current=1');\n        $version_title = 'Current';\n    }\n    print \"Using Help Version - \" . $version_title . \"!\" . $nl . $nl;\n\n    // match condensed lists against db tables\n    print \"List of Missing Help Page Links\" . $nl;\n    $pages = array_unique($param_array['page']);\n    sort($pages);\n    foreach ($pages as $page) {\n        if (!$db->selectObject('section', 'sef_name=' . $page)) {\n            print $page . $nl;\n        }\n    }\n\n    print $nl . \"List of Missing Help Document Links\" . $nl;\n    $docs = array_unique(array_merge($param_array['doc'],$param_array['module']));\n    sort($docs);\n    foreach ($docs as $doc) {\n        if (!$db->selectObject('help', 'sef_url=' . $doc . ' AND help_version_id=' . $version)) {\n            print $doc . $nl;\n        }\n    }\n\n    print $nl . \"Completed Checking the Exponent Help System!\" . $nl;\n\n    // traverse all the files\n    function parse_files($filename, $recurse = true) {\n        global $recur, $verbose, $nl;\n\n        if ($verbose) print \"Grabbing help links\" . $nl;\n        $recur = $recurse;\n        if (is_dir($filename)) { // go through directory\n            do_dir($filename);\n        } else { // do file\n            $pi = pathinfo($filename);\n            if (empty($pi['extension'])) $pi['extension'] = null;\n            do_file($filename, $pi['extension']);\n        }\n    }\n\n    // parse all the files\n    // processes file for assoc strings\n    function do_file($file, $fileext) {\n        if ($fileext == 'tpl') {\n            do_extract($file);\n        }\n    }\n\n    // go through a directory\n    function do_dir($dir) {\n        global $recur;\n\n        $d = dir($dir);\n        while (false !== ($entry = $d->read())) {\n            if ($entry == '.' || $entry == '..') {\n                continue;\n            }\n\n            $entry = $dir . '/' . $entry;\n\n            if (is_dir($entry)) { // if a directory, go through it\n                if ($recur) do_dir($entry);\n            } else { // if file, parse only if extension is matched\n                $pi = pathinfo($entry);\n                if (empty($pi['extension'])) $pi['extension'] = null;\n                if (isset($pi['extension']) && $pi['extension'] == 'tpl') {\n                    do_file($entry, $pi['extension']);\n                }\n            }\n        }\n\n        $d->close();\n    }\n\n    //parse the help function lines\n    // rips gettext strings from $file and prints them in C format\n    function do_extract($file) {\n        global $total_new, $param_array, $verbose, $nl;\n\n    // regex for the help shortcut function\n        $regex_help = '/(?<=help\\s)((page=[\\'\"]|[^\\'\"])*)([^}]*)(?=\\})/';\n    // regex for the parameter list\n        $regex_params = '/([^=\\s]+)=[\"\\']([^\"\\']+)[\"\\']/';\n        $content = @file_get_contents($file);\n        if (empty($content)) {\n            return;\n        }\n        preg_match_all(\n            $regex_help,\n            $content,\n            $matches,\n            PREG_PATTERN_ORDER\n        );\n\n        if ($verbose) print \"$file\" . \" - \";\n        $num_added = 0;\n        $parsed = null;\n\n        for ($i = 0, $iMax = count($matches[0]); $i < $iMax; $i++) {\n    //        str_replace('\"', \"\\'\", $matches[0][$i]); // remove the killer double-quotes\n\n            // segregate params\n            preg_match_all(\n                $regex_params,\n                $matches[0][$i],\n                $parsed,\n                PREG_PATTERN_ORDER\n            );\n            //print_r(explode('=',$s[0][0]));\n            foreach ($parsed[0] as $pair) {\n                if (strpos($pair, '=')) {\n                    list($key, $val) = explode('=', $pair, 2);\n                    $param_array[trim($key)][] = trim($val);\n                    $num_added++;\n                }\n            }\n        }\n\n        $total_new += $num_added;\n        if ($verbose) print $num_added . $nl;\n    }\n\n    function output($text) {\n        global $nl;\n\n        if (!is_array($text)) $text = array($text);\n        foreach ($text as $string) {\n            print $string . $nl;\n        }\n    }\n\n?>", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package    Modules\n */\n\nclass cartController extends expController {\n    public $basemodel_name = 'order';\n    private $checkout_steps = array('productinfo', 'specials', 'form', 'wizards', 'newsletter', 'confirmation', 'postprocess');\n\n    public $useractions = array(\n        'show'                         => 'Show Shopping Cart',\n    );\n\n        // hide the configs we don't need\n    public $remove_configs = array(\n        'aggregation',\n        'categories',\n        'comments',\n        'ealerts',\n        'facebook',\n        'files',\n        'pagination',\n        'rss',\n        'tags',\n        'twitter',\n    );  // all options: ('aggregation','categories','comments','ealerts','facebook','files','module_title','pagination','rss','tags','twitter',)\n\n    static function displayname() {\n        return gt(\"e-Commerce Shopping Cart\");\n    }\n\n    static function description() {\n        return gt(\"Displays the shopping cart contents from your store.\");\n    }\n\n    function addItem() {\n        global $router;\n\n        $product_type = isset($this->params['product_type']) ? $this->params['product_type'] : 'product';\n        $product      = new product();\n\n        //if we're trying to add a parent product ONLY, then we redirect to it's show view\n        $c = new stdClass();\n        if (isset($this->params['product_id']) && empty($this->params['children'])) $c = $product->find('first', 'parent_id=' . $this->params['product_id']);\n        if (!empty($c->id)) {\n            flash('message', gt(\"Please select a product and quantity from the options listed below to add to your cart.\"));\n            redirect_to(array('controller'=> 'store', 'action'=> 'show', 'id'=> $this->params['product_id']));\n        }\n\n        //check for multiple product adding\n        if (isset($this->params['prod-quantity'])) {\n            //we are adding multiple children, so we approach a bit different\n            //we'll send over the product_id of the parent, along with id's and quantities of children we're adding\n\n            foreach ($this->params['prod-quantity'] as $qkey=> &$quantity) {\n                if (in_array($qkey, $this->params['prod-check'])) {\n                    //this might not be working...FJD\n                    $child = new $product_type($qkey);\n                    /*if ($quantity < $child->minimum_order_quantity)                       \n                    {\n                        flash('message', $child->title . \" - \" . $child->model . \" has a minimum order quantity of \" . $child->minimum_order_quantity . \n                        '. Your quantity has been adjusted accordingly.');\n                        $quantity = $child->minimum_order_quantity;\n                        \n                    }*/\n                    $this->params['children'][$qkey] = $quantity;\n                }\n                if (isset($child)) $this->params['product_id'] = $child->parent_id;\n            }\n        }\n\n        $product = new $product_type($this->params['product_id'], true, true); //need true here?\n\n        //Check the Main Product quantity\n        if (isset($this->params['quantity'])) {\n            if (((int)$this->params['quantity']) < $product->minimum_order_quantity) {\n                flash('message', gt(\"Please enter a quantity equal or greater than the minimum order quantity.\"));\n                redirect_to(array('controller'=> 'store', 'action'=> 'show', 'id'=> $this->params['product_id']));\n            } else {\n\n            }\n            // adjust multiple quantity here\n            if ($product->multiple_order_quantity && ((int)$this->params['quantity']) % $product->multiple_order_quantity) {\n                flash('message', gt(\"Please enter a quantity in multiples of\") . ' ' . $product->multiple_order_quantity);\n                redirect_to(array('controller'=> 'store', 'action'=> 'show', 'id'=> $this->params['product_id']));\n            } else {\n\n            }\n        }\n\n        // if needed we throw up a form to gather additional information before adding this item to the cart\n//        if (($product->product_type == \"product\" || $product->product_type == \"childProduct\" || $product->product_type == \"donation\" || $product->product_type == \"eventregistration\") && empty($this->params['quick'])) {\n//        if ($product->product_type != \"giftcard\" && empty($this->params['quick'])) {\n//        if (empty($this->params['quick'])) {\n//            //FIXME shouldn't this be relegated to $product->addToCart???\n//            if (($product->hasOptions() && (!isset($this->params['options_shown']) || $this->params['options_shown'] != $product->id)) ||\n//                ($product->hasUserInputFields() && (!isset($this->params['input_shown']) || $this->params['input_shown'] != $product->id))) {\n//                // if we hit here it means this product type was missing some\n//                // information it needs to add the item to the cart..so we need to help\n//                // it display its addToCart form\n//                /*redirect_to(array(\n//                            'controller'=>'cart',\n//                            'action'=>'displayForm',\n//                            'form'=>'addToCart',\n//                            'product_id'=>$this->params['product_id'],\n//                            'product_type'=>$this->params['product_type'],\n//                            'children'=>serialize($this->params['children']),\n//                    ));*/\n//                $product->displayForm('addToCart', $this->params);\n//                return false;\n//            }\n//        }\n        //product either has no options, user input fields, or has already seen and passed the options page, so we try adding to cart\n        //it will validate and fail back to the options page if data is incorrect for whatever reason (eg, bad form post)\n        if ($product->addToCart($this->params)) {\n            // product was added\n            if (ecomconfig::getConfig('show_cart') || !empty($this->params['quick'])) {\n                // adding an item displays the shopping cart\n//                global $order;\n//                $order->calculateGrandTotal();\n//                if (!$order->grand_total && !$order->shipping_required) {\n//                    redirect_to(array('controller'=>'cart', 'action'=>'quickConfirm'));\n//                } elseif (!$order->shipping_required) {\n//                    redirect_to(array('controller'=>'cart', 'action'=>'quickPay'));\n//                } else {\n                //expHistory::back();\n                //eDebug(show_msg_queue(false),true);\n                redirect_to(array('controller'=>'cart', 'action'=>'show'));\n                //expHistory::lastNotEditable();\n//                }\n            } else {\n                // quick added, so just provide message\n                if ($product->product_type == \"donation\") {\n                    $type = ' '.gt('Donation');\n                } elseif ($product->product_type == \"eventregistration\") {\n                    $type = ' '.gt('Event');\n                } else {\n                    $type = '';\n                }\n                flash('message', gt(\"Added\") . \" \" . $product->title . $type . \" \" . gt(\"to your cart.\") . \" <a href='\" . $router->makeLink(array('controller'=> 'cart', 'action'=> 'checkout'), false, true) . \"'>\" . gt(\"Click here to checkout now.\") . \"</a>\");\n            }\n        } else {\n            return false;\n        }\n        expHistory::back();\n    }\n\n    function updateQuantity() {\n        global $order;\n        if (expJavascript::inAjaxAction()) {\n            //FIXME though currently unused we don't account for minimym nor multiple quantity settings\n            $id      = str_replace('quantity-', '', $this->params['id']);\n            $item    = new orderitem($id);\n            $updates = new stdClass();\n            if (!empty($item->id)) {\n                //$newqty = $item->product->updateQuantity($this->params['value']);                  \n                $newqty = $item->product->updateQuantity($this->params['value']);\n                if ($newqty > $item->product->quantity) {\n                    if ($item->product->availability_type == 1) {\n                        $diff             = ($item->product->quantity <= 0) ? $newqty : $newqty - $item->product->quantity;\n                        $updates->message = 'Only ' . $item->product->quantity . ' ' . $item->products_name . ' are currently in stock. Shipping may be delayed on the other ' . $diff;\n                    } elseif ($item->product->availability_type == 2) {\n                        $updates->message    = $item->products_name . ' only has ' . $item->product->quantity . ' on hand. You can not add any more than that to your cart.';\n                        $updates->cart_total = expCore::getCurrencySymbol() . number_format($order->getCartTotal(), 2);\n                        $updates->item_total = expCore::getCurrencySymbol() . number_format($item->getTotal(), 2);\n                        $updates->item_id    = $id;\n                        $updates->quantity   = $item->product->quantity;\n                        echo json_encode($updates);\n                        return true;\n                    }\n                }\n                $item->quantity = $newqty;\n                $item->save();\n                $order->refresh();\n                $updates->cart_total = expCore::getCurrencySymbol() . number_format($order->getCartTotal(), 2);\n                $updates->item_total = expCore::getCurrencySymbol() . number_format($item->getTotal(), 2);\n                $updates->item_id    = $id;\n                $updates->quantity   = $item->quantity;\n                echo json_encode($updates);\n            }\n        } else {\n            if (empty($this->params['quantity']) && !empty($this->params['qtyr'])) $this->params['quantity'] = $this->params['qtyr'];\n            if (!is_numeric($this->params['quantity'])) {\n                flash('error', gt('Please enter a valid quantity.'));\n                expHistory::back();\n            }\n\n            $item = new orderitem($this->params['id']);\n\n            if (!empty($item->id)) {\n                //$newqty = $item->product->updateQuantity($this->params['quantity']);\n                $newqty = $this->params['quantity'];\n                //$oiObj = new orderitem();\n                //$oi = $oiObj->find('all','product_id='.$item->product->id);\n                $qCheck = 0; //$item->product->quantity;\n                //if (!empty($oi))\n                //{\n                foreach ($order->orderitem as $orderItem) {\n                    if ($orderItem->product_id == $item->product_id) $qCheck += $orderItem->quantity;\n                }\n                //eDebug(\"Done\",true);\n                //}                           \n                /*eDebug($item->quantity);   \n                eDebug($item->product->quantity); \n                eDebug($qCheck);                  \n                eDebug($newqty,true);  */\n                //check minimum quantity\n                $qtyMessage = '';\n                if ($newqty < $item->product->minimum_order_quantity) {\n                    $qtyMessage = $item->product->title . ' has a minimum order quantity of ' . $item->product->minimum_order_quantity . '. The quantity has been adjusted and added to your cart.<br/><br/>';\n                    $newqty     = $item->product->minimum_order_quantity;\n                }\n                // adjust multiple quantity here\n                if ($newqty % $item->product->multiple_order_quantity) {\n                    $qtyMessage = $item->product->title . ' must be ordered in multiples of ' . $item->product->multiple_order_quantity . '. The quantity has been adjusted up and added to your cart.<br/><br/>';\n                    $offset = $newqty % $item->product->multiple_order_quantity;\n                    $newqty     = $newqty - $offset + $item->product->multiple_order_quantity;\n                }\n\n                $itemMessage = '';\n                if (($qCheck + ($newqty - $item->quantity)) > $item->product->quantity) {\n                    if ($item->product->availability_type == 1) {\n                        $diff        = ($item->product->quantity <= 0) ? $newqty : $newqty - $item->product->quantity;\n                        $itemMessage = gt('Only') . ' ' . $item->product->quantity . ' ' . $item->products_name . ' ' . gt('are currently in stock. Shipping may be delayed on the other') . ' ' . $diff . \"<br/><br/>\";\n                        //$updates->message = 'Only '.$item->product->quantity.' '.$item->products_name.' are currently in stock. Shipping may be delayed on the other '.$diff;\n                    } elseif ($item->product->availability_type == 2) {\n                        flash('error', $item->products_name . ' ' . gt('only has') . ' ' . $item->product->quantity . ' ' . gt('on hand. You can not add any more than that to your cart.'));\n                        /*$updates->message = $item->products_name.' only has '.$item->product->quantity.' on hand. You can not add any more to your cart.';                        \n                        $updates->cart_total = '$'.number_format($order->getCartTotal(), 2);\n                        $updates->item_total = '$'.number_format($item->quantity*$item->products_price, 2);\n                        $updates->item_id = $id;\n                        $updates->quantity = $item->product->quantity;\n                        echo json_encode($updates);  */\n                        expHistory::back();\n                    }\n                } else if ($newqty <= 0) {\n                    $item->delete();\n                    flash('message', $item->products_name . ' ' . gt('has been removed from your cart.'));\n                    expHistory::back();\n                }\n                $item->quantity = $newqty;\n                $item->save();\n                $order->refresh();\n\n                /*$updates->cart_total = '$'.number_format($order->getCartTotal(), 2);\n        $updates->item_total = '$'.number_format($item->quantity*$item->products_price, 2);\n        $updates->item_id = $id;\n        $updates->quantity = $item->quantity;      */\n                //echo json_encode($updates);\n            }\n            //redirect_to(array('controller'=>'cart','action'=>'show'));\n            flash('message', $qtyMessage . $itemMessage . $item->products_name . ' ' . gt('quantity has been updated.'));\n            expHistory::back();\n        }\n    }\n\n    function removeItem() {\n        global $order;\n        foreach ($order->orderitem as $item) {\n            if ($item->id == intval($this->params['id'])) {\n                $product = new  $item->product_type($item->product_id);\n                $product->removeItem($item);\n                $item->delete();\n            }\n        }\n\n        expHistory::back();\n    }\n\n    function show() {\n        global $order;\n\n        //$cartinfo->''ecomconfig::getConfig('email_invoice')\n        //$back = expHistory::getLast('viewable');\n        //eDebug(new expHistory);\n        expHistory::set('viewable', $this->params);\n        //eDebug($order,true);\n        if (isset($order)) {\n            //this triggers creation/updating of the shippingmethod and setting\n            //default rate if user has not yet chosen one.\n//            $shipping = new shipping();\n//            $shipping->getRates();\n            $order->calculateGrandTotal();\n\n            //eDebug($order,true);\n            //check to see if we have calculate shipping yet - if shipping_total_before_discounts is set\n            //to something other than 0, then we have, but we'll set the estimtae to shipping_total to \n            //accomodate any applied discounts\n            //if (!empty($order->shipping_total_before_discounts))\n            //{\n            //    $estimated_shipping = $order->shipping_total;\n            //}\n            //otherwise we'll grab an estimate\n            //else\n            //{    \n            //$estimated_shipping = shipping::estimateShipping($order);\n            /* $shipping = new shipping();\n          $shipping->getRates();\n          //eDebug($shipping,true);\n          $estimated_shipping = $shipping->pricelist['01']['cost'];*/\n            //foreach ($order->orderitem as $item)\n            //{\n            //eDebug($item->product);\n            //}\n            //}\n\n            // are there active discounts in the db?\n            $discountCheck    = new discounts();\n            $discountsEnabled = $discountCheck->find('all', 'enabled=1');\n            if (empty($discountsEnabled)) {\n                // flag to hide the discount box\n                assign_to_template(array(\n                    'noactivediscounts'=> '1'\n                ));\n                $discounts = null;\n            } else {\n                // get all current discount codes that are valid and applied                \n                $discounts = $order->validateDiscounts();\n            }\n        } else {\n            $order              = new stdClass();\n            $order->orderitem   = new stdClass();\n            $items              = null;\n            $discounts          = null;\n//            $estimated_shipping = null;\n        }\n        assign_to_template(array(\n            'items'    => $order->orderitem,\n            'order'    => $order,\n            'discounts'=> $discounts,\n            /*'estimated_shipping'=>$estimated_shipping*/\n        ));\n\n    }\n\n    function cart_only() {\n        $this->show();\n    }\n\n    function quickpay_donation_cart() {\n        $this->show();\n    }\n\n    function checkout() {\n        global $user, $order, $router;\n\n        if (empty($order)) {\n            flash('error', gt('There is an error with your shopping cart.'));\n            expHistory::back();\n        }\n\n//        $config   = new expConfig(expCore::makeLocation(\"ecomconfig\",\"@globalstoresettings\",\"\"));\n\n        $order->calculateGrandTotal();\n        $order->validateDiscounts(array('controller'=> 'cart', 'action'=> 'checkout'));\n\n        if (!expSession::get('customer-signup') && !$user->isLoggedin()) {  // give opportunity to login or sign up\n            expHistory::set('viewable', $this->params);\n            expSession::set('customer-login', true);\n            flash('message', gt(\"Please select how you would like to continue with the checkout process.\"));\n            expHistory::redirecto_login(makeLink(array('module'=> 'cart', 'action'=> 'checkout'), 'secure'),true);\n        }\n\n//        if ($order->total < intval($config->config['min_order'])) {\n//            flashAndFlow('error',gt(\"Note: Thank you for your decision to purchase. However, our minimum order for merchandise is \").expCore::getCurrencySymbol() . number_format($config->config['min_order'], 2, \".\", \",\") . \". \".gt(\"Please increase your quantity or continue shopping.\"));\n//        }\n        if ($order->total < intval(ecomconfig::getConfig('min_order'))) {\n            flashAndFlow('error',gt(\"Note: Thank you for your decision to purchase. However, our minimum order for merchandise is \").expCore::getCurrencySymbol() . number_format(ecomconfig::getConfig('min_order'), 2, \".\", \",\") . \". \".gt(\"Please increase your quantity or continue shopping.\"));\n        }\n\n        if (empty($order->orderitem)) flashAndFlow('error',gt('There are no items in your cart.'));\n\n        if (!order::getDefaultOrderType()) {\n            flashAndFlow('error', gt('This store is not yet fully configured to allow checkouts.').\"<br>\".gt('You Must Create a Default Order Type').' <a href=\"'.expCore::makeLink(array('controller'=>'order_type','action'=>'manage')).'\">'.gt('Here').'</a>');\n        }\n        if (!order::getDefaultOrderStatus()) {\n            flashAndFlow('error', gt('This store is not yet fully configured to allow checkouts.').\"<br>\".gt('You Must Create a Default Order Status').' <a href=\"'.expCore::makeLink(array('controller'=>'order_status','action'=>'manage')).'\">'.gt('Here').'</a>');\n        }\n\n        $billing = new billing();\n        //eDebug($billing,true);\n        if (count($billing->available_calculators) < 1) {\n            flashAndFlow('error', gt('This store is not yet fully configured to allow checkouts.').\"<br>\".gt('You Must Activate a Payment Option').' <a href=\"'.expCore::makeLink(array('controller'=>'billing','action'=>'manage')).'\">'.gt('Here').'</a>');\n        }\n        // set a flow waypoint\n        expHistory::set('viewable', $this->params);\n\n        //this validate the discount codes already applied to make sure they are still OK\n        //if they are not it will remove them and redirect back to checkout w/ a message flash\n        //$order->updateOrderDiscounts();\n\n        //eDebug($order);\n        // are there active discounts in the db?\n        $discountCheck    = new discounts();\n        $discountsEnabled = $discountCheck->find('all', 'enabled=1');\n        if (empty($discountsEnabled)) {\n            // flag to hide the discount box\n            assign_to_template(array(\n                'noactivediscounts'=> '1'\n            ));\n            $discounts = null;\n        } else {\n            // get all current discount codes that are valid and applied\n            $discounts = $order->getOrderDiscounts();\n        }\n        //eDebug($discounts);\n        /*if (count($discounts)>=0) {\n              // Mockup code\n              $order->totalBeforeDiscounts = $order->total; // reference to the origional total\n              $order->total = $order->total*85/100; // to simulate 15%\n\n          } */\n        // call each products checkout() callback & calculate total\n        foreach ($order->orderitem as $item) {\n            $product = new $item->product_type($item->product_id);\n            $product->checkout();\n        }\n\n        // get the specials...this is just a stub function for now.\n        $specials = $this->getSpecials();\n\n        // get all the necessary addresses..shipping, billing, etc\n        $address = new address();\n        //$addresses_dd = $address->dropdownByUser($user->id);\n        $shipAddress = $address->find('first', 'user_id=' . $user->id . ' AND is_shipping=1');\n        if (empty($shipAddress) || !$user->isLoggedin()) {  // we're not logged in and don't have an address yet\n            expSession::set('customer-signup', false);\n            flash('message', gt('Enter your primary address info now.') .\n                '<br><br>' .\n                gt('You may also optionally provide a password if you would like to return to our store at a later time to view your order history or make additional purchases.') .\n                '<br><br>' .\n                gt('If you need to add another billing or shipping address you will be able to do so on the following page.'));\n            redirect_to(array('controller'=> 'address', 'action'=> 'edit'));\n        }\n\n        // get the shipping calculators and the shipping methods if we need them\n        $shipping = new shipping();\n        //$shipping->shippingmethod->setAddress($shipAddress);\n        if (count($shipping->available_calculators) < 1) {\n            flashAndFlow('error', gt('This store is not yet fully configured to allow checkouts.').\"<br>\".gt('You Must Activate a Shipping Option').' <a href=\"'.expCore::makeLink(array('controller'=>'shipping','action'=>'manage')).'\">'.gt('Here').'</a>');\n        }\n\n        // we need to get the current shipping method rates\n        $shipping->getRates();\n\n        if (strpos($router->current_url, 'https://') === false && (!defined('DISABLE_SSL_WARNING') || DISABLE_SSL_WARNING==0))\n            flash('error', gt('This page appears to be unsecured!  Personal information may become compromised!'));\n\n        assign_to_template(array(\n//            'cartConfig'          => $config->config,\n            //'addresses_dd'=>$addresses_dd,\n            //'addresses'=>$addresses,\n            'shipping'            => $shipping,\n            'user'                => $user,\n            'billing'             => $billing,\n            'discounts'           => $discounts,\n            'order'               => $order,\n            'order_types'         => order::getOrderTypes(),\n            'default_order_type'  => order::getDefaultOrderType(),\n            'order_statuses'      => order::getOrderStatuses(),\n            'default_order_status'=> order::getDefaultOrderStatus(),\n            'sales_reps'          => order::getSalesReps()\n            //'needs_address'=>$needs_address,\n        ));\n    }\n\n    /**\n     * the first thing after checkout.\n     *\n     */\n    public function preprocess() {\n        //eDebug($this->params,true);\n        global $order, $user, $db;\n\n//        // check to see if this is a no cost/no shipping checkout\n//        if ($order->total == 0 && empty($order->shippingmethods) && $this->params['billingcalculator_id'] == 0) {\n//             // final the cart totals\n//            $order->calculateGrandTotal();\n//            $order->setOrderType($this->params);\n//            $order->setOrderStatus($this->params);\n//        } else {\n//\n        //eDebug($_POST, true);\n        // get the shipping and billing objects, these objects handle the setting up the billing/shipping methods\n        // and their calculators\n        $shipping = new shipping();\n        $billing  = new billing();\n        // since we're skipping the billing method selection, do it here\n        $billing->billingmethod->update($this->params);\n        //this is just dumb. it doesn't update the object, refresh doesn't work, and I'm tired\n        $billing = new billing();\n\n        if (!$user->isLoggedIn()) {\n            flash('message', gt(\"It appears that your session has expired. Please log in to continue the checkout process.\"));\n            expHistory::redirecto_login(makeLink(array('module'=> 'cart', 'action'=> 'checkout'), true));\n        }\n\n        // Make sure all the pertinent data is there...otherwise flash an error and redirect to the checkout form.\n        if (empty($order->orderitem)) {\n            flash('error', gt('There are no items in your cart.'));\n        }\n        if (empty($shipping->calculator->id) && !$shipping->splitshipping) {\n            flash('error', gt('You must pick a shipping method'));\n        }\n        if (empty($shipping->address->id) && !$shipping->splitshipping) {\n            flash('error', gt('You must pick a shipping address'));\n        }\n        if (empty($billing->calculator->id)) {\n            flash('error', gt('You must pick a billing method'));\n        }\n        if (empty($billing->address->id)) {\n            flash('error', gt('You must select a billing address'));\n        }\n\n        // make sure all the methods picked for shipping meet the requirements\n        foreach ($order->getShippingMethods() as $smid) {\n            $sm       = new shippingmethod($smid);\n            $calcname = $db->selectValue('shippingcalculator', 'calculator_name', 'id=' . $sm->shippingcalculator_id);\n            $calc     = new $calcname($sm->shippingcalculator_id);\n            $ret      = $calc->meetsCriteria($sm);\n            if (is_string($ret)) {\n                flash('error', $ret);\n            }\n        }\n\n        // if we encountered any errors we will return to the checkout page and show the errors\n        if (!expQueue::isQueueEmpty('error')) {\n            redirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n//            $this->checkout();\n        }\n\n         // final the cart totals\n        $order->calculateGrandTotal();\n        $order->setOrderType($this->params);\n        $order->setOrderStatus($this->params);\n        //eDebug($order,true);\n\n        // get the billing options..this is usually the credit card info entered by the user\n        if ($billing->calculator != null) {\n            if (isset($this->params['cc_type_' . $billing->calculator->calculator_name])) {\n                $this->params['cc_type'] = $this->params['cc_type_' . $billing->calculator->calculator_name];\n                unset($this->params['cc_type_' . $billing->calculator->calculator_name]);\n            }\n            $opts = $billing->calculator->userFormUpdate($this->params);\n            //$billing->calculator->preprocess($this->params);\n            //this should probably be generic-ized a bit more - currently assuming order_type parameter is present, or defaults\n            //eDebug(order::getDefaultOrderType(),true);\n\n            // call the billing method's preprocess in case it needs to prepare things.\n            // eDebug($billing);\n            $result = $billing->calculator->preprocess($billing->billingmethod, $opts, $this->params, $order);\n        } else {  // no calculator, so we'll assume no cost checkout\n            if (substr($this->params['cash_amount'], 0, strlen(expCore::getCurrencySymbol())) == expCore::getCurrencySymbol()) {\n                $this->params['cash_amount'] = substr($this->params['cash_amount'], strlen(expCore::getCurrencySymbol()));\n            }\n            $opts = new stdClass();\n            $opts->cash_amount = $this->params[\"cash_amount\"];\n\n            if ($opts->cash_amount < $order->grand_total) $opts->payment_due = $order->grand_total - $opts->cash_amount;\n            $billing->billingmethod->update(array('billing_options' => serialize($opts)));\n        }\n        //eDebug($opts);\n        expSession::set('billing_options', $opts);  //FIXME $opts is usually empty\n        //$o = expSession::get('billing_options');\n        //eDebug($o,true);\n        //eDebug($this->params,true);\n\n        // once in a while it appears the payment processor will return a nullo value in the errorCode field\n        // which the previous check takes as a TRUE, as 0, null, and empty will all equate out the same using the ==\n        // adding the === will specifically test for a 0 and only a 0, which is what we want\n\n//        }\n\n        if (empty($result->errorCode)) {  //if ($result->errorCode === \"0\" || $result->errorCode === 0)\n\t\t\tredirect_to(array('controller'=>'cart', 'action'=>'confirm'));\n//            $this->confirm();\n        } else {\n            flash('error', gt('An error was encountered while processing your transaction.') . '<br /><br />' . $result->message);\n            expHistory::back();\n        }\n    }\n\n    public function confirm() {\n        global $order;\n\n        //eDebug($this->params);\n        if (empty($order->orderitem)) flashAndFlow('error',gt('There are no items in your cart.'));\n\n        // finalize the cart totals\n        $order->calculateGrandTotal();\n\n        //eDebug($order);\n        // get the shipping and billing objects, these objects handle the setting up the billing/shipping methods\n        // and their calculators\n        $shipping = new shipping();\n        $billing  = new billing();\n\n        $opts = expSession::get('billing_options');\n        //eDebug($opts,true);\n//        if ($billing->calculator != null) {\n//            $view_opts = $billing->calculator->userView($opts);\n//        } else {\n//            if (empty($opts)) {\n//                $view_opts = false;\n//            } else {\n//                $billinginfo = gt(\"No Cost\");\n//                if (!empty($opts->payment_due)) {\n//                    $billinginfo .= '<br>'.gt('Payment Due') . ': ' . expCore::getCurrencySymbol() . number_format($opts->payment_due, 2, \".\", \",\");\n//                }\n//                $view_opts = $billinginfo;\n//            }\n//        }\n        assign_to_template(array(\n            'shipping'   => $shipping,\n            'billing'    => $billing,\n            'order'      => $order,\n            'total'      => $order->total,\n            'billinginfo'=> $billing->getBillingInfo($opts),\n        ));\n    }\n\n    public function process() {\n//        global $db, $order, $user;\n        global $order, $user;\n\n        //eDebug($order,true);\n        if (!$user->isLoggedIn() && empty($this->params['nologin'])) {\n            flash('message', gt(\"It appears that your session has expired. Please log in to continue the checkout process.\"));\n            expHistory::back();\n\n            //expHistory::redirecto_login(makeLink(array('module'=>'cart','action'=>'checkout'), 'secure'));\n        }\n        // if this error hits then something went horribly wrong or the user has tried to hit this\n        // action themselves before the cart was ready or is refreshing the page after they've confirmed the\n        // order.\n        if (empty($order->orderitem)) flash('error', gt('There are no items in your cart.'));\n        if (!expQueue::isQueueEmpty('error')) redirect_to(array('controller'=> 'store', 'action'=> 'showall'));\n\n        // set the gift comments\n        $order->update($this->params);\n\n        // save initial order status\n        $change = new order_status_changes();\n//        $change->from_status_id = null;\n        $change->to_status_id   = $order->order_status_id;\n        $change->orders_id      = $order->id;\n        $change->save();\n\n        // get the biling & shipping info\n//        $shipping = new shipping();\n        $billing  = new billing();\n\n        // finalize the total to bill\n        $order->calculateGrandTotal();\n        //eDebug($order,true);\n        $order->invoice_id = $order->getInvoiceNumber(false);  // assign the next invoice id, but don't advance it yet\n        // call the billing calculators process method - this will handle saving the billing options to the database.\n//        if (!($order->total == 0 && empty($order->shippingmethods))) {\n        if ($billing->calculator != null) {\n//            $result = $billing->calculator->process($billing->billingmethod, expSession::get('billing_options'), $this->params, $invNum);\n            $result = $billing->calculator->process($billing->billingmethod, expSession::get('billing_options'), $this->params, $order);\n        } else {\n            // manually perform createBillingTransaction() normally done within billing calculator process()\n            $opts = expSession::get('billing_options');\n            $object = new stdClass();\n            $object->errorCode = $opts->result->errorCode = 0;\n            $opts->result->payment_status = gt(\"complete\");\n            if ($opts->cash_amount < $order->grand_total) $opts->result->payment_status = gt(\"payment due\");\n            $billing->billingmethod->update(array('billing_options' => serialize($opts),'transaction_state'=>$opts->result->payment_status));\n\n//            $this->createBillingTransaction($billing->billingmethod, number_format($order->grand_total, 2, '.', ''), $opts->result, $opts->result->payment_status);\n            $amount = number_format($order->grand_total, 2, '.', '');\n            $bt = new billingtransaction();\n            $bt->billingmethods_id = $billing->billingmethod->id;\n            $bt->billingcalculator_id = $billing->billingmethod->billingcalculator_id;\n            $bt->billing_cost = $amount;\n            $bt->billing_options  = serialize($opts->result);\n            $bt->extra_data = '';\n            $bt->transaction_state = $opts->result->payment_status;\n            $bt->save();\n            $result = $opts;\n        }\n//        }\n\n        if (empty($result->errorCode)) {\n            // if ($result->errorCode === \"0\" || $result->errorCode === 0)\n            // {\n            // save out the cart total to the database\t\t\n            $billing->billingmethod->update(array('billing_cost'=> $order->grand_total));\n\n            // set the invoice number and purchase date in the order table..this finializes the order\n            //$invoice_num = $db->max('orders', 'invoice_id') + 1;\n            //if ($invoice_num < ecomconfig::getConfig('starting_invoice_number')) $invoice_num += ecomconfig::getConfig('starting_invoice_number');\n\n            // get the first order status and set it for this order\n            $invNum = $order->getInvoiceNumber();  // payment was processed so advance the invoice #\n//            $order->update(array('invoice_id'=> $invNum, 'purchased'=> time(), 'updated'=> time(), 'comment'=> serialize($comment))); //FIXME $comment doesn't exist\n            $order->update(array('invoice_id'=> $invNum, 'purchased'=> time(), 'updated'=> time()));\n            //$order->setDefaultStatus(); --FJD?\n            //$order->setDefaultOrderType(); --FJD?\n            $order->refresh();\n\n            // run each items process callback function\n            foreach ($order->orderitem as $item) {\n                $product = new $item->product_type($item->product_id);\n                $product->process($item, $order->order_type->affects_inventory);\n            }\n\n            if ($billing->calculator != null) {\n                $billing->calculator->postProcess($order, $this->params);\n            }\n            orderController::clearCartCookie();\n        } else {\n            flash('error', gt('An error was encountered while processing your transaction.') . '<br /><br />' . $result->message);\n            expHistory::back();\n\n            //redirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n        }\n\n//        if (!DEVELOPMENT) {\n            // send email invoices to the admins & users if needed\n        if ($order->order_type->emails_customer)\n            $invoice = renderAction(array('controller'=> 'order', 'action'=> 'email', 'id'=> $order->id));\n//        } elseif ($user->isAdmin()) {\n//            flash('message', gt('Development on, skipping email sending.'));\n//        }\n        expSession::un_set('record');\n        //assign_to_template(array('order'=>$order, 'billing'=>$billing, 'shipping'=>$shipping, 'result'=>$result, 'billinginfo'=>$billinginfo));\n        flash('message', gt('Your order has been submitted.'));\n        redirect_to(array('controller'=> 'order', 'action'=> 'myOrder', 'id'=> $order->id, 'tc'=> 1));\n    }\n\n    function quickPay() {\n        global $order, $user;\n\n        if ($order->shipping_required) redirect_to(array('controller'=> 'cart', 'action'=> 'checkout'),true);\n        if (empty($order->orderitem)) flashAndFlow('error',gt('There are no items in your cart.'));\n\n        // if we made it here it means that the item was add to the cart.\n        expHistory::set('viewable', $this->params);\n\n        // call each products checkout() callback & calculate total\n        foreach ($order->orderitem as $item) {\n            $product = new $item->product_type($item->product_id);\n            $product->checkout();\n        }\n\n        // setup the billing & shipping calculators info\n//        if ($product->requiresBilling) {\n        if ($order->billing_required) {\n            $billing = new billing();\n            assign_to_template(array(\n                'billing'=> $billing\n            ));\n        }\n\n//        if ($product->requiresShipping) {\n        if ($order->shipping_required) {  //FIXME we exit earlier if shipping_required???\n            $shipping            = new shipping();\n            $shipping->pricelist = $shipping->listPrices();\n            assign_to_template(array(\n                'shipping'=> $shipping\n            ));\n        }\n\n        assign_to_template(array(\n            'product'=> $product,\n            'user'   => $user,\n            'order'  => $order\n        ));\n    }\n\n    function quickConfirm() {\n        global $order, $user;\n\n        if ($order->shipping_required || $order->grand_total) redirect_to(array('controller'=> 'cart', 'action'=> 'checkout'),true);\n        if (empty($order->orderitem)) flashAndFlow('error',gt('There are no items in your cart.'));\n\n        // if we made it here it means that the item was add to the cart.\n        expHistory::set('viewable', $this->params);\n\n        // call each products checkout() callback & calculate total\n        foreach ($order->orderitem as $item) {\n            $product = new $item->product_type($item->product_id);\n            $product->checkout();\n        }\n\n        assign_to_template(array(\n            'product'=> $product,\n            'user'   => $user,\n            'order'  => $order\n        ));\n    }\n\n    function processQuickPay() {\n        global $order, $template;\n\n        // reuse the confirm action's template\n        $tplvars = $template->tpl->tpl_vars;\n        $template = expTemplate::get_template_for_action($this, 'confirm', $this->loc);\n        $template->tpl->tpl_vars = array_merge($tplvars,$template->tpl->tpl_vars);\n\n        if (!empty($this->params['billing'])) {\n            $billing = new billing();\n            $billing->billingmethod->setAddress($this->params['billing']);\n        }\n\n        if (!empty($this->params['shipping'])) {\n            die('NEED TO IMPLEMENT THE SHIPPING PIECE!!'); //TODO\n            $shipping = new shipping();\n            $shipping->shippingingmethod->setAddress($this->params['shipping']);\n            assign_to_template(array(\n                'shipping'=> $shipping\n            ));\n        }\n\n        $opts = $billing->calculator->userFormUpdate($this->params);\n        $order->calculateGrandTotal();\n        expSession::set('billing_options', $opts);  //FIXME $opts is usually empty\n        assign_to_template(array(\n            'billing'    => $billing,\n            'order'      => $order,\n            'total'      => $order->total,\n//            'billinginfo'=> $billing->calculator->userView($opts),\n            'billinginfo'=> $billing->getBillingInfo($opts),\n            'nologin'    => 1\n        ));\n    }\n\n    public function splitShipping() {\n        global $user, $order;\n\n        expHistory::set('viewable', $this->params);\n\n        // get all the necessary addresses..shipping, billing, etc\n        $address      = new address(null, false, false);\n        $addresses_dd = $address->dropdownByUser($user->id);\n\n        if (count($addresses_dd) < 2) {\n            expHistory::set('viewable', $this->params);\n            flash('error', gt('You must have more than 1 address to split your shipment.  Please add another now.'));\n            redirect_to(array('controller'=> 'address', 'action'=> 'edit'));\n        }\n\n        // setup the list of orderitems\n        $orderitems = array();\n        foreach ($order->orderitem as $item) {\n            if ($item->product->requiresShipping == true) {\n                for ($i = 0; $i < $item->quantity; $i++) {\n                    $orderitems[] = $item;\n                }\n            }\n        }\n\n        if (count($orderitems) < 2) {\n            flashAndFlow('error',gt('You must have a minimum of 2 items in your shopping cart in order to split your shipment.'));\n        }\n\n        expHistory::set('viewable', $this->params);\n        assign_to_template(array(\n            'addresses_dd'=> $addresses_dd,\n            'orderitems'  => $orderitems,\n            'order'       => $order\n        ));\n    }\n\n    public function saveSplitShipping() {\n        global $db;\n\n        $addresses            = array();\n        $orderitems_to_delete = '';\n\n        foreach ($this->params['orderitems'] as $id=> $address_ids) {\n            foreach ($address_ids as $address_id) {\n                if (empty($addresses[$address_id][$id])) {\n                    $addresses[$address_id][$id] = 1;\n                } else {\n                    $addresses[$address_id][$id]++;\n                }\n            }\n\n            if (!empty($orderitems_to_delete)) $orderitems_to_delete .= ',';\n            $orderitems_to_delete .= $id;\n        }\n\n        foreach ($addresses as $addy_id => $orderitems) {\n            $shippingmethod = new shippingmethod();\n            $shippingmethod->setAddress($addy_id);\n\n            foreach ($orderitems as $orderitem_id => $qty) {\n                $orderitem = new orderitem($orderitem_id);\n                unset(\n                    $orderitem->id,\n                    $orderitem->shippingmethods_id\n                );\n                $orderitem->shippingmethods_id = $shippingmethod->id;\n                $orderitem->quantity           = $qty;\n                $orderitem->save();\n            }\n        }\n\n        $db->delete('orderitems', 'id IN (' . $orderitems_to_delete . ')');\n        redirect_to(array('controller'=>'cart', 'action'=>'selectShippingMethods'));\n//        $this->selectShippingMethods();\n    }\n\n    public function selectShippingMethods() {\n        global $order;\n\n        expHistory::set('editable', $this->params);\n        $shipping          = new shipping();\n        $shippingmethod_id = $order->getShippingMethods();\n\n        $shipping_items = array();\n        foreach ($shippingmethod_id as $id) {\n            $shipping_items[$id] = new order();\n            $shipping_items[$id]->method    = new shippingmethod($id);\n            $shipping_items[$id]->orderitem = $order->getOrderitemsByShippingmethod($id);\n            foreach ($shipping_items[$id]->orderitem as $key=> $item) {\n                if ($item->product->requiresShipping == false) {\n                    unset($shipping_items[$id]->orderitem[$key]);\n                }\n            }\n\n            if (empty($shipping_items[$id]->orderitem)) {\n                unset($shipping_items[$id]);\n            } else {\n                foreach ($shipping->available_calculators as $calcid=> $name) {\n                    if (class_exists($name)) {\n                        $calc = new $name($calcid);\n                        $shipping_items[$id]->prices[$calcid] = $calc->getRates($shipping_items[$id]);\n                        //eDebug($shipping_items[$id]->prices[$id]);\n                    }\n                }\n            }\n        }\n\n        assign_to_template(array(\n            'shipping_items'=> $shipping_items,\n            'shipping'      => $shipping\n        ));\n    }\n\n    public function customerSignup() {\n        if (expSession::get('customer-login')) expSession::un_set('customer-login');\n        expSession::set('customer-signup', true);\n        redirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n//        $this->checkout();\n    }\n\n    public function saveShippingMethods() {\n        global $order;\n\n        $shipping               = new shipping();\n        $order->shippingmethods = array();\n\n        // if they didn't fill out anything\n        if (empty($this->params['methods'])) {\n            expValidator::failAndReturnToForm(gt(\"You did not pick any shipping options\"), $this->params);\n        }\n\n        // if they don't check all the radio buttons\n        if (count($this->params['methods']) < count($this->params['calcs'])) {\n            expValidator::failAndReturnToForm(gt(\"You must select a shipping options for all of your packages.\"), $this->params);\n        }\n\n        foreach ($this->params['methods'] as $id=> $method) {\n            $cost           = $this->params['cost'][$method];\n            $title          = $this->params['title'][$method];\n            $shippingmethod = new shippingmethod($id);\n            $shippingmethod->update(array(\n                'option'               => $method,\n                'option_title'         => $title,\n                'shipping_cost'        => $cost,\n                'shippingcalculator_id'=> $this->params['calcs'][$id],\n            ));\n\n            $order->shippingmethods[] = $shippingmethod->id;\n        }\n\n        redirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n//        $this->checkout();\n    }\n\n    function createaddress() {\n//        global $db, $user;\n        global $user;\n\n        if ($user->isLoggedIn()) {\n            // save the address, make it default if it is the users first one\n            $address = new address();\n            $count   = $address->find('count', 'user_id=' . $user->id);\n            if ($count == 0) $this->params['is_default'] = 1;\n            $this->params['user_id'] = $user->id;\n            $address->update($this->params);\n\n            // set the billing/shipping method\n            if (isset($this->params['addresstype'])) {\n                if ($this->params['addresstype'] == 'shipping') {\n                    $shipping = new shipping();\n                    $shipping->shippingmethod->setAddress($address);\n                } elseif ($this->params['addresstype'] == 'billing') {\n                    $billing = new billing();\n                    $billing->billingmethod->setAddress($address);\n                }\n            }\n\n        }\n\n\t\tredirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n//        $this->checkout();\n    }\n\n    function getSpecials() {\n        //STUB::flesh this function out eventually.\n        return null;\n    }\n\n    // Discount Codes\n\n    function isValidDiscountCode($code) {\n        // is the code valid?\n        if ($code == '12345') {\n            # psudocode:\n            # grab current order discounts\n            # $discounts = new discountCode($order);\n            # append the new discount code to the current codes\n            # $discounts->appendCode($code);\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /*function checkDiscount() {\n         // handles what to do when a code valid or not\n         if (isValidDiscountCode($this->params['discountcode'])) {\n             flash('message', gt(\"Discount Code Applied\"));\n             redirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n         } else {\n             flash('error', gt(\"Sorry, the discount code provided is not a valid code.\"));\n             redirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n         }\n     }   */\n\n    function addDiscountToCart() {\n//        global $user, $order;\n        global $order;\n        //lookup discount to see if it's real and valid, and not already in our cart\n        //this will change once we allow more than one coupon code\n\n        $discount = new discounts();\n        $discount = $discount->getCouponByName($this->params['coupon_code']);\n\n        if (empty($discount)) {\n            flash('error', gt(\"This discount code you entered does not exist.\"));\n            //redirect_to(array('controller'=>'cart', 'action'=>'checkout'));       \n            expHistory::back();\n        }\n\n        //check to see if it's in our cart already\n        if ($this->isDiscountInCart($discount->id)) {\n            flash('error', gt(\"This discount code is already in your cart.\"));\n            //redirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n            expHistory::back();\n        }\n\n        //this should really be reworked, as it shoudn't redirect directly and not return\n        $validateDiscountMessage = $discount->validateDiscount();\n        if ($validateDiscountMessage == \"\") {\n            //if all good, add to cart, otherwise it will have redirected\n            $od               = new order_discounts();\n            $od->orders_id    = $order->id;\n            $od->discounts_id = $discount->id;\n            $od->coupon_code  = $discount->coupon_code;\n            $od->title        = $discount->title;\n            $od->body         = $discount->body;\n            $od->save();\n            // set this to just the discount applied via this coupon?? if so, when though? $od->discount_total = ??;\n            flash('message', gt(\"The discount code has been applied to your cart.\"));\n        } else {\n            flash('error', $validateDiscountMessage);\n        }\n        //redirect_to(array('controller'=>'cart', 'action'=>'checkout'));                           \n        expHistory::back();\n    }\n\n    function removeDiscountFromCart($id = null, $redirect = true) {\n        //eDebug($params);\n        if ($id == null) $id = $this->params['id'];\n        $od = new order_discounts($id);\n        $od->delete();\n        flash('message', gt(\"The discount code has been removed from your cart\"));\n        if ($redirect == true) {\n            //redirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n            expHistory::back();\n        }\n    }\n\n    function isDiscountInCart($discountId) {\n        global $order;\n        $cds = $order->getOrderDiscounts();\n        if (count($cds) == 0) return false;\n\n        foreach ($cds as $d) {\n            if ($discountId == $d->discounts_id) return true;\n        }\n        return false;\n    }\n\n//    function configure() {\n//        expHistory::set('editable', $this->params);\n//        $this->loc->src = \"@globalcartsettings\";\n//        $config         = new expConfig($this->loc);\n//        $this->config   = $config->config;\n//        assign_to_template(array(\n//            'config'=> $this->config,\n//            'title' => static::displayname()\n//        ));\n//    }\n\n    //this is ran after we alter the quantity of the cart, including\n    //delete items or runing the updatequantity action\n    private function rebuildCart() {\n        //group items by type and id               \n        //since we can have the same product in different items (options and quantity discount)\n        //remove items and readd?\n        global $order;\n        //eDebug($order,true); \n        $items = $order->orderitem;\n        foreach ($order->orderitem as $item) {\n            $item->delete();\n        }\n        $order->orderitem = array();\n        $order->refresh();\n        foreach ($items as $item) {\n\n            for ($x = 1; $x <= $item->quantity; $x++) {\n                $product   = $item->product;\n                $price     = $product->getBasePrice();\n                $basePrice = $price;\n                $options   = array();\n                if (!empty($item->opts)) {\n                    foreach ($item->opts as $opt) {\n                        $cost = $opt[2] == '$' ? $opt[4] : $basePrice * ($opt[4] * .01);\n                        $cost = $opt[3] == '+' ? $cost : $cost * -1;\n                        $price += $cost;\n                        $options[] = $opt;\n                    }\n                }\n                $params['options']        = serialize($options);\n                $params['products_price'] = $price;\n                $params['product_id']     = $product->id;\n                $params['product_type']   = $product->product_type;\n\n                $newitem = new orderitem($params);\n                //eDebug($item, true);\n                $newitem->products_price = $price;\n                $newitem->options        = serialize($options);\n\n                $sm                          = $order->getCurrentShippingMethod();\n                $newitem->shippingmethods_id = $sm->id;\n                $newitem->save();\n                $order->refresh();\n            }\n        }\n        $order->save();\n        /*eDebug($items);\n        \n        \n        $options = array();  \n        foreach ($this->optiongroup as $og) {\n            if ($og->required && empty($params['options'][$og->id][0])) {\n                \n                flash('error', $this->title.' '.gt('requires some options to be selected before you can add it to your cart.'));\n                redirect_to(array('controller'=>store, 'action'=>'show', 'id'=>$this->id));\n            }\n            if (!empty($params['options'][$og->id])) {\n                foreach ($params['options'][$og->id] as $opt_id) {\n                    $selected_option = new option($opt_id);\n                    $cost = $selected_option->modtype == '$' ? $selected_option->amount :  $this->getBasePrice() * ($selected_option->amount * .01);\n                    $cost = $selected_option->updown == '+' ? $cost : $cost * -1;                      \n                    $price += $cost;\n                    $options[] = array($selected_option->id,$selected_option->title,$selected_option->modtype,$selected_option->updown,$selected_option->amount);\n                }\n            }\n        }\n        //die();\n        // add the product to the cart.\n        $params['options'] = serialize($options);\n        $params['products_price'] = $price;\n        $item = new orderitem($params);\n        //eDebug($item, true);\n        $item->products_price = $price;\n        $item->options = serialize($options);\n        \n        $sm = $order->getCurrentShippingMethod();\n        $item->shippingmethods_id = $sm->id;\n        $item->save();                            */\n        return true;\n\n    }\n\n    public function empty_cart() {\n        global $order;\n        foreach ($order->orderitem as $orderItem) {\n            $orderItem->delete();\n        }\n        flash('message', gt('Your shopping cart is now empty.'));\n        expHistory::back();\n    }\n\n//    function saveconfig() {\n//        // setup and save the config\n//        $this->loc->mod = \"cart\";\n//        $this->loc->src = \"@globalcartsettings\";\n//        $this->loc->int = \"\";\n//        parent::saveconfig();\n//    }\n\n    /**\n     * get the metainfo for this module\n     *\n     * @return array\n     */\n    function metainfo() {\n        global $router;\n\n        if (empty($router->params['action'])) return false;\n\n        // figure out what metadata to pass back based on the action we are in.\n        $action = $router->params['action'];\n        $metainfo = array('title' => '', 'keywords' => '', 'description' => '', 'canonical' => '', 'noindex' => true, 'nofollow' => true);\n        $storename = ecomconfig::getConfig('storename');\n        switch ($action) {\n            default:\n                $metainfo['title'] = gt(\"Shopping Cart\") . \" - \" . $storename;\n                $metainfo['keywords'] = SITE_KEYWORDS;\n                $metainfo['description'] = SITE_DESCRIPTION;\n//                $metainfo['canonical'] = URL_FULL.substr($router->sefPath, 1);\n//                $metainfo['canonical'] = $router->plainPath();\n        }\n\n        return $metainfo;\n    }\n\n}\n\n?>", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package Modules\n */\n\nclass purchaseOrderController extends expController {\n\tpublic $basemodel_name = 'purchase_order';\n\tprotected $manage_permissions = array(\n        'show_vendor'=>'Show Vendor Details',\n    );\n\n    static function displayname() { return gt(\"e-Commerce Purchase Order Manager\"); }\n    static function description() { return gt(\"Use this module to create and manage purchase orders for your ecommerce store.\"); }\n\n\tfunction manage () {\n\t    expHistory::set('viewable', $this->params);\n\n\t\t$vendor = new vendor();\n\t\t$vendors = $vendor->find('all');\n\t\tif(!empty($this->params['vendor'])) {\n\t\t\t$purchase_orders = $this->purchase_order->find('all', 'vendor_id=' . $this->params['vendor']);\n\t\t} else {\n\t\t\t$purchase_orders = $this->purchase_order->find('all');\n\t\t}\n\n\t\tassign_to_template(array(\n            'purchase_orders'=>$purchase_orders,\n            'vendors' => $vendors,\n            'vendor_id' => @$this->params['vendor']\n        ));\n\t}\n\n\tfunction edit () {\n//\t    global $db;\n\t    assign_to_template(array(\n            'record'=>$this->params\n        ));\n\t}\n\n\tfunction manage_vendors () {\n\t    expHistory::set('viewable', $this->params);\n\t\t$vendor = new vendor();\n\n\t\t$vendors = $vendor->find('all');\n\t\tassign_to_template(array(\n            'vendors'=>$vendors\n        ));\n\t}\n\n\tfunction show_vendor () {\n\t\t$vendor = new vendor();\n\n\t\tif(isset($this->params['id'])) {\n\t\t\t$vendor = $vendor->find('first', 'id =' .$this->params['id']);\n\t\t\t$vendor_title = $vendor->title;\n\t\t\t$state = new geoRegion($vendor->state);\n\t\t\t$vendor->state = $state->name;\n\t\t\t//Removed unnecessary fields\n\t\t\tunset(\n                $vendor->title,\n                $vendor->table,\n                $vendor->tablename,\n                $vendor->classname,\n                $vendor->identifier\n            );\n\n\t\t\tassign_to_template(array(\n                'vendor_title' => $vendor_title,\n                'vendor'=>$vendor\n            ));\n\t\t}\n\t}\n\n\tfunction edit_vendor() {\n\t\t$vendor = new vendor();\n\n\t\tif(isset($this->params['id'])) {\n\t\t\t$vendor = $vendor->find('first', 'id =' .$this->params['id']);\n\t\t\tassign_to_template(array(\n                'vendor'=>$vendor\n            ));\n\t\t}\n\t}\n\n\tfunction update_vendor() {\n\t\t$vendor = new vendor();\n\n\t\t$vendor->update($this->params['vendor']);\n        expHistory::back();\n    }\n\n\tfunction delete_vendor() {\n\t\tglobal $db;\n\n        if (!empty($this->params['id'])){\n\t\t\t$db->delete('vendor', 'id =' .$this->params['id']);\n\t\t}\n        expHistory::back();\n    }\n\n\tpublic function getPurchaseOrderByJSON() {\n\n\t\tif(!empty($this->params['vendor'])) {\n\t\t\t$purchase_orders = $this->purchase_order->find('all', 'vendor_id=' . $this->params['vendor']);\n\t\t} else {\n\t\t\t$purchase_orders = $this->purchase_order->find('all');\n\t\t}\n\n\t\techo json_encode($purchase_orders);\n\t}\n\n}\n\n?>", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package    Modules\n */\n/** @define \"BASE\" \"../../../..\" */\n\nclass storeController extends expController {\n    public $basemodel_name = 'product';\n    public $useractions = array(\n        'showall'                         => 'Products - All Products and Categories',\n        'showallFeaturedProducts'         => 'Products - Only Featured',\n        'showallCategoryFeaturedProducts' => 'Products - Featured Products under current category',\n        'showallManufacturers'            => 'Products - By Manufacturer',\n        'showTopLevel'                    => 'Product Categories Menu - Show Top Level',\n        'showFullTree'                    => 'Product Categories Menu - Show Full Tree',  //FIXME image variant needs a separate method\n        'showallSubcategories'            => 'Product Categories Menu - Subcategories of current category',\n//        'upcomingEvents'                  => 'Event Registration - Upcoming Events',\n//        'eventsCalendar'                  => 'Event Registration - Calendar View',\n        'ecomSearch'                      => 'Product Search - Autocomplete',\n        'searchByModel'                   => 'Product Search - By Model',\n        'quicklinks'                      => 'Links - User Links',\n        'showGiftCards'                   => 'Gift Cards UI',\n    );\n    protected $manage_permissions = array(\n        'batch_process'               => 'Batch capture order transactions',\n        'cleanNonUnicodeProducts'     => 'Clean all non-unicode charset products',\n        'copyProduct'                 => \"Copy Product\",\n//        'delete_children'             => \"Delete Children\",\n        'reimport'                    => 'ReImport Products',\n        'findDupes'                   => 'Fix Duplicate SEF Names',\n//        'manage_sales_reps'           => 'Manage Sales Reps',\n//        'import_external_addresses'   => 'Import addresses from other sources',\n        'showallImpropercategorized'  => 'View products in top level categories that should not be',\n        'showallUncategorized'        => 'View all uncategorized products',\n        'nonUnicodeProducts'          => 'View all non-unicode charset products',\n        'process_orders'              => 'Batch capture order transactions',\n        'processModelAliases'         => 'Process uploaded model aliases',\n        'saveModelAliases'            => 'Save uploaded model aliases',\n//        'deleteProcessedModelAliases' => 'Delete processed uploaded model aliases',\n//        'delete_model_alias'          => 'Process model aliases',\n//        'update_model_alias'          => 'Save model aliases',\n//        'edit_model_alias'            => 'Delete model aliases',\n//        'import'                      => 'Import Products',\n//        'importProduct'               => 'Import Products',\n//        'export'                      => 'Export Products',\n        'uploadModelAliases'          => 'Upload model aliases',\n    );\n    // hide the configs we don't need\n    public $remove_configs = array(\n        'aggregation',\n        'categories',\n//        'comments',\n        'ealerts',\n        'facebook',\n        'files',\n        'rss',\n        'tags',\n        'twitter',\n    );  // all options: ('aggregation','categories','comments','ealerts','facebook','files','module_title','pagination','rss','tags','twitter',)\n\n    static function displayname() {\n        return gt(\"e-Commerce Store Front\");\n    }\n\n    static function description() {\n        return gt(\"Displays the products and categories in your store\");\n    }\n\n    static function author() {\n        return \"OIC Group, Inc\";\n    }\n\n    static function isSearchable() {\n        return true;\n    }\n\n    public function searchName() {\n        return gt('e-Commerce Item');\n    }\n\n    static function canImportData() {\n        return true;\n    }\n\n    static function canExportData() {\n        return true;\n    }\n\n    function __construct($src = null, $params = array()) {\n        global $db, $router, $section, $user;\n//        parent::__construct($src = null, $params);\n        if (empty($params)) {\n            $params = $router->params;\n        }\n        parent::__construct($src, $params);\n\n        // we're setting the config here from the module and globally\n        $this->grabConfig();\n\n//        if (expTheme::inAction() && !empty($router->url_parts[1]) && ($router->url_parts[0] == \"store\" && $router->url_parts[1] == \"showall\")) {\n        if (!empty($params['action']) && ($params['controller'] == \"store\" && $params['action'] == \"showall\") ) {\n//            if (isset($router->url_parts[array_search('title', $router->url_parts) + 1]) && is_string($router->url_parts[array_search('title', $router->url_parts) + 1])) {\n            if (isset($params['title']) && is_string($params['title'])) {\n//                $default_id = $db->selectValue('storeCategories', 'id', \"sef_url='\" . $router->url_parts[array_search('title', $router->url_parts) + 1] . \"'\");\n//                $active     = $db->selectValue('storeCategories', 'is_active', \"sef_url='\" . $router->url_parts[array_search('title', $router->url_parts) + 1] . \"'\");\n                $default_id = $db->selectValue('storeCategories', 'id', \"sef_url='\" . $params['title'] . \"'\");\n                $active = $db->selectValue('storeCategories', 'is_active', \"sef_url='\" . $params['title'] . \"'\");\n                if (empty($active) && !$user->isAdmin()) {\n                    redirect_to(array(\"section\" => SITE_DEFAULT_SECTION)); // selected category is NOT active\n                }\n            } elseif (isset($this->config['category'])) { // the module category to display\n                $default_id = $this->config['category'];\n            } else {\n                $default_id = 0;\n            }\n//        } elseif (expTheme::inAction() && !empty($router->url_parts[1]) && ($router->url_parts[0] == \"store\" && ($router->url_parts[1] == \"show\" || $router->url_parts[1] == \"showByTitle\"))) {\n        } elseif (!empty($params['action']) && ($params['controller'] == \"store\" && ($params['action'] == \"show\" || $params['action'] == \"showByTitle\" || $params['action'] == \"categoryBreadcrumb\"))) {\n//            if (isset($router->url_parts[array_search('id', $router->url_parts) + 1]) && ($router->url_parts[array_search('id', $router->url_parts) + 1] != 0)) {\n            if (!empty($params['id'])) {\n//                $default_id = $db->selectValue('product_storeCategories', 'storecategories_id', \"product_id='\" . $router->url_parts[array_search('id', $router->url_parts) + 1] . \"'\");\n                $default_id = $db->selectValue('product_storeCategories', 'storecategories_id', \"product_id='\" . $params['id'] . \"'\");\n            } elseif (!empty($params['title'])) {\n//                $prod_id    = $db->selectValue('product', 'id', \"sef_url='\" . $router->url_parts[array_search('title', $router->url_parts) + 1] . \"'\");\n                $prod_id = $db->selectValue('product', 'id', \"sef_url='\" . $params['title'] . \"'\");\n                $default_id = $db->selectValue('product_storeCategories', 'storecategories_id', \"product_id='\" . $prod_id . \"'\");\n            }\n        } elseif (isset($this->config['show_first_category']) || (!expTheme::inAction() && $section == SITE_DEFAULT_SECTION)) {\n            if (!empty($this->config['show_first_category'])) {\n                $default_id = $db->selectValue('storeCategories', 'id', 'lft=1');\n            } else {\n                $default_id = null;\n//                flash('error','store-show first category empty, but default seciton');\n            }\n        } elseif (!isset($this->config['show_first_category']) && !expTheme::inAction()) {\n            $default_id = null;\n//            flash('error','store-don\\'t show first category empty');\n        } else {\n            $default_id = null;\n        }\n//        if (empty($default_id)) $default_id = 0;\n        if (!is_null($default_id)) expSession::set('catid', $default_id);\n\n        // figure out if we need to show all categories and products or default to showing the first category.\n        // elseif (!empty($this->config['category'])) {\n        //     $default_id = $this->config['category'];\n        // } elseif (ecomconfig::getConfig('show_first_category')) {\n        //     $default_id = $db->selectValue('storeCategories', 'id', 'lft=1');\n        // } else {\n        //     $default_id = 0;\n        // }\n\n        $this->parent = expSession::get('catid');\n        $this->category = new storeCategory($this->parent);\n        if ($this->parent) { // we're setting the config here for the category\n            $this->grabConfig($this->category);\n        }\n    }\n\n    function showall() {\n        global $db, $user, $router;\n\n        expHistory::set('viewable', $this->params);\n\n        if (empty($this->category->is_events)) {\n            $count_sql_start = 'SELECT COUNT(DISTINCT p.id) as c FROM ' . $db->prefix . 'product p ';\n\n            $sql_start = 'SELECT DISTINCT p.*, IF(base_price > special_price AND use_special_price=1,special_price, base_price) as price FROM ' . $db->prefix . 'product p ';\n            $sql = 'JOIN ' . $db->prefix . 'product_storeCategories sc ON p.id = sc.product_id ';\n            $sql .= 'WHERE ';\n            if (!$user->isAdmin()) $sql .= '(p.active_type=0 OR p.active_type=1) AND ';\n            $sql .= 'sc.storecategories_id IN (';\n            $sql .= 'SELECT id FROM ' . $db->prefix . 'storeCategories WHERE rgt BETWEEN ' . $this->category->lft . ' AND ' . $this->category->rgt . ')';\n\n            $count_sql = $count_sql_start . $sql;\n            $sql = $sql_start . $sql;\n\n//            $order = 'title'; // $order = 'sc.rank'; //$this->config['orderby'];\n//            $dir = 'ASC'; //$this->config['orderby_dir'];\n            $order = !empty($this->params['order']) ? $this->params['order'] : $this->config['orderby'];\n            $dir = !empty($this->params['dir']) ? $this->params['dir'] : $this->config['orderby_dir'];\n            if (empty($order)) $order = 'title';\n            if (empty($dir)) $dir = 'ASC';\n        } else { // this is an event category\n            $sql_start = 'SELECT DISTINCT p.*, er.event_starttime, er.signup_cutoff FROM ' . $db->prefix . 'product p ';\n            $count_sql_start = 'SELECT COUNT(DISTINCT p.id) as c, er.event_starttime, er.signup_cutoff FROM ' . $db->prefix . 'product p ';\n            $sql = 'JOIN ' . $db->prefix . 'product_storeCategories sc ON p.id = sc.product_id ';\n            $sql .= 'JOIN ' . $db->prefix . 'eventregistration er ON p.product_type_id = er.id ';\n            $sql .= 'WHERE sc.storecategories_id IN (';\n            $sql .= 'SELECT id FROM ' . $db->prefix . 'storeCategories WHERE rgt BETWEEN ' . $this->category->lft . ' AND ' . $this->category->rgt . ')';\n            if ($this->category->hide_closed_events) {\n                $sql .= ' AND er.signup_cutoff > ' . time();\n            }\n\n            $count_sql = $count_sql_start . $sql;\n            $sql = $sql_start . $sql;\n\n            $order = !empty($this->params['order']) ? $this->params['order'] : 'event_starttime';\n            $dir = !empty($this->params['dir']) ? $this->params['dir'] : 'ASC';\n        }\n\n        if (empty($router->params['title']))  // we need to pass on the category for proper paging\n            $router->params['title'] = $this->category->sef_url;\n        $limit = !empty($this->config['limit']) ? $this->config['limit'] : (!empty($this->config['pagination_default']) ? $this->config['pagination_default'] : 10);\n        if ($this->category->find('count') > 0) { // there are categories\n            $page = new expPaginator(array(\n                'model_field' => 'product_type',\n                'sql'         => $sql,\n                'count_sql'   => $count_sql,\n                'limit'       => $limit,\n                'order'       => $order,\n                'dir'         => $dir,\n                'page'        => (isset($this->params['page']) ? $this->params['page'] : 1),\n                'controller'  => $this->params['controller'],\n                'action'      => $this->params['action'],\n                'columns'     => array(\n                    gt('Model #')      => 'model',\n                    gt('Product Name') => 'title',\n                    gt('Price')        => 'price'\n                ),\n            ));\n        } else { // there are no categories\n            $page = new expPaginator(array(\n                'model_field' => 'product_type',\n                'sql'         => 'SELECT * FROM ' . $db->prefix . 'product WHERE 1',\n                'limit'       => $limit,\n                'order'       => $order,\n                'dir'         => $dir,\n                'page'        => (isset($this->params['page']) ? $this->params['page'] : 1),\n                'controller'  => $this->params['controller'],\n                'action'      => $this->params['action'],\n                'columns'     => array(\n                    gt('Model #')      => 'model',\n                    gt('Product Name') => 'title',\n                    gt('Price')        => 'price'\n                ),\n            ));\n        }\n\n        $ancestors = $this->category->pathToNode();\n        $categories = ($this->parent == 0) ? $this->category->getTopLevel(null, false, true) : $this->category->getChildren(null, false, true);\n\n        $rerankSQL = \"SELECT DISTINCT p.* FROM \" . $db->prefix . \"product p JOIN \" . $db->prefix . \"product_storeCategories sc ON p.id = sc.product_id WHERE sc.storecategories_id=\" . $this->category->id . \" ORDER BY rank ASC\";\n        //eDebug($router);\n        $defaultSort = $router->current_url;\n\n        assign_to_template(array(\n            'page'             => $page,\n            'defaultSort'      => $defaultSort,\n            'ancestors'        => $ancestors,\n            'categories'       => $categories,\n            'current_category' => $this->category,\n            'rerankSQL'        => $rerankSQL\n        ));\n        $this->categoryBreadcrumb();\n    }\n\n    function grabConfig($category = null) {\n\n        // grab the configs for the passed category\n        if (is_object($category)) {\n            $catConfig = new expConfig(expCore::makeLocation(\"storeCategory\",\"@store-\" . $category->id,\"\"));\n        } elseif (empty($this->config)) {  // config not set yet\n            $global_config = new expConfig(expCore::makeLocation(\"ecomconfig\",\"@globalstoresettings\",\"\"));\n            $this->config = $global_config->config;\n            return;\n        }\n\n        // grab the store general settings\n        $config = new expConfig(expCore::makeLocation(\"ecomconfig\",\"@globalstoresettings\",\"\"));\n\n        // $this->config currently holds the module settings - merge together with any cat config settings having priority\n        $this->config = empty($catConfig->config) || @$catConfig->config['use_global'] == 1 ?  @array_merge($config->config, $this->config) :  @array_merge($config->config, $this->config, $catConfig->config);\n\n        //This is needed since in the first installation of ecom the value for this will be empty and we are doing % operation for this value\n        //So we need to ensure if the value is = 0, we make it the default\n        if (empty($this->config['images_per_row'])) {\n            $this->config['images_per_row'] = 3;\n        }\n    }\n\n    /**\n     * @deprecated 2.0.0 moved to eventregistration\n     */\n    function upcomingEvents() {\n        $this->params['controller'] = 'eventregistration';\n        redirect_to($this->params);\n\n        //fixme old code\n        $sql = 'SELECT DISTINCT p.*, er.event_starttime, er.signup_cutoff FROM ' . DB_TABLE_PREFIX . '_product p ';\n        $sql .= 'JOIN ' . DB_TABLE_PREFIX . '_eventregistration er ON p.product_type_id = er.id ';\n        $sql .= 'WHERE 1 AND er.signup_cutoff > ' . time();\n\n        $limit = empty($this->config['event_limit']) ? 10 : $this->config['event_limit'];\n        $order = 'eventdate';\n        $dir = 'ASC';\n\n        $page = new expPaginator(array(\n            'model_field' => 'product_type',\n            'sql'         => $sql,\n            'limit'       => $limit,\n            'order'       => $order,\n            'dir'         => $dir,\n            'page'        => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'  => $this->params['controller'],\n            'action'      => $this->params['action'],\n            'columns'     => array(\n                gt('Model #')      => 'model',\n                gt('Product Name') => 'title',\n                gt('Price')        => 'base_price'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page' => $page\n        ));\n    }\n\n    /**\n     * @deprecated 2.0.0 moved to eventregistration\n     */\n    function eventsCalendar() {\n        $this->params['controller'] = 'eventregistration';\n        redirect_to($this->params);\n\n        //fixme old code\n        global $db, $user;\n\n        expHistory::set('viewable', $this->params);\n\n        $time = isset($this->params['time']) ? $this->params['time'] : time();\n        assign_to_template(array(\n            'time' => $time\n        ));\n\n//        $monthly = array();\n//        $counts  = array();\n\n        $info = getdate($time);\n        $nowinfo = getdate(time());\n        if ($info['mon'] != $nowinfo['mon']) $nowinfo['mday'] = -10;\n        // Grab non-day numbers only (before end of month)\n//        $week        = 0;\n        $currentweek = -1;\n\n        $timefirst = mktime(0, 0, 0, $info['mon'], 1, $info['year']);\n        $week = intval(date('W', $timefirst));\n        if ($week >= 52 && $info['mon'] == 1) $week = 1;\n        $infofirst = getdate($timefirst);\n\n//        if ($infofirst['wday'] == 0) {\n//            $monthly[$week] = array(); // initialize for non days\n//            $counts[$week]  = array();\n//        }\n//        for ($i = 1 - $infofirst['wday']; $i < 1; $i++) {\n//            $monthly[$week][$i] = array();\n//            $counts[$week][$i]  = -1;\n//        }\n//        $weekday = $infofirst['wday']; // day number in grid.  if 7+, switch weeks\n        $monthly[$week] = array(); // initialize for non days\n        $counts[$week] = array();\n        if (($infofirst['wday'] == 0) && (DISPLAY_START_OF_WEEK == 1)) {\n            for ($i = -6; $i < (1 - DISPLAY_START_OF_WEEK); $i++) {\n                $monthly[$week][$i] = array();\n                $counts[$week][$i] = -1;\n            }\n            $weekday = $infofirst['wday'] + 7; // day number in grid.  if 7+, switch weeks\n        } else {\n            for ($i = 1 - $infofirst['wday']; $i < (1 - DISPLAY_START_OF_WEEK); $i++) {\n                $monthly[$week][$i] = array();\n                $counts[$week][$i] = -1;\n            }\n            $weekday = $infofirst['wday']; // day number in grid.  if 7+, switch weeks\n        }\n        // Grab day counts\n        $endofmonth = date('t', $time);\n\n        for ($i = 1; $i <= $endofmonth; $i++) {\n            $start = mktime(0, 0, 0, $info['mon'], $i, $info['year']);\n            if ($i == $nowinfo['mday']) $currentweek = $week;\n\n//            $dates              = $db->selectObjects(\"eventregistration\", \"`eventdate` = $start\");\n//            $dates = $db->selectObjects(\"eventregistration\", \"(eventdate >= \" . expDateTime::startOfDayTimestamp($start) . \" AND eventdate <= \" . expDateTime::endOfDayTimestamp($start) . \")\");\n            $er = new eventregistration();\n//            $dates = $er->find('all', \"(eventdate >= \" . expDateTime::startOfDayTimestamp($start) . \" AND eventdate <= \" . expDateTime::endOfDayTimestamp($start) . \")\");\n\n            if ($user->isAdmin()) {\n                $events = $er->find('all', 'product_type=\"eventregistration\"', \"title ASC\");\n            } else {\n                $events = $er->find('all', 'product_type=\"eventregistration\" && active_type=0', \"title ASC\");\n            }\n            $dates = array();\n\n            foreach ($events as $event) {\n                // $this->signup_cutoff > time()\n                if ($event->eventdate >= expDateTime::startOfDayTimestamp($start) && $event->eventdate <= expDateTime::endOfDayTimestamp($start)) {\n                    $dates[] = $event;\n                }\n                // eDebug($event->signup_cutoff, true);\n            }\n\n            $monthly[$week][$i] = $this->getEventsForDates($dates);\n            $counts[$week][$i] = count($monthly[$week][$i]);\n            if ($weekday >= (6 + DISPLAY_START_OF_WEEK)) {\n                $week++;\n                $monthly[$week] = array(); // allocate an array for the next week\n                $counts[$week] = array();\n                $weekday = DISPLAY_START_OF_WEEK;\n            } else $weekday++;\n        }\n        // Grab non-day numbers only (after end of month)\n        for ($i = 1; $weekday && $i < (8 + DISPLAY_START_OF_WEEK - $weekday); $i++) {\n            $monthly[$week][$i + $endofmonth] = array();\n            $counts[$week][$i + $endofmonth] = -1;\n        }\n\n        $this->params['time'] = $time;\n        assign_to_template(array(\n            'currentweek' => $currentweek,\n            'monthly'     => $monthly,\n            'counts'      => $counts,\n            \"prevmonth3\"  => strtotime('-3 months', $timefirst),\n            \"prevmonth2\"  => strtotime('-2 months', $timefirst),\n            \"prevmonth\"   => strtotime('-1 months', $timefirst),\n            \"nextmonth\"   => strtotime('+1 months', $timefirst),\n            \"nextmonth2\"  => strtotime('+2 months', $timefirst),\n            \"nextmonth3\"  => strtotime('+3 months', $timefirst),\n            'now'         => $timefirst,\n            \"today\"       => expDateTime::startOfDayTimestamp(time()),\n            'params'      => $this->params,\n            'daynames'    => event::dayNames(),\n        ));\n    }\n\n    /*\n    * Helper function for the Calendar view\n     * @deprecated 2.0.0 moved to eventregistration\n    */\n    function getEventsForDates($edates, $sort_asc = true) {\n        global $db;\n        $events = array();\n        foreach ($edates as $edate) {\n//            if (!isset($this->params['cat'])) {\n//                if (isset($this->params['title']) && is_string($this->params['title'])) {\n//                    $default_id = $db->selectValue('storeCategories', 'id', \"sef_url='\" . $this->params['title'] . \"'\");\n//                } elseif (!empty($this->config['category'])) {\n//                    $default_id = $this->config['category'];\n//                } elseif (ecomconfig::getConfig('show_first_category')) {\n//                    $default_id = $db->selectValue('storeCategories', 'id', 'lft=1');\n//                } else {\n//                    $default_id = 0;\n//                }\n//            }\n//\n//            $parent = isset($this->params['cat']) ? intval($this->params['cat']) : $default_id;\n//\n//            $category = new storeCategory($parent);\n\n            $sql = 'SELECT DISTINCT p.*, er.event_starttime, er.signup_cutoff FROM ' . $db->prefix . 'product p ';\n//            $sql .= 'JOIN ' . $db->prefix . 'product_storeCategories sc ON p.id = sc.product_id ';\n            $sql .= 'JOIN ' . $db->prefix . 'eventregistration er ON p.product_type_id = er.id ';\n            $sql .= 'WHERE 1 ';\n//            $sql .= ' AND sc.storecategories_id IN (SELECT id FROM exponent_storeCategories WHERE rgt BETWEEN ' . $category->lft . ' AND ' . $category->rgt . ')';\n//            if ($category->hide_closed_events) {\n//                $sql .= ' AND er.signup_cutoff > ' . time();\n//            }\n//            $sql .= ' AND er.id = ' . $edate->id;\n            $sql .= ' AND er.id = ' . $edate->product_type_id;\n\n            $order = 'event_starttime';\n            $dir = 'ASC';\n\n            $o = $db->selectObjectBySql($sql);\n            $o->eventdate = $edate->eventdate;\n            $o->eventstart = $edate->event_starttime + $edate->eventdate;\n            $o->eventend = $edate->event_endtime + $edate->eventdate;\n            $o->expFile = $edate->expFile;\n            $events[] = $o;\n        }\n        $events = expSorter::sort(array('array' => $events, 'sortby' => 'eventstart', 'order' => $sort_asc ? 'ASC' : 'DESC'));\n        return $events;\n    }\n\n    function categoryBreadcrumb() {\n//        global $db, $router;\n\n        //eDebug($this->category);\n\n        /*if(isset($router->params['action']))\n        {\n            $ancestors = $this->category->pathToNode();\n        }else if(isset($router->params['section']))\n        {\n            $current = $db->selectObject('section',' id= '.$router->params['section']);\n            $ancestors[] = $current;\n            if( $current->parent != -1 || $current->parent != 0 )\n            {\n                while ($db->selectObject('section',' id= '.$router->params['section']);)\n                    if ($section->id == $id) {\n                        $current = $section;\n                        break;\n                    }\n                }\n            }\n            eDebug($sections);\n            $ancestors = $this->category->pathToNode();\n        }*/\n\n        $ancestors = $this->category->pathToNode();\n        // eDebug($ancestors);\n        assign_to_template(array(\n            'ancestors' => $ancestors\n        ));\n    }\n\n    function showallUncategorized() {\n        expHistory::set('viewable', $this->params);\n\n//        $sql = 'SELECT p.* FROM ' . DB_TABLE_PREFIX . '_product p JOIN ' . DB_TABLE_PREFIX . '_product_storeCategories ';\n//        $sql .= 'sc ON p.id = sc.product_id WHERE sc.storecategories_id = 0 AND parent_id=0';\n        $sql = 'SELECT p.* FROM ' . DB_TABLE_PREFIX . '_product p LEFT OUTER JOIN ' . DB_TABLE_PREFIX . '_product_storeCategories ';\n        $sql .= 'sc ON p.id = sc.product_id WHERE sc.product_id is null AND p.parent_id=0';\n\n        expSession::set('product_export_query', $sql);\n\n        $limit = !empty($this->config['limit']) ? $this->config['limit'] : 10;\n        $page = new expPaginator(array(\n            'model_field' => 'product_type',\n            'sql'         => $sql,\n            'limit'       => !empty($this->config['pagination_default']) ? $this->config['pagination_default'] : $limit,\n            'page'        => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'  => $this->params['controller'],\n            'action'      => $this->params['action'],\n            'columns'     => array(\n                gt('Model #')      => 'model',\n                gt('Product Name') => 'title',\n                gt('Price')        => 'base_price'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page'        => $page,\n            'moduletitle' => 'Uncategorized Products'\n        ));\n    }\n\n    function manage() {\n        expHistory::set('manageable', $this->params);\n\n        if (ECOM_LARGE_DB) {\n            $limit = !empty($this->config['pagination_default']) ? $this->config['pagination_default'] : 10;\n        } else {\n            $limit = 0;  // we'll paginate on the page\n        }\n        $page = new expPaginator(array(\n            'model'      => 'product',\n            'where'      => 'parent_id=0',\n            'limit'      => $limit,\n            'order'      => (isset($this->params['order']) ? $this->params['order'] : 'title'),\n            'dir'        => (isset($this->params['dir']) ? $this->params['dir'] : 'ASC'),\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller' => $this->params['controller'],\n            'action'     => $this->params['action'],\n            'columns'    => array(\n                gt('Type')         => 'product_type',\n                gt('Product Name') => 'title',\n                gt('Model #')      => 'model',\n                gt('Price')        => 'base_price'\n            )\n        ));\n        assign_to_template(array(\n            'page' => $page\n        ));\n    }\n\n    function showallImpropercategorized() {\n        expHistory::set('viewable', $this->params);\n\n        //FIXME not sure this is the correct sql, not sure what we are trying to pull out\n        $sql = 'SELECT DISTINCT(p.id),p.product_type FROM ' . DB_TABLE_PREFIX . '_product p ';\n        $sql .= 'JOIN ' . DB_TABLE_PREFIX . '_product_storeCategories psc ON p.id = psc.product_id ';\n        $sql .= 'JOIN '.DB_TABLE_PREFIX.'_storeCategories sc ON psc.storecategories_id = sc.parent_id ';\n        $sql .= 'WHERE p.parent_id=0 AND sc.parent_id != 0';\n\n        expSession::set('product_export_query', $sql);\n\n        $limit = !empty($this->config['limit']) ? $this->config['limit'] : 10;\n        $page = new expPaginator(array(\n            'model_field' => 'product_type',\n            'sql'         => $sql,\n            'limit'       => !empty($this->config['pagination_default']) ? $this->config['pagination_default'] : $limit,\n            'page'        => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'  => $this->params['controller'],\n            'action'      => $this->params['action'],\n            'columns'     => array(\n                gt('Model #')      => 'model',\n                gt('Product Name') => 'title',\n                gt('Price')        => 'base_price'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page'        => $page,\n            'moduletitle' => 'Improperly Categorized Products'\n        ));\n    }\n\n    function exportMe() {\n        redirect_to(array('controller' => 'report', 'action' => 'batch_export', 'applytoall' => true));\n    }\n\n    function export() {\n        global $db;\n\n        $this->params['applytoall'] = 1;  //FIXME we simply do all now\n\n        //eDebug($this->params);\n        //$sql = \"SELECT * INTO OUTFILE '\" . BASE . \"tmp/export.csv' FIELDS TERMINATED BY ','  FROM exponent_product WHERE 1 LIMIT 10\";\n//        $out = '\"id\",\"parent_id\",\"child_rank\",\"title\",\"body\",\"model\",\"warehouse_location\",\"sef_url\",\"canonical\",\"meta_title\",\"meta_keywords\",\"meta_description\",\"tax_class_id\",\"quantity\",\"availability_type\",\"base_price\",\"special_price\",\"use_special_price\",\"active_type\",\"product_status_id\",\"category1\",\"category2\",\"category3\",\"category4\",\"category5\",\"category6\",\"category7\",\"category8\",\"category9\",\"category10\",\"category11\",\"category12\",\"surcharge\",\"category_rank\",\"feed_title\",\"feed_body\"' . chr(13) . chr(10);\n        $out = '\"id\",\"parent_id\",\"child_rank\",\"title\",\"body\",\"model\",\"warehouse_location\",\"sef_url\",\"meta_title\",\"meta_keywords\",\"meta_description\",\"tax_class_id\",\"quantity\",\"availability_type\",\"base_price\",\"special_price\",\"use_special_price\",\"active_type\",\"product_status_id\",\"category1\",\"category2\",\"category3\",\"category4\",\"category5\",\"category6\",\"category7\",\"category8\",\"category9\",\"category10\",\"category11\",\"category12\",\"surcharge\",\"category_rank\",\"feed_title\",\"feed_body\",\"weight\",\"width\",\"height\",\"length\",\"image1\",\"image2\",\"image3\",\"image4\",\"image5\",\"companies_id\"' . chr(13) . chr(10);\n        if (isset($this->params['applytoall']) && $this->params['applytoall'] == 1) {\n            $sql = expSession::get('product_export_query');\n            if (empty($sql)) $sql = 'SELECT DISTINCT(p.id) from ' . $db->prefix . 'product as p WHERE (product_type=\"product\")';\n            //eDebug($sql);\n            //expSession::set('product_export_query','');\n            $prods = $db->selectArraysBySql($sql);\n            //eDebug($prods);\n        } else {\n            foreach ($this->params['act-upon'] as $prod) {\n                $prods[] = array('id' => $prod);\n            }\n        }\n        set_time_limit(0);\n        $baseProd = new product();\n\n        //$p = new product($pid['id'], false, false);\n        foreach ($prods as $pid) {\n            $except = array('company', 'crosssellItem', 'optiongroup');\n            $p = $baseProd->find('first', 'id=' . $pid['id'], null, null, 0, true, true, $except, true);\n\n            //eDebug($p,true);\n            $out .= expString::outputField($p->id);\n            $out .= expString::outputField($p->parent_id);\n            $out .= expString::outputField($p->child_rank);\n            $out .= expString::outputField($p->title);\n            $out .= expString::outputField(expString::stripLineEndings($p->body), \",\", true);\n            $out .= expString::outputField($p->model);\n            $out .= expString::outputField($p->warehouse_location);\n            $out .= expString::outputField($p->sef_url);\n//            $out .= expString::outputField($p->canonical);  FIXME this is NOT in the import sequence\n            $out .= expString::outputField($p->meta_title);\n            $out .= expString::outputField($p->meta_keywords);\n            $out .= expString::outputField($p->meta_description);\n            $out .= expString::outputField($p->tax_class_id);\n            $out .= expString::outputField($p->quantity);\n            $out .= expString::outputField($p->availability_type);\n            $out .= expString::outputField($p->base_price);\n            $out .= expString::outputField($p->special_price);\n            $out .= expString::outputField($p->use_special_price);\n            $out .= expString::outputField($p->active_type);\n            $out .= expString::outputField($p->product_status_id);\n\n            $rank = 0;\n            //eDebug($p);\n            for ($x = 0; $x < 12; $x++) {\n                $this->catstring = '';\n                if (isset($p->storeCategory[$x])) {\n                    $out .= expString::outputField(storeCategory::buildCategoryString($p->storeCategory[$x]->id, true));\n                    $rank = $db->selectValue('product_storeCategories', 'rank', 'product_id=' . $p->id . ' AND storecategories_id=' . $p->storeCategory[$x]->id);\n                } else $out .= ',';\n            }\n            $out .= expString::outputField($p->surcharge);\n            $out .= expString::outputField($rank);  // no longer used\n            $out .= expString::outputField($p->feed_title);\n            $out .= expString::outputField($p->feed_body);\n            $out .= expString::outputField($p->weight);\n            $out .= expString::outputField($p->height);\n            $out .= expString::outputField($p->width);\n            $out .= expString::outputField($p->length);\n            //output images\n            if (isset($p->expFile['mainimage'][0])) {\n                $out .= expString::outputField($p->expFile['mainimage'][0]->id);\n            } else $out .= ',';\n            for ($x = 0; $x < 3; $x++) {\n                if (isset($p->expFile['images'][$x])) {\n                    $out .= expString::outputField($p->expFile['images'][$x]->id);\n                } else $out .= ',';\n            }\n            $out .= expString::outputField($p->companies_id, chr(13) . chr(10)); //Removed the extra \",\" in the last element\n\n            foreach ($p->childProduct as $cp) {\n                //$p = new product($pid['id'], true, false);\n                //eDebug($p,true);\n                $out .= expString::outputField($cp->id);\n                $out .= expString::outputField($cp->parent_id);\n                $out .= expString::outputField($cp->child_rank);\n                $out .= expString::outputField($cp->title);\n                $out .= expString::outputField(expString::stripLineEndings($cp->body));\n                $out .= expString::outputField($cp->model);\n                $out .= expString::outputField($cp->warehouse_location);\n                $out .= expString::outputField($cp->sef_url);\n//                $out .= expString::outputField($cp->canonical);  FIXME this is NOT in the import sequence\n                $out .= expString::outputField($cp->meta_title);\n                $out .= expString::outputField($cp->meta_keywords);\n                $out .= expString::outputField($cp->meta_description);\n                $out .= expString::outputField($cp->tax_class_id);\n                $out .= expString::outputField($cp->quantity);\n                $out .= expString::outputField($cp->availability_type);\n                $out .= expString::outputField($cp->base_price);\n                $out .= expString::outputField($cp->special_price);\n                $out .= expString::outputField($cp->use_special_price);\n                $out .= expString::outputField($cp->active_type);\n                $out .= expString::outputField($cp->product_status_id);\n                $out .= ',,,,,,,,,,,,';  // for categories\n                $out .= expString::outputField($cp->surcharge);\n                $out .= ',,,'; //for rank, feed title, feed body\n                $out .= expString::outputField($cp->weight);\n                $out .= expString::outputField($cp->height);\n                $out .= expString::outputField($cp->width);\n                $out .= expString::outputField($cp->length);\n                $out .= ',,,,,';  // for images\n                $out .= expString::outputField($cp->companies_id, chr(13) . chr(10));\n\n                //echo($out);\n            }\n\n        }\n\n//        $outFile = 'tmp/product_export_' . time() . '.csv';\n//        $outHandle = fopen(BASE . $outFile, 'w');\n//        fwrite($outHandle, $out);\n//        fclose($outHandle);\n//\n//        echo \"<br/><br/>Download the file here: <a href='\" . PATH_RELATIVE . $outFile . \"'>Product Export</a>\";\n\n        $filename = 'product_export_' . time() . '.csv';\n\n        ob_end_clean();\n        ob_start(\"ob_gzhandler\");\n\n        // 'application/octet-stream' is the registered IANA type but\n        //        MSIE and Opera seems to prefer 'application/octetstream'\n        $mime_type = (EXPONENT_USER_BROWSER == 'IE' || EXPONENT_USER_BROWSER == 'OPERA') ? 'application/octetstream' : 'application/octet-stream';\n\n        header('Content-Type: ' . $mime_type);\n        header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n        // IE need specific headers\n        if (EXPONENT_USER_BROWSER == 'IE') {\n            header('Content-Disposition: inline; filename=\"' . $filename . '\"');\n            header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n            header('Pragma: public');\n        } else {\n            header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n            header('Pragma: no-cache');\n        }\n        echo $out;\n        exit; // Exit, since we are exporting\n\n        /*eDebug(BASE . \"tmp/export.csv\");\n        $db->sql($sql);\n        eDebug($db->error());*/\n        /*OPTIONALLY ENCLOSED BY '\" . '\"' .\n        \"' ESCAPED BY '\\\\'\n        LINES TERMINATED BY '\" . '\\\\n' .\n        \"' */\n    }\n\n    /**\n     * @deprecated 2.3.3 moved to company\n     */\n    function showallByManufacturer() {\n        expHistory::set('viewable', $this->params);\n\n        $limit = !empty($this->config['limit']) ? $this->config['limit'] : 10;\n        $page = new expPaginator(array(\n            'model'      => 'product',\n            'where'      => 'companies_id=' . $this->params['id'] . ' AND parent_id=0',\n            'limit'      => !empty($this->config['pagination_default']) ? $this->config['pagination_default'] : $limit,\n            'default'    => 'Product Name',\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller' => $this->params['controller'],\n            'action'     => $this->params['action'],\n            'columns'    => array(\n                gt('Model #')      => 'model',\n                gt('Product Name') => 'title',\n                gt('Price')        => 'base_price'\n            )\n        ));\n\n        $company = new company($this->params['id']);\n\n        assign_to_template(array(\n            'page'    => $page,\n            'company' => $company\n        ));\n    }\n\n    /**\n     * @deprecated 2.3.3 moved to company\n     */\n    function showallManufacturers() {\n        global $db;\n        expHistory::set('viewable', $this->params);\n        $sql = 'SELECT comp.* FROM ' . $db->prefix . 'companies as comp JOIN ' . $db->prefix . 'product AS prod ON prod.companies_id = comp.id WHERE parent_id=0 GROUP BY comp.title ORDER BY comp.title;';\n        $manufacturers = $db->selectObjectsBySql($sql);\n        assign_to_template(array(\n            'manufacturers' => $manufacturers\n        ));\n    }\n\n    function showGiftCards() {\n        expHistory::set('viewable', $this->params);\n        //Get all giftcards\n        $product_type = 'giftcard';\n        $giftcard = new $product_type();\n        $giftcards = $giftcard->find(\"all\", \"product_type = 'giftcard'\");\n\n        //Grab the global config\n        $this->grabConfig();\n\n        //Set the needed config for the view\n        $config['custom_message_product'] = $this->config['custom_message_product'];\n        $config['minimum_gift_card_purchase'] = $this->config['minimum_gift_card_purchase'];\n        $records = expSession::get('params');\n        expSession::un_set('params');\n        assign_to_template(array(\n            'giftcards' => $giftcards,\n            'config'    => $config,\n            'records'   => $records\n        ));\n    }\n\n    function show() {\n        global $db, $order, $template, $user;\n\n        expHistory::set('viewable', $this->params);\n//        $classname = $db->selectValue('product', 'product_type', 'id=' . $this->params['id']);\n//        $product   = new $classname($this->params['id'], true, true);\n\n        $id = isset($this->params['title']) ? $this->params['title'] : $this->params['id'];\n        $product = new product($id);\n        $product_type = new $product->product_type($product->id);\n        $product_type->title = expString::parseAndTrim($product_type->title, true);\n        $product_type->image_alt_tag = expString::parseAndTrim($product_type->image_alt_tag, true);\n\n        //if we're trying to view a child product directly, then we redirect to it's parent show view\n        //bunk URL, no product found\n        if (empty($product->id)) {\n            redirect_to(array('controller' => 'notfound', 'action' => 'page_not_found', 'title' => $this->params['title']));\n        }\n        // we do not display child products by themselves\n        if (!empty($product->parent_id)) {\n            $product = new product($product->parent_id);\n            redirect_to(array('controller' => 'store', 'action' => 'show', 'title' => $product->sef_url));\n        }\n        if ($product->active_type == 1) {\n            $product_type->user_message = \"This product is temporarily unavailable for purchase.\";\n        } elseif ($product->active_type == 2 && !$user->isAdmin()) {\n            flash(\"error\", $product->title . \" \" . gt(\"is currently unavailable.\"));\n            expHistory::back();\n        } elseif ($product->active_type == 2 && $user->isAdmin()) {\n            $product_type->user_message = $product->title . \" is currently marked as unavailable for purchase or display.  Normal users will not see this product.\";\n        }\n\n        // pull in company attachable files\n        if (!empty($product_type->companies_id)) {\n            $product_type->company = new company($product_type->companies_id);\n        }\n\n        if (!empty($product_type->crosssellItem)) foreach ($product_type->crosssellItem as &$csi) {\n            $csi->getAttachableItems();\n        }\n\n        $tpl = $product_type->getForm('show');\n\n        if (!empty($tpl)) $template = new controllertemplate($this, $tpl);\n        $this->grabConfig(); // grab the global config\n\n        assign_to_template(array(\n            'config'        => $this->config,\n            'asset_path'    => $this->asset_path,\n//            'product'      => $product,\n            'product'       => $product_type,\n            'last_category' => !empty($order->lastcat) ? $order->lastcat : null,\n        ));\n        $this->categoryBreadcrumb();\n    }\n\n    function showByTitle() {\n        global $order, $template, $user;\n        //need to add a check here for child product and redirect to parent if hit directly by ID\n        expHistory::set('viewable', $this->params);\n\n        $product = new product(addslashes($this->params['title']));\n        $product_type = new $product->product_type($product->id);\n        $product_type->title = expString::parseAndTrim($product_type->title, true);\n        $product_type->image_alt_tag = expString::parseAndTrim($product_type->image_alt_tag, true);\n\n        //if we're trying to view a child product directly, then we redirect to it's parent show view\n        //bunk URL, no product found\n        if (empty($product->id)) {\n            redirect_to(array('controller' => 'notfound', 'action' => 'page_not_found', 'title' => $this->params['title']));\n        }\n        if (!empty($product->parent_id)) {\n            $product = new product($product->parent_id);\n            redirect_to(array('controller' => 'store', 'action' => 'show', 'title' => $product->sef_url));\n        }\n        if ($product->active_type == 1) {\n            $product_type->user_message = \"This product is temporarily unavailable for purchase.\";\n        } elseif ($product->active_type == 2 && !$user->isAdmin()) {\n            flash(\"error\", $product->title . \" \" . gt(\"is currently unavailable.\"));\n            expHistory::back();\n        } elseif ($product->active_type == 2 && $user->isAdmin()) {\n            $product_type->user_message = $product->title . \" is currently marked as unavailable for purchase or display.  Normal users will not see this product.\";\n        }\n        if (!empty($product_type->crosssellItem)) foreach ($product_type->crosssellItem as &$csi) {\n            $csi->getAttachableItems();\n        }\n        //eDebug($product->crosssellItem);\n\n        $tpl = $product_type->getForm('show');\n        //eDebug($product);\n        if (!empty($tpl)) $template = new controllertemplate($this, $tpl);\n        $this->grabConfig(); // grab the global config\n\n        assign_to_template(array(\n            'config'        => $this->config,\n            'product'       => $product_type,\n            'last_category' => !empty($order->lastcat) ? $order->lastcat : null,\n        ));\n    }\n\n    function showByModel() {\n        global $order, $template, $db;\n\n        expHistory::set('viewable', $this->params);\n        $product = new product();\n        $model = $product->find(\"first\", 'model=\"' . $this->params['model'] . '\"');\n        //eDebug($model);\n        $product_type = new $model->product_type($model->id);\n        //eDebug($product_type);\n        $tpl = $product_type->getForm('show');\n        if (!empty($tpl)) $template = new controllertemplate($this, $tpl);\n        //eDebug($template);\n        $this->grabConfig(); // grab the global config\n        assign_to_template(array(\n            'config'        => $this->config,\n            'product'       => $product_type,\n            'last_category' => $order->lastcat\n        ));\n    }\n\n    function showallSubcategories() {\n//        global $db;\n\n        expHistory::set('viewable', $this->params);\n//        $parent = isset($this->params['cat']) ? $this->params['cat'] : expSession::get('catid');\n        $catid = expSession::get('catid');\n        $parent = !empty($catid) ? $catid : (!empty($this->params['cat']) ? $this->params['cat'] : 0);\n        $category = new storeCategory($parent);\n        $categories = $category->getEcomSubcategories();\n        $ancestors = $category->pathToNode();\n        assign_to_template(array(\n            'categories' => $categories,\n            'ancestors'  => $ancestors,\n            'category'   => $category\n        ));\n    }\n\n    function showallFeaturedProducts() {\n        expHistory::set('viewable', $this->params);\n        $order = !empty($this->params['order']) ? $this->params['order'] : $this->config['orderby'];\n        $dir = !empty($this->params['dir']) ? $this->params['dir'] : $this->config['orderby_dir'];\n        if (empty($order)) $order = 'title';\n        if (empty($dir)) $dir = 'ASC';\n\n        $page = new expPaginator(array(\n            'model_field' => 'product_type',\n            'sql'         => 'SELECT * FROM ' . DB_TABLE_PREFIX . '_product WHERE is_featured=1',\n            'limit'       => ecomconfig::getConfig('pagination_default'),\n            'order'       => $order,\n            'dir'         => $dir,\n            'page'        => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'  => $this->params['controller'],\n            'action'      => $this->params['action'],\n            'columns'     => array(\n                gt('Model #')      => 'model',\n                gt('Product Name') => 'title',\n                gt('Price')        => 'base_price'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page' => $page\n        ));\n    }\n\n    function showallCategoryFeaturedProducts() {\n        expHistory::set('viewable', $this->params);\n        $curcat = $this->category;\n\n        $order = !empty($this->params['order']) ? $this->params['order'] : $this->config['orderby'];\n        $dir = !empty($this->params['dir']) ? $this->params['dir'] : $this->config['orderby_dir'];\n        if (empty($order)) $order = 'title';\n        if (empty($dir)) $dir = 'ASC';\n        //FIXME bad sql statement needs to be a JOIN\n        $sql = 'SELECT * FROM ' . DB_TABLE_PREFIX . '_product as p,' . DB_TABLE_PREFIX . '_product_storeCategories as sc WHERE sc.product_id = p.id and p.is_featured=1 and sc.storecategories_id =' . $curcat->id;\n        $page = new expPaginator(array(\n            'model_field' => 'product_type',\n            'sql'         => $sql,\n            'limit'       => ecomconfig::getConfig('pagination_default'),\n            'order'       => $order,\n            'dir'         => $dir,\n            'page'        => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'  => $this->params['controller'],\n            'action'      => $this->params['action'],\n            'columns'     => array(\n                gt('Model #')      => 'model',\n                gt('Product Name') => 'title',\n                gt('Price')        => 'base_price'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page' => $page\n        ));\n    }\n\n    function showTopLevel() {\n        expHistory::set('viewable', $this->params);\n        $category = new storeCategory(null, false, false);\n        //$categories = $category->getEcomSubcategories();\n        $categories = $category->getTopLevel(null, false, true);\n        $ancestors = $this->category->pathToNode();\n        $curcat = $this->category;\n\n        assign_to_template(array(\n            'categories' => $categories,\n            'curcat'     => $curcat,\n            'topcat'     => @$ancestors[0]\n        ));\n    }\n\n    function showTopLevel_images() {\n        global $user;\n\n        expHistory::set('viewable', $this->params);\n        $count_sql_start = 'SELECT COUNT(DISTINCT p.id) as c FROM ' . DB_TABLE_PREFIX . '_product p ';\n        $sql_start = 'SELECT DISTINCT p.* FROM ' . DB_TABLE_PREFIX . '_product p ';\n        $sql = 'JOIN ' . DB_TABLE_PREFIX . '_product_storeCategories sc ON p.id = sc.product_id ';\n        $sql .= 'WHERE ';\n        if (!$user->isAdmin()) $sql .= '(p.active_type=0 OR p.active_type=1)'; //' AND ' ;\n        //$sql .= 'sc.storecategories_id IN (';\n        //$sql .= 'SELECT id FROM '.DB_TABLE_PREFIX.'_storeCategories WHERE rgt BETWEEN '.$this->category->lft.' AND '.$this->category->rgt.')';\n\n        $count_sql = $count_sql_start . $sql;\n        $sql = $sql_start . $sql;\n\n        $order = 'sc.rank'; //$this->config['orderby'];\n        $dir = 'ASC'; //$this->config['orderby_dir'];\n\n        $limit = !empty($this->config['limit']) ? $this->config['limit'] : 10;\n        $page = new expPaginator(array(\n            'model_field' => 'product_type',\n            'sql'         => $sql,\n            'count_sql'   => $count_sql,\n            'limit'       => !empty($this->config['pagination_default']) ? $this->config['pagination_default'] : $limit,\n            'order'       => $order,\n            'dir'         => $dir,\n            'page'        => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'  => $this->params['controller'],\n            'action'      => $this->params['action'],\n            'columns'     => array(\n                gt('Model #')      => 'model',\n                gt('Product Name') => 'title',\n                gt('Price')        => 'base_price'\n            ),\n        ));\n\n        $category = new storeCategory(null, false, false);\n        //$categories = $category->getEcomSubcategories();\n        $categories = $category->getTopLevel(null, false, true);\n        $ancestors = $this->category->pathToNode();\n        $curcat = $this->category;\n\n        assign_to_template(array(\n            'page'       => $page,\n            'categories' => $categories\n        ));\n    }\n\n    function showFullTree() {  //FIXME we also need a showFullTree_images method like above\n        expHistory::set('viewable', $this->params);\n        $category = new storeCategory(null, false, false);\n        //$categories = $category->getEcomSubcategories();\n        $categories = $category->getFullTree();\n        $ancestors = $this->category->pathToNode();\n        $curcat = $this->category;\n\n        assign_to_template(array(\n            'categories' => $categories,\n            'curcat'     => $curcat,\n            'topcat'     => @$ancestors[0]\n        ));\n    }\n\n    function ecomSearch() {\n\n    }\n\n    function billing_config() {\n\n    }\n\n    /**\n     * Add all products (products, event registrations, donations, & gift cards) to search index\n     *\n     * @return int\n     */\n    function addContentToSearch() {\n        global $db, $router;\n\n        $model = new $this->basemodel_name();\n\n        $total = $db->countObjects($model->table);\n\n        $count = 0;\n        for ($i = 0; $i < $total; $i += 100) {\n            $orderby = 'id LIMIT ' . ($i) . ', 100';\n            $content = $db->selectArrays($model->table, 'parent_id=0', $orderby);\n\n            foreach ($content as $cnt) {\n                $origid = $cnt['id'];\n                $prod = new product($cnt['id']);\n                unset($cnt['id']);\n                if (ecomconfig::getConfig('ecom_search_results') == '') {\n                    $cnt['title'] = (isset($prod->expFile['mainimage'][0]) ? '<img src=\"' . PATH_RELATIVE . 'thumb.php?id=' . $prod->expFile['mainimage'][0]->id . '&w=40&h=40&zc=1\" style=\"float:left;margin-right:5px;\" />' : '') . $cnt['title'] . (!empty($cnt['model']) ? ' - SKU#: ' . $cnt['model'] : '');\n                }\n\n//                $search_record = new search($cnt, false, false);\n               //build the search record and save it.\n                $sql = \"original_id=\" . $origid . \" AND ref_module='\" . $this->baseclassname . \"'\";\n                $oldindex = $db->selectObject('search', $sql);\n                if (!empty($oldindex)) {\n                    $search_record = new search($oldindex->id, false, false);\n                    $search_record->update($cnt);\n                } else {\n                    $search_record = new search($cnt, false, false);\n                }\n\n                $search_record->posted = empty($cnt['created_at']) ? null : $cnt['created_at'];\n                if ($cnt['product_type'] == 'giftcard') {\n                    $search_record->view_link = str_replace(URL_FULL, '', $router->makeLink(array('controller' => 'store', 'action' => 'showGiftCards')));\n                } else {\n//                    $search_record->view_link = str_replace(URL_FULL, '', $router->makeLink(array('controller' => $this->baseclassname, 'action' => 'show', 'title' => $cnt['sef_url'])));\n                    $search_record->view_link = str_replace(URL_FULL, '', $router->makeLink(array('controller' => $cnt['product_type'], 'action' => 'show', 'title' => $cnt['sef_url'])));\n                }\n//                $search_record->ref_module = 'store';\n                $search_record->ref_module  = $this->baseclassname;\n//                $search_record->ref_type = $this->basemodel_name;\n                $search_record->ref_type = $cnt['product_type'];\n//                $search_record->category = 'Products';\n                $prod = new $search_record->ref_type($origid);\n                $search_record->category = $prod->product_name;\n                if ($search_record->ref_type == 'eventregistration') {\n                    $search_record->title .= ' - ' . expDateTime::format_date($prod->eventdate);\n                }\n\n                $search_record->original_id = $origid;\n                //$search_record->location_data = serialize($this->loc);\n                $search_record->save();\n                $count++;\n            }\n        }\n        return $count;\n    }\n\n    function searchByModel() {\n        //do nothing...just show the view.\n    }\n\n    function edit() {\n        global $db;\n\n//        $expDefinableField = new expDefinableField();\n//        $definablefields = $expDefinableField->find('all','1','rank');\n\n        //Make sure that the view is the edit.tpl and not any ajax views\n        if (isset($this->params['view']) && $this->params['view'] == 'edit') {\n            expHistory::set('editable', $this->params);\n        }\n\n        // first we need to figure out what type of ecomm product we are dealing with\n        if (!empty($this->params['id'])) {\n            // if we have an id lets pull the product type from the products table.\n            $product_type = $db->selectValue('product', 'product_type', 'id=' . $this->params['id']);\n            if (empty($product_type)) redirect_to(array('controller' => 'store', 'action' => 'picktype'));\n        } else {\n            if (empty($this->params['product_type'])) redirect_to(array('controller' => 'store', 'action' => 'picktype'));\n            $product_type = $this->params['product_type'];\n        }\n\n        if (!empty($this->params['id'])) {\n            $record = new $product_type($this->params['id']);\n            if (!empty($this->user_input_fields) && !is_array($record->user_input_fields)) $record->user_input_fields = expUnserialize($record->user_input_fields);\n        } else {\n            $record = new $product_type();\n            $record->user_input_fields = array();\n        }\n\n//        if (!empty($this->params['parent_id']))\n\n        // get the product options and send them to the form\n        $editable_options = array();\n        //$og = new optiongroup();\n        $mastergroups = $db->selectExpObjects('optiongroup_master', null, 'optiongroup_master');\n        //eDebug($mastergroups,true);\n        foreach ($mastergroups as $mastergroup) {\n            // if this optiongroup_master has already been made into an option group for this product\n            // then we will grab that record now..if not, we will make a new one.\n            $grouprec = $db->selectArray('optiongroup', 'optiongroup_master_id=' . $mastergroup->id . ' AND product_id=' . $record->id);\n            //if ($mastergroup->id == 9) eDebug($grouprec,true);\n            //eDebug($grouprec);\n            if (empty($grouprec)) {\n                $grouprec['optiongroup_master_id'] = $mastergroup->id;\n                $grouprec['title'] = $mastergroup->title;\n                $group = new optiongroup($grouprec);\n            } else {\n                $group = new optiongroup($grouprec['id']);\n            }\n\n            $editable_options[$group->title] = $group;\n\n            if (empty($group->option)) {\n                foreach ($mastergroup->option_master as $optionmaster) {\n                    $opt = new option(array('title' => $optionmaster->title, 'option_master_id' => $optionmaster->id), false, false);\n                    $editable_options[$group->title]->options[] = $opt;\n                }\n\n            } else {\n                if (count($group->option) == count($mastergroup->option_master)) {\n                    $editable_options[$group->title]->options = $group->option;\n                } else {\n                    // check for any new options or deleted since the last time we edited this product\n                    foreach ($mastergroup->option_master as $optionmaster) {\n                        $opt_id = $db->selectValue('option', 'id', 'option_master_id=' . $optionmaster->id . \" AND product_id=\" . $record->id);\n                        if (empty($opt_id)) {\n                            $opt = new option(array('title' => $optionmaster->title, 'option_master_id' => $optionmaster->id), false, false);\n                        } else {\n                            $opt = new option($opt_id);\n                        }\n\n                        $editable_options[$group->title]->options[] = $opt;\n                    }\n                }\n            }\n            //eDebug($editable_options[$group->title]);\n        }\n        //die();\n\n        uasort($editable_options, array(\"optiongroup\", \"sortOptiongroups\"));\n\n        // get the shipping options and their methods\n//        $shipping = new shipping();\n//        foreach (shipping::listAvailableCalculators() as $calcid => $name) {\n        foreach (shipping::listCalculators() as $calcid => $name) {\n            // must make sure (custom) calculator exists\n            if (class_exists($name)) {\n                $calc = new $name($calcid);\n                $shipping_services[$calcid] = $calc->title;\n                $shipping_methods[$calcid] = $calc->availableMethods();\n            }\n        }\n\n#        eDebug($shipping_services);\n#        eDebug($shipping_methods);\n\n        if (!empty($this->params['product_type']) && ($this->params['product_type'] == \"product\" || $this->params['product_type'] == \"childProduct\")) {\n            //if new record and it's a child, then well set the child rank to be at the end\n            if (empty($record->id) && $record->isChild()) {\n                $record->child_rank = $db->max('product', 'child_rank', null, 'parent_id=' . $record->parent_id) + 1;\n            }\n            //eDebug($record,true);\n        }\n        $view = '';\n        $parent = null;\n        if ((isset($this->params['parent_id']) && empty($record->id))) {\n            //NEW child product\n            $view = 'edit';\n            $parent = new $product_type($this->params['parent_id'], false, true);\n            $record->parent_id = $this->params['parent_id'];\n        } elseif ((!empty($record->id) && $record->parent_id != 0)) {\n            //EDIT child product\n            $view = 'edit';\n            $parent = new $product_type($record->parent_id, false, true);\n        } else {\n            $view = 'edit';\n        }\n\n        $f = new forms();\n        $forms_list = array();\n        $forms_list[0] = '- '.gt('No User Input Required').' -';\n        $forms = $f->find('all', 'is_saved=1');\n        if (!empty($forms)) foreach ($forms as $frm) {\n            if (!$db->countObjects('eventregistration', 'forms_id='.$frm->id) || (!empty($record->forms_id) && $record->forms_id == $frm->id))\n                $forms_list[$frm->id] = $frm->title;\n        }\n\n        assign_to_template(array(\n            'record'            => $record,\n            'parent'            => $parent,\n            'form'              => $record->getForm($view),\n            'optiongroups'      => $editable_options,\n//            'definablefields'   => isset($definablefields) ? $definablefields : '',\n            'forms'=> $forms_list,\n            'shipping_services' => isset($shipping_services) ? $shipping_services : '', // Added implication since the shipping_services default value is a null\n            'shipping_methods'  => isset($shipping_methods) ? $shipping_methods : '', // Added implication since the shipping_methods default value is a null\n            'product_types'     => isset($this->config['product_types']) ? $this->config['product_types'] : ''\n            //'status_display'=>$status_display->getStatusArray()\n        ));\n    }\n\n    function copyProduct() {\n        global $db;\n\n        //expHistory::set('editable', $this->params);\n        $f = new forms();\n        $forms_list = array();\n        $forms_list[0] = '- '.gt('No User Input Required').' -';\n        $forms = $f->find('all', 'is_saved=1');\n        if (!empty($forms)) foreach ($forms as $frm) {\n            $forms_list[$frm->id] = $frm->title;\n        }\n\n        // first we need to figure out what type of ecomm product we are dealing with\n        if (!empty($this->params['id'])) {\n            // if we have an id lets pull the product type from the products table.\n            $product_type = $db->selectValue('product', 'product_type', 'id=' . $this->params['id']);\n        } else {\n            if (empty($this->params['product_type'])) redirect_to(array('controller' => 'store', 'action' => 'picktype'));\n            $product_type = $this->params['product_type'];\n        }\n\n        $record = new $product_type($this->params['id']);\n        // get the product options and send them to the form\n        $editable_options = array();\n\n        $mastergroups = $db->selectExpObjects('optiongroup_master', null, 'optiongroup_master');\n        foreach ($mastergroups as $mastergroup) {\n            // if this optiongroup_master has already been made into an option group for this product\n            // then we will grab that record now..if not, we will make a new one.\n            $grouprec = $db->selectArray('optiongroup', 'optiongroup_master_id=' . $mastergroup->id . ' AND product_id=' . $record->id);\n            //eDebug($grouprec);\n            if (empty($grouprec)) {\n                $grouprec['optiongroup_master_id'] = $mastergroup->id;\n                $grouprec['title'] = $mastergroup->title;\n                $group = new optiongroup($grouprec);\n            } else {\n                $group = new optiongroup($grouprec['id']);\n            }\n\n            $editable_options[$group->title] = $group;\n\n            if (empty($group->option)) {\n                foreach ($mastergroup->option_master as $optionmaster) {\n                    $opt = new option(array('title' => $optionmaster->title, 'option_master_id' => $optionmaster->id), false, false);\n                    $editable_options[$group->title]->options[] = $opt;\n                }\n            } else {\n                if (count($group->option) == count($mastergroup->option_master)) {\n                    $editable_options[$group->title]->options = $group->option;\n                } else {\n                    // check for any new options or deleted since the last time we edited this product\n                    foreach ($mastergroup->option_master as $optionmaster) {\n                        $opt_id = $db->selectValue('option', 'id', 'option_master_id=' . $optionmaster->id . \" AND product_id=\" . $record->id);\n                        if (empty($opt_id)) {\n                            $opt = new option(array('title' => $optionmaster->title, 'option_master_id' => $optionmaster->id), false, false);\n                        } else {\n                            $opt = new option($opt_id);\n                        }\n\n                        $editable_options[$group->title]->options[] = $opt;\n                    }\n                }\n            }\n        }\n\n        // get the shipping options and their methods\n//        $shipping = new shipping();\n//        foreach (shipping::listAvailableCalculators() as $calcid => $name) {\n        foreach (shipping::listCalculators() as $calcid => $name) {\n            if (class_exists($name)) {\n                $calc = new $name($calcid);\n                $shipping_services[$calcid] = $calc->title;\n                $shipping_methods[$calcid] = $calc->availableMethods();\n            }\n        }\n\n        $record->original_id = $record->id;\n        $record->original_model = $record->model;\n        $record->sef_url = NULL;\n        $record->previous_id = NULL;\n        $record->editor = NULL;\n\n        if ($record->isChild()) {\n            $record->child_rank = $db->max('product', 'child_rank', null, 'parent_id=' . $record->parent_id) + 1;\n        }\n\n        assign_to_template(array(\n            'copy'              => true,\n            'record'            => $record,\n            'parent'            => new $product_type($record->parent_id, false, true),\n            'form'              => $record->getForm($record->parent_id == 0 ? 'edit' : 'child_edit'),\n            'optiongroups'      => $editable_options,\n            'forms'=> $forms_list,\n            'shipping_services' => $shipping_services,\n            'shipping_methods'  => $shipping_methods\n        ));\n    }\n\n    function picktype() {\n        $prodfiles = storeController::getProductTypes();\n        $products = array();\n        foreach ($prodfiles as $filepath => $classname) {\n            $prodObj = new $classname();\n            $products[$classname] = $prodObj->product_name;\n        }\n        assign_to_template(array(\n            'product_types' => $products\n        ));\n    }\n\n    function update() {\n//        global $db;\n        //Get the product type\n        $product_type = isset($this->params['product_type']) ? $this->params['product_type'] : 'product';\n\n        $record = new $product_type();\n\n        $record->update($this->params);\n\n        if ($product_type == \"childProduct\" || $product_type == \"product\") {\n            $record->addContentToSearch();\n            //Create a flash message and redirect to the page accordingly\n            if ($record->parent_id != 0) {\n                $parent = new $product_type($record->parent_id, false, false);\n                if (isset($this->params['original_id'])) {\n                    flash(\"message\", gt(\"Child product saved.\"));\n                } else {\n                    flash(\"message\", gt(\"Child product copied and saved.\"));\n                }\n                redirect_to(array('controller' => 'store', 'action' => 'show', 'title' => $parent->sef_url));\n            } elseif (isset($this->params['original_id'])) {\n                flash(\"message\", gt(\"Product copied and saved. You are now viewing your new product.\"));\n            } else {\n                flash(\"message\", gt(\"Product saved.\"));\n            }\n            redirect_to(array('controller' => 'store', 'action' => 'show', 'title' => $record->sef_url));\n        } elseif ($product_type == \"giftcard\") {\n            flash(\"message\", gt(\"Giftcard saved.\"));\n            redirect_to(array('controller' => 'store', 'action' => 'manage'));\n        } elseif ($product_type == \"eventregistration\") {\n            //FIXME shouldn't event registrations be added to search index?\n//            $record->addContentToSearch();  //FIXME there is NO eventregistration::addContentToSearch() method\n            flash(\"message\", gt(\"Event saved.\"));\n            redirect_to(array('controller' => 'store', 'action' => 'manage'));\n        } elseif ($product_type == \"donation\") {\n            flash(\"message\", gt(\"Donation saved.\"));\n            redirect_to(array('controller' => 'store', 'action' => 'manage'));\n        }\n    }\n\n    function delete() {\n        global $db;\n\n        if (empty($this->params['id'])) return false;\n        $product_type = $db->selectValue('product', 'product_type', 'id=' . $this->params['id']);\n        $product = new $product_type($this->params['id'], true, false);\n        //eDebug($product_type);\n        //eDebug($product, true);\n        //if (!empty($product->product_type_id)) {\n        //$db->delete($product_type, 'id='.$product->product_id);\n        //}\n\n        $db->delete('option', 'product_id=' . $product->id . \" AND optiongroup_id IN (SELECT id from \" . $db->prefix . \"optiongroup WHERE product_id=\" . $product->id . \")\");\n        $db->delete('optiongroup', 'product_id=' . $product->id);\n        //die();\n        $db->delete('product_storeCategories', 'product_id=' . $product->id . ' AND product_type=\"' . $product_type . '\"');\n\n        if ($product->product_type == \"product\") {\n            if ($product->hasChildren()) {\n                $this->deleteChildren();\n            }\n        }\n\n        $product->delete();\n\n        flash('message', gt('Product deleted successfully.'));\n        expHistory::back();\n    }\n\n    function quicklinks() {\n        global $order;\n\n        $oicount = !empty($order->item_count) ? $order->item_count : 0;\n        //eDebug($itemcount);\n        assign_to_template(array(\n            \"oicount\" => $oicount,\n        ));\n    }\n\n    public static function getProductTypes() {\n        $paths = array(\n            BASE . 'framework/modules/ecommerce/products/models',\n        );\n\n        $products = array();\n        foreach ($paths as $path) {\n            if (is_readable($path)) {\n                $dh = opendir($path);\n                while (($file = readdir($dh)) !== false) {\n                    if (is_readable($path . '/' . $file) && substr($file, -4) == '.php' && $file != 'childProduct.php') {\n                        $classname = substr($file, 0, -4);\n                        $products[$path . '/' . $file] = $classname;\n                    }\n                }\n            }\n        }\n\n        return $products;\n    }\n\n    function metainfo() {\n        global $router;\n\n        if (empty($router->params['action'])) return array();\n\n        // figure out what metadata to pass back based on the action we are in.\n        $action = $router->params['action'];\n        $metainfo = array('title'=>'', 'keywords'=>'', 'description'=>'', 'canonical'=> '', 'noindex' => false, 'nofollow' => false);\n        $storename = ecomconfig::getConfig('storename');\n        switch ($action) {\n            case 'showall': //category page\n                $cat = $this->category;\n                if (!empty($cat)) {\n                    $metainfo['title'] = empty($cat->meta_title) ? $cat->title . ' ' . gt('Products') . ' - ' . $storename : $cat->meta_title;\n                    $metainfo['keywords'] = empty($cat->meta_keywords) ? $cat->title : strip_tags($cat->meta_keywords);\n                    $metainfo['description'] = empty($cat->meta_description) ? strip_tags($cat->body) : strip_tags($cat->meta_description);\n                    $metainfo['canonical'] = empty($cat->canonical) ? $router->plainPath() : strip_tags($cat->canonical);\n                    $metainfo['noindex'] = empty($cat->meta_noindex) ? false : $cat->meta_noindex;\n                    $metainfo['nofollow'] = empty($cat->meta_nofollow) ? false : $cat->meta_nofollow;\n                }\n                break;\n            case 'show':\n            case 'showByTitle':\n                $prod = new product(isset($router->params['title']) ? expString::sanitize($router->params['title']) : intval($router->params['id']));\n                if (!empty($prod)) {\n                    $metainfo['title'] = empty($prod->meta_title) ? $prod->title . \" - \" . $storename : $prod->meta_title;\n                    $metainfo['keywords'] = empty($prod->meta_keywords) ? $prod->title : strip_tags($prod->meta_keywords);\n                    $metainfo['description'] = empty($prod->meta_description) ? strip_tags($prod->body) : strip_tags($prod->meta_description);\n                    $metainfo['canonical'] = empty($prod->canonical) ? $router->plainPath() : strip_tags($prod->canonical);\n                    $metainfo['noindex'] = empty($prod->meta_noindex) ? false : $prod->meta_noindex;\n                    $metainfo['nofollow'] = empty($prod->meta_nofollow) ? false : $prod->meta_nofollow;\n                    if (!empty($prod->expFile['mainimage'][0]) && file_exists(BASE.$prod->expFile['mainimage'][0]->directory.$prod->expFile['mainimage'][0]->filename)) {\n                        $metainfo['rich'] = '<!--\n        <PageMap>\n            <DataObject type=\"thumbnail\">\n                <Attribute name=\"src\" value=\"'.$prod->expFile['mainimage'][0]->url.'\"/>\n                <Attribute name=\"width\" value=\"'.$prod->expFile['mainimage'][0]->image_width.'\"/>\n                <Attribute name=\"height\" value=\"'.$prod->expFile['mainimage'][0]->image_width.'\"/>\n            </DataObject>\n        </PageMap>\n    -->';\n                    }\n                    $metainfo['fb']['type'] = 'product';\n                    $metainfo['fb']['title'] =  substr(empty($prod->meta_fb['title']) ? $prod->title : $prod->meta_fb['title'], 0, 87);\n                    $metainfo['fb']['description'] = substr(empty($prod->meta_fb['description']) ? $metainfo['description'] : $prod->meta_fb['description'], 0, 199);\n                    $metainfo['fb']['url'] = empty($prod->meta_fb['url']) ? $metainfo['canonical'] : $prod->meta_fb['url'];\n                    $metainfo['fb']['image'] = empty($prod->meta_fb['fbimage'][0]) ? '' : $prod->meta_fb['fbimage'][0]->url;\n                    if (empty($metainfo['fb']['image'])) {\n                        if (!empty($prod->expFile['mainimage'][0]))\n                            $metainfo['fb']['image'] = $prod->expFile['mainimage'][0]->url;\n                        if (empty($metainfo['fb']['image']))\n                            $metainfo['fb']['image'] = URL_BASE . '/framework/modules/ecommerce/assets/images/no-image.jpg';\n                    }\n                    break;\n                }\n            default:\n                $metainfo['title'] = gt(\"Shopping\") . \" - \" . $storename;\n                $metainfo['keywords'] = SITE_KEYWORDS;\n                $metainfo['description'] = SITE_DESCRIPTION;\n        }\n\n        // Remove any quotes if there are any.\n//        $metainfo['title'] = expString::parseAndTrim($metainfo['title'], true);\n//        $metainfo['description'] = expString::parseAndTrim($metainfo['description'], true);\n//        $metainfo['keywords'] = expString::parseAndTrim($metainfo['keywords'], true);\n//        $metainfo['canonical'] = expString::parseAndTrim($metainfo['canonical'], true);\n//        $metainfo['noindex'] = expString::parseAndTrim($metainfo['noindex'], true);\n//        $metainfo['nofollow'] = expString::parseAndTrim($metainfo['nofollow'], true);\n\n        return $metainfo;\n    }\n\n    /**\n     * Configure the module\n     */\n    public function configure() {\n        if (empty($this->config['enable_ratings_and_reviews'])) {\n            $this->remove_configs[] = 'comments';\n        }\n        parent::configure();\n    }\n\n    public function deleteChildren() {\n        //eDebug($data[0],true);\n        //if($id!=null) $this->params['id'] = $id;\n        //eDebug($this->params,true);\n        $product = new product($this->params['id']);\n        //$product = $product->find(\"first\", \"previous_id =\" . $previous_id);\n        //eDebug($product, true);\n        if (empty($product->id)) // || empty($product->previous_id))\n        {\n            flash('error', gt('There was an error deleting the child products.'));\n            expHistory::back();\n        }\n        $childrenToDelete = $product->find('all', 'parent_id=' . $product->id);\n        foreach ($childrenToDelete as $ctd) {\n            //fwrite($lfh, \"Deleting:\" . $ctd->id . \"\\n\");\n            $ctd->delete();\n        }\n    }\n\n    function searchByModelForm() {\n        // get the search terms\n        $terms = $this->params['search_string'];\n\n        $sql = \"model like '%\" . $terms . \"%'\";\n\n        $limit = !empty($this->config['limit']) ? $this->config['limit'] : 10;\n        $page = new expPaginator(array(\n            'model'      => 'product',\n            'where'      => $sql,\n            'limit'      => !empty($this->config['pagination_default']) ? $this->config['pagination_default'] : $limit,\n            'order'      => 'title',\n            'dir'        => 'DESC',\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller' => $this->params['controller'],\n            'action'     => $this->params['action'],\n            'columns'    => array(\n                gt('Model #')      => 'model',\n                gt('Product Name') => 'title',\n                gt('Price')        => 'base_price'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page'  => $page,\n            'terms' => $terms\n        ));\n    }\n\n    /**\n     * AJAX search for products by model/sku\n     */\n\n    function search_by_model() {\n        global $db, $user;\n\n        $sql = \"select DISTINCT(p.id) as id, p.title, model from \" . $db->prefix . \"product as p WHERE \";\n        if (!($user->isAdmin())) $sql .= '(p.active_type=0 OR p.active_type=1) AND ';\n\n        //if first character of search is a -, then we do a wild card, else from beginning\n        if ($this->params['query'][0] == '-') {\n            $sql .= \" p.model LIKE '%\" . $this->params['query'];\n        } else {\n            $sql .= \" p.model LIKE '\" . $this->params['query'];\n        }\n\n        $sql .= \"%' AND p.parent_id=0 GROUP BY p.id \";\n        $sql .= \"order by p.model ASC LIMIT 30\";\n        $res = $db->selectObjectsBySql($sql);\n        //eDebug($sql);\n        $ar = new expAjaxReply(200, gt('Here\\'s the items you wanted'), $res);\n        $ar->send();\n    }\n\n    /**\n     * AJAX search for products by title, description, or model/sku\n     *\n     */\n    public function search() {\n        global $db, $user;\n\n        if (SAVE_SEARCH_QUERIES && INCLUDE_AJAX_SEARCH == 1) {  // only to add search query record\n            $qry = trim($this->params['query']);\n            if (!empty($qry)) {\n                if (INCLUDE_ANONYMOUS_SEARCH == 1 || $user->id <> 0) {\n                    $queryObj = new stdClass();\n                    $queryObj->user_id = $user->id;\n                    $queryObj->query = $qry;\n                    $queryObj->timestamp = time();\n\n                    $db->insertObject($queryObj, 'search_queries');\n                }\n            }\n        }\n        //$this->params['query'] = str_ireplace('-','\\-',$this->params['query']);\n        $terms = explode(\" \", $this->params['query']);\n        $search_type = ecomconfig::getConfig('ecom_search_results');\n\n        // look for term in full text search\n        $sql = \"select DISTINCT(p.id) as id, p.title, model, sef_url, f.id as fileid, match (p.title,p.body) against ('\" . $this->params['query'] . \"*' IN BOOLEAN MODE) as score \";\n        $sql .= \"  from \" . $db->prefix . \"product as p LEFT JOIN \" .\n            $db->prefix . \"content_expFiles as cef ON p.id=cef.content_id AND cef.content_type IN ('product','eventregistration','donation','giftcard') AND cef.subtype='mainimage' LEFT JOIN \" . $db->prefix .\n            \"expFiles as f ON cef.expFiles_id = f.id WHERE \";\n        if (!($user->isAdmin())) $sql .= '(p.active_type=0 OR p.active_type=1) AND ';\n        if ($search_type == 'products') $sql .= 'product_type = \"product\" AND ';\n        $sql .= \" match (p.title,p.body) against ('\" . $this->params['query'] . \"*' IN BOOLEAN MODE) AND p.parent_id=0  GROUP BY p.id \";\n        $sql .= \"order by score desc LIMIT 10\";\n\n        $firstObs = $db->selectObjectsBySql($sql);\n        foreach ($firstObs as $set) {\n            $set->weight = 1;\n            unset($set->score);\n            $index = !empty($set->model) ? $set->model : $set->sef_url;\n            $res[$index] = $set;\n        }\n\n        // look for specific term in fields\n        $sql = \"select DISTINCT(p.id) as id, p.title, model, sef_url, f.id as fileid  from \" . $db->prefix . \"product as p LEFT JOIN \" .\n            $db->prefix . \"content_expFiles as cef ON p.id=cef.content_id AND cef.content_type IN ('product','eventregistration','donation','giftcard') AND cef.subtype='mainimage' LEFT JOIN \" . $db->prefix .\n            \"expFiles as f ON cef.expFiles_id = f.id WHERE \";\n        if (!($user->isAdmin())) $sql .= '(p.active_type=0 OR p.active_type=1) AND ';\n        if ($search_type == 'products') $sql .= 'product_type = \"product\" AND ';\n        $sql .= \" (p.model like '%\" . $this->params['query'] . \"%' \";\n        $sql .= \" OR p.title like '%\" . $this->params['query'] . \"%') \";\n        $sql .= \" AND p.parent_id=0 GROUP BY p.id LIMIT 10\";\n\n        $secondObs = $db->selectObjectsBySql($sql);\n        foreach ($secondObs as $set) {\n            $set->weight = 2;\n            $index = !empty($set->model) ? $set->model : $set->sef_url;\n            $res[$index] = $set;\n        }\n\n        // look for begins with term in fields\n        $sql = \"select DISTINCT(p.id) as id, p.title, model, sef_url, f.id as fileid  from \" . $db->prefix . \"product as p LEFT JOIN \" .\n            $db->prefix . \"content_expFiles as cef ON p.id=cef.content_id AND cef.content_type IN ('product','eventregistration','donation','giftcard') AND cef.subtype='mainimage' LEFT JOIN \" . $db->prefix .\n            \"expFiles as f ON cef.expFiles_id = f.id WHERE \";\n        if (!($user->isAdmin())) $sql .= '(p.active_type=0 OR p.active_type=1) AND ';\n        if ($search_type == 'products') $sql .= 'product_type = \"product\" AND ';\n        $sql .= \" (p.model like '\" . $this->params['query'] . \"%' \";\n        $sql .= \" OR p.title like '\" . $this->params['query'] . \"%') \";\n        $sql .= \" AND p.parent_id=0 GROUP BY p.id LIMIT 10\";\n\n        $thirdObs = $db->selectObjectsBySql($sql);\n        foreach ($thirdObs as $set) {\n            if (strcmp(strtolower(trim($this->params['query'])), strtolower(trim($set->model))) == 0)\n                $set->weight = 10;\n            else if (strcmp(strtolower(trim($this->params['query'])), strtolower(trim($set->title))) == 0)\n                $set->weight = 9;\n            else\n                $set->weight = 3;\n\n            $index = !empty($set->model) ? $set->model : $set->sef_url;\n            $res[$index] = $set;\n        }\n\n        function sortSearch($a, $b) {\n            return ($a->weight == $b->weight ? 0 : ($a->weight < $b->weight) ? 1 : -1);\n        }\n\n        if (count($terms)) {\n            foreach ($res as $r) {\n                $index = !empty($r->model) ? $r->model : $r->sef_url;\n                foreach ($terms as $term) {\n                    if (stristr($r->title, $term)) $res[$index]->weight = $res[$index]->weight + 1;\n                }\n            }\n        }\n        usort($res, 'sortSearch');\n\n        $ar = new expAjaxReply(200, gt('Here\\'s the items you wanted'), $res);\n        $ar->send();\n    }\n\n    /**\n     * AJAX search for products by title, description, or model/sku\n     *\n     */\n    public function searchNew() {\n        global $db, $user;\n        //$this->params['query'] = str_ireplace('-','\\-',$this->params['query']);\n        $sql = \"select DISTINCT(p.id) as id, p.title, model, sef_url, f.id as fileid, \";\n        $sql .= \"match (p.title,p.model,p.body) against ('\" . $this->params['query'] . \"*' IN BOOLEAN MODE) as relevance, \";\n        $sql .= \"CASE when p.model like '\" . $this->params['query'] . \"%' then 1 else 0 END as modelmatch, \";\n        $sql .= \"CASE when p.title like '%\" . $this->params['query'] . \"%' then 1 else 0 END as titlematch \";\n        $sql .= \"from \" . $db->prefix . \"product as p INNER JOIN \" .\n            $db->prefix . \"content_expFiles as cef ON p.id=cef.content_id AND cef.content_type IN ('product','eventregistration','donation','giftcard') AND cef.subtype='mainimage'  INNER JOIN \" . $db->prefix .\n            \"expFiles as f ON cef.expFiles_id = f.id WHERE \";\n        if (!$user->isAdmin()) $sql .= '(p.active_type=0 OR p.active_type=1) AND ';\n        $sql .= \" match (p.title,p.model,p.body) against ('\" . $this->params['query'] . \"*' IN BOOLEAN MODE) AND p.parent_id=0 \";\n        $sql .= \" HAVING relevance > 0 \";\n        //$sql .= \"GROUP BY p.id \";\n        $sql .= \"order by modelmatch,titlematch,relevance desc LIMIT 10\";\n\n        eDebug($sql);\n        $res = $db->selectObjectsBySql($sql);\n        eDebug($res, true);\n        $ar = new expAjaxReply(200, gt('Here\\'s the items you wanted'), $res);\n        $ar->send();\n    }\n\n    function batch_process() {\n        $os = new order_status();\n        $oss = $os->find('all',1,'rank');\n        $order_status = array();\n        $order_status[-1] = '';\n        foreach ($oss as $status) {\n            $order_status[$status->id] = $status->title;\n        }\n        assign_to_template(array(\n            'order_status' => $order_status\n        ));\n    }\n\n    function process_orders() {\n        /*\n          Testing\n        */\n        /*echo \"Here?\";\n        $inv = 30234;\n        $req = 'a29f9shsgh32hsf80s7';\n        $amt = 101.00;\n        for($count=1;$count<=25;$count+=2)\n        {\n            $data[2] = $inv + $count;\n            $amt += $count*$count;\n            $successSet[$count]['message'] = \"Sucessfully imported row \" . $count . \", order: \" . $data[2] . \"<br/>\";\n            $successSet[$count]['order_id'] = $data[2];\n            $successSet[$count]['amount'] = $amt;\n            $successSet[$count]['request_id'] = $req;\n            $successSet[$count]['reference_id'] = $req;\n            $successSet[$count]['authorization_code'] = $req;\n            $successSet[$count]['shipping_tracking_number'] = '1ZNF453937547';\n            $successSet[$count]['carrier'] = 'UPS';\n        }\n        for($count=2;$count<=25;$count+=2)\n        {\n            $data[2] = $inv + $count;\n            $amt += $count*$count;\n            $errorSet[$count]['error_code'] = '42';\n            $errorSet[$count]['message'] = \"No go for some odd reason. Try again.\";\n            $errorSet[$count]['order_id'] = $data[2];\n            $errorSet[$count]['amount'] = $amt;\n        }\n\n        assign_to_template(array('errorSet'=>$errorSet, 'successSet'=>$successSet));\n        return;*/\n\n        ###########\n\n        global $db;\n        $template = expTemplate::get_template_for_action(new orderController(), 'setStatus', $this->loc);\n\n        //eDebug($_FILES);\n        //eDebug($this->params,true);\n        set_time_limit(0);\n        //$file = new expFile($this->params['expFile']['batch_process_upload'][0]);\n        if (!empty($_FILES['batch_upload_file']['error'])) {\n            flash('error', gt('There was an error uploading your file.  Please try again.'));\n            redirect_to(array('controller' => 'store', 'action' => 'batch_process'));\n//            $this->batch_process();\n        }\n\n        $file = new stdClass();\n        $file->path = $_FILES['batch_upload_file']['tmp_name'];\n        echo \"Validating file...<br/>\";\n\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $checkhandle = fopen($file->path, \"r\");\n        // read in the header line\n        $checkdata = fgetcsv($checkhandle, 10000, \",\");\n        $fieldCount = count($checkdata);\n        $count = 1;\n        // read in the data lines\n        while (($checkdata = fgetcsv($checkhandle, 10000, \",\")) !== FALSE) {\n            $count++;\n            if (count($checkdata) != $fieldCount) {\n                echo \"Line \" . $count . \" of your CSV import file does not contain the correct number of columns.<br/>\";\n                echo \"Found \" . $fieldCount . \" header fields, but only \" . count($checkdata) . \" field in row \" . $count . \" Please check your file and try again.\";\n                exit();\n            }\n        }\n        fclose($checkhandle);\n        ini_set('auto_detect_line_endings',$line_end);\n\n        echo \"<br/>CSV File passed validation...<br/><br/>Detecting carrier type....<br/>\";\n        //exit();\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $handle = fopen($file->path, \"r\");\n\n        // read in the header line\n        $data = fgetcsv($handle, 10000, \",\");\n        //eDebug($data);\n//        $dataset = array();\n        $carrier = '';\n        if (trim($data[0]) == 'ShipmentInformationShipmentID') {\n            echo \"Detected UPS file...<br/>\";\n            $carrier = \"UPS\";\n            $carrierTrackingLink = \"http://wwwapps.ups.com/WebTracking/track?track=yes&trackNums=\";\n        } elseif (trim($data[0]) == 'PIC') {\n            echo \"Detected United States Post Service file...<br/>\";\n            $carrier = \"USPS\";\n            $carrierTrackingLink = \"https://tools.usps.com/go/TrackConfirmAction_input?qtc_tLabels1=\";\n        }\n\n        //eDebug($carrier);\n        $count = 1;\n        $errorSet = array();\n        $successSet = array();\n\n        $oo = new order();\n\n        // read in the data lines\n        while (($data = fgetcsv($handle, 10000, \",\")) !== FALSE) {\n            $count++;\n            $originalOrderId = $data[2];\n            $data[2] = intval($data[2]);\n            $order = new stdClass();\n            $bm = new stdClass();\n            $transactionState = null;\n\n            //check for valid order number - if not present or not order, fail and continue with next record\n            if (isset($data[2]) && !empty($data[2])) {\n                $order = $oo->findBy('invoice_id', $data[2]);\n                if (empty($order->id)) {\n                    $errorSet[$count]['message'] = $originalOrderId . \" is not a valid order in this system.\";\n                    $errorSet[$count]['order_id'] = $originalOrderId;\n                    continue;\n                }\n            } else {\n                $errorSet[$count]['message'] = \"Row \" . $count . \" has no order number.\";\n                $errorSet[$count]['order_id'] = \"N/A\";\n                continue;\n            }\n\n            /*we have a valid order, so let's see what we can do: */\n\n            //set status of order to var\n            $currentStat = $order->order_status;\n            //eDebug($currentStat,true);\n\n            //-- check the order for a closed status - if so, do NOT process or set shipping\n            if ($currentStat->treat_as_closed == true) {\n                $errorSet[$count]['message'] = \"This is currently a closed order. Not processing.\";\n                $errorSet[$count]['order_id'] = $data[2];\n                continue;\n            }\n\n            //ok, if we made it here we have a valid order that is \"open\"\n            //we'll try to capture the transaction if it's in an authorized state, but set shipping regardless\n            if (isset($order->billingmethod[0])) {\n                $bm = $order->billingmethod[0];\n                $transactionState = $bm->transaction_state;\n            } else {\n                $bm = null;\n                $transactionState = '';\n            }\n\n            if ($transactionState == 'authorized') {\n                //eDebug($order,true);\n                $calc = $bm->billingcalculator->calculator;\n                $calc->config = $bm->billingcalculator->config;\n                if (method_exists($calc, 'delayed_capture')) {\n                    //$result = $calc->delayed_capture($bm,$bm->billing_cost);\n                    $result = $calc->delayed_capture($bm, $order->grand_total, $order);\n                    if ($result->errorCode == 0) {\n                        //we've succeeded.  transaction already created and billing info updated.\n                        //just need to set the order shipping info, check and see if we send user an email, and set statuses.\n                        //shipping info:\n                        $successSet[$count]['order_id'] = $data[2];\n                        $successSet[$count]['message'] = \"Sucessfully captured order \" . $data[2] . \" and set shipping information.\";\n                        $successSet[$count]['amount'] = $order->grand_total;\n                        $successSet[$count]['request_id'] = $result->request_id;\n                        $successSet[$count]['reference_id'] = $result->PNREF;\n                        $successSet[$count]['authorization_code'] = $result->AUTHCODE;\n                        $successSet[$count]['shipping_tracking_number'] = $data[0];\n                        $successSet[$count]['carrier'] = $carrier;\n                    } else {\n                        //failed capture, so we report the error but still set the shipping information\n                        //because it's already out the door\n                        //$failMessage = \"Attempted to delay capture order \" . $data[2] . \" and it failed with the following error: \" . $result->errorCode . \" - \" .$result->message;\n                        //if the user seelected to set a different status for failed orders, set it here.\n                        /*if(isset($this->params['order_status_fail'][0]) && $this->params['order_status_fail'][0] > -1)\n                        {\n                            $change = new order_status_changes();\n                            // save the changes\n                            $change->from_status_id = $order->order_status_id;\n                            //$change->comment = $this->params['comment'];\n                            $change->to_status_id = $this->params['order_status_fail'][0];\n                            $change->orders_id = $order->id;\n                            $change->save();\n\n                            // update the status of the order\n                            $order->order_status_id = $this->params['order_status_fail'][0];\n                            $order->save();\n                        }*/\n                        $errorSet[$count]['error_code'] = $result->errorCode;\n                        $errorSet[$count]['message'] = \"Capture failed: \" . $result->message . \"<br/>Setting shipping information.\";\n                        $errorSet[$count]['order_id'] = $data[2];\n                        $errorSet[$count]['amount'] = $order->grand_total;\n                        $errorSet[$count]['shipping_tracking_number'] = $data[0];\n                        $errorSet[$count]['carrier'] = $carrier;\n                        //continue;\n                    }\n                } else {\n                    //dont suppose we do anything here, as it may be set to approved manually\n                    //$errorSet[$count] = \"Order \" . $data[2] . \" does not use a billing method with delayed capture ability.\";\n                    $successSet[$count]['message'] = 'No capture processing available for order:' . $data[2] . '. Setting shipping information.';\n                    $successSet[$count]['order_id'] = $data[2];\n                    $successSet[$count]['amount'] = $order->grand_total;\n                    $successSet[$count]['shipping_tracking_number'] = $data[0];\n                    $successSet[$count]['carrier'] = $carrier;\n                }\n            } //if we hit this else, it means we have an order that is not in an authorized state\n            //so we do not try to process it = still set shipping though.  //FIXME what about 'complete'?\n            else {\n                $successSet[$count]['message'] = 'No processing necessary for order:' . $data[2] . '. Setting shipping information.';\n                $successSet[$count]['order_id'] = $data[2];\n                $successSet[$count]['amount'] = $order->grand_total;\n                $successSet[$count]['shipping_tracking_number'] = $data[0];\n                $successSet[$count]['carrier'] = $carrier;\n            }\n\n            $order->shipped = time();\n            $order->shipping_tracking_number = $data[0];\n            $order->save();\n\n            $s = array_pop($order->shippingmethods);\n            $sm = new shippingmethod($s->id);\n            $sm->carrier = $carrier;\n            $sm->save();\n\n            //statuses and email\n            if (isset($this->params['order_status_success'][0]) && $this->params['order_status_success'][0] > -1) {\n                $change = new order_status_changes();\n                // save the changes\n                $change->from_status_id = $order->order_status_id;\n                //$change->comment = $this->params['comment'];\n                $change->to_status_id = $this->params['order_status_success'][0];\n                $change->orders_id = $order->id;\n                $change->save();\n\n                // update the status of the order\n                $order->order_status_id = $this->params['order_status_success'][0];\n                $order->save();\n\n                // email the user if we need to\n                if (!empty($this->params['email_customer'])) {\n                    $email_addy = $order->billingmethod[0]->email;\n                    if (!empty($email_addy)) {\n                        $from_status = $db->selectValue('order_status', 'title', 'id=' . $change->from_status_id);\n                        $to_status = $db->selectValue('order_status', 'title', 'id=' . $change->to_status_id);\n//                        $template->assign(\n                        assign_to_template(\n                            array(\n                                'comment'          => $change->comment,\n                                'to_status'        => $to_status,\n                                'from_status'      => $from_status,\n                                'order'            => $order,\n                                'date'             => date(\"F j, Y, g:i a\"),\n                                'storename'        => ecomconfig::getConfig('storename'),\n                                'include_shipping' => true,\n                                'tracking_link'    => $carrierTrackingLink . $order->shipping_tracking_number,\n                                'carrier'          => $carrier\n                            )\n                        );\n\n                        $html = $template->render();\n                        $html .= ecomconfig::getConfig('ecomfooter');\n\n                        $from = array(ecomconfig::getConfig('from_address') => ecomconfig::getConfig('from_name'));\n                        if (empty($from[0])) $from = SMTP_FROMADDRESS;\n                        try {\n                            $mail = new expMail();\n                            $mail->quickSend(array(\n                                'html_message' => $html,\n                                'text_message' => str_replace(\"<br>\", \"\\r\\n\", $template->render()),\n                                'to'           => array($email_addy => $order->billingmethod[0]->firstname . ' ' . $order->billingmethod[0]->lastname),\n                                'from'         => $from,\n                                'subject'      => 'Your Order Has Been Shipped (#' . $order->invoice_id . ') - ' . ecomconfig::getConfig('storename')\n                            ));\n                        } catch (Exception $e) {\n                            //do nothing for now\n                            eDebug(\"Email error:\");\n                            eDebug($e);\n                        }\n                    }\n                    //else {\n                    //    $errorSet[$count]['message'] .= \"<br/>Order \" . $data[2] . \" was captured successfully, however the email notification was not successful.\";\n                    //}\n                }\n            }\n\n            //eDebug($product);\n        }\n        fclose($handle);\n        ini_set('auto_detect_line_endings',$line_end);\n\n        assign_to_template(array(\n            'errorSet'   => $errorSet,\n            'successSet' => $successSet\n        ));\n    }\n\n    function manage_sales_reps() {\n\n    }\n\n    function showHistory() {\n        $h = new expHistory();\n//        echo \"<xmp>\";\n        echo \"<pre>\";\n        print_r($h);\n//        echo \"</xmp>\";\n        echo \"</pre>\";\n    }\n\n    function import_external_addresses() {\n        $sources = array('mc' => 'MilitaryClothing.com', 'nt' => 'NameTapes.com', 'am' => 'Amazon');\n        assign_to_template(array(\n            'sources' => $sources\n        ));\n    }\n\n    function process_external_addresses() {\n        global $db;\n        set_time_limit(0);\n        //$file = new expFile($this->params['expFile']['batch_process_upload'][0]);\n        eDebug($this->params);\n//        eDebug($_FILES,true);\n        if (!empty($_FILES['address_csv']['error'])) {\n            flash('error', gt('There was an error uploading your file.  Please try again.'));\n            redirect_to(array('controller' => 'store', 'action' => 'import_external_addresses'));\n//            $this->import_external_addresses();\n        }\n\n        $file = new stdClass();\n        $file->path = $_FILES['address_csv']['tmp_name'];\n        echo \"Validating file...<br/>\";\n\n        //replace tabs with commas\n        /*if($this->params['type_of_address'][0] == 'am')\n        {\n            $checkhandle = fopen($file->path, \"w\");\n            $oldFile = file_get_contents($file->path);\n            $newFile = str_ireplace(chr(9),',',$oldFile);\n            fwrite($checkhandle,$newFile);\n            fclose($checkhandle);\n        }*/\n\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $checkhandle = fopen($file->path, \"r\");\n        if ($this->params['type_of_address'][0] == 'am') {\n            // read in the header line\n            $checkdata = fgetcsv($checkhandle, 10000, \"\\t\");\n            $fieldCount = count($checkdata);\n        } else {\n            // read in the header line\n            $checkdata = fgetcsv($checkhandle, 10000, \",\");\n            $fieldCount = count($checkdata);\n        }\n\n        $count = 1;\n        if ($this->params['type_of_address'][0] == 'am') {\n            // read in the data lines\n            while (($checkdata = fgetcsv($checkhandle, 10000, \"\\t\")) !== FALSE) {\n                $count++;\n                //eDebug($checkdata);\n                if (count($checkdata) != $fieldCount) {\n                    echo \"Line \" . $count . \" of your CSV import file does not contain the correct number of columns.<br/>\";\n                    echo \"Found \" . $fieldCount . \" header fields, but only \" . count($checkdata) . \" field in row \" . $count . \" Please check your file and try again.\";\n                    exit();\n                }\n            }\n        } else {\n            // read in the data lines\n            while (($checkdata = fgetcsv($checkhandle, 10000, \",\")) !== FALSE) {\n                $count++;\n                if (count($checkdata) != $fieldCount) {\n                    echo \"Line \" . $count . \" of your CSV import file does not contain the correct number of columns.<br/>\";\n                    echo \"Found \" . $fieldCount . \" header fields, but only \" . count($checkdata) . \" field in row \" . $count . \" Please check your file and try again.\";\n                    exit();\n                }\n            }\n        }\n\n        fclose($checkhandle);\n        ini_set('auto_detect_line_endings',$line_end);\n\n        echo \"<br/>CSV File passed validation...<br/><br/>Importing....<br/><br/>\";\n        //exit();\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $handle = fopen($file->path, \"r\");\n\n        // read in the header line and discard it\n        $data = fgetcsv($handle, 10000, \",\");\n        //eDebug($data);\n//        $dataset = array();\n\n        //mc=1, nt=2, amm=3\n\n        if ($this->params['type_of_address'][0] == 'mc') {\n            //militaryclothing\n            $db->delete('external_addresses', 'source=1');\n\n        } else if ($this->params['type_of_address'][0] == 'nt') {\n            //nametapes\n            $db->delete('external_addresses', 'source=2');\n        } else if ($this->params['type_of_address'][0] == 'am') {\n            //amazon\n            $db->delete('external_addresses', 'source=3');\n        }\n\n        if ($this->params['type_of_address'][0] == 'am') {\n            // read in the data lines\n            while (($data = fgetcsv($handle, 10000, \"\\t\")) !== FALSE) {\n                //eDebug($data,true);\n                $extAddy = new external_address();\n\n                //eDebug($data);\n                $extAddy->source = 3;\n                $extAddy->user_id = 0;\n                $name = explode(' ', $data[15]);\n                $extAddy->firstname = $name[0];\n                if (isset($name[3])) {\n                    $extAddy->firstname .= ' ' . $name[1];\n                    $extAddy->middlename = $name[2];\n                    $extAddy->lastname = $name[3];\n                } else if (isset($name[2])) {\n                    $extAddy->middlename = $name[1];\n                    $extAddy->lastname = $name[2];\n                } else {\n                    $extAddy->lastname = $name[1];\n                }\n                $extAddy->organization = $data[15];\n                $extAddy->address1 = $data[16];\n                $extAddy->address2 = $data[17];\n                $extAddy->city = $data[19];\n                $state = new geoRegion();\n                $state = $state->findBy('code', trim($data[20]));\n                if (empty($state->id)) {\n                    $state = new geoRegion();\n                    $state = $state->findBy('name', trim($data[20]));\n                }\n                $extAddy->state = $state->id;\n                $extAddy->zip = str_ireplace(\"'\", '', $data[21]);\n                $extAddy->phone = $data[6];\n                $extAddy->email = $data[4];\n                //eDebug($extAddy);\n                $extAddy->save();\n            }\n        } else {\n            // read in the data lines\n            while (($data = fgetcsv($handle, 10000, \",\")) !== FALSE) {\n                eDebug($data);\n                $extAddy = new external_address();\n                if ($this->params['type_of_address'][0] == 'mc') {\n                    $extAddy->source = 1;\n                    $extAddy->user_id = 0;\n                    $name = explode(' ', $data[3]);\n                    $extAddy->firstname = $name[0];\n                    if (isset($name[2])) {\n                        $extAddy->middlename = $name[1];\n                        $extAddy->lastname = $name[2];\n                    } else {\n                        $extAddy->lastname = $name[1];\n                    }\n                    $extAddy->organization = $data[4];\n                    $extAddy->address1 = $data[5];\n                    $extAddy->address2 = $data[6];\n                    $extAddy->city = $data[7];\n                    $state = new geoRegion();\n                    $state = $state->findBy('code', $data[8]);\n                    $extAddy->state = $state->id;\n                    $extAddy->zip = str_ireplace(\"'\", '', $data[9]);\n                    $extAddy->phone = $data[20];\n                    $extAddy->email = $data[21];\n                    //eDebug($extAddy);\n                    $extAddy->save();\n\n                    //Check if the shipping add is same as the billing add\n                    if ($data[5] != $data[14]) {\n                        $extAddy = new external_address();\n                        $extAddy->source = 1;\n                        $extAddy->user_id = 0;\n                        $name = explode(' ', $data[12]);\n                        $extAddy->firstname = $name[0];\n                        if (isset($name[2])) {\n                            $extAddy->middlename = $name[1];\n                            $extAddy->lastname = $name[2];\n                        } else {\n                            $extAddy->lastname = $name[1];\n                        }\n                        $extAddy->organization = $data[13];\n                        $extAddy->address1 = $data[14];\n                        $extAddy->address2 = $data[15];\n                        $extAddy->city = $data[16];\n                        $state = new geoRegion();\n                        $state = $state->findBy('code', $data[17]);\n                        $extAddy->state = $state->id;\n                        $extAddy->zip = str_ireplace(\"'\", '', $data[18]);\n                        $extAddy->phone = $data[20];\n                        $extAddy->email = $data[21];\n                        // eDebug($extAddy, true);\n                        $extAddy->save();\n                    }\n                }\n                if ($this->params['type_of_address'][0] == 'nt') {\n                    //eDebug($data,true);\n                    $extAddy->source = 2;\n                    $extAddy->user_id = 0;\n                    $extAddy->firstname = $data[16];\n                    $extAddy->lastname = $data[17];\n                    $extAddy->organization = $data[15];\n                    $extAddy->address1 = $data[18];\n                    $extAddy->address2 = $data[19];\n                    $extAddy->city = $data[20];\n                    $state = new geoRegion();\n                    $state = $state->findBy('code', $data[21]);\n                    $extAddy->state = $state->id;\n                    $extAddy->zip = str_ireplace(\"'\", '', $data[22]);\n                    $extAddy->phone = $data[23];\n                    $extAddy->email = $data[13];\n                    //eDebug($extAddy);\n                    $extAddy->save();\n                }\n            }\n        }\n        fclose($handle);\n        ini_set('auto_detect_line_endings',$line_end);\n        echo \"Done!\";\n    }\n\n    function nonUnicodeProducts() {\n        global $db, $user;\n\n        $products = $db->selectObjectsIndexedArray('product');\n        $affected_fields = array();\n        $listings = array();\n        $listedProducts = array();\n        $count = 0;\n        //Get all the columns of the product table\n        $columns = $db->getTextColumns('product');\n        foreach ($products as $item) {\n\n            foreach ($columns as $column) {\n                if ($column != 'body' && $column != 'summary' && $column != 'featured_body') {\n                    if (!expString::validUTF($item->$column) || strrpos($item->$column, '?')) {\n                        $affected_fields[] = $column;\n                    }\n                } else {\n                    if (!expString::validUTF($item->$column)) {\n                        $affected_fields[] = $column;\n                    }\n                }\n            }\n\n            if (isset($affected_fields)) {\n                if (count($affected_fields) > 0) {\n                    //Hard coded fields since this is only for displaying\n                    $listedProducts[$count]['id'] = $item->id;\n                    $listedProducts[$count]['title'] = $item->title;\n                    $listedProducts[$count]['model'] = $item->model;\n                    $listedProducts[$count]['sef_url'] = $item->sef_url;\n                    $listedProducts[$count]['nonunicode'] = implode(', ', $affected_fields);\n                    $count++;\n                }\n            }\n            unset($affected_fields);\n        }\n\n        assign_to_template(array(\n            'products' => $listedProducts,\n            'count'    => $count\n        ));\n    }\n\n    function cleanNonUnicodeProducts() {\n        global $db, $user;\n\n        $products = $db->selectObjectsIndexedArray('product');\n        //Get all the columns of the product table\n        $columns = $db->getTextColumns('product');\n        foreach ($products as $item) {\n            //Since body, summary, featured_body can have a ? intentionally such as a link with get parameter.\n            //TO Improved\n            foreach ($columns as $column) {\n                if ($column != 'body' && $column != 'summary' && $column != 'featured_body') {\n                    if (!expString::validUTF($item->$column) || strrpos($item->$column, '?')) {\n                        $item->$column = expString::convertUTF($item->$column);\n                    }\n                } else {\n                    if (!expString::validUTF($item->$column)) {\n                        $item->$column = expString::convertUTF($item->$column);\n                    }\n                }\n            }\n\n            $db->updateObject($item, 'product');\n        }\n\n        redirect_to(array('controller' => 'store', 'action' => 'nonUnicodeProducts'));\n//        $this->nonUnicodeProducts();\n    }\n\n    //This function is being used in the uploadModelaliases page for showing the form upload\n    function uploadModelAliases() {\n        global $db;\n        set_time_limit(0);\n\n        if (isset($_FILES['modelaliases']['tmp_name'])) {\n            if (!empty($_FILES['modelaliases']['error'])) {\n                flash('error', gt('There was an error uploading your file.  Please try again.'));\n//\t\t\t\tredirect_to(array('controller'=>'store','action'=>'uploadModelAliases'));\n                $this->uploadModelAliases();\n            }\n\n            $file = new stdClass();\n            $file->path = $_FILES['modelaliases']['tmp_name'];\n            echo \"Validating file...<br/>\";\n\n            $line_end = ini_get('auto_detect_line_endings');\n            ini_set('auto_detect_line_endings',TRUE);\n            $checkhandle = fopen($file->path, \"r\");\n            // read in the header line\n            $checkdata = fgetcsv($checkhandle, 10000, \",\");\n            $fieldCount = count($checkdata);\n            $count = 1;\n\n            // read in the data lines\n            while (($checkdata = fgetcsv($checkhandle, 10000, \",\")) !== FALSE) {\n                $count++;\n                if (count($checkdata) != $fieldCount) {\n                    echo \"Line \" . $count . \" of your CSV import file does not contain the correct number of columns.<br/>\";\n                    echo \"Found \" . $fieldCount . \" header fields, but only \" . count($checkdata) . \" field in row \" . $count . \" Please check your file and try again.\";\n                    exit();\n                }\n            }\n\n            fclose($checkhandle);\n            ini_set('auto_detect_line_endings',$line_end);\n\n            echo \"<br/>CSV File passed validation...<br/><br/>Importing....<br/><br/>\";\n            $line_end = ini_get('auto_detect_line_endings');\n            ini_set('auto_detect_line_endings',TRUE);\n            $handle = fopen($file->path, \"r\");\n            // read in the header line\n            $data = fgetcsv($handle, 10000, \",\");\n\n            //clear the db\n            $db->delete('model_aliases_tmp');\n            // read in the data lines\n            while (($data = fgetcsv($handle, 10000, \",\")) !== FALSE) {\n\n                $tmp = new stdClass();\n                $tmp->field1 = expString::onlyReadables($data[0]);\n                $tmp->field2 = expString::onlyReadables($data[1]);\n                $db->insertObject($tmp, 'model_aliases_tmp');\n            }\n            fclose($handle);\n            ini_set('auto_detect_line_endings',$line_end);\n            redirect_to(array('controller' => 'store', 'action' => 'processModelAliases'));\n            echo \"Done!\";\n        }\n\n        //check if there are interrupted model alias in the db\n        $res = $db->selectObjectsBySql(\"SELECT * FROM \".$db->prefix.\"model_aliases_tmp WHERE is_processed = 0\");\n        if (!empty($res)) {\n            assign_to_template(array(\n                'continue' => '1'\n            ));\n        }\n    }\n\n    // This function process the uploading of the model aliases in the uploadModelAliases page\n    function processModelAliases($index = 0, $error = '') {\n        global $db;\n\n        //Going next and delete the previous one\n        if (isset($this->params['index'])) {\n            $index = $this->params['index'];\n\n            //if go to the next processs\n            if (isset($this->params['next'])) {\n                $res = $db->selectObjectBySql(\"SELECT * FROM \".$db->prefix.\"model_aliases_tmp LIMIT \" . ($index - 1) . \", 1\");\n                //Update the record in the tmp table to mark it as process\n                $res->is_processed = 1;\n                $db->updateObject($res, 'model_aliases_tmp');\n            }\n        }\n\n        $product_id = '';\n        $autocomplete = '';\n\n        do {\n            $count = $db->countObjects('model_aliases_tmp', 'is_processed=0');\n            $res = $db->selectObjectBySql(\"SELECT * FROM \".$db->prefix.\"model_aliases_tmp LIMIT {$index}, 1\");\n            //Validation\n            //Check the field one\n            if (!empty($res)) {\n                $product_field1 = $db->selectObject(\"product\", \"model='{$res->field1}'\");\n                $product_field2 = $db->selectObject(\"product\", \"model='{$res->field2}'\");\n            }\n            if (!empty($product_field1)) {\n                $product_id = $product_field1->id;\n                //check the other field if it also being used by another product\n                if (!empty($product_field2) && $product_field1->id != $product_field2->id) {\n                    $error = \"Both {$res->field1} and {$res->field2} are models of a product. <br />\";\n                } else {\n                    //Check the field2 if it is already in the model alias\n                    $model_alias = $db->selectObject(\"model_aliases\", \"model='{$res->field2}'\");\n                    if (empty($model_alias) && @$model_alias->product_id != $product_field1->id) {\n                        //Add the first field\n                        $tmp = new  stdClass();\n                        $tmp->model = $res->field1;\n                        $tmp->product_id = $product_field1->id;\n                        $db->insertObject($tmp, 'model_aliases');\n                        //Add the second field\n                        $tmp->model = $res->field2;\n                        $tmp->product_id = $product_field1->id;\n                        $db->insertObject($tmp, 'model_aliases');\n                        //Update the record in the tmp table to mark it as process\n                        $res->is_processed = 1;\n                        $db->updateObject($res, 'model_aliases_tmp');\n\n                    } else {\n                        $error = \"{$res->field2} has already a product alias. <br />\";\n                    }\n                }\n            } elseif (!empty($product_field2)) {\n                $product_id = $product_field2->id;\n                $model_alias = $db->selectObject(\"model_aliases\", \"model='{$res->field1}'\");\n                if (empty($model_alias) && @$model_alias->product_id != $product_field2->id) {\n                    //Add the first field\n                    $tmp = new stdClass();\n                    $tmp->model = $res->field1;\n                    $tmp->product_id = $product_field2->id;\n                    $db->insertObject($tmp, 'model_aliases');\n                    //Add the second field\n                    $tmp->model = $res->field2;\n                    $tmp->product_id = $product_field2->id;\n                    $db->insertObject($tmp, 'model_aliases');\n                    //Update the record in the tmp table to mark it as process\n                    $res->is_processed = 1;\n                    $db->updateObject($res, 'model_aliases_tmp');\n                } else {\n                    $error = \"{$res->field1} has already a product alias. <br />\";\n                }\n            } else {\n                $model_alias1 = $db->selectObject(\"model_aliases\", \"model='{$res->field1}'\");\n                $model_alias2 = $db->selectObject(\"model_aliases\", \"model='{$res->field2}'\");\n\n                if (!empty($model_alias1) || !empty($model_alias2)) {\n                    $error = \"The {$res->field1} and {$res->field2} are already being used by another product.<br />\";\n                } else {\n                    $error = gt(\"No product match found, please choose a product to be alias in the following models below\") . \":<br />\";\n                    $error .= $res->field1 . \"<br />\";\n                    $error .= $res->field2 . \"<br />\";\n                    $autocomplete = 1;\n                }\n            }\n            $index++;\n        } while (empty($error));\n        assign_to_template(array(\n            'count'        => $count,\n            'alias'        => $res,\n            'index'        => $index,\n            'product_id'   => $product_id,\n            'autocomplete' => $autocomplete,\n            'error'        => $error\n        ));\n    }\n\n    // This function save the uploaded processed model aliases in the uploadModelAliases page\n    function saveModelAliases() {\n        global $db;\n\n        $index = $this->params['index'];\n        $title = expString::escape($this->params['product_title']);\n        $product = $db->selectObject(\"product\", \"title='{$title}'\");\n\n        if (!empty($product->id)) {\n            $res = $db->selectObjectBySql(\"SELECT * FROM \".$db->prefix.\"model_aliases_tmp LIMIT \" . ($index - 1) . \", 1\");\n            //Add the first field\n            $tmp = new stdClass();\n            $tmp->model = $res->field1;\n            $tmp->product_id = $product->id;\n            $db->insertObject($tmp, 'model_aliases');\n            //Add the second field\n            $tmp->model = $res->field2;\n            $tmp->product_id = $product->id;\n            $db->insertObject($tmp, 'model_aliases');\n\n            //if the model is empty, update the product table so that it will used the field 1 as its primary model\n            if (empty($product->model)) {\n                $product->model = $res->field1;\n                $db->updateObject($product, 'product');\n            }\n\n            //Update the record in the tmp table to mark it as process\n            $res->is_processed = 1;\n            $db->updateObject($res, 'model_aliases_tmp');\n            flash(\"message\", gt(\"Product successfully Saved.\"));\n            redirect_to(array('controller' => 'store', 'action' => 'processModelAliases', 'index' => $index));\n        } else {\n            flash(\"error\", gt(\"Product title is invalid.\"));\n            redirect_to(array('controller' => 'store', 'action' => 'processModelAliases', 'index' => $index - 1, 'error' => 'Product title is invalid.'));\n        }\n    }\n\n    // This function delete all the already processed model aliases in the uploadModelAliases page\n    function deleteProcessedModelAliases() {\n        global $db;\n\n        $db->delete('model_aliases_tmp', 'is_processed=1');\n        redirect_to(array('controller' => 'store', 'action' => 'processModelAliases'));\n    }\n\n    // This function show the form of model alias to be edit or add in the product edit page\n    function edit_model_alias() {\n        global $db;\n\n        if (isset($this->params['id'])) {\n            $model_alias = $db->selectObject('model_aliases', 'id =' . $this->params['id']);\n            assign_to_template(array(\n                'model_alias' => $model_alias\n            ));\n        } else {\n            assign_to_template(array(\n                'product_id' => $this->params['product_id']\n            ));\n        }\n    }\n\n    // This function update or add the model alias in the product edit page\n    function update_model_alias() {\n        global $db;\n\n        if (empty($this->params['id'])) {\n            $obj = new stdClass();\n            $obj->model = $this->params['model'];\n            $obj->product_id = $this->params['product_id'];\n            $db->insertObject($obj, 'model_aliases');\n\n        } else {\n            $model_alias = $db->selectObject('model_aliases', 'id =' . $this->params['id']);\n            $model_alias->model = $this->params['model'];\n            $db->updateObject($model_alias, 'model_aliases');\n        }\n\n        expHistory::back();\n    }\n\n    // This function delete the model alias in the product edit page\n    function delete_model_alias() {\n        global $db;\n\n        if (empty($this->params['id'])) return false;\n        $db->delete('model_aliases', 'id =' . $this->params['id']);\n\n        expHistory::back();\n    }\n\n    function setup_wizard() {\n\n    }\n\n    function import() {\n        assign_to_template(array(\n            'type' => $this\n        ));\n    }\n\n    function importProduct($file=null) {\n        if (empty($file->path)) {\n            $file = new stdClass();\n            $file->path = $_FILES['import_file']['tmp_name'];\n        }\n        if (empty($file->path)) {\n            echo gt('Not a Product Import CSV File');\n            return;\n        }\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $handle = fopen($file->path, \"r\");\n\n        // read in the header line\n        $header = fgetcsv($handle, 10000, \",\");\n        if (!($header[0] == 'id' || $header[0] == 'model')) {\n            echo gt('Not a Product Import CSV File');\n            return;\n        }\n\n        $count = 1;\n        $errorSet = array();\n        $product = null;\n        /*  original order of columns\n            0=id\n            1=parent_id\n            2=child_rank\n            3=title\n            4=body\n            5=model\n            6=warehouse_location\n            7=sef_url\n//FIXME        this is where canonical should be\n            8=meta_title\n            9=meta_keywords\n            10=meta_description\n            11=tax_class_id\n            12=quantity\n            13=availability_type\n            14=base_price\n            15=special_price\n            16=use_special_price\n            17=active_type\n            18=product_status_id\n            19=category1\n            20=category2\n            21=category3\n            22=category4\n            ..\n            30=category12\n            31=surcharge\n            32=rank category_rank\n            33=feed_title\n            34=feed_body\n            35=weight\n            36=height\n            37=width\n            38=length\n            39=companies_id\n            40=image1 url to mainimage to download\n            41=image2 url to additional image to download\n            ..\n            44=image5 url to additional image to download\n*/\n\n        // read in the data lines\n//        while (($data = fgetcsv($handle, 10000, \",\")) !== FALSE) {\n        while (($row = fgetcsv($handle, 10000, \",\")) !== FALSE) {\n            $count++;\n            $createCats = array();\n            $createCatsRank = array();\n            $data = array_combine($header, $row);\n\n            //eDebug($data, true);\n            if ($header[0] == 'id') {\n                if (isset($data['id']) && $data['id'] != 0) {\n                    $product = new product($data['id'], false, false);\n                    if (empty($product->id)) {\n                        $errorSet[$count] = gt(\"Is not an existing product ID.\");\n                        continue;\n                    }\n                } else {\n                    //$errorSet[$count] = \"Product ID not supplied.\";\n                    //continue;\n                    $product = new product();\n                    //$product->save(false);\n                }\n            } elseif ($header[0] == 'model') {\n                if (!empty($data['model'])) {\n                    $p = new product();\n                    $product = $p->find('first','model=\"' . $data['model'] . '\"');\n                    if (empty($product->id)) {\n                        $errorSet[$count] = gt(\"Is not an existing product SKU/Model.\");\n                        continue;\n                    }\n                } else {\n                    $product = new product();\n                }\n            }\n            if ($product->product_type != 'product') {\n                $errorSet[$count] = gt(\"Existing product is wrong product type.\");\n                continue;\n            }\n\n            // new products must have a title\n            if (empty($product->id)) {  // new product require mandatory values\n                $checkTitle = trim($data['title']);\n                if (empty($checkTitle)) {\n                    $errorSet[$count] = gt(\"No product name (title) supplied.\");\n                    continue;\n                }\n                $product->minimum_order_quantity = 1;\n            }\n\n            // parse $data columns\n            foreach ($data as $key=>$value) {\n                $value = trim($value);\n                switch ($key) {\n                    case 'parent_id': // integer\n                    case 'child_rank':\n                    case 'tax_class_id':\n                    case 'quantity':\n                    case 'availability_type':\n                    case 'use_special_price':\n                    case 'active_type':\n                    case 'product_status_id':\n                        $product->$key = intval($value);\n                        break;\n                    case 'companies_id':\n                        if (is_numeric($value)) {\n                            $product->$key = intval($value);\n                        } elseif (!empty($value)) {  // it's a company name, not a company id#\n                            $co = new company();\n                            $company = $co->find('first', 'title=' . $value);\n                            if (empty($company->id)) {\n                                $params['title'] = $value;\n                                $company->update();\n                            }\n                            $product->$key = $company->id;\n                        }\n                        break;\n                    case 'sef_url':\n                        $product->$key = stripslashes(stripslashes($value));\n                        if (!is_bool(expValidator::uniqueness_of('sef_url', $product, array()))) {\n                            $product->makeSefUrl();\n                        }\n                        break;\n                    case 'title':  // string\n                    case 'model':\n                    case 'warehouse_location':\n                    case 'meta_title':\n                    case 'meta_keywords':\n                    case 'meta_description':\n                    case 'feed_title':\n                    case 'feed_body':\n                        $product->$key = stripslashes(stripslashes($value));\n                        break;\n                    case 'body':\n                        $product->$key = utf8_encode(stripslashes(expString::parseAndTrimImport(($value), true)));\n                        break;\n                    case 'base_price':  // float\n                    case 'special_price':\n                    case 'surcharge':\n                    case 'weight':\n                    case 'height':\n                    case 'width':\n                    case 'length':\n                        $product->$key = floatval($value);\n                        break;\n                    case 'image1':\n                    case 'image2':\n                    case 'image3':\n                    case 'image4':\n                    case 'image5':\n                        if (!empty($value)) {\n                            $product->save(false);\n                            if (is_integer($value)) {\n                                $_objFile = new expFile ($value);\n                            } else {\n                                // import image from url\n                                $_destFile = basename($value);  // get filename from end of url\n                                $_destDir = UPLOAD_DIRECTORY_RELATIVE;\n                                $_destFullPath = BASE . $_destDir . $_destFile;\n                                if (file_exists($_destFullPath)) {\n                                    $_destFile = expFile::resolveDuplicateFilename($_destFullPath);\n                                    $_destFullPath = BASE . $_destDir . $_destFile;\n                                }\n\n                                expCore::saveData($value, $_destFullPath);  // download the image\n\n                                if (file_exists($_destFullPath)) {\n                                    $__oldumask = umask(0);\n                                    chmod($_destFullPath, octdec(FILE_DEFAULT_MODE_STR + 0));\n                                    umask($__oldumask);\n\n                                    // Create a new expFile Object\n                                    $_fileParams = array('filename' => $_destFile, 'directory' => $_destDir);\n                                    $_objFile = new expFile ($_fileParams);\n                                    $_objFile->save();\n                                }\n                            }\n                            // attach product images expFile object\n                            if (!empty($_objFile->id)) {\n                                if ($key == 'image1') {\n                                    $product->attachItem($_objFile, 'mainimage');\n                                } else {\n                                    $product->attachItem($_objFile, 'images', false);\n                                }\n                            }\n                        }\n                        break;\n                    case 'category1':\n                    case 'category2':\n                    case 'category3':\n                    case 'category4':\n                    case 'category5':\n                    case 'category6':\n                    case 'category7':\n                    case 'category8':\n                    case 'category9':\n                    case 'category10':\n                    case 'category11':\n                    case 'category12':\n                        if ($product->parent_id == 0) {\n//                            $rank = !empty($data['rank']) ? $data['rank'] : 1;\n                            $rank = intval(str_replace('category', '', $key));\n//                            if (!empty($value)) $result = storeCategory::parseCategory($value);\n                            if (!empty($value)) $result = storeCategory::importCategoryString($value);\n                            else continue;\n\n//                            if (is_numeric($result)) {\n                            if ($result) {\n                                $createCats[] = $result;\n                                $createCatsRank[$result] = $rank;\n                            } else {\n                                $errorSet[$count][] = $result;\n                                continue 2;\n                            }\n                        }\n                        break;\n                    default:\n                        if (property_exists('product', $key)) {\n                            $product->key = $value;\n                        }\n                }\n            }\n\n//            $checkTitle = trim($data['title']);\n//            if (empty($checkTitle)) {\n//                $errorSet[$count] = gt(\"No product name (title) supplied, skipping this record...\");\n//                continue;\n//            }\n//            $product->parent_id = $data[1];\n//            $product->child_rank = $data[2];\n//            $product->title = stripslashes(stripslashes($data[3]));\n//            $product->body = utf8_encode(stripslashes(expString::parseAndTrimImport(($data[4]), true)));\n//            //$product->body = utf8_encode(stripslashes(stripslashes(($data[4]))));\n//            $product->model = stripslashes(stripslashes($data[5]));\n//            $product->warehouse_location = stripslashes(stripslashes($data[6]));\n//            $product->sef_url = stripslashes(stripslashes($data[7]));\n////FIXME        this is where canonical should be\n//            $product->meta_title = stripslashes(stripslashes($data[8]));\n//            $product->meta_keywords = stripslashes(stripslashes($data[9]));\n//            $product->meta_description = stripslashes(stripslashes($data[10]));\n//\n//            $product->tax_class_id = $data[11];\n//\n//            $product->quantity = $data[12];\n//\n//            $product->availability_type = $data[13];\n//\n//            $product->base_price = $data[14];\n//            $product->special_price = $data[15];\n//            $product->use_special_price = $data[16];\n//            $product->active_type = $data[17];\n//            $product->product_status_id = $data[18];\n//\n//            $product->surcharge = $data[31];\n//            $product->feed_title = stripslashes(stripslashes($data[33]));\n//            $product->feed_body = stripslashes(stripslashes($data[34]));\n//            if (!empty($data[35])) $product->weight = $data[35];\n//            if (!empty($data[36])) $product->height = $data[36];\n//            if (!empty($data[37])) $product->width = $data[37];\n//            if (!empty($data[38])) $product->length = $data[38];\n//            if (!empty($data[39])) $product->companies_id = $data[39];\n//            if (!empty($data[40])) {\n//                // import image from url\n//                $_destFile = basename($data[40]);  // get filename from end of url\n//                $_destDir = UPLOAD_DIRECTORY_RELATIVE;\n//                $_destFullPath = BASE . $_destDir . $_destFile;\n//                if (file_exists($_destFullPath)) {\n//                    $_destFile = expFile::resolveDuplicateFilename($_destFullPath);\n//                    $_destFullPath = BASE . $_destDir . $_destFile;\n//                }\n//\n//                expCore::saveData($data[40], $_destFullPath);  // download the image\n//\n//                if (file_exists($_destFullPath)) {\n//                    $__oldumask = umask(0);\n//                    chmod($_destFullPath, octdec(FILE_DEFAULT_MODE_STR + 0));\n//                    umask($__oldumask);\n//\n//                    // Create a new expFile Object\n//                    $_fileParams = array('filename' => $_destFile, 'directory' => $_destDir);\n//                    $_objFile = new expFile ($_fileParams);\n//                    $_objFile->save();\n//                    // attach/replace product main image with new expFile object\n//                    $product->attachItem($_objFile, 'mainimage');\n//                }\n//            }\n//            for ($i=41; $i<=44; $i++) {\n//                if (!empty($data[$i])) {\n//                    // import image from url\n//                    $_destFile = basename($data[$i]);  // get filename from end of url\n//                    $_destDir = UPLOAD_DIRECTORY_RELATIVE;\n//                    $_destFullPath = BASE . $_destDir . $_destFile;\n//                    if (file_exists($_destFullPath)) {\n//                        $_destFile = expFile::resolveDuplicateFilename($_destFullPath);\n//                        $_destFullPath = BASE . $_destDir . $_destFile;\n//                    }\n//\n//                    expCore::saveData($data[$i], $_destFullPath);  // download the image\n//\n//                    if (file_exists($_destFullPath)) {\n//                        $__oldumask = umask(0);\n//                        chmod($_destFullPath, octdec(FILE_DEFAULT_MODE_STR + 0));\n//                        umask($__oldumask);\n//\n//                        // Create a new expFile Object\n//                        $_fileParams = array('filename' => $_destFile, 'directory' => $_destDir);\n//                        $_objFile = new expFile ($_fileParams);\n//                        $_objFile->save();\n//                        // attach product additional images with new expFile object\n//                        $product->attachItem($_objFile, 'images', false);\n//                    }\n//                }\n//            }\n//\n//            if (empty($product->id)) $product->minimum_order_quantity = 1;\n//\n//            if ($product->parent_id == 0) {\n//                $createCats = array();\n//                $createCatsRank = array();\n//                for ($x = 19; $x <= 30; $x++) {\n//                    if (!empty($data[$x])) $result = storeCategory::parseCategory($data[$x]);\n//                    else continue;\n//\n//                    if (is_numeric($result)) {\n//                        $createCats[] = $result;\n//                        $createCatsRank[$result] = $data[32];\n//                    } else {\n//                        $errorSet[$count][] = $result;\n//                        continue 2;\n//                    }\n//                }\n//            }\n\n            //NOTE: we manipulate existing user input fields to store them properly?\n            //eDebug($createCats,true);\n            if (!empty($product->user_input_fields) && is_array($product->user_input_fields))\n                $product->user_input_fields = serialize($product->user_input_fields);\n            //eDebug($product->user_input_fields);\n\n            if (!empty($product->user_input_fields) && !is_array($product->user_input_fields))\n                $product->user_input_fields = str_replace(\"'\", \"\\'\", $product->user_input_fields);\n\n            //eDebug($product->user_input_fields,true);\n            $product->save(true);\n            //eDebug($product->body);\n\n            //sort order and categories\n            if ($product->parent_id == 0) {\n                $product->saveCategories($createCats, $createCatsRank);\n                //eDebug($createCatsRank);\n            }\n            echo \"Successfully imported/updated row \" . $count . \", product: \" . $product->title . \"<br/>\";\n            //eDebug($product);\n\n        }\n\n        if (count($errorSet)) {\n            echo \"<br/><hr><br/><div style='color:red'><strong>\".gt('The following records were NOT imported').\":</strong><br/>\";\n            foreach ($errorSet as $rownum => $err) {\n                echo \"Row: \" . $rownum;\n                if (is_array($err)) {\n                    foreach ($err as $e) {\n                        echo \" -- \" . $e . \"<br/>\";\n                    }\n                } else echo \" -- \" . $err . \"<br/>\";\n            }\n            echo \"</div>\";\n        }\n\n        fclose($handle);\n        ini_set('auto_detect_line_endings',$line_end);\n\n        // update search index\n        $this->addContentToSearch();\n    }\n\n}\n\n?>", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package Modules\n */\n\nclass fileController extends expController {\n    public $basemodel_name = \"expFile\";\n    protected $remove_permissions = array(\n        'delete'\n    );\n//    protected $manage_permissions = array(\n//        'picker'=>'Manage Files',\n//        'import'=>'Import',\n//        'export'=>'Export',\n//    );\n    public $requires_login = array(\n        'picker'=>'You must be logged in to perform this action',\n        'adder'=>'You must be logged in to perform this action',\n        'addit'=>'You must be logged in to perform this action',\n        'batchDelete'=>'You must be logged in to perform this action',\n        'createFolder'=>'You must be logged in to perform this action',\n        'deleter'=>'You must be logged in to perform this action',\n        'deleteit'=>'You must be logged in to perform this action',\n        'edit'=>'You must be logged in to perform this action',\n        'quickUpload'=>'You must be logged in to perform this action',\n        'upload'=>'You must be logged in to perform this action',\n        'uploader'=>'You must be logged in to perform this action',\n    );\n\n    static function displayname() { return gt(\"File Manager\"); }\n    static function description() { return gt(\"Add and manage Exponent Files\"); }\n    static function author() { return \"Phillip Ball - OIC Group, Inc\"; }\n\n    public function manage_fixPaths() {\n        // fixes file directory issues when the old file class was used to save record\n        // where the trailing forward slash was not added. This simply checks to see\n        // if the trailing / is there, if not, it adds it.\n\n        $file = new expFile();\n        $files = $file->find('all');\n\n        foreach ($files as $key=>$file) {\n            if (substr($files[$key]->directory,-1,1)!=\"/\") {\n                $files[$key]->directory = $files[$key]->directory.'/';\n            }\n            $files[$key]->save();\n        }\n\n//        eDebug($files,true);\n    }\n\n    public function picker() {\n//        global $user;\n\n        $expcat = new expCat();\n        $cats = $expcat->find('all','module=\"file\"');\n        $jscatarray = array();\n        $catarray = array();\n        $catarray[] = 'Root Folder';\n        foreach ($cats as $key=>$cat) {\n            $jscatarray[$key]['label'] = $cat->title;\n            $jscatarray[$key]['value'] = $cat->id;\n            $catarray[$cat->id] = $cat->title;\n        }\n        $jsuncat['label'] = 'Root';\n        $jsuncat['value'] = null;\n        array_unshift($jscatarray,$jsuncat);\n        $catarray['-1'] = 'All Folders';\n        if (strstr($this->params['update'],'?')) {\n            $update = explode('?',$this->params['update']);\n            if (!empty($update[0])) $this->params['update'] = $update[0];\n        }\n        assign_to_template(array(\n            'update'=>$this->params['update'],\n            'filter'=>!empty($this->params['filter'])?$this->params['filter']:null,\n            'cats'=>$catarray,\n            'jscats'=>json_encode($jscatarray)\n        ));\n    }\n\n    public function uploader() {\n        global $user;\n        //expHistory::set('manageable', $this->params);\n        flash('message',gt('Upload size limit').': '.ini_get('upload_max_filesize'));\n        if(intval(ini_get('upload_max_filesize'))!=intval(ini_get('post_max_size')) && $user->isAdmin()){\n            flash('error',gt('In order for the uploader to work correctly, \\'\"post_max_size\\' and \\'upload_max_filesize\\' within your php.ini file must match one another'));\n        }\n\n        $expcat = new expCat();\n        $cats = $expcat->find('all','module=\"file\"');\n        $catarray = array();\n        $catarray[] = 'Root Folder';\n        foreach ($cats as $cat) {\n            $catarray[$cat->id] = $cat->title;\n        }\n        assign_to_template(array(\n            'update'=>$this->params['update'],\n            \"upload_size\"=>ini_get('upload_max_filesize'),\n            \"post_size\"=>ini_get('post_max_size'),\n            \"bmax\"=>intval(ini_get('upload_max_filesize')/1024*1000000000),\n            'cats'=>$catarray,\n        ));\n    }\n\n    /**\n     * Returns attached file view template configuration settings template\n     *\n     */\n    public function get_view_config() {\n        global $template;\n\n        // set paths we will search in for the view\n        $paths = array(\n            BASE.'themes/'.DISPLAY_THEME.'/modules/common/views/file/configure',\n            BASE.'framework/modules/common/views/file/configure',\n        );\n\n        foreach ($paths as $path) {\n            $view = $path.'/'.$this->params['view'].'.tpl';\n            if (is_readable($view)) {\n                if (bs(true)) {\n                    $bstrapview = $path.'/'.$this->params['view'].'.bootstrap.tpl';\n                    if (file_exists($bstrapview)) {\n                        $view = $bstrapview;\n                    }\n                }\n                if (bs3(true)) {\n                    $bstrapview = $path.'/'.$this->params['view'].'.bootstrap3.tpl';\n                    if (file_exists($bstrapview)) {\n                        $view = $bstrapview;\n                    }\n                }\n                $template = new controllertemplate($this, $view);\n                $ar = new expAjaxReply(200, 'ok');\n\t\t        $ar->send();\n            }\n        }\n    }\n\n    /**\n     * Returns view template configuration settings view template\n     *\n     */\n    public function get_module_view_config() {\n        global $template;\n\n//        $controller = new $this->params['mod'];\n        $controller = expModules::getController($this->params['mod']);\n        // set paths we will search in for the view\n        $paths = array(\n//            BASE.'themes/'.DISPLAY_THEME.'/modules/'.$this->params['mod'].'/views/'.$this->params['mod'].'/configure',\n//            BASE.'framework/modules/'.$this->params['mod'].'/views/'.$this->params['mod'].'/configure',\n            $controller->viewpath.'/configure',\n  \t        BASE.'themes/'.DISPLAY_THEME.'/modules/'.$controller->relative_viewpath.'/configure'\n        );\n\n        $config_found = false;\n        foreach ($paths as $path) {\n            $view = $path.'/'.$this->params['view'].'.config';\n            if (is_readable($view)) {\n                if (bs(true)) {\n                    $bstrapview = $path.'/'.$this->params['view'].'.bootstrap.config';\n                    if (file_exists($bstrapview)) {\n                        $view = $bstrapview;\n                    }\n                }\n                if (bs3(true)) {\n                    $bstrapview = $path.'/'.$this->params['view'].'.bootstrap3.config';\n                    if (file_exists($bstrapview)) {\n                        $view = $bstrapview;\n                    }\n                }\n                $template = new controllertemplate($this, $view);\n                $config_found = true;\n            }\n        }\n        $parts = explode('_', $this->params['view']);\n        if (!$config_found && ($this->params['view'] != $parts[0])) {\n            foreach ($paths as $path) {\n                $actview = $path.'/'.$parts[0].'.config';\n                if (is_readable($actview)) {\n                    if (bs(true)) {\n                        $bstrapview = $path . '/' . $actview . '.bootstrap.config';\n                        if (file_exists($bstrapview)) {\n                            $actview = $bstrapview;\n                        }\n                    }\n                    if (bs3(true)) {\n                        $bstrapview = $path . '/' . $actview . '.bootstrap3.config';\n                        if (file_exists($bstrapview)) {\n                            $actview = $bstrapview;\n                        }\n                    }\n                    $template = new controllertemplate($this, $actview);\n                    $config_found = true;\n                }\n            }\n        }\n        if (!$config_found) {\n            echo \"<p>\".gt('There Are No View Specific Settings').\"</p>\";\n            $template = expTemplate::get_common_template('blank', null);\n        }\n\n//        expTemplate::get_config_template($this);\n        $ar = new expAjaxReply(200, 'ok');\n        $ar->send();\n    }\n\n    /**\n     * Get a file record by id or pathname and return it as JSON via Ajax\n     */\n    public function getFile() {\n        if (is_numeric($this->params['id'])) {\n            $file = new expFile($this->params['id']);\n        } else {\n            $efile = new expFile();\n            $path = str_replace(BASE, '', $this->params['id']);\n            $path = str_replace('\\\\', '/', $path);\n            $file = $efile->find('first','directory=\"'.dirname($path).'/'.'\" AND filename=\"'.basename($path).'\"');\n        }\n        $ar = new expAjaxReply(200, 'ok', $file);\n        $ar->send();\n    }\n\n    public function getFilesByJSON() {\n        global $user;\n\n        $modelname = $this->basemodel_name;\n        $results = 25; // default get all\n        $startIndex = 0; // default start at 0\n//        $sort = null; // default don't sort\n//        $dir = 'asc'; // default sort dir is asc\n//        $sort_dir = SORT_ASC;\n\n        // How many records to get?\n        if(strlen($this->params['results']) > 0) {\n            $results = $this->params['results'];\n        }\n\n        // Start at which record?\n        if(strlen($this->params['startIndex']) > 0) {\n            $startIndex = $this->params['startIndex'];\n        }\n\n        // Sorted?\n        if(strlen($this->params['sort']) > 0) {\n            if ($this->params['sort'] == 'cat') {\n                $sort = 'id';\n            } else {\n                $sort = $this->params['sort'];\n            }\n//            if ($sort = 'id') $sort = 'filename';\n        }\n\n        // Sort dir?\n        if (($this->params['dir'] == 'false') || ($this->params['dir'] == 'desc') || ($this->params['dir'] == 'yui-dt-desc')) {\n            $dir = 'desc';\n            $sort_dir = SORT_DESC;\n        } else {\n            $dir = 'asc';\n            $sort_dir = SORT_ASC;\n        }\n        $totalrecords = 0;\n\n        if (!empty($this->params['query'])) {\n            $filter = '';\n            if (!$user->isAdmin()) {\n                $filter = \"(poster=\".$user->id.\" OR shared=1) AND \";\n            };\n//            if ($this->params['update']=='ck' || $this->params['update']=='tiny') {\n            if (!empty($this->params['filter']) && $this->params['filter'] == 'image') {\n                $filter .= \"is_image=1 AND \";\n            }\n\n//            $this->params['query'] = expString::sanitize($this->params['query']);\n//            $totalrecords = $this->$modelname->find('count',\"filename LIKE '%\".$this->params['query'].\"%' OR title LIKE '%\".$this->params['query'].\"%' OR alt LIKE '%\".$this->params['query'].\"%'\");\n//            $files = $this->$modelname->find('all',$filter.\"filename LIKE '%\".$this->params['query'].\"%' OR title LIKE '%\".$this->params['query'].\"%' OR alt LIKE '%\".$this->params['query'].\"%'\".$imagesOnly,$sort.' '.$dir, $results, $startIndex);\n            $files = $this->$modelname->find('all',$filter.\"(filename LIKE '%\".$this->params['query'].\"%' OR title LIKE '%\".$this->params['query'].\"%' OR alt LIKE '%\".$this->params['query'].\"%')\",$sort.' '.$dir);\n\n            //FiXME we need to get all records then group by cat, then trim/paginate\n            $querycat = !empty($this->params['cat']) ? $this->params['cat'] : '0';\n            $groupedfiles = array();\n            foreach ($files as $key=>$file) {\n                $filecat = !empty($file->expCat[0]->id) ? $file->expCat[0]->id : 0;\n                if (($querycat == $filecat || $querycat == -1)) {\n                    $totalrecords++;\n                    if (count($groupedfiles) < ($startIndex + $results)) {\n                        $groupedfiles[$key] = $files[$key];\n                        if (!empty($file->expCat[0]->title)) {\n                            $groupedfiles[$key]->cat = $file->expCat[0]->title;\n                            $groupedfiles[$key]->catid = $file->expCat[0]->id;\n                        }\n                        $tmpusr = new user($file->poster);\n                        $groupedfiles[$key]->user = new stdClass();\n                        $groupedfiles[$key]->user->firstname = $tmpusr->firstname;\n                        $groupedfiles[$key]->user->lastname = $tmpusr->lastname;\n                        $groupedfiles[$key]->user->username = $tmpusr->username;\n                    }\n                }\n            }\n            $groupedfiles = array_values(array_filter($groupedfiles));\n            $files = array_slice($groupedfiles,$startIndex,$results);\n\n            $returnValue = array(\n                'recordsReturned'=>count($files),\n                'totalRecords'=>$totalrecords,\n                'startIndex'=>$startIndex,\n                'sort'=>$sort,\n                'dir'=>$dir,\n                'pageSize'=>$results,\n                'records'=>$files\n            );\n        } else {\n            if (!$user->isAdmin()) {\n                $filter = \"(poster=\".$user->id.\" OR shared=1)\";\n            };\n//            if ($this->params['update']=='ck' || $this->params['update']=='tiny') {\n            if (!empty($this->params['filter']) && $this->params['filter'] == 'image') {\n                $filter .= !empty($filter) ? \" AND \" : \"\";\n                $filter .= \"is_image=1\";\n            }\n\n//            $totalrecords = $this->$modelname->find('count',$filter);\n//            $files = $this->$modelname->find('all',$filter,$sort.' '.$dir, $results, $startIndex);\n            $files = $this->$modelname->find('all', $filter, $sort.' '.$dir);\n\n            $groupedfiles = array();\n            foreach ($files as $key=>$file) {\n                if (empty($file->expCat[0]->title)) {\n                    $totalrecords++;\n                    if (count($groupedfiles) < ($startIndex + $results)) {\n                        $groupedfiles[$key] = $files[$key];\n    //                    $files[$key]->cat = $file->expCat[0]->title;\n    //                    $files[$key]->catid = $file->expCat[0]->id;\n                        $tmpusr = new user($file->poster);\n                        $groupedfiles[$key]->user = new stdClass();\n                        $groupedfiles[$key]->user->firstname = $tmpusr->firstname;\n                        $groupedfiles[$key]->user->lastname = $tmpusr->lastname;\n                        $groupedfiles[$key]->user->username = $tmpusr->username;\n                    }\n                }\n            }\n            $groupedfiles = array_values(array_filter($groupedfiles));\n            $files = array_slice($groupedfiles,$startIndex,$results);\n\n            $returnValue = array(\n                'recordsReturned'=>count($files),\n                'totalRecords'=>$totalrecords,\n                'startIndex'=>$startIndex,\n                'sort'=>$sort,\n                'dir'=>$dir,\n                'pageSize'=>$results,\n                'records'=>$files\n            );\n\n        }\n\n        echo json_encode($returnValue);\n    }\n\n    /**\n     * create a new virtual folder in response to an ajax request\n     * return updated list of virtual folders in response to an ajax request\n     */\n    public function createFolder() {\n        if (!empty($this->params['folder'])) {\n            $expcat = new expCat($this->params['folder']);\n            if (empty($expcat->id)) {\n                $expcat->module = 'file';\n                $expcat->title = $this->params['folder'];\n                $expcat->update();\n            }\n//            $this->params['module'] = 'file';\n//            $this->params['title'] = $this->params['folder'];\n//            parent::update();\n            $cats = $expcat->find('all','module=\"file\"','rank');\n            $catarray = array();\n            $catarray[] = 'Root Folder';\n            foreach ($cats as $cat) {\n                $catarray[$cat->id] = $cat->title;\n            }\n            echo json_encode($catarray);\n        }\n    }\n\n    public function delete() {\n//        global $db,$user;\n        global $user;\n\n        $file = new expFile($this->params['id']);\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $file->delete();\n            if (unlink($file->directory.$file->filename)) {\n                flash('message',$file->filename.' '.gt('was successfully deleted'));\n            } else {\n                flash('error',$file->filename.' '.gt('was deleted from the database, but could not be removed from the file system.'));\n            }\n        } else {\n            flash('error',$file->filename.' '.gt('wasn\\'t deleted because you don\\'t own the file.'));\n        }\n        redirect_to(array(\"controller\"=>'file',\"action\"=>'picker',\"ajax_action\"=>1,\"update\"=>$this->params['update'],\"filter\"=>$this->params['filter']));\n    }\n\n    public function deleter() {\n//        global $db;\n\n        $notafile = array();\n//        $files = $db->selectObjects('expFiles',1);\n        foreach (expFile::selectAllFiles() as $file) {\n            if (!is_file(BASE.$file->directory.$file->filename)) {\n                $notafile[$file->id] = $file;\n            }\n        }\n        assign_to_template(array(\n            'files'=>$notafile\n        ));\n    }\n\n    public function deleteit() {\n        global $user;\n        if (!empty($this->params['deleteit'])) {\n            foreach ($this->params['deleteit'] as $file) {\n                $delfile = new expFile($file);\n                if ($user->id==$delfile->poster || $user->isAdmin()) {\n                    $delfile->delete();\n                    flash('error',$delfile->filename.' '.gt('was deleted from the database.'));\n                }\n            }\n        }\n        redirect_to(array(\"controller\"=>'file',\"action\"=>'picker',\"ajax_action\"=>1,\"update\"=>$this->params['update'],\"filter\"=>$this->params['filter']));\n    }\n\n    public function batchDelete() {\n        global $user;\n\n        $error = false;\n//        if (get_magic_quotes_gpc()) $this->params['files'] = stripslashes($this->params['files']);  // magic quotes fix\n        $this->params['files'] = stripslashes($this->params['files']);\n        $files = json_decode($this->params['files']);\n        switch (json_last_error()) {  //FIXME json error checking/reporting, may no longer be needed\n            case JSON_ERROR_NONE:\n            break;\n            case JSON_ERROR_DEPTH:\n                $error = 'JSON - Maximum stack depth exceeded';\n            break;\n            case JSON_ERROR_STATE_MISMATCH:\n                $error = 'JSON - Underflow or the modes mismatch';\n            break;\n            case JSON_ERROR_CTRL_CHAR:\n                $error = 'JSON - Unexpected control character found';\n            break;\n            case JSON_ERROR_SYNTAX:\n                $error = 'JSON - Syntax error, malformed JSON';\n            break;\n            case JSON_ERROR_UTF8:\n                $error = 'JSON - Malformed UTF-8 characters, possibly incorrectly encoded';\n            break;\n            default:\n                $error = 'JSON - Unknown error';\n            break;\n        }\n\n        if (empty($error)) foreach ($files as $file) {\n            $delfile = new expFile($file->id);\n            if ($user->id==$delfile->poster || $user->isAdmin()) {\n                $delfile->delete();\n                unlink($delfile->directory.$delfile->filename);\n            } else {\n                $error = gt(\"you didn't have permission\");\n            }\n        }\n        if (!empty($error)) {\n            $ar = new expAjaxReply(300, gt(\"Some files were NOT deleted because\") . ' ' . $error);\n        } else {\n            $ar = new expAjaxReply(200, gt('Your files were deleted successfully'), $file);\n        }\n        $ar->send();\n    }\n\n    public function adder() {\n        global $db;\n\n        $notindb = array();\n        $allfiles = expFile::listFlat(BASE.'files',true,null,array(),BASE);\n        foreach ($allfiles as $path=>$file) {\n            if ($file[0] != '.') {\n//                $found = false;\n                $npath = preg_replace('/'.$file.'/','',$path, 1);\n//                $dbfiles = $db->selectObjects('expFiles',\"filename='\".$file.\"' AND directory='\".$npath.\"'\");\n                $dbfile = $db->selectObject('expFiles',\"filename='\".$file.\"' AND directory='\".$npath.\"'\");\n//                foreach ($dbfiles as $dbfile) {\n//                    if (!empty($dbfile)) $found = ($dbfile->directory == str_replace($file,'',$path));\n//                }\n//                if (!$found) {\n//                    $notindb[$path] = $file;\n//                }\n                if (empty($dbfile)) {\n                    $notindb[$path] = $file;\n                }\n            }\n        }\n        assign_to_template(array(\n            'files'=>$notindb\n        ));\n    }\n\n    public function addit() {\n        foreach ($this->params['addit'] as $file) {\n            $newfile = new expFile(array('directory'=>dirname($file).'/','filename'=>basename($file)));\n            $newfile->posted = $newfile->last_accessed = filemtime($file);\n            $newfile->save();\n            flash('message',$newfile->filename.' '.gt('was added to the File Manager.'));\n        }\n        redirect_to(array(\"controller\"=>'file',\"action\"=>'picker',\"ajax_action\"=>1,\"update\"=>$this->params['update'],\"filter\"=>$this->params['filter']));\n    }\n\n    public function upload() {\n\n        // upload the file, but don't save the record yet...\n        if ($this->params['resize'] != 'false') {\n            $maxwidth = $this->params['max_width'];\n        } else {\n            $maxwidth = null;\n        }\n        $file = expFile::fileUpload('Filedata',false,false,null,null,$maxwidth);\n        // since most likely this function will only get hit via flash in YUI Uploader\n        // and since Flash can't pass cookies, we lose the knowledge of our $user\n        // so we're passing the user's ID in as $_POST data. We then instantiate a new $user,\n        // and then assign $user->id to $file->poster so we have an audit trail for the upload\n\n        if (is_object($file)) {\n            $resized = !empty($file->resized) ? true : false;\n            $user = new user($this->params['usrid']);\n            $file->poster = $user->id;\n            $file->posted = $file->last_accessed = time();\n            $file->save();\n            if (!empty($this->params['cat'])) {\n                $expcat = new expCat($this->params['cat']);\n                $params['expCat'][0] = $expcat->id;\n                $file->update($params);\n            }\n\n            // a echo so YUI Uploader is notified of the function's completion\n            if ($resized) {\n                echo gt('File resized and then saved');\n            } else {\n                echo gt('File saved');\n            }\n        } else {\n            echo gt('File was NOT uploaded!');\n//            flash('error',gt('File was not uploaded!'));\n        }\n    }\n\n    public function quickUpload(){\n        global $user;\n\n        if (!empty($this->params['folder']) || (defined('QUICK_UPLOAD_FOLDER') && QUICK_UPLOAD_FOLDER != '' && QUICK_UPLOAD_FOLDER != 0)) {\n            // prevent attempt to place file somewhere other than /files folder\n            if (!empty($this->params['folder']) && strpos($this->params['folder'], '..') !== false) {\n                $ar = new expAjaxReply(300, gt(\"File was not uploaded!\"));\n                $ar->send();\n            }\n            if (SITE_FILE_MANAGER == 'picker') {\n                $quikFolder = !empty($this->params['folder']) ? $this->params['folder'] :QUICK_UPLOAD_FOLDER;\n                $destDir = null;\n            } elseif (SITE_FILE_MANAGER == 'elfinder') {\n                $quikFolder = null;\n                $destDir = UPLOAD_DIRECTORY_RELATIVE . (!empty($this->params['folder']) ? $this->params['folder'] :QUICK_UPLOAD_FOLDER) . '/';\n                // create folder if non-existant\n                expFile::makeDirectory($destDir);\n            }\n        } else {\n            $quikFolder = null;\n            $destDir = null;\n        }\n\n        //extensive suitability check before doing anything with the file...\n        if (isset($_SERVER['HTTP_X_FILE_NAME'])) {  //HTML5 XHR upload\n            $file = expFile::fileXHRUpload($_SERVER['HTTP_X_FILE_NAME'],false,false,null,$destDir,intval(QUICK_UPLOAD_WIDTH));\n            $file->poster = $user->id;\n            $file->posted = $file->last_accessed = time();\n            $file->save();\n            if (!empty($quikFolder)) {\n                $expcat = new expCat($quikFolder);\n                $params['expCat'][0] = $expcat->id;\n                $file->update($params);\n            }\n            $ar = new expAjaxReply(200, gt('Your File was uploaded successfully'), $file->id);\n            $ar->send();\n        } else {  //$_POST upload\n            if (($_FILES['uploadfile'] == \"none\") OR (empty($_FILES['uploadfile']['name'])) ) {\n                $message = gt(\"No file uploaded.\");\n            } else if ($_FILES['uploadfile'][\"size\"] == 0) {\n                $message = gt(\"The file is zero length.\");\n    //            } else if (($_FILES['upload'][\"type\"] != \"image/pjpeg\") AND ($_FILES['upload'][\"type\"] != \"image/jpeg\") AND ($_FILES['upload'][\"type\"] != \"image/png\")) {\n    //                $message = gt(\"The image must be in either JPG or PNG format. Please upload a JPG or PNG instead.\");\n            } else if (!is_uploaded_file($_FILES['uploadfile'][\"tmp_name\"])) {\n                $message = gt(\"You may be attempting to hack our server.\");\n            } else {\n                // upload the file, but don't save the record yet...\n                $file = expFile::fileUpload('uploadfile',false,false,null,$destDir,intval(QUICK_UPLOAD_WIDTH));\n                // since most likely this function will only get hit via flash in YUI Uploader\n                // and since Flash can't pass cookies, we lose the knowledge of our $user\n                // so we're passing the user's ID in as $_POST data. We then instantiate a new $user,\n                // and then assign $user->id to $file->poster so we have an audit trail for the upload\n                if (is_object($file)) {\n                    $file->poster = $user->id;\n                    $file->posted = $file->last_accessed = time();\n                    $file->save();\n                    if (!empty($quikFolder)) {\n                        $expcat = new expCat($quikFolder);\n                        $params['expCat'][0] = $expcat->id;\n                        $file->update($params);\n                    }\n                    $ar = new expAjaxReply(200, gt('Your File was uploaded successfully'), $file->id);\n                } else {\n                    $ar = new expAjaxReply(300, gt(\"File was not uploaded!\").' - '.$file);\n                }\n                $ar->send();\n            }\n        }\n    }\n\n    public function editCat() {\n        global $user;\n        $file = new expFile($this->params['id']);\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $expcat = new expCat($this->params['newValue']);\n            $params['expCat'][0] = $expcat->id;\n            $file->update($params);\n            $file->cat = $expcat->title;\n            $file->catid = $expcat->id;\n            $ar = new expAjaxReply(200, gt('Your Folder was updated successfully'), $file);\n        } else {\n            $ar = new expAjaxReply(300, gt(\"You didn't create this file, so you can't edit it.\"));\n        }\n        $ar->send();\n    }\n\n    public function editTitle() {\n        global $user;\n        $file = new expFile($this->params['id']);\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $file->title = $this->params['newValue'];\n            $file->save();\n            $ar = new expAjaxReply(200, gt('Your title was updated successfully'), $file);\n        } else {\n            $ar = new expAjaxReply(300, gt(\"You didn't create this file, so you can't edit it.\"));\n        }\n        $ar->send();\n    }\n\n    public function editAlt() {\n        global $user;\n        $file = new expFile($this->params['id']);\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $file->alt = $this->params['newValue'];\n            $file->save();\n            $ar = new expAjaxReply(200, gt('Your alt was updated successfully'), $file);\n        } else {\n            $ar = new expAjaxReply(300, gt(\"You didn't create this file, so you can't edit it.\"));\n        }\n        $ar->send();\n        echo json_encode($file);  //FIXME we exit before hitting this\n    }\n\n    public function editShare() {\n        global $user;\n        $file = new expFile($this->params['id']);\n\t\tif(!isset($this->params['newValue'])) {\n\t\t\t$this->params['newValue'] = 0;\n\t\t}\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $file->shared = $this->params['newValue'];\n            $file->save();\n            $ar = new expAjaxReply(200, gt('This file is now shared.'), $file);\n        } else {\n            $ar = new expAjaxReply(300, gt(\"You didn't create this file, so it's not yours to share.\"));\n        }\n        $ar->send();\n        echo json_encode($file);  //FIXME we exit before hitting this\n    }\n\n    public function import_eql() {\n    }\n\n    public  function import_eql_process() {\n        global $db;\n\n        if ($_FILES['file']['error'] != UPLOAD_ERR_OK) {\n        \tswitch($_FILES['file']['error']) {\n        \t\tcase UPLOAD_ERR_INI_SIZE:\n        \t\tcase UPLOAD_ERR_FORM_SIZE:\n        \t\t\techo gt('The file you uploaded exceeded the size limits for the server.').'<br />';\n        \t\t\tbreak;\n        \t\tcase UPLOAD_ERR_PARTIAL:\n        \t\t\techo gt('The file you uploaded was only partially uploaded.').'<br />';\n        \t\t\tbreak;\n        \t\tcase UPLOAD_ERR_NO_FILE:\n        \t\t\techo gt('No file was uploaded.').'<br />';\n        \t\t\tbreak;\n        \t}\n        } else {\n            $errors = array();\n            expSession::clearAllUsersSessionCache();\n\n            // copy in deprecated definitions files to aid in import\n            $src = BASE . \"install/old_definitions\";\n            $dst = BASE . \"framework/core/definitions\";\n            if (is_dir($src) && expUtil::isReallyWritable($dst)) {\n                $dir = opendir($src);\n                while (false !== ($file = readdir($dir))) {\n                    if (($file != '.') && ($file != '..')) {\n                        if (!file_exists($dst . '/' . $file)) {\n                            copy($src . '/' . $file, $dst . '/' . $file);\n                        }\n                    }\n                }\n                closedir($dir);\n            }\n\n            expFile::restoreDatabase($_FILES['file']['tmp_name'], $errors);\n\n            // now remove deprecated definitions files\n            $src = BASE . \"install/old_definitions\";\n            $dst = BASE . \"framework/core/definitions\";\n            if (is_dir($src) && expUtil::isReallyWritable($dst)) {\n                $dir = opendir($src);\n                while (false !== ($file = readdir($dir))) {\n                    if (($file != '.') && ($file != '..')) {\n                        if (file_exists($dst . '/' . $file)) {\n                            unlink($dst . '/' . $file);\n                        }\n                        // remove empty deprecated tables\n                        $table = substr($file, 0, -4);\n                        if ($db->tableIsEmpty($table)) {\n                            $db->dropTable($table);\n                        }\n                    }\n                }\n                closedir($dir);\n            }\n\n            // update search index\n            searchController::spider();\n\n            // check to see if we need to install or upgrade the restored database\n            expVersion::checkVersion();\n\n            assign_to_template(\n                array(\n                    'success' => !count($errors),\n                    'errors' => $errors,\n                )\n            );\n        }\n    }\n\n    public static function getTables() {\n        global $db;\n\n        expDatabase::fix_table_names();\n        $tables = $db->getTables();\n        if (!function_exists('tmp_removePrefix')) {\n        \tfunction tmp_removePrefix($tbl) {\n        \t\t// we add 1, because DB_TABLE_PREFIX  no longer has the trailing\n        \t\t// '_' character - that is automatically added by the database class.\n        \t\treturn substr($tbl,strlen(DB_TABLE_PREFIX)+1);\n        \t}\n        }\n        $tables = array_map('tmp_removePrefix',$tables);\n        usort($tables,'strnatcmp');\n        return $tables;\n    }\n\n    public function export_eql() {\n//        global $db, $user;\n        global $user;\n\n//        expDatabase::fix_table_names();\n//        $tables = $db->getTables();\n//        if (!function_exists('tmp_removePrefix')) {\n//        \tfunction tmp_removePrefix($tbl) {\n//        \t\t// we add 1, because DB_TABLE_PREFIX  no longer has the trailing\n//        \t\t// '_' character - that is automatically added by the database class.\n//        \t\treturn substr($tbl,strlen(DB_TABLE_PREFIX)+1);\n//        \t}\n//        }\n//        $tables = array_map('tmp_removePrefix',$tables);\n//        usort($tables,'strnatcmp');\n\n        assign_to_template(array(\n            'user' => $user,\n            'tables' => self::getTables(),\n        ));\n    }\n\n    public function export_eql_process() {\n//        global $db;\n\n        if (!isset($this->params['tables'])) { // No checkboxes clicked so we'll dump all tables\n            $this->params['tables'] = self::getTables();\n            $this->params['tables'] = array_flip($this->params['tables']);\n        }\n//        \techo gt('You must choose at least one table to export.');\n//        } else { // All good\n        \t$filename = str_replace(\n        \t\tarray('__DOMAIN__','__DB__'),\n        \t\tarray(str_replace('.','_',HOSTNAME),DB_NAME),\n                $this->params['filename']);\n        \t$filename = preg_replace('/[^A-Za-z0-9_.-]/','-',strftime($filename,time()).'.eql');\n\n        \tob_end_clean();\n        \tob_start(\"ob_gzhandler\");\n\n        \tif (isset($this->params['save_sample'])) { // Save as a theme sample is checked off\n        \t\t$path = BASE . \"themes/\".DISPLAY_THEME.\"/sample.eql\";\n        \t\tif (!$eql = fopen ($path, \"w\")) {\n        \t\t\tflash('error',gt(\"Error opening eql file for writing\").\" \".$path);\n        \t\t} else {\n                    //TODO we need to write inside call passing $eql file pointer\n                    $eqlfile = expFile::dumpDatabase(array_keys($this->params['tables']));\n        \t\t\tif (fwrite ($eql, $eqlfile)  === FALSE) {\n        \t\t\t\tflash('error',gt(\"Error writing to eql file\").\" \".$path);\n        \t\t\t}\n        \t\t\tfclose ($eql);\n        \t\t\tflash('message',gt(\"Sample database (eql file) saved to\").\" '\".DISPLAY_THEME.\"' \".gt(\"theme\"));\n        \t\t\texpHistory::back();\n        \t\t}\n        \t} else {\n        \t\t// This code was lifted from phpMyAdmin, but this is Open Source, right?\n\n        \t\t// 'application/octet-stream' is the registered IANA type but\n        \t\t//        MSIE and Opera seems to prefer 'application/octetstream'\n        \t\t$mime_type = (EXPONENT_USER_BROWSER == 'IE' || EXPONENT_USER_BROWSER == 'OPERA') ? 'application/octetstream' : 'application/octet-stream';\n\n        \t\theader('Content-Type: ' . $mime_type);\n        \t\theader('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n        \t\t// IE need specific headers\n        \t\tif (EXPONENT_USER_BROWSER == 'IE') {\n        \t\t\theader('Content-Disposition: inline; filename=\"' . $filename . '\"');\n        \t\t\theader('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n        \t\t\theader('Pragma: public');\n        \t\t} else {\n        \t\t\theader('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n        \t\t\theader('Pragma: no-cache');\n        \t\t}\n                echo expFile::dumpDatabase(array_keys($this->params['tables']));  //FIXME we need to echo inside call\n        \t\texit; // Exit, since we are exporting\n        \t}\n//        }\n    }\n\n    public function import_files() {\n    }\n\n    public function import_files_process() {\n        if ($_FILES['file']['error'] != UPLOAD_ERR_OK) {\n        \tswitch($_FILES['file']['error']) {\n        \t\tcase UPLOAD_ERR_INI_SIZE:\n        \t\tcase UPLOAD_ERR_FORM_SIZE:\n        \t\t\techo gt('The file you uploaded exceeded the size limits for the server.').'<br />';\n        \t\t\tbreak;\n        \t\tcase UPLOAD_ERR_PARTIAL:\n        \t\t\techo gt('The file you uploaded was only partially uploaded.').'<br />';\n        \t\t\tbreak;\n        \t\tcase UPLOAD_ERR_NO_FILE:\n        \t\t\techo gt('No file was uploaded.').'<br />';\n        \t\t\tbreak;\n        \t}\n        } else {\n        \t$basename = basename($_FILES['file']['name']);\n\n        \tinclude_once(BASE.'external/Tar.php');\n        \t$tar = new Archive_Tar($_FILES['file']['tmp_name'],'gz');\n\n        \t$dest_dir = BASE.'tmp/extensionuploads/'.uniqid('');\n        \t@mkdir($dest_dir,DIR_DEFAULT_MODE_STR);\n        \tif (!file_exists($dest_dir)) {\n        \t\techo gt('Unable to create temporary directory to extract files archive.');\n        \t} else {\n        \t\t$return = $tar->extract($dest_dir);\n        \t\tif (!$return) {\n        \t\t\techo '<br />'.gt('Error extracting TAR archive').'<br />';\n        \t\t} else if (!file_exists($dest_dir.'/files') || !is_dir($dest_dir.'/files')) {\n        \t\t\techo '<br />'.gt('Invalid archive format, no \\'/files\\' folder').'<br />';\n        \t\t} else {\n        \t\t\t// Show the form for specifying which mod types to 'extract'\n\n        \t\t\t$mods = array(); // Stores the mod classname, the files list, and the module's real name\n\n        \t\t\t$dh = opendir($dest_dir.'/files');\n        \t\t\twhile (($file = readdir($dh)) !== false) {\n        \t\t\t\tif ($file{0} != '.' && is_dir($dest_dir.'/files/'.$file)) {\n        \t\t\t\t\t$mods[$file] = array(\n        \t\t\t\t\t\t'',\n        \t\t\t\t\t\tarray_keys(expFile::listFlat($dest_dir.'/files/'.$file,1,null,array(),$dest_dir.'/files/'))\n        \t\t\t\t\t);\n        //\t\t\t\t\tif (class_exists($file)) {\n        //\t\t\t\t\t\t$mods[$file][0] = call_user_func(array($file,'name')); // $file is the class name of the module\n        //\t\t\t\t\t}\n        \t\t\t\t} elseif ($file != '.' && $file != '..') {\n        \t\t\t\t\t$mods[$file] = array(\n        \t\t\t\t\t\t'',\n        \t\t\t\t\t\t$file\n        \t\t\t\t\t);\n        \t\t\t\t}\n        \t\t\t}\n\n                    assign_to_template(array(\n                        'dest_dir' => $dest_dir,\n                        'file_data' => $mods,\n                    ));\n        \t\t}\n        \t}\n        }\n    }\n\n    public function import_files_extract() {\n        $dest_dir = $this->params['dest_dir'];\n        $files = array();\n        foreach (array_keys($this->params['mods']) as $file) {\n        \t$files[$file] = expFile::canCreate(BASE.'files/'.$file);\n        //\tif (class_exists($mod)) {\n        //\t\t$files[$mod][0] = call_user_func(array($mod,'name'));\n        //\t}\n        //\tforeach (array_keys(expFile::listFlat($dest_dir.'/files',1,null,array(),$dest_dir.'/files/')) as $file) {\n        //\t\t$files[$mod][1][$file] = expFile::canCreate(BASE.'files/'.$file);\n        //\t}\n        }\n\n        expSession::set('dest_dir',$dest_dir);\n        expSession::set('files_data',$files);\n\n        assign_to_template(array(\n            'files_data' => $files,\n        ));\n    }\n\n    public function import_files_finish() {\n        $dest_dir = expSession::get('dest_dir');\n        $files = expSession::get('files_data');\n        if (!file_exists(BASE.'files')) {\n        \tmkdir(BASE.'files',DIR_DEFAULT_MODE_STR);\n        }\n\n        $filecount = 0;\n        foreach (array_keys($files) as $file) {\n            expFile::copyDirectoryStructure($dest_dir.'/files/'.$file,BASE.'files/'.$file);\n        \tcopy($dest_dir.'/files/'.$file,BASE.'files/'.$file);\n        \t$filecount++;\n        }\n\n        expSession::un_set('dest_dir');\n        expSession::un_set('files_data');\n\n        expFile::removeDirectory($dest_dir);\n\n        assign_to_template(array(\n            'file_count' => $filecount,\n        ));\n    }\n\n    public function export_files() {\n        global $user;\n\n        $loc = expCore::makeLocation($this->params['controller'],isset($this->params['src'])?$this->params['src']:null,isset($this->params['int'])?$this->params['int']:null);\n        //$mods = array();\n        //$dh = opendir(BASE.'files');\n        //while (($file = readdir($dh)) !== false) {\n        //\tif (is_dir(BASE.'files/'.$file) && $file{0} != '.' && class_exists($file)) {\n        //\t\t$mods[$file] = call_user_func(array($file,'name'));\n        //\t}\n        //}\n        //uasort($mods,'strnatcmp');\n\n        assign_to_template(array(\n            'user' => $user,\n        ));\n    }\n\n    public function export_files_process() {\n//        global $db;\n\n        //if (!isset($this->params['mods'])) {\n        //\techo gt('You must select at least one module to export files for.');\n        //\treturn;\n        //}\n\n        include_once(BASE.'external/Tar.php');\n\n        $files = array();\n        //foreach (array_keys($this->params['mods']) as $mod) {\n        //\tforeach ($db->selectObjects('file',\"directory LIKE 'files/\".$mod.\"%'\") as $file) {\n//            foreach ($db->selectObjects('expFiles',1) as $file) {\n        foreach (expFile::selectAllFiles() as $file) {\n            $files[] = BASE.$file->directory.$file->filename;\n        }\n        //}\n\n        $fname = tempnam(BASE.'/tmp','exporter_files_');\n        $tar = new Archive_Tar($fname,'gz');\n        $tar->createModify($files,'',BASE);\n\n        $filename = str_replace(\n            array('__DOMAIN__','__DB__'),\n            array(str_replace('.','_',HOSTNAME),DB_NAME),\n            $this->params['filename']);\n        $filename = preg_replace('/[^A-Za-z0-9_.-]/','-',strftime($filename,time()).'.tar.gz');\n\n        if (isset($this->params['save_sample'])) { // Save as a theme sample is checked off\n            copy($fname,BASE . \"themes/\".DISPLAY_THEME_REAL.\"/sample.tar.gz\");\n            unlink($fname);\n            flash('message',gt(\"Sample uploaded files archive saved to\").\" '\".DISPLAY_THEME_REAL.\"' \".gt(\"theme\"));\n            expHistory::back();\n        } else {\n            ob_end_clean();\n            // This code was lifted from phpMyAdmin, but this is Open Source, right?\n\n            // 'application/octet-stream' is the registered IANA type but\n            //        MSIE and Opera seems to prefer 'application/octetstream'\n            $mime_type = (EXPONENT_USER_BROWSER == 'IE' || EXPONENT_USER_BROWSER == 'OPERA') ? 'application/octetstream' : 'application/octet-stream';\n\n            header('Content-Type: ' . $mime_type);\n            header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n            // IE need specific headers\n            if (EXPONENT_USER_BROWSER == 'IE') {\n                header('Content-Disposition: inline; filename=\"' . $filename . '\"');\n                header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n                header('Pragma: public');\n            } else {\n                header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n                header('Pragma: no-cache');\n            }\n\n            $fh = fopen($fname,'rb');\n            while (!feof($fh)) {\n                echo fread($fh,8192);\n            }\n            fclose($fh);\n            unlink($fname);\n        }\n\n        exit(''); // Exit, since we are exporting.\n    }\n\n}\n\n?>", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package    Modules\n */\n/** @define \"BASE\" \"../../../..\" */\n\nclass usersController extends expController {\n    public $basemodel_name = 'user';\n//    protected $remove_permissions = array(\n//        'create',\n//        'edit'\n//    );\n    protected $manage_permissions = array(\n        'toggle_extension' => 'Activate Extensions',\n        'kill_session'     => 'End Sessions',\n        'boot_user'        => 'Boot Users',\n        'userperms'        => 'User Permissions',\n        'groupperms'       => 'Group Permissions',\n        'import'           => 'Import Users',\n        'export'           => 'Export Users',\n        'update'           => 'Update Users',\n    );\n\n    static function displayname() {\n        return gt(\"User Manager\");\n    }\n\n    static function description() {\n        return gt(\"This is the user management module. It allows for creating user, editing user, etc.\");\n    }\n\n    static function hasSources() {\n        return false;\n    }\n\n    static function hasContent() {\n        return false;\n    }\n\n    static function canImportData() {\n        return true;\n    }\n\n    public function manage() {\n        global $user;\n\n        expHistory::set('manageable', $this->params);\n//        $limit = empty($this->config['limit']) ? 10 : $this->config['limit'];\n//        $order = empty($this->config['order']) ? 'username' : $this->config['order'];\n        if ($user->is_system_user == 1) {\n//            $filter = 1; //'1';\n            $where = '';\n        } elseif ($user->isSuperAdmin()) {\n//            $filter = 2; //\"is_system_user != 1\";\n            $where = \"is_system_user != 1\";\n        } else {\n//            $filter = 3; //\"is_admin != 1\";\n            $where = \"is_admin != 1\";\n        }\n        $page = new expPaginator(array(\n                    'model'=>'user',\n                    'where'=>$where,\n//                    'limit'=>$limit,\n//                    'order'=>$order,\n                    'page'=>(isset($this->params['page']) ? $this->params['page'] : 1),\n                    'controller'=>$this->baseclassname,\n                    'action'=>$this->params['action'],\n                    'columns'=>array(\n                        gt('Username')=>'username',\n                        gt('First Name')=>'firstname',\n                        gt('Last Name')=>'lastname',\n                        gt('Is Admin')=>'is_acting_admin',\n                    )\n                ));\n\n        assign_to_template(array('page'=>$page));\n//        assign_to_template(array(\n//            'filter' => $filter\n//        ));\n    }\n\n    public function create() {\n        redirect_to(array('controller' => 'users', 'action' => 'edituser'));\n//        $this->edituser();\n    }\n\n    public function edituser() {\n        global $user, $db;\n\n        // set history\n        expHistory::set('editable', $this->params);\n        expSession::set(\"userkey\", sha1(microtime()));\n        expSession::clearCurrentUserSessionCache();\n\n        $id = !empty($this->params['id']) ? $this->params['id'] : null;\n\n        // check to see if we should be editing.  You either need to be an admin, or editing own account.\n        if ($user->isAdmin() || ($user->id == $id && !$user->globalPerm('prevent_profile_change'))) {\n            $u = new user($id);\n            if ($u->isSuperAdmin() && $user->isActingAdmin()) {  // prevent regular admin's from editing super-admins\n                flash('error', gt('You do not have the proper permissions to edit this user'));\n                expHistory::back();\n            }\n        } else {\n            flash('error', gt('You do not have the proper permissions to edit this user'));\n            expHistory::back();\n        }\n        $active_extensions = $db->selectObjects('profileextension', 'active=1', 'rank');\n\n        //If there is no image uploaded, use the default avatar\n        if (empty($u->image)) $u->image = PATH_RELATIVE . \"framework/modules/users/assets/images/avatar_not_found.jpg\";\n\n        assign_to_template(array(\n            'edit_user'  => $u,\n            'extensions' => $active_extensions,\n            \"userkey\"    => expSession::get(\"userkey\")\n        ));\n\n        if ($user->isAdmin()) {\n            $page = new expPaginator(array(\n                'model'      => 'group',\n                'where'      => 1,\n                'limit'      => (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10,\n                'order'      => empty($this->config['order']) ? 'name' : $this->config['order'],\n                'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n                'columns'    => array(\n                    gt('Name')        => 'name',\n                    gt('Description') => 'description',\n                ),\n                'controller' => $this->baseclassname,\n                'action'     => $this->params['action'],\n            ));\n\n            assign_to_template(array(\n                'groups' => $page,\n                'mygroups' => $u->getGroupMemberships(),\n            ));\n        }\n    }\n\n    public function update() {\n        global $user, $db;\n\n        // get the id of user we are editing, if there is one\n        $id = !empty($this->params['id']) ? $this->params['id'] : null;\n        if ((($user->id == $id) || $user->isAdmin()) && $this->params['userkey'] != expSession::get(\"userkey\")) expHistory::back();\n\n        // make sure this user should be updating user accounts\n        if (!$user->isLoggedIn() && SITE_ALLOW_REGISTRATION == 0) {\n            flash('error', gt('This site does not allow user registrations'));\n            expHistory::back();\n        } elseif (!$user->isAdmin() && ($user->isLoggedIn() && $user->id != $id)) {\n            flash('error', gt('You do not have permission to edit this user account'));\n            expHistory::back();\n        }\n\n        // if this is a new user account we need to check the password.\n        // the password fields wont come thru on an edit. Otherwise we will\n        // just update the existing account.\n        if (!empty($id)) {\n            $u = new user($id);\n            $u->update($this->params);\n            if ($user->isAdmin() && $user->id != $id) {\n                flash('message', gt('Account information for') . ' ' . $u->username . ' ' . gt('has been updated.'));\n            } else {\n                flash('message', gt('Thank you') . ' ' . $u->firstname . '.  ' . gt('Your account information has been updated.'));\n            }\n            if ($user->id == $id) {\n                $_SESSION[SYS_SESSION_KEY]['user'] = $u;\n                $user = $u;\n            }\n        } else {\n            $u = new user($this->params);\n            $ret = $u->setPassword($this->params['pass1'], $this->params['pass2']);\n            if ($ret != true) expValidator::failAndReturnToForm($ret, $this->params);\n            $u->save();\n            if ($user->isAdmin()) {\n                flash('message', gt('Created new user account for') . ' ' . $u->username);\n            } else {\n                user::login($u->username, $this->params['pass1']);\n                flash('message', gt('Thank you') . ' ' . $u->firstname . '.  ' . gt('Your new account has been created.'));\n            }\n        }\n\n        // update the user profiles\n        if (!empty($u->id)) {\n            $this->params['user_id'] = $u->id;\n            // get the active profile extensions and save them out\n            $active_extensions = $db->selectObjects('profileextension', 'active=1');\n            foreach ($active_extensions as $pe) {\n                if (is_file(BASE . $pe->classfile)) {\n                    include_once(BASE . $pe->classfile);\n                    $ext = new $pe->classname();\n                    $db->delete($ext->tablename, 'user_id=' . $u->id);\n                    $ext->update($this->params);\n                }\n            }\n        }\n\n        // update group membership assignment\n        if (!empty($this->params['member'])) {\n            $old_groups = $db->selectObjects('groupmembership', 'member_id=' . $u->id);\n//            $db->delete('groupmembership', 'member_id=' . $u->id);  // start from scratch\n            $memb = new stdClass();\n            $memb->member_id = $u->id;\n            foreach ($this->params['member'] as $grp) {\n                $memb->group_id = $grp;\n                $memb->is_admin = false;\n                foreach ($old_groups as $oldgroup) {\n                    if ($oldgroup->group_id == $grp) {\n                        if ($oldgroup->is_admin) $memb->is_admin = true;  // retain group admin setting\n                    }\n                }\n                $db->insertObject($memb, 'groupmembership');\n            }\n            if ($u->id == $user->id) expSession::triggerRefresh();\n        }\n\n        // if this is a new account then we will check to see if we need to send\n        // a welcome message or admin notification of new accounts.\n        if (empty($id)) {\n            // Calculate Group Memberships for newly created users.  Any groups that\n            // are marked as 'inclusive' automatically pick up new users.  This is the part\n            // of the code that goes out, finds those groups, and makes the new user a member\n            // of them.\n            $memb = new stdClass();\n            $memb->member_id = $u->id;\n            // Also need to process the groupcodes, for promotional signup\n//            $code_where = '';\n//            if (isset($this->params['groupcode']) && $this->params['groupcode'] != '') {\n//                $code_where = \" OR code='\" . $this->params['groupcode'] . \"'\";\n//            }\n            // Add to default plus any groupcode groups\n//            foreach ($db->selectObjects('group', 'inclusive=1' . $code_where) as $g) {\n            foreach ($db->selectObjects('group', 'inclusive=1') as $g) {\n                $memb->group_id = $g->id;\n                $db->insertObject($memb, 'groupmembership');\n            }\n\n            // if we added the user to any group than we need to reload their permissions\n//            expPermissions::load($u);  //FIXME why are we doing this? this loads the edited user perms over the current user???\n\n            //signup email stuff\n            if (USER_REGISTRATION_SEND_WELCOME && !empty($u->email)) {\n                $msg = $u->firstname . \", \\n\\n\";\n                $msg .= sprintf(USER_REGISTRATION_WELCOME_MSG, $u->firstname, $u->lastname, $u->username);\n\n                $mail = new expMail();\n                $mail->quickSend(array(\n                    'text_message' => $msg,\n                    'to'           => array(trim($u->email) => trim(user::getUserAttribution($u->id))),\n                    'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n                    'subject'      => USER_REGISTRATION_WELCOME_SUBJECT,\n                ));\n\n                flash('message', gt('A welcome email has been sent to') . ' ' . $u->email);\n            }\n\n            // send and email notification to the admin of the site.\n            if (USER_REGISTRATION_SEND_NOTIF && !$user->isAdmin()) {\n                $msg = gt(\"When\") . \": \" . date(\"F j, Y, g:i a\") . \"\\n\\n\";\n                $msg .= gt(\"Their name is\") . \": \" . $u->firstname . \" \" . $u->lastname . \"\\n\\n\";\n\n                $mail = new expMail();\n                $mail->quickSend(array(\n                    'text_message' => $msg,\n                    'to'           => trim(USER_REGISTRATION_ADMIN_EMAIL),\n                    'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n                    'subject'      => USER_REGISTRATION_NOTIF_SUBJECT,\n                ));\n            }\n        }\n\n        // we need to reload our updated profile if we just edited our own account\n        if ($id == $user->id) {\n            $user->getUserProfile();\n//            expPermissions::load($user);  // not sure this is necessary since we can't add groups here\n        }\n\n        expHistory::back();\n    }\n\n    public function delete() {\n        global $user, $db;\n        if (!$user->isAdmin()) {\n            flash('error', gt('You do not have permission to delete user accounts'));\n            expHistory::back();\n        }\n\n        if (empty($this->params['id'])) {\n            flash('error', gt('No user selected.'));\n            expHistory::back();\n        }\n\n        // remove group memeberships\n        $db->delete('groupmembership', 'member_id=' . $this->params['id']);\n\n        // remove user permissions\n        $db->delete('userpermission', 'uid=' . $this->params['id']);\n\n        //remove user profiles\n        $active_extensions = $db->selectObjects('profileextension', 'active=1');\n        foreach ($active_extensions as $pe) {\n            if (is_file(BASE . $pe->classfile)) {\n                include_once(BASE . $pe->classfile);\n                $ext = new $pe->classname();\n                $db->delete($ext->table, 'user_id=' . $this->params['id']);\n            }\n        }\n\n        // remove user address\n        $address = new address();\n        $db->delete($address->table, 'user_id=' . $this->params['id']);\n\n        parent::delete();\n    }\n\n    public function manage_sessions() {\n//        global $db, $user;\n        global $db;\n\n        expHistory::set('manageable', $this->params);\n\n        //cleans up any old sessions\n        if (SESSION_TIMEOUT_ENABLE == true) {\n            $db->delete('sessionticket', 'last_active < ' . (time() - SESSION_TIMEOUT));\n//        } else {\n//            $db->delete('sessionticket', '1');\n        }\n\n        if (isset($this->params['id']) && $this->params['id'] == 0) {\n            $sessions = $db->selectObjects('sessionticket', \"uid<>0\");\n            $filtered = 1;\n        } else {\n            $sessions = $db->selectObjects('sessionticket');\n            $filtered = 0;\n        }\n\n//\t    $sessions = $db->selectObjects('sessionticket');\n        for ($i = 0, $iMax = count($sessions); $i < $iMax; $i++) {\n            $sessions[$i]->user = new user($sessions[$i]->uid);\n            if ($sessions[$i]->uid == 0) {\n                $sessions[$i]->user->id = 0;\n            }\n            $sessions[$i]->duration = expDateTime::duration($sessions[$i]->last_active, $sessions[$i]->start_time);\n        }\n\n        assign_to_template(array(\n            'sessions' => $sessions,\n            'filter'   => $filtered\n        ));\n    }\n\n    public function kill_session() {\n        global $user, $db;\n        $ticket = $db->selectObject('sessionticket', \"ticket='\" . preg_replace('/[^A-Za-z0-9.]/', '', $this->params['ticket']) . \"'\");\n        if ($ticket) {\n            $u = new user($ticket->uid);\n            if ($user->isSuperAdmin() || ($user->isActingAdmin() && !$u->isAdmin())) {\n                // We can only kick the user if they are A) not an acting admin, or\n                // B) The current user is a super user and the kicked user is not.\n                $db->delete('sessionticket', \"ticket='\" . $ticket->ticket . \"'\");\n            }\n        }\n        expHistory::back();\n    }\n\n    public function boot_user() {\n        global $user, $db;\n        if (!empty($this->params['id'])) {\n            $u = new user($this->params['id']);\n            if ($user->isSuperAdmin() || ($user->isActingAdmin() && !$u->isAdmin())) {\n                // We can only kick the user if they are A) not an acting admin, or\n                // B) The current user is a super user and the kicked user is not.\n                $db->delete('sessionticket', 'uid=' . $u->id);\n            }\n        }\n        expHistory::back();\n    }\n\n    /**\n    \u00a0*\u00a0This function scans two directories and searches for php files to add to the extensions database.\n     * If you have added new extensions since the last time you have visited the page, it will add them to the database\n     * in effect enabling your new extension to be tacked onto users profiles. You then have to enable it in the menu, but at least\n     * now it is in the system and when the user goes to edit his profile, it will check for extensions and this one will be in!\n     *\n    \u00a0*\u00a0@global\u00a0string\u00a0This function uses the global $db save information through the Exponenet database connection.\n    \u00a0*/\n    public function manage_extensions() {\n        global $db;\n\n        // set history\n        expHistory::set('manageable', $this->params);\n\n        // Lets find all the user profiles availabe and then see if they are\n        // in the database yet.  If not we will add them.\n        $ext_dirs = array(\n            'framework/modules/users/extensions',\n            'themes/' . DISPLAY_THEME . '/modules/users/extensions'\n        );\n        foreach ($ext_dirs as $dir) {\n            if (is_readable(BASE . $dir)) {\n                $dh = opendir(BASE . $dir);\n                while (($file = readdir($dh)) !== false) {\n                    if (is_file(BASE . \"$dir/$file\") && is_readable(BASE . \"$dir/$file\") && substr($file, 0, 1) != '_' && substr($file, 0, 1) != '.') {\n                        include_once(BASE . \"$dir/$file\");\n                        $classname = substr($file, 0, -4);\n                        $class = new $classname();\n                        $extension = $db->selectObject('profileextension', \"title='\" . $class->name() . \"'\");\n                        if (empty($extension->id)) {\n                            $pe = new profileextension();\n                            $pe->title = $class->name();\n                            $pe->body = $class->description();\n                            $pe->classfile = \"$dir/$file\";\n                            $pe->classname = $classname;\n                            $pe->save();\n                        }\n                    }\n                }\n            }\n        }\n\n        $page = new expPaginator(array(\n            'model'      => 'profileextension',\n            'where'      => 1,\n            'limit'      => 25,\n            'order'      => 'title',\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns'    => array(\n                gt('Name')        => 'title',\n                gt('Description') => 'body',\n                gt('Active')      => 'active'\n            ),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n        ));\n\n        assign_to_template(array(\n            'page' => $page\n        ));\n    }\n\n    public function manage_groups() {\n        expHistory::set('manageable', $this->params);\n        $page = new expPaginator(array(\n            'model'      => 'group',\n            'where'      => 1,\n//            'limit'      => (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10,\n            'order'      => empty($this->config['order']) ? 'name' : $this->config['order'],\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns'    => array(\n                gt('Name')        => 'name',\n                gt('Description') => 'description',\n                gt('Type')        => 'inclusive',\n            ),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n        ));\n\n        foreach ($page->records as $key=>$group) {\n            $page->records[$key]->members = group::getUsersInGroup($group->id);\n        }\n\n        assign_to_template(array(\n            'page' => $page,\n        ));\n    }\n\n    public function reset_password() {\n        expHistory::set('editable', $this->params);\n    }\n\n    public function send_new_password() {\n        global $db;\n\n        // find the user\n        $this->params['username'] = expString::escape($this->params['username']);\n        $u = user::getUserByName($this->params['username']);\n        if (empty($u)) {\n            $u = user::getUserByEmail($this->params['username']);\n            if (!empty($u) && $u->count > 1) {\n                expValidator::failAndReturnToForm(gt('That email address applies to more than one user account, please enter your username instead.'));\n            }\n        }\n        $u = new user($u->id);\n\n        if (!expValidator::check_antispam($this->params)) {\n            expValidator::failAndReturnToForm(gt('Anti-spam verification failed.  Please try again.'), $this->params);\n        } elseif (empty($u->id)) {\n            expValidator::failAndReturnToForm(gt('We were unable to find an account with that username/email'), $this->params);\n        } elseif (empty($u->email)) {\n            expValidator::failAndReturnToForm(gt('Your account does not appear to have an email address.  Please contact the site administrators to reset your password'), $this->params);\n        } elseif ($u->isAdmin()) {\n            expValidator::failAndReturnToForm(gt('You cannot reset passwords for an administrator account.'), $this->params);\n        }\n\n        $tok = new stdClass();\n        $tok->uid = $u->id;\n        $tok->expires = time() + 2 * 3600;\n        $tok->token = md5(time()) . uniqid('');\n\n        $email = $template = expTemplate::get_template_for_action($this, 'email/password_reset_email', $this->loc);\n        $email->assign('token', $tok);\n        $email->assign('username', $u->username);\n        $msg = $email->render();\n        $mail = new expMail();\n        $mail->quickSend(array(\n            'html_message' => $msg,\n            'to'           => array(trim($u->email) => trim(user::getUserAttribution($u->id))),\n            'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n            'subject'      => gt('Password Reset Requested'),\n        ));\n\n        $db->delete('passreset_token', 'uid=' . $u->id);\n        $db->insertObject($tok, 'passreset_token');\n        flash('message', gt('An email has been sent to you with instructions on how to finish resetting your password.') . '<br><br>' .\n            gt('This new password request is only valid for 2 hours.  If you have not completed the password reset process within 2 hours, the new password request will expire.'));\n\n        expHistory::back();\n    }\n\n    public function confirm_password_reset() {\n        global $db;\n\n        $db->delete('passreset_token', 'expires < ' . time());\n        $tok = $db->selectObject('passreset_token', 'uid=' . intval($this->params['uid']) . \" AND token='\" . preg_replace('/[^A-Za-z0-9]/', '', expString::escape($this->params['token'])) . \"'\");\n        if ($tok == null) {\n            flash('error', gt('Your password reset request has expired.  Please try again.'));\n            expHistory::back();\n        }\n\n        // create the password\n        $newpass = '';\n        for ($i = 0, $iMax = mt_rand(12, 20); $i < $iMax; $i++) {\n            $num = mt_rand(48, 122);\n            if (($num > 97 && $num < 122) || ($num > 65 && $num < 90) || ($num > 48 && $num < 57)) $newpass .= chr($num);\n            else $i--;\n        }\n\n        // look up the user\n        $u = new user($tok->uid);\n\n        // get the email message body and render it\n        $email = $template = expTemplate::get_template_for_action($this, 'email/confirm_password_email', $this->loc);\n        $email->assign('newpass', $newpass);\n        $email->assign('username', $u->username);\n        $msg = $email->render();\n\n        // send the new password to the user\n        $mail = new expMail();\n        $mail->quickSend(array(\n            'html_message' => $msg,\n            'to'           => array(trim($u->email) => trim(user::getUserAttribution($u->id))),\n            'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n            'subject'      => gt('The account password for') . ' ' . HOSTNAME . ' ' . gt('was reset'),\n        ));\n\n        // Save new password\n        $u->update(array('password' => user::encryptPassword($newpass)));\n\n        // cleanup the reset token\n        $db->delete('passreset_token', 'uid=' . $tok->uid);\n\n        flash('message', gt('Your password has been reset and the new password has been emailed to you.'));\n\n        // send the user the login page.\n        redirect_to(array('controller' => 'login', 'action' => 'loginredirect'));\n    }\n\n    public function change_password() {\n        global $user;\n\n        expHistory::set('editable', $this->params);\n        $id = isset($this->params['id']) ? $this->params['id'] : $user->id;\n\n        if ($user->isAdmin() || ($user->id == $id)) {\n            $isuser = ($user->id == $id) ? 1 : 0;\n            $u = new user($id);\n        } else {\n            flash('error', gt('You do not have the proper permissions to do that'));\n            expHistory::back();\n        }\n        assign_to_template(array(\n            'u'      => $u,\n            'isuser' => $isuser\n        ));\n    }\n\n    public function save_change_password() {\n        global $user;\n\n        $isuser = ($this->params['uid'] == $user->id) ? 1 : 0;\n\n        if (!$user->isAdmin() && !$isuser) {\n            flash('error', gt('You do not have permissions to change this users password.'));\n            expHistory::back();\n        }\n\n        if (($isuser && empty($this->params['password'])) || (!empty($this->params['password']) && $user->password != user::encryptPassword($this->params['password']))) {\n            flash('error', gt('The current password you entered is not correct.'));\n            expHistory::returnTo('editable');\n        }\n        //eDebug($user);\n        $u = new user(intval($this->params['uid']));\n\n        $ret = $u->setPassword($this->params['new_password1'], $this->params['new_password2']);\n        //eDebug($u, true);\n        if (is_string($ret)) {\n            flash('error', $ret);\n            expHistory::returnTo('editable');\n        } else {\n            $params = array();\n            $params['is_admin'] = !empty($u->is_admin);\n            $params['is_acting_admin'] = !empty($u->is_acting_admin);\n            $u->update($params);\n        }\n\n        if (!$isuser) {\n            flash('message', gt('The password for') . ' ' . $u->username . ' ' . gt('has been changed.'));\n        } else {\n            $user->password = $u->password;\n            flash('message', gt('Your password has been changed.'));\n        }\n        expHistory::back();\n    }\n\n    public function edit_userpassword() {\n        expHistory::set('editable', $this->params);\n        if (empty($this->params['id'])) {\n            flash('error', gt('You must specify the user whose password you want to change'));\n            expHistory::back();\n        }\n\n        $u = new user($this->params['id']);\n        assign_to_template(array(\n            'u' => $u\n        ));\n    }\n\n    public function update_userpassword() {\n        global $user;\n\n        if (!$user->isAdmin() && $this->params['id'] != $user->id) {\n            flash('error', gt('You do not have permissions to change this users password.'));\n            expHistory::back();\n        }\n\n        if (empty($this->params['id'])) {\n            expValidator::failAndReturnToForm(gt('You must specify the user whose password you want to change'), $this->params);\n        }\n\n        if (empty($this->params['new_password1'])) {\n            expValidator::setErrorField('new_password1');\n            expValidator::failAndReturnToForm(gt('You must specify a new password for this user.'), $this->params);\n        }\n\n        if (empty($this->params['new_password2'])) {\n            expValidator::setErrorField('new_password2');\n            expValidator::failAndReturnToForm(gt('You must confirm the password.'), $this->params);\n\n        }\n\n        $u = new user($this->params['id']);\n        $ret = $u->setPassword($this->params['new_password1'], $this->params['new_password2']);\n        if (is_string($ret)) {\n            expValidator::setErrorField('new_password1');\n            $this->params['new_password1'] = '';\n            $this->params['new_password2'] = '';\n            expValidator::failAndReturnToForm($ret, $this->params);\n        } else {\n            $u->save(true);\n        }\n\n        flash('message', gt('Password reset for user') . ' ' . $u->username);\n        expHistory::back();\n    }\n\n    public function edit_group() {\n        global $db;\n\n        expHistory::set('editable', $this->params);\n        $id = isset($this->params['id']) ? $this->params['id'] : null;\n        $group = new group($id);\n        $group->redirect = $db->selectValue('section', 'id', \"sef_name='\" . $group->redirect . \"'\");\n        assign_to_template(array(\n            'record' => $group\n        ));\n    }\n\n    public function manage_group_memberships() {\n        global $db, $user;\n//        expHistory::set('manageable', $this->params);\n\n        $memb = $db->selectObject('groupmembership', 'member_id=' . $user->id . ' AND group_id=' . $this->params['id'] . ' AND is_admin=1');\n\n        $perm_level = 0;\n        if ($memb) $perm_level = 1;\n        if (expPermissions::check('user_management', expCore::makeLocation('administrationmodule'))) $perm_level = 2;\n\n        $group = $db->selectObject('group', 'id=' . $this->params['id']);\n        $users = user::getAllUsers(0);\n\n        $members = array();\n        $admins = array();\n        foreach ($db->selectObjects('groupmembership', 'group_id=' . $group->id) as $m) {\n            $members[] = $m->member_id;\n            if ($m->is_admin == 1) {\n                $admins[] = $m->member_id;\n            }\n        }\n\n        for ($i = 0, $iMax = count($users); $i < $iMax; $i++) {\n            if (in_array($users[$i]->id, $members)) {\n                $users[$i]->is_member = 1;\n            } else {\n                $users[$i]->is_member = 0;\n            }\n\n            if (in_array($users[$i]->id, $admins)) {\n                $users[$i]->is_admin = 1;\n            } else {\n                $users[$i]->is_admin = 0;\n            }\n        }\n\n        //$limit = empty($this->config['limit']) ? 10 : $this->config['limit'];\n        $page = new expPaginator(array(\n//          'model'=>'user',\n            'records'    => $users,\n            'where'      => 1,\n//          'limit'=>9999,  // unless we're showing all users on a page at once, there's no way to\n            // add all users to a group, since it's rebuilding the group on save...\n            'order'      => empty($this->config['order']) ? 'username' : $this->config['order'],\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns'    => array(\n                gt('Username')   => 'username',\n                gt('First Name') => 'firstname',\n                gt('Last Name')  => 'lastname',\n                gt('Is Member')  => 'is_member',\n                gt('Is Admin')   => 'is_admin',\n            ),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n        ));\n\n        assign_to_template(array(\n            'page'       => $page,\n            'group'      => $group,\n            'users'      => $users,\n            'canAdd'     => (count($members) < count($users) ? 1 : 0),\n            'hasMember'  => (count($members) > 0 ? 1 : 0),\n            'perm_level' => $perm_level,\n        ));\n    }\n\n    public function update_group() {\n        global $db;\n\n        $group = new group();\n        if (!empty($this->params['redirect'])) {\n            $this->params['redirect'] = $db->selectValue('section', 'sef_name', 'id=' . $this->params['redirect']);\n        }\n        $group->update($this->params);\n        expHistory::back();\n    }\n\n    public function delete_group() {\n        global $user, $db;\n        if (!$user->isAdmin()) {\n            flash('error', gt('You do not have permission to delete user groups'));\n            expHistory::back();\n        }\n\n        if (empty($this->params['id'])) {\n            flash('error', gt('No group selected.'));\n            expHistory::back();\n        }\n\n        // remove group members\n        $db->delete('groupmembership', 'group_id=' . $this->params['id']);\n\n        // remove group permissions\n        $db->delete('grouppermission', 'gid=' . $this->params['id']);\n\n        // remove group\n        $db->delete('group', 'id=' . $this->params['id']);\n        expHistory::back();\n    }\n\n    public function toggle_extension() {\n        global $db;\n        if (isset($this->params['id'])) $db->toggle('profileextension', 'active', 'id=' . $this->params['id']);\n        expHistory::back();\n    }\n\n    public function update_memberships() {\n//        global $user, $db;\n        global $db;\n\n        //$memb = $db->selectObject('groupmembership','member_id='.$user->id.' AND group_id='.$this->params['id'].' AND is_admin=1');\n        $group = $db->selectObject('group', 'id=' . $this->params['id']);\n\n        $db->delete('groupmembership', 'group_id=' . $group->id);\n        $memb = new stdClass();\n        $memb->group_id = $group->id;\n        if ($this->params['memdata'] != \"\") {\n            foreach ($this->params['memdata'] as $u => $str) {\n                $memb->member_id = $u;\n                $memb->is_admin = $str['is_admin'];\n                $db->insertObject($memb, 'groupmembership');\n            }\n        }\n        expSession::triggerRefresh();\n        expHistory::back();\n    }\n\n    public function getUsersByJSON() {\n        $modelname = $this->basemodel_name;\n        $results = 25; // default get 25\n        $startIndex = 0; // default start at 0\n        $sort = null; // default don't sort\n        $dir = 'asc'; // default sort dir is asc\n        $sort_dir = SORT_ASC;\n\n        // How many records to get?\n        if (strlen($this->params['results']) > 0) {\n            $results = $this->params['results'];\n        }\n\n        // Start at which record?\n        if (strlen($this->params['startIndex']) > 0) {\n            $startIndex = $this->params['startIndex'];\n        }\n\n        // Sorted?\n        if (strlen($this->params['sort']) > 0) {\n            $sort = $this->params['sort'];\n            if ($sort = 'id') $sort = 'username';\n        }\n\n        if (!empty($this->params['filter'])) {\n            switch ($this->params['filter']) {\n                case '1' :\n                    $filter = '';\n                    break;\n                case '2' :\n                    $filter = \"is_system_user != 1\";\n                    break;\n                case '3' :\n                    $filter = \"is_admin != 1\";\n            }\n        }\n\n//        if (!empty($_GET['filter'])) {\n//            switch ($_GET['filter']) {\n//                case '1' :\n//                    $filter = '';\n//                    break;\n//                case '2' :\n//                    $filter = \"is_system_user != 1\";\n//                    break;\n//                case '3' :\n//                    $filter = \"is_admin != 1\";\n//            }\n//        }\n\n        // Sort dir?\n        if ((strlen($this->params['dir']) > 0) && ($this->params['dir'] == 'desc')) {\n            $dir = 'desc';\n            $sort_dir = SORT_DESC;\n        } else {\n            $dir = 'asc';\n            $sort_dir = SORT_ASC;\n        }\n\n        if (!empty($this->params['query'])) {\n\n//            $this->params['query'] = $this->params['query'];\n            $totalrecords = $this->$modelname->find('count', (empty($filter) ? '' : $filter . \" AND \") . \"(username LIKE '%\" . $this->params['query'] . \"%' OR firstname LIKE '%\" . $this->params['query'] . \"%' OR lastname LIKE '%\" . $this->params['query'] . \"%' OR email LIKE '%\" . $this->params['query'] . \"%')\");\n\n            $users = $this->$modelname->find('all', (empty($filter) ? '' : $filter . \" AND \") . \"(username LIKE '%\" . $this->params['query'] . \"%' OR firstname LIKE '%\" . $this->params['query'] . \"%' OR lastname LIKE '%\" . $this->params['query'] . \"%' OR email LIKE '%\" . $this->params['query'] . \"%')\", $sort . ' ' . $dir, $results, $startIndex);\n\n            for ($i = 0, $iMax = count($users); $i < $iMax; $i++) {\n                if (ECOM == 1) {\n                    $users[$i]->usernamelabel = \"<a href='viewuser/{$users[$i]->id}'  class='fileinfo'>{$users[$i]->username}</a>\";\n                } else {\n                    $users[$i]->usernamelabel = $users[$i]->username;\n                }\n            }\n\n            $returnValue = array(\n                'recordsReturned' => count($users),\n                'totalRecords'    => $totalrecords,\n                'startIndex'      => $startIndex,\n                'sort'            => $sort,\n                'dir'             => $dir,\n                'pageSize'        => $results,\n                'records'         => $users\n            );\n        } else {\n\n            $totalrecords = $this->$modelname->find('count', $filter);\n\n            $users = $this->$modelname->find('all', $filter, $sort . ' ' . $dir, $results, $startIndex);\n\n            for ($i = 0, $iMax = count($users); $i < $iMax; $i++) {\n                if (ECOM == 1) {\n                    $users[$i]->usernamelabel = \"<a href='viewuser/{$users[$i]->id}'  class='fileinfo'>{$users[$i]->username}</a>\";\n                } else {\n                    $users[$i]->usernamelabel = $users[$i]->username;\n                }\n            }\n\n            $returnValue = array(\n                'recordsReturned' => count($users),\n                'totalRecords'    => $totalrecords,\n                'startIndex'      => $startIndex,\n                'sort'            => $sort,\n                'dir'             => $dir,\n                'pageSize'        => $results,\n                'records'         => $users\n            );\n\n        }\n\n        echo json_encode($returnValue);\n    }\n\n    public function viewuser() {\n        global $user;\n\n        if (!empty($this->params['id'])) {\n            $u = new user($this->params['id']);\n        } elseif (!empty($user->id)) {\n            $u = $user;\n        } else {\n            flash('error', gt('You may not view this user'));\n            expHistory::back();\n        }\n        $address = new address();\n\n        $billings = $address->find('all', 'user_id=' . $u->id . ' AND is_billing = 1');\n        $shippings = $address->find('all', 'user_id=' . $u->id . ' AND is_shipping = 1');\n\n        // build out a SQL query that gets all the data we need and is sortable.\n        $sql = 'SELECT o.*, b.firstname as firstname, b.billing_cost as total, b.middlename as middlename, b.lastname as lastname, os.title as status, ot.title as order_type ';\n        $sql .= 'FROM ' . DB_TABLE_PREFIX . '_orders o, ' . DB_TABLE_PREFIX . '_billingmethods b, ';\n        $sql .= DB_TABLE_PREFIX . '_order_status os, ';\n        $sql .= DB_TABLE_PREFIX . '_order_type ot ';\n        $sql .= 'WHERE o.id = b.orders_id AND o.order_status_id = os.id AND o.order_type_id = ot.id AND o.purchased > 0 AND user_id =' . $u->id;\n\n        $limit = (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10;\n        $order = !empty($this->params['order']) ? $this->params['order'] : 'purchased';\n        $dir = !empty($this->params['dir']) ? $this->params['dir'] : 'DESC';\n        //eDebug($sql, true);\n        $orders = new expPaginator(array(\n            //'model'=>'order',\n            'sql'        => $sql,\n            'limit'      => $limit,\n            'order'      => $order,\n            'dir'        => $dir,\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns'    => array(\n                gt('Order #')        => 'invoice_id',\n                gt('Total')          => 'total',\n                gt('Date Purchased') => 'purchased',\n//                gt('Type')           => 'order_type_id',\n                gt('Status')         => 'order_status_id',\n                gt('Ref')            => 'orig_referrer',\n            ),\n            'controller' => $this->params['controller'],\n            'action'     => $this->params['action'],\n        ));\n\n        assign_to_template(array(\n            'u'         => $u,\n            'billings'  => $billings,\n            'shippings' => $shippings,\n            'orders'    => $orders,\n        ));\n    }\n\n    public function userperms() {\n        global $user;\n\n        if (!empty($this->params['mod']) && $user->isAdmin()) {\n            $loc = expCore::makeLocation($this->params['mod'], isset($this->params['src']) ? $this->params['src'] : null, isset($this->params['int']) ? $this->params['int'] : null);\n            $users = array();\n            $modclass = expModules::getModuleClassName(($loc->mod));\n            $mod = new $modclass();\n            $perms = $mod->permissions($loc->int);\n            $have_users = 0;\n            foreach (user::getAllUsers(false) as $u) {\n                $have_users = 1;\n                foreach ($perms as $perm => $name) {\n//        \t\t\t$var = 'perms_'.$perm;\n                    if (expPermissions::checkUser($u, $perm, $loc, true)) {\n                        $u->$perm = 1;\n                    } else if (expPermissions::checkUser($u, $perm, $loc)) {\n                        $u->$perm = 2;\n                    } else {\n                        $u->$perm = 0;\n                    }\n                }\n                $users[] = $u;\n            }\n\n            $p[gt(\"User Name\")] = 'username';\n            $p[gt(\"First Name\")] = 'firstname';\n            $p[gt(\"Last Name\")] = 'lastname';\n            foreach ($mod->permissions() as $value) {\n                //        $p[gt($value)]=$key;\n                $p[gt($value)] = 'no-sort';\n            }\n\n//            if (SEF_URLS == 1) {\n                $page = new expPaginator(array(\n                    //'model'=>'user',\n//                    'limit'      => (isset($this->params['limit']) ? $this->params['limit'] : 20),\n                    'records'    => $users,\n                    //'sql'=>$sql,\n                    'order'      => (isset($this->params['order']) ? $this->params['order'] : 'username'),\n                    'dir'        => (isset($this->params['dir']) ? $this->params['dir'] : 'ASC'),\n                    'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n                    'controller' => $this->params['controller'],\n                    'action'     => $this->params['action'],\n                    'columns'    => $p,\n                ));\n//            } else {\n//                $page = new expPaginator(array(\n//                    //'model'=>'user',\n////                    'limit'      => (isset($this->params['limit']) ? $this->params['limit'] : 20),\n//                    'records'    => $users,\n//                    //'sql'=>$sql,\n//                    'order'      => (isset($this->params['order']) ? $this->params['order'] : 'username'),\n//                    'dir'        => (isset($this->params['dir']) ? $this->params['dir'] : 'ASC'),\n//                    'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n//                    'controller' => $this->params['module'],\n//                    'action'     => $this->params['action'],\n//                    'columns'    => $p,\n//                ));\n//            }\n\n            assign_to_template(array(\n                'user_form'  => 1,\n                'have_users' => $have_users,\n                'users'      => $users,\n                'page'       => $page,\n                'perms'      => $perms,\n                'loc'        => $loc,\n//                'title'=>($modclass != 'navigationController' || ($modclass == 'navigationController' && !empty($loc->src))) ? $mod->name().' '.($modclass != 'containermodule' ? gt('module') : '').' ' : gt('Page'),\n                'title'      => ($loc->mod != 'navigation' || ($loc->mod == 'navigation' && !empty($loc->src))) ? $mod->name() . ' ' . ($loc->mod != 'container' ? gt('module') : '') . ' ' : gt('Page'),\n            ));\n        } else {\n//            echo SITE_403_HTML;\n            notfoundController::handle_not_authorized();\n        }\n    }\n\n    public function userperms_save() {\n        global $user;\n\n        $loc = expCore::makeLocation($this->params['mod'], isset($this->params['src']) ? $this->params['src'] : null, isset($this->params['int']) ? $this->params['int'] : null);\n        foreach ($this->params['users'] as $u) {\n            expPermissions::revokeAll($u, $loc);\n        }\n        foreach ($this->params['permdata'] as $k => $user_str) {\n            $perms = array_keys($user_str);\n            $u = user::getUserById($k);\n            for ($i = 0, $iMax = count($perms); $i < $iMax; $i++) {\n                expPermissions::grant($u, $perms[$i], $loc);\n            }\n\n            if ($k == $user->id) {\n                expPermissions::load($user);\n            }\n        }\n        expSession::triggerRefresh();\n        expHistory::back();\n    }\n\n    public function groupperms() {\n        global $user;\n\n        if (!empty($this->params['mod']) && $user->isAdmin()) {\n            $loc = expCore::makeLocation($this->params['mod'], isset($this->params['src']) ? $this->params['src'] : null, isset($this->params['int']) ? $this->params['int'] : null);\n            $users = array(); // users = groups\n            $modclass = expModules::getModuleClassName($loc->mod);\n            $mod = new $modclass();\n            $perms = $mod->permissions($loc->int);\n\n            foreach (group::getAllGroups() as $g) {\n                foreach ($perms as $perm => $name) {\n//        \t\t\t$var = 'perms_'.$perm;\n                    if (expPermissions::checkGroup($g, $perm, $loc, true)) {\n                        $g->$perm = 1;\n                    } else if (expPermissions::checkGroup($g, $perm, $loc)) {\n                        $g->$perm = 2;\n                    } else {\n                        $g->$perm = 0;\n                    }\n                }\n                $users[] = $g;\n            }\n\n            $p[gt(\"Group\")] = 'username';\n            foreach ($mod->permissions() as $value) {\n                //        $p[gt($value)]=$key;\n                $p[gt($value)] = 'no-sort';\n            }\n\n//            if (SEF_URLS == 1) {\n                $page = new expPaginator(array(\n                    //'model'=>'user',\n//                    'limit'      => (isset($this->params['limit']) ? $this->params['limit'] : 20),\n                    'records'    => $users,\n                    //'sql'=>$sql,\n                    'order'      => (isset($this->params['order']) ? $this->params['order'] : 'name'),\n                    'dir'        => (isset($this->params['dir']) ? $this->params['dir'] : 'ASC'),\n                    'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n                    'controller' => $this->params['controller'],\n                    'action'     => $this->params['action'],\n                    'columns'    => $p,\n                ));\n//            } else {\n//                $page = new expPaginator(array(\n//                    //'model'=>'user',\n////                    'limit'      => (isset($this->params['limit']) ? $this->params['limit'] : 20),\n//                    'records'    => $users,\n//                    //'sql'=>$sql,\n//                    'order'      => (isset($this->params['order']) ? $this->params['order'] : 'name'),\n//                    'dir'        => (isset($this->params['dir']) ? $this->params['dir'] : 'ASC'),\n//                    'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n//                    'controller' => $this->params['module'],\n//                    'action'     => $this->params['action'],\n//                    'columns'    => $p,\n//                ));\n//            }\n\n            assign_to_template(array(\n                'user_form'  => 0,\n                'is_group'   => 1,\n                'have_users' => count($users) > 0, // users = groups\n                'users'      => $users,\n                'page'       => $page,\n                'perms'      => $perms,\n                'loc'        => $loc,\n//                'title'=>($modclass != 'navigationController' || ($modclass == 'navigationController' && !empty($loc->src))) ? $mod->name().' '.($modclass != 'containermodule' ? gt('module') : '').' ' : gt('Page'),\n                'title'      => ($loc->mod != 'navigation' || ($loc->mod == 'navigation' && !empty($loc->src))) ? $mod->name() . ' ' . ($loc->mod != 'container' ? gt('module') : '') . ' ' : gt('Page'),\n            ));\n        } else {\n//            echo SITE_403_HTML;\n            notfoundController::handle_not_authorized();\n        }\n    }\n\n    public function groupperms_save() {\n        $loc = expCore::makeLocation($this->params['mod'], isset($this->params['src']) ? $this->params['src'] : null, isset($this->params['int']) ? $this->params['int'] : null);\n        foreach ($this->params['users'] as $g) {\n            expPermissions::revokeAllGroup($g, $loc);\n        }\n        foreach ($this->params['permdata'] as $k => $group_str) {\n            $perms = array_keys($group_str);\n            $g = group::getGroupById($k);\n            for ($i = 0, $iMax = count($perms); $i < $iMax; $i++) {\n                expPermissions::grantGroup($g, $perms[$i], $loc);\n            }\n        }\n        expSession::triggerRefresh();\n        expHistory::back();\n    }\n\n    public function import() {\n        if (expFile::canCreate(BASE . \"tmp/test\") != SYS_FILES_SUCCESS) {\n            assign_to_template(array(\n                \"error\" => \"The /tmp directory is not writable.  Please contact your administrator.\",\n            ));\n        } else {\n            //Setup the arrays with the name/value pairs for the dropdown menus\n            $delimiterArray = Array(\n                ',' => gt('Comma'),\n                ';' => gt('Semicolon'),\n                ':' => gt('Colon'),\n                ' ' => gt('Space'));\n\n//            //Setup the mete data (hidden values)\n//            $form = new form();\n//            $form->meta(\"controller\", \"users\");\n//            $form->meta(\"action\", \"import_users_mapper\");\n//\n//            //Register the dropdown menus\n//            $form->register(\"delimiter\", gt('Delimiter Character'), new dropdowncontrol(\",\", $delimiterArray));\n//            $form->register(\"upload\", gt('CSV File to Upload'), new uploadcontrol());\n//            $form->register(\"use_header\", gt('First Row is a Header'), new checkboxcontrol(0, 0));\n//            $form->register(\"rowstart\", gt('User Data begins in Row'), new textcontrol(\"1\", 1, 0, 6));\n//            $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n            assign_to_template(array(\n//                \"form_html\" => $form->tohtml(),\n                'delimiters' => $delimiterArray,\n            ));\n        }\n    }\n\n    public function import_users_mapper() {\n        //Check to make sure the user filled out the required input.\n        //FIXME needs to be the newer fail form\n        if (!is_numeric($this->params[\"rowstart\"])) {\n            unset($this->params[\"rowstart\"]);\n            $this->params['_formError'] = gt('The starting row must be a number.');\n            expSession::set(\"last_POST\", $this->params);\n            header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n            exit('Redirecting...');\n        }\n\n        //Get the temp directory to put the uploaded file\n        $directory = \"tmp\";\n\n        //Get the file save it to the temp directory\n        if ($_FILES[\"upload\"][\"error\"] == UPLOAD_ERR_OK) {\n            //\t$file = file::update(\"upload\",$directory,null,time().\"_\".$_FILES['upload']['name']);\n            $file = expFile::fileUpload(\"upload\", false, false, time() . \"_\" . $_FILES['upload']['name'], $directory.'/');\n            if ($file == null) {\n                switch ($_FILES[\"upload\"][\"error\"]) {\n                    case UPLOAD_ERR_INI_SIZE:\n                    case UPLOAD_ERR_FORM_SIZE:\n                        $this->params['_formError'] = gt('The file you attempted to upload is too large.  Contact your system administrator if this is a problem.');\n                        break;\n                    case UPLOAD_ERR_PARTIAL:\n                        $this->params['_formError'] = gt('The file was only partially uploaded.');\n                        break;\n                    case UPLOAD_ERR_NO_FILE:\n                        $this->params['_formError'] = gt('No file was uploaded.');\n                        break;\n                    default:\n                        $this->params['_formError'] = gt('A strange internal error has occurred.  Please contact the Exponent Developers.');\n                        break;\n                }\n                expSession::set(\"last_POST\", $this->params);\n                header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n                exit(\"\");\n            }\n        }\n        /*\n        if (mime_content_type(BASE.$directory.\"/\".$file->filename) != \"text/plain\"){\n            $this->params['_formError'] = \"File is not a delimited text file.\";\n            expSession::set(\"last_POST\",$this->params);\n            header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n            exit(\"\");\n        }\n        */\n\n        //split the line into its columns\n        $headerinfo = null;\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $fh = fopen(BASE . $directory . \"/\" . $file->filename, \"r\");\n        if (!empty($this->params[\"use_header\"])) $this->params[\"rowstart\"]++;\n        for ($x = 0; $x < $this->params[\"rowstart\"]; $x++) {\n            $lineInfo = fgetcsv($fh, 2000, $this->params[\"delimiter\"]);\n            if ($x == 0 && !empty($this->params[\"use_header\"])) $headerinfo = $lineInfo;\n        }\n\n        $colNames = array(\n            \"none\"      => gt('--Disregard this column--'),\n            \"username\"  => gt('Username'),\n            \"password\"  => gt('Password'),\n            \"firstname\" => gt('First Name'),\n            \"lastname\"  => gt('Last Name'),\n            \"email\"     => gt('Email Address')\n        );\n\n        //Check to see if the line got split, otherwise throw an error\n        if ($lineInfo == null) {\n            $this->params['_formError'] = sprintf(gt('This file does not appear to be delimited by \"%s\". <br />Please specify a different delimiter.<br /><br />'), $this->params[\"delimiter\"]);\n            expSession::set(\"last_POST\", $this->params);\n            header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n            exit(\"\");\n        } else {\n            //Setup the meta data (hidden values)\n            $form = new form();\n            $form->meta(\"controller\", \"users\");\n            $form->meta(\"action\", \"import_users_process\");\n            $form->meta(\"rowstart\", $this->params[\"rowstart\"]);\n            $form->meta(\"use_header\", $this->params[\"use_header\"]);\n            $form->meta(\"filename\", $directory . \"/\" . $file->filename);\n            $form->meta(\"delimiter\", $this->params[\"delimiter\"]);\n            for ($i = 0, $iMax = count($lineInfo); $i < $iMax; $i++) {\n                if ($headerinfo != null) {\n                    $title = $headerinfo[$i] . ' (' . $lineInfo[$i] .')';\n                    if (array_key_exists($headerinfo[$i], $colNames)) {\n                        $default = $headerinfo[$i];\n                    } else {\n                        $default = \"none\";\n                    }\n                } else {\n                    $title = $lineInfo[$i];\n                    $default = \"none\";\n                }\n                $form->register(\"column[$i]\", $title, new dropdowncontrol($default, $colNames));\n            }\n            $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n            assign_to_template(array(\n                \"form_html\" => $form->tohtml(),\n            ));\n        }\n    }\n\n    public function import_users_process() {\n        if (in_array(\"username\", $this->params[\"column\"]) == false) {\n            $unameOptions = array(\n                \"FILN\"    => gt('First Initial / Last Name'),\n                \"FILNNUM\" => gt('First Initial / Last Name / Random Number'),\n                \"EMAIL\"   => gt('Email Address'),\n                \"FNLN\"    => gt('First Name / Last Name'));\n        } else {\n            $unameOptions = array(\"INFILE\" => gt('Username Specified in CSV File'));\n        }\n\n        if (in_array(\"password\", $this->params[\"column\"]) == false) {\n            $pwordOptions = array(\n                \"RAND\"    => gt('Generate Random Passwords'),\n                \"DEFPASS\" => gt('Use the Default Password Supplied Below'));\n        } else {\n            $pwordOptions = array(\"INFILE\" => gt('Password Specified in CSV File'));\n        }\n        if (count($pwordOptions) == 1) {\n            $disabled = true;\n        } else {\n            $disabled = false;\n        }\n\n//        $form = new form();\n//        $form->meta(\"controller\", \"users\");\n//        $form->meta(\"action\", \"import_users_display\");\n//        $form->meta(\"column\", $this->params[\"column\"]);\n//        $form->meta(\"delimiter\", $this->params[\"delimiter\"]);\n//        $form->meta(\"use_header\", $this->params[\"use_header\"]);\n//        $form->meta(\"filename\", $this->params[\"filename\"]);\n//        $form->meta(\"rowstart\", $this->params[\"rowstart\"]);\n//\n//        $form->register(\"unameOptions\", gt('User Name Generations Options'), new dropdowncontrol(\"INFILE\", $unameOptions));\n//        $form->register(\"pwordOptions\", gt('Password Generation Options'), new dropdowncontrol(\"defpass\", $pwordOptions));\n//        $form->register(\"pwordText\", gt('Default Password'), new textcontrol(\"\", 10, $disabled));\n//        $form->register(\"update\", gt('Update users already in database, instead of creating new user?'), new checkboxcontrol(0, 0));\n//        $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n        assign_to_template(array(\n//            \"form_html\" => $form->tohtml(),\n            'uname_options' => $unameOptions,\n            'pword_options' => $pwordOptions,\n            'pword_disabled' => $disabled,\n            'params' => $this->params\n        ));\n    }\n\n    public function import_users_display() {\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $file = fopen(BASE . $this->params[\"filename\"], \"r\");\n        $userinfo = array();\n        $userarray = array();\n        $usersdone = array();\n        $linenum = 1;\n\n        while (($filedata = fgetcsv($file, 2000, $this->params[\"delimiter\"])) != false) {\n\n            if ($linenum >= $this->params[\"rowstart\"]) {\n                $i = 0;\n\n                $userinfo['username'] = \"\";\n                $userinfo['firstname'] = \"\";\n                $userinfo['lastname'] = \"\";\n                $userinfo['is_admin'] = 0;\n                $userinfo['is_acting_admin'] = 0;\n//                $userinfo['is_locked'] = 0;\n                $userinfo['email'] = '';\n                $userinfo['changed'] = \"\";\n\n                foreach ($filedata as $field) {\n                    if (!empty($this->params[\"column\"][$i]) && $this->params[\"column\"][$i] != \"none\") {\n                        $colname = $this->params[\"column\"][$i];\n                        $userinfo[$colname] = trim($field);\n                    } else {\n                        unset($this->params['column'][$i]);\n                    }\n                    $i++;\n                }\n\n                switch ($this->params[\"unameOptions\"]) {\n                    case \"FILN\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname']{0} . $userinfo['lastname']));\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"FILNNUM\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname']{0} . $userinfo['lastname'] . mt_rand(100, 999)));\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"EMAIL\":\n                        if ($userinfo['email'] != \"\") {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['email']));\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"FNLN\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname'] . $userinfo['lastname']));\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"INFILE\":\n                        if ($userinfo['username'] != \"\") {\n                            $userinfo['username'] = str_replace(\" \", \"\", $userinfo['username']);\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                }\n\n                if ((!isset($userinfo['changed'])) || ($userinfo['changed'] != \"skipped\")) {\n//                    switch ($this->params[\"pwordOptions\"]) {\n//                        case \"RAND\":\n//                            $newpass = \"\";\n//                            for ($i = 0; $i < mt_rand(12, 20); $i++) {\n//                                $num = mt_rand(48, 122);\n//                                if (($num > 97 && $num < 122) || ($num > 65 && $num < 90) || ($num > 48 && $num < 57)) $newpass .= chr($num);\n//                                else $i--;\n//                            }\n//                            $userinfo['clearpassword'] = $newpass;\n//                            break;\n//                        case \"DEFPASS\":\n//                            $userinfo['clearpassword'] = str_replace(\" \", \"\", trim($this->params[\"pwordText\"]));\n//                            break;\n//                    }\n//\n//                    $userinfo['password'] = user::encryptPassword($userinfo['clearpassword']);\n\n                    $suffix = \"\";\n                    while (user::getUserByName($userinfo['username'] . $suffix) != null) { //username already exists\n                        if (!empty($this->params[\"update\"])) {\n                            if (in_array($userinfo['username'], $usersdone)) {\n                                $suffix = '-rand-' . mt_rand(100, 999);\n                            } else {\n                                $tmp = user::getUserByName($userinfo['username'] . $suffix);\n                                $userinfo['id'] = $tmp->id;\n                                $userinfo['changed'] = 1;\n                                break;\n                            }\n                        } else {\n                            $suffix = '-rand-' . mt_rand(100, 999);\n                        }\n                    }\n\n                    $userinfo['username'] = $userinfo['username'] . $suffix;\n                    $userinfo['linenum'] = $linenum;\n                    $userarray[] = $userinfo;\n                    $usersdone[] = $userinfo['username'];\n                } else {\n                    $userinfo['linenum'] = $linenum;\n                    $userarray[] = $userinfo;\n                }\n            }\n            $linenum++;\n        }\n        assign_to_template(array(\n            \"userarray\" => $userarray,\n            \"params\" => $this->params,\n        ));\n    }\n\n    public function import_users_add() {\n        if (!empty($this->params['filename']) && (strpos($this->params['filename'], 'tmp/') === false || strpos($this->params['folder'], '..') !== false)) {\n            header('Location: ' . URL_FULL);\n            exit();  // attempt to hack the site\n        }\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $file = fopen(BASE . $this->params[\"filename\"], \"r\");\n        $userinfo = array();\n        $userarray = array();\n        $usersdone = array();\n        $linenum = 1;\n\n        while (($filedata = fgetcsv($file, 2000, $this->params[\"delimiter\"])) != false) {\n\n            if ($linenum >= $this->params[\"rowstart\"] && in_array($linenum,$this->params['importuser'])) {\n                $i = 0;\n\n                $userinfo['username'] = \"\";\n                $userinfo['firstname'] = \"\";\n                $userinfo['lastname'] = \"\";\n                $userinfo['is_admin'] = 0;\n                $userinfo['is_acting_admin'] = 0;\n//                $userinfo['is_locked'] = 0;\n                $userinfo['email'] = '';\n                $userinfo['changed'] = \"\";\n\n                foreach ($filedata as $field) {\n                    if ($this->params[\"column\"][$i] != \"none\") {\n                        $colname = $this->params[\"column\"][$i];\n                        $userinfo[$colname] = trim($field);\n                    }\n                    $i++;\n                }\n\n                switch ($this->params[\"unameOptions\"]) {\n                    case \"FILN\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname']{0} . $userinfo['lastname']));\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"FILNNUM\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname']{0} . $userinfo['lastname'] . mt_rand(100, 999)));\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"EMAIL\":\n                        if ($userinfo['email'] != \"\") {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['email']));\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"FNLN\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname'] . $userinfo['lastname']));\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"INFILE\":\n                        if ($userinfo['username'] != \"\") {\n                            $userinfo['username'] = str_replace(\" \", \"\", $userinfo['username']);\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                }\n\n                if ((!isset($userinfo['changed'])) || ($userinfo['changed'] != \"skipped\")) {\n                    switch ($this->params[\"pwordOptions\"]) {\n                        case \"RAND\":\n                            $newpass = \"\";\n                            for ($i = 0, $iMax = mt_rand(12, 20); $i < $iMax; $i++) {\n                                $num = mt_rand(48, 122);\n                                if (($num > 97 && $num < 122) || ($num > 65 && $num < 90) || ($num > 48 && $num < 57)) $newpass .= chr($num);\n                                else $i--;\n                            }\n                            $userinfo['clearpassword'] = $newpass;\n                            break;\n                        case \"DEFPASS\":\n                            $userinfo['clearpassword'] = str_replace(\" \", \"\", trim($this->params[\"pwordText\"]));\n                            break;\n                    }\n\n                    $userinfo['password'] = user::encryptPassword($userinfo['clearpassword']);\n\n                    $suffix = \"\";\n                    while (user::getUserByName($userinfo['username'] . $suffix) != null) { //username already exists\n                        if (!empty($this->params[\"update\"])) {\n                            if (in_array($userinfo['username'], $usersdone)) {  // username exists because we already created it\n                                $suffix = mt_rand(100, 999);\n                            } else {\n                                $tmp = user::getUserByName($userinfo['username'] . $suffix);\n                                $userinfo['id'] = $tmp->id;\n                                $userinfo['changed'] = 1;\n                                break;\n                            }\n                        } else {\n                            $suffix = mt_rand(100, 999);\n                        }\n                    }\n\n                    $userinfo['username'] = $userinfo['username'] . $suffix;\n                    $newuser = new user($userinfo);\n                    $newuser->update();\n                    $userinfo['linenum'] = $linenum;\n                    $userarray[] = $userinfo;\n                    $usersdone[] = $userinfo['username'];\n                    if (USER_REGISTRATION_SEND_WELCOME && $this->params['sendemail'] && !empty($newuser->email)) {\n                        $msg = $newuser->firstname . \", \\n\\n\";\n                        $msg .= sprintf(USER_REGISTRATION_WELCOME_MSG, $newuser->firstname, $newuser->lastname, $newuser->username);\n                        $msg .= \"/n/nYour new password is: \".$userinfo['clearpassword'];\n                        $mail = new expMail();\n                        $mail->quickSend(array(\n                            'text_message' => $msg,\n                            'to'           => array(trim($newuser->email) => trim(user::getUserAttribution($newuser->id))),\n                            'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n                            'subject'      => USER_REGISTRATION_WELCOME_SUBJECT,\n                        ));\n                    }\n                } else {\n                    $userinfo['linenum'] = $linenum;\n                    $userarray[] = $userinfo;\n                }\n            }\n            $linenum++;\n        }\n        fclose($file);\n        ini_set('auto_detect_line_endings',$line_end);\n        assign_to_template(array(\n            \"userarray\" => $userarray,\n        ));\n        unlink(BASE . $this->params[\"filename\"]);\n    }\n\n    public function sync_LDAPUsers() {\n        if (USE_LDAP == 1 && function_exists('ldap_connect')) {\n            $ldap = new expLDAP();\n            $updated = $ldap->syncLDAPUsers();\n            $ldap->close();\n            flash('message', $updated.' '.gt('LDAP Users Updated'));\n        }\n    }\n\n}\n\n?>"], "fixing_code": ["#!/usr/bin/env php\n<?php\n    ##################################################\n    #\n    # Copyright (c) 2004-2016 OIC Group, Inc.\n    #\n    # This file is part of Exponent\n    #\n    # Exponent is free software; you can redistribute\n    # it and/or modify it under the terms of the GNU\n    # General Public License as published by the Free\n    # Software Foundation; either version 2 of the\n    # License, or (at your option) any later version.\n    #\n    # GPL: http://www.gnu.org/licenses/gpl.txt\n    #\n    ##################################################\n\n    $param_array = array();\n    $verbose = false;\n    $recur = true;\n    $total_new = 0;\n\n    include_once('../exponent.php');\n    if (php_sapi_name() == 'cli') {\n        $nl = \"\\n\";\n        if (!empty($_SERVER['argc'])) for ($ac = 1; $ac < $_SERVER['argc']; $ac++) {\n            if ($_SERVER['argv'][$ac] == '-v') {\n                $verbose = true;\n            } elseif (!empty($_SERVER['argv'][$ac])) {\n                $version_title = $_SERVER['argv'][$ac];\n                $version = $db->selectValue('help_version', 'id', 'version=\"' . $_SERVER['argv'][$ac] . '\"');\n            }\n        }\n    } else {\n        $nl = '<br>';\n        if (!empty($_GET['verbose'])) {\n            $verbose = true;\n        }\n        if (!empty($_GET['version'])) {\n            $version_title = $_GET['version'];\n            $version = $db->selectValue('help_version', 'id', 'version=\"' . expString::escape($_GET['version']) . '\"');\n        }\n    }\n    /**\n     * find_help.php - attempts to auto-check all ExponentCMS help links\n     * by collecting them and checking them against the doc.exponentcms.org db tables\n     */\n    print $nl . \"Checking the Exponent Help System!\" . $nl . $nl;\n    print \"Grabbing links from the folders!\" . $nl;\n    parse_files('..', false);\n    $filelist = array('../cron', '../framework', '../install', '../themes');\n    foreach ($filelist as $file) {\n        parse_files($file);\n    }\n\n    print $nl . \"Completed grabbing \" . $total_new . \" Total Help Links!\" . $nl . $nl;\n    if (empty($version)) {\n        $version = $db->selectValue('help_version', 'id', 'is_current=1');\n        $version_title = 'Current';\n    }\n    print \"Using Help Version - \" . $version_title . \"!\" . $nl . $nl;\n\n    // match condensed lists against db tables\n    print \"List of Missing Help Page Links\" . $nl;\n    $pages = array_unique($param_array['page']);\n    sort($pages);\n    foreach ($pages as $page) {\n        if (!$db->selectObject('section', 'sef_name=' . $page)) {\n            print $page . $nl;\n        }\n    }\n\n    print $nl . \"List of Missing Help Document Links\" . $nl;\n    $docs = array_unique(array_merge($param_array['doc'],$param_array['module']));\n    sort($docs);\n    foreach ($docs as $doc) {\n        if (!$db->selectObject('help', 'sef_url=' . $doc . ' AND help_version_id=' . $version)) {\n            print $doc . $nl;\n        }\n    }\n\n    print $nl . \"Completed Checking the Exponent Help System!\" . $nl;\n\n    // traverse all the files\n    function parse_files($filename, $recurse = true) {\n        global $recur, $verbose, $nl;\n\n        if ($verbose) print \"Grabbing help links\" . $nl;\n        $recur = $recurse;\n        if (is_dir($filename)) { // go through directory\n            do_dir($filename);\n        } else { // do file\n            $pi = pathinfo($filename);\n            if (empty($pi['extension'])) $pi['extension'] = null;\n            do_file($filename, $pi['extension']);\n        }\n    }\n\n    // parse all the files\n    // processes file for assoc strings\n    function do_file($file, $fileext) {\n        if ($fileext == 'tpl') {\n            do_extract($file);\n        }\n    }\n\n    // go through a directory\n    function do_dir($dir) {\n        global $recur;\n\n        $d = dir($dir);\n        while (false !== ($entry = $d->read())) {\n            if ($entry == '.' || $entry == '..') {\n                continue;\n            }\n\n            $entry = $dir . '/' . $entry;\n\n            if (is_dir($entry)) { // if a directory, go through it\n                if ($recur) do_dir($entry);\n            } else { // if file, parse only if extension is matched\n                $pi = pathinfo($entry);\n                if (empty($pi['extension'])) $pi['extension'] = null;\n                if (isset($pi['extension']) && $pi['extension'] == 'tpl') {\n                    do_file($entry, $pi['extension']);\n                }\n            }\n        }\n\n        $d->close();\n    }\n\n    //parse the help function lines\n    // rips gettext strings from $file and prints them in C format\n    function do_extract($file) {\n        global $total_new, $param_array, $verbose, $nl;\n\n    // regex for the help shortcut function\n        $regex_help = '/(?<=help\\s)((page=[\\'\"]|[^\\'\"])*)([^}]*)(?=\\})/';\n    // regex for the parameter list\n        $regex_params = '/([^=\\s]+)=[\"\\']([^\"\\']+)[\"\\']/';\n        $content = @file_get_contents($file);\n        if (empty($content)) {\n            return;\n        }\n        preg_match_all(\n            $regex_help,\n            $content,\n            $matches,\n            PREG_PATTERN_ORDER\n        );\n\n        if ($verbose) print \"$file\" . \" - \";\n        $num_added = 0;\n        $parsed = null;\n\n        for ($i = 0, $iMax = count($matches[0]); $i < $iMax; $i++) {\n    //        str_replace('\"', \"\\'\", $matches[0][$i]); // remove the killer double-quotes\n\n            // segregate params\n            preg_match_all(\n                $regex_params,\n                $matches[0][$i],\n                $parsed,\n                PREG_PATTERN_ORDER\n            );\n            //print_r(explode('=',$s[0][0]));\n            foreach ($parsed[0] as $pair) {\n                if (strpos($pair, '=')) {\n                    list($key, $val) = explode('=', $pair, 2);\n                    $param_array[trim($key)][] = trim($val);\n                    $num_added++;\n                }\n            }\n        }\n\n        $total_new += $num_added;\n        if ($verbose) print $num_added . $nl;\n    }\n\n    function output($text) {\n        global $nl;\n\n        if (!is_array($text)) $text = array($text);\n        foreach ($text as $string) {\n            print $string . $nl;\n        }\n    }\n\n?>", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package    Modules\n */\n\nclass cartController extends expController {\n    public $basemodel_name = 'order';\n    private $checkout_steps = array('productinfo', 'specials', 'form', 'wizards', 'newsletter', 'confirmation', 'postprocess');\n\n    public $useractions = array(\n        'show'                         => 'Show Shopping Cart',\n    );\n\n        // hide the configs we don't need\n    public $remove_configs = array(\n        'aggregation',\n        'categories',\n        'comments',\n        'ealerts',\n        'facebook',\n        'files',\n        'pagination',\n        'rss',\n        'tags',\n        'twitter',\n    );  // all options: ('aggregation','categories','comments','ealerts','facebook','files','module_title','pagination','rss','tags','twitter',)\n\n    static function displayname() {\n        return gt(\"e-Commerce Shopping Cart\");\n    }\n\n    static function description() {\n        return gt(\"Displays the shopping cart contents from your store.\");\n    }\n\n    function addItem() {\n        global $router;\n\n        $product_type = isset($this->params['product_type']) ? $this->params['product_type'] : 'product';\n        $product      = new product();\n\n        //if we're trying to add a parent product ONLY, then we redirect to it's show view\n        $c = new stdClass();\n        if (isset($this->params['product_id']) && empty($this->params['children'])) $c = $product->find('first', 'parent_id=' . $this->params['product_id']);\n        if (!empty($c->id)) {\n            flash('message', gt(\"Please select a product and quantity from the options listed below to add to your cart.\"));\n            redirect_to(array('controller'=> 'store', 'action'=> 'show', 'id'=> $this->params['product_id']));\n        }\n\n        //check for multiple product adding\n        if (isset($this->params['prod-quantity'])) {\n            //we are adding multiple children, so we approach a bit different\n            //we'll send over the product_id of the parent, along with id's and quantities of children we're adding\n\n            foreach ($this->params['prod-quantity'] as $qkey=> &$quantity) {\n                if (in_array($qkey, $this->params['prod-check'])) {\n                    //this might not be working...FJD\n                    $child = new $product_type($qkey);\n                    /*if ($quantity < $child->minimum_order_quantity)\n                    {\n                        flash('message', $child->title . \" - \" . $child->model . \" has a minimum order quantity of \" . $child->minimum_order_quantity .\n                        '. Your quantity has been adjusted accordingly.');\n                        $quantity = $child->minimum_order_quantity;\n\n                    }*/\n                    $this->params['children'][$qkey] = $quantity;\n                }\n                if (isset($child)) $this->params['product_id'] = $child->parent_id;\n            }\n        }\n\n        $product = new $product_type($this->params['product_id'], true, true); //need true here?\n\n        //Check the Main Product quantity\n        if (isset($this->params['quantity'])) {\n            if (((int)$this->params['quantity']) < $product->minimum_order_quantity) {\n                flash('message', gt(\"Please enter a quantity equal or greater than the minimum order quantity.\"));\n                redirect_to(array('controller'=> 'store', 'action'=> 'show', 'id'=> $this->params['product_id']));\n            } else {\n\n            }\n            // adjust multiple quantity here\n            if ($product->multiple_order_quantity && ((int)$this->params['quantity']) % $product->multiple_order_quantity) {\n                flash('message', gt(\"Please enter a quantity in multiples of\") . ' ' . $product->multiple_order_quantity);\n                redirect_to(array('controller'=> 'store', 'action'=> 'show', 'id'=> $this->params['product_id']));\n            } else {\n\n            }\n        }\n\n        // if needed we throw up a form to gather additional information before adding this item to the cart\n//        if (($product->product_type == \"product\" || $product->product_type == \"childProduct\" || $product->product_type == \"donation\" || $product->product_type == \"eventregistration\") && empty($this->params['quick'])) {\n//        if ($product->product_type != \"giftcard\" && empty($this->params['quick'])) {\n//        if (empty($this->params['quick'])) {\n//            //FIXME shouldn't this be relegated to $product->addToCart???\n//            if (($product->hasOptions() && (!isset($this->params['options_shown']) || $this->params['options_shown'] != $product->id)) ||\n//                ($product->hasUserInputFields() && (!isset($this->params['input_shown']) || $this->params['input_shown'] != $product->id))) {\n//                // if we hit here it means this product type was missing some\n//                // information it needs to add the item to the cart..so we need to help\n//                // it display its addToCart form\n//                /*redirect_to(array(\n//                            'controller'=>'cart',\n//                            'action'=>'displayForm',\n//                            'form'=>'addToCart',\n//                            'product_id'=>$this->params['product_id'],\n//                            'product_type'=>$this->params['product_type'],\n//                            'children'=>serialize($this->params['children']),\n//                    ));*/\n//                $product->displayForm('addToCart', $this->params);\n//                return false;\n//            }\n//        }\n        //product either has no options, user input fields, or has already seen and passed the options page, so we try adding to cart\n        //it will validate and fail back to the options page if data is incorrect for whatever reason (eg, bad form post)\n        if ($product->addToCart($this->params)) {\n            // product was added\n            if (ecomconfig::getConfig('show_cart') || !empty($this->params['quick'])) {\n                // adding an item displays the shopping cart\n//                global $order;\n//                $order->calculateGrandTotal();\n//                if (!$order->grand_total && !$order->shipping_required) {\n//                    redirect_to(array('controller'=>'cart', 'action'=>'quickConfirm'));\n//                } elseif (!$order->shipping_required) {\n//                    redirect_to(array('controller'=>'cart', 'action'=>'quickPay'));\n//                } else {\n                //expHistory::back();\n                //eDebug(show_msg_queue(false),true);\n                redirect_to(array('controller'=>'cart', 'action'=>'show'));\n                //expHistory::lastNotEditable();\n//                }\n            } else {\n                // quick added, so just provide message\n                if ($product->product_type == \"donation\") {\n                    $type = ' '.gt('Donation');\n                } elseif ($product->product_type == \"eventregistration\") {\n                    $type = ' '.gt('Event');\n                } else {\n                    $type = '';\n                }\n                flash('message', gt(\"Added\") . \" \" . $product->title . $type . \" \" . gt(\"to your cart.\") . \" <a href='\" . $router->makeLink(array('controller'=> 'cart', 'action'=> 'checkout'), false, true) . \"'>\" . gt(\"Click here to checkout now.\") . \"</a>\");\n            }\n        } else {\n            return false;\n        }\n        expHistory::back();\n    }\n\n    function updateQuantity() {\n        global $order;\n        if (expJavascript::inAjaxAction()) {\n            //FIXME though currently unused we don't account for minimym nor multiple quantity settings\n            $id      = str_replace('quantity-', '', $this->params['id']);\n            $item    = new orderitem($id);\n            $updates = new stdClass();\n            if (!empty($item->id)) {\n                //$newqty = $item->product->updateQuantity($this->params['value']);\n                $newqty = $item->product->updateQuantity($this->params['value']);\n                if ($newqty > $item->product->quantity) {\n                    if ($item->product->availability_type == 1) {\n                        $diff             = ($item->product->quantity <= 0) ? $newqty : $newqty - $item->product->quantity;\n                        $updates->message = 'Only ' . $item->product->quantity . ' ' . $item->products_name . ' are currently in stock. Shipping may be delayed on the other ' . $diff;\n                    } elseif ($item->product->availability_type == 2) {\n                        $updates->message    = $item->products_name . ' only has ' . $item->product->quantity . ' on hand. You can not add any more than that to your cart.';\n                        $updates->cart_total = expCore::getCurrencySymbol() . number_format($order->getCartTotal(), 2);\n                        $updates->item_total = expCore::getCurrencySymbol() . number_format($item->getTotal(), 2);\n                        $updates->item_id    = $id;\n                        $updates->quantity   = $item->product->quantity;\n                        echo json_encode($updates);\n                        return true;\n                    }\n                }\n                $item->quantity = $newqty;\n                $item->save();\n                $order->refresh();\n                $updates->cart_total = expCore::getCurrencySymbol() . number_format($order->getCartTotal(), 2);\n                $updates->item_total = expCore::getCurrencySymbol() . number_format($item->getTotal(), 2);\n                $updates->item_id    = $id;\n                $updates->quantity   = $item->quantity;\n                echo json_encode($updates);\n            }\n        } else {\n            if (empty($this->params['quantity']) && !empty($this->params['qtyr'])) $this->params['quantity'] = $this->params['qtyr'];\n            if (!is_numeric($this->params['quantity'])) {\n                flash('error', gt('Please enter a valid quantity.'));\n                expHistory::back();\n            }\n\n            $item = new orderitem($this->params['id']);\n\n            if (!empty($item->id)) {\n                //$newqty = $item->product->updateQuantity($this->params['quantity']);\n                $newqty = $this->params['quantity'];\n                //$oiObj = new orderitem();\n                //$oi = $oiObj->find('all','product_id='.$item->product->id);\n                $qCheck = 0; //$item->product->quantity;\n                //if (!empty($oi))\n                //{\n                foreach ($order->orderitem as $orderItem) {\n                    if ($orderItem->product_id == $item->product_id) $qCheck += $orderItem->quantity;\n                }\n                //eDebug(\"Done\",true);\n                //}\n                /*eDebug($item->quantity);\n                eDebug($item->product->quantity);\n                eDebug($qCheck);\n                eDebug($newqty,true);  */\n                //check minimum quantity\n                $qtyMessage = '';\n                if ($newqty < $item->product->minimum_order_quantity) {\n                    $qtyMessage = $item->product->title . ' has a minimum order quantity of ' . $item->product->minimum_order_quantity . '. The quantity has been adjusted and added to your cart.<br/><br/>';\n                    $newqty     = $item->product->minimum_order_quantity;\n                }\n                // adjust multiple quantity here\n                if ($newqty % $item->product->multiple_order_quantity) {\n                    $qtyMessage = $item->product->title . ' must be ordered in multiples of ' . $item->product->multiple_order_quantity . '. The quantity has been adjusted up and added to your cart.<br/><br/>';\n                    $offset = $newqty % $item->product->multiple_order_quantity;\n                    $newqty     = $newqty - $offset + $item->product->multiple_order_quantity;\n                }\n\n                $itemMessage = '';\n                if (($qCheck + ($newqty - $item->quantity)) > $item->product->quantity) {\n                    if ($item->product->availability_type == 1) {\n                        $diff        = ($item->product->quantity <= 0) ? $newqty : $newqty - $item->product->quantity;\n                        $itemMessage = gt('Only') . ' ' . $item->product->quantity . ' ' . $item->products_name . ' ' . gt('are currently in stock. Shipping may be delayed on the other') . ' ' . $diff . \"<br/><br/>\";\n                        //$updates->message = 'Only '.$item->product->quantity.' '.$item->products_name.' are currently in stock. Shipping may be delayed on the other '.$diff;\n                    } elseif ($item->product->availability_type == 2) {\n                        flash('error', $item->products_name . ' ' . gt('only has') . ' ' . $item->product->quantity . ' ' . gt('on hand. You can not add any more than that to your cart.'));\n                        /*$updates->message = $item->products_name.' only has '.$item->product->quantity.' on hand. You can not add any more to your cart.';\n                        $updates->cart_total = '$'.number_format($order->getCartTotal(), 2);\n                        $updates->item_total = '$'.number_format($item->quantity*$item->products_price, 2);\n                        $updates->item_id = $id;\n                        $updates->quantity = $item->product->quantity;\n                        echo json_encode($updates);  */\n                        expHistory::back();\n                    }\n                } else if ($newqty <= 0) {\n                    $item->delete();\n                    flash('message', $item->products_name . ' ' . gt('has been removed from your cart.'));\n                    expHistory::back();\n                }\n                $item->quantity = $newqty;\n                $item->save();\n                $order->refresh();\n\n                /*$updates->cart_total = '$'.number_format($order->getCartTotal(), 2);\n        $updates->item_total = '$'.number_format($item->quantity*$item->products_price, 2);\n        $updates->item_id = $id;\n        $updates->quantity = $item->quantity;      */\n                //echo json_encode($updates);\n            }\n            //redirect_to(array('controller'=>'cart','action'=>'show'));\n            flash('message', $qtyMessage . $itemMessage . $item->products_name . ' ' . gt('quantity has been updated.'));\n            expHistory::back();\n        }\n    }\n\n    function removeItem() {\n        global $order;\n        foreach ($order->orderitem as $item) {\n            if ($item->id == intval($this->params['id'])) {\n                $product = new  $item->product_type($item->product_id);\n                $product->removeItem($item);\n                $item->delete();\n            }\n        }\n\n        expHistory::back();\n    }\n\n    function show() {\n        global $order;\n\n        //$cartinfo->''ecomconfig::getConfig('email_invoice')\n        //$back = expHistory::getLast('viewable');\n        //eDebug(new expHistory);\n        expHistory::set('viewable', $this->params);\n        //eDebug($order,true);\n        if (isset($order)) {\n            //this triggers creation/updating of the shippingmethod and setting\n            //default rate if user has not yet chosen one.\n//            $shipping = new shipping();\n//            $shipping->getRates();\n            $order->calculateGrandTotal();\n\n            //eDebug($order,true);\n            //check to see if we have calculate shipping yet - if shipping_total_before_discounts is set\n            //to something other than 0, then we have, but we'll set the estimtae to shipping_total to\n            //accomodate any applied discounts\n            //if (!empty($order->shipping_total_before_discounts))\n            //{\n            //    $estimated_shipping = $order->shipping_total;\n            //}\n            //otherwise we'll grab an estimate\n            //else\n            //{\n            //$estimated_shipping = shipping::estimateShipping($order);\n            /* $shipping = new shipping();\n          $shipping->getRates();\n          //eDebug($shipping,true);\n          $estimated_shipping = $shipping->pricelist['01']['cost'];*/\n            //foreach ($order->orderitem as $item)\n            //{\n            //eDebug($item->product);\n            //}\n            //}\n\n            // are there active discounts in the db?\n            $discountCheck    = new discounts();\n            $discountsEnabled = $discountCheck->find('all', 'enabled=1');\n            if (empty($discountsEnabled)) {\n                // flag to hide the discount box\n                assign_to_template(array(\n                    'noactivediscounts'=> '1'\n                ));\n                $discounts = null;\n            } else {\n                // get all current discount codes that are valid and applied\n                $discounts = $order->validateDiscounts();\n            }\n        } else {\n            $order              = new stdClass();\n            $order->orderitem   = new stdClass();\n            $items              = null;\n            $discounts          = null;\n//            $estimated_shipping = null;\n        }\n        assign_to_template(array(\n            'items'    => $order->orderitem,\n            'order'    => $order,\n            'discounts'=> $discounts,\n            /*'estimated_shipping'=>$estimated_shipping*/\n        ));\n\n    }\n\n    function cart_only() {\n        $this->show();\n    }\n\n    function quickpay_donation_cart() {\n        $this->show();\n    }\n\n    function checkout() {\n        global $user, $order, $router;\n\n        if (empty($order)) {\n            flash('error', gt('There is an error with your shopping cart.'));\n            expHistory::back();\n        }\n\n//        $config   = new expConfig(expCore::makeLocation(\"ecomconfig\",\"@globalstoresettings\",\"\"));\n\n        $order->calculateGrandTotal();\n        $order->validateDiscounts(array('controller'=> 'cart', 'action'=> 'checkout'));\n\n        if (!expSession::get('customer-signup') && !$user->isLoggedin()) {  // give opportunity to login or sign up\n            expHistory::set('viewable', $this->params);\n            expSession::set('customer-login', true);\n            flash('message', gt(\"Please select how you would like to continue with the checkout process.\"));\n            expHistory::redirecto_login(makeLink(array('module'=> 'cart', 'action'=> 'checkout'), 'secure'),true);\n        }\n\n//        if ($order->total < intval($config->config['min_order'])) {\n//            flashAndFlow('error',gt(\"Note: Thank you for your decision to purchase. However, our minimum order for merchandise is \").expCore::getCurrencySymbol() . number_format($config->config['min_order'], 2, \".\", \",\") . \". \".gt(\"Please increase your quantity or continue shopping.\"));\n//        }\n        if ($order->total < intval(ecomconfig::getConfig('min_order'))) {\n            flashAndFlow('error',gt(\"Note: Thank you for your decision to purchase. However, our minimum order for merchandise is \").expCore::getCurrencySymbol() . number_format(ecomconfig::getConfig('min_order'), 2, \".\", \",\") . \". \".gt(\"Please increase your quantity or continue shopping.\"));\n        }\n\n        if (empty($order->orderitem)) flashAndFlow('error',gt('There are no items in your cart.'));\n\n        if (!order::getDefaultOrderType()) {\n            flashAndFlow('error', gt('This store is not yet fully configured to allow checkouts.').\"<br>\".gt('You Must Create a Default Order Type').' <a href=\"'.expCore::makeLink(array('controller'=>'order_type','action'=>'manage')).'\">'.gt('Here').'</a>');\n        }\n        if (!order::getDefaultOrderStatus()) {\n            flashAndFlow('error', gt('This store is not yet fully configured to allow checkouts.').\"<br>\".gt('You Must Create a Default Order Status').' <a href=\"'.expCore::makeLink(array('controller'=>'order_status','action'=>'manage')).'\">'.gt('Here').'</a>');\n        }\n\n        $billing = new billing();\n        //eDebug($billing,true);\n        if (count($billing->available_calculators) < 1) {\n            flashAndFlow('error', gt('This store is not yet fully configured to allow checkouts.').\"<br>\".gt('You Must Activate a Payment Option').' <a href=\"'.expCore::makeLink(array('controller'=>'billing','action'=>'manage')).'\">'.gt('Here').'</a>');\n        }\n        // set a flow waypoint\n        expHistory::set('viewable', $this->params);\n\n        //this validate the discount codes already applied to make sure they are still OK\n        //if they are not it will remove them and redirect back to checkout w/ a message flash\n        //$order->updateOrderDiscounts();\n\n        //eDebug($order);\n        // are there active discounts in the db?\n        $discountCheck    = new discounts();\n        $discountsEnabled = $discountCheck->find('all', 'enabled=1');\n        if (empty($discountsEnabled)) {\n            // flag to hide the discount box\n            assign_to_template(array(\n                'noactivediscounts'=> '1'\n            ));\n            $discounts = null;\n        } else {\n            // get all current discount codes that are valid and applied\n            $discounts = $order->getOrderDiscounts();\n        }\n        //eDebug($discounts);\n        /*if (count($discounts)>=0) {\n              // Mockup code\n              $order->totalBeforeDiscounts = $order->total; // reference to the origional total\n              $order->total = $order->total*85/100; // to simulate 15%\n\n          } */\n        // call each products checkout() callback & calculate total\n        foreach ($order->orderitem as $item) {\n            $product = new $item->product_type($item->product_id);\n            $product->checkout();\n        }\n\n        // get the specials...this is just a stub function for now.\n        $specials = $this->getSpecials();\n\n        // get all the necessary addresses..shipping, billing, etc\n        $address = new address();\n        //$addresses_dd = $address->dropdownByUser($user->id);\n        $shipAddress = $address->find('first', 'user_id=' . $user->id . ' AND is_shipping=1');\n        if (empty($shipAddress) || !$user->isLoggedin()) {  // we're not logged in and don't have an address yet\n            expSession::set('customer-signup', false);\n            flash('message', gt('Enter your primary address info now.') .\n                '<br><br>' .\n                gt('You may also optionally provide a password if you would like to return to our store at a later time to view your order history or make additional purchases.') .\n                '<br><br>' .\n                gt('If you need to add another billing or shipping address you will be able to do so on the following page.'));\n            redirect_to(array('controller'=> 'address', 'action'=> 'edit'));\n        }\n\n        // get the shipping calculators and the shipping methods if we need them\n        $shipping = new shipping();\n        //$shipping->shippingmethod->setAddress($shipAddress);\n        if (count($shipping->available_calculators) < 1) {\n            flashAndFlow('error', gt('This store is not yet fully configured to allow checkouts.').\"<br>\".gt('You Must Activate a Shipping Option').' <a href=\"'.expCore::makeLink(array('controller'=>'shipping','action'=>'manage')).'\">'.gt('Here').'</a>');\n        }\n\n        // we need to get the current shipping method rates\n        $shipping->getRates();\n\n        if (strpos($router->current_url, 'https://') === false && (!defined('DISABLE_SSL_WARNING') || DISABLE_SSL_WARNING==0))\n            flash('error', gt('This page appears to be unsecured!  Personal information may become compromised!'));\n\n        assign_to_template(array(\n//            'cartConfig'          => $config->config,\n            //'addresses_dd'=>$addresses_dd,\n            //'addresses'=>$addresses,\n            'shipping'            => $shipping,\n            'user'                => $user,\n            'billing'             => $billing,\n            'discounts'           => $discounts,\n            'order'               => $order,\n            'order_types'         => order::getOrderTypes(),\n            'default_order_type'  => order::getDefaultOrderType(),\n            'order_statuses'      => order::getOrderStatuses(),\n            'default_order_status'=> order::getDefaultOrderStatus(),\n            'sales_reps'          => order::getSalesReps()\n            //'needs_address'=>$needs_address,\n        ));\n    }\n\n    /**\n     * the first thing after checkout.\n     *\n     */\n    public function preprocess() {\n        //eDebug($this->params,true);\n        global $order, $user, $db;\n\n//        // check to see if this is a no cost/no shipping checkout\n//        if ($order->total == 0 && empty($order->shippingmethods) && $this->params['billingcalculator_id'] == 0) {\n//             // final the cart totals\n//            $order->calculateGrandTotal();\n//            $order->setOrderType($this->params);\n//            $order->setOrderStatus($this->params);\n//        } else {\n//\n        //eDebug($_POST, true);\n        // get the shipping and billing objects, these objects handle the setting up the billing/shipping methods\n        // and their calculators\n        $shipping = new shipping();\n        $billing  = new billing();\n        // since we're skipping the billing method selection, do it here\n        $billing->billingmethod->update($this->params);\n        //this is just dumb. it doesn't update the object, refresh doesn't work, and I'm tired\n        $billing = new billing();\n\n        if (!$user->isLoggedIn()) {\n            flash('message', gt(\"It appears that your session has expired. Please log in to continue the checkout process.\"));\n            expHistory::redirecto_login(makeLink(array('module'=> 'cart', 'action'=> 'checkout'), true));\n        }\n\n        // Make sure all the pertinent data is there...otherwise flash an error and redirect to the checkout form.\n        if (empty($order->orderitem)) {\n            flash('error', gt('There are no items in your cart.'));\n        }\n        if (empty($shipping->calculator->id) && !$shipping->splitshipping) {\n            flash('error', gt('You must pick a shipping method'));\n        }\n        if (empty($shipping->address->id) && !$shipping->splitshipping) {\n            flash('error', gt('You must pick a shipping address'));\n        }\n        if (empty($billing->calculator->id)) {\n            flash('error', gt('You must pick a billing method'));\n        }\n        if (empty($billing->address->id)) {\n            flash('error', gt('You must select a billing address'));\n        }\n\n        // make sure all the methods picked for shipping meet the requirements\n        foreach ($order->getShippingMethods() as $smid) {\n            $sm       = new shippingmethod($smid);\n            $calcname = $db->selectValue('shippingcalculator', 'calculator_name', 'id=' . $sm->shippingcalculator_id);\n            $calc     = new $calcname($sm->shippingcalculator_id);\n            $ret      = $calc->meetsCriteria($sm);\n            if (is_string($ret)) {\n                flash('error', $ret);\n            }\n        }\n\n        // if we encountered any errors we will return to the checkout page and show the errors\n        if (!expQueue::isQueueEmpty('error')) {\n            redirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n//            $this->checkout();\n        }\n\n         // final the cart totals\n        $order->calculateGrandTotal();\n        $order->setOrderType($this->params);\n        $order->setOrderStatus($this->params);\n        //eDebug($order,true);\n\n        // get the billing options..this is usually the credit card info entered by the user\n        if ($billing->calculator != null) {\n            if (isset($this->params['cc_type_' . $billing->calculator->calculator_name])) {\n                $this->params['cc_type'] = $this->params['cc_type_' . $billing->calculator->calculator_name];\n                unset($this->params['cc_type_' . $billing->calculator->calculator_name]);\n            }\n            $opts = $billing->calculator->userFormUpdate($this->params);\n            //$billing->calculator->preprocess($this->params);\n            //this should probably be generic-ized a bit more - currently assuming order_type parameter is present, or defaults\n            //eDebug(order::getDefaultOrderType(),true);\n\n            // call the billing method's preprocess in case it needs to prepare things.\n            // eDebug($billing);\n            $result = $billing->calculator->preprocess($billing->billingmethod, $opts, $this->params, $order);\n        } else {  // no calculator, so we'll assume no cost checkout\n            if (substr($this->params['cash_amount'], 0, strlen(expCore::getCurrencySymbol())) == expCore::getCurrencySymbol()) {\n                $this->params['cash_amount'] = substr($this->params['cash_amount'], strlen(expCore::getCurrencySymbol()));\n            }\n            $opts = new stdClass();\n            $opts->cash_amount = $this->params[\"cash_amount\"];\n\n            if ($opts->cash_amount < $order->grand_total) $opts->payment_due = $order->grand_total - $opts->cash_amount;\n            $billing->billingmethod->update(array('billing_options' => serialize($opts)));\n        }\n        //eDebug($opts);\n        expSession::set('billing_options', $opts);  //FIXME $opts is usually empty\n        //$o = expSession::get('billing_options');\n        //eDebug($o,true);\n        //eDebug($this->params,true);\n\n        // once in a while it appears the payment processor will return a nullo value in the errorCode field\n        // which the previous check takes as a TRUE, as 0, null, and empty will all equate out the same using the ==\n        // adding the === will specifically test for a 0 and only a 0, which is what we want\n\n//        }\n\n        if (empty($result->errorCode)) {  //if ($result->errorCode === \"0\" || $result->errorCode === 0)\n\t\t\tredirect_to(array('controller'=>'cart', 'action'=>'confirm'));\n//            $this->confirm();\n        } else {\n            flash('error', gt('An error was encountered while processing your transaction.') . '<br /><br />' . $result->message);\n            expHistory::back();\n        }\n    }\n\n    public function confirm() {\n        global $order;\n\n        //eDebug($this->params);\n        if (empty($order->orderitem)) flashAndFlow('error',gt('There are no items in your cart.'));\n\n        // finalize the cart totals\n        $order->calculateGrandTotal();\n\n        //eDebug($order);\n        // get the shipping and billing objects, these objects handle the setting up the billing/shipping methods\n        // and their calculators\n        $shipping = new shipping();\n        $billing  = new billing();\n\n        $opts = expSession::get('billing_options');\n        //eDebug($opts,true);\n//        if ($billing->calculator != null) {\n//            $view_opts = $billing->calculator->userView($opts);\n//        } else {\n//            if (empty($opts)) {\n//                $view_opts = false;\n//            } else {\n//                $billinginfo = gt(\"No Cost\");\n//                if (!empty($opts->payment_due)) {\n//                    $billinginfo .= '<br>'.gt('Payment Due') . ': ' . expCore::getCurrencySymbol() . number_format($opts->payment_due, 2, \".\", \",\");\n//                }\n//                $view_opts = $billinginfo;\n//            }\n//        }\n        assign_to_template(array(\n            'shipping'   => $shipping,\n            'billing'    => $billing,\n            'order'      => $order,\n            'total'      => $order->total,\n            'billinginfo'=> $billing->getBillingInfo($opts),\n        ));\n    }\n\n    public function process() {\n//        global $db, $order, $user;\n        global $order, $user;\n\n        //eDebug($order,true);\n        if (!$user->isLoggedIn() && empty($this->params['nologin'])) {\n            flash('message', gt(\"It appears that your session has expired. Please log in to continue the checkout process.\"));\n            expHistory::back();\n\n            //expHistory::redirecto_login(makeLink(array('module'=>'cart','action'=>'checkout'), 'secure'));\n        }\n        // if this error hits then something went horribly wrong or the user has tried to hit this\n        // action themselves before the cart was ready or is refreshing the page after they've confirmed the\n        // order.\n        if (empty($order->orderitem)) flash('error', gt('There are no items in your cart.'));\n        if (!expQueue::isQueueEmpty('error')) redirect_to(array('controller'=> 'store', 'action'=> 'showall'));\n\n        // set the gift comments\n        $order->update($this->params);\n\n        // save initial order status\n        $change = new order_status_changes();\n//        $change->from_status_id = null;\n        $change->to_status_id   = $order->order_status_id;\n        $change->orders_id      = $order->id;\n        $change->save();\n\n        // get the biling & shipping info\n//        $shipping = new shipping();\n        $billing  = new billing();\n\n        // finalize the total to bill\n        $order->calculateGrandTotal();\n        //eDebug($order,true);\n        $order->invoice_id = $order->getInvoiceNumber(false);  // assign the next invoice id, but don't advance it yet\n        // call the billing calculators process method - this will handle saving the billing options to the database.\n//        if (!($order->total == 0 && empty($order->shippingmethods))) {\n        if ($billing->calculator != null) {\n//            $result = $billing->calculator->process($billing->billingmethod, expSession::get('billing_options'), $this->params, $invNum);\n            $result = $billing->calculator->process($billing->billingmethod, expSession::get('billing_options'), $this->params, $order);\n        } else {\n            // manually perform createBillingTransaction() normally done within billing calculator process()\n            $opts = expSession::get('billing_options');\n            $object = new stdClass();\n            $object->errorCode = $opts->result->errorCode = 0;\n            $opts->result->payment_status = gt(\"complete\");\n            if ($opts->cash_amount < $order->grand_total) $opts->result->payment_status = gt(\"payment due\");\n            $billing->billingmethod->update(array('billing_options' => serialize($opts),'transaction_state'=>$opts->result->payment_status));\n\n//            $this->createBillingTransaction($billing->billingmethod, number_format($order->grand_total, 2, '.', ''), $opts->result, $opts->result->payment_status);\n            $amount = number_format($order->grand_total, 2, '.', '');\n            $bt = new billingtransaction();\n            $bt->billingmethods_id = $billing->billingmethod->id;\n            $bt->billingcalculator_id = $billing->billingmethod->billingcalculator_id;\n            $bt->billing_cost = $amount;\n            $bt->billing_options  = serialize($opts->result);\n            $bt->extra_data = '';\n            $bt->transaction_state = $opts->result->payment_status;\n            $bt->save();\n            $result = $opts;\n        }\n//        }\n\n        if (empty($result->errorCode)) {\n            // if ($result->errorCode === \"0\" || $result->errorCode === 0)\n            // {\n            // save out the cart total to the database\n            $billing->billingmethod->update(array('billing_cost'=> $order->grand_total));\n\n            // set the invoice number and purchase date in the order table..this finializes the order\n            //$invoice_num = $db->max('orders', 'invoice_id') + 1;\n            //if ($invoice_num < ecomconfig::getConfig('starting_invoice_number')) $invoice_num += ecomconfig::getConfig('starting_invoice_number');\n\n            // get the first order status and set it for this order\n            $invNum = $order->getInvoiceNumber();  // payment was processed so advance the invoice #\n//            $order->update(array('invoice_id'=> $invNum, 'purchased'=> time(), 'updated'=> time(), 'comment'=> serialize($comment))); //FIXME $comment doesn't exist\n            $order->update(array('invoice_id'=> $invNum, 'purchased'=> time(), 'updated'=> time()));\n            //$order->setDefaultStatus(); --FJD?\n            //$order->setDefaultOrderType(); --FJD?\n            $order->refresh();\n\n            // run each items process callback function\n            foreach ($order->orderitem as $item) {\n                $product = new $item->product_type($item->product_id);\n                $product->process($item, $order->order_type->affects_inventory);\n            }\n\n            if ($billing->calculator != null) {\n                $billing->calculator->postProcess($order, $this->params);\n            }\n            orderController::clearCartCookie();\n        } else {\n            flash('error', gt('An error was encountered while processing your transaction.') . '<br /><br />' . $result->message);\n            expHistory::back();\n\n            //redirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n        }\n\n//        if (!DEVELOPMENT) {\n            // send email invoices to the admins & users if needed\n        if ($order->order_type->emails_customer)\n            $invoice = renderAction(array('controller'=> 'order', 'action'=> 'email', 'id'=> $order->id));\n//        } elseif ($user->isAdmin()) {\n//            flash('message', gt('Development on, skipping email sending.'));\n//        }\n        expSession::un_set('record');\n        //assign_to_template(array('order'=>$order, 'billing'=>$billing, 'shipping'=>$shipping, 'result'=>$result, 'billinginfo'=>$billinginfo));\n        flash('message', gt('Your order has been submitted.'));\n        redirect_to(array('controller'=> 'order', 'action'=> 'myOrder', 'id'=> $order->id, 'tc'=> 1));\n    }\n\n    function quickPay() {\n        global $order, $user;\n\n        if ($order->shipping_required) redirect_to(array('controller'=> 'cart', 'action'=> 'checkout'),true);\n        if (empty($order->orderitem)) flashAndFlow('error',gt('There are no items in your cart.'));\n\n        // if we made it here it means that the item was add to the cart.\n        expHistory::set('viewable', $this->params);\n\n        // call each products checkout() callback & calculate total\n        foreach ($order->orderitem as $item) {\n            $product = new $item->product_type($item->product_id);\n            $product->checkout();\n        }\n\n        // setup the billing & shipping calculators info\n//        if ($product->requiresBilling) {\n        if ($order->billing_required) {\n            $billing = new billing();\n            assign_to_template(array(\n                'billing'=> $billing\n            ));\n        }\n\n//        if ($product->requiresShipping) {\n        if ($order->shipping_required) {  //FIXME we exit earlier if shipping_required???\n            $shipping            = new shipping();\n            $shipping->pricelist = $shipping->listPrices();\n            assign_to_template(array(\n                'shipping'=> $shipping\n            ));\n        }\n\n        assign_to_template(array(\n            'product'=> $product,\n            'user'   => $user,\n            'order'  => $order\n        ));\n    }\n\n    function quickConfirm() {\n        global $order, $user;\n\n        if ($order->shipping_required || $order->grand_total) redirect_to(array('controller'=> 'cart', 'action'=> 'checkout'),true);\n        if (empty($order->orderitem)) flashAndFlow('error',gt('There are no items in your cart.'));\n\n        // if we made it here it means that the item was add to the cart.\n        expHistory::set('viewable', $this->params);\n\n        // call each products checkout() callback & calculate total\n        foreach ($order->orderitem as $item) {\n            $product = new $item->product_type($item->product_id);\n            $product->checkout();\n        }\n\n        assign_to_template(array(\n            'product'=> $product,\n            'user'   => $user,\n            'order'  => $order\n        ));\n    }\n\n    function processQuickPay() {\n        global $order, $template;\n\n        // reuse the confirm action's template\n        $tplvars = $template->tpl->tpl_vars;\n        $template = expTemplate::get_template_for_action($this, 'confirm', $this->loc);\n        $template->tpl->tpl_vars = array_merge($tplvars,$template->tpl->tpl_vars);\n\n        if (!empty($this->params['billing'])) {\n            $billing = new billing();\n            $billing->billingmethod->setAddress($this->params['billing']);\n        }\n\n        if (!empty($this->params['shipping'])) {\n            die('NEED TO IMPLEMENT THE SHIPPING PIECE!!'); //TODO\n            $shipping = new shipping();\n            $shipping->shippingingmethod->setAddress($this->params['shipping']);\n            assign_to_template(array(\n                'shipping'=> $shipping\n            ));\n        }\n\n        $opts = $billing->calculator->userFormUpdate($this->params);\n        $order->calculateGrandTotal();\n        expSession::set('billing_options', $opts);  //FIXME $opts is usually empty\n        assign_to_template(array(\n            'billing'    => $billing,\n            'order'      => $order,\n            'total'      => $order->total,\n//            'billinginfo'=> $billing->calculator->userView($opts),\n            'billinginfo'=> $billing->getBillingInfo($opts),\n            'nologin'    => 1\n        ));\n    }\n\n    public function splitShipping() {\n        global $user, $order;\n\n        expHistory::set('viewable', $this->params);\n\n        // get all the necessary addresses..shipping, billing, etc\n        $address      = new address(null, false, false);\n        $addresses_dd = $address->dropdownByUser($user->id);\n\n        if (count($addresses_dd) < 2) {\n            expHistory::set('viewable', $this->params);\n            flash('error', gt('You must have more than 1 address to split your shipment.  Please add another now.'));\n            redirect_to(array('controller'=> 'address', 'action'=> 'edit'));\n        }\n\n        // setup the list of orderitems\n        $orderitems = array();\n        foreach ($order->orderitem as $item) {\n            if ($item->product->requiresShipping == true) {\n                for ($i = 0; $i < $item->quantity; $i++) {\n                    $orderitems[] = $item;\n                }\n            }\n        }\n\n        if (count($orderitems) < 2) {\n            flashAndFlow('error',gt('You must have a minimum of 2 items in your shopping cart in order to split your shipment.'));\n        }\n\n        expHistory::set('viewable', $this->params);\n        assign_to_template(array(\n            'addresses_dd'=> $addresses_dd,\n            'orderitems'  => $orderitems,\n            'order'       => $order\n        ));\n    }\n\n    public function saveSplitShipping() {\n        global $db;\n\n        $addresses            = array();\n        $orderitems_to_delete = '';\n\n        foreach ($this->params['orderitems'] as $id=> $address_ids) {\n            foreach ($address_ids as $address_id) {\n                if (empty($addresses[$address_id][$id])) {\n                    $addresses[$address_id][$id] = 1;\n                } else {\n                    $addresses[$address_id][$id]++;\n                }\n            }\n\n            if (!empty($orderitems_to_delete)) $orderitems_to_delete .= ',';\n            $orderitems_to_delete .= $id;\n        }\n\n        foreach ($addresses as $addy_id => $orderitems) {\n            $shippingmethod = new shippingmethod();\n            $shippingmethod->setAddress($addy_id);\n\n            foreach ($orderitems as $orderitem_id => $qty) {\n                $orderitem = new orderitem($orderitem_id);\n                unset(\n                    $orderitem->id,\n                    $orderitem->shippingmethods_id\n                );\n                $orderitem->shippingmethods_id = $shippingmethod->id;\n                $orderitem->quantity           = $qty;\n                $orderitem->save();\n            }\n        }\n\n        $db->delete('orderitems', 'id IN (' . $orderitems_to_delete . ')');\n        redirect_to(array('controller'=>'cart', 'action'=>'selectShippingMethods'));\n//        $this->selectShippingMethods();\n    }\n\n    public function selectShippingMethods() {\n        global $order;\n\n        expHistory::set('editable', $this->params);\n        $shipping          = new shipping();\n        $shippingmethod_id = $order->getShippingMethods();\n\n        $shipping_items = array();\n        foreach ($shippingmethod_id as $id) {\n            $shipping_items[$id] = new order();\n            $shipping_items[$id]->method    = new shippingmethod($id);\n            $shipping_items[$id]->orderitem = $order->getOrderitemsByShippingmethod($id);\n            foreach ($shipping_items[$id]->orderitem as $key=> $item) {\n                if ($item->product->requiresShipping == false) {\n                    unset($shipping_items[$id]->orderitem[$key]);\n                }\n            }\n\n            if (empty($shipping_items[$id]->orderitem)) {\n                unset($shipping_items[$id]);\n            } else {\n                foreach ($shipping->available_calculators as $calcid=> $name) {\n                    if (class_exists($name)) {\n                        $calc = new $name($calcid);\n                        $shipping_items[$id]->prices[$calcid] = $calc->getRates($shipping_items[$id]);\n                        //eDebug($shipping_items[$id]->prices[$id]);\n                    }\n                }\n            }\n        }\n\n        assign_to_template(array(\n            'shipping_items'=> $shipping_items,\n            'shipping'      => $shipping\n        ));\n    }\n\n    public function customerSignup() {\n        if (expSession::get('customer-login')) expSession::un_set('customer-login');\n        expSession::set('customer-signup', true);\n        redirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n//        $this->checkout();\n    }\n\n    public function saveShippingMethods() {\n        global $order;\n\n        $shipping               = new shipping();\n        $order->shippingmethods = array();\n\n        // if they didn't fill out anything\n        if (empty($this->params['methods'])) {\n            expValidator::failAndReturnToForm(gt(\"You did not pick any shipping options\"), $this->params);\n        }\n\n        // if they don't check all the radio buttons\n        if (count($this->params['methods']) < count($this->params['calcs'])) {\n            expValidator::failAndReturnToForm(gt(\"You must select a shipping options for all of your packages.\"), $this->params);\n        }\n\n        foreach ($this->params['methods'] as $id=> $method) {\n            $cost           = $this->params['cost'][$method];\n            $title          = $this->params['title'][$method];\n            $shippingmethod = new shippingmethod($id);\n            $shippingmethod->update(array(\n                'option'               => $method,\n                'option_title'         => $title,\n                'shipping_cost'        => $cost,\n                'shippingcalculator_id'=> $this->params['calcs'][$id],\n            ));\n\n            $order->shippingmethods[] = $shippingmethod->id;\n        }\n\n        redirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n//        $this->checkout();\n    }\n\n    function createaddress() {\n//        global $db, $user;\n        global $user;\n\n        if ($user->isLoggedIn()) {\n            // save the address, make it default if it is the users first one\n            $address = new address();\n            $count   = $address->find('count', 'user_id=' . $user->id);\n            if ($count == 0) $this->params['is_default'] = 1;\n            $this->params['user_id'] = $user->id;\n            $address->update($this->params);\n\n            // set the billing/shipping method\n            if (isset($this->params['addresstype'])) {\n                if ($this->params['addresstype'] == 'shipping') {\n                    $shipping = new shipping();\n                    $shipping->shippingmethod->setAddress($address);\n                } elseif ($this->params['addresstype'] == 'billing') {\n                    $billing = new billing();\n                    $billing->billingmethod->setAddress($address);\n                }\n            }\n\n        }\n\n\t\tredirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n//        $this->checkout();\n    }\n\n    function getSpecials() {\n        //STUB::flesh this function out eventually.\n        return null;\n    }\n\n    // Discount Codes\n\n    function isValidDiscountCode($code) {\n        // is the code valid?\n        if ($code == '12345') {\n            # psudocode:\n            # grab current order discounts\n            # $discounts = new discountCode($order);\n            # append the new discount code to the current codes\n            # $discounts->appendCode($code);\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /*function checkDiscount() {\n         // handles what to do when a code valid or not\n         if (isValidDiscountCode($this->params['discountcode'])) {\n             flash('message', gt(\"Discount Code Applied\"));\n             redirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n         } else {\n             flash('error', gt(\"Sorry, the discount code provided is not a valid code.\"));\n             redirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n         }\n     }   */\n\n    function addDiscountToCart() {\n//        global $user, $order;\n        global $order;\n        //lookup discount to see if it's real and valid, and not already in our cart\n        //this will change once we allow more than one coupon code\n\n        $discount = new discounts();\n        $discount = $discount->getCouponByName(expString::escape($this->params['coupon_code']));\n\n        if (empty($discount)) {\n            flash('error', gt(\"This discount code you entered does not exist.\"));\n            //redirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n            expHistory::back();\n        }\n\n        //check to see if it's in our cart already\n        if ($this->isDiscountInCart($discount->id)) {\n            flash('error', gt(\"This discount code is already in your cart.\"));\n            //redirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n            expHistory::back();\n        }\n\n        //this should really be reworked, as it shoudn't redirect directly and not return\n        $validateDiscountMessage = $discount->validateDiscount();\n        if ($validateDiscountMessage == \"\") {\n            //if all good, add to cart, otherwise it will have redirected\n            $od               = new order_discounts();\n            $od->orders_id    = $order->id;\n            $od->discounts_id = $discount->id;\n            $od->coupon_code  = $discount->coupon_code;\n            $od->title        = $discount->title;\n            $od->body         = $discount->body;\n            $od->save();\n            // set this to just the discount applied via this coupon?? if so, when though? $od->discount_total = ??;\n            flash('message', gt(\"The discount code has been applied to your cart.\"));\n        } else {\n            flash('error', $validateDiscountMessage);\n        }\n        //redirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n        expHistory::back();\n    }\n\n    function removeDiscountFromCart($id = null, $redirect = true) {\n        //eDebug($params);\n        if ($id == null) $id = $this->params['id'];\n        $od = new order_discounts($id);\n        $od->delete();\n        flash('message', gt(\"The discount code has been removed from your cart\"));\n        if ($redirect == true) {\n            //redirect_to(array('controller'=>'cart', 'action'=>'checkout'));\n            expHistory::back();\n        }\n    }\n\n    function isDiscountInCart($discountId) {\n        global $order;\n        $cds = $order->getOrderDiscounts();\n        if (count($cds) == 0) return false;\n\n        foreach ($cds as $d) {\n            if ($discountId == $d->discounts_id) return true;\n        }\n        return false;\n    }\n\n//    function configure() {\n//        expHistory::set('editable', $this->params);\n//        $this->loc->src = \"@globalcartsettings\";\n//        $config         = new expConfig($this->loc);\n//        $this->config   = $config->config;\n//        assign_to_template(array(\n//            'config'=> $this->config,\n//            'title' => static::displayname()\n//        ));\n//    }\n\n    //this is ran after we alter the quantity of the cart, including\n    //delete items or runing the updatequantity action\n    private function rebuildCart() {\n        //group items by type and id\n        //since we can have the same product in different items (options and quantity discount)\n        //remove items and readd?\n        global $order;\n        //eDebug($order,true);\n        $items = $order->orderitem;\n        foreach ($order->orderitem as $item) {\n            $item->delete();\n        }\n        $order->orderitem = array();\n        $order->refresh();\n        foreach ($items as $item) {\n\n            for ($x = 1; $x <= $item->quantity; $x++) {\n                $product   = $item->product;\n                $price     = $product->getBasePrice();\n                $basePrice = $price;\n                $options   = array();\n                if (!empty($item->opts)) {\n                    foreach ($item->opts as $opt) {\n                        $cost = $opt[2] == '$' ? $opt[4] : $basePrice * ($opt[4] * .01);\n                        $cost = $opt[3] == '+' ? $cost : $cost * -1;\n                        $price += $cost;\n                        $options[] = $opt;\n                    }\n                }\n                $params['options']        = serialize($options);\n                $params['products_price'] = $price;\n                $params['product_id']     = $product->id;\n                $params['product_type']   = $product->product_type;\n\n                $newitem = new orderitem($params);\n                //eDebug($item, true);\n                $newitem->products_price = $price;\n                $newitem->options        = serialize($options);\n\n                $sm                          = $order->getCurrentShippingMethod();\n                $newitem->shippingmethods_id = $sm->id;\n                $newitem->save();\n                $order->refresh();\n            }\n        }\n        $order->save();\n        /*eDebug($items);\n\n\n        $options = array();\n        foreach ($this->optiongroup as $og) {\n            if ($og->required && empty($params['options'][$og->id][0])) {\n\n                flash('error', $this->title.' '.gt('requires some options to be selected before you can add it to your cart.'));\n                redirect_to(array('controller'=>store, 'action'=>'show', 'id'=>$this->id));\n            }\n            if (!empty($params['options'][$og->id])) {\n                foreach ($params['options'][$og->id] as $opt_id) {\n                    $selected_option = new option($opt_id);\n                    $cost = $selected_option->modtype == '$' ? $selected_option->amount :  $this->getBasePrice() * ($selected_option->amount * .01);\n                    $cost = $selected_option->updown == '+' ? $cost : $cost * -1;\n                    $price += $cost;\n                    $options[] = array($selected_option->id,$selected_option->title,$selected_option->modtype,$selected_option->updown,$selected_option->amount);\n                }\n            }\n        }\n        //die();\n        // add the product to the cart.\n        $params['options'] = serialize($options);\n        $params['products_price'] = $price;\n        $item = new orderitem($params);\n        //eDebug($item, true);\n        $item->products_price = $price;\n        $item->options = serialize($options);\n\n        $sm = $order->getCurrentShippingMethod();\n        $item->shippingmethods_id = $sm->id;\n        $item->save();                            */\n        return true;\n\n    }\n\n    public function empty_cart() {\n        global $order;\n        foreach ($order->orderitem as $orderItem) {\n            $orderItem->delete();\n        }\n        flash('message', gt('Your shopping cart is now empty.'));\n        expHistory::back();\n    }\n\n//    function saveconfig() {\n//        // setup and save the config\n//        $this->loc->mod = \"cart\";\n//        $this->loc->src = \"@globalcartsettings\";\n//        $this->loc->int = \"\";\n//        parent::saveconfig();\n//    }\n\n    /**\n     * get the metainfo for this module\n     *\n     * @return array\n     */\n    function metainfo() {\n        global $router;\n\n        if (empty($router->params['action'])) return false;\n\n        // figure out what metadata to pass back based on the action we are in.\n        $action = $router->params['action'];\n        $metainfo = array('title' => '', 'keywords' => '', 'description' => '', 'canonical' => '', 'noindex' => true, 'nofollow' => true);\n        $storename = ecomconfig::getConfig('storename');\n        switch ($action) {\n            default:\n                $metainfo['title'] = gt(\"Shopping Cart\") . \" - \" . $storename;\n                $metainfo['keywords'] = SITE_KEYWORDS;\n                $metainfo['description'] = SITE_DESCRIPTION;\n//                $metainfo['canonical'] = URL_FULL.substr($router->sefPath, 1);\n//                $metainfo['canonical'] = $router->plainPath();\n        }\n\n        return $metainfo;\n    }\n\n}\n\n?>", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package Modules\n */\n\nclass purchaseOrderController extends expController {\n\tpublic $basemodel_name = 'purchase_order';\n\tprotected $manage_permissions = array(\n        'show_vendor'=>'Show Vendor Details',\n    );\n\n    static function displayname() { return gt(\"e-Commerce Purchase Order Manager\"); }\n    static function description() { return gt(\"Use this module to create and manage purchase orders for your ecommerce store.\"); }\n\n\tfunction manage () {\n\t    expHistory::set('viewable', $this->params);\n\n\t\t$vendor = new vendor();\n\t\t$vendors = $vendor->find('all');\n\t\tif(!empty($this->params['vendor'])) {\n\t\t\t$purchase_orders = $this->purchase_order->find('all', 'vendor_id=' . $this->params['vendor']);\n\t\t} else {\n\t\t\t$purchase_orders = $this->purchase_order->find('all');\n\t\t}\n\n\t\tassign_to_template(array(\n            'purchase_orders'=>$purchase_orders,\n            'vendors' => $vendors,\n            'vendor_id' => @$this->params['vendor']\n        ));\n\t}\n\n\tfunction edit () {\n//\t    global $db;\n\t    assign_to_template(array(\n            'record'=>$this->params\n        ));\n\t}\n\n\tfunction manage_vendors () {\n\t    expHistory::set('viewable', $this->params);\n\t\t$vendor = new vendor();\n\n\t\t$vendors = $vendor->find('all');\n\t\tassign_to_template(array(\n            'vendors'=>$vendors\n        ));\n\t}\n\n\tfunction show_vendor () {\n\t\t$vendor = new vendor();\n\n\t\tif(isset($this->params['id'])) {\n\t\t\t$vendor = $vendor->find('first', 'id =' .$this->params['id']);\n\t\t\t$vendor_title = $vendor->title;\n\t\t\t$state = new geoRegion($vendor->state);\n\t\t\t$vendor->state = $state->name;\n\t\t\t//Removed unnecessary fields\n\t\t\tunset(\n                $vendor->title,\n                $vendor->table,\n                $vendor->tablename,\n                $vendor->classname,\n                $vendor->identifier\n            );\n\n\t\t\tassign_to_template(array(\n                'vendor_title' => $vendor_title,\n                'vendor'=>$vendor\n            ));\n\t\t}\n\t}\n\n\tfunction edit_vendor() {\n\t\t$vendor = new vendor();\n\n\t\tif(isset($this->params['id'])) {\n\t\t\t$vendor = $vendor->find('first', 'id =' .$this->params['id']);\n\t\t\tassign_to_template(array(\n                'vendor'=>$vendor\n            ));\n\t\t}\n\t}\n\n\tfunction update_vendor() {\n\t\t$vendor = new vendor();\n\n\t\t$vendor->update($this->params['vendor']);\n        expHistory::back();\n    }\n\n\tfunction delete_vendor() {\n\t\tglobal $db;\n\n        if (!empty($this->params['id'])){\n\t\t\t$db->delete('vendor', 'id =' .$this->params['id']);\n\t\t}\n        expHistory::back();\n    }\n\n\tpublic function getPurchaseOrderByJSON() {\n\n\t\tif(!empty($this->params['vendor'])) {\n\t\t\t$purchase_orders = $this->purchase_order->find('all', 'vendor_id=' . expString::escape($this->params['vendor']));\n\t\t} else {\n\t\t\t$purchase_orders = $this->purchase_order->find('all');\n\t\t}\n\n\t\techo json_encode($purchase_orders);\n\t}\n\n}\n\n?>", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package    Modules\n */\n/** @define \"BASE\" \"../../../..\" */\n\nclass storeController extends expController {\n    public $basemodel_name = 'product';\n    public $useractions = array(\n        'showall'                         => 'Products - All Products and Categories',\n        'showallFeaturedProducts'         => 'Products - Only Featured',\n        'showallCategoryFeaturedProducts' => 'Products - Featured Products under current category',\n        'showallManufacturers'            => 'Products - By Manufacturer',\n        'showTopLevel'                    => 'Product Categories Menu - Show Top Level',\n        'showFullTree'                    => 'Product Categories Menu - Show Full Tree',  //FIXME image variant needs a separate method\n        'showallSubcategories'            => 'Product Categories Menu - Subcategories of current category',\n//        'upcomingEvents'                  => 'Event Registration - Upcoming Events',\n//        'eventsCalendar'                  => 'Event Registration - Calendar View',\n        'ecomSearch'                      => 'Product Search - Autocomplete',\n        'searchByModel'                   => 'Product Search - By Model',\n        'quicklinks'                      => 'Links - User Links',\n        'showGiftCards'                   => 'Gift Cards UI',\n    );\n    protected $manage_permissions = array(\n        'batch_process'               => 'Batch capture order transactions',\n        'cleanNonUnicodeProducts'     => 'Clean all non-unicode charset products',\n        'copyProduct'                 => \"Copy Product\",\n//        'delete_children'             => \"Delete Children\",\n        'reimport'                    => 'ReImport Products',\n        'findDupes'                   => 'Fix Duplicate SEF Names',\n//        'manage_sales_reps'           => 'Manage Sales Reps',\n//        'import_external_addresses'   => 'Import addresses from other sources',\n        'showallImpropercategorized'  => 'View products in top level categories that should not be',\n        'showallUncategorized'        => 'View all uncategorized products',\n        'nonUnicodeProducts'          => 'View all non-unicode charset products',\n        'process_orders'              => 'Batch capture order transactions',\n        'processModelAliases'         => 'Process uploaded model aliases',\n        'saveModelAliases'            => 'Save uploaded model aliases',\n//        'deleteProcessedModelAliases' => 'Delete processed uploaded model aliases',\n//        'delete_model_alias'          => 'Process model aliases',\n//        'update_model_alias'          => 'Save model aliases',\n//        'edit_model_alias'            => 'Delete model aliases',\n//        'import'                      => 'Import Products',\n//        'importProduct'               => 'Import Products',\n//        'export'                      => 'Export Products',\n        'uploadModelAliases'          => 'Upload model aliases',\n    );\n    // hide the configs we don't need\n    public $remove_configs = array(\n        'aggregation',\n        'categories',\n//        'comments',\n        'ealerts',\n        'facebook',\n        'files',\n        'rss',\n        'tags',\n        'twitter',\n    );  // all options: ('aggregation','categories','comments','ealerts','facebook','files','module_title','pagination','rss','tags','twitter',)\n\n    static function displayname() {\n        return gt(\"e-Commerce Store Front\");\n    }\n\n    static function description() {\n        return gt(\"Displays the products and categories in your store\");\n    }\n\n    static function author() {\n        return \"OIC Group, Inc\";\n    }\n\n    static function isSearchable() {\n        return true;\n    }\n\n    public function searchName() {\n        return gt('e-Commerce Item');\n    }\n\n    static function canImportData() {\n        return true;\n    }\n\n    static function canExportData() {\n        return true;\n    }\n\n    function __construct($src = null, $params = array()) {\n        global $db, $router, $section, $user;\n//        parent::__construct($src = null, $params);\n        if (empty($params)) {\n            $params = $router->params;\n        }\n        parent::__construct($src, $params);\n\n        // we're setting the config here from the module and globally\n        $this->grabConfig();\n\n//        if (expTheme::inAction() && !empty($router->url_parts[1]) && ($router->url_parts[0] == \"store\" && $router->url_parts[1] == \"showall\")) {\n        if (!empty($params['action']) && ($params['controller'] == \"store\" && $params['action'] == \"showall\") ) {\n//            if (isset($router->url_parts[array_search('title', $router->url_parts) + 1]) && is_string($router->url_parts[array_search('title', $router->url_parts) + 1])) {\n            if (isset($params['title']) && is_string($params['title'])) {\n//                $default_id = $db->selectValue('storeCategories', 'id', \"sef_url='\" . $router->url_parts[array_search('title', $router->url_parts) + 1] . \"'\");\n//                $active     = $db->selectValue('storeCategories', 'is_active', \"sef_url='\" . $router->url_parts[array_search('title', $router->url_parts) + 1] . \"'\");\n                $default_id = $db->selectValue('storeCategories', 'id', \"sef_url='\" . $params['title'] . \"'\");\n                $active = $db->selectValue('storeCategories', 'is_active', \"sef_url='\" . $params['title'] . \"'\");\n                if (empty($active) && !$user->isAdmin()) {\n                    redirect_to(array(\"section\" => SITE_DEFAULT_SECTION)); // selected category is NOT active\n                }\n            } elseif (isset($this->config['category'])) { // the module category to display\n                $default_id = $this->config['category'];\n            } else {\n                $default_id = 0;\n            }\n//        } elseif (expTheme::inAction() && !empty($router->url_parts[1]) && ($router->url_parts[0] == \"store\" && ($router->url_parts[1] == \"show\" || $router->url_parts[1] == \"showByTitle\"))) {\n        } elseif (!empty($params['action']) && ($params['controller'] == \"store\" && ($params['action'] == \"show\" || $params['action'] == \"showByTitle\" || $params['action'] == \"categoryBreadcrumb\"))) {\n//            if (isset($router->url_parts[array_search('id', $router->url_parts) + 1]) && ($router->url_parts[array_search('id', $router->url_parts) + 1] != 0)) {\n            if (!empty($params['id'])) {\n//                $default_id = $db->selectValue('product_storeCategories', 'storecategories_id', \"product_id='\" . $router->url_parts[array_search('id', $router->url_parts) + 1] . \"'\");\n                $default_id = $db->selectValue('product_storeCategories', 'storecategories_id', \"product_id='\" . $params['id'] . \"'\");\n            } elseif (!empty($params['title'])) {\n//                $prod_id    = $db->selectValue('product', 'id', \"sef_url='\" . $router->url_parts[array_search('title', $router->url_parts) + 1] . \"'\");\n                $prod_id = $db->selectValue('product', 'id', \"sef_url='\" . $params['title'] . \"'\");\n                $default_id = $db->selectValue('product_storeCategories', 'storecategories_id', \"product_id='\" . $prod_id . \"'\");\n            }\n        } elseif (isset($this->config['show_first_category']) || (!expTheme::inAction() && $section == SITE_DEFAULT_SECTION)) {\n            if (!empty($this->config['show_first_category'])) {\n                $default_id = $db->selectValue('storeCategories', 'id', 'lft=1');\n            } else {\n                $default_id = null;\n//                flash('error','store-show first category empty, but default seciton');\n            }\n        } elseif (!isset($this->config['show_first_category']) && !expTheme::inAction()) {\n            $default_id = null;\n//            flash('error','store-don\\'t show first category empty');\n        } else {\n            $default_id = null;\n        }\n//        if (empty($default_id)) $default_id = 0;\n        if (!is_null($default_id)) expSession::set('catid', $default_id);\n\n        // figure out if we need to show all categories and products or default to showing the first category.\n        // elseif (!empty($this->config['category'])) {\n        //     $default_id = $this->config['category'];\n        // } elseif (ecomconfig::getConfig('show_first_category')) {\n        //     $default_id = $db->selectValue('storeCategories', 'id', 'lft=1');\n        // } else {\n        //     $default_id = 0;\n        // }\n\n        $this->parent = expSession::get('catid');\n        $this->category = new storeCategory($this->parent);\n        if ($this->parent) { // we're setting the config here for the category\n            $this->grabConfig($this->category);\n        }\n    }\n\n    function showall() {\n        global $db, $user, $router;\n\n        expHistory::set('viewable', $this->params);\n\n        if (empty($this->category->is_events)) {\n            $count_sql_start = 'SELECT COUNT(DISTINCT p.id) as c FROM ' . $db->prefix . 'product p ';\n\n            $sql_start = 'SELECT DISTINCT p.*, IF(base_price > special_price AND use_special_price=1,special_price, base_price) as price FROM ' . $db->prefix . 'product p ';\n            $sql = 'JOIN ' . $db->prefix . 'product_storeCategories sc ON p.id = sc.product_id ';\n            $sql .= 'WHERE ';\n            if (!$user->isAdmin()) $sql .= '(p.active_type=0 OR p.active_type=1) AND ';\n            $sql .= 'sc.storecategories_id IN (';\n            $sql .= 'SELECT id FROM ' . $db->prefix . 'storeCategories WHERE rgt BETWEEN ' . $this->category->lft . ' AND ' . $this->category->rgt . ')';\n\n            $count_sql = $count_sql_start . $sql;\n            $sql = $sql_start . $sql;\n\n//            $order = 'title'; // $order = 'sc.rank'; //$this->config['orderby'];\n//            $dir = 'ASC'; //$this->config['orderby_dir'];\n            $order = !empty($this->params['order']) ? $this->params['order'] : $this->config['orderby'];\n            $dir = !empty($this->params['dir']) ? $this->params['dir'] : $this->config['orderby_dir'];\n            if (empty($order)) $order = 'title';\n            if (empty($dir)) $dir = 'ASC';\n        } else { // this is an event category\n            $sql_start = 'SELECT DISTINCT p.*, er.event_starttime, er.signup_cutoff FROM ' . $db->prefix . 'product p ';\n            $count_sql_start = 'SELECT COUNT(DISTINCT p.id) as c, er.event_starttime, er.signup_cutoff FROM ' . $db->prefix . 'product p ';\n            $sql = 'JOIN ' . $db->prefix . 'product_storeCategories sc ON p.id = sc.product_id ';\n            $sql .= 'JOIN ' . $db->prefix . 'eventregistration er ON p.product_type_id = er.id ';\n            $sql .= 'WHERE sc.storecategories_id IN (';\n            $sql .= 'SELECT id FROM ' . $db->prefix . 'storeCategories WHERE rgt BETWEEN ' . $this->category->lft . ' AND ' . $this->category->rgt . ')';\n            if ($this->category->hide_closed_events) {\n                $sql .= ' AND er.signup_cutoff > ' . time();\n            }\n\n            $count_sql = $count_sql_start . $sql;\n            $sql = $sql_start . $sql;\n\n            $order = !empty($this->params['order']) ? $this->params['order'] : 'event_starttime';\n            $dir = !empty($this->params['dir']) ? $this->params['dir'] : 'ASC';\n        }\n\n        if (empty($router->params['title']))  // we need to pass on the category for proper paging\n            $router->params['title'] = $this->category->sef_url;\n        $limit = !empty($this->config['limit']) ? $this->config['limit'] : (!empty($this->config['pagination_default']) ? $this->config['pagination_default'] : 10);\n        if ($this->category->find('count') > 0) { // there are categories\n            $page = new expPaginator(array(\n                'model_field' => 'product_type',\n                'sql'         => $sql,\n                'count_sql'   => $count_sql,\n                'limit'       => $limit,\n                'order'       => $order,\n                'dir'         => $dir,\n                'page'        => (isset($this->params['page']) ? $this->params['page'] : 1),\n                'controller'  => $this->params['controller'],\n                'action'      => $this->params['action'],\n                'columns'     => array(\n                    gt('Model #')      => 'model',\n                    gt('Product Name') => 'title',\n                    gt('Price')        => 'price'\n                ),\n            ));\n        } else { // there are no categories\n            $page = new expPaginator(array(\n                'model_field' => 'product_type',\n                'sql'         => 'SELECT * FROM ' . $db->prefix . 'product WHERE 1',\n                'limit'       => $limit,\n                'order'       => $order,\n                'dir'         => $dir,\n                'page'        => (isset($this->params['page']) ? $this->params['page'] : 1),\n                'controller'  => $this->params['controller'],\n                'action'      => $this->params['action'],\n                'columns'     => array(\n                    gt('Model #')      => 'model',\n                    gt('Product Name') => 'title',\n                    gt('Price')        => 'price'\n                ),\n            ));\n        }\n\n        $ancestors = $this->category->pathToNode();\n        $categories = ($this->parent == 0) ? $this->category->getTopLevel(null, false, true) : $this->category->getChildren(null, false, true);\n\n        $rerankSQL = \"SELECT DISTINCT p.* FROM \" . $db->prefix . \"product p JOIN \" . $db->prefix . \"product_storeCategories sc ON p.id = sc.product_id WHERE sc.storecategories_id=\" . $this->category->id . \" ORDER BY rank ASC\";\n        //eDebug($router);\n        $defaultSort = $router->current_url;\n\n        assign_to_template(array(\n            'page'             => $page,\n            'defaultSort'      => $defaultSort,\n            'ancestors'        => $ancestors,\n            'categories'       => $categories,\n            'current_category' => $this->category,\n            'rerankSQL'        => $rerankSQL\n        ));\n        $this->categoryBreadcrumb();\n    }\n\n    function grabConfig($category = null) {\n\n        // grab the configs for the passed category\n        if (is_object($category)) {\n            $catConfig = new expConfig(expCore::makeLocation(\"storeCategory\",\"@store-\" . $category->id,\"\"));\n        } elseif (empty($this->config)) {  // config not set yet\n            $global_config = new expConfig(expCore::makeLocation(\"ecomconfig\",\"@globalstoresettings\",\"\"));\n            $this->config = $global_config->config;\n            return;\n        }\n\n        // grab the store general settings\n        $config = new expConfig(expCore::makeLocation(\"ecomconfig\",\"@globalstoresettings\",\"\"));\n\n        // $this->config currently holds the module settings - merge together with any cat config settings having priority\n        $this->config = empty($catConfig->config) || @$catConfig->config['use_global'] == 1 ?  @array_merge($config->config, $this->config) :  @array_merge($config->config, $this->config, $catConfig->config);\n\n        //This is needed since in the first installation of ecom the value for this will be empty and we are doing % operation for this value\n        //So we need to ensure if the value is = 0, we make it the default\n        if (empty($this->config['images_per_row'])) {\n            $this->config['images_per_row'] = 3;\n        }\n    }\n\n    /**\n     * @deprecated 2.0.0 moved to eventregistration\n     */\n    function upcomingEvents() {\n        $this->params['controller'] = 'eventregistration';\n        redirect_to($this->params);\n\n        //fixme old code\n        $sql = 'SELECT DISTINCT p.*, er.event_starttime, er.signup_cutoff FROM ' . DB_TABLE_PREFIX . '_product p ';\n        $sql .= 'JOIN ' . DB_TABLE_PREFIX . '_eventregistration er ON p.product_type_id = er.id ';\n        $sql .= 'WHERE 1 AND er.signup_cutoff > ' . time();\n\n        $limit = empty($this->config['event_limit']) ? 10 : $this->config['event_limit'];\n        $order = 'eventdate';\n        $dir = 'ASC';\n\n        $page = new expPaginator(array(\n            'model_field' => 'product_type',\n            'sql'         => $sql,\n            'limit'       => $limit,\n            'order'       => $order,\n            'dir'         => $dir,\n            'page'        => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'  => $this->params['controller'],\n            'action'      => $this->params['action'],\n            'columns'     => array(\n                gt('Model #')      => 'model',\n                gt('Product Name') => 'title',\n                gt('Price')        => 'base_price'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page' => $page\n        ));\n    }\n\n    /**\n     * @deprecated 2.0.0 moved to eventregistration\n     */\n    function eventsCalendar() {\n        $this->params['controller'] = 'eventregistration';\n        redirect_to($this->params);\n\n        //fixme old code\n        global $db, $user;\n\n        expHistory::set('viewable', $this->params);\n\n        $time = isset($this->params['time']) ? $this->params['time'] : time();\n        assign_to_template(array(\n            'time' => $time\n        ));\n\n//        $monthly = array();\n//        $counts  = array();\n\n        $info = getdate($time);\n        $nowinfo = getdate(time());\n        if ($info['mon'] != $nowinfo['mon']) $nowinfo['mday'] = -10;\n        // Grab non-day numbers only (before end of month)\n//        $week        = 0;\n        $currentweek = -1;\n\n        $timefirst = mktime(0, 0, 0, $info['mon'], 1, $info['year']);\n        $week = intval(date('W', $timefirst));\n        if ($week >= 52 && $info['mon'] == 1) $week = 1;\n        $infofirst = getdate($timefirst);\n\n//        if ($infofirst['wday'] == 0) {\n//            $monthly[$week] = array(); // initialize for non days\n//            $counts[$week]  = array();\n//        }\n//        for ($i = 1 - $infofirst['wday']; $i < 1; $i++) {\n//            $monthly[$week][$i] = array();\n//            $counts[$week][$i]  = -1;\n//        }\n//        $weekday = $infofirst['wday']; // day number in grid.  if 7+, switch weeks\n        $monthly[$week] = array(); // initialize for non days\n        $counts[$week] = array();\n        if (($infofirst['wday'] == 0) && (DISPLAY_START_OF_WEEK == 1)) {\n            for ($i = -6; $i < (1 - DISPLAY_START_OF_WEEK); $i++) {\n                $monthly[$week][$i] = array();\n                $counts[$week][$i] = -1;\n            }\n            $weekday = $infofirst['wday'] + 7; // day number in grid.  if 7+, switch weeks\n        } else {\n            for ($i = 1 - $infofirst['wday']; $i < (1 - DISPLAY_START_OF_WEEK); $i++) {\n                $monthly[$week][$i] = array();\n                $counts[$week][$i] = -1;\n            }\n            $weekday = $infofirst['wday']; // day number in grid.  if 7+, switch weeks\n        }\n        // Grab day counts\n        $endofmonth = date('t', $time);\n\n        for ($i = 1; $i <= $endofmonth; $i++) {\n            $start = mktime(0, 0, 0, $info['mon'], $i, $info['year']);\n            if ($i == $nowinfo['mday']) $currentweek = $week;\n\n//            $dates              = $db->selectObjects(\"eventregistration\", \"`eventdate` = $start\");\n//            $dates = $db->selectObjects(\"eventregistration\", \"(eventdate >= \" . expDateTime::startOfDayTimestamp($start) . \" AND eventdate <= \" . expDateTime::endOfDayTimestamp($start) . \")\");\n            $er = new eventregistration();\n//            $dates = $er->find('all', \"(eventdate >= \" . expDateTime::startOfDayTimestamp($start) . \" AND eventdate <= \" . expDateTime::endOfDayTimestamp($start) . \")\");\n\n            if ($user->isAdmin()) {\n                $events = $er->find('all', 'product_type=\"eventregistration\"', \"title ASC\");\n            } else {\n                $events = $er->find('all', 'product_type=\"eventregistration\" && active_type=0', \"title ASC\");\n            }\n            $dates = array();\n\n            foreach ($events as $event) {\n                // $this->signup_cutoff > time()\n                if ($event->eventdate >= expDateTime::startOfDayTimestamp($start) && $event->eventdate <= expDateTime::endOfDayTimestamp($start)) {\n                    $dates[] = $event;\n                }\n                // eDebug($event->signup_cutoff, true);\n            }\n\n            $monthly[$week][$i] = $this->getEventsForDates($dates);\n            $counts[$week][$i] = count($monthly[$week][$i]);\n            if ($weekday >= (6 + DISPLAY_START_OF_WEEK)) {\n                $week++;\n                $monthly[$week] = array(); // allocate an array for the next week\n                $counts[$week] = array();\n                $weekday = DISPLAY_START_OF_WEEK;\n            } else $weekday++;\n        }\n        // Grab non-day numbers only (after end of month)\n        for ($i = 1; $weekday && $i < (8 + DISPLAY_START_OF_WEEK - $weekday); $i++) {\n            $monthly[$week][$i + $endofmonth] = array();\n            $counts[$week][$i + $endofmonth] = -1;\n        }\n\n        $this->params['time'] = $time;\n        assign_to_template(array(\n            'currentweek' => $currentweek,\n            'monthly'     => $monthly,\n            'counts'      => $counts,\n            \"prevmonth3\"  => strtotime('-3 months', $timefirst),\n            \"prevmonth2\"  => strtotime('-2 months', $timefirst),\n            \"prevmonth\"   => strtotime('-1 months', $timefirst),\n            \"nextmonth\"   => strtotime('+1 months', $timefirst),\n            \"nextmonth2\"  => strtotime('+2 months', $timefirst),\n            \"nextmonth3\"  => strtotime('+3 months', $timefirst),\n            'now'         => $timefirst,\n            \"today\"       => expDateTime::startOfDayTimestamp(time()),\n            'params'      => $this->params,\n            'daynames'    => event::dayNames(),\n        ));\n    }\n\n    /*\n    * Helper function for the Calendar view\n     * @deprecated 2.0.0 moved to eventregistration\n    */\n    function getEventsForDates($edates, $sort_asc = true) {\n        global $db;\n        $events = array();\n        foreach ($edates as $edate) {\n//            if (!isset($this->params['cat'])) {\n//                if (isset($this->params['title']) && is_string($this->params['title'])) {\n//                    $default_id = $db->selectValue('storeCategories', 'id', \"sef_url='\" . $this->params['title'] . \"'\");\n//                } elseif (!empty($this->config['category'])) {\n//                    $default_id = $this->config['category'];\n//                } elseif (ecomconfig::getConfig('show_first_category')) {\n//                    $default_id = $db->selectValue('storeCategories', 'id', 'lft=1');\n//                } else {\n//                    $default_id = 0;\n//                }\n//            }\n//\n//            $parent = isset($this->params['cat']) ? intval($this->params['cat']) : $default_id;\n//\n//            $category = new storeCategory($parent);\n\n            $sql = 'SELECT DISTINCT p.*, er.event_starttime, er.signup_cutoff FROM ' . $db->prefix . 'product p ';\n//            $sql .= 'JOIN ' . $db->prefix . 'product_storeCategories sc ON p.id = sc.product_id ';\n            $sql .= 'JOIN ' . $db->prefix . 'eventregistration er ON p.product_type_id = er.id ';\n            $sql .= 'WHERE 1 ';\n//            $sql .= ' AND sc.storecategories_id IN (SELECT id FROM exponent_storeCategories WHERE rgt BETWEEN ' . $category->lft . ' AND ' . $category->rgt . ')';\n//            if ($category->hide_closed_events) {\n//                $sql .= ' AND er.signup_cutoff > ' . time();\n//            }\n//            $sql .= ' AND er.id = ' . $edate->id;\n            $sql .= ' AND er.id = ' . $edate->product_type_id;\n\n            $order = 'event_starttime';\n            $dir = 'ASC';\n\n            $o = $db->selectObjectBySql($sql);\n            $o->eventdate = $edate->eventdate;\n            $o->eventstart = $edate->event_starttime + $edate->eventdate;\n            $o->eventend = $edate->event_endtime + $edate->eventdate;\n            $o->expFile = $edate->expFile;\n            $events[] = $o;\n        }\n        $events = expSorter::sort(array('array' => $events, 'sortby' => 'eventstart', 'order' => $sort_asc ? 'ASC' : 'DESC'));\n        return $events;\n    }\n\n    function categoryBreadcrumb() {\n//        global $db, $router;\n\n        //eDebug($this->category);\n\n        /*if(isset($router->params['action']))\n        {\n            $ancestors = $this->category->pathToNode();\n        }else if(isset($router->params['section']))\n        {\n            $current = $db->selectObject('section',' id= '.$router->params['section']);\n            $ancestors[] = $current;\n            if( $current->parent != -1 || $current->parent != 0 )\n            {\n                while ($db->selectObject('section',' id= '.$router->params['section']);)\n                    if ($section->id == $id) {\n                        $current = $section;\n                        break;\n                    }\n                }\n            }\n            eDebug($sections);\n            $ancestors = $this->category->pathToNode();\n        }*/\n\n        $ancestors = $this->category->pathToNode();\n        // eDebug($ancestors);\n        assign_to_template(array(\n            'ancestors' => $ancestors\n        ));\n    }\n\n    function showallUncategorized() {\n        expHistory::set('viewable', $this->params);\n\n//        $sql = 'SELECT p.* FROM ' . DB_TABLE_PREFIX . '_product p JOIN ' . DB_TABLE_PREFIX . '_product_storeCategories ';\n//        $sql .= 'sc ON p.id = sc.product_id WHERE sc.storecategories_id = 0 AND parent_id=0';\n        $sql = 'SELECT p.* FROM ' . DB_TABLE_PREFIX . '_product p LEFT OUTER JOIN ' . DB_TABLE_PREFIX . '_product_storeCategories ';\n        $sql .= 'sc ON p.id = sc.product_id WHERE sc.product_id is null AND p.parent_id=0';\n\n        expSession::set('product_export_query', $sql);\n\n        $limit = !empty($this->config['limit']) ? $this->config['limit'] : 10;\n        $page = new expPaginator(array(\n            'model_field' => 'product_type',\n            'sql'         => $sql,\n            'limit'       => !empty($this->config['pagination_default']) ? $this->config['pagination_default'] : $limit,\n            'page'        => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'  => $this->params['controller'],\n            'action'      => $this->params['action'],\n            'columns'     => array(\n                gt('Model #')      => 'model',\n                gt('Product Name') => 'title',\n                gt('Price')        => 'base_price'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page'        => $page,\n            'moduletitle' => 'Uncategorized Products'\n        ));\n    }\n\n    function manage() {\n        expHistory::set('manageable', $this->params);\n\n        if (ECOM_LARGE_DB) {\n            $limit = !empty($this->config['pagination_default']) ? $this->config['pagination_default'] : 10;\n        } else {\n            $limit = 0;  // we'll paginate on the page\n        }\n        $page = new expPaginator(array(\n            'model'      => 'product',\n            'where'      => 'parent_id=0',\n            'limit'      => $limit,\n            'order'      => (isset($this->params['order']) ? $this->params['order'] : 'title'),\n            'dir'        => (isset($this->params['dir']) ? $this->params['dir'] : 'ASC'),\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller' => $this->params['controller'],\n            'action'     => $this->params['action'],\n            'columns'    => array(\n                gt('Type')         => 'product_type',\n                gt('Product Name') => 'title',\n                gt('Model #')      => 'model',\n                gt('Price')        => 'base_price'\n            )\n        ));\n        assign_to_template(array(\n            'page' => $page\n        ));\n    }\n\n    function showallImpropercategorized() {\n        expHistory::set('viewable', $this->params);\n\n        //FIXME not sure this is the correct sql, not sure what we are trying to pull out\n        $sql = 'SELECT DISTINCT(p.id),p.product_type FROM ' . DB_TABLE_PREFIX . '_product p ';\n        $sql .= 'JOIN ' . DB_TABLE_PREFIX . '_product_storeCategories psc ON p.id = psc.product_id ';\n        $sql .= 'JOIN '.DB_TABLE_PREFIX.'_storeCategories sc ON psc.storecategories_id = sc.parent_id ';\n        $sql .= 'WHERE p.parent_id=0 AND sc.parent_id != 0';\n\n        expSession::set('product_export_query', $sql);\n\n        $limit = !empty($this->config['limit']) ? $this->config['limit'] : 10;\n        $page = new expPaginator(array(\n            'model_field' => 'product_type',\n            'sql'         => $sql,\n            'limit'       => !empty($this->config['pagination_default']) ? $this->config['pagination_default'] : $limit,\n            'page'        => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'  => $this->params['controller'],\n            'action'      => $this->params['action'],\n            'columns'     => array(\n                gt('Model #')      => 'model',\n                gt('Product Name') => 'title',\n                gt('Price')        => 'base_price'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page'        => $page,\n            'moduletitle' => 'Improperly Categorized Products'\n        ));\n    }\n\n    function exportMe() {\n        redirect_to(array('controller' => 'report', 'action' => 'batch_export', 'applytoall' => true));\n    }\n\n    function export() {\n        global $db;\n\n        $this->params['applytoall'] = 1;  //FIXME we simply do all now\n\n        //eDebug($this->params);\n        //$sql = \"SELECT * INTO OUTFILE '\" . BASE . \"tmp/export.csv' FIELDS TERMINATED BY ','  FROM exponent_product WHERE 1 LIMIT 10\";\n//        $out = '\"id\",\"parent_id\",\"child_rank\",\"title\",\"body\",\"model\",\"warehouse_location\",\"sef_url\",\"canonical\",\"meta_title\",\"meta_keywords\",\"meta_description\",\"tax_class_id\",\"quantity\",\"availability_type\",\"base_price\",\"special_price\",\"use_special_price\",\"active_type\",\"product_status_id\",\"category1\",\"category2\",\"category3\",\"category4\",\"category5\",\"category6\",\"category7\",\"category8\",\"category9\",\"category10\",\"category11\",\"category12\",\"surcharge\",\"category_rank\",\"feed_title\",\"feed_body\"' . chr(13) . chr(10);\n        $out = '\"id\",\"parent_id\",\"child_rank\",\"title\",\"body\",\"model\",\"warehouse_location\",\"sef_url\",\"meta_title\",\"meta_keywords\",\"meta_description\",\"tax_class_id\",\"quantity\",\"availability_type\",\"base_price\",\"special_price\",\"use_special_price\",\"active_type\",\"product_status_id\",\"category1\",\"category2\",\"category3\",\"category4\",\"category5\",\"category6\",\"category7\",\"category8\",\"category9\",\"category10\",\"category11\",\"category12\",\"surcharge\",\"category_rank\",\"feed_title\",\"feed_body\",\"weight\",\"width\",\"height\",\"length\",\"image1\",\"image2\",\"image3\",\"image4\",\"image5\",\"companies_id\"' . chr(13) . chr(10);\n        if (isset($this->params['applytoall']) && $this->params['applytoall'] == 1) {\n            $sql = expSession::get('product_export_query');\n            if (empty($sql)) $sql = 'SELECT DISTINCT(p.id) from ' . $db->prefix . 'product as p WHERE (product_type=\"product\")';\n            //eDebug($sql);\n            //expSession::set('product_export_query','');\n            $prods = $db->selectArraysBySql($sql);\n            //eDebug($prods);\n        } else {\n            foreach ($this->params['act-upon'] as $prod) {\n                $prods[] = array('id' => $prod);\n            }\n        }\n        set_time_limit(0);\n        $baseProd = new product();\n\n        //$p = new product($pid['id'], false, false);\n        foreach ($prods as $pid) {\n            $except = array('company', 'crosssellItem', 'optiongroup');\n            $p = $baseProd->find('first', 'id=' . $pid['id'], null, null, 0, true, true, $except, true);\n\n            //eDebug($p,true);\n            $out .= expString::outputField($p->id);\n            $out .= expString::outputField($p->parent_id);\n            $out .= expString::outputField($p->child_rank);\n            $out .= expString::outputField($p->title);\n            $out .= expString::outputField(expString::stripLineEndings($p->body), \",\", true);\n            $out .= expString::outputField($p->model);\n            $out .= expString::outputField($p->warehouse_location);\n            $out .= expString::outputField($p->sef_url);\n//            $out .= expString::outputField($p->canonical);  FIXME this is NOT in the import sequence\n            $out .= expString::outputField($p->meta_title);\n            $out .= expString::outputField($p->meta_keywords);\n            $out .= expString::outputField($p->meta_description);\n            $out .= expString::outputField($p->tax_class_id);\n            $out .= expString::outputField($p->quantity);\n            $out .= expString::outputField($p->availability_type);\n            $out .= expString::outputField($p->base_price);\n            $out .= expString::outputField($p->special_price);\n            $out .= expString::outputField($p->use_special_price);\n            $out .= expString::outputField($p->active_type);\n            $out .= expString::outputField($p->product_status_id);\n\n            $rank = 0;\n            //eDebug($p);\n            for ($x = 0; $x < 12; $x++) {\n                $this->catstring = '';\n                if (isset($p->storeCategory[$x])) {\n                    $out .= expString::outputField(storeCategory::buildCategoryString($p->storeCategory[$x]->id, true));\n                    $rank = $db->selectValue('product_storeCategories', 'rank', 'product_id=' . $p->id . ' AND storecategories_id=' . $p->storeCategory[$x]->id);\n                } else $out .= ',';\n            }\n            $out .= expString::outputField($p->surcharge);\n            $out .= expString::outputField($rank);  // no longer used\n            $out .= expString::outputField($p->feed_title);\n            $out .= expString::outputField($p->feed_body);\n            $out .= expString::outputField($p->weight);\n            $out .= expString::outputField($p->height);\n            $out .= expString::outputField($p->width);\n            $out .= expString::outputField($p->length);\n            //output images\n            if (isset($p->expFile['mainimage'][0])) {\n                $out .= expString::outputField($p->expFile['mainimage'][0]->id);\n            } else $out .= ',';\n            for ($x = 0; $x < 3; $x++) {\n                if (isset($p->expFile['images'][$x])) {\n                    $out .= expString::outputField($p->expFile['images'][$x]->id);\n                } else $out .= ',';\n            }\n            $out .= expString::outputField($p->companies_id, chr(13) . chr(10)); //Removed the extra \",\" in the last element\n\n            foreach ($p->childProduct as $cp) {\n                //$p = new product($pid['id'], true, false);\n                //eDebug($p,true);\n                $out .= expString::outputField($cp->id);\n                $out .= expString::outputField($cp->parent_id);\n                $out .= expString::outputField($cp->child_rank);\n                $out .= expString::outputField($cp->title);\n                $out .= expString::outputField(expString::stripLineEndings($cp->body));\n                $out .= expString::outputField($cp->model);\n                $out .= expString::outputField($cp->warehouse_location);\n                $out .= expString::outputField($cp->sef_url);\n//                $out .= expString::outputField($cp->canonical);  FIXME this is NOT in the import sequence\n                $out .= expString::outputField($cp->meta_title);\n                $out .= expString::outputField($cp->meta_keywords);\n                $out .= expString::outputField($cp->meta_description);\n                $out .= expString::outputField($cp->tax_class_id);\n                $out .= expString::outputField($cp->quantity);\n                $out .= expString::outputField($cp->availability_type);\n                $out .= expString::outputField($cp->base_price);\n                $out .= expString::outputField($cp->special_price);\n                $out .= expString::outputField($cp->use_special_price);\n                $out .= expString::outputField($cp->active_type);\n                $out .= expString::outputField($cp->product_status_id);\n                $out .= ',,,,,,,,,,,,';  // for categories\n                $out .= expString::outputField($cp->surcharge);\n                $out .= ',,,'; //for rank, feed title, feed body\n                $out .= expString::outputField($cp->weight);\n                $out .= expString::outputField($cp->height);\n                $out .= expString::outputField($cp->width);\n                $out .= expString::outputField($cp->length);\n                $out .= ',,,,,';  // for images\n                $out .= expString::outputField($cp->companies_id, chr(13) . chr(10));\n\n                //echo($out);\n            }\n\n        }\n\n//        $outFile = 'tmp/product_export_' . time() . '.csv';\n//        $outHandle = fopen(BASE . $outFile, 'w');\n//        fwrite($outHandle, $out);\n//        fclose($outHandle);\n//\n//        echo \"<br/><br/>Download the file here: <a href='\" . PATH_RELATIVE . $outFile . \"'>Product Export</a>\";\n\n        $filename = 'product_export_' . time() . '.csv';\n\n        ob_end_clean();\n        ob_start(\"ob_gzhandler\");\n\n        // 'application/octet-stream' is the registered IANA type but\n        //        MSIE and Opera seems to prefer 'application/octetstream'\n        $mime_type = (EXPONENT_USER_BROWSER == 'IE' || EXPONENT_USER_BROWSER == 'OPERA') ? 'application/octetstream' : 'application/octet-stream';\n\n        header('Content-Type: ' . $mime_type);\n        header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n        // IE need specific headers\n        if (EXPONENT_USER_BROWSER == 'IE') {\n            header('Content-Disposition: inline; filename=\"' . $filename . '\"');\n            header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n            header('Pragma: public');\n        } else {\n            header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n            header('Pragma: no-cache');\n        }\n        echo $out;\n        exit; // Exit, since we are exporting\n\n        /*eDebug(BASE . \"tmp/export.csv\");\n        $db->sql($sql);\n        eDebug($db->error());*/\n        /*OPTIONALLY ENCLOSED BY '\" . '\"' .\n        \"' ESCAPED BY '\\\\'\n        LINES TERMINATED BY '\" . '\\\\n' .\n        \"' */\n    }\n\n    /**\n     * @deprecated 2.3.3 moved to company\n     */\n    function showallByManufacturer() {\n        expHistory::set('viewable', $this->params);\n\n        $limit = !empty($this->config['limit']) ? $this->config['limit'] : 10;\n        $page = new expPaginator(array(\n            'model'      => 'product',\n            'where'      => 'companies_id=' . $this->params['id'] . ' AND parent_id=0',\n            'limit'      => !empty($this->config['pagination_default']) ? $this->config['pagination_default'] : $limit,\n            'default'    => 'Product Name',\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller' => $this->params['controller'],\n            'action'     => $this->params['action'],\n            'columns'    => array(\n                gt('Model #')      => 'model',\n                gt('Product Name') => 'title',\n                gt('Price')        => 'base_price'\n            )\n        ));\n\n        $company = new company($this->params['id']);\n\n        assign_to_template(array(\n            'page'    => $page,\n            'company' => $company\n        ));\n    }\n\n    /**\n     * @deprecated 2.3.3 moved to company\n     */\n    function showallManufacturers() {\n        global $db;\n        expHistory::set('viewable', $this->params);\n        $sql = 'SELECT comp.* FROM ' . $db->prefix . 'companies as comp JOIN ' . $db->prefix . 'product AS prod ON prod.companies_id = comp.id WHERE parent_id=0 GROUP BY comp.title ORDER BY comp.title;';\n        $manufacturers = $db->selectObjectsBySql($sql);\n        assign_to_template(array(\n            'manufacturers' => $manufacturers\n        ));\n    }\n\n    function showGiftCards() {\n        expHistory::set('viewable', $this->params);\n        //Get all giftcards\n        $product_type = 'giftcard';\n        $giftcard = new $product_type();\n        $giftcards = $giftcard->find(\"all\", \"product_type = 'giftcard'\");\n\n        //Grab the global config\n        $this->grabConfig();\n\n        //Set the needed config for the view\n        $config['custom_message_product'] = $this->config['custom_message_product'];\n        $config['minimum_gift_card_purchase'] = $this->config['minimum_gift_card_purchase'];\n        $records = expSession::get('params');\n        expSession::un_set('params');\n        assign_to_template(array(\n            'giftcards' => $giftcards,\n            'config'    => $config,\n            'records'   => $records\n        ));\n    }\n\n    function show() {\n        global $db, $order, $template, $user;\n\n        expHistory::set('viewable', $this->params);\n//        $classname = $db->selectValue('product', 'product_type', 'id=' . $this->params['id']);\n//        $product   = new $classname($this->params['id'], true, true);\n\n        $id = isset($this->params['title']) ? expString::escape($this->params['title']) : $this->params['id'];\n        $product = new product($id);\n        $product_type = new $product->product_type($product->id);\n        $product_type->title = expString::parseAndTrim($product_type->title, true);\n        $product_type->image_alt_tag = expString::parseAndTrim($product_type->image_alt_tag, true);\n\n        //if we're trying to view a child product directly, then we redirect to it's parent show view\n        //bunk URL, no product found\n        if (empty($product->id)) {\n            redirect_to(array('controller' => 'notfound', 'action' => 'page_not_found', 'title' => $this->params['title']));\n        }\n        // we do not display child products by themselves\n        if (!empty($product->parent_id)) {\n            $product = new product($product->parent_id);\n            redirect_to(array('controller' => 'store', 'action' => 'show', 'title' => $product->sef_url));\n        }\n        if ($product->active_type == 1) {\n            $product_type->user_message = \"This product is temporarily unavailable for purchase.\";\n        } elseif ($product->active_type == 2 && !$user->isAdmin()) {\n            flash(\"error\", $product->title . \" \" . gt(\"is currently unavailable.\"));\n            expHistory::back();\n        } elseif ($product->active_type == 2 && $user->isAdmin()) {\n            $product_type->user_message = $product->title . \" is currently marked as unavailable for purchase or display.  Normal users will not see this product.\";\n        }\n\n        // pull in company attachable files\n        if (!empty($product_type->companies_id)) {\n            $product_type->company = new company($product_type->companies_id);\n        }\n\n        if (!empty($product_type->crosssellItem)) foreach ($product_type->crosssellItem as &$csi) {\n            $csi->getAttachableItems();\n        }\n\n        $tpl = $product_type->getForm('show');\n\n        if (!empty($tpl)) $template = new controllertemplate($this, $tpl);\n        $this->grabConfig(); // grab the global config\n\n        assign_to_template(array(\n            'config'        => $this->config,\n            'asset_path'    => $this->asset_path,\n//            'product'      => $product,\n            'product'       => $product_type,\n            'last_category' => !empty($order->lastcat) ? $order->lastcat : null,\n        ));\n        $this->categoryBreadcrumb();\n    }\n\n    function showByTitle() {\n        global $order, $template, $user;\n        //need to add a check here for child product and redirect to parent if hit directly by ID\n        expHistory::set('viewable', $this->params);\n\n        $product = new product(expString::escape($this->params['title']));\n        $product_type = new $product->product_type($product->id);\n        $product_type->title = expString::parseAndTrim($product_type->title, true);\n        $product_type->image_alt_tag = expString::parseAndTrim($product_type->image_alt_tag, true);\n\n        //if we're trying to view a child product directly, then we redirect to it's parent show view\n        //bunk URL, no product found\n        if (empty($product->id)) {\n            redirect_to(array('controller' => 'notfound', 'action' => 'page_not_found', 'title' => $this->params['title']));\n        }\n        if (!empty($product->parent_id)) {\n            $product = new product($product->parent_id);\n            redirect_to(array('controller' => 'store', 'action' => 'show', 'title' => $product->sef_url));\n        }\n        if ($product->active_type == 1) {\n            $product_type->user_message = \"This product is temporarily unavailable for purchase.\";\n        } elseif ($product->active_type == 2 && !$user->isAdmin()) {\n            flash(\"error\", $product->title . \" \" . gt(\"is currently unavailable.\"));\n            expHistory::back();\n        } elseif ($product->active_type == 2 && $user->isAdmin()) {\n            $product_type->user_message = $product->title . \" is currently marked as unavailable for purchase or display.  Normal users will not see this product.\";\n        }\n        if (!empty($product_type->crosssellItem)) foreach ($product_type->crosssellItem as &$csi) {\n            $csi->getAttachableItems();\n        }\n        //eDebug($product->crosssellItem);\n\n        $tpl = $product_type->getForm('show');\n        //eDebug($product);\n        if (!empty($tpl)) $template = new controllertemplate($this, $tpl);\n        $this->grabConfig(); // grab the global config\n\n        assign_to_template(array(\n            'config'        => $this->config,\n            'product'       => $product_type,\n            'last_category' => !empty($order->lastcat) ? $order->lastcat : null,\n        ));\n    }\n\n    function showByModel() {\n        global $order, $template, $db;\n\n        expHistory::set('viewable', $this->params);\n        $product = new product();\n        $model = $product->find(\"first\", 'model=\"' . expString::escape($this->params['model']) . '\"');\n        //eDebug($model);\n        $product_type = new $model->product_type($model->id);\n        //eDebug($product_type);\n        $tpl = $product_type->getForm('show');\n        if (!empty($tpl)) $template = new controllertemplate($this, $tpl);\n        //eDebug($template);\n        $this->grabConfig(); // grab the global config\n        assign_to_template(array(\n            'config'        => $this->config,\n            'product'       => $product_type,\n            'last_category' => $order->lastcat\n        ));\n    }\n\n    function showallSubcategories() {\n//        global $db;\n\n        expHistory::set('viewable', $this->params);\n//        $parent = isset($this->params['cat']) ? $this->params['cat'] : expSession::get('catid');\n        $catid = expSession::get('catid');\n        $parent = !empty($catid) ? $catid : (!empty($this->params['cat']) ? intval($this->params['cat']) : 0);\n        $category = new storeCategory($parent);\n        $categories = $category->getEcomSubcategories();\n        $ancestors = $category->pathToNode();\n        assign_to_template(array(\n            'categories' => $categories,\n            'ancestors'  => $ancestors,\n            'category'   => $category\n        ));\n    }\n\n    function showallFeaturedProducts() {\n        expHistory::set('viewable', $this->params);\n        $order = !empty($this->params['order']) ? $this->params['order'] : $this->config['orderby'];\n        $dir = !empty($this->params['dir']) ? $this->params['dir'] : $this->config['orderby_dir'];\n        if (empty($order)) $order = 'title';\n        if (empty($dir)) $dir = 'ASC';\n\n        $page = new expPaginator(array(\n            'model_field' => 'product_type',\n            'sql'         => 'SELECT * FROM ' . DB_TABLE_PREFIX . '_product WHERE is_featured=1',\n            'limit'       => ecomconfig::getConfig('pagination_default'),\n            'order'       => $order,\n            'dir'         => $dir,\n            'page'        => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'  => $this->params['controller'],\n            'action'      => $this->params['action'],\n            'columns'     => array(\n                gt('Model #')      => 'model',\n                gt('Product Name') => 'title',\n                gt('Price')        => 'base_price'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page' => $page\n        ));\n    }\n\n    function showallCategoryFeaturedProducts() {\n        expHistory::set('viewable', $this->params);\n        $curcat = $this->category;\n\n        $order = !empty($this->params['order']) ? $this->params['order'] : $this->config['orderby'];\n        $dir = !empty($this->params['dir']) ? $this->params['dir'] : $this->config['orderby_dir'];\n        if (empty($order)) $order = 'title';\n        if (empty($dir)) $dir = 'ASC';\n        //FIXME bad sql statement needs to be a JOIN\n        $sql = 'SELECT * FROM ' . DB_TABLE_PREFIX . '_product as p,' . DB_TABLE_PREFIX . '_product_storeCategories as sc WHERE sc.product_id = p.id and p.is_featured=1 and sc.storecategories_id =' . $curcat->id;\n        $page = new expPaginator(array(\n            'model_field' => 'product_type',\n            'sql'         => $sql,\n            'limit'       => ecomconfig::getConfig('pagination_default'),\n            'order'       => $order,\n            'dir'         => $dir,\n            'page'        => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'  => $this->params['controller'],\n            'action'      => $this->params['action'],\n            'columns'     => array(\n                gt('Model #')      => 'model',\n                gt('Product Name') => 'title',\n                gt('Price')        => 'base_price'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page' => $page\n        ));\n    }\n\n    function showTopLevel() {\n        expHistory::set('viewable', $this->params);\n        $category = new storeCategory(null, false, false);\n        //$categories = $category->getEcomSubcategories();\n        $categories = $category->getTopLevel(null, false, true);\n        $ancestors = $this->category->pathToNode();\n        $curcat = $this->category;\n\n        assign_to_template(array(\n            'categories' => $categories,\n            'curcat'     => $curcat,\n            'topcat'     => @$ancestors[0]\n        ));\n    }\n\n    function showTopLevel_images() {\n        global $user;\n\n        expHistory::set('viewable', $this->params);\n        $count_sql_start = 'SELECT COUNT(DISTINCT p.id) as c FROM ' . DB_TABLE_PREFIX . '_product p ';\n        $sql_start = 'SELECT DISTINCT p.* FROM ' . DB_TABLE_PREFIX . '_product p ';\n        $sql = 'JOIN ' . DB_TABLE_PREFIX . '_product_storeCategories sc ON p.id = sc.product_id ';\n        $sql .= 'WHERE ';\n        if (!$user->isAdmin()) $sql .= '(p.active_type=0 OR p.active_type=1)'; //' AND ' ;\n        //$sql .= 'sc.storecategories_id IN (';\n        //$sql .= 'SELECT id FROM '.DB_TABLE_PREFIX.'_storeCategories WHERE rgt BETWEEN '.$this->category->lft.' AND '.$this->category->rgt.')';\n\n        $count_sql = $count_sql_start . $sql;\n        $sql = $sql_start . $sql;\n\n        $order = 'sc.rank'; //$this->config['orderby'];\n        $dir = 'ASC'; //$this->config['orderby_dir'];\n\n        $limit = !empty($this->config['limit']) ? $this->config['limit'] : 10;\n        $page = new expPaginator(array(\n            'model_field' => 'product_type',\n            'sql'         => $sql,\n            'count_sql'   => $count_sql,\n            'limit'       => !empty($this->config['pagination_default']) ? $this->config['pagination_default'] : $limit,\n            'order'       => $order,\n            'dir'         => $dir,\n            'page'        => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'  => $this->params['controller'],\n            'action'      => $this->params['action'],\n            'columns'     => array(\n                gt('Model #')      => 'model',\n                gt('Product Name') => 'title',\n                gt('Price')        => 'base_price'\n            ),\n        ));\n\n        $category = new storeCategory(null, false, false);\n        //$categories = $category->getEcomSubcategories();\n        $categories = $category->getTopLevel(null, false, true);\n        $ancestors = $this->category->pathToNode();\n        $curcat = $this->category;\n\n        assign_to_template(array(\n            'page'       => $page,\n            'categories' => $categories\n        ));\n    }\n\n    function showFullTree() {  //FIXME we also need a showFullTree_images method like above\n        expHistory::set('viewable', $this->params);\n        $category = new storeCategory(null, false, false);\n        //$categories = $category->getEcomSubcategories();\n        $categories = $category->getFullTree();\n        $ancestors = $this->category->pathToNode();\n        $curcat = $this->category;\n\n        assign_to_template(array(\n            'categories' => $categories,\n            'curcat'     => $curcat,\n            'topcat'     => @$ancestors[0]\n        ));\n    }\n\n    function ecomSearch() {\n\n    }\n\n    function billing_config() {\n\n    }\n\n    /**\n     * Add all products (products, event registrations, donations, & gift cards) to search index\n     *\n     * @return int\n     */\n    function addContentToSearch() {\n        global $db, $router;\n\n        $model = new $this->basemodel_name();\n\n        $total = $db->countObjects($model->table);\n\n        $count = 0;\n        for ($i = 0; $i < $total; $i += 100) {\n            $orderby = 'id LIMIT ' . ($i) . ', 100';\n            $content = $db->selectArrays($model->table, 'parent_id=0', $orderby);\n\n            foreach ($content as $cnt) {\n                $origid = $cnt['id'];\n                $prod = new product($cnt['id']);\n                unset($cnt['id']);\n                if (ecomconfig::getConfig('ecom_search_results') == '') {\n                    $cnt['title'] = (isset($prod->expFile['mainimage'][0]) ? '<img src=\"' . PATH_RELATIVE . 'thumb.php?id=' . $prod->expFile['mainimage'][0]->id . '&w=40&h=40&zc=1\" style=\"float:left;margin-right:5px;\" />' : '') . $cnt['title'] . (!empty($cnt['model']) ? ' - SKU#: ' . $cnt['model'] : '');\n                }\n\n//                $search_record = new search($cnt, false, false);\n               //build the search record and save it.\n                $sql = \"original_id=\" . $origid . \" AND ref_module='\" . $this->baseclassname . \"'\";\n                $oldindex = $db->selectObject('search', $sql);\n                if (!empty($oldindex)) {\n                    $search_record = new search($oldindex->id, false, false);\n                    $search_record->update($cnt);\n                } else {\n                    $search_record = new search($cnt, false, false);\n                }\n\n                $search_record->posted = empty($cnt['created_at']) ? null : $cnt['created_at'];\n                if ($cnt['product_type'] == 'giftcard') {\n                    $search_record->view_link = str_replace(URL_FULL, '', $router->makeLink(array('controller' => 'store', 'action' => 'showGiftCards')));\n                } else {\n//                    $search_record->view_link = str_replace(URL_FULL, '', $router->makeLink(array('controller' => $this->baseclassname, 'action' => 'show', 'title' => $cnt['sef_url'])));\n                    $search_record->view_link = str_replace(URL_FULL, '', $router->makeLink(array('controller' => $cnt['product_type'], 'action' => 'show', 'title' => $cnt['sef_url'])));\n                }\n//                $search_record->ref_module = 'store';\n                $search_record->ref_module  = $this->baseclassname;\n//                $search_record->ref_type = $this->basemodel_name;\n                $search_record->ref_type = $cnt['product_type'];\n//                $search_record->category = 'Products';\n                $prod = new $search_record->ref_type($origid);\n                $search_record->category = $prod->product_name;\n                if ($search_record->ref_type == 'eventregistration') {\n                    $search_record->title .= ' - ' . expDateTime::format_date($prod->eventdate);\n                }\n\n                $search_record->original_id = $origid;\n                //$search_record->location_data = serialize($this->loc);\n                $search_record->save();\n                $count++;\n            }\n        }\n        return $count;\n    }\n\n    function searchByModel() {\n        //do nothing...just show the view.\n    }\n\n    function edit() {\n        global $db;\n\n//        $expDefinableField = new expDefinableField();\n//        $definablefields = $expDefinableField->find('all','1','rank');\n\n        //Make sure that the view is the edit.tpl and not any ajax views\n        if (isset($this->params['view']) && $this->params['view'] == 'edit') {\n            expHistory::set('editable', $this->params);\n        }\n\n        // first we need to figure out what type of ecomm product we are dealing with\n        if (!empty($this->params['id'])) {\n            // if we have an id lets pull the product type from the products table.\n            $product_type = $db->selectValue('product', 'product_type', 'id=' . $this->params['id']);\n            if (empty($product_type)) redirect_to(array('controller' => 'store', 'action' => 'picktype'));\n        } else {\n            if (empty($this->params['product_type'])) redirect_to(array('controller' => 'store', 'action' => 'picktype'));\n            $product_type = $this->params['product_type'];\n        }\n\n        if (!empty($this->params['id'])) {\n            $record = new $product_type($this->params['id']);\n            if (!empty($this->user_input_fields) && !is_array($record->user_input_fields)) $record->user_input_fields = expUnserialize($record->user_input_fields);\n        } else {\n            $record = new $product_type();\n            $record->user_input_fields = array();\n        }\n\n//        if (!empty($this->params['parent_id']))\n\n        // get the product options and send them to the form\n        $editable_options = array();\n        //$og = new optiongroup();\n        $mastergroups = $db->selectExpObjects('optiongroup_master', null, 'optiongroup_master');\n        //eDebug($mastergroups,true);\n        foreach ($mastergroups as $mastergroup) {\n            // if this optiongroup_master has already been made into an option group for this product\n            // then we will grab that record now..if not, we will make a new one.\n            $grouprec = $db->selectArray('optiongroup', 'optiongroup_master_id=' . $mastergroup->id . ' AND product_id=' . $record->id);\n            //if ($mastergroup->id == 9) eDebug($grouprec,true);\n            //eDebug($grouprec);\n            if (empty($grouprec)) {\n                $grouprec['optiongroup_master_id'] = $mastergroup->id;\n                $grouprec['title'] = $mastergroup->title;\n                $group = new optiongroup($grouprec);\n            } else {\n                $group = new optiongroup($grouprec['id']);\n            }\n\n            $editable_options[$group->title] = $group;\n\n            if (empty($group->option)) {\n                foreach ($mastergroup->option_master as $optionmaster) {\n                    $opt = new option(array('title' => $optionmaster->title, 'option_master_id' => $optionmaster->id), false, false);\n                    $editable_options[$group->title]->options[] = $opt;\n                }\n\n            } else {\n                if (count($group->option) == count($mastergroup->option_master)) {\n                    $editable_options[$group->title]->options = $group->option;\n                } else {\n                    // check for any new options or deleted since the last time we edited this product\n                    foreach ($mastergroup->option_master as $optionmaster) {\n                        $opt_id = $db->selectValue('option', 'id', 'option_master_id=' . $optionmaster->id . \" AND product_id=\" . $record->id);\n                        if (empty($opt_id)) {\n                            $opt = new option(array('title' => $optionmaster->title, 'option_master_id' => $optionmaster->id), false, false);\n                        } else {\n                            $opt = new option($opt_id);\n                        }\n\n                        $editable_options[$group->title]->options[] = $opt;\n                    }\n                }\n            }\n            //eDebug($editable_options[$group->title]);\n        }\n        //die();\n\n        uasort($editable_options, array(\"optiongroup\", \"sortOptiongroups\"));\n\n        // get the shipping options and their methods\n//        $shipping = new shipping();\n//        foreach (shipping::listAvailableCalculators() as $calcid => $name) {\n        foreach (shipping::listCalculators() as $calcid => $name) {\n            // must make sure (custom) calculator exists\n            if (class_exists($name)) {\n                $calc = new $name($calcid);\n                $shipping_services[$calcid] = $calc->title;\n                $shipping_methods[$calcid] = $calc->availableMethods();\n            }\n        }\n\n#        eDebug($shipping_services);\n#        eDebug($shipping_methods);\n\n        if (!empty($this->params['product_type']) && ($this->params['product_type'] == \"product\" || $this->params['product_type'] == \"childProduct\")) {\n            //if new record and it's a child, then well set the child rank to be at the end\n            if (empty($record->id) && $record->isChild()) {\n                $record->child_rank = $db->max('product', 'child_rank', null, 'parent_id=' . $record->parent_id) + 1;\n            }\n            //eDebug($record,true);\n        }\n        $view = '';\n        $parent = null;\n        if ((isset($this->params['parent_id']) && empty($record->id))) {\n            //NEW child product\n            $view = 'edit';\n            $parent = new $product_type($this->params['parent_id'], false, true);\n            $record->parent_id = $this->params['parent_id'];\n        } elseif ((!empty($record->id) && $record->parent_id != 0)) {\n            //EDIT child product\n            $view = 'edit';\n            $parent = new $product_type($record->parent_id, false, true);\n        } else {\n            $view = 'edit';\n        }\n\n        $f = new forms();\n        $forms_list = array();\n        $forms_list[0] = '- '.gt('No User Input Required').' -';\n        $forms = $f->find('all', 'is_saved=1');\n        if (!empty($forms)) foreach ($forms as $frm) {\n            if (!$db->countObjects('eventregistration', 'forms_id='.$frm->id) || (!empty($record->forms_id) && $record->forms_id == $frm->id))\n                $forms_list[$frm->id] = $frm->title;\n        }\n\n        assign_to_template(array(\n            'record'            => $record,\n            'parent'            => $parent,\n            'form'              => $record->getForm($view),\n            'optiongroups'      => $editable_options,\n//            'definablefields'   => isset($definablefields) ? $definablefields : '',\n            'forms'=> $forms_list,\n            'shipping_services' => isset($shipping_services) ? $shipping_services : '', // Added implication since the shipping_services default value is a null\n            'shipping_methods'  => isset($shipping_methods) ? $shipping_methods : '', // Added implication since the shipping_methods default value is a null\n            'product_types'     => isset($this->config['product_types']) ? $this->config['product_types'] : ''\n            //'status_display'=>$status_display->getStatusArray()\n        ));\n    }\n\n    function copyProduct() {\n        global $db;\n\n        //expHistory::set('editable', $this->params);\n        $f = new forms();\n        $forms_list = array();\n        $forms_list[0] = '- '.gt('No User Input Required').' -';\n        $forms = $f->find('all', 'is_saved=1');\n        if (!empty($forms)) foreach ($forms as $frm) {\n            $forms_list[$frm->id] = $frm->title;\n        }\n\n        // first we need to figure out what type of ecomm product we are dealing with\n        if (!empty($this->params['id'])) {\n            // if we have an id lets pull the product type from the products table.\n            $product_type = $db->selectValue('product', 'product_type', 'id=' . $this->params['id']);\n        } else {\n            if (empty($this->params['product_type'])) redirect_to(array('controller' => 'store', 'action' => 'picktype'));\n            $product_type = $this->params['product_type'];\n        }\n\n        $record = new $product_type($this->params['id']);\n        // get the product options and send them to the form\n        $editable_options = array();\n\n        $mastergroups = $db->selectExpObjects('optiongroup_master', null, 'optiongroup_master');\n        foreach ($mastergroups as $mastergroup) {\n            // if this optiongroup_master has already been made into an option group for this product\n            // then we will grab that record now..if not, we will make a new one.\n            $grouprec = $db->selectArray('optiongroup', 'optiongroup_master_id=' . $mastergroup->id . ' AND product_id=' . $record->id);\n            //eDebug($grouprec);\n            if (empty($grouprec)) {\n                $grouprec['optiongroup_master_id'] = $mastergroup->id;\n                $grouprec['title'] = $mastergroup->title;\n                $group = new optiongroup($grouprec);\n            } else {\n                $group = new optiongroup($grouprec['id']);\n            }\n\n            $editable_options[$group->title] = $group;\n\n            if (empty($group->option)) {\n                foreach ($mastergroup->option_master as $optionmaster) {\n                    $opt = new option(array('title' => $optionmaster->title, 'option_master_id' => $optionmaster->id), false, false);\n                    $editable_options[$group->title]->options[] = $opt;\n                }\n            } else {\n                if (count($group->option) == count($mastergroup->option_master)) {\n                    $editable_options[$group->title]->options = $group->option;\n                } else {\n                    // check for any new options or deleted since the last time we edited this product\n                    foreach ($mastergroup->option_master as $optionmaster) {\n                        $opt_id = $db->selectValue('option', 'id', 'option_master_id=' . $optionmaster->id . \" AND product_id=\" . $record->id);\n                        if (empty($opt_id)) {\n                            $opt = new option(array('title' => $optionmaster->title, 'option_master_id' => $optionmaster->id), false, false);\n                        } else {\n                            $opt = new option($opt_id);\n                        }\n\n                        $editable_options[$group->title]->options[] = $opt;\n                    }\n                }\n            }\n        }\n\n        // get the shipping options and their methods\n//        $shipping = new shipping();\n//        foreach (shipping::listAvailableCalculators() as $calcid => $name) {\n        foreach (shipping::listCalculators() as $calcid => $name) {\n            if (class_exists($name)) {\n                $calc = new $name($calcid);\n                $shipping_services[$calcid] = $calc->title;\n                $shipping_methods[$calcid] = $calc->availableMethods();\n            }\n        }\n\n        $record->original_id = $record->id;\n        $record->original_model = $record->model;\n        $record->sef_url = NULL;\n        $record->previous_id = NULL;\n        $record->editor = NULL;\n\n        if ($record->isChild()) {\n            $record->child_rank = $db->max('product', 'child_rank', null, 'parent_id=' . $record->parent_id) + 1;\n        }\n\n        assign_to_template(array(\n            'copy'              => true,\n            'record'            => $record,\n            'parent'            => new $product_type($record->parent_id, false, true),\n            'form'              => $record->getForm($record->parent_id == 0 ? 'edit' : 'child_edit'),\n            'optiongroups'      => $editable_options,\n            'forms'=> $forms_list,\n            'shipping_services' => $shipping_services,\n            'shipping_methods'  => $shipping_methods\n        ));\n    }\n\n    function picktype() {\n        $prodfiles = storeController::getProductTypes();\n        $products = array();\n        foreach ($prodfiles as $filepath => $classname) {\n            $prodObj = new $classname();\n            $products[$classname] = $prodObj->product_name;\n        }\n        assign_to_template(array(\n            'product_types' => $products\n        ));\n    }\n\n    function update() {\n//        global $db;\n        //Get the product type\n        $product_type = isset($this->params['product_type']) ? $this->params['product_type'] : 'product';\n\n        $record = new $product_type();\n\n        $record->update($this->params);\n\n        if ($product_type == \"childProduct\" || $product_type == \"product\") {\n            $record->addContentToSearch();\n            //Create a flash message and redirect to the page accordingly\n            if ($record->parent_id != 0) {\n                $parent = new $product_type($record->parent_id, false, false);\n                if (isset($this->params['original_id'])) {\n                    flash(\"message\", gt(\"Child product saved.\"));\n                } else {\n                    flash(\"message\", gt(\"Child product copied and saved.\"));\n                }\n                redirect_to(array('controller' => 'store', 'action' => 'show', 'title' => $parent->sef_url));\n            } elseif (isset($this->params['original_id'])) {\n                flash(\"message\", gt(\"Product copied and saved. You are now viewing your new product.\"));\n            } else {\n                flash(\"message\", gt(\"Product saved.\"));\n            }\n            redirect_to(array('controller' => 'store', 'action' => 'show', 'title' => $record->sef_url));\n        } elseif ($product_type == \"giftcard\") {\n            flash(\"message\", gt(\"Giftcard saved.\"));\n            redirect_to(array('controller' => 'store', 'action' => 'manage'));\n        } elseif ($product_type == \"eventregistration\") {\n            //FIXME shouldn't event registrations be added to search index?\n//            $record->addContentToSearch();  //FIXME there is NO eventregistration::addContentToSearch() method\n            flash(\"message\", gt(\"Event saved.\"));\n            redirect_to(array('controller' => 'store', 'action' => 'manage'));\n        } elseif ($product_type == \"donation\") {\n            flash(\"message\", gt(\"Donation saved.\"));\n            redirect_to(array('controller' => 'store', 'action' => 'manage'));\n        }\n    }\n\n    function delete() {\n        global $db;\n\n        if (empty($this->params['id'])) return false;\n        $product_type = $db->selectValue('product', 'product_type', 'id=' . $this->params['id']);\n        $product = new $product_type($this->params['id'], true, false);\n        //eDebug($product_type);\n        //eDebug($product, true);\n        //if (!empty($product->product_type_id)) {\n        //$db->delete($product_type, 'id='.$product->product_id);\n        //}\n\n        $db->delete('option', 'product_id=' . $product->id . \" AND optiongroup_id IN (SELECT id from \" . $db->prefix . \"optiongroup WHERE product_id=\" . $product->id . \")\");\n        $db->delete('optiongroup', 'product_id=' . $product->id);\n        //die();\n        $db->delete('product_storeCategories', 'product_id=' . $product->id . ' AND product_type=\"' . $product_type . '\"');\n\n        if ($product->product_type == \"product\") {\n            if ($product->hasChildren()) {\n                $this->deleteChildren();\n            }\n        }\n\n        $product->delete();\n\n        flash('message', gt('Product deleted successfully.'));\n        expHistory::back();\n    }\n\n    function quicklinks() {\n        global $order;\n\n        $oicount = !empty($order->item_count) ? $order->item_count : 0;\n        //eDebug($itemcount);\n        assign_to_template(array(\n            \"oicount\" => $oicount,\n        ));\n    }\n\n    public static function getProductTypes() {\n        $paths = array(\n            BASE . 'framework/modules/ecommerce/products/models',\n        );\n\n        $products = array();\n        foreach ($paths as $path) {\n            if (is_readable($path)) {\n                $dh = opendir($path);\n                while (($file = readdir($dh)) !== false) {\n                    if (is_readable($path . '/' . $file) && substr($file, -4) == '.php' && $file != 'childProduct.php') {\n                        $classname = substr($file, 0, -4);\n                        $products[$path . '/' . $file] = $classname;\n                    }\n                }\n            }\n        }\n\n        return $products;\n    }\n\n    function metainfo() {\n        global $router;\n\n        if (empty($router->params['action'])) return array();\n\n        // figure out what metadata to pass back based on the action we are in.\n        $action = $router->params['action'];\n        $metainfo = array('title'=>'', 'keywords'=>'', 'description'=>'', 'canonical'=> '', 'noindex' => false, 'nofollow' => false);\n        $storename = ecomconfig::getConfig('storename');\n        switch ($action) {\n            case 'showall': //category page\n                $cat = $this->category;\n                if (!empty($cat)) {\n                    $metainfo['title'] = empty($cat->meta_title) ? $cat->title . ' ' . gt('Products') . ' - ' . $storename : $cat->meta_title;\n                    $metainfo['keywords'] = empty($cat->meta_keywords) ? $cat->title : strip_tags($cat->meta_keywords);\n                    $metainfo['description'] = empty($cat->meta_description) ? strip_tags($cat->body) : strip_tags($cat->meta_description);\n                    $metainfo['canonical'] = empty($cat->canonical) ? $router->plainPath() : strip_tags($cat->canonical);\n                    $metainfo['noindex'] = empty($cat->meta_noindex) ? false : $cat->meta_noindex;\n                    $metainfo['nofollow'] = empty($cat->meta_nofollow) ? false : $cat->meta_nofollow;\n                }\n                break;\n            case 'show':\n            case 'showByTitle':\n                $prod = new product(isset($router->params['title']) ? expString::sanitize($router->params['title']) : intval($router->params['id']));\n                if (!empty($prod)) {\n                    $metainfo['title'] = empty($prod->meta_title) ? $prod->title . \" - \" . $storename : $prod->meta_title;\n                    $metainfo['keywords'] = empty($prod->meta_keywords) ? $prod->title : strip_tags($prod->meta_keywords);\n                    $metainfo['description'] = empty($prod->meta_description) ? strip_tags($prod->body) : strip_tags($prod->meta_description);\n                    $metainfo['canonical'] = empty($prod->canonical) ? $router->plainPath() : strip_tags($prod->canonical);\n                    $metainfo['noindex'] = empty($prod->meta_noindex) ? false : $prod->meta_noindex;\n                    $metainfo['nofollow'] = empty($prod->meta_nofollow) ? false : $prod->meta_nofollow;\n                    if (!empty($prod->expFile['mainimage'][0]) && file_exists(BASE.$prod->expFile['mainimage'][0]->directory.$prod->expFile['mainimage'][0]->filename)) {\n                        $metainfo['rich'] = '<!--\n        <PageMap>\n            <DataObject type=\"thumbnail\">\n                <Attribute name=\"src\" value=\"'.$prod->expFile['mainimage'][0]->url.'\"/>\n                <Attribute name=\"width\" value=\"'.$prod->expFile['mainimage'][0]->image_width.'\"/>\n                <Attribute name=\"height\" value=\"'.$prod->expFile['mainimage'][0]->image_width.'\"/>\n            </DataObject>\n        </PageMap>\n    -->';\n                    }\n                    $metainfo['fb']['type'] = 'product';\n                    $metainfo['fb']['title'] =  substr(empty($prod->meta_fb['title']) ? $prod->title : $prod->meta_fb['title'], 0, 87);\n                    $metainfo['fb']['description'] = substr(empty($prod->meta_fb['description']) ? $metainfo['description'] : $prod->meta_fb['description'], 0, 199);\n                    $metainfo['fb']['url'] = empty($prod->meta_fb['url']) ? $metainfo['canonical'] : $prod->meta_fb['url'];\n                    $metainfo['fb']['image'] = empty($prod->meta_fb['fbimage'][0]) ? '' : $prod->meta_fb['fbimage'][0]->url;\n                    if (empty($metainfo['fb']['image'])) {\n                        if (!empty($prod->expFile['mainimage'][0]))\n                            $metainfo['fb']['image'] = $prod->expFile['mainimage'][0]->url;\n                        if (empty($metainfo['fb']['image']))\n                            $metainfo['fb']['image'] = URL_BASE . '/framework/modules/ecommerce/assets/images/no-image.jpg';\n                    }\n                    break;\n                }\n            default:\n                $metainfo['title'] = gt(\"Shopping\") . \" - \" . $storename;\n                $metainfo['keywords'] = SITE_KEYWORDS;\n                $metainfo['description'] = SITE_DESCRIPTION;\n        }\n\n        // Remove any quotes if there are any.\n//        $metainfo['title'] = expString::parseAndTrim($metainfo['title'], true);\n//        $metainfo['description'] = expString::parseAndTrim($metainfo['description'], true);\n//        $metainfo['keywords'] = expString::parseAndTrim($metainfo['keywords'], true);\n//        $metainfo['canonical'] = expString::parseAndTrim($metainfo['canonical'], true);\n//        $metainfo['noindex'] = expString::parseAndTrim($metainfo['noindex'], true);\n//        $metainfo['nofollow'] = expString::parseAndTrim($metainfo['nofollow'], true);\n\n        return $metainfo;\n    }\n\n    /**\n     * Configure the module\n     */\n    public function configure() {\n        if (empty($this->config['enable_ratings_and_reviews'])) {\n            $this->remove_configs[] = 'comments';\n        }\n        parent::configure();\n    }\n\n    public function deleteChildren() {\n        //eDebug($data[0],true);\n        //if($id!=null) $this->params['id'] = $id;\n        //eDebug($this->params,true);\n        $product = new product($this->params['id']);\n        //$product = $product->find(\"first\", \"previous_id =\" . $previous_id);\n        //eDebug($product, true);\n        if (empty($product->id)) // || empty($product->previous_id))\n        {\n            flash('error', gt('There was an error deleting the child products.'));\n            expHistory::back();\n        }\n        $childrenToDelete = $product->find('all', 'parent_id=' . $product->id);\n        foreach ($childrenToDelete as $ctd) {\n            //fwrite($lfh, \"Deleting:\" . $ctd->id . \"\\n\");\n            $ctd->delete();\n        }\n    }\n\n    function searchByModelForm() {\n        // get the search terms\n        $terms = expString::escape($this->params['search_string']);\n\n        $sql = \"model like '%\" . $terms . \"%'\";\n\n        $limit = !empty($this->config['limit']) ? $this->config['limit'] : 10;\n        $page = new expPaginator(array(\n            'model'      => 'product',\n            'where'      => $sql,\n            'limit'      => !empty($this->config['pagination_default']) ? $this->config['pagination_default'] : $limit,\n            'order'      => 'title',\n            'dir'        => 'DESC',\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller' => $this->params['controller'],\n            'action'     => $this->params['action'],\n            'columns'    => array(\n                gt('Model #')      => 'model',\n                gt('Product Name') => 'title',\n                gt('Price')        => 'base_price'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page'  => $page,\n            'terms' => $terms\n        ));\n    }\n\n    /**\n     * AJAX search for products by model/sku\n     */\n\n    function search_by_model() {\n        global $db, $user;\n\n        $sql = \"select DISTINCT(p.id) as id, p.title, model from \" . $db->prefix . \"product as p WHERE \";\n        if (!($user->isAdmin())) $sql .= '(p.active_type=0 OR p.active_type=1) AND ';\n\n        //if first character of search is a -, then we do a wild card, else from beginning\n        $this->params['query'] = expString::escape($this->params['query']);\n        if ($this->params['query'][0] == '-') {\n            $sql .= \" p.model LIKE '%\" . $this->params['query'];\n        } else {\n            $sql .= \" p.model LIKE '\" . $this->params['query'];\n        }\n\n        $sql .= \"%' AND p.parent_id=0 GROUP BY p.id \";\n        $sql .= \"order by p.model ASC LIMIT 30\";\n        $res = $db->selectObjectsBySql($sql);\n        //eDebug($sql);\n        $ar = new expAjaxReply(200, gt('Here\\'s the items you wanted'), $res);\n        $ar->send();\n    }\n\n    /**\n     * AJAX search for products by title, description, or model/sku\n     *\n     */\n    public function search() {\n        global $db, $user;\n\n        $this->params['query'] = expString::escape($this->params['query']);\n        if (SAVE_SEARCH_QUERIES && INCLUDE_AJAX_SEARCH == 1) {  // only to add search query record\n            $qry = trim($this->params['query']);\n            if (!empty($qry)) {\n                if (INCLUDE_ANONYMOUS_SEARCH == 1 || $user->id <> 0) {\n                    $queryObj = new stdClass();\n                    $queryObj->user_id = $user->id;\n                    $queryObj->query = $qry;\n                    $queryObj->timestamp = time();\n\n                    $db->insertObject($queryObj, 'search_queries');\n                }\n            }\n        }\n        //$this->params['query'] = str_ireplace('-','\\-',$this->params['query']);\n        $terms = explode(\" \", $this->params['query']);\n        $search_type = ecomconfig::getConfig('ecom_search_results');\n\n        // look for term in full text search\n        $sql = \"select DISTINCT(p.id) as id, p.title, model, sef_url, f.id as fileid, match (p.title,p.body) against ('\" . $this->params['query'] . \"*' IN BOOLEAN MODE) as score \";\n        $sql .= \"  from \" . $db->prefix . \"product as p LEFT JOIN \" .\n            $db->prefix . \"content_expFiles as cef ON p.id=cef.content_id AND cef.content_type IN ('product','eventregistration','donation','giftcard') AND cef.subtype='mainimage' LEFT JOIN \" . $db->prefix .\n            \"expFiles as f ON cef.expFiles_id = f.id WHERE \";\n        if (!($user->isAdmin())) $sql .= '(p.active_type=0 OR p.active_type=1) AND ';\n        if ($search_type == 'products') $sql .= 'product_type = \"product\" AND ';\n        $sql .= \" match (p.title,p.body) against ('\" . $this->params['query'] . \"*' IN BOOLEAN MODE) AND p.parent_id=0  GROUP BY p.id \";\n        $sql .= \"order by score desc LIMIT 10\";\n\n        $firstObs = $db->selectObjectsBySql($sql);\n        foreach ($firstObs as $set) {\n            $set->weight = 1;\n            unset($set->score);\n            $index = !empty($set->model) ? $set->model : $set->sef_url;\n            $res[$index] = $set;\n        }\n\n        // look for specific term in fields\n        $sql = \"select DISTINCT(p.id) as id, p.title, model, sef_url, f.id as fileid  from \" . $db->prefix . \"product as p LEFT JOIN \" .\n            $db->prefix . \"content_expFiles as cef ON p.id=cef.content_id AND cef.content_type IN ('product','eventregistration','donation','giftcard') AND cef.subtype='mainimage' LEFT JOIN \" . $db->prefix .\n            \"expFiles as f ON cef.expFiles_id = f.id WHERE \";\n        if (!($user->isAdmin())) $sql .= '(p.active_type=0 OR p.active_type=1) AND ';\n        if ($search_type == 'products') $sql .= 'product_type = \"product\" AND ';\n        $sql .= \" (p.model like '%\" . $this->params['query'] . \"%' \";\n        $sql .= \" OR p.title like '%\" . $this->params['query'] . \"%') \";\n        $sql .= \" AND p.parent_id=0 GROUP BY p.id LIMIT 10\";\n\n        $secondObs = $db->selectObjectsBySql($sql);\n        foreach ($secondObs as $set) {\n            $set->weight = 2;\n            $index = !empty($set->model) ? $set->model : $set->sef_url;\n            $res[$index] = $set;\n        }\n\n        // look for begins with term in fields\n        $sql = \"select DISTINCT(p.id) as id, p.title, model, sef_url, f.id as fileid  from \" . $db->prefix . \"product as p LEFT JOIN \" .\n            $db->prefix . \"content_expFiles as cef ON p.id=cef.content_id AND cef.content_type IN ('product','eventregistration','donation','giftcard') AND cef.subtype='mainimage' LEFT JOIN \" . $db->prefix .\n            \"expFiles as f ON cef.expFiles_id = f.id WHERE \";\n        if (!($user->isAdmin())) $sql .= '(p.active_type=0 OR p.active_type=1) AND ';\n        if ($search_type == 'products') $sql .= 'product_type = \"product\" AND ';\n        $sql .= \" (p.model like '\" . $this->params['query'] . \"%' \";\n        $sql .= \" OR p.title like '\" . $this->params['query'] . \"%') \";\n        $sql .= \" AND p.parent_id=0 GROUP BY p.id LIMIT 10\";\n\n        $thirdObs = $db->selectObjectsBySql($sql);\n        foreach ($thirdObs as $set) {\n            if (strcmp(strtolower(trim($this->params['query'])), strtolower(trim($set->model))) == 0)\n                $set->weight = 10;\n            else if (strcmp(strtolower(trim($this->params['query'])), strtolower(trim($set->title))) == 0)\n                $set->weight = 9;\n            else\n                $set->weight = 3;\n\n            $index = !empty($set->model) ? $set->model : $set->sef_url;\n            $res[$index] = $set;\n        }\n\n        function sortSearch($a, $b) {\n            return ($a->weight == $b->weight ? 0 : ($a->weight < $b->weight) ? 1 : -1);\n        }\n\n        if (count($terms)) {\n            foreach ($res as $r) {\n                $index = !empty($r->model) ? $r->model : $r->sef_url;\n                foreach ($terms as $term) {\n                    if (stristr($r->title, $term)) $res[$index]->weight = $res[$index]->weight + 1;\n                }\n            }\n        }\n        usort($res, 'sortSearch');\n\n        $ar = new expAjaxReply(200, gt('Here\\'s the items you wanted'), $res);\n        $ar->send();\n    }\n\n    /**\n     * AJAX search for products by title, description, or model/sku\n     *\n     */\n    public function searchNew() {\n        global $db, $user;\n\n        $this->params['query'] = expString::escape($this->params['query']);\n        //$this->params['query'] = str_ireplace('-','\\-',$this->params['query']);\n        $sql = \"select DISTINCT(p.id) as id, p.title, model, sef_url, f.id as fileid, \";\n        $sql .= \"match (p.title,p.model,p.body) against ('\" . $this->params['query'] . \"*' IN BOOLEAN MODE) as relevance, \";\n        $sql .= \"CASE when p.model like '\" . $this->params['query'] . \"%' then 1 else 0 END as modelmatch, \";\n        $sql .= \"CASE when p.title like '%\" . $this->params['query'] . \"%' then 1 else 0 END as titlematch \";\n        $sql .= \"from \" . $db->prefix . \"product as p INNER JOIN \" .\n            $db->prefix . \"content_expFiles as cef ON p.id=cef.content_id AND cef.content_type IN ('product','eventregistration','donation','giftcard') AND cef.subtype='mainimage'  INNER JOIN \" . $db->prefix .\n            \"expFiles as f ON cef.expFiles_id = f.id WHERE \";\n        if (!$user->isAdmin()) $sql .= '(p.active_type=0 OR p.active_type=1) AND ';\n        $sql .= \" match (p.title,p.model,p.body) against ('\" . $this->params['query'] . \"*' IN BOOLEAN MODE) AND p.parent_id=0 \";\n        $sql .= \" HAVING relevance > 0 \";\n        //$sql .= \"GROUP BY p.id \";\n        $sql .= \"order by modelmatch,titlematch,relevance desc LIMIT 10\";\n\n        eDebug($sql);\n        $res = $db->selectObjectsBySql($sql);\n        eDebug($res, true);\n        $ar = new expAjaxReply(200, gt('Here\\'s the items you wanted'), $res);\n        $ar->send();\n    }\n\n    function batch_process() {\n        $os = new order_status();\n        $oss = $os->find('all',1,'rank');\n        $order_status = array();\n        $order_status[-1] = '';\n        foreach ($oss as $status) {\n            $order_status[$status->id] = $status->title;\n        }\n        assign_to_template(array(\n            'order_status' => $order_status\n        ));\n    }\n\n    function process_orders() {\n        /*\n          Testing\n        */\n        /*echo \"Here?\";\n        $inv = 30234;\n        $req = 'a29f9shsgh32hsf80s7';\n        $amt = 101.00;\n        for($count=1;$count<=25;$count+=2)\n        {\n            $data[2] = $inv + $count;\n            $amt += $count*$count;\n            $successSet[$count]['message'] = \"Sucessfully imported row \" . $count . \", order: \" . $data[2] . \"<br/>\";\n            $successSet[$count]['order_id'] = $data[2];\n            $successSet[$count]['amount'] = $amt;\n            $successSet[$count]['request_id'] = $req;\n            $successSet[$count]['reference_id'] = $req;\n            $successSet[$count]['authorization_code'] = $req;\n            $successSet[$count]['shipping_tracking_number'] = '1ZNF453937547';\n            $successSet[$count]['carrier'] = 'UPS';\n        }\n        for($count=2;$count<=25;$count+=2)\n        {\n            $data[2] = $inv + $count;\n            $amt += $count*$count;\n            $errorSet[$count]['error_code'] = '42';\n            $errorSet[$count]['message'] = \"No go for some odd reason. Try again.\";\n            $errorSet[$count]['order_id'] = $data[2];\n            $errorSet[$count]['amount'] = $amt;\n        }\n\n        assign_to_template(array('errorSet'=>$errorSet, 'successSet'=>$successSet));\n        return;*/\n\n        ###########\n\n        global $db;\n        $template = expTemplate::get_template_for_action(new orderController(), 'setStatus', $this->loc);\n\n        //eDebug($_FILES);\n        //eDebug($this->params,true);\n        set_time_limit(0);\n        //$file = new expFile($this->params['expFile']['batch_process_upload'][0]);\n        if (!empty($_FILES['batch_upload_file']['error'])) {\n            flash('error', gt('There was an error uploading your file.  Please try again.'));\n            redirect_to(array('controller' => 'store', 'action' => 'batch_process'));\n//            $this->batch_process();\n        }\n\n        $file = new stdClass();\n        $file->path = $_FILES['batch_upload_file']['tmp_name'];\n        echo \"Validating file...<br/>\";\n\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $checkhandle = fopen($file->path, \"r\");\n        // read in the header line\n        $checkdata = fgetcsv($checkhandle, 10000, \",\");\n        $fieldCount = count($checkdata);\n        $count = 1;\n        // read in the data lines\n        while (($checkdata = fgetcsv($checkhandle, 10000, \",\")) !== FALSE) {\n            $count++;\n            if (count($checkdata) != $fieldCount) {\n                echo \"Line \" . $count . \" of your CSV import file does not contain the correct number of columns.<br/>\";\n                echo \"Found \" . $fieldCount . \" header fields, but only \" . count($checkdata) . \" field in row \" . $count . \" Please check your file and try again.\";\n                exit();\n            }\n        }\n        fclose($checkhandle);\n        ini_set('auto_detect_line_endings',$line_end);\n\n        echo \"<br/>CSV File passed validation...<br/><br/>Detecting carrier type....<br/>\";\n        //exit();\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $handle = fopen($file->path, \"r\");\n\n        // read in the header line\n        $data = fgetcsv($handle, 10000, \",\");\n        //eDebug($data);\n//        $dataset = array();\n        $carrier = '';\n        if (trim($data[0]) == 'ShipmentInformationShipmentID') {\n            echo \"Detected UPS file...<br/>\";\n            $carrier = \"UPS\";\n            $carrierTrackingLink = \"http://wwwapps.ups.com/WebTracking/track?track=yes&trackNums=\";\n        } elseif (trim($data[0]) == 'PIC') {\n            echo \"Detected United States Post Service file...<br/>\";\n            $carrier = \"USPS\";\n            $carrierTrackingLink = \"https://tools.usps.com/go/TrackConfirmAction_input?qtc_tLabels1=\";\n        }\n\n        //eDebug($carrier);\n        $count = 1;\n        $errorSet = array();\n        $successSet = array();\n\n        $oo = new order();\n\n        // read in the data lines\n        while (($data = fgetcsv($handle, 10000, \",\")) !== FALSE) {\n            $count++;\n            $originalOrderId = $data[2];\n            $data[2] = intval($data[2]);\n            $order = new stdClass();\n            $bm = new stdClass();\n            $transactionState = null;\n\n            //check for valid order number - if not present or not order, fail and continue with next record\n            if (isset($data[2]) && !empty($data[2])) {\n                $order = $oo->findBy('invoice_id', $data[2]);\n                if (empty($order->id)) {\n                    $errorSet[$count]['message'] = $originalOrderId . \" is not a valid order in this system.\";\n                    $errorSet[$count]['order_id'] = $originalOrderId;\n                    continue;\n                }\n            } else {\n                $errorSet[$count]['message'] = \"Row \" . $count . \" has no order number.\";\n                $errorSet[$count]['order_id'] = \"N/A\";\n                continue;\n            }\n\n            /*we have a valid order, so let's see what we can do: */\n\n            //set status of order to var\n            $currentStat = $order->order_status;\n            //eDebug($currentStat,true);\n\n            //-- check the order for a closed status - if so, do NOT process or set shipping\n            if ($currentStat->treat_as_closed == true) {\n                $errorSet[$count]['message'] = \"This is currently a closed order. Not processing.\";\n                $errorSet[$count]['order_id'] = $data[2];\n                continue;\n            }\n\n            //ok, if we made it here we have a valid order that is \"open\"\n            //we'll try to capture the transaction if it's in an authorized state, but set shipping regardless\n            if (isset($order->billingmethod[0])) {\n                $bm = $order->billingmethod[0];\n                $transactionState = $bm->transaction_state;\n            } else {\n                $bm = null;\n                $transactionState = '';\n            }\n\n            if ($transactionState == 'authorized') {\n                //eDebug($order,true);\n                $calc = $bm->billingcalculator->calculator;\n                $calc->config = $bm->billingcalculator->config;\n                if (method_exists($calc, 'delayed_capture')) {\n                    //$result = $calc->delayed_capture($bm,$bm->billing_cost);\n                    $result = $calc->delayed_capture($bm, $order->grand_total, $order);\n                    if ($result->errorCode == 0) {\n                        //we've succeeded.  transaction already created and billing info updated.\n                        //just need to set the order shipping info, check and see if we send user an email, and set statuses.\n                        //shipping info:\n                        $successSet[$count]['order_id'] = $data[2];\n                        $successSet[$count]['message'] = \"Sucessfully captured order \" . $data[2] . \" and set shipping information.\";\n                        $successSet[$count]['amount'] = $order->grand_total;\n                        $successSet[$count]['request_id'] = $result->request_id;\n                        $successSet[$count]['reference_id'] = $result->PNREF;\n                        $successSet[$count]['authorization_code'] = $result->AUTHCODE;\n                        $successSet[$count]['shipping_tracking_number'] = $data[0];\n                        $successSet[$count]['carrier'] = $carrier;\n                    } else {\n                        //failed capture, so we report the error but still set the shipping information\n                        //because it's already out the door\n                        //$failMessage = \"Attempted to delay capture order \" . $data[2] . \" and it failed with the following error: \" . $result->errorCode . \" - \" .$result->message;\n                        //if the user seelected to set a different status for failed orders, set it here.\n                        /*if(isset($this->params['order_status_fail'][0]) && $this->params['order_status_fail'][0] > -1)\n                        {\n                            $change = new order_status_changes();\n                            // save the changes\n                            $change->from_status_id = $order->order_status_id;\n                            //$change->comment = $this->params['comment'];\n                            $change->to_status_id = $this->params['order_status_fail'][0];\n                            $change->orders_id = $order->id;\n                            $change->save();\n\n                            // update the status of the order\n                            $order->order_status_id = $this->params['order_status_fail'][0];\n                            $order->save();\n                        }*/\n                        $errorSet[$count]['error_code'] = $result->errorCode;\n                        $errorSet[$count]['message'] = \"Capture failed: \" . $result->message . \"<br/>Setting shipping information.\";\n                        $errorSet[$count]['order_id'] = $data[2];\n                        $errorSet[$count]['amount'] = $order->grand_total;\n                        $errorSet[$count]['shipping_tracking_number'] = $data[0];\n                        $errorSet[$count]['carrier'] = $carrier;\n                        //continue;\n                    }\n                } else {\n                    //dont suppose we do anything here, as it may be set to approved manually\n                    //$errorSet[$count] = \"Order \" . $data[2] . \" does not use a billing method with delayed capture ability.\";\n                    $successSet[$count]['message'] = 'No capture processing available for order:' . $data[2] . '. Setting shipping information.';\n                    $successSet[$count]['order_id'] = $data[2];\n                    $successSet[$count]['amount'] = $order->grand_total;\n                    $successSet[$count]['shipping_tracking_number'] = $data[0];\n                    $successSet[$count]['carrier'] = $carrier;\n                }\n            } //if we hit this else, it means we have an order that is not in an authorized state\n            //so we do not try to process it = still set shipping though.  //FIXME what about 'complete'?\n            else {\n                $successSet[$count]['message'] = 'No processing necessary for order:' . $data[2] . '. Setting shipping information.';\n                $successSet[$count]['order_id'] = $data[2];\n                $successSet[$count]['amount'] = $order->grand_total;\n                $successSet[$count]['shipping_tracking_number'] = $data[0];\n                $successSet[$count]['carrier'] = $carrier;\n            }\n\n            $order->shipped = time();\n            $order->shipping_tracking_number = $data[0];\n            $order->save();\n\n            $s = array_pop($order->shippingmethods);\n            $sm = new shippingmethod($s->id);\n            $sm->carrier = $carrier;\n            $sm->save();\n\n            //statuses and email\n            if (isset($this->params['order_status_success'][0]) && $this->params['order_status_success'][0] > -1) {\n                $change = new order_status_changes();\n                // save the changes\n                $change->from_status_id = $order->order_status_id;\n                //$change->comment = $this->params['comment'];\n                $change->to_status_id = $this->params['order_status_success'][0];\n                $change->orders_id = $order->id;\n                $change->save();\n\n                // update the status of the order\n                $order->order_status_id = $this->params['order_status_success'][0];\n                $order->save();\n\n                // email the user if we need to\n                if (!empty($this->params['email_customer'])) {\n                    $email_addy = $order->billingmethod[0]->email;\n                    if (!empty($email_addy)) {\n                        $from_status = $db->selectValue('order_status', 'title', 'id=' . $change->from_status_id);\n                        $to_status = $db->selectValue('order_status', 'title', 'id=' . $change->to_status_id);\n//                        $template->assign(\n                        assign_to_template(\n                            array(\n                                'comment'          => $change->comment,\n                                'to_status'        => $to_status,\n                                'from_status'      => $from_status,\n                                'order'            => $order,\n                                'date'             => date(\"F j, Y, g:i a\"),\n                                'storename'        => ecomconfig::getConfig('storename'),\n                                'include_shipping' => true,\n                                'tracking_link'    => $carrierTrackingLink . $order->shipping_tracking_number,\n                                'carrier'          => $carrier\n                            )\n                        );\n\n                        $html = $template->render();\n                        $html .= ecomconfig::getConfig('ecomfooter');\n\n                        $from = array(ecomconfig::getConfig('from_address') => ecomconfig::getConfig('from_name'));\n                        if (empty($from[0])) $from = SMTP_FROMADDRESS;\n                        try {\n                            $mail = new expMail();\n                            $mail->quickSend(array(\n                                'html_message' => $html,\n                                'text_message' => str_replace(\"<br>\", \"\\r\\n\", $template->render()),\n                                'to'           => array($email_addy => $order->billingmethod[0]->firstname . ' ' . $order->billingmethod[0]->lastname),\n                                'from'         => $from,\n                                'subject'      => 'Your Order Has Been Shipped (#' . $order->invoice_id . ') - ' . ecomconfig::getConfig('storename')\n                            ));\n                        } catch (Exception $e) {\n                            //do nothing for now\n                            eDebug(\"Email error:\");\n                            eDebug($e);\n                        }\n                    }\n                    //else {\n                    //    $errorSet[$count]['message'] .= \"<br/>Order \" . $data[2] . \" was captured successfully, however the email notification was not successful.\";\n                    //}\n                }\n            }\n\n            //eDebug($product);\n        }\n        fclose($handle);\n        ini_set('auto_detect_line_endings',$line_end);\n\n        assign_to_template(array(\n            'errorSet'   => $errorSet,\n            'successSet' => $successSet\n        ));\n    }\n\n    function manage_sales_reps() {\n\n    }\n\n    function showHistory() {\n        $h = new expHistory();\n//        echo \"<xmp>\";\n        echo \"<pre>\";\n        print_r($h);\n//        echo \"</xmp>\";\n        echo \"</pre>\";\n    }\n\n    function import_external_addresses() {\n        $sources = array('mc' => 'MilitaryClothing.com', 'nt' => 'NameTapes.com', 'am' => 'Amazon');\n        assign_to_template(array(\n            'sources' => $sources\n        ));\n    }\n\n    function process_external_addresses() {\n        global $db;\n        set_time_limit(0);\n        //$file = new expFile($this->params['expFile']['batch_process_upload'][0]);\n        eDebug($this->params);\n//        eDebug($_FILES,true);\n        if (!empty($_FILES['address_csv']['error'])) {\n            flash('error', gt('There was an error uploading your file.  Please try again.'));\n            redirect_to(array('controller' => 'store', 'action' => 'import_external_addresses'));\n//            $this->import_external_addresses();\n        }\n\n        $file = new stdClass();\n        $file->path = $_FILES['address_csv']['tmp_name'];\n        echo \"Validating file...<br/>\";\n\n        //replace tabs with commas\n        /*if($this->params['type_of_address'][0] == 'am')\n        {\n            $checkhandle = fopen($file->path, \"w\");\n            $oldFile = file_get_contents($file->path);\n            $newFile = str_ireplace(chr(9),',',$oldFile);\n            fwrite($checkhandle,$newFile);\n            fclose($checkhandle);\n        }*/\n\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $checkhandle = fopen($file->path, \"r\");\n        if ($this->params['type_of_address'][0] == 'am') {\n            // read in the header line\n            $checkdata = fgetcsv($checkhandle, 10000, \"\\t\");\n            $fieldCount = count($checkdata);\n        } else {\n            // read in the header line\n            $checkdata = fgetcsv($checkhandle, 10000, \",\");\n            $fieldCount = count($checkdata);\n        }\n\n        $count = 1;\n        if ($this->params['type_of_address'][0] == 'am') {\n            // read in the data lines\n            while (($checkdata = fgetcsv($checkhandle, 10000, \"\\t\")) !== FALSE) {\n                $count++;\n                //eDebug($checkdata);\n                if (count($checkdata) != $fieldCount) {\n                    echo \"Line \" . $count . \" of your CSV import file does not contain the correct number of columns.<br/>\";\n                    echo \"Found \" . $fieldCount . \" header fields, but only \" . count($checkdata) . \" field in row \" . $count . \" Please check your file and try again.\";\n                    exit();\n                }\n            }\n        } else {\n            // read in the data lines\n            while (($checkdata = fgetcsv($checkhandle, 10000, \",\")) !== FALSE) {\n                $count++;\n                if (count($checkdata) != $fieldCount) {\n                    echo \"Line \" . $count . \" of your CSV import file does not contain the correct number of columns.<br/>\";\n                    echo \"Found \" . $fieldCount . \" header fields, but only \" . count($checkdata) . \" field in row \" . $count . \" Please check your file and try again.\";\n                    exit();\n                }\n            }\n        }\n\n        fclose($checkhandle);\n        ini_set('auto_detect_line_endings',$line_end);\n\n        echo \"<br/>CSV File passed validation...<br/><br/>Importing....<br/><br/>\";\n        //exit();\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $handle = fopen($file->path, \"r\");\n\n        // read in the header line and discard it\n        $data = fgetcsv($handle, 10000, \",\");\n        //eDebug($data);\n//        $dataset = array();\n\n        //mc=1, nt=2, amm=3\n\n        if ($this->params['type_of_address'][0] == 'mc') {\n            //militaryclothing\n            $db->delete('external_addresses', 'source=1');\n\n        } else if ($this->params['type_of_address'][0] == 'nt') {\n            //nametapes\n            $db->delete('external_addresses', 'source=2');\n        } else if ($this->params['type_of_address'][0] == 'am') {\n            //amazon\n            $db->delete('external_addresses', 'source=3');\n        }\n\n        if ($this->params['type_of_address'][0] == 'am') {\n            // read in the data lines\n            while (($data = fgetcsv($handle, 10000, \"\\t\")) !== FALSE) {\n                //eDebug($data,true);\n                $extAddy = new external_address();\n\n                //eDebug($data);\n                $extAddy->source = 3;\n                $extAddy->user_id = 0;\n                $name = explode(' ', $data[15]);\n                $extAddy->firstname = $name[0];\n                if (isset($name[3])) {\n                    $extAddy->firstname .= ' ' . $name[1];\n                    $extAddy->middlename = $name[2];\n                    $extAddy->lastname = $name[3];\n                } else if (isset($name[2])) {\n                    $extAddy->middlename = $name[1];\n                    $extAddy->lastname = $name[2];\n                } else {\n                    $extAddy->lastname = $name[1];\n                }\n                $extAddy->organization = $data[15];\n                $extAddy->address1 = $data[16];\n                $extAddy->address2 = $data[17];\n                $extAddy->city = $data[19];\n                $state = new geoRegion();\n                $state = $state->findBy('code', trim($data[20]));\n                if (empty($state->id)) {\n                    $state = new geoRegion();\n                    $state = $state->findBy('name', trim($data[20]));\n                }\n                $extAddy->state = $state->id;\n                $extAddy->zip = str_ireplace(\"'\", '', $data[21]);\n                $extAddy->phone = $data[6];\n                $extAddy->email = $data[4];\n                //eDebug($extAddy);\n                $extAddy->save();\n            }\n        } else {\n            // read in the data lines\n            while (($data = fgetcsv($handle, 10000, \",\")) !== FALSE) {\n                eDebug($data);\n                $extAddy = new external_address();\n                if ($this->params['type_of_address'][0] == 'mc') {\n                    $extAddy->source = 1;\n                    $extAddy->user_id = 0;\n                    $name = explode(' ', $data[3]);\n                    $extAddy->firstname = $name[0];\n                    if (isset($name[2])) {\n                        $extAddy->middlename = $name[1];\n                        $extAddy->lastname = $name[2];\n                    } else {\n                        $extAddy->lastname = $name[1];\n                    }\n                    $extAddy->organization = $data[4];\n                    $extAddy->address1 = $data[5];\n                    $extAddy->address2 = $data[6];\n                    $extAddy->city = $data[7];\n                    $state = new geoRegion();\n                    $state = $state->findBy('code', $data[8]);\n                    $extAddy->state = $state->id;\n                    $extAddy->zip = str_ireplace(\"'\", '', $data[9]);\n                    $extAddy->phone = $data[20];\n                    $extAddy->email = $data[21];\n                    //eDebug($extAddy);\n                    $extAddy->save();\n\n                    //Check if the shipping add is same as the billing add\n                    if ($data[5] != $data[14]) {\n                        $extAddy = new external_address();\n                        $extAddy->source = 1;\n                        $extAddy->user_id = 0;\n                        $name = explode(' ', $data[12]);\n                        $extAddy->firstname = $name[0];\n                        if (isset($name[2])) {\n                            $extAddy->middlename = $name[1];\n                            $extAddy->lastname = $name[2];\n                        } else {\n                            $extAddy->lastname = $name[1];\n                        }\n                        $extAddy->organization = $data[13];\n                        $extAddy->address1 = $data[14];\n                        $extAddy->address2 = $data[15];\n                        $extAddy->city = $data[16];\n                        $state = new geoRegion();\n                        $state = $state->findBy('code', $data[17]);\n                        $extAddy->state = $state->id;\n                        $extAddy->zip = str_ireplace(\"'\", '', $data[18]);\n                        $extAddy->phone = $data[20];\n                        $extAddy->email = $data[21];\n                        // eDebug($extAddy, true);\n                        $extAddy->save();\n                    }\n                }\n                if ($this->params['type_of_address'][0] == 'nt') {\n                    //eDebug($data,true);\n                    $extAddy->source = 2;\n                    $extAddy->user_id = 0;\n                    $extAddy->firstname = $data[16];\n                    $extAddy->lastname = $data[17];\n                    $extAddy->organization = $data[15];\n                    $extAddy->address1 = $data[18];\n                    $extAddy->address2 = $data[19];\n                    $extAddy->city = $data[20];\n                    $state = new geoRegion();\n                    $state = $state->findBy('code', $data[21]);\n                    $extAddy->state = $state->id;\n                    $extAddy->zip = str_ireplace(\"'\", '', $data[22]);\n                    $extAddy->phone = $data[23];\n                    $extAddy->email = $data[13];\n                    //eDebug($extAddy);\n                    $extAddy->save();\n                }\n            }\n        }\n        fclose($handle);\n        ini_set('auto_detect_line_endings',$line_end);\n        echo \"Done!\";\n    }\n\n    function nonUnicodeProducts() {\n        global $db, $user;\n\n        $products = $db->selectObjectsIndexedArray('product');\n        $affected_fields = array();\n        $listings = array();\n        $listedProducts = array();\n        $count = 0;\n        //Get all the columns of the product table\n        $columns = $db->getTextColumns('product');\n        foreach ($products as $item) {\n\n            foreach ($columns as $column) {\n                if ($column != 'body' && $column != 'summary' && $column != 'featured_body') {\n                    if (!expString::validUTF($item->$column) || strrpos($item->$column, '?')) {\n                        $affected_fields[] = $column;\n                    }\n                } else {\n                    if (!expString::validUTF($item->$column)) {\n                        $affected_fields[] = $column;\n                    }\n                }\n            }\n\n            if (isset($affected_fields)) {\n                if (count($affected_fields) > 0) {\n                    //Hard coded fields since this is only for displaying\n                    $listedProducts[$count]['id'] = $item->id;\n                    $listedProducts[$count]['title'] = $item->title;\n                    $listedProducts[$count]['model'] = $item->model;\n                    $listedProducts[$count]['sef_url'] = $item->sef_url;\n                    $listedProducts[$count]['nonunicode'] = implode(', ', $affected_fields);\n                    $count++;\n                }\n            }\n            unset($affected_fields);\n        }\n\n        assign_to_template(array(\n            'products' => $listedProducts,\n            'count'    => $count\n        ));\n    }\n\n    function cleanNonUnicodeProducts() {\n        global $db, $user;\n\n        $products = $db->selectObjectsIndexedArray('product');\n        //Get all the columns of the product table\n        $columns = $db->getTextColumns('product');\n        foreach ($products as $item) {\n            //Since body, summary, featured_body can have a ? intentionally such as a link with get parameter.\n            //TO Improved\n            foreach ($columns as $column) {\n                if ($column != 'body' && $column != 'summary' && $column != 'featured_body') {\n                    if (!expString::validUTF($item->$column) || strrpos($item->$column, '?')) {\n                        $item->$column = expString::convertUTF($item->$column);\n                    }\n                } else {\n                    if (!expString::validUTF($item->$column)) {\n                        $item->$column = expString::convertUTF($item->$column);\n                    }\n                }\n            }\n\n            $db->updateObject($item, 'product');\n        }\n\n        redirect_to(array('controller' => 'store', 'action' => 'nonUnicodeProducts'));\n//        $this->nonUnicodeProducts();\n    }\n\n    //This function is being used in the uploadModelaliases page for showing the form upload\n    function uploadModelAliases() {\n        global $db;\n        set_time_limit(0);\n\n        if (isset($_FILES['modelaliases']['tmp_name'])) {\n            if (!empty($_FILES['modelaliases']['error'])) {\n                flash('error', gt('There was an error uploading your file.  Please try again.'));\n//\t\t\t\tredirect_to(array('controller'=>'store','action'=>'uploadModelAliases'));\n                $this->uploadModelAliases();\n            }\n\n            $file = new stdClass();\n            $file->path = $_FILES['modelaliases']['tmp_name'];\n            echo \"Validating file...<br/>\";\n\n            $line_end = ini_get('auto_detect_line_endings');\n            ini_set('auto_detect_line_endings',TRUE);\n            $checkhandle = fopen($file->path, \"r\");\n            // read in the header line\n            $checkdata = fgetcsv($checkhandle, 10000, \",\");\n            $fieldCount = count($checkdata);\n            $count = 1;\n\n            // read in the data lines\n            while (($checkdata = fgetcsv($checkhandle, 10000, \",\")) !== FALSE) {\n                $count++;\n                if (count($checkdata) != $fieldCount) {\n                    echo \"Line \" . $count . \" of your CSV import file does not contain the correct number of columns.<br/>\";\n                    echo \"Found \" . $fieldCount . \" header fields, but only \" . count($checkdata) . \" field in row \" . $count . \" Please check your file and try again.\";\n                    exit();\n                }\n            }\n\n            fclose($checkhandle);\n            ini_set('auto_detect_line_endings',$line_end);\n\n            echo \"<br/>CSV File passed validation...<br/><br/>Importing....<br/><br/>\";\n            $line_end = ini_get('auto_detect_line_endings');\n            ini_set('auto_detect_line_endings',TRUE);\n            $handle = fopen($file->path, \"r\");\n            // read in the header line\n            $data = fgetcsv($handle, 10000, \",\");\n\n            //clear the db\n            $db->delete('model_aliases_tmp');\n            // read in the data lines\n            while (($data = fgetcsv($handle, 10000, \",\")) !== FALSE) {\n\n                $tmp = new stdClass();\n                $tmp->field1 = expString::onlyReadables($data[0]);\n                $tmp->field2 = expString::onlyReadables($data[1]);\n                $db->insertObject($tmp, 'model_aliases_tmp');\n            }\n            fclose($handle);\n            ini_set('auto_detect_line_endings',$line_end);\n            redirect_to(array('controller' => 'store', 'action' => 'processModelAliases'));\n            echo \"Done!\";\n        }\n\n        //check if there are interrupted model alias in the db\n        $res = $db->selectObjectsBySql(\"SELECT * FROM \".$db->prefix.\"model_aliases_tmp WHERE is_processed = 0\");\n        if (!empty($res)) {\n            assign_to_template(array(\n                'continue' => '1'\n            ));\n        }\n    }\n\n    // This function process the uploading of the model aliases in the uploadModelAliases page\n    function processModelAliases($index = 0, $error = '') {\n        global $db;\n\n        //Going next and delete the previous one\n        if (isset($this->params['index'])) {\n            $index = $this->params['index'];\n\n            //if go to the next processs\n            if (isset($this->params['next'])) {\n                $res = $db->selectObjectBySql(\"SELECT * FROM \".$db->prefix.\"model_aliases_tmp LIMIT \" . ($index - 1) . \", 1\");\n                //Update the record in the tmp table to mark it as process\n                $res->is_processed = 1;\n                $db->updateObject($res, 'model_aliases_tmp');\n            }\n        }\n\n        $product_id = '';\n        $autocomplete = '';\n\n        do {\n            $count = $db->countObjects('model_aliases_tmp', 'is_processed=0');\n            $res = $db->selectObjectBySql(\"SELECT * FROM \".$db->prefix.\"model_aliases_tmp LIMIT {$index}, 1\");\n            //Validation\n            //Check the field one\n            if (!empty($res)) {\n                $product_field1 = $db->selectObject(\"product\", \"model='{$res->field1}'\");\n                $product_field2 = $db->selectObject(\"product\", \"model='{$res->field2}'\");\n            }\n            if (!empty($product_field1)) {\n                $product_id = $product_field1->id;\n                //check the other field if it also being used by another product\n                if (!empty($product_field2) && $product_field1->id != $product_field2->id) {\n                    $error = \"Both {$res->field1} and {$res->field2} are models of a product. <br />\";\n                } else {\n                    //Check the field2 if it is already in the model alias\n                    $model_alias = $db->selectObject(\"model_aliases\", \"model='{$res->field2}'\");\n                    if (empty($model_alias) && @$model_alias->product_id != $product_field1->id) {\n                        //Add the first field\n                        $tmp = new  stdClass();\n                        $tmp->model = $res->field1;\n                        $tmp->product_id = $product_field1->id;\n                        $db->insertObject($tmp, 'model_aliases');\n                        //Add the second field\n                        $tmp->model = $res->field2;\n                        $tmp->product_id = $product_field1->id;\n                        $db->insertObject($tmp, 'model_aliases');\n                        //Update the record in the tmp table to mark it as process\n                        $res->is_processed = 1;\n                        $db->updateObject($res, 'model_aliases_tmp');\n\n                    } else {\n                        $error = \"{$res->field2} has already a product alias. <br />\";\n                    }\n                }\n            } elseif (!empty($product_field2)) {\n                $product_id = $product_field2->id;\n                $model_alias = $db->selectObject(\"model_aliases\", \"model='{$res->field1}'\");\n                if (empty($model_alias) && @$model_alias->product_id != $product_field2->id) {\n                    //Add the first field\n                    $tmp = new stdClass();\n                    $tmp->model = $res->field1;\n                    $tmp->product_id = $product_field2->id;\n                    $db->insertObject($tmp, 'model_aliases');\n                    //Add the second field\n                    $tmp->model = $res->field2;\n                    $tmp->product_id = $product_field2->id;\n                    $db->insertObject($tmp, 'model_aliases');\n                    //Update the record in the tmp table to mark it as process\n                    $res->is_processed = 1;\n                    $db->updateObject($res, 'model_aliases_tmp');\n                } else {\n                    $error = \"{$res->field1} has already a product alias. <br />\";\n                }\n            } else {\n                $model_alias1 = $db->selectObject(\"model_aliases\", \"model='{$res->field1}'\");\n                $model_alias2 = $db->selectObject(\"model_aliases\", \"model='{$res->field2}'\");\n\n                if (!empty($model_alias1) || !empty($model_alias2)) {\n                    $error = \"The {$res->field1} and {$res->field2} are already being used by another product.<br />\";\n                } else {\n                    $error = gt(\"No product match found, please choose a product to be alias in the following models below\") . \":<br />\";\n                    $error .= $res->field1 . \"<br />\";\n                    $error .= $res->field2 . \"<br />\";\n                    $autocomplete = 1;\n                }\n            }\n            $index++;\n        } while (empty($error));\n        assign_to_template(array(\n            'count'        => $count,\n            'alias'        => $res,\n            'index'        => $index,\n            'product_id'   => $product_id,\n            'autocomplete' => $autocomplete,\n            'error'        => $error\n        ));\n    }\n\n    // This function save the uploaded processed model aliases in the uploadModelAliases page\n    function saveModelAliases() {\n        global $db;\n\n        $index = $this->params['index'];\n        $title = expString::escape($this->params['product_title']);\n        $product = $db->selectObject(\"product\", \"title='{$title}'\");\n\n        if (!empty($product->id)) {\n            $res = $db->selectObjectBySql(\"SELECT * FROM \".$db->prefix.\"model_aliases_tmp LIMIT \" . ($index - 1) . \", 1\");\n            //Add the first field\n            $tmp = new stdClass();\n            $tmp->model = $res->field1;\n            $tmp->product_id = $product->id;\n            $db->insertObject($tmp, 'model_aliases');\n            //Add the second field\n            $tmp->model = $res->field2;\n            $tmp->product_id = $product->id;\n            $db->insertObject($tmp, 'model_aliases');\n\n            //if the model is empty, update the product table so that it will used the field 1 as its primary model\n            if (empty($product->model)) {\n                $product->model = $res->field1;\n                $db->updateObject($product, 'product');\n            }\n\n            //Update the record in the tmp table to mark it as process\n            $res->is_processed = 1;\n            $db->updateObject($res, 'model_aliases_tmp');\n            flash(\"message\", gt(\"Product successfully Saved.\"));\n            redirect_to(array('controller' => 'store', 'action' => 'processModelAliases', 'index' => $index));\n        } else {\n            flash(\"error\", gt(\"Product title is invalid.\"));\n            redirect_to(array('controller' => 'store', 'action' => 'processModelAliases', 'index' => $index - 1, 'error' => 'Product title is invalid.'));\n        }\n    }\n\n    // This function delete all the already processed model aliases in the uploadModelAliases page\n    function deleteProcessedModelAliases() {\n        global $db;\n\n        $db->delete('model_aliases_tmp', 'is_processed=1');\n        redirect_to(array('controller' => 'store', 'action' => 'processModelAliases'));\n    }\n\n    // This function show the form of model alias to be edit or add in the product edit page\n    function edit_model_alias() {\n        global $db;\n\n        if (isset($this->params['id'])) {\n            $model_alias = $db->selectObject('model_aliases', 'id =' . $this->params['id']);\n            assign_to_template(array(\n                'model_alias' => $model_alias\n            ));\n        } else {\n            assign_to_template(array(\n                'product_id' => $this->params['product_id']\n            ));\n        }\n    }\n\n    // This function update or add the model alias in the product edit page\n    function update_model_alias() {\n        global $db;\n\n        if (empty($this->params['id'])) {\n            $obj = new stdClass();\n            $obj->model = $this->params['model'];\n            $obj->product_id = $this->params['product_id'];\n            $db->insertObject($obj, 'model_aliases');\n\n        } else {\n            $model_alias = $db->selectObject('model_aliases', 'id =' . $this->params['id']);\n            $model_alias->model = $this->params['model'];\n            $db->updateObject($model_alias, 'model_aliases');\n        }\n\n        expHistory::back();\n    }\n\n    // This function delete the model alias in the product edit page\n    function delete_model_alias() {\n        global $db;\n\n        if (empty($this->params['id'])) return false;\n        $db->delete('model_aliases', 'id =' . $this->params['id']);\n\n        expHistory::back();\n    }\n\n    function setup_wizard() {\n\n    }\n\n    function import() {\n        assign_to_template(array(\n            'type' => $this\n        ));\n    }\n\n    function importProduct($file=null) {\n        if (empty($file->path)) {\n            $file = new stdClass();\n            $file->path = $_FILES['import_file']['tmp_name'];\n        }\n        if (empty($file->path)) {\n            echo gt('Not a Product Import CSV File');\n            return;\n        }\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $handle = fopen($file->path, \"r\");\n\n        // read in the header line\n        $header = fgetcsv($handle, 10000, \",\");\n        if (!($header[0] == 'id' || $header[0] == 'model')) {\n            echo gt('Not a Product Import CSV File');\n            return;\n        }\n\n        $count = 1;\n        $errorSet = array();\n        $product = null;\n        /*  original order of columns\n            0=id\n            1=parent_id\n            2=child_rank\n            3=title\n            4=body\n            5=model\n            6=warehouse_location\n            7=sef_url\n//FIXME        this is where canonical should be\n            8=meta_title\n            9=meta_keywords\n            10=meta_description\n            11=tax_class_id\n            12=quantity\n            13=availability_type\n            14=base_price\n            15=special_price\n            16=use_special_price\n            17=active_type\n            18=product_status_id\n            19=category1\n            20=category2\n            21=category3\n            22=category4\n            ..\n            30=category12\n            31=surcharge\n            32=rank category_rank\n            33=feed_title\n            34=feed_body\n            35=weight\n            36=height\n            37=width\n            38=length\n            39=companies_id\n            40=image1 url to mainimage to download\n            41=image2 url to additional image to download\n            ..\n            44=image5 url to additional image to download\n*/\n\n        // read in the data lines\n//        while (($data = fgetcsv($handle, 10000, \",\")) !== FALSE) {\n        while (($row = fgetcsv($handle, 10000, \",\")) !== FALSE) {\n            $count++;\n            $createCats = array();\n            $createCatsRank = array();\n            $data = array_combine($header, $row);\n\n            //eDebug($data, true);\n            if ($header[0] == 'id') {\n                if (isset($data['id']) && $data['id'] != 0) {\n                    $product = new product($data['id'], false, false);\n                    if (empty($product->id)) {\n                        $errorSet[$count] = gt(\"Is not an existing product ID.\");\n                        continue;\n                    }\n                } else {\n                    //$errorSet[$count] = \"Product ID not supplied.\";\n                    //continue;\n                    $product = new product();\n                    //$product->save(false);\n                }\n            } elseif ($header[0] == 'model') {\n                if (!empty($data['model'])) {\n                    $p = new product();\n                    $product = $p->find('first','model=\"' . $data['model'] . '\"');\n                    if (empty($product->id)) {\n                        $errorSet[$count] = gt(\"Is not an existing product SKU/Model.\");\n                        continue;\n                    }\n                } else {\n                    $product = new product();\n                }\n            }\n            if ($product->product_type != 'product') {\n                $errorSet[$count] = gt(\"Existing product is wrong product type.\");\n                continue;\n            }\n\n            // new products must have a title\n            if (empty($product->id)) {  // new product require mandatory values\n                $checkTitle = trim($data['title']);\n                if (empty($checkTitle)) {\n                    $errorSet[$count] = gt(\"No product name (title) supplied.\");\n                    continue;\n                }\n                $product->minimum_order_quantity = 1;\n            }\n\n            // parse $data columns\n            foreach ($data as $key=>$value) {\n                $value = trim($value);\n                switch ($key) {\n                    case 'parent_id': // integer\n                    case 'child_rank':\n                    case 'tax_class_id':\n                    case 'quantity':\n                    case 'availability_type':\n                    case 'use_special_price':\n                    case 'active_type':\n                    case 'product_status_id':\n                        $product->$key = intval($value);\n                        break;\n                    case 'companies_id':\n                        if (is_numeric($value)) {\n                            $product->$key = intval($value);\n                        } elseif (!empty($value)) {  // it's a company name, not a company id#\n                            $co = new company();\n                            $company = $co->find('first', 'title=' . $value);\n                            if (empty($company->id)) {\n                                $params['title'] = $value;\n                                $company->update();\n                            }\n                            $product->$key = $company->id;\n                        }\n                        break;\n                    case 'sef_url':\n                        $product->$key = stripslashes(stripslashes($value));\n                        if (!is_bool(expValidator::uniqueness_of('sef_url', $product, array()))) {\n                            $product->makeSefUrl();\n                        }\n                        break;\n                    case 'title':  // string\n                    case 'model':\n                    case 'warehouse_location':\n                    case 'meta_title':\n                    case 'meta_keywords':\n                    case 'meta_description':\n                    case 'feed_title':\n                    case 'feed_body':\n                        $product->$key = stripslashes(stripslashes($value));\n                        break;\n                    case 'body':\n                        $product->$key = utf8_encode(stripslashes(expString::parseAndTrimImport(($value), true)));\n                        break;\n                    case 'base_price':  // float\n                    case 'special_price':\n                    case 'surcharge':\n                    case 'weight':\n                    case 'height':\n                    case 'width':\n                    case 'length':\n                        $product->$key = floatval($value);\n                        break;\n                    case 'image1':\n                    case 'image2':\n                    case 'image3':\n                    case 'image4':\n                    case 'image5':\n                        if (!empty($value)) {\n                            $product->save(false);\n                            if (is_integer($value)) {\n                                $_objFile = new expFile ($value);\n                            } else {\n                                // import image from url\n                                $_destFile = basename($value);  // get filename from end of url\n                                $_destDir = UPLOAD_DIRECTORY_RELATIVE;\n                                $_destFullPath = BASE . $_destDir . $_destFile;\n                                if (file_exists($_destFullPath)) {\n                                    $_destFile = expFile::resolveDuplicateFilename($_destFullPath);\n                                    $_destFullPath = BASE . $_destDir . $_destFile;\n                                }\n\n                                expCore::saveData($value, $_destFullPath);  // download the image\n\n                                if (file_exists($_destFullPath)) {\n                                    $__oldumask = umask(0);\n                                    chmod($_destFullPath, octdec(FILE_DEFAULT_MODE_STR + 0));\n                                    umask($__oldumask);\n\n                                    // Create a new expFile Object\n                                    $_fileParams = array('filename' => $_destFile, 'directory' => $_destDir);\n                                    $_objFile = new expFile ($_fileParams);\n                                    $_objFile->save();\n                                }\n                            }\n                            // attach product images expFile object\n                            if (!empty($_objFile->id)) {\n                                if ($key == 'image1') {\n                                    $product->attachItem($_objFile, 'mainimage');\n                                } else {\n                                    $product->attachItem($_objFile, 'images', false);\n                                }\n                            }\n                        }\n                        break;\n                    case 'category1':\n                    case 'category2':\n                    case 'category3':\n                    case 'category4':\n                    case 'category5':\n                    case 'category6':\n                    case 'category7':\n                    case 'category8':\n                    case 'category9':\n                    case 'category10':\n                    case 'category11':\n                    case 'category12':\n                        if ($product->parent_id == 0) {\n//                            $rank = !empty($data['rank']) ? $data['rank'] : 1;\n                            $rank = intval(str_replace('category', '', $key));\n//                            if (!empty($value)) $result = storeCategory::parseCategory($value);\n                            if (!empty($value)) $result = storeCategory::importCategoryString($value);\n                            else continue;\n\n//                            if (is_numeric($result)) {\n                            if ($result) {\n                                $createCats[] = $result;\n                                $createCatsRank[$result] = $rank;\n                            } else {\n                                $errorSet[$count][] = $result;\n                                continue 2;\n                            }\n                        }\n                        break;\n                    default:\n                        if (property_exists('product', $key)) {\n                            $product->key = $value;\n                        }\n                }\n            }\n\n//            $checkTitle = trim($data['title']);\n//            if (empty($checkTitle)) {\n//                $errorSet[$count] = gt(\"No product name (title) supplied, skipping this record...\");\n//                continue;\n//            }\n//            $product->parent_id = $data[1];\n//            $product->child_rank = $data[2];\n//            $product->title = stripslashes(stripslashes($data[3]));\n//            $product->body = utf8_encode(stripslashes(expString::parseAndTrimImport(($data[4]), true)));\n//            //$product->body = utf8_encode(stripslashes(stripslashes(($data[4]))));\n//            $product->model = stripslashes(stripslashes($data[5]));\n//            $product->warehouse_location = stripslashes(stripslashes($data[6]));\n//            $product->sef_url = stripslashes(stripslashes($data[7]));\n////FIXME        this is where canonical should be\n//            $product->meta_title = stripslashes(stripslashes($data[8]));\n//            $product->meta_keywords = stripslashes(stripslashes($data[9]));\n//            $product->meta_description = stripslashes(stripslashes($data[10]));\n//\n//            $product->tax_class_id = $data[11];\n//\n//            $product->quantity = $data[12];\n//\n//            $product->availability_type = $data[13];\n//\n//            $product->base_price = $data[14];\n//            $product->special_price = $data[15];\n//            $product->use_special_price = $data[16];\n//            $product->active_type = $data[17];\n//            $product->product_status_id = $data[18];\n//\n//            $product->surcharge = $data[31];\n//            $product->feed_title = stripslashes(stripslashes($data[33]));\n//            $product->feed_body = stripslashes(stripslashes($data[34]));\n//            if (!empty($data[35])) $product->weight = $data[35];\n//            if (!empty($data[36])) $product->height = $data[36];\n//            if (!empty($data[37])) $product->width = $data[37];\n//            if (!empty($data[38])) $product->length = $data[38];\n//            if (!empty($data[39])) $product->companies_id = $data[39];\n//            if (!empty($data[40])) {\n//                // import image from url\n//                $_destFile = basename($data[40]);  // get filename from end of url\n//                $_destDir = UPLOAD_DIRECTORY_RELATIVE;\n//                $_destFullPath = BASE . $_destDir . $_destFile;\n//                if (file_exists($_destFullPath)) {\n//                    $_destFile = expFile::resolveDuplicateFilename($_destFullPath);\n//                    $_destFullPath = BASE . $_destDir . $_destFile;\n//                }\n//\n//                expCore::saveData($data[40], $_destFullPath);  // download the image\n//\n//                if (file_exists($_destFullPath)) {\n//                    $__oldumask = umask(0);\n//                    chmod($_destFullPath, octdec(FILE_DEFAULT_MODE_STR + 0));\n//                    umask($__oldumask);\n//\n//                    // Create a new expFile Object\n//                    $_fileParams = array('filename' => $_destFile, 'directory' => $_destDir);\n//                    $_objFile = new expFile ($_fileParams);\n//                    $_objFile->save();\n//                    // attach/replace product main image with new expFile object\n//                    $product->attachItem($_objFile, 'mainimage');\n//                }\n//            }\n//            for ($i=41; $i<=44; $i++) {\n//                if (!empty($data[$i])) {\n//                    // import image from url\n//                    $_destFile = basename($data[$i]);  // get filename from end of url\n//                    $_destDir = UPLOAD_DIRECTORY_RELATIVE;\n//                    $_destFullPath = BASE . $_destDir . $_destFile;\n//                    if (file_exists($_destFullPath)) {\n//                        $_destFile = expFile::resolveDuplicateFilename($_destFullPath);\n//                        $_destFullPath = BASE . $_destDir . $_destFile;\n//                    }\n//\n//                    expCore::saveData($data[$i], $_destFullPath);  // download the image\n//\n//                    if (file_exists($_destFullPath)) {\n//                        $__oldumask = umask(0);\n//                        chmod($_destFullPath, octdec(FILE_DEFAULT_MODE_STR + 0));\n//                        umask($__oldumask);\n//\n//                        // Create a new expFile Object\n//                        $_fileParams = array('filename' => $_destFile, 'directory' => $_destDir);\n//                        $_objFile = new expFile ($_fileParams);\n//                        $_objFile->save();\n//                        // attach product additional images with new expFile object\n//                        $product->attachItem($_objFile, 'images', false);\n//                    }\n//                }\n//            }\n//\n//            if (empty($product->id)) $product->minimum_order_quantity = 1;\n//\n//            if ($product->parent_id == 0) {\n//                $createCats = array();\n//                $createCatsRank = array();\n//                for ($x = 19; $x <= 30; $x++) {\n//                    if (!empty($data[$x])) $result = storeCategory::parseCategory($data[$x]);\n//                    else continue;\n//\n//                    if (is_numeric($result)) {\n//                        $createCats[] = $result;\n//                        $createCatsRank[$result] = $data[32];\n//                    } else {\n//                        $errorSet[$count][] = $result;\n//                        continue 2;\n//                    }\n//                }\n//            }\n\n            //NOTE: we manipulate existing user input fields to store them properly?\n            //eDebug($createCats,true);\n            if (!empty($product->user_input_fields) && is_array($product->user_input_fields))\n                $product->user_input_fields = serialize($product->user_input_fields);\n            //eDebug($product->user_input_fields);\n\n            if (!empty($product->user_input_fields) && !is_array($product->user_input_fields))\n                $product->user_input_fields = str_replace(\"'\", \"\\'\", $product->user_input_fields);\n\n            //eDebug($product->user_input_fields,true);\n            $product->save(true);\n            //eDebug($product->body);\n\n            //sort order and categories\n            if ($product->parent_id == 0) {\n                $product->saveCategories($createCats, $createCatsRank);\n                //eDebug($createCatsRank);\n            }\n            echo \"Successfully imported/updated row \" . $count . \", product: \" . $product->title . \"<br/>\";\n            //eDebug($product);\n\n        }\n\n        if (count($errorSet)) {\n            echo \"<br/><hr><br/><div style='color:red'><strong>\".gt('The following records were NOT imported').\":</strong><br/>\";\n            foreach ($errorSet as $rownum => $err) {\n                echo \"Row: \" . $rownum;\n                if (is_array($err)) {\n                    foreach ($err as $e) {\n                        echo \" -- \" . $e . \"<br/>\";\n                    }\n                } else echo \" -- \" . $err . \"<br/>\";\n            }\n            echo \"</div>\";\n        }\n\n        fclose($handle);\n        ini_set('auto_detect_line_endings',$line_end);\n\n        // update search index\n        $this->addContentToSearch();\n    }\n\n}\n\n?>", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package Modules\n */\n\nclass fileController extends expController {\n    public $basemodel_name = \"expFile\";\n    protected $remove_permissions = array(\n        'delete'\n    );\n//    protected $manage_permissions = array(\n//        'picker'=>'Manage Files',\n//        'import'=>'Import',\n//        'export'=>'Export',\n//    );\n    public $requires_login = array(\n        'picker'=>'You must be logged in to perform this action',\n        'adder'=>'You must be logged in to perform this action',\n        'addit'=>'You must be logged in to perform this action',\n        'batchDelete'=>'You must be logged in to perform this action',\n        'createFolder'=>'You must be logged in to perform this action',\n        'deleter'=>'You must be logged in to perform this action',\n        'deleteit'=>'You must be logged in to perform this action',\n        'edit'=>'You must be logged in to perform this action',\n        'quickUpload'=>'You must be logged in to perform this action',\n        'upload'=>'You must be logged in to perform this action',\n        'uploader'=>'You must be logged in to perform this action',\n    );\n\n    static function displayname() { return gt(\"File Manager\"); }\n    static function description() { return gt(\"Add and manage Exponent Files\"); }\n    static function author() { return \"Phillip Ball - OIC Group, Inc\"; }\n\n    public function manage_fixPaths() {\n        // fixes file directory issues when the old file class was used to save record\n        // where the trailing forward slash was not added. This simply checks to see\n        // if the trailing / is there, if not, it adds it.\n\n        $file = new expFile();\n        $files = $file->find('all');\n\n        foreach ($files as $key=>$file) {\n            if (substr($files[$key]->directory,-1,1)!=\"/\") {\n                $files[$key]->directory = $files[$key]->directory.'/';\n            }\n            $files[$key]->save();\n        }\n\n//        eDebug($files,true);\n    }\n\n    public function picker() {\n//        global $user;\n\n        $expcat = new expCat();\n        $cats = $expcat->find('all','module=\"file\"');\n        $jscatarray = array();\n        $catarray = array();\n        $catarray[] = 'Root Folder';\n        foreach ($cats as $key=>$cat) {\n            $jscatarray[$key]['label'] = $cat->title;\n            $jscatarray[$key]['value'] = $cat->id;\n            $catarray[$cat->id] = $cat->title;\n        }\n        $jsuncat['label'] = 'Root';\n        $jsuncat['value'] = null;\n        array_unshift($jscatarray,$jsuncat);\n        $catarray['-1'] = 'All Folders';\n        if (strstr($this->params['update'],'?')) {\n            $update = explode('?',$this->params['update']);\n            if (!empty($update[0])) $this->params['update'] = $update[0];\n        }\n        assign_to_template(array(\n            'update'=>$this->params['update'],\n            'filter'=>!empty($this->params['filter'])?$this->params['filter']:null,\n            'cats'=>$catarray,\n            'jscats'=>json_encode($jscatarray)\n        ));\n    }\n\n    public function uploader() {\n        global $user;\n        //expHistory::set('manageable', $this->params);\n        flash('message',gt('Upload size limit').': '.ini_get('upload_max_filesize'));\n        if(intval(ini_get('upload_max_filesize'))!=intval(ini_get('post_max_size')) && $user->isAdmin()){\n            flash('error',gt('In order for the uploader to work correctly, \\'\"post_max_size\\' and \\'upload_max_filesize\\' within your php.ini file must match one another'));\n        }\n\n        $expcat = new expCat();\n        $cats = $expcat->find('all','module=\"file\"');\n        $catarray = array();\n        $catarray[] = 'Root Folder';\n        foreach ($cats as $cat) {\n            $catarray[$cat->id] = $cat->title;\n        }\n        assign_to_template(array(\n            'update'=>$this->params['update'],\n            \"upload_size\"=>ini_get('upload_max_filesize'),\n            \"post_size\"=>ini_get('post_max_size'),\n            \"bmax\"=>intval(ini_get('upload_max_filesize')/1024*1000000000),\n            'cats'=>$catarray,\n        ));\n    }\n\n    /**\n     * Returns attached file view template configuration settings template\n     *\n     */\n    public function get_view_config() {\n        global $template;\n\n        // set paths we will search in for the view\n        $paths = array(\n            BASE.'themes/'.DISPLAY_THEME.'/modules/common/views/file/configure',\n            BASE.'framework/modules/common/views/file/configure',\n        );\n\n        foreach ($paths as $path) {\n            $view = $path.'/'.$this->params['view'].'.tpl';\n            if (is_readable($view)) {\n                if (bs(true)) {\n                    $bstrapview = $path.'/'.$this->params['view'].'.bootstrap.tpl';\n                    if (file_exists($bstrapview)) {\n                        $view = $bstrapview;\n                    }\n                }\n                if (bs3(true)) {\n                    $bstrapview = $path.'/'.$this->params['view'].'.bootstrap3.tpl';\n                    if (file_exists($bstrapview)) {\n                        $view = $bstrapview;\n                    }\n                }\n                $template = new controllertemplate($this, $view);\n                $ar = new expAjaxReply(200, 'ok');\n\t\t        $ar->send();\n            }\n        }\n    }\n\n    /**\n     * Returns view template configuration settings view template\n     *\n     */\n    public function get_module_view_config() {\n        global $template;\n\n//        $controller = new $this->params['mod'];\n        $controller = expModules::getController($this->params['mod']);\n        // set paths we will search in for the view\n        $paths = array(\n//            BASE.'themes/'.DISPLAY_THEME.'/modules/'.$this->params['mod'].'/views/'.$this->params['mod'].'/configure',\n//            BASE.'framework/modules/'.$this->params['mod'].'/views/'.$this->params['mod'].'/configure',\n            $controller->viewpath.'/configure',\n  \t        BASE.'themes/'.DISPLAY_THEME.'/modules/'.$controller->relative_viewpath.'/configure'\n        );\n\n        $config_found = false;\n        foreach ($paths as $path) {\n            $view = $path.'/'.$this->params['view'].'.config';\n            if (is_readable($view)) {\n                if (bs(true)) {\n                    $bstrapview = $path.'/'.$this->params['view'].'.bootstrap.config';\n                    if (file_exists($bstrapview)) {\n                        $view = $bstrapview;\n                    }\n                }\n                if (bs3(true)) {\n                    $bstrapview = $path.'/'.$this->params['view'].'.bootstrap3.config';\n                    if (file_exists($bstrapview)) {\n                        $view = $bstrapview;\n                    }\n                }\n                $template = new controllertemplate($this, $view);\n                $config_found = true;\n            }\n        }\n        $parts = explode('_', $this->params['view']);\n        if (!$config_found && ($this->params['view'] != $parts[0])) {\n            foreach ($paths as $path) {\n                $actview = $path.'/'.$parts[0].'.config';\n                if (is_readable($actview)) {\n                    if (bs(true)) {\n                        $bstrapview = $path . '/' . $actview . '.bootstrap.config';\n                        if (file_exists($bstrapview)) {\n                            $actview = $bstrapview;\n                        }\n                    }\n                    if (bs3(true)) {\n                        $bstrapview = $path . '/' . $actview . '.bootstrap3.config';\n                        if (file_exists($bstrapview)) {\n                            $actview = $bstrapview;\n                        }\n                    }\n                    $template = new controllertemplate($this, $actview);\n                    $config_found = true;\n                }\n            }\n        }\n        if (!$config_found) {\n            echo \"<p>\".gt('There Are No View Specific Settings').\"</p>\";\n            $template = expTemplate::get_common_template('blank', null);\n        }\n\n//        expTemplate::get_config_template($this);\n        $ar = new expAjaxReply(200, 'ok');\n        $ar->send();\n    }\n\n    /**\n     * Get a file record by id or pathname and return it as JSON via Ajax\n     */\n    public function getFile() {\n        if (is_numeric($this->params['id'])) {\n            $file = new expFile($this->params['id']);\n        } else {\n            $efile = new expFile();\n            $path = str_replace(BASE, '', $this->params['id']);\n            $path = str_replace('\\\\', '/', $path);\n            $file = $efile->find('first','directory=\"'.dirname($path).'/'.'\" AND filename=\"'.basename($path).'\"');\n        }\n        $ar = new expAjaxReply(200, 'ok', $file);\n        $ar->send();\n    }\n\n    public function getFilesByJSON() {\n        global $user;\n\n        $modelname = $this->basemodel_name;\n        $results = 25; // default get all\n        $startIndex = 0; // default start at 0\n//        $sort = null; // default don't sort\n//        $dir = 'asc'; // default sort dir is asc\n//        $sort_dir = SORT_ASC;\n\n        // How many records to get?\n        if(strlen($this->params['results']) > 0) {\n            $results = intval($this->params['results']);\n        }\n\n        // Start at which record?\n        if(strlen($this->params['startIndex']) > 0) {\n            $startIndex = intval($this->params['startIndex']);\n        }\n\n        // Sorted?\n        if(strlen($this->params['sort']) > 0) {\n            if ($this->params['sort'] == 'cat') {\n                $sort = 'id';\n            } else {\n                $sort = expString::escape($this->params['sort']);\n            }\n//            if ($sort = 'id') $sort = 'filename';\n        }\n\n        // Sort dir?\n        if (($this->params['dir'] == 'false') || ($this->params['dir'] == 'desc') || ($this->params['dir'] == 'yui-dt-desc')) {\n            $dir = 'desc';\n            $sort_dir = SORT_DESC;\n        } else {\n            $dir = 'asc';\n            $sort_dir = SORT_ASC;\n        }\n        $totalrecords = 0;\n\n        if (!empty($this->params['query'])) {\n            $this->params['query'] = expString::escape($this->params['query']);\n            $filter = '';\n            if (!$user->isAdmin()) {\n                $filter = \"(poster=\".$user->id.\" OR shared=1) AND \";\n            };\n//            if ($this->params['update']=='ck' || $this->params['update']=='tiny') {\n            if (!empty($this->params['filter']) && $this->params['filter'] == 'image') {\n                $filter .= \"is_image=1 AND \";\n            }\n\n//            $this->params['query'] = expString::sanitize($this->params['query']);\n//            $totalrecords = $this->$modelname->find('count',\"filename LIKE '%\".$this->params['query'].\"%' OR title LIKE '%\".$this->params['query'].\"%' OR alt LIKE '%\".$this->params['query'].\"%'\");\n//            $files = $this->$modelname->find('all',$filter.\"filename LIKE '%\".$this->params['query'].\"%' OR title LIKE '%\".$this->params['query'].\"%' OR alt LIKE '%\".$this->params['query'].\"%'\".$imagesOnly,$sort.' '.$dir, $results, $startIndex);\n            $files = $this->$modelname->find('all',$filter.\"(filename LIKE '%\".$this->params['query'].\"%' OR title LIKE '%\".$this->params['query'].\"%' OR alt LIKE '%\".$this->params['query'].\"%')\",$sort.' '.$dir);\n\n            //FiXME we need to get all records then group by cat, then trim/paginate\n            $querycat = !empty($this->params['cat']) ? $this->params['cat'] : '0';\n            $groupedfiles = array();\n            foreach ($files as $key=>$file) {\n                $filecat = !empty($file->expCat[0]->id) ? $file->expCat[0]->id : 0;\n                if (($querycat == $filecat || $querycat == -1)) {\n                    $totalrecords++;\n                    if (count($groupedfiles) < ($startIndex + $results)) {\n                        $groupedfiles[$key] = $files[$key];\n                        if (!empty($file->expCat[0]->title)) {\n                            $groupedfiles[$key]->cat = $file->expCat[0]->title;\n                            $groupedfiles[$key]->catid = $file->expCat[0]->id;\n                        }\n                        $tmpusr = new user($file->poster);\n                        $groupedfiles[$key]->user = new stdClass();\n                        $groupedfiles[$key]->user->firstname = $tmpusr->firstname;\n                        $groupedfiles[$key]->user->lastname = $tmpusr->lastname;\n                        $groupedfiles[$key]->user->username = $tmpusr->username;\n                    }\n                }\n            }\n            $groupedfiles = array_values(array_filter($groupedfiles));\n            $files = array_slice($groupedfiles,$startIndex,$results);\n\n            $returnValue = array(\n                'recordsReturned'=>count($files),\n                'totalRecords'=>$totalrecords,\n                'startIndex'=>$startIndex,\n                'sort'=>$sort,\n                'dir'=>$dir,\n                'pageSize'=>$results,\n                'records'=>$files\n            );\n        } else {\n            if (!$user->isAdmin()) {\n                $filter = \"(poster=\".$user->id.\" OR shared=1)\";\n            };\n//            if ($this->params['update']=='ck' || $this->params['update']=='tiny') {\n            if (!empty($this->params['filter']) && $this->params['filter'] == 'image') {\n                $filter .= !empty($filter) ? \" AND \" : \"\";\n                $filter .= \"is_image=1\";\n            }\n\n//            $totalrecords = $this->$modelname->find('count',$filter);\n//            $files = $this->$modelname->find('all',$filter,$sort.' '.$dir, $results, $startIndex);\n            $files = $this->$modelname->find('all', $filter, $sort.' '.$dir);\n\n            $groupedfiles = array();\n            foreach ($files as $key=>$file) {\n                if (empty($file->expCat[0]->title)) {\n                    $totalrecords++;\n                    if (count($groupedfiles) < ($startIndex + $results)) {\n                        $groupedfiles[$key] = $files[$key];\n    //                    $files[$key]->cat = $file->expCat[0]->title;\n    //                    $files[$key]->catid = $file->expCat[0]->id;\n                        $tmpusr = new user($file->poster);\n                        $groupedfiles[$key]->user = new stdClass();\n                        $groupedfiles[$key]->user->firstname = $tmpusr->firstname;\n                        $groupedfiles[$key]->user->lastname = $tmpusr->lastname;\n                        $groupedfiles[$key]->user->username = $tmpusr->username;\n                    }\n                }\n            }\n            $groupedfiles = array_values(array_filter($groupedfiles));\n            $files = array_slice($groupedfiles,$startIndex,$results);\n\n            $returnValue = array(\n                'recordsReturned'=>count($files),\n                'totalRecords'=>$totalrecords,\n                'startIndex'=>$startIndex,\n                'sort'=>$sort,\n                'dir'=>$dir,\n                'pageSize'=>$results,\n                'records'=>$files\n            );\n\n        }\n\n        echo json_encode($returnValue);\n    }\n\n    /**\n     * create a new virtual folder in response to an ajax request\n     * return updated list of virtual folders in response to an ajax request\n     */\n    public function createFolder() {\n        if (!empty($this->params['folder'])) {\n            $expcat = new expCat($this->params['folder']);\n            if (empty($expcat->id)) {\n                $expcat->module = 'file';\n                $expcat->title = $this->params['folder'];\n                $expcat->update();\n            }\n//            $this->params['module'] = 'file';\n//            $this->params['title'] = $this->params['folder'];\n//            parent::update();\n            $cats = $expcat->find('all','module=\"file\"','rank');\n            $catarray = array();\n            $catarray[] = 'Root Folder';\n            foreach ($cats as $cat) {\n                $catarray[$cat->id] = $cat->title;\n            }\n            echo json_encode($catarray);\n        }\n    }\n\n    public function delete() {\n//        global $db,$user;\n        global $user;\n\n        $file = new expFile($this->params['id']);\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $file->delete();\n            if (unlink($file->directory.$file->filename)) {\n                flash('message',$file->filename.' '.gt('was successfully deleted'));\n            } else {\n                flash('error',$file->filename.' '.gt('was deleted from the database, but could not be removed from the file system.'));\n            }\n        } else {\n            flash('error',$file->filename.' '.gt('wasn\\'t deleted because you don\\'t own the file.'));\n        }\n        redirect_to(array(\"controller\"=>'file',\"action\"=>'picker',\"ajax_action\"=>1,\"update\"=>$this->params['update'],\"filter\"=>$this->params['filter']));\n    }\n\n    public function deleter() {\n//        global $db;\n\n        $notafile = array();\n//        $files = $db->selectObjects('expFiles',1);\n        foreach (expFile::selectAllFiles() as $file) {\n            if (!is_file(BASE.$file->directory.$file->filename)) {\n                $notafile[$file->id] = $file;\n            }\n        }\n        assign_to_template(array(\n            'files'=>$notafile\n        ));\n    }\n\n    public function deleteit() {\n        global $user;\n        if (!empty($this->params['deleteit'])) {\n            foreach ($this->params['deleteit'] as $file) {\n                $delfile = new expFile($file);\n                if ($user->id==$delfile->poster || $user->isAdmin()) {\n                    $delfile->delete();\n                    flash('error',$delfile->filename.' '.gt('was deleted from the database.'));\n                }\n            }\n        }\n        redirect_to(array(\"controller\"=>'file',\"action\"=>'picker',\"ajax_action\"=>1,\"update\"=>$this->params['update'],\"filter\"=>$this->params['filter']));\n    }\n\n    public function batchDelete() {\n        global $user;\n\n        $error = false;\n//        if (get_magic_quotes_gpc()) $this->params['files'] = stripslashes($this->params['files']);  // magic quotes fix\n        $this->params['files'] = stripslashes($this->params['files']);\n        $files = json_decode($this->params['files']);\n        switch (json_last_error()) {  //FIXME json error checking/reporting, may no longer be needed\n            case JSON_ERROR_NONE:\n            break;\n            case JSON_ERROR_DEPTH:\n                $error = 'JSON - Maximum stack depth exceeded';\n            break;\n            case JSON_ERROR_STATE_MISMATCH:\n                $error = 'JSON - Underflow or the modes mismatch';\n            break;\n            case JSON_ERROR_CTRL_CHAR:\n                $error = 'JSON - Unexpected control character found';\n            break;\n            case JSON_ERROR_SYNTAX:\n                $error = 'JSON - Syntax error, malformed JSON';\n            break;\n            case JSON_ERROR_UTF8:\n                $error = 'JSON - Malformed UTF-8 characters, possibly incorrectly encoded';\n            break;\n            default:\n                $error = 'JSON - Unknown error';\n            break;\n        }\n\n        if (empty($error)) foreach ($files as $file) {\n            $delfile = new expFile($file->id);\n            if ($user->id==$delfile->poster || $user->isAdmin()) {\n                $delfile->delete();\n                unlink($delfile->directory.$delfile->filename);\n            } else {\n                $error = gt(\"you didn't have permission\");\n            }\n        }\n        if (!empty($error)) {\n            $ar = new expAjaxReply(300, gt(\"Some files were NOT deleted because\") . ' ' . $error);\n        } else {\n            $ar = new expAjaxReply(200, gt('Your files were deleted successfully'), $file);\n        }\n        $ar->send();\n    }\n\n    public function adder() {\n        global $db;\n\n        $notindb = array();\n        $allfiles = expFile::listFlat(BASE.'files',true,null,array(),BASE);\n        foreach ($allfiles as $path=>$file) {\n            if ($file[0] != '.') {\n//                $found = false;\n                $npath = preg_replace('/'.$file.'/','',$path, 1);\n//                $dbfiles = $db->selectObjects('expFiles',\"filename='\".$file.\"' AND directory='\".$npath.\"'\");\n                $dbfile = $db->selectObject('expFiles',\"filename='\".$file.\"' AND directory='\".$npath.\"'\");\n//                foreach ($dbfiles as $dbfile) {\n//                    if (!empty($dbfile)) $found = ($dbfile->directory == str_replace($file,'',$path));\n//                }\n//                if (!$found) {\n//                    $notindb[$path] = $file;\n//                }\n                if (empty($dbfile)) {\n                    $notindb[$path] = $file;\n                }\n            }\n        }\n        assign_to_template(array(\n            'files'=>$notindb\n        ));\n    }\n\n    public function addit() {\n        foreach ($this->params['addit'] as $file) {\n            $newfile = new expFile(array('directory'=>dirname($file).'/','filename'=>basename($file)));\n            $newfile->posted = $newfile->last_accessed = filemtime($file);\n            $newfile->save();\n            flash('message',$newfile->filename.' '.gt('was added to the File Manager.'));\n        }\n        redirect_to(array(\"controller\"=>'file',\"action\"=>'picker',\"ajax_action\"=>1,\"update\"=>$this->params['update'],\"filter\"=>$this->params['filter']));\n    }\n\n    public function upload() {\n\n        // upload the file, but don't save the record yet...\n        if ($this->params['resize'] != 'false') {\n            $maxwidth = $this->params['max_width'];\n        } else {\n            $maxwidth = null;\n        }\n        $file = expFile::fileUpload('Filedata',false,false,null,null,$maxwidth);\n        // since most likely this function will only get hit via flash in YUI Uploader\n        // and since Flash can't pass cookies, we lose the knowledge of our $user\n        // so we're passing the user's ID in as $_POST data. We then instantiate a new $user,\n        // and then assign $user->id to $file->poster so we have an audit trail for the upload\n\n        if (is_object($file)) {\n            $resized = !empty($file->resized) ? true : false;\n            $user = new user($this->params['usrid']);\n            $file->poster = $user->id;\n            $file->posted = $file->last_accessed = time();\n            $file->save();\n            if (!empty($this->params['cat'])) {\n                $expcat = new expCat($this->params['cat']);\n                $params['expCat'][0] = $expcat->id;\n                $file->update($params);\n            }\n\n            // a echo so YUI Uploader is notified of the function's completion\n            if ($resized) {\n                echo gt('File resized and then saved');\n            } else {\n                echo gt('File saved');\n            }\n        } else {\n            echo gt('File was NOT uploaded!');\n//            flash('error',gt('File was not uploaded!'));\n        }\n    }\n\n    public function quickUpload(){\n        global $user;\n\n        if (!empty($this->params['folder']) || (defined('QUICK_UPLOAD_FOLDER') && QUICK_UPLOAD_FOLDER != '' && QUICK_UPLOAD_FOLDER != 0)) {\n            // prevent attempt to place file somewhere other than /files folder\n            if (!empty($this->params['folder']) && strpos($this->params['folder'], '..') !== false) {\n                $ar = new expAjaxReply(300, gt(\"File was not uploaded!\"));\n                $ar->send();\n            }\n            if (SITE_FILE_MANAGER == 'picker') {\n                $quikFolder = !empty($this->params['folder']) ? $this->params['folder'] :QUICK_UPLOAD_FOLDER;\n                $destDir = null;\n            } elseif (SITE_FILE_MANAGER == 'elfinder') {\n                $quikFolder = null;\n                $destDir = UPLOAD_DIRECTORY_RELATIVE . (!empty($this->params['folder']) ? $this->params['folder'] :QUICK_UPLOAD_FOLDER) . '/';\n                // create folder if non-existant\n                expFile::makeDirectory($destDir);\n            }\n        } else {\n            $quikFolder = null;\n            $destDir = null;\n        }\n\n        //extensive suitability check before doing anything with the file...\n        if (isset($_SERVER['HTTP_X_FILE_NAME'])) {  //HTML5 XHR upload\n            $file = expFile::fileXHRUpload($_SERVER['HTTP_X_FILE_NAME'],false,false,null,$destDir,intval(QUICK_UPLOAD_WIDTH));\n            $file->poster = $user->id;\n            $file->posted = $file->last_accessed = time();\n            $file->save();\n            if (!empty($quikFolder)) {\n                $expcat = new expCat($quikFolder);\n                $params['expCat'][0] = $expcat->id;\n                $file->update($params);\n            }\n            $ar = new expAjaxReply(200, gt('Your File was uploaded successfully'), $file->id);\n            $ar->send();\n        } else {  //$_POST upload\n            if (($_FILES['uploadfile'] == \"none\") OR (empty($_FILES['uploadfile']['name'])) ) {\n                $message = gt(\"No file uploaded.\");\n            } else if ($_FILES['uploadfile'][\"size\"] == 0) {\n                $message = gt(\"The file is zero length.\");\n    //            } else if (($_FILES['upload'][\"type\"] != \"image/pjpeg\") AND ($_FILES['upload'][\"type\"] != \"image/jpeg\") AND ($_FILES['upload'][\"type\"] != \"image/png\")) {\n    //                $message = gt(\"The image must be in either JPG or PNG format. Please upload a JPG or PNG instead.\");\n            } else if (!is_uploaded_file($_FILES['uploadfile'][\"tmp_name\"])) {\n                $message = gt(\"You may be attempting to hack our server.\");\n            } else {\n                // upload the file, but don't save the record yet...\n                $file = expFile::fileUpload('uploadfile',false,false,null,$destDir,intval(QUICK_UPLOAD_WIDTH));\n                // since most likely this function will only get hit via flash in YUI Uploader\n                // and since Flash can't pass cookies, we lose the knowledge of our $user\n                // so we're passing the user's ID in as $_POST data. We then instantiate a new $user,\n                // and then assign $user->id to $file->poster so we have an audit trail for the upload\n                if (is_object($file)) {\n                    $file->poster = $user->id;\n                    $file->posted = $file->last_accessed = time();\n                    $file->save();\n                    if (!empty($quikFolder)) {\n                        $expcat = new expCat($quikFolder);\n                        $params['expCat'][0] = $expcat->id;\n                        $file->update($params);\n                    }\n                    $ar = new expAjaxReply(200, gt('Your File was uploaded successfully'), $file->id);\n                } else {\n                    $ar = new expAjaxReply(300, gt(\"File was not uploaded!\").' - '.$file);\n                }\n                $ar->send();\n            }\n        }\n    }\n\n    public function editCat() {\n        global $user;\n        $file = new expFile($this->params['id']);\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $expcat = new expCat($this->params['newValue']);\n            $params['expCat'][0] = $expcat->id;\n            $file->update($params);\n            $file->cat = $expcat->title;\n            $file->catid = $expcat->id;\n            $ar = new expAjaxReply(200, gt('Your Folder was updated successfully'), $file);\n        } else {\n            $ar = new expAjaxReply(300, gt(\"You didn't create this file, so you can't edit it.\"));\n        }\n        $ar->send();\n    }\n\n    public function editTitle() {\n        global $user;\n        $file = new expFile($this->params['id']);\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $file->title = $this->params['newValue'];\n            $file->save();\n            $ar = new expAjaxReply(200, gt('Your title was updated successfully'), $file);\n        } else {\n            $ar = new expAjaxReply(300, gt(\"You didn't create this file, so you can't edit it.\"));\n        }\n        $ar->send();\n    }\n\n    public function editAlt() {\n        global $user;\n        $file = new expFile($this->params['id']);\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $file->alt = $this->params['newValue'];\n            $file->save();\n            $ar = new expAjaxReply(200, gt('Your alt was updated successfully'), $file);\n        } else {\n            $ar = new expAjaxReply(300, gt(\"You didn't create this file, so you can't edit it.\"));\n        }\n        $ar->send();\n        echo json_encode($file);  //FIXME we exit before hitting this\n    }\n\n    public function editShare() {\n        global $user;\n        $file = new expFile($this->params['id']);\n\t\tif(!isset($this->params['newValue'])) {\n\t\t\t$this->params['newValue'] = 0;\n\t\t}\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $file->shared = $this->params['newValue'];\n            $file->save();\n            $ar = new expAjaxReply(200, gt('This file is now shared.'), $file);\n        } else {\n            $ar = new expAjaxReply(300, gt(\"You didn't create this file, so it's not yours to share.\"));\n        }\n        $ar->send();\n        echo json_encode($file);  //FIXME we exit before hitting this\n    }\n\n    public function import_eql() {\n    }\n\n    public  function import_eql_process() {\n        global $db;\n\n        if ($_FILES['file']['error'] != UPLOAD_ERR_OK) {\n        \tswitch($_FILES['file']['error']) {\n        \t\tcase UPLOAD_ERR_INI_SIZE:\n        \t\tcase UPLOAD_ERR_FORM_SIZE:\n        \t\t\techo gt('The file you uploaded exceeded the size limits for the server.').'<br />';\n        \t\t\tbreak;\n        \t\tcase UPLOAD_ERR_PARTIAL:\n        \t\t\techo gt('The file you uploaded was only partially uploaded.').'<br />';\n        \t\t\tbreak;\n        \t\tcase UPLOAD_ERR_NO_FILE:\n        \t\t\techo gt('No file was uploaded.').'<br />';\n        \t\t\tbreak;\n        \t}\n        } else {\n            $errors = array();\n            expSession::clearAllUsersSessionCache();\n\n            // copy in deprecated definitions files to aid in import\n            $src = BASE . \"install/old_definitions\";\n            $dst = BASE . \"framework/core/definitions\";\n            if (is_dir($src) && expUtil::isReallyWritable($dst)) {\n                $dir = opendir($src);\n                while (false !== ($file = readdir($dir))) {\n                    if (($file != '.') && ($file != '..')) {\n                        if (!file_exists($dst . '/' . $file)) {\n                            copy($src . '/' . $file, $dst . '/' . $file);\n                        }\n                    }\n                }\n                closedir($dir);\n            }\n\n            expFile::restoreDatabase($_FILES['file']['tmp_name'], $errors);\n\n            // now remove deprecated definitions files\n            $src = BASE . \"install/old_definitions\";\n            $dst = BASE . \"framework/core/definitions\";\n            if (is_dir($src) && expUtil::isReallyWritable($dst)) {\n                $dir = opendir($src);\n                while (false !== ($file = readdir($dir))) {\n                    if (($file != '.') && ($file != '..')) {\n                        if (file_exists($dst . '/' . $file)) {\n                            unlink($dst . '/' . $file);\n                        }\n                        // remove empty deprecated tables\n                        $table = substr($file, 0, -4);\n                        if ($db->tableIsEmpty($table)) {\n                            $db->dropTable($table);\n                        }\n                    }\n                }\n                closedir($dir);\n            }\n\n            // update search index\n            searchController::spider();\n\n            // check to see if we need to install or upgrade the restored database\n            expVersion::checkVersion();\n\n            assign_to_template(\n                array(\n                    'success' => !count($errors),\n                    'errors' => $errors,\n                )\n            );\n        }\n    }\n\n    public static function getTables() {\n        global $db;\n\n        expDatabase::fix_table_names();\n        $tables = $db->getTables();\n        if (!function_exists('tmp_removePrefix')) {\n        \tfunction tmp_removePrefix($tbl) {\n        \t\t// we add 1, because DB_TABLE_PREFIX  no longer has the trailing\n        \t\t// '_' character - that is automatically added by the database class.\n        \t\treturn substr($tbl,strlen(DB_TABLE_PREFIX)+1);\n        \t}\n        }\n        $tables = array_map('tmp_removePrefix',$tables);\n        usort($tables,'strnatcmp');\n        return $tables;\n    }\n\n    public function export_eql() {\n//        global $db, $user;\n        global $user;\n\n//        expDatabase::fix_table_names();\n//        $tables = $db->getTables();\n//        if (!function_exists('tmp_removePrefix')) {\n//        \tfunction tmp_removePrefix($tbl) {\n//        \t\t// we add 1, because DB_TABLE_PREFIX  no longer has the trailing\n//        \t\t// '_' character - that is automatically added by the database class.\n//        \t\treturn substr($tbl,strlen(DB_TABLE_PREFIX)+1);\n//        \t}\n//        }\n//        $tables = array_map('tmp_removePrefix',$tables);\n//        usort($tables,'strnatcmp');\n\n        assign_to_template(array(\n            'user' => $user,\n            'tables' => self::getTables(),\n        ));\n    }\n\n    public function export_eql_process() {\n//        global $db;\n\n        if (!isset($this->params['tables'])) { // No checkboxes clicked so we'll dump all tables\n            $this->params['tables'] = self::getTables();\n            $this->params['tables'] = array_flip($this->params['tables']);\n        }\n//        \techo gt('You must choose at least one table to export.');\n//        } else { // All good\n        \t$filename = str_replace(\n        \t\tarray('__DOMAIN__','__DB__'),\n        \t\tarray(str_replace('.','_',HOSTNAME),DB_NAME),\n                $this->params['filename']);\n        \t$filename = preg_replace('/[^A-Za-z0-9_.-]/','-',strftime($filename,time()).'.eql');\n\n        \tob_end_clean();\n        \tob_start(\"ob_gzhandler\");\n\n        \tif (isset($this->params['save_sample'])) { // Save as a theme sample is checked off\n        \t\t$path = BASE . \"themes/\".DISPLAY_THEME.\"/sample.eql\";\n        \t\tif (!$eql = fopen ($path, \"w\")) {\n        \t\t\tflash('error',gt(\"Error opening eql file for writing\").\" \".$path);\n        \t\t} else {\n                    //TODO we need to write inside call passing $eql file pointer\n                    $eqlfile = expFile::dumpDatabase(array_keys($this->params['tables']));\n        \t\t\tif (fwrite ($eql, $eqlfile)  === FALSE) {\n        \t\t\t\tflash('error',gt(\"Error writing to eql file\").\" \".$path);\n        \t\t\t}\n        \t\t\tfclose ($eql);\n        \t\t\tflash('message',gt(\"Sample database (eql file) saved to\").\" '\".DISPLAY_THEME.\"' \".gt(\"theme\"));\n        \t\t\texpHistory::back();\n        \t\t}\n        \t} else {\n        \t\t// This code was lifted from phpMyAdmin, but this is Open Source, right?\n\n        \t\t// 'application/octet-stream' is the registered IANA type but\n        \t\t//        MSIE and Opera seems to prefer 'application/octetstream'\n        \t\t$mime_type = (EXPONENT_USER_BROWSER == 'IE' || EXPONENT_USER_BROWSER == 'OPERA') ? 'application/octetstream' : 'application/octet-stream';\n\n        \t\theader('Content-Type: ' . $mime_type);\n        \t\theader('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n        \t\t// IE need specific headers\n        \t\tif (EXPONENT_USER_BROWSER == 'IE') {\n        \t\t\theader('Content-Disposition: inline; filename=\"' . $filename . '\"');\n        \t\t\theader('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n        \t\t\theader('Pragma: public');\n        \t\t} else {\n        \t\t\theader('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n        \t\t\theader('Pragma: no-cache');\n        \t\t}\n                echo expFile::dumpDatabase(array_keys($this->params['tables']));  //FIXME we need to echo inside call\n        \t\texit; // Exit, since we are exporting\n        \t}\n//        }\n    }\n\n    public function import_files() {\n    }\n\n    public function import_files_process() {\n        if ($_FILES['file']['error'] != UPLOAD_ERR_OK) {\n        \tswitch($_FILES['file']['error']) {\n        \t\tcase UPLOAD_ERR_INI_SIZE:\n        \t\tcase UPLOAD_ERR_FORM_SIZE:\n        \t\t\techo gt('The file you uploaded exceeded the size limits for the server.').'<br />';\n        \t\t\tbreak;\n        \t\tcase UPLOAD_ERR_PARTIAL:\n        \t\t\techo gt('The file you uploaded was only partially uploaded.').'<br />';\n        \t\t\tbreak;\n        \t\tcase UPLOAD_ERR_NO_FILE:\n        \t\t\techo gt('No file was uploaded.').'<br />';\n        \t\t\tbreak;\n        \t}\n        } else {\n        \t$basename = basename($_FILES['file']['name']);\n\n        \tinclude_once(BASE.'external/Tar.php');\n        \t$tar = new Archive_Tar($_FILES['file']['tmp_name'],'gz');\n\n        \t$dest_dir = BASE.'tmp/extensionuploads/'.uniqid('');\n        \t@mkdir($dest_dir,DIR_DEFAULT_MODE_STR);\n        \tif (!file_exists($dest_dir)) {\n        \t\techo gt('Unable to create temporary directory to extract files archive.');\n        \t} else {\n        \t\t$return = $tar->extract($dest_dir);\n        \t\tif (!$return) {\n        \t\t\techo '<br />'.gt('Error extracting TAR archive').'<br />';\n        \t\t} else if (!file_exists($dest_dir.'/files') || !is_dir($dest_dir.'/files')) {\n        \t\t\techo '<br />'.gt('Invalid archive format, no \\'/files\\' folder').'<br />';\n        \t\t} else {\n        \t\t\t// Show the form for specifying which mod types to 'extract'\n\n        \t\t\t$mods = array(); // Stores the mod classname, the files list, and the module's real name\n\n        \t\t\t$dh = opendir($dest_dir.'/files');\n        \t\t\twhile (($file = readdir($dh)) !== false) {\n        \t\t\t\tif ($file{0} != '.' && is_dir($dest_dir.'/files/'.$file)) {\n        \t\t\t\t\t$mods[$file] = array(\n        \t\t\t\t\t\t'',\n        \t\t\t\t\t\tarray_keys(expFile::listFlat($dest_dir.'/files/'.$file,1,null,array(),$dest_dir.'/files/'))\n        \t\t\t\t\t);\n        //\t\t\t\t\tif (class_exists($file)) {\n        //\t\t\t\t\t\t$mods[$file][0] = call_user_func(array($file,'name')); // $file is the class name of the module\n        //\t\t\t\t\t}\n        \t\t\t\t} elseif ($file != '.' && $file != '..') {\n        \t\t\t\t\t$mods[$file] = array(\n        \t\t\t\t\t\t'',\n        \t\t\t\t\t\t$file\n        \t\t\t\t\t);\n        \t\t\t\t}\n        \t\t\t}\n\n                    assign_to_template(array(\n                        'dest_dir' => $dest_dir,\n                        'file_data' => $mods,\n                    ));\n        \t\t}\n        \t}\n        }\n    }\n\n    public function import_files_extract() {\n        $dest_dir = $this->params['dest_dir'];\n        $files = array();\n        foreach (array_keys($this->params['mods']) as $file) {\n        \t$files[$file] = expFile::canCreate(BASE.'files/'.$file);\n        //\tif (class_exists($mod)) {\n        //\t\t$files[$mod][0] = call_user_func(array($mod,'name'));\n        //\t}\n        //\tforeach (array_keys(expFile::listFlat($dest_dir.'/files',1,null,array(),$dest_dir.'/files/')) as $file) {\n        //\t\t$files[$mod][1][$file] = expFile::canCreate(BASE.'files/'.$file);\n        //\t}\n        }\n\n        expSession::set('dest_dir',$dest_dir);\n        expSession::set('files_data',$files);\n\n        assign_to_template(array(\n            'files_data' => $files,\n        ));\n    }\n\n    public function import_files_finish() {\n        $dest_dir = expSession::get('dest_dir');\n        $files = expSession::get('files_data');\n        if (!file_exists(BASE.'files')) {\n        \tmkdir(BASE.'files',DIR_DEFAULT_MODE_STR);\n        }\n\n        $filecount = 0;\n        foreach (array_keys($files) as $file) {\n            expFile::copyDirectoryStructure($dest_dir.'/files/'.$file,BASE.'files/'.$file);\n        \tcopy($dest_dir.'/files/'.$file,BASE.'files/'.$file);\n        \t$filecount++;\n        }\n\n        expSession::un_set('dest_dir');\n        expSession::un_set('files_data');\n\n        expFile::removeDirectory($dest_dir);\n\n        assign_to_template(array(\n            'file_count' => $filecount,\n        ));\n    }\n\n    public function export_files() {\n        global $user;\n\n        $loc = expCore::makeLocation($this->params['controller'],isset($this->params['src'])?$this->params['src']:null,isset($this->params['int'])?$this->params['int']:null);\n        //$mods = array();\n        //$dh = opendir(BASE.'files');\n        //while (($file = readdir($dh)) !== false) {\n        //\tif (is_dir(BASE.'files/'.$file) && $file{0} != '.' && class_exists($file)) {\n        //\t\t$mods[$file] = call_user_func(array($file,'name'));\n        //\t}\n        //}\n        //uasort($mods,'strnatcmp');\n\n        assign_to_template(array(\n            'user' => $user,\n        ));\n    }\n\n    public function export_files_process() {\n//        global $db;\n\n        //if (!isset($this->params['mods'])) {\n        //\techo gt('You must select at least one module to export files for.');\n        //\treturn;\n        //}\n\n        include_once(BASE.'external/Tar.php');\n\n        $files = array();\n        //foreach (array_keys($this->params['mods']) as $mod) {\n        //\tforeach ($db->selectObjects('file',\"directory LIKE 'files/\".$mod.\"%'\") as $file) {\n//            foreach ($db->selectObjects('expFiles',1) as $file) {\n        foreach (expFile::selectAllFiles() as $file) {\n            $files[] = BASE.$file->directory.$file->filename;\n        }\n        //}\n\n        $fname = tempnam(BASE.'/tmp','exporter_files_');\n        $tar = new Archive_Tar($fname,'gz');\n        $tar->createModify($files,'',BASE);\n\n        $filename = str_replace(\n            array('__DOMAIN__','__DB__'),\n            array(str_replace('.','_',HOSTNAME),DB_NAME),\n            $this->params['filename']);\n        $filename = preg_replace('/[^A-Za-z0-9_.-]/','-',strftime($filename,time()).'.tar.gz');\n\n        if (isset($this->params['save_sample'])) { // Save as a theme sample is checked off\n            copy($fname,BASE . \"themes/\".DISPLAY_THEME_REAL.\"/sample.tar.gz\");\n            unlink($fname);\n            flash('message',gt(\"Sample uploaded files archive saved to\").\" '\".DISPLAY_THEME_REAL.\"' \".gt(\"theme\"));\n            expHistory::back();\n        } else {\n            ob_end_clean();\n            // This code was lifted from phpMyAdmin, but this is Open Source, right?\n\n            // 'application/octet-stream' is the registered IANA type but\n            //        MSIE and Opera seems to prefer 'application/octetstream'\n            $mime_type = (EXPONENT_USER_BROWSER == 'IE' || EXPONENT_USER_BROWSER == 'OPERA') ? 'application/octetstream' : 'application/octet-stream';\n\n            header('Content-Type: ' . $mime_type);\n            header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n            // IE need specific headers\n            if (EXPONENT_USER_BROWSER == 'IE') {\n                header('Content-Disposition: inline; filename=\"' . $filename . '\"');\n                header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n                header('Pragma: public');\n            } else {\n                header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n                header('Pragma: no-cache');\n            }\n\n            $fh = fopen($fname,'rb');\n            while (!feof($fh)) {\n                echo fread($fh,8192);\n            }\n            fclose($fh);\n            unlink($fname);\n        }\n\n        exit(''); // Exit, since we are exporting.\n    }\n\n}\n\n?>", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package    Modules\n */\n/** @define \"BASE\" \"../../../..\" */\n\nclass usersController extends expController {\n    public $basemodel_name = 'user';\n//    protected $remove_permissions = array(\n//        'create',\n//        'edit'\n//    );\n    protected $manage_permissions = array(\n        'toggle_extension' => 'Activate Extensions',\n        'kill_session'     => 'End Sessions',\n        'boot_user'        => 'Boot Users',\n        'userperms'        => 'User Permissions',\n        'groupperms'       => 'Group Permissions',\n        'import'           => 'Import Users',\n        'export'           => 'Export Users',\n        'update'           => 'Update Users',\n    );\n\n    static function displayname() {\n        return gt(\"User Manager\");\n    }\n\n    static function description() {\n        return gt(\"This is the user management module. It allows for creating user, editing user, etc.\");\n    }\n\n    static function hasSources() {\n        return false;\n    }\n\n    static function hasContent() {\n        return false;\n    }\n\n    static function canImportData() {\n        return true;\n    }\n\n    public function manage() {\n        global $user;\n\n        expHistory::set('manageable', $this->params);\n//        $limit = empty($this->config['limit']) ? 10 : $this->config['limit'];\n//        $order = empty($this->config['order']) ? 'username' : $this->config['order'];\n        if ($user->is_system_user == 1) {\n//            $filter = 1; //'1';\n            $where = '';\n        } elseif ($user->isSuperAdmin()) {\n//            $filter = 2; //\"is_system_user != 1\";\n            $where = \"is_system_user != 1\";\n        } else {\n//            $filter = 3; //\"is_admin != 1\";\n            $where = \"is_admin != 1\";\n        }\n        $page = new expPaginator(array(\n                    'model'=>'user',\n                    'where'=>$where,\n//                    'limit'=>$limit,\n//                    'order'=>$order,\n                    'page'=>(isset($this->params['page']) ? $this->params['page'] : 1),\n                    'controller'=>$this->baseclassname,\n                    'action'=>$this->params['action'],\n                    'columns'=>array(\n                        gt('Username')=>'username',\n                        gt('First Name')=>'firstname',\n                        gt('Last Name')=>'lastname',\n                        gt('Is Admin')=>'is_acting_admin',\n                    )\n                ));\n\n        assign_to_template(array('page'=>$page));\n//        assign_to_template(array(\n//            'filter' => $filter\n//        ));\n    }\n\n    public function create() {\n        redirect_to(array('controller' => 'users', 'action' => 'edituser'));\n//        $this->edituser();\n    }\n\n    public function edituser() {\n        global $user, $db;\n\n        // set history\n        expHistory::set('editable', $this->params);\n        expSession::set(\"userkey\", sha1(microtime()));\n        expSession::clearCurrentUserSessionCache();\n\n        $id = !empty($this->params['id']) ? $this->params['id'] : null;\n\n        // check to see if we should be editing.  You either need to be an admin, or editing own account.\n        if ($user->isAdmin() || ($user->id == $id && !$user->globalPerm('prevent_profile_change'))) {\n            $u = new user($id);\n            if ($u->isSuperAdmin() && $user->isActingAdmin()) {  // prevent regular admin's from editing super-admins\n                flash('error', gt('You do not have the proper permissions to edit this user'));\n                expHistory::back();\n            }\n        } else {\n            flash('error', gt('You do not have the proper permissions to edit this user'));\n            expHistory::back();\n        }\n        $active_extensions = $db->selectObjects('profileextension', 'active=1', 'rank');\n\n        //If there is no image uploaded, use the default avatar\n        if (empty($u->image)) $u->image = PATH_RELATIVE . \"framework/modules/users/assets/images/avatar_not_found.jpg\";\n\n        assign_to_template(array(\n            'edit_user'  => $u,\n            'extensions' => $active_extensions,\n            \"userkey\"    => expSession::get(\"userkey\")\n        ));\n\n        if ($user->isAdmin()) {\n            $page = new expPaginator(array(\n                'model'      => 'group',\n                'where'      => 1,\n                'limit'      => (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10,\n                'order'      => empty($this->config['order']) ? 'name' : $this->config['order'],\n                'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n                'columns'    => array(\n                    gt('Name')        => 'name',\n                    gt('Description') => 'description',\n                ),\n                'controller' => $this->baseclassname,\n                'action'     => $this->params['action'],\n            ));\n\n            assign_to_template(array(\n                'groups' => $page,\n                'mygroups' => $u->getGroupMemberships(),\n            ));\n        }\n    }\n\n    public function update() {\n        global $user, $db;\n\n        // get the id of user we are editing, if there is one\n        $id = !empty($this->params['id']) ? $this->params['id'] : null;\n        if ((($user->id == $id) || $user->isAdmin()) && $this->params['userkey'] != expSession::get(\"userkey\")) expHistory::back();\n\n        // make sure this user should be updating user accounts\n        if (!$user->isLoggedIn() && SITE_ALLOW_REGISTRATION == 0) {\n            flash('error', gt('This site does not allow user registrations'));\n            expHistory::back();\n        } elseif (!$user->isAdmin() && ($user->isLoggedIn() && $user->id != $id)) {\n            flash('error', gt('You do not have permission to edit this user account'));\n            expHistory::back();\n        }\n\n        // if this is a new user account we need to check the password.\n        // the password fields wont come thru on an edit. Otherwise we will\n        // just update the existing account.\n        if (!empty($id)) {\n            $u = new user($id);\n            $u->update($this->params);\n            if ($user->isAdmin() && $user->id != $id) {\n                flash('message', gt('Account information for') . ' ' . $u->username . ' ' . gt('has been updated.'));\n            } else {\n                flash('message', gt('Thank you') . ' ' . $u->firstname . '.  ' . gt('Your account information has been updated.'));\n            }\n            if ($user->id == $id) {\n                $_SESSION[SYS_SESSION_KEY]['user'] = $u;\n                $user = $u;\n            }\n        } else {\n            $u = new user($this->params);\n            $ret = $u->setPassword($this->params['pass1'], $this->params['pass2']);\n            if ($ret != true) expValidator::failAndReturnToForm($ret, $this->params);\n            $u->save();\n            if ($user->isAdmin()) {\n                flash('message', gt('Created new user account for') . ' ' . $u->username);\n            } else {\n                user::login($u->username, $this->params['pass1']);\n                flash('message', gt('Thank you') . ' ' . $u->firstname . '.  ' . gt('Your new account has been created.'));\n            }\n        }\n\n        // update the user profiles\n        if (!empty($u->id)) {\n            $this->params['user_id'] = $u->id;\n            // get the active profile extensions and save them out\n            $active_extensions = $db->selectObjects('profileextension', 'active=1');\n            foreach ($active_extensions as $pe) {\n                if (is_file(BASE . $pe->classfile)) {\n                    include_once(BASE . $pe->classfile);\n                    $ext = new $pe->classname();\n                    $db->delete($ext->tablename, 'user_id=' . $u->id);\n                    $ext->update($this->params);\n                }\n            }\n        }\n\n        // update group membership assignment\n        if (!empty($this->params['member'])) {\n            $old_groups = $db->selectObjects('groupmembership', 'member_id=' . $u->id);\n//            $db->delete('groupmembership', 'member_id=' . $u->id);  // start from scratch\n            $memb = new stdClass();\n            $memb->member_id = $u->id;\n            foreach ($this->params['member'] as $grp) {\n                $memb->group_id = $grp;\n                $memb->is_admin = false;\n                foreach ($old_groups as $oldgroup) {\n                    if ($oldgroup->group_id == $grp) {\n                        if ($oldgroup->is_admin) $memb->is_admin = true;  // retain group admin setting\n                    }\n                }\n                $db->insertObject($memb, 'groupmembership');\n            }\n            if ($u->id == $user->id) expSession::triggerRefresh();\n        }\n\n        // if this is a new account then we will check to see if we need to send\n        // a welcome message or admin notification of new accounts.\n        if (empty($id)) {\n            // Calculate Group Memberships for newly created users.  Any groups that\n            // are marked as 'inclusive' automatically pick up new users.  This is the part\n            // of the code that goes out, finds those groups, and makes the new user a member\n            // of them.\n            $memb = new stdClass();\n            $memb->member_id = $u->id;\n            // Also need to process the groupcodes, for promotional signup\n//            $code_where = '';\n//            if (isset($this->params['groupcode']) && $this->params['groupcode'] != '') {\n//                $code_where = \" OR code='\" . $this->params['groupcode'] . \"'\";\n//            }\n            // Add to default plus any groupcode groups\n//            foreach ($db->selectObjects('group', 'inclusive=1' . $code_where) as $g) {\n            foreach ($db->selectObjects('group', 'inclusive=1') as $g) {\n                $memb->group_id = $g->id;\n                $db->insertObject($memb, 'groupmembership');\n            }\n\n            // if we added the user to any group than we need to reload their permissions\n//            expPermissions::load($u);  //FIXME why are we doing this? this loads the edited user perms over the current user???\n\n            //signup email stuff\n            if (USER_REGISTRATION_SEND_WELCOME && !empty($u->email)) {\n                $msg = $u->firstname . \", \\n\\n\";\n                $msg .= sprintf(USER_REGISTRATION_WELCOME_MSG, $u->firstname, $u->lastname, $u->username);\n\n                $mail = new expMail();\n                $mail->quickSend(array(\n                    'text_message' => $msg,\n                    'to'           => array(trim($u->email) => trim(user::getUserAttribution($u->id))),\n                    'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n                    'subject'      => USER_REGISTRATION_WELCOME_SUBJECT,\n                ));\n\n                flash('message', gt('A welcome email has been sent to') . ' ' . $u->email);\n            }\n\n            // send and email notification to the admin of the site.\n            if (USER_REGISTRATION_SEND_NOTIF && !$user->isAdmin()) {\n                $msg = gt(\"When\") . \": \" . date(\"F j, Y, g:i a\") . \"\\n\\n\";\n                $msg .= gt(\"Their name is\") . \": \" . $u->firstname . \" \" . $u->lastname . \"\\n\\n\";\n\n                $mail = new expMail();\n                $mail->quickSend(array(\n                    'text_message' => $msg,\n                    'to'           => trim(USER_REGISTRATION_ADMIN_EMAIL),\n                    'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n                    'subject'      => USER_REGISTRATION_NOTIF_SUBJECT,\n                ));\n            }\n        }\n\n        // we need to reload our updated profile if we just edited our own account\n        if ($id == $user->id) {\n            $user->getUserProfile();\n//            expPermissions::load($user);  // not sure this is necessary since we can't add groups here\n        }\n\n        expHistory::back();\n    }\n\n    public function delete() {\n        global $user, $db;\n        if (!$user->isAdmin()) {\n            flash('error', gt('You do not have permission to delete user accounts'));\n            expHistory::back();\n        }\n\n        if (empty($this->params['id'])) {\n            flash('error', gt('No user selected.'));\n            expHistory::back();\n        }\n\n        // remove group memeberships\n        $db->delete('groupmembership', 'member_id=' . $this->params['id']);\n\n        // remove user permissions\n        $db->delete('userpermission', 'uid=' . $this->params['id']);\n\n        //remove user profiles\n        $active_extensions = $db->selectObjects('profileextension', 'active=1');\n        foreach ($active_extensions as $pe) {\n            if (is_file(BASE . $pe->classfile)) {\n                include_once(BASE . $pe->classfile);\n                $ext = new $pe->classname();\n                $db->delete($ext->table, 'user_id=' . $this->params['id']);\n            }\n        }\n\n        // remove user address\n        $address = new address();\n        $db->delete($address->table, 'user_id=' . $this->params['id']);\n\n        parent::delete();\n    }\n\n    public function manage_sessions() {\n//        global $db, $user;\n        global $db;\n\n        expHistory::set('manageable', $this->params);\n\n        //cleans up any old sessions\n        if (SESSION_TIMEOUT_ENABLE == true) {\n            $db->delete('sessionticket', 'last_active < ' . (time() - SESSION_TIMEOUT));\n//        } else {\n//            $db->delete('sessionticket', '1');\n        }\n\n        if (isset($this->params['id']) && $this->params['id'] == 0) {\n            $sessions = $db->selectObjects('sessionticket', \"uid<>0\");\n            $filtered = 1;\n        } else {\n            $sessions = $db->selectObjects('sessionticket');\n            $filtered = 0;\n        }\n\n//\t    $sessions = $db->selectObjects('sessionticket');\n        for ($i = 0, $iMax = count($sessions); $i < $iMax; $i++) {\n            $sessions[$i]->user = new user($sessions[$i]->uid);\n            if ($sessions[$i]->uid == 0) {\n                $sessions[$i]->user->id = 0;\n            }\n            $sessions[$i]->duration = expDateTime::duration($sessions[$i]->last_active, $sessions[$i]->start_time);\n        }\n\n        assign_to_template(array(\n            'sessions' => $sessions,\n            'filter'   => $filtered\n        ));\n    }\n\n    public function kill_session() {\n        global $user, $db;\n        $ticket = $db->selectObject('sessionticket', \"ticket='\" . preg_replace('/[^A-Za-z0-9.]/', '', $this->params['ticket']) . \"'\");\n        if ($ticket) {\n            $u = new user($ticket->uid);\n            if ($user->isSuperAdmin() || ($user->isActingAdmin() && !$u->isAdmin())) {\n                // We can only kick the user if they are A) not an acting admin, or\n                // B) The current user is a super user and the kicked user is not.\n                $db->delete('sessionticket', \"ticket='\" . $ticket->ticket . \"'\");\n            }\n        }\n        expHistory::back();\n    }\n\n    public function boot_user() {\n        global $user, $db;\n        if (!empty($this->params['id'])) {\n            $u = new user($this->params['id']);\n            if ($user->isSuperAdmin() || ($user->isActingAdmin() && !$u->isAdmin())) {\n                // We can only kick the user if they are A) not an acting admin, or\n                // B) The current user is a super user and the kicked user is not.\n                $db->delete('sessionticket', 'uid=' . $u->id);\n            }\n        }\n        expHistory::back();\n    }\n\n    /**\n    \u00a0*\u00a0This function scans two directories and searches for php files to add to the extensions database.\n     * If you have added new extensions since the last time you have visited the page, it will add them to the database\n     * in effect enabling your new extension to be tacked onto users profiles. You then have to enable it in the menu, but at least\n     * now it is in the system and when the user goes to edit his profile, it will check for extensions and this one will be in!\n     *\n    \u00a0*\u00a0@global\u00a0string\u00a0This function uses the global $db save information through the Exponenet database connection.\n    \u00a0*/\n    public function manage_extensions() {\n        global $db;\n\n        // set history\n        expHistory::set('manageable', $this->params);\n\n        // Lets find all the user profiles availabe and then see if they are\n        // in the database yet.  If not we will add them.\n        $ext_dirs = array(\n            'framework/modules/users/extensions',\n            'themes/' . DISPLAY_THEME . '/modules/users/extensions'\n        );\n        foreach ($ext_dirs as $dir) {\n            if (is_readable(BASE . $dir)) {\n                $dh = opendir(BASE . $dir);\n                while (($file = readdir($dh)) !== false) {\n                    if (is_file(BASE . \"$dir/$file\") && is_readable(BASE . \"$dir/$file\") && substr($file, 0, 1) != '_' && substr($file, 0, 1) != '.') {\n                        include_once(BASE . \"$dir/$file\");\n                        $classname = substr($file, 0, -4);\n                        $class = new $classname();\n                        $extension = $db->selectObject('profileextension', \"title='\" . $class->name() . \"'\");\n                        if (empty($extension->id)) {\n                            $pe = new profileextension();\n                            $pe->title = $class->name();\n                            $pe->body = $class->description();\n                            $pe->classfile = \"$dir/$file\";\n                            $pe->classname = $classname;\n                            $pe->save();\n                        }\n                    }\n                }\n            }\n        }\n\n        $page = new expPaginator(array(\n            'model'      => 'profileextension',\n            'where'      => 1,\n            'limit'      => 25,\n            'order'      => 'title',\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns'    => array(\n                gt('Name')        => 'title',\n                gt('Description') => 'body',\n                gt('Active')      => 'active'\n            ),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n        ));\n\n        assign_to_template(array(\n            'page' => $page\n        ));\n    }\n\n    public function manage_groups() {\n        expHistory::set('manageable', $this->params);\n        $page = new expPaginator(array(\n            'model'      => 'group',\n            'where'      => 1,\n//            'limit'      => (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10,\n            'order'      => empty($this->config['order']) ? 'name' : $this->config['order'],\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns'    => array(\n                gt('Name')        => 'name',\n                gt('Description') => 'description',\n                gt('Type')        => 'inclusive',\n            ),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n        ));\n\n        foreach ($page->records as $key=>$group) {\n            $page->records[$key]->members = group::getUsersInGroup($group->id);\n        }\n\n        assign_to_template(array(\n            'page' => $page,\n        ));\n    }\n\n    public function reset_password() {\n        expHistory::set('editable', $this->params);\n    }\n\n    public function send_new_password() {\n        global $db;\n\n        // find the user\n        $this->params['username'] = expString::escape($this->params['username']);\n        $u = user::getUserByName($this->params['username']);\n        if (empty($u)) {\n            $u = user::getUserByEmail($this->params['username']);\n            if (!empty($u) && $u->count > 1) {\n                expValidator::failAndReturnToForm(gt('That email address applies to more than one user account, please enter your username instead.'));\n            }\n        }\n        $u = new user($u->id);\n\n        if (!expValidator::check_antispam($this->params)) {\n            expValidator::failAndReturnToForm(gt('Anti-spam verification failed.  Please try again.'), $this->params);\n        } elseif (empty($u->id)) {\n            expValidator::failAndReturnToForm(gt('We were unable to find an account with that username/email'), $this->params);\n        } elseif (empty($u->email)) {\n            expValidator::failAndReturnToForm(gt('Your account does not appear to have an email address.  Please contact the site administrators to reset your password'), $this->params);\n        } elseif ($u->isAdmin()) {\n            expValidator::failAndReturnToForm(gt('You cannot reset passwords for an administrator account.'), $this->params);\n        }\n\n        $tok = new stdClass();\n        $tok->uid = $u->id;\n        $tok->expires = time() + 2 * 3600;\n        $tok->token = md5(time()) . uniqid('');\n\n        $email = $template = expTemplate::get_template_for_action($this, 'email/password_reset_email', $this->loc);\n        $email->assign('token', $tok);\n        $email->assign('username', $u->username);\n        $msg = $email->render();\n        $mail = new expMail();\n        $mail->quickSend(array(\n            'html_message' => $msg,\n            'to'           => array(trim($u->email) => trim(user::getUserAttribution($u->id))),\n            'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n            'subject'      => gt('Password Reset Requested'),\n        ));\n\n        $db->delete('passreset_token', 'uid=' . $u->id);\n        $db->insertObject($tok, 'passreset_token');\n        flash('message', gt('An email has been sent to you with instructions on how to finish resetting your password.') . '<br><br>' .\n            gt('This new password request is only valid for 2 hours.  If you have not completed the password reset process within 2 hours, the new password request will expire.'));\n\n        expHistory::back();\n    }\n\n    public function confirm_password_reset() {\n        global $db;\n\n        $db->delete('passreset_token', 'expires < ' . time());\n        $tok = $db->selectObject('passreset_token', 'uid=' . intval($this->params['uid']) . \" AND token='\" . preg_replace('/[^A-Za-z0-9]/', '', expString::escape($this->params['token'])) . \"'\");\n        if ($tok == null) {\n            flash('error', gt('Your password reset request has expired.  Please try again.'));\n            expHistory::back();\n        }\n\n        // create the password\n        $newpass = '';\n        for ($i = 0, $iMax = mt_rand(12, 20); $i < $iMax; $i++) {\n            $num = mt_rand(48, 122);\n            if (($num > 97 && $num < 122) || ($num > 65 && $num < 90) || ($num > 48 && $num < 57)) $newpass .= chr($num);\n            else $i--;\n        }\n\n        // look up the user\n        $u = new user($tok->uid);\n\n        // get the email message body and render it\n        $email = $template = expTemplate::get_template_for_action($this, 'email/confirm_password_email', $this->loc);\n        $email->assign('newpass', $newpass);\n        $email->assign('username', $u->username);\n        $msg = $email->render();\n\n        // send the new password to the user\n        $mail = new expMail();\n        $mail->quickSend(array(\n            'html_message' => $msg,\n            'to'           => array(trim($u->email) => trim(user::getUserAttribution($u->id))),\n            'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n            'subject'      => gt('The account password for') . ' ' . HOSTNAME . ' ' . gt('was reset'),\n        ));\n\n        // Save new password\n        $u->update(array('password' => user::encryptPassword($newpass)));\n\n        // cleanup the reset token\n        $db->delete('passreset_token', 'uid=' . $tok->uid);\n\n        flash('message', gt('Your password has been reset and the new password has been emailed to you.'));\n\n        // send the user the login page.\n        redirect_to(array('controller' => 'login', 'action' => 'loginredirect'));\n    }\n\n    public function change_password() {\n        global $user;\n\n        expHistory::set('editable', $this->params);\n        $id = isset($this->params['id']) ? $this->params['id'] : $user->id;\n\n        if ($user->isAdmin() || ($user->id == $id)) {\n            $isuser = ($user->id == $id) ? 1 : 0;\n            $u = new user($id);\n        } else {\n            flash('error', gt('You do not have the proper permissions to do that'));\n            expHistory::back();\n        }\n        assign_to_template(array(\n            'u'      => $u,\n            'isuser' => $isuser\n        ));\n    }\n\n    public function save_change_password() {\n        global $user;\n\n        $isuser = ($this->params['uid'] == $user->id) ? 1 : 0;\n\n        if (!$user->isAdmin() && !$isuser) {\n            flash('error', gt('You do not have permissions to change this users password.'));\n            expHistory::back();\n        }\n\n        if (($isuser && empty($this->params['password'])) || (!empty($this->params['password']) && $user->password != user::encryptPassword($this->params['password']))) {\n            flash('error', gt('The current password you entered is not correct.'));\n            expHistory::returnTo('editable');\n        }\n        //eDebug($user);\n        $u = new user(intval($this->params['uid']));\n\n        $ret = $u->setPassword($this->params['new_password1'], $this->params['new_password2']);\n        //eDebug($u, true);\n        if (is_string($ret)) {\n            flash('error', $ret);\n            expHistory::returnTo('editable');\n        } else {\n            $params = array();\n            $params['is_admin'] = !empty($u->is_admin);\n            $params['is_acting_admin'] = !empty($u->is_acting_admin);\n            $u->update($params);\n        }\n\n        if (!$isuser) {\n            flash('message', gt('The password for') . ' ' . $u->username . ' ' . gt('has been changed.'));\n        } else {\n            $user->password = $u->password;\n            flash('message', gt('Your password has been changed.'));\n        }\n        expHistory::back();\n    }\n\n    public function edit_userpassword() {\n        expHistory::set('editable', $this->params);\n        if (empty($this->params['id'])) {\n            flash('error', gt('You must specify the user whose password you want to change'));\n            expHistory::back();\n        }\n\n        $u = new user($this->params['id']);\n        assign_to_template(array(\n            'u' => $u\n        ));\n    }\n\n    public function update_userpassword() {\n        global $user;\n\n        if (!$user->isAdmin() && $this->params['id'] != $user->id) {\n            flash('error', gt('You do not have permissions to change this users password.'));\n            expHistory::back();\n        }\n\n        if (empty($this->params['id'])) {\n            expValidator::failAndReturnToForm(gt('You must specify the user whose password you want to change'), $this->params);\n        }\n\n        if (empty($this->params['new_password1'])) {\n            expValidator::setErrorField('new_password1');\n            expValidator::failAndReturnToForm(gt('You must specify a new password for this user.'), $this->params);\n        }\n\n        if (empty($this->params['new_password2'])) {\n            expValidator::setErrorField('new_password2');\n            expValidator::failAndReturnToForm(gt('You must confirm the password.'), $this->params);\n\n        }\n\n        $u = new user($this->params['id']);\n        $ret = $u->setPassword($this->params['new_password1'], $this->params['new_password2']);\n        if (is_string($ret)) {\n            expValidator::setErrorField('new_password1');\n            $this->params['new_password1'] = '';\n            $this->params['new_password2'] = '';\n            expValidator::failAndReturnToForm($ret, $this->params);\n        } else {\n            $u->save(true);\n        }\n\n        flash('message', gt('Password reset for user') . ' ' . $u->username);\n        expHistory::back();\n    }\n\n    public function edit_group() {\n        global $db;\n\n        expHistory::set('editable', $this->params);\n        $id = isset($this->params['id']) ? $this->params['id'] : null;\n        $group = new group($id);\n        $group->redirect = $db->selectValue('section', 'id', \"sef_name='\" . $group->redirect . \"'\");\n        assign_to_template(array(\n            'record' => $group\n        ));\n    }\n\n    public function manage_group_memberships() {\n        global $db, $user;\n//        expHistory::set('manageable', $this->params);\n\n        $memb = $db->selectObject('groupmembership', 'member_id=' . $user->id . ' AND group_id=' . $this->params['id'] . ' AND is_admin=1');\n\n        $perm_level = 0;\n        if ($memb) $perm_level = 1;\n        if (expPermissions::check('user_management', expCore::makeLocation('administrationmodule'))) $perm_level = 2;\n\n        $group = $db->selectObject('group', 'id=' . $this->params['id']);\n        $users = user::getAllUsers(0);\n\n        $members = array();\n        $admins = array();\n        foreach ($db->selectObjects('groupmembership', 'group_id=' . $group->id) as $m) {\n            $members[] = $m->member_id;\n            if ($m->is_admin == 1) {\n                $admins[] = $m->member_id;\n            }\n        }\n\n        for ($i = 0, $iMax = count($users); $i < $iMax; $i++) {\n            if (in_array($users[$i]->id, $members)) {\n                $users[$i]->is_member = 1;\n            } else {\n                $users[$i]->is_member = 0;\n            }\n\n            if (in_array($users[$i]->id, $admins)) {\n                $users[$i]->is_admin = 1;\n            } else {\n                $users[$i]->is_admin = 0;\n            }\n        }\n\n        //$limit = empty($this->config['limit']) ? 10 : $this->config['limit'];\n        $page = new expPaginator(array(\n//          'model'=>'user',\n            'records'    => $users,\n            'where'      => 1,\n//          'limit'=>9999,  // unless we're showing all users on a page at once, there's no way to\n            // add all users to a group, since it's rebuilding the group on save...\n            'order'      => empty($this->config['order']) ? 'username' : $this->config['order'],\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns'    => array(\n                gt('Username')   => 'username',\n                gt('First Name') => 'firstname',\n                gt('Last Name')  => 'lastname',\n                gt('Is Member')  => 'is_member',\n                gt('Is Admin')   => 'is_admin',\n            ),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n        ));\n\n        assign_to_template(array(\n            'page'       => $page,\n            'group'      => $group,\n            'users'      => $users,\n            'canAdd'     => (count($members) < count($users) ? 1 : 0),\n            'hasMember'  => (count($members) > 0 ? 1 : 0),\n            'perm_level' => $perm_level,\n        ));\n    }\n\n    public function update_group() {\n        global $db;\n\n        $group = new group();\n        if (!empty($this->params['redirect'])) {\n            $this->params['redirect'] = $db->selectValue('section', 'sef_name', 'id=' . $this->params['redirect']);\n        }\n        $group->update($this->params);\n        expHistory::back();\n    }\n\n    public function delete_group() {\n        global $user, $db;\n        if (!$user->isAdmin()) {\n            flash('error', gt('You do not have permission to delete user groups'));\n            expHistory::back();\n        }\n\n        if (empty($this->params['id'])) {\n            flash('error', gt('No group selected.'));\n            expHistory::back();\n        }\n\n        // remove group members\n        $db->delete('groupmembership', 'group_id=' . $this->params['id']);\n\n        // remove group permissions\n        $db->delete('grouppermission', 'gid=' . $this->params['id']);\n\n        // remove group\n        $db->delete('group', 'id=' . $this->params['id']);\n        expHistory::back();\n    }\n\n    public function toggle_extension() {\n        global $db;\n        if (isset($this->params['id'])) $db->toggle('profileextension', 'active', 'id=' . $this->params['id']);\n        expHistory::back();\n    }\n\n    public function update_memberships() {\n//        global $user, $db;\n        global $db;\n\n        //$memb = $db->selectObject('groupmembership','member_id='.$user->id.' AND group_id='.$this->params['id'].' AND is_admin=1');\n        $group = $db->selectObject('group', 'id=' . $this->params['id']);\n\n        $db->delete('groupmembership', 'group_id=' . $group->id);\n        $memb = new stdClass();\n        $memb->group_id = $group->id;\n        if ($this->params['memdata'] != \"\") {\n            foreach ($this->params['memdata'] as $u => $str) {\n                $memb->member_id = $u;\n                $memb->is_admin = $str['is_admin'];\n                $db->insertObject($memb, 'groupmembership');\n            }\n        }\n        expSession::triggerRefresh();\n        expHistory::back();\n    }\n\n    public function getUsersByJSON() {\n        $modelname = $this->basemodel_name;\n        $results = 25; // default get 25\n        $startIndex = 0; // default start at 0\n        $sort = null; // default don't sort\n        $dir = 'asc'; // default sort dir is asc\n        $sort_dir = SORT_ASC;\n\n        // How many records to get?\n        if (strlen($this->params['results']) > 0) {\n            $results = intval($this->params['results']);\n        }\n\n        // Start at which record?\n        if (strlen($this->params['startIndex']) > 0) {\n            $startIndex = intval($this->params['startIndex']);\n        }\n\n        // Sorted?\n        if (strlen($this->params['sort']) > 0) {\n            $sort = expString::escape($this->params['sort']);\n            if ($sort = 'id') $sort = 'username';\n        }\n\n        if (!empty($this->params['filter'])) {\n            switch ($this->params['filter']) {\n                case '1' :\n                    $filter = '';\n                    break;\n                case '2' :\n                    $filter = \"is_system_user != 1\";\n                    break;\n                case '3' :\n                    $filter = \"is_admin != 1\";\n            }\n        }\n\n//        if (!empty($_GET['filter'])) {\n//            switch ($_GET['filter']) {\n//                case '1' :\n//                    $filter = '';\n//                    break;\n//                case '2' :\n//                    $filter = \"is_system_user != 1\";\n//                    break;\n//                case '3' :\n//                    $filter = \"is_admin != 1\";\n//            }\n//        }\n\n        // Sort dir?\n        if ((strlen($this->params['dir']) > 0) && ($this->params['dir'] == 'desc')) {\n            $dir = 'desc';\n            $sort_dir = SORT_DESC;\n        } else {\n            $dir = 'asc';\n            $sort_dir = SORT_ASC;\n        }\n\n        if (!empty($this->params['query'])) {\n\n            $this->params['query'] = expString::escape($this->params['query']);\n            $totalrecords = $this->$modelname->find('count', (empty($filter) ? '' : $filter . \" AND \") . \"(username LIKE '%\" . $this->params['query'] . \"%' OR firstname LIKE '%\" . $this->params['query'] . \"%' OR lastname LIKE '%\" . $this->params['query'] . \"%' OR email LIKE '%\" . $this->params['query'] . \"%')\");\n\n            $users = $this->$modelname->find('all', (empty($filter) ? '' : $filter . \" AND \") . \"(username LIKE '%\" . $this->params['query'] . \"%' OR firstname LIKE '%\" . $this->params['query'] . \"%' OR lastname LIKE '%\" . $this->params['query'] . \"%' OR email LIKE '%\" . $this->params['query'] . \"%')\", $sort . ' ' . $dir, $results, $startIndex);\n            for ($i = 0, $iMax = count($users); $i < $iMax; $i++) {\n                if (ECOM == 1) {\n                    $users[$i]->usernamelabel = \"<a href='viewuser/{$users[$i]->id}'  class='fileinfo'>{$users[$i]->username}</a>\";\n                } else {\n                    $users[$i]->usernamelabel = $users[$i]->username;\n                }\n            }\n\n            $returnValue = array(\n                'recordsReturned' => count($users),\n                'totalRecords'    => $totalrecords,\n                'startIndex'      => $startIndex,\n                'sort'            => $sort,\n                'dir'             => $dir,\n                'pageSize'        => $results,\n                'records'         => $users\n            );\n        } else {\n\n            $totalrecords = $this->$modelname->find('count', $filter);\n\n            $users = $this->$modelname->find('all', $filter, $sort . ' ' . $dir, $results, $startIndex);\n\n            for ($i = 0, $iMax = count($users); $i < $iMax; $i++) {\n                if (ECOM == 1) {\n                    $users[$i]->usernamelabel = \"<a href='viewuser/{$users[$i]->id}'  class='fileinfo'>{$users[$i]->username}</a>\";\n                } else {\n                    $users[$i]->usernamelabel = $users[$i]->username;\n                }\n            }\n\n            $returnValue = array(\n                'recordsReturned' => count($users),\n                'totalRecords'    => $totalrecords,\n                'startIndex'      => $startIndex,\n                'sort'            => $sort,\n                'dir'             => $dir,\n                'pageSize'        => $results,\n                'records'         => $users\n            );\n\n        }\n\n        echo json_encode($returnValue);\n    }\n\n    public function viewuser() {\n        global $user;\n\n        if (!empty($this->params['id'])) {\n            $u = new user($this->params['id']);\n        } elseif (!empty($user->id)) {\n            $u = $user;\n        } else {\n            flash('error', gt('You may not view this user'));\n            expHistory::back();\n        }\n        $address = new address();\n\n        $billings = $address->find('all', 'user_id=' . $u->id . ' AND is_billing = 1');\n        $shippings = $address->find('all', 'user_id=' . $u->id . ' AND is_shipping = 1');\n\n        // build out a SQL query that gets all the data we need and is sortable.\n        $sql = 'SELECT o.*, b.firstname as firstname, b.billing_cost as total, b.middlename as middlename, b.lastname as lastname, os.title as status, ot.title as order_type ';\n        $sql .= 'FROM ' . DB_TABLE_PREFIX . '_orders o, ' . DB_TABLE_PREFIX . '_billingmethods b, ';\n        $sql .= DB_TABLE_PREFIX . '_order_status os, ';\n        $sql .= DB_TABLE_PREFIX . '_order_type ot ';\n        $sql .= 'WHERE o.id = b.orders_id AND o.order_status_id = os.id AND o.order_type_id = ot.id AND o.purchased > 0 AND user_id =' . $u->id;\n\n        $limit = (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10;\n        $order = !empty($this->params['order']) ? $this->params['order'] : 'purchased';\n        $dir = !empty($this->params['dir']) ? $this->params['dir'] : 'DESC';\n        //eDebug($sql, true);\n        $orders = new expPaginator(array(\n            //'model'=>'order',\n            'sql'        => $sql,\n            'limit'      => $limit,\n            'order'      => $order,\n            'dir'        => $dir,\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns'    => array(\n                gt('Order #')        => 'invoice_id',\n                gt('Total')          => 'total',\n                gt('Date Purchased') => 'purchased',\n//                gt('Type')           => 'order_type_id',\n                gt('Status')         => 'order_status_id',\n                gt('Ref')            => 'orig_referrer',\n            ),\n            'controller' => $this->params['controller'],\n            'action'     => $this->params['action'],\n        ));\n\n        assign_to_template(array(\n            'u'         => $u,\n            'billings'  => $billings,\n            'shippings' => $shippings,\n            'orders'    => $orders,\n        ));\n    }\n\n    public function userperms() {\n        global $user;\n\n        if (!empty($this->params['mod']) && $user->isAdmin()) {\n            $loc = expCore::makeLocation($this->params['mod'], isset($this->params['src']) ? $this->params['src'] : null, isset($this->params['int']) ? $this->params['int'] : null);\n            $users = array();\n            $modclass = expModules::getModuleClassName(($loc->mod));\n            $mod = new $modclass();\n            $perms = $mod->permissions($loc->int);\n            $have_users = 0;\n            foreach (user::getAllUsers(false) as $u) {\n                $have_users = 1;\n                foreach ($perms as $perm => $name) {\n//        \t\t\t$var = 'perms_'.$perm;\n                    if (expPermissions::checkUser($u, $perm, $loc, true)) {\n                        $u->$perm = 1;\n                    } else if (expPermissions::checkUser($u, $perm, $loc)) {\n                        $u->$perm = 2;\n                    } else {\n                        $u->$perm = 0;\n                    }\n                }\n                $users[] = $u;\n            }\n\n            $p[gt(\"User Name\")] = 'username';\n            $p[gt(\"First Name\")] = 'firstname';\n            $p[gt(\"Last Name\")] = 'lastname';\n            foreach ($mod->permissions() as $value) {\n                //        $p[gt($value)]=$key;\n                $p[gt($value)] = 'no-sort';\n            }\n\n//            if (SEF_URLS == 1) {\n                $page = new expPaginator(array(\n                    //'model'=>'user',\n//                    'limit'      => (isset($this->params['limit']) ? $this->params['limit'] : 20),\n                    'records'    => $users,\n                    //'sql'=>$sql,\n                    'order'      => (isset($this->params['order']) ? $this->params['order'] : 'username'),\n                    'dir'        => (isset($this->params['dir']) ? $this->params['dir'] : 'ASC'),\n                    'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n                    'controller' => $this->params['controller'],\n                    'action'     => $this->params['action'],\n                    'columns'    => $p,\n                ));\n//            } else {\n//                $page = new expPaginator(array(\n//                    //'model'=>'user',\n////                    'limit'      => (isset($this->params['limit']) ? $this->params['limit'] : 20),\n//                    'records'    => $users,\n//                    //'sql'=>$sql,\n//                    'order'      => (isset($this->params['order']) ? $this->params['order'] : 'username'),\n//                    'dir'        => (isset($this->params['dir']) ? $this->params['dir'] : 'ASC'),\n//                    'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n//                    'controller' => $this->params['module'],\n//                    'action'     => $this->params['action'],\n//                    'columns'    => $p,\n//                ));\n//            }\n\n            assign_to_template(array(\n                'user_form'  => 1,\n                'have_users' => $have_users,\n                'users'      => $users,\n                'page'       => $page,\n                'perms'      => $perms,\n                'loc'        => $loc,\n//                'title'=>($modclass != 'navigationController' || ($modclass == 'navigationController' && !empty($loc->src))) ? $mod->name().' '.($modclass != 'containermodule' ? gt('module') : '').' ' : gt('Page'),\n                'title'      => ($loc->mod != 'navigation' || ($loc->mod == 'navigation' && !empty($loc->src))) ? $mod->name() . ' ' . ($loc->mod != 'container' ? gt('module') : '') . ' ' : gt('Page'),\n            ));\n        } else {\n//            echo SITE_403_HTML;\n            notfoundController::handle_not_authorized();\n        }\n    }\n\n    public function userperms_save() {\n        global $user;\n\n        $loc = expCore::makeLocation($this->params['mod'], isset($this->params['src']) ? $this->params['src'] : null, isset($this->params['int']) ? $this->params['int'] : null);\n        foreach ($this->params['users'] as $u) {\n            expPermissions::revokeAll($u, $loc);\n        }\n        foreach ($this->params['permdata'] as $k => $user_str) {\n            $perms = array_keys($user_str);\n            $u = user::getUserById($k);\n            for ($i = 0, $iMax = count($perms); $i < $iMax; $i++) {\n                expPermissions::grant($u, $perms[$i], $loc);\n            }\n\n            if ($k == $user->id) {\n                expPermissions::load($user);\n            }\n        }\n        expSession::triggerRefresh();\n        expHistory::back();\n    }\n\n    public function groupperms() {\n        global $user;\n\n        if (!empty($this->params['mod']) && $user->isAdmin()) {\n            $loc = expCore::makeLocation($this->params['mod'], isset($this->params['src']) ? $this->params['src'] : null, isset($this->params['int']) ? $this->params['int'] : null);\n            $users = array(); // users = groups\n            $modclass = expModules::getModuleClassName($loc->mod);\n            $mod = new $modclass();\n            $perms = $mod->permissions($loc->int);\n\n            foreach (group::getAllGroups() as $g) {\n                foreach ($perms as $perm => $name) {\n//        \t\t\t$var = 'perms_'.$perm;\n                    if (expPermissions::checkGroup($g, $perm, $loc, true)) {\n                        $g->$perm = 1;\n                    } else if (expPermissions::checkGroup($g, $perm, $loc)) {\n                        $g->$perm = 2;\n                    } else {\n                        $g->$perm = 0;\n                    }\n                }\n                $users[] = $g;\n            }\n\n            $p[gt(\"Group\")] = 'username';\n            foreach ($mod->permissions() as $value) {\n                //        $p[gt($value)]=$key;\n                $p[gt($value)] = 'no-sort';\n            }\n\n//            if (SEF_URLS == 1) {\n                $page = new expPaginator(array(\n                    //'model'=>'user',\n//                    'limit'      => (isset($this->params['limit']) ? $this->params['limit'] : 20),\n                    'records'    => $users,\n                    //'sql'=>$sql,\n                    'order'      => (isset($this->params['order']) ? $this->params['order'] : 'name'),\n                    'dir'        => (isset($this->params['dir']) ? $this->params['dir'] : 'ASC'),\n                    'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n                    'controller' => $this->params['controller'],\n                    'action'     => $this->params['action'],\n                    'columns'    => $p,\n                ));\n//            } else {\n//                $page = new expPaginator(array(\n//                    //'model'=>'user',\n////                    'limit'      => (isset($this->params['limit']) ? $this->params['limit'] : 20),\n//                    'records'    => $users,\n//                    //'sql'=>$sql,\n//                    'order'      => (isset($this->params['order']) ? $this->params['order'] : 'name'),\n//                    'dir'        => (isset($this->params['dir']) ? $this->params['dir'] : 'ASC'),\n//                    'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n//                    'controller' => $this->params['module'],\n//                    'action'     => $this->params['action'],\n//                    'columns'    => $p,\n//                ));\n//            }\n\n            assign_to_template(array(\n                'user_form'  => 0,\n                'is_group'   => 1,\n                'have_users' => count($users) > 0, // users = groups\n                'users'      => $users,\n                'page'       => $page,\n                'perms'      => $perms,\n                'loc'        => $loc,\n//                'title'=>($modclass != 'navigationController' || ($modclass == 'navigationController' && !empty($loc->src))) ? $mod->name().' '.($modclass != 'containermodule' ? gt('module') : '').' ' : gt('Page'),\n                'title'      => ($loc->mod != 'navigation' || ($loc->mod == 'navigation' && !empty($loc->src))) ? $mod->name() . ' ' . ($loc->mod != 'container' ? gt('module') : '') . ' ' : gt('Page'),\n            ));\n        } else {\n//            echo SITE_403_HTML;\n            notfoundController::handle_not_authorized();\n        }\n    }\n\n    public function groupperms_save() {\n        $loc = expCore::makeLocation($this->params['mod'], isset($this->params['src']) ? $this->params['src'] : null, isset($this->params['int']) ? $this->params['int'] : null);\n        foreach ($this->params['users'] as $g) {\n            expPermissions::revokeAllGroup($g, $loc);\n        }\n        foreach ($this->params['permdata'] as $k => $group_str) {\n            $perms = array_keys($group_str);\n            $g = group::getGroupById($k);\n            for ($i = 0, $iMax = count($perms); $i < $iMax; $i++) {\n                expPermissions::grantGroup($g, $perms[$i], $loc);\n            }\n        }\n        expSession::triggerRefresh();\n        expHistory::back();\n    }\n\n    public function import() {\n        if (expFile::canCreate(BASE . \"tmp/test\") != SYS_FILES_SUCCESS) {\n            assign_to_template(array(\n                \"error\" => \"The /tmp directory is not writable.  Please contact your administrator.\",\n            ));\n        } else {\n            //Setup the arrays with the name/value pairs for the dropdown menus\n            $delimiterArray = Array(\n                ',' => gt('Comma'),\n                ';' => gt('Semicolon'),\n                ':' => gt('Colon'),\n                ' ' => gt('Space'));\n\n//            //Setup the mete data (hidden values)\n//            $form = new form();\n//            $form->meta(\"controller\", \"users\");\n//            $form->meta(\"action\", \"import_users_mapper\");\n//\n//            //Register the dropdown menus\n//            $form->register(\"delimiter\", gt('Delimiter Character'), new dropdowncontrol(\",\", $delimiterArray));\n//            $form->register(\"upload\", gt('CSV File to Upload'), new uploadcontrol());\n//            $form->register(\"use_header\", gt('First Row is a Header'), new checkboxcontrol(0, 0));\n//            $form->register(\"rowstart\", gt('User Data begins in Row'), new textcontrol(\"1\", 1, 0, 6));\n//            $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n            assign_to_template(array(\n//                \"form_html\" => $form->tohtml(),\n                'delimiters' => $delimiterArray,\n            ));\n        }\n    }\n\n    public function import_users_mapper() {\n        //Check to make sure the user filled out the required input.\n        //FIXME needs to be the newer fail form\n        if (!is_numeric($this->params[\"rowstart\"])) {\n            unset($this->params[\"rowstart\"]);\n            $this->params['_formError'] = gt('The starting row must be a number.');\n            expSession::set(\"last_POST\", $this->params);\n            header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n            exit('Redirecting...');\n        }\n\n        //Get the temp directory to put the uploaded file\n        $directory = \"tmp\";\n\n        //Get the file save it to the temp directory\n        if ($_FILES[\"upload\"][\"error\"] == UPLOAD_ERR_OK) {\n            //\t$file = file::update(\"upload\",$directory,null,time().\"_\".$_FILES['upload']['name']);\n            $file = expFile::fileUpload(\"upload\", false, false, time() . \"_\" . $_FILES['upload']['name'], $directory.'/');\n            if ($file == null) {\n                switch ($_FILES[\"upload\"][\"error\"]) {\n                    case UPLOAD_ERR_INI_SIZE:\n                    case UPLOAD_ERR_FORM_SIZE:\n                        $this->params['_formError'] = gt('The file you attempted to upload is too large.  Contact your system administrator if this is a problem.');\n                        break;\n                    case UPLOAD_ERR_PARTIAL:\n                        $this->params['_formError'] = gt('The file was only partially uploaded.');\n                        break;\n                    case UPLOAD_ERR_NO_FILE:\n                        $this->params['_formError'] = gt('No file was uploaded.');\n                        break;\n                    default:\n                        $this->params['_formError'] = gt('A strange internal error has occurred.  Please contact the Exponent Developers.');\n                        break;\n                }\n                expSession::set(\"last_POST\", $this->params);\n                header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n                exit(\"\");\n            }\n        }\n        /*\n        if (mime_content_type(BASE.$directory.\"/\".$file->filename) != \"text/plain\"){\n            $this->params['_formError'] = \"File is not a delimited text file.\";\n            expSession::set(\"last_POST\",$this->params);\n            header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n            exit(\"\");\n        }\n        */\n\n        //split the line into its columns\n        $headerinfo = null;\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $fh = fopen(BASE . $directory . \"/\" . $file->filename, \"r\");\n        if (!empty($this->params[\"use_header\"])) $this->params[\"rowstart\"]++;\n        for ($x = 0; $x < $this->params[\"rowstart\"]; $x++) {\n            $lineInfo = fgetcsv($fh, 2000, $this->params[\"delimiter\"]);\n            if ($x == 0 && !empty($this->params[\"use_header\"])) $headerinfo = $lineInfo;\n        }\n\n        $colNames = array(\n            \"none\"      => gt('--Disregard this column--'),\n            \"username\"  => gt('Username'),\n            \"password\"  => gt('Password'),\n            \"firstname\" => gt('First Name'),\n            \"lastname\"  => gt('Last Name'),\n            \"email\"     => gt('Email Address')\n        );\n\n        //Check to see if the line got split, otherwise throw an error\n        if ($lineInfo == null) {\n            $this->params['_formError'] = sprintf(gt('This file does not appear to be delimited by \"%s\". <br />Please specify a different delimiter.<br /><br />'), $this->params[\"delimiter\"]);\n            expSession::set(\"last_POST\", $this->params);\n            header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n            exit(\"\");\n        } else {\n            //Setup the meta data (hidden values)\n            $form = new form();\n            $form->meta(\"controller\", \"users\");\n            $form->meta(\"action\", \"import_users_process\");\n            $form->meta(\"rowstart\", $this->params[\"rowstart\"]);\n            $form->meta(\"use_header\", $this->params[\"use_header\"]);\n            $form->meta(\"filename\", $directory . \"/\" . $file->filename);\n            $form->meta(\"delimiter\", $this->params[\"delimiter\"]);\n            for ($i = 0, $iMax = count($lineInfo); $i < $iMax; $i++) {\n                if ($headerinfo != null) {\n                    $title = $headerinfo[$i] . ' (' . $lineInfo[$i] .')';\n                    if (array_key_exists($headerinfo[$i], $colNames)) {\n                        $default = $headerinfo[$i];\n                    } else {\n                        $default = \"none\";\n                    }\n                } else {\n                    $title = $lineInfo[$i];\n                    $default = \"none\";\n                }\n                $form->register(\"column[$i]\", $title, new dropdowncontrol($default, $colNames));\n            }\n            $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n            assign_to_template(array(\n                \"form_html\" => $form->tohtml(),\n            ));\n        }\n    }\n\n    public function import_users_process() {\n        if (in_array(\"username\", $this->params[\"column\"]) == false) {\n            $unameOptions = array(\n                \"FILN\"    => gt('First Initial / Last Name'),\n                \"FILNNUM\" => gt('First Initial / Last Name / Random Number'),\n                \"EMAIL\"   => gt('Email Address'),\n                \"FNLN\"    => gt('First Name / Last Name'));\n        } else {\n            $unameOptions = array(\"INFILE\" => gt('Username Specified in CSV File'));\n        }\n\n        if (in_array(\"password\", $this->params[\"column\"]) == false) {\n            $pwordOptions = array(\n                \"RAND\"    => gt('Generate Random Passwords'),\n                \"DEFPASS\" => gt('Use the Default Password Supplied Below'));\n        } else {\n            $pwordOptions = array(\"INFILE\" => gt('Password Specified in CSV File'));\n        }\n        if (count($pwordOptions) == 1) {\n            $disabled = true;\n        } else {\n            $disabled = false;\n        }\n\n//        $form = new form();\n//        $form->meta(\"controller\", \"users\");\n//        $form->meta(\"action\", \"import_users_display\");\n//        $form->meta(\"column\", $this->params[\"column\"]);\n//        $form->meta(\"delimiter\", $this->params[\"delimiter\"]);\n//        $form->meta(\"use_header\", $this->params[\"use_header\"]);\n//        $form->meta(\"filename\", $this->params[\"filename\"]);\n//        $form->meta(\"rowstart\", $this->params[\"rowstart\"]);\n//\n//        $form->register(\"unameOptions\", gt('User Name Generations Options'), new dropdowncontrol(\"INFILE\", $unameOptions));\n//        $form->register(\"pwordOptions\", gt('Password Generation Options'), new dropdowncontrol(\"defpass\", $pwordOptions));\n//        $form->register(\"pwordText\", gt('Default Password'), new textcontrol(\"\", 10, $disabled));\n//        $form->register(\"update\", gt('Update users already in database, instead of creating new user?'), new checkboxcontrol(0, 0));\n//        $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n        assign_to_template(array(\n//            \"form_html\" => $form->tohtml(),\n            'uname_options' => $unameOptions,\n            'pword_options' => $pwordOptions,\n            'pword_disabled' => $disabled,\n            'params' => $this->params\n        ));\n    }\n\n    public function import_users_display() {\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $file = fopen(BASE . $this->params[\"filename\"], \"r\");\n        $userinfo = array();\n        $userarray = array();\n        $usersdone = array();\n        $linenum = 1;\n\n        while (($filedata = fgetcsv($file, 2000, $this->params[\"delimiter\"])) != false) {\n\n            if ($linenum >= $this->params[\"rowstart\"]) {\n                $i = 0;\n\n                $userinfo['username'] = \"\";\n                $userinfo['firstname'] = \"\";\n                $userinfo['lastname'] = \"\";\n                $userinfo['is_admin'] = 0;\n                $userinfo['is_acting_admin'] = 0;\n//                $userinfo['is_locked'] = 0;\n                $userinfo['email'] = '';\n                $userinfo['changed'] = \"\";\n\n                foreach ($filedata as $field) {\n                    if (!empty($this->params[\"column\"][$i]) && $this->params[\"column\"][$i] != \"none\") {\n                        $colname = $this->params[\"column\"][$i];\n                        $userinfo[$colname] = trim($field);\n                    } else {\n                        unset($this->params['column'][$i]);\n                    }\n                    $i++;\n                }\n\n                switch ($this->params[\"unameOptions\"]) {\n                    case \"FILN\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname']{0} . $userinfo['lastname']));\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"FILNNUM\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname']{0} . $userinfo['lastname'] . mt_rand(100, 999)));\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"EMAIL\":\n                        if ($userinfo['email'] != \"\") {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['email']));\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"FNLN\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname'] . $userinfo['lastname']));\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"INFILE\":\n                        if ($userinfo['username'] != \"\") {\n                            $userinfo['username'] = str_replace(\" \", \"\", $userinfo['username']);\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                }\n\n                if ((!isset($userinfo['changed'])) || ($userinfo['changed'] != \"skipped\")) {\n//                    switch ($this->params[\"pwordOptions\"]) {\n//                        case \"RAND\":\n//                            $newpass = \"\";\n//                            for ($i = 0; $i < mt_rand(12, 20); $i++) {\n//                                $num = mt_rand(48, 122);\n//                                if (($num > 97 && $num < 122) || ($num > 65 && $num < 90) || ($num > 48 && $num < 57)) $newpass .= chr($num);\n//                                else $i--;\n//                            }\n//                            $userinfo['clearpassword'] = $newpass;\n//                            break;\n//                        case \"DEFPASS\":\n//                            $userinfo['clearpassword'] = str_replace(\" \", \"\", trim($this->params[\"pwordText\"]));\n//                            break;\n//                    }\n//\n//                    $userinfo['password'] = user::encryptPassword($userinfo['clearpassword']);\n\n                    $suffix = \"\";\n                    while (user::getUserByName($userinfo['username'] . $suffix) != null) { //username already exists\n                        if (!empty($this->params[\"update\"])) {\n                            if (in_array($userinfo['username'], $usersdone)) {\n                                $suffix = '-rand-' . mt_rand(100, 999);\n                            } else {\n                                $tmp = user::getUserByName($userinfo['username'] . $suffix);\n                                $userinfo['id'] = $tmp->id;\n                                $userinfo['changed'] = 1;\n                                break;\n                            }\n                        } else {\n                            $suffix = '-rand-' . mt_rand(100, 999);\n                        }\n                    }\n\n                    $userinfo['username'] = $userinfo['username'] . $suffix;\n                    $userinfo['linenum'] = $linenum;\n                    $userarray[] = $userinfo;\n                    $usersdone[] = $userinfo['username'];\n                } else {\n                    $userinfo['linenum'] = $linenum;\n                    $userarray[] = $userinfo;\n                }\n            }\n            $linenum++;\n        }\n        assign_to_template(array(\n            \"userarray\" => $userarray,\n            \"params\" => $this->params,\n        ));\n    }\n\n    public function import_users_add() {\n        if (!empty($this->params['filename']) && (strpos($this->params['filename'], 'tmp/') === false || strpos($this->params['folder'], '..') !== false)) {\n            header('Location: ' . URL_FULL);\n            exit();  // attempt to hack the site\n        }\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $file = fopen(BASE . $this->params[\"filename\"], \"r\");\n        $userinfo = array();\n        $userarray = array();\n        $usersdone = array();\n        $linenum = 1;\n\n        while (($filedata = fgetcsv($file, 2000, $this->params[\"delimiter\"])) != false) {\n\n            if ($linenum >= $this->params[\"rowstart\"] && in_array($linenum,$this->params['importuser'])) {\n                $i = 0;\n\n                $userinfo['username'] = \"\";\n                $userinfo['firstname'] = \"\";\n                $userinfo['lastname'] = \"\";\n                $userinfo['is_admin'] = 0;\n                $userinfo['is_acting_admin'] = 0;\n//                $userinfo['is_locked'] = 0;\n                $userinfo['email'] = '';\n                $userinfo['changed'] = \"\";\n\n                foreach ($filedata as $field) {\n                    if ($this->params[\"column\"][$i] != \"none\") {\n                        $colname = $this->params[\"column\"][$i];\n                        $userinfo[$colname] = trim($field);\n                    }\n                    $i++;\n                }\n\n                switch ($this->params[\"unameOptions\"]) {\n                    case \"FILN\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname']{0} . $userinfo['lastname']));\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"FILNNUM\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname']{0} . $userinfo['lastname'] . mt_rand(100, 999)));\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"EMAIL\":\n                        if ($userinfo['email'] != \"\") {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['email']));\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"FNLN\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname'] . $userinfo['lastname']));\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"INFILE\":\n                        if ($userinfo['username'] != \"\") {\n                            $userinfo['username'] = str_replace(\" \", \"\", $userinfo['username']);\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                }\n\n                if ((!isset($userinfo['changed'])) || ($userinfo['changed'] != \"skipped\")) {\n                    switch ($this->params[\"pwordOptions\"]) {\n                        case \"RAND\":\n                            $newpass = \"\";\n                            for ($i = 0, $iMax = mt_rand(12, 20); $i < $iMax; $i++) {\n                                $num = mt_rand(48, 122);\n                                if (($num > 97 && $num < 122) || ($num > 65 && $num < 90) || ($num > 48 && $num < 57)) $newpass .= chr($num);\n                                else $i--;\n                            }\n                            $userinfo['clearpassword'] = $newpass;\n                            break;\n                        case \"DEFPASS\":\n                            $userinfo['clearpassword'] = str_replace(\" \", \"\", trim($this->params[\"pwordText\"]));\n                            break;\n                    }\n\n                    $userinfo['password'] = user::encryptPassword($userinfo['clearpassword']);\n\n                    $suffix = \"\";\n                    while (user::getUserByName($userinfo['username'] . $suffix) != null) { //username already exists\n                        if (!empty($this->params[\"update\"])) {\n                            if (in_array($userinfo['username'], $usersdone)) {  // username exists because we already created it\n                                $suffix = mt_rand(100, 999);\n                            } else {\n                                $tmp = user::getUserByName($userinfo['username'] . $suffix);\n                                $userinfo['id'] = $tmp->id;\n                                $userinfo['changed'] = 1;\n                                break;\n                            }\n                        } else {\n                            $suffix = mt_rand(100, 999);\n                        }\n                    }\n\n                    $userinfo['username'] = $userinfo['username'] . $suffix;\n                    $newuser = new user($userinfo);\n                    $newuser->update();\n                    $userinfo['linenum'] = $linenum;\n                    $userarray[] = $userinfo;\n                    $usersdone[] = $userinfo['username'];\n                    if (USER_REGISTRATION_SEND_WELCOME && $this->params['sendemail'] && !empty($newuser->email)) {\n                        $msg = $newuser->firstname . \", \\n\\n\";\n                        $msg .= sprintf(USER_REGISTRATION_WELCOME_MSG, $newuser->firstname, $newuser->lastname, $newuser->username);\n                        $msg .= \"/n/nYour new password is: \".$userinfo['clearpassword'];\n                        $mail = new expMail();\n                        $mail->quickSend(array(\n                            'text_message' => $msg,\n                            'to'           => array(trim($newuser->email) => trim(user::getUserAttribution($newuser->id))),\n                            'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n                            'subject'      => USER_REGISTRATION_WELCOME_SUBJECT,\n                        ));\n                    }\n                } else {\n                    $userinfo['linenum'] = $linenum;\n                    $userarray[] = $userinfo;\n                }\n            }\n            $linenum++;\n        }\n        fclose($file);\n        ini_set('auto_detect_line_endings',$line_end);\n        assign_to_template(array(\n            \"userarray\" => $userarray,\n        ));\n        unlink(BASE . $this->params[\"filename\"]);\n    }\n\n    public function sync_LDAPUsers() {\n        if (USE_LDAP == 1 && function_exists('ldap_connect')) {\n            $ldap = new expLDAP();\n            $updated = $ldap->syncLDAPUsers();\n            $ldap->close();\n            flash('message', $updated.' '.gt('LDAP Users Updated'));\n        }\n    }\n\n}\n\n?>"], "filenames": ["cron/find_help.php", "framework/modules/ecommerce/controllers/cartController.php", "framework/modules/ecommerce/controllers/purchaseOrderController.php", "framework/modules/ecommerce/controllers/storeController.php", "framework/modules/file/controllers/fileController.php", "framework/modules/users/controllers/usersController.php"], "buggy_code_start_loc": [42, 77, 122, 857, 255, 845], "buggy_code_end_loc": [43, 1216, 123, 1810, 283, 901], "fixing_code_start_loc": [42, 77, 122, 857, 255, 845], "fixing_code_end_loc": [43, 1216, 123, 1815, 285, 899], "type": "CWE-20", "message": "Exponent CMS before 2.6.0 has improper input validation in usersController.php.", "other": {"cve": {"id": "CVE-2016-9022", "sourceIdentifier": "cve@mitre.org", "published": "2020-12-31T03:15:12.280", "lastModified": "2021-01-04T20:11:49.087", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Exponent CMS before 2.6.0 has improper input validation in usersController.php."}, {"lang": "es", "value": "Exponent CMS versiones anteriores a 2.6.0, presenta una comprobaci\u00f3n inapropiada de la entrada en el archivo usersController.php."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:exponentcms:exponent_cms:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.6.0", "matchCriteriaId": "289C9975-962A-4030-A17C-EDBEAB16B590"}]}]}], "references": [{"url": "https://exponentcms.lighthouseapp.com/projects/61783/changesets/a8efd9ca71fc9b8b843ad0910d435d237482ee31", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/exponentcms/exponent-cms/commit/a8efd9ca71fc9b8b843ad0910d435d237482ee31", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/exponentcms/exponent-cms/commit/a8efd9ca71fc9b8b843ad0910d435d237482ee31"}}