{"buggy_code": ["/*****************************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one                *\n * or more contributor license agreements.  See the NOTICE file              *\n * distributed with this work for additional information                     *\n * regarding copyright ownership.  The ASF licenses this file                *\n * to you under the Apache License, Version 2.0 (the                         *\n * \"License\"); you may not use this file except in compliance                *\n * with the License.  You may obtain a copy of the License at                *\n *                                                                           *\n *     http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                           *\n * Unless required by applicable law or agreed to in writing,                *\n * software distributed under the License is distributed on an               *\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY                    *\n * KIND, either express or implied.  See the License for the                 *\n * specific language governing permissions and limitations                   *\n * under the License.                                                        *\n *                                                                           *\n *                                                                           *\n * This file is part of the BeanShell Java Scripting distribution.           *\n * Documentation and updates may be found at http://www.beanshell.org/       *\n * Patrick Niemeyer (pat@pat.net)                                            *\n * Author of Learning Java, O'Reilly & Associates                            *\n *                                                                           *\n *****************************************************************************/\n\n\n\npackage bsh;\n\nimport java.lang.reflect.*;\nimport java.lang.reflect.InvocationHandler;\nimport java.io.*;\nimport java.util.Hashtable;\n\n/**\n\tXThis is a dynamically loaded extension which extends This.java and adds \n\tsupport for the generalized interface proxy mechanism introduced in \n\tJDK1.3.  XThis allows bsh scripted objects to implement arbitrary \n\tinterfaces (be arbitrary event listener types).\n\n\tNote: This module relies on new features of JDK1.3 and will not compile\n\twith JDK1.2 or lower.  For those environments simply do not compile this\n\tclass.\n\n\tEventually XThis should become simply This, but for backward compatibility\n\twe will maintain This without requiring support for the proxy mechanism.\n\n\tXThis stands for \"eXtended This\" (I had to call it something).\n\t\n\t@see JThis\t See also JThis with explicit JFC support for compatibility.\n\t@see This\t\n*/\npublic class XThis extends This \n\t{\n\t/**\n\t\tA cache of proxy interface handlers.\n\t\tCurrently just one per interface.\n\t*/\n\tHashtable interfaces;\n\n\tInvocationHandler invocationHandler = new Handler();\n\n\tpublic XThis( NameSpace namespace, Interpreter declaringInterp ) { \n\t\tsuper( namespace, declaringInterp ); \n\t}\n\n\tpublic String toString() {\n\t\treturn \"'this' reference (XThis) to Bsh object: \" + namespace;\n\t}\n\n\t/**\n\t\tGet dynamic proxy for interface, caching those it creates.\n\t*/\n\tpublic Object getInterface( Class clas ) \n\t{\n\t\treturn getInterface( new Class[] { clas } );\n\t}\n\n\t/**\n\t\tGet dynamic proxy for interface, caching those it creates.\n\t*/\n\tpublic Object getInterface( Class [] ca ) \n\t{\n\t\tif ( interfaces == null )\n\t\t\tinterfaces = new Hashtable();\n\n\t\t// Make a hash of the interface hashcodes in order to cache them\n\t\tint hash = 21;\n\t\tfor(int i=0; i<ca.length; i++)\n\t\t\thash *= ca[i].hashCode() + 3;\n\t\tObject hashKey = new Integer(hash);\n\n\t\tObject interf = interfaces.get( hashKey );\n\n\t\tif ( interf == null ) \n\t\t{\n\t\t\tClassLoader classLoader = ca[0].getClassLoader(); // ?\n\t\t\tinterf = Proxy.newProxyInstance( \n\t\t\t\tclassLoader, ca, invocationHandler );\n\t\t\tinterfaces.put( hashKey, interf );\n\t\t}\n\n\t\treturn interf;\n\t}\n\n\t/**\n\t\tThis is the invocation handler for the dynamic proxy.\n\t\t<p>\n\n\t\tNotes:\n\t\tInner class for the invocation handler seems to shield this unavailable\n\t\tinterface from JDK1.2 VM...  \n\t\t\n\t\tI don't understand this.  JThis works just fine even if those\n\t\tclasses aren't there (doesn't it?)  This class shouldn't be loaded\n\t\tif an XThis isn't instantiated in NameSpace.java, should it?\n\t*/\n\tclass Handler implements InvocationHandler, java.io.Serializable \n\t{\n\t\tpublic Object invoke( Object proxy, Method method, Object[] args ) \n\t\t\tthrows Throwable\n\t\t{\n\t\t\ttry { \n\t\t\t\treturn invokeImpl( proxy, method, args );\n\t\t\t} catch ( TargetError te ) {\n\t\t\t\t// Unwrap target exception.  If the interface declares that \n\t\t\t\t// it throws the ex it will be delivered.  If not it will be \n\t\t\t\t// wrapped in an UndeclaredThrowable\n\t\t\t\tthrow te.getTarget();\n\t\t\t} catch ( EvalError ee ) {\n\t\t\t\t// Ease debugging...\n\t\t\t\t// XThis.this refers to the enclosing class instance\n\t\t\t\tif ( Interpreter.DEBUG ) \n\t\t\t\t\tInterpreter.debug( \"EvalError in scripted interface: \"\n\t\t\t\t\t+ XThis.this.toString() + \": \"+ ee );\n\t\t\t\tthrow ee;\n\t\t\t}\n\t\t}\n\n\t\tpublic Object invokeImpl( Object proxy, Method method, Object[] args ) \n\t\t\tthrows EvalError \n\t\t{\n\t\t\tString methodName = method.getName();\n\t\t\tCallStack callstack = new CallStack( namespace );\n\n\t\t\t/*\n\t\t\t\tIf equals() is not explicitly defined we must override the \n\t\t\t\tdefault implemented by the This object protocol for scripted\n\t\t\t\tobject.  To support XThis equals() must test for equality with \n\t\t\t\tthe generated proxy object, not the scripted bsh This object;\n\t\t\t\totherwise callers from outside in Java will not see a the \n\t\t\t\tproxy object as equal to itself.\n\t\t\t*/\n\t\t\tBshMethod equalsMethod = null;\n\t\t\ttry {\n\t\t\t\tequalsMethod = namespace.getMethod( \n\t\t\t\t\t\"equals\", new Class [] { Object.class } );\n\t\t\t} catch ( UtilEvalError e ) {/*leave null*/ }\n\t\t\tif ( methodName.equals(\"equals\" ) && equalsMethod == null ) {\n\t\t\t\tObject obj = args[0];\n\t\t\t\treturn proxy == obj ? Boolean.TRUE : Boolean.FALSE;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t\tIf toString() is not explicitly defined override the default \n\t\t\t\tto show the proxy interfaces.\n\t\t\t*/\n\t\t\tBshMethod toStringMethod = null;\n\t\t\ttry {\n\t\t\t\ttoStringMethod = \n\t\t\t\t\tnamespace.getMethod( \"toString\", new Class [] { } );\n\t\t\t} catch ( UtilEvalError e ) {/*leave null*/ }\n\n\t\t\tif ( methodName.equals(\"toString\" ) && toStringMethod == null)\n\t\t\t{\n\t\t\t\tClass [] ints = proxy.getClass().getInterfaces();\n\t\t\t\t// XThis.this refers to the enclosing class instance\n\t\t\t\tStringBuffer sb = new StringBuffer( \n\t\t\t\t\tXThis.this.toString() + \"\\nimplements:\" );\n\t\t\t\tfor(int i=0; i<ints.length; i++)\n\t\t\t\t\tsb.append( \" \"+ ints[i].getName() \n\t\t\t\t\t\t+ ((ints.length > 1)?\",\":\"\") );\n\t\t\t\treturn sb.toString();\n\t\t\t}\n\n\t\t\tClass [] paramTypes = method.getParameterTypes();\n\t\t\treturn Primitive.unwrap( \n\t\t\t\tinvokeMethod( methodName, Primitive.wrap(args, paramTypes) ) );\n\t\t}\n\t};\n}\n\n\n\n", "/*****************************************************************************\r\n * Licensed to the Apache Software Foundation (ASF) under one                *\r\n * or more contributor license agreements.  See the NOTICE file              *\r\n * distributed with this work for additional information                     *\r\n * regarding copyright ownership.  The ASF licenses this file                *\r\n * to you under the Apache License, Version 2.0 (the                         *\r\n * \"License\"); you may not use this file except in compliance                *\r\n * with the License.  You may obtain a copy of the License at                *\r\n *                                                                           *\r\n *     http://www.apache.org/licenses/LICENSE-2.0                            *\r\n *                                                                           *\r\n * Unless required by applicable law or agreed to in writing,                *\r\n * software distributed under the License is distributed on an               *\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY                    *\r\n * KIND, either express or implied.  See the License for the                 *\r\n * specific language governing permissions and limitations                   *\r\n * under the License.                                                        *\r\n *                                                                           *\r\n/****************************************************************************/\r\n\r\npackage bsh;\r\n\r\nimport org.junit.Assert;\r\nimport org.junit.Test;\r\n\r\n/**\r\n * This tests serialization of the beanshell interpreter\r\n *\r\n * @author Jessen Yu\r\n */\r\npublic class BshSerializationTest {\r\n\r\n    /**\r\n     * Tests that Special.NULL_VALUE is correctly serialized/deserialized\r\n     *\r\n     * @throws Exception in case of failure\r\n     */\r\n    @Test\r\n    public void testNullValueSerialization() throws Exception {\r\n        final Interpreter origInterpreter = new Interpreter();\r\n        origInterpreter.eval(\"myNull = null;\");\r\n        Assert.assertNull(origInterpreter.eval(\"myNull\"));\r\n        final Interpreter deserInterpreter = TestUtil.serDeser(origInterpreter);\r\n        Assert.assertNull(deserInterpreter.eval(\"myNull\"));\r\n    }\r\n\r\n\r\n    /**\r\n     * Tests that Primitive.NULL is correctly serialized/deserialized\r\n     *\r\n     * @throws Exception in case of failure\r\n     */\r\n    @Test\r\n    public void testSpecialNullSerialization() throws Exception {\r\n        final Interpreter originalInterpreter = new Interpreter();\r\n        originalInterpreter.eval(\"myNull = null;\");\r\n        Assert.assertTrue((Boolean) originalInterpreter.eval(\"myNull == null\"));\r\n        final Interpreter deserInterpreter = TestUtil.serDeser(originalInterpreter);\r\n        Assert.assertTrue((Boolean) deserInterpreter.eval(\"myNull == null\"));\r\n    }\r\n}\r\n"], "fixing_code": ["/*****************************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one                *\n * or more contributor license agreements.  See the NOTICE file              *\n * distributed with this work for additional information                     *\n * regarding copyright ownership.  The ASF licenses this file                *\n * to you under the Apache License, Version 2.0 (the                         *\n * \"License\"); you may not use this file except in compliance                *\n * with the License.  You may obtain a copy of the License at                *\n *                                                                           *\n *     http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                           *\n * Unless required by applicable law or agreed to in writing,                *\n * software distributed under the License is distributed on an               *\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY                    *\n * KIND, either express or implied.  See the License for the                 *\n * specific language governing permissions and limitations                   *\n * under the License.                                                        *\n *                                                                           *\n *                                                                           *\n * This file is part of the BeanShell Java Scripting distribution.           *\n * Documentation and updates may be found at http://www.beanshell.org/       *\n * Patrick Niemeyer (pat@pat.net)                                            *\n * Author of Learning Java, O'Reilly & Associates                            *\n *                                                                           *\n *****************************************************************************/\n\n\n\npackage bsh;\n\nimport java.lang.reflect.*;\nimport java.lang.reflect.InvocationHandler;\nimport java.io.*;\nimport java.util.Hashtable;\n\n/**\n\tXThis is a dynamically loaded extension which extends This.java and adds\n\tsupport for the generalized interface proxy mechanism introduced in\n\tJDK1.3.  XThis allows bsh scripted objects to implement arbitrary\n\tinterfaces (be arbitrary event listener types).\n\n\tNote: This module relies on new features of JDK1.3 and will not compile\n\twith JDK1.2 or lower.  For those environments simply do not compile this\n\tclass.\n\n\tEventually XThis should become simply This, but for backward compatibility\n\twe will maintain This without requiring support for the proxy mechanism.\n\n\tXThis stands for \"eXtended This\" (I had to call it something).\n\n\t@see JThis\t See also JThis with explicit JFC support for compatibility.\n\t@see This\n*/\npublic class XThis extends This\n\t{\n\t/**\n\t\tA cache of proxy interface handlers.\n\t\tCurrently just one per interface.\n\t*/\n\tHashtable interfaces;\n\n\ttransient InvocationHandler invocationHandler = new Handler();\n\n\tpublic XThis( NameSpace namespace, Interpreter declaringInterp ) {\n\t\tsuper( namespace, declaringInterp );\n\t}\n\n\tpublic String toString() {\n\t\treturn \"'this' reference (XThis) to Bsh object: \" + namespace;\n\t}\n\n\t/**\n\t\tGet dynamic proxy for interface, caching those it creates.\n\t*/\n\tpublic Object getInterface( Class clas )\n\t{\n\t\treturn getInterface( new Class[] { clas } );\n\t}\n\n\t/**\n\t\tGet dynamic proxy for interface, caching those it creates.\n\t*/\n\tpublic Object getInterface( Class [] ca )\n\t{\n\t\tif ( interfaces == null )\n\t\t\tinterfaces = new Hashtable();\n\n\t\t// Make a hash of the interface hashcodes in order to cache them\n\t\tint hash = 21;\n\t\tfor(int i=0; i<ca.length; i++)\n\t\t\thash *= ca[i].hashCode() + 3;\n\t\tObject hashKey = new Integer(hash);\n\n\t\tObject interf = interfaces.get( hashKey );\n\n\t\tif ( interf == null )\n\t\t{\n\t\t\tClassLoader classLoader = ca[0].getClassLoader(); // ?\n\t\t\tinterf = Proxy.newProxyInstance(\n\t\t\t\tclassLoader, ca, invocationHandler );\n\t\t\tinterfaces.put( hashKey, interf );\n\t\t}\n\n\t\treturn interf;\n\t}\n\n\t/**\n\t\tThis is the invocation handler for the dynamic proxy.\n\t\t<p>\n\n\t\tNotes:\n\t\tInner class for the invocation handler seems to shield this unavailable\n\t\tinterface from JDK1.2 VM...\n\n\t\tI don't understand this.  JThis works just fine even if those\n\t\tclasses aren't there (doesn't it?)  This class shouldn't be loaded\n\t\tif an XThis isn't instantiated in NameSpace.java, should it?\n\t*/\n\tclass Handler implements InvocationHandler\n\t{\n\t\tpublic Object invoke( Object proxy, Method method, Object[] args )\n\t\t\tthrows Throwable\n\t\t{\n\t\t\ttry {\n\t\t\t\treturn invokeImpl( proxy, method, args );\n\t\t\t} catch ( TargetError te ) {\n\t\t\t\t// Unwrap target exception.  If the interface declares that\n\t\t\t\t// it throws the ex it will be delivered.  If not it will be\n\t\t\t\t// wrapped in an UndeclaredThrowable\n\t\t\t\tthrow te.getTarget();\n\t\t\t} catch ( EvalError ee ) {\n\t\t\t\t// Ease debugging...\n\t\t\t\t// XThis.this refers to the enclosing class instance\n\t\t\t\tif ( Interpreter.DEBUG )\n\t\t\t\t\tInterpreter.debug( \"EvalError in scripted interface: \"\n\t\t\t\t\t+ XThis.this.toString() + \": \"+ ee );\n\t\t\t\tthrow ee;\n\t\t\t}\n\t\t}\n\n\t\tpublic Object invokeImpl( Object proxy, Method method, Object[] args )\n\t\t\tthrows EvalError\n\t\t{\n\t\t\tString methodName = method.getName();\n\t\t\tCallStack callstack = new CallStack( namespace );\n\n\t\t\t/*\n\t\t\t\tIf equals() is not explicitly defined we must override the\n\t\t\t\tdefault implemented by the This object protocol for scripted\n\t\t\t\tobject.  To support XThis equals() must test for equality with\n\t\t\t\tthe generated proxy object, not the scripted bsh This object;\n\t\t\t\totherwise callers from outside in Java will not see a the\n\t\t\t\tproxy object as equal to itself.\n\t\t\t*/\n\t\t\tBshMethod equalsMethod = null;\n\t\t\ttry {\n\t\t\t\tequalsMethod = namespace.getMethod(\n\t\t\t\t\t\"equals\", new Class [] { Object.class } );\n\t\t\t} catch ( UtilEvalError e ) {/*leave null*/ }\n\t\t\tif ( methodName.equals(\"equals\" ) && equalsMethod == null ) {\n\t\t\t\tObject obj = args[0];\n\t\t\t\treturn proxy == obj ? Boolean.TRUE : Boolean.FALSE;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t\tIf toString() is not explicitly defined override the default\n\t\t\t\tto show the proxy interfaces.\n\t\t\t*/\n\t\t\tBshMethod toStringMethod = null;\n\t\t\ttry {\n\t\t\t\ttoStringMethod =\n\t\t\t\t\tnamespace.getMethod( \"toString\", new Class [] { } );\n\t\t\t} catch ( UtilEvalError e ) {/*leave null*/ }\n\n\t\t\tif ( methodName.equals(\"toString\" ) && toStringMethod == null)\n\t\t\t{\n\t\t\t\tClass [] ints = proxy.getClass().getInterfaces();\n\t\t\t\t// XThis.this refers to the enclosing class instance\n\t\t\t\tStringBuffer sb = new StringBuffer(\n\t\t\t\t\tXThis.this.toString() + \"\\nimplements:\" );\n\t\t\t\tfor(int i=0; i<ints.length; i++)\n\t\t\t\t\tsb.append( \" \"+ ints[i].getName()\n\t\t\t\t\t\t+ ((ints.length > 1)?\",\":\"\") );\n\t\t\t\treturn sb.toString();\n\t\t\t}\n\n\t\t\tClass [] paramTypes = method.getParameterTypes();\n\t\t\treturn Primitive.unwrap(\n\t\t\t\tinvokeMethod( methodName, Primitive.wrap(args, paramTypes) ) );\n\t\t}\n\t};\n}\n", "/*****************************************************************************\r\n * Licensed to the Apache Software Foundation (ASF) under one                *\r\n * or more contributor license agreements.  See the NOTICE file              *\r\n * distributed with this work for additional information                     *\r\n * regarding copyright ownership.  The ASF licenses this file                *\r\n * to you under the Apache License, Version 2.0 (the                         *\r\n * \"License\"); you may not use this file except in compliance                *\r\n * with the License.  You may obtain a copy of the License at                *\r\n *                                                                           *\r\n *     http://www.apache.org/licenses/LICENSE-2.0                            *\r\n *                                                                           *\r\n * Unless required by applicable law or agreed to in writing,                *\r\n * software distributed under the License is distributed on an               *\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY                    *\r\n * KIND, either express or implied.  See the License for the                 *\r\n * specific language governing permissions and limitations                   *\r\n * under the License.                                                        *\r\n *                                                                           *\r\n/****************************************************************************/\r\n\r\npackage bsh;\r\n\r\nimport org.junit.Assert;\r\nimport org.junit.Test;\r\n\r\n/**\r\n * This tests serialization of the beanshell interpreter\r\n *\r\n * @author Jessen Yu\r\n */\r\npublic class BshSerializationTest {\r\n\r\n    /**\r\n     * Tests that Special.NULL_VALUE is correctly serialized/deserialized\r\n     *\r\n     * @throws Exception in case of failure\r\n     */\r\n    @Test\r\n    public void testNullValueSerialization() throws Exception {\r\n        final Interpreter origInterpreter = new Interpreter();\r\n        origInterpreter.eval(\"myNull = null;\");\r\n        Assert.assertNull(origInterpreter.eval(\"myNull\"));\r\n        final Interpreter deserInterpreter = TestUtil.serDeser(origInterpreter);\r\n        Assert.assertNull(deserInterpreter.eval(\"myNull\"));\r\n    }\r\n\r\n\r\n    /**\r\n     * Tests that Primitive.NULL is correctly serialized/deserialized\r\n     *\r\n     * @throws Exception in case of failure\r\n     */\r\n    @Test\r\n    public void testSpecialNullSerialization() throws Exception {\r\n        final Interpreter originalInterpreter = new Interpreter();\r\n        originalInterpreter.eval(\"myNull = null;\");\r\n        Assert.assertTrue((Boolean) originalInterpreter.eval(\"myNull == null\"));\r\n        final Interpreter deserInterpreter = TestUtil.serDeser(originalInterpreter);\r\n        Assert.assertTrue((Boolean) deserInterpreter.eval(\"myNull == null\"));\r\n    }\r\n\r\n\r\n    /**\r\n     * Tests that a declared method can be serialized (but not exploited)\r\n     *\r\n     * @throws Exception in case of failure\r\n     */\r\n    @Test\r\n    public void testMethodSerialization() throws Exception {\r\n        final Interpreter origInterpreter = new Interpreter();\r\n        origInterpreter.eval(\"int method() { return 1337; }\");\r\n        Assert.assertEquals(1337, origInterpreter.eval(\"method()\"));\r\n        final Interpreter deserInterpreter = TestUtil.serDeser(origInterpreter);\r\n        Assert.assertEquals(1337, deserInterpreter.eval(\"method()\"));\r\n    }\r\n\r\n}\r\n"], "filenames": ["src/bsh/XThis.java", "tests/junitTests/src/bsh/BshSerializationTest.java"], "buggy_code_start_loc": [37, 60], "buggy_code_end_loc": [196, 60], "fixing_code_start_loc": [37, 61], "fixing_code_end_loc": [192, 77], "type": "CWE-19", "message": "BeanShell (bsh) before 2.0b6, when included on the classpath by an application that uses Java serialization or XStream, allows remote attackers to execute arbitrary code via crafted serialized data, related to XThis.Handler.", "other": {"cve": {"id": "CVE-2016-2510", "sourceIdentifier": "cve@mitre.org", "published": "2016-04-07T20:59:05.567", "lastModified": "2020-10-20T22:15:18.483", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "BeanShell (bsh) before 2.0b6, when included on the classpath by an application that uses Java serialization or XStream, allows remote attackers to execute arbitrary code via crafted serialized data, related to XThis.Handler."}, {"lang": "es", "value": "BeanShell (bsh) en versiones anteriores a 2.0b6, cuando est\u00e1 incluido en el classpath por una aplicaci\u00f3n que usa serializaci\u00f3n Java o XStream, permite a atacantes remotos ejecutar c\u00f3digo arbitrario a trav\u00e9s de datos serializados manipulados, relacionado con XThis.Handler."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-19"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:beanshell:beanshell:1.0:*:*:*:*:*:*:*", "matchCriteriaId": "777A0470-3B20-4CA0-AB9C-031977650E13"}, {"vulnerable": true, "criteria": "cpe:2.3:a:beanshell:beanshell:2.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "8E6D6046-6144-4AD4-BA57-115675C842A0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:beanshell:beanshell:2.0:beta4:*:*:*:*:*:*", "matchCriteriaId": "C268530A-6055-4B8B-A66B-0D84BB1B413F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:beanshell:beanshell:2.0:beta5:*:*:*:*:*:*", "matchCriteriaId": "79DCB82A-8121-4363-B8C3-8F0DE907A558"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "16F59A04-14CF-49E2-9973-645477EA09DA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:12.04:*:*:*:lts:*:*:*", "matchCriteriaId": "B6B7CAD7-9D4E-4FDB-88E3-1E583210A01F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:14.04:*:*:*:lts:*:*:*", "matchCriteriaId": "B5A6F2F3-4894-4392-8296-3B8DD2679084"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:15.10:*:*:*:*:*:*:*", "matchCriteriaId": "E88A537F-F4D0-46B9-9E37-965233C2A355"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-security-announce/2016-03/msg00056.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2016-03/msg00078.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://rhn.redhat.com/errata/RHSA-2016-0539.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://rhn.redhat.com/errata/RHSA-2016-0540.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://rhn.redhat.com/errata/RHSA-2016-2035.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.debian.org/security/2016/dsa-3504", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/84139", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securitytracker.com/id/1035440", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.ubuntu.com/usn/USN-2923-1", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2016:1135", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2016:1376", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2019:1545", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/beanshell/beanshell/commit/1ccc66bb693d4e46a34a904db8eeff07808d2ced", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/beanshell/beanshell/commit/7c68fde2d6fc65e362f20863d868c112a90a9b49", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/beanshell/beanshell/releases/tag/2.0b6", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/frohoff/ysoserial/pull/13", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/201607-17", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpuoct2020.html", "source": "cve@mitre.org"}, {"url": "https://www.rsaconference.com/writable/presentations/file_upload/asd-f03-serial-killer-silently-pwning-your-java-endpoints.pdf", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/beanshell/beanshell/commit/1ccc66bb693d4e46a34a904db8eeff07808d2ced"}}