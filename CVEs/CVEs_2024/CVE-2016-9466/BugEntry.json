{"buggy_code": ["<?php\n/**\n * Gallery\n *\n * This file is licensed under the Affero General Public License version 3 or\n * later. See the COPYING file.\n *\n * @author Olivier Paroz <galleryapps@oparoz.com>\n *\n * @copyright Olivier Paroz 2016\n */\n\nnamespace OCA\\Gallery\\Controller;\n\nuse OCP\\IRequest;\nuse OCP\\ILogger;\n\nuse OCP\\AppFramework\\ApiController;\nuse OCP\\AppFramework\\Http;\n\nuse OCA\\Gallery\\Service\\ConfigService;\n\n/**\n * Class ConfigApiController\n *\n * @package OCA\\Gallery\\Controller\n */\nclass ConfigApiController extends ApiController {\n\n\tuse Config;\n\tuse HttpError;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param string $appName\n\t * @param IRequest $request\n\t * @param ConfigService $configService\n\t * @param ILogger $logger\n\t */\n\tpublic function __construct(\n\t\t$appName,\n\t\tIRequest $request,\n\t\tConfigService $configService,\n\t\tILogger $logger\n\t) {\n\t\tparent::__construct($appName, $request);\n\n\t\t$this->configService = $configService;\n\t\t$this->logger = $logger;\n\t}\n\n\t/**\n\t * @NoAdminRequired\n\t * @NoCSRFRequired\n\t * @CORS\n\t *\n\t * Returns an app configuration array\n\t *\n\t * @param bool $extramediatypes\n\t *\n\t * @return array <string,null|array>\n\t */\n\tpublic function get($extramediatypes = false) {\n\t\ttry {\n\t\t\treturn $this->getConfig($extramediatypes);\n\t\t} catch (\\Exception $exception) {\n\t\t\treturn $this->jsonError($exception);\n\t\t}\n\t}\n\n}\n", "<?php\n/**\n * Gallery\n *\n * This file is licensed under the Affero General Public License version 3 or\n * later. See the COPYING file.\n *\n * @author Olivier Paroz <galleryapps@oparoz.com>\n *\n * @copyright Olivier Paroz 2016\n */\n\nnamespace OCA\\Gallery\\Controller;\n\nuse OCP\\IRequest;\nuse OCP\\ILogger;\n\nuse OCP\\AppFramework\\Controller;\nuse OCP\\AppFramework\\Http;\n\nuse OCA\\Gallery\\Service\\ConfigService;\n\n/**\n * Class ConfigController\n *\n * @package OCA\\Gallery\\Controller\n */\nclass ConfigController extends Controller {\n\n\tuse Config;\n\tuse HttpError;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param string $appName\n\t * @param IRequest $request\n\t * @param ConfigService $configService\n\t * @param ILogger $logger\n\t */\n\tpublic function __construct(\n\t\t$appName,\n\t\tIRequest $request,\n\t\tConfigService $configService,\n\t\tILogger $logger\n\t) {\n\t\tparent::__construct($appName, $request);\n\n\t\t$this->configService = $configService;\n\t\t$this->logger = $logger;\n\t}\n\n\t/**\n\t * @NoAdminRequired\n\t *\n\t * Returns an app configuration array\n\t *\n\t * @param bool $extramediatypes\n\t *\n\t * @return array <string,null|array>\n\t */\n\tpublic function get($extramediatypes = false) {\n\t\ttry {\n\t\t\treturn $this->getConfig($extramediatypes);\n\t\t} catch (\\Exception $exception) {\n\t\t\treturn $this->jsonError($exception);\n\t\t}\n\t}\n\n}\n", "<?php\n/**\n * Gallery\n *\n * This file is licensed under the Affero General Public License version 3 or\n * later. See the COPYING file.\n *\n * @author Olivier Paroz <galleryapps@oparoz.com>\n *\n * @copyright Olivier Paroz 2014-2016\n */\n\nnamespace OCA\\Gallery\\Controller;\n\nuse OCP\\IRequest;\nuse OCP\\IURLGenerator;\nuse OCP\\ILogger;\n\nuse OCP\\AppFramework\\ApiController;\nuse OCP\\AppFramework\\Http;\nuse OCP\\AppFramework\\Http\\RedirectResponse;\n\nuse OCA\\Gallery\\Http\\ImageResponse;\nuse OCA\\Gallery\\Service\\SearchFolderService;\nuse OCA\\Gallery\\Service\\ConfigService;\nuse OCA\\Gallery\\Service\\SearchMediaService;\nuse OCA\\Gallery\\Service\\DownloadService;\nuse OCA\\Gallery\\Service\\ServiceException;\n\n/**\n * Class FilesApiController\n *\n * @package OCA\\Gallery\\Controller\n */\nclass FilesApiController extends ApiController {\n\n\tuse Files;\n\tuse HttpError;\n\n\t/** @var IURLGenerator */\n\tprivate $urlGenerator;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param string $appName\n\t * @param IRequest $request\n\t * @param IURLGenerator $urlGenerator\n\t * @param SearchFolderService $searchFolderService\n\t * @param ConfigService $configService\n\t * @param SearchMediaService $searchMediaService\n\t * @param DownloadService $downloadService\n\t * @param ILogger $logger\n\t */\n\tpublic function __construct(\n\t\t$appName,\n\t\tIRequest $request,\n\t\tIURLGenerator $urlGenerator,\n\t\tSearchFolderService $searchFolderService,\n\t\tConfigService $configService,\n\t\tSearchMediaService $searchMediaService,\n\t\tDownloadService $downloadService,\n\t\tILogger $logger\n\t) {\n\t\tparent::__construct($appName, $request);\n\n\t\t$this->urlGenerator = $urlGenerator;\n\t\t$this->searchFolderService = $searchFolderService;\n\t\t$this->configService = $configService;\n\t\t$this->searchMediaService = $searchMediaService;\n\t\t$this->downloadService = $downloadService;\n\t\t$this->logger = $logger;\n\t}\n\n\t/**\n\t * @NoAdminRequired\n\t * @NoCSRFRequired\n\t * @CORS\n\t *\n\t * Returns a list of all media files available to the authenticated user\n\t *\n\t * @see FilesController::getList()\n\t *\n\t * @param string $location a path representing the current album in the app\n\t * @param string $features the list of supported features\n\t * @param string $etag the last known etag in the client\n\t * @param string $mediatypes the list of supported media types\n\t *\n\t * @return array <string,array<string,string|int>>|Http\\JSONResponse\n\t */\n\tpublic function getList($location, $features, $etag, $mediatypes) {\n\t\t$featuresArray = explode(';', $features);\n\t\t$mediaTypesArray = explode(';', $mediatypes);\n\t\ttry {\n\t\t\treturn $this->getFilesAndAlbums($location, $featuresArray, $etag, $mediaTypesArray);\n\t\t} catch (\\Exception $exception) {\n\t\t\treturn $this->jsonError($exception);\n\t\t}\n\t}\n\n\t/**\n\t * @NoAdminRequired\n\t * @NoCSRFRequired\n\t * @CORS\n\t *\n\t * Sends the file matching the fileId\n\t *\n\t * In case of error we send an HTML error page\n\t * We need to keep the session open in order to be able to send the error message to the error\n\t *     page\n\t *\n\t * @param int $fileId the ID of the file we want to download\n\t * @param string|null $filename\n\t *\n\t * @return ImageResponse\n\t */\n\tpublic function download($fileId, $filename = null) {\n\t\ttry {\n\t\t\t$download = $this->getDownload($fileId, $filename);\n\t\t} catch (ServiceException $exception) {\n\t\t\t$code = $this->getHttpStatusCode($exception);\n\t\t\t$url = $this->urlGenerator->linkToRoute(\n\t\t\t\t$this->appName . '.page.error_page', ['code' => $code]\n\t\t\t);\n\n\t\t\t// Don't set a cookie for the error message, we don't want it in the API\n\t\t\treturn new RedirectResponse($url);\n\t\t}\n\n\t\t// That's the only exception out of all the image media types\n\t\tif ($download['mimetype'] === 'image/svg+xml') {\n\t\t\t$download['mimetype'] = 'text/plain';\n\t\t}\n\n\t\treturn new ImageResponse($download);\n\t}\n\n}\n", "<?php\n/**\n * Gallery\n *\n * This file is licensed under the Affero General Public License version 3 or\n * later. See the COPYING file.\n *\n * @author Olivier Paroz <galleryapps@oparoz.com>\n *\n * @copyright Olivier Paroz 2016\n */\n\nnamespace OCA\\Gallery\\Controller;\n\nuse OCP\\IRequest;\nuse OCP\\IURLGenerator;\nuse OCP\\ILogger;\n\nuse OCP\\AppFramework\\Controller;\nuse OCP\\AppFramework\\Http;\nuse OCP\\AppFramework\\Http\\RedirectResponse;\n\nuse OCA\\Gallery\\Http\\ImageResponse;\nuse OCA\\Gallery\\Service\\SearchFolderService;\nuse OCA\\Gallery\\Service\\ConfigService;\nuse OCA\\Gallery\\Service\\SearchMediaService;\nuse OCA\\Gallery\\Service\\DownloadService;\nuse OCA\\Gallery\\Service\\ServiceException;\n\n/**\n * Class FilesController\n *\n * @package OCA\\Gallery\\Controller\n */\nclass FilesController extends Controller {\n\n\tuse Files;\n\tuse HttpError;\n\n\t/** @var IURLGenerator */\n\tprivate $urlGenerator;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param string $appName\n\t * @param IRequest $request\n\t * @param IURLGenerator $urlGenerator\n\t * @param SearchFolderService $searchFolderService\n\t * @param ConfigService $configService\n\t * @param SearchMediaService $searchMediaService\n\t * @param DownloadService $downloadService\n\t * @param ILogger $logger\n\t */\n\tpublic function __construct(\n\t\t$appName,\n\t\tIRequest $request,\n\t\tIURLGenerator $urlGenerator,\n\t\tSearchFolderService $searchFolderService,\n\t\tConfigService $configService,\n\t\tSearchMediaService $searchMediaService,\n\t\tDownloadService $downloadService,\n\t\tILogger $logger\n\t) {\n\t\tparent::__construct($appName, $request);\n\n\t\t$this->urlGenerator = $urlGenerator;\n\t\t$this->searchFolderService = $searchFolderService;\n\t\t$this->configService = $configService;\n\t\t$this->searchMediaService = $searchMediaService;\n\t\t$this->downloadService = $downloadService;\n\t\t$this->logger = $logger;\n\t}\n\n\t/**\n\t * @NoAdminRequired\n\t *\n\t * Returns a list of all media files available to the authenticated user\n\t *\n\t *    * Authentication can be via a login/password or a token/(password)\n\t *    * For private galleries, it returns all media files, with the full path from the root\n\t *     folder For public galleries, the path starts from the folder the link gives access to\n\t *     (virtual root)\n\t *    * An exception is only caught in case something really wrong happens. As we don't test\n\t *     files before including them in the list, we may return some bad apples\n\t *\n\t * @param string $location a path representing the current album in the app\n\t * @param string $features the list of supported features\n\t * @param string $etag the last known etag in the client\n\t * @param string $mediatypes the list of supported media types\n\t *\n\t * @return array <string,array<string,string|int>>|Http\\JSONResponse\n\t */\n\tpublic function getList($location, $features, $etag, $mediatypes) {\n\t\t$featuresArray = explode(';', $features);\n\t\t$mediaTypesArray = explode(';', $mediatypes);\n\t\ttry {\n\t\t\treturn $this->getFilesAndAlbums($location, $featuresArray, $etag, $mediaTypesArray);\n\t\t} catch (\\Exception $exception) {\n\t\t\treturn $this->jsonError($exception);\n\t\t}\n\t}\n\n\t/**\n\t * @NoAdminRequired\n\t *\n\t * Sends the file matching the fileId\n\t *\n\t * @param int $fileId the ID of the file we want to download\n\t * @param string|null $filename\n\t *\n\t * @return ImageResponse\n\t */\n\tpublic function download($fileId, $filename = null) {\n\t\ttry {\n\t\t\t$download = $this->getDownload($fileId, $filename);\n\t\t} catch (ServiceException $exception) {\n\t\t\t$code = $this->getHttpStatusCode($exception);\n\t\t\t$url = $this->urlGenerator->linkToRoute(\n\t\t\t\t$this->appName . '.page.error_page', ['code' => $code]\n\t\t\t);\n\n\t\t\t$response = new RedirectResponse($url);\n\t\t\t$response->addCookie('galleryErrorMessage', $exception->getMessage());\n\n\t\t\treturn $response;\n\t\t}\n\n\t\t// That's the only exception out of all the image media types we serve\n\t\tif ($download['mimetype'] === 'image/svg+xml') {\n\t\t\t$download['mimetype'] = 'text/plain';\n\t\t}\n\n\t\treturn new ImageResponse($download);\n\t}\n\n}\n", "<?php\n/**\n * Gallery\n *\n * This file is licensed under the Affero General Public License version 3 or\n * later. See the COPYING file.\n *\n * @author Bernhard Posselt <dev@bernhard-posselt.com>\n * @author Olivier Paroz <galleryapps@oparoz.com>\n *\n * @copyright Bernhard Posselt 2014-2015\n * @copyright Olivier Paroz 2014-2016\n */\n\nnamespace OCA\\Gallery\\Controller;\n\nuse Exception;\n\nuse OCP\\IURLGenerator;\n\nuse OCP\\AppFramework\\Http;\nuse OCP\\AppFramework\\Http\\JSONResponse;\nuse OCP\\AppFramework\\Http\\RedirectResponse;\n\nuse OCA\\Gallery\\Environment\\NotFoundEnvException;\nuse OCA\\Gallery\\Service\\NotFoundServiceException;\nuse OCA\\Gallery\\Service\\ForbiddenServiceException;\n\n/**\n * Our classes extend both Controller and ApiController, so we need to use\n * traits to add some common methods\n *\n * @package OCA\\Gallery\\Controller\n */\ntrait HttpError {\n\n\t/**\n\t * @param \\Exception $exception\n\t *\n\t * @return JSONResponse\n\t */\n\tpublic function jsonError(Exception $exception) {\n\t\t$message = $exception->getMessage();\n\t\t$code = $this->getHttpStatusCode($exception);\n\n\t\treturn new JSONResponse(\n\t\t\t[\n\t\t\t\t'message' => $message . ' (' . $code . ')',\n\t\t\t\t'success' => false\n\t\t\t],\n\t\t\t$code\n\t\t);\n\t}\n\n\t/**\n\t * @param IURLGenerator $urlGenerator\n\t * @param string $appName\n\t * @param \\Exception $exception\n\t *\n\t * @return RedirectResponse\n\t */\n\tpublic function htmlError($urlGenerator, $appName, Exception $exception) {\n\t\t$message = $exception->getMessage();\n\t\t$code = $this->getHttpStatusCode($exception);\n\t\t$url = $urlGenerator->linkToRoute(\n\t\t\t$appName . '.page.error_page', ['code' => $code]\n\t\t);\n\n\t\t$response = new RedirectResponse($url);\n\t\t$response->addCookie('galleryErrorMessage', $message);\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Returns an error array\n\t *\n\t * @param $exception\n\t *\n\t * @return array<null|int|string>\n\t */\n\tpublic function getHttpStatusCode($exception) {\n\t\t$code = Http::STATUS_INTERNAL_SERVER_ERROR;\n\t\tif ($exception instanceof NotFoundServiceException\n\t\t\t|| $exception instanceof NotFoundEnvException\n\t\t) {\n\t\t\t$code = Http::STATUS_NOT_FOUND;\n\t\t}\n\t\tif ($exception instanceof ForbiddenServiceException) {\n\t\t\t$code = Http::STATUS_FORBIDDEN;\n\t\t}\n\n\t\treturn $code;\n\t}\n}\n", "/* global Handlebars, Gallery */\n(function ($, _, OC, t, Gallery) {\n\t\"use strict\";\n\n\tvar TEMPLATE_ADDBUTTON = '<a href=\"#\" class=\"button new\"><img src=\"{{iconUrl}}\" alt=\"{{addText}}\"></img></a>';\n\n\t/**\n\t * Builds and updates the Gallery view\n\t *\n\t * @constructor\n\t */\n\tvar View = function () {\n\t\tthis.element = $('#gallery');\n\t\tthis.loadVisibleRows.loading = false;\n\t\tthis._setupUploader();\n\t\tthis.breadcrumb = new Gallery.Breadcrumb();\n\t\tthis.emptyContentElement = $('#emptycontent');\n\t\tthis.controlsElement = $('#controls');\n\t};\n\n\tView.prototype = {\n\t\telement: null,\n\t\tbreadcrumb: null,\n\t\trequestId: -1,\n\t\temptyContentElement: null,\n\t\tcontrolsElement: null,\n\n\t\t/**\n\t\t * Removes all thumbnails from the view\n\t\t */\n\t\tclear: function () {\n\t\t\tthis.loadVisibleRows.processing = false;\n\t\t\tthis.loadVisibleRows.loading = null;\n\t\t\t// We want to keep all the events\n\t\t\tthis.element.children().detach();\n\t\t\tthis.showLoading();\n\t\t},\n\n\t\t/**\n\t\t * Populates the view if there are images or albums to show\n\t\t *\n\t\t * @param {string} albumPath\n\t\t * @param {string|undefined} errorMessage\n\t\t */\n\t\tinit: function (albumPath, errorMessage) {\n\t\t\t// Only do it when the app is initialised\n\t\t\tif (this.requestId === -1) {\n\t\t\t\tthis._initButtons();\n\t\t\t\tthis._blankUrl();\n\t\t\t}\n\t\t\tif ($.isEmptyObject(Gallery.imageMap)) {\n\t\t\t\tGallery.view.showEmptyFolder(albumPath, errorMessage);\n\t\t\t} else {\n\t\t\t\tthis.viewAlbum(albumPath);\n\t\t\t}\n\n\t\t\tthis._setBackgroundColour();\n\t\t},\n\n\t\t/**\n\t\t * Starts the slideshow\n\t\t *\n\t\t * @param {string} path\n\t\t * @param {string} albumPath\n\t\t */\n\t\tstartSlideshow: function (path, albumPath) {\n\t\t\tvar album = Gallery.albumMap[albumPath];\n\t\t\tvar images = album.images;\n\t\t\tvar startImage = Gallery.imageMap[path];\n\t\t\tGallery.slideShow(images, startImage, false);\n\t\t},\n\n\t\t/**\n\t\t * Sets up the controls and starts loading the gallery rows\n\t\t *\n\t\t * @param {string|null} albumPath\n\t\t */\n\t\tviewAlbum: function (albumPath) {\n\t\t\talbumPath = albumPath || '';\n\t\t\tif (!Gallery.albumMap[albumPath]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.clear();\n\n\t\t\tif (albumPath !== Gallery.currentAlbum\n\t\t\t\t|| (albumPath === Gallery.currentAlbum &&\n\t\t\t\tGallery.albumMap[albumPath].etag !== Gallery.currentEtag)) {\n\t\t\t\tGallery.currentAlbum = albumPath;\n\t\t\t\tGallery.currentEtag = Gallery.albumMap[albumPath].etag;\n\t\t\t\tthis._setupButtons(albumPath);\n\t\t\t}\n\n\t\t\tGallery.albumMap[albumPath].viewedItems = 0;\n\t\t\tGallery.albumMap[albumPath].preloadOffset = 0;\n\n\t\t\t// Each request has a unique ID, so that we can track which request a row belongs to\n\t\t\tthis.requestId = Math.random();\n\t\t\tGallery.albumMap[Gallery.currentAlbum].requestId = this.requestId;\n\n\t\t\t// Loading rows without blocking the execution of the rest of the script\n\t\t\tsetTimeout(function () {\n\t\t\t\tthis.loadVisibleRows.activeIndex = 0;\n\t\t\t\tthis.loadVisibleRows(Gallery.albumMap[Gallery.currentAlbum]);\n\t\t\t}.bind(this), 0);\n\t\t},\n\n\t\t/**\n\t\t * Manages the sorting interface\n\t\t *\n\t\t * @param {string} sortType name or date\n\t\t * @param {string} sortOrder asc or des\n\t\t */\n\t\tsortControlsSetup: function (sortType, sortOrder) {\n\t\t\tvar reverseSortType = 'date';\n\t\t\tif (sortType === 'date') {\n\t\t\t\treverseSortType = 'name';\n\t\t\t}\n\t\t\tthis._setSortButton(sortType, sortOrder, true);\n\t\t\tthis._setSortButton(reverseSortType, 'asc', false); // default icon\n\t\t},\n\n\t\t/**\n\t\t * Loads and displays gallery rows on screen\n\t\t *\n\t\t * view.loadVisibleRows.loading holds the Promise of a row\n\t\t *\n\t\t * @param {Album} album\n\t\t */\n\t\tloadVisibleRows: function (album) {\n\t\t\tvar view = this;\n\t\t\t// Wait for the previous request to be completed\n\t\t\tif (this.loadVisibleRows.processing) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * At this stage, there is no loading taking place, so we can look for new rows\n\t\t\t */\n\n\t\t\tvar scroll = $('#content-wrapper').scrollTop() + $(window).scrollTop();\n\t\t\t// 2 windows worth of rows is the limit from which we need to start loading new rows.\n\t\t\t// As we scroll down, it grows\n\t\t\tvar targetHeight = ($(window).height() * 2) + scroll;\n\t\t\t// We throttle rows in order to try and not generate too many CSS resizing events at\n\t\t\t// the same time\n\t\t\tvar showRows = _.throttle(function (album) {\n\n\t\t\t\t// If we've reached the end of the album, we kill the loader\n\t\t\t\tif (!(album.viewedItems < album.subAlbums.length + album.images.length)) {\n\t\t\t\t\tview.loadVisibleRows.processing = false;\n\t\t\t\t\tview.loadVisibleRows.loading = null;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Prevents creating rows which are no longer required. I.e when changing album\n\t\t\t\tif (view.requestId !== album.requestId) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// We can now safely create a new row\n\t\t\t\tvar row = album.getRow($(window).width());\n\t\t\t\tvar rowDom = row.getDom();\n\t\t\t\tview.element.append(rowDom);\n\n\t\t\t\treturn album.fillNextRow(row).then(function () {\n\t\t\t\t\tif (album.viewedItems < album.subAlbums.length + album.images.length &&\n\t\t\t\t\t\tview.element.height() < targetHeight) {\n\t\t\t\t\t\treturn showRows(album);\n\t\t\t\t\t}\n\t\t\t\t\t// No more rows to load at the moment\n\t\t\t\t\tview.loadVisibleRows.processing = false;\n\t\t\t\t\tview.loadVisibleRows.loading = null;\n\t\t\t\t}, function () {\n\t\t\t\t\t// Something went wrong, so kill the loader\n\t\t\t\t\tview.loadVisibleRows.processing = false;\n\t\t\t\t\tview.loadVisibleRows.loading = null;\n\t\t\t\t});\n\t\t\t}, 100);\n\t\t\tif (this.element.height() < targetHeight) {\n\t\t\t\tthis._showNormal();\n\t\t\t\tthis.loadVisibleRows.processing = true;\n\t\t\t\talbum.requestId = view.requestId;\n\t\t\t\tthis.loadVisibleRows.loading = showRows(album);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Shows an empty gallery message\n\t\t *\n\t\t * @param {string} albumPath\n\t\t * @param {string|null} errorMessage\n\t\t */\n\t\tshowEmptyFolder: function (albumPath, errorMessage) {\n\t\t\tvar message = '<div class=\"icon-gallery\"></div>';\n\t\t\tvar uploadAllowed = true;\n\n\t\t\tthis.element.children().detach();\n\t\t\tthis.removeLoading();\n\n\t\t\tif (!_.isUndefined(errorMessage) && errorMessage !== null) {\n\t\t\t\tmessage += '<h2>' + t('gallery',\n\t\t\t\t\t\t'Album cannot be shown') + '</h2>';\n\t\t\t\tmessage += '<p>' + errorMessage + '</p>';\n\t\t\t\tuploadAllowed = false;\n\t\t\t} else {\n\t\t\t\tmessage += '<h2>' + t('gallery',\n\t\t\t\t\t\t'No media files found') + '</h2>';\n\t\t\t\t// We can't upload yet on the public side\n\t\t\t\tif (Gallery.token) {\n\t\t\t\t\tmessage += '<p>' + t('gallery',\n\t\t\t\t\t\t\t'Upload pictures in the files app to display them here') + '</p>';\n\t\t\t\t} else {\n\t\t\t\t\tmessage += '<p>' + t('gallery',\n\t\t\t\t\t\t\t'Upload new files via drag and drop or by using the [+] button above') +\n\t\t\t\t\t\t'</p>';\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.emptyContentElement.html(message);\n\t\t\tthis.emptyContentElement.removeClass('hidden');\n\n\t\t\tthis._hideButtons(uploadAllowed);\n\t\t\tGallery.currentAlbum = albumPath;\n\t\t\tvar availableWidth = $(window).width() - Gallery.buttonsWidth;\n\t\t\tthis.breadcrumb.init(albumPath, availableWidth);\n\t\t\tGallery.config.albumDesign = null;\n\t\t},\n\n\t\t/**\n\t\t * Dims the controls bar when retrieving new content. Matches the effect in Files\n\t\t */\n\t\tdimControls: function () {\n\t\t\t// Use the existing mask if its already there\n\t\t\tvar $mask = this.controlsElement.find('.mask');\n\t\t\tif ($mask.exists()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t$mask = $('<div class=\"mask transparent\"></div>');\n\t\t\tthis.controlsElement.append($mask);\n\t\t\t$mask.removeClass('transparent');\n\t\t},\n\n\t\t/**\n\t\t * Shows the infamous loading spinner\n\t\t */\n\t\tshowLoading: function () {\n\t\t\tthis.emptyContentElement.addClass('hidden');\n\t\t\tthis.controlsElement.removeClass('hidden');\n\t\t\t$('#content').addClass('icon-loading');\n\t\t\tthis.dimControls();\n\t\t},\n\n\t\t/**\n\t\t * Removes the spinner in the main area and restore normal visibility of the controls bar\n\t\t */\n\t\tremoveLoading: function () {\n\t\t\t$('#content').removeClass('icon-loading');\n\t\t\tthis.controlsElement.find('.mask').remove();\n\t\t},\n\n\t\t/**\n\t\t * Shows thumbnails\n\t\t */\n\t\t_showNormal: function () {\n\t\t\tthis.emptyContentElement.addClass('hidden');\n\t\t\tthis.controlsElement.removeClass('hidden');\n\t\t\tthis.removeLoading();\n\t\t},\n\n\t\t/**\n\t\t * Sets up our custom handlers for folder uploading operations\n\t\t *\n\t\t * We only want it to be called for that specific case as all other file uploading\n\t\t * operations will call Files.highlightFiles\n\t\t *\n\t\t * @see OC.Upload.init/file_upload_param.done()\n\t\t *\n\t\t * @private\n\t\t */\n\t\t_setupUploader: function () {\n\t\t\t$('#file_upload_start').on('fileuploaddone', function (e, data) {\n\t\t\t\tif (data.files[0] === data.originalFiles[data.originalFiles.length - 1]\n\t\t\t\t\t&& data.files[0].relativePath) {\n\n\t\t\t\t\t//Ask for a refresh of the photowall\n\t\t\t\t\tGallery.getFiles(Gallery.currentAlbum).done(function () {\n\t\t\t\t\t\tGallery.view.init(Gallery.currentAlbum);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Since 9.0\n\t\t\tif (OC.Upload) {\n\t\t\t\tOC.Upload._isReceivedSharedFile = function (file) {\n\t\t\t\t\tvar path = file.name;\n\t\t\t\t\tvar sharedWith = false;\n\n\t\t\t\t\tif (Gallery.currentAlbum !== '' && Gallery.currentAlbum !== '/') {\n\t\t\t\t\t\tpath = Gallery.currentAlbum + '/' + path;\n\t\t\t\t\t}\n\t\t\t\t\tif (Gallery.imageMap[path] && Gallery.imageMap[path].sharedWithUser) {\n\t\t\t\t\t\tsharedWith = true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn sharedWith;\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Adds all the click handlers to buttons the first time they appear in the interface\n\t\t *\n\t\t * @private\n\t\t */\n\t\t_initButtons: function () {\n\t\t\tthis.element.on(\"contextmenu\", function(e) { e.preventDefault(); });\n\t\t\t$('#filelist-button').click(Gallery.switchToFilesView);\n\t\t\t$('#download').click(Gallery.download);\n\t\t\t$('#share-button').click(Gallery.share);\n\t\t\tGallery.infoBox = new Gallery.InfoBox();\n\t\t\t$('#album-info-button').click(Gallery.showInfo);\n\t\t\t$('#sort-name-button').click(Gallery.sorter);\n\t\t\t$('#sort-date-button').click(Gallery.sorter);\n\t\t\t$('#save #save-button').click(Gallery.showSaveForm);\n\t\t\t$('.save-form').submit(Gallery.saveForm);\n\t\t\tthis._renderNewButton();\n\t\t\t// Trigger cancelling of file upload\n\t\t\t$('#uploadprogresswrapper .stop').on('click', function () {\n\t\t\t\tOC.Upload.cancelUploads();\n\t\t\t});\n\t\t\tthis.requestId = Math.random();\n\t\t},\n\n\t\t/**\n\t\t * Sets up all the buttons of the interface and the breadcrumbs\n\t\t *\n\t\t * @param {string} albumPath\n\t\t * @private\n\t\t */\n\t\t_setupButtons: function (albumPath) {\n\t\t\tthis._shareButtonSetup(albumPath);\n\t\t\tthis._infoButtonSetup();\n\n\t\t\tvar availableWidth = $(window).width() - Gallery.buttonsWidth;\n\t\t\tthis.breadcrumb.init(albumPath, availableWidth);\n\t\t\tvar album = Gallery.albumMap[albumPath];\n\t\t\t\n\t\t\tvar sum = album.images.length + album.subAlbums.length;\n\t\t\t//If sum of the number of images and subalbums exceeds 1 then show the buttons.\n\t\t\tif(sum > 1)\n\t\t\t{\n\t\t\t\t$('#sort-name-button').show();\n\t\t\t\t$('#sort-date-button').show();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$('#sort-name-button').hide();\n\t\t\t\t$('#sort-date-button').hide();\n\t\t\t}\n\t\t\tvar currentSort = Gallery.config.albumSorting;\n\t\t\tthis.sortControlsSetup(currentSort.type, currentSort.order);\n\t\t\tGallery.albumMap[Gallery.currentAlbum].images.sort(\n\t\t\t\tGallery.utility.sortBy(currentSort.type,\n\t\t\t\t\tcurrentSort.order));\n\t\t\tGallery.albumMap[Gallery.currentAlbum].subAlbums.sort(Gallery.utility.sortBy('name',\n\t\t\t\tcurrentSort.albumOrder));\n\n\t\t\t$('#save-button').show();\n\t\t\t$('#download').show();\n\t\t\t$('a.button.new').show();\n\t\t},\n\n\t\t/**\n\t\t * Hide buttons in the controls bar\n\t\t *\n\t\t * @param uploadAllowed\n\t\t */\n\t\t_hideButtons: function (uploadAllowed) {\n\t\t\t$('#album-info-button').hide();\n\t\t\t$('#share-button').hide();\n\t\t\t$('#sort-name-button').hide();\n\t\t\t$('#sort-date-button').hide();\n\t\t\t$('#save-button').hide();\n\t\t\t$('#download').hide();\n\n\t\t\tif (!uploadAllowed) {\n\t\t\t\t$('a.button.new').hide();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Shows or hides the share button depending on if we're in a public gallery or not\n\t\t *\n\t\t * @param {string} albumPath\n\t\t * @private\n\t\t */\n\t\t_shareButtonSetup: function (albumPath) {\n\t\t\tvar shareButton = $('#share-button');\n\t\t\tif (albumPath === '' || Gallery.token) {\n\t\t\t\tshareButton.hide();\n\t\t\t} else {\n\t\t\t\tshareButton.show();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Shows or hides the info button based on the information we've received from the server\n\t\t *\n\t\t * @private\n\t\t */\n\t\t_infoButtonSetup: function () {\n\t\t\tvar infoButton = $('#album-info-button');\n\t\t\tinfoButton.find('span').hide();\n\t\t\tvar infoContentContainer = $('.album-info-container');\n\t\t\tinfoContentContainer.slideUp();\n\t\t\tinfoContentContainer.css('max-height',\n\t\t\t\t$(window).height() - Gallery.browserToolbarHeight);\n\t\t\tvar albumInfo = Gallery.config.albumInfo;\n\t\t\tif (Gallery.config.albumError) {\n\t\t\t\tinfoButton.hide();\n\t\t\t\tvar text = '<strong>' + t('gallery', 'Configuration error') + '</strong></br>' +\n\t\t\t\t\tGallery.config.albumError.message + '</br></br>';\n\t\t\t\tGallery.utility.showHtmlNotification(text, 7);\n\t\t\t} else if ($.isEmptyObject(albumInfo)) {\n\t\t\t\tinfoButton.hide();\n\t\t\t} else {\n\t\t\t\tinfoButton.show();\n\t\t\t\tif (albumInfo.inherit !== 'yes' || albumInfo.level === 0) {\n\t\t\t\t\tinfoButton.find('span').delay(1000).slideDown();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Sets the background colour of the photowall\n\t\t *\n\t\t * @private\n\t\t */\n\t\t_setBackgroundColour: function () {\n\t\t\tvar wrapper = $('#content-wrapper');\n\t\t\tvar albumDesign = Gallery.config.albumDesign;\n\t\t\tif (!$.isEmptyObject(albumDesign) && albumDesign.background) {\n\t\t\t\twrapper.css('background-color', albumDesign.background);\n\t\t\t} else {\n\t\t\t\twrapper.css('background-color', '#fff');\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Picks the image which matches the sort order\n\t\t *\n\t\t * @param {string} sortType name or date\n\t\t * @param {string} sortOrder asc or des\n\t\t * @param {boolean} active determines if we're setting up the active sort button\n\t\t * @private\n\t\t */\n\t\t_setSortButton: function (sortType, sortOrder, active) {\n\t\t\tvar button = $('#sort-' + sortType + '-button');\n\t\t\t// Removing all the classes which control the image in the button\n\t\t\tbutton.removeClass('active-button');\n\t\t\tbutton.find('img').removeClass('front');\n\t\t\tbutton.find('img').removeClass('back');\n\n\t\t\t// We need to determine the reverse order in order to send that image to the back\n\t\t\tvar reverseSortOrder = 'des';\n\t\t\tif (sortOrder === 'des') {\n\t\t\t\treverseSortOrder = 'asc';\n\t\t\t}\n\n\t\t\t// We assign the proper order to the button images\n\t\t\tbutton.find('img.' + sortOrder).addClass('front');\n\t\t\tbutton.find('img.' + reverseSortOrder).addClass('back');\n\n\t\t\t// The active button needs a hover action for the flip effect\n\t\t\tif (active) {\n\t\t\t\tbutton.addClass('active-button');\n\t\t\t\tif (button.is(\":hover\")) {\n\t\t\t\t\tbutton.removeClass('hover');\n\t\t\t\t}\n\t\t\t\t// We can't use a toggle here\n\t\t\t\tbutton.hover(function () {\n\t\t\t\t\t\t$(this).addClass('hover');\n\t\t\t\t\t},\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\t$(this).removeClass('hover');\n\t\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * If no url is entered then do not show the error box.\n\t\t *\n\t\t */\n\t\t_blankUrl: function() {\n\t\t\t$('#remote_address').on(\"change keyup paste\", function() {\n \t\t\t\tif ($(this).val() === '') {\n \t\t\t\t\t$('#save-button-confirm').prop('disabled', true);\n \t\t\t\t} else {\n \t\t\t\t\t$('#save-button-confirm').prop('disabled', false);\n \t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Creates the [+] button allowing users who can't drag and drop to upload files\n\t\t *\n\t\t * @see core/apps/files/js/filelist.js\n\t\t * @private\n\t\t */\n\t\t_renderNewButton: function () {\n\t\t\t// if no actions container exist, skip\n\t\t\tvar $actionsContainer = $('.actions');\n\t\t\tif (!$actionsContainer.length) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this._addButtonTemplate) {\n\t\t\t\tthis._addButtonTemplate = Handlebars.compile(TEMPLATE_ADDBUTTON);\n\t\t\t}\n\t\t\tvar $newButton = $(this._addButtonTemplate({\n\t\t\t\taddText: t('gallery', 'New'),\n\t\t\t\ticonUrl: OC.imagePath('core', 'actions/add')\n\t\t\t}));\n\n\t\t\t$actionsContainer.prepend($newButton);\n\t\t\t$newButton.tooltip({'placement': 'bottom'});\n\n\t\t\t$newButton.click(_.bind(this._onClickNewButton, this));\n\t\t\tthis._newButton = $newButton;\n\t\t},\n\n\t\t/**\n\t\t * Creates the click handler for the [+] button\n\t\t * @param event\n\t\t * @returns {boolean}\n\t\t *\n\t\t * @see core/apps/files/js/filelist.js\n\t\t * @private\n\t\t */\n\t\t_onClickNewButton: function (event) {\n\t\t\tvar $target = $(event.target);\n\t\t\tif (!$target.hasClass('.button')) {\n\t\t\t\t$target = $target.closest('.button');\n\t\t\t}\n\t\t\tthis._newButton.tooltip('hide');\n\t\t\tevent.preventDefault();\n\t\t\tif ($target.hasClass('disabled')) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!this._newFileMenu) {\n\t\t\t\tthis._newFileMenu = new Gallery.NewFileMenu();\n\t\t\t\t$('body').append(this._newFileMenu.$el);\n\t\t\t}\n\t\t\tthis._newFileMenu.showAt($target);\n\n\t\t\tif (Gallery.currentAlbum === '') {\n\t\t\t\t$('.menuitem[data-action=\"hideAlbum\"]').parent().hide();\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tGallery.View = View;\n})(jQuery, _, OC, t, Gallery);\n", "<?php\n/**\n * Gallery\n *\n * This file is licensed under the Affero General Public License version 3 or\n * later. See the COPYING file.\n *\n * @author Olivier Paroz <galleryapps@oparoz.com>\n *\n * @copyright Olivier Paroz 2016\n */\n\nnamespace OCA\\Gallery\\Controller;\n\nuse OCP\\IRequest;\nuse OCP\\ILogger;\n\nuse OCP\\AppFramework\\Http\\JSONResponse;\nuse OCP\\AppFramework\\Http;\n\nuse OCA\\Gallery\\Service\\ConfigService;\nuse OCA\\Gallery\\Service\\PreviewService;\nuse OCA\\Gallery\\Service\\ServiceException;\n\n/**\n * Class ConfigControllerTest\n *\n * @package OCA\\Gallery\\Controller\n */\nclass ConfigControllerTest extends \\Test\\TestCase {\n\n\t/** @var string */\n\tprotected $appName = 'gallery';\n\t/** @var IRequest */\n\tprotected $request;\n\t/** @var ConfigController */\n\tprotected $controller;\n\t/** @var ConfigService */\n\tprotected $configService;\n\t/** @var PreviewService */\n\tprotected $previewService;\n\t/** @var ILogger */\n\tprotected $logger;\n\t/** @var array */\n\tprivate $baseMimeTypes = [\n\t\t'image/png',\n\t\t'image/jpeg',\n\t\t'image/gif',\n\t\t'image/x-xbitmap',\n\t\t'image/bmp',\n\t\t'image/tiff',\n\t\t'image/x-dcraw',\n\t\t'application/x-photoshop',\n\t\t'application/illustrator',\n\t\t'application/postscript',\n\t];\n\n\t/**\n\t * Test set up\n\t */\n\tpublic function setUp() {\n\t\tparent::setUp();\n\n\t\t$this->request = $this->getMockBuilder('\\OCP\\IRequest')\n\t\t\t\t\t\t\t  ->disableOriginalConstructor()\n\t\t\t\t\t\t\t  ->getMock();\n\t\t$this->configService = $this->getMockBuilder('\\OCA\\Gallery\\Service\\ConfigService')\n\t\t\t\t\t\t\t\t\t->disableOriginalConstructor()\n\t\t\t\t\t\t\t\t\t->getMock();\n\t\t$this->previewService = $this->getMockBuilder('\\OCA\\Gallery\\Service\\PreviewService')\n\t\t\t\t\t\t\t\t\t ->disableOriginalConstructor()\n\t\t\t\t\t\t\t\t\t ->getMock();\n\t\t$this->logger = $this->getMockBuilder('\\OCP\\ILogger')\n\t\t\t\t\t\t\t ->disableOriginalConstructor()\n\t\t\t\t\t\t\t ->getMock();\n\t\t$this->controller = new ConfigController(\n\t\t\t$this->appName,\n\t\t\t$this->request,\n\t\t\t$this->configService,\n\t\t\t$this->logger\n\t\t);\n\t}\n\n\t/**\n\t * @return array\n\t */\n\tpublic function providesConfigData() {\n\t\t$noFeatures = [];\n\n\t\t$features = [\n\t\t\t'external_shares',\n\t\t\t'background_colour_toggle',\n\t\t];\n\n\t\t$featuresWithSvg = array_merge(\n\t\t\t$features,\n\t\t\t[\n\t\t\t\t'native_svg'\n\t\t\t]\n\t\t);\n\n\t\t$slideshowMimes = array_merge(\n\t\t\t$this->baseMimeTypes,\n\t\t\t[\n\t\t\t\t'application/font-sfnt',\n\t\t\t\t'application/x-font',\n\t\t\t]\n\t\t);\n\n\t\t$baseMimeTypesWithSvg = array_merge(\n\t\t\t$this->baseMimeTypes,\n\t\t\t[\n\t\t\t\t'image/svg+xml',\n\t\t\t]\n\t\t);\n\n\t\t$slideshowMimesWithSvg = array_merge(\n\t\t\t$slideshowMimes,\n\t\t\t[\n\t\t\t\t'image/svg+xml',\n\t\t\t]\n\t\t);\n\n\t\treturn [\n\t\t\t[$noFeatures, $this->baseMimeTypes, false, false],\n\t\t\t[$noFeatures, $slideshowMimes, false, true],\n\t\t\t[$features, $this->baseMimeTypes, false, false],\n\t\t\t[$features, $slideshowMimes, false, true],\n\t\t\t[$featuresWithSvg, $baseMimeTypesWithSvg, true, false],\n\t\t\t[$featuresWithSvg, $slideshowMimesWithSvg, true, true],\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider providesConfigData\n\t *\n\t * @param array $features\n\t * @param array $mimeTypes\n\t * @param bool $nativeSvgSupport\n\t * @param bool $slideshow\n\t */\n\tpublic function testGetConfig($features, $mimeTypes, $nativeSvgSupport, $slideshow) {\n\t\t$this->mockFeaturesList($features);\n\t\t$this->mockSupportedMediaTypes($slideshow, $nativeSvgSupport, $mimeTypes);\n\n\t\t$response = $this->controller->get($slideshow);\n\n\t\t$this->assertEquals(['features' => $features, 'mediatypes' => $mimeTypes], $response);\n\t}\n\n\t/**\n\t * Not being able to get a config file is not a hard failure\n\t */\n\tpublic function testCannotGetConfig() {\n\t\t$features = $this->mockConfigRetrievalError();\n\t\t$slideshow = true;\n\t\t$nativeSvgSupport = false;\n\t\t$this->mockSupportedMediaTypes($slideshow, $nativeSvgSupport, $this->baseMimeTypes);\n\n\t\t$response = $this->controller->get($slideshow);\n\n\t\t$this->assertEquals(\n\t\t\t['features' => $features, 'mediatypes' => $this->baseMimeTypes], $response\n\t\t);\n\t}\n\n\tpublic function testGetConfigWithBrokenSystem() {\n\t\t$slideshow = true;\n\t\t$exceptionMessage = 'A\u00efe!';\n\t\t$this->configService->expects($this->any())\n\t\t\t\t\t\t\t->method('getFeaturesList')\n\t\t\t\t\t\t\t->willThrowException(new ServiceException($exceptionMessage));\n\t\t// Default status code when something breaks\n\t\t$status = Http::STATUS_INTERNAL_SERVER_ERROR;\n\t\t$errorMessage = [\n\t\t\t'message' => $exceptionMessage  . ' (' . $status . ')',\n\t\t\t'success' => false\n\t\t];\n\t\t/** @type JSONResponse $response */\n\t\t$response = $this->controller->get($slideshow);\n\n\t\t$this->assertEquals($errorMessage, $response->getData());\n\t}\n\n\t/**\n\t * Mocks ConfigService->getFeaturesList\n\t *\n\t * @param $features\n\t */\n\tprivate function mockFeaturesList($features) {\n\t\t$this->configService->expects($this->any())\n\t\t\t\t\t\t\t->method('getFeaturesList')\n\t\t\t\t\t\t\t->willReturn($features);\n\t}\n\n\t/**\n\t * Mocks PreviewService->getSupportedMediaTypes\n\t *\n\t * @param $slideshow\n\t * @param $nativeSvgSupport\n\t * @param $mimeTypes\n\t */\n\tprivate function mockSupportedMediaTypes($slideshow, $nativeSvgSupport, $mimeTypes) {\n\t\t$this->configService->expects($this->any())\n\t\t\t\t\t\t\t ->method('getSupportedMediaTypes')\n\t\t\t\t\t\t\t ->with(\n\t\t\t\t\t\t\t\t $this->equalTo($slideshow),\n\t\t\t\t\t\t\t\t $this->equalTo($nativeSvgSupport)\n\t\t\t\t\t\t\t )\n\t\t\t\t\t\t\t ->willReturn($mimeTypes);\n\t}\n\n\t/**\n\t * Returns an error message instead of a proper features list\n\t *\n\t * @return array\n\t */\n\tprivate function mockConfigRetrievalError() {\n\t\t$exception = new ServiceException('Config corrupt');\n\t\t$errorMessage = $exception->getMessage() . \"</br></br>Config location: /user1\";\n\t\t$features = ['error' => ['message' => $errorMessage]];\n\n\t\t$this->mockFeaturesList($features);\n\n\t\treturn $features;\n\t}\n\n}\n", "<?php\n/**\n * Gallery\n *\n * This file is licensed under the Affero General Public License version 3 or\n * later. See the COPYING file.\n *\n * @author Olivier Paroz <galleryapps@oparoz.com>\n *\n * @copyright Olivier Paroz 2016\n */\n\nnamespace OCA\\Gallery\\Controller;\n\nuse OCA\\Gallery\\Service\\ServiceException;\nuse OCP\\IRequest;\nuse OCP\\IURLGenerator;\nuse OCP\\Files\\File;\nuse OCP\\Files\\Folder;\nuse OCP\\ILogger;\n\nuse OCP\\AppFramework\\IAppContainer;\nuse OCP\\AppFramework\\Http;\nuse OCP\\AppFramework\\Http\\RedirectResponse;\nuse OCP\\AppFramework\\Http\\JSONResponse;\n\nuse OCA\\Gallery\\AppInfo\\Application;\nuse OCA\\Gallery\\Http\\ImageResponse;\nuse OCA\\Gallery\\Service\\SearchFolderService;\nuse OCA\\Gallery\\Service\\ConfigService;\nuse OCA\\Gallery\\Service\\SearchMediaService;\nuse OCA\\Gallery\\Service\\DownloadService;\nuse OCA\\Gallery\\Service\\NotFoundServiceException;\n\n/**\n * Class FilesControllerTest\n *\n * @package OCA\\Gallery\\Controller\n */\nclass FilesControllerTest extends \\Test\\GalleryUnitTest {\n\n\tuse PathManipulation;\n\n\t/** @var IAppContainer */\n\tprotected $container;\n\t/** @var string */\n\tprotected $appName = 'gallery';\n\t/** @var IRequest */\n\tprotected $request;\n\t/** @var FilesController */\n\tprotected $controller;\n\t/** @var IURLGenerator */\n\tprotected $urlGenerator;\n\t/** @var SearchFolderService */\n\tprotected $searchFolderService;\n\t/** @var ConfigService */\n\tprotected $configService;\n\t/** @var SearchMediaService */\n\tprotected $searchMediaService;\n\t/** @var DownloadService */\n\tprotected $downloadService;\n\t/** @var ILogger */\n\tprotected $logger;\n\n\t/**\n\t * Test set up\n\t */\n\tpublic function setUp() {\n\t\tparent::setUp();\n\n\t\t$app = new Application;\n\t\t$this->container = $app->getContainer();\n\t\t$this->container['UserFolder'] = $this->getMockBuilder('OCP\\Files\\Folder')\n\t\t\t\t\t\t\t\t\t\t\t  ->disableOriginalConstructor()\n\t\t\t\t\t\t\t\t\t\t\t  ->getMock();\n\t\t$this->request = $this->getMockBuilder('\\OCP\\IRequest')\n\t\t\t\t\t\t\t  ->disableOriginalConstructor()\n\t\t\t\t\t\t\t  ->getMock();\n\t\t$this->urlGenerator = $this->getMockBuilder('\\OCP\\IURLGenerator')\n\t\t\t\t\t\t\t\t   ->disableOriginalConstructor()\n\t\t\t\t\t\t\t\t   ->getMock();\n\t\t$this->searchFolderService =\n\t\t\t$this->getMockBuilder('\\OCA\\Gallery\\Service\\SearchFolderService')\n\t\t\t\t ->disableOriginalConstructor()\n\t\t\t\t ->getMock();\n\t\t$this->configService = $this->getMockBuilder('\\OCA\\Gallery\\Service\\ConfigService')\n\t\t\t\t\t\t\t\t\t->disableOriginalConstructor()\n\t\t\t\t\t\t\t\t\t->getMock();\n\t\t$this->searchMediaService = $this->getMockBuilder('\\OCA\\Gallery\\Service\\SearchMediaService')\n\t\t\t\t\t\t\t\t\t\t ->disableOriginalConstructor()\n\t\t\t\t\t\t\t\t\t\t ->getMock();\n\t\t$this->downloadService = $this->getMockBuilder('\\OCA\\Gallery\\Service\\DownloadService')\n\t\t\t\t\t\t\t\t\t  ->disableOriginalConstructor()\n\t\t\t\t\t\t\t\t\t  ->getMock();\n\t\t$this->logger = $this->getMockBuilder('\\OCP\\ILogger')\n\t\t\t\t\t\t\t ->disableOriginalConstructor()\n\t\t\t\t\t\t\t ->getMock();\n\t\t$this->controller = new FilesController(\n\t\t\t$this->appName,\n\t\t\t$this->request,\n\t\t\t$this->urlGenerator,\n\t\t\t$this->searchFolderService,\n\t\t\t$this->configService,\n\t\t\t$this->searchMediaService,\n\t\t\t$this->downloadService,\n\t\t\t$this->logger\n\t\t);\n\t}\n\n\t/**\n\t * @return array\n\t */\n\tpublic function providesTestDownloadData() {\n\t\treturn [\n\t\t\t[1234, $this->mockJpgFile(1234), 'image/jpeg'],\n\t\t\t[4567, $this->mockSvgFile(4567), 'text/plain']\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider providesTestDownloadData\n\t *\n\t * @param int $fileId\n\t * @param File $file\n\t * @param string $expectedMimeType\n\t */\n\tpublic function testDownload($fileId, $file, $expectedMimeType) {\n\t\t$filename = null;\n\t\t$download = $this->mockGetDownload($fileId, $file, $filename);\n\n\t\t/** @type ImageResponse $response */\n\t\t$response = $this->controller->download($fileId, $filename);\n\n\t\t$this->assertEquals(Http::STATUS_OK, $response->getStatus());\n\t\t$this->assertEquals(\n\t\t\t$expectedMimeType . '; charset=utf-8', $response->getHeaders()['Content-type']\n\t\t);\n\t\t$this->assertEquals($download['preview'], $response->render());\n\t}\n\n\tpublic function testDownloadWithWrongId() {\n\t\t$fileId = 99999;\n\t\t$filename = null;\n\t\t$status = Http::STATUS_NOT_FOUND;\n\n\t\t$exception = new NotFoundServiceException('Not found');\n\t\t$this->mockGetFileWithBadFile($this->downloadService, $fileId, $exception);\n\n\t\t$redirectUrl = '/index.php/app/error';\n\t\t$this->mockUrlToErrorPage($status, $redirectUrl);\n\n\t\t/** @type RedirectResponse $response */\n\t\t$response = $this->controller->download($fileId, $filename);\n\n\t\t$this->assertEquals($redirectUrl, $response->getRedirectURL());\n\t\t$this->assertEquals(Http::STATUS_SEE_OTHER, $response->getStatus());\n\t\t$this->assertEquals(\n\t\t\t$exception->getMessage(), $response->getCookies()['galleryErrorMessage']['value']\n\t\t);\n\t}\n\n\tpublic function providesGetFilesWithWorkingSetupData() {\n\t\t$location = 'folder';\n\t\t$folderPathFromRoot = 'user/files/' . $location;\n\t\t$etag = 1111222233334444;\n\n\n\t\t$folderId = 9876;\n\t\t$folderPermissions = 31;\n\t\t$folderEtag = 9999888877776666;\n\t\t$folderIsShared = false;\n\t\t$files = [\n\t\t\t['path' => $folderPathFromRoot . '/deep/path.png'],\n\t\t\t['path' => $folderPathFromRoot . '/testimage.png'],\n\t\t];\n\t\t$albums = [\n\t\t\t['path' => $folderPathFromRoot . '/deep'],\n\t\t];\n\t\t$albumConfig = [\n\t\t\t'information' => [],\n\t\t\t'sorting'     => [],\n\t\t\t'design'      => [],\n\t\t];\n\n\t\t$folderData = ['home::user', $folderId, $files, true, false, null, '', false, $folderIsShared,\n\t\t\t\t\t$folderEtag, 4096, 'some/path', null, $folderPermissions];\n\n\t\t$folder = call_user_func_array([$this,'mockFolder'], $folderData);\n\t\t$folder2 = call_user_func_array([$this, 'mockFolder'], $folderData);\n\n\t\treturn [\n\t\t\t[\n\t\t\t\t$location, $folderPathFromRoot, $folder, $albumConfig, $files, $albums, $etag,\n\t\t\t\t[\n\t\t\t\t\t'files'       => $files,\n\t\t\t\t\t'albums'      => $albums,\n\t\t\t\t\t'albumconfig' => $albumConfig,\n\t\t\t\t\t'albumpath'   => $folderPathFromRoot,\n\t\t\t\t\t'updated'     => true\n\t\t\t\t]\n\t\t\t],\n\t\t\t[\n\t\t\t\t$location, $folderPathFromRoot, $folder2, $albumConfig, $files, $albums, $folderEtag,\n\t\t\t\t[\n\t\t\t\t\t'files'       => [],\n\t\t\t\t\t'albums'      => [],\n\t\t\t\t\t'albumconfig' => $albumConfig,\n\t\t\t\t\t'albumpath'   => $folderPathFromRoot,\n\t\t\t\t\t'updated'     => false\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider providesGetFilesWithWorkingSetupData\n\t *\n\t * @param string $location\n\t * @param string $folderPathFromRoot\n\t * @param Folder $folder\n\t * @param array $albumConfig\n\t * @param array $files\n\t * @param array $albums\n\t * @param string $etag\n\t * @param array $result\n\t *\n\t * @internal param $ $\n\t */\n\tpublic function testGetFilesWithWorkingSetup(\n\t\t$location, $folderPathFromRoot, $folder, $albumConfig, $files, $albums, $etag, $result\n\t) {\n\t\t$features = '';\n\t\t$mediatypes = 'image/png';\n\n\t\t$this->mockGetCurrentFolder($location, $folderPathFromRoot, [$features], $folder);\n\t\t$this->mockGetConfig($folder, [$features], $albumConfig);\n\t\t$this->mockGetMediaFiles($folder, [$mediatypes], [$features], [$files, $albums]);\n\n\t\t$response = $this->controller->getList($location, $features, $etag, $mediatypes);\n\n\t\t/*$fakeResponse = new JSONResponse(\n\t\t\t[\n\t\t\t\t'message' => 'let me see',\n\t\t\t\t'success' => false\n\t\t\t]\n\t\t);*/\n\t\t$this->assertEquals($result, $response);\n\t}\n\n\tpublic function testGetFilesWithBrokenSetup() {\n\t\t$location = '';\n\t\t$features = '';\n\t\t$etag = 1111222233334444;\n\t\t$mediatypes = 'image/png';\n\t\t$exceptionMessage = 'A\u00efe!';\n\t\t$this->searchFolderService->expects($this->once())\n\t\t\t\t\t\t\t\t  ->method('getCurrentFolder')\n\t\t\t\t\t\t\t\t  ->with(\n\t\t\t\t\t\t\t\t\t  $location,\n\t\t\t\t\t\t\t\t\t  [$features]\n\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t  ->willThrowException(new ServiceException($exceptionMessage));\n\t\t// Default status code when something breaks\n\t\t$status = Http::STATUS_INTERNAL_SERVER_ERROR;\n\t\t$errorMessage = [\n\t\t\t'message' => $exceptionMessage . ' (' . $status . ')',\n\t\t\t'success' => false\n\t\t];\n\t\t/** @type JSONResponse $response */\n\t\t$response = $this->controller->getList($location, $features, $etag, $mediatypes);\n\n\t\t$this->assertEquals($errorMessage, $response->getData());\n\t}\n\n\tpublic function providesFilesData() {\n\t\t$location = 'folder1';\n\t\t$folderPathFromRoot = 'user/files/' . $location;\n\n\t\treturn [\n\t\t\t[\n\t\t\t\t['path' => $folderPathFromRoot . '/deep/folder/to/test/path/reduction.png'],\n\t\t\t\t$folderPathFromRoot . '/deep/reduction.png',\n\t\t\t\t$folderPathFromRoot\n\t\t\t],\n\t\t\t[\n\t\t\t\t['path' => $folderPathFromRoot . '/folder/image.png'],\n\t\t\t\t$folderPathFromRoot . '/folder/image.png',\n\t\t\t\t$folderPathFromRoot\n\t\t\t],\n\t\t\t[\n\t\t\t\t['path' => $folderPathFromRoot . '/testimage.png'],\n\t\t\t\t$folderPathFromRoot . '/testimage.png',\n\t\t\t\t$folderPathFromRoot\n\t\t\t]\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider providesFilesData\n\t *\n\t * @param array $file\n\t * @param string $fixedPath\n\t * @param string $folderPathFromRoot\n\t */\n\tpublic function testGetReducedPath($file, $fixedPath, $folderPathFromRoot) {\n\t\t$response = $this->getReducedPath($file['path'], $folderPathFromRoot);\n\n\t\t$this->assertEquals($fixedPath, $response);\n\t}\n\n\t/**\n\t * Mocks IURLGenerator->linkToRoute\n\t *\n\t * @param int $code\n\t * @param string $url\n\t */\n\tprotected function mockUrlToErrorPage($code, $url) {\n\t\t$this->urlGenerator->expects($this->once())\n\t\t\t\t\t\t   ->method('linkToRoute')\n\t\t\t\t\t\t   ->with($this->appName . '.page.error_page', ['code' => $code])\n\t\t\t\t\t\t   ->willReturn($url);\n\t}\n\n\t/**\n\t * Mocks Files->getDownload\n\t *\n\t * @param int $fileId the ID of the file of which we need a large preview of\n\t * @param File $file\n\t * @param string|null $filename\n\t *\n\t * @return array\n\t */\n\tprivate function mockGetDownload($fileId, $file, $filename) {\n\t\t$this->mockGetFile($this->downloadService, $fileId, $file);\n\n\t\t$download = $this->mockDownloadData($file, $filename);\n\n\t\t$this->mockDownloadFile($file, $download);\n\n\t\treturn $download;\n\t}\n\n\t/**\n\t * @param object|\\PHPUnit_Framework_MockObject_MockObject $file\n\t * @param $filename\n\t *\n\t * @return array\n\t */\n\tprivate function mockDownloadData($file, $filename) {\n\t\t$download = [\n\t\t\t'preview'  => $file->getContent(),\n\t\t\t'mimetype' => $file->getMimeType(),\n\t\t];\n\n\t\tif ($download) {\n\t\t\tif (is_null($filename)) {\n\t\t\t\t$filename = $file->getName();\n\t\t\t}\n\t\t\t$download['name'] = $filename;\n\t\t}\n\n\t\treturn $download;\n\t}\n\n\t/**\n\t * Mocks DownloadService->downloadFile\n\t *\n\t * @param object|\\PHPUnit_Framework_MockObject_MockObject $file\n\t * @param array $download\n\t */\n\tprivate function mockDownloadFile($file, $download) {\n\t\t$this->downloadService->expects($this->once())\n\t\t\t\t\t\t\t  ->method('downloadFile')\n\t\t\t\t\t\t\t  ->with($this->equalTo($file))\n\t\t\t\t\t\t\t  ->willReturn($download);\n\t}\n\n\t/**\n\t * Mocks SearchFolderService->getCurrentFolder\n\t *\n\t * @param $location\n\t * @param $folderPathFromRoot\n\t * @param $features\n\t * @param $folder\n\t */\n\tprivate function mockGetCurrentFolder($location, $folderPathFromRoot, $features, $folder) {\n\t\t$answer = [\n\t\t\t$folderPathFromRoot,\n\t\t\t$folder,\n\t\t];\n\t\t$this->searchFolderService->expects($this->once())\n\t\t\t\t\t\t\t\t  ->method('getCurrentFolder')\n\t\t\t\t\t\t\t\t  ->with(\n\t\t\t\t\t\t\t\t\t  $location,\n\t\t\t\t\t\t\t\t\t  $features\n\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t  ->willReturn($answer);\n\t}\n\n\t/**\n\t * Mocks ConfigService->getConfig\n\t *\n\t * @param $folderNode\n\t * @param $features\n\t * @param $answer\n\t */\n\tprivate function mockGetConfig($folderNode, $features, $answer) {\n\t\t$this->configService->expects($this->once())\n\t\t\t\t\t\t\t->method('getConfig')\n\t\t\t\t\t\t\t->with(\n\t\t\t\t\t\t\t\t$folderNode,\n\t\t\t\t\t\t\t\t$features\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t->willReturn($answer);\n\t}\n\n\t/**\n\t * Mocks SearchMediaService->getMediaFiles\n\t *\n\t * @param $folderNode\n\t * @param $mediatypes\n\t * @param $features\n\t * @param $answer\n\t */\n\tprivate function mockGetMediaFiles($folderNode, $mediatypes, $features, $answer) {\n\t\t$this->searchMediaService->expects($this->any())\n\t\t\t\t\t\t\t\t ->method('getMediaFiles')\n\t\t\t\t\t\t\t\t ->with(\n\t\t\t\t\t\t\t\t\t $folderNode,\n\t\t\t\t\t\t\t\t\t $mediatypes,\n\t\t\t\t\t\t\t\t\t $features\n\t\t\t\t\t\t\t\t )\n\t\t\t\t\t\t\t\t ->willReturn($answer);\n\t}\n\n}\n", "<?php\n/**\n * Gallery\n *\n * This file is licensed under the Affero General Public License version 3 or\n * later. See the COPYING file.\n *\n * @author Olivier Paroz <galleryapps@oparoz.com>\n *\n * @copyright Olivier Paroz 2016\n */\n\nnamespace OCA\\Gallery\\Controller;\n\nuse OCP\\AppFramework\\Http;\nuse OCP\\AppFramework\\Http\\JSONResponse;\nuse OCP\\AppFramework\\Http\\RedirectResponse;\n\nuse OCA\\Gallery\\Environment\\NotFoundEnvException;\nuse OCA\\Gallery\\Service\\NotFoundServiceException;\nuse OCA\\Gallery\\Service\\ForbiddenServiceException;\nuse OCA\\Gallery\\Service\\InternalServerErrorServiceException;\n\n/**\n * Class HttpErrorTest\n *\n * @package OCA\\Gallery\\Controller\n */\nclass HttpErrorTest extends \\Test\\TestCase {\n\n\t/** @var string */\n\tprivate $appName = 'gallery';\n\n\t/**\n\t * @return array\n\t */\n\tpublic function providesExceptionData() {\n\t\t$notFoundEnvMessage = 'Not found in env';\n\t\t$notFoundEnvException = new NotFoundEnvException($notFoundEnvMessage);\n\t\t$notFoundEnvStatus = Http::STATUS_NOT_FOUND;\n\n\t\t$notFoundServiceMessage = 'Not found in service';\n\t\t$notFoundServiceException = new NotFoundServiceException($notFoundServiceMessage);\n\t\t$notFoundServiceStatus = Http::STATUS_NOT_FOUND;\n\n\t\t$forbiddenServiceMessage = 'Forbidden in service';\n\t\t$forbiddenServiceException = new ForbiddenServiceException($forbiddenServiceMessage);\n\t\t$forbiddenServiceStatus = Http::STATUS_FORBIDDEN;\n\n\t\t$errorServiceMessage = 'Broken service';\n\t\t$errorServiceException = new InternalServerErrorServiceException($errorServiceMessage);\n\t\t$errorServiceStatus = Http::STATUS_INTERNAL_SERVER_ERROR;\n\n\t\t$coreServiceMessage = 'Broken core';\n\t\t$coreServiceException = new \\Exception($coreServiceMessage);\n\t\t$coreServiceStatus = Http::STATUS_INTERNAL_SERVER_ERROR;\n\n\t\treturn [\n\t\t\t[$notFoundEnvException, $notFoundEnvMessage, $notFoundEnvStatus],\n\t\t\t[$notFoundServiceException, $notFoundServiceMessage, $notFoundServiceStatus],\n\t\t\t[$forbiddenServiceException, $forbiddenServiceMessage, $forbiddenServiceStatus],\n\t\t\t[$errorServiceException, $errorServiceMessage, $errorServiceStatus],\n\t\t\t[$coreServiceException, $coreServiceMessage, $coreServiceStatus]\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider providesExceptionData\n\t *\n\t * @param \\Exception $exception\n\t * @param String $message\n\t * @param String $status\n\t */\n\tpublic function testJsonError($exception, $message, $status) {\n\t\t$httpError = $this->getMockForTrait('\\OCA\\Gallery\\Controller\\HttpError');\n\t\t/** @type JSONResponse $response */\n\t\t$response = $httpError->jsonError($exception);\n\n\t\t$this->assertEquals(\n\t\t\t['message' => $message . ' (' . $status . ')', 'success' => false], $response->getData()\n\t\t);\n\t\t$this->assertEquals($status, $response->getStatus());\n\t}\n\n\t/**\n\t * @dataProvider providesExceptionData\n\t *\n\t * @param \\Exception $exception\n\t * @param String $message\n\t * @param String $status\n\t */\n\tpublic function testHtmlError($exception, $message, $status) {\n\t\t$urlGenerator = $this->mockIURLGenerator();\n\t\t$redirectUrl = '/index.php/app/error';\n\t\t$this->mockUrlToErrorPage($urlGenerator, $status, $redirectUrl);\n\n\t\t$httpError = $this->getMockForTrait('\\OCA\\Gallery\\Controller\\HttpError');\n\n\t\t/** @type RedirectResponse $response */\n\t\t$response = $httpError->htmlError($urlGenerator, $this->appName, $exception);\n\t\t$this->assertEquals($redirectUrl, $response->getRedirectURL());\n\t\t$this->assertEquals(Http::STATUS_SEE_OTHER, $response->getStatus());\n\t\t$this->assertEquals($message, $response->getCookies()['galleryErrorMessage']['value']);\n\t}\n\n\tprivate function mockIURLGenerator() {\n\t\treturn $this->getMockBuilder('\\OCP\\IURLGenerator')\n\t\t\t\t\t->disableOriginalConstructor()\n\t\t\t\t\t->getMock();\n\t}\n\n\t/**\n\t * Mocks IURLGenerator->linkToRoute()\n\t *\n\t * @param int $code\n\t * @param string $url\n\t */\n\tprivate function mockUrlToErrorPage($urlGenerator, $code, $url) {\n\t\t$urlGenerator->expects($this->once())\n\t\t\t\t\t ->method('linkToRoute')\n\t\t\t\t\t ->with($this->appName . '.page.error_page', ['code' => $code])\n\t\t\t\t\t ->willReturn($url);\n\t}\n\n}\n"], "fixing_code": ["<?php\n/**\n * Gallery\n *\n * This file is licensed under the Affero General Public License version 3 or\n * later. See the COPYING file.\n *\n * @author Olivier Paroz <galleryapps@oparoz.com>\n *\n * @copyright Olivier Paroz 2016\n */\n\nnamespace OCA\\Gallery\\Controller;\n\nuse OCP\\IRequest;\nuse OCP\\ILogger;\n\nuse OCP\\AppFramework\\ApiController;\nuse OCP\\AppFramework\\Http;\n\nuse OCA\\Gallery\\Service\\ConfigService;\n\n/**\n * Class ConfigApiController\n *\n * @package OCA\\Gallery\\Controller\n */\nclass ConfigApiController extends ApiController {\n\n\tuse Config;\n\tuse HttpError;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param string $appName\n\t * @param IRequest $request\n\t * @param ConfigService $configService\n\t * @param ILogger $logger\n\t */\n\tpublic function __construct(\n\t\t$appName,\n\t\tIRequest $request,\n\t\tConfigService $configService,\n\t\tILogger $logger\n\t) {\n\t\tparent::__construct($appName, $request);\n\n\t\t$this->configService = $configService;\n\t\t$this->logger = $logger;\n\t}\n\n\t/**\n\t * @NoAdminRequired\n\t * @NoCSRFRequired\n\t * @CORS\n\t *\n\t * Returns an app configuration array\n\t *\n\t * @param bool $extramediatypes\n\t *\n\t * @return array <string,null|array>\n\t */\n\tpublic function get($extramediatypes = false) {\n\t\ttry {\n\t\t\treturn $this->getConfig($extramediatypes);\n\t\t} catch (\\Exception $exception) {\n\t\t\treturn $this->jsonError($exception, $this->request, $this->logger);\n\t\t}\n\t}\n\n}\n", "<?php\n/**\n * Gallery\n *\n * This file is licensed under the Affero General Public License version 3 or\n * later. See the COPYING file.\n *\n * @author Olivier Paroz <galleryapps@oparoz.com>\n *\n * @copyright Olivier Paroz 2016\n */\n\nnamespace OCA\\Gallery\\Controller;\n\nuse OCP\\IRequest;\nuse OCP\\ILogger;\n\nuse OCP\\AppFramework\\Controller;\nuse OCP\\AppFramework\\Http;\n\nuse OCA\\Gallery\\Service\\ConfigService;\n\n/**\n * Class ConfigController\n *\n * @package OCA\\Gallery\\Controller\n */\nclass ConfigController extends Controller {\n\n\tuse Config;\n\tuse HttpError;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param string $appName\n\t * @param IRequest $request\n\t * @param ConfigService $configService\n\t * @param ILogger $logger\n\t */\n\tpublic function __construct(\n\t\t$appName,\n\t\tIRequest $request,\n\t\tConfigService $configService,\n\t\tILogger $logger\n\t) {\n\t\tparent::__construct($appName, $request);\n\n\t\t$this->configService = $configService;\n\t\t$this->logger = $logger;\n\t}\n\n\t/**\n\t * @NoAdminRequired\n\t *\n\t * Returns an app configuration array\n\t *\n\t * @param bool $extramediatypes\n\t *\n\t * @return array <string,null|array>\n\t */\n\tpublic function get($extramediatypes = false) {\n\t\ttry {\n\t\t\treturn $this->getConfig($extramediatypes);\n\t\t} catch (\\Exception $exception) {\n\t\t\treturn $this->jsonError($exception, $this->request, $this->logger);\n\t\t}\n\t}\n\n}\n", "<?php\n/**\n * Gallery\n *\n * This file is licensed under the Affero General Public License version 3 or\n * later. See the COPYING file.\n *\n * @author Olivier Paroz <galleryapps@oparoz.com>\n *\n * @copyright Olivier Paroz 2014-2016\n */\n\nnamespace OCA\\Gallery\\Controller;\n\nuse OCP\\IRequest;\nuse OCP\\IURLGenerator;\nuse OCP\\ILogger;\n\nuse OCP\\AppFramework\\ApiController;\nuse OCP\\AppFramework\\Http;\nuse OCP\\AppFramework\\Http\\RedirectResponse;\n\nuse OCA\\Gallery\\Http\\ImageResponse;\nuse OCA\\Gallery\\Service\\SearchFolderService;\nuse OCA\\Gallery\\Service\\ConfigService;\nuse OCA\\Gallery\\Service\\SearchMediaService;\nuse OCA\\Gallery\\Service\\DownloadService;\nuse OCA\\Gallery\\Service\\ServiceException;\n\n/**\n * Class FilesApiController\n *\n * @package OCA\\Gallery\\Controller\n */\nclass FilesApiController extends ApiController {\n\n\tuse Files;\n\tuse HttpError;\n\n\t/** @var IURLGenerator */\n\tprivate $urlGenerator;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param string $appName\n\t * @param IRequest $request\n\t * @param IURLGenerator $urlGenerator\n\t * @param SearchFolderService $searchFolderService\n\t * @param ConfigService $configService\n\t * @param SearchMediaService $searchMediaService\n\t * @param DownloadService $downloadService\n\t * @param ILogger $logger\n\t */\n\tpublic function __construct(\n\t\t$appName,\n\t\tIRequest $request,\n\t\tIURLGenerator $urlGenerator,\n\t\tSearchFolderService $searchFolderService,\n\t\tConfigService $configService,\n\t\tSearchMediaService $searchMediaService,\n\t\tDownloadService $downloadService,\n\t\tILogger $logger\n\t) {\n\t\tparent::__construct($appName, $request);\n\n\t\t$this->urlGenerator = $urlGenerator;\n\t\t$this->searchFolderService = $searchFolderService;\n\t\t$this->configService = $configService;\n\t\t$this->searchMediaService = $searchMediaService;\n\t\t$this->downloadService = $downloadService;\n\t\t$this->logger = $logger;\n\t}\n\n\t/**\n\t * @NoAdminRequired\n\t * @NoCSRFRequired\n\t * @CORS\n\t *\n\t * Returns a list of all media files available to the authenticated user\n\t *\n\t * @see FilesController::getList()\n\t *\n\t * @param string $location a path representing the current album in the app\n\t * @param string $features the list of supported features\n\t * @param string $etag the last known etag in the client\n\t * @param string $mediatypes the list of supported media types\n\t *\n\t * @return array <string,array<string,string|int>>|Http\\JSONResponse\n\t */\n\tpublic function getList($location, $features, $etag, $mediatypes) {\n\t\t$featuresArray = explode(';', $features);\n\t\t$mediaTypesArray = explode(';', $mediatypes);\n\t\ttry {\n\t\t\treturn $this->getFilesAndAlbums($location, $featuresArray, $etag, $mediaTypesArray);\n\t\t} catch (\\Exception $exception) {\n\t\t\treturn $this->jsonError($exception, $this->request, $this->logger);\n\t\t}\n\t}\n\n\t/**\n\t * @NoAdminRequired\n\t * @NoCSRFRequired\n\t * @CORS\n\t *\n\t * Sends the file matching the fileId\n\t *\n\t * In case of error we send an HTML error page\n\t * We need to keep the session open in order to be able to send the error message to the error\n\t *     page\n\t *\n\t * @param int $fileId the ID of the file we want to download\n\t * @param string|null $filename\n\t *\n\t * @return ImageResponse\n\t */\n\tpublic function download($fileId, $filename = null) {\n\t\ttry {\n\t\t\t$download = $this->getDownload($fileId, $filename);\n\t\t} catch (ServiceException $exception) {\n\t\t\t$code = $this->getHttpStatusCode($exception);\n\t\t\t$url = $this->urlGenerator->linkToRoute(\n\t\t\t\t$this->appName . '.page.error_page', ['code' => $code]\n\t\t\t);\n\n\t\t\t// Don't set a cookie for the error message, we don't want it in the API\n\t\t\treturn new RedirectResponse($url);\n\t\t}\n\n\t\t// That's the only exception out of all the image media types\n\t\tif ($download['mimetype'] === 'image/svg+xml') {\n\t\t\t$download['mimetype'] = 'text/plain';\n\t\t}\n\n\t\treturn new ImageResponse($download);\n\t}\n\n}\n", "<?php\n/**\n * Gallery\n *\n * This file is licensed under the Affero General Public License version 3 or\n * later. See the COPYING file.\n *\n * @author Olivier Paroz <galleryapps@oparoz.com>\n *\n * @copyright Olivier Paroz 2016\n */\n\nnamespace OCA\\Gallery\\Controller;\n\nuse OCP\\IRequest;\nuse OCP\\IURLGenerator;\nuse OCP\\ILogger;\n\nuse OCP\\AppFramework\\Controller;\nuse OCP\\AppFramework\\Http;\nuse OCP\\AppFramework\\Http\\RedirectResponse;\n\nuse OCA\\Gallery\\Http\\ImageResponse;\nuse OCA\\Gallery\\Service\\SearchFolderService;\nuse OCA\\Gallery\\Service\\ConfigService;\nuse OCA\\Gallery\\Service\\SearchMediaService;\nuse OCA\\Gallery\\Service\\DownloadService;\nuse OCA\\Gallery\\Service\\ServiceException;\n\n/**\n * Class FilesController\n *\n * @package OCA\\Gallery\\Controller\n */\nclass FilesController extends Controller {\n\n\tuse Files;\n\tuse HttpError;\n\n\t/** @var IURLGenerator */\n\tprivate $urlGenerator;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param string $appName\n\t * @param IRequest $request\n\t * @param IURLGenerator $urlGenerator\n\t * @param SearchFolderService $searchFolderService\n\t * @param ConfigService $configService\n\t * @param SearchMediaService $searchMediaService\n\t * @param DownloadService $downloadService\n\t * @param ILogger $logger\n\t */\n\tpublic function __construct(\n\t\t$appName,\n\t\tIRequest $request,\n\t\tIURLGenerator $urlGenerator,\n\t\tSearchFolderService $searchFolderService,\n\t\tConfigService $configService,\n\t\tSearchMediaService $searchMediaService,\n\t\tDownloadService $downloadService,\n\t\tILogger $logger\n\t) {\n\t\tparent::__construct($appName, $request);\n\n\t\t$this->urlGenerator = $urlGenerator;\n\t\t$this->searchFolderService = $searchFolderService;\n\t\t$this->configService = $configService;\n\t\t$this->searchMediaService = $searchMediaService;\n\t\t$this->downloadService = $downloadService;\n\t\t$this->logger = $logger;\n\t}\n\n\t/**\n\t * @NoAdminRequired\n\t *\n\t * Returns a list of all media files available to the authenticated user\n\t *\n\t *    * Authentication can be via a login/password or a token/(password)\n\t *    * For private galleries, it returns all media files, with the full path from the root\n\t *     folder For public galleries, the path starts from the folder the link gives access to\n\t *     (virtual root)\n\t *    * An exception is only caught in case something really wrong happens. As we don't test\n\t *     files before including them in the list, we may return some bad apples\n\t *\n\t * @param string $location a path representing the current album in the app\n\t * @param string $features the list of supported features\n\t * @param string $etag the last known etag in the client\n\t * @param string $mediatypes the list of supported media types\n\t *\n\t * @return array <string,array<string,string|int>>|Http\\JSONResponse\n\t */\n\tpublic function getList($location, $features, $etag, $mediatypes) {\n\t\t$featuresArray = explode(';', $features);\n\t\t$mediaTypesArray = explode(';', $mediatypes);\n\t\ttry {\n\t\t\treturn $this->getFilesAndAlbums($location, $featuresArray, $etag, $mediaTypesArray);\n\t\t} catch (\\Exception $exception) {\n\t\t\treturn $this->jsonError($exception, $this->request, $this->logger);\n\t\t}\n\t}\n\n\t/**\n\t * @NoAdminRequired\n\t *\n\t * Sends the file matching the fileId\n\t *\n\t * @param int $fileId the ID of the file we want to download\n\t * @param string|null $filename\n\t *\n\t * @return ImageResponse\n\t */\n\tpublic function download($fileId, $filename = null) {\n\t\ttry {\n\t\t\t$download = $this->getDownload($fileId, $filename);\n\t\t} catch (ServiceException $exception) {\n\t\t\t$code = $this->getHttpStatusCode($exception);\n\t\t\t$url = $this->urlGenerator->linkToRoute(\n\t\t\t\t$this->appName . '.page.error_page', ['code' => $code]\n\t\t\t);\n\n\t\t\t$response = new RedirectResponse($url);\n\t\t\t$response->addCookie('galleryErrorMessage', $exception->getMessage());\n\n\t\t\treturn $response;\n\t\t}\n\n\t\t// That's the only exception out of all the image media types we serve\n\t\tif ($download['mimetype'] === 'image/svg+xml') {\n\t\t\t$download['mimetype'] = 'text/plain';\n\t\t}\n\n\t\treturn new ImageResponse($download);\n\t}\n\n}\n", "<?php\n/**\n * Gallery\n *\n * This file is licensed under the Affero General Public License version 3 or\n * later. See the COPYING file.\n *\n * @author Bernhard Posselt <dev@bernhard-posselt.com>\n * @author Olivier Paroz <galleryapps@oparoz.com>\n *\n * @copyright Bernhard Posselt 2014-2015\n * @copyright Olivier Paroz 2014-2016\n */\n\nnamespace OCA\\Gallery\\Controller;\n\nuse Exception;\n\nuse OCP\\ILogger;\nuse OCP\\IRequest;\nuse OCP\\IURLGenerator;\n\nuse OCP\\AppFramework\\Http;\nuse OCP\\AppFramework\\Http\\JSONResponse;\nuse OCP\\AppFramework\\Http\\RedirectResponse;\n\nuse OCA\\Gallery\\Environment\\NotFoundEnvException;\nuse OCA\\Gallery\\Service\\NotFoundServiceException;\nuse OCA\\Gallery\\Service\\ForbiddenServiceException;\n\n/**\n * Our classes extend both Controller and ApiController, so we need to use\n * traits to add some common methods\n *\n * @package OCA\\Gallery\\Controller\n */\ntrait HttpError {\n\n\t/**\n\t * @param \\Exception $exception\n\t * @param IRequest $request\n\t * @param ILogger $logger\n\t *\n\t * @return JSONResponse\n\t */\n\tpublic function jsonError(Exception $exception,\n\t\t\t\t\t\t\t  IRequest $request,\n\t\t\t\t\t\t\t  ILogger $logger) {\n\t\t$code = $this->getHttpStatusCode($exception);\n\n\t\t// If the exception is not of type ForbiddenServiceException only show a\n\t\t// generic error message to avoid leaking information.\n\t\tif(!($exception instanceof ForbiddenServiceException)) {\n\t\t\t$logger->logException($exception, ['app' => 'gallery']);\n\t\t\t$message = sprintf('An error occurred. Request ID: %s', $request->getId());\n\t\t} else {\n\t\t\t$message = $exception->getMessage() . ' (' . $code . ')';\n\t\t}\n\n\t\treturn new JSONResponse(\n\t\t\t[\n\t\t\t\t'message' => $message,\n\t\t\t\t'success' => false,\n\t\t\t],\n\t\t\t$code\n\t\t);\n\t}\n\n\t/**\n\t * @param IURLGenerator $urlGenerator\n\t * @param string $appName\n\t * @param \\Exception $exception\n\t *\n\t * @return RedirectResponse\n\t */\n\tpublic function htmlError($urlGenerator, $appName, Exception $exception) {\n\t\t$message = $exception->getMessage();\n\t\t$code = $this->getHttpStatusCode($exception);\n\t\t$url = $urlGenerator->linkToRoute(\n\t\t\t$appName . '.page.error_page', ['code' => $code]\n\t\t);\n\n\t\t$response = new RedirectResponse($url);\n\t\t$response->addCookie('galleryErrorMessage', $message);\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Returns an error array\n\t *\n\t * @param $exception\n\t *\n\t * @return array<null|int|string>\n\t */\n\tpublic function getHttpStatusCode($exception) {\n\t\t$code = Http::STATUS_INTERNAL_SERVER_ERROR;\n\t\tif ($exception instanceof NotFoundServiceException\n\t\t\t|| $exception instanceof NotFoundEnvException\n\t\t) {\n\t\t\t$code = Http::STATUS_NOT_FOUND;\n\t\t}\n\t\tif ($exception instanceof ForbiddenServiceException) {\n\t\t\t$code = Http::STATUS_FORBIDDEN;\n\t\t}\n\n\t\treturn $code;\n\t}\n}\n", "/* global Handlebars, Gallery */\n(function ($, _, OC, t, Gallery) {\n\t\"use strict\";\n\n\tvar TEMPLATE_ADDBUTTON = '<a href=\"#\" class=\"button new\"><img src=\"{{iconUrl}}\" alt=\"{{addText}}\"></img></a>';\n\n\t/**\n\t * Builds and updates the Gallery view\n\t *\n\t * @constructor\n\t */\n\tvar View = function () {\n\t\tthis.element = $('#gallery');\n\t\tthis.loadVisibleRows.loading = false;\n\t\tthis._setupUploader();\n\t\tthis.breadcrumb = new Gallery.Breadcrumb();\n\t\tthis.emptyContentElement = $('#emptycontent');\n\t\tthis.controlsElement = $('#controls');\n\t};\n\n\tView.prototype = {\n\t\telement: null,\n\t\tbreadcrumb: null,\n\t\trequestId: -1,\n\t\temptyContentElement: null,\n\t\tcontrolsElement: null,\n\n\t\t/**\n\t\t * Removes all thumbnails from the view\n\t\t */\n\t\tclear: function () {\n\t\t\tthis.loadVisibleRows.processing = false;\n\t\t\tthis.loadVisibleRows.loading = null;\n\t\t\t// We want to keep all the events\n\t\t\tthis.element.children().detach();\n\t\t\tthis.showLoading();\n\t\t},\n\n\t\t/**\n\t\t * Populates the view if there are images or albums to show\n\t\t *\n\t\t * @param {string} albumPath\n\t\t * @param {string|undefined} errorMessage\n\t\t */\n\t\tinit: function (albumPath, errorMessage) {\n\t\t\t// Only do it when the app is initialised\n\t\t\tif (this.requestId === -1) {\n\t\t\t\tthis._initButtons();\n\t\t\t\tthis._blankUrl();\n\t\t\t}\n\t\t\tif ($.isEmptyObject(Gallery.imageMap)) {\n\t\t\t\tGallery.view.showEmptyFolder(albumPath, errorMessage);\n\t\t\t} else {\n\t\t\t\tthis.viewAlbum(albumPath);\n\t\t\t}\n\n\t\t\tthis._setBackgroundColour();\n\t\t},\n\n\t\t/**\n\t\t * Starts the slideshow\n\t\t *\n\t\t * @param {string} path\n\t\t * @param {string} albumPath\n\t\t */\n\t\tstartSlideshow: function (path, albumPath) {\n\t\t\tvar album = Gallery.albumMap[albumPath];\n\t\t\tvar images = album.images;\n\t\t\tvar startImage = Gallery.imageMap[path];\n\t\t\tGallery.slideShow(images, startImage, false);\n\t\t},\n\n\t\t/**\n\t\t * Sets up the controls and starts loading the gallery rows\n\t\t *\n\t\t * @param {string|null} albumPath\n\t\t */\n\t\tviewAlbum: function (albumPath) {\n\t\t\talbumPath = albumPath || '';\n\t\t\tif (!Gallery.albumMap[albumPath]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.clear();\n\n\t\t\tif (albumPath !== Gallery.currentAlbum\n\t\t\t\t|| (albumPath === Gallery.currentAlbum &&\n\t\t\t\tGallery.albumMap[albumPath].etag !== Gallery.currentEtag)) {\n\t\t\t\tGallery.currentAlbum = albumPath;\n\t\t\t\tGallery.currentEtag = Gallery.albumMap[albumPath].etag;\n\t\t\t\tthis._setupButtons(albumPath);\n\t\t\t}\n\n\t\t\tGallery.albumMap[albumPath].viewedItems = 0;\n\t\t\tGallery.albumMap[albumPath].preloadOffset = 0;\n\n\t\t\t// Each request has a unique ID, so that we can track which request a row belongs to\n\t\t\tthis.requestId = Math.random();\n\t\t\tGallery.albumMap[Gallery.currentAlbum].requestId = this.requestId;\n\n\t\t\t// Loading rows without blocking the execution of the rest of the script\n\t\t\tsetTimeout(function () {\n\t\t\t\tthis.loadVisibleRows.activeIndex = 0;\n\t\t\t\tthis.loadVisibleRows(Gallery.albumMap[Gallery.currentAlbum]);\n\t\t\t}.bind(this), 0);\n\t\t},\n\n\t\t/**\n\t\t * Manages the sorting interface\n\t\t *\n\t\t * @param {string} sortType name or date\n\t\t * @param {string} sortOrder asc or des\n\t\t */\n\t\tsortControlsSetup: function (sortType, sortOrder) {\n\t\t\tvar reverseSortType = 'date';\n\t\t\tif (sortType === 'date') {\n\t\t\t\treverseSortType = 'name';\n\t\t\t}\n\t\t\tthis._setSortButton(sortType, sortOrder, true);\n\t\t\tthis._setSortButton(reverseSortType, 'asc', false); // default icon\n\t\t},\n\n\t\t/**\n\t\t * Loads and displays gallery rows on screen\n\t\t *\n\t\t * view.loadVisibleRows.loading holds the Promise of a row\n\t\t *\n\t\t * @param {Album} album\n\t\t */\n\t\tloadVisibleRows: function (album) {\n\t\t\tvar view = this;\n\t\t\t// Wait for the previous request to be completed\n\t\t\tif (this.loadVisibleRows.processing) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * At this stage, there is no loading taking place, so we can look for new rows\n\t\t\t */\n\n\t\t\tvar scroll = $('#content-wrapper').scrollTop() + $(window).scrollTop();\n\t\t\t// 2 windows worth of rows is the limit from which we need to start loading new rows.\n\t\t\t// As we scroll down, it grows\n\t\t\tvar targetHeight = ($(window).height() * 2) + scroll;\n\t\t\t// We throttle rows in order to try and not generate too many CSS resizing events at\n\t\t\t// the same time\n\t\t\tvar showRows = _.throttle(function (album) {\n\n\t\t\t\t// If we've reached the end of the album, we kill the loader\n\t\t\t\tif (!(album.viewedItems < album.subAlbums.length + album.images.length)) {\n\t\t\t\t\tview.loadVisibleRows.processing = false;\n\t\t\t\t\tview.loadVisibleRows.loading = null;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Prevents creating rows which are no longer required. I.e when changing album\n\t\t\t\tif (view.requestId !== album.requestId) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// We can now safely create a new row\n\t\t\t\tvar row = album.getRow($(window).width());\n\t\t\t\tvar rowDom = row.getDom();\n\t\t\t\tview.element.append(rowDom);\n\n\t\t\t\treturn album.fillNextRow(row).then(function () {\n\t\t\t\t\tif (album.viewedItems < album.subAlbums.length + album.images.length &&\n\t\t\t\t\t\tview.element.height() < targetHeight) {\n\t\t\t\t\t\treturn showRows(album);\n\t\t\t\t\t}\n\t\t\t\t\t// No more rows to load at the moment\n\t\t\t\t\tview.loadVisibleRows.processing = false;\n\t\t\t\t\tview.loadVisibleRows.loading = null;\n\t\t\t\t}, function () {\n\t\t\t\t\t// Something went wrong, so kill the loader\n\t\t\t\t\tview.loadVisibleRows.processing = false;\n\t\t\t\t\tview.loadVisibleRows.loading = null;\n\t\t\t\t});\n\t\t\t}, 100);\n\t\t\tif (this.element.height() < targetHeight) {\n\t\t\t\tthis._showNormal();\n\t\t\t\tthis.loadVisibleRows.processing = true;\n\t\t\t\talbum.requestId = view.requestId;\n\t\t\t\tthis.loadVisibleRows.loading = showRows(album);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Shows an empty gallery message\n\t\t *\n\t\t * @param {string} albumPath\n\t\t * @param {string|null} errorMessage\n\t\t */\n\t\tshowEmptyFolder: function (albumPath, errorMessage) {\n\t\t\tvar message = '<div class=\"icon-gallery\"></div>';\n\t\t\tvar uploadAllowed = true;\n\n\t\t\tthis.element.children().detach();\n\t\t\tthis.removeLoading();\n\n\t\t\tif (!_.isUndefined(errorMessage) && errorMessage !== null) {\n\t\t\t\tmessage += '<h2>' + t('gallery',\n\t\t\t\t\t\t'Album cannot be shown') + '</h2>';\n\t\t\t\tmessage += '<p>' + escapeHTML(errorMessage) + '</p>';\n\t\t\t\tuploadAllowed = false;\n\t\t\t} else {\n\t\t\t\tmessage += '<h2>' + t('gallery',\n\t\t\t\t\t\t'No media files found') + '</h2>';\n\t\t\t\t// We can't upload yet on the public side\n\t\t\t\tif (Gallery.token) {\n\t\t\t\t\tmessage += '<p>' + t('gallery',\n\t\t\t\t\t\t\t'Upload pictures in the files app to display them here') + '</p>';\n\t\t\t\t} else {\n\t\t\t\t\tmessage += '<p>' + t('gallery',\n\t\t\t\t\t\t\t'Upload new files via drag and drop or by using the [+] button above') +\n\t\t\t\t\t\t'</p>';\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.emptyContentElement.html(message);\n\t\t\tthis.emptyContentElement.removeClass('hidden');\n\n\t\t\tthis._hideButtons(uploadAllowed);\n\t\t\tGallery.currentAlbum = albumPath;\n\t\t\tvar availableWidth = $(window).width() - Gallery.buttonsWidth;\n\t\t\tthis.breadcrumb.init(albumPath, availableWidth);\n\t\t\tGallery.config.albumDesign = null;\n\t\t},\n\n\t\t/**\n\t\t * Dims the controls bar when retrieving new content. Matches the effect in Files\n\t\t */\n\t\tdimControls: function () {\n\t\t\t// Use the existing mask if its already there\n\t\t\tvar $mask = this.controlsElement.find('.mask');\n\t\t\tif ($mask.exists()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t$mask = $('<div class=\"mask transparent\"></div>');\n\t\t\tthis.controlsElement.append($mask);\n\t\t\t$mask.removeClass('transparent');\n\t\t},\n\n\t\t/**\n\t\t * Shows the infamous loading spinner\n\t\t */\n\t\tshowLoading: function () {\n\t\t\tthis.emptyContentElement.addClass('hidden');\n\t\t\tthis.controlsElement.removeClass('hidden');\n\t\t\t$('#content').addClass('icon-loading');\n\t\t\tthis.dimControls();\n\t\t},\n\n\t\t/**\n\t\t * Removes the spinner in the main area and restore normal visibility of the controls bar\n\t\t */\n\t\tremoveLoading: function () {\n\t\t\t$('#content').removeClass('icon-loading');\n\t\t\tthis.controlsElement.find('.mask').remove();\n\t\t},\n\n\t\t/**\n\t\t * Shows thumbnails\n\t\t */\n\t\t_showNormal: function () {\n\t\t\tthis.emptyContentElement.addClass('hidden');\n\t\t\tthis.controlsElement.removeClass('hidden');\n\t\t\tthis.removeLoading();\n\t\t},\n\n\t\t/**\n\t\t * Sets up our custom handlers for folder uploading operations\n\t\t *\n\t\t * We only want it to be called for that specific case as all other file uploading\n\t\t * operations will call Files.highlightFiles\n\t\t *\n\t\t * @see OC.Upload.init/file_upload_param.done()\n\t\t *\n\t\t * @private\n\t\t */\n\t\t_setupUploader: function () {\n\t\t\t$('#file_upload_start').on('fileuploaddone', function (e, data) {\n\t\t\t\tif (data.files[0] === data.originalFiles[data.originalFiles.length - 1]\n\t\t\t\t\t&& data.files[0].relativePath) {\n\n\t\t\t\t\t//Ask for a refresh of the photowall\n\t\t\t\t\tGallery.getFiles(Gallery.currentAlbum).done(function () {\n\t\t\t\t\t\tGallery.view.init(Gallery.currentAlbum);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Since 9.0\n\t\t\tif (OC.Upload) {\n\t\t\t\tOC.Upload._isReceivedSharedFile = function (file) {\n\t\t\t\t\tvar path = file.name;\n\t\t\t\t\tvar sharedWith = false;\n\n\t\t\t\t\tif (Gallery.currentAlbum !== '' && Gallery.currentAlbum !== '/') {\n\t\t\t\t\t\tpath = Gallery.currentAlbum + '/' + path;\n\t\t\t\t\t}\n\t\t\t\t\tif (Gallery.imageMap[path] && Gallery.imageMap[path].sharedWithUser) {\n\t\t\t\t\t\tsharedWith = true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn sharedWith;\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Adds all the click handlers to buttons the first time they appear in the interface\n\t\t *\n\t\t * @private\n\t\t */\n\t\t_initButtons: function () {\n\t\t\tthis.element.on(\"contextmenu\", function(e) { e.preventDefault(); });\n\t\t\t$('#filelist-button').click(Gallery.switchToFilesView);\n\t\t\t$('#download').click(Gallery.download);\n\t\t\t$('#share-button').click(Gallery.share);\n\t\t\tGallery.infoBox = new Gallery.InfoBox();\n\t\t\t$('#album-info-button').click(Gallery.showInfo);\n\t\t\t$('#sort-name-button').click(Gallery.sorter);\n\t\t\t$('#sort-date-button').click(Gallery.sorter);\n\t\t\t$('#save #save-button').click(Gallery.showSaveForm);\n\t\t\t$('.save-form').submit(Gallery.saveForm);\n\t\t\tthis._renderNewButton();\n\t\t\t// Trigger cancelling of file upload\n\t\t\t$('#uploadprogresswrapper .stop').on('click', function () {\n\t\t\t\tOC.Upload.cancelUploads();\n\t\t\t});\n\t\t\tthis.requestId = Math.random();\n\t\t},\n\n\t\t/**\n\t\t * Sets up all the buttons of the interface and the breadcrumbs\n\t\t *\n\t\t * @param {string} albumPath\n\t\t * @private\n\t\t */\n\t\t_setupButtons: function (albumPath) {\n\t\t\tthis._shareButtonSetup(albumPath);\n\t\t\tthis._infoButtonSetup();\n\n\t\t\tvar availableWidth = $(window).width() - Gallery.buttonsWidth;\n\t\t\tthis.breadcrumb.init(albumPath, availableWidth);\n\t\t\tvar album = Gallery.albumMap[albumPath];\n\t\t\t\n\t\t\tvar sum = album.images.length + album.subAlbums.length;\n\t\t\t//If sum of the number of images and subalbums exceeds 1 then show the buttons.\n\t\t\tif(sum > 1)\n\t\t\t{\n\t\t\t\t$('#sort-name-button').show();\n\t\t\t\t$('#sort-date-button').show();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$('#sort-name-button').hide();\n\t\t\t\t$('#sort-date-button').hide();\n\t\t\t}\n\t\t\tvar currentSort = Gallery.config.albumSorting;\n\t\t\tthis.sortControlsSetup(currentSort.type, currentSort.order);\n\t\t\tGallery.albumMap[Gallery.currentAlbum].images.sort(\n\t\t\t\tGallery.utility.sortBy(currentSort.type,\n\t\t\t\t\tcurrentSort.order));\n\t\t\tGallery.albumMap[Gallery.currentAlbum].subAlbums.sort(Gallery.utility.sortBy('name',\n\t\t\t\tcurrentSort.albumOrder));\n\n\t\t\t$('#save-button').show();\n\t\t\t$('#download').show();\n\t\t\t$('a.button.new').show();\n\t\t},\n\n\t\t/**\n\t\t * Hide buttons in the controls bar\n\t\t *\n\t\t * @param uploadAllowed\n\t\t */\n\t\t_hideButtons: function (uploadAllowed) {\n\t\t\t$('#album-info-button').hide();\n\t\t\t$('#share-button').hide();\n\t\t\t$('#sort-name-button').hide();\n\t\t\t$('#sort-date-button').hide();\n\t\t\t$('#save-button').hide();\n\t\t\t$('#download').hide();\n\n\t\t\tif (!uploadAllowed) {\n\t\t\t\t$('a.button.new').hide();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Shows or hides the share button depending on if we're in a public gallery or not\n\t\t *\n\t\t * @param {string} albumPath\n\t\t * @private\n\t\t */\n\t\t_shareButtonSetup: function (albumPath) {\n\t\t\tvar shareButton = $('#share-button');\n\t\t\tif (albumPath === '' || Gallery.token) {\n\t\t\t\tshareButton.hide();\n\t\t\t} else {\n\t\t\t\tshareButton.show();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Shows or hides the info button based on the information we've received from the server\n\t\t *\n\t\t * @private\n\t\t */\n\t\t_infoButtonSetup: function () {\n\t\t\tvar infoButton = $('#album-info-button');\n\t\t\tinfoButton.find('span').hide();\n\t\t\tvar infoContentContainer = $('.album-info-container');\n\t\t\tinfoContentContainer.slideUp();\n\t\t\tinfoContentContainer.css('max-height',\n\t\t\t\t$(window).height() - Gallery.browserToolbarHeight);\n\t\t\tvar albumInfo = Gallery.config.albumInfo;\n\t\t\tif (Gallery.config.albumError) {\n\t\t\t\tinfoButton.hide();\n\t\t\t\tvar text = '<strong>' + t('gallery', 'Configuration error') + '</strong></br>' +\n\t\t\t\t\tGallery.config.albumError.message + '</br></br>';\n\t\t\t\tGallery.utility.showHtmlNotification(text, 7);\n\t\t\t} else if ($.isEmptyObject(albumInfo)) {\n\t\t\t\tinfoButton.hide();\n\t\t\t} else {\n\t\t\t\tinfoButton.show();\n\t\t\t\tif (albumInfo.inherit !== 'yes' || albumInfo.level === 0) {\n\t\t\t\t\tinfoButton.find('span').delay(1000).slideDown();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Sets the background colour of the photowall\n\t\t *\n\t\t * @private\n\t\t */\n\t\t_setBackgroundColour: function () {\n\t\t\tvar wrapper = $('#content-wrapper');\n\t\t\tvar albumDesign = Gallery.config.albumDesign;\n\t\t\tif (!$.isEmptyObject(albumDesign) && albumDesign.background) {\n\t\t\t\twrapper.css('background-color', albumDesign.background);\n\t\t\t} else {\n\t\t\t\twrapper.css('background-color', '#fff');\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Picks the image which matches the sort order\n\t\t *\n\t\t * @param {string} sortType name or date\n\t\t * @param {string} sortOrder asc or des\n\t\t * @param {boolean} active determines if we're setting up the active sort button\n\t\t * @private\n\t\t */\n\t\t_setSortButton: function (sortType, sortOrder, active) {\n\t\t\tvar button = $('#sort-' + sortType + '-button');\n\t\t\t// Removing all the classes which control the image in the button\n\t\t\tbutton.removeClass('active-button');\n\t\t\tbutton.find('img').removeClass('front');\n\t\t\tbutton.find('img').removeClass('back');\n\n\t\t\t// We need to determine the reverse order in order to send that image to the back\n\t\t\tvar reverseSortOrder = 'des';\n\t\t\tif (sortOrder === 'des') {\n\t\t\t\treverseSortOrder = 'asc';\n\t\t\t}\n\n\t\t\t// We assign the proper order to the button images\n\t\t\tbutton.find('img.' + sortOrder).addClass('front');\n\t\t\tbutton.find('img.' + reverseSortOrder).addClass('back');\n\n\t\t\t// The active button needs a hover action for the flip effect\n\t\t\tif (active) {\n\t\t\t\tbutton.addClass('active-button');\n\t\t\t\tif (button.is(\":hover\")) {\n\t\t\t\t\tbutton.removeClass('hover');\n\t\t\t\t}\n\t\t\t\t// We can't use a toggle here\n\t\t\t\tbutton.hover(function () {\n\t\t\t\t\t\t$(this).addClass('hover');\n\t\t\t\t\t},\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\t$(this).removeClass('hover');\n\t\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * If no url is entered then do not show the error box.\n\t\t *\n\t\t */\n\t\t_blankUrl: function() {\n\t\t\t$('#remote_address').on(\"change keyup paste\", function() {\n \t\t\t\tif ($(this).val() === '') {\n \t\t\t\t\t$('#save-button-confirm').prop('disabled', true);\n \t\t\t\t} else {\n \t\t\t\t\t$('#save-button-confirm').prop('disabled', false);\n \t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Creates the [+] button allowing users who can't drag and drop to upload files\n\t\t *\n\t\t * @see core/apps/files/js/filelist.js\n\t\t * @private\n\t\t */\n\t\t_renderNewButton: function () {\n\t\t\t// if no actions container exist, skip\n\t\t\tvar $actionsContainer = $('.actions');\n\t\t\tif (!$actionsContainer.length) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this._addButtonTemplate) {\n\t\t\t\tthis._addButtonTemplate = Handlebars.compile(TEMPLATE_ADDBUTTON);\n\t\t\t}\n\t\t\tvar $newButton = $(this._addButtonTemplate({\n\t\t\t\taddText: t('gallery', 'New'),\n\t\t\t\ticonUrl: OC.imagePath('core', 'actions/add')\n\t\t\t}));\n\n\t\t\t$actionsContainer.prepend($newButton);\n\t\t\t$newButton.tooltip({'placement': 'bottom'});\n\n\t\t\t$newButton.click(_.bind(this._onClickNewButton, this));\n\t\t\tthis._newButton = $newButton;\n\t\t},\n\n\t\t/**\n\t\t * Creates the click handler for the [+] button\n\t\t * @param event\n\t\t * @returns {boolean}\n\t\t *\n\t\t * @see core/apps/files/js/filelist.js\n\t\t * @private\n\t\t */\n\t\t_onClickNewButton: function (event) {\n\t\t\tvar $target = $(event.target);\n\t\t\tif (!$target.hasClass('.button')) {\n\t\t\t\t$target = $target.closest('.button');\n\t\t\t}\n\t\t\tthis._newButton.tooltip('hide');\n\t\t\tevent.preventDefault();\n\t\t\tif ($target.hasClass('disabled')) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!this._newFileMenu) {\n\t\t\t\tthis._newFileMenu = new Gallery.NewFileMenu();\n\t\t\t\t$('body').append(this._newFileMenu.$el);\n\t\t\t}\n\t\t\tthis._newFileMenu.showAt($target);\n\n\t\t\tif (Gallery.currentAlbum === '') {\n\t\t\t\t$('.menuitem[data-action=\"hideAlbum\"]').parent().hide();\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tGallery.View = View;\n})(jQuery, _, OC, t, Gallery);\n", "<?php\n/**\n * Gallery\n *\n * This file is licensed under the Affero General Public License version 3 or\n * later. See the COPYING file.\n *\n * @author Olivier Paroz <galleryapps@oparoz.com>\n *\n * @copyright Olivier Paroz 2016\n */\n\nnamespace OCA\\Gallery\\Controller;\n\nuse OCP\\IRequest;\nuse OCP\\ILogger;\n\nuse OCP\\AppFramework\\Http\\JSONResponse;\nuse OCP\\AppFramework\\Http;\n\nuse OCA\\Gallery\\Service\\ConfigService;\nuse OCA\\Gallery\\Service\\PreviewService;\nuse OCA\\Gallery\\Service\\ServiceException;\n\n/**\n * Class ConfigControllerTest\n *\n * @package OCA\\Gallery\\Controller\n */\nclass ConfigControllerTest extends \\Test\\TestCase {\n\n\t/** @var string */\n\tprotected $appName = 'gallery';\n\t/** @var IRequest */\n\tprotected $request;\n\t/** @var ConfigController */\n\tprotected $controller;\n\t/** @var ConfigService */\n\tprotected $configService;\n\t/** @var PreviewService */\n\tprotected $previewService;\n\t/** @var ILogger */\n\tprotected $logger;\n\t/** @var array */\n\tprivate $baseMimeTypes = [\n\t\t'image/png',\n\t\t'image/jpeg',\n\t\t'image/gif',\n\t\t'image/x-xbitmap',\n\t\t'image/bmp',\n\t\t'image/tiff',\n\t\t'image/x-dcraw',\n\t\t'application/x-photoshop',\n\t\t'application/illustrator',\n\t\t'application/postscript',\n\t];\n\n\t/**\n\t * Test set up\n\t */\n\tpublic function setUp() {\n\t\tparent::setUp();\n\n\t\t$this->request = $this->getMockBuilder('\\OCP\\IRequest')\n\t\t\t\t\t\t\t  ->disableOriginalConstructor()\n\t\t\t\t\t\t\t  ->getMock();\n\t\t$this->configService = $this->getMockBuilder('\\OCA\\Gallery\\Service\\ConfigService')\n\t\t\t\t\t\t\t\t\t->disableOriginalConstructor()\n\t\t\t\t\t\t\t\t\t->getMock();\n\t\t$this->previewService = $this->getMockBuilder('\\OCA\\Gallery\\Service\\PreviewService')\n\t\t\t\t\t\t\t\t\t ->disableOriginalConstructor()\n\t\t\t\t\t\t\t\t\t ->getMock();\n\t\t$this->logger = $this->getMockBuilder('\\OCP\\ILogger')\n\t\t\t\t\t\t\t ->disableOriginalConstructor()\n\t\t\t\t\t\t\t ->getMock();\n\t\t$this->controller = new ConfigController(\n\t\t\t$this->appName,\n\t\t\t$this->request,\n\t\t\t$this->configService,\n\t\t\t$this->logger\n\t\t);\n\t}\n\n\t/**\n\t * @return array\n\t */\n\tpublic function providesConfigData() {\n\t\t$noFeatures = [];\n\n\t\t$features = [\n\t\t\t'external_shares',\n\t\t\t'background_colour_toggle',\n\t\t];\n\n\t\t$featuresWithSvg = array_merge(\n\t\t\t$features,\n\t\t\t[\n\t\t\t\t'native_svg'\n\t\t\t]\n\t\t);\n\n\t\t$slideshowMimes = array_merge(\n\t\t\t$this->baseMimeTypes,\n\t\t\t[\n\t\t\t\t'application/font-sfnt',\n\t\t\t\t'application/x-font',\n\t\t\t]\n\t\t);\n\n\t\t$baseMimeTypesWithSvg = array_merge(\n\t\t\t$this->baseMimeTypes,\n\t\t\t[\n\t\t\t\t'image/svg+xml',\n\t\t\t]\n\t\t);\n\n\t\t$slideshowMimesWithSvg = array_merge(\n\t\t\t$slideshowMimes,\n\t\t\t[\n\t\t\t\t'image/svg+xml',\n\t\t\t]\n\t\t);\n\n\t\treturn [\n\t\t\t[$noFeatures, $this->baseMimeTypes, false, false],\n\t\t\t[$noFeatures, $slideshowMimes, false, true],\n\t\t\t[$features, $this->baseMimeTypes, false, false],\n\t\t\t[$features, $slideshowMimes, false, true],\n\t\t\t[$featuresWithSvg, $baseMimeTypesWithSvg, true, false],\n\t\t\t[$featuresWithSvg, $slideshowMimesWithSvg, true, true],\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider providesConfigData\n\t *\n\t * @param array $features\n\t * @param array $mimeTypes\n\t * @param bool $nativeSvgSupport\n\t * @param bool $slideshow\n\t */\n\tpublic function testGetConfig($features, $mimeTypes, $nativeSvgSupport, $slideshow) {\n\t\t$this->mockFeaturesList($features);\n\t\t$this->mockSupportedMediaTypes($slideshow, $nativeSvgSupport, $mimeTypes);\n\n\t\t$response = $this->controller->get($slideshow);\n\n\t\t$this->assertEquals(['features' => $features, 'mediatypes' => $mimeTypes], $response);\n\t}\n\n\t/**\n\t * Not being able to get a config file is not a hard failure\n\t */\n\tpublic function testCannotGetConfig() {\n\t\t$features = $this->mockConfigRetrievalError();\n\t\t$slideshow = true;\n\t\t$nativeSvgSupport = false;\n\t\t$this->mockSupportedMediaTypes($slideshow, $nativeSvgSupport, $this->baseMimeTypes);\n\n\t\t$response = $this->controller->get($slideshow);\n\n\t\t$this->assertEquals(\n\t\t\t['features' => $features, 'mediatypes' => $this->baseMimeTypes], $response\n\t\t);\n\t}\n\n\tpublic function testGetConfigWithBrokenSystem() {\n\t\t$slideshow = true;\n\t\t$exceptionMessage = 'A\u00efe!';\n\t\t$this->configService->expects($this->any())\n\t\t\t\t\t\t\t->method('getFeaturesList')\n\t\t\t\t\t\t\t->willThrowException(new ServiceException($exceptionMessage));\n\t\t$this->request\n\t\t\t->expects($this->once())\n\t\t\t->method('getId')\n\t\t\t->willReturn('1234');\n\t\t$errorMessage = [\n\t\t\t'message' => 'An error occurred. Request ID: 1234',\n\t\t\t'success' => false\n\t\t];\n\t\t/** @type JSONResponse $response */\n\t\t$response = $this->controller->get($slideshow);\n\n\t\t$this->assertEquals($errorMessage, $response->getData());\n\t}\n\n\t/**\n\t * Mocks ConfigService->getFeaturesList\n\t *\n\t * @param $features\n\t */\n\tprivate function mockFeaturesList($features) {\n\t\t$this->configService->expects($this->any())\n\t\t\t\t\t\t\t->method('getFeaturesList')\n\t\t\t\t\t\t\t->willReturn($features);\n\t}\n\n\t/**\n\t * Mocks PreviewService->getSupportedMediaTypes\n\t *\n\t * @param $slideshow\n\t * @param $nativeSvgSupport\n\t * @param $mimeTypes\n\t */\n\tprivate function mockSupportedMediaTypes($slideshow, $nativeSvgSupport, $mimeTypes) {\n\t\t$this->configService->expects($this->any())\n\t\t\t\t\t\t\t ->method('getSupportedMediaTypes')\n\t\t\t\t\t\t\t ->with(\n\t\t\t\t\t\t\t\t $this->equalTo($slideshow),\n\t\t\t\t\t\t\t\t $this->equalTo($nativeSvgSupport)\n\t\t\t\t\t\t\t )\n\t\t\t\t\t\t\t ->willReturn($mimeTypes);\n\t}\n\n\t/**\n\t * Returns an error message instead of a proper features list\n\t *\n\t * @return array\n\t */\n\tprivate function mockConfigRetrievalError() {\n\t\t$exception = new ServiceException('Config corrupt');\n\t\t$errorMessage = $exception->getMessage() . \"</br></br>Config location: /user1\";\n\t\t$features = ['error' => ['message' => $errorMessage]];\n\n\t\t$this->mockFeaturesList($features);\n\n\t\treturn $features;\n\t}\n\n}\n", "<?php\n/**\n * Gallery\n *\n * This file is licensed under the Affero General Public License version 3 or\n * later. See the COPYING file.\n *\n * @author Olivier Paroz <galleryapps@oparoz.com>\n *\n * @copyright Olivier Paroz 2016\n */\n\nnamespace OCA\\Gallery\\Controller;\n\nuse OCA\\Gallery\\Service\\ServiceException;\nuse OCP\\IRequest;\nuse OCP\\IURLGenerator;\nuse OCP\\Files\\File;\nuse OCP\\Files\\Folder;\nuse OCP\\ILogger;\n\nuse OCP\\AppFramework\\IAppContainer;\nuse OCP\\AppFramework\\Http;\nuse OCP\\AppFramework\\Http\\RedirectResponse;\nuse OCP\\AppFramework\\Http\\JSONResponse;\n\nuse OCA\\Gallery\\AppInfo\\Application;\nuse OCA\\Gallery\\Http\\ImageResponse;\nuse OCA\\Gallery\\Service\\SearchFolderService;\nuse OCA\\Gallery\\Service\\ConfigService;\nuse OCA\\Gallery\\Service\\SearchMediaService;\nuse OCA\\Gallery\\Service\\DownloadService;\nuse OCA\\Gallery\\Service\\NotFoundServiceException;\n\n/**\n * Class FilesControllerTest\n *\n * @package OCA\\Gallery\\Controller\n */\nclass FilesControllerTest extends \\Test\\GalleryUnitTest {\n\n\tuse PathManipulation;\n\n\t/** @var IAppContainer */\n\tprotected $container;\n\t/** @var string */\n\tprotected $appName = 'gallery';\n\t/** @var IRequest */\n\tprotected $request;\n\t/** @var FilesController */\n\tprotected $controller;\n\t/** @var IURLGenerator */\n\tprotected $urlGenerator;\n\t/** @var SearchFolderService */\n\tprotected $searchFolderService;\n\t/** @var ConfigService */\n\tprotected $configService;\n\t/** @var SearchMediaService */\n\tprotected $searchMediaService;\n\t/** @var DownloadService */\n\tprotected $downloadService;\n\t/** @var ILogger */\n\tprotected $logger;\n\n\t/**\n\t * Test set up\n\t */\n\tpublic function setUp() {\n\t\tparent::setUp();\n\n\t\t$app = new Application;\n\t\t$this->container = $app->getContainer();\n\t\t$this->container['UserFolder'] = $this->getMockBuilder('OCP\\Files\\Folder')\n\t\t\t\t\t\t\t\t\t\t\t  ->disableOriginalConstructor()\n\t\t\t\t\t\t\t\t\t\t\t  ->getMock();\n\t\t$this->request = $this->getMockBuilder('\\OCP\\IRequest')\n\t\t\t\t\t\t\t  ->disableOriginalConstructor()\n\t\t\t\t\t\t\t  ->getMock();\n\t\t$this->urlGenerator = $this->getMockBuilder('\\OCP\\IURLGenerator')\n\t\t\t\t\t\t\t\t   ->disableOriginalConstructor()\n\t\t\t\t\t\t\t\t   ->getMock();\n\t\t$this->searchFolderService =\n\t\t\t$this->getMockBuilder('\\OCA\\Gallery\\Service\\SearchFolderService')\n\t\t\t\t ->disableOriginalConstructor()\n\t\t\t\t ->getMock();\n\t\t$this->configService = $this->getMockBuilder('\\OCA\\Gallery\\Service\\ConfigService')\n\t\t\t\t\t\t\t\t\t->disableOriginalConstructor()\n\t\t\t\t\t\t\t\t\t->getMock();\n\t\t$this->searchMediaService = $this->getMockBuilder('\\OCA\\Gallery\\Service\\SearchMediaService')\n\t\t\t\t\t\t\t\t\t\t ->disableOriginalConstructor()\n\t\t\t\t\t\t\t\t\t\t ->getMock();\n\t\t$this->downloadService = $this->getMockBuilder('\\OCA\\Gallery\\Service\\DownloadService')\n\t\t\t\t\t\t\t\t\t  ->disableOriginalConstructor()\n\t\t\t\t\t\t\t\t\t  ->getMock();\n\t\t$this->logger = $this->getMockBuilder('\\OCP\\ILogger')\n\t\t\t\t\t\t\t ->disableOriginalConstructor()\n\t\t\t\t\t\t\t ->getMock();\n\t\t$this->controller = new FilesController(\n\t\t\t$this->appName,\n\t\t\t$this->request,\n\t\t\t$this->urlGenerator,\n\t\t\t$this->searchFolderService,\n\t\t\t$this->configService,\n\t\t\t$this->searchMediaService,\n\t\t\t$this->downloadService,\n\t\t\t$this->logger\n\t\t);\n\t}\n\n\t/**\n\t * @return array\n\t */\n\tpublic function providesTestDownloadData() {\n\t\treturn [\n\t\t\t[1234, $this->mockJpgFile(1234), 'image/jpeg'],\n\t\t\t[4567, $this->mockSvgFile(4567), 'text/plain']\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider providesTestDownloadData\n\t *\n\t * @param int $fileId\n\t * @param File $file\n\t * @param string $expectedMimeType\n\t */\n\tpublic function testDownload($fileId, $file, $expectedMimeType) {\n\t\t$filename = null;\n\t\t$download = $this->mockGetDownload($fileId, $file, $filename);\n\n\t\t/** @type ImageResponse $response */\n\t\t$response = $this->controller->download($fileId, $filename);\n\n\t\t$this->assertEquals(Http::STATUS_OK, $response->getStatus());\n\t\t$this->assertEquals(\n\t\t\t$expectedMimeType . '; charset=utf-8', $response->getHeaders()['Content-type']\n\t\t);\n\t\t$this->assertEquals($download['preview'], $response->render());\n\t}\n\n\tpublic function testDownloadWithWrongId() {\n\t\t$fileId = 99999;\n\t\t$filename = null;\n\t\t$status = Http::STATUS_NOT_FOUND;\n\n\t\t$exception = new NotFoundServiceException('Not found');\n\t\t$this->mockGetFileWithBadFile($this->downloadService, $fileId, $exception);\n\n\t\t$redirectUrl = '/index.php/app/error';\n\t\t$this->mockUrlToErrorPage($status, $redirectUrl);\n\n\t\t/** @type RedirectResponse $response */\n\t\t$response = $this->controller->download($fileId, $filename);\n\n\t\t$this->assertEquals($redirectUrl, $response->getRedirectURL());\n\t\t$this->assertEquals(Http::STATUS_SEE_OTHER, $response->getStatus());\n\t\t$this->assertEquals(\n\t\t\t$exception->getMessage(), $response->getCookies()['galleryErrorMessage']['value']\n\t\t);\n\t}\n\n\tpublic function providesGetFilesWithWorkingSetupData() {\n\t\t$location = 'folder';\n\t\t$folderPathFromRoot = 'user/files/' . $location;\n\t\t$etag = 1111222233334444;\n\n\n\t\t$folderId = 9876;\n\t\t$folderPermissions = 31;\n\t\t$folderEtag = 9999888877776666;\n\t\t$folderIsShared = false;\n\t\t$files = [\n\t\t\t['path' => $folderPathFromRoot . '/deep/path.png'],\n\t\t\t['path' => $folderPathFromRoot . '/testimage.png'],\n\t\t];\n\t\t$albums = [\n\t\t\t['path' => $folderPathFromRoot . '/deep'],\n\t\t];\n\t\t$albumConfig = [\n\t\t\t'information' => [],\n\t\t\t'sorting'     => [],\n\t\t\t'design'      => [],\n\t\t];\n\n\t\t$folderData = ['home::user', $folderId, $files, true, false, null, '', false, $folderIsShared,\n\t\t\t\t\t$folderEtag, 4096, 'some/path', null, $folderPermissions];\n\n\t\t$folder = call_user_func_array([$this,'mockFolder'], $folderData);\n\t\t$folder2 = call_user_func_array([$this, 'mockFolder'], $folderData);\n\n\t\treturn [\n\t\t\t[\n\t\t\t\t$location, $folderPathFromRoot, $folder, $albumConfig, $files, $albums, $etag,\n\t\t\t\t[\n\t\t\t\t\t'files'       => $files,\n\t\t\t\t\t'albums'      => $albums,\n\t\t\t\t\t'albumconfig' => $albumConfig,\n\t\t\t\t\t'albumpath'   => $folderPathFromRoot,\n\t\t\t\t\t'updated'     => true\n\t\t\t\t]\n\t\t\t],\n\t\t\t[\n\t\t\t\t$location, $folderPathFromRoot, $folder2, $albumConfig, $files, $albums, $folderEtag,\n\t\t\t\t[\n\t\t\t\t\t'files'       => [],\n\t\t\t\t\t'albums'      => [],\n\t\t\t\t\t'albumconfig' => $albumConfig,\n\t\t\t\t\t'albumpath'   => $folderPathFromRoot,\n\t\t\t\t\t'updated'     => false\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider providesGetFilesWithWorkingSetupData\n\t *\n\t * @param string $location\n\t * @param string $folderPathFromRoot\n\t * @param Folder $folder\n\t * @param array $albumConfig\n\t * @param array $files\n\t * @param array $albums\n\t * @param string $etag\n\t * @param array $result\n\t *\n\t * @internal param $ $\n\t */\n\tpublic function testGetFilesWithWorkingSetup(\n\t\t$location, $folderPathFromRoot, $folder, $albumConfig, $files, $albums, $etag, $result\n\t) {\n\t\t$features = '';\n\t\t$mediatypes = 'image/png';\n\n\t\t$this->mockGetCurrentFolder($location, $folderPathFromRoot, [$features], $folder);\n\t\t$this->mockGetConfig($folder, [$features], $albumConfig);\n\t\t$this->mockGetMediaFiles($folder, [$mediatypes], [$features], [$files, $albums]);\n\n\t\t$response = $this->controller->getList($location, $features, $etag, $mediatypes);\n\n\t\t/*$fakeResponse = new JSONResponse(\n\t\t\t[\n\t\t\t\t'message' => 'let me see',\n\t\t\t\t'success' => false\n\t\t\t]\n\t\t);*/\n\t\t$this->assertEquals($result, $response);\n\t}\n\n\tpublic function testGetFilesWithBrokenSetup() {\n\t\t$location = '';\n\t\t$features = '';\n\t\t$etag = 1111222233334444;\n\t\t$mediatypes = 'image/png';\n\t\t$exceptionMessage = 'A\u00efe!';\n\t\t$this->searchFolderService->expects($this->once())\n\t\t\t\t\t\t\t\t  ->method('getCurrentFolder')\n\t\t\t\t\t\t\t\t  ->with(\n\t\t\t\t\t\t\t\t\t  $location,\n\t\t\t\t\t\t\t\t\t  [$features]\n\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t  ->willThrowException(new ServiceException($exceptionMessage));\n\t\t// Default status code when something breaks\n\t\t$status = Http::STATUS_INTERNAL_SERVER_ERROR;\n\t\t$this->request\n\t\t\t->expects($this->once())\n\t\t\t->method('getId')\n\t\t\t->willReturn('1234');\n\t\t$errorMessage = [\n\t\t\t'message' => 'An error occurred. Request ID: 1234',\n\t\t\t'success' => false\n\t\t];\n\t\t/** @type JSONResponse $response */\n\t\t$response = $this->controller->getList($location, $features, $etag, $mediatypes);\n\n\t\t$this->assertEquals($errorMessage, $response->getData());\n\t}\n\n\tpublic function providesFilesData() {\n\t\t$location = 'folder1';\n\t\t$folderPathFromRoot = 'user/files/' . $location;\n\n\t\treturn [\n\t\t\t[\n\t\t\t\t['path' => $folderPathFromRoot . '/deep/folder/to/test/path/reduction.png'],\n\t\t\t\t$folderPathFromRoot . '/deep/reduction.png',\n\t\t\t\t$folderPathFromRoot\n\t\t\t],\n\t\t\t[\n\t\t\t\t['path' => $folderPathFromRoot . '/folder/image.png'],\n\t\t\t\t$folderPathFromRoot . '/folder/image.png',\n\t\t\t\t$folderPathFromRoot\n\t\t\t],\n\t\t\t[\n\t\t\t\t['path' => $folderPathFromRoot . '/testimage.png'],\n\t\t\t\t$folderPathFromRoot . '/testimage.png',\n\t\t\t\t$folderPathFromRoot\n\t\t\t]\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider providesFilesData\n\t *\n\t * @param array $file\n\t * @param string $fixedPath\n\t * @param string $folderPathFromRoot\n\t */\n\tpublic function testGetReducedPath($file, $fixedPath, $folderPathFromRoot) {\n\t\t$response = $this->getReducedPath($file['path'], $folderPathFromRoot);\n\n\t\t$this->assertEquals($fixedPath, $response);\n\t}\n\n\t/**\n\t * Mocks IURLGenerator->linkToRoute\n\t *\n\t * @param int $code\n\t * @param string $url\n\t */\n\tprotected function mockUrlToErrorPage($code, $url) {\n\t\t$this->urlGenerator->expects($this->once())\n\t\t\t\t\t\t   ->method('linkToRoute')\n\t\t\t\t\t\t   ->with($this->appName . '.page.error_page', ['code' => $code])\n\t\t\t\t\t\t   ->willReturn($url);\n\t}\n\n\t/**\n\t * Mocks Files->getDownload\n\t *\n\t * @param int $fileId the ID of the file of which we need a large preview of\n\t * @param File $file\n\t * @param string|null $filename\n\t *\n\t * @return array\n\t */\n\tprivate function mockGetDownload($fileId, $file, $filename) {\n\t\t$this->mockGetFile($this->downloadService, $fileId, $file);\n\n\t\t$download = $this->mockDownloadData($file, $filename);\n\n\t\t$this->mockDownloadFile($file, $download);\n\n\t\treturn $download;\n\t}\n\n\t/**\n\t * @param object|\\PHPUnit_Framework_MockObject_MockObject $file\n\t * @param $filename\n\t *\n\t * @return array\n\t */\n\tprivate function mockDownloadData($file, $filename) {\n\t\t$download = [\n\t\t\t'preview'  => $file->getContent(),\n\t\t\t'mimetype' => $file->getMimeType(),\n\t\t];\n\n\t\tif ($download) {\n\t\t\tif (is_null($filename)) {\n\t\t\t\t$filename = $file->getName();\n\t\t\t}\n\t\t\t$download['name'] = $filename;\n\t\t}\n\n\t\treturn $download;\n\t}\n\n\t/**\n\t * Mocks DownloadService->downloadFile\n\t *\n\t * @param object|\\PHPUnit_Framework_MockObject_MockObject $file\n\t * @param array $download\n\t */\n\tprivate function mockDownloadFile($file, $download) {\n\t\t$this->downloadService->expects($this->once())\n\t\t\t\t\t\t\t  ->method('downloadFile')\n\t\t\t\t\t\t\t  ->with($this->equalTo($file))\n\t\t\t\t\t\t\t  ->willReturn($download);\n\t}\n\n\t/**\n\t * Mocks SearchFolderService->getCurrentFolder\n\t *\n\t * @param $location\n\t * @param $folderPathFromRoot\n\t * @param $features\n\t * @param $folder\n\t */\n\tprivate function mockGetCurrentFolder($location, $folderPathFromRoot, $features, $folder) {\n\t\t$answer = [\n\t\t\t$folderPathFromRoot,\n\t\t\t$folder,\n\t\t];\n\t\t$this->searchFolderService->expects($this->once())\n\t\t\t\t\t\t\t\t  ->method('getCurrentFolder')\n\t\t\t\t\t\t\t\t  ->with(\n\t\t\t\t\t\t\t\t\t  $location,\n\t\t\t\t\t\t\t\t\t  $features\n\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t  ->willReturn($answer);\n\t}\n\n\t/**\n\t * Mocks ConfigService->getConfig\n\t *\n\t * @param $folderNode\n\t * @param $features\n\t * @param $answer\n\t */\n\tprivate function mockGetConfig($folderNode, $features, $answer) {\n\t\t$this->configService->expects($this->once())\n\t\t\t\t\t\t\t->method('getConfig')\n\t\t\t\t\t\t\t->with(\n\t\t\t\t\t\t\t\t$folderNode,\n\t\t\t\t\t\t\t\t$features\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t->willReturn($answer);\n\t}\n\n\t/**\n\t * Mocks SearchMediaService->getMediaFiles\n\t *\n\t * @param $folderNode\n\t * @param $mediatypes\n\t * @param $features\n\t * @param $answer\n\t */\n\tprivate function mockGetMediaFiles($folderNode, $mediatypes, $features, $answer) {\n\t\t$this->searchMediaService->expects($this->any())\n\t\t\t\t\t\t\t\t ->method('getMediaFiles')\n\t\t\t\t\t\t\t\t ->with(\n\t\t\t\t\t\t\t\t\t $folderNode,\n\t\t\t\t\t\t\t\t\t $mediatypes,\n\t\t\t\t\t\t\t\t\t $features\n\t\t\t\t\t\t\t\t )\n\t\t\t\t\t\t\t\t ->willReturn($answer);\n\t}\n\n}\n", "<?php\n/**\n * Gallery\n *\n * This file is licensed under the Affero General Public License version 3 or\n * later. See the COPYING file.\n *\n * @author Olivier Paroz <galleryapps@oparoz.com>\n *\n * @copyright Olivier Paroz 2016\n */\n\nnamespace OCA\\Gallery\\Controller;\n\nuse OCP\\AppFramework\\Http;\nuse OCP\\AppFramework\\Http\\JSONResponse;\nuse OCP\\AppFramework\\Http\\RedirectResponse;\n\nuse OCA\\Gallery\\Environment\\NotFoundEnvException;\nuse OCA\\Gallery\\Service\\NotFoundServiceException;\nuse OCA\\Gallery\\Service\\ForbiddenServiceException;\nuse OCA\\Gallery\\Service\\InternalServerErrorServiceException;\nuse OCP\\ILogger;\nuse OCP\\IRequest;\n\n/**\n * Class HttpErrorTest\n *\n * @package OCA\\Gallery\\Controller\n */\nclass HttpErrorTest extends \\Test\\TestCase {\n\n\t/** @var string */\n\tprivate $appName = 'gallery';\n\n\t/**\n\t * @return array\n\t */\n\tpublic function providesExceptionData() {\n\t\t$notFoundEnvMessage = 'An error occurred. Request ID: 1234';\n\t\t$notFoundEnvException = new NotFoundEnvException($notFoundEnvMessage);\n\t\t$notFoundEnvStatus = Http::STATUS_NOT_FOUND;\n\n\t\t$notFoundServiceMessage = 'An error occurred. Request ID: 1234';\n\t\t$notFoundServiceException = new NotFoundServiceException($notFoundServiceMessage);\n\t\t$notFoundServiceStatus = Http::STATUS_NOT_FOUND;\n\n\t\t$forbiddenServiceMessage = 'Forbidden in service';\n\t\t$forbiddenServiceException = new ForbiddenServiceException($forbiddenServiceMessage);\n\t\t$forbiddenServiceStatus = Http::STATUS_FORBIDDEN;\n\n\t\t$errorServiceMessage = 'An error occurred. Request ID: 1234';\n\t\t$errorServiceException = new InternalServerErrorServiceException($errorServiceMessage);\n\t\t$errorServiceStatus = Http::STATUS_INTERNAL_SERVER_ERROR;\n\n\t\t$coreServiceMessage = 'An error occurred. Request ID: 1234';\n\t\t$coreServiceException = new \\Exception($coreServiceMessage);\n\t\t$coreServiceStatus = Http::STATUS_INTERNAL_SERVER_ERROR;\n\n\t\treturn [\n\t\t\t[$notFoundEnvException, $notFoundEnvMessage, $notFoundEnvStatus],\n\t\t\t[$notFoundServiceException, $notFoundServiceMessage, $notFoundServiceStatus],\n\t\t\t[$forbiddenServiceException, $forbiddenServiceMessage, $forbiddenServiceStatus],\n\t\t\t[$errorServiceException, $errorServiceMessage, $errorServiceStatus],\n\t\t\t[$coreServiceException, $coreServiceMessage, $coreServiceStatus]\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider providesExceptionData\n\t *\n\t * @param \\Exception $exception\n\t * @param String $message\n\t * @param String $status\n\t */\n\tpublic function testJsonError($exception, $message, $status) {\n\t\t$request = $this->createMock(IRequest::class);\n\t\t$logger = $this->createMock(ILogger::class);\n\n\t\tif($exception instanceof ForbiddenServiceException) {\n\t\t\t$amount = 0;\n\t\t\t$message = $message . ' (' . $status . ')';\n\t\t} else {\n\t\t\t$amount = 1;\n\t\t}\n\n\t\t$logger\n\t\t\t->expects($this->exactly($amount))\n\t\t\t->method('logException')\n\t\t\t->with($exception, ['app' => 'gallery']);\n\t\t$request\n\t\t\t->expects($this->exactly($amount))\n\t\t\t->method('getId')\n\t\t\t->willReturn('1234');\n\n\t\t/** @var HttpError $httpError */\n\t\t$httpError = $this->getMockForTrait(HttpError::class);\n\t\t/** @type JSONResponse $response */\n\t\t$response = $httpError->jsonError($exception, $request, $logger);\n\n\t\t$this->assertSame(\n\t\t\t['message' => $message, 'success' => false], $response->getData()\n\t\t);\n\t\t$this->assertEquals($status, $response->getStatus());\n\t}\n\n\t/**\n\t * @dataProvider providesExceptionData\n\t *\n\t * @param \\Exception $exception\n\t * @param String $message\n\t * @param String $status\n\t */\n\tpublic function testHtmlError($exception, $message, $status) {\n\t\t$urlGenerator = $this->mockIURLGenerator();\n\t\t$redirectUrl = '/index.php/app/error';\n\t\t$this->mockUrlToErrorPage($urlGenerator, $status, $redirectUrl);\n\n\t\t$httpError = $this->getMockForTrait('\\OCA\\Gallery\\Controller\\HttpError');\n\n\t\t/** @type RedirectResponse $response */\n\t\t$response = $httpError->htmlError($urlGenerator, $this->appName, $exception);\n\t\t$this->assertEquals($redirectUrl, $response->getRedirectURL());\n\t\t$this->assertEquals(Http::STATUS_SEE_OTHER, $response->getStatus());\n\t\t$this->assertEquals($message, $response->getCookies()['galleryErrorMessage']['value']);\n\t}\n\n\tprivate function mockIURLGenerator() {\n\t\treturn $this->getMockBuilder('\\OCP\\IURLGenerator')\n\t\t\t\t\t->disableOriginalConstructor()\n\t\t\t\t\t->getMock();\n\t}\n\n\t/**\n\t * Mocks IURLGenerator->linkToRoute()\n\t *\n\t * @param int $code\n\t * @param string $url\n\t */\n\tprivate function mockUrlToErrorPage($urlGenerator, $code, $url) {\n\t\t$urlGenerator->expects($this->once())\n\t\t\t\t\t ->method('linkToRoute')\n\t\t\t\t\t ->with($this->appName . '.page.error_page', ['code' => $code])\n\t\t\t\t\t ->willReturn($url);\n\t}\n\n}\n"], "filenames": ["controller/configapicontroller.php", "controller/configcontroller.php", "controller/filesapicontroller.php", "controller/filescontroller.php", "controller/httperror.php", "js/galleryview.js", "tests/unit/controller/ConfigControllerTest.php", "tests/unit/controller/FilesControllerTest.php", "tests/unit/controller/HttpErrorTest.php"], "buggy_code_start_loc": [68, 66, 97, 100, 18, 204, 173, 264, 22], "buggy_code_end_loc": [69, 67, 98, 101, 50, 205, 177, 267, 81], "fixing_code_start_loc": [68, 66, 97, 100, 19, 204, 173, 265, 23], "fixing_code_end_loc": [69, 67, 98, 101, 64, 205, 179, 271, 103], "type": "CWE-79", "message": "Nextcloud Server before 10.0.1 & ownCloud Server before 9.0.6 and 9.1.2 suffer from Reflected XSS in the Gallery application. The gallery app was not properly sanitizing exception messages from the Nextcloud/ownCloud server. Due to an endpoint where an attacker could influence the error message, this led to a reflected Cross-Site-Scripting vulnerability.", "other": {"cve": {"id": "CVE-2016-9466", "sourceIdentifier": "support@hackerone.com", "published": "2017-03-28T02:59:01.107", "lastModified": "2019-10-09T23:20:29.507", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Nextcloud Server before 10.0.1 & ownCloud Server before 9.0.6 and 9.1.2 suffer from Reflected XSS in the Gallery application. The gallery app was not properly sanitizing exception messages from the Nextcloud/ownCloud server. Due to an endpoint where an attacker could influence the error message, this led to a reflected Cross-Site-Scripting vulnerability."}, {"lang": "es", "value": "Nextcloud Server en versiones anteriores a 10.0.1 y ownCloud Server en versiones anteriores a 9.0.6 y 9.1.2 sufren de Reflexed XSS en la aplicaci\u00f3n Galer\u00eda. La aplicaci\u00f3n de la galer\u00eda no estaba correctamente desinfectando los mensajes de excepci\u00f3n del servidor Nextcloud/ownCloud. Debido a un punto final en el que un atacante podr\u00eda influir en el mensaje de error, esto llev\u00f3 a una vulnerabilidad de secuencias de comandos en sitios cruzados reflejada."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "support@hackerone.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:nextcloud_server:*:*:*:*:*:*:*:*", "versionStartIncluding": "10.0.0", "versionEndExcluding": "10.0.1", "matchCriteriaId": "8288B81D-CA35-46EB-A7E7-B60B193E3F81"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:*:*:*:*:*:*:*:*", "versionStartIncluding": "9.0.0", "versionEndExcluding": "9.0.6", "matchCriteriaId": "CA8CCC5C-D019-4A80-BD8D-3914BFFC60C0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:*:*:*:*:*:*:*:*", "versionStartIncluding": "9.1.0", "versionEndExcluding": "9.1.2", "matchCriteriaId": "8E9501A9-E507-4A81-954B-D6D3223EE2F8"}]}]}], "references": [{"url": "https://github.com/nextcloud/gallery/commit/f9ef505c1d60c9041e251682e0f6b3daad952d58", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/owncloud/gallery/commit/b3b3772fb9bec61ba10d357bef42b676fa474eee", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/owncloud/gallery/commit/dc4887f1afcc0cf304f4a0694075c9364298ad8a", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://hackerone.com/reports/165686", "source": "support@hackerone.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://nextcloud.com/security/advisory/?id=nc-sa-2016-009", "source": "support@hackerone.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://owncloud.org/security/advisory/?id=oc-sa-2016-019", "source": "support@hackerone.com", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/nextcloud/gallery/commit/f9ef505c1d60c9041e251682e0f6b3daad952d58"}}