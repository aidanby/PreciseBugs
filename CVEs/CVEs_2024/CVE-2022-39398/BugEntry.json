{"buggy_code": ["<?php\n/*\n * @version $Id: HEADER 15930 2011-10-30 15:47:55Z tsmr $\n -------------------------------------------------------------------------\n Tasklists plugin for GLPI\n Copyright (C) 2003-2016 by the Tasklists Development Team.\n\n https://github.com/InfotelGLPI/tasklists\n -------------------------------------------------------------------------\n\n LICENSE\n\n This file is part of Tasklists.\n\n Tasklists is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2 of the License, or\n (at your option) any later version.\n\n Tasklists is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Tasklists. If not, see <http://www.gnu.org/licenses/>.\n --------------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access directly to this file\");\n}\n\nuse Glpi\\Plugin\\Hooks;\n\n/**\n * Class PluginTasklistsTask\n */\nclass PluginTasklistsTask extends CommonDBTM {\n   use Glpi\\Features\\Clonable;\n   use Glpi\\Features\\Teamwork;\n   //Needed for save cards\n   use Glpi\\Features\\Kanban;\n\n   public    $dohistory  = true;\n   static    $rightname  = 'plugin_tasklists';\n   protected $usenotepad = true;\n   static    $types      = [];\n\n   /**\n    * @param int $nb\n    *\n    * @return translated\n    */\n   static function getTypeName($nb = 0) {\n\n      return _n('Task', 'Tasks', $nb);\n   }\n\n\n   /**\n    * @return string\n    */\n   static function getIcon() {\n      return \"ti ti-layout-kanban\";\n   }\n\n   /**\n    * @return array\n    */\n   function rawSearchOptions() {\n\n      $tab = [];\n\n      $tab[] = [\n         'id'   => 'common',\n         'name' => self::getTypeName(2)\n      ];\n\n      $tab[] = [\n         'id'            => '1',\n         'table'         => $this->getTable(),\n         'field'         => 'name',\n         'name'          => __('Name'),\n         'datatype'      => 'itemlink',\n         'itemlink_type' => $this->getType()\n      ];\n\n      $tab[] = [\n         'id'       => '2',\n         'table'    => 'glpi_plugin_tasklists_tasktypes',\n         'field'    => 'name',\n         'name'     => _n('Context', 'Contexts', 1, 'tasklists'),\n         'datatype' => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'        => '3',\n         'table'     => 'glpi_users',\n         'field'     => 'name',\n         'linkfield' => 'users_id',\n         'name'      => __('User'),\n         'datatype'  => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'            => '4',\n         'table'         => $this->getTable(),\n         'field'         => 'actiontime',\n         'name'          => __('Planned duration'),\n         'datatype'      => 'timestamp',\n         'massiveaction' => false\n      ];\n\n      $tab[] = [\n         'id'       => '5',\n         'table'    => $this->getTable(),\n         'field'    => 'percent_done',\n         'name'     => __('Percent done'),\n         'datatype' => 'number',\n         'unit'     => '%',\n         'min'      => 0,\n         'max'      => 100,\n         'step'     => 5\n      ];\n\n      $tab[] = [\n         'id'       => '6',\n         'table'    => $this->getTable(),\n         'field'    => 'due_date',\n         'name'     => __('Due date', 'tasklists'),\n         'datatype' => 'date'\n      ];\n\n      $tab[] = [\n         'id'       => '7',\n         'table'    => $this->getTable(),\n         'field'    => 'content',\n         'name'     => __('Description'),\n         'datatype' => 'text'\n      ];\n\n      $tab[] = [\n         'id'         => '8',\n         'table'      => $this->getTable(),\n         'field'      => 'priority',\n         'name'       => __('Priority'),\n         'searchtype' => 'equals',\n         'datatype'   => 'specific'\n      ];\n\n      $tab[] = [\n         'id'            => '9',\n         'table'         => $this->getTable(),\n         'field'         => 'visibility',\n         'name'          => __('Visibility'),\n         'searchtype'    => 'equals',\n         'datatype'      => 'specific',\n         'massiveaction' => false\n      ];\n\n      $tab[] = [\n         'id'        => '10',\n         'table'     => 'glpi_groups',\n         'field'     => 'name',\n         'linkfield' => 'groups_id',\n         'name'      => __('Group'),\n         'condition' => '`is_usergroup`',\n         'datatype'  => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'         => '11',\n         'table'      => $this->getTable(),\n         'field'      => 'plugin_tasklists_taskstates_id',\n         'name'       => __('Status'),\n         'searchtype' => ['equals', 'notequals'],\n         'datatype'   => 'specific'\n      ];\n\n      $tab[] = [\n         'id'            => '12',\n         'table'         => $this->getTable(),\n         'field'         => 'date_mod',\n         'massiveaction' => false,\n         'name'          => __('Last update'),\n         'datatype'      => 'datetime'\n      ];\n\n      $tab[] = [\n         'id'       => '13',\n         'table'    => $this->getTable(),\n         'field'    => 'is_archived',\n         'name'     => __('Archived', 'tasklists'),\n         'datatype' => 'bool'\n      ];\n\n      $tab[] = [\n         'id'       => '14',\n         'table'    => $this->getTable(),\n         'field'    => 'client',\n         'name'     => __('Other client', 'tasklists'),\n         'datatype' => 'text'\n      ];\n\n      $tab[] = [\n         'id'            => '121',\n         'table'         => $this->getTable(),\n         'field'         => 'date_creation',\n         'name'          => __('Creation date'),\n         'datatype'      => 'datetime',\n         'massiveaction' => false\n      ];\n\n      $tab[] = [\n         'id'       => '18',\n         'table'    => $this->getTable(),\n         'field'    => 'is_recursive',\n         'name'     => __('Child entities'),\n         'datatype' => 'bool'\n      ];\n\n      $tab[] = [\n         'id'       => '30',\n         'table'    => $this->getTable(),\n         'field'    => 'id',\n         'name'     => __('ID'),\n         'datatype' => 'number'\n      ];\n\n      $tab[] = [\n         'id'       => '80',\n         'table'    => 'glpi_entities',\n         'field'    => 'completename',\n         'name'     => __('Entity'),\n         'datatype' => 'dropdown'\n      ];\n      $tab[] = [\n         'id'        => '81',\n         'table'     => 'glpi_users',\n         'field'     => 'name',\n         'linkfield' => 'users_id_requester',\n         'name'      => _n('Requester', 'Requesters', 1),\n         'datatype'  => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '19',\n         'table'              => 'glpi_plugin_tasklists_tasks_comments',\n         'field'              => 'id',\n         'name'               => _x('quantity', 'Number of comments', 'tasklists'),\n         'forcegroupby'       => true,\n         'usehaving'          => true,\n         'datatype'           => 'count',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'jointype'           => 'child'\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '20',\n         'table'              => 'glpi_plugin_tasklists_tickets',\n         'field'              => 'id',\n         'name'               => __('Number of tickets'),\n         'forcegroupby'       => true,\n         'usehaving'          => true,\n         'datatype'           => 'count',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'jointype'           => 'child'\n         ]\n      ];\n\n      return $tab;\n   }\n\n   /**\n    * @param array $options\n    *\n    * @return array\n    */\n   function defineTabs($options = []) {\n\n      $ong = [];\n      $this->addDefaultFormTab($ong);\n      $this->addStandardTab('Document_Item', $ong, $options);\n      if (!isset($options['withtemplate']) || empty($options['withtemplate'])) {\n         $this->addStandardTab('PluginTasklistsTask_Comment', $ong, $options);\n         $this->addStandardTab('PluginTasklistsTicket', $ong, $options);\n      }\n      $this->addStandardTab('Notepad', $ong, $options);\n      $this->addStandardTab('Log', $ong, $options);\n\n      return $ong;\n   }\n\n   /**\n    *\n    */\n   function post_getEmpty() {\n\n      $this->fields['priority']     = 3;\n      $this->fields['percent_done'] = 0;\n      $this->fields['visibility']   = 2;\n   }\n\n\n   public function getCloneRelations(): array {\n      return [\n         Document_Item::class,\n         Notepad::class\n      ];\n   }\n\n   /**\n    * @see CommonDBTM::cleanDBonPurge()\n    *\n    * @since 0.83.1\n    **/\n   function cleanDBonPurge() {\n\n      /// PluginTasklistsTask_Comment does not extends CommonDBConnexity\n      $kbic = new PluginTasklistsTask_Comment();\n      $kbic->deleteByCriteria(['plugin_tasklists_tasks_id' => $this->fields['id']]);\n   }\n\n   /**\n    * @param datas $input\n    *\n    * @return datas\n    */\n   function prepareInputForAdd($input) {\n\n      if (isset($input['due_date']) && empty($input['due_date'])) {\n         $input['due_date'] = 'NULL';\n      }\n      if (isset($input[\"id\"]) && ($input[\"id\"] > 0)) {\n         $input[\"_oldID\"] = $input[\"id\"];\n      }\n      unset($input['id']);\n\n      return $input;\n   }\n\n   function post_addItem() {\n      global $CFG_GLPI;\n\n      if (!(isset($this->input['withtemplate'])\n      || (isset($this->input['withtemplate'])\n          && $this->input[\"withtemplate\"] != 1))\n      ) {\n         if ($CFG_GLPI[\"notifications_mailing\"]) {\n            NotificationEvent::raiseEvent(\"newtask\", $this);\n         }\n      }\n   }\n\n   /**\n    * @param datas $input\n    *\n    * @return datas\n    */\n   function prepareInputForUpdate($input) {\n\n      if (isset($input['due_date']) && empty($input['due_date'])) {\n         $input['due_date'] = 'NULL';\n      }\n      if (isset($input['plugin_tasklists_taskstates_id'])) {\n         $state = new PluginTasklistsTaskState();\n         if ($state->getFromDB($input['plugin_tasklists_taskstates_id'])) {\n            if ($state->getFinishedState()) {\n               $input['percent_done'] = 100;\n            }\n         }\n      }\n      if (isset($input['is_archived'])\n          && $input['is_archived'] == 1) {\n         $state = new PluginTasklistsTaskState();\n         if ($state->getFromDB($this->fields['plugin_tasklists_taskstates_id'])) {\n            if (!$state->getFinishedState()) {\n               Session::addMessageAfterRedirect(__('You cannot archive a task with this state', 'tasklists'), false, ERROR);\n               return false;\n            }\n         }\n      }\n      return $input;\n   }\n\n   /**\n    * Actions done after the UPDATE of the item in the database\n    *\n    * @param int $history store changes history ? (default 1)\n    *\n    * @return void\n    */\n   function post_updateItem($history = 1) {\n      global $CFG_GLPI;\n\n       if ($CFG_GLPI[\"notifications_mailing\"]) {\n           NotificationEvent::raiseEvent(\"updatetask\", $this);\n       }\n   }\n\n\n   /**\n    * Actions done before the DELETE of the item in the database /\n    * Maybe used to add another check for deletion\n    *\n    * @return bool : true if item need to be deleted else false\n    **/\n   function pre_deleteItem() {\n      global $CFG_GLPI;\n\n      if ($CFG_GLPI[\"notifications_mailing\"]\n          && !(isset($this->input['withtemplate'])\n               || (isset($this->input['withtemplate'])\n                   && $this->input[\"withtemplate\"] != 1))\n          && isset($this->input['_delete'])\n      ) {\n         NotificationEvent::raiseEvent(\"deletetask\", $this);\n      }\n\n      return true;\n   }\n\n\n   /**\n    * @param       $ID\n    * @param array $options\n    *\n    * @return bool\n    */\n   function showForm($ID, $options = []) {\n      global $CFG_GLPI;\n\n      Html::initEditorSystem('comment');\n\n      $this->initForm($ID, $options);\n      $this->showFormHeader($options);\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo Html::hidden('id', ['value' => $ID]);\n      echo \"<td>\" . __('Name') . \"</td>\";\n      echo \"<td>\";\n      echo Html::input('name', ['value' => $this->fields['name'], 'size' => 40]);\n//      if (isset($options['from_edit_ajax'])\n//          && $options['from_edit_ajax']) {\n//         echo Html::hidden('from_edit_ajax', ['value' => $options['from_edit_ajax']]);\n//      }\n//      if (isset($options['withtemplate']) && empty($options['withtemplate'])) {\n//         $options['withtemplate'] = 0;\n//      }\n//      echo Html::hidden('withtemplate', ['value' => $options['withtemplate']]);\n      echo \"</td>\";\n\n      $plugin_tasklists_tasktypes_id = $this->fields[\"plugin_tasklists_tasktypes_id\"];\n      if (isset($options['plugin_tasklists_tasktypes_id'])\n          && $options['plugin_tasklists_tasktypes_id']) {\n         $plugin_tasklists_tasktypes_id = $options['plugin_tasklists_tasktypes_id'];\n      }\n      echo \"<td>\" . _n('Context', 'Contexts', 1, 'tasklists') . \"</td><td>\";\n      $types     = PluginTasklistsTypeVisibility::seeAllowedTypes();\n      $rand_type = Dropdown::show('PluginTasklistsTaskType', ['name'      => \"plugin_tasklists_tasktypes_id\",\n                                                              'value'     => $plugin_tasklists_tasktypes_id,\n                                                              'entity'    => $this->fields[\"entities_id\"],\n                                                              'condition' => ['id' => $types],\n                                                              'on_change' => \"plugin_tasklists_load_states();\",]);\n      echo \"</td>\";\n      echo \"</tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n\n      echo \"<td>\" . __('Priority') . \"</td>\";\n      echo \"<td>\";\n      $priority = $this->fields['priority'];\n      if (isset($options['priority'])\n          && $options['priority']) {\n         $priority = $options['priority'];\n      }\n      CommonITILObject::dropdownPriority(['value'     => $priority,\n                                          'withmajor' => 1]);\n      echo \"</td>\";\n\n      echo \"<td>\" . __('Planned duration') . \"</td>\";\n      echo \"<td>\";\n      Dropdown::showTimeStamp(\"actiontime\", ['min'   => HOUR_TIMESTAMP * 2,\n                                             'max'   => MONTH_TIMESTAMP * 2,\n                                             'step'  => HOUR_TIMESTAMP * 2,\n                                             'value' => $this->fields[\"actiontime\"]]);\n      echo \"</td>\";\n\n      echo \"</tr>\";\n\n      if (isset($_SESSION[\"glpiactiveentities\"])\n          && count($_SESSION[\"glpiactiveentities\"]) > 1\n          && ($ID == 0 || (isset($options['withtemplate']) && ($options['withtemplate'] == 2)))) {\n\n         echo \"<tr class='tab_bg_1'>\";\n\n         echo \"<td>\" . __('Existing client', 'tasklists') . \"</td>\";\n         echo \"<td>\";\n         $entities_id = $this->fields['entities_id'];\n         if (isset($options['entities_id'])\n             && $options['entities_id']) {\n            $entities_id = $options['entities_id'];\n         }\n         $rand_entity = Dropdown::show('Entity', ['name'         => \"entities_id\",\n                                                  'value'        => $entities_id,\n                                                  'entity'       => $_SESSION[\"glpiactiveentities\"],\n                                                  'is_recursive' => true,\n                                                  'on_change'    => \"plugin_tasklists_load_entities();\",]);\n         echo \"</td>\";\n\n         echo \"<td colspan='2' id='plugin_tasklists_entity'>\";\n         $JS     = \"function plugin_tasklists_load_entities(){\";\n         $params = ['entities_id' => '__VALUE__',\n                    'entity'      => $this->fields[\"entities_id\"]];\n         $JS     .= Ajax::updateItemJsCode(\"plugin_tasklists_entity\",\n                                           PLUGIN_TASKLISTS_WEBDIR . \"/ajax/inputEntity.php\",\n                                           $params, 'dropdown_entities_id' . $rand_entity, false);\n         $JS     .= \"}\";\n         echo Html::scriptBlock($JS);\n         echo \"</td>\";\n         echo \"</tr>\";\n      }\n\n      echo \"<tr class='tab_bg_1'>\";\n\n      echo \"<td>\" . __('Other client', 'tasklists') . \"</td>\";\n      echo \"<td>\";\n      $client = $this->fields['client'];\n      if (isset($options['client'])\n          && $options['client']) {\n         $client = $options['client'];\n      }\n      echo Html::input('client', ['value' => $client, 'size' => 40]);\n      echo \"</td>\";\n      echo \"<td>\" . __(\"Due date\", \"tasklists\") . \"</td>\";\n      echo \"<td>\";\n      Html::showDateField(\"due_date\", ['value' => $this->fields[\"due_date\"]]);\n      echo \"</td>\";\n      echo \"</tr>\";\n      echo \"<tr class='tab_bg_1'>\";\n\n      echo \"<td>\" . _n('Requester', 'Requesters', 1) . \"</td><td>\";\n      $users_id_requester = $this->fields['users_id_requester'];\n      if (isset($options['users_id_requester'])\n          && $options['users_id_requester']) {\n         $users_id_requester = $options['users_id_requester'];\n      }\n\n      User::dropdown(['name'   => \"users_id_requester\",\n                      'value'  => $users_id_requester,\n                      'entity' => $this->fields[\"entities_id\"],\n                      'right'  => 'all']);\n      echo \"</td>\";\n\n      echo \"<td></td>\";\n      echo \"<td>\";\n      echo \"</td>\";\n\n      echo \"</tr>\";\n      echo \"<tr class='tab_bg_1'>\";\n\n      echo \"<td>\" . __('Technician') . \"</td><td>\";\n      $users_id = $this->fields['users_id'];\n      if (isset($options['users_id'])\n          && $options['users_id']) {\n         $users_id = $options['users_id'];\n      }\n\n      User::dropdown(['name'   => \"users_id\",\n                      'value'  => $users_id,\n                      'entity' => $this->fields[\"entities_id\"],\n                      'right'  => 'all']);\n      echo \"</td>\";\n\n      echo \"<td>\" . __('Percent done') . \"</td>\";\n      echo \"<td>\";\n      Dropdown::showNumber(\"percent_done\", ['value' => $this->fields['percent_done'],\n                                            'min'   => 0,\n                                            'max'   => 100,\n                                            'step'  => 10,\n                                            'unit'  => '%']);\n      echo \"</td>\";\n\n      echo \"</tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n\n      echo \"<td>\" . __('Group') . \"</td>\";\n      echo \"<td>\";\n      $groups_id = $this->fields['groups_id'];\n      if (isset($options['groups_id'])\n          && $options['groups_id']) {\n         $groups_id = $options['groups_id'];\n      }\n      Dropdown::show('Group', ['name'      => \"groups_id\",\n                               'value'     => $groups_id,\n                               'entity'    => $this->fields[\"entities_id\"],\n                               'condition' => ['is_usergroup' => 1]\n      ]);\n      echo \"</td>\";\n\n      echo \"<td>\" . __('Status') . \"</td><td id='plugin_tasklists_state'>\";\n\n      $plugin_tasklists_taskstates_id = $this->fields[\"plugin_tasklists_taskstates_id\"];\n      if (isset($options['plugin_tasklists_taskstates_id'])\n          && $options['plugin_tasklists_taskstates_id']) {\n         $plugin_tasklists_taskstates_id = $options['plugin_tasklists_taskstates_id'];\n      }\n\n      if ($plugin_tasklists_tasktypes_id) {\n         self::displayState($plugin_tasklists_tasktypes_id, $plugin_tasklists_taskstates_id);\n      }\n      $JS     = \"function plugin_tasklists_load_states(){\";\n      $params = ['plugin_tasklists_tasktypes_id' => '__VALUE__',\n                 'entity'                        => $this->fields[\"entities_id\"]];\n      $JS     .= Ajax::updateItemJsCode(\"plugin_tasklists_state\",\n                                        PLUGIN_TASKLISTS_WEBDIR . \"/ajax/dropdownState.php\",\n                                        $params, 'dropdown_plugin_tasklists_tasktypes_id' . $rand_type, false);\n      $JS     .= \"}\";\n      echo Html::scriptBlock($JS);\n\n      echo \"</td>\";\n\n      echo \"</tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n\n      echo \"<td>\";\n      echo __('Description') . \"</td>\";\n      echo \"<td colspan = '3' class='center'>\";\n      $rand_text  = mt_rand();\n      $content_id = \"comment$rand_text\";\n      $cols       = 100;\n      $rows       = 15;\n      Html::textarea(['name'            => 'content',\n                      'value'           => $this->fields[\"content\"],\n                      'rand'            => $rand_text,\n                      'editor_id'       => $content_id,\n                      'enable_richtext' => true,\n                      'cols'            => $cols,\n                      'rows'            => $rows]);\n      echo \"</td>\";\n\n      echo \"</tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td>\" . __('Visibility') . \"</td>\";\n      echo \"<td>\";\n      $visibility = $this->fields['visibility'];\n      if (isset($options['visibility'])\n          && $options['visibility']) {\n         $visibility = $options['visibility'];\n      }\n      self::dropdownVisibility(['value' => $visibility]);\n      echo \"</td>\";\n\n      echo \"<td>\" . __('Archived', 'tasklists') . \"</td>\";\n      echo \"<td>\";\n      Dropdown::showYesNo(\"is_archived\", $this->fields[\"is_archived\"]);\n      echo \"</td>\";\n\n      echo \"</tr>\";\n\n      $this->showFormButtons($options);\n\n      return true;\n   }\n\n\n   /**\n    * States by type dropdown list\n    *\n    * @param     $plugin_tasklists_tasktypes_id\n    * @param int $plugin_tasklists_taskstates_id\n    */\n   static function displayState($plugin_tasklists_tasktypes_id, $plugin_tasklists_taskstates_id = 0) {\n\n\n      $states[]      = ['id'   => 0,\n                        'name' => __('Backlog', 'tasklists'),\n                        'rank' => 0];\n      $ranked        = [];\n      $states_ranked = [];\n      $dbu           = new DbUtils();\n      $datastates    = $dbu->getAllDataFromTable($dbu->getTableForItemType('PluginTasklistsTaskState'));\n      if (!empty($datastates)) {\n         foreach ($datastates as $datastate) {\n            $tasktypes = json_decode($datastate['tasktypes']);\n            if (is_array($tasktypes)) {\n               if (in_array($plugin_tasklists_tasktypes_id, $tasktypes)) {\n\n                  $condition = ['plugin_tasklists_taskstates_id' => $datastate['id'],\n                                'plugin_tasklists_tasktypes_id'  => $plugin_tasklists_tasktypes_id];\n                  $order     = new PluginTasklistsStateOrder();\n                  $ranks     = $order->find($condition);\n                  $ranking   = 0;\n                  if (count($ranks) > 0) {\n                     foreach ($ranks as $rank) {\n                        $ranking = $rank['ranking'];\n                     }\n                  }\n                  //                  $states[$datastate['id']] = $datastate['name'];\n                  if (empty($name = DropdownTranslation::getTranslatedValue($datastate['id'], 'PluginTasklistsTaskState', 'name', $_SESSION['glpilanguage']))) {\n                     $name = $datastate['name'];\n                  }\n                  $states[] = ['id'   => $datastate['id'],\n                               'name' => $name,\n                               'rank' => $ranking];\n\n\n                  foreach ($states as $key => $row) {\n                     $ranked[$key] = $row['rank'];\n                  }\n                  array_multisort($ranked, SORT_ASC, $states);\n               }\n            }\n         }\n      }\n      foreach ($states as $k => $v) {\n         $states_ranked[$v['id']] = $v['name'];\n      }\n      $rand = mt_rand();\n      Dropdown::showFromArray('plugin_tasklists_taskstates_id', $states_ranked, ['rand'    => $rand,\n                                                                                 'value'   => $plugin_tasklists_taskstates_id,\n                                                                                 'display' => true]);\n\n   }\n\n\n   /**\n    * Closed States for a task\n    *\n    * @param     $plugin_tasklists_tasks_id\n    */\n   static function getClosedStateForTask($plugin_tasklists_tasks_id) {\n\n      $task = new PluginTasklistsTask();\n      if ($task->getFromDB($plugin_tasklists_tasks_id)) {\n         $state      = $task->fields[\"plugin_tasklists_taskstates_id\"];\n         $dbu        = new DbUtils();\n         $condition  = [\"is_finished\" => 1];\n         $datastates = $dbu->getAllDataFromTable($dbu->getTableForItemType('PluginTasklistsTaskState'), $condition);\n         if (!empty($datastates)) {\n            foreach ($datastates as $datastate) {\n               $tasktypes = json_decode($datastate['tasktypes']);\n               if (is_array($tasktypes)) {\n                  if (in_array($task->fields[\"plugin_tasklists_tasktypes_id\"], $tasktypes)) {\n                     $state = $datastate['id'];\n                  }\n               }\n            }\n         }\n         return $state;\n      }\n   }\n\n   /**\n    * @param $value\n    *\n    * @return string\n    */\n   static function getStateName($value) {\n\n      switch ($value) {\n\n         case 0 :\n            return __('Backlog', 'tasklists');\n\n         default :\n            // Return $value if not define\n            return Dropdown::getDropdownName(\"glpi_plugin_tasklists_taskstates\", $value);\n\n      }\n   }\n\n   /**\n    * Make a select box for link tasklists\n    *\n    * Parameters which could be used in options array :\n    *    - name : string / name of the select (default is documents_id)\n    *    - entity : integer or array / restrict to a defined entity or array of entities\n    *                   (default -1 : no restriction)\n    *    - used : array / Already used items ID: not to display in dropdown (default empty)\n    *\n    * @param $options array of possible options\n    *\n    * @return nothing (print out an HTML select box)\n    *\n    * @throws \\GlpitestSQLError\n    */\n   static function dropdownTasklists($options = []) {\n\n      global $DB, $CFG_GLPI;\n\n      $p['name']    = 'plugin_tasklists_tasklists_id';\n      $p['entity']  = '';\n      $p['used']    = [];\n      $p['display'] = true;\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $p[$key] = $val;\n         }\n      }\n\n      $rand  = mt_rand();\n      $dbu   = new DbUtils();\n      $where = \" WHERE `glpi_plugin_tasklists_tasklists`.`is_deleted` = '0'  AND `glpi_plugin_tasklists_tasks`.`is_template` = 0\";\n      $where .= $dbu->getEntitiesRestrictRequest(\"AND\", 'glpi_plugin_tasklists_tasklists', '', $p['entity'], true);\n\n      if (count($p['used'])) {\n         $where .= \" AND `id` NOT IN (0, \" . implode(\",\", $p['used']) . \")\";\n      }\n\n      $query  = \"SELECT *\n        FROM `glpi_plugin_tasklists_tasktypes`\n        WHERE `id` IN (SELECT DISTINCT `plugin_tasklists_tasktypes_id`\n                       FROM `glpi_plugin_tasklists_tasks`\n                       $where)\n        ORDER BY `name`\";\n      $result = $DB->query($query);\n\n      $values = [0 => Dropdown::EMPTY_VALUE];\n\n      while ($data = $DB->fetchAssoc($result)) {\n         $values[$data['id']] = $data['name'];\n      }\n\n      $out      = Dropdown::showFromArray('_tasktype', $values, ['width'   => '30%',\n                                                                 'rand'    => $rand,\n                                                                 'display' => false]);\n      $field_id = Html::cleanId(\"dropdown__tasktype$rand\");\n\n      $params = ['tasktypes' => '__VALUE__',\n                 'entity'    => $p['entity'],\n                 'rand'      => $rand,\n                 'myname'    => $p['name'],\n                 'used'      => $p['used']\n      ];\n\n      $out .= Ajax::updateItemOnSelectEvent($field_id, \"show_\" . $p['name'] . $rand, PLUGIN_TASKLISTS_WEBDIR . \"/ajax/dropdownTypeTasks.php\", $params, false);\n\n      $out .= \"<span id='show_\" . $p['name'] . \"$rand'>\";\n      $out .= \"</span>\\n\";\n\n      $params['tasktype'] = 0;\n      $out                .= Ajax::updateItem(\"show_\" . $p['name'] . $rand, PLUGIN_TASKLISTS_WEBDIR . \"/ajax/dropdownTypeTasks.php\", $params, false);\n      if ($p['display']) {\n         echo $out;\n         return $rand;\n      }\n      return $out;\n   }\n\n   //Massive action\n\n   /**\n    * @param null $checkitem\n    *\n    * @return array\n    */\n   function getSpecificMassiveActions($checkitem = null) {\n      $isadmin = static::canUpdate();\n      $actions = parent::getSpecificMassiveActions($checkitem);\n\n      if ($_SESSION['glpiactiveprofile']['interface'] == 'central') {\n         if ($isadmin) {\n\n            if (Session::haveRight('transfer', READ) && Session::isMultiEntitiesMode()\n            ) {\n               $actions['PluginTasklistsTask' . MassiveAction::CLASS_ACTION_SEPARATOR . 'transfer'] = __('Transfer');\n            }\n         }\n      }\n      return $actions;\n   }\n\n   /**\n    * @param MassiveAction $ma\n    *\n    * @return bool|false\n    * @since version 0.85\n    *\n    * @see CommonDBTM::showMassiveActionsSubForm()\n    *\n    */\n   static function showMassiveActionsSubForm(MassiveAction $ma) {\n\n      switch ($ma->getAction()) {\n         case \"transfer\" :\n            Dropdown::show('Entity');\n            echo Html::submit(_x('button', 'Post'), ['name' => 'massiveaction', 'class' => 'btn btn-primary']);\n            return true;\n            break;\n      }\n      return parent::showMassiveActionsSubForm($ma);\n   }\n\n   /**\n    * @param MassiveAction $ma\n    * @param CommonDBTM    $item\n    * @param array         $ids\n    *\n    * @return nothing|void\n    * @throws \\GlpitestSQLError\n    * @see CommonDBTM::processMassiveActionsForOneItemtype()\n    *\n    * @since version 0.85\n    *\n    */\n   static function processMassiveActionsForOneItemtype(MassiveAction $ma, CommonDBTM $item, array $ids) {\n\n      switch ($ma->getAction()) {\n         case \"transfer\" :\n            $input = $ma->getInput();\n            if ($item->getType() == 'PluginTasklistsTask') {\n               foreach ($ids as $key) {\n                  $item->getFromDB($key);\n                  $type = PluginTasklistsTaskType::transfer($item->fields[\"plugin_tasklists_tasktypes_id\"], $input['entities_id']);\n                  if ($type > 0) {\n                     $values[\"id\"]                            = $key;\n                     $values[\"plugin_tasklists_tasktypes_id\"] = $type;\n                     $item->update($values);\n                  }\n                  unset($values);\n                  $values[\"id\"]          = $key;\n                  $values[\"entities_id\"] = $input['entities_id'];\n\n                  if ($item->update($values)) {\n                     $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_OK);\n                  } else {\n                     $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_KO);\n                  }\n               }\n            }\n            return;\n\n      }\n      parent::processMassiveActionsForOneItemtype($ma, $item, $ids);\n   }\n\n   /**\n    * For other plugins, add a type to the linkable types\n    *\n    * @param $type string class name\n    * *@since version 1.3.0\n    *\n    */\n   static function registerType($type) {\n      if (!in_array($type, self::$types)) {\n         self::$types[] = $type;\n      }\n   }\n\n   /**\n    * Type than could be linked to a Rack\n    *\n    * @param $all boolean, all type, or only allowed ones\n    *\n    * @return array of types\n    * */\n   static function getTypes($all = false) {\n\n      if ($all) {\n         return self::$types;\n      }\n\n      // Only allowed types\n      $types = self::$types;\n\n      foreach ($types as $key => $type) {\n         if (!class_exists($type)) {\n            continue;\n         }\n\n         $item = new $type();\n         if (!$item->canView()) {\n            unset($types[$key]);\n         }\n      }\n      return $types;\n   }\n\n   /**\n    * display a value according to a field\n    *\n    * @param $field     String         name of the field\n    * @param $values    String / Array with the value to display\n    * @param $options   Array          of option\n    *\n    * @return a string\n    **@since version 0.83\n    *\n    */\n   static function getSpecificValueToDisplay($field, $values, array $options = []) {\n\n      if (!is_array($values)) {\n         $values = [$field => $values];\n      }\n      switch ($field) {\n         case 'priority':\n            return CommonITILObject::getPriorityName($values[$field]);\n         case 'visibility':\n            return self::getVisibilityName($values[$field]);\n         case 'plugin_tasklists_taskstates_id':\n            return self::getStateName($values[$field]);\n      }\n      return parent::getSpecificValueToDisplay($field, $values, $options);\n   }\n\n   /**\n    * @param $field\n    * @param $name (default '')\n    * @param $values (default '')\n    * @param $options   array\n    *\n    * @return string\n    **@since version 0.84\n    *\n    */\n   static function getSpecificValueToSelect($field, $name = '', $values = '', array $options = []) {\n\n      if (!is_array($values)) {\n         $values = [$field => $values];\n      }\n      $options['display'] = false;\n\n      switch ($field) {\n         case 'priority':\n            $options['name']      = $name;\n            $options['value']     = $values[$field];\n            $options['withmajor'] = 1;\n            return CommonITILObject::dropdownPriority($options);\n\n         case 'visibility':\n            $options['name']  = $name;\n            $options['value'] = $values[$field];\n            return self::dropdownVisibility($options);\n\n         case 'plugin_tasklists_taskstates_id':\n            return Dropdown::show('PluginTasklistsTaskState', ['name'       => $name,\n                                                               'value'      => $values[$field],\n                                                               'emptylabel' => __('Backlog', 'tasklists'),\n                                                               'display'    => false,\n                                                               'width'      => '200px'\n            ]);\n      }\n      return parent::getSpecificValueToSelect($field, $name, $values, $options);\n   }\n\n   /*\n    * @since  version 0.84 new proto\n    *\n    * @param $options array of options\n    *       - name     : select name (default is urgency)\n    *       - value    : default value (default 0)\n    *       - showtype : list proposed : normal, search (default normal)\n    *       - display  : boolean if false get string\n    *\n    * @return string id of the select\n   **/\n   /**\n    * @param array $options\n    *\n    * @return int|string\n    */\n   static function dropdownVisibility(array $options = []) {\n\n      $p['name']      = 'visibility';\n      $p['value']     = 0;\n      $p['showtype']  = 'normal';\n      $p['display']   = true;\n      $p['withmajor'] = false;\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $p[$key] = $val;\n         }\n      }\n\n      $values = [];\n\n      $values[1] = static::getVisibilityName(1);\n      $values[2] = static::getVisibilityName(2);\n      $values[3] = static::getVisibilityName(3);\n\n      return Dropdown::showFromArray($p['name'], $values, $p);\n\n   }\n\n   /**\n    * Get ITIL object priority Name\n    *\n    * @param $value priority ID\n    *\n    * @return priority|string\n    */\n   static function getVisibilityName($value) {\n\n      switch ($value) {\n\n         case 1 :\n            return _x('visibility', 'This user', 'tasklists');\n\n         case 2 :\n            return _x('visibility', 'This user and this group', 'tasklists');\n\n         case 3 :\n            return _x('visibility', 'All', 'tasklists');\n\n         default :\n            // Return $value if not define\n            return $value;\n\n      }\n   }\n\n   /**\n    * @param $id\n    *\n    * @return bool\n    */\n   function checkVisibility($id) {\n\n      if (Session::haveRight(\"plugin_tasklists_see_all\", 1)) {\n         return true;\n      }\n      if ($this->getFromDB(($id))) {\n         $groupusers = Group_User::getGroupUsers($this->fields['groups_id']);\n         $groups     = [];\n         foreach ($groupusers as $groupuser) {\n            $groups[] = $groupuser[\"id\"];\n         }\n         if (($this->fields['visibility'] == 1 && ($this->fields['users_id'] == Session::getLoginUserID() || $this->fields['users_id_requester'] == Session::getLoginUserID()))\n             || ($this->fields['visibility'] == 2 && ($this->fields['users_id'] == Session::getLoginUserID() || $this->fields['users_id_requester'] == Session::getLoginUserID()\n                                                      || in_array(Session::getLoginUserID(), $groups)))\n             || ($this->fields['visibility'] == 3)) {\n            return true;\n         }\n      }\n      return false;\n   }\n\n   /**\n    * @see Rule::getActions()\n    * */\n   function getActions() {\n\n      $actions = [];\n\n      $actions['tasklists']['name']          = __('Affect entity for create task', 'tasklists');\n      $actions['tasklists']['type']          = 'dropdown';\n      $actions['tasklists']['table']         = 'glpi_entities';\n      $actions['tasklists']['force_actions'] = ['send'];\n\n      return $actions;\n   }\n\n   /**\n    * Execute the actions as defined in the rule\n    *\n    * @param $action\n    * @param $output the fields to manipulate\n    * @param $params parameters\n    *\n    * @return the $output array modified\n    */\n   function executeActions($action, $output, $params) {\n\n      switch ($params['rule_itemtype']) {\n         case 'RuleMailCollector':\n            switch ($action->fields[\"field\"]) {\n               case \"tasklists\" :\n\n                  if (isset($params['headers']['subject'])) {\n                     $input['name'] = $params['headers']['subject'];\n                  }\n                  if (isset($params['ticket'])) {\n                     $input['comment'] = addslashes(strip_tags($params['ticket']['content']));\n                  }\n                  if (isset($params['headers']['from'])) {\n                     $input['users_id'] = User::getOrImportByEmail($params['headers']['from']);\n                  }\n\n                  if (isset($action->fields[\"value\"])) {\n                     $input['entities_id'] = $action->fields[\"value\"];\n                  }\n                  $input['state'] = 1;\n\n                  if (isset($input['name'])\n                      && $input['name'] !== false\n                      && isset($input['entities_id'])\n                  ) {\n                     $this->add($input);\n                  }\n                  $output['_refuse_email_no_response'] = true;\n                  break;\n            }\n      }\n      return $output;\n   }\n\n   /**\n    * @param $options\n    *\n    * @return bool\n    */\n   function hasTemplate($options) {\n\n      $templates = [];\n      $dbu       = new DbUtils();\n      $restrict  = [\"is_template\" => 1] +\n                   [\"is_deleted\" => 0] +\n                   [\"is_archived\" => 0] +\n                   [\"plugin_tasklists_tasktypes_id\" => $options['plugin_tasklists_tasktypes_id']] +\n                   //                  [\"users_id\" => Session::getLoginUserID()] +\n                   $dbu->getEntitiesRestrictCriteria($this->getTable(), '', '', $this->maybeRecursive());\n\n      $templates = $dbu->getAllDataFromTable($this->getTable(), $restrict);\n      reset($templates);\n      foreach ($templates as $template) {\n         return $template['id'];\n      }\n      return false;\n   }\n\n\n   /**\n    * @param       $target\n    * @param int   $add\n    * @param array $options\n    */\n   function listOfTemplates($target, $add = 0) {\n      $dbu = new DbUtils();\n\n      $restrict = [\"is_template\" => 1] +\n                  $dbu->getEntitiesRestrictCriteria($this->getTable(), '', '', $this->maybeRecursive()) +\n                  [\"ORDER\" => \"name\"];\n\n      $templates = $dbu->getAllDataFromTable($this->getTable(), $restrict);\n\n      if (Session::isMultiEntitiesMode()) {\n         $colsup = 1;\n      } else {\n         $colsup = 0;\n      }\n\n      echo \"<div align='center'><table class='tab_cadre_fixe'>\";\n      if ($add) {\n         echo \"<tr><th colspan='\" . (2 + $colsup) . \"'>\" . __('Choose a template') . \" - \" . self::getTypeName(2) . \"</th>\";\n      } else {\n         echo \"<tr><th colspan='\" . (2 + $colsup) . \"'>\" . __('Templates') . \" - \" . self::getTypeName(2) . \"</th>\";\n      }\n\n      echo \"</tr>\";\n      if ($add) {\n\n         echo \"<tr>\";\n         echo \"<td colspan='\" . (2 + $colsup) . \"' class='center tab_bg_1'>\";\n         echo \"<a href=\\\"$target?id=-1&amp;withtemplate=2\\\">&nbsp;&nbsp;&nbsp;\" . __('Blank Template') . \"&nbsp;&nbsp;&nbsp;</a></td>\";\n         echo \"</tr>\";\n      }\n\n      foreach ($templates as $template) {\n\n         $templname = $template[\"template_name\"];\n         if ($_SESSION[\"glpiis_ids_visible\"] || empty($template[\"template_name\"])) {\n            $templname .= \"(\" . $template[\"id\"] . \")\";\n         }\n\n         echo \"<tr>\";\n         echo \"<td class='center tab_bg_1'>\";\n         if (!$add) {\n            echo \"<a href=\\\"$target?id=\" . $template[\"id\"] . \"&amp;withtemplate=1\\\">&nbsp;&nbsp;&nbsp;$templname&nbsp;&nbsp;&nbsp;</a></td>\";\n\n            if (Session::isMultiEntitiesMode()) {\n               echo \"<td class='center tab_bg_2'>\";\n               echo Dropdown::getDropdownName(\"glpi_entities\", $template['entities_id']);\n               echo \"</td>\";\n            }\n            echo \"<td class='center tab_bg_2'>\";\n            Html::showSimpleForm($target,\n                                 'purge',\n                                 _x('button', 'Delete permanently'),\n                                 ['id' => $template[\"id\"], 'withtemplate' => 1]);\n            echo \"</td>\";\n\n         } else {\n            echo \"<a href=\\\"$target?id=\" . $template[\"id\"] . \"&amp;withtemplate=2\\\">&nbsp;&nbsp;&nbsp;$templname&nbsp;&nbsp;&nbsp;</a></td>\";\n\n            if (Session::isMultiEntitiesMode()) {\n               echo \"<td class='center tab_bg_2'>\";\n               echo Dropdown::getDropdownName(\"glpi_entities\", $template['entities_id']);\n               echo \"</td>\";\n            }\n         }\n         echo \"</tr>\";\n      }\n      if (!$add) {\n         echo \"<tr>\";\n         echo \"<td colspan='\" . (2 + $colsup) . \"' class='tab_bg_2 center'>\";\n         echo \"<b><a href=\\\"$target?withtemplate=1\\\">\" . __('Add a template...') . \"</a></b>\";\n         echo \"</td>\";\n         echo \"</tr>\";\n      }\n      echo \"</table></div>\";\n   }\n\n   /**\n    * @since 0.84\n    **/\n   public function loadActors() {\n\n      //      if (!empty($this->grouplinkclass)) {\n      //         $class        = new $this->grouplinkclass();\n      $this->groups = [$this->fields['groups_id']];\n      //      }\n\n      //      if (!empty($this->userlinkclass)) {\n      //         $class        = new $this->userlinkclass();\n      $this->users = [$this->fields['users_id']];\n      //      }\n      //\n      //      if (!empty($this->supplierlinkclass)) {\n      //         $class            = new $this->supplierlinkclass();\n      //         $this->suppliers  = $class->getActors($this->fields['id']);\n      //      }\n   }\n\n   public static function getTeamItemtypes(): array {\n      return ['User', 'Group'];\n   }\n\n   public function getTeam(): array {\n      global $DB;\n\n      $team = [];\n\n      $team_itemtypes = static::getTeamItemtypes();\n\n      /** @var CommonDBTM $itemtype */\n      foreach ($team_itemtypes as $itemtype) {\n         /** @var CommonDBTM $link_class */\n         $link_class = null;\n         switch ($itemtype) {\n            case 'User':\n               $link_class = \"PluginTasklistsTask\";\n               break;\n            case 'Group':\n               $link_class = \"PluginTasklistsTask\";\n               break;\n         }\n\n         if ($link_class === null) {\n            continue;\n         }\n\n         $select = [];\n         if ($itemtype === 'User') {\n            $select = [$link_class::getTable() . '.' . $itemtype::getForeignKeyField(), $itemtype::getTable() . '.' . 'name', 'realname', 'firstname'];\n         } else {\n            $select = [\n               $link_class::getTable() . '.' . $itemtype::getForeignKeyField(), $itemtype::getTable() . '.' . 'name',\n               new QueryExpression('NULL as realname'),\n               new QueryExpression('NULL as firstname')\n            ];\n         }\n\n         $it = $DB->request([\n                               'SELECT'    => $select,\n                               'FROM'      => $link_class::getTable(),\n                               'WHERE'     => [$link_class::getTable() . '.' . 'id' => $this->getID()],\n                               'LEFT JOIN' => [\n                                  $itemtype::getTable() => [\n                                     'ON' => [\n                                        $itemtype::getTable()   => 'id',\n                                        $link_class::getTable() => $itemtype::getForeignKeyField()\n                                     ]\n                                  ]\n                               ]\n                            ]);\n         foreach ($it as $data) {\n            $items_id = $data[$itemtype::getForeignKeyField()];\n            if ($items_id <= 0) {\n               continue;\n            }\n            $member   = [\n               'itemtype'     => $itemtype,\n               'items_id'     => $items_id,\n               'id'           => $items_id,\n               'role'         => 2,\n               'name'         => $data['name'],\n               'realname'     => $data['realname'],\n               'firstname'    => $data['firstname'],\n               'display_name' => formatUserName($items_id, $data['name'], $data['realname'], $data['firstname'])\n            ];\n            $team[]   = $member;\n         }\n      }\n\n      return $team;\n   }\n\n\n   public static function getTeamRoles(): array {\n      return [\n         \\CommonITILActor::ASSIGN,\n      ];\n   }\n\n   public static function getTeamRoleName(int $role, int $nb = 1): string {\n      switch ($role) {\n         case \\CommonITILActor::ASSIGN:\n            return _n('Assignee', 'Assignees', $nb);\n      }\n      return '';\n   }\n\n\n   public function addTeamMember(string $itemtype, int $items_id, array $params = []): bool {\n      $role = CommonITILActor::ASSIGN;\n\n      /** @var CommonDBTM $link_class */\n      $link_class = null;\n      switch ($itemtype) {\n         case 'User':\n            $link_class = \"PluginTasklistsTask\";\n            $field      = \"users_id\";\n            break;\n         case 'Group':\n            $link_class = \"PluginTasklistsTask\";\n            $field      = \"groups_id\";\n            break;\n      }\n\n      if ($link_class === null) {\n         return false;\n      }\n\n      $link_item = new $link_class();\n      /** @var CommonDBTM $itemtype */\n      $result = $link_item->update([$field => $items_id,\n                                    'id'   => $this->getID()]);\n      return (bool)$result;\n   }\n\n   public function deleteTeamMember(string $itemtype, int $items_id, array $params = []): bool {\n      $role = CommonITILActor::ASSIGN;\n\n      /** @var CommonDBTM $link_class */\n      $link_class = null;\n      switch ($itemtype) {\n         case 'User':\n            $link_class = \"PluginTasklistsTask\";\n            $field      = \"users_id\";\n            break;\n         case 'Group':\n            $link_class = \"PluginTasklistsTask\";\n            $field      = \"groups_id\";\n            break;\n      }\n\n      if ($link_class === null) {\n         return false;\n      }\n\n      $link_item = new $link_class();\n      /** @var CommonDBTM $itemtype */\n      $result = $link_item->update([$field => '0',\n                                    'id'   => $this->getID()]);\n      return (bool)$result;\n   }\n\n   public static function getDataToDisplayOnKanban($ID, $criteria = []) {\n      // TODO: Implement getDataToDisplayOnKanban() method.\n   }\n\n   public static function getKanbanColumns($ID, $column_field = null, $column_ids = [], $get_default = false) {\n      // TODO: Implement getKanbanColumns() method.\n   }\n\n   public static function showKanban($ID) {\n      // TODO: Implement showKanban() method.\n   }\n\n   public static function getAllForKanban($active = true, $current_id = -1) {\n      // TODO: Implement getAllForKanban() method.\n   }\n\n   public static function getAllKanbanColumns($column_field = null, $column_ids = [], $get_default = false) {\n      // TODO: Implement getAllKanbanColumns() method.\n   }\n}\n", "<?php\n/*\n * @version $Id: HEADER 15930 2011-10-30 15:47:55Z tsmr $\n -------------------------------------------------------------------------\n Tasklists plugin for GLPI\n Copyright (C) 2003-2016 by the Tasklists Development Team.\n\n https://github.com/InfotelGLPI/tasklists\n -------------------------------------------------------------------------\n\n LICENSE\n\n This file is part of Tasklists.\n\n Tasklists is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2 of the License, or\n (at your option) any later version.\n\n Tasklists is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Tasklists. If not, see <http://www.gnu.org/licenses/>.\n --------------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access directly to this file\");\n}\n\n// Class for a Dropdown\n\n/**\n * Class PluginTasklistsTaskType\n */\nclass PluginTasklistsTaskType extends CommonTreeDropdown {\n\n   use \\Glpi\\Features\\Kanban;\n\n   static $rightname = 'plugin_tasklists';\n\n   /**\n    * @param int $nb\n    *\n    * @return translated\n    */\n   static function getTypeName($nb = 0) {\n\n      return _n('Context', 'Contexts', $nb, 'tasklists');\n   }\n\n   /**\n    * @return string\n    */\n   static function getIcon() {\n      return \"ti ti-layout-kanban\";\n   }\n\n   /**\n    * @param array $options\n    *\n    * @return array\n    * @see CommonGLPI::defineTabs()\n    *\n    */\n   function defineTabs($options = []) {\n\n      $ong = parent::defineTabs($options);\n      $this->addStandardTab(__CLASS__, $ong, $options);\n      $this->addStandardTab('PluginTasklistsStateOrder', $ong, $options);\n      $this->addStandardTab('PluginTasklistsTypeVisibility', $ong, $options);\n      return $ong;\n   }\n\n\n   /**\n    * @return array\n    */\n   static function getAllForKanban($active = true, $current_id = -1) {\n      $self = new self();\n\n      $list  = $self->find([], [\"completename ASC\"]);\n      $items = [\n\n      ];\n\n      foreach ($list as $key => $value) {\n         $self->getFromDB($value['id']);\n         if (!$self->haveChildren()) {\n            $items[$value['id']] = $value['completename'];\n         }\n\n      }\n      return $items;\n   }\n\n   /**\n    * @return bool\n    */\n   public function forceGlobalState() {\n      // All users must be using the global state unless viewing the global Kanban\n      return false;\n   }\n\n   /**\n    * @param $ID\n    * @param $entity\n    *\n    * @return ID|int|the\n    * @throws \\GlpitestSQLError\n    */\n   static function transfer($ID, $entity) {\n      global $DB;\n\n      if ($ID > 0) {\n         // Not already transfer\n         // Search init item\n         $query = \"SELECT *\n                   FROM `glpi_plugin_tasklists_tasktypes`\n                   WHERE `id` = '$ID'\";\n\n         if ($result = $DB->query($query)) {\n            if ($DB->numrows($result)) {\n               $data                                   = $DB->fetchAssoc($result);\n               $data                                   = Toolbox::addslashes_deep($data);\n               $input['name']                          = $data['name'];\n               $input['entities_id']                   = $entity;\n               $input['is_recursive']                  = $data['is_recursive'];\n               $input['plugin_tasklists_tasktypes_id'] = $data['plugin_tasklists_tasktypes_id'];\n               $temp                                   = new self();\n               $newID                                  = $temp->getID();\n\n               if ($newID < 0) {\n                  $newID = $temp->import($input);\n               }\n\n               return $newID;\n            }\n         }\n      }\n      return 0;\n   }\n\n   /**\n    * @param       $ID\n    * @param       $column_field\n    * @param array $column_ids\n    * @param bool  $get_default\n    *\n    * @return array\n    */\n\n   static function getKanbanColumns($ID, $column_field = null, $column_ids = [], $get_default = false) {\n\n      if (!PluginTasklistsTypeVisibility::isUserHaveRight($ID)) {\n         return [];\n      }\n      $dbu = new DbUtils();\n      //      $datastates = $dbu->getAllDataFromTable($dbu->getTableForItemType('PluginTasklistsTaskState'));\n\n      $states[0] = [\n         'id'              => 0,\n         'name'            => __('Backlog', 'tasklists'),\n         'header_color'    => \"#CCC\",\n         'header_fg_color' => Toolbox::getFgColor(\"#CCC\", 50),\n         'drop_only'       => 0,\n         'finished'        => 0,\n         '_protected'   => true\n      ];\n\n      if (!empty($column_ids)) {\n         $PluginTasklistsTaskState = new PluginTasklistsTaskState();\n         $datastates               = $PluginTasklistsTaskState->find([\"id\" => $column_ids]);\n      }\n\n      if (!empty($column_ids) && !empty($datastates)) {\n\n         foreach ($datastates as $datastate) {\n            if (empty($name = DropdownTranslation::getTranslatedValue($datastate['id'], 'PluginTasklistsTaskState', 'name', $_SESSION['glpilanguage']))) {\n               $name = $datastate['name'];\n            }\n            $states[$datastate['id']] = [\n               'id'              => $datastate['id'],\n               'header_color'    => $datastate['color'],\n               'header_fg_color' => Toolbox::getFgColor($datastate['color'], 50),\n               'name'            => $name,\n               'finished'        => $datastate['is_finished']];\n            $colors[$datastate['id']] = $datastate['color'];\n         }\n      }\n      $nstates = [];\n\n      $task = new PluginTasklistsTask();\n      foreach ($states as $state) {\n\n         $selected_state = $state;\n         $tasks          = [];\n         $datas          = $task->find([\"plugin_tasklists_tasktypes_id\"  => $ID,\n                                        \"plugin_tasklists_taskstates_id\" => $state['id'],\n                                        'is_deleted'                     => 0,\n                                        'is_template'                    => 0], ['priority DESC,name']);\n\n         foreach ($datas as $data) {\n            $array = isset($_SESSION[\"archive\"][Session::getLoginUserID()]) ? json_decode($_SESSION[\"archive\"][Session::getLoginUserID()]) : [0];\n            if (!in_array($data[\"is_archived\"], $array)) {\n               continue;\n            }\n            $usersallowed = isset($_SESSION[\"usersKanban\"][Session::getLoginUserID()]) ? json_decode($_SESSION[\"usersKanban\"][Session::getLoginUserID()]) : [-1];\n            if (!in_array(-1, $usersallowed) && !in_array($data['users_id'], $usersallowed)) {\n               continue;\n            }\n\n            $plugin_tasklists_taskstates_id = $data['plugin_tasklists_taskstates_id'];\n            $finished                       = 0;\n            $finished_style                 = 'style=\"display: inline;\"';\n            $stateT                         = new PluginTasklistsTaskState();\n            if ($stateT->getFromDB($plugin_tasklists_taskstates_id)) {\n               if ($stateT->getFinishedState()) {\n                  $finished_style = 'style=\"display: none;\"';\n                  $finished       = 1;\n               }\n            }\n            $task = new PluginTasklistsTask();\n            if ($task->checkVisibility($data['id']) == true) {\n               $duedate = '';\n               if (!empty($data['due_date'])) {\n                  $duedate = __('Due date', 'tasklists') . \" \" . Html::convDate($data['due_date']);\n               }\n               $actiontime = '';\n               if ($data['actiontime'] != 0) {\n                  $actiontime = Html::timestampToString($data['actiontime'], false, true);\n               }\n               $archived = $data['is_archived'];\n\n               if (isset($data['users_id'])\n                   && $data['users_id'] != Session::getLoginUserID()) {\n                  $finished_style = 'style=\"display: none;\"';\n               }\n\n               $right = 0;\n               if (($data['users_id'] == Session::getLoginUserID()\n                    && Session::haveRight(\"plugin_tasklists\", UPDATE))\n                   || Session::haveRight(\"plugin_tasklists_see_all\", 1)) {\n                  $right = 1;\n               }\n\n               if ($data['users_id'] == 0) {\n                  $right          = 1;\n                  $finished_style = 'style=\"display: inline;\"';\n               }\n\n               $entity      = new Entity();\n               $entity_name = __('None');\n               if ($entity->getFromDB($data['entities_id'])) {\n                  $entity_name = $entity->fields['name'];\n               }\n               $client = (empty($data['client'])) ? $entity_name : $data['client'];\n\n               //               $comment = Glpi\\Toolbox\\Sanitizer::unsanitize($data[\"content\"]);\n\n               // Core content\n               $content      = \"<div class='kanban-core-content'>\";\n               $content      .= \"<div class='flex-break'>\";\n               $bgcolor      = $_SESSION[\"glpipriority_\" . $data['priority']];\n               $content      .= __('Priority') . \"&nbsp;:&nbsp;<i class='fas fa-circle' style='color: $bgcolor'></i>&nbsp;\" . CommonITILObject::getPriorityName($data['priority']);\n               $content      .= \"</div>\";\n               $rich_content = \"\";\n               if ($data['content'] != null) {\n                  $rich_content = Glpi\\RichText\\RichText::getTextFromHtml($data['content'], false, true);\n               }\n               $content .= Html::resume_text($rich_content, 100);\n               $content .= \"</div>\";\n               $content .= \"<div align='right' class='endfooter b'>\" . $client . \"</div>\";\n               $content .= \"<div align='right' class='endfooter'>\" . $actiontime . \"</div>\";\n               $content .= \"<div align='right' class='endfooter'>\" . $duedate . \"</div>\";\n               // Percent Done\n               $content    .= \"<div class='flex-break'></div>\";\n               $content    .= Html::progress(100, $data['percent_done']);\n               $content    .= \"</div>\";\n               $content    .= \"<div align='right' class='endfooter'>\" . $data['percent_done'] . \"%</div>\";\n               $nbcomments = \"\";\n               $nb         = 0;\n               $where      = [\n                  'plugin_tasklists_tasks_id' => $data['id'],\n                  'language'                  => null\n               ];\n               $nb         = countElementsInTable(\n                  'glpi_plugin_tasklists_tasks_comments',\n                  $where\n               );\n               if ($nb > 0) {\n                  $nbcomments = \" (\" . $nb . \") \";\n               }\n\n               $itemtype        = \"PluginTasklistsTask\";\n               $meta            = [];\n               $metadata_values = ['name', 'content'];\n               foreach ($metadata_values as $metadata_value) {\n                  if (isset($data[$metadata_value])) {\n                     $meta[$metadata_value] = $data[$metadata_value];\n                  }\n               }\n               //               if (isset($meta['_metadata']['content']) && is_string($meta['_metadata']['content'])) {\n               //                  $meta['_metadata']['content'] = Glpi\\RichText\\RichText::getTextFromHtml($tasks['_metadata']['content'], false, true);\n               //               } else {\n               //                  $meta['_metadata']['content'] = '';\n               //               }\n\n               // Create a fake item to get just the actors without loading all other information about items.\n               //               $temp_item = new PluginTasklistsTask();\n               //               $temp_item->fields['id'] = $data['id'];\n               //               $temp_item->loadActors();\n\n               // Build team member data\n               $supported_teamtypes = [\n                  //                  'User' => ['id', 'firstname', 'realname'],\n                  //                  'Group' => ['id', 'name'],\n                  //                  'Supplier' => ['id', 'name'],\n               ];\n               //               $members = [\n               //                  'User'      => $temp_item->fields['users_id'],\n               //                  'Group'     => $temp_item->fields['groups_id'],\n               //                  'Supplier'   => $temp_item->getSuppliers(CommonITILActor::ASSIGN),\n               //               ];\n               $team = [];\n               //               foreach ($supported_teamtypes as $itemtype => $fields) {\n               //                  $fields[] = 'id';\n               //                  $fields[] = new QueryExpression($DB->quoteValue($itemtype) . ' AS ' . $DB->quoteName('itemtype'));\n               //\n               //                  $member_ids = array_map(static function ($e) use ($itemtype) {\n               //                     return $e[$itemtype::getForeignKeyField()];\n               //                  }, $members[$itemtype]);\n               //                  if (count($member_ids)) {\n               //                     $itemtable = $itemtype::getTable();\n               //                     $all_items = $DB->request([\n               //                                                  'SELECT'    => $fields,\n               //                                                  'FROM'      => $itemtable,\n               //                                                  'WHERE'     => [\n               //                                                     \"{$itemtable}.id\"   => $member_ids\n               //                                                  ]\n               ////                                               ]);\n               //               $team = [];\n               //                  $all_items[] = ['itemtype' => 'User', 'items_id'=> $data['users_id']];\n               //                  $all_items[] = ['itemtype' => 'Group', 'items_id'=> $data['groups_id']];\n               ////                     $all_members = [];\n               //                     foreach ($all_items as $k => $member_data) {\n               //                        $member_data['itemtype'] = $member_data['itemtype'];\n               //                        $member_data['id'] = $member_data['items_id'];\n               //                        $member_data['role'] = 2;\n               ////                        if ($member_data['itemtype'] === User::class) {\n               ////                           $member_data['name'] = formatUserName(\n               ////                              $member_data['id'],\n               ////                              '',\n               ////                              $member_data['realname'],\n               ////                              $member_data['firstname']\n               ////                           );\n               ////                        }\n               //                        $team[] = $member_data;\n               //                     }\n               ////                  }\n               ////               }\n               //               Toolbox::logInfo($team);\n               $task->getFromDB($data['id']);\n               $team = $task->getTeam();\n\n               if (isset($stateT->fields['color']) && $stateT->fields['color'] != null) {\n                  $bgcolor = self::getFgColor($stateT->fields['color'], 1);\n               } else {\n                  $bgcolor = \"#FFF\";\n               }\n\n               $rich_content = \"\";\n               if ($data['content'] != null) {\n                  $rich_content = Glpi\\RichText\\RichText::getTextFromHtml($data['content'], false, true);\n               }\n\n               $title = Html::link($data['name'], $itemtype::getFormURLWithID($data['id'])) . $nbcomments;\n               //               $ID    = $data['id'];\n               //               if ($finished == 1 && $archived == 0) {\n               //                  $title .= \"&nbsp;<a id='archivetask$ID' href='#' title='\" . __('Archive this task', 'tasklists') . \"'><i class='ti ti-archive'></i></a>\";\n               //               }\n               //               if ($finished == 1 && $data['priority'] < 5) {\n               //                  $title .= \"&nbsp;<a id='updatepriority$ID' href='#' title='\" . __('Update priority of task', 'tasklists') . \"'><i class='ti ti-arrow-up'></i></a>\";\n               //               }\n\n               $tasks[] = ['id'            => \"{$itemtype}-{$data['id']}\",\n                           'title'         => $title,\n                           'title_tooltip' => Html::resume_text($rich_content, 100),\n                           'is_deleted'    => $data['is_deleted'] ?? false,\n                           'content'       => $content,\n                           '_team'         => $team,\n                           '_form_link'    => $itemtype::getFormUrlWithID($data['id']),\n\n                           'block'          => ($ID > 0 ? $ID : 0),\n                           'priority'       => CommonITILObject::getPriorityName($data['priority']),\n                           'priority_id'    => $data['priority'],\n                           'bgcolor'        => $bgcolor,\n                           'percent'        => $data['percent_done'],\n                           'actiontime'     => $actiontime,\n                           'duedate'        => $duedate,\n                           //                           'user'           => $link,\n                           'client'         => $client,\n                           'finished'       => $finished,\n                           'archived'       => $archived,\n                           'finished_style' => $finished_style,\n                           'right'          => $right,\n                           'users_id'       => $data['users_id'],\n                           '_readonly'      => false,\n                           '_metadata'      => $meta\n               ];\n            }\n         }\n         $selected_state[\"items\"] = $tasks;\n         $nstates[$state[\"id\"]]   = $selected_state;\n      }\n\n      return $nstates;\n\n   }\n\n   public static function getFgColor(string $color = \"\", int $offset = 40, bool $inherit_if_transparent = false): string {\n      $fg_color = \"FFFFFF\";\n      if ($color !== \"\") {\n         $color = str_replace(\"#\", \"\", $color);\n\n         // if transparency present, get only the color part\n         if (strlen($color) === 8 && preg_match('/^[a-fA-F0-9]+$/', $color)) {\n            $tmp   = $color;\n            $alpha = hexdec(substr($tmp, 6, 2));\n            $color = substr($color, 0, 6);\n\n            if ($alpha <= 100) {\n               return \"inherit\";\n            }\n         }\n\n         $color_inst = new Mexitek\\PHPColors\\Color($color);\n\n         // adapt luminance part\n         //         if ($color_inst->isLight()) {\n         //            $hsl = Color::hexToHsl($color);\n         //            $hsl['L'] = max(0, $hsl['L'] - ($offset / 100));\n         //            $fg_color = Color::hslToHex($hsl);\n         //         } else {\n         $hsl      = Mexitek\\PHPColors\\Color::hexToHsl($color);\n         $hsl['L'] = ($hsl['L'] * 110) + 5;\n         $hsl['L'] = ($hsl['L'] > 110) ? $hsl['L'] / 50 : $hsl['L'] / 90;\n         $fg_color = Mexitek\\PHPColors\\Color::hslToHex($hsl);\n         //         }\n      }\n\n      return \"#\" . $fg_color;\n   }\n\n   /**\n    * @param $plugin_tasklists_tasktypes_id\n    *\n    * @return array\n    */\n   static function findUsers($plugin_tasklists_tasktypes_id) {\n      $dbu   = new DbUtils();\n      $users = [];\n      $task  = new PluginTasklistsTask();\n      $tasks = $task->find([\"plugin_tasklists_tasktypes_id\" => $plugin_tasklists_tasktypes_id, \"is_archived\" => 0, \"is_deleted\" => 0]);\n      foreach ($tasks as $t) {\n         $users[$t[\"users_id\"]] = $dbu->getUserName($t[\"users_id\"]);\n      }\n      $users     = array_unique($users);\n      $users[-1] = __(\"All\");\n\n\n      return $users;\n   }\n\n   /**\n    * Have I the global right to \"create\" the Object\n    * May be overloaded if needed (ex KnowbaseItem)\n    *\n    * @return boolean\n    **/\n   static function canCreate() {\n      if (static::$rightname) {\n         return Session::haveRight(static::$rightname, 1);\n      }\n      return false;\n   }\n\n   static function canUpdate() {\n      if (static::$rightname) {\n         return Session::haveRight(static::$rightname, 1);\n      }\n      return false;\n   }\n\n   static function canDelete() {\n      if (static::$rightname) {\n         return Session::haveRight(static::$rightname, 1);\n      }\n      return false;\n   }\n\n   public static function getDataToDisplayOnKanban($ID, $criteria = []) {\n      // Not needed\n   }\n\n   public static function showKanban($ID) {\n      // Not needed\n   }\n\n   public static function getAllKanbanColumns($column_field = null, $column_ids = [], $get_default = false) {\n\n      if ($column_field === null || $column_field === 'plugin_tasklists_taskstates_id') {\n         $columns  = ['plugin_tasklists_taskstates_id' => []];\n         $restrict = [];\n         //         if (!empty($column_ids) && !$get_default) {\n         //            $restrict = ['id' => $column_ids];\n         //         }\n\n         $Taskstate    = new PluginTasklistsTaskState();\n         $all_statuses = $Taskstate->find($restrict, ['is_finished ASC', 'id']);\n\n         $columns['plugin_tasklists_taskstates_id'][0] = [\n            //            'id'        => 0,\n            'name'            => __('Backlog', 'tasklists'),\n            'header_color'    => \"#CCC\",\n            'header_fg_color' => Toolbox::getFgColor(\"#CCC\", 50),\n            'drop_only'       => 0\n         ];\n\n         foreach ($all_statuses as $status) {\n\n            $columns['plugin_tasklists_taskstates_id'][$status['id']] = [\n               'name'            => $status['name'],\n               'header_color'    => $status['color'],\n               'header_fg_color' => Toolbox::getFgColor($status['color'], 50),\n               'drop_only'       => 0,//$status['is_finished'] ??\n            ];\n         }\n\n         return $columns['plugin_tasklists_taskstates_id'];\n      } else {\n         return [];\n      }\n   }\n\n   //   public static function getGlobalKanbanUrl(bool $full = true): string\n   //   {\n   //      if (method_exists(static::class, 'getFormUrl')) {\n   //         return static::getFormURL($full) . '?showglobalkanban=1';\n   //      }\n   //      //      $kb = new PluginTasklistsKanban();\n   //      //      echo $kb->getSearchURL() . '?context_id=' . $_REQUEST['items_id'];\n   //      //\n   //      return '';\n   //   }\n\n   public function getKanbanUrlWithID(int $items_id, bool $full = true): string {\n      $kb = new PluginTasklistsKanban();\n      return $kb->getSearchURL() . '?context_id=' . $items_id;\n\n   }\n}\n", "<?php\n/*\n * @version $Id: HEADER 15930 2011-10-30 15:47:55Z tsmr $\n -------------------------------------------------------------------------\n Tasklists plugin for GLPI\n Copyright (C) 2003-2016 by the Tasklists Development Team.\n\n https://github.com/InfotelGLPI/tasklists\n -------------------------------------------------------------------------\n\n LICENSE\n\n This file is part of Tasklists.\n\n Tasklists is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2 of the License, or\n (at your option) any later version.\n\n Tasklists is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Tasklists. If not, see <http://www.gnu.org/licenses/>.\n --------------------------------------------------------------------------\n */\n\ndefine('PLUGIN_TASKLISTS_VERSION', '2.0.2');\n\nif (!defined(\"PLUGIN_TASKLISTS_DIR\")) {\n   define(\"PLUGIN_TASKLISTS_DIR\", Plugin::getPhpDir(\"tasklists\"));\n   define(\"PLUGIN_TASKLISTS_NOTFULL_DIR\", Plugin::getPhpDir(\"tasklists\",false));\n   define(\"PLUGIN_TASKLISTS_WEBDIR\", Plugin::getWebDir(\"tasklists\"));\n}\n\n// Init the hooks of the plugins -Needed\nfunction plugin_init_tasklists() {\n   global $PLUGIN_HOOKS, $CFG_GLPI;\n\n   $PLUGIN_HOOKS['csrf_compliant']['tasklists'] = true;\n   $PLUGIN_HOOKS['change_profile']['tasklists'] = ['PluginTasklistsProfile', 'initProfile'];\n   $PLUGIN_HOOKS['use_rules']['tasklists'] = ['RuleMailCollector'];\n\n   if (Session::getLoginUserID()) {\n\n      Plugin::registerClass('PluginTasklistsTask', [\n//         'linkuser_types'              => true,\n//         'linkgroup_types'             => true,\n         'document_types'              => true,\n         'notificationtemplates_types' => true\n      ]);\n\n      Plugin::registerClass('PluginTasklistsTicket',\n                            ['addtabon' => 'Ticket']);\n\n      $PLUGIN_HOOKS['item_purge']['tasklists']['Ticket'] = ['PluginTasklistsTaskTicket', 'cleanForTicket'];\n\n      Plugin::registerClass('PluginTasklistsProfile',\n                            ['addtabon' => 'Profile']);\n\n      Plugin::registerClass('PluginTasklistsPreference',\n                            ['addtabon' => 'Preference']);\n\n      if (Session::haveRight(\"plugin_tasklists\", READ)) {\n         $PLUGIN_HOOKS['menu_toadd']['tasklists'] = ['helpdesk' => 'PluginTasklistsMenu'];\n      }\n\n      if (class_exists('PluginMydashboardMenu')) {\n         $PLUGIN_HOOKS['mydashboard']['tasklists'] = [\"PluginTasklistsDashboard\"];\n      }\n\n      if (Session::haveRight(\"plugin_tasklists\", CREATE)) {\n         $PLUGIN_HOOKS['use_massive_action']['tasklists'] = 1;\n      }\n      // require spectrum (for glpi >= 9.2)\n//      $CFG_GLPI['javascript']['config']['commondropdown']['PluginTasklistsTaskState'] = ['colorpicker'];\n      $PLUGIN_HOOKS['javascript']['tasklists'][]                                      = PLUGIN_TASKLISTS_NOTFULL_DIR.\"/lib/redips/redips-drag-min.js\";\n      $PLUGIN_HOOKS['javascript']['tasklists'][]                                      = PLUGIN_TASKLISTS_NOTFULL_DIR.\"/scripts/plugin_tasklists_drag-field-row.js\";\n//      $PLUGIN_HOOKS['javascript']['tasklists'][]                                      = PLUGIN_TASKLISTS_NOTFULL_DIR.\"/lib/kanban/js/kanban.js\";\n//      $CFG_GLPI['javascript']['helpdesk']['plugintasklistsmenu']                      = ['colorpicker'];\n\n\n   }\n}\n\n// Get the name and the version of the plugin - Needed\n/**\n * @return array\n */\nfunction plugin_version_tasklists() {\n\n   return [\n      'name'         => __('Tasks list', 'tasklists'),\n      'version'      => PLUGIN_TASKLISTS_VERSION,\n      'license'      => 'GPLv2+',\n      'author'       => \"<a href='http://blogglpi.infotel.com'>Infotel</a>\",\n      'homepage'     => 'https://github.com/InfotelGLPI/tasklists',\n      'requirements' => [\n         'glpi' => [\n            'min' => '10.0',\n            'max' => '11.0',\n            'dev' => false\n         ]\n      ]\n   ];\n\n}\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n    <name>Tasks List (Kanban)</name>\n    <key>tasklists</key>\n    <state>stable</state>\n    <logo>https://raw.githubusercontent.com/InfotelGLPI/tasklists/master/tasklists.png</logo>\n    <description>\n        <short>\n            <fr><![CDATA[Ajout d'une gestion de t\u00e2ches & kanban. Ce plugin permet d'ajouter dans GLPI, une interface pour saisir des t\u00e2ches simples et de les g\u00e9rer dans un kanban.]]></fr>\n            <en><![CDATA[Adding a management of tasks & kanban. This plugin adds in GLPI, an interface to input simple tasks & manage them in a kanban.]]></en>\n            <cs><![CDATA[P\u0159id\u00e1n\u00ed spr\u00e1vy jednoduch\u00fdch \u00fakol\u016f. Tento z\u00e1suvn\u00fd modul do GLPI p\u0159id\u00e1 rozhran\u00ed pro zad\u00e1v\u00e1n\u00ed jednoduch\u00fdch \u00fakol\u016f.]]></cs>\n        </short>\n        <long>\n            <fr><![CDATA[Ce plugin permet d'ajouter dans GLPI, une interface pour saisir des t\u00e2ches simples et de les g\u00e9rer dans un kanban.<br />- Ajout de commentaires sur les t\u00e2ches.<br />- Lien avec les tickets.<br />- Utilisation de gabarits<br />- Gestion des t\u00e2ches archiv\u00e9es.<br />- Ajout de notes possibles sur les t\u00e2ches.<br />- Peut \u00eatre utilis\u00e9 avec le collecteur de mail pour cr\u00e9er des t\u00e2ches.<br />- Peut \u00eatre utilis\u00e9 avec le plugin mydashboard d'Infotel.]]></fr>\n            <en><![CDATA[This plugin adds in GLPI, an interface to input simple tasks & manage them in a kanban.<br />- Can add comments on tasks.<br />- Link with tickets.<br />- Can use templates.<br />- Manage archived tasks.<br />- Can add notes on tasks.<br />- Can be used with mail collector to create tasks.<br />- Can be used with mydashboard plugin of Infotel]]></en>\n            <cs><![CDATA[Tento z\u00e1suvn\u00fd modul do GLPI p\u0159id\u00e1 rozhran\u00ed pro zad\u00e1v\u00e1n\u00ed jednoduch\u00fdch \u00fakol\u016f.<br />- K \u00fakol\u016fm je mo\u017en\u00e9 p\u0159id\u00e1vat pozn\u00e1mky.<br />- Je mo\u017en\u00e9 pou\u017e\u00edt s p\u0159ivad\u011b\u010dem e-mail\u016f a vytv\u00e1\u0159et \u00fakoly skrze n\u011bj.<br />- Je mo\u017en\u00e9 pou\u017e\u00edt se z\u00e1suvn\u00fdm modulem Moje n\u00e1st\u011bnka]]></cs>\n        </long>\n    </description>\n    <homepage>https://github.com/InfotelGLPI/tasklists</homepage>\n    <download>https://github.com/InfotelGLPI/tasklists/releases</download>\n    <issues>https://github.com/InfotelGLPI/tasklists/issues</issues>\n    <readme>https://github.com/InfotelGLPI/tasklists/wiki</readme>\n    <authors>\n        <author>Xavier Caillaud</author>\n        <author>Infotel</author>\n    </authors>\n    <versions>\n        <version>\n            <num>2.0.2</num>\n            <compatibility>~10.0</compatibility>\n            <download_url>https://github.com/InfotelGLPI/tasklists/releases/download/2.0.2/glpi-tasklists-2.0.2.tar.bz2</download_url>\n        </version>\n        <version>\n            <num>2.0.1</num>\n            <compatibility>~10.0</compatibility>\n            <download_url>https://github.com/InfotelGLPI/tasklists/releases/download/2.0.1/glpi-tasklists-2.0.1.tar.bz2</download_url>\n        </version>\n        <version>\n            <num>2.0.0</num>\n            <compatibility>~10.0</compatibility>\n            <download_url>https://github.com/InfotelGLPI/tasklists/releases/download/2.0.0/glpi-tasklists-2.0.0.tar.bz2</download_url>\n        </version>\n        <version>\n            <num>2.0.0-rc2</num>\n            <compatibility>~10.0</compatibility>\n            <download_url>https://github.com/InfotelGLPI/tasklists/releases/download/2.0.0-rc2/glpi-tasklists-2.0.0-rc2.tar.bz2</download_url>\n        </version>\n        <version>\n           <num>2.0.0-rc1</num>\n           <compatibility>~10.0</compatibility>\n           <download_url>https://github.com/InfotelGLPI/tasklists/releases/download/2.0.0-rc1/glpi-tasklists-2.0.0-rc1.tar.bz2</download_url>\n       </version>\n        <version>\n            <num>1.6.2</num>\n            <compatibility>9.5</compatibility>\n        </version>\n        <version>\n            <num>1.6.1</num>\n            <compatibility>~9.5</compatibility>\n        </version>\n        <version>\n            <num>1.6.0</num>\n            <compatibility>~9.5</compatibility>\n            <!--<download_url>https://github.com/InfotelGLPI/tasklists/releases/download/1.6.0/glpi-tasklists-1.6.0.tar.gz</download_url>-->\n        </version>\n        <version>\n            <num>1.5.1</num>\n            <compatibility>9.4</compatibility>\n        </version>\n        <version>\n            <num>1.5.0</num>\n            <compatibility>9.4</compatibility>\n        </version>\n        <version>\n            <num>1.4.2</num>\n            <compatibility>9.3</compatibility>\n        </version>\n        <version>\n            <num>1.4.1</num>\n            <compatibility>9.3</compatibility>\n        </version>\n        <version>\n            <num>1.4.0</num>\n            <compatibility>9.3</compatibility>\n        </version>\n        <version>\n            <num>1.3.1</num>\n            <compatibility>9.3</compatibility>\n        </version>\n        <version>\n            <num>1.3.0</num>\n            <compatibility>9.3</compatibility>\n        </version>\n        <version>\n            <num>1.2.0</num>\n            <compatibility>9.2</compatibility>\n        </version>\n        <version>\n            <num>1.1.0</num>\n            <compatibility>9.1</compatibility>\n        </version>\n        <version>\n            <num>1.0.0</num>\n            <compatibility>0.90</compatibility>\n        </version>\n    </versions>\n    <langs>\n        <lang>fr_FR</lang>\n        <lang>en_GB</lang>\n        <lang>cs_CZ</lang>\n        <lang>fi_FI</lang>\n    </langs>\n    <license><![CDATA[GPL v2+]]></license>\n    <tags>\n        <fr>\n            <tag>Taches</tag>\n            <tag>Kanban</tag>\n        </fr>\n        <en>\n            <tag>Tasks</tag>\n            <tag>Kanban</tag>\n        </en>\n        <cs>\n            <tag>\u00dakoly</tag>\n        </cs>\n    </tags>\n    <screenshots>\n        <screenshot>https://raw.githubusercontent.com/InfotelGLPI/tasklists/master/screenshots/kanban.png</screenshot>\n        <screenshot>https://raw.githubusercontent.com/InfotelGLPI/tasklists/master/screenshots/addTask.png</screenshot>\n        <screenshot> https://raw.githubusercontent.com/InfotelGLPI/tasklists/master/screenshots/Tasks%20list%20from%20Dashboard.png</screenshot>\n    </screenshots>\n</root>\n"], "fixing_code": ["<?php\n/*\n * @version $Id: HEADER 15930 2011-10-30 15:47:55Z tsmr $\n -------------------------------------------------------------------------\n Tasklists plugin for GLPI\n Copyright (C) 2003-2016 by the Tasklists Development Team.\n\n https://github.com/InfotelGLPI/tasklists\n -------------------------------------------------------------------------\n\n LICENSE\n\n This file is part of Tasklists.\n\n Tasklists is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2 of the License, or\n (at your option) any later version.\n\n Tasklists is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Tasklists. If not, see <http://www.gnu.org/licenses/>.\n --------------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access directly to this file\");\n}\n\nuse Glpi\\Plugin\\Hooks;\n\n/**\n * Class PluginTasklistsTask\n */\nclass PluginTasklistsTask extends CommonDBTM {\n   use Glpi\\Features\\Clonable;\n   use Glpi\\Features\\Teamwork;\n   //Needed for save cards\n   use Glpi\\Features\\Kanban;\n\n   public    $dohistory  = true;\n   static    $rightname  = 'plugin_tasklists';\n   protected $usenotepad = true;\n   static    $types      = [];\n\n   /**\n    * @param int $nb\n    *\n    * @return translated\n    */\n   static function getTypeName($nb = 0) {\n\n      return _n('Task', 'Tasks', $nb);\n   }\n\n\n   /**\n    * @return string\n    */\n   static function getIcon() {\n      return \"ti ti-layout-kanban\";\n   }\n\n   /**\n    * @return array\n    */\n   function rawSearchOptions() {\n\n      $tab = [];\n\n      $tab[] = [\n         'id'   => 'common',\n         'name' => self::getTypeName(2)\n      ];\n\n      $tab[] = [\n         'id'            => '1',\n         'table'         => $this->getTable(),\n         'field'         => 'name',\n         'name'          => __('Name'),\n         'datatype'      => 'itemlink',\n         'itemlink_type' => $this->getType()\n      ];\n\n      $tab[] = [\n         'id'       => '2',\n         'table'    => 'glpi_plugin_tasklists_tasktypes',\n         'field'    => 'name',\n         'name'     => _n('Context', 'Contexts', 1, 'tasklists'),\n         'datatype' => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'        => '3',\n         'table'     => 'glpi_users',\n         'field'     => 'name',\n         'linkfield' => 'users_id',\n         'name'      => __('User'),\n         'datatype'  => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'            => '4',\n         'table'         => $this->getTable(),\n         'field'         => 'actiontime',\n         'name'          => __('Planned duration'),\n         'datatype'      => 'timestamp',\n         'massiveaction' => false\n      ];\n\n      $tab[] = [\n         'id'       => '5',\n         'table'    => $this->getTable(),\n         'field'    => 'percent_done',\n         'name'     => __('Percent done'),\n         'datatype' => 'number',\n         'unit'     => '%',\n         'min'      => 0,\n         'max'      => 100,\n         'step'     => 5\n      ];\n\n      $tab[] = [\n         'id'       => '6',\n         'table'    => $this->getTable(),\n         'field'    => 'due_date',\n         'name'     => __('Due date', 'tasklists'),\n         'datatype' => 'date'\n      ];\n\n      $tab[] = [\n         'id'       => '7',\n         'table'    => $this->getTable(),\n         'field'    => 'content',\n         'name'     => __('Description'),\n         'datatype' => 'text'\n      ];\n\n      $tab[] = [\n         'id'         => '8',\n         'table'      => $this->getTable(),\n         'field'      => 'priority',\n         'name'       => __('Priority'),\n         'searchtype' => 'equals',\n         'datatype'   => 'specific'\n      ];\n\n      $tab[] = [\n         'id'            => '9',\n         'table'         => $this->getTable(),\n         'field'         => 'visibility',\n         'name'          => __('Visibility'),\n         'searchtype'    => 'equals',\n         'datatype'      => 'specific',\n         'massiveaction' => false\n      ];\n\n      $tab[] = [\n         'id'        => '10',\n         'table'     => 'glpi_groups',\n         'field'     => 'name',\n         'linkfield' => 'groups_id',\n         'name'      => __('Group'),\n         'condition' => '`is_usergroup`',\n         'datatype'  => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'         => '11',\n         'table'      => $this->getTable(),\n         'field'      => 'plugin_tasklists_taskstates_id',\n         'name'       => __('Status'),\n         'searchtype' => ['equals', 'notequals'],\n         'datatype'   => 'specific'\n      ];\n\n      $tab[] = [\n         'id'            => '12',\n         'table'         => $this->getTable(),\n         'field'         => 'date_mod',\n         'massiveaction' => false,\n         'name'          => __('Last update'),\n         'datatype'      => 'datetime'\n      ];\n\n      $tab[] = [\n         'id'       => '13',\n         'table'    => $this->getTable(),\n         'field'    => 'is_archived',\n         'name'     => __('Archived', 'tasklists'),\n         'datatype' => 'bool'\n      ];\n\n      $tab[] = [\n         'id'       => '14',\n         'table'    => $this->getTable(),\n         'field'    => 'client',\n         'name'     => __('Other client', 'tasklists'),\n         'datatype' => 'text'\n      ];\n\n      $tab[] = [\n         'id'            => '121',\n         'table'         => $this->getTable(),\n         'field'         => 'date_creation',\n         'name'          => __('Creation date'),\n         'datatype'      => 'datetime',\n         'massiveaction' => false\n      ];\n\n      $tab[] = [\n         'id'       => '18',\n         'table'    => $this->getTable(),\n         'field'    => 'is_recursive',\n         'name'     => __('Child entities'),\n         'datatype' => 'bool'\n      ];\n\n      $tab[] = [\n         'id'       => '30',\n         'table'    => $this->getTable(),\n         'field'    => 'id',\n         'name'     => __('ID'),\n         'datatype' => 'number'\n      ];\n\n      $tab[] = [\n         'id'       => '80',\n         'table'    => 'glpi_entities',\n         'field'    => 'completename',\n         'name'     => __('Entity'),\n         'datatype' => 'dropdown'\n      ];\n      $tab[] = [\n         'id'        => '81',\n         'table'     => 'glpi_users',\n         'field'     => 'name',\n         'linkfield' => 'users_id_requester',\n         'name'      => _n('Requester', 'Requesters', 1),\n         'datatype'  => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '19',\n         'table'              => 'glpi_plugin_tasklists_tasks_comments',\n         'field'              => 'id',\n         'name'               => _x('quantity', 'Number of comments', 'tasklists'),\n         'forcegroupby'       => true,\n         'usehaving'          => true,\n         'datatype'           => 'count',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'jointype'           => 'child'\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '20',\n         'table'              => 'glpi_plugin_tasklists_tickets',\n         'field'              => 'id',\n         'name'               => __('Number of tickets'),\n         'forcegroupby'       => true,\n         'usehaving'          => true,\n         'datatype'           => 'count',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'jointype'           => 'child'\n         ]\n      ];\n\n      return $tab;\n   }\n\n   /**\n    * @param array $options\n    *\n    * @return array\n    */\n   function defineTabs($options = []) {\n\n      $ong = [];\n      $this->addDefaultFormTab($ong);\n      $this->addStandardTab('Document_Item', $ong, $options);\n      if (!isset($options['withtemplate']) || empty($options['withtemplate'])) {\n         $this->addStandardTab('PluginTasklistsTask_Comment', $ong, $options);\n         $this->addStandardTab('PluginTasklistsTicket', $ong, $options);\n      }\n      $this->addStandardTab('Notepad', $ong, $options);\n      $this->addStandardTab('Log', $ong, $options);\n\n      return $ong;\n   }\n\n   /**\n    *\n    */\n   function post_getEmpty() {\n\n      $this->fields['priority']     = 3;\n      $this->fields['percent_done'] = 0;\n      $this->fields['visibility']   = 2;\n   }\n\n\n   public function getCloneRelations(): array {\n      return [\n         Document_Item::class,\n         Notepad::class\n      ];\n   }\n\n   /**\n    * @see CommonDBTM::cleanDBonPurge()\n    *\n    * @since 0.83.1\n    **/\n   function cleanDBonPurge() {\n\n      /// PluginTasklistsTask_Comment does not extends CommonDBConnexity\n      $kbic = new PluginTasklistsTask_Comment();\n      $kbic->deleteByCriteria(['plugin_tasklists_tasks_id' => $this->fields['id']]);\n   }\n\n   /**\n    * @param datas $input\n    *\n    * @return datas\n    */\n   function prepareInputForAdd($input) {\n\n\n      if (isset($input['due_date']) && empty($input['due_date'])) {\n         $input['due_date'] = 'NULL';\n      }\n       if (isset($input['content'])) {\n        $input['content'] = Glpi\\RichText\\RichText::getSafeHtml($input['content'], true);\n       }\n\n      if (isset($input[\"id\"]) && ($input[\"id\"] > 0)) {\n         $input[\"_oldID\"] = $input[\"id\"];\n      }\n      unset($input['id']);\n\n      return $input;\n   }\n\n   function post_addItem() {\n      global $CFG_GLPI;\n\n      if (!(isset($this->input['withtemplate'])\n      || (isset($this->input['withtemplate'])\n          && $this->input[\"withtemplate\"] != 1))\n      ) {\n         if ($CFG_GLPI[\"notifications_mailing\"]) {\n            NotificationEvent::raiseEvent(\"newtask\", $this);\n         }\n      }\n   }\n\n   /**\n    * @param datas $input\n    *\n    * @return datas\n    */\n   function prepareInputForUpdate($input) {\n\n      if (isset($input['due_date']) && empty($input['due_date'])) {\n         $input['due_date'] = 'NULL';\n      }\n      if (isset($input['plugin_tasklists_taskstates_id'])) {\n         $state = new PluginTasklistsTaskState();\n         if ($state->getFromDB($input['plugin_tasklists_taskstates_id'])) {\n            if ($state->getFinishedState()) {\n               $input['percent_done'] = 100;\n            }\n         }\n      }\n      if (isset($input['is_archived'])\n          && $input['is_archived'] == 1) {\n         $state = new PluginTasklistsTaskState();\n         if ($state->getFromDB($this->fields['plugin_tasklists_taskstates_id'])) {\n            if (!$state->getFinishedState()) {\n               Session::addMessageAfterRedirect(__('You cannot archive a task with this state', 'tasklists'), false, ERROR);\n               return false;\n            }\n         }\n      }\n      return $input;\n   }\n\n   /**\n    * Actions done after the UPDATE of the item in the database\n    *\n    * @param int $history store changes history ? (default 1)\n    *\n    * @return void\n    */\n   function post_updateItem($history = 1) {\n      global $CFG_GLPI;\n\n       if ($CFG_GLPI[\"notifications_mailing\"]) {\n           NotificationEvent::raiseEvent(\"updatetask\", $this);\n       }\n   }\n\n\n   /**\n    * Actions done before the DELETE of the item in the database /\n    * Maybe used to add another check for deletion\n    *\n    * @return bool : true if item need to be deleted else false\n    **/\n   function pre_deleteItem() {\n      global $CFG_GLPI;\n\n      if ($CFG_GLPI[\"notifications_mailing\"]\n          && !(isset($this->input['withtemplate'])\n               || (isset($this->input['withtemplate'])\n                   && $this->input[\"withtemplate\"] != 1))\n          && isset($this->input['_delete'])\n      ) {\n         NotificationEvent::raiseEvent(\"deletetask\", $this);\n      }\n\n      return true;\n   }\n\n\n   /**\n    * @param       $ID\n    * @param array $options\n    *\n    * @return bool\n    */\n   function showForm($ID, $options = []) {\n      global $CFG_GLPI;\n\n      Html::initEditorSystem('comment');\n\n      $this->initForm($ID, $options);\n      $this->showFormHeader($options);\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo Html::hidden('id', ['value' => $ID]);\n      echo \"<td>\" . __('Name') . \"</td>\";\n      echo \"<td>\";\n      echo Html::input('name', ['value' => $this->fields['name'], 'size' => 40]);\n//      if (isset($options['from_edit_ajax'])\n//          && $options['from_edit_ajax']) {\n//         echo Html::hidden('from_edit_ajax', ['value' => $options['from_edit_ajax']]);\n//      }\n//      if (isset($options['withtemplate']) && empty($options['withtemplate'])) {\n//         $options['withtemplate'] = 0;\n//      }\n//      echo Html::hidden('withtemplate', ['value' => $options['withtemplate']]);\n      echo \"</td>\";\n\n      $plugin_tasklists_tasktypes_id = $this->fields[\"plugin_tasklists_tasktypes_id\"];\n      if (isset($options['plugin_tasklists_tasktypes_id'])\n          && $options['plugin_tasklists_tasktypes_id']) {\n         $plugin_tasklists_tasktypes_id = $options['plugin_tasklists_tasktypes_id'];\n      }\n      echo \"<td>\" . _n('Context', 'Contexts', 1, 'tasklists') . \"</td><td>\";\n      $types     = PluginTasklistsTypeVisibility::seeAllowedTypes();\n      $rand_type = Dropdown::show('PluginTasklistsTaskType', ['name'      => \"plugin_tasklists_tasktypes_id\",\n                                                              'value'     => $plugin_tasklists_tasktypes_id,\n                                                              'entity'    => $this->fields[\"entities_id\"],\n                                                              'condition' => ['id' => $types],\n                                                              'on_change' => \"plugin_tasklists_load_states();\",]);\n      echo \"</td>\";\n      echo \"</tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n\n      echo \"<td>\" . __('Priority') . \"</td>\";\n      echo \"<td>\";\n      $priority = $this->fields['priority'];\n      if (isset($options['priority'])\n          && $options['priority']) {\n         $priority = $options['priority'];\n      }\n      CommonITILObject::dropdownPriority(['value'     => $priority,\n                                          'withmajor' => 1]);\n      echo \"</td>\";\n\n      echo \"<td>\" . __('Planned duration') . \"</td>\";\n      echo \"<td>\";\n      Dropdown::showTimeStamp(\"actiontime\", ['min'   => HOUR_TIMESTAMP * 2,\n                                             'max'   => MONTH_TIMESTAMP * 2,\n                                             'step'  => HOUR_TIMESTAMP * 2,\n                                             'value' => $this->fields[\"actiontime\"]]);\n      echo \"</td>\";\n\n      echo \"</tr>\";\n\n      if (isset($_SESSION[\"glpiactiveentities\"])\n          && count($_SESSION[\"glpiactiveentities\"]) > 1\n          && ($ID == 0 || (isset($options['withtemplate']) && ($options['withtemplate'] == 2)))) {\n\n         echo \"<tr class='tab_bg_1'>\";\n\n         echo \"<td>\" . __('Existing client', 'tasklists') . \"</td>\";\n         echo \"<td>\";\n         $entities_id = $this->fields['entities_id'];\n         if (isset($options['entities_id'])\n             && $options['entities_id']) {\n            $entities_id = $options['entities_id'];\n         }\n         $rand_entity = Dropdown::show('Entity', ['name'         => \"entities_id\",\n                                                  'value'        => $entities_id,\n                                                  'entity'       => $_SESSION[\"glpiactiveentities\"],\n                                                  'is_recursive' => true,\n                                                  'on_change'    => \"plugin_tasklists_load_entities();\",]);\n         echo \"</td>\";\n\n         echo \"<td colspan='2' id='plugin_tasklists_entity'>\";\n         $JS     = \"function plugin_tasklists_load_entities(){\";\n         $params = ['entities_id' => '__VALUE__',\n                    'entity'      => $this->fields[\"entities_id\"]];\n         $JS     .= Ajax::updateItemJsCode(\"plugin_tasklists_entity\",\n                                           PLUGIN_TASKLISTS_WEBDIR . \"/ajax/inputEntity.php\",\n                                           $params, 'dropdown_entities_id' . $rand_entity, false);\n         $JS     .= \"}\";\n         echo Html::scriptBlock($JS);\n         echo \"</td>\";\n         echo \"</tr>\";\n      }\n\n      echo \"<tr class='tab_bg_1'>\";\n\n      echo \"<td>\" . __('Other client', 'tasklists') . \"</td>\";\n      echo \"<td>\";\n      $client = $this->fields['client'];\n      if (isset($options['client'])\n          && $options['client']) {\n         $client = $options['client'];\n      }\n      echo Html::input('client', ['value' => $client, 'size' => 40]);\n      echo \"</td>\";\n      echo \"<td>\" . __(\"Due date\", \"tasklists\") . \"</td>\";\n      echo \"<td>\";\n      Html::showDateField(\"due_date\", ['value' => $this->fields[\"due_date\"]]);\n      echo \"</td>\";\n      echo \"</tr>\";\n      echo \"<tr class='tab_bg_1'>\";\n\n      echo \"<td>\" . _n('Requester', 'Requesters', 1) . \"</td><td>\";\n      $users_id_requester = $this->fields['users_id_requester'];\n      if (isset($options['users_id_requester'])\n          && $options['users_id_requester']) {\n         $users_id_requester = $options['users_id_requester'];\n      }\n\n      User::dropdown(['name'   => \"users_id_requester\",\n                      'value'  => $users_id_requester,\n                      'entity' => $this->fields[\"entities_id\"],\n                      'right'  => 'all']);\n      echo \"</td>\";\n\n      echo \"<td></td>\";\n      echo \"<td>\";\n      echo \"</td>\";\n\n      echo \"</tr>\";\n      echo \"<tr class='tab_bg_1'>\";\n\n      echo \"<td>\" . __('Technician') . \"</td><td>\";\n      $users_id = $this->fields['users_id'];\n      if (isset($options['users_id'])\n          && $options['users_id']) {\n         $users_id = $options['users_id'];\n      }\n\n      User::dropdown(['name'   => \"users_id\",\n                      'value'  => $users_id,\n                      'entity' => $this->fields[\"entities_id\"],\n                      'right'  => 'all']);\n      echo \"</td>\";\n\n      echo \"<td>\" . __('Percent done') . \"</td>\";\n      echo \"<td>\";\n      Dropdown::showNumber(\"percent_done\", ['value' => $this->fields['percent_done'],\n                                            'min'   => 0,\n                                            'max'   => 100,\n                                            'step'  => 10,\n                                            'unit'  => '%']);\n      echo \"</td>\";\n\n      echo \"</tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n\n      echo \"<td>\" . __('Group') . \"</td>\";\n      echo \"<td>\";\n      $groups_id = $this->fields['groups_id'];\n      if (isset($options['groups_id'])\n          && $options['groups_id']) {\n         $groups_id = $options['groups_id'];\n      }\n      Dropdown::show('Group', ['name'      => \"groups_id\",\n                               'value'     => $groups_id,\n                               'entity'    => $this->fields[\"entities_id\"],\n                               'condition' => ['is_usergroup' => 1]\n      ]);\n      echo \"</td>\";\n\n      echo \"<td>\" . __('Status') . \"</td><td id='plugin_tasklists_state'>\";\n\n      $plugin_tasklists_taskstates_id = $this->fields[\"plugin_tasklists_taskstates_id\"];\n      if (isset($options['plugin_tasklists_taskstates_id'])\n          && $options['plugin_tasklists_taskstates_id']) {\n         $plugin_tasklists_taskstates_id = $options['plugin_tasklists_taskstates_id'];\n      }\n\n      if ($plugin_tasklists_tasktypes_id) {\n         self::displayState($plugin_tasklists_tasktypes_id, $plugin_tasklists_taskstates_id);\n      }\n      $JS     = \"function plugin_tasklists_load_states(){\";\n      $params = ['plugin_tasklists_tasktypes_id' => '__VALUE__',\n                 'entity'                        => $this->fields[\"entities_id\"]];\n      $JS     .= Ajax::updateItemJsCode(\"plugin_tasklists_state\",\n                                        PLUGIN_TASKLISTS_WEBDIR . \"/ajax/dropdownState.php\",\n                                        $params, 'dropdown_plugin_tasklists_tasktypes_id' . $rand_type, false);\n      $JS     .= \"}\";\n      echo Html::scriptBlock($JS);\n\n      echo \"</td>\";\n\n      echo \"</tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n\n      echo \"<td>\";\n      echo __('Description') . \"</td>\";\n      echo \"<td colspan = '3' class='center'>\";\n      $rand_text  = mt_rand();\n      $content_id = \"comment$rand_text\";\n      $cols       = 100;\n      $rows       = 15;\n      Html::textarea(['name'            => 'content',\n                      'value'           => $this->fields[\"content\"],\n                      'rand'            => $rand_text,\n                      'editor_id'       => $content_id,\n                      'enable_richtext' => true,\n                      'cols'            => $cols,\n                      'rows'            => $rows]);\n      echo \"</td>\";\n\n      echo \"</tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td>\" . __('Visibility') . \"</td>\";\n      echo \"<td>\";\n      $visibility = $this->fields['visibility'];\n      if (isset($options['visibility'])\n          && $options['visibility']) {\n         $visibility = $options['visibility'];\n      }\n      self::dropdownVisibility(['value' => $visibility]);\n      echo \"</td>\";\n\n      echo \"<td>\" . __('Archived', 'tasklists') . \"</td>\";\n      echo \"<td>\";\n      Dropdown::showYesNo(\"is_archived\", $this->fields[\"is_archived\"]);\n      echo \"</td>\";\n\n      echo \"</tr>\";\n\n      $this->showFormButtons($options);\n\n      return true;\n   }\n\n\n   /**\n    * States by type dropdown list\n    *\n    * @param     $plugin_tasklists_tasktypes_id\n    * @param int $plugin_tasklists_taskstates_id\n    */\n   static function displayState($plugin_tasklists_tasktypes_id, $plugin_tasklists_taskstates_id = 0) {\n\n\n      $states[]      = ['id'   => 0,\n                        'name' => __('Backlog', 'tasklists'),\n                        'rank' => 0];\n      $ranked        = [];\n      $states_ranked = [];\n      $dbu           = new DbUtils();\n      $datastates    = $dbu->getAllDataFromTable($dbu->getTableForItemType('PluginTasklistsTaskState'));\n      if (!empty($datastates)) {\n         foreach ($datastates as $datastate) {\n            $tasktypes = json_decode($datastate['tasktypes']);\n            if (is_array($tasktypes)) {\n               if (in_array($plugin_tasklists_tasktypes_id, $tasktypes)) {\n\n                  $condition = ['plugin_tasklists_taskstates_id' => $datastate['id'],\n                                'plugin_tasklists_tasktypes_id'  => $plugin_tasklists_tasktypes_id];\n                  $order     = new PluginTasklistsStateOrder();\n                  $ranks     = $order->find($condition);\n                  $ranking   = 0;\n                  if (count($ranks) > 0) {\n                     foreach ($ranks as $rank) {\n                        $ranking = $rank['ranking'];\n                     }\n                  }\n                  //                  $states[$datastate['id']] = $datastate['name'];\n                  if (empty($name = DropdownTranslation::getTranslatedValue($datastate['id'], 'PluginTasklistsTaskState', 'name', $_SESSION['glpilanguage']))) {\n                     $name = $datastate['name'];\n                  }\n                  $states[] = ['id'   => $datastate['id'],\n                               'name' => $name,\n                               'rank' => $ranking];\n\n\n                  foreach ($states as $key => $row) {\n                     $ranked[$key] = $row['rank'];\n                  }\n                  array_multisort($ranked, SORT_ASC, $states);\n               }\n            }\n         }\n      }\n      foreach ($states as $k => $v) {\n         $states_ranked[$v['id']] = $v['name'];\n      }\n      $rand = mt_rand();\n      Dropdown::showFromArray('plugin_tasklists_taskstates_id', $states_ranked, ['rand'    => $rand,\n                                                                                 'value'   => $plugin_tasklists_taskstates_id,\n                                                                                 'display' => true]);\n\n   }\n\n\n   /**\n    * Closed States for a task\n    *\n    * @param     $plugin_tasklists_tasks_id\n    */\n   static function getClosedStateForTask($plugin_tasklists_tasks_id) {\n\n      $task = new PluginTasklistsTask();\n      if ($task->getFromDB($plugin_tasklists_tasks_id)) {\n         $state      = $task->fields[\"plugin_tasklists_taskstates_id\"];\n         $dbu        = new DbUtils();\n         $condition  = [\"is_finished\" => 1];\n         $datastates = $dbu->getAllDataFromTable($dbu->getTableForItemType('PluginTasklistsTaskState'), $condition);\n         if (!empty($datastates)) {\n            foreach ($datastates as $datastate) {\n               $tasktypes = json_decode($datastate['tasktypes']);\n               if (is_array($tasktypes)) {\n                  if (in_array($task->fields[\"plugin_tasklists_tasktypes_id\"], $tasktypes)) {\n                     $state = $datastate['id'];\n                  }\n               }\n            }\n         }\n         return $state;\n      }\n   }\n\n   /**\n    * @param $value\n    *\n    * @return string\n    */\n   static function getStateName($value) {\n\n      switch ($value) {\n\n         case 0 :\n            return __('Backlog', 'tasklists');\n\n         default :\n            // Return $value if not define\n            return Dropdown::getDropdownName(\"glpi_plugin_tasklists_taskstates\", $value);\n\n      }\n   }\n\n   /**\n    * Make a select box for link tasklists\n    *\n    * Parameters which could be used in options array :\n    *    - name : string / name of the select (default is documents_id)\n    *    - entity : integer or array / restrict to a defined entity or array of entities\n    *                   (default -1 : no restriction)\n    *    - used : array / Already used items ID: not to display in dropdown (default empty)\n    *\n    * @param $options array of possible options\n    *\n    * @return nothing (print out an HTML select box)\n    *\n    * @throws \\GlpitestSQLError\n    */\n   static function dropdownTasklists($options = []) {\n\n      global $DB, $CFG_GLPI;\n\n      $p['name']    = 'plugin_tasklists_tasklists_id';\n      $p['entity']  = '';\n      $p['used']    = [];\n      $p['display'] = true;\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $p[$key] = $val;\n         }\n      }\n\n      $rand  = mt_rand();\n      $dbu   = new DbUtils();\n      $where = \" WHERE `glpi_plugin_tasklists_tasklists`.`is_deleted` = '0'  AND `glpi_plugin_tasklists_tasks`.`is_template` = 0\";\n      $where .= $dbu->getEntitiesRestrictRequest(\"AND\", 'glpi_plugin_tasklists_tasklists', '', $p['entity'], true);\n\n      if (count($p['used'])) {\n         $where .= \" AND `id` NOT IN (0, \" . implode(\",\", $p['used']) . \")\";\n      }\n\n      $query  = \"SELECT *\n        FROM `glpi_plugin_tasklists_tasktypes`\n        WHERE `id` IN (SELECT DISTINCT `plugin_tasklists_tasktypes_id`\n                       FROM `glpi_plugin_tasklists_tasks`\n                       $where)\n        ORDER BY `name`\";\n      $result = $DB->query($query);\n\n      $values = [0 => Dropdown::EMPTY_VALUE];\n\n      while ($data = $DB->fetchAssoc($result)) {\n         $values[$data['id']] = $data['name'];\n      }\n\n      $out      = Dropdown::showFromArray('_tasktype', $values, ['width'   => '30%',\n                                                                 'rand'    => $rand,\n                                                                 'display' => false]);\n      $field_id = Html::cleanId(\"dropdown__tasktype$rand\");\n\n      $params = ['tasktypes' => '__VALUE__',\n                 'entity'    => $p['entity'],\n                 'rand'      => $rand,\n                 'myname'    => $p['name'],\n                 'used'      => $p['used']\n      ];\n\n      $out .= Ajax::updateItemOnSelectEvent($field_id, \"show_\" . $p['name'] . $rand, PLUGIN_TASKLISTS_WEBDIR . \"/ajax/dropdownTypeTasks.php\", $params, false);\n\n      $out .= \"<span id='show_\" . $p['name'] . \"$rand'>\";\n      $out .= \"</span>\\n\";\n\n      $params['tasktype'] = 0;\n      $out                .= Ajax::updateItem(\"show_\" . $p['name'] . $rand, PLUGIN_TASKLISTS_WEBDIR . \"/ajax/dropdownTypeTasks.php\", $params, false);\n      if ($p['display']) {\n         echo $out;\n         return $rand;\n      }\n      return $out;\n   }\n\n   //Massive action\n\n   /**\n    * @param null $checkitem\n    *\n    * @return array\n    */\n   function getSpecificMassiveActions($checkitem = null) {\n      $isadmin = static::canUpdate();\n      $actions = parent::getSpecificMassiveActions($checkitem);\n\n      if ($_SESSION['glpiactiveprofile']['interface'] == 'central') {\n         if ($isadmin) {\n\n            if (Session::haveRight('transfer', READ) && Session::isMultiEntitiesMode()\n            ) {\n               $actions['PluginTasklistsTask' . MassiveAction::CLASS_ACTION_SEPARATOR . 'transfer'] = __('Transfer');\n            }\n         }\n      }\n      return $actions;\n   }\n\n   /**\n    * @param MassiveAction $ma\n    *\n    * @return bool|false\n    * @since version 0.85\n    *\n    * @see CommonDBTM::showMassiveActionsSubForm()\n    *\n    */\n   static function showMassiveActionsSubForm(MassiveAction $ma) {\n\n      switch ($ma->getAction()) {\n         case \"transfer\" :\n            Dropdown::show('Entity');\n            echo Html::submit(_x('button', 'Post'), ['name' => 'massiveaction', 'class' => 'btn btn-primary']);\n            return true;\n            break;\n      }\n      return parent::showMassiveActionsSubForm($ma);\n   }\n\n   /**\n    * @param MassiveAction $ma\n    * @param CommonDBTM    $item\n    * @param array         $ids\n    *\n    * @return nothing|void\n    * @throws \\GlpitestSQLError\n    * @see CommonDBTM::processMassiveActionsForOneItemtype()\n    *\n    * @since version 0.85\n    *\n    */\n   static function processMassiveActionsForOneItemtype(MassiveAction $ma, CommonDBTM $item, array $ids) {\n\n      switch ($ma->getAction()) {\n         case \"transfer\" :\n            $input = $ma->getInput();\n            if ($item->getType() == 'PluginTasklistsTask') {\n               foreach ($ids as $key) {\n                  $item->getFromDB($key);\n                  $type = PluginTasklistsTaskType::transfer($item->fields[\"plugin_tasklists_tasktypes_id\"], $input['entities_id']);\n                  if ($type > 0) {\n                     $values[\"id\"]                            = $key;\n                     $values[\"plugin_tasklists_tasktypes_id\"] = $type;\n                     $item->update($values);\n                  }\n                  unset($values);\n                  $values[\"id\"]          = $key;\n                  $values[\"entities_id\"] = $input['entities_id'];\n\n                  if ($item->update($values)) {\n                     $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_OK);\n                  } else {\n                     $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_KO);\n                  }\n               }\n            }\n            return;\n\n      }\n      parent::processMassiveActionsForOneItemtype($ma, $item, $ids);\n   }\n\n   /**\n    * For other plugins, add a type to the linkable types\n    *\n    * @param $type string class name\n    * *@since version 1.3.0\n    *\n    */\n   static function registerType($type) {\n      if (!in_array($type, self::$types)) {\n         self::$types[] = $type;\n      }\n   }\n\n   /**\n    * Type than could be linked to a Rack\n    *\n    * @param $all boolean, all type, or only allowed ones\n    *\n    * @return array of types\n    * */\n   static function getTypes($all = false) {\n\n      if ($all) {\n         return self::$types;\n      }\n\n      // Only allowed types\n      $types = self::$types;\n\n      foreach ($types as $key => $type) {\n         if (!class_exists($type)) {\n            continue;\n         }\n\n         $item = new $type();\n         if (!$item->canView()) {\n            unset($types[$key]);\n         }\n      }\n      return $types;\n   }\n\n   /**\n    * display a value according to a field\n    *\n    * @param $field     String         name of the field\n    * @param $values    String / Array with the value to display\n    * @param $options   Array          of option\n    *\n    * @return a string\n    **@since version 0.83\n    *\n    */\n   static function getSpecificValueToDisplay($field, $values, array $options = []) {\n\n      if (!is_array($values)) {\n         $values = [$field => $values];\n      }\n      switch ($field) {\n         case 'priority':\n            return CommonITILObject::getPriorityName($values[$field]);\n         case 'visibility':\n            return self::getVisibilityName($values[$field]);\n         case 'plugin_tasklists_taskstates_id':\n            return self::getStateName($values[$field]);\n      }\n      return parent::getSpecificValueToDisplay($field, $values, $options);\n   }\n\n   /**\n    * @param $field\n    * @param $name (default '')\n    * @param $values (default '')\n    * @param $options   array\n    *\n    * @return string\n    **@since version 0.84\n    *\n    */\n   static function getSpecificValueToSelect($field, $name = '', $values = '', array $options = []) {\n\n      if (!is_array($values)) {\n         $values = [$field => $values];\n      }\n      $options['display'] = false;\n\n      switch ($field) {\n         case 'priority':\n            $options['name']      = $name;\n            $options['value']     = $values[$field];\n            $options['withmajor'] = 1;\n            return CommonITILObject::dropdownPriority($options);\n\n         case 'visibility':\n            $options['name']  = $name;\n            $options['value'] = $values[$field];\n            return self::dropdownVisibility($options);\n\n         case 'plugin_tasklists_taskstates_id':\n            return Dropdown::show('PluginTasklistsTaskState', ['name'       => $name,\n                                                               'value'      => $values[$field],\n                                                               'emptylabel' => __('Backlog', 'tasklists'),\n                                                               'display'    => false,\n                                                               'width'      => '200px'\n            ]);\n      }\n      return parent::getSpecificValueToSelect($field, $name, $values, $options);\n   }\n\n   /*\n    * @since  version 0.84 new proto\n    *\n    * @param $options array of options\n    *       - name     : select name (default is urgency)\n    *       - value    : default value (default 0)\n    *       - showtype : list proposed : normal, search (default normal)\n    *       - display  : boolean if false get string\n    *\n    * @return string id of the select\n   **/\n   /**\n    * @param array $options\n    *\n    * @return int|string\n    */\n   static function dropdownVisibility(array $options = []) {\n\n      $p['name']      = 'visibility';\n      $p['value']     = 0;\n      $p['showtype']  = 'normal';\n      $p['display']   = true;\n      $p['withmajor'] = false;\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $p[$key] = $val;\n         }\n      }\n\n      $values = [];\n\n      $values[1] = static::getVisibilityName(1);\n      $values[2] = static::getVisibilityName(2);\n      $values[3] = static::getVisibilityName(3);\n\n      return Dropdown::showFromArray($p['name'], $values, $p);\n\n   }\n\n   /**\n    * Get ITIL object priority Name\n    *\n    * @param $value priority ID\n    *\n    * @return priority|string\n    */\n   static function getVisibilityName($value) {\n\n      switch ($value) {\n\n         case 1 :\n            return _x('visibility', 'This user', 'tasklists');\n\n         case 2 :\n            return _x('visibility', 'This user and this group', 'tasklists');\n\n         case 3 :\n            return _x('visibility', 'All', 'tasklists');\n\n         default :\n            // Return $value if not define\n            return $value;\n\n      }\n   }\n\n   /**\n    * @param $id\n    *\n    * @return bool\n    */\n   function checkVisibility($id) {\n\n      if (Session::haveRight(\"plugin_tasklists_see_all\", 1)) {\n         return true;\n      }\n      if ($this->getFromDB(($id))) {\n         $groupusers = Group_User::getGroupUsers($this->fields['groups_id']);\n         $groups     = [];\n         foreach ($groupusers as $groupuser) {\n            $groups[] = $groupuser[\"id\"];\n         }\n         if (($this->fields['visibility'] == 1 && ($this->fields['users_id'] == Session::getLoginUserID() || $this->fields['users_id_requester'] == Session::getLoginUserID()))\n             || ($this->fields['visibility'] == 2 && ($this->fields['users_id'] == Session::getLoginUserID() || $this->fields['users_id_requester'] == Session::getLoginUserID()\n                                                      || in_array(Session::getLoginUserID(), $groups)))\n             || ($this->fields['visibility'] == 3)) {\n            return true;\n         }\n      }\n      return false;\n   }\n\n   /**\n    * @see Rule::getActions()\n    * */\n   function getActions() {\n\n      $actions = [];\n\n      $actions['tasklists']['name']          = __('Affect entity for create task', 'tasklists');\n      $actions['tasklists']['type']          = 'dropdown';\n      $actions['tasklists']['table']         = 'glpi_entities';\n      $actions['tasklists']['force_actions'] = ['send'];\n\n      return $actions;\n   }\n\n   /**\n    * Execute the actions as defined in the rule\n    *\n    * @param $action\n    * @param $output the fields to manipulate\n    * @param $params parameters\n    *\n    * @return the $output array modified\n    */\n   function executeActions($action, $output, $params) {\n\n      switch ($params['rule_itemtype']) {\n         case 'RuleMailCollector':\n            switch ($action->fields[\"field\"]) {\n               case \"tasklists\" :\n\n                  if (isset($params['headers']['subject'])) {\n                     $input['name'] = $params['headers']['subject'];\n                  }\n                  if (isset($params['ticket'])) {\n                     $input['comment'] = addslashes(strip_tags($params['ticket']['content']));\n                  }\n                  if (isset($params['headers']['from'])) {\n                     $input['users_id'] = User::getOrImportByEmail($params['headers']['from']);\n                  }\n\n                  if (isset($action->fields[\"value\"])) {\n                     $input['entities_id'] = $action->fields[\"value\"];\n                  }\n                  $input['state'] = 1;\n\n                  if (isset($input['name'])\n                      && $input['name'] !== false\n                      && isset($input['entities_id'])\n                  ) {\n                     $this->add($input);\n                  }\n                  $output['_refuse_email_no_response'] = true;\n                  break;\n            }\n      }\n      return $output;\n   }\n\n   /**\n    * @param $options\n    *\n    * @return bool\n    */\n   function hasTemplate($options) {\n\n      $templates = [];\n      $dbu       = new DbUtils();\n      $restrict  = [\"is_template\" => 1] +\n                   [\"is_deleted\" => 0] +\n                   [\"is_archived\" => 0] +\n                   [\"plugin_tasklists_tasktypes_id\" => $options['plugin_tasklists_tasktypes_id']] +\n                   //                  [\"users_id\" => Session::getLoginUserID()] +\n                   $dbu->getEntitiesRestrictCriteria($this->getTable(), '', '', $this->maybeRecursive());\n\n      $templates = $dbu->getAllDataFromTable($this->getTable(), $restrict);\n      reset($templates);\n      foreach ($templates as $template) {\n         return $template['id'];\n      }\n      return false;\n   }\n\n\n   /**\n    * @param       $target\n    * @param int   $add\n    * @param array $options\n    */\n   function listOfTemplates($target, $add = 0) {\n      $dbu = new DbUtils();\n\n      $restrict = [\"is_template\" => 1] +\n                  $dbu->getEntitiesRestrictCriteria($this->getTable(), '', '', $this->maybeRecursive()) +\n                  [\"ORDER\" => \"name\"];\n\n      $templates = $dbu->getAllDataFromTable($this->getTable(), $restrict);\n\n      if (Session::isMultiEntitiesMode()) {\n         $colsup = 1;\n      } else {\n         $colsup = 0;\n      }\n\n      echo \"<div align='center'><table class='tab_cadre_fixe'>\";\n      if ($add) {\n         echo \"<tr><th colspan='\" . (2 + $colsup) . \"'>\" . __('Choose a template') . \" - \" . self::getTypeName(2) . \"</th>\";\n      } else {\n         echo \"<tr><th colspan='\" . (2 + $colsup) . \"'>\" . __('Templates') . \" - \" . self::getTypeName(2) . \"</th>\";\n      }\n\n      echo \"</tr>\";\n      if ($add) {\n\n         echo \"<tr>\";\n         echo \"<td colspan='\" . (2 + $colsup) . \"' class='center tab_bg_1'>\";\n         echo \"<a href=\\\"$target?id=-1&amp;withtemplate=2\\\">&nbsp;&nbsp;&nbsp;\" . __('Blank Template') . \"&nbsp;&nbsp;&nbsp;</a></td>\";\n         echo \"</tr>\";\n      }\n\n      foreach ($templates as $template) {\n\n         $templname = $template[\"template_name\"];\n         if ($_SESSION[\"glpiis_ids_visible\"] || empty($template[\"template_name\"])) {\n            $templname .= \"(\" . $template[\"id\"] . \")\";\n         }\n\n         echo \"<tr>\";\n         echo \"<td class='center tab_bg_1'>\";\n         if (!$add) {\n            echo \"<a href=\\\"$target?id=\" . $template[\"id\"] . \"&amp;withtemplate=1\\\">&nbsp;&nbsp;&nbsp;$templname&nbsp;&nbsp;&nbsp;</a></td>\";\n\n            if (Session::isMultiEntitiesMode()) {\n               echo \"<td class='center tab_bg_2'>\";\n               echo Dropdown::getDropdownName(\"glpi_entities\", $template['entities_id']);\n               echo \"</td>\";\n            }\n            echo \"<td class='center tab_bg_2'>\";\n            Html::showSimpleForm($target,\n                                 'purge',\n                                 _x('button', 'Delete permanently'),\n                                 ['id' => $template[\"id\"], 'withtemplate' => 1]);\n            echo \"</td>\";\n\n         } else {\n            echo \"<a href=\\\"$target?id=\" . $template[\"id\"] . \"&amp;withtemplate=2\\\">&nbsp;&nbsp;&nbsp;$templname&nbsp;&nbsp;&nbsp;</a></td>\";\n\n            if (Session::isMultiEntitiesMode()) {\n               echo \"<td class='center tab_bg_2'>\";\n               echo Dropdown::getDropdownName(\"glpi_entities\", $template['entities_id']);\n               echo \"</td>\";\n            }\n         }\n         echo \"</tr>\";\n      }\n      if (!$add) {\n         echo \"<tr>\";\n         echo \"<td colspan='\" . (2 + $colsup) . \"' class='tab_bg_2 center'>\";\n         echo \"<b><a href=\\\"$target?withtemplate=1\\\">\" . __('Add a template...') . \"</a></b>\";\n         echo \"</td>\";\n         echo \"</tr>\";\n      }\n      echo \"</table></div>\";\n   }\n\n   /**\n    * @since 0.84\n    **/\n   public function loadActors() {\n\n      //      if (!empty($this->grouplinkclass)) {\n      //         $class        = new $this->grouplinkclass();\n      $this->groups = [$this->fields['groups_id']];\n      //      }\n\n      //      if (!empty($this->userlinkclass)) {\n      //         $class        = new $this->userlinkclass();\n      $this->users = [$this->fields['users_id']];\n      //      }\n      //\n      //      if (!empty($this->supplierlinkclass)) {\n      //         $class            = new $this->supplierlinkclass();\n      //         $this->suppliers  = $class->getActors($this->fields['id']);\n      //      }\n   }\n\n   public static function getTeamItemtypes(): array {\n      return ['User', 'Group'];\n   }\n\n   public function getTeam(): array {\n      global $DB;\n\n      $team = [];\n\n      $team_itemtypes = static::getTeamItemtypes();\n\n      /** @var CommonDBTM $itemtype */\n      foreach ($team_itemtypes as $itemtype) {\n         /** @var CommonDBTM $link_class */\n         $link_class = null;\n         switch ($itemtype) {\n            case 'User':\n               $link_class = \"PluginTasklistsTask\";\n               break;\n            case 'Group':\n               $link_class = \"PluginTasklistsTask\";\n               break;\n         }\n\n         if ($link_class === null) {\n            continue;\n         }\n\n         $select = [];\n         if ($itemtype === 'User') {\n            $select = [$link_class::getTable() . '.' . $itemtype::getForeignKeyField(), $itemtype::getTable() . '.' . 'name', 'realname', 'firstname'];\n         } else {\n            $select = [\n               $link_class::getTable() . '.' . $itemtype::getForeignKeyField(), $itemtype::getTable() . '.' . 'name',\n               new QueryExpression('NULL as realname'),\n               new QueryExpression('NULL as firstname')\n            ];\n         }\n\n         $it = $DB->request([\n                               'SELECT'    => $select,\n                               'FROM'      => $link_class::getTable(),\n                               'WHERE'     => [$link_class::getTable() . '.' . 'id' => $this->getID()],\n                               'LEFT JOIN' => [\n                                  $itemtype::getTable() => [\n                                     'ON' => [\n                                        $itemtype::getTable()   => 'id',\n                                        $link_class::getTable() => $itemtype::getForeignKeyField()\n                                     ]\n                                  ]\n                               ]\n                            ]);\n         foreach ($it as $data) {\n            $items_id = $data[$itemtype::getForeignKeyField()];\n            if ($items_id <= 0) {\n               continue;\n            }\n            $member   = [\n               'itemtype'     => $itemtype,\n               'items_id'     => $items_id,\n               'id'           => $items_id,\n               'role'         => 2,\n               'name'         => $data['name'],\n               'realname'     => $data['realname'],\n               'firstname'    => $data['firstname'],\n               'display_name' => formatUserName($items_id, $data['name'], $data['realname'], $data['firstname'])\n            ];\n            $team[]   = $member;\n         }\n      }\n\n      return $team;\n   }\n\n\n   public static function getTeamRoles(): array {\n      return [\n         \\CommonITILActor::ASSIGN,\n      ];\n   }\n\n   public static function getTeamRoleName(int $role, int $nb = 1): string {\n      switch ($role) {\n         case \\CommonITILActor::ASSIGN:\n            return _n('Assignee', 'Assignees', $nb);\n      }\n      return '';\n   }\n\n\n   public function addTeamMember(string $itemtype, int $items_id, array $params = []): bool {\n      $role = CommonITILActor::ASSIGN;\n\n      /** @var CommonDBTM $link_class */\n      $link_class = null;\n      switch ($itemtype) {\n         case 'User':\n            $link_class = \"PluginTasklistsTask\";\n            $field      = \"users_id\";\n            break;\n         case 'Group':\n            $link_class = \"PluginTasklistsTask\";\n            $field      = \"groups_id\";\n            break;\n      }\n\n      if ($link_class === null) {\n         return false;\n      }\n\n      $link_item = new $link_class();\n      /** @var CommonDBTM $itemtype */\n      $result = $link_item->update([$field => $items_id,\n                                    'id'   => $this->getID()]);\n      return (bool)$result;\n   }\n\n   public function deleteTeamMember(string $itemtype, int $items_id, array $params = []): bool {\n      $role = CommonITILActor::ASSIGN;\n\n      /** @var CommonDBTM $link_class */\n      $link_class = null;\n      switch ($itemtype) {\n         case 'User':\n            $link_class = \"PluginTasklistsTask\";\n            $field      = \"users_id\";\n            break;\n         case 'Group':\n            $link_class = \"PluginTasklistsTask\";\n            $field      = \"groups_id\";\n            break;\n      }\n\n      if ($link_class === null) {\n         return false;\n      }\n\n      $link_item = new $link_class();\n      /** @var CommonDBTM $itemtype */\n      $result = $link_item->update([$field => '0',\n                                    'id'   => $this->getID()]);\n      return (bool)$result;\n   }\n\n   public static function getDataToDisplayOnKanban($ID, $criteria = []) {\n      // TODO: Implement getDataToDisplayOnKanban() method.\n   }\n\n   public static function getKanbanColumns($ID, $column_field = null, $column_ids = [], $get_default = false) {\n      // TODO: Implement getKanbanColumns() method.\n   }\n\n   public static function showKanban($ID) {\n      // TODO: Implement showKanban() method.\n   }\n\n   public static function getAllForKanban($active = true, $current_id = -1) {\n      // TODO: Implement getAllForKanban() method.\n   }\n\n   public static function getAllKanbanColumns($column_field = null, $column_ids = [], $get_default = false) {\n      // TODO: Implement getAllKanbanColumns() method.\n   }\n}\n", "<?php\n/*\n * @version $Id: HEADER 15930 2011-10-30 15:47:55Z tsmr $\n -------------------------------------------------------------------------\n Tasklists plugin for GLPI\n Copyright (C) 2003-2016 by the Tasklists Development Team.\n\n https://github.com/InfotelGLPI/tasklists\n -------------------------------------------------------------------------\n\n LICENSE\n\n This file is part of Tasklists.\n\n Tasklists is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2 of the License, or\n (at your option) any later version.\n\n Tasklists is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Tasklists. If not, see <http://www.gnu.org/licenses/>.\n --------------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access directly to this file\");\n}\n\n// Class for a Dropdown\n\n/**\n * Class PluginTasklistsTaskType\n */\nclass PluginTasklistsTaskType extends CommonTreeDropdown {\n\n   use \\Glpi\\Features\\Kanban;\n\n   static $rightname = 'plugin_tasklists';\n\n   /**\n    * @param int $nb\n    *\n    * @return translated\n    */\n   static function getTypeName($nb = 0) {\n\n      return _n('Context', 'Contexts', $nb, 'tasklists');\n   }\n\n   /**\n    * @return string\n    */\n   static function getIcon() {\n      return \"ti ti-layout-kanban\";\n   }\n\n   /**\n    * @param array $options\n    *\n    * @return array\n    * @see CommonGLPI::defineTabs()\n    *\n    */\n   function defineTabs($options = []) {\n\n      $ong = parent::defineTabs($options);\n      $this->addStandardTab(__CLASS__, $ong, $options);\n      $this->addStandardTab('PluginTasklistsStateOrder', $ong, $options);\n      $this->addStandardTab('PluginTasklistsTypeVisibility', $ong, $options);\n      return $ong;\n   }\n\n\n   /**\n    * @return array\n    */\n   static function getAllForKanban($active = true, $current_id = -1) {\n      $self = new self();\n\n      $list  = $self->find([], [\"completename ASC\"]);\n      $items = [\n\n      ];\n\n      foreach ($list as $key => $value) {\n         $self->getFromDB($value['id']);\n         if (!$self->haveChildren()) {\n            $items[$value['id']] = $value['completename'];\n         }\n\n      }\n      return $items;\n   }\n\n   /**\n    * @return bool\n    */\n   public function forceGlobalState() {\n      // All users must be using the global state unless viewing the global Kanban\n      return false;\n   }\n\n   /**\n    * @param $ID\n    * @param $entity\n    *\n    * @return ID|int|the\n    * @throws \\GlpitestSQLError\n    */\n   static function transfer($ID, $entity) {\n      global $DB;\n\n      if ($ID > 0) {\n         // Not already transfer\n         // Search init item\n         $query = \"SELECT *\n                   FROM `glpi_plugin_tasklists_tasktypes`\n                   WHERE `id` = '$ID'\";\n\n         if ($result = $DB->query($query)) {\n            if ($DB->numrows($result)) {\n               $data                                   = $DB->fetchAssoc($result);\n               $data                                   = Toolbox::addslashes_deep($data);\n               $input['name']                          = $data['name'];\n               $input['entities_id']                   = $entity;\n               $input['is_recursive']                  = $data['is_recursive'];\n               $input['plugin_tasklists_tasktypes_id'] = $data['plugin_tasklists_tasktypes_id'];\n               $temp                                   = new self();\n               $newID                                  = $temp->getID();\n\n               if ($newID < 0) {\n                  $newID = $temp->import($input);\n               }\n\n               return $newID;\n            }\n         }\n      }\n      return 0;\n   }\n\n   /**\n    * @param       $ID\n    * @param       $column_field\n    * @param array $column_ids\n    * @param bool  $get_default\n    *\n    * @return array\n    */\n\n   static function getKanbanColumns($ID, $column_field = null, $column_ids = [], $get_default = false) {\n\n      if (!PluginTasklistsTypeVisibility::isUserHaveRight($ID)) {\n         return [];\n      }\n      $dbu = new DbUtils();\n      //      $datastates = $dbu->getAllDataFromTable($dbu->getTableForItemType('PluginTasklistsTaskState'));\n\n      $states[0] = [\n         'id'              => 0,\n         'name'            => __('Backlog', 'tasklists'),\n         'header_color'    => \"#CCC\",\n         'header_fg_color' => Toolbox::getFgColor(\"#CCC\", 50),\n         'drop_only'       => 0,\n         'finished'        => 0,\n         '_protected'   => true\n      ];\n\n      if (!empty($column_ids)) {\n         $PluginTasklistsTaskState = new PluginTasklistsTaskState();\n         $datastates               = $PluginTasklistsTaskState->find([\"id\" => $column_ids]);\n      }\n\n      if (!empty($column_ids) && !empty($datastates)) {\n\n         foreach ($datastates as $datastate) {\n            if (empty($name = DropdownTranslation::getTranslatedValue($datastate['id'], 'PluginTasklistsTaskState', 'name', $_SESSION['glpilanguage']))) {\n               $name = $datastate['name'];\n            }\n            $states[$datastate['id']] = [\n               'id'              => $datastate['id'],\n               'header_color'    => $datastate['color'],\n               'header_fg_color' => Toolbox::getFgColor($datastate['color'], 50),\n               'name'            => $name,\n               'finished'        => $datastate['is_finished']];\n            $colors[$datastate['id']] = $datastate['color'];\n         }\n      }\n      $nstates = [];\n\n      $task = new PluginTasklistsTask();\n      foreach ($states as $state) {\n\n         $selected_state = $state;\n         $tasks          = [];\n         $datas          = $task->find([\"plugin_tasklists_tasktypes_id\"  => $ID,\n                                        \"plugin_tasklists_taskstates_id\" => $state['id'],\n                                        'is_deleted'                     => 0,\n                                        'is_template'                    => 0], ['priority DESC,name']);\n\n         foreach ($datas as $data) {\n            $array = isset($_SESSION[\"archive\"][Session::getLoginUserID()]) ? json_decode($_SESSION[\"archive\"][Session::getLoginUserID()]) : [0];\n            if (!in_array($data[\"is_archived\"], $array)) {\n               continue;\n            }\n            $usersallowed = isset($_SESSION[\"usersKanban\"][Session::getLoginUserID()]) ? json_decode($_SESSION[\"usersKanban\"][Session::getLoginUserID()]) : [-1];\n            if (!in_array(-1, $usersallowed) && !in_array($data['users_id'], $usersallowed)) {\n               continue;\n            }\n\n            $plugin_tasklists_taskstates_id = $data['plugin_tasklists_taskstates_id'];\n            $finished                       = 0;\n            $finished_style                 = 'style=\"display: inline;\"';\n            $stateT                         = new PluginTasklistsTaskState();\n            if ($stateT->getFromDB($plugin_tasklists_taskstates_id)) {\n               if ($stateT->getFinishedState()) {\n                  $finished_style = 'style=\"display: none;\"';\n                  $finished       = 1;\n               }\n            }\n            $task = new PluginTasklistsTask();\n            if ($task->checkVisibility($data['id']) == true) {\n               $duedate = '';\n               if (!empty($data['due_date'])) {\n                  $duedate = __('Due date', 'tasklists') . \" \" . Html::convDate($data['due_date']);\n               }\n               $actiontime = '';\n               if ($data['actiontime'] != 0) {\n                  $actiontime = Html::timestampToString($data['actiontime'], false, true);\n               }\n               $archived = $data['is_archived'];\n\n               if (isset($data['users_id'])\n                   && $data['users_id'] != Session::getLoginUserID()) {\n                  $finished_style = 'style=\"display: none;\"';\n               }\n\n               $right = 0;\n               if (($data['users_id'] == Session::getLoginUserID()\n                    && Session::haveRight(\"plugin_tasklists\", UPDATE))\n                   || Session::haveRight(\"plugin_tasklists_see_all\", 1)) {\n                  $right = 1;\n               }\n\n               if ($data['users_id'] == 0) {\n                  $right          = 1;\n                  $finished_style = 'style=\"display: inline;\"';\n               }\n\n               $entity      = new Entity();\n               $entity_name = __('None');\n               if ($entity->getFromDB($data['entities_id'])) {\n                  $entity_name = $entity->fields['name'];\n               }\n               $client = (empty($data['client'])) ? $entity_name : $data['client'];\n\n               //               $comment = Glpi\\Toolbox\\Sanitizer::unsanitize($data[\"content\"]);\n\n               // Core content\n               $content      = \"<div class='kanban-core-content'>\";\n               $content      .= \"<div class='flex-break'>\";\n               $bgcolor      = $_SESSION[\"glpipriority_\" . $data['priority']];\n               $content      .= __('Priority') . \"&nbsp;:&nbsp;<i class='fas fa-circle' style='color: $bgcolor'></i>&nbsp;\" . CommonITILObject::getPriorityName($data['priority']);\n               $content      .= \"</div>\";\n               $rich_content = \"\";\n               if ($data['content'] != null) {\n                  $rich_content = Glpi\\RichText\\RichText::getTextFromHtml($data['content'], false, true, true);\n               }\n               $content .= Html::resume_text($rich_content, 100);\n               $content .= \"</div>\";\n               $content .= \"<div align='right' class='endfooter b'>\" . $client . \"</div>\";\n               $content .= \"<div align='right' class='endfooter'>\" . $actiontime . \"</div>\";\n               $content .= \"<div align='right' class='endfooter'>\" . $duedate . \"</div>\";\n               // Percent Done\n               $content    .= \"<div class='flex-break'></div>\";\n               $content    .= Html::progress(100, $data['percent_done']);\n               $content    .= \"</div>\";\n               $content    .= \"<div align='right' class='endfooter'>\" . $data['percent_done'] . \"%</div>\";\n               $nbcomments = \"\";\n               $nb         = 0;\n               $where      = [\n                  'plugin_tasklists_tasks_id' => $data['id'],\n                  'language'                  => null\n               ];\n               $nb         = countElementsInTable(\n                  'glpi_plugin_tasklists_tasks_comments',\n                  $where\n               );\n               if ($nb > 0) {\n                  $nbcomments = \" (\" . $nb . \") \";\n               }\n\n               $itemtype        = \"PluginTasklistsTask\";\n               $meta            = [];\n               $metadata_values = ['name', 'content'];\n               foreach ($metadata_values as $metadata_value) {\n                  if (isset($data[$metadata_value])) {\n                     $meta[$metadata_value] = $data[$metadata_value];\n                  }\n               }\n               //               if (isset($meta['_metadata']['content']) && is_string($meta['_metadata']['content'])) {\n               //                  $meta['_metadata']['content'] = Glpi\\RichText\\RichText::getTextFromHtml($tasks['_metadata']['content'], false, true);\n               //               } else {\n               //                  $meta['_metadata']['content'] = '';\n               //               }\n\n               // Create a fake item to get just the actors without loading all other information about items.\n               //               $temp_item = new PluginTasklistsTask();\n               //               $temp_item->fields['id'] = $data['id'];\n               //               $temp_item->loadActors();\n\n               // Build team member data\n               $supported_teamtypes = [\n                  //                  'User' => ['id', 'firstname', 'realname'],\n                  //                  'Group' => ['id', 'name'],\n                  //                  'Supplier' => ['id', 'name'],\n               ];\n               //               $members = [\n               //                  'User'      => $temp_item->fields['users_id'],\n               //                  'Group'     => $temp_item->fields['groups_id'],\n               //                  'Supplier'   => $temp_item->getSuppliers(CommonITILActor::ASSIGN),\n               //               ];\n               $team = [];\n               //               foreach ($supported_teamtypes as $itemtype => $fields) {\n               //                  $fields[] = 'id';\n               //                  $fields[] = new QueryExpression($DB->quoteValue($itemtype) . ' AS ' . $DB->quoteName('itemtype'));\n               //\n               //                  $member_ids = array_map(static function ($e) use ($itemtype) {\n               //                     return $e[$itemtype::getForeignKeyField()];\n               //                  }, $members[$itemtype]);\n               //                  if (count($member_ids)) {\n               //                     $itemtable = $itemtype::getTable();\n               //                     $all_items = $DB->request([\n               //                                                  'SELECT'    => $fields,\n               //                                                  'FROM'      => $itemtable,\n               //                                                  'WHERE'     => [\n               //                                                     \"{$itemtable}.id\"   => $member_ids\n               //                                                  ]\n               ////                                               ]);\n               //               $team = [];\n               //                  $all_items[] = ['itemtype' => 'User', 'items_id'=> $data['users_id']];\n               //                  $all_items[] = ['itemtype' => 'Group', 'items_id'=> $data['groups_id']];\n               ////                     $all_members = [];\n               //                     foreach ($all_items as $k => $member_data) {\n               //                        $member_data['itemtype'] = $member_data['itemtype'];\n               //                        $member_data['id'] = $member_data['items_id'];\n               //                        $member_data['role'] = 2;\n               ////                        if ($member_data['itemtype'] === User::class) {\n               ////                           $member_data['name'] = formatUserName(\n               ////                              $member_data['id'],\n               ////                              '',\n               ////                              $member_data['realname'],\n               ////                              $member_data['firstname']\n               ////                           );\n               ////                        }\n               //                        $team[] = $member_data;\n               //                     }\n               ////                  }\n               ////               }\n               //               Toolbox::logInfo($team);\n               $task->getFromDB($data['id']);\n               $team = $task->getTeam();\n\n               if (isset($stateT->fields['color']) && $stateT->fields['color'] != null) {\n                  $bgcolor = self::getFgColor($stateT->fields['color'], 1);\n               } else {\n                  $bgcolor = \"#FFF\";\n               }\n\n               $rich_content = \"\";\n               if ($data['content'] != null) {\n                  $rich_content = Glpi\\RichText\\RichText::getTextFromHtml($data['content'], false, true);\n               }\n\n               $title = Html::link($data['name'], $itemtype::getFormURLWithID($data['id'])) . $nbcomments;\n               //               $ID    = $data['id'];\n               //               if ($finished == 1 && $archived == 0) {\n               //                  $title .= \"&nbsp;<a id='archivetask$ID' href='#' title='\" . __('Archive this task', 'tasklists') . \"'><i class='ti ti-archive'></i></a>\";\n               //               }\n               //               if ($finished == 1 && $data['priority'] < 5) {\n               //                  $title .= \"&nbsp;<a id='updatepriority$ID' href='#' title='\" . __('Update priority of task', 'tasklists') . \"'><i class='ti ti-arrow-up'></i></a>\";\n               //               }\n\n               $tasks[] = ['id'            => \"{$itemtype}-{$data['id']}\",\n                           'title'         => $title,\n                           'title_tooltip' => Html::resume_text($rich_content, 100),\n                           'is_deleted'    => $data['is_deleted'] ?? false,\n                           'content'       => $content,\n                           '_team'         => $team,\n                           '_form_link'    => $itemtype::getFormUrlWithID($data['id']),\n\n                           'block'          => ($ID > 0 ? $ID : 0),\n                           'priority'       => CommonITILObject::getPriorityName($data['priority']),\n                           'priority_id'    => $data['priority'],\n                           'bgcolor'        => $bgcolor,\n                           'percent'        => $data['percent_done'],\n                           'actiontime'     => $actiontime,\n                           'duedate'        => $duedate,\n                           //                           'user'           => $link,\n                           'client'         => $client,\n                           'finished'       => $finished,\n                           'archived'       => $archived,\n                           'finished_style' => $finished_style,\n                           'right'          => $right,\n                           'users_id'       => $data['users_id'],\n                           '_readonly'      => false,\n                           '_metadata'      => $meta\n               ];\n            }\n         }\n         $selected_state[\"items\"] = $tasks;\n         $nstates[$state[\"id\"]]   = $selected_state;\n      }\n\n      return $nstates;\n\n   }\n\n   public static function getFgColor(string $color = \"\", int $offset = 40, bool $inherit_if_transparent = false): string {\n      $fg_color = \"FFFFFF\";\n      if ($color !== \"\") {\n         $color = str_replace(\"#\", \"\", $color);\n\n         // if transparency present, get only the color part\n         if (strlen($color) === 8 && preg_match('/^[a-fA-F0-9]+$/', $color)) {\n            $tmp   = $color;\n            $alpha = hexdec(substr($tmp, 6, 2));\n            $color = substr($color, 0, 6);\n\n            if ($alpha <= 100) {\n               return \"inherit\";\n            }\n         }\n\n         $color_inst = new Mexitek\\PHPColors\\Color($color);\n\n         // adapt luminance part\n         //         if ($color_inst->isLight()) {\n         //            $hsl = Color::hexToHsl($color);\n         //            $hsl['L'] = max(0, $hsl['L'] - ($offset / 100));\n         //            $fg_color = Color::hslToHex($hsl);\n         //         } else {\n         $hsl      = Mexitek\\PHPColors\\Color::hexToHsl($color);\n         $hsl['L'] = ($hsl['L'] * 110) + 5;\n         $hsl['L'] = ($hsl['L'] > 110) ? $hsl['L'] / 50 : $hsl['L'] / 90;\n         $fg_color = Mexitek\\PHPColors\\Color::hslToHex($hsl);\n         //         }\n      }\n\n      return \"#\" . $fg_color;\n   }\n\n   /**\n    * @param $plugin_tasklists_tasktypes_id\n    *\n    * @return array\n    */\n   static function findUsers($plugin_tasklists_tasktypes_id) {\n      $dbu   = new DbUtils();\n      $users = [];\n      $task  = new PluginTasklistsTask();\n      $tasks = $task->find([\"plugin_tasklists_tasktypes_id\" => $plugin_tasklists_tasktypes_id, \"is_archived\" => 0, \"is_deleted\" => 0]);\n      foreach ($tasks as $t) {\n         $users[$t[\"users_id\"]] = $dbu->getUserName($t[\"users_id\"]);\n      }\n      $users     = array_unique($users);\n      $users[-1] = __(\"All\");\n\n\n      return $users;\n   }\n\n   /**\n    * Have I the global right to \"create\" the Object\n    * May be overloaded if needed (ex KnowbaseItem)\n    *\n    * @return boolean\n    **/\n   static function canCreate() {\n      if (static::$rightname) {\n         return Session::haveRight(static::$rightname, 1);\n      }\n      return false;\n   }\n\n   static function canUpdate() {\n      if (static::$rightname) {\n         return Session::haveRight(static::$rightname, 1);\n      }\n      return false;\n   }\n\n   static function canDelete() {\n      if (static::$rightname) {\n         return Session::haveRight(static::$rightname, 1);\n      }\n      return false;\n   }\n\n   public static function getDataToDisplayOnKanban($ID, $criteria = []) {\n      // Not needed\n   }\n\n   public static function showKanban($ID) {\n      // Not needed\n   }\n\n   public static function getAllKanbanColumns($column_field = null, $column_ids = [], $get_default = false) {\n\n      if ($column_field === null || $column_field === 'plugin_tasklists_taskstates_id') {\n         $columns  = ['plugin_tasklists_taskstates_id' => []];\n         $restrict = [];\n         //         if (!empty($column_ids) && !$get_default) {\n         //            $restrict = ['id' => $column_ids];\n         //         }\n\n         $Taskstate    = new PluginTasklistsTaskState();\n         $all_statuses = $Taskstate->find($restrict, ['is_finished ASC', 'id']);\n\n         $columns['plugin_tasklists_taskstates_id'][0] = [\n            //            'id'        => 0,\n            'name'            => __('Backlog', 'tasklists'),\n            'header_color'    => \"#CCC\",\n            'header_fg_color' => Toolbox::getFgColor(\"#CCC\", 50),\n            'drop_only'       => 0\n         ];\n\n         foreach ($all_statuses as $status) {\n\n            $columns['plugin_tasklists_taskstates_id'][$status['id']] = [\n               'name'            => $status['name'],\n               'header_color'    => $status['color'],\n               'header_fg_color' => Toolbox::getFgColor($status['color'], 50),\n               'drop_only'       => 0,//$status['is_finished'] ??\n            ];\n         }\n\n         return $columns['plugin_tasklists_taskstates_id'];\n      } else {\n         return [];\n      }\n   }\n\n   //   public static function getGlobalKanbanUrl(bool $full = true): string\n   //   {\n   //      if (method_exists(static::class, 'getFormUrl')) {\n   //         return static::getFormURL($full) . '?showglobalkanban=1';\n   //      }\n   //      //      $kb = new PluginTasklistsKanban();\n   //      //      echo $kb->getSearchURL() . '?context_id=' . $_REQUEST['items_id'];\n   //      //\n   //      return '';\n   //   }\n\n   public function getKanbanUrlWithID(int $items_id, bool $full = true): string {\n      $kb = new PluginTasklistsKanban();\n      return $kb->getSearchURL() . '?context_id=' . $items_id;\n\n   }\n}\n", "<?php\n/*\n * @version $Id: HEADER 15930 2011-10-30 15:47:55Z tsmr $\n -------------------------------------------------------------------------\n Tasklists plugin for GLPI\n Copyright (C) 2003-2016 by the Tasklists Development Team.\n\n https://github.com/InfotelGLPI/tasklists\n -------------------------------------------------------------------------\n\n LICENSE\n\n This file is part of Tasklists.\n\n Tasklists is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2 of the License, or\n (at your option) any later version.\n\n Tasklists is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Tasklists. If not, see <http://www.gnu.org/licenses/>.\n --------------------------------------------------------------------------\n */\n\ndefine('PLUGIN_TASKLISTS_VERSION', '2.0.3');\n\nif (!defined(\"PLUGIN_TASKLISTS_DIR\")) {\n   define(\"PLUGIN_TASKLISTS_DIR\", Plugin::getPhpDir(\"tasklists\"));\n   define(\"PLUGIN_TASKLISTS_NOTFULL_DIR\", Plugin::getPhpDir(\"tasklists\",false));\n   define(\"PLUGIN_TASKLISTS_WEBDIR\", Plugin::getWebDir(\"tasklists\"));\n}\n\n// Init the hooks of the plugins -Needed\nfunction plugin_init_tasklists() {\n   global $PLUGIN_HOOKS, $CFG_GLPI;\n\n   $PLUGIN_HOOKS['csrf_compliant']['tasklists'] = true;\n   $PLUGIN_HOOKS['change_profile']['tasklists'] = ['PluginTasklistsProfile', 'initProfile'];\n   $PLUGIN_HOOKS['use_rules']['tasklists'] = ['RuleMailCollector'];\n\n   if (Session::getLoginUserID()) {\n\n      Plugin::registerClass('PluginTasklistsTask', [\n//         'linkuser_types'              => true,\n//         'linkgroup_types'             => true,\n         'document_types'              => true,\n         'notificationtemplates_types' => true\n      ]);\n\n      Plugin::registerClass('PluginTasklistsTicket',\n                            ['addtabon' => 'Ticket']);\n\n      $PLUGIN_HOOKS['item_purge']['tasklists']['Ticket'] = ['PluginTasklistsTaskTicket', 'cleanForTicket'];\n\n      Plugin::registerClass('PluginTasklistsProfile',\n                            ['addtabon' => 'Profile']);\n\n      Plugin::registerClass('PluginTasklistsPreference',\n                            ['addtabon' => 'Preference']);\n\n      if (Session::haveRight(\"plugin_tasklists\", READ)) {\n         $PLUGIN_HOOKS['menu_toadd']['tasklists'] = ['helpdesk' => 'PluginTasklistsMenu'];\n      }\n\n      if (class_exists('PluginMydashboardMenu')) {\n         $PLUGIN_HOOKS['mydashboard']['tasklists'] = [\"PluginTasklistsDashboard\"];\n      }\n\n      if (Session::haveRight(\"plugin_tasklists\", CREATE)) {\n         $PLUGIN_HOOKS['use_massive_action']['tasklists'] = 1;\n      }\n      // require spectrum (for glpi >= 9.2)\n//      $CFG_GLPI['javascript']['config']['commondropdown']['PluginTasklistsTaskState'] = ['colorpicker'];\n      $PLUGIN_HOOKS['javascript']['tasklists'][]                                      = PLUGIN_TASKLISTS_NOTFULL_DIR.\"/lib/redips/redips-drag-min.js\";\n      $PLUGIN_HOOKS['javascript']['tasklists'][]                                      = PLUGIN_TASKLISTS_NOTFULL_DIR.\"/scripts/plugin_tasklists_drag-field-row.js\";\n//      $PLUGIN_HOOKS['javascript']['tasklists'][]                                      = PLUGIN_TASKLISTS_NOTFULL_DIR.\"/lib/kanban/js/kanban.js\";\n//      $CFG_GLPI['javascript']['helpdesk']['plugintasklistsmenu']                      = ['colorpicker'];\n\n\n   }\n}\n\n// Get the name and the version of the plugin - Needed\n/**\n * @return array\n */\nfunction plugin_version_tasklists() {\n\n   return [\n      'name'         => __('Tasks list', 'tasklists'),\n      'version'      => PLUGIN_TASKLISTS_VERSION,\n      'license'      => 'GPLv2+',\n      'author'       => \"<a href='http://blogglpi.infotel.com'>Infotel</a>\",\n      'homepage'     => 'https://github.com/InfotelGLPI/tasklists',\n      'requirements' => [\n         'glpi' => [\n            'min' => '10.0',\n            'max' => '11.0',\n            'dev' => false\n         ]\n      ]\n   ];\n\n}\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n    <name>Tasks List (Kanban)</name>\n    <key>tasklists</key>\n    <state>stable</state>\n    <logo>https://raw.githubusercontent.com/InfotelGLPI/tasklists/master/tasklists.png</logo>\n    <description>\n        <short>\n            <fr><![CDATA[Ajout d'une gestion de t\u00e2ches & kanban. Ce plugin permet d'ajouter dans GLPI, une interface pour saisir des t\u00e2ches simples et de les g\u00e9rer dans un kanban.]]></fr>\n            <en><![CDATA[Adding a management of tasks & kanban. This plugin adds in GLPI, an interface to input simple tasks & manage them in a kanban.]]></en>\n            <cs><![CDATA[P\u0159id\u00e1n\u00ed spr\u00e1vy jednoduch\u00fdch \u00fakol\u016f. Tento z\u00e1suvn\u00fd modul do GLPI p\u0159id\u00e1 rozhran\u00ed pro zad\u00e1v\u00e1n\u00ed jednoduch\u00fdch \u00fakol\u016f.]]></cs>\n        </short>\n        <long>\n            <fr><![CDATA[Ce plugin permet d'ajouter dans GLPI, une interface pour saisir des t\u00e2ches simples et de les g\u00e9rer dans un kanban.<br />- Ajout de commentaires sur les t\u00e2ches.<br />- Lien avec les tickets.<br />- Utilisation de gabarits<br />- Gestion des t\u00e2ches archiv\u00e9es.<br />- Ajout de notes possibles sur les t\u00e2ches.<br />- Peut \u00eatre utilis\u00e9 avec le collecteur de mail pour cr\u00e9er des t\u00e2ches.<br />- Peut \u00eatre utilis\u00e9 avec le plugin mydashboard d'Infotel.]]></fr>\n            <en><![CDATA[This plugin adds in GLPI, an interface to input simple tasks & manage them in a kanban.<br />- Can add comments on tasks.<br />- Link with tickets.<br />- Can use templates.<br />- Manage archived tasks.<br />- Can add notes on tasks.<br />- Can be used with mail collector to create tasks.<br />- Can be used with mydashboard plugin of Infotel]]></en>\n            <cs><![CDATA[Tento z\u00e1suvn\u00fd modul do GLPI p\u0159id\u00e1 rozhran\u00ed pro zad\u00e1v\u00e1n\u00ed jednoduch\u00fdch \u00fakol\u016f.<br />- K \u00fakol\u016fm je mo\u017en\u00e9 p\u0159id\u00e1vat pozn\u00e1mky.<br />- Je mo\u017en\u00e9 pou\u017e\u00edt s p\u0159ivad\u011b\u010dem e-mail\u016f a vytv\u00e1\u0159et \u00fakoly skrze n\u011bj.<br />- Je mo\u017en\u00e9 pou\u017e\u00edt se z\u00e1suvn\u00fdm modulem Moje n\u00e1st\u011bnka]]></cs>\n        </long>\n    </description>\n    <homepage>https://github.com/InfotelGLPI/tasklists</homepage>\n    <download>https://github.com/InfotelGLPI/tasklists/releases</download>\n    <issues>https://github.com/InfotelGLPI/tasklists/issues</issues>\n    <readme>https://github.com/InfotelGLPI/tasklists/wiki</readme>\n    <authors>\n        <author>Xavier Caillaud</author>\n        <author>Infotel</author>\n    </authors>\n    <versions>\n        <version>\n            <num>2.0.3</num>\n            <compatibility>~10.0</compatibility>\n            <download_url>https://github.com/InfotelGLPI/tasklists/releases/download/2.0.3/glpi-tasklists-2.0.3.tar.bz2</download_url>\n        </version>\n        <version>\n            <num>2.0.2</num>\n            <compatibility>~10.0</compatibility>\n            <download_url>https://github.com/InfotelGLPI/tasklists/releases/download/2.0.2/glpi-tasklists-2.0.2.tar.bz2</download_url>\n        </version>\n        <version>\n            <num>2.0.1</num>\n            <compatibility>~10.0</compatibility>\n            <download_url>https://github.com/InfotelGLPI/tasklists/releases/download/2.0.1/glpi-tasklists-2.0.1.tar.bz2</download_url>\n        </version>\n        <version>\n            <num>2.0.0</num>\n            <compatibility>~10.0</compatibility>\n            <download_url>https://github.com/InfotelGLPI/tasklists/releases/download/2.0.0/glpi-tasklists-2.0.0.tar.bz2</download_url>\n        </version>\n        <version>\n            <num>2.0.0-rc2</num>\n            <compatibility>~10.0</compatibility>\n            <download_url>https://github.com/InfotelGLPI/tasklists/releases/download/2.0.0-rc2/glpi-tasklists-2.0.0-rc2.tar.bz2</download_url>\n        </version>\n        <version>\n           <num>2.0.0-rc1</num>\n           <compatibility>~10.0</compatibility>\n           <download_url>https://github.com/InfotelGLPI/tasklists/releases/download/2.0.0-rc1/glpi-tasklists-2.0.0-rc1.tar.bz2</download_url>\n       </version>\n        <version>\n            <num>1.6.2</num>\n            <compatibility>9.5</compatibility>\n        </version>\n        <version>\n            <num>1.6.1</num>\n            <compatibility>~9.5</compatibility>\n        </version>\n        <version>\n            <num>1.6.0</num>\n            <compatibility>~9.5</compatibility>\n            <!--<download_url>https://github.com/InfotelGLPI/tasklists/releases/download/1.6.0/glpi-tasklists-1.6.0.tar.gz</download_url>-->\n        </version>\n        <version>\n            <num>1.5.1</num>\n            <compatibility>9.4</compatibility>\n        </version>\n        <version>\n            <num>1.5.0</num>\n            <compatibility>9.4</compatibility>\n        </version>\n        <version>\n            <num>1.4.2</num>\n            <compatibility>9.3</compatibility>\n        </version>\n        <version>\n            <num>1.4.1</num>\n            <compatibility>9.3</compatibility>\n        </version>\n        <version>\n            <num>1.4.0</num>\n            <compatibility>9.3</compatibility>\n        </version>\n        <version>\n            <num>1.3.1</num>\n            <compatibility>9.3</compatibility>\n        </version>\n        <version>\n            <num>1.3.0</num>\n            <compatibility>9.3</compatibility>\n        </version>\n        <version>\n            <num>1.2.0</num>\n            <compatibility>9.2</compatibility>\n        </version>\n        <version>\n            <num>1.1.0</num>\n            <compatibility>9.1</compatibility>\n        </version>\n        <version>\n            <num>1.0.0</num>\n            <compatibility>0.90</compatibility>\n        </version>\n    </versions>\n    <langs>\n        <lang>fr_FR</lang>\n        <lang>en_GB</lang>\n        <lang>cs_CZ</lang>\n        <lang>fi_FI</lang>\n    </langs>\n    <license><![CDATA[GPL v2+]]></license>\n    <tags>\n        <fr>\n            <tag>Taches</tag>\n            <tag>Kanban</tag>\n        </fr>\n        <en>\n            <tag>Tasks</tag>\n            <tag>Kanban</tag>\n        </en>\n        <cs>\n            <tag>\u00dakoly</tag>\n        </cs>\n    </tags>\n    <screenshots>\n        <screenshot>https://raw.githubusercontent.com/InfotelGLPI/tasklists/master/screenshots/kanban.png</screenshot>\n        <screenshot>https://raw.githubusercontent.com/InfotelGLPI/tasklists/master/screenshots/addTask.png</screenshot>\n        <screenshot> https://raw.githubusercontent.com/InfotelGLPI/tasklists/master/screenshots/Tasks%20list%20from%20Dashboard.png</screenshot>\n    </screenshots>\n</root>\n"], "filenames": ["inc/task.class.php", "inc/tasktype.class.php", "setup.php", "tasklists.xml"], "buggy_code_start_loc": [334, 272, 30, 27], "buggy_code_end_loc": [337, 273, 31, 27], "fixing_code_start_loc": [335, 272, 30, 28], "fixing_code_end_loc": [343, 273, 31, 33], "type": "CWE-79", "message": "tasklists is a tasklists plugin for GLPI (Kanban). Versions prior to 2.0.3 are vulnerable to Cross-site Scripting. Cross-site Scripting (XSS) - Create XSS in task content (when add it). This issue is patched in version 2.0.3. There are no known workarounds.", "other": {"cve": {"id": "CVE-2022-39398", "sourceIdentifier": "security-advisories@github.com", "published": "2022-11-10T01:15:12.333", "lastModified": "2022-11-11T02:00:33.287", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "tasklists is a tasklists plugin for GLPI (Kanban). Versions prior to 2.0.3 are vulnerable to Cross-site Scripting. Cross-site Scripting (XSS) - Create XSS in task content (when add it). This issue is patched in version 2.0.3. There are no known workarounds."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.3}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:infotel:tasklists:*:*:*:*:*:glpi:*:*", "versionEndExcluding": "2.0.3", "matchCriteriaId": "643B1E15-7E4D-4DC2-B883-10285972F414"}]}]}], "references": [{"url": "https://github.com/InfotelGLPI/tasklists/commit/4a1b30f3d9fa764695f98ce011c8542772530d47", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/InfotelGLPI/tasklists/security/advisories/GHSA-3qv3-8393-777q", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/InfotelGLPI/tasklists/commit/4a1b30f3d9fa764695f98ce011c8542772530d47"}}