{"buggy_code": ["export default function semverRegex() {\n\treturn /(?<=^v?|\\sv?)(?:(?:0|[1-9]\\d*)\\.){2}(?:0|[1-9]\\d*)(?:-(?:0|[1-9]\\d*|[\\da-z-]*[a-z-][\\da-z-]*)(?:\\.(?:0|[1-9]\\d*|[\\da-z-]*[a-z-][\\da-z-]*))*)?(?:\\+[\\da-z-]+(?:\\.[\\da-z-]+)*)?\\b/gi;\n}\n", "# semver-regex\n\n> Regular expression for matching [semver](https://github.com/npm/node-semver) versions\n\n## Install\n\n```\n$ npm install semver-regex\n```\n\n## Usage\n\n```js\nimport semverRegex from 'semver-regex';\n\nsemverRegex().test('v1.0.0');\n//=> true\n\nsemverRegex().test('1.2.3-alpha.10.beta.0+build.unicorn.rainbow');\n//=> true\n\nsemverRegex().exec('unicorn 1.0.0 rainbow')[0];\n//=> '1.0.0'\n\n'unicorn 1.0.0 and rainbow 2.1.3'.match(semverRegex());\n//=> ['1.0.0', '2.1.3']\n```\n\n**Note:** For versions coming from user-input, it's up to you to truncate the string to a sensible length to prevent abuse. For example, 100 length.\n\n## Related\n\n- [find-versions](https://github.com/sindresorhus/find-versions) - Find semver versions in a string\n- [latest-semver](https://github.com/sindresorhus/latest-semver) - Get the latest stable semver version from an array of versions\n- [to-semver](https://github.com/sindresorhus/to-semver) - Get an array of valid, sorted, and cleaned semver versions from an array of strings\n- [semver-diff](https://github.com/sindresorhus/semver-diff) - Get the diff type of two semver versions: `0.0.1` `0.0.2` \u2192 `patch`\n- [semver-truncate](https://github.com/sindresorhus/semver-truncate) - Truncate a semver version: `1.2.3` \u2192 `1.2.0`\n", "import test from 'ava';\nimport semverRegex from './index.js';\n\nconst fixtures = [\n\t'0.0.0',\n\t'0.10.0',\n\t'v1.0.0',\n\t'0.0.0-foo',\n\t'1.2.3-4',\n\t'2.7.2+asdf',\n\t'1.2.3-a.b.c.10.d.5',\n\t'2.7.2-foo+bar',\n\t'1.2.3-alpha.10.beta',\n\t'1.2.3-alpha.10.beta+build.unicorn.rainbow',\n\t'foo 0.0.0 bar 0.0.0'\n];\n\ntest('matches semver versions on test', t => {\n\tfor (const fixture of fixtures) {\n\t\tt.regex(fixture, semverRegex());\n\t}\n\n\tt.notRegex('0.88', semverRegex());\n\tt.notRegex('1.0.08', semverRegex());\n\tt.notRegex('1.08.0', semverRegex());\n\tt.notRegex('01.8.0', semverRegex());\n});\n\ntest('returns semver on match', t => {\n\tt.deepEqual('0.0.0'.match(semverRegex()), ['0.0.0']);\n\tt.deepEqual('foo 0.0.0 bar 0.1.1'.match(semverRegex()), ['0.0.0', '0.1.1']);\n});\n\ntest('#7, does not return tag prefix', t => {\n\tt.deepEqual('v0.0.0'.match(semverRegex()), ['0.0.0']);\n});\n\ntest('#14, does not match sub-strings of longer semver-similar strings, respect semver@2.0.0 clause 9', t => {\n\t// TODO: Some of these are disabled as we need to improve the regex.\n\tconst invalidStrings = [\n\t\t'1',\n\t\t'1.2',\n\t\t// '1.2.3-0123',\n\t\t// '1.2.3-0123.0123',\n\t\t// '1.1.2+.123',\n\t\t'+invalid',\n\t\t'-invalid',\n\t\t'-invalid+invalid',\n\t\t'-invalid.01',\n\t\t'alpha',\n\t\t'alpha.beta',\n\t\t'alpha.beta.1',\n\t\t'alpha.1',\n\t\t'alpha+beta',\n\t\t'alpha_beta',\n\t\t'alpha.',\n\t\t'alpha..',\n\t\t'beta',\n\t\t// '1.0.0-alpha_beta',\n\t\t'-alpha.',\n\t\t// '1.0.0-alpha..',\n\t\t// '1.0.0-alpha..1',\n\t\t// '1.0.0-alpha...1',\n\t\t// '1.0.0-alpha....1',\n\t\t// '1.0.0-alpha.....1',\n\t\t// '1.0.0-alpha......1',\n\t\t// '1.0.0-alpha.......1',\n\t\t'01.1.1',\n\t\t'1.01.1',\n\t\t'1.1.01',\n\t\t'1.2',\n\t\t// '1.2.3.DEV',\n\t\t'1.2-SNAPSHOT',\n\t\t// '1.2.31.2.3----RC-SNAPSHOT.12.09.1--..12+788',\n\t\t'1.2-RC-SNAPSHOT',\n\t\t'-1.0.3-gamma+b7718',\n\t\t'+justmeta'\n\t\t// '9.8.7+meta+meta',\n\t\t// '9.8.7-whatever+meta+meta',\n\t\t// '99999999999999999999999.999999999999999999.99999999999999999----RC-SNAPSHOT.12.09.1--------------------------------..12'\n\t];\n\n\tfor (const string of invalidStrings) {\n\t\tt.notRegex(string, semverRegex());\n\t}\n});\n\ntest('#18, allow 0 as numeric identifier', t => {\n\tfor (const string of [\n\t\t'0.2.3-alpha.10.beta+build.unicorn.rainbow',\n\t\t'1.0.3-alpha.10.beta+build.unicorn.rainbow',\n\t\t'1.2.0-alpha.10.beta+build.unicorn.rainbow',\n\t\t'1.2.3-0.10.beta+build.unicorn.rainbow',\n\t\t'1.2.3-alpha.0.beta+build.unicorn.rainbow',\n\t\t'1.2.3-alpha.10.0+build.unicorn.rainbow'\n\t]) {\n\t\tt.regex(string, semverRegex());\n\t}\n});\n\n// If tests take longer than a second, it's stuck on this and we have catatrophic backtracking.\ntest('invalid version does not cause catatrophic backtracking', t => {\n\tt.regex(\n\t\t'v1.1.3-0aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$',\n\t\tsemverRegex()\n\t);\n\n\tconst postfix = '.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'.repeat(99999);\n\tt.regex(\n\t\t`v1.1.3-0aa${postfix}$`,\n\t\tsemverRegex()\n\t);\n});\n"], "fixing_code": ["export default function semverRegex() {\n\treturn /(?:(?<=^v?|\\sv?)(?:(?:0|[1-9]\\d{0,9})\\.){2}(?:0|[1-9]\\d{0,9})(?:-(?:0|[1-9]\\d*?|[\\da-z-]*?[a-z-][\\da-z-]*?){0,100}(?:\\.(?:0|[1-9]\\d*?|[\\da-z-]*?[a-z-][\\da-z-]*?))*?){0,100}(?:\\+[\\da-z-]+?(?:\\.[\\da-z-]+?)*?){0,100}\\b){1,200}/gi;\n}\n", "# semver-regex\n\n> Regular expression for matching [semver](https://github.com/npm/node-semver) versions\n\n## Install\n\n```\n$ npm install semver-regex\n```\n\n## Usage\n\n```js\nimport semverRegex from 'semver-regex';\n\nsemverRegex().test('v1.0.0');\n//=> true\n\nsemverRegex().test('1.2.3-alpha.10.beta.0+build.unicorn.rainbow');\n//=> true\n\nsemverRegex().exec('unicorn 1.0.0 rainbow')[0];\n//=> '1.0.0'\n\n'unicorn 1.0.0 and rainbow 2.1.3'.match(semverRegex());\n//=> ['1.0.0', '2.1.3']\n```\n\n**Note:** For versions coming from user-input, you are recommended to truncate the string to a sensible length to prevent abuse. For example, 100 length.\n\n## Related\n\n- [find-versions](https://github.com/sindresorhus/find-versions) - Find semver versions in a string\n- [latest-semver](https://github.com/sindresorhus/latest-semver) - Get the latest stable semver version from an array of versions\n- [to-semver](https://github.com/sindresorhus/to-semver) - Get an array of valid, sorted, and cleaned semver versions from an array of strings\n- [semver-diff](https://github.com/sindresorhus/semver-diff) - Get the diff type of two semver versions: `0.0.1` `0.0.2` \u2192 `patch`\n- [semver-truncate](https://github.com/sindresorhus/semver-truncate) - Truncate a semver version: `1.2.3` \u2192 `1.2.0`\n", "import test from 'ava';\nimport semverRegex from './index.js';\n\nconst fixtures = [\n\t'0.0.0',\n\t'0.10.0',\n\t'v1.0.0',\n\t'0.0.0-foo',\n\t'1.2.3-4',\n\t'2.7.2+asdf',\n\t'1.2.3-a.b.c.10.d.5',\n\t'2.7.2-foo+bar',\n\t'1.2.3-alpha.10.beta',\n\t'1.2.3-alpha.10.beta+build.unicorn.rainbow',\n\t'foo 0.0.0 bar 0.0.0',\n\t'99999.99999.99999'\n];\n\ntest('matches semver versions on test', t => {\n\tfor (const fixture of fixtures) {\n\t\tt.regex(fixture, semverRegex());\n\t}\n\n\tt.notRegex('0.88', semverRegex());\n\tt.notRegex('1.0.08', semverRegex());\n\tt.notRegex('1.08.0', semverRegex());\n\tt.notRegex('01.8.0', semverRegex());\n});\n\ntest('returns semver on match', t => {\n\tt.deepEqual('0.0.0'.match(semverRegex()), ['0.0.0']);\n\tt.deepEqual('foo 0.0.0 bar 0.1.1'.match(semverRegex()), ['0.0.0', '0.1.1']);\n});\n\ntest('#7, does not return tag prefix', t => {\n\tt.deepEqual('v0.0.0'.match(semverRegex()), ['0.0.0']);\n});\n\ntest('#14, does not match sub-strings of longer semver-similar strings, respect semver@2.0.0 clause 9', t => {\n\t// TODO: Some of these are disabled as we need to improve the regex.\n\tconst invalidStrings = [\n\t\t'1',\n\t\t'1.2',\n\t\t// '1.2.3-0123',\n\t\t// '1.2.3-0123.0123',\n\t\t// '1.1.2+.123',\n\t\t'+invalid',\n\t\t'-invalid',\n\t\t'-invalid+invalid',\n\t\t'-invalid.01',\n\t\t'alpha',\n\t\t'alpha.beta',\n\t\t'alpha.beta.1',\n\t\t'alpha.1',\n\t\t'alpha+beta',\n\t\t'alpha_beta',\n\t\t'alpha.',\n\t\t'alpha..',\n\t\t'beta',\n\t\t// '1.0.0-alpha_beta',\n\t\t'-alpha.',\n\t\t// '1.0.0-alpha..',\n\t\t// '1.0.0-alpha..1',\n\t\t// '1.0.0-alpha...1',\n\t\t// '1.0.0-alpha....1',\n\t\t// '1.0.0-alpha.....1',\n\t\t// '1.0.0-alpha......1',\n\t\t// '1.0.0-alpha.......1',\n\t\t'01.1.1',\n\t\t'1.01.1',\n\t\t'1.1.01',\n\t\t'1.2',\n\t\t// '1.2.3.DEV',\n\t\t'1.2-SNAPSHOT',\n\t\t// '1.2.31.2.3----RC-SNAPSHOT.12.09.1--..12+788',\n\t\t'1.2-RC-SNAPSHOT',\n\t\t'-1.0.3-gamma+b7718',\n\t\t'+justmeta'\n\t\t// '9.8.7+meta+meta',\n\t\t// '9.8.7-whatever+meta+meta',\n\t\t// '99999999999999999999999.999999999999999999.99999999999999999----RC-SNAPSHOT.12.09.1--------------------------------..12'\n\t];\n\n\tfor (const string of invalidStrings) {\n\t\tt.notRegex(string, semverRegex());\n\t}\n});\n\ntest('#18, allow 0 as numeric identifier', t => {\n\tfor (const string of [\n\t\t'0.2.3-alpha.10.beta+build.unicorn.rainbow',\n\t\t'1.0.3-alpha.10.beta+build.unicorn.rainbow',\n\t\t'1.2.0-alpha.10.beta+build.unicorn.rainbow',\n\t\t'1.2.3-0.10.beta+build.unicorn.rainbow',\n\t\t'1.2.3-alpha.0.beta+build.unicorn.rainbow',\n\t\t'1.2.3-alpha.10.0+build.unicorn.rainbow'\n\t]) {\n\t\tt.regex(string, semverRegex());\n\t}\n});\n\n// If tests take longer than a second, it's stuck on this and we have catatrophic backtracking.\ntest('invalid version does not cause catatrophic backtracking', t => {\n\tt.regex(\n\t\t'v1.1.3-0aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$',\n\t\tsemverRegex()\n\t);\n\n\tconst postfix = '.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'.repeat(99999);\n\tt.regex(\n\t\t`v1.1.3-0aa${postfix}$`,\n\t\tsemverRegex()\n\t);\n\n\tfor (let index = 1; index <= 50000; index++) {\n\t\tconst start = Date.now();\n\t\tconst fixture = `0.0.0-0${'.-------'.repeat(index)}@`;\n\t\tsemverRegex().test(fixture);\n\t\tconst difference = Date.now() - start;\n\t\tt.true(difference < 10, `Execution time: ${difference}`);\n\t}\n});\n"], "filenames": ["index.js", "readme.md", "test.js"], "buggy_code_start_loc": [2, 29, 15], "buggy_code_end_loc": [3, 30, 112], "fixing_code_start_loc": [2, 29, 15], "fixing_code_end_loc": [3, 30, 122], "type": "NVD-CWE-Other", "message": "semver-regex is vulnerable to Inefficient Regular Expression Complexity", "other": {"cve": {"id": "CVE-2021-3795", "sourceIdentifier": "security@huntr.dev", "published": "2021-09-15T17:15:10.577", "lastModified": "2022-07-29T16:54:01.837", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "semver-regex is vulnerable to Inefficient Regular Expression Complexity"}, {"lang": "es", "value": "semver-regex es vulnerable a una Complejidad de Expresi\u00f3n Regular Ineficiente"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-1333"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:semver-regex_project:semver-regex:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.3", "matchCriteriaId": "5D108CA7-83E6-4F7D-948D-D0E798BCFDBE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:semver-regex_project:semver-regex:4.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "DDB55FE1-B64B-4E67-A89E-0D4FBF9ADE91"}]}]}], "references": [{"url": "https://github.com/sindresorhus/semver-regex/commit/11c66245f4e1976dccc52977ed183696a21a3fd7", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/006624e3-35ac-448f-aab9-7b5183f30e28", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/sindresorhus/semver-regex/commit/11c66245f4e1976dccc52977ed183696a21a3fd7"}}