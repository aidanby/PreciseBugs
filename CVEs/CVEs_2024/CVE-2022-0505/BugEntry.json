{"buggy_code": ["<?php\n\n/*\n|--------------------------------------------------------------------------\n| Frontend Routes\n|--------------------------------------------------------------------------\n|\n*/\n\nRoute::name('api.')\n    ->prefix('api')\n    ->middleware(['api','admin'])\n    ->namespace('\\MicroweberPackages\\Content\\Http\\Controllers\\Api')\n    ->group(function () {\n\n        Route::post('save_edit', function (\\Illuminate\\Http\\Request $request) {\n            return save_edit($request->all());\n        })->name('content.save_edit');\n\n        Route::get('content/get_admin_js_tree_json', function(\\Illuminate\\Http\\Request $request){\n            return mw()->category_manager->get_admin_js_tree_json($request->all());\n        });\n\n        Route::post('content/set_published', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->set_published($request->all());\n        });\n\n        Route::post('content/set_unpublished', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->set_unpublished($request->all());\n        });\n        Route::post('content/reorder', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->reorder($request->all());\n        });\n\n        Route::post('content/reset_edit', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->helpers->reset_edit_field($request->all());\n        });\n\n        Route::post('content/reset_modules_settings', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->helpers->reset_modules_settings($request->all());\n        });\n\n        Route::post('content/bulk_assign', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->helpers->bulk_assign($request->all());\n        });\n        Route::post('content/copy', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->helpers->copy($request->all());\n        });\n\n\n        Route::post('content/related_content/add', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->helpers->related_content_add($request->all());\n        });\n\n        Route::post('content/related_content/remove', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->helpers->related_content_remove($request->all());\n        });\n\n        Route::post('content/related_content/reorder', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->helpers->related_content_reorder($request->all());\n        });\n\n        Route::any('content/redirect_to_content', function (\\Illuminate\\Http\\Request $request) {\n\n            if (isset($request['id'])) {\n                $id = intval($request['id']);\n                $url = content_link($id);\n                if (!$url) {\n                    $url = site_url();\n                }\n                return redirect($url);\n            }\n        });\n\n\n        Route::post('content/delete', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->helpers->delete($request->all());\n        });\n\n        Route::get('content/get_link_admin', function (\\Illuminate\\Http\\Request $request) {\n\n            if (!isset($request['id'])) {\n                return false;\n            }\n\n            $content = mw()->content_manager->get_by_id($request['id']);\n            if (!$content) {\n                return;\n            }\n\n            $segments = mw()->permalink_manager->link($content['id'], 'content', true);\n            $admin_url = route('admin.content.edit', $content['id']);\n\n            if(isset($content['content_type']) and $content['content_type']){\n                if (\\Route::has('admin.'.$content['content_type'].'.edit')) {\n                    $admin_url = route('admin.' . $content['content_type'] . '.edit', $content['id']);\n                }\n            }\n            if ($segments) {\n                return [\n                    'url' => $segments['url'],\n                    'slug_prefix' => $segments['slug_prefix'],\n                    'slug_prefix_url' => $segments['slug_prefix_url'],\n                    'slug' => $segments['slug'],\n                    'admin_url' => $admin_url ,\n                    'site_url' => site_url()\n                ];\n            }\n\n            return false;\n        });\n\n        Route::apiResource('content', 'ContentApiController');\n\n    });\n"], "fixing_code": ["<?php\n\n/*\n|--------------------------------------------------------------------------\n| Frontend Routes\n|--------------------------------------------------------------------------\n|\n*/\n\nRoute::name('api.')\n    ->prefix('api')\n    ->middleware(['api','admin'])\n    ->namespace('\\MicroweberPackages\\Content\\Http\\Controllers\\Api')\n    ->group(function () {\n\n        Route::post('save_edit', function (\\Illuminate\\Http\\Request $request) {\n            return save_edit($request->all());\n        })->name('content.save_edit');\n\n        Route::get('content/get_admin_js_tree_json', function(\\Illuminate\\Http\\Request $request){\n            return mw()->category_manager->get_admin_js_tree_json($request->all());\n        });\n\n        Route::post('content/set_published', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->set_published($request->all());\n        });\n\n        Route::post('content/set_unpublished', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->set_unpublished($request->all());\n        });\n        Route::post('content/reorder', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->reorder($request->all());\n        });\n\n        Route::post('content/reset_edit', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->helpers->reset_edit_field($request->all());\n        });\n\n        Route::post('content/reset_modules_settings', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->helpers->reset_modules_settings($request->all());\n        });\n\n        Route::post('content/bulk_assign', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->helpers->bulk_assign($request->all());\n        });\n        Route::post('content/copy', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->helpers->copy($request->all());\n        });\n\n\n        Route::post('content/related_content/add', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->helpers->related_content_add($request->all());\n        });\n\n        Route::post('content/related_content/remove', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->helpers->related_content_remove($request->all());\n        });\n\n        Route::post('content/related_content/reorder', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->helpers->related_content_reorder($request->all());\n        });\n\n        Route::any('content/redirect_to_content', function (\\Illuminate\\Http\\Request $request) {\n\n            if (isset($request['id'])) {\n                $id = intval($request['id']);\n                $url = content_link($id);\n                if (!$url) {\n                    $url = site_url();\n                }\n                return redirect($url);\n            }\n        });\n\n\n        Route::post('content/delete', function (\\Illuminate\\Http\\Request $request) {\n            return mw()->content_manager->helpers->delete($request->all());\n        }); \n\n        Route::get('content/get_link_admin', function (\\Illuminate\\Http\\Request $request) {\n\n            if (!isset($request['id'])) {\n                return false;\n            }\n\n            $content = mw()->content_manager->get_by_id($request['id']);\n            if (!$content) {\n                return;\n            }\n\n            $segments = mw()->permalink_manager->link($content['id'], 'content', true);\n            $admin_url = route('admin.content.edit', $content['id']);\n\n            if(isset($content['content_type']) and $content['content_type']){\n                if (\\Route::has('admin.'.$content['content_type'].'.edit')) {\n                    $admin_url = route('admin.' . $content['content_type'] . '.edit', $content['id']);\n                }\n            }\n            if ($segments) {\n                return [\n                    'url' => $segments['url'],\n                    'slug_prefix' => $segments['slug_prefix'],\n                    'slug_prefix_url' => $segments['slug_prefix_url'],\n                    'slug' => $segments['slug'],\n                    'admin_url' => $admin_url ,\n                    'site_url' => site_url()\n                ];\n            }\n\n            return false;\n        });\n\n        Route::apiResource('content', 'ContentApiController');\n\n    });\n"], "filenames": ["src/MicroweberPackages/Content/routes/api.php"], "buggy_code_start_loc": [78], "buggy_code_end_loc": [79], "fixing_code_start_loc": [78], "fixing_code_end_loc": [79], "type": "CWE-352", "message": "Cross-Site Request Forgery (CSRF) in Packagist microweber/microweber prior to 1.2.11.", "other": {"cve": {"id": "CVE-2022-0505", "sourceIdentifier": "security@huntr.dev", "published": "2022-02-08T09:15:08.510", "lastModified": "2022-02-11T17:06:25.293", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-Site Request Forgery (CSRF) in Packagist microweber/microweber prior to 1.2.11."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-Site Request Forgery (CSRF) en Packagist microweber/microweber versiones anteriores a 1.2.11"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.11", "matchCriteriaId": "52D59B39-B1A3-45D1-B4C4-65BEF86F2D85"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/63447b369973724f0d352a006f25af6ff71ae292", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/65b5a243-3f0c-4df3-9bab-898332180968", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/63447b369973724f0d352a006f25af6ff71ae292"}}