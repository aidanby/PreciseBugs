{"buggy_code": ["<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace Box\\Mod\\Cart\\Api;\n\n/**\n * Shopping cart management.\n */\nclass Guest extends \\Api_Abstract\n{\n    /**\n     * Get the contents of the current shopping cart.\n     * \n     * @return array Contents of the shopping cart\n     */\n    public function get()\n    {\n        $cart = $this->getService()->getSessionCart();\n\n        return $this->getService()->toApiArray($cart);\n    }\n\n    /**\n     * Completely remove shopping cart contents.\n     *\n     * @return bool\n     */\n    public function reset()\n    {\n        $cart = $this->getService()->getSessionCart();\n\n        return $this->getService()->resetCart($cart);\n    }\n\n    /**\n     * Set shopping cart currency.\n     *\n     * @param string $data['currency'] New currency code to applied to shopping cart\n     *\n     * @return bool\n     */\n    public function set_currency($data)\n    {\n        $required = [\n            'currency' => 'Currency code not passed',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $currencyService = $this->di['mod_service']('currency');\n        $currency = $currencyService->getByCode($data['currency']);\n        if (!$currency instanceof \\Model_Currency) {\n            throw new \\Box_Exception('Currency not found');\n        }\n        $cart = $this->getService()->getSessionCart();\n\n        return $this->getService()->changeCartCurrency($cart, $currency);\n    }\n\n    /**\n     * Retrieve information about currently selected shopping cart currency.\n     *\n     * @return array Currency details\n     */\n    public function get_currency()\n    {\n        $cart = $this->getService()->getSessionCart();\n\n        $currencyService = $this->di['mod_service']('currency');\n        $currency = $this->di['db']->load('Currency', $cart->currency_id);\n        if (!$currency instanceof \\Model_Currency) {\n            $currency = $currencyService->getDefault();\n        }\n\n        return $currencyService->toApiArray($currency);\n    }\n\n    /**\n     * Apply Promo code to shopping cart.\n     *\n     * @param string $promocode Promo code to apply to shopping cart\n     *\n     * @return bool\n     */\n    public function apply_promo($data)\n    {\n        $required = [\n            'promocode' => 'Promo code not passed',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $promo = $this->getService()->findActivePromoByCode($data['promocode']);\n        if (!$promo instanceof \\Model_Promo) {\n            throw new \\Box_Exception('Promo code is expired or does not exist');\n        }\n\n        if (!$this->getService()->isPromoAvailableForClientGroup($promo)) {\n            throw new \\Box_Exception('Promo can not be applied to your account');\n        }\n\n        if (!$this->getService()->promoCanBeApplied($promo)) {\n            throw new \\Box_Exception('Promo code is expired or does not exist');\n        }\n\n        $cart = $this->getService()->getSessionCart();\n\n        return $this->getService()->applyPromo($cart, $promo);\n    }\n\n    /**\n     * Removes promo from shopping cart and resets discounted prices if any.\n     *\n     * @return bool\n     */\n    public function remove_promo()\n    {\n        $cart = $this->getService()->getSessionCart();\n\n        return $this->getService()->removePromo($cart);\n    }\n\n    /**\n     * Removes product from shopping cart.\n     *\n     * @param int $data['id'] Shopping cart item id\n     *\n     * @return bool\n     */\n    public function remove_item($data)\n    {\n        $required = [\n            'id' => 'Cart item id not passed',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $cart = $this->getService()->getSessionCart();\n\n        return $this->getService()->removeProduct($cart, $data['id'], true);\n    }\n\n    /**\n     * Add a product to the shopping cart.\n     * \n     * @param array $data Product data\n     * \n     * @param int $data['id'] ID of the product to add\n     * @param bool $data['multiple'] [optional] Allow multiple items in the cart. Default is `false`\n     * \n     * @return bool\n     */\n    public function add_item($data)\n    {\n        $required = [\n            'id' => 'Product id not passed',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $cart = $this->getService()->getSessionCart();\n\n        $product = $this->di['db']->getExistingModelById('Product', $data['id'], 'Product not found');\n\n        // reset cart by default\n        if (!isset($data['multiple']) || !$data['multiple']) {\n            $this->reset();\n        }\n\n        return $this->getService()->addItem($cart, $product, $data);\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace Box\\Mod\\Cart\\Api;\n\n/**\n * Shopping cart management.\n */\nclass Guest extends \\Api_Abstract\n{\n    /**\n     * Get the contents of the current shopping cart.\n     * \n     * @return array Contents of the shopping cart\n     */\n    public function get()\n    {\n        $cart = $this->getService()->getSessionCart();\n\n        return $this->getService()->toApiArray($cart);\n    }\n\n    /**\n     * Completely remove shopping cart contents.\n     *\n     * @return bool\n     */\n    public function reset()\n    {\n        $cart = $this->getService()->getSessionCart();\n\n        return $this->getService()->resetCart($cart);\n    }\n\n    /**\n     * Set shopping cart currency.\n     *\n     * @param string $data['currency'] New currency code to applied to shopping cart\n     *\n     * @return bool\n     */\n    public function set_currency($data)\n    {\n        $required = [\n            'currency' => 'Currency code not passed',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $currencyService = $this->di['mod_service']('currency');\n        $currency = $currencyService->getByCode($data['currency']);\n        if (!$currency instanceof \\Model_Currency) {\n            throw new \\Box_Exception('Currency not found');\n        }\n        $cart = $this->getService()->getSessionCart();\n\n        return $this->getService()->changeCartCurrency($cart, $currency);\n    }\n\n    /**\n     * Retrieve information about currently selected shopping cart currency.\n     *\n     * @return array Currency details\n     */\n    public function get_currency()\n    {\n        $cart = $this->getService()->getSessionCart();\n\n        $currencyService = $this->di['mod_service']('currency');\n        $currency = $this->di['db']->load('Currency', $cart->currency_id);\n        if (!$currency instanceof \\Model_Currency) {\n            $currency = $currencyService->getDefault();\n        }\n\n        return $currencyService->toApiArray($currency);\n    }\n\n    /**\n     * Apply Promo code to shopping cart.\n     *\n     * @param string $promocode Promo code to apply to shopping cart\n     *\n     * @return bool\n     */\n    public function apply_promo($data)\n    {\n        $required = [\n            'promocode' => 'Promo code not passed',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $promo = $this->getService()->findActivePromoByCode($data['promocode']);\n        if (!$promo instanceof \\Model_Promo) {\n            throw new \\Box_Exception('Promo code is expired or does not exist');\n        }\n\n        if (!$this->getService()->isPromoAvailableForClientGroup($promo)) {\n            throw new \\Box_Exception('Promo can not be applied to your account');\n        }\n\n        if (!$this->getService()->promoCanBeApplied($promo)) {\n            throw new \\Box_Exception('Promo code is expired or does not exist');\n        }\n\n        $cart = $this->getService()->getSessionCart();\n\n        return $this->getService()->applyPromo($cart, $promo);\n    }\n\n    /**\n     * Removes promo from shopping cart and resets discounted prices if any.\n     *\n     * @return bool\n     */\n    public function remove_promo()\n    {\n        $cart = $this->getService()->getSessionCart();\n\n        return $this->getService()->removePromo($cart);\n    }\n\n    /**\n     * Removes product from shopping cart.\n     *\n     * @param int $data['id'] Shopping cart item id\n     *\n     * @return bool\n     */\n    public function remove_item($data)\n    {\n        $required = [\n            'id' => 'Cart item id not passed',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $cart = $this->getService()->getSessionCart();\n\n        return $this->getService()->removeProduct($cart, $data['id'], true);\n    }\n\n    /**\n     * Add a product to the shopping cart.\n     * \n     * @param array $data Product data\n     * \n     * @param int $data['id'] ID of the product to add\n     * @param bool $data['multiple'] [optional] Allow multiple items in the cart. Default is `false`\n     * \n     * @return bool\n     */\n    public function add_item($data)\n    {\n        $required = [\n            'id' => 'Product id not passed',\n        ];\n\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $cart = $this->getService()->getSessionCart();\n\n        $product = $this->di['db']->getExistingModelById('Product', $data['id'], 'Product not found');\n\n        if ($product->is_addon) {\n            throw new \\Box_Exception('Addon products cannot be added separately.');\n        }\n\n        $validAddons = json_decode($product->addons ?? '');\n        if(empty($validAddons)){\n            $validAddons = [];\n        }\n\n        foreach ($data['addons'] as $addon => $properties) {\n            if($properties['selected'] && !in_array($addon, $validAddons)){\n                throw new \\Box_Exception('One or more of your selected addons are not valid for the associated product.');\n            }\n        }\n\n        // reset cart by default\n        if (!isset($data['multiple']) || !$data['multiple']) {\n            $this->reset();\n        }\n\n        return $this->getService()->addItem($cart, $product, $data);\n    }\n}\n"], "filenames": ["src/modules/Cart/Api/Guest.php"], "buggy_code_start_loc": [161], "buggy_code_end_loc": [166], "fixing_code_start_loc": [162], "fixing_code_end_loc": [183], "type": "NVD-CWE-Other", "message": "Business Logic Errors in GitHub repository fossbilling/fossbilling prior to 0.5.0.", "other": {"cve": {"id": "CVE-2023-3228", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-14T06:15:08.800", "lastModified": "2023-06-17T03:10:15.150", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Business Logic Errors in GitHub repository fossbilling/fossbilling prior to 0.5.0."}, {"lang": "es", "value": "Errores de l\u00f3gica empresarial en el repositorio de GitHub fossbilling/fossbilling anterior a 0.5.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-840"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fossbilling:fossbilling:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.5.0", "matchCriteriaId": "EFD5D230-F0DE-4BCE-99B7-4074CD4799AA"}]}]}], "references": [{"url": "https://github.com/fossbilling/fossbilling/commit/b65a75fcf70feaf547d414672f78d7cbe8a98e7e", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/0a7ee1fb-e693-4259-abf8-a2c3218c1647", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/fossbilling/fossbilling/commit/b65a75fcf70feaf547d414672f78d7cbe8a98e7e"}}