{"buggy_code": ["# -*- coding: utf-8 -*-\n'''\nManagement of user accounts\n===========================\n\nThe user module is used to create and manage user settings, users can be set\nas either absent or present\n\n.. code-block:: yaml\n\n    fred:\n      user.present:\n        - fullname: Fred Jones\n        - shell: /bin/zsh\n        - home: /home/fred\n        - uid: 4000\n        - gid: 4000\n        - groups:\n          - wheel\n          - storage\n          - games\n\n    testuser:\n      user.absent\n'''\n\n# Import python libs\nimport logging\nimport os\n\n# Import salt libs\nimport salt.utils\n\nlog = logging.getLogger(__name__)\n\n\ndef _group_changes(cur, wanted, remove=False):\n    '''\n    Determine if the groups need to be changed\n    '''\n    old = set(cur)\n    new = set(wanted)\n    if (remove and old != new) or (not remove and not new.issubset(old)):\n        return True\n    return False\n\n\ndef _changes(name,\n             uid=None,\n             gid=None,\n             groups=None,\n             optional_groups=None,\n             remove_groups=True,\n             home=None,\n             createhome=True,\n             password=None,\n             enforce_password=True,\n             empty_password=False,\n             shell=None,\n             fullname='',\n             roomnumber='',\n             workphone='',\n             homephone='',\n             date=0,\n             mindays=0,\n             maxdays=999999,\n             inactdays=0,\n             warndays=7,\n             expire=-1):\n    '''\n    Return a dict of the changes required for a user if the user is present,\n    otherwise return False.\n\n    Updated in 2014.7.0 to include support for shadow attributes, all\n    attributes supported as integers only.\n    '''\n\n    if 'shadow.info' in __salt__:\n        lshad = __salt__['shadow.info'](name)\n\n    lusr = __salt__['user.info'](name)\n    if not lusr:\n        return False\n\n    change = {}\n    wanted_groups = sorted(set((groups or []) + (optional_groups or [])))\n    if uid:\n        if lusr['uid'] != uid:\n            change['uid'] = uid\n    if gid is not None:\n        if lusr['gid'] not in (gid, __salt__['file.group_to_gid'](gid)):\n            change['gid'] = gid\n    default_grp = __salt__['file.gid_to_group'](\n        gid if gid is not None else lusr['gid']\n    )\n    # remove the default group from the list for comparison purposes\n    if default_grp in lusr['groups']:\n        lusr['groups'].remove(default_grp)\n    if name in lusr['groups'] and name not in wanted_groups:\n        lusr['groups'].remove(name)\n    # remove default group from wanted_groups, as this requirement is\n    # already met\n    if default_grp in wanted_groups:\n        wanted_groups.remove(default_grp)\n    if _group_changes(lusr['groups'], wanted_groups, remove_groups):\n        change['groups'] = wanted_groups\n    if home:\n        if lusr['home'] != home:\n            change['home'] = home\n    if createhome:\n        newhome = home if home else lusr['home']\n        if newhome is not None and not os.path.isdir(newhome):\n            change['homeDoesNotExist'] = newhome\n\n    if shell:\n        if lusr['shell'] != shell:\n            change['shell'] = shell\n    if 'shadow.info' in __salt__ and 'shadow.default_hash' in __salt__:\n        if password:\n            default_hash = __salt__['shadow.default_hash']()\n            if lshad['passwd'] == default_hash \\\n                    or lshad['passwd'] != default_hash and enforce_password:\n                if lshad['passwd'] != password:\n                    change['passwd'] = password\n        if date and date is not 0 and lshad['lstchg'] != date:\n            change['date'] = date\n        if mindays and mindays is not 0 and lshad['min'] != mindays:\n            change['mindays'] = mindays\n        if maxdays and maxdays is not 999999 and lshad['max'] != maxdays:\n            change['maxdays'] = maxdays\n        if inactdays and inactdays is not 0 and lshad['inact'] != inactdays:\n            change['inactdays'] = inactdays\n        if warndays and warndays is not 7 and lshad['warn'] != warndays:\n            change['warndays'] = warndays\n        if expire and expire is not -1 and lshad['expire'] != expire:\n            change['expire'] = expire\n    # GECOS fields\n    if fullname is not None and lusr['fullname'] != fullname:\n        change['fullname'] = fullname\n    # MacOS doesn't have full GECOS support, so check for the \"ch\" functions\n    # and ignore these parameters if these functions do not exist.\n    if 'user.chroomnumber' in __salt__:\n        if roomnumber is not None and lusr['roomnumber'] != roomnumber:\n            change['roomnumber'] = roomnumber\n    if 'user.chworkphone' in __salt__:\n        if workphone is not None and lusr['workphone'] != workphone:\n            change['workphone'] = workphone\n    if 'user.chhomephone' in __salt__:\n        if homephone is not None and lusr['homephone'] != homephone:\n            change['homephone'] = homephone\n\n    return change\n\n\ndef present(name,\n            uid=None,\n            gid=None,\n            gid_from_name=False,\n            groups=None,\n            optional_groups=None,\n            remove_groups=True,\n            home=None,\n            createhome=True,\n            password=None,\n            enforce_password=True,\n            empty_password=False,\n            shell=None,\n            unique=True,\n            system=False,\n            fullname=None,\n            roomnumber=None,\n            workphone=None,\n            homephone=None,\n            date=None,\n            mindays=None,\n            maxdays=None,\n            inactdays=None,\n            warndays=None,\n            expire=None):\n    '''\n    Ensure that the named user is present with the specified properties\n\n    name\n        The name of the user to manage\n\n    uid\n        The user id to assign, if left empty then the next available user id\n        will be assigned\n\n    gid\n        The default group id\n\n    gid_from_name\n        If True, the default group id will be set to the id of the group with\n        the same name as the user.\n\n    groups\n        A list of groups to assign the user to, pass a list object. If a group\n        specified here does not exist on the minion, the state will fail.\n        If set to the empty list, the user will be removed from all groups\n        except the default group.\n\n    optional_groups\n        A list of groups to assign the user to, pass a list object. If a group\n        specified here does not exist on the minion, the state will silently\n        ignore it.\n\n    NOTE: If the same group is specified in both \"groups\" and\n    \"optional_groups\", then it will be assumed to be required and not optional.\n\n    remove_groups\n        Remove groups that the user is a member of that weren't specified in\n        the state, True by default\n\n    home\n        The custom login directory of user. Uses default value of underlying\n        system if not set. Notice that this directory does not have to exists.\n        This also the location of the home directory to create if createhome is\n        set to True.\n\n    createhome\n        If True, the home directory will be created if it doesn't exist.\n        Please note that directories leading up to the home directory\n        will NOT be created.\n\n    password\n        A password hash to set for the user. This field is only supported on\n        Linux, FreeBSD, NetBSD, OpenBSD, and Solaris.\n\n    .. versionchanged:: 0.16.0\n       BSD support added.\n\n    enforce_password\n        Set to False to keep the password from being changed if it has already\n        been set and the password hash differs from what is specified in the\n        \"password\" field. This option will be ignored if \"password\" is not\n        specified.\n\n    empty_password\n        Set to True to enable no password-less login for user\n\n    shell\n        The login shell, defaults to the system default shell\n\n    unique\n        Require a unique UID, True by default\n\n    system\n        Choose UID in the range of FIRST_SYSTEM_UID and LAST_SYSTEM_UID.\n\n\n    User comment field (GECOS) support (currently Linux, FreeBSD, and MacOS\n    only):\n\n    The below values should be specified as strings to avoid ambiguities when\n    the values are loaded. (Especially the phone and room number fields which\n    are likely to contain numeric data)\n\n    fullname\n        The user's full name\n\n    roomnumber\n        The user's room number (not supported in MacOS)\n\n    workphone\n        The user's work phone number (not supported in MacOS)\n\n    homephone\n        The user's home phone number (not supported in MacOS)\n\n\n    .. versionchanged:: 2014.7.0\n       Shadow attribute support added.\n\n    Shadow attributes support (currently Linux only):\n\n    The below values should be specified as integers.\n\n    date\n        Date of last change of password, represented in days since epoch\n        (January 1, 1970).\n\n    mindays\n        The minimum number of days between password changes.\n\n    maxdays\n        The maximum number of days between password changes.\n\n    inactdays\n        The number of days after a password expires before an account is\n        locked.\n\n    warndays\n        Number of days prior to maxdays to warn users.\n\n    expire\n        Date that account expires, represented in days since epoch (January 1,\n        1970).\n    '''\n    fullname = salt.utils.sdecode(fullname) if fullname is not None else fullname\n    roomnumber = salt.utils.sdecode(roomnumber) if roomnumber is not None else roomnumber\n    workphone = salt.utils.sdecode(workphone) if workphone is not None else workphone\n    homephone = salt.utils.sdecode(homephone) if homephone is not None else homephone\n\n    ret = {'name': name,\n           'changes': {},\n           'result': True,\n           'comment': 'User {0} is present and up to date'.format(name)}\n\n    if groups:\n        missing_groups = [x for x in groups if not __salt__['group.info'](x)]\n        if missing_groups:\n            ret['comment'] = 'The following group(s) are not present: ' \\\n                             '{0}'.format(','.join(missing_groups))\n            ret['result'] = False\n            return ret\n\n    if optional_groups:\n        present_optgroups = [x for x in optional_groups\n                             if __salt__['group.info'](x)]\n        for missing_optgroup in [x for x in optional_groups\n                                 if x not in present_optgroups]:\n            log.debug('Optional group \"{0}\" for user \"{1}\" is not '\n                      'present'.format(missing_optgroup, name))\n    else:\n        present_optgroups = None\n\n    # Log a warning for all groups specified in both \"groups\" and\n    # \"optional_groups\" lists.\n    if groups and optional_groups:\n        for isected in set(groups).intersection(optional_groups):\n            log.warning('Group \"{0}\" specified in both groups and '\n                        'optional_groups for user {1}'.format(isected, name))\n\n    if gid_from_name:\n        gid = __salt__['file.group_to_gid'](name)\n\n    if empty_password:\n        __salt__['shadow.del_password'](name)\n\n    changes = _changes(name,\n                       uid,\n                       gid,\n                       groups,\n                       present_optgroups,\n                       remove_groups,\n                       home,\n                       createhome,\n                       password,\n                       enforce_password,\n                       empty_password,\n                       shell,\n                       fullname,\n                       roomnumber,\n                       workphone,\n                       homephone,\n                       date,\n                       mindays,\n                       maxdays,\n                       inactdays,\n                       warndays,\n                       expire)\n\n    if changes:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = ('The following user attributes are set to be '\n                              'changed:\\n')\n            for key, val in changes.items():\n                ret['comment'] += '{0}: {1}\\n'.format(key, val)\n            return ret\n        # The user is present\n        if 'shadow.info' in __salt__:\n            lshad = __salt__['shadow.info'](name)\n        pre = __salt__['user.info'](name)\n        for key, val in changes.items():\n            if key == 'passwd' and not empty_password:\n                __salt__['shadow.set_password'](name, password)\n                continue\n            if key == 'date':\n                __salt__['shadow.set_date'](name, date)\n                continue\n            # run chhome once to avoid any possible bad side-effect\n            if key == 'home' and 'homeDoesNotExist' not in changes:\n                __salt__['user.chhome'](name, val, False)\n                continue\n            if key == 'homeDoesNotExist':\n                __salt__['user.chhome'](name, val, True)\n                if not os.path.isdir(val):\n                    __salt__['file.mkdir'](val, pre['uid'], pre['gid'], 0755)\n                continue\n            if key == 'mindays':\n                __salt__['shadow.set_mindays'](name, mindays)\n                continue\n            if key == 'maxdays':\n                __salt__['shadow.set_maxdays'](name, maxdays)\n                continue\n            if key == 'inactdays':\n                __salt__['shadow.set_inactdays'](name, inactdays)\n                continue\n            if key == 'warndays':\n                __salt__['shadow.set_warndays'](name, warndays)\n                continue\n            if key == 'expire':\n                __salt__['shadow.set_expire'](name, expire)\n                continue\n            if key == 'groups':\n                __salt__['user.ch{0}'.format(key)](\n                    name, val, not remove_groups\n                )\n            else:\n                __salt__['user.ch{0}'.format(key)](name, val)\n\n        post = __salt__['user.info'](name)\n        spost = {}\n        if 'shadow.info' in __salt__:\n            if lshad['passwd'] != password:\n                spost = __salt__['shadow.info'](name)\n        # See if anything changed\n        for key in post:\n            if post[key] != pre[key]:\n                ret['changes'][key] = post[key]\n        if 'shadow.info' in __salt__:\n            for key in spost:\n                if lshad[key] != spost[key]:\n                    ret['changes'][key] = spost[key]\n        if ret['changes']:\n            ret['comment'] = 'Updated user {0}'.format(name)\n        changes = _changes(name,\n                           uid,\n                           gid,\n                           groups,\n                           present_optgroups,\n                           remove_groups,\n                           home,\n                           createhome,\n                           password,\n                           enforce_password,\n                           empty_password,\n                           shell,\n                           fullname,\n                           roomnumber,\n                           workphone,\n                           homephone,\n                           date,\n                           mindays,\n                           maxdays,\n                           inactdays,\n                           warndays,\n                           expire)\n\n        if changes:\n            ret['comment'] = 'These values could not be changed: {0}'.format(\n                changes\n            )\n            ret['result'] = False\n        return ret\n\n    if changes is False:\n        # The user is not present, make it!\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'User {0} set to be added'.format(name)\n            return ret\n        if groups and present_optgroups:\n            groups.extend(present_optgroups)\n        elif present_optgroups:\n            groups = present_optgroups[:]\n        if __salt__['user.add'](name,\n                                uid=uid,\n                                gid=gid,\n                                groups=groups,\n                                home=home,\n                                shell=shell,\n                                unique=unique,\n                                system=system,\n                                fullname=fullname,\n                                roomnumber=roomnumber,\n                                workphone=workphone,\n                                homephone=homephone,\n                                createhome=createhome):\n            ret['comment'] = 'New user {0} created'.format(name)\n            ret['changes'] = __salt__['user.info'](name)\n            if 'shadow.info' in __salt__ and not salt.utils.is_windows():\n                if password and not empty_password:\n                    __salt__['shadow.set_password'](name, password)\n                    spost = __salt__['shadow.info'](name)\n                    if spost['passwd'] != password:\n                        ret['comment'] = 'User {0} created but failed to set' \\\n                                         ' password to' \\\n                                         ' {1}'.format(name, password)\n                        ret['result'] = False\n                    ret['changes']['password'] = password\n                if date:\n                    __salt__['shadow.set_date'](name, date)\n                    spost = __salt__['shadow.info'](name)\n                    if spost['lstchg'] != date:\n                        ret['comment'] = 'User {0} created but failed to set' \\\n                                         ' last change date to' \\\n                                         ' {1}'.format(name, date)\n                        ret['result'] = False\n                    ret['changes']['date'] = date\n                if mindays:\n                    __salt__['shadow.set_mindays'](name, mindays)\n                    spost = __salt__['shadow.info'](name)\n                    if spost['min'] != mindays:\n                        ret['comment'] = 'User {0} created but failed to set' \\\n                                         ' minimum days to' \\\n                                         ' {1}'.format(name, mindays)\n                        ret['result'] = False\n                    ret['changes']['mindays'] = mindays\n                if maxdays:\n                    __salt__['shadow.set_maxdays'](name, maxdays)\n                    spost = __salt__['shadow.info'](name)\n                    if spost['max'] != maxdays:\n                        ret['comment'] = 'User {0} created but failed to set' \\\n                                         ' maximum days to' \\\n                                         ' {1}'.format(name, maxdays)\n                        ret['result'] = False\n                    ret['changes']['maxdays'] = maxdays\n                if inactdays:\n                    __salt__['shadow.set_inactdays'](name, inactdays)\n                    spost = __salt__['shadow.info'](name)\n                    if spost['inact'] != inactdays:\n                        ret['comment'] = 'User {0} created but failed to set' \\\n                                         ' inactive days to' \\\n                                         ' {1}'.format(name, inactdays)\n                        ret['result'] = False\n                    ret['changes']['inactdays'] = inactdays\n                if warndays:\n                    __salt__['shadow.set_warndays'](name, warndays)\n                    spost = __salt__['shadow.info'](name)\n                    if spost['warn'] != warndays:\n                        ret['comment'] = 'User {0} created but failed to set' \\\n                                         ' warn days to' \\\n                                         ' {1}'.format(name, warndays)\n                        ret['result'] = False\n                    ret['changes']['warndays'] = warndays\n                if expire:\n                    __salt__['shadow.set_expire'](name, expire)\n                    spost = __salt__['shadow.info'](name)\n                    if spost['expire'] != expire:\n                        ret['comment'] = 'User {0} created but failed to set' \\\n                                         ' expire days to' \\\n                                         ' {1}'.format(name, expire)\n                        ret['result'] = False\n                    ret['changes']['expire'] = expire\n            elif salt.utils.is_windows():\n                if password and not empty_password:\n                    if not __salt__['user.setpassword'](name, password):\n                        ret['comment'] = 'User {0} created but failed to set' \\\n                                         ' password to' \\\n                                         ' {1}'.format(name, password)\n                        ret['result'] = False\n                    ret['changes']['passwd'] = password\n        else:\n            ret['comment'] = 'Failed to create new user {0}'.format(name)\n            ret['result'] = False\n\n    return ret\n\n\ndef absent(name, purge=False, force=False):\n    '''\n    Ensure that the named user is absent\n\n    name\n        The name of the user to remove\n\n    purge\n        Set purge to delete all of the user's files as well as the user\n\n    force\n        If the user is logged in the absent state will fail, set the force\n        option to True to remove the user even if they are logged in. Not\n        supported in FreeBSD and Solaris.\n    '''\n    ret = {'name': name,\n           'changes': {},\n           'result': True,\n           'comment': ''}\n\n    lusr = __salt__['user.info'](name)\n    if lusr:\n        # The user is present, make it not present\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'User {0} set for removal'.format(name)\n            return ret\n        beforegroups = set(salt.utils.get_group_list(name))\n        ret['result'] = __salt__['user.delete'](name, purge, force)\n        aftergroups = set([g for g in beforegroups if __salt__['group.info'](g)])\n        if ret['result']:\n            ret['changes'] = {}\n            for g in beforegroups - aftergroups:\n                ret['changes']['{0} group'.format(g)] = 'removed'\n            ret['changes'][name] = 'removed'\n            ret['comment'] = 'Removed user {0}'.format(name)\n        else:\n            ret['result'] = False\n            ret['comment'] = 'Failed to remove user {0}'.format(name)\n        return ret\n\n    ret['comment'] = 'User {0} is not present'.format(name)\n\n    return ret\n"], "fixing_code": ["# -*- coding: utf-8 -*-\n'''\nManagement of user accounts\n===========================\n\nThe user module is used to create and manage user settings, users can be set\nas either absent or present\n\n.. code-block:: yaml\n\n    fred:\n      user.present:\n        - fullname: Fred Jones\n        - shell: /bin/zsh\n        - home: /home/fred\n        - uid: 4000\n        - gid: 4000\n        - groups:\n          - wheel\n          - storage\n          - games\n\n    testuser:\n      user.absent\n'''\n\n# Import python libs\nimport logging\nimport os\n\n# Import salt libs\nimport salt.utils\n\nlog = logging.getLogger(__name__)\n\n\ndef _group_changes(cur, wanted, remove=False):\n    '''\n    Determine if the groups need to be changed\n    '''\n    old = set(cur)\n    new = set(wanted)\n    if (remove and old != new) or (not remove and not new.issubset(old)):\n        return True\n    return False\n\n\ndef _changes(name,\n             uid=None,\n             gid=None,\n             groups=None,\n             optional_groups=None,\n             remove_groups=True,\n             home=None,\n             createhome=True,\n             password=None,\n             enforce_password=True,\n             empty_password=False,\n             shell=None,\n             fullname='',\n             roomnumber='',\n             workphone='',\n             homephone='',\n             date=0,\n             mindays=0,\n             maxdays=999999,\n             inactdays=0,\n             warndays=7,\n             expire=-1):\n    '''\n    Return a dict of the changes required for a user if the user is present,\n    otherwise return False.\n\n    Updated in 2014.7.0 to include support for shadow attributes, all\n    attributes supported as integers only.\n    '''\n\n    if 'shadow.info' in __salt__:\n        lshad = __salt__['shadow.info'](name)\n\n    lusr = __salt__['user.info'](name)\n    if not lusr:\n        return False\n\n    change = {}\n    wanted_groups = sorted(set((groups or []) + (optional_groups or [])))\n    if uid:\n        if lusr['uid'] != uid:\n            change['uid'] = uid\n    if gid is not None:\n        if lusr['gid'] not in (gid, __salt__['file.group_to_gid'](gid)):\n            change['gid'] = gid\n    default_grp = __salt__['file.gid_to_group'](\n        gid if gid is not None else lusr['gid']\n    )\n    # remove the default group from the list for comparison purposes\n    if default_grp in lusr['groups']:\n        lusr['groups'].remove(default_grp)\n    if name in lusr['groups'] and name not in wanted_groups:\n        lusr['groups'].remove(name)\n    # remove default group from wanted_groups, as this requirement is\n    # already met\n    if default_grp in wanted_groups:\n        wanted_groups.remove(default_grp)\n    if _group_changes(lusr['groups'], wanted_groups, remove_groups):\n        change['groups'] = wanted_groups\n    if home:\n        if lusr['home'] != home:\n            change['home'] = home\n    if createhome:\n        newhome = home if home else lusr['home']\n        if newhome is not None and not os.path.isdir(newhome):\n            change['homeDoesNotExist'] = newhome\n\n    if shell:\n        if lusr['shell'] != shell:\n            change['shell'] = shell\n    if 'shadow.info' in __salt__ and 'shadow.default_hash' in __salt__:\n        if password:\n            default_hash = __salt__['shadow.default_hash']()\n            if lshad['passwd'] == default_hash \\\n                    or lshad['passwd'] != default_hash and enforce_password:\n                if lshad['passwd'] != password:\n                    change['passwd'] = password\n        if date and date is not 0 and lshad['lstchg'] != date:\n            change['date'] = date\n        if mindays and mindays is not 0 and lshad['min'] != mindays:\n            change['mindays'] = mindays\n        if maxdays and maxdays is not 999999 and lshad['max'] != maxdays:\n            change['maxdays'] = maxdays\n        if inactdays and inactdays is not 0 and lshad['inact'] != inactdays:\n            change['inactdays'] = inactdays\n        if warndays and warndays is not 7 and lshad['warn'] != warndays:\n            change['warndays'] = warndays\n        if expire and expire is not -1 and lshad['expire'] != expire:\n            change['expire'] = expire\n    # GECOS fields\n    if fullname is not None and lusr['fullname'] != fullname:\n        change['fullname'] = fullname\n    # MacOS doesn't have full GECOS support, so check for the \"ch\" functions\n    # and ignore these parameters if these functions do not exist.\n    if 'user.chroomnumber' in __salt__:\n        if roomnumber is not None and lusr['roomnumber'] != roomnumber:\n            change['roomnumber'] = roomnumber\n    if 'user.chworkphone' in __salt__:\n        if workphone is not None and lusr['workphone'] != workphone:\n            change['workphone'] = workphone\n    if 'user.chhomephone' in __salt__:\n        if homephone is not None and lusr['homephone'] != homephone:\n            change['homephone'] = homephone\n\n    return change\n\n\ndef present(name,\n            uid=None,\n            gid=None,\n            gid_from_name=False,\n            groups=None,\n            optional_groups=None,\n            remove_groups=True,\n            home=None,\n            createhome=True,\n            password=None,\n            enforce_password=True,\n            empty_password=False,\n            shell=None,\n            unique=True,\n            system=False,\n            fullname=None,\n            roomnumber=None,\n            workphone=None,\n            homephone=None,\n            date=None,\n            mindays=None,\n            maxdays=None,\n            inactdays=None,\n            warndays=None,\n            expire=None):\n    '''\n    Ensure that the named user is present with the specified properties\n\n    name\n        The name of the user to manage\n\n    uid\n        The user id to assign, if left empty then the next available user id\n        will be assigned\n\n    gid\n        The default group id\n\n    gid_from_name\n        If True, the default group id will be set to the id of the group with\n        the same name as the user.\n\n    groups\n        A list of groups to assign the user to, pass a list object. If a group\n        specified here does not exist on the minion, the state will fail.\n        If set to the empty list, the user will be removed from all groups\n        except the default group.\n\n    optional_groups\n        A list of groups to assign the user to, pass a list object. If a group\n        specified here does not exist on the minion, the state will silently\n        ignore it.\n\n    NOTE: If the same group is specified in both \"groups\" and\n    \"optional_groups\", then it will be assumed to be required and not optional.\n\n    remove_groups\n        Remove groups that the user is a member of that weren't specified in\n        the state, True by default\n\n    home\n        The custom login directory of user. Uses default value of underlying\n        system if not set. Notice that this directory does not have to exists.\n        This also the location of the home directory to create if createhome is\n        set to True.\n\n    createhome\n        If True, the home directory will be created if it doesn't exist.\n        Please note that directories leading up to the home directory\n        will NOT be created.\n\n    password\n        A password hash to set for the user. This field is only supported on\n        Linux, FreeBSD, NetBSD, OpenBSD, and Solaris.\n\n    .. versionchanged:: 0.16.0\n       BSD support added.\n\n    enforce_password\n        Set to False to keep the password from being changed if it has already\n        been set and the password hash differs from what is specified in the\n        \"password\" field. This option will be ignored if \"password\" is not\n        specified.\n\n    empty_password\n        Set to True to enable no password-less login for user\n\n    shell\n        The login shell, defaults to the system default shell\n\n    unique\n        Require a unique UID, True by default\n\n    system\n        Choose UID in the range of FIRST_SYSTEM_UID and LAST_SYSTEM_UID.\n\n\n    User comment field (GECOS) support (currently Linux, FreeBSD, and MacOS\n    only):\n\n    The below values should be specified as strings to avoid ambiguities when\n    the values are loaded. (Especially the phone and room number fields which\n    are likely to contain numeric data)\n\n    fullname\n        The user's full name\n\n    roomnumber\n        The user's room number (not supported in MacOS)\n\n    workphone\n        The user's work phone number (not supported in MacOS)\n\n    homephone\n        The user's home phone number (not supported in MacOS)\n\n\n    .. versionchanged:: 2014.7.0\n       Shadow attribute support added.\n\n    Shadow attributes support (currently Linux only):\n\n    The below values should be specified as integers.\n\n    date\n        Date of last change of password, represented in days since epoch\n        (January 1, 1970).\n\n    mindays\n        The minimum number of days between password changes.\n\n    maxdays\n        The maximum number of days between password changes.\n\n    inactdays\n        The number of days after a password expires before an account is\n        locked.\n\n    warndays\n        Number of days prior to maxdays to warn users.\n\n    expire\n        Date that account expires, represented in days since epoch (January 1,\n        1970).\n    '''\n    fullname = salt.utils.sdecode(fullname) if fullname is not None else fullname\n    roomnumber = salt.utils.sdecode(roomnumber) if roomnumber is not None else roomnumber\n    workphone = salt.utils.sdecode(workphone) if workphone is not None else workphone\n    homephone = salt.utils.sdecode(homephone) if homephone is not None else homephone\n\n    ret = {'name': name,\n           'changes': {},\n           'result': True,\n           'comment': 'User {0} is present and up to date'.format(name)}\n\n    if groups:\n        missing_groups = [x for x in groups if not __salt__['group.info'](x)]\n        if missing_groups:\n            ret['comment'] = 'The following group(s) are not present: ' \\\n                             '{0}'.format(','.join(missing_groups))\n            ret['result'] = False\n            return ret\n\n    if optional_groups:\n        present_optgroups = [x for x in optional_groups\n                             if __salt__['group.info'](x)]\n        for missing_optgroup in [x for x in optional_groups\n                                 if x not in present_optgroups]:\n            log.debug('Optional group \"{0}\" for user \"{1}\" is not '\n                      'present'.format(missing_optgroup, name))\n    else:\n        present_optgroups = None\n\n    # Log a warning for all groups specified in both \"groups\" and\n    # \"optional_groups\" lists.\n    if groups and optional_groups:\n        for isected in set(groups).intersection(optional_groups):\n            log.warning('Group \"{0}\" specified in both groups and '\n                        'optional_groups for user {1}'.format(isected, name))\n\n    if gid_from_name:\n        gid = __salt__['file.group_to_gid'](name)\n\n    if empty_password:\n        __salt__['shadow.del_password'](name)\n\n    changes = _changes(name,\n                       uid,\n                       gid,\n                       groups,\n                       present_optgroups,\n                       remove_groups,\n                       home,\n                       createhome,\n                       password,\n                       enforce_password,\n                       empty_password,\n                       shell,\n                       fullname,\n                       roomnumber,\n                       workphone,\n                       homephone,\n                       date,\n                       mindays,\n                       maxdays,\n                       inactdays,\n                       warndays,\n                       expire)\n\n    if changes:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = ('The following user attributes are set to be '\n                              'changed:\\n')\n            for key, val in changes.items():\n                if key == 'password':\n                    val = 'XXX-REDACTED-XXX'\n                ret['comment'] += '{0}: {1}\\n'.format(key, val)\n            return ret\n        # The user is present\n        if 'shadow.info' in __salt__:\n            lshad = __salt__['shadow.info'](name)\n        pre = __salt__['user.info'](name)\n        for key, val in changes.items():\n            if key == 'passwd' and not empty_password:\n                __salt__['shadow.set_password'](name, password)\n                continue\n            if key == 'date':\n                __salt__['shadow.set_date'](name, date)\n                continue\n            # run chhome once to avoid any possible bad side-effect\n            if key == 'home' and 'homeDoesNotExist' not in changes:\n                __salt__['user.chhome'](name, val, False)\n                continue\n            if key == 'homeDoesNotExist':\n                __salt__['user.chhome'](name, val, True)\n                if not os.path.isdir(val):\n                    __salt__['file.mkdir'](val, pre['uid'], pre['gid'], 0755)\n                continue\n            if key == 'mindays':\n                __salt__['shadow.set_mindays'](name, mindays)\n                continue\n            if key == 'maxdays':\n                __salt__['shadow.set_maxdays'](name, maxdays)\n                continue\n            if key == 'inactdays':\n                __salt__['shadow.set_inactdays'](name, inactdays)\n                continue\n            if key == 'warndays':\n                __salt__['shadow.set_warndays'](name, warndays)\n                continue\n            if key == 'expire':\n                __salt__['shadow.set_expire'](name, expire)\n                continue\n            if key == 'groups':\n                __salt__['user.ch{0}'.format(key)](\n                    name, val, not remove_groups\n                )\n            else:\n                __salt__['user.ch{0}'.format(key)](name, val)\n\n        post = __salt__['user.info'](name)\n        spost = {}\n        if 'shadow.info' in __salt__:\n            if lshad['passwd'] != password:\n                spost = __salt__['shadow.info'](name)\n        # See if anything changed\n        for key in post:\n            if post[key] != pre[key]:\n                ret['changes'][key] = post[key]\n        if 'shadow.info' in __salt__:\n            for key in spost:\n                if lshad[key] != spost[key]:\n                    ret['changes'][key] = spost[key]\n        if ret['changes']:\n            ret['comment'] = 'Updated user {0}'.format(name)\n        changes = _changes(name,\n                           uid,\n                           gid,\n                           groups,\n                           present_optgroups,\n                           remove_groups,\n                           home,\n                           createhome,\n                           password,\n                           enforce_password,\n                           empty_password,\n                           shell,\n                           fullname,\n                           roomnumber,\n                           workphone,\n                           homephone,\n                           date,\n                           mindays,\n                           maxdays,\n                           inactdays,\n                           warndays,\n                           expire)\n\n        if changes:\n            ret['comment'] = 'These values could not be changed: {0}'.format(\n                changes\n            )\n            ret['result'] = False\n        return ret\n\n    if changes is False:\n        # The user is not present, make it!\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'User {0} set to be added'.format(name)\n            return ret\n        if groups and present_optgroups:\n            groups.extend(present_optgroups)\n        elif present_optgroups:\n            groups = present_optgroups[:]\n        if __salt__['user.add'](name,\n                                uid=uid,\n                                gid=gid,\n                                groups=groups,\n                                home=home,\n                                shell=shell,\n                                unique=unique,\n                                system=system,\n                                fullname=fullname,\n                                roomnumber=roomnumber,\n                                workphone=workphone,\n                                homephone=homephone,\n                                createhome=createhome):\n            ret['comment'] = 'New user {0} created'.format(name)\n            ret['changes'] = __salt__['user.info'](name)\n            if 'shadow.info' in __salt__ and not salt.utils.is_windows():\n                if password and not empty_password:\n                    __salt__['shadow.set_password'](name, password)\n                    spost = __salt__['shadow.info'](name)\n                    if spost['passwd'] != password:\n                        ret['comment'] = 'User {0} created but failed to set' \\\n                                         ' password to' \\\n                                         ' {1}'.format(name, 'XXX-REDACTED-XXX')\n                        ret['result'] = False\n                    ret['changes']['password'] = 'XXX-REDACTED-XXX'\n                if date:\n                    __salt__['shadow.set_date'](name, date)\n                    spost = __salt__['shadow.info'](name)\n                    if spost['lstchg'] != date:\n                        ret['comment'] = 'User {0} created but failed to set' \\\n                                         ' last change date to' \\\n                                         ' {1}'.format(name, date)\n                        ret['result'] = False\n                    ret['changes']['date'] = date\n                if mindays:\n                    __salt__['shadow.set_mindays'](name, mindays)\n                    spost = __salt__['shadow.info'](name)\n                    if spost['min'] != mindays:\n                        ret['comment'] = 'User {0} created but failed to set' \\\n                                         ' minimum days to' \\\n                                         ' {1}'.format(name, mindays)\n                        ret['result'] = False\n                    ret['changes']['mindays'] = mindays\n                if maxdays:\n                    __salt__['shadow.set_maxdays'](name, maxdays)\n                    spost = __salt__['shadow.info'](name)\n                    if spost['max'] != maxdays:\n                        ret['comment'] = 'User {0} created but failed to set' \\\n                                         ' maximum days to' \\\n                                         ' {1}'.format(name, maxdays)\n                        ret['result'] = False\n                    ret['changes']['maxdays'] = maxdays\n                if inactdays:\n                    __salt__['shadow.set_inactdays'](name, inactdays)\n                    spost = __salt__['shadow.info'](name)\n                    if spost['inact'] != inactdays:\n                        ret['comment'] = 'User {0} created but failed to set' \\\n                                         ' inactive days to' \\\n                                         ' {1}'.format(name, inactdays)\n                        ret['result'] = False\n                    ret['changes']['inactdays'] = inactdays\n                if warndays:\n                    __salt__['shadow.set_warndays'](name, warndays)\n                    spost = __salt__['shadow.info'](name)\n                    if spost['warn'] != warndays:\n                        ret['comment'] = 'User {0} created but failed to set' \\\n                                         ' warn days to' \\\n                                         ' {1}'.format(name, warndays)\n                        ret['result'] = False\n                    ret['changes']['warndays'] = warndays\n                if expire:\n                    __salt__['shadow.set_expire'](name, expire)\n                    spost = __salt__['shadow.info'](name)\n                    if spost['expire'] != expire:\n                        ret['comment'] = 'User {0} created but failed to set' \\\n                                         ' expire days to' \\\n                                         ' {1}'.format(name, expire)\n                        ret['result'] = False\n                    ret['changes']['expire'] = expire\n            elif salt.utils.is_windows():\n                if password and not empty_password:\n                    if not __salt__['user.setpassword'](name, password):\n                        ret['comment'] = 'User {0} created but failed to set' \\\n                                         ' password to' \\\n                                         ' {1}'.format(name, 'XXX-REDACTED-XXX')\n                        ret['result'] = False\n                    ret['changes']['passwd'] = 'XXX-REDACTED-XXX'\n        else:\n            ret['comment'] = 'Failed to create new user {0}'.format(name)\n            ret['result'] = False\n\n    return ret\n\n\ndef absent(name, purge=False, force=False):\n    '''\n    Ensure that the named user is absent\n\n    name\n        The name of the user to remove\n\n    purge\n        Set purge to delete all of the user's files as well as the user\n\n    force\n        If the user is logged in the absent state will fail, set the force\n        option to True to remove the user even if they are logged in. Not\n        supported in FreeBSD and Solaris.\n    '''\n    ret = {'name': name,\n           'changes': {},\n           'result': True,\n           'comment': ''}\n\n    lusr = __salt__['user.info'](name)\n    if lusr:\n        # The user is present, make it not present\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'User {0} set for removal'.format(name)\n            return ret\n        beforegroups = set(salt.utils.get_group_list(name))\n        ret['result'] = __salt__['user.delete'](name, purge, force)\n        aftergroups = set([g for g in beforegroups if __salt__['group.info'](g)])\n        if ret['result']:\n            ret['changes'] = {}\n            for g in beforegroups - aftergroups:\n                ret['changes']['{0} group'.format(g)] = 'removed'\n            ret['changes'][name] = 'removed'\n            ret['comment'] = 'Removed user {0}'.format(name)\n        else:\n            ret['result'] = False\n            ret['comment'] = 'Failed to remove user {0}'.format(name)\n        return ret\n\n    ret['comment'] = 'User {0} is not present'.format(name)\n\n    return ret\n"], "filenames": ["salt/states/user.py"], "buggy_code_start_loc": [369], "buggy_code_end_loc": [556], "fixing_code_start_loc": [370], "fixing_code_end_loc": [558], "type": "CWE-534", "message": "win_useradd, salt-cloud and the Linode driver in salt 2015.5.x before 2015.5.6, and 2015.8.x before 2015.8.1 leak password information in debug logs.", "other": {"cve": {"id": "CVE-2015-6941", "sourceIdentifier": "cve@mitre.org", "published": "2017-08-09T16:29:00.330", "lastModified": "2017-08-21T15:25:04.690", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "win_useradd, salt-cloud and the Linode driver in salt 2015.5.x before 2015.5.6, and 2015.8.x before 2015.8.1 leak password information in debug logs."}, {"lang": "es", "value": "win_useradd, salt-cloud y el driver Linode en salt en versones 2015.5.x anteriores a la 2015.5.6 y en verisones 2015.8.x anteriores a la 2015.8.1 filtran informaci\u00f3n de contrase\u00f1as en logs de depuraci\u00f3n."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": true, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-534"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt_2015:5.0:*:*:*:*:*:*:*", "matchCriteriaId": "AF19AFD0-BEA1-49AE-B7AA-72F489C40C96"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt_2015:5.1:*:*:*:*:*:*:*", "matchCriteriaId": "A6BB8AA1-58C4-4821-A73E-68AAE471B51C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt_2015:5.2:*:*:*:*:*:*:*", "matchCriteriaId": "A850E0A7-0F2F-4613-AE31-CB84DCE7783B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt_2015:5.3:*:*:*:*:*:*:*", "matchCriteriaId": "DBD6BEAA-802E-4076-9BC2-2C6B887D4F5F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt_2015:5.4:*:*:*:*:*:*:*", "matchCriteriaId": "2B5A707B-D385-4DEE-B5AB-A2B6C0173FF2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt_2015:5.5:*:*:*:*:*:*:*", "matchCriteriaId": "29ADF421-1BC4-4535-A1D5-D361131D3723"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt_2015:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "88F173C3-65F0-46B6-A61E-D49FA882FDA7"}]}]}], "references": [{"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1273066", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory", "VDB Entry"]}, {"url": "https://docs.saltstack.com/en/latest/topics/releases/2015.5.6.html", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://docs.saltstack.com/en/latest/topics/releases/2015.8.1.html", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/twangboy/salt/commit/c0689e32154c41f59840ae10ffc5fbfa30618710", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/twangboy/salt/commit/c0689e32154c41f59840ae10ffc5fbfa30618710"}}