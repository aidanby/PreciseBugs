{"buggy_code": ["phpPgAdmin History\n------------------\n\nVersion 5.0\n-----------\n\nReleased: 29th November 2010\n\nFeatures\n* Support for PostgreSQL 8.4 and 9.0\n* Support for database level collation for 8.4+\n* Support for schema level export\n* Add ability to alter schema ownership\n* Clean up domain support and improve interface\n* Add support for commenting on functions\n* Allow user to rename role/users and set new passwords at the same time\n* Greatly enhanced Full-Text-Search capabilities (ioguix, Loomis_K)\n* Overhauled Selenium Test suite to support multiple database versions\n* Optimized application graphics (Limo Driver)\n* Support for Column Level Privileges\n* Allow users to specify a template database at database creation time\n* Support killing processes  \n* Add ability to create indexes concurrently\n* Much better support of autovacuum configuration\n* Add an admin page for table level\n* Refactored autocompletion:\n  * fix support for cross-schema objects \n  * support multi-field FK\n  * support for pagination of values in the auto-complete list\n* Allow user to logicaly group their server under custom named node in the browser tree\n* New themes (Cappuccino and Gotar) and a theme switcher on the introduction page\n* Auto refresh Locks page\n* Auto refresh Processes page\n* Link in the bottom of the page to go to top of page\n* Browsing on Foreign Keys (When browsing a table, clicking on a FK value, jump to the PK row)\n\n\nBugs\n* Fix problems with query tracking on overly long queries\n* Ensure pg_dump paths are valid\n* Fix multiple bugs about quoting and escaping database objects names with special chars\n* Fix multiple bugs in the browser tree\n* Fix multiple bugs on the SQL and script file import form\n* One security fix about code injection\n* Don't allow inserting on a table without fields\n* Some fix about commenting databases\n* removed deprecated functions from PHP 5.3\n* Lot of code cleanup\n* Many other small minor bugs found on our way\n* Fix the operator property page\n\nTranslations\n* Czech (Marek Cernocky)\n* Greek (Adamantios Diamantidis)\n* Brazillian Portuguese (Fernando Wendt)\n* Galician (Adri\u00e1n Chaves Fern\u00e1ndez)\n\nIncompatabilities\n* No longer support PHP < 5.0\n* No longer support Postgres < 7.4\n\n\nVersion 4.2\n-----------\n\nFeatures\n* Add Analyze to Table Level Actions (ioguix)\n* Add support for multiple actions on main pages (ioguix, Robert Treat)\n* Added favicon for Mozilla and a backwards compatible version for IE.\n* Allow browsers to save different usernames and passwords for different servers.\n* Pagination selection available for reports\n* You can configure reports db, schema and table names\n* Add support for creating a table using an exsting one (ioguix)\n* Auto-expand a node in the tree browser if there are no other nodes (Tomasz Pala)\n* Add column about fields constraints type + links in table properties page (ioguix)\n* Support for built-in Full Text Search (Ivan Zolotukhin)  \n* Add alter name, owner & comment on views (ioguix)\n* Add column about called procedure + links to their definition in the triggers\n  properties page (ioguix)\n* Add Support for Enum type creation (ioguix,xzilla)\n* Add alter name, owner, comment and properties for sequences (ioguix)\n* Add function costing options (xzilla)\n* Add alter owner & schema on function (xzilla)\n* Add a popup window for the session requests history (karl, ioguix)\n* Add alter table, view, sequence schema (ioguix)\n\nBugs\n* Fix inability to assign a field type/domain of a different schema\n* Can't edit a report and set its comment to empty\n* Fix PHP5 Strict mode complaints \n* Fix IN/NOT IN to accept text input lists 'a','b'\n* Fix bytea doesn't display as NULL when NULL\n* Schema qualifing every object to avoid non wanted behaviour about users' rights\n  and schema_path\n* Remove shared credentials when logging out of single server, to prevent automatic re-login\n* Improved SSL connection handling, fix problems with connections from older php builds \n* Fix bug with long role name truncation \n* Fix bug with DELETE FROM when dropping a row (spq)\n* Fix problems when deleteing PUBLIC schema \n* Fix several bugs in aggregate support\n* Improve autocompletion support\n* Tighten up use of global scope variables\n\nTranslations\n* utf traditional chinese (Kuo Chaoyi)\n* utf simplified chinese (Kuo Chaoyi)\n* Italian (Nicola Soranzo)\n* Catalan (Bernat Pegueroles)\n* French (ioguix)\n* German (Albe Laurenz, spq)\n* Japanese (Tadashi Jokagi)\n* Hungarian (Sulyok Peti) \n\nVersion 4.1.3\n-------------\n\nBugs\n* Eliminate use of $_SERVER['PHP_SELF']. This fixes a regression in 4.1.2 for \n  non-mainstream locales (including SQL_ASCII)\n* Validate client supplied server against entries in config.inc.php \n* Fix undefined variable when altering a field in a table on PostgreSQL < 8.0\n\nVersion 4.1.2\n-------------\n\nBugs\n* Fix inability to assign a field type/domain of a different schema\n* Fix PHP5 Strict mode complaints \n* Fix IN/NOT IN to accept text input lists 'a','b'.\n* Fix bytea doesn't display as NULL when NULL\n* Fix bug in view creation wizard\n* Fix XSS vulnerability:\n   http://www.securityfocus.com/bid/24115/\n   Escape HTML special characters before using $_SERVER['PHP_SELF']\n\nVersion 4.1.1\n-------------\n\nBugs\n* Fix problem where failed update would report as duplicate update error and \n  fail to return edit screen\n* Fix error when using $conf[owned_only] on 8.1 & 8.2 \n* Fix error displaying schema names for parents of inherited tables\n* Clean up non-standard escape warnings for PostgreSQL 8.2\n* Fix improper text quoting for droping roles and aggregates\n* Fix bug when dumping mixed case table names in PostgreSQL 8.2\n\nVersion 4.1\n-----------\n\nFeatures\n* New icons by Niko <ennixo@free.fr>, from the graphics repository on pgFoundry.\n* Added icons to bread crumb trail and tabs.\n* Send encrypted passwords over the wire wherever possible.\n* Alter sequence, nextval and setval (Guillaume)\n* Auto-select 'WITHOUT OIDS' if 'default_with_oids' setting is false (Guillaume)\n* Autovacuum configuration support (Robert Treat)\n* Basic ROLE support (Chris Kings-Lynne, Javier Carlos)\n* Add support for SSL connections (Eric Kinolik)\n* Display content of pg_locks view (Javier Carlos)\n* Add labels for checkboxes/radio buttons for improved usability (Guillaume)\n* Display Prepared Transactions (Javier Carlos)\n* Re-enable table browsing from tree icons (ioguix) \n* Add Support For IN/OUT Parameters (John Jawed)\n* Add column level information into the tree browser (ioguix) \n* Promote column level interaction into its own page (ioguix) \n* Add automatic lookup of foreign key values in insert/update fields (John Jawed)\n* Add ability to create/drop/alter custom aggregates (Javier Carlos)\n* Add enable/disable trigger (John Jawed)\n* Add global comments for databases and tablespaces  \n\nTranslations\n* Catalan from Bernat \n* Romanian from Alin Vaida\n\nVersion 4.0\n-----------\n\nFeatures\n* Slony replication support (Thanks to sponsorship from SpikeSource)\n* Allow current database to be at the top\n* Allow base URL of PostgreSQL documentation to be configured\n* Allow variable size textarea when editing values (Juergen Weigert)\n* Allow SQL script upload to parse arbitrary SQL, including multiline\n  SQL statements.  Improve output to show every command as its executed\n  and SELECT results.\n* Add rudimentary support for PostgreSQL 8.1 and 8.2\n* primary key and unique key at table creation (Andreas Huber)\n* Add row|statement level options to create trigger for >= 7.4 (Robert Treat)\n* Allow altering name (for >= 7.4) and owner (for >= 8.0) of a database (Bryan Encina)\n* Allow login to several servers simultaneously\n* Rearrange frame layout to suit multi-server support\n* New browser tree with dynamically loading branches\n  (Using XLoadTree2 from http://webfx.eae.net/)\n* Allow language change from the intro page at any time\n* Avoid getting and setting encoding queries if possible\n* Avoid version query in PHP 5 / PostgreSQL 7.4+\n* Avoid query for superuser status in PHP 5 / PostgreSQL 7.4+\n* Put PostgreSQL 7.4+ in read only mode for pagination of results\n  to avoid executing selects that have write side effects.\n* Allow re-using username and password for all servers - saves re-entering\n  username and password for every server in a pool.\n* Make default language 'auto' indicating auto detect.  If a language is\n  deliberately specifed, then that will always be used and no detection will\n  occur.\n* ADOdb library updated to version 4.65\n  \nBugs\n* Tree Icons are displayed middle instead of top\n* Ensure login frame is always at top level (Russell Smith)\n* Fix non-ASCII characters inserted in Unicode databases as HTML entities with\n non-UTF8 web servers (Markus Bertheau)\n* Fix export to work with release candidates and beta releases as well as finals\n (Russell Smith)\n* Fix port selection for local connections\n* Fix timeouts on long running operations (Adrian Nida)\n* Allow Multiline character and character varying editing and inserting\n* Add automatic browser language selection for all languages\n* Stop duplicate insert on re-POST of data\n* Fix bug with exporting schema for servers < 7.3\n* Fix opclasses on 7.2 and below\n* Fix listing of opaque functions in 7.2\n* Actually fix PHP 4.4.0's new strict references\n\nTranslations\n* Japanese from Tadashi Jokagi\n* Danish from Arne Eckmann\n* Arabic from Zaki\n* Romanian from Alin\n* Afrikaans from Petri\n* Polish from Rafal (utf-8 encoding)\n* Slovak from Andrej\n* German from Markus\n* Spanish From Martin\n* Hungarian from Sulyok\n* Turkish from Devrim\n\nVersion 3.5.6\n-------------\n\nBugs\n* Actually fix PHP 4.4.0's new strict references\n\nVersion 3.5.5\n-------------\n\nBugs\n* Fix for PHP 4.4.0's new strict references\n* Small improvement to Opera browser detection in the tree\n* Fix listing of opaque functions in 7.2\n* Fix listing of opclasses and functions pre 7.3\n\nVersion 3.5.4\n-------------\n\nBugs\n* Fix security hole in include() of language file:\n   http://secunia.com/advisories/15941/\n  Check now requires that the language filename be in the list\n  of known allowed filenames.\n* Fix that functions returning cstring were not being listed\n* Make parsing of PostgreSQL 1-dimensional arrays correct.  Makes\n  named function parameter use more reliable.\n* Fix downloading of the results of multiline queries.\n\nVersion 3.5.3\n-------------\n\nBugs\n* Fix using schema enabled dump on non-schema enabled backend\n* Don't try setting no timeout when in safe mode\n* Reload browser after executing arbitrary SQL\n* Fix browser in RTL languages\n* Fix inability to drop database using the drop link\n* Fix last internal oid value for PostgreSQL 8.0\n* Fix (again) dumping on v8 for windows, exclude dumping some objects.\n\nTranslations\n* Portuguese from Francisco\n\nVersion 3.5.2\n-------------\n\nBugs\n* Fix export to work with release candidates and beta releases as well as finals\n (Russell Smith)\n* Fix port selection for local connections (Russell Smith)\n* Fix timeouts on long running operations (Adrian Nida)\n* Allow Multiline character and character varying editing and inserting\n* Do browser language detection for all languages\n\nTranslations\n* Japanese from Tadashi\n* Danish from Arne\n\nVersion 3.5.1\n-------------\n\nBugs\n* Support 8.0beta5 schema tablespace changes\n* Help link fixes\n* Estimated row count in 7.0 and 7.1 fixes\n* Priviliges nav fix\n* Function privileges fix\n* Search path fix\n* pg_dump on win32 8.0 native fix\n\nTranslations\n* Romanian from Alin\n* Italian updates from Nicola\n\nVersion 3.5\n-----------\n\nFeatures\n* Context-sensitive online help system\n* Use language preferencies from browser (Markus Bertheau, Nicola Soranzo)\n* Tablespace support for 8.0\n* Support cancelling backend processes in 8.0\n* Allow setting privileges on databases\n* Allow setting schema search path in SQL window\n* Allow filtering find results by object type\n* Show function arguments in find results\n* Support 8.0's named function arguments\n* \"Sticky\" navigation.  phpPgAdmin will now remember while tab you are\n  looking at (eg. 'Indexes') when you change which table you are viewing.\n* New fast navigation bar.  A breadcrumb style navigation bar for fast\n  jumping between areas.\n* Much improved grant/revoke feature\n* Allow creating and viewing composite types\n* pg_dumpall integration.  Now you can download the entire cluster via\n  phpPgAdmin.\n* Show line numbers when viewing functions\n* Syntax highlighting for PL/SQL, PL/PgSQL, PL/PHP, PL/Ruby, PL/Java, \n  PL/J, PL/Python and PL/Perl functions, thanks to Jacob D. Cohen's\n  BSD-licensed highlighting code on rafb.net\n* Add page navigation links at the bottom as well as the top of the page\n  when browsing results.\n* Support for 8.0's alter column type\n* Support for 8.0's add columns with defaults and not null\n\nTranslations\n* Romanian from Alin\n* Arabic from Zaki\n* Japanese from Tadashi\n* Spanish from Robert & Martin\n* Mongolian from Erdenemandal\n* Ukrainian from Alex Rootoff\n* Hebrew from jonatan\n* Hungarian from Sulyok\n* French from Pascal\n* Afrikaans from Petri\n* Turkish from Devrim\n* Slovak from Andrej\n* German from Markus\n* Italian from Nicola\n* Polish from Rafal\n\nBugs\n* Fix that non-Auto mode import didn't work (Adrian Nida)\n* Fix inability to drop constraints when using a non-english translation\n* Work around MSIE's failure to handle downloads in SSL mode\n* Allow insert, update, delete, references and trigger to be granted\n  and revoked on views.\n\nVersion 3.4.1\n-------------\n\nBugs\n* Fix export of mixed case tables pre 7.4\n* Fix table export problems pre 7.3\n* Fix join clause created by view wizard for pre 7.3\n* Fix reindex of mixed case indexes\n* Show domains in type lists in appropriate places\n* Fix for multiline CDATA parsing in XML import\n* Fix missing _schema notice in reports\n\nVersion 3.4\n-----------\n\nFeatures\n* Add CACHE and CYCLE parameters in sequence creation\n* View, add, edit and delete comments on tables, views, schemas, \n  aggregates, conversions, operators, functions, types,\n  opclasses, sequences and columns (Dan Boren & ChrisKL)\n* Add config file option for turning off the display of comments\n* Allow creating array columns in tables\n* Allow adding array columns to tables\n* Allow creating domains with type length and arrays\n* Show domain base type and comment in domains list\n* Allow import of CSV, Tabbed and XML data.  \"Auto\" mode chooses\n  import mode based on the file extension.\n* Allow upload and execution of _basic_ SQL scripts\n* More admin features available: vacuum, analyze, cluster all and reindex\n  (with all options) (Bryan Encina)\n* Fix SQL popup window to reload when the database is changed so\n  that the correct page encoding is used.\n* Create view wizard (Bryan Encina)\n* Allow specification of MATCH, DEFERRABLE and INITIALLY DEFERRED on\n  foreign keys.\n* Automatically uncheck the NULL checkbox when data is typed in the value\n  field while editing data.\n* Show query runtime when executing arbitrary SQL\n* Allow renaming functions when backend supports it\n* Views are now more like tables.  They are listed in the browser,\n  you can view the virtual columns of the view and its column defaults.\n  Columns in view can also be renamed and have defaults set.\n* Allow viewing, dropping and creation of rules on views.\n* Support for 8.0-dev ALTER COLUMN TYPE, adding of SERIAL and BIGSERIAL\n  columns, adding NOT NULL columns and adding columns with defaults.\n\nBugs\n* Fix pg_dump output for PostgreSQL 7.0.x and 7.1.x\n* In 7.4 pg_dump, specify schema when dumping tables\n* Fix bug in displaying array types in 7.0.x\n* Fix bug where views appeared as tables in 7.0.x search results\n* Fix bug where find object SQL on < 7.2 was broken\n* Fix Find for domain constraints\n* Fix popup SQL window so that two different phpPgAdmin instances should\n  not want to use the same pop-up.\n* Fix create table if you don't supply as many fields as you originally\n  specified.\n* Fix schema support for views\n\nTranslations\n* Trad. Chinese from Chih-Hsin Lee\n* Italian from Nicola\n* Spanish from Martin\n* Slovak from Andrej\n* German from Markus\n* Turkish from Devrim\n* Hungarian from Sulyok\n* French from Pascal\n* Polish from Rafal\n* Russian from Alex\n\nVersion 3.3.1\n-------------\n\nBugs\n* Fix table stats for <= 7.2\n\nTranslations\n* Spanish from Martin\n\nVersion 3.3\n-----------\n\nFeatures\n* Database dump feature, which uses pg_dump\n* Large speed improvements by reducing number of database\n  connections and using external style sheet.\n* SQL pop-up window now defaults to the current database\n* Display aggregates and operator classes\n* Integration with the PostgreSQL statistics collector.  See\n  table and index performance and usage information.\n* Display user session defaults for PostgreSQL >= 7.3\n* Rename user feature for PostgreSQL >= 7.4\n* Create functions returning arrays and table types\n* Allow editing Select results by oid\n* Allow pagination of queries entered in the SQL box\n* Allow EXPLAIN ANALYZE of SQL queries (in both SQL boxes)\n* Default cursor conveniently in SQL box and Find\n\nBugs\n* Object browser fixed for databases with no schemas\n* Properly detect that reports database is missing\n* Fix for alter column on PostgreSQL 7.1\n* phpPgAdmin now works without '.' in the include_path\n* Can now remove expire dates on user accounts\n* Properties of mixed case named views work in 7.4\n\nTranslations\n* Spanish from Martin Marques\n* Japanese from Tadashi Jokagi\n* Swedish from Stefan Malmqvist\n* Slovak from Andrej Misovik\n* Hungarian from Sulyok Peter\n* Trad. Chinese from Chih-Hsin Lee\n* Italian from Nicola Soranzo\n* Afrikaans from Petri Jooste\n* Turkish from Devrim Gunduz\n* German from Markus Bertheau\n* Czech from Libor Vanek\n* Russian from Alex Khodorivsky\n\nVersion 3.2.1\n-------------\n\nBugs\n* Trailing newline problem in chinese-sim translation fixed\n\nTranslations\n* French from Pascal\n* Russian from Step\n\nVersion 3.2\n-----------\n\nFeatures\n* PostgreSQL 8.0 CVS support\n* Option to dump table structure, data or structure and data\n* Set datestyle and extra_float_digits when dumping data\n* Results of table browse, table select, view browsing and report browsing\n  can now ALL be sorted by column\n* Result rows of table selects can now be edited and deleted\n* Extra login security to prevent logging into servers as postgres and\n  no password - a VERY common newbie error.\n* Cluster indexes and indexed constraints (with analyze)\n* Display clustered status of indexes and indexed constraints\n* Table info - shows tables that reference the table, parent tables,\n  and child tables.\n* Choice of operator when performing a Select\n* 'Select All' feature of table selects now available on view\n  selects.\n* Removed any trace of MySQL support\n* Show casts\n* Show conversions\n* Show languages\n* Make table icon link to browse table\n* New show_advanced option that allows the hiding or display of\n  \"advanced\" objects such as conversions, types, operators, casts and\n  languages.\n* Find Object feature can now find conversions, languages, domains,\n  constraints, indexes, rules and triggers.\n* Better language Makefile for translators\n* The SQL box now remembers your query when you click 'Back'.\n\nBugs\n* Added legal DOCTYPE\n* Allow creating foreign keys to tables not in current schema\n* Always add brackets around CHECK () constraints\n* Never display an index in both Indexes and Constraints\n* BIGSERIAL missing from PostgreSQL 7.2\n* Types lengths (eg. varchar(255)) weren't being displayed properly\n  in PostgreSQL 7.0.x\n* Resetting sequence on 7.1+ now restarts at 1, not 2\n* Remove deprecated column default 'now' from SQL script\n* Properly escape pg_ in internal queries\n\nTranslations\n* Afrikaans from Petri Jooste\n* Hungarian from Sulyok P\u00e9ter\n* German update from Markus Bertheau\n* Trad. Chinese from Chih-Hsin Lee\n* Hungarian from Peti \n* Spanish update from Martin Marques\n* Slovak update from Andrej Misovic\n* Turkish update from Devrim\n* Swedish update from Stefan\n* Italian update from Nicola\n\nVersion 3.1\n-----------\n\nBug Fixes:\n* Table browsing for 7.4 fixed\n* Synch script for translators disabled due to bugginess.  If you want\n  to use it, just comment out the warning lines from the script itself.\n* Change HTML download to XHTML and make it a 100% conforming document, with DTD\n* Alter XML format to allow future features\n\nTranslations:\n* Trad. Chinese\n* Dutch\n* Spanish\n* Swedish\n* Turkish\n* French\n* Japanese\n\nVersion 3.1-rc-1\n----------------\n\nBug Fixes\n* Table browsing for != 7.3\n* SQL window improvements\n* Translation improvements\n\nVersion 3.1-beta-1\n------------------\n\nFeatures:\n* Add first & last links to nav.  Double number of pages shown.\n* Allow granting privileges WITH GRANT OPTION for 7.4\n* Allow revoking GRANT OPTION with CASCADE option for 7.4\n* Display new PostgreSQL 7.4 grant options and grantor in privileges\n* Find object feature\n* Support for domains in 7.3 and domain constraints and alter domain in 7.4\n* Add/drop users to/from groups\n* Alter (rename) triggers\n* Pop-up SQL window from Mark Gibson\n* Superusers can always see all databases\n* Default database encoding for languages\n* Convert our images to PNG format\n* Allow creating tables WITHOUT OIDS\n* Show boolean values as TRUE or FALSE when viewing data\n* Allow renaming table and changing table owner\n* Refresh feature on table browse\n* Support better formatted view dumps in 7.4\n* When browsing data, numeric types are aligned right\n* Ability to create unique and partial indexes\n* View and edit table comments\n* Changed XML format significantly.  Now doesn't use field names as\n  tag names, outputs column type information, and is in correct XML format!\n* Save result sets as views and reports in most cases \n* Download the results of selects and reports\n* Tick all box on Select feature\n* Export in HTML format\n* Allow listing of operators\n* Add a robots.txt file to prevent search engine indexation\n* Can now safely edit row based on OID.  Guards are in place against duplicate OIDs.\n* Works properly if you have cookies disabled\n\nBug Fixes:\n* Lots of NULL value in table dump fixes (XML format changed slightly)\n* Boolean default values and general boolean field handling fixes\n* Support zero column tables\n* Correctly display the contents of bytea fields\n* Consider information_schema to be a system object\n* Remember fields if index creation fails\n* Fix saving and loading function volatility\n* Don't list domains under types\n* Lots of reports fixes (titles, page reloads, etc.)\n* Selecting for NULL values in Select feature\n\nTranslations:\n* Italian translation update from Nicola Soranzo\n* German update from Markus Bertheau\n* Spanish update from Martin Marques\n* Trad. Chinese update from Chih-Hsin Lee\n* Russian update from Step\n* Slovak update from Andrej\n* Polish update from Rafal\n* Swedish translation from Stefan Malqvist\n* Turkish update from Devrim Gunduz\n* German update from Markus Bertheau\n* Traditional Chinese update from Chih-Hsin Lee\n* Spanish update from Martin\n\nVersion 3.0.1\n-------------\n\nBug Fixes\n* Lots of NULL value in table dump fixes (XML format changed slightly)\n* Support zero column tables\n* Correctly display the contents of bytea fields\n* Error in ADODB_base.php\n* Fix saving and loading function volatility\n* Don't list domains under types\n\nVersion 3.0\n-----------\n\n* German update from Markus Bertheau\n* Russian update from Alexander Khodorivsky\n\nVersion 3.0-rc-2\n----------------\n\n* Slovak update from Andrej Misovic\n* Japanese update from Tadashi Jokagi\n* Added 'defaultdb' per-connection variable\n  for installations where connection to template1\n  is disabled.\n* Removed uses of call time pass by reference,\n  since it is a deprecated feature of PHP. \n\nVersion 3.0-rc-1\n----------------\n\n* Fix drop database reload browser bug\n* Look & Feel upgrade from Davey\n* Value & expression on edit row\n* Chinese update from Chih-Hsin Lee \n* Fixed support for functions and sequences\n  containing bizarre characters\n\nVersion 3.0-beta-1\n-------------------\n\n* Cascade drop on columns and constraints\n* Czech translation\n* Preserve spaces when displaying data\n* Greatly improved PostgreSQL 7.2, 7.1 and 7.0 support\n* Italian translation\n* Show database version in top bar \n* Many features useful for PostgreSQL hosting:\n\t- Hide reports\n\t- Filter for owned reports\n\t- Hide admin for non-super users\n\t- Easy for a user to change their own password\n\t- Enforceable minimum password length\n* Switched to PEAR's HTML_TreeMenu to avoid license issue\n* Function editor can handle setof functions, and all\n  function properties for volatility, etc.\n* Manage permissions on functions\n* Massive table browsing improvements:\n\t- Sort ascending and descending by clicking\n\t  on field name\n\t- Trim long strings.  Use 'expand' and 'collapse' to\n\t  see full strings or trimmed strings.\n* Revoke on objects.  Grant or revoke to multiple groups\n  and users at once.\n* Brazilian Portuguese translation from Angelo Rigo\n\nVersion 3.0.0-dev-4\n-------------------\n\n* Sort on a column when browsing a table\n* Slovak translation\n* Turkish translation\n* German translation\n* Reload browser after create/drop of database, schemas and tables\n* Select on views\n* Add foreign key constraint, with actions\n* Cascade drop on all objects\n\nVersion 3.0.0-dev-3\n-------------------\n\n* French translation\n* Russian translations\n* Japanese translations\n* Trigger definitions\n* ADODB upgrade\n* Allow editing of non-null unique\n\nVersion 3.0.0-dev-2\n-------------------\n\n* Language files now use an array of strings\n* Almost complete Chinese translation\n* Create sequence\n* Create trigger\n* Create index\n* Add check constraint\n* Lots of small fixes\n* Add column\n\nVersion 3.0.0-dev-1\n-------------------\n\n* Renamed to phpPgAdmin from WebDB\n* Heaps of other stuff\n\nVersion 0.6 - 24-Dec-2002\n-------------------------\n\n* Support short_tags off\n* Fix browsing tables, pagination, etc.\n* Fix all error handling\n* Fix problems with apostrophes in database, usernames or passwords\n\nVersion 0.5 - 20-Dec-2002\n-------------------------\n\n* Initial public release\n* Still many problems making it unsuitable for production.\n\nVersion 0.1 - Early 2002\n------------------------\n\n* Initial development version\n\n", "<?php\n\t/**\n\t * Class to hold various commonly used functions\n\t *\n\t * $Id: Misc.php,v 1.171 2008/03/17 21:35:48 ioguix Exp $\n\t */\n\n\tclass Misc {\n\t\t// Tracking string to include in HREFs\n\t\tvar $href;\n\t\t// Tracking string to include in forms\n\t\tvar $form;\n\n\t\t/* Constructor */\n\t\tfunction Misc() {\n\t\t}\n\n\t\t/**\n\t\t * Checks if dumps are properly set up\n\t\t * @param $all (optional) True to check pg_dumpall, false to just check pg_dump\n\t\t * @return True, dumps are set up, false otherwise\n\t\t */\n\t\tfunction isDumpEnabled($all = false) {\n\t\t\t$info = $this->getServerInfo();\n\t\t\treturn !empty($info[$all ? 'pg_dumpall_path' : 'pg_dump_path']);\n\t\t}\n\n\t\t/**\n\t\t * Sets the href tracking variable\n\t\t */\n\t\tfunction setHREF() {\n\t\t\t$this->href = $this->getHREF();\n\t\t}\n\n\t\t/**\n\t\t * Get a href query string, excluding objects below the given object type (inclusive)\n\t\t */\n\t\tfunction getHREF($exclude_from = null) {\n\t\t\t$href = '';\n\t\t\tif (isset($_REQUEST['server']) && $exclude_from != 'server') {\n\t\t\t\t$href .= 'server=' . urlencode($_REQUEST['server']);\n\t\t\t\tif (isset($_REQUEST['database']) && $exclude_from != 'database') {\n\t\t\t\t\t$href .= '&amp;database=' . urlencode($_REQUEST['database']);\n\t\t\t\t\tif (isset($_REQUEST['schema']) && $exclude_from != 'schema') {\n\t\t\t\t\t\t$href .= '&amp;schema=' . urlencode($_REQUEST['schema']);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $href;\n\t\t}\n\n\t\t/**\n\t\t * Sets the form tracking variable\n\t\t */\n\t\tfunction setForm() {\n\t\t\t$this->form = '';\n\t\t\tif (isset($_REQUEST['server'])) {\n\t\t\t\t$this->form .= \"<input type=\\\"hidden\\\" name=\\\"server\\\" value=\\\"\" . htmlspecialchars($_REQUEST['server']) . \"\\\" />\\n\";\n\t\t\t\tif (isset($_REQUEST['database'])) {\n\t\t\t\t\t$this->form .= \"<input type=\\\"hidden\\\" name=\\\"database\\\" value=\\\"\" . htmlspecialchars($_REQUEST['database']) . \"\\\" />\\n\";\n\t\t\t\t\tif (isset($_REQUEST['schema'])) {\n\t\t\t\t\t\t$this->form .= \"<input type=\\\"hidden\\\" name=\\\"schema\\\" value=\\\"\" . htmlspecialchars($_REQUEST['schema']) . \"\\\" />\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Render a value into HTML using formatting rules specified\n\t\t * by a type name and parameters.\n\t\t *\n\t\t * @param $str The string to change\n\t\t *\n\t\t * @param $type Field type (optional), this may be an internal PostgreSQL type, or:\n\t\t *\t\t\tyesno    - same as bool, but renders as 'Yes' or 'No'.\n\t\t *\t\t\tpre      - render in a <pre> block.\n\t\t *\t\t\tnbsp     - replace all spaces with &nbsp;'s\n\t\t *\t\t\tverbatim - render exactly as supplied, no escaping what-so-ever.\n\t\t *\t\t\tcallback - render using a callback function supplied in the 'function' param.\n\t\t *\n\t\t * @param $params Type parameters (optional), known parameters:\n\t\t *\t\t\tnull     - string to display if $str is null, or set to TRUE to use a default 'NULL' string,\n\t\t *\t\t\t           otherwise nothing is rendered.\n\t\t *\t\t\tclip     - if true, clip the value to a fixed length, and append an ellipsis...\n\t\t *\t\t\tcliplen  - the maximum length when clip is enabled (defaults to $conf['max_chars'])\n\t\t *\t\t\tellipsis - the string to append to a clipped value (defaults to $lang['strellipsis'])\n\t\t *\t\t\ttag      - an HTML element name to surround the value.\n\t\t *\t\t\tclass    - a class attribute to apply to any surrounding HTML element.\n\t\t *\t\t\talign    - an align attribute ('left','right','center' etc.)\n\t\t *\t\t\ttrue     - (type='bool') the representation of true.\n\t\t *\t\t\tfalse    - (type='bool') the representation of false.\n\t\t *\t\t\tfunction - (type='callback') a function name, accepts args ($str, $params) and returns a rendering.\n\t\t *\t\t\tlineno   - prefix each line with a line number.\n\t\t *\t\t\tmap      - an associative array.\n\t\t *\n\t\t * @return The HTML rendered value\n\t\t */\n\t\tfunction printVal($str, $type = null, $params = array()) {\n\t\t\tglobal $lang, $conf, $data;\n\n\t\t\t// Shortcircuit for a NULL value\n\t\t\tif (is_null($str))\n\t\t\t\treturn isset($params['null'])\n\t\t\t\t\t\t? ($params['null'] === true ? '<i>NULL</i>' : $params['null'])\n\t\t\t\t\t\t: '';\n\n\t\t\tif (isset($params['map']) && isset($params['map'][$str])) $str = $params['map'][$str];\n\n\t\t\t// Clip the value if the 'clip' parameter is true.\n\t\t\tif (isset($params['clip']) && $params['clip'] === true) {\n\t\t\t\t$maxlen = isset($params['cliplen']) && is_integer($params['cliplen']) ? $params['cliplen'] : $conf['max_chars'];\n\t\t\t\t$ellipsis = isset($params['ellipsis']) ? $params['ellipsis'] : $lang['strellipsis'];\n\t\t\t\tif (strlen($str) > $maxlen) {\n\t\t\t\t\t$str = substr($str, 0, $maxlen-1) . $ellipsis;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$out = '';\n\n\t\t\tswitch ($type) {\n\t\t\t\tcase 'int2':\n\t\t\t\tcase 'int4':\n\t\t\t\tcase 'int8':\n\t\t\t\tcase 'float4':\n\t\t\t\tcase 'float8':\n\t\t\t\tcase 'money':\n\t\t\t\tcase 'numeric':\n\t\t\t\tcase 'oid':\n\t\t\t\tcase 'xid':\n\t\t\t\tcase 'cid':\n\t\t\t\tcase 'tid':\n\t\t\t\t\t$align = 'right';\n\t\t\t\t\t$out = nl2br(htmlspecialchars($str));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'yesno':\n\t\t\t\t\tif (!isset($params['true'])) $params['true'] = $lang['stryes'];\n\t\t\t\t\tif (!isset($params['false'])) $params['false'] = $lang['strno'];\n\t\t\t\t\t// No break - fall through to boolean case.\n\t\t\t\tcase 'bool':\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tif (is_bool($str)) $str = $str ? 't' : 'f';\n\t\t\t\t\tswitch ($str) {\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\t$out = (isset($params['true']) ? $params['true'] : $lang['strtrue']);\n\t\t\t\t\t\t\t$align = 'center';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\t$out = (isset($params['false']) ? $params['false'] : $lang['strfalse']);\n\t\t\t\t\t\t\t$align = 'center';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$out = htmlspecialchars($str);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'bytea':\n\t\t\t\t\t$tag = 'div';\n\t\t\t\t\t$class = 'pre';\n\t\t\t\t\t$out = $data->escapeBytea($str);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'errormsg':\n\t\t\t\t\t$tag = 'pre';\n\t\t\t\t\t$class = 'error';\n\t\t\t\t\t$out = htmlspecialchars($str);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'pre':\n\t\t\t\t\t$tag = 'pre';\n\t\t\t\t\t$out = htmlspecialchars($str);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'prenoescape':\n\t\t\t\t\t$tag = 'pre';\n\t\t\t\t\t$out = $str;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'nbsp':\n\t\t\t\t\t$out = nl2br(str_replace(' ', '&nbsp;', htmlspecialchars($str)));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'verbatim':\n\t\t\t\t\t$out = $str;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'callback':\n\t\t\t\t\t$out = $params['function']($str, $params);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'prettysize':\n\t\t\t\t\tif ($str == -1) \n\t\t\t\t\t\t$out = $lang['strnoaccess'];\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$limit = 10 * 1024;\n\t\t\t\t\t\t$mult = 1;\n\t\t\t\t\t\tif ($str < $limit * $mult)\n\t\t\t\t\t\t\t$out = $str.' '.$lang['strbytes'];\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$mult *= 1024;\n\t\t\t\t\t\t\tif ($str < $limit * $mult)\n\t\t\t\t\t\t\t\t$out = floor(($str + $mult / 2) / $mult).' '.$lang['strkb'];\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$mult *= 1024;\n\t\t\t\t\t\t\t\tif ($str < $limit * $mult)\n\t\t\t\t\t\t\t\t\t$out = floor(($str + $mult / 2) / $mult).' '.$lang['strmb'];\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$mult *= 1024;\n\t\t\t\t\t\t\t\t\tif ($str < $limit * $mult)\n\t\t\t\t\t\t\t\t\t\t$out = floor(($str + $mult / 2) / $mult).' '.$lang['strgb'];\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$mult *= 1024;\n\t\t\t\t\t\t\t\t\t\tif ($str < $limit * $mult)\n\t\t\t\t\t\t\t\t\t\t\t$out = floor(($str + $mult / 2) / $mult).' '.$lang['strtb'];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'slonystatus':\n\t\t\t\t\tswitch ($str) {\n\t\t\t\t\tcase 'insync':\n\t\t\t\t\t\t$out = $lang['strhealthy'];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'outofsync':\n\t\t\t\t\t\t$out = $lang['stroutofsync'];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$out = $lang['strunknown'];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// If the string contains at least one instance of >1 space in a row, a tab\n\t\t\t\t\t// character, a space at the start of a line, or a space at the start of\n\t\t\t\t\t// the whole string then render within a pre-formatted element (<pre>).\n\t\t\t\t\tif (preg_match('/(^ |  |\\t|\\n )/m', $str)) {\n\t\t\t\t\t\t$tag = 'pre';\n\t\t\t\t\t\t$class = 'data';\n\t\t\t\t\t\t$out = htmlspecialchars($str);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$out = nl2br(htmlspecialchars($str));\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isset($params['class'])) $class = $params['class'];\n\t\t\tif (isset($params['align'])) $align = $params['align'];\n\n\t\t\tif (!isset($tag) && (isset($class) || isset($align))) $tag = 'div';\n\n\t\t\tif (isset($tag)) {\n\t\t\t\t$alignattr = isset($align) ? \" style=\\\"text-align: {$align}\\\"\" : '';\n\t\t\t\t$classattr = isset($class) ? \" class=\\\"{$class}\\\"\" : '';\n\t\t\t\t$out = \"<{$tag}{$alignattr}{$classattr}>{$out}</{$tag}>\";\n\t\t\t}\n\n\t\t\t// Add line numbers if 'lineno' param is true\n\t\t\tif (isset($params['lineno']) && $params['lineno'] === true) {\n\t\t\t\t$lines = explode(\"\\n\", $str);\n\t\t\t\t$num = count($lines);\n\t\t\t\tif ($num > 0) {\n\t\t\t\t\t$temp = \"<table>\\n<tr><td class=\\\"{$class}\\\" style=\\\"vertical-align: top; padding-right: 10px;\\\"><pre class=\\\"{$class}\\\">\";\n\t\t\t\t\tfor ($i = 1; $i <= $num; $i++) {\n\t\t\t\t\t\t$temp .= $i . \"\\n\";\n\t\t\t\t\t}\n\t\t\t\t\t$temp .= \"</pre></td><td class=\\\"{$class}\\\" style=\\\"vertical-align: top;\\\">{$out}</td></tr></table>\\n\";\n\t\t\t\t\t$out = $temp;\n\t\t\t\t}\n\t\t\t\tunset($lines);\n\t\t\t}\n\n\t\t\treturn $out;\n\t\t}\n\n\t\t/**\n\t\t * A function to recursively strip slashes.  Used to\n\t\t * enforce magic_quotes_gpc being off.\n\t\t * @param &var The variable to strip\n\t\t */\n\t\tfunction stripVar(&$var) {\n\t\t\tif (is_array($var)) {\n\t\t\t\tforeach($var as $k => $v) {\n\t\t\t\t\t$this->stripVar($var[$k]);\n\n\t\t\t\t\t/* magic_quotes_gpc escape keys as well ...*/\n\t\t\t\t\tif (is_string($k)) {\n\t\t\t\t\t\t$ek = stripslashes($k);\n\t\t\t\t\t\tif ($ek !== $k) {\n\t\t\t\t\t\t\t$var[$ek] = $var[$k];\n\t\t\t\t\t\t\tunset($var[$k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\t$var = stripslashes($var);\n\t\t}\n\n\t\t/**\n\t\t * Print out the page heading and help link\n\t\t * @param $title Title, already escaped\n\t\t * @param $help (optional) The identifier for the help link\n\t\t */\n\t\tfunction printTitle($title, $help = null) {\n\t\t\tglobal $data, $lang;\n\n\t\t\techo \"<h2>\";\n\t\t\t$this->printHelp($title, $help);\n\t\t\techo \"</h2>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Print out a message\n\t\t * @param $msg The message to print\n\t\t */\n\t\tfunction printMsg($msg) {\n\t\t\tif ($msg != '') echo \"<p class=\\\"message\\\">{$msg}</p>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Creates a database accessor\n\t\t */\n\t\tfunction getDatabaseAccessor($database, $server_id = null) {\n\t\t\tglobal $lang, $conf, $misc, $_connection;\n\n\t\t\t$server_info = $this->getServerInfo($server_id);\n\n\t\t\t// Perform extra security checks if this config option is set\n\t\t\tif ($conf['extra_login_security']) {\n\t\t\t\t// Disallowed logins if extra_login_security is enabled.\n\t\t\t\t// These must be lowercase.\n\t\t\t\t$bad_usernames = array('pgsql', 'postgres', 'root', 'administrator');\n\n\t\t\t\t$username = strtolower($server_info['username']);\n\n\t\t\t\tif ($server_info['password'] == '' || in_array($username, $bad_usernames)) {\n\t\t\t\t\tunset($_SESSION['webdbLogin'][$_REQUEST['server']]);\n\t\t\t\t\t$msg = $lang['strlogindisallowed'];\n\t\t\t\t\tinclude('./login.php');\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Create the connection object and make the connection\n\t\t\t$_connection = new Connection(\n\t\t\t\t$server_info['host'],\n\t\t\t\t$server_info['port'],\n\t\t\t\t$server_info['sslmode'],\n\t\t\t\t$server_info['username'],\n\t\t\t\t$server_info['password'],\n\t\t\t\t$database\n\t\t\t);\n\n\t\t\t// Get the name of the database driver we need to use.\n\t\t\t// The description of the server is returned in $platform.\n\t\t\t$_type = $_connection->getDriver($platform);\n\t\t\tif ($_type === null) {\n\t\t\t\tprintf($lang['strpostgresqlversionnotsupported'], $postgresqlMinVer);\n\t\t\t\texit;\n\t\t\t}\n\t\t\t$this->setServerInfo('platform', $platform, $server_id);\n\t\t\t$this->setServerInfo('pgVersion', $_connection->conn->pgVersion, $server_id);\n\n\t\t\t// Create a database wrapper class for easy manipulation of the\n\t\t\t// connection.\n\t\t\tinclude_once('./classes/database/' . $_type . '.php');\n\t\t\t$data = new $_type($_connection->conn);\n\t\t\t$data->platform = $_connection->platform;\n\n\t\t\treturn $data;\n\t\t}\n\n\n\t\t/**\n\t\t * Prints the page header.  If global variable $_no_output is\n\t\t * set then no header is drawn.\n\t\t * @param $title The title of the page\n\t\t * @param $script script tag\n\t\t */\n\t\tfunction printHeader($title = '', $script = null, $frameset = false) {\n\t\t\tglobal $appName, $lang, $_no_output, $conf;\n\n\t\t\tif (!isset($_no_output)) {\n\t\t\t\theader(\"Content-Type: text/html; charset=\" . $lang['appcharset']);\n\t\t\t\t// Send XHTML headers, or regular XHTML strict headers\n\t\t\t\techo \"<?xml version=\\\"1.0\\\" encoding=\\\"\", htmlspecialchars($lang['appcharset']), \"\\\"?>\\n\";\n\t\t\t\tif ($frameset == true) {\n\t\t\t\t\techo \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Frameset//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\\\">\\n\";\n\t\t\t\t} else if (isset($conf['use_xhtml_strict']) && $conf['use_xhtml_strict']) {\n\t\t\t\t\techo \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-Strict.dtd\\\">\\n\";\n\t\t\t\t} else {\n\t\t\t\t\techo \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\\n\";\n\t\t\t\t}\n\t\t\t\techo \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"{$lang['applocale']}\\\" lang=\\\"{$lang['applocale']}\\\"\";\n\t\t\t\tif (strcasecmp($lang['applangdir'], 'ltr') != 0) echo \" dir=\\\"\", htmlspecialchars($lang['applangdir']), \"\\\"\";\n\t\t\t\techo \">\\n\";\n\n\t\t\t\techo \"<head>\\n\";\n\t\t\t\techo \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset={$lang['appcharset']}\\\" />\\n\";\n\t\t\t\t// Theme\n\t\t\t\techo \"<link rel=\\\"stylesheet\\\" href=\\\"themes/{$conf['theme']}/global.css\\\" type=\\\"text/css\\\" />\\n\";\n\t\t\t\techo \"<link rel=\\\"shortcut icon\\\" href=\\\"images/themes/{$conf['theme']}/Favicon.ico\\\" type=\\\"image/vnd.microsoft.icon\\\" />\\n\";\n\t\t\t\techo \"<link rel=\\\"icon\\\" type=\\\"image/png\\\" href=\\\"images/themes/{$conf['theme']}/Introduction.png\\\" />\\n\";\n\t\t\t\techo \"<title>\", htmlspecialchars($appName);\n\t\t\t\tif ($title != '') echo \" - {$title}\";\n\t\t\t\techo \"</title>\\n\";\n\n\t\t\t\tif ($script) echo \"{$script}\\n\";\n\t\t\t\techo \"</head>\\n\";\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Prints the page footer\n\t\t * @param $doBody True to output body tag, false otherwise\n\t\t */\n\t\tfunction printFooter($doBody = true) {\n\t\t\tglobal $_reload_browser, $_reload_drop_database;\n\t\t\tglobal $lang, $_no_bottom_link;\n\n\t\t\tif ($doBody) {\n\t\t\t\tif (isset($_reload_browser)) $this->printReload(false);\n\t\t\t\telseif (isset($_reload_drop_database)) $this->printReload(true);\n\t\t\t\tif (!isset($_no_bottom_link)) \n\t\t\t\t\techo \"<a href=\\\"#\\\" class=\\\"bottom_link\\\">\".$lang['strgotoppage'].\"</a>\";\n\n\t\t\t\techo \"</body>\\n\";\n\t\t\t}\n\t\t\techo \"</html>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Prints the page body.\n\t\t * @param $doBody True to output body tag, false otherwise\n\t\t * @param $bodyClass - name of body class\n\t\t */\n\t\tfunction printBody($bodyClass = '', $doBody = true ) {\n\t\t\tglobal $_no_output;\n\n\t\t\tif (!isset($_no_output)) {\n\t\t\t\tif ($doBody) {\n\t\t\t\t\t$bodyClass = htmlspecialchars($bodyClass);\n\t\t\t\t\techo \"<body\", ($bodyClass == '' ? '' : \" class=\\\"{$bodyClass}\\\"\");\n\t\t\t\t\techo \">\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Outputs JavaScript code that will reload the browser\n\t\t * @param $database True if dropping a database, false otherwise\n\t\t */\n\t\tfunction printReload($database) {\n\t\t\techo \"<script type=\\\"text/javascript\\\">\\n\";\n\t\t\tif ($database)\n\t\t\t\techo \"\\tparent.frames.browser.location.href=\\\"browser.php\\\";\\n\";\n\t\t\telse\n\t\t\t\techo \"\\tparent.frames.browser.location.reload();\\n\";\n\t\t\techo \"</script>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Display navigation tabs\n\t\t * @param $tabs An associative array of tabs definitions, see printNav() for an example.\n\t\t * @param $activetab The name of the tab to be highlighted.\n\t\t */\n\t\tfunction printTabs($tabs, $activetab) {\n\t\t\tglobal $misc, $conf, $data, $lang;\n\n\t\t\tif (is_string($tabs)) {\n\t\t\t\t$_SESSION['webdbLastTab'][$tabs] = $activetab;\n\t\t\t\t$tabs = $this->getNavTabs($tabs);\n\t\t\t}\n\n\t\t\techo \"<table class=\\\"tabs\\\"><tr>\\n\";\n\t\t\t#echo \"<div class=\\\"tabs\\\">\\n\";\n\n\t\t\t# FIXME: don't count hidden tabs\n\t\t\t$width = (int)(100 / count($tabs)).'%';\n\n\t\t\tforeach ($tabs as $tab_id => $tab) {\n\t\t\t\t$active = ($tab_id == $activetab) ? ' active' : '';\n\n\t\t\t\tif (!isset($tab['hide']) || $tab['hide'] !== true) {\n\n\t\t\t\t\t$tablink = \"<a\" . $this->printActionUrl($tab, $_REQUEST, 'href') . \">\";\n\n\t\t\t\t\tif (isset($tab['icon']) && $icon = $this->icon($tab['icon']))\n\t\t\t\t\t\t$tablink .= \"<span class=\\\"icon\\\"><img src=\\\"{$icon}\\\" alt=\\\"{$tab['title']}\\\" /></span>\";\n\n\t\t\t\t\t$tablink .= \"<span class=\\\"label\\\">{$tab['title']}</span></a>\";\n\n\t\t\t\t\techo \"<td style=\\\"width: {$width}\\\" class=\\\"tab{$active}\\\">\";\n\t\t\t\t\t#echo \"<span class=\\\"tab{$active}\\\" style=\\\"white-space:nowrap;\\\">\";\n\n\t\t\t\t\tif (isset($tab['help']))\n\t\t\t\t\t\t$this->printHelp($tablink, $tab['help']);\n\t\t\t\t\telse\n\t\t\t\t\t\techo $tablink;\n\n\t\t\t\t\techo \"</td>\\n\";\n\t\t\t\t\t#echo \"</span>\\n\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\techo \"</tr></table>\\n\";\n\t\t\t#echo \"</div>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Retrieve the tab info for a specific tab bar.\n\t\t * @param $section The name of the tab bar.\n\t\t */\n\t\tfunction getNavTabs($section) {\n\t\t\tglobal $data, $lang, $conf, $slony;\n\n\t\t\t$hide_advanced = ($conf['show_advanced'] === false);\n\n\t\t\tswitch ($section) {\n\t\t\t\tcase 'root':\n\t\t\t\t\treturn array (\n\t\t\t\t\t\t'intro' => array (\n\t\t\t\t\t\t\t'title' => $lang['strintroduction'],\n\t\t\t\t\t\t\t'url'   => \"intro.php\",\n\t\t\t\t\t\t\t'icon'  => 'Introduction',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'servers' => array (\n\t\t\t\t\t\t\t'title' => $lang['strservers'],\n\t\t\t\t\t\t\t'url'   => \"servers.php\",\n\t\t\t\t\t\t\t'icon'  => 'Servers',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\tcase 'server':\n\t\t\t\tcase 'report':\n\t\t\t\t\t$hide_users = !$data->isSuperUser();\n\t\t\t\t\t$tmp = array (\n\t\t\t\t\t\t'databases' => array (\n\t\t\t\t\t\t\t'title' => $lang['strdatabases'],\n\t\t\t\t\t\t\t'url'   => 'all_db.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'server'),\n\t\t\t\t\t\t\t'help'  => 'pg.database',\n\t\t\t\t\t\t\t'icon'  => 'Databases',\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tif ($data->hasRoles()) {\n\t\t\t\t\t\t$tmp = array_merge($tmp, array(\n\t\t\t\t\t\t\t'roles' => array (\n\t\t\t\t\t\t\t\t'title' => $lang['strroles'],\n\t\t\t\t\t\t\t\t'url'   => 'roles.php',\n\t\t\t\t\t\t\t\t'urlvars' => array('subject' => 'server'),\n\t\t\t\t\t\t\t\t'hide'  => $hide_users,\n\t\t\t\t\t\t\t\t'help'  => 'pg.role',\n\t\t\t\t\t\t\t\t'icon'  => 'Roles',\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$tmp = array_merge($tmp, array(\n\t\t\t\t\t\t\t'users' => array (\n\t\t\t\t\t\t\t\t'title' => $lang['strusers'],\n\t\t\t\t\t\t\t\t'url'   => 'users.php',\n\t\t\t\t\t\t\t\t'urlvars' => array('subject' => 'server'),\n\t\t\t\t\t\t\t\t'hide'  => $hide_users,\n\t\t\t\t\t\t\t\t'help'  => 'pg.user',\n\t\t\t\t\t\t\t\t'icon'  => 'Users',\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'groups' => array (\n\t\t\t\t\t\t\t\t'title' => $lang['strgroups'],\n\t\t\t\t\t\t\t\t'url'   => 'groups.php',\n\t\t\t\t\t\t\t\t'urlvars' => array('subject' => 'server'),\n\t\t\t\t\t\t\t\t'hide'  => $hide_users,\n\t\t\t\t\t\t\t\t'help'  => 'pg.group',\n\t\t\t\t\t\t\t\t'icon'  => 'UserGroups',\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t));\n\t\t\t\t\t}\n\n\t\t\t\t\t$tmp = array_merge($tmp, array(\n\t\t\t\t\t\t'account' => array (\n\t\t\t\t\t\t\t'title' => $lang['straccount'],\n\t\t\t\t\t\t\t'url'   => $data->hasRoles() ? 'roles.php' : 'users.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'server', 'action' => 'account'),\n\t\t\t\t\t\t\t'hide'  => !$hide_users,\n\t\t\t\t\t\t\t'help'  => 'pg.role',\n\t\t\t\t\t\t\t'icon'  => 'User',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'tablespaces' => array (\n\t\t\t\t\t\t\t'title' => $lang['strtablespaces'],\n\t\t\t\t\t\t\t'url'   => 'tablespaces.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'server'),\n\t\t\t\t\t\t\t'hide'  => (!$data->hasTablespaces()),\n\t\t\t\t\t\t\t'help'  => 'pg.tablespace',\n\t\t\t\t\t\t\t'icon'  => 'Tablespaces',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'export' => array (\n\t\t\t\t\t\t\t'title' => $lang['strexport'],\n\t\t\t\t\t\t\t'url'   => 'all_db.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'server', 'action' => 'export'),\n\t\t\t\t\t\t\t'hide'  => (!$this->isDumpEnabled()),\n\t\t\t\t\t\t\t'icon'  => 'Export',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'reports' => array (\n\t\t\t\t\t\t\t'title' => $lang['strreports'],\n\t\t\t\t\t\t\t'url'   => 'reports.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'server'),\n\t\t\t\t\t\t\t'hide' => !$conf['show_reports'],\n\t\t\t\t\t\t\t'icon' => 'Reports',\n\t\t\t\t\t\t),\n\t\t\t\t\t));\n\t\t\t\t\treturn $tmp;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'database':\n\t\t\t\t\t$tabs = array (\n\t\t\t\t\t\t'schemas' => array (\n\t\t\t\t\t\t\t'title' => $lang['strschemas'],\n\t\t\t\t\t\t\t'url'   => 'schemas.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database'),\n\t\t\t\t\t\t\t'help'  => 'pg.schema',\n\t\t\t\t\t\t\t'icon'  => 'Schemas',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'sql' => array (\n\t\t\t\t\t\t\t'title' => $lang['strsql'],\n\t\t\t\t\t\t\t'url'   => 'database.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database', 'action' => 'sql', 'new' => 1),\n\t\t\t\t\t\t\t'help'  => 'pg.sql',\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'SqlEditor'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'find' => array (\n\t\t\t\t\t\t\t'title' => $lang['strfind'],\n\t\t\t\t\t\t\t'url'   => 'database.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database', 'action' => 'find'),\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Search'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'variables' => array (\n\t\t\t\t\t\t\t'title' => $lang['strvariables'],\n\t\t\t\t\t\t\t'url'   => 'database.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database', 'action' => 'variables'),\n\t\t\t\t\t\t\t'help'  => 'pg.variable',\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Variables',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'processes' => array (\n\t\t\t\t\t\t\t'title' => $lang['strprocesses'],\n\t\t\t\t\t\t\t'url'   => 'database.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database', 'action' => 'processes'),\n\t\t\t\t\t\t\t'help'  => 'pg.process',\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Processes',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'locks' => array (\n\t\t\t\t\t\t\t'title' => $lang['strlocks'],\n\t\t\t\t\t\t\t'url'   => 'database.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database', 'action' => 'locks'),\n\t\t\t\t\t\t\t'help'  => 'pg.locks',\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Key',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'admin' => array (\n\t\t\t\t\t\t\t'title' => $lang['stradmin'],\n\t\t\t\t\t\t\t'url'   => 'database.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database', 'action' => 'admin'),\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Admin',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'privileges' => array (\n\t\t\t\t\t\t\t'title' => $lang['strprivileges'],\n\t\t\t\t\t\t\t'url'   => 'privileges.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database'),\n\t\t\t\t\t\t\t'hide'  => (!isset($data->privlist['database'])),\n\t\t\t\t\t\t\t'help'  => 'pg.privilege',\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Privileges',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'languages' => array (\n\t\t\t\t\t\t\t'title' => $lang['strlanguages'],\n\t\t\t\t\t\t\t'url'   => 'languages.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database'),\n\t\t\t\t\t\t\t'hide'  => $hide_advanced,\n\t\t\t\t\t\t\t'help'  => 'pg.language',\n\t\t\t\t\t\t\t'icon'  => 'Languages',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'casts' => array (\n\t\t\t\t\t\t\t'title' => $lang['strcasts'],\n\t\t\t\t\t\t\t'url'   => 'casts.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database'),\n\t\t\t\t\t\t\t'hide'  => ($hide_advanced),\n\t\t\t\t\t\t\t'help'  => 'pg.cast',\n\t\t\t\t\t\t\t'icon'  => 'Casts',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'slony' => array (\n\t\t\t\t\t\t\t'title' => 'Slony',\n\t\t\t\t\t\t\t'url'   => 'plugin_slony.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database', 'action' => 'clusters_properties'),\n\t\t\t\t\t\t\t'hide'  => !isset($slony),\n\t\t\t\t\t\t\t'help'  => '',\n\t\t\t\t\t\t\t'icon'  => 'Replication',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'export' => array (\n\t\t\t\t\t\t\t'title' => $lang['strexport'],\n\t\t\t\t\t\t\t'url'   => 'database.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database', 'action' => 'export'),\n\t\t\t\t\t\t\t'hide'  => (!$this->isDumpEnabled()),\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Export',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\treturn $tabs;\n\n\t\t\t\tcase 'schema':\n\t\t\t\t\t$tabs = array (\n\t\t\t\t\t\t'tables' => array (\n\t\t\t\t\t\t\t'title' => $lang['strtables'],\n\t\t\t\t\t\t\t'url'   => 'tables.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'help'  => 'pg.table',\n\t\t\t\t\t\t\t'icon'  => 'Tables',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'views' => array (\n\t\t\t\t\t\t\t'title' => $lang['strviews'],\n\t\t\t\t\t\t\t'url'   => 'views.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'help'  => 'pg.view',\n\t\t\t\t\t\t\t'icon'  => 'Views',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'sequences' => array (\n\t\t\t\t\t\t\t'title' => $lang['strsequences'],\n\t\t\t\t\t\t\t'url'   => 'sequences.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'help'  => 'pg.sequence',\n\t\t\t\t\t\t\t'icon'  => 'Sequences',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'functions' => array (\n\t\t\t\t\t\t\t'title' => $lang['strfunctions'],\n\t\t\t\t\t\t\t'url'   => 'functions.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'help'  => 'pg.function',\n\t\t\t\t\t\t\t'icon'  => 'Functions',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'fulltext' => array (\n\t\t\t\t\t\t\t'title' => $lang['strfulltext'],\n\t\t\t\t\t\t\t'url'   => 'fulltext.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'help'  => 'pg.fts',\n\t\t\t\t\t\t\t'tree'  => true,\n\t\t\t\t\t\t\t'icon'  => 'Fts',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'domains' => array (\n\t\t\t\t\t\t\t'title' => $lang['strdomains'],\n\t\t\t\t\t\t\t'url'   => 'domains.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'help'  => 'pg.domain',\n\t\t\t\t\t\t\t'icon'  => 'Domains',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'aggregates' => array (\n\t\t\t\t\t\t\t'title' => $lang['straggregates'],\n\t\t\t\t\t\t\t'url'   => 'aggregates.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'hide'  => $hide_advanced,\n\t\t\t\t\t\t\t'help'  => 'pg.aggregate',\n\t\t\t\t\t\t\t'icon'  => 'Aggregates',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'types' => array (\n\t\t\t\t\t\t\t'title' => $lang['strtypes'],\n\t\t\t\t\t\t\t'url'   => 'types.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'hide'  => $hide_advanced,\n\t\t\t\t\t\t\t'help'  => 'pg.type',\n\t\t\t\t\t\t\t'icon'  => 'Types',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'operators' => array (\n\t\t\t\t\t\t\t'title' => $lang['stroperators'],\n\t\t\t\t\t\t\t'url'   => 'operators.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'hide'  => $hide_advanced,\n\t\t\t\t\t\t\t'help'  => 'pg.operator',\n\t\t\t\t\t\t\t'icon'  => 'Operators',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'opclasses' => array (\n\t\t\t\t\t\t\t'title' => $lang['stropclasses'],\n\t\t\t\t\t\t\t'url'   => 'opclasses.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'hide'  => $hide_advanced,\n\t\t\t\t\t\t\t'help'  => 'pg.opclass',\n\t\t\t\t\t\t\t'icon'  => 'OperatorClasses',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'conversions' => array (\n\t\t\t\t\t\t\t'title' => $lang['strconversions'],\n\t\t\t\t\t\t\t'url'   => 'conversions.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'hide'  => $hide_advanced,\n\t\t\t\t\t\t\t'help'  => 'pg.conversion',\n\t\t\t\t\t\t\t'icon'  => 'Conversions',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'privileges' => array (\n\t\t\t\t\t\t\t'title' => $lang['strprivileges'],\n\t\t\t\t\t\t\t'url'   => 'privileges.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'help'  => 'pg.privilege',\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Privileges',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'export' => array (\n\t\t\t\t\t\t\t'title' => $lang['strexport'],\n\t\t\t\t\t\t\t'url'   => 'schemas.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema', 'action' => 'export'),\n\t\t\t\t\t\t\t'hide'  => (!$this->isDumpEnabled()),\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Export',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tif (!$data->hasFTS()) unset($tabs['fulltext']);\n\t\t\t\t\treturn $tabs;\n\n\t\t\t\tcase 'table':\n\t\t\t\t\treturn array (\n\t\t\t\t\t\t'columns' => array (\n\t\t\t\t\t\t\t'title' => $lang['strcolumns'],\n\t\t\t\t\t\t\t'url'   => 'tblproperties.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table')),\n\t\t\t\t\t\t\t'icon'  => 'Columns',\n\t\t\t\t\t\t\t'branch'=> true,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'indexes' => array (\n\t\t\t\t\t\t\t'title' => $lang['strindexes'],\n\t\t\t\t\t\t\t'url'   => 'indexes.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table')),\n\t\t\t\t\t\t\t'help'  => 'pg.index',\n\t\t\t\t\t\t\t'icon'  => 'Indexes',\n\t\t\t\t\t\t\t'branch'=> true,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'constraints' => array (\n\t\t\t\t\t\t\t'title' => $lang['strconstraints'],\n\t\t\t\t\t\t\t'url'   => 'constraints.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table')),\n\t\t\t\t\t\t\t'help'  => 'pg.constraint',\n\t\t\t\t\t\t\t'icon'  => 'Constraints',\n\t\t\t\t\t\t\t'branch'=> true,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'triggers' => array (\n\t\t\t\t\t\t\t'title' => $lang['strtriggers'],\n\t\t\t\t\t\t\t'url'   => 'triggers.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table')),\n\t\t\t\t\t\t\t'help'  => 'pg.trigger',\n\t\t\t\t\t\t\t'icon'  => 'Triggers',\n\t\t\t\t\t\t\t'branch'=> true,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'rules' => array (\n\t\t\t\t\t\t\t'title' => $lang['strrules'],\n\t\t\t\t\t\t\t'url'   => 'rules.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table')),\n\t\t\t\t\t\t\t'help'  => 'pg.rule',\n\t\t\t\t\t\t\t'icon'  => 'Rules',\n\t\t\t\t\t\t\t'branch'=> true,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'admin' => array (\n\t\t\t\t\t\t\t'title' => $lang['stradmin'],\n\t\t\t\t\t\t\t'url'   => 'tables.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table'), 'action' => 'admin'),\n\t\t\t\t\t\t\t'icon'  => 'Admin',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'info' => array (\n\t\t\t\t\t\t\t'title' => $lang['strinfo'],\n\t\t\t\t\t\t\t'url'   => 'info.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table')),\n\t\t\t\t\t\t\t'icon'  => 'Statistics',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'privileges' => array (\n\t\t\t\t\t\t\t'title' => $lang['strprivileges'],\n\t\t\t\t\t\t\t'url'   => 'privileges.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table')),\n\t\t\t\t\t\t\t'help'  => 'pg.privilege',\n\t\t\t\t\t\t\t'icon'  => 'Privileges',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'import' => array (\n\t\t\t\t\t\t\t'title' => $lang['strimport'],\n\t\t\t\t\t\t\t'url'   => 'tblproperties.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table'), 'action' => 'import'),\n\t\t\t\t\t\t\t'icon'  => 'Import',\n\t\t\t\t\t\t\t'hide'\t=> false,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'export' => array (\n\t\t\t\t\t\t\t'title' => $lang['strexport'],\n\t\t\t\t\t\t\t'url'   => 'tblproperties.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table'), 'action' => 'export'),\n\t\t\t\t\t\t\t'icon'  => 'Export',\n\t\t\t\t\t\t\t'hide'\t=> false,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\tcase 'view':\n\t\t\t\t\treturn array (\n\t\t\t\t\t\t'columns' => array (\n\t\t\t\t\t\t\t'title' => $lang['strcolumns'],\n\t\t\t\t\t\t\t'url'   => 'viewproperties.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'view', 'view' => field('view')),\n\t\t\t\t\t\t\t'icon'  => 'Columns',\n\t\t\t\t\t\t\t'branch'=> true,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'definition' => array (\n\t\t\t\t\t\t\t'title' => $lang['strdefinition'],\n\t\t\t\t\t\t\t'url'   => 'viewproperties.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'view', 'view' => field('view'), 'action' => 'definition'),\n\t\t\t\t\t\t\t'icon'  => 'Definition'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'rules' => array (\n\t\t\t\t\t\t\t'title' => $lang['strrules'],\n\t\t\t\t\t\t\t'url'   => 'rules.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'view', 'view' => field('view')),\n\t\t\t\t\t\t\t'help'  => 'pg.rule',\n\t\t\t\t\t\t\t'icon'  => 'Rules',\n\t\t\t\t\t\t\t'branch'=> true,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'privileges' => array (\n\t\t\t\t\t\t\t'title' => $lang['strprivileges'],\n\t\t\t\t\t\t\t'url'   => 'privileges.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'view', 'view' => field('view')),\n\t\t\t\t\t\t\t'help'  => 'pg.privilege',\n\t\t\t\t\t\t\t'icon'  => 'Privileges',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'export' => array (\n\t\t\t\t\t\t\t'title' => $lang['strexport'],\n\t\t\t\t\t\t\t'url'   => 'viewproperties.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'view', 'view' => field('view'), 'action' => 'export'),\n\t\t\t\t\t\t\t'icon'  => 'Export',\n\t\t\t\t\t\t\t'hide'\t=> false,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\tcase 'function':\n\t\t\t\t\treturn array (\n\t\t\t\t\t\t'definition' => array (\n\t\t\t\t\t\t\t'title' => $lang['strdefinition'],\n\t\t\t\t\t\t\t'url'   => 'functions.php',\n\t\t\t\t\t\t\t'urlvars' => array(\n\t\t\t\t\t\t\t\t\t'subject' => 'function',\n\t\t\t\t\t\t\t\t\t'function' => field('function'),\n\t\t\t\t\t\t\t\t\t'function_oid' => field('function_oid'),\n\t\t\t\t\t\t\t\t\t'action' => 'properties',\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'icon'  => 'Definition',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'privileges' => array (\n\t\t\t\t\t\t\t'title' => $lang['strprivileges'],\n\t\t\t\t\t\t\t'url'   => 'privileges.php',\n\t\t\t\t\t\t\t'urlvars' => array(\n\t\t\t\t\t\t\t\t\t'subject' => 'function',\n\t\t\t\t\t\t\t\t\t'function' => field('function'),\n\t\t\t\t\t\t\t\t\t'function_oid' => field('function_oid'),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'icon'  => 'Privileges',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\tcase 'aggregate':\n\t\t\t\t\treturn array (\n\t\t\t\t\t\t'definition' => array (\n\t\t\t\t\t\t\t'title' => $lang['strdefinition'],\n\t\t\t\t\t\t\t'url'   => 'aggregates.php',\n\t\t\t\t\t\t\t'urlvars' => array(\n\t\t\t\t\t\t\t\t\t'subject' => 'aggregate',\n\t\t\t\t\t\t\t\t\t'aggrname' => field('aggrname'),\n\t\t\t\t\t\t\t\t\t'aggrtype' => field('aggrtype'),\n\t\t\t\t\t\t\t\t\t'action' => 'properties',\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'icon'  => 'Definition',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\tcase 'role':\n\t\t\t\t\treturn array (\n\t\t\t\t\t\t'definition' => array (\n\t\t\t\t\t\t\t'title' => $lang['strdefinition'],\n\t\t\t\t\t\t\t'url'   => 'roles.php',\n\t\t\t\t\t\t\t'urlvars' => array(\n\t\t\t\t\t\t\t\t\t'subject' => 'role',\n\t\t\t\t\t\t\t\t\t'rolename' => field('rolename'),\n\t\t\t\t\t\t\t\t\t'action' => 'properties',\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'icon'  => 'Definition',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\tcase 'popup':\n\t\t\t\t\treturn array (\n\t\t\t\t\t\t'sql' => array (\n\t\t\t\t\t\t\t'title' => $lang['strsql'],\n\t\t\t\t\t\t\t'url'   => 'sqledit.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema', 'action' => 'sql'),\n\t\t\t\t\t\t\t'help'  => 'pg.sql',\n\t\t\t\t\t\t\t'icon'  => 'SqlEditor',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'find' => array (\n\t\t\t\t\t\t\t'title' => $lang['strfind'],\n\t\t\t\t\t\t\t'url'   => 'sqledit.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema', 'action' => 'find'),\n\t\t\t\t\t\t\t'icon'  => 'Search',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\tcase 'slony_cluster':\n\t\t\t\t\treturn array (\n\t\t\t\t\t\t'properties' => array (\n\t\t\t\t\t\t\t'title' => $lang['strproperties'],\n\t\t\t\t\t\t\t'url'   => 'plugin_slony.php',\n\t\t\t\t\t\t\t'urlvars' => array(\n\t\t\t\t\t\t\t\t\t'subject' => 'slony_cluster',\n\t\t\t\t\t\t\t\t\t'action' => 'cluster_properties',\n\t\t\t\t\t\t\t\t\t'slony_cluster' => field('slony_cluster')\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'help'  => '',\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Cluster',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'nodes' => array (\n\t\t\t\t\t\t\t'title' => $lang['strnodes'],\n\t\t\t\t\t\t\t'url'   => 'plugin_slony.php',\n\t\t\t\t\t\t\t'urlvars' => array(\n\t\t\t\t\t\t\t\t\t'subject' => 'slony_cluster',\n\t\t\t\t\t\t\t\t\t'action' => 'nodes_properties',\n\t\t\t\t\t\t\t\t\t'slony_cluster' => field('slony_cluster')\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'branch' => 'nodes',\n\t\t\t\t\t\t\t'help'  => '',\n\t\t\t\t\t\t\t'icon'  => 'Nodes',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'sets' => array (\n\t\t\t\t\t\t\t'title' => $lang['strrepsets'],\n\t\t\t\t\t\t\t'url'   => 'plugin_slony.php',\n\t\t\t\t\t\t\t'urlvars' => array(\n\t\t\t\t\t\t\t\t'subject' => 'slony_cluster',\n\t\t\t\t\t\t\t\t'action' => 'sets_properties',\n\t\t\t\t\t\t\t\t'slony_cluster' => field('slony_cluster')\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'branch' => 'sets',\n\t\t\t\t\t\t\t'help'  => '',\n\t\t\t\t\t\t\t'icon'  => 'ReplicationSets',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\tcase 'column':\n\t\t\t\t\treturn array(\n\t\t\t\t\t\t'properties' => array (\n\t\t\t\t\t\t\t'title'\t\t=> $lang['strcolprop'],\n\t\t\t\t\t\t\t'url'\t\t=> 'colproperties.php',\n\t\t\t\t\t\t\t'urlvars'\t=> array(\n\t\t\t\t\t\t\t\t'subject' => 'column',\n\t\t\t\t\t\t\t\t'table' => field('table'),\n\t\t\t\t\t\t\t\t'column' => field('column')\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'icon'\t\t=> 'Column'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'privileges' => array (\n\t\t\t\t\t\t\t'title' => $lang['strprivileges'],\n\t\t\t\t\t\t\t'url'   => 'privileges.php',\n\t\t\t\t\t\t\t'urlvars' => array(\n\t\t\t\t\t\t\t\t'subject' => 'column',\n\t\t\t\t\t\t\t\t'table' => field('table'),\n\t\t\t\t\t\t\t\t'column' => field('column')\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'help'  => 'pg.privilege',\n\t\t\t\t\t\t\t'icon'  => 'Privileges',\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n                case 'fulltext':\n                    return array (\n                        'ftsconfigs' => array (\n                            'title' => $lang['strftstabconfigs'],\n                            'url'   => 'fulltext.php',\n                            'urlvars' => array('subject' => 'schema'),\n                            'hide'  => !$data->hasFTS(),\n                            'help'  => 'pg.ftscfg',\n                            'tree'  => true,\n                            'icon'  => 'FtsCfg',\n                        ),\n                        'ftsdicts' => array (\n                            'title' => $lang['strftstabdicts'],\n                            'url'   => 'fulltext.php',\n                            'urlvars' => array('subject' => 'schema', 'action' => 'viewdicts'),\n                            'hide'  => !$data->hasFTS(),\n                            'help'  => 'pg.ftsdict',\n                            'tree'  => true,\n                            'icon'  => 'FtsDict',\n                        ),\n                        'ftsparsers' => array (\n                            'title' => $lang['strftstabparsers'],\n                            'url'   => 'fulltext.php',\n                            'urlvars' => array('subject' => 'schema', 'action' => 'viewparsers'),\n                            'hide'  => !$data->hasFTS(),\n                            'help'  => 'pg.ftsparser',\n                            'tree'  => true,\n                            'icon'  => 'FtsParser',\n                        ),\n                    );\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn array();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Get the URL for the last active tab of a particular tab bar.\n\t\t */\n\t\tfunction getLastTabURL($section) {\n\t\t\tglobal $data;\n\n\t\t\t$tabs = $this->getNavTabs($section);\n\n\t\t\tif (isset($_SESSION['webdbLastTab'][$section]) && isset($tabs[$_SESSION['webdbLastTab'][$section]]))\n\t\t\t\t$tab = $tabs[$_SESSION['webdbLastTab'][$section]];\n\t\t\telse\n\t\t\t\t$tab = reset($tabs);\n\n\t\t\treturn isset($tab['url']) ? $tab : null;\n\t\t}\n\n\t\tfunction printTopbar() {\n\t\t\tglobal $lang, $conf, $appName, $appVersion, $appLangFiles;\n\n\t\t\t$server_info = $this->getServerInfo();\n\n\t\t\techo \"<div class=\\\"topbar\\\"><table style=\\\"width: 100%\\\"><tr><td>\";\n\n\t\t\tif ($server_info && isset($server_info['platform']) && isset($server_info['username'])) {\n\t\t\t\techo sprintf($lang['strtopbar'],\n\t\t\t\t\t'<span class=\"platform\">'.htmlspecialchars($server_info['platform']).'</span>',\n\t\t\t\t\t'<span class=\"host\">'.htmlspecialchars((empty($server_info['host'])) ? 'localhost':$server_info['host']).'</span>',\n\t\t\t\t\t'<span class=\"port\">'.htmlspecialchars($server_info['port']).'</span>',\n\t\t\t\t\t'<span class=\"username\">'.htmlspecialchars($server_info['username']).'</span>');\n\t\t\t} else {\n\t\t\t\techo \"<span class=\\\"appname\\\">$appName</span> <span class=\\\"version\\\">$appVersion</span>\";\n\t\t\t}\n\n\t\t\techo \"</td>\";\n\n\t\t\tif (isset($_REQUEST['server'])) {\n\t\t\t\t$sql_url = \"sqledit.php?{$this->href}&amp;action=\";\n\t\t\t\t$sql_window_id = htmlspecialchars('sqledit:'.$_REQUEST['server']);\n\t\t\t\t$history_url = \"history.php?{$this->href}&amp;action=pophistory\";\n\t\t\t\t$history_window_id = htmlspecialchars('history:'.$_REQUEST['server']);\n\t\t\t\t$logout_shared = isset($_SESSION['sharedUsername']) ?\n\t\t\t\t\t' onclick=\"return confirm(\\''. $lang['strconfdropcred']. '\\')\"':\n\t\t\t\t\t'';\n\n\t\t\t\techo \"<td style=\\\"text-align: right\\\">\";\n\t\t\t\techo \"<ul class=\\\"toplink\\\">\\n\\t<li><a class=\\\"toplink\\\" href=\\\"{$sql_url}sql\\\" target=\\\"sqledit\\\" onclick=\\\"window.open('{$sql_url}sql','{$sql_window_id}','toolbar=no,width=700,height=500,resizable=yes,scrollbars=yes').focus(); return false;\\\">{$lang['strsql']}</a></li>\\n\";\n\t\t\t\techo \"\\t<li><a class=\\\"toplink\\\" href=\\\"{$history_url}\\\" onclick=\\\"window.open('{$history_url}','{$history_window_id}','toolbar=no,width=800,height=600,resizable=yes,scrollbars=yes').focus(); return false;\\\">{$lang['strhistory']}</a></li>\\n\";\n\t\t\t\techo \"\\t<li><a class=\\\"toplink\\\" href=\\\"{$sql_url}find\\\" target=\\\"sqledit\\\" onclick=\\\"window.open('{$sql_url}find','{$sql_window_id}','toolbar=no,width=700,height=500,resizable=yes,scrollbars=yes').focus(); return false;\\\">{$lang['strfind']}</a></li>\\n\";\n \t\t\t\techo \"\\t<li><a class=\\\"toplink\\\" href=\\\"servers.php?action=logout&amp;logoutServer=\".htmlspecialchars($server_info['host']).\":\".htmlspecialchars($server_info['port']).\":\".htmlspecialchars($server_info['sslmode']).\"\\\"{$logout_shared}>{$lang['strlogout']}</a></li>\\n\";\n \t\t\t\techo \"</ul>\\n\";\n\t\t\t\techo \"</td>\";\n\t\t\t}\n/*\n\t\t\techo \"<td style=\\\"text-align: right; width: 1%\\\">\";\n\n\t\t\techo \"<form method=\\\"get\\\"><select name=\\\"language\\\" onchange=\\\"this.form.submit()\\\">\\n\";\n\t\t\t$language = isset($_SESSION['webdbLanguage']) ? $_SESSION['webdbLanguage'] : 'english';\n\t\t\tforeach ($appLangFiles as $k => $v) {\n\t\t\t\techo \"<option value=\\\"{$k}\\\"\",\n\t\t\t\t\t($k == $language) ? ' selected=\"selected\"' : '',\n\t\t\t\t\t\">{$v}</option>\\n\";\n\t\t\t}\n\t\t\techo \"</select>\\n\";\n\t\t\techo \"<noscript><input type=\\\"submit\\\" value=\\\"Set Language\\\"></noscript>\\n\";\n\t\t\tforeach ($_GET as $key => $val) {\n\t\t\t\tif ($key == 'language') continue;\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"$key\\\" value=\\\"\", htmlspecialchars($val), \"\\\" />\\n\";\n\t\t\t}\n\t\t\techo \"</form>\\n\";\n\n\t\t\techo \"</td>\";\n*/\n\t\t\techo \"</tr></table></div>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Display a bread crumb trail.\n\t\t */\n\t\tfunction printTrail($trail = array()) {\n\t\t\tglobal $lang;\n\n\t\t\t$this->printTopbar();\n\n\t\t\tif (is_string($trail)) {\n\t\t\t\t$trail = $this->getTrail($trail);\n\t\t\t}\n\n\t\t\techo \"<div class=\\\"trail\\\"><table><tr>\";\n\n\t\t\tforeach ($trail as $crumb) {\n\t\t\t\techo \"<td class=\\\"crumb\\\">\";\n\t\t\t\t$crumblink = \"<a\";\n\n\t\t\t\tif (isset($crumb['url']))\n\t\t\t\t\t$crumblink .= ' href=\"' . $this->printVal($crumb['url'], 'nbsp') . '\"';\n\n\t\t\t\tif (isset($crumb['title']))\n\t\t\t\t\t$crumblink .= \" title=\\\"{$crumb['title']}\\\"\";\n\n\t\t\t\t$crumblink .= \">\";\n\n\t\t\t\tif (isset($crumb['title']))\n\t\t\t\t\t$iconalt = $crumb['title'];\n\t\t\t\telse\n\t\t\t\t\t$iconalt = 'Database Root';\n\n\t\t\t\tif (isset($crumb['icon']) && $icon = $this->icon($crumb['icon']))\n\t\t\t\t\t$crumblink .= \"<span class=\\\"icon\\\"><img src=\\\"{$icon}\\\" alt=\\\"{$iconalt}\\\" /></span>\";\n\n\t\t\t\t$crumblink .= \"<span class=\\\"label\\\">\" . htmlspecialchars($crumb['text']) . \"</span></a>\";\n\n\t\t\t\tif (isset($crumb['help']))\n\t\t\t\t\t$this->printHelp($crumblink, $crumb['help']);\n\t\t\t\telse\n\t\t\t\t\techo $crumblink;\n\n\t\t\t\techo \"{$lang['strseparator']}\";\n\t\t\t\techo \"</td>\";\n\t\t\t}\n\n\t\t\techo \"</tr></table></div>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Create a bread crumb trail of the object hierarchy.\n\t\t * @param $object The type of object at the end of the trail.\n\t\t */\n\t\tfunction getTrail($subject = null) {\n\t\t\tglobal $lang, $conf, $data, $appName;\n\n\t\t\t$trail = array();\n\t\t\t$vars = '';\n\t\t\t$done = false;\n\n\t\t\t$trail['root'] = array(\n\t\t\t\t'text'  => $appName,\n\t\t\t\t'url'   => 'redirect.php?subject=root',\n\t\t\t\t'icon'  => 'Introduction'\n\t\t\t);\n\n\t\t\tif ($subject == 'root') $done = true;\n\n\t\t\tif (!$done) {\n\t\t\t\t$vars = 'server='.urlencode($_REQUEST['server']).'&';\n\t\t\t\t$server_info = $this->getServerInfo();\n\t\t\t\t$trail['server'] = array(\n\t\t\t\t\t'title' => $lang['strserver'],\n\t\t\t\t\t'text'  => $server_info['desc'],\n\t\t\t\t\t'url'   => \"redirect.php?subject=server&{$vars}\",\n\t\t\t\t\t'help'  => 'pg.server',\n\t\t\t\t\t'icon'  => 'Server'\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ($subject == 'server') $done = true;\n\n\t\t\tif (isset($_REQUEST['report']) && !$done) {\n\t\t\t\t$vars .= 'report='.urlencode($_REQUEST['report']).'&';\n\t\t\t\t$trail['report'] = array(\n\t\t\t\t\t'title' => $lang['strreport'],\n\t\t\t\t\t'text'  => $_REQUEST['report'],\n\t\t\t\t\t'url'   => \"reports.php?subject=report&{$vars}\",\n\t\t\t\t\t'icon'  => 'Report'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (isset($_REQUEST['database']) && !$done) {\n\t\t\t\t$vars .= 'database='.urlencode($_REQUEST['database']).'&';\n\t\t\t\t$trail['database'] = array(\n\t\t\t\t\t'title' => $lang['strdatabase'],\n\t\t\t\t\t'text'  => $_REQUEST['database'],\n\t\t\t\t\t'url'   => \"redirect.php?subject=database&{$vars}\",\n\t\t\t\t\t'help'  => 'pg.database',\n\t\t\t\t\t'icon'  => 'Database'\n\t\t\t\t);\n\t\t\t} elseif (isset($_REQUEST['rolename']) && !$done) {\n\t\t\t\t$vars .= \"subject=role&action=properties&rolename=\".urlencode($_REQUEST['rolename']);\n\t\t\t\t$trail['role'] = array(\n\t\t\t\t\t'title' => $lang['strrole'],\n\t\t\t\t\t'text'  => $_REQUEST['rolename'],\n\t\t\t\t\t'url'   => \"redirect.php?{$vars}\",\n\t\t\t\t\t'help'  => 'pg.role',\n\t\t\t\t\t'icon'  => 'Roles'\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ($subject == 'database' || $subject == 'role' || $subject == 'report') $done = true;\n\n\t\t\tif (isset($_REQUEST['schema']) && !$done) {\n\t\t\t\t$vars .= 'schema='.urlencode($_REQUEST['schema']).'&';\n\t\t\t\t$trail['schema'] = array(\n\t\t\t\t\t'title' => $lang['strschema'],\n\t\t\t\t\t'text'  => $_REQUEST['schema'],\n\t\t\t\t\t'url'   => \"redirect.php?subject=schema&{$vars}\",\n\t\t\t\t\t'help'  => 'pg.schema',\n\t\t\t\t\t'icon'  => 'Schema'\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ($subject == 'schema') $done = true;\n\n\t\t\tif (isset($_REQUEST['slony_cluster']) && !$done) {\n\t\t\t\t$vars .= 'slony_cluster='.urlencode($_REQUEST['slony_cluster']).'&';\n\t\t\t\t$trail['slony_cluster'] = array(\n\t\t\t\t\t'title' => 'Slony Cluster',\n\t\t\t\t\t'text'  => $_REQUEST['slony_cluster'],\n\t\t\t\t\t'url'   => \"redirect.php?subject=slony_cluster&{$vars}\",\n\t\t\t\t\t'help'  => 'sl.cluster',\n\t\t\t\t\t'icon'  => 'Cluster'\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ($subject == 'slony_cluster') $done = true;\n\n\t\t\tif (isset($_REQUEST['table']) && !$done) {\n\t\t\t\t$vars .= \"table=\".urlencode($_REQUEST['table']);\n\t\t\t\t$trail['table'] = array(\n\t\t\t\t\t'title' => $lang['strtable'],\n\t\t\t\t\t'text'  => $_REQUEST['table'],\n\t\t\t\t\t'url'   => \"redirect.php?subject=table&{$vars}\",\n\t\t\t\t\t'help'  => 'pg.table',\n\t\t\t\t\t'icon'  => 'Table'\n\t\t\t\t);\n\t\t\t} elseif (isset($_REQUEST['view']) && !$done) {\n\t\t\t\t$vars .= \"view=\".urlencode($_REQUEST['view']);\n\t\t\t\t$trail['view'] = array(\n\t\t\t\t\t'title' => $lang['strview'],\n\t\t\t\t\t'text'  => $_REQUEST['view'],\n\t\t\t\t\t'url'   => \"redirect.php?subject=view&{$vars}\",\n\t\t\t\t\t'help'  => 'pg.view',\n\t\t\t\t\t'icon'  => 'View'\n\t\t\t\t);\n\t\t\t} elseif (isset($_REQUEST['ftscfg']) && !$done) {\n\t\t\t\t$vars .= \"action=viewconfig&ftscfg=\".urlencode($_REQUEST['ftscfg']);\n\t\t\t\t$trail['ftscfg'] = array(\n\t\t\t\t\t'title' => $lang['strftsconfig'],\n\t\t\t\t\t'text'  => $_REQUEST['ftscfg'],\n\t\t\t\t\t'url'   => \"fulltext.php?{$vars}\",\n\t\t\t\t\t'help'  => 'pg.ftscfg.example',\n\t\t\t\t\t'icon'  => 'Fts'\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ($subject == 'table' || $subject == 'view' || $subject == 'ftscfg') $done = true;\n\n\t\t\tif (!$done && !is_null($subject)) {\n\t\t\t\tswitch ($subject) {\n\t\t\t\t\tcase 'function':\n\t\t\t\t\t\t$vars .= \"{$subject}_oid=\".urlencode($_REQUEST[$subject.'_oid']).'&';\n\t\t\t\t\t\t$vars .= \"subject={$subject}&{$subject}=\".urlencode($_REQUEST[$subject]);\n\t\t\t\t\t\t$trail[$subject] = array(\n\t\t\t\t\t\t\t'title' => $lang['str'.$subject],\n\t\t\t\t\t\t\t'text'  => $_REQUEST[$subject],\n\t\t\t\t\t\t\t'url'   => \"redirect.php?{$vars}\",\n\t\t\t\t\t\t\t'help'  => 'pg.function',\n\t\t\t\t\t\t\t'icon'  => 'Function'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'aggregate':\n\t\t\t\t\t\t$vars .= \"subject=aggregate&action=properties&aggrname=\".urlencode($_REQUEST['aggrname']);\n\t\t\t\t\t\t$vars .= \"&aggrtype=\".urlencode($_REQUEST['aggrtype']);\n\t\t\t\t\t\t$trail[$subject] = array(\n\t\t\t\t\t\t\t'title' => $lang['straggregate'],\n\t\t\t\t\t\t\t'text'  => $_REQUEST['aggrname'],\n\t\t\t\t\t\t\t'url'   => \"redirect.php?{$vars}\",\n\t\t\t\t\t\t\t'help'  => 'pg.aggregate',\n\t\t\t\t\t\t\t'icon'  => 'Aggregate'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'slony_node':\n\t\t\t\t\t\t$vars .= 'no_id='.urlencode($_REQUEST['no_id']).'&no_name='.urlencode($_REQUEST['no_name']);\n\t\t\t\t\t\t$trail[$subject] = array(\n\t\t\t\t\t\t\t'title' => 'Slony Node',\n\t\t\t\t\t\t\t'text'  => $_REQUEST['no_name'],\n\t\t\t\t\t\t\t'url'   => \"redirect.php?{$vars}\",\n\t\t\t\t\t\t\t'help'  => 'sl.'.$subject,\n\t\t\t\t\t\t\t'icon'  => 'Node'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'slony_set':\n\t\t\t\t\t\t$vars .= \"{$subject}_id=\".urlencode($_REQUEST[$subject]).'&';\n\t\t\t\t\t\t$vars .= \"subject={$subject}&{$subject}=\".urlencode($_REQUEST[$subject]);\n\t\t\t\t\t\t$trail[$subject] = array(\n\t\t\t\t\t\t\t'title' => $lang['str'.$subject],\n\t\t\t\t\t\t\t'text'  => $_REQUEST[$subject],\n\t\t\t\t\t\t\t'url'   => \"redirect.php?{$vars}\",\n\t\t\t\t\t\t\t'help'  => 'sl.'.$subject,\n\t\t\t\t\t\t\t'icon'  => 'AvailableReplicationSet'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'column':\n\t\t\t\t\t\t$vars .= \"&column=\". urlencode($_REQUEST['column']) .\"&subject=column\";\n\t\t\t\t\t\t$trail['column'] = array (\n\t\t\t\t\t\t\t'title' => $lang['strcolumn'],\n\t\t\t\t\t\t\t'text'  => $_REQUEST['column'],\n\t\t\t\t\t\t\t'icon'\t=> 'Column',\n\t\t\t\t\t\t\t'url'   => \"redirect.php?{$vars}\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (isset($_REQUEST[$subject])) {\n\t\t\t\t\t\t\tswitch ($subject) {\n\t\t\t\t\t\t\t\tcase 'domain': $icon = 'Domain'; break;\n\t\t\t\t\t\t\t\tcase 'sequence': $icon = 'Sequence'; break;\n\t\t\t\t\t\t\t\tcase 'type': $icon = 'Type'; break;\n\t\t\t\t\t\t\t\tcase 'operator': $icon = 'Operator'; break;\n\t\t\t\t\t\t\t\tdefault: $icon = null; break;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$trail[$subject] = array(\n\t\t\t\t\t\t\t\t'title' => $lang['str'.$subject],\n\t\t\t\t\t\t\t\t'text'  => $_REQUEST[$subject],\n\t\t\t\t\t\t\t\t'help'  => 'pg.'.$subject,\n\t\t\t\t\t\t\t\t'icon'  => $icon,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $trail;\n\t\t}\n\n\t\t/**\n\t\t * Do multi-page navigation.  Displays the prev, next and page options.\n\t\t * @param $page the page currently viewed\n\t\t * @param $pages the maximum number of pages\n\t\t * @param $url the url to refer to with the page number inserted\n\t\t * @param $max_width the number of pages to make available at any one time (default = 20)\n\t\t */\n\t\tfunction printPages($page, $pages, $url, $max_width = 20) {\n\t\t\tglobal $lang;\n\n\t\t\t$window = 10;\n\n\t\t\tif ($page < 0 || $page > $pages) return;\n\t\t\tif ($pages < 0) return;\n\t\t\tif ($max_width <= 0) return;\n\n\t\t\tif ($pages > 1) {\n\t\t\t\techo \"<p style=\\\"text-align: center\\\">\\n\";\n\t\t\t\tif ($page != 1) {\n\t\t\t\t\t$temp = str_replace('%s', 1, $url);\n\t\t\t\t\techo \"<a class=\\\"pagenav\\\" href=\\\"{$temp}\\\">{$lang['strfirst']}</a>\\n\";\n\t\t\t\t\t$temp = str_replace('%s', $page - 1, $url);\n\t\t\t\t\techo \"<a class=\\\"pagenav\\\" href=\\\"{$temp}\\\">{$lang['strprev']}</a>\\n\";\n\t\t\t\t}\n\n\t\t\t\tif ($page <= $window) {\n\t\t\t\t\t$min_page = 1;\n\t\t\t\t\t$max_page = min(2 * $window, $pages);\n\t\t\t\t}\n\t\t\t\telseif ($page > $window && $pages >= $page + $window) {\n\t\t\t\t\t$min_page = ($page - $window) + 1;\n\t\t\t\t\t$max_page = $page + $window;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$min_page = ($page - (2 * $window - ($pages - $page))) + 1;\n\t\t\t\t\t$max_page = $pages;\n\t\t\t\t}\n\n\t\t\t\t// Make sure min_page is always at least 1\n\t\t\t\t// and max_page is never greater than $pages\n\t\t\t\t$min_page = max($min_page, 1);\n\t\t\t\t$max_page = min($max_page, $pages);\n\n\t\t\t\tfor ($i = $min_page; $i <= $max_page; $i++) {\n\t\t\t\t\t$temp = str_replace('%s', $i, $url);\n\t\t\t\t\tif ($i != $page) echo \"<a class=\\\"pagenav\\\" href=\\\"{$temp}\\\">$i</a>\\n\";\n\t\t\t\t\telse echo \"$i\\n\";\n\t\t\t\t}\n\t\t\t\tif ($page != $pages) {\n\t\t\t\t\t$temp = str_replace('%s', $page + 1, $url);\n\t\t\t\t\techo \"<a class=\\\"pagenav\\\" href=\\\"{$temp}\\\">{$lang['strnext']}</a>\\n\";\n\t\t\t\t\t$temp = str_replace('%s', $pages, $url);\n\t\t\t\t\techo \"<a class=\\\"pagenav\\\" href=\\\"{$temp}\\\">{$lang['strlast']}</a>\\n\";\n\t\t\t\t}\n\t\t\t\techo \"</p>\\n\";\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Displays link to the context help.\n\t\t * @param $str   - the string that the context help is related to (already escaped)\n\t\t * @param $help  - help section identifier\n\t\t */\n\t\tfunction printHelp($str, $help) {\n\t\t\tglobal $lang, $data;\n\n\t\t\techo $str;\n\t\t\tif ($help) {\n\t\t\t\techo \"<a class=\\\"help\\\" href=\\\"\";\n\t\t\t\techo htmlspecialchars(\"help.php?help=\".urlencode($help).\"&server=\".urlencode($_REQUEST['server']));\n\t\t\t\techo \"\\\" title=\\\"{$lang['strhelp']}\\\" target=\\\"phppgadminhelp\\\">{$lang['strhelpicon']}</a>\";\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Outputs JavaScript to set default focus\n\t\t * @param $object eg. forms[0].username\n\t\t */\n\t\tfunction setFocus($object) {\n\t\t\techo \"<script type=\\\"text/javascript\\\">\\n\";\n\t\t\techo \"   document.{$object}.focus();\\n\";\n\t\t\techo \"</script>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Outputs JavaScript to set the name of the browser window.\n\t\t * @param $name the window name\n\t\t * @param $addServer if true (default) then the server id is\n\t\t *        attached to the name.\n\t\t */\n\t\tfunction setWindowName($name, $addServer = true) {\n\t\t\techo \"<script type=\\\"text/javascript\\\">\\n\";\n\t\t\techo \"//<![CDATA[\\n\";\n\t\t\techo \"   window.name = '{$name}\", ($addServer ? ':'.htmlspecialchars($_REQUEST['server']) : ''), \"';\\n\";\n\t\t\techo \"//]]>\\n\";\n\t\t\techo \"</script>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Converts a PHP.INI size variable to bytes.  Taken from publically available\n\t\t * function by Chris DeRose, here: http://www.php.net/manual/en/configuration.directives.php#ini.file-uploads\n\t\t * @param $strIniSize The PHP.INI variable\n\t\t * @return size in bytes, false on failure\n\t\t */\n\t\tfunction inisizeToBytes($strIniSize) {\n\t\t\t// This function will take the string value of an ini 'size' parameter,\n\t\t\t// and return a double (64-bit float) representing the number of bytes\n\t\t\t// that the parameter represents. Or false if $strIniSize is unparseable.\n\t\t\t$a_IniParts = array();\n\n\t\t\tif (!is_string($strIniSize))\n\t\t\t\treturn false;\n\n\t\t\tif (!preg_match ('/^(\\d+)([bkm]*)$/i', $strIniSize,$a_IniParts))\n\t\t\t\treturn false;\n\n\t\t\t$nSize = (double) $a_IniParts[1];\n\t\t\t$strUnit = strtolower($a_IniParts[2]);\n\n\t\t\tswitch($strUnit) {\n\t\t\t\tcase 'm':\n\t\t\t\t\treturn ($nSize * (double) 1048576);\n\t\t\t\tcase 'k':\n\t\t\t\t\treturn ($nSize * (double) 1024);\n\t\t\t\tcase 'b':\n\t\t\t\tdefault:\n\t\t\t\t\treturn $nSize;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Display a URL given an action associative array.\n\t\t * @param $action An associative array of the follow properties:\n\t\t *\t\t\t'url'  => The first part of the URL (before the ?)\n\t\t *\t\t\t'urlvars' => Associative array of (URL variable => field name)\n\t\t *\t\t\t\t\t\tthese are appended to the URL\n\t\t *\t\t\t'urlfn' => Function to apply to URL before display\n\t\t * @param $fields Field data from which 'urlfield' and 'vars' are obtained.\n\t\t * @param $attr If supplied then the URL will be quoted and prefixed with\n\t\t *\t\t\t\t'$attr='.\n\t\t */\n\t\tfunction printActionUrl(&$action, &$fields, $attr = null) {\n\t\t\t$url = value($action['url'], $fields);\n\n\t\t\tif ($url === false) return '';\n\n\t\t\tif (!empty($action['urlvars'])) {\n\t\t\t\t$urlvars = value($action['urlvars'], $fields);\n\t\t\t} else {\n\t\t\t\t$urlvars = array();\n\t\t\t}\n\n\t\t\tif (isset($urlvars['subject'])) {\n\t\t\t\t$subject = value($urlvars['subject'], $fields);\n\t\t\t\tif (isset($_REQUEST['server']) && $subject != 'root') {\n\t\t\t\t\t$urlvars['server'] = $_REQUEST['server'];\n\t\t\t\t\tif (isset($_REQUEST['database']) && $subject != 'server') {\n\t\t\t\t\t\t$urlvars['database'] = $_REQUEST['database'];\n\t\t\t\t\t\tif (isset($_REQUEST['schema']) && $subject != 'database') {\n\t\t\t\t\t\t\t$urlvars['schema'] = $_REQUEST['schema'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$sep = '?';\n\t\t\tforeach ($urlvars as $var => $varfield) {\n\t\t\t\t$url .= $sep . value_url($var, $fields) . '=' . value_url($varfield, $fields);\n\t\t\t\t$sep = '&';\n\t\t\t}\n\n\t\t\t$url = htmlentities($url);\n\n\t\t\tif ($attr !== null && $url != '')\n\t\t\t\treturn ' '.$attr.'=\"'.$url.'\"';\n\t\t\telse\n\t\t\t\treturn $url;\n\t\t}\n\n\t\tfunction getRequestVars($subject = '') {\n\t\t\t$v = array();\n\t\t\tif (!empty($subject))\n\t\t\t\t$v['subject'] = $subject;\n\t\t\tif (isset($_REQUEST['server']) && $subject != 'root') {\n\t\t\t\t$v['server'] = $_REQUEST['server'];\n\t\t\t\tif (isset($_REQUEST['database']) && $subject != 'server') {\n\t\t\t\t\t$v['database'] = $_REQUEST['database'];\n\t\t\t\t\tif (isset($_REQUEST['schema']) && $subject != 'database') {\n\t\t\t\t\t\t$v['schema'] = $_REQUEST['schema'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $v;\n\t\t}\n\n\t\tfunction printUrlVars(&$vars, &$fields) {\n\t\t\tforeach ($vars as $var => $varfield) {\n\t\t\t\techo \"{$var}=\", urlencode($fields[$varfield]), \"&amp;\";\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Display a table of data.\n\t\t * @param $tabledata A set of data to be formatted, as returned by $data->getDatabases() etc.\n\t\t * @param $columns   An associative array of columns to be displayed:\n\t\t *\t\t\t$columns = array(\n\t\t *\t\t\t\tcolumn_id => array(\n\t\t *\t\t\t\t\t'title' => Column heading,\n\t\t *\t\t\t\t\t'field' => Field name for $tabledata->fields[...],\n\t\t *\t\t\t\t\t'help'  => Help page for this column,\n\t\t *\t\t\t\t), ...\n\t\t *\t\t\t);\n\t\t * @param $actions   Actions that can be performed on each object:\n\t\t *\t\t\t$actions = array(\n\t\t *\t\t\t\t* multi action support\n\t\t *\t\t\t\t* parameters are serialized for each entries and given in $_REQUEST['ma']\n\t\t *\t\t\t\t'multiactions' => array(\n\t\t *\t\t\t\t\t'keycols' => Associative array of (URL variable => field name), // fields included in the form\n\t\t *\t\t\t\t\t'url' => URL submission,\n\t\t *\t\t\t\t\t'default' => Default selected action in the form.\n\t\t *\t\t\t\t\t\t\t\t\tif null, an empty action is added & selected\n\t\t *\t\t\t\t),\n\t\t *\t\t\t\t* actions *\n\t\t *\t\t\t\taction_id => array(\n\t\t *\t\t\t\t\t'title' => Action heading,\n\t\t *\t\t\t\t\t'url'   => Static part of URL.  Often we rely\n\t\t *\t\t\t\t\t\t\t   relative urls, usually the page itself (not '' !), or just a query string,\n\t\t *\t\t\t\t\t'vars'  => Associative array of (URL variable => field name),\n\t\t *\t\t\t\t\t'multiaction' => Name of the action to execute.\n\t\t *\t\t\t\t\t\t\t\t\t\tAdd this action to the multi action form\n\t\t *\t\t\t\t), ...\n\t\t *\t\t\t);\n\t\t * @param $nodata    (optional) Message to display if data set is empty.\n\t\t * @param $pre_fn    (optional) Name of a function to call for each row,\n\t\t *\t\t\t\t\t it will be passed two params: $rowdata and $actions,\n\t\t *\t\t\t\t\t it may be used to derive new fields or modify actions.\n\t\t *\t\t\t\t\t It can return an array of actions specific to the row,\n\t\t *\t\t\t\t\t or if nothing is returned then the standard actions are used.\n\t\t *\t\t\t\t\t (see tblproperties.php and constraints.php for examples)\n\t\t *\t\t\t\t\t The function must not must not store urls because\n\t\t *\t\t\t\t\t they are relative and won't work out of context.\n\t\t */\n\t\tfunction printTable(&$tabledata, &$columns, &$actions, $nodata = null, $pre_fn = null) {\n\t\t\tglobal $data, $conf, $misc, $lang;\n\n\t\t\tif ($has_ma = isset($actions['multiactions']))\n\t\t\t\t$ma = $actions['multiactions'];\n\t\t\tunset($actions['multiactions']);\n\n\t\t\tif ($tabledata->recordCount() > 0) {\n\n\t\t\t\t// Remove the 'comment' column if they have been disabled\n\t\t\t\tif (!$conf['show_comments']) {\n\t\t\t\t\tunset($columns['comment']);\n\t\t\t\t}\n\n\t\t\t\tif (isset($columns['comment'])) {\n\t\t\t\t\t// Uncomment this for clipped comments.\n\t\t\t\t\t// TODO: This should be a user option.\n\t\t\t\t\t//$columns['comment']['params']['clip'] = true;\n\t\t\t\t}\n\n\t\t\t\tif ($has_ma) {\n\t\t\t\t\techo \"<script src=\\\"multiactionform.js\\\" type=\\\"text/javascript\\\"></script>\\n\";\n\t\t\t\t\techo \"<form id=\\\"multi_form\\\" action=\\\"{$ma['url']}\\\" method=\\\"post\\\" enctype=\\\"multipart/form-data\\\">\\n\";\n\t\t\t\t\tif (isset($ma['vars']))\n\t\t\t\t\t\tforeach ($ma['vars'] as $k => $v)\n\t\t\t\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"$k\\\" value=\\\"$v\\\" />\";\n\t\t\t\t}\n\n\t\t\t\techo \"<table>\\n\";\n\t\t\t\techo \"<tr>\\n\";\n\t\t\t\t// Display column headings\n\t\t\t\tif ($has_ma) echo \"<th></th>\";\n\t\t\t\tforeach ($columns as $column_id => $column) {\n\t\t\t\t\tswitch ($column_id) {\n\t\t\t\t\t\tcase 'actions':\n\t\t\t\t\t\t\tif (sizeof($actions) > 0) echo \"<th class=\\\"data\\\" colspan=\\\"\", count($actions), \"\\\">{$column['title']}</th>\\n\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\techo \"<th class=\\\"data\\\">\";\n\t\t\t\t\t\t\tif (isset($column['help']))\n\t\t\t\t\t\t\t\t$this->printHelp($column['title'], $column['help']);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\techo $column['title'];\n\t\t\t\t\t\t\techo \"</th>\\n\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\techo \"</tr>\\n\";\n\n\t\t\t\t// Display table rows\n\t\t\t\t$i = 0;\n\t\t\t\twhile (!$tabledata->EOF) {\n\t\t\t\t\t$id = ($i % 2) + 1;\n\n\t\t\t\t\tunset($alt_actions);\n\t\t\t\t\tif (!is_null($pre_fn)) $alt_actions = $pre_fn($tabledata, $actions);\n\t\t\t\t\tif (!isset($alt_actions)) $alt_actions =& $actions;\n\n\t\t\t\t\techo \"<tr class=\\\"data{$id}\\\">\\n\";\n\t\t\t\t\tif ($has_ma) {\n\t\t\t\t\t\tforeach ($ma['keycols'] as $k => $v)\n\t\t\t\t\t\t\t$a[$k] = $tabledata->fields[$v];\n\t\t\t\t\t\techo \"<td>\";\n\t\t\t\t\t\techo \"<input type=\\\"checkbox\\\" name=\\\"ma[]\\\" value=\\\"\". htmlentities(serialize($a)) .\"\\\" />\";\n\t\t\t\t\t\techo \"</td>\\n\";\n\t\t\t\t\t}\n\n\t\t\t\t\tforeach ($columns as $column_id => $column) {\n\n\t\t\t\t\t\t// Apply default values for missing parameters\n\t\t\t\t\t\tif (isset($column['url']) && !isset($column['vars'])) $column['vars'] = array();\n\n\t\t\t\t\t\tswitch ($column_id) {\n\t\t\t\t\t\t\tcase 'actions':\n\t\t\t\t\t\t\t\tforeach ($alt_actions as $action) {\n\t\t\t\t\t\t\t\t\tif (isset($action['disable']) && $action['disable'] === true) {\n\t\t\t\t\t\t\t\t\t\techo \"<td></td>\\n\";\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\techo \"<td class=\\\"opbutton{$id}\\\">\";\n\t\t\t\t\t\t\t\t\t\techo \"<a href=\\\"{$action['url']}\";\n\t\t\t\t\t\t\t\t\t\tif ($action['url'] === '') echo '?';\n\t\t\t\t\t\t\t\t\t\t$misc->printUrlVars($action['vars'], $tabledata->fields);\n\t\t\t\t\t\t\t\t\t\tif (isset($action['target']))\n\t\t\t\t\t\t\t\t\t\t\techo \"\\\" target=\\\"{$action['target']}\";\n\t\t\t\t\t\t\t\t\t\techo \"\\\">{$action['title']}</a></td>\\n\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\techo \"<td>\";\n\t\t\t\t\t\t\t\t$val = value($column['field'], $tabledata->fields);\n\t\t\t\t\t\t\t\tif (!is_null($val)) {\n\t\t\t\t\t\t\t\t\tif (isset($column['url'])) {\n\t\t\t\t\t\t\t\t\t\techo \"<a href=\\\"{$column['url']}\";\n\t\t\t\t\t\t\t\t\t\t$misc->printUrlVars($column['vars'], $tabledata->fields);\n\t\t\t\t\t\t\t\t\t\techo \"\\\">\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$type = isset($column['type']) ? $column['type'] : null;\n\t\t\t\t\t\t\t\t\t$params = isset($column['params']) ? $column['params'] : array();\n\t\t\t\t\t\t\t\t\techo $misc->printVal($val, $type, $params);\n\t\t\t\t\t\t\t\t\tif (isset($column['url'])) echo \"</a>\";\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\techo \"</td>\\n\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\techo \"</tr>\\n\";\n\n\t\t\t\t\t$tabledata->moveNext();\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t\techo \"</table>\\n\";\n\n\t\t\t\t// Multi action table footer w/ options & [un]check'em all\n\t\t\t\tif ($has_ma) {\n\t\t\t\t\t// if default is not set or doesn't exist, set it to null\n\t\t\t\t\tif (!isset($ma['default']) || !isset($actions[$ma['default']]))\n\t\t\t\t\t\t$ma['default'] = null;\n\t\t\t\t\techo \"<br />\\n\";\n\t\t\t\t\techo \"<table>\\n\";\n\t\t\t\t\techo \"<tr>\\n\";\n\t\t\t\t\techo \"<th class=\\\"data\\\" style=\\\"text-align: left\\\" colspan=\\\"3\\\">{$lang['stractionsonmultiplelines']}</th>\\n\";\n\t\t\t\t\techo \"</tr>\\n\";\n\t\t\t\t\techo \"<tr class=\\\"row1\\\">\\n\";\n\t\t\t\t\techo \"<td>\";\n\t\t\t\t\techo \"<a href=\\\"#\\\" onclick=\\\"javascript:checkAll(true);\\\">{$lang['strselectall']}</a> / \";\n\t\t\t\t\techo \"<a href=\\\"#\\\" onclick=\\\"javascript:checkAll(false);\\\">{$lang['strunselectall']}</a></td>\\n\";\n\t\t\t\t\techo \"<td>&nbsp;--->&nbsp;</td>\\n\";\n\t\t\t\t\techo \"<td>\\n\";\n\t\t\t\t\techo \"\\t<select name=\\\"action\\\">\\n\";\n\t\t\t\t\tif ($ma['default'] == null)\n\t\t\t\t\t\techo \"\\t\\t<option value=\\\"\\\">--</option>\\n\";\n\t\t\t\t\tforeach($actions as $k => $a)\n\t\t\t\t\t\tif (isset($a['multiaction']))\n\t\t\t\t\t\t\techo \"\\t\\t<option value=\\\"{$a['multiaction']}\\\"\", ($ma['default']  == $k? ' selected=\"selected\"': ''), \">{$a['title']}</option>\\n\";\n\t\t\t\t\techo \"\\t</select>\\n\";\n\t\t\t\t\techo \"<input type=\\\"submit\\\" value=\\\"{$lang['strexecute']}\\\" />\\n\";\n\t\t\t\t\techo $misc->form;\n\t\t\t\t\techo \"</td>\\n\";\n\t\t\t\t\techo \"</tr>\\n\";\n\t\t\t\t\techo \"</table>\\n\";\n\t\t\t\t\techo '</form>';\n\t\t\t\t};\n\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tif (!is_null($nodata)) {\n\t\t\t\t\techo \"<p>{$nodata}</p>\\n\";\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t/** Produce XML data for the browser tree\n\t\t * @param $treedata A set of records to populate the tree.\n\t\t * @param $attrs Attributes for tree items\n\t\t *        'text' - the text for the tree node\n\t\t *        'icon' - an icon for node\n\t\t *        'openIcon' - an alternative icon when the node is expanded\n\t\t *        'toolTip' - tool tip text for the node\n\t\t *        'action' - URL to visit when single clicking the node\n\t\t *        'iconAction' - URL to visit when single clicking the icon node\n\t\t *        'branch' - URL for child nodes (tree XML)\n\t\t *        'expand' - the action to return XML for the subtree\n\t\t *        'nodata' - message to display when node has no children\n\t\t *        'nohead' - suppress headers and opening <tree> tag\n\t\t *        'nofoot' - suppress closing </tree> tag\n\t\t */\n\t\tfunction printTreeXML(&$treedata, &$attrs) {\n\t\t\tglobal $conf, $lang;\n\n\t\t\tif (!isset($attrs['nohead']) || $attrs['nohead'] === false) {\n\t\t\t\theader(\"Content-Type: text/xml\");\n\t\t\t\theader(\"Cache-Control: no-cache\");\n\n\t\t\t\techo \"<?xml version=\\\"1.0\\\" encoding=\\\"\", htmlspecialchars($lang['appcharset']), \"\\\"?>\\n\";\n\n\t\t\t\techo \"<tree>\\n\";\n\t\t\t}\n\n\t\t\tif ($treedata->recordCount() > 0) {\n\t\t\t\twhile (!$treedata->EOF) {\n\t\t\t\t\t$rec =& $treedata->fields;\n\n\t\t\t\t\techo \"<tree\";\n\t\t\t\t\techo value_xml_attr('text', $attrs['text'], $rec);\n\t\t\t\t\techo value_xml_attr('action', $attrs['action'], $rec);\n\t\t\t\t\techo value_xml_attr('src', $attrs['branch'], $rec);\n\n\t\t\t\t\t$icon = $this->icon(value($attrs['icon'], $rec));\n\t\t\t\t\techo value_xml_attr('icon', $icon, $rec);\n\t\t\t\t\techo value_xml_attr('iconaction', $attrs['iconAction'], $rec);\n\n\t\t\t\t\tif (!empty($attrs['openicon'])) {\n\t\t\t\t\t\t$icon = $this->icon(value($attrs['openIcon'], $rec));\n\t\t\t\t\t}\n\t\t\t\t\techo value_xml_attr('openicon', $icon, $rec);\n\n\t\t\t\t\techo value_xml_attr('tooltip', $attrs['toolTip'], $rec);\n\n\t\t\t\t\techo \" />\\n\";\n\n\t\t\t\t\t$treedata->moveNext();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$msg = isset($attrs['nodata']) ? $attrs['nodata'] : $lang['strnoobjects'];\n\t\t\t\techo \"<tree text=\\\"{$msg}\\\" onaction=\\\"tree.getSelected().getParent().reload()\\\" icon=\\\"\", $this->icon('ObjectNotFound'), \"\\\" />\\n\";\n\t\t\t}\n\n\t\t\tif (!isset($attrs['nofoot']) || $attrs['nofoot'] === false) {\n\t\t\t\techo \"</tree>\\n\";\n\t\t\t}\n\t\t}\n\n\t\tfunction adjustTabsForTree(&$tabs) {\n\t\t\tinclude_once('./classes/ArrayRecordSet.php');\n\n\t\t\tforeach ($tabs as $i => $tab) {\n\t\t\t\tif ((isset($tab['hide']) && $tab['hide'] === true) || (isset($tab['tree']) && $tab['tree'] === false)) {\n\t\t\t\t\tunset($tabs[$i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new ArrayRecordSet($tabs);\n\t\t}\n\n\t\tfunction icon($icon) {\n\t\t\tglobal $conf;\n\t\t\t$path = \"images/themes/{$conf['theme']}/{$icon}\";\n\t\t\tif (file_exists($path.'.png')) return $path.'.png';\n\t\t\tif (file_exists($path.'.gif')) return $path.'.gif';\n\t\t\t$path = \"images/themes/default/{$icon}\";\n\t\t\tif (file_exists($path.'.png')) return $path.'.png';\n\t\t\tif (file_exists($path.'.gif')) return $path.'.gif';\n\t\t\treturn '';\n\t\t}\n\n\t\t/**\n\t\t * Function to escape command line parameters\n\t\t * @param $str The string to escape\n\t\t * @return The escaped string\n\t\t */\n\t\tfunction escapeShellArg($str) {\n\t\t\tglobal $data, $lang;\n\n\t\t\tif (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n\t\t\t\t// Due to annoying PHP bugs, shell arguments cannot be escaped\n\t\t\t\t// (command simply fails), so we cannot allow complex objects\n\t\t\t\t// to be dumped.\n\t\t\t\tif (preg_match('/^[_.[:alnum:]]+$/', $str))\n\t\t\t\t\treturn $str;\n\t\t\t\telse {\n\t\t\t\t\techo $lang['strcannotdumponwindows'];\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn escapeshellarg($str);\n\t\t}\n\n\t\t/**\n\t\t * Function to escape command line programs\n\t\t * @param $str The string to escape\n\t\t * @return The escaped string\n\t\t */\n\t\tfunction escapeShellCmd($str) {\n\t\t\tglobal $data;\n\n\t\t\tif (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n\t\t\t\t$data->fieldClean($str);\n\t\t\t\treturn '\"' . $str . '\"';\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn escapeshellcmd($str);\n\t\t}\n\n\t\t/**\n\t\t * Get list of servers' groups if existing in the conf\n\t\t * @return a recordset of servers' groups\n\t\t */\n\t\tfunction getServersGroups() {\n\t\t\tglobal $conf, $lang;\n\t\t\t$grps = array();\n\t\t\t\n\t\t\tforeach ($conf['srv_groups'] as $i => $group) {\n\t\t\t\t$grps[$i] = array(\n\t\t\t\t\t'id' => $i,\n\t\t\t\t\t'desc' => $group['desc'],\n\t\t\t\t);\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$grps['all'] = array(\n\t\t\t\t'id' => 'all', \n\t\t\t\t'desc' => $lang['strallservers'],\n\t\t\t);\n\n\t\t\tinclude_once('./classes/ArrayRecordSet.php');\n\t\t\treturn new ArrayRecordSet($grps);\n\t\t}\n\t\t\n\n\t\t/**\n\t\t * Get list of servers\n\t\t * @param $recordset return as RecordSet suitable for printTable if true,\n\t\t *                   otherwise just return an array.\n\t\t * @param $group a group name to filter the returned servers using $conf[srv_groups]\n\t\t */\n\t\tfunction getServers($recordset = false, $group = false) {\n\t\t\tglobal $conf;\n\n\t\t\t$logins = isset($_SESSION['webdbLogin']) && is_array($_SESSION['webdbLogin']) ? $_SESSION['webdbLogin'] : array();\n\t\t\t$srvs = array();\n\n\t\t\tif (($group !== false) and ($group !== 'all'))\n\t\t\t\t$group = array_fill_keys(explode(',', $conf['srv_groups'][$group]['servers']), 1);\n\t\t\t\n\t\t\tforeach($conf['servers'] as $idx => $info) {\n\t\t\t\t$server_id = $info['host'].':'.$info['port'].':'.$info['sslmode'];\n\t\t\t\tif (($group === false) \n\t\t\t\t\tor (isset($group[$idx]))\n\t\t\t\t\tor ($group === 'all')\n\t\t\t\t) {\n\t\t\t\t\t$server_id = $info['host'].':'.$info['port'].':'.$info['sslmode'];\n\t\t\t\t\t\n\t\t\t\t\tif (isset($logins[$server_id])) $srvs[$server_id] = $logins[$server_id];\n\t\t\t\t\telse $srvs[$server_id] = $info;\n\n\t\t\t\t\t$srvs[$server_id]['id'] = $server_id;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _cmp_desc($a, $b) {\n\t\t\t\treturn strcmp($a['desc'], $b['desc']);\n\t\t\t}\n\t\t\tuasort($srvs, '_cmp_desc');\n\n\t\t\tif ($recordset) {\n\t\t\t\tinclude_once('./classes/ArrayRecordSet.php');\n\t\t\t\treturn new ArrayRecordSet($srvs);\n\t\t\t}\n\t\t\treturn $srvs;\n\t\t}\n\n\t\t/**\n\t\t * Validate and retrieve information on a server.\n\t\t * If the parameter isn't supplied then the currently\n\t\t * connected server is returned.\n\t\t * @param $server_id A server identifier (host:port)\n\t\t * @return An associative array of server properties\n\t\t */\n\t\tfunction getServerInfo($server_id = null) {\n\t\t\tglobal $conf, $_reload_browser, $lang;\n\n\t\t\tif ($server_id === null && isset($_REQUEST['server']))\n\t\t\t\t$server_id = $_REQUEST['server'];\n\n\t\t\t// Check for the server in the logged-in list\n\t\t\tif (isset($_SESSION['webdbLogin'][$server_id]))\n\t\t\t\treturn $_SESSION['webdbLogin'][$server_id];\n\n\t\t\t// Otherwise, look for it in the conf file\n\t\t\tforeach($conf['servers'] as $idx => $info) {\n\t\t\t\tif ($server_id == $info['host'].':'.$info['port'].':'.$info['sslmode']) {\n\t\t\t\t\t// Automatically use shared credentials if available\n\t\t\t\t\tif (!isset($info['username']) && isset($_SESSION['sharedUsername'])) {\n\t\t\t\t\t\t$info['username'] = $_SESSION['sharedUsername'];\n\t\t\t\t\t\t$info['password'] = $_SESSION['sharedPassword'];\n\t\t\t\t\t\t$_reload_browser = true;\n\t\t\t\t\t\t$this->setServerInfo(null, $info, $server_id);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn $info;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($server_id === null){\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\t// Unable to find a matching server, are we being hacked?\n\t\t\t\techo $lang['strinvalidserverparam'];\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Set server information.\n\t\t * @param $key parameter name to set, or null to replace all\n\t\t *             params with the assoc-array in $value.\n\t\t * @param $value the new value, or null to unset the parameter\n\t\t * @param $server_id the server identifier, or null for current\n\t\t *                   server.\n\t\t */\n\t\tfunction setServerInfo($key, $value, $server_id = null)\n\t\t{\n\t\t\tif ($server_id === null && isset($_REQUEST['server']))\n\t\t\t\t$server_id = $_REQUEST['server'];\n\n\t\t\tif ($key === null) {\n\t\t\t\tif ($value === null)\n\t\t\t\t\tunset($_SESSION['webdbLogin'][$server_id]);\n\t\t\t\telse\n\t\t\t\t\t$_SESSION['webdbLogin'][$server_id] = $value;\n\t\t\t} else {\n\t\t\t\tif ($value === null)\n\t\t\t\t\tunset($_SESSION['webdbLogin'][$server_id][$key]);\n\t\t\t\telse\n\t\t\t\t\t$_SESSION['webdbLogin'][$server_id][$key] = $value;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/**\n\t\t * Set the current schema\n\t\t * @param $schema The schema name\n\t\t * @return 0 on success\n\t\t * @return $data->seSchema() on error\n\t\t */\n\t\tfunction setCurrentSchema($schema) {\n\t\t\tglobal $data;\n\t\t\t\n\t\t\t$status = $data->setSchema($schema);\n\t\t\tif($status != 0)\n\t\t\t\treturn $status;\n\n\t\t\t$_REQUEST['schema'] = $schema;\n\t\t\t$this->setHREF();\n\t\t\treturn 0;\n\t\t}\n\n\t\t/**\n\t\t * Save the given SQL script in the history \n\t\t * of the database and server.\n\t\t * @param $script the SQL script to save.\n\t\t */\n\t\tfunction saveScriptHistory($script) {\n\t\t\tlist($usec, $sec) = explode(' ', microtime());\n\t\t\t$time = ((float)$usec + (float)$sec);\n\t\t\t$_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']][\"$time\"] = array(\n\t\t\t\t'query' => $script,\n\t\t\t\t'paginate' => (!isset($_REQUEST['paginate'])? 'f':'t'),\n\t\t\t\t'queryid' => $time,\n\t\t\t);\n\t\t}\n\t\n\t\t/*\n\t\t * Output dropdown list to select server and \n\t\t * databases form the popups windows.\n\t\t * @param $onchange Javascript action to take when selections change.\n\t\t */\t\n\t\tfunction printConnection($onchange) {\n\t\t\tglobal $data, $lang, $misc;\n\n\t\t\techo \"<table style=\\\"width: 100%\\\"><tr><td>\\n\";\n\t\t\techo \"<label>\";\n\t\t\t$misc->printHelp($lang['strserver'], 'pg.server');\n\t\t\techo \"</label>\";\n\t\t\techo \": <select name=\\\"server\\\" {$onchange}>\\n\";\n\t\t\t\n\t\t\t$servers = $misc->getServers();\n\t\t\tforeach($servers as $info) {\n\t\t\t\tif (empty($info['username'])) continue; // not logged on this server\n\t\t\t\techo \"<option value=\\\"\", htmlspecialchars($info['id']), \"\\\"\",\n\t\t\t\t\t((isset($_REQUEST['server']) && $info['id'] == $_REQUEST['server'])) ? ' selected=\"selected\"' : '', \">\",\n\t\t\t\t\thtmlspecialchars(\"{$info['desc']} ({$info['id']})\"), \"</option>\\n\";\n\t\t\t}\n\t\t\techo \"</select>\\n</td><td style=\\\"text-align: right\\\">\\n\";\n\t\t\t\n\t\t\t// Get the list of all databases\n\t\t\t$databases = $data->getDatabases();\n\n\t\t\tif ($databases->recordCount() > 0) {\n\n\t\t\t\techo \"<label>\";\n\t\t\t\t$misc->printHelp($lang['strdatabase'], 'pg.database');\n\t\t\t\techo \": <select name=\\\"database\\\" {$onchange}>\\n\";\n\t\t\t\t\n\t\t\t\t//if no database was selected, user should select one\n\t\t\t\tif (!isset($_REQUEST['database']))\n\t\t\t\t\techo \"<option value=\\\"\\\">--</option>\\n\";\n\t\t\t\t\n\t\t\t\twhile (!$databases->EOF) {\n\t\t\t\t\t$dbname = $databases->fields['datname'];\n\t\t\t\t\techo \"<option value=\\\"\", htmlspecialchars($dbname), \"\\\"\",\n\t\t\t\t\t\t((isset($_REQUEST['database']) && $dbname == $_REQUEST['database'])) ? ' selected=\"selected\"' : '', \">\",\n\t\t\t\t\t\thtmlspecialchars($dbname), \"</option>\\n\";\n\t\t\t\t\t$databases->moveNext();\n\t\t\t\t}\n\t\t\t\techo \"</select></label>\\n\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$server_info = $misc->getServerInfo();\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"database\\\" value=\\\"\", \n\t\t\t\t\thtmlspecialchars($server_info['defaultdb']), \"\\\" />\\n\";\n\t\t\t}\n\t\t\t\n\t\t\techo \"</td></tr></table>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * returns an array representing FKs definition for a table, sorted by fields\n\t\t * or by constraint.\n\t\t * @param $table The table to retrieve FK contraints from\n\t\t * @returns the array of FK definition:\n\t\t *   array(\n\t\t *     'byconstr' => array(\n\t\t *       constrain id => array(\n\t\t *         confrelid => foreign relation oid\n\t\t *         f_schema => foreign schema name\n\t\t *         f_table => foreign table name\n\t\t *         pattnums => array of parent's fields nums\n\t\t *         pattnames => array of parent's fields names\n\t\t *         fattnames => array of foreign attributes names\n\t\t *       )\n\t\t *     ),\n\t\t *     'byfield' => array(\n\t\t *       attribute num => array (constraint id, ...)\n\t\t *     ),\n\t\t *     'code' => HTML/js code to include in the page for auto-completion\n\t\t *   )\n\t\t **/\n\t\tfunction getAutocompleteFKProperties($table) {\n\t\t\tglobal $data;\n\n\t\t\t$fksprops = array(\n\t\t\t\t'byconstr' => array(),\n\t\t\t\t'byfield' => array(),\n\t\t\t\t'code' => ''\n\t\t\t);\n\n\t\t\t$constrs = $data->getConstraintsWithFields($table);\n\n\t\t\tif (!$constrs->EOF) {\n\t\t\t\t$conrelid = $constrs->fields['conrelid'];\n\t\t\t\twhile(!$constrs->EOF) {\n\t\t\t\t\tif ($constrs->fields['contype'] == 'f') {\n\t\t\t\t\t\tif (!isset($fksprops['byconstr'][$constrs->fields['conid']])) {\n\t\t\t\t\t\t\t$fksprops['byconstr'][$constrs->fields['conid']] = array (\n\t\t\t\t\t\t\t\t'confrelid' => $constrs->fields['confrelid'],\n\t\t\t\t\t\t\t\t'f_table' => $constrs->fields['f_table'],\n\t\t\t\t\t\t\t\t'f_schema' => $constrs->fields['f_schema'],\n\t\t\t\t\t\t\t\t'pattnums' => array(),\n\t\t\t\t\t\t\t\t'pattnames' => array(),\n\t\t\t\t\t\t\t\t'fattnames' => array()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$fksprops['byconstr'][$constrs->fields['conid']]['pattnums'][] = $constrs->fields['p_attnum'];\n\t\t\t\t\t\t$fksprops['byconstr'][$constrs->fields['conid']]['pattnames'][] = $constrs->fields['p_field'];\n\t\t\t\t\t\t$fksprops['byconstr'][$constrs->fields['conid']]['fattnames'][] = $constrs->fields['f_field'];\n\n\t\t\t\t\t\tif (!isset($fksprops['byfield'][$constrs->fields['p_attnum']]))\n\t\t\t\t\t\t\t$fksprops['byfield'][$constrs->fields['p_attnum']] = array();\n\t\t\t\t\t\t$fksprops['byfield'][$constrs->fields['p_attnum']][] = $constrs->fields['conid'];\n\t\t\t\t\t}\n\t\t\t\t\t$constrs->moveNext();\n\t\t\t\t}\n\n\t\t\t\t$fksprops['code'] = \"<script type=\\\"text/javascript\\\">\\n\";\n\t\t\t\t$fksprops['code'] .= \"var constrs = {};\\n\";\n\t\t\t\tforeach ($fksprops['byconstr'] as $conid => $props) {\n\t\t\t\t\t$fksprops['code'] .= \"constrs.constr_{$conid} = {\\n\";\n\t\t\t\t\t$fksprops['code'] .= 'pattnums: ['. implode(',',$props['pattnums']) .\"],\\n\";\n\t\t\t\t\t$fksprops['code'] .= \"f_table:'\". addslashes(htmlentities($props['f_table'], ENT_QUOTES)) .\"',\\n\";\n\t\t\t\t\t$fksprops['code'] .= \"f_schema:'\". addslashes(htmlentities($props['f_schema'], ENT_QUOTES)) .\"',\\n\";\n\t\t\t\t\t$_ = '';\n\t\t\t\t\tforeach ($props['pattnames'] as $n) {\n\t\t\t\t\t\t$_ .= \",'\". htmlentities($n, ENT_QUOTES) .\"'\";\n\t\t\t\t\t}\n\t\t\t\t\t$fksprops['code'] .= 'pattnames: ['. substr($_, 1) .\"],\\n\";\n\n\t\t\t\t\t$_ = '';\n\t\t\t\t\tforeach ($props['fattnames'] as $n) {\n\t\t\t\t\t\t$_ .= \",'\". htmlentities($n, ENT_QUOTES) .\"'\";\n\t\t\t\t\t}\n\n\t\t\t\t\t$fksprops['code'] .= 'fattnames: ['. substr($_, 1) .\"]\\n\";\n\t\t\t\t\t$fksprops['code'] .= \"};\\n\";\n\t\t\t\t}\n\n\t\t\t\t$fksprops['code'] .= \"var attrs = {};\\n\";\n\t\t\t\tforeach ($fksprops['byfield'] as $attnum => $cstrs ) {\n\t\t\t\t\t$fksprops['code'] .= \"attrs.attr_{$attnum} = [\". implode(',', $fksprops['byfield'][$attnum]) .\"];\\n\";\n\t\t\t\t}\n\n\t\t\t\t$fksprops['code'] .= \"var table='\". addslashes(htmlentities($table, ENT_QUOTES)) .\"';\";\n\t\t\t\t$fksprops['code'] .= \"var server='\". htmlentities($_REQUEST['server']) .\"';\";\n\t\t\t\t$fksprops['code'] .= \"var database='\". addslashes(htmlentities($_REQUEST['database'], ENT_QUOTES)) .\"';\";\n\t\t\t\t$fksprops['code'] .= \"</script>\\n\";\n\n\t\t\t\t$fksprops['code'] .= '<div id=\"fkbg\"></div>';\n\t\t\t\t$fksprops['code'] .= '<div id=\"fklist\"></div>';\n\t\t\t\t$fksprops['code'] .= '<script src=\"libraries/js/jquery.js\" type=\"text/javascript\"></script>';\n\t\t\t\t$fksprops['code'] .= '<script src=\"js/ac_insert_row.js\" type=\"text/javascript\"></script>';\n\t\t\t}\n\n\t\t\telse /* we have no foreign keys on this table */\n\t\t\t\treturn false;\n\n\t\t\treturn $fksprops;\n\t\t}\n\t}\n?>\n", "<?php\n\n\t/**\n\t * Common relation browsing function that can be used for views,\n\t * tables, reports, arbitrary queries, etc. to avoid code duplication.\n\t * @param $query The SQL SELECT string to execute\n\t * @param $count The same SQL query, but only retrieves the count of the rows (AS total)\n\t * @param $return_url The return URL\n\t * @param $return_desc The return link name\n\t * @param $page The current page\n\t *\n\t * $Id: display.php,v 1.68 2008/04/14 12:44:27 ioguix Exp $\n\t */\n\n\t// Prevent timeouts on large exports (non-safe mode only)\n\tif (!ini_get('safe_mode')) set_time_limit(0);\n\n\t// Include application functions\n\tinclude_once('./libraries/lib.inc.php');\n\n\tglobal $conf, $lang;\n\n\t$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';\n\n\t/**\n\t * Show confirmation of edit and perform actual update\n\t */\n\tfunction doEditRow($confirm, $msg = '') {\n\t\tglobal $data, $misc, $conf;\n\t\tglobal $lang;\n\n\t\tif (is_array($_REQUEST['key']))\n           $key = $_REQUEST['key'];\n        else\n           $key = unserialize($_REQUEST['key']);\n\n\t\tif ($confirm) {\n\t\t\t$misc->printTrail($_REQUEST['subject']);\n\t\t\t$misc->printTitle($lang['streditrow']);\n\t\t\t$misc->printMsg($msg);\n\n\t\t\t$attrs = $data->getTableAttributes($_REQUEST['table']);\n\t\t\t$rs = $data->browseRow($_REQUEST['table'], $key);\n\n\t\t\tif (($conf['autocomplete'] != 'disable')) {\n\t\t\t\t$fksprops = $misc->getAutocompleteFKProperties($_REQUEST['table']);\n\t\t\t\tif ($fksprops !== false)\n\t\t\t\t\techo $fksprops['code'];\n\t\t\t}\n\t\t\telse $fksprops = false;\n\n\t\t\techo \"<form action=\\\"display.php\\\" method=\\\"post\\\" id=\\\"ac_form\\\">\\n\";\n\t\t\t$elements = 0;\n\t\t\t$error = true;\t\t\t\n\t\t\tif ($rs->recordCount() == 1 && $attrs->recordCount() > 0) {\n\t\t\t\techo \"<table>\\n\";\n\n\t\t\t\t// Output table header\n\t\t\t\techo \"<tr><th class=\\\"data\\\">{$lang['strcolumn']}</th><th class=\\\"data\\\">{$lang['strtype']}</th>\";\n\t\t\t\techo \"<th class=\\\"data\\\">{$lang['strformat']}</th>\\n\";\n\t\t\t\techo \"<th class=\\\"data\\\">{$lang['strnull']}</th><th class=\\\"data\\\">{$lang['strvalue']}</th></tr>\";\n\n\t\t\t\t$i = 0;\n\t\t\t\twhile (!$attrs->EOF) {\n\n\t\t\t\t\t$attrs->fields['attnotnull'] = $data->phpBool($attrs->fields['attnotnull']);\n\t\t\t\t\t$id = (($i % 2) == 0 ? '1' : '2');\n\t\t\t\t\t\n\t\t\t\t\t// Initialise variables\n\t\t\t\t\tif (!isset($_REQUEST['format'][$attrs->fields['attname']]))\n\t\t\t\t\t\t$_REQUEST['format'][$attrs->fields['attname']] = 'VALUE';\n\t\t\t\t\t\n\t\t\t\t\techo \"<tr class=\\\"data{$id}\\\">\\n\";\n\t\t\t\t\techo \"<td style=\\\"white-space:nowrap;\\\">\", $misc->printVal($attrs->fields['attname']), \"</td>\";\n\t\t\t\t\techo \"<td style=\\\"white-space:nowrap;\\\">\\n\";\n\t\t\t\t\techo $misc->printVal($data->formatType($attrs->fields['type'], $attrs->fields['atttypmod']));\n\t\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"types[\", htmlspecialchars($attrs->fields['attname']), \"]\\\" value=\\\"\", \n\t\t\t\t\t\thtmlspecialchars($attrs->fields['type']), \"\\\" /></td>\";\n\t\t\t\t\t$elements++;\n\t\t\t\t\techo \"<td style=\\\"white-space:nowrap;\\\">\\n\";\n\t\t\t\t\techo \"<select name=\\\"format[\", htmlspecialchars($attrs->fields['attname']), \"]\\\">\\n\";\n\t\t\t\t\techo \"<option value=\\\"VALUE\\\"\", ($_REQUEST['format'][$attrs->fields['attname']] == 'VALUE') ? ' selected=\"selected\"' : '', \">{$lang['strvalue']}</option>\\n\";\n\t\t\t\t\techo \"<option value=\\\"EXPRESSION\\\"\", ($_REQUEST['format'][$attrs->fields['attname']] == 'EXPRESSION') ? ' selected=\"selected\"' : '', \">{$lang['strexpression']}</option>\\n\";\n\t\t\t\t\techo \"</select>\\n</td>\\n\";\n\t\t\t\t\t$elements++;\n\t\t\t\t\techo \"<td style=\\\"white-space:nowrap;\\\">\";\n\t\t\t\t\t// Output null box if the column allows nulls (doesn't look at CHECKs or ASSERTIONS)\n\t\t\t\t\tif (!$attrs->fields['attnotnull']) {\n\t\t\t\t\t\t// Set initial null values\n\t\t\t\t\t\tif ($_REQUEST['action'] == 'confeditrow' && $rs->fields[$attrs->fields['attname']] === null) {\n\t\t\t\t\t\t\t$_REQUEST['nulls'][$attrs->fields['attname']] = 'on';\n\t\t\t\t\t\t}\n\t\t\t\t\t\techo \"<input type=\\\"checkbox\\\" name=\\\"nulls[{$attrs->fields['attname']}]\\\"\",\n\t\t\t\t\t\t\tisset($_REQUEST['nulls'][$attrs->fields['attname']]) ? ' checked=\"checked\"' : '', \" /></td>\\n\";\n\t\t\t\t\t\t$elements++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\techo \"&nbsp;</td>\";\n\n\t\t\t\t\techo \"<td id=\\\"row_att_{$attrs->fields['attnum']}\\\" style=\\\"white-space:nowrap;\\\">\";\n\n\t\t\t\t\t$extras = array();\n\n\t\t\t\t\t// If the column allows nulls, then we put a JavaScript action on the data field to unset the\n\t\t\t\t\t// NULL checkbox as soon as anything is entered in the field.  We use the $elements variable to \n\t\t\t\t\t// keep track of which element offset we're up to.  We can't refer to the null checkbox by name\n\t\t\t\t\t// as it contains '[' and ']' characters.\n\t\t\t\t\tif (!$attrs->fields['attnotnull']) {\n\t\t\t\t\t\t$extras['onChange'] = 'elements[' . ($elements - 1) . '].checked = false;';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (($fksprops !== false) && isset($fksprops['byfield'][$attrs->fields['attnum']])) {\n\t\t\t\t\t\t$extras['id'] = \"attr_{$attrs->fields['attnum']}\";\n\t\t\t\t\t\t$extras['autocomplete'] = 'off';\n\t\t\t\t\t}\n\n\t\t\t\t\techo $data->printField(\"values[{$attrs->fields['attname']}]\", $rs->fields[$attrs->fields['attname']], $attrs->fields['type'], $extras);\n\n\t\t\t\t\techo \"</td>\";\n\t\t\t\t\t$elements++;\n\t\t\t\t\techo \"</tr>\\n\";\n\t\t\t\t\t$i++;\n\t\t\t\t\t$attrs->moveNext();\n\t\t\t\t}\n\t\t\t\techo \"</table>\\n\";\n\n\t\t\t\t$error = false;\n\t\t\t}\n\t\t\telseif ($rs->recordCount() != 1) {\n\t\t\t\techo \"<p>{$lang['strrownotunique']}</p>\\n\";\t\t\t\t\n\t\t\t}\n\t\t\telse {\n\t\t\t\techo \"<p>{$lang['strinvalidparam']}</p>\\n\";\n\t\t\t}\n\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"editrow\\\" />\\n\";\n\t\t\techo $misc->form;\n\t\t\tif (isset($_REQUEST['table']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"table\\\" value=\\\"\", htmlspecialchars($_REQUEST['table']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['subject']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"subject\\\" value=\\\"\", htmlspecialchars($_REQUEST['subject']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['query']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"query\\\" value=\\\"\", htmlspecialchars($_REQUEST['query']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['count']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"count\\\" value=\\\"\", htmlspecialchars($_REQUEST['count']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['return_url']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"return_url\\\" value=\\\"\", htmlspecialchars($_REQUEST['return_url']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['return_desc']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"return_desc\\\" value=\\\"\", htmlspecialchars($_REQUEST['return_desc']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"page\\\" value=\\\"\", htmlspecialchars($_REQUEST['page']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"sortkey\\\" value=\\\"\", htmlspecialchars($_REQUEST['sortkey']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"sortdir\\\" value=\\\"\", htmlspecialchars($_REQUEST['sortdir']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"strings\\\" value=\\\"\", htmlspecialchars($_REQUEST['strings']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"key\\\" value=\\\"\", htmlspecialchars(serialize($key)), \"\\\" />\\n\";\n\t\t\techo \"<p>\";\n\t\t\tif (!$error) echo \"<input type=\\\"submit\\\" name=\\\"save\\\" value=\\\"{$lang['strsave']}\\\" />\\n\";\n\t\t\techo \"<input type=\\\"submit\\\" name=\\\"cancel\\\" value=\\\"{$lang['strcancel']}\\\" />\\n\";\n\n\t\t\tif($fksprops !== false) {\n\t\t\t\tif ($conf['autocomplete'] != 'default off')\n\t\t\t\t\techo \"<input type=\\\"checkbox\\\" id=\\\"no_ac\\\" value=\\\"1\\\" checked=\\\"checked\\\" /><label for=\\\"no_ac\\\">{$lang['strac']}</label>\\n\";\n\t\t\t\telse\n\t\t\t\t\techo \"<input type=\\\"checkbox\\\" id=\\\"no_ac\\\" value=\\\"0\\\" /><label for=\\\"no_ac\\\">{$lang['strac']}</label>\\n\";\n\t\t\t}\n\n\t\t\techo \"</p>\\n\";\n\t\t\techo \"</form>\\n\";\n\t\t}\n\t\telse {\n\t\t\tif (!isset($_POST['values'])) $_POST['values'] = array();\n\t\t\tif (!isset($_POST['nulls'])) $_POST['nulls'] = array();\n\t\t\t\n\t\t\t$status = $data->editRow($_POST['table'], $_POST['values'], $_POST['nulls'], \n\t\t\t\t$_POST['format'], $_POST['types'], unserialize($_POST['key']));\n\t\t\tif ($status == 0)\n\t\t\t\tdoBrowse($lang['strrowupdated']);\n\t\t\telseif ($status == -2)\n\t\t\t\tdoEditRow(true, $lang['strrownotunique']);\n\t\t\telse\n\t\t\t\tdoEditRow(true, $lang['strrowupdatedbad']);\n\t\t}\n\n\t}\t\n\n\t/**\n\t * Show confirmation of drop and perform actual drop\n\t */\n\tfunction doDelRow($confirm) {\n\t\tglobal $data, $misc;\n\t\tglobal $lang;\n\n\t\tif ($confirm) {\n\t\t\t$misc->printTrail($_REQUEST['subject']);\n\t\t\t$misc->printTitle($lang['strdeleterow']);\n\n\t\t\techo \"<p>{$lang['strconfdeleterow']}</p>\\n\";\n\t\t\t\n\t\t\techo \"<form action=\\\"display.php\\\" method=\\\"post\\\">\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"delrow\\\" />\\n\";\n\t\t\techo $misc->form;\n\t\t\tif (isset($_REQUEST['table']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"table\\\" value=\\\"\", htmlspecialchars($_REQUEST['table']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['subject']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"subject\\\" value=\\\"\", htmlspecialchars($_REQUEST['subject']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['query']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"query\\\" value=\\\"\", htmlspecialchars($_REQUEST['query']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['count']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"count\\\" value=\\\"\", htmlspecialchars($_REQUEST['count']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['return_url']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"return_url\\\" value=\\\"\", htmlspecialchars($_REQUEST['return_url']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['return_desc']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"return_desc\\\" value=\\\"\", htmlspecialchars($_REQUEST['return_desc']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"page\\\" value=\\\"\", htmlspecialchars($_REQUEST['page']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"sortkey\\\" value=\\\"\", htmlspecialchars($_REQUEST['sortkey']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"sortdir\\\" value=\\\"\", htmlspecialchars($_REQUEST['sortdir']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"strings\\\" value=\\\"\", htmlspecialchars($_REQUEST['strings']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"key\\\" value=\\\"\", htmlspecialchars(serialize($_REQUEST['key'])), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"submit\\\" name=\\\"yes\\\" value=\\\"{$lang['stryes']}\\\" />\\n\";\n\t\t\techo \"<input type=\\\"submit\\\" name=\\\"no\\\" value=\\\"{$lang['strno']}\\\" />\\n\";\n\t\t\techo \"</form>\\n\";\n\t\t}\n\t\telse {\n\t\t\t$status = $data->deleteRow($_POST['table'], unserialize($_POST['key']));\n\t\t\tif ($status == 0)\n\t\t\t\tdoBrowse($lang['strrowdeleted']);\n\t\t\telseif ($status == -2)\n\t\t\t\tdoBrowse($lang['strrownotunique']);\n\t\t\telse\t\t\t\n\t\t\t\tdoBrowse($lang['strrowdeletedbad']);\n\t\t}\n\t\t\n\t}\n\t\n\t/* build & return the FK information data structure \n\t * used when deciding if a field should have a FK link or not*/\n\tfunction &getFKInfo() {\n\t\tglobal $data, $misc, $lang;\n\t\t \n\t\t// Get the foreign key(s) information from the current table\n\t\t$fkey_information = array('byconstr' => array(), 'byfield' => array());\n\n\t\tif (isset($_REQUEST['table'])) {\n\t\t\t$constraints = $data->getConstraintsWithFields($_REQUEST['table']);\n\t\t\tif ($constraints->recordCount() > 0) {\n\n\t\t\t\t/* build the common parts of the url for the FK  */\n\t\t\t\t$fk_return_url = \"{$misc->href}&amp;subject=table&amp;table=\". urlencode($_REQUEST['table']);\n\t\t\t\tif (isset($_REQUEST['page'])) $fk_return_url .= \"&amp;page=\" . urlencode($_REQUEST['page']);\n\t\t\t\tif (isset($_REQUEST['query'])) $fk_return_url .= \"&amp;query=\" . urlencode($_REQUEST['query']);\n\t\t\t\tif (isset($_REQUEST['search_path'])) $fk_return_url .= \"&amp;search_path=\" . urlencode($_REQUEST['search_path']);\n\n\t\t\t\t/* yes, we double urlencode fk_return_url so parameters here don't \n\t\t\t\t * overwrite real one when included in the final url */\n\t\t\t\t$fkey_information['common_url'] = $misc->getHREF('schema') .'&amp;subject=table&amp;return_url=display.php?'\n\t\t\t\t\t. urlencode($fk_return_url) .'&amp;return_desc='. urlencode($lang['strback']);\n\n\t\t\t\t/* build the FK constraints data structure */\n\t\t\t\twhile (!$constraints->EOF) {\n\t\t\t\t\t$constr =& $constraints->fields;\n\t\t\t\t\tif ($constr['contype'] == 'f') {\n\n\t\t\t\t\t\tif (!isset($fkey_information['byconstr'][$constr['conid']])) {\n\t\t\t\t\t\t\t$fkey_information['byconstr'][$constr['conid']] = array (\n\t\t\t\t\t\t\t\t'url_data' => 'table='. urlencode($constr['f_table']) .'&amp;schema='. urlencode($constr['f_schema']),\n\t\t\t\t\t\t\t\t'fkeys' => array(),\n\t\t\t\t\t\t\t\t'consrc' => $constr['consrc']\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$fkey_information['byconstr'][$constr['conid']]['fkeys'][$constr['p_field']] = $constr['f_field'];\n\n\t\t\t\t\t\tif (!isset($fkey_information['byfield'][$constr['p_field']]))\n\t\t\t\t\t\t\t$fkey_information['byfield'][$constr['p_field']] = array();\n\n\t\t\t\t\t\t$fkey_information['byfield'][$constr['p_field']][] = $constr['conid'];\n\t\t\t\t\t}\n\t\t\t\t\t$constraints->moveNext();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $fkey_information;\n\t}\n\n\t/* Print table header cells \n\t * @param $sortLink must be urlencoded already\n\t * */\n\tfunction printTableHeaderCells(&$rs, $sortLink, $withOid) {\n\t\tglobal $misc, $data, $conf;\n\t\t$j = 0;\n\n\t\tforeach ($rs->fields as $k => $v) {\n\n\t\t\tif (($k === $data->id) && ( !($withOid && $conf['show_oids']) )) {\n\t\t\t\t$j++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$finfo = $rs->fetchField($j);\n\n\t\t\tif ($sortLink === false) {\n\t\t\t\techo \"<th class=\\\"data\\\">\", $misc->printVal($finfo->name), \"</th>\\n\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\techo \"<th class=\\\"data\\\"><a href=\\\"display.php?{$sortLink}&amp;sortkey=\", ($j + 1), \"&amp;sortdir=\";\n\t\t\t\t// Sort direction opposite to current direction, unless it's currently ''\n\t\t\t\techo ($_REQUEST['sortdir'] == 'asc' && $_REQUEST['sortkey'] == ($j + 1)) ? 'desc' : 'asc';\n\t\t\t\techo \"&amp;strings=\", urlencode($_REQUEST['strings']), \n\t\t\t\t\t\"&amp;page=\" . urlencode($_REQUEST['page']), \"\\\">\", \n\t\t\t\t\t$misc->printVal($finfo->name), \"</a></th>\\n\";\n\t\t\t}\n\t\t\t$j++;\n\t\t}\n\n\t\treset($rs->fields);\n\t}\n\n\t/* Print data-row cells */\n\tfunction printTableRowCells(&$rs, &$fkey_information, $withOid) {\n\t\tglobal $data, $misc, $conf;\n\t\t$j = 0;\n\t\t\n\t\tif (!isset($_REQUEST['strings'])) $_REQUEST['strings'] = 'collapsed';\n\n\t\tforeach ($rs->fields as $k => $v) {\n\t\t\t$finfo = $rs->fetchField($j++);\n\n\t\t\tif (($k === $data->id) && ( !($withOid && $conf['show_oids']) )) continue;\n\t\t\telseif ($v !== null && $v == '') echo \"<td>&nbsp;</td>\";\n\t\t\telse {\n\t\t\t\techo \"<td style=\\\"white-space:nowrap;\\\">\";\n\n\t\t\t\tif (($v !== null) && isset($fkey_information['byfield'][$k])) {\n\t\t\t\t\tforeach ($fkey_information['byfield'][$k] as $conid) {\n\n\t\t\t\t\t\t$query_params = $fkey_information['byconstr'][$conid]['url_data'];\n\n\t\t\t\t\t\tforeach ($fkey_information['byconstr'][$conid]['fkeys'] as $p_field => $f_field) {\n\t\t\t\t\t\t\t$query_params .= '&amp;'. urlencode(\"fkey[{$f_field}]\") .'='. urlencode($rs->fields[$p_field]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/* $fkey_information['common_url'] is already urlencoded */\n\t\t\t\t\t\t$query_params .= '&amp;'. $fkey_information['common_url'];\n\t\t\t\t\t\techo \"<div style=\\\"display:inline-block;\\\">\";\n\t\t\t\t\t\techo \"<a class=\\\"fk fk_\". htmlentities($conid) .\"\\\" href=\\\"display.php?{$query_params}\\\">\";\n\t\t\t\t\t\techo \"<img src=\\\"\".$misc->icon('ForeignKey').\"\\\" style=\\\"vertical-align:middle;\\\" alt=\\\"[fk]\\\" title=\\\"\"\n\t\t\t\t\t\t\t. htmlentities($fkey_information['byconstr'][$conid]['consrc'])\n\t\t\t\t\t\t\t.\"\\\" />\";\n\t\t\t\t\t\techo \"</a>\";\n\t\t\t\t\t\techo \"</div>\";\n\t\t\t\t\t}\n\t\t\t\t\techo $misc->printVal($v, $finfo->type, array('null' => true, 'clip' => ($_REQUEST['strings']=='collapsed'), 'class' => 'fk_value'));\n\t\t\t\t} else {\n\t\t\t\t\techo $misc->printVal($v, $finfo->type, array('null' => true, 'clip' => ($_REQUEST['strings']=='collapsed')));\n\t\t\t\t}\n\t\t\t\techo \"</td>\";\n\t\t\t}\n\t\t}\n\t}\n\n\t/* Print the FK row, used in ajax requests */\n\tfunction doBrowseFK() {\n\t\tglobal $data, $misc, $lang;\n\n\t\t$ops = array();\n\t\tforeach($_REQUEST['fkey'] as $x => $y) {\n\t\t\t$ops[$x] = '=';\n\t\t}\n\t\t$query = $data->getSelectSQL($_REQUEST['table'], array(), $_REQUEST['fkey'], $ops);\n\t\t$_REQUEST['query'] = $query;\n\n\t\t$fkinfo =& getFKInfo();\n\n\t\t$max_pages = 1;\n\t\t// Retrieve page from query.  $max_pages is returned by reference.\n\t\t$rs = $data->browseQuery('SELECT', $_REQUEST['table'], $_REQUEST['query'],  \n\t\t\tnull, null, 1, 1, $max_pages);\n\n\t\techo \"<a href=\\\"\\\" style=\\\"display:table-cell;\\\" class=\\\"fk_delete\\\"><img alt=\\\"[delete]\\\" src=\\\"\". $misc->icon('Delete') .\"\\\" /></a>\\n\";\n\t\techo \"<div style=\\\"display:table-cell;\\\">\";\n\n\t\tif (is_object($rs) && $rs->recordCount() > 0) {\n\t\t\t/* we are browsing a referenced table here\n\t\t\t * we should show OID if show_oids is true\n\t\t\t * so we give true to withOid in functions bellow\n\t\t\t * as 3rd paramter */\n\t\t\n\t\t\techo \"<table><tr>\";\n\t\t\t\tprintTableHeaderCells($rs, false, true);\n\t\t\techo \"</tr>\";\n\t\t\techo \"<tr class=\\\"data1\\\">\\n\";\n\t\t\t\tprintTableRowCells($rs, $fkinfo, true);\n\t\t\techo \"</tr>\\n\";\n\t\t\techo \"</table>\\n\";\n\t\t}\n\t\telse\n\t\t\techo $lang['strnodata'];\n\n\t\techo \"</div>\";\n\n\t\texit;\n\t}\n\n\t/** \n\t * Displays requested data\n\t */\n\tfunction doBrowse($msg = '') {\n\t\tglobal $data, $conf, $misc, $lang;\n\n\t\t$save_history = false;\n\t\t// If current page is not set, default to first page\n\t\tif (!isset($_REQUEST['page']))\n\t\t\t$_REQUEST['page'] = 1;\n\t\tif (!isset($_REQUEST['nohistory']))\n\t\t\t$save_history = true;\n\t\t\n\t\tif (isset($_REQUEST['subject'])) {\n\t\t\t$subject = $_REQUEST['subject'];\n\t\t\tif (isset($_REQUEST[$subject])) $object = $_REQUEST[$subject];\n\t\t}\n\t\telse {\n\t\t\t$subject = '';\n\t\t}\n\n\t\t$misc->printTrail(isset($subject) ? $subject : 'database');\n\n\t\t/* This code is used when browsing FK in pure-xHTML (without js) */\n\t\tif (isset($_REQUEST['fkey'])) {\n\t\t\t$ops = array();\n\t\t\tforeach($_REQUEST['fkey'] as $x => $y) {\n\t\t\t\t$ops[$x] = '=';\n\t\t\t}\n\t\t\t$query = $data->getSelectSQL($_REQUEST['table'], array(), $_REQUEST['fkey'], $ops);\n\t\t\t$_REQUEST['query'] = $query;\n\t\t}\n\t\t\n\t\tif (isset($object)) {\n\t\t\tif (isset($_REQUEST['query'])) {\n\t\t\t\t$_SESSION['sqlquery'] = $_REQUEST['query'];\n\t\t\t\t$misc->printTitle($lang['strselect']);\n\t\t\t\t$type = 'SELECT';\n\t\t\t}\n\t\t\telse if (isset($_REQUEST['report'])) {\n\t\t\t\t$misc->printTitle($lang['strselect']);\n\t\t\t\t$type = 'SELECT';\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$misc->printTitle($lang['strbrowse']);\n\t\t\t\t$type = 'TABLE';\n\t\t\t}\n\t\t} else {\n\t\t\t$misc->printTitle($lang['strqueryresults']);\n\t\t\t$type = 'QUERY';\n\t\t}\n\n\t\t$misc->printMsg($msg);\n\n\t\t// If 'sortkey' is not set, default to ''\n\t\tif (!isset($_REQUEST['sortkey'])) $_REQUEST['sortkey'] = '';\n\n\t\t// If 'sortdir' is not set, default to ''\n\t\tif (!isset($_REQUEST['sortdir'])) $_REQUEST['sortdir'] = '';\n\t\n\t\t// If 'strings' is not set, default to collapsed \n\t\tif (!isset($_REQUEST['strings'])) $_REQUEST['strings'] = 'collapsed';\n\t\n\t\t// Fetch unique row identifier, if this is a table browse request.\n\t\tif (isset($object))\n\t\t\t$key = $data->getRowIdentifier($object);\n\t\telse\n\t\t\t$key = array();\n\t\t\n\t\t// Set the schema search path\n\t\tif (isset($_REQUEST['search_path'])) {\n\t\t\tif ($data->setSearchPath(array_map('trim',explode(',',$_REQUEST['search_path']))) != 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Retrieve page from query.  $max_pages is returned by reference.\n\t\t$rs = $data->browseQuery($type, \n\t\t\tisset($object) ? $object : null, \n\t\t\tisset($_SESSION['sqlquery']) ? $_SESSION['sqlquery'] : null,\n\t\t\t$_REQUEST['sortkey'], $_REQUEST['sortdir'], $_REQUEST['page'],\n\t\t\t$conf['max_rows'], $max_pages);\n\n\t\t$fkey_information =& getFKInfo();\n\n\t\t// Build strings for GETs\n\t\t$gets = $misc->href;\n\t\tif (isset($object)) $gets .= \"&amp;\" . urlencode($subject) . '=' . urlencode($object);\n\t\tif (isset($subject)) $gets .= \"&amp;subject=\" . urlencode($subject);\n\t\tif (isset($_REQUEST['query'])) $gets .= \"&amp;query=\" . urlencode($_REQUEST['query']);\n\t\tif (isset($_REQUEST['report'])) $gets .= \"&amp;report=\" . urlencode($_REQUEST['report']);\n\t\tif (isset($_REQUEST['count'])) $gets .= \"&amp;count=\" . urlencode($_REQUEST['count']);\n\t\tif (isset($_REQUEST['return_url'])) $gets .= \"&amp;return_url=\" . urlencode($_REQUEST['return_url']);\n\t\tif (isset($_REQUEST['return_desc'])) $gets .= \"&amp;return_desc=\" . urlencode($_REQUEST['return_desc']);\n\t\tif (isset($_REQUEST['search_path'])) $gets .= \"&amp;search_path=\" . urlencode($_REQUEST['search_path']);\n\t\tif (isset($_REQUEST['table'])) $gets .= \"&amp;table=\" . urlencode($_REQUEST['table']);\n\t\t\n\t\t// This string just contains sort info\n\t\t$getsort = \"sortkey=\" . urlencode($_REQUEST['sortkey']) .\n\t\t\t\"&amp;sortdir=\" . urlencode($_REQUEST['sortdir']);\n\n\t\tif ($save_history && is_object($rs) && ($type == 'QUERY')) //{\n\t\t\t$misc->saveScriptHistory($_REQUEST['query']);\n\n\t\tif (is_object($rs) && $rs->recordCount() > 0) {\n\t\t\t// Show page navigation\n\t\t\t$misc->printPages($_REQUEST['page'], $max_pages, \"display.php?page=%s&amp;{$gets}&amp;{$getsort}&amp;nohistory=t&amp;strings=\" . urlencode($_REQUEST['strings']));\n\n\t\t\techo \"<table id=\\\"data\\\">\\n<tr>\";\n\n\t\t\t// Check that the key is actually in the result set.  This can occur for select\n\t\t\t// operations where the key fields aren't part of the select.  XXX:  We should\n\t\t\t// be able to support this, somehow.\n\t\t\tforeach ($key as $v) {\n\t\t\t\t// If a key column is not found in the record set, then we\n\t\t\t\t// can't use the key.\n\t\t\t\tif (!in_array($v, array_keys($rs->fields))) {\n\t\t\t\t\t$key = array();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Display edit and delete actions if we have a key\n\t\t\tif (sizeof($key) > 0)\n\t\t\t\techo \"<th colspan=\\\"2\\\" class=\\\"data\\\">{$lang['stractions']}</th>\\n\";\n\n\t\t\t/* we show OIDs only if we are in TABLE or SELECT type browsing */\n\t\t\tprintTableHeaderCells($rs, $gets, isset($object));\n\n\t\t\techo \"</tr>\\n\";\n\n\t\t\t$i = 0;\t\t\n\t\t\treset($rs->fields);\n\t\t\twhile (!$rs->EOF) {\n\t\t\t\t$id = (($i % 2) == 0 ? '1' : '2');\n\t\t\t\techo \"<tr class=\\\"data{$id}\\\">\\n\";\n\t\t\t\t// Display edit and delete links if we have a key\n\t\t\t\tif (sizeof($key) > 0) {\n\t\t\t\t\t$key_str = '';\n\t\t\t\t\t$has_nulls = false;\n\t\t\t\t\tforeach ($key as $v) {\n\t\t\t\t\t\tif ($rs->fields[$v] === null) {\n\t\t\t\t\t\t\t$has_nulls = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($key_str != '') $key_str .= '&amp;';\n\t\t\t\t\t\t$key_str .= urlencode(\"key[{$v}]\") . '=' . urlencode($rs->fields[$v]);\n\t\t\t\t\t}\n\t\t\t\t\tif ($has_nulls) {\n\t\t\t\t\t\techo \"<td colspan=\\\"2\\\">&nbsp;</td>\\n\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\techo \"<td class=\\\"opbutton{$id}\\\"><a href=\\\"display.php?action=confeditrow&amp;strings=\", \n\t\t\t\t\t\t\turlencode($_REQUEST['strings']), \"&amp;page=\", \n\t\t\t\t\t\t\turlencode($_REQUEST['page']), \"&amp;{$key_str}&amp;{$gets}&amp;{$getsort}\\\">{$lang['stredit']}</a></td>\\n\";\n\t\t\t\t\t\techo \"<td class=\\\"opbutton{$id}\\\"><a href=\\\"display.php?action=confdelrow&amp;strings=\", \n\t\t\t\t\t\t\turlencode($_REQUEST['strings']), \"&amp;page=\", \n\t\t\t\t\t\t\turlencode($_REQUEST['page']), \"&amp;{$key_str}&amp;{$gets}&amp;{$getsort}\\\">{$lang['strdelete']}</a></td>\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprint printTableRowCells($rs, $fkey_information, isset($object));\n\n\t\t\t\techo \"</tr>\\n\";\n\t\t\t\t$rs->moveNext();\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\techo \"</table>\\n\";\n\n\t\t\techo \"<p>\", $rs->recordCount(), \" {$lang['strrows']}</p>\\n\";\n\t\t\t// Show page navigation\n\t\t\t$misc->printPages($_REQUEST['page'], $max_pages, \"display.php?page=%s&amp;{$gets}&amp;{$getsort}&amp;strings=\" . urlencode($_REQUEST['strings']));\n\t\t}\n\t\telse echo \"<p>{$lang['strnodata']}</p>\\n\";\n\n\t\t// Navigation links\t\n\t\techo \"<ul class=\\\"navlink\\\">\\n\";\n\n\t\t// Return\n\t\tif (isset($_REQUEST['return_url']) && isset($_REQUEST['return_desc']))\n\t\t\techo \"\\t<li><a href=\\\"{$_REQUEST['return_url']}\\\">{$_REQUEST['return_desc']}</a></li>\\n\";\n\n\t\t// Edit SQL link\n\t\tif (isset($_REQUEST['query']))\n\t\t\techo \"\\t<li><a href=\\\"database.php?{$misc->href}&amp;action=sql&amp;paginate=on&amp;query=\",\n\t\t\t\turlencode($_REQUEST['query']), \"\\\">{$lang['streditsql']}</a></li>\\n\";\n\n\t\t// Expand/Collapse\n\t\tif ($_REQUEST['strings'] == 'expanded')\n\t\t\techo \"\\t<li><a href=\\\"display.php?{$gets}&amp;{$getsort}&amp;strings=collapsed&amp;page=\", \n\t\t\t\turlencode($_REQUEST['page']), \"\\\">{$lang['strcollapse']}</a></li>\\n\";\n\t\telse\n\t\t\techo \"\\t<li><a href=\\\"display.php?{$gets}&amp;{$getsort}&amp;strings=expanded&amp;page=\", \n\t\t\t\turlencode($_REQUEST['page']), \"\\\">{$lang['strexpand']}</a></li>\\n\";\n\n\t\t// Create report\n\t\tif (isset($_REQUEST['query']) && ($subject !== 'report') && $conf['show_reports'] && isset($rs) && is_object($rs) && $rs->recordCount() > 0)\n\t\t\techo \"\\t<li><a href=\\\"reports.php?{$misc->href}&amp;action=create&amp;report_sql=\",\n\t\t\t\turlencode($_REQUEST['query']), \"&amp;paginate=\", (isset($_REQUEST['paginate'])? urlencode($_REQUEST['paginate']):'f'), \"\\\">{$lang['strcreatereport']}</a></li>\\n\";\n\n\t\t// Create view and download\n\t\tif (isset($_REQUEST['query']) && isset($rs) && is_object($rs) && $rs->recordCount() > 0) {\n\t\t\t// Report views don't set a schema, so we need to disable create view in that case\n\t\t\tif (isset($_REQUEST['schema'])) \n\t\t\t\techo \"\\t<li><a href=\\\"views.php?action=create&amp;formDefinition=\",\n\t\t\t\t\turlencode($_REQUEST['query']), \"&amp;{$misc->href}\\\">{$lang['strcreateview']}</a></li>\\n\";\n\t\t\techo \"\\t<li><a href=\\\"dataexport.php?query=\", urlencode($_REQUEST['query']);\n\t\t\tif (isset($_REQUEST['search_path']))\n\t\t\t\techo \"&amp;search_path=\", urlencode($_REQUEST['search_path']);\n\t\t\techo \"&amp;{$misc->href}\\\">{$lang['strdownload']}</a></li>\\n\";\n\t\t}\n\n\t\t// Insert\n\t\tif (isset($object) && (isset($subject) && $subject == 'table'))\n\t\t\techo \"\\t<li><a href=\\\"tables.php?action=confinsertrow&amp;table=\",\n\t\t\t\turlencode($object), \"&amp;{$misc->href}\\\">{$lang['strinsert']}</a></li>\\n\";\n\n\t\t// Refresh\n\t\techo \"\\t<li><a href=\\\"display.php?{$gets}&amp;{$getsort}&amp;strings=\", urlencode($_REQUEST['strings']), \n\t\t\t\"&amp;page=\" . urlencode($_REQUEST['page']),\n\t\t\t\"\\\">{$lang['strrefresh']}</a></li>\\n\";\n\t\techo \"</ul>\\n\";\n\t}\n\n\n\t/* shortcuts: this function exit the script for ajax purpose */\n\tif ($action == 'dobrowsefk') {\n\t\tdoBrowseFK();\n\t}\n\n\t$scripts  = \"<script src=\\\"libraries/js/jquery.js\\\" type=\\\"text/javascript\\\"></script>\\n\";\n\t$scripts .= \"<script src=\\\"js/display.js\\\" type=\\\"text/javascript\\\"></script>\";\n\n\t$scripts .= \"<script type=\\\"text/javascript\\\">\\n\";\n\t$scripts .= \"var Display = {\\n\";\n\t$scripts .= \"errmsg: '\". str_replace(\"'\", \"\\'\", $lang['strconnectionfail']) .\"'\\n\";\n\t$scripts .= \"};\\n\";\n\t$scripts .= \"</script>\\n\";\n\n\t// If a table is specified, then set the title differently\n\tif (isset($_REQUEST['subject']) && isset($_REQUEST[$_REQUEST['subject']]))\n\t\t$misc->printHeader($lang['strtables'], $scripts);\n\telse\t\n\t\t$misc->printHeader($lang['strqueryresults']);\n\n\t$misc->printBody();\n\n\tswitch ($action) {\n\t\tcase 'editrow':\n\t\t\tif (isset($_POST['save'])) doEditRow(false);\n\t\t\telse doBrowse();\n\t\t\tbreak;\n\t\tcase 'confeditrow':\n\t\t\tdoEditRow(true);\n\t\t\tbreak;\n\t\tcase 'delrow':\n\t\t\tif (isset($_POST['yes'])) doDelRow(false);\n\t\t\telse doBrowse();\n\t\t\tbreak;\n\t\tcase 'confdelrow':\n\t\t\tdoDelRow(true);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tdoBrowse();\n\t\t\tbreak;\n\t}\n\n\t$misc->printFooter();\n?>\n"], "fixing_code": ["phpPgAdmin History\n------------------\n\nVersion 5.0\n-----------\n\nReleased: 29th November 2010\n\nFeatures\n* Support for PostgreSQL 8.4 and 9.0\n* Support for database level collation for 8.4+\n* Support for schema level export\n* Add ability to alter schema ownership\n* Clean up domain support and improve interface\n* Add support for commenting on functions\n* Allow user to rename role/users and set new passwords at the same time\n* Greatly enhanced Full-Text-Search capabilities (ioguix, Loomis_K)\n* Overhauled Selenium Test suite to support multiple database versions\n* Optimized application graphics (Limo Driver)\n* Support for Column Level Privileges\n* Allow users to specify a template database at database creation time\n* Support killing processes  \n* Add ability to create indexes concurrently\n* Much better support of autovacuum configuration\n* Add an admin page for table level\n* Refactored autocompletion:\n  * fix support for cross-schema objects \n  * support multi-field FK\n  * support for pagination of values in the auto-complete list\n* Allow user to logicaly group their server under custom named node in the browser tree\n* New themes (Cappuccino and Gotar) and a theme switcher on the introduction page\n* Auto refresh Locks page\n* Auto refresh Processes page\n* Link in the bottom of the page to go to top of page\n* Browsing on Foreign Keys (When browsing a table, clicking on a FK value, jump to the PK row)\n\n\nBugs\n* Fix problems with query tracking on overly long queries\n* Ensure pg_dump paths are valid\n* Fix multiple bugs about quoting and escaping database objects names with special chars\n* Fix multiple bugs in the browser tree\n* Fix multiple bugs on the SQL and script file import form\n* Three security fix about code injection\n* Don't allow inserting on a table without fields\n* Some fix about commenting databases\n* removed deprecated functions from PHP 5.3\n* Lot of code cleanup\n* Many other small minor bugs found on our way\n* Fix the operator property page\n\nTranslations\n* Czech (Marek Cernocky)\n* Greek (Adamantios Diamantidis)\n* Brazillian Portuguese (Fernando Wendt)\n* Galician (Adri\u00e1n Chaves Fern\u00e1ndez)\n\nIncompatabilities\n* No longer support PHP < 5.0\n* No longer support Postgres < 7.4\n\n\nVersion 4.2\n-----------\n\nFeatures\n* Add Analyze to Table Level Actions (ioguix)\n* Add support for multiple actions on main pages (ioguix, Robert Treat)\n* Added favicon for Mozilla and a backwards compatible version for IE.\n* Allow browsers to save different usernames and passwords for different servers.\n* Pagination selection available for reports\n* You can configure reports db, schema and table names\n* Add support for creating a table using an exsting one (ioguix)\n* Auto-expand a node in the tree browser if there are no other nodes (Tomasz Pala)\n* Add column about fields constraints type + links in table properties page (ioguix)\n* Support for built-in Full Text Search (Ivan Zolotukhin)  \n* Add alter name, owner & comment on views (ioguix)\n* Add column about called procedure + links to their definition in the triggers\n  properties page (ioguix)\n* Add Support for Enum type creation (ioguix,xzilla)\n* Add alter name, owner, comment and properties for sequences (ioguix)\n* Add function costing options (xzilla)\n* Add alter owner & schema on function (xzilla)\n* Add a popup window for the session requests history (karl, ioguix)\n* Add alter table, view, sequence schema (ioguix)\n\nBugs\n* Fix inability to assign a field type/domain of a different schema\n* Can't edit a report and set its comment to empty\n* Fix PHP5 Strict mode complaints \n* Fix IN/NOT IN to accept text input lists 'a','b'\n* Fix bytea doesn't display as NULL when NULL\n* Schema qualifing every object to avoid non wanted behaviour about users' rights\n  and schema_path\n* Remove shared credentials when logging out of single server, to prevent automatic re-login\n* Improved SSL connection handling, fix problems with connections from older php builds \n* Fix bug with long role name truncation \n* Fix bug with DELETE FROM when dropping a row (spq)\n* Fix problems when deleteing PUBLIC schema \n* Fix several bugs in aggregate support\n* Improve autocompletion support\n* Tighten up use of global scope variables\n\nTranslations\n* utf traditional chinese (Kuo Chaoyi)\n* utf simplified chinese (Kuo Chaoyi)\n* Italian (Nicola Soranzo)\n* Catalan (Bernat Pegueroles)\n* French (ioguix)\n* German (Albe Laurenz, spq)\n* Japanese (Tadashi Jokagi)\n* Hungarian (Sulyok Peti) \n\nVersion 4.1.3\n-------------\n\nBugs\n* Eliminate use of $_SERVER['PHP_SELF']. This fixes a regression in 4.1.2 for \n  non-mainstream locales (including SQL_ASCII)\n* Validate client supplied server against entries in config.inc.php \n* Fix undefined variable when altering a field in a table on PostgreSQL < 8.0\n\nVersion 4.1.2\n-------------\n\nBugs\n* Fix inability to assign a field type/domain of a different schema\n* Fix PHP5 Strict mode complaints \n* Fix IN/NOT IN to accept text input lists 'a','b'.\n* Fix bytea doesn't display as NULL when NULL\n* Fix bug in view creation wizard\n* Fix XSS vulnerability:\n   http://www.securityfocus.com/bid/24115/\n   Escape HTML special characters before using $_SERVER['PHP_SELF']\n\nVersion 4.1.1\n-------------\n\nBugs\n* Fix problem where failed update would report as duplicate update error and \n  fail to return edit screen\n* Fix error when using $conf[owned_only] on 8.1 & 8.2 \n* Fix error displaying schema names for parents of inherited tables\n* Clean up non-standard escape warnings for PostgreSQL 8.2\n* Fix improper text quoting for droping roles and aggregates\n* Fix bug when dumping mixed case table names in PostgreSQL 8.2\n\nVersion 4.1\n-----------\n\nFeatures\n* New icons by Niko <ennixo@free.fr>, from the graphics repository on pgFoundry.\n* Added icons to bread crumb trail and tabs.\n* Send encrypted passwords over the wire wherever possible.\n* Alter sequence, nextval and setval (Guillaume)\n* Auto-select 'WITHOUT OIDS' if 'default_with_oids' setting is false (Guillaume)\n* Autovacuum configuration support (Robert Treat)\n* Basic ROLE support (Chris Kings-Lynne, Javier Carlos)\n* Add support for SSL connections (Eric Kinolik)\n* Display content of pg_locks view (Javier Carlos)\n* Add labels for checkboxes/radio buttons for improved usability (Guillaume)\n* Display Prepared Transactions (Javier Carlos)\n* Re-enable table browsing from tree icons (ioguix) \n* Add Support For IN/OUT Parameters (John Jawed)\n* Add column level information into the tree browser (ioguix) \n* Promote column level interaction into its own page (ioguix) \n* Add automatic lookup of foreign key values in insert/update fields (John Jawed)\n* Add ability to create/drop/alter custom aggregates (Javier Carlos)\n* Add enable/disable trigger (John Jawed)\n* Add global comments for databases and tablespaces  \n\nTranslations\n* Catalan from Bernat \n* Romanian from Alin Vaida\n\nVersion 4.0\n-----------\n\nFeatures\n* Slony replication support (Thanks to sponsorship from SpikeSource)\n* Allow current database to be at the top\n* Allow base URL of PostgreSQL documentation to be configured\n* Allow variable size textarea when editing values (Juergen Weigert)\n* Allow SQL script upload to parse arbitrary SQL, including multiline\n  SQL statements.  Improve output to show every command as its executed\n  and SELECT results.\n* Add rudimentary support for PostgreSQL 8.1 and 8.2\n* primary key and unique key at table creation (Andreas Huber)\n* Add row|statement level options to create trigger for >= 7.4 (Robert Treat)\n* Allow altering name (for >= 7.4) and owner (for >= 8.0) of a database (Bryan Encina)\n* Allow login to several servers simultaneously\n* Rearrange frame layout to suit multi-server support\n* New browser tree with dynamically loading branches\n  (Using XLoadTree2 from http://webfx.eae.net/)\n* Allow language change from the intro page at any time\n* Avoid getting and setting encoding queries if possible\n* Avoid version query in PHP 5 / PostgreSQL 7.4+\n* Avoid query for superuser status in PHP 5 / PostgreSQL 7.4+\n* Put PostgreSQL 7.4+ in read only mode for pagination of results\n  to avoid executing selects that have write side effects.\n* Allow re-using username and password for all servers - saves re-entering\n  username and password for every server in a pool.\n* Make default language 'auto' indicating auto detect.  If a language is\n  deliberately specifed, then that will always be used and no detection will\n  occur.\n* ADOdb library updated to version 4.65\n  \nBugs\n* Tree Icons are displayed middle instead of top\n* Ensure login frame is always at top level (Russell Smith)\n* Fix non-ASCII characters inserted in Unicode databases as HTML entities with\n non-UTF8 web servers (Markus Bertheau)\n* Fix export to work with release candidates and beta releases as well as finals\n (Russell Smith)\n* Fix port selection for local connections\n* Fix timeouts on long running operations (Adrian Nida)\n* Allow Multiline character and character varying editing and inserting\n* Add automatic browser language selection for all languages\n* Stop duplicate insert on re-POST of data\n* Fix bug with exporting schema for servers < 7.3\n* Fix opclasses on 7.2 and below\n* Fix listing of opaque functions in 7.2\n* Actually fix PHP 4.4.0's new strict references\n\nTranslations\n* Japanese from Tadashi Jokagi\n* Danish from Arne Eckmann\n* Arabic from Zaki\n* Romanian from Alin\n* Afrikaans from Petri\n* Polish from Rafal (utf-8 encoding)\n* Slovak from Andrej\n* German from Markus\n* Spanish From Martin\n* Hungarian from Sulyok\n* Turkish from Devrim\n\nVersion 3.5.6\n-------------\n\nBugs\n* Actually fix PHP 4.4.0's new strict references\n\nVersion 3.5.5\n-------------\n\nBugs\n* Fix for PHP 4.4.0's new strict references\n* Small improvement to Opera browser detection in the tree\n* Fix listing of opaque functions in 7.2\n* Fix listing of opclasses and functions pre 7.3\n\nVersion 3.5.4\n-------------\n\nBugs\n* Fix security hole in include() of language file:\n   http://secunia.com/advisories/15941/\n  Check now requires that the language filename be in the list\n  of known allowed filenames.\n* Fix that functions returning cstring were not being listed\n* Make parsing of PostgreSQL 1-dimensional arrays correct.  Makes\n  named function parameter use more reliable.\n* Fix downloading of the results of multiline queries.\n\nVersion 3.5.3\n-------------\n\nBugs\n* Fix using schema enabled dump on non-schema enabled backend\n* Don't try setting no timeout when in safe mode\n* Reload browser after executing arbitrary SQL\n* Fix browser in RTL languages\n* Fix inability to drop database using the drop link\n* Fix last internal oid value for PostgreSQL 8.0\n* Fix (again) dumping on v8 for windows, exclude dumping some objects.\n\nTranslations\n* Portuguese from Francisco\n\nVersion 3.5.2\n-------------\n\nBugs\n* Fix export to work with release candidates and beta releases as well as finals\n (Russell Smith)\n* Fix port selection for local connections (Russell Smith)\n* Fix timeouts on long running operations (Adrian Nida)\n* Allow Multiline character and character varying editing and inserting\n* Do browser language detection for all languages\n\nTranslations\n* Japanese from Tadashi\n* Danish from Arne\n\nVersion 3.5.1\n-------------\n\nBugs\n* Support 8.0beta5 schema tablespace changes\n* Help link fixes\n* Estimated row count in 7.0 and 7.1 fixes\n* Priviliges nav fix\n* Function privileges fix\n* Search path fix\n* pg_dump on win32 8.0 native fix\n\nTranslations\n* Romanian from Alin\n* Italian updates from Nicola\n\nVersion 3.5\n-----------\n\nFeatures\n* Context-sensitive online help system\n* Use language preferencies from browser (Markus Bertheau, Nicola Soranzo)\n* Tablespace support for 8.0\n* Support cancelling backend processes in 8.0\n* Allow setting privileges on databases\n* Allow setting schema search path in SQL window\n* Allow filtering find results by object type\n* Show function arguments in find results\n* Support 8.0's named function arguments\n* \"Sticky\" navigation.  phpPgAdmin will now remember while tab you are\n  looking at (eg. 'Indexes') when you change which table you are viewing.\n* New fast navigation bar.  A breadcrumb style navigation bar for fast\n  jumping between areas.\n* Much improved grant/revoke feature\n* Allow creating and viewing composite types\n* pg_dumpall integration.  Now you can download the entire cluster via\n  phpPgAdmin.\n* Show line numbers when viewing functions\n* Syntax highlighting for PL/SQL, PL/PgSQL, PL/PHP, PL/Ruby, PL/Java, \n  PL/J, PL/Python and PL/Perl functions, thanks to Jacob D. Cohen's\n  BSD-licensed highlighting code on rafb.net\n* Add page navigation links at the bottom as well as the top of the page\n  when browsing results.\n* Support for 8.0's alter column type\n* Support for 8.0's add columns with defaults and not null\n\nTranslations\n* Romanian from Alin\n* Arabic from Zaki\n* Japanese from Tadashi\n* Spanish from Robert & Martin\n* Mongolian from Erdenemandal\n* Ukrainian from Alex Rootoff\n* Hebrew from jonatan\n* Hungarian from Sulyok\n* French from Pascal\n* Afrikaans from Petri\n* Turkish from Devrim\n* Slovak from Andrej\n* German from Markus\n* Italian from Nicola\n* Polish from Rafal\n\nBugs\n* Fix that non-Auto mode import didn't work (Adrian Nida)\n* Fix inability to drop constraints when using a non-english translation\n* Work around MSIE's failure to handle downloads in SSL mode\n* Allow insert, update, delete, references and trigger to be granted\n  and revoked on views.\n\nVersion 3.4.1\n-------------\n\nBugs\n* Fix export of mixed case tables pre 7.4\n* Fix table export problems pre 7.3\n* Fix join clause created by view wizard for pre 7.3\n* Fix reindex of mixed case indexes\n* Show domains in type lists in appropriate places\n* Fix for multiline CDATA parsing in XML import\n* Fix missing _schema notice in reports\n\nVersion 3.4\n-----------\n\nFeatures\n* Add CACHE and CYCLE parameters in sequence creation\n* View, add, edit and delete comments on tables, views, schemas, \n  aggregates, conversions, operators, functions, types,\n  opclasses, sequences and columns (Dan Boren & ChrisKL)\n* Add config file option for turning off the display of comments\n* Allow creating array columns in tables\n* Allow adding array columns to tables\n* Allow creating domains with type length and arrays\n* Show domain base type and comment in domains list\n* Allow import of CSV, Tabbed and XML data.  \"Auto\" mode chooses\n  import mode based on the file extension.\n* Allow upload and execution of _basic_ SQL scripts\n* More admin features available: vacuum, analyze, cluster all and reindex\n  (with all options) (Bryan Encina)\n* Fix SQL popup window to reload when the database is changed so\n  that the correct page encoding is used.\n* Create view wizard (Bryan Encina)\n* Allow specification of MATCH, DEFERRABLE and INITIALLY DEFERRED on\n  foreign keys.\n* Automatically uncheck the NULL checkbox when data is typed in the value\n  field while editing data.\n* Show query runtime when executing arbitrary SQL\n* Allow renaming functions when backend supports it\n* Views are now more like tables.  They are listed in the browser,\n  you can view the virtual columns of the view and its column defaults.\n  Columns in view can also be renamed and have defaults set.\n* Allow viewing, dropping and creation of rules on views.\n* Support for 8.0-dev ALTER COLUMN TYPE, adding of SERIAL and BIGSERIAL\n  columns, adding NOT NULL columns and adding columns with defaults.\n\nBugs\n* Fix pg_dump output for PostgreSQL 7.0.x and 7.1.x\n* In 7.4 pg_dump, specify schema when dumping tables\n* Fix bug in displaying array types in 7.0.x\n* Fix bug where views appeared as tables in 7.0.x search results\n* Fix bug where find object SQL on < 7.2 was broken\n* Fix Find for domain constraints\n* Fix popup SQL window so that two different phpPgAdmin instances should\n  not want to use the same pop-up.\n* Fix create table if you don't supply as many fields as you originally\n  specified.\n* Fix schema support for views\n\nTranslations\n* Trad. Chinese from Chih-Hsin Lee\n* Italian from Nicola\n* Spanish from Martin\n* Slovak from Andrej\n* German from Markus\n* Turkish from Devrim\n* Hungarian from Sulyok\n* French from Pascal\n* Polish from Rafal\n* Russian from Alex\n\nVersion 3.3.1\n-------------\n\nBugs\n* Fix table stats for <= 7.2\n\nTranslations\n* Spanish from Martin\n\nVersion 3.3\n-----------\n\nFeatures\n* Database dump feature, which uses pg_dump\n* Large speed improvements by reducing number of database\n  connections and using external style sheet.\n* SQL pop-up window now defaults to the current database\n* Display aggregates and operator classes\n* Integration with the PostgreSQL statistics collector.  See\n  table and index performance and usage information.\n* Display user session defaults for PostgreSQL >= 7.3\n* Rename user feature for PostgreSQL >= 7.4\n* Create functions returning arrays and table types\n* Allow editing Select results by oid\n* Allow pagination of queries entered in the SQL box\n* Allow EXPLAIN ANALYZE of SQL queries (in both SQL boxes)\n* Default cursor conveniently in SQL box and Find\n\nBugs\n* Object browser fixed for databases with no schemas\n* Properly detect that reports database is missing\n* Fix for alter column on PostgreSQL 7.1\n* phpPgAdmin now works without '.' in the include_path\n* Can now remove expire dates on user accounts\n* Properties of mixed case named views work in 7.4\n\nTranslations\n* Spanish from Martin Marques\n* Japanese from Tadashi Jokagi\n* Swedish from Stefan Malmqvist\n* Slovak from Andrej Misovik\n* Hungarian from Sulyok Peter\n* Trad. Chinese from Chih-Hsin Lee\n* Italian from Nicola Soranzo\n* Afrikaans from Petri Jooste\n* Turkish from Devrim Gunduz\n* German from Markus Bertheau\n* Czech from Libor Vanek\n* Russian from Alex Khodorivsky\n\nVersion 3.2.1\n-------------\n\nBugs\n* Trailing newline problem in chinese-sim translation fixed\n\nTranslations\n* French from Pascal\n* Russian from Step\n\nVersion 3.2\n-----------\n\nFeatures\n* PostgreSQL 8.0 CVS support\n* Option to dump table structure, data or structure and data\n* Set datestyle and extra_float_digits when dumping data\n* Results of table browse, table select, view browsing and report browsing\n  can now ALL be sorted by column\n* Result rows of table selects can now be edited and deleted\n* Extra login security to prevent logging into servers as postgres and\n  no password - a VERY common newbie error.\n* Cluster indexes and indexed constraints (with analyze)\n* Display clustered status of indexes and indexed constraints\n* Table info - shows tables that reference the table, parent tables,\n  and child tables.\n* Choice of operator when performing a Select\n* 'Select All' feature of table selects now available on view\n  selects.\n* Removed any trace of MySQL support\n* Show casts\n* Show conversions\n* Show languages\n* Make table icon link to browse table\n* New show_advanced option that allows the hiding or display of\n  \"advanced\" objects such as conversions, types, operators, casts and\n  languages.\n* Find Object feature can now find conversions, languages, domains,\n  constraints, indexes, rules and triggers.\n* Better language Makefile for translators\n* The SQL box now remembers your query when you click 'Back'.\n\nBugs\n* Added legal DOCTYPE\n* Allow creating foreign keys to tables not in current schema\n* Always add brackets around CHECK () constraints\n* Never display an index in both Indexes and Constraints\n* BIGSERIAL missing from PostgreSQL 7.2\n* Types lengths (eg. varchar(255)) weren't being displayed properly\n  in PostgreSQL 7.0.x\n* Resetting sequence on 7.1+ now restarts at 1, not 2\n* Remove deprecated column default 'now' from SQL script\n* Properly escape pg_ in internal queries\n\nTranslations\n* Afrikaans from Petri Jooste\n* Hungarian from Sulyok P\u00e9ter\n* German update from Markus Bertheau\n* Trad. Chinese from Chih-Hsin Lee\n* Hungarian from Peti \n* Spanish update from Martin Marques\n* Slovak update from Andrej Misovic\n* Turkish update from Devrim\n* Swedish update from Stefan\n* Italian update from Nicola\n\nVersion 3.1\n-----------\n\nBug Fixes:\n* Table browsing for 7.4 fixed\n* Synch script for translators disabled due to bugginess.  If you want\n  to use it, just comment out the warning lines from the script itself.\n* Change HTML download to XHTML and make it a 100% conforming document, with DTD\n* Alter XML format to allow future features\n\nTranslations:\n* Trad. Chinese\n* Dutch\n* Spanish\n* Swedish\n* Turkish\n* French\n* Japanese\n\nVersion 3.1-rc-1\n----------------\n\nBug Fixes\n* Table browsing for != 7.3\n* SQL window improvements\n* Translation improvements\n\nVersion 3.1-beta-1\n------------------\n\nFeatures:\n* Add first & last links to nav.  Double number of pages shown.\n* Allow granting privileges WITH GRANT OPTION for 7.4\n* Allow revoking GRANT OPTION with CASCADE option for 7.4\n* Display new PostgreSQL 7.4 grant options and grantor in privileges\n* Find object feature\n* Support for domains in 7.3 and domain constraints and alter domain in 7.4\n* Add/drop users to/from groups\n* Alter (rename) triggers\n* Pop-up SQL window from Mark Gibson\n* Superusers can always see all databases\n* Default database encoding for languages\n* Convert our images to PNG format\n* Allow creating tables WITHOUT OIDS\n* Show boolean values as TRUE or FALSE when viewing data\n* Allow renaming table and changing table owner\n* Refresh feature on table browse\n* Support better formatted view dumps in 7.4\n* When browsing data, numeric types are aligned right\n* Ability to create unique and partial indexes\n* View and edit table comments\n* Changed XML format significantly.  Now doesn't use field names as\n  tag names, outputs column type information, and is in correct XML format!\n* Save result sets as views and reports in most cases \n* Download the results of selects and reports\n* Tick all box on Select feature\n* Export in HTML format\n* Allow listing of operators\n* Add a robots.txt file to prevent search engine indexation\n* Can now safely edit row based on OID.  Guards are in place against duplicate OIDs.\n* Works properly if you have cookies disabled\n\nBug Fixes:\n* Lots of NULL value in table dump fixes (XML format changed slightly)\n* Boolean default values and general boolean field handling fixes\n* Support zero column tables\n* Correctly display the contents of bytea fields\n* Consider information_schema to be a system object\n* Remember fields if index creation fails\n* Fix saving and loading function volatility\n* Don't list domains under types\n* Lots of reports fixes (titles, page reloads, etc.)\n* Selecting for NULL values in Select feature\n\nTranslations:\n* Italian translation update from Nicola Soranzo\n* German update from Markus Bertheau\n* Spanish update from Martin Marques\n* Trad. Chinese update from Chih-Hsin Lee\n* Russian update from Step\n* Slovak update from Andrej\n* Polish update from Rafal\n* Swedish translation from Stefan Malqvist\n* Turkish update from Devrim Gunduz\n* German update from Markus Bertheau\n* Traditional Chinese update from Chih-Hsin Lee\n* Spanish update from Martin\n\nVersion 3.0.1\n-------------\n\nBug Fixes\n* Lots of NULL value in table dump fixes (XML format changed slightly)\n* Support zero column tables\n* Correctly display the contents of bytea fields\n* Error in ADODB_base.php\n* Fix saving and loading function volatility\n* Don't list domains under types\n\nVersion 3.0\n-----------\n\n* German update from Markus Bertheau\n* Russian update from Alexander Khodorivsky\n\nVersion 3.0-rc-2\n----------------\n\n* Slovak update from Andrej Misovic\n* Japanese update from Tadashi Jokagi\n* Added 'defaultdb' per-connection variable\n  for installations where connection to template1\n  is disabled.\n* Removed uses of call time pass by reference,\n  since it is a deprecated feature of PHP. \n\nVersion 3.0-rc-1\n----------------\n\n* Fix drop database reload browser bug\n* Look & Feel upgrade from Davey\n* Value & expression on edit row\n* Chinese update from Chih-Hsin Lee \n* Fixed support for functions and sequences\n  containing bizarre characters\n\nVersion 3.0-beta-1\n-------------------\n\n* Cascade drop on columns and constraints\n* Czech translation\n* Preserve spaces when displaying data\n* Greatly improved PostgreSQL 7.2, 7.1 and 7.0 support\n* Italian translation\n* Show database version in top bar \n* Many features useful for PostgreSQL hosting:\n\t- Hide reports\n\t- Filter for owned reports\n\t- Hide admin for non-super users\n\t- Easy for a user to change their own password\n\t- Enforceable minimum password length\n* Switched to PEAR's HTML_TreeMenu to avoid license issue\n* Function editor can handle setof functions, and all\n  function properties for volatility, etc.\n* Manage permissions on functions\n* Massive table browsing improvements:\n\t- Sort ascending and descending by clicking\n\t  on field name\n\t- Trim long strings.  Use 'expand' and 'collapse' to\n\t  see full strings or trimmed strings.\n* Revoke on objects.  Grant or revoke to multiple groups\n  and users at once.\n* Brazilian Portuguese translation from Angelo Rigo\n\nVersion 3.0.0-dev-4\n-------------------\n\n* Sort on a column when browsing a table\n* Slovak translation\n* Turkish translation\n* German translation\n* Reload browser after create/drop of database, schemas and tables\n* Select on views\n* Add foreign key constraint, with actions\n* Cascade drop on all objects\n\nVersion 3.0.0-dev-3\n-------------------\n\n* French translation\n* Russian translations\n* Japanese translations\n* Trigger definitions\n* ADODB upgrade\n* Allow editing of non-null unique\n\nVersion 3.0.0-dev-2\n-------------------\n\n* Language files now use an array of strings\n* Almost complete Chinese translation\n* Create sequence\n* Create trigger\n* Create index\n* Add check constraint\n* Lots of small fixes\n* Add column\n\nVersion 3.0.0-dev-1\n-------------------\n\n* Renamed to phpPgAdmin from WebDB\n* Heaps of other stuff\n\nVersion 0.6 - 24-Dec-2002\n-------------------------\n\n* Support short_tags off\n* Fix browsing tables, pagination, etc.\n* Fix all error handling\n* Fix problems with apostrophes in database, usernames or passwords\n\nVersion 0.5 - 20-Dec-2002\n-------------------------\n\n* Initial public release\n* Still many problems making it unsuitable for production.\n\nVersion 0.1 - Early 2002\n------------------------\n\n* Initial development version\n\n", "<?php\n\t/**\n\t * Class to hold various commonly used functions\n\t *\n\t * $Id: Misc.php,v 1.171 2008/03/17 21:35:48 ioguix Exp $\n\t */\n\n\tclass Misc {\n\t\t// Tracking string to include in HREFs\n\t\tvar $href;\n\t\t// Tracking string to include in forms\n\t\tvar $form;\n\n\t\t/* Constructor */\n\t\tfunction Misc() {\n\t\t}\n\n\t\t/**\n\t\t * Checks if dumps are properly set up\n\t\t * @param $all (optional) True to check pg_dumpall, false to just check pg_dump\n\t\t * @return True, dumps are set up, false otherwise\n\t\t */\n\t\tfunction isDumpEnabled($all = false) {\n\t\t\t$info = $this->getServerInfo();\n\t\t\treturn !empty($info[$all ? 'pg_dumpall_path' : 'pg_dump_path']);\n\t\t}\n\n\t\t/**\n\t\t * Sets the href tracking variable\n\t\t */\n\t\tfunction setHREF() {\n\t\t\t$this->href = $this->getHREF();\n\t\t}\n\n\t\t/**\n\t\t * Get a href query string, excluding objects below the given object type (inclusive)\n\t\t */\n\t\tfunction getHREF($exclude_from = null) {\n\t\t\t$href = '';\n\t\t\tif (isset($_REQUEST['server']) && $exclude_from != 'server') {\n\t\t\t\t$href .= 'server=' . urlencode($_REQUEST['server']);\n\t\t\t\tif (isset($_REQUEST['database']) && $exclude_from != 'database') {\n\t\t\t\t\t$href .= '&amp;database=' . urlencode($_REQUEST['database']);\n\t\t\t\t\tif (isset($_REQUEST['schema']) && $exclude_from != 'schema') {\n\t\t\t\t\t\t$href .= '&amp;schema=' . urlencode($_REQUEST['schema']);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $href;\n\t\t}\n\n\t\t/**\n\t\t * Sets the form tracking variable\n\t\t */\n\t\tfunction setForm() {\n\t\t\t$this->form = '';\n\t\t\tif (isset($_REQUEST['server'])) {\n\t\t\t\t$this->form .= \"<input type=\\\"hidden\\\" name=\\\"server\\\" value=\\\"\" . htmlspecialchars($_REQUEST['server']) . \"\\\" />\\n\";\n\t\t\t\tif (isset($_REQUEST['database'])) {\n\t\t\t\t\t$this->form .= \"<input type=\\\"hidden\\\" name=\\\"database\\\" value=\\\"\" . htmlspecialchars($_REQUEST['database']) . \"\\\" />\\n\";\n\t\t\t\t\tif (isset($_REQUEST['schema'])) {\n\t\t\t\t\t\t$this->form .= \"<input type=\\\"hidden\\\" name=\\\"schema\\\" value=\\\"\" . htmlspecialchars($_REQUEST['schema']) . \"\\\" />\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Render a value into HTML using formatting rules specified\n\t\t * by a type name and parameters.\n\t\t *\n\t\t * @param $str The string to change\n\t\t *\n\t\t * @param $type Field type (optional), this may be an internal PostgreSQL type, or:\n\t\t *\t\t\tyesno    - same as bool, but renders as 'Yes' or 'No'.\n\t\t *\t\t\tpre      - render in a <pre> block.\n\t\t *\t\t\tnbsp     - replace all spaces with &nbsp;'s\n\t\t *\t\t\tverbatim - render exactly as supplied, no escaping what-so-ever.\n\t\t *\t\t\tcallback - render using a callback function supplied in the 'function' param.\n\t\t *\n\t\t * @param $params Type parameters (optional), known parameters:\n\t\t *\t\t\tnull     - string to display if $str is null, or set to TRUE to use a default 'NULL' string,\n\t\t *\t\t\t           otherwise nothing is rendered.\n\t\t *\t\t\tclip     - if true, clip the value to a fixed length, and append an ellipsis...\n\t\t *\t\t\tcliplen  - the maximum length when clip is enabled (defaults to $conf['max_chars'])\n\t\t *\t\t\tellipsis - the string to append to a clipped value (defaults to $lang['strellipsis'])\n\t\t *\t\t\ttag      - an HTML element name to surround the value.\n\t\t *\t\t\tclass    - a class attribute to apply to any surrounding HTML element.\n\t\t *\t\t\talign    - an align attribute ('left','right','center' etc.)\n\t\t *\t\t\ttrue     - (type='bool') the representation of true.\n\t\t *\t\t\tfalse    - (type='bool') the representation of false.\n\t\t *\t\t\tfunction - (type='callback') a function name, accepts args ($str, $params) and returns a rendering.\n\t\t *\t\t\tlineno   - prefix each line with a line number.\n\t\t *\t\t\tmap      - an associative array.\n\t\t *\n\t\t * @return The HTML rendered value\n\t\t */\n\t\tfunction printVal($str, $type = null, $params = array()) {\n\t\t\tglobal $lang, $conf, $data;\n\n\t\t\t// Shortcircuit for a NULL value\n\t\t\tif (is_null($str))\n\t\t\t\treturn isset($params['null'])\n\t\t\t\t\t\t? ($params['null'] === true ? '<i>NULL</i>' : $params['null'])\n\t\t\t\t\t\t: '';\n\n\t\t\tif (isset($params['map']) && isset($params['map'][$str])) $str = $params['map'][$str];\n\n\t\t\t// Clip the value if the 'clip' parameter is true.\n\t\t\tif (isset($params['clip']) && $params['clip'] === true) {\n\t\t\t\t$maxlen = isset($params['cliplen']) && is_integer($params['cliplen']) ? $params['cliplen'] : $conf['max_chars'];\n\t\t\t\t$ellipsis = isset($params['ellipsis']) ? $params['ellipsis'] : $lang['strellipsis'];\n\t\t\t\tif (strlen($str) > $maxlen) {\n\t\t\t\t\t$str = substr($str, 0, $maxlen-1) . $ellipsis;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$out = '';\n\n\t\t\tswitch ($type) {\n\t\t\t\tcase 'int2':\n\t\t\t\tcase 'int4':\n\t\t\t\tcase 'int8':\n\t\t\t\tcase 'float4':\n\t\t\t\tcase 'float8':\n\t\t\t\tcase 'money':\n\t\t\t\tcase 'numeric':\n\t\t\t\tcase 'oid':\n\t\t\t\tcase 'xid':\n\t\t\t\tcase 'cid':\n\t\t\t\tcase 'tid':\n\t\t\t\t\t$align = 'right';\n\t\t\t\t\t$out = nl2br(htmlspecialchars($str));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'yesno':\n\t\t\t\t\tif (!isset($params['true'])) $params['true'] = $lang['stryes'];\n\t\t\t\t\tif (!isset($params['false'])) $params['false'] = $lang['strno'];\n\t\t\t\t\t// No break - fall through to boolean case.\n\t\t\t\tcase 'bool':\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tif (is_bool($str)) $str = $str ? 't' : 'f';\n\t\t\t\t\tswitch ($str) {\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\t$out = (isset($params['true']) ? $params['true'] : $lang['strtrue']);\n\t\t\t\t\t\t\t$align = 'center';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\t$out = (isset($params['false']) ? $params['false'] : $lang['strfalse']);\n\t\t\t\t\t\t\t$align = 'center';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$out = htmlspecialchars($str);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'bytea':\n\t\t\t\t\t$tag = 'div';\n\t\t\t\t\t$class = 'pre';\n\t\t\t\t\t$out = $data->escapeBytea($str);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'errormsg':\n\t\t\t\t\t$tag = 'pre';\n\t\t\t\t\t$class = 'error';\n\t\t\t\t\t$out = htmlspecialchars($str);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'pre':\n\t\t\t\t\t$tag = 'pre';\n\t\t\t\t\t$out = htmlspecialchars($str);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'prenoescape':\n\t\t\t\t\t$tag = 'pre';\n\t\t\t\t\t$out = $str;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'nbsp':\n\t\t\t\t\t$out = nl2br(str_replace(' ', '&nbsp;', htmlspecialchars($str)));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'verbatim':\n\t\t\t\t\t$out = $str;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'callback':\n\t\t\t\t\t$out = $params['function']($str, $params);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'prettysize':\n\t\t\t\t\tif ($str == -1) \n\t\t\t\t\t\t$out = $lang['strnoaccess'];\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$limit = 10 * 1024;\n\t\t\t\t\t\t$mult = 1;\n\t\t\t\t\t\tif ($str < $limit * $mult)\n\t\t\t\t\t\t\t$out = $str.' '.$lang['strbytes'];\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$mult *= 1024;\n\t\t\t\t\t\t\tif ($str < $limit * $mult)\n\t\t\t\t\t\t\t\t$out = floor(($str + $mult / 2) / $mult).' '.$lang['strkb'];\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$mult *= 1024;\n\t\t\t\t\t\t\t\tif ($str < $limit * $mult)\n\t\t\t\t\t\t\t\t\t$out = floor(($str + $mult / 2) / $mult).' '.$lang['strmb'];\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$mult *= 1024;\n\t\t\t\t\t\t\t\t\tif ($str < $limit * $mult)\n\t\t\t\t\t\t\t\t\t\t$out = floor(($str + $mult / 2) / $mult).' '.$lang['strgb'];\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$mult *= 1024;\n\t\t\t\t\t\t\t\t\t\tif ($str < $limit * $mult)\n\t\t\t\t\t\t\t\t\t\t\t$out = floor(($str + $mult / 2) / $mult).' '.$lang['strtb'];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'slonystatus':\n\t\t\t\t\tswitch ($str) {\n\t\t\t\t\tcase 'insync':\n\t\t\t\t\t\t$out = $lang['strhealthy'];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'outofsync':\n\t\t\t\t\t\t$out = $lang['stroutofsync'];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$out = $lang['strunknown'];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// If the string contains at least one instance of >1 space in a row, a tab\n\t\t\t\t\t// character, a space at the start of a line, or a space at the start of\n\t\t\t\t\t// the whole string then render within a pre-formatted element (<pre>).\n\t\t\t\t\tif (preg_match('/(^ |  |\\t|\\n )/m', $str)) {\n\t\t\t\t\t\t$tag = 'pre';\n\t\t\t\t\t\t$class = 'data';\n\t\t\t\t\t\t$out = htmlspecialchars($str);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$out = nl2br(htmlspecialchars($str));\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isset($params['class'])) $class = $params['class'];\n\t\t\tif (isset($params['align'])) $align = $params['align'];\n\n\t\t\tif (!isset($tag) && (isset($class) || isset($align))) $tag = 'div';\n\n\t\t\tif (isset($tag)) {\n\t\t\t\t$alignattr = isset($align) ? \" style=\\\"text-align: {$align}\\\"\" : '';\n\t\t\t\t$classattr = isset($class) ? \" class=\\\"{$class}\\\"\" : '';\n\t\t\t\t$out = \"<{$tag}{$alignattr}{$classattr}>{$out}</{$tag}>\";\n\t\t\t}\n\n\t\t\t// Add line numbers if 'lineno' param is true\n\t\t\tif (isset($params['lineno']) && $params['lineno'] === true) {\n\t\t\t\t$lines = explode(\"\\n\", $str);\n\t\t\t\t$num = count($lines);\n\t\t\t\tif ($num > 0) {\n\t\t\t\t\t$temp = \"<table>\\n<tr><td class=\\\"{$class}\\\" style=\\\"vertical-align: top; padding-right: 10px;\\\"><pre class=\\\"{$class}\\\">\";\n\t\t\t\t\tfor ($i = 1; $i <= $num; $i++) {\n\t\t\t\t\t\t$temp .= $i . \"\\n\";\n\t\t\t\t\t}\n\t\t\t\t\t$temp .= \"</pre></td><td class=\\\"{$class}\\\" style=\\\"vertical-align: top;\\\">{$out}</td></tr></table>\\n\";\n\t\t\t\t\t$out = $temp;\n\t\t\t\t}\n\t\t\t\tunset($lines);\n\t\t\t}\n\n\t\t\treturn $out;\n\t\t}\n\n\t\t/**\n\t\t * A function to recursively strip slashes.  Used to\n\t\t * enforce magic_quotes_gpc being off.\n\t\t * @param &var The variable to strip\n\t\t */\n\t\tfunction stripVar(&$var) {\n\t\t\tif (is_array($var)) {\n\t\t\t\tforeach($var as $k => $v) {\n\t\t\t\t\t$this->stripVar($var[$k]);\n\n\t\t\t\t\t/* magic_quotes_gpc escape keys as well ...*/\n\t\t\t\t\tif (is_string($k)) {\n\t\t\t\t\t\t$ek = stripslashes($k);\n\t\t\t\t\t\tif ($ek !== $k) {\n\t\t\t\t\t\t\t$var[$ek] = $var[$k];\n\t\t\t\t\t\t\tunset($var[$k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\t$var = stripslashes($var);\n\t\t}\n\n\t\t/**\n\t\t * Print out the page heading and help link\n\t\t * @param $title Title, already escaped\n\t\t * @param $help (optional) The identifier for the help link\n\t\t */\n\t\tfunction printTitle($title, $help = null) {\n\t\t\tglobal $data, $lang;\n\n\t\t\techo \"<h2>\";\n\t\t\t$this->printHelp($title, $help);\n\t\t\techo \"</h2>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Print out a message\n\t\t * @param $msg The message to print\n\t\t */\n\t\tfunction printMsg($msg) {\n\t\t\tif ($msg != '') echo \"<p class=\\\"message\\\">{$msg}</p>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Creates a database accessor\n\t\t */\n\t\tfunction getDatabaseAccessor($database, $server_id = null) {\n\t\t\tglobal $lang, $conf, $misc, $_connection;\n\n\t\t\t$server_info = $this->getServerInfo($server_id);\n\n\t\t\t// Perform extra security checks if this config option is set\n\t\t\tif ($conf['extra_login_security']) {\n\t\t\t\t// Disallowed logins if extra_login_security is enabled.\n\t\t\t\t// These must be lowercase.\n\t\t\t\t$bad_usernames = array('pgsql', 'postgres', 'root', 'administrator');\n\n\t\t\t\t$username = strtolower($server_info['username']);\n\n\t\t\t\tif ($server_info['password'] == '' || in_array($username, $bad_usernames)) {\n\t\t\t\t\tunset($_SESSION['webdbLogin'][$_REQUEST['server']]);\n\t\t\t\t\t$msg = $lang['strlogindisallowed'];\n\t\t\t\t\tinclude('./login.php');\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Create the connection object and make the connection\n\t\t\t$_connection = new Connection(\n\t\t\t\t$server_info['host'],\n\t\t\t\t$server_info['port'],\n\t\t\t\t$server_info['sslmode'],\n\t\t\t\t$server_info['username'],\n\t\t\t\t$server_info['password'],\n\t\t\t\t$database\n\t\t\t);\n\n\t\t\t// Get the name of the database driver we need to use.\n\t\t\t// The description of the server is returned in $platform.\n\t\t\t$_type = $_connection->getDriver($platform);\n\t\t\tif ($_type === null) {\n\t\t\t\tprintf($lang['strpostgresqlversionnotsupported'], $postgresqlMinVer);\n\t\t\t\texit;\n\t\t\t}\n\t\t\t$this->setServerInfo('platform', $platform, $server_id);\n\t\t\t$this->setServerInfo('pgVersion', $_connection->conn->pgVersion, $server_id);\n\n\t\t\t// Create a database wrapper class for easy manipulation of the\n\t\t\t// connection.\n\t\t\tinclude_once('./classes/database/' . $_type . '.php');\n\t\t\t$data = new $_type($_connection->conn);\n\t\t\t$data->platform = $_connection->platform;\n\n\t\t\treturn $data;\n\t\t}\n\n\n\t\t/**\n\t\t * Prints the page header.  If global variable $_no_output is\n\t\t * set then no header is drawn.\n\t\t * @param $title The title of the page\n\t\t * @param $script script tag\n\t\t */\n\t\tfunction printHeader($title = '', $script = null, $frameset = false) {\n\t\t\tglobal $appName, $lang, $_no_output, $conf;\n\n\t\t\tif (!isset($_no_output)) {\n\t\t\t\theader(\"Content-Type: text/html; charset=\" . $lang['appcharset']);\n\t\t\t\t// Send XHTML headers, or regular XHTML strict headers\n\t\t\t\techo \"<?xml version=\\\"1.0\\\" encoding=\\\"\", htmlspecialchars($lang['appcharset']), \"\\\"?>\\n\";\n\t\t\t\tif ($frameset == true) {\n\t\t\t\t\techo \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Frameset//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\\\">\\n\";\n\t\t\t\t} else if (isset($conf['use_xhtml_strict']) && $conf['use_xhtml_strict']) {\n\t\t\t\t\techo \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-Strict.dtd\\\">\\n\";\n\t\t\t\t} else {\n\t\t\t\t\techo \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\\n\";\n\t\t\t\t}\n\t\t\t\techo \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"{$lang['applocale']}\\\" lang=\\\"{$lang['applocale']}\\\"\";\n\t\t\t\tif (strcasecmp($lang['applangdir'], 'ltr') != 0) echo \" dir=\\\"\", htmlspecialchars($lang['applangdir']), \"\\\"\";\n\t\t\t\techo \">\\n\";\n\n\t\t\t\techo \"<head>\\n\";\n\t\t\t\techo \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset={$lang['appcharset']}\\\" />\\n\";\n\t\t\t\t// Theme\n\t\t\t\techo \"<link rel=\\\"stylesheet\\\" href=\\\"themes/{$conf['theme']}/global.css\\\" type=\\\"text/css\\\" />\\n\";\n\t\t\t\techo \"<link rel=\\\"shortcut icon\\\" href=\\\"images/themes/{$conf['theme']}/Favicon.ico\\\" type=\\\"image/vnd.microsoft.icon\\\" />\\n\";\n\t\t\t\techo \"<link rel=\\\"icon\\\" type=\\\"image/png\\\" href=\\\"images/themes/{$conf['theme']}/Introduction.png\\\" />\\n\";\n\t\t\t\techo \"<title>\", htmlspecialchars($appName);\n\t\t\t\tif ($title != '') echo htmlspecialchars(\" - {$title}\");\n\t\t\t\techo \"</title>\\n\";\n\n\t\t\t\tif ($script) echo \"{$script}\\n\";\n\t\t\t\techo \"</head>\\n\";\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Prints the page footer\n\t\t * @param $doBody True to output body tag, false otherwise\n\t\t */\n\t\tfunction printFooter($doBody = true) {\n\t\t\tglobal $_reload_browser, $_reload_drop_database;\n\t\t\tglobal $lang, $_no_bottom_link;\n\n\t\t\tif ($doBody) {\n\t\t\t\tif (isset($_reload_browser)) $this->printReload(false);\n\t\t\t\telseif (isset($_reload_drop_database)) $this->printReload(true);\n\t\t\t\tif (!isset($_no_bottom_link)) \n\t\t\t\t\techo \"<a href=\\\"#\\\" class=\\\"bottom_link\\\">\".$lang['strgotoppage'].\"</a>\";\n\n\t\t\t\techo \"</body>\\n\";\n\t\t\t}\n\t\t\techo \"</html>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Prints the page body.\n\t\t * @param $doBody True to output body tag, false otherwise\n\t\t * @param $bodyClass - name of body class\n\t\t */\n\t\tfunction printBody($bodyClass = '', $doBody = true ) {\n\t\t\tglobal $_no_output;\n\n\t\t\tif (!isset($_no_output)) {\n\t\t\t\tif ($doBody) {\n\t\t\t\t\t$bodyClass = htmlspecialchars($bodyClass);\n\t\t\t\t\techo \"<body\", ($bodyClass == '' ? '' : \" class=\\\"{$bodyClass}\\\"\");\n\t\t\t\t\techo \">\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Outputs JavaScript code that will reload the browser\n\t\t * @param $database True if dropping a database, false otherwise\n\t\t */\n\t\tfunction printReload($database) {\n\t\t\techo \"<script type=\\\"text/javascript\\\">\\n\";\n\t\t\tif ($database)\n\t\t\t\techo \"\\tparent.frames.browser.location.href=\\\"browser.php\\\";\\n\";\n\t\t\telse\n\t\t\t\techo \"\\tparent.frames.browser.location.reload();\\n\";\n\t\t\techo \"</script>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Display navigation tabs\n\t\t * @param $tabs An associative array of tabs definitions, see printNav() for an example.\n\t\t * @param $activetab The name of the tab to be highlighted.\n\t\t */\n\t\tfunction printTabs($tabs, $activetab) {\n\t\t\tglobal $misc, $conf, $data, $lang;\n\n\t\t\tif (is_string($tabs)) {\n\t\t\t\t$_SESSION['webdbLastTab'][$tabs] = $activetab;\n\t\t\t\t$tabs = $this->getNavTabs($tabs);\n\t\t\t}\n\n\t\t\techo \"<table class=\\\"tabs\\\"><tr>\\n\";\n\t\t\t#echo \"<div class=\\\"tabs\\\">\\n\";\n\n\t\t\t# FIXME: don't count hidden tabs\n\t\t\t$width = (int)(100 / count($tabs)).'%';\n\n\t\t\tforeach ($tabs as $tab_id => $tab) {\n\t\t\t\t$active = ($tab_id == $activetab) ? ' active' : '';\n\n\t\t\t\tif (!isset($tab['hide']) || $tab['hide'] !== true) {\n\n\t\t\t\t\t$tablink = \"<a\" . $this->printActionUrl($tab, $_REQUEST, 'href') . \">\";\n\n\t\t\t\t\tif (isset($tab['icon']) && $icon = $this->icon($tab['icon']))\n\t\t\t\t\t\t$tablink .= \"<span class=\\\"icon\\\"><img src=\\\"{$icon}\\\" alt=\\\"{$tab['title']}\\\" /></span>\";\n\n\t\t\t\t\t$tablink .= \"<span class=\\\"label\\\">{$tab['title']}</span></a>\";\n\n\t\t\t\t\techo \"<td style=\\\"width: {$width}\\\" class=\\\"tab{$active}\\\">\";\n\t\t\t\t\t#echo \"<span class=\\\"tab{$active}\\\" style=\\\"white-space:nowrap;\\\">\";\n\n\t\t\t\t\tif (isset($tab['help']))\n\t\t\t\t\t\t$this->printHelp($tablink, $tab['help']);\n\t\t\t\t\telse\n\t\t\t\t\t\techo $tablink;\n\n\t\t\t\t\techo \"</td>\\n\";\n\t\t\t\t\t#echo \"</span>\\n\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\techo \"</tr></table>\\n\";\n\t\t\t#echo \"</div>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Retrieve the tab info for a specific tab bar.\n\t\t * @param $section The name of the tab bar.\n\t\t */\n\t\tfunction getNavTabs($section) {\n\t\t\tglobal $data, $lang, $conf, $slony;\n\n\t\t\t$hide_advanced = ($conf['show_advanced'] === false);\n\n\t\t\tswitch ($section) {\n\t\t\t\tcase 'root':\n\t\t\t\t\treturn array (\n\t\t\t\t\t\t'intro' => array (\n\t\t\t\t\t\t\t'title' => $lang['strintroduction'],\n\t\t\t\t\t\t\t'url'   => \"intro.php\",\n\t\t\t\t\t\t\t'icon'  => 'Introduction',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'servers' => array (\n\t\t\t\t\t\t\t'title' => $lang['strservers'],\n\t\t\t\t\t\t\t'url'   => \"servers.php\",\n\t\t\t\t\t\t\t'icon'  => 'Servers',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\tcase 'server':\n\t\t\t\tcase 'report':\n\t\t\t\t\t$hide_users = !$data->isSuperUser();\n\t\t\t\t\t$tmp = array (\n\t\t\t\t\t\t'databases' => array (\n\t\t\t\t\t\t\t'title' => $lang['strdatabases'],\n\t\t\t\t\t\t\t'url'   => 'all_db.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'server'),\n\t\t\t\t\t\t\t'help'  => 'pg.database',\n\t\t\t\t\t\t\t'icon'  => 'Databases',\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tif ($data->hasRoles()) {\n\t\t\t\t\t\t$tmp = array_merge($tmp, array(\n\t\t\t\t\t\t\t'roles' => array (\n\t\t\t\t\t\t\t\t'title' => $lang['strroles'],\n\t\t\t\t\t\t\t\t'url'   => 'roles.php',\n\t\t\t\t\t\t\t\t'urlvars' => array('subject' => 'server'),\n\t\t\t\t\t\t\t\t'hide'  => $hide_users,\n\t\t\t\t\t\t\t\t'help'  => 'pg.role',\n\t\t\t\t\t\t\t\t'icon'  => 'Roles',\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$tmp = array_merge($tmp, array(\n\t\t\t\t\t\t\t'users' => array (\n\t\t\t\t\t\t\t\t'title' => $lang['strusers'],\n\t\t\t\t\t\t\t\t'url'   => 'users.php',\n\t\t\t\t\t\t\t\t'urlvars' => array('subject' => 'server'),\n\t\t\t\t\t\t\t\t'hide'  => $hide_users,\n\t\t\t\t\t\t\t\t'help'  => 'pg.user',\n\t\t\t\t\t\t\t\t'icon'  => 'Users',\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'groups' => array (\n\t\t\t\t\t\t\t\t'title' => $lang['strgroups'],\n\t\t\t\t\t\t\t\t'url'   => 'groups.php',\n\t\t\t\t\t\t\t\t'urlvars' => array('subject' => 'server'),\n\t\t\t\t\t\t\t\t'hide'  => $hide_users,\n\t\t\t\t\t\t\t\t'help'  => 'pg.group',\n\t\t\t\t\t\t\t\t'icon'  => 'UserGroups',\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t));\n\t\t\t\t\t}\n\n\t\t\t\t\t$tmp = array_merge($tmp, array(\n\t\t\t\t\t\t'account' => array (\n\t\t\t\t\t\t\t'title' => $lang['straccount'],\n\t\t\t\t\t\t\t'url'   => $data->hasRoles() ? 'roles.php' : 'users.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'server', 'action' => 'account'),\n\t\t\t\t\t\t\t'hide'  => !$hide_users,\n\t\t\t\t\t\t\t'help'  => 'pg.role',\n\t\t\t\t\t\t\t'icon'  => 'User',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'tablespaces' => array (\n\t\t\t\t\t\t\t'title' => $lang['strtablespaces'],\n\t\t\t\t\t\t\t'url'   => 'tablespaces.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'server'),\n\t\t\t\t\t\t\t'hide'  => (!$data->hasTablespaces()),\n\t\t\t\t\t\t\t'help'  => 'pg.tablespace',\n\t\t\t\t\t\t\t'icon'  => 'Tablespaces',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'export' => array (\n\t\t\t\t\t\t\t'title' => $lang['strexport'],\n\t\t\t\t\t\t\t'url'   => 'all_db.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'server', 'action' => 'export'),\n\t\t\t\t\t\t\t'hide'  => (!$this->isDumpEnabled()),\n\t\t\t\t\t\t\t'icon'  => 'Export',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'reports' => array (\n\t\t\t\t\t\t\t'title' => $lang['strreports'],\n\t\t\t\t\t\t\t'url'   => 'reports.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'server'),\n\t\t\t\t\t\t\t'hide' => !$conf['show_reports'],\n\t\t\t\t\t\t\t'icon' => 'Reports',\n\t\t\t\t\t\t),\n\t\t\t\t\t));\n\t\t\t\t\treturn $tmp;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'database':\n\t\t\t\t\t$tabs = array (\n\t\t\t\t\t\t'schemas' => array (\n\t\t\t\t\t\t\t'title' => $lang['strschemas'],\n\t\t\t\t\t\t\t'url'   => 'schemas.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database'),\n\t\t\t\t\t\t\t'help'  => 'pg.schema',\n\t\t\t\t\t\t\t'icon'  => 'Schemas',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'sql' => array (\n\t\t\t\t\t\t\t'title' => $lang['strsql'],\n\t\t\t\t\t\t\t'url'   => 'database.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database', 'action' => 'sql', 'new' => 1),\n\t\t\t\t\t\t\t'help'  => 'pg.sql',\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'SqlEditor'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'find' => array (\n\t\t\t\t\t\t\t'title' => $lang['strfind'],\n\t\t\t\t\t\t\t'url'   => 'database.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database', 'action' => 'find'),\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Search'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'variables' => array (\n\t\t\t\t\t\t\t'title' => $lang['strvariables'],\n\t\t\t\t\t\t\t'url'   => 'database.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database', 'action' => 'variables'),\n\t\t\t\t\t\t\t'help'  => 'pg.variable',\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Variables',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'processes' => array (\n\t\t\t\t\t\t\t'title' => $lang['strprocesses'],\n\t\t\t\t\t\t\t'url'   => 'database.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database', 'action' => 'processes'),\n\t\t\t\t\t\t\t'help'  => 'pg.process',\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Processes',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'locks' => array (\n\t\t\t\t\t\t\t'title' => $lang['strlocks'],\n\t\t\t\t\t\t\t'url'   => 'database.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database', 'action' => 'locks'),\n\t\t\t\t\t\t\t'help'  => 'pg.locks',\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Key',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'admin' => array (\n\t\t\t\t\t\t\t'title' => $lang['stradmin'],\n\t\t\t\t\t\t\t'url'   => 'database.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database', 'action' => 'admin'),\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Admin',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'privileges' => array (\n\t\t\t\t\t\t\t'title' => $lang['strprivileges'],\n\t\t\t\t\t\t\t'url'   => 'privileges.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database'),\n\t\t\t\t\t\t\t'hide'  => (!isset($data->privlist['database'])),\n\t\t\t\t\t\t\t'help'  => 'pg.privilege',\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Privileges',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'languages' => array (\n\t\t\t\t\t\t\t'title' => $lang['strlanguages'],\n\t\t\t\t\t\t\t'url'   => 'languages.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database'),\n\t\t\t\t\t\t\t'hide'  => $hide_advanced,\n\t\t\t\t\t\t\t'help'  => 'pg.language',\n\t\t\t\t\t\t\t'icon'  => 'Languages',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'casts' => array (\n\t\t\t\t\t\t\t'title' => $lang['strcasts'],\n\t\t\t\t\t\t\t'url'   => 'casts.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database'),\n\t\t\t\t\t\t\t'hide'  => ($hide_advanced),\n\t\t\t\t\t\t\t'help'  => 'pg.cast',\n\t\t\t\t\t\t\t'icon'  => 'Casts',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'slony' => array (\n\t\t\t\t\t\t\t'title' => 'Slony',\n\t\t\t\t\t\t\t'url'   => 'plugin_slony.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database', 'action' => 'clusters_properties'),\n\t\t\t\t\t\t\t'hide'  => !isset($slony),\n\t\t\t\t\t\t\t'help'  => '',\n\t\t\t\t\t\t\t'icon'  => 'Replication',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'export' => array (\n\t\t\t\t\t\t\t'title' => $lang['strexport'],\n\t\t\t\t\t\t\t'url'   => 'database.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'database', 'action' => 'export'),\n\t\t\t\t\t\t\t'hide'  => (!$this->isDumpEnabled()),\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Export',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\treturn $tabs;\n\n\t\t\t\tcase 'schema':\n\t\t\t\t\t$tabs = array (\n\t\t\t\t\t\t'tables' => array (\n\t\t\t\t\t\t\t'title' => $lang['strtables'],\n\t\t\t\t\t\t\t'url'   => 'tables.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'help'  => 'pg.table',\n\t\t\t\t\t\t\t'icon'  => 'Tables',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'views' => array (\n\t\t\t\t\t\t\t'title' => $lang['strviews'],\n\t\t\t\t\t\t\t'url'   => 'views.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'help'  => 'pg.view',\n\t\t\t\t\t\t\t'icon'  => 'Views',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'sequences' => array (\n\t\t\t\t\t\t\t'title' => $lang['strsequences'],\n\t\t\t\t\t\t\t'url'   => 'sequences.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'help'  => 'pg.sequence',\n\t\t\t\t\t\t\t'icon'  => 'Sequences',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'functions' => array (\n\t\t\t\t\t\t\t'title' => $lang['strfunctions'],\n\t\t\t\t\t\t\t'url'   => 'functions.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'help'  => 'pg.function',\n\t\t\t\t\t\t\t'icon'  => 'Functions',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'fulltext' => array (\n\t\t\t\t\t\t\t'title' => $lang['strfulltext'],\n\t\t\t\t\t\t\t'url'   => 'fulltext.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'help'  => 'pg.fts',\n\t\t\t\t\t\t\t'tree'  => true,\n\t\t\t\t\t\t\t'icon'  => 'Fts',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'domains' => array (\n\t\t\t\t\t\t\t'title' => $lang['strdomains'],\n\t\t\t\t\t\t\t'url'   => 'domains.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'help'  => 'pg.domain',\n\t\t\t\t\t\t\t'icon'  => 'Domains',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'aggregates' => array (\n\t\t\t\t\t\t\t'title' => $lang['straggregates'],\n\t\t\t\t\t\t\t'url'   => 'aggregates.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'hide'  => $hide_advanced,\n\t\t\t\t\t\t\t'help'  => 'pg.aggregate',\n\t\t\t\t\t\t\t'icon'  => 'Aggregates',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'types' => array (\n\t\t\t\t\t\t\t'title' => $lang['strtypes'],\n\t\t\t\t\t\t\t'url'   => 'types.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'hide'  => $hide_advanced,\n\t\t\t\t\t\t\t'help'  => 'pg.type',\n\t\t\t\t\t\t\t'icon'  => 'Types',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'operators' => array (\n\t\t\t\t\t\t\t'title' => $lang['stroperators'],\n\t\t\t\t\t\t\t'url'   => 'operators.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'hide'  => $hide_advanced,\n\t\t\t\t\t\t\t'help'  => 'pg.operator',\n\t\t\t\t\t\t\t'icon'  => 'Operators',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'opclasses' => array (\n\t\t\t\t\t\t\t'title' => $lang['stropclasses'],\n\t\t\t\t\t\t\t'url'   => 'opclasses.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'hide'  => $hide_advanced,\n\t\t\t\t\t\t\t'help'  => 'pg.opclass',\n\t\t\t\t\t\t\t'icon'  => 'OperatorClasses',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'conversions' => array (\n\t\t\t\t\t\t\t'title' => $lang['strconversions'],\n\t\t\t\t\t\t\t'url'   => 'conversions.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'hide'  => $hide_advanced,\n\t\t\t\t\t\t\t'help'  => 'pg.conversion',\n\t\t\t\t\t\t\t'icon'  => 'Conversions',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'privileges' => array (\n\t\t\t\t\t\t\t'title' => $lang['strprivileges'],\n\t\t\t\t\t\t\t'url'   => 'privileges.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema'),\n\t\t\t\t\t\t\t'help'  => 'pg.privilege',\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Privileges',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'export' => array (\n\t\t\t\t\t\t\t'title' => $lang['strexport'],\n\t\t\t\t\t\t\t'url'   => 'schemas.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema', 'action' => 'export'),\n\t\t\t\t\t\t\t'hide'  => (!$this->isDumpEnabled()),\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Export',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t\tif (!$data->hasFTS()) unset($tabs['fulltext']);\n\t\t\t\t\treturn $tabs;\n\n\t\t\t\tcase 'table':\n\t\t\t\t\treturn array (\n\t\t\t\t\t\t'columns' => array (\n\t\t\t\t\t\t\t'title' => $lang['strcolumns'],\n\t\t\t\t\t\t\t'url'   => 'tblproperties.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table')),\n\t\t\t\t\t\t\t'icon'  => 'Columns',\n\t\t\t\t\t\t\t'branch'=> true,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'indexes' => array (\n\t\t\t\t\t\t\t'title' => $lang['strindexes'],\n\t\t\t\t\t\t\t'url'   => 'indexes.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table')),\n\t\t\t\t\t\t\t'help'  => 'pg.index',\n\t\t\t\t\t\t\t'icon'  => 'Indexes',\n\t\t\t\t\t\t\t'branch'=> true,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'constraints' => array (\n\t\t\t\t\t\t\t'title' => $lang['strconstraints'],\n\t\t\t\t\t\t\t'url'   => 'constraints.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table')),\n\t\t\t\t\t\t\t'help'  => 'pg.constraint',\n\t\t\t\t\t\t\t'icon'  => 'Constraints',\n\t\t\t\t\t\t\t'branch'=> true,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'triggers' => array (\n\t\t\t\t\t\t\t'title' => $lang['strtriggers'],\n\t\t\t\t\t\t\t'url'   => 'triggers.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table')),\n\t\t\t\t\t\t\t'help'  => 'pg.trigger',\n\t\t\t\t\t\t\t'icon'  => 'Triggers',\n\t\t\t\t\t\t\t'branch'=> true,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'rules' => array (\n\t\t\t\t\t\t\t'title' => $lang['strrules'],\n\t\t\t\t\t\t\t'url'   => 'rules.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table')),\n\t\t\t\t\t\t\t'help'  => 'pg.rule',\n\t\t\t\t\t\t\t'icon'  => 'Rules',\n\t\t\t\t\t\t\t'branch'=> true,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'admin' => array (\n\t\t\t\t\t\t\t'title' => $lang['stradmin'],\n\t\t\t\t\t\t\t'url'   => 'tables.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table'), 'action' => 'admin'),\n\t\t\t\t\t\t\t'icon'  => 'Admin',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'info' => array (\n\t\t\t\t\t\t\t'title' => $lang['strinfo'],\n\t\t\t\t\t\t\t'url'   => 'info.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table')),\n\t\t\t\t\t\t\t'icon'  => 'Statistics',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'privileges' => array (\n\t\t\t\t\t\t\t'title' => $lang['strprivileges'],\n\t\t\t\t\t\t\t'url'   => 'privileges.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table')),\n\t\t\t\t\t\t\t'help'  => 'pg.privilege',\n\t\t\t\t\t\t\t'icon'  => 'Privileges',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'import' => array (\n\t\t\t\t\t\t\t'title' => $lang['strimport'],\n\t\t\t\t\t\t\t'url'   => 'tblproperties.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table'), 'action' => 'import'),\n\t\t\t\t\t\t\t'icon'  => 'Import',\n\t\t\t\t\t\t\t'hide'\t=> false,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'export' => array (\n\t\t\t\t\t\t\t'title' => $lang['strexport'],\n\t\t\t\t\t\t\t'url'   => 'tblproperties.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'table', 'table' => field('table'), 'action' => 'export'),\n\t\t\t\t\t\t\t'icon'  => 'Export',\n\t\t\t\t\t\t\t'hide'\t=> false,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\tcase 'view':\n\t\t\t\t\treturn array (\n\t\t\t\t\t\t'columns' => array (\n\t\t\t\t\t\t\t'title' => $lang['strcolumns'],\n\t\t\t\t\t\t\t'url'   => 'viewproperties.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'view', 'view' => field('view')),\n\t\t\t\t\t\t\t'icon'  => 'Columns',\n\t\t\t\t\t\t\t'branch'=> true,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'definition' => array (\n\t\t\t\t\t\t\t'title' => $lang['strdefinition'],\n\t\t\t\t\t\t\t'url'   => 'viewproperties.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'view', 'view' => field('view'), 'action' => 'definition'),\n\t\t\t\t\t\t\t'icon'  => 'Definition'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'rules' => array (\n\t\t\t\t\t\t\t'title' => $lang['strrules'],\n\t\t\t\t\t\t\t'url'   => 'rules.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'view', 'view' => field('view')),\n\t\t\t\t\t\t\t'help'  => 'pg.rule',\n\t\t\t\t\t\t\t'icon'  => 'Rules',\n\t\t\t\t\t\t\t'branch'=> true,\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'privileges' => array (\n\t\t\t\t\t\t\t'title' => $lang['strprivileges'],\n\t\t\t\t\t\t\t'url'   => 'privileges.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'view', 'view' => field('view')),\n\t\t\t\t\t\t\t'help'  => 'pg.privilege',\n\t\t\t\t\t\t\t'icon'  => 'Privileges',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'export' => array (\n\t\t\t\t\t\t\t'title' => $lang['strexport'],\n\t\t\t\t\t\t\t'url'   => 'viewproperties.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'view', 'view' => field('view'), 'action' => 'export'),\n\t\t\t\t\t\t\t'icon'  => 'Export',\n\t\t\t\t\t\t\t'hide'\t=> false,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\tcase 'function':\n\t\t\t\t\treturn array (\n\t\t\t\t\t\t'definition' => array (\n\t\t\t\t\t\t\t'title' => $lang['strdefinition'],\n\t\t\t\t\t\t\t'url'   => 'functions.php',\n\t\t\t\t\t\t\t'urlvars' => array(\n\t\t\t\t\t\t\t\t\t'subject' => 'function',\n\t\t\t\t\t\t\t\t\t'function' => field('function'),\n\t\t\t\t\t\t\t\t\t'function_oid' => field('function_oid'),\n\t\t\t\t\t\t\t\t\t'action' => 'properties',\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'icon'  => 'Definition',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'privileges' => array (\n\t\t\t\t\t\t\t'title' => $lang['strprivileges'],\n\t\t\t\t\t\t\t'url'   => 'privileges.php',\n\t\t\t\t\t\t\t'urlvars' => array(\n\t\t\t\t\t\t\t\t\t'subject' => 'function',\n\t\t\t\t\t\t\t\t\t'function' => field('function'),\n\t\t\t\t\t\t\t\t\t'function_oid' => field('function_oid'),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'icon'  => 'Privileges',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\tcase 'aggregate':\n\t\t\t\t\treturn array (\n\t\t\t\t\t\t'definition' => array (\n\t\t\t\t\t\t\t'title' => $lang['strdefinition'],\n\t\t\t\t\t\t\t'url'   => 'aggregates.php',\n\t\t\t\t\t\t\t'urlvars' => array(\n\t\t\t\t\t\t\t\t\t'subject' => 'aggregate',\n\t\t\t\t\t\t\t\t\t'aggrname' => field('aggrname'),\n\t\t\t\t\t\t\t\t\t'aggrtype' => field('aggrtype'),\n\t\t\t\t\t\t\t\t\t'action' => 'properties',\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'icon'  => 'Definition',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\tcase 'role':\n\t\t\t\t\treturn array (\n\t\t\t\t\t\t'definition' => array (\n\t\t\t\t\t\t\t'title' => $lang['strdefinition'],\n\t\t\t\t\t\t\t'url'   => 'roles.php',\n\t\t\t\t\t\t\t'urlvars' => array(\n\t\t\t\t\t\t\t\t\t'subject' => 'role',\n\t\t\t\t\t\t\t\t\t'rolename' => field('rolename'),\n\t\t\t\t\t\t\t\t\t'action' => 'properties',\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'icon'  => 'Definition',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\tcase 'popup':\n\t\t\t\t\treturn array (\n\t\t\t\t\t\t'sql' => array (\n\t\t\t\t\t\t\t'title' => $lang['strsql'],\n\t\t\t\t\t\t\t'url'   => 'sqledit.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema', 'action' => 'sql'),\n\t\t\t\t\t\t\t'help'  => 'pg.sql',\n\t\t\t\t\t\t\t'icon'  => 'SqlEditor',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'find' => array (\n\t\t\t\t\t\t\t'title' => $lang['strfind'],\n\t\t\t\t\t\t\t'url'   => 'sqledit.php',\n\t\t\t\t\t\t\t'urlvars' => array('subject' => 'schema', 'action' => 'find'),\n\t\t\t\t\t\t\t'icon'  => 'Search',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\tcase 'slony_cluster':\n\t\t\t\t\treturn array (\n\t\t\t\t\t\t'properties' => array (\n\t\t\t\t\t\t\t'title' => $lang['strproperties'],\n\t\t\t\t\t\t\t'url'   => 'plugin_slony.php',\n\t\t\t\t\t\t\t'urlvars' => array(\n\t\t\t\t\t\t\t\t\t'subject' => 'slony_cluster',\n\t\t\t\t\t\t\t\t\t'action' => 'cluster_properties',\n\t\t\t\t\t\t\t\t\t'slony_cluster' => field('slony_cluster')\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'help'  => '',\n\t\t\t\t\t\t\t'tree'  => false,\n\t\t\t\t\t\t\t'icon'  => 'Cluster',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'nodes' => array (\n\t\t\t\t\t\t\t'title' => $lang['strnodes'],\n\t\t\t\t\t\t\t'url'   => 'plugin_slony.php',\n\t\t\t\t\t\t\t'urlvars' => array(\n\t\t\t\t\t\t\t\t\t'subject' => 'slony_cluster',\n\t\t\t\t\t\t\t\t\t'action' => 'nodes_properties',\n\t\t\t\t\t\t\t\t\t'slony_cluster' => field('slony_cluster')\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'branch' => 'nodes',\n\t\t\t\t\t\t\t'help'  => '',\n\t\t\t\t\t\t\t'icon'  => 'Nodes',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'sets' => array (\n\t\t\t\t\t\t\t'title' => $lang['strrepsets'],\n\t\t\t\t\t\t\t'url'   => 'plugin_slony.php',\n\t\t\t\t\t\t\t'urlvars' => array(\n\t\t\t\t\t\t\t\t'subject' => 'slony_cluster',\n\t\t\t\t\t\t\t\t'action' => 'sets_properties',\n\t\t\t\t\t\t\t\t'slony_cluster' => field('slony_cluster')\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'branch' => 'sets',\n\t\t\t\t\t\t\t'help'  => '',\n\t\t\t\t\t\t\t'icon'  => 'ReplicationSets',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\n\t\t\t\tcase 'column':\n\t\t\t\t\treturn array(\n\t\t\t\t\t\t'properties' => array (\n\t\t\t\t\t\t\t'title'\t\t=> $lang['strcolprop'],\n\t\t\t\t\t\t\t'url'\t\t=> 'colproperties.php',\n\t\t\t\t\t\t\t'urlvars'\t=> array(\n\t\t\t\t\t\t\t\t'subject' => 'column',\n\t\t\t\t\t\t\t\t'table' => field('table'),\n\t\t\t\t\t\t\t\t'column' => field('column')\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'icon'\t\t=> 'Column'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'privileges' => array (\n\t\t\t\t\t\t\t'title' => $lang['strprivileges'],\n\t\t\t\t\t\t\t'url'   => 'privileges.php',\n\t\t\t\t\t\t\t'urlvars' => array(\n\t\t\t\t\t\t\t\t'subject' => 'column',\n\t\t\t\t\t\t\t\t'table' => field('table'),\n\t\t\t\t\t\t\t\t'column' => field('column')\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'help'  => 'pg.privilege',\n\t\t\t\t\t\t\t'icon'  => 'Privileges',\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n                case 'fulltext':\n                    return array (\n                        'ftsconfigs' => array (\n                            'title' => $lang['strftstabconfigs'],\n                            'url'   => 'fulltext.php',\n                            'urlvars' => array('subject' => 'schema'),\n                            'hide'  => !$data->hasFTS(),\n                            'help'  => 'pg.ftscfg',\n                            'tree'  => true,\n                            'icon'  => 'FtsCfg',\n                        ),\n                        'ftsdicts' => array (\n                            'title' => $lang['strftstabdicts'],\n                            'url'   => 'fulltext.php',\n                            'urlvars' => array('subject' => 'schema', 'action' => 'viewdicts'),\n                            'hide'  => !$data->hasFTS(),\n                            'help'  => 'pg.ftsdict',\n                            'tree'  => true,\n                            'icon'  => 'FtsDict',\n                        ),\n                        'ftsparsers' => array (\n                            'title' => $lang['strftstabparsers'],\n                            'url'   => 'fulltext.php',\n                            'urlvars' => array('subject' => 'schema', 'action' => 'viewparsers'),\n                            'hide'  => !$data->hasFTS(),\n                            'help'  => 'pg.ftsparser',\n                            'tree'  => true,\n                            'icon'  => 'FtsParser',\n                        ),\n                    );\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn array();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Get the URL for the last active tab of a particular tab bar.\n\t\t */\n\t\tfunction getLastTabURL($section) {\n\t\t\tglobal $data;\n\n\t\t\t$tabs = $this->getNavTabs($section);\n\n\t\t\tif (isset($_SESSION['webdbLastTab'][$section]) && isset($tabs[$_SESSION['webdbLastTab'][$section]]))\n\t\t\t\t$tab = $tabs[$_SESSION['webdbLastTab'][$section]];\n\t\t\telse\n\t\t\t\t$tab = reset($tabs);\n\n\t\t\treturn isset($tab['url']) ? $tab : null;\n\t\t}\n\n\t\tfunction printTopbar() {\n\t\t\tglobal $lang, $conf, $appName, $appVersion, $appLangFiles;\n\n\t\t\t$server_info = $this->getServerInfo();\n\n\t\t\techo \"<div class=\\\"topbar\\\"><table style=\\\"width: 100%\\\"><tr><td>\";\n\n\t\t\tif ($server_info && isset($server_info['platform']) && isset($server_info['username'])) {\n\t\t\t\techo sprintf($lang['strtopbar'],\n\t\t\t\t\t'<span class=\"platform\">'.htmlspecialchars($server_info['platform']).'</span>',\n\t\t\t\t\t'<span class=\"host\">'.htmlspecialchars((empty($server_info['host'])) ? 'localhost':$server_info['host']).'</span>',\n\t\t\t\t\t'<span class=\"port\">'.htmlspecialchars($server_info['port']).'</span>',\n\t\t\t\t\t'<span class=\"username\">'.htmlspecialchars($server_info['username']).'</span>');\n\t\t\t} else {\n\t\t\t\techo \"<span class=\\\"appname\\\">$appName</span> <span class=\\\"version\\\">$appVersion</span>\";\n\t\t\t}\n\n\t\t\techo \"</td>\";\n\n\t\t\tif (isset($_REQUEST['server'])) {\n\t\t\t\t$sql_url = \"sqledit.php?{$this->href}&amp;action=\";\n\t\t\t\t$sql_window_id = htmlspecialchars('sqledit:'.$_REQUEST['server']);\n\t\t\t\t$history_url = \"history.php?{$this->href}&amp;action=pophistory\";\n\t\t\t\t$history_window_id = htmlspecialchars('history:'.$_REQUEST['server']);\n\t\t\t\t$logout_shared = isset($_SESSION['sharedUsername']) ?\n\t\t\t\t\t' onclick=\"return confirm(\\''. $lang['strconfdropcred']. '\\')\"':\n\t\t\t\t\t'';\n\n\t\t\t\techo \"<td style=\\\"text-align: right\\\">\";\n\t\t\t\techo \"<ul class=\\\"toplink\\\">\\n\\t<li><a class=\\\"toplink\\\" href=\\\"{$sql_url}sql\\\" target=\\\"sqledit\\\" onclick=\\\"window.open('{$sql_url}sql','{$sql_window_id}','toolbar=no,width=700,height=500,resizable=yes,scrollbars=yes').focus(); return false;\\\">{$lang['strsql']}</a></li>\\n\";\n\t\t\t\techo \"\\t<li><a class=\\\"toplink\\\" href=\\\"{$history_url}\\\" onclick=\\\"window.open('{$history_url}','{$history_window_id}','toolbar=no,width=800,height=600,resizable=yes,scrollbars=yes').focus(); return false;\\\">{$lang['strhistory']}</a></li>\\n\";\n\t\t\t\techo \"\\t<li><a class=\\\"toplink\\\" href=\\\"{$sql_url}find\\\" target=\\\"sqledit\\\" onclick=\\\"window.open('{$sql_url}find','{$sql_window_id}','toolbar=no,width=700,height=500,resizable=yes,scrollbars=yes').focus(); return false;\\\">{$lang['strfind']}</a></li>\\n\";\n \t\t\t\techo \"\\t<li><a class=\\\"toplink\\\" href=\\\"servers.php?action=logout&amp;logoutServer=\".htmlspecialchars($server_info['host']).\":\".htmlspecialchars($server_info['port']).\":\".htmlspecialchars($server_info['sslmode']).\"\\\"{$logout_shared}>{$lang['strlogout']}</a></li>\\n\";\n \t\t\t\techo \"</ul>\\n\";\n\t\t\t\techo \"</td>\";\n\t\t\t}\n/*\n\t\t\techo \"<td style=\\\"text-align: right; width: 1%\\\">\";\n\n\t\t\techo \"<form method=\\\"get\\\"><select name=\\\"language\\\" onchange=\\\"this.form.submit()\\\">\\n\";\n\t\t\t$language = isset($_SESSION['webdbLanguage']) ? $_SESSION['webdbLanguage'] : 'english';\n\t\t\tforeach ($appLangFiles as $k => $v) {\n\t\t\t\techo \"<option value=\\\"{$k}\\\"\",\n\t\t\t\t\t($k == $language) ? ' selected=\"selected\"' : '',\n\t\t\t\t\t\">{$v}</option>\\n\";\n\t\t\t}\n\t\t\techo \"</select>\\n\";\n\t\t\techo \"<noscript><input type=\\\"submit\\\" value=\\\"Set Language\\\"></noscript>\\n\";\n\t\t\tforeach ($_GET as $key => $val) {\n\t\t\t\tif ($key == 'language') continue;\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"$key\\\" value=\\\"\", htmlspecialchars($val), \"\\\" />\\n\";\n\t\t\t}\n\t\t\techo \"</form>\\n\";\n\n\t\t\techo \"</td>\";\n*/\n\t\t\techo \"</tr></table></div>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Display a bread crumb trail.\n\t\t */\n\t\tfunction printTrail($trail = array()) {\n\t\t\tglobal $lang;\n\n\t\t\t$this->printTopbar();\n\n\t\t\tif (is_string($trail)) {\n\t\t\t\t$trail = $this->getTrail($trail);\n\t\t\t}\n\n\t\t\techo \"<div class=\\\"trail\\\"><table><tr>\";\n\n\t\t\tforeach ($trail as $crumb) {\n\t\t\t\techo \"<td class=\\\"crumb\\\">\";\n\t\t\t\t$crumblink = \"<a\";\n\n\t\t\t\tif (isset($crumb['url']))\n\t\t\t\t\t$crumblink .= ' href=\"' . $this->printVal($crumb['url'], 'nbsp') . '\"';\n\n\t\t\t\tif (isset($crumb['title']))\n\t\t\t\t\t$crumblink .= \" title=\\\"{$crumb['title']}\\\"\";\n\n\t\t\t\t$crumblink .= \">\";\n\n\t\t\t\tif (isset($crumb['title']))\n\t\t\t\t\t$iconalt = $crumb['title'];\n\t\t\t\telse\n\t\t\t\t\t$iconalt = 'Database Root';\n\n\t\t\t\tif (isset($crumb['icon']) && $icon = $this->icon($crumb['icon']))\n\t\t\t\t\t$crumblink .= \"<span class=\\\"icon\\\"><img src=\\\"{$icon}\\\" alt=\\\"{$iconalt}\\\" /></span>\";\n\n\t\t\t\t$crumblink .= \"<span class=\\\"label\\\">\" . htmlspecialchars($crumb['text']) . \"</span></a>\";\n\n\t\t\t\tif (isset($crumb['help']))\n\t\t\t\t\t$this->printHelp($crumblink, $crumb['help']);\n\t\t\t\telse\n\t\t\t\t\techo $crumblink;\n\n\t\t\t\techo \"{$lang['strseparator']}\";\n\t\t\t\techo \"</td>\";\n\t\t\t}\n\n\t\t\techo \"</tr></table></div>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Create a bread crumb trail of the object hierarchy.\n\t\t * @param $object The type of object at the end of the trail.\n\t\t */\n\t\tfunction getTrail($subject = null) {\n\t\t\tglobal $lang, $conf, $data, $appName;\n\n\t\t\t$trail = array();\n\t\t\t$vars = '';\n\t\t\t$done = false;\n\n\t\t\t$trail['root'] = array(\n\t\t\t\t'text'  => $appName,\n\t\t\t\t'url'   => 'redirect.php?subject=root',\n\t\t\t\t'icon'  => 'Introduction'\n\t\t\t);\n\n\t\t\tif ($subject == 'root') $done = true;\n\n\t\t\tif (!$done) {\n\t\t\t\t$vars = 'server='.urlencode($_REQUEST['server']).'&';\n\t\t\t\t$server_info = $this->getServerInfo();\n\t\t\t\t$trail['server'] = array(\n\t\t\t\t\t'title' => $lang['strserver'],\n\t\t\t\t\t'text'  => $server_info['desc'],\n\t\t\t\t\t'url'   => \"redirect.php?subject=server&{$vars}\",\n\t\t\t\t\t'help'  => 'pg.server',\n\t\t\t\t\t'icon'  => 'Server'\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ($subject == 'server') $done = true;\n\n\t\t\tif (isset($_REQUEST['report']) && !$done) {\n\t\t\t\t$vars .= 'report='.urlencode($_REQUEST['report']).'&';\n\t\t\t\t$trail['report'] = array(\n\t\t\t\t\t'title' => $lang['strreport'],\n\t\t\t\t\t'text'  => $_REQUEST['report'],\n\t\t\t\t\t'url'   => \"reports.php?subject=report&{$vars}\",\n\t\t\t\t\t'icon'  => 'Report'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (isset($_REQUEST['database']) && !$done) {\n\t\t\t\t$vars .= 'database='.urlencode($_REQUEST['database']).'&';\n\t\t\t\t$trail['database'] = array(\n\t\t\t\t\t'title' => $lang['strdatabase'],\n\t\t\t\t\t'text'  => $_REQUEST['database'],\n\t\t\t\t\t'url'   => \"redirect.php?subject=database&{$vars}\",\n\t\t\t\t\t'help'  => 'pg.database',\n\t\t\t\t\t'icon'  => 'Database'\n\t\t\t\t);\n\t\t\t} elseif (isset($_REQUEST['rolename']) && !$done) {\n\t\t\t\t$vars .= \"subject=role&action=properties&rolename=\".urlencode($_REQUEST['rolename']);\n\t\t\t\t$trail['role'] = array(\n\t\t\t\t\t'title' => $lang['strrole'],\n\t\t\t\t\t'text'  => $_REQUEST['rolename'],\n\t\t\t\t\t'url'   => \"redirect.php?{$vars}\",\n\t\t\t\t\t'help'  => 'pg.role',\n\t\t\t\t\t'icon'  => 'Roles'\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ($subject == 'database' || $subject == 'role' || $subject == 'report') $done = true;\n\n\t\t\tif (isset($_REQUEST['schema']) && !$done) {\n\t\t\t\t$vars .= 'schema='.urlencode($_REQUEST['schema']).'&';\n\t\t\t\t$trail['schema'] = array(\n\t\t\t\t\t'title' => $lang['strschema'],\n\t\t\t\t\t'text'  => $_REQUEST['schema'],\n\t\t\t\t\t'url'   => \"redirect.php?subject=schema&{$vars}\",\n\t\t\t\t\t'help'  => 'pg.schema',\n\t\t\t\t\t'icon'  => 'Schema'\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ($subject == 'schema') $done = true;\n\n\t\t\tif (isset($_REQUEST['slony_cluster']) && !$done) {\n\t\t\t\t$vars .= 'slony_cluster='.urlencode($_REQUEST['slony_cluster']).'&';\n\t\t\t\t$trail['slony_cluster'] = array(\n\t\t\t\t\t'title' => 'Slony Cluster',\n\t\t\t\t\t'text'  => $_REQUEST['slony_cluster'],\n\t\t\t\t\t'url'   => \"redirect.php?subject=slony_cluster&{$vars}\",\n\t\t\t\t\t'help'  => 'sl.cluster',\n\t\t\t\t\t'icon'  => 'Cluster'\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ($subject == 'slony_cluster') $done = true;\n\n\t\t\tif (isset($_REQUEST['table']) && !$done) {\n\t\t\t\t$vars .= \"table=\".urlencode($_REQUEST['table']);\n\t\t\t\t$trail['table'] = array(\n\t\t\t\t\t'title' => $lang['strtable'],\n\t\t\t\t\t'text'  => $_REQUEST['table'],\n\t\t\t\t\t'url'   => \"redirect.php?subject=table&{$vars}\",\n\t\t\t\t\t'help'  => 'pg.table',\n\t\t\t\t\t'icon'  => 'Table'\n\t\t\t\t);\n\t\t\t} elseif (isset($_REQUEST['view']) && !$done) {\n\t\t\t\t$vars .= \"view=\".urlencode($_REQUEST['view']);\n\t\t\t\t$trail['view'] = array(\n\t\t\t\t\t'title' => $lang['strview'],\n\t\t\t\t\t'text'  => $_REQUEST['view'],\n\t\t\t\t\t'url'   => \"redirect.php?subject=view&{$vars}\",\n\t\t\t\t\t'help'  => 'pg.view',\n\t\t\t\t\t'icon'  => 'View'\n\t\t\t\t);\n\t\t\t} elseif (isset($_REQUEST['ftscfg']) && !$done) {\n\t\t\t\t$vars .= \"action=viewconfig&ftscfg=\".urlencode($_REQUEST['ftscfg']);\n\t\t\t\t$trail['ftscfg'] = array(\n\t\t\t\t\t'title' => $lang['strftsconfig'],\n\t\t\t\t\t'text'  => $_REQUEST['ftscfg'],\n\t\t\t\t\t'url'   => \"fulltext.php?{$vars}\",\n\t\t\t\t\t'help'  => 'pg.ftscfg.example',\n\t\t\t\t\t'icon'  => 'Fts'\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ($subject == 'table' || $subject == 'view' || $subject == 'ftscfg') $done = true;\n\n\t\t\tif (!$done && !is_null($subject)) {\n\t\t\t\tswitch ($subject) {\n\t\t\t\t\tcase 'function':\n\t\t\t\t\t\t$vars .= \"{$subject}_oid=\".urlencode($_REQUEST[$subject.'_oid']).'&';\n\t\t\t\t\t\t$vars .= \"subject={$subject}&{$subject}=\".urlencode($_REQUEST[$subject]);\n\t\t\t\t\t\t$trail[$subject] = array(\n\t\t\t\t\t\t\t'title' => $lang['str'.$subject],\n\t\t\t\t\t\t\t'text'  => $_REQUEST[$subject],\n\t\t\t\t\t\t\t'url'   => \"redirect.php?{$vars}\",\n\t\t\t\t\t\t\t'help'  => 'pg.function',\n\t\t\t\t\t\t\t'icon'  => 'Function'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'aggregate':\n\t\t\t\t\t\t$vars .= \"subject=aggregate&action=properties&aggrname=\".urlencode($_REQUEST['aggrname']);\n\t\t\t\t\t\t$vars .= \"&aggrtype=\".urlencode($_REQUEST['aggrtype']);\n\t\t\t\t\t\t$trail[$subject] = array(\n\t\t\t\t\t\t\t'title' => $lang['straggregate'],\n\t\t\t\t\t\t\t'text'  => $_REQUEST['aggrname'],\n\t\t\t\t\t\t\t'url'   => \"redirect.php?{$vars}\",\n\t\t\t\t\t\t\t'help'  => 'pg.aggregate',\n\t\t\t\t\t\t\t'icon'  => 'Aggregate'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'slony_node':\n\t\t\t\t\t\t$vars .= 'no_id='.urlencode($_REQUEST['no_id']).'&no_name='.urlencode($_REQUEST['no_name']);\n\t\t\t\t\t\t$trail[$subject] = array(\n\t\t\t\t\t\t\t'title' => 'Slony Node',\n\t\t\t\t\t\t\t'text'  => $_REQUEST['no_name'],\n\t\t\t\t\t\t\t'url'   => \"redirect.php?{$vars}\",\n\t\t\t\t\t\t\t'help'  => 'sl.'.$subject,\n\t\t\t\t\t\t\t'icon'  => 'Node'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'slony_set':\n\t\t\t\t\t\t$vars .= \"{$subject}_id=\".urlencode($_REQUEST[$subject]).'&';\n\t\t\t\t\t\t$vars .= \"subject={$subject}&{$subject}=\".urlencode($_REQUEST[$subject]);\n\t\t\t\t\t\t$trail[$subject] = array(\n\t\t\t\t\t\t\t'title' => $lang['str'.$subject],\n\t\t\t\t\t\t\t'text'  => $_REQUEST[$subject],\n\t\t\t\t\t\t\t'url'   => \"redirect.php?{$vars}\",\n\t\t\t\t\t\t\t'help'  => 'sl.'.$subject,\n\t\t\t\t\t\t\t'icon'  => 'AvailableReplicationSet'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'column':\n\t\t\t\t\t\t$vars .= \"&column=\". urlencode($_REQUEST['column']) .\"&subject=column\";\n\t\t\t\t\t\t$trail['column'] = array (\n\t\t\t\t\t\t\t'title' => $lang['strcolumn'],\n\t\t\t\t\t\t\t'text'  => $_REQUEST['column'],\n\t\t\t\t\t\t\t'icon'\t=> 'Column',\n\t\t\t\t\t\t\t'url'   => \"redirect.php?{$vars}\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (isset($_REQUEST[$subject])) {\n\t\t\t\t\t\t\tswitch ($subject) {\n\t\t\t\t\t\t\t\tcase 'domain': $icon = 'Domain'; break;\n\t\t\t\t\t\t\t\tcase 'sequence': $icon = 'Sequence'; break;\n\t\t\t\t\t\t\t\tcase 'type': $icon = 'Type'; break;\n\t\t\t\t\t\t\t\tcase 'operator': $icon = 'Operator'; break;\n\t\t\t\t\t\t\t\tdefault: $icon = null; break;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$trail[$subject] = array(\n\t\t\t\t\t\t\t\t'title' => $lang['str'.$subject],\n\t\t\t\t\t\t\t\t'text'  => $_REQUEST[$subject],\n\t\t\t\t\t\t\t\t'help'  => 'pg.'.$subject,\n\t\t\t\t\t\t\t\t'icon'  => $icon,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $trail;\n\t\t}\n\n\t\t/**\n\t\t * Do multi-page navigation.  Displays the prev, next and page options.\n\t\t * @param $page the page currently viewed\n\t\t * @param $pages the maximum number of pages\n\t\t * @param $url the url to refer to with the page number inserted\n\t\t * @param $max_width the number of pages to make available at any one time (default = 20)\n\t\t */\n\t\tfunction printPages($page, $pages, $url, $max_width = 20) {\n\t\t\tglobal $lang;\n\n\t\t\t$window = 10;\n\n\t\t\tif ($page < 0 || $page > $pages) return;\n\t\t\tif ($pages < 0) return;\n\t\t\tif ($max_width <= 0) return;\n\n\t\t\tif ($pages > 1) {\n\t\t\t\techo \"<p style=\\\"text-align: center\\\">\\n\";\n\t\t\t\tif ($page != 1) {\n\t\t\t\t\t$temp = str_replace('%s', 1, $url);\n\t\t\t\t\techo \"<a class=\\\"pagenav\\\" href=\\\"{$temp}\\\">{$lang['strfirst']}</a>\\n\";\n\t\t\t\t\t$temp = str_replace('%s', $page - 1, $url);\n\t\t\t\t\techo \"<a class=\\\"pagenav\\\" href=\\\"{$temp}\\\">{$lang['strprev']}</a>\\n\";\n\t\t\t\t}\n\n\t\t\t\tif ($page <= $window) {\n\t\t\t\t\t$min_page = 1;\n\t\t\t\t\t$max_page = min(2 * $window, $pages);\n\t\t\t\t}\n\t\t\t\telseif ($page > $window && $pages >= $page + $window) {\n\t\t\t\t\t$min_page = ($page - $window) + 1;\n\t\t\t\t\t$max_page = $page + $window;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$min_page = ($page - (2 * $window - ($pages - $page))) + 1;\n\t\t\t\t\t$max_page = $pages;\n\t\t\t\t}\n\n\t\t\t\t// Make sure min_page is always at least 1\n\t\t\t\t// and max_page is never greater than $pages\n\t\t\t\t$min_page = max($min_page, 1);\n\t\t\t\t$max_page = min($max_page, $pages);\n\n\t\t\t\tfor ($i = $min_page; $i <= $max_page; $i++) {\n\t\t\t\t\t$temp = str_replace('%s', $i, $url);\n\t\t\t\t\tif ($i != $page) echo \"<a class=\\\"pagenav\\\" href=\\\"{$temp}\\\">$i</a>\\n\";\n\t\t\t\t\telse echo \"$i\\n\";\n\t\t\t\t}\n\t\t\t\tif ($page != $pages) {\n\t\t\t\t\t$temp = str_replace('%s', $page + 1, $url);\n\t\t\t\t\techo \"<a class=\\\"pagenav\\\" href=\\\"{$temp}\\\">{$lang['strnext']}</a>\\n\";\n\t\t\t\t\t$temp = str_replace('%s', $pages, $url);\n\t\t\t\t\techo \"<a class=\\\"pagenav\\\" href=\\\"{$temp}\\\">{$lang['strlast']}</a>\\n\";\n\t\t\t\t}\n\t\t\t\techo \"</p>\\n\";\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Displays link to the context help.\n\t\t * @param $str   - the string that the context help is related to (already escaped)\n\t\t * @param $help  - help section identifier\n\t\t */\n\t\tfunction printHelp($str, $help) {\n\t\t\tglobal $lang, $data;\n\n\t\t\techo $str;\n\t\t\tif ($help) {\n\t\t\t\techo \"<a class=\\\"help\\\" href=\\\"\";\n\t\t\t\techo htmlspecialchars(\"help.php?help=\".urlencode($help).\"&server=\".urlencode($_REQUEST['server']));\n\t\t\t\techo \"\\\" title=\\\"{$lang['strhelp']}\\\" target=\\\"phppgadminhelp\\\">{$lang['strhelpicon']}</a>\";\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Outputs JavaScript to set default focus\n\t\t * @param $object eg. forms[0].username\n\t\t */\n\t\tfunction setFocus($object) {\n\t\t\techo \"<script type=\\\"text/javascript\\\">\\n\";\n\t\t\techo \"   document.{$object}.focus();\\n\";\n\t\t\techo \"</script>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Outputs JavaScript to set the name of the browser window.\n\t\t * @param $name the window name\n\t\t * @param $addServer if true (default) then the server id is\n\t\t *        attached to the name.\n\t\t */\n\t\tfunction setWindowName($name, $addServer = true) {\n\t\t\techo \"<script type=\\\"text/javascript\\\">\\n\";\n\t\t\techo \"//<![CDATA[\\n\";\n\t\t\techo \"   window.name = '{$name}\", ($addServer ? ':'.htmlspecialchars($_REQUEST['server']) : ''), \"';\\n\";\n\t\t\techo \"//]]>\\n\";\n\t\t\techo \"</script>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * Converts a PHP.INI size variable to bytes.  Taken from publically available\n\t\t * function by Chris DeRose, here: http://www.php.net/manual/en/configuration.directives.php#ini.file-uploads\n\t\t * @param $strIniSize The PHP.INI variable\n\t\t * @return size in bytes, false on failure\n\t\t */\n\t\tfunction inisizeToBytes($strIniSize) {\n\t\t\t// This function will take the string value of an ini 'size' parameter,\n\t\t\t// and return a double (64-bit float) representing the number of bytes\n\t\t\t// that the parameter represents. Or false if $strIniSize is unparseable.\n\t\t\t$a_IniParts = array();\n\n\t\t\tif (!is_string($strIniSize))\n\t\t\t\treturn false;\n\n\t\t\tif (!preg_match ('/^(\\d+)([bkm]*)$/i', $strIniSize,$a_IniParts))\n\t\t\t\treturn false;\n\n\t\t\t$nSize = (double) $a_IniParts[1];\n\t\t\t$strUnit = strtolower($a_IniParts[2]);\n\n\t\t\tswitch($strUnit) {\n\t\t\t\tcase 'm':\n\t\t\t\t\treturn ($nSize * (double) 1048576);\n\t\t\t\tcase 'k':\n\t\t\t\t\treturn ($nSize * (double) 1024);\n\t\t\t\tcase 'b':\n\t\t\t\tdefault:\n\t\t\t\t\treturn $nSize;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Display a URL given an action associative array.\n\t\t * @param $action An associative array of the follow properties:\n\t\t *\t\t\t'url'  => The first part of the URL (before the ?)\n\t\t *\t\t\t'urlvars' => Associative array of (URL variable => field name)\n\t\t *\t\t\t\t\t\tthese are appended to the URL\n\t\t *\t\t\t'urlfn' => Function to apply to URL before display\n\t\t * @param $fields Field data from which 'urlfield' and 'vars' are obtained.\n\t\t * @param $attr If supplied then the URL will be quoted and prefixed with\n\t\t *\t\t\t\t'$attr='.\n\t\t */\n\t\tfunction printActionUrl(&$action, &$fields, $attr = null) {\n\t\t\t$url = value($action['url'], $fields);\n\n\t\t\tif ($url === false) return '';\n\n\t\t\tif (!empty($action['urlvars'])) {\n\t\t\t\t$urlvars = value($action['urlvars'], $fields);\n\t\t\t} else {\n\t\t\t\t$urlvars = array();\n\t\t\t}\n\n\t\t\tif (isset($urlvars['subject'])) {\n\t\t\t\t$subject = value($urlvars['subject'], $fields);\n\t\t\t\tif (isset($_REQUEST['server']) && $subject != 'root') {\n\t\t\t\t\t$urlvars['server'] = $_REQUEST['server'];\n\t\t\t\t\tif (isset($_REQUEST['database']) && $subject != 'server') {\n\t\t\t\t\t\t$urlvars['database'] = $_REQUEST['database'];\n\t\t\t\t\t\tif (isset($_REQUEST['schema']) && $subject != 'database') {\n\t\t\t\t\t\t\t$urlvars['schema'] = $_REQUEST['schema'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$sep = '?';\n\t\t\tforeach ($urlvars as $var => $varfield) {\n\t\t\t\t$url .= $sep . value_url($var, $fields) . '=' . value_url($varfield, $fields);\n\t\t\t\t$sep = '&';\n\t\t\t}\n\n\t\t\t$url = htmlentities($url);\n\n\t\t\tif ($attr !== null && $url != '')\n\t\t\t\treturn ' '.$attr.'=\"'.$url.'\"';\n\t\t\telse\n\t\t\t\treturn $url;\n\t\t}\n\n\t\tfunction getRequestVars($subject = '') {\n\t\t\t$v = array();\n\t\t\tif (!empty($subject))\n\t\t\t\t$v['subject'] = $subject;\n\t\t\tif (isset($_REQUEST['server']) && $subject != 'root') {\n\t\t\t\t$v['server'] = $_REQUEST['server'];\n\t\t\t\tif (isset($_REQUEST['database']) && $subject != 'server') {\n\t\t\t\t\t$v['database'] = $_REQUEST['database'];\n\t\t\t\t\tif (isset($_REQUEST['schema']) && $subject != 'database') {\n\t\t\t\t\t\t$v['schema'] = $_REQUEST['schema'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $v;\n\t\t}\n\n\t\tfunction printUrlVars(&$vars, &$fields) {\n\t\t\tforeach ($vars as $var => $varfield) {\n\t\t\t\techo \"{$var}=\", urlencode($fields[$varfield]), \"&amp;\";\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Display a table of data.\n\t\t * @param $tabledata A set of data to be formatted, as returned by $data->getDatabases() etc.\n\t\t * @param $columns   An associative array of columns to be displayed:\n\t\t *\t\t\t$columns = array(\n\t\t *\t\t\t\tcolumn_id => array(\n\t\t *\t\t\t\t\t'title' => Column heading,\n\t\t *\t\t\t\t\t'field' => Field name for $tabledata->fields[...],\n\t\t *\t\t\t\t\t'help'  => Help page for this column,\n\t\t *\t\t\t\t), ...\n\t\t *\t\t\t);\n\t\t * @param $actions   Actions that can be performed on each object:\n\t\t *\t\t\t$actions = array(\n\t\t *\t\t\t\t* multi action support\n\t\t *\t\t\t\t* parameters are serialized for each entries and given in $_REQUEST['ma']\n\t\t *\t\t\t\t'multiactions' => array(\n\t\t *\t\t\t\t\t'keycols' => Associative array of (URL variable => field name), // fields included in the form\n\t\t *\t\t\t\t\t'url' => URL submission,\n\t\t *\t\t\t\t\t'default' => Default selected action in the form.\n\t\t *\t\t\t\t\t\t\t\t\tif null, an empty action is added & selected\n\t\t *\t\t\t\t),\n\t\t *\t\t\t\t* actions *\n\t\t *\t\t\t\taction_id => array(\n\t\t *\t\t\t\t\t'title' => Action heading,\n\t\t *\t\t\t\t\t'url'   => Static part of URL.  Often we rely\n\t\t *\t\t\t\t\t\t\t   relative urls, usually the page itself (not '' !), or just a query string,\n\t\t *\t\t\t\t\t'vars'  => Associative array of (URL variable => field name),\n\t\t *\t\t\t\t\t'multiaction' => Name of the action to execute.\n\t\t *\t\t\t\t\t\t\t\t\t\tAdd this action to the multi action form\n\t\t *\t\t\t\t), ...\n\t\t *\t\t\t);\n\t\t * @param $nodata    (optional) Message to display if data set is empty.\n\t\t * @param $pre_fn    (optional) Name of a function to call for each row,\n\t\t *\t\t\t\t\t it will be passed two params: $rowdata and $actions,\n\t\t *\t\t\t\t\t it may be used to derive new fields or modify actions.\n\t\t *\t\t\t\t\t It can return an array of actions specific to the row,\n\t\t *\t\t\t\t\t or if nothing is returned then the standard actions are used.\n\t\t *\t\t\t\t\t (see tblproperties.php and constraints.php for examples)\n\t\t *\t\t\t\t\t The function must not must not store urls because\n\t\t *\t\t\t\t\t they are relative and won't work out of context.\n\t\t */\n\t\tfunction printTable(&$tabledata, &$columns, &$actions, $nodata = null, $pre_fn = null) {\n\t\t\tglobal $data, $conf, $misc, $lang;\n\n\t\t\tif ($has_ma = isset($actions['multiactions']))\n\t\t\t\t$ma = $actions['multiactions'];\n\t\t\tunset($actions['multiactions']);\n\n\t\t\tif ($tabledata->recordCount() > 0) {\n\n\t\t\t\t// Remove the 'comment' column if they have been disabled\n\t\t\t\tif (!$conf['show_comments']) {\n\t\t\t\t\tunset($columns['comment']);\n\t\t\t\t}\n\n\t\t\t\tif (isset($columns['comment'])) {\n\t\t\t\t\t// Uncomment this for clipped comments.\n\t\t\t\t\t// TODO: This should be a user option.\n\t\t\t\t\t//$columns['comment']['params']['clip'] = true;\n\t\t\t\t}\n\n\t\t\t\tif ($has_ma) {\n\t\t\t\t\techo \"<script src=\\\"multiactionform.js\\\" type=\\\"text/javascript\\\"></script>\\n\";\n\t\t\t\t\techo \"<form id=\\\"multi_form\\\" action=\\\"{$ma['url']}\\\" method=\\\"post\\\" enctype=\\\"multipart/form-data\\\">\\n\";\n\t\t\t\t\tif (isset($ma['vars']))\n\t\t\t\t\t\tforeach ($ma['vars'] as $k => $v)\n\t\t\t\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"$k\\\" value=\\\"$v\\\" />\";\n\t\t\t\t}\n\n\t\t\t\techo \"<table>\\n\";\n\t\t\t\techo \"<tr>\\n\";\n\t\t\t\t// Display column headings\n\t\t\t\tif ($has_ma) echo \"<th></th>\";\n\t\t\t\tforeach ($columns as $column_id => $column) {\n\t\t\t\t\tswitch ($column_id) {\n\t\t\t\t\t\tcase 'actions':\n\t\t\t\t\t\t\tif (sizeof($actions) > 0) echo \"<th class=\\\"data\\\" colspan=\\\"\", count($actions), \"\\\">{$column['title']}</th>\\n\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\techo \"<th class=\\\"data\\\">\";\n\t\t\t\t\t\t\tif (isset($column['help']))\n\t\t\t\t\t\t\t\t$this->printHelp($column['title'], $column['help']);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\techo $column['title'];\n\t\t\t\t\t\t\techo \"</th>\\n\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\techo \"</tr>\\n\";\n\n\t\t\t\t// Display table rows\n\t\t\t\t$i = 0;\n\t\t\t\twhile (!$tabledata->EOF) {\n\t\t\t\t\t$id = ($i % 2) + 1;\n\n\t\t\t\t\tunset($alt_actions);\n\t\t\t\t\tif (!is_null($pre_fn)) $alt_actions = $pre_fn($tabledata, $actions);\n\t\t\t\t\tif (!isset($alt_actions)) $alt_actions =& $actions;\n\n\t\t\t\t\techo \"<tr class=\\\"data{$id}\\\">\\n\";\n\t\t\t\t\tif ($has_ma) {\n\t\t\t\t\t\tforeach ($ma['keycols'] as $k => $v)\n\t\t\t\t\t\t\t$a[$k] = $tabledata->fields[$v];\n\t\t\t\t\t\techo \"<td>\";\n\t\t\t\t\t\techo \"<input type=\\\"checkbox\\\" name=\\\"ma[]\\\" value=\\\"\". htmlentities(serialize($a)) .\"\\\" />\";\n\t\t\t\t\t\techo \"</td>\\n\";\n\t\t\t\t\t}\n\n\t\t\t\t\tforeach ($columns as $column_id => $column) {\n\n\t\t\t\t\t\t// Apply default values for missing parameters\n\t\t\t\t\t\tif (isset($column['url']) && !isset($column['vars'])) $column['vars'] = array();\n\n\t\t\t\t\t\tswitch ($column_id) {\n\t\t\t\t\t\t\tcase 'actions':\n\t\t\t\t\t\t\t\tforeach ($alt_actions as $action) {\n\t\t\t\t\t\t\t\t\tif (isset($action['disable']) && $action['disable'] === true) {\n\t\t\t\t\t\t\t\t\t\techo \"<td></td>\\n\";\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\techo \"<td class=\\\"opbutton{$id}\\\">\";\n\t\t\t\t\t\t\t\t\t\techo \"<a href=\\\"{$action['url']}\";\n\t\t\t\t\t\t\t\t\t\tif ($action['url'] === '') echo '?';\n\t\t\t\t\t\t\t\t\t\t$misc->printUrlVars($action['vars'], $tabledata->fields);\n\t\t\t\t\t\t\t\t\t\tif (isset($action['target']))\n\t\t\t\t\t\t\t\t\t\t\techo \"\\\" target=\\\"{$action['target']}\";\n\t\t\t\t\t\t\t\t\t\techo \"\\\">{$action['title']}</a></td>\\n\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\techo \"<td>\";\n\t\t\t\t\t\t\t\t$val = value($column['field'], $tabledata->fields);\n\t\t\t\t\t\t\t\tif (!is_null($val)) {\n\t\t\t\t\t\t\t\t\tif (isset($column['url'])) {\n\t\t\t\t\t\t\t\t\t\techo \"<a href=\\\"{$column['url']}\";\n\t\t\t\t\t\t\t\t\t\t$misc->printUrlVars($column['vars'], $tabledata->fields);\n\t\t\t\t\t\t\t\t\t\techo \"\\\">\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$type = isset($column['type']) ? $column['type'] : null;\n\t\t\t\t\t\t\t\t\t$params = isset($column['params']) ? $column['params'] : array();\n\t\t\t\t\t\t\t\t\techo $misc->printVal($val, $type, $params);\n\t\t\t\t\t\t\t\t\tif (isset($column['url'])) echo \"</a>\";\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\techo \"</td>\\n\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\techo \"</tr>\\n\";\n\n\t\t\t\t\t$tabledata->moveNext();\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t\techo \"</table>\\n\";\n\n\t\t\t\t// Multi action table footer w/ options & [un]check'em all\n\t\t\t\tif ($has_ma) {\n\t\t\t\t\t// if default is not set or doesn't exist, set it to null\n\t\t\t\t\tif (!isset($ma['default']) || !isset($actions[$ma['default']]))\n\t\t\t\t\t\t$ma['default'] = null;\n\t\t\t\t\techo \"<br />\\n\";\n\t\t\t\t\techo \"<table>\\n\";\n\t\t\t\t\techo \"<tr>\\n\";\n\t\t\t\t\techo \"<th class=\\\"data\\\" style=\\\"text-align: left\\\" colspan=\\\"3\\\">{$lang['stractionsonmultiplelines']}</th>\\n\";\n\t\t\t\t\techo \"</tr>\\n\";\n\t\t\t\t\techo \"<tr class=\\\"row1\\\">\\n\";\n\t\t\t\t\techo \"<td>\";\n\t\t\t\t\techo \"<a href=\\\"#\\\" onclick=\\\"javascript:checkAll(true);\\\">{$lang['strselectall']}</a> / \";\n\t\t\t\t\techo \"<a href=\\\"#\\\" onclick=\\\"javascript:checkAll(false);\\\">{$lang['strunselectall']}</a></td>\\n\";\n\t\t\t\t\techo \"<td>&nbsp;--->&nbsp;</td>\\n\";\n\t\t\t\t\techo \"<td>\\n\";\n\t\t\t\t\techo \"\\t<select name=\\\"action\\\">\\n\";\n\t\t\t\t\tif ($ma['default'] == null)\n\t\t\t\t\t\techo \"\\t\\t<option value=\\\"\\\">--</option>\\n\";\n\t\t\t\t\tforeach($actions as $k => $a)\n\t\t\t\t\t\tif (isset($a['multiaction']))\n\t\t\t\t\t\t\techo \"\\t\\t<option value=\\\"{$a['multiaction']}\\\"\", ($ma['default']  == $k? ' selected=\"selected\"': ''), \">{$a['title']}</option>\\n\";\n\t\t\t\t\techo \"\\t</select>\\n\";\n\t\t\t\t\techo \"<input type=\\\"submit\\\" value=\\\"{$lang['strexecute']}\\\" />\\n\";\n\t\t\t\t\techo $misc->form;\n\t\t\t\t\techo \"</td>\\n\";\n\t\t\t\t\techo \"</tr>\\n\";\n\t\t\t\t\techo \"</table>\\n\";\n\t\t\t\t\techo '</form>';\n\t\t\t\t};\n\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tif (!is_null($nodata)) {\n\t\t\t\t\techo \"<p>{$nodata}</p>\\n\";\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t/** Produce XML data for the browser tree\n\t\t * @param $treedata A set of records to populate the tree.\n\t\t * @param $attrs Attributes for tree items\n\t\t *        'text' - the text for the tree node\n\t\t *        'icon' - an icon for node\n\t\t *        'openIcon' - an alternative icon when the node is expanded\n\t\t *        'toolTip' - tool tip text for the node\n\t\t *        'action' - URL to visit when single clicking the node\n\t\t *        'iconAction' - URL to visit when single clicking the icon node\n\t\t *        'branch' - URL for child nodes (tree XML)\n\t\t *        'expand' - the action to return XML for the subtree\n\t\t *        'nodata' - message to display when node has no children\n\t\t *        'nohead' - suppress headers and opening <tree> tag\n\t\t *        'nofoot' - suppress closing </tree> tag\n\t\t */\n\t\tfunction printTreeXML(&$treedata, &$attrs) {\n\t\t\tglobal $conf, $lang;\n\n\t\t\tif (!isset($attrs['nohead']) || $attrs['nohead'] === false) {\n\t\t\t\theader(\"Content-Type: text/xml\");\n\t\t\t\theader(\"Cache-Control: no-cache\");\n\n\t\t\t\techo \"<?xml version=\\\"1.0\\\" encoding=\\\"\", htmlspecialchars($lang['appcharset']), \"\\\"?>\\n\";\n\n\t\t\t\techo \"<tree>\\n\";\n\t\t\t}\n\n\t\t\tif ($treedata->recordCount() > 0) {\n\t\t\t\twhile (!$treedata->EOF) {\n\t\t\t\t\t$rec =& $treedata->fields;\n\n\t\t\t\t\techo \"<tree\";\n\t\t\t\t\techo value_xml_attr('text', $attrs['text'], $rec);\n\t\t\t\t\techo value_xml_attr('action', $attrs['action'], $rec);\n\t\t\t\t\techo value_xml_attr('src', $attrs['branch'], $rec);\n\n\t\t\t\t\t$icon = $this->icon(value($attrs['icon'], $rec));\n\t\t\t\t\techo value_xml_attr('icon', $icon, $rec);\n\t\t\t\t\techo value_xml_attr('iconaction', $attrs['iconAction'], $rec);\n\n\t\t\t\t\tif (!empty($attrs['openicon'])) {\n\t\t\t\t\t\t$icon = $this->icon(value($attrs['openIcon'], $rec));\n\t\t\t\t\t}\n\t\t\t\t\techo value_xml_attr('openicon', $icon, $rec);\n\n\t\t\t\t\techo value_xml_attr('tooltip', $attrs['toolTip'], $rec);\n\n\t\t\t\t\techo \" />\\n\";\n\n\t\t\t\t\t$treedata->moveNext();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$msg = isset($attrs['nodata']) ? $attrs['nodata'] : $lang['strnoobjects'];\n\t\t\t\techo \"<tree text=\\\"{$msg}\\\" onaction=\\\"tree.getSelected().getParent().reload()\\\" icon=\\\"\", $this->icon('ObjectNotFound'), \"\\\" />\\n\";\n\t\t\t}\n\n\t\t\tif (!isset($attrs['nofoot']) || $attrs['nofoot'] === false) {\n\t\t\t\techo \"</tree>\\n\";\n\t\t\t}\n\t\t}\n\n\t\tfunction adjustTabsForTree(&$tabs) {\n\t\t\tinclude_once('./classes/ArrayRecordSet.php');\n\n\t\t\tforeach ($tabs as $i => $tab) {\n\t\t\t\tif ((isset($tab['hide']) && $tab['hide'] === true) || (isset($tab['tree']) && $tab['tree'] === false)) {\n\t\t\t\t\tunset($tabs[$i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new ArrayRecordSet($tabs);\n\t\t}\n\n\t\tfunction icon($icon) {\n\t\t\tglobal $conf;\n\t\t\t$path = \"images/themes/{$conf['theme']}/{$icon}\";\n\t\t\tif (file_exists($path.'.png')) return $path.'.png';\n\t\t\tif (file_exists($path.'.gif')) return $path.'.gif';\n\t\t\t$path = \"images/themes/default/{$icon}\";\n\t\t\tif (file_exists($path.'.png')) return $path.'.png';\n\t\t\tif (file_exists($path.'.gif')) return $path.'.gif';\n\t\t\treturn '';\n\t\t}\n\n\t\t/**\n\t\t * Function to escape command line parameters\n\t\t * @param $str The string to escape\n\t\t * @return The escaped string\n\t\t */\n\t\tfunction escapeShellArg($str) {\n\t\t\tglobal $data, $lang;\n\n\t\t\tif (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n\t\t\t\t// Due to annoying PHP bugs, shell arguments cannot be escaped\n\t\t\t\t// (command simply fails), so we cannot allow complex objects\n\t\t\t\t// to be dumped.\n\t\t\t\tif (preg_match('/^[_.[:alnum:]]+$/', $str))\n\t\t\t\t\treturn $str;\n\t\t\t\telse {\n\t\t\t\t\techo $lang['strcannotdumponwindows'];\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn escapeshellarg($str);\n\t\t}\n\n\t\t/**\n\t\t * Function to escape command line programs\n\t\t * @param $str The string to escape\n\t\t * @return The escaped string\n\t\t */\n\t\tfunction escapeShellCmd($str) {\n\t\t\tglobal $data;\n\n\t\t\tif (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n\t\t\t\t$data->fieldClean($str);\n\t\t\t\treturn '\"' . $str . '\"';\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn escapeshellcmd($str);\n\t\t}\n\n\t\t/**\n\t\t * Get list of servers' groups if existing in the conf\n\t\t * @return a recordset of servers' groups\n\t\t */\n\t\tfunction getServersGroups() {\n\t\t\tglobal $conf, $lang;\n\t\t\t$grps = array();\n\t\t\t\n\t\t\tforeach ($conf['srv_groups'] as $i => $group) {\n\t\t\t\t$grps[$i] = array(\n\t\t\t\t\t'id' => $i,\n\t\t\t\t\t'desc' => $group['desc'],\n\t\t\t\t);\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$grps['all'] = array(\n\t\t\t\t'id' => 'all', \n\t\t\t\t'desc' => $lang['strallservers'],\n\t\t\t);\n\n\t\t\tinclude_once('./classes/ArrayRecordSet.php');\n\t\t\treturn new ArrayRecordSet($grps);\n\t\t}\n\t\t\n\n\t\t/**\n\t\t * Get list of servers\n\t\t * @param $recordset return as RecordSet suitable for printTable if true,\n\t\t *                   otherwise just return an array.\n\t\t * @param $group a group name to filter the returned servers using $conf[srv_groups]\n\t\t */\n\t\tfunction getServers($recordset = false, $group = false) {\n\t\t\tglobal $conf;\n\n\t\t\t$logins = isset($_SESSION['webdbLogin']) && is_array($_SESSION['webdbLogin']) ? $_SESSION['webdbLogin'] : array();\n\t\t\t$srvs = array();\n\n\t\t\tif (($group !== false) and ($group !== 'all'))\n\t\t\t\t$group = array_fill_keys(explode(',', $conf['srv_groups'][$group]['servers']), 1);\n\t\t\t\n\t\t\tforeach($conf['servers'] as $idx => $info) {\n\t\t\t\t$server_id = $info['host'].':'.$info['port'].':'.$info['sslmode'];\n\t\t\t\tif (($group === false) \n\t\t\t\t\tor (isset($group[$idx]))\n\t\t\t\t\tor ($group === 'all')\n\t\t\t\t) {\n\t\t\t\t\t$server_id = $info['host'].':'.$info['port'].':'.$info['sslmode'];\n\t\t\t\t\t\n\t\t\t\t\tif (isset($logins[$server_id])) $srvs[$server_id] = $logins[$server_id];\n\t\t\t\t\telse $srvs[$server_id] = $info;\n\n\t\t\t\t\t$srvs[$server_id]['id'] = $server_id;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction _cmp_desc($a, $b) {\n\t\t\t\treturn strcmp($a['desc'], $b['desc']);\n\t\t\t}\n\t\t\tuasort($srvs, '_cmp_desc');\n\n\t\t\tif ($recordset) {\n\t\t\t\tinclude_once('./classes/ArrayRecordSet.php');\n\t\t\t\treturn new ArrayRecordSet($srvs);\n\t\t\t}\n\t\t\treturn $srvs;\n\t\t}\n\n\t\t/**\n\t\t * Validate and retrieve information on a server.\n\t\t * If the parameter isn't supplied then the currently\n\t\t * connected server is returned.\n\t\t * @param $server_id A server identifier (host:port)\n\t\t * @return An associative array of server properties\n\t\t */\n\t\tfunction getServerInfo($server_id = null) {\n\t\t\tglobal $conf, $_reload_browser, $lang;\n\n\t\t\tif ($server_id === null && isset($_REQUEST['server']))\n\t\t\t\t$server_id = $_REQUEST['server'];\n\n\t\t\t// Check for the server in the logged-in list\n\t\t\tif (isset($_SESSION['webdbLogin'][$server_id]))\n\t\t\t\treturn $_SESSION['webdbLogin'][$server_id];\n\n\t\t\t// Otherwise, look for it in the conf file\n\t\t\tforeach($conf['servers'] as $idx => $info) {\n\t\t\t\tif ($server_id == $info['host'].':'.$info['port'].':'.$info['sslmode']) {\n\t\t\t\t\t// Automatically use shared credentials if available\n\t\t\t\t\tif (!isset($info['username']) && isset($_SESSION['sharedUsername'])) {\n\t\t\t\t\t\t$info['username'] = $_SESSION['sharedUsername'];\n\t\t\t\t\t\t$info['password'] = $_SESSION['sharedPassword'];\n\t\t\t\t\t\t$_reload_browser = true;\n\t\t\t\t\t\t$this->setServerInfo(null, $info, $server_id);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn $info;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($server_id === null){\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\t// Unable to find a matching server, are we being hacked?\n\t\t\t\techo $lang['strinvalidserverparam'];\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Set server information.\n\t\t * @param $key parameter name to set, or null to replace all\n\t\t *             params with the assoc-array in $value.\n\t\t * @param $value the new value, or null to unset the parameter\n\t\t * @param $server_id the server identifier, or null for current\n\t\t *                   server.\n\t\t */\n\t\tfunction setServerInfo($key, $value, $server_id = null)\n\t\t{\n\t\t\tif ($server_id === null && isset($_REQUEST['server']))\n\t\t\t\t$server_id = $_REQUEST['server'];\n\n\t\t\tif ($key === null) {\n\t\t\t\tif ($value === null)\n\t\t\t\t\tunset($_SESSION['webdbLogin'][$server_id]);\n\t\t\t\telse\n\t\t\t\t\t$_SESSION['webdbLogin'][$server_id] = $value;\n\t\t\t} else {\n\t\t\t\tif ($value === null)\n\t\t\t\t\tunset($_SESSION['webdbLogin'][$server_id][$key]);\n\t\t\t\telse\n\t\t\t\t\t$_SESSION['webdbLogin'][$server_id][$key] = $value;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/**\n\t\t * Set the current schema\n\t\t * @param $schema The schema name\n\t\t * @return 0 on success\n\t\t * @return $data->seSchema() on error\n\t\t */\n\t\tfunction setCurrentSchema($schema) {\n\t\t\tglobal $data;\n\t\t\t\n\t\t\t$status = $data->setSchema($schema);\n\t\t\tif($status != 0)\n\t\t\t\treturn $status;\n\n\t\t\t$_REQUEST['schema'] = $schema;\n\t\t\t$this->setHREF();\n\t\t\treturn 0;\n\t\t}\n\n\t\t/**\n\t\t * Save the given SQL script in the history \n\t\t * of the database and server.\n\t\t * @param $script the SQL script to save.\n\t\t */\n\t\tfunction saveScriptHistory($script) {\n\t\t\tlist($usec, $sec) = explode(' ', microtime());\n\t\t\t$time = ((float)$usec + (float)$sec);\n\t\t\t$_SESSION['history'][$_REQUEST['server']][$_REQUEST['database']][\"$time\"] = array(\n\t\t\t\t'query' => $script,\n\t\t\t\t'paginate' => (!isset($_REQUEST['paginate'])? 'f':'t'),\n\t\t\t\t'queryid' => $time,\n\t\t\t);\n\t\t}\n\t\n\t\t/*\n\t\t * Output dropdown list to select server and \n\t\t * databases form the popups windows.\n\t\t * @param $onchange Javascript action to take when selections change.\n\t\t */\t\n\t\tfunction printConnection($onchange) {\n\t\t\tglobal $data, $lang, $misc;\n\n\t\t\techo \"<table style=\\\"width: 100%\\\"><tr><td>\\n\";\n\t\t\techo \"<label>\";\n\t\t\t$misc->printHelp($lang['strserver'], 'pg.server');\n\t\t\techo \"</label>\";\n\t\t\techo \": <select name=\\\"server\\\" {$onchange}>\\n\";\n\t\t\t\n\t\t\t$servers = $misc->getServers();\n\t\t\tforeach($servers as $info) {\n\t\t\t\tif (empty($info['username'])) continue; // not logged on this server\n\t\t\t\techo \"<option value=\\\"\", htmlspecialchars($info['id']), \"\\\"\",\n\t\t\t\t\t((isset($_REQUEST['server']) && $info['id'] == $_REQUEST['server'])) ? ' selected=\"selected\"' : '', \">\",\n\t\t\t\t\thtmlspecialchars(\"{$info['desc']} ({$info['id']})\"), \"</option>\\n\";\n\t\t\t}\n\t\t\techo \"</select>\\n</td><td style=\\\"text-align: right\\\">\\n\";\n\t\t\t\n\t\t\t// Get the list of all databases\n\t\t\t$databases = $data->getDatabases();\n\n\t\t\tif ($databases->recordCount() > 0) {\n\n\t\t\t\techo \"<label>\";\n\t\t\t\t$misc->printHelp($lang['strdatabase'], 'pg.database');\n\t\t\t\techo \": <select name=\\\"database\\\" {$onchange}>\\n\";\n\t\t\t\t\n\t\t\t\t//if no database was selected, user should select one\n\t\t\t\tif (!isset($_REQUEST['database']))\n\t\t\t\t\techo \"<option value=\\\"\\\">--</option>\\n\";\n\t\t\t\t\n\t\t\t\twhile (!$databases->EOF) {\n\t\t\t\t\t$dbname = $databases->fields['datname'];\n\t\t\t\t\techo \"<option value=\\\"\", htmlspecialchars($dbname), \"\\\"\",\n\t\t\t\t\t\t((isset($_REQUEST['database']) && $dbname == $_REQUEST['database'])) ? ' selected=\"selected\"' : '', \">\",\n\t\t\t\t\t\thtmlspecialchars($dbname), \"</option>\\n\";\n\t\t\t\t\t$databases->moveNext();\n\t\t\t\t}\n\t\t\t\techo \"</select></label>\\n\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$server_info = $misc->getServerInfo();\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"database\\\" value=\\\"\", \n\t\t\t\t\thtmlspecialchars($server_info['defaultdb']), \"\\\" />\\n\";\n\t\t\t}\n\t\t\t\n\t\t\techo \"</td></tr></table>\\n\";\n\t\t}\n\n\t\t/**\n\t\t * returns an array representing FKs definition for a table, sorted by fields\n\t\t * or by constraint.\n\t\t * @param $table The table to retrieve FK contraints from\n\t\t * @returns the array of FK definition:\n\t\t *   array(\n\t\t *     'byconstr' => array(\n\t\t *       constrain id => array(\n\t\t *         confrelid => foreign relation oid\n\t\t *         f_schema => foreign schema name\n\t\t *         f_table => foreign table name\n\t\t *         pattnums => array of parent's fields nums\n\t\t *         pattnames => array of parent's fields names\n\t\t *         fattnames => array of foreign attributes names\n\t\t *       )\n\t\t *     ),\n\t\t *     'byfield' => array(\n\t\t *       attribute num => array (constraint id, ...)\n\t\t *     ),\n\t\t *     'code' => HTML/js code to include in the page for auto-completion\n\t\t *   )\n\t\t **/\n\t\tfunction getAutocompleteFKProperties($table) {\n\t\t\tglobal $data;\n\n\t\t\t$fksprops = array(\n\t\t\t\t'byconstr' => array(),\n\t\t\t\t'byfield' => array(),\n\t\t\t\t'code' => ''\n\t\t\t);\n\n\t\t\t$constrs = $data->getConstraintsWithFields($table);\n\n\t\t\tif (!$constrs->EOF) {\n\t\t\t\t$conrelid = $constrs->fields['conrelid'];\n\t\t\t\twhile(!$constrs->EOF) {\n\t\t\t\t\tif ($constrs->fields['contype'] == 'f') {\n\t\t\t\t\t\tif (!isset($fksprops['byconstr'][$constrs->fields['conid']])) {\n\t\t\t\t\t\t\t$fksprops['byconstr'][$constrs->fields['conid']] = array (\n\t\t\t\t\t\t\t\t'confrelid' => $constrs->fields['confrelid'],\n\t\t\t\t\t\t\t\t'f_table' => $constrs->fields['f_table'],\n\t\t\t\t\t\t\t\t'f_schema' => $constrs->fields['f_schema'],\n\t\t\t\t\t\t\t\t'pattnums' => array(),\n\t\t\t\t\t\t\t\t'pattnames' => array(),\n\t\t\t\t\t\t\t\t'fattnames' => array()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$fksprops['byconstr'][$constrs->fields['conid']]['pattnums'][] = $constrs->fields['p_attnum'];\n\t\t\t\t\t\t$fksprops['byconstr'][$constrs->fields['conid']]['pattnames'][] = $constrs->fields['p_field'];\n\t\t\t\t\t\t$fksprops['byconstr'][$constrs->fields['conid']]['fattnames'][] = $constrs->fields['f_field'];\n\n\t\t\t\t\t\tif (!isset($fksprops['byfield'][$constrs->fields['p_attnum']]))\n\t\t\t\t\t\t\t$fksprops['byfield'][$constrs->fields['p_attnum']] = array();\n\t\t\t\t\t\t$fksprops['byfield'][$constrs->fields['p_attnum']][] = $constrs->fields['conid'];\n\t\t\t\t\t}\n\t\t\t\t\t$constrs->moveNext();\n\t\t\t\t}\n\n\t\t\t\t$fksprops['code'] = \"<script type=\\\"text/javascript\\\">\\n\";\n\t\t\t\t$fksprops['code'] .= \"var constrs = {};\\n\";\n\t\t\t\tforeach ($fksprops['byconstr'] as $conid => $props) {\n\t\t\t\t\t$fksprops['code'] .= \"constrs.constr_{$conid} = {\\n\";\n\t\t\t\t\t$fksprops['code'] .= 'pattnums: ['. implode(',',$props['pattnums']) .\"],\\n\";\n\t\t\t\t\t$fksprops['code'] .= \"f_table:'\". addslashes(htmlentities($props['f_table'], ENT_QUOTES)) .\"',\\n\";\n\t\t\t\t\t$fksprops['code'] .= \"f_schema:'\". addslashes(htmlentities($props['f_schema'], ENT_QUOTES)) .\"',\\n\";\n\t\t\t\t\t$_ = '';\n\t\t\t\t\tforeach ($props['pattnames'] as $n) {\n\t\t\t\t\t\t$_ .= \",'\". htmlentities($n, ENT_QUOTES) .\"'\";\n\t\t\t\t\t}\n\t\t\t\t\t$fksprops['code'] .= 'pattnames: ['. substr($_, 1) .\"],\\n\";\n\n\t\t\t\t\t$_ = '';\n\t\t\t\t\tforeach ($props['fattnames'] as $n) {\n\t\t\t\t\t\t$_ .= \",'\". htmlentities($n, ENT_QUOTES) .\"'\";\n\t\t\t\t\t}\n\n\t\t\t\t\t$fksprops['code'] .= 'fattnames: ['. substr($_, 1) .\"]\\n\";\n\t\t\t\t\t$fksprops['code'] .= \"};\\n\";\n\t\t\t\t}\n\n\t\t\t\t$fksprops['code'] .= \"var attrs = {};\\n\";\n\t\t\t\tforeach ($fksprops['byfield'] as $attnum => $cstrs ) {\n\t\t\t\t\t$fksprops['code'] .= \"attrs.attr_{$attnum} = [\". implode(',', $fksprops['byfield'][$attnum]) .\"];\\n\";\n\t\t\t\t}\n\n\t\t\t\t$fksprops['code'] .= \"var table='\". addslashes(htmlentities($table, ENT_QUOTES)) .\"';\";\n\t\t\t\t$fksprops['code'] .= \"var server='\". htmlentities($_REQUEST['server']) .\"';\";\n\t\t\t\t$fksprops['code'] .= \"var database='\". addslashes(htmlentities($_REQUEST['database'], ENT_QUOTES)) .\"';\";\n\t\t\t\t$fksprops['code'] .= \"</script>\\n\";\n\n\t\t\t\t$fksprops['code'] .= '<div id=\"fkbg\"></div>';\n\t\t\t\t$fksprops['code'] .= '<div id=\"fklist\"></div>';\n\t\t\t\t$fksprops['code'] .= '<script src=\"libraries/js/jquery.js\" type=\"text/javascript\"></script>';\n\t\t\t\t$fksprops['code'] .= '<script src=\"js/ac_insert_row.js\" type=\"text/javascript\"></script>';\n\t\t\t}\n\n\t\t\telse /* we have no foreign keys on this table */\n\t\t\t\treturn false;\n\n\t\t\treturn $fksprops;\n\t\t}\n\t}\n?>\n", "<?php\n\n\t/**\n\t * Common relation browsing function that can be used for views,\n\t * tables, reports, arbitrary queries, etc. to avoid code duplication.\n\t * @param $query The SQL SELECT string to execute\n\t * @param $count The same SQL query, but only retrieves the count of the rows (AS total)\n\t * @param $return_url The return URL\n\t * @param $return_desc The return link name\n\t * @param $page The current page\n\t *\n\t * $Id: display.php,v 1.68 2008/04/14 12:44:27 ioguix Exp $\n\t */\n\n\t// Prevent timeouts on large exports (non-safe mode only)\n\tif (!ini_get('safe_mode')) set_time_limit(0);\n\n\t// Include application functions\n\tinclude_once('./libraries/lib.inc.php');\n\n\tglobal $conf, $lang;\n\n\t$action = (isset($_REQUEST['action'])) ? $_REQUEST['action'] : '';\n\n\t/**\n\t * Show confirmation of edit and perform actual update\n\t */\n\tfunction doEditRow($confirm, $msg = '') {\n\t\tglobal $data, $misc, $conf;\n\t\tglobal $lang;\n\n\t\tif (is_array($_REQUEST['key']))\n           $key = $_REQUEST['key'];\n        else\n           $key = unserialize($_REQUEST['key']);\n\n\t\tif ($confirm) {\n\t\t\t$misc->printTrail($_REQUEST['subject']);\n\t\t\t$misc->printTitle($lang['streditrow']);\n\t\t\t$misc->printMsg($msg);\n\n\t\t\t$attrs = $data->getTableAttributes($_REQUEST['table']);\n\t\t\t$rs = $data->browseRow($_REQUEST['table'], $key);\n\n\t\t\tif (($conf['autocomplete'] != 'disable')) {\n\t\t\t\t$fksprops = $misc->getAutocompleteFKProperties($_REQUEST['table']);\n\t\t\t\tif ($fksprops !== false)\n\t\t\t\t\techo $fksprops['code'];\n\t\t\t}\n\t\t\telse $fksprops = false;\n\n\t\t\techo \"<form action=\\\"display.php\\\" method=\\\"post\\\" id=\\\"ac_form\\\">\\n\";\n\t\t\t$elements = 0;\n\t\t\t$error = true;\t\t\t\n\t\t\tif ($rs->recordCount() == 1 && $attrs->recordCount() > 0) {\n\t\t\t\techo \"<table>\\n\";\n\n\t\t\t\t// Output table header\n\t\t\t\techo \"<tr><th class=\\\"data\\\">{$lang['strcolumn']}</th><th class=\\\"data\\\">{$lang['strtype']}</th>\";\n\t\t\t\techo \"<th class=\\\"data\\\">{$lang['strformat']}</th>\\n\";\n\t\t\t\techo \"<th class=\\\"data\\\">{$lang['strnull']}</th><th class=\\\"data\\\">{$lang['strvalue']}</th></tr>\";\n\n\t\t\t\t$i = 0;\n\t\t\t\twhile (!$attrs->EOF) {\n\n\t\t\t\t\t$attrs->fields['attnotnull'] = $data->phpBool($attrs->fields['attnotnull']);\n\t\t\t\t\t$id = (($i % 2) == 0 ? '1' : '2');\n\t\t\t\t\t\n\t\t\t\t\t// Initialise variables\n\t\t\t\t\tif (!isset($_REQUEST['format'][$attrs->fields['attname']]))\n\t\t\t\t\t\t$_REQUEST['format'][$attrs->fields['attname']] = 'VALUE';\n\t\t\t\t\t\n\t\t\t\t\techo \"<tr class=\\\"data{$id}\\\">\\n\";\n\t\t\t\t\techo \"<td style=\\\"white-space:nowrap;\\\">\", $misc->printVal($attrs->fields['attname']), \"</td>\";\n\t\t\t\t\techo \"<td style=\\\"white-space:nowrap;\\\">\\n\";\n\t\t\t\t\techo $misc->printVal($data->formatType($attrs->fields['type'], $attrs->fields['atttypmod']));\n\t\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"types[\", htmlspecialchars($attrs->fields['attname']), \"]\\\" value=\\\"\", \n\t\t\t\t\t\thtmlspecialchars($attrs->fields['type']), \"\\\" /></td>\";\n\t\t\t\t\t$elements++;\n\t\t\t\t\techo \"<td style=\\\"white-space:nowrap;\\\">\\n\";\n\t\t\t\t\techo \"<select name=\\\"format[\", htmlspecialchars($attrs->fields['attname']), \"]\\\">\\n\";\n\t\t\t\t\techo \"<option value=\\\"VALUE\\\"\", ($_REQUEST['format'][$attrs->fields['attname']] == 'VALUE') ? ' selected=\"selected\"' : '', \">{$lang['strvalue']}</option>\\n\";\n\t\t\t\t\techo \"<option value=\\\"EXPRESSION\\\"\", ($_REQUEST['format'][$attrs->fields['attname']] == 'EXPRESSION') ? ' selected=\"selected\"' : '', \">{$lang['strexpression']}</option>\\n\";\n\t\t\t\t\techo \"</select>\\n</td>\\n\";\n\t\t\t\t\t$elements++;\n\t\t\t\t\techo \"<td style=\\\"white-space:nowrap;\\\">\";\n\t\t\t\t\t// Output null box if the column allows nulls (doesn't look at CHECKs or ASSERTIONS)\n\t\t\t\t\tif (!$attrs->fields['attnotnull']) {\n\t\t\t\t\t\t// Set initial null values\n\t\t\t\t\t\tif ($_REQUEST['action'] == 'confeditrow' && $rs->fields[$attrs->fields['attname']] === null) {\n\t\t\t\t\t\t\t$_REQUEST['nulls'][$attrs->fields['attname']] = 'on';\n\t\t\t\t\t\t}\n\t\t\t\t\t\techo \"<input type=\\\"checkbox\\\" name=\\\"nulls[{$attrs->fields['attname']}]\\\"\",\n\t\t\t\t\t\t\tisset($_REQUEST['nulls'][$attrs->fields['attname']]) ? ' checked=\"checked\"' : '', \" /></td>\\n\";\n\t\t\t\t\t\t$elements++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\techo \"&nbsp;</td>\";\n\n\t\t\t\t\techo \"<td id=\\\"row_att_{$attrs->fields['attnum']}\\\" style=\\\"white-space:nowrap;\\\">\";\n\n\t\t\t\t\t$extras = array();\n\n\t\t\t\t\t// If the column allows nulls, then we put a JavaScript action on the data field to unset the\n\t\t\t\t\t// NULL checkbox as soon as anything is entered in the field.  We use the $elements variable to \n\t\t\t\t\t// keep track of which element offset we're up to.  We can't refer to the null checkbox by name\n\t\t\t\t\t// as it contains '[' and ']' characters.\n\t\t\t\t\tif (!$attrs->fields['attnotnull']) {\n\t\t\t\t\t\t$extras['onChange'] = 'elements[' . ($elements - 1) . '].checked = false;';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (($fksprops !== false) && isset($fksprops['byfield'][$attrs->fields['attnum']])) {\n\t\t\t\t\t\t$extras['id'] = \"attr_{$attrs->fields['attnum']}\";\n\t\t\t\t\t\t$extras['autocomplete'] = 'off';\n\t\t\t\t\t}\n\n\t\t\t\t\techo $data->printField(\"values[{$attrs->fields['attname']}]\", $rs->fields[$attrs->fields['attname']], $attrs->fields['type'], $extras);\n\n\t\t\t\t\techo \"</td>\";\n\t\t\t\t\t$elements++;\n\t\t\t\t\techo \"</tr>\\n\";\n\t\t\t\t\t$i++;\n\t\t\t\t\t$attrs->moveNext();\n\t\t\t\t}\n\t\t\t\techo \"</table>\\n\";\n\n\t\t\t\t$error = false;\n\t\t\t}\n\t\t\telseif ($rs->recordCount() != 1) {\n\t\t\t\techo \"<p>{$lang['strrownotunique']}</p>\\n\";\t\t\t\t\n\t\t\t}\n\t\t\telse {\n\t\t\t\techo \"<p>{$lang['strinvalidparam']}</p>\\n\";\n\t\t\t}\n\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"editrow\\\" />\\n\";\n\t\t\techo $misc->form;\n\t\t\tif (isset($_REQUEST['table']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"table\\\" value=\\\"\", htmlspecialchars($_REQUEST['table']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['subject']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"subject\\\" value=\\\"\", htmlspecialchars($_REQUEST['subject']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['query']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"query\\\" value=\\\"\", htmlspecialchars($_REQUEST['query']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['count']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"count\\\" value=\\\"\", htmlspecialchars($_REQUEST['count']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['return_url']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"return_url\\\" value=\\\"\", htmlspecialchars($_REQUEST['return_url']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['return_desc']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"return_desc\\\" value=\\\"\", htmlspecialchars($_REQUEST['return_desc']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"page\\\" value=\\\"\", htmlspecialchars($_REQUEST['page']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"sortkey\\\" value=\\\"\", htmlspecialchars($_REQUEST['sortkey']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"sortdir\\\" value=\\\"\", htmlspecialchars($_REQUEST['sortdir']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"strings\\\" value=\\\"\", htmlspecialchars($_REQUEST['strings']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"key\\\" value=\\\"\", htmlspecialchars(serialize($key)), \"\\\" />\\n\";\n\t\t\techo \"<p>\";\n\t\t\tif (!$error) echo \"<input type=\\\"submit\\\" name=\\\"save\\\" value=\\\"{$lang['strsave']}\\\" />\\n\";\n\t\t\techo \"<input type=\\\"submit\\\" name=\\\"cancel\\\" value=\\\"{$lang['strcancel']}\\\" />\\n\";\n\n\t\t\tif($fksprops !== false) {\n\t\t\t\tif ($conf['autocomplete'] != 'default off')\n\t\t\t\t\techo \"<input type=\\\"checkbox\\\" id=\\\"no_ac\\\" value=\\\"1\\\" checked=\\\"checked\\\" /><label for=\\\"no_ac\\\">{$lang['strac']}</label>\\n\";\n\t\t\t\telse\n\t\t\t\t\techo \"<input type=\\\"checkbox\\\" id=\\\"no_ac\\\" value=\\\"0\\\" /><label for=\\\"no_ac\\\">{$lang['strac']}</label>\\n\";\n\t\t\t}\n\n\t\t\techo \"</p>\\n\";\n\t\t\techo \"</form>\\n\";\n\t\t}\n\t\telse {\n\t\t\tif (!isset($_POST['values'])) $_POST['values'] = array();\n\t\t\tif (!isset($_POST['nulls'])) $_POST['nulls'] = array();\n\t\t\t\n\t\t\t$status = $data->editRow($_POST['table'], $_POST['values'], $_POST['nulls'], \n\t\t\t\t$_POST['format'], $_POST['types'], unserialize($_POST['key']));\n\t\t\tif ($status == 0)\n\t\t\t\tdoBrowse($lang['strrowupdated']);\n\t\t\telseif ($status == -2)\n\t\t\t\tdoEditRow(true, $lang['strrownotunique']);\n\t\t\telse\n\t\t\t\tdoEditRow(true, $lang['strrowupdatedbad']);\n\t\t}\n\n\t}\t\n\n\t/**\n\t * Show confirmation of drop and perform actual drop\n\t */\n\tfunction doDelRow($confirm) {\n\t\tglobal $data, $misc;\n\t\tglobal $lang;\n\n\t\tif ($confirm) {\n\t\t\t$misc->printTrail($_REQUEST['subject']);\n\t\t\t$misc->printTitle($lang['strdeleterow']);\n\n\t\t\techo \"<p>{$lang['strconfdeleterow']}</p>\\n\";\n\t\t\t\n\t\t\techo \"<form action=\\\"display.php\\\" method=\\\"post\\\">\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"action\\\" value=\\\"delrow\\\" />\\n\";\n\t\t\techo $misc->form;\n\t\t\tif (isset($_REQUEST['table']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"table\\\" value=\\\"\", htmlspecialchars($_REQUEST['table']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['subject']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"subject\\\" value=\\\"\", htmlspecialchars($_REQUEST['subject']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['query']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"query\\\" value=\\\"\", htmlspecialchars($_REQUEST['query']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['count']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"count\\\" value=\\\"\", htmlspecialchars($_REQUEST['count']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['return_url']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"return_url\\\" value=\\\"\", htmlspecialchars($_REQUEST['return_url']), \"\\\" />\\n\";\n\t\t\tif (isset($_REQUEST['return_desc']))\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"return_desc\\\" value=\\\"\", htmlspecialchars($_REQUEST['return_desc']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"page\\\" value=\\\"\", htmlspecialchars($_REQUEST['page']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"sortkey\\\" value=\\\"\", htmlspecialchars($_REQUEST['sortkey']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"sortdir\\\" value=\\\"\", htmlspecialchars($_REQUEST['sortdir']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"strings\\\" value=\\\"\", htmlspecialchars($_REQUEST['strings']), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"key\\\" value=\\\"\", htmlspecialchars(serialize($_REQUEST['key'])), \"\\\" />\\n\";\n\t\t\techo \"<input type=\\\"submit\\\" name=\\\"yes\\\" value=\\\"{$lang['stryes']}\\\" />\\n\";\n\t\t\techo \"<input type=\\\"submit\\\" name=\\\"no\\\" value=\\\"{$lang['strno']}\\\" />\\n\";\n\t\t\techo \"</form>\\n\";\n\t\t}\n\t\telse {\n\t\t\t$status = $data->deleteRow($_POST['table'], unserialize($_POST['key']));\n\t\t\tif ($status == 0)\n\t\t\t\tdoBrowse($lang['strrowdeleted']);\n\t\t\telseif ($status == -2)\n\t\t\t\tdoBrowse($lang['strrownotunique']);\n\t\t\telse\t\t\t\n\t\t\t\tdoBrowse($lang['strrowdeletedbad']);\n\t\t}\n\t\t\n\t}\n\t\n\t/* build & return the FK information data structure \n\t * used when deciding if a field should have a FK link or not*/\n\tfunction &getFKInfo() {\n\t\tglobal $data, $misc, $lang;\n\t\t \n\t\t// Get the foreign key(s) information from the current table\n\t\t$fkey_information = array('byconstr' => array(), 'byfield' => array());\n\n\t\tif (isset($_REQUEST['table'])) {\n\t\t\t$constraints = $data->getConstraintsWithFields($_REQUEST['table']);\n\t\t\tif ($constraints->recordCount() > 0) {\n\n\t\t\t\t/* build the common parts of the url for the FK  */\n\t\t\t\t$fk_return_url = \"{$misc->href}&amp;subject=table&amp;table=\". urlencode($_REQUEST['table']);\n\t\t\t\tif (isset($_REQUEST['page'])) $fk_return_url .= \"&amp;page=\" . urlencode($_REQUEST['page']);\n\t\t\t\tif (isset($_REQUEST['query'])) $fk_return_url .= \"&amp;query=\" . urlencode($_REQUEST['query']);\n\t\t\t\tif (isset($_REQUEST['search_path'])) $fk_return_url .= \"&amp;search_path=\" . urlencode($_REQUEST['search_path']);\n\n\t\t\t\t/* yes, we double urlencode fk_return_url so parameters here don't \n\t\t\t\t * overwrite real one when included in the final url */\n\t\t\t\t$fkey_information['common_url'] = $misc->getHREF('schema') .'&amp;subject=table&amp;return_url=display.php?'\n\t\t\t\t\t. urlencode($fk_return_url) .'&amp;return_desc='. urlencode($lang['strback']);\n\n\t\t\t\t/* build the FK constraints data structure */\n\t\t\t\twhile (!$constraints->EOF) {\n\t\t\t\t\t$constr =& $constraints->fields;\n\t\t\t\t\tif ($constr['contype'] == 'f') {\n\n\t\t\t\t\t\tif (!isset($fkey_information['byconstr'][$constr['conid']])) {\n\t\t\t\t\t\t\t$fkey_information['byconstr'][$constr['conid']] = array (\n\t\t\t\t\t\t\t\t'url_data' => 'table='. urlencode($constr['f_table']) .'&amp;schema='. urlencode($constr['f_schema']),\n\t\t\t\t\t\t\t\t'fkeys' => array(),\n\t\t\t\t\t\t\t\t'consrc' => $constr['consrc']\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$fkey_information['byconstr'][$constr['conid']]['fkeys'][$constr['p_field']] = $constr['f_field'];\n\n\t\t\t\t\t\tif (!isset($fkey_information['byfield'][$constr['p_field']]))\n\t\t\t\t\t\t\t$fkey_information['byfield'][$constr['p_field']] = array();\n\n\t\t\t\t\t\t$fkey_information['byfield'][$constr['p_field']][] = $constr['conid'];\n\t\t\t\t\t}\n\t\t\t\t\t$constraints->moveNext();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $fkey_information;\n\t}\n\n\t/* Print table header cells \n\t * @param $sortLink must be urlencoded already\n\t * */\n\tfunction printTableHeaderCells(&$rs, $sortLink, $withOid) {\n\t\tglobal $misc, $data, $conf;\n\t\t$j = 0;\n\n\t\tforeach ($rs->fields as $k => $v) {\n\n\t\t\tif (($k === $data->id) && ( !($withOid && $conf['show_oids']) )) {\n\t\t\t\t$j++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$finfo = $rs->fetchField($j);\n\n\t\t\tif ($sortLink === false) {\n\t\t\t\techo \"<th class=\\\"data\\\">\", $misc->printVal($finfo->name), \"</th>\\n\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\techo \"<th class=\\\"data\\\"><a href=\\\"display.php?{$sortLink}&amp;sortkey=\", ($j + 1), \"&amp;sortdir=\";\n\t\t\t\t// Sort direction opposite to current direction, unless it's currently ''\n\t\t\t\techo ($_REQUEST['sortdir'] == 'asc' && $_REQUEST['sortkey'] == ($j + 1)) ? 'desc' : 'asc';\n\t\t\t\techo \"&amp;strings=\", urlencode($_REQUEST['strings']), \n\t\t\t\t\t\"&amp;page=\" . urlencode($_REQUEST['page']), \"\\\">\", \n\t\t\t\t\t$misc->printVal($finfo->name), \"</a></th>\\n\";\n\t\t\t}\n\t\t\t$j++;\n\t\t}\n\n\t\treset($rs->fields);\n\t}\n\n\t/* Print data-row cells */\n\tfunction printTableRowCells(&$rs, &$fkey_information, $withOid) {\n\t\tglobal $data, $misc, $conf;\n\t\t$j = 0;\n\t\t\n\t\tif (!isset($_REQUEST['strings'])) $_REQUEST['strings'] = 'collapsed';\n\n\t\tforeach ($rs->fields as $k => $v) {\n\t\t\t$finfo = $rs->fetchField($j++);\n\n\t\t\tif (($k === $data->id) && ( !($withOid && $conf['show_oids']) )) continue;\n\t\t\telseif ($v !== null && $v == '') echo \"<td>&nbsp;</td>\";\n\t\t\telse {\n\t\t\t\techo \"<td style=\\\"white-space:nowrap;\\\">\";\n\n\t\t\t\tif (($v !== null) && isset($fkey_information['byfield'][$k])) {\n\t\t\t\t\tforeach ($fkey_information['byfield'][$k] as $conid) {\n\n\t\t\t\t\t\t$query_params = $fkey_information['byconstr'][$conid]['url_data'];\n\n\t\t\t\t\t\tforeach ($fkey_information['byconstr'][$conid]['fkeys'] as $p_field => $f_field) {\n\t\t\t\t\t\t\t$query_params .= '&amp;'. urlencode(\"fkey[{$f_field}]\") .'='. urlencode($rs->fields[$p_field]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/* $fkey_information['common_url'] is already urlencoded */\n\t\t\t\t\t\t$query_params .= '&amp;'. $fkey_information['common_url'];\n\t\t\t\t\t\techo \"<div style=\\\"display:inline-block;\\\">\";\n\t\t\t\t\t\techo \"<a class=\\\"fk fk_\". htmlentities($conid) .\"\\\" href=\\\"display.php?{$query_params}\\\">\";\n\t\t\t\t\t\techo \"<img src=\\\"\".$misc->icon('ForeignKey').\"\\\" style=\\\"vertical-align:middle;\\\" alt=\\\"[fk]\\\" title=\\\"\"\n\t\t\t\t\t\t\t. htmlentities($fkey_information['byconstr'][$conid]['consrc'])\n\t\t\t\t\t\t\t.\"\\\" />\";\n\t\t\t\t\t\techo \"</a>\";\n\t\t\t\t\t\techo \"</div>\";\n\t\t\t\t\t}\n\t\t\t\t\techo $misc->printVal($v, $finfo->type, array('null' => true, 'clip' => ($_REQUEST['strings']=='collapsed'), 'class' => 'fk_value'));\n\t\t\t\t} else {\n\t\t\t\t\techo $misc->printVal($v, $finfo->type, array('null' => true, 'clip' => ($_REQUEST['strings']=='collapsed')));\n\t\t\t\t}\n\t\t\t\techo \"</td>\";\n\t\t\t}\n\t\t}\n\t}\n\n\t/* Print the FK row, used in ajax requests */\n\tfunction doBrowseFK() {\n\t\tglobal $data, $misc, $lang;\n\n\t\t$ops = array();\n\t\tforeach($_REQUEST['fkey'] as $x => $y) {\n\t\t\t$ops[$x] = '=';\n\t\t}\n\t\t$query = $data->getSelectSQL($_REQUEST['table'], array(), $_REQUEST['fkey'], $ops);\n\t\t$_REQUEST['query'] = $query;\n\n\t\t$fkinfo =& getFKInfo();\n\n\t\t$max_pages = 1;\n\t\t// Retrieve page from query.  $max_pages is returned by reference.\n\t\t$rs = $data->browseQuery('SELECT', $_REQUEST['table'], $_REQUEST['query'],  \n\t\t\tnull, null, 1, 1, $max_pages);\n\n\t\techo \"<a href=\\\"\\\" style=\\\"display:table-cell;\\\" class=\\\"fk_delete\\\"><img alt=\\\"[delete]\\\" src=\\\"\". $misc->icon('Delete') .\"\\\" /></a>\\n\";\n\t\techo \"<div style=\\\"display:table-cell;\\\">\";\n\n\t\tif (is_object($rs) && $rs->recordCount() > 0) {\n\t\t\t/* we are browsing a referenced table here\n\t\t\t * we should show OID if show_oids is true\n\t\t\t * so we give true to withOid in functions bellow\n\t\t\t * as 3rd paramter */\n\t\t\n\t\t\techo \"<table><tr>\";\n\t\t\t\tprintTableHeaderCells($rs, false, true);\n\t\t\techo \"</tr>\";\n\t\t\techo \"<tr class=\\\"data1\\\">\\n\";\n\t\t\t\tprintTableRowCells($rs, $fkinfo, true);\n\t\t\techo \"</tr>\\n\";\n\t\t\techo \"</table>\\n\";\n\t\t}\n\t\telse\n\t\t\techo $lang['strnodata'];\n\n\t\techo \"</div>\";\n\n\t\texit;\n\t}\n\n\t/** \n\t * Displays requested data\n\t */\n\tfunction doBrowse($msg = '') {\n\t\tglobal $data, $conf, $misc, $lang;\n\n\t\t$save_history = false;\n\t\t// If current page is not set, default to first page\n\t\tif (!isset($_REQUEST['page']))\n\t\t\t$_REQUEST['page'] = 1;\n\t\tif (!isset($_REQUEST['nohistory']))\n\t\t\t$save_history = true;\n\t\t\n\t\tif (isset($_REQUEST['subject'])) {\n\t\t\t$subject = $_REQUEST['subject'];\n\t\t\tif (isset($_REQUEST[$subject])) $object = $_REQUEST[$subject];\n\t\t}\n\t\telse {\n\t\t\t$subject = '';\n\t\t}\n\n\t\t$misc->printTrail(isset($subject) ? $subject : 'database');\n\n\t\t/* This code is used when browsing FK in pure-xHTML (without js) */\n\t\tif (isset($_REQUEST['fkey'])) {\n\t\t\t$ops = array();\n\t\t\tforeach($_REQUEST['fkey'] as $x => $y) {\n\t\t\t\t$ops[$x] = '=';\n\t\t\t}\n\t\t\t$query = $data->getSelectSQL($_REQUEST['table'], array(), $_REQUEST['fkey'], $ops);\n\t\t\t$_REQUEST['query'] = $query;\n\t\t}\n\t\t\n\t\tif (isset($object)) {\n\t\t\tif (isset($_REQUEST['query'])) {\n\t\t\t\t$_SESSION['sqlquery'] = $_REQUEST['query'];\n\t\t\t\t$misc->printTitle($lang['strselect']);\n\t\t\t\t$type = 'SELECT';\n\t\t\t}\n\t\t\telse if (isset($_REQUEST['report'])) {\n\t\t\t\t$misc->printTitle($lang['strselect']);\n\t\t\t\t$type = 'SELECT';\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$misc->printTitle($lang['strbrowse']);\n\t\t\t\t$type = 'TABLE';\n\t\t\t}\n\t\t} else {\n\t\t\t$misc->printTitle($lang['strqueryresults']);\n\t\t\t$type = 'QUERY';\n\t\t}\n\n\t\t$misc->printMsg($msg);\n\n\t\t// If 'sortkey' is not set, default to ''\n\t\tif (!isset($_REQUEST['sortkey'])) $_REQUEST['sortkey'] = '';\n\n\t\t// If 'sortdir' is not set, default to ''\n\t\tif (!isset($_REQUEST['sortdir'])) $_REQUEST['sortdir'] = '';\n\t\n\t\t// If 'strings' is not set, default to collapsed \n\t\tif (!isset($_REQUEST['strings'])) $_REQUEST['strings'] = 'collapsed';\n\t\n\t\t// Fetch unique row identifier, if this is a table browse request.\n\t\tif (isset($object))\n\t\t\t$key = $data->getRowIdentifier($object);\n\t\telse\n\t\t\t$key = array();\n\t\t\n\t\t// Set the schema search path\n\t\tif (isset($_REQUEST['search_path'])) {\n\t\t\tif ($data->setSearchPath(array_map('trim',explode(',',$_REQUEST['search_path']))) != 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Retrieve page from query.  $max_pages is returned by reference.\n\t\t$rs = $data->browseQuery($type, \n\t\t\tisset($object) ? $object : null, \n\t\t\tisset($_SESSION['sqlquery']) ? $_SESSION['sqlquery'] : null,\n\t\t\t$_REQUEST['sortkey'], $_REQUEST['sortdir'], $_REQUEST['page'],\n\t\t\t$conf['max_rows'], $max_pages);\n\n\t\t$fkey_information =& getFKInfo();\n\n\t\t// Build strings for GETs\n\t\t$gets = $misc->href;\n\t\tif (isset($object)) $gets .= \"&amp;\" . urlencode($subject) . '=' . urlencode($object);\n\t\tif (isset($subject)) $gets .= \"&amp;subject=\" . urlencode($subject);\n\t\tif (isset($_REQUEST['query'])) $gets .= \"&amp;query=\" . urlencode($_REQUEST['query']);\n\t\tif (isset($_REQUEST['report'])) $gets .= \"&amp;report=\" . urlencode($_REQUEST['report']);\n\t\tif (isset($_REQUEST['count'])) $gets .= \"&amp;count=\" . urlencode($_REQUEST['count']);\n\t\tif (isset($_REQUEST['return_url'])) $gets .= \"&amp;return_url=\" . urlencode($_REQUEST['return_url']);\n\t\tif (isset($_REQUEST['return_desc'])) $gets .= \"&amp;return_desc=\" . urlencode($_REQUEST['return_desc']);\n\t\tif (isset($_REQUEST['search_path'])) $gets .= \"&amp;search_path=\" . urlencode($_REQUEST['search_path']);\n\t\tif (isset($_REQUEST['table'])) $gets .= \"&amp;table=\" . urlencode($_REQUEST['table']);\n\t\t\n\t\t// This string just contains sort info\n\t\t$getsort = \"sortkey=\" . urlencode($_REQUEST['sortkey']) .\n\t\t\t\"&amp;sortdir=\" . urlencode($_REQUEST['sortdir']);\n\n\t\tif ($save_history && is_object($rs) && ($type == 'QUERY')) //{\n\t\t\t$misc->saveScriptHistory($_REQUEST['query']);\n\n\t\tif (is_object($rs) && $rs->recordCount() > 0) {\n\t\t\t// Show page navigation\n\t\t\t$misc->printPages($_REQUEST['page'], $max_pages, \"display.php?page=%s&amp;{$gets}&amp;{$getsort}&amp;nohistory=t&amp;strings=\" . urlencode($_REQUEST['strings']));\n\n\t\t\techo \"<table id=\\\"data\\\">\\n<tr>\";\n\n\t\t\t// Check that the key is actually in the result set.  This can occur for select\n\t\t\t// operations where the key fields aren't part of the select.  XXX:  We should\n\t\t\t// be able to support this, somehow.\n\t\t\tforeach ($key as $v) {\n\t\t\t\t// If a key column is not found in the record set, then we\n\t\t\t\t// can't use the key.\n\t\t\t\tif (!in_array($v, array_keys($rs->fields))) {\n\t\t\t\t\t$key = array();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Display edit and delete actions if we have a key\n\t\t\tif (sizeof($key) > 0)\n\t\t\t\techo \"<th colspan=\\\"2\\\" class=\\\"data\\\">{$lang['stractions']}</th>\\n\";\n\n\t\t\t/* we show OIDs only if we are in TABLE or SELECT type browsing */\n\t\t\tprintTableHeaderCells($rs, $gets, isset($object));\n\n\t\t\techo \"</tr>\\n\";\n\n\t\t\t$i = 0;\t\t\n\t\t\treset($rs->fields);\n\t\t\twhile (!$rs->EOF) {\n\t\t\t\t$id = (($i % 2) == 0 ? '1' : '2');\n\t\t\t\techo \"<tr class=\\\"data{$id}\\\">\\n\";\n\t\t\t\t// Display edit and delete links if we have a key\n\t\t\t\tif (sizeof($key) > 0) {\n\t\t\t\t\t$key_str = '';\n\t\t\t\t\t$has_nulls = false;\n\t\t\t\t\tforeach ($key as $v) {\n\t\t\t\t\t\tif ($rs->fields[$v] === null) {\n\t\t\t\t\t\t\t$has_nulls = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($key_str != '') $key_str .= '&amp;';\n\t\t\t\t\t\t$key_str .= urlencode(\"key[{$v}]\") . '=' . urlencode($rs->fields[$v]);\n\t\t\t\t\t}\n\t\t\t\t\tif ($has_nulls) {\n\t\t\t\t\t\techo \"<td colspan=\\\"2\\\">&nbsp;</td>\\n\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\techo \"<td class=\\\"opbutton{$id}\\\"><a href=\\\"display.php?action=confeditrow&amp;strings=\", \n\t\t\t\t\t\t\turlencode($_REQUEST['strings']), \"&amp;page=\", \n\t\t\t\t\t\t\turlencode($_REQUEST['page']), \"&amp;{$key_str}&amp;{$gets}&amp;{$getsort}\\\">{$lang['stredit']}</a></td>\\n\";\n\t\t\t\t\t\techo \"<td class=\\\"opbutton{$id}\\\"><a href=\\\"display.php?action=confdelrow&amp;strings=\", \n\t\t\t\t\t\t\turlencode($_REQUEST['strings']), \"&amp;page=\", \n\t\t\t\t\t\t\turlencode($_REQUEST['page']), \"&amp;{$key_str}&amp;{$gets}&amp;{$getsort}\\\">{$lang['strdelete']}</a></td>\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprint printTableRowCells($rs, $fkey_information, isset($object));\n\n\t\t\t\techo \"</tr>\\n\";\n\t\t\t\t$rs->moveNext();\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\techo \"</table>\\n\";\n\n\t\t\techo \"<p>\", $rs->recordCount(), \" {$lang['strrows']}</p>\\n\";\n\t\t\t// Show page navigation\n\t\t\t$misc->printPages($_REQUEST['page'], $max_pages, \"display.php?page=%s&amp;{$gets}&amp;{$getsort}&amp;strings=\" . urlencode($_REQUEST['strings']));\n\t\t}\n\t\telse echo \"<p>{$lang['strnodata']}</p>\\n\";\n\n\t\t// Navigation links\t\n\t\techo \"<ul class=\\\"navlink\\\">\\n\";\n\n\t\t// Return\n\t\tif (isset($_REQUEST['return_url']) && isset($_REQUEST['return_desc']))\n\t\t\techo \"\\t<li><a href=\\\"\". htmlspecialchars($_REQUEST['return_url']) .\"\\\">\". htmlspecialchars($_REQUEST['return_desc']) .\"</a></li>\\n\";\n\n\t\t// Edit SQL link\n\t\tif (isset($_REQUEST['query']))\n\t\t\techo \"\\t<li><a href=\\\"database.php?{$misc->href}&amp;action=sql&amp;paginate=on&amp;query=\",\n\t\t\t\turlencode($_REQUEST['query']), \"\\\">{$lang['streditsql']}</a></li>\\n\";\n\n\t\t// Expand/Collapse\n\t\tif ($_REQUEST['strings'] == 'expanded')\n\t\t\techo \"\\t<li><a href=\\\"display.php?{$gets}&amp;{$getsort}&amp;strings=collapsed&amp;page=\", \n\t\t\t\turlencode($_REQUEST['page']), \"\\\">{$lang['strcollapse']}</a></li>\\n\";\n\t\telse\n\t\t\techo \"\\t<li><a href=\\\"display.php?{$gets}&amp;{$getsort}&amp;strings=expanded&amp;page=\", \n\t\t\t\turlencode($_REQUEST['page']), \"\\\">{$lang['strexpand']}</a></li>\\n\";\n\n\t\t// Create report\n\t\tif (isset($_REQUEST['query']) && ($subject !== 'report') && $conf['show_reports'] && isset($rs) && is_object($rs) && $rs->recordCount() > 0)\n\t\t\techo \"\\t<li><a href=\\\"reports.php?{$misc->href}&amp;action=create&amp;report_sql=\",\n\t\t\t\turlencode($_REQUEST['query']), \"&amp;paginate=\", (isset($_REQUEST['paginate'])? urlencode($_REQUEST['paginate']):'f'), \"\\\">{$lang['strcreatereport']}</a></li>\\n\";\n\n\t\t// Create view and download\n\t\tif (isset($_REQUEST['query']) && isset($rs) && is_object($rs) && $rs->recordCount() > 0) {\n\t\t\t// Report views don't set a schema, so we need to disable create view in that case\n\t\t\tif (isset($_REQUEST['schema'])) \n\t\t\t\techo \"\\t<li><a href=\\\"views.php?action=create&amp;formDefinition=\",\n\t\t\t\t\turlencode($_REQUEST['query']), \"&amp;{$misc->href}\\\">{$lang['strcreateview']}</a></li>\\n\";\n\t\t\techo \"\\t<li><a href=\\\"dataexport.php?query=\", urlencode($_REQUEST['query']);\n\t\t\tif (isset($_REQUEST['search_path']))\n\t\t\t\techo \"&amp;search_path=\", urlencode($_REQUEST['search_path']);\n\t\t\techo \"&amp;{$misc->href}\\\">{$lang['strdownload']}</a></li>\\n\";\n\t\t}\n\n\t\t// Insert\n\t\tif (isset($object) && (isset($subject) && $subject == 'table'))\n\t\t\techo \"\\t<li><a href=\\\"tables.php?action=confinsertrow&amp;table=\",\n\t\t\t\turlencode($object), \"&amp;{$misc->href}\\\">{$lang['strinsert']}</a></li>\\n\";\n\n\t\t// Refresh\n\t\techo \"\\t<li><a href=\\\"display.php?{$gets}&amp;{$getsort}&amp;strings=\", urlencode($_REQUEST['strings']), \n\t\t\t\"&amp;page=\" . urlencode($_REQUEST['page']),\n\t\t\t\"\\\">{$lang['strrefresh']}</a></li>\\n\";\n\t\techo \"</ul>\\n\";\n\t}\n\n\n\t/* shortcuts: this function exit the script for ajax purpose */\n\tif ($action == 'dobrowsefk') {\n\t\tdoBrowseFK();\n\t}\n\n\t$scripts  = \"<script src=\\\"libraries/js/jquery.js\\\" type=\\\"text/javascript\\\"></script>\\n\";\n\t$scripts .= \"<script src=\\\"js/display.js\\\" type=\\\"text/javascript\\\"></script>\";\n\n\t$scripts .= \"<script type=\\\"text/javascript\\\">\\n\";\n\t$scripts .= \"var Display = {\\n\";\n\t$scripts .= \"errmsg: '\". str_replace(\"'\", \"\\'\", $lang['strconnectionfail']) .\"'\\n\";\n\t$scripts .= \"};\\n\";\n\t$scripts .= \"</script>\\n\";\n\n\t// If a table is specified, then set the title differently\n\tif (isset($_REQUEST['subject']) && isset($_REQUEST[$_REQUEST['subject']]))\n\t\t$misc->printHeader($lang['strtables'], $scripts);\n\telse\t\n\t\t$misc->printHeader($lang['strqueryresults']);\n\n\t$misc->printBody();\n\n\tswitch ($action) {\n\t\tcase 'editrow':\n\t\t\tif (isset($_POST['save'])) doEditRow(false);\n\t\t\telse doBrowse();\n\t\t\tbreak;\n\t\tcase 'confeditrow':\n\t\t\tdoEditRow(true);\n\t\t\tbreak;\n\t\tcase 'delrow':\n\t\t\tif (isset($_POST['yes'])) doDelRow(false);\n\t\t\telse doBrowse();\n\t\t\tbreak;\n\t\tcase 'confdelrow':\n\t\t\tdoDelRow(true);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tdoBrowse();\n\t\t\tbreak;\n\t}\n\n\t$misc->printFooter();\n?>\n"], "filenames": ["HISTORY", "classes/Misc.php", "display.php"], "buggy_code_start_loc": [44, 401, 581], "buggy_code_end_loc": [45, 402, 582], "fixing_code_start_loc": [44, 401, 581], "fixing_code_end_loc": [45, 402, 582], "type": "CWE-79", "message": "Multiple cross-site scripting (XSS) vulnerabilities in phpPgAdmin before 5.0.3 allow remote attackers to inject arbitrary web script or HTML via (1) a web page title, related to classes/Misc.php; or the (2) return_url or (3) return_desc parameter to display.php.", "other": {"cve": {"id": "CVE-2011-3598", "sourceIdentifier": "secalert@redhat.com", "published": "2011-10-08T02:52:52.473", "lastModified": "2014-05-16T03:56:11.550", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Multiple cross-site scripting (XSS) vulnerabilities in phpPgAdmin before 5.0.3 allow remote attackers to inject arbitrary web script or HTML via (1) a web page title, related to classes/Misc.php; or the (2) return_url or (3) return_desc parameter to display.php."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de ejecuci\u00f3n de secuencias de comandos en sitios cruzados (XSS) en phpPgAdmin anteriores a v5.0.3, permite a atacantes remotos inyectar secuencias de comandos web o HTML a trav\u00e9s de (1) t\u00edtulo de la p\u00e1gina web,relativo a classes/Misc.php; o el par\u00e1metro (2) return_url o (3) return_desc sobredisplay.php."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phppgadmin:phppgadmin:*:*:*:*:*:*:*:*", "versionEndIncluding": "5.0.2", "matchCriteriaId": "2B7A7773-6590-4486-A2F1-5B4D699FE779"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phppgadmin:phppgadmin:2.2:*:*:*:*:*:*:*", "matchCriteriaId": "6B268F49-4F3A-4D05-8079-05EB75E1AE8C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phppgadmin:phppgadmin:2.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "0F2CCA02-7AE3-4CF8-A514-ABCC16CDF435"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phppgadmin:phppgadmin:3.1:*:*:*:*:*:*:*", "matchCriteriaId": "E23D4530-0B63-459C-B7F2-84F5866CCA04"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phppgadmin:phppgadmin:3.2:*:*:*:*:*:*:*", "matchCriteriaId": "47A293B3-3E81-4B7E-8D24-EC1B57C2CD83"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phppgadmin:phppgadmin:3.3:*:*:*:*:*:*:*", "matchCriteriaId": "1893B7A4-D303-4DA7-B3C5-264413A5D473"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phppgadmin:phppgadmin:3.4:*:*:*:*:*:*:*", "matchCriteriaId": "974D3D46-7DEB-45E5-B615-D95C2355F6DC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phppgadmin:phppgadmin:3.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "A913E0DA-8076-4850-B218-F65C8A86F370"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phppgadmin:phppgadmin:3.5:*:*:*:*:*:*:*", "matchCriteriaId": "81B74FF6-8280-4A14-B988-F58FB7915232"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phppgadmin:phppgadmin:3.5.2:*:*:*:*:*:*:*", "matchCriteriaId": "A673AB66-EE9C-4873-873B-72FA25F3ADB1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phppgadmin:phppgadmin:3.5.3:*:*:*:*:*:*:*", "matchCriteriaId": "45DAC8C2-1469-41EA-B155-A9F24A46DD56"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phppgadmin:phppgadmin:4.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "DEA8E6BB-8BEB-4FDF-8935-EACED78E7EA4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phppgadmin:phppgadmin:4.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "72BD7FEB-B23E-43BE-8682-AD70C4D7BE28"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phppgadmin:phppgadmin:4.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "1D79FAC8-65ED-461C-9FFF-5010D8BAC6BB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phppgadmin:phppgadmin:4.2.3:*:*:*:*:*:*:*", "matchCriteriaId": "7330FE3A-45FF-49D4-A6A6-4305A112E1D2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phppgadmin:phppgadmin:5.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "8D802197-3B55-478E-8DB9-7ADAD09A9060"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phppgadmin:phppgadmin:5.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "BFD50410-0906-4FE6-9BB2-5757874E5381"}]}]}], "references": [{"url": "http://freshmeat.net/projects/phppgadmin/releases/336969", "source": "secalert@redhat.com"}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2011-October/067843.html", "source": "secalert@redhat.com"}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2011-October/067846.html", "source": "secalert@redhat.com"}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2011-October/068009.html", "source": "secalert@redhat.com"}, {"url": "http://lists.opensuse.org/opensuse-updates/2012-04/msg00033.html", "source": "secalert@redhat.com"}, {"url": "http://sourceforge.net/mailarchive/forum.php?thread_name=4E897F6C.90905%40free.fr&forum_name=phppgadmin-news", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "http://www.openwall.com/lists/oss-security/2011/10/04/1", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "http://www.openwall.com/lists/oss-security/2011/10/04/10", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "http://www.securityfocus.com/bid/49914", "source": "secalert@redhat.com"}, {"url": "https://bugs.gentoo.org/show_bug.cgi?id=385505", "source": "secalert@redhat.com"}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=743205", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "https://github.com/phppgadmin/phppgadmin/commit/1df248203de055f97e092b50b1dd9643ccb73842", "source": "secalert@redhat.com", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/phppgadmin/phppgadmin/commit/1df248203de055f97e092b50b1dd9643ccb73842"}}