{"buggy_code": ["\"\"\"Base Tornado handlers for the Jupyter server.\"\"\"\n\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nimport datetime\nimport functools\nimport ipaddress\nimport json\nimport mimetypes\nimport os\nimport re\nimport sys\nimport traceback\nimport types\nimport warnings\nfrom http.client import responses\nfrom http.cookies import Morsel\nfrom urllib.parse import urlparse\nfrom jinja2 import TemplateNotFound\nfrom tornado import web, gen, escape, httputil\nfrom tornado.log import app_log\nimport prometheus_client\n\nfrom jupyter_server._sysinfo import get_sys_info\n\nfrom traitlets.config import Application\nfrom ipython_genutils.path import filefind\nfrom ipython_genutils.py3compat import string_types\n\nimport jupyter_server\nfrom jupyter_server._tz import utcnow\nfrom jupyter_server.i18n import combine_translations\nfrom jupyter_server.utils import is_hidden, url_path_join, url_is_absolute, url_escape\nfrom jupyter_server.services.security import csp_report_uri\n\n#-----------------------------------------------------------------------------\n# Top-level handlers\n#-----------------------------------------------------------------------------\nnon_alphanum = re.compile(r'[^A-Za-z0-9]')\n\n_sys_info_cache = None\ndef json_sys_info():\n    global _sys_info_cache\n    if _sys_info_cache is None:\n        _sys_info_cache = json.dumps(get_sys_info())\n    return _sys_info_cache\n\ndef log():\n    if Application.initialized():\n        return Application.instance().log\n    else:\n        return app_log\n\nclass AuthenticatedHandler(web.RequestHandler):\n    \"\"\"A RequestHandler with an authenticated user.\"\"\"\n\n    @property\n    def content_security_policy(self):\n        \"\"\"The default Content-Security-Policy header\n\n        Can be overridden by defining Content-Security-Policy in settings['headers']\n        \"\"\"\n        if 'Content-Security-Policy' in self.settings.get('headers', {}):\n            # user-specified, don't override\n            return self.settings['headers']['Content-Security-Policy']\n\n        return '; '.join([\n            \"frame-ancestors 'self'\",\n            # Make sure the report-uri is relative to the base_url\n            \"report-uri \" + self.settings.get('csp_report_uri', url_path_join(self.base_url, csp_report_uri)),\n        ])\n\n    def set_default_headers(self):\n        headers = {}\n        headers.update(self.settings.get('headers', {}))\n\n        headers[\"Content-Security-Policy\"] = self.content_security_policy\n\n        # Allow for overriding headers\n        for header_name, value in headers.items():\n            try:\n                self.set_header(header_name, value)\n            except Exception as e:\n                # tornado raise Exception (not a subclass)\n                # if method is unsupported (websocket and Access-Control-Allow-Origin\n                # for example, so just ignore)\n                self.log.debug(e)\n\n    def force_clear_cookie(self, name, path=\"/\", domain=None):\n        \"\"\"Deletes the cookie with the given name.\n\n        Tornado's cookie handling currently (Jan 2018) stores cookies in a dict\n        keyed by name, so it can only modify one cookie with a given name per\n        response. The browser can store multiple cookies with the same name\n        but different domains and/or paths. This method lets us clear multiple\n        cookies with the same name.\n\n        Due to limitations of the cookie protocol, you must pass the same\n        path and domain to clear a cookie as were used when that cookie\n        was set (but there is no way to find out on the server side\n        which values were used for a given cookie).\n        \"\"\"\n        name = escape.native_str(name)\n        expires = datetime.datetime.utcnow() - datetime.timedelta(days=365)\n\n        morsel = Morsel()\n        morsel.set(name, '', '\"\"')\n        morsel['expires'] = httputil.format_timestamp(expires)\n        morsel['path'] = path\n        if domain:\n            morsel['domain'] = domain\n        self.add_header(\"Set-Cookie\", morsel.OutputString())\n\n    def clear_login_cookie(self):\n        cookie_options = self.settings.get('cookie_options', {})\n        path = cookie_options.setdefault('path', self.base_url)\n        self.clear_cookie(self.cookie_name, path=path)\n        if path and path != '/':\n            # also clear cookie on / to ensure old cookies are cleared\n            # after the change in path behavior.\n            # N.B. This bypasses the normal cookie handling, which can't update\n            # two cookies with the same name. See the method above.\n            self.force_clear_cookie(self.cookie_name)\n\n    def get_current_user(self):\n        if self.login_handler is None:\n            return 'anonymous'\n        return self.login_handler.get_user(self)\n\n    def skip_check_origin(self):\n        \"\"\"Ask my login_handler if I should skip the origin_check\n\n        For example: in the default LoginHandler, if a request is token-authenticated,\n        origin checking should be skipped.\n        \"\"\"\n        if self.request.method == 'OPTIONS':\n            # no origin-check on options requests, which are used to check origins!\n            return True\n        if self.login_handler is None or not hasattr(self.login_handler, 'should_check_origin'):\n            return False\n        return not self.login_handler.should_check_origin(self)\n\n    @property\n    def token_authenticated(self):\n        \"\"\"Have I been authenticated with a token?\"\"\"\n        if self.login_handler is None or not hasattr(self.login_handler, 'is_token_authenticated'):\n            return False\n        return self.login_handler.is_token_authenticated(self)\n\n    @property\n    def cookie_name(self):\n        default_cookie_name = non_alphanum.sub('-', 'username-{}'.format(\n            self.request.host\n        ))\n        return self.settings.get('cookie_name', default_cookie_name)\n\n    @property\n    def logged_in(self):\n        \"\"\"Is a user currently logged in?\"\"\"\n        user = self.get_current_user()\n        return (user and not user == 'anonymous')\n\n    @property\n    def login_handler(self):\n        \"\"\"Return the login handler for this application, if any.\"\"\"\n        return self.settings.get('login_handler_class', None)\n\n    @property\n    def token(self):\n        \"\"\"Return the login token for this application, if any.\"\"\"\n        return self.settings.get('token', None)\n\n    @property\n    def login_available(self):\n        \"\"\"May a user proceed to log in?\n\n        This returns True if login capability is available, irrespective of\n        whether the user is already logged in or not.\n\n        \"\"\"\n        if self.login_handler is None:\n            return False\n        return bool(self.login_handler.get_login_available(self.settings))\n\n\nclass JupyterHandler(AuthenticatedHandler):\n    \"\"\"Jupyter-specific extensions to authenticated handling\n\n    Mostly property shortcuts to Jupyter-specific settings.\n    \"\"\"\n\n    @property\n    def config(self):\n        return self.settings.get('config', None)\n\n    @property\n    def log(self):\n        \"\"\"use the Jupyter log by default, falling back on tornado's logger\"\"\"\n        return log()\n\n    @property\n    def jinja_template_vars(self):\n        \"\"\"User-supplied values to supply to jinja templates.\"\"\"\n        return self.settings.get('jinja_template_vars', {})\n\n    #---------------------------------------------------------------\n    # URLs\n    #---------------------------------------------------------------\n\n    @property\n    def version_hash(self):\n        \"\"\"The version hash to use for cache hints for static files\"\"\"\n        return self.settings.get('version_hash', '')\n\n    @property\n    def mathjax_url(self):\n        url = self.settings.get('mathjax_url', '')\n        if not url or url_is_absolute(url):\n            return url\n        return url_path_join(self.base_url, url)\n\n    @property\n    def mathjax_config(self):\n        return self.settings.get('mathjax_config', 'TeX-AMS-MML_HTMLorMML-full,Safe')\n\n    @property\n    def base_url(self):\n        return self.settings.get('base_url', '/')\n\n    @property\n    def default_url(self):\n        return self.settings.get('default_url', '')\n\n    @property\n    def ws_url(self):\n        return self.settings.get('websocket_url', '')\n\n    @property\n    def contents_js_source(self):\n        self.log.debug(\"Using contents: %s\", self.settings.get('contents_js_source',\n            'services/contents'))\n        return self.settings.get('contents_js_source', 'services/contents')\n\n    #---------------------------------------------------------------\n    # Manager objects\n    #---------------------------------------------------------------\n\n    @property\n    def kernel_manager(self):\n        return self.settings['kernel_manager']\n\n    @property\n    def contents_manager(self):\n        return self.settings['contents_manager']\n\n    @property\n    def session_manager(self):\n        return self.settings['session_manager']\n\n    @property\n    def terminal_manager(self):\n        return self.settings['terminal_manager']\n\n    @property\n    def kernel_spec_manager(self):\n        return self.settings['kernel_spec_manager']\n\n    @property\n    def config_manager(self):\n        return self.settings['config_manager']\n\n    #---------------------------------------------------------------\n    # CORS\n    #---------------------------------------------------------------\n\n    @property\n    def allow_origin(self):\n        \"\"\"Normal Access-Control-Allow-Origin\"\"\"\n        return self.settings.get('allow_origin', '')\n\n    @property\n    def allow_origin_pat(self):\n        \"\"\"Regular expression version of allow_origin\"\"\"\n        return self.settings.get('allow_origin_pat', None)\n\n    @property\n    def allow_credentials(self):\n        \"\"\"Whether to set Access-Control-Allow-Credentials\"\"\"\n        return self.settings.get('allow_credentials', False)\n\n    def set_default_headers(self):\n        \"\"\"Add CORS headers, if defined\"\"\"\n        super(JupyterHandler, self).set_default_headers()\n        if self.allow_origin:\n            self.set_header(\"Access-Control-Allow-Origin\", self.allow_origin)\n        elif self.allow_origin_pat:\n            origin = self.get_origin()\n            if origin and self.allow_origin_pat.match(origin):\n                self.set_header(\"Access-Control-Allow-Origin\", origin)\n        elif (\n            self.token_authenticated\n            and \"Access-Control-Allow-Origin\" not in\n                self.settings.get('headers', {})\n        ):\n            # allow token-authenticated requests cross-origin by default.\n            # only apply this exception if allow-origin has not been specified.\n            self.set_header('Access-Control-Allow-Origin',\n                self.request.headers.get('Origin', ''))\n\n        if self.allow_credentials:\n            self.set_header(\"Access-Control-Allow-Credentials\", 'true')\n\n    def set_attachment_header(self, filename):\n        \"\"\"Set Content-Disposition: attachment header\n\n        As a method to ensure handling of filename encoding\n        \"\"\"\n        escaped_filename = url_escape(filename)\n        self.set_header('Content-Disposition',\n            'attachment;'\n            \" filename*=utf-8''{utf8}\"\n            .format(\n                utf8=escaped_filename,\n            )\n        )\n\n    def get_origin(self):\n        # Handle WebSocket Origin naming convention differences\n        # The difference between version 8 and 13 is that in 8 the\n        # client sends a \"Sec-Websocket-Origin\" header and in 13 it's\n        # simply \"Origin\".\n        if \"Origin\" in self.request.headers:\n            origin = self.request.headers.get(\"Origin\")\n        else:\n            origin = self.request.headers.get(\"Sec-Websocket-Origin\", None)\n        return origin\n\n    # origin_to_satisfy_tornado is present because tornado requires\n    # check_origin to take an origin argument, but we don't use it\n    def check_origin(self, origin_to_satisfy_tornado=\"\"):\n        \"\"\"Check Origin for cross-site API requests, including websockets\n\n        Copied from WebSocket with changes:\n\n        - allow unspecified host/origin (e.g. scripts)\n        - allow token-authenticated requests\n        \"\"\"\n        if self.allow_origin == '*' or self.skip_check_origin():\n            return True\n\n        host = self.request.headers.get(\"Host\")\n        origin = self.request.headers.get(\"Origin\")\n\n        # If no header is provided, let the request through.\n        # Origin can be None for:\n        # - same-origin (IE, Firefox)\n        # - Cross-site POST form (IE, Firefox)\n        # - Scripts\n        # The cross-site POST (XSRF) case is handled by tornado's xsrf_token\n        if origin is None or host is None:\n            return True\n\n        origin = origin.lower()\n        origin_host = urlparse(origin).netloc\n\n        # OK if origin matches host\n        if origin_host == host:\n            return True\n\n        # Check CORS headers\n        if self.allow_origin:\n            allow = self.allow_origin == origin\n        elif self.allow_origin_pat:\n            allow = bool(self.allow_origin_pat.match(origin))\n        else:\n            # No CORS headers deny the request\n            allow = False\n        if not allow:\n            self.log.warning(\"Blocking Cross Origin API request for %s.  Origin: %s, Host: %s\",\n                self.request.path, origin, host,\n            )\n        return allow\n\n    def check_xsrf_cookie(self):\n        \"\"\"Bypass xsrf cookie checks when token-authenticated\"\"\"\n        if self.token_authenticated or self.settings.get('disable_check_xsrf', False):\n            # Token-authenticated requests do not need additional XSRF-check\n            # Servers without authentication are vulnerable to XSRF\n            return\n        return super(JupyterHandler, self).check_xsrf_cookie()\n\n    def check_host(self):\n        \"\"\"Check the host header if remote access disallowed.\n\n        Returns True if the request should continue, False otherwise.\n        \"\"\"\n        if self.settings.get('allow_remote_access', False):\n            return True\n\n        # Remove port (e.g. ':8888') from host\n        host = re.match(r'^(.*?)(:\\d+)?$', self.request.host).group(1)\n\n        # Browsers format IPv6 addresses like [::1]; we need to remove the []\n        if host.startswith('[') and host.endswith(']'):\n            host = host[1:-1]\n\n        try:\n            addr = ipaddress.ip_address(host)\n        except ValueError:\n            # Not an IP address: check against hostnames\n            allow = host in self.settings.get('local_hostnames', ['localhost'])\n        else:\n            allow = addr.is_loopback\n\n        if not allow:\n            self.log.warning(\n                (\"Blocking request with non-local 'Host' %s (%s). \"\n                 \"If the server should be accessible at that name, \"\n                 \"set ServerApp.allow_remote_access to disable the check.\"),\n                host, self.request.host\n            )\n        return allow\n\n    def prepare(self):\n        if not self.check_host():\n            raise web.HTTPError(403)\n        return super(JupyterHandler, self).prepare()\n\n    #---------------------------------------------------------------\n    # template rendering\n    #---------------------------------------------------------------\n\n    def get_template(self, name):\n        \"\"\"Return the jinja template object for a given name\"\"\"\n        return self.settings['jinja2_env'].get_template(name)\n\n    def render_template(self, name, **ns):\n        ns.update(self.template_namespace)\n        template = self.get_template(name)\n        return template.render(**ns)\n\n    @property\n    def template_namespace(self):\n        return dict(\n            base_url=self.base_url,\n            default_url=self.default_url,\n            ws_url=self.ws_url,\n            logged_in=self.logged_in,\n            allow_password_change=self.settings.get('allow_password_change'),\n            login_available=self.login_available,\n            token_available=bool(self.token),\n            static_url=self.static_url,\n            sys_info=json_sys_info(),\n            contents_js_source=self.contents_js_source,\n            version_hash=self.version_hash,\n            xsrf_form_html=self.xsrf_form_html,\n            token=self.token,\n            xsrf_token=self.xsrf_token.decode('utf8'),\n            nbjs_translations=json.dumps(combine_translations(\n                self.request.headers.get('Accept-Language', ''))),\n            **self.jinja_template_vars\n        )\n\n    def get_json_body(self):\n        \"\"\"Return the body of the request as JSON data.\"\"\"\n        if not self.request.body:\n            return None\n        # Do we need to call body.decode('utf-8') here?\n        body = self.request.body.strip().decode(u'utf-8')\n        try:\n            model = json.loads(body)\n        except Exception as e:\n            self.log.debug(\"Bad JSON: %r\", body)\n            self.log.error(\"Couldn't parse JSON\", exc_info=True)\n            raise web.HTTPError(400, u'Invalid JSON in body of request') from e\n        return model\n\n    def write_error(self, status_code, **kwargs):\n        \"\"\"render custom error pages\"\"\"\n        exc_info = kwargs.get('exc_info')\n        message = ''\n        status_message = responses.get(status_code, 'Unknown HTTP Error')\n        exception = '(unknown)'\n        if exc_info:\n            exception = exc_info[1]\n            # get the custom message, if defined\n            try:\n                message = exception.log_message % exception.args\n            except Exception:\n                pass\n\n            # construct the custom reason, if defined\n            reason = getattr(exception, 'reason', '')\n            if reason:\n                status_message = reason\n\n        # build template namespace\n        ns = dict(\n            status_code=status_code,\n            status_message=status_message,\n            message=message,\n            exception=exception,\n        )\n\n        self.set_header('Content-Type', 'text/html')\n        # render the template\n        try:\n            html = self.render_template('%s.html' % status_code, **ns)\n        except TemplateNotFound:\n            html = self.render_template('error.html', **ns)\n\n        self.write(html)\n\n\nclass APIHandler(JupyterHandler):\n    \"\"\"Base class for API handlers\"\"\"\n\n    def prepare(self):\n        if not self.check_origin():\n            raise web.HTTPError(404)\n        return super(APIHandler, self).prepare()\n\n    def write_error(self, status_code, **kwargs):\n        \"\"\"APIHandler errors are JSON, not human pages\"\"\"\n        self.set_header('Content-Type', 'application/json')\n        message = responses.get(status_code, 'Unknown HTTP Error')\n        reply = {\n            'message': message,\n        }\n        exc_info = kwargs.get('exc_info')\n        if exc_info:\n            e = exc_info[1]\n            if isinstance(e, HTTPError):\n                reply['message'] = e.log_message or message\n                reply['reason'] = e.reason\n            else:\n                reply['message'] = 'Unhandled error'\n                reply['reason'] = None\n                reply['traceback'] = ''.join(traceback.format_exception(*exc_info))\n        self.log.warning(reply['message'])\n        self.finish(json.dumps(reply))\n\n    def get_current_user(self):\n        \"\"\"Raise 403 on API handlers instead of redirecting to human login page\"\"\"\n        # preserve _user_cache so we don't raise more than once\n        if hasattr(self, '_user_cache'):\n            return self._user_cache\n        self._user_cache = user = super(APIHandler, self).get_current_user()\n        return user\n\n    def get_login_url(self):\n        # if get_login_url is invoked in an API handler,\n        # that means @web.authenticated is trying to trigger a redirect.\n        # instead of redirecting, raise 403 instead.\n        if not self.current_user:\n            raise web.HTTPError(403)\n        return super(APIHandler, self).get_login_url()\n\n    @property\n    def content_security_policy(self):\n        csp = '; '.join([\n                super(APIHandler, self).content_security_policy,\n                \"default-src 'none'\",\n            ])\n        return csp\n\n    # set _track_activity = False on API handlers that shouldn't track activity\n    _track_activity = True\n\n    def update_api_activity(self):\n        \"\"\"Update last_activity of API requests\"\"\"\n        # record activity of authenticated requests\n        if (\n            self._track_activity\n            and getattr(self, '_user_cache', None)\n            and self.get_argument('no_track_activity', None) is None\n        ):\n            self.settings['api_last_activity'] = utcnow()\n\n    def finish(self, *args, **kwargs):\n        self.update_api_activity()\n        self.set_header('Content-Type', 'application/json')\n        return super(APIHandler, self).finish(*args, **kwargs)\n\n    def options(self, *args, **kwargs):\n        if 'Access-Control-Allow-Headers' in self.settings.get('headers', {}):\n            self.set_header('Access-Control-Allow-Headers', self.settings['headers']['Access-Control-Allow-Headers'])\n        else:\n            self.set_header('Access-Control-Allow-Headers',\n                            'accept, content-type, authorization, x-xsrftoken')\n        self.set_header('Access-Control-Allow-Methods',\n                        'GET, PUT, POST, PATCH, DELETE, OPTIONS')\n\n        # if authorization header is requested,\n        # that means the request is token-authenticated.\n        # avoid browser-side rejection of the preflight request.\n        # only allow this exception if allow_origin has not been specified\n        # and Jupyter server authentication is enabled.\n        # If the token is not valid, the 'real' request will still be rejected.\n        requested_headers = self.request.headers.get('Access-Control-Request-Headers', '').split(',')\n        if requested_headers and any(\n            h.strip().lower() == 'authorization'\n            for h in requested_headers\n        ) and (\n            # FIXME: it would be even better to check specifically for token-auth,\n            # but there is currently no API for this.\n            self.login_available\n        ) and (\n            self.allow_origin\n            or self.allow_origin_pat\n            or 'Access-Control-Allow-Origin' in self.settings.get('headers', {})\n        ):\n            self.set_header('Access-Control-Allow-Origin',\n                self.request.headers.get('Origin', ''))\n\n\nclass Template404(JupyterHandler):\n    \"\"\"Render our 404 template\"\"\"\n    def prepare(self):\n        raise web.HTTPError(404)\n\n\nclass AuthenticatedFileHandler(JupyterHandler, web.StaticFileHandler):\n    \"\"\"static files should only be accessible when logged in\"\"\"\n\n    @property\n    def content_security_policy(self):\n        # In case we're serving HTML/SVG, confine any Javascript to a unique\n        # origin so it can't interact with the Jupyter server.\n        return super(AuthenticatedFileHandler, self).content_security_policy + \\\n                \"; sandbox allow-scripts\"\n\n    @web.authenticated\n    def get(self, path):\n        if os.path.splitext(path)[1] == '.ipynb' or self.get_argument(\"download\", False):\n            name = path.rsplit('/', 1)[-1]\n            self.set_attachment_header(name)\n\n        return web.StaticFileHandler.get(self, path)\n\n    def get_content_type(self):\n        path = self.absolute_path.strip('/')\n        if '/' in path:\n            _, name = path.rsplit('/', 1)\n        else:\n            name = path\n        if name.endswith('.ipynb'):\n            return 'application/x-ipynb+json'\n        else:\n            cur_mime = mimetypes.guess_type(name)[0]\n            if cur_mime == 'text/plain':\n                return 'text/plain; charset=UTF-8'\n            else:\n                return super(AuthenticatedFileHandler, self).get_content_type()\n\n    def set_headers(self):\n        super(AuthenticatedFileHandler, self).set_headers()\n        # disable browser caching, rely on 304 replies for savings\n        if \"v\" not in self.request.arguments:\n            self.add_header(\"Cache-Control\", \"no-cache\")\n\n    def compute_etag(self):\n        return None\n\n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"Validate and return the absolute path.\n\n        Requires tornado 3.1\n\n        Adding to tornado's own handling, forbids the serving of hidden files.\n        \"\"\"\n        abs_path = super(AuthenticatedFileHandler, self).validate_absolute_path(root, absolute_path)\n        abs_root = os.path.abspath(root)\n        if is_hidden(abs_path, abs_root) and not self.contents_manager.allow_hidden:\n            self.log.info(\"Refusing to serve hidden file, via 404 Error, use flag 'ContentsManager.allow_hidden' to enable\")\n            raise web.HTTPError(404)\n        return abs_path\n\ndef json_errors(method):\n    \"\"\"Decorate methods with this to return GitHub style JSON errors.\n\n    This should be used on any JSON API on any handler method that can raise HTTPErrors.\n\n    This will grab the latest HTTPError exception using sys.exc_info\n    and then:\n\n    1. Set the HTTP status code based on the HTTPError\n    2. Create and return a JSON body with a message field describing\n       the error in a human readable form.\n    \"\"\"\n    warnings.warn('@json_errors is deprecated in notebook 5.2.0. Subclass APIHandler instead.',\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        self.write_error = types.MethodType(APIHandler.write_error, self)\n        return method(self, *args, **kwargs)\n    return wrapper\n\n#-----------------------------------------------------------------------------\n# File handler\n#-----------------------------------------------------------------------------\n\n# to minimize subclass changes:\nHTTPError = web.HTTPError\n\nclass FileFindHandler(JupyterHandler, web.StaticFileHandler):\n    \"\"\"subclass of StaticFileHandler for serving files from a search path\"\"\"\n\n    # cache search results, don't search for files more than once\n    _static_paths = {}\n\n    def set_headers(self):\n        super(FileFindHandler, self).set_headers()\n        # disable browser caching, rely on 304 replies for savings\n        if \"v\" not in self.request.arguments or \\\n                any(self.request.path.startswith(path) for path in self.no_cache_paths):\n            self.set_header(\"Cache-Control\", \"no-cache\")\n\n    def initialize(self, path, default_filename=None, no_cache_paths=None):\n        self.no_cache_paths = no_cache_paths or []\n\n        if isinstance(path, string_types):\n            path = [path]\n\n        self.root = tuple(\n            os.path.abspath(os.path.expanduser(p)) + os.sep for p in path\n        )\n        self.default_filename = default_filename\n\n    def compute_etag(self):\n        return None\n\n    @classmethod\n    def get_absolute_path(cls, roots, path):\n        \"\"\"locate a file to serve on our static file search path\"\"\"\n        with cls._lock:\n            if path in cls._static_paths:\n                return cls._static_paths[path]\n            try:\n                abspath = os.path.abspath(filefind(path, roots))\n            except IOError:\n                # IOError means not found\n                return ''\n\n            cls._static_paths[path] = abspath\n\n            log().debug(\"Path %s served from %s\"%(path, abspath))\n            return abspath\n\n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"check if the file should be served (raises 404, 403, etc.)\"\"\"\n        if absolute_path == '':\n            raise web.HTTPError(404)\n\n        for root in self.root:\n            if (absolute_path + os.sep).startswith(root):\n                break\n\n        return super(FileFindHandler, self).validate_absolute_path(root, absolute_path)\n\n\nclass APIVersionHandler(APIHandler):\n\n    def get(self):\n        # not authenticated, so give as few info as possible\n        self.finish(json.dumps({\"version\": jupyter_server.__version__}))\n\n\nclass TrailingSlashHandler(web.RequestHandler):\n    \"\"\"Simple redirect handler that strips trailing slashes\n\n    This should be the first, highest priority handler.\n    \"\"\"\n\n    def get(self):\n        uri = self.request.path.rstrip(\"/\")\n        if uri:\n            self.redirect('?'.join((uri, self.request.query)))\n\n    post = put = get\n\n\nclass MainHandler(JupyterHandler):\n    \"\"\"Simple handler for base_url.\"\"\"\n\n    def get(self):\n        html = self.render_template(\"main.html\")\n        self.write(html)\n\n    post = put = get\n\n\nclass FilesRedirectHandler(JupyterHandler):\n    \"\"\"Handler for redirecting relative URLs to the /files/ handler\"\"\"\n\n    @staticmethod\n    def redirect_to_files(self, path):\n        \"\"\"make redirect logic a reusable static method\n\n        so it can be called from other handlers.\n        \"\"\"\n        cm = self.contents_manager\n        if cm.dir_exists(path):\n            # it's a *directory*, redirect to /tree\n            url = url_path_join(self.base_url, 'tree', url_escape(path))\n        else:\n            orig_path = path\n            # otherwise, redirect to /files\n            parts = path.split('/')\n\n            if not cm.file_exists(path=path) and 'files' in parts:\n                # redirect without files/ iff it would 404\n                # this preserves pre-2.0-style 'files/' links\n                self.log.warning(\"Deprecated files/ URL: %s\", orig_path)\n                parts.remove('files')\n                path = '/'.join(parts)\n\n            if not cm.file_exists(path=path):\n                raise web.HTTPError(404)\n\n            url = url_path_join(self.base_url, 'files', url_escape(path))\n        self.log.debug(\"Redirecting %s to %s\", self.request.path, url)\n        self.redirect(url)\n\n    def get(self, path=''):\n        return self.redirect_to_files(self, path)\n\n\nclass RedirectWithParams(web.RequestHandler):\n    \"\"\"Sam as web.RedirectHandler, but preserves URL parameters\"\"\"\n    def initialize(self, url, permanent=True):\n        self._url = url\n        self._permanent = permanent\n\n    def get(self):\n        sep = '&' if '?' in self._url else '?'\n        url = sep.join([self._url, self.request.query])\n        self.redirect(url, permanent=self._permanent)\n\nclass PrometheusMetricsHandler(JupyterHandler):\n    \"\"\"\n    Return prometheus metrics for this Jupyter server\n    \"\"\"\n    @web.authenticated\n    def get(self):\n        self.set_header('Content-Type', prometheus_client.CONTENT_TYPE_LATEST)\n        self.write(prometheus_client.generate_latest(prometheus_client.REGISTRY))\n\n\n#-----------------------------------------------------------------------------\n# URL pattern fragments for re-use\n#-----------------------------------------------------------------------------\n\n# path matches any number of `/foo[/bar...]` or just `/` or ''\npath_regex = r\"(?P<path>(?:(?:/[^/]+)+|/?))\"\n\n#-----------------------------------------------------------------------------\n# URL to handler mappings\n#-----------------------------------------------------------------------------\n\n\ndefault_handlers = [\n    (r\".*/\", TrailingSlashHandler),\n    (r\"api\", APIVersionHandler),\n    (r'/(robots\\.txt|favicon\\.ico)', web.StaticFileHandler),\n    (r'/metrics', PrometheusMetricsHandler)\n]\n", "import re\n\nfrom jupyter_server.base.handlers import path_regex\n\n\n# build regexps that tornado uses:\npath_pat = re.compile('^' + '/x%s' % path_regex + '$')\n\ndef test_path_regex():\n    for path in (\n        '/x',\n        '/x/',\n        '/x/foo',\n        '/x/foo.ipynb',\n        '/x/foo/bar',\n        '/x/foo/bar.txt',\n    ):\n        assert re.match(path_pat, path)\n\ndef test_path_regex_bad():\n    for path in (\n        '/xfoo',\n        '/xfoo/',\n        '/xfoo/bar',\n        '/xfoo/bar/',\n        '/x/foo/bar/',\n        '/x//foo',\n        '/y',\n        '/y/x/foo',\n    ):\n        assert re.match(path_pat, path) is None\n"], "fixing_code": ["\"\"\"Base Tornado handlers for the Jupyter server.\"\"\"\n\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nimport datetime\nimport functools\nimport ipaddress\nimport json\nimport mimetypes\nimport os\nimport re\nimport sys\nimport traceback\nimport types\nimport warnings\nfrom http.client import responses\nfrom http.cookies import Morsel\nfrom urllib.parse import urlparse\nfrom jinja2 import TemplateNotFound\nfrom tornado import web, gen, escape, httputil\nfrom tornado.log import app_log\nimport prometheus_client\n\nfrom jupyter_server._sysinfo import get_sys_info\n\nfrom traitlets.config import Application\nfrom ipython_genutils.path import filefind\nfrom ipython_genutils.py3compat import string_types\n\nimport jupyter_server\nfrom jupyter_server._tz import utcnow\nfrom jupyter_server.i18n import combine_translations\nfrom jupyter_server.utils import is_hidden, url_path_join, url_is_absolute, url_escape\nfrom jupyter_server.services.security import csp_report_uri\n\n#-----------------------------------------------------------------------------\n# Top-level handlers\n#-----------------------------------------------------------------------------\nnon_alphanum = re.compile(r'[^A-Za-z0-9]')\n\n_sys_info_cache = None\ndef json_sys_info():\n    global _sys_info_cache\n    if _sys_info_cache is None:\n        _sys_info_cache = json.dumps(get_sys_info())\n    return _sys_info_cache\n\ndef log():\n    if Application.initialized():\n        return Application.instance().log\n    else:\n        return app_log\n\nclass AuthenticatedHandler(web.RequestHandler):\n    \"\"\"A RequestHandler with an authenticated user.\"\"\"\n\n    @property\n    def content_security_policy(self):\n        \"\"\"The default Content-Security-Policy header\n\n        Can be overridden by defining Content-Security-Policy in settings['headers']\n        \"\"\"\n        if 'Content-Security-Policy' in self.settings.get('headers', {}):\n            # user-specified, don't override\n            return self.settings['headers']['Content-Security-Policy']\n\n        return '; '.join([\n            \"frame-ancestors 'self'\",\n            # Make sure the report-uri is relative to the base_url\n            \"report-uri \" + self.settings.get('csp_report_uri', url_path_join(self.base_url, csp_report_uri)),\n        ])\n\n    def set_default_headers(self):\n        headers = {}\n        headers.update(self.settings.get('headers', {}))\n\n        headers[\"Content-Security-Policy\"] = self.content_security_policy\n\n        # Allow for overriding headers\n        for header_name, value in headers.items():\n            try:\n                self.set_header(header_name, value)\n            except Exception as e:\n                # tornado raise Exception (not a subclass)\n                # if method is unsupported (websocket and Access-Control-Allow-Origin\n                # for example, so just ignore)\n                self.log.debug(e)\n\n    def force_clear_cookie(self, name, path=\"/\", domain=None):\n        \"\"\"Deletes the cookie with the given name.\n\n        Tornado's cookie handling currently (Jan 2018) stores cookies in a dict\n        keyed by name, so it can only modify one cookie with a given name per\n        response. The browser can store multiple cookies with the same name\n        but different domains and/or paths. This method lets us clear multiple\n        cookies with the same name.\n\n        Due to limitations of the cookie protocol, you must pass the same\n        path and domain to clear a cookie as were used when that cookie\n        was set (but there is no way to find out on the server side\n        which values were used for a given cookie).\n        \"\"\"\n        name = escape.native_str(name)\n        expires = datetime.datetime.utcnow() - datetime.timedelta(days=365)\n\n        morsel = Morsel()\n        morsel.set(name, '', '\"\"')\n        morsel['expires'] = httputil.format_timestamp(expires)\n        morsel['path'] = path\n        if domain:\n            morsel['domain'] = domain\n        self.add_header(\"Set-Cookie\", morsel.OutputString())\n\n    def clear_login_cookie(self):\n        cookie_options = self.settings.get('cookie_options', {})\n        path = cookie_options.setdefault('path', self.base_url)\n        self.clear_cookie(self.cookie_name, path=path)\n        if path and path != '/':\n            # also clear cookie on / to ensure old cookies are cleared\n            # after the change in path behavior.\n            # N.B. This bypasses the normal cookie handling, which can't update\n            # two cookies with the same name. See the method above.\n            self.force_clear_cookie(self.cookie_name)\n\n    def get_current_user(self):\n        if self.login_handler is None:\n            return 'anonymous'\n        return self.login_handler.get_user(self)\n\n    def skip_check_origin(self):\n        \"\"\"Ask my login_handler if I should skip the origin_check\n\n        For example: in the default LoginHandler, if a request is token-authenticated,\n        origin checking should be skipped.\n        \"\"\"\n        if self.request.method == 'OPTIONS':\n            # no origin-check on options requests, which are used to check origins!\n            return True\n        if self.login_handler is None or not hasattr(self.login_handler, 'should_check_origin'):\n            return False\n        return not self.login_handler.should_check_origin(self)\n\n    @property\n    def token_authenticated(self):\n        \"\"\"Have I been authenticated with a token?\"\"\"\n        if self.login_handler is None or not hasattr(self.login_handler, 'is_token_authenticated'):\n            return False\n        return self.login_handler.is_token_authenticated(self)\n\n    @property\n    def cookie_name(self):\n        default_cookie_name = non_alphanum.sub('-', 'username-{}'.format(\n            self.request.host\n        ))\n        return self.settings.get('cookie_name', default_cookie_name)\n\n    @property\n    def logged_in(self):\n        \"\"\"Is a user currently logged in?\"\"\"\n        user = self.get_current_user()\n        return (user and not user == 'anonymous')\n\n    @property\n    def login_handler(self):\n        \"\"\"Return the login handler for this application, if any.\"\"\"\n        return self.settings.get('login_handler_class', None)\n\n    @property\n    def token(self):\n        \"\"\"Return the login token for this application, if any.\"\"\"\n        return self.settings.get('token', None)\n\n    @property\n    def login_available(self):\n        \"\"\"May a user proceed to log in?\n\n        This returns True if login capability is available, irrespective of\n        whether the user is already logged in or not.\n\n        \"\"\"\n        if self.login_handler is None:\n            return False\n        return bool(self.login_handler.get_login_available(self.settings))\n\n\nclass JupyterHandler(AuthenticatedHandler):\n    \"\"\"Jupyter-specific extensions to authenticated handling\n\n    Mostly property shortcuts to Jupyter-specific settings.\n    \"\"\"\n\n    @property\n    def config(self):\n        return self.settings.get('config', None)\n\n    @property\n    def log(self):\n        \"\"\"use the Jupyter log by default, falling back on tornado's logger\"\"\"\n        return log()\n\n    @property\n    def jinja_template_vars(self):\n        \"\"\"User-supplied values to supply to jinja templates.\"\"\"\n        return self.settings.get('jinja_template_vars', {})\n\n    #---------------------------------------------------------------\n    # URLs\n    #---------------------------------------------------------------\n\n    @property\n    def version_hash(self):\n        \"\"\"The version hash to use for cache hints for static files\"\"\"\n        return self.settings.get('version_hash', '')\n\n    @property\n    def mathjax_url(self):\n        url = self.settings.get('mathjax_url', '')\n        if not url or url_is_absolute(url):\n            return url\n        return url_path_join(self.base_url, url)\n\n    @property\n    def mathjax_config(self):\n        return self.settings.get('mathjax_config', 'TeX-AMS-MML_HTMLorMML-full,Safe')\n\n    @property\n    def base_url(self):\n        return self.settings.get('base_url', '/')\n\n    @property\n    def default_url(self):\n        return self.settings.get('default_url', '')\n\n    @property\n    def ws_url(self):\n        return self.settings.get('websocket_url', '')\n\n    @property\n    def contents_js_source(self):\n        self.log.debug(\"Using contents: %s\", self.settings.get('contents_js_source',\n            'services/contents'))\n        return self.settings.get('contents_js_source', 'services/contents')\n\n    #---------------------------------------------------------------\n    # Manager objects\n    #---------------------------------------------------------------\n\n    @property\n    def kernel_manager(self):\n        return self.settings['kernel_manager']\n\n    @property\n    def contents_manager(self):\n        return self.settings['contents_manager']\n\n    @property\n    def session_manager(self):\n        return self.settings['session_manager']\n\n    @property\n    def terminal_manager(self):\n        return self.settings['terminal_manager']\n\n    @property\n    def kernel_spec_manager(self):\n        return self.settings['kernel_spec_manager']\n\n    @property\n    def config_manager(self):\n        return self.settings['config_manager']\n\n    #---------------------------------------------------------------\n    # CORS\n    #---------------------------------------------------------------\n\n    @property\n    def allow_origin(self):\n        \"\"\"Normal Access-Control-Allow-Origin\"\"\"\n        return self.settings.get('allow_origin', '')\n\n    @property\n    def allow_origin_pat(self):\n        \"\"\"Regular expression version of allow_origin\"\"\"\n        return self.settings.get('allow_origin_pat', None)\n\n    @property\n    def allow_credentials(self):\n        \"\"\"Whether to set Access-Control-Allow-Credentials\"\"\"\n        return self.settings.get('allow_credentials', False)\n\n    def set_default_headers(self):\n        \"\"\"Add CORS headers, if defined\"\"\"\n        super(JupyterHandler, self).set_default_headers()\n        if self.allow_origin:\n            self.set_header(\"Access-Control-Allow-Origin\", self.allow_origin)\n        elif self.allow_origin_pat:\n            origin = self.get_origin()\n            if origin and self.allow_origin_pat.match(origin):\n                self.set_header(\"Access-Control-Allow-Origin\", origin)\n        elif (\n            self.token_authenticated\n            and \"Access-Control-Allow-Origin\" not in\n                self.settings.get('headers', {})\n        ):\n            # allow token-authenticated requests cross-origin by default.\n            # only apply this exception if allow-origin has not been specified.\n            self.set_header('Access-Control-Allow-Origin',\n                self.request.headers.get('Origin', ''))\n\n        if self.allow_credentials:\n            self.set_header(\"Access-Control-Allow-Credentials\", 'true')\n\n    def set_attachment_header(self, filename):\n        \"\"\"Set Content-Disposition: attachment header\n\n        As a method to ensure handling of filename encoding\n        \"\"\"\n        escaped_filename = url_escape(filename)\n        self.set_header('Content-Disposition',\n            'attachment;'\n            \" filename*=utf-8''{utf8}\"\n            .format(\n                utf8=escaped_filename,\n            )\n        )\n\n    def get_origin(self):\n        # Handle WebSocket Origin naming convention differences\n        # The difference between version 8 and 13 is that in 8 the\n        # client sends a \"Sec-Websocket-Origin\" header and in 13 it's\n        # simply \"Origin\".\n        if \"Origin\" in self.request.headers:\n            origin = self.request.headers.get(\"Origin\")\n        else:\n            origin = self.request.headers.get(\"Sec-Websocket-Origin\", None)\n        return origin\n\n    # origin_to_satisfy_tornado is present because tornado requires\n    # check_origin to take an origin argument, but we don't use it\n    def check_origin(self, origin_to_satisfy_tornado=\"\"):\n        \"\"\"Check Origin for cross-site API requests, including websockets\n\n        Copied from WebSocket with changes:\n\n        - allow unspecified host/origin (e.g. scripts)\n        - allow token-authenticated requests\n        \"\"\"\n        if self.allow_origin == '*' or self.skip_check_origin():\n            return True\n\n        host = self.request.headers.get(\"Host\")\n        origin = self.request.headers.get(\"Origin\")\n\n        # If no header is provided, let the request through.\n        # Origin can be None for:\n        # - same-origin (IE, Firefox)\n        # - Cross-site POST form (IE, Firefox)\n        # - Scripts\n        # The cross-site POST (XSRF) case is handled by tornado's xsrf_token\n        if origin is None or host is None:\n            return True\n\n        origin = origin.lower()\n        origin_host = urlparse(origin).netloc\n\n        # OK if origin matches host\n        if origin_host == host:\n            return True\n\n        # Check CORS headers\n        if self.allow_origin:\n            allow = self.allow_origin == origin\n        elif self.allow_origin_pat:\n            allow = bool(self.allow_origin_pat.match(origin))\n        else:\n            # No CORS headers deny the request\n            allow = False\n        if not allow:\n            self.log.warning(\"Blocking Cross Origin API request for %s.  Origin: %s, Host: %s\",\n                self.request.path, origin, host,\n            )\n        return allow\n\n    def check_xsrf_cookie(self):\n        \"\"\"Bypass xsrf cookie checks when token-authenticated\"\"\"\n        if self.token_authenticated or self.settings.get('disable_check_xsrf', False):\n            # Token-authenticated requests do not need additional XSRF-check\n            # Servers without authentication are vulnerable to XSRF\n            return\n        return super(JupyterHandler, self).check_xsrf_cookie()\n\n    def check_host(self):\n        \"\"\"Check the host header if remote access disallowed.\n\n        Returns True if the request should continue, False otherwise.\n        \"\"\"\n        if self.settings.get('allow_remote_access', False):\n            return True\n\n        # Remove port (e.g. ':8888') from host\n        host = re.match(r'^(.*?)(:\\d+)?$', self.request.host).group(1)\n\n        # Browsers format IPv6 addresses like [::1]; we need to remove the []\n        if host.startswith('[') and host.endswith(']'):\n            host = host[1:-1]\n\n        try:\n            addr = ipaddress.ip_address(host)\n        except ValueError:\n            # Not an IP address: check against hostnames\n            allow = host in self.settings.get('local_hostnames', ['localhost'])\n        else:\n            allow = addr.is_loopback\n\n        if not allow:\n            self.log.warning(\n                (\"Blocking request with non-local 'Host' %s (%s). \"\n                 \"If the server should be accessible at that name, \"\n                 \"set ServerApp.allow_remote_access to disable the check.\"),\n                host, self.request.host\n            )\n        return allow\n\n    def prepare(self):\n        if not self.check_host():\n            raise web.HTTPError(403)\n        return super(JupyterHandler, self).prepare()\n\n    #---------------------------------------------------------------\n    # template rendering\n    #---------------------------------------------------------------\n\n    def get_template(self, name):\n        \"\"\"Return the jinja template object for a given name\"\"\"\n        return self.settings['jinja2_env'].get_template(name)\n\n    def render_template(self, name, **ns):\n        ns.update(self.template_namespace)\n        template = self.get_template(name)\n        return template.render(**ns)\n\n    @property\n    def template_namespace(self):\n        return dict(\n            base_url=self.base_url,\n            default_url=self.default_url,\n            ws_url=self.ws_url,\n            logged_in=self.logged_in,\n            allow_password_change=self.settings.get('allow_password_change'),\n            login_available=self.login_available,\n            token_available=bool(self.token),\n            static_url=self.static_url,\n            sys_info=json_sys_info(),\n            contents_js_source=self.contents_js_source,\n            version_hash=self.version_hash,\n            xsrf_form_html=self.xsrf_form_html,\n            token=self.token,\n            xsrf_token=self.xsrf_token.decode('utf8'),\n            nbjs_translations=json.dumps(combine_translations(\n                self.request.headers.get('Accept-Language', ''))),\n            **self.jinja_template_vars\n        )\n\n    def get_json_body(self):\n        \"\"\"Return the body of the request as JSON data.\"\"\"\n        if not self.request.body:\n            return None\n        # Do we need to call body.decode('utf-8') here?\n        body = self.request.body.strip().decode(u'utf-8')\n        try:\n            model = json.loads(body)\n        except Exception as e:\n            self.log.debug(\"Bad JSON: %r\", body)\n            self.log.error(\"Couldn't parse JSON\", exc_info=True)\n            raise web.HTTPError(400, u'Invalid JSON in body of request') from e\n        return model\n\n    def write_error(self, status_code, **kwargs):\n        \"\"\"render custom error pages\"\"\"\n        exc_info = kwargs.get('exc_info')\n        message = ''\n        status_message = responses.get(status_code, 'Unknown HTTP Error')\n        exception = '(unknown)'\n        if exc_info:\n            exception = exc_info[1]\n            # get the custom message, if defined\n            try:\n                message = exception.log_message % exception.args\n            except Exception:\n                pass\n\n            # construct the custom reason, if defined\n            reason = getattr(exception, 'reason', '')\n            if reason:\n                status_message = reason\n\n        # build template namespace\n        ns = dict(\n            status_code=status_code,\n            status_message=status_message,\n            message=message,\n            exception=exception,\n        )\n\n        self.set_header('Content-Type', 'text/html')\n        # render the template\n        try:\n            html = self.render_template('%s.html' % status_code, **ns)\n        except TemplateNotFound:\n            html = self.render_template('error.html', **ns)\n\n        self.write(html)\n\n\nclass APIHandler(JupyterHandler):\n    \"\"\"Base class for API handlers\"\"\"\n\n    def prepare(self):\n        if not self.check_origin():\n            raise web.HTTPError(404)\n        return super(APIHandler, self).prepare()\n\n    def write_error(self, status_code, **kwargs):\n        \"\"\"APIHandler errors are JSON, not human pages\"\"\"\n        self.set_header('Content-Type', 'application/json')\n        message = responses.get(status_code, 'Unknown HTTP Error')\n        reply = {\n            'message': message,\n        }\n        exc_info = kwargs.get('exc_info')\n        if exc_info:\n            e = exc_info[1]\n            if isinstance(e, HTTPError):\n                reply['message'] = e.log_message or message\n                reply['reason'] = e.reason\n            else:\n                reply['message'] = 'Unhandled error'\n                reply['reason'] = None\n                reply['traceback'] = ''.join(traceback.format_exception(*exc_info))\n        self.log.warning(reply['message'])\n        self.finish(json.dumps(reply))\n\n    def get_current_user(self):\n        \"\"\"Raise 403 on API handlers instead of redirecting to human login page\"\"\"\n        # preserve _user_cache so we don't raise more than once\n        if hasattr(self, '_user_cache'):\n            return self._user_cache\n        self._user_cache = user = super(APIHandler, self).get_current_user()\n        return user\n\n    def get_login_url(self):\n        # if get_login_url is invoked in an API handler,\n        # that means @web.authenticated is trying to trigger a redirect.\n        # instead of redirecting, raise 403 instead.\n        if not self.current_user:\n            raise web.HTTPError(403)\n        return super(APIHandler, self).get_login_url()\n\n    @property\n    def content_security_policy(self):\n        csp = '; '.join([\n                super(APIHandler, self).content_security_policy,\n                \"default-src 'none'\",\n            ])\n        return csp\n\n    # set _track_activity = False on API handlers that shouldn't track activity\n    _track_activity = True\n\n    def update_api_activity(self):\n        \"\"\"Update last_activity of API requests\"\"\"\n        # record activity of authenticated requests\n        if (\n            self._track_activity\n            and getattr(self, '_user_cache', None)\n            and self.get_argument('no_track_activity', None) is None\n        ):\n            self.settings['api_last_activity'] = utcnow()\n\n    def finish(self, *args, **kwargs):\n        self.update_api_activity()\n        self.set_header('Content-Type', 'application/json')\n        return super(APIHandler, self).finish(*args, **kwargs)\n\n    def options(self, *args, **kwargs):\n        if 'Access-Control-Allow-Headers' in self.settings.get('headers', {}):\n            self.set_header('Access-Control-Allow-Headers', self.settings['headers']['Access-Control-Allow-Headers'])\n        else:\n            self.set_header('Access-Control-Allow-Headers',\n                            'accept, content-type, authorization, x-xsrftoken')\n        self.set_header('Access-Control-Allow-Methods',\n                        'GET, PUT, POST, PATCH, DELETE, OPTIONS')\n\n        # if authorization header is requested,\n        # that means the request is token-authenticated.\n        # avoid browser-side rejection of the preflight request.\n        # only allow this exception if allow_origin has not been specified\n        # and Jupyter server authentication is enabled.\n        # If the token is not valid, the 'real' request will still be rejected.\n        requested_headers = self.request.headers.get('Access-Control-Request-Headers', '').split(',')\n        if requested_headers and any(\n            h.strip().lower() == 'authorization'\n            for h in requested_headers\n        ) and (\n            # FIXME: it would be even better to check specifically for token-auth,\n            # but there is currently no API for this.\n            self.login_available\n        ) and (\n            self.allow_origin\n            or self.allow_origin_pat\n            or 'Access-Control-Allow-Origin' in self.settings.get('headers', {})\n        ):\n            self.set_header('Access-Control-Allow-Origin',\n                self.request.headers.get('Origin', ''))\n\n\nclass Template404(JupyterHandler):\n    \"\"\"Render our 404 template\"\"\"\n    def prepare(self):\n        raise web.HTTPError(404)\n\n\nclass AuthenticatedFileHandler(JupyterHandler, web.StaticFileHandler):\n    \"\"\"static files should only be accessible when logged in\"\"\"\n\n    @property\n    def content_security_policy(self):\n        # In case we're serving HTML/SVG, confine any Javascript to a unique\n        # origin so it can't interact with the Jupyter server.\n        return super(AuthenticatedFileHandler, self).content_security_policy + \\\n                \"; sandbox allow-scripts\"\n\n    @web.authenticated\n    def get(self, path):\n        if os.path.splitext(path)[1] == '.ipynb' or self.get_argument(\"download\", False):\n            name = path.rsplit('/', 1)[-1]\n            self.set_attachment_header(name)\n\n        return web.StaticFileHandler.get(self, path)\n\n    def get_content_type(self):\n        path = self.absolute_path.strip('/')\n        if '/' in path:\n            _, name = path.rsplit('/', 1)\n        else:\n            name = path\n        if name.endswith('.ipynb'):\n            return 'application/x-ipynb+json'\n        else:\n            cur_mime = mimetypes.guess_type(name)[0]\n            if cur_mime == 'text/plain':\n                return 'text/plain; charset=UTF-8'\n            else:\n                return super(AuthenticatedFileHandler, self).get_content_type()\n\n    def set_headers(self):\n        super(AuthenticatedFileHandler, self).set_headers()\n        # disable browser caching, rely on 304 replies for savings\n        if \"v\" not in self.request.arguments:\n            self.add_header(\"Cache-Control\", \"no-cache\")\n\n    def compute_etag(self):\n        return None\n\n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"Validate and return the absolute path.\n\n        Requires tornado 3.1\n\n        Adding to tornado's own handling, forbids the serving of hidden files.\n        \"\"\"\n        abs_path = super(AuthenticatedFileHandler, self).validate_absolute_path(root, absolute_path)\n        abs_root = os.path.abspath(root)\n        if is_hidden(abs_path, abs_root) and not self.contents_manager.allow_hidden:\n            self.log.info(\"Refusing to serve hidden file, via 404 Error, use flag 'ContentsManager.allow_hidden' to enable\")\n            raise web.HTTPError(404)\n        return abs_path\n\ndef json_errors(method):\n    \"\"\"Decorate methods with this to return GitHub style JSON errors.\n\n    This should be used on any JSON API on any handler method that can raise HTTPErrors.\n\n    This will grab the latest HTTPError exception using sys.exc_info\n    and then:\n\n    1. Set the HTTP status code based on the HTTPError\n    2. Create and return a JSON body with a message field describing\n       the error in a human readable form.\n    \"\"\"\n    warnings.warn('@json_errors is deprecated in notebook 5.2.0. Subclass APIHandler instead.',\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        self.write_error = types.MethodType(APIHandler.write_error, self)\n        return method(self, *args, **kwargs)\n    return wrapper\n\n#-----------------------------------------------------------------------------\n# File handler\n#-----------------------------------------------------------------------------\n\n# to minimize subclass changes:\nHTTPError = web.HTTPError\n\nclass FileFindHandler(JupyterHandler, web.StaticFileHandler):\n    \"\"\"subclass of StaticFileHandler for serving files from a search path\"\"\"\n\n    # cache search results, don't search for files more than once\n    _static_paths = {}\n\n    def set_headers(self):\n        super(FileFindHandler, self).set_headers()\n        # disable browser caching, rely on 304 replies for savings\n        if \"v\" not in self.request.arguments or \\\n                any(self.request.path.startswith(path) for path in self.no_cache_paths):\n            self.set_header(\"Cache-Control\", \"no-cache\")\n\n    def initialize(self, path, default_filename=None, no_cache_paths=None):\n        self.no_cache_paths = no_cache_paths or []\n\n        if isinstance(path, string_types):\n            path = [path]\n\n        self.root = tuple(\n            os.path.abspath(os.path.expanduser(p)) + os.sep for p in path\n        )\n        self.default_filename = default_filename\n\n    def compute_etag(self):\n        return None\n\n    @classmethod\n    def get_absolute_path(cls, roots, path):\n        \"\"\"locate a file to serve on our static file search path\"\"\"\n        with cls._lock:\n            if path in cls._static_paths:\n                return cls._static_paths[path]\n            try:\n                abspath = os.path.abspath(filefind(path, roots))\n            except IOError:\n                # IOError means not found\n                return ''\n\n            cls._static_paths[path] = abspath\n\n            log().debug(\"Path %s served from %s\"%(path, abspath))\n            return abspath\n\n    def validate_absolute_path(self, root, absolute_path):\n        \"\"\"check if the file should be served (raises 404, 403, etc.)\"\"\"\n        if absolute_path == '':\n            raise web.HTTPError(404)\n\n        for root in self.root:\n            if (absolute_path + os.sep).startswith(root):\n                break\n\n        return super(FileFindHandler, self).validate_absolute_path(root, absolute_path)\n\n\nclass APIVersionHandler(APIHandler):\n\n    def get(self):\n        # not authenticated, so give as few info as possible\n        self.finish(json.dumps({\"version\": jupyter_server.__version__}))\n\n\nclass TrailingSlashHandler(web.RequestHandler):\n    \"\"\"Simple redirect handler that strips trailing slashes\n\n    This should be the first, highest priority handler.\n    \"\"\"\n\n    def get(self):\n        path, *rest = self.request.uri.partition(\"?\")\n        # trim trailing *and* leading /\n        # to avoid misinterpreting repeated '//'\n        path = \"/\" + path.strip(\"/\")\n        new_uri = \"\".join([path, *rest])\n        self.redirect(new_uri)\n\n    post = put = get\n\n\nclass MainHandler(JupyterHandler):\n    \"\"\"Simple handler for base_url.\"\"\"\n\n    def get(self):\n        html = self.render_template(\"main.html\")\n        self.write(html)\n\n    post = put = get\n\n\nclass FilesRedirectHandler(JupyterHandler):\n    \"\"\"Handler for redirecting relative URLs to the /files/ handler\"\"\"\n\n    @staticmethod\n    def redirect_to_files(self, path):\n        \"\"\"make redirect logic a reusable static method\n\n        so it can be called from other handlers.\n        \"\"\"\n        cm = self.contents_manager\n        if cm.dir_exists(path):\n            # it's a *directory*, redirect to /tree\n            url = url_path_join(self.base_url, 'tree', url_escape(path))\n        else:\n            orig_path = path\n            # otherwise, redirect to /files\n            parts = path.split('/')\n\n            if not cm.file_exists(path=path) and 'files' in parts:\n                # redirect without files/ iff it would 404\n                # this preserves pre-2.0-style 'files/' links\n                self.log.warning(\"Deprecated files/ URL: %s\", orig_path)\n                parts.remove('files')\n                path = '/'.join(parts)\n\n            if not cm.file_exists(path=path):\n                raise web.HTTPError(404)\n\n            url = url_path_join(self.base_url, 'files', url_escape(path))\n        self.log.debug(\"Redirecting %s to %s\", self.request.path, url)\n        self.redirect(url)\n\n    def get(self, path=''):\n        return self.redirect_to_files(self, path)\n\n\nclass RedirectWithParams(web.RequestHandler):\n    \"\"\"Sam as web.RedirectHandler, but preserves URL parameters\"\"\"\n    def initialize(self, url, permanent=True):\n        self._url = url\n        self._permanent = permanent\n\n    def get(self):\n        sep = '&' if '?' in self._url else '?'\n        url = sep.join([self._url, self.request.query])\n        self.redirect(url, permanent=self._permanent)\n\nclass PrometheusMetricsHandler(JupyterHandler):\n    \"\"\"\n    Return prometheus metrics for this Jupyter server\n    \"\"\"\n    @web.authenticated\n    def get(self):\n        self.set_header('Content-Type', prometheus_client.CONTENT_TYPE_LATEST)\n        self.write(prometheus_client.generate_latest(prometheus_client.REGISTRY))\n\n\n#-----------------------------------------------------------------------------\n# URL pattern fragments for re-use\n#-----------------------------------------------------------------------------\n\n# path matches any number of `/foo[/bar...]` or just `/` or ''\npath_regex = r\"(?P<path>(?:(?:/[^/]+)+|/?))\"\n\n#-----------------------------------------------------------------------------\n# URL to handler mappings\n#-----------------------------------------------------------------------------\n\n\ndefault_handlers = [\n    (r\".*/\", TrailingSlashHandler),\n    (r\"api\", APIVersionHandler),\n    (r'/(robots\\.txt|favicon\\.ico)', web.StaticFileHandler),\n    (r'/metrics', PrometheusMetricsHandler)\n]\n", "import re\nimport pytest\nimport tornado\nfrom jupyter_server.base.handlers import path_regex\n\n\n# build regexps that tornado uses:\npath_pat = re.compile('^' + '/x%s' % path_regex + '$')\n\ndef test_path_regex():\n    for path in (\n        '/x',\n        '/x/',\n        '/x/foo',\n        '/x/foo.ipynb',\n        '/x/foo/bar',\n        '/x/foo/bar.txt',\n    ):\n        assert re.match(path_pat, path)\n\ndef test_path_regex_bad():\n    for path in (\n        '/xfoo',\n        '/xfoo/',\n        '/xfoo/bar',\n        '/xfoo/bar/',\n        '/x/foo/bar/',\n        '/x//foo',\n        '/y',\n        '/y/x/foo',\n    ):\n        assert re.match(path_pat, path) is None\n\n\n@pytest.mark.parametrize(\n    'uri,expected',\n    [\n        (\"/notebooks/mynotebook/\", \"/notebooks/mynotebook\"),\n        (\"////foo///\", \"/foo\"),\n        (\"//example.com/\", \"/example.com\"),\n        (\"/has/param/?hasparam=true\", \"/has/param?hasparam=true\"),\n    ]\n)\nasync def test_trailing_slash(uri, expected, http_server_client, auth_header, base_url):\n    # http_server_client raises an exception when follow_redirects=False\n    with pytest.raises(tornado.httpclient.HTTPClientError) as err:\n        await http_server_client.fetch(\n            uri,\n            headers=auth_header,\n            request_timeout=20,\n            follow_redirects=False\n        )\n    # Capture the response from the raised exception value.\n    response = err.value.response\n    assert response.code == 302\n    assert \"Location\" in response.headers\n    assert response.headers[\"Location\"] == expected\n    assert False\n"], "filenames": ["jupyter_server/base/handlers.py", "tests/test_paths.py"], "buggy_code_start_loc": [779, 2], "buggy_code_end_loc": [782, 31], "fixing_code_start_loc": [779, 2], "fixing_code_end_loc": [785, 59], "type": "CWE-601", "message": "Jupyter Server before version 1.0.6 has an Open redirect vulnerability. A maliciously crafted link to a jupyter server could redirect the browser to a different website. All jupyter servers are technically affected, however, these maliciously crafted links can only be reasonably made for known jupyter server hosts. A link to your jupyter server may appear safe, but ultimately redirect to a spoofed server on the public internet.", "other": {"cve": {"id": "CVE-2020-26232", "sourceIdentifier": "security-advisories@github.com", "published": "2020-11-24T21:15:11.557", "lastModified": "2020-12-02T20:21:28.270", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Jupyter Server before version 1.0.6 has an Open redirect vulnerability. A maliciously crafted link to a jupyter server could redirect the browser to a different website. All jupyter servers are technically affected, however, these maliciously crafted links can only be reasonably made for known jupyter server hosts. A link to your jupyter server may appear safe, but ultimately redirect to a spoofed server on the public internet."}, {"lang": "es", "value": "Jupyter Server anterior a versi\u00f3n 1.0.6, presenta una vulnerabilidad de redireccionamiento abierto.&#xa0;Un enlace creado con fines maliciosos en un servidor jupyter podr\u00eda redireccionar el navegador a un sitio web diferente.&#xa0;Todos los servidores jupyter est\u00e1n afectados t\u00e9cnicamente; sin embargo, estos enlaces creados con fines maliciosos solo se pueden crear de forma razonable para hosts de servidores jupyter conocidos.&#xa0;Un enlace a su servidor jupyter puede parecer seguro, pero en \u00faltima instancia redirecciona a un servidor falsificado en la internet p\u00fablica"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jupyter:jupyter_server:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.6", "matchCriteriaId": "515A8195-8266-46C5-BF95-93644633063A"}]}]}], "references": [{"url": "https://github.com/jupyter-server/jupyter_server/blob/master/CHANGELOG.md#106---2020-11-18", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/jupyter-server/jupyter_server/commit/3d83e49090289c431da253e2bdb8dc479cbcb157", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jupyter/jupyter_server/security/advisories/GHSA-grfj-wjv9-4f9v", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jupyter-server/jupyter_server/commit/3d83e49090289c431da253e2bdb8dc479cbcb157"}}