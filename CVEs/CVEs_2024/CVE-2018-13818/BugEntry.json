{"buggy_code": ["* 2.4.4 (2017-XX-XX)\n\n * added Twig_Profiler_Profile::reset()\n * fixed use TokenParser to return an empty Node\n * added RuntimeExtensionInterface\n * added circular reference detection when loading templates\n * added support for runtime loaders in IntegrationTestCase\n * fixed deprecation when using Twig_Profiler_Dumper_Html\n * removed @final from Twig_Profiler_Dumper_Text\n\n* 2.4.3 (2017-06-07)\n\n * fixed namespaces introduction\n\n* 2.4.2 (2017-06-05)\n\n * fixed namespaces introduction\n\n* 2.4.1 (2017-06-05)\n\n * fixed namespaces introduction\n\n* 2.4.0 (2017-06-05)\n\n * added support for PHPUnit 6 when testing extensions\n * fixed PHP 7.2 compatibility\n * fixed template name generation in Twig_Environment::createTemplate()\n * removed final tag on Twig_TokenParser_Include\n * dropped HHVM support\n * added namespaced aliases for all (non-deprecated) classes and interfaces\n * marked Twig_Filter, Twig_Function, Twig_Test, Twig_Node_Module and Twig_Profiler_Profile as final via the @final annotation\n\n* 2.3.2 (2017-04-20)\n\n * fixed edge case in the method cache for Twig attributes\n\n* 2.3.1 (2017-04-18)\n\n * fixed the empty() test\n\n* 2.3.0 (2017-03-22)\n\n * fixed a race condition handling when writing cache files\n * \"length\" filter now returns string length when applied to an object that does\n   not implement \\Countable but provides __toString()\n * \"empty\" test will now consider the return value of the __toString() method for\n   objects implement __toString() but not \\Countable\n * fixed JS escaping for unicode characters with higher code points\n * added error message when calling `parent()` in a block that doesn't exist in the parent template\n\n* 2.2.0 (2017-02-26)\n\n * added a PSR-11 compatible runtime loader\n * added `side` argument to `trim` to allow left or right trimming only.\n\n* 2.1.0 (2017-01-11)\n\n * fixed twig_get_attribute()\n * added Twig_NodeCaptureInterface for nodes that capture all output\n\n* 2.0.0 (2017-01-05)\n\n * removed the C extension\n * moved Twig_Environment::getAttribute() to twig_get_attribute()\n * removed Twig_Environment::getLexer(), Twig_Environment::getParser(), Twig_Environment::getCompiler()\n * removed Twig_Compiler::getFilename()\n * added hasser support in Twig_Template::getAttribute()\n * sped up the json_encode filter\n * removed reserved macro names; all names can be used as macro\n * removed Twig_Template::getEnvironment()\n * changed _self variable to return the current template name\n * made the loader a required argument of Twig_Environment constructor\n * removed Twig_Environment::clearTemplateCache()\n * removed Twig_Autoloader (use Composer instead)\n * removed `true` as an equivalent to `html` for the auto-escaping strategy\n * removed pre-1.8 autoescape tag syntax\n * dropped support for PHP 5.x\n * removed the ability to register a global variable after the runtime or the extensions have been initialized\n * improved the performance of the filesystem loader\n * removed features that were deprecated in 1.x\n\n* 1.35.0 (2017-XX-XX)\n\n * added Twig_Profiler_Profile::reset()\n * fixed use TokenParser to return an empty Node\n * added RuntimeExtensionInterface\n * added circular reference detection when loading templates\n\n* 1.34.4 (2017-07-04)\n\n * added support for runtime loaders in IntegrationTestCase\n * fixed deprecation when using Twig_Profiler_Dumper_Html\n\n* 1.34.3 (2017-06-07)\n\n * fixed namespaces introduction\n\n* 1.34.2 (2017-06-05)\n\n * fixed namespaces introduction\n\n* 1.34.1 (2017-06-05)\n\n * fixed namespaces introduction\n\n* 1.34.0 (2017-06-05)\n\n * added support for PHPUnit 6 when testing extensions\n * fixed PHP 7.2 compatibility\n * fixed template name generation in Twig_Environment::createTemplate()\n * removed final tag on Twig_TokenParser_Include\n * added namespaced aliases for all (non-deprecated) classes and interfaces\n * dropped HHVM support\n * dropped PHP 5.2 support\n\n* 1.33.2 (2017-04-20)\n\n * fixed edge case in the method cache for Twig attributes\n\n* 1.33.1 (2017-04-18)\n\n * fixed the empty() test\n\n* 1.33.0 (2017-03-22)\n\n * fixed a race condition handling when writing cache files\n * \"length\" filter now returns string length when applied to an object that does\n   not implement \\Countable but provides __toString()\n * \"empty\" test will now consider the return value of the __toString() method for\n   objects implement __toString() but not \\Countable\n * fixed JS escaping for unicode characters with higher code points\n\n* 1.32.0 (2017-02-26)\n\n * fixed deprecation notice in Twig_Util_DeprecationCollector\n * added a PSR-11 compatible runtime loader\n * added `side` argument to `trim` to allow left or right trimming only.\n\n* 1.31.0 (2017-01-11)\n\n * added Twig_NodeCaptureInterface for nodes that capture all output\n * fixed marking the environment as initialized too early\n * fixed C89 compat for the C extension\n * turned fatal error into exception when a previously generated cache is corrupted\n * fixed offline cache warm-ups for embedded templates\n\n* 1.30.0 (2016-12-23)\n\n * added Twig_FactoryRuntimeLoader\n * deprecated function/test/filter/tag overriding\n * deprecated the \"disable_c_ext\" attribute on Twig_Node_Expression_GetAttr\n\n* 1.29.0 (2016-12-13)\n\n * fixed sandbox being left enabled if an exception is thrown while rendering\n * marked some classes as being final (via @final)\n * made Twig_Error report real source path when possible\n * added support for {{ _self }} to provide an upgrade path from 1.x to 2.0 (replaces {{ _self.templateName }})\n * deprecated silent display of undefined blocks\n * deprecated support for mbstring.func_overload != 0\n\n* 1.28.2 (2016-11-23)\n\n * fixed precedence between getFoo() and isFoo() in Twig_Template::getAttribute()\n * improved a deprecation message\n\n* 1.28.1 (2016-11-18)\n\n * fixed block() function when used with a template argument\n\n* 1.28.0 (2016-11-17)\n\n * added support for the PHP 7 null coalescing operator for the ?? Twig implementation\n * exposed a way to access template data and methods in a portable way\n * changed context access to use the PHP 7 null coalescing operator when available\n * added the \"with\" tag\n * added support for a custom template on the block() function\n * added \"is defined\" support for block() and constant()\n * optimized the way attributes are fetched\n\n* 1.27.0 (2016-10-25)\n\n * deprecated Twig_Parser::getEnvironment()\n * deprecated Twig_Parser::addHandler() and Twig_Parser::addNodeVisitor()\n * deprecated Twig_Compiler::addIndentation()\n * fixed regression when registering two extensions having the same class name\n * deprecated Twig_LoaderInterface::getSource() (implement Twig_SourceContextLoaderInterface instead)\n * fixed the filesystem loader with relative paths\n * deprecated Twig_Node::getLine() in favor of Twig_Node::getTemplateLine()\n * deprecated Twig_Template::getSource() in favor of Twig_Template::getSourceContext()\n * deprecated Twig_Node::getFilename() in favor of Twig_Node::getTemplateName()\n * deprecated the \"filename\" escaping strategy (use \"name\" instead)\n * added Twig_Source to hold information about the original template\n * deprecated Twig_Error::getTemplateFile() and Twig_Error::setTemplateFile() in favor of Twig_Error::getTemplateName() and Twig_Error::setTemplateName()\n * deprecated Parser::getFilename()\n * fixed template paths when a template name contains a protocol like vfs://\n * improved debugging with Twig_Sandbox_SecurityError exceptions for disallowed methods and properties\n\n* 1.26.1 (2016-10-05)\n\n * removed template source code from generated template classes when debug is disabled\n * fixed default implementation of Twig_Template::getDebugInfo() for better BC\n * fixed regression on static calls for functions/filters/tests\n\n* 1.26.0 (2016-10-02)\n\n * added template cache invalidation based on more environment options\n * added a missing deprecation notice\n * fixed template paths when a template is stored in a PHAR file\n * allowed filters/functions/tests implementation to use a different class than the extension they belong to\n * deprecated Twig_ExtensionInterface::getName()\n\n* 1.25.0 (2016-09-21)\n\n * changed the way we store template source in template classes\n * removed usage of realpath in cache keys\n * fixed Twig cache sharing when used with different versions of PHP\n * removed embed parent workaround for simple use cases\n * deprecated the ability to store non Node instances in Node::$nodes\n * deprecated Twig_Environment::getLexer(), Twig_Environment::getParser(), Twig_Environment::getCompiler()\n * deprecated Twig_Compiler::getFilename()\n\n* 1.24.2 (2016-09-01)\n\n * fixed static callables\n * fixed a potential PHP warning when loading the cache\n * fixed a case where the autoescaping does not work as expected\n\n* 1.24.1 (2016-05-30)\n\n * fixed reserved keywords (forbids true, false, null and none keywords for variables names)\n * fixed support for PHP7 (Throwable support)\n * marked the following methods as being internals on Twig_Environment:\n   getFunctions(), getFilters(), getTests(), getFunction(), getFilter(), getTest(),\n   getTokenParsers(), getTags(), getNodeVisitors(), getUnaryOperators(), getBinaryOperators(),\n   getFunctions(), getFilters(), getGlobals(), initGlobals(), initExtensions(), and initExtension()\n\n* 1.24.0 (2016-01-25)\n\n * adding support for the ?? operator\n * fixed the defined test when used on a constant, a map, or a sequence\n * undeprecated _self (should only be used to get the template name, not the template instance)\n * fixed parsing on PHP7\n\n* 1.23.3 (2016-01-11)\n\n * fixed typo\n\n* 1.23.2 (2015-01-11)\n\n * added versions in deprecated messages\n * made file cache tolerant for trailing (back)slashes on directory configuration\n * deprecated unused Twig_Node_Expression_ExtensionReference class\n\n* 1.23.1 (2015-11-05)\n\n * fixed some exception messages which triggered PHP warnings\n * fixed BC on Twig_Test_NodeTestCase\n\n* 1.23.0 (2015-10-29)\n\n * deprecated the possibility to override an extension by registering another one with the same name\n * deprecated Twig_ExtensionInterface::getGlobals() (added Twig_Extension_GlobalsInterface for BC)\n * deprecated Twig_ExtensionInterface::initRuntime() (added Twig_Extension_InitRuntimeInterface for BC)\n * deprecated Twig_Environment::computeAlternatives()\n\n* 1.22.3 (2015-10-13)\n\n * fixed regression when using null as a cache strategy\n * improved performance when checking template freshness\n * fixed warnings when loaded templates do not exist\n * fixed template class name generation to prevent possible collisions\n * fixed logic for custom escapers to call them even on integers and null values\n * changed template cache names to take into account the Twig C extension\n\n* 1.22.2 (2015-09-22)\n\n * fixed a race condition in template loading\n\n* 1.22.1 (2015-09-15)\n\n * fixed regression in template_from_string\n\n* 1.22.0 (2015-09-13)\n\n * made Twig_Test_IntegrationTestCase more flexible\n * added an option to force PHP bytecode invalidation when writing a compiled template into the cache\n * fixed the profiler duration for the root node\n * changed template cache names to take into account enabled extensions\n * deprecated Twig_Environment::clearCacheFiles(), Twig_Environment::getCacheFilename(),\n   Twig_Environment::writeCacheFile(), and Twig_Environment::getTemplateClassPrefix()\n * added a way to override the filesystem template cache system\n * added a way to get the original template source from Twig_Template\n\n* 1.21.2 (2015-09-09)\n\n * fixed variable names for the deprecation triggering code\n * fixed escaping strategy detection based on filename\n * added Traversable support for replace, merge, and sort\n * deprecated support for character by character replacement for the \"replace\" filter\n\n* 1.21.1 (2015-08-26)\n\n * fixed regression when using the deprecated Twig_Test_* classes\n\n* 1.21.0 (2015-08-24)\n\n * added deprecation notices for deprecated features\n * added a deprecation \"framework\" for filters/functions/tests and test fixtures\n\n* 1.20.0 (2015-08-12)\n\n * forbid access to the Twig environment from templates and internal parts of Twig_Template\n * fixed limited RCEs when in sandbox mode\n * deprecated Twig_Template::getEnvironment()\n * deprecated the _self variable for usage outside of the from and import tags\n * added Twig_BaseNodeVisitor to ease the compatibility of node visitors\n   between 1.x and 2.x\n\n* 1.19.0 (2015-07-31)\n\n * fixed wrong error message when including an undefined template in a child template\n * added support for variadic filters, functions, and tests\n * added support for extra positional arguments in macros\n * added ignore_missing flag to the source function\n * fixed batch filter with zero items\n * deprecated Twig_Environment::clearTemplateCache()\n * fixed sandbox disabling when using the include function\n\n* 1.18.2 (2015-06-06)\n\n * fixed template/line guessing in exceptions for nested templates\n * optimized the number of inodes and the size of realpath cache when using the cache\n\n* 1.18.1 (2015-04-19)\n\n * fixed memory leaks in the C extension\n * deprecated Twig_Loader_String\n * fixed the slice filter when used with a SimpleXMLElement object\n * fixed filesystem loader when trying to load non-files (like directories)\n\n* 1.18.0 (2015-01-25)\n\n * fixed some error messages where the line was wrong (unknown variables or argument names)\n * added a new way to customize the main Module node (via empty nodes)\n * added Twig_Environment::createTemplate() to create a template from a string\n * added a profiler\n * fixed filesystem loader cache when different file paths are used for the same template\n\n* 1.17.0 (2015-01-14)\n\n * added a 'filename' autoescaping strategy, which dynamically chooses the\n   autoescaping strategy for a template based on template file extension.\n\n* 1.16.3 (2014-12-25)\n\n * fixed regression for dynamic parent templates\n * fixed cache management with statcache\n * fixed a regression in the slice filter\n\n* 1.16.2 (2014-10-17)\n\n * fixed timezone on dates as strings\n * fixed 2-words test names when a custom node class is not used\n * fixed macros when using an argument named like a PHP super global (like GET or POST)\n * fixed date_modify when working with DateTimeImmutable\n * optimized for loops\n * fixed multi-byte characters handling in the split filter\n * fixed a regression in the in operator\n * fixed a regression in the slice filter\n\n* 1.16.1 (2014-10-10)\n\n * improved error reporting in a sandboxed template\n * fixed missing error file/line information under certain circumstances\n * fixed wrong error line number in some error messages\n * fixed the in operator to use strict comparisons\n * sped up the slice filter\n * fixed for mb function overload mb_substr acting different\n * fixed the attribute() function when passing a variable for the arguments\n\n* 1.16.0 (2014-07-05)\n\n * changed url_encode to always encode according to RFC 3986\n * fixed inheritance in a 'use'-hierarchy\n * removed the __toString policy check when the sandbox is disabled\n * fixed recursively calling blocks in templates with inheritance\n\n* 1.15.1 (2014-02-13)\n\n * fixed the conversion of the special '0000-00-00 00:00' date\n * added an error message when trying to import an undefined block from a trait\n * fixed a C extension crash when accessing defined but uninitialized property.\n\n* 1.15.0 (2013-12-06)\n\n * made ignoreStrictCheck in Template::getAttribute() works with __call() methods throwing BadMethodCallException\n * added min and max functions\n * added the round filter\n * fixed a bug that prevented the optimizers to be enabled/disabled selectively\n * fixed first and last filters for UTF-8 strings\n * added a source function to include the content of a template without rendering it\n * fixed the C extension sandbox behavior when get or set is prepend to method name\n\n* 1.14.2 (2013-10-30)\n\n * fixed error filename/line when an error occurs in an included file\n * allowed operators that contain whitespaces to have more than one whitespace\n * allowed tests to be made of 1 or 2 words (like \"same as\" or \"divisible by\")\n\n* 1.14.1 (2013-10-15)\n\n * made it possible to use named operators as variables\n * fixed the possibility to have a variable named 'matches'\n * added support for PHP 5.5 DateTimeInterface\n\n* 1.14.0 (2013-10-03)\n\n * fixed usage of the html_attr escaping strategy to avoid double-escaping with the html strategy\n * added new operators: ends with, starts with, and matches\n * fixed some compatibility issues with HHVM\n * added a way to add custom escaping strategies\n * fixed the C extension compilation on Windows\n * fixed the batch filter when using a fill argument with an exact match of elements to batch\n * fixed the filesystem loader cache when a template name exists in several namespaces\n * fixed template_from_string when the template includes or extends other ones\n * fixed a crash of the C extension on an edge case\n\n* 1.13.2 (2013-08-03)\n\n * fixed the error line number for an error occurs in and embedded template\n * fixed crashes of the C extension on some edge cases\n\n* 1.13.1 (2013-06-06)\n\n * added the possibility to ignore the filesystem constructor argument in Twig_Loader_Filesystem\n * fixed Twig_Loader_Chain::exists() for a loader which implements Twig_ExistsLoaderInterface\n * adjusted backtrace call to reduce memory usage when an error occurs\n * added support for object instances as the second argument of the constant test\n * fixed the include function when used in an assignment\n\n* 1.13.0 (2013-05-10)\n\n * fixed getting a numeric-like item on a variable ('09' for instance)\n * fixed getting a boolean or float key on an array, so it is consistent with PHP's array access:\n   `{{ array[false] }}` behaves the same as `echo $array[false];` (equals `$array[0]`)\n * made the escape filter 20% faster for happy path (escaping string for html with UTF-8)\n * changed \u2603 to \u00a7 in tests\n * enforced usage of named arguments after positional ones\n\n* 1.12.3 (2013-04-08)\n\n * fixed a security issue in the filesystem loader where it was possible to include a template one\n   level above the configured path\n * fixed fatal error that should be an exception when adding a filter/function/test too late\n * added a batch filter\n * added support for encoding an array as query string in the url_encode filter\n\n* 1.12.2 (2013-02-09)\n\n * fixed the timezone used by the date filter and function when the given date contains a timezone (like 2010-01-28T15:00:00+02:00)\n * fixed globals when getGlobals is called early on\n * added the first and last filter\n\n* 1.12.1 (2013-01-15)\n\n * added support for object instances as the second argument of the constant function\n * relaxed globals management to avoid a BC break\n * added support for {{ some_string[:2] }}\n\n* 1.12.0 (2013-01-08)\n\n * added verbatim as an alias for the raw tag to avoid confusion with the raw filter\n * fixed registration of tests and functions as anonymous functions\n * fixed globals management\n\n* 1.12.0-RC1 (2012-12-29)\n\n * added an include function (does the same as the include tag but in a more flexible way)\n * added the ability to use any PHP callable to define filters, functions, and tests\n * added a syntax error when using a loop variable that is not defined\n * added the ability to set default values for macro arguments\n * added support for named arguments for filters, tests, and functions\n * moved filters/functions/tests syntax errors to the parser\n * added support for extended ternary operator syntaxes\n\n* 1.11.1 (2012-11-11)\n\n * fixed debug info line numbering (was off by 2)\n * fixed escaping when calling a macro inside another one (regression introduced in 1.9.1)\n * optimized variable access on PHP 5.4\n * fixed a crash of the C extension when an exception was thrown from a macro called without being imported (using _self.XXX)\n\n* 1.11.0 (2012-11-07)\n\n * fixed macro compilation when a variable name is a PHP reserved keyword\n * changed the date filter behavior to always apply the default timezone, except if false is passed as the timezone\n * fixed bitwise operator precedences\n * added the template_from_string function\n * fixed default timezone usage for the date function\n * optimized the way Twig exceptions are managed (to make them faster)\n * added Twig_ExistsLoaderInterface (implementing this interface in your loader make the chain loader much faster)\n\n* 1.10.3 (2012-10-19)\n\n * fixed wrong template location in some error messages\n * reverted a BC break introduced in 1.10.2\n * added a split filter\n\n* 1.10.2 (2012-10-15)\n\n * fixed macro calls on PHP 5.4\n\n* 1.10.1 (2012-10-15)\n\n * made a speed optimization to macro calls when imported via the \"import\" tag\n * fixed C extension compilation on Windows\n * fixed a segfault in the C extension when using DateTime objects\n\n* 1.10.0 (2012-09-28)\n\n * extracted functional tests framework to make it reusable for third-party extensions\n * added namespaced templates support in Twig_Loader_Filesystem\n * added Twig_Loader_Filesystem::prependPath()\n * fixed an error when a token parser pass a closure as a test to the subparse() method\n\n* 1.9.2 (2012-08-25)\n\n * fixed the in operator for objects that contain circular references\n * fixed the C extension when accessing a public property of an object implementing the \\ArrayAccess interface\n\n* 1.9.1 (2012-07-22)\n\n * optimized macro calls when auto-escaping is on\n * fixed wrong parent class for Twig_Function_Node\n * made Twig_Loader_Chain more explicit about problems\n\n* 1.9.0 (2012-07-13)\n\n * made the parsing independent of the template loaders\n * fixed exception trace when an error occurs when rendering a child template\n * added escaping strategies for CSS, URL, and HTML attributes\n * fixed nested embed tag calls\n * added the date_modify filter\n\n* 1.8.3 (2012-06-17)\n\n * fixed paths in the filesystem loader when passing a path that ends with a slash or a backslash\n * fixed escaping when a project defines a function named html or js\n * fixed chmod mode to apply the umask correctly\n\n* 1.8.2 (2012-05-30)\n\n * added the abs filter\n * fixed a regression when using a number in template attributes\n * fixed compiler when mbstring.func_overload is set to 2\n * fixed DateTimeZone support in date filter\n\n* 1.8.1 (2012-05-17)\n\n * fixed a regression when dealing with SimpleXMLElement instances in templates\n * fixed \"is_safe\" value for the \"dump\" function when \"html_errors\" is not defined in php.ini\n * switched to use mbstring whenever possible instead of iconv (you might need to update your encoding as mbstring and iconv encoding names sometimes differ)\n\n* 1.8.0 (2012-05-08)\n\n * enforced interface when adding tests, filters, functions, and node visitors from extensions\n * fixed a side-effect of the date filter where the timezone might be changed\n * simplified usage of the autoescape tag; the only (optional) argument is now the escaping strategy or false (with a BC layer)\n * added a way to dynamically change the auto-escaping strategy according to the template \"filename\"\n * changed the autoescape option to also accept a supported escaping strategy (for BC, true is equivalent to html)\n * added an embed tag\n\n* 1.7.0 (2012-04-24)\n\n * fixed a PHP warning when using CIFS\n * fixed template line number in some exceptions\n * added an iterable test\n * added an error when defining two blocks with the same name in a template\n * added the preserves_safety option for filters\n * fixed a PHP notice when trying to access a key on a non-object/array variable\n * enhanced error reporting when the template file is an instance of SplFileInfo\n * added Twig_Environment::mergeGlobals()\n * added compilation checks to avoid misuses of the sandbox tag\n * fixed filesystem loader freshness logic for high traffic websites\n * fixed random function when charset is null\n\n* 1.6.5 (2012-04-11)\n\n * fixed a regression when a template only extends another one without defining any blocks\n\n* 1.6.4 (2012-04-02)\n\n * fixed PHP notice in Twig_Error::guessTemplateLine() introduced in 1.6.3\n * fixed performance when compiling large files\n * optimized parent template creation when the template does not use dynamic inheritance\n\n* 1.6.3 (2012-03-22)\n\n * fixed usage of Z_ADDREF_P for PHP 5.2 in the C extension\n * fixed compilation of numeric values used in templates when using a locale where the decimal separator is not a dot\n * made the strategy used to guess the real template file name and line number in exception messages much faster and more accurate\n\n* 1.6.2 (2012-03-18)\n\n * fixed sandbox mode when used with inheritance\n * added preserveKeys support for the slice filter\n * fixed the date filter when a DateTime instance is passed with a specific timezone\n * added a trim filter\n\n* 1.6.1 (2012-02-29)\n\n * fixed Twig C extension\n * removed the creation of Twig_Markup instances when not needed\n * added a way to set the default global timezone for dates\n * fixed the slice filter on strings when the length is not specified\n * fixed the creation of the cache directory in case of a race condition\n\n* 1.6.0 (2012-02-04)\n\n * fixed raw blocks when used with the whitespace trim option\n * made a speed optimization to macro calls when imported via the \"from\" tag\n * fixed globals, parsers, visitors, filters, tests, and functions management in Twig_Environment when a new one or new extension is added\n * fixed the attribute function when passing arguments\n * added slice notation support for the [] operator (syntactic sugar for the slice operator)\n * added a slice filter\n * added string support for the reverse filter\n * fixed the empty test and the length filter for Twig_Markup instances\n * added a date function to ease date comparison\n * fixed unary operators precedence\n * added recursive parsing support in the parser\n * added string and integer handling for the random function\n\n* 1.5.1 (2012-01-05)\n\n * fixed a regression when parsing strings\n\n* 1.5.0 (2012-01-04)\n\n * added Traversable objects support for the join filter\n\n* 1.5.0-RC2 (2011-12-30)\n\n * added a way to set the default global date interval format\n * fixed the date filter for DateInterval instances (setTimezone() does not exist for them)\n * refactored Twig_Template::display() to ease its extension\n * added a number_format filter\n\n* 1.5.0-RC1 (2011-12-26)\n\n * removed the need to quote hash keys\n * allowed hash keys to be any expression\n * added a do tag\n * added a flush tag\n * added support for dynamically named filters and functions\n * added a dump function to help debugging templates\n * added a nl2br filter\n * added a random function\n * added a way to change the default format for the date filter\n * fixed the lexer when an operator ending with a letter ends a line\n * added string interpolation support\n * enhanced exceptions for unknown filters, functions, tests, and tags\n\n* 1.4.0 (2011-12-07)\n\n * fixed lexer when using big numbers (> PHP_INT_MAX)\n * added missing preserveKeys argument to the reverse filter\n * fixed macros containing filter tag calls\n\n* 1.4.0-RC2 (2011-11-27)\n\n * removed usage of Reflection in Twig_Template::getAttribute()\n * added a C extension that can optionally replace Twig_Template::getAttribute()\n * added negative timestamp support to the date filter\n\n* 1.4.0-RC1 (2011-11-20)\n\n * optimized variable access when using PHP 5.4\n * changed the precedence of the .. operator to be more consistent with languages that implements such a feature like Ruby\n * added an Exception to Twig_Loader_Array::isFresh() method when the template does not exist to be consistent with other loaders\n * added Twig_Function_Node to allow more complex functions to have their own Node class\n * added Twig_Filter_Node to allow more complex filters to have their own Node class\n * added Twig_Test_Node to allow more complex tests to have their own Node class\n * added a better error message when a template is empty but contain a BOM\n * fixed \"in\" operator for empty strings\n * fixed the \"defined\" test and the \"default\" filter (now works with more than one call (foo.bar.foo) and for both values of the strict_variables option)\n * changed the way extensions are loaded (addFilter/addFunction/addGlobal/addTest/addNodeVisitor/addTokenParser/addExtension can now be called in any order)\n * added Twig_Environment::display()\n * made the escape filter smarter when the encoding is not supported by PHP\n * added a convert_encoding filter\n * moved all node manipulations outside the compile() Node method\n * made several speed optimizations\n\n* 1.3.0 (2011-10-08)\n\nno changes\n\n* 1.3.0-RC1 (2011-10-04)\n\n * added an optimization for the parent() function\n * added cache reloading when auto_reload is true and an extension has been modified\n * added the possibility to force the escaping of a string already marked as safe (instance of Twig_Markup)\n * allowed empty templates to be used as traits\n * added traits support for the \"parent\" function\n\n* 1.2.0 (2011-09-13)\n\nno changes\n\n* 1.2.0-RC1 (2011-09-10)\n\n * enhanced the exception when a tag remains unclosed\n * added support for empty Countable objects for the \"empty\" test\n * fixed algorithm that determines if a template using inheritance is valid (no output between block definitions)\n * added better support for encoding problems when escaping a string (available as of PHP 5.4)\n * added a way to ignore a missing template when using the \"include\" tag ({% include \"foo\" ignore missing %})\n * added support for an array of templates to the \"include\" and \"extends\" tags ({% include ['foo', 'bar'] %})\n * added support for bitwise operators in expressions\n * added the \"attribute\" function to allow getting dynamic attributes on variables\n * added Twig_Loader_Chain\n * added Twig_Loader_Array::setTemplate()\n * added an optimization for the set tag when used to capture a large chunk of static text\n * changed name regex to match PHP one \"[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*\" (works for blocks, tags, functions, filters, and macros)\n * removed the possibility to use the \"extends\" tag from a block\n * added \"if\" modifier support to \"for\" loops\n\n* 1.1.2 (2011-07-30)\n\n * fixed json_encode filter on PHP 5.2\n * fixed regression introduced in 1.1.1 ({{ block(foo|lower) }})\n * fixed inheritance when using conditional parents\n * fixed compilation of templates when the body of a child template is not empty\n * fixed output when a macro throws an exception\n * fixed a parsing problem when a large chunk of text is enclosed in a comment tag\n * added PHPDoc for all Token parsers and Core extension functions\n\n* 1.1.1 (2011-07-17)\n\n * added a performance optimization in the Optimizer (also helps to lower the number of nested level calls)\n * made some performance improvement for some edge cases\n\n* 1.1.0 (2011-06-28)\n\n * fixed json_encode filter\n\n* 1.1.0-RC3 (2011-06-24)\n\n * fixed method case-sensitivity when using the sandbox mode\n * added timezone support for the date filter\n * fixed possible security problems with NUL bytes\n\n* 1.1.0-RC2 (2011-06-16)\n\n * added an exception when the template passed to \"use\" is not a string\n * made 'a.b is defined' not throw an exception if a is not defined (in strict mode)\n * added {% line \\d+ %} directive\n\n* 1.1.0-RC1 (2011-05-28)\n\nFlush your cache after upgrading.\n\n * fixed date filter when using a timestamp\n * fixed the defined test for some cases\n * fixed a parsing problem when a large chunk of text is enclosed in a raw tag\n * added support for horizontal reuse of template blocks (see docs for more information)\n * added whitespace control modifier to all tags (see docs for more information)\n * added null as an alias for none (the null test is also an alias for the none test now)\n * made TRUE, FALSE, NONE equivalent to their lowercase counterparts\n * wrapped all compilation and runtime exceptions with Twig_Error_Runtime and added logic to guess the template name and line\n * moved display() method to Twig_Template (generated templates should now use doDisplay() instead)\n\n* 1.0.0 (2011-03-27)\n\n * fixed output when using mbstring\n * fixed duplicate call of methods when using the sandbox\n * made the charset configurable for the escape filter\n\n* 1.0.0-RC2 (2011-02-21)\n\n * changed the way {% set %} works when capturing (the content is now marked as safe)\n * added support for macro name in the endmacro tag\n * make Twig_Error compatible with PHP 5.3.0 >\n * fixed an infinite loop on some Windows configurations\n * fixed the \"length\" filter for numbers\n * fixed Template::getAttribute() as properties in PHP are case sensitive\n * removed coupling between Twig_Node and Twig_Template\n * fixed the ternary operator precedence rule\n\n* 1.0.0-RC1 (2011-01-09)\n\nBackward incompatibilities:\n\n * the \"items\" filter, which has been deprecated for quite a long time now, has been removed\n * the \"range\" filter has been converted to a function: 0|range(10) -> range(0, 10)\n * the \"constant\" filter has been converted to a function: {{ some_date|date('DATE_W3C'|constant) }} -> {{ some_date|date(constant('DATE_W3C')) }}\n * the \"cycle\" filter has been converted to a function: {{ ['odd', 'even']|cycle(i) }} -> {{ cycle(['odd', 'even'], i) }}\n * the \"for\" tag does not support \"joined by\" anymore\n * the \"autoescape\" first argument is now \"true\"/\"false\" (instead of \"on\"/\"off\")\n * the \"parent\" tag has been replaced by a \"parent\" function ({{ parent() }} instead of {% parent %})\n * the \"display\" tag has been replaced by a \"block\" function ({{ block('title') }} instead of {% display title %})\n * removed the grammar and simple token parser (moved to the Twig Extensions repository)\n\nChanges:\n\n * added \"needs_context\" option for filters and functions (the context is then passed as a first argument)\n * added global variables support\n * made macros return their value instead of echoing directly (fixes calling a macro in sandbox mode)\n * added the \"from\" tag to import macros as functions\n * added support for functions (a function is just syntactic sugar for a getAttribute() call)\n * made macros callable when sandbox mode is enabled\n * added an exception when a macro uses a reserved name\n * the \"default\" filter now uses the \"empty\" test instead of just checking for null\n * added the \"empty\" test\n\n* 0.9.10 (2010-12-16)\n\nBackward incompatibilities:\n\n * The Escaper extension is enabled by default, which means that all displayed\n   variables are now automatically escaped. You can revert to the previous\n   behavior by removing the extension via $env->removeExtension('escaper')\n   or just set the 'autoescape' option to 'false'.\n * removed the \"without loop\" attribute for the \"for\" tag (not needed anymore\n   as the Optimizer take care of that for most cases)\n * arrays and hashes have now a different syntax\n     * arrays keep the same syntax with square brackets: [1, 2]\n     * hashes now use curly braces ([\"a\": \"b\"] should now be written as {\"a\": \"b\"})\n     * support for \"arrays with keys\" and \"hashes without keys\" is not supported anymore ([1, \"foo\": \"bar\"] or {\"foo\": \"bar\", 1})\n * the i18n extension is now part of the Twig Extensions repository\n\nChanges:\n\n * added the merge filter\n * removed 'is_escaper' option for filters (a left over from the previous version) -- you must use 'is_safe' now instead\n * fixed usage of operators as method names (like is, in, and not)\n * changed the order of execution for node visitors\n * fixed default() filter behavior when used with strict_variables set to on\n * fixed filesystem loader compatibility with PHAR files\n * enhanced error messages when an unexpected token is parsed in an expression\n * fixed filename not being added to syntax error messages\n * added the autoescape option to enable/disable autoescaping\n * removed the newline after a comment (mimics PHP behavior)\n * added a syntax error exception when parent block is used on a template that does not extend another one\n * made the Escaper extension enabled by default\n * fixed sandbox extension when used with auto output escaping\n * fixed escaper when wrapping a Twig_Node_Print (the original class must be preserved)\n * added an Optimizer extension (enabled by default; optimizes \"for\" loops and \"raw\" filters)\n * added priority to node visitors\n\n* 0.9.9 (2010-11-28)\n\nBackward incompatibilities:\n * the self special variable has been renamed to _self\n * the odd and even filters are now tests:\n     {{ foo|odd }} must now be written {{ foo is odd }}\n * the \"safe\" filter has been renamed to \"raw\"\n * in Node classes,\n        sub-nodes are now accessed via getNode() (instead of property access)\n        attributes via getAttribute() (instead of array access)\n * the urlencode filter had been renamed to url_encode\n * the include tag now merges the passed variables with the current context by default\n   (the old behavior is still possible by adding the \"only\" keyword)\n * moved Exceptions to Twig_Error_* (Twig_SyntaxError/Twig_RuntimeError are now Twig_Error_Syntax/Twig_Error_Runtime)\n * removed support for {{ 1 < i < 3 }} (use {{ i > 1 and i < 3 }} instead)\n * the \"in\" filter has been removed ({{ a|in(b) }} should now be written {{ a in b }})\n\nChanges:\n * added file and line to Twig_Error_Runtime exceptions thrown from Twig_Template\n * changed trans tag to accept any variable for the plural count\n * fixed sandbox mode (__toString() method check was not enforced if called implicitly from complex statements)\n * added the ** (power) operator\n * changed the algorithm used for parsing expressions\n * added the spaceless tag\n * removed trim_blocks option\n * added support for is*() methods for attributes (foo.bar now looks for foo->getBar() or foo->isBar())\n * changed all exceptions to extend Twig_Error\n * fixed unary expressions ({{ not(1 or 0) }})\n * fixed child templates (with an extend tag) that uses one or more imports\n * added support for {{ 1 not in [2, 3] }} (more readable than the current {{ not (1 in [2, 3]) }})\n * escaping has been rewritten\n * the implementation of template inheritance has been rewritten\n   (blocks can now be called individually and still work with inheritance)\n * fixed error handling for if tag when a syntax error occurs within a subparse process\n * added a way to implement custom logic for resolving token parsers given a tag name\n * fixed js escaper to be stricter (now uses a whilelist-based js escaper)\n * added the following filers: \"constant\", \"trans\", \"replace\", \"json_encode\"\n * added a \"constant\" test\n * fixed objects with __toString() not being autoescaped\n * fixed subscript expressions when calling __call() (methods now keep the case)\n * added \"test\" feature (accessible via the \"is\" operator)\n * removed the debug tag (should be done in an extension)\n * fixed trans tag when no vars are used in plural form\n * fixed race condition when writing template cache\n * added the special _charset variable to reference the current charset\n * added the special _context variable to reference the current context\n * renamed self to _self (to avoid conflict)\n * fixed Twig_Template::getAttribute() for protected properties\n\n* 0.9.8 (2010-06-28)\n\nBackward incompatibilities:\n * the trans tag plural count is now attached to the plural tag:\n    old: `{% trans count %}...{% plural %}...{% endtrans %}`\n    new: `{% trans %}...{% plural count %}...{% endtrans %}`\n\n * added a way to translate strings coming from a variable ({% trans var %})\n * fixed trans tag when used with the Escaper extension\n * fixed default cache umask\n * removed Twig_Template instances from the debug tag output\n * fixed objects with __isset() defined\n * fixed set tag when used with a capture\n * fixed type hinting for Twig_Environment::addFilter() method\n\n* 0.9.7 (2010-06-12)\n\nBackward incompatibilities:\n * changed 'as' to '=' for the set tag ({% set title as \"Title\" %} must now be {% set title = \"Title\" %})\n * removed the sandboxed attribute of the include tag (use the new sandbox tag instead)\n * refactored the Node system (if you have custom nodes, you will have to update them to use the new API)\n\n * added self as a special variable that refers to the current template (useful for importing macros from the current template)\n * added Twig_Template instance support to the include tag\n * added support for dynamic and conditional inheritance ({% extends some_var %} and {% extends standalone ? \"minimum\" : \"base\" %})\n * added a grammar sub-framework to ease the creation of custom tags\n * fixed the for tag for large arrays (some loop variables are now only available for arrays and objects that implement the Countable interface)\n * removed the Twig_Resource::resolveMissingFilter() method\n * fixed the filter tag which did not apply filtering to included files\n * added a bunch of unit tests\n * added a bunch of phpdoc\n * added a sandbox tag in the sandbox extension\n * changed the date filter to support any date format supported by DateTime\n * added strict_variable setting to throw an exception when an invalid variable is used in a template (disabled by default)\n * added the lexer, parser, and compiler as arguments to the Twig_Environment constructor\n * changed the cache option to only accepts an explicit path to a cache directory or false\n * added a way to add token parsers, filters, and visitors without creating an extension\n * added three interfaces: Twig_NodeInterface, Twig_TokenParserInterface, and Twig_FilterInterface\n * changed the generated code to match the new coding standards\n * fixed sandbox mode (__toString() method check was not enforced if called implicitly from a simple statement like {{ article }})\n * added an exception when a child template has a non-empty body (as it is always ignored when rendering)\n\n* 0.9.6 (2010-05-12)\n\n * fixed variables defined outside a loop and for which the value changes in a for loop\n * fixed the test suite for PHP 5.2 and older versions of PHPUnit\n * added support for __call() in expression resolution\n * fixed node visiting for macros (macros are now visited by visitors as any other node)\n * fixed nested block definitions with a parent call (rarely useful but nonetheless supported now)\n * added the cycle filter\n * fixed the Lexer when mbstring.func_overload is used with an mbstring.internal_encoding different from ASCII\n * added a long-syntax for the set tag ({% set foo %}...{% endset %})\n * unit tests are now powered by PHPUnit\n * added support for gettext via the `i18n` extension\n * fixed twig_capitalize_string_filter() and fixed twig_length_filter() when used with UTF-8 values\n * added a more useful exception if an if tag is not closed properly\n * added support for escaping strategy in the autoescape tag\n * fixed lexer when a template has a big chunk of text between/in a block\n\n* 0.9.5 (2010-01-20)\n\nAs for any new release, don't forget to remove all cached templates after\nupgrading.\n\nIf you have defined custom filters, you MUST upgrade them for this release. To\nupgrade, replace \"array\" with \"new Twig_Filter_Function\", and replace the\nenvironment constant by the \"needs_environment\" option:\n\n  // before\n  'even'   => array('twig_is_even_filter', false),\n  'escape' => array('twig_escape_filter', true),\n\n  // after\n  'even'   => new Twig_Filter_Function('twig_is_even_filter'),\n  'escape' => new Twig_Filter_Function('twig_escape_filter', array('needs_environment' => true)),\n\nIf you have created NodeTransformer classes, you will need to upgrade them to\nthe new interface (please note that the interface is not yet considered\nstable).\n\n * fixed list nodes that did not extend the Twig_NodeListInterface\n * added the \"without loop\" option to the for tag (it disables the generation of the loop variable)\n * refactored node transformers to node visitors\n * fixed automatic-escaping for blocks\n * added a way to specify variables to pass to an included template\n * changed the automatic-escaping rules to be more sensible and more configurable in custom filters (the documentation lists all the rules)\n * improved the filter system to allow object methods to be used as filters\n * changed the Array and String loaders to actually make use of the cache mechanism\n * included the default filter function definitions in the extension class files directly (Core, Escaper)\n * added the // operator (like the floor() PHP function)\n * added the .. operator (as a syntactic sugar for the range filter when the step is 1)\n * added the in operator (as a syntactic sugar for the in filter)\n * added the following filters in the Core extension: in, range\n * added support for arrays (same behavior as in PHP, a mix between lists and dictionaries, arrays and hashes)\n * enhanced some error messages to provide better feedback in case of parsing errors\n\n* 0.9.4 (2009-12-02)\n\nIf you have custom loaders, you MUST upgrade them for this release: The\nTwig_Loader base class has been removed, and the Twig_LoaderInterface has also\nbeen changed (see the source code for more information or the documentation).\n\n * added support for DateTime instances for the date filter\n * fixed loop.last when the array only has one item\n * made it possible to insert newlines in tag and variable blocks\n * fixed a bug when a literal '\\n' were present in a template text\n * fixed bug when the filename of a template contains */\n * refactored loaders\n\n* 0.9.3 (2009-11-11)\n\nThis release is NOT backward compatible with the previous releases.\n\n  The loaders do not take the cache and autoReload arguments anymore. Instead,\n  the Twig_Environment class has two new options: cache and auto_reload.\n  Upgrading your code means changing this kind of code:\n\n      $loader = new Twig_Loader_Filesystem('/path/to/templates', '/path/to/compilation_cache', true);\n      $twig = new Twig_Environment($loader);\n\n  to something like this:\n\n      $loader = new Twig_Loader_Filesystem('/path/to/templates');\n      $twig = new Twig_Environment($loader, array(\n        'cache' => '/path/to/compilation_cache',\n        'auto_reload' => true,\n      ));\n\n * deprecated the \"items\" filter as it is not needed anymore\n * made cache and auto_reload options of Twig_Environment instead of arguments of Twig_Loader\n * optimized template loading speed\n * removed output when an error occurs in a template and render() is used\n * made major speed improvements for loops (up to 300% on even the smallest loops)\n * added properties as part of the sandbox mode\n * added public properties support (obj.item can now be the item property on the obj object)\n * extended set tag to support expression as value ({% set foo as 'foo' ~ 'bar' %} )\n * fixed bug when \\ was used in HTML\n\n* 0.9.2 (2009-10-29)\n\n * made some speed optimizations\n * changed the cache extension to .php\n * added a js escaping strategy\n * added support for short block tag\n * changed the filter tag to allow chained filters\n * made lexer more flexible as you can now change the default delimiters\n * added set tag\n * changed default directory permission when cache dir does not exist (more secure)\n * added macro support\n * changed filters first optional argument to be a Twig_Environment instance instead of a Twig_Template instance\n * made Twig_Autoloader::autoload() a static method\n * avoid writing template file if an error occurs\n * added $ escaping when outputting raw strings\n * enhanced some error messages to ease debugging\n * fixed empty cache files when the template contains an error\n\n* 0.9.1 (2009-10-14)\n\n  * fixed a bug in PHP 5.2.6\n  * fixed numbers with one than one decimal\n  * added support for method calls with arguments ({{ foo.bar('a', 43) }})\n  * made small speed optimizations\n  * made minor tweaks to allow better extensibility and flexibility\n\n* 0.9.0 (2009-10-12)\n\n * Initial release\n", "<?php\n\n/*\n * This file is part of Twig.\n *\n * (c) Fabien Potencier\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * Stores the Twig configuration.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass Twig_Environment\n{\n    const VERSION = '2.4.4-DEV';\n    const VERSION_ID = 20404;\n    const MAJOR_VERSION = 2;\n    const MINOR_VERSION = 4;\n    const RELEASE_VERSION = 4;\n    const EXTRA_VERSION = 'DEV';\n\n    private $charset;\n    private $loader;\n    private $debug;\n    private $autoReload;\n    private $cache;\n    private $lexer;\n    private $parser;\n    private $compiler;\n    private $baseTemplateClass;\n    private $globals = array();\n    private $resolvedGlobals;\n    private $loadedTemplates;\n    private $strictVariables;\n    private $templateClassPrefix = '__TwigTemplate_';\n    private $originalCache;\n    private $extensionSet;\n    private $runtimeLoaders = array();\n    private $runtimes = array();\n    private $optionsHash;\n    private $loading = array();\n\n    /**\n     * Constructor.\n     *\n     * Available options:\n     *\n     *  * debug: When set to true, it automatically set \"auto_reload\" to true as\n     *           well (default to false).\n     *\n     *  * charset: The charset used by the templates (default to UTF-8).\n     *\n     *  * base_template_class: The base template class to use for generated\n     *                         templates (default to Twig_Template).\n     *\n     *  * cache: An absolute path where to store the compiled templates,\n     *           a Twig_Cache_Interface implementation,\n     *           or false to disable compilation cache (default).\n     *\n     *  * auto_reload: Whether to reload the template if the original source changed.\n     *                 If you don't provide the auto_reload option, it will be\n     *                 determined automatically based on the debug value.\n     *\n     *  * strict_variables: Whether to ignore invalid variables in templates\n     *                      (default to false).\n     *\n     *  * autoescape: Whether to enable auto-escaping (default to html):\n     *                  * false: disable auto-escaping\n     *                  * html, js: set the autoescaping to one of the supported strategies\n     *                  * name: set the autoescaping strategy based on the template name extension\n     *                  * PHP callback: a PHP callback that returns an escaping strategy based on the template \"name\"\n     *\n     *  * optimizations: A flag that indicates which optimizations to apply\n     *                   (default to -1 which means that all optimizations are enabled;\n     *                   set it to 0 to disable).\n     *\n     * @param Twig_LoaderInterface $loader\n     * @param array                $options An array of options\n     */\n    public function __construct(Twig_LoaderInterface $loader, $options = array())\n    {\n        $this->setLoader($loader);\n\n        $options = array_merge(array(\n            'debug' => false,\n            'charset' => 'UTF-8',\n            'base_template_class' => 'Twig_Template',\n            'strict_variables' => false,\n            'autoescape' => 'html',\n            'cache' => false,\n            'auto_reload' => null,\n            'optimizations' => -1,\n        ), $options);\n\n        $this->debug = (bool) $options['debug'];\n        $this->setCharset($options['charset']);\n        $this->baseTemplateClass = $options['base_template_class'];\n        $this->autoReload = null === $options['auto_reload'] ? $this->debug : (bool) $options['auto_reload'];\n        $this->strictVariables = (bool) $options['strict_variables'];\n        $this->setCache($options['cache']);\n        $this->extensionSet = new Twig_ExtensionSet();\n\n        $this->addExtension(new Twig_Extension_Core());\n        $this->addExtension(new Twig_Extension_Escaper($options['autoescape']));\n        $this->addExtension(new Twig_Extension_Optimizer($options['optimizations']));\n    }\n\n    /**\n     * Gets the base template class for compiled templates.\n     *\n     * @return string The base template class name\n     */\n    public function getBaseTemplateClass()\n    {\n        return $this->baseTemplateClass;\n    }\n\n    /**\n     * Sets the base template class for compiled templates.\n     *\n     * @param string $class The base template class name\n     */\n    public function setBaseTemplateClass($class)\n    {\n        $this->baseTemplateClass = $class;\n        $this->updateOptionsHash();\n    }\n\n    /**\n     * Enables debugging mode.\n     */\n    public function enableDebug()\n    {\n        $this->debug = true;\n        $this->updateOptionsHash();\n    }\n\n    /**\n     * Disables debugging mode.\n     */\n    public function disableDebug()\n    {\n        $this->debug = false;\n        $this->updateOptionsHash();\n    }\n\n    /**\n     * Checks if debug mode is enabled.\n     *\n     * @return bool true if debug mode is enabled, false otherwise\n     */\n    public function isDebug()\n    {\n        return $this->debug;\n    }\n\n    /**\n     * Enables the auto_reload option.\n     */\n    public function enableAutoReload()\n    {\n        $this->autoReload = true;\n    }\n\n    /**\n     * Disables the auto_reload option.\n     */\n    public function disableAutoReload()\n    {\n        $this->autoReload = false;\n    }\n\n    /**\n     * Checks if the auto_reload option is enabled.\n     *\n     * @return bool true if auto_reload is enabled, false otherwise\n     */\n    public function isAutoReload()\n    {\n        return $this->autoReload;\n    }\n\n    /**\n     * Enables the strict_variables option.\n     */\n    public function enableStrictVariables()\n    {\n        $this->strictVariables = true;\n        $this->updateOptionsHash();\n    }\n\n    /**\n     * Disables the strict_variables option.\n     */\n    public function disableStrictVariables()\n    {\n        $this->strictVariables = false;\n        $this->updateOptionsHash();\n    }\n\n    /**\n     * Checks if the strict_variables option is enabled.\n     *\n     * @return bool true if strict_variables is enabled, false otherwise\n     */\n    public function isStrictVariables()\n    {\n        return $this->strictVariables;\n    }\n\n    /**\n     * Gets the current cache implementation.\n     *\n     * @param bool $original Whether to return the original cache option or the real cache instance\n     *\n     * @return Twig_CacheInterface|string|false A Twig_CacheInterface implementation,\n     *                                          an absolute path to the compiled templates,\n     *                                          or false to disable cache\n     */\n    public function getCache($original = true)\n    {\n        return $original ? $this->originalCache : $this->cache;\n    }\n\n    /**\n     * Sets the current cache implementation.\n     *\n     * @param Twig_CacheInterface|string|false $cache A Twig_CacheInterface implementation,\n     *                                                an absolute path to the compiled templates,\n     *                                                or false to disable cache\n     */\n    public function setCache($cache)\n    {\n        if (is_string($cache)) {\n            $this->originalCache = $cache;\n            $this->cache = new Twig_Cache_Filesystem($cache);\n        } elseif (false === $cache) {\n            $this->originalCache = $cache;\n            $this->cache = new Twig_Cache_Null();\n        } elseif ($cache instanceof Twig_CacheInterface) {\n            $this->originalCache = $this->cache = $cache;\n        } else {\n            throw new LogicException(sprintf('Cache can only be a string, false, or a Twig_CacheInterface implementation.'));\n        }\n    }\n\n    /**\n     * Gets the template class associated with the given string.\n     *\n     * The generated template class is based on the following parameters:\n     *\n     *  * The cache key for the given template;\n     *  * The currently enabled extensions;\n     *  * Whether the Twig C extension is available or not;\n     *  * PHP version;\n     *  * Twig version;\n     *  * Options with what environment was created.\n     *\n     * @param string   $name  The name for which to calculate the template class name\n     * @param int|null $index The index if it is an embedded template\n     *\n     * @return string The template class name\n     */\n    public function getTemplateClass($name, $index = null)\n    {\n        $key = $this->getLoader()->getCacheKey($name).$this->optionsHash;\n\n        return $this->templateClassPrefix.hash('sha256', $key).(null === $index ? '' : '_'.$index);\n    }\n\n    /**\n     * Renders a template.\n     *\n     * @param string $name    The template name\n     * @param array  $context An array of parameters to pass to the template\n     *\n     * @return string The rendered template\n     *\n     * @throws Twig_Error_Loader  When the template cannot be found\n     * @throws Twig_Error_Syntax  When an error occurred during compilation\n     * @throws Twig_Error_Runtime When an error occurred during rendering\n     */\n    public function render($name, array $context = array())\n    {\n        return $this->loadTemplate($name)->render($context);\n    }\n\n    /**\n     * Displays a template.\n     *\n     * @param string $name    The template name\n     * @param array  $context An array of parameters to pass to the template\n     *\n     * @throws Twig_Error_Loader  When the template cannot be found\n     * @throws Twig_Error_Syntax  When an error occurred during compilation\n     * @throws Twig_Error_Runtime When an error occurred during rendering\n     */\n    public function display($name, array $context = array())\n    {\n        $this->loadTemplate($name)->display($context);\n    }\n\n    /**\n     * Loads a template.\n     *\n     * @param string|Twig_TemplateWrapper|Twig_Template $name The template name\n     *\n     * @throws Twig_Error_Loader  When the template cannot be found\n     * @throws Twig_Error_Runtime When a previously generated cache is corrupted\n     * @throws Twig_Error_Syntax  When an error occurred during compilation\n     *\n     * @return Twig_TemplateWrapper\n     */\n    public function load($name)\n    {\n        if ($name instanceof Twig_TemplateWrapper) {\n            return $name;\n        }\n\n        if ($name instanceof Twig_Template) {\n            return new Twig_TemplateWrapper($this, $name);\n        }\n\n        return new Twig_TemplateWrapper($this, $this->loadTemplate($name));\n    }\n\n    /**\n     * Loads a template internal representation.\n     *\n     * This method is for internal use only and should never be called\n     * directly.\n     *\n     * @param string $name  The template name\n     * @param int    $index The index if it is an embedded template\n     *\n     * @return Twig_Template A template instance representing the given template name\n     *\n     * @throws Twig_Error_Loader  When the template cannot be found\n     * @throws Twig_Error_Runtime When a previously generated cache is corrupted\n     * @throws Twig_Error_Syntax  When an error occurred during compilation\n     *\n     * @internal\n     */\n    public function loadTemplate($name, $index = null)\n    {\n        $cls = $mainCls = $this->getTemplateClass($name);\n        if (null !== $index) {\n            $cls .= '_'.$index;\n        }\n\n        if (isset($this->loadedTemplates[$cls])) {\n            return $this->loadedTemplates[$cls];\n        }\n\n        if (!class_exists($cls, false)) {\n            $key = $this->cache->generateKey($name, $mainCls);\n\n            if (!$this->isAutoReload() || $this->isTemplateFresh($name, $this->cache->getTimestamp($key))) {\n                $this->cache->load($key);\n            }\n\n            if (!class_exists($cls, false)) {\n                $source = $this->getLoader()->getSourceContext($name);\n                $content = $this->compileSource($source);\n                $this->cache->write($key, $content);\n                $this->cache->load($key);\n\n                if (!class_exists($mainCls, false)) {\n                    /* Last line of defense if either $this->bcWriteCacheFile was used,\n                     * $this->cache is implemented as a no-op or we have a race condition\n                     * where the cache was cleared between the above calls to write to and load from\n                     * the cache.\n                     */\n                    eval('?>'.$content);\n                }\n\n                if (!class_exists($cls, false)) {\n                    throw new Twig_Error_Runtime(sprintf('Failed to load Twig template \"%s\", index \"%s\": cache is corrupted.', $name, $index), -1, $source);\n                }\n            }\n        }\n\n        // to be removed in 3.0\n        $this->extensionSet->initRuntime($this);\n\n        if (isset($this->loading[$cls])) {\n            throw new Twig_Error_Runtime(sprintf('Circular reference detected for Twig template \"%s\", path: %s.', $name, implode(' -> ', array_merge($this->loading, array($name)))));\n        }\n\n        $this->loading[$cls] = $name;\n\n        try {\n            $this->loadedTemplates[$cls] = new $cls($this);\n        } finally {\n            unset($this->loading[$cls]);\n        }\n\n        return $this->loadedTemplates[$cls];\n    }\n\n    /**\n     * Creates a template from source.\n     *\n     * This method should not be used as a generic way to load templates.\n     *\n     * @param string $template The template name\n     *\n     * @return Twig_Template A template instance representing the given template name\n     *\n     * @throws Twig_Error_Loader When the template cannot be found\n     * @throws Twig_Error_Syntax When an error occurred during compilation\n     */\n    public function createTemplate($template)\n    {\n        $name = sprintf('__string_template__%s', hash('sha256', $template, false));\n\n        $loader = new Twig_Loader_Chain(array(\n            new Twig_Loader_Array(array($name => $template)),\n            $current = $this->getLoader(),\n        ));\n\n        $this->setLoader($loader);\n        try {\n            $template = $this->loadTemplate($name);\n        } finally {\n            $this->setLoader($current);\n        }\n\n        return $template;\n    }\n\n    /**\n     * Returns true if the template is still fresh.\n     *\n     * Besides checking the loader for freshness information,\n     * this method also checks if the enabled extensions have\n     * not changed.\n     *\n     * @param string $name The template name\n     * @param int    $time The last modification time of the cached template\n     *\n     * @return bool true if the template is fresh, false otherwise\n     */\n    public function isTemplateFresh($name, $time)\n    {\n        return $this->extensionSet->getLastModified() <= $time && $this->getLoader()->isFresh($name, $time);\n    }\n\n    /**\n     * Tries to load a template consecutively from an array.\n     *\n     * Similar to loadTemplate() but it also accepts Twig_Template instances and an array\n     * of templates where each is tried to be loaded.\n     *\n     * @param string|Twig_Template|array $names A template or an array of templates to try consecutively\n     *\n     * @return Twig_Template\n     *\n     * @throws Twig_Error_Loader When none of the templates can be found\n     * @throws Twig_Error_Syntax When an error occurred during compilation\n     */\n    public function resolveTemplate($names)\n    {\n        if (!is_array($names)) {\n            $names = array($names);\n        }\n\n        foreach ($names as $name) {\n            if ($name instanceof Twig_Template) {\n                return $name;\n            }\n\n            try {\n                return $this->loadTemplate($name);\n            } catch (Twig_Error_Loader $e) {\n            }\n        }\n\n        if (1 === count($names)) {\n            throw $e;\n        }\n\n        throw new Twig_Error_Loader(sprintf('Unable to find one of the following templates: \"%s\".', implode('\", \"', $names)));\n    }\n\n    public function setLexer(Twig_Lexer $lexer)\n    {\n        $this->lexer = $lexer;\n    }\n\n    /**\n     * Tokenizes a source code.\n     *\n     * @return Twig_TokenStream\n     *\n     * @throws Twig_Error_Syntax When the code is syntactically wrong\n     */\n    public function tokenize(Twig_Source $source)\n    {\n        if (null === $this->lexer) {\n            $this->lexer = new Twig_Lexer($this);\n        }\n\n        return $this->lexer->tokenize($source);\n    }\n\n    public function setParser(Twig_Parser $parser)\n    {\n        $this->parser = $parser;\n    }\n\n    /**\n     * Converts a token stream to a node tree.\n     *\n     * @return Twig_Node_Module\n     *\n     * @throws Twig_Error_Syntax When the token stream is syntactically or semantically wrong\n     */\n    public function parse(Twig_TokenStream $stream)\n    {\n        if (null === $this->parser) {\n            $this->parser = new Twig_Parser($this);\n        }\n\n        return $this->parser->parse($stream);\n    }\n\n    public function setCompiler(Twig_Compiler $compiler)\n    {\n        $this->compiler = $compiler;\n    }\n\n    /**\n     * Compiles a node and returns the PHP code.\n     *\n     * @return string The compiled PHP source code\n     */\n    public function compile(Twig_Node $node)\n    {\n        if (null === $this->compiler) {\n            $this->compiler = new Twig_Compiler($this);\n        }\n\n        return $this->compiler->compile($node)->getSource();\n    }\n\n    /**\n     * Compiles a template source code.\n     *\n     * @return string The compiled PHP source code\n     *\n     * @throws Twig_Error_Syntax When there was an error during tokenizing, parsing or compiling\n     */\n    public function compileSource(Twig_Source $source)\n    {\n        try {\n            return $this->compile($this->parse($this->tokenize($source)));\n        } catch (Twig_Error $e) {\n            $e->setSourceContext($source);\n            throw $e;\n        } catch (Exception $e) {\n            throw new Twig_Error_Syntax(sprintf('An exception has been thrown during the compilation of a template (\"%s\").', $e->getMessage()), -1, $source, $e);\n        }\n    }\n\n    public function setLoader(Twig_LoaderInterface $loader)\n    {\n        $this->loader = $loader;\n    }\n\n    /**\n     * Gets the Loader instance.\n     *\n     * @return Twig_LoaderInterface\n     */\n    public function getLoader()\n    {\n        return $this->loader;\n    }\n\n    /**\n     * Sets the default template charset.\n     *\n     * @param string $charset The default charset\n     */\n    public function setCharset($charset)\n    {\n        if ('UTF8' === $charset = strtoupper($charset)) {\n            // iconv on Windows requires \"UTF-8\" instead of \"UTF8\"\n            $charset = 'UTF-8';\n        }\n\n        $this->charset = $charset;\n    }\n\n    /**\n     * Gets the default template charset.\n     *\n     * @return string The default charset\n     */\n    public function getCharset()\n    {\n        return $this->charset;\n    }\n\n    /**\n     * Returns true if the given extension is registered.\n     *\n     * @param string $class The extension class name\n     *\n     * @return bool Whether the extension is registered or not\n     */\n    public function hasExtension($class)\n    {\n        return $this->extensionSet->hasExtension($class);\n    }\n\n    /**\n     * Adds a runtime loader.\n     */\n    public function addRuntimeLoader(Twig_RuntimeLoaderInterface $loader)\n    {\n        $this->runtimeLoaders[] = $loader;\n    }\n\n    /**\n     * Gets an extension by class name.\n     *\n     * @param string $class The extension class name\n     *\n     * @return Twig_ExtensionInterface\n     */\n    public function getExtension($class)\n    {\n        return $this->extensionSet->getExtension($class);\n    }\n\n    /**\n     * Returns the runtime implementation of a Twig element (filter/function/test).\n     *\n     * @param string $class A runtime class name\n     *\n     * @return object The runtime implementation\n     *\n     * @throws Twig_Error_Runtime When the template cannot be found\n     */\n    public function getRuntime($class)\n    {\n        if (isset($this->runtimes[$class])) {\n            return $this->runtimes[$class];\n        }\n\n        foreach ($this->runtimeLoaders as $loader) {\n            if (null !== $runtime = $loader->load($class)) {\n                return $this->runtimes[$class] = $runtime;\n            }\n        }\n\n        throw new Twig_Error_Runtime(sprintf('Unable to load the \"%s\" runtime.', $class));\n    }\n\n    public function addExtension(Twig_ExtensionInterface $extension)\n    {\n        $this->extensionSet->addExtension($extension);\n        $this->updateOptionsHash();\n    }\n\n    /**\n     * Registers an array of extensions.\n     *\n     * @param array $extensions An array of extensions\n     */\n    public function setExtensions(array $extensions)\n    {\n        $this->extensionSet->setExtensions($extensions);\n    }\n\n    /**\n     * Returns all registered extensions.\n     *\n     * @return Twig_ExtensionInterface[] An array of extensions (keys are for internal usage only and should not be relied on)\n     */\n    public function getExtensions()\n    {\n        return $this->extensionSet->getExtensions();\n    }\n\n    public function addTokenParser(Twig_TokenParserInterface $parser)\n    {\n        $this->extensionSet->addTokenParser($parser);\n    }\n\n    /**\n     * Gets the registered Token Parsers.\n     *\n     * @return Twig_TokenParserInterface[]\n     *\n     * @internal\n     */\n    public function getTokenParsers()\n    {\n        return $this->extensionSet->getTokenParsers();\n    }\n\n    /**\n     * Gets registered tags.\n     *\n     * @return Twig_TokenParserInterface[]\n     *\n     * @internal\n     */\n    public function getTags()\n    {\n        $tags = array();\n        foreach ($this->getTokenParsers() as $parser) {\n            $tags[$parser->getTag()] = $parser;\n        }\n\n        return $tags;\n    }\n\n    public function addNodeVisitor(Twig_NodeVisitorInterface $visitor)\n    {\n        $this->extensionSet->addNodeVisitor($visitor);\n    }\n\n    /**\n     * Gets the registered Node Visitors.\n     *\n     * @return Twig_NodeVisitorInterface[]\n     *\n     * @internal\n     */\n    public function getNodeVisitors()\n    {\n        return $this->extensionSet->getNodeVisitors();\n    }\n\n    public function addFilter(Twig_Filter $filter)\n    {\n        $this->extensionSet->addFilter($filter);\n    }\n\n    /**\n     * Get a filter by name.\n     *\n     * Subclasses may override this method and load filters differently;\n     * so no list of filters is available.\n     *\n     * @param string $name The filter name\n     *\n     * @return Twig_Filter|false A Twig_Filter instance or false if the filter does not exist\n     *\n     * @internal\n     */\n    public function getFilter($name)\n    {\n        return $this->extensionSet->getFilter($name);\n    }\n\n    public function registerUndefinedFilterCallback(callable $callable)\n    {\n        $this->extensionSet->registerUndefinedFilterCallback($callable);\n    }\n\n    /**\n     * Gets the registered Filters.\n     *\n     * Be warned that this method cannot return filters defined with registerUndefinedFilterCallback.\n     *\n     * @return Twig_Filter[]\n     *\n     * @see registerUndefinedFilterCallback\n     *\n     * @internal\n     */\n    public function getFilters()\n    {\n        return $this->extensionSet->getFilters();\n    }\n\n    /**\n     * Registers a Test.\n     *\n     * @param Twig_Test $test A Twig_Test instance\n     */\n    public function addTest(Twig_Test $test)\n    {\n        $this->extensionSet->addTest($test);\n    }\n\n    /**\n     * Gets the registered Tests.\n     *\n     * @return Twig_Test[]\n     *\n     * @internal\n     */\n    public function getTests()\n    {\n        return $this->extensionSet->getTests();\n    }\n\n    /**\n     * Gets a test by name.\n     *\n     * @param string $name The test name\n     *\n     * @return Twig_Test|false A Twig_Test instance or false if the test does not exist\n     *\n     * @internal\n     */\n    public function getTest($name)\n    {\n        return $this->extensionSet->getTest($name);\n    }\n\n    public function addFunction(Twig_Function $function)\n    {\n        $this->extensionSet->addFunction($function);\n    }\n\n    /**\n     * Get a function by name.\n     *\n     * Subclasses may override this method and load functions differently;\n     * so no list of functions is available.\n     *\n     * @param string $name function name\n     *\n     * @return Twig_Function|false A Twig_Function instance or false if the function does not exist\n     *\n     * @internal\n     */\n    public function getFunction($name)\n    {\n        return $this->extensionSet->getFunction($name);\n    }\n\n    public function registerUndefinedFunctionCallback(callable $callable)\n    {\n        $this->extensionSet->registerUndefinedFunctionCallback($callable);\n    }\n\n    /**\n     * Gets registered functions.\n     *\n     * Be warned that this method cannot return functions defined with registerUndefinedFunctionCallback.\n     *\n     * @return Twig_Function[]\n     *\n     * @see registerUndefinedFunctionCallback\n     *\n     * @internal\n     */\n    public function getFunctions()\n    {\n        return $this->extensionSet->getFunctions();\n    }\n\n    /**\n     * Registers a Global.\n     *\n     * New globals can be added before compiling or rendering a template;\n     * but after, you can only update existing globals.\n     *\n     * @param string $name  The global name\n     * @param mixed  $value The global value\n     */\n    public function addGlobal($name, $value)\n    {\n        if ($this->extensionSet->isInitialized() && !array_key_exists($name, $this->getGlobals())) {\n            throw new LogicException(sprintf('Unable to add global \"%s\" as the runtime or the extensions have already been initialized.', $name));\n        }\n\n        if (null !== $this->resolvedGlobals) {\n            $this->resolvedGlobals[$name] = $value;\n        } else {\n            $this->globals[$name] = $value;\n        }\n    }\n\n    /**\n     * Gets the registered Globals.\n     *\n     * @return array An array of globals\n     *\n     * @internal\n     */\n    public function getGlobals()\n    {\n        if ($this->extensionSet->isInitialized()) {\n            if (null === $this->resolvedGlobals) {\n                $this->resolvedGlobals = array_merge($this->extensionSet->getGlobals(), $this->globals);\n            }\n\n            return $this->resolvedGlobals;\n        }\n\n        return array_merge($this->extensionSet->getGlobals(), $this->globals);\n    }\n\n    /**\n     * Merges a context with the defined globals.\n     *\n     * @param array $context An array representing the context\n     *\n     * @return array The context merged with the globals\n     */\n    public function mergeGlobals(array $context)\n    {\n        // we don't use array_merge as the context being generally\n        // bigger than globals, this code is faster.\n        foreach ($this->getGlobals() as $key => $value) {\n            if (!array_key_exists($key, $context)) {\n                $context[$key] = $value;\n            }\n        }\n\n        return $context;\n    }\n\n    /**\n     * Gets the registered unary Operators.\n     *\n     * @return array An array of unary operators\n     *\n     * @internal\n     */\n    public function getUnaryOperators()\n    {\n        return $this->extensionSet->getUnaryOperators();\n    }\n\n    /**\n     * Gets the registered binary Operators.\n     *\n     * @return array An array of binary operators\n     *\n     * @internal\n     */\n    public function getBinaryOperators()\n    {\n        return $this->extensionSet->getBinaryOperators();\n    }\n\n    private function updateOptionsHash()\n    {\n        $this->optionsHash = implode(':', array(\n            $this->extensionSet->getSignature(),\n            PHP_MAJOR_VERSION,\n            PHP_MINOR_VERSION,\n            self::VERSION,\n            (int) $this->debug,\n            $this->baseTemplateClass,\n            (int) $this->strictVariables,\n        ));\n    }\n}\n\nclass_alias('Twig_Environment', 'Twig\\Environment', false);\n"], "fixing_code": ["* 2.4.4 (2017-09-27)\n\n * added Twig_Profiler_Profile::reset()\n * fixed use TokenParser to return an empty Node\n * added RuntimeExtensionInterface\n * added circular reference detection when loading templates\n * added support for runtime loaders in IntegrationTestCase\n * fixed deprecation when using Twig_Profiler_Dumper_Html\n * removed @final from Twig_Profiler_Dumper_Text\n\n* 2.4.3 (2017-06-07)\n\n * fixed namespaces introduction\n\n* 2.4.2 (2017-06-05)\n\n * fixed namespaces introduction\n\n* 2.4.1 (2017-06-05)\n\n * fixed namespaces introduction\n\n* 2.4.0 (2017-06-05)\n\n * added support for PHPUnit 6 when testing extensions\n * fixed PHP 7.2 compatibility\n * fixed template name generation in Twig_Environment::createTemplate()\n * removed final tag on Twig_TokenParser_Include\n * dropped HHVM support\n * added namespaced aliases for all (non-deprecated) classes and interfaces\n * marked Twig_Filter, Twig_Function, Twig_Test, Twig_Node_Module and Twig_Profiler_Profile as final via the @final annotation\n\n* 2.3.2 (2017-04-20)\n\n * fixed edge case in the method cache for Twig attributes\n\n* 2.3.1 (2017-04-18)\n\n * fixed the empty() test\n\n* 2.3.0 (2017-03-22)\n\n * fixed a race condition handling when writing cache files\n * \"length\" filter now returns string length when applied to an object that does\n   not implement \\Countable but provides __toString()\n * \"empty\" test will now consider the return value of the __toString() method for\n   objects implement __toString() but not \\Countable\n * fixed JS escaping for unicode characters with higher code points\n * added error message when calling `parent()` in a block that doesn't exist in the parent template\n\n* 2.2.0 (2017-02-26)\n\n * added a PSR-11 compatible runtime loader\n * added `side` argument to `trim` to allow left or right trimming only.\n\n* 2.1.0 (2017-01-11)\n\n * fixed twig_get_attribute()\n * added Twig_NodeCaptureInterface for nodes that capture all output\n\n* 2.0.0 (2017-01-05)\n\n * removed the C extension\n * moved Twig_Environment::getAttribute() to twig_get_attribute()\n * removed Twig_Environment::getLexer(), Twig_Environment::getParser(), Twig_Environment::getCompiler()\n * removed Twig_Compiler::getFilename()\n * added hasser support in Twig_Template::getAttribute()\n * sped up the json_encode filter\n * removed reserved macro names; all names can be used as macro\n * removed Twig_Template::getEnvironment()\n * changed _self variable to return the current template name\n * made the loader a required argument of Twig_Environment constructor\n * removed Twig_Environment::clearTemplateCache()\n * removed Twig_Autoloader (use Composer instead)\n * removed `true` as an equivalent to `html` for the auto-escaping strategy\n * removed pre-1.8 autoescape tag syntax\n * dropped support for PHP 5.x\n * removed the ability to register a global variable after the runtime or the extensions have been initialized\n * improved the performance of the filesystem loader\n * removed features that were deprecated in 1.x\n\n* 1.35.0 (2017-XX-XX)\n\n * added Twig_Profiler_Profile::reset()\n * fixed use TokenParser to return an empty Node\n * added RuntimeExtensionInterface\n * added circular reference detection when loading templates\n\n* 1.34.4 (2017-07-04)\n\n * added support for runtime loaders in IntegrationTestCase\n * fixed deprecation when using Twig_Profiler_Dumper_Html\n\n* 1.34.3 (2017-06-07)\n\n * fixed namespaces introduction\n\n* 1.34.2 (2017-06-05)\n\n * fixed namespaces introduction\n\n* 1.34.1 (2017-06-05)\n\n * fixed namespaces introduction\n\n* 1.34.0 (2017-06-05)\n\n * added support for PHPUnit 6 when testing extensions\n * fixed PHP 7.2 compatibility\n * fixed template name generation in Twig_Environment::createTemplate()\n * removed final tag on Twig_TokenParser_Include\n * added namespaced aliases for all (non-deprecated) classes and interfaces\n * dropped HHVM support\n * dropped PHP 5.2 support\n\n* 1.33.2 (2017-04-20)\n\n * fixed edge case in the method cache for Twig attributes\n\n* 1.33.1 (2017-04-18)\n\n * fixed the empty() test\n\n* 1.33.0 (2017-03-22)\n\n * fixed a race condition handling when writing cache files\n * \"length\" filter now returns string length when applied to an object that does\n   not implement \\Countable but provides __toString()\n * \"empty\" test will now consider the return value of the __toString() method for\n   objects implement __toString() but not \\Countable\n * fixed JS escaping for unicode characters with higher code points\n\n* 1.32.0 (2017-02-26)\n\n * fixed deprecation notice in Twig_Util_DeprecationCollector\n * added a PSR-11 compatible runtime loader\n * added `side` argument to `trim` to allow left or right trimming only.\n\n* 1.31.0 (2017-01-11)\n\n * added Twig_NodeCaptureInterface for nodes that capture all output\n * fixed marking the environment as initialized too early\n * fixed C89 compat for the C extension\n * turned fatal error into exception when a previously generated cache is corrupted\n * fixed offline cache warm-ups for embedded templates\n\n* 1.30.0 (2016-12-23)\n\n * added Twig_FactoryRuntimeLoader\n * deprecated function/test/filter/tag overriding\n * deprecated the \"disable_c_ext\" attribute on Twig_Node_Expression_GetAttr\n\n* 1.29.0 (2016-12-13)\n\n * fixed sandbox being left enabled if an exception is thrown while rendering\n * marked some classes as being final (via @final)\n * made Twig_Error report real source path when possible\n * added support for {{ _self }} to provide an upgrade path from 1.x to 2.0 (replaces {{ _self.templateName }})\n * deprecated silent display of undefined blocks\n * deprecated support for mbstring.func_overload != 0\n\n* 1.28.2 (2016-11-23)\n\n * fixed precedence between getFoo() and isFoo() in Twig_Template::getAttribute()\n * improved a deprecation message\n\n* 1.28.1 (2016-11-18)\n\n * fixed block() function when used with a template argument\n\n* 1.28.0 (2016-11-17)\n\n * added support for the PHP 7 null coalescing operator for the ?? Twig implementation\n * exposed a way to access template data and methods in a portable way\n * changed context access to use the PHP 7 null coalescing operator when available\n * added the \"with\" tag\n * added support for a custom template on the block() function\n * added \"is defined\" support for block() and constant()\n * optimized the way attributes are fetched\n\n* 1.27.0 (2016-10-25)\n\n * deprecated Twig_Parser::getEnvironment()\n * deprecated Twig_Parser::addHandler() and Twig_Parser::addNodeVisitor()\n * deprecated Twig_Compiler::addIndentation()\n * fixed regression when registering two extensions having the same class name\n * deprecated Twig_LoaderInterface::getSource() (implement Twig_SourceContextLoaderInterface instead)\n * fixed the filesystem loader with relative paths\n * deprecated Twig_Node::getLine() in favor of Twig_Node::getTemplateLine()\n * deprecated Twig_Template::getSource() in favor of Twig_Template::getSourceContext()\n * deprecated Twig_Node::getFilename() in favor of Twig_Node::getTemplateName()\n * deprecated the \"filename\" escaping strategy (use \"name\" instead)\n * added Twig_Source to hold information about the original template\n * deprecated Twig_Error::getTemplateFile() and Twig_Error::setTemplateFile() in favor of Twig_Error::getTemplateName() and Twig_Error::setTemplateName()\n * deprecated Parser::getFilename()\n * fixed template paths when a template name contains a protocol like vfs://\n * improved debugging with Twig_Sandbox_SecurityError exceptions for disallowed methods and properties\n\n* 1.26.1 (2016-10-05)\n\n * removed template source code from generated template classes when debug is disabled\n * fixed default implementation of Twig_Template::getDebugInfo() for better BC\n * fixed regression on static calls for functions/filters/tests\n\n* 1.26.0 (2016-10-02)\n\n * added template cache invalidation based on more environment options\n * added a missing deprecation notice\n * fixed template paths when a template is stored in a PHAR file\n * allowed filters/functions/tests implementation to use a different class than the extension they belong to\n * deprecated Twig_ExtensionInterface::getName()\n\n* 1.25.0 (2016-09-21)\n\n * changed the way we store template source in template classes\n * removed usage of realpath in cache keys\n * fixed Twig cache sharing when used with different versions of PHP\n * removed embed parent workaround for simple use cases\n * deprecated the ability to store non Node instances in Node::$nodes\n * deprecated Twig_Environment::getLexer(), Twig_Environment::getParser(), Twig_Environment::getCompiler()\n * deprecated Twig_Compiler::getFilename()\n\n* 1.24.2 (2016-09-01)\n\n * fixed static callables\n * fixed a potential PHP warning when loading the cache\n * fixed a case where the autoescaping does not work as expected\n\n* 1.24.1 (2016-05-30)\n\n * fixed reserved keywords (forbids true, false, null and none keywords for variables names)\n * fixed support for PHP7 (Throwable support)\n * marked the following methods as being internals on Twig_Environment:\n   getFunctions(), getFilters(), getTests(), getFunction(), getFilter(), getTest(),\n   getTokenParsers(), getTags(), getNodeVisitors(), getUnaryOperators(), getBinaryOperators(),\n   getFunctions(), getFilters(), getGlobals(), initGlobals(), initExtensions(), and initExtension()\n\n* 1.24.0 (2016-01-25)\n\n * adding support for the ?? operator\n * fixed the defined test when used on a constant, a map, or a sequence\n * undeprecated _self (should only be used to get the template name, not the template instance)\n * fixed parsing on PHP7\n\n* 1.23.3 (2016-01-11)\n\n * fixed typo\n\n* 1.23.2 (2015-01-11)\n\n * added versions in deprecated messages\n * made file cache tolerant for trailing (back)slashes on directory configuration\n * deprecated unused Twig_Node_Expression_ExtensionReference class\n\n* 1.23.1 (2015-11-05)\n\n * fixed some exception messages which triggered PHP warnings\n * fixed BC on Twig_Test_NodeTestCase\n\n* 1.23.0 (2015-10-29)\n\n * deprecated the possibility to override an extension by registering another one with the same name\n * deprecated Twig_ExtensionInterface::getGlobals() (added Twig_Extension_GlobalsInterface for BC)\n * deprecated Twig_ExtensionInterface::initRuntime() (added Twig_Extension_InitRuntimeInterface for BC)\n * deprecated Twig_Environment::computeAlternatives()\n\n* 1.22.3 (2015-10-13)\n\n * fixed regression when using null as a cache strategy\n * improved performance when checking template freshness\n * fixed warnings when loaded templates do not exist\n * fixed template class name generation to prevent possible collisions\n * fixed logic for custom escapers to call them even on integers and null values\n * changed template cache names to take into account the Twig C extension\n\n* 1.22.2 (2015-09-22)\n\n * fixed a race condition in template loading\n\n* 1.22.1 (2015-09-15)\n\n * fixed regression in template_from_string\n\n* 1.22.0 (2015-09-13)\n\n * made Twig_Test_IntegrationTestCase more flexible\n * added an option to force PHP bytecode invalidation when writing a compiled template into the cache\n * fixed the profiler duration for the root node\n * changed template cache names to take into account enabled extensions\n * deprecated Twig_Environment::clearCacheFiles(), Twig_Environment::getCacheFilename(),\n   Twig_Environment::writeCacheFile(), and Twig_Environment::getTemplateClassPrefix()\n * added a way to override the filesystem template cache system\n * added a way to get the original template source from Twig_Template\n\n* 1.21.2 (2015-09-09)\n\n * fixed variable names for the deprecation triggering code\n * fixed escaping strategy detection based on filename\n * added Traversable support for replace, merge, and sort\n * deprecated support for character by character replacement for the \"replace\" filter\n\n* 1.21.1 (2015-08-26)\n\n * fixed regression when using the deprecated Twig_Test_* classes\n\n* 1.21.0 (2015-08-24)\n\n * added deprecation notices for deprecated features\n * added a deprecation \"framework\" for filters/functions/tests and test fixtures\n\n* 1.20.0 (2015-08-12)\n\n * forbid access to the Twig environment from templates and internal parts of Twig_Template\n * fixed limited RCEs when in sandbox mode\n * deprecated Twig_Template::getEnvironment()\n * deprecated the _self variable for usage outside of the from and import tags\n * added Twig_BaseNodeVisitor to ease the compatibility of node visitors\n   between 1.x and 2.x\n\n* 1.19.0 (2015-07-31)\n\n * fixed wrong error message when including an undefined template in a child template\n * added support for variadic filters, functions, and tests\n * added support for extra positional arguments in macros\n * added ignore_missing flag to the source function\n * fixed batch filter with zero items\n * deprecated Twig_Environment::clearTemplateCache()\n * fixed sandbox disabling when using the include function\n\n* 1.18.2 (2015-06-06)\n\n * fixed template/line guessing in exceptions for nested templates\n * optimized the number of inodes and the size of realpath cache when using the cache\n\n* 1.18.1 (2015-04-19)\n\n * fixed memory leaks in the C extension\n * deprecated Twig_Loader_String\n * fixed the slice filter when used with a SimpleXMLElement object\n * fixed filesystem loader when trying to load non-files (like directories)\n\n* 1.18.0 (2015-01-25)\n\n * fixed some error messages where the line was wrong (unknown variables or argument names)\n * added a new way to customize the main Module node (via empty nodes)\n * added Twig_Environment::createTemplate() to create a template from a string\n * added a profiler\n * fixed filesystem loader cache when different file paths are used for the same template\n\n* 1.17.0 (2015-01-14)\n\n * added a 'filename' autoescaping strategy, which dynamically chooses the\n   autoescaping strategy for a template based on template file extension.\n\n* 1.16.3 (2014-12-25)\n\n * fixed regression for dynamic parent templates\n * fixed cache management with statcache\n * fixed a regression in the slice filter\n\n* 1.16.2 (2014-10-17)\n\n * fixed timezone on dates as strings\n * fixed 2-words test names when a custom node class is not used\n * fixed macros when using an argument named like a PHP super global (like GET or POST)\n * fixed date_modify when working with DateTimeImmutable\n * optimized for loops\n * fixed multi-byte characters handling in the split filter\n * fixed a regression in the in operator\n * fixed a regression in the slice filter\n\n* 1.16.1 (2014-10-10)\n\n * improved error reporting in a sandboxed template\n * fixed missing error file/line information under certain circumstances\n * fixed wrong error line number in some error messages\n * fixed the in operator to use strict comparisons\n * sped up the slice filter\n * fixed for mb function overload mb_substr acting different\n * fixed the attribute() function when passing a variable for the arguments\n\n* 1.16.0 (2014-07-05)\n\n * changed url_encode to always encode according to RFC 3986\n * fixed inheritance in a 'use'-hierarchy\n * removed the __toString policy check when the sandbox is disabled\n * fixed recursively calling blocks in templates with inheritance\n\n* 1.15.1 (2014-02-13)\n\n * fixed the conversion of the special '0000-00-00 00:00' date\n * added an error message when trying to import an undefined block from a trait\n * fixed a C extension crash when accessing defined but uninitialized property.\n\n* 1.15.0 (2013-12-06)\n\n * made ignoreStrictCheck in Template::getAttribute() works with __call() methods throwing BadMethodCallException\n * added min and max functions\n * added the round filter\n * fixed a bug that prevented the optimizers to be enabled/disabled selectively\n * fixed first and last filters for UTF-8 strings\n * added a source function to include the content of a template without rendering it\n * fixed the C extension sandbox behavior when get or set is prepend to method name\n\n* 1.14.2 (2013-10-30)\n\n * fixed error filename/line when an error occurs in an included file\n * allowed operators that contain whitespaces to have more than one whitespace\n * allowed tests to be made of 1 or 2 words (like \"same as\" or \"divisible by\")\n\n* 1.14.1 (2013-10-15)\n\n * made it possible to use named operators as variables\n * fixed the possibility to have a variable named 'matches'\n * added support for PHP 5.5 DateTimeInterface\n\n* 1.14.0 (2013-10-03)\n\n * fixed usage of the html_attr escaping strategy to avoid double-escaping with the html strategy\n * added new operators: ends with, starts with, and matches\n * fixed some compatibility issues with HHVM\n * added a way to add custom escaping strategies\n * fixed the C extension compilation on Windows\n * fixed the batch filter when using a fill argument with an exact match of elements to batch\n * fixed the filesystem loader cache when a template name exists in several namespaces\n * fixed template_from_string when the template includes or extends other ones\n * fixed a crash of the C extension on an edge case\n\n* 1.13.2 (2013-08-03)\n\n * fixed the error line number for an error occurs in and embedded template\n * fixed crashes of the C extension on some edge cases\n\n* 1.13.1 (2013-06-06)\n\n * added the possibility to ignore the filesystem constructor argument in Twig_Loader_Filesystem\n * fixed Twig_Loader_Chain::exists() for a loader which implements Twig_ExistsLoaderInterface\n * adjusted backtrace call to reduce memory usage when an error occurs\n * added support for object instances as the second argument of the constant test\n * fixed the include function when used in an assignment\n\n* 1.13.0 (2013-05-10)\n\n * fixed getting a numeric-like item on a variable ('09' for instance)\n * fixed getting a boolean or float key on an array, so it is consistent with PHP's array access:\n   `{{ array[false] }}` behaves the same as `echo $array[false];` (equals `$array[0]`)\n * made the escape filter 20% faster for happy path (escaping string for html with UTF-8)\n * changed \u2603 to \u00a7 in tests\n * enforced usage of named arguments after positional ones\n\n* 1.12.3 (2013-04-08)\n\n * fixed a security issue in the filesystem loader where it was possible to include a template one\n   level above the configured path\n * fixed fatal error that should be an exception when adding a filter/function/test too late\n * added a batch filter\n * added support for encoding an array as query string in the url_encode filter\n\n* 1.12.2 (2013-02-09)\n\n * fixed the timezone used by the date filter and function when the given date contains a timezone (like 2010-01-28T15:00:00+02:00)\n * fixed globals when getGlobals is called early on\n * added the first and last filter\n\n* 1.12.1 (2013-01-15)\n\n * added support for object instances as the second argument of the constant function\n * relaxed globals management to avoid a BC break\n * added support for {{ some_string[:2] }}\n\n* 1.12.0 (2013-01-08)\n\n * added verbatim as an alias for the raw tag to avoid confusion with the raw filter\n * fixed registration of tests and functions as anonymous functions\n * fixed globals management\n\n* 1.12.0-RC1 (2012-12-29)\n\n * added an include function (does the same as the include tag but in a more flexible way)\n * added the ability to use any PHP callable to define filters, functions, and tests\n * added a syntax error when using a loop variable that is not defined\n * added the ability to set default values for macro arguments\n * added support for named arguments for filters, tests, and functions\n * moved filters/functions/tests syntax errors to the parser\n * added support for extended ternary operator syntaxes\n\n* 1.11.1 (2012-11-11)\n\n * fixed debug info line numbering (was off by 2)\n * fixed escaping when calling a macro inside another one (regression introduced in 1.9.1)\n * optimized variable access on PHP 5.4\n * fixed a crash of the C extension when an exception was thrown from a macro called without being imported (using _self.XXX)\n\n* 1.11.0 (2012-11-07)\n\n * fixed macro compilation when a variable name is a PHP reserved keyword\n * changed the date filter behavior to always apply the default timezone, except if false is passed as the timezone\n * fixed bitwise operator precedences\n * added the template_from_string function\n * fixed default timezone usage for the date function\n * optimized the way Twig exceptions are managed (to make them faster)\n * added Twig_ExistsLoaderInterface (implementing this interface in your loader make the chain loader much faster)\n\n* 1.10.3 (2012-10-19)\n\n * fixed wrong template location in some error messages\n * reverted a BC break introduced in 1.10.2\n * added a split filter\n\n* 1.10.2 (2012-10-15)\n\n * fixed macro calls on PHP 5.4\n\n* 1.10.1 (2012-10-15)\n\n * made a speed optimization to macro calls when imported via the \"import\" tag\n * fixed C extension compilation on Windows\n * fixed a segfault in the C extension when using DateTime objects\n\n* 1.10.0 (2012-09-28)\n\n * extracted functional tests framework to make it reusable for third-party extensions\n * added namespaced templates support in Twig_Loader_Filesystem\n * added Twig_Loader_Filesystem::prependPath()\n * fixed an error when a token parser pass a closure as a test to the subparse() method\n\n* 1.9.2 (2012-08-25)\n\n * fixed the in operator for objects that contain circular references\n * fixed the C extension when accessing a public property of an object implementing the \\ArrayAccess interface\n\n* 1.9.1 (2012-07-22)\n\n * optimized macro calls when auto-escaping is on\n * fixed wrong parent class for Twig_Function_Node\n * made Twig_Loader_Chain more explicit about problems\n\n* 1.9.0 (2012-07-13)\n\n * made the parsing independent of the template loaders\n * fixed exception trace when an error occurs when rendering a child template\n * added escaping strategies for CSS, URL, and HTML attributes\n * fixed nested embed tag calls\n * added the date_modify filter\n\n* 1.8.3 (2012-06-17)\n\n * fixed paths in the filesystem loader when passing a path that ends with a slash or a backslash\n * fixed escaping when a project defines a function named html or js\n * fixed chmod mode to apply the umask correctly\n\n* 1.8.2 (2012-05-30)\n\n * added the abs filter\n * fixed a regression when using a number in template attributes\n * fixed compiler when mbstring.func_overload is set to 2\n * fixed DateTimeZone support in date filter\n\n* 1.8.1 (2012-05-17)\n\n * fixed a regression when dealing with SimpleXMLElement instances in templates\n * fixed \"is_safe\" value for the \"dump\" function when \"html_errors\" is not defined in php.ini\n * switched to use mbstring whenever possible instead of iconv (you might need to update your encoding as mbstring and iconv encoding names sometimes differ)\n\n* 1.8.0 (2012-05-08)\n\n * enforced interface when adding tests, filters, functions, and node visitors from extensions\n * fixed a side-effect of the date filter where the timezone might be changed\n * simplified usage of the autoescape tag; the only (optional) argument is now the escaping strategy or false (with a BC layer)\n * added a way to dynamically change the auto-escaping strategy according to the template \"filename\"\n * changed the autoescape option to also accept a supported escaping strategy (for BC, true is equivalent to html)\n * added an embed tag\n\n* 1.7.0 (2012-04-24)\n\n * fixed a PHP warning when using CIFS\n * fixed template line number in some exceptions\n * added an iterable test\n * added an error when defining two blocks with the same name in a template\n * added the preserves_safety option for filters\n * fixed a PHP notice when trying to access a key on a non-object/array variable\n * enhanced error reporting when the template file is an instance of SplFileInfo\n * added Twig_Environment::mergeGlobals()\n * added compilation checks to avoid misuses of the sandbox tag\n * fixed filesystem loader freshness logic for high traffic websites\n * fixed random function when charset is null\n\n* 1.6.5 (2012-04-11)\n\n * fixed a regression when a template only extends another one without defining any blocks\n\n* 1.6.4 (2012-04-02)\n\n * fixed PHP notice in Twig_Error::guessTemplateLine() introduced in 1.6.3\n * fixed performance when compiling large files\n * optimized parent template creation when the template does not use dynamic inheritance\n\n* 1.6.3 (2012-03-22)\n\n * fixed usage of Z_ADDREF_P for PHP 5.2 in the C extension\n * fixed compilation of numeric values used in templates when using a locale where the decimal separator is not a dot\n * made the strategy used to guess the real template file name and line number in exception messages much faster and more accurate\n\n* 1.6.2 (2012-03-18)\n\n * fixed sandbox mode when used with inheritance\n * added preserveKeys support for the slice filter\n * fixed the date filter when a DateTime instance is passed with a specific timezone\n * added a trim filter\n\n* 1.6.1 (2012-02-29)\n\n * fixed Twig C extension\n * removed the creation of Twig_Markup instances when not needed\n * added a way to set the default global timezone for dates\n * fixed the slice filter on strings when the length is not specified\n * fixed the creation of the cache directory in case of a race condition\n\n* 1.6.0 (2012-02-04)\n\n * fixed raw blocks when used with the whitespace trim option\n * made a speed optimization to macro calls when imported via the \"from\" tag\n * fixed globals, parsers, visitors, filters, tests, and functions management in Twig_Environment when a new one or new extension is added\n * fixed the attribute function when passing arguments\n * added slice notation support for the [] operator (syntactic sugar for the slice operator)\n * added a slice filter\n * added string support for the reverse filter\n * fixed the empty test and the length filter for Twig_Markup instances\n * added a date function to ease date comparison\n * fixed unary operators precedence\n * added recursive parsing support in the parser\n * added string and integer handling for the random function\n\n* 1.5.1 (2012-01-05)\n\n * fixed a regression when parsing strings\n\n* 1.5.0 (2012-01-04)\n\n * added Traversable objects support for the join filter\n\n* 1.5.0-RC2 (2011-12-30)\n\n * added a way to set the default global date interval format\n * fixed the date filter for DateInterval instances (setTimezone() does not exist for them)\n * refactored Twig_Template::display() to ease its extension\n * added a number_format filter\n\n* 1.5.0-RC1 (2011-12-26)\n\n * removed the need to quote hash keys\n * allowed hash keys to be any expression\n * added a do tag\n * added a flush tag\n * added support for dynamically named filters and functions\n * added a dump function to help debugging templates\n * added a nl2br filter\n * added a random function\n * added a way to change the default format for the date filter\n * fixed the lexer when an operator ending with a letter ends a line\n * added string interpolation support\n * enhanced exceptions for unknown filters, functions, tests, and tags\n\n* 1.4.0 (2011-12-07)\n\n * fixed lexer when using big numbers (> PHP_INT_MAX)\n * added missing preserveKeys argument to the reverse filter\n * fixed macros containing filter tag calls\n\n* 1.4.0-RC2 (2011-11-27)\n\n * removed usage of Reflection in Twig_Template::getAttribute()\n * added a C extension that can optionally replace Twig_Template::getAttribute()\n * added negative timestamp support to the date filter\n\n* 1.4.0-RC1 (2011-11-20)\n\n * optimized variable access when using PHP 5.4\n * changed the precedence of the .. operator to be more consistent with languages that implements such a feature like Ruby\n * added an Exception to Twig_Loader_Array::isFresh() method when the template does not exist to be consistent with other loaders\n * added Twig_Function_Node to allow more complex functions to have their own Node class\n * added Twig_Filter_Node to allow more complex filters to have their own Node class\n * added Twig_Test_Node to allow more complex tests to have their own Node class\n * added a better error message when a template is empty but contain a BOM\n * fixed \"in\" operator for empty strings\n * fixed the \"defined\" test and the \"default\" filter (now works with more than one call (foo.bar.foo) and for both values of the strict_variables option)\n * changed the way extensions are loaded (addFilter/addFunction/addGlobal/addTest/addNodeVisitor/addTokenParser/addExtension can now be called in any order)\n * added Twig_Environment::display()\n * made the escape filter smarter when the encoding is not supported by PHP\n * added a convert_encoding filter\n * moved all node manipulations outside the compile() Node method\n * made several speed optimizations\n\n* 1.3.0 (2011-10-08)\n\nno changes\n\n* 1.3.0-RC1 (2011-10-04)\n\n * added an optimization for the parent() function\n * added cache reloading when auto_reload is true and an extension has been modified\n * added the possibility to force the escaping of a string already marked as safe (instance of Twig_Markup)\n * allowed empty templates to be used as traits\n * added traits support for the \"parent\" function\n\n* 1.2.0 (2011-09-13)\n\nno changes\n\n* 1.2.0-RC1 (2011-09-10)\n\n * enhanced the exception when a tag remains unclosed\n * added support for empty Countable objects for the \"empty\" test\n * fixed algorithm that determines if a template using inheritance is valid (no output between block definitions)\n * added better support for encoding problems when escaping a string (available as of PHP 5.4)\n * added a way to ignore a missing template when using the \"include\" tag ({% include \"foo\" ignore missing %})\n * added support for an array of templates to the \"include\" and \"extends\" tags ({% include ['foo', 'bar'] %})\n * added support for bitwise operators in expressions\n * added the \"attribute\" function to allow getting dynamic attributes on variables\n * added Twig_Loader_Chain\n * added Twig_Loader_Array::setTemplate()\n * added an optimization for the set tag when used to capture a large chunk of static text\n * changed name regex to match PHP one \"[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*\" (works for blocks, tags, functions, filters, and macros)\n * removed the possibility to use the \"extends\" tag from a block\n * added \"if\" modifier support to \"for\" loops\n\n* 1.1.2 (2011-07-30)\n\n * fixed json_encode filter on PHP 5.2\n * fixed regression introduced in 1.1.1 ({{ block(foo|lower) }})\n * fixed inheritance when using conditional parents\n * fixed compilation of templates when the body of a child template is not empty\n * fixed output when a macro throws an exception\n * fixed a parsing problem when a large chunk of text is enclosed in a comment tag\n * added PHPDoc for all Token parsers and Core extension functions\n\n* 1.1.1 (2011-07-17)\n\n * added a performance optimization in the Optimizer (also helps to lower the number of nested level calls)\n * made some performance improvement for some edge cases\n\n* 1.1.0 (2011-06-28)\n\n * fixed json_encode filter\n\n* 1.1.0-RC3 (2011-06-24)\n\n * fixed method case-sensitivity when using the sandbox mode\n * added timezone support for the date filter\n * fixed possible security problems with NUL bytes\n\n* 1.1.0-RC2 (2011-06-16)\n\n * added an exception when the template passed to \"use\" is not a string\n * made 'a.b is defined' not throw an exception if a is not defined (in strict mode)\n * added {% line \\d+ %} directive\n\n* 1.1.0-RC1 (2011-05-28)\n\nFlush your cache after upgrading.\n\n * fixed date filter when using a timestamp\n * fixed the defined test for some cases\n * fixed a parsing problem when a large chunk of text is enclosed in a raw tag\n * added support for horizontal reuse of template blocks (see docs for more information)\n * added whitespace control modifier to all tags (see docs for more information)\n * added null as an alias for none (the null test is also an alias for the none test now)\n * made TRUE, FALSE, NONE equivalent to their lowercase counterparts\n * wrapped all compilation and runtime exceptions with Twig_Error_Runtime and added logic to guess the template name and line\n * moved display() method to Twig_Template (generated templates should now use doDisplay() instead)\n\n* 1.0.0 (2011-03-27)\n\n * fixed output when using mbstring\n * fixed duplicate call of methods when using the sandbox\n * made the charset configurable for the escape filter\n\n* 1.0.0-RC2 (2011-02-21)\n\n * changed the way {% set %} works when capturing (the content is now marked as safe)\n * added support for macro name in the endmacro tag\n * make Twig_Error compatible with PHP 5.3.0 >\n * fixed an infinite loop on some Windows configurations\n * fixed the \"length\" filter for numbers\n * fixed Template::getAttribute() as properties in PHP are case sensitive\n * removed coupling between Twig_Node and Twig_Template\n * fixed the ternary operator precedence rule\n\n* 1.0.0-RC1 (2011-01-09)\n\nBackward incompatibilities:\n\n * the \"items\" filter, which has been deprecated for quite a long time now, has been removed\n * the \"range\" filter has been converted to a function: 0|range(10) -> range(0, 10)\n * the \"constant\" filter has been converted to a function: {{ some_date|date('DATE_W3C'|constant) }} -> {{ some_date|date(constant('DATE_W3C')) }}\n * the \"cycle\" filter has been converted to a function: {{ ['odd', 'even']|cycle(i) }} -> {{ cycle(['odd', 'even'], i) }}\n * the \"for\" tag does not support \"joined by\" anymore\n * the \"autoescape\" first argument is now \"true\"/\"false\" (instead of \"on\"/\"off\")\n * the \"parent\" tag has been replaced by a \"parent\" function ({{ parent() }} instead of {% parent %})\n * the \"display\" tag has been replaced by a \"block\" function ({{ block('title') }} instead of {% display title %})\n * removed the grammar and simple token parser (moved to the Twig Extensions repository)\n\nChanges:\n\n * added \"needs_context\" option for filters and functions (the context is then passed as a first argument)\n * added global variables support\n * made macros return their value instead of echoing directly (fixes calling a macro in sandbox mode)\n * added the \"from\" tag to import macros as functions\n * added support for functions (a function is just syntactic sugar for a getAttribute() call)\n * made macros callable when sandbox mode is enabled\n * added an exception when a macro uses a reserved name\n * the \"default\" filter now uses the \"empty\" test instead of just checking for null\n * added the \"empty\" test\n\n* 0.9.10 (2010-12-16)\n\nBackward incompatibilities:\n\n * The Escaper extension is enabled by default, which means that all displayed\n   variables are now automatically escaped. You can revert to the previous\n   behavior by removing the extension via $env->removeExtension('escaper')\n   or just set the 'autoescape' option to 'false'.\n * removed the \"without loop\" attribute for the \"for\" tag (not needed anymore\n   as the Optimizer take care of that for most cases)\n * arrays and hashes have now a different syntax\n     * arrays keep the same syntax with square brackets: [1, 2]\n     * hashes now use curly braces ([\"a\": \"b\"] should now be written as {\"a\": \"b\"})\n     * support for \"arrays with keys\" and \"hashes without keys\" is not supported anymore ([1, \"foo\": \"bar\"] or {\"foo\": \"bar\", 1})\n * the i18n extension is now part of the Twig Extensions repository\n\nChanges:\n\n * added the merge filter\n * removed 'is_escaper' option for filters (a left over from the previous version) -- you must use 'is_safe' now instead\n * fixed usage of operators as method names (like is, in, and not)\n * changed the order of execution for node visitors\n * fixed default() filter behavior when used with strict_variables set to on\n * fixed filesystem loader compatibility with PHAR files\n * enhanced error messages when an unexpected token is parsed in an expression\n * fixed filename not being added to syntax error messages\n * added the autoescape option to enable/disable autoescaping\n * removed the newline after a comment (mimics PHP behavior)\n * added a syntax error exception when parent block is used on a template that does not extend another one\n * made the Escaper extension enabled by default\n * fixed sandbox extension when used with auto output escaping\n * fixed escaper when wrapping a Twig_Node_Print (the original class must be preserved)\n * added an Optimizer extension (enabled by default; optimizes \"for\" loops and \"raw\" filters)\n * added priority to node visitors\n\n* 0.9.9 (2010-11-28)\n\nBackward incompatibilities:\n * the self special variable has been renamed to _self\n * the odd and even filters are now tests:\n     {{ foo|odd }} must now be written {{ foo is odd }}\n * the \"safe\" filter has been renamed to \"raw\"\n * in Node classes,\n        sub-nodes are now accessed via getNode() (instead of property access)\n        attributes via getAttribute() (instead of array access)\n * the urlencode filter had been renamed to url_encode\n * the include tag now merges the passed variables with the current context by default\n   (the old behavior is still possible by adding the \"only\" keyword)\n * moved Exceptions to Twig_Error_* (Twig_SyntaxError/Twig_RuntimeError are now Twig_Error_Syntax/Twig_Error_Runtime)\n * removed support for {{ 1 < i < 3 }} (use {{ i > 1 and i < 3 }} instead)\n * the \"in\" filter has been removed ({{ a|in(b) }} should now be written {{ a in b }})\n\nChanges:\n * added file and line to Twig_Error_Runtime exceptions thrown from Twig_Template\n * changed trans tag to accept any variable for the plural count\n * fixed sandbox mode (__toString() method check was not enforced if called implicitly from complex statements)\n * added the ** (power) operator\n * changed the algorithm used for parsing expressions\n * added the spaceless tag\n * removed trim_blocks option\n * added support for is*() methods for attributes (foo.bar now looks for foo->getBar() or foo->isBar())\n * changed all exceptions to extend Twig_Error\n * fixed unary expressions ({{ not(1 or 0) }})\n * fixed child templates (with an extend tag) that uses one or more imports\n * added support for {{ 1 not in [2, 3] }} (more readable than the current {{ not (1 in [2, 3]) }})\n * escaping has been rewritten\n * the implementation of template inheritance has been rewritten\n   (blocks can now be called individually and still work with inheritance)\n * fixed error handling for if tag when a syntax error occurs within a subparse process\n * added a way to implement custom logic for resolving token parsers given a tag name\n * fixed js escaper to be stricter (now uses a whilelist-based js escaper)\n * added the following filers: \"constant\", \"trans\", \"replace\", \"json_encode\"\n * added a \"constant\" test\n * fixed objects with __toString() not being autoescaped\n * fixed subscript expressions when calling __call() (methods now keep the case)\n * added \"test\" feature (accessible via the \"is\" operator)\n * removed the debug tag (should be done in an extension)\n * fixed trans tag when no vars are used in plural form\n * fixed race condition when writing template cache\n * added the special _charset variable to reference the current charset\n * added the special _context variable to reference the current context\n * renamed self to _self (to avoid conflict)\n * fixed Twig_Template::getAttribute() for protected properties\n\n* 0.9.8 (2010-06-28)\n\nBackward incompatibilities:\n * the trans tag plural count is now attached to the plural tag:\n    old: `{% trans count %}...{% plural %}...{% endtrans %}`\n    new: `{% trans %}...{% plural count %}...{% endtrans %}`\n\n * added a way to translate strings coming from a variable ({% trans var %})\n * fixed trans tag when used with the Escaper extension\n * fixed default cache umask\n * removed Twig_Template instances from the debug tag output\n * fixed objects with __isset() defined\n * fixed set tag when used with a capture\n * fixed type hinting for Twig_Environment::addFilter() method\n\n* 0.9.7 (2010-06-12)\n\nBackward incompatibilities:\n * changed 'as' to '=' for the set tag ({% set title as \"Title\" %} must now be {% set title = \"Title\" %})\n * removed the sandboxed attribute of the include tag (use the new sandbox tag instead)\n * refactored the Node system (if you have custom nodes, you will have to update them to use the new API)\n\n * added self as a special variable that refers to the current template (useful for importing macros from the current template)\n * added Twig_Template instance support to the include tag\n * added support for dynamic and conditional inheritance ({% extends some_var %} and {% extends standalone ? \"minimum\" : \"base\" %})\n * added a grammar sub-framework to ease the creation of custom tags\n * fixed the for tag for large arrays (some loop variables are now only available for arrays and objects that implement the Countable interface)\n * removed the Twig_Resource::resolveMissingFilter() method\n * fixed the filter tag which did not apply filtering to included files\n * added a bunch of unit tests\n * added a bunch of phpdoc\n * added a sandbox tag in the sandbox extension\n * changed the date filter to support any date format supported by DateTime\n * added strict_variable setting to throw an exception when an invalid variable is used in a template (disabled by default)\n * added the lexer, parser, and compiler as arguments to the Twig_Environment constructor\n * changed the cache option to only accepts an explicit path to a cache directory or false\n * added a way to add token parsers, filters, and visitors without creating an extension\n * added three interfaces: Twig_NodeInterface, Twig_TokenParserInterface, and Twig_FilterInterface\n * changed the generated code to match the new coding standards\n * fixed sandbox mode (__toString() method check was not enforced if called implicitly from a simple statement like {{ article }})\n * added an exception when a child template has a non-empty body (as it is always ignored when rendering)\n\n* 0.9.6 (2010-05-12)\n\n * fixed variables defined outside a loop and for which the value changes in a for loop\n * fixed the test suite for PHP 5.2 and older versions of PHPUnit\n * added support for __call() in expression resolution\n * fixed node visiting for macros (macros are now visited by visitors as any other node)\n * fixed nested block definitions with a parent call (rarely useful but nonetheless supported now)\n * added the cycle filter\n * fixed the Lexer when mbstring.func_overload is used with an mbstring.internal_encoding different from ASCII\n * added a long-syntax for the set tag ({% set foo %}...{% endset %})\n * unit tests are now powered by PHPUnit\n * added support for gettext via the `i18n` extension\n * fixed twig_capitalize_string_filter() and fixed twig_length_filter() when used with UTF-8 values\n * added a more useful exception if an if tag is not closed properly\n * added support for escaping strategy in the autoescape tag\n * fixed lexer when a template has a big chunk of text between/in a block\n\n* 0.9.5 (2010-01-20)\n\nAs for any new release, don't forget to remove all cached templates after\nupgrading.\n\nIf you have defined custom filters, you MUST upgrade them for this release. To\nupgrade, replace \"array\" with \"new Twig_Filter_Function\", and replace the\nenvironment constant by the \"needs_environment\" option:\n\n  // before\n  'even'   => array('twig_is_even_filter', false),\n  'escape' => array('twig_escape_filter', true),\n\n  // after\n  'even'   => new Twig_Filter_Function('twig_is_even_filter'),\n  'escape' => new Twig_Filter_Function('twig_escape_filter', array('needs_environment' => true)),\n\nIf you have created NodeTransformer classes, you will need to upgrade them to\nthe new interface (please note that the interface is not yet considered\nstable).\n\n * fixed list nodes that did not extend the Twig_NodeListInterface\n * added the \"without loop\" option to the for tag (it disables the generation of the loop variable)\n * refactored node transformers to node visitors\n * fixed automatic-escaping for blocks\n * added a way to specify variables to pass to an included template\n * changed the automatic-escaping rules to be more sensible and more configurable in custom filters (the documentation lists all the rules)\n * improved the filter system to allow object methods to be used as filters\n * changed the Array and String loaders to actually make use of the cache mechanism\n * included the default filter function definitions in the extension class files directly (Core, Escaper)\n * added the // operator (like the floor() PHP function)\n * added the .. operator (as a syntactic sugar for the range filter when the step is 1)\n * added the in operator (as a syntactic sugar for the in filter)\n * added the following filters in the Core extension: in, range\n * added support for arrays (same behavior as in PHP, a mix between lists and dictionaries, arrays and hashes)\n * enhanced some error messages to provide better feedback in case of parsing errors\n\n* 0.9.4 (2009-12-02)\n\nIf you have custom loaders, you MUST upgrade them for this release: The\nTwig_Loader base class has been removed, and the Twig_LoaderInterface has also\nbeen changed (see the source code for more information or the documentation).\n\n * added support for DateTime instances for the date filter\n * fixed loop.last when the array only has one item\n * made it possible to insert newlines in tag and variable blocks\n * fixed a bug when a literal '\\n' were present in a template text\n * fixed bug when the filename of a template contains */\n * refactored loaders\n\n* 0.9.3 (2009-11-11)\n\nThis release is NOT backward compatible with the previous releases.\n\n  The loaders do not take the cache and autoReload arguments anymore. Instead,\n  the Twig_Environment class has two new options: cache and auto_reload.\n  Upgrading your code means changing this kind of code:\n\n      $loader = new Twig_Loader_Filesystem('/path/to/templates', '/path/to/compilation_cache', true);\n      $twig = new Twig_Environment($loader);\n\n  to something like this:\n\n      $loader = new Twig_Loader_Filesystem('/path/to/templates');\n      $twig = new Twig_Environment($loader, array(\n        'cache' => '/path/to/compilation_cache',\n        'auto_reload' => true,\n      ));\n\n * deprecated the \"items\" filter as it is not needed anymore\n * made cache and auto_reload options of Twig_Environment instead of arguments of Twig_Loader\n * optimized template loading speed\n * removed output when an error occurs in a template and render() is used\n * made major speed improvements for loops (up to 300% on even the smallest loops)\n * added properties as part of the sandbox mode\n * added public properties support (obj.item can now be the item property on the obj object)\n * extended set tag to support expression as value ({% set foo as 'foo' ~ 'bar' %} )\n * fixed bug when \\ was used in HTML\n\n* 0.9.2 (2009-10-29)\n\n * made some speed optimizations\n * changed the cache extension to .php\n * added a js escaping strategy\n * added support for short block tag\n * changed the filter tag to allow chained filters\n * made lexer more flexible as you can now change the default delimiters\n * added set tag\n * changed default directory permission when cache dir does not exist (more secure)\n * added macro support\n * changed filters first optional argument to be a Twig_Environment instance instead of a Twig_Template instance\n * made Twig_Autoloader::autoload() a static method\n * avoid writing template file if an error occurs\n * added $ escaping when outputting raw strings\n * enhanced some error messages to ease debugging\n * fixed empty cache files when the template contains an error\n\n* 0.9.1 (2009-10-14)\n\n  * fixed a bug in PHP 5.2.6\n  * fixed numbers with one than one decimal\n  * added support for method calls with arguments ({{ foo.bar('a', 43) }})\n  * made small speed optimizations\n  * made minor tweaks to allow better extensibility and flexibility\n\n* 0.9.0 (2009-10-12)\n\n * Initial release\n", "<?php\n\n/*\n * This file is part of Twig.\n *\n * (c) Fabien Potencier\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * Stores the Twig configuration.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass Twig_Environment\n{\n    const VERSION = '2.4.4';\n    const VERSION_ID = 20404;\n    const MAJOR_VERSION = 2;\n    const MINOR_VERSION = 4;\n    const RELEASE_VERSION = 4;\n    const EXTRA_VERSION = '';\n\n    private $charset;\n    private $loader;\n    private $debug;\n    private $autoReload;\n    private $cache;\n    private $lexer;\n    private $parser;\n    private $compiler;\n    private $baseTemplateClass;\n    private $globals = array();\n    private $resolvedGlobals;\n    private $loadedTemplates;\n    private $strictVariables;\n    private $templateClassPrefix = '__TwigTemplate_';\n    private $originalCache;\n    private $extensionSet;\n    private $runtimeLoaders = array();\n    private $runtimes = array();\n    private $optionsHash;\n    private $loading = array();\n\n    /**\n     * Constructor.\n     *\n     * Available options:\n     *\n     *  * debug: When set to true, it automatically set \"auto_reload\" to true as\n     *           well (default to false).\n     *\n     *  * charset: The charset used by the templates (default to UTF-8).\n     *\n     *  * base_template_class: The base template class to use for generated\n     *                         templates (default to Twig_Template).\n     *\n     *  * cache: An absolute path where to store the compiled templates,\n     *           a Twig_Cache_Interface implementation,\n     *           or false to disable compilation cache (default).\n     *\n     *  * auto_reload: Whether to reload the template if the original source changed.\n     *                 If you don't provide the auto_reload option, it will be\n     *                 determined automatically based on the debug value.\n     *\n     *  * strict_variables: Whether to ignore invalid variables in templates\n     *                      (default to false).\n     *\n     *  * autoescape: Whether to enable auto-escaping (default to html):\n     *                  * false: disable auto-escaping\n     *                  * html, js: set the autoescaping to one of the supported strategies\n     *                  * name: set the autoescaping strategy based on the template name extension\n     *                  * PHP callback: a PHP callback that returns an escaping strategy based on the template \"name\"\n     *\n     *  * optimizations: A flag that indicates which optimizations to apply\n     *                   (default to -1 which means that all optimizations are enabled;\n     *                   set it to 0 to disable).\n     *\n     * @param Twig_LoaderInterface $loader\n     * @param array                $options An array of options\n     */\n    public function __construct(Twig_LoaderInterface $loader, $options = array())\n    {\n        $this->setLoader($loader);\n\n        $options = array_merge(array(\n            'debug' => false,\n            'charset' => 'UTF-8',\n            'base_template_class' => 'Twig_Template',\n            'strict_variables' => false,\n            'autoescape' => 'html',\n            'cache' => false,\n            'auto_reload' => null,\n            'optimizations' => -1,\n        ), $options);\n\n        $this->debug = (bool) $options['debug'];\n        $this->setCharset($options['charset']);\n        $this->baseTemplateClass = $options['base_template_class'];\n        $this->autoReload = null === $options['auto_reload'] ? $this->debug : (bool) $options['auto_reload'];\n        $this->strictVariables = (bool) $options['strict_variables'];\n        $this->setCache($options['cache']);\n        $this->extensionSet = new Twig_ExtensionSet();\n\n        $this->addExtension(new Twig_Extension_Core());\n        $this->addExtension(new Twig_Extension_Escaper($options['autoescape']));\n        $this->addExtension(new Twig_Extension_Optimizer($options['optimizations']));\n    }\n\n    /**\n     * Gets the base template class for compiled templates.\n     *\n     * @return string The base template class name\n     */\n    public function getBaseTemplateClass()\n    {\n        return $this->baseTemplateClass;\n    }\n\n    /**\n     * Sets the base template class for compiled templates.\n     *\n     * @param string $class The base template class name\n     */\n    public function setBaseTemplateClass($class)\n    {\n        $this->baseTemplateClass = $class;\n        $this->updateOptionsHash();\n    }\n\n    /**\n     * Enables debugging mode.\n     */\n    public function enableDebug()\n    {\n        $this->debug = true;\n        $this->updateOptionsHash();\n    }\n\n    /**\n     * Disables debugging mode.\n     */\n    public function disableDebug()\n    {\n        $this->debug = false;\n        $this->updateOptionsHash();\n    }\n\n    /**\n     * Checks if debug mode is enabled.\n     *\n     * @return bool true if debug mode is enabled, false otherwise\n     */\n    public function isDebug()\n    {\n        return $this->debug;\n    }\n\n    /**\n     * Enables the auto_reload option.\n     */\n    public function enableAutoReload()\n    {\n        $this->autoReload = true;\n    }\n\n    /**\n     * Disables the auto_reload option.\n     */\n    public function disableAutoReload()\n    {\n        $this->autoReload = false;\n    }\n\n    /**\n     * Checks if the auto_reload option is enabled.\n     *\n     * @return bool true if auto_reload is enabled, false otherwise\n     */\n    public function isAutoReload()\n    {\n        return $this->autoReload;\n    }\n\n    /**\n     * Enables the strict_variables option.\n     */\n    public function enableStrictVariables()\n    {\n        $this->strictVariables = true;\n        $this->updateOptionsHash();\n    }\n\n    /**\n     * Disables the strict_variables option.\n     */\n    public function disableStrictVariables()\n    {\n        $this->strictVariables = false;\n        $this->updateOptionsHash();\n    }\n\n    /**\n     * Checks if the strict_variables option is enabled.\n     *\n     * @return bool true if strict_variables is enabled, false otherwise\n     */\n    public function isStrictVariables()\n    {\n        return $this->strictVariables;\n    }\n\n    /**\n     * Gets the current cache implementation.\n     *\n     * @param bool $original Whether to return the original cache option or the real cache instance\n     *\n     * @return Twig_CacheInterface|string|false A Twig_CacheInterface implementation,\n     *                                          an absolute path to the compiled templates,\n     *                                          or false to disable cache\n     */\n    public function getCache($original = true)\n    {\n        return $original ? $this->originalCache : $this->cache;\n    }\n\n    /**\n     * Sets the current cache implementation.\n     *\n     * @param Twig_CacheInterface|string|false $cache A Twig_CacheInterface implementation,\n     *                                                an absolute path to the compiled templates,\n     *                                                or false to disable cache\n     */\n    public function setCache($cache)\n    {\n        if (is_string($cache)) {\n            $this->originalCache = $cache;\n            $this->cache = new Twig_Cache_Filesystem($cache);\n        } elseif (false === $cache) {\n            $this->originalCache = $cache;\n            $this->cache = new Twig_Cache_Null();\n        } elseif ($cache instanceof Twig_CacheInterface) {\n            $this->originalCache = $this->cache = $cache;\n        } else {\n            throw new LogicException(sprintf('Cache can only be a string, false, or a Twig_CacheInterface implementation.'));\n        }\n    }\n\n    /**\n     * Gets the template class associated with the given string.\n     *\n     * The generated template class is based on the following parameters:\n     *\n     *  * The cache key for the given template;\n     *  * The currently enabled extensions;\n     *  * Whether the Twig C extension is available or not;\n     *  * PHP version;\n     *  * Twig version;\n     *  * Options with what environment was created.\n     *\n     * @param string   $name  The name for which to calculate the template class name\n     * @param int|null $index The index if it is an embedded template\n     *\n     * @return string The template class name\n     */\n    public function getTemplateClass($name, $index = null)\n    {\n        $key = $this->getLoader()->getCacheKey($name).$this->optionsHash;\n\n        return $this->templateClassPrefix.hash('sha256', $key).(null === $index ? '' : '_'.$index);\n    }\n\n    /**\n     * Renders a template.\n     *\n     * @param string $name    The template name\n     * @param array  $context An array of parameters to pass to the template\n     *\n     * @return string The rendered template\n     *\n     * @throws Twig_Error_Loader  When the template cannot be found\n     * @throws Twig_Error_Syntax  When an error occurred during compilation\n     * @throws Twig_Error_Runtime When an error occurred during rendering\n     */\n    public function render($name, array $context = array())\n    {\n        return $this->loadTemplate($name)->render($context);\n    }\n\n    /**\n     * Displays a template.\n     *\n     * @param string $name    The template name\n     * @param array  $context An array of parameters to pass to the template\n     *\n     * @throws Twig_Error_Loader  When the template cannot be found\n     * @throws Twig_Error_Syntax  When an error occurred during compilation\n     * @throws Twig_Error_Runtime When an error occurred during rendering\n     */\n    public function display($name, array $context = array())\n    {\n        $this->loadTemplate($name)->display($context);\n    }\n\n    /**\n     * Loads a template.\n     *\n     * @param string|Twig_TemplateWrapper|Twig_Template $name The template name\n     *\n     * @throws Twig_Error_Loader  When the template cannot be found\n     * @throws Twig_Error_Runtime When a previously generated cache is corrupted\n     * @throws Twig_Error_Syntax  When an error occurred during compilation\n     *\n     * @return Twig_TemplateWrapper\n     */\n    public function load($name)\n    {\n        if ($name instanceof Twig_TemplateWrapper) {\n            return $name;\n        }\n\n        if ($name instanceof Twig_Template) {\n            return new Twig_TemplateWrapper($this, $name);\n        }\n\n        return new Twig_TemplateWrapper($this, $this->loadTemplate($name));\n    }\n\n    /**\n     * Loads a template internal representation.\n     *\n     * This method is for internal use only and should never be called\n     * directly.\n     *\n     * @param string $name  The template name\n     * @param int    $index The index if it is an embedded template\n     *\n     * @return Twig_Template A template instance representing the given template name\n     *\n     * @throws Twig_Error_Loader  When the template cannot be found\n     * @throws Twig_Error_Runtime When a previously generated cache is corrupted\n     * @throws Twig_Error_Syntax  When an error occurred during compilation\n     *\n     * @internal\n     */\n    public function loadTemplate($name, $index = null)\n    {\n        $cls = $mainCls = $this->getTemplateClass($name);\n        if (null !== $index) {\n            $cls .= '_'.$index;\n        }\n\n        if (isset($this->loadedTemplates[$cls])) {\n            return $this->loadedTemplates[$cls];\n        }\n\n        if (!class_exists($cls, false)) {\n            $key = $this->cache->generateKey($name, $mainCls);\n\n            if (!$this->isAutoReload() || $this->isTemplateFresh($name, $this->cache->getTimestamp($key))) {\n                $this->cache->load($key);\n            }\n\n            if (!class_exists($cls, false)) {\n                $source = $this->getLoader()->getSourceContext($name);\n                $content = $this->compileSource($source);\n                $this->cache->write($key, $content);\n                $this->cache->load($key);\n\n                if (!class_exists($mainCls, false)) {\n                    /* Last line of defense if either $this->bcWriteCacheFile was used,\n                     * $this->cache is implemented as a no-op or we have a race condition\n                     * where the cache was cleared between the above calls to write to and load from\n                     * the cache.\n                     */\n                    eval('?>'.$content);\n                }\n\n                if (!class_exists($cls, false)) {\n                    throw new Twig_Error_Runtime(sprintf('Failed to load Twig template \"%s\", index \"%s\": cache is corrupted.', $name, $index), -1, $source);\n                }\n            }\n        }\n\n        // to be removed in 3.0\n        $this->extensionSet->initRuntime($this);\n\n        if (isset($this->loading[$cls])) {\n            throw new Twig_Error_Runtime(sprintf('Circular reference detected for Twig template \"%s\", path: %s.', $name, implode(' -> ', array_merge($this->loading, array($name)))));\n        }\n\n        $this->loading[$cls] = $name;\n\n        try {\n            $this->loadedTemplates[$cls] = new $cls($this);\n        } finally {\n            unset($this->loading[$cls]);\n        }\n\n        return $this->loadedTemplates[$cls];\n    }\n\n    /**\n     * Creates a template from source.\n     *\n     * This method should not be used as a generic way to load templates.\n     *\n     * @param string $template The template name\n     *\n     * @return Twig_Template A template instance representing the given template name\n     *\n     * @throws Twig_Error_Loader When the template cannot be found\n     * @throws Twig_Error_Syntax When an error occurred during compilation\n     */\n    public function createTemplate($template)\n    {\n        $name = sprintf('__string_template__%s', hash('sha256', $template, false));\n\n        $loader = new Twig_Loader_Chain(array(\n            new Twig_Loader_Array(array($name => $template)),\n            $current = $this->getLoader(),\n        ));\n\n        $this->setLoader($loader);\n        try {\n            $template = $this->loadTemplate($name);\n        } finally {\n            $this->setLoader($current);\n        }\n\n        return $template;\n    }\n\n    /**\n     * Returns true if the template is still fresh.\n     *\n     * Besides checking the loader for freshness information,\n     * this method also checks if the enabled extensions have\n     * not changed.\n     *\n     * @param string $name The template name\n     * @param int    $time The last modification time of the cached template\n     *\n     * @return bool true if the template is fresh, false otherwise\n     */\n    public function isTemplateFresh($name, $time)\n    {\n        return $this->extensionSet->getLastModified() <= $time && $this->getLoader()->isFresh($name, $time);\n    }\n\n    /**\n     * Tries to load a template consecutively from an array.\n     *\n     * Similar to loadTemplate() but it also accepts Twig_Template instances and an array\n     * of templates where each is tried to be loaded.\n     *\n     * @param string|Twig_Template|array $names A template or an array of templates to try consecutively\n     *\n     * @return Twig_Template\n     *\n     * @throws Twig_Error_Loader When none of the templates can be found\n     * @throws Twig_Error_Syntax When an error occurred during compilation\n     */\n    public function resolveTemplate($names)\n    {\n        if (!is_array($names)) {\n            $names = array($names);\n        }\n\n        foreach ($names as $name) {\n            if ($name instanceof Twig_Template) {\n                return $name;\n            }\n\n            try {\n                return $this->loadTemplate($name);\n            } catch (Twig_Error_Loader $e) {\n            }\n        }\n\n        if (1 === count($names)) {\n            throw $e;\n        }\n\n        throw new Twig_Error_Loader(sprintf('Unable to find one of the following templates: \"%s\".', implode('\", \"', $names)));\n    }\n\n    public function setLexer(Twig_Lexer $lexer)\n    {\n        $this->lexer = $lexer;\n    }\n\n    /**\n     * Tokenizes a source code.\n     *\n     * @return Twig_TokenStream\n     *\n     * @throws Twig_Error_Syntax When the code is syntactically wrong\n     */\n    public function tokenize(Twig_Source $source)\n    {\n        if (null === $this->lexer) {\n            $this->lexer = new Twig_Lexer($this);\n        }\n\n        return $this->lexer->tokenize($source);\n    }\n\n    public function setParser(Twig_Parser $parser)\n    {\n        $this->parser = $parser;\n    }\n\n    /**\n     * Converts a token stream to a node tree.\n     *\n     * @return Twig_Node_Module\n     *\n     * @throws Twig_Error_Syntax When the token stream is syntactically or semantically wrong\n     */\n    public function parse(Twig_TokenStream $stream)\n    {\n        if (null === $this->parser) {\n            $this->parser = new Twig_Parser($this);\n        }\n\n        return $this->parser->parse($stream);\n    }\n\n    public function setCompiler(Twig_Compiler $compiler)\n    {\n        $this->compiler = $compiler;\n    }\n\n    /**\n     * Compiles a node and returns the PHP code.\n     *\n     * @return string The compiled PHP source code\n     */\n    public function compile(Twig_Node $node)\n    {\n        if (null === $this->compiler) {\n            $this->compiler = new Twig_Compiler($this);\n        }\n\n        return $this->compiler->compile($node)->getSource();\n    }\n\n    /**\n     * Compiles a template source code.\n     *\n     * @return string The compiled PHP source code\n     *\n     * @throws Twig_Error_Syntax When there was an error during tokenizing, parsing or compiling\n     */\n    public function compileSource(Twig_Source $source)\n    {\n        try {\n            return $this->compile($this->parse($this->tokenize($source)));\n        } catch (Twig_Error $e) {\n            $e->setSourceContext($source);\n            throw $e;\n        } catch (Exception $e) {\n            throw new Twig_Error_Syntax(sprintf('An exception has been thrown during the compilation of a template (\"%s\").', $e->getMessage()), -1, $source, $e);\n        }\n    }\n\n    public function setLoader(Twig_LoaderInterface $loader)\n    {\n        $this->loader = $loader;\n    }\n\n    /**\n     * Gets the Loader instance.\n     *\n     * @return Twig_LoaderInterface\n     */\n    public function getLoader()\n    {\n        return $this->loader;\n    }\n\n    /**\n     * Sets the default template charset.\n     *\n     * @param string $charset The default charset\n     */\n    public function setCharset($charset)\n    {\n        if ('UTF8' === $charset = strtoupper($charset)) {\n            // iconv on Windows requires \"UTF-8\" instead of \"UTF8\"\n            $charset = 'UTF-8';\n        }\n\n        $this->charset = $charset;\n    }\n\n    /**\n     * Gets the default template charset.\n     *\n     * @return string The default charset\n     */\n    public function getCharset()\n    {\n        return $this->charset;\n    }\n\n    /**\n     * Returns true if the given extension is registered.\n     *\n     * @param string $class The extension class name\n     *\n     * @return bool Whether the extension is registered or not\n     */\n    public function hasExtension($class)\n    {\n        return $this->extensionSet->hasExtension($class);\n    }\n\n    /**\n     * Adds a runtime loader.\n     */\n    public function addRuntimeLoader(Twig_RuntimeLoaderInterface $loader)\n    {\n        $this->runtimeLoaders[] = $loader;\n    }\n\n    /**\n     * Gets an extension by class name.\n     *\n     * @param string $class The extension class name\n     *\n     * @return Twig_ExtensionInterface\n     */\n    public function getExtension($class)\n    {\n        return $this->extensionSet->getExtension($class);\n    }\n\n    /**\n     * Returns the runtime implementation of a Twig element (filter/function/test).\n     *\n     * @param string $class A runtime class name\n     *\n     * @return object The runtime implementation\n     *\n     * @throws Twig_Error_Runtime When the template cannot be found\n     */\n    public function getRuntime($class)\n    {\n        if (isset($this->runtimes[$class])) {\n            return $this->runtimes[$class];\n        }\n\n        foreach ($this->runtimeLoaders as $loader) {\n            if (null !== $runtime = $loader->load($class)) {\n                return $this->runtimes[$class] = $runtime;\n            }\n        }\n\n        throw new Twig_Error_Runtime(sprintf('Unable to load the \"%s\" runtime.', $class));\n    }\n\n    public function addExtension(Twig_ExtensionInterface $extension)\n    {\n        $this->extensionSet->addExtension($extension);\n        $this->updateOptionsHash();\n    }\n\n    /**\n     * Registers an array of extensions.\n     *\n     * @param array $extensions An array of extensions\n     */\n    public function setExtensions(array $extensions)\n    {\n        $this->extensionSet->setExtensions($extensions);\n    }\n\n    /**\n     * Returns all registered extensions.\n     *\n     * @return Twig_ExtensionInterface[] An array of extensions (keys are for internal usage only and should not be relied on)\n     */\n    public function getExtensions()\n    {\n        return $this->extensionSet->getExtensions();\n    }\n\n    public function addTokenParser(Twig_TokenParserInterface $parser)\n    {\n        $this->extensionSet->addTokenParser($parser);\n    }\n\n    /**\n     * Gets the registered Token Parsers.\n     *\n     * @return Twig_TokenParserInterface[]\n     *\n     * @internal\n     */\n    public function getTokenParsers()\n    {\n        return $this->extensionSet->getTokenParsers();\n    }\n\n    /**\n     * Gets registered tags.\n     *\n     * @return Twig_TokenParserInterface[]\n     *\n     * @internal\n     */\n    public function getTags()\n    {\n        $tags = array();\n        foreach ($this->getTokenParsers() as $parser) {\n            $tags[$parser->getTag()] = $parser;\n        }\n\n        return $tags;\n    }\n\n    public function addNodeVisitor(Twig_NodeVisitorInterface $visitor)\n    {\n        $this->extensionSet->addNodeVisitor($visitor);\n    }\n\n    /**\n     * Gets the registered Node Visitors.\n     *\n     * @return Twig_NodeVisitorInterface[]\n     *\n     * @internal\n     */\n    public function getNodeVisitors()\n    {\n        return $this->extensionSet->getNodeVisitors();\n    }\n\n    public function addFilter(Twig_Filter $filter)\n    {\n        $this->extensionSet->addFilter($filter);\n    }\n\n    /**\n     * Get a filter by name.\n     *\n     * Subclasses may override this method and load filters differently;\n     * so no list of filters is available.\n     *\n     * @param string $name The filter name\n     *\n     * @return Twig_Filter|false A Twig_Filter instance or false if the filter does not exist\n     *\n     * @internal\n     */\n    public function getFilter($name)\n    {\n        return $this->extensionSet->getFilter($name);\n    }\n\n    public function registerUndefinedFilterCallback(callable $callable)\n    {\n        $this->extensionSet->registerUndefinedFilterCallback($callable);\n    }\n\n    /**\n     * Gets the registered Filters.\n     *\n     * Be warned that this method cannot return filters defined with registerUndefinedFilterCallback.\n     *\n     * @return Twig_Filter[]\n     *\n     * @see registerUndefinedFilterCallback\n     *\n     * @internal\n     */\n    public function getFilters()\n    {\n        return $this->extensionSet->getFilters();\n    }\n\n    /**\n     * Registers a Test.\n     *\n     * @param Twig_Test $test A Twig_Test instance\n     */\n    public function addTest(Twig_Test $test)\n    {\n        $this->extensionSet->addTest($test);\n    }\n\n    /**\n     * Gets the registered Tests.\n     *\n     * @return Twig_Test[]\n     *\n     * @internal\n     */\n    public function getTests()\n    {\n        return $this->extensionSet->getTests();\n    }\n\n    /**\n     * Gets a test by name.\n     *\n     * @param string $name The test name\n     *\n     * @return Twig_Test|false A Twig_Test instance or false if the test does not exist\n     *\n     * @internal\n     */\n    public function getTest($name)\n    {\n        return $this->extensionSet->getTest($name);\n    }\n\n    public function addFunction(Twig_Function $function)\n    {\n        $this->extensionSet->addFunction($function);\n    }\n\n    /**\n     * Get a function by name.\n     *\n     * Subclasses may override this method and load functions differently;\n     * so no list of functions is available.\n     *\n     * @param string $name function name\n     *\n     * @return Twig_Function|false A Twig_Function instance or false if the function does not exist\n     *\n     * @internal\n     */\n    public function getFunction($name)\n    {\n        return $this->extensionSet->getFunction($name);\n    }\n\n    public function registerUndefinedFunctionCallback(callable $callable)\n    {\n        $this->extensionSet->registerUndefinedFunctionCallback($callable);\n    }\n\n    /**\n     * Gets registered functions.\n     *\n     * Be warned that this method cannot return functions defined with registerUndefinedFunctionCallback.\n     *\n     * @return Twig_Function[]\n     *\n     * @see registerUndefinedFunctionCallback\n     *\n     * @internal\n     */\n    public function getFunctions()\n    {\n        return $this->extensionSet->getFunctions();\n    }\n\n    /**\n     * Registers a Global.\n     *\n     * New globals can be added before compiling or rendering a template;\n     * but after, you can only update existing globals.\n     *\n     * @param string $name  The global name\n     * @param mixed  $value The global value\n     */\n    public function addGlobal($name, $value)\n    {\n        if ($this->extensionSet->isInitialized() && !array_key_exists($name, $this->getGlobals())) {\n            throw new LogicException(sprintf('Unable to add global \"%s\" as the runtime or the extensions have already been initialized.', $name));\n        }\n\n        if (null !== $this->resolvedGlobals) {\n            $this->resolvedGlobals[$name] = $value;\n        } else {\n            $this->globals[$name] = $value;\n        }\n    }\n\n    /**\n     * Gets the registered Globals.\n     *\n     * @return array An array of globals\n     *\n     * @internal\n     */\n    public function getGlobals()\n    {\n        if ($this->extensionSet->isInitialized()) {\n            if (null === $this->resolvedGlobals) {\n                $this->resolvedGlobals = array_merge($this->extensionSet->getGlobals(), $this->globals);\n            }\n\n            return $this->resolvedGlobals;\n        }\n\n        return array_merge($this->extensionSet->getGlobals(), $this->globals);\n    }\n\n    /**\n     * Merges a context with the defined globals.\n     *\n     * @param array $context An array representing the context\n     *\n     * @return array The context merged with the globals\n     */\n    public function mergeGlobals(array $context)\n    {\n        // we don't use array_merge as the context being generally\n        // bigger than globals, this code is faster.\n        foreach ($this->getGlobals() as $key => $value) {\n            if (!array_key_exists($key, $context)) {\n                $context[$key] = $value;\n            }\n        }\n\n        return $context;\n    }\n\n    /**\n     * Gets the registered unary Operators.\n     *\n     * @return array An array of unary operators\n     *\n     * @internal\n     */\n    public function getUnaryOperators()\n    {\n        return $this->extensionSet->getUnaryOperators();\n    }\n\n    /**\n     * Gets the registered binary Operators.\n     *\n     * @return array An array of binary operators\n     *\n     * @internal\n     */\n    public function getBinaryOperators()\n    {\n        return $this->extensionSet->getBinaryOperators();\n    }\n\n    private function updateOptionsHash()\n    {\n        $this->optionsHash = implode(':', array(\n            $this->extensionSet->getSignature(),\n            PHP_MAJOR_VERSION,\n            PHP_MINOR_VERSION,\n            self::VERSION,\n            (int) $this->debug,\n            $this->baseTemplateClass,\n            (int) $this->strictVariables,\n        ));\n    }\n}\n\nclass_alias('Twig_Environment', 'Twig\\Environment', false);\n"], "filenames": ["CHANGELOG", "lib/Twig/Environment.php"], "buggy_code_start_loc": [1, 19], "buggy_code_end_loc": [2, 25], "fixing_code_start_loc": [1, 19], "fixing_code_end_loc": [2, 25], "type": "CWE-94", "message": "** DISPUTED ** Twig before 2.4.4 allows Server-Side Template Injection (SSTI) via the search search_key parameter. NOTE: the vendor points out that Twig itself is not a web application and states that it is the responsibility of web applications using Twig to properly wrap input to it.", "other": {"cve": {"id": "CVE-2018-13818", "sourceIdentifier": "cve@mitre.org", "published": "2018-07-10T14:29:00.480", "lastModified": "2019-03-08T13:45:50.103", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "** DISPUTED ** Twig before 2.4.4 allows Server-Side Template Injection (SSTI) via the search search_key parameter. NOTE: the vendor points out that Twig itself is not a web application and states that it is the responsibility of web applications using Twig to properly wrap input to it."}, {"lang": "es", "value": "** EN DISPUTA ** Twig en versiones anteriores a la 2.4.4 permite Server-Side Template Injection (SSTI) mediante el par\u00e1metro de b\u00fasqueda search_key. NOTA: el fabricante se\u00f1ala que Twig no es una aplicaci\u00f3n web y sostiene que es la responsabilidad de las aplicaciones web que emplean Twig envolver correctamente las entradas que se le proporcionan."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:symfony:twig:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.4", "matchCriteriaId": "927A8CBD-76AA-45C3-9588-81C8C1919281"}]}]}], "references": [{"url": "https://github.com/twigphp/Twig/blob/2.x/CHANGELOG", "source": "cve@mitre.org", "tags": ["Release Notes"]}, {"url": "https://github.com/twigphp/Twig/commit/eddb97148ad779f27e670e1e3f19fb323aedafeb", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/twigphp/Twig/issues/2743", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://mobile.twitter.com/jameel_nabbo/status/1032593354704515072?s=20", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/44102/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/twigphp/Twig/commit/eddb97148ad779f27e670e1e3f19fb323aedafeb"}}