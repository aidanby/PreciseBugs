{"buggy_code": ["<?php\n\nnamespace App\\Http\\Controllers\\Licenses;\n\nuse App\\Helpers\\StorageHelper;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Requests\\AssetFileRequest;\nuse App\\Models\\Actionlog;\nuse App\\Models\\License;\nuse Illuminate\\Support\\Facades\\Response;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse enshrined\\svgSanitize\\Sanitizer;\n\nclass LicenseFilesController extends Controller\n{\n    /**\n     * Validates and stores files associated with a license.\n     *\n     * @todo Switch to using the AssetFileRequest form request validator.\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @param AssetFileRequest $request\n     * @param int $licenseId\n     * @return \\Illuminate\\Http\\RedirectResponse\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function store(AssetFileRequest $request, $licenseId = null)\n    {\n        $license = License::find($licenseId);\n\n        if (isset($license->id)) {\n            $this->authorize('update', $license);\n\n            if ($request->hasFile('file')) {\n                if (! Storage::exists('private_uploads/licenses')) {\n                    Storage::makeDirectory('private_uploads/licenses', 775);\n                }\n\n                foreach ($request->file('file') as $file) {\n\n                    $extension = $file->getClientOriginalExtension();\n                    $file_name = 'license-'.$license->id.'-'.str_random(8).'-'.str_slug(basename($file->getClientOriginalName(), '.'.$extension)).'.'.$extension;\n\n\n                        // Check for SVG and sanitize it\n                        if ($extension == 'svg') {\n                            \\Log::debug('This is an SVG');\n                            \\Log::debug($file_name);\n\n                                $sanitizer = new Sanitizer();\n                                $dirtySVG = file_get_contents($file->getRealPath());\n                                $cleanSVG = $sanitizer->sanitize($dirtySVG);\n\n                                try {\n                                    Storage::put('private_uploads/licenses/'.$file_name, $cleanSVG);\n                                } catch (\\Exception $e) {\n                                    \\Log::debug('Upload no workie :( ');\n                                    \\Log::debug($e);\n                                }\n\n                        } else {\n                            Storage::put('private_uploads/licenses/'.$file_name, file_get_contents($file));\n                        }\n\n                    //Log the upload to the log\n                    $license->logUpload($file_name, e($request->input('notes')));\n                }\n\n\n                    return redirect()->route('licenses.show', $license->id)->with('success', trans('admin/licenses/message.upload.success'));\n\n            }\n\n            return redirect()->route('licenses.show', $license->id)->with('error', trans('admin/licenses/message.upload.nofiles'));\n        }\n        // Prepare the error message\n        return redirect()->route('licenses.index')\n            ->with('error', trans('admin/licenses/message.does_not_exist'));\n    }\n\n    /**\n     * Deletes the selected license file.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @param int $licenseId\n     * @param int $fileId\n     * @return \\Illuminate\\Http\\RedirectResponse\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function destroy($licenseId = null, $fileId = null)\n    {\n        $license = License::find($licenseId);\n\n        // the asset is valid\n        if (isset($license->id)) {\n            $this->authorize('update', $license);\n            $log = Actionlog::find($fileId);\n\n            // Remove the file if one exists\n            if (Storage::exists('licenses/'.$log->filename)) {\n                try {\n                    Storage::delete('licenses/'.$log->filename);\n                } catch (\\Exception $e) {\n                    \\Log::debug($e);\n                }\n            }\n\n            $log->delete();\n\n            return redirect()->back()\n                ->with('success', trans('admin/hardware/message.deletefile.success'));\n        }\n\n        // Redirect to the licence management page\n        return redirect()->route('licenses.index')->with('error', trans('admin/licenses/message.does_not_exist'));\n    }\n\n    /**\n     * Allows the selected file to be viewed.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.4]\n     * @param int $licenseId\n     * @param int $fileId\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function show($licenseId = null, $fileId = null, $download = true)\n    {\n        \\Log::info('Private filesystem is: '.config('filesystems.default'));\n        $license = License::find($licenseId);\n\n        // the license is valid\n        if (isset($license->id)) {\n            $this->authorize('view', $license);\n\n            if (! $log = Actionlog::find($fileId)) {\n                return response('No matching record for that asset/file', 500)\n                    ->header('Content-Type', 'text/plain');\n            }\n\n            $file = 'private_uploads/licenses/'.$log->filename;\n\n            if (Storage::missing($file)) {\n                \\Log::debug('NOT EXISTS for '.$file);\n                \\Log::debug('NOT EXISTS URL should be '.Storage::url($file));\n\n                return response('File '.$file.' ('.Storage::url($file).') not found on server', 404)\n                    ->header('Content-Type', 'text/plain');\n            } else {\n\n                // We have to override the URL stuff here, since local defaults in Laravel's Flysystem\n                // won't work, as they're not accessible via the web\n                if (config('filesystems.default') == 'local') { // TODO - is there any way to fix this at the StorageHelper layer?\n                    return StorageHelper::downloader($file);\n                } else {\n                    if ($download != 'true') {\n                        \\Log::debug('display the file');\n                        if ($contents = file_get_contents(Storage::url($file))) { // TODO - this will fail on private S3 files or large public ones\n                            return Response::make(Storage::url($file)->header('Content-Type', mime_content_type($file)));\n                        }\n\n                        return JsonResponse::create(['error' => 'Failed validation: '], 500);\n                    }\n\n                    return StorageHelper::downloader($file);\n\n                }\n            }\n        }\n\n        return redirect()->route('license.index')->with('error', trans('admin/licenses/message.does_not_exist', ['id' => $fileId]));\n    }\n}\n", "<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\License;\nuse App\\Models\\User;\n\nclass LicensePolicy extends CheckoutablePermissionsPolicy\n{\n    protected function columnName()\n    {\n        return 'licenses';\n    }\n\n    /**\n     * Determine whether the user can view license keys.\n     * This gets a little tricky, UX/logic-wise. If a user has the ability\n     * to create a license (which requires a product key), shouldn't they\n     * have the ability to see the product key as well?\n     *\n     * Example: I create the license, realize I need to change\n     * something (maybe I got the product key wrong), and now I can never\n     * see/edit that product key.\n     *\n     * @see https://github.com/snipe/snipe-it/issues/6956\n     * @param  \\App\\Models\\User  $user\n     * @param  \\App\\Models\\License  $license\n     * @return mixed\n     */\n    public function viewKeys(User $user, License $license = null)\n    {\n        if ($user->hasAccess('licenses.keys') || $user->hasAccess('licenses.create') || $user->hasAccess('licenses.edit')) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Determine whether the user can access files associated with licenses.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return mixed\n     */\n    public function files(User $user)\n    {\n        return $user->hasAccess($this->columnName().'.files');\n    }\n}\n", "<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\Company;\nuse App\\Models\\User;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\n/**\n * SnipePermissionsPolicy provides methods for handling the granular permissions used throughout Snipe-IT.\n * Each \"area\" of a permission (which is usually a model, like Assets, Departments, etc), has a setting\n * in config/permissions.php like view/create/edit/delete (and sometimes some extra stuff like\n * checkout/checkin, etc.)\n *\n * A Policy should exist for each of these models, however if they only use the standard view/create/edit/delete,\n * the policy can be pretty simple, for example with just one method setting the column name:\n *\n * protected function columnName()\n * {\n *    return 'manufacturers';\n * }\n */\nabstract class SnipePermissionsPolicy\n{\n    /**\n     * This should return the key of the model in the users json permission string.\n     *\n     * @return bool\n     */\n\n    //\n    abstract protected function columnName();\n\n    use HandlesAuthorization;\n\n    public function before(User $user, $ability, $item)\n    {\n        // Lets move all company related checks here.\n        if ($item instanceof \\App\\Models\\SnipeModel && ! Company::isCurrentUserHasAccess($item)) {\n            return false;\n        }\n        // If an admin, they can do all asset related tasks.\n        if ($user->hasAccess('admin')) {\n            return true;\n        }\n    }\n\n    public function index(User $user)\n    {\n        return $user->hasAccess($this->columnName().'.view');\n    }\n\n    /**\n     * Determine whether the user can view the accessory.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return mixed\n     */\n    public function view(User $user, $item = null)\n    {\n        return $user->hasAccess($this->columnName().'.view');\n    }\n\n    /**\n     * Determine whether the user can create accessories.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return $user->hasAccess($this->columnName().'.create');\n    }\n\n    /**\n     * Determine whether the user can update the accessory.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return mixed\n     */\n    public function update(User $user, $item = null)\n    {\n        return $user->hasAccess($this->columnName().'.edit');\n    }\n\n\n    /**\n     * Determine whether the user can update the accessory.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return mixed\n     */\n    public function checkout(User $user, $item = null)\n    {\n        return $user->hasAccess($this->columnName().'.checkout');\n    }\n\n    /**\n     * Determine whether the user can delete the accessory.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return mixed\n     */\n    public function delete(User $user, $item = null)\n    {\n        $itemConditional = true;\n        if ($item) {\n            $itemConditional = empty($item->deleted_at);\n        }\n\n        return $itemConditional && $user->hasAccess($this->columnName().'.delete');\n    }\n\n    /**\n     * Determine whether the user can manage the accessory.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return mixed\n     */\n    public function manage(User $user, $item = null)\n    {\n        return $user->hasAccess($this->columnName().'.edit');\n    }\n}\n", "<?php\n\nnamespace App\\Providers;\n\nuse App\\Models\\Accessory;\nuse App\\Models\\Asset;\nuse App\\Models\\AssetModel;\nuse App\\Models\\Category;\nuse App\\Models\\Company;\nuse App\\Models\\Component;\nuse App\\Models\\Consumable;\nuse App\\Models\\CustomField;\nuse App\\Models\\CustomFieldset;\nuse App\\Models\\Department;\nuse App\\Models\\Depreciation;\nuse App\\Models\\License;\nuse App\\Models\\Location;\nuse App\\Models\\Manufacturer;\nuse App\\Models\\PredefinedKit;\nuse App\\Models\\Statuslabel;\nuse App\\Models\\Supplier;\nuse App\\Models\\User;\nuse App\\Policies\\AccessoryPolicy;\nuse App\\Policies\\AssetModelPolicy;\nuse App\\Policies\\AssetPolicy;\nuse App\\Policies\\CategoryPolicy;\nuse App\\Policies\\CompanyPolicy;\nuse App\\Policies\\ComponentPolicy;\nuse App\\Policies\\ConsumablePolicy;\nuse App\\Policies\\CustomFieldPolicy;\nuse App\\Policies\\CustomFieldsetPolicy;\nuse App\\Policies\\DepartmentPolicy;\nuse App\\Policies\\DepreciationPolicy;\nuse App\\Policies\\LicensePolicy;\nuse App\\Policies\\LocationPolicy;\nuse App\\Policies\\ManufacturerPolicy;\nuse App\\Policies\\PredefinedKitPolicy;\nuse App\\Policies\\StatuslabelPolicy;\nuse App\\Policies\\SupplierPolicy;\nuse App\\Policies\\UserPolicy;\nuse Carbon\\Carbon;\nuse Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\nuse Illuminate\\Support\\Facades\\Gate;\nuse Laravel\\Passport\\Passport;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    /**\n     * The policy mappings for the application.\n     *\n     * See SnipePermissionsPolicy for additional information.\n     *\n     * @var array\n     */\n    protected $policies = [\n        Accessory::class => AccessoryPolicy::class,\n        Asset::class => AssetPolicy::class,\n        AssetModel::class => AssetModelPolicy::class,\n        Category::class => CategoryPolicy::class,\n        Component::class => ComponentPolicy::class,\n        Consumable::class => ConsumablePolicy::class,\n        CustomField::class => CustomFieldPolicy::class,\n        CustomFieldset::class => CustomFieldsetPolicy::class,\n        Department::class => DepartmentPolicy::class,\n        Depreciation::class => DepreciationPolicy::class,\n        License::class => LicensePolicy::class,\n        Location::class => LocationPolicy::class,\n        PredefinedKit::class => PredefinedKitPolicy::class,\n        Statuslabel::class => StatuslabelPolicy::class,\n        Supplier::class => SupplierPolicy::class,\n        User::class => UserPolicy::class,\n        Manufacturer::class => ManufacturerPolicy::class,\n        Company::class => CompanyPolicy::class,\n    ];\n\n    /**\n     * Register any authentication / authorization services.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        $this->commands([\n            \\Laravel\\Passport\\Console\\InstallCommand::class,\n            \\Laravel\\Passport\\Console\\ClientCommand::class,\n            \\Laravel\\Passport\\Console\\KeysCommand::class,\n        ]);\n\n        $this->registerPolicies();\n        Passport::routes();\n        Passport::tokensExpireIn(Carbon::now()->addYears(config('passport.expiration_years')));\n        Passport::refreshTokensExpireIn(Carbon::now()->addYears(config('passport.expiration_years')));\n        Passport::personalAccessTokensExpireIn(Carbon::now()->addYears(config('passport.expiration_years')));\n        Passport::withCookieSerialization();\n\n        // --------------------------------\n        // BEFORE ANYTHING ELSE\n        // --------------------------------\n        // If this condition is true, ANYTHING else below will be assumed\n        // to be true. This can cause weird blade behavior.\n        Gate::before(function ($user) {\n            if ($user->isSuperUser()) {\n                return true;\n            }\n        });\n\n        // --------------------------------\n        // GENERAL GATES\n        // These control general sections of the admin\n        // --------------------------------\n        Gate::define('admin', function ($user) {\n            if ($user->hasAccess('admin')) {\n                return true;\n            }\n        });\n\n        // Can the user import CSVs?\n        Gate::define('import', function ($user) {\n            if ($user->hasAccess('import')) {\n                return true;\n            }\n        });\n\n\n        // -----------------------------------------\n        // Reports\n        // -----------------------------------------\n        Gate::define('reports.view', function ($user) {\n            if ($user->hasAccess('reports.view')) {\n                return true;\n            }\n        });\n\n        // -----------------------------------------\n        // Self\n        // -----------------------------------------\n        Gate::define('self.two_factor', function ($user) {\n            if (($user->hasAccess('self.two_factor')) || ($user->hasAccess('admin'))) {\n                return true;\n            }\n        });\n\n        Gate::define('self.api', function ($user) {\n            return $user->hasAccess('self.api');\n        });\n\n        Gate::define('self.edit_location', function ($user) {\n            return $user->hasAccess('self.edit_location');\n        });\n\n        Gate::define('self.checkout_assets', function ($user) {\n            return $user->hasAccess('self.checkout_assets');\n        });\n\n        // This is largely used to determine whether to display the gear icon sidenav \n        // in the left-side navigation\n        Gate::define('backend.interact', function ($user) {\n            return $user->can('view', Statuslabel::class)\n                || $user->can('view', AssetModel::class)\n                || $user->can('view', Category::class)\n                || $user->can('view', Manufacturer::class)\n                || $user->can('view', Supplier::class)\n                || $user->can('view', Department::class)\n                || $user->can('view', Location::class)\n                || $user->can('view', Company::class)\n                || $user->can('view', Manufacturer::class)\n                || $user->can('view', CustomField::class)\n                || $user->can('view', CustomFieldset::class)\n                || $user->can('view', Depreciation::class);\n        });\n\n\n        // This  determines whether or not an API user should be able to get the selectlists.\n        // This can seem a little confusing, since view properties may not have been granted\n        // to the logged in API user, but creating assets, licenses, etc won't work \n        // if the user can't view and interact with the select lists.\n        Gate::define('view.selectlists', function ($user) {\n            return $user->can('update', Asset::class) \n                || $user->can('create', Asset::class)    \n                || $user->can('checkout', Asset::class)\n                || $user->can('checkin', Asset::class)\n                || $user->can('audit', Asset::class)       \n                || $user->can('update', License::class)   \n                || $user->can('create', License::class)   \n                || $user->can('update', Component::class)\n                || $user->can('create', Component::class)   \n                || $user->can('update', Consumable::class)   \n                || $user->can('create', Consumable::class)   \n                || $user->can('update', Accessory::class)\n                || $user->can('create', Accessory::class)   \n                || $user->can('update', User::class)\n                || $user->can('create', User::class);  \n        });\n    }\n}\n", "<?php\n\nreturn array(\n\n    'does_not_exist' => 'License does not exist.',\n    'user_does_not_exist' => 'User does not exist.',\n    'asset_does_not_exist' \t=> 'The asset you are trying to associate with this license does not exist.',\n    'owner_doesnt_match_asset' => 'The asset you are trying to associate with this license is owned by somene other than the person selected in the assigned to dropdown.',\n    'assoc_users'\t => 'This license is currently checked out to a user and cannot be deleted. Please check the license in first, and then try deleting again. ',\n    'select_asset_or_person' => 'You must select an asset or a user, but not both.',\n    'not_found' => 'License not found',\n\n\n    'create' => array(\n        'error'   => 'License was not created, please try again.',\n        'success' => 'License created successfully.'\n    ),\n\n    'deletefile' => array(\n        'error'   => 'File not deleted. Please try again.',\n        'success' => 'File successfully deleted.',\n    ),\n\n    'upload' => array(\n        'error'   => 'File(s) not uploaded. Please try again.',\n        'success' => 'File(s) successfully uploaded.',\n        'nofiles' => 'You did not select any files for upload, or the file you are trying to upload is too large',\n        'invalidfiles' => 'One or more of your files is too large or is a filetype that is not allowed. Allowed filetypes are png, gif, jpg, jpeg, doc, docx, pdf, txt, zip, rar, rtf, xml, and lic.',\n    ),\n\n    'update' => array(\n        'error'   => 'License was not updated, please try again',\n        'success' => 'License updated successfully.'\n    ),\n\n    'delete' => array(\n        'confirm'   => 'Are you sure you wish to delete this license?',\n        'error'   => 'There was an issue deleting the license. Please try again.',\n        'success' => 'The license was deleted successfully.'\n    ),\n\n    'checkout' => array(\n        'error'   => 'There was an issue checking out the license. Please try again.',\n        'success' => 'The license was checked out successfully'\n    ),\n\n    'checkin' => array(\n        'error'   => 'There was an issue checking in the license. Please try again.',\n        'success' => 'The license was checked in successfully'\n    ),\n\n);\n", "@extends('layouts/default')\n\n{{-- Page title --}}\n@section('title')\n{{ trans('admin/licenses/general.view') }}\n - {{ $license->name }}\n@parent\n@stop\n\n{{-- Page content --}}\n@section('content')\n<div class=\"row\">\n  <div class=\"col-md-12\">\n\n    <!-- Custom Tabs -->\n    <div class=\"nav-tabs-custom\">\n      \n      <ul class=\"nav nav-tabs hidden-print\">\n\n        <li class=\"active\">\n          <a href=\"#details\" data-toggle=\"tab\">\n            <span class=\"hidden-lg hidden-md\">\n            <i class=\"fas fa-info-circle fa-2x\" aria-hidden=\"true\"></i>\n            </span>\n            <span class=\"hidden-xs hidden-sm\">{{ trans('admin/users/general.info') }}</span>\n          </a>\n        </li>\n\n        <li>\n          <a href=\"#seats\" data-toggle=\"tab\">\n            <span class=\"hidden-lg hidden-md\">\n              <i class=\"far fa-list-alt fa-2x\" aria-hidden=\"true\"></i>\n              </span>\n              <span class=\"hidden-xs hidden-sm\">{{ trans('admin/licenses/form.seats') }}</span>\n              <span class=\"badge badge-secondary\">{{ number_format($license->availCount()->count()) }} / {{ number_format($license->seats) }}</span>\n\n            </a>\n        </li>\n        \n        <li>\n          <a href=\"#files\" data-toggle=\"tab\">\n            <span class=\"hidden-lg hidden-md\">\n            <i class=\"far fa-file fa-2x\" aria-hidden=\"true\"></i></span>\n            <span class=\"hidden-xs hidden-sm\">{{ trans('general.file_uploads') }}\n              {!! ($license->uploads->count() > 0 ) ? '<badge class=\"badge badge-secondary\">'.number_format($license->uploads->count()).'</badge>' : '' !!}\n            </span>\n          </a>\n        </li>\n\n        <li>\n          <a href=\"#history\" data-toggle=\"tab\">\n            <span class=\"hidden-lg hidden-md\">\n            <i class=\"fas fa-history fa-2x\" aria-hidden=\"true\"></i></span>\n            <span class=\"hidden-xs hidden-sm\">{{ trans('general.history') }}</span>\n          </a>\n        </li>\n\n    \n        @can('update', $license)\n          <li class=\"dropdown pull-right\">\n            <a class=\"dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\">\n              <i class=\"fas fa-cog\" aria-hidden=\"true\"></i> {{ trans('button.actions') }}\n              <span class=\"caret\"></span>\n            </a>\n            <ul class=\"dropdown-menu\">\n              <li><a href=\"{{ route('licenses.edit', $license->id) }}\">{{ trans('admin/licenses/general.edit') }}</a></li>\n              <li><a href=\"{{ route('clone/license', $license->id) }}\">{{ trans('admin/licenses/general.clone') }}</a></li>\n            </ul>\n          </li>\n        @endcan\n\n        @can('update', \\App\\Models\\License::class)\n          <li class=\"pull-right\"><a href=\"#\" data-toggle=\"modal\" data-target=\"#uploadFileModal\">\n              <i class=\"fas fa-paperclip\" aria-hidden=\"true\"></i> {{ trans('button.upload') }}</a>\n          </li>\n        @endcan\n      </ul>\n\n      <div class=\"tab-content\">\n\n        <div class=\"tab-pane active\" id=\"details\">\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <div class=\"container row-new-striped\">\n\n                @if (!is_null($license->company))\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>{{ trans('general.company') }}</strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      <a href=\"{{ route('companies.show', $license->company->id) }}\">{{ $license->company->name }}</a>\n                    </div>\n                  </div>\n                @endif\n\n                @if ($license->manufacturer)\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>{{ trans('admin/hardware/form.manufacturer') }}</strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      @can('view', \\App\\Models\\Manufacturer::class)\n                        <a href=\"{{ route('manufacturers.show', $license->manufacturer->id) }}\">\n                          {{ $license->manufacturer->name }}\n                        </a>\n                      @else\n                        {{ $license->manufacturer->name }}\n                      @endcan\n\n                      @if ($license->manufacturer->url)\n                        <br><i class=\"fas fa-globe-americas\" aria-hidden=\"true\"></i> <a href=\"{{ $license->manufacturer->url }}\" rel=\"noopener\">{{ $license->manufacturer->url }}</a>\n                      @endif\n\n                      @if ($license->manufacturer->support_url)\n                        <br><i class=\"far fa-life-ring\" aria-hidden=\"true\"></i>\n                        <a href=\"{{ $license->manufacturer->support_url }}\"  rel=\"noopener\">{{ $license->manufacturer->support_url }}</a>\n                      @endif\n\n                      @if ($license->manufacturer->support_phone)\n                        <br><i class=\"fas fa-phone\" aria-hidden=\"true\"></i>\n                        <a href=\"tel:{{ $license->manufacturer->support_phone }}\">{{ $license->manufacturer->support_phone }}</a>\n                      @endif\n\n                      @if ($license->manufacturer->support_email)\n                        <br><i class=\"far fa-envelope\" aria-hidden=\"true\"></i> <a href=\"mailto:{{ $license->manufacturer->support_email }}\">{{ $license->manufacturer->support_email }}</a>\n                      @endif\n                    </div>\n                  </div>\n                @endif\n\n\n                @if (!is_null($license->serial))\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>{{ trans('admin/licenses/form.license_key') }}</strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      @can('viewKeys', $license)\n                        {!! nl2br(e($license->serial)) !!}\n                      @else\n                        ------------\n                      @endcan\n                    </div>\n                  </div>\n                @endif\n\n\n                @if ($license->category)\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>{{ trans('general.category') }}</strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      <a href=\"{{ route('categories.show', $license->category->id) }}\">{{ $license->category->name }}</a>\n                    </div>\n                  </div>\n                @endif\n\n\n                @if ($license->license_name!='')\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>{{ trans('admin/licenses/form.to_name') }}</strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      {{ $license->license_name }}\n                    </div>\n                  </div>\n                @endif\n\n                @if ($license->license_email!='')\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>\n                        {{ trans('admin/licenses/form.to_email') }}\n                      </strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      {{ $license->license_email }}\n                    </div>\n                  </div>\n                @endif\n\n\n                @if ($license->supplier_id)\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>\n                        {{ trans('general.supplier') }}\n                      </strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      <a href=\"{{ route('suppliers.show', $license->supplier_id) }}\">\n                        {{ $license->supplier->name }}\n                      </a>\n                    </div>\n                  </div>\n                @endif\n\n\n                @if (isset($license->expiration_date))\n                <div class=\"row\">\n                  <div class=\"col-md-3\">\n                    <strong>\n                      {{ trans('admin/licenses/form.expiration') }}\n                    </strong>\n                  </div>\n                  <div class=\"col-md-9\">\n                    {{ Helper::getFormattedDateObject($license->expiration_date, 'date', false) }}\n                  </div>\n                </div>\n                @endif\n\n                @if ($license->termination_date)\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>\n                        {{ trans('admin/licenses/form.termination_date') }}\n                      </strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      {{ Helper::getFormattedDateObject($license->termination_date, 'date', false) }}\n                    </div>\n                  </div>\n                @endif\n\n\n                @if ($license->depreciation)\n                <div class=\"row\">\n                  <div class=\"col-md-3\">\n                    <strong>\n                      {{ trans('admin/hardware/form.depreciation') }}\n                    </strong>\n                  </div>\n                  <div class=\"col-md-9\">\n                    {{ $license->depreciation->name }}\n                    ({{ $license->depreciation->months }}\n                    {{ trans('admin/hardware/form.months') }}\n                    )\n                  </div>\n                </div>\n\n                <div class=\"row\">\n                  <div class=\"col-md-3\">\n                    <strong>\n                      {{ trans('admin/hardware/form.depreciates_on') }}\n                    </strong>\n                  </div>\n                  <div class=\"col-md-9\">\n                    {{ Helper::getFormattedDateObject($license->depreciated_date(), 'date', false) }}\n                  </div>\n                </div>\n\n\n                <div class=\"row\">\n                  <div class=\"col-md-3\">\n                    <strong>\n                      {{ trans('admin/hardware/form.fully_depreciated') }}\n                    </strong>\n                  </div>\n                  <div class=\"col-md-9\">\n                    @if ($license->time_until_depreciated()->y > 0)\n                      {{ $license->time_until_depreciated()->y }}\n                      {{ trans('admin/hardware/form.years') }},\n                    @endif\n                    {{ $license->time_until_depreciated()->m }}\n                    {{ trans('admin/hardware/form.months') }}\n                  </div>\n                </div>\n                @endif\n\n                  @if ($license->purchase_order)\n                <div class=\"row\">\n                  <div class=\"col-md-3\">\n                    <strong>\n                      {{ trans('admin/licenses/form.purchase_order') }}\n                    </strong>\n                  </div>\n                  <div class=\"col-md-9\">\n                    {{ $license->purchase_order }}\n                  </div>\n                </div>\n                  @endif\n\n\n                @if (isset($license->purchase_date))\n                <div class=\"row\">\n                  <div class=\"col-md-3\">\n                    <strong>{{ trans('general.purchase_date') }}</strong>\n                  </div>\n                  <div class=\"col-md-9\">\n                    {{ Helper::getFormattedDateObject($license->purchase_date, 'date', false) }}\n\n                  </div>\n                </div>\n                  @endif\n\n                  @if ($license->purchase_cost > 0)\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>\n                        {{ trans('general.purchase_cost') }}\n                      </strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      {{ $snipeSettings->default_currency }}\n                      {{ Helper::formatCurrencyOutput($license->purchase_cost) }}\n                    </div>\n                  </div>\n                  @endif\n\n                  @if ($license->order_number)\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>\n                        {{ trans('general.order_number') }}\n                      </strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      {{ $license->order_number }}\n                    </div>\n                  </div>\n                  @endif\n\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>\n                        {{ trans('admin/licenses/form.maintained') }}\n                      </strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      {!! $license->maintained ? '<i class=\"fas fa-check text-success\" aria-hidden=\"true\"></i> '.trans('general.yes') : '<i class=\"fas fa-times text-danger\" aria-hidden=\"true\"></i> '.trans('general.no') !!}\n                    </div>\n                  </div>\n\n                  @if (($license->seats) && ($license->seats) > 0)\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>\n                        {{ trans('admin/licenses/form.seats') }}\n                      </strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      {{ $license->seats }}\n                    </div>\n                  </div>\n                  @endif\n\n\n\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>\n                        {{ trans('admin/licenses/form.reassignable') }}\n                      </strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      {{ $license->reassignable ? 'Yes' : 'No' }}\n                    </div>\n                  </div>\n\n\n                  @if ($license->notes)\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>\n                        {{ trans('general.notes') }}\n                      </strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      {!! nl2br(e($license->notes)) !!}\n                    </div>\n                  </div>\n                  @endif\n\n              </div> <!-- end row-striped -->\n            </div>\n            </div>\n          </div> <!-- end tab-pane -->\n\n\n\n        <div class=\"tab-pane\" id=\"seats\">\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n\n              <div class=\"table-responsive\">\n\n                <table\n                        data-columns=\"{{ \\App\\Presenters\\LicensePresenter::dataTableLayoutSeats() }}\"\n                        data-cookie-id-table=\"seatsTable\"\n                        data-id-table=\"seatsTable\"\n                        id=\"seatsTable\"\n                        data-pagination=\"true\"\n                        data-search=\"false\"\n                        data-side-pagination=\"server\"\n                        data-show-columns=\"true\"\n                        data-show-fullscreen=\"true\"\n                        data-show-export=\"true\"\n                        data-show-refresh=\"true\"\n                        data-sort-order=\"asc\"\n                        data-sort-name=\"name\"\n                        class=\"table table-striped snipe-table\"\n                        data-url=\"{{ route('api.licenses.seats.index', $license->id) }}\"\n                        data-export-options='{\n                        \"fileName\": \"export-seats-{{ str_slug($license->name) }}-{{ date('Y-m-d') }}\",\n                        \"ignoreColumn\": [\"actions\",\"image\",\"change\",\"checkbox\",\"checkincheckout\",\"icon\"]\n                        }'>\n                </table>\n\n              </div>\n\n            </div>\n\n          </div> <!--/.row-->\n        </div> <!-- /.tab-pane -->\n\n        @can('files', $license)\n        <div class=\"tab-pane\" id=\"files\">\n          <div class=\"table-responsive\">\n            <table\n                data-cookie-id-table=\"licenseUploadsTable\"\n                data-id-table=\"licenseUploadsTable\"\n                id=\"licenseUploadsTable\"\n                data-search=\"true\"\n                data-pagination=\"true\"\n                data-side-pagination=\"client\"\n                data-show-columns=\"true\"\n                data-show-export=\"true\"\n                data-show-footer=\"true\"\n                data-toolbar=\"#upload-toolbar\"\n                data-show-refresh=\"true\"\n                data-sort-order=\"asc\"\n                data-sort-name=\"name\"\n                class=\"table table-striped snipe-table\"\n                data-export-options='{\n                    \"fileName\": \"export-license-uploads-{{ str_slug($license->name) }}-{{ date('Y-m-d') }}\",\n                    \"ignoreColumn\": [\"actions\",\"image\",\"change\",\"checkbox\",\"checkincheckout\",\"delete\",\"download\",\"icon\"]\n                    }'>\n            <thead>\n              <tr>\n                <th data-visible=\"true\" data-field=\"icon\" data-sortable=\"true\">{{trans('general.file_type')}}</th>\n                <th class=\"col-md-2\" data-searchable=\"true\" data-visible=\"true\" data-field=\"image\">{{ trans('general.image') }}</th>\n                <th class=\"col-md-2\" data-searchable=\"true\" data-visible=\"true\" data-field=\"filename\" data-sortable=\"true\">{{ trans('general.file_name') }}</th>\n                <th class=\"col-md-1\" data-searchable=\"true\" data-visible=\"true\" data-field=\"filesize\">{{ trans('general.filesize') }}</th>\n                <th class=\"col-md-2\" data-searchable=\"true\" data-visible=\"true\" data-field=\"notes\" data-sortable=\"true\">{{ trans('general.notes') }}</th>\n                <th class=\"col-md-1\" data-searchable=\"true\" data-visible=\"true\" data-field=\"download\">{{ trans('general.download') }}</th>\n                <th class=\"col-md-2\" data-searchable=\"true\" data-visible=\"true\" data-field=\"created_at\" data-sortable=\"true\">{{ trans('general.created_at') }}</th>\n                <th class=\"col-md-1\" data-searchable=\"true\" data-visible=\"true\" data-field=\"actions\">{{ trans('table.actions') }}</th>\n              </tr>\n            </thead>\n            <tbody>\n            @if ($license->uploads->count() > 0)\n              @foreach ($license->uploads as $file)\n              <tr>\n                <td>\n                  <i class=\"{{ Helper::filetype_icon($file->filename) }} icon-med\" aria-hidden=\"true\"></i>\n                  <span class=\"sr-only\">{{ Helper::filetype_icon($file->filename) }}</span>\n\n                </td>\n                <td>\n                  @if ($file->filename)\n                    @if ( Helper::checkUploadIsImage($file->get_src('licenses')))\n                      <a href=\"{{ route('show.licensefile', ['licenseId' => $license->id, 'fileId' => $file->id, 'download' => 'false']) }}\" data-toggle=\"lightbox\" data-type=\"image\"><img src=\"{{ route('show.licensefile', ['licenseId' => $license->id, 'fileId' => $file->id]) }}\" class=\"img-thumbnail\" style=\"max-width: 50px;\"></a>\n                    @endif\n                  @endif\n                </td>\n                <td>\n                  {{ $file->filename }}\n                </td>\n                <td data-value=\"{{ Storage::size('private_uploads/licenses/'.$file->filename) }}\">\n                  {{ Helper::formatFilesizeUnits(Storage::size('private_uploads/licenses/'.$file->filename)) }}\n                </td>\n\n                <td>\n                  @if ($file->note)\n                    {{ $file->note }}\n                  @endif\n                </td>\n                <td>\n                  @if ($file->filename)\n                    <a href=\"{{ route('show.licensefile', [$license->id, $file->id, 'download' => 'true']) }}\" class=\"btn btn-default\">\n                      <i class=\"fas fa-download\" aria-hidden=\"true\"></i>\n                      <span class=\"sr-only\">{{ trans('general.download') }}</span>\n                    </a>\n                  @endif\n                </td>\n                <td>{{ $file->created_at }}</td>\n                <td>\n                  <a class=\"btn delete-asset btn-danger btn-sm\" href=\"{{ route('delete/licensefile', [$license->id, $file->id]) }}\" data-content=\"{{ trans('general.delete_confirm', ['item' => $file->filename]) }}\" data-title=\"{{ trans('general.delete') }}\">\n                    <i class=\"fas fa-trash icon-white\" aria-hidden=\"true\"></i>\n                    <span class=\"sr-only\">{{ trans('general.delete') }}</span>\n                  </a>\n                </td>\n              </tr>\n              @endforeach\n            @else\n              <tr>\n              <td colspan=\"8\">{{ trans('general.no_results') }}</td>\n              </tr>\n            @endif\n            </tbody>\n          </table>\n          </div>\n        </div> <!-- /.tab-pane -->\n        @endcan\n\n        <div class=\"tab-pane\" id=\"history\">\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <div class=\"table-responsive\">\n              <table\n                      class=\"table table-striped snipe-table\"\n                      data-cookie-id-table=\"licenseHistoryTable\"\n                      data-id-table=\"licenseHistoryTable\"\n                      id=\"licenseHistoryTable\"\n                      data-pagination=\"true\"\n                      data-show-columns=\"true\"\n                      data-side-pagination=\"server\"\n                      data-show-refresh=\"true\"\n                      data-show-export=\"true\"\n                      data-sort-order=\"desc\"\n                      data-export-options='{\n                       \"fileName\": \"export-{{ str_slug($license->name) }}-history-{{ date('Y-m-d') }}\",\n                       \"ignoreColumn\": [\"actions\",\"image\",\"change\",\"checkbox\",\"checkincheckout\",\"icon\"]\n                     }'\n                      data-url=\"{{ route('api.activity.index', ['item_id' => $license->id, 'item_type' => 'license']) }}\">\n\n                <thead>\n                <tr>\n                  <th class=\"col-sm-2\" data-visible=\"false\" data-sortable=\"true\" data-field=\"created_at\" data-formatter=\"dateDisplayFormatter\">{{ trans('general.record_created') }}</th>\n                  <th class=\"col-sm-2\"data-visible=\"true\" data-sortable=\"true\" data-field=\"admin\" data-formatter=\"usersLinkObjFormatter\">{{ trans('general.admin') }}</th>\n                  <th class=\"col-sm-2\" data-sortable=\"true\"  data-visible=\"true\" data-field=\"action_type\">{{ trans('general.action') }}</th>\n                  <th class=\"col-sm-2\" data-sortable=\"true\"  data-visible=\"true\" data-field=\"item\" data-formatter=\"polymorphicItemFormatter\">{{ trans('general.item') }}</th>\n                  <th class=\"col-sm-2\" data-visible=\"true\" data-field=\"target\" data-formatter=\"polymorphicItemFormatter\">{{ trans('general.target') }}</th>\n                  <th class=\"col-sm-2\" data-sortable=\"true\" data-visible=\"true\" data-field=\"note\">{{ trans('general.notes') }}</th>\n                  <th class=\"col-sm-2\" data-visible=\"true\" data-field=\"action_date\" data-formatter=\"dateDisplayFormatter\">{{ trans('general.date') }}</th>\n                  @if  ($snipeSettings->require_accept_signature=='1')\n                    <th class=\"col-md-3\" data-field=\"signature_file\" data-visible=\"false\"  data-formatter=\"imageFormatter\">{{ trans('general.signature') }}</th>\n                  @endif\n                </tr>\n                </thead>\n              </table>\n              </div>\n            </div> <!-- /.col-md-12-->\n          </div> <!-- /.row-->\n        </div> <!-- /.tab-pane -->\n      </div> <!-- /.tab-content -->\n    </div> <!-- nav-tabs-custom -->\n  </div>  <!-- /.col -->\n</div> <!-- /.row -->\n\n@can('update', \\App\\Models\\License::class)\n  @include ('modals.upload-file', ['item_type' => 'license', 'item_id' => $license->id])\n@endcan\n\n@stop\n\n\n@section('moar_scripts')\n  @include ('partials.bootstrap-table')\n@stop\n"], "fixing_code": ["<?php\n\nnamespace App\\Http\\Controllers\\Licenses;\n\nuse App\\Helpers\\StorageHelper;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Requests\\AssetFileRequest;\nuse App\\Models\\Actionlog;\nuse App\\Models\\License;\nuse Illuminate\\Support\\Facades\\Response;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse enshrined\\svgSanitize\\Sanitizer;\n\nclass LicenseFilesController extends Controller\n{\n    /**\n     * Validates and stores files associated with a license.\n     *\n     * @todo Switch to using the AssetFileRequest form request validator.\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @param AssetFileRequest $request\n     * @param int $licenseId\n     * @return \\Illuminate\\Http\\RedirectResponse\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function store(AssetFileRequest $request, $licenseId = null)\n    {\n        $license = License::find($licenseId);\n\n        if (isset($license->id)) {\n            $this->authorize('update', $license);\n\n            if ($request->hasFile('file')) {\n                if (! Storage::exists('private_uploads/licenses')) {\n                    Storage::makeDirectory('private_uploads/licenses', 775);\n                }\n\n                foreach ($request->file('file') as $file) {\n\n                    $extension = $file->getClientOriginalExtension();\n                    $file_name = 'license-'.$license->id.'-'.str_random(8).'-'.str_slug(basename($file->getClientOriginalName(), '.'.$extension)).'.'.$extension;\n\n\n                        // Check for SVG and sanitize it\n                        if ($extension == 'svg') {\n                            \\Log::debug('This is an SVG');\n                            \\Log::debug($file_name);\n\n                                $sanitizer = new Sanitizer();\n                                $dirtySVG = file_get_contents($file->getRealPath());\n                                $cleanSVG = $sanitizer->sanitize($dirtySVG);\n\n                                try {\n                                    Storage::put('private_uploads/licenses/'.$file_name, $cleanSVG);\n                                } catch (\\Exception $e) {\n                                    \\Log::debug('Upload no workie :( ');\n                                    \\Log::debug($e);\n                                }\n\n                        } else {\n                            Storage::put('private_uploads/licenses/'.$file_name, file_get_contents($file));\n                        }\n\n                    //Log the upload to the log\n                    $license->logUpload($file_name, e($request->input('notes')));\n                }\n\n\n                    return redirect()->route('licenses.show', $license->id)->with('success', trans('admin/licenses/message.upload.success'));\n\n            }\n\n            return redirect()->route('licenses.show', $license->id)->with('error', trans('admin/licenses/message.upload.nofiles'));\n        }\n        // Prepare the error message\n        return redirect()->route('licenses.index')\n            ->with('error', trans('admin/licenses/message.does_not_exist'));\n    }\n\n    /**\n     * Deletes the selected license file.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @param int $licenseId\n     * @param int $fileId\n     * @return \\Illuminate\\Http\\RedirectResponse\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function destroy($licenseId = null, $fileId = null)\n    {\n        $license = License::find($licenseId);\n\n        // the asset is valid\n        if (isset($license->id)) {\n            $this->authorize('update', $license);\n            $log = Actionlog::find($fileId);\n\n            // Remove the file if one exists\n            if (Storage::exists('licenses/'.$log->filename)) {\n                try {\n                    Storage::delete('licenses/'.$log->filename);\n                } catch (\\Exception $e) {\n                    \\Log::debug($e);\n                }\n            }\n\n            $log->delete();\n\n            return redirect()->back()\n                ->with('success', trans('admin/hardware/message.deletefile.success'));\n        }\n\n        // Redirect to the licence management page\n        return redirect()->route('licenses.index')->with('error', trans('admin/licenses/message.does_not_exist'));\n    }\n\n    /**\n     * Allows the selected file to be viewed.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.4]\n     * @param int $licenseId\n     * @param int $fileId\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function show($licenseId = null, $fileId = null, $download = true)\n    {\n        \\Log::info('Private filesystem is: '.config('filesystems.default'));\n        $license = License::find($licenseId);\n\n        // the license is valid\n        if (isset($license->id)) {\n            $this->authorize('view', $license);\n            $this->authorize('licenses.files', $license);\n\n            if (! $log = Actionlog::find($fileId)) {\n                return response('No matching record for that asset/file', 500)\n                    ->header('Content-Type', 'text/plain');\n            }\n\n            $file = 'private_uploads/licenses/'.$log->filename;\n\n            if (Storage::missing($file)) {\n                \\Log::debug('NOT EXISTS for '.$file);\n                \\Log::debug('NOT EXISTS URL should be '.Storage::url($file));\n\n                return response('File '.$file.' ('.Storage::url($file).') not found on server', 404)\n                    ->header('Content-Type', 'text/plain');\n            } else {\n\n                // We have to override the URL stuff here, since local defaults in Laravel's Flysystem\n                // won't work, as they're not accessible via the web\n                if (config('filesystems.default') == 'local') { // TODO - is there any way to fix this at the StorageHelper layer?\n                    return StorageHelper::downloader($file);\n                } else {\n                    if ($download != 'true') {\n                        \\Log::debug('display the file');\n                        if ($contents = file_get_contents(Storage::url($file))) { // TODO - this will fail on private S3 files or large public ones\n                            return Response::make(Storage::url($file)->header('Content-Type', mime_content_type($file)));\n                        }\n\n                        return JsonResponse::create(['error' => 'Failed validation: '], 500);\n                    }\n\n                    return StorageHelper::downloader($file);\n\n                }\n            }\n        }\n\n        return redirect()->route('licenses.index')->with('error', trans('admin/licenses/message.does_not_exist', ['id' => $fileId]));\n    }\n}\n", "<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\License;\nuse App\\Models\\User;\n\nclass LicensePolicy extends CheckoutablePermissionsPolicy\n{\n    protected function columnName()\n    {\n        return 'licenses';\n    }\n\n    /**\n     * Determine whether the user can view license keys.\n     * This gets a little tricky, UX/logic-wise. If a user has the ability\n     * to create a license (which requires a product key), shouldn't they\n     * have the ability to see the product key as well?\n     *\n     * Example: I create the license, realize I need to change\n     * something (maybe I got the product key wrong), and now I can never\n     * see/edit that product key.\n     *\n     * @see https://github.com/snipe/snipe-it/issues/6956\n     * @param  \\App\\Models\\User  $user\n     * @param  \\App\\Models\\License  $license\n     * @return mixed\n     */\n    public function viewKeys(User $user, License $license = null)\n    {\n        if ($user->hasAccess('licenses.keys') || $user->hasAccess('licenses.create') || $user->hasAccess('licenses.edit')) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Determine whether the user can access files associated with licenses.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return mixed\n     */\n    public function viewFiles(User $user)\n    {\n        if ($user->hasAccess('licenses.files'))  {\n            return true;\n        }\n        return false;\n\n    }\n}\n", "<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\Company;\nuse App\\Models\\User;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\n/**\n * SnipePermissionsPolicy provides methods for handling the granular permissions used throughout Snipe-IT.\n * Each \"area\" of a permission (which is usually a model, like Assets, Departments, etc), has a setting\n * in config/permissions.php like view/create/edit/delete (and sometimes some extra stuff like\n * checkout/checkin, etc.)\n *\n * A Policy should exist for each of these models, however if they only use the standard view/create/edit/delete,\n * the policy can be pretty simple, for example with just one method setting the column name:\n *\n * protected function columnName()\n * {\n *    return 'manufacturers';\n * }\n */\nabstract class SnipePermissionsPolicy\n{\n    /**\n     * This should return the key of the model in the users json permission string.\n     *\n     * @return bool\n     */\n\n    //\n    abstract protected function columnName();\n\n    use HandlesAuthorization;\n\n    public function before(User $user, $ability, $item)\n    {\n        // Lets move all company related checks here.\n        if ($item instanceof \\App\\Models\\SnipeModel && ! Company::isCurrentUserHasAccess($item)) {\n            return false;\n        }\n        // If an admin, they can do all asset related tasks.\n        if ($user->hasAccess('admin')) {\n            return true;\n        }\n    }\n\n    public function index(User $user)\n    {\n        return $user->hasAccess($this->columnName().'.view');\n    }\n\n    /**\n     * Determine whether the user can view the accessory.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return mixed\n     */\n    public function view(User $user, $item = null)\n    {\n        return $user->hasAccess($this->columnName().'.view');\n    }\n\n    public function files(User $user, $item = null)\n    {\n        return $user->hasAccess($this->columnName().'.files');\n    }\n\n    /**\n     * Determine whether the user can create accessories.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return $user->hasAccess($this->columnName().'.create');\n    }\n\n    /**\n     * Determine whether the user can update the accessory.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return mixed\n     */\n    public function update(User $user, $item = null)\n    {\n        return $user->hasAccess($this->columnName().'.edit');\n    }\n\n\n    /**\n     * Determine whether the user can update the accessory.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return mixed\n     */\n    public function checkout(User $user, $item = null)\n    {\n        return $user->hasAccess($this->columnName().'.checkout');\n    }\n\n    /**\n     * Determine whether the user can delete the accessory.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return mixed\n     */\n    public function delete(User $user, $item = null)\n    {\n        $itemConditional = true;\n        if ($item) {\n            $itemConditional = empty($item->deleted_at);\n        }\n\n        return $itemConditional && $user->hasAccess($this->columnName().'.delete');\n    }\n\n    /**\n     * Determine whether the user can manage the accessory.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return mixed\n     */\n    public function manage(User $user, $item = null)\n    {\n        return $user->hasAccess($this->columnName().'.edit');\n    }\n}\n", "<?php\n\nnamespace App\\Providers;\n\nuse App\\Models\\Accessory;\nuse App\\Models\\Asset;\nuse App\\Models\\AssetModel;\nuse App\\Models\\Category;\nuse App\\Models\\Company;\nuse App\\Models\\Component;\nuse App\\Models\\Consumable;\nuse App\\Models\\CustomField;\nuse App\\Models\\CustomFieldset;\nuse App\\Models\\Department;\nuse App\\Models\\Depreciation;\nuse App\\Models\\License;\nuse App\\Models\\Location;\nuse App\\Models\\Manufacturer;\nuse App\\Models\\PredefinedKit;\nuse App\\Models\\Statuslabel;\nuse App\\Models\\Supplier;\nuse App\\Models\\User;\nuse App\\Policies\\AccessoryPolicy;\nuse App\\Policies\\AssetModelPolicy;\nuse App\\Policies\\AssetPolicy;\nuse App\\Policies\\CategoryPolicy;\nuse App\\Policies\\CompanyPolicy;\nuse App\\Policies\\ComponentPolicy;\nuse App\\Policies\\ConsumablePolicy;\nuse App\\Policies\\CustomFieldPolicy;\nuse App\\Policies\\CustomFieldsetPolicy;\nuse App\\Policies\\DepartmentPolicy;\nuse App\\Policies\\DepreciationPolicy;\nuse App\\Policies\\LicensePolicy;\nuse App\\Policies\\LocationPolicy;\nuse App\\Policies\\ManufacturerPolicy;\nuse App\\Policies\\PredefinedKitPolicy;\nuse App\\Policies\\StatuslabelPolicy;\nuse App\\Policies\\SupplierPolicy;\nuse App\\Policies\\UserPolicy;\nuse Carbon\\Carbon;\nuse Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\nuse Illuminate\\Support\\Facades\\Gate;\nuse Laravel\\Passport\\Passport;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    /**\n     * The policy mappings for the application.\n     *\n     * See SnipePermissionsPolicy for additional information.\n     *\n     * @var array\n     */\n    protected $policies = [\n        Accessory::class => AccessoryPolicy::class,\n        Asset::class => AssetPolicy::class,\n        AssetModel::class => AssetModelPolicy::class,\n        Category::class => CategoryPolicy::class,\n        Component::class => ComponentPolicy::class,\n        Consumable::class => ConsumablePolicy::class,\n        CustomField::class => CustomFieldPolicy::class,\n        CustomFieldset::class => CustomFieldsetPolicy::class,\n        Department::class => DepartmentPolicy::class,\n        Depreciation::class => DepreciationPolicy::class,\n        License::class => LicensePolicy::class,\n        Location::class => LocationPolicy::class,\n        PredefinedKit::class => PredefinedKitPolicy::class,\n        Statuslabel::class => StatuslabelPolicy::class,\n        Supplier::class => SupplierPolicy::class,\n        User::class => UserPolicy::class,\n        Manufacturer::class => ManufacturerPolicy::class,\n        Company::class => CompanyPolicy::class,\n    ];\n\n    /**\n     * Register any authentication / authorization services.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        $this->commands([\n            \\Laravel\\Passport\\Console\\InstallCommand::class,\n            \\Laravel\\Passport\\Console\\ClientCommand::class,\n            \\Laravel\\Passport\\Console\\KeysCommand::class,\n        ]);\n\n        $this->registerPolicies();\n        Passport::routes();\n        Passport::tokensExpireIn(Carbon::now()->addYears(config('passport.expiration_years')));\n        Passport::refreshTokensExpireIn(Carbon::now()->addYears(config('passport.expiration_years')));\n        Passport::personalAccessTokensExpireIn(Carbon::now()->addYears(config('passport.expiration_years')));\n        Passport::withCookieSerialization();\n\n        // --------------------------------\n        // BEFORE ANYTHING ELSE\n        // --------------------------------\n        // If this condition is true, ANYTHING else below will be assumed\n        // to be true. This can cause weird blade behavior.\n        Gate::before(function ($user) {\n            if ($user->isSuperUser()) {\n                return true;\n            }\n        });\n\n        // --------------------------------\n        // GENERAL GATES\n        // These control general sections of the admin\n        // --------------------------------\n        Gate::define('admin', function ($user) {\n            if ($user->hasAccess('admin')) {\n                return true;\n            }\n        });\n\n        // Can the user import CSVs?\n        Gate::define('import', function ($user) {\n            if ($user->hasAccess('import')) {\n                return true;\n            }\n        });\n\n\n        Gate::define('licenses.files', function ($user) {\n            if ($user->hasAccess('licenses.files')) {\n                return true;\n            }\n        });\n\n\n        // -----------------------------------------\n        // Reports\n        // -----------------------------------------\n        Gate::define('reports.view', function ($user) {\n            if ($user->hasAccess('reports.view')) {\n                return true;\n            }\n        });\n\n        // -----------------------------------------\n        // Self\n        // -----------------------------------------\n        Gate::define('self.two_factor', function ($user) {\n            if (($user->hasAccess('self.two_factor')) || ($user->hasAccess('admin'))) {\n                return true;\n            }\n        });\n\n        Gate::define('self.api', function ($user) {\n            return $user->hasAccess('self.api');\n        });\n\n        Gate::define('self.edit_location', function ($user) {\n            return $user->hasAccess('self.edit_location');\n        });\n\n        Gate::define('self.checkout_assets', function ($user) {\n            return $user->hasAccess('self.checkout_assets');\n        });\n\n        // This is largely used to determine whether to display the gear icon sidenav \n        // in the left-side navigation\n        Gate::define('backend.interact', function ($user) {\n            return $user->can('view', Statuslabel::class)\n                || $user->can('view', AssetModel::class)\n                || $user->can('view', Category::class)\n                || $user->can('view', Manufacturer::class)\n                || $user->can('view', Supplier::class)\n                || $user->can('view', Department::class)\n                || $user->can('view', Location::class)\n                || $user->can('view', Company::class)\n                || $user->can('view', Manufacturer::class)\n                || $user->can('view', CustomField::class)\n                || $user->can('view', CustomFieldset::class)\n                || $user->can('view', Depreciation::class);\n        });\n\n\n        // This  determines whether or not an API user should be able to get the selectlists.\n        // This can seem a little confusing, since view properties may not have been granted\n        // to the logged in API user, but creating assets, licenses, etc won't work \n        // if the user can't view and interact with the select lists.\n        Gate::define('view.selectlists', function ($user) {\n            return $user->can('update', Asset::class) \n                || $user->can('create', Asset::class)    \n                || $user->can('checkout', Asset::class)\n                || $user->can('checkin', Asset::class)\n                || $user->can('audit', Asset::class)       \n                || $user->can('update', License::class)   \n                || $user->can('create', License::class)   \n                || $user->can('update', Component::class)\n                || $user->can('create', Component::class)   \n                || $user->can('update', Consumable::class)   \n                || $user->can('create', Consumable::class)   \n                || $user->can('update', Accessory::class)\n                || $user->can('create', Accessory::class)   \n                || $user->can('update', User::class)\n                || $user->can('create', User::class);  \n        });\n    }\n}\n", "<?php\n\nreturn array(\n\n    'does_not_exist' => 'License does not exist or you do not have permission to view it.',\n    'user_does_not_exist' => 'User does not exist.',\n    'asset_does_not_exist' \t=> 'The asset you are trying to associate with this license does not exist.',\n    'owner_doesnt_match_asset' => 'The asset you are trying to associate with this license is owned by somene other than the person selected in the assigned to dropdown.',\n    'assoc_users'\t => 'This license is currently checked out to a user and cannot be deleted. Please check the license in first, and then try deleting again. ',\n    'select_asset_or_person' => 'You must select an asset or a user, but not both.',\n    'not_found' => 'License not found',\n\n\n    'create' => array(\n        'error'   => 'License was not created, please try again.',\n        'success' => 'License created successfully.'\n    ),\n\n    'deletefile' => array(\n        'error'   => 'File not deleted. Please try again.',\n        'success' => 'File successfully deleted.',\n    ),\n\n    'upload' => array(\n        'error'   => 'File(s) not uploaded. Please try again.',\n        'success' => 'File(s) successfully uploaded.',\n        'nofiles' => 'You did not select any files for upload, or the file you are trying to upload is too large',\n        'invalidfiles' => 'One or more of your files is too large or is a filetype that is not allowed. Allowed filetypes are png, gif, jpg, jpeg, doc, docx, pdf, txt, zip, rar, rtf, xml, and lic.',\n    ),\n\n    'update' => array(\n        'error'   => 'License was not updated, please try again',\n        'success' => 'License updated successfully.'\n    ),\n\n    'delete' => array(\n        'confirm'   => 'Are you sure you wish to delete this license?',\n        'error'   => 'There was an issue deleting the license. Please try again.',\n        'success' => 'The license was deleted successfully.'\n    ),\n\n    'checkout' => array(\n        'error'   => 'There was an issue checking out the license. Please try again.',\n        'success' => 'The license was checked out successfully'\n    ),\n\n    'checkin' => array(\n        'error'   => 'There was an issue checking in the license. Please try again.',\n        'success' => 'The license was checked in successfully'\n    ),\n\n);\n", "@extends('layouts/default')\n\n{{-- Page title --}}\n@section('title')\n{{ trans('admin/licenses/general.view') }}\n - {{ $license->name }}\n@parent\n@stop\n\n{{-- Page content --}}\n@section('content')\n<div class=\"row\">\n  <div class=\"col-md-12\">\n\n    <!-- Custom Tabs -->\n    <div class=\"nav-tabs-custom\">\n      \n      <ul class=\"nav nav-tabs hidden-print\">\n\n        <li class=\"active\">\n          <a href=\"#details\" data-toggle=\"tab\">\n            <span class=\"hidden-lg hidden-md\">\n            <i class=\"fas fa-info-circle fa-2x\" aria-hidden=\"true\"></i>\n            </span>\n            <span class=\"hidden-xs hidden-sm\">{{ trans('admin/users/general.info') }}</span>\n          </a>\n        </li>\n\n        <li>\n          <a href=\"#seats\" data-toggle=\"tab\">\n            <span class=\"hidden-lg hidden-md\">\n              <i class=\"far fa-list-alt fa-2x\" aria-hidden=\"true\"></i>\n              </span>\n              <span class=\"hidden-xs hidden-sm\">{{ trans('admin/licenses/form.seats') }}</span>\n              <span class=\"badge badge-secondary\">{{ number_format($license->availCount()->count()) }} / {{ number_format($license->seats) }}</span>\n\n            </a>\n        </li>\n\n        @can('licenses.files', $license)\n        <li>\n          <a href=\"#files\" data-toggle=\"tab\">\n            <span class=\"hidden-lg hidden-md\">\n            <i class=\"far fa-file fa-2x\" aria-hidden=\"true\"></i></span>\n            <span class=\"hidden-xs hidden-sm\">{{ trans('general.file_uploads') }}\n              {!! ($license->uploads->count() > 0 ) ? '<badge class=\"badge badge-secondary\">'.number_format($license->uploads->count()).'</badge>' : '' !!}\n            </span>\n          </a>\n        </li>\n        @endcan\n\n        <li>\n          <a href=\"#history\" data-toggle=\"tab\">\n            <span class=\"hidden-lg hidden-md\">\n            <i class=\"fas fa-history fa-2x\" aria-hidden=\"true\"></i></span>\n            <span class=\"hidden-xs hidden-sm\">{{ trans('general.history') }}</span>\n          </a>\n        </li>\n\n    \n        @can('update', $license)\n          <li class=\"dropdown pull-right\">\n            <a class=\"dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\">\n              <i class=\"fas fa-cog\" aria-hidden=\"true\"></i> {{ trans('button.actions') }}\n              <span class=\"caret\"></span>\n            </a>\n            <ul class=\"dropdown-menu\">\n              <li><a href=\"{{ route('licenses.edit', $license->id) }}\">{{ trans('admin/licenses/general.edit') }}</a></li>\n              <li><a href=\"{{ route('clone/license', $license->id) }}\">{{ trans('admin/licenses/general.clone') }}</a></li>\n            </ul>\n          </li>\n        @endcan\n\n        @can('update', \\App\\Models\\License::class)\n          <li class=\"pull-right\"><a href=\"#\" data-toggle=\"modal\" data-target=\"#uploadFileModal\">\n              <i class=\"fas fa-paperclip\" aria-hidden=\"true\"></i> {{ trans('button.upload') }}</a>\n          </li>\n        @endcan\n      </ul>\n\n      <div class=\"tab-content\">\n\n        <div class=\"tab-pane active\" id=\"details\">\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <div class=\"container row-new-striped\">\n\n                @if (!is_null($license->company))\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>{{ trans('general.company') }}</strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      <a href=\"{{ route('companies.show', $license->company->id) }}\">{{ $license->company->name }}</a>\n                    </div>\n                  </div>\n                @endif\n\n                @if ($license->manufacturer)\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>{{ trans('admin/hardware/form.manufacturer') }}</strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      @can('view', \\App\\Models\\Manufacturer::class)\n                        <a href=\"{{ route('manufacturers.show', $license->manufacturer->id) }}\">\n                          {{ $license->manufacturer->name }}\n                        </a>\n                      @else\n                        {{ $license->manufacturer->name }}\n                      @endcan\n\n                      @if ($license->manufacturer->url)\n                        <br><i class=\"fas fa-globe-americas\" aria-hidden=\"true\"></i> <a href=\"{{ $license->manufacturer->url }}\" rel=\"noopener\">{{ $license->manufacturer->url }}</a>\n                      @endif\n\n                      @if ($license->manufacturer->support_url)\n                        <br><i class=\"far fa-life-ring\" aria-hidden=\"true\"></i>\n                        <a href=\"{{ $license->manufacturer->support_url }}\"  rel=\"noopener\">{{ $license->manufacturer->support_url }}</a>\n                      @endif\n\n                      @if ($license->manufacturer->support_phone)\n                        <br><i class=\"fas fa-phone\" aria-hidden=\"true\"></i>\n                        <a href=\"tel:{{ $license->manufacturer->support_phone }}\">{{ $license->manufacturer->support_phone }}</a>\n                      @endif\n\n                      @if ($license->manufacturer->support_email)\n                        <br><i class=\"far fa-envelope\" aria-hidden=\"true\"></i> <a href=\"mailto:{{ $license->manufacturer->support_email }}\">{{ $license->manufacturer->support_email }}</a>\n                      @endif\n                    </div>\n                  </div>\n                @endif\n\n\n                @if (!is_null($license->serial))\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>{{ trans('admin/licenses/form.license_key') }}</strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      @can('viewKeys', $license)\n                        {!! nl2br(e($license->serial)) !!}\n                      @else\n                        ------------\n                      @endcan\n                    </div>\n                  </div>\n                @endif\n\n\n                @if ($license->category)\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>{{ trans('general.category') }}</strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      <a href=\"{{ route('categories.show', $license->category->id) }}\">{{ $license->category->name }}</a>\n                    </div>\n                  </div>\n                @endif\n\n\n                @if ($license->license_name!='')\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>{{ trans('admin/licenses/form.to_name') }}</strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      {{ $license->license_name }}\n                    </div>\n                  </div>\n                @endif\n\n                @if ($license->license_email!='')\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>\n                        {{ trans('admin/licenses/form.to_email') }}\n                      </strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      {{ $license->license_email }}\n                    </div>\n                  </div>\n                @endif\n\n\n                @if ($license->supplier_id)\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>\n                        {{ trans('general.supplier') }}\n                      </strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      <a href=\"{{ route('suppliers.show', $license->supplier_id) }}\">\n                        {{ $license->supplier->name }}\n                      </a>\n                    </div>\n                  </div>\n                @endif\n\n\n                @if (isset($license->expiration_date))\n                <div class=\"row\">\n                  <div class=\"col-md-3\">\n                    <strong>\n                      {{ trans('admin/licenses/form.expiration') }}\n                    </strong>\n                  </div>\n                  <div class=\"col-md-9\">\n                    {{ Helper::getFormattedDateObject($license->expiration_date, 'date', false) }}\n                  </div>\n                </div>\n                @endif\n\n                @if ($license->termination_date)\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>\n                        {{ trans('admin/licenses/form.termination_date') }}\n                      </strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      {{ Helper::getFormattedDateObject($license->termination_date, 'date', false) }}\n                    </div>\n                  </div>\n                @endif\n\n\n                @if ($license->depreciation)\n                <div class=\"row\">\n                  <div class=\"col-md-3\">\n                    <strong>\n                      {{ trans('admin/hardware/form.depreciation') }}\n                    </strong>\n                  </div>\n                  <div class=\"col-md-9\">\n                    {{ $license->depreciation->name }}\n                    ({{ $license->depreciation->months }}\n                    {{ trans('admin/hardware/form.months') }}\n                    )\n                  </div>\n                </div>\n\n                <div class=\"row\">\n                  <div class=\"col-md-3\">\n                    <strong>\n                      {{ trans('admin/hardware/form.depreciates_on') }}\n                    </strong>\n                  </div>\n                  <div class=\"col-md-9\">\n                    {{ Helper::getFormattedDateObject($license->depreciated_date(), 'date', false) }}\n                  </div>\n                </div>\n\n\n                <div class=\"row\">\n                  <div class=\"col-md-3\">\n                    <strong>\n                      {{ trans('admin/hardware/form.fully_depreciated') }}\n                    </strong>\n                  </div>\n                  <div class=\"col-md-9\">\n                    @if ($license->time_until_depreciated()->y > 0)\n                      {{ $license->time_until_depreciated()->y }}\n                      {{ trans('admin/hardware/form.years') }},\n                    @endif\n                    {{ $license->time_until_depreciated()->m }}\n                    {{ trans('admin/hardware/form.months') }}\n                  </div>\n                </div>\n                @endif\n\n                  @if ($license->purchase_order)\n                <div class=\"row\">\n                  <div class=\"col-md-3\">\n                    <strong>\n                      {{ trans('admin/licenses/form.purchase_order') }}\n                    </strong>\n                  </div>\n                  <div class=\"col-md-9\">\n                    {{ $license->purchase_order }}\n                  </div>\n                </div>\n                  @endif\n\n\n                @if (isset($license->purchase_date))\n                <div class=\"row\">\n                  <div class=\"col-md-3\">\n                    <strong>{{ trans('general.purchase_date') }}</strong>\n                  </div>\n                  <div class=\"col-md-9\">\n                    {{ Helper::getFormattedDateObject($license->purchase_date, 'date', false) }}\n\n                  </div>\n                </div>\n                  @endif\n\n                  @if ($license->purchase_cost > 0)\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>\n                        {{ trans('general.purchase_cost') }}\n                      </strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      {{ $snipeSettings->default_currency }}\n                      {{ Helper::formatCurrencyOutput($license->purchase_cost) }}\n                    </div>\n                  </div>\n                  @endif\n\n                  @if ($license->order_number)\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>\n                        {{ trans('general.order_number') }}\n                      </strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      {{ $license->order_number }}\n                    </div>\n                  </div>\n                  @endif\n\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>\n                        {{ trans('admin/licenses/form.maintained') }}\n                      </strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      {!! $license->maintained ? '<i class=\"fas fa-check text-success\" aria-hidden=\"true\"></i> '.trans('general.yes') : '<i class=\"fas fa-times text-danger\" aria-hidden=\"true\"></i> '.trans('general.no') !!}\n                    </div>\n                  </div>\n\n                  @if (($license->seats) && ($license->seats) > 0)\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>\n                        {{ trans('admin/licenses/form.seats') }}\n                      </strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      {{ $license->seats }}\n                    </div>\n                  </div>\n                  @endif\n\n\n\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>\n                        {{ trans('admin/licenses/form.reassignable') }}\n                      </strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      {{ $license->reassignable ? 'Yes' : 'No' }}\n                    </div>\n                  </div>\n\n\n                  @if ($license->notes)\n                  <div class=\"row\">\n                    <div class=\"col-md-3\">\n                      <strong>\n                        {{ trans('general.notes') }}\n                      </strong>\n                    </div>\n                    <div class=\"col-md-9\">\n                      {!! nl2br(e($license->notes)) !!}\n                    </div>\n                  </div>\n                  @endif\n\n              </div> <!-- end row-striped -->\n            </div>\n            </div>\n          </div> <!-- end tab-pane -->\n\n\n\n        <div class=\"tab-pane\" id=\"seats\">\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n\n              <div class=\"table-responsive\">\n\n                <table\n                        data-columns=\"{{ \\App\\Presenters\\LicensePresenter::dataTableLayoutSeats() }}\"\n                        data-cookie-id-table=\"seatsTable\"\n                        data-id-table=\"seatsTable\"\n                        id=\"seatsTable\"\n                        data-pagination=\"true\"\n                        data-search=\"false\"\n                        data-side-pagination=\"server\"\n                        data-show-columns=\"true\"\n                        data-show-fullscreen=\"true\"\n                        data-show-export=\"true\"\n                        data-show-refresh=\"true\"\n                        data-sort-order=\"asc\"\n                        data-sort-name=\"name\"\n                        class=\"table table-striped snipe-table\"\n                        data-url=\"{{ route('api.licenses.seats.index', $license->id) }}\"\n                        data-export-options='{\n                        \"fileName\": \"export-seats-{{ str_slug($license->name) }}-{{ date('Y-m-d') }}\",\n                        \"ignoreColumn\": [\"actions\",\"image\",\"change\",\"checkbox\",\"checkincheckout\",\"icon\"]\n                        }'>\n                </table>\n\n              </div>\n\n            </div>\n\n          </div> <!--/.row-->\n        </div> <!-- /.tab-pane -->\n\n        @can('licenses.files', $license)\n        <div class=\"tab-pane\" id=\"files\">\n          <div class=\"table-responsive\">\n            <table\n                data-cookie-id-table=\"licenseUploadsTable\"\n                data-id-table=\"licenseUploadsTable\"\n                id=\"licenseUploadsTable\"\n                data-search=\"true\"\n                data-pagination=\"true\"\n                data-side-pagination=\"client\"\n                data-show-columns=\"true\"\n                data-show-export=\"true\"\n                data-show-footer=\"true\"\n                data-toolbar=\"#upload-toolbar\"\n                data-show-refresh=\"true\"\n                data-sort-order=\"asc\"\n                data-sort-name=\"name\"\n                class=\"table table-striped snipe-table\"\n                data-export-options='{\n                    \"fileName\": \"export-license-uploads-{{ str_slug($license->name) }}-{{ date('Y-m-d') }}\",\n                    \"ignoreColumn\": [\"actions\",\"image\",\"change\",\"checkbox\",\"checkincheckout\",\"delete\",\"download\",\"icon\"]\n                    }'>\n            <thead>\n              <tr>\n                <th data-visible=\"true\" data-field=\"icon\" data-sortable=\"true\">{{trans('general.file_type')}}</th>\n                <th class=\"col-md-2\" data-searchable=\"true\" data-visible=\"true\" data-field=\"image\">{{ trans('general.image') }}</th>\n                <th class=\"col-md-2\" data-searchable=\"true\" data-visible=\"true\" data-field=\"filename\" data-sortable=\"true\">{{ trans('general.file_name') }}</th>\n                <th class=\"col-md-1\" data-searchable=\"true\" data-visible=\"true\" data-field=\"filesize\">{{ trans('general.filesize') }}</th>\n                <th class=\"col-md-2\" data-searchable=\"true\" data-visible=\"true\" data-field=\"notes\" data-sortable=\"true\">{{ trans('general.notes') }}</th>\n                <th class=\"col-md-1\" data-searchable=\"true\" data-visible=\"true\" data-field=\"download\">{{ trans('general.download') }}</th>\n                <th class=\"col-md-2\" data-searchable=\"true\" data-visible=\"true\" data-field=\"created_at\" data-sortable=\"true\">{{ trans('general.created_at') }}</th>\n                <th class=\"col-md-1\" data-searchable=\"true\" data-visible=\"true\" data-field=\"actions\">{{ trans('table.actions') }}</th>\n              </tr>\n            </thead>\n            <tbody>\n            @if ($license->uploads->count() > 0)\n              @foreach ($license->uploads as $file)\n              <tr>\n                <td>\n                  <i class=\"{{ Helper::filetype_icon($file->filename) }} icon-med\" aria-hidden=\"true\"></i>\n                  <span class=\"sr-only\">{{ Helper::filetype_icon($file->filename) }}</span>\n\n                </td>\n                <td>\n                  @if ($file->filename)\n                    @if ( Helper::checkUploadIsImage($file->get_src('licenses')))\n                      <a href=\"{{ route('show.licensefile', ['licenseId' => $license->id, 'fileId' => $file->id, 'download' => 'false']) }}\" data-toggle=\"lightbox\" data-type=\"image\"><img src=\"{{ route('show.licensefile', ['licenseId' => $license->id, 'fileId' => $file->id]) }}\" class=\"img-thumbnail\" style=\"max-width: 50px;\"></a>\n                    @endif\n                  @endif\n                </td>\n                <td>\n                  {{ $file->filename }}\n                </td>\n                <td data-value=\"{{ Storage::size('private_uploads/licenses/'.$file->filename) }}\">\n                  {{ Helper::formatFilesizeUnits(Storage::size('private_uploads/licenses/'.$file->filename)) }}\n                </td>\n\n                <td>\n                  @if ($file->note)\n                    {{ $file->note }}\n                  @endif\n                </td>\n                <td>\n                  @if ($file->filename)\n                    <a href=\"{{ route('show.licensefile', [$license->id, $file->id, 'download' => 'true']) }}\" class=\"btn btn-default\">\n                      <i class=\"fas fa-download\" aria-hidden=\"true\"></i>\n                      <span class=\"sr-only\">{{ trans('general.download') }}</span>\n                    </a>\n                  @endif\n                </td>\n                <td>{{ $file->created_at }}</td>\n                <td>\n                  <a class=\"btn delete-asset btn-danger btn-sm\" href=\"{{ route('delete/licensefile', [$license->id, $file->id]) }}\" data-content=\"{{ trans('general.delete_confirm', ['item' => $file->filename]) }}\" data-title=\"{{ trans('general.delete') }}\">\n                    <i class=\"fas fa-trash icon-white\" aria-hidden=\"true\"></i>\n                    <span class=\"sr-only\">{{ trans('general.delete') }}</span>\n                  </a>\n                </td>\n              </tr>\n              @endforeach\n            @else\n              <tr>\n              <td colspan=\"8\">{{ trans('general.no_results') }}</td>\n              </tr>\n            @endif\n            </tbody>\n          </table>\n          </div>\n        </div> <!-- /.tab-pane -->\n        @endcan\n\n        <div class=\"tab-pane\" id=\"history\">\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <div class=\"table-responsive\">\n              <table\n                      class=\"table table-striped snipe-table\"\n                      data-cookie-id-table=\"licenseHistoryTable\"\n                      data-id-table=\"licenseHistoryTable\"\n                      id=\"licenseHistoryTable\"\n                      data-pagination=\"true\"\n                      data-show-columns=\"true\"\n                      data-side-pagination=\"server\"\n                      data-show-refresh=\"true\"\n                      data-show-export=\"true\"\n                      data-sort-order=\"desc\"\n                      data-export-options='{\n                       \"fileName\": \"export-{{ str_slug($license->name) }}-history-{{ date('Y-m-d') }}\",\n                       \"ignoreColumn\": [\"actions\",\"image\",\"change\",\"checkbox\",\"checkincheckout\",\"icon\"]\n                     }'\n                      data-url=\"{{ route('api.activity.index', ['item_id' => $license->id, 'item_type' => 'license']) }}\">\n\n                <thead>\n                <tr>\n                  <th class=\"col-sm-2\" data-visible=\"false\" data-sortable=\"true\" data-field=\"created_at\" data-formatter=\"dateDisplayFormatter\">{{ trans('general.record_created') }}</th>\n                  <th class=\"col-sm-2\"data-visible=\"true\" data-sortable=\"true\" data-field=\"admin\" data-formatter=\"usersLinkObjFormatter\">{{ trans('general.admin') }}</th>\n                  <th class=\"col-sm-2\" data-sortable=\"true\"  data-visible=\"true\" data-field=\"action_type\">{{ trans('general.action') }}</th>\n                  <th class=\"col-sm-2\" data-sortable=\"true\"  data-visible=\"true\" data-field=\"item\" data-formatter=\"polymorphicItemFormatter\">{{ trans('general.item') }}</th>\n                  <th class=\"col-sm-2\" data-visible=\"true\" data-field=\"target\" data-formatter=\"polymorphicItemFormatter\">{{ trans('general.target') }}</th>\n                  <th class=\"col-sm-2\" data-sortable=\"true\" data-visible=\"true\" data-field=\"note\">{{ trans('general.notes') }}</th>\n                  <th class=\"col-sm-2\" data-visible=\"true\" data-field=\"action_date\" data-formatter=\"dateDisplayFormatter\">{{ trans('general.date') }}</th>\n                  @if  ($snipeSettings->require_accept_signature=='1')\n                    <th class=\"col-md-3\" data-field=\"signature_file\" data-visible=\"false\"  data-formatter=\"imageFormatter\">{{ trans('general.signature') }}</th>\n                  @endif\n                </tr>\n                </thead>\n              </table>\n              </div>\n            </div> <!-- /.col-md-12-->\n          </div> <!-- /.row-->\n        </div> <!-- /.tab-pane -->\n      </div> <!-- /.tab-content -->\n    </div> <!-- nav-tabs-custom -->\n  </div>  <!-- /.col -->\n</div> <!-- /.row -->\n\n@can('update', \\App\\Models\\License::class)\n  @include ('modals.upload-file', ['item_type' => 'license', 'item_id' => $license->id])\n@endcan\n\n@stop\n\n\n@section('moar_scripts')\n  @include ('partials.bootstrap-table')\n@stop\n"], "filenames": ["app/Http/Controllers/Licenses/LicenseFilesController.php", "app/Policies/LicensePolicy.php", "app/Policies/SnipePermissionsPolicy.php", "app/Providers/AuthServiceProvider.php", "resources/lang/en/admin/licenses/message.php", "resources/views/licenses/view.blade.php"], "buggy_code_start_loc": [137, 45, 63, 124, 5, 39], "buggy_code_end_loc": [175, 48, 63, 124, 6, 420], "fixing_code_start_loc": [138, 45, 64, 125, 5, 39], "fixing_code_end_loc": [176, 52, 69, 132, 6, 422], "type": "CWE-287", "message": "Improper Authentication in GitHub repository snipe/snipe-it prior to 6.0.10.", "other": {"cve": {"id": "CVE-2022-3173", "sourceIdentifier": "security@huntr.dev", "published": "2022-09-17T07:15:08.690", "lastModified": "2022-09-21T06:20:26.903", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Authentication in GitHub repository snipe/snipe-it prior to 6.0.10."}, {"lang": "es", "value": "Una Autenticaci\u00f3n Inapropiada en el repositorio de GitHub snipe/snipe-it versiones anteriores a 6.0.10"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:snipeitapp:snipe-it:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.0.10", "matchCriteriaId": "244AAF46-E0CA-4BCD-A860-6E114FCD80DB"}]}]}], "references": [{"url": "https://github.com/snipe/snipe-it/commit/dcab1381e7ee0b7fd1df3a34750dbff4b79185b2", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/6d8ffcc6-c6e3-4385-8ead-bdbbbacf79e9", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/snipe/snipe-it/commit/dcab1381e7ee0b7fd1df3a34750dbff4b79185b2"}}