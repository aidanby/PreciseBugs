{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\npimcore.registerNS(\"pimcore.settings.user.workspace.asset\");\npimcore.settings.user.workspace.asset = Class.create({\n\n    initialize: function (parent) {\n        this.parent = parent;\n\n        if(typeof this.parent.data[\"user\"] != \"undefined\") {\n            this.data = this.parent.data.user;\n        } else if(typeof this.parent.data[\"role\"] != \"undefined\") {\n            this.data = this.parent.data.role;\n        }\n    },\n\n    getPanel: function () {\n\n        var availableRights = [\"list\",\"view\",\"publish\",\"delete\",\"rename\",\"create\",\"settings\",\"versions\",\"properties\"];\n        var gridPlugins = [];\n        var storeFields = [\"path\"];\n\n        var typesColumns = [\n            {text: t(\"path\"), width: 200, sortable: false, dataIndex: 'path',\n                        editor: new Ext.form.TextField({}),\n                        tdCls: \"pimcore_property_droptarget\"\n            }\n        ];\n\n        var check;\n        for (var i=0; i<availableRights.length; i++) {\n\n            // columns\n            check = new Ext.grid.column.Check({\n                text: t(availableRights[i]),\n                dataIndex: availableRights[i],\n                width: 50,\n                flex: 1\n            });\n\n            typesColumns.push(check);\n            gridPlugins.push(check);\n\n            // store fields\n            storeFields.push({name:availableRights[i], type: 'bool'});\n        }\n\n        typesColumns.push({\n            xtype: 'actioncolumn',\n            menuText: t('delete'),\n            width: 40,\n            items: [{\n                tooltip: t('delete'),\n                icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                handler: function (grid, rowIndex) {\n                    grid.getStore().removeAt(rowIndex);\n                    this.updateRows();\n                }.bind(this)\n            }]\n        });\n\n        this.store = new Ext.data.JsonStore({\n            autoDestroy: true,\n            proxy: {\n                type: 'memory',\n                reader: {\n\n                    rootProperty: 'workspacesAsset'\n                }\n            },\n            fields: storeFields,\n            data: this.data\n        });\n        \n        this.cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\n            clicksToEdit: 1\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame: false,\n            autoScroll: true,\n            store: this.store,\n            columns : typesColumns,\n            trackMouseOver: true,\n            columnLines: true,\n            stripeRows: true,\n            autoExpandColumn: \"path\",\n            autoHeight: true,\n            style: \"margin-bottom:20px;\",\n            plugins: [\n                this.cellEditing\n            ],\n            tbar: [\n                {\n                    xtype: \"tbtext\",\n                    text: \"<b>\" + t(\"assets\") + \"</b>\"\n                },\n                \"-\",\"-\",\n                {\n                    iconCls: \"pimcore_icon_add\",\n                    text: t(\"add\"),\n                    handler: this.onAdd.bind(this)\n                }\n            ],\n            viewConfig: {\n                forceFit: true,\n                listeners: {\n                    rowupdated: this.updateRows.bind(this),\n                    refresh: this.updateRows.bind(this)\n                }\n            }\n        });\n\n        this.store.on(\"update\", this.updateRows.bind(this));\n        this.grid.on(\"viewready\", this.updateRows.bind(this));\n\n\n        return this.grid;\n    },\n\n    updateRows: function () {\n\n        var rows = Ext.get(this.grid.getEl().dom).query(\".x-grid-row\");\n\n        for (var i = 0; i < rows.length; i++) {\n\n            var dd = new Ext.dd.DropZone(rows[i], {\n                ddGroup: \"element\",\n\n                getTargetFromEvent: function(e) {\n                    return this.getEl();\n                },\n\n                onNodeOver : function(target, dd, e, data) {\n                    if (data.records.length == 1 && data.records[0].data.elementType == \"asset\") {\n                        return Ext.dd.DropZone.prototype.dropAllowed;\n                    }\n                },\n\n                onNodeDrop : function(myRowIndex, target, dd, e, data) {\n                    if (pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n                        try {\n                            var record = data.records[0];\n                            var data = record.data;\n\n                            // check for duplicate records\n                            var index = this.grid.getStore().findExact(\"path\", data.path);\n                            if (index >= 0) {\n                                return false;\n                            }\n\n                            if (data.elementType != \"asset\") {\n                                return false;\n                            }\n\n                            var rec = this.grid.getStore().getAt(myRowIndex);\n                            rec.set(\"path\", data.path);\n\n                            this.updateRows();\n\n                            return true;\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }\n                }.bind(this, i)\n            });\n        }\n\n    },\n\n    onAdd: function (btn, ev) {\n        this.grid.store.insert(0, {\n            path: \"\"\n        });\n\n        this.updateRows();\n    },\n\n    getValues: function () {\n\n        var values = [];\n        this.store.commitChanges();\n\n        var records = this.store.getRange();\n        for (var i = 0; i < records.length; i++) {\n            var currentData = records[i];\n            if (currentData) {\n                    values.push(currentData.data);\n            }\n        }\n\n        return values;\n    }\n});", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\npimcore.registerNS(\"pimcore.settings.user.workspace.document\");\npimcore.settings.user.workspace.document = Class.create({\n\n    initialize: function (parent) {\n        this.parent = parent;\n\n        if(typeof this.parent.data[\"user\"] != \"undefined\") {\n            this.data = this.parent.data.user;\n        } else if(typeof this.parent.data[\"role\"] != \"undefined\") {\n            this.data = this.parent.data.role;\n        }\n    },\n\n    getPanel: function () {\n\n        var availableRights = [\"list\",\"view\",\"save\",\"publish\",\"unpublish\",\"delete\",\"rename\",\"create\",\"settings\",\n                                                            \"versions\",\"properties\"];\n        var gridPlugins = [];\n        var storeFields = [\"path\"];\n\n        var typesColumns = [\n            {text: t(\"path\"), width: 200, sortable: false, dataIndex: 'path',\n                    editor: new Ext.form.TextField({}),\n                tdCls: \"pimcore_property_droptarget\"\n            }\n        ];\n\n        var check;\n        for (var i=0; i<availableRights.length; i++) {\n\n            // columns\n            check = new Ext.grid.column.Check({\n                text: t(availableRights[i]),\n                dataIndex: availableRights[i],\n                width: 50,\n                flex: 1\n            });\n\n            typesColumns.push(check);\n            gridPlugins.push(check);\n\n            // store fields\n            storeFields.push({name:availableRights[i], type: 'bool'});\n        }\n\n        typesColumns.push({\n            xtype: 'actioncolumn',\n            menuText: t('delete'),\n            width: 40,\n            items: [{\n                tooltip: t('delete'),\n                icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                handler: function (grid, rowIndex) {\n                    grid.getStore().removeAt(rowIndex);\n                    this.updateRows();\n                }.bind(this)\n            }]\n        });\n\n        this.store = new Ext.data.JsonStore({\n            autoDestroy: true,\n            proxy: {\n                type: 'memory',\n                reader: {\n\n                    rootProperty: 'workspacesDocument'\n                }\n            },\n            fields: storeFields,\n            data: this.data\n        });\n\n        this.cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\n            clicksToEdit: 1\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame: false,\n            autoScroll: true,\n            store: this.store,\n            columns : typesColumns,\n            trackMouseOver: true,\n            columnLines: true,\n            stripeRows: true,\n            autoExpandColumn: \"path\",\n            autoHeight: true,\n            style: \"margin-bottom:20px;\",\n            plugins: [\n                this.cellEditing\n            ],\n            tbar: [\n                {\n                    xtype: \"tbtext\",\n                    text: \"<b>\" + t(\"documents\") + \"</b>\"\n                },\n                \"-\",\"-\",\n                {\n                    iconCls: \"pimcore_icon_add\",\n                    text: t(\"add\"),\n                    handler: this.onAdd.bind(this)\n                }\n            ],\n            viewConfig: {\n                forceFit: true,\n                listeners: {\n                    rowupdated: this.updateRows.bind(this),\n                    refresh: this.updateRows.bind(this)\n                }\n            }\n        });\n\n        this.store.on(\"update\", this.updateRows.bind(this));\n        this.grid.on(\"viewready\", this.updateRows.bind(this));\n\n\n        return this.grid;\n    },\n\n    updateRows: function () {\n\n        var rows = Ext.get(this.grid.getEl().dom).query(\".x-grid-row\");\n\n        for (var i = 0; i < rows.length; i++) {\n\n            var dd = new Ext.dd.DropZone(rows[i], {\n                ddGroup: \"element\",\n\n                getTargetFromEvent: function(e) {\n                    return this.getEl();\n                },\n\n                onNodeOver : function(target, dd, e, data) {\n                    if (data.records.length == 1 && data.records[0].data.elementType == \"document\") {\n                        return Ext.dd.DropZone.prototype.dropAllowed;\n                    }\n                },\n\n                onNodeDrop : function(myRowIndex, target, dd, e, data) {\n                    if (pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n                        try {\n                            var record = data.records[0];\n                            var data = record.data;\n\n                            // check for duplicate records\n                            var index = this.grid.getStore().findExact(\"path\", data.path);\n                            if (index >= 0) {\n                                return false;\n                            }\n\n                            if (data.elementType != \"document\") {\n                                return false;\n                            }\n\n                            var rec = this.grid.getStore().getAt(myRowIndex);\n                            rec.set(\"path\", data.path);\n\n                            this.updateRows();\n\n                            return true;\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }\n                }.bind(this, i)\n            });\n        }\n\n    },\n\n    onAdd: function (btn, ev) {\n        this.grid.store.insert(0, {\n            path: \"\"\n        });\n\n        this.updateRows();\n    },\n\n    getValues: function () {\n\n        var values = [];\n        this.store.commitChanges();\n\n        var records = this.store.getRange();\n        for (var i = 0; i < records.length; i++) {\n            var currentData = records[i];\n            if (currentData) {\n                    values.push(currentData.data);\n            }\n        }\n\n        return values;\n    }\n});", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\npimcore.registerNS(\"pimcore.settings.user.workspace.object\");\npimcore.settings.user.workspace.object = Class.create({\n\n    initialize: function (parent) {\n        this.parent = parent;\n\n        if(typeof this.parent.data[\"user\"] != \"undefined\") {\n            this.data = this.parent.data.user;\n        } else if(typeof this.parent.data[\"role\"] != \"undefined\") {\n            this.data = this.parent.data.role;\n        }\n    },\n\n    getPanel: function () {\n\n        var availableRights = [\"list\",\"view\",\"save\",\"publish\",\"unpublish\",\"delete\",\"rename\",\"create\",\"settings\",\n                                                                \"versions\",\"properties\"];\n\n        var gridPlugins = [];\n        var storeFields = [\"path\"];\n\n        var typesColumns = [\n            {text: t(\"path\"), width: 200, sortable: false, dataIndex: 'path',\n                                editor: new Ext.form.TextField({}),\n                                tdCls: \"pimcore_property_droptarget\"\n            }\n        ];\n\n        var check;\n        for (var i=0; i<availableRights.length; i++) {\n\n            // columns\n            check = new Ext.grid.column.Check({\n                text: t(availableRights[i]),\n                dataIndex: availableRights[i],\n                width: 50,\n                flex: 1\n            });\n\n            typesColumns.push(check);\n            gridPlugins.push(check);\n\n            // store fields\n            storeFields.push({name:availableRights[i], type: 'bool'});\n        }\n\n        storeFields.push({name: \"lEdit\", type: 'string'});\n        storeFields.push({name: \"lView\", type: 'string'});\n        storeFields.push({name: \"layouts\", type: 'string'});\n\n        typesColumns.push({\n            xtype: 'actioncolumn',\n            text: t('special_settings'),\n            menuText: t('special_settings'),\n            width: 40,\n            items: [{\n                tooltip: t('special_settings_tooltip'),\n                icon: \"/bundles/pimcoreadmin/img/flat-color-icons/settings.svg\",\n                handler: function (grid, rowIndex) {\n                    var data = grid.getStore().getAt(rowIndex);\n                    var callback = this.applySpecialConfigs.bind(this, data, \"special\");\n                    var specialData = {\n                        lView: data.data.lView,\n                        lEdit: data.data.lEdit,\n                        layouts: data.data.layouts,\n                        path: data.data.path\n                    };\n\n                    var dialog = new pimcore.settings.user.workspace.special(callback, specialData, data.data.path);\n                    dialog.show();\n                }.bind(this)\n            }]\n        });\n\n\n\n        typesColumns.push({\n            xtype: 'actioncolumn',\n            menuText: t('delete'),\n            width: 40,\n            items: [{\n                tooltip: t('delete'),\n                icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                handler: function (grid, rowIndex) {\n                    grid.getStore().removeAt(rowIndex);\n                    this.updateRows();\n                }.bind(this)\n            }]\n        });\n\n        this.store = new Ext.data.JsonStore({\n           autoDestroy: true,\n            proxy: {\n                type: 'memory',\n                reader: {\n\n                    rootProperty: 'workspacesObject'\n                }\n            },\n           fields: storeFields,\n           data: this.data\n       });\n\n\n        this.cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\n            clicksToEdit: 1\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame: false,\n            autoScroll: true,\n            store: this.store,\n            columns : typesColumns,\n            trackMouseOver: true,\n            columnLines: true,\n            stripeRows: true,\n            autoExpandColumn: \"path\",\n            autoHeight: true,\n            style: \"margin-bottom:20px;\",\n            plugins: [\n                this.cellEditing\n            ],\n            tbar: [\n                {\n                    xtype: \"tbtext\",\n                    text: \"<b>\" + t(\"data_objects\") + \"</b>\"\n                },\n                \"-\",\"-\",\n                {\n                    iconCls: \"pimcore_icon_add\",\n                    text: t(\"add\"),\n                    handler: this.onAdd.bind(this)\n                }\n            ],\n            viewConfig: {\n                forceFit: true,\n                listeners: {\n                    rowupdated: this.updateRows.bind(this),\n                    refresh: this.updateRows.bind(this)\n                }\n            }\n        });\n\n        this.store.on(\"update\", this.updateRows.bind(this));\n        this.grid.on(\"viewready\", this.updateRows.bind(this));\n\n\n        return this.grid;\n    },\n\n    updateRows: function () {\n\n        var rows = Ext.get(this.grid.getEl().dom).query(\".x-grid-row\");\n\n        for (var i = 0; i < rows.length; i++) {\n\n            var dd = new Ext.dd.DropZone(rows[i], {\n                ddGroup: \"element\",\n\n                getTargetFromEvent: function(e) {\n                    return this.getEl();\n                },\n\n                onNodeOver : function(target, dd, e, data) {\n                    if (data.records.length == 1 && data.records[0].data.elementType == \"object\") {\n                        return Ext.dd.DropZone.prototype.dropAllowed;\n                    }\n                },\n\n                onNodeDrop : function(myRowIndex, target, dd, e, data) {\n                    if (pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n                        try {\n                            var record = data.records[0];\n                            var data = record.data;\n\n                            // check for duplicate records\n                            var index = this.grid.getStore().findExact(\"path\", data.path);\n                            if (index >= 0) {\n                                return false;\n                            }\n\n                            if (data.elementType != \"object\") {\n                                return false;\n                            }\n\n                            var rec = this.grid.getStore().getAt(myRowIndex);\n                            rec.set(\"path\", data.path);\n\n                            this.updateRows();\n\n                            return true;\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }\n                }.bind(this, i)\n            });\n        }\n\n    },\n\n    onAdd: function (btn, ev) {\n        this.grid.store.insert(0, {\n            path: \"\"\n        });\n\n        this.updateRows();\n    },\n\n    getValues: function () {\n\n        var values = [];\n        this.store.commitChanges();\n\n        var records = this.store.getRange();\n        for (var i = 0; i < records.length; i++) {\n            var currentData = records[i];\n            if (currentData) {\n                    values.push(currentData.data);\n            }\n        }\n\n        return values;\n    },\n\n    applySpecialConfigs: function(rec, column, value) {\n        rec.set(\"lView\", value[\"lView\"]);\n        rec.set(\"lEdit\", value[\"lEdit\"]);\n        rec.set(\"layouts\", value[\"layouts\"]);\n    }\n\n});"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\npimcore.registerNS(\"pimcore.settings.user.workspace.asset\");\npimcore.settings.user.workspace.asset = Class.create({\n\n    initialize: function (parent) {\n        this.parent = parent;\n\n        if(typeof this.parent.data[\"user\"] != \"undefined\") {\n            this.data = this.parent.data.user;\n        } else if(typeof this.parent.data[\"role\"] != \"undefined\") {\n            this.data = this.parent.data.role;\n        }\n    },\n\n    getPanel: function () {\n\n        var availableRights = [\"list\",\"view\",\"publish\",\"delete\",\"rename\",\"create\",\"settings\",\"versions\",\"properties\"];\n        var gridPlugins = [];\n        var storeFields = [\"path\"];\n\n        var typesColumns = [\n            {text: t(\"path\"), width: 200, sortable: false, dataIndex: 'path',\n                        editor: new Ext.form.TextField({}),\n                        renderer: Ext.util.Format.htmlEncode,\n                        tdCls: \"pimcore_property_droptarget\"\n            }\n        ];\n\n        var check;\n        for (var i=0; i<availableRights.length; i++) {\n\n            // columns\n            check = new Ext.grid.column.Check({\n                text: t(availableRights[i]),\n                dataIndex: availableRights[i],\n                width: 50,\n                flex: 1\n            });\n\n            typesColumns.push(check);\n            gridPlugins.push(check);\n\n            // store fields\n            storeFields.push({name:availableRights[i], type: 'bool'});\n        }\n\n        typesColumns.push({\n            xtype: 'actioncolumn',\n            menuText: t('delete'),\n            width: 40,\n            items: [{\n                tooltip: t('delete'),\n                icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                handler: function (grid, rowIndex) {\n                    grid.getStore().removeAt(rowIndex);\n                    this.updateRows();\n                }.bind(this)\n            }]\n        });\n\n        this.store = new Ext.data.JsonStore({\n            autoDestroy: true,\n            proxy: {\n                type: 'memory',\n                reader: {\n\n                    rootProperty: 'workspacesAsset'\n                }\n            },\n            fields: storeFields,\n            data: this.data\n        });\n        \n        this.cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\n            clicksToEdit: 1\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame: false,\n            autoScroll: true,\n            store: this.store,\n            columns : typesColumns,\n            trackMouseOver: true,\n            columnLines: true,\n            stripeRows: true,\n            autoExpandColumn: \"path\",\n            autoHeight: true,\n            style: \"margin-bottom:20px;\",\n            plugins: [\n                this.cellEditing\n            ],\n            tbar: [\n                {\n                    xtype: \"tbtext\",\n                    text: \"<b>\" + t(\"assets\") + \"</b>\"\n                },\n                \"-\",\"-\",\n                {\n                    iconCls: \"pimcore_icon_add\",\n                    text: t(\"add\"),\n                    handler: this.onAdd.bind(this)\n                }\n            ],\n            viewConfig: {\n                forceFit: true,\n                listeners: {\n                    rowupdated: this.updateRows.bind(this),\n                    refresh: this.updateRows.bind(this)\n                }\n            }\n        });\n\n        this.store.on(\"update\", this.updateRows.bind(this));\n        this.grid.on(\"viewready\", this.updateRows.bind(this));\n\n\n        return this.grid;\n    },\n\n    updateRows: function () {\n\n        var rows = Ext.get(this.grid.getEl().dom).query(\".x-grid-row\");\n\n        for (var i = 0; i < rows.length; i++) {\n\n            var dd = new Ext.dd.DropZone(rows[i], {\n                ddGroup: \"element\",\n\n                getTargetFromEvent: function(e) {\n                    return this.getEl();\n                },\n\n                onNodeOver : function(target, dd, e, data) {\n                    if (data.records.length == 1 && data.records[0].data.elementType == \"asset\") {\n                        return Ext.dd.DropZone.prototype.dropAllowed;\n                    }\n                },\n\n                onNodeDrop : function(myRowIndex, target, dd, e, data) {\n                    if (pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n                        try {\n                            var record = data.records[0];\n                            var data = record.data;\n\n                            // check for duplicate records\n                            var index = this.grid.getStore().findExact(\"path\", data.path);\n                            if (index >= 0) {\n                                return false;\n                            }\n\n                            if (data.elementType != \"asset\") {\n                                return false;\n                            }\n\n                            var rec = this.grid.getStore().getAt(myRowIndex);\n                            rec.set(\"path\", data.path);\n\n                            this.updateRows();\n\n                            return true;\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }\n                }.bind(this, i)\n            });\n        }\n\n    },\n\n    onAdd: function (btn, ev) {\n        this.grid.store.insert(0, {\n            path: \"\"\n        });\n\n        this.updateRows();\n    },\n\n    getValues: function () {\n\n        var values = [];\n        this.store.commitChanges();\n\n        var records = this.store.getRange();\n        for (var i = 0; i < records.length; i++) {\n            var currentData = records[i];\n            if (currentData) {\n                    values.push(currentData.data);\n            }\n        }\n\n        return values;\n    }\n});", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\npimcore.registerNS(\"pimcore.settings.user.workspace.document\");\npimcore.settings.user.workspace.document = Class.create({\n\n    initialize: function (parent) {\n        this.parent = parent;\n\n        if(typeof this.parent.data[\"user\"] != \"undefined\") {\n            this.data = this.parent.data.user;\n        } else if(typeof this.parent.data[\"role\"] != \"undefined\") {\n            this.data = this.parent.data.role;\n        }\n    },\n\n    getPanel: function () {\n\n        var availableRights = [\"list\",\"view\",\"save\",\"publish\",\"unpublish\",\"delete\",\"rename\",\"create\",\"settings\",\n                                                            \"versions\",\"properties\"];\n        var gridPlugins = [];\n        var storeFields = [\"path\"];\n\n        var typesColumns = [\n            {text: t(\"path\"), width: 200, sortable: false, dataIndex: 'path',\n                    editor: new Ext.form.TextField({}),\n                    renderer: Ext.util.Format.htmlEncode,\n                    tdCls: \"pimcore_property_droptarget\"\n            }\n        ];\n\n        var check;\n        for (var i=0; i<availableRights.length; i++) {\n\n            // columns\n            check = new Ext.grid.column.Check({\n                text: t(availableRights[i]),\n                dataIndex: availableRights[i],\n                width: 50,\n                flex: 1\n            });\n\n            typesColumns.push(check);\n            gridPlugins.push(check);\n\n            // store fields\n            storeFields.push({name:availableRights[i], type: 'bool'});\n        }\n\n        typesColumns.push({\n            xtype: 'actioncolumn',\n            menuText: t('delete'),\n            width: 40,\n            items: [{\n                tooltip: t('delete'),\n                icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                handler: function (grid, rowIndex) {\n                    grid.getStore().removeAt(rowIndex);\n                    this.updateRows();\n                }.bind(this)\n            }]\n        });\n\n        this.store = new Ext.data.JsonStore({\n            autoDestroy: true,\n            proxy: {\n                type: 'memory',\n                reader: {\n\n                    rootProperty: 'workspacesDocument'\n                }\n            },\n            fields: storeFields,\n            data: this.data\n        });\n\n        this.cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\n            clicksToEdit: 1\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame: false,\n            autoScroll: true,\n            store: this.store,\n            columns : typesColumns,\n            trackMouseOver: true,\n            columnLines: true,\n            stripeRows: true,\n            autoExpandColumn: \"path\",\n            autoHeight: true,\n            style: \"margin-bottom:20px;\",\n            plugins: [\n                this.cellEditing\n            ],\n            tbar: [\n                {\n                    xtype: \"tbtext\",\n                    text: \"<b>\" + t(\"documents\") + \"</b>\"\n                },\n                \"-\",\"-\",\n                {\n                    iconCls: \"pimcore_icon_add\",\n                    text: t(\"add\"),\n                    handler: this.onAdd.bind(this)\n                }\n            ],\n            viewConfig: {\n                forceFit: true,\n                listeners: {\n                    rowupdated: this.updateRows.bind(this),\n                    refresh: this.updateRows.bind(this)\n                }\n            }\n        });\n\n        this.store.on(\"update\", this.updateRows.bind(this));\n        this.grid.on(\"viewready\", this.updateRows.bind(this));\n\n\n        return this.grid;\n    },\n\n    updateRows: function () {\n\n        var rows = Ext.get(this.grid.getEl().dom).query(\".x-grid-row\");\n\n        for (var i = 0; i < rows.length; i++) {\n\n            var dd = new Ext.dd.DropZone(rows[i], {\n                ddGroup: \"element\",\n\n                getTargetFromEvent: function(e) {\n                    return this.getEl();\n                },\n\n                onNodeOver : function(target, dd, e, data) {\n                    if (data.records.length == 1 && data.records[0].data.elementType == \"document\") {\n                        return Ext.dd.DropZone.prototype.dropAllowed;\n                    }\n                },\n\n                onNodeDrop : function(myRowIndex, target, dd, e, data) {\n                    if (pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n                        try {\n                            var record = data.records[0];\n                            var data = record.data;\n\n                            // check for duplicate records\n                            var index = this.grid.getStore().findExact(\"path\", data.path);\n                            if (index >= 0) {\n                                return false;\n                            }\n\n                            if (data.elementType != \"document\") {\n                                return false;\n                            }\n\n                            var rec = this.grid.getStore().getAt(myRowIndex);\n                            rec.set(\"path\", data.path);\n\n                            this.updateRows();\n\n                            return true;\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }\n                }.bind(this, i)\n            });\n        }\n\n    },\n\n    onAdd: function (btn, ev) {\n        this.grid.store.insert(0, {\n            path: \"\"\n        });\n\n        this.updateRows();\n    },\n\n    getValues: function () {\n\n        var values = [];\n        this.store.commitChanges();\n\n        var records = this.store.getRange();\n        for (var i = 0; i < records.length; i++) {\n            var currentData = records[i];\n            if (currentData) {\n                    values.push(currentData.data);\n            }\n        }\n\n        return values;\n    }\n});", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\npimcore.registerNS(\"pimcore.settings.user.workspace.object\");\npimcore.settings.user.workspace.object = Class.create({\n\n    initialize: function (parent) {\n        this.parent = parent;\n\n        if(typeof this.parent.data[\"user\"] != \"undefined\") {\n            this.data = this.parent.data.user;\n        } else if(typeof this.parent.data[\"role\"] != \"undefined\") {\n            this.data = this.parent.data.role;\n        }\n    },\n\n    getPanel: function () {\n\n        var availableRights = [\"list\",\"view\",\"save\",\"publish\",\"unpublish\",\"delete\",\"rename\",\"create\",\"settings\",\n                                                                \"versions\",\"properties\"];\n\n        var gridPlugins = [];\n        var storeFields = [\"path\"];\n\n        var typesColumns = [\n            {text: t(\"path\"), width: 200, sortable: false, dataIndex: 'path',\n                                editor: new Ext.form.TextField({}),\n                                renderer: Ext.util.Format.htmlEncode,\n                                tdCls: \"pimcore_property_droptarget\"\n            }\n        ];\n\n        var check;\n        for (var i=0; i<availableRights.length; i++) {\n\n            // columns\n            check = new Ext.grid.column.Check({\n                text: t(availableRights[i]),\n                dataIndex: availableRights[i],\n                width: 50,\n                flex: 1\n            });\n\n            typesColumns.push(check);\n            gridPlugins.push(check);\n\n            // store fields\n            storeFields.push({name:availableRights[i], type: 'bool'});\n        }\n\n        storeFields.push({name: \"lEdit\", type: 'string'});\n        storeFields.push({name: \"lView\", type: 'string'});\n        storeFields.push({name: \"layouts\", type: 'string'});\n\n        typesColumns.push({\n            xtype: 'actioncolumn',\n            text: t('special_settings'),\n            menuText: t('special_settings'),\n            width: 40,\n            items: [{\n                tooltip: t('special_settings_tooltip'),\n                icon: \"/bundles/pimcoreadmin/img/flat-color-icons/settings.svg\",\n                handler: function (grid, rowIndex) {\n                    var data = grid.getStore().getAt(rowIndex);\n                    var callback = this.applySpecialConfigs.bind(this, data, \"special\");\n                    var specialData = {\n                        lView: data.data.lView,\n                        lEdit: data.data.lEdit,\n                        layouts: data.data.layouts,\n                        path: data.data.path\n                    };\n\n                    var dialog = new pimcore.settings.user.workspace.special(callback, specialData, data.data.path);\n                    dialog.show();\n                }.bind(this)\n            }]\n        });\n\n\n\n        typesColumns.push({\n            xtype: 'actioncolumn',\n            menuText: t('delete'),\n            width: 40,\n            items: [{\n                tooltip: t('delete'),\n                icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                handler: function (grid, rowIndex) {\n                    grid.getStore().removeAt(rowIndex);\n                    this.updateRows();\n                }.bind(this)\n            }]\n        });\n\n        this.store = new Ext.data.JsonStore({\n           autoDestroy: true,\n            proxy: {\n                type: 'memory',\n                reader: {\n\n                    rootProperty: 'workspacesObject'\n                }\n            },\n           fields: storeFields,\n           data: this.data\n       });\n\n\n        this.cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\n            clicksToEdit: 1\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame: false,\n            autoScroll: true,\n            store: this.store,\n            columns : typesColumns,\n            trackMouseOver: true,\n            columnLines: true,\n            stripeRows: true,\n            autoExpandColumn: \"path\",\n            autoHeight: true,\n            style: \"margin-bottom:20px;\",\n            plugins: [\n                this.cellEditing\n            ],\n            tbar: [\n                {\n                    xtype: \"tbtext\",\n                    text: \"<b>\" + t(\"data_objects\") + \"</b>\"\n                },\n                \"-\",\"-\",\n                {\n                    iconCls: \"pimcore_icon_add\",\n                    text: t(\"add\"),\n                    handler: this.onAdd.bind(this)\n                }\n            ],\n            viewConfig: {\n                forceFit: true,\n                listeners: {\n                    rowupdated: this.updateRows.bind(this),\n                    refresh: this.updateRows.bind(this)\n                }\n            }\n        });\n\n        this.store.on(\"update\", this.updateRows.bind(this));\n        this.grid.on(\"viewready\", this.updateRows.bind(this));\n\n\n        return this.grid;\n    },\n\n    updateRows: function () {\n\n        var rows = Ext.get(this.grid.getEl().dom).query(\".x-grid-row\");\n\n        for (var i = 0; i < rows.length; i++) {\n\n            var dd = new Ext.dd.DropZone(rows[i], {\n                ddGroup: \"element\",\n\n                getTargetFromEvent: function(e) {\n                    return this.getEl();\n                },\n\n                onNodeOver : function(target, dd, e, data) {\n                    if (data.records.length == 1 && data.records[0].data.elementType == \"object\") {\n                        return Ext.dd.DropZone.prototype.dropAllowed;\n                    }\n                },\n\n                onNodeDrop : function(myRowIndex, target, dd, e, data) {\n                    if (pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n                        try {\n                            var record = data.records[0];\n                            var data = record.data;\n\n                            // check for duplicate records\n                            var index = this.grid.getStore().findExact(\"path\", data.path);\n                            if (index >= 0) {\n                                return false;\n                            }\n\n                            if (data.elementType != \"object\") {\n                                return false;\n                            }\n\n                            var rec = this.grid.getStore().getAt(myRowIndex);\n                            rec.set(\"path\", data.path);\n\n                            this.updateRows();\n\n                            return true;\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }\n                }.bind(this, i)\n            });\n        }\n\n    },\n\n    onAdd: function (btn, ev) {\n        this.grid.store.insert(0, {\n            path: \"\"\n        });\n\n        this.updateRows();\n    },\n\n    getValues: function () {\n\n        var values = [];\n        this.store.commitChanges();\n\n        var records = this.store.getRange();\n        for (var i = 0; i < records.length; i++) {\n            var currentData = records[i];\n            if (currentData) {\n                    values.push(currentData.data);\n            }\n        }\n\n        return values;\n    },\n\n    applySpecialConfigs: function(rec, column, value) {\n        rec.set(\"lView\", value[\"lView\"]);\n        rec.set(\"lEdit\", value[\"lEdit\"]);\n        rec.set(\"layouts\", value[\"layouts\"]);\n    }\n\n});"], "filenames": ["bundles/AdminBundle/Resources/public/js/pimcore/settings/user/workspace/asset.js", "bundles/AdminBundle/Resources/public/js/pimcore/settings/user/workspace/document.js", "bundles/AdminBundle/Resources/public/js/pimcore/settings/user/workspace/object.js"], "buggy_code_start_loc": [36, 38, 38], "buggy_code_end_loc": [36, 39, 38], "fixing_code_start_loc": [37, 38, 39], "fixing_code_end_loc": [38, 40, 40], "type": "CWE-79", "message": "If an attacker can control a script that is executed in the victim's browser, then they can typically fully compromise that user. Amongst other things, the attacker can: Perform any action within the application that the user can perform. View any information that the user is able to view. Modify any information that the user is able to modify. Initiate interactions with other application users, including malicious attacks, that will appear to originate from the initial victim user.", "other": {"cve": {"id": "CVE-2022-3255", "sourceIdentifier": "security@huntr.dev", "published": "2022-09-21T13:15:09.460", "lastModified": "2022-09-23T14:04:48.100", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "If an attacker can control a script that is executed in the victim's browser, then they can typically fully compromise that user. Amongst other things, the attacker can: Perform any action within the application that the user can perform. View any information that the user is able to view. Modify any information that the user is able to modify. Initiate interactions with other application users, including malicious attacks, that will appear to originate from the initial victim user."}, {"lang": "es", "value": "Si un atacante puede controlar un script que es ejecutado en el navegador de la v\u00edctima, entonces puede comprometer completamente a ese usuario. Entre otras cosas, el atacante puede llevar a cabo cualquier acci\u00f3n dentro de la aplicaci\u00f3n que el usuario pueda realizar. Visualizar cualquier informaci\u00f3n que el usuario es capaz de observar. Modificar cualquier informaci\u00f3n que el usuario es capaz de cambiar. Iniciar interacciones con otros usuarios de la aplicaci\u00f3n, incluyendo ataques maliciosos, que parecer\u00e1n originados por el usuario v\u00edctima inicial"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.7", "matchCriteriaId": "D667A563-6212-47F2-B7BE-2DBDFFCEF2E9"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/1e916e7d668c9e47b217e20cc0ea4812f466201b", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/0ea45cf9-b256-454c-9031-2435294c0902", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/1e916e7d668c9e47b217e20cc0ea4812f466201b"}}