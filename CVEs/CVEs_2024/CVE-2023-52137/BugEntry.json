{"buggy_code": ["[![Ubuntu](https://img.shields.io/badge/Ubuntu-E95420?style=for-the-badge\\&logo=ubuntu\\&logoColor=white)](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on)\n[![Mac OS](https://img.shields.io/badge/mac%20os-000000?style=for-the-badge\\&logo=macos\\&logoColor=F0F0F0)](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on)\n[![Windows](https://img.shields.io/badge/Windows-0078D6?style=for-the-badge\\&logo=windows\\&logoColor=white)](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on)\n[![Public workflows that use this action.](https://img.shields.io/endpoint?style=for-the-badge\\&url=https%3A%2F%2Fused-by.vercel.app%2Fapi%2Fgithub-actions%2Fused-by%3Faction%3Dtj-actions%2Fverify-changed-files%26badge%3Dtrue)](https://github.com/search?o=desc\\&q=tj-actions+verify-changed-files+language%3AYAML\\&s=\\&type=Code)\n\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/a3bbaf5dc7534b4a9bf9eaef49e41b34)](https://app.codacy.com/gh/tj-actions/verify-changed-files?utm_source=github.com\\&utm_medium=referral\\&utm_content=tj-actions/verify-changed-files\\&utm_campaign=Badge_Grade_Settings)\n[![CI](https://github.com/tj-actions/verify-changed-files/workflows/CI/badge.svg)](https://github.com/tj-actions/verify-changed-files/actions?query=workflow%3ACI)\n[![Update release version.](https://github.com/tj-actions/verify-changed-files/workflows/Update%20release%20version./badge.svg)](https://github.com/tj-actions/verify-changed-files/actions?query=workflow%3A%22Update+release+version.%22)\n\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n\n[![All Contributors](https://img.shields.io/badge/all_contributors-4-orange.svg?style=flat-square)](#contributors-)\n\n<!-- ALL-CONTRIBUTORS-BADGE:END -->\n\n# verify-changed-files\n\nVerify that certain files or directories did or did not change during the workflow execution.\n\n> \\[!NOTE]\n>\n> *   This action only detects files that have pending uncommitted changes generated during the workflow execution, for running a specific step when a file changes in a pull request or based on a pushed commit\n>\n>     See: https://github.com/tj-actions/changed-files\n\n## Features\n\n*   Fast execution (0-2 seconds on average).\n*   Easy to debug.\n*   Scales to large repositories.\n*   Supports all platforms (Linux, MacOS, Windows).\n*   [GitHub-hosted runners](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners) support\n*   [GitHub Enterprise Server](https://docs.github.com/en/enterprise-server@3.3/admin/github-actions/getting-started-with-github-actions-for-your-enterprise/getting-started-with-github-actions-for-github-enterprise-server) support.\n*   [self-hosted runners](https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners) support.\n*   Boolean output for detecting uncommitted changes.\n*   List all files that changed during the workflow execution.\n*   Detect changes to track and untracked files.\n*   Restrict change detection to a subset of files:\n    *   Using [Glob pattern](https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet) matching.\n        *   Supports Globstar.\n        *   Supports brace expansion.\n        *   Supports negation.\n\n## Usage\n\n```yaml\n...\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Change text file\n        run: |\n          echo \"Modified\" > new.txt\n\n      - name: Change file in directory\n        run: |\n          echo \"Changed\" > test_directory/new.txt\n\n      - name: Verify Changed files\n        uses: tj-actions/verify-changed-files@v16\n        id: verify-changed-files\n        with:\n          files: |\n             *.txt\n             test_directory\n             action.yml\n             **/*.{jpeg,py}\n             !*.sql\n\n      - name: Run step only when any of the above files change.\n        if: steps.verify-changed-files.outputs.files_changed == 'true'\n        run: |\n          echo \"Changed files: ${{ steps.verify-changed-files.outputs.changed_files }}\"\n        # Outputs: \"Changed files: new.txt test_directory/new.txt\"\n```\n\n### Using the [`contains`](https://docs.github.com/en/actions/learn-github-actions/expressions#contains) function.\n\n```yaml\n...\n      - name: Verify Changed files\n        uses: tj-actions/verify-changed-files@v16\n        id: verify-changed-files\n        with:\n          files: |\n             new.txt\n             test_directory\n\n      - name: Perform action when test_directory changes\n        if: contains(steps.verify-changed-files.outputs.changed_files, 'test_directory')\n        run: |\n          echo \"test_directory has changed.\"\n```\n\n### Get all unstaged (tracked/untracked) files\n\n```yaml\n...\n      - name: Verify Changed files\n        uses: tj-actions/verify-changed-files@v16\n        id: verify-changed-files\n      \n      - name: List all changed files tracked and untracked files\n        run: |\n          echo \"Changed files: ${{ steps.verify-changed-files.outputs.changed_files }}\"\n```\n\nIf you feel generous and want to show some extra appreciation:\n\nSupport this project with a :star:\n\n[![Buy me a coffee][buymeacoffee-shield]][buymeacoffee]\n\n[buymeacoffee]: https://www.buymeacoffee.com/jackton1\n\n[buymeacoffee-shield]: https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\n\n## Inputs\n\n<!-- AUTO-DOC-INPUT:START - Do not remove or modify this section -->\n\n```yaml\n- uses: tj-actions/verify-changed-files@v16\n  id: verify-changed-files\n  with:\n    # Indicates whether to fail if files have changed.\n    # Type: boolean\n    # Default: \"false\"\n    fail-if-changed: ''\n\n    # Message to display when files have changed and the \n    # `fail-if-changed` input is set to `true`. \n    # Type: string\n    # Default: \"Files have changed.\"\n    fail-message: ''\n\n    # File/Directory names to check for uncommited changes.\n    # Type: string\n    files: ''\n\n    # Separator used to split the `files` input\n    # Type: string\n    # Default: \"\\n\"\n    files-separator: ''\n\n    # Indicates whether to match files in `.gitignore`\n    # Type: boolean\n    # Default: \"false\"\n    match-gitignore-files: ''\n\n    # Output string separator.\n    # Type: string\n    # Default: \" \"\n    separator: ''\n\n```\n\n<!-- AUTO-DOC-INPUT:END -->\n\n## Outputs\n\n<!-- AUTO-DOC-OUTPUT:START - Do not remove or modify this section -->\n\n|                                  OUTPUT                                   |  TYPE  |                   DESCRIPTION                    |\n|---------------------------------------------------------------------------|--------|--------------------------------------------------|\n| <a name=\"output_changed_files\"></a>[changed\\_files](#output_changed_files) | string |              List of changed files               |\n| <a name=\"output_files_changed\"></a>[files\\_changed](#output_files_changed) | string | Boolean indicating that files have <br>changed.  |\n\n<!-- AUTO-DOC-OUTPUT:END -->\n\n*   Free software: [MIT license](LICENSE)\n\n## Known Limitation\n\n> \\[!WARNING]\n>\n> *   Using characters like `\\n`, `%`, `.` and `\\r` as output string separators would be [URL encoded](https://www.w3schools.com/tags/ref_urlencode.asp)\n\n## Report Bugs\n\nReport bugs at https://github.com/tj-actions/verify-changed-files/issues.\n\nIf you are reporting a bug, please include:\n\n*   Your operating system name and version.\n*   Any details about your workflow that might be helpful in troubleshooting.\n*   Detailed steps to reproduce the bug.\n\n## Contributors \u2728\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n<!-- prettier-ignore-start -->\n\n<!-- markdownlint-disable -->\n\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/max-kahnt-keylight\"><img src=\"https://avatars.githubusercontent.com/u/79849575?v=4?s=100\" width=\"100px;\" alt=\"Max Kahnt\"/><br /><sub><b>Max Kahnt</b></sub></a><br /><a href=\"https://github.com/tj-actions/verify-changed-files/commits?author=max-kahnt-keylight\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://wllm.no\"><img src=\"https://avatars.githubusercontent.com/u/1223410?v=4?s=100\" width=\"100px;\" alt=\"William Killerud\"/><br /><sub><b>William Killerud</b></sub></a><br /><a href=\"https://github.com/tj-actions/verify-changed-files/commits?author=wkillerud\" title=\"Code\">\ud83d\udcbb</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Minecraftschurli\"><img src=\"https://avatars.githubusercontent.com/u/23388022?v=4?s=100\" width=\"100px;\" alt=\"Minecraftschurli\"/><br /><sub><b>Minecraftschurli</b></sub></a><br /><a href=\"https://github.com/tj-actions/verify-changed-files/commits?author=Minecraftschurli\" title=\"Code\">\ud83d\udcbb</a> <a href=\"https://github.com/tj-actions/verify-changed-files/commits?author=Minecraftschurli\" title=\"Documentation\">\ud83d\udcd6</a> <a href=\"https://github.com/tj-actions/verify-changed-files/commits?author=Minecraftschurli\" title=\"Tests\">\u26a0\ufe0f</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stefanhoth.com\"><img src=\"https://avatars.githubusercontent.com/u/45467?v=4?s=100\" width=\"100px;\" alt=\"Stefan Hoth\"/><br /><sub><b>Stefan Hoth</b></sub></a><br /><a href=\"https://github.com/tj-actions/verify-changed-files/commits?author=stefanhoth\" title=\"Code\">\ud83d\udcbb</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n", "name: Verify Changed files\ndescription: Find files that were modified during workflow execution.\nauthor: jackton1\ninputs:\n  files:\n    description: 'File/Directory names to check for uncommited changes.'\n    required: false\n  files-separator:\n    description: 'Separator used to split the `files` input'\n    default: \"\\n\"\n    required: false\n  separator:\n    description: 'Output string separator.'\n    required: false\n    default: \" \"\n  match-gitignore-files:\n    description: 'Indicates whether to match files in `.gitignore`'\n    default: \"false\"\n    required: true\n  fail-if-changed:\n    description: 'Indicates whether to fail if files have changed.'\n    default: \"false\"\n    required: false\n  fail-message:\n    description: 'Message to display when files have changed and the `fail-if-changed` input is set to `true`.'\n    default: \"Files have changed.\"\n    required: false\n\noutputs:\n  files_changed:\n    description: Boolean indicating that files have changed.\n    value: ${{ steps.verify-changed-files.outputs.files_changed }}\n  changed_files:\n    description: List of changed files\n    value: ${{ steps.verify-changed-files.outputs.changed_files }}\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Glob match\n      uses: tj-actions/glob@v17\n      if: inputs.files != ''\n      id: glob\n      with:\n        files: ${{ inputs.files }}\n        files-separator: ${{ inputs.files-separator }}\n        separator: \"|\"\n        match-directories: false\n        match-gitignore-files: ${{ inputs.match-gitignore-files }}\n    - run: |\n        bash $GITHUB_ACTION_PATH/entrypoint.sh\n      id: verify-changed-files\n      shell: bash\n      env:\n        GITHUB_SERVER_URL: ${{ github.server_url }}\n        GITHUB_REPOSITORY: ${{ github.repository }}\n        # INPUT_<VARIABLE_NAME> is not available in Composite run steps\n        # https://github.community/t/input-variable-name-is-not-available-in-composite-run-steps/127611\n        INPUT_FILES_PATTERN_FILE: ${{ steps.glob.outputs.paths-output-file }}\n        INPUT_SEPARATOR: ${{ inputs.separator }}\n        INPUT_MATCH_GITIGNORE_FILES: ${{ inputs.match-gitignore-files }}\n        INPUT_FAIL_IF_CHANGED: ${{ inputs.fail-if-changed }}\n        INPUT_FAIL_MSG: ${{ inputs.fail-message }}\n\nbranding:\n  icon: file-text\n  color: white\n", "#!/usr/bin/env bash\n\nset -euo pipefail\n\nINPUT_SEPARATOR=\"${INPUT_SEPARATOR//\\%/%25}\"\nINPUT_SEPARATOR=\"${INPUT_SEPARATOR//\\./%2E}\"\nINPUT_SEPARATOR=\"${INPUT_SEPARATOR//\\\\n/%0A}\"\nINPUT_SEPARATOR=\"${INPUT_SEPARATOR//\\\\r/%0D}\"\n\necho \"::group::verify-changed-files\"\n\necho \"Separator: $INPUT_SEPARATOR\"\n\nGIT_STATUS_EXTRA_ARGS=\"-u --porcelain\"\n\nif [[ \"$INPUT_MATCH_GITIGNORE_FILES\" == \"true\" ]]; then\n  GIT_STATUS_EXTRA_ARGS+=\" --ignored\"\nfi\n\nif [[ -n \"$INPUT_FILES_PATTERN_FILE\" ]]; then\n  TRACKED_FILES=$(git diff --diff-filter=ACMUXTR --name-only | { grep -x -E -f \"$INPUT_FILES_PATTERN_FILE\" || true; } | awk -v d=\"|\" '{s=(NR==1?s:s d)$0}END{print s}')\n\n  # Find untracked changes\n  # shellcheck disable=SC2086\n  UNTRACKED_OR_IGNORED_FILES=$(git status $GIT_STATUS_EXTRA_ARGS | awk '{print $NF}' | { grep -x -E -f \"$INPUT_FILES_PATTERN_FILE\" || true; } | awk -v d=\"|\" '{s=(NR==1?s:s d)$0}END{print s}')\n\n  # Find unstaged deleted files\n  UNSTAGED_DELETED_FILES=$(git ls-files --deleted | { grep -x -E -f \"$INPUT_FILES_PATTERN_FILE\" || true; } | awk -v d=\"|\" '{s=(NR==1?s:s d)$0}END{print s}')\nelse\n  TRACKED_FILES=$(git diff --diff-filter=ACMUXTR --name-only | awk -v d=\"|\" '{s=(NR==1?s:s d)$0}END{print s}')\n\n  # Find untracked changes\n  # shellcheck disable=SC2086\n  UNTRACKED_OR_IGNORED_FILES=$(git status $GIT_STATUS_EXTRA_ARGS | awk '{print $NF}' | awk -v d=\"|\" '{s=(NR==1?s:s d)$0}END{print s}')\n\n  # Find unstaged deleted files\n  UNSTAGED_DELETED_FILES=$(git ls-files --deleted | awk -v d=\"|\" '{s=(NR==1?s:s d)$0}END{print s}')\nfi\n\nCHANGED_FILES=\"\"\n\n# Function to concatenate non-empty strings with a separator\nconcatenate() {\n  local separator=$1\n  shift\n  local result=\"\"\n  for str in \"$@\"; do\n    if [[ -n $str ]]; then\n      if [[ -n $result ]]; then\n        result+=\"$separator$str\"\n      else\n        result=\"$str\"\n      fi\n    fi\n  done\n  echo \"$result\"\n}\n\n# Concatenate non-empty strings with a '|' separator\nCHANGED_FILES=$(concatenate \"|\" \"$TRACKED_FILES\" \"$UNTRACKED_OR_IGNORED_FILES\" \"$UNSTAGED_DELETED_FILES\")\n\nCHANGED_FILES=$(echo \"$CHANGED_FILES\"  | awk '{gsub(/\\|/,\"\\n\"); print $0;}' | sort -u | awk -v d=\"|\" '{s=(NR==1?s:s d)$0}END{print s}')\n\nif [[ -n \"$CHANGED_FILES\" ]]; then\n  echo \"Found uncommited changes\"\n\n  CHANGED_FILES=$(echo \"$CHANGED_FILES\" | awk '{gsub(/\\|/,\"\\n\"); print $0;}' | awk -v d=\"$INPUT_SEPARATOR\" '{s=(NR==1?s:s d)$0}END{print s}')\n\n  echo \"files_changed=true\" >> \"$GITHUB_OUTPUT\"\n  echo \"changed_files=$CHANGED_FILES\" >> \"$GITHUB_OUTPUT\"\n\n  if [[ \"$INPUT_FAIL_IF_CHANGED\" == \"true\" ]]; then\n    if [[ -n \"$INPUT_FAIL_MSG\" ]]; then\n      echo \"::error::$INPUT_FAIL_MSG\"\n    fi\n    exit 1\n  fi\n\nelse\n  echo \"No changes found.\"\n  echo \"files_changed=false\" >> \"$GITHUB_OUTPUT\"\nfi\n\necho \"::endgroup::\"\n"], "fixing_code": ["[![Ubuntu](https://img.shields.io/badge/Ubuntu-E95420?style=for-the-badge\\&logo=ubuntu\\&logoColor=white)](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on)\n[![Mac OS](https://img.shields.io/badge/mac%20os-000000?style=for-the-badge\\&logo=macos\\&logoColor=F0F0F0)](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on)\n[![Windows](https://img.shields.io/badge/Windows-0078D6?style=for-the-badge\\&logo=windows\\&logoColor=white)](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on)\n[![Public workflows that use this action.](https://img.shields.io/endpoint?style=for-the-badge\\&url=https%3A%2F%2Fused-by.vercel.app%2Fapi%2Fgithub-actions%2Fused-by%3Faction%3Dtj-actions%2Fverify-changed-files%26badge%3Dtrue)](https://github.com/search?o=desc\\&q=tj-actions+verify-changed-files+language%3AYAML\\&s=\\&type=Code)\n\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/a3bbaf5dc7534b4a9bf9eaef49e41b34)](https://app.codacy.com/gh/tj-actions/verify-changed-files?utm_source=github.com\\&utm_medium=referral\\&utm_content=tj-actions/verify-changed-files\\&utm_campaign=Badge_Grade_Settings)\n[![CI](https://github.com/tj-actions/verify-changed-files/workflows/CI/badge.svg)](https://github.com/tj-actions/verify-changed-files/actions?query=workflow%3ACI)\n[![Update release version.](https://github.com/tj-actions/verify-changed-files/workflows/Update%20release%20version./badge.svg)](https://github.com/tj-actions/verify-changed-files/actions?query=workflow%3A%22Update+release+version.%22)\n\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n\n[![All Contributors](https://img.shields.io/badge/all_contributors-4-orange.svg?style=flat-square)](#contributors-)\n\n<!-- ALL-CONTRIBUTORS-BADGE:END -->\n\n# verify-changed-files\n\nVerify that certain files or directories did or did not change during the workflow execution.\n\n> \\[!NOTE]\n>\n> *   This action only detects files that have pending uncommitted changes generated during the workflow execution, for running a specific step when a file changes in a pull request or based on a pushed commit\n>\n>     See: https://github.com/tj-actions/changed-files\n\n## Features\n\n*   Fast execution (0-2 seconds on average).\n*   Easy to debug.\n*   Scales to large repositories.\n*   Supports all platforms (Linux, MacOS, Windows).\n*   [GitHub-hosted runners](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners) support\n*   [GitHub Enterprise Server](https://docs.github.com/en/enterprise-server@3.3/admin/github-actions/getting-started-with-github-actions-for-your-enterprise/getting-started-with-github-actions-for-github-enterprise-server) support.\n*   [self-hosted runners](https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners) support.\n*   Boolean output for detecting uncommitted changes.\n*   List all files that changed during the workflow execution.\n*   Detect changes to track and untracked files.\n*   Restrict change detection to a subset of files:\n    *   Using [Glob pattern](https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet) matching.\n        *   Supports Globstar.\n        *   Supports brace expansion.\n        *   Supports negation.\n\n## Usage\n\n```yaml\n...\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Change text file\n        run: |\n          echo \"Modified\" > new.txt\n\n      - name: Change file in directory\n        run: |\n          echo \"Changed\" > test_directory/new.txt\n\n      - name: Verify Changed files\n        uses: tj-actions/verify-changed-files@v16\n        id: verify-changed-files\n        with:\n          safe_output: false # true by default, set to false because we are using an environment variable to store the output and avoid command injection.\n          files: |\n             *.txt\n             test_directory\n             action.yml\n             **/*.{jpeg,py}\n             !*.sql\n\n      - name: Run step only when any of the above files change.\n        if: steps.verify-changed-files.outputs.files_changed == 'true'\n        env:\n          FILES_CHANGED: |-\n            ${{ steps.verify-changed-files.outputs.changed_files }}\n        run: |\n          echo \"Changed files: $FILES_CHANGED\"\n        # Outputs: \"Changed files: new.txt test_directory/new.txt\"\n```\n\n### Using the [`contains`](https://docs.github.com/en/actions/learn-github-actions/expressions#contains) function.\n\n```yaml\n...\n      - name: Verify Changed files\n        uses: tj-actions/verify-changed-files@v16\n        id: verify-changed-files\n        with:\n          safe_output: false\n          files: |\n             new.txt\n             test_directory\n\n      - name: Perform action when test_directory changes\n        if: contains(steps.verify-changed-files.outputs.changed_files, 'test_directory')\n        run: |\n          echo \"test_directory has changed.\"\n```\n\n### Get all unstaged (tracked/untracked) files\n\n```yaml\n...\n      - name: Verify Changed files\n        uses: tj-actions/verify-changed-files@v16\n        id: verify-changed-files\n        with:\n          safe_output: false\n      \n      - name: List all changed files tracked and untracked files\n        env:\n          FILES_CHANGED: |-\n            ${{ steps.verify-changed-files.outputs.changed_files }}\n        run: |\n          echo \"Changed files: $FILES_CHANGED\"\n```\n\nIf you feel generous and want to show some extra appreciation:\n\nSupport this project with a :star:\n\n[![Buy me a coffee][buymeacoffee-shield]][buymeacoffee]\n\n[buymeacoffee]: https://www.buymeacoffee.com/jackton1\n\n[buymeacoffee-shield]: https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\n\n## Inputs\n\n<!-- AUTO-DOC-INPUT:START - Do not remove or modify this section -->\n\n```yaml\n- uses: tj-actions/verify-changed-files@v16\n  id: verify-changed-files\n  with:\n    # Indicates whether to fail if files have changed.\n    # Type: boolean\n    # Default: \"false\"\n    fail-if-changed: ''\n\n    # Message to display when files have changed and the \n    # `fail-if-changed` input is set to `true`. \n    # Type: string\n    # Default: \"Files have changed.\"\n    fail-message: ''\n\n    # File/Directory names to check for uncommited changes.\n    # Type: string\n    files: ''\n\n    # Separator used to split the `files` input\n    # Type: string\n    # Default: \"\\n\"\n    files-separator: ''\n\n    # Indicates whether to match files in `.gitignore`\n    # Type: boolean\n    # Default: \"false\"\n    match-gitignore-files: ''\n\n    # Output string separator.\n    # Type: string\n    # Default: \" \"\n    separator: ''\n\n```\n\n<!-- AUTO-DOC-INPUT:END -->\n\n## Outputs\n\n<!-- AUTO-DOC-OUTPUT:START - Do not remove or modify this section -->\n\n|                                  OUTPUT                                   |  TYPE  |                   DESCRIPTION                    |\n|---------------------------------------------------------------------------|--------|--------------------------------------------------|\n| <a name=\"output_changed_files\"></a>[changed\\_files](#output_changed_files) | string |              List of changed files               |\n| <a name=\"output_files_changed\"></a>[files\\_changed](#output_files_changed) | string | Boolean indicating that files have <br>changed.  |\n\n<!-- AUTO-DOC-OUTPUT:END -->\n\n*   Free software: [MIT license](LICENSE)\n\n## Known Limitation\n\n> \\[!WARNING]\n>\n> *   Using characters like `\\n`, `%`, `.` and `\\r` as output string separators would be [URL encoded](https://www.w3schools.com/tags/ref_urlencode.asp)\n\n## Report Bugs\n\nReport bugs at https://github.com/tj-actions/verify-changed-files/issues.\n\nIf you are reporting a bug, please include:\n\n*   Your operating system name and version.\n*   Any details about your workflow that might be helpful in troubleshooting.\n*   Detailed steps to reproduce the bug.\n\n## Contributors \u2728\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n<!-- prettier-ignore-start -->\n\n<!-- markdownlint-disable -->\n\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/max-kahnt-keylight\"><img src=\"https://avatars.githubusercontent.com/u/79849575?v=4?s=100\" width=\"100px;\" alt=\"Max Kahnt\"/><br /><sub><b>Max Kahnt</b></sub></a><br /><a href=\"https://github.com/tj-actions/verify-changed-files/commits?author=max-kahnt-keylight\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://wllm.no\"><img src=\"https://avatars.githubusercontent.com/u/1223410?v=4?s=100\" width=\"100px;\" alt=\"William Killerud\"/><br /><sub><b>William Killerud</b></sub></a><br /><a href=\"https://github.com/tj-actions/verify-changed-files/commits?author=wkillerud\" title=\"Code\">\ud83d\udcbb</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Minecraftschurli\"><img src=\"https://avatars.githubusercontent.com/u/23388022?v=4?s=100\" width=\"100px;\" alt=\"Minecraftschurli\"/><br /><sub><b>Minecraftschurli</b></sub></a><br /><a href=\"https://github.com/tj-actions/verify-changed-files/commits?author=Minecraftschurli\" title=\"Code\">\ud83d\udcbb</a> <a href=\"https://github.com/tj-actions/verify-changed-files/commits?author=Minecraftschurli\" title=\"Documentation\">\ud83d\udcd6</a> <a href=\"https://github.com/tj-actions/verify-changed-files/commits?author=Minecraftschurli\" title=\"Tests\">\u26a0\ufe0f</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stefanhoth.com\"><img src=\"https://avatars.githubusercontent.com/u/45467?v=4?s=100\" width=\"100px;\" alt=\"Stefan Hoth\"/><br /><sub><b>Stefan Hoth</b></sub></a><br /><a href=\"https://github.com/tj-actions/verify-changed-files/commits?author=stefanhoth\" title=\"Code\">\ud83d\udcbb</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n", "name: Verify Changed files\ndescription: Find files that were modified during workflow execution.\nauthor: jackton1\ninputs:\n  files:\n    description: 'File/Directory names to check for uncommited changes.'\n    required: false\n  files-separator:\n    description: 'Separator used to split the `files` input'\n    default: \"\\n\"\n    required: false\n  separator:\n    description: 'Output string separator.'\n    required: false\n    default: \" \"\n  match-gitignore-files:\n    description: 'Indicates whether to match files in `.gitignore`'\n    default: \"false\"\n    required: true\n  fail-if-changed:\n    description: 'Indicates whether to fail if files have changed.'\n    default: \"false\"\n    required: false\n  fail-message:\n    description: 'Message to display when files have changed and the `fail-if-changed` input is set to `true`.'\n    default: \"Files have changed.\"\n    required: false\n  safe_output:\n    description: \"Apply sanitization to output filenames before being set as output.\"\n    required: false\n    default: \"true\"\n\noutputs:\n  files_changed:\n    description: Boolean indicating that files have changed.\n    value: ${{ steps.verify-changed-files.outputs.files_changed }}\n  changed_files:\n    description: List of changed files\n    value: ${{ steps.verify-changed-files.outputs.changed_files }}\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Glob match\n      uses: tj-actions/glob@v17\n      if: inputs.files != ''\n      id: glob\n      with:\n        files: ${{ inputs.files }}\n        files-separator: ${{ inputs.files-separator }}\n        separator: \"|\"\n        match-directories: false\n        match-gitignore-files: ${{ inputs.match-gitignore-files }}\n    - run: |\n        bash $GITHUB_ACTION_PATH/entrypoint.sh\n      id: verify-changed-files\n      shell: bash\n      env:\n        GITHUB_SERVER_URL: ${{ github.server_url }}\n        GITHUB_REPOSITORY: ${{ github.repository }}\n        # INPUT_<VARIABLE_NAME> is not available in Composite run steps\n        # https://github.community/t/input-variable-name-is-not-available-in-composite-run-steps/127611\n        INPUT_FILES_PATTERN_FILE: ${{ steps.glob.outputs.paths-output-file }}\n        INPUT_SEPARATOR: ${{ inputs.separator }}\n        INPUT_MATCH_GITIGNORE_FILES: ${{ inputs.match-gitignore-files }}\n        INPUT_FAIL_IF_CHANGED: ${{ inputs.fail-if-changed }}\n        INPUT_FAIL_MSG: ${{ inputs.fail-message }}\n        INPUT_SAFE_OUTPUT: ${{ inputs.safe_output }}\n\nbranding:\n  icon: file-text\n  color: white\n", "#!/usr/bin/env bash\n\nset -euo pipefail\n\nINPUT_SEPARATOR=\"${INPUT_SEPARATOR//\\%/%25}\"\nINPUT_SEPARATOR=\"${INPUT_SEPARATOR//\\./%2E}\"\nINPUT_SEPARATOR=\"${INPUT_SEPARATOR//\\\\n/%0A}\"\nINPUT_SEPARATOR=\"${INPUT_SEPARATOR//\\\\r/%0D}\"\n\necho \"::group::verify-changed-files\"\n\necho \"Separator: $INPUT_SEPARATOR\"\n\nGIT_STATUS_EXTRA_ARGS=\"-u --porcelain\"\n\nif [[ \"$INPUT_MATCH_GITIGNORE_FILES\" == \"true\" ]]; then\n  GIT_STATUS_EXTRA_ARGS+=\" --ignored\"\nfi\n\nif [[ -n \"$INPUT_FILES_PATTERN_FILE\" ]]; then\n  TRACKED_FILES=$(git diff --diff-filter=ACMUXTR --name-only | { grep -x -E -f \"$INPUT_FILES_PATTERN_FILE\" || true; } | awk -v d=\"|\" '{s=(NR==1?s:s d)$0}END{print s}')\n\n  # Find untracked changes\n  # shellcheck disable=SC2086\n  UNTRACKED_OR_IGNORED_FILES=$(git status $GIT_STATUS_EXTRA_ARGS | awk '{print $NF}' | { grep -x -E -f \"$INPUT_FILES_PATTERN_FILE\" || true; } | awk -v d=\"|\" '{s=(NR==1?s:s d)$0}END{print s}')\n\n  # Find unstaged deleted files\n  UNSTAGED_DELETED_FILES=$(git ls-files --deleted | { grep -x -E -f \"$INPUT_FILES_PATTERN_FILE\" || true; } | awk -v d=\"|\" '{s=(NR==1?s:s d)$0}END{print s}')\nelse\n  TRACKED_FILES=$(git diff --diff-filter=ACMUXTR --name-only | awk -v d=\"|\" '{s=(NR==1?s:s d)$0}END{print s}')\n\n  # Find untracked changes\n  # shellcheck disable=SC2086\n  UNTRACKED_OR_IGNORED_FILES=$(git status $GIT_STATUS_EXTRA_ARGS | awk '{print $NF}' | awk -v d=\"|\" '{s=(NR==1?s:s d)$0}END{print s}')\n\n  # Find unstaged deleted files\n  UNSTAGED_DELETED_FILES=$(git ls-files --deleted | awk -v d=\"|\" '{s=(NR==1?s:s d)$0}END{print s}')\nfi\n\nCHANGED_FILES=\"\"\n\n# Function to concatenate non-empty strings with a separator\nconcatenate() {\n  local separator=$1\n  shift\n  local result=\"\"\n  for str in \"$@\"; do\n    if [[ -n $str ]]; then\n      if [[ -n $result ]]; then\n        result+=\"$separator$str\"\n      else\n        result=\"$str\"\n      fi\n    fi\n  done\n  echo \"$result\"\n}\n\n# Concatenate non-empty strings with a '|' separator\nCHANGED_FILES=$(concatenate \"|\" \"$TRACKED_FILES\" \"$UNTRACKED_OR_IGNORED_FILES\" \"$UNSTAGED_DELETED_FILES\")\n\nCHANGED_FILES=$(echo \"$CHANGED_FILES\"  | awk '{gsub(/\\|/,\"\\n\"); print $0;}' | sort -u | awk -v d=\"|\" '{s=(NR==1?s:s d)$0}END{print s}')\n\nif [[ -n \"$CHANGED_FILES\" ]]; then\n  echo \"Found uncommited changes\"\n\n  CHANGED_FILES=$(echo \"$CHANGED_FILES\" | awk '{gsub(/\\|/,\"\\n\"); print $0;}' | awk -v d=\"$INPUT_SEPARATOR\" '{s=(NR==1?s:s d)$0}END{print s}')\n\n  if [[ \"$INPUT_SAFE_OUTPUT\" == \"true\" ]]; then\n    CHANGED_FILES=${CHANGED_FILES//$/\\\\$} # Replace $ with \\$\n    CHANGED_FILES=${CHANGED_FILES//\\(/\\\\\\(}} # Replace ( with \\(\n    CHANGED_FILES=${CHANGED_FILES//\\)/\\\\\\)}} # Replace ) with \\)\n    CHANGED_FILES=${CHANGED_FILES//\\`/\\\\\\`} # Replace ` with \\`\n    CHANGED_FILES=${CHANGED_FILES//|/\\\\|} # Replace | with \\|\n    CHANGED_FILES=${CHANGED_FILES//&/\\\\&} # Replace & with \\&\n    CHANGED_FILES=${CHANGED_FILES//;/\\\\;} # Replace ; with \\;\n  fi\n\n  echo \"files_changed=true\" >> \"$GITHUB_OUTPUT\"\n  echo \"changed_files=$CHANGED_FILES\" >> \"$GITHUB_OUTPUT\"\n\n  if [[ \"$INPUT_FAIL_IF_CHANGED\" == \"true\" ]]; then\n    if [[ -n \"$INPUT_FAIL_MSG\" ]]; then\n      echo \"::error::$INPUT_FAIL_MSG\"\n    fi\n    exit 1\n  fi\n\nelse\n  echo \"No changes found.\"\n  echo \"files_changed=false\" >> \"$GITHUB_OUTPUT\"\nfi\n\necho \"::endgroup::\"\n"], "filenames": ["README.md", "action.yml", "entrypoint.sh"], "buggy_code_start_loc": [62, 27, 68], "buggy_code_end_loc": [106, 63, 68], "fixing_code_start_loc": [63, 28, 69], "fixing_code_end_loc": [116, 69, 79], "type": "CWE-77", "message": "The [`tj-actions/verify-changed-files`](https://github.com/tj-actions/verify-changed-files) action allows for command injection in changed filenames, allowing an attacker to execute arbitrary code and potentially leak secrets. The [`verify-changed-files`](https://github.com/tj-actions/verify-changed-files) workflow returns the list of files changed within a workflow execution. This could potentially allow filenames that contain special characters such as `;` which can be used by an attacker to take over the [GitHub Runner](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners) if the output value is used in a raw fashion (thus being directly replaced before execution) inside a `run` block. By running custom commands, an attacker may be able to steal secrets such as `GITHUB_TOKEN` if triggered on other events than `pull_request`.\n\nThis has been patched in versions [17](https://github.com/tj-actions/verify-changed-files/releases/tag/v17) and [17.0.0](https://github.com/tj-actions/verify-changed-files/releases/tag/v17.0.0) by enabling `safe_output` by default and returning filename paths escaping special characters for bash environments.", "other": {"cve": {"id": "CVE-2023-52137", "sourceIdentifier": "security-advisories@github.com", "published": "2023-12-29T17:16:07.560", "lastModified": "2024-01-10T16:59:18.837", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The [`tj-actions/verify-changed-files`](https://github.com/tj-actions/verify-changed-files) action allows for command injection in changed filenames, allowing an attacker to execute arbitrary code and potentially leak secrets. The [`verify-changed-files`](https://github.com/tj-actions/verify-changed-files) workflow returns the list of files changed within a workflow execution. This could potentially allow filenames that contain special characters such as `;` which can be used by an attacker to take over the [GitHub Runner](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners) if the output value is used in a raw fashion (thus being directly replaced before execution) inside a `run` block. By running custom commands, an attacker may be able to steal secrets such as `GITHUB_TOKEN` if triggered on other events than `pull_request`.\n\nThis has been patched in versions [17](https://github.com/tj-actions/verify-changed-files/releases/tag/v17) and [17.0.0](https://github.com/tj-actions/verify-changed-files/releases/tag/v17.0.0) by enabling `safe_output` by default and returning filename paths escaping special characters for bash environments."}, {"lang": "es", "value": "La acci\u00f3n [`tj-actions/verify-changed-files`](https://github.com/tj-actions/verify-changed-files) permite la inyecci\u00f3n de comandos en nombres de archivos modificados, lo que permite a un atacante ejecutar c\u00f3digo arbitrario y potencialmente filtrar secretos. El workflow [`verify-changed-files`](https://github.com/tj-actions/verify-changed-files) devuelve la lista de archivos modificados dentro de una ejecuci\u00f3n de flujo de trabajo. Potencialmente, esto podr\u00eda permitir nombres de archivos que contengan caracteres especiales como `;` que un atacante puede utilizar para hacerse cargo de [GitHub Runner](https://docs.github.com/en/actions/using-github-hosted- runners/about-github-hosted-runners) si el valor de salida se usa sin formato (por lo tanto, se reemplaza directamente antes de la ejecuci\u00f3n) dentro de un bloque \"run\". Al ejecutar comandos personalizados, un atacante puede robar secretos como `GITHUB_TOKEN` si se activan en otros eventos distintos de `pull_request`. Esto ha sido parcheado en las versiones [17](https://github.com/tj-actions/verify-changed-files/releases/tag/v17) y [17.0.0](https://github.com/tj -actions/verify-changed-files/releases/tag/v17.0.0) habilitando `safe_output` de forma predeterminada y devolviendo rutas de nombres de archivos que escapan de caracteres especiales para entornos bash."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.3}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tj-actions:verify-changed-files:*:*:*:*:*:github:*:*", "versionEndExcluding": "17.0.0", "matchCriteriaId": "05164557-E263-4CD7-BEBE-6E7EAA93AECE"}]}]}], "references": [{"url": "https://github.com/tj-actions/verify-changed-files/commit/498d3f316f501aa72485060e8c96fde7b2014f12", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/tj-actions/verify-changed-files/commit/592e305da041c09a009afa4a43c97d889bed65c3", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/tj-actions/verify-changed-files/security/advisories/GHSA-ghm2-rq8q-wrhc", "source": "security-advisories@github.com", "tags": ["Exploit", "Mitigation", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tj-actions/verify-changed-files/commit/498d3f316f501aa72485060e8c96fde7b2014f12"}}