{"buggy_code": ["<?php\n// +----------------------------------------------------------------------\n// | ThinkPHP [ WE CAN DO IT JUST THINK ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2006~2021 http://thinkphp.cn All rights reserved.\n// +----------------------------------------------------------------------\n// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )\n// +----------------------------------------------------------------------\n// | Author: liu21st <liu21st@gmail.com>\n// +----------------------------------------------------------------------\ndeclare (strict_types = 1);\n\nnamespace think\\cache;\n\nuse Closure;\nuse DateInterval;\nuse DateTime;\nuse DateTimeInterface;\nuse Exception;\nuse Psr\\SimpleCache\\CacheInterface;\nuse think\\Container;\nuse think\\contract\\CacheHandlerInterface;\nuse think\\exception\\InvalidArgumentException;\nuse throwable;\n\n/**\n * \u7f13\u5b58\u57fa\u7840\u7c7b\n */\nabstract class Driver implements CacheInterface, CacheHandlerInterface\n{\n    /**\n     * \u9a71\u52a8\u53e5\u67c4\n     * @var object\n     */\n    protected $handler = null;\n\n    /**\n     * \u7f13\u5b58\u8bfb\u53d6\u6b21\u6570\n     * @var integer\n     */\n    protected $readTimes = 0;\n\n    /**\n     * \u7f13\u5b58\u5199\u5165\u6b21\u6570\n     * @var integer\n     */\n    protected $writeTimes = 0;\n\n    /**\n     * \u7f13\u5b58\u53c2\u6570\n     * @var array\n     */\n    protected $options = [];\n\n    /**\n     * \u7f13\u5b58\u6807\u7b7e\n     * @var array\n     */\n    protected $tag = [];\n\n    /**\n     * \u83b7\u53d6\u6709\u6548\u671f\n     * @access protected\n     * @param integer|DateTimeInterface|DateInterval $expire \u6709\u6548\u671f\n     * @return int\n     */\n    protected function getExpireTime($expire): int\n    {\n        if ($expire instanceof DateTimeInterface) {\n            $expire = $expire->getTimestamp() - time();\n        } elseif ($expire instanceof DateInterval) {\n            $expire = DateTime::createFromFormat('U', (string) time())\n                ->add($expire)\n                ->format('U') - time();\n        }\n\n        return (int) $expire;\n    }\n\n    /**\n     * \u83b7\u53d6\u5b9e\u9645\u7684\u7f13\u5b58\u6807\u8bc6\n     * @access public\n     * @param string $name \u7f13\u5b58\u540d\n     * @return string\n     */\n    public function getCacheKey(string $name): string\n    {\n        return $this->options['prefix'] . $name;\n    }\n\n    /**\n     * \u8bfb\u53d6\u7f13\u5b58\u5e76\u5220\u9664\n     * @access public\n     * @param string $name \u7f13\u5b58\u53d8\u91cf\u540d\n     * @return mixed\n     */\n    public function pull(string $name)\n    {\n        $result = $this->get($name, false);\n\n        if ($result) {\n            $this->delete($name);\n            return $result;\n        }\n    }\n\n    /**\n     * \u8ffd\u52a0\uff08\u6570\u7ec4\uff09\u7f13\u5b58\n     * @access public\n     * @param string $name  \u7f13\u5b58\u53d8\u91cf\u540d\n     * @param mixed  $value \u5b58\u50a8\u6570\u636e\n     * @return void\n     */\n    public function push(string $name, $value): void\n    {\n        $item = $this->get($name, []);\n\n        if (!is_array($item)) {\n            throw new InvalidArgumentException('only array cache can be push');\n        }\n\n        $item[] = $value;\n\n        if (count($item) > 1000) {\n            array_shift($item);\n        }\n\n        $item = array_unique($item);\n\n        $this->set($name, $item);\n    }\n\n    /**\n     * \u8ffd\u52a0TagSet\u6570\u636e\n     * @access public\n     * @param string $name  \u7f13\u5b58\u53d8\u91cf\u540d\n     * @param mixed  $value \u5b58\u50a8\u6570\u636e\n     * @return void\n     */\n    public function append(string $name, $value): void\n    {\n        $this->push($name, $value);\n    }\n\n    /**\n     * \u5982\u679c\u4e0d\u5b58\u5728\u5219\u5199\u5165\u7f13\u5b58\n     * @access public\n     * @param string $name   \u7f13\u5b58\u53d8\u91cf\u540d\n     * @param mixed  $value  \u5b58\u50a8\u6570\u636e\n     * @param int    $expire \u6709\u6548\u65f6\u95f4 0\u4e3a\u6c38\u4e45\n     * @return mixed\n     */\n    public function remember(string $name, $value, $expire = null)\n    {\n        if ($this->has($name)) {\n            return $this->get($name);\n        }\n\n        $time = time();\n\n        while ($time + 5 > time() && $this->has($name . '_lock')) {\n            // \u5b58\u5728\u9501\u5b9a\u5219\u7b49\u5f85\n            usleep(200000);\n        }\n\n        try {\n            // \u9501\u5b9a\n            $this->set($name . '_lock', true);\n\n            if ($value instanceof Closure) {\n                // \u83b7\u53d6\u7f13\u5b58\u6570\u636e\n                $value = Container::getInstance()->invokeFunction($value);\n            }\n\n            // \u7f13\u5b58\u6570\u636e\n            $this->set($name, $value, $expire);\n\n            // \u89e3\u9501\n            $this->delete($name . '_lock');\n        } catch (Exception | throwable $e) {\n            $this->delete($name . '_lock');\n            throw $e;\n        }\n\n        return $value;\n    }\n\n    /**\n     * \u7f13\u5b58\u6807\u7b7e\n     * @access public\n     * @param string|array $name \u6807\u7b7e\u540d\n     * @return TagSet\n     */\n    public function tag($name): TagSet\n    {\n        $name = (array) $name;\n        $key  = implode('-', $name);\n\n        if (!isset($this->tag[$key])) {\n            $this->tag[$key] = new TagSet($name, $this);\n        }\n\n        return $this->tag[$key];\n    }\n\n    /**\n     * \u83b7\u53d6\u6807\u7b7e\u5305\u542b\u7684\u7f13\u5b58\u6807\u8bc6\n     * @access public\n     * @param string $tag \u6807\u7b7e\u6807\u8bc6\n     * @return array\n     */\n    public function getTagItems(string $tag): array\n    {\n        $name = $this->getTagKey($tag);\n        return $this->get($name, []);\n    }\n\n    /**\n     * \u83b7\u53d6\u5b9e\u9645\u6807\u7b7e\u540d\n     * @access public\n     * @param string $tag \u6807\u7b7e\u540d\n     * @return string\n     */\n    public function getTagKey(string $tag): string\n    {\n        return $this->options['tag_prefix'] . md5($tag);\n    }\n\n    /**\n     * \u5e8f\u5217\u5316\u6570\u636e\n     * @access protected\n     * @param mixed $data \u7f13\u5b58\u6570\u636e\n     * @return string\n     */\n    protected function serialize($data): string\n    {\n        if (is_numeric($data)) {\n            return (string) $data;\n        }\n\n        $serialize = $this->options['serialize'][0] ?? \"serialize\";\n\n        return $serialize($data);\n    }\n\n    /**\n     * \u53cd\u5e8f\u5217\u5316\u6570\u636e\n     * @access protected\n     * @param string $data \u7f13\u5b58\u6570\u636e\n     * @return mixed\n     */\n    protected function unserialize(string $data)\n    {\n        if (is_numeric($data)) {\n            return $data;\n        }\n\n        $unserialize = $this->options['serialize'][1] ?? \"unserialize\";\n\n        return $unserialize($data);\n    }\n\n    /**\n     * \u8fd4\u56de\u53e5\u67c4\u5bf9\u8c61\uff0c\u53ef\u6267\u884c\u5176\u5b83\u9ad8\u7ea7\u65b9\u6cd5\n     *\n     * @access public\n     * @return object\n     */\n    public function handler()\n    {\n        return $this->handler;\n    }\n\n    /**\n     * \u8fd4\u56de\u7f13\u5b58\u8bfb\u53d6\u6b21\u6570\n     * @access public\n     * @return int\n     */\n    public function getReadTimes(): int\n    {\n        return $this->readTimes;\n    }\n\n    /**\n     * \u8fd4\u56de\u7f13\u5b58\u5199\u5165\u6b21\u6570\n     * @access public\n     * @return int\n     */\n    public function getWriteTimes(): int\n    {\n        return $this->writeTimes;\n    }\n\n    /**\n     * \u8bfb\u53d6\u7f13\u5b58\n     * @access public\n     * @param iterable $keys    \u7f13\u5b58\u53d8\u91cf\u540d\n     * @param mixed    $default \u9ed8\u8ba4\u503c\n     * @return iterable\n     * @throws InvalidArgumentException\n     */\n    public function getMultiple($keys, $default = null): iterable\n    {\n        $result = [];\n\n        foreach ($keys as $key) {\n            $result[$key] = $this->get($key, $default);\n        }\n\n        return $result;\n    }\n\n    /**\n     * \u5199\u5165\u7f13\u5b58\n     * @access public\n     * @param iterable               $values \u7f13\u5b58\u6570\u636e\n     * @param null|int|\\DateInterval $ttl    \u6709\u6548\u65f6\u95f4 0\u4e3a\u6c38\u4e45\n     * @return bool\n     */\n    public function setMultiple($values, $ttl = null): bool\n    {\n        foreach ($values as $key => $val) {\n            $result = $this->set($key, $val, $ttl);\n\n            if (false === $result) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * \u5220\u9664\u7f13\u5b58\n     * @access public\n     * @param iterable $keys \u7f13\u5b58\u53d8\u91cf\u540d\n     * @return bool\n     * @throws InvalidArgumentException\n     */\n    public function deleteMultiple($keys): bool\n    {\n        foreach ($keys as $key) {\n            $result = $this->delete($key);\n\n            if (false === $result) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public function __call($method, $args)\n    {\n        return call_user_func_array([$this->handler, $method], $args);\n    }\n}\n"], "fixing_code": ["<?php\n// +----------------------------------------------------------------------\n// | ThinkPHP [ WE CAN DO IT JUST THINK ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2006~2021 http://thinkphp.cn All rights reserved.\n// +----------------------------------------------------------------------\n// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )\n// +----------------------------------------------------------------------\n// | Author: liu21st <liu21st@gmail.com>\n// +----------------------------------------------------------------------\ndeclare (strict_types = 1);\n\nnamespace think\\cache;\n\nuse Closure;\nuse DateInterval;\nuse DateTime;\nuse DateTimeInterface;\nuse Exception;\nuse Psr\\SimpleCache\\CacheInterface;\nuse think\\Container;\nuse think\\contract\\CacheHandlerInterface;\nuse think\\exception\\InvalidArgumentException;\nuse throwable;\n\n/**\n * \u7f13\u5b58\u57fa\u7840\u7c7b\n */\nabstract class Driver implements CacheInterface, CacheHandlerInterface\n{\n    /**\n     * \u9a71\u52a8\u53e5\u67c4\n     * @var object\n     */\n    protected $handler = null;\n\n    /**\n     * \u7f13\u5b58\u8bfb\u53d6\u6b21\u6570\n     * @var integer\n     */\n    protected $readTimes = 0;\n\n    /**\n     * \u7f13\u5b58\u5199\u5165\u6b21\u6570\n     * @var integer\n     */\n    protected $writeTimes = 0;\n\n    /**\n     * \u7f13\u5b58\u53c2\u6570\n     * @var array\n     */\n    protected $options = [];\n\n    /**\n     * \u7f13\u5b58\u6807\u7b7e\n     * @var array\n     */\n    protected $tag = [];\n\n    /**\n     * \u83b7\u53d6\u6709\u6548\u671f\n     * @access protected\n     * @param integer|DateTimeInterface|DateInterval $expire \u6709\u6548\u671f\n     * @return int\n     */\n    protected function getExpireTime($expire): int\n    {\n        if ($expire instanceof DateTimeInterface) {\n            $expire = $expire->getTimestamp() - time();\n        } elseif ($expire instanceof DateInterval) {\n            $expire = DateTime::createFromFormat('U', (string) time())\n                ->add($expire)\n                ->format('U') - time();\n        }\n\n        return (int) $expire;\n    }\n\n    /**\n     * \u83b7\u53d6\u5b9e\u9645\u7684\u7f13\u5b58\u6807\u8bc6\n     * @access public\n     * @param string $name \u7f13\u5b58\u540d\n     * @return string\n     */\n    public function getCacheKey(string $name): string\n    {\n        return $this->options['prefix'] . $name;\n    }\n\n    /**\n     * \u8bfb\u53d6\u7f13\u5b58\u5e76\u5220\u9664\n     * @access public\n     * @param string $name \u7f13\u5b58\u53d8\u91cf\u540d\n     * @return mixed\n     */\n    public function pull(string $name)\n    {\n        $result = $this->get($name, false);\n\n        if ($result) {\n            $this->delete($name);\n            return $result;\n        }\n    }\n\n    /**\n     * \u8ffd\u52a0\uff08\u6570\u7ec4\uff09\u7f13\u5b58\n     * @access public\n     * @param string $name  \u7f13\u5b58\u53d8\u91cf\u540d\n     * @param mixed  $value \u5b58\u50a8\u6570\u636e\n     * @return void\n     */\n    public function push(string $name, $value): void\n    {\n        $item = $this->get($name, []);\n\n        if (!is_array($item)) {\n            throw new InvalidArgumentException('only array cache can be push');\n        }\n\n        $item[] = $value;\n\n        if (count($item) > 1000) {\n            array_shift($item);\n        }\n\n        $item = array_unique($item);\n\n        $this->set($name, $item);\n    }\n\n    /**\n     * \u8ffd\u52a0TagSet\u6570\u636e\n     * @access public\n     * @param string $name  \u7f13\u5b58\u53d8\u91cf\u540d\n     * @param mixed  $value \u5b58\u50a8\u6570\u636e\n     * @return void\n     */\n    public function append(string $name, $value): void\n    {\n        $this->push($name, $value);\n    }\n\n    /**\n     * \u5982\u679c\u4e0d\u5b58\u5728\u5219\u5199\u5165\u7f13\u5b58\n     * @access public\n     * @param string $name   \u7f13\u5b58\u53d8\u91cf\u540d\n     * @param mixed  $value  \u5b58\u50a8\u6570\u636e\n     * @param int    $expire \u6709\u6548\u65f6\u95f4 0\u4e3a\u6c38\u4e45\n     * @return mixed\n     */\n    public function remember(string $name, $value, $expire = null)\n    {\n        if ($this->has($name)) {\n            return $this->get($name);\n        }\n\n        $time = time();\n\n        while ($time + 5 > time() && $this->has($name . '_lock')) {\n            // \u5b58\u5728\u9501\u5b9a\u5219\u7b49\u5f85\n            usleep(200000);\n        }\n\n        try {\n            // \u9501\u5b9a\n            $this->set($name . '_lock', true);\n\n            if ($value instanceof Closure) {\n                // \u83b7\u53d6\u7f13\u5b58\u6570\u636e\n                $value = Container::getInstance()->invokeFunction($value);\n            }\n\n            // \u7f13\u5b58\u6570\u636e\n            $this->set($name, $value, $expire);\n\n            // \u89e3\u9501\n            $this->delete($name . '_lock');\n        } catch (Exception | throwable $e) {\n            $this->delete($name . '_lock');\n            throw $e;\n        }\n\n        return $value;\n    }\n\n    /**\n     * \u7f13\u5b58\u6807\u7b7e\n     * @access public\n     * @param string|array $name \u6807\u7b7e\u540d\n     * @return TagSet\n     */\n    public function tag($name): TagSet\n    {\n        $name = (array) $name;\n        $key  = implode('-', $name);\n\n        if (!isset($this->tag[$key])) {\n            $this->tag[$key] = new TagSet($name, $this);\n        }\n\n        return $this->tag[$key];\n    }\n\n    /**\n     * \u83b7\u53d6\u6807\u7b7e\u5305\u542b\u7684\u7f13\u5b58\u6807\u8bc6\n     * @access public\n     * @param string $tag \u6807\u7b7e\u6807\u8bc6\n     * @return array\n     */\n    public function getTagItems(string $tag): array\n    {\n        $name = $this->getTagKey($tag);\n        return $this->get($name, []);\n    }\n\n    /**\n     * \u83b7\u53d6\u5b9e\u9645\u6807\u7b7e\u540d\n     * @access public\n     * @param string $tag \u6807\u7b7e\u540d\n     * @return string\n     */\n    public function getTagKey(string $tag): string\n    {\n        return $this->options['tag_prefix'] . md5($tag);\n    }\n\n    /**\n     * \u5e8f\u5217\u5316\u6570\u636e\n     * @access protected\n     * @param mixed $data \u7f13\u5b58\u6570\u636e\n     * @return string\n     */\n    protected function serialize($data): string\n    {\n        if (is_numeric($data)) {\n            return (string) $data;\n        }\n\n        $serialize = $this->options['serialize'][0] ?? \"serialize\";\n\n        return $serialize($data);\n    }\n\n    /**\n     * \u53cd\u5e8f\u5217\u5316\u6570\u636e\n     * @access protected\n     * @param string $data \u7f13\u5b58\u6570\u636e\n     * @return mixed\n     */\n    protected function unserialize($data)\n    {\n        if (is_numeric($data)) {\n            return $data;\n        }\n\n        $unserialize = $this->options['serialize'][1] ?? \"unserialize\";\n\n        return $unserialize($data);\n    }\n\n    /**\n     * \u8fd4\u56de\u53e5\u67c4\u5bf9\u8c61\uff0c\u53ef\u6267\u884c\u5176\u5b83\u9ad8\u7ea7\u65b9\u6cd5\n     *\n     * @access public\n     * @return object\n     */\n    public function handler()\n    {\n        return $this->handler;\n    }\n\n    /**\n     * \u8fd4\u56de\u7f13\u5b58\u8bfb\u53d6\u6b21\u6570\n     * @access public\n     * @return int\n     */\n    public function getReadTimes(): int\n    {\n        return $this->readTimes;\n    }\n\n    /**\n     * \u8fd4\u56de\u7f13\u5b58\u5199\u5165\u6b21\u6570\n     * @access public\n     * @return int\n     */\n    public function getWriteTimes(): int\n    {\n        return $this->writeTimes;\n    }\n\n    /**\n     * \u8bfb\u53d6\u7f13\u5b58\n     * @access public\n     * @param iterable $keys    \u7f13\u5b58\u53d8\u91cf\u540d\n     * @param mixed    $default \u9ed8\u8ba4\u503c\n     * @return iterable\n     * @throws InvalidArgumentException\n     */\n    public function getMultiple($keys, $default = null): iterable\n    {\n        $result = [];\n\n        foreach ($keys as $key) {\n            $result[$key] = $this->get($key, $default);\n        }\n\n        return $result;\n    }\n\n    /**\n     * \u5199\u5165\u7f13\u5b58\n     * @access public\n     * @param iterable               $values \u7f13\u5b58\u6570\u636e\n     * @param null|int|\\DateInterval $ttl    \u6709\u6548\u65f6\u95f4 0\u4e3a\u6c38\u4e45\n     * @return bool\n     */\n    public function setMultiple($values, $ttl = null): bool\n    {\n        foreach ($values as $key => $val) {\n            $result = $this->set($key, $val, $ttl);\n\n            if (false === $result) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * \u5220\u9664\u7f13\u5b58\n     * @access public\n     * @param iterable $keys \u7f13\u5b58\u53d8\u91cf\u540d\n     * @return bool\n     * @throws InvalidArgumentException\n     */\n    public function deleteMultiple($keys): bool\n    {\n        foreach ($keys as $key) {\n            $result = $this->delete($key);\n\n            if (false === $result) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public function __call($method, $args)\n    {\n        return call_user_func_array([$this->handler, $method], $args);\n    }\n}\n"], "filenames": ["src/think/cache/Driver.php"], "buggy_code_start_loc": [252], "buggy_code_end_loc": [253], "fixing_code_start_loc": [252], "fixing_code_end_loc": [253], "type": "CWE-502", "message": "The package topthink/framework before 6.0.12 are vulnerable to Deserialization of Untrusted Data due to insecure unserialize method in the Driver class.", "other": {"cve": {"id": "CVE-2021-23592", "sourceIdentifier": "report@snyk.io", "published": "2022-05-06T20:15:07.807", "lastModified": "2022-05-16T16:56:03.653", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The package topthink/framework before 6.0.12 are vulnerable to Deserialization of Untrusted Data due to insecure unserialize method in the Driver class."}, {"lang": "es", "value": "El paquete topthink/framework versiones anteriores a 6.0.12, es vulnerable a una Deserializaci\u00f3n de Datos No Confiables debido al m\u00e9todo no seguro unserialize en la clase Driver"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 7.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-502"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:thinkphp:thinkphp:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.0.12", "matchCriteriaId": "103122B5-1335-442B-B3C1-1EC8A1B3D50F"}]}]}], "references": [{"url": "https://github.com/top-think/framework/commit/d3b5aeae94bc71bae97977d05cd12c3e0550905c", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/top-think/framework/releases/tag/v6.0.12", "source": "report@snyk.io", "tags": ["Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-PHP-TOPTHINKFRAMEWORK-2385695", "source": "report@snyk.io", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/top-think/framework/commit/d3b5aeae94bc71bae97977d05cd12c3e0550905c"}}