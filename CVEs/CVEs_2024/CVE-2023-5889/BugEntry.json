{"buggy_code": ["<?php\n\n/**\n * @file controllers/grid/settings/user/form/UserDisableForm.php\n *\n * Copyright (c) 2014-2021 Simon Fraser University\n * Copyright (c) 2003-2021 John Willinsky\n * Distributed under the GNU GPL v3. For full terms see the file docs/COPYING.\n *\n * @class UserDisableForm\n *\n * @ingroup controllers_grid_settings_user_form\n *\n * @brief Form for enabling/disabling a user\n */\n\nnamespace PKP\\controllers\\grid\\settings\\user\\form;\n\nuse APP\\facades\\Repo;\nuse APP\\template\\TemplateManager;\nuse PKP\\form\\Form;\n\nclass UserDisableForm extends Form\n{\n    /** @var int The user id of user to enable/disable */\n    public $_userId;\n\n    /** @var bool Whether to enable or disable the user */\n    public $_enable;\n\n    /**\n     * Constructor.\n     */\n    public function __construct($userId, $enable = false)\n    {\n        parent::__construct('controllers/grid/settings/user/form/userDisableForm.tpl');\n\n        $this->_userId = (int) $userId;\n        $this->_enable = (bool) $enable;\n\n        $this->addCheck(new \\PKP\\form\\validation\\FormValidatorPost($this));\n        $this->addCheck(new \\PKP\\form\\validation\\FormValidatorCSRF($this));\n    }\n\n    /**\n     * Initialize form data.\n     */\n    public function initData()\n    {\n        if ($this->_userId) {\n            $user = Repo::user()->get($this->_userId, true);\n\n            if ($user) {\n                $this->_data = [\n                    'disableReason' => $user->getDisabledReason()\n                ];\n            }\n        }\n    }\n\n    /**\n     * Assign form data to user-submitted data.\n     *\n     * @see Form::readInputData()\n     */\n    public function readInputData()\n    {\n        $this->readUserVars(\n            [\n                'disableReason',\n            ]\n        );\n    }\n\n    /**\n     * @copydoc Form::display\n     *\n     * @param null|mixed $request\n     * @param null|mixed $template\n     */\n    public function display($request = null, $template = null)\n    {\n        $templateMgr = TemplateManager::getManager($request);\n        $templateMgr->assign([\n            'userId' => $this->_userId,\n            'enable' => $this->_enable,\n        ]);\n        return $this->fetch($request);\n    }\n\n    /**\n     * @copydoc Form::execute()\n     */\n    public function execute(...$functionArgs)\n    {\n        $user = Repo::user()->get($this->_userId, true);\n\n        if ($user) {\n            $user->setDisabled($this->_enable ? false : true);\n            $user->setDisabledReason($this->getData('disableReason'));\n            Repo::user()->edit($user);\n        }\n        parent::execute(...$functionArgs);\n        return $user;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * @file controllers/grid/settings/user/form/UserDisableForm.php\n *\n * Copyright (c) 2014-2021 Simon Fraser University\n * Copyright (c) 2003-2021 John Willinsky\n * Distributed under the GNU GPL v3. For full terms see the file docs/COPYING.\n *\n * @class UserDisableForm\n *\n * @ingroup controllers_grid_settings_user_form\n *\n * @brief Form for enabling/disabling a user\n */\n\nnamespace PKP\\controllers\\grid\\settings\\user\\form;\n\nuse APP\\facades\\Repo;\nuse APP\\template\\TemplateManager;\nuse PKP\\form\\Form;\nuse PKP\\db\\DAORegistry;\n\nclass UserDisableForm extends Form\n{\n    /** @var int The user id of user to enable/disable */\n    public $_userId;\n\n    /** @var bool Whether to enable or disable the user */\n    public $_enable;\n\n    /**\n     * Constructor.\n     */\n    public function __construct($userId, $enable = false)\n    {\n        parent::__construct('controllers/grid/settings/user/form/userDisableForm.tpl');\n\n        $this->_userId = (int) $userId;\n        $this->_enable = (bool) $enable;\n\n        $this->addCheck(new \\PKP\\form\\validation\\FormValidatorPost($this));\n        $this->addCheck(new \\PKP\\form\\validation\\FormValidatorCSRF($this));\n    }\n\n    /**\n     * Initialize form data.\n     */\n    public function initData()\n    {\n        if ($this->_userId) {\n            $user = Repo::user()->get($this->_userId, true);\n\n            if ($user) {\n                $this->_data = [\n                    'disableReason' => $user->getDisabledReason()\n                ];\n            }\n        }\n    }\n\n    /**\n     * Assign form data to user-submitted data.\n     *\n     * @see Form::readInputData()\n     */\n    public function readInputData()\n    {\n        $this->readUserVars(\n            [\n                'disableReason',\n            ]\n        );\n    }\n\n    /**\n     * @copydoc Form::display\n     *\n     * @param null|mixed $request\n     * @param null|mixed $template\n     */\n    public function display($request = null, $template = null)\n    {\n        $templateMgr = TemplateManager::getManager($request);\n        $templateMgr->assign([\n            'userId' => $this->_userId,\n            'enable' => $this->_enable,\n        ]);\n        return $this->fetch($request);\n    }\n\n    /**\n     * @copydoc Form::execute()\n     */\n    public function execute(...$functionArgs)\n    {\n        $user = Repo::user()->get($this->_userId, true);\n\n        if ($user) {\n            $user->setDisabled($this->_enable ? false : true);\n            $user->setDisabledReason($this->getData('disableReason'));\n            Repo::user()->edit($user);\n            if ($user->getDisabled()) {\n                $sessionDao = DAORegistry::getDAO('SessionDAO');\n                $sessionDao->deleteByUserId($user->getId());\n            }\n        }\n        parent::execute(...$functionArgs);\n        return $user;\n    }\n}\n"], "filenames": ["controllers/grid/settings/user/form/UserDisableForm.php"], "buggy_code_start_loc": [21], "buggy_code_end_loc": [101], "fixing_code_start_loc": [22], "fixing_code_end_loc": [107], "type": "CWE-613", "message": "Insufficient Session Expiration in GitHub repository pkp/pkp-lib prior to 3.3.0-16.", "other": {"cve": {"id": "CVE-2023-5889", "sourceIdentifier": "security@huntr.dev", "published": "2023-11-01T01:15:07.423", "lastModified": "2023-11-09T18:31:49.260", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Insufficient Session Expiration in GitHub repository pkp/pkp-lib prior to 3.3.0-16."}, {"lang": "es", "value": "Caducidad de sesi\u00f3n insuficiente en el repositorio de GitHub pkp/pkp-lib anterior a 3.3.0-16."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 8.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.2}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-613"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-613"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pkp:pkp_web_application_library:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.3.0-16", "matchCriteriaId": "620A9B67-F772-49B8-87D8-001DCD83FA6E"}]}]}], "references": [{"url": "https://github.com/pkp/pkp-lib/commit/32d071ef2090fc336bc17d56a86d1dff90c26f0b", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.com/bounties/fba2991a-1b8a-4c89-9689-d708526928e1", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pkp/pkp-lib/commit/32d071ef2090fc336bc17d56a86d1dff90c26f0b"}}