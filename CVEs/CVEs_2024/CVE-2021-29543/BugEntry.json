{"buggy_code": ["/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/ctc_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include <limits>\n\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/lib/core/status.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/platform/macros.h\"\n#include \"tensorflow/core/util/ctc/ctc_beam_search.h\"\n#include \"tensorflow/core/util/sparse/sparse_tensor.h\"\n#include \"tensorflow/core/util/work_sharder.h\"\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\n\ntemplate <typename T>\ninline T RowMax(const typename TTypes<T>::UnalignedConstMatrix& m, int r,\n                int* c) {\n  *c = 0;\n  CHECK_LT(0, m.dimension(1));\n  auto p = m(r, 0);\n  for (int i = 1; i < m.dimension(1); ++i) {\n    if (m(r, i) > p) {\n      p = m(r, i);\n      *c = i;\n    }\n  }\n  return p;\n}\n\nclass CTCDecodeHelper {\n public:\n  CTCDecodeHelper() : top_paths_(1) {}\n\n  inline int GetTopPaths() const { return top_paths_; }\n  void SetTopPaths(int tp) { top_paths_ = tp; }\n\n  Status ValidateInputsGenerateOutputs(\n      OpKernelContext* ctx, const Tensor** inputs, const Tensor** seq_len,\n      Tensor** log_prob, OpOutputList* decoded_indices,\n      OpOutputList* decoded_values, OpOutputList* decoded_shape) const {\n    Status status = ctx->input(\"inputs\", inputs);\n    if (!status.ok()) return status;\n    status = ctx->input(\"sequence_length\", seq_len);\n    if (!status.ok()) return status;\n\n    const TensorShape& inputs_shape = (*inputs)->shape();\n\n    if (inputs_shape.dims() != 3) {\n      return errors::InvalidArgument(\"inputs is not a 3-Tensor\");\n    }\n\n    const int64 max_time = inputs_shape.dim_size(0);\n    const int64 batch_size = inputs_shape.dim_size(1);\n\n    if (max_time == 0) {\n      return errors::InvalidArgument(\"max_time is 0\");\n    }\n    if (!TensorShapeUtils::IsVector((*seq_len)->shape())) {\n      return errors::InvalidArgument(\"sequence_length is not a vector\");\n    }\n\n    if (!(batch_size == (*seq_len)->dim_size(0))) {\n      return errors::FailedPrecondition(\n          \"len(sequence_length) != batch_size.  \",\n          \"len(sequence_length):  \", (*seq_len)->dim_size(0),\n          \" batch_size: \", batch_size);\n    }\n\n    auto seq_len_t = (*seq_len)->vec<int32>();\n\n    for (int b = 0; b < batch_size; ++b) {\n      if (!(seq_len_t(b) <= max_time)) {\n        return errors::FailedPrecondition(\"sequence_length(\", b,\n                                          \") <= \", max_time);\n      }\n    }\n\n    Status s = ctx->allocate_output(\n        \"log_probability\", TensorShape({batch_size, top_paths_}), log_prob);\n    if (!s.ok()) return s;\n\n    s = ctx->output_list(\"decoded_indices\", decoded_indices);\n    if (!s.ok()) return s;\n    s = ctx->output_list(\"decoded_values\", decoded_values);\n    if (!s.ok()) return s;\n    s = ctx->output_list(\"decoded_shape\", decoded_shape);\n    if (!s.ok()) return s;\n\n    return Status::OK();\n  }\n\n  // sequences[b][p][ix] stores decoded value \"ix\" of path \"p\" for batch \"b\".\n  Status StoreAllDecodedSequences(\n      const std::vector<std::vector<std::vector<int> > >& sequences,\n      OpOutputList* decoded_indices, OpOutputList* decoded_values,\n      OpOutputList* decoded_shape) const {\n    // Calculate the total number of entries for each path\n    const int64 batch_size = sequences.size();\n    std::vector<int64> num_entries(top_paths_, 0);\n\n    // Calculate num_entries per path\n    for (const auto& batch_s : sequences) {\n      CHECK_EQ(batch_s.size(), top_paths_);\n      for (int p = 0; p < top_paths_; ++p) {\n        num_entries[p] += batch_s[p].size();\n      }\n    }\n\n    for (int p = 0; p < top_paths_; ++p) {\n      Tensor* p_indices = nullptr;\n      Tensor* p_values = nullptr;\n      Tensor* p_shape = nullptr;\n\n      const int64 p_num = num_entries[p];\n\n      Status s =\n          decoded_indices->allocate(p, TensorShape({p_num, 2}), &p_indices);\n      if (!s.ok()) return s;\n      s = decoded_values->allocate(p, TensorShape({p_num}), &p_values);\n      if (!s.ok()) return s;\n      s = decoded_shape->allocate(p, TensorShape({2}), &p_shape);\n      if (!s.ok()) return s;\n\n      auto indices_t = p_indices->matrix<int64>();\n      auto values_t = p_values->vec<int64>();\n      auto shape_t = p_shape->vec<int64>();\n\n      int64 max_decoded = 0;\n      int64 offset = 0;\n\n      for (int64 b = 0; b < batch_size; ++b) {\n        auto& p_batch = sequences[b][p];\n        int64 num_decoded = p_batch.size();\n        max_decoded = std::max(max_decoded, num_decoded);\n        if (num_decoded > 0) {\n          DCHECK_NE(values_t.data(), nullptr)\n              << \"values_t should not be nullptr: p_num=\" << p_num\n              << \" num_decoded=\" << num_decoded;\n          DCHECK_LT(offset, values_t.size())\n              << \"offset should be smaller than values_t.size()\";\n          std::copy_n(p_batch.begin(), num_decoded, &values_t(offset));\n        }\n        for (int64 t = 0; t < num_decoded; ++t, ++offset) {\n          indices_t(offset, 0) = b;\n          indices_t(offset, 1) = t;\n        }\n      }\n\n      shape_t(0) = batch_size;\n      shape_t(1) = max_decoded;\n    }\n    return Status::OK();\n  }\n\n private:\n  int top_paths_;\n  TF_DISALLOW_COPY_AND_ASSIGN(CTCDecodeHelper);\n};\n\ntemplate <typename T>\nclass CTCGreedyDecoderOp : public OpKernel {\n public:\n  explicit CTCGreedyDecoderOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"merge_repeated\", &merge_repeated_));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor* inputs;\n    const Tensor* seq_len;\n    Tensor* log_prob = nullptr;\n    OpOutputList decoded_indices;\n    OpOutputList decoded_values;\n    OpOutputList decoded_shape;\n    OP_REQUIRES_OK(ctx, decode_helper_.ValidateInputsGenerateOutputs(\n                            ctx, &inputs, &seq_len, &log_prob, &decoded_indices,\n                            &decoded_values, &decoded_shape));\n\n    const TensorShape& inputs_shape = inputs->shape();\n\n    std::vector<typename TTypes<T>::UnalignedConstMatrix> input_list_t;\n    const int64 max_time = inputs_shape.dim_size(0);\n    const int64 batch_size = inputs_shape.dim_size(1);\n    const int64 num_classes_raw = inputs_shape.dim_size(2);\n    OP_REQUIRES(\n        ctx, FastBoundsCheck(num_classes_raw, std::numeric_limits<int>::max()),\n        errors::InvalidArgument(\"num_classes cannot exceed max int\"));\n    const int num_classes = static_cast<const int>(num_classes_raw);\n\n    auto inputs_t = inputs->tensor<T, 3>();\n\n    input_list_t.reserve(max_time);\n    for (std::size_t t = 0; t < max_time; ++t) {\n      input_list_t.emplace_back(inputs_t.data() + t * batch_size * num_classes,\n                                batch_size, num_classes);\n    }\n    auto seq_len_t = seq_len->vec<int32>();\n    auto log_prob_t = log_prob->matrix<T>();\n\n    log_prob_t.setZero();\n\n    // Assumption: the blank index is num_classes - 1\n    int blank_index = num_classes - 1;\n\n    // Perform best path decoding\n    std::vector<std::vector<std::vector<int> > > sequences(batch_size);\n    auto decode = [&](const int64 begin, const int64 end) {\n      for (int b = begin; b < end; ++b) {\n        sequences[b].resize(1);\n        auto &sequence = sequences[b][0];\n        int prev_indices = -1;\n        for (int t = 0; t < seq_len_t(b); ++t) {\n          int max_class_indices;\n          log_prob_t(b, 0) +=\n              -RowMax<T>(input_list_t[t], b, &max_class_indices);\n          if (max_class_indices != blank_index &&\n              !(merge_repeated_ && max_class_indices == prev_indices)) {\n            sequence.push_back(max_class_indices);\n          }\n          prev_indices = max_class_indices;\n        }\n      }\n    };\n\n    const int64 kCostPerUnit = 50 * max_time * num_classes;\n    const int64 total = batch_size;\n    const DeviceBase::CpuWorkerThreads& worker_threads =\n        *ctx->device()->tensorflow_cpu_worker_threads();\n    Shard(worker_threads.num_threads, worker_threads.workers, total,\n          kCostPerUnit, decode);\n\n    OP_REQUIRES_OK(\n        ctx, decode_helper_.StoreAllDecodedSequences(\n                 sequences, &decoded_indices, &decoded_values, &decoded_shape));\n  }\n\n private:\n  CTCDecodeHelper decode_helper_;\n  bool merge_repeated_;\n\n  TF_DISALLOW_COPY_AND_ASSIGN(CTCGreedyDecoderOp);\n};\n\n#define REGISTER_CPU(T)                                                   \\\n  REGISTER_KERNEL_BUILDER(                                                \\\n      Name(\"CTCGreedyDecoder\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      CTCGreedyDecoderOp<T>);\n\nREGISTER_CPU(float);\nREGISTER_CPU(double);\n\n#undef REGISTER_CPU\n\n// CTC beam search\ntemplate <typename T>\nclass CTCBeamSearchDecoderOp : public OpKernel {\n public:\n  explicit CTCBeamSearchDecoderOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"merge_repeated\", &merge_repeated_));\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"beam_width\", &beam_width_));\n    int top_paths;\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"top_paths\", &top_paths));\n    decode_helper_.SetTopPaths(top_paths);\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor* inputs;\n    const Tensor* seq_len;\n    Tensor* log_prob = nullptr;\n    OpOutputList decoded_indices;\n    OpOutputList decoded_values;\n    OpOutputList decoded_shape;\n    OP_REQUIRES_OK(ctx, decode_helper_.ValidateInputsGenerateOutputs(\n                            ctx, &inputs, &seq_len, &log_prob, &decoded_indices,\n                            &decoded_values, &decoded_shape));\n\n    auto inputs_t = inputs->tensor<T, 3>();\n    auto seq_len_t = seq_len->vec<int32>();\n    auto log_prob_t = log_prob->matrix<T>();\n\n    const TensorShape& inputs_shape = inputs->shape();\n\n    const int64 max_time = inputs_shape.dim_size(0);\n    const int64 batch_size = inputs_shape.dim_size(1);\n    const int64 num_classes_raw = inputs_shape.dim_size(2);\n    OP_REQUIRES(\n        ctx, FastBoundsCheck(num_classes_raw, std::numeric_limits<int>::max()),\n        errors::InvalidArgument(\"num_classes cannot exceed max int\"));\n    const int num_classes = static_cast<const int>(num_classes_raw);\n\n    log_prob_t.setZero();\n\n    std::vector<typename TTypes<T>::UnalignedConstMatrix> input_list_t;\n\n    input_list_t.reserve(max_time);\n    for (std::size_t t = 0; t < max_time; ++t) {\n      input_list_t.emplace_back(inputs_t.data() + t * batch_size * num_classes,\n                                batch_size, num_classes);\n    }\n\n    ctc::CTCBeamSearchDecoder<T> beam_search(num_classes, beam_width_,\n                                             &beam_scorer_, 1 /* batch_size */,\n                                             merge_repeated_);\n    Tensor input_chip(DataTypeToEnum<T>::v(), TensorShape({num_classes}));\n    auto input_chip_t = input_chip.flat<T>();\n\n    std::vector<std::vector<std::vector<int> > > best_paths(batch_size);\n    std::vector<T> log_probs;\n\n    // Assumption: the blank index is num_classes - 1\n    for (int b = 0; b < batch_size; ++b) {\n      auto& best_paths_b = best_paths[b];\n      best_paths_b.resize(decode_helper_.GetTopPaths());\n      for (int t = 0; t < seq_len_t(b); ++t) {\n        input_chip_t = input_list_t[t].chip(b, 0);\n        auto input_bi = Eigen::Map<const Eigen::Array<T, Eigen::Dynamic, 1>>(\n            input_chip_t.data(), num_classes);\n        beam_search.Step(input_bi);\n      }\n      OP_REQUIRES_OK(\n          ctx, beam_search.TopPaths(decode_helper_.GetTopPaths(), &best_paths_b,\n                                    &log_probs, merge_repeated_));\n\n      beam_search.Reset();\n\n      for (int bp = 0; bp < decode_helper_.GetTopPaths(); ++bp) {\n        log_prob_t(b, bp) = log_probs[bp];\n      }\n    }\n\n    OP_REQUIRES_OK(ctx, decode_helper_.StoreAllDecodedSequences(\n                            best_paths, &decoded_indices, &decoded_values,\n                            &decoded_shape));\n  }\n\n private:\n  CTCDecodeHelper decode_helper_;\n  typename ctc::CTCBeamSearchDecoder<T>::DefaultBeamScorer beam_scorer_;\n  bool merge_repeated_;\n  int beam_width_;\n  TF_DISALLOW_COPY_AND_ASSIGN(CTCBeamSearchDecoderOp<T>);\n};\n\n#define REGISTER_CPU(T)                                                       \\\n  REGISTER_KERNEL_BUILDER(                                                    \\\n      Name(\"CTCBeamSearchDecoder\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      CTCBeamSearchDecoderOp<T>);\n\nREGISTER_CPU(float);\nREGISTER_CPU(double);\n\n#undef REGISTER_CPU\n\n}  // end namespace tensorflow\n"], "fixing_code": ["/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/ctc_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include <limits>\n\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/lib/core/status.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/platform/macros.h\"\n#include \"tensorflow/core/util/ctc/ctc_beam_search.h\"\n#include \"tensorflow/core/util/sparse/sparse_tensor.h\"\n#include \"tensorflow/core/util/work_sharder.h\"\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\n\ntemplate <typename T>\ninline T RowMax(const typename TTypes<T>::UnalignedConstMatrix& m, int r,\n                int* c) {\n  *c = 0;\n  CHECK_LT(0, m.dimension(1));\n  auto p = m(r, 0);\n  for (int i = 1; i < m.dimension(1); ++i) {\n    if (m(r, i) > p) {\n      p = m(r, i);\n      *c = i;\n    }\n  }\n  return p;\n}\n\nclass CTCDecodeHelper {\n public:\n  CTCDecodeHelper() : top_paths_(1) {}\n\n  inline int GetTopPaths() const { return top_paths_; }\n  void SetTopPaths(int tp) { top_paths_ = tp; }\n\n  Status ValidateInputsGenerateOutputs(\n      OpKernelContext* ctx, const Tensor** inputs, const Tensor** seq_len,\n      Tensor** log_prob, OpOutputList* decoded_indices,\n      OpOutputList* decoded_values, OpOutputList* decoded_shape) const {\n    Status status = ctx->input(\"inputs\", inputs);\n    if (!status.ok()) return status;\n    status = ctx->input(\"sequence_length\", seq_len);\n    if (!status.ok()) return status;\n\n    const TensorShape& inputs_shape = (*inputs)->shape();\n\n    if (inputs_shape.dims() != 3) {\n      return errors::InvalidArgument(\"inputs is not a 3-Tensor\");\n    }\n\n    const int64 max_time = inputs_shape.dim_size(0);\n    const int64 batch_size = inputs_shape.dim_size(1);\n\n    if (max_time == 0) {\n      return errors::InvalidArgument(\"max_time is 0\");\n    }\n    if (!TensorShapeUtils::IsVector((*seq_len)->shape())) {\n      return errors::InvalidArgument(\"sequence_length is not a vector\");\n    }\n\n    if (!(batch_size == (*seq_len)->dim_size(0))) {\n      return errors::FailedPrecondition(\n          \"len(sequence_length) != batch_size.  \",\n          \"len(sequence_length):  \", (*seq_len)->dim_size(0),\n          \" batch_size: \", batch_size);\n    }\n\n    auto seq_len_t = (*seq_len)->vec<int32>();\n\n    for (int b = 0; b < batch_size; ++b) {\n      if (!(seq_len_t(b) <= max_time)) {\n        return errors::FailedPrecondition(\"sequence_length(\", b,\n                                          \") <= \", max_time);\n      }\n    }\n\n    Status s = ctx->allocate_output(\n        \"log_probability\", TensorShape({batch_size, top_paths_}), log_prob);\n    if (!s.ok()) return s;\n\n    s = ctx->output_list(\"decoded_indices\", decoded_indices);\n    if (!s.ok()) return s;\n    s = ctx->output_list(\"decoded_values\", decoded_values);\n    if (!s.ok()) return s;\n    s = ctx->output_list(\"decoded_shape\", decoded_shape);\n    if (!s.ok()) return s;\n\n    return Status::OK();\n  }\n\n  // sequences[b][p][ix] stores decoded value \"ix\" of path \"p\" for batch \"b\".\n  Status StoreAllDecodedSequences(\n      const std::vector<std::vector<std::vector<int> > >& sequences,\n      OpOutputList* decoded_indices, OpOutputList* decoded_values,\n      OpOutputList* decoded_shape) const {\n    // Calculate the total number of entries for each path\n    const int64 batch_size = sequences.size();\n    std::vector<int64> num_entries(top_paths_, 0);\n\n    // Calculate num_entries per path\n    for (const auto& batch_s : sequences) {\n      CHECK_EQ(batch_s.size(), top_paths_);\n      for (int p = 0; p < top_paths_; ++p) {\n        num_entries[p] += batch_s[p].size();\n      }\n    }\n\n    for (int p = 0; p < top_paths_; ++p) {\n      Tensor* p_indices = nullptr;\n      Tensor* p_values = nullptr;\n      Tensor* p_shape = nullptr;\n\n      const int64 p_num = num_entries[p];\n\n      Status s =\n          decoded_indices->allocate(p, TensorShape({p_num, 2}), &p_indices);\n      if (!s.ok()) return s;\n      s = decoded_values->allocate(p, TensorShape({p_num}), &p_values);\n      if (!s.ok()) return s;\n      s = decoded_shape->allocate(p, TensorShape({2}), &p_shape);\n      if (!s.ok()) return s;\n\n      auto indices_t = p_indices->matrix<int64>();\n      auto values_t = p_values->vec<int64>();\n      auto shape_t = p_shape->vec<int64>();\n\n      int64 max_decoded = 0;\n      int64 offset = 0;\n\n      for (int64 b = 0; b < batch_size; ++b) {\n        auto& p_batch = sequences[b][p];\n        int64 num_decoded = p_batch.size();\n        max_decoded = std::max(max_decoded, num_decoded);\n        if (num_decoded > 0) {\n          DCHECK_NE(values_t.data(), nullptr)\n              << \"values_t should not be nullptr: p_num=\" << p_num\n              << \" num_decoded=\" << num_decoded;\n          DCHECK_LT(offset, values_t.size())\n              << \"offset should be smaller than values_t.size()\";\n          std::copy_n(p_batch.begin(), num_decoded, &values_t(offset));\n        }\n        for (int64 t = 0; t < num_decoded; ++t, ++offset) {\n          indices_t(offset, 0) = b;\n          indices_t(offset, 1) = t;\n        }\n      }\n\n      shape_t(0) = batch_size;\n      shape_t(1) = max_decoded;\n    }\n    return Status::OK();\n  }\n\n private:\n  int top_paths_;\n  TF_DISALLOW_COPY_AND_ASSIGN(CTCDecodeHelper);\n};\n\ntemplate <typename T>\nclass CTCGreedyDecoderOp : public OpKernel {\n public:\n  explicit CTCGreedyDecoderOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"merge_repeated\", &merge_repeated_));\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor* inputs;\n    const Tensor* seq_len;\n    Tensor* log_prob = nullptr;\n    OpOutputList decoded_indices;\n    OpOutputList decoded_values;\n    OpOutputList decoded_shape;\n    OP_REQUIRES_OK(ctx, decode_helper_.ValidateInputsGenerateOutputs(\n                            ctx, &inputs, &seq_len, &log_prob, &decoded_indices,\n                            &decoded_values, &decoded_shape));\n\n    const TensorShape& inputs_shape = inputs->shape();\n\n    std::vector<typename TTypes<T>::UnalignedConstMatrix> input_list_t;\n    const int64 max_time = inputs_shape.dim_size(0);\n    const int64 batch_size = inputs_shape.dim_size(1);\n    const int64 num_classes_raw = inputs_shape.dim_size(2);\n    OP_REQUIRES(\n        ctx, FastBoundsCheck(num_classes_raw, std::numeric_limits<int>::max()),\n        errors::InvalidArgument(\"num_classes cannot exceed max int\"));\n    const int num_classes = static_cast<const int>(num_classes_raw);\n\n    auto inputs_t = inputs->tensor<T, 3>();\n\n    input_list_t.reserve(max_time);\n    for (std::size_t t = 0; t < max_time; ++t) {\n      input_list_t.emplace_back(inputs_t.data() + t * batch_size * num_classes,\n                                batch_size, num_classes);\n    }\n    auto seq_len_t = seq_len->vec<int32>();\n    auto log_prob_t = log_prob->matrix<T>();\n\n    log_prob_t.setZero();\n\n    // Assumption: the blank index is num_classes - 1\n    int blank_index = num_classes - 1;\n\n    // Perform best path decoding\n    std::vector<std::vector<std::vector<int> > > sequences(batch_size);\n    auto decode = [&](const int64 begin, const int64 end) {\n      for (int b = begin; b < end; ++b) {\n        sequences[b].resize(1);\n        auto &sequence = sequences[b][0];\n        int prev_indices = -1;\n        for (int t = 0; t < seq_len_t(b); ++t) {\n          int max_class_indices;\n          OP_REQUIRES(ctx, input_list_t[t].dimension(1) > 0,\n                      errors::InvalidArgument(\"Invalid input dimensions.\"));\n          log_prob_t(b, 0) +=\n              -RowMax<T>(input_list_t[t], b, &max_class_indices);\n          if (max_class_indices != blank_index &&\n              !(merge_repeated_ && max_class_indices == prev_indices)) {\n            sequence.push_back(max_class_indices);\n          }\n          prev_indices = max_class_indices;\n        }\n      }\n    };\n\n    const int64 kCostPerUnit = 50 * max_time * num_classes;\n    const int64 total = batch_size;\n    const DeviceBase::CpuWorkerThreads& worker_threads =\n        *ctx->device()->tensorflow_cpu_worker_threads();\n    Shard(worker_threads.num_threads, worker_threads.workers, total,\n          kCostPerUnit, decode);\n\n    OP_REQUIRES_OK(\n        ctx, decode_helper_.StoreAllDecodedSequences(\n                 sequences, &decoded_indices, &decoded_values, &decoded_shape));\n  }\n\n private:\n  CTCDecodeHelper decode_helper_;\n  bool merge_repeated_;\n\n  TF_DISALLOW_COPY_AND_ASSIGN(CTCGreedyDecoderOp);\n};\n\n#define REGISTER_CPU(T)                                                   \\\n  REGISTER_KERNEL_BUILDER(                                                \\\n      Name(\"CTCGreedyDecoder\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      CTCGreedyDecoderOp<T>);\n\nREGISTER_CPU(float);\nREGISTER_CPU(double);\n\n#undef REGISTER_CPU\n\n// CTC beam search\ntemplate <typename T>\nclass CTCBeamSearchDecoderOp : public OpKernel {\n public:\n  explicit CTCBeamSearchDecoderOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"merge_repeated\", &merge_repeated_));\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"beam_width\", &beam_width_));\n    int top_paths;\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"top_paths\", &top_paths));\n    decode_helper_.SetTopPaths(top_paths);\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor* inputs;\n    const Tensor* seq_len;\n    Tensor* log_prob = nullptr;\n    OpOutputList decoded_indices;\n    OpOutputList decoded_values;\n    OpOutputList decoded_shape;\n    OP_REQUIRES_OK(ctx, decode_helper_.ValidateInputsGenerateOutputs(\n                            ctx, &inputs, &seq_len, &log_prob, &decoded_indices,\n                            &decoded_values, &decoded_shape));\n\n    auto inputs_t = inputs->tensor<T, 3>();\n    auto seq_len_t = seq_len->vec<int32>();\n    auto log_prob_t = log_prob->matrix<T>();\n\n    const TensorShape& inputs_shape = inputs->shape();\n\n    const int64 max_time = inputs_shape.dim_size(0);\n    const int64 batch_size = inputs_shape.dim_size(1);\n    const int64 num_classes_raw = inputs_shape.dim_size(2);\n    OP_REQUIRES(\n        ctx, FastBoundsCheck(num_classes_raw, std::numeric_limits<int>::max()),\n        errors::InvalidArgument(\"num_classes cannot exceed max int\"));\n    const int num_classes = static_cast<const int>(num_classes_raw);\n\n    log_prob_t.setZero();\n\n    std::vector<typename TTypes<T>::UnalignedConstMatrix> input_list_t;\n\n    input_list_t.reserve(max_time);\n    for (std::size_t t = 0; t < max_time; ++t) {\n      input_list_t.emplace_back(inputs_t.data() + t * batch_size * num_classes,\n                                batch_size, num_classes);\n    }\n\n    ctc::CTCBeamSearchDecoder<T> beam_search(num_classes, beam_width_,\n                                             &beam_scorer_, 1 /* batch_size */,\n                                             merge_repeated_);\n    Tensor input_chip(DataTypeToEnum<T>::v(), TensorShape({num_classes}));\n    auto input_chip_t = input_chip.flat<T>();\n\n    std::vector<std::vector<std::vector<int> > > best_paths(batch_size);\n    std::vector<T> log_probs;\n\n    // Assumption: the blank index is num_classes - 1\n    for (int b = 0; b < batch_size; ++b) {\n      auto& best_paths_b = best_paths[b];\n      best_paths_b.resize(decode_helper_.GetTopPaths());\n      for (int t = 0; t < seq_len_t(b); ++t) {\n        input_chip_t = input_list_t[t].chip(b, 0);\n        auto input_bi = Eigen::Map<const Eigen::Array<T, Eigen::Dynamic, 1>>(\n            input_chip_t.data(), num_classes);\n        beam_search.Step(input_bi);\n      }\n      OP_REQUIRES_OK(\n          ctx, beam_search.TopPaths(decode_helper_.GetTopPaths(), &best_paths_b,\n                                    &log_probs, merge_repeated_));\n\n      beam_search.Reset();\n\n      for (int bp = 0; bp < decode_helper_.GetTopPaths(); ++bp) {\n        log_prob_t(b, bp) = log_probs[bp];\n      }\n    }\n\n    OP_REQUIRES_OK(ctx, decode_helper_.StoreAllDecodedSequences(\n                            best_paths, &decoded_indices, &decoded_values,\n                            &decoded_shape));\n  }\n\n private:\n  CTCDecodeHelper decode_helper_;\n  typename ctc::CTCBeamSearchDecoder<T>::DefaultBeamScorer beam_scorer_;\n  bool merge_repeated_;\n  int beam_width_;\n  TF_DISALLOW_COPY_AND_ASSIGN(CTCBeamSearchDecoderOp<T>);\n};\n\n#define REGISTER_CPU(T)                                                       \\\n  REGISTER_KERNEL_BUILDER(                                                    \\\n      Name(\"CTCBeamSearchDecoder\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      CTCBeamSearchDecoderOp<T>);\n\nREGISTER_CPU(float);\nREGISTER_CPU(double);\n\n#undef REGISTER_CPU\n\n}  // end namespace tensorflow\n"], "filenames": ["tensorflow/core/kernels/ctc_decoder_ops.cc"], "buggy_code_start_loc": [234], "buggy_code_end_loc": [234], "fixing_code_start_loc": [235], "fixing_code_end_loc": [237], "type": "CWE-617", "message": "TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.CTCGreedyDecoder`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/1615440b17b364b875eb06f43d087381f1460a65/tensorflow/core/kernels/ctc_decoder_ops.cc#L37-L50) has a `CHECK_LT` inserted to validate some invariants. When this condition is false, the program aborts, instead of returning a valid error to the user. This abnormal termination can be weaponized in denial of service attacks. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2021-29543", "sourceIdentifier": "security-advisories@github.com", "published": "2021-05-14T20:15:12.577", "lastModified": "2021-07-27T17:26:18.650", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger a denial of service via a `CHECK`-fail in `tf.raw_ops.CTCGreedyDecoder`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/1615440b17b364b875eb06f43d087381f1460a65/tensorflow/core/kernels/ctc_decoder_ops.cc#L37-L50) has a `CHECK_LT` inserted to validate some invariants. When this condition is false, the program aborts, instead of returning a valid error to the user. This abnormal termination can be weaponized in denial of service attacks. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto de extremo a extremo para el aprendizaje autom\u00e1tico.&#xa0;Un atacante puede desencadenar una denegaci\u00f3n de servicio por medio de \"CHECK\" en \"tf.raw_ops.CTCGreedyDecoder\".&#xa0;Esto es debido a que la implementaci\u00f3n (https://github.com/tensorflow/tensorflow/blob/1615440b17b364b875eb06f43d087381f1460a65/tensorflow/core/kernels/ctc_decoder_ops.cc#L37-L50) presenta un \"CHECK_LT\" insertado para comprobar algunas invariantes.&#xa0;Cuando esta condici\u00f3n es falsa, el programa aborta, en lugar de devolver un error v\u00e1lido al usuario.&#xa0;Esta terminaci\u00f3n anormal puede ser usada como arma en ataques de denegaci\u00f3n de servicio.&#xa0;La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.5.0.&#xa0;Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.4.2, TensorFlow versi\u00f3n 2.3.3, TensorFlow versi\u00f3n 2.2.3 y TensorFlow versi\u00f3n 2.1.4, ya que estos tambi\u00e9n est\u00e1n afectados y a\u00fan est\u00e1n en el rango compatible"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 2.5, "baseSeverity": "LOW"}, "exploitabilityScore": 1.0, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-617"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.4", "matchCriteriaId": "323ABCCE-24EB-47CC-87F6-48C101477587"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.2.0", "versionEndExcluding": "2.2.3", "matchCriteriaId": "64ABA90C-0649-4BB0-89C9-83C14BBDCC0F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.3", "matchCriteriaId": "0F83E0CF-CBF6-4C24-8683-3E7A5DC95BA9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.2", "matchCriteriaId": "8259531B-A8AC-4F8B-B60F-B69DE4767C03"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/ea3b43e98c32c97b35d52b4c66f9107452ca8fb2", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fphq-gw9m-ghrv", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/ea3b43e98c32c97b35d52b4c66f9107452ca8fb2"}}