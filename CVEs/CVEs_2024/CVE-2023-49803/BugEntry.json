{"buggy_code": ["# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Node.js CI\n\non:\n  push:\n    branches:\n      - main\n      - master\n  pull_request:\n    branches:\n      - main\n      - master\n  schedule:\n    - cron: '0 2 * * *'\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      fail-fast: false\n      matrix:\n        node-version: [14, 16, 18]\n        os: [ubuntu-latest]\n\n    steps:\n    - name: Checkout Git Source\n      uses: actions/checkout@v2\n\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v1\n      with:\n        node-version: ${{ matrix.node-version }}\n\n    - name: Install Dependencies\n      run: npm i\n\n    - name: Continuous Integration\n      run: npm run ci\n\n    - name: Code Coverage\n      uses: codecov/codecov-action@v1\n      with:\n        token: ${{ secrets.CODECOV_TOKEN }}\n", "@koa/cors\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![Node.js CI](https://github.com/koajs/cors/actions/workflows/nodejs.yml/badge.svg)](https://github.com/koajs/cors/actions/workflows/nodejs.yml)\n[![Test coverage][codecov-image]][codecov-url]\n[![npm download][download-image]][download-url]\n\n[npm-image]: https://img.shields.io/npm/v/@koa/cors.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/@koa/cors\n[codecov-image]: https://codecov.io/github/koajs/cors/coverage.svg?branch=v2.x\n[codecov-url]: https://codecov.io/github/koajs/cors?branch=v2.x\n[download-image]: https://img.shields.io/npm/dm/@koa/cors.svg?style=flat-square\n[download-url]: https://npmjs.org/package/@koa/cors\n\n[Cross-Origin Resource Sharing(CORS)](https://developer.mozilla.org/en/docs/Web/HTTP/Access_control_CORS) for koa\n\n## Installation\n\n```bash\n$ npm install @koa/cors --save\n```\n\n## Quick start\n\nEnable cors with default options:\n\n- origin: request Origin header\n- allowMethods: GET,HEAD,PUT,POST,DELETE,PATCH\n\n```js\nconst Koa = require('koa');\nconst cors = require('@koa/cors');\n\nconst app = new Koa();\napp.use(cors());\n```\n\n## cors(options)\n\n```js\n/**\n * CORS middleware\n *\n * @param {Object} [options]\n *  - {String|Function(ctx)} origin `Access-Control-Allow-Origin`, default is request Origin header\n *  - {String|Array} allowMethods `Access-Control-Allow-Methods`, default is 'GET,HEAD,PUT,POST,DELETE,PATCH'\n *  - {String|Array} exposeHeaders `Access-Control-Expose-Headers`\n *  - {String|Array} allowHeaders `Access-Control-Allow-Headers`\n *  - {String|Number} maxAge `Access-Control-Max-Age` in seconds\n *  - {Boolean|Function(ctx)} credentials `Access-Control-Allow-Credentials`, default is false.\n *  - {Boolean} keepHeadersOnError Add set headers to `err.header` if an error is thrown\n *  - {Boolean} secureContext `Cross-Origin-Opener-Policy` & `Cross-Origin-Embedder-Policy` headers.', default is false\n *  - {Boolean} privateNetworkAccess handle `Access-Control-Request-Private-Network` request by return `Access-Control-Allow-Private-Network`, default to false\n * @return {Function} cors middleware\n * @api public\n */\n```\n\n## License\n\n[MIT](./LICENSE)\n\n<!-- GITCONTRIBUTOR_START -->\n\n## Contributors\n\n|[<img src=\"https://avatars.githubusercontent.com/u/156269?v=4\" width=\"100px;\"/><br/><sub><b>fengmk2</b></sub>](https://github.com/fengmk2)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/985607?v=4\" width=\"100px;\"/><br/><sub><b>dead-horse</b></sub>](https://github.com/dead-horse)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/1127384?v=4\" width=\"100px;\"/><br/><sub><b>omsmith</b></sub>](https://github.com/omsmith)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/643505?v=4\" width=\"100px;\"/><br/><sub><b>jonathanong</b></sub>](https://github.com/jonathanong)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/5622516?v=4\" width=\"100px;\"/><br/><sub><b>AlphaWong</b></sub>](https://github.com/AlphaWong)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/55783048?v=4\" width=\"100px;\"/><br/><sub><b>cma-skedulo</b></sub>](https://github.com/cma-skedulo)<br/>|\n| :---: | :---: | :---: | :---: | :---: | :---: |\n|[<img src=\"https://avatars.githubusercontent.com/u/6992588?v=4\" width=\"100px;\"/><br/><sub><b>CleberRossi</b></sub>](https://github.com/CleberRossi)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/178720?v=4\" width=\"100px;\"/><br/><sub><b>erikfried</b></sub>](https://github.com/erikfried)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/1217939?v=4\" width=\"100px;\"/><br/><sub><b>j-waaang</b></sub>](https://github.com/j-waaang)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/4184677?v=4\" width=\"100px;\"/><br/><sub><b>ltomes</b></sub>](https://github.com/ltomes)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/372420?v=4\" width=\"100px;\"/><br/><sub><b>lfreneda</b></sub>](https://github.com/lfreneda)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/170299?v=4\" width=\"100px;\"/><br/><sub><b>matthewmueller</b></sub>](https://github.com/matthewmueller)<br/>|\n[<img src=\"https://avatars.githubusercontent.com/u/6006498?v=4\" width=\"100px;\"/><br/><sub><b>PlasmaPower</b></sub>](https://github.com/PlasmaPower)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/14932834?v=4\" width=\"100px;\"/><br/><sub><b>swain</b></sub>](https://github.com/swain)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/49938086?v=4\" width=\"100px;\"/><br/><sub><b>TyrealHu</b></sub>](https://github.com/TyrealHu)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/8369011?v=4\" width=\"100px;\"/><br/><sub><b>xg-wang</b></sub>](https://github.com/xg-wang)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/12003270?v=4\" width=\"100px;\"/><br/><sub><b>lishengzxc</b></sub>](https://github.com/lishengzxc)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/514097?v=4\" width=\"100px;\"/><br/><sub><b>mcohen75</b></sub>](https://github.com/mcohen75)<br/>\n\nThis project follows the git-contributor [spec](https://github.com/xudafeng/git-contributor), auto updated at `Sat Oct 08 2022 21:35:10 GMT+0800`.\n\n<!-- GITCONTRIBUTOR_END -->\n", "'use strict';\n\nconst vary = require('vary');\n\n/**\n * CORS middleware\n *\n * @param {Object} [options]\n *  - {String|Function(ctx)} origin `Access-Control-Allow-Origin`, default is request Origin header\n *  - {String|Array} allowMethods `Access-Control-Allow-Methods`, default is 'GET,HEAD,PUT,POST,DELETE,PATCH'\n *  - {String|Array} exposeHeaders `Access-Control-Expose-Headers`\n *  - {String|Array} allowHeaders `Access-Control-Allow-Headers`\n *  - {String|Number} maxAge `Access-Control-Max-Age` in seconds\n *  - {Boolean|Function(ctx)} credentials `Access-Control-Allow-Credentials`\n *  - {Boolean} keepHeadersOnError Add set headers to `err.header` if an error is thrown\n *  - {Boolean} secureContext `Cross-Origin-Opener-Policy` & `Cross-Origin-Embedder-Policy` headers.', default is false\n *    @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/Planned_changes\n *  - {Boolean} privateNetworkAccess handle `Access-Control-Request-Private-Network` request by return `Access-Control-Allow-Private-Network`, default to false\n *    @see https://wicg.github.io/private-network-access/\n * @return {Function} cors middleware\n * @public\n */\nmodule.exports = function(options) {\n  const defaults = {\n    allowMethods: 'GET,HEAD,PUT,POST,DELETE,PATCH',\n    secureContext: false,\n  };\n\n  options = {\n    ...defaults,\n    ...options,\n  };\n\n  if (Array.isArray(options.exposeHeaders)) {\n    options.exposeHeaders = options.exposeHeaders.join(',');\n  }\n\n  if (Array.isArray(options.allowMethods)) {\n    options.allowMethods = options.allowMethods.join(',');\n  }\n\n  if (Array.isArray(options.allowHeaders)) {\n    options.allowHeaders = options.allowHeaders.join(',');\n  }\n\n  if (options.maxAge) {\n    options.maxAge = String(options.maxAge);\n  }\n\n  options.keepHeadersOnError = options.keepHeadersOnError === undefined || !!options.keepHeadersOnError;\n\n  return async function cors(ctx, next) {\n    // If the Origin header is not present terminate this set of steps.\n    // The request is outside the scope of this specification.\n    const requestOrigin = ctx.get('Origin');\n\n    // Always set Vary header\n    // https://github.com/rs/cors/issues/10\n    ctx.vary('Origin');\n\n    let origin;\n    if (typeof options.origin === 'function') {\n      origin = await options.origin(ctx);\n      if (!origin) return await next();\n    } else {\n      origin = options.origin || requestOrigin;\n    }\n\n    let credentials;\n    if (typeof options.credentials === 'function') {\n      credentials = await options.credentials(ctx);\n    } else {\n      credentials = !!options.credentials;\n    }\n\n    if (credentials && origin === '*') {\n      origin = requestOrigin;\n    }\n\n    const headersSet = {};\n\n    function set(key, value) {\n      ctx.set(key, value);\n      headersSet[key] = value;\n    }\n\n    if (ctx.method !== 'OPTIONS') {\n      // Simple Cross-Origin Request, Actual Request, and Redirects\n      set('Access-Control-Allow-Origin', origin);\n\n      if (credentials === true) {\n        set('Access-Control-Allow-Credentials', 'true');\n      }\n\n      if (options.exposeHeaders) {\n        set('Access-Control-Expose-Headers', options.exposeHeaders);\n      }\n\n      if (options.secureContext) {\n        set('Cross-Origin-Opener-Policy', 'same-origin');\n        set('Cross-Origin-Embedder-Policy', 'require-corp');\n      }\n\n      if (!options.keepHeadersOnError) {\n        return await next();\n      }\n      try {\n        return await next();\n      } catch (err) {\n        const errHeadersSet = err.headers || {};\n        const varyWithOrigin = vary.append(errHeadersSet.vary || errHeadersSet.Vary || '', 'Origin');\n        delete errHeadersSet.Vary;\n\n        err.headers = {\n          ...errHeadersSet,\n          ...headersSet,\n          ...{ vary: varyWithOrigin },\n        };\n        throw err;\n      }\n    } else {\n      // Preflight Request\n\n      // If there is no Access-Control-Request-Method header or if parsing failed,\n      // do not set any additional headers and terminate this set of steps.\n      // The request is outside the scope of this specification.\n      if (!ctx.get('Access-Control-Request-Method')) {\n        // this not preflight request, ignore it\n        return await next();\n      }\n\n      ctx.set('Access-Control-Allow-Origin', origin);\n\n      if (credentials === true) {\n        ctx.set('Access-Control-Allow-Credentials', 'true');\n      }\n\n      if (options.maxAge) {\n        ctx.set('Access-Control-Max-Age', options.maxAge);\n      }\n\n      if (options.privateNetworkAccess && ctx.get('Access-Control-Request-Private-Network')) {\n        ctx.set('Access-Control-Allow-Private-Network', 'true');\n      }\n\n      if (options.allowMethods) {\n        ctx.set('Access-Control-Allow-Methods', options.allowMethods);\n      }\n\n      if (options.secureContext) {\n        set('Cross-Origin-Opener-Policy', 'same-origin');\n        set('Cross-Origin-Embedder-Policy', 'require-corp');\n      }\n\n      let allowHeaders = options.allowHeaders;\n      if (!allowHeaders) {\n        allowHeaders = ctx.get('Access-Control-Request-Headers');\n      }\n      if (allowHeaders) {\n        ctx.set('Access-Control-Allow-Headers', allowHeaders);\n      }\n\n      ctx.status = 204;\n    }\n  };\n};\n", "{\n  \"name\": \"@koa/cors\",\n  \"version\": \"4.0.0\",\n  \"description\": \"Cross-Origin Resource Sharing(CORS) for koa\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"scripts\": {\n    \"contributor\": \"git-contributor\",\n    \"test\": \"NODE_ENV=test mocha --check-leaks -R spec -t 5000 test/*.test.js\",\n    \"test-cov\": \"NODE_ENV=test istanbul cover _mocha -- --check-leaks -t 5000 test/*.test.js\",\n    \"ci\": \"npm run lint && npm run test-cov\",\n    \"lint\": \"eslint index.js test\"\n  },\n  \"dependencies\": {\n    \"vary\": \"^1.1.2\"\n  },\n  \"devDependencies\": {\n    \"egg-ci\": \"^2.1.0\",\n    \"eslint\": \"^8.25.0\",\n    \"eslint-config-egg\": \"^12.0.0\",\n    \"git-contributor\": \"^1.0.10\",\n    \"istanbul\": \"*\",\n    \"koa\": \"^2.5.1\",\n    \"mocha\": \"^3.5.3\",\n    \"supertest\": \"^3.1.0\"\n  },\n  \"homepage\": \"https://github.com/koajs/cors\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/koajs/cors.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/koajs/cors/issues\"\n  },\n  \"keywords\": [\n    \"cors\",\n    \"koa-cors\",\n    \"Cross-Origin Resource Sharing\",\n    \"@koa/cors\",\n    \"koa\",\n    \"koajs\"\n  ],\n  \"engines\": {\n    \"node\": \">= 14.0.0\"\n  },\n  \"ci\": {\n    \"version\": \"14, 16, 18\",\n    \"os\": \"linux\"\n  },\n  \"author\": \"fengmk2 <fengmk2@gmail.com> (http://github.com/fengmk2)\",\n  \"license\": \"MIT\"\n}\n", "'use strict';\n\nconst assert = require('assert');\nconst Koa = require('koa');\nconst request = require('supertest');\nconst cors = require('..');\n\ndescribe('cors.test.js', function() {\n  describe('default options', function() {\n    const app = new Koa();\n    app.use(cors());\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should not set `Access-Control-Allow-Origin` when request Origin header missing', function(done) {\n      request(app.listen())\n        .get('/')\n        .expect({ foo: 'bar' })\n        .expect(200, function(err, res) {\n          assert(!err);\n          assert(!res.headers['access-control-allow-origin']);\n          done();\n        });\n    });\n\n    it('should set `Access-Control-Allow-Origin` to request origin header', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n\n    it('should 204 on Preflight Request', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect('Access-Control-Allow-Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Methods', 'GET,HEAD,PUT,POST,DELETE,PATCH')\n        .expect(204, done);\n    });\n\n    it('should not Preflight Request if request missing Access-Control-Request-Method', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .expect(200, done);\n    });\n\n    it('should always set `Vary` to Origin', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Vary', 'Origin')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n  });\n\n  describe('options.origin=*', function() {\n    const app = new Koa();\n    app.use(cors({\n      origin: '*',\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should always set `Access-Control-Allow-Origin` to *', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Origin', '*')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n\n    it('should always set `Access-Control-Allow-Origin` to *, even if no Origin is passed on request', function(done) {\n      request(app.listen())\n        .get('/')\n        .expect('Access-Control-Allow-Origin', '*')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n  });\n\n  describe('options.secureContext=true', function() {\n    const app = new Koa();\n    app.use(cors({\n      secureContext: true,\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should always set `Cross-Origin-Opener-Policy` & `Cross-Origin-Embedder-Policy` on not OPTIONS', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Cross-Origin-Opener-Policy', 'same-origin')\n        .expect('Cross-Origin-Embedder-Policy', 'require-corp')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n\n    it('should always set `Cross-Origin-Opener-Policy` & `Cross-Origin-Embedder-Policy` on OPTIONS', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect('Cross-Origin-Opener-Policy', 'same-origin')\n        .expect('Cross-Origin-Embedder-Policy', 'require-corp')\n        .expect(204, done);\n    });\n  });\n\n  describe('options.secureContext=false', function() {\n    const app = new Koa();\n    app.use(cors({\n      secureContext: false,\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should not set `Cross-Origin-Opener-Policy` & `Cross-Origin-Embedder-Policy`', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect(res => {\n          assert(!('Cross-Origin-Opener-Policy' in res.headers));\n          assert(!('Cross-Origin-Embedder-Policy' in res.headers));\n        })\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n  });\n\n  describe('options.origin=function', function() {\n    const app = new Koa();\n    app.use(cors({\n      origin(ctx) {\n        if (ctx.url === '/forbin') {\n          return false;\n        }\n        return '*';\n      },\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should disable cors', function(done) {\n      request(app.listen())\n        .get('/forbin')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect(200, function(err, res) {\n          assert(!err);\n          assert(!res.headers['access-control-allow-origin']);\n          done();\n        });\n    });\n\n    it('should set access-control-allow-origin to *', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect('Access-Control-Allow-Origin', '*')\n        .expect(200, done);\n    });\n  });\n\n  describe('options.origin=promise', function() {\n    const app = new Koa();\n    app.use(cors({\n      origin(ctx) {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            if (ctx.url === '/forbin') {\n              return resolve(false);\n            }\n            return resolve('*');\n          }, 100);\n        });\n      },\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should disable cors', function(done) {\n      request(app.listen())\n        .get('/forbin')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect(200, function(err, res) {\n          assert(!err);\n          assert(!res.headers['access-control-allow-origin']);\n          done();\n        });\n    });\n\n    it('should set access-control-allow-origin to *', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect('Access-Control-Allow-Origin', '*')\n        .expect(200, done);\n    });\n  });\n\n  describe('options.origin=async function', function() {\n    const app = new Koa();\n    app.use(cors({\n      async origin(ctx) {\n        if (ctx.url === '/forbin') {\n          return false;\n        }\n        return '*';\n      },\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should disable cors', function(done) {\n      request(app.listen())\n        .get('/forbin')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect(200, function(err, res) {\n          assert(!err);\n          assert(!res.headers['access-control-allow-origin']);\n          done();\n        });\n    });\n\n    it('should set access-control-allow-origin to *', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect('Access-Control-Allow-Origin', '*')\n        .expect(200, done);\n    });\n\n    it('behaves correctly when the return type is promise-like', function(done) {\n      class WrappedPromise {\n        constructor(...args) {\n          this.internalPromise = new Promise(...args);\n        }\n\n        then(onFulfilled) {\n          this.internalPromise.then(onFulfilled);\n        }\n      }\n\n      const app = new Koa()\n        .use(cors({\n          origin() {\n            return new WrappedPromise(resolve => {\n              return resolve('*');\n            });\n          },\n        }))\n        .use(function(ctx) {\n          ctx.body = { foo: 'bar' };\n        });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect('Access-Control-Allow-Origin', '*')\n        .expect(200, done);\n    });\n  });\n\n  describe('options.exposeHeaders', function() {\n    it('should Access-Control-Expose-Headers: `content-length`', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        exposeHeaders: 'content-length',\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Expose-Headers', 'content-length')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n\n    it('should work with array', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        exposeHeaders: [ 'content-length', 'x-header' ],\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Expose-Headers', 'content-length,x-header')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n  });\n\n  describe('options.maxAge', function() {\n    it('should set maxAge with number', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        maxAge: 3600,\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect('Access-Control-Max-Age', '3600')\n        .expect(204, done);\n    });\n\n    it('should set maxAge with string', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        maxAge: '3600',\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect('Access-Control-Max-Age', '3600')\n        .expect(204, done);\n    });\n\n    it('should not set maxAge on simple request', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        maxAge: '3600',\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect(200, function(err, res) {\n          assert(!err);\n          assert(!res.headers['access-control-max-age']);\n          done();\n        });\n    });\n  });\n\n  describe('options.credentials', function() {\n    const app = new Koa();\n    app.use(cors({\n      credentials: true,\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should enable Access-Control-Allow-Credentials on Simple request', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Credentials', 'true')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n\n    it('should enable Access-Control-Allow-Credentials on Preflight request', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'DELETE')\n        .expect('Access-Control-Allow-Credentials', 'true')\n        .expect(204, done);\n    });\n  });\n\n  describe('options.credentials unset', function() {\n    const app = new Koa();\n    app.use(cors());\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should disable Access-Control-Allow-Credentials on Simple request', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect(200)\n        .end(function(error, response) {\n          if (error) return done(error);\n\n          const header = response.headers['access-control-allow-credentials'];\n          assert.equal(header, undefined, 'Access-Control-Allow-Credentials must not be set.');\n          done();\n        });\n    });\n\n    it('should disable Access-Control-Allow-Credentials on Preflight request', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'DELETE')\n        .expect(204)\n        .end(function(error, response) {\n          if (error) return done(error);\n\n          const header = response.headers['access-control-allow-credentials'];\n          assert.equal(header, undefined, 'Access-Control-Allow-Credentials must not be set.');\n          done();\n        });\n    });\n  });\n\n  describe('options.credentials=function', function() {\n    const app = new Koa();\n    app.use(cors({\n      credentials(ctx) {\n        return ctx.url !== '/forbin';\n      },\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should enable Access-Control-Allow-Credentials on Simple request', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Credentials', 'true')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n\n    it('should enable Access-Control-Allow-Credentials on Preflight request', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'DELETE')\n        .expect('Access-Control-Allow-Credentials', 'true')\n        .expect(204, done);\n    });\n\n    it('should disable Access-Control-Allow-Credentials on Simple request', function(done) {\n      request(app.listen())\n        .get('/forbin')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect(200)\n        .end(function(error, response) {\n          if (error) return done(error);\n\n          const header = response.headers['access-control-allow-credentials'];\n          assert.equal(header, undefined, 'Access-Control-Allow-Credentials must not be set.');\n          done();\n        });\n    });\n\n    it('should disable Access-Control-Allow-Credentials on Preflight request', function(done) {\n      request(app.listen())\n        .options('/forbin')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'DELETE')\n        .expect(204)\n        .end(function(error, response) {\n          if (error) return done(error);\n\n          const header = response.headers['access-control-allow-credentials'];\n          assert.equal(header, undefined, 'Access-Control-Allow-Credentials must not be set.');\n          done();\n        });\n    });\n  });\n\n  describe('options.credentials=async function', function() {\n    const app = new Koa();\n    app.use(cors({\n      async credentials() {\n        return true;\n      },\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should enable Access-Control-Allow-Credentials on Simple request', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Credentials', 'true')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n\n    it('should enable Access-Control-Allow-Credentials on Preflight request', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'DELETE')\n        .expect('Access-Control-Allow-Credentials', 'true')\n        .expect(204, done);\n    });\n\n    it('behaves correctly when the return type is promise-like', function(done) {\n      class WrappedPromise {\n        constructor(...args) {\n          this.internalPromise = new Promise(...args);\n        }\n\n        then(onFulfilled) {\n          this.internalPromise.then(onFulfilled);\n        }\n      }\n\n      const app = new Koa()\n        .use(cors({\n          credentials() {\n            return new WrappedPromise(resolve => {\n              resolve(true);\n            });\n          },\n        }))\n        .use(function(ctx) {\n          ctx.body = { foo: 'bar' };\n        });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Credentials', 'true')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n  });\n\n  describe('options.allowHeaders', function() {\n    it('should work with allowHeaders is string', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        allowHeaders: 'X-PINGOTHER',\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect('Access-Control-Allow-Headers', 'X-PINGOTHER')\n        .expect(204, done);\n    });\n\n    it('should work with allowHeaders is array', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        allowHeaders: [ 'X-PINGOTHER' ],\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect('Access-Control-Allow-Headers', 'X-PINGOTHER')\n        .expect(204, done);\n    });\n\n    it('should set Access-Control-Allow-Headers to request access-control-request-headers header', function(done) {\n      const app = new Koa();\n      app.use(cors());\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .set('access-control-request-headers', 'X-PINGOTHER')\n        .expect('Access-Control-Allow-Headers', 'X-PINGOTHER')\n        .expect(204, done);\n    });\n  });\n\n  describe('options.allowMethods', function() {\n    it('should work with allowMethods is array', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        allowMethods: [ 'GET', 'POST' ],\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect('Access-Control-Allow-Methods', 'GET,POST')\n        .expect(204, done);\n    });\n\n    it('should skip allowMethods', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        allowMethods: null,\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect(204, done);\n    });\n  });\n\n  describe('options.headersKeptOnError', function() {\n    it('should keep CORS headers after an error', function(done) {\n      const app = new Koa();\n      app.use(cors());\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n        throw new Error('Whoops!');\n      });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Origin', 'http://koajs.com')\n        .expect('Vary', 'Origin')\n        .expect(/Error/)\n        .expect(500, done);\n    });\n\n    it('should not affect OPTIONS requests', function(done) {\n      const app = new Koa();\n      app.use(cors());\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n        throw new Error('Whoops!');\n      });\n\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect('Access-Control-Allow-Origin', 'http://koajs.com')\n        .expect(204, done);\n    });\n\n    it('should not keep unrelated headers', function(done) {\n      const app = new Koa();\n      app.use(cors());\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n        ctx.set('X-Example', 'Value');\n        throw new Error('Whoops!');\n      });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Origin', 'http://koajs.com')\n        .expect(/Error/)\n        .expect(500, function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          assert(!res.headers['x-example']);\n          done();\n        });\n    });\n\n    it('should not keep CORS headers after an error if keepHeadersOnError is false', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        keepHeadersOnError: false,\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n        throw new Error('Whoops!');\n      });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect(/Error/)\n        .expect(500, function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          assert(!res.headers['access-control-allow-origin']);\n          assert(!res.headers.vary);\n          done();\n        });\n    });\n  });\n\n  describe('other middleware has been set `Vary` header to Accept-Encoding', function() {\n    const app = new Koa();\n    app.use(function(ctx, next) {\n      ctx.set('Vary', 'Accept-Encoding');\n      return next();\n    });\n\n    app.use(cors());\n\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should append `Vary` header to Origin', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Vary', 'Accept-Encoding, Origin')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n  });\n  describe('other middleware has set vary header on Error', function() {\n    it('should append `Origin to other `Vary` header', function(done) {\n      const app = new Koa();\n      app.use(cors());\n\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n        const error = new Error('Whoops!');\n        error.headers = { Vary: 'Accept-Encoding' };\n        throw error;\n      });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Vary', 'Accept-Encoding, Origin')\n        .expect(/Error/)\n        .expect(500, done);\n    });\n    it('should preserve `Vary: *`', function(done) {\n      const app = new Koa();\n      app.use(cors());\n\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n        const error = new Error('Whoops!');\n        error.headers = { Vary: '*' };\n        throw error;\n      });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Vary', '*')\n        .expect(/Error/)\n        .expect(500, done);\n    });\n    it('should not append Origin` if already present in `Vary`', function(done) {\n      const app = new Koa();\n      app.use(cors());\n\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n        const error = new Error('Whoops!');\n        error.headers = { Vary: 'Origin, Accept-Encoding' };\n        throw error;\n      });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Vary', 'Origin, Accept-Encoding')\n        .expect(/Error/)\n        .expect(500, done);\n    });\n  });\n\n  describe('options.privateNetworkAccess=false', function() {\n    const app = new Koa();\n    app.use(cors({\n      privateNetworkAccess: false,\n    }));\n\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should not set `Access-Control-Allow-Private-Network` on not OPTIONS', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect(res => {\n          assert(!('Access-Control-Allow-Private-Network' in res.headers));\n        })\n        .expect(200, done);\n    });\n\n    it('should not set `Access-Control-Allow-Private-Network` if `Access-Control-Request-Private-Network` not exist on OPTIONS', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect(res => {\n          assert(!('Access-Control-Allow-Private-Network' in res.headers));\n        })\n        .expect(204, done);\n    });\n\n    it('should not set `Access-Control-Allow-Private-Network` if `Access-Control-Request-Private-Network` exist on OPTIONS', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .set('Access-Control-Request-Private-Network', 'true')\n        .expect(res => {\n          assert(!('Access-Control-Allow-Private-Network' in res.headers));\n        })\n        .expect(204, done);\n    });\n  });\n\n  describe('options.privateNetworkAccess=true', function() {\n    const app = new Koa();\n    app.use(cors({\n      privateNetworkAccess: true,\n    }));\n\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should not set `Access-Control-Allow-Private-Network` on not OPTIONS', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect(res => {\n          assert(!('Access-Control-Allow-Private-Network' in res.headers));\n        })\n        .expect(200, done);\n    });\n\n    it('should not set `Access-Control-Allow-Private-Network` if `Access-Control-Request-Private-Network` not exist on OPTIONS', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect(res => {\n          assert(!('Access-Control-Allow-Private-Network' in res.headers));\n        })\n        .expect(204, done);\n    });\n\n    it('should always set `Access-Control-Allow-Private-Network` if `Access-Control-Request-Private-Network` exist on OPTIONS', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .set('Access-Control-Request-Private-Network', 'true')\n        .expect('Access-Control-Allow-Private-Network', 'true')\n        .expect(204, done);\n    });\n  });\n\n  describe('options.origin=*, and options.credentials=true', function() {\n    const app = new Koa();\n    app.use(cors({\n      origin: '*',\n      credentials: true,\n    }));\n\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('Access-Control-Allow-Origin should be request.origin, and Access-Control-Allow-Credentials should be true', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Credentials', 'true')\n        .expect('Access-Control-Allow-Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n  });\n\n  describe('options.origin=*, and options.credentials=false', function() {\n    const app = new Koa();\n    app.use(cors({\n      origin: '*',\n      credentials: false,\n    }));\n\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('Access-Control-Allow-Origin should be *', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Origin', '*')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n  });\n});\n"], "fixing_code": ["# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Node.js CI\n\non:\n  push:\n    branches:\n      - main\n      - master\n  pull_request:\n    branches:\n      - main\n      - master\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      fail-fast: false\n      matrix:\n        node-version: [14, 16, 18, 20]\n        os: [ubuntu-latest]\n\n    steps:\n    - name: Checkout Git Source\n      uses: actions/checkout@v2\n\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v1\n      with:\n        node-version: ${{ matrix.node-version }}\n\n    - name: Install Dependencies\n      run: npm i\n\n    - name: Continuous Integration\n      run: npm run ci\n\n    - name: Code Coverage\n      uses: codecov/codecov-action@v1\n      with:\n        token: ${{ secrets.CODECOV_TOKEN }}\n", "# @koa/cors\n\n[![NPM version][npm-image]][npm-url]\n[![Node.js CI](https://github.com/koajs/cors/actions/workflows/nodejs.yml/badge.svg)](https://github.com/koajs/cors/actions/workflows/nodejs.yml)\n[![Test coverage][codecov-image]][codecov-url]\n[![npm download][download-image]][download-url]\n\n[npm-image]: https://img.shields.io/npm/v/@koa/cors.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/@koa/cors\n[codecov-image]: https://codecov.io/github/koajs/cors/coverage.svg?branch=v2.x\n[codecov-url]: https://codecov.io/github/koajs/cors?branch=v2.x\n[download-image]: https://img.shields.io/npm/dm/@koa/cors.svg?style=flat-square\n[download-url]: https://npmjs.org/package/@koa/cors\n\n[Cross-Origin Resource Sharing(CORS)](https://developer.mozilla.org/en/docs/Web/HTTP/Access_control_CORS) for koa\n\n## Installation\n\n```bash\n$ npm install @koa/cors --save\n```\n\n## Quick start\n\nEnable cors with default options:\n\n- origin: request Origin header\n- allowMethods: GET,HEAD,PUT,POST,DELETE,PATCH\n\n```js\nconst Koa = require('koa');\nconst cors = require('@koa/cors');\n\nconst app = new Koa();\napp.use(cors());\n```\n\n## cors(options)\n\n```js\n/**\n * CORS middleware\n *\n * @param {Object} [options]\n *  - {String|Function(ctx)} origin `Access-Control-Allow-Origin`, default is '*'\n *    If `credentials` set and return `true, the `origin` default value will set to the request `Origin` header\n *  - {String|Array} allowMethods `Access-Control-Allow-Methods`, default is 'GET,HEAD,PUT,POST,DELETE,PATCH'\n *  - {String|Array} exposeHeaders `Access-Control-Expose-Headers`\n *  - {String|Array} allowHeaders `Access-Control-Allow-Headers`\n *  - {String|Number} maxAge `Access-Control-Max-Age` in seconds\n *  - {Boolean|Function(ctx)} credentials `Access-Control-Allow-Credentials`, default is false.\n *  - {Boolean} keepHeadersOnError Add set headers to `err.header` if an error is thrown\n *  - {Boolean} secureContext `Cross-Origin-Opener-Policy` & `Cross-Origin-Embedder-Policy` headers.', default is false\n *  - {Boolean} privateNetworkAccess handle `Access-Control-Request-Private-Network` request by return `Access-Control-Allow-Private-Network`, default to false\n * @return {Function} cors middleware\n * @api public\n */\n```\n\n## Breaking change between 5.0 and 4.0\n\nThe default `origin` is set to `*`, if you want to keep the 4.0 behavior, you can set the `origin` handler like this:\n\n```js\napp.use(cors({\n  origin(ctx) {\n    return ctx.get('Origin') || '*';\n  },\n}));\n```\n\n## License\n\n[MIT](./LICENSE)\n\n<!-- GITCONTRIBUTOR_START -->\n\n## Contributors\n\n|[<img src=\"https://avatars.githubusercontent.com/u/156269?v=4\" width=\"100px;\"/><br/><sub><b>fengmk2</b></sub>](https://github.com/fengmk2)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/985607?v=4\" width=\"100px;\"/><br/><sub><b>dead-horse</b></sub>](https://github.com/dead-horse)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/1127384?v=4\" width=\"100px;\"/><br/><sub><b>omsmith</b></sub>](https://github.com/omsmith)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/643505?v=4\" width=\"100px;\"/><br/><sub><b>jonathanong</b></sub>](https://github.com/jonathanong)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/5622516?v=4\" width=\"100px;\"/><br/><sub><b>AlphaWong</b></sub>](https://github.com/AlphaWong)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/55783048?v=4\" width=\"100px;\"/><br/><sub><b>cma-skedulo</b></sub>](https://github.com/cma-skedulo)<br/>|\n| :---: | :---: | :---: | :---: | :---: | :---: |\n|[<img src=\"https://avatars.githubusercontent.com/u/6992588?v=4\" width=\"100px;\"/><br/><sub><b>CleberRossi</b></sub>](https://github.com/CleberRossi)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/178720?v=4\" width=\"100px;\"/><br/><sub><b>erikfried</b></sub>](https://github.com/erikfried)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/1217939?v=4\" width=\"100px;\"/><br/><sub><b>j-waaang</b></sub>](https://github.com/j-waaang)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/4184677?v=4\" width=\"100px;\"/><br/><sub><b>ltomes</b></sub>](https://github.com/ltomes)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/372420?v=4\" width=\"100px;\"/><br/><sub><b>lfreneda</b></sub>](https://github.com/lfreneda)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/170299?v=4\" width=\"100px;\"/><br/><sub><b>matthewmueller</b></sub>](https://github.com/matthewmueller)<br/>|\n[<img src=\"https://avatars.githubusercontent.com/u/6006498?v=4\" width=\"100px;\"/><br/><sub><b>PlasmaPower</b></sub>](https://github.com/PlasmaPower)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/14932834?v=4\" width=\"100px;\"/><br/><sub><b>swain</b></sub>](https://github.com/swain)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/49938086?v=4\" width=\"100px;\"/><br/><sub><b>TyrealHu</b></sub>](https://github.com/TyrealHu)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/8369011?v=4\" width=\"100px;\"/><br/><sub><b>xg-wang</b></sub>](https://github.com/xg-wang)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/12003270?v=4\" width=\"100px;\"/><br/><sub><b>lishengzxc</b></sub>](https://github.com/lishengzxc)<br/>|[<img src=\"https://avatars.githubusercontent.com/u/514097?v=4\" width=\"100px;\"/><br/><sub><b>mcohen75</b></sub>](https://github.com/mcohen75)<br/>\n\nThis project follows the git-contributor [spec](https://github.com/xudafeng/git-contributor), auto updated at `Sat Oct 08 2022 21:35:10 GMT+0800`.\n\n<!-- GITCONTRIBUTOR_END -->\n", "const vary = require('vary');\n\n/**\n * CORS middleware\n *\n * @param {Object} [options]\n *  - {String|Function(ctx)} origin `Access-Control-Allow-Origin`, default is '*'\n *    If `credentials` set and return `true, the `origin` default value will set to the request `Origin` header\n *  - {String|Array} allowMethods `Access-Control-Allow-Methods`, default is 'GET,HEAD,PUT,POST,DELETE,PATCH'\n *  - {String|Array} exposeHeaders `Access-Control-Expose-Headers`\n *  - {String|Array} allowHeaders `Access-Control-Allow-Headers`\n *  - {String|Number} maxAge `Access-Control-Max-Age` in seconds\n *  - {Boolean|Function(ctx)} credentials `Access-Control-Allow-Credentials`\n *  - {Boolean} keepHeadersOnError Add set headers to `err.header` if an error is thrown\n *  - {Boolean} secureContext `Cross-Origin-Opener-Policy` & `Cross-Origin-Embedder-Policy` headers.', default is false\n *    @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/Planned_changes\n *  - {Boolean} privateNetworkAccess handle `Access-Control-Request-Private-Network` request by return `Access-Control-Allow-Private-Network`, default to false\n *    @see https://wicg.github.io/private-network-access/\n * @return {Function} cors middleware\n * @public\n */\nmodule.exports = function(options) {\n  const defaults = {\n    allowMethods: 'GET,HEAD,PUT,POST,DELETE,PATCH',\n    secureContext: false,\n  };\n\n  options = {\n    ...defaults,\n    ...options,\n  };\n\n  if (Array.isArray(options.exposeHeaders)) {\n    options.exposeHeaders = options.exposeHeaders.join(',');\n  }\n\n  if (Array.isArray(options.allowMethods)) {\n    options.allowMethods = options.allowMethods.join(',');\n  }\n\n  if (Array.isArray(options.allowHeaders)) {\n    options.allowHeaders = options.allowHeaders.join(',');\n  }\n\n  if (options.maxAge) {\n    options.maxAge = String(options.maxAge);\n  }\n\n  options.keepHeadersOnError = options.keepHeadersOnError === undefined || !!options.keepHeadersOnError;\n\n  return async function cors(ctx, next) {\n    // If the Origin header is not present terminate this set of steps.\n    // The request is outside the scope of this specification.\n    const requestOrigin = ctx.get('Origin');\n\n    // Always set Vary header\n    // https://github.com/rs/cors/issues/10\n    ctx.vary('Origin');\n\n    let origin;\n    if (typeof options.origin === 'function') {\n      origin = await options.origin(ctx);\n      if (!origin) {\n        return await next();\n      }\n    } else {\n      origin = options.origin || '*';\n    }\n\n    let credentials;\n    if (typeof options.credentials === 'function') {\n      credentials = await options.credentials(ctx);\n    } else {\n      credentials = !!options.credentials;\n    }\n\n    if (credentials && origin === '*') {\n      origin = requestOrigin;\n    }\n\n    const headersSet = {};\n\n    function set(key, value) {\n      ctx.set(key, value);\n      headersSet[key] = value;\n    }\n\n    if (ctx.method !== 'OPTIONS') {\n      // Simple Cross-Origin Request, Actual Request, and Redirects\n      set('Access-Control-Allow-Origin', origin);\n\n      if (credentials === true) {\n        set('Access-Control-Allow-Credentials', 'true');\n      }\n\n      if (options.exposeHeaders) {\n        set('Access-Control-Expose-Headers', options.exposeHeaders);\n      }\n\n      if (options.secureContext) {\n        set('Cross-Origin-Opener-Policy', 'same-origin');\n        set('Cross-Origin-Embedder-Policy', 'require-corp');\n      }\n\n      if (!options.keepHeadersOnError) {\n        return await next();\n      }\n      try {\n        return await next();\n      } catch (err) {\n        const errHeadersSet = err.headers || {};\n        const varyWithOrigin = vary.append(errHeadersSet.vary || errHeadersSet.Vary || '', 'Origin');\n        delete errHeadersSet.Vary;\n\n        err.headers = {\n          ...errHeadersSet,\n          ...headersSet,\n          ...{ vary: varyWithOrigin },\n        };\n        throw err;\n      }\n    } else {\n      // Preflight Request\n\n      // If there is no Access-Control-Request-Method header or if parsing failed,\n      // do not set any additional headers and terminate this set of steps.\n      // The request is outside the scope of this specification.\n      if (!ctx.get('Access-Control-Request-Method')) {\n        // this not preflight request, ignore it\n        return await next();\n      }\n\n      ctx.set('Access-Control-Allow-Origin', origin);\n\n      if (credentials === true) {\n        ctx.set('Access-Control-Allow-Credentials', 'true');\n      }\n\n      if (options.maxAge) {\n        ctx.set('Access-Control-Max-Age', options.maxAge);\n      }\n\n      if (options.privateNetworkAccess && ctx.get('Access-Control-Request-Private-Network')) {\n        ctx.set('Access-Control-Allow-Private-Network', 'true');\n      }\n\n      if (options.allowMethods) {\n        ctx.set('Access-Control-Allow-Methods', options.allowMethods);\n      }\n\n      if (options.secureContext) {\n        set('Cross-Origin-Opener-Policy', 'same-origin');\n        set('Cross-Origin-Embedder-Policy', 'require-corp');\n      }\n\n      let allowHeaders = options.allowHeaders;\n      if (!allowHeaders) {\n        allowHeaders = ctx.get('Access-Control-Request-Headers');\n      }\n      if (allowHeaders) {\n        ctx.set('Access-Control-Allow-Headers', allowHeaders);\n      }\n\n      ctx.status = 204;\n    }\n  };\n};\n", "{\n  \"name\": \"@koa/cors\",\n  \"version\": \"4.0.0\",\n  \"description\": \"Cross-Origin Resource Sharing(CORS) for koa\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"scripts\": {\n    \"contributor\": \"git-contributor\",\n    \"test\": \"NODE_ENV=test mocha --check-leaks -R spec -t 5000 test/*.test.js\",\n    \"test-cov\": \"NODE_ENV=test istanbul cover _mocha -- --check-leaks -t 5000 test/*.test.js\",\n    \"ci\": \"npm run lint && npm run test-cov\",\n    \"lint\": \"eslint index.js test\"\n  },\n  \"dependencies\": {\n    \"vary\": \"^1.1.2\"\n  },\n  \"devDependencies\": {\n    \"egg-ci\": \"^2.1.0\",\n    \"eslint\": \"^8.25.0\",\n    \"eslint-config-egg\": \"^12.0.0\",\n    \"git-contributor\": \"^1.0.10\",\n    \"istanbul\": \"*\",\n    \"koa\": \"^2.5.1\",\n    \"mocha\": \"^3.5.3\",\n    \"supertest\": \"^3.1.0\"\n  },\n  \"homepage\": \"https://github.com/koajs/cors\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/koajs/cors.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/koajs/cors/issues\"\n  },\n  \"keywords\": [\n    \"cors\",\n    \"koa-cors\",\n    \"Cross-Origin Resource Sharing\",\n    \"@koa/cors\",\n    \"koa\",\n    \"koajs\"\n  ],\n  \"engines\": {\n    \"node\": \">= 14.0.0\"\n  },\n  \"ci\": {\n    \"version\": \"14, 16, 18, 20\",\n    \"os\": \"linux\"\n  },\n  \"author\": \"fengmk2 <fengmk2@gmail.com> (http://github.com/fengmk2)\",\n  \"license\": \"MIT\"\n}\n", "const assert = require('assert');\nconst Koa = require('koa');\nconst request = require('supertest');\nconst cors = require('..');\n\ndescribe('cors.test.js', function() {\n  describe('default options', function() {\n    const app = new Koa();\n    app.use(cors());\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should set `Access-Control-Allow-Origin` to `*` when request Origin header missing', function(done) {\n      request(app.listen())\n        .get('/')\n        .expect({ foo: 'bar' })\n        .expect('access-control-allow-origin', '*')\n        .expect(200, done);\n    });\n\n    it('should set `Access-Control-Allow-Origin` to `*`', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Origin', '*')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n\n    it('should 204 on Preflight Request', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect('Access-Control-Allow-Origin', '*')\n        .expect('Access-Control-Allow-Methods', 'GET,HEAD,PUT,POST,DELETE,PATCH')\n        .expect(204, done);\n    });\n\n    it('should not Preflight Request if request missing Access-Control-Request-Method', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .expect(200, done);\n    });\n\n    it('should always set `Vary` to Origin', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Vary', 'Origin')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n  });\n\n  describe('options.origin=*', function() {\n    const app = new Koa();\n    app.use(cors({\n      origin: '*',\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should always set `Access-Control-Allow-Origin` to *', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Origin', '*')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n\n    it('should always set `Access-Control-Allow-Origin` to *, even if no Origin is passed on request', function(done) {\n      request(app.listen())\n        .get('/')\n        .expect('Access-Control-Allow-Origin', '*')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n  });\n\n  describe('options.origin set the request Origin header', function() {\n    const app = new Koa();\n    app.use(cors({\n      origin(ctx) {\n        return ctx.get('Origin') || '*';\n      },\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should set `Access-Control-Allow-Origin` to request `Origin` header', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n\n    it('should set `Access-Control-Allow-Origin` to request `origin` header', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('origin', 'http://origin.koajs.com')\n        .expect('Access-Control-Allow-Origin', 'http://origin.koajs.com')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n\n    it('should set `Access-Control-Allow-Origin` to `*`, even if no Origin is passed on request', function(done) {\n      request(app.listen())\n        .get('/')\n        .expect('Access-Control-Allow-Origin', '*')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n  });\n\n  describe('options.secureContext=true', function() {\n    const app = new Koa();\n    app.use(cors({\n      secureContext: true,\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should always set `Cross-Origin-Opener-Policy` & `Cross-Origin-Embedder-Policy` on not OPTIONS', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Cross-Origin-Opener-Policy', 'same-origin')\n        .expect('Cross-Origin-Embedder-Policy', 'require-corp')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n\n    it('should always set `Cross-Origin-Opener-Policy` & `Cross-Origin-Embedder-Policy` on OPTIONS', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect('Cross-Origin-Opener-Policy', 'same-origin')\n        .expect('Cross-Origin-Embedder-Policy', 'require-corp')\n        .expect(204, done);\n    });\n  });\n\n  describe('options.secureContext=false', function() {\n    const app = new Koa();\n    app.use(cors({\n      secureContext: false,\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should not set `Cross-Origin-Opener-Policy` & `Cross-Origin-Embedder-Policy`', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect(res => {\n          assert(!('Cross-Origin-Opener-Policy' in res.headers));\n          assert(!('Cross-Origin-Embedder-Policy' in res.headers));\n        })\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n  });\n\n  describe('options.origin=function', function() {\n    const app = new Koa();\n    app.use(cors({\n      origin(ctx) {\n        if (ctx.url === '/forbin') {\n          return false;\n        }\n        return '*';\n      },\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should disable cors', function(done) {\n      request(app.listen())\n        .get('/forbin')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect(200, function(err, res) {\n          assert(!err);\n          assert(!res.headers['access-control-allow-origin']);\n          done();\n        });\n    });\n\n    it('should set access-control-allow-origin to *', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect('Access-Control-Allow-Origin', '*')\n        .expect(200, done);\n    });\n  });\n\n  describe('options.origin=promise', function() {\n    const app = new Koa();\n    app.use(cors({\n      origin(ctx) {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            if (ctx.url === '/forbin') {\n              return resolve(false);\n            }\n            return resolve('*');\n          }, 100);\n        });\n      },\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should disable cors', function(done) {\n      request(app.listen())\n        .get('/forbin')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect(200, function(err, res) {\n          assert(!err);\n          assert(!res.headers['access-control-allow-origin']);\n          done();\n        });\n    });\n\n    it('should set access-control-allow-origin to *', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect('Access-Control-Allow-Origin', '*')\n        .expect(200, done);\n    });\n  });\n\n  describe('options.origin=async function', function() {\n    const app = new Koa();\n    app.use(cors({\n      async origin(ctx) {\n        if (ctx.url === '/forbin') {\n          return false;\n        }\n        return '*';\n      },\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should disable cors', function(done) {\n      request(app.listen())\n        .get('/forbin')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect(200, function(err, res) {\n          assert(!err);\n          assert(!res.headers['access-control-allow-origin']);\n          done();\n        });\n    });\n\n    it('should set access-control-allow-origin to *', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect('Access-Control-Allow-Origin', '*')\n        .expect(200, done);\n    });\n\n    it('behaves correctly when the return type is promise-like', function(done) {\n      class WrappedPromise {\n        constructor(...args) {\n          this.internalPromise = new Promise(...args);\n        }\n\n        then(onFulfilled) {\n          this.internalPromise.then(onFulfilled);\n        }\n      }\n\n      const app = new Koa()\n        .use(cors({\n          origin() {\n            return new WrappedPromise(resolve => {\n              return resolve('*');\n            });\n          },\n        }))\n        .use(function(ctx) {\n          ctx.body = { foo: 'bar' };\n        });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect('Access-Control-Allow-Origin', '*')\n        .expect(200, done);\n    });\n  });\n\n  describe('options.exposeHeaders', function() {\n    it('should Access-Control-Expose-Headers: `content-length`', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        exposeHeaders: 'content-length',\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Expose-Headers', 'content-length')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n\n    it('should work with array', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        exposeHeaders: [ 'content-length', 'x-header' ],\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Expose-Headers', 'content-length,x-header')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n  });\n\n  describe('options.maxAge', function() {\n    it('should set maxAge with number', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        maxAge: 3600,\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect('Access-Control-Max-Age', '3600')\n        .expect(204, done);\n    });\n\n    it('should set maxAge with string', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        maxAge: '3600',\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect('Access-Control-Max-Age', '3600')\n        .expect(204, done);\n    });\n\n    it('should not set maxAge on simple request', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        maxAge: '3600',\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect(200, function(err, res) {\n          assert(!err);\n          assert(!res.headers['access-control-max-age']);\n          done();\n        });\n    });\n  });\n\n  describe('options.credentials', function() {\n    const app = new Koa();\n    app.use(cors({\n      credentials: true,\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should enable Access-Control-Allow-Credentials on Simple request', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Credentials', 'true')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n\n    it('should enable Access-Control-Allow-Credentials on Preflight request', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'DELETE')\n        .expect('Access-Control-Allow-Credentials', 'true')\n        .expect(204, done);\n    });\n  });\n\n  describe('options.credentials unset', function() {\n    const app = new Koa();\n    app.use(cors());\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should disable Access-Control-Allow-Credentials on Simple request', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect(200)\n        .end(function(error, response) {\n          if (error) return done(error);\n\n          const header = response.headers['access-control-allow-credentials'];\n          assert.equal(header, undefined, 'Access-Control-Allow-Credentials must not be set.');\n          done();\n        });\n    });\n\n    it('should disable Access-Control-Allow-Credentials on Preflight request', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'DELETE')\n        .expect(204)\n        .end(function(error, response) {\n          if (error) return done(error);\n\n          const header = response.headers['access-control-allow-credentials'];\n          assert.equal(header, undefined, 'Access-Control-Allow-Credentials must not be set.');\n          done();\n        });\n    });\n  });\n\n  describe('options.credentials=function', function() {\n    const app = new Koa();\n    app.use(cors({\n      credentials(ctx) {\n        return ctx.url !== '/forbin';\n      },\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should enable Access-Control-Allow-Credentials on Simple request', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Credentials', 'true')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n\n    it('should enable Access-Control-Allow-Credentials on Preflight request', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'DELETE')\n        .expect('Access-Control-Allow-Credentials', 'true')\n        .expect(204, done);\n    });\n\n    it('should disable Access-Control-Allow-Credentials on Simple request', function(done) {\n      request(app.listen())\n        .get('/forbin')\n        .set('Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect(200)\n        .end(function(error, response) {\n          if (error) return done(error);\n\n          const header = response.headers['access-control-allow-credentials'];\n          assert.equal(header, undefined, 'Access-Control-Allow-Credentials must not be set.');\n          done();\n        });\n    });\n\n    it('should disable Access-Control-Allow-Credentials on Preflight request', function(done) {\n      request(app.listen())\n        .options('/forbin')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'DELETE')\n        .expect(204)\n        .end(function(error, response) {\n          if (error) return done(error);\n\n          const header = response.headers['access-control-allow-credentials'];\n          assert.equal(header, undefined, 'Access-Control-Allow-Credentials must not be set.');\n          done();\n        });\n    });\n  });\n\n  describe('options.credentials=async function', function() {\n    const app = new Koa();\n    app.use(cors({\n      async credentials() {\n        return true;\n      },\n    }));\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should enable Access-Control-Allow-Credentials on Simple request', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Credentials', 'true')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n\n    it('should enable Access-Control-Allow-Credentials on Preflight request', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'DELETE')\n        .expect('Access-Control-Allow-Credentials', 'true')\n        .expect(204, done);\n    });\n\n    it('behaves correctly when the return type is promise-like', function(done) {\n      class WrappedPromise {\n        constructor(...args) {\n          this.internalPromise = new Promise(...args);\n        }\n\n        then(onFulfilled) {\n          this.internalPromise.then(onFulfilled);\n        }\n      }\n\n      const app = new Koa()\n        .use(cors({\n          credentials() {\n            return new WrappedPromise(resolve => {\n              resolve(true);\n            });\n          },\n        }))\n        .use(function(ctx) {\n          ctx.body = { foo: 'bar' };\n        });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Credentials', 'true')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n  });\n\n  describe('options.allowHeaders', function() {\n    it('should work with allowHeaders is string', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        allowHeaders: 'X-PINGOTHER',\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect('Access-Control-Allow-Headers', 'X-PINGOTHER')\n        .expect(204, done);\n    });\n\n    it('should work with allowHeaders is array', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        allowHeaders: [ 'X-PINGOTHER' ],\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect('Access-Control-Allow-Headers', 'X-PINGOTHER')\n        .expect(204, done);\n    });\n\n    it('should set Access-Control-Allow-Headers to request access-control-request-headers header', function(done) {\n      const app = new Koa();\n      app.use(cors());\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .set('access-control-request-headers', 'X-PINGOTHER')\n        .expect('Access-Control-Allow-Headers', 'X-PINGOTHER')\n        .expect(204, done);\n    });\n  });\n\n  describe('options.allowMethods', function() {\n    it('should work with allowMethods is array', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        allowMethods: [ 'GET', 'POST' ],\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect('Access-Control-Allow-Methods', 'GET,POST')\n        .expect(204, done);\n    });\n\n    it('should skip allowMethods', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        allowMethods: null,\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n      });\n\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect(204, done);\n    });\n  });\n\n  describe('options.headersKeptOnError', function() {\n    it('should keep CORS headers after an error', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        origin(ctx) {\n          return ctx.get('Origin') || '*';\n        },\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n        throw new Error('Whoops!');\n      });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Origin', 'http://koajs.com')\n        .expect('Vary', 'Origin')\n        .expect(/Error/)\n        .expect(500, done);\n    });\n\n    it('should not affect OPTIONS requests', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        origin(ctx) {\n          return ctx.get('Origin') || '*';\n        },\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n        throw new Error('Whoops!');\n      });\n\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect('Access-Control-Allow-Origin', 'http://koajs.com')\n        .expect(204, done);\n    });\n\n    it('should not keep unrelated headers', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        origin(ctx) {\n          return ctx.get('Origin') || '*';\n        },\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n        ctx.set('X-Example', 'Value');\n        throw new Error('Whoops!');\n      });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Origin', 'http://koajs.com')\n        .expect(/Error/)\n        .expect(500, function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          assert(!res.headers['x-example']);\n          done();\n        });\n    });\n\n    it('should not keep CORS headers after an error if keepHeadersOnError is false', function(done) {\n      const app = new Koa();\n      app.use(cors({\n        keepHeadersOnError: false,\n      }));\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n        throw new Error('Whoops!');\n      });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect(/Error/)\n        .expect(500, function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          assert(!res.headers['access-control-allow-origin']);\n          assert(!res.headers.vary);\n          done();\n        });\n    });\n  });\n\n  describe('other middleware has been set `Vary` header to Accept-Encoding', function() {\n    const app = new Koa();\n    app.use(function(ctx, next) {\n      ctx.set('Vary', 'Accept-Encoding');\n      return next();\n    });\n\n    app.use(cors());\n\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should append `Vary` header to Origin', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Vary', 'Accept-Encoding, Origin')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n  });\n\n  describe('other middleware has set vary header on Error', function() {\n    it('should append `Origin to other `Vary` header', function(done) {\n      const app = new Koa();\n      app.use(cors());\n\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n        const error = new Error('Whoops!');\n        error.headers = { Vary: 'Accept-Encoding' };\n        throw error;\n      });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Vary', 'Accept-Encoding, Origin')\n        .expect(/Error/)\n        .expect(500, done);\n    });\n    it('should preserve `Vary: *`', function(done) {\n      const app = new Koa();\n      app.use(cors());\n\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n        const error = new Error('Whoops!');\n        error.headers = { Vary: '*' };\n        throw error;\n      });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Vary', '*')\n        .expect(/Error/)\n        .expect(500, done);\n    });\n    it('should not append Origin` if already present in `Vary`', function(done) {\n      const app = new Koa();\n      app.use(cors());\n\n      app.use(function(ctx) {\n        ctx.body = { foo: 'bar' };\n        const error = new Error('Whoops!');\n        error.headers = { Vary: 'Origin, Accept-Encoding' };\n        throw error;\n      });\n\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Vary', 'Origin, Accept-Encoding')\n        .expect(/Error/)\n        .expect(500, done);\n    });\n  });\n\n  describe('options.privateNetworkAccess=false', function() {\n    const app = new Koa();\n    app.use(cors({\n      privateNetworkAccess: false,\n    }));\n\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should not set `Access-Control-Allow-Private-Network` on not OPTIONS', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect(res => {\n          assert(!('Access-Control-Allow-Private-Network' in res.headers));\n        })\n        .expect(200, done);\n    });\n\n    it('should not set `Access-Control-Allow-Private-Network` if `Access-Control-Request-Private-Network` not exist on OPTIONS', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect(res => {\n          assert(!('Access-Control-Allow-Private-Network' in res.headers));\n        })\n        .expect(204, done);\n    });\n\n    it('should not set `Access-Control-Allow-Private-Network` if `Access-Control-Request-Private-Network` exist on OPTIONS', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .set('Access-Control-Request-Private-Network', 'true')\n        .expect(res => {\n          assert(!('Access-Control-Allow-Private-Network' in res.headers));\n        })\n        .expect(204, done);\n    });\n  });\n\n  describe('options.privateNetworkAccess=true', function() {\n    const app = new Koa();\n    app.use(cors({\n      privateNetworkAccess: true,\n    }));\n\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('should not set `Access-Control-Allow-Private-Network` on not OPTIONS', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect(res => {\n          assert(!('Access-Control-Allow-Private-Network' in res.headers));\n        })\n        .expect(200, done);\n    });\n\n    it('should not set `Access-Control-Allow-Private-Network` if `Access-Control-Request-Private-Network` not exist on OPTIONS', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .expect(res => {\n          assert(!('Access-Control-Allow-Private-Network' in res.headers));\n        })\n        .expect(204, done);\n    });\n\n    it('should always set `Access-Control-Allow-Private-Network` if `Access-Control-Request-Private-Network` exist on OPTIONS', function(done) {\n      request(app.listen())\n        .options('/')\n        .set('Origin', 'http://koajs.com')\n        .set('Access-Control-Request-Method', 'PUT')\n        .set('Access-Control-Request-Private-Network', 'true')\n        .expect('Access-Control-Allow-Private-Network', 'true')\n        .expect(204, done);\n    });\n  });\n\n  describe('options.origin=*, and options.credentials=true', function() {\n    const app = new Koa();\n    app.use(cors({\n      origin: '*',\n      credentials: true,\n    }));\n\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('Access-Control-Allow-Origin should be request.origin, and Access-Control-Allow-Credentials should be true', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Credentials', 'true')\n        .expect('Access-Control-Allow-Origin', 'http://koajs.com')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n  });\n\n  describe('options.origin=*, and options.credentials=false', function() {\n    const app = new Koa();\n    app.use(cors({\n      origin: '*',\n      credentials: false,\n    }));\n\n    app.use(function(ctx) {\n      ctx.body = { foo: 'bar' };\n    });\n\n    it('Access-Control-Allow-Origin should be *', function(done) {\n      request(app.listen())\n        .get('/')\n        .set('Origin', 'http://koajs.com')\n        .expect('Access-Control-Allow-Origin', '*')\n        .expect({ foo: 'bar' })\n        .expect(200, done);\n    });\n  });\n});\n"], "filenames": [".github/workflows/nodejs.yml", "README.md", "index.js", "package.json", "test/cors.test.js"], "buggy_code_start_loc": [15, 1, 1, 49, 1], "buggy_code_end_loc": [26, 57, 67, 50, 754], "fixing_code_start_loc": [14, 1, 0, 49, 0], "fixing_code_end_loc": [24, 70, 68, 50, 801], "type": "CWE-346", "message": "@koa/cors npm provides Cross-Origin Resource Sharing (CORS) for koa, a web framework for Node.js. Prior to version 5.0.0, the middleware operates in a way that if an allowed origin is not provided, it will return an `Access-Control-Allow-Origin` header with the value of the origin from the request. This behavior completely disables one of the most crucial elements of browsers - the Same Origin Policy (SOP), this could cause a very serious security threat to the users of this middleware. If such behavior is expected, for instance, when middleware is used exclusively for prototypes and not for production applications, it should be heavily emphasized in the documentation along with an indication of the risks associated with such behavior, as many users may not be aware of it. Version 5.0.0 fixes this vulnerability.", "other": {"cve": {"id": "CVE-2023-49803", "sourceIdentifier": "security-advisories@github.com", "published": "2023-12-11T23:15:07.620", "lastModified": "2023-12-14T20:03:24.677", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "@koa/cors npm provides Cross-Origin Resource Sharing (CORS) for koa, a web framework for Node.js. Prior to version 5.0.0, the middleware operates in a way that if an allowed origin is not provided, it will return an `Access-Control-Allow-Origin` header with the value of the origin from the request. This behavior completely disables one of the most crucial elements of browsers - the Same Origin Policy (SOP), this could cause a very serious security threat to the users of this middleware. If such behavior is expected, for instance, when middleware is used exclusively for prototypes and not for production applications, it should be heavily emphasized in the documentation along with an indication of the risks associated with such behavior, as many users may not be aware of it. Version 5.0.0 fixes this vulnerability."}, {"lang": "es", "value": "@koa/cors npm proporciona Cross-Origin Resource Sharing (CORS) para koa, un framework web para Node.js. Antes de la versi\u00f3n 5.0.0, el middleware funciona de manera que si no se proporciona un origen permitido, devolver\u00e1 un encabezado \"Access-Control-Allow-Origin\" con el valor del origen de la solicitud. Este comportamiento desactiva por completo uno de los elementos m\u00e1s importantes de los navegadores: la Pol\u00edtica del Mismo Origen (SOP), lo que podr\u00eda causar una amenaza de seguridad muy grave para los usuarios de este middleware. Si se espera tal comportamiento, por ejemplo, cuando el middleware se utiliza exclusivamente para prototipos y no para aplicaciones de producci\u00f3n, se debe enfatizar mucho en la documentaci\u00f3n junto con una indicaci\u00f3n de los riesgos asociados con dicho comportamiento, ya que es posible que muchos usuarios no lo sepan. La versi\u00f3n 5.0.0 corrige esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.0}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-346"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-346"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:koajs:cross-origin_resource_sharing_for_koa:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "5.0.0", "matchCriteriaId": "6F956DDB-4F42-4714-B81A-29394B3F5E3B"}]}]}], "references": [{"url": "https://github.com/koajs/cors/commit/f31dac99f5355c41e7d4dd3c4a80c5f154941a11", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/koajs/cors/security/advisories/GHSA-qxrj-hx23-xp82", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/koajs/cors/commit/f31dac99f5355c41e7d4dd3c4a80c5f154941a11"}}