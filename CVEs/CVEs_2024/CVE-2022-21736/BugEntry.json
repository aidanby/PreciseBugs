{"buggy_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <numeric>\n\n#include \"tensorflow/core/framework/dataset.h\"\n#include \"tensorflow/core/framework/partial_tensor_shape.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/util/sparse/sparse_tensor.h\"\n\nnamespace tensorflow {\nnamespace data {\nnamespace {\n\n// See documentation in ../../ops/dataset_ops.cc for a high-level\n// description of the following op.\n\ntemplate <typename T>\nclass Dataset : public DatasetBase {\n public:\n  explicit Dataset(OpKernelContext* ctx,\n                   const sparse::SparseTensor& sparse_tensor)\n      : DatasetBase(DatasetContext(ctx)),\n        sparse_tensor_(sparse_tensor),\n        dtypes_({DT_INT64, sparse_tensor.dtype(), DT_INT64}),\n        shapes_({{-1, sparse_tensor.dims() - 1},\n                 {-1},\n                 {sparse_tensor.dims() - 1}}) {}\n\n  std::unique_ptr<IteratorBase> MakeIteratorInternal(\n      const string& prefix) const override {\n    return absl::make_unique<Iterator>(typename Iterator::Params{\n        this, strings::StrCat(prefix, \"::SparseTensorSlice\")});\n  }\n\n  const DataTypeVector& output_dtypes() const override { return dtypes_; }\n  const std::vector<PartialTensorShape>& output_shapes() const override {\n    return shapes_;\n  }\n\n  string DebugString() const override {\n    return \"SparseTensorSliceDatasetOp::Dataset\";\n  }\n\n  int64_t CardinalityInternal() const override {\n    return sparse_tensor_.shape()[0];\n  }\n\n  Status InputDatasets(std::vector<const DatasetBase*>* inputs) const override {\n    return Status::OK();\n  }\n\n  Status CheckExternalState() const override { return Status::OK(); }\n\n protected:\n  Status AsGraphDefInternal(SerializationContext* ctx,\n                            DatasetGraphDefBuilder* b,\n                            Node** output) const override {\n    Node* indices_node;\n    TF_RETURN_IF_ERROR(b->AddTensor(sparse_tensor_.indices(), &indices_node));\n    Node* value_node;\n    TF_RETURN_IF_ERROR(b->AddTensor(sparse_tensor_.values(), &value_node));\n    Node* dense_shape_node;\n    std::vector<int64_t> dense_shape;\n    dense_shape.reserve(sparse_tensor_.shape().size());\n    for (int i = 0; i < sparse_tensor_.shape().size(); i++)\n      dense_shape.emplace_back(sparse_tensor_.shape()[i]);\n    TF_RETURN_IF_ERROR(b->AddVector(dense_shape, &dense_shape_node));\n    AttrValue val_dtype;\n    b->BuildAttrValue(sparse_tensor_.dtype(), &val_dtype);\n    TF_RETURN_IF_ERROR(\n        b->AddDataset(this, {indices_node, value_node, dense_shape_node},\n                      {{\"Tvalues\", val_dtype}}, output));\n    return Status::OK();\n  }\n\n private:\n  class Iterator : public DatasetIterator<Dataset<T>> {\n   public:\n    explicit Iterator(const typename Iterator::Params& params)\n        : DatasetIterator<Dataset<T>>(params),\n          num_elements_(params.dataset->sparse_tensor_.shape()[0]),\n          dense_shape_(DT_INT64, {params.dataset->sparse_tensor_.dims() - 1}),\n          group_iterable_(params.dataset->sparse_tensor_.group({0})),\n          iter_(group_iterable_.begin()) {\n      for (size_t i = 0; i < dense_shape_.NumElements(); ++i) {\n        dense_shape_.vec<int64_t>()(i) =\n            params.dataset->sparse_tensor_.shape()[i + 1];\n      }\n    }\n\n    Status GetNextInternal(IteratorContext* ctx,\n                           std::vector<Tensor>* out_tensors,\n                           bool* end_of_sequence) override {\n      mutex_lock l(mu_);\n      if (i_ == num_elements_) {\n        *end_of_sequence = true;\n        return Status::OK();\n      }\n\n      out_tensors->clear();\n      out_tensors->reserve(3);\n      const int rank = Iterator::dataset()->sparse_tensor_.dims();\n\n      if (i_ > next_non_empty_i_ && iter_ != group_iterable_.end()) {\n        // We still have elements to consume from `group_iterable_`\n        // and we have emitted all elements up to and including the\n        // current position.\n        sparse::Group group = *iter_;\n        const auto indices = group.indices();\n        const auto values = group.values<T>();\n        const int64_t num_entries = values.size();\n        next_non_empty_i_ = indices(0, 0);\n\n        next_indices_ = Tensor(DT_INT64, {num_entries, rank - 1});\n        next_values_ = Tensor(DataTypeToEnum<T>::value, {num_entries});\n\n        auto next_indices_t = next_indices_.matrix<int64_t>();\n        auto next_values_t = next_values_.vec<T>();\n\n        for (int64_t i = 0; i < num_entries; ++i) {\n          for (int d = 1; d < rank; ++d) {\n            next_indices_t(i, d - 1) = indices(i, d);\n          }\n          next_values_t(i) = values(i);\n        }\n\n        ++iter_;\n      }\n      if (i_ == next_non_empty_i_) {\n        // The current position is non-empty in the input\n        // `SparseTensor`, and we have already read the value from the\n        // `GroupIterable`.\n        out_tensors->push_back(std::move(next_indices_));\n        out_tensors->push_back(std::move(next_values_));\n        out_tensors->push_back(dense_shape_);\n        next_non_empty_i_ = kNextNonEmptyUnknown;\n      } else {\n        DCHECK(i_ < next_non_empty_i_ || iter_ == group_iterable_.end());\n        // The current position is empty in the input `SparseTensor`,\n        // so emit empty indices and values.\n        out_tensors->push_back(Tensor(DT_INT64, TensorShape({0, rank - 1})));\n        out_tensors->push_back(Tensor(DataTypeToEnum<T>::value, {0}));\n        out_tensors->push_back(dense_shape_);\n      }\n\n      ++i_;\n      *end_of_sequence = false;\n      return Status::OK();\n    }\n\n   protected:\n    std::shared_ptr<model::Node> CreateNode(\n        IteratorContext* ctx, model::Node::Args args) const override {\n      return model::MakeSourceNode(std::move(args));\n    }\n\n    Status SaveInternal(SerializationContext* ctx,\n                        IteratorStateWriter* writer) override {\n      mutex_lock l(mu_);\n      TF_RETURN_IF_ERROR(writer->WriteScalar(Iterator::full_name(\"i\"), i_));\n      TF_RETURN_IF_ERROR(\n          writer->WriteScalar(Iterator::full_name(\"iter_loc\"), iter_.loc()));\n      TF_RETURN_IF_ERROR(writer->WriteScalar(\n          Iterator::full_name(\"next_non_empty_i_\"), next_non_empty_i_));\n      if (i_ <= next_non_empty_i_) {\n        TF_RETURN_IF_ERROR(writer->WriteTensor(\n            Iterator::full_name(\"next_indices_\"), next_indices_));\n        TF_RETURN_IF_ERROR(writer->WriteTensor(\n            Iterator::full_name(\"next_values_\"), next_values_));\n      }\n      return Status::OK();\n    }\n\n    Status RestoreInternal(IteratorContext* ctx,\n                           IteratorStateReader* reader) override {\n      mutex_lock l(mu_);\n      TF_RETURN_IF_ERROR(reader->ReadScalar(Iterator::full_name(\"i\"), &i_));\n      int64_t iter_loc;\n      TF_RETURN_IF_ERROR(\n          reader->ReadScalar(Iterator::full_name(\"iter_loc\"), &iter_loc));\n      iter_ = group_iterable_.at(iter_loc);\n      TF_RETURN_IF_ERROR(reader->ReadScalar(\n          Iterator::full_name(\"next_non_empty_i_\"), &next_non_empty_i_));\n      if (i_ <= next_non_empty_i_) {\n        TF_RETURN_IF_ERROR(reader->ReadTensor(\n            Iterator::full_name(\"next_indices_\"), &next_indices_));\n        TF_RETURN_IF_ERROR(reader->ReadTensor(\n            Iterator::full_name(\"next_values_\"), &next_values_));\n      }\n      return Status::OK();\n    }\n\n   private:\n    const int64_t num_elements_;\n\n    Tensor dense_shape_;\n\n    mutex mu_;\n    sparse::GroupIterable group_iterable_ TF_GUARDED_BY(mu_);\n    sparse::GroupIterable::IteratorStep iter_ TF_GUARDED_BY(mu_);\n    int64_t i_ TF_GUARDED_BY(mu_) = 0;\n    const int64_t kNextNonEmptyUnknown = -1;\n    int64_t next_non_empty_i_ TF_GUARDED_BY(mu_) = kNextNonEmptyUnknown;\n    Tensor next_indices_ TF_GUARDED_BY(mu_);\n    Tensor next_values_ TF_GUARDED_BY(mu_);\n  };\n\n  const sparse::SparseTensor sparse_tensor_;\n  const DataTypeVector dtypes_;\n  const std::vector<PartialTensorShape> shapes_;\n};\n\ntemplate <typename T>\nclass SparseTensorSliceDatasetOp : public DatasetOpKernel {\n public:\n  explicit SparseTensorSliceDatasetOp(OpKernelConstruction* ctx)\n      : DatasetOpKernel(ctx) {}\n\n  void MakeDataset(OpKernelContext* ctx, DatasetBase** output) override {\n    // Create a new SparseTensorSliceDatasetOp::Dataset, insert it in\n    // the step container, and return it as the output.\n    const Tensor* indices;\n    OP_REQUIRES_OK(ctx, ctx->input(\"indices\", &indices));\n    const Tensor* values;\n    OP_REQUIRES_OK(ctx, ctx->input(\"values\", &values));\n    const Tensor* dense_shape;\n    OP_REQUIRES_OK(ctx, ctx->input(\"dense_shape\", &dense_shape));\n\n    OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(indices->shape()),\n                errors::InvalidArgument(\n                    \"Input indices should be a matrix but received shape \",\n                    indices->shape().DebugString()));\n\n    const auto num_indices = indices->NumElements();\n    const auto num_values = values->NumElements();\n    if (num_indices == 0 || num_values == 0) {\n      OP_REQUIRES(ctx, num_indices == num_values,\n                  errors::InvalidArgument(\n                      \"If indices or values are empty, the other one must also \"\n                      \"be. Got indices of shape \",\n                      indices->shape().DebugString(), \" and values of shape \",\n                      values->shape().DebugString()));\n    }\n    OP_REQUIRES(ctx, TensorShapeUtils::IsVector(values->shape()),\n                errors::InvalidArgument(\n                    \"Input values should be a vector but received shape \",\n                    indices->shape().DebugString()));\n    OP_REQUIRES(ctx, TensorShapeUtils::IsVector(dense_shape->shape()),\n                errors::InvalidArgument(\n                    \"Input shape should be a vector but received shape \",\n                    dense_shape->shape().DebugString()));\n\n    // We currently ensure that `sparse_tensor` is ordered in the\n    // batch dimension.\n    // TODO(mrry): Investigate ways to avoid this unconditional check\n    // if we can be sure that the sparse tensor was produced in an\n    // appropriate order (e.g. by `tf.parse_example()` or a Dataset\n    // that batches elements into rows of a SparseTensor).\n    int64_t previous_batch_index = -1;\n    for (int64_t i = 0; i < indices->dim_size(0); ++i) {\n      int64_t next_batch_index = indices->matrix<int64_t>()(i, 0);\n      OP_REQUIRES(\n          ctx, next_batch_index >= previous_batch_index,\n          errors::Unimplemented(\"The SparseTensor must be ordered in the batch \"\n                                \"dimension; handling arbitrarily ordered input \"\n                                \"is not currently supported.\"));\n      previous_batch_index = next_batch_index;\n    }\n    gtl::InlinedVector<int64_t, 8> std_order(dense_shape->NumElements(), 0);\n    sparse::SparseTensor tensor;\n    OP_REQUIRES_OK(\n        ctx, sparse::SparseTensor::Create(\n                 *indices, *values, TensorShape(dense_shape->vec<int64_t>()),\n                 std_order, &tensor));\n    *output = new Dataset<T>(ctx, std::move(tensor));\n  }\n\n private:\n};\n\n#define REGISTER_DATASET_KERNEL(type)                           \\\n  REGISTER_KERNEL_BUILDER(Name(\"SparseTensorSliceDataset\")      \\\n                              .Device(DEVICE_CPU)               \\\n                              .TypeConstraint<type>(\"Tvalues\"), \\\n                          SparseTensorSliceDatasetOp<type>);\n\nTF_CALL_DATASET_TYPES(REGISTER_DATASET_KERNEL);\n#undef REGISTER_DATASET_KERNEL\n\n}  // namespace\n}  // namespace data\n}  // namespace tensorflow\n", "# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for `tf.data.Dataset.from_sparse_tensor_slices()`.\"\"\"\nfrom absl.testing import parameterized\nimport numpy as np\n\nfrom tensorflow.python.data.kernel_tests import checkpoint_test_base\nfrom tensorflow.python.data.kernel_tests import test_base\nfrom tensorflow.python.data.ops import dataset_ops\nfrom tensorflow.python.framework import combinations\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import sparse_tensor\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.platform import test\n\n\nclass FromSparseTensorSlicesTest(test_base.DatasetTestBase,\n                                 parameterized.TestCase):\n\n  @combinations.generate(\n      combinations.times(\n          combinations.combine(tf_api_version=1, mode=[\"graph\"]),\n          combinations.combine(slices=[[\n              [1., 2., 3.], [1.], [1.], [1., 2.], [], [1., 2.], [], [], []\n          ], [[1., 2.], [], [1., 2.], [1.], [1., 2.], [], [1., 2.]]])))\n  def testFromSparseTensorSlices(self, slices):\n    \"\"\"Test a dataset based on slices of a `tf.sparse.SparseTensor`.\"\"\"\n    st = array_ops.sparse_placeholder(dtypes.float64)\n    iterator = dataset_ops.make_initializable_iterator(\n        dataset_ops.Dataset.from_sparse_tensor_slices(st))\n    init_op = iterator.initializer\n    get_next = sparse_tensor.SparseTensor(*iterator.get_next())\n\n    with self.cached_session() as sess:\n      # Test with sparse tensor in the appropriate order.\n      # pylint: disable=g-complex-comprehension\n      indices = np.array(\n          [[i, j] for i in range(len(slices)) for j in range(len(slices[i]))])\n      values = np.array([val for s in slices for val in s])\n      # pylint: enable=g-complex-comprehension\n      dense_shape = np.array([len(slices), max(len(s) for s in slices) + 1])\n      sparse_feed = sparse_tensor.SparseTensorValue(indices, values,\n                                                    dense_shape)\n      sess.run(init_op, feed_dict={st: sparse_feed})\n      for i, s in enumerate(slices):\n        results = sess.run(get_next)\n        self.assertAllEqual(s, results.values)\n        expected_indices = np.array(\n            [[j] for j in range(len(slices[i]))]).reshape([-1, 1])\n        self.assertAllEqual(expected_indices, results.indices)\n        self.assertAllEqual(dense_shape[1:], results.dense_shape)\n      with self.assertRaises(errors.OutOfRangeError):\n        sess.run(get_next)\n\n  @combinations.generate(\n      combinations.times(\n          combinations.combine(tf_api_version=1, mode=[\"graph\"]),\n          combinations.combine(slices=[[\n              [1., 2., 3.], [1.], [1.], [1., 2.], [], [1., 2.], [], [], []\n          ], [[1., 2.], [], [1., 2.], [1.], [1., 2.], [], [1., 2.]]])))\n  def testFromSparseTensorSlicesInReverse(self, slices):\n    \"\"\"Test a dataset based on slices of a `tf.sparse.SparseTensor` in reverse order.\"\"\"\n    st = array_ops.sparse_placeholder(dtypes.float64)\n    iterator = dataset_ops.make_initializable_iterator(\n        dataset_ops.Dataset.from_sparse_tensor_slices(st))\n    init_op = iterator.initializer\n\n    with self.cached_session() as sess:\n      # pylint: disable=g-complex-comprehension\n      indices = np.array(\n          [[i, j] for i in range(len(slices)) for j in range(len(slices[i]))])\n      values = np.array([val for s in slices for val in s])\n      # pylint: enable=g-complex-comprehension\n      dense_shape = np.array([len(slices), max(len(s) for s in slices) + 1])\n      # Test with sparse tensor in the reverse order, which is not\n      # currently supported.\n      reverse_order_indices = indices[::-1, :]\n      reverse_order_values = values[::-1]\n      sparse_feed = sparse_tensor.SparseTensorValue(\n          reverse_order_indices, reverse_order_values, dense_shape)\n      with self.assertRaises(errors.UnimplementedError):\n        sess.run(init_op, feed_dict={st: sparse_feed})\n\n  @combinations.generate(combinations.combine(tf_api_version=1, mode=[\"graph\"]))\n  def testEmptySparseTensorSlices(self):\n    \"\"\"Test a dataset based on slices of an empty `tf.sparse.SparseTensor`.\"\"\"\n    st = array_ops.sparse_placeholder(dtypes.float64)\n    iterator = dataset_ops.make_initializable_iterator(\n        dataset_ops.Dataset.from_sparse_tensor_slices(st))\n    init_op = iterator.initializer\n    get_next = sparse_tensor.SparseTensor(*iterator.get_next())\n\n    with self.cached_session() as sess:\n      # Test with an empty sparse tensor.\n      empty_indices = np.empty((0, 4), dtype=np.int64)\n      empty_values = np.empty((0,), dtype=np.float64)\n      empty_dense_shape = [0, 4, 37, 9]\n      sparse_feed = sparse_tensor.SparseTensorValue(empty_indices, empty_values,\n                                                    empty_dense_shape)\n      sess.run(init_op, feed_dict={st: sparse_feed})\n      with self.assertRaises(errors.OutOfRangeError):\n        sess.run(get_next)\n\n  @combinations.generate(combinations.combine(tf_api_version=1, mode=[\"graph\"]))\n  def testEmptySparseTensorSlicesInvalid(self):\n    \"\"\"Test a dataset based on invalid `tf.sparse.SparseTensor`.\"\"\"\n    st = array_ops.sparse_placeholder(dtypes.float64)\n    iterator = dataset_ops.make_initializable_iterator(\n        dataset_ops.Dataset.from_sparse_tensor_slices(st))\n    init_op = iterator.initializer\n\n    with self.cached_session() as sess:\n      # Test with an empty sparse tensor but with non empty values.\n      empty_indices = np.empty((0, 4), dtype=np.int64)\n      non_empty_values = [1, 2, 3, 4]\n      empty_dense_shape = [0, 4, 37, 9]\n      sparse_feed = sparse_tensor.SparseTensorValue(empty_indices,\n                                                    non_empty_values,\n                                                    empty_dense_shape)\n      # Here, we expect the test to fail when running the feed.\n      with self.assertRaises(errors.InvalidArgumentError):\n        sess.run(init_op, feed_dict={st: sparse_feed})\n\n  @combinations.generate(combinations.combine(tf_api_version=2, mode=[\"eager\"]))\n  def testFromSparseTensorSlicesError(self):\n    with self.assertRaises(AttributeError):\n      dataset_ops.Dataset.from_sparse_tensor_slices(None)\n\n\nclass FromSparseTensorSlicesCheckpointTest(\n    checkpoint_test_base.CheckpointTestBase, parameterized.TestCase):\n\n  def _build_sparse_tensor_slice_dataset(self, slices):\n    # pylint: disable=g-complex-comprehension\n    indices = np.array(\n        [[i, j] for i in range(len(slices)) for j in range(len(slices[i]))],\n        dtype=np.int64)\n    values = np.array([val for s in slices for val in s], dtype=np.float64)\n    # pylint: enable=g-complex-comprehension\n    dense_shape = np.array(\n        [len(slices), max(len(s) for s in slices) + 1], dtype=np.int64)\n    sparse_components = sparse_tensor.SparseTensor(indices, values, dense_shape)\n    return dataset_ops.Dataset.from_sparse_tensor_slices(sparse_components)\n\n  @combinations.generate(\n      combinations.times(test_base.v1_only_combinations(),\n                         checkpoint_test_base.default_test_combinations()))\n  def test(self, verify_fn):\n    slices = [[1., 2., 3.], [1.], [1.], [1., 2.], [], [1., 2.], [], [], []]\n\n    verify_fn(\n        self,\n        lambda: self._build_sparse_tensor_slice_dataset(slices),\n        num_outputs=9,\n        sparse_tensors=True)\n\n\nif __name__ == \"__main__\":\n  test.main()\n"], "fixing_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <numeric>\n\n#include \"tensorflow/core/framework/dataset.h\"\n#include \"tensorflow/core/framework/partial_tensor_shape.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/util/sparse/sparse_tensor.h\"\n\nnamespace tensorflow {\nnamespace data {\nnamespace {\n\n// See documentation in ../../ops/dataset_ops.cc for a high-level\n// description of the following op.\n\ntemplate <typename T>\nclass Dataset : public DatasetBase {\n public:\n  explicit Dataset(OpKernelContext* ctx,\n                   const sparse::SparseTensor& sparse_tensor)\n      : DatasetBase(DatasetContext(ctx)),\n        sparse_tensor_(sparse_tensor),\n        dtypes_({DT_INT64, sparse_tensor.dtype(), DT_INT64}),\n        shapes_({{-1, sparse_tensor.dims() - 1},\n                 {-1},\n                 {sparse_tensor.dims() - 1}}) {}\n\n  std::unique_ptr<IteratorBase> MakeIteratorInternal(\n      const string& prefix) const override {\n    return absl::make_unique<Iterator>(typename Iterator::Params{\n        this, strings::StrCat(prefix, \"::SparseTensorSlice\")});\n  }\n\n  const DataTypeVector& output_dtypes() const override { return dtypes_; }\n  const std::vector<PartialTensorShape>& output_shapes() const override {\n    return shapes_;\n  }\n\n  string DebugString() const override {\n    return \"SparseTensorSliceDatasetOp::Dataset\";\n  }\n\n  int64_t CardinalityInternal() const override {\n    return sparse_tensor_.shape()[0];\n  }\n\n  Status InputDatasets(std::vector<const DatasetBase*>* inputs) const override {\n    return Status::OK();\n  }\n\n  Status CheckExternalState() const override { return Status::OK(); }\n\n protected:\n  Status AsGraphDefInternal(SerializationContext* ctx,\n                            DatasetGraphDefBuilder* b,\n                            Node** output) const override {\n    Node* indices_node;\n    TF_RETURN_IF_ERROR(b->AddTensor(sparse_tensor_.indices(), &indices_node));\n    Node* value_node;\n    TF_RETURN_IF_ERROR(b->AddTensor(sparse_tensor_.values(), &value_node));\n    Node* dense_shape_node;\n    std::vector<int64_t> dense_shape;\n    dense_shape.reserve(sparse_tensor_.shape().size());\n    for (int i = 0; i < sparse_tensor_.shape().size(); i++)\n      dense_shape.emplace_back(sparse_tensor_.shape()[i]);\n    TF_RETURN_IF_ERROR(b->AddVector(dense_shape, &dense_shape_node));\n    AttrValue val_dtype;\n    b->BuildAttrValue(sparse_tensor_.dtype(), &val_dtype);\n    TF_RETURN_IF_ERROR(\n        b->AddDataset(this, {indices_node, value_node, dense_shape_node},\n                      {{\"Tvalues\", val_dtype}}, output));\n    return Status::OK();\n  }\n\n private:\n  class Iterator : public DatasetIterator<Dataset<T>> {\n   public:\n    explicit Iterator(const typename Iterator::Params& params)\n        : DatasetIterator<Dataset<T>>(params),\n          num_elements_(params.dataset->sparse_tensor_.shape()[0]),\n          dense_shape_(DT_INT64, {params.dataset->sparse_tensor_.dims() - 1}),\n          group_iterable_(params.dataset->sparse_tensor_.group({0})),\n          iter_(group_iterable_.begin()) {\n      for (size_t i = 0; i < dense_shape_.NumElements(); ++i) {\n        dense_shape_.vec<int64_t>()(i) =\n            params.dataset->sparse_tensor_.shape()[i + 1];\n      }\n    }\n\n    Status GetNextInternal(IteratorContext* ctx,\n                           std::vector<Tensor>* out_tensors,\n                           bool* end_of_sequence) override {\n      mutex_lock l(mu_);\n      if (i_ == num_elements_) {\n        *end_of_sequence = true;\n        return Status::OK();\n      }\n\n      out_tensors->clear();\n      out_tensors->reserve(3);\n      const int rank = Iterator::dataset()->sparse_tensor_.dims();\n\n      if (i_ > next_non_empty_i_ && iter_ != group_iterable_.end()) {\n        // We still have elements to consume from `group_iterable_`\n        // and we have emitted all elements up to and including the\n        // current position.\n        sparse::Group group = *iter_;\n        const auto indices = group.indices();\n        const auto values = group.values<T>();\n        const int64_t num_entries = values.size();\n        next_non_empty_i_ = indices(0, 0);\n\n        next_indices_ = Tensor(DT_INT64, {num_entries, rank - 1});\n        next_values_ = Tensor(DataTypeToEnum<T>::value, {num_entries});\n\n        auto next_indices_t = next_indices_.matrix<int64_t>();\n        auto next_values_t = next_values_.vec<T>();\n\n        for (int64_t i = 0; i < num_entries; ++i) {\n          for (int d = 1; d < rank; ++d) {\n            next_indices_t(i, d - 1) = indices(i, d);\n          }\n          next_values_t(i) = values(i);\n        }\n\n        ++iter_;\n      }\n      if (i_ == next_non_empty_i_) {\n        // The current position is non-empty in the input\n        // `SparseTensor`, and we have already read the value from the\n        // `GroupIterable`.\n        out_tensors->push_back(std::move(next_indices_));\n        out_tensors->push_back(std::move(next_values_));\n        out_tensors->push_back(dense_shape_);\n        next_non_empty_i_ = kNextNonEmptyUnknown;\n      } else {\n        DCHECK(i_ < next_non_empty_i_ || iter_ == group_iterable_.end());\n        // The current position is empty in the input `SparseTensor`,\n        // so emit empty indices and values.\n        out_tensors->push_back(Tensor(DT_INT64, TensorShape({0, rank - 1})));\n        out_tensors->push_back(Tensor(DataTypeToEnum<T>::value, {0}));\n        out_tensors->push_back(dense_shape_);\n      }\n\n      ++i_;\n      *end_of_sequence = false;\n      return Status::OK();\n    }\n\n   protected:\n    std::shared_ptr<model::Node> CreateNode(\n        IteratorContext* ctx, model::Node::Args args) const override {\n      return model::MakeSourceNode(std::move(args));\n    }\n\n    Status SaveInternal(SerializationContext* ctx,\n                        IteratorStateWriter* writer) override {\n      mutex_lock l(mu_);\n      TF_RETURN_IF_ERROR(writer->WriteScalar(Iterator::full_name(\"i\"), i_));\n      TF_RETURN_IF_ERROR(\n          writer->WriteScalar(Iterator::full_name(\"iter_loc\"), iter_.loc()));\n      TF_RETURN_IF_ERROR(writer->WriteScalar(\n          Iterator::full_name(\"next_non_empty_i_\"), next_non_empty_i_));\n      if (i_ <= next_non_empty_i_) {\n        TF_RETURN_IF_ERROR(writer->WriteTensor(\n            Iterator::full_name(\"next_indices_\"), next_indices_));\n        TF_RETURN_IF_ERROR(writer->WriteTensor(\n            Iterator::full_name(\"next_values_\"), next_values_));\n      }\n      return Status::OK();\n    }\n\n    Status RestoreInternal(IteratorContext* ctx,\n                           IteratorStateReader* reader) override {\n      mutex_lock l(mu_);\n      TF_RETURN_IF_ERROR(reader->ReadScalar(Iterator::full_name(\"i\"), &i_));\n      int64_t iter_loc;\n      TF_RETURN_IF_ERROR(\n          reader->ReadScalar(Iterator::full_name(\"iter_loc\"), &iter_loc));\n      iter_ = group_iterable_.at(iter_loc);\n      TF_RETURN_IF_ERROR(reader->ReadScalar(\n          Iterator::full_name(\"next_non_empty_i_\"), &next_non_empty_i_));\n      if (i_ <= next_non_empty_i_) {\n        TF_RETURN_IF_ERROR(reader->ReadTensor(\n            Iterator::full_name(\"next_indices_\"), &next_indices_));\n        TF_RETURN_IF_ERROR(reader->ReadTensor(\n            Iterator::full_name(\"next_values_\"), &next_values_));\n      }\n      return Status::OK();\n    }\n\n   private:\n    const int64_t num_elements_;\n\n    Tensor dense_shape_;\n\n    mutex mu_;\n    sparse::GroupIterable group_iterable_ TF_GUARDED_BY(mu_);\n    sparse::GroupIterable::IteratorStep iter_ TF_GUARDED_BY(mu_);\n    int64_t i_ TF_GUARDED_BY(mu_) = 0;\n    const int64_t kNextNonEmptyUnknown = -1;\n    int64_t next_non_empty_i_ TF_GUARDED_BY(mu_) = kNextNonEmptyUnknown;\n    Tensor next_indices_ TF_GUARDED_BY(mu_);\n    Tensor next_values_ TF_GUARDED_BY(mu_);\n  };\n\n  const sparse::SparseTensor sparse_tensor_;\n  const DataTypeVector dtypes_;\n  const std::vector<PartialTensorShape> shapes_;\n};\n\ntemplate <typename T>\nclass SparseTensorSliceDatasetOp : public DatasetOpKernel {\n public:\n  explicit SparseTensorSliceDatasetOp(OpKernelConstruction* ctx)\n      : DatasetOpKernel(ctx) {}\n\n  void MakeDataset(OpKernelContext* ctx, DatasetBase** output) override {\n    // Create a new SparseTensorSliceDatasetOp::Dataset, insert it in\n    // the step container, and return it as the output.\n    const Tensor* indices;\n    OP_REQUIRES_OK(ctx, ctx->input(\"indices\", &indices));\n    const Tensor* values;\n    OP_REQUIRES_OK(ctx, ctx->input(\"values\", &values));\n    const Tensor* dense_shape;\n    OP_REQUIRES_OK(ctx, ctx->input(\"dense_shape\", &dense_shape));\n\n    OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(indices->shape()),\n                errors::InvalidArgument(\"Input indices must be a matrix. Got: \",\n                                        indices->shape().DebugString()));\n    OP_REQUIRES(ctx, TensorShapeUtils::IsVector(values->shape()),\n                errors::InvalidArgument(\"Input values must be a vector. Got: \",\n                                        values->shape().DebugString()));\n    OP_REQUIRES(ctx, TensorShapeUtils::IsVector(dense_shape->shape()),\n                errors::InvalidArgument(\"Input shape must be a vector. Got: \",\n                                        dense_shape->shape().DebugString()));\n    OP_REQUIRES(\n        ctx, values->shape().dim_size(0) == indices->shape().dim_size(0),\n        errors::InvalidArgument(\n            \"Number of values must match first dimension of indices. \", \"Got \",\n            values->shape().dim_size(0),\n            \" values, indices shape: \", indices->shape().DebugString()));\n    OP_REQUIRES(\n        ctx, dense_shape->shape().dim_size(0) == indices->shape().dim_size(1),\n        errors::InvalidArgument(\n            \"Number of dimensions must match second dimension of indices. \",\n            \"Got \", dense_shape->shape().dim_size(0),\n            \" dimensions, indices shape: \", indices->shape().DebugString()));\n    OP_REQUIRES(ctx, dense_shape->NumElements() > 0,\n                errors::InvalidArgument(\n                    \"The shape argument requires at least one element.\"));\n\n    // We currently ensure that `sparse_tensor` is ordered in the\n    // batch dimension.\n    // TODO(mrry): Investigate ways to avoid this unconditional check\n    // if we can be sure that the sparse tensor was produced in an\n    // appropriate order (e.g. by `tf.parse_example()` or a Dataset\n    // that batches elements into rows of a SparseTensor).\n    int64_t previous_batch_index = -1;\n    for (int64_t i = 0; i < indices->dim_size(0); ++i) {\n      int64_t next_batch_index = indices->matrix<int64_t>()(i, 0);\n      OP_REQUIRES(\n          ctx, next_batch_index >= previous_batch_index,\n          errors::Unimplemented(\"The SparseTensor must be ordered in the batch \"\n                                \"dimension; handling arbitrarily ordered input \"\n                                \"is not currently supported.\"));\n      previous_batch_index = next_batch_index;\n    }\n    gtl::InlinedVector<int64_t, 8> std_order(dense_shape->NumElements(), 0);\n    sparse::SparseTensor tensor;\n    OP_REQUIRES_OK(\n        ctx, sparse::SparseTensor::Create(\n                 *indices, *values, TensorShape(dense_shape->vec<int64_t>()),\n                 std_order, &tensor));\n    *output = new Dataset<T>(ctx, std::move(tensor));\n  }\n\n private:\n};\n\n#define REGISTER_DATASET_KERNEL(type)                           \\\n  REGISTER_KERNEL_BUILDER(Name(\"SparseTensorSliceDataset\")      \\\n                              .Device(DEVICE_CPU)               \\\n                              .TypeConstraint<type>(\"Tvalues\"), \\\n                          SparseTensorSliceDatasetOp<type>);\n\nTF_CALL_DATASET_TYPES(REGISTER_DATASET_KERNEL);\n#undef REGISTER_DATASET_KERNEL\n\n}  // namespace\n}  // namespace data\n}  // namespace tensorflow\n", "# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for `tf.data.Dataset.from_sparse_tensor_slices()`.\"\"\"\nfrom absl.testing import parameterized\nimport numpy as np\n\nfrom tensorflow.python.data.kernel_tests import checkpoint_test_base\nfrom tensorflow.python.data.kernel_tests import test_base\nfrom tensorflow.python.data.ops import dataset_ops\nfrom tensorflow.python.framework import combinations\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import sparse_tensor\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.platform import test\n\n\nclass FromSparseTensorSlicesTest(test_base.DatasetTestBase,\n                                 parameterized.TestCase):\n\n  @combinations.generate(\n      combinations.times(\n          combinations.combine(tf_api_version=1, mode=[\"graph\"]),\n          combinations.combine(slices=[[\n              [1., 2., 3.], [1.], [1.], [1., 2.], [], [1., 2.], [], [], []\n          ], [[1., 2.], [], [1., 2.], [1.], [1., 2.], [], [1., 2.]]])))\n  def testFromSparseTensorSlices(self, slices):\n    \"\"\"Test a dataset based on slices of a `tf.sparse.SparseTensor`.\"\"\"\n    st = array_ops.sparse_placeholder(dtypes.float64)\n    iterator = dataset_ops.make_initializable_iterator(\n        dataset_ops.Dataset.from_sparse_tensor_slices(st))\n    init_op = iterator.initializer\n    get_next = sparse_tensor.SparseTensor(*iterator.get_next())\n\n    with self.cached_session() as sess:\n      # Test with sparse tensor in the appropriate order.\n      # pylint: disable=g-complex-comprehension\n      indices = np.array(\n          [[i, j] for i in range(len(slices)) for j in range(len(slices[i]))])\n      values = np.array([val for s in slices for val in s])\n      # pylint: enable=g-complex-comprehension\n      dense_shape = np.array([len(slices), max(len(s) for s in slices) + 1])\n      sparse_feed = sparse_tensor.SparseTensorValue(indices, values,\n                                                    dense_shape)\n      sess.run(init_op, feed_dict={st: sparse_feed})\n      for i, s in enumerate(slices):\n        results = sess.run(get_next)\n        self.assertAllEqual(s, results.values)\n        expected_indices = np.array(\n            [[j] for j in range(len(slices[i]))]).reshape([-1, 1])\n        self.assertAllEqual(expected_indices, results.indices)\n        self.assertAllEqual(dense_shape[1:], results.dense_shape)\n      with self.assertRaises(errors.OutOfRangeError):\n        sess.run(get_next)\n\n  @combinations.generate(\n      combinations.times(\n          combinations.combine(tf_api_version=1, mode=[\"graph\"]),\n          combinations.combine(slices=[[\n              [1., 2., 3.], [1.], [1.], [1., 2.], [], [1., 2.], [], [], []\n          ], [[1., 2.], [], [1., 2.], [1.], [1., 2.], [], [1., 2.]]])))\n  def testFromSparseTensorSlicesInReverse(self, slices):\n    \"\"\"Test a dataset based on slices of a `tf.sparse.SparseTensor` in reverse order.\"\"\"\n    st = array_ops.sparse_placeholder(dtypes.float64)\n    iterator = dataset_ops.make_initializable_iterator(\n        dataset_ops.Dataset.from_sparse_tensor_slices(st))\n    init_op = iterator.initializer\n\n    with self.cached_session() as sess:\n      # pylint: disable=g-complex-comprehension\n      indices = np.array(\n          [[i, j] for i in range(len(slices)) for j in range(len(slices[i]))])\n      values = np.array([val for s in slices for val in s])\n      # pylint: enable=g-complex-comprehension\n      dense_shape = np.array([len(slices), max(len(s) for s in slices) + 1])\n      # Test with sparse tensor in the reverse order, which is not\n      # currently supported.\n      reverse_order_indices = indices[::-1, :]\n      reverse_order_values = values[::-1]\n      sparse_feed = sparse_tensor.SparseTensorValue(\n          reverse_order_indices, reverse_order_values, dense_shape)\n      with self.assertRaises(errors.UnimplementedError):\n        sess.run(init_op, feed_dict={st: sparse_feed})\n\n  @combinations.generate(combinations.combine(tf_api_version=1, mode=[\"graph\"]))\n  def testEmptySparseTensorSlices(self):\n    \"\"\"Test a dataset based on slices of an empty `tf.sparse.SparseTensor`.\"\"\"\n    st = array_ops.sparse_placeholder(dtypes.float64)\n    iterator = dataset_ops.make_initializable_iterator(\n        dataset_ops.Dataset.from_sparse_tensor_slices(st))\n    init_op = iterator.initializer\n    get_next = sparse_tensor.SparseTensor(*iterator.get_next())\n\n    with self.cached_session() as sess:\n      # Test with an empty sparse tensor.\n      empty_indices = np.empty((0, 4), dtype=np.int64)\n      empty_values = np.empty((0,), dtype=np.float64)\n      empty_dense_shape = [0, 4, 37, 9]\n      sparse_feed = sparse_tensor.SparseTensorValue(empty_indices, empty_values,\n                                                    empty_dense_shape)\n      sess.run(init_op, feed_dict={st: sparse_feed})\n      with self.assertRaises(errors.OutOfRangeError):\n        sess.run(get_next)\n\n  @combinations.generate(combinations.combine(tf_api_version=1, mode=[\"graph\"]))\n  def testEmptySparseTensorSlicesInvalid(self):\n    \"\"\"Test a dataset based on invalid `tf.sparse.SparseTensor`.\"\"\"\n    st = array_ops.sparse_placeholder(dtypes.float64)\n    iterator = dataset_ops.make_initializable_iterator(\n        dataset_ops.Dataset.from_sparse_tensor_slices(st))\n    init_op = iterator.initializer\n\n    with self.cached_session() as sess:\n      # Test with an empty sparse tensor but with non empty values.\n      empty_indices = np.empty((0, 4), dtype=np.int64)\n      non_empty_values = [1, 2, 3, 4]\n      empty_dense_shape = [0, 4, 37, 9]\n      sparse_feed = sparse_tensor.SparseTensorValue(empty_indices,\n                                                    non_empty_values,\n                                                    empty_dense_shape)\n      # Here, we expect the test to fail when running the feed.\n      with self.assertRaises(errors.InvalidArgumentError):\n        sess.run(init_op, feed_dict={st: sparse_feed})\n\n  @combinations.generate(combinations.combine(tf_api_version=1, mode=[\"graph\"]))\n  def testEmptySparseTensorSlicesInvalid2(self):\n    \"\"\"Test a dataset based on invalid `tf.sparse.SparseTensor`.\"\"\"\n    st = array_ops.sparse_placeholder(dtypes.float64)\n    iterator = dataset_ops.make_initializable_iterator(\n        dataset_ops.Dataset.from_sparse_tensor_slices(st))\n    init_op = iterator.initializer\n\n    with self.cached_session() as sess:\n      # Test with an empty sparse tensor but with non empty values.\n      empty_indices = [[]]\n      empty_values = []\n      dense_shape = [1, 1]\n      sparse_feed = sparse_tensor.SparseTensorValue(empty_indices, empty_values,\n                                                    dense_shape)\n      # Here, we expect the test to fail when running the feed.\n      with self.assertRaises(errors.InvalidArgumentError):\n        sess.run(init_op, feed_dict={st: sparse_feed})\n\n  @combinations.generate(combinations.combine(tf_api_version=2, mode=[\"eager\"]))\n  def testFromSparseTensorSlicesError(self):\n    with self.assertRaises(AttributeError):\n      dataset_ops.Dataset.from_sparse_tensor_slices(None)\n\n\nclass FromSparseTensorSlicesCheckpointTest(\n    checkpoint_test_base.CheckpointTestBase, parameterized.TestCase):\n\n  def _build_sparse_tensor_slice_dataset(self, slices):\n    # pylint: disable=g-complex-comprehension\n    indices = np.array(\n        [[i, j] for i in range(len(slices)) for j in range(len(slices[i]))],\n        dtype=np.int64)\n    values = np.array([val for s in slices for val in s], dtype=np.float64)\n    # pylint: enable=g-complex-comprehension\n    dense_shape = np.array(\n        [len(slices), max(len(s) for s in slices) + 1], dtype=np.int64)\n    sparse_components = sparse_tensor.SparseTensor(indices, values, dense_shape)\n    return dataset_ops.Dataset.from_sparse_tensor_slices(sparse_components)\n\n  @combinations.generate(\n      combinations.times(test_base.v1_only_combinations(),\n                         checkpoint_test_base.default_test_combinations()))\n  def test(self, verify_fn):\n    slices = [[1., 2., 3.], [1.], [1.], [1., 2.], [], [1., 2.], [], [], []]\n\n    verify_fn(\n        self,\n        lambda: self._build_sparse_tensor_slice_dataset(slices),\n        num_outputs=9,\n        sparse_tensors=True)\n\n\nif __name__ == \"__main__\":\n  test.main()\n"], "filenames": ["tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc", "tensorflow/python/data/kernel_tests/from_sparse_tensor_slices_test.py"], "buggy_code_start_loc": [242, 136], "buggy_code_end_loc": [265, 136], "fixing_code_start_loc": [243, 137], "fixing_code_end_loc": [266, 156], "type": "CWE-476", "message": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `SparseTensorSliceDataset` has an undefined behavior: under certain condition it can be made to dereference a `nullptr` value. The 3 input arguments to `SparseTensorSliceDataset` represent a sparse tensor. However, there are some preconditions that these arguments must satisfy but these are not validated in the implementation. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2022-21736", "sourceIdentifier": "security-advisories@github.com", "published": "2022-02-03T12:15:08.060", "lastModified": "2022-02-09T03:19:20.673", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `SparseTensorSliceDataset` has an undefined behavior: under certain condition it can be made to dereference a `nullptr` value. The 3 input arguments to `SparseTensorSliceDataset` represent a sparse tensor. However, there are some preconditions that these arguments must satisfy but these are not validated in the implementation. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."}, {"lang": "es", "value": "Tensorflow es un marco de aprendizaje autom\u00e1tico de c\u00f3digo abierto. La implementaci\u00f3n de \"SparseTensorSliceDataset\" presenta un comportamiento indefinido: bajo determinadas condiciones puede hacerse referencia a un valor \"nullptr\". Los 3 argumentos de entrada de \"SparseTensorSliceDataset\" representan un tensor disperso. Sin embargo, se presentan algunas precondiciones que estos argumentos deben satisfacer, pero no es comprobado en la implementaci\u00f3n. La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.8.0. Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.7.1, TensorFlow versi\u00f3n 2.6.3, y TensorFlow versi\u00f3n 2.5.3, ya que estos tambi\u00e9n est\u00e1n afectados y a\u00fan est\u00e1n en el rango admitido"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-476"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.5.2", "matchCriteriaId": "688150BF-477C-48FC-9AEF-A79AC57A6DDC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.6.0", "versionEndIncluding": "2.6.2", "matchCriteriaId": "C9E69B60-8C97-47E2-9027-9598B8392E5D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.7.0:*:*:*:*:*:*:*", "matchCriteriaId": "2EDFAAB8-799C-4259-9102-944D4760DA2C"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L227-L292", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/commit/965b97e4a9650495cda5a8c210ef6684b4b9eceb", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pfjj-m3jj-9jc9", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/965b97e4a9650495cda5a8c210ef6684b4b9eceb"}}