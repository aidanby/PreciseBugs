{"buggy_code": ["<?php \nrequire_once '/../config/define.php';\n\nclass Database \n{\n\tprivate $connection = null;\n\n\tfunction connect() \n\t{\n\t\t$conn = mysqli_connect(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_DATABASE) or die('Failed to connect to database: ' . mysqli_connect_error());\n\t\tif(mysqli_connect_error()) {\n\t\t\treturn null;\n\t\t}\n\t\telse {\n\t\t\t$this->connection = $conn;\n\t\t\treturn $conn;\n\t\t}\n\t}\n\n\tfunction getAffectedRows()\n\t{\n\t\treturn mysqli_affected_rows($this->connection);\n\t}\n\n\tfunction query($sql) {\n\t\t$queryData = $this->connection->query($sql);\n\t\tif(!$this->getAffectedRows()) return false;\n\t\tif($queryData === true || $queryData === false) return $queryData;\n\t\t$result = array();\n\t\tif($queryData->num_rows > 0) {\n\t\t\twhile($rows = $queryData->fetch_assoc()) {\n\t\t\t\t$result[] = $rows;\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\tfunction where($where = array()) \n\t{\n\t\tif(count($where)) {\n\t\t\t$arrTempWhere = array();\n\t\t\tforeach($where as $key => $value) {\n\t\t\t\tif(is_string($value)) $arrTempWhere[] = '' . $key . \" = '\" . $value . \"'\";\n\t\t\t\telse $arrTempWhere[] = '' . $key . \" = \" . $value;\n\t\t\t}\n\t\t\t$strWhere = implode(' AND ', $arrTempWhere);\n\t\t\treturn ' WHERE ' . $strWhere;\n\t\t}\n\t\telse return '';\t\t\n\t}\n\n\tfunction select($columns = array(), $table = '', $where = array())\n\t{\n\t\t$sql = 'SELECT ';\n\t\tif($columns === array()) $sql .= '*';\n\t\telse $sql .= implode(',', $columns);\n\t\t$sql .= ' FROM ' . $table . ' ' . $this->where($where);\n\t\treturn $this->query($sql);\n\t}\n\n\tfunction insert($values = array(), $table = '') \n\t{\n\t\t$sql = \"INSERT INTO $table (\";\n\t\t$arrKeys = array();\n\t\t$arrValues = array();\n\t\tforeach($values as $key => $value) {\n\t\t\t$arrKeys[] = $key;\n\t\t\tif(is_string($value)) $arrValues[] = \" '$value' \";\n\t\t\telse $arrValues[]  = \"$value\";\n\t\t}\n\t\t$sql .= implode(',', $arrKeys) . ') VALUES (' . implode(',', $arrValues) . ')';\n\t\treturn $this->query($sql);\n\t}\n\n\tfunction delete($table = '', $where = array()) \n\t{\n\t\t$sql = \"DELETE FROM $table \";\n\t\t$sql .= $this->where($where);\n\t\treturn $this->query($sql);\n\t}\n\n\tfunction update($values = array(), $table = '', $where = array())\n\t{\n\t\t$arrTempValue = array();\n\t\tforeach($values as $key => $value) {\n\t\t\tif(is_string($value)) $arrTempValue[] = \"$key = '$value' \";\n\t\t\telse $arrTempValue[]  = \"$key = $value\";\n\t\t}\n\t\t$strValue = implode(',', $arrTempValue);\n\t\t$sql = \"UPDATE $table SET $strValue \" . $this->where($where);\n\t\treturn $this->query($sql);\n\t}\n\n\tfunction disconnect()\n\t{\n\t\tif(is_resource($this->connection) && get_resource_type($this->connection) === 'mysql link') $this->connection->close();\n\t}\n}"], "fixing_code": ["<?php \nrequire_once '/../config/define.php';\n\nclass Database \n{\n\tprivate $connection = null;\n\n\tfunction connect() \n\t{\n\t\t$conn = mysqli_connect(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_DATABASE) or die('Failed to connect to database: ' . mysqli_connect_error());\n\t\tif(mysqli_connect_error()) {\n\t\t\treturn null;\n\t\t}\n\t\telse {\n\t\t\t$this->connection = $conn;\n\t\t\treturn $conn;\n\t\t}\n\t}\n\n\tfunction getAffectedRows()\n\t{\n\t\treturn mysqli_affected_rows($this->connection);\n\t}\n\n\tfunction sqlInjectionPrevent($value) {\n\t\treturn mysqli_real_escape_string($this->connection, $value);\n\t}\n\n\tfunction query($sql) {\n\t\t$queryData = $this->connection->query($sql);\n\t\tif(!$this->getAffectedRows()) return false;\n\t\tif($queryData === true || $queryData === false) return $queryData;\n\t\t$result = array();\n\t\tif($queryData->num_rows > 0) {\n\t\t\twhile($rows = $queryData->fetch_assoc()) {\n\t\t\t\t$result[] = $rows;\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\tfunction where($where = array()) \n\t{\n\t\tif(count($where)) {\n\t\t\t$arrTempWhere = array();\n\t\t\tforeach($where as $key => $value) {\n\t\t\t\tif(is_string($value)) $arrTempWhere[] = '' . $key . \" = '\" . $this->sqlInjectionPrevent($value) . \"'\";\n\t\t\t\telse $arrTempWhere[] = '' . $key . \" = \" . $value;\n\t\t\t}\n\t\t\t$strWhere = implode(' AND ', $arrTempWhere);\n\t\t\treturn ' WHERE ' . $strWhere;\n\t\t}\n\t\telse return '';\t\t\n\t}\n\n\tfunction select($columns = array(), $table = '', $where = array())\n\t{\n\t\t$sql = 'SELECT ';\n\t\tif($columns === array()) $sql .= '*';\n\t\telse $sql .= implode(',', $columns);\n\t\t$sql .= ' FROM ' . $table . ' ' . $this->where($where);\n\t\tvar_dump($sql);\n\t\treturn $this->query($sql);\n\t}\n\n\tfunction insert($values = array(), $table = '') \n\t{\n\t\t$sql = \"INSERT INTO $table (\";\n\t\t$arrKeys = array();\n\t\t$arrValues = array();\n\t\tforeach($values as $key => $value) {\n\t\t\t$arrKeys[] = $key;\n\t\t\tif(is_string($value)) $arrValues[] = \" '\" . $this->sqlInjectionPrevent($value) . \"' \";\n\t\t\telse $arrValues[]  = \"$value\";\n\t\t}\n\t\t$sql .= implode(',', $arrKeys) . ') VALUES (' . implode(',', $arrValues) . ')';\n\t\treturn $this->query($sql);\n\t}\n\n\tfunction delete($table = '', $where = array()) \n\t{\n\t\t$sql = \"DELETE FROM $table \";\n\t\t$sql .= $this->where($where);\n\t\treturn $this->query($sql);\n\t}\n\n\tfunction update($values = array(), $table = '', $where = array())\n\t{\n\t\t$arrTempValue = array();\n\t\tforeach($values as $key => $value) {\n\t\t\tif(is_string($value)) $arrTempValue[] = \"$key = '\" . $this->sqlInjectionPrevent($value) . \"' \";\n\t\t\telse $arrTempValue[]  = \"$key = $value\";\n\t\t}\n\t\t$strValue = implode(',', $arrTempValue);\n\t\t$sql = \"UPDATE $table SET $strValue \" . $this->where($where);\n\t\treturn $this->query($sql);\n\t}\n\n\tfunction disconnect()\n\t{\n\t\tif(is_resource($this->connection) && get_resource_type($this->connection) === 'mysql link') $this->connection->close();\n\t}\n}"], "filenames": ["library/Database.php"], "buggy_code_start_loc": [24], "buggy_code_end_loc": [87], "fixing_code_start_loc": [25], "fixing_code_end_loc": [92], "type": "CWE-89", "message": "A vulnerability, which was classified as critical, was found in tutrantta project_todolist. Affected is the function getAffectedRows/where/insert/update in the library library/Database.php. The manipulation leads to sql injection. The name of the patch is 194a0411bbe11aa4813f13c66b9e8ea403539141. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-218352.", "other": {"cve": {"id": "CVE-2015-10045", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-15T10:15:09.497", "lastModified": "2023-01-24T17:54:37.327", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as critical, was found in tutrantta project_todolist. Affected is the function getAffectedRows/where/insert/update in the library library/Database.php. The manipulation leads to sql injection. The name of the patch is 194a0411bbe11aa4813f13c66b9e8ea403539141. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-218352."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:project_todolist_project:project_todolist:*:*:*:*:*:*:*:*", "versionEndExcluding": "2015-01-13", "matchCriteriaId": "84CC75EF-5096-4FB5-8FF5-E78DDBDD6433"}]}]}], "references": [{"url": "https://github.com/tutrantta/project_todolist/commit/194a0411bbe11aa4813f13c66b9e8ea403539141", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218352", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218352", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tutrantta/project_todolist/commit/194a0411bbe11aa4813f13c66b9e8ea403539141"}}