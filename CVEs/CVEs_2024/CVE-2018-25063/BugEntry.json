{"buggy_code": ["/* global _managed_objects: true */\n/*****************************************************************************\n *\n * Copyright (C) Zenoss, Inc. 2014, all rights reserved.\n *\n * This content is made available according to terms specified in\n * License.zenoss under the directory where your Zenoss product is installed.\n *\n ****************************************************************************/\n(function() {\n    Ext.ns('Zenoss.Dashboard');\n    Zenoss.Dashboard.DEFAULT_SITEWINDOW_URL = Zenoss.Dashboard.DEFAULT_SITEWINDOW_URL || \"https://www2.zenoss.com/in-app-welcome\";\n    Zenoss.Dashboard.PortletLockedTools = [{\n            xtype: 'tool',\n            itemId: 'fullscreenPortlet',\n            type: 'restore'\n        }]\n    Zenoss.Dashboard.PortletUnlockedTools = [{\n            xtype: 'tool',\n            itemId: 'fullscreenPortlet',\n            type: 'restore'\n        },{\n            xtype: 'tool',\n            itemId: 'editPortlet',\n            type: 'gear'\n        }]\n\n\n    var DATE_RANGES = [\n        [\"1h-ago\", _t('Last Hour')],\n        [\"1d-ago\", _t('Last 24 Hours')],\n        [\"7d-ago\", _t('Last Week')],\n        [\"30d-ago\", _t('Last 30 days')],\n        [\"1y-ago\", _t('Last Year')]\n    ]\n    /**\n     *  Returns the first non argument to this function. So\n     *  coalesce(null, undefined, 0, 1) will return 0\n     **/\n    function coalesce() {\n        var i;\n        for (i =0; i < arguments.length; i++) {\n            if (Ext.isDefined(arguments[i]) && arguments[i] !== null) {\n                return arguments[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     *  Creates the sorter for events. This allows portlet grids that have events to\n     *  sort based on those events.\n     **/\n    Zenoss.Dashboard.eventSort = function(state) {\n        var ds = this.up('grid').getStore();\n        var field = this.getSortParam();\n        ds.sort({\n            property: field,\n            direction: state,\n            sorterFn: function(v1, v2){\n                v1 = v1.get(field);\n                v2 = v2.get(field);\n                // give more weight to higher severity events by evaulating them first\n                var order = ['critical', 'error', 'warning'], v1Value, v2Value, i, severity;\n                for (i=0; i < order.length; i ++ ) {\n                    severity = order[i];\n                    v1Value = v1[severity].count + v1[severity].acknowledged_count;\n                    v2Value = v2[severity].count + v2[severity].acknowledged_count;\n                    if (v2Value || v1Value) {\n                        return v1Value > v2Value ? 1 : (v1Value < v2Value ? -1 : 0);\n                    }\n                }\n                return 1;\n            }\n        });\n    };\n    Zenoss.Dashboard.eventRenderer = function(value, metaData, record) {\n        var table = Zenoss.render.events(value),\n            uid = record.data.uid,\n            url;\n\n        // no table return empty string in case of null/undefined/false (to not show that in view);\n        if (!table) return '';\n\n        if (uid.indexOf('/devices/') < 0) {\n            url = Zenoss.render.link(false, '/zport/dmd/itinfrastructure#devices:'+uid.replace(/\\//g, '.'));\n        } else {\n            url = Zenoss.render.link(false, uid + '/devicedetail?filter=default#deviceDetailNav:device_events');\n        }\n        return table.replace('<table', '<table onclick=\"location.href=\\''+url+'\\';\" ');\n    };\n\n    /**\n     * @class Zenoss.Dashboard.view.Portlet\n     * @extends Ext.panel.Panel\n     * A {@link Ext.panel.Panel Panel} class that is managed by {@link Zenoss.dashboard.view.DashboardPanel}.\n     * This is the base class for all portlets.\n     */\n    Ext.define('Zenoss.Dashboard.view.Portlet', {\n        extend: 'Ext.panel.Panel',\n        alias: 'widget.portlet',\n        title: '',\n        layout: 'fit',\n        anchor: '100%',\n        frame: true,\n        resizable:true,\n        resizeHandles: 's',\n        closable: true,\n        collapsible: true,\n        animCollapse: true,\n        height: 200,\n        minHeight: 200,\n        minWidth: 200,\n        draggable: {\n            moveOnDrag: false\n        },\n        cls: 'x-portlet',\n        tools: Zenoss.Dashboard.PortletUnlockedTools,\n        // defeault to refresh every 5 minutes\n        refreshInterval: 300,\n        // Override Panel's default doClose to provide a custom fade out effect\n        // when a portlet is removed from the portal\n        doClose: function() {\n            if (!this.closing) {\n                this.closing = true;\n                this.el.animate({\n                    opacity: 0,\n                    callback: function(){\n                        this.fireEvent('close', this);\n                        this[this.closeAction]();\n                    },\n                    scope: this\n                });\n            }\n        },\n        getTitle: function() {\n            return this.title;\n        },\n        constructor: function(config) {\n            this.applyConfig(config.config || {});\n            this.callParent([config]);\n        },\n        initComponent: function(){\n            this.addEvents(\n                /**\n                 * @event refresh\n                 * Fires when the portlet is set to refresh\n                 * @param {Zenoss.Dashboard.view.Portlet} this\n                 */\n                'refresh',\n                /**\n                 * @event applyconfig\n                 * Fires immediately after the config has been updated on a portlet\n                 * @param {Zenoss.Dashboard.view.Portlet} this\n                 */\n                'applyconfig'\n            );\n\n            this.callParent(arguments);\n            this.on('afterrender', this.startRefresh, this, {single: true});\n            this.on('beforedestroy', this.destroyRefresh, this, {single:true});\n        },\n        destroyRefresh: function() {\n            Ext.TaskManager.stop(this.refreshTask);\n            delete this.refreshTask;\n        },\n        startRefresh: function() {\n            this.refreshTask = Ext.TaskManager.start({\n                run: Ext.bind(this.refresh, this),\n                interval: this.refreshInterval * 1000,\n                fireOnStart: false\n            });\n        },\n        refresh: function() {\n            this.fireEvent('refresh', this);\n            this.onRefresh();\n        },\n        /**\n         * Template method for what happens when a portlet\n         * refreshes.\n         **/\n        onRefresh: function() {\n\n        },\n        /**\n         * Template method that is called when we are\n         * fetching the configuration for this portlet.\n         * Anything that can be set by the configuration display should\n         * be returned here;\n         **/\n        getConfig: function() {\n            return null;\n        },\n        getConfigFields: function() {\n            var fields = [{\n                xtype: 'textfield',\n                fieldLabel: _t('Title'),\n                name: 'title',\n                value: this.getTitle(),\n                allowBlank: false\n            },{\n                xtype: 'numberfield',\n                name: 'height',\n                fieldLabel: _t('Height'),\n                value: this.getEl() ? this.getHeight() : this.height,\n                minValue: 10\n            }, {\n                xtype: 'numberfield',\n                name: 'refreshInterval',\n                fieldLabel: _t('Refresh Interval (seconds)'),\n                value: this.refreshInterval,\n                // some of the portlets might be expensive\n                // so keep the min refresh sane\n                minValue: 5\n            }];\n\n            return fields.concat(this.getCustomConfigFields());\n        },\n        /**\n         * Template method that is called when displaying the configuration fields\n         * for this portlet.\n         * It is expected that the subclasses will return an array of objects\n         **/\n        getCustomConfigFields: function() {\n            return [];\n        },\n        applyConfig: function(config) {\n            if (config.height && config.height !== this.height) {\n                this.height = config.height;\n                if (this.getEl()) {\n                    this.setHeight(config.height);\n                }\n            }\n            if (config.title) {\n                this.setTitle(Ext.htmlEncode(config.title));\n            }\n\n            // update the refresh interval\n            if (config.refreshInterval && config.refreshInterval !== this.refreshInterval) {\n                this.refreshTask.interval = config.refreshInterval * 1000;\n            }\n\n            // by default apply all the config properties to this object\n            Ext.apply(this, config);\n            this.fireEvent('applyconfig', this);\n        },\n        lock: function() {\n            this.resizable = false\n            this.collapsible = false\n            this.closable = false\n            Ext.apply(this, {tools: Zenoss.Dashboard.PortletLockedTools})\n        },\n        unlock: function() {\n            this.resizable = true\n            this.collapsible = true\n            this.closable = true\n            Ext.apply(this, {tools: Zenoss.Dashboard.PortletUnlockedTools})\n        },\n        /** @private */\n        setBox: function (box) {\n            // The resizer calls setBox which would set our left/top coordinates but\n            // that is a BAD thing in a column layout which relies on flow!\n            this.setSize(box.width, box.height);\n        }\n    });\n\n\n    /**\n     * A simple portlet that lets users define custom HTML to be displayed\n     * on the application dashboard. This will execute any javascript that is\n     * written.\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.HTMLPortlet', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.htmlportlet',\n        height: 100,\n        title: 'HTML Portlet',\n        content: \"<h1>Blank HTMLPortlet</h1>\",\n        initComponent: function(){\n\n            Ext.apply(this, {\n                html: this.content\n            });\n\n            this.callParent(arguments);\n        },\n        getConfig: function() {\n            return {\n                html: this.content\n            };\n        },\n        applyConfig: function(config) {\n            if (config.html && config.html !== this.content) {\n                config.html = this.convertToValidHTMLString(config.html);\n\n                this.content = config.html;\n                this.update(config.html, true);\n            }\n            this.callParent([config]);\n        },\n        getCustomConfigFields: function() {\n            var fields = [{\n                xtype: 'textarea',\n                fieldLabel: _t('Content'),\n                name: 'html',\n                value: this.content,\n                allowBlank: false,\n                height: 100,\n                width: 200\n            }];\n            return fields;\n        },\n        onRefresh: function() {\n            var me = this,\n                ctrl = window.globalApp.getController(\"DashboardController\"),\n                idAsArray = ctrl.getCurrentDashboard().id.split(\"/\"),\n                id = idAsArray[idAsArray.length -1],\n                portletId = me.ownerCt.id;\n            ctrl.getDashboardSelecter().getStore().load({\n                callback: function() {\n                    var combo = this.getDashboardSelecter(),\n                        record = combo.getStore().findRecord('id', id);\n                    if (record) {\n                        var obj = Ext.JSON.decode(record.get(\"state\"));\n                        for (var i in obj) {\n                            if (obj[i].id === portletId) {\n                                me.config = obj[i].items[0].config;\n                                me.applyConfig(me.config);\n                                me.title = obj[i].items[0].title;\n                                me.refreshInterval = obj[i].items[0].refreshInterval;\n                                me.height = obj[i].items[0].height;\n                            }\n                        }\n                    }\n                },\n                scope: ctrl\n            });\n            return {\n                html: this.content\n            };\n        },\n        convertToValidHTMLString: function (HTMLString) {\n            var tempDiv = document.createElement('div');\n            tempDiv.innerHTML = HTMLString;\n\n            return tempDiv.innerHTML;\n        }\n    });\n\n    /**\n     * @class Zenoss.Dashboard.stores.Organizer\n     * @extend Zenoss.DirectStore\n     * Direct store for loading organizers\n     */\n    Ext.define(\"Zenoss.Dashboard.stores.Organizer\", {\n        extend: \"Zenoss.NonPaginatedStore\",\n        constructor: function(config) {\n            config = config || {};\n            Ext.applyIf(config, {\n                model: 'Zenoss.Dashboard.model.DeviceIssueModel',\n                initialSortColumn: \"name\",\n                directFn: Zenoss.remote.DashboardRouter.getSubOrganizers,\n                root: 'data'\n            });\n            this.callParent(arguments);\n        }\n    });\n\n    /**\n     * Portlet that displays the map for locations\n     *\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.GoogleMaps', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.googlemapportlet',\n        title: _t('Google Maps'),\n        height: 400,\n        pollingrate: 400,\n        baselocation: \"/zport/dmd/Locations\",\n        initComponent: function(){\n\n            Ext.apply(this, {\n                initlocation: this.baselocation,\n                items: [{\n                    xtype: 'uxiframe',\n                    ref: 'mapIframe',\n                    src: this.getIFrameSource()\n                }]\n            });\n\n            this.callParent(arguments);\n        },\n        getIFrameSource: function() {\n            var location = Zenoss.render.link(null, this.baselocation);\n            if (location.indexOf('/zport/dmd/Locations') < 0) {\n                return null;\n            }\n            return Ext.String.format('{0}/simpleLocationGeoMap?polling={1}', location, this.pollingrate);\n        },\n        getConfig: function() {\n            return {\n                baselocation: this.baselocation || this.initlocation,\n                pollingrate: this.pollingrate\n            };\n        },\n        applyConfig: function(config) {\n            this.callParent([config]);\n            if (this.rendered){\n                this.onRefresh();\n            }\n        },\n        onRefresh: function() {\n            var iframeCmp = this.down('uxiframe'),\n                newSrc = this.getIFrameSource();\n            if (newSrc) {\n                iframeCmp.load(newSrc);\n            }\n        },\n        getCustomConfigFields: function() {\n            var me = this;\n\n            var store = Ext.create('Zenoss.Dashboard.stores.Organizer', {});\n            store.load({\n                params: {\n                    uid: \"/zport/dmd/Locations\"\n                },\n                callback: function(records, operation, success) {\n                    if (success && records.length) {\n                        me.up('form').isValid();\n                    }\n                }\n            });\n\n            var fields = [{\n                xtype: 'combo',\n                forceSelection: true,\n                name: 'baselocation',\n                queryMode: 'local',\n                store: store,\n                displayField: 'name',\n                valueField: 'uid',\n                locationRegExp: new RegExp('/zport/dmd/Locations'),\n                validator: function() {\n                    var value = this.getValue(),\n                        valid = this.locationRegExp.test(value);\n                    return valid ? true : this.invalidText;\n                },\n                fieldLabel: _t('Base Location'),\n                value: this.baselocation,\n                allowBlank: false\n            }, {\n                xtype: 'numberfield',\n                name: 'pollingrate',\n                fieldLabel: _t('Geocode Polling Rate'),\n                value: this.pollingrate\n            }];\n            return fields;\n        }\n    });\n\n\n\n    /**\n     * Portlet that loads a Multi-Graph Report\n     *\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.MultiGraphReportPortlet', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.multigraphreportportlet',\n        title: _t('Multi-Graph Report'),\n        height: 400,\n        refreshInterval: 30,\n        reportUid: '',\n        graphGroup: '',\n        drange: '',\n        directFn: function(params){\n            params.graphGroup = this.graphGroup\n            return Zenoss.remote.ReportRouter.getMultiGraphReportDefs.apply(null, arguments)\n        },\n        initComponent: function () {\n\n            Ext.apply(this, {\n                items: [{\n                    xtype: 'panel',\n                    ref: 'graph_reports',\n                    bodyStyle: {\n                        overflow: 'auto'\n                    }\n                }]\n            });\n            this.callParent(arguments);\n        },\n        startRefresh: function() {\n            this.refreshTask = Ext.TaskManager.start({\n                run: Ext.bind(this.refresh, this),\n                interval: this.refreshInterval * 1000,\n                fireOnStart: true\n            });\n        },\n        getConfig: function() {\n            return {\n                reportUid: this.reportUid,\n                graphGroup: this.graphGroup,\n                drange: this.drange\n            };\n        },\n        applyConfig: function(config) {\n            this.callParent([config]);\n            if (this.rendered){\n                this.onRefresh();\n            }\n        },\n        onRefresh: function() {\n            if (this.reportUid === undefined || this.reportUid == '') {\n                return;\n            }\n            this.graph_reports.removeAll();\n            var graphs = Ext.create('Zenoss.form.GraphPanel', {\n                    newWindowButton: false,\n                    directFn: Ext.bind(this.directFn, this),\n                    columns: 1,\n                    drange: this.drange\n                }),\n                tb = graphs.toolbar,\n                btn = tb.query(\"graphrefreshbutton\"),\n                tbtitle = tb.query(\"tbtext\"),\n                seps = tb.query(\"tbseparator\"),\n                comps = btn.concat(tbtitle).concat(seps);\n            Ext.Array.each(comps, function(comp) {\n                comp.hide();\n            });\n            graphs.setContext(this.reportUid);\n            this.graph_reports.add(graphs);\n        },\n        getCustomConfigFields: function () {\n            var groupStore = new Zenoss.NonPaginatedStore({\n                directFn: Zenoss.remote.DashboardRouter.getMultiGraphReportGroups,\n                fields: ['id']\n            })\n            var fields = [{\n                xtype: 'combo',\n                name: 'reportUid',\n                queryMode: 'local',\n                store: new Zenoss.NonPaginatedStore({\n                    initialSortColumn: \"name\",\n                    directFn: Zenoss.remote.DashboardRouter.getMultiGraphReports,\n                    root: 'data',\n                    fields: ['uid', 'name']\n                }),\n                listeners: {\n                    select: function (combo) {\n                        var reportID = combo.getValue(),\n                            graphGroupCombo = Ext.getCmp('graphGroupCombo'),\n                            store = graphGroupCombo.getStore();\n                        store.load({\n                            params: {\n                                uid: reportID\n                            }\n                        });\n                        graphGroupCombo.setDisabled(false);\n                    }\n                },\n                displayField: 'name',\n                valueField: 'uid',\n                fieldLabel: _t('Multi-Graph Report (created on Reports screen)'),\n                value: this.reportUid\n            }, {\n                id: 'graphGroupCombo',\n                xtype: 'combo',\n                name: 'graphGroup',\n                queryMode: 'local',\n                store: groupStore,\n                displayField: 'id',\n                valueField: 'id',\n                fieldLabel: _t('Graph Group'),\n                disabled: !(this.graphGroup),\n                value: this.graphGroup\n            }, {\n                id: \"rangePicker\",\n                xtype:'combo',\n                fieldLabel: _t('Range'),\n                name: 'drange',\n                editable: false,\n                forceSelection: true,\n                autoSelect: true,\n                value: '1h-ago',\n                queryMode: 'local',\n                valueField: 'id',\n                displayField: 'name',\n                store: new Ext.data.ArrayStore({\n                    id: 0,\n                    model: 'Zenoss.model.IdName',\n                    data: DATE_RANGES\n                })\n            }\n            ];\n            fields[0].store.load({});\n            return fields;\n        }\n    });\n\n\n    /**\n     * Portlet that loads an Iframe.\n     *\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.SiteWindowPortlet', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.sitewindowportlet',\n        title: _t('Site Window'),\n        height: 400,\n        // since it's a url it doesn't really need to refresh all that often\n        refreshInterval: 3000,\n        siteUrl: Zenoss.Dashboard.DEFAULT_SITEWINDOW_URL,\n        initComponent: function(){\n\n            // for the default show specific welcome to this product and version\n            if (this.siteUrl === Zenoss.Dashboard.DEFAULT_SITEWINDOW_URL) {\n                this.siteUrl += '?v=' + Zenoss.env.ZENOSS_VERSION + '&p=' + Zenoss.env.ZENOSS_PRODUCT;\n            }\n            Ext.apply(this, {\n                items: [{\n                    xtype: 'uxiframe',\n                    ref: 'mapIframe',\n                    src: this.getIFrameSource()\n                }]\n            });\n            this.callParent(arguments);\n        },\n        getIFrameSource: function() {\n            return this.siteUrl;\n        },\n        getConfig: function() {\n            return {\n                siteUrl: this.siteUrl\n            };\n        },\n        applyConfig: function(config) {\n            var form = this.up('form');\n            if (form && form.isValid()) {\n                // ensure we are protected from xss\n                config.siteUrl = Ext.String.htmlEncode(config.siteUrl);\n                this.callParent([config]);\n                if (this.rendered){\n                    this.onRefresh();\n                }\n            }\n        },\n        onRefresh: function() {\n            this.down('uxiframe').load(this.getIFrameSource());\n        },\n        getCustomConfigFields: function() {\n            var fields = [{\n                xtype: 'textfield',\n                name: 'siteUrl',\n                fieldLabel: _t('Site URL'),\n                value: this.siteUrl,\n                validateOnBlur: true,\n                validator: function(siteUrl) {\n                    var urlPattern = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n                    if (!urlPattern.test(siteUrl)) {\n                        return \"invalid URL\"\n                    }\n                    return true;\n                }\n            }];\n            return fields;\n        }\n    });\n\n\n\n    /**\n     * @class Zenoss.Dashboard.model.DeviceIssueModel\n     * @extends Ext.data.Model\n     * Field definitions for the device issues grid\n     **/\n    Ext.define('Zenoss.Dashboard.model.DeviceIssueModel',  {\n        extend: 'Ext.data.Model',\n        idProperty: 'uid',\n        fields: [\n            {name: 'uid'},\n            {name: 'name'},\n            {name: 'fullOrganizerName', convert: function(v, record) {\n                if (v) {\n                    return v;\n                }\n                return record.get(\"name\");\n            }},\n            {name: 'events'},\n            {name: 'icon'}\n        ]\n    });\n\n    /**\n     * @class Zenoss.Dashboard.stores.DeviceIssues\n     * @extend Zenoss.DirectStore\n     * Direct store for loading organizers\n     */\n    Ext.define(\"Zenoss.Dashboard.stores.DeviceIssues\", {\n        extend: \"Zenoss.NonPaginatedStore\",\n        constructor: function(config) {\n            config = config || {};\n            Ext.applyIf(config, {\n                model: 'Zenoss.Dashboard.model.DeviceIssueModel',\n                initialSortColumn: \"name\",\n                directFn: Zenoss.remote.DashboardRouter.getDeviceIssues,\n                root: 'data'\n            });\n            this.callParent(arguments);\n        }\n    });\n\n    /**\n     * Device Issues Portlet. Shows devices that have events\n     * @extends Zenoss.Dashboard.view.Portlet\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.DeviceIssues', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.deviceissuesportlet',\n        title: _t('Device Issues'),\n        height: 400,\n        initComponent: function(){\n            var store = Ext.create('Zenoss.Dashboard.stores.DeviceIssues', {});\n            store.load({\n                params: {\n                    keys: Ext.pluck(Zenoss.Dashboard.model.DeviceIssueModel.prototype.fields.items, 'name')\n                }\n            });\n\n            Ext.apply(this, {\n                items: [{\n                    xtype: 'grid',\n                    emptyText: _t('No records found.'),\n                    store: store,\n                    columns: [{\n                        dataIndex:'icon',\n                        header: _t('Icon'),\n                        width: 40,\n                        renderer: function(value) {\n                            return Ext.String.format(\"<image height=\\\"32\\\"src='{0}' />\", value);\n                        }\n                    },{\n                        dataIndex: 'name',\n                        header: _t('Device'),\n                        flex: 1,\n                        hideable: false,\n                        renderer: function(name, row, record) {\n                            return Zenoss.render.Device(record.data.uid, name);\n                        }\n                    },{\n                        width: 175,\n                        dataIndex: 'events',\n                        header: _t('Events'),\n                        sortable: true,\n                        doSort: Zenoss.Dashboard.eventSort,\n                        renderer: Zenoss.Dashboard.eventRenderer\n                    }]\n                }]\n            });\n            this.callParent(arguments);\n        },\n        onRefresh: function() {\n            var store = this.down('grid').getStore();\n            store.load({\n                params: {\n                    keys: Ext.pluck(Zenoss.Dashboard.model.DeviceIssueModel.prototype.fields.items, 'name')\n                }\n            });\n        }\n    });\n\n\n    /**\n     * @class Zenoss.Dashboard.model.DaemonProcessDown\n     * @extends Ext.data.Model\n     * Field definitions for the Daemon Process Down Grid\n     **/\n    Ext.define('Zenoss.Dashboard.model.DaemonProcessDown',  {\n        extend: 'Ext.data.Model',\n        idProperty: 'process',\n        fields: [\n            {name: 'host'},\n            {name: 'process'},\n            {name: 'secondsDown'}\n        ]\n    });\n\n    /**\n     * @class Zenoss.Dashboard.stores.DaemonProcessDown\n     * @extend Zenoss.DirectStore\n     */\n    Ext.define(\"Zenoss.Dashboard.stores.DaemonProcessDownStore\", {\n        extend: \"Zenoss.NonPaginatedStore\",\n        constructor: function(config) {\n            config = config || {};\n            Ext.applyIf(config, {\n                model: 'Zenoss.Dashboard.model.DaemonProcessDown',\n                initialSortColumn: \"process\",\n                autoLoad: true,\n                directFn: Zenoss.remote.DashboardRouter.getDaemonProcessesDown,\n                root: 'data'\n            });\n            this.callParent(arguments);\n        }\n    });\n\n    /**\n     * Daemon Processes Down Portlet. Shows daemons that are down by the heart beat\n     * @extends Zenoss.Dashboard.view.Portlet\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.DaemonProcessDown', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.daemonprocessportlet',\n        title: _t('Daemon Processes Down'),\n        height: 250,\n        initComponent: function(){\n            Ext.apply(this, {\n                items: [{\n                    xtype: 'grid',\n                    emptyText: _t('No records found.'),\n                    store: Ext.create('Zenoss.Dashboard.stores.DaemonProcessDownStore', {}),\n                    columns: [{\n                        dataIndex:'host',\n                        header: _t('Host'),\n                        width: 120,\n                        renderer: function(url) {\n                            return Ext.String.format(\"{0}\", url);\n                        }\n                    },{\n                        dataIndex: 'process',\n                        header: _t('Daemon Process'),\n                        flex: 1,\n                        hideable: false\n                    },{\n                        width: 120,\n                        dataIndex: 'secondsDown',\n                        header: _t('Seconds Down'),\n                        align: 'right',\n                        sortable: false\n                    },{\n                        dataIndex: 'monitor',\n                        header: _t('Monitor'),\n                        with: 120,\n                        hideable: false\n                    }]\n                }]\n            });\n            this.callParent(arguments);\n        },\n        onRefresh: function() {\n            this.down('grid').getStore().load();\n        }\n    });\n\n    /**\n     * Production State Portlet. Shows a list of devices and their production state.\n     * TODO: This could probably be refactored into a generic device list portlet, like a \"device view\"\n     * @extends Zenoss.Dashboard.view.Portlet\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.ProductionState', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.productionstateportlet',\n        title: _t('Production States'),\n        height: 250,\n        productionStates: [300],\n        initComponent: function(){\n            Zenoss.env.initProductionStates();\n            var store = Ext.create('Zenoss.DeviceStore', {});\n            this.getAllProductionState();\n            store.setBaseParam('uid', '/zport/dmd/Devices');\n            store.setBaseParam('keys', ['uid', 'name', 'productionState']);\n            store.setParamsParam('productionState', this.productionStates);\n            store.load();\n            Ext.apply(this, {\n                items: [{\n                    xtype: 'grid',\n                    emptyText: _t('No records found.'),\n                    store: store,\n                    columns: [{\n                        dataIndex: 'name',\n                        header: _t('Device'),\n                        flex: 1,\n                        hideable: false,\n                        renderer: function(name, row, record) {\n                            return Zenoss.render.Device(record.data.uid, name);\n                        }\n                    },{\n                        dataIndex: 'productionState',\n                        header: _t('Production State'),\n                        hideable: false,\n                        tooltip: 'Production States Sorted by Numeric value in State Conversions defined in Settings',\n                        renderer: function(value) {\n                            return Zenoss.env.PRODUCTION_STATES_MAP[value];\n                        }\n                    }]\n                }]\n            });\n            this.callParent(arguments);\n        },\n        onRefresh: function() {\n            this.down('grid').getStore().load();\n        },\n        getConfig: function() {\n            return {\n                productionStates: this.productionStates\n            };\n        },\n        getAllProductionState: function() {\n            Zenoss.remote.DeviceRouter.getProductionStates({},\n                function(result) {\n                    if (result.success) {\n                        Zenoss.env.PRODUCTION_STATES = [];\n                        Zenoss.env.PRODUCTION_STATES_MAP = {};\n                        Ext.each(result.data, function(item) {\n                            Zenoss.env.PRODUCTION_STATES.push(item);\n                            Zenoss.env.PRODUCTION_STATES_MAP[item.value] = item.name;\n                        });\n                    };\n                }\n            );\n        },\n        applyConfig: function(config) {\n            if (this.rendered) {\n                var grid = this.down('grid');\n                if (config.productionStates) {\n                    grid.getStore().setParamsParam('productionState', config.productionStates);\n                    grid.getStore().load();\n                }\n            }\n            this.callParent([config]);\n        },\n        getCustomConfigFields: function() {\n            var me = this;\n            var fields = [{\n                xtype: 'ProductionStateCombo',\n                fieldLabel: _t('Production State'),\n                name: 'productionStates',\n                // bug with multi select combo where we have to update the\n                // value after we have rendered otherwise it wont take effect\n                value: me.productionStates,\n                listeners: {\n                    afterrender: function(combo) {\n                        combo.setValue(me.productionStates);\n                    }\n                },\n                multiSelect: true,\n                height: 100,\n                width: 200\n            }];\n            return fields;\n        }\n    });\n\n    /**\n     * @class Zenoss.Dashboard.stores.WatchListTargets\n     * @extend Zenoss.DirectStore\n     * Direct store for loading organizers\n     */\n    Ext.define(\"Zenoss.Dashboard.stores.WatchListTargets\", {\n        extend: \"Zenoss.NonPaginatedStore\",\n        constructor: function(config) {\n            config = config || {};\n            Ext.applyIf(config, {\n                model: 'Zenoss.Dashboard.model.DeviceIssueModel',\n                initialSortColumn: \"name\",\n                directFn: Zenoss.remote.DashboardRouter.getWatchListTargets,\n                root: 'data'\n            });\n            this.callParent(arguments);\n        }\n    });\n\n    /**\n     * @class Zenoss.Dashboard.stores.WatchListStore\n     * @extend Zenoss.DirectStore\n     * Direct store for loading organizers\n     */\n    Ext.define(\"Zenoss.Dashboard.stores.WatchListStore\", {\n        extend: \"Zenoss.NonPaginatedStore\",\n        constructor: function(config) {\n            config = config || {};\n            Ext.applyIf(config, {\n                model: 'Zenoss.Dashboard.model.DeviceIssueModel',\n                initialSortColumn: \"name\",\n                directFn: Zenoss.remote.DashboardRouter.getInfos,\n                root: 'data'\n            });\n            this.callParent(arguments);\n        }\n    });\n\n    /**\n     * Watch List Portlet. Shows a collection organizers and events on those organizers\n     * @extends Zenoss.Dashboard.view.Portlet\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.WatchList', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.watchlistportlet',\n        title: _t('Watch List'),\n        height: 300,\n        uids: [],\n        initComponent: function(){\n            var me = this,\n                store = Ext.create('Zenoss.Dashboard.stores.WatchListStore', {});\n            store.setBaseParam('uids', this.uids);\n            store.setBaseParam('keys', Ext.pluck(Zenoss.Dashboard.model.DeviceIssueModel.prototype.fields.items, 'name'));\n            store.load();\n            Ext.apply(this, {\n                items: [{\n                    xtype: 'grid',\n                    emptyText: _t('No records found.'),\n                    store: store,\n                    columns: [{\n                        dataIndex: 'name',\n                        header: _t('Object'),\n                        flex: 1,\n                        hideable: false,\n                        renderer: function(name, row, record) {\n                            return Zenoss.render.link(record.data.uid, null, name);\n                        }\n                    },{\n                        dataIndex: 'events',\n                        header: _t('Events'),\n                        width: 120,\n                        hideable: false,\n                        doSort: Zenoss.Dashboard.eventSort,\n                        renderer: Zenoss.Dashboard.eventRenderer\n                    }, {\n                        xtype: 'actioncolumn',\n                        width: 60,\n                        handler: function(grid, rowIndex){\n                            // get the record and remove it from the store\n                            var store = grid.getStore(), record = store.getAt(rowIndex);\n                            // filter out the remove uid\n                            me.uids = Zenoss.util.filter(me.uids, function(uid) {\n                                return uid !== record.get('uid');\n                            });\n                            // update the store params\n                            store.setBaseParam('uids', me.uids);\n                            store.remove(record);\n                            if (!grid.up(\"window\")) {\n                                window.globalApp.getController(\"DashboardController\").saveDashboardState();\n                            }\n                        },\n                        align: \"center\",\n                        text: _t('Remove'),\n                        icon: \"/++resource++extjs/examples/restful/images/delete.png\",\n                        altText: _t('Remove')\n                    }]\n                }]\n            });\n            this.callParent(arguments);\n        },\n        onRefresh: function() {\n            this.down('grid').getStore().load();\n        },\n        getConfig: function() {\n            return {\n                uids: this.uids\n            };\n        },\n        applyConfig: function(config) {\n            if (this.rendered) {\n                var grid = this.down('grid');\n                if (config.previewConfig) {\n                    this.uids = config.previewConfig.uids;\n                    grid.getStore().setBaseParam('uids', this.uids);\n                    grid.getStore().load();\n                } else {\n                    grid.getStore().load();\n                }\n\n            }\n            this.callParent([config]);\n        },\n        getCustomConfigFields: function() {\n            var me = this,\n                store = Ext.create('Zenoss.Dashboard.stores.WatchListTargets', {\n                    sorters: [{\n                        property: 'fullOrganizerName',\n                        direction: 'ASC'\n                    }]\n                });\n            store.setBaseParam(\"keys\", ['uid', 'name', 'fullOrganizerName']);\n            store.load({});\n            var fields = [{\n                xtype: 'combo',\n                queryMode: 'remote',\n                displayField: 'fullOrganizerName',\n                valueField: 'uid',\n                tpl: '<tpl for=\".\">'+'<div class=\"x-boundlist-item\">'+'{fullOrganizerName:htmlEncode}'+'</div>'+'</tpl>',\n                listConfig: {\n                    resizable: true\n                },\n                store: store,\n                editable: true,\n                forceSelection: true,\n                typeAhead: true,\n                fieldLabel: _t('Zenoss Objects'),\n                itemId: 'organizerCombo',\n                width: 225\n            }, {\n                xtype: 'button',\n                paddingLeft: 20,\n                anchor: \"20%\",\n                text: _t('Add'),\n                handler: function(btn) {\n                    var combo = btn.up('form').down('combo[itemId=\"organizerCombo\"]');\n                    if (typeof combo.getValue() !== 'undefined' && combo.getValue() !== null) {\n                        me.uids.push(combo.getValue());\n                    }\n                    var grid = btn.up('window').down('grid');\n                    grid.getStore().setBaseParam('uids', me.uids);\n                    grid.getStore().load();\n                }\n            }];\n            return fields;\n        }\n    });\n    Ext.chart.theme.White = Ext.extend(Ext.chart.theme.Base, {\n        constructor: function() {\n            Ext.chart.theme.White.superclass.constructor.call(this, {\n                axis: {\n                    stroke: 'rgb(8,69,148)',\n                    'stroke-width': 1\n                },\n                axisLabel: {\n                    fill: 'rgb(8,69,148)',\n                    font: '12px Arial',\n                    'font-family': '\"Arial',\n                    spacing: 2,\n                    padding: 5,\n                    renderer: function(v) { return v; }\n                },\n                axisTitle: {\n                    font: 'bold 18px Arial'\n                }\n            });\n        }\n    });\n\n    /**\n     *  Portlet that shows the open events by severity\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.OpenEventsChart', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.openeventsportlet',\n        height: 350,\n        title: 'Open Events Chart',\n        eventClass: \"/\",\n        summaryFilter: \"\",\n        daysPast: 3,\n        initComponent: function(){\n            Ext.applyIf(this, {\n                items:[{\n                    animate: true,\n                    xtype: 'chart',\n                    flex: 0.4,\n                    height: 180,\n                    shadow: false,\n                    store: Ext.create('Ext.data.ArrayStore', {\n                        fields: ['name', 'value'],\n                        data: []\n                    }),\n                    axes: [{\n                        type: 'Numeric',\n                        position: 'left',\n                        fields: ['value'],\n                        minorTickSteps: 0,\n                        title: _t('Open Events')\n                    },{\n                        type: 'Category',\n                        position: 'bottom',\n                        fields: ['name'],\n                        title: _t('Severity')\n                    }],\n                    theme: 'White',\n                    series: [{\n                        type: 'bar',\n                        column: true,\n                        axis: 'left',\n                        xPadding: 10,\n                        yPadding: 2,\n                        highlight: true,\n                        listeners: {\n                            itemmousedown: function(obj) {\n                                var sevs = ['clear', 'debug', 'info', 'warning', 'error', 'critical'],\n                                    severity = obj.storeItem.data.name, idx=0,\n                                    link = \"/zport/dmd/Events/evconsole?eventClass={0}&severity={1}&summary={2}\",\n                                    formatted;\n                                // find the number for the severity\n                                Ext.Array.each(sevs, function(sev) {\n                                    if (sev.toLowerCase() === severity.toLowerCase()) {\n                                        return false;\n                                    }\n                                    idx++;\n                                    return true;\n                                });\n                                formatted = Ext.String.format(link, this.eventClass, idx, this.summaryFilter);\n                                window.open(formatted,'_blank');\n                            },\n                            scope: this\n                        },\n                        renderer: function(sprite, record, attr, index, store) {\n                            var colors = [\"#d60000\",  \"#ff9711\", \"#fbd13d\", \"#0472b8\", \"#CACACA\"];\n\n                            return Ext.apply(attr, {\n                                fill: colors[index % colors.length]\n                            });\n                        },\n                        tips: {\n                            trackMouse: true,\n                            width: 190,\n                            height: 22,\n                            renderer: function(storeItem, item) {\n                                var msg = Ext.String.format(_t(\"{0} Open {1} Events.\"), storeItem.get('value'), storeItem.get('name'));\n                                this.setTitle(msg);\n                            }\n                        },\n                        label: {\n                            display: 'insideEnd',\n                            field: 'value',\n                            renderer: Ext.util.Format.numberRenderer('0'),\n                            orientation: 'horizontal',\n                            color: '#FFFFF',\n                            'text-anchor': 'middle'\n                        },\n                        xField: 'name',\n                        yField: ['value']\n                    }]\n\n                }]\n\n            });\n            this.callParent(arguments);\n            this.on('afterrender', this.fetchEvents, this, {single: true});\n        },\n        onRefresh: function() {\n            this.fetchEvents();\n        },\n        fetchEvents: function() {\n            // gets all the open events for now\n            var start = new Date(), params;\n            start.setDate(start.getDate() - this.daysPast);\n\n            params = {\n                start: 0,\n                limit: 500,\n                keys: ['severity'],\n                params: {\n                    eventClass: this.eventClass,\n                    eventState: [Zenoss.STATUS_NEW, Zenoss.STATUS_ACKNOWLEDGED],\n                    // format a time range Zep can understand\n                    lastTime: Ext.Date.format(start, Zenoss.date.ISO8601Long),\n                    summary: this.summaryFilter\n                }\n            };\n            Zenoss.remote.EventsRouter.query(params, this.loadData, this);\n        },\n        loadData: function(response) {\n            // make sure the response was success and we are already rendered\n            if (!response.success || !this.down('chart')) {\n                return;\n            }\n\n            // iterate through the events we get back from the server so we can\n            // build a store for the chart. The format ends up looking like:\n            // [[\"Critical\", 100], [\"Error\", 1], ...]\n            var store = this.down('chart').getStore(), data = [], events = response.events,\n                types = ['Critical', 'Error', 'Warning', 'Info', 'Debug'], i, counts = {\n                    'critical': 0,\n                    'error': 0,\n                    'warning': 0,\n                    'info': 0,\n                    'debug': 0\n                };\n            for (i=0;i<events.length;i++) {\n                counts[Zenoss.util.convertSeverity(events[i].severity)]++;\n            }\n\n            Ext.Array.each(types, function(type) {\n                data.push([type, counts[type.toLowerCase()]]);\n            });\n            store.loadData(data);\n        },\n        getConfig: function() {\n            return {\n                eventClass: this.eventClass,\n                summaryFilter: this.summaryFilter,\n                daysPast: this.daysPast\n            };\n        },\n        applyConfig: function(config) {\n            var refresh = false;\n            if (config.eventClass !== this.eventClass || config.summaryFilter !== this.summaryFilter || config.daysPast !== this.daysPast) {\n                refresh = true;\n            }\n            this.callParent([config]);\n            if (refresh) {\n                this.fetchEvents();\n            }\n        },\n        getCustomConfigFields: function() {\n            var fields = [{\n                xtype: 'eventclass',\n                fieldLabel: _t('Event Class'),\n                name: 'eventClass',\n                forceSelection: false,\n                autoSelect: false,\n                value: this.eventClass\n            },{\n                xtype: 'textfield',\n                name: 'summaryFilter',\n                fieldLabel: _t('Summary Filter'),\n                value: this.summaryFilter\n            }, {\n                xtype: 'numberfield',\n                minValue: 1,\n                maxValue: 30,\n                fieldLabel: _t('Number of past days to show events for'),\n                name: 'daysPast',\n                value: this.daysPast\n            }];\n            return fields;\n        }\n    });\n\n\n    /**\n     *  Portlet that shows the open events by severity\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.PastEventsChart', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.pasteventschart',\n        height: 350,\n        title: 'Past Events Line Chart',\n        eventClass: \"/\",\n        summaryFilter: \"\",\n        daysPast: 10,\n        initComponent: function(){\n            Ext.applyIf(this, {\n                items:[{\n                    xtype: 'chart',\n                    style: 'background:#fff',\n                    shadow: true,\n                    store: Ext.create('Ext.data.ArrayStore', {\n                        fields: ['time', 'critical', 'error', 'warning', 'info'],\n                        data: []\n                    }),\n                    theme: 'White',\n                    legend: {\n                        position: 'right'\n                    },\n                    axes: [{\n                        type: 'Numeric',\n                        minimum: 0,\n                        position: 'left',\n                        fields: ['critical', 'error', 'warning', 'info'],\n                        title: _t('Number of Opened Events'),\n                        minorTickSteps: 1,\n                        grid: {\n                            odd: {\n                                opacity: 1,\n                                fill: '#ddd',\n                                stroke: '#bbb',\n                                'stroke-width': 0.5\n                            }\n                        }\n                    }, {\n                        type: 'Category',\n                        position: 'bottom',\n                        fields: ['time'],\n                        title: 'Time'\n                    }],\n                    series: [{\n                        type: 'line',\n                        highlight: {\n                            size: 7,\n                            radius: 7\n                        },\n                        axis: 'left',\n                        xField: 'time',\n                        yField: 'critical',\n                        style: {\n                            stroke: \"#d60000\"\n                        },\n                        markerConfig: {\n                            size: 0,\n                            radius: 0,\n                            'stroke-width': 0,\n                            stroke: \"#d60000\"\n                        },\n                        tips: {\n                            trackMouse: true,\n                            width: 235,\n                            height: 28,\n                            renderer: function(storeItem, item) {\n                                var title = Ext.String.format(_t(\"{0} Critical Events at {1}\"), storeItem.get('critical'), storeItem.get('time'));\n                                this.setTitle(title);\n                            }\n                        }\n                    },{\n                        type: 'line',\n                        highlight: {\n                            size: 7,\n                            radius: 7\n                        },\n                        axis: 'left',\n                        xField: 'time',\n                        yField: 'error',\n                        style: {\n                            stroke: \"#ff9711\"\n                        },\n                        markerConfig: {\n                            size: 0,\n                            radius: 0,\n                            'stroke-width': 0,\n                            stroke: \"#ff9711\"\n                        },\n                        tips: {\n                            trackMouse: true,\n                            width: 235,\n                            height: 28,\n                            renderer: function(storeItem, item) {\n                                var title = Ext.String.format(_t(\"{0} Error Events at {1}\"), storeItem.get('error'), storeItem.get('time'));\n                                this.setTitle(title);\n                            }\n                        }\n                    },{\n                        type: 'line',\n                        highlight: {\n                            size: 7,\n                            radius: 7\n                        },\n                        axis: 'left',\n                        xField: 'time',\n                        yField: 'warning',\n                        style: {\n                            stroke: \"#fbd13d\"\n                        },\n                        markerConfig: {\n                            size: 0,\n                            radius: 0,\n                            'stroke-width': 0,\n                            stroke: \"#fbd13d\"\n                        },\n                        tips:{\n                            trackMouse: true,\n                            width: 235,\n                            height: 28,\n                            renderer: function(storeItem, item) {\n                                var title = Ext.String.format(_t(\"{0} Warning Events at {1}\"), storeItem.get('warning'), storeItem.get('time'));\n                                this.setTitle(title);\n                            }\n                        }\n                    },{\n                        type: 'line',\n                        highlight: {\n                            size: 7,\n                            radius: 7\n                        },\n                        axis: 'left',\n                        xField: 'time',\n                        yField: 'info',\n                        style: {\n                            stroke: \"#0472b8\"\n                        },\n                        markerConfig: {\n                            size: 0,\n                            radius: 0,\n                            'stroke-width': 0,\n                            stroke: \"#0472b8\"\n                        },\n                        tips:{\n                            trackMouse: true,\n                            width: 225,\n                            height: 28,\n                            renderer: function(storeItem, item) {\n                                var title = Ext.String.format(_t(\"{0} Info Events at {1}\"), storeItem.get('info'), storeItem.get('time'));\n                                this.setTitle(title);\n                            }\n                        }\n                    }]\n                }]\n\n            });\n            this.callParent(arguments);\n            this.on('afterrender', this.fetchEvents, this, {single: true});\n        },\n        onRefresh: function() {\n            this.fetchEvents();\n        },\n        fetchEvents: function() {\n            // gets all the open events for now\n            var lastTime = new Date(), params;\n            lastTime.setDate(lastTime.getDate() - this.daysPast);\n\n            params = {\n                start: 0,\n                limit: 5000,\n                sort: 'lastTime',\n                dir: 'ASC',\n                keys: ['severity', 'lastTime'],\n                params: {\n                    eventClass: this.eventClass,\n                    severity: [Zenoss.SEVERITY_CRITICAL, Zenoss.SEVERITY_ERROR, Zenoss.SEVERITY_WARNING, Zenoss.SEVERITY_INFO],\n                    eventState: [],\n                    // format a time range Zep can understand\n                    lastTime: Ext.Date.format(lastTime, 'time'),\n                    summary: this.summaryFilter\n                }\n            };\n            Zenoss.remote.EventsRouter.query(params, this.loadData, this);\n        },\n        loadData: function(response) {\n            // make sure the response was success and we are already rendered\n            if (!response.success || !this.down('chart')) {\n                return;\n            }\n\n            // iterate through the events we get back from the server so we can\n            // build a store for the chart.\n            var store = this.down('chart').getStore(), data = [], events = response.events, i, counts={}, event, key;\n            for (i=0; i < events.length; i++) {\n                event = events[i];\n                key = Ext.Date.format(new Date(event.lastTime * 1000), \"D ha\");\n                if (!Ext.isDefined(counts[key])) {\n                    counts[key] = {};\n                    counts[key][Zenoss.SEVERITY_CRITICAL] = 0;\n                    counts[key][Zenoss.SEVERITY_ERROR] = 0;\n                    counts[key][Zenoss.SEVERITY_WARNING] = 0;\n                    counts[key][Zenoss.SEVERITY_INFO] = 0;\n                }\n                counts[key][event.severity]++;\n            }\n\n            for (key in counts) {\n                data.push([key,\n                           counts[key][Zenoss.SEVERITY_CRITICAL],\n                           counts[key][Zenoss.SEVERITY_ERROR],\n                           counts[key][Zenoss.SEVERITY_WARNING],\n                           counts[key][Zenoss.SEVERITY_INFO]\n                          ]);\n            }\n\n            store.loadData(data);\n        },\n        getConfig: function() {\n            return {\n                eventClass: this.eventClass,\n                summaryFilter: this.summaryFilter,\n                daysPast: this.daysPast\n            };\n        },\n        applyConfig: function(config) {\n            var refresh = false;\n            if (config.eventClass !== this.eventClass || config.summaryFilter !== this.summaryFilter || config.daysPast !== this.daysPast) {\n                refresh = true;\n            }\n            this.callParent([config]);\n            if (refresh) {\n                this.fetchEvents();\n            }\n        },\n        getCustomConfigFields: function() {\n            var fields = [{\n                xtype: 'eventclass',\n                fieldLabel: _t('Event Class'),\n                name: 'eventClass',\n                forceSelection: false,\n                autoSelect: false,\n                value: this.eventClass\n            },{\n                xtype: 'textfield',\n                name: 'summaryFilter',\n                fieldLabel: _t('Summary Filter'),\n                value: this.summaryFilter\n            }, {\n                xtype: 'numberfield',\n                minValue: 1,\n                maxValue: 60,\n                fieldLabel: _t('Number of past days to show events for'),\n                name: 'daysPast',\n                value: this.daysPast\n            }];\n            return fields;\n        }\n    });\n\n\n    /**\n     * Network Map Portlet.\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.NetworkMapPortlet', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.networkmapportlet',\n        height: 350,\n        title: 'Network Map',\n        network: null,\n        depth: 3,\n        initComponent: function(){\n            this.networkMapId = Ext.id();\n            Ext.apply(this, {\n                items: [{\n                    xtype: 'container',\n                    id: this.networkMapId\n                }],\n                height: this.height\n            });\n\n            this.callParent(arguments);\n            this.on('afterrender', this.buildNetworkMap, this, {single: true});\n        },\n        destroyOldMap: function() {\n            var el = Ext.get(this.networkMapId);\n            // destroy all the children and build the map\n            while (el.dom.firstChild) {\n                el.dom.removeChild(el.dom.firstChild);\n            }\n        },\n        resizeSVG: function(panel, width, height) {\n            Ext.get(this.networkMapId).setHeight(height -10);\n            Ext.get(this.networkMapId).setWidth(width -10);\n            this.svg.attr(\"height\", height);\n            this.svg.attr(\"width\", width);\n        },\n        buildNetworkMap: function() {\n            // make sure we have a network first\n            if (!this.network) {\n                return;\n            }\n            this.destroyOldMap();\n            // resize the svg whenever we are resized\n            this.on('resize', this.resizeSVG, this);\n            var self = this, attachPoint = d3.select(\"#\" +this.networkMapId);\n            self.imageDir=\"/zport/dmd/img/icons\";\n            self.selection = \"10.171.54.0\";\n            var width = Math.max(attachPoint.style('width').replace(\"px\", \"\"), 600);\n            var height = Math.max(attachPoint.style('height').replace(\"px\", \"\"), 400);\n            self.attachPoint = attachPoint;\n\n\n            this.nodes = [];\n            this.links = [];\n            this.force = d3.layout.force()\n                .charge(-1000)\n                .theta(0)\n                .linkDistance(125)\n                .size([width, height])\n                .nodes(this.nodes)\n                .links(this.links)\n                .on(\"tick\", Ext.bind(this.tick, this));\n            this.svg = this.attachPoint.append(\"svg\")\n                .attr(\"width\", width)\n                .attr(\"height\", height);\n            self.update();\n        },\n        tick: function() {\n            var node = this.svg.selectAll(\".node\");\n            var link = this.svg.selectAll(\".link\");\n            link.attr(\"x1\", function(d) { return d.source.x; })\n                .attr(\"y1\", function(d) { return d.source.y; })\n                .attr(\"x2\", function(d) { return d.target.x; })\n                .attr(\"y2\", function(d) { return d.target.y; });\n\n            node.attr(\"transform\", function(d) { return \"translate(\" + d.x + \", \" + d.y + \")\"; });\n        },\n        onRefresh: function() {\n            this.update();\n        },\n        update: function() {\n            var self = this;\n            var node = this.svg.selectAll(\".node\");\n            var link = this.svg.selectAll(\".link\");\n            var nodeHeight = 25,\n                nodeWidth = 125;\n            Zenoss.remote.DashboardRouter.getNetworkMapData({\n                uid: self.network,\n                depth: self.depth\n            }, function(response) {\n                if (!response.success) {\n                    return;\n                }\n                var graph = response.data;\n                graph.nodes.forEach(function(n){\n                    var i =0, found = false;\n                    for (i=0; i<self.nodes.length;i++) {\n                        if (self.nodes[i].id  === n.id) {\n                            found = true;\n                        }\n                    }\n                    if (!found) {\n                        self.nodes.push(n);\n                    }\n                });\n                node = node.data(self.force.nodes(), function(d) { return d.id; });\n                var nodeContainer = node.enter()\n                    .append(\"g\")\n                    .attr(\"class\", function(d){ return \"node \" + d.id; })\n                    .call(self.force.drag);\n                nodeContainer.append(\"rect\")\n                    .attr(\"width\", function(d) {\n                        // make the box wider for longer names\n                        return Math.max(d.id.length * 8, 125);\n                    })\n                    .attr(\"height\", nodeHeight)\n                    .attr(\"transform\", \"translate(\" + -nodeWidth/2 + \", \" + -nodeHeight/2 + \")\")\n                    .attr(\"rx\", 10)\n                    .attr(\"ry\", 10)\n                    .attr(\"style\", function(d){ return \"fill:#\" + d.color.slice(2);});\n\n                nodeContainer.append(\"text\")\n                    .text(function(d){ return d.id; })\n                    .attr(\"dx\", -30)\n                    .attr(\"dy\", 5);\n                nodeContainer.append(\"svg:image\")\n                    .attr(\"xlink:href\", function(d){ return self.imageDir + \"/\" + d.icon; })\n                    .attr(\"height\", 30)\n                    .attr(\"width\", 30)\n                    .attr(\"x\", -nodeWidth/2)\n                    .attr(\"y\", -15);\n                node.exit().remove();\n\n                graph.links.forEach(function(e){\n                    var sourceNode = graph.nodes.filter(function(n) { return n.id === e.source; });\n                    var targetNode = graph.nodes.filter(function(n) { return n.id === e.target; });\n                    self.links.push({source: sourceNode[0], target: targetNode[0]});\n                });\n\n                link = link.data(self.force.links(), function(d) { return d.source.id + \"-\" + d.target.id; });\n                link.enter().insert(\"line\", \".node\")\n                    .attr(\"class\", \"link\");\n                link.exit().remove();\n\n                self.force.start();\n            });\n        },\n        getConfig: function() {\n            return {\n                network: this.network\n            };\n        },\n        applyConfig: function(config) {\n            if (config.depth) {\n                this.depth = config.depth;\n            }\n            if (this.rendered && config.network && config.network !== this.network) {\n                this.network = config.network;\n                this.buildNetworkMap();\n            }\n            this.callParent([config]);\n        },\n        getCustomConfigFields: function() {\n            var fields = [{\n                xtype: 'combo',\n                name: 'network',\n                queryMode: 'local',\n                editable: false,\n                store: new Zenoss.NonPaginatedStore({\n                    directFn: Zenoss.remote.DashboardRouter.getNetworks,\n                    root: 'data',\n                    fields: ['uid', 'name']\n                }),\n                displayField: 'name',\n                valueField: 'uid',\n                fieldLabel: _t('Network'),\n                value: this.network\n            }, {\n                xtype: 'numberfield',\n                name: 'depth',\n                fieldLabel: _t('Depth'),\n                minValue: 0,\n                maxValue: 10,\n                value: this.depth\n            }];\n            fields[0].store.load({});\n            return fields;\n        }\n    });\n\n\n\n    /**\n     * Grid view of events (a mini-event console)\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.EventViewPortlet', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.eventviewportlet',\n        height: 400,\n        title: 'Event View',\n        initComponent: function(){\n            this.eventsGrid = this.createEventsGrid();\n\n            Ext.apply(this, {\n                items: [\n                    this.eventsGrid\n                ]\n            });\n\n            this.callParent(arguments);\n        },\n        onRefresh: function() {\n            this.items.first().getStore().load();\n        },\n        stripIds: function(columns) {\n            var cols = Ext.clone(columns);\n            Ext.Array.each(cols, function(col) {\n                delete col.id;\n            });\n            return cols;\n        },\n        // no user defineable configuration for now\n        getConfig: function() {\n            return {\n                base64State: this.base64State || this.stateToBase64String()\n            };\n        },\n        applyConfig: function(config) {\n            var isEditingMode = config.previewConfig && config.previewConfig.base64State;\n            if (isEditingMode) {\n                this.base64State = config.previewConfig.base64State;\n\n                this.remove(this.eventsGrid.id);\n\n                this.eventsGrid = this.createEventsGrid();\n                this.add(this.eventsGrid);\n            }\n\n            this.callParent([config]);\n        },\n        getCustomConfigFields: function() {\n            var fields = [];\n            return fields;\n        },\n        base64StringToState: function (base64String) {\n            return Ext.decode(Zenoss.util.base64.decode(decodeURIComponent(base64String)));\n        },\n        stateToBase64String: function () {\n            return Zenoss.util.base64.encode(Ext.encode(this.eventsGrid.getState()));\n        },\n        createEventsGrid: function () {\n            var consoleId = Ext.id(),\n                columns = this.stripIds(Zenoss.env.COLUMN_DEFINITIONS),\n                me = this;\n\n            var grid = Ext.create('Zenoss.events.Grid', {\n                stateful: false,\n                id: consoleId,\n                defaultFilters: {\n                    severity: [Zenoss.SEVERITY_CRITICAL, Zenoss.SEVERITY_ERROR, Zenoss.SEVERITY_WARNING, Zenoss.SEVERITY_INFO],\n                    eventState: [Zenoss.STATUS_NEW, Zenoss.STATUS_ACKNOWLEDGED],\n                    // _managed_objects is a global function sent from the server, see ZenUI3/security/security.py\n                    tags: _managed_objects()\n                },\n                columns: columns,\n                enableTextSelection: true,\n                store: Ext.create('Zenoss.events.Store', {\n                    listeners: {\n                        load: function (store) {\n                            // work around a bug where the total wasn't displayed\n                            me.down('livegridinfopanel')._doOnScroll();\n                        }\n                    }\n                }),\n                selModel: Ext.create('Zenoss.EventPanelSelectionModel', {\n                    gridId: consoleId\n                }),\n                listeners: {\n                    afterrender: function () {\n                        var isEditingMode = this.up('editportletdialog');\n                        if (isEditingMode) {\n                            me.base64State = undefined;\n                        }\n                    }\n                }\n            });\n\n            grid.filterRow.clearFilters();\n\n            if (this.base64State) {\n                grid.applyState(this.base64StringToState(this.base64State));\n            }\n\n            return grid;\n        }\n    });\n\n    /**\n     * @class Zenoss.Dashboard.stores.TopLevelOrganizer\n     * @extend Zenoss.DirectStore\n     * Direct store for loading top level organizers\n     */\n    Ext.define(\"Zenoss.Dashboard.stores.TopLevelOrganizer\", {\n        extend: \"Zenoss.NonPaginatedStore\",\n        constructor: function(config) {\n            config = config || {};\n            Ext.applyIf(config, {\n                model: 'Zenoss.Dashboard.model.DeviceIssueModel',\n                initialSortColumn: \"name\",\n                directFn: Zenoss.remote.DashboardRouter.getTopLevelOrganizers,\n                root: 'data'\n            });\n            this.callParent(arguments);\n        }\n    });\n    /**\n     * Top Level Organizers Portlet.\n     * @extends Zenoss.Dashboard.view.Portlet\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.TopLevelOrganizersPortlet', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.toplevelorganizersportlet',\n        title: _t('Organizers'),\n        height: 400,\n        rootOrganizer: '',\n        childOrganizer: '',\n        initComponent: function() {\n            Ext.apply(this, {\n                items: [{\n                    xtype: 'grid',\n                    emptyText: _t('No records found.'),\n                    store: Ext.create('Zenoss.Dashboard.stores.TopLevelOrganizer', {}),\n                    columns: [{\n                        dataIndex: 'name',\n                        header: _t('Organizers'),\n                        flex: 1,\n                        hideable: false,\n                        renderer: function(name, row, record) {\n                            return Zenoss.render.link(record.data.uid, null, name);\n                        }\n                    },{\n                        dataIndex: 'events',\n                        header: _t('Events'),\n                        width: 120,\n                        doSort: Zenoss.Dashboard.eventSort,\n                        renderer: Zenoss.Dashboard.eventRenderer\n                    }]\n                }]\n            });\n            this.callParent(arguments);\n            this.on('afterrender', this.loadOrganizers, this, {single: true});\n        },\n        loadOrganizers: function() {\n            if (this.childOrganizer) {\n                var store = this.down('grid').getStore();\n                store.load({\n                    params: {\n                        uid: this.childOrganizer\n                    }\n                });\n            }\n        },\n        getConfig: function() {\n            return {\n                rootOrganizer: this.rootOrganizer,\n                childOrganizer: this.childOrganizer\n            };\n        },\n        applyConfig: function(config) {\n            var refresh = false;\n            if (config.childOrganizer && config.childOrganizer !== this.childOrganizer) {\n                refresh = true;\n            }\n            this.callParent([config]);\n            if (this.rendered && refresh) {\n                this.loadOrganizers();\n            }\n        },\n        onRefresh: function() {\n            this.loadOrganizers();\n        },\n        getCustomConfigFields: function() {\n            var store = Ext.create('Zenoss.Dashboard.stores.Organizer', {});\n            store.load({\n                params: {\n                    uid: this.rootOrganizer\n                }\n            });\n            var fields = [{\n                xtype: 'combo',\n                name: 'rootOrganizer',\n                queryMode: 'local',\n                store: ['Devices', 'Locations', 'Systems', 'Groups'],\n                listeners: {\n                    select: function(combo) {\n                        var rootOrganizer = combo.getValue(),\n                        childOrganizerCombo = Ext.getCmp('childOrganizerCombo'),\n                        store = childOrganizerCombo.getStore();\n                        store.load({\n                            params: {\n                                uid: rootOrganizer\n                            }\n                        });\n                        childOrganizerCombo.setValue('/zport/dmd/' + rootOrganizer);\n                        childOrganizerCombo.setDisabled(false);\n                    }\n                },\n                displayField: 'name',\n                valueField: 'uid',\n                fieldLabel: _t('Root Organizer'),\n                value: this.rootOrganizer\n            },{\n                id: 'childOrganizerCombo',\n                xtype: 'combo',\n                name: 'childOrganizer',\n                queryMode: 'local',\n                store: store,\n                displayField: 'name',\n                valueField: 'uid',\n                fieldLabel: _t('Child Organizer'),\n                disabled: !(this.childOrganizer),\n                value: this.childOrganizer\n            }];\n            return fields;\n        }\n    });\n}());\n"], "fixing_code": ["/* global _managed_objects: true */\n/*****************************************************************************\n *\n * Copyright (C) Zenoss, Inc. 2014, all rights reserved.\n *\n * This content is made available according to terms specified in\n * License.zenoss under the directory where your Zenoss product is installed.\n *\n ****************************************************************************/\n(function() {\n    Ext.ns('Zenoss.Dashboard');\n    Zenoss.Dashboard.DEFAULT_SITEWINDOW_URL = Zenoss.Dashboard.DEFAULT_SITEWINDOW_URL || \"https://www2.zenoss.com/in-app-welcome\";\n    Zenoss.Dashboard.PortletLockedTools = [{\n            xtype: 'tool',\n            itemId: 'fullscreenPortlet',\n            type: 'restore'\n        }]\n    Zenoss.Dashboard.PortletUnlockedTools = [{\n            xtype: 'tool',\n            itemId: 'fullscreenPortlet',\n            type: 'restore'\n        },{\n            xtype: 'tool',\n            itemId: 'editPortlet',\n            type: 'gear'\n        }]\n\n\n    var DATE_RANGES = [\n        [\"1h-ago\", _t('Last Hour')],\n        [\"1d-ago\", _t('Last 24 Hours')],\n        [\"7d-ago\", _t('Last Week')],\n        [\"30d-ago\", _t('Last 30 days')],\n        [\"1y-ago\", _t('Last Year')]\n    ]\n    /**\n     *  Returns the first non argument to this function. So\n     *  coalesce(null, undefined, 0, 1) will return 0\n     **/\n    function coalesce() {\n        var i;\n        for (i =0; i < arguments.length; i++) {\n            if (Ext.isDefined(arguments[i]) && arguments[i] !== null) {\n                return arguments[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     *  Creates the sorter for events. This allows portlet grids that have events to\n     *  sort based on those events.\n     **/\n    Zenoss.Dashboard.eventSort = function(state) {\n        var ds = this.up('grid').getStore();\n        var field = this.getSortParam();\n        ds.sort({\n            property: field,\n            direction: state,\n            sorterFn: function(v1, v2){\n                v1 = v1.get(field);\n                v2 = v2.get(field);\n                // give more weight to higher severity events by evaulating them first\n                var order = ['critical', 'error', 'warning'], v1Value, v2Value, i, severity;\n                for (i=0; i < order.length; i ++ ) {\n                    severity = order[i];\n                    v1Value = v1[severity].count + v1[severity].acknowledged_count;\n                    v2Value = v2[severity].count + v2[severity].acknowledged_count;\n                    if (v2Value || v1Value) {\n                        return v1Value > v2Value ? 1 : (v1Value < v2Value ? -1 : 0);\n                    }\n                }\n                return 1;\n            }\n        });\n    };\n    Zenoss.Dashboard.eventRenderer = function(value, metaData, record) {\n        var table = Zenoss.render.events(value),\n            uid = record.data.uid,\n            url;\n\n        // no table return empty string in case of null/undefined/false (to not show that in view);\n        if (!table) return '';\n\n        if (uid.indexOf('/devices/') < 0) {\n            url = Zenoss.render.link(false, '/zport/dmd/itinfrastructure#devices:'+uid.replace(/\\//g, '.'));\n        } else {\n            url = Zenoss.render.link(false, uid + '/devicedetail?filter=default#deviceDetailNav:device_events');\n        }\n        return table.replace('<table', '<table onclick=\"location.href=\\''+url+'\\';\" ');\n    };\n\n    /**\n     * @class Zenoss.Dashboard.view.Portlet\n     * @extends Ext.panel.Panel\n     * A {@link Ext.panel.Panel Panel} class that is managed by {@link Zenoss.dashboard.view.DashboardPanel}.\n     * This is the base class for all portlets.\n     */\n    Ext.define('Zenoss.Dashboard.view.Portlet', {\n        extend: 'Ext.panel.Panel',\n        alias: 'widget.portlet',\n        title: '',\n        layout: 'fit',\n        anchor: '100%',\n        frame: true,\n        resizable:true,\n        resizeHandles: 's',\n        closable: true,\n        collapsible: true,\n        animCollapse: true,\n        height: 200,\n        minHeight: 200,\n        minWidth: 200,\n        draggable: {\n            moveOnDrag: false\n        },\n        cls: 'x-portlet',\n        tools: Zenoss.Dashboard.PortletUnlockedTools,\n        // defeault to refresh every 5 minutes\n        refreshInterval: 300,\n        // Override Panel's default doClose to provide a custom fade out effect\n        // when a portlet is removed from the portal\n        doClose: function() {\n            if (!this.closing) {\n                this.closing = true;\n                this.el.animate({\n                    opacity: 0,\n                    callback: function(){\n                        this.fireEvent('close', this);\n                        this[this.closeAction]();\n                    },\n                    scope: this\n                });\n            }\n        },\n        getTitle: function() {\n            return this.title;\n        },\n        constructor: function(config) {\n            this.applyConfig(config.config || {});\n            this.callParent([config]);\n        },\n        initComponent: function(){\n            this.addEvents(\n                /**\n                 * @event refresh\n                 * Fires when the portlet is set to refresh\n                 * @param {Zenoss.Dashboard.view.Portlet} this\n                 */\n                'refresh',\n                /**\n                 * @event applyconfig\n                 * Fires immediately after the config has been updated on a portlet\n                 * @param {Zenoss.Dashboard.view.Portlet} this\n                 */\n                'applyconfig'\n            );\n\n            this.callParent(arguments);\n            this.on('afterrender', this.startRefresh, this, {single: true});\n            this.on('beforedestroy', this.destroyRefresh, this, {single:true});\n        },\n        destroyRefresh: function() {\n            Ext.TaskManager.stop(this.refreshTask);\n            delete this.refreshTask;\n        },\n        startRefresh: function() {\n            this.refreshTask = Ext.TaskManager.start({\n                run: Ext.bind(this.refresh, this),\n                interval: this.refreshInterval * 1000,\n                fireOnStart: false\n            });\n        },\n        refresh: function() {\n            this.fireEvent('refresh', this);\n            this.onRefresh();\n        },\n        /**\n         * Template method for what happens when a portlet\n         * refreshes.\n         **/\n        onRefresh: function() {\n\n        },\n        /**\n         * Template method that is called when we are\n         * fetching the configuration for this portlet.\n         * Anything that can be set by the configuration display should\n         * be returned here;\n         **/\n        getConfig: function() {\n            return null;\n        },\n        getConfigFields: function() {\n            var fields = [{\n                xtype: 'textfield',\n                fieldLabel: _t('Title'),\n                name: 'title',\n                value: this.getTitle(),\n                allowBlank: false\n            },{\n                xtype: 'numberfield',\n                name: 'height',\n                fieldLabel: _t('Height'),\n                value: this.getEl() ? this.getHeight() : this.height,\n                minValue: 10\n            }, {\n                xtype: 'numberfield',\n                name: 'refreshInterval',\n                fieldLabel: _t('Refresh Interval (seconds)'),\n                value: this.refreshInterval,\n                // some of the portlets might be expensive\n                // so keep the min refresh sane\n                minValue: 5\n            }];\n\n            return fields.concat(this.getCustomConfigFields());\n        },\n        /**\n         * Template method that is called when displaying the configuration fields\n         * for this portlet.\n         * It is expected that the subclasses will return an array of objects\n         **/\n        getCustomConfigFields: function() {\n            return [];\n        },\n        applyConfig: function(config) {\n            if (config.height && config.height !== this.height) {\n                this.height = config.height;\n                if (this.getEl()) {\n                    this.setHeight(config.height);\n                }\n            }\n            if (config.title) {\n                this.setTitle(Ext.htmlEncode(config.title));\n            }\n\n            // update the refresh interval\n            if (config.refreshInterval && config.refreshInterval !== this.refreshInterval) {\n                this.refreshTask.interval = config.refreshInterval * 1000;\n            }\n\n            // by default apply all the config properties to this object\n            Ext.apply(this, config);\n            this.fireEvent('applyconfig', this);\n        },\n        lock: function() {\n            this.resizable = false\n            this.collapsible = false\n            this.closable = false\n            Ext.apply(this, {tools: Zenoss.Dashboard.PortletLockedTools})\n        },\n        unlock: function() {\n            this.resizable = true\n            this.collapsible = true\n            this.closable = true\n            Ext.apply(this, {tools: Zenoss.Dashboard.PortletUnlockedTools})\n        },\n        /** @private */\n        setBox: function (box) {\n            // The resizer calls setBox which would set our left/top coordinates but\n            // that is a BAD thing in a column layout which relies on flow!\n            this.setSize(box.width, box.height);\n        }\n    });\n\n\n    /**\n     * A simple portlet that lets users define custom HTML to be displayed\n     * on the application dashboard. This will execute any javascript that is\n     * written.\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.HTMLPortlet', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.htmlportlet',\n        height: 100,\n        title: 'HTML Portlet',\n        content: \"<h1>Blank HTMLPortlet</h1>\",\n        initComponent: function(){\n\n            Ext.apply(this, {\n                html: this.content\n            });\n\n            this.callParent(arguments);\n        },\n        getConfig: function() {\n            return {\n                html: this.content\n            };\n        },\n        applyConfig: function(config) {\n            if (config.html && config.html !== this.content) {\n                config.html = this.convertToValidHTMLString(config.html);\n\n                this.content = config.html;\n                this.update(config.html, true);\n            }\n            this.callParent([config]);\n        },\n        getCustomConfigFields: function() {\n            var fields = [{\n                xtype: 'textarea',\n                fieldLabel: _t('Content'),\n                name: 'html',\n                value: this.content,\n                allowBlank: false,\n                height: 100,\n                width: 200,\n                listeners: {\n                    afterrender: function(me) {\n                        Ext.tip.QuickTipManager.register({\n                            target: me.getId(),\n                            title : 'Warning',\n                            text  : 'Your HTML will be processed according to security rules'\n                        });\n                    }\n                }\n            }];\n            return fields;\n        },\n        onRefresh: function() {\n            var me = this,\n                ctrl = window.globalApp.getController(\"DashboardController\"),\n                idAsArray = ctrl.getCurrentDashboard().id.split(\"/\"),\n                id = idAsArray[idAsArray.length -1],\n                portletId = me.ownerCt.id;\n            ctrl.getDashboardSelecter().getStore().load({\n                callback: function() {\n                    var combo = this.getDashboardSelecter(),\n                        record = combo.getStore().findRecord('id', id);\n                    if (record) {\n                        var obj = Ext.JSON.decode(record.get(\"state\"));\n                        for (var i in obj) {\n                            if (obj[i].id === portletId) {\n                                me.config = obj[i].items[0].config;\n                                me.applyConfig(me.config);\n                                me.title = obj[i].items[0].title;\n                                me.refreshInterval = obj[i].items[0].refreshInterval;\n                                me.height = obj[i].items[0].height;\n                            }\n                        }\n                    }\n                },\n                scope: ctrl\n            });\n            return {\n                html: this.content\n            };\n        },\n        convertToValidHTMLString: function (HTMLString) {\n            var tempDiv = document.createElement('div');\n            tempDiv.innerHTML = Zenoss.util.sanitizeHtml(HTMLString);\n\n            return tempDiv.innerHTML;\n        }\n    });\n\n    /**\n     * @class Zenoss.Dashboard.stores.Organizer\n     * @extend Zenoss.DirectStore\n     * Direct store for loading organizers\n     */\n    Ext.define(\"Zenoss.Dashboard.stores.Organizer\", {\n        extend: \"Zenoss.NonPaginatedStore\",\n        constructor: function(config) {\n            config = config || {};\n            Ext.applyIf(config, {\n                model: 'Zenoss.Dashboard.model.DeviceIssueModel',\n                initialSortColumn: \"name\",\n                directFn: Zenoss.remote.DashboardRouter.getSubOrganizers,\n                root: 'data'\n            });\n            this.callParent(arguments);\n        }\n    });\n\n    /**\n     * Portlet that displays the map for locations\n     *\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.GoogleMaps', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.googlemapportlet',\n        title: _t('Google Maps'),\n        height: 400,\n        pollingrate: 400,\n        baselocation: \"/zport/dmd/Locations\",\n        initComponent: function(){\n\n            Ext.apply(this, {\n                initlocation: this.baselocation,\n                items: [{\n                    xtype: 'uxiframe',\n                    ref: 'mapIframe',\n                    src: this.getIFrameSource()\n                }]\n            });\n\n            this.callParent(arguments);\n        },\n        getIFrameSource: function() {\n            var location = Zenoss.render.link(null, this.baselocation);\n            if (location.indexOf('/zport/dmd/Locations') < 0) {\n                return null;\n            }\n            return Ext.String.format('{0}/simpleLocationGeoMap?polling={1}', location, this.pollingrate);\n        },\n        getConfig: function() {\n            return {\n                baselocation: this.baselocation || this.initlocation,\n                pollingrate: this.pollingrate\n            };\n        },\n        applyConfig: function(config) {\n            this.callParent([config]);\n            if (this.rendered){\n                this.onRefresh();\n            }\n        },\n        onRefresh: function() {\n            var iframeCmp = this.down('uxiframe'),\n                newSrc = this.getIFrameSource();\n            if (newSrc) {\n                iframeCmp.load(newSrc);\n            }\n        },\n        getCustomConfigFields: function() {\n            var me = this;\n\n            var store = Ext.create('Zenoss.Dashboard.stores.Organizer', {});\n            store.load({\n                params: {\n                    uid: \"/zport/dmd/Locations\"\n                },\n                callback: function(records, operation, success) {\n                    if (success && records.length) {\n                        me.up('form').isValid();\n                    }\n                }\n            });\n\n            var fields = [{\n                xtype: 'combo',\n                forceSelection: true,\n                name: 'baselocation',\n                queryMode: 'local',\n                store: store,\n                displayField: 'name',\n                valueField: 'uid',\n                locationRegExp: new RegExp('/zport/dmd/Locations'),\n                validator: function() {\n                    var value = this.getValue(),\n                        valid = this.locationRegExp.test(value);\n                    return valid ? true : this.invalidText;\n                },\n                fieldLabel: _t('Base Location'),\n                value: this.baselocation,\n                allowBlank: false\n            }, {\n                xtype: 'numberfield',\n                name: 'pollingrate',\n                fieldLabel: _t('Geocode Polling Rate'),\n                value: this.pollingrate\n            }];\n            return fields;\n        }\n    });\n\n\n\n    /**\n     * Portlet that loads a Multi-Graph Report\n     *\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.MultiGraphReportPortlet', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.multigraphreportportlet',\n        title: _t('Multi-Graph Report'),\n        height: 400,\n        refreshInterval: 30,\n        reportUid: '',\n        graphGroup: '',\n        drange: '',\n        directFn: function(params){\n            params.graphGroup = this.graphGroup\n            return Zenoss.remote.ReportRouter.getMultiGraphReportDefs.apply(null, arguments)\n        },\n        initComponent: function () {\n\n            Ext.apply(this, {\n                items: [{\n                    xtype: 'panel',\n                    ref: 'graph_reports',\n                    bodyStyle: {\n                        overflow: 'auto'\n                    }\n                }]\n            });\n            this.callParent(arguments);\n        },\n        startRefresh: function() {\n            this.refreshTask = Ext.TaskManager.start({\n                run: Ext.bind(this.refresh, this),\n                interval: this.refreshInterval * 1000,\n                fireOnStart: true\n            });\n        },\n        getConfig: function() {\n            return {\n                reportUid: this.reportUid,\n                graphGroup: this.graphGroup,\n                drange: this.drange\n            };\n        },\n        applyConfig: function(config) {\n            this.callParent([config]);\n            if (this.rendered){\n                this.onRefresh();\n            }\n        },\n        onRefresh: function() {\n            if (this.reportUid === undefined || this.reportUid == '') {\n                return;\n            }\n            this.graph_reports.removeAll();\n            var graphs = Ext.create('Zenoss.form.GraphPanel', {\n                    newWindowButton: false,\n                    directFn: Ext.bind(this.directFn, this),\n                    columns: 1,\n                    drange: this.drange\n                }),\n                tb = graphs.toolbar,\n                btn = tb.query(\"graphrefreshbutton\"),\n                tbtitle = tb.query(\"tbtext\"),\n                seps = tb.query(\"tbseparator\"),\n                comps = btn.concat(tbtitle).concat(seps);\n            Ext.Array.each(comps, function(comp) {\n                comp.hide();\n            });\n            graphs.setContext(this.reportUid);\n            this.graph_reports.add(graphs);\n        },\n        getCustomConfigFields: function () {\n            var groupStore = new Zenoss.NonPaginatedStore({\n                directFn: Zenoss.remote.DashboardRouter.getMultiGraphReportGroups,\n                fields: ['id']\n            })\n            var fields = [{\n                xtype: 'combo',\n                name: 'reportUid',\n                queryMode: 'local',\n                store: new Zenoss.NonPaginatedStore({\n                    initialSortColumn: \"name\",\n                    directFn: Zenoss.remote.DashboardRouter.getMultiGraphReports,\n                    root: 'data',\n                    fields: ['uid', 'name']\n                }),\n                listeners: {\n                    select: function (combo) {\n                        var reportID = combo.getValue(),\n                            graphGroupCombo = Ext.getCmp('graphGroupCombo'),\n                            store = graphGroupCombo.getStore();\n                        store.load({\n                            params: {\n                                uid: reportID\n                            }\n                        });\n                        graphGroupCombo.setDisabled(false);\n                    }\n                },\n                displayField: 'name',\n                valueField: 'uid',\n                fieldLabel: _t('Multi-Graph Report (created on Reports screen)'),\n                value: this.reportUid\n            }, {\n                id: 'graphGroupCombo',\n                xtype: 'combo',\n                name: 'graphGroup',\n                queryMode: 'local',\n                store: groupStore,\n                displayField: 'id',\n                valueField: 'id',\n                fieldLabel: _t('Graph Group'),\n                disabled: !(this.graphGroup),\n                value: this.graphGroup\n            }, {\n                id: \"rangePicker\",\n                xtype:'combo',\n                fieldLabel: _t('Range'),\n                name: 'drange',\n                editable: false,\n                forceSelection: true,\n                autoSelect: true,\n                value: '1h-ago',\n                queryMode: 'local',\n                valueField: 'id',\n                displayField: 'name',\n                store: new Ext.data.ArrayStore({\n                    id: 0,\n                    model: 'Zenoss.model.IdName',\n                    data: DATE_RANGES\n                })\n            }\n            ];\n            fields[0].store.load({});\n            return fields;\n        }\n    });\n\n\n    /**\n     * Portlet that loads an Iframe.\n     *\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.SiteWindowPortlet', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.sitewindowportlet',\n        title: _t('Site Window'),\n        height: 400,\n        // since it's a url it doesn't really need to refresh all that often\n        refreshInterval: 3000,\n        siteUrl: Zenoss.Dashboard.DEFAULT_SITEWINDOW_URL,\n        initComponent: function(){\n\n            // for the default show specific welcome to this product and version\n            if (this.siteUrl === Zenoss.Dashboard.DEFAULT_SITEWINDOW_URL) {\n                this.siteUrl += '?v=' + Zenoss.env.ZENOSS_VERSION + '&p=' + Zenoss.env.ZENOSS_PRODUCT;\n            }\n            Ext.apply(this, {\n                items: [{\n                    xtype: 'uxiframe',\n                    ref: 'mapIframe',\n                    src: this.getIFrameSource()\n                }]\n            });\n            this.callParent(arguments);\n        },\n        getIFrameSource: function() {\n            return this.siteUrl;\n        },\n        getConfig: function() {\n            return {\n                siteUrl: this.siteUrl\n            };\n        },\n        applyConfig: function(config) {\n            var form = this.up('form');\n            if (form && form.isValid()) {\n                // ensure we are protected from xss\n                config.siteUrl = Ext.String.htmlEncode(config.siteUrl);\n                this.callParent([config]);\n                if (this.rendered){\n                    this.onRefresh();\n                }\n            }\n        },\n        onRefresh: function() {\n            this.down('uxiframe').load(this.getIFrameSource());\n        },\n        getCustomConfigFields: function() {\n            var fields = [{\n                xtype: 'textfield',\n                name: 'siteUrl',\n                fieldLabel: _t('Site URL'),\n                value: this.siteUrl,\n                validateOnBlur: true,\n                validator: function(siteUrl) {\n                    var urlPattern = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n                    if (!urlPattern.test(siteUrl)) {\n                        return \"invalid URL\"\n                    }\n                    return true;\n                }\n            }];\n            return fields;\n        }\n    });\n\n\n\n    /**\n     * @class Zenoss.Dashboard.model.DeviceIssueModel\n     * @extends Ext.data.Model\n     * Field definitions for the device issues grid\n     **/\n    Ext.define('Zenoss.Dashboard.model.DeviceIssueModel',  {\n        extend: 'Ext.data.Model',\n        idProperty: 'uid',\n        fields: [\n            {name: 'uid'},\n            {name: 'name'},\n            {name: 'fullOrganizerName', convert: function(v, record) {\n                if (v) {\n                    return v;\n                }\n                return record.get(\"name\");\n            }},\n            {name: 'events'},\n            {name: 'icon'}\n        ]\n    });\n\n    /**\n     * @class Zenoss.Dashboard.stores.DeviceIssues\n     * @extend Zenoss.DirectStore\n     * Direct store for loading organizers\n     */\n    Ext.define(\"Zenoss.Dashboard.stores.DeviceIssues\", {\n        extend: \"Zenoss.NonPaginatedStore\",\n        constructor: function(config) {\n            config = config || {};\n            Ext.applyIf(config, {\n                model: 'Zenoss.Dashboard.model.DeviceIssueModel',\n                initialSortColumn: \"name\",\n                directFn: Zenoss.remote.DashboardRouter.getDeviceIssues,\n                root: 'data'\n            });\n            this.callParent(arguments);\n        }\n    });\n\n    /**\n     * Device Issues Portlet. Shows devices that have events\n     * @extends Zenoss.Dashboard.view.Portlet\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.DeviceIssues', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.deviceissuesportlet',\n        title: _t('Device Issues'),\n        height: 400,\n        initComponent: function(){\n            var store = Ext.create('Zenoss.Dashboard.stores.DeviceIssues', {});\n            store.load({\n                params: {\n                    keys: Ext.pluck(Zenoss.Dashboard.model.DeviceIssueModel.prototype.fields.items, 'name')\n                }\n            });\n\n            Ext.apply(this, {\n                items: [{\n                    xtype: 'grid',\n                    emptyText: _t('No records found.'),\n                    store: store,\n                    columns: [{\n                        dataIndex:'icon',\n                        header: _t('Icon'),\n                        width: 40,\n                        renderer: function(value) {\n                            return Ext.String.format(\"<image height=\\\"32\\\"src='{0}' />\", value);\n                        }\n                    },{\n                        dataIndex: 'name',\n                        header: _t('Device'),\n                        flex: 1,\n                        hideable: false,\n                        renderer: function(name, row, record) {\n                            return Zenoss.render.Device(record.data.uid, name);\n                        }\n                    },{\n                        width: 175,\n                        dataIndex: 'events',\n                        header: _t('Events'),\n                        sortable: true,\n                        doSort: Zenoss.Dashboard.eventSort,\n                        renderer: Zenoss.Dashboard.eventRenderer\n                    }]\n                }]\n            });\n            this.callParent(arguments);\n        },\n        onRefresh: function() {\n            var store = this.down('grid').getStore();\n            store.load({\n                params: {\n                    keys: Ext.pluck(Zenoss.Dashboard.model.DeviceIssueModel.prototype.fields.items, 'name')\n                }\n            });\n        }\n    });\n\n\n    /**\n     * @class Zenoss.Dashboard.model.DaemonProcessDown\n     * @extends Ext.data.Model\n     * Field definitions for the Daemon Process Down Grid\n     **/\n    Ext.define('Zenoss.Dashboard.model.DaemonProcessDown',  {\n        extend: 'Ext.data.Model',\n        idProperty: 'process',\n        fields: [\n            {name: 'host'},\n            {name: 'process'},\n            {name: 'secondsDown'}\n        ]\n    });\n\n    /**\n     * @class Zenoss.Dashboard.stores.DaemonProcessDown\n     * @extend Zenoss.DirectStore\n     */\n    Ext.define(\"Zenoss.Dashboard.stores.DaemonProcessDownStore\", {\n        extend: \"Zenoss.NonPaginatedStore\",\n        constructor: function(config) {\n            config = config || {};\n            Ext.applyIf(config, {\n                model: 'Zenoss.Dashboard.model.DaemonProcessDown',\n                initialSortColumn: \"process\",\n                autoLoad: true,\n                directFn: Zenoss.remote.DashboardRouter.getDaemonProcessesDown,\n                root: 'data'\n            });\n            this.callParent(arguments);\n        }\n    });\n\n    /**\n     * Daemon Processes Down Portlet. Shows daemons that are down by the heart beat\n     * @extends Zenoss.Dashboard.view.Portlet\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.DaemonProcessDown', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.daemonprocessportlet',\n        title: _t('Daemon Processes Down'),\n        height: 250,\n        initComponent: function(){\n            Ext.apply(this, {\n                items: [{\n                    xtype: 'grid',\n                    emptyText: _t('No records found.'),\n                    store: Ext.create('Zenoss.Dashboard.stores.DaemonProcessDownStore', {}),\n                    columns: [{\n                        dataIndex:'host',\n                        header: _t('Host'),\n                        width: 120,\n                        renderer: function(url) {\n                            return Ext.String.format(\"{0}\", url);\n                        }\n                    },{\n                        dataIndex: 'process',\n                        header: _t('Daemon Process'),\n                        flex: 1,\n                        hideable: false\n                    },{\n                        width: 120,\n                        dataIndex: 'secondsDown',\n                        header: _t('Seconds Down'),\n                        align: 'right',\n                        sortable: false\n                    },{\n                        dataIndex: 'monitor',\n                        header: _t('Monitor'),\n                        with: 120,\n                        hideable: false\n                    }]\n                }]\n            });\n            this.callParent(arguments);\n        },\n        onRefresh: function() {\n            this.down('grid').getStore().load();\n        }\n    });\n\n    /**\n     * Production State Portlet. Shows a list of devices and their production state.\n     * TODO: This could probably be refactored into a generic device list portlet, like a \"device view\"\n     * @extends Zenoss.Dashboard.view.Portlet\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.ProductionState', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.productionstateportlet',\n        title: _t('Production States'),\n        height: 250,\n        productionStates: [300],\n        initComponent: function(){\n            Zenoss.env.initProductionStates();\n            var store = Ext.create('Zenoss.DeviceStore', {});\n            this.getAllProductionState();\n            store.setBaseParam('uid', '/zport/dmd/Devices');\n            store.setBaseParam('keys', ['uid', 'name', 'productionState']);\n            store.setParamsParam('productionState', this.productionStates);\n            store.load();\n            Ext.apply(this, {\n                items: [{\n                    xtype: 'grid',\n                    emptyText: _t('No records found.'),\n                    store: store,\n                    columns: [{\n                        dataIndex: 'name',\n                        header: _t('Device'),\n                        flex: 1,\n                        hideable: false,\n                        renderer: function(name, row, record) {\n                            return Zenoss.render.Device(record.data.uid, name);\n                        }\n                    },{\n                        dataIndex: 'productionState',\n                        header: _t('Production State'),\n                        hideable: false,\n                        tooltip: 'Production States Sorted by Numeric value in State Conversions defined in Settings',\n                        renderer: function(value) {\n                            return Zenoss.env.PRODUCTION_STATES_MAP[value];\n                        }\n                    }]\n                }]\n            });\n            this.callParent(arguments);\n        },\n        onRefresh: function() {\n            this.down('grid').getStore().load();\n        },\n        getConfig: function() {\n            return {\n                productionStates: this.productionStates\n            };\n        },\n        getAllProductionState: function() {\n            Zenoss.remote.DeviceRouter.getProductionStates({},\n                function(result) {\n                    if (result.success) {\n                        Zenoss.env.PRODUCTION_STATES = [];\n                        Zenoss.env.PRODUCTION_STATES_MAP = {};\n                        Ext.each(result.data, function(item) {\n                            Zenoss.env.PRODUCTION_STATES.push(item);\n                            Zenoss.env.PRODUCTION_STATES_MAP[item.value] = item.name;\n                        });\n                    };\n                }\n            );\n        },\n        applyConfig: function(config) {\n            if (this.rendered) {\n                var grid = this.down('grid');\n                if (config.productionStates) {\n                    grid.getStore().setParamsParam('productionState', config.productionStates);\n                    grid.getStore().load();\n                }\n            }\n            this.callParent([config]);\n        },\n        getCustomConfigFields: function() {\n            var me = this;\n            var fields = [{\n                xtype: 'ProductionStateCombo',\n                fieldLabel: _t('Production State'),\n                name: 'productionStates',\n                // bug with multi select combo where we have to update the\n                // value after we have rendered otherwise it wont take effect\n                value: me.productionStates,\n                listeners: {\n                    afterrender: function(combo) {\n                        combo.setValue(me.productionStates);\n                    }\n                },\n                multiSelect: true,\n                height: 100,\n                width: 200\n            }];\n            return fields;\n        }\n    });\n\n    /**\n     * @class Zenoss.Dashboard.stores.WatchListTargets\n     * @extend Zenoss.DirectStore\n     * Direct store for loading organizers\n     */\n    Ext.define(\"Zenoss.Dashboard.stores.WatchListTargets\", {\n        extend: \"Zenoss.NonPaginatedStore\",\n        constructor: function(config) {\n            config = config || {};\n            Ext.applyIf(config, {\n                model: 'Zenoss.Dashboard.model.DeviceIssueModel',\n                initialSortColumn: \"name\",\n                directFn: Zenoss.remote.DashboardRouter.getWatchListTargets,\n                root: 'data'\n            });\n            this.callParent(arguments);\n        }\n    });\n\n    /**\n     * @class Zenoss.Dashboard.stores.WatchListStore\n     * @extend Zenoss.DirectStore\n     * Direct store for loading organizers\n     */\n    Ext.define(\"Zenoss.Dashboard.stores.WatchListStore\", {\n        extend: \"Zenoss.NonPaginatedStore\",\n        constructor: function(config) {\n            config = config || {};\n            Ext.applyIf(config, {\n                model: 'Zenoss.Dashboard.model.DeviceIssueModel',\n                initialSortColumn: \"name\",\n                directFn: Zenoss.remote.DashboardRouter.getInfos,\n                root: 'data'\n            });\n            this.callParent(arguments);\n        }\n    });\n\n    /**\n     * Watch List Portlet. Shows a collection organizers and events on those organizers\n     * @extends Zenoss.Dashboard.view.Portlet\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.WatchList', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.watchlistportlet',\n        title: _t('Watch List'),\n        height: 300,\n        uids: [],\n        initComponent: function(){\n            var me = this,\n                store = Ext.create('Zenoss.Dashboard.stores.WatchListStore', {});\n            store.setBaseParam('uids', this.uids);\n            store.setBaseParam('keys', Ext.pluck(Zenoss.Dashboard.model.DeviceIssueModel.prototype.fields.items, 'name'));\n            store.load();\n            Ext.apply(this, {\n                items: [{\n                    xtype: 'grid',\n                    emptyText: _t('No records found.'),\n                    store: store,\n                    columns: [{\n                        dataIndex: 'name',\n                        header: _t('Object'),\n                        flex: 1,\n                        hideable: false,\n                        renderer: function(name, row, record) {\n                            return Zenoss.render.link(record.data.uid, null, name);\n                        }\n                    },{\n                        dataIndex: 'events',\n                        header: _t('Events'),\n                        width: 120,\n                        hideable: false,\n                        doSort: Zenoss.Dashboard.eventSort,\n                        renderer: Zenoss.Dashboard.eventRenderer\n                    }, {\n                        xtype: 'actioncolumn',\n                        width: 60,\n                        handler: function(grid, rowIndex){\n                            // get the record and remove it from the store\n                            var store = grid.getStore(), record = store.getAt(rowIndex);\n                            // filter out the remove uid\n                            me.uids = Zenoss.util.filter(me.uids, function(uid) {\n                                return uid !== record.get('uid');\n                            });\n                            // update the store params\n                            store.setBaseParam('uids', me.uids);\n                            store.remove(record);\n                            if (!grid.up(\"window\")) {\n                                window.globalApp.getController(\"DashboardController\").saveDashboardState();\n                            }\n                        },\n                        align: \"center\",\n                        text: _t('Remove'),\n                        icon: \"/++resource++extjs/examples/restful/images/delete.png\",\n                        altText: _t('Remove')\n                    }]\n                }]\n            });\n            this.callParent(arguments);\n        },\n        onRefresh: function() {\n            this.down('grid').getStore().load();\n        },\n        getConfig: function() {\n            return {\n                uids: this.uids\n            };\n        },\n        applyConfig: function(config) {\n            if (this.rendered) {\n                var grid = this.down('grid');\n                if (config.previewConfig) {\n                    this.uids = config.previewConfig.uids;\n                    grid.getStore().setBaseParam('uids', this.uids);\n                    grid.getStore().load();\n                } else {\n                    grid.getStore().load();\n                }\n\n            }\n            this.callParent([config]);\n        },\n        getCustomConfigFields: function() {\n            var me = this,\n                store = Ext.create('Zenoss.Dashboard.stores.WatchListTargets', {\n                    sorters: [{\n                        property: 'fullOrganizerName',\n                        direction: 'ASC'\n                    }]\n                });\n            store.setBaseParam(\"keys\", ['uid', 'name', 'fullOrganizerName']);\n            store.load({});\n            var fields = [{\n                xtype: 'combo',\n                queryMode: 'remote',\n                displayField: 'fullOrganizerName',\n                valueField: 'uid',\n                tpl: '<tpl for=\".\">'+'<div class=\"x-boundlist-item\">'+'{fullOrganizerName:htmlEncode}'+'</div>'+'</tpl>',\n                listConfig: {\n                    resizable: true\n                },\n                store: store,\n                editable: true,\n                forceSelection: true,\n                typeAhead: true,\n                fieldLabel: _t('Zenoss Objects'),\n                itemId: 'organizerCombo',\n                width: 225\n            }, {\n                xtype: 'button',\n                paddingLeft: 20,\n                anchor: \"20%\",\n                text: _t('Add'),\n                handler: function(btn) {\n                    var combo = btn.up('form').down('combo[itemId=\"organizerCombo\"]');\n                    if (typeof combo.getValue() !== 'undefined' && combo.getValue() !== null) {\n                        me.uids.push(combo.getValue());\n                    }\n                    var grid = btn.up('window').down('grid');\n                    grid.getStore().setBaseParam('uids', me.uids);\n                    grid.getStore().load();\n                }\n            }];\n            return fields;\n        }\n    });\n    Ext.chart.theme.White = Ext.extend(Ext.chart.theme.Base, {\n        constructor: function() {\n            Ext.chart.theme.White.superclass.constructor.call(this, {\n                axis: {\n                    stroke: 'rgb(8,69,148)',\n                    'stroke-width': 1\n                },\n                axisLabel: {\n                    fill: 'rgb(8,69,148)',\n                    font: '12px Arial',\n                    'font-family': '\"Arial',\n                    spacing: 2,\n                    padding: 5,\n                    renderer: function(v) { return v; }\n                },\n                axisTitle: {\n                    font: 'bold 18px Arial'\n                }\n            });\n        }\n    });\n\n    /**\n     *  Portlet that shows the open events by severity\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.OpenEventsChart', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.openeventsportlet',\n        height: 350,\n        title: 'Open Events Chart',\n        eventClass: \"/\",\n        summaryFilter: \"\",\n        daysPast: 3,\n        initComponent: function(){\n            Ext.applyIf(this, {\n                items:[{\n                    animate: true,\n                    xtype: 'chart',\n                    flex: 0.4,\n                    height: 180,\n                    shadow: false,\n                    store: Ext.create('Ext.data.ArrayStore', {\n                        fields: ['name', 'value'],\n                        data: []\n                    }),\n                    axes: [{\n                        type: 'Numeric',\n                        position: 'left',\n                        fields: ['value'],\n                        minorTickSteps: 0,\n                        title: _t('Open Events')\n                    },{\n                        type: 'Category',\n                        position: 'bottom',\n                        fields: ['name'],\n                        title: _t('Severity')\n                    }],\n                    theme: 'White',\n                    series: [{\n                        type: 'bar',\n                        column: true,\n                        axis: 'left',\n                        xPadding: 10,\n                        yPadding: 2,\n                        highlight: true,\n                        listeners: {\n                            itemmousedown: function(obj) {\n                                var sevs = ['clear', 'debug', 'info', 'warning', 'error', 'critical'],\n                                    severity = obj.storeItem.data.name, idx=0,\n                                    link = \"/zport/dmd/Events/evconsole?eventClass={0}&severity={1}&summary={2}\",\n                                    formatted;\n                                // find the number for the severity\n                                Ext.Array.each(sevs, function(sev) {\n                                    if (sev.toLowerCase() === severity.toLowerCase()) {\n                                        return false;\n                                    }\n                                    idx++;\n                                    return true;\n                                });\n                                formatted = Ext.String.format(link, this.eventClass, idx, this.summaryFilter);\n                                window.open(formatted,'_blank');\n                            },\n                            scope: this\n                        },\n                        renderer: function(sprite, record, attr, index, store) {\n                            var colors = [\"#d60000\",  \"#ff9711\", \"#fbd13d\", \"#0472b8\", \"#CACACA\"];\n\n                            return Ext.apply(attr, {\n                                fill: colors[index % colors.length]\n                            });\n                        },\n                        tips: {\n                            trackMouse: true,\n                            width: 190,\n                            height: 22,\n                            renderer: function(storeItem, item) {\n                                var msg = Ext.String.format(_t(\"{0} Open {1} Events.\"), storeItem.get('value'), storeItem.get('name'));\n                                this.setTitle(msg);\n                            }\n                        },\n                        label: {\n                            display: 'insideEnd',\n                            field: 'value',\n                            renderer: Ext.util.Format.numberRenderer('0'),\n                            orientation: 'horizontal',\n                            color: '#FFFFF',\n                            'text-anchor': 'middle'\n                        },\n                        xField: 'name',\n                        yField: ['value']\n                    }]\n\n                }]\n\n            });\n            this.callParent(arguments);\n            this.on('afterrender', this.fetchEvents, this, {single: true});\n        },\n        onRefresh: function() {\n            this.fetchEvents();\n        },\n        fetchEvents: function() {\n            // gets all the open events for now\n            var start = new Date(), params;\n            start.setDate(start.getDate() - this.daysPast);\n\n            params = {\n                start: 0,\n                limit: 500,\n                keys: ['severity'],\n                params: {\n                    eventClass: this.eventClass,\n                    eventState: [Zenoss.STATUS_NEW, Zenoss.STATUS_ACKNOWLEDGED],\n                    // format a time range Zep can understand\n                    lastTime: Ext.Date.format(start, Zenoss.date.ISO8601Long),\n                    summary: this.summaryFilter\n                }\n            };\n            Zenoss.remote.EventsRouter.query(params, this.loadData, this);\n        },\n        loadData: function(response) {\n            // make sure the response was success and we are already rendered\n            if (!response.success || !this.down('chart')) {\n                return;\n            }\n\n            // iterate through the events we get back from the server so we can\n            // build a store for the chart. The format ends up looking like:\n            // [[\"Critical\", 100], [\"Error\", 1], ...]\n            var store = this.down('chart').getStore(), data = [], events = response.events,\n                types = ['Critical', 'Error', 'Warning', 'Info', 'Debug'], i, counts = {\n                    'critical': 0,\n                    'error': 0,\n                    'warning': 0,\n                    'info': 0,\n                    'debug': 0\n                };\n            for (i=0;i<events.length;i++) {\n                counts[Zenoss.util.convertSeverity(events[i].severity)]++;\n            }\n\n            Ext.Array.each(types, function(type) {\n                data.push([type, counts[type.toLowerCase()]]);\n            });\n            store.loadData(data);\n        },\n        getConfig: function() {\n            return {\n                eventClass: this.eventClass,\n                summaryFilter: this.summaryFilter,\n                daysPast: this.daysPast\n            };\n        },\n        applyConfig: function(config) {\n            var refresh = false;\n            if (config.eventClass !== this.eventClass || config.summaryFilter !== this.summaryFilter || config.daysPast !== this.daysPast) {\n                refresh = true;\n            }\n            this.callParent([config]);\n            if (refresh) {\n                this.fetchEvents();\n            }\n        },\n        getCustomConfigFields: function() {\n            var fields = [{\n                xtype: 'eventclass',\n                fieldLabel: _t('Event Class'),\n                name: 'eventClass',\n                forceSelection: false,\n                autoSelect: false,\n                value: this.eventClass\n            },{\n                xtype: 'textfield',\n                name: 'summaryFilter',\n                fieldLabel: _t('Summary Filter'),\n                value: this.summaryFilter\n            }, {\n                xtype: 'numberfield',\n                minValue: 1,\n                maxValue: 30,\n                fieldLabel: _t('Number of past days to show events for'),\n                name: 'daysPast',\n                value: this.daysPast\n            }];\n            return fields;\n        }\n    });\n\n\n    /**\n     *  Portlet that shows the open events by severity\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.PastEventsChart', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.pasteventschart',\n        height: 350,\n        title: 'Past Events Line Chart',\n        eventClass: \"/\",\n        summaryFilter: \"\",\n        daysPast: 10,\n        initComponent: function(){\n            Ext.applyIf(this, {\n                items:[{\n                    xtype: 'chart',\n                    style: 'background:#fff',\n                    shadow: true,\n                    store: Ext.create('Ext.data.ArrayStore', {\n                        fields: ['time', 'critical', 'error', 'warning', 'info'],\n                        data: []\n                    }),\n                    theme: 'White',\n                    legend: {\n                        position: 'right'\n                    },\n                    axes: [{\n                        type: 'Numeric',\n                        minimum: 0,\n                        position: 'left',\n                        fields: ['critical', 'error', 'warning', 'info'],\n                        title: _t('Number of Opened Events'),\n                        minorTickSteps: 1,\n                        grid: {\n                            odd: {\n                                opacity: 1,\n                                fill: '#ddd',\n                                stroke: '#bbb',\n                                'stroke-width': 0.5\n                            }\n                        }\n                    }, {\n                        type: 'Category',\n                        position: 'bottom',\n                        fields: ['time'],\n                        title: 'Time'\n                    }],\n                    series: [{\n                        type: 'line',\n                        highlight: {\n                            size: 7,\n                            radius: 7\n                        },\n                        axis: 'left',\n                        xField: 'time',\n                        yField: 'critical',\n                        style: {\n                            stroke: \"#d60000\"\n                        },\n                        markerConfig: {\n                            size: 0,\n                            radius: 0,\n                            'stroke-width': 0,\n                            stroke: \"#d60000\"\n                        },\n                        tips: {\n                            trackMouse: true,\n                            width: 235,\n                            height: 28,\n                            renderer: function(storeItem, item) {\n                                var title = Ext.String.format(_t(\"{0} Critical Events at {1}\"), storeItem.get('critical'), storeItem.get('time'));\n                                this.setTitle(title);\n                            }\n                        }\n                    },{\n                        type: 'line',\n                        highlight: {\n                            size: 7,\n                            radius: 7\n                        },\n                        axis: 'left',\n                        xField: 'time',\n                        yField: 'error',\n                        style: {\n                            stroke: \"#ff9711\"\n                        },\n                        markerConfig: {\n                            size: 0,\n                            radius: 0,\n                            'stroke-width': 0,\n                            stroke: \"#ff9711\"\n                        },\n                        tips: {\n                            trackMouse: true,\n                            width: 235,\n                            height: 28,\n                            renderer: function(storeItem, item) {\n                                var title = Ext.String.format(_t(\"{0} Error Events at {1}\"), storeItem.get('error'), storeItem.get('time'));\n                                this.setTitle(title);\n                            }\n                        }\n                    },{\n                        type: 'line',\n                        highlight: {\n                            size: 7,\n                            radius: 7\n                        },\n                        axis: 'left',\n                        xField: 'time',\n                        yField: 'warning',\n                        style: {\n                            stroke: \"#fbd13d\"\n                        },\n                        markerConfig: {\n                            size: 0,\n                            radius: 0,\n                            'stroke-width': 0,\n                            stroke: \"#fbd13d\"\n                        },\n                        tips:{\n                            trackMouse: true,\n                            width: 235,\n                            height: 28,\n                            renderer: function(storeItem, item) {\n                                var title = Ext.String.format(_t(\"{0} Warning Events at {1}\"), storeItem.get('warning'), storeItem.get('time'));\n                                this.setTitle(title);\n                            }\n                        }\n                    },{\n                        type: 'line',\n                        highlight: {\n                            size: 7,\n                            radius: 7\n                        },\n                        axis: 'left',\n                        xField: 'time',\n                        yField: 'info',\n                        style: {\n                            stroke: \"#0472b8\"\n                        },\n                        markerConfig: {\n                            size: 0,\n                            radius: 0,\n                            'stroke-width': 0,\n                            stroke: \"#0472b8\"\n                        },\n                        tips:{\n                            trackMouse: true,\n                            width: 225,\n                            height: 28,\n                            renderer: function(storeItem, item) {\n                                var title = Ext.String.format(_t(\"{0} Info Events at {1}\"), storeItem.get('info'), storeItem.get('time'));\n                                this.setTitle(title);\n                            }\n                        }\n                    }]\n                }]\n\n            });\n            this.callParent(arguments);\n            this.on('afterrender', this.fetchEvents, this, {single: true});\n        },\n        onRefresh: function() {\n            this.fetchEvents();\n        },\n        fetchEvents: function() {\n            // gets all the open events for now\n            var lastTime = new Date(), params;\n            lastTime.setDate(lastTime.getDate() - this.daysPast);\n\n            params = {\n                start: 0,\n                limit: 5000,\n                sort: 'lastTime',\n                dir: 'ASC',\n                keys: ['severity', 'lastTime'],\n                params: {\n                    eventClass: this.eventClass,\n                    severity: [Zenoss.SEVERITY_CRITICAL, Zenoss.SEVERITY_ERROR, Zenoss.SEVERITY_WARNING, Zenoss.SEVERITY_INFO],\n                    eventState: [],\n                    // format a time range Zep can understand\n                    lastTime: Ext.Date.format(lastTime, 'time'),\n                    summary: this.summaryFilter\n                }\n            };\n            Zenoss.remote.EventsRouter.query(params, this.loadData, this);\n        },\n        loadData: function(response) {\n            // make sure the response was success and we are already rendered\n            if (!response.success || !this.down('chart')) {\n                return;\n            }\n\n            // iterate through the events we get back from the server so we can\n            // build a store for the chart.\n            var store = this.down('chart').getStore(), data = [], events = response.events, i, counts={}, event, key;\n            for (i=0; i < events.length; i++) {\n                event = events[i];\n                key = Ext.Date.format(new Date(event.lastTime * 1000), \"D ha\");\n                if (!Ext.isDefined(counts[key])) {\n                    counts[key] = {};\n                    counts[key][Zenoss.SEVERITY_CRITICAL] = 0;\n                    counts[key][Zenoss.SEVERITY_ERROR] = 0;\n                    counts[key][Zenoss.SEVERITY_WARNING] = 0;\n                    counts[key][Zenoss.SEVERITY_INFO] = 0;\n                }\n                counts[key][event.severity]++;\n            }\n\n            for (key in counts) {\n                data.push([key,\n                           counts[key][Zenoss.SEVERITY_CRITICAL],\n                           counts[key][Zenoss.SEVERITY_ERROR],\n                           counts[key][Zenoss.SEVERITY_WARNING],\n                           counts[key][Zenoss.SEVERITY_INFO]\n                          ]);\n            }\n\n            store.loadData(data);\n        },\n        getConfig: function() {\n            return {\n                eventClass: this.eventClass,\n                summaryFilter: this.summaryFilter,\n                daysPast: this.daysPast\n            };\n        },\n        applyConfig: function(config) {\n            var refresh = false;\n            if (config.eventClass !== this.eventClass || config.summaryFilter !== this.summaryFilter || config.daysPast !== this.daysPast) {\n                refresh = true;\n            }\n            this.callParent([config]);\n            if (refresh) {\n                this.fetchEvents();\n            }\n        },\n        getCustomConfigFields: function() {\n            var fields = [{\n                xtype: 'eventclass',\n                fieldLabel: _t('Event Class'),\n                name: 'eventClass',\n                forceSelection: false,\n                autoSelect: false,\n                value: this.eventClass\n            },{\n                xtype: 'textfield',\n                name: 'summaryFilter',\n                fieldLabel: _t('Summary Filter'),\n                value: this.summaryFilter\n            }, {\n                xtype: 'numberfield',\n                minValue: 1,\n                maxValue: 60,\n                fieldLabel: _t('Number of past days to show events for'),\n                name: 'daysPast',\n                value: this.daysPast\n            }];\n            return fields;\n        }\n    });\n\n\n    /**\n     * Network Map Portlet.\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.NetworkMapPortlet', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.networkmapportlet',\n        height: 350,\n        title: 'Network Map',\n        network: null,\n        depth: 3,\n        initComponent: function(){\n            this.networkMapId = Ext.id();\n            Ext.apply(this, {\n                items: [{\n                    xtype: 'container',\n                    id: this.networkMapId\n                }],\n                height: this.height\n            });\n\n            this.callParent(arguments);\n            this.on('afterrender', this.buildNetworkMap, this, {single: true});\n        },\n        destroyOldMap: function() {\n            var el = Ext.get(this.networkMapId);\n            // destroy all the children and build the map\n            while (el.dom.firstChild) {\n                el.dom.removeChild(el.dom.firstChild);\n            }\n        },\n        resizeSVG: function(panel, width, height) {\n            Ext.get(this.networkMapId).setHeight(height -10);\n            Ext.get(this.networkMapId).setWidth(width -10);\n            this.svg.attr(\"height\", height);\n            this.svg.attr(\"width\", width);\n        },\n        buildNetworkMap: function() {\n            // make sure we have a network first\n            if (!this.network) {\n                return;\n            }\n            this.destroyOldMap();\n            // resize the svg whenever we are resized\n            this.on('resize', this.resizeSVG, this);\n            var self = this, attachPoint = d3.select(\"#\" +this.networkMapId);\n            self.imageDir=\"/zport/dmd/img/icons\";\n            self.selection = \"10.171.54.0\";\n            var width = Math.max(attachPoint.style('width').replace(\"px\", \"\"), 600);\n            var height = Math.max(attachPoint.style('height').replace(\"px\", \"\"), 400);\n            self.attachPoint = attachPoint;\n\n\n            this.nodes = [];\n            this.links = [];\n            this.force = d3.layout.force()\n                .charge(-1000)\n                .theta(0)\n                .linkDistance(125)\n                .size([width, height])\n                .nodes(this.nodes)\n                .links(this.links)\n                .on(\"tick\", Ext.bind(this.tick, this));\n            this.svg = this.attachPoint.append(\"svg\")\n                .attr(\"width\", width)\n                .attr(\"height\", height);\n            self.update();\n        },\n        tick: function() {\n            var node = this.svg.selectAll(\".node\");\n            var link = this.svg.selectAll(\".link\");\n            link.attr(\"x1\", function(d) { return d.source.x; })\n                .attr(\"y1\", function(d) { return d.source.y; })\n                .attr(\"x2\", function(d) { return d.target.x; })\n                .attr(\"y2\", function(d) { return d.target.y; });\n\n            node.attr(\"transform\", function(d) { return \"translate(\" + d.x + \", \" + d.y + \")\"; });\n        },\n        onRefresh: function() {\n            this.update();\n        },\n        update: function() {\n            var self = this;\n            var node = this.svg.selectAll(\".node\");\n            var link = this.svg.selectAll(\".link\");\n            var nodeHeight = 25,\n                nodeWidth = 125;\n            Zenoss.remote.DashboardRouter.getNetworkMapData({\n                uid: self.network,\n                depth: self.depth\n            }, function(response) {\n                if (!response.success) {\n                    return;\n                }\n                var graph = response.data;\n                graph.nodes.forEach(function(n){\n                    var i =0, found = false;\n                    for (i=0; i<self.nodes.length;i++) {\n                        if (self.nodes[i].id  === n.id) {\n                            found = true;\n                        }\n                    }\n                    if (!found) {\n                        self.nodes.push(n);\n                    }\n                });\n                node = node.data(self.force.nodes(), function(d) { return d.id; });\n                var nodeContainer = node.enter()\n                    .append(\"g\")\n                    .attr(\"class\", function(d){ return \"node \" + d.id; })\n                    .call(self.force.drag);\n                nodeContainer.append(\"rect\")\n                    .attr(\"width\", function(d) {\n                        // make the box wider for longer names\n                        return Math.max(d.id.length * 8, 125);\n                    })\n                    .attr(\"height\", nodeHeight)\n                    .attr(\"transform\", \"translate(\" + -nodeWidth/2 + \", \" + -nodeHeight/2 + \")\")\n                    .attr(\"rx\", 10)\n                    .attr(\"ry\", 10)\n                    .attr(\"style\", function(d){ return \"fill:#\" + d.color.slice(2);});\n\n                nodeContainer.append(\"text\")\n                    .text(function(d){ return d.id; })\n                    .attr(\"dx\", -30)\n                    .attr(\"dy\", 5);\n                nodeContainer.append(\"svg:image\")\n                    .attr(\"xlink:href\", function(d){ return self.imageDir + \"/\" + d.icon; })\n                    .attr(\"height\", 30)\n                    .attr(\"width\", 30)\n                    .attr(\"x\", -nodeWidth/2)\n                    .attr(\"y\", -15);\n                node.exit().remove();\n\n                graph.links.forEach(function(e){\n                    var sourceNode = graph.nodes.filter(function(n) { return n.id === e.source; });\n                    var targetNode = graph.nodes.filter(function(n) { return n.id === e.target; });\n                    self.links.push({source: sourceNode[0], target: targetNode[0]});\n                });\n\n                link = link.data(self.force.links(), function(d) { return d.source.id + \"-\" + d.target.id; });\n                link.enter().insert(\"line\", \".node\")\n                    .attr(\"class\", \"link\");\n                link.exit().remove();\n\n                self.force.start();\n            });\n        },\n        getConfig: function() {\n            return {\n                network: this.network\n            };\n        },\n        applyConfig: function(config) {\n            if (config.depth) {\n                this.depth = config.depth;\n            }\n            if (this.rendered && config.network && config.network !== this.network) {\n                this.network = config.network;\n                this.buildNetworkMap();\n            }\n            this.callParent([config]);\n        },\n        getCustomConfigFields: function() {\n            var fields = [{\n                xtype: 'combo',\n                name: 'network',\n                queryMode: 'local',\n                editable: false,\n                store: new Zenoss.NonPaginatedStore({\n                    directFn: Zenoss.remote.DashboardRouter.getNetworks,\n                    root: 'data',\n                    fields: ['uid', 'name']\n                }),\n                displayField: 'name',\n                valueField: 'uid',\n                fieldLabel: _t('Network'),\n                value: this.network\n            }, {\n                xtype: 'numberfield',\n                name: 'depth',\n                fieldLabel: _t('Depth'),\n                minValue: 0,\n                maxValue: 10,\n                value: this.depth\n            }];\n            fields[0].store.load({});\n            return fields;\n        }\n    });\n\n\n\n    /**\n     * Grid view of events (a mini-event console)\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.EventViewPortlet', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.eventviewportlet',\n        height: 400,\n        title: 'Event View',\n        initComponent: function(){\n            this.eventsGrid = this.createEventsGrid();\n\n            Ext.apply(this, {\n                items: [\n                    this.eventsGrid\n                ]\n            });\n\n            this.callParent(arguments);\n        },\n        onRefresh: function() {\n            this.items.first().getStore().load();\n        },\n        stripIds: function(columns) {\n            var cols = Ext.clone(columns);\n            Ext.Array.each(cols, function(col) {\n                delete col.id;\n            });\n            return cols;\n        },\n        // no user defineable configuration for now\n        getConfig: function() {\n            return {\n                base64State: this.base64State || this.stateToBase64String()\n            };\n        },\n        applyConfig: function(config) {\n            var isEditingMode = config.previewConfig && config.previewConfig.base64State;\n            if (isEditingMode) {\n                this.base64State = config.previewConfig.base64State;\n\n                this.remove(this.eventsGrid.id);\n\n                this.eventsGrid = this.createEventsGrid();\n                this.add(this.eventsGrid);\n            }\n\n            this.callParent([config]);\n        },\n        getCustomConfigFields: function() {\n            var fields = [];\n            return fields;\n        },\n        base64StringToState: function (base64String) {\n            return Ext.decode(Zenoss.util.base64.decode(decodeURIComponent(base64String)));\n        },\n        stateToBase64String: function () {\n            return Zenoss.util.base64.encode(Ext.encode(this.eventsGrid.getState()));\n        },\n        createEventsGrid: function () {\n            var consoleId = Ext.id(),\n                columns = this.stripIds(Zenoss.env.COLUMN_DEFINITIONS),\n                me = this;\n\n            var grid = Ext.create('Zenoss.events.Grid', {\n                stateful: false,\n                id: consoleId,\n                defaultFilters: {\n                    severity: [Zenoss.SEVERITY_CRITICAL, Zenoss.SEVERITY_ERROR, Zenoss.SEVERITY_WARNING, Zenoss.SEVERITY_INFO],\n                    eventState: [Zenoss.STATUS_NEW, Zenoss.STATUS_ACKNOWLEDGED],\n                    // _managed_objects is a global function sent from the server, see ZenUI3/security/security.py\n                    tags: _managed_objects()\n                },\n                columns: columns,\n                enableTextSelection: true,\n                store: Ext.create('Zenoss.events.Store', {\n                    listeners: {\n                        load: function (store) {\n                            // work around a bug where the total wasn't displayed\n                            me.down('livegridinfopanel')._doOnScroll();\n                        }\n                    }\n                }),\n                selModel: Ext.create('Zenoss.EventPanelSelectionModel', {\n                    gridId: consoleId\n                }),\n                listeners: {\n                    afterrender: function () {\n                        var isEditingMode = this.up('editportletdialog');\n                        if (isEditingMode) {\n                            me.base64State = undefined;\n                        }\n                    }\n                }\n            });\n\n            grid.filterRow.clearFilters();\n\n            if (this.base64State) {\n                grid.applyState(this.base64StringToState(this.base64State));\n            }\n\n            return grid;\n        }\n    });\n\n    /**\n     * @class Zenoss.Dashboard.stores.TopLevelOrganizer\n     * @extend Zenoss.DirectStore\n     * Direct store for loading top level organizers\n     */\n    Ext.define(\"Zenoss.Dashboard.stores.TopLevelOrganizer\", {\n        extend: \"Zenoss.NonPaginatedStore\",\n        constructor: function(config) {\n            config = config || {};\n            Ext.applyIf(config, {\n                model: 'Zenoss.Dashboard.model.DeviceIssueModel',\n                initialSortColumn: \"name\",\n                directFn: Zenoss.remote.DashboardRouter.getTopLevelOrganizers,\n                root: 'data'\n            });\n            this.callParent(arguments);\n        }\n    });\n    /**\n     * Top Level Organizers Portlet.\n     * @extends Zenoss.Dashboard.view.Portlet\n     **/\n    Ext.define('Zenoss.Dashboard.portlets.TopLevelOrganizersPortlet', {\n        extend: 'Zenoss.Dashboard.view.Portlet',\n        alias: 'widget.toplevelorganizersportlet',\n        title: _t('Organizers'),\n        height: 400,\n        rootOrganizer: '',\n        childOrganizer: '',\n        initComponent: function() {\n            Ext.apply(this, {\n                items: [{\n                    xtype: 'grid',\n                    emptyText: _t('No records found.'),\n                    store: Ext.create('Zenoss.Dashboard.stores.TopLevelOrganizer', {}),\n                    columns: [{\n                        dataIndex: 'name',\n                        header: _t('Organizers'),\n                        flex: 1,\n                        hideable: false,\n                        renderer: function(name, row, record) {\n                            return Zenoss.render.link(record.data.uid, null, name);\n                        }\n                    },{\n                        dataIndex: 'events',\n                        header: _t('Events'),\n                        width: 120,\n                        doSort: Zenoss.Dashboard.eventSort,\n                        renderer: Zenoss.Dashboard.eventRenderer\n                    }]\n                }]\n            });\n            this.callParent(arguments);\n            this.on('afterrender', this.loadOrganizers, this, {single: true});\n        },\n        loadOrganizers: function() {\n            if (this.childOrganizer) {\n                var store = this.down('grid').getStore();\n                store.load({\n                    params: {\n                        uid: this.childOrganizer\n                    }\n                });\n            }\n        },\n        getConfig: function() {\n            return {\n                rootOrganizer: this.rootOrganizer,\n                childOrganizer: this.childOrganizer\n            };\n        },\n        applyConfig: function(config) {\n            var refresh = false;\n            if (config.childOrganizer && config.childOrganizer !== this.childOrganizer) {\n                refresh = true;\n            }\n            this.callParent([config]);\n            if (this.rendered && refresh) {\n                this.loadOrganizers();\n            }\n        },\n        onRefresh: function() {\n            this.loadOrganizers();\n        },\n        getCustomConfigFields: function() {\n            var store = Ext.create('Zenoss.Dashboard.stores.Organizer', {});\n            store.load({\n                params: {\n                    uid: this.rootOrganizer\n                }\n            });\n            var fields = [{\n                xtype: 'combo',\n                name: 'rootOrganizer',\n                queryMode: 'local',\n                store: ['Devices', 'Locations', 'Systems', 'Groups'],\n                listeners: {\n                    select: function(combo) {\n                        var rootOrganizer = combo.getValue(),\n                        childOrganizerCombo = Ext.getCmp('childOrganizerCombo'),\n                        store = childOrganizerCombo.getStore();\n                        store.load({\n                            params: {\n                                uid: rootOrganizer\n                            }\n                        });\n                        childOrganizerCombo.setValue('/zport/dmd/' + rootOrganizer);\n                        childOrganizerCombo.setDisabled(false);\n                    }\n                },\n                displayField: 'name',\n                valueField: 'uid',\n                fieldLabel: _t('Root Organizer'),\n                value: this.rootOrganizer\n            },{\n                id: 'childOrganizerCombo',\n                xtype: 'combo',\n                name: 'childOrganizer',\n                queryMode: 'local',\n                store: store,\n                displayField: 'name',\n                valueField: 'uid',\n                fieldLabel: _t('Child Organizer'),\n                disabled: !(this.childOrganizer),\n                value: this.childOrganizer\n            }];\n            return fields;\n        }\n    });\n}());\n"], "filenames": ["ZenPacks/zenoss/Dashboard/browser/resources/js/defaultportlets.js"], "buggy_code_start_loc": [309], "buggy_code_end_loc": [345], "fixing_code_start_loc": [309], "fixing_code_end_loc": [354], "type": "CWE-79", "message": "A vulnerability classified as problematic was found in Zenoss Dashboard up to 1.3.4. Affected by this vulnerability is an unknown functionality of the file ZenPacks/zenoss/Dashboard/browser/resources/js/defaultportlets.js. The manipulation of the argument HTMLString leads to cross site scripting. The attack can be launched remotely. Upgrading to version 1.3.5 is able to address this issue. The name of the patch is f462285a0a2d7e1a9255b0820240b94a43b00a44. It is recommended to upgrade the affected component. The identifier VDB-217153 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2018-25063", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-01T09:15:09.780", "lastModified": "2023-01-09T17:17:15.917", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as problematic was found in Zenoss Dashboard up to 1.3.4. Affected by this vulnerability is an unknown functionality of the file ZenPacks/zenoss/Dashboard/browser/resources/js/defaultportlets.js. The manipulation of the argument HTMLString leads to cross site scripting. The attack can be launched remotely. Upgrading to version 1.3.5 is able to address this issue. The name of the patch is f462285a0a2d7e1a9255b0820240b94a43b00a44. It is recommended to upgrade the affected component. The identifier VDB-217153 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:zenoss:dashboard:*:*:*:*:*:zenoss:*:*", "versionEndExcluding": "1.3.5", "matchCriteriaId": "8C6CEADA-AFD1-457C-B24A-0B13296B017E"}]}]}], "references": [{"url": "https://github.com/zenoss/ZenPacks.zenoss.Dashboard/commit/f462285a0a2d7e1a9255b0820240b94a43b00a44", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/zenoss/ZenPacks.zenoss.Dashboard/pull/130", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/zenoss/ZenPacks.zenoss.Dashboard/releases/tag/1.3.5", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217153", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217153", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/zenoss/ZenPacks.zenoss.Dashboard/commit/f462285a0a2d7e1a9255b0820240b94a43b00a44"}}