{"buggy_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CoreBundle\\Framework\\Container;\nuse ChamiloSession as Session;\n\nrequire_once __DIR__.'/../global.inc.php';\n\n// 1. Setting variables needed by jqgrid\n$action = $_GET['a'];\n$page = (int) $_REQUEST['page']; //page\n$limit = (int) $_REQUEST['rows']; //quantity of rows\n\n// Makes max row persistence after refreshing the grid\n$savedRows = Session::read('max_rows_'.$action);\nif (empty($savedRows)) {\n    Session::write('max_rows_'.$action, $limit);\n} else {\n    if ($limit != $savedRows) {\n        Session::write('max_rows_'.$action, $limit);\n    }\n}\n\n$sidx = $_REQUEST['sidx']; //index (field) to filter\n$sord = $_REQUEST['sord']; //asc or desc\n$exportFilename = isset($_REQUEST['export_filename']) ? $_REQUEST['export_filename'] : '';\n\nif (false !== strpos(strtolower($sidx), 'asc')) {\n    $sidx = str_replace(['asc', ','], '', $sidx);\n    $sord = 'asc';\n}\n\nif (false !== strpos(strtolower($sidx), 'desc')) {\n    $sidx = str_replace(['desc', ','], '', $sidx);\n    $sord = 'desc';\n}\n\nif (!in_array($sord, ['asc', 'desc'])) {\n    $sord = 'desc';\n}\n\n// Actions allowed to other roles.\nif (!in_array(\n        $action,\n        [\n            'get_exercise_results',\n            'get_exercise_pending_results',\n            'get_exercise_results_report',\n            'get_work_student_list_overview',\n            'get_work_teacher',\n            'get_work_student',\n            'get_all_work_student',\n            'get_work_user_list',\n            'get_work_user_list_others',\n            'get_work_user_list_all',\n            'get_work_pending_list',\n            'get_timelines',\n            'get_user_skill_ranking',\n            'get_usergroups',\n            'get_usergroups_teacher',\n            'get_user_course_report_resumed',\n            'get_user_course_report',\n            'get_sessions_tracking',\n            'get_sessions',\n            'get_course_announcements',\n            'course_log_events',\n            'get_learning_path_calendars',\n            'get_usergroups_users',\n            'get_calendar_users',\n            'get_exercise_categories',\n        ]\n    ) && !isset($_REQUEST['from_course_session'])) {\n    api_protect_admin_script(true);\n} elseif (isset($_REQUEST['from_course_session']) &&\n    1 == $_REQUEST['from_course_session']\n) {\n    api_protect_teacher_script(true);\n}\n\n$toRemove = ['extra_access_start_date', 'extra_access_end_date'];\n\n// Search features\n\n//@todo move this in the display_class or somewhere else\n/**\n * @param string $col\n * @param string $oper\n * @param string $val\n *\n * @return string\n */\nfunction getWhereClause($col, $oper, $val)\n{\n    $ops = [\n        'eq' => '=', //equal\n        'ne' => '<>', //not equal\n        'lt' => '<', //less than\n        'le' => '<=', //less than or equal\n        'gt' => '>', //greater than\n        'ge' => '>=', //greater than or equal\n        'bw' => 'LIKE', //begins with\n        'bn' => 'NOT LIKE', //doesn't begin with\n        'in' => 'LIKE', //is in\n        'ni' => 'NOT LIKE', //is not in\n        'ew' => 'LIKE', //ends with\n        'en' => 'NOT LIKE', //doesn't end with\n        'cn' => 'LIKE', //contains\n        'nc' => 'NOT LIKE',  //doesn't contain\n    ];\n\n    if (empty($col)) {\n        return '';\n    }\n\n    if ($oper == 'bw' || $oper == 'bn') {\n        $val .= '%';\n    }\n    if ($oper == 'ew' || $oper == 'en') {\n        $val = '%'.$val;\n    }\n    if ($oper == 'cn' || $oper == 'nc' || $oper == 'in' || $oper == 'ni') {\n        $val = '%'.$val.'%';\n    }\n    $val = Database::escape_string($val);\n\n    return \" $col {$ops[$oper]} '$val' \";\n}\n\n// If there is no search request sent by jqgrid, $where should be empty\n$whereCondition = '';\n$operation = isset($_REQUEST['oper']) ? $_REQUEST['oper'] : false;\n$exportFormat = isset($_REQUEST['export_format']) ? $_REQUEST['export_format'] : 'csv';\n$searchField = isset($_REQUEST['searchField']) ? $_REQUEST['searchField'] : false;\n$searchOperator = isset($_REQUEST['searchOper']) ? $_REQUEST['searchOper'] : false;\n$searchString = isset($_REQUEST['searchString']) ? $_REQUEST['searchString'] : false;\n$search = isset($_REQUEST['_search']) ? $_REQUEST['_search'] : false;\n$forceSearch = isset($_REQUEST['_force_search']) ? $_REQUEST['_force_search'] : false;\n$extra_fields = [];\n$accessStartDate = '';\n$accessEndDate = '';\n$overwriteColumnHeaderExport = [];\n\nif (!empty($search)) {\n    $search = 'true';\n}\n\nif (($search || $forceSearch) && ('false' !== $search)) {\n    $whereCondition = ' 1 = 1 ';\n    $whereConditionInForm = getWhereClause(\n        $searchField,\n        $searchOperator,\n        $searchString\n    );\n\n    if (!empty($whereConditionInForm)) {\n        $whereCondition .= ' AND ( ';\n        $whereCondition .= '  ('.$whereConditionInForm.') ';\n    }\n    $filters = isset($_REQUEST['filters']) && !is_array($_REQUEST['filters']) ? json_decode(\n        $_REQUEST['filters']\n    ) : false;\n    if (isset($_REQUEST['filters2'])) {\n        $filters = json_decode($_REQUEST['filters2']);\n    }\n\n    if (!empty($filters)) {\n        if (in_array(\n            $action,\n            [\n                'get_user_course_report_resumed',\n                'get_user_course_report',\n                'get_questions',\n                'get_sessions',\n                'get_sessions_tracking',\n            ]\n        )) {\n            switch ($action) {\n                case 'get_user_course_report_resumed':\n                case 'get_user_course_report':\n                    $type = 'user';\n                    break;\n                case 'get_questions':\n                    $type = 'question';\n                    break;\n                case 'get_sessions':\n                case 'get_sessions_tracking':\n                    $type = 'session';\n                    break;\n            }\n\n            if (!empty($type)) {\n                // Extra field.\n                $extraField = new ExtraField($type);\n\n                if (is_object($filters)\n                    && property_exists($filters, 'rules')\n                    && is_array($filters->rules)\n                    && !empty($filters->rules)\n                ) {\n                    foreach ($filters->rules as $key => $data) {\n                        if (empty($data)) {\n                            continue;\n                        }\n                        if ('extra_access_start_date' === $data->field) {\n                            $accessStartDate = $data->data;\n                        }\n\n                        if ('extra_access_end_date' === $data->field) {\n                            $accessEndDate = $data->data;\n                        }\n\n                        if (in_array($data->field, $toRemove)) {\n                            unset($filters->rules[$key]);\n                        }\n                    }\n                }\n\n                $result = $extraField->getExtraFieldRules($filters, 'extra_');\n\n                $extra_fields = $result['extra_fields'];\n                $condition_array = $result['condition_array'];\n                $extraCondition = '';\n                if (!empty($condition_array)) {\n                    $extraCondition = $filters->groupOp.' ( ';\n                    $extraCondition .= implode($filters->groupOp, $condition_array);\n                    $extraCondition .= ' ) ';\n                }\n                $whereCondition .= $extraCondition;\n\n                // Question field\n                $resultQuestion = $extraField->getExtraFieldRules(\n                    $filters,\n                    'question_'\n                );\n                $questionFields = $resultQuestion['extra_fields'];\n                $condition_array = $resultQuestion['condition_array'];\n\n                $extraQuestionCondition = '';\n                if (!empty($condition_array)) {\n                    $extraQuestionCondition = $filters->groupOp.' ( ';\n                    $extraQuestionCondition .= implode($filters->groupOp, $condition_array);\n                    $extraQuestionCondition .= ' ) ';\n                    // Remove conditions already added\n                    $extraQuestionCondition = str_replace(\n                        $extraCondition,\n                        '',\n                        $extraQuestionCondition\n                    );\n                }\n\n                $whereCondition .= $extraQuestionCondition;\n\n                if (isset($filters->custom_dates)) {\n                    $whereCondition .= $filters->custom_dates;\n                }\n            }\n        } elseif (!empty($filters->rules)) {\n            $whereCondition .= ' AND ( ';\n            $counter = 0;\n            foreach ($filters->rules as $key => $rule) {\n                $whereCondition .= getWhereClause(\n                    $rule->field,\n                    $rule->op,\n                    $rule->data\n                );\n\n                if ($counter < count($filters->rules) - 1) {\n                    $whereCondition .= $filters->groupOp;\n                }\n                $counter++;\n            }\n            $whereCondition .= ' ) ';\n        }\n    }\n\n    if (!empty($whereConditionInForm)) {\n        $whereCondition .= ' ) ';\n    }\n}\n\n// get index row - i.e. user click to sort $sord = $_GET['sord'];\n// get the direction\nif (!$sidx) {\n    $sidx = 1;\n}\n\n//2. Selecting the count FIRST\n//@todo rework this\n\nswitch ($action) {\n    case 'get_exercise_categories':\n        $courseId = isset($_REQUEST['c_id']) ? $_REQUEST['c_id'] : 0;\n        $repo = Container::getExerciseCategoryRepository();\n        $qb = $repo->getResourcesByCourse(api_get_course_entity($courseId));\n        $count = $qb->select('COUNT(resource)')->getQuery()->getSingleScalarResult();\n\n        break;\n    case 'get_calendar_users':\n        $calendarPlugin = LearningCalendarPlugin::create();\n        $id = isset($_REQUEST['id']) ? $_REQUEST['id'] : 0;\n        $count = $calendarPlugin->getUsersPerCalendarCount($id);\n        break;\n    case 'get_usergroups_users':\n        $usergroup = new UserGroup();\n        $usergroup->protectScript(null, true, true);\n        $id = isset($_REQUEST['id']) ? $_REQUEST['id'] : 0;\n        $count = $usergroup->getUserGroupUsers($id, true);\n        break;\n    case 'get_learning_path_calendars':\n        $calendarPlugin = LearningCalendarPlugin::create();\n        $count = $calendarPlugin->getCalendarCount();\n        break;\n    case 'course_log_events':\n        $courseId = api_get_course_int_id();\n        if (empty($courseId)) {\n            exit;\n        }\n        $sessionId = api_get_session_id();\n        if (!api_is_allowed_to_edit()) {\n            exit;\n        }\n        $count = Statistics::getNumberOfActivities($courseId, $sessionId);\n        break;\n    case 'get_programmed_announcements':\n        $object = new ScheduledAnnouncement();\n        $count = $object->get_count();\n        break;\n    case 'get_group_reporting':\n        $course_id = isset($_REQUEST['course_id']) ? $_REQUEST['course_id'] : null;\n        $group_id = isset($_REQUEST['gidReq']) ? $_REQUEST['gidReq'] : null;\n        $sessionId = isset($_REQUEST['session_id']) ? $_REQUEST['session_id'] : null;\n        $count = Tracking::get_group_reporting(\n            $course_id,\n            $sessionId,\n            $group_id,\n            'count'\n        );\n        break;\n    case 'get_user_course_report':\n    case 'get_user_course_report_resumed':\n        $userNotAllowed = !api_is_student_boss() && !api_is_platform_admin(false, true);\n\n        if ($userNotAllowed) {\n            exit;\n        }\n        $userId = api_get_user_id();\n        $sessionId = isset($_GET['session_id']) ? (int) $_GET['session_id'] : 0;\n        $courseCodeList = [];\n        $userIdList = [];\n        $sessionIdList = [];\n        $searchByGroups = false;\n\n        if (api_is_drh()) {\n            if (api_drh_can_access_all_session_content()) {\n                $userList = SessionManager::getAllUsersFromCoursesFromAllSessionFromStatus(\n                    'drh_all',\n                    api_get_user_id()\n                );\n\n                if (!empty($userList)) {\n                    foreach ($userList as $user) {\n                        $userIdList[] = $user['user_id'];\n                    }\n                }\n\n                $courseList = SessionManager::getAllCoursesFollowedByUser(\n                    api_get_user_id(),\n                    null\n                );\n                if (!empty($courseList)) {\n                    foreach ($courseList as $course) {\n                        $courseCodeList[] = $course['code'];\n                    }\n                }\n            } else {\n                $userList = UserManager::get_users_followed_by_drh(api_get_user_id());\n                if (!empty($userList)) {\n                    $userIdList = array_keys($userList);\n                }\n\n                $courseList = CourseManager::get_courses_followed_by_drh(api_get_user_id());\n                if (!empty($courseList)) {\n                    $courseCodeList = array_keys($courseList);\n                }\n            }\n\n            if (empty($userIdList) || empty($courseCodeList)) {\n                exit;\n            }\n        } elseif (api_is_student_boss()) {\n            $supervisorStudents = UserManager::getUsersFollowedByUser(\n                api_get_user_id(),\n                api_is_student_boss() ? null : STUDENT,\n                false,\n                false,\n                false,\n                null,\n                null,\n                null,\n                null,\n                1,\n                null,\n                api_is_student_boss() ? STUDENT_BOSS : COURSEMANAGER,\n                null\n            );\n            $supervisorStudents = array_column($supervisorStudents, 'user_id');\n\n            //get students with course or session\n            $userIdList = SessionManager::getAllUsersFromCoursesFromAllSessionFromStatus(\n                'admin',\n                null,\n                false,\n                null,\n                null,\n                null,\n                'asc',\n                null,\n                null,\n                null,\n                [],\n                $supervisorStudents,\n                5\n            );\n            $userIdList = array_column($userIdList, 'user_id');\n\n            //get students session courses\n            if (-1 == $sessionId) {\n                $sessionList = SessionManager::get_sessions_list();\n                $sessionIdList = array_column($sessionList, 'id');\n\n                $courseCodeList = [];\n                foreach ($sessionList as $session) {\n                    $courses = SessionManager::get_course_list_by_session_id($session['id']);\n                    $courseCodeList = array_merge($courseCodeList, array_column($courses, 'code'));\n                }\n            }\n\n            $searchByGroups = true;\n        } elseif (api_is_platform_admin()) {\n            // Get students with course or session\n            $userIdList = SessionManager::getAllUsersFromCoursesFromAllSessionFromStatus(\n                'admin',\n                null,\n                false,\n                null,\n                null,\n                null,\n                'asc',\n                null,\n                null,\n                null,\n                [],\n                [],\n                5\n            );\n            $userIdList = array_column($userIdList, 'user_id');\n\n            //get students session courses\n            if (-1 == $sessionId) {\n                $sessionList = SessionManager::get_sessions_list();\n                $sessionIdList = array_column($sessionList, 'id');\n                $courseCodeList = [];\n                foreach ($sessionList as $session) {\n                    $courses = SessionManager::get_course_list_by_session_id($session['id']);\n                    $courseCodeList = array_merge(\n                        $courseCodeList,\n                        array_column($courses, 'code')\n                    );\n                }\n            }\n            $searchByGroups = true;\n        }\n\n        if ($searchByGroups) {\n            $userGroup = new UserGroup();\n            $userIdList = array_merge(\n                $userIdList,\n                $userGroup->getGroupUsersByUser(api_get_user_id())\n            );\n        }\n\n        if (is_array($userIdList)) {\n            $userIdList = array_unique($userIdList);\n        }\n\n        if (api_is_student_boss()) {\n            $userCourses = [];\n            foreach ($userIdList as $userId) {\n                $userCourses = array_merge(\n                    $userCourses,\n                    CourseManager::get_courses_list_by_user_id($userId, true)\n                );\n\n                $userSessions = SessionManager::getSessionsFollowedByUser($userId);\n\n                $sessionIdList = array_merge(\n                    $sessionIdList,\n                    array_column($userSessions, 'id')\n                );\n            }\n            $courseCodeList = array_column($userCourses, 'code');\n        }\n\n        if (!empty($courseCodeList)) {\n            $courseCodeList = array_unique($courseCodeList);\n        }\n\n        if (!empty($sessionIdList)) {\n            $sessionIdList = array_unique($sessionIdList);\n        }\n\n        if (api_is_student_boss() && empty($userIdList)) {\n            $count = 0;\n            break;\n        }\n\n        if ('get_user_course_report' == $action) {\n            $count = CourseManager::get_count_user_list_from_course_code(\n                false,\n                null,\n                $courseCodeList,\n                $userIdList,\n                $sessionIdList,\n                ['where' => $whereCondition, 'extra' => $extra_fields]\n            );\n        } else {\n            $count = CourseManager::get_count_user_list_from_course_code(\n                true,\n                ['ruc'],\n                $courseCodeList,\n                $userIdList,\n                $sessionIdList,\n                ['where' => $whereCondition, 'extra' => $extra_fields]\n            );\n        }\n        break;\n    case 'get_course_exercise_medias':\n        $course_id = api_get_course_int_id();\n        $count = Question::get_count_course_medias($course_id);\n        break;\n    case 'get_user_skill_ranking':\n        $skill = new Skill();\n        $count = $skill->getUserListSkillRankingCount();\n        break;\n    case 'get_course_announcements':\n        $count = AnnouncementManager::getNumberAnnouncements();\n        break;\n    case 'get_work_teacher':\n        $count = getWorkListTeacher(0, $limit, null, null, $whereCondition, true);\n        break;\n    case 'get_work_student':\n        $count = getWorkListStudent(0, $limit, null, null, $whereCondition, true);\n        break;\n    case 'get_all_work_student':\n        $withResults = isset($_REQUEST['with_results']) ? (int) $_REQUEST['with_results'] : 0;\n        $count = getAllWorkListStudent(0, $limit, null, null, $whereCondition, true, $withResults);\n        break;\n    case 'get_work_user_list_all':\n        $work_id = $_REQUEST['work_id'];\n        $count = get_count_work($work_id);\n        break;\n    case 'get_work_pending_list':\n        $courseId = $_REQUEST['course'] ?? 0;\n        $status = $_REQUEST['status'] ?? 0;\n        $count = getAllWork(\n            null,\n            null,\n            null,\n            null,\n            $whereCondition,\n            true,\n            $courseId,\n            $status\n        );\n        break;\n    case 'get_work_user_list_others':\n        $work_id = $_REQUEST['work_id'];\n        $count = get_count_work($work_id, api_get_user_id());\n        break;\n    case 'get_work_user_list':\n        $work_id = $_REQUEST['work_id'];\n        $courseInfo = api_get_course_info();\n        $documents = getAllDocumentToWork($work_id, api_get_course_int_id());\n\n        if ('1 = 1' === trim($whereCondition)) {\n            $whereCondition = '';\n        }\n\n        if (empty($documents)) {\n            $whereCondition .= \" AND u.id = \".api_get_user_id();\n            $count = get_work_user_list(\n                0,\n                $limit,\n                null,\n                null,\n                $work_id,\n                $whereCondition,\n                null,\n                true\n            );\n        } else {\n            $count = get_work_user_list_from_documents(\n                0,\n                $limit,\n                null,\n                null,\n                $work_id,\n                api_get_user_id(),\n                $whereCondition,\n                true\n            );\n        }\n        break;\n    case 'get_work_student_list_overview':\n        if (!(api_is_allowed_to_edit() || api_is_coach())) {\n            return 0;\n        }\n        $workId = isset($_GET['work_id']) ? $_GET['work_id'] : null;\n        $count = getWorkUserListData(\n            $workId,\n            api_get_course_id(),\n            api_get_session_id(),\n            api_get_group_id(),\n            0,\n            $limit,\n            null,\n            null,\n            true\n        );\n        break;\n    case 'get_exercise_pending_results':\n        if (false === api_is_teacher()) {\n            exit;\n        }\n\n        $courseId = $_REQUEST['course_id'] ?? 0;\n        $exerciseId = $_REQUEST['exercise_id'] ?? 0;\n        $status = $_REQUEST['status'] ?? 0;\n        if (isset($_GET['filter_by_user']) && !empty($_GET['filter_by_user'])) {\n            $filter_user = (int) $_GET['filter_by_user'];\n            if (empty($whereCondition)) {\n                $whereCondition .= \" te.exe_user_id  = '$filter_user'\";\n            } else {\n                $whereCondition .= \" AND te.exe_user_id  = '$filter_user'\";\n            }\n        }\n\n        if (isset($_GET['group_id_in_toolbar']) && !empty($_GET['group_id_in_toolbar'])) {\n            $groupIdFromToolbar = (int) $_GET['group_id_in_toolbar'];\n            if (!empty($groupIdFromToolbar)) {\n                if (empty($whereCondition)) {\n                    $whereCondition .= \" te.group_id  = '$groupIdFromToolbar'\";\n                } else {\n                    $whereCondition .= \" AND group_id  = '$groupIdFromToolbar'\";\n                }\n            }\n        }\n\n        if (!empty($whereCondition)) {\n            $whereCondition = \" AND $whereCondition\";\n        }\n\n        if (!empty($courseId)) {\n            $whereCondition .= \" AND te.c_id = $courseId\";\n        }\n\n        $count = ExerciseLib::get_count_exam_results(\n            $exerciseId,\n            $whereCondition,\n            '',\n            false,\n            true,\n            $status\n        );\n\n        break;\n    case 'get_exercise_results':\n        $exercise_id = $_REQUEST['exerciseId'];\n\n        $courseId = $_REQUEST['course_id'] ?? 0;\n        $exerciseId = $_REQUEST['exercise_id'] ?? 0;\n        $status = $_REQUEST['status'] ?? 0;\n        if (isset($_GET['filter_by_user']) && !empty($_GET['filter_by_user'])) {\n            $filter_user = (int) $_GET['filter_by_user'];\n            if (empty($whereCondition)) {\n                $whereCondition .= \" te.exe_user_id  = '$filter_user'\";\n            } else {\n                $whereCondition .= \" AND te.exe_user_id  = '$filter_user'\";\n            }\n        }\n\n        if (isset($_GET['group_id_in_toolbar']) && !empty($_GET['group_id_in_toolbar'])) {\n            $groupIdFromToolbar = (int) $_GET['group_id_in_toolbar'];\n            if (!empty($groupIdFromToolbar)) {\n                if (empty($whereCondition)) {\n                    $whereCondition .= \" te.group_id  = '$groupIdFromToolbar'\";\n                } else {\n                    $whereCondition .= \" AND group_id  = '$groupIdFromToolbar'\";\n                }\n            }\n        }\n\n        if (!empty($whereCondition)) {\n            $whereCondition = \" AND $whereCondition\";\n        }\n\n        $count = ExerciseLib::get_count_exam_results(\n            $exercise_id,\n            $whereCondition,\n            api_get_course_int_id()\n        );\n        break;\n    case 'get_exercise_results_report':\n        api_protect_admin_script();\n        $exerciseId = isset($_REQUEST['exercise_id']) ? $_REQUEST['exercise_id'] : 0;\n        $courseId = isset($_REQUEST['course_id']) ? $_REQUEST['course_id'] : 0;\n\n        if (empty($exerciseId)) {\n            exit;\n        }\n\n        if (!empty($courseId)) {\n            $courseInfo = api_get_course_info_by_id($courseId);\n        } else {\n            $courseId = isset($_REQUEST['cid']) ? $_REQUEST['cid'] : '';\n            if (!empty($courseId)) {\n                $courseInfo = api_get_course_info_by_id($courseId);\n            }\n        }\n\n        if (empty($courseInfo)) {\n            exit;\n        }\n\n        $startDate = Database::escape_string($_REQUEST['start_date']);\n        if (!empty($whereCondition)) {\n            $whereCondition = \" AND $whereCondition\";\n        }\n        $whereCondition .= \" AND exe_date > '$startDate' AND te.status = '' \";\n        $count = ExerciseLib::get_count_exam_results(\n            $exerciseId,\n            $whereCondition,\n            $courseInfo['real_id'],\n            true\n        );\n        break;\n    case 'get_sessions_tracking':\n        $keyword = isset($_REQUEST['keyword']) ? $_REQUEST['keyword'] : '';\n\n        $description = '';\n        $setting = api_get_setting('show_session_description');\n        if ('true' === $setting) {\n            $description = $keyword;\n        }\n\n        if (api_is_drh() || api_is_session_admin()) {\n            $count = SessionManager::get_sessions_followed_by_drh(\n                api_get_user_id(),\n                null,\n                null,\n                true,\n                false,\n                false,\n                null,\n                $keyword,\n                $description,\n                ['where' => $whereCondition, 'extra' => $extra_fields]\n            );\n        } elseif (api_is_session_admin()) {\n            $count = SessionManager::getSessionsFollowedByUser(\n                api_get_user_id(),\n                SESSIONADMIN,\n                null,\n                null,\n                true,\n                false,\n                false,\n                null,\n                $keyword,\n                $description,\n                ['where' => $whereCondition, 'extra' => $extra_fields]\n            );\n        } else {\n            // Sessions for the coach\n            $count = Tracking::get_sessions_coached_by_user(\n                api_get_user_id(),\n                null,\n                null,\n                true,\n                $keyword,\n                $description,\n                null,\n                null,\n                ['where' => $whereCondition, 'extra' => $extra_fields]\n            );\n        }\n        break;\n    case 'get_sessions':\n        $listType = isset($_REQUEST['list_type']) ? $_REQUEST['list_type'] : SessionManager::getDefaultSessionTab();\n\n        if ('custom' === $listType && api_get_configuration_value('allow_session_status')) {\n            $whereCondition .= ' AND (s.status IN (\"'.SessionManager::STATUS_PLANNED.'\", \"'.SessionManager::STATUS_PROGRESS.'\") ) ';\n        }\n\n        switch ($listType) {\n            case 'complete':\n                $count = SessionManager::get_count_admin_complete(\n                    ['where' => $whereCondition, 'extra' => $extra_fields]\n                );\n                break;\n            case 'custom':\n            case 'active':\n            case 'close':\n            case 'all':\n            default:\n                $count = SessionManager::formatSessionsAdminForGrid(\n                    ['where' => $whereCondition, 'extra' => $extra_fields],\n                    true,\n                    [],\n                    [],\n                    $listType\n                );\n                break;\n        }\n        break;\n    case 'get_session_lp_progress':\n    case 'get_session_progress':\n        //@TODO replace this for a more efficient function (not retrieving the whole data)\n        $course = api_get_course_info_by_id($_GET['course_id']);\n        $users = CourseManager::get_student_list_from_course_code(\n            $course['code'],\n            true,\n            $_GET['session_id'],\n            $_GET['date_from'],\n            $_GET['date_to']\n        );\n        $count = count($users);\n        break;\n    case 'get_exercise_progress':\n        //@TODO replace this for a more efficient function (not retrieving the whole data)\n        $records = Tracking::get_exercise_progress(\n            $_GET['session_id'],\n            $_GET['course_id'],\n            $_GET['exercise_id'],\n            $_GET['date_from'],\n            $_GET['date_to']\n        );\n        $count = count($records);\n        break;\n    case 'get_session_access_overview':\n        //@TODO replace this for a more efficient function (not retrieving the whole data)\n        $records = SessionManager::get_user_data_access_tracking_overview(\n            $_GET['session_id'],\n            $_GET['course_id'],\n            $_GET['student_id'],\n            $_GET['profile'],\n            $_GET['date_from'],\n            $_GET['date_to'],\n            $options\n        );\n        $count = count($records);\n        break;\n    case 'get_survey_overview':\n        //@TODO replace this for a more efficient function (not retrieving the whole data)\n        $records = SessionManager::get_survey_overview(\n            $_GET['session_id'],\n            $_GET['course_id'],\n            $_GET['survey_id'],\n            $_GET['date_from'],\n            $_GET['date_to'],\n            $options\n        );\n        $count = count($records);\n        break;\n    case 'get_exercise_grade':\n        //@TODO replace this for a more efficient function (not retrieving the whole data)\n        $course = api_get_course_info_by_id($_GET['course_id']);\n        $users = CourseManager::get_student_list_from_course_code(\n            $course['code'],\n            true,\n            $_GET['session_id']\n        );\n\n        $count = count($users);\n        break;\n    case 'get_extra_fields':\n        $type = $_REQUEST['type'];\n        $obj = new ExtraField($type);\n        $count = $obj->get_count();\n        break;\n    case 'get_extra_field_options':\n        $type = $_REQUEST['type'];\n        $field_id = $_REQUEST['field_id'];\n        $obj = new ExtraFieldOption($type);\n        $count = $obj->get_count_by_field_id($field_id);\n        break;\n    case 'get_timelines':\n        $obj = new Timeline();\n        $count = $obj->get_count();\n        break;\n    case 'get_gradebooks':\n        $obj = new Gradebook();\n        $count = $obj->get_count();\n        break;\n    case 'get_careers':\n        $obj = new Career();\n        $count = $obj->get_count();\n        break;\n    case 'get_promotions':\n        $obj = new Promotion();\n        $count = $obj->get_count();\n        break;\n    case 'get_mail_template':\n        $obj = new MailTemplateManager();\n        $count = $obj->get_count();\n        break;\n    case 'get_grade_models':\n        $obj = new GradeModel();\n        $count = $obj->get_count();\n        break;\n    case 'get_usergroups':\n        $obj = new UserGroup();\n        $obj->protectScript();\n        $count = $obj->get_count($whereCondition);\n        break;\n    case 'get_usergroups_teacher':\n        $obj = new UserGroup();\n        $obj->protectScript(null, false, true);\n        $type = isset($_REQUEST['type']) ? $_REQUEST['type'] : 'registered';\n        $groupFilter = isset($_REQUEST['group_filter']) ? (int) $_REQUEST['group_filter'] : 0;\n        $keyword = isset($_REQUEST['keyword']) ? $_REQUEST['keyword'] : '';\n\n        $course_id = api_get_course_int_id();\n        $sessionId = api_get_session_id();\n        $options = [];\n        $options['course_id'] = $course_id;\n        $options['session_id'] = $sessionId;\n\n        switch ($type) {\n            case 'not_registered':\n                if (empty($sessionId)) {\n                    $options['where'] = [' (course_id IS NULL OR course_id != ?) ' => $course_id];\n                } else {\n                    $options['where'] = [' (session_id IS NULL OR session_id != ?) ' => $sessionId];\n                }\n                if (!empty($keyword)) {\n                    $options['where']['AND name like %?% '] = $keyword;\n                }\n                $count = $obj->getUserGroupNotInCourse(\n                    $options,\n                    $groupFilter,\n                    true\n                );\n                break;\n            case 'registered':\n                if (empty($sessionId)) {\n                    $options['where'] = [' usergroup.course_id = ? ' => $course_id];\n                } else {\n                    $options['where'] = [' usergroup.session_id = ? ' => $sessionId];\n                }\n                $count = $obj->getUserGroupInCourse(\n                    $options,\n                    $groupFilter,\n                    true\n                );\n                break;\n        }\n        break;\n    default:\n        exit;\n}\n\n// 3. Calculating first, end, etc\n$total_pages = 0;\nif ($count > 0) {\n    if (!empty($limit)) {\n        $total_pages = ceil((float) $count / (float) $limit);\n    }\n}\nif ($page > $total_pages) {\n    $page = $total_pages;\n}\n\n$start = $limit * $page - $limit;\nif ($start < 0) {\n    $start = 0;\n}\n\n//4. Deleting an element if the user wants to\nif (isset($_REQUEST['oper']) && 'del' == $_REQUEST['oper']) {\n    $obj->delete($_REQUEST['id']);\n}\n\n$is_allowedToEdit = api_is_allowed_to_edit(null, true) || api_is_allowed_to_edit(true) || api_is_drh();\n\n//5. Querying the DB for the elements\n$columns = [];\n\nswitch ($action) {\n    case 'get_exercise_categories':\n        api_protect_course_script();\n        if (!api_is_allowed_to_edit()) {\n            api_not_allowed(true);\n        }\n\n        $columns = ['name', 'actions'];\n        $qb = $repo->getResourcesByCourse(api_get_course_entity($courseId));\n        $items = $qb->getQuery()->getResult();\n        /** @var \\Chamilo\\CourseBundle\\Entity\\CExerciseCategory $item */\n        $result = [];\n        foreach ($items as $item) {\n            $result[] = [\n                'id' => $item->getId(),\n                'name' => $item->getName(),\n            ];\n        }\n        /*$result = $manager->get_all([\n            'where' => ['c_id = ? ' => $courseId],\n            'order' => \"$sidx $sord\",\n            'LIMIT' => \"$start , $limit\",\n        ]);*/\n        break;\n    case 'get_calendar_users':\n        $columns = ['firstname', 'lastname', 'exam'];\n        $result = $calendarPlugin->getUsersPerCalendar($id);\n        break;\n    case 'get_usergroups_users':\n        $columns = ['name', 'actions'];\n        if ('true' === api_get_plugin_setting('learning_calendar', 'enabled')) {\n            $columns = [\n                'name',\n                'calendar',\n                'gradebook_items',\n                'time_spent',\n                'lp_day_completed',\n                'days_diff',\n                'actions',\n                'calendar_id',\n            ];\n        }\n        $result = $usergroup->getUserGroupUsers($id, false, $start, $limit);\n        break;\n    case 'get_learning_path_calendars':\n        $columns = ['title', 'total_hours', 'minutes_per_day', 'actions'];\n        $sidx = in_array($sidx, $columns) ? $sidx : 'title';\n        $result = $calendarPlugin->getCalendars(\n            $start,\n            $limit,\n            $sidx,\n            $sord\n        );\n        break;\n    case 'course_log_events':\n        $columns = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n        $sidx = in_array($sidx, $columns) ? $sidx : '0';\n        $result = Statistics::getActivitiesData(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $courseId,\n            $sessionId\n        );\n        break;\n    case 'get_programmed_announcements':\n        $columns = ['subject', 'date', 'sent', 'actions'];\n        $sessionId = isset($_REQUEST['session_id']) ? (int) $_REQUEST['session_id'] : 0;\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'subject';\n        $result = Database::select(\n            '*',\n            $object->table,\n            [\n                'where' => ['session_id = ? ' => $sessionId],\n                'order' => \"$sidx $sord\",\n                'LIMIT' => \"$start , $limit\",\n            ]\n        );\n        if ($result) {\n            foreach ($result as &$item) {\n                $item['sent'] = 1 == $item['sent'] ? get_lang('Yes') : get_lang('No');\n                $item['date'] = api_get_local_time($item['date']);\n            }\n        }\n        break;\n    case 'get_group_reporting':\n        $columns = ['name', 'time', 'progress', 'score', 'works', 'messages', 'actions'];\n        $sidx = in_array($sidx, $columns) ? $sidx : 'name';\n\n        $result = Tracking::get_group_reporting(\n            $course_id,\n            $sessionId,\n            $group_id,\n            'all',\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $whereCondition\n        );\n        break;\n    case 'get_course_exercise_medias':\n        $columns = ['question'];\n        $sidx = in_array($sidx, $columns) ? $sidx : 'question';\n        $result = Question::get_course_medias(\n            $course_id,\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $whereCondition\n        );\n        break;\n    case 'get_user_course_report_resumed':\n        $columns = [\n            'extra_ruc',\n            'training_hours',\n            'count_users',\n            'count_users_registered',\n            'average_hours_per_user',\n            'count_certificates',\n        ];\n\n        $column_names = [\n            get_lang('Company'),\n            get_lang('Hours of accumulated training'),\n            get_lang('Subscriptions count'),\n            get_lang('Users count'),\n            get_lang('Avg hours/student'),\n            get_lang('Certificates count'),\n        ];\n\n        $userExtraFields = UserManager::get_extra_fields(\n            0,\n            100,\n            null,\n            null,\n            true,\n            true\n        );\n\n        if (!empty($userExtraFields)) {\n            foreach ($userExtraFields as $extra) {\n                if ('ruc' == $extra['1']) {\n                    continue;\n                }\n                $columns[] = $extra['1'];\n                $column_names[] = $extra['3'];\n            }\n        }\n\n        if (api_is_student_boss() && empty($userIdList)) {\n            $result = [];\n            break;\n        }\n\n        $result = CourseManager::get_user_list_from_course_code(\n            null,\n            null,\n            \"LIMIT $start, $limit\",\n            null,\n            null,\n            null,\n            true,\n            true,\n            ['ruc'],\n            $courseCodeList,\n            $userIdList,\n            null,\n            $sessionIdList,\n            null,\n            ['where' => $whereCondition, 'extra' => $extra_fields]\n        );\n\n        $new_result = [];\n        if (!empty($result)) {\n            foreach ($result as $row) {\n                $row['training_hours'] = api_time_to_hms($row['training_hours']);\n                $row['average_hours_per_user'] = api_time_to_hms($row['average_hours_per_user']);\n                $new_result[] = $row;\n            }\n            $result = $new_result;\n        }\n        break;\n    case 'get_user_course_report':\n        $columns = [\n            'course',\n            'user',\n            'email',\n            'time',\n            'certificate',\n            'progress_100',\n            'progress',\n        ];\n        $column_names = [\n            get_lang('Course'),\n            get_lang('User'),\n            get_lang('e-mail'),\n            get_lang('Man hours'),\n            get_lang('Generated certificate'),\n            get_lang('Approved'),\n            get_lang('Course progress'),\n        ];\n\n        $userExtraFields = UserManager::get_extra_fields(\n            0,\n            100,\n            null,\n            null,\n            true,\n            true\n        );\n        if (!empty($userExtraFields)) {\n            foreach ($userExtraFields as $extra) {\n                $columns[] = $extra['1'];\n                $column_names[] = $extra['3'];\n            }\n        }\n\n        if (api_is_student_boss()) {\n            $columns[] = 'group';\n            $column_names[] = get_lang('Group');\n        }\n\n        if (!in_array($sidx, ['title'])) {\n            $sidx = 'title';\n        }\n\n        if (api_is_student_boss() && empty($userIdList)) {\n            $result = [];\n            break;\n        }\n\n        //get sessions\n        $sessions = [];\n        if (count($sessionIdList) > 0) {\n            $sessions = CourseManager::get_user_list_from_course_code(\n                null,\n                null,\n                \"LIMIT $start, $limit\",\n                \" $sidx $sord\",\n                null,\n                null,\n                true,\n                false,\n                null,\n                $courseCodeList,\n                $userIdList,\n                null,\n                $sessionIdList,\n                null,\n                ['where' => $whereCondition, 'extra' => $extra_fields]\n            );\n        }\n\n        //get courses\n        $courses = CourseManager::get_user_list_from_course_code(\n            null,\n            null,\n            \"LIMIT $start, $limit\",\n            \" $sidx $sord\",\n            null,\n            null,\n            true,\n            false,\n            null,\n            [],\n            $userIdList,\n            null,\n            null,\n            null,\n            ['where' => $whereCondition, 'extra' => $extra_fields]\n        );\n\n        //merge courses and sessions\n        $result = array_merge($sessions, $courses);\n\n        if (api_is_student_boss()) {\n            $userGroup = new UserGroup();\n            foreach ($result as &$item) {\n                $userGroups = $userGroup->get_groups_by_user($item['user_id']);\n                $item['group'] = implode(\", \", array_column($userGroups, 'name'));\n                unset($item['user_id']);\n            }\n        }\n\n        break;\n    case 'get_user_skill_ranking':\n        $columns = [\n            'photo',\n            'firstname',\n            'lastname',\n            'skills_acquired',\n            'currently_learning',\n            'rank',\n        ];\n        if ('1 = 1' === trim($whereCondition)) {\n            $whereCondition = '';\n        }\n        $sidx = in_array($sidx, $columns) ? $sidx : 'firstname';\n        $result = $skill->getUserListSkillRanking(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $whereCondition\n        );\n        $result = msort($result, 'skills_acquired', 'asc');\n\n        $skills_in_course = [];\n        if (!empty($result)) {\n            foreach ($result as &$item) {\n                $user_info = api_get_user_info($item['user_id']);\n                $personal_course_list = UserManager::get_personal_session_course_list(\n                    $item['user_id']\n                );\n                $count_skill_by_course = [];\n                foreach ($personal_course_list as $course_item) {\n                    if (!isset($skills_in_course[$course_item['code']])) {\n                        $count_skill_by_course[$course_item['code']] = $skill->getCountSkillsByCourse(\n                            $course_item['code']\n                        );\n                        $skills_in_course[$course_item['code']] = $count_skill_by_course[$course_item['code']];\n                    } else {\n                        $count_skill_by_course[$course_item['code']] = $skills_in_course[$course_item['code']];\n                    }\n                }\n                $item['photo'] = Display::img($user_info['avatar_small'], $user_info['complete_name'], [], false);\n                $item['currently_learning'] = !empty($count_skill_by_course) ? array_sum($count_skill_by_course) : 0;\n            }\n        }\n        break;\n    case 'get_course_announcements':\n        $columns = [\n            'title',\n            'username',\n            'insert_date',\n            'actions',\n        ];\n\n        $titleToSearch = $_REQUEST['title_to_search'] ?? '';\n        $userIdToSearch = $_REQUEST['user_id_to_search'] ?? 0;\n\n        $result = AnnouncementManager::getAnnouncements(\n            null,\n            null,\n            false,\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $titleToSearch,\n            $userIdToSearch\n        );\n\n        break;\n    case 'get_work_teacher':\n        $columns = [\n            'type',\n            'title',\n            'sent_date',\n            'expires_on',\n            'amount',\n            'actions',\n        ];\n        $sidx = in_array($sidx, $columns) ? $sidx : 'title';\n        $result = getWorkListTeacher(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $whereCondition\n        );\n        break;\n    case 'get_work_student':\n        $columns = [\n            'type',\n            'title',\n            'expires_on',\n            'feedback',\n            'last_upload',\n            'others',\n        ];\n        $sidx = in_array($sidx, $columns) ? $sidx : 'title';\n        $result = getWorkListStudent(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $whereCondition\n        );\n        break;\n    case 'get_all_work_student':\n        $columns = [\n            'type',\n            'title',\n            'expires_on',\n        ];\n\n        if ($withResults) {\n            $columns[] = 'feedback';\n            $columns[] = 'last_upload';\n        }\n        $sidx = in_array($sidx, $columns) ? $sidx : 'title';\n        $result = getAllWorkListStudent(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $whereCondition,\n            false,\n            $withResults\n        );\n        break;\n    case 'get_work_user_list_all':\n        $plagiarismColumns = [];\n        if (api_get_configuration_value('allow_compilatio_tool')) {\n            $plagiarismColumns = ['compilatio'];\n        }\n        if (isset($_GET['type']) && 'simple' === $_GET['type']) {\n            $columns = [\n                'fullname',\n                'title',\n                'qualification',\n                'sent_date',\n                'qualificator_id',\n                'correction',\n            ];\n            $columns = array_merge($columns, $plagiarismColumns);\n            $columns[] = 'actions';\n        } else {\n            $columns = [\n                'fullname',\n                'title',\n                'qualification',\n                'sent_date',\n                'correction',\n            ];\n            $columns = array_merge($columns, $plagiarismColumns);\n            $columns[] = 'actions';\n        }\n\n        $whereCondition = \" AND $whereCondition \";\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'title';\n        $result = get_work_user_list(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $work_id,\n            $whereCondition\n        );\n        break;\n    case 'get_work_pending_list':\n        api_block_anonymous_users();\n        if (false === api_is_teacher()) {\n            exit;\n        }\n        $plagiarismColumns = [];\n        if (api_get_configuration_value('allow_compilatio_tool')) {\n            $plagiarismColumns = ['compilatio'];\n        }\n        $columns = [\n            'course',\n            'work_name',\n            'fullname',\n            'title',\n            'qualification',\n            'sent_date',\n            'qualificator_id',\n            'correction',\n        ];\n        $columns = array_merge($columns, $plagiarismColumns);\n        $columns[] = 'actions';\n        $sidx = in_array($sidx, $columns) ? $sidx : 'work_name';\n        $result = getAllWork(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $whereCondition,\n            false,\n            $courseId,\n            $status\n        );\n        break;\n    case 'get_work_user_list_others':\n        $plagiarismColumns = [];\n        if (api_get_configuration_value('allow_compilatio_tool')) {\n            $plagiarismColumns = ['compilatio'];\n        }\n\n        if (isset($_GET['type']) && 'simple' === $_GET['type']) {\n            $columns = [\n                'type',\n                'firstname',\n                'lastname',\n                'title',\n                'qualification',\n                'sent_date',\n                'qualificator_id',\n            ];\n            $columns = array_merge($columns, $plagiarismColumns);\n            $columns[] = 'actions';\n        } else {\n            $columns = ['type', 'firstname', 'lastname', 'title', 'sent_date'];\n            $columns = array_merge($columns, $plagiarismColumns);\n            $columns[] = 'actions';\n        }\n\n        if ('1 = 1' === trim($whereCondition)) {\n            $whereCondition = '';\n        }\n\n        $whereCondition .= \" AND u.id <> \".api_get_user_id();\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'firstname';\n        $result = get_work_user_list(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $work_id,\n            $whereCondition\n        );\n        break;\n    case 'get_work_user_list':\n        $plagiarismColumns = [];\n        if (api_get_configuration_value('allow_compilatio_tool') && api_is_allowed_to_edit()) {\n            $plagiarismColumns = ['compilatio'];\n        }\n        if (isset($_GET['type']) && 'simple' == $_GET['type']) {\n            $columns = [\n                'type',\n                'title',\n                'qualification',\n                'sent_date',\n                'qualificator_id',\n            ];\n            $columns = array_merge($columns, $plagiarismColumns);\n            $columns[] = 'actions';\n        } else {\n            $columns = ['type', 'title', 'qualification', 'sent_date'];\n            $columns = array_merge($columns, $plagiarismColumns);\n            $columns[] = 'actions';\n        }\n        $documents = getAllDocumentToWork($work_id, api_get_course_int_id());\n\n        if ('1 = 1' === trim($whereCondition)) {\n            $whereCondition = '';\n        }\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'title';\n        if (empty($documents)) {\n            $whereCondition .= ' AND u.id = '.api_get_user_id();\n            $result = get_work_user_list(\n                $start,\n                $limit,\n                $sidx,\n                $sord,\n                $work_id,\n                $whereCondition\n            );\n        } else {\n            $result = get_work_user_list_from_documents(\n                $start,\n                $limit,\n                $sidx,\n                $sord,\n                $work_id,\n                api_get_user_id(),\n                $whereCondition\n            );\n        }\n        break;\n    case 'get_exercise_pending_results':\n        $columns = [\n            'course',\n            'exercise',\n            'firstname',\n            'lastname',\n            'username',\n            'exe_duration',\n            'start_date',\n            'exe_date',\n            'score',\n            'user_ip',\n            'status',\n            'actions',\n        ];\n        $officialCodeInList = api_get_setting('show_official_code_exercise_result_list');\n        if ($officialCodeInList === 'true') {\n            $columns = array_merge(['official_code'], $columns);\n        }\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'course';\n\n        $result = ExerciseLib::get_exam_results_data(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $exerciseId,\n            $whereCondition,\n            false,\n            null,\n            false,\n            false,\n            [],\n            false,\n            false,\n            false,\n            true,\n            $status\n        );\n\n        break;\n    case 'get_exercise_results':\n        $is_allowedToEdit = api_is_allowed_to_edit(null, true) ||\n            api_is_drh() ||\n            api_is_student_boss() ||\n            api_is_session_admin();\n        if ($is_allowedToEdit || api_is_student_boss()) {\n            $columns = [\n                'firstname',\n                'lastname',\n                'username',\n                'group_name',\n                'exe_duration',\n                'start_date',\n                'exe_date',\n                'score',\n                'user_ip',\n                'status',\n                'lp',\n                'actions',\n            ];\n            $officialCodeInList = api_get_setting('show_official_code_exercise_result_list');\n            if ('true' === $officialCodeInList) {\n                $columns = array_merge(['official_code'], $columns);\n            }\n        }\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'firstname';\n        $result = ExerciseLib::get_exam_results_data(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $exercise_id,\n            $whereCondition,\n            false,\n            api_get_course_int_id()\n        );\n        break;\n    case 'get_exercise_results_report':\n        $columns = [\n            'firstname',\n            'lastname',\n            'username',\n        ];\n        $extraFieldsToAdd = [];\n        $extraFields = api_get_configuration_value('exercise_category_report_user_extra_fields');\n        $roundValues = api_get_configuration_value('exercise_category_round_score_in_export');\n\n        if (!empty($extraFields) && isset($extraFields['fields'])) {\n            $extraField = new ExtraField('user');\n            foreach ($extraFields['fields'] as $variable) {\n                $info = $extraField->get_handler_field_info_by_field_variable($variable);\n                if ($info) {\n                    $extraFieldsToAdd[] = $variable;\n                }\n            }\n        }\n        if (!empty($extraFieldsToAdd)) {\n            $columns = array_merge($columns, $extraFieldsToAdd);\n        }\n\n        $columns[] = 'session';\n        $columns[] = 'session_access_start_date';\n        $columns[] = 'exe_date';\n        $columns[] = 'score';\n\n        if ('excel' === $operation) {\n            $columns = [\n                'firstname',\n                'lastname',\n                'username',\n            ];\n\n            if (!empty($extraFieldsToAdd)) {\n                $columns = array_merge($columns, $extraFieldsToAdd);\n            }\n\n            $columns[] = 'session';\n            $columns[] = 'session_access_start_date';\n            $columns[] = 'exe_date';\n            $columns[] = 'score_percentage';\n            $columns[] = 'only_score';\n            $columns[] = 'total';\n\n            $overwriteColumnHeaderExport['session_access_start_date'] = get_lang('Access start date');\n            $overwriteColumnHeaderExport['exe_date'] = get_lang('Start Date');\n            $overwriteColumnHeaderExport['score_percentage'] = get_lang('Score').' - '.get_lang('Percentage');\n            $overwriteColumnHeaderExport['only_score'] = get_lang('Score').' - '.get_lang('Note');\n            $overwriteColumnHeaderExport['total'] = get_lang('Score').' - '.get_lang('Test');\n        }\n        $categoryList = TestCategory::getListOfCategoriesIDForTest($exerciseId, $courseId);\n\n        if (!empty($categoryList)) {\n            foreach ($categoryList as $categoryInfo) {\n                $label = 'category_'.$categoryInfo['id'];\n                if ('excel' === $operation) {\n                    $columns[] = $label.'_score_percentage';\n                    $columns[] = $label.'_only_score';\n                    $columns[] = $label.'_total';\n                    $overwriteColumnHeaderExport[$label] = $categoryInfo['title'];\n                    $overwriteColumnHeaderExport[$label.'_score_percentage'] = $categoryInfo['title'].\n                        ' - '.get_lang('Percentage');\n                    $overwriteColumnHeaderExport[$label.'_only_score'] = $categoryInfo['title'].\n                        ' - '.get_lang('Note');\n                    $overwriteColumnHeaderExport[$label.'_total'] = $categoryInfo['title'].\n                        ' - '.get_lang('Test');\n                } else {\n                    $columns[] = $label;\n                }\n            }\n        }\n\n        if ('excel' !== $operation) {\n            $columns[] = 'actions';\n        }\n\n        $whereCondition .= \" AND te.status = '' \";\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'firstname';\n        $result = ExerciseLib::get_exam_results_data(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $exerciseId,\n            $whereCondition,\n            false,\n            $courseInfo['real_id'],\n            true,\n            true,\n            $extraFieldsToAdd,\n            true,\n            $roundValues\n        );\n        break;\n    case 'get_work_student_list_overview':\n        if (!(api_is_allowed_to_edit() || api_is_coach())) {\n            return [];\n        }\n        $columns = [\n            'student',\n            'works',\n        ];\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'student';\n        $result = getWorkUserListData(\n            $workId,\n            api_get_course_id(),\n            api_get_session_id(),\n            api_get_group_id(),\n            $start,\n            $limit,\n            $sidx,\n            $sord\n        );\n        break;\n    case 'get_sessions_tracking':\n        $sessionColumns = SessionManager::getGridColumns('my_space');\n        $columns = $sessionColumns['simple_column_name'];\n\n        if (api_is_drh()) {\n            $orderByName = Database::escape_string($sidx);\n            $orderByName = in_array($orderByName, ['name', 'access_start_date']) ? $orderByName : 'name';\n            $orderBy = \" ORDER BY $orderByName $sord\";\n            $sessions = SessionManager::get_sessions_followed_by_drh(\n                api_get_user_id(),\n                $start,\n                $limit,\n                false,\n                false,\n                false,\n                $orderBy,\n                $keyword,\n                $description,\n                ['where' => $whereCondition, 'extra' => $extra_fields]\n            );\n        } elseif (api_is_session_admin()) {\n            $orderByName = Database::escape_string($sidx);\n            $orderByName = in_array($orderByName, ['name', 'access_start_date']) ? $orderByName : 'name';\n            $orderBy = \" ORDER BY $orderByName $sord\";\n            $sessions = SessionManager::getSessionsFollowedByUser(\n                api_get_user_id(),\n                SESSIONADMIN,\n                $start,\n                $limit,\n                false,\n                false,\n                false,\n                $orderBy,\n                $keyword,\n                $description,\n                ['where' => $whereCondition, 'extra' => $extra_fields]\n            );\n        } else {\n            $sidx = in_array($sidx, $columns) ? $sidx : 'name';\n            // Sessions for the coach\n            $sessions = Tracking::get_sessions_coached_by_user(\n                api_get_user_id(),\n                $start,\n                $limit,\n                false,\n                $keyword,\n                $description,\n                $sidx,\n                $sord,\n                ['where' => $whereCondition, 'extra' => $extra_fields]\n            );\n        }\n\n        $result = [];\n        if (!empty($sessions)) {\n            $pdfIcon = Display::return_icon('pdf.png', get_lang('CertificateOfAchievement'), [], ICON_SIZE_SMALL);\n            foreach ($sessions as $session) {\n                if (api_drh_can_access_all_session_content()) {\n                    $count_courses_in_session = SessionManager::get_course_list_by_session_id(\n                        $session['id'],\n                        '',\n                        null,\n                        true\n                    );\n                } else {\n                    $count_courses_in_session = count(\n                        Tracking::get_courses_followed_by_coach(\n                            api_get_user_id(),\n                            $session['id']\n                        )\n                    );\n                }\n\n                $count_users_in_session = SessionManager::get_users_by_session(\n                    $session['id'],\n                    0,\n                    true\n                );\n\n                $session['display_start_date'] = '';\n                $session['display_end_date'] = '';\n                $session['coach_access_start_date'] = '';\n                $session['coach_access_end_date'] = '';\n                $dateData = SessionManager::parseSessionDates($session, true);\n                $dateToString = $dateData['access'];\n\n                $detailButtons = [];\n                $detailButtons[] = Display::url(\n                    $pdfIcon,\n                    api_get_path(WEB_CODE_PATH).'mySpace/session.php?'\n                    .http_build_query(\n                        [\n                            'action' => 'export_to_pdf',\n                            'type' => 'achievement',\n                            'session_to_export' => $session['id'],\n                            'all_students' => 1,\n                        ]\n                    ),\n                    ['target' => '_blank']\n                );\n                $detailButtons[] = Display::url(\n                    Display::return_icon('works.png', get_lang('WorksReport')),\n                    api_get_path(WEB_CODE_PATH).'mySpace/works_in_session_report.php?session='.$session['id']\n                );\n                $detailButtons[] = Display::url(\n                    Display::return_icon('2rightarrow.png'),\n                    api_get_path(WEB_CODE_PATH).'mySpace/course.php?session_id='.$session['id']\n                );\n\n                $item = [\n                    'name' => Display::url(\n                        $session['name'],\n                        api_get_path(WEB_CODE_PATH).'mySpace/course.php?session_id='.$session['id']\n                    ),\n                    'date' => $dateToString,\n                    'course_per_session' => $count_courses_in_session,\n                    'student_per_session' => $count_users_in_session,\n                    'actions' => implode(' ', $detailButtons),\n                ];\n\n                if (!empty($extra_fields)) {\n                    foreach ($extra_fields as $extraField) {\n                        $item[$extraField['field']] = $extraField['data'];\n                    }\n                }\n                $result[] = $item;\n            }\n        }\n        break;\n    case 'get_sessions':\n        $sessionColumns = SessionManager::getGridColumns($listType);\n        $columns = $sessionColumns['simple_column_name'];\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'name';\n        switch ($listType) {\n            case 'complete':\n                $result = SessionManager::get_sessions_admin_complete(\n                    [\n                        'where' => $whereCondition,\n                        'order' => \"$sidx $sord, s.name\",\n                        'extra' => $extra_fields,\n                        'limit' => \"$start , $limit\",\n                    ]\n                );\n                break;\n            case 'active':\n            case 'close':\n            case 'custom':\n            case 'all':\n                $result = SessionManager::formatSessionsAdminForGrid(\n                    [\n                        'where' => $whereCondition,\n                        'order' => \"$sidx $sord, s.name\",\n                        'extra' => $extra_fields,\n                        'limit' => \"$start , $limit\",\n                    ],\n                    false,\n                    $sessionColumns,\n                    [],\n                    $listType\n                );\n                break;\n        }\n        break;\n    case 'get_exercise_progress':\n        $sessionId = (int) $_GET['session_id'];\n        $courseId = (int) $_GET['course_id'];\n        $exerciseId = (int) $_GET['exercise_id'];\n        $date_from = $_GET['date_from'];\n        $date_to = $_GET['date_to'];\n\n        $columns = [\n            'session',\n            'exercise_id',\n            'quiz_title',\n            'username',\n            'lastname',\n            'firstname',\n            'time',\n            'question_id',\n            'question',\n            'description',\n            'answer',\n            'correct',\n        ];\n        $sidx = in_array($sidx, $columns) ? $sidx : 'quiz_title';\n\n        $result = Tracking::get_exercise_progress(\n            $sessionId,\n            $courseId,\n            $exerciseId,\n            $date_from,\n            $date_to,\n            [\n                'where' => $whereCondition,\n                'order' => \"$sidx $sord\",\n                'limit' => \"$start , $limit\",\n            ]\n        );\n        break;\n    case 'get_session_lp_progress':\n        $sessionId = 0;\n        if (!empty($_GET['session_id']) && !empty($_GET['course_id'])) {\n            $sessionId = (int) $_GET['session_id'];\n            $courseId = (int) $_GET['course_id'];\n            $course = api_get_course_info_by_id($courseId);\n        }\n\n        /**\n         * Add lessons of course.\n         */\n        $columns = [\n            'username',\n            'firstname',\n            'lastname',\n        ];\n        $lessons = LearnpathList::get_course_lessons($course['code'], $sessionId);\n        foreach ($lessons as $lesson_id => $lesson) {\n            $columns[] = $lesson_id;\n        }\n        $columns[] = 'total';\n        $sidx = in_array($sidx, $columns) ? $sidx : 'username';\n        $result = SessionManager::get_session_lp_progress(\n            $sessionId,\n            $courseId,\n            $date_from,\n            $date_to,\n            [\n                'where' => $whereCondition,\n                'order' => \"$sidx $sord\",\n                'limit' => \"$start , $limit\",\n            ]\n        );\n        break;\n    case 'get_survey_overview':\n        $sessionId = 0;\n        if (!empty($_GET['session_id']) &&\n            !empty($_GET['course_id']) &&\n            !empty($_GET['survey_id'])\n        ) {\n            $sessionId = (int) $_GET['session_id'];\n            $courseId = (int) $_GET['course_id'];\n            $surveyId = (int) $_GET['survey_id'];\n            $date_from = $_GET['date_from'];\n            $date_to = $_GET['date_to'];\n        }\n        /**\n         * Add lessons of course.\n         */\n        $columns = [\n            'username',\n            'firstname',\n            'lastname',\n        ];\n\n        $questions = SurveyManager::get_questions($surveyId, $courseId);\n\n        foreach ($questions as $question_id => $question) {\n            $columns[] = $question_id;\n        }\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'username';\n        $result = SessionManager::get_survey_overview(\n            $sessionId,\n            $courseId,\n            $surveyId,\n            $date_from,\n            $date_to,\n            [\n                'where' => $whereCondition,\n                'order' => \"$sidx $sord\",\n                'limit' => \"$start , $limit\",\n            ]\n        );\n        break;\n    case 'get_session_progress':\n        $columns = [\n            'lastname',\n            'firstname',\n            'username',\n            //'profile',\n            'total',\n            'courses',\n            'lessons',\n            'exercises',\n            'forums',\n            'homeworks',\n            'wikis',\n            'surveys',\n            //exercises\n            'lessons_total',\n            'lessons_done',\n            'lessons_left',\n            'lessons_progress',\n            //exercises\n            'exercises_total',\n            'exercises_done',\n            'exercises_left',\n            'exercises_progress',\n            //forums\n            'forums_total',\n            'forums_done',\n            'forums_left',\n            'forums_progress',\n            //assignments\n            'assignments_total',\n            'assignments_done',\n            'assignments_left',\n            'assignments_progress',\n            //Wiki\n            'wiki_total',\n            'wiki_revisions',\n            'wiki_read',\n            'wiki_unread',\n            'wiki_progress',\n            //surveys\n            'surveys_total',\n            'surveys_done',\n            'surveys_left',\n            'surveys_progress',\n        ];\n        $sessionId = 0;\n        if (!empty($_GET['course_id']) && !empty($_GET['session_id'])) {\n            $sessionId = intval($_GET['session_id']);\n            $courseId = intval($_GET['course_id']);\n        }\n        $sidx = in_array($sidx, $columns) ? $sidx : 'username';\n        $result = SessionManager::get_session_progress(\n            $sessionId,\n            $courseId,\n            null,\n            null,\n            [\n                'where' => $whereCondition,\n                'order' => \"$sidx $sord\",\n                'limit' => \"$start , $limit\",\n            ]\n        );\n        break;\n    case 'get_session_access_overview':\n        $columns = [\n            'logindate',\n            'username',\n            'lastname',\n            'firstname',\n            'clicks',\n            'ip',\n            'timeLoggedIn',\n            'session',\n        ];\n        $sessionId = 0;\n        if (!empty($_GET['course_id']) && !empty($_GET['session_id'])) {\n            $sessionId = intval($_GET['session_id']);\n            $courseId = intval($_GET['course_id']);\n            $studentId = intval($_GET['student_id']);\n            $profile = intval($_GET['profile']);\n            $date_from = intval($_GET['date_from']);\n            $date_to = intval($_GET['date_to']);\n        }\n        $sidx = in_array($sidx, $columns) ? $sidx : 'logindate';\n\n        $result = SessionManager::get_user_data_access_tracking_overview(\n            $sessionId,\n            $courseId,\n            $studentId,\n            $profile,\n            $date_to,\n            $date_from,\n            [\n                'where' => $whereCondition,\n                'order' => \"$sidx $sord\",\n                'limit' => \"$start , $limit\",\n            ]\n        );\n        break;\n    case 'get_timelines':\n        $columns = ['headline', 'actions'];\n\n        if (!in_array($sidx, $columns)) {\n            $sidx = 'headline';\n        }\n        $sidx = in_array($sidx, $columns) ? $sidx : 'headline';\n        $course_id = api_get_course_int_id();\n        $result = Database::select(\n            '*',\n            $obj->table,\n            [\n                'where' => [\n                    'parent_id = ? AND c_id = ?' => ['0', $course_id],\n                ],\n                'order' => \"$sidx $sord\",\n                'LIMIT' => \"$start , $limit\",\n            ]\n        );\n        $new_result = [];\n        foreach ($result as $item) {\n            if (!$item['status']) {\n                $item['name'] = '<font style=\"color:#AAA\">'.$item['name'].'</font>';\n            }\n            $item['headline'] = Display::url(\n                $item['headline'],\n                api_get_path(WEB_CODE_PATH).'timeline/view.php?id='.$item['id']\n            );\n            $item['actions'] = Display::url(\n                Display::return_icon('add.png', get_lang('Add items')),\n                api_get_path(WEB_CODE_PATH).'timeline/?action=add_item&parent_id='.$item['id']\n            );\n            $item['actions'] .= Display::url(\n                Display::return_icon('edit.png', get_lang('Edit')),\n                api_get_path(WEB_CODE_PATH).'timeline/?action=edit&id='.$item['id']\n            );\n            $item['actions'] .= Display::url(\n                Display::return_icon('delete.png', get_lang('Delete')),\n                api_get_path(WEB_CODE_PATH).'timeline/?action=delete&id='.$item['id']\n            );\n\n            $new_result[] = $item;\n        }\n        $result = $new_result;\n        break;\n    case 'get_gradebooks':\n        $columns = ['name', 'certificates', 'skills', 'actions', 'has_certificates'];\n        if (!in_array($sidx, $columns)) {\n            $sidx = 'name';\n        }\n        $result = Database::select(\n            '*',\n            $obj->table,\n            ['order' => \"$sidx $sord\", 'LIMIT' => \"$start , $limit\"]\n        );\n        $new_result = [];\n        foreach ($result as $item) {\n            if (0 != $item['parent_id']) {\n                continue;\n            }\n            $skills = $obj->getSkillsByGradebook($item['id']);\n            $courseId = $item['c_id'];\n            $courseInfo = api_get_course_info_by_id($courseId);\n\n            //Fixes bug when gradebook doesn't have names\n            if (empty($item['name'])) {\n                $item['name'] = $courseInfo['code'];\n            }\n\n            $item['name'] = Display::url(\n                $item['name'],\n                api_get_path(WEB_CODE_PATH).'gradebook/index.php?sid=0&cid='.$courseInfo['real_id']\n            );\n\n            if (!empty($item['certif_min_score']) && !empty($item['document_id'])) {\n                $item['certificates'] = Display::return_icon(\n                    'accept.png',\n                    get_lang('With Certificate'),\n                    [],\n                    ICON_SIZE_SMALL\n                );\n                $item['has_certificates'] = '1';\n            } else {\n                $item['certificates'] = Display::return_icon(\n                    'warning.png',\n                    get_lang('No certificate'),\n                    [],\n                    ICON_SIZE_SMALL\n                );\n                $item['has_certificates'] = '0';\n            }\n\n            if (!empty($skills)) {\n                $item['skills'] = '';\n                foreach ($skills as $skill) {\n                    $item['skills'] .= Display::span($skill['name'], ['class' => 'label_tag skill']);\n                }\n            }\n            $new_result[] = $item;\n        }\n        $result = $new_result;\n        break;\n    case 'get_careers':\n        $columns = ['name', 'description', 'actions'];\n        if (!in_array($sidx, $columns)) {\n            $sidx = 'name';\n        }\n        $result = Database::select(\n            '*',\n            $obj->table,\n            ['order' => \"$sidx $sord\", 'LIMIT' => \"$start , $limit\"]\n        );\n        $new_result = [];\n        foreach ($result as $item) {\n            if (!$item['status']) {\n                $item['name'] = '<font style=\"color:#AAA\">'.$item['name'].'</font>';\n            }\n            $new_result[] = $item;\n        }\n        $result = $new_result;\n        break;\n    case 'get_promotions':\n        $columns = ['name', 'career', 'description', 'actions'];\n        if (!in_array($sidx, $columns)) {\n            $sidx = 'name';\n        }\n\n        $result = Database::select(\n            'p.id,p.name, p.description, c.name as career, p.status',\n            \"$obj->table p LEFT JOIN \".Database::get_main_table(TABLE_CAREER).\" c  ON c.id = p.career_id \",\n            ['order' => \"$sidx $sord\", 'LIMIT' => \"$start , $limit\"]\n        );\n\n        $new_result = [];\n        foreach ($result as $item) {\n            if (!$item['status']) {\n                $item['name'] = '<font style=\"color:#AAA\">'.$item['name'].'</font>';\n            }\n            $new_result[] = $item;\n        }\n        $result = $new_result;\n        break;\n    case 'get_mail_template':\n        $columns = ['name', 'type', 'default_template', 'actions'];\n        if (!in_array($sidx, $columns)) {\n            $sidx = 'name';\n        }\n\n        if (!in_array($sidx, $columns)) {\n            $sidx = 'name';\n        }\n\n        $result = Database::select(\n            '*',\n            $obj->table,\n            [\n                'where' => ['url_id = ? ' => api_get_current_access_url_id()],\n                'order' => \"$sidx $sord\",\n                'LIMIT' => \"$start , $limit\",\n            ]\n        );\n\n        $new_result = [];\n        foreach ($result as $item) {\n            $new_result[] = $item;\n        }\n        $result = $new_result;\n        break;\n    case 'get_grade_models':\n        $columns = ['name', 'description', 'actions'];\n        if (!in_array($sidx, $columns)) {\n            $sidx = 'name';\n        }\n        $result = Database::select(\n            '*',\n            \"$obj->table \",\n            ['order' => \"$sidx $sord\", 'LIMIT' => \"$start , $limit\"]\n        );\n        $new_result = [];\n        foreach ($result as $item) {\n            $new_result[] = $item;\n        }\n        $result = $new_result;\n        break;\n    case 'get_usergroups':\n        $obj->protectScript();\n        $columns = ['name', 'users', 'courses', 'sessions', 'group_type', 'actions'];\n        $sidx = in_array($sidx, $columns) ? $sidx : 'name';\n        $result = $obj->getUsergroupsPagination($sidx, $sord, $start, $limit, $whereCondition);\n        break;\n    case 'get_extra_fields':\n        $obj = new ExtraField($type);\n        $columns = [\n            'display_text',\n            'variable',\n            'field_type',\n            'changeable',\n            'visible_to_self',\n            'visible_to_others',\n            'filter',\n            'field_order',\n        ];\n        $sidx = in_array($sidx, $columns) ? $sidx : 'display_text';\n        $result = $obj->getAllGrid($sidx, $sord, $start, $limit);\n        $new_result = [];\n        if (!empty($result)) {\n            $checkIcon = Display::return_icon(\n                'check-circle.png',\n                get_lang('Yes')\n            );\n            $timesIcon = Display::return_icon(\n                'closed-circle.png',\n                get_lang('No')\n            );\n            foreach ($result as $item) {\n                $item['display_text'] = ExtraField::translateDisplayName(\n                    $item['variable'],\n                    $item['displayText']\n                );\n                $item['field_type'] = $obj->get_field_type_by_id($item['fieldType']);\n                $item['changeable'] = $item['changeable'] ? $checkIcon : $timesIcon;\n                $item['visible_to_self'] = $item['visibleToSelf'] ? $checkIcon : $timesIcon;\n                $item['visible_to_others'] = $item['visibleToOthers'] ? $checkIcon : $timesIcon;\n                $item['filter'] = $item['filter'] ? $checkIcon : $timesIcon;\n                $new_result[] = $item;\n            }\n            $result = $new_result;\n        }\n        break;\n    case 'get_exercise_grade':\n        $objExercise = new Exercise();\n        $exercises = $objExercise->getExercisesByCourseSession($_GET['course_id'], $_GET['session_id']);\n        $cntExer = 4;\n        if (!empty($exercises)) {\n            $cntExer += count($exercises);\n        }\n\n        $columns = [];\n        //Get dynamic column names\n        $i = 1;\n        $column_names = [];\n        foreach (range(1, $cntExer) as $cnt) {\n            switch ($cnt) {\n                case 1:\n                    $columns[] = 'session';\n                    $column_names[] = get_lang('Section');\n                    break;\n                case 2:\n                    $columns[] = 'username';\n                    $column_names[] = get_lang('Username');\n                    break;\n                case 3:\n                    $columns[] = 'name';\n                    $column_names[] = get_lang('Name');\n                    break;\n                case $cntExer:\n                    $columns[] = 'finalScore';\n                    $column_names[] = get_lang('Final score');\n                    break;\n                default:\n                    $title = '';\n                    if (!empty($exercises[$cnt - 4]['title'])) {\n                        $title = ucwords(strtolower(trim($exercises[$cnt - 4]['title'])));\n                    }\n                    $columns[] = 'exer'.$i;\n                    $column_names[] = $title;\n                    $i++;\n                    break;\n            }\n        }\n\n        $quizIds = [];\n        if (!empty($exercises)) {\n            foreach ($exercises as $exercise) {\n                $quizIds[] = $exercise['id'];\n            }\n        }\n\n        $course = api_get_course_info_by_id($_GET['course_id']);\n        $listUserSess = CourseManager::get_student_list_from_course_code(\n            $course['code'],\n            true,\n            $_GET['session_id']\n        );\n\n        $usersId = array_keys($listUserSess);\n        $users = UserManager::get_user_list_by_ids(\n            $usersId,\n            null,\n            \"lastname, firstname\",\n            \"$start , $limit\"\n        );\n        $exeResults = $objExercise->getExerciseAndResult(\n            $_GET['course_id'],\n            $_GET['session_id'],\n            $quizIds\n        );\n\n        $arrGrade = [];\n        foreach ($exeResults as $exeResult) {\n            $arrGrade[$exeResult['exe_user_id']][$exeResult['exe_exo_id']] = $exeResult['score'];\n        }\n\n        $result = [];\n        $i = 0;\n        foreach ($users as $user) {\n            $sessionInfo = SessionManager::fetch($listUserSess[$user['user_id']]['id_session']);\n            $result[$i]['session'] = $sessionInfo['name'];\n            $result[$i]['username'] = $user['username'];\n            $result[$i]['name'] = $user['lastname'].\" \".$user['firstname'];\n            $j = 1;\n            $finalScore = 0;\n            foreach ($quizIds as $quizID) {\n                $grade = '';\n                if (!empty($arrGrade[$user['user_id']][$quizID]) || 0 == $arrGrade[$user['user_id']][$quizID]) {\n                    $finalScore += $grade = $arrGrade[$user['user_id']][$quizID];\n                }\n                $result[$i]['exer'.$j] = $grade;\n                $j++;\n            }\n\n            if ($finalScore > 20) {\n                $finalScore = 20;\n            }\n\n            $result[$i]['finalScore'] = number_format($finalScore, 2);\n\n            $i++;\n        }\n        break;\n    case 'get_extra_field_options':\n        $obj = new ExtraFieldOption($type);\n        $columns = ['display_text', 'option_value', 'option_order'];\n        $sidx = in_array($sidx, $columns) ? $sidx : 'display_text';\n        $result = $obj->get_all([\n                'where' => ['field_id = ? ' => $field_id],\n                'order' => \"$sidx $sord\",\n                'LIMIT' => \"$start , $limit\",\n        ]);\n        break;\n    case 'get_usergroups_teacher':\n        $columns = ['name', 'users', 'status', 'group_type', 'actions'];\n        $options['order'] = \"name $sord\";\n        $options['limit'] = \"$start , $limit\";\n        $options['session_id'] = $sessionId;\n        switch ($type) {\n            case 'not_registered':\n                if (empty($sessionId)) {\n                    $options['where'] = [' (course_id IS NULL OR course_id != ?) ' => $course_id];\n                } else {\n                    $options['where'] = [' (session_id IS NULL OR session_id != ?) ' => $sessionId];\n                }\n                if (!empty($keyword)) {\n                    $options['where']['AND name like %?% '] = $keyword;\n                }\n                $result = $obj->getUserGroupNotInCourse(\n                    $options,\n                    $groupFilter,\n                    false,\n                    true\n                );\n                break;\n            case 'registered':\n                $result = $obj->getUserGroupInCourse(\n                    $options,\n                    $groupFilter,\n                    false,\n                    true\n                );\n                break;\n        }\n\n        $new_result = [];\n        $currentUserId = api_get_user_id();\n        $isAllow = api_is_allowed_to_edit();\n        if (!empty($result)) {\n            $urlUserGroup = api_get_path(WEB_CODE_PATH).'admin/usergroup_users.php?'.api_get_cidreq();\n            foreach ($result as $group) {\n                $countUsers = count($obj->get_users_by_usergroup($group['id']));\n                $group['users'] = $countUsers;\n\n                if (!empty($countUsers)) {\n                    $group['users'] = Display::url(\n                        $countUsers,\n                        $urlUserGroup.'&id='.$group['id']\n                    );\n                }\n\n                if ($obj->usergroup_was_added_in_course(\n                    $group['id'],\n                    $course_id,\n                    api_get_session_id()\n                )) {\n                    $url = 'class.php?action=remove_class_from_course&id='.$group['id'].'&'.api_get_cidreq(\n                        ).'&id_session='.api_get_session_id();\n                    $icon = Display::return_icon('delete.png', get_lang('Remove'));\n                } else {\n                    $url = 'class.php?action=add_class_to_course&id='.$group['id'].'&'.api_get_cidreq(\n                        ).'&type=not_registered';\n                    $icon = Display::return_icon('add.png', get_lang('Add'));\n                }\n\n                switch ($group['group_type']) {\n                    case 0:\n                        $group['group_type'] = Display::label(get_lang('Class'), 'primary');\n                        break;\n                    case 1:\n                        $group['group_type'] = Display::label(get_lang('Social'), 'success');\n                        break;\n                }\n\n                $role = $obj->getUserRoleToString(api_get_user_id(), $group['id']);\n                $group['status'] = $role;\n                $group['actions'] = '';\n\n                if ($isAllow) {\n                    if ($obj->allowTeachers() && $group['author_id'] == $currentUserId) {\n                        $group['actions'] .= Display::url(\n                                Display::return_icon('statistics.png', get_lang('Statistics')),\n                                $urlUserGroup.'&id='.$group['id']\n                            ).'&nbsp;';\n                    }\n                    $group['actions'] .= Display::url($icon, $url);\n                }\n                $new_result[] = $group;\n            }\n            $result = $new_result;\n        }\n\n        if (!in_array($sidx, $columns)) {\n            $sidx = 'name';\n        }\n        // Multidimensional sort\n        $result = msort($result, $sidx, $sord);\n        break;\n    default:\n        exit;\n}\n\n$allowed_actions = [\n    'get_careers',\n    'get_promotions',\n    'get_mail_template',\n    'get_usergroups',\n    'get_usergroups_teacher',\n    'get_gradebooks',\n    'get_sessions',\n    'get_session_access_overview',\n    'get_sessions_tracking',\n    'get_session_lp_progress',\n    'get_survey_overview',\n    'get_session_progress',\n    'get_exercise_progress',\n    'get_exercise_results',\n    'get_exercise_pending_results',\n    'get_exercise_results_report',\n    'get_work_student_list_overview',\n    'get_work_teacher',\n    'get_work_student',\n    'get_all_work_student',\n    'get_work_user_list',\n    'get_work_user_list_others',\n    'get_work_user_list_all',\n    'get_work_pending_list',\n    'get_timelines',\n    'get_grade_models',\n    'get_user_skill_ranking',\n    'get_extra_fields',\n    'get_extra_field_options',\n    //'get_course_exercise_medias',\n    'get_user_course_report',\n    'get_user_course_report_resumed',\n    'get_exercise_grade',\n    'get_group_reporting',\n    'get_course_announcements',\n    'get_programmed_announcements',\n    'course_log_events',\n    'get_learning_path_calendars',\n    'get_usergroups_users',\n    'get_calendar_users',\n    'get_exercise_categories',\n];\n\n// 5. Creating an obj to return a json\nif (in_array($action, $allowed_actions)) {\n    $response = new stdClass();\n    $response->page = $page;\n    $response->total = $total_pages;\n    $response->records = $count;\n\n    if ($operation && 'excel' == $operation) {\n        $j = 1;\n        $array = [];\n        if (empty($column_names)) {\n            $column_names = $columns;\n        }\n\n        // Headers\n        foreach ($column_names as $col) {\n            // Overwrite titles\n            if (isset($overwriteColumnHeaderExport[$col])) {\n                $col = $overwriteColumnHeaderExport[$col];\n            }\n            $array[0][] = $col;\n        }\n\n        foreach ($result as $row) {\n            foreach ($columns as $col) {\n                $array[$j][] = strip_tags($row[$col]);\n            }\n            $j++;\n        }\n\n        $fileName = !empty($action) ? $action : 'company_report';\n        if (!empty($exportFilename)) {\n            $fileName = $exportFilename;\n        }\n\n        switch ($exportFormat) {\n            case 'xls':\n                Export::arrayToXls($array, $fileName);\n                break;\n            case 'xls_html':\n                //TODO add date if exists\n                Export::export_table_xls_html($array, $fileName);\n                break;\n            case 'csv':\n            default:\n                Export::arrayToCsv($array, $fileName);\n                break;\n        }\n        exit;\n    }\n    $i = 0;\n    if (!empty($result)) {\n        foreach ($result as $row) {\n            // if results tab give not id, set id to $i otherwise id=\"null\"\n            // for all <tr> of the jqgrid - ref #4235\n            if (!isset($row['id']) || isset($row['id']) && '' == $row['id']) {\n                $response->rows[$i]['id'] = $i;\n            } else {\n                $response->rows[$i]['id'] = $row['id'];\n            }\n            $array = [];\n            foreach ($columns as $col) {\n                if (in_array($col, ['correction', 'actions'])) {\n                    $array[] = isset($row[$col]) ? $row[$col] : '';\n                } else {\n                    $array[] = isset($row[$col]) ? Security::remove_XSS($row[$col]) : '';\n                }\n            }\n            $response->rows[$i]['cell'] = $array;\n            $i++;\n        }\n    }\n\n    header('Content-Type: application/json;charset=utf-8');\n    echo json_encode($response);\n}\nexit;\n", "<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Doctrine\\Common\\Annotations\\AnnotationRegistry;\nuse Doctrine\\Common\\EventManager;\nuse Doctrine\\DBAL\\Connection;\nuse Doctrine\\DBAL\\Driver\\Statement;\nuse Doctrine\\DBAL\\Types\\Type;\nuse Doctrine\\ORM\\Configuration;\nuse Doctrine\\ORM\\EntityManager;\n\nclass Database\n{\n    /**\n     * @var EntityManager\n     */\n    private static $em;\n    private static $connection;\n\n    /**\n     * Setup doctrine only for the installation.\n     *\n     * @param array  $params\n     * @param string $entityRootPath\n     */\n    public function connect($params = [], $entityRootPath = '')\n    {\n        $config = self::getDoctrineConfig($entityRootPath);\n        $config->setAutoGenerateProxyClasses(true);\n        $config->setEntityNamespaces(\n            [\n                'ChamiloCoreBundle' => 'Chamilo\\CoreBundle\\Entity',\n                'ChamiloCourseBundle' => 'Chamilo\\CourseBundle\\Entity',\n            ]\n        );\n\n        $params['charset'] = 'utf8';\n        $sysPath = api_get_path(SYMFONY_SYS_PATH);\n\n        $cache = new Doctrine\\Common\\Cache\\ArrayCache();\n        // standard annotation reader\n        $annotationReader = new Doctrine\\Common\\Annotations\\AnnotationReader();\n        $cachedAnnotationReader = new Doctrine\\Common\\Annotations\\CachedReader(\n            $annotationReader, // use reader\n            $cache // and a cache driver\n        );\n\n        $evm = new EventManager();\n        $timestampableListener = new Gedmo\\Timestampable\\TimestampableListener();\n        $timestampableListener->setAnnotationReader($cachedAnnotationReader);\n        $evm->addEventSubscriber($timestampableListener);\n\n        $driverChain = new \\Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain();\n        // load superclass metadata mapping only, into driver chain\n        // also registers Gedmo annotations.NOTE: you can personalize it\n        Gedmo\\DoctrineExtensions::registerAbstractMappingIntoDriverChainORM(\n            $driverChain, // our metadata driver chain, to hook into\n            $cachedAnnotationReader // our cached annotation reader\n        );\n\n        AnnotationRegistry::registerLoader(\n            function ($class) use ($sysPath) {\n                $file = str_replace(\"\\\\\", DIRECTORY_SEPARATOR, $class).\".php\";\n                $file = str_replace('Symfony/Component/Validator', '', $file);\n                $file = str_replace('Symfony\\Component\\Validator', '', $file);\n                $file = str_replace('Symfony/Component/Serializer', '', $file);\n\n                $fileToInclude = $sysPath.'vendor/symfony/validator/'.$file;\n\n                if (file_exists($fileToInclude)) {\n                    // file exists makes sure that the loader fails silently\n                    require_once $fileToInclude;\n\n                    return true;\n                }\n\n                $fileToInclude = $sysPath.'vendor/symfony/validator/Constraints/'.$file;\n                if (file_exists($fileToInclude)) {\n                    // file exists makes sure that the loader fails silently\n                    require_once $fileToInclude;\n\n                    return true;\n                }\n\n                $fileToInclude = $sysPath.'vendor/symfony/serializer/'.$file;\n\n                if (file_exists($fileToInclude)) {\n                    // file exists makes sure that the loader fails silently\n                    require_once $fileToInclude;\n\n                    return true;\n                }\n            }\n        );\n\n        AnnotationRegistry::registerFile(\n            $sysPath.'vendor/api-platform/core/src/Annotation/ApiResource.php'\n        );\n        AnnotationRegistry::registerFile(\n            $sysPath.'vendor/api-platform/core/src/Annotation/ApiFilter.php'\n        );\n        AnnotationRegistry::registerFile(\n            $sysPath.'vendor/api-platform/core/src/Annotation/ApiProperty.php'\n        );\n        AnnotationRegistry::registerFile(\n            $sysPath.'vendor/api-platform/core/src/Annotation/ApiSubresource.php'\n        );\n\n        $entityManager = EntityManager::create($params, $config, $evm);\n\n        if (false === Type::hasType('uuid')) {\n            Type::addType('uuid', \\Symfony\\Bridge\\Doctrine\\Types\\UuidType::class);\n        }\n\n        $connection = $entityManager->getConnection();\n        AnnotationRegistry::registerFile(\n            $sysPath.'vendor/symfony/doctrine-bridge/Validator/Constraints/UniqueEntity.php'\n        );\n\n        $this->setConnection($connection);\n        $this->setManager($entityManager);\n    }\n\n    /**\n     * @param EntityManager $em\n     */\n    public static function setManager($em)\n    {\n        self::$em = $em;\n    }\n\n    public static function setConnection(Connection $connection)\n    {\n        self::$connection = $connection;\n    }\n\n    /**\n     * @return Connection\n     */\n    public static function getConnection()\n    {\n        return self::$connection;\n    }\n\n    /**\n     * @return EntityManager\n     */\n    public static function getManager()\n    {\n        return self::$em;\n    }\n\n    /**\n     * Returns the name of the main database.\n     *\n     * @return string\n     */\n    public static function get_main_database()\n    {\n        return self::getManager()->getConnection()->getDatabase();\n    }\n\n    /**\n     * Get main table.\n     *\n     * @param string $table\n     *\n     * @return string\n     */\n    public static function get_main_table($table)\n    {\n        return $table;\n    }\n\n    /**\n     * Get course table.\n     *\n     * @param string $table\n     *\n     * @return string\n     */\n    public static function get_course_table($table)\n    {\n        return DB_COURSE_PREFIX.$table;\n    }\n\n    /**\n     * Counts the number of rows in a table.\n     *\n     * @param string $table The table of which the rows should be counted\n     *\n     * @return int the number of rows in the given table\n     *\n     * @deprecated\n     */\n    public static function count_rows($table)\n    {\n        $obj = self::fetch_object(self::query(\"SELECT COUNT(*) AS n FROM $table\"));\n\n        return $obj->n;\n    }\n\n    /**\n     * Returns the number of affected rows in the last database operation.\n     *\n     * @return int\n     */\n    public static function affected_rows($result)\n    {\n        return $result->rowCount();\n    }\n\n    /**\n     * Escapes a string to insert into the database as text.\n     *\n     * @param string $string\n     *\n     * @return string\n     */\n    public static function escape_string($string)\n    {\n        $string = self::getManager()->getConnection()->quote($string);\n        // The quote method from PDO also adds quotes around the string, which\n        // is not how the legacy mysql_real_escape_string() was used in\n        // Chamilo, so we need to remove the quotes around. Using trim will\n        // remove more than one quote if they are sequenced, generating\n        // broken queries and SQL injection risks\n        return substr($string, 1, -1);\n    }\n\n    /**\n     * Gets the array from a SQL result (as returned by Database::query).\n     *\n     * @param string $option Optional: \"ASSOC\",\"NUM\" or \"BOTH\"\n     *\n     * @return array|mixed\n     */\n    public static function fetch_array($result, $option = 'BOTH')\n    {\n        if (false === $result) {\n            return [];\n        }\n\n        return $result->fetch(self::customOptionToDoctrineOption($option));\n    }\n\n    /**\n     * Gets an associative array from a SQL result (as returned by Database::query).\n     *\n     * @return array\n     */\n    public static function fetch_assoc($result)\n    {\n        return $result->fetch(PDO::FETCH_ASSOC);\n    }\n\n    /**\n     * Gets the next row of the result of the SQL query\n     * (as returned by Database::query) in an object form.\n     *\n     * @return mixed\n     */\n    public static function fetch_object($result)\n    {\n        return $result->fetch(PDO::FETCH_OBJ);\n    }\n\n    /**\n     * Gets the array from a SQL result (as returned by Database::query)\n     * help achieving database independence.\n     *\n     * @return mixed\n     */\n    public static function fetch_row($result)\n    {\n        if (false === $result) {\n            return [];\n        }\n\n        return $result->fetch(PDO::FETCH_NUM);\n    }\n\n    /**\n     * Gets the ID of the last item inserted into the database.\n     *\n     * @return string\n     */\n    public static function insert_id()\n    {\n        return self::getManager()->getConnection()->lastInsertId();\n    }\n\n    /**\n     * @return int\n     */\n    public static function num_rows($result)\n    {\n        if (false === $result) {\n            return 0;\n        }\n\n        return $result->rowCount();\n    }\n\n    /**\n     * Acts as the relative *_result() function of most DB drivers and fetches a\n     * specific line and a field.\n     *\n     * @param int    $row\n     * @param string $field\n     *\n     * @return mixed\n     */\n    public static function result($resource, $row, $field = '')\n    {\n        if ($resource->rowCount() > 0) {\n            $result = $resource->fetchAll(PDO::FETCH_BOTH);\n\n            return $result[$row][$field];\n        }\n\n        return false;\n    }\n\n    /**\n     * @param string $query\n     *\n     * @return Statement\n     */\n    public static function query($query)\n    {\n        $connection = self::getManager()->getConnection();\n        $result = null;\n        try {\n            $result = $connection->executeQuery($query);\n        } catch (Exception $e) {\n            self::handleError($e);\n        }\n\n        return $result;\n    }\n\n    /**\n     * @param Exception $e\n     */\n    public static function handleError($e)\n    {\n        $debug = 'test' === api_get_setting('server_type');\n        if ($debug) {\n            throw $e;\n            exit;\n        } else {\n            error_log($e->getMessage());\n            api_not_allowed(false, get_lang('An error has occurred. Please contact your system administrator.'));\n            exit;\n        }\n    }\n\n    /**\n     * @param string $option\n     *\n     * @return int\n     */\n    public static function customOptionToDoctrineOption($option)\n    {\n        switch ($option) {\n            case 'ASSOC':\n                return PDO::FETCH_ASSOC;\n                break;\n            case 'NUM':\n                return PDO::FETCH_NUM;\n                break;\n            case 'BOTH':\n            default:\n                return PDO::FETCH_BOTH;\n                break;\n        }\n    }\n\n    /**\n     * Stores a query result into an array.\n     *\n     * @author Olivier Brouckaert\n     *\n     * @param Statement $result - the return value of the query\n     * @param string    $option BOTH, ASSOC, or NUM\n     *\n     * @return array - the value returned by the query\n     */\n    public static function store_result($result, $option = 'BOTH')\n    {\n        return $result->fetchAll(self::customOptionToDoctrineOption($option));\n    }\n\n    /**\n     * Database insert.\n     *\n     * @param string $table_name\n     * @param array  $attributes\n     * @param bool   $show_query\n     *\n     * @return false|int\n     */\n    public static function insert($table_name, $attributes, $show_query = false)\n    {\n        if (empty($attributes) || empty($table_name)) {\n            return false;\n        }\n\n        $params = array_keys($attributes);\n\n        if (!empty($params)) {\n            $sql = 'INSERT INTO '.$table_name.' ('.implode(',', $params).')\n                    VALUES (:'.implode(', :', $params).')';\n\n            if ($show_query) {\n                var_dump($sql);\n                error_log($sql);\n            }\n\n            $result = false;\n            try {\n                $statement = self::getConnection()->prepare($sql);\n                $result = $statement->execute($attributes);\n            } catch (Exception $e) {\n                self::handleError($e);\n            }\n\n            if ($result) {\n                return (int) self::getManager()->getConnection()->lastInsertId();\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param string $tableName       use Database::get_main_table\n     * @param array  $attributes      Values to updates\n     *                                Example: $params['name'] = 'Julio'; $params['lastname'] = 'Montoya';\n     * @param array  $whereConditions where conditions i.e array('id = ?' =>'4')\n     * @param bool   $showQuery\n     *\n     * @return bool|int\n     */\n    public static function update(\n        $tableName,\n        $attributes,\n        $whereConditions = [],\n        $showQuery = false\n    ) {\n        if (!empty($tableName) && !empty($attributes)) {\n            $updateSql = '';\n            $count = 1;\n\n            foreach ($attributes as $key => $value) {\n                if ($showQuery) {\n                    echo $key.': '.$value.PHP_EOL;\n                }\n                $updateSql .= \"$key = :$key \";\n                if ($count < count($attributes)) {\n                    $updateSql .= ', ';\n                }\n                $count++;\n            }\n\n            if (!empty($updateSql)) {\n                // Parsing and cleaning the where conditions\n                $whereReturn = self::parse_where_conditions($whereConditions);\n                $sql = \"UPDATE $tableName SET $updateSql $whereReturn \";\n\n                try {\n                    $statement = self::getManager()->getConnection()->prepare($sql);\n                    $result = $statement->execute($attributes);\n                } catch (Exception $e) {\n                    self::handleError($e);\n                }\n\n                if ($showQuery) {\n                    var_dump($sql);\n                    var_dump($attributes);\n                    var_dump($whereConditions);\n                }\n\n                if ($result && $statement) {\n                    return $statement->rowCount();\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Experimental useful database finder.\n     *\n     * @param mixed|array $columns\n     * @param string      $table_name\n     * @param array       $conditions\n     * @param string      $type_result\n     * @param string      $option\n     * @param bool        $debug\n     *\n     * @return array\n     *\n     * @todo    lot of stuff to do here\n     * @todo    known issues, it doesn't work when using LIKE conditions\n     *\n     * @example array('where'=> array('course_code LIKE \"?%\"'))\n     * @example array('where'=> array('type = ? AND category = ?' => array('setting', 'Plugins'))\n     * @example array('where'=> array('name = \"Julio\" AND lastname = \"montoya\"'))\n     */\n    public static function select(\n        $columns,\n        $table_name,\n        $conditions = [],\n        $type_result = 'all',\n        $option = 'ASSOC',\n        $debug = false\n    ) {\n        if ($type_result === 'count') {\n            $conditions['LIMIT'] = null;\n            $conditions['limit'] = null;\n        }\n        $conditions = self::parse_conditions($conditions);\n\n        //@todo we could do a describe here to check the columns ...\n        if (is_array($columns)) {\n            $clean_columns = implode(',', $columns);\n        } else {\n            if ('*' === $columns) {\n                $clean_columns = '*';\n            } else {\n                $clean_columns = (string) $columns;\n            }\n        }\n\n        if ($type_result === 'count') {\n            $clean_columns = ' count(*) count ';\n        }\n        $sql = \"SELECT $clean_columns FROM $table_name $conditions\";\n        if ($debug) {\n            var_dump($sql);\n        }\n        $result = self::query($sql);\n        if ($type_result === 'count') {\n            $row = self::fetch_array($result, $option);\n            if ($row) {\n                return (int) $row['count'];\n            }\n\n            return 0;\n        }\n        $array = [];\n\n        if ('all' === $type_result) {\n            while ($row = self::fetch_array($result, $option)) {\n                if (isset($row['id'])) {\n                    $array[$row['id']] = $row;\n                } else {\n                    $array[] = $row;\n                }\n            }\n        } else {\n            $array = self::fetch_array($result, $option);\n        }\n\n        return $array;\n    }\n\n    /**\n     * Parses WHERE/ORDER conditions i.e array('where'=>array('id = ?' =>'4'), 'order'=>'id DESC').\n     *\n     * @todo known issues, it doesn't work when using\n     * LIKE conditions example: array('where'=>array('course_code LIKE \"?%\"'))\n     *\n     * @param array $conditions\n     *\n     * @return string Partial SQL string to add to longer query\n     */\n    public static function parse_conditions($conditions)\n    {\n        if (empty($conditions)) {\n            return '';\n        }\n        $return_value = $where_return = '';\n        foreach ($conditions as $type_condition => $condition_data) {\n            if (false == $condition_data) {\n                continue;\n            }\n            $type_condition = strtolower($type_condition);\n            switch ($type_condition) {\n                case 'where':\n                    foreach ($condition_data as $condition => $value_array) {\n                        if (is_array($value_array)) {\n                            $clean_values = [];\n                            foreach ($value_array as $item) {\n                                $item = self::escape_string($item);\n                                $clean_values[] = $item;\n                            }\n                        } else {\n                            $value_array = self::escape_string($value_array);\n                            $clean_values = [$value_array];\n                        }\n\n                        if (!empty($condition) && '' != $clean_values) {\n                            $condition = str_replace('%', \"'@percentage@'\", $condition); //replace \"%\"\n                            $condition = str_replace(\"'?'\", \"%s\", $condition);\n                            $condition = str_replace(\"?\", \"%s\", $condition);\n\n                            $condition = str_replace(\"@%s@\", \"@-@\", $condition);\n                            $condition = str_replace(\"%s\", \"'%s'\", $condition);\n                            $condition = str_replace(\"@-@\", \"@%s@\", $condition);\n\n                            // Treat conditions as string\n                            $condition = vsprintf($condition, $clean_values);\n                            $condition = str_replace('@percentage@', '%', $condition); //replace \"%\"\n                            $where_return .= $condition;\n                        }\n                    }\n\n                    if (!empty($where_return)) {\n                        $return_value = \" WHERE $where_return\";\n                    }\n                    break;\n                case 'order':\n                    $order_array = $condition_data;\n\n                    if (!empty($order_array)) {\n                        // 'order' => 'id desc, name desc'\n                        $order_array = self::escape_string($order_array);\n                        $new_order_array = explode(',', $order_array);\n                        $temp_value = [];\n\n                        foreach ($new_order_array as $element) {\n                            $element = explode(' ', $element);\n                            $element = array_filter($element);\n                            $element = array_values($element);\n\n                            if (!empty($element[1])) {\n                                $element[1] = strtolower($element[1]);\n                                $order = 'DESC';\n                                if (in_array($element[1], ['desc', 'asc'])) {\n                                    $order = $element[1];\n                                }\n                                $temp_value[] = ' `'.$element[0].'` '.$order.' ';\n                            } else {\n                                //by default DESC\n                                $temp_value[] = ' `'.$element[0].'` DESC ';\n                            }\n                        }\n                        if (!empty($temp_value)) {\n                            $return_value .= ' ORDER BY '.implode(', ', $temp_value);\n                        }\n                    }\n                    break;\n                case 'limit':\n                    $limit_array = explode(',', $condition_data);\n                    if (!empty($limit_array)) {\n                        if (count($limit_array) > 1) {\n                            $return_value .= ' LIMIT '.intval($limit_array[0]).' , '.intval($limit_array[1]);\n                        } else {\n                            $return_value .= ' LIMIT '.intval($limit_array[0]);\n                        }\n                    }\n                    break;\n            }\n        }\n\n        return $return_value;\n    }\n\n    /**\n     * @param array $conditions\n     *\n     * @return string\n     */\n    public static function parse_where_conditions($conditions)\n    {\n        return self::parse_conditions(['where' => $conditions]);\n    }\n\n    /**\n     * @param string $table_name\n     * @param array  $where_conditions\n     * @param bool   $show_query\n     *\n     * @return int\n     */\n    public static function delete($table_name, $where_conditions, $show_query = false)\n    {\n        $where_return = self::parse_where_conditions($where_conditions);\n        $sql = \"DELETE FROM $table_name $where_return \";\n        if ($show_query) {\n            echo $sql;\n            echo '<br />';\n        }\n        $result = self::query($sql);\n        $affected_rows = self::affected_rows($result);\n        //@todo should return affected_rows for\n        return $affected_rows;\n    }\n\n    /**\n     * Get Doctrine configuration.\n     *\n     * @param string $path\n     *\n     * @return Configuration\n     */\n    public static function getDoctrineConfig($path)\n    {\n        $isDevMode = true; // Forces doctrine to use ArrayCache instead of apc/xcache/memcache/redis\n        $isSimpleMode = false; // related to annotations @Entity\n        $cache = null;\n        $path = !empty($path) ? $path : api_get_path(SYMFONY_SYS_PATH);\n\n        $paths = [\n            $path.'src/Chamilo/CoreBundle/Entity',\n            $path.'src/Chamilo/CourseBundle/Entity',\n        ];\n\n        $proxyDir = $path.'var/cache/';\n\n        return \\Doctrine\\ORM\\Tools\\Setup::createAnnotationMetadataConfiguration(\n            $paths,\n            $isDevMode,\n            $proxyDir,\n            $cache,\n            $isSimpleMode\n        );\n    }\n\n    /**\n     * @param string $table\n     *\n     * @return bool\n     */\n    public static function tableExists($table)\n    {\n        return self::getManager()->getConnection()->getSchemaManager()->tablesExist($table);\n    }\n\n    /**\n     * @param string $table\n     *\n     * @return \\Doctrine\\DBAL\\Schema\\Column[]\n     */\n    public static function listTableColumns($table)\n    {\n        return self::getManager()->getConnection()->getSchemaManager()->listTableColumns($table);\n    }\n}\n", "<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CoreBundle\\Entity\\Asset;\nuse Chamilo\\CoreBundle\\Entity\\ExtraField as EntityExtraField;\nuse Chamilo\\CoreBundle\\Entity\\ExtraFieldRelTag;\nuse Chamilo\\CoreBundle\\Entity\\Tag;\nuse Chamilo\\CoreBundle\\Framework\\Container;\n\n/**\n * Class ExtraField.\n */\nclass ExtraField extends Model\n{\n    public const FIELD_TYPE_TEXT = 1;\n    public const FIELD_TYPE_TEXTAREA = 2;\n    public const FIELD_TYPE_RADIO = 3;\n    public const FIELD_TYPE_SELECT = 4;\n    public const FIELD_TYPE_SELECT_MULTIPLE = 5;\n    public const FIELD_TYPE_DATE = 6;\n    public const FIELD_TYPE_DATETIME = 7;\n    public const FIELD_TYPE_DOUBLE_SELECT = 8;\n    public const FIELD_TYPE_DIVIDER = 9;\n    public const FIELD_TYPE_TAG = 10;\n    public const FIELD_TYPE_TIMEZONE = 11;\n    public const FIELD_TYPE_SOCIAL_PROFILE = 12;\n    public const FIELD_TYPE_CHECKBOX = 13;\n    public const FIELD_TYPE_MOBILE_PHONE_NUMBER = 14;\n    public const FIELD_TYPE_INTEGER = 15;\n    public const FIELD_TYPE_FILE_IMAGE = 16;\n    public const FIELD_TYPE_FLOAT = 17;\n    public const FIELD_TYPE_FILE = 18;\n    public const FIELD_TYPE_VIDEO_URL = 19;\n    public const FIELD_TYPE_LETTERS_ONLY = 20;\n    public const FIELD_TYPE_ALPHANUMERIC = 21;\n    public const FIELD_TYPE_LETTERS_SPACE = 22;\n    public const FIELD_TYPE_ALPHANUMERIC_SPACE = 23;\n    public const FIELD_TYPE_GEOLOCALIZATION = 24;\n    public const FIELD_TYPE_GEOLOCALIZATION_COORDINATES = 25;\n    public const FIELD_TYPE_SELECT_WITH_TEXT_FIELD = 26;\n    public const FIELD_TYPE_TRIPLE_SELECT = 27;\n\n    public $columns = [\n        'id',\n        'field_type',\n        'variable',\n        'description',\n        'display_text',\n        'default_value',\n        'field_order',\n        'visible_to_self',\n        'visible_to_others',\n        'changeable',\n        'filter',\n        'extra_field_type',\n        //Enable this when field_loggeable is introduced as a table field (2.0)\n        //'field_loggeable',\n        'created_at',\n    ];\n\n    public $ops = [\n        'eq' => '=', //equal\n        'ne' => '<>', //not equal\n        'lt' => '<', //less than\n        'le' => '<=', //less than or equal\n        'gt' => '>', //greater than\n        'ge' => '>=', //greater than or equal\n        'bw' => 'LIKE', //begins with\n        'bn' => 'NOT LIKE', //doesn't begin with\n        'in' => 'LIKE', //is in\n        'ni' => 'NOT LIKE', //is not in\n        'ew' => 'LIKE', //ends with\n        'en' => 'NOT LIKE', //doesn't end with\n        'cn' => 'LIKE', //contains\n        'nc' => 'NOT LIKE',  //doesn't contain\n    ];\n\n    public $type = 'user';\n    public $pageName;\n    public $pageUrl;\n    public $extraFieldType = 0;\n    public $table_field_options;\n    public $table_field_values;\n    public $table_field_tag;\n    public $table_field_rel_tag;\n    public $handler_id;\n    public $primaryKey;\n\n    /**\n     * @param string $type\n     */\n    public function __construct($type)\n    {\n        parent::__construct();\n\n        $this->type = $type;\n        $this->table = Database::get_main_table(TABLE_EXTRA_FIELD);\n        $this->table_field_options = Database::get_main_table(TABLE_EXTRA_FIELD_OPTIONS);\n        $this->table_field_values = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $this->table_field_tag = Database::get_main_table(TABLE_MAIN_TAG);\n        $this->table_field_rel_tag = Database::get_main_table(TABLE_MAIN_EXTRA_FIELD_REL_TAG);\n        $this->handler_id = 'item_id';\n\n        switch ($this->type) {\n            case 'calendar_event':\n                $this->extraFieldType = EntityExtraField::CALENDAR_FIELD_TYPE;\n                break;\n            case 'course':\n                $this->extraFieldType = EntityExtraField::COURSE_FIELD_TYPE;\n                $this->primaryKey = 'id';\n                break;\n            case 'user':\n                $this->extraFieldType = EntityExtraField::USER_FIELD_TYPE;\n                $this->primaryKey = 'id';\n                break;\n            case 'session':\n                $this->extraFieldType = EntityExtraField::SESSION_FIELD_TYPE;\n                $this->primaryKey = 'id';\n                break;\n            case 'exercise':\n                $this->extraFieldType = EntityExtraField::EXERCISE_FIELD_TYPE;\n                break;\n            case 'question':\n                $this->extraFieldType = EntityExtraField::QUESTION_FIELD_TYPE;\n                break;\n            case 'lp':\n                $this->extraFieldType = EntityExtraField::LP_FIELD_TYPE;\n                break;\n            case 'lp_item':\n                $this->extraFieldType = EntityExtraField::LP_ITEM_FIELD_TYPE;\n                break;\n            case 'skill':\n                $this->extraFieldType = EntityExtraField::SKILL_FIELD_TYPE;\n                break;\n            case 'work':\n                $this->extraFieldType = EntityExtraField::WORK_FIELD_TYPE;\n                break;\n            case 'career':\n                $this->extraFieldType = EntityExtraField::CAREER_FIELD_TYPE;\n                break;\n            case 'user_certificate':\n                $this->extraFieldType = EntityExtraField::USER_CERTIFICATE;\n                break;\n            case 'survey':\n                $this->extraFieldType = EntityExtraField::SURVEY_FIELD_TYPE;\n                break;\n            case 'scheduled_announcement':\n                $this->extraFieldType = EntityExtraField::SCHEDULED_ANNOUNCEMENT;\n                break;\n            case 'terms_and_condition':\n                $this->extraFieldType = EntityExtraField::TERMS_AND_CONDITION_TYPE;\n                break;\n            case 'forum_category':\n                $this->extraFieldType = EntityExtraField::FORUM_CATEGORY_TYPE;\n                break;\n            case 'forum_post':\n                $this->extraFieldType = EntityExtraField::FORUM_POST_TYPE;\n                break;\n            case 'track_exercise':\n                $this->extraFieldType = EntityExtraField::TRACK_EXERCISE_FIELD_TYPE;\n                break;\n            case 'portfolio':\n                $this->extraFieldType = EntityExtraField::PORTFOLIO_TYPE;\n                break;\n            case 'lp_view':\n                $this->extraFieldType = EntityExtraField::LP_VIEW_TYPE;\n        }\n\n        $this->pageUrl = 'extra_fields.php?type='.$this->type;\n        // Example QuestionFields\n        $this->pageName = ucwords($this->type).'Fields';\n    }\n\n    /**\n     * @return array\n     */\n    public static function getValidExtraFieldTypes()\n    {\n        $result = [\n            'user',\n            'course',\n            'session',\n            'question',\n            'lp',\n            'calendar_event',\n            'lp_item',\n            'skill',\n            'work',\n            'career',\n            'user_certificate',\n            'survey',\n            'terms_and_condition',\n            'forum_category',\n            'forum_post',\n            'exercise',\n            'track_exercise',\n            'lp_view',\n        ];\n\n        if (api_get_configuration_value('allow_scheduled_announcements')) {\n            $result[] = 'scheduled_announcement';\n        }\n        if (api_get_configuration_value('allow_portfolio_tool')) {\n            $result[] = 'portfolio';\n        }\n        sort($result);\n\n        return $result;\n    }\n\n    /**\n     * Converts a string like this:\n     * France:Paris;Bretagne;Marseille;Lyon|Belgique:Bruxelles;Namur;Li\u00e8ge;Bruges|Peru:Lima;Piura;\n     * into\n     * array(\n     *   'France' =>\n     *      array('Paris', 'Bretagne', 'Marseille'),\n     *   'Belgique' =>\n     *      array('Namur', 'Li\u00e8ge')\n     * ), etc.\n     *\n     * @param string $string\n     *\n     * @return array\n     */\n    public static function extra_field_double_select_convert_string_to_array($string)\n    {\n        $options = explode('|', $string);\n        $options_parsed = [];\n        $id = 0;\n\n        if (!empty($options)) {\n            foreach ($options as $sub_options) {\n                $options = explode(':', $sub_options);\n                $sub_sub_options = isset($options[1]) ? explode(';', $options[1]) : [];\n                $options_parsed[$id] = [\n                    'label' => $options[0],\n                    'options' => $sub_sub_options,\n                ];\n                $id++;\n            }\n        }\n\n        return $options_parsed;\n    }\n\n    /**\n     * @param $string\n     *\n     * @return array\n     */\n    public static function tripleSelectConvertStringToArray($string)\n    {\n        $options = [];\n        foreach (explode('|', $string) as $i => $item0) {\n            $level1 = explode('\\\\', $item0);\n\n            foreach ($level1 as $j => $item1) {\n                if (0 === $j) {\n                    $options[] = ['label' => $item1, 'options' => []];\n\n                    continue;\n                }\n\n                foreach (explode(':', $item1) as $k => $item2) {\n                    if (0 === $k) {\n                        $options[$i]['options'][] = ['label' => $item2, 'options' => []];\n\n                        continue;\n                    }\n\n                    $options[$i]['options'][$j - 1]['options'][] = explode(';', $item2);\n                }\n            }\n        }\n\n        array_walk_recursive(\n            $options,\n            function (&$item) {\n                $item = trim($item);\n            }\n        );\n\n        return $options;\n    }\n\n    /**\n     * @param array $options the result of the get_field_options_by_field() array\n     *\n     * @return string\n     */\n    public static function extra_field_double_select_convert_array_to_string($options)\n    {\n        $string = null;\n        $optionsParsed = self::extra_field_double_select_convert_array_to_ordered_array($options);\n\n        if (!empty($optionsParsed)) {\n            foreach ($optionsParsed as $option) {\n                foreach ($option as $key => $item) {\n                    $string .= $item['display_text'];\n                    if (0 == $key) {\n                        $string .= ':';\n                    } else {\n                        if (isset($option[$key + 1])) {\n                            $string .= ';';\n                        }\n                    }\n                }\n                $string .= '|';\n            }\n        }\n\n        if (!empty($string)) {\n            $string = substr($string, 0, strlen($string) - 1);\n        }\n\n        return $string;\n    }\n\n    /**\n     * @param array $options The result of the get_field_options_by_field() array\n     *\n     * @return string\n     */\n    public static function extraFieldSelectWithTextConvertArrayToString(array $options)\n    {\n        $parsedOptions = self::extra_field_double_select_convert_array_to_ordered_array($options);\n\n        if (empty($parsedOptions)) {\n            return '';\n        }\n\n        $string = '';\n        foreach ($parsedOptions as $options) {\n            $option = current($options);\n            $string .= $option['display_text'];\n            $string .= '|';\n        }\n\n        return rtrim($string, '|');\n    }\n\n    /**\n     * @return string\n     */\n    public static function tripleSelectConvertArrayToString(array $options)\n    {\n        $parsedOptions = self::tripleSelectConvertArrayToOrderedArray($options);\n        $string = '';\n        foreach ($parsedOptions['level1'] as $item1) {\n            $string .= $item1['display_text'];\n            $level2 = self::getOptionsFromTripleSelect($parsedOptions['level2'], $item1['id']);\n\n            foreach ($level2 as $item2) {\n                $string .= '\\\\'.$item2['display_text'].':';\n                $level3 = self::getOptionsFromTripleSelect($parsedOptions['level3'], $item2['id']);\n\n                $string .= implode(';', array_column($level3, 'display_text'));\n            }\n\n            $string .= '|';\n        }\n\n        return trim($string, '\\\\|;');\n    }\n\n    /**\n     * @param string $variable\n     * @param string $dataValue\n     *\n     * @return string\n     */\n    public static function getLocalizationJavascript($variable, $dataValue)\n    {\n        $dataValue = addslashes($dataValue);\n        $html = \"<script>\n            $(function() {\n                if (typeof google === 'object') {\n                    var address = '$dataValue';\n                    initializeGeo{$variable}(address, false);\n\n                    $('#geolocalization_extra_{$variable}').on('click', function() {\n                        var address = $('#{$variable}').val();\n                        initializeGeo{$variable}(address, false);\n                        return false;\n                    });\n\n                    $('#myLocation_extra_{$variable}').on('click', function() {\n                        myLocation{$variable}();\n                        return false;\n                    });\n\n                    // When clicking enter\n                    $('#{$variable}').keypress(function(event) {\n                        if (event.which == 13) {\n                            $('#geolocalization_extra_{$variable}').click();\n                            return false;\n                        }\n                    });\n\n                    // On focus out update city\n                    $('#{$variable}').focusout(function() {\n                        $('#geolocalization_extra_{$variable}').click();\n                        return false;\n                    });\n\n                    return;\n                }\n\n                $('#map_extra_{$variable}')\n                    .html('<div class=\\\"alert alert-info\\\">\"\n            .addslashes(get_lang('YouNeedToActivateTheGoogleMapsPluginInAdminPlatformToSeeTheMap'))\n            .\"</div>');\n            });\n\n            function myLocation{$variable}()\n            {\n                if (navigator.geolocation) {\n                    var geoPosition = function(position) {\n                        var lat = position.coords.latitude;\n                        var lng = position.coords.longitude;\n                        var latLng = new google.maps.LatLng(lat, lng);\n                        initializeGeo{$variable}(false, latLng);\n                    };\n\n                    var geoError = function(error) {\n                        alert('Geocode \".get_lang('Error').\": ' + error);\n                    };\n\n                    var geoOptions = {\n                        enableHighAccuracy: true\n                    };\n                    navigator.geolocation.getCurrentPosition(geoPosition, geoError, geoOptions);\n                }\n            }\n\n            function initializeGeo{$variable}(address, latLng)\n            {\n                var geocoder = new google.maps.Geocoder();\n                var latlng = new google.maps.LatLng(-34.397, 150.644);\n                var myOptions = {\n                    zoom: 15,\n                    center: latlng,\n                    mapTypeControl: true,\n                    mapTypeControlOptions: {\n                        style: google.maps.MapTypeControlStyle.DROPDOWN_MENU\n                    },\n                    navigationControl: true,\n                    mapTypeId: google.maps.MapTypeId.ROADMAP\n                };\n\n                map_{$variable} = new google.maps.Map(\n                    document.getElementById('map_extra_{$variable}'),\n                    myOptions\n                );\n\n                var parameter = address ? {'address': address} : latLng ? {'latLng': latLng} : false;\n\n                if (geocoder && parameter) {\n                    geocoder.geocode(parameter, function(results, status) {\n                        if (status == google.maps.GeocoderStatus.OK) {\n                            if (status != google.maps.GeocoderStatus.ZERO_RESULTS) {\n                                map_{$variable}.setCenter(results[0].geometry.location);\n\n                                // get city and country\n                                var defaultAddress = results[0].formatted_address;\n                                var city = '';\n                                var country = '';\n\n                                for (var i=0; i<results[0].address_components.length; i++) {\n                                    if (results[0].address_components[i].types[0] == \\\"locality\\\") {\n                                        //this is the object you are looking for City\n                                        city = results[0].address_components[i];\n                                    }\n                                    /*if (results[j].address_components[i].types[0] == \\\"administrative_area_level_1\\\") {\n                                        //this is the object you are looking for State\n                                        region = results[0].address_components[i];\n                                    }*/\n                                    if (results[0].address_components[i].types[0] == \\\"country\\\") {\n                                        //this is the object you are looking for\n                                        country = results[0].address_components[i];\n                                    }\n                                }\n\n                                if (city && city.long_name && country && country.long_name) {\n                                    defaultAddress = city.long_name + ', ' + country.long_name;\n                                }\n                                $('#{$variable}').val(defaultAddress);\n                                $('#{$variable}_coordinates').val(\n                                    results[0].geometry.location.lat()+','+results[0].geometry.location.lng()\n                                );\n\n                                var infowindow = new google.maps.InfoWindow({\n                                    content: '<b>' + $('#extra_{$variable}').val() + '</b>',\n                                    size: new google.maps.Size(150, 50)\n                                });\n\n                                var marker = new google.maps.Marker({\n                                    position: results[0].geometry.location,\n                                    map: map_{$variable},\n                                    title: $('#extra_{$variable}').val()\n                                });\n                                google.maps.event.addListener(marker, 'click', function() {\n                                    infowindow.open(map_{$variable}, marker);\n                                });\n                            } else {\n                                alert('\".get_lang('NotFound').\"');\n                            }\n                        } else {\n                            alert('Geocode \".get_lang('Error').': '.get_lang('AddressField').' '.get_lang('NotFound').\"');\n                        }\n                    });\n                }\n            }\n            </script>\";\n\n        return $html;\n    }\n\n    /**\n     * @param string $variable\n     * @param string $text\n     *\n     * @return string\n     */\n    public static function getLocalizationInput($variable, $text)\n    {\n        $html = '\n                <div class=\"form-group\">\n                    <label for=\"geolocalization_extra_'.$variable.'\"\n                        class=\"col-sm-2 control-label\"></label>\n                    <div class=\"col-sm-8\">\n                        <button class=\"btn btn-default\"\n                            id=\"geolocalization_extra_'.$variable.'\"\n                            name=\"geolocalization_extra_'.$variable.'\"\n                            type=\"submit\">\n                            <em class=\"fa fa-map-marker\"></em> '.get_lang('SearchGeolocalization').'\n                        </button>\n                        <button class=\"btn btn-default\" id=\"myLocation_extra_'.$variable.'\"\n                            name=\"myLocation_extra_'.$variable.'\"\n                            type=\"submit\">\n                            <em class=\"fa fa-crosshairs\"></em> '.get_lang('MyLocation').'\n                        </button>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"map_extra_'.$variable.'\" class=\"col-sm-2 control-label\">\n                        '.$text.' - '.get_lang('Map').'\n                    </label>\n                    <div class=\"col-sm-8\">\n                        <div name=\"map_extra_'.$variable.'\"\n                            id=\"map_extra_'.$variable.'\" style=\"width:100%; height:300px;\">\n                        </div>\n                    </div>\n                </div>\n            ';\n\n        return $html;\n    }\n\n    /**\n     * @return int\n     */\n    public function get_count()\n    {\n        $em = Database::getManager();\n        $query = $em->getRepository(EntityExtraField::class)->createQueryBuilder('e');\n        $query->select('count(e.id)');\n        $query->where('e.extraFieldType = :type');\n        $query->setParameter('type', $this->getExtraFieldType());\n\n        return $query->getQuery()->getSingleScalarResult();\n    }\n\n    /**\n     * @return int\n     */\n    public function getExtraFieldType()\n    {\n        return (int) $this->extraFieldType;\n    }\n\n    /**\n     * @param string $sidx\n     * @param string $sord\n     * @param int    $start\n     * @param int    $limit\n     *\n     * @return array\n     */\n    public function getAllGrid($sidx, $sord, $start, $limit)\n    {\n        switch ($sidx) {\n            case 'field_order':\n                $sidx = 'e.fieldOrder';\n                break;\n            case 'variable':\n                $sidx = 'e.variable';\n                break;\n            case 'display_text':\n                $sidx = 'e.displayText';\n                break;\n            case 'changeable':\n                $sidx = 'e.changeable';\n                break;\n            case 'visible_to_self':\n                $sidx = 'e.visibleToSelf';\n                break;\n            case 'visible_to_others':\n                $sidx = 'e.visibleToOthers';\n                break;\n            case 'filter':\n                $sidx = 'e.filter';\n                break;\n        }\n        $em = Database::getManager();\n        $query = $em->getRepository(EntityExtraField::class)->createQueryBuilder('e');\n        $query->select('e')\n            ->where('e.extraFieldType = :type')\n            ->setParameter('type', $this->getExtraFieldType())\n            ->orderBy($sidx, $sord)\n            ->setFirstResult($start)\n            ->setMaxResults($limit);\n\n        return $query->getQuery()->getArrayResult();\n    }\n\n    /**\n     * Get all the field info for tags.\n     *\n     * @param string $variable\n     *\n     * @return array|bool\n     */\n    public function get_handler_field_info_by_tags($variable)\n    {\n        $variable = Database::escape_string($variable);\n        $sql = \"SELECT * FROM {$this->table}\n                WHERE\n                    variable = '$variable' AND\n                    extra_field_type = $this->extraFieldType\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $row = Database::fetch_array($result, 'ASSOC');\n            $row['display_text'] = $this->translateDisplayName(\n                    $row['variable'],\n                    $row['display_text']\n                );\n\n            // All the tags of the field\n            $sql = \"SELECT * FROM $this->table_field_tag\n                    WHERE field_id='\".intval($row['id']).\"'\n                    ORDER BY id ASC\";\n            $result = Database::query($sql);\n            while ($option = Database::fetch_array($result, 'ASSOC')) {\n                $row['options'][$option['id']] = $option;\n            }\n\n            return $row;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Translate the display text for a extra field.\n     *\n     * @param string $variable\n     * @param string $defaultDisplayText\n     *\n     * @return string\n     */\n    public static function translateDisplayName($variable, $defaultDisplayText)\n    {\n        $camelCase = api_underscore_to_camel_case($variable);\n\n        return isset($GLOBALS[$camelCase]) ? $GLOBALS[$camelCase] : $defaultDisplayText;\n    }\n\n    /**\n     * @param int $fieldId\n     *\n     * @return array|bool\n     */\n    public function getFieldInfoByFieldId($fieldId)\n    {\n        $fieldId = (int) $fieldId;\n        $sql = \"SELECT * FROM {$this->table}\n                WHERE\n                    id = '$fieldId' AND\n                    extra_field_type = $this->extraFieldType\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $row = Database::fetch_array($result, 'ASSOC');\n\n            // All the options of the field\n            $sql = \"SELECT * FROM $this->table_field_options\n                    WHERE field_id='\".$fieldId.\"'\n                    ORDER BY option_order ASC\";\n            $result = Database::query($sql);\n            while ($option = Database::fetch_array($result)) {\n                $row['options'][$option['id']] = $option;\n            }\n\n            return $row;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Add elements to a form.\n     *\n     * @param FormValidator $form                            The form object to which to attach this element\n     * @param int           $itemId                          The item (course, user, session, etc) this extra_field is\n     *                                                       linked to\n     * @param array         $exclude                         Variables of extra field to exclude\n     * @param bool          $filter                          Whether to get only the fields with the \"filter\" flag set\n     *                                                       to 1 (true) or not (false)\n     * @param bool          $useTagAsSelect                  Whether to show tag fields as select drop-down or not\n     * @param array         $showOnlyTheseFields             Limit the extra fields shown to just the list given here\n     * @param array         $orderFields                     An array containing the names of the fields shown, in the\n     *                                                       right order\n     * @param array         $extraData\n     * @param bool          $orderDependingDefaults\n     * @param bool          $adminPermissions\n     * @param array         $separateExtraMultipleSelect\n     * @param array         $customLabelsExtraMultipleSelect\n     * @param bool          $addEmptyOptionSelects\n     * @param array         $introductionTextList\n     * @param array         $requiredFields\n     * @param bool          $hideGeoLocalizationDetails\n     *\n     * @throws Exception\n     *\n     * @return array|bool If relevant, returns a one-element array with JS code to be added to the page HTML headers.\n     *                    Returns false if the form object was not given\n     */\n    public function addElements(\n        $form,\n        $itemId = 0,\n        $exclude = [],\n        $filter = false,\n        $useTagAsSelect = false,\n        $showOnlyTheseFields = [],\n        $orderFields = [],\n        $extraData = [],\n        $orderDependingDefaults = false,\n        $adminPermissions = false,\n        $separateExtraMultipleSelect = [],\n        $customLabelsExtraMultipleSelect = [],\n        $addEmptyOptionSelects = false,\n        $introductionTextList = [],\n        $requiredFields = [],\n        $hideGeoLocalizationDetails = false,\n        $help = false\n    ) {\n        if (empty($form)) {\n            return false;\n        }\n\n        $itemId = (int) $itemId;\n        $form->addHidden('item_id', $itemId);\n        $extraData = false;\n        if (!empty($itemId)) {\n            $extraData = $this->get_handler_extra_data($itemId);\n            if (!empty($showOnlyTheseFields)) {\n                $setData = [];\n                foreach ($showOnlyTheseFields as $variable) {\n                    $extraName = 'extra_'.$variable;\n                    if (in_array($extraName, array_keys($extraData))) {\n                        $setData[$extraName] = $extraData[$extraName];\n                    }\n                }\n                $form->setDefaults($setData);\n            } else {\n                $form->setDefaults($extraData);\n            }\n        }\n\n        $conditions = [];\n        if ($filter) {\n            $conditions = ['filter = ?' => 1];\n        }\n\n        $extraFields = $this->get_all($conditions, 'option_order');\n        $extra = $this->set_extra_fields_in_form(\n            $form,\n            $extraData,\n            $adminPermissions,\n            $extraFields,\n            $itemId,\n            $exclude,\n            $useTagAsSelect,\n            $showOnlyTheseFields,\n            $orderFields,\n            $orderDependingDefaults,\n            $separateExtraMultipleSelect,\n            $customLabelsExtraMultipleSelect,\n            $addEmptyOptionSelects,\n            $introductionTextList,\n            $hideGeoLocalizationDetails,\n            $help\n        );\n\n        if (!empty($requiredFields)) {\n            /** @var HTML_QuickForm_input $element */\n            foreach ($form->getElements() as $element) {\n                $name = str_replace('extra_', '', $element->getName());\n                if (in_array($name, $requiredFields)) {\n                    $form->setRequired($element);\n                }\n            }\n        }\n\n        return $extra;\n    }\n\n    /**\n     * Return an array of all the extra fields available for this item.\n     *\n     * @param int $itemId (session_id, question_id, course id)\n     *\n     * @return array\n     */\n    public function get_handler_extra_data($itemId)\n    {\n        if (empty($itemId)) {\n            return [];\n        }\n\n        $extra_data = [];\n        $fields = $this->get_all();\n        $field_values = new ExtraFieldValue($this->type);\n\n        if (!empty($fields)) {\n            foreach ($fields as $field) {\n                $field_value = $field_values->get_values_by_handler_and_field_id(\n                    $itemId,\n                    $field['id']\n                );\n\n                if (self::FIELD_TYPE_TAG == $field['field_type']) {\n                    $tags = UserManager::get_user_tags_to_string(\n                        $itemId,\n                        $field['id'],\n                        false\n                    );\n                    $extra_data['extra_'.$field['variable']] = $tags;\n\n                    continue;\n                }\n\n                if ($field_value) {\n                    $variable = $field['variable'];\n                    $field_value = $field_value['value'];\n                    switch ($field['field_type']) {\n                        case self::FIELD_TYPE_TAG:\n                            $tags = UserManager::get_user_tags_to_string(\n                                $itemId,\n                                $field['id'],\n                                false\n                            );\n\n                            $extra_data['extra_'.$field['variable']] = $tags;\n                            break;\n                        case self::FIELD_TYPE_DOUBLE_SELECT:\n                        case self::FIELD_TYPE_SELECT_WITH_TEXT_FIELD:\n                            $selected_options = explode('::', $field_value);\n                            $firstOption = isset($selected_options[0]) ? $selected_options[0] : '';\n                            $secondOption = isset($selected_options[1]) ? $selected_options[1] : '';\n                            $extra_data['extra_'.$field['variable']]['extra_'.$field['variable']] = $firstOption;\n                            $extra_data['extra_'.$field['variable']]['extra_'.$field['variable'].'_second'] = $secondOption;\n\n                            break;\n                        case self::FIELD_TYPE_SELECT_MULTIPLE:\n                            $field_value = explode(';', $field_value);\n                            $extra_data['extra_'.$field['variable']] = $field_value;\n                            break;\n                        case self::FIELD_TYPE_RADIO:\n                            $extra_data['extra_'.$field['variable']]['extra_'.$field['variable']] = $field_value;\n                            break;\n                        case self::FIELD_TYPE_TRIPLE_SELECT:\n                            [$level1, $level2, $level3] = explode(';', $field_value);\n\n                            $extra_data[\"extra_$variable\"][\"extra_$variable\"] = $level1;\n                            $extra_data[\"extra_$variable\"][\"extra_{$variable}_second\"] = $level2;\n                            $extra_data[\"extra_$variable\"][\"extra_{$variable}_third\"] = $level3;\n                            break;\n                        default:\n                            $extra_data['extra_'.$field['variable']] = $field_value;\n                            break;\n                    }\n                } else {\n                    // Set default values\n                    if (isset($field['field_default_value']) &&\n                        !empty($field['field_default_value'])\n                    ) {\n                        $extra_data['extra_'.$field['variable']] = $field['field_default_value'];\n                    }\n                }\n            }\n        }\n\n        return $extra_data;\n    }\n\n    /**\n     * Get an array of all the values from the extra_field and extra_field_options tables\n     * based on the current object's type.\n     *\n     * @param array $options\n     * @param null  $order_field_options_by\n     *\n     * @return array\n     */\n    public function get_all($options = [], $order_field_options_by = null)\n    {\n        $options = Database::parse_conditions(['where' => $options]);\n\n        if (empty($options)) {\n            $options .= ' WHERE extra_field_type = '.$this->extraFieldType;\n        } else {\n            $options .= ' AND extra_field_type = '.$this->extraFieldType;\n        }\n\n        $sql = \"SELECT * FROM $this->table\n                $options\n                ORDER BY field_order ASC\n        \";\n\n        $result = Database::query($sql);\n        $extraFields = Database::store_result($result, 'ASSOC');\n\n        $option = new ExtraFieldOption($this->type);\n        if (!empty($extraFields)) {\n            foreach ($extraFields as &$extraField) {\n                $extraField['display_text'] = $this->translateDisplayName(\n                    $extraField['variable'],\n                    $extraField['display_text']\n                );\n                $extraField['options'] = $option->get_field_options_by_field(\n                    $extraField['id'],\n                    false,\n                    $order_field_options_by\n                );\n            }\n        }\n\n        return $extraFields;\n    }\n\n    /**\n     * Add an element that matches the given extra field to the given $form object.\n     *\n     * @param FormValidator $form                The form these fields are to be attached to\n     * @param array         $extraData\n     * @param bool          $adminPermissions    Whether the display is considered without edition limits (true) or not\n     *                                           (false)\n     * @param array         $extra\n     * @param int           $itemId              The item (course, user, session, etc) this extra_field is attached to\n     * @param array         $exclude             Extra fields to be skipped, by textual ID\n     * @param bool          $useTagAsSelect      Whether to show tag fields as select drop-down or not\n     * @param array         $showOnlyTheseFields Limit the extra fields shown to just the list given here\n     * @param array         $orderFields         An array containing the names of the fields shown, in the right order\n     *\n     * @throws Exception\n     *\n     * @return array If relevant, returns a one-element array with JS code to be added to the page HTML headers\n     */\n    public function set_extra_fields_in_form(\n        $form,\n        $extraData,\n        $adminPermissions = false,\n        $extra = [],\n        $itemId = null,\n        $exclude = [],\n        $useTagAsSelect = false,\n        $showOnlyTheseFields = [],\n        $orderFields = [],\n        $orderDependingDefaults = false,\n        $separateExtraMultipleSelect = [],\n        $customLabelsExtraMultipleSelect = [],\n        $addEmptyOptionSelects = false,\n        $introductionTextList = [],\n        $hideGeoLocalizationDetails = false,\n        $help = false\n    ) {\n        $jquery_ready_content = null;\n        if (!empty($extra)) {\n            $newOrder = [];\n            if (!empty($orderFields)) {\n                foreach ($orderFields as $order) {\n                    foreach ($extra as $field_details) {\n                        if ($order == $field_details['variable']) {\n                            $newOrder[] = $field_details;\n                        }\n                    }\n                }\n                $extra = $newOrder;\n            }\n\n            foreach ($extra as $field_details) {\n                $variable = $field_details['variable'];\n                if (!empty($showOnlyTheseFields)) {\n                    if (!in_array($variable, $showOnlyTheseFields)) {\n                        continue;\n                    }\n                }\n\n                // Getting default value id if is set\n                $defaultValueId = null;\n                if (isset($field_details['options']) && !empty($field_details['options'])) {\n                    $valueToFind = null;\n                    if (isset($field_details['field_default_value'])) {\n                        $valueToFind = $field_details['field_default_value'];\n                    }\n                    // If a value is found we override the default value\n                    if (isset($extraData['extra_'.$variable])) {\n                        $valueToFind = $extraData['extra_'.$variable];\n                    }\n\n                    foreach ($field_details['options'] as $option) {\n                        if ($option['option_value'] == $valueToFind) {\n                            $defaultValueId = $option['id'];\n                        }\n                    }\n                }\n\n                if (!$adminPermissions) {\n                    if (0 == $field_details['visible_to_self']) {\n                        continue;\n                    }\n\n                    if (in_array($variable, $exclude)) {\n                        continue;\n                    }\n                }\n\n                if (!empty($introductionTextList) &&\n                    in_array($variable, array_keys($introductionTextList))\n                ) {\n                    $form->addHtml($introductionTextList[$variable]);\n                }\n\n                $freezeElement = false;\n                if (!$adminPermissions) {\n                    $freezeElement = 0 == $field_details['visible_to_self'] || 0 == $field_details['changeable'];\n                }\n\n                $translatedDisplayText = get_lang($field_details['display_text'], true);\n                $translatedDisplayHelpText = '';\n                if ($help) {\n                    $translatedDisplayHelpText .= get_lang($field_details['display_text'].'Help');\n                }\n                if (!empty($translatedDisplayText)) {\n                    if (!empty($translatedDisplayHelpText)) {\n                        // In this case, exceptionally, display_text is an array\n                        // which is then treated by display_form()\n                        $field_details['display_text'] = [$translatedDisplayText, $translatedDisplayHelpText];\n                    } else {\n                        // We have an helper text, use it\n                        $field_details['display_text'] = $translatedDisplayText;\n                    }\n                }\n\n                switch ($field_details['field_type']) {\n                    case self::FIELD_TYPE_TEXT:\n                        $form->addElement(\n                            'text',\n                            'extra_'.$variable,\n                            $field_details['display_text'],\n                            [\n                                'id' => 'extra_'.$variable,\n                            ]\n                        );\n                        $form->applyFilter(\n                            'extra_'.$variable,\n                            'stripslashes'\n                        );\n                        $form->applyFilter(\n                            'extra_'.$variable,\n                            'trim'\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_TEXTAREA:\n                        $form->addHtmlEditor(\n                            'extra_'.$variable,\n                            $field_details['display_text'],\n                            false,\n                            false,\n                            [\n                                'ToolbarSet' => 'Profile',\n                                'Width' => '100%',\n                                'Height' => '130',\n                                'id' => 'extra_'.$variable,\n                            ]\n                        );\n                        $form->applyFilter('extra_'.$variable, 'stripslashes');\n                        $form->applyFilter('extra_'.$variable, 'trim');\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_RADIO:\n                        $group = [];\n                        if (isset($field_details['options']) &&\n                            !empty($field_details['options'])\n                        ) {\n                            foreach ($field_details['options'] as $option_details) {\n                                $options[$option_details['option_value']] = $option_details['display_text'];\n                                $group[] = $form->createElement(\n                                    'radio',\n                                    'extra_'.$variable,\n                                    $option_details['option_value'],\n                                    $option_details['display_text'].'<br />',\n                                    $option_details['option_value']\n                                );\n                            }\n                        }\n                        $form->addGroup(\n                            $group,\n                            'extra_'.$variable,\n                            $field_details['display_text']\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_CHECKBOX:\n                        $group = [];\n                        if (isset($field_details['options']) &&\n                            !empty($field_details['options'])\n                        ) {\n                            foreach ($field_details['options'] as $option_details) {\n                                $options[$option_details['option_value']] = $option_details['display_text'];\n                                $group[] = $form->createElement(\n                                    'checkbox',\n                                    'extra_'.$variable,\n                                    $option_details['option_value'],\n                                    $option_details['display_text'].'<br />',\n                                    $option_details['option_value']\n                                );\n                            }\n                        } else {\n                            $fieldVariable = \"extra_$variable\";\n                            $checkboxAttributes = [];\n                            if (is_array($extraData) &&\n                                array_key_exists($fieldVariable, $extraData)\n                            ) {\n                                if (!empty($extraData[$fieldVariable])) {\n                                    $checkboxAttributes['checked'] = 1;\n                                }\n                            }\n\n                            if (empty($checkboxAttributes) &&\n                                isset($field_details['default_value']) && empty($extraData)) {\n                                if (1 == $field_details['default_value']) {\n                                    $checkboxAttributes['checked'] = 1;\n                                }\n                            }\n\n                            // We assume that is a switch on/off with 1 and 0 as values\n                            $group[] = $form->createElement(\n                                'checkbox',\n                                'extra_'.$variable,\n                                null,\n                                get_lang('Yes'),\n                                $checkboxAttributes\n                            );\n                        }\n\n                        $form->addGroup(\n                            $group,\n                            'extra_'.$variable,\n                            $field_details['display_text']\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_SELECT:\n                        $this->addSelectElement($form, $field_details, $defaultValueId, $freezeElement);\n                        break;\n                    case self::FIELD_TYPE_SELECT_MULTIPLE:\n                        $options = [];\n                        if (empty($defaultValueId)) {\n                            $options[''] = get_lang('Please select an option');\n                        }\n                        if (isset($field_details['options']) && !empty($field_details['options'])) {\n                            foreach ($field_details['options'] as $optionDetails) {\n                                $options[$optionDetails['option_value']] = $optionDetails['display_text'];\n                            }\n                        }\n                        $form->addElement(\n                            'select',\n                            'extra_'.$variable,\n                            $field_details['display_text'],\n                            $options,\n                            [\n                                'multiple' => 'multiple',\n                                'id' => 'extra_'.$variable,\n                            ]\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_DATE:\n                        $form->addDatePicker('extra_'.$variable, $field_details['display_text']);\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_DATETIME:\n                        $form->addDateTimePicker(\n                            'extra_'.$variable,\n                            $field_details['display_text']\n                        );\n\n                        $defaults['extra_'.$variable] = api_get_local_time();\n                        if (!isset($form->_defaultValues['extra_'.$variable])) {\n                            $form->setDefaults($defaults);\n                        }\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_DOUBLE_SELECT:\n                        $jquery_ready_content .= self::addDoubleSelectElement(\n                            $form,\n                            $field_details,\n                            $extraData,\n                            $freezeElement\n                        );\n                        break;\n                    case self::FIELD_TYPE_DIVIDER:\n                        $form->addHtml('\n                            <div class=\"form-group \">\n                                <div class=\"col-sm-12\">\n                                    <div class=\"panel-separator\">\n                                       <h4 id=\"'.$variable.'\" class=\"form-separator\">'\n                                            .$field_details['display_text'].'\n                                       </h4>\n                                    </div>\n                                </div>\n                            </div>\n                        ');\n                        break;\n                    case self::FIELD_TYPE_TAG:\n                        $field_id = $field_details['id'];\n                        $separateValue = 0;\n                        if (isset($separateExtraMultipleSelect[$variable])) {\n                            $separateValue = $separateExtraMultipleSelect[$variable];\n                        }\n\n                        $selectedOptions = [];\n                        if ($separateValue > 0) {\n                            $em = Database::getManager();\n                            $fieldTags = $em\n                                ->getRepository(ExtraFieldRelTag::class)\n                                ->findBy(\n                                    [\n                                        'field' => $field_id,\n                                        'itemId' => $itemId,\n                                    ]\n                                );\n                            // ofaj.\n                            for ($i = 0; $i < $separateValue; $i++) {\n                                $tagsSelect = $form->addSelect(\n                                    'extra_'.$variable.'['.$i.']',\n                                    $customLabelsExtraMultipleSelect[$variable][$i], //$field_details['display_text'],\n                                    null,\n                                    ['id' => 'extra_'.$variable.'_'.$i]\n                                );\n\n                                if ($addEmptyOptionSelects) {\n                                    $tagsSelect->addOption(\n                                        '',\n                                        ''\n                                    );\n                                }\n                                /** @var ExtraFieldRelTag $fieldTag */\n                                foreach ($fieldTags as $fieldTag) {\n                                    $tag = $fieldTag->getTag();\n\n                                    if (empty($tag)) {\n                                        continue;\n                                    }\n\n                                    $tagsSelect->addOption(\n                                        $tag->getTag(),\n                                        $tag->getTag()\n                                    );\n                                }\n                            }\n                        } else {\n                            $tagsSelect = $form->addSelect(\n                                \"extra_{$variable}\",\n                                $field_details['display_text'],\n                                [],\n                                ['style' => 'width: 100%;']\n                            );\n\n                            if (false === $useTagAsSelect) {\n                                $tagsSelect->setAttribute('class', null);\n                            }\n\n                            $tagsSelect->setAttribute(\n                                'id',\n                                \"extra_{$variable}\"\n                            );\n                            $tagsSelect->setMultiple(true);\n\n                            $selectedOptions = [];\n                            if ('user' === $this->type) {\n                                // The magic should be here\n                                $user_tags = UserManager::get_user_tags(\n                                    $itemId,\n                                    $field_details['id']\n                                );\n\n                                if (is_array($user_tags) && count($user_tags) > 0) {\n                                    foreach ($user_tags as $tag) {\n                                        if (empty($tag['tag'])) {\n                                            continue;\n                                        }\n                                        $tagsSelect->addOption(\n                                            $tag['tag'],\n                                            $tag['tag'],\n                                            [\n                                                'selected' => 'selected',\n                                                'class' => 'selected',\n                                            ]\n                                        );\n                                        $selectedOptions[] = $tag['tag'];\n                                    }\n                                }\n                                $url = api_get_path(WEB_AJAX_PATH).'user_manager.ajax.php';\n                            } else {\n                                $em = Database::getManager();\n                                $fieldTags = $em->getRepository(\n                                    ExtraFieldRelTag::class\n                                )\n                                ->findBy(\n                                    [\n                                        'field' => $field_id,\n                                        'itemId' => $itemId,\n                                    ]\n                                );\n\n                                /** @var ExtraFieldRelTag $fieldTag */\n                                foreach ($fieldTags as $fieldTag) {\n                                    $tag = $fieldTag->getTag();\n                                    if (empty($tag)) {\n                                        continue;\n                                    }\n                                    $tagsSelect->addOption(\n                                        $tag->getTag(),\n                                        $tag->getTag()\n                                    );\n                                    $selectedOptions[] = $tag->getTag();\n                                }\n\n                                if (!empty($extraData) && isset($extraData['extra_'.$variable])) {\n                                    $data = $extraData['extra_'.$variable];\n                                    if (!empty($data)) {\n                                        foreach ($data as $option) {\n                                            $tagsSelect->addOption(\n                                                $option,\n                                                $option\n                                            );\n                                        }\n                                    }\n                                }\n\n                                if ($useTagAsSelect) {\n                                    $fieldTags = $em->getRepository(ExtraFieldRelTag::class)\n                                        ->findBy(\n                                            [\n                                                'field' => $field_id,\n                                            ]\n                                        );\n                                    $tagsAdded = [];\n                                    /** @var ExtraFieldRelTag $fieldTag */\n                                    foreach ($fieldTags as $fieldTag) {\n                                        $tag = $fieldTag->getTag();\n\n                                        if (empty($tag)) {\n                                            continue;\n                                        }\n\n                                        $tagText = $tag->getTag();\n                                        if (in_array($tagText, $tagsAdded)) {\n                                            continue;\n                                        }\n\n                                        $tagsSelect->addOption(\n                                            $tag->getTag(),\n                                            $tag->getTag(),\n                                            []\n                                        );\n\n                                        $tagsAdded[] = $tagText;\n                                    }\n                                }\n                                $url = api_get_path(WEB_AJAX_PATH).'extra_field.ajax.php';\n                            }\n\n                            $form->setDefaults(\n                                [\n                                    'extra_'.$variable => $selectedOptions,\n                                ]\n                            );\n\n                            if (false == $useTagAsSelect) {\n                                $jquery_ready_content .= \"\n                                $('#extra_$variable').select2({\n                                    ajax: {\n                                        url: '$url?a=search_tags&field_id=$field_id&type={$this->type}',\n                                        processResults: function (data) {\n                                            return {\n                                                results: data.items\n                                            }\n                                        }\n                                    },\n                                    cache: false,\n                                    tags: true,\n                                    tokenSeparators: [','],\n                                    placeholder: '\".get_lang('Start to type, then click on this bar to validate tag').\"'\n                                });\n                            \";\n                            }\n                        }\n\n                        break;\n                    case self::FIELD_TYPE_TIMEZONE:\n                        $form->addElement(\n                            'select',\n                            'extra_'.$variable,\n                            $field_details['display_text'],\n                            api_get_timezones(),\n                            ''\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_SOCIAL_PROFILE:\n                        // get the social network's favicon\n                        $extra_data_variable = isset($extraData['extra_'.$variable]) ? $extraData['extra_'.$variable] : null;\n                        $field_default_value = isset($field_details['field_default_value']) ? $field_details['field_default_value'] : null;\n                        $icon_path = UserManager::get_favicon_from_url(\n                            $extra_data_variable,\n                            $field_default_value\n                        );\n                        // special hack for hi5\n                        $leftpad = '1.7';\n                        $top = '0.4';\n                        $domain = parse_url($icon_path, PHP_URL_HOST);\n                        if ('www.hi5.com' === $domain || 'hi5.com' === $domain) {\n                            $leftpad = '3';\n                            $top = '0';\n                        }\n                        // print the input field\n                        $form->addElement(\n                            'text',\n                            'extra_'.$variable,\n                            $field_details['display_text'],\n                            [\n                                //'size' => 60,\n                                'size' => implode(\n                                    '; ',\n                                    [\n                                        \"background-image: url('$icon_path')\",\n                                        'background-repeat: no-repeat',\n                                        \"background-position: 0.4em {$top}em\",\n                                        \"padding-left: {$leftpad}em\",\n                                    ]\n                                ),\n                            ]\n                        );\n                        $form->applyFilter('extra_'.$variable, 'stripslashes');\n                        $form->applyFilter('extra_'.$variable, 'trim');\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_MOBILE_PHONE_NUMBER:\n                        $form->addElement(\n                            'text',\n                            'extra_'.$variable,\n                            $field_details['display_text'].' ('.get_lang('Include the country dial code').')',\n                            ['size' => 40, 'placeholder' => '(xx)xxxxxxxxx']\n                        );\n                        $form->applyFilter('extra_'.$variable, 'stripslashes');\n                        $form->applyFilter('extra_'.$variable, 'trim');\n                        $form->applyFilter('extra_'.$variable, 'mobile_phone_number_filter');\n                        $form->addRule(\n                            'extra_'.$variable,\n                            get_lang('Mobile phone number is incomplete or contains invalid characters'),\n                            'mobile_phone_number'\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_INTEGER:\n                        $form->addElement(\n                            'number',\n                            'extra_'.$variable,\n                            $field_details['display_text'],\n                            ['class' => 'span1', 'step' => 1]\n                        );\n\n                        $form->applyFilter('extra_'.$variable, 'stripslashes');\n                        $form->applyFilter('extra_'.$variable, 'trim');\n                        $form->applyFilter('extra_'.$variable, 'intval');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_FLOAT:\n                        $form->addElement(\n                            'number',\n                            'extra_'.$variable,\n                            $field_details['display_text'],\n                            ['class' => 'span1', 'step' => '0.01']\n                        );\n\n                        $form->applyFilter('extra_'.$variable, 'stripslashes');\n                        $form->applyFilter('extra_'.$variable, 'trim');\n                        $form->applyFilter('extra_'.$variable, 'floatval');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_FILE_IMAGE:\n                        $fieldVariable = \"extra_{$variable}\";\n                        $fieldTexts = [\n                            $field_details['display_text'],\n                        ];\n\n                        if (is_array($extraData) && array_key_exists($fieldVariable, $extraData)) {\n                            $assetId = $extraData[$fieldVariable];\n                            $assetRepo = Container::getAssetRepository();\n                            $asset = $assetRepo->find($assetId);\n                            if (null !== $asset) {\n                                $fieldTexts[] = Display::img(\n                                    $assetRepo->getAssetUrl($asset),\n                                    $field_details['display_text'],\n                                    ['width' => '300']\n                                );\n                            }\n                        }\n\n                        if ('Image' === $fieldTexts[0]) {\n                            $fieldTexts[0] = get_lang($fieldTexts[0]);\n                        }\n\n                        $form->addFile(\n                            $fieldVariable,\n                            $fieldTexts,\n                            ['accept' => 'image/*', 'id' => 'extra_image', 'crop_image' => 'true']\n                        );\n\n                        $form->applyFilter('extra_'.$variable, 'stripslashes');\n                        $form->applyFilter('extra_'.$variable, 'trim');\n\n                        $allowedPictureTypes = ['jpg', 'jpeg', 'png', 'gif'];\n                        $form->addRule(\n                            'extra_'.$variable,\n                            get_lang('Only PNG, JPG or GIF images allowed').' ('.implode(',', $allowedPictureTypes).')',\n                            'filetype',\n                            $allowedPictureTypes\n                        );\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_FILE:\n                        $fieldVariable = \"extra_{$variable}\";\n                        $fieldTexts = [\n                            $field_details['display_text'],\n                        ];\n\n                        if (is_array($extraData) &&\n                            array_key_exists($fieldVariable, $extraData)\n                        ) {\n                            $assetId = $extraData[$fieldVariable];\n                            $assetRepo = Container::getAssetRepository();\n                            /** @var Asset $asset */\n                            $asset = $assetRepo->find($assetId);\n                            if (null !== $asset) {\n                                $fileName = $asset->getTitle();\n                                $linkUrl = $assetRepo->getAssetUrl($asset);\n                                $linkToDelete = '';\n                                if (api_is_platform_admin()) {\n                                    $url = api_get_path(WEB_AJAX_PATH).'extra_field.ajax.php?type='.$this->type;\n                                    $url .= '&a=delete_file&field_id='.$field_details['id'].'&item_id='.$itemId;\n                                    $deleteId = $variable.'_delete';\n                                    $form->addHtml(\n                                        \"\n                                        <script>\n                                            $(function() {\n                                                $('#\".$deleteId.\"').on('click', function() {\n                                                    $.ajax({\n                                                        type: 'GET',\n                                                        url: '\".$url.\"',\n                                                        success: function(result) {\n                                                            if (result == 1) {\n                                                                $('#\".$variable.\"').html('\".get_lang('Deleted').\"');\n                                                            }\n                                                        }\n                                                    });\n                                                });\n                                            });\n                                        </script>\n                                    \"\n                                    );\n\n                                    $linkToDelete = '&nbsp;'.Display::url(\n                                        Display::return_icon('delete.png', get_lang('Delete')),\n                                        'javascript:void(0)',\n                                        ['id' => $deleteId]\n                                    );\n                                }\n                                $anchor = Display::url(\n                                    $fileName,\n                                    $linkUrl,\n                                    [\n                                        'title' => $field_details['display_text'],\n                                        'target' => '_blank',\n                                    ]\n                                );\n                                $fieldTexts[] = '<div id=\"'.$variable.'\">'.$anchor.$linkToDelete.'</div>';\n                            }\n                        }\n\n                        $form->addElement(\n                            'file',\n                            $fieldVariable,\n                            $fieldTexts,\n                            []\n                        );\n\n                        $form->applyFilter('extra_'.$variable, 'stripslashes');\n                        $form->applyFilter('extra_'.$variable, 'trim');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_VIDEO_URL:\n                        $form->addUrl(\n                            \"extra_{$variable}\",\n                            $field_details['display_text'],\n                            false,\n                            ['placeholder' => 'https://']\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_LETTERS_ONLY:\n                        $form->addTextLettersOnly(\n                            \"extra_{$variable}\",\n                            $field_details['display_text']\n                        );\n                        $form->applyFilter('extra_'.$variable, 'stripslashes');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_ALPHANUMERIC:\n                        $form->addTextAlphanumeric(\n                            \"extra_{$variable}\",\n                            $field_details['display_text']\n                        );\n                        $form->applyFilter(\n                            'extra_'.$variable,\n                            'stripslashes'\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_LETTERS_SPACE:\n                        $form->addTextLettersAndSpaces(\n                            \"extra_{$variable}\",\n                            $field_details['display_text']\n                        );\n                        $form->applyFilter('extra_'.$variable, 'stripslashes');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_ALPHANUMERIC_SPACE:\n                        $form->addTextAlphanumericAndSpaces(\n                            \"extra_{$variable}\",\n                            $field_details['display_text']\n                        );\n                        $form->applyFilter(\n                            'extra_'.$variable,\n                            'stripslashes'\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_GEOLOCALIZATION_COORDINATES:\n                    case self::FIELD_TYPE_GEOLOCALIZATION:\n                        $dataValue = isset($extraData['extra_'.$variable]) ? $extraData['extra_'.$variable] : '';\n                        $form->addGeoLocationMapField(\n                            'extra_'.$variable,\n                            $field_details['display_text'],\n                            $dataValue,\n                            $hideGeoLocalizationDetails\n                        );\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_SELECT_WITH_TEXT_FIELD:\n                        $jquery_ready_content .= $this->addSelectWithTextFieldElement(\n                            $form,\n                            $field_details,\n                            $freezeElement\n                        );\n                        break;\n                    case self::FIELD_TYPE_TRIPLE_SELECT:\n                        $jquery_ready_content .= $this->addTripleSelectElement(\n                            $form,\n                            $field_details,\n                            is_array($extraData) ? $extraData : [],\n                            $freezeElement\n                        );\n                        break;\n                }\n            }\n        }\n\n        $return = [];\n        $return['jquery_ready_content'] = $jquery_ready_content;\n\n        return $return;\n    }\n\n    /**\n     * @param array $options\n     *\n     * @return array\n     */\n    public static function extra_field_double_select_convert_array_to_ordered_array($options)\n    {\n        $optionsParsed = [];\n        if (!empty($options)) {\n            foreach ($options as $option) {\n                if (0 == $option['option_value']) {\n                    $optionsParsed[$option['id']][] = $option;\n                } else {\n                    $optionsParsed[$option['option_value']][] = $option;\n                }\n            }\n        }\n\n        return $optionsParsed;\n    }\n\n    /**\n     * @return array\n     */\n    public static function tripleSelectConvertArrayToOrderedArray(array $options)\n    {\n        $level1 = self::getOptionsFromTripleSelect($options, 0);\n        $level2 = [];\n        $level3 = [];\n\n        foreach ($level1 as $item1) {\n            $level2 += self::getOptionsFromTripleSelect($options, $item1['id']);\n        }\n\n        foreach ($level2 as $item2) {\n            $level3 += self::getOptionsFromTripleSelect($options, $item2['id']);\n        }\n\n        return ['level1' => $level1, 'level2' => $level2, 'level3' => $level3];\n    }\n\n    /**\n     * @param string $type\n     *\n     * @return array\n     */\n    public function get_all_extra_field_by_type($type)\n    {\n        // all the information of the field\n        $sql = \"SELECT * FROM {$this->table}\n                WHERE\n                    field_type = '\".Database::escape_string($type).\"' AND\n                    extra_field_type = $this->extraFieldType\n                \";\n        $result = Database::query($sql);\n\n        $return = [];\n        while ($row = Database::fetch_array($result)) {\n            $return[] = $row['id'];\n        }\n\n        return $return;\n    }\n\n    /**\n     * @param int $id\n     */\n    public function get_field_type_by_id($id)\n    {\n        $types = $this->get_field_types();\n        if (isset($types[$id])) {\n            return $types[$id];\n        }\n\n        return null;\n    }\n\n    /**\n     * @return array\n     */\n    public function get_field_types()\n    {\n        return $this->get_extra_fields_by_handler($this->type);\n    }\n\n    /**\n     * @param string $handler\n     *\n     * @return array\n     */\n    public static function get_extra_fields_by_handler($handler)\n    {\n        $types = [];\n        $types[self::FIELD_TYPE_TEXT] = get_lang('FieldTypeText');\n        $types[self::FIELD_TYPE_TEXTAREA] = get_lang('FieldTypeTextarea');\n        $types[self::FIELD_TYPE_RADIO] = get_lang('FieldTypeRadio');\n        $types[self::FIELD_TYPE_SELECT] = get_lang('FieldTypeSelect');\n        $types[self::FIELD_TYPE_SELECT_MULTIPLE] = get_lang('FieldTypeSelectMultiple');\n        $types[self::FIELD_TYPE_DATE] = get_lang('FieldTypeDate');\n        $types[self::FIELD_TYPE_DATETIME] = get_lang('FieldTypeDatetime');\n        $types[self::FIELD_TYPE_DOUBLE_SELECT] = get_lang('FieldTypeDoubleSelect');\n        $types[self::FIELD_TYPE_DIVIDER] = get_lang('FieldTypeDivider');\n        $types[self::FIELD_TYPE_TAG] = get_lang('FieldTypeTag');\n        $types[self::FIELD_TYPE_TIMEZONE] = get_lang('FieldTypeTimezone');\n        $types[self::FIELD_TYPE_SOCIAL_PROFILE] = get_lang('FieldTypeSocialProfile');\n        $types[self::FIELD_TYPE_MOBILE_PHONE_NUMBER] = get_lang('FieldTypeMobilePhoneNumber');\n        $types[self::FIELD_TYPE_CHECKBOX] = get_lang('FieldTypeCheckbox');\n        $types[self::FIELD_TYPE_INTEGER] = get_lang('FieldTypeInteger');\n        $types[self::FIELD_TYPE_FILE_IMAGE] = get_lang('FieldTypeFileImage');\n        $types[self::FIELD_TYPE_FLOAT] = get_lang('FieldTypeFloat');\n        $types[self::FIELD_TYPE_FILE] = get_lang('FieldTypeFile');\n        $types[self::FIELD_TYPE_VIDEO_URL] = get_lang('FieldTypeVideoUrl');\n        $types[self::FIELD_TYPE_LETTERS_ONLY] = get_lang('FieldTypeOnlyLetters');\n        $types[self::FIELD_TYPE_ALPHANUMERIC] = get_lang('FieldTypeAlphanumeric');\n        $types[self::FIELD_TYPE_LETTERS_SPACE] = get_lang('FieldTypeLettersSpaces');\n        $types[self::FIELD_TYPE_ALPHANUMERIC_SPACE] = get_lang('FieldTypeAlphanumericSpaces');\n        $types[self::FIELD_TYPE_GEOLOCALIZATION] = get_lang('Geolocalization');\n        $types[self::FIELD_TYPE_GEOLOCALIZATION_COORDINATES] = get_lang('GeolocalizationCoordinates');\n        $types[self::FIELD_TYPE_SELECT_WITH_TEXT_FIELD] = get_lang('FieldTypeSelectWithTextField');\n        $types[self::FIELD_TYPE_TRIPLE_SELECT] = get_lang('FieldTypeTripleSelect');\n\n        switch ($handler) {\n            case 'course':\n            case 'session':\n            case 'user':\n            case 'skill':\n                break;\n        }\n\n        return $types;\n    }\n\n    /**\n     * @param array $params\n     * @param bool  $showQuery\n     *\n     * @return int|bool\n     */\n    public function save($params, $showQuery = false)\n    {\n        $fieldInfo = self::get_handler_field_info_by_field_variable($params['variable']);\n        $params = $this->clean_parameters($params);\n        $params['extra_field_type'] = $this->extraFieldType;\n\n        if ($fieldInfo) {\n            return $fieldInfo['id'];\n        } else {\n            $id = parent::save($params, $showQuery);\n            if ($id) {\n                $fieldOption = new ExtraFieldOption($this->type);\n                $params['field_id'] = $id;\n                $fieldOption->save($params);\n            }\n\n            return $id;\n        }\n    }\n\n    /**\n     * @param string $variable\n     *\n     * @return array|bool\n     */\n    public function get_handler_field_info_by_field_variable($variable)\n    {\n        $variable = Database::escape_string($variable);\n        $sql = \"SELECT * FROM {$this->table}\n                WHERE\n                    variable = '$variable' AND\n                    extra_field_type = $this->extraFieldType\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $row = Database::fetch_array($result, 'ASSOC');\n            if ($row) {\n                $row['display_text'] = $this->translateDisplayName(\n                    $row['variable'],\n                    $row['display_text']\n                );\n\n                // All the options of the field\n                $sql = \"SELECT * FROM $this->table_field_options\n                    WHERE field_id='\".intval($row['id']).\"'\n                    ORDER BY option_order ASC\";\n                $result = Database::query($sql);\n                while ($option = Database::fetch_array($result)) {\n                    $row['options'][$option['id']] = $option;\n                }\n\n                return $row;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param array $params\n     *\n     * @return array\n     */\n    public function clean_parameters($params)\n    {\n        if (!isset($params['variable']) || empty($params['variable'])) {\n            $params['variable'] = $params['display_text'];\n        }\n\n        $params['variable'] = trim(strtolower(str_replace(' ', '_', $params['variable'])));\n\n        if (!isset($params['field_order'])) {\n            $max_order = self::get_max_field_order();\n            $params['field_order'] = $max_order;\n        } else {\n            $params['field_order'] = (int) $params['field_order'];\n        }\n\n        return $params;\n    }\n\n    /**\n     * @return int\n     */\n    public function get_max_field_order()\n    {\n        $sql = \"SELECT MAX(field_order)\n                FROM {$this->table}\n                WHERE\n                    extra_field_type = '.$this->extraFieldType.'\";\n        $res = Database::query($sql);\n\n        $order = 0;\n        if (Database::num_rows($res) > 0) {\n            $row = Database::fetch_row($res);\n            $order = $row[0] + 1;\n        }\n\n        return $order;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function update($params, $showQuery = false)\n    {\n        $params = $this->clean_parameters($params);\n        if (isset($params['id'])) {\n            $fieldOption = new ExtraFieldOption($this->type);\n            $params['field_id'] = $params['id'];\n            if (empty($params['field_type'])) {\n                $params['field_type'] = $this->type;\n            }\n            $fieldOption->save($params, $showQuery);\n        }\n\n        return parent::update($params, $showQuery);\n    }\n\n    /**\n     * @param $id\n     *\n     * @return bool\n     */\n    public function delete($id)\n    {\n        $em = Database::getManager();\n        $items = $em->getRepository(\\Chamilo\\CoreBundle\\Entity\\ExtraFieldSavedSearch::class)->findBy(['field' => $id]);\n        if ($items) {\n            foreach ($items as $item) {\n                $em->remove($item);\n            }\n            $em->flush();\n        }\n        $field_option = new ExtraFieldOption($this->type);\n        $field_option->delete_all_options_by_field_id($id);\n\n        $session_field_values = new ExtraFieldValue($this->type);\n        $session_field_values->delete_all_values_by_field_id($id);\n\n        return parent::delete($id);\n    }\n\n    /**\n     * @param $breadcrumb\n     * @param $action\n     */\n    public function setupBreadcrumb(&$breadcrumb, $action)\n    {\n        if ('add' === $action) {\n            $breadcrumb[] = ['url' => $this->pageUrl, 'name' => $this->pageName];\n            $breadcrumb[] = ['url' => '#', 'name' => get_lang('Add')];\n        } elseif ('edit' === $action) {\n            $breadcrumb[] = ['url' => $this->pageUrl, 'name' => $this->pageName];\n            $breadcrumb[] = ['url' => '#', 'name' => get_lang('Edit')];\n        } else {\n            $breadcrumb[] = ['url' => '#', 'name' => $this->pageName];\n        }\n    }\n\n    /**\n     * Displays the title + grid.\n     */\n    public function display()\n    {\n        $actions = '<a href=\"../admin/index.php\">';\n        $actions .= Display::return_icon(\n            'back.png',\n            get_lang('Back to').' '.get_lang('Administration'),\n            '',\n            ICON_SIZE_MEDIUM\n        );\n        $actions .= '</a>';\n        $actions .= '<a href=\"'.api_get_self().'?action=add&type='.$this->type.'\">';\n        $actions .= Display::return_icon(\n            'add_user_fields.png',\n            get_lang('Add'),\n            '',\n            ICON_SIZE_MEDIUM\n        );\n        $actions .= '</a>';\n\n        echo Display::toolbarAction('toolbar', [$actions]);\n        echo Display::grid_html($this->type.'_fields');\n    }\n\n    /**\n     * @return array\n     */\n    public function getJqgridColumnNames()\n    {\n        return [\n            get_lang('Name'),\n            get_lang('Field label'),\n            get_lang('Type'),\n            get_lang('Can change'),\n            get_lang('Visible to self'),\n            get_lang('Visible to others'),\n            get_lang('Filter'),\n            get_lang('Order'),\n            get_lang('Detail'),\n        ];\n    }\n\n    /**\n     * @return array\n     */\n    public function getJqgridColumnModel()\n    {\n        return [\n            [\n                'name' => 'display_text',\n                'index' => 'display_text',\n                'width' => '140',\n                'align' => 'left',\n            ],\n            [\n                'name' => 'variable',\n                'index' => 'variable',\n                'width' => '90',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'field_type',\n                'index' => 'field_type',\n                'width' => '70',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'changeable',\n                'index' => 'changeable',\n                'width' => '35',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'visible_to_self',\n                'index' => 'visible_to_self',\n                'width' => '45',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'visible_to_others',\n                'index' => 'visible_to_others',\n                'width' => '35',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'filter',\n                'index' => 'filter',\n                'width' => '30',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'field_order',\n                'index' => 'field_order',\n                'width' => '25',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'actions',\n                'index' => 'actions',\n                'width' => '40',\n                'align' => 'left',\n                'formatter' => 'action_formatter',\n                'sortable' => 'false',\n            ],\n        ];\n    }\n\n    /**\n     * @param string $url\n     * @param string $action\n     *\n     * @return FormValidator\n     */\n    public function return_form($url, $action)\n    {\n        $form = new FormValidator($this->type.'_field', 'post', $url);\n\n        $form->addElement('hidden', 'type', $this->type);\n        $id = isset($_GET['id']) ? (int) $_GET['id'] : null;\n        $form->addElement('hidden', 'id', $id);\n\n        // Setting the form elements\n        $header = get_lang('Add');\n        $defaults = [];\n\n        if ('edit' === $action) {\n            $header = get_lang('Edit');\n            // Setting the defaults\n            $defaults = $this->get($id, false);\n        }\n\n        $form->addElement('header', $header);\n\n        if ('edit' === $action) {\n            $translateUrl = api_get_path(WEB_CODE_PATH).'extrafield/translate.php?'\n                .http_build_query(['extra_field' => $id]);\n            $translateButton = Display::toolbarButton(get_lang('Translate this term'), $translateUrl, 'language', 'link');\n\n            $form->addText(\n                'display_text',\n                [get_lang('Name'), $translateButton]\n            );\n        } else {\n            $form->addElement('text', 'display_text', get_lang('Name'));\n        }\n\n        $form->addHtmlEditor('description', get_lang('Description'), false);\n\n        // Field type\n        $types = self::get_field_types();\n\n        $form->addElement(\n            'select',\n            'field_type',\n            get_lang('Field type'),\n            $types,\n            ['id' => 'field_type']\n        );\n        $form->addElement('label', get_lang('Example'), '<div id=\"example\">-</div>');\n        $form->addElement('text', 'variable', get_lang('Field label'), ['class' => 'span5']);\n        $form->addElement(\n            'text',\n            'field_options',\n            get_lang('Possible values'),\n            ['id' => 'field_options', 'class' => 'span6']\n        );\n\n        $fieldWithOptions = [\n            self::FIELD_TYPE_RADIO,\n            self::FIELD_TYPE_SELECT_MULTIPLE,\n            self::FIELD_TYPE_SELECT,\n            self::FIELD_TYPE_TAG,\n            self::FIELD_TYPE_DOUBLE_SELECT,\n            self::FIELD_TYPE_SELECT_WITH_TEXT_FIELD,\n            self::FIELD_TYPE_TRIPLE_SELECT,\n        ];\n\n        if ('edit' == $action) {\n            if (in_array($defaults['field_type'], $fieldWithOptions)) {\n                $url = Display::url(\n                    get_lang('Edit extra field options'),\n                    'extra_field_options.php?type='.$this->type.'&field_id='.$id\n                );\n                $form->addElement('label', null, $url);\n\n                if (self::FIELD_TYPE_SELECT == $defaults['field_type']) {\n                    $urlWorkFlow = Display::url(\n                        get_lang('Edit this field\\'s workflow'),\n                        'extra_field_workflow.php?type='.$this->type.'&field_id='.$id\n                    );\n                    $form->addElement('label', null, $urlWorkFlow);\n                }\n\n                $form->freeze('field_options');\n            }\n        }\n        $form->addElement(\n            'text',\n            'default_value',\n            get_lang('Default value'),\n            ['id' => 'default_value']\n        );\n\n        $group = [];\n        $group[] = $form->createElement('radio', 'visible_to_self', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'visible_to_self', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('Visible to self'), null, false);\n\n        $group = [];\n        $group[] = $form->createElement('radio', 'visible_to_others', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'visible_to_others', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('Visible to others'), null, false);\n\n        $group = [];\n        $group[] = $form->createElement('radio', 'changeable', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'changeable', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('Can change'), null, false);\n\n        $group = [];\n        $group[] = $form->createElement('radio', 'filter', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'filter', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('Filter'), null, false);\n\n        /* Enable this when field_loggeable is introduced as a table field (2.0)\n        $group   = array();\n        $group[] = $form->createElement('radio', 'field_loggeable', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'field_loggeable', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('Field changes should be logged'), '', false);\n        */\n\n        $form->addElement('text', 'field_order', get_lang('Order'));\n\n        if ('edit' == $action) {\n            $option = new ExtraFieldOption($this->type);\n            $defaults['field_options'] = $option->get_field_options_by_field_to_string($id);\n            $form->addButtonUpdate(get_lang('Edit'));\n        } else {\n            $defaults['visible_to_self'] = 0;\n            $defaults['visible_to_others'] = 0;\n            $defaults['changeable'] = 0;\n            $defaults['filter'] = 0;\n            $form->addButtonCreate(get_lang('Add'));\n        }\n\n        /*if (!empty($defaults['created_at'])) {\n            $defaults['created_at'] = api_convert_and_format_date($defaults['created_at']);\n        }\n        if (!empty($defaults['updated_at'])) {\n            $defaults['updated_at'] = api_convert_and_format_date($defaults['updated_at']);\n        }*/\n        $form->setDefaults($defaults);\n\n        // Setting the rules\n        $form->addRule('display_text', get_lang('Required field'), 'required');\n        $form->addRule('field_type', get_lang('Required field'), 'required');\n\n        return $form;\n    }\n\n    /**\n     * Gets an element.\n     *\n     * @param int  $id\n     * @param bool $translateDisplayText Optional\n     *\n     * @return array\n     */\n    public function get($id, $translateDisplayText = true)\n    {\n        $info = parent::get($id);\n\n        if ($translateDisplayText) {\n            $info['display_text'] = self::translateDisplayName($info['variable'], $info['display_text']);\n        }\n\n        return $info;\n    }\n\n    /**\n     * @param $token\n     *\n     * @return string\n     */\n    public function getJqgridActionLinks($token)\n    {\n        //With this function we can add actions to the jgrid (edit, delete, etc)\n        $editIcon = Display::return_icon('edit.png', get_lang('Edit'), '', ICON_SIZE_SMALL);\n        $deleteIcon = Display::return_icon('delete.png', get_lang('Delete'), '', ICON_SIZE_SMALL);\n        $confirmMessage = addslashes(\n            api_htmlentities(get_lang(\"Please confirm your choice\"), ENT_QUOTES)\n        );\n\n        $editButton = <<<JAVASCRIPT\n            <a href=\"?action=edit&type={$this->type}&id=' + options.rowId + '\" class=\"btn btn-link btn-xs\">\\\n                $editIcon\\\n            </a>\nJAVASCRIPT;\n        $deleteButton = <<<JAVASCRIPT\n            <a \\\n                    onclick=\"if (!confirm(\\'$confirmMessage\\')) {return false;}\" \\\n                href=\"?sec_token=$token&type={$this->type}&id=' + options.rowId + '&action=delete\" \\\n                class=\"btn btn-link btn-xs\">\\\n                $deleteIcon\\\n            </a>\nJAVASCRIPT;\n\n        return \"function action_formatter(cellvalue, options, rowObject) {\n            return '$editButton $deleteButton';\n        }\";\n    }\n\n    /**\n     * @param array $columns\n     * @param array $column_model\n     * @param array $extraFields\n     *\n     * @return array\n     */\n    public function getRules(&$columns, &$column_model, $extraFields = [], $checkExtraFieldExistence = false)\n    {\n        $fields = $this->get_all(\n            [\n                'visible_to_self = ? AND filter = ?' => [1, 1],\n            ],\n            'display_text'\n        );\n        $extraFieldOption = new ExtraFieldOption($this->type);\n\n        $rules = [];\n        if (!empty($fields)) {\n            foreach ($fields as $field) {\n                $search_options = [];\n                $type = 'text';\n                if (in_array($field['field_type'], [self::FIELD_TYPE_SELECT, self::FIELD_TYPE_DOUBLE_SELECT])) {\n                    $type = 'select';\n                    $search_options['sopt'] = ['eq', 'ne']; //equal not equal\n                } else {\n                    $search_options['sopt'] = ['cn', 'nc']; //contains not contains\n                }\n\n                $search_options['searchhidden'] = 'true';\n                $search_options['defaultValue'] = isset($search_options['field_default_value'])\n                    ? $search_options['field_default_value']\n                    : null;\n\n                if (self::FIELD_TYPE_DOUBLE_SELECT == $field['field_type']) {\n                    // Add 2 selects\n                    $options = $extraFieldOption->get_field_options_by_field($field['id']);\n                    $options = self::extra_field_double_select_convert_array_to_ordered_array($options);\n\n                    $first_options = [];\n                    if (!empty($options)) {\n                        foreach ($options as $option) {\n                            foreach ($option as $sub_option) {\n                                if (0 == $sub_option['option_value']) {\n                                    $first_options[] = $sub_option['field_id'].'#'.$sub_option['id'].':'\n                                        .$sub_option['display_text'];\n                                }\n                            }\n                        }\n                    }\n\n                    $search_options['value'] = implode(';', $first_options);\n                    $search_options['dataInit'] = 'fill_second_select';\n\n                    // First\n                    $column_model[] = [\n                        'name' => 'extra_'.$field['variable'],\n                        'index' => 'extra_'.$field['variable'],\n                        'width' => '100',\n                        'hidden' => 'true',\n                        'search' => 'true',\n                        'stype' => 'select',\n                        'searchoptions' => $search_options,\n                    ];\n                    $columns[] = $field['display_text'].' (1)';\n                    $rules[] = [\n                        'field' => 'extra_'.$field['variable'],\n                        'op' => 'cn',\n                    ];\n\n                    // Second\n                    $search_options['value'] = $field['id'].':';\n                    $search_options['dataInit'] = 'register_second_select';\n\n                    $column_model[] = [\n                        'name' => 'extra_'.$field['variable'].'_second',\n                        'index' => 'extra_'.$field['variable'].'_second',\n                        'width' => '100',\n                        'hidden' => 'true',\n                        'search' => 'true',\n                        'stype' => 'select',\n                        'searchoptions' => $search_options,\n                    ];\n                    $columns[] = $field['display_text'].' (2)';\n                    $rules[] = ['field' => 'extra_'.$field['variable'].'_second', 'op' => 'cn'];\n                    continue;\n                } else {\n                    $search_options['value'] = $extraFieldOption->getFieldOptionsToString(\n                        $field['id'],\n                        false,\n                        'display_text'\n                    );\n                }\n                $column_model[] = [\n                    'name' => 'extra_'.$field['variable'],\n                    'index' => 'extra_'.$field['variable'],\n                    'width' => '100',\n                    'hidden' => 'true',\n                    'search' => 'true',\n                    'stype' => $type,\n                    'searchoptions' => $search_options,\n                ];\n                $columns[] = $field['display_text'];\n                $rules[] = [\n                    'field' => 'extra_'.$field['variable'],\n                    'op' => 'cn',\n                    'data' => '',\n                ];\n            }\n        }\n\n        return $rules;\n    }\n\n    public function processExtraFieldSearch($values, $form, $alias, $condition = 'OR')\n    {\n        // Parse params.\n        $fields = [];\n        foreach ($values as $key => $value) {\n            if ('extra_' !== substr($key, 0, 6) &&\n                '_extra_' !== substr($key, 0, 7)\n            ) {\n                continue;\n            }\n            if (!empty($value)) {\n                $fields[$key] = $value;\n            }\n        }\n\n        $extraFieldsAll = $this->get_all(['visible_to_self = ? AND filter = ?' => [1, 1]], 'option_order');\n        $extraFieldsType = array_column($extraFieldsAll, 'field_type', 'variable');\n        $extraFields = array_column($extraFieldsAll, 'variable');\n        $filter = new stdClass();\n        $defaults = [];\n        foreach ($fields as $variable => $col) {\n            $variableNoExtra = str_replace('extra_', '', $variable);\n            if (isset($values[$variable]) && !empty($values[$variable]) &&\n                in_array($variableNoExtra, $extraFields)\n            ) {\n                $rule = new stdClass();\n                $rule->field = $variable;\n                $rule->op = 'in';\n                $data = $col;\n                if (is_array($data) && array_key_exists($variable, $data)) {\n                    $data = $col;\n                }\n                $rule->data = $data;\n                $filter->rules[] = $rule;\n                $filter->groupOp = 'AND';\n\n                if (ExtraField::FIELD_TYPE_TAG == $extraFieldsType[$variableNoExtra]) {\n                    $tagElement = $form->getElement($variable);\n                    $tags = [];\n                    foreach ($values[$variable] as $tag) {\n                        $tag = Security::remove_XSS($tag);\n                        $tags[] = $tag;\n                        $tagElement->addOption(\n                            $tag,\n                            $tag\n                        );\n                    }\n                    $defaults[$variable] = $tags;\n                } else {\n                    if (is_array($data)) {\n                        $defaults[$variable] = array_map(['Security', 'remove_XSS'], $data);\n                    } else {\n                        $defaults[$variable] = Security::remove_XSS($data);\n                    }\n                }\n            }\n        }\n\n        $result = $this->getExtraFieldRules($filter, 'extra_', $condition);\n        $conditionArray = $result['condition_array'];\n\n        $whereCondition = '';\n        $extraCondition = '';\n        if (!empty($conditionArray)) {\n            $extraCondition = ' ( ';\n            $extraCondition .= implode(' AND ', $conditionArray);\n            $extraCondition .= ' ) ';\n        }\n        $whereCondition .= $extraCondition;\n        $conditions = $this->parseConditions(\n            [\n                'where' => $whereCondition,\n                'extra' => $result['extra_fields'],\n            ],\n            $alias\n        );\n\n        return ['condition' => $conditions, 'fields' => $fields, 'defaults' => $defaults];\n    }\n\n    /**\n     * @param $filters\n     * @param string $stringToSearch\n     *\n     * @return array\n     */\n    public function getExtraFieldRules($filters, $stringToSearch = 'extra_', $condition = 'OR')\n    {\n        $extraFields = [];\n        $conditionArray = [];\n\n        // Getting double select if exists\n        $double_select = [];\n        if (is_object($filters) &&\n            property_exists($filters, 'rules') &&\n            is_array($filters->rules) &&\n            !empty($filters->rules)\n        ) {\n            foreach ($filters->rules as $rule) {\n                if (empty($rule)) {\n                    continue;\n                }\n                if (false === strpos($rule->field, '_second')) {\n                } else {\n                    $my_field = str_replace('_second', '', $rule->field);\n                    $double_select[$my_field] = $rule->data;\n                }\n            }\n\n            foreach ($filters->rules as $rule) {\n                if (empty($rule)) {\n                    continue;\n                }\n                if (false === strpos($rule->field, $stringToSearch)) {\n                    // normal fields\n                    $field = $rule->field;\n                    if (isset($rule->data) && is_string($rule->data) && -1 != $rule->data) {\n                        $conditionArray[] = $this->get_where_clause($field, $rule->op, $rule->data);\n                    }\n                } else {\n                    // Extra fields\n                    if (false === strpos($rule->field, '_second')) {\n                        //No _second\n                        $original_field = str_replace($stringToSearch, '', $rule->field);\n                        $field_option = $this->get_handler_field_info_by_field_variable($original_field);\n\n                        switch ($field_option['field_type']) {\n                            case self::FIELD_TYPE_DOUBLE_SELECT:\n                            if (isset($double_select[$rule->field])) {\n                                $data = explode('#', $rule->data);\n                                $rule->data = $data[1].'::'.$double_select[$rule->field];\n                            } else {\n                                // only was sent 1 select\n                                if (is_string($rule->data)) {\n                                    $data = explode('#', $rule->data);\n                                    $rule->data = $data[1];\n                                }\n                            }\n\n                            if (!isset($rule->data)) {\n                                $conditionArray[] = ' ('\n                                .$this->get_where_clause($rule->field, $rule->op, $rule->data)\n                                .') ';\n                                $extraFields[] = ['field' => $rule->field, 'id' => $field_option['id']];\n                            }\n                                break;\n                            case self::FIELD_TYPE_TAG:\n                            if (isset($rule->data)) {\n                                if (is_int($rule->data) && -1 == $rule->data) {\n                                    break;\n                                }\n\n                                //$where = $this->get_where_clause($rule->field, $rule->op, $rule->data, 'OR');\n                                //$conditionArray[] = \" ( $where ) \";\n                                $extraFields[] = [\n                                'field' => $rule->field,\n                                'id' => $field_option['id'],\n                                'data' => $rule->data,\n                            ];\n                            }\n                                break;\n                            default:\n                                if (isset($rule->data)) {\n                                    if (is_int($rule->data) && -1 == $rule->data) {\n                                        break;\n                                    }\n                                    $where = $this->get_where_clause($rule->field, $rule->op, $rule->data, 'OR');\n                                    $conditionArray[] = \" ( $where ) \";\n                                    $extraFields[] = [\n                                        'field' => $rule->field,\n                                        'id' => $field_option['id'],\n                                        'data' => $rule->data,\n                                    ];\n                                }\n                                break;\n                        }\n                    } else {\n                        $my_field = str_replace('_second', '', $rule->field);\n                        $original_field = str_replace($stringToSearch, '', $my_field);\n                        $field_option = $this->get_handler_field_info_by_field_variable($original_field);\n                        $extraFields[] = [\n                        'field' => $rule->field,\n                        'id' => $field_option['id'],\n                    ];\n                    }\n                }\n            }\n        }\n\n        return ['extra_fields' => $extraFields, 'condition_array' => $conditionArray];\n    }\n\n    /**\n     * @param $col\n     * @param $oper\n     * @param $val\n     * @param $conditionBetweenOptions\n     *\n     * @return string\n     */\n    public function get_where_clause($col, $oper, $val, $conditionBetweenOptions = 'OR')\n    {\n        if (empty($col)) {\n            return '';\n        }\n        $conditionBetweenOptions = in_array($conditionBetweenOptions, ['OR', 'AND']) ? $conditionBetweenOptions : 'OR';\n        if ('bw' === $oper || 'bn' === $oper) {\n            $val .= '%';\n        }\n        if ('ew' === $oper || 'en' === $oper) {\n            $val = '%'.$val;\n        }\n        if ('cn' === $oper || 'nc' === $oper || 'in' === $oper || 'ni' === $oper) {\n            if (is_array($val)) {\n                $result = '\"%'.implode(';', $val).'%\"';\n                foreach ($val as $item) {\n                    $item = trim($item);\n                    $result .= ' '.$conditionBetweenOptions.' '.$col.' LIKE \"%'.$item.'%\"';\n                }\n                $val = $result;\n\n                return \" $col {$this->ops[$oper]} $val \";\n            } else {\n                if (is_string($val)) {\n                    $val = '%'.$val.'%';\n                } else {\n                    $val = '';\n                }\n            }\n        }\n        $val = \\Database::escape_string($val);\n\n        return \" $col {$this->ops[$oper]} '$val' \";\n    }\n\n    /**\n     * @param array  $options\n     * @param string $alias\n     *\n     * @return array\n     */\n    public function parseConditions($options, $alias = 's')\n    {\n        $inject_extra_fields = null;\n        $extraFieldOption = new ExtraFieldOption($this->type);\n        $double_fields = [];\n\n        if (isset($options['extra'])) {\n            $extra_fields = $options['extra'];\n            if (!empty($extra_fields)) {\n                $counter = 1;\n                $extra_field_obj = new ExtraField($this->type);\n                foreach ($extra_fields as &$extra) {\n                    if (!isset($extra['id'])) {\n                        continue;\n                    }\n                    $extra_field_info = $extra_field_obj->get($extra['id']);\n                    if (empty($extra_field_info)) {\n                        continue;\n                    }\n                    $extra['extra_field_info'] = $extra_field_info;\n\n                    switch ($extra_field_info['field_type']) {\n                        case self::FIELD_TYPE_SELECT:\n                        case self::FIELD_TYPE_DOUBLE_SELECT:\n                            $inject_extra_fields .= \" fvo$counter.display_text as {$extra['field']}, \";\n                            break;\n                        case self::FIELD_TYPE_TAG:\n                            //$inject_extra_fields .= \" tag$counter.tag as {$extra['field']}, \";\n                            // If using AND\n                            $newCounter = 1;\n                            $fields = [];\n                            $tagAlias = $extra['field'];\n                            foreach ($extra['data'] as $data) {\n                                $fields[] = \"tag$counter$newCounter.tag\";\n                                $newCounter++;\n                            }\n\n                            if (!empty($fields)) {\n                                $tags = implode(' , \" \", ', $fields);\n                                $inject_extra_fields .= \" CONCAT($tags) as $tagAlias, \";\n                            }\n                            break;\n                        default:\n                            $inject_extra_fields .= \" fv$counter.value as {$extra['field']}, \";\n                            break;\n                    }\n\n                    if (isset($extra_fields_info[$extra['id']])) {\n                        $info = $extra_fields_info[$extra['id']];\n                    } else {\n                        $info = $this->get($extra['id']);\n                        $extra_fields_info[$extra['id']] = $info;\n                    }\n                    if (isset($info['field_type']) && self::FIELD_TYPE_DOUBLE_SELECT == $info['field_type']) {\n                        $double_fields[$info['id']] = $info;\n                    }\n                    $counter++;\n                }\n            }\n        }\n\n        $options_by_double = [];\n        foreach ($double_fields as $double) {\n            $my_options = $extraFieldOption->get_field_options_by_field($double['id'], true);\n            $options_by_double['extra_'.$double['variable']] = $my_options;\n        }\n\n        $field_value_to_join = [];\n        //filter can be all/any = and/or\n        $inject_joins = null;\n        $inject_where = null;\n        $where = null;\n\n        // Removing double 1=1\n        if (!empty($options['extra']) && !empty($extra_fields)) {\n            // Removing double 1=1\n            if (empty($options['where'])) {\n                $options['where'] = ' 1 = 1 ';\n            }\n            $options['where'] = str_replace(' 1 = 1  AND', '', $options['where']);\n            // Always OR\n            $counter = 1;\n            foreach ($extra_fields as $extra_info) {\n                $extra_field_info = $extra_info['extra_field_info'];\n                $inject_joins .= \" INNER JOIN $this->table_field_values fv$counter\n                                       ON ($alias.\".$this->primaryKey.\" = fv$counter.\".$this->handler_id.') ';\n                // Add options\n                switch ($extra_field_info['field_type']) {\n                        case self::FIELD_TYPE_SELECT:\n                        case self::FIELD_TYPE_DOUBLE_SELECT:\n                            $options['where'] = str_replace(\n                                $extra_info['field'],\n                                'fv'.$counter.'.field_id = '.$extra_info['id'].' AND fvo'.$counter.'.option_value',\n                                $options['where']\n                            );\n                            $inject_joins .= \"\n                                 INNER JOIN $this->table_field_options fvo$counter\n                                 ON (\n                                    fv$counter.field_id = fvo$counter.field_id AND\n                                    fv$counter.value = fvo$counter.option_value\n                                 )\n                                \";\n                            break;\n                        case self::FIELD_TYPE_TAG:\n                            $newCounter = 1;\n                            if (isset($extra_info['data']) && !empty($extra_info['data'])) {\n                                $whereTag = [];\n                                foreach ($extra_info['data'] as $data) {\n                                    $data = Database::escape_string($data);\n                                    $key = $counter.$newCounter;\n                                    $whereTag[] = ' tag'.$key.'.tag LIKE \"%'.$data.'%\" ';\n                                    $inject_joins .= \"\n                                        INNER JOIN $this->table_field_rel_tag tag_rel$key\n                                        ON (\n                                            tag_rel$key.field_id = \".$extra_info['id'].\" AND\n                                            tag_rel$key.item_id = $alias.\".$this->primaryKey.\"\n                                        )\n                                        INNER JOIN $this->table_field_tag tag$key\n                                        ON (tag$key.id = tag_rel$key.tag_id)\n                                    \";\n                                    $newCounter++;\n                                }\n                                if (!empty($whereTag)) {\n                                    $options['where'] .= ' AND  ('.implode(' AND ', $whereTag).') ';\n                                }\n                            }\n                            break;\n                        default:\n                            // text, textarea, etc\n                            $options['where'] = str_replace(\n                                $extra_info['field'],\n                                'fv'.$counter.'.field_id = '.$extra_info['id'].' AND fv'.$counter.'.value',\n                                $options['where']\n                            );\n                            break;\n                    }\n                $field_value_to_join[] = \" fv$counter.$this->handler_id \";\n                $counter++;\n            }\n        }\n\n        if (!empty($options['where'])) {\n            $where .= ' AND '.$options['where'];\n        }\n\n        $order = '';\n        if (!empty($options['order'])) {\n            $order = ' ORDER BY '.$options['order'];\n        }\n        $limit = '';\n        if (!empty($options['limit'])) {\n            $limit = ' LIMIT '.$options['limit'];\n        }\n\n        return [\n            'order' => $order,\n            'limit' => $limit,\n            'where' => $where,\n            'inject_where' => $inject_where,\n            'inject_joins' => $inject_joins,\n            'field_value_to_join' => $field_value_to_join,\n            'inject_extra_fields' => $inject_extra_fields,\n        ];\n    }\n\n    /**\n     * Get the extra fields and their formatted values.\n     *\n     * @param int|string $itemId   The item ID (It could be a session_id, course_id or user_id)\n     * @param bool       $filter\n     * @param array      $onlyShow (list of extra fields variables to show)\n     *\n     * @return array The extra fields data\n     */\n    public function getDataAndFormattedValues($itemId, $filter = false, $onlyShow = [])\n    {\n        $valuesData = [];\n        $fields = $this->get_all();\n        $em = Database::getManager();\n        $repoTag = $em->getRepository(ExtraFieldRelTag::class);\n\n        foreach ($fields as $field) {\n            if ('1' != $field['visible_to_self']) {\n                continue;\n            }\n\n            if ($filter && 1 != $field['filter']) {\n                continue;\n            }\n\n            if (!empty($onlyShow) && !in_array($field['variable'], $onlyShow)) {\n                continue;\n            }\n\n            $valueAsArray = [];\n            $fieldValue = new ExtraFieldValue($this->type);\n            $valueData = $fieldValue->get_values_by_handler_and_field_id(\n                $itemId,\n                $field['id'],\n                true\n            );\n\n            $fieldType = (int) $field['field_type'];\n            if (self::FIELD_TYPE_TAG === $fieldType) {\n                $tags = $repoTag->findBy(['field' => $field['id'], 'itemId' => $itemId]);\n                if ($tags) {\n                    $data = [];\n                    /** @var ExtraFieldRelTag $tag */\n                    foreach ($tags as $extraFieldTag) {\n                        $tag = $extraFieldTag->getTag();\n                        $data[] = $tag->getTag();\n                    }\n                    $valueData = implode(',', $data);\n                    $valueAsArray = $data;\n                }\n            }\n\n            if (!$valueData) {\n                continue;\n            }\n            $displayedValue = get_lang('None');\n            switch ($fieldType) {\n                case self::FIELD_TYPE_CHECKBOX:\n                    if (false !== $valueData && '1' == $valueData['value']) {\n                        $displayedValue = get_lang('Yes');\n                    } else {\n                        $displayedValue = get_lang('No');\n                    }\n                    break;\n                case self::FIELD_TYPE_DATE:\n                    if (false !== $valueData && !empty($valueData['value'])) {\n                        $displayedValue = api_format_date($valueData['value'], DATE_FORMAT_LONG_NO_DAY);\n                    }\n                    break;\n                case self::FIELD_TYPE_TAG:\n                    if (!empty($valueData)) {\n                        $displayedValue = $valueData;\n                    }\n                    break;\n                case self::FIELD_TYPE_FILE:\n                case self::FIELD_TYPE_FILE_IMAGE:\n                    if (false === $valueData || empty($valueData['value'])) {\n                        break;\n                    }\n                    $assetId = $valueData['value'];\n                    $assetRepo = Container::getAssetRepository();\n                    $asset = $assetRepo->find($assetId);\n\n                    if (null === $asset) {\n                        break;\n                    }\n\n                    $url = $assetRepo->getAssetUrl($asset);\n                    if (self::FIELD_TYPE_FILE_IMAGE === $fieldType) {\n                        $image = Display::img(\n                            $url,\n                            $field['display_text'],\n                            ['width' => '300']\n                        );\n                        $displayedValue = Display::url(\n                            $image,\n                            $url,\n                            ['target' => '_blank']\n                        );\n                    } else {\n                        $displayedValue = Display::url(\n                            get_lang('Download'),\n                            $url,\n                            [\n                                'title' => $field['display_text'],\n                                'target' => '_blank',\n                                'class' => 'download_extra_field',\n                            ]\n                        );\n                    }\n                    break;\n                default:\n                    $displayedValue = $valueData['value'];\n                    break;\n            }\n\n            $valuesData[] = [\n                'variable' => $field['variable'],\n                'text' => $field['display_text'],\n                'value' => $displayedValue,\n                'value_as_array' => $valueAsArray,\n            ];\n        }\n\n        return $valuesData;\n    }\n\n    /**\n     * @param int    $fieldId\n     * @param string $tag\n     *\n     * @return array\n     */\n    public function getAllUserPerTag($fieldId, $tag)\n    {\n        $tagRelUserTable = Database::get_main_table(TABLE_MAIN_USER_REL_TAG);\n        $tag = Database::escape_string($tag);\n        $fieldId = (int) $fieldId;\n\n        $sql = \"SELECT user_id\n                FROM {$this->table_field_tag} f INNER JOIN $tagRelUserTable ft\n                ON tag_id = f.id\n                WHERE tag = '$tag' AND f.field_id = $fieldId;\n        \";\n\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * @param int $fieldId\n     * @param int $tagId\n     *\n     * @return array\n     */\n    public function getAllSkillPerTag($fieldId, $tagId)\n    {\n        $skillTable = Database::get_main_table(TABLE_MAIN_SKILL);\n        $tagRelExtraTable = Database::get_main_table(TABLE_MAIN_EXTRA_FIELD_REL_TAG);\n        $fieldId = (int) $fieldId;\n        $tagId = (int) $tagId;\n\n        $sql = \"SELECT s.id\n                FROM $skillTable s INNER JOIN $tagRelExtraTable t\n                ON t.item_id = s.id\n                WHERE tag_id = $tagId AND t.field_id = $fieldId;\n        \";\n\n        $result = Database::query($sql);\n        $result = Database::store_result($result, 'ASSOC');\n\n        $skillList = [];\n        foreach ($result as $index => $value) {\n            $skillList[$value['id']] = $value['id'];\n        }\n\n        return $skillList;\n    }\n\n    /**\n     * @param string $from\n     * @param string $search\n     * @param array  $options\n     *\n     * @return array\n     */\n    public function searchOptionsFromTags($from, $search, $options)\n    {\n        $extraFieldInfo = $this->get_handler_field_info_by_field_variable(\n            str_replace('extra_', '', $from)\n        );\n        $extraFieldInfoTag = $this->get_handler_field_info_by_field_variable(\n            str_replace('extra_', '', $search)\n        );\n\n        if (empty($extraFieldInfo) || empty($extraFieldInfoTag)) {\n            return [];\n        }\n\n        $id = $extraFieldInfo['id'];\n        $tagId = $extraFieldInfoTag['id'];\n\n        $table = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $tagRelExtraTable = Database::get_main_table(TABLE_MAIN_EXTRA_FIELD_REL_TAG);\n        $tagTable = Database::get_main_table(TABLE_MAIN_TAG);\n        $optionsTable = Database::get_main_table(TABLE_EXTRA_FIELD_OPTIONS);\n        $value = Database::escape_string(implode(\"','\", $options));\n\n        $sql = \"SELECT DISTINCT t.*, v.value, o.display_text\n                FROM $tagRelExtraTable te\n                INNER JOIN $tagTable t\n                ON (t.id = te.tag_id AND te.field_id = t.field_id AND te.field_id = $tagId)\n                INNER JOIN $table v\n                ON (te.item_id = v.item_id AND v.field_id = $id)\n                INNER JOIN $optionsTable o\n                ON (o.option_value = v.value)\n                WHERE v.value IN ('\".$value.\"')\n                ORDER BY o.option_order, t.tag\n               \";\n\n        $result = Database::query($sql);\n        $result = Database::store_result($result);\n\n        return $result;\n    }\n\n    public static function getExtraFieldTypesWithFiles(): array\n    {\n        return [self::FIELD_TYPE_FILE_IMAGE, self::FIELD_TYPE_FILE];\n    }\n\n    /**\n     * @param \\FormValidator $form\n     * @param int            $defaultValueId\n     * @param bool           $freezeElement\n     */\n    private function addSelectElement(FormValidator $form, array $fieldDetails, $defaultValueId, $freezeElement = false)\n    {\n        $get_lang_variables = false;\n        if (in_array(\n            $fieldDetails['variable'],\n            ['mail_notify_message', 'mail_notify_invitation', 'mail_notify_group_message']\n        )) {\n            $get_lang_variables = true;\n        }\n\n        // Get extra field workflow\n        $addOptions = [];\n        $optionsExists = false;\n        $options = [];\n\n        $optionList = [];\n        if (!empty($fieldDetails['options'])) {\n            foreach ($fieldDetails['options'] as $option_details) {\n                $optionList[$option_details['id']] = $option_details;\n                if ($get_lang_variables) {\n                    $options[$option_details['option_value']] = $option_details['display_text'];\n                } else {\n                    if ($optionsExists) {\n                        // Adding always the default value\n                        if ($option_details['id'] == $defaultValueId) {\n                            $options[$option_details['option_value']] = $option_details['display_text'];\n                        } else {\n                            if (isset($addOptions) && !empty($addOptions)) {\n                                // Parsing filters\n                                if (in_array($option_details['id'], $addOptions)) {\n                                    $options[$option_details['option_value']] = $option_details['display_text'];\n                                }\n                            }\n                        }\n                    } else {\n                        // Normal behaviour\n                        $options[$option_details['option_value']] = $option_details['display_text'];\n                    }\n                }\n            }\n\n            // Setting priority message\n            if (isset($optionList[$defaultValueId])\n                && isset($optionList[$defaultValueId]['priority'])\n            ) {\n                if (!empty($optionList[$defaultValueId]['priority'])) {\n                    $priorityId = $optionList[$defaultValueId]['priority'];\n                    $option = new ExtraFieldOption($this->type);\n                    $messageType = $option->getPriorityMessageType($priorityId);\n                    $form->addElement(\n                        'label',\n                        null,\n                        Display::return_message(\n                            $optionList[$defaultValueId]['priority_message'],\n                            $messageType\n                        )\n                    );\n                }\n            }\n        }\n\n        /** @var \\HTML_QuickForm_select $slct */\n        $slct = $form->addElement(\n            'select',\n            'extra_'.$fieldDetails['variable'],\n            $fieldDetails['display_text'],\n            [],\n            ['id' => 'extra_'.$fieldDetails['variable']]\n        );\n\n        if (empty($defaultValueId)) {\n            $slct->addOption(get_lang('Please select an option'), '');\n        }\n\n        foreach ($options as $value => $text) {\n            if (empty($value)) {\n                $slct->addOption($text, $value);\n                continue;\n            }\n\n            $valueParts = explode('#', $text);\n            $dataValue = count($valueParts) > 1 ? array_shift($valueParts) : '';\n\n            $slct->addOption(implode('', $valueParts), $value, ['data-value' => $dataValue]);\n        }\n\n        if ($freezeElement) {\n            $form->freeze('extra_'.$fieldDetails['variable']);\n        }\n    }\n\n    /**\n     * @param \\FormValidator $form\n     * @param array          $fieldDetails\n     * @param array          $extraData\n     * @param bool           $freezeElement\n     *\n     * @return string JavaScript code\n     */\n    private function addDoubleSelectElement(FormValidator $form, $fieldDetails, $extraData, $freezeElement = false)\n    {\n        $firstSelectId = 'first_extra_'.$fieldDetails['variable'];\n        $secondSelectId = 'second_extra_'.$fieldDetails['variable'];\n\n        $jqueryReadyContent = \"\n            $('#$firstSelectId').on('change', function() {\n                var id = $(this).val();\n\n                if (!id) {\n                    $('#$secondSelectId').empty().selectpicker('refresh');\n\n                    return;\n                }\n\n                $.getJSON(_p.web_ajax + 'extra_field.ajax.php?1=1&a=get_second_select_options', {\n                    'type': '{$this->type}',\n                    'field_id': {$fieldDetails['id']},\n                    'option_value_id': id\n                })\n                    .done(function(data) {\n                        $('#$secondSelectId').empty();\n                        $.each(data, function(index, value) {\n                            $('#second_extra_{$fieldDetails['variable']}').append(\n                                $('<option>', {value: index, text: value})\n                            );\n                        });\n                        $('#$secondSelectId').selectpicker('refresh');\n                    });\n            });\n        \";\n\n        $firstId = null;\n        if (!empty($extraData)) {\n            if (isset($extraData['extra_'.$fieldDetails['variable']])) {\n                $firstId = $extraData['extra_'.$fieldDetails['variable']]['extra_'.$fieldDetails['variable']];\n            }\n        }\n\n        $options = $this->extra_field_double_select_convert_array_to_ordered_array($fieldDetails['options']);\n        $values = ['' => get_lang('Select')];\n\n        $second_values = [];\n        if (!empty($options)) {\n            foreach ($options as $option) {\n                foreach ($option as $sub_option) {\n                    if ('0' == $sub_option['option_value']) {\n                        $values[$sub_option['id']] = $sub_option['display_text'];\n\n                        continue;\n                    }\n\n                    if ($firstId === $sub_option['option_value']) {\n                        $second_values[$sub_option['id']] = $sub_option['display_text'];\n                    }\n                }\n            }\n        }\n\n        $form\n            ->defaultRenderer()\n            ->setGroupElementTemplate('<p>{element}</p>', 'extra_'.$fieldDetails['variable']);\n        $group = [];\n        $group[] = $form->createElement(\n            'select',\n            'extra_'.$fieldDetails['variable'],\n            null,\n            $values,\n            ['id' => $firstSelectId]\n        );\n        $group[] = $form->createElement(\n            'select',\n            'extra_'.$fieldDetails['variable'].'_second',\n            null,\n            $second_values,\n            ['id' => $secondSelectId]\n        );\n        $form->addGroup(\n            $group,\n            'extra_'.$fieldDetails['variable'],\n            $fieldDetails['display_text']\n        );\n\n        if ($freezeElement) {\n            $form->freeze('extra_'.$fieldDetails['variable']);\n        }\n\n        return $jqueryReadyContent;\n    }\n\n    /**\n     * @param \\FormValidator $form\n     * @param bool           $freezeElement Optional\n     *\n     * @return string JavaScript code\n     */\n    private function addSelectWithTextFieldElement(\n        FormValidator $form,\n        array $fieldDetails,\n        $freezeElement = false\n    ) {\n        $firstSelectId = 'slct_extra_'.$fieldDetails['variable'];\n        $txtSelectId = 'txt_extra_'.$fieldDetails['variable'];\n\n        $jqueryReadyContent = \"\n            $('#$firstSelectId').on('change', function() {\n                var id = $(this).val();\n\n                if (!id) {\n                    $('#$txtSelectId').val('');\n                }\n            });\n        \";\n\n        $options = $this->extra_field_double_select_convert_array_to_ordered_array($fieldDetails['options']);\n        $values = ['' => get_lang('Select')];\n\n        if (!empty($options)) {\n            foreach ($options as $option) {\n                foreach ($option as $sub_option) {\n                    if ('0' != $sub_option['option_value']) {\n                        continue;\n                    }\n\n                    $values[$sub_option['id']] = $sub_option['display_text'];\n                }\n            }\n        }\n\n        $form\n            ->defaultRenderer()\n            ->setGroupElementTemplate('<p>{element}</p>', 'extra_'.$fieldDetails['variable']);\n        $group = [];\n        $group[] = $form->createElement(\n            'select',\n            'extra_'.$fieldDetails['variable'],\n            null,\n            $values,\n            ['id' => $firstSelectId]\n        );\n        $group[] = $form->createElement(\n            'text',\n            'extra_'.$fieldDetails['variable'].'_second',\n            null,\n            ['id' => $txtSelectId]\n        );\n        $form->addGroup(\n            $group,\n            'extra_'.$fieldDetails['variable'],\n            $fieldDetails['display_text']\n        );\n\n        if ($freezeElement) {\n            $form->freeze('extra_'.$fieldDetails['variable']);\n        }\n\n        return $jqueryReadyContent;\n    }\n\n    /**\n     * @param \\FormValidator $form\n     * @param bool           $freezeElement\n     *\n     * @return string\n     */\n    private function addTripleSelectElement(\n        FormValidator $form,\n        array $fieldDetails,\n        array $extraData,\n        $freezeElement\n    ) {\n        $variable = $fieldDetails['variable'];\n        $id = $fieldDetails['id'];\n        $slctFirstId = \"first_extra$variable\";\n        $slctSecondId = \"second_extra$variable\";\n        $slctThirdId = \"third_extra$variable\";\n        $langSelect = get_lang('Select');\n\n        $js = \"\n            (function () {\n                var slctFirst = $('#$slctFirstId'),\n                    slctSecond = $('#$slctSecondId'),\n                    slctThird = $('#$slctThirdId');\n\n                slctFirst.on('change', function () {\n                    slctSecond.empty().selectpicker('refresh');\n                    slctThird.empty().selectpicker('refresh');\n\n                    var level = $(this).val();\n\n                    if (!level) {\n                        return;\n                    }\n\n                    $.getJSON(_p.web_ajax + 'extra_field.ajax.php', {\n                        'a': 'get_second_select_options',\n                        'type': '$this->type',\n                        'field_id': $id,\n                        'option_value_id': level\n                    })\n                        .done(function (data) {\n                            slctSecond.append(\n                                $('<option>', {value: '', text: '$langSelect'})\n                            );\n\n                            $.each(data, function (index, value) {\n                                var valueParts = value.split('#'),\n                                    dataValue = valueParts.length > 1 ? valueParts.shift() : '';\n\n                                slctSecond.append(\n                                    $('<option>', {value: index, text: valueParts.join(''), 'data-value': dataValue})\n                                );\n                            });\n\n                            slctSecond.selectpicker('refresh');\n                        });\n                });\n                slctSecond.on('change', function () {\n                    slctThird.empty().selectpicker('refresh');\n\n                    var level = $(this).val();\n\n                    if (!level) {\n                        return;\n                    }\n\n                    $.getJSON(_p.web_ajax + 'extra_field.ajax.php', {\n                        'a': 'get_second_select_options',\n                        'type': '$this->type',\n                        'field_id': $id,\n                        'option_value_id': level\n                    })\n                        .done(function (data) {\n                            slctThird.append(\n                                $('<option>', {value: '', text: '$langSelect'})\n                            );\n\n                            $.each(data, function (index, value) {\n                                var valueParts = value.split('#'),\n                                    dataValue = valueParts.length > 1 ? valueParts.shift() : '';\n\n                                slctThird.append(\n                                    $('<option>', {value: index, text: valueParts.join(''), 'data-value': dataValue})\n                                );\n                            });\n\n                            slctThird.selectpicker('refresh');\n                        });\n                });\n            })();\n        \";\n\n        $firstId = isset($extraData[\"extra_$variable\"][\"extra_$variable\"])\n            ? $extraData[\"extra_$variable\"][\"extra_$variable\"]\n            : '';\n        $secondId = isset($extraData[\"extra_$variable\"][\"extra_{$variable}_second\"])\n            ? $extraData[\"extra_$variable\"][\"extra_{$variable}_second\"]\n            : '';\n\n        $options = $this->tripleSelectConvertArrayToOrderedArray($fieldDetails['options']);\n        $values1 = ['' => $langSelect];\n        $values2 = ['' => $langSelect];\n        $values3 = ['' => $langSelect];\n        $level1 = $this->getOptionsFromTripleSelect($options['level1'], 0);\n        $level2 = $this->getOptionsFromTripleSelect($options['level2'], $firstId);\n        $level3 = $this->getOptionsFromTripleSelect($options['level3'], $secondId);\n        /** @var \\HTML_QuickForm_select $slctFirst */\n        $slctFirst = $form->createElement('select', \"extra_$variable\", null, $values1, ['id' => $slctFirstId]);\n        /** @var \\HTML_QuickForm_select $slctSecond */\n        $slctSecond = $form->createElement(\n            'select',\n            \"extra_{$variable}_second\",\n            null,\n            $values2,\n            ['id' => $slctSecondId]\n        );\n        /** @var \\HTML_QuickForm_select $slctThird */\n        $slctThird = $form->createElement('select', \"extra_{$variable}_third\", null, $values3, ['id' => $slctThirdId]);\n\n        foreach ($level1 as $item1) {\n            $valueParts = explode('#', $item1['display_text']);\n            $dataValue = count($valueParts) > 1 ? array_shift($valueParts) : '';\n            $slctFirst->addOption(implode('', $valueParts), $item1['id'], ['data-value' => $dataValue]);\n        }\n\n        foreach ($level2 as $item2) {\n            $valueParts = explode('#', $item2['display_text']);\n            $dataValue = count($valueParts) > 1 ? array_shift($valueParts) : '';\n            $slctSecond->addOption(implode('', $valueParts), $item2['id'], ['data-value' => $dataValue]);\n        }\n\n        foreach ($level3 as $item3) {\n            $valueParts = explode('#', $item3['display_text']);\n            $dataValue = count($valueParts) > 1 ? array_shift($valueParts) : '';\n            $slctThird->addOption(implode('', $valueParts), $item3['id'], ['data-value' => $dataValue]);\n        }\n\n        $form\n            ->defaultRenderer()\n            ->setGroupElementTemplate('<p>{element}</p>', \"extra_$variable\");\n        $form->addGroup([$slctFirst, $slctSecond, $slctThird], \"extra_$variable\", $fieldDetails['display_text']);\n\n        if ($freezeElement) {\n            $form->freeze('extra_'.$fieldDetails['variable']);\n        }\n\n        return $js;\n    }\n\n    /**\n     * @param int $parentId\n     *\n     * @return array\n     */\n    private static function getOptionsFromTripleSelect(array $options, $parentId)\n    {\n        return array_filter(\n            $options,\n            function ($option) use ($parentId) {\n                return $option['option_value'] == $parentId;\n            }\n        );\n    }\n}\n"], "fixing_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CoreBundle\\Framework\\Container;\nuse ChamiloSession as Session;\n\nrequire_once __DIR__.'/../global.inc.php';\n\n// 1. Setting variables needed by jqgrid\n$action = $_GET['a'];\n$page = (int) $_REQUEST['page']; //page\n$limit = (int) $_REQUEST['rows']; //quantity of rows\n\n// Makes max row persistence after refreshing the grid\n$savedRows = Session::read('max_rows_'.$action);\nif (empty($savedRows)) {\n    Session::write('max_rows_'.$action, $limit);\n} else {\n    if ($limit != $savedRows) {\n        Session::write('max_rows_'.$action, $limit);\n    }\n}\n\n$sidx = $_REQUEST['sidx']; //index (field) to filter\n$sord = $_REQUEST['sord']; //asc or desc\n$exportFilename = isset($_REQUEST['export_filename']) ? $_REQUEST['export_filename'] : '';\n\nif (false !== strpos(strtolower($sidx), 'asc')) {\n    $sidx = str_replace(['asc', ','], '', $sidx);\n    $sord = 'asc';\n}\n\nif (false !== strpos(strtolower($sidx), 'desc')) {\n    $sidx = str_replace(['desc', ','], '', $sidx);\n    $sord = 'desc';\n}\n\nif (!in_array($sord, ['asc', 'desc'])) {\n    $sord = 'desc';\n}\n\n// Actions allowed to other roles.\nif (!in_array(\n        $action,\n        [\n            'get_exercise_results',\n            'get_exercise_pending_results',\n            'get_exercise_results_report',\n            'get_work_student_list_overview',\n            'get_work_teacher',\n            'get_work_student',\n            'get_all_work_student',\n            'get_work_user_list',\n            'get_work_user_list_others',\n            'get_work_user_list_all',\n            'get_work_pending_list',\n            'get_timelines',\n            'get_user_skill_ranking',\n            'get_usergroups',\n            'get_usergroups_teacher',\n            'get_user_course_report_resumed',\n            'get_user_course_report',\n            'get_sessions_tracking',\n            'get_sessions',\n            'get_course_announcements',\n            'course_log_events',\n            'get_learning_path_calendars',\n            'get_usergroups_users',\n            'get_calendar_users',\n            'get_exercise_categories',\n        ]\n    ) && !isset($_REQUEST['from_course_session'])) {\n    api_protect_admin_script(true);\n} elseif (isset($_REQUEST['from_course_session']) &&\n    1 == $_REQUEST['from_course_session']\n) {\n    api_protect_teacher_script(true);\n}\n\n$toRemove = ['extra_access_start_date', 'extra_access_end_date'];\n\n// Search features\n\n//@todo move this in the display_class or somewhere else\n/**\n * @param string $col\n * @param string $oper\n * @param string $val\n *\n * @return string\n */\nfunction getWhereClause($col, $oper, $val)\n{\n    $ops = [\n        'eq' => '=', //equal\n        'ne' => '<>', //not equal\n        'lt' => '<', //less than\n        'le' => '<=', //less than or equal\n        'gt' => '>', //greater than\n        'ge' => '>=', //greater than or equal\n        'bw' => 'LIKE', //begins with\n        'bn' => 'NOT LIKE', //doesn't begin with\n        'in' => 'LIKE', //is in\n        'ni' => 'NOT LIKE', //is not in\n        'ew' => 'LIKE', //ends with\n        'en' => 'NOT LIKE', //doesn't end with\n        'cn' => 'LIKE', //contains\n        'nc' => 'NOT LIKE',  //doesn't contain\n    ];\n\n    $col = Database::escapeField($col);\n\n    if (empty($col)) {\n        return '';\n    }\n\n    if ($oper == 'bw' || $oper == 'bn') {\n        $val .= '%';\n    }\n    if ($oper == 'ew' || $oper == 'en') {\n        $val = '%'.$val;\n    }\n    if ($oper == 'cn' || $oper == 'nc' || $oper == 'in' || $oper == 'ni') {\n        $val = '%'.$val.'%';\n    }\n    $val = Database::escape_string($val);\n\n    return \" $col {$ops[$oper]} '$val' \";\n}\n\n// If there is no search request sent by jqgrid, $where should be empty\n$whereCondition = '';\n$operation = isset($_REQUEST['oper']) ? $_REQUEST['oper'] : false;\n$exportFormat = isset($_REQUEST['export_format']) ? $_REQUEST['export_format'] : 'csv';\n$searchField = isset($_REQUEST['searchField']) ? $_REQUEST['searchField'] : false;\n$searchOperator = isset($_REQUEST['searchOper']) ? $_REQUEST['searchOper'] : false;\n$searchString = isset($_REQUEST['searchString']) ? $_REQUEST['searchString'] : false;\n$search = isset($_REQUEST['_search']) ? $_REQUEST['_search'] : false;\n$forceSearch = isset($_REQUEST['_force_search']) ? $_REQUEST['_force_search'] : false;\n$extra_fields = [];\n$accessStartDate = '';\n$accessEndDate = '';\n$overwriteColumnHeaderExport = [];\n\nif (!empty($search)) {\n    $search = 'true';\n}\n\nif (($search || $forceSearch) && ('false' !== $search)) {\n    $whereCondition = ' 1 = 1 ';\n    $whereConditionInForm = getWhereClause(\n        $searchField,\n        $searchOperator,\n        $searchString\n    );\n\n    if (!empty($whereConditionInForm)) {\n        $whereCondition .= ' AND ( ';\n        $whereCondition .= '  ('.$whereConditionInForm.') ';\n    }\n    $filters = isset($_REQUEST['filters']) && !is_array($_REQUEST['filters']) ? json_decode(\n        $_REQUEST['filters']\n    ) : false;\n    if (isset($_REQUEST['filters2'])) {\n        $filters = json_decode($_REQUEST['filters2']);\n    }\n\n    if (!empty($filters)) {\n        if (in_array(\n            $action,\n            [\n                'get_user_course_report_resumed',\n                'get_user_course_report',\n                'get_questions',\n                'get_sessions',\n                'get_sessions_tracking',\n            ]\n        )) {\n            switch ($action) {\n                case 'get_user_course_report_resumed':\n                case 'get_user_course_report':\n                    $type = 'user';\n                    break;\n                case 'get_questions':\n                    $type = 'question';\n                    break;\n                case 'get_sessions':\n                case 'get_sessions_tracking':\n                    $type = 'session';\n                    break;\n            }\n\n            if (!empty($type)) {\n                // Extra field.\n                $extraField = new ExtraField($type);\n\n                if (is_object($filters)\n                    && property_exists($filters, 'rules')\n                    && is_array($filters->rules)\n                    && !empty($filters->rules)\n                ) {\n                    foreach ($filters->rules as $key => $data) {\n                        if (empty($data)) {\n                            continue;\n                        }\n                        if ('extra_access_start_date' === $data->field) {\n                            $accessStartDate = $data->data;\n                        }\n\n                        if ('extra_access_end_date' === $data->field) {\n                            $accessEndDate = $data->data;\n                        }\n\n                        if (in_array($data->field, $toRemove)) {\n                            unset($filters->rules[$key]);\n                        }\n                    }\n                }\n\n                $result = $extraField->getExtraFieldRules($filters, 'extra_');\n\n                $extra_fields = $result['extra_fields'];\n                $condition_array = $result['condition_array'];\n                $extraCondition = '';\n                if (!empty($condition_array)) {\n                    $extraCondition = $filters->groupOp.' ( ';\n                    $extraCondition .= implode($filters->groupOp, $condition_array);\n                    $extraCondition .= ' ) ';\n                }\n                $whereCondition .= $extraCondition;\n\n                // Question field\n                $resultQuestion = $extraField->getExtraFieldRules(\n                    $filters,\n                    'question_'\n                );\n                $questionFields = $resultQuestion['extra_fields'];\n                $condition_array = $resultQuestion['condition_array'];\n\n                $extraQuestionCondition = '';\n                if (!empty($condition_array)) {\n                    $extraQuestionCondition = $filters->groupOp.' ( ';\n                    $extraQuestionCondition .= implode($filters->groupOp, $condition_array);\n                    $extraQuestionCondition .= ' ) ';\n                    // Remove conditions already added\n                    $extraQuestionCondition = str_replace(\n                        $extraCondition,\n                        '',\n                        $extraQuestionCondition\n                    );\n                }\n\n                $whereCondition .= $extraQuestionCondition;\n\n                if (isset($filters->custom_dates)) {\n                    $whereCondition .= $filters->custom_dates;\n                }\n            }\n        } elseif (!empty($filters->rules)) {\n            $whereCondition .= ' AND ( ';\n            $counter = 0;\n            foreach ($filters->rules as $key => $rule) {\n                $whereCondition .= getWhereClause(\n                    $rule->field,\n                    $rule->op,\n                    $rule->data\n                );\n\n                if ($counter < count($filters->rules) - 1) {\n                    $whereCondition .= $filters->groupOp;\n                }\n                $counter++;\n            }\n            $whereCondition .= ' ) ';\n        }\n    }\n\n    if (!empty($whereConditionInForm)) {\n        $whereCondition .= ' ) ';\n    }\n}\n\n// get index row - i.e. user click to sort $sord = $_GET['sord'];\n// get the direction\nif (!$sidx) {\n    $sidx = 1;\n}\n\n//2. Selecting the count FIRST\n//@todo rework this\n\nswitch ($action) {\n    case 'get_exercise_categories':\n        $courseId = isset($_REQUEST['c_id']) ? $_REQUEST['c_id'] : 0;\n        $repo = Container::getExerciseCategoryRepository();\n        $qb = $repo->getResourcesByCourse(api_get_course_entity($courseId));\n        $count = $qb->select('COUNT(resource)')->getQuery()->getSingleScalarResult();\n\n        break;\n    case 'get_calendar_users':\n        $calendarPlugin = LearningCalendarPlugin::create();\n        $id = isset($_REQUEST['id']) ? $_REQUEST['id'] : 0;\n        $count = $calendarPlugin->getUsersPerCalendarCount($id);\n        break;\n    case 'get_usergroups_users':\n        $usergroup = new UserGroup();\n        $usergroup->protectScript(null, true, true);\n        $id = isset($_REQUEST['id']) ? $_REQUEST['id'] : 0;\n        $count = $usergroup->getUserGroupUsers($id, true);\n        break;\n    case 'get_learning_path_calendars':\n        $calendarPlugin = LearningCalendarPlugin::create();\n        $count = $calendarPlugin->getCalendarCount();\n        break;\n    case 'course_log_events':\n        $courseId = api_get_course_int_id();\n        if (empty($courseId)) {\n            exit;\n        }\n        $sessionId = api_get_session_id();\n        if (!api_is_allowed_to_edit()) {\n            exit;\n        }\n        $count = Statistics::getNumberOfActivities($courseId, $sessionId);\n        break;\n    case 'get_programmed_announcements':\n        $object = new ScheduledAnnouncement();\n        $count = $object->get_count();\n        break;\n    case 'get_group_reporting':\n        $course_id = isset($_REQUEST['course_id']) ? $_REQUEST['course_id'] : null;\n        $group_id = isset($_REQUEST['gidReq']) ? $_REQUEST['gidReq'] : null;\n        $sessionId = isset($_REQUEST['session_id']) ? $_REQUEST['session_id'] : null;\n        $count = Tracking::get_group_reporting(\n            $course_id,\n            $sessionId,\n            $group_id,\n            'count'\n        );\n        break;\n    case 'get_user_course_report':\n    case 'get_user_course_report_resumed':\n        $userNotAllowed = !api_is_student_boss() && !api_is_platform_admin(false, true);\n\n        if ($userNotAllowed) {\n            exit;\n        }\n        $userId = api_get_user_id();\n        $sessionId = isset($_GET['session_id']) ? (int) $_GET['session_id'] : 0;\n        $courseCodeList = [];\n        $userIdList = [];\n        $sessionIdList = [];\n        $searchByGroups = false;\n\n        if (api_is_drh()) {\n            if (api_drh_can_access_all_session_content()) {\n                $userList = SessionManager::getAllUsersFromCoursesFromAllSessionFromStatus(\n                    'drh_all',\n                    api_get_user_id()\n                );\n\n                if (!empty($userList)) {\n                    foreach ($userList as $user) {\n                        $userIdList[] = $user['user_id'];\n                    }\n                }\n\n                $courseList = SessionManager::getAllCoursesFollowedByUser(\n                    api_get_user_id(),\n                    null\n                );\n                if (!empty($courseList)) {\n                    foreach ($courseList as $course) {\n                        $courseCodeList[] = $course['code'];\n                    }\n                }\n            } else {\n                $userList = UserManager::get_users_followed_by_drh(api_get_user_id());\n                if (!empty($userList)) {\n                    $userIdList = array_keys($userList);\n                }\n\n                $courseList = CourseManager::get_courses_followed_by_drh(api_get_user_id());\n                if (!empty($courseList)) {\n                    $courseCodeList = array_keys($courseList);\n                }\n            }\n\n            if (empty($userIdList) || empty($courseCodeList)) {\n                exit;\n            }\n        } elseif (api_is_student_boss()) {\n            $supervisorStudents = UserManager::getUsersFollowedByUser(\n                api_get_user_id(),\n                api_is_student_boss() ? null : STUDENT,\n                false,\n                false,\n                false,\n                null,\n                null,\n                null,\n                null,\n                1,\n                null,\n                api_is_student_boss() ? STUDENT_BOSS : COURSEMANAGER,\n                null\n            );\n            $supervisorStudents = array_column($supervisorStudents, 'user_id');\n\n            //get students with course or session\n            $userIdList = SessionManager::getAllUsersFromCoursesFromAllSessionFromStatus(\n                'admin',\n                null,\n                false,\n                null,\n                null,\n                null,\n                'asc',\n                null,\n                null,\n                null,\n                [],\n                $supervisorStudents,\n                5\n            );\n            $userIdList = array_column($userIdList, 'user_id');\n\n            //get students session courses\n            if (-1 == $sessionId) {\n                $sessionList = SessionManager::get_sessions_list();\n                $sessionIdList = array_column($sessionList, 'id');\n\n                $courseCodeList = [];\n                foreach ($sessionList as $session) {\n                    $courses = SessionManager::get_course_list_by_session_id($session['id']);\n                    $courseCodeList = array_merge($courseCodeList, array_column($courses, 'code'));\n                }\n            }\n\n            $searchByGroups = true;\n        } elseif (api_is_platform_admin()) {\n            // Get students with course or session\n            $userIdList = SessionManager::getAllUsersFromCoursesFromAllSessionFromStatus(\n                'admin',\n                null,\n                false,\n                null,\n                null,\n                null,\n                'asc',\n                null,\n                null,\n                null,\n                [],\n                [],\n                5\n            );\n            $userIdList = array_column($userIdList, 'user_id');\n\n            //get students session courses\n            if (-1 == $sessionId) {\n                $sessionList = SessionManager::get_sessions_list();\n                $sessionIdList = array_column($sessionList, 'id');\n                $courseCodeList = [];\n                foreach ($sessionList as $session) {\n                    $courses = SessionManager::get_course_list_by_session_id($session['id']);\n                    $courseCodeList = array_merge(\n                        $courseCodeList,\n                        array_column($courses, 'code')\n                    );\n                }\n            }\n            $searchByGroups = true;\n        }\n\n        if ($searchByGroups) {\n            $userGroup = new UserGroup();\n            $userIdList = array_merge(\n                $userIdList,\n                $userGroup->getGroupUsersByUser(api_get_user_id())\n            );\n        }\n\n        if (is_array($userIdList)) {\n            $userIdList = array_unique($userIdList);\n        }\n\n        if (api_is_student_boss()) {\n            $userCourses = [];\n            foreach ($userIdList as $userId) {\n                $userCourses = array_merge(\n                    $userCourses,\n                    CourseManager::get_courses_list_by_user_id($userId, true)\n                );\n\n                $userSessions = SessionManager::getSessionsFollowedByUser($userId);\n\n                $sessionIdList = array_merge(\n                    $sessionIdList,\n                    array_column($userSessions, 'id')\n                );\n            }\n            $courseCodeList = array_column($userCourses, 'code');\n        }\n\n        if (!empty($courseCodeList)) {\n            $courseCodeList = array_unique($courseCodeList);\n        }\n\n        if (!empty($sessionIdList)) {\n            $sessionIdList = array_unique($sessionIdList);\n        }\n\n        if (api_is_student_boss() && empty($userIdList)) {\n            $count = 0;\n            break;\n        }\n\n        if ('get_user_course_report' == $action) {\n            $count = CourseManager::get_count_user_list_from_course_code(\n                false,\n                null,\n                $courseCodeList,\n                $userIdList,\n                $sessionIdList,\n                ['where' => $whereCondition, 'extra' => $extra_fields]\n            );\n        } else {\n            $count = CourseManager::get_count_user_list_from_course_code(\n                true,\n                ['ruc'],\n                $courseCodeList,\n                $userIdList,\n                $sessionIdList,\n                ['where' => $whereCondition, 'extra' => $extra_fields]\n            );\n        }\n        break;\n    case 'get_course_exercise_medias':\n        $course_id = api_get_course_int_id();\n        $count = Question::get_count_course_medias($course_id);\n        break;\n    case 'get_user_skill_ranking':\n        $skill = new Skill();\n        $count = $skill->getUserListSkillRankingCount();\n        break;\n    case 'get_course_announcements':\n        $count = AnnouncementManager::getNumberAnnouncements();\n        break;\n    case 'get_work_teacher':\n        $count = getWorkListTeacher(0, $limit, null, null, $whereCondition, true);\n        break;\n    case 'get_work_student':\n        $count = getWorkListStudent(0, $limit, null, null, $whereCondition, true);\n        break;\n    case 'get_all_work_student':\n        $withResults = isset($_REQUEST['with_results']) ? (int) $_REQUEST['with_results'] : 0;\n        $count = getAllWorkListStudent(0, $limit, null, null, $whereCondition, true, $withResults);\n        break;\n    case 'get_work_user_list_all':\n        $work_id = $_REQUEST['work_id'];\n        $count = get_count_work($work_id);\n        break;\n    case 'get_work_pending_list':\n        $courseId = $_REQUEST['course'] ?? 0;\n        $status = $_REQUEST['status'] ?? 0;\n        $count = getAllWork(\n            null,\n            null,\n            null,\n            null,\n            $whereCondition,\n            true,\n            $courseId,\n            $status\n        );\n        break;\n    case 'get_work_user_list_others':\n        $work_id = $_REQUEST['work_id'];\n        $count = get_count_work($work_id, api_get_user_id());\n        break;\n    case 'get_work_user_list':\n        $work_id = $_REQUEST['work_id'];\n        $courseInfo = api_get_course_info();\n        $documents = getAllDocumentToWork($work_id, api_get_course_int_id());\n\n        if ('1 = 1' === trim($whereCondition)) {\n            $whereCondition = '';\n        }\n\n        if (empty($documents)) {\n            $whereCondition .= \" AND u.id = \".api_get_user_id();\n            $count = get_work_user_list(\n                0,\n                $limit,\n                null,\n                null,\n                $work_id,\n                $whereCondition,\n                null,\n                true\n            );\n        } else {\n            $count = get_work_user_list_from_documents(\n                0,\n                $limit,\n                null,\n                null,\n                $work_id,\n                api_get_user_id(),\n                $whereCondition,\n                true\n            );\n        }\n        break;\n    case 'get_work_student_list_overview':\n        if (!(api_is_allowed_to_edit() || api_is_coach())) {\n            return 0;\n        }\n        $workId = isset($_GET['work_id']) ? $_GET['work_id'] : null;\n        $count = getWorkUserListData(\n            $workId,\n            api_get_course_id(),\n            api_get_session_id(),\n            api_get_group_id(),\n            0,\n            $limit,\n            null,\n            null,\n            true\n        );\n        break;\n    case 'get_exercise_pending_results':\n        if (false === api_is_teacher()) {\n            exit;\n        }\n\n        $courseId = $_REQUEST['course_id'] ?? 0;\n        $exerciseId = $_REQUEST['exercise_id'] ?? 0;\n        $status = $_REQUEST['status'] ?? 0;\n        if (isset($_GET['filter_by_user']) && !empty($_GET['filter_by_user'])) {\n            $filter_user = (int) $_GET['filter_by_user'];\n            if (empty($whereCondition)) {\n                $whereCondition .= \" te.exe_user_id  = '$filter_user'\";\n            } else {\n                $whereCondition .= \" AND te.exe_user_id  = '$filter_user'\";\n            }\n        }\n\n        if (isset($_GET['group_id_in_toolbar']) && !empty($_GET['group_id_in_toolbar'])) {\n            $groupIdFromToolbar = (int) $_GET['group_id_in_toolbar'];\n            if (!empty($groupIdFromToolbar)) {\n                if (empty($whereCondition)) {\n                    $whereCondition .= \" te.group_id  = '$groupIdFromToolbar'\";\n                } else {\n                    $whereCondition .= \" AND group_id  = '$groupIdFromToolbar'\";\n                }\n            }\n        }\n\n        if (!empty($whereCondition)) {\n            $whereCondition = \" AND $whereCondition\";\n        }\n\n        if (!empty($courseId)) {\n            $whereCondition .= \" AND te.c_id = $courseId\";\n        }\n\n        $count = ExerciseLib::get_count_exam_results(\n            $exerciseId,\n            $whereCondition,\n            '',\n            false,\n            true,\n            $status\n        );\n\n        break;\n    case 'get_exercise_results':\n        $exercise_id = $_REQUEST['exerciseId'];\n\n        $courseId = $_REQUEST['course_id'] ?? 0;\n        $exerciseId = $_REQUEST['exercise_id'] ?? 0;\n        $status = $_REQUEST['status'] ?? 0;\n        if (isset($_GET['filter_by_user']) && !empty($_GET['filter_by_user'])) {\n            $filter_user = (int) $_GET['filter_by_user'];\n            if (empty($whereCondition)) {\n                $whereCondition .= \" te.exe_user_id  = '$filter_user'\";\n            } else {\n                $whereCondition .= \" AND te.exe_user_id  = '$filter_user'\";\n            }\n        }\n\n        if (isset($_GET['group_id_in_toolbar']) && !empty($_GET['group_id_in_toolbar'])) {\n            $groupIdFromToolbar = (int) $_GET['group_id_in_toolbar'];\n            if (!empty($groupIdFromToolbar)) {\n                if (empty($whereCondition)) {\n                    $whereCondition .= \" te.group_id  = '$groupIdFromToolbar'\";\n                } else {\n                    $whereCondition .= \" AND group_id  = '$groupIdFromToolbar'\";\n                }\n            }\n        }\n\n        if (!empty($whereCondition)) {\n            $whereCondition = \" AND $whereCondition\";\n        }\n\n        $count = ExerciseLib::get_count_exam_results(\n            $exercise_id,\n            $whereCondition,\n            api_get_course_int_id()\n        );\n        break;\n    case 'get_exercise_results_report':\n        api_protect_admin_script();\n        $exerciseId = isset($_REQUEST['exercise_id']) ? $_REQUEST['exercise_id'] : 0;\n        $courseId = isset($_REQUEST['course_id']) ? $_REQUEST['course_id'] : 0;\n\n        if (empty($exerciseId)) {\n            exit;\n        }\n\n        if (!empty($courseId)) {\n            $courseInfo = api_get_course_info_by_id($courseId);\n        } else {\n            $courseId = isset($_REQUEST['cid']) ? $_REQUEST['cid'] : '';\n            if (!empty($courseId)) {\n                $courseInfo = api_get_course_info_by_id($courseId);\n            }\n        }\n\n        if (empty($courseInfo)) {\n            exit;\n        }\n\n        $startDate = Database::escape_string($_REQUEST['start_date']);\n        if (!empty($whereCondition)) {\n            $whereCondition = \" AND $whereCondition\";\n        }\n        $whereCondition .= \" AND exe_date > '$startDate' AND te.status = '' \";\n        $count = ExerciseLib::get_count_exam_results(\n            $exerciseId,\n            $whereCondition,\n            $courseInfo['real_id'],\n            true\n        );\n        break;\n    case 'get_sessions_tracking':\n        $keyword = isset($_REQUEST['keyword']) ? $_REQUEST['keyword'] : '';\n\n        $description = '';\n        $setting = api_get_setting('show_session_description');\n        if ('true' === $setting) {\n            $description = $keyword;\n        }\n\n        if (api_is_drh() || api_is_session_admin()) {\n            $count = SessionManager::get_sessions_followed_by_drh(\n                api_get_user_id(),\n                null,\n                null,\n                true,\n                false,\n                false,\n                null,\n                $keyword,\n                $description,\n                ['where' => $whereCondition, 'extra' => $extra_fields]\n            );\n        } elseif (api_is_session_admin()) {\n            $count = SessionManager::getSessionsFollowedByUser(\n                api_get_user_id(),\n                SESSIONADMIN,\n                null,\n                null,\n                true,\n                false,\n                false,\n                null,\n                $keyword,\n                $description,\n                ['where' => $whereCondition, 'extra' => $extra_fields]\n            );\n        } else {\n            // Sessions for the coach\n            $count = Tracking::get_sessions_coached_by_user(\n                api_get_user_id(),\n                null,\n                null,\n                true,\n                $keyword,\n                $description,\n                null,\n                null,\n                ['where' => $whereCondition, 'extra' => $extra_fields]\n            );\n        }\n        break;\n    case 'get_sessions':\n        $listType = isset($_REQUEST['list_type']) ? $_REQUEST['list_type'] : SessionManager::getDefaultSessionTab();\n\n        if ('custom' === $listType && api_get_configuration_value('allow_session_status')) {\n            $whereCondition .= ' AND (s.status IN (\"'.SessionManager::STATUS_PLANNED.'\", \"'.SessionManager::STATUS_PROGRESS.'\") ) ';\n        }\n\n        switch ($listType) {\n            case 'complete':\n                $count = SessionManager::get_count_admin_complete(\n                    ['where' => $whereCondition, 'extra' => $extra_fields]\n                );\n                break;\n            case 'custom':\n            case 'active':\n            case 'close':\n            case 'all':\n            default:\n                $count = SessionManager::formatSessionsAdminForGrid(\n                    ['where' => $whereCondition, 'extra' => $extra_fields],\n                    true,\n                    [],\n                    [],\n                    $listType\n                );\n                break;\n        }\n        break;\n    case 'get_session_lp_progress':\n    case 'get_session_progress':\n        //@TODO replace this for a more efficient function (not retrieving the whole data)\n        $course = api_get_course_info_by_id($_GET['course_id']);\n        $users = CourseManager::get_student_list_from_course_code(\n            $course['code'],\n            true,\n            $_GET['session_id'],\n            $_GET['date_from'],\n            $_GET['date_to']\n        );\n        $count = count($users);\n        break;\n    case 'get_exercise_progress':\n        //@TODO replace this for a more efficient function (not retrieving the whole data)\n        $records = Tracking::get_exercise_progress(\n            $_GET['session_id'],\n            $_GET['course_id'],\n            $_GET['exercise_id'],\n            $_GET['date_from'],\n            $_GET['date_to']\n        );\n        $count = count($records);\n        break;\n    case 'get_session_access_overview':\n        //@TODO replace this for a more efficient function (not retrieving the whole data)\n        $records = SessionManager::get_user_data_access_tracking_overview(\n            $_GET['session_id'],\n            $_GET['course_id'],\n            $_GET['student_id'],\n            $_GET['profile'],\n            $_GET['date_from'],\n            $_GET['date_to'],\n            $options\n        );\n        $count = count($records);\n        break;\n    case 'get_survey_overview':\n        //@TODO replace this for a more efficient function (not retrieving the whole data)\n        $records = SessionManager::get_survey_overview(\n            $_GET['session_id'],\n            $_GET['course_id'],\n            $_GET['survey_id'],\n            $_GET['date_from'],\n            $_GET['date_to'],\n            $options\n        );\n        $count = count($records);\n        break;\n    case 'get_exercise_grade':\n        //@TODO replace this for a more efficient function (not retrieving the whole data)\n        $course = api_get_course_info_by_id($_GET['course_id']);\n        $users = CourseManager::get_student_list_from_course_code(\n            $course['code'],\n            true,\n            $_GET['session_id']\n        );\n\n        $count = count($users);\n        break;\n    case 'get_extra_fields':\n        $type = $_REQUEST['type'];\n        $obj = new ExtraField($type);\n        $count = $obj->get_count();\n        break;\n    case 'get_extra_field_options':\n        $type = $_REQUEST['type'];\n        $field_id = $_REQUEST['field_id'];\n        $obj = new ExtraFieldOption($type);\n        $count = $obj->get_count_by_field_id($field_id);\n        break;\n    case 'get_timelines':\n        $obj = new Timeline();\n        $count = $obj->get_count();\n        break;\n    case 'get_gradebooks':\n        $obj = new Gradebook();\n        $count = $obj->get_count();\n        break;\n    case 'get_careers':\n        $obj = new Career();\n        $count = $obj->get_count();\n        break;\n    case 'get_promotions':\n        $obj = new Promotion();\n        $count = $obj->get_count();\n        break;\n    case 'get_mail_template':\n        $obj = new MailTemplateManager();\n        $count = $obj->get_count();\n        break;\n    case 'get_grade_models':\n        $obj = new GradeModel();\n        $count = $obj->get_count();\n        break;\n    case 'get_usergroups':\n        $obj = new UserGroup();\n        $obj->protectScript();\n        $count = $obj->get_count($whereCondition);\n        break;\n    case 'get_usergroups_teacher':\n        $obj = new UserGroup();\n        $obj->protectScript(null, false, true);\n        $type = isset($_REQUEST['type']) ? $_REQUEST['type'] : 'registered';\n        $groupFilter = isset($_REQUEST['group_filter']) ? (int) $_REQUEST['group_filter'] : 0;\n        $keyword = isset($_REQUEST['keyword']) ? $_REQUEST['keyword'] : '';\n\n        $course_id = api_get_course_int_id();\n        $sessionId = api_get_session_id();\n        $options = [];\n        $options['course_id'] = $course_id;\n        $options['session_id'] = $sessionId;\n\n        switch ($type) {\n            case 'not_registered':\n                if (empty($sessionId)) {\n                    $options['where'] = [' (course_id IS NULL OR course_id != ?) ' => $course_id];\n                } else {\n                    $options['where'] = [' (session_id IS NULL OR session_id != ?) ' => $sessionId];\n                }\n                if (!empty($keyword)) {\n                    $options['where']['AND name like %?% '] = $keyword;\n                }\n                $count = $obj->getUserGroupNotInCourse(\n                    $options,\n                    $groupFilter,\n                    true\n                );\n                break;\n            case 'registered':\n                if (empty($sessionId)) {\n                    $options['where'] = [' usergroup.course_id = ? ' => $course_id];\n                } else {\n                    $options['where'] = [' usergroup.session_id = ? ' => $sessionId];\n                }\n                $count = $obj->getUserGroupInCourse(\n                    $options,\n                    $groupFilter,\n                    true\n                );\n                break;\n        }\n        break;\n    default:\n        exit;\n}\n\n// 3. Calculating first, end, etc\n$total_pages = 0;\nif ($count > 0) {\n    if (!empty($limit)) {\n        $total_pages = ceil((float) $count / (float) $limit);\n    }\n}\nif ($page > $total_pages) {\n    $page = $total_pages;\n}\n\n$start = $limit * $page - $limit;\nif ($start < 0) {\n    $start = 0;\n}\n\n//4. Deleting an element if the user wants to\nif (isset($_REQUEST['oper']) && 'del' == $_REQUEST['oper']) {\n    $obj->delete($_REQUEST['id']);\n}\n\n$is_allowedToEdit = api_is_allowed_to_edit(null, true) || api_is_allowed_to_edit(true) || api_is_drh();\n\n//5. Querying the DB for the elements\n$columns = [];\n\nswitch ($action) {\n    case 'get_exercise_categories':\n        api_protect_course_script();\n        if (!api_is_allowed_to_edit()) {\n            api_not_allowed(true);\n        }\n\n        $columns = ['name', 'actions'];\n        $qb = $repo->getResourcesByCourse(api_get_course_entity($courseId));\n        $items = $qb->getQuery()->getResult();\n        /** @var \\Chamilo\\CourseBundle\\Entity\\CExerciseCategory $item */\n        $result = [];\n        foreach ($items as $item) {\n            $result[] = [\n                'id' => $item->getId(),\n                'name' => $item->getName(),\n            ];\n        }\n        /*$result = $manager->get_all([\n            'where' => ['c_id = ? ' => $courseId],\n            'order' => \"$sidx $sord\",\n            'LIMIT' => \"$start , $limit\",\n        ]);*/\n        break;\n    case 'get_calendar_users':\n        $columns = ['firstname', 'lastname', 'exam'];\n        $result = $calendarPlugin->getUsersPerCalendar($id);\n        break;\n    case 'get_usergroups_users':\n        $columns = ['name', 'actions'];\n        if ('true' === api_get_plugin_setting('learning_calendar', 'enabled')) {\n            $columns = [\n                'name',\n                'calendar',\n                'gradebook_items',\n                'time_spent',\n                'lp_day_completed',\n                'days_diff',\n                'actions',\n                'calendar_id',\n            ];\n        }\n        $result = $usergroup->getUserGroupUsers($id, false, $start, $limit);\n        break;\n    case 'get_learning_path_calendars':\n        $columns = ['title', 'total_hours', 'minutes_per_day', 'actions'];\n        $sidx = in_array($sidx, $columns) ? $sidx : 'title';\n        $result = $calendarPlugin->getCalendars(\n            $start,\n            $limit,\n            $sidx,\n            $sord\n        );\n        break;\n    case 'course_log_events':\n        $columns = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n        $sidx = in_array($sidx, $columns) ? $sidx : '0';\n        $result = Statistics::getActivitiesData(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $courseId,\n            $sessionId\n        );\n        break;\n    case 'get_programmed_announcements':\n        $columns = ['subject', 'date', 'sent', 'actions'];\n        $sessionId = isset($_REQUEST['session_id']) ? (int) $_REQUEST['session_id'] : 0;\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'subject';\n        $result = Database::select(\n            '*',\n            $object->table,\n            [\n                'where' => ['session_id = ? ' => $sessionId],\n                'order' => \"$sidx $sord\",\n                'LIMIT' => \"$start , $limit\",\n            ]\n        );\n        if ($result) {\n            foreach ($result as &$item) {\n                $item['sent'] = 1 == $item['sent'] ? get_lang('Yes') : get_lang('No');\n                $item['date'] = api_get_local_time($item['date']);\n            }\n        }\n        break;\n    case 'get_group_reporting':\n        $columns = ['name', 'time', 'progress', 'score', 'works', 'messages', 'actions'];\n        $sidx = in_array($sidx, $columns) ? $sidx : 'name';\n\n        $result = Tracking::get_group_reporting(\n            $course_id,\n            $sessionId,\n            $group_id,\n            'all',\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $whereCondition\n        );\n        break;\n    case 'get_course_exercise_medias':\n        $columns = ['question'];\n        $sidx = in_array($sidx, $columns) ? $sidx : 'question';\n        $result = Question::get_course_medias(\n            $course_id,\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $whereCondition\n        );\n        break;\n    case 'get_user_course_report_resumed':\n        $columns = [\n            'extra_ruc',\n            'training_hours',\n            'count_users',\n            'count_users_registered',\n            'average_hours_per_user',\n            'count_certificates',\n        ];\n\n        $column_names = [\n            get_lang('Company'),\n            get_lang('Hours of accumulated training'),\n            get_lang('Subscriptions count'),\n            get_lang('Users count'),\n            get_lang('Avg hours/student'),\n            get_lang('Certificates count'),\n        ];\n\n        $userExtraFields = UserManager::get_extra_fields(\n            0,\n            100,\n            null,\n            null,\n            true,\n            true\n        );\n\n        if (!empty($userExtraFields)) {\n            foreach ($userExtraFields as $extra) {\n                if ('ruc' == $extra['1']) {\n                    continue;\n                }\n                $columns[] = $extra['1'];\n                $column_names[] = $extra['3'];\n            }\n        }\n\n        if (api_is_student_boss() && empty($userIdList)) {\n            $result = [];\n            break;\n        }\n\n        $result = CourseManager::get_user_list_from_course_code(\n            null,\n            null,\n            \"LIMIT $start, $limit\",\n            null,\n            null,\n            null,\n            true,\n            true,\n            ['ruc'],\n            $courseCodeList,\n            $userIdList,\n            null,\n            $sessionIdList,\n            null,\n            ['where' => $whereCondition, 'extra' => $extra_fields]\n        );\n\n        $new_result = [];\n        if (!empty($result)) {\n            foreach ($result as $row) {\n                $row['training_hours'] = api_time_to_hms($row['training_hours']);\n                $row['average_hours_per_user'] = api_time_to_hms($row['average_hours_per_user']);\n                $new_result[] = $row;\n            }\n            $result = $new_result;\n        }\n        break;\n    case 'get_user_course_report':\n        $columns = [\n            'course',\n            'user',\n            'email',\n            'time',\n            'certificate',\n            'progress_100',\n            'progress',\n        ];\n        $column_names = [\n            get_lang('Course'),\n            get_lang('User'),\n            get_lang('e-mail'),\n            get_lang('Man hours'),\n            get_lang('Generated certificate'),\n            get_lang('Approved'),\n            get_lang('Course progress'),\n        ];\n\n        $userExtraFields = UserManager::get_extra_fields(\n            0,\n            100,\n            null,\n            null,\n            true,\n            true\n        );\n        if (!empty($userExtraFields)) {\n            foreach ($userExtraFields as $extra) {\n                $columns[] = $extra['1'];\n                $column_names[] = $extra['3'];\n            }\n        }\n\n        if (api_is_student_boss()) {\n            $columns[] = 'group';\n            $column_names[] = get_lang('Group');\n        }\n\n        if (!in_array($sidx, ['title'])) {\n            $sidx = 'title';\n        }\n\n        if (api_is_student_boss() && empty($userIdList)) {\n            $result = [];\n            break;\n        }\n\n        //get sessions\n        $sessions = [];\n        if (count($sessionIdList) > 0) {\n            $sessions = CourseManager::get_user_list_from_course_code(\n                null,\n                null,\n                \"LIMIT $start, $limit\",\n                \" $sidx $sord\",\n                null,\n                null,\n                true,\n                false,\n                null,\n                $courseCodeList,\n                $userIdList,\n                null,\n                $sessionIdList,\n                null,\n                ['where' => $whereCondition, 'extra' => $extra_fields]\n            );\n        }\n\n        //get courses\n        $courses = CourseManager::get_user_list_from_course_code(\n            null,\n            null,\n            \"LIMIT $start, $limit\",\n            \" $sidx $sord\",\n            null,\n            null,\n            true,\n            false,\n            null,\n            [],\n            $userIdList,\n            null,\n            null,\n            null,\n            ['where' => $whereCondition, 'extra' => $extra_fields]\n        );\n\n        //merge courses and sessions\n        $result = array_merge($sessions, $courses);\n\n        if (api_is_student_boss()) {\n            $userGroup = new UserGroup();\n            foreach ($result as &$item) {\n                $userGroups = $userGroup->get_groups_by_user($item['user_id']);\n                $item['group'] = implode(\", \", array_column($userGroups, 'name'));\n                unset($item['user_id']);\n            }\n        }\n\n        break;\n    case 'get_user_skill_ranking':\n        $columns = [\n            'photo',\n            'firstname',\n            'lastname',\n            'skills_acquired',\n            'currently_learning',\n            'rank',\n        ];\n        if ('1 = 1' === trim($whereCondition)) {\n            $whereCondition = '';\n        }\n        $sidx = in_array($sidx, $columns) ? $sidx : 'firstname';\n        $result = $skill->getUserListSkillRanking(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $whereCondition\n        );\n        $result = msort($result, 'skills_acquired', 'asc');\n\n        $skills_in_course = [];\n        if (!empty($result)) {\n            foreach ($result as &$item) {\n                $user_info = api_get_user_info($item['user_id']);\n                $personal_course_list = UserManager::get_personal_session_course_list(\n                    $item['user_id']\n                );\n                $count_skill_by_course = [];\n                foreach ($personal_course_list as $course_item) {\n                    if (!isset($skills_in_course[$course_item['code']])) {\n                        $count_skill_by_course[$course_item['code']] = $skill->getCountSkillsByCourse(\n                            $course_item['code']\n                        );\n                        $skills_in_course[$course_item['code']] = $count_skill_by_course[$course_item['code']];\n                    } else {\n                        $count_skill_by_course[$course_item['code']] = $skills_in_course[$course_item['code']];\n                    }\n                }\n                $item['photo'] = Display::img($user_info['avatar_small'], $user_info['complete_name'], [], false);\n                $item['currently_learning'] = !empty($count_skill_by_course) ? array_sum($count_skill_by_course) : 0;\n            }\n        }\n        break;\n    case 'get_course_announcements':\n        $columns = [\n            'title',\n            'username',\n            'insert_date',\n            'actions',\n        ];\n\n        $titleToSearch = $_REQUEST['title_to_search'] ?? '';\n        $userIdToSearch = $_REQUEST['user_id_to_search'] ?? 0;\n\n        $result = AnnouncementManager::getAnnouncements(\n            null,\n            null,\n            false,\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $titleToSearch,\n            $userIdToSearch\n        );\n\n        break;\n    case 'get_work_teacher':\n        $columns = [\n            'type',\n            'title',\n            'sent_date',\n            'expires_on',\n            'amount',\n            'actions',\n        ];\n        $sidx = in_array($sidx, $columns) ? $sidx : 'title';\n        $result = getWorkListTeacher(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $whereCondition\n        );\n        break;\n    case 'get_work_student':\n        $columns = [\n            'type',\n            'title',\n            'expires_on',\n            'feedback',\n            'last_upload',\n            'others',\n        ];\n        $sidx = in_array($sidx, $columns) ? $sidx : 'title';\n        $result = getWorkListStudent(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $whereCondition\n        );\n        break;\n    case 'get_all_work_student':\n        $columns = [\n            'type',\n            'title',\n            'expires_on',\n        ];\n\n        if ($withResults) {\n            $columns[] = 'feedback';\n            $columns[] = 'last_upload';\n        }\n        $sidx = in_array($sidx, $columns) ? $sidx : 'title';\n        $result = getAllWorkListStudent(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $whereCondition,\n            false,\n            $withResults\n        );\n        break;\n    case 'get_work_user_list_all':\n        $plagiarismColumns = [];\n        if (api_get_configuration_value('allow_compilatio_tool')) {\n            $plagiarismColumns = ['compilatio'];\n        }\n        if (isset($_GET['type']) && 'simple' === $_GET['type']) {\n            $columns = [\n                'fullname',\n                'title',\n                'qualification',\n                'sent_date',\n                'qualificator_id',\n                'correction',\n            ];\n            $columns = array_merge($columns, $plagiarismColumns);\n            $columns[] = 'actions';\n        } else {\n            $columns = [\n                'fullname',\n                'title',\n                'qualification',\n                'sent_date',\n                'correction',\n            ];\n            $columns = array_merge($columns, $plagiarismColumns);\n            $columns[] = 'actions';\n        }\n\n        $whereCondition = \" AND $whereCondition \";\n        $columnOrderValidList = array_merge(['firstname', 'lastname'], $columns);\n        $sidx = in_array($sidx, $columnOrderValidList) ? $sidx : 'title';\n\n        $result = get_work_user_list(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $work_id,\n            $whereCondition\n        );\n        break;\n    case 'get_work_pending_list':\n        api_block_anonymous_users();\n        if (false === api_is_teacher()) {\n            exit;\n        }\n        $plagiarismColumns = [];\n        if (api_get_configuration_value('allow_compilatio_tool')) {\n            $plagiarismColumns = ['compilatio'];\n        }\n        $columns = [\n            'course',\n            'work_name',\n            'fullname',\n            'title',\n            'qualification',\n            'sent_date',\n            'qualificator_id',\n            'correction',\n        ];\n        $columns = array_merge($columns, $plagiarismColumns);\n        $columns[] = 'actions';\n        $sidx = in_array($sidx, $columns) ? $sidx : 'work_name';\n        $result = getAllWork(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $whereCondition,\n            false,\n            $courseId,\n            $status\n        );\n        break;\n    case 'get_work_user_list_others':\n        $plagiarismColumns = [];\n        if (api_get_configuration_value('allow_compilatio_tool')) {\n            $plagiarismColumns = ['compilatio'];\n        }\n\n        if (isset($_GET['type']) && 'simple' === $_GET['type']) {\n            $columns = [\n                'type',\n                'firstname',\n                'lastname',\n                'title',\n                'qualification',\n                'sent_date',\n                'qualificator_id',\n            ];\n            $columns = array_merge($columns, $plagiarismColumns);\n            $columns[] = 'actions';\n        } else {\n            $columns = ['type', 'firstname', 'lastname', 'title', 'sent_date'];\n            $columns = array_merge($columns, $plagiarismColumns);\n            $columns[] = 'actions';\n        }\n\n        if ('1 = 1' === trim($whereCondition)) {\n            $whereCondition = '';\n        }\n\n        $whereCondition .= \" AND u.id <> \".api_get_user_id();\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'firstname';\n        $result = get_work_user_list(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $work_id,\n            $whereCondition\n        );\n        break;\n    case 'get_work_user_list':\n        $plagiarismColumns = [];\n        if (api_get_configuration_value('allow_compilatio_tool') && api_is_allowed_to_edit()) {\n            $plagiarismColumns = ['compilatio'];\n        }\n        if (isset($_GET['type']) && 'simple' == $_GET['type']) {\n            $columns = [\n                'type',\n                'title',\n                'qualification',\n                'sent_date',\n                'qualificator_id',\n            ];\n            $columns = array_merge($columns, $plagiarismColumns);\n            $columns[] = 'actions';\n        } else {\n            $columns = ['type', 'title', 'qualification', 'sent_date'];\n            $columns = array_merge($columns, $plagiarismColumns);\n            $columns[] = 'actions';\n        }\n        $documents = getAllDocumentToWork($work_id, api_get_course_int_id());\n\n        if ('1 = 1' === trim($whereCondition)) {\n            $whereCondition = '';\n        }\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'title';\n        if (empty($documents)) {\n            $whereCondition .= ' AND u.id = '.api_get_user_id();\n            $result = get_work_user_list(\n                $start,\n                $limit,\n                $sidx,\n                $sord,\n                $work_id,\n                $whereCondition\n            );\n        } else {\n            $result = get_work_user_list_from_documents(\n                $start,\n                $limit,\n                $sidx,\n                $sord,\n                $work_id,\n                api_get_user_id(),\n                $whereCondition\n            );\n        }\n        break;\n    case 'get_exercise_pending_results':\n        $columns = [\n            'course',\n            'exercise',\n            'firstname',\n            'lastname',\n            'username',\n            'exe_duration',\n            'start_date',\n            'exe_date',\n            'score',\n            'user_ip',\n            'status',\n            'actions',\n        ];\n        $officialCodeInList = api_get_setting('show_official_code_exercise_result_list');\n        if ($officialCodeInList === 'true') {\n            $columns = array_merge(['official_code'], $columns);\n        }\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'course';\n\n        $result = ExerciseLib::get_exam_results_data(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $exerciseId,\n            $whereCondition,\n            false,\n            null,\n            false,\n            false,\n            [],\n            false,\n            false,\n            false,\n            true,\n            $status\n        );\n\n        break;\n    case 'get_exercise_results':\n        $is_allowedToEdit = api_is_allowed_to_edit(null, true) ||\n            api_is_drh() ||\n            api_is_student_boss() ||\n            api_is_session_admin();\n        if ($is_allowedToEdit || api_is_student_boss()) {\n            $columns = [\n                'firstname',\n                'lastname',\n                'username',\n                'group_name',\n                'exe_duration',\n                'start_date',\n                'exe_date',\n                'score',\n                'user_ip',\n                'status',\n                'lp',\n                'actions',\n            ];\n            $officialCodeInList = api_get_setting('show_official_code_exercise_result_list');\n            if ('true' === $officialCodeInList) {\n                $columns = array_merge(['official_code'], $columns);\n            }\n        }\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'firstname';\n        $result = ExerciseLib::get_exam_results_data(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $exercise_id,\n            $whereCondition,\n            false,\n            api_get_course_int_id()\n        );\n        break;\n    case 'get_exercise_results_report':\n        $columns = [\n            'firstname',\n            'lastname',\n            'username',\n        ];\n        $extraFieldsToAdd = [];\n        $extraFields = api_get_configuration_value('exercise_category_report_user_extra_fields');\n        $roundValues = api_get_configuration_value('exercise_category_round_score_in_export');\n\n        if (!empty($extraFields) && isset($extraFields['fields'])) {\n            $extraField = new ExtraField('user');\n            foreach ($extraFields['fields'] as $variable) {\n                $info = $extraField->get_handler_field_info_by_field_variable($variable);\n                if ($info) {\n                    $extraFieldsToAdd[] = $variable;\n                }\n            }\n        }\n        if (!empty($extraFieldsToAdd)) {\n            $columns = array_merge($columns, $extraFieldsToAdd);\n        }\n\n        $columns[] = 'session';\n        $columns[] = 'session_access_start_date';\n        $columns[] = 'exe_date';\n        $columns[] = 'score';\n\n        if ('excel' === $operation) {\n            $columns = [\n                'firstname',\n                'lastname',\n                'username',\n            ];\n\n            if (!empty($extraFieldsToAdd)) {\n                $columns = array_merge($columns, $extraFieldsToAdd);\n            }\n\n            $columns[] = 'session';\n            $columns[] = 'session_access_start_date';\n            $columns[] = 'exe_date';\n            $columns[] = 'score_percentage';\n            $columns[] = 'only_score';\n            $columns[] = 'total';\n\n            $overwriteColumnHeaderExport['session_access_start_date'] = get_lang('Access start date');\n            $overwriteColumnHeaderExport['exe_date'] = get_lang('Start Date');\n            $overwriteColumnHeaderExport['score_percentage'] = get_lang('Score').' - '.get_lang('Percentage');\n            $overwriteColumnHeaderExport['only_score'] = get_lang('Score').' - '.get_lang('Note');\n            $overwriteColumnHeaderExport['total'] = get_lang('Score').' - '.get_lang('Test');\n        }\n        $categoryList = TestCategory::getListOfCategoriesIDForTest($exerciseId, $courseId);\n\n        if (!empty($categoryList)) {\n            foreach ($categoryList as $categoryInfo) {\n                $label = 'category_'.$categoryInfo['id'];\n                if ('excel' === $operation) {\n                    $columns[] = $label.'_score_percentage';\n                    $columns[] = $label.'_only_score';\n                    $columns[] = $label.'_total';\n                    $overwriteColumnHeaderExport[$label] = $categoryInfo['title'];\n                    $overwriteColumnHeaderExport[$label.'_score_percentage'] = $categoryInfo['title'].\n                        ' - '.get_lang('Percentage');\n                    $overwriteColumnHeaderExport[$label.'_only_score'] = $categoryInfo['title'].\n                        ' - '.get_lang('Note');\n                    $overwriteColumnHeaderExport[$label.'_total'] = $categoryInfo['title'].\n                        ' - '.get_lang('Test');\n                } else {\n                    $columns[] = $label;\n                }\n            }\n        }\n\n        if ('excel' !== $operation) {\n            $columns[] = 'actions';\n        }\n\n        $whereCondition .= \" AND te.status = '' \";\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'firstname';\n        $result = ExerciseLib::get_exam_results_data(\n            $start,\n            $limit,\n            $sidx,\n            $sord,\n            $exerciseId,\n            $whereCondition,\n            false,\n            $courseInfo['real_id'],\n            true,\n            true,\n            $extraFieldsToAdd,\n            true,\n            $roundValues\n        );\n        break;\n    case 'get_work_student_list_overview':\n        if (!(api_is_allowed_to_edit() || api_is_coach())) {\n            return [];\n        }\n        $columns = [\n            'student',\n            'works',\n        ];\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'student';\n        $result = getWorkUserListData(\n            $workId,\n            api_get_course_id(),\n            api_get_session_id(),\n            api_get_group_id(),\n            $start,\n            $limit,\n            $sidx,\n            $sord\n        );\n        break;\n    case 'get_sessions_tracking':\n        $sessionColumns = SessionManager::getGridColumns('my_space');\n        $columns = $sessionColumns['simple_column_name'];\n\n        if (api_is_drh()) {\n            $orderByName = Database::escape_string($sidx);\n            $orderByName = in_array($orderByName, ['name', 'access_start_date']) ? $orderByName : 'name';\n            $orderBy = \" ORDER BY $orderByName $sord\";\n            $sessions = SessionManager::get_sessions_followed_by_drh(\n                api_get_user_id(),\n                $start,\n                $limit,\n                false,\n                false,\n                false,\n                $orderBy,\n                $keyword,\n                $description,\n                ['where' => $whereCondition, 'extra' => $extra_fields]\n            );\n        } elseif (api_is_session_admin()) {\n            $orderByName = Database::escape_string($sidx);\n            $orderByName = in_array($orderByName, ['name', 'access_start_date']) ? $orderByName : 'name';\n            $orderBy = \" ORDER BY $orderByName $sord\";\n            $sessions = SessionManager::getSessionsFollowedByUser(\n                api_get_user_id(),\n                SESSIONADMIN,\n                $start,\n                $limit,\n                false,\n                false,\n                false,\n                $orderBy,\n                $keyword,\n                $description,\n                ['where' => $whereCondition, 'extra' => $extra_fields]\n            );\n        } else {\n            $sidx = in_array($sidx, $columns) ? $sidx : 'name';\n            // Sessions for the coach\n            $sessions = Tracking::get_sessions_coached_by_user(\n                api_get_user_id(),\n                $start,\n                $limit,\n                false,\n                $keyword,\n                $description,\n                $sidx,\n                $sord,\n                ['where' => $whereCondition, 'extra' => $extra_fields]\n            );\n        }\n\n        $result = [];\n        if (!empty($sessions)) {\n            $pdfIcon = Display::return_icon('pdf.png', get_lang('CertificateOfAchievement'), [], ICON_SIZE_SMALL);\n            foreach ($sessions as $session) {\n                if (api_drh_can_access_all_session_content()) {\n                    $count_courses_in_session = SessionManager::get_course_list_by_session_id(\n                        $session['id'],\n                        '',\n                        null,\n                        true\n                    );\n                } else {\n                    $count_courses_in_session = count(\n                        Tracking::get_courses_followed_by_coach(\n                            api_get_user_id(),\n                            $session['id']\n                        )\n                    );\n                }\n\n                $count_users_in_session = SessionManager::get_users_by_session(\n                    $session['id'],\n                    0,\n                    true\n                );\n\n                $session['display_start_date'] = '';\n                $session['display_end_date'] = '';\n                $session['coach_access_start_date'] = '';\n                $session['coach_access_end_date'] = '';\n                $dateData = SessionManager::parseSessionDates($session, true);\n                $dateToString = $dateData['access'];\n\n                $detailButtons = [];\n                $detailButtons[] = Display::url(\n                    $pdfIcon,\n                    api_get_path(WEB_CODE_PATH).'mySpace/session.php?'\n                    .http_build_query(\n                        [\n                            'action' => 'export_to_pdf',\n                            'type' => 'achievement',\n                            'session_to_export' => $session['id'],\n                            'all_students' => 1,\n                        ]\n                    ),\n                    ['target' => '_blank']\n                );\n                $detailButtons[] = Display::url(\n                    Display::return_icon('works.png', get_lang('WorksReport')),\n                    api_get_path(WEB_CODE_PATH).'mySpace/works_in_session_report.php?session='.$session['id']\n                );\n                $detailButtons[] = Display::url(\n                    Display::return_icon('2rightarrow.png'),\n                    api_get_path(WEB_CODE_PATH).'mySpace/course.php?session_id='.$session['id']\n                );\n\n                $item = [\n                    'name' => Display::url(\n                        $session['name'],\n                        api_get_path(WEB_CODE_PATH).'mySpace/course.php?session_id='.$session['id']\n                    ),\n                    'date' => $dateToString,\n                    'course_per_session' => $count_courses_in_session,\n                    'student_per_session' => $count_users_in_session,\n                    'actions' => implode(' ', $detailButtons),\n                ];\n\n                if (!empty($extra_fields)) {\n                    foreach ($extra_fields as $extraField) {\n                        $item[$extraField['field']] = $extraField['data'];\n                    }\n                }\n                $result[] = $item;\n            }\n        }\n        break;\n    case 'get_sessions':\n        $sessionColumns = SessionManager::getGridColumns($listType);\n        $columns = $sessionColumns['simple_column_name'];\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'name';\n        switch ($listType) {\n            case 'complete':\n                $result = SessionManager::get_sessions_admin_complete(\n                    [\n                        'where' => $whereCondition,\n                        'order' => \"$sidx $sord, s.name\",\n                        'extra' => $extra_fields,\n                        'limit' => \"$start , $limit\",\n                    ]\n                );\n                break;\n            case 'active':\n            case 'close':\n            case 'custom':\n            case 'all':\n                $result = SessionManager::formatSessionsAdminForGrid(\n                    [\n                        'where' => $whereCondition,\n                        'order' => \"$sidx $sord, s.name\",\n                        'extra' => $extra_fields,\n                        'limit' => \"$start , $limit\",\n                    ],\n                    false,\n                    $sessionColumns,\n                    [],\n                    $listType\n                );\n                break;\n        }\n        break;\n    case 'get_exercise_progress':\n        $sessionId = (int) $_GET['session_id'];\n        $courseId = (int) $_GET['course_id'];\n        $exerciseId = (int) $_GET['exercise_id'];\n        $date_from = $_GET['date_from'];\n        $date_to = $_GET['date_to'];\n\n        $columns = [\n            'session',\n            'exercise_id',\n            'quiz_title',\n            'username',\n            'lastname',\n            'firstname',\n            'time',\n            'question_id',\n            'question',\n            'description',\n            'answer',\n            'correct',\n        ];\n        $sidx = in_array($sidx, $columns) ? $sidx : 'quiz_title';\n\n        $result = Tracking::get_exercise_progress(\n            $sessionId,\n            $courseId,\n            $exerciseId,\n            $date_from,\n            $date_to,\n            [\n                'where' => $whereCondition,\n                'order' => \"$sidx $sord\",\n                'limit' => \"$start , $limit\",\n            ]\n        );\n        break;\n    case 'get_session_lp_progress':\n        $sessionId = 0;\n        if (!empty($_GET['session_id']) && !empty($_GET['course_id'])) {\n            $sessionId = (int) $_GET['session_id'];\n            $courseId = (int) $_GET['course_id'];\n            $course = api_get_course_info_by_id($courseId);\n        }\n\n        /**\n         * Add lessons of course.\n         */\n        $columns = [\n            'username',\n            'firstname',\n            'lastname',\n        ];\n        $lessons = LearnpathList::get_course_lessons($course['code'], $sessionId);\n        foreach ($lessons as $lesson_id => $lesson) {\n            $columns[] = $lesson_id;\n        }\n        $columns[] = 'total';\n        $sidx = in_array($sidx, $columns) ? $sidx : 'username';\n        $result = SessionManager::get_session_lp_progress(\n            $sessionId,\n            $courseId,\n            $date_from,\n            $date_to,\n            [\n                'where' => $whereCondition,\n                'order' => \"$sidx $sord\",\n                'limit' => \"$start , $limit\",\n            ]\n        );\n        break;\n    case 'get_survey_overview':\n        $sessionId = 0;\n        if (!empty($_GET['session_id']) &&\n            !empty($_GET['course_id']) &&\n            !empty($_GET['survey_id'])\n        ) {\n            $sessionId = (int) $_GET['session_id'];\n            $courseId = (int) $_GET['course_id'];\n            $surveyId = (int) $_GET['survey_id'];\n            $date_from = $_GET['date_from'];\n            $date_to = $_GET['date_to'];\n        }\n        /**\n         * Add lessons of course.\n         */\n        $columns = [\n            'username',\n            'firstname',\n            'lastname',\n        ];\n\n        $questions = SurveyManager::get_questions($surveyId, $courseId);\n\n        foreach ($questions as $question_id => $question) {\n            $columns[] = $question_id;\n        }\n\n        $sidx = in_array($sidx, $columns) ? $sidx : 'username';\n        $result = SessionManager::get_survey_overview(\n            $sessionId,\n            $courseId,\n            $surveyId,\n            $date_from,\n            $date_to,\n            [\n                'where' => $whereCondition,\n                'order' => \"$sidx $sord\",\n                'limit' => \"$start , $limit\",\n            ]\n        );\n        break;\n    case 'get_session_progress':\n        $columns = [\n            'lastname',\n            'firstname',\n            'username',\n            //'profile',\n            'total',\n            'courses',\n            'lessons',\n            'exercises',\n            'forums',\n            'homeworks',\n            'wikis',\n            'surveys',\n            //exercises\n            'lessons_total',\n            'lessons_done',\n            'lessons_left',\n            'lessons_progress',\n            //exercises\n            'exercises_total',\n            'exercises_done',\n            'exercises_left',\n            'exercises_progress',\n            //forums\n            'forums_total',\n            'forums_done',\n            'forums_left',\n            'forums_progress',\n            //assignments\n            'assignments_total',\n            'assignments_done',\n            'assignments_left',\n            'assignments_progress',\n            //Wiki\n            'wiki_total',\n            'wiki_revisions',\n            'wiki_read',\n            'wiki_unread',\n            'wiki_progress',\n            //surveys\n            'surveys_total',\n            'surveys_done',\n            'surveys_left',\n            'surveys_progress',\n        ];\n        $sessionId = 0;\n        if (!empty($_GET['course_id']) && !empty($_GET['session_id'])) {\n            $sessionId = intval($_GET['session_id']);\n            $courseId = intval($_GET['course_id']);\n        }\n        $sidx = in_array($sidx, $columns) ? $sidx : 'username';\n        $result = SessionManager::get_session_progress(\n            $sessionId,\n            $courseId,\n            null,\n            null,\n            [\n                'where' => $whereCondition,\n                'order' => \"$sidx $sord\",\n                'limit' => \"$start , $limit\",\n            ]\n        );\n        break;\n    case 'get_session_access_overview':\n        $columns = [\n            'logindate',\n            'username',\n            'lastname',\n            'firstname',\n            'clicks',\n            'ip',\n            'timeLoggedIn',\n            'session',\n        ];\n        $sessionId = 0;\n        if (!empty($_GET['course_id']) && !empty($_GET['session_id'])) {\n            $sessionId = intval($_GET['session_id']);\n            $courseId = intval($_GET['course_id']);\n            $studentId = intval($_GET['student_id']);\n            $profile = intval($_GET['profile']);\n            $date_from = intval($_GET['date_from']);\n            $date_to = intval($_GET['date_to']);\n        }\n        $sidx = in_array($sidx, $columns) ? $sidx : 'logindate';\n\n        $result = SessionManager::get_user_data_access_tracking_overview(\n            $sessionId,\n            $courseId,\n            $studentId,\n            $profile,\n            $date_to,\n            $date_from,\n            [\n                'where' => $whereCondition,\n                'order' => \"$sidx $sord\",\n                'limit' => \"$start , $limit\",\n            ]\n        );\n        break;\n    case 'get_timelines':\n        $columns = ['headline', 'actions'];\n\n        if (!in_array($sidx, $columns)) {\n            $sidx = 'headline';\n        }\n        $sidx = in_array($sidx, $columns) ? $sidx : 'headline';\n        $course_id = api_get_course_int_id();\n        $result = Database::select(\n            '*',\n            $obj->table,\n            [\n                'where' => [\n                    'parent_id = ? AND c_id = ?' => ['0', $course_id],\n                ],\n                'order' => \"$sidx $sord\",\n                'LIMIT' => \"$start , $limit\",\n            ]\n        );\n        $new_result = [];\n        foreach ($result as $item) {\n            if (!$item['status']) {\n                $item['name'] = '<font style=\"color:#AAA\">'.$item['name'].'</font>';\n            }\n            $item['headline'] = Display::url(\n                $item['headline'],\n                api_get_path(WEB_CODE_PATH).'timeline/view.php?id='.$item['id']\n            );\n            $item['actions'] = Display::url(\n                Display::return_icon('add.png', get_lang('Add items')),\n                api_get_path(WEB_CODE_PATH).'timeline/?action=add_item&parent_id='.$item['id']\n            );\n            $item['actions'] .= Display::url(\n                Display::return_icon('edit.png', get_lang('Edit')),\n                api_get_path(WEB_CODE_PATH).'timeline/?action=edit&id='.$item['id']\n            );\n            $item['actions'] .= Display::url(\n                Display::return_icon('delete.png', get_lang('Delete')),\n                api_get_path(WEB_CODE_PATH).'timeline/?action=delete&id='.$item['id']\n            );\n\n            $new_result[] = $item;\n        }\n        $result = $new_result;\n        break;\n    case 'get_gradebooks':\n        $columns = ['name', 'certificates', 'skills', 'actions', 'has_certificates'];\n        if (!in_array($sidx, $columns)) {\n            $sidx = 'name';\n        }\n        $result = Database::select(\n            '*',\n            $obj->table,\n            ['order' => \"$sidx $sord\", 'LIMIT' => \"$start , $limit\"]\n        );\n        $new_result = [];\n        foreach ($result as $item) {\n            if (0 != $item['parent_id']) {\n                continue;\n            }\n            $skills = $obj->getSkillsByGradebook($item['id']);\n            $courseId = $item['c_id'];\n            $courseInfo = api_get_course_info_by_id($courseId);\n\n            //Fixes bug when gradebook doesn't have names\n            if (empty($item['name'])) {\n                $item['name'] = $courseInfo['code'];\n            }\n\n            $item['name'] = Display::url(\n                $item['name'],\n                api_get_path(WEB_CODE_PATH).'gradebook/index.php?sid=0&cid='.$courseInfo['real_id']\n            );\n\n            if (!empty($item['certif_min_score']) && !empty($item['document_id'])) {\n                $item['certificates'] = Display::return_icon(\n                    'accept.png',\n                    get_lang('With Certificate'),\n                    [],\n                    ICON_SIZE_SMALL\n                );\n                $item['has_certificates'] = '1';\n            } else {\n                $item['certificates'] = Display::return_icon(\n                    'warning.png',\n                    get_lang('No certificate'),\n                    [],\n                    ICON_SIZE_SMALL\n                );\n                $item['has_certificates'] = '0';\n            }\n\n            if (!empty($skills)) {\n                $item['skills'] = '';\n                foreach ($skills as $skill) {\n                    $item['skills'] .= Display::span($skill['name'], ['class' => 'label_tag skill']);\n                }\n            }\n            $new_result[] = $item;\n        }\n        $result = $new_result;\n        break;\n    case 'get_careers':\n        $columns = ['name', 'description', 'actions'];\n        if (!in_array($sidx, $columns)) {\n            $sidx = 'name';\n        }\n        $result = Database::select(\n            '*',\n            $obj->table,\n            ['order' => \"$sidx $sord\", 'LIMIT' => \"$start , $limit\"]\n        );\n        $new_result = [];\n        foreach ($result as $item) {\n            if (!$item['status']) {\n                $item['name'] = '<font style=\"color:#AAA\">'.$item['name'].'</font>';\n            }\n            $new_result[] = $item;\n        }\n        $result = $new_result;\n        break;\n    case 'get_promotions':\n        $columns = ['name', 'career', 'description', 'actions'];\n        if (!in_array($sidx, $columns)) {\n            $sidx = 'name';\n        }\n\n        $result = Database::select(\n            'p.id,p.name, p.description, c.name as career, p.status',\n            \"$obj->table p LEFT JOIN \".Database::get_main_table(TABLE_CAREER).\" c  ON c.id = p.career_id \",\n            ['order' => \"$sidx $sord\", 'LIMIT' => \"$start , $limit\"]\n        );\n\n        $new_result = [];\n        foreach ($result as $item) {\n            if (!$item['status']) {\n                $item['name'] = '<font style=\"color:#AAA\">'.$item['name'].'</font>';\n            }\n            $new_result[] = $item;\n        }\n        $result = $new_result;\n        break;\n    case 'get_mail_template':\n        $columns = ['name', 'type', 'default_template', 'actions'];\n        if (!in_array($sidx, $columns)) {\n            $sidx = 'name';\n        }\n\n        if (!in_array($sidx, $columns)) {\n            $sidx = 'name';\n        }\n\n        $result = Database::select(\n            '*',\n            $obj->table,\n            [\n                'where' => ['url_id = ? ' => api_get_current_access_url_id()],\n                'order' => \"$sidx $sord\",\n                'LIMIT' => \"$start , $limit\",\n            ]\n        );\n\n        $new_result = [];\n        foreach ($result as $item) {\n            $new_result[] = $item;\n        }\n        $result = $new_result;\n        break;\n    case 'get_grade_models':\n        $columns = ['name', 'description', 'actions'];\n        if (!in_array($sidx, $columns)) {\n            $sidx = 'name';\n        }\n        $result = Database::select(\n            '*',\n            \"$obj->table \",\n            ['order' => \"$sidx $sord\", 'LIMIT' => \"$start , $limit\"]\n        );\n        $new_result = [];\n        foreach ($result as $item) {\n            $new_result[] = $item;\n        }\n        $result = $new_result;\n        break;\n    case 'get_usergroups':\n        $obj->protectScript();\n        $columns = ['name', 'users', 'courses', 'sessions', 'group_type', 'actions'];\n        $sidx = in_array($sidx, $columns) ? $sidx : 'name';\n        $result = $obj->getUsergroupsPagination($sidx, $sord, $start, $limit, $whereCondition);\n        break;\n    case 'get_extra_fields':\n        $obj = new ExtraField($type);\n        $columns = [\n            'display_text',\n            'variable',\n            'field_type',\n            'changeable',\n            'visible_to_self',\n            'visible_to_others',\n            'filter',\n            'field_order',\n        ];\n        $sidx = in_array($sidx, $columns) ? $sidx : 'display_text';\n        $result = $obj->getAllGrid($sidx, $sord, $start, $limit);\n        $new_result = [];\n        if (!empty($result)) {\n            $checkIcon = Display::return_icon(\n                'check-circle.png',\n                get_lang('Yes')\n            );\n            $timesIcon = Display::return_icon(\n                'closed-circle.png',\n                get_lang('No')\n            );\n            foreach ($result as $item) {\n                $item['display_text'] = ExtraField::translateDisplayName(\n                    $item['variable'],\n                    $item['displayText']\n                );\n                $item['field_type'] = $obj->get_field_type_by_id($item['fieldType']);\n                $item['changeable'] = $item['changeable'] ? $checkIcon : $timesIcon;\n                $item['visible_to_self'] = $item['visibleToSelf'] ? $checkIcon : $timesIcon;\n                $item['visible_to_others'] = $item['visibleToOthers'] ? $checkIcon : $timesIcon;\n                $item['filter'] = $item['filter'] ? $checkIcon : $timesIcon;\n                $new_result[] = $item;\n            }\n            $result = $new_result;\n        }\n        break;\n    case 'get_exercise_grade':\n        $objExercise = new Exercise();\n        $exercises = $objExercise->getExercisesByCourseSession($_GET['course_id'], $_GET['session_id']);\n        $cntExer = 4;\n        if (!empty($exercises)) {\n            $cntExer += count($exercises);\n        }\n\n        $columns = [];\n        //Get dynamic column names\n        $i = 1;\n        $column_names = [];\n        foreach (range(1, $cntExer) as $cnt) {\n            switch ($cnt) {\n                case 1:\n                    $columns[] = 'session';\n                    $column_names[] = get_lang('Section');\n                    break;\n                case 2:\n                    $columns[] = 'username';\n                    $column_names[] = get_lang('Username');\n                    break;\n                case 3:\n                    $columns[] = 'name';\n                    $column_names[] = get_lang('Name');\n                    break;\n                case $cntExer:\n                    $columns[] = 'finalScore';\n                    $column_names[] = get_lang('Final score');\n                    break;\n                default:\n                    $title = '';\n                    if (!empty($exercises[$cnt - 4]['title'])) {\n                        $title = ucwords(strtolower(trim($exercises[$cnt - 4]['title'])));\n                    }\n                    $columns[] = 'exer'.$i;\n                    $column_names[] = $title;\n                    $i++;\n                    break;\n            }\n        }\n\n        $quizIds = [];\n        if (!empty($exercises)) {\n            foreach ($exercises as $exercise) {\n                $quizIds[] = $exercise['id'];\n            }\n        }\n\n        $course = api_get_course_info_by_id($_GET['course_id']);\n        $listUserSess = CourseManager::get_student_list_from_course_code(\n            $course['code'],\n            true,\n            $_GET['session_id']\n        );\n\n        $usersId = array_keys($listUserSess);\n        $users = UserManager::get_user_list_by_ids(\n            $usersId,\n            null,\n            \"lastname, firstname\",\n            \"$start , $limit\"\n        );\n        $exeResults = $objExercise->getExerciseAndResult(\n            $_GET['course_id'],\n            $_GET['session_id'],\n            $quizIds\n        );\n\n        $arrGrade = [];\n        foreach ($exeResults as $exeResult) {\n            $arrGrade[$exeResult['exe_user_id']][$exeResult['exe_exo_id']] = $exeResult['score'];\n        }\n\n        $result = [];\n        $i = 0;\n        foreach ($users as $user) {\n            $sessionInfo = SessionManager::fetch($listUserSess[$user['user_id']]['id_session']);\n            $result[$i]['session'] = $sessionInfo['name'];\n            $result[$i]['username'] = $user['username'];\n            $result[$i]['name'] = $user['lastname'].\" \".$user['firstname'];\n            $j = 1;\n            $finalScore = 0;\n            foreach ($quizIds as $quizID) {\n                $grade = '';\n                if (!empty($arrGrade[$user['user_id']][$quizID]) || 0 == $arrGrade[$user['user_id']][$quizID]) {\n                    $finalScore += $grade = $arrGrade[$user['user_id']][$quizID];\n                }\n                $result[$i]['exer'.$j] = $grade;\n                $j++;\n            }\n\n            if ($finalScore > 20) {\n                $finalScore = 20;\n            }\n\n            $result[$i]['finalScore'] = number_format($finalScore, 2);\n\n            $i++;\n        }\n        break;\n    case 'get_extra_field_options':\n        $obj = new ExtraFieldOption($type);\n        $columns = ['display_text', 'option_value', 'option_order'];\n        $sidx = in_array($sidx, $columns) ? $sidx : 'display_text';\n        $result = $obj->get_all([\n                'where' => ['field_id = ? ' => $field_id],\n                'order' => \"$sidx $sord\",\n                'LIMIT' => \"$start , $limit\",\n        ]);\n        break;\n    case 'get_usergroups_teacher':\n        $columns = ['name', 'users', 'status', 'group_type', 'actions'];\n        $options['order'] = \"name $sord\";\n        $options['limit'] = \"$start , $limit\";\n        $options['session_id'] = $sessionId;\n        switch ($type) {\n            case 'not_registered':\n                if (empty($sessionId)) {\n                    $options['where'] = [' (course_id IS NULL OR course_id != ?) ' => $course_id];\n                } else {\n                    $options['where'] = [' (session_id IS NULL OR session_id != ?) ' => $sessionId];\n                }\n                if (!empty($keyword)) {\n                    $options['where']['AND name like %?% '] = $keyword;\n                }\n                $result = $obj->getUserGroupNotInCourse(\n                    $options,\n                    $groupFilter\n                );\n                break;\n            case 'registered':\n                $result = $obj->getUserGroupInCourse($options, $groupFilter);\n                break;\n        }\n\n        $new_result = [];\n        $currentUserId = api_get_user_id();\n        $isAllow = api_is_allowed_to_edit();\n        if (!empty($result)) {\n            $urlUserGroup = api_get_path(WEB_CODE_PATH).'admin/usergroup_users.php?'.api_get_cidreq();\n            foreach ($result as $group) {\n                $countUsers = count($obj->get_users_by_usergroup($group['id']));\n                $group['users'] = $countUsers;\n\n                if (!empty($countUsers)) {\n                    $group['users'] = Display::url(\n                        $countUsers,\n                        $urlUserGroup.'&id='.$group['id']\n                    );\n                }\n\n                if ($obj->usergroup_was_added_in_course(\n                    $group['id'],\n                    $course_id,\n                    api_get_session_id()\n                )) {\n                    $url = 'class.php?action=remove_class_from_course&id='.$group['id'].'&'.api_get_cidreq(\n                        ).'&id_session='.api_get_session_id();\n                    $icon = Display::return_icon('delete.png', get_lang('Remove'));\n                } else {\n                    $url = 'class.php?action=add_class_to_course&id='.$group['id'].'&'.api_get_cidreq(\n                        ).'&type=not_registered';\n                    $icon = Display::return_icon('add.png', get_lang('Add'));\n                }\n\n                switch ($group['group_type']) {\n                    case 0:\n                        $group['group_type'] = Display::label(get_lang('Class'), 'primary');\n                        break;\n                    case 1:\n                        $group['group_type'] = Display::label(get_lang('Social'), 'success');\n                        break;\n                }\n\n                $role = $obj->getUserRoleToString(api_get_user_id(), $group['id']);\n                $group['status'] = $role;\n                $group['actions'] = '';\n\n                if ($isAllow) {\n                    if ($obj->allowTeachers() && $group['author_id'] == $currentUserId) {\n                        $group['actions'] .= Display::url(\n                                Display::return_icon('statistics.png', get_lang('Statistics')),\n                                $urlUserGroup.'&id='.$group['id']\n                            ).'&nbsp;';\n                    }\n                    $group['actions'] .= Display::url($icon, $url);\n                }\n                $new_result[] = $group;\n            }\n            $result = $new_result;\n        }\n\n        if (!in_array($sidx, $columns)) {\n            $sidx = 'name';\n        }\n        // Multidimensional sort\n        $result = msort($result, $sidx, $sord);\n        break;\n    default:\n        exit;\n}\n\n$allowed_actions = [\n    'get_careers',\n    'get_promotions',\n    'get_mail_template',\n    'get_usergroups',\n    'get_usergroups_teacher',\n    'get_gradebooks',\n    'get_sessions',\n    'get_session_access_overview',\n    'get_sessions_tracking',\n    'get_session_lp_progress',\n    'get_survey_overview',\n    'get_session_progress',\n    'get_exercise_progress',\n    'get_exercise_results',\n    'get_exercise_pending_results',\n    'get_exercise_results_report',\n    'get_work_student_list_overview',\n    'get_work_teacher',\n    'get_work_student',\n    'get_all_work_student',\n    'get_work_user_list',\n    'get_work_user_list_others',\n    'get_work_user_list_all',\n    'get_work_pending_list',\n    'get_timelines',\n    'get_grade_models',\n    'get_user_skill_ranking',\n    'get_extra_fields',\n    'get_extra_field_options',\n    //'get_course_exercise_medias',\n    'get_user_course_report',\n    'get_user_course_report_resumed',\n    'get_exercise_grade',\n    'get_group_reporting',\n    'get_course_announcements',\n    'get_programmed_announcements',\n    'course_log_events',\n    'get_learning_path_calendars',\n    'get_usergroups_users',\n    'get_calendar_users',\n    'get_exercise_categories',\n];\n\n// 5. Creating an obj to return a json\nif (in_array($action, $allowed_actions)) {\n    $response = new stdClass();\n    $response->page = $page;\n    $response->total = $total_pages;\n    $response->records = $count;\n\n    if ($operation && 'excel' == $operation) {\n        $j = 1;\n        $array = [];\n        if (empty($column_names)) {\n            $column_names = $columns;\n        }\n\n        // Headers\n        foreach ($column_names as $col) {\n            // Overwrite titles\n            if (isset($overwriteColumnHeaderExport[$col])) {\n                $col = $overwriteColumnHeaderExport[$col];\n            }\n            $array[0][] = $col;\n        }\n\n        foreach ($result as $row) {\n            foreach ($columns as $col) {\n                $array[$j][] = strip_tags($row[$col]);\n            }\n            $j++;\n        }\n\n        $fileName = !empty($action) ? $action : 'company_report';\n        if (!empty($exportFilename)) {\n            $fileName = $exportFilename;\n        }\n\n        switch ($exportFormat) {\n            case 'xls':\n                Export::arrayToXls($array, $fileName);\n                break;\n            case 'xls_html':\n                //TODO add date if exists\n                Export::export_table_xls_html($array, $fileName);\n                break;\n            case 'csv':\n            default:\n                Export::arrayToCsv($array, $fileName);\n                break;\n        }\n        exit;\n    }\n    $i = 0;\n    if (!empty($result)) {\n        foreach ($result as $row) {\n            // if results tab give not id, set id to $i otherwise id=\"null\"\n            // for all <tr> of the jqgrid - ref #4235\n            if (!isset($row['id']) || isset($row['id']) && '' == $row['id']) {\n                $response->rows[$i]['id'] = $i;\n            } else {\n                $response->rows[$i]['id'] = $row['id'];\n            }\n            $array = [];\n            foreach ($columns as $col) {\n                if (in_array($col, ['correction', 'actions'])) {\n                    $array[] = isset($row[$col]) ? $row[$col] : '';\n                } else {\n                    $array[] = isset($row[$col]) ? Security::remove_XSS($row[$col]) : '';\n                }\n            }\n            $response->rows[$i]['cell'] = $array;\n            $i++;\n        }\n    }\n\n    header('Content-Type: application/json;charset=utf-8');\n    echo json_encode($response);\n}\nexit;\n", "<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Doctrine\\Common\\Annotations\\AnnotationRegistry;\nuse Doctrine\\Common\\EventManager;\nuse Doctrine\\DBAL\\Connection;\nuse Doctrine\\DBAL\\Driver\\Statement;\nuse Doctrine\\DBAL\\Types\\Type;\nuse Doctrine\\ORM\\Configuration;\nuse Doctrine\\ORM\\EntityManager;\n\nclass Database\n{\n    /**\n     * @var EntityManager\n     */\n    private static $em;\n    private static $connection;\n\n    /**\n     * Setup doctrine only for the installation.\n     *\n     * @param array  $params\n     * @param string $entityRootPath\n     */\n    public function connect($params = [], $entityRootPath = '')\n    {\n        $config = self::getDoctrineConfig($entityRootPath);\n        $config->setAutoGenerateProxyClasses(true);\n        $config->setEntityNamespaces(\n            [\n                'ChamiloCoreBundle' => 'Chamilo\\CoreBundle\\Entity',\n                'ChamiloCourseBundle' => 'Chamilo\\CourseBundle\\Entity',\n            ]\n        );\n\n        $params['charset'] = 'utf8';\n        $sysPath = api_get_path(SYMFONY_SYS_PATH);\n\n        $cache = new Doctrine\\Common\\Cache\\ArrayCache();\n        // standard annotation reader\n        $annotationReader = new Doctrine\\Common\\Annotations\\AnnotationReader();\n        $cachedAnnotationReader = new Doctrine\\Common\\Annotations\\CachedReader(\n            $annotationReader, // use reader\n            $cache // and a cache driver\n        );\n\n        $evm = new EventManager();\n        $timestampableListener = new Gedmo\\Timestampable\\TimestampableListener();\n        $timestampableListener->setAnnotationReader($cachedAnnotationReader);\n        $evm->addEventSubscriber($timestampableListener);\n\n        $driverChain = new \\Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain();\n        // load superclass metadata mapping only, into driver chain\n        // also registers Gedmo annotations.NOTE: you can personalize it\n        Gedmo\\DoctrineExtensions::registerAbstractMappingIntoDriverChainORM(\n            $driverChain, // our metadata driver chain, to hook into\n            $cachedAnnotationReader // our cached annotation reader\n        );\n\n        AnnotationRegistry::registerLoader(\n            function ($class) use ($sysPath) {\n                $file = str_replace(\"\\\\\", DIRECTORY_SEPARATOR, $class).\".php\";\n                $file = str_replace('Symfony/Component/Validator', '', $file);\n                $file = str_replace('Symfony\\Component\\Validator', '', $file);\n                $file = str_replace('Symfony/Component/Serializer', '', $file);\n\n                $fileToInclude = $sysPath.'vendor/symfony/validator/'.$file;\n\n                if (file_exists($fileToInclude)) {\n                    // file exists makes sure that the loader fails silently\n                    require_once $fileToInclude;\n\n                    return true;\n                }\n\n                $fileToInclude = $sysPath.'vendor/symfony/validator/Constraints/'.$file;\n                if (file_exists($fileToInclude)) {\n                    // file exists makes sure that the loader fails silently\n                    require_once $fileToInclude;\n\n                    return true;\n                }\n\n                $fileToInclude = $sysPath.'vendor/symfony/serializer/'.$file;\n\n                if (file_exists($fileToInclude)) {\n                    // file exists makes sure that the loader fails silently\n                    require_once $fileToInclude;\n\n                    return true;\n                }\n            }\n        );\n\n        AnnotationRegistry::registerFile(\n            $sysPath.'vendor/api-platform/core/src/Annotation/ApiResource.php'\n        );\n        AnnotationRegistry::registerFile(\n            $sysPath.'vendor/api-platform/core/src/Annotation/ApiFilter.php'\n        );\n        AnnotationRegistry::registerFile(\n            $sysPath.'vendor/api-platform/core/src/Annotation/ApiProperty.php'\n        );\n        AnnotationRegistry::registerFile(\n            $sysPath.'vendor/api-platform/core/src/Annotation/ApiSubresource.php'\n        );\n\n        $entityManager = EntityManager::create($params, $config, $evm);\n\n        if (false === Type::hasType('uuid')) {\n            Type::addType('uuid', \\Symfony\\Bridge\\Doctrine\\Types\\UuidType::class);\n        }\n\n        $connection = $entityManager->getConnection();\n        AnnotationRegistry::registerFile(\n            $sysPath.'vendor/symfony/doctrine-bridge/Validator/Constraints/UniqueEntity.php'\n        );\n\n        $this->setConnection($connection);\n        $this->setManager($entityManager);\n    }\n\n    /**\n     * @param EntityManager $em\n     */\n    public static function setManager($em)\n    {\n        self::$em = $em;\n    }\n\n    public static function setConnection(Connection $connection)\n    {\n        self::$connection = $connection;\n    }\n\n    /**\n     * @return Connection\n     */\n    public static function getConnection()\n    {\n        return self::$connection;\n    }\n\n    /**\n     * @return EntityManager\n     */\n    public static function getManager()\n    {\n        return self::$em;\n    }\n\n    /**\n     * Returns the name of the main database.\n     *\n     * @return string\n     */\n    public static function get_main_database()\n    {\n        return self::getManager()->getConnection()->getDatabase();\n    }\n\n    /**\n     * Get main table.\n     *\n     * @param string $table\n     *\n     * @return string\n     */\n    public static function get_main_table($table)\n    {\n        return $table;\n    }\n\n    /**\n     * Get course table.\n     *\n     * @param string $table\n     *\n     * @return string\n     */\n    public static function get_course_table($table)\n    {\n        return DB_COURSE_PREFIX.$table;\n    }\n\n    /**\n     * Counts the number of rows in a table.\n     *\n     * @param string $table The table of which the rows should be counted\n     *\n     * @return int the number of rows in the given table\n     *\n     * @deprecated\n     */\n    public static function count_rows($table)\n    {\n        $obj = self::fetch_object(self::query(\"SELECT COUNT(*) AS n FROM $table\"));\n\n        return $obj->n;\n    }\n\n    /**\n     * Returns the number of affected rows in the last database operation.\n     *\n     * @return int\n     */\n    public static function affected_rows($result)\n    {\n        return $result->rowCount();\n    }\n\n    /**\n     * Escapes a string to insert into the database as text.\n     *\n     * @param string $string\n     *\n     * @return string\n     */\n    public static function escape_string($string)\n    {\n        $string = self::getManager()->getConnection()->quote($string);\n        // The quote method from PDO also adds quotes around the string, which\n        // is not how the legacy mysql_real_escape_string() was used in\n        // Chamilo, so we need to remove the quotes around. Using trim will\n        // remove more than one quote if they are sequenced, generating\n        // broken queries and SQL injection risks\n        return substr($string, 1, -1);\n    }\n\n    /**\n     * Gets the array from a SQL result (as returned by Database::query).\n     *\n     * @param string $option Optional: \"ASSOC\",\"NUM\" or \"BOTH\"\n     *\n     * @return array|mixed\n     */\n    public static function fetch_array($result, $option = 'BOTH')\n    {\n        if (false === $result) {\n            return [];\n        }\n\n        return $result->fetch(self::customOptionToDoctrineOption($option));\n    }\n\n    /**\n     * Gets an associative array from a SQL result (as returned by Database::query).\n     *\n     * @return array\n     */\n    public static function fetch_assoc($result)\n    {\n        return $result->fetch(PDO::FETCH_ASSOC);\n    }\n\n    /**\n     * Gets the next row of the result of the SQL query\n     * (as returned by Database::query) in an object form.\n     *\n     * @return mixed\n     */\n    public static function fetch_object($result)\n    {\n        return $result->fetch(PDO::FETCH_OBJ);\n    }\n\n    /**\n     * Gets the array from a SQL result (as returned by Database::query)\n     * help achieving database independence.\n     *\n     * @return mixed\n     */\n    public static function fetch_row($result)\n    {\n        if (false === $result) {\n            return [];\n        }\n\n        return $result->fetch(PDO::FETCH_NUM);\n    }\n\n    /**\n     * Gets the ID of the last item inserted into the database.\n     *\n     * @return string\n     */\n    public static function insert_id()\n    {\n        return self::getManager()->getConnection()->lastInsertId();\n    }\n\n    /**\n     * @return int\n     */\n    public static function num_rows($result)\n    {\n        if (false === $result) {\n            return 0;\n        }\n\n        return $result->rowCount();\n    }\n\n    /**\n     * Acts as the relative *_result() function of most DB drivers and fetches a\n     * specific line and a field.\n     *\n     * @param int    $row\n     * @param string $field\n     *\n     * @return mixed\n     */\n    public static function result($resource, $row, $field = '')\n    {\n        if ($resource->rowCount() > 0) {\n            $result = $resource->fetchAll(PDO::FETCH_BOTH);\n\n            return $result[$row][$field];\n        }\n\n        return false;\n    }\n\n    /**\n     * @param string $query\n     *\n     * @return Statement\n     */\n    public static function query($query)\n    {\n        $connection = self::getManager()->getConnection();\n        $result = null;\n        try {\n            $result = $connection->executeQuery($query);\n        } catch (Exception $e) {\n            self::handleError($e);\n        }\n\n        return $result;\n    }\n\n    /**\n     * @param Exception $e\n     */\n    public static function handleError($e)\n    {\n        $debug = 'test' === api_get_setting('server_type');\n        if ($debug) {\n            throw $e;\n            exit;\n        } else {\n            error_log($e->getMessage());\n            api_not_allowed(false, get_lang('An error has occurred. Please contact your system administrator.'));\n            exit;\n        }\n    }\n\n    /**\n     * @param string $option\n     *\n     * @return int\n     */\n    public static function customOptionToDoctrineOption($option)\n    {\n        switch ($option) {\n            case 'ASSOC':\n                return PDO::FETCH_ASSOC;\n                break;\n            case 'NUM':\n                return PDO::FETCH_NUM;\n                break;\n            case 'BOTH':\n            default:\n                return PDO::FETCH_BOTH;\n                break;\n        }\n    }\n\n    /**\n     * Stores a query result into an array.\n     *\n     * @author Olivier Brouckaert\n     *\n     * @param Statement $result - the return value of the query\n     * @param string    $option BOTH, ASSOC, or NUM\n     *\n     * @return array - the value returned by the query\n     */\n    public static function store_result($result, $option = 'BOTH')\n    {\n        return $result->fetchAll(self::customOptionToDoctrineOption($option));\n    }\n\n    /**\n     * Database insert.\n     *\n     * @param string $table_name\n     * @param array  $attributes\n     * @param bool   $show_query\n     *\n     * @return false|int\n     */\n    public static function insert($table_name, $attributes, $show_query = false)\n    {\n        if (empty($attributes) || empty($table_name)) {\n            return false;\n        }\n\n        $params = array_keys($attributes);\n\n        if (!empty($params)) {\n            $sql = 'INSERT INTO '.$table_name.' ('.implode(',', $params).')\n                    VALUES (:'.implode(', :', $params).')';\n\n            if ($show_query) {\n                var_dump($sql);\n                error_log($sql);\n            }\n\n            $result = false;\n            try {\n                $statement = self::getConnection()->prepare($sql);\n                $result = $statement->execute($attributes);\n            } catch (Exception $e) {\n                self::handleError($e);\n            }\n\n            if ($result) {\n                return (int) self::getManager()->getConnection()->lastInsertId();\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param string $tableName       use Database::get_main_table\n     * @param array  $attributes      Values to updates\n     *                                Example: $params['name'] = 'Julio'; $params['lastname'] = 'Montoya';\n     * @param array  $whereConditions where conditions i.e array('id = ?' =>'4')\n     * @param bool   $showQuery\n     *\n     * @return bool|int\n     */\n    public static function update(\n        $tableName,\n        $attributes,\n        $whereConditions = [],\n        $showQuery = false\n    ) {\n        if (!empty($tableName) && !empty($attributes)) {\n            $updateSql = '';\n            $count = 1;\n\n            foreach ($attributes as $key => $value) {\n                if ($showQuery) {\n                    echo $key.': '.$value.PHP_EOL;\n                }\n                $updateSql .= \"$key = :$key \";\n                if ($count < count($attributes)) {\n                    $updateSql .= ', ';\n                }\n                $count++;\n            }\n\n            if (!empty($updateSql)) {\n                // Parsing and cleaning the where conditions\n                $whereReturn = self::parse_where_conditions($whereConditions);\n                $sql = \"UPDATE $tableName SET $updateSql $whereReturn \";\n\n                try {\n                    $statement = self::getManager()->getConnection()->prepare($sql);\n                    $result = $statement->execute($attributes);\n                } catch (Exception $e) {\n                    self::handleError($e);\n                }\n\n                if ($showQuery) {\n                    var_dump($sql);\n                    var_dump($attributes);\n                    var_dump($whereConditions);\n                }\n\n                if ($result && $statement) {\n                    return $statement->rowCount();\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Experimental useful database finder.\n     *\n     * @param mixed|array $columns\n     * @param string      $table_name\n     * @param array       $conditions\n     * @param string      $type_result\n     * @param string      $option\n     * @param bool        $debug\n     *\n     * @return array\n     *\n     * @todo    lot of stuff to do here\n     * @todo    known issues, it doesn't work when using LIKE conditions\n     *\n     * @example array('where'=> array('course_code LIKE \"?%\"'))\n     * @example array('where'=> array('type = ? AND category = ?' => array('setting', 'Plugins'))\n     * @example array('where'=> array('name = \"Julio\" AND lastname = \"montoya\"'))\n     */\n    public static function select(\n        $columns,\n        $table_name,\n        $conditions = [],\n        $type_result = 'all',\n        $option = 'ASSOC',\n        $debug = false\n    ) {\n        if ($type_result === 'count') {\n            $conditions['LIMIT'] = null;\n            $conditions['limit'] = null;\n        }\n        $conditions = self::parse_conditions($conditions);\n\n        //@todo we could do a describe here to check the columns ...\n        if (is_array($columns)) {\n            $clean_columns = implode(',', $columns);\n        } else {\n            if ('*' === $columns) {\n                $clean_columns = '*';\n            } else {\n                $clean_columns = (string) $columns;\n            }\n        }\n\n        if ($type_result === 'count') {\n            $clean_columns = ' count(*) count ';\n        }\n        $sql = \"SELECT $clean_columns FROM $table_name $conditions\";\n        if ($debug) {\n            var_dump($sql);\n        }\n        $result = self::query($sql);\n        if ($type_result === 'count') {\n            $row = self::fetch_array($result, $option);\n            if ($row) {\n                return (int) $row['count'];\n            }\n\n            return 0;\n        }\n        $array = [];\n\n        if ('all' === $type_result) {\n            while ($row = self::fetch_array($result, $option)) {\n                if (isset($row['id'])) {\n                    $array[$row['id']] = $row;\n                } else {\n                    $array[] = $row;\n                }\n            }\n        } else {\n            $array = self::fetch_array($result, $option);\n        }\n\n        return $array;\n    }\n\n    /**\n     * Parses WHERE/ORDER conditions i.e array('where'=>array('id = ?' =>'4'), 'order'=>'id DESC').\n     *\n     * @todo known issues, it doesn't work when using\n     * LIKE conditions example: array('where'=>array('course_code LIKE \"?%\"'))\n     *\n     * @param array $conditions\n     *\n     * @return string Partial SQL string to add to longer query\n     */\n    public static function parse_conditions($conditions)\n    {\n        if (empty($conditions)) {\n            return '';\n        }\n        $return_value = $where_return = '';\n        foreach ($conditions as $type_condition => $condition_data) {\n            if (false == $condition_data) {\n                continue;\n            }\n            $type_condition = strtolower($type_condition);\n            switch ($type_condition) {\n                case 'where':\n                    foreach ($condition_data as $condition => $value_array) {\n                        if (is_array($value_array)) {\n                            $clean_values = [];\n                            foreach ($value_array as $item) {\n                                $item = self::escape_string($item);\n                                $clean_values[] = $item;\n                            }\n                        } else {\n                            $value_array = self::escape_string($value_array);\n                            $clean_values = [$value_array];\n                        }\n\n                        if (!empty($condition) && '' != $clean_values) {\n                            $condition = str_replace('%', \"'@percentage@'\", $condition); //replace \"%\"\n                            $condition = str_replace(\"'?'\", \"%s\", $condition);\n                            $condition = str_replace(\"?\", \"%s\", $condition);\n\n                            $condition = str_replace(\"@%s@\", \"@-@\", $condition);\n                            $condition = str_replace(\"%s\", \"'%s'\", $condition);\n                            $condition = str_replace(\"@-@\", \"@%s@\", $condition);\n\n                            // Treat conditions as string\n                            $condition = vsprintf($condition, $clean_values);\n                            $condition = str_replace('@percentage@', '%', $condition); //replace \"%\"\n                            $where_return .= $condition;\n                        }\n                    }\n\n                    if (!empty($where_return)) {\n                        $return_value = \" WHERE $where_return\";\n                    }\n                    break;\n                case 'order':\n                    $order_array = $condition_data;\n\n                    if (!empty($order_array)) {\n                        // 'order' => 'id desc, name desc'\n                        $order_array = self::escape_string($order_array);\n                        $new_order_array = explode(',', $order_array);\n                        $temp_value = [];\n\n                        foreach ($new_order_array as $element) {\n                            $element = explode(' ', $element);\n                            $element = array_filter($element);\n                            $element = array_values($element);\n\n                            if (!empty($element[1])) {\n                                $element[1] = strtolower($element[1]);\n                                $order = 'DESC';\n                                if (in_array($element[1], ['desc', 'asc'])) {\n                                    $order = $element[1];\n                                }\n                                $temp_value[] = ' `'.$element[0].'` '.$order.' ';\n                            } else {\n                                //by default DESC\n                                $temp_value[] = ' `'.$element[0].'` DESC ';\n                            }\n                        }\n                        if (!empty($temp_value)) {\n                            $return_value .= ' ORDER BY '.implode(', ', $temp_value);\n                        }\n                    }\n                    break;\n                case 'limit':\n                    $limit_array = explode(',', $condition_data);\n                    if (!empty($limit_array)) {\n                        if (count($limit_array) > 1) {\n                            $return_value .= ' LIMIT '.intval($limit_array[0]).' , '.intval($limit_array[1]);\n                        } else {\n                            $return_value .= ' LIMIT '.intval($limit_array[0]);\n                        }\n                    }\n                    break;\n            }\n        }\n\n        return $return_value;\n    }\n\n    /**\n     * @param array $conditions\n     *\n     * @return string\n     */\n    public static function parse_where_conditions($conditions)\n    {\n        return self::parse_conditions(['where' => $conditions]);\n    }\n\n    /**\n     * @param string $table_name\n     * @param array  $where_conditions\n     * @param bool   $show_query\n     *\n     * @return int\n     */\n    public static function delete($table_name, $where_conditions, $show_query = false)\n    {\n        $where_return = self::parse_where_conditions($where_conditions);\n        $sql = \"DELETE FROM $table_name $where_return \";\n        if ($show_query) {\n            echo $sql;\n            echo '<br />';\n        }\n        $result = self::query($sql);\n        $affected_rows = self::affected_rows($result);\n        //@todo should return affected_rows for\n        return $affected_rows;\n    }\n\n    /**\n     * Get Doctrine configuration.\n     *\n     * @param string $path\n     *\n     * @return Configuration\n     */\n    public static function getDoctrineConfig($path)\n    {\n        $isDevMode = true; // Forces doctrine to use ArrayCache instead of apc/xcache/memcache/redis\n        $isSimpleMode = false; // related to annotations @Entity\n        $cache = null;\n        $path = !empty($path) ? $path : api_get_path(SYMFONY_SYS_PATH);\n\n        $paths = [\n            $path.'src/Chamilo/CoreBundle/Entity',\n            $path.'src/Chamilo/CourseBundle/Entity',\n        ];\n\n        $proxyDir = $path.'var/cache/';\n\n        return \\Doctrine\\ORM\\Tools\\Setup::createAnnotationMetadataConfiguration(\n            $paths,\n            $isDevMode,\n            $proxyDir,\n            $cache,\n            $isSimpleMode\n        );\n    }\n\n    /**\n     * @param string $table\n     *\n     * @return bool\n     */\n    public static function tableExists($table)\n    {\n        return self::getManager()->getConnection()->getSchemaManager()->tablesExist($table);\n    }\n\n    /**\n     * @param string $table\n     *\n     * @return \\Doctrine\\DBAL\\Schema\\Column[]\n     */\n    public static function listTableColumns($table)\n    {\n        return self::getManager()->getConnection()->getSchemaManager()->listTableColumns($table);\n    }\n\n    public static function escapeField($field)\n    {\n        return self::escape_string(preg_replace(\"/[^a-zA-Z0-9_]/\", '', $field));\n    }\n}\n", "<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CoreBundle\\Entity\\Asset;\nuse Chamilo\\CoreBundle\\Entity\\ExtraField as EntityExtraField;\nuse Chamilo\\CoreBundle\\Entity\\ExtraFieldRelTag;\nuse Chamilo\\CoreBundle\\Entity\\Tag;\nuse Chamilo\\CoreBundle\\Framework\\Container;\n\n/**\n * Class ExtraField.\n */\nclass ExtraField extends Model\n{\n    public const FIELD_TYPE_TEXT = 1;\n    public const FIELD_TYPE_TEXTAREA = 2;\n    public const FIELD_TYPE_RADIO = 3;\n    public const FIELD_TYPE_SELECT = 4;\n    public const FIELD_TYPE_SELECT_MULTIPLE = 5;\n    public const FIELD_TYPE_DATE = 6;\n    public const FIELD_TYPE_DATETIME = 7;\n    public const FIELD_TYPE_DOUBLE_SELECT = 8;\n    public const FIELD_TYPE_DIVIDER = 9;\n    public const FIELD_TYPE_TAG = 10;\n    public const FIELD_TYPE_TIMEZONE = 11;\n    public const FIELD_TYPE_SOCIAL_PROFILE = 12;\n    public const FIELD_TYPE_CHECKBOX = 13;\n    public const FIELD_TYPE_MOBILE_PHONE_NUMBER = 14;\n    public const FIELD_TYPE_INTEGER = 15;\n    public const FIELD_TYPE_FILE_IMAGE = 16;\n    public const FIELD_TYPE_FLOAT = 17;\n    public const FIELD_TYPE_FILE = 18;\n    public const FIELD_TYPE_VIDEO_URL = 19;\n    public const FIELD_TYPE_LETTERS_ONLY = 20;\n    public const FIELD_TYPE_ALPHANUMERIC = 21;\n    public const FIELD_TYPE_LETTERS_SPACE = 22;\n    public const FIELD_TYPE_ALPHANUMERIC_SPACE = 23;\n    public const FIELD_TYPE_GEOLOCALIZATION = 24;\n    public const FIELD_TYPE_GEOLOCALIZATION_COORDINATES = 25;\n    public const FIELD_TYPE_SELECT_WITH_TEXT_FIELD = 26;\n    public const FIELD_TYPE_TRIPLE_SELECT = 27;\n\n    public $columns = [\n        'id',\n        'field_type',\n        'variable',\n        'description',\n        'display_text',\n        'default_value',\n        'field_order',\n        'visible_to_self',\n        'visible_to_others',\n        'changeable',\n        'filter',\n        'extra_field_type',\n        //Enable this when field_loggeable is introduced as a table field (2.0)\n        //'field_loggeable',\n        'created_at',\n    ];\n\n    public $ops = [\n        'eq' => '=', //equal\n        'ne' => '<>', //not equal\n        'lt' => '<', //less than\n        'le' => '<=', //less than or equal\n        'gt' => '>', //greater than\n        'ge' => '>=', //greater than or equal\n        'bw' => 'LIKE', //begins with\n        'bn' => 'NOT LIKE', //doesn't begin with\n        'in' => 'LIKE', //is in\n        'ni' => 'NOT LIKE', //is not in\n        'ew' => 'LIKE', //ends with\n        'en' => 'NOT LIKE', //doesn't end with\n        'cn' => 'LIKE', //contains\n        'nc' => 'NOT LIKE',  //doesn't contain\n    ];\n\n    public $type = 'user';\n    public $pageName;\n    public $pageUrl;\n    public $extraFieldType = 0;\n    public $table_field_options;\n    public $table_field_values;\n    public $table_field_tag;\n    public $table_field_rel_tag;\n    public $handler_id;\n    public $primaryKey;\n\n    /**\n     * @param string $type\n     */\n    public function __construct($type)\n    {\n        parent::__construct();\n\n        $this->type = $type;\n        $this->table = Database::get_main_table(TABLE_EXTRA_FIELD);\n        $this->table_field_options = Database::get_main_table(TABLE_EXTRA_FIELD_OPTIONS);\n        $this->table_field_values = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $this->table_field_tag = Database::get_main_table(TABLE_MAIN_TAG);\n        $this->table_field_rel_tag = Database::get_main_table(TABLE_MAIN_EXTRA_FIELD_REL_TAG);\n        $this->handler_id = 'item_id';\n\n        switch ($this->type) {\n            case 'calendar_event':\n                $this->extraFieldType = EntityExtraField::CALENDAR_FIELD_TYPE;\n                break;\n            case 'course':\n                $this->extraFieldType = EntityExtraField::COURSE_FIELD_TYPE;\n                $this->primaryKey = 'id';\n                break;\n            case 'user':\n                $this->extraFieldType = EntityExtraField::USER_FIELD_TYPE;\n                $this->primaryKey = 'id';\n                break;\n            case 'session':\n                $this->extraFieldType = EntityExtraField::SESSION_FIELD_TYPE;\n                $this->primaryKey = 'id';\n                break;\n            case 'exercise':\n                $this->extraFieldType = EntityExtraField::EXERCISE_FIELD_TYPE;\n                break;\n            case 'question':\n                $this->extraFieldType = EntityExtraField::QUESTION_FIELD_TYPE;\n                break;\n            case 'lp':\n                $this->extraFieldType = EntityExtraField::LP_FIELD_TYPE;\n                break;\n            case 'lp_item':\n                $this->extraFieldType = EntityExtraField::LP_ITEM_FIELD_TYPE;\n                break;\n            case 'skill':\n                $this->extraFieldType = EntityExtraField::SKILL_FIELD_TYPE;\n                break;\n            case 'work':\n                $this->extraFieldType = EntityExtraField::WORK_FIELD_TYPE;\n                break;\n            case 'career':\n                $this->extraFieldType = EntityExtraField::CAREER_FIELD_TYPE;\n                break;\n            case 'user_certificate':\n                $this->extraFieldType = EntityExtraField::USER_CERTIFICATE;\n                break;\n            case 'survey':\n                $this->extraFieldType = EntityExtraField::SURVEY_FIELD_TYPE;\n                break;\n            case 'scheduled_announcement':\n                $this->extraFieldType = EntityExtraField::SCHEDULED_ANNOUNCEMENT;\n                break;\n            case 'terms_and_condition':\n                $this->extraFieldType = EntityExtraField::TERMS_AND_CONDITION_TYPE;\n                break;\n            case 'forum_category':\n                $this->extraFieldType = EntityExtraField::FORUM_CATEGORY_TYPE;\n                break;\n            case 'forum_post':\n                $this->extraFieldType = EntityExtraField::FORUM_POST_TYPE;\n                break;\n            case 'track_exercise':\n                $this->extraFieldType = EntityExtraField::TRACK_EXERCISE_FIELD_TYPE;\n                break;\n            case 'portfolio':\n                $this->extraFieldType = EntityExtraField::PORTFOLIO_TYPE;\n                break;\n            case 'lp_view':\n                $this->extraFieldType = EntityExtraField::LP_VIEW_TYPE;\n        }\n\n        $this->pageUrl = 'extra_fields.php?type='.$this->type;\n        // Example QuestionFields\n        $this->pageName = ucwords($this->type).'Fields';\n    }\n\n    /**\n     * @return array\n     */\n    public static function getValidExtraFieldTypes()\n    {\n        $result = [\n            'user',\n            'course',\n            'session',\n            'question',\n            'lp',\n            'calendar_event',\n            'lp_item',\n            'skill',\n            'work',\n            'career',\n            'user_certificate',\n            'survey',\n            'terms_and_condition',\n            'forum_category',\n            'forum_post',\n            'exercise',\n            'track_exercise',\n            'lp_view',\n        ];\n\n        if (api_get_configuration_value('allow_scheduled_announcements')) {\n            $result[] = 'scheduled_announcement';\n        }\n        if (api_get_configuration_value('allow_portfolio_tool')) {\n            $result[] = 'portfolio';\n        }\n        sort($result);\n\n        return $result;\n    }\n\n    /**\n     * Converts a string like this:\n     * France:Paris;Bretagne;Marseille;Lyon|Belgique:Bruxelles;Namur;Li\u00e8ge;Bruges|Peru:Lima;Piura;\n     * into\n     * array(\n     *   'France' =>\n     *      array('Paris', 'Bretagne', 'Marseille'),\n     *   'Belgique' =>\n     *      array('Namur', 'Li\u00e8ge')\n     * ), etc.\n     *\n     * @param string $string\n     *\n     * @return array\n     */\n    public static function extra_field_double_select_convert_string_to_array($string)\n    {\n        $options = explode('|', $string);\n        $options_parsed = [];\n        $id = 0;\n\n        if (!empty($options)) {\n            foreach ($options as $sub_options) {\n                $options = explode(':', $sub_options);\n                $sub_sub_options = isset($options[1]) ? explode(';', $options[1]) : [];\n                $options_parsed[$id] = [\n                    'label' => $options[0],\n                    'options' => $sub_sub_options,\n                ];\n                $id++;\n            }\n        }\n\n        return $options_parsed;\n    }\n\n    /**\n     * @param $string\n     *\n     * @return array\n     */\n    public static function tripleSelectConvertStringToArray($string)\n    {\n        $options = [];\n        foreach (explode('|', $string) as $i => $item0) {\n            $level1 = explode('\\\\', $item0);\n\n            foreach ($level1 as $j => $item1) {\n                if (0 === $j) {\n                    $options[] = ['label' => $item1, 'options' => []];\n\n                    continue;\n                }\n\n                foreach (explode(':', $item1) as $k => $item2) {\n                    if (0 === $k) {\n                        $options[$i]['options'][] = ['label' => $item2, 'options' => []];\n\n                        continue;\n                    }\n\n                    $options[$i]['options'][$j - 1]['options'][] = explode(';', $item2);\n                }\n            }\n        }\n\n        array_walk_recursive(\n            $options,\n            function (&$item) {\n                $item = trim($item);\n            }\n        );\n\n        return $options;\n    }\n\n    /**\n     * @param array $options the result of the get_field_options_by_field() array\n     *\n     * @return string\n     */\n    public static function extra_field_double_select_convert_array_to_string($options)\n    {\n        $string = null;\n        $optionsParsed = self::extra_field_double_select_convert_array_to_ordered_array($options);\n\n        if (!empty($optionsParsed)) {\n            foreach ($optionsParsed as $option) {\n                foreach ($option as $key => $item) {\n                    $string .= $item['display_text'];\n                    if (0 == $key) {\n                        $string .= ':';\n                    } else {\n                        if (isset($option[$key + 1])) {\n                            $string .= ';';\n                        }\n                    }\n                }\n                $string .= '|';\n            }\n        }\n\n        if (!empty($string)) {\n            $string = substr($string, 0, strlen($string) - 1);\n        }\n\n        return $string;\n    }\n\n    /**\n     * @param array $options The result of the get_field_options_by_field() array\n     *\n     * @return string\n     */\n    public static function extraFieldSelectWithTextConvertArrayToString(array $options)\n    {\n        $parsedOptions = self::extra_field_double_select_convert_array_to_ordered_array($options);\n\n        if (empty($parsedOptions)) {\n            return '';\n        }\n\n        $string = '';\n        foreach ($parsedOptions as $options) {\n            $option = current($options);\n            $string .= $option['display_text'];\n            $string .= '|';\n        }\n\n        return rtrim($string, '|');\n    }\n\n    /**\n     * @return string\n     */\n    public static function tripleSelectConvertArrayToString(array $options)\n    {\n        $parsedOptions = self::tripleSelectConvertArrayToOrderedArray($options);\n        $string = '';\n        foreach ($parsedOptions['level1'] as $item1) {\n            $string .= $item1['display_text'];\n            $level2 = self::getOptionsFromTripleSelect($parsedOptions['level2'], $item1['id']);\n\n            foreach ($level2 as $item2) {\n                $string .= '\\\\'.$item2['display_text'].':';\n                $level3 = self::getOptionsFromTripleSelect($parsedOptions['level3'], $item2['id']);\n\n                $string .= implode(';', array_column($level3, 'display_text'));\n            }\n\n            $string .= '|';\n        }\n\n        return trim($string, '\\\\|;');\n    }\n\n    /**\n     * @param string $variable\n     * @param string $dataValue\n     *\n     * @return string\n     */\n    public static function getLocalizationJavascript($variable, $dataValue)\n    {\n        $dataValue = addslashes($dataValue);\n        $html = \"<script>\n            $(function() {\n                if (typeof google === 'object') {\n                    var address = '$dataValue';\n                    initializeGeo{$variable}(address, false);\n\n                    $('#geolocalization_extra_{$variable}').on('click', function() {\n                        var address = $('#{$variable}').val();\n                        initializeGeo{$variable}(address, false);\n                        return false;\n                    });\n\n                    $('#myLocation_extra_{$variable}').on('click', function() {\n                        myLocation{$variable}();\n                        return false;\n                    });\n\n                    // When clicking enter\n                    $('#{$variable}').keypress(function(event) {\n                        if (event.which == 13) {\n                            $('#geolocalization_extra_{$variable}').click();\n                            return false;\n                        }\n                    });\n\n                    // On focus out update city\n                    $('#{$variable}').focusout(function() {\n                        $('#geolocalization_extra_{$variable}').click();\n                        return false;\n                    });\n\n                    return;\n                }\n\n                $('#map_extra_{$variable}')\n                    .html('<div class=\\\"alert alert-info\\\">\"\n            .addslashes(get_lang('YouNeedToActivateTheGoogleMapsPluginInAdminPlatformToSeeTheMap'))\n            .\"</div>');\n            });\n\n            function myLocation{$variable}()\n            {\n                if (navigator.geolocation) {\n                    var geoPosition = function(position) {\n                        var lat = position.coords.latitude;\n                        var lng = position.coords.longitude;\n                        var latLng = new google.maps.LatLng(lat, lng);\n                        initializeGeo{$variable}(false, latLng);\n                    };\n\n                    var geoError = function(error) {\n                        alert('Geocode \".get_lang('Error').\": ' + error);\n                    };\n\n                    var geoOptions = {\n                        enableHighAccuracy: true\n                    };\n                    navigator.geolocation.getCurrentPosition(geoPosition, geoError, geoOptions);\n                }\n            }\n\n            function initializeGeo{$variable}(address, latLng)\n            {\n                var geocoder = new google.maps.Geocoder();\n                var latlng = new google.maps.LatLng(-34.397, 150.644);\n                var myOptions = {\n                    zoom: 15,\n                    center: latlng,\n                    mapTypeControl: true,\n                    mapTypeControlOptions: {\n                        style: google.maps.MapTypeControlStyle.DROPDOWN_MENU\n                    },\n                    navigationControl: true,\n                    mapTypeId: google.maps.MapTypeId.ROADMAP\n                };\n\n                map_{$variable} = new google.maps.Map(\n                    document.getElementById('map_extra_{$variable}'),\n                    myOptions\n                );\n\n                var parameter = address ? {'address': address} : latLng ? {'latLng': latLng} : false;\n\n                if (geocoder && parameter) {\n                    geocoder.geocode(parameter, function(results, status) {\n                        if (status == google.maps.GeocoderStatus.OK) {\n                            if (status != google.maps.GeocoderStatus.ZERO_RESULTS) {\n                                map_{$variable}.setCenter(results[0].geometry.location);\n\n                                // get city and country\n                                var defaultAddress = results[0].formatted_address;\n                                var city = '';\n                                var country = '';\n\n                                for (var i=0; i<results[0].address_components.length; i++) {\n                                    if (results[0].address_components[i].types[0] == \\\"locality\\\") {\n                                        //this is the object you are looking for City\n                                        city = results[0].address_components[i];\n                                    }\n                                    /*if (results[j].address_components[i].types[0] == \\\"administrative_area_level_1\\\") {\n                                        //this is the object you are looking for State\n                                        region = results[0].address_components[i];\n                                    }*/\n                                    if (results[0].address_components[i].types[0] == \\\"country\\\") {\n                                        //this is the object you are looking for\n                                        country = results[0].address_components[i];\n                                    }\n                                }\n\n                                if (city && city.long_name && country && country.long_name) {\n                                    defaultAddress = city.long_name + ', ' + country.long_name;\n                                }\n                                $('#{$variable}').val(defaultAddress);\n                                $('#{$variable}_coordinates').val(\n                                    results[0].geometry.location.lat()+','+results[0].geometry.location.lng()\n                                );\n\n                                var infowindow = new google.maps.InfoWindow({\n                                    content: '<b>' + $('#extra_{$variable}').val() + '</b>',\n                                    size: new google.maps.Size(150, 50)\n                                });\n\n                                var marker = new google.maps.Marker({\n                                    position: results[0].geometry.location,\n                                    map: map_{$variable},\n                                    title: $('#extra_{$variable}').val()\n                                });\n                                google.maps.event.addListener(marker, 'click', function() {\n                                    infowindow.open(map_{$variable}, marker);\n                                });\n                            } else {\n                                alert('\".get_lang('NotFound').\"');\n                            }\n                        } else {\n                            alert('Geocode \".get_lang('Error').': '.get_lang('AddressField').' '.get_lang('NotFound').\"');\n                        }\n                    });\n                }\n            }\n            </script>\";\n\n        return $html;\n    }\n\n    /**\n     * @param string $variable\n     * @param string $text\n     *\n     * @return string\n     */\n    public static function getLocalizationInput($variable, $text)\n    {\n        $html = '\n                <div class=\"form-group\">\n                    <label for=\"geolocalization_extra_'.$variable.'\"\n                        class=\"col-sm-2 control-label\"></label>\n                    <div class=\"col-sm-8\">\n                        <button class=\"btn btn-default\"\n                            id=\"geolocalization_extra_'.$variable.'\"\n                            name=\"geolocalization_extra_'.$variable.'\"\n                            type=\"submit\">\n                            <em class=\"fa fa-map-marker\"></em> '.get_lang('SearchGeolocalization').'\n                        </button>\n                        <button class=\"btn btn-default\" id=\"myLocation_extra_'.$variable.'\"\n                            name=\"myLocation_extra_'.$variable.'\"\n                            type=\"submit\">\n                            <em class=\"fa fa-crosshairs\"></em> '.get_lang('MyLocation').'\n                        </button>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"map_extra_'.$variable.'\" class=\"col-sm-2 control-label\">\n                        '.$text.' - '.get_lang('Map').'\n                    </label>\n                    <div class=\"col-sm-8\">\n                        <div name=\"map_extra_'.$variable.'\"\n                            id=\"map_extra_'.$variable.'\" style=\"width:100%; height:300px;\">\n                        </div>\n                    </div>\n                </div>\n            ';\n\n        return $html;\n    }\n\n    /**\n     * @return int\n     */\n    public function get_count()\n    {\n        $em = Database::getManager();\n        $query = $em->getRepository(EntityExtraField::class)->createQueryBuilder('e');\n        $query->select('count(e.id)');\n        $query->where('e.extraFieldType = :type');\n        $query->setParameter('type', $this->getExtraFieldType());\n\n        return $query->getQuery()->getSingleScalarResult();\n    }\n\n    /**\n     * @return int\n     */\n    public function getExtraFieldType()\n    {\n        return (int) $this->extraFieldType;\n    }\n\n    /**\n     * @param string $sidx\n     * @param string $sord\n     * @param int    $start\n     * @param int    $limit\n     *\n     * @return array\n     */\n    public function getAllGrid($sidx, $sord, $start, $limit)\n    {\n        switch ($sidx) {\n            case 'field_order':\n                $sidx = 'e.fieldOrder';\n                break;\n            case 'variable':\n                $sidx = 'e.variable';\n                break;\n            case 'display_text':\n                $sidx = 'e.displayText';\n                break;\n            case 'changeable':\n                $sidx = 'e.changeable';\n                break;\n            case 'visible_to_self':\n                $sidx = 'e.visibleToSelf';\n                break;\n            case 'visible_to_others':\n                $sidx = 'e.visibleToOthers';\n                break;\n            case 'filter':\n                $sidx = 'e.filter';\n                break;\n        }\n        $em = Database::getManager();\n        $query = $em->getRepository(EntityExtraField::class)->createQueryBuilder('e');\n        $query->select('e')\n            ->where('e.extraFieldType = :type')\n            ->setParameter('type', $this->getExtraFieldType())\n            ->orderBy($sidx, $sord)\n            ->setFirstResult($start)\n            ->setMaxResults($limit);\n\n        return $query->getQuery()->getArrayResult();\n    }\n\n    /**\n     * Get all the field info for tags.\n     *\n     * @param string $variable\n     *\n     * @return array|bool\n     */\n    public function get_handler_field_info_by_tags($variable)\n    {\n        $variable = Database::escape_string($variable);\n        $sql = \"SELECT * FROM {$this->table}\n                WHERE\n                    variable = '$variable' AND\n                    extra_field_type = $this->extraFieldType\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $row = Database::fetch_array($result, 'ASSOC');\n            $row['display_text'] = $this->translateDisplayName(\n                    $row['variable'],\n                    $row['display_text']\n                );\n\n            // All the tags of the field\n            $sql = \"SELECT * FROM $this->table_field_tag\n                    WHERE field_id='\".intval($row['id']).\"'\n                    ORDER BY id ASC\";\n            $result = Database::query($sql);\n            while ($option = Database::fetch_array($result, 'ASSOC')) {\n                $row['options'][$option['id']] = $option;\n            }\n\n            return $row;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Translate the display text for a extra field.\n     *\n     * @param string $variable\n     * @param string $defaultDisplayText\n     *\n     * @return string\n     */\n    public static function translateDisplayName($variable, $defaultDisplayText)\n    {\n        $camelCase = api_underscore_to_camel_case($variable);\n\n        return isset($GLOBALS[$camelCase]) ? $GLOBALS[$camelCase] : $defaultDisplayText;\n    }\n\n    /**\n     * @param int $fieldId\n     *\n     * @return array|bool\n     */\n    public function getFieldInfoByFieldId($fieldId)\n    {\n        $fieldId = (int) $fieldId;\n        $sql = \"SELECT * FROM {$this->table}\n                WHERE\n                    id = '$fieldId' AND\n                    extra_field_type = $this->extraFieldType\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $row = Database::fetch_array($result, 'ASSOC');\n\n            // All the options of the field\n            $sql = \"SELECT * FROM $this->table_field_options\n                    WHERE field_id='\".$fieldId.\"'\n                    ORDER BY option_order ASC\";\n            $result = Database::query($sql);\n            while ($option = Database::fetch_array($result)) {\n                $row['options'][$option['id']] = $option;\n            }\n\n            return $row;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Add elements to a form.\n     *\n     * @param FormValidator $form                            The form object to which to attach this element\n     * @param int           $itemId                          The item (course, user, session, etc) this extra_field is\n     *                                                       linked to\n     * @param array         $exclude                         Variables of extra field to exclude\n     * @param bool          $filter                          Whether to get only the fields with the \"filter\" flag set\n     *                                                       to 1 (true) or not (false)\n     * @param bool          $useTagAsSelect                  Whether to show tag fields as select drop-down or not\n     * @param array         $showOnlyTheseFields             Limit the extra fields shown to just the list given here\n     * @param array         $orderFields                     An array containing the names of the fields shown, in the\n     *                                                       right order\n     * @param array         $extraData\n     * @param bool          $orderDependingDefaults\n     * @param bool          $adminPermissions\n     * @param array         $separateExtraMultipleSelect\n     * @param array         $customLabelsExtraMultipleSelect\n     * @param bool          $addEmptyOptionSelects\n     * @param array         $introductionTextList\n     * @param array         $requiredFields\n     * @param bool          $hideGeoLocalizationDetails\n     *\n     * @throws Exception\n     *\n     * @return array|bool If relevant, returns a one-element array with JS code to be added to the page HTML headers.\n     *                    Returns false if the form object was not given\n     */\n    public function addElements(\n        $form,\n        $itemId = 0,\n        $exclude = [],\n        $filter = false,\n        $useTagAsSelect = false,\n        $showOnlyTheseFields = [],\n        $orderFields = [],\n        $extraData = [],\n        $orderDependingDefaults = false,\n        $adminPermissions = false,\n        $separateExtraMultipleSelect = [],\n        $customLabelsExtraMultipleSelect = [],\n        $addEmptyOptionSelects = false,\n        $introductionTextList = [],\n        $requiredFields = [],\n        $hideGeoLocalizationDetails = false,\n        $help = false\n    ) {\n        if (empty($form)) {\n            return false;\n        }\n\n        $itemId = (int) $itemId;\n        $form->addHidden('item_id', $itemId);\n        $extraData = false;\n        if (!empty($itemId)) {\n            $extraData = $this->get_handler_extra_data($itemId);\n            if (!empty($showOnlyTheseFields)) {\n                $setData = [];\n                foreach ($showOnlyTheseFields as $variable) {\n                    $extraName = 'extra_'.$variable;\n                    if (in_array($extraName, array_keys($extraData))) {\n                        $setData[$extraName] = $extraData[$extraName];\n                    }\n                }\n                $form->setDefaults($setData);\n            } else {\n                $form->setDefaults($extraData);\n            }\n        }\n\n        $conditions = [];\n        if ($filter) {\n            $conditions = ['filter = ?' => 1];\n        }\n\n        $extraFields = $this->get_all($conditions, 'option_order');\n        $extra = $this->set_extra_fields_in_form(\n            $form,\n            $extraData,\n            $adminPermissions,\n            $extraFields,\n            $itemId,\n            $exclude,\n            $useTagAsSelect,\n            $showOnlyTheseFields,\n            $orderFields,\n            $orderDependingDefaults,\n            $separateExtraMultipleSelect,\n            $customLabelsExtraMultipleSelect,\n            $addEmptyOptionSelects,\n            $introductionTextList,\n            $hideGeoLocalizationDetails,\n            $help\n        );\n\n        if (!empty($requiredFields)) {\n            /** @var HTML_QuickForm_input $element */\n            foreach ($form->getElements() as $element) {\n                $name = str_replace('extra_', '', $element->getName());\n                if (in_array($name, $requiredFields)) {\n                    $form->setRequired($element);\n                }\n            }\n        }\n\n        return $extra;\n    }\n\n    /**\n     * Return an array of all the extra fields available for this item.\n     *\n     * @param int $itemId (session_id, question_id, course id)\n     *\n     * @return array\n     */\n    public function get_handler_extra_data($itemId)\n    {\n        if (empty($itemId)) {\n            return [];\n        }\n\n        $extra_data = [];\n        $fields = $this->get_all();\n        $field_values = new ExtraFieldValue($this->type);\n\n        if (!empty($fields)) {\n            foreach ($fields as $field) {\n                $field_value = $field_values->get_values_by_handler_and_field_id(\n                    $itemId,\n                    $field['id']\n                );\n\n                if (self::FIELD_TYPE_TAG == $field['field_type']) {\n                    $tags = UserManager::get_user_tags_to_string(\n                        $itemId,\n                        $field['id'],\n                        false\n                    );\n                    $extra_data['extra_'.$field['variable']] = $tags;\n\n                    continue;\n                }\n\n                if ($field_value) {\n                    $variable = $field['variable'];\n                    $field_value = $field_value['value'];\n                    switch ($field['field_type']) {\n                        case self::FIELD_TYPE_TAG:\n                            $tags = UserManager::get_user_tags_to_string(\n                                $itemId,\n                                $field['id'],\n                                false\n                            );\n\n                            $extra_data['extra_'.$field['variable']] = $tags;\n                            break;\n                        case self::FIELD_TYPE_DOUBLE_SELECT:\n                        case self::FIELD_TYPE_SELECT_WITH_TEXT_FIELD:\n                            $selected_options = explode('::', $field_value);\n                            $firstOption = isset($selected_options[0]) ? $selected_options[0] : '';\n                            $secondOption = isset($selected_options[1]) ? $selected_options[1] : '';\n                            $extra_data['extra_'.$field['variable']]['extra_'.$field['variable']] = $firstOption;\n                            $extra_data['extra_'.$field['variable']]['extra_'.$field['variable'].'_second'] = $secondOption;\n\n                            break;\n                        case self::FIELD_TYPE_SELECT_MULTIPLE:\n                            $field_value = explode(';', $field_value);\n                            $extra_data['extra_'.$field['variable']] = $field_value;\n                            break;\n                        case self::FIELD_TYPE_RADIO:\n                            $extra_data['extra_'.$field['variable']]['extra_'.$field['variable']] = $field_value;\n                            break;\n                        case self::FIELD_TYPE_TRIPLE_SELECT:\n                            [$level1, $level2, $level3] = explode(';', $field_value);\n\n                            $extra_data[\"extra_$variable\"][\"extra_$variable\"] = $level1;\n                            $extra_data[\"extra_$variable\"][\"extra_{$variable}_second\"] = $level2;\n                            $extra_data[\"extra_$variable\"][\"extra_{$variable}_third\"] = $level3;\n                            break;\n                        default:\n                            $extra_data['extra_'.$field['variable']] = $field_value;\n                            break;\n                    }\n                } else {\n                    // Set default values\n                    if (isset($field['field_default_value']) &&\n                        !empty($field['field_default_value'])\n                    ) {\n                        $extra_data['extra_'.$field['variable']] = $field['field_default_value'];\n                    }\n                }\n            }\n        }\n\n        return $extra_data;\n    }\n\n    /**\n     * Get an array of all the values from the extra_field and extra_field_options tables\n     * based on the current object's type.\n     *\n     * @param array $options\n     * @param null  $order_field_options_by\n     *\n     * @return array\n     */\n    public function get_all($options = [], $order_field_options_by = null)\n    {\n        $options = Database::parse_conditions(['where' => $options]);\n\n        if (empty($options)) {\n            $options .= ' WHERE extra_field_type = '.$this->extraFieldType;\n        } else {\n            $options .= ' AND extra_field_type = '.$this->extraFieldType;\n        }\n\n        $sql = \"SELECT * FROM $this->table\n                $options\n                ORDER BY field_order ASC\n        \";\n\n        $result = Database::query($sql);\n        $extraFields = Database::store_result($result, 'ASSOC');\n\n        $option = new ExtraFieldOption($this->type);\n        if (!empty($extraFields)) {\n            foreach ($extraFields as &$extraField) {\n                $extraField['display_text'] = $this->translateDisplayName(\n                    $extraField['variable'],\n                    $extraField['display_text']\n                );\n                $extraField['options'] = $option->get_field_options_by_field(\n                    $extraField['id'],\n                    false,\n                    $order_field_options_by\n                );\n            }\n        }\n\n        return $extraFields;\n    }\n\n    /**\n     * Add an element that matches the given extra field to the given $form object.\n     *\n     * @param FormValidator $form                The form these fields are to be attached to\n     * @param array         $extraData\n     * @param bool          $adminPermissions    Whether the display is considered without edition limits (true) or not\n     *                                           (false)\n     * @param array         $extra\n     * @param int           $itemId              The item (course, user, session, etc) this extra_field is attached to\n     * @param array         $exclude             Extra fields to be skipped, by textual ID\n     * @param bool          $useTagAsSelect      Whether to show tag fields as select drop-down or not\n     * @param array         $showOnlyTheseFields Limit the extra fields shown to just the list given here\n     * @param array         $orderFields         An array containing the names of the fields shown, in the right order\n     *\n     * @throws Exception\n     *\n     * @return array If relevant, returns a one-element array with JS code to be added to the page HTML headers\n     */\n    public function set_extra_fields_in_form(\n        $form,\n        $extraData,\n        $adminPermissions = false,\n        $extra = [],\n        $itemId = null,\n        $exclude = [],\n        $useTagAsSelect = false,\n        $showOnlyTheseFields = [],\n        $orderFields = [],\n        $orderDependingDefaults = false,\n        $separateExtraMultipleSelect = [],\n        $customLabelsExtraMultipleSelect = [],\n        $addEmptyOptionSelects = false,\n        $introductionTextList = [],\n        $hideGeoLocalizationDetails = false,\n        $help = false\n    ) {\n        $jquery_ready_content = null;\n        if (!empty($extra)) {\n            $newOrder = [];\n            if (!empty($orderFields)) {\n                foreach ($orderFields as $order) {\n                    foreach ($extra as $field_details) {\n                        if ($order == $field_details['variable']) {\n                            $newOrder[] = $field_details;\n                        }\n                    }\n                }\n                $extra = $newOrder;\n            }\n\n            foreach ($extra as $field_details) {\n                $variable = $field_details['variable'];\n                if (!empty($showOnlyTheseFields)) {\n                    if (!in_array($variable, $showOnlyTheseFields)) {\n                        continue;\n                    }\n                }\n\n                // Getting default value id if is set\n                $defaultValueId = null;\n                if (isset($field_details['options']) && !empty($field_details['options'])) {\n                    $valueToFind = null;\n                    if (isset($field_details['field_default_value'])) {\n                        $valueToFind = $field_details['field_default_value'];\n                    }\n                    // If a value is found we override the default value\n                    if (isset($extraData['extra_'.$variable])) {\n                        $valueToFind = $extraData['extra_'.$variable];\n                    }\n\n                    foreach ($field_details['options'] as $option) {\n                        if ($option['option_value'] == $valueToFind) {\n                            $defaultValueId = $option['id'];\n                        }\n                    }\n                }\n\n                if (!$adminPermissions) {\n                    if (0 == $field_details['visible_to_self']) {\n                        continue;\n                    }\n\n                    if (in_array($variable, $exclude)) {\n                        continue;\n                    }\n                }\n\n                if (!empty($introductionTextList) &&\n                    in_array($variable, array_keys($introductionTextList))\n                ) {\n                    $form->addHtml($introductionTextList[$variable]);\n                }\n\n                $freezeElement = false;\n                if (!$adminPermissions) {\n                    $freezeElement = 0 == $field_details['visible_to_self'] || 0 == $field_details['changeable'];\n                }\n\n                $translatedDisplayText = get_lang($field_details['display_text'], true);\n                $translatedDisplayHelpText = '';\n                if ($help) {\n                    $translatedDisplayHelpText .= get_lang($field_details['display_text'].'Help');\n                }\n                if (!empty($translatedDisplayText)) {\n                    if (!empty($translatedDisplayHelpText)) {\n                        // In this case, exceptionally, display_text is an array\n                        // which is then treated by display_form()\n                        $field_details['display_text'] = [$translatedDisplayText, $translatedDisplayHelpText];\n                    } else {\n                        // We have an helper text, use it\n                        $field_details['display_text'] = $translatedDisplayText;\n                    }\n                }\n\n                switch ($field_details['field_type']) {\n                    case self::FIELD_TYPE_TEXT:\n                        $form->addElement(\n                            'text',\n                            'extra_'.$variable,\n                            $field_details['display_text'],\n                            [\n                                'id' => 'extra_'.$variable,\n                            ]\n                        );\n                        $form->applyFilter(\n                            'extra_'.$variable,\n                            'stripslashes'\n                        );\n                        $form->applyFilter(\n                            'extra_'.$variable,\n                            'trim'\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_TEXTAREA:\n                        $form->addHtmlEditor(\n                            'extra_'.$variable,\n                            $field_details['display_text'],\n                            false,\n                            false,\n                            [\n                                'ToolbarSet' => 'Profile',\n                                'Width' => '100%',\n                                'Height' => '130',\n                                'id' => 'extra_'.$variable,\n                            ]\n                        );\n                        $form->applyFilter('extra_'.$variable, 'stripslashes');\n                        $form->applyFilter('extra_'.$variable, 'trim');\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_RADIO:\n                        $group = [];\n                        if (isset($field_details['options']) &&\n                            !empty($field_details['options'])\n                        ) {\n                            foreach ($field_details['options'] as $option_details) {\n                                $options[$option_details['option_value']] = $option_details['display_text'];\n                                $group[] = $form->createElement(\n                                    'radio',\n                                    'extra_'.$variable,\n                                    $option_details['option_value'],\n                                    $option_details['display_text'].'<br />',\n                                    $option_details['option_value']\n                                );\n                            }\n                        }\n                        $form->addGroup(\n                            $group,\n                            'extra_'.$variable,\n                            $field_details['display_text']\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_CHECKBOX:\n                        $group = [];\n                        if (isset($field_details['options']) &&\n                            !empty($field_details['options'])\n                        ) {\n                            foreach ($field_details['options'] as $option_details) {\n                                $options[$option_details['option_value']] = $option_details['display_text'];\n                                $group[] = $form->createElement(\n                                    'checkbox',\n                                    'extra_'.$variable,\n                                    $option_details['option_value'],\n                                    $option_details['display_text'].'<br />',\n                                    $option_details['option_value']\n                                );\n                            }\n                        } else {\n                            $fieldVariable = \"extra_$variable\";\n                            $checkboxAttributes = [];\n                            if (is_array($extraData) &&\n                                array_key_exists($fieldVariable, $extraData)\n                            ) {\n                                if (!empty($extraData[$fieldVariable])) {\n                                    $checkboxAttributes['checked'] = 1;\n                                }\n                            }\n\n                            if (empty($checkboxAttributes) &&\n                                isset($field_details['default_value']) && empty($extraData)) {\n                                if (1 == $field_details['default_value']) {\n                                    $checkboxAttributes['checked'] = 1;\n                                }\n                            }\n\n                            // We assume that is a switch on/off with 1 and 0 as values\n                            $group[] = $form->createElement(\n                                'checkbox',\n                                'extra_'.$variable,\n                                null,\n                                get_lang('Yes'),\n                                $checkboxAttributes\n                            );\n                        }\n\n                        $form->addGroup(\n                            $group,\n                            'extra_'.$variable,\n                            $field_details['display_text']\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_SELECT:\n                        $this->addSelectElement($form, $field_details, $defaultValueId, $freezeElement);\n                        break;\n                    case self::FIELD_TYPE_SELECT_MULTIPLE:\n                        $options = [];\n                        if (empty($defaultValueId)) {\n                            $options[''] = get_lang('Please select an option');\n                        }\n                        if (isset($field_details['options']) && !empty($field_details['options'])) {\n                            foreach ($field_details['options'] as $optionDetails) {\n                                $options[$optionDetails['option_value']] = $optionDetails['display_text'];\n                            }\n                        }\n                        $form->addElement(\n                            'select',\n                            'extra_'.$variable,\n                            $field_details['display_text'],\n                            $options,\n                            [\n                                'multiple' => 'multiple',\n                                'id' => 'extra_'.$variable,\n                            ]\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_DATE:\n                        $form->addDatePicker('extra_'.$variable, $field_details['display_text']);\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_DATETIME:\n                        $form->addDateTimePicker(\n                            'extra_'.$variable,\n                            $field_details['display_text']\n                        );\n\n                        $defaults['extra_'.$variable] = api_get_local_time();\n                        if (!isset($form->_defaultValues['extra_'.$variable])) {\n                            $form->setDefaults($defaults);\n                        }\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_DOUBLE_SELECT:\n                        $jquery_ready_content .= self::addDoubleSelectElement(\n                            $form,\n                            $field_details,\n                            $extraData,\n                            $freezeElement\n                        );\n                        break;\n                    case self::FIELD_TYPE_DIVIDER:\n                        $form->addHtml('\n                            <div class=\"form-group \">\n                                <div class=\"col-sm-12\">\n                                    <div class=\"panel-separator\">\n                                       <h4 id=\"'.$variable.'\" class=\"form-separator\">'\n                                            .$field_details['display_text'].'\n                                       </h4>\n                                    </div>\n                                </div>\n                            </div>\n                        ');\n                        break;\n                    case self::FIELD_TYPE_TAG:\n                        $field_id = $field_details['id'];\n                        $separateValue = 0;\n                        if (isset($separateExtraMultipleSelect[$variable])) {\n                            $separateValue = $separateExtraMultipleSelect[$variable];\n                        }\n\n                        $selectedOptions = [];\n                        if ($separateValue > 0) {\n                            $em = Database::getManager();\n                            $fieldTags = $em\n                                ->getRepository(ExtraFieldRelTag::class)\n                                ->findBy(\n                                    [\n                                        'field' => $field_id,\n                                        'itemId' => $itemId,\n                                    ]\n                                );\n                            // ofaj.\n                            for ($i = 0; $i < $separateValue; $i++) {\n                                $tagsSelect = $form->addSelect(\n                                    'extra_'.$variable.'['.$i.']',\n                                    $customLabelsExtraMultipleSelect[$variable][$i], //$field_details['display_text'],\n                                    null,\n                                    ['id' => 'extra_'.$variable.'_'.$i]\n                                );\n\n                                if ($addEmptyOptionSelects) {\n                                    $tagsSelect->addOption(\n                                        '',\n                                        ''\n                                    );\n                                }\n                                /** @var ExtraFieldRelTag $fieldTag */\n                                foreach ($fieldTags as $fieldTag) {\n                                    $tag = $fieldTag->getTag();\n\n                                    if (empty($tag)) {\n                                        continue;\n                                    }\n\n                                    $tagsSelect->addOption(\n                                        $tag->getTag(),\n                                        $tag->getTag()\n                                    );\n                                }\n                            }\n                        } else {\n                            $tagsSelect = $form->addSelect(\n                                \"extra_{$variable}\",\n                                $field_details['display_text'],\n                                [],\n                                ['style' => 'width: 100%;']\n                            );\n\n                            if (false === $useTagAsSelect) {\n                                $tagsSelect->setAttribute('class', null);\n                            }\n\n                            $tagsSelect->setAttribute(\n                                'id',\n                                \"extra_{$variable}\"\n                            );\n                            $tagsSelect->setMultiple(true);\n\n                            $selectedOptions = [];\n                            if ('user' === $this->type) {\n                                // The magic should be here\n                                $user_tags = UserManager::get_user_tags(\n                                    $itemId,\n                                    $field_details['id']\n                                );\n\n                                if (is_array($user_tags) && count($user_tags) > 0) {\n                                    foreach ($user_tags as $tag) {\n                                        if (empty($tag['tag'])) {\n                                            continue;\n                                        }\n                                        $tagsSelect->addOption(\n                                            $tag['tag'],\n                                            $tag['tag'],\n                                            [\n                                                'selected' => 'selected',\n                                                'class' => 'selected',\n                                            ]\n                                        );\n                                        $selectedOptions[] = $tag['tag'];\n                                    }\n                                }\n                                $url = api_get_path(WEB_AJAX_PATH).'user_manager.ajax.php';\n                            } else {\n                                $em = Database::getManager();\n                                $fieldTags = $em->getRepository(\n                                    ExtraFieldRelTag::class\n                                )\n                                ->findBy(\n                                    [\n                                        'field' => $field_id,\n                                        'itemId' => $itemId,\n                                    ]\n                                );\n\n                                /** @var ExtraFieldRelTag $fieldTag */\n                                foreach ($fieldTags as $fieldTag) {\n                                    $tag = $fieldTag->getTag();\n                                    if (empty($tag)) {\n                                        continue;\n                                    }\n                                    $tagsSelect->addOption(\n                                        $tag->getTag(),\n                                        $tag->getTag()\n                                    );\n                                    $selectedOptions[] = $tag->getTag();\n                                }\n\n                                if (!empty($extraData) && isset($extraData['extra_'.$variable])) {\n                                    $data = $extraData['extra_'.$variable];\n                                    if (!empty($data)) {\n                                        foreach ($data as $option) {\n                                            $tagsSelect->addOption(\n                                                $option,\n                                                $option\n                                            );\n                                        }\n                                    }\n                                }\n\n                                if ($useTagAsSelect) {\n                                    $fieldTags = $em->getRepository(ExtraFieldRelTag::class)\n                                        ->findBy(\n                                            [\n                                                'field' => $field_id,\n                                            ]\n                                        );\n                                    $tagsAdded = [];\n                                    /** @var ExtraFieldRelTag $fieldTag */\n                                    foreach ($fieldTags as $fieldTag) {\n                                        $tag = $fieldTag->getTag();\n\n                                        if (empty($tag)) {\n                                            continue;\n                                        }\n\n                                        $tagText = $tag->getTag();\n                                        if (in_array($tagText, $tagsAdded)) {\n                                            continue;\n                                        }\n\n                                        $tagsSelect->addOption(\n                                            $tag->getTag(),\n                                            $tag->getTag(),\n                                            []\n                                        );\n\n                                        $tagsAdded[] = $tagText;\n                                    }\n                                }\n                                $url = api_get_path(WEB_AJAX_PATH).'extra_field.ajax.php';\n                            }\n\n                            $form->setDefaults(\n                                [\n                                    'extra_'.$variable => $selectedOptions,\n                                ]\n                            );\n\n                            if (false == $useTagAsSelect) {\n                                $jquery_ready_content .= \"\n                                $('#extra_$variable').select2({\n                                    ajax: {\n                                        url: '$url?a=search_tags&field_id=$field_id&type={$this->type}',\n                                        processResults: function (data) {\n                                            return {\n                                                results: data.items\n                                            }\n                                        }\n                                    },\n                                    cache: false,\n                                    tags: true,\n                                    tokenSeparators: [','],\n                                    placeholder: '\".get_lang('Start to type, then click on this bar to validate tag').\"'\n                                });\n                            \";\n                            }\n                        }\n\n                        break;\n                    case self::FIELD_TYPE_TIMEZONE:\n                        $form->addElement(\n                            'select',\n                            'extra_'.$variable,\n                            $field_details['display_text'],\n                            api_get_timezones(),\n                            ''\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_SOCIAL_PROFILE:\n                        // get the social network's favicon\n                        $extra_data_variable = isset($extraData['extra_'.$variable]) ? $extraData['extra_'.$variable] : null;\n                        $field_default_value = isset($field_details['field_default_value']) ? $field_details['field_default_value'] : null;\n                        $icon_path = UserManager::get_favicon_from_url(\n                            $extra_data_variable,\n                            $field_default_value\n                        );\n                        // special hack for hi5\n                        $leftpad = '1.7';\n                        $top = '0.4';\n                        $domain = parse_url($icon_path, PHP_URL_HOST);\n                        if ('www.hi5.com' === $domain || 'hi5.com' === $domain) {\n                            $leftpad = '3';\n                            $top = '0';\n                        }\n                        // print the input field\n                        $form->addElement(\n                            'text',\n                            'extra_'.$variable,\n                            $field_details['display_text'],\n                            [\n                                //'size' => 60,\n                                'size' => implode(\n                                    '; ',\n                                    [\n                                        \"background-image: url('$icon_path')\",\n                                        'background-repeat: no-repeat',\n                                        \"background-position: 0.4em {$top}em\",\n                                        \"padding-left: {$leftpad}em\",\n                                    ]\n                                ),\n                            ]\n                        );\n                        $form->applyFilter('extra_'.$variable, 'stripslashes');\n                        $form->applyFilter('extra_'.$variable, 'trim');\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_MOBILE_PHONE_NUMBER:\n                        $form->addElement(\n                            'text',\n                            'extra_'.$variable,\n                            $field_details['display_text'].' ('.get_lang('Include the country dial code').')',\n                            ['size' => 40, 'placeholder' => '(xx)xxxxxxxxx']\n                        );\n                        $form->applyFilter('extra_'.$variable, 'stripslashes');\n                        $form->applyFilter('extra_'.$variable, 'trim');\n                        $form->applyFilter('extra_'.$variable, 'mobile_phone_number_filter');\n                        $form->addRule(\n                            'extra_'.$variable,\n                            get_lang('Mobile phone number is incomplete or contains invalid characters'),\n                            'mobile_phone_number'\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_INTEGER:\n                        $form->addElement(\n                            'number',\n                            'extra_'.$variable,\n                            $field_details['display_text'],\n                            ['class' => 'span1', 'step' => 1]\n                        );\n\n                        $form->applyFilter('extra_'.$variable, 'stripslashes');\n                        $form->applyFilter('extra_'.$variable, 'trim');\n                        $form->applyFilter('extra_'.$variable, 'intval');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_FLOAT:\n                        $form->addElement(\n                            'number',\n                            'extra_'.$variable,\n                            $field_details['display_text'],\n                            ['class' => 'span1', 'step' => '0.01']\n                        );\n\n                        $form->applyFilter('extra_'.$variable, 'stripslashes');\n                        $form->applyFilter('extra_'.$variable, 'trim');\n                        $form->applyFilter('extra_'.$variable, 'floatval');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_FILE_IMAGE:\n                        $fieldVariable = \"extra_{$variable}\";\n                        $fieldTexts = [\n                            $field_details['display_text'],\n                        ];\n\n                        if (is_array($extraData) && array_key_exists($fieldVariable, $extraData)) {\n                            $assetId = $extraData[$fieldVariable];\n                            $assetRepo = Container::getAssetRepository();\n                            $asset = $assetRepo->find($assetId);\n                            if (null !== $asset) {\n                                $fieldTexts[] = Display::img(\n                                    $assetRepo->getAssetUrl($asset),\n                                    $field_details['display_text'],\n                                    ['width' => '300']\n                                );\n                            }\n                        }\n\n                        if ('Image' === $fieldTexts[0]) {\n                            $fieldTexts[0] = get_lang($fieldTexts[0]);\n                        }\n\n                        $form->addFile(\n                            $fieldVariable,\n                            $fieldTexts,\n                            ['accept' => 'image/*', 'id' => 'extra_image', 'crop_image' => 'true']\n                        );\n\n                        $form->applyFilter('extra_'.$variable, 'stripslashes');\n                        $form->applyFilter('extra_'.$variable, 'trim');\n\n                        $allowedPictureTypes = ['jpg', 'jpeg', 'png', 'gif'];\n                        $form->addRule(\n                            'extra_'.$variable,\n                            get_lang('Only PNG, JPG or GIF images allowed').' ('.implode(',', $allowedPictureTypes).')',\n                            'filetype',\n                            $allowedPictureTypes\n                        );\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;                        \n                    case self::FIELD_TYPE_FILE:\n                        $fieldVariable = \"extra_{$variable}\";\n                        $fieldTexts = [\n                            $field_details['display_text'],\n                        ];\n\n                        if (is_array($extraData) &&\n                            array_key_exists($fieldVariable, $extraData)\n                        ) {\n                            $assetId = $extraData[$fieldVariable];\n                            $assetRepo = Container::getAssetRepository();\n                            /** @var Asset $asset */\n                            $asset = $assetRepo->find($assetId);\n                            if (null !== $asset) {\n                                $fileName = $asset->getTitle();\n                                $linkUrl = $assetRepo->getAssetUrl($asset);\n                                $linkToDelete = '';\n                                if (api_is_platform_admin()) {\n                                    $url = api_get_path(WEB_AJAX_PATH).'extra_field.ajax.php?type='.$this->type;\n                                    $url .= '&a=delete_file&field_id='.$field_details['id'].'&item_id='.$itemId;\n                                    $deleteId = $variable.'_delete';\n                                    $form->addHtml(\n                                        \"\n                                        <script>\n                                            $(function() {\n                                                $('#\".$deleteId.\"').on('click', function() {\n                                                    $.ajax({\n                                                        type: 'GET',\n                                                        url: '\".$url.\"',\n                                                        success: function(result) {\n                                                            if (result == 1) {\n                                                                $('#\".$variable.\"').html('\".get_lang('Deleted').\"');\n                                                            }\n                                                        }\n                                                    });\n                                                });\n                                            });\n                                        </script>\n                                    \"\n                                    );\n\n                                    $linkToDelete = '&nbsp;'.Display::url(\n                                        Display::return_icon('delete.png', get_lang('Delete')),\n                                        'javascript:void(0)',\n                                        ['id' => $deleteId]\n                                    );\n                                }\n                                $anchor = Display::url(\n                                    $fileName,\n                                    $linkUrl,\n                                    [\n                                        'title' => $field_details['display_text'],\n                                        'target' => '_blank',\n                                    ]\n                                );\n                                $fieldTexts[] = '<div id=\"'.$variable.'\">'.$anchor.$linkToDelete.'</div>';\n                            }\n                        }\n\n                        $form->addElement(\n                            'file',\n                            $fieldVariable,\n                            $fieldTexts,\n                            []\n                        );\n\n                        $form->applyFilter('extra_'.$variable, 'stripslashes');\n                        $form->applyFilter('extra_'.$variable, 'trim');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_VIDEO_URL:\n                        $form->addUrl(\n                            \"extra_{$variable}\",\n                            $field_details['display_text'],\n                            false,\n                            ['placeholder' => 'https://']\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_LETTERS_ONLY:\n                        $form->addTextLettersOnly(\n                            \"extra_{$variable}\",\n                            $field_details['display_text']\n                        );\n                        $form->applyFilter('extra_'.$variable, 'stripslashes');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_ALPHANUMERIC:\n                        $form->addTextAlphanumeric(\n                            \"extra_{$variable}\",\n                            $field_details['display_text']\n                        );\n                        $form->applyFilter(\n                            'extra_'.$variable,\n                            'stripslashes'\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_LETTERS_SPACE:\n                        $form->addTextLettersAndSpaces(\n                            \"extra_{$variable}\",\n                            $field_details['display_text']\n                        );\n                        $form->applyFilter('extra_'.$variable, 'stripslashes');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_ALPHANUMERIC_SPACE:\n                        $form->addTextAlphanumericAndSpaces(\n                            \"extra_{$variable}\",\n                            $field_details['display_text']\n                        );\n                        $form->applyFilter(\n                            'extra_'.$variable,\n                            'stripslashes'\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_GEOLOCALIZATION_COORDINATES:\n                    case self::FIELD_TYPE_GEOLOCALIZATION:\n                        $dataValue = isset($extraData['extra_'.$variable]) ? $extraData['extra_'.$variable] : '';\n                        $form->addGeoLocationMapField(\n                            'extra_'.$variable,\n                            $field_details['display_text'],\n                            $dataValue,\n                            $hideGeoLocalizationDetails\n                        );\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$variable);\n                        }\n                        break;\n                    case self::FIELD_TYPE_SELECT_WITH_TEXT_FIELD:\n                        $jquery_ready_content .= $this->addSelectWithTextFieldElement(\n                            $form,\n                            $field_details,\n                            $freezeElement\n                        );\n                        break;\n                    case self::FIELD_TYPE_TRIPLE_SELECT:\n                        $jquery_ready_content .= $this->addTripleSelectElement(\n                            $form,\n                            $field_details,\n                            is_array($extraData) ? $extraData : [],\n                            $freezeElement\n                        );\n                        break;\n                }\n            }\n        }\n\n        $return = [];\n        $return['jquery_ready_content'] = $jquery_ready_content;\n\n        return $return;\n    }\n\n    /**\n     * @param array $options\n     *\n     * @return array\n     */\n    public static function extra_field_double_select_convert_array_to_ordered_array($options)\n    {\n        $optionsParsed = [];\n        if (!empty($options)) {\n            foreach ($options as $option) {\n                if (0 == $option['option_value']) {\n                    $optionsParsed[$option['id']][] = $option;\n                } else {\n                    $optionsParsed[$option['option_value']][] = $option;\n                }\n            }\n        }\n\n        return $optionsParsed;\n    }\n\n    /**\n     * @return array\n     */\n    public static function tripleSelectConvertArrayToOrderedArray(array $options)\n    {\n        $level1 = self::getOptionsFromTripleSelect($options, 0);\n        $level2 = [];\n        $level3 = [];\n\n        foreach ($level1 as $item1) {\n            $level2 += self::getOptionsFromTripleSelect($options, $item1['id']);\n        }\n\n        foreach ($level2 as $item2) {\n            $level3 += self::getOptionsFromTripleSelect($options, $item2['id']);\n        }\n\n        return ['level1' => $level1, 'level2' => $level2, 'level3' => $level3];\n    }\n\n    /**\n     * @param string $type\n     *\n     * @return array\n     */\n    public function get_all_extra_field_by_type($type)\n    {\n        // all the information of the field\n        $sql = \"SELECT * FROM {$this->table}\n                WHERE\n                    field_type = '\".Database::escape_string($type).\"' AND\n                    extra_field_type = $this->extraFieldType\n                \";\n        $result = Database::query($sql);\n\n        $return = [];\n        while ($row = Database::fetch_array($result)) {\n            $return[] = $row['id'];\n        }\n\n        return $return;\n    }\n\n    /**\n     * @param int $id\n     */\n    public function get_field_type_by_id($id)\n    {\n        $types = $this->get_field_types();\n        if (isset($types[$id])) {\n            return $types[$id];\n        }\n\n        return null;\n    }\n\n    /**\n     * @return array\n     */\n    public function get_field_types()\n    {\n        return $this->get_extra_fields_by_handler($this->type);\n    }\n\n    /**\n     * @param string $handler\n     *\n     * @return array\n     */\n    public static function get_extra_fields_by_handler($handler)\n    {\n        $types = [];\n        $types[self::FIELD_TYPE_TEXT] = get_lang('FieldTypeText');\n        $types[self::FIELD_TYPE_TEXTAREA] = get_lang('FieldTypeTextarea');\n        $types[self::FIELD_TYPE_RADIO] = get_lang('FieldTypeRadio');\n        $types[self::FIELD_TYPE_SELECT] = get_lang('FieldTypeSelect');\n        $types[self::FIELD_TYPE_SELECT_MULTIPLE] = get_lang('FieldTypeSelectMultiple');\n        $types[self::FIELD_TYPE_DATE] = get_lang('FieldTypeDate');\n        $types[self::FIELD_TYPE_DATETIME] = get_lang('FieldTypeDatetime');\n        $types[self::FIELD_TYPE_DOUBLE_SELECT] = get_lang('FieldTypeDoubleSelect');\n        $types[self::FIELD_TYPE_DIVIDER] = get_lang('FieldTypeDivider');\n        $types[self::FIELD_TYPE_TAG] = get_lang('FieldTypeTag');\n        $types[self::FIELD_TYPE_TIMEZONE] = get_lang('FieldTypeTimezone');\n        $types[self::FIELD_TYPE_SOCIAL_PROFILE] = get_lang('FieldTypeSocialProfile');\n        $types[self::FIELD_TYPE_MOBILE_PHONE_NUMBER] = get_lang('FieldTypeMobilePhoneNumber');\n        $types[self::FIELD_TYPE_CHECKBOX] = get_lang('FieldTypeCheckbox');\n        $types[self::FIELD_TYPE_INTEGER] = get_lang('FieldTypeInteger');\n        $types[self::FIELD_TYPE_FILE_IMAGE] = get_lang('FieldTypeFileImage');\n        $types[self::FIELD_TYPE_FLOAT] = get_lang('FieldTypeFloat');\n        $types[self::FIELD_TYPE_FILE] = get_lang('FieldTypeFile');\n        $types[self::FIELD_TYPE_VIDEO_URL] = get_lang('FieldTypeVideoUrl');\n        $types[self::FIELD_TYPE_LETTERS_ONLY] = get_lang('FieldTypeOnlyLetters');\n        $types[self::FIELD_TYPE_ALPHANUMERIC] = get_lang('FieldTypeAlphanumeric');\n        $types[self::FIELD_TYPE_LETTERS_SPACE] = get_lang('FieldTypeLettersSpaces');\n        $types[self::FIELD_TYPE_ALPHANUMERIC_SPACE] = get_lang('FieldTypeAlphanumericSpaces');\n        $types[self::FIELD_TYPE_GEOLOCALIZATION] = get_lang('Geolocalization');\n        $types[self::FIELD_TYPE_GEOLOCALIZATION_COORDINATES] = get_lang('GeolocalizationCoordinates');\n        $types[self::FIELD_TYPE_SELECT_WITH_TEXT_FIELD] = get_lang('FieldTypeSelectWithTextField');\n        $types[self::FIELD_TYPE_TRIPLE_SELECT] = get_lang('FieldTypeTripleSelect');\n\n        switch ($handler) {\n            case 'course':\n            case 'session':\n            case 'user':\n            case 'skill':\n                break;\n        }\n\n        return $types;\n    }\n\n    /**\n     * @param array $params\n     * @param bool  $showQuery\n     *\n     * @return int|bool\n     */\n    public function save($params, $showQuery = false)\n    {\n        $fieldInfo = self::get_handler_field_info_by_field_variable($params['variable']);\n        $params = $this->clean_parameters($params);\n        $params['extra_field_type'] = $this->extraFieldType;\n\n        if ($fieldInfo) {\n            return $fieldInfo['id'];\n        } else {\n            $id = parent::save($params, $showQuery);\n            if ($id) {\n                $fieldOption = new ExtraFieldOption($this->type);\n                $params['field_id'] = $id;\n                $fieldOption->save($params);\n            }\n\n            return $id;\n        }\n    }\n\n    /**\n     * @param string $variable\n     *\n     * @return array|bool\n     */\n    public function get_handler_field_info_by_field_variable($variable)\n    {\n        $variable = Database::escape_string($variable);\n        $sql = \"SELECT * FROM {$this->table}\n                WHERE\n                    variable = '$variable' AND\n                    extra_field_type = $this->extraFieldType\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $row = Database::fetch_array($result, 'ASSOC');\n            if ($row) {\n                $row['display_text'] = $this->translateDisplayName(\n                    $row['variable'],\n                    $row['display_text']\n                );\n\n                // All the options of the field\n                $sql = \"SELECT * FROM $this->table_field_options\n                    WHERE field_id='\".intval($row['id']).\"'\n                    ORDER BY option_order ASC\";\n                $result = Database::query($sql);\n                while ($option = Database::fetch_array($result)) {\n                    $row['options'][$option['id']] = $option;\n                }\n\n                return $row;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param array $params\n     *\n     * @return array\n     */\n    public function clean_parameters($params)\n    {\n        if (!isset($params['variable']) || empty($params['variable'])) {\n            $params['variable'] = $params['display_text'];\n        }\n\n        $params['variable'] = trim(strtolower(str_replace(' ', '_', $params['variable'])));\n\n        if (!isset($params['field_order'])) {\n            $max_order = self::get_max_field_order();\n            $params['field_order'] = $max_order;\n        } else {\n            $params['field_order'] = (int) $params['field_order'];\n        }\n\n        return $params;\n    }\n\n    /**\n     * @return int\n     */\n    public function get_max_field_order()\n    {\n        $sql = \"SELECT MAX(field_order)\n                FROM {$this->table}\n                WHERE\n                    extra_field_type = '.$this->extraFieldType.'\";\n        $res = Database::query($sql);\n\n        $order = 0;\n        if (Database::num_rows($res) > 0) {\n            $row = Database::fetch_row($res);\n            $order = $row[0] + 1;\n        }\n\n        return $order;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function update($params, $showQuery = false)\n    {\n        $params = $this->clean_parameters($params);\n        if (isset($params['id'])) {\n            $fieldOption = new ExtraFieldOption($this->type);\n            $params['field_id'] = $params['id'];\n            if (empty($params['field_type'])) {\n                $params['field_type'] = $this->type;\n            }\n            $fieldOption->save($params, $showQuery);\n        }\n\n        return parent::update($params, $showQuery);\n    }\n\n    /**\n     * @param $id\n     *\n     * @return bool\n     */\n    public function delete($id)\n    {\n        $em = Database::getManager();\n        $items = $em->getRepository(\\Chamilo\\CoreBundle\\Entity\\ExtraFieldSavedSearch::class)->findBy(['field' => $id]);\n        if ($items) {\n            foreach ($items as $item) {\n                $em->remove($item);\n            }\n            $em->flush();\n        }\n        $field_option = new ExtraFieldOption($this->type);\n        $field_option->delete_all_options_by_field_id($id);\n\n        $session_field_values = new ExtraFieldValue($this->type);\n        $session_field_values->delete_all_values_by_field_id($id);\n\n        return parent::delete($id);\n    }\n\n    /**\n     * @param $breadcrumb\n     * @param $action\n     */\n    public function setupBreadcrumb(&$breadcrumb, $action)\n    {\n        if ('add' === $action) {\n            $breadcrumb[] = ['url' => $this->pageUrl, 'name' => $this->pageName];\n            $breadcrumb[] = ['url' => '#', 'name' => get_lang('Add')];\n        } elseif ('edit' === $action) {\n            $breadcrumb[] = ['url' => $this->pageUrl, 'name' => $this->pageName];\n            $breadcrumb[] = ['url' => '#', 'name' => get_lang('Edit')];\n        } else {\n            $breadcrumb[] = ['url' => '#', 'name' => $this->pageName];\n        }\n    }\n\n    /**\n     * Displays the title + grid.\n     */\n    public function display()\n    {\n        $actions = '<a href=\"../admin/index.php\">';\n        $actions .= Display::return_icon(\n            'back.png',\n            get_lang('Back to').' '.get_lang('Administration'),\n            '',\n            ICON_SIZE_MEDIUM\n        );\n        $actions .= '</a>';\n        $actions .= '<a href=\"'.api_get_self().'?action=add&type='.$this->type.'\">';\n        $actions .= Display::return_icon(\n            'add_user_fields.png',\n            get_lang('Add'),\n            '',\n            ICON_SIZE_MEDIUM\n        );\n        $actions .= '</a>';\n\n        echo Display::toolbarAction('toolbar', [$actions]);\n        echo Display::grid_html($this->type.'_fields');\n    }\n\n    /**\n     * @return array\n     */\n    public function getJqgridColumnNames()\n    {\n        return [\n            get_lang('Name'),\n            get_lang('Field label'),\n            get_lang('Type'),\n            get_lang('Can change'),\n            get_lang('Visible to self'),\n            get_lang('Visible to others'),\n            get_lang('Filter'),\n            get_lang('Order'),\n            get_lang('Detail'),\n        ];\n    }\n\n    /**\n     * @return array\n     */\n    public function getJqgridColumnModel()\n    {\n        return [\n            [\n                'name' => 'display_text',\n                'index' => 'display_text',\n                'width' => '140',\n                'align' => 'left',\n            ],\n            [\n                'name' => 'variable',\n                'index' => 'variable',\n                'width' => '90',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'field_type',\n                'index' => 'field_type',\n                'width' => '70',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'changeable',\n                'index' => 'changeable',\n                'width' => '35',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'visible_to_self',\n                'index' => 'visible_to_self',\n                'width' => '45',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'visible_to_others',\n                'index' => 'visible_to_others',\n                'width' => '35',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'filter',\n                'index' => 'filter',\n                'width' => '30',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'field_order',\n                'index' => 'field_order',\n                'width' => '25',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'actions',\n                'index' => 'actions',\n                'width' => '40',\n                'align' => 'left',\n                'formatter' => 'action_formatter',\n                'sortable' => 'false',\n            ],\n        ];\n    }\n\n    /**\n     * @param string $url\n     * @param string $action\n     *\n     * @return FormValidator\n     */\n    public function return_form($url, $action)\n    {\n        $form = new FormValidator($this->type.'_field', 'post', $url);\n\n        $form->addElement('hidden', 'type', $this->type);\n        $id = isset($_GET['id']) ? (int) $_GET['id'] : null;\n        $form->addElement('hidden', 'id', $id);\n\n        // Setting the form elements\n        $header = get_lang('Add');\n        $defaults = [];\n\n        if ('edit' === $action) {\n            $header = get_lang('Edit');\n            // Setting the defaults\n            $defaults = $this->get($id, false);\n        }\n\n        $form->addElement('header', $header);\n\n        if ('edit' === $action) {\n            $translateUrl = api_get_path(WEB_CODE_PATH).'extrafield/translate.php?'\n                .http_build_query(['extra_field' => $id]);\n            $translateButton = Display::toolbarButton(get_lang('Translate this term'), $translateUrl, 'language', 'link');\n\n            $form->addText(\n                'display_text',\n                [get_lang('Name'), $translateButton]\n            );\n        } else {\n            $form->addElement('text', 'display_text', get_lang('Name'));\n        }\n\n        $form->addHtmlEditor('description', get_lang('Description'), false);\n\n        // Field type\n        $types = self::get_field_types();\n\n        $form->addElement(\n            'select',\n            'field_type',\n            get_lang('Field type'),\n            $types,\n            ['id' => 'field_type']\n        );\n        $form->addElement('label', get_lang('Example'), '<div id=\"example\">-</div>');\n        $form->addElement('text', 'variable', get_lang('Field label'), ['class' => 'span5']);\n        $form->addElement(\n            'text',\n            'field_options',\n            get_lang('Possible values'),\n            ['id' => 'field_options', 'class' => 'span6']\n        );\n\n        $fieldWithOptions = [\n            self::FIELD_TYPE_RADIO,\n            self::FIELD_TYPE_SELECT_MULTIPLE,\n            self::FIELD_TYPE_SELECT,\n            self::FIELD_TYPE_TAG,\n            self::FIELD_TYPE_DOUBLE_SELECT,\n            self::FIELD_TYPE_SELECT_WITH_TEXT_FIELD,\n            self::FIELD_TYPE_TRIPLE_SELECT,\n        ];\n\n        if ('edit' == $action) {\n            if (in_array($defaults['field_type'], $fieldWithOptions)) {\n                $url = Display::url(\n                    get_lang('Edit extra field options'),\n                    'extra_field_options.php?type='.$this->type.'&field_id='.$id\n                );\n                $form->addElement('label', null, $url);\n\n                if (self::FIELD_TYPE_SELECT == $defaults['field_type']) {\n                    $urlWorkFlow = Display::url(\n                        get_lang('Edit this field\\'s workflow'),\n                        'extra_field_workflow.php?type='.$this->type.'&field_id='.$id\n                    );\n                    $form->addElement('label', null, $urlWorkFlow);\n                }\n\n                $form->freeze('field_options');\n            }\n        }\n        $form->addElement(\n            'text',\n            'default_value',\n            get_lang('Default value'),\n            ['id' => 'default_value']\n        );\n\n        $group = [];\n        $group[] = $form->createElement('radio', 'visible_to_self', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'visible_to_self', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('Visible to self'), null, false);\n\n        $group = [];\n        $group[] = $form->createElement('radio', 'visible_to_others', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'visible_to_others', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('Visible to others'), null, false);\n\n        $group = [];\n        $group[] = $form->createElement('radio', 'changeable', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'changeable', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('Can change'), null, false);\n\n        $group = [];\n        $group[] = $form->createElement('radio', 'filter', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'filter', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('Filter'), null, false);\n\n        /* Enable this when field_loggeable is introduced as a table field (2.0)\n        $group   = array();\n        $group[] = $form->createElement('radio', 'field_loggeable', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'field_loggeable', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('Field changes should be logged'), '', false);\n        */\n\n        $form->addElement('text', 'field_order', get_lang('Order'));\n\n        if ('edit' == $action) {\n            $option = new ExtraFieldOption($this->type);\n            $defaults['field_options'] = $option->get_field_options_by_field_to_string($id);\n            $form->addButtonUpdate(get_lang('Edit'));\n        } else {\n            $defaults['visible_to_self'] = 0;\n            $defaults['visible_to_others'] = 0;\n            $defaults['changeable'] = 0;\n            $defaults['filter'] = 0;\n            $form->addButtonCreate(get_lang('Add'));\n        }\n\n        /*if (!empty($defaults['created_at'])) {\n            $defaults['created_at'] = api_convert_and_format_date($defaults['created_at']);\n        }\n        if (!empty($defaults['updated_at'])) {\n            $defaults['updated_at'] = api_convert_and_format_date($defaults['updated_at']);\n        }*/\n        $form->setDefaults($defaults);\n\n        // Setting the rules\n        $form->addRule('display_text', get_lang('Required field'), 'required');\n        $form->addRule('field_type', get_lang('Required field'), 'required');\n\n        return $form;\n    }\n\n    /**\n     * Gets an element.\n     *\n     * @param int  $id\n     * @param bool $translateDisplayText Optional\n     *\n     * @return array\n     */\n    public function get($id, $translateDisplayText = true)\n    {\n        $info = parent::get($id);\n\n        if ($translateDisplayText) {\n            $info['display_text'] = self::translateDisplayName($info['variable'], $info['display_text']);\n        }\n\n        return $info;\n    }\n\n    /**\n     * @param $token\n     *\n     * @return string\n     */\n    public function getJqgridActionLinks($token)\n    {\n        //With this function we can add actions to the jgrid (edit, delete, etc)\n        $editIcon = Display::return_icon('edit.png', get_lang('Edit'), '', ICON_SIZE_SMALL);\n        $deleteIcon = Display::return_icon('delete.png', get_lang('Delete'), '', ICON_SIZE_SMALL);\n        $confirmMessage = addslashes(\n            api_htmlentities(get_lang(\"Please confirm your choice\"), ENT_QUOTES)\n        );\n\n        $editButton = <<<JAVASCRIPT\n            <a href=\"?action=edit&type={$this->type}&id=' + options.rowId + '\" class=\"btn btn-link btn-xs\">\\\n                $editIcon\\\n            </a>\nJAVASCRIPT;\n        $deleteButton = <<<JAVASCRIPT\n            <a \\\n                    onclick=\"if (!confirm(\\'$confirmMessage\\')) {return false;}\" \\\n                href=\"?sec_token=$token&type={$this->type}&id=' + options.rowId + '&action=delete\" \\\n                class=\"btn btn-link btn-xs\">\\\n                $deleteIcon\\\n            </a>\nJAVASCRIPT;\n\n        return \"function action_formatter(cellvalue, options, rowObject) {\n            return '$editButton $deleteButton';\n        }\";\n    }\n\n    /**\n     * @param array $columns\n     * @param array $column_model\n     * @param array $extraFields\n     *\n     * @return array\n     */\n    public function getRules(&$columns, &$column_model, $extraFields = [], $checkExtraFieldExistence = false)\n    {\n        $fields = $this->get_all(\n            [\n                'visible_to_self = ? AND filter = ?' => [1, 1],\n            ],\n            'display_text'\n        );\n        $extraFieldOption = new ExtraFieldOption($this->type);\n\n        $rules = [];\n        if (!empty($fields)) {\n            foreach ($fields as $field) {\n                $search_options = [];\n                $type = 'text';\n                if (in_array($field['field_type'], [self::FIELD_TYPE_SELECT, self::FIELD_TYPE_DOUBLE_SELECT])) {\n                    $type = 'select';\n                    $search_options['sopt'] = ['eq', 'ne']; //equal not equal\n                } else {\n                    $search_options['sopt'] = ['cn', 'nc']; //contains not contains\n                }\n\n                $search_options['searchhidden'] = 'true';\n                $search_options['defaultValue'] = isset($search_options['field_default_value'])\n                    ? $search_options['field_default_value']\n                    : null;\n\n                if (self::FIELD_TYPE_DOUBLE_SELECT == $field['field_type']) {\n                    // Add 2 selects\n                    $options = $extraFieldOption->get_field_options_by_field($field['id']);\n                    $options = self::extra_field_double_select_convert_array_to_ordered_array($options);\n\n                    $first_options = [];\n                    if (!empty($options)) {\n                        foreach ($options as $option) {\n                            foreach ($option as $sub_option) {\n                                if (0 == $sub_option['option_value']) {\n                                    $first_options[] = $sub_option['field_id'].'#'.$sub_option['id'].':'\n                                        .$sub_option['display_text'];\n                                }\n                            }\n                        }\n                    }\n\n                    $search_options['value'] = implode(';', $first_options);\n                    $search_options['dataInit'] = 'fill_second_select';\n\n                    // First\n                    $column_model[] = [\n                        'name' => 'extra_'.$field['variable'],\n                        'index' => 'extra_'.$field['variable'],\n                        'width' => '100',\n                        'hidden' => 'true',\n                        'search' => 'true',\n                        'stype' => 'select',\n                        'searchoptions' => $search_options,\n                    ];\n                    $columns[] = $field['display_text'].' (1)';\n                    $rules[] = [\n                        'field' => 'extra_'.$field['variable'],\n                        'op' => 'cn',\n                    ];\n\n                    // Second\n                    $search_options['value'] = $field['id'].':';\n                    $search_options['dataInit'] = 'register_second_select';\n\n                    $column_model[] = [\n                        'name' => 'extra_'.$field['variable'].'_second',\n                        'index' => 'extra_'.$field['variable'].'_second',\n                        'width' => '100',\n                        'hidden' => 'true',\n                        'search' => 'true',\n                        'stype' => 'select',\n                        'searchoptions' => $search_options,\n                    ];\n                    $columns[] = $field['display_text'].' (2)';\n                    $rules[] = ['field' => 'extra_'.$field['variable'].'_second', 'op' => 'cn'];\n                    continue;\n                } else {\n                    $search_options['value'] = $extraFieldOption->getFieldOptionsToString(\n                        $field['id'],\n                        false,\n                        'display_text'\n                    );\n                }\n                $column_model[] = [\n                    'name' => 'extra_'.$field['variable'],\n                    'index' => 'extra_'.$field['variable'],\n                    'width' => '100',\n                    'hidden' => 'true',\n                    'search' => 'true',\n                    'stype' => $type,\n                    'searchoptions' => $search_options,\n                ];\n                $columns[] = $field['display_text'];\n                $rules[] = [\n                    'field' => 'extra_'.$field['variable'],\n                    'op' => 'cn',\n                    'data' => '',\n                ];\n            }\n        }\n\n        return $rules;\n    }\n\n    public function processExtraFieldSearch($values, $form, $alias, $condition = 'OR')\n    {\n        // Parse params.\n        $fields = [];\n        foreach ($values as $key => $value) {\n            if ('extra_' !== substr($key, 0, 6) &&\n                '_extra_' !== substr($key, 0, 7)\n            ) {\n                continue;\n            }\n            if (!empty($value)) {\n                $fields[$key] = $value;\n            }\n        }\n\n        $extraFieldsAll = $this->get_all(['visible_to_self = ? AND filter = ?' => [1, 1]], 'option_order');\n        $extraFieldsType = array_column($extraFieldsAll, 'field_type', 'variable');\n        $extraFields = array_column($extraFieldsAll, 'variable');\n        $filter = new stdClass();\n        $defaults = [];\n        foreach ($fields as $variable => $col) {\n            $variableNoExtra = str_replace('extra_', '', $variable);\n            if (isset($values[$variable]) && !empty($values[$variable]) &&\n                in_array($variableNoExtra, $extraFields)\n            ) {\n                $rule = new stdClass();\n                $rule->field = $variable;\n                $rule->op = 'in';\n                $data = $col;\n                if (is_array($data) && array_key_exists($variable, $data)) {\n                    $data = $col;\n                }\n                $rule->data = $data;\n                $filter->rules[] = $rule;\n                $filter->groupOp = 'AND';\n\n                if (ExtraField::FIELD_TYPE_TAG == $extraFieldsType[$variableNoExtra]) {\n                    $tagElement = $form->getElement($variable);\n                    $tags = [];\n                    foreach ($values[$variable] as $tag) {\n                        $tag = Security::remove_XSS($tag);\n                        $tags[] = $tag;\n                        $tagElement->addOption(\n                            $tag,\n                            $tag\n                        );\n                    }\n                    $defaults[$variable] = $tags;\n                } else {\n                    if (is_array($data)) {\n                        $defaults[$variable] = array_map(['Security', 'remove_XSS'], $data);\n                    } else {\n                        $defaults[$variable] = Security::remove_XSS($data);\n                    }\n                }\n            }\n        }\n\n        $result = $this->getExtraFieldRules($filter, 'extra_', $condition);\n        $conditionArray = $result['condition_array'];\n\n        $whereCondition = '';\n        $extraCondition = '';\n        if (!empty($conditionArray)) {\n            $extraCondition = ' ( ';\n            $extraCondition .= implode(' AND ', $conditionArray);\n            $extraCondition .= ' ) ';\n        }\n        $whereCondition .= $extraCondition;\n        $conditions = $this->parseConditions(\n            [\n                'where' => $whereCondition,\n                'extra' => $result['extra_fields'],\n            ],\n            $alias\n        );\n\n        return ['condition' => $conditions, 'fields' => $fields, 'defaults' => $defaults];\n    }\n\n    /**\n     * @param $filters\n     * @param string $stringToSearch\n     *\n     * @return array\n     */\n    public function getExtraFieldRules($filters, $stringToSearch = 'extra_', $condition = 'OR')\n    {\n        $extraFields = [];\n        $conditionArray = [];\n\n        // Getting double select if exists\n        $double_select = [];\n        if (is_object($filters) &&\n            property_exists($filters, 'rules') &&\n            is_array($filters->rules) &&\n            !empty($filters->rules)\n        ) {\n            foreach ($filters->rules as $rule) {\n                if (empty($rule)) {\n                    continue;\n                }\n                if (false === strpos($rule->field, '_second')) {\n                } else {\n                    $my_field = str_replace('_second', '', $rule->field);\n                    $double_select[$my_field] = $rule->data;\n                }\n            }\n\n            foreach ($filters->rules as $rule) {\n                if (empty($rule)) {\n                    continue;\n                }\n                if (false === strpos($rule->field, $stringToSearch)) {\n                    // normal fields\n                    $field = $rule->field;\n                    if (isset($rule->data) && is_string($rule->data) && -1 != $rule->data) {\n                        $conditionArray[] = $this->get_where_clause($field, $rule->op, $rule->data);\n                    }\n                } else {\n                    // Extra fields\n                    $ruleField = Database::escapeField($rule->field);\n                    if (false === strpos($rule->field, '_second')) {\n                        //No _second\n                        $original_field = str_replace($stringToSearch, '', $rule->field);\n                        $field_option = $this->get_handler_field_info_by_field_variable($original_field);\n\n                        switch ($field_option['field_type']) {\n                            case self::FIELD_TYPE_DOUBLE_SELECT:\n                            if (isset($double_select[$rule->field])) {\n                                $data = explode('#', $rule->data);\n                                $rule->data = $data[1].'::'.$double_select[$rule->field];\n                            } else {\n                                // only was sent 1 select\n                                if (is_string($rule->data)) {\n                                    $data = explode('#', $rule->data);\n                                    $rule->data = $data[1];\n                                }\n                            }\n\n                            if (!isset($rule->data)) {\n                                $conditionArray[] = ' ('\n                                .$this->get_where_clause($rule->field, $rule->op, $rule->data)\n                                .') ';\n                                $extraFields[] = ['field' => $ruleField, 'id' => $field_option['id']];\n                            }\n                                break;\n                            case self::FIELD_TYPE_TAG:\n                            if (isset($rule->data)) {\n                                if (is_int($rule->data) && -1 == $rule->data) {\n                                    break;\n                                }\n\n                                    // Where will be injected in the parseConditions()\n                                //$where = $this->get_where_clause($rule->field, $rule->op, $rule->data, 'OR');\n                                //$conditionArray[] = \" ( $where ) \";\n                                $extraFields[] = [\n                                        'field' => $ruleField,\n                                'id' => $field_option['id'],\n                                'data' => $rule->data,\n                            ];\n                            }\n                                break;\n                            default:\n                                if (isset($rule->data)) {\n                                    if (is_int($rule->data) && -1 == $rule->data) {\n                                        break;\n                                    }\n                                    $where = $this->get_where_clause($rule->field, $rule->op, $rule->data, 'OR');\n                                    $conditionArray[] = \" ( $where ) \";\n                                    $extraFields[] = [\n                                        'field' => $ruleField,\n                                        'id' => $field_option['id'],\n                                        'data' => $rule->data,\n                                    ];\n                                }\n                                break;\n                        }\n                    } else {\n                        $my_field = str_replace('_second', '', $rule->field);\n                        $original_field = str_replace($stringToSearch, '', $my_field);\n                        $field_option = $this->get_handler_field_info_by_field_variable($original_field);\n                        $extraFields[] = [\n                            'field' => $ruleField,\n                        'id' => $field_option['id'],\n                    ];\n                    }\n                }\n            }\n        }\n\n        return ['extra_fields' => $extraFields, 'condition_array' => $conditionArray];\n    }\n\n    /**\n     * @param $col\n     * @param $oper\n     * @param $val\n     * @param $conditionBetweenOptions\n     *\n     * @return string\n     */\n    public function get_where_clause($col, $oper, $val, $conditionBetweenOptions = 'OR')\n    {\n        $col = Database::escapeField($col);\n\n        if (empty($col)) {\n            return '';\n        }\n        $conditionBetweenOptions = in_array($conditionBetweenOptions, ['OR', 'AND']) ? $conditionBetweenOptions : 'OR';\n        if ('bw' === $oper || 'bn' === $oper) {\n            $val .= '%';\n        }\n        if ('ew' === $oper || 'en' === $oper) {\n            $val = '%'.$val;\n        }\n        if ('cn' === $oper || 'nc' === $oper || 'in' === $oper || 'ni' === $oper) {\n            if (is_array($val)) {\n                $result = '\"%'.implode(';', $val).'%\"';\n                foreach ($val as $item) {\n                    $item = trim($item);\n                    $result .= ' '.$conditionBetweenOptions.' '.$col.' LIKE \"%'.$item.'%\"';\n                }\n                $val = $result;\n\n                return \" $col {$this->ops[$oper]} $val \";\n            } else {\n                if (is_string($val)) {\n                    $val = '%'.$val.'%';\n                } else {\n                    $val = '';\n                }\n            }\n        }\n        $val = \\Database::escape_string($val);\n\n        return \" $col {$this->ops[$oper]} '$val' \";\n    }\n\n    /**\n     * @param array  $options\n     * @param string $alias\n     *\n     * @return array\n     */\n    public function parseConditions($options, $alias = 's')\n    {\n        $inject_extra_fields = null;\n        $extraFieldOption = new ExtraFieldOption($this->type);\n        $double_fields = [];\n\n        if (isset($options['extra'])) {\n            $extra_fields = $options['extra'];\n            if (!empty($extra_fields)) {\n                $counter = 1;\n                $extra_field_obj = new ExtraField($this->type);\n                foreach ($extra_fields as &$extra) {\n                    if (!isset($extra['id'])) {\n                        continue;\n                    }\n                    $extra_field_info = $extra_field_obj->get($extra['id']);\n                    if (empty($extra_field_info)) {\n                        continue;\n                    }\n                    $extra['extra_field_info'] = $extra_field_info;\n\n                    switch ($extra_field_info['field_type']) {\n                        case self::FIELD_TYPE_SELECT:\n                        case self::FIELD_TYPE_DOUBLE_SELECT:\n                            $inject_extra_fields .= \" fvo$counter.display_text as {$extra['field']}, \";\n                            break;\n                        case self::FIELD_TYPE_TAG:\n                            // If using OR\n                            // If using AND\n                            $newCounter = 1;\n                            $fields = [];\n                            $tagAlias = $extra['field'];\n                            foreach ($extra['data'] as $data) {\n                                $fields[] = \"tag$counter$newCounter.tag\";\n                                $newCounter++;\n                            }\n\n                            if (!empty($fields)) {\n                                $tags = implode(' , \" \", ', $fields);\n                                $inject_extra_fields .= \" CONCAT($tags) as $tagAlias, \";\n                            }\n                            break;\n                        default:\n                            $inject_extra_fields .= \" fv$counter.value as {$extra['field']}, \";\n                            break;\n                    }\n\n                    if (isset($extra_fields_info[$extra['id']])) {\n                        $info = $extra_fields_info[$extra['id']];\n                    } else {\n                        $info = $this->get($extra['id']);\n                        $extra_fields_info[$extra['id']] = $info;\n                    }\n                    if (isset($info['field_type']) && self::FIELD_TYPE_DOUBLE_SELECT == $info['field_type']) {\n                        $double_fields[$info['id']] = $info;\n                    }\n                    $counter++;\n                }\n            }\n        }\n\n        $options_by_double = [];\n        foreach ($double_fields as $double) {\n            $my_options = $extraFieldOption->get_field_options_by_field($double['id'], true);\n            $options_by_double['extra_'.$double['variable']] = $my_options;\n        }\n\n        $field_value_to_join = [];\n        //filter can be all/any = and/or\n        $inject_joins = null;\n        $inject_where = null;\n        $where = null;\n\n        // Removing double 1=1\n        if (!empty($options['extra']) && !empty($extra_fields)) {\n            // Removing double 1=1\n            if (empty($options['where'])) {\n                $options['where'] = ' 1 = 1 ';\n            }\n            $options['where'] = str_replace(' 1 = 1  AND', '', $options['where']);\n            // Always OR\n            $counter = 1;\n            foreach ($extra_fields as $extra_info) {\n                $extra_field_info = $extra_info['extra_field_info'];\n                $inject_joins .= \" INNER JOIN $this->table_field_values fv$counter\n                                       ON ($alias.\".$this->primaryKey.\" = fv$counter.\".$this->handler_id.') ';\n                // Add options\n                switch ($extra_field_info['field_type']) {\n                        case self::FIELD_TYPE_SELECT:\n                        case self::FIELD_TYPE_DOUBLE_SELECT:\n                            $options['where'] = str_replace(\n                                $extra_info['field'],\n                                'fv'.$counter.'.field_id = '.$extra_info['id'].' AND fvo'.$counter.'.option_value',\n                                $options['where']\n                            );\n                            $inject_joins .= \"\n                                 INNER JOIN $this->table_field_options fvo$counter\n                                 ON (\n                                    fv$counter.field_id = fvo$counter.field_id AND\n                                    fv$counter.value = fvo$counter.option_value\n                                 )\n                                \";\n                            break;\n                        case self::FIELD_TYPE_TAG:\n                            $newCounter = 1;\n                            if (isset($extra_info['data']) && !empty($extra_info['data'])) {\n                                $whereTag = [];\n                                foreach ($extra_info['data'] as $data) {\n                                    $data = Database::escape_string($data);\n                                    $key = $counter.$newCounter;\n                                    $whereTag[] = ' tag'.$key.'.tag LIKE \"%'.$data.'%\" ';\n                                    $inject_joins .= \"\n                                        INNER JOIN $this->table_field_rel_tag tag_rel$key\n                                        ON (\n                                            tag_rel$key.field_id = \".$extra_info['id'].\" AND\n                                            tag_rel$key.item_id = $alias.\".$this->primaryKey.\"\n                                        )\n                                        INNER JOIN $this->table_field_tag tag$key\n                                        ON (tag$key.id = tag_rel$key.tag_id)\n                                    \";\n                                    $newCounter++;\n                                }\n                                if (!empty($whereTag)) {\n                                    $options['where'] .= ' AND  ('.implode(' AND ', $whereTag).') ';\n                                }\n                            }\n                            break;\n                        default:\n                            // text, textarea, etc\n                            $options['where'] = str_replace(\n                                $extra_info['field'],\n                                'fv'.$counter.'.field_id = '.$extra_info['id'].' AND fv'.$counter.'.value',\n                                $options['where']\n                            );\n                            break;\n                    }\n                $field_value_to_join[] = \" fv$counter.$this->handler_id \";\n                $counter++;\n            }\n        }\n\n        if (!empty($options['where'])) {\n            $where .= ' AND '.$options['where'];\n        }\n\n        $order = '';\n        if (!empty($options['order'])) {\n            $order = ' ORDER BY '.$options['order'];\n        }\n        $limit = '';\n        if (!empty($options['limit'])) {\n            $limit = ' LIMIT '.$options['limit'];\n        }\n\n        return [\n            'order' => $order,\n            'limit' => $limit,\n            'where' => $where,\n            'inject_where' => $inject_where,\n            'inject_joins' => $inject_joins,\n            'field_value_to_join' => $field_value_to_join,\n            'inject_extra_fields' => $inject_extra_fields,\n        ];\n    }\n\n    /**\n     * Get the extra fields and their formatted values.\n     *\n     * @param int|string $itemId   The item ID (It could be a session_id, course_id or user_id)\n     * @param bool       $filter\n     * @param array      $onlyShow (list of extra fields variables to show)\n     *\n     * @return array The extra fields data\n     */\n    public function getDataAndFormattedValues($itemId, $filter = false, $onlyShow = [])\n    {\n        $valuesData = [];\n        $fields = $this->get_all();\n        $em = Database::getManager();\n        $repoTag = $em->getRepository(ExtraFieldRelTag::class);\n\n        foreach ($fields as $field) {\n            if ('1' != $field['visible_to_self']) {\n                continue;\n            }\n\n            if ($filter && 1 != $field['filter']) {\n                continue;\n            }\n\n            if (!empty($onlyShow) && !in_array($field['variable'], $onlyShow)) {\n                continue;\n            }\n\n            $valueAsArray = [];\n            $fieldValue = new ExtraFieldValue($this->type);\n            $valueData = $fieldValue->get_values_by_handler_and_field_id(\n                $itemId,\n                $field['id'],\n                true\n            );\n\n            $fieldType = (int) $field['field_type'];\n            if (self::FIELD_TYPE_TAG === $fieldType) {\n                $tags = $repoTag->findBy(['field' => $field['id'], 'itemId' => $itemId]);\n                if ($tags) {\n                    $data = [];\n                    /** @var ExtraFieldRelTag $tag */\n                    foreach ($tags as $extraFieldTag) {\n                        $tag = $extraFieldTag->getTag();\n                        $data[] = $tag->getTag();\n                    }\n                    $valueData = implode(',', $data);\n                    $valueAsArray = $data;\n                }\n            }\n\n            if (!$valueData) {\n                continue;\n            }\n            $displayedValue = get_lang('None');\n            switch ($fieldType) {\n                case self::FIELD_TYPE_CHECKBOX:\n                    if (false !== $valueData && '1' == $valueData['value']) {\n                        $displayedValue = get_lang('Yes');\n                    } else {\n                        $displayedValue = get_lang('No');\n                    }\n                    break;\n                case self::FIELD_TYPE_DATE:\n                    if (false !== $valueData && !empty($valueData['value'])) {\n                        $displayedValue = api_format_date($valueData['value'], DATE_FORMAT_LONG_NO_DAY);\n                    }\n                    break;\n                case self::FIELD_TYPE_TAG:\n                    if (!empty($valueData)) {\n                        $displayedValue = $valueData;\n                    }\n                    break;\n                case self::FIELD_TYPE_FILE:\n                case self::FIELD_TYPE_FILE_IMAGE:\n                    if (false === $valueData || empty($valueData['value'])) {\n                        break;\n                    }\n                    $assetId = $valueData['value'];\n                    $assetRepo = Container::getAssetRepository();\n                    $asset = $assetRepo->find($assetId);\n\n                    if (null === $asset) {\n                        break;\n                    }\n\n                    $url = $assetRepo->getAssetUrl($asset);\n                    if (self::FIELD_TYPE_FILE_IMAGE === $fieldType) {\n                        $image = Display::img(\n                            $url,\n                            $field['display_text'],\n                            ['width' => '300']\n                        );\n                        $displayedValue = Display::url(\n                            $image,\n                            $url,\n                            ['target' => '_blank']\n                        );\n                    } else {\n                        $displayedValue = Display::url(\n                            get_lang('Download'),\n                            $url,\n                            [\n                                'title' => $field['display_text'],\n                                'target' => '_blank',\n                                'class' => 'download_extra_field',\n                            ]\n                        );\n                    }\n                    break;\n                default:\n                    $displayedValue = $valueData['value'];\n                    break;\n            }\n\n            $valuesData[] = [\n                'variable' => $field['variable'],\n                'text' => $field['display_text'],\n                'value' => $displayedValue,\n                'value_as_array' => $valueAsArray,\n            ];\n        }\n\n        return $valuesData;\n    }\n\n    /**\n     * @param int    $fieldId\n     * @param string $tag\n     *\n     * @return array\n     */\n    public function getAllUserPerTag($fieldId, $tag)\n    {\n        $tagRelUserTable = Database::get_main_table(TABLE_MAIN_USER_REL_TAG);\n        $tag = Database::escape_string($tag);\n        $fieldId = (int) $fieldId;\n\n        $sql = \"SELECT user_id\n                FROM {$this->table_field_tag} f INNER JOIN $tagRelUserTable ft\n                ON tag_id = f.id\n                WHERE tag = '$tag' AND f.field_id = $fieldId;\n        \";\n\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * @param int $fieldId\n     * @param int $tagId\n     *\n     * @return array\n     */\n    public function getAllSkillPerTag($fieldId, $tagId)\n    {\n        $skillTable = Database::get_main_table(TABLE_MAIN_SKILL);\n        $tagRelExtraTable = Database::get_main_table(TABLE_MAIN_EXTRA_FIELD_REL_TAG);\n        $fieldId = (int) $fieldId;\n        $tagId = (int) $tagId;\n\n        $sql = \"SELECT s.id\n                FROM $skillTable s INNER JOIN $tagRelExtraTable t\n                ON t.item_id = s.id\n                WHERE tag_id = $tagId AND t.field_id = $fieldId;\n        \";\n\n        $result = Database::query($sql);\n        $result = Database::store_result($result, 'ASSOC');\n\n        $skillList = [];\n        foreach ($result as $index => $value) {\n            $skillList[$value['id']] = $value['id'];\n        }\n\n        return $skillList;\n    }\n\n    /**\n     * @param string $from\n     * @param string $search\n     * @param array  $options\n     *\n     * @return array\n     */\n    public function searchOptionsFromTags($from, $search, $options)\n    {\n        $extraFieldInfo = $this->get_handler_field_info_by_field_variable(\n            str_replace('extra_', '', $from)\n        );\n        $extraFieldInfoTag = $this->get_handler_field_info_by_field_variable(\n            str_replace('extra_', '', $search)\n        );\n\n        if (empty($extraFieldInfo) || empty($extraFieldInfoTag)) {\n            return [];\n        }\n\n        $id = $extraFieldInfo['id'];\n        $tagId = $extraFieldInfoTag['id'];\n\n        $table = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $tagRelExtraTable = Database::get_main_table(TABLE_MAIN_EXTRA_FIELD_REL_TAG);\n        $tagTable = Database::get_main_table(TABLE_MAIN_TAG);\n        $optionsTable = Database::get_main_table(TABLE_EXTRA_FIELD_OPTIONS);\n        $value = Database::escape_string(implode(\"','\", $options));\n\n        $sql = \"SELECT DISTINCT t.*, v.value, o.display_text\n                FROM $tagRelExtraTable te\n                INNER JOIN $tagTable t\n                ON (t.id = te.tag_id AND te.field_id = t.field_id AND te.field_id = $tagId)\n                INNER JOIN $table v\n                ON (te.item_id = v.item_id AND v.field_id = $id)\n                INNER JOIN $optionsTable o\n                ON (o.option_value = v.value)\n                WHERE v.value IN ('\".$value.\"')\n                ORDER BY o.option_order, t.tag\n               \";\n\n        $result = Database::query($sql);\n        $result = Database::store_result($result);\n\n        return $result;\n    }\n\n    public static function getExtraFieldTypesWithFiles(): array\n    {\n        return [self::FIELD_TYPE_FILE_IMAGE, self::FIELD_TYPE_FILE];\n    }\n\n    /**\n     * @param \\FormValidator $form\n     * @param int            $defaultValueId\n     * @param bool           $freezeElement\n     */\n    private function addSelectElement(FormValidator $form, array $fieldDetails, $defaultValueId, $freezeElement = false)\n    {\n        $get_lang_variables = false;\n        if (in_array(\n            $fieldDetails['variable'],\n            ['mail_notify_message', 'mail_notify_invitation', 'mail_notify_group_message']\n        )) {\n            $get_lang_variables = true;\n        }\n\n        // Get extra field workflow\n        $addOptions = [];\n        $optionsExists = false;\n        $options = [];\n\n        $optionList = [];\n        if (!empty($fieldDetails['options'])) {\n            foreach ($fieldDetails['options'] as $option_details) {\n                $optionList[$option_details['id']] = $option_details;\n                if ($get_lang_variables) {\n                    $options[$option_details['option_value']] = $option_details['display_text'];\n                } else {\n                    if ($optionsExists) {\n                        // Adding always the default value\n                        if ($option_details['id'] == $defaultValueId) {\n                            $options[$option_details['option_value']] = $option_details['display_text'];\n                        } else {\n                            if (isset($addOptions) && !empty($addOptions)) {\n                                // Parsing filters\n                                if (in_array($option_details['id'], $addOptions)) {\n                                    $options[$option_details['option_value']] = $option_details['display_text'];\n                                }\n                            }\n                        }\n                    } else {\n                        // Normal behaviour\n                        $options[$option_details['option_value']] = $option_details['display_text'];\n                    }\n                }\n            }\n\n            // Setting priority message\n            if (isset($optionList[$defaultValueId])\n                && isset($optionList[$defaultValueId]['priority'])\n            ) {\n                if (!empty($optionList[$defaultValueId]['priority'])) {\n                    $priorityId = $optionList[$defaultValueId]['priority'];\n                    $option = new ExtraFieldOption($this->type);\n                    $messageType = $option->getPriorityMessageType($priorityId);\n                    $form->addElement(\n                        'label',\n                        null,\n                        Display::return_message(\n                            $optionList[$defaultValueId]['priority_message'],\n                            $messageType\n                        )\n                    );\n                }\n            }\n        }\n\n        /** @var \\HTML_QuickForm_select $slct */\n        $slct = $form->addElement(\n            'select',\n            'extra_'.$fieldDetails['variable'],\n            $fieldDetails['display_text'],\n            [],\n            ['id' => 'extra_'.$fieldDetails['variable']]\n        );\n\n        if (empty($defaultValueId)) {\n            $slct->addOption(get_lang('Please select an option'));\n        }\n\n        foreach ($options as $value => $text) {\n            if (empty($value)) {\n                $slct->addOption($text, $value);\n                continue;\n            }\n\n            $valueParts = explode('#', $text);\n            $dataValue = count($valueParts) > 1 ? array_shift($valueParts) : '';\n\n            $slct->addOption(implode('', $valueParts), $value, ['data-value' => $dataValue]);\n        }\n\n        if ($freezeElement) {\n            $form->freeze('extra_'.$fieldDetails['variable']);\n        }\n    }\n\n    /**\n     * @param \\FormValidator $form\n     * @param array          $fieldDetails\n     * @param array          $extraData\n     * @param bool           $freezeElement\n     *\n     * @return string JavaScript code\n     */\n    private function addDoubleSelectElement(FormValidator $form, $fieldDetails, $extraData, $freezeElement = false)\n    {\n        $firstSelectId = 'first_extra_'.$fieldDetails['variable'];\n        $secondSelectId = 'second_extra_'.$fieldDetails['variable'];\n\n        $jqueryReadyContent = \"\n            $('#$firstSelectId').on('change', function() {\n                var id = $(this).val();\n\n                if (!id) {\n                    $('#$secondSelectId').empty().selectpicker('refresh');\n\n                    return;\n                }\n\n                $.getJSON(_p.web_ajax + 'extra_field.ajax.php?1=1&a=get_second_select_options', {\n                    'type': '{$this->type}',\n                    'field_id': {$fieldDetails['id']},\n                    'option_value_id': id\n                })\n                    .done(function(data) {\n                        $('#$secondSelectId').empty();\n                        $.each(data, function(index, value) {\n                            $('#second_extra_{$fieldDetails['variable']}').append(\n                                $('<option>', {value: index, text: value})\n                            );\n                        });\n                        $('#$secondSelectId').selectpicker('refresh');\n                    });\n            });\n        \";\n\n        $firstId = null;\n        if (!empty($extraData)) {\n            if (isset($extraData['extra_'.$fieldDetails['variable']])) {\n                $firstId = $extraData['extra_'.$fieldDetails['variable']]['extra_'.$fieldDetails['variable']];\n            }\n        }\n\n        $options = $this->extra_field_double_select_convert_array_to_ordered_array($fieldDetails['options']);\n        $values = ['' => get_lang('Select')];\n\n        $second_values = [];\n        if (!empty($options)) {\n            foreach ($options as $option) {\n                foreach ($option as $sub_option) {\n                    if ('0' == $sub_option['option_value']) {\n                        $values[$sub_option['id']] = $sub_option['display_text'];\n\n                        continue;\n                    }\n\n                    if ($firstId === $sub_option['option_value']) {\n                        $second_values[$sub_option['id']] = $sub_option['display_text'];\n                    }\n                }\n            }\n        }\n\n        $form\n            ->defaultRenderer()\n            ->setGroupElementTemplate('<p>{element}</p>', 'extra_'.$fieldDetails['variable']);\n        $group = [];\n        $group[] = $form->createElement(\n            'select',\n            'extra_'.$fieldDetails['variable'],\n            null,\n            $values,\n            ['id' => $firstSelectId]\n        );\n        $group[] = $form->createElement(\n            'select',\n            'extra_'.$fieldDetails['variable'].'_second',\n            null,\n            $second_values,\n            ['id' => $secondSelectId]\n        );\n        $form->addGroup(\n            $group,\n            'extra_'.$fieldDetails['variable'],\n            $fieldDetails['display_text']\n        );\n\n        if ($freezeElement) {\n            $form->freeze('extra_'.$fieldDetails['variable']);\n        }\n\n        return $jqueryReadyContent;\n    }\n\n    /**\n     * @param \\FormValidator $form\n     * @param bool           $freezeElement Optional\n     *\n     * @return string JavaScript code\n     */\n    private function addSelectWithTextFieldElement(\n        FormValidator $form,\n        array $fieldDetails,\n        $freezeElement = false\n    ) {\n        $firstSelectId = 'slct_extra_'.$fieldDetails['variable'];\n        $txtSelectId = 'txt_extra_'.$fieldDetails['variable'];\n\n        $jqueryReadyContent = \"\n            $('#$firstSelectId').on('change', function() {\n                var id = $(this).val();\n\n                if (!id) {\n                    $('#$txtSelectId').val('');\n                }\n            });\n        \";\n\n        $options = $this->extra_field_double_select_convert_array_to_ordered_array($fieldDetails['options']);\n        $values = ['' => get_lang('Select')];\n\n        if (!empty($options)) {\n            foreach ($options as $option) {\n                foreach ($option as $sub_option) {\n                    if ('0' != $sub_option['option_value']) {\n                        continue;\n                    }\n\n                    $values[$sub_option['id']] = $sub_option['display_text'];\n                }\n            }\n        }\n\n        $form\n            ->defaultRenderer()\n            ->setGroupElementTemplate('<p>{element}</p>', 'extra_'.$fieldDetails['variable']);\n        $group = [];\n        $group[] = $form->createElement(\n            'select',\n            'extra_'.$fieldDetails['variable'],\n            null,\n            $values,\n            ['id' => $firstSelectId]\n        );\n        $group[] = $form->createElement(\n            'text',\n            'extra_'.$fieldDetails['variable'].'_second',\n            null,\n            ['id' => $txtSelectId]\n        );\n        $form->addGroup(\n            $group,\n            'extra_'.$fieldDetails['variable'],\n            $fieldDetails['display_text']\n        );\n\n        if ($freezeElement) {\n            $form->freeze('extra_'.$fieldDetails['variable']);\n        }\n\n        return $jqueryReadyContent;\n    }\n\n    /**\n     * @param \\FormValidator $form\n     * @param bool           $freezeElement\n     *\n     * @return string\n     */\n    private function addTripleSelectElement(\n        FormValidator $form,\n        array $fieldDetails,\n        array $extraData,\n        $freezeElement\n    ) {\n        $variable = $fieldDetails['variable'];\n        $id = $fieldDetails['id'];\n        $slctFirstId = \"first_extra$variable\";\n        $slctSecondId = \"second_extra$variable\";\n        $slctThirdId = \"third_extra$variable\";\n        $langSelect = get_lang('Select');\n\n        $js = \"\n            (function () {\n                var slctFirst = $('#$slctFirstId'),\n                    slctSecond = $('#$slctSecondId'),\n                    slctThird = $('#$slctThirdId');\n\n                slctFirst.on('change', function () {\n                    slctSecond.empty().selectpicker('refresh');\n                    slctThird.empty().selectpicker('refresh');\n\n                    var level = $(this).val();\n\n                    if (!level) {\n                        return;\n                    }\n\n                    $.getJSON(_p.web_ajax + 'extra_field.ajax.php', {\n                        'a': 'get_second_select_options',\n                        'type': '$this->type',\n                        'field_id': $id,\n                        'option_value_id': level\n                    })\n                        .done(function (data) {\n                            slctSecond.append(\n                                $('<option>', {value: '', text: '$langSelect'})\n                            );\n\n                            $.each(data, function (index, value) {\n                                var valueParts = value.split('#'),\n                                    dataValue = valueParts.length > 1 ? valueParts.shift() : '';\n\n                                slctSecond.append(\n                                    $('<option>', {value: index, text: valueParts.join(''), 'data-value': dataValue})\n                                );\n                            });\n\n                            slctSecond.selectpicker('refresh');\n                        });\n                });\n                slctSecond.on('change', function () {\n                    slctThird.empty().selectpicker('refresh');\n\n                    var level = $(this).val();\n\n                    if (!level) {\n                        return;\n                    }\n\n                    $.getJSON(_p.web_ajax + 'extra_field.ajax.php', {\n                        'a': 'get_second_select_options',\n                        'type': '$this->type',\n                        'field_id': $id,\n                        'option_value_id': level\n                    })\n                        .done(function (data) {\n                            slctThird.append(\n                                $('<option>', {value: '', text: '$langSelect'})\n                            );\n\n                            $.each(data, function (index, value) {\n                                var valueParts = value.split('#'),\n                                    dataValue = valueParts.length > 1 ? valueParts.shift() : '';\n\n                                slctThird.append(\n                                    $('<option>', {value: index, text: valueParts.join(''), 'data-value': dataValue})\n                                );\n                            });\n\n                            slctThird.selectpicker('refresh');\n                        });\n                });\n            })();\n        \";\n\n        $firstId = isset($extraData[\"extra_$variable\"][\"extra_$variable\"])\n            ? $extraData[\"extra_$variable\"][\"extra_$variable\"]\n            : '';\n        $secondId = isset($extraData[\"extra_$variable\"][\"extra_{$variable}_second\"])\n            ? $extraData[\"extra_$variable\"][\"extra_{$variable}_second\"]\n            : '';\n\n        $options = $this->tripleSelectConvertArrayToOrderedArray($fieldDetails['options']);\n        $values1 = ['' => $langSelect];\n        $values2 = ['' => $langSelect];\n        $values3 = ['' => $langSelect];\n        $level1 = $this->getOptionsFromTripleSelect($options['level1'], 0);\n        $level2 = $this->getOptionsFromTripleSelect($options['level2'], $firstId);\n        $level3 = $this->getOptionsFromTripleSelect($options['level3'], $secondId);\n        /** @var \\HTML_QuickForm_select $slctFirst */\n        $slctFirst = $form->createElement('select', \"extra_$variable\", null, $values1, ['id' => $slctFirstId]);\n        /** @var \\HTML_QuickForm_select $slctSecond */\n        $slctSecond = $form->createElement(\n            'select',\n            \"extra_{$variable}_second\",\n            null,\n            $values2,\n            ['id' => $slctSecondId]\n        );\n        /** @var \\HTML_QuickForm_select $slctThird */\n        $slctThird = $form->createElement('select', \"extra_{$variable}_third\", null, $values3, ['id' => $slctThirdId]);\n\n        foreach ($level1 as $item1) {\n            $valueParts = explode('#', $item1['display_text']);\n            $dataValue = count($valueParts) > 1 ? array_shift($valueParts) : '';\n            $slctFirst->addOption(implode('', $valueParts), $item1['id'], ['data-value' => $dataValue]);\n        }\n\n        foreach ($level2 as $item2) {\n            $valueParts = explode('#', $item2['display_text']);\n            $dataValue = count($valueParts) > 1 ? array_shift($valueParts) : '';\n            $slctSecond->addOption(implode('', $valueParts), $item2['id'], ['data-value' => $dataValue]);\n        }\n\n        foreach ($level3 as $item3) {\n            $valueParts = explode('#', $item3['display_text']);\n            $dataValue = count($valueParts) > 1 ? array_shift($valueParts) : '';\n            $slctThird->addOption(implode('', $valueParts), $item3['id'], ['data-value' => $dataValue]);\n        }\n\n        $form\n            ->defaultRenderer()\n            ->setGroupElementTemplate('<p>{element}</p>', \"extra_$variable\");\n        $form->addGroup([$slctFirst, $slctSecond, $slctThird], \"extra_$variable\", $fieldDetails['display_text']);\n\n        if ($freezeElement) {\n            $form->freeze('extra_'.$fieldDetails['variable']);\n        }\n\n        return $js;\n    }\n\n    /**\n     * @param int $parentId\n     *\n     * @return array\n     */\n    private static function getOptionsFromTripleSelect(array $options, $parentId)\n    {\n        return array_filter(\n            $options,\n            function ($option) use ($parentId) {\n                return $option['option_value'] == $parentId;\n            }\n        );\n    }\n}\n"], "filenames": ["public/main/inc/ajax/model.ajax.php", "public/main/inc/lib/database.lib.php", "public/main/inc/lib/extra_field.lib.php"], "buggy_code_start_loc": [111, 753, 1587], "buggy_code_end_loc": [2520, 753, 3205], "fixing_code_start_loc": [112, 754, 1587], "fixing_code_end_loc": [2516, 759, 3209], "type": "CWE-89", "message": "main/inc/ajax/model.ajax.php in Chamilo through 1.11.14 allows SQL Injection via the searchField, filters, or filters2 parameter.", "other": {"cve": {"id": "CVE-2021-34187", "sourceIdentifier": "cve@mitre.org", "published": "2021-06-28T16:15:08.700", "lastModified": "2021-07-01T18:34:08.087", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "main/inc/ajax/model.ajax.php in Chamilo through 1.11.14 allows SQL Injection via the searchField, filters, or filters2 parameter."}, {"lang": "es", "value": "Un archivo main/inc/ajax/model.ajax.php en Chamilo versiones hasta 1.11.14, permite una inyecci\u00f3n SQL por medio de los par\u00e1metros searchField, filters o filters2"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.11.14", "matchCriteriaId": "3F377513-C59E-4FD6-97E5-47B4474F5FA9"}]}]}], "references": [{"url": "https://github.com/chamilo/chamilo-lms/commit/005dc8e9eccc6ea35264064ae09e2e84af8d5b59", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/chamilo/chamilo-lms/commit/f7f93579ed64765c2667910b9c24d031b0a00571", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://murat.one/?p=118", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://support.chamilo.org/projects/1/wiki/Security_issues#Issue-67-2021-05-27-High-impact-very-high-risk-Unauthenticated-SQL-injection", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/005dc8e9eccc6ea35264064ae09e2e84af8d5b59"}}