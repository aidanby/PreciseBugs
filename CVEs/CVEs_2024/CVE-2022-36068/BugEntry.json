{"buggy_code": ["# frozen_string_literal: true\n\nrequire 'base64'\n\nclass Admin::ThemesController < Admin::AdminController\n\n  skip_before_action :check_xhr, only: [:show, :preview, :export]\n\n  def preview\n    theme = Theme.find_by(id: params[:id])\n    raise Discourse::InvalidParameters.new(:id) unless theme\n\n    redirect_to path(\"/?preview_theme_id=#{theme.id}\")\n  end\n\n  def upload_asset\n\n    ban_in_allowlist_mode!\n\n    path = params[:file].path\n\n    hijack do\n      File.open(path) do |file|\n        filename = params[:file]&.original_filename || File.basename(path)\n        upload = UploadCreator.new(file, filename, for_theme: true).create_for(theme_user.id)\n        if upload.errors.count > 0\n          render_json_error upload\n        else\n          render json: { upload_id: upload.id }, status: :created\n        end\n      end\n    end\n  end\n\n  def generate_key_pair\n    require 'sshkey'\n    k = SSHKey.generate\n    Discourse.redis.setex(\"ssh_key_#{k.ssh_public_key}\", 1.hour, k.private_key)\n    render json: { public_key: k.ssh_public_key }\n  end\n\n  THEME_CONTENT_TYPES ||= %w{\n    application/gzip\n    application/x-gzip\n    application/x-zip-compressed\n    application/zip\n  }\n\n  def import\n    @theme = nil\n    if params[:theme] && params[:theme].content_type == \"application/json\"\n\n      ban_in_allowlist_mode!\n\n      # .dcstyle.json import. Deprecated, but still available to allow conversion\n      json = JSON::parse(params[:theme].read)\n      theme = json['theme']\n\n      @theme = Theme.new(name: theme[\"name\"], user_id: theme_user.id, auto_update: false)\n      theme[\"theme_fields\"]&.each do |field|\n\n        if field[\"raw_upload\"]\n          begin\n            tmp = Tempfile.new\n            tmp.binmode\n            file = Base64.decode64(field[\"raw_upload\"])\n            tmp.write(file)\n            tmp.rewind\n            upload = UploadCreator.new(tmp, field[\"filename\"]).create_for(theme_user.id)\n            field[\"upload_id\"] = upload.id\n          ensure\n            tmp.unlink\n          end\n        end\n\n        @theme.set_field(\n          target: field[\"target\"],\n          name: field[\"name\"],\n          value: field[\"value\"],\n          type_id: field[\"type_id\"],\n          upload_id: field[\"upload_id\"]\n        )\n      end\n\n      if @theme.save\n        log_theme_change(nil, @theme)\n        render json: @theme, status: :created\n      else\n        render json: @theme.errors, status: :unprocessable_entity\n      end\n    elsif remote = params[:remote]\n      begin\n        guardian.ensure_allowed_theme_repo_import!(remote.strip)\n      rescue Discourse::InvalidAccess\n        render_json_error I18n.t(\"themes.import_error.not_allowed_theme\", { repo: remote.strip }), status: :forbidden\n        return\n      end\n\n      begin\n        branch = params[:branch] ? params[:branch] : nil\n        private_key = params[:public_key] ? Discourse.redis.get(\"ssh_key_#{params[:public_key]}\") : nil\n        return render_json_error I18n.t(\"themes.import_error.ssh_key_gone\") if params[:public_key].present? && private_key.blank?\n\n        @theme = RemoteTheme.import_theme(remote, theme_user, private_key: private_key, branch: branch)\n        render json: @theme, status: :created\n      rescue RemoteTheme::ImportError => e\n        if params[:force]\n          theme_name = params[:remote].gsub(/.git$/, \"\").split(\"/\").last\n\n          remote_theme = RemoteTheme.new\n          remote_theme.private_key = private_key\n          remote_theme.branch = params[:branch] ? params[:branch] : nil\n          remote_theme.remote_url = params[:remote]\n          remote_theme.save!\n\n          @theme = Theme.new(user_id: theme_user&.id || -1, name: theme_name)\n          @theme.remote_theme = remote_theme\n          @theme.save!\n\n          render json: @theme, status: :created\n        else\n          render_json_error e.message\n        end\n      end\n    elsif params[:bundle] || (params[:theme] && THEME_CONTENT_TYPES.include?(params[:theme].content_type))\n\n      ban_in_allowlist_mode!\n\n      # params[:bundle] used by theme CLI. params[:theme] used by admin UI\n      bundle = params[:bundle] || params[:theme]\n      theme_id = params[:theme_id]\n      update_components = params[:components]\n      match_theme_by_name = !!params[:bundle] && !params.key?(:theme_id) # Old theme CLI behavior, match by name. Remove Jan 2020\n      begin\n        @theme = RemoteTheme.update_zipped_theme(\n          bundle.path,\n          bundle.original_filename,\n          match_theme: match_theme_by_name,\n          user: theme_user,\n          theme_id: theme_id,\n          update_components: update_components\n        )\n        log_theme_change(nil, @theme)\n        render json: @theme, status: :created\n      rescue RemoteTheme::ImportError => e\n        render_json_error e.message\n      end\n    else\n      render_json_error I18n.t(\"themes.import_error.unknown_file_type\"), status: :unprocessable_entity\n    end\n  end\n\n  def index\n    @themes = Theme.include_relations.order(:name)\n    @color_schemes = ColorScheme.all.includes(:theme, color_scheme_colors: :color_scheme).to_a\n\n    payload = {\n      themes: ActiveModel::ArraySerializer.new(@themes, each_serializer: ThemeSerializer),\n      extras: {\n        color_schemes: ActiveModel::ArraySerializer.new(@color_schemes, each_serializer: ColorSchemeSerializer)\n      }\n    }\n\n    respond_to do |format|\n      format.json { render json: payload }\n    end\n  end\n\n  def create\n\n    ban_in_allowlist_mode!\n\n    @theme = Theme.new(name: theme_params[:name],\n                       user_id: theme_user.id,\n                       user_selectable: theme_params[:user_selectable] || false,\n                       color_scheme_id: theme_params[:color_scheme_id],\n                       component: [true, \"true\"].include?(theme_params[:component]))\n    set_fields\n\n    respond_to do |format|\n      if @theme.save\n        update_default_theme\n        log_theme_change(nil, @theme)\n        format.json { render json: @theme, status: :created }\n      else\n        format.json { render json: @theme.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  def update\n    @theme = Theme.include_relations.find_by(id: params[:id])\n    raise Discourse::InvalidParameters.new(:id) unless @theme\n\n    original_json = ThemeSerializer.new(@theme, root: false).to_json\n    disables_component = [false, \"false\"].include?(theme_params[:enabled])\n    enables_component = [true, \"true\"].include?(theme_params[:enabled])\n\n    [:name, :color_scheme_id, :user_selectable, :enabled, :auto_update].each do |field|\n      if theme_params.key?(field)\n        @theme.public_send(\"#{field}=\", theme_params[field])\n      end\n    end\n\n    if theme_params.key?(:child_theme_ids)\n      add_relative_themes!(:child, theme_params[:child_theme_ids])\n    end\n\n    if theme_params.key?(:parent_theme_ids)\n      add_relative_themes!(:parent, theme_params[:parent_theme_ids])\n    end\n\n    set_fields\n    update_settings\n    update_translations\n    handle_switch\n\n    if params[:theme][:remote_check]\n      @theme.remote_theme.update_remote_version\n    end\n\n    if params[:theme][:remote_update]\n      @theme.remote_theme.update_from_remote\n    end\n\n    respond_to do |format|\n      if @theme.save\n        update_default_theme\n\n        @theme = Theme.include_relations.find(@theme.id)\n\n        if (!disables_component && !enables_component) || theme_params.keys.size > 1\n          log_theme_change(original_json, @theme)\n        end\n        log_theme_component_disabled if disables_component\n        log_theme_component_enabled if enables_component\n\n        format.json { render json: @theme, status: :ok }\n      else\n        format.json do\n          error = @theme.errors.full_messages.join(\", \").presence\n          error = I18n.t(\"themes.bad_color_scheme\") if @theme.errors[:color_scheme].present?\n          error ||= I18n.t(\"themes.other_error\")\n\n          render json: { errors: [ error ] }, status: :unprocessable_entity\n        end\n      end\n    end\n  rescue RemoteTheme::ImportError => e\n    render_json_error e.message\n  end\n\n  def destroy\n    @theme = Theme.find_by(id: params[:id])\n    raise Discourse::InvalidParameters.new(:id) unless @theme\n\n    StaffActionLogger.new(current_user).log_theme_destroy(@theme)\n    @theme.destroy\n\n    respond_to do |format|\n      format.json { head :no_content }\n    end\n  end\n\n  def show\n    @theme = Theme.include_relations.find_by(id: params[:id])\n    raise Discourse::InvalidParameters.new(:id) unless @theme\n\n    render json: ThemeSerializer.new(@theme)\n  end\n\n  def export\n    @theme = Theme.find_by(id: params[:id])\n    raise Discourse::InvalidParameters.new(:id) unless @theme\n\n    exporter = ThemeStore::ZipExporter.new(@theme)\n    file_path = exporter.package_filename\n\n    headers['Content-Length'] = File.size(file_path).to_s\n    send_data File.read(file_path),\n      filename: File.basename(file_path),\n      content_type: \"application/zip\"\n  ensure\n    exporter.cleanup!\n  end\n\n  def update_single_setting\n    params.require(\"name\")\n    @theme = Theme.find_by(id: params[:id])\n    raise Discourse::InvalidParameters.new(:id) unless @theme\n\n    setting_name = params[:name].to_sym\n    new_value = params[:value] || nil\n\n    previous_value = @theme.cached_settings[setting_name]\n    @theme.update_setting(setting_name, new_value)\n    @theme.save\n\n    log_theme_setting_change(setting_name, previous_value, new_value)\n\n    updated_setting = @theme.cached_settings.select { |key, val| key == setting_name }\n    render json: updated_setting, status: :ok\n  end\n\n  private\n\n  def ban_in_allowlist_mode!\n    raise Discourse::InvalidAccess if !Theme.allowed_remote_theme_ids.nil?\n  end\n\n  def ban_for_remote_theme!\n    raise Discourse::InvalidAccess if @theme.remote_theme&.is_git?\n  end\n\n  def add_relative_themes!(kind, ids)\n    expected = ids.map(&:to_i)\n\n    relation = kind == :child ? @theme.child_theme_relation : @theme.parent_theme_relation\n\n    relation.to_a.each do |relative|\n      if kind == :child && expected.include?(relative.child_theme_id)\n        expected.reject! { |id| id == relative.child_theme_id }\n      elsif kind == :parent && expected.include?(relative.parent_theme_id)\n        expected.reject! { |id| id == relative.parent_theme_id }\n      else\n        relative.destroy\n      end\n    end\n\n    Theme.where(id: expected).each do |theme|\n      @theme.add_relative_theme!(kind, theme)\n    end\n  end\n\n  def update_default_theme\n    if theme_params.key?(:default)\n      is_default = theme_params[:default].to_s == \"true\"\n      if @theme.id == SiteSetting.default_theme_id && !is_default\n        Theme.clear_default!\n      elsif is_default\n        @theme.set_default!\n      end\n    end\n  end\n\n  def theme_params\n    @theme_params ||=\n      begin\n        # deep munge is a train wreck, work around it for now\n        params[:theme][:child_theme_ids] ||= [] if params[:theme].key?(:child_theme_ids)\n        params[:theme][:parent_theme_ids] ||= [] if params[:theme].key?(:parent_theme_ids)\n\n        params.require(:theme).permit(\n          :name,\n          :color_scheme_id,\n          :default,\n          :user_selectable,\n          :component,\n          :enabled,\n          :auto_update,\n          settings: {},\n          translations: {},\n          theme_fields: [:name, :target, :value, :upload_id, :type_id],\n          child_theme_ids: [],\n          parent_theme_ids: []\n        )\n      end\n  end\n\n  def set_fields\n    return unless fields = theme_params[:theme_fields]\n\n    ban_in_allowlist_mode!\n    ban_for_remote_theme!\n\n    fields.each do |field|\n      @theme.set_field(\n        target: field[:target],\n        name: field[:name],\n        value: field[:value],\n        type_id: field[:type_id],\n        upload_id: field[:upload_id]\n      )\n    end\n  end\n\n  def update_settings\n    return unless target_settings = theme_params[:settings]\n\n    target_settings.each_pair do |setting_name, new_value|\n      @theme.update_setting(setting_name.to_sym, new_value)\n    end\n  end\n\n  def update_translations\n    return unless target_translations = theme_params[:translations]\n\n    target_translations.each_pair do |translation_key, new_value|\n      @theme.update_translation(translation_key, new_value)\n    end\n  end\n\n  def log_theme_change(old_record, new_record)\n    StaffActionLogger.new(current_user).log_theme_change(old_record, new_record)\n  end\n\n  def log_theme_setting_change(setting_name, previous_value, new_value)\n    StaffActionLogger.new(current_user).log_theme_setting_change(setting_name, previous_value, new_value, @theme)\n  end\n\n  def log_theme_component_disabled\n    StaffActionLogger.new(current_user).log_theme_component_disabled(@theme)\n  end\n\n  def log_theme_component_enabled\n    StaffActionLogger.new(current_user).log_theme_component_enabled(@theme)\n  end\n\n  def handle_switch\n    param = theme_params[:component]\n    if param.to_s == \"false\" && @theme.component?\n      raise Discourse::InvalidParameters.new(:component) if @theme.id == SiteSetting.default_theme_id\n      @theme.switch_to_theme!\n    elsif param.to_s == \"true\" && !@theme.component?\n      raise Discourse::InvalidParameters.new(:component) if @theme.id == SiteSetting.default_theme_id\n      @theme.switch_to_component!\n    end\n  end\n\n  # Overridden by theme-creator plugin\n  def theme_user\n    current_user\n  end\nend\n", "# frozen_string_literal: true\n\nrequire \"sidekiq/web\"\nrequire \"mini_scheduler/web\"\n\n# The following constants have been replaced with `RouteFormat` and are deprecated.\nUSERNAME_ROUTE_FORMAT = /[%\\w.\\-]+?/ unless defined? USERNAME_ROUTE_FORMAT\nBACKUP_ROUTE_FORMAT = /.+\\.(sql\\.gz|tar\\.gz|tgz)/i unless defined? BACKUP_ROUTE_FORMAT\n\nDiscourse::Application.routes.draw do\n  def patch(*) end # Disable PATCH requests\n\n  scope path: nil, constraints: { format: /(json|html|\\*\\/\\*)/ } do\n    relative_url_root = (defined?(Rails.configuration.relative_url_root) && Rails.configuration.relative_url_root) ? Rails.configuration.relative_url_root + '/' : '/'\n\n    match \"/404\", to: \"exceptions#not_found\", via: [:get, :post]\n    get \"/404-body\" => \"exceptions#not_found_body\"\n\n    get \"/bootstrap\" => \"bootstrap#index\"\n\n    post \"webhooks/aws\" => \"webhooks#aws\"\n    post \"webhooks/mailgun\"  => \"webhooks#mailgun\"\n    post \"webhooks/mailjet\"  => \"webhooks#mailjet\"\n    post \"webhooks/mandrill\" => \"webhooks#mandrill\"\n    get \"webhooks/mandrill\" => \"webhooks#mandrill_head\"\n    post \"webhooks/postmark\" => \"webhooks#postmark\"\n    post \"webhooks/sendgrid\" => \"webhooks#sendgrid\"\n    post \"webhooks/sparkpost\" => \"webhooks#sparkpost\"\n\n    scope path: nil, format: true, constraints: { format: :xml } do\n      resources :sitemap, only: [:index]\n      get \"/sitemap_:page\" => \"sitemap#page\", page: /[1-9][0-9]*/\n      get \"/sitemap_recent\" => \"sitemap#recent\"\n      get \"/news\" => \"sitemap#news\"\n    end\n\n    scope path: nil, constraints: { format: /.*/ } do\n      if Rails.env.development?\n        mount Sidekiq::Web => \"/sidekiq\"\n        mount Logster::Web => \"/logs\"\n      else\n        # only allow sidekiq in master site\n        mount Sidekiq::Web => \"/sidekiq\", constraints: AdminConstraint.new(require_master: true)\n        mount Logster::Web => \"/logs\", constraints: AdminConstraint.new\n      end\n    end\n\n    resources :about do\n      collection do\n        get \"live_post_counts\"\n      end\n    end\n\n    get \"finish-installation\" => \"finish_installation#index\"\n    get \"finish-installation/register\" => \"finish_installation#register\"\n    post \"finish-installation/register\" => \"finish_installation#register\"\n    get \"finish-installation/confirm-email\" => \"finish_installation#confirm_email\"\n    put \"finish-installation/resend-email\" => \"finish_installation#resend_email\"\n\n    get \"pub/check-slug\" => \"published_pages#check_slug\"\n    get \"pub/by-topic/:topic_id\" => \"published_pages#details\"\n    put \"pub/by-topic/:topic_id\" => \"published_pages#upsert\"\n    delete \"pub/by-topic/:topic_id\" => \"published_pages#destroy\"\n    get \"pub/:slug\" => \"published_pages#show\"\n\n    resources :directory_items\n\n    get \"site\" => \"site#site\"\n    namespace :site do\n      get \"settings\"\n      get \"custom_html\"\n      get \"banner\"\n      get \"emoji\"\n    end\n\n    get \"site/basic-info\" => 'site#basic_info'\n    get \"site/statistics\" => 'site#statistics'\n\n    get \"srv/status\" => \"forums#status\"\n\n    get \"wizard\" => \"wizard#index\"\n    get 'wizard/steps' => 'steps#index'\n    get 'wizard/steps/:id' => \"wizard#index\"\n    put 'wizard/steps/:id' => \"steps#update\"\n\n    namespace :admin, constraints: StaffConstraint.new do\n      get \"\" => \"admin#index\"\n\n      get 'plugins' => 'plugins#index'\n\n      resources :site_settings, constraints: AdminConstraint.new do\n        collection do\n          get \"category/:id\" => \"site_settings#index\"\n        end\n\n        put \"user_count\" => \"site_settings#user_count\"\n      end\n\n      get \"reports\" => \"reports#index\"\n      get \"reports/bulk\" => \"reports#bulk\"\n      get \"reports/:type\" => \"reports#show\"\n\n      resources :groups, only: [:create] do\n        member do\n          put \"owners\" => \"groups#add_owners\"\n          delete \"owners\" => \"groups#remove_owner\"\n          put \"primary\" => \"groups#set_primary\"\n        end\n      end\n      resources :groups, except: [:create], constraints: AdminConstraint.new do\n        collection do\n          put \"automatic_membership_count\" => \"groups#automatic_membership_count\"\n        end\n      end\n\n      get \"groups/:type\" => \"groups#show\", constraints: AdminConstraint.new\n      get \"groups/:type/:id\" => \"groups#show\", constraints: AdminConstraint.new\n\n      resources :users, id: RouteFormat.username, except: [:show] do\n        collection do\n          get \"list\" => \"users#index\"\n          get \"list/:query\" => \"users#index\"\n          get \"ip-info\" => \"users#ip_info\"\n          delete \"delete-others-with-same-ip\" => \"users#delete_other_accounts_with_same_ip\"\n          get \"total-others-with-same-ip\" => \"users#total_other_accounts_with_same_ip\"\n          put \"approve-bulk\" => \"users#approve_bulk\"\n        end\n        delete \"penalty_history\", constraints: AdminConstraint.new\n        put \"suspend\"\n        put \"delete_posts_batch\"\n        put \"unsuspend\"\n        put \"revoke_admin\", constraints: AdminConstraint.new\n        put \"grant_admin\", constraints: AdminConstraint.new\n        put \"revoke_moderation\", constraints: AdminConstraint.new\n        put \"grant_moderation\", constraints: AdminConstraint.new\n        put \"approve\"\n        post \"log_out\", constraints: AdminConstraint.new\n        put \"activate\"\n        put \"deactivate\"\n        put \"silence\"\n        put \"unsilence\"\n        put \"trust_level\"\n        put \"trust_level_lock\"\n        put \"primary_group\"\n        post \"groups\" => \"users#add_group\", constraints: AdminConstraint.new\n        delete \"groups/:group_id\" => \"users#remove_group\", constraints: AdminConstraint.new\n        get \"badges\"\n        get \"leader_requirements\" => \"users#tl3_requirements\"\n        get \"tl3_requirements\"\n        put \"anonymize\"\n        post \"merge\"\n        post \"reset_bounce_score\"\n        put \"disable_second_factor\"\n        delete \"sso_record\"\n      end\n      get \"users/:id.json\" => 'users#show', defaults: { format: 'json' }\n      get 'users/:id/:username' => 'users#show', constraints: { username: RouteFormat.username }, as: :user_show\n      get 'users/:id/:username/badges' => 'users#show'\n      get 'users/:id/:username/tl3_requirements' => 'users#show'\n\n      post \"users/sync_sso\" => \"users#sync_sso\", constraints: AdminConstraint.new\n\n      resources :impersonate, constraints: AdminConstraint.new\n\n      resources :email, constraints: AdminConstraint.new do\n        collection do\n          post \"test\"\n          get \"sent\"\n          get \"skipped\"\n          get \"bounced\"\n          get \"received\"\n          get \"rejected\"\n          get \"/incoming/:id/raw\" => \"email#raw_email\"\n          get \"/incoming/:id\" => \"email#incoming\"\n          get \"/incoming_from_bounced/:id\" => \"email#incoming_from_bounced\"\n          get \"preview-digest\" => \"email#preview_digest\"\n          get \"send-digest\" => \"email#send_digest\"\n          get \"smtp_should_reject\"\n          post \"handle_mail\"\n          get \"advanced-test\"\n          post \"advanced-test\" => \"email#advanced_test\"\n        end\n      end\n\n      scope \"/logs\" do\n        resources :staff_action_logs,     only: [:index]\n        get 'staff_action_logs/:id/diff' => 'staff_action_logs#diff'\n        resources :screened_emails,       only: [:index, :destroy]\n        resources :screened_ip_addresses, only: [:index, :create, :update, :destroy]\n        resources :screened_urls,         only: [:index]\n        resources :search_logs,           only: [:index]\n        get 'search_logs/term/' => 'search_logs#term'\n      end\n\n      get \"/logs\" => \"staff_action_logs#index\"\n\n      # alias\n      get '/logs/watched_words', to: redirect(relative_url_root + 'admin/customize/watched_words')\n      get '/logs/watched_words/*path', to: redirect(relative_url_root + 'admin/customize/watched_words/%{path}')\n\n      get \"customize\" => \"color_schemes#index\", constraints: AdminConstraint.new\n      get \"customize/themes\" => \"themes#index\", constraints: AdminConstraint.new\n      get \"customize/colors\" => \"color_schemes#index\", constraints: AdminConstraint.new\n      get \"customize/colors/:id\" => \"color_schemes#index\", constraints: AdminConstraint.new\n      get \"customize/permalinks\" => \"permalinks#index\", constraints: AdminConstraint.new\n      get \"customize/embedding\" => \"embedding#show\", constraints: AdminConstraint.new\n      put \"customize/embedding\" => \"embedding#update\", constraints: AdminConstraint.new\n\n      resources :themes, constraints: AdminConstraint.new\n\n      post \"themes/import\" => \"themes#import\"\n      post \"themes/upload_asset\" => \"themes#upload_asset\"\n      post \"themes/generate_key_pair\" => \"themes#generate_key_pair\"\n      get \"themes/:id/preview\" => \"themes#preview\"\n      put \"themes/:id/setting\" => \"themes#update_single_setting\"\n\n      scope \"/customize\", constraints: AdminConstraint.new do\n        resources :user_fields, constraints: AdminConstraint.new\n        resources :emojis, constraints: AdminConstraint.new\n\n        get 'themes/:id/:target/:field_name/edit' => 'themes#index'\n        get 'themes/:id' => 'themes#index'\n        get \"themes/:id/export\" => \"themes#export\"\n\n        # They have periods in their URLs often:\n        get 'site_texts'             => 'site_texts#index'\n        get 'site_texts/:id.json'    => 'site_texts#show',   constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        get 'site_texts/:id'         => 'site_texts#show',   constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        put 'site_texts/:id.json'    => 'site_texts#update', constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        put 'site_texts/:id'         => 'site_texts#update', constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        delete 'site_texts/:id.json' => 'site_texts#revert', constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        delete 'site_texts/:id'      => 'site_texts#revert', constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n\n        get 'reseed' => 'site_texts#get_reseed_options'\n        post 'reseed' => 'site_texts#reseed'\n\n        get 'email_templates'          => 'email_templates#index'\n        get 'email_templates/(:id)'    => 'email_templates#show',   constraints: { id: /[0-9a-z_.]+/ }\n        put 'email_templates/(:id)'    => 'email_templates#update', constraints: { id: /[0-9a-z_.]+/ }\n        delete 'email_templates/(:id)' => 'email_templates#revert', constraints: { id: /[0-9a-z_.]+/ }\n\n        get 'robots' => 'robots_txt#show'\n        put 'robots.json' => 'robots_txt#update'\n        delete 'robots.json' => 'robots_txt#reset'\n\n        resource :email_style, only: [:show, :update]\n        get 'email_style/:field' => 'email_styles#show', constraints: { field: /html|css/ }\n      end\n\n      resources :embeddable_hosts, constraints: AdminConstraint.new\n      resources :color_schemes, constraints: AdminConstraint.new\n      resources :permalinks, constraints: AdminConstraint.new\n\n      scope \"/customize\" do\n        resources :watched_words, only: [:index, :create, :update, :destroy] do\n          collection do\n            get \"action/:id\" => \"watched_words#index\"\n            get \"action/:id/download\" => \"watched_words#download\"\n            delete \"action/:id\" => \"watched_words#clear_all\"\n          end\n        end\n        post \"watched_words/upload\" => \"watched_words#upload\"\n      end\n\n      get \"version_check\" => \"versions#show\"\n\n      get \"dashboard\" => \"dashboard#index\"\n      get \"dashboard/general\" => \"dashboard#general\"\n      get \"dashboard/moderation\" => \"dashboard#moderation\"\n      get \"dashboard/security\" => \"dashboard#security\"\n      get \"dashboard/reports\" => \"dashboard#reports\"\n      get \"dashboard/new-features\" => \"dashboard#new_features\"\n      put \"dashboard/mark-new-features-as-seen\" => \"dashboard#mark_new_features_as_seen\"\n\n      resources :dashboard, only: [:index] do\n        collection do\n          get \"problems\"\n        end\n      end\n\n      resources :api, only: [:index], constraints: AdminConstraint.new do\n        collection do\n          resources :keys, controller: 'api', only: [:index, :show, :update, :create, :destroy] do\n            collection do\n              get 'scopes' => 'api#scopes'\n            end\n\n            member do\n              post \"revoke\" => \"api#revoke_key\"\n              post \"undo-revoke\" => \"api#undo_revoke_key\"\n            end\n          end\n\n          resources :web_hooks\n          get 'web_hook_events/:id' => 'web_hooks#list_events', as: :web_hook_events\n          get 'web_hooks/:id/events' => 'web_hooks#list_events'\n          get 'web_hooks/:id/events/bulk' => 'web_hooks#bulk_events'\n          post 'web_hooks/:web_hook_id/events/:event_id/redeliver' => 'web_hooks#redeliver_event'\n          post 'web_hooks/:id/ping' => 'web_hooks#ping'\n        end\n      end\n\n      resources :backups, only: [:index, :create], constraints: AdminConstraint.new do\n        member do\n          get \"\" => \"backups#show\", constraints: { id: RouteFormat.backup }\n          put \"\" => \"backups#email\", constraints: { id: RouteFormat.backup }\n          delete \"\" => \"backups#destroy\", constraints: { id: RouteFormat.backup }\n          post \"restore\" => \"backups#restore\", constraints: { id: RouteFormat.backup }\n        end\n        collection do\n          # multipart uploads\n          post \"create-multipart\" => \"backups#create_multipart\", format: :json\n          post \"complete-multipart\" => \"backups#complete_multipart\", format: :json\n          post \"abort-multipart\" => \"backups#abort_multipart\", format: :json\n          post \"batch-presign-multipart-parts\" => \"backups#batch_presign_multipart_parts\", format: :json\n\n          get \"logs\" => \"backups#logs\"\n          get \"status\" => \"backups#status\"\n          delete \"cancel\" => \"backups#cancel\"\n          post \"rollback\" => \"backups#rollback\"\n          put \"readonly\" => \"backups#readonly\"\n          get \"upload\" => \"backups#check_backup_chunk\"\n          post \"upload\" => \"backups#upload_backup_chunk\"\n          get \"upload_url\" => \"backups#create_upload_url\"\n        end\n      end\n\n      resources :badges, constraints: AdminConstraint.new do\n        collection do\n          get \"/award/:badge_id\" => \"badges#award\"\n          post \"/award/:badge_id\" => \"badges#mass_award\"\n          get \"types\" => \"badges#badge_types\"\n          post \"badge_groupings\" => \"badges#save_badge_groupings\"\n          post \"preview\" => \"badges#preview\"\n        end\n      end\n\n    end # admin namespace\n\n    get \"email/unsubscribe/:key\" => \"email#unsubscribe\", as: \"email_unsubscribe\"\n    get \"email/unsubscribed\" => \"email#unsubscribed\", as: \"email_unsubscribed\"\n    post \"email/unsubscribe/:key\" => \"email#perform_unsubscribe\", as: \"email_perform_unsubscribe\"\n\n    get \"extra-locales/:bundle\" => \"extra_locales#show\"\n\n    resources :session, id: RouteFormat.username, only: [:create, :destroy, :become] do\n      if !Rails.env.production?\n        get 'become'\n      end\n\n      collection do\n        post \"forgot_password\"\n      end\n    end\n\n    get \"review\" => \"reviewables#index\" # For ember app\n    get \"review/:reviewable_id\" => \"reviewables#show\", constraints: { reviewable_id: /\\d+/ }\n    get \"review/:reviewable_id/explain\" => \"reviewables#explain\", constraints: { reviewable_id: /\\d+/ }\n    get \"review/count\" => \"reviewables#count\"\n    get \"review/topics\" => \"reviewables#topics\"\n    get \"review/settings\" => \"reviewables#settings\"\n    get \"review/user-menu-list\" => \"reviewables#user_menu_list\", format: :json\n    put \"review/settings\" => \"reviewables#settings\"\n    put \"review/:reviewable_id/perform/:action_id\" => \"reviewables#perform\", constraints: {\n      reviewable_id: /\\d+/,\n      action_id: /[a-z\\_]+/\n    }\n    put \"review/:reviewable_id\" => \"reviewables#update\", constraints: { reviewable_id: /\\d+/ }\n    delete \"review/:reviewable_id\" => \"reviewables#destroy\", constraints: { reviewable_id: /\\d+/ }\n\n    resources :reviewable_claimed_topics\n\n    get \"session/sso\" => \"session#sso\"\n    get \"session/sso_login\" => \"session#sso_login\"\n    get \"session/sso_provider\" => \"session#sso_provider\"\n    get \"session/current\" => \"session#current\"\n    get \"session/csrf\" => \"session#csrf\"\n    get \"session/hp\" => \"session#get_honeypot_value\"\n    get \"session/email-login/:token\" => \"session#email_login_info\"\n    post \"session/email-login/:token\" => \"session#email_login\"\n    get \"session/otp/:token\" => \"session#one_time_password\", constraints: { token: /[0-9a-f]+/ }\n    post \"session/otp/:token\" => \"session#one_time_password\", constraints: { token: /[0-9a-f]+/ }\n    get \"session/2fa\" => \"session#second_factor_auth_show\"\n    post \"session/2fa\" => \"session#second_factor_auth_perform\"\n    if Rails.env.test?\n      post \"session/2fa/test-action\" => \"session#test_second_factor_restricted_route\"\n    end\n    get \"session/scopes\" => \"session#scopes\"\n    get \"composer_messages\" => \"composer_messages#index\"\n    get \"composer_messages/user_not_seen_in_a_while\" => \"composer_messages#user_not_seen_in_a_while\"\n\n    resources :static\n    post \"login\" => \"static#enter\"\n    get \"login\" => \"static#show\", id: \"login\"\n    get \"password-reset\" => \"static#show\", id: \"password_reset\"\n    get \"faq\" => \"static#show\", id: \"faq\"\n    get \"tos\" => \"static#show\", id: \"tos\", as: 'tos'\n    get \"privacy\" => \"static#show\", id: \"privacy\", as: 'privacy'\n    get \"signup\" => \"static#show\", id: \"signup\"\n    get \"login-preferences\" => \"static#show\", id: \"login\"\n\n    %w{guidelines rules conduct}.each do |faq_alias|\n      get faq_alias => \"static#show\", id: \"guidelines\", as: faq_alias\n    end\n\n    get \"my/*path\", to: 'users#my_redirect'\n    get \".well-known/change-password\", to: redirect(relative_url_root + 'my/preferences/security', status: 302)\n\n    get \"user-cards\" => \"users#cards\", format: :json\n    get \"directory-columns\" => \"directory_columns#index\", format: :json\n    get \"edit-directory-columns\" => \"edit_directory_columns#index\", format: :json\n    put \"edit-directory-columns\" => \"edit_directory_columns#update\", format: :json\n\n    %w{users u}.each_with_index do |root_path, index|\n      get \"#{root_path}\" => \"users#index\", constraints: { format: 'html' }\n\n      resources :users, except: [:index, :new, :show, :update, :destroy], path: root_path do\n        collection do\n          get \"check_username\"\n          get \"check_email\"\n          get \"is_local_username\"\n        end\n      end\n\n      post \"#{root_path}/second_factors\" => \"users#list_second_factors\"\n      put \"#{root_path}/second_factor\" => \"users#update_second_factor\"\n\n      post \"#{root_path}/create_second_factor_security_key\" => \"users#create_second_factor_security_key\"\n      post \"#{root_path}/register_second_factor_security_key\" => \"users#register_second_factor_security_key\"\n      put \"#{root_path}/security_key\" => \"users#update_security_key\"\n      post \"#{root_path}/create_second_factor_totp\" => \"users#create_second_factor_totp\"\n      post \"#{root_path}/enable_second_factor_totp\" => \"users#enable_second_factor_totp\"\n      put \"#{root_path}/disable_second_factor\" => \"users#disable_second_factor\"\n\n      put \"#{root_path}/second_factors_backup\" => \"users#create_second_factor_backup\"\n\n      put \"#{root_path}/update-activation-email\" => \"users#update_activation_email\"\n      post \"#{root_path}/email-login\" => \"users#email_login\"\n      get \"#{root_path}/admin-login\" => \"users#admin_login\"\n      put \"#{root_path}/admin-login\" => \"users#admin_login\"\n      post \"#{root_path}/toggle-anon\" => \"users#toggle_anon\"\n      post \"#{root_path}/read-faq\" => \"users#read_faq\"\n      get \"#{root_path}/recent-searches\" => \"users#recent_searches\", constraints: { format: 'json' }\n      delete \"#{root_path}/recent-searches\" => \"users#reset_recent_searches\", constraints: { format: 'json' }\n      get \"#{root_path}/search/users\" => \"users#search_users\"\n\n      get({ \"#{root_path}/account-created/\" => \"users#account_created\" }.merge(index == 1 ? { as: :users_account_created } : { as: :old_account_created }))\n\n      get \"#{root_path}/account-created/resent\" => \"users#account_created\"\n      get \"#{root_path}/account-created/edit-email\" => \"users#account_created\"\n      get({ \"#{root_path}/password-reset/:token\" => \"users#password_reset_show\" }.merge(index == 1 ? { as: :password_reset_token } : {}))\n      get \"#{root_path}/confirm-email-token/:token\" => \"users#confirm_email_token\", constraints: { format: 'json' }\n      put \"#{root_path}/password-reset/:token\" => \"users#password_reset_update\"\n      get \"#{root_path}/activate-account/:token\" => \"users#activate_account\"\n      put({ \"#{root_path}/activate-account/:token\" => \"users#perform_account_activation\" }.merge(index == 1 ? { as: 'perform_activate_account' } : {}))\n\n      get \"#{root_path}/confirm-old-email/:token\" => \"users_email#show_confirm_old_email\"\n      put \"#{root_path}/confirm-old-email\" => \"users_email#confirm_old_email\"\n\n      get \"#{root_path}/confirm-new-email/:token\" => \"users_email#show_confirm_new_email\"\n      put \"#{root_path}/confirm-new-email\" => \"users_email#confirm_new_email\"\n\n      get({\n        \"#{root_path}/confirm-admin/:token\" => \"users#confirm_admin\",\n        constraints: { token: /[0-9a-f]+/ }\n      }.merge(index == 1 ? { as: 'confirm_admin' } : {}))\n      post \"#{root_path}/confirm-admin/:token\" => \"users#confirm_admin\", constraints: { token: /[0-9a-f]+/ }\n      get \"#{root_path}/:username/private-messages\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/private-messages/:filter\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/messages\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/messages/:filter\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/messages/group/:group_name\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username, group_name: RouteFormat.username }\n      get \"#{root_path}/:username/messages/group/:group_name/:filter\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username, group_name: RouteFormat.username }\n      get \"#{root_path}/:username/messages/tags/:tag_id\" => \"user_actions#private_messages\", constraints: StaffConstraint.new\n      get \"#{root_path}/:username.json\" => \"users#show\", constraints: { username: RouteFormat.username }, defaults: { format: :json }\n      get({ \"#{root_path}/:username\" => \"users#show\", constraints: { username: RouteFormat.username } }.merge(index == 1 ? { as: 'user' } : {}))\n      put \"#{root_path}/:username\" => \"users#update\", constraints: { username: RouteFormat.username }, defaults: { format: :json }\n      get \"#{root_path}/:username/emails\" => \"users#check_emails\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/sso-email\" => \"users#check_sso_email\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/sso-payload\" => \"users#check_sso_payload\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/email\" => \"users_email#index\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/account\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/security\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/profile\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/emails\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/primary-email\" => \"users#update_primary_email\", format: :json, constraints: { username: RouteFormat.username }\n      delete \"#{root_path}/:username/preferences/email\" => \"users#destroy_email\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/notifications\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/categories\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/users\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/tags\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/interface\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/sidebar\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/apps\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      post \"#{root_path}/:username/preferences/email\" => \"users_email#create\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/email\" => \"users_email#update\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/badge_title\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/badge_title\" => \"users#badge_title\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/username\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/username\" => \"users#username\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/second-factor\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/second-factor-backup\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      delete \"#{root_path}/:username/preferences/user_image\" => \"users#destroy_user_image\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/avatar/pick\" => \"users#pick_avatar\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/avatar/select\" => \"users#select_avatar\", constraints: { username: RouteFormat.username }\n      post \"#{root_path}/:username/preferences/revoke-account\" => \"users#revoke_account\", constraints: { username: RouteFormat.username }\n      post \"#{root_path}/:username/preferences/revoke-auth-token\" => \"users#revoke_auth_token\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/staff-info\" => \"users#staff_info\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/summary\" => \"users#summary\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/notification_level\" => \"users#notification_level\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/invited\" => \"users#invited\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/invited/:filter\" => \"users#invited\", constraints: { username: RouteFormat.username }\n      post \"#{root_path}/action/send_activation_email\" => \"users#send_activation_email\"\n      get \"#{root_path}/:username/summary\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity/topics.rss\" => \"list#user_topics_feed\", format: :rss, constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity.rss\" => \"posts#user_posts_feed\", format: :rss, constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity.json\" => \"posts#user_posts_feed\", format: :json, constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity/:filter\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/badges\" => \"users#badges\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/bookmarks\" => \"users#bookmarks\", constraints: { username: RouteFormat.username, format: /(json|ics)/ }\n      get \"#{root_path}/:username/user-menu-bookmarks\" => \"users#user_menu_bookmarks\", constraints: { username: RouteFormat.username, format: :json }\n      get \"#{root_path}/:username/user-menu-private-messages\" => \"users#user_menu_messages\", constraints: { username: RouteFormat.username, format: :json }\n      get \"#{root_path}/:username/notifications\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/notifications/:filter\" => \"users#show\", constraints: { username: RouteFormat.username }\n      delete \"#{root_path}/:username\" => \"users#destroy\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/by-external/:external_id\" => \"users#show\", constraints: { external_id: /[^\\/]+/ }\n      get \"#{root_path}/by-external/:external_provider/:external_id\" => \"users#show\", constraints: { external_id: /[^\\/]+/ }\n      get \"#{root_path}/:username/flagged-posts\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/deleted-posts\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/topic-tracking-state\" => \"users#topic_tracking_state\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/private-message-topic-tracking-state\" => \"users#private_message_topic_tracking_state\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/profile-hidden\" => \"users#profile_hidden\"\n      put \"#{root_path}/:username/feature-topic\" => \"users#feature_topic\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/clear-featured-topic\" => \"users#clear_featured_topic\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/card.json\" => \"users#show_card\", format: :json, constraints: { username: RouteFormat.username }\n    end\n\n    get \"user-badges/:username.json\" => \"user_badges#username\", constraints: { username: RouteFormat.username }, defaults: { format: :json }\n    get \"user-badges/:username\" => \"user_badges#username\", constraints: { username: RouteFormat.username }\n\n    post \"user_avatar/:username/refresh_gravatar\" => \"user_avatars#refresh_gravatar\", constraints: { username: RouteFormat.username }\n    get \"letter_avatar/:username/:size/:version.png\" => \"user_avatars#show_letter\", constraints: { hostname: /[\\w\\.-]+/, size: /\\d+/, username: RouteFormat.username, format: :png }\n    get \"user_avatar/:hostname/:username/:size/:version.png\" => \"user_avatars#show\", constraints: { hostname: /[\\w\\.-]+/, size: /\\d+/, username: RouteFormat.username, format: :png }\n\n    get \"letter_avatar_proxy/:version/letter/:letter/:color/:size.png\" => \"user_avatars#show_proxy_letter\", constraints: { format: :png }\n\n    get \"svg-sprite/:hostname/svg-:theme_id-:version.js\" => \"svg_sprite#show\", constraints: { hostname: /[\\w\\.-]+/, version: /\\h{40}/, theme_id: /([0-9]+)?/, format: :js }\n    get \"svg-sprite/search/:keyword\" => \"svg_sprite#search\", format: false, constraints: { keyword: /[-a-z0-9\\s\\%]+/ }\n    get \"svg-sprite/picker-search\" => \"svg_sprite#icon_picker_search\", defaults: { format: :json }\n    get \"svg-sprite/:hostname/icon(/:color)/:name.svg\" => \"svg_sprite#svg_icon\", constraints: { hostname: /[\\w\\.-]+/, name: /[-a-z0-9\\s\\%]+/, color: /(\\h{3}{1,2})/, format: :svg }\n\n    get \"highlight-js/:hostname/:version.js\" => \"highlight_js#show\", constraints: { hostname: /[\\w\\.-]+/, format: :js }\n\n    get \"stylesheets/:name.css.map\" => \"stylesheets#show_source_map\", constraints: { name: /[-a-z0-9_]+/ }\n    get \"stylesheets/:name.css\" => \"stylesheets#show\", constraints: { name: /[-a-z0-9_]+/ }\n    get \"color-scheme-stylesheet/:id(/:theme_id)\" => \"stylesheets#color_scheme\", constraints: { format: :json }\n    get \"theme-javascripts/:digest.js\" => \"theme_javascripts#show\", constraints: { digest: /\\h{40}/ }\n    get \"theme-javascripts/tests/:theme_id-:digest.js\" => \"theme_javascripts#show_tests\"\n\n    post \"uploads/lookup-metadata\" => \"uploads#metadata\"\n    post \"uploads\" => \"uploads#create\"\n    post \"uploads/lookup-urls\" => \"uploads#lookup_urls\"\n\n    # direct to s3 uploads\n    post \"uploads/generate-presigned-put\" => \"uploads#generate_presigned_put\", format: :json\n    post \"uploads/complete-external-upload\" => \"uploads#complete_external_upload\", format: :json\n\n    # multipart uploads\n    post \"uploads/create-multipart\" => \"uploads#create_multipart\", format: :json\n    post \"uploads/complete-multipart\" => \"uploads#complete_multipart\", format: :json\n    post \"uploads/abort-multipart\" => \"uploads#abort_multipart\", format: :json\n    post \"uploads/batch-presign-multipart-parts\" => \"uploads#batch_presign_multipart_parts\", format: :json\n\n    # used to download original images\n    get \"uploads/:site/:sha(.:extension)\" => \"uploads#show\", constraints: { site: /\\w+/, sha: /\\h{40}/, extension: /[a-z0-9\\._]+/i }\n    get \"uploads/short-url/:base62(.:extension)\" => \"uploads#show_short\", constraints: { site: /\\w+/, base62: /[a-zA-Z0-9]+/, extension: /[a-zA-Z0-9\\._-]+/i }, as: :upload_short\n    # used to download attachments\n    get \"uploads/:site/original/:tree:sha(.:extension)\" => \"uploads#show\", constraints: { site: /\\w+/, tree: /([a-z0-9]+\\/)+/i, sha: /\\h{40}/, extension: /[a-z0-9\\._]+/i }\n    if Rails.env.test?\n      get \"uploads/:site/test_:index/original/:tree:sha(.:extension)\" => \"uploads#show\", constraints: { site: /\\w+/, index: /\\d+/, tree: /([a-z0-9]+\\/)+/i, sha: /\\h{40}/, extension: /[a-z0-9\\._]+/i }\n    end\n    # used to download attachments (old route)\n    get \"uploads/:site/:id/:sha\" => \"uploads#show\", constraints: { site: /\\w+/, id: /\\d+/, sha: /\\h{16}/, format: /.*/ }\n\n    # NOTE: secure-media-uploads is the old form, all new URLs generated for\n    # secure uploads will be secure-uploads, this is left in for backwards\n    # compat without needing to rebake all posts for each site.\n    get \"secure-media-uploads/*path(.:extension)\" => \"uploads#_show_secure_deprecated\", constraints: { extension: /[a-z0-9\\._]+/i }\n    get \"secure-uploads/*path(.:extension)\" => \"uploads#show_secure\", constraints: { extension: /[a-z0-9\\._]+/i }\n\n    get \"posts\" => \"posts#latest\", id: \"latest_posts\", constraints: { format: /(json|rss)/ }\n    get \"private-posts\" => \"posts#latest\", id: \"private_posts\", constraints: { format: /(json|rss)/ }\n    get \"posts/by_number/:topic_id/:post_number\" => \"posts#by_number\"\n    get \"posts/by-date/:topic_id/:date\" => \"posts#by_date\"\n    get \"posts/:id/reply-history\" => \"posts#reply_history\"\n    get \"posts/:id/reply-ids\"     => \"posts#reply_ids\"\n    get \"posts/:id/reply-ids/all\" => \"posts#all_reply_ids\"\n    get \"posts/:username/deleted\" => \"posts#deleted_posts\", constraints: { username: RouteFormat.username }\n    get \"posts/:username/flagged\" => \"posts#flagged_posts\", constraints: { username: RouteFormat.username }\n    get \"posts/:username/pending\" => \"posts#pending\", constraints: { username: RouteFormat.username }\n\n    %w{groups g}.each do |root_path|\n      resources :groups, id: RouteFormat.username, path: root_path do\n        get \"posts.rss\" => \"groups#posts_feed\", format: :rss\n        get \"mentions.rss\" => \"groups#mentions_feed\", format: :rss\n\n        get 'members'\n        get 'posts'\n        get 'mentions'\n        get 'counts'\n        get 'mentionable'\n        get 'messageable'\n        get 'logs' => 'groups#histories'\n        post 'test_email_settings'\n\n        collection do\n          get \"check-name\" => 'groups#check_name'\n          get 'custom/new' => 'groups#new', constraints: StaffConstraint.new\n          get \"search\" => \"groups#search\"\n        end\n\n        member do\n          %w{\n            activity\n            activity/:filter\n            requests\n            messages\n            messages/inbox\n            messages/archive\n            manage\n            manage/profile\n            manage/members\n            manage/membership\n            manage/interaction\n            manage/email\n            manage/categories\n            manage/tags\n            manage/logs\n          }.each do |path|\n            get path => 'groups#show'\n          end\n\n          get \"permissions\" => \"groups#permissions\"\n          put \"members\" => \"groups#add_members\"\n          put \"join\" => \"groups#join\"\n          delete \"members\" => \"groups#remove_member\"\n          delete \"leave\" => \"groups#leave\"\n          post \"request_membership\" => \"groups#request_membership\"\n          put \"handle_membership_request\" => \"groups#handle_membership_request\"\n          post \"notifications\" => \"groups#set_notifications\"\n        end\n      end\n    end\n\n    resources :associated_groups, only: %i[index], constraints: AdminConstraint.new\n\n    # aliases so old API code works\n    delete \"admin/groups/:id/members\" => \"groups#remove_member\", constraints: AdminConstraint.new\n    put \"admin/groups/:id/members\" => \"groups#add_members\", constraints: AdminConstraint.new\n\n    resources :posts do\n      delete \"bookmark\", to: \"posts#destroy_bookmark\"\n      put \"wiki\"\n      put \"post_type\"\n      put \"rebake\"\n      put \"unhide\"\n      put \"locked\"\n      put \"notice\"\n      get \"replies\"\n      get \"revisions/latest\" => \"posts#latest_revision\"\n      get \"revisions/:revision\" => \"posts#revisions\", constraints: { revision: /\\d+/ }\n      put \"revisions/:revision/hide\" => \"posts#hide_revision\", constraints: { revision: /\\d+/ }\n      put \"revisions/:revision/show\" => \"posts#show_revision\", constraints: { revision: /\\d+/ }\n      put \"revisions/:revision/revert\" => \"posts#revert\", constraints: { revision: /\\d+/ }\n      put \"recover\"\n      collection do\n        delete \"destroy_many\"\n        put \"merge_posts\"\n      end\n    end\n\n    resources :bookmarks, only: %i[create destroy update] do\n      put \"toggle_pin\"\n    end\n\n    resources :notifications, except: :show do\n      collection do\n        put 'mark-read' => 'notifications#mark_read'\n        # creating an alias cause the api was extended to mark a single notification\n        # this allows us to cleanly target it\n        put 'read' => 'notifications#mark_read'\n      end\n    end\n\n    match \"/auth/failure\", to: \"users/omniauth_callbacks#failure\", via: [:get, :post]\n    get \"/auth/:provider\", to: \"users/omniauth_callbacks#confirm_request\"\n    match \"/auth/:provider/callback\", to: \"users/omniauth_callbacks#complete\", via: [:get, :post]\n    get \"/associate/:token\", to: \"users/associate_accounts#connect_info\", constraints: { token: /\\h{32}/ }\n    post \"/associate/:token\", to: \"users/associate_accounts#connect\", constraints: { token: /\\h{32}/ }\n\n    resources :clicks do\n      collection do\n        post \"track\"\n      end\n    end\n\n    get \"excerpt\" => \"excerpt#show\"\n\n    resources :post_action_users\n    resources :post_readers, only: %i[index]\n    resources :post_actions do\n      collection do\n        get \"users\"\n        post \"defer_flags\"\n      end\n    end\n    resources :user_actions\n\n    resources :badges, only: [:index]\n    get \"/badges/:id(/:slug)\" => \"badges#show\", constraints: { format: /(json|html|rss)/ }\n    resources :user_badges, only: [:index, :create, :destroy] do\n      put \"toggle_favorite\" => \"user_badges#toggle_favorite\", constraints: { format: :json }\n    end\n\n    get '/c', to: redirect(relative_url_root + 'categories')\n\n    resources :categories, except: [:show, :new, :edit]\n    post \"categories/reorder\" => \"categories#reorder\"\n\n    scope path: 'category/:category_id' do\n      post \"/move\" => \"categories#move\"\n      post \"/notifications\" => \"categories#set_notifications\"\n      put \"/slug\" => \"categories#update_slug\"\n    end\n\n    get \"category/*path\" => \"categories#redirect\"\n\n    get \"categories_and_latest\" => \"categories#categories_and_latest\"\n    get \"categories_and_top\" => \"categories#categories_and_top\"\n\n    get \"c/:id/show\" => \"categories#show\"\n    get \"c/:id/visible_groups\" => \"categories#visible_groups\"\n\n    get \"c/*category_slug/find_by_slug\" => \"categories#find_by_slug\"\n    get \"c/*category_slug/edit(/:tab)\" => \"categories#find_by_slug\", constraints: { format: 'html' }\n    get \"/new-category\" => \"categories#show\", constraints: { format: 'html' }\n\n    get \"c/*category_slug_path_with_id.rss\" => \"list#category_feed\", format: :rss\n    scope path: 'c/*category_slug_path_with_id' do\n      get \"/none\" => \"list#category_none_latest\"\n\n      TopTopic.periods.each do |period|\n        get \"/none/l/top/#{period}\", to: redirect(\"/none/l/top?period=#{period}\", status: 301)\n        get \"/l/top/#{period}\", to: redirect(\"/l/top?period=#{period}\", status: 301)\n      end\n\n      Discourse.filters.each do |filter|\n        get \"/none/l/#{filter}\" => \"list#category_none_#{filter}\", as: \"category_none_#{filter}\"\n        get \"/l/#{filter}\" => \"list#category_#{filter}\", as: \"category_#{filter}\"\n      end\n\n      get \"/all\" => \"list#category_default\", as: \"category_all\", constraints: { format: 'html' }\n      get \"/\" => \"list#category_default\", as: \"category_default\"\n    end\n\n    get \"hashtags\" => \"hashtags#show\"\n\n    TopTopic.periods.each do |period|\n      get \"top/#{period}.rss\", to: redirect(\"top.rss?period=#{period}\", status: 301)\n      get \"top/#{period}.json\", to: redirect(\"top.json?period=#{period}\", status: 301)\n      get \"top/#{period}\", to: redirect(\"top?period=#{period}\", status: 301)\n    end\n\n    Discourse.anonymous_filters.each do |filter|\n      get \"#{filter}.rss\" => \"list##{filter}_feed\", format: :rss\n    end\n\n    Discourse.filters.each do |filter|\n      get \"#{filter}\" => \"list##{filter}\"\n    end\n\n    get \"search/query\" => \"search#query\"\n    get \"search\" => \"search#show\"\n    post \"search/click\" => \"search#click\"\n\n    # Topics resource\n    get \"t/:id\" => \"topics#show\"\n    put \"t/:topic_id\" => \"topics#update\", constraints: { topic_id: /\\d+/ }\n    delete \"t/:id\" => \"topics#destroy\"\n    put \"t/:id/archive-message\" => \"topics#archive_message\"\n    put \"t/:id/move-to-inbox\" => \"topics#move_to_inbox\"\n    put \"t/:id/convert-topic/:type\" => \"topics#convert_topic\"\n    put \"t/:id/publish\" => \"topics#publish\"\n    put \"t/:id/shared-draft\" => \"topics#update_shared_draft\"\n    put \"t/:id/reset-bump-date\" => \"topics#reset_bump_date\"\n    put \"topics/bulk\"\n    put \"topics/reset-new\" => 'topics#reset_new'\n    put \"topics/pm-reset-new\" => 'topics#private_message_reset_new'\n    post \"topics/timings\"\n\n    get 'topics/similar_to' => 'similar_topics#index'\n    resources :similar_topics\n\n    get \"topics/feature_stats\"\n\n    scope \"/topics\", username: RouteFormat.username do\n      get \"created-by/:username\" => \"list#topics_by\", as: \"topics_by\", defaults: { format: :json }\n      get \"private-messages/:username\" => \"list#private_messages\", as: \"topics_private_messages\", defaults: { format: :json }\n      get \"private-messages-sent/:username\" => \"list#private_messages_sent\", as: \"topics_private_messages_sent\", defaults: { format: :json }\n      get \"private-messages-archive/:username\" => \"list#private_messages_archive\", as: \"topics_private_messages_archive\", defaults: { format: :json }\n      get \"private-messages-unread/:username\" => \"list#private_messages_unread\", as: \"topics_private_messages_unread\", defaults: { format: :json }\n      get \"private-messages-tags/:username/:tag_id.json\" => \"list#private_messages_tag\", as: \"topics_private_messages_tag\", defaults: { format: :json }\n      get \"private-messages-new/:username\" => \"list#private_messages_new\", as: \"topics_private_messages_new\", defaults: { format: :json }\n      get \"private-messages-warnings/:username\" => \"list#private_messages_warnings\", as: \"topics_private_messages_warnings\", defaults: { format: :json }\n      get \"groups/:group_name\" => \"list#group_topics\", as: \"group_topics\", group_name: RouteFormat.username\n\n      scope \"/private-messages-group/:username\", group_name: RouteFormat.username do\n        get \":group_name.json\" => \"list#private_messages_group\", as: \"topics_private_messages_group\"\n        get \":group_name/archive.json\" => \"list#private_messages_group_archive\", as: \"topics_private_messages_group_archive\"\n        get \":group_name/new.json\" => \"list#private_messages_group_new\", as: \"topics_private_messages_group_new\"\n        get \":group_name/unread.json\" => \"list#private_messages_group_unread\", as: \"topics_private_messages_group_unread\"\n      end\n    end\n\n    get 'embed/topics' => 'embed#topics'\n    get 'embed/comments' => 'embed#comments'\n    get 'embed/count' => 'embed#count'\n    get 'embed/info' => 'embed#info'\n\n    get \"new-topic\" => \"list#latest\"\n    get \"new-message\" => \"list#latest\"\n\n    # Topic routes\n    get \"t/id_for/:slug\" => \"topics#id_for_slug\"\n    get \"t/external_id/:external_id\" => \"topics#show_by_external_id\", format: :json, constraints: { external_id: /[\\w-]+/ }\n    get \"t/:slug/:topic_id/print\" => \"topics#show\", format: :html, print: 'true', constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id/wordpress\" => \"topics#wordpress\", constraints: { topic_id: /\\d+/ }\n    get \"t/:topic_id/wordpress\" => \"topics#wordpress\", constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id/moderator-liked\" => \"topics#moderator_liked\", constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id/summary\" => \"topics#show\", defaults: { summary: true }, constraints: { topic_id: /\\d+/ }\n    get \"t/:topic_id/summary\" => \"topics#show\", constraints: { topic_id: /\\d+/ }\n    put \"t/:slug/:topic_id\" => \"topics#update\", constraints: { topic_id: /\\d+/ }\n    put \"t/:slug/:topic_id/star\" => \"topics#star\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/star\" => \"topics#star\", constraints: { topic_id: /\\d+/ }\n    put \"t/:slug/:topic_id/status\" => \"topics#status\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/status\" => \"topics#status\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/clear-pin\" => \"topics#clear_pin\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/re-pin\" => \"topics#re_pin\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/mute\" => \"topics#mute\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/unmute\" => \"topics#unmute\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/timer\" => \"topics#timer\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/make-banner\" => \"topics#make_banner\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/remove-banner\" => \"topics#remove_banner\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/remove-allowed-user\" => \"topics#remove_allowed_user\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/remove-allowed-group\" => \"topics#remove_allowed_group\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/recover\" => \"topics#recover\", constraints: { topic_id: /\\d+/ }\n    get \"t/:topic_id/:post_number\" => \"topics#show\", constraints: { topic_id: /\\d+/, post_number: /\\d+/ }\n    get \"t/:topic_id/last\" => \"topics#show\", post_number: 99999999, constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id.rss\" => \"topics#feed\", format: :rss, constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id\" => \"topics#show\", constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id/:post_number\" => \"topics#show\", constraints: { topic_id: /\\d+/, post_number: /\\d+/ }\n    get \"t/:slug/:topic_id/last\" => \"topics#show\", post_number: 99999999, constraints: { topic_id: /\\d+/ }\n    get \"t/:topic_id/posts\" => \"topics#posts\", constraints: { topic_id: /\\d+/ }, format: :json\n    get \"t/:topic_id/post_ids\" => \"topics#post_ids\", constraints: { topic_id: /\\d+/ }, format: :json\n    get \"t/:topic_id/excerpts\" => \"topics#excerpts\", constraints: { topic_id: /\\d+/ }, format: :json\n    post \"t/:topic_id/timings\" => \"topics#timings\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/invite\" => \"topics#invite\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/invite-group\" => \"topics#invite_group\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/move-posts\" => \"topics#move_posts\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/merge-topic\" => \"topics#merge_topic\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/change-owner\" => \"topics#change_post_owners\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/change-timestamp\" => \"topics#change_timestamps\", constraints: { topic_id: /\\d+/ }\n    delete \"t/:topic_id/timings\" => \"topics#destroy_timings\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/bookmark\" => \"topics#bookmark\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/remove_bookmarks\" => \"topics#remove_bookmarks\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/tags\" => \"topics#update_tags\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/slow_mode\" => \"topics#set_slow_mode\", constraints: { topic_id: /\\d+/ }\n\n    post \"t/:topic_id/notifications\" => \"topics#set_notifications\" , constraints: { topic_id: /\\d+/ }\n\n    get \"p/:post_id(/:user_id)\" => \"posts#short_link\"\n    get \"/posts/:id/cooked\" => \"posts#cooked\"\n    get \"/posts/:id/expand-embed\" => \"posts#expand_embed\"\n    get \"/posts/:id/raw\" => \"posts#markdown_id\"\n    get \"/posts/:id/raw-email\" => \"posts#raw_email\"\n    get \"raw/:topic_id(/:post_number)\" => \"posts#markdown_num\"\n\n    resources :invites, except: [:show]\n    get \"/invites/:id\" => \"invites#show\", constraints: { format: :html }\n    put \"/invites/:id\" => \"invites#update\"\n\n    post \"invites/upload_csv\" => \"invites#upload_csv\"\n    post \"invites/destroy-all-expired\" => \"invites#destroy_all_expired\"\n    post \"invites/reinvite\" => \"invites#resend_invite\"\n    post \"invites/reinvite-all\" => \"invites#resend_all_invites\"\n    delete \"invites\" => \"invites#destroy\"\n    put \"invites/show/:id\" => \"invites#perform_accept_invitation\", as: 'perform_accept_invite'\n    get \"invites/retrieve\" => \"invites#retrieve\"\n\n    resources :export_csv do\n      collection do\n        post \"export_entity\" => \"export_csv#export_entity\"\n      end\n    end\n\n    get \"onebox\" => \"onebox#show\"\n    get \"inline-onebox\" => \"inline_onebox#show\"\n\n    get \"exception\" => \"list#latest\"\n\n    get \"message-bus/poll\" => \"message_bus#poll\"\n\n    resources :drafts, only: [:index, :create, :show, :destroy]\n\n    get \"/service-worker.js\" => \"static#service_worker_asset\", format: :js\n    if service_worker_asset = Rails.application.assets_manifest.assets['service-worker.js']\n      # https://developers.google.com/web/fundamentals/codelabs/debugging-service-workers/\n      # Normally the browser will wait until a user closes all tabs that contain the\n      # current site before updating to a new Service Worker.\n      # Support the old Service Worker path to avoid routing error filling up the\n      # logs.\n      get service_worker_asset => \"static#service_worker_asset\", format: :js\n    end\n\n    get \"cdn_asset/:site/*path\" => \"static#cdn_asset\", format: false, constraints: { format: /.*/ }\n    get \"brotli_asset/*path\" => \"static#brotli_asset\", format: false, constraints: { format: /.*/ }\n\n    get \"favicon/proxied\" => \"static#favicon\", format: false\n\n    get \"robots.txt\" => \"robots_txt#index\"\n    get \"robots-builder.json\" => \"robots_txt#builder\"\n    get \"offline.html\" => \"offline#index\"\n    get \"manifest.webmanifest\" => \"metadata#manifest\", as: :manifest\n    get \"manifest.json\" => \"metadata#manifest\"\n    get \".well-known/assetlinks.json\" => \"metadata#app_association_android\"\n    get \"apple-app-site-association\" => \"metadata#app_association_ios\", format: false\n    get \"opensearch\" => \"metadata#opensearch\", constraints: { format: :xml }\n\n    scope '/tag/:tag_id' do\n      constraints format: :json do\n        get '/' => 'tags#show', as: 'tag_show'\n        get '/info' => 'tags#info'\n        get '/notifications' => 'tags#notifications'\n        put '/notifications' => 'tags#update_notifications'\n        put '/' => 'tags#update'\n        delete '/' => 'tags#destroy'\n        post '/synonyms' => 'tags#create_synonyms'\n        delete '/synonyms/:synonym_id' => 'tags#destroy_synonym'\n\n        Discourse.filters.each do |filter|\n          get \"/l/#{filter}\" => \"tags#show_#{filter}\", as: \"tag_show_#{filter}\"\n        end\n      end\n\n      constraints format: :rss do\n        get '/' => 'tags#tag_feed'\n      end\n    end\n\n    scope \"/tags\" do\n      get '/' => 'tags#index'\n      get '/filter/list' => 'tags#index'\n      get '/filter/search' => 'tags#search'\n      get '/personal_messages/:username' => 'tags#personal_messages', constraints: { username: RouteFormat.username }\n      post '/upload' => 'tags#upload'\n      get '/unused' => 'tags#list_unused'\n      delete '/unused' => 'tags#destroy_unused'\n\n      constraints(tag_id: /[^\\/]+?/, format: /json|rss/) do\n        scope path: '/c/*category_slug_path_with_id' do\n          Discourse.filters.each do |filter|\n            get \"/none/:tag_id/l/#{filter}\" => \"tags#show_#{filter}\", as: \"tag_category_none_show_#{filter}\", defaults: { no_subcategories: true }\n            get \"/all/:tag_id/l/#{filter}\" => \"tags#show_#{filter}\", as: \"tag_category_all_show_#{filter}\", defaults: { no_subcategories: false }\n          end\n\n          get '/none/:tag_id' => 'tags#show', as: 'tag_category_none_show', defaults: { no_subcategories: true }\n          get '/all/:tag_id' => 'tags#show', as: 'tag_category_all_show', defaults: { no_subcategories: false }\n\n          Discourse.filters.each do |filter|\n            get \"/:tag_id/l/#{filter}\" => \"tags#show_#{filter}\", as: \"tag_category_show_#{filter}\"\n          end\n\n          get '/:tag_id' => 'tags#show', as: 'tag_category_show'\n        end\n\n        get '/intersection/:tag_id/*additional_tag_ids' => 'tags#show', as: 'tag_intersection'\n      end\n\n      get '*tag_id', to: redirect(relative_url_root + 'tag/%{tag_id}')\n    end\n\n    resources :tag_groups, constraints: StaffConstraint.new, except: [:edit]\n    get '/tag_groups/filter/search' => 'tag_groups#search', format: :json\n\n    Discourse.filters.each do |filter|\n      root to: \"list##{filter}\", constraints: HomePageConstraint.new(\"#{filter}\"), as: \"list_#{filter}\"\n    end\n    # special case for categories\n    root to: \"categories#index\", constraints: HomePageConstraint.new(\"categories\"), as: \"categories_index\"\n\n    root to: 'finish_installation#index', constraints: HomePageConstraint.new(\"finish_installation\"), as: 'installation_redirect'\n\n    get \"/user-api-key/new\" => \"user_api_keys#new\"\n    post \"/user-api-key\" => \"user_api_keys#create\"\n    post \"/user-api-key/revoke\" => \"user_api_keys#revoke\"\n    post \"/user-api-key/undo-revoke\" => \"user_api_keys#undo_revoke\"\n    get \"/user-api-key/otp\" => \"user_api_keys#otp\"\n    post \"/user-api-key/otp\" => \"user_api_keys#create_otp\"\n\n    get \"/safe-mode\" => \"safe_mode#index\"\n    post \"/safe-mode\" => \"safe_mode#enter\", as: \"safe_mode_enter\"\n\n    get \"/theme-qunit\" => \"qunit#theme\"\n\n    post \"/push_notifications/subscribe\" => \"push_notification#subscribe\"\n    post \"/push_notifications/unsubscribe\" => \"push_notification#unsubscribe\"\n\n    resources :csp_reports, only: [:create]\n\n    get \"/permalink-check\", to: 'permalinks#check'\n\n    post \"/do-not-disturb\" => \"do_not_disturb#create\"\n    delete \"/do-not-disturb\" => \"do_not_disturb#destroy\"\n\n    post \"/presence/update\" => \"presence#update\"\n    get \"/presence/get\" => \"presence#get\"\n\n    put \"user-status\" => \"user_status#set\"\n    delete \"user-status\" => \"user_status#clear\"\n\n    get \"*url\", to: 'permalinks#show', constraints: PermalinkConstraint.new\n  end\nend\n", "# frozen_string_literal: true\n\nRSpec.describe Admin::ThemesController do\n  fab!(:admin) { Fabricate(:admin) }\n\n  it \"is a subclass of AdminController\" do\n    expect(Admin::UsersController < Admin::AdminController).to eq(true)\n  end\n\n  before do\n    sign_in(admin)\n  end\n\n  describe '#generate_key_pair' do\n    it 'can generate key pairs' do\n      post \"/admin/themes/generate_key_pair.json\"\n      expect(response.status).to eq(200)\n      json = response.parsed_body\n      expect(json[\"private_key\"]).to eq(nil)\n      expect(json[\"public_key\"]).to include(\"ssh-rsa \")\n      expect(Discourse.redis.get(\"ssh_key_#{json[\"public_key\"]}\")).not_to eq(nil)\n    end\n  end\n\n  describe '#upload_asset' do\n    let(:file) { file_from_fixtures(\"fake.woff2\", \"woff2\") }\n    let(:filename) { File.basename(file) }\n    let(:upload) do\n      Rack::Test::UploadedFile.new(file)\n    end\n\n    it 'can create a theme upload' do\n      post \"/admin/themes/upload_asset.json\", params: { file: upload }\n      expect(response.status).to eq(201)\n\n      upload = Upload.find_by(original_filename: filename)\n\n      expect(upload.id).not_to be_nil\n      expect(response.parsed_body[\"upload_id\"]).to eq(upload.id)\n    end\n\n    context \"when trying to upload an existing file\" do\n      let(:uploaded_file) { Upload.find_by(original_filename: filename) }\n      let(:response_json) { response.parsed_body }\n\n      before do\n        post \"/admin/themes/upload_asset.json\", params: { file: upload }\n        expect(response.status).to eq(201)\n      end\n\n      it \"reuses the original upload\" do\n        expect(response.status).to eq(201)\n        expect(response_json[\"upload_id\"]).to eq(uploaded_file.id)\n      end\n    end\n  end\n\n  describe '#export' do\n    it \"exports correctly\" do\n      theme = Fabricate(:theme, name: \"Awesome Theme\")\n      theme.set_field(target: :common, name: :scss, value: '.body{color: black;}')\n      theme.set_field(target: :desktop, name: :after_header, value: '<b>test</b>')\n      theme.set_field(target: :extra_js, name: \"discourse/controller/blah\", value: 'console.log(\"test\");')\n      theme.save!\n\n      get \"/admin/customize/themes/#{theme.id}/export\"\n      expect(response.status).to eq(200)\n\n      # Save the output in a temp file (automatically cleaned up)\n      file = Tempfile.new('archive.zip')\n      file.write(response.body)\n      file.rewind\n      uploaded_file = Rack::Test::UploadedFile.new(file.path, \"application/zip\")\n\n      # Now import it again\n      expect do\n        post \"/admin/themes/import.json\", params: { theme: uploaded_file }\n        expect(response.status).to eq(201)\n      end.to change { Theme.count }.by (1)\n\n      json = response.parsed_body\n\n      expect(json[\"theme\"][\"name\"]).to eq(\"Awesome Theme\")\n      expect(json[\"theme\"][\"theme_fields\"].length).to eq(3)\n    end\n  end\n\n  describe '#import' do\n\n    let(:theme_json_file) do\n      Rack::Test::UploadedFile.new(file_from_fixtures(\"sam-s-simple-theme.dcstyle.json\", \"json\"), \"application/json\")\n    end\n\n    let(:theme_archive) do\n      Rack::Test::UploadedFile.new(file_from_fixtures(\"discourse-test-theme.zip\", \"themes\"), \"application/zip\")\n    end\n\n    let(:image) do\n      file_from_fixtures(\"logo.png\")\n    end\n\n    context 'when theme allowlist mode is enabled' do\n      before do\n        global_setting :allowed_theme_repos, \"https://github.com/discourse/discourse-brand-header.git\"\n      end\n\n      it \"allows allowlisted imports\" do\n        expect(Theme.allowed_remote_theme_ids.length).to eq(0)\n\n        post \"/admin/themes/import.json\", params: {\n          remote: '    https://github.com/discourse/discourse-brand-header.git       '\n        }\n\n        expect(Theme.allowed_remote_theme_ids.length).to eq(1)\n        expect(response.status).to eq(201)\n      end\n\n      it \"prevents adding disallowed themes\" do\n        RemoteTheme.stubs(:import_theme)\n        remote = '    https://bad.com/discourse/discourse-brand-header.git       '\n\n        post \"/admin/themes/import.json\", params: { remote: remote }\n\n        expect(response.status).to eq(403)\n        expect(response.parsed_body['errors']).to include(I18n.t(\"themes.import_error.not_allowed_theme\", { repo: remote.strip }))\n      end\n\n      it \"bans json file import\" do\n        post \"/admin/themes/import.json\", params: { theme: theme_json_file }\n        expect(response.status).to eq(403)\n      end\n    end\n\n    it 'can import a theme from Git' do\n      RemoteTheme.stubs(:import_theme)\n      post \"/admin/themes/import.json\", params: {\n        remote: '    https://github.com/discourse/discourse-brand-header.git       '\n      }\n\n      expect(response.status).to eq(201)\n    end\n\n    it 'can lookup a private key by public key' do\n      Discourse.redis.setex('ssh_key_abcdef', 1.hour, 'rsa private key')\n\n      ThemeStore::GitImporter.any_instance.stubs(:import!)\n      RemoteTheme.stubs(:extract_theme_info).returns(\n        'name' => 'discourse-brand-header',\n        'component' => true\n      )\n      RemoteTheme.any_instance.stubs(:update_from_remote)\n\n      post '/admin/themes/import.json', params: {\n        remote: '    https://github.com/discourse/discourse-brand-header.git       ',\n        public_key: 'abcdef',\n      }\n\n      expect(RemoteTheme.last.private_key).to eq('rsa private key')\n\n      expect(response.status).to eq(201)\n    end\n\n    it 'imports a theme' do\n      post \"/admin/themes/import.json\", params: { theme: theme_json_file }\n      expect(response.status).to eq(201)\n\n      json = response.parsed_body\n\n      expect(json[\"theme\"][\"name\"]).to eq(\"Sam's Simple Theme\")\n      expect(json[\"theme\"][\"theme_fields\"].length).to eq(2)\n      expect(json[\"theme\"][\"auto_update\"]).to eq(false)\n      expect(UserHistory.where(action: UserHistory.actions[:change_theme]).count).to eq(1)\n    end\n\n    it 'can fail if theme is not accessible' do\n      post \"/admin/themes/import.json\", params: {\n        remote: 'git@github.com:discourse/discourse-inexistent-theme.git'\n      }\n\n      expect(response.status).to eq(422)\n      expect(response.parsed_body[\"errors\"]).to contain_exactly(I18n.t(\"themes.import_error.git\"))\n    end\n\n    it 'can force install theme' do\n      post \"/admin/themes/import.json\", params: {\n        remote: 'git@github.com:discourse/discourse-inexistent-theme.git',\n        force: true\n      }\n\n      expect(response.status).to eq(201)\n      expect(response.parsed_body[\"theme\"][\"name\"]).to eq(\"discourse-inexistent-theme\")\n    end\n\n    it 'fails to import with an error if uploads are not allowed' do\n      SiteSetting.theme_authorized_extensions = \"nothing\"\n\n      expect do\n        post \"/admin/themes/import.json\", params: { theme: theme_archive }\n      end.to change { Theme.count }.by (0)\n\n      expect(response.status).to eq(422)\n    end\n\n    it 'imports a theme from an archive' do\n      _existing_theme = Fabricate(:theme, name: \"Header Icons\")\n\n      expect do\n        post \"/admin/themes/import.json\", params: { theme: theme_archive }\n      end.to change { Theme.count }.by (1)\n      expect(response.status).to eq(201)\n      json = response.parsed_body\n\n      expect(json[\"theme\"][\"name\"]).to eq(\"Header Icons\")\n      expect(json[\"theme\"][\"theme_fields\"].length).to eq(5)\n      expect(json[\"theme\"][\"auto_update\"]).to eq(false)\n      expect(UserHistory.where(action: UserHistory.actions[:change_theme]).count).to eq(1)\n    end\n\n    it 'updates an existing theme from an archive by name' do\n      # Old theme CLI method, remove Jan 2020\n      _existing_theme = Fabricate(:theme, name: \"Header Icons\")\n\n      expect do\n        post \"/admin/themes/import.json\", params: { bundle: theme_archive }\n      end.to change { Theme.count }.by (0)\n      expect(response.status).to eq(201)\n      json = response.parsed_body\n\n      expect(json[\"theme\"][\"name\"]).to eq(\"Header Icons\")\n      expect(json[\"theme\"][\"theme_fields\"].length).to eq(5)\n      expect(UserHistory.where(action: UserHistory.actions[:change_theme]).count).to eq(1)\n    end\n\n    it 'updates an existing theme from an archive by id' do\n      # Used by theme CLI\n      _existing_theme = Fabricate(:theme, name: \"Header Icons\")\n      other_existing_theme = Fabricate(:theme, name: \"Some other name\")\n\n      messages = MessageBus.track_publish do\n        expect do\n          post \"/admin/themes/import.json\", params: { bundle: theme_archive, theme_id: other_existing_theme.id }\n        end.to change { Theme.count }.by (0)\n      end\n      expect(response.status).to eq(201)\n      json = response.parsed_body\n\n      # Ensure only one refresh message is sent.\n      # More than 1 is wasteful, and can trigger unusual race conditions in the client\n      # If this test fails, it probably means `theme.save` is being called twice - check any 'autosave' relations\n      file_change_messages = messages.filter { |m| m[:channel] == \"/file-change\" }\n      expect(file_change_messages.count).to eq(1)\n\n      expect(json[\"theme\"][\"name\"]).to eq(\"Some other name\")\n      expect(json[\"theme\"][\"id\"]).to eq(other_existing_theme.id)\n      expect(json[\"theme\"][\"theme_fields\"].length).to eq(5)\n      expect(UserHistory.where(action: UserHistory.actions[:change_theme]).count).to eq(1)\n    end\n\n    it 'creates a new theme when id specified as nil' do\n      # Used by theme CLI\n      existing_theme = Fabricate(:theme, name: \"Header Icons\")\n\n      expect do\n        post \"/admin/themes/import.json\", params: { bundle: theme_archive, theme_id: nil }\n      end.to change { Theme.count }.by (1)\n      expect(response.status).to eq(201)\n      json = response.parsed_body\n\n      expect(json[\"theme\"][\"name\"]).to eq(\"Header Icons\")\n      expect(json[\"theme\"][\"id\"]).not_to eq(existing_theme.id)\n      expect(json[\"theme\"][\"theme_fields\"].length).to eq(5)\n      expect(json[\"theme\"][\"auto_update\"]).to eq(false)\n      expect(UserHistory.where(action: UserHistory.actions[:change_theme]).count).to eq(1)\n    end\n  end\n\n  describe '#index' do\n    it 'correctly returns themes' do\n      ColorScheme.destroy_all\n      Theme.destroy_all\n\n      theme = Fabricate(:theme)\n      theme.set_field(target: :common, name: :scss, value: '.body{color: black;}')\n      theme.set_field(target: :desktop, name: :after_header, value: '<b>test</b>')\n\n      theme.remote_theme = RemoteTheme.new(\n        remote_url: 'awesome.git',\n        remote_version: '7',\n        local_version: '8',\n        remote_updated_at: Time.zone.now\n      )\n\n      theme.save!\n\n      # this will get serialized as well\n      ColorScheme.create_from_base(name: \"test\", colors: [])\n\n      get \"/admin/themes.json\"\n\n      expect(response.status).to eq(200)\n\n      json = response.parsed_body\n\n      expect(json[\"extras\"][\"color_schemes\"].length).to eq(1)\n      theme_json = json[\"themes\"].find { |t| t[\"id\"] == theme.id }\n      expect(theme_json[\"theme_fields\"].length).to eq(2)\n      expect(theme_json[\"remote_theme\"][\"remote_version\"]).to eq(\"7\")\n    end\n  end\n\n  describe '#create' do\n    it 'creates a theme' do\n      post \"/admin/themes.json\", params: {\n        theme: {\n          name: 'my test name',\n          theme_fields: [name: 'scss', target: 'common', value: 'body{color: red;}']\n        }\n      }\n\n      expect(response.status).to eq(201)\n\n      json = response.parsed_body\n\n      expect(json[\"theme\"][\"theme_fields\"].length).to eq(1)\n      expect(UserHistory.where(action: UserHistory.actions[:change_theme]).count).to eq(1)\n    end\n  end\n\n  describe '#update' do\n    let!(:theme) { Fabricate(:theme) }\n\n    it 'returns the right response when an invalid id is given' do\n      put \"/admin/themes/99999.json\"\n\n      expect(response.status).to eq(400)\n    end\n\n    it 'can change default theme' do\n      SiteSetting.default_theme_id = -1\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        id: theme.id, theme: { default: true }\n      }\n\n      expect(response.status).to eq(200)\n      expect(SiteSetting.default_theme_id).to eq(theme.id)\n    end\n\n    it 'can unset default theme' do\n      SiteSetting.default_theme_id = theme.id\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: { default: false }\n      }\n\n      expect(response.status).to eq(200)\n      expect(SiteSetting.default_theme_id).to eq(-1)\n    end\n\n    context 'when theme allowlist mode is enabled' do\n      before do\n        global_setting :allowed_theme_repos, \"  https://magic.com/repo.git, https://x.com/git\"\n      end\n\n      it 'unconditionally bans theme_fields from updating' do\n        r = RemoteTheme.create!(remote_url: \"https://magic.com/repo.git\")\n        theme.update!(remote_theme_id: r.id)\n\n        put \"/admin/themes/#{theme.id}.json\", params: {\n          theme: {\n            name: 'my test name',\n            theme_fields: [\n              { name: 'scss', target: 'common', value: '' },\n              { name: 'scss', target: 'desktop', value: 'body{color: blue;}' },\n            ]\n          }\n        }\n\n        expect(response.status).to eq(403)\n      end\n    end\n\n    it 'updates a theme' do\n      theme.set_field(target: :common, name: :scss, value: '.body{color: black;}')\n      theme.save\n\n      child_theme = Fabricate(:theme, component: true)\n\n      upload = UploadCreator.new(file_from_fixtures(\"logo.png\"), \"logo.png\").create_for(Discourse.system_user.id)\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: {\n          child_theme_ids: [child_theme.id],\n          name: 'my test name',\n          theme_fields: [\n            { name: 'scss', target: 'common', value: '' },\n            { name: 'scss', target: 'desktop', value: 'body{color: blue;}' },\n            { name: 'bob', target: 'common', value: '', type_id: 2, upload_id: upload.id },\n          ]\n        }\n      }\n\n      expect(response.status).to eq(200)\n\n      json = response.parsed_body\n\n      fields = json[\"theme\"][\"theme_fields\"].sort { |a, b| a[\"value\"] <=> b[\"value\"] }\n\n      expect(fields[0][\"value\"]).to eq('')\n      expect(fields[0][\"upload_id\"]).to eq(upload.id)\n      expect(fields[1][\"value\"]).to eq('body{color: blue;}')\n      expect(fields.length).to eq(2)\n      expect(json[\"theme\"][\"child_themes\"].length).to eq(1)\n      expect(UserHistory.where(action: UserHistory.actions[:change_theme]).count).to eq(1)\n    end\n\n    it 'prevents theme update when using ember css selectors' do\n      child_theme = Fabricate(:theme, component: true)\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: {\n          child_theme_ids: [child_theme.id],\n          name: 'my test name',\n          theme_fields: [\n            { name: 'scss', target: 'common', value: '' },\n            { name: 'scss', target: 'desktop', value: '.ember-view{color: blue;}' },\n          ]\n        }\n      }\n\n      expect(response.status).to eq(200)\n\n      json = response.parsed_body\n\n      fields = json[\"theme\"][\"theme_fields\"].sort { |a, b| a[\"value\"] <=> b[\"value\"] }\n      expect(fields[0][\"error\"]).to eq(I18n.t(\"themes.ember_selector_error\"))\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: {\n          child_theme_ids: [child_theme.id],\n          name: 'my test name',\n          theme_fields: [\n            { name: 'scss', target: 'common', value: '' },\n            { name: 'scss', target: 'desktop', value: '#ember392{color: blue;}' },\n          ]\n        }\n      }\n\n      expect(response.status).to eq(200)\n      json = response.parsed_body\n\n      fields = json[\"theme\"][\"theme_fields\"].sort { |a, b| a[\"value\"] <=> b[\"value\"] }\n      expect(fields[0][\"error\"]).to eq(I18n.t(\"themes.ember_selector_error\"))\n    end\n\n    it 'blocks remote theme fields from being locally edited' do\n      r = RemoteTheme.create!(remote_url: \"https://magic.com/repo.git\")\n      theme.update!(remote_theme_id: r.id)\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: {\n          theme_fields: [\n            { name: 'scss', target: 'common', value: '' },\n            { name: 'header', target: 'common', value: 'filename.jpg', upload_id: 4 }\n          ]\n        }\n      }\n\n      expect(response.status).to eq(403)\n    end\n\n    it 'allows zip-imported theme fields to be locally edited' do\n      r = RemoteTheme.create!(remote_url: \"\")\n      theme.update!(remote_theme_id: r.id)\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: {\n          theme_fields: [\n            { name: 'scss', target: 'common', value: '' },\n            { name: 'header', target: 'common', value: 'filename.jpg', upload_id: 4 }\n          ]\n        }\n      }\n\n      expect(response.status).to eq(200)\n    end\n\n    it 'updates a child theme' do\n      child_theme = Fabricate(:theme, component: true)\n      put \"/admin/themes/#{child_theme.id}.json\", params: {\n        theme: {\n          parent_theme_ids: [theme.id],\n        }\n      }\n      expect(child_theme.parent_themes).to eq([theme])\n    end\n\n    it 'can update translations' do\n      theme.set_field(target: :translations, name: :en, value: { en: { somegroup: { somestring: \"defaultstring\" } } }.deep_stringify_keys.to_yaml)\n      theme.save!\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: {\n          translations: {\n            \"somegroup.somestring\" => \"overriddenstring\"\n          }\n        }\n      }\n\n      # Response correct\n      expect(response.status).to eq(200)\n      json = response.parsed_body\n      expect(json[\"theme\"][\"translations\"][0][\"value\"]).to eq(\"overriddenstring\")\n\n      # Database correct\n      theme.reload\n      expect(theme.theme_translation_overrides.count).to eq(1)\n      expect(theme.theme_translation_overrides.first.translation_key).to eq(\"somegroup.somestring\")\n\n      # Set back to default\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: {\n          translations: {\n            \"somegroup.somestring\" => \"defaultstring\"\n          }\n        }\n      }\n      # Response correct\n      expect(response.status).to eq(200)\n      json = response.parsed_body\n      expect(json[\"theme\"][\"translations\"][0][\"value\"]).to eq(\"defaultstring\")\n\n      # Database correct\n      theme.reload\n      expect(theme.theme_translation_overrides.count).to eq(0)\n    end\n\n    it 'checking for updates saves the remote_theme record' do\n      theme.remote_theme = RemoteTheme.create!(remote_url: \"http://discourse.org\", remote_version: \"a\", local_version: \"a\", commits_behind: 0)\n      theme.save!\n      ThemeStore::GitImporter.any_instance.stubs(:import!)\n      ThemeStore::GitImporter.any_instance.stubs(:commits_since).returns([\"b\", 1])\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: {\n          remote_check: true\n        }\n      }\n      theme.reload\n      expect(theme.remote_theme.remote_version).to eq(\"b\")\n      expect(theme.remote_theme.commits_behind).to eq(1)\n    end\n\n    it 'can disable component' do\n      child = Fabricate(:theme, component: true)\n\n      put \"/admin/themes/#{child.id}.json\", params: {\n        theme: {\n          enabled: false\n        }\n      }\n      expect(response.status).to eq(200)\n      json = response.parsed_body\n      expect(json[\"theme\"][\"enabled\"]).to eq(false)\n      expect(UserHistory.where(\n        context: child.id.to_s,\n        action: UserHistory.actions[:disable_theme_component]\n      ).size).to eq(1)\n      expect(json[\"theme\"][\"disabled_by\"][\"id\"]).to eq(admin.id)\n    end\n\n    it \"enabling/disabling a component creates the correct staff action log\" do\n      child = Fabricate(:theme, component: true)\n      UserHistory.destroy_all\n\n      put \"/admin/themes/#{child.id}.json\", params: {\n        theme: {\n          enabled: false\n        }\n      }\n      expect(response.status).to eq(200)\n\n      expect(UserHistory.where(\n        context: child.id.to_s,\n        action: UserHistory.actions[:disable_theme_component]\n      ).size).to eq(1)\n      expect(UserHistory.where(\n        context: child.id.to_s,\n        action: UserHistory.actions[:enable_theme_component]\n      ).size).to eq(0)\n\n      put \"/admin/themes/#{child.id}.json\", params: {\n        theme: {\n          enabled: true\n        }\n      }\n      expect(response.status).to eq(200)\n      json = response.parsed_body\n\n      expect(UserHistory.where(\n        context: child.id.to_s,\n        action: UserHistory.actions[:disable_theme_component]\n      ).size).to eq(1)\n      expect(UserHistory.where(\n        context: child.id.to_s,\n        action: UserHistory.actions[:enable_theme_component]\n      ).size).to eq(1)\n\n      expect(json[\"theme\"][\"disabled_by\"]).to eq(nil)\n      expect(json[\"theme\"][\"enabled\"]).to eq(true)\n    end\n\n    it 'handles import errors on update' do\n      theme.create_remote_theme!(remote_url: \"https://example.com/repository\")\n      theme.save!\n\n      # RemoteTheme is extensively tested, and setting up the test scaffold is a large overhead\n      # So use a stub here to test the controller\n      RemoteTheme.any_instance.stubs(:update_from_remote).raises(RemoteTheme::ImportError.new(\"error message\"))\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: { remote_update: true }\n      }\n      expect(response.status).to eq(422)\n      expect(response.parsed_body[\"errors\"].first).to eq(\"error message\")\n    end\n\n    it 'returns the right error message' do\n      theme.update!(component: true)\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: { default: true }\n      }\n\n      expect(response.status).to eq(400)\n      expect(response.parsed_body[\"errors\"].first).to include(I18n.t(\"themes.errors.component_no_default\"))\n    end\n\n    it 'prevents converting the default theme to a component' do\n      SiteSetting.default_theme_id = theme.id\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: { component: true }\n      }\n\n      # should this error message be localized? InvalidParameters :component\n      expect(response.status).to eq(400)\n      expect(response.parsed_body[\"errors\"].first).to include('component')\n    end\n  end\n\n  describe '#destroy' do\n    let!(:theme) { Fabricate(:theme) }\n\n    it 'returns the right response when an invalid id is given' do\n      delete \"/admin/themes/9999.json\"\n\n      expect(response.status).to eq(400)\n    end\n\n    it \"deletes the field's javascript cache\" do\n      theme.set_field(target: :common, name: :header, value: '<script>console.log(\"test\")</script>')\n      theme.save!\n\n      javascript_cache = theme.theme_fields.find_by(target_id: Theme.targets[:common], name: :header).javascript_cache\n      expect(javascript_cache).to_not eq(nil)\n\n      delete \"/admin/themes/#{theme.id}.json\"\n\n      expect(response.status).to eq(204)\n      expect { theme.reload }.to raise_error(ActiveRecord::RecordNotFound)\n      expect { javascript_cache.reload }.to raise_error(ActiveRecord::RecordNotFound)\n    end\n  end\n\n  describe '#preview' do\n    it \"should return the right response when an invalid id is given\" do\n      get \"/admin/themes/9999/preview.json\"\n\n      expect(response.status).to eq(400)\n    end\n  end\n\n  describe '#update_single_setting' do\n    let(:theme) { Fabricate(:theme) }\n\n    before do\n      theme.set_field(target: :settings, name: :yaml, value: \"bg: red\")\n      theme.save!\n    end\n\n    it \"should update a theme setting\" do\n      put \"/admin/themes/#{theme.id}/setting.json\", params: {\n        name: \"bg\",\n        value: \"green\"\n      }\n\n      expect(response.status).to eq(200)\n      expect(response.parsed_body[\"bg\"]).to eq(\"green\")\n\n      theme.reload\n      expect(theme.cached_settings[:bg]).to eq(\"green\")\n      user_history = UserHistory.last\n\n      expect(user_history.action).to eq(\n        UserHistory.actions[:change_theme_setting]\n      )\n    end\n\n    it \"should clear a theme setting\" do\n      put \"/admin/themes/#{theme.id}/setting.json\", params: { name: \"bg\" }\n      theme.reload\n\n      expect(response.status).to eq(200)\n      expect(theme.cached_settings[:bg]).to eq(\"\")\n    end\n  end\nend\n"], "fixing_code": ["# frozen_string_literal: true\n\nrequire 'base64'\n\nclass Admin::ThemesController < Admin::AdminController\n\n  skip_before_action :check_xhr, only: [:show, :preview, :export]\n  before_action :ensure_admin\n\n  def preview\n    theme = Theme.find_by(id: params[:id])\n    raise Discourse::InvalidParameters.new(:id) unless theme\n\n    redirect_to path(\"/?preview_theme_id=#{theme.id}\")\n  end\n\n  def upload_asset\n\n    ban_in_allowlist_mode!\n\n    path = params[:file].path\n\n    hijack do\n      File.open(path) do |file|\n        filename = params[:file]&.original_filename || File.basename(path)\n        upload = UploadCreator.new(file, filename, for_theme: true).create_for(theme_user.id)\n        if upload.errors.count > 0\n          render_json_error upload\n        else\n          render json: { upload_id: upload.id }, status: :created\n        end\n      end\n    end\n  end\n\n  def generate_key_pair\n    require 'sshkey'\n    k = SSHKey.generate\n    Discourse.redis.setex(\"ssh_key_#{k.ssh_public_key}\", 1.hour, k.private_key)\n    render json: { public_key: k.ssh_public_key }\n  end\n\n  THEME_CONTENT_TYPES ||= %w{\n    application/gzip\n    application/x-gzip\n    application/x-zip-compressed\n    application/zip\n  }\n\n  def import\n    @theme = nil\n    if params[:theme] && params[:theme].content_type == \"application/json\"\n\n      ban_in_allowlist_mode!\n\n      # .dcstyle.json import. Deprecated, but still available to allow conversion\n      json = JSON::parse(params[:theme].read)\n      theme = json['theme']\n\n      @theme = Theme.new(name: theme[\"name\"], user_id: theme_user.id, auto_update: false)\n      theme[\"theme_fields\"]&.each do |field|\n\n        if field[\"raw_upload\"]\n          begin\n            tmp = Tempfile.new\n            tmp.binmode\n            file = Base64.decode64(field[\"raw_upload\"])\n            tmp.write(file)\n            tmp.rewind\n            upload = UploadCreator.new(tmp, field[\"filename\"]).create_for(theme_user.id)\n            field[\"upload_id\"] = upload.id\n          ensure\n            tmp.unlink\n          end\n        end\n\n        @theme.set_field(\n          target: field[\"target\"],\n          name: field[\"name\"],\n          value: field[\"value\"],\n          type_id: field[\"type_id\"],\n          upload_id: field[\"upload_id\"]\n        )\n      end\n\n      if @theme.save\n        log_theme_change(nil, @theme)\n        render json: @theme, status: :created\n      else\n        render json: @theme.errors, status: :unprocessable_entity\n      end\n    elsif remote = params[:remote]\n      begin\n        guardian.ensure_allowed_theme_repo_import!(remote.strip)\n      rescue Discourse::InvalidAccess\n        render_json_error I18n.t(\"themes.import_error.not_allowed_theme\", { repo: remote.strip }), status: :forbidden\n        return\n      end\n\n      begin\n        branch = params[:branch] ? params[:branch] : nil\n        private_key = params[:public_key] ? Discourse.redis.get(\"ssh_key_#{params[:public_key]}\") : nil\n        return render_json_error I18n.t(\"themes.import_error.ssh_key_gone\") if params[:public_key].present? && private_key.blank?\n\n        @theme = RemoteTheme.import_theme(remote, theme_user, private_key: private_key, branch: branch)\n        render json: @theme, status: :created\n      rescue RemoteTheme::ImportError => e\n        if params[:force]\n          theme_name = params[:remote].gsub(/.git$/, \"\").split(\"/\").last\n\n          remote_theme = RemoteTheme.new\n          remote_theme.private_key = private_key\n          remote_theme.branch = params[:branch] ? params[:branch] : nil\n          remote_theme.remote_url = params[:remote]\n          remote_theme.save!\n\n          @theme = Theme.new(user_id: theme_user&.id || -1, name: theme_name)\n          @theme.remote_theme = remote_theme\n          @theme.save!\n\n          render json: @theme, status: :created\n        else\n          render_json_error e.message\n        end\n      end\n    elsif params[:bundle] || (params[:theme] && THEME_CONTENT_TYPES.include?(params[:theme].content_type))\n\n      ban_in_allowlist_mode!\n\n      # params[:bundle] used by theme CLI. params[:theme] used by admin UI\n      bundle = params[:bundle] || params[:theme]\n      theme_id = params[:theme_id]\n      update_components = params[:components]\n      match_theme_by_name = !!params[:bundle] && !params.key?(:theme_id) # Old theme CLI behavior, match by name. Remove Jan 2020\n      begin\n        @theme = RemoteTheme.update_zipped_theme(\n          bundle.path,\n          bundle.original_filename,\n          match_theme: match_theme_by_name,\n          user: theme_user,\n          theme_id: theme_id,\n          update_components: update_components\n        )\n        log_theme_change(nil, @theme)\n        render json: @theme, status: :created\n      rescue RemoteTheme::ImportError => e\n        render_json_error e.message\n      end\n    else\n      render_json_error I18n.t(\"themes.import_error.unknown_file_type\"), status: :unprocessable_entity\n    end\n  end\n\n  def index\n    @themes = Theme.include_relations.order(:name)\n    @color_schemes = ColorScheme.all.includes(:theme, color_scheme_colors: :color_scheme).to_a\n\n    payload = {\n      themes: ActiveModel::ArraySerializer.new(@themes, each_serializer: ThemeSerializer),\n      extras: {\n        color_schemes: ActiveModel::ArraySerializer.new(@color_schemes, each_serializer: ColorSchemeSerializer)\n      }\n    }\n\n    respond_to do |format|\n      format.json { render json: payload }\n    end\n  end\n\n  def create\n\n    ban_in_allowlist_mode!\n\n    @theme = Theme.new(name: theme_params[:name],\n                       user_id: theme_user.id,\n                       user_selectable: theme_params[:user_selectable] || false,\n                       color_scheme_id: theme_params[:color_scheme_id],\n                       component: [true, \"true\"].include?(theme_params[:component]))\n    set_fields\n\n    respond_to do |format|\n      if @theme.save\n        update_default_theme\n        log_theme_change(nil, @theme)\n        format.json { render json: @theme, status: :created }\n      else\n        format.json { render json: @theme.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  def update\n    @theme = Theme.include_relations.find_by(id: params[:id])\n    raise Discourse::InvalidParameters.new(:id) unless @theme\n\n    original_json = ThemeSerializer.new(@theme, root: false).to_json\n    disables_component = [false, \"false\"].include?(theme_params[:enabled])\n    enables_component = [true, \"true\"].include?(theme_params[:enabled])\n\n    [:name, :color_scheme_id, :user_selectable, :enabled, :auto_update].each do |field|\n      if theme_params.key?(field)\n        @theme.public_send(\"#{field}=\", theme_params[field])\n      end\n    end\n\n    if theme_params.key?(:child_theme_ids)\n      add_relative_themes!(:child, theme_params[:child_theme_ids])\n    end\n\n    if theme_params.key?(:parent_theme_ids)\n      add_relative_themes!(:parent, theme_params[:parent_theme_ids])\n    end\n\n    set_fields\n    update_settings\n    update_translations\n    handle_switch\n\n    if params[:theme][:remote_check]\n      @theme.remote_theme.update_remote_version\n    end\n\n    if params[:theme][:remote_update]\n      @theme.remote_theme.update_from_remote\n    end\n\n    respond_to do |format|\n      if @theme.save\n        update_default_theme\n\n        @theme = Theme.include_relations.find(@theme.id)\n\n        if (!disables_component && !enables_component) || theme_params.keys.size > 1\n          log_theme_change(original_json, @theme)\n        end\n        log_theme_component_disabled if disables_component\n        log_theme_component_enabled if enables_component\n\n        format.json { render json: @theme, status: :ok }\n      else\n        format.json do\n          error = @theme.errors.full_messages.join(\", \").presence\n          error = I18n.t(\"themes.bad_color_scheme\") if @theme.errors[:color_scheme].present?\n          error ||= I18n.t(\"themes.other_error\")\n\n          render json: { errors: [ error ] }, status: :unprocessable_entity\n        end\n      end\n    end\n  rescue RemoteTheme::ImportError => e\n    render_json_error e.message\n  end\n\n  def destroy\n    @theme = Theme.find_by(id: params[:id])\n    raise Discourse::InvalidParameters.new(:id) unless @theme\n\n    StaffActionLogger.new(current_user).log_theme_destroy(@theme)\n    @theme.destroy\n\n    respond_to do |format|\n      format.json { head :no_content }\n    end\n  end\n\n  def show\n    @theme = Theme.include_relations.find_by(id: params[:id])\n    raise Discourse::InvalidParameters.new(:id) unless @theme\n\n    render json: ThemeSerializer.new(@theme)\n  end\n\n  def export\n    @theme = Theme.find_by(id: params[:id])\n    raise Discourse::InvalidParameters.new(:id) unless @theme\n\n    exporter = ThemeStore::ZipExporter.new(@theme)\n    file_path = exporter.package_filename\n\n    headers['Content-Length'] = File.size(file_path).to_s\n    send_data File.read(file_path),\n      filename: File.basename(file_path),\n      content_type: \"application/zip\"\n  ensure\n    exporter.cleanup!\n  end\n\n  def update_single_setting\n    params.require(\"name\")\n    @theme = Theme.find_by(id: params[:id])\n    raise Discourse::InvalidParameters.new(:id) unless @theme\n\n    setting_name = params[:name].to_sym\n    new_value = params[:value] || nil\n\n    previous_value = @theme.cached_settings[setting_name]\n    @theme.update_setting(setting_name, new_value)\n    @theme.save\n\n    log_theme_setting_change(setting_name, previous_value, new_value)\n\n    updated_setting = @theme.cached_settings.select { |key, val| key == setting_name }\n    render json: updated_setting, status: :ok\n  end\n\n  private\n\n  def ban_in_allowlist_mode!\n    raise Discourse::InvalidAccess if !Theme.allowed_remote_theme_ids.nil?\n  end\n\n  def ban_for_remote_theme!\n    raise Discourse::InvalidAccess if @theme.remote_theme&.is_git?\n  end\n\n  def add_relative_themes!(kind, ids)\n    expected = ids.map(&:to_i)\n\n    relation = kind == :child ? @theme.child_theme_relation : @theme.parent_theme_relation\n\n    relation.to_a.each do |relative|\n      if kind == :child && expected.include?(relative.child_theme_id)\n        expected.reject! { |id| id == relative.child_theme_id }\n      elsif kind == :parent && expected.include?(relative.parent_theme_id)\n        expected.reject! { |id| id == relative.parent_theme_id }\n      else\n        relative.destroy\n      end\n    end\n\n    Theme.where(id: expected).each do |theme|\n      @theme.add_relative_theme!(kind, theme)\n    end\n  end\n\n  def update_default_theme\n    if theme_params.key?(:default)\n      is_default = theme_params[:default].to_s == \"true\"\n      if @theme.id == SiteSetting.default_theme_id && !is_default\n        Theme.clear_default!\n      elsif is_default\n        @theme.set_default!\n      end\n    end\n  end\n\n  def theme_params\n    @theme_params ||=\n      begin\n        # deep munge is a train wreck, work around it for now\n        params[:theme][:child_theme_ids] ||= [] if params[:theme].key?(:child_theme_ids)\n        params[:theme][:parent_theme_ids] ||= [] if params[:theme].key?(:parent_theme_ids)\n\n        params.require(:theme).permit(\n          :name,\n          :color_scheme_id,\n          :default,\n          :user_selectable,\n          :component,\n          :enabled,\n          :auto_update,\n          settings: {},\n          translations: {},\n          theme_fields: [:name, :target, :value, :upload_id, :type_id],\n          child_theme_ids: [],\n          parent_theme_ids: []\n        )\n      end\n  end\n\n  def set_fields\n    return unless fields = theme_params[:theme_fields]\n\n    ban_in_allowlist_mode!\n    ban_for_remote_theme!\n\n    fields.each do |field|\n      @theme.set_field(\n        target: field[:target],\n        name: field[:name],\n        value: field[:value],\n        type_id: field[:type_id],\n        upload_id: field[:upload_id]\n      )\n    end\n  end\n\n  def update_settings\n    return unless target_settings = theme_params[:settings]\n\n    target_settings.each_pair do |setting_name, new_value|\n      @theme.update_setting(setting_name.to_sym, new_value)\n    end\n  end\n\n  def update_translations\n    return unless target_translations = theme_params[:translations]\n\n    target_translations.each_pair do |translation_key, new_value|\n      @theme.update_translation(translation_key, new_value)\n    end\n  end\n\n  def log_theme_change(old_record, new_record)\n    StaffActionLogger.new(current_user).log_theme_change(old_record, new_record)\n  end\n\n  def log_theme_setting_change(setting_name, previous_value, new_value)\n    StaffActionLogger.new(current_user).log_theme_setting_change(setting_name, previous_value, new_value, @theme)\n  end\n\n  def log_theme_component_disabled\n    StaffActionLogger.new(current_user).log_theme_component_disabled(@theme)\n  end\n\n  def log_theme_component_enabled\n    StaffActionLogger.new(current_user).log_theme_component_enabled(@theme)\n  end\n\n  def handle_switch\n    param = theme_params[:component]\n    if param.to_s == \"false\" && @theme.component?\n      raise Discourse::InvalidParameters.new(:component) if @theme.id == SiteSetting.default_theme_id\n      @theme.switch_to_theme!\n    elsif param.to_s == \"true\" && !@theme.component?\n      raise Discourse::InvalidParameters.new(:component) if @theme.id == SiteSetting.default_theme_id\n      @theme.switch_to_component!\n    end\n  end\n\n  # Overridden by theme-creator plugin\n  def theme_user\n    current_user\n  end\nend\n", "# frozen_string_literal: true\n\nrequire \"sidekiq/web\"\nrequire \"mini_scheduler/web\"\n\n# The following constants have been replaced with `RouteFormat` and are deprecated.\nUSERNAME_ROUTE_FORMAT = /[%\\w.\\-]+?/ unless defined? USERNAME_ROUTE_FORMAT\nBACKUP_ROUTE_FORMAT = /.+\\.(sql\\.gz|tar\\.gz|tgz)/i unless defined? BACKUP_ROUTE_FORMAT\n\nDiscourse::Application.routes.draw do\n  def patch(*) end # Disable PATCH requests\n\n  scope path: nil, constraints: { format: /(json|html|\\*\\/\\*)/ } do\n    relative_url_root = (defined?(Rails.configuration.relative_url_root) && Rails.configuration.relative_url_root) ? Rails.configuration.relative_url_root + '/' : '/'\n\n    match \"/404\", to: \"exceptions#not_found\", via: [:get, :post]\n    get \"/404-body\" => \"exceptions#not_found_body\"\n\n    get \"/bootstrap\" => \"bootstrap#index\"\n\n    post \"webhooks/aws\" => \"webhooks#aws\"\n    post \"webhooks/mailgun\"  => \"webhooks#mailgun\"\n    post \"webhooks/mailjet\"  => \"webhooks#mailjet\"\n    post \"webhooks/mandrill\" => \"webhooks#mandrill\"\n    get \"webhooks/mandrill\" => \"webhooks#mandrill_head\"\n    post \"webhooks/postmark\" => \"webhooks#postmark\"\n    post \"webhooks/sendgrid\" => \"webhooks#sendgrid\"\n    post \"webhooks/sparkpost\" => \"webhooks#sparkpost\"\n\n    scope path: nil, format: true, constraints: { format: :xml } do\n      resources :sitemap, only: [:index]\n      get \"/sitemap_:page\" => \"sitemap#page\", page: /[1-9][0-9]*/\n      get \"/sitemap_recent\" => \"sitemap#recent\"\n      get \"/news\" => \"sitemap#news\"\n    end\n\n    scope path: nil, constraints: { format: /.*/ } do\n      if Rails.env.development?\n        mount Sidekiq::Web => \"/sidekiq\"\n        mount Logster::Web => \"/logs\"\n      else\n        # only allow sidekiq in master site\n        mount Sidekiq::Web => \"/sidekiq\", constraints: AdminConstraint.new(require_master: true)\n        mount Logster::Web => \"/logs\", constraints: AdminConstraint.new\n      end\n    end\n\n    resources :about do\n      collection do\n        get \"live_post_counts\"\n      end\n    end\n\n    get \"finish-installation\" => \"finish_installation#index\"\n    get \"finish-installation/register\" => \"finish_installation#register\"\n    post \"finish-installation/register\" => \"finish_installation#register\"\n    get \"finish-installation/confirm-email\" => \"finish_installation#confirm_email\"\n    put \"finish-installation/resend-email\" => \"finish_installation#resend_email\"\n\n    get \"pub/check-slug\" => \"published_pages#check_slug\"\n    get \"pub/by-topic/:topic_id\" => \"published_pages#details\"\n    put \"pub/by-topic/:topic_id\" => \"published_pages#upsert\"\n    delete \"pub/by-topic/:topic_id\" => \"published_pages#destroy\"\n    get \"pub/:slug\" => \"published_pages#show\"\n\n    resources :directory_items\n\n    get \"site\" => \"site#site\"\n    namespace :site do\n      get \"settings\"\n      get \"custom_html\"\n      get \"banner\"\n      get \"emoji\"\n    end\n\n    get \"site/basic-info\" => 'site#basic_info'\n    get \"site/statistics\" => 'site#statistics'\n\n    get \"srv/status\" => \"forums#status\"\n\n    get \"wizard\" => \"wizard#index\"\n    get 'wizard/steps' => 'steps#index'\n    get 'wizard/steps/:id' => \"wizard#index\"\n    put 'wizard/steps/:id' => \"steps#update\"\n\n    namespace :admin, constraints: StaffConstraint.new do\n      get \"\" => \"admin#index\"\n\n      get 'plugins' => 'plugins#index'\n\n      resources :site_settings, constraints: AdminConstraint.new do\n        collection do\n          get \"category/:id\" => \"site_settings#index\"\n        end\n\n        put \"user_count\" => \"site_settings#user_count\"\n      end\n\n      get \"reports\" => \"reports#index\"\n      get \"reports/bulk\" => \"reports#bulk\"\n      get \"reports/:type\" => \"reports#show\"\n\n      resources :groups, only: [:create] do\n        member do\n          put \"owners\" => \"groups#add_owners\"\n          delete \"owners\" => \"groups#remove_owner\"\n          put \"primary\" => \"groups#set_primary\"\n        end\n      end\n      resources :groups, except: [:create], constraints: AdminConstraint.new do\n        collection do\n          put \"automatic_membership_count\" => \"groups#automatic_membership_count\"\n        end\n      end\n\n      get \"groups/:type\" => \"groups#show\", constraints: AdminConstraint.new\n      get \"groups/:type/:id\" => \"groups#show\", constraints: AdminConstraint.new\n\n      resources :users, id: RouteFormat.username, except: [:show] do\n        collection do\n          get \"list\" => \"users#index\"\n          get \"list/:query\" => \"users#index\"\n          get \"ip-info\" => \"users#ip_info\"\n          delete \"delete-others-with-same-ip\" => \"users#delete_other_accounts_with_same_ip\"\n          get \"total-others-with-same-ip\" => \"users#total_other_accounts_with_same_ip\"\n          put \"approve-bulk\" => \"users#approve_bulk\"\n        end\n        delete \"penalty_history\", constraints: AdminConstraint.new\n        put \"suspend\"\n        put \"delete_posts_batch\"\n        put \"unsuspend\"\n        put \"revoke_admin\", constraints: AdminConstraint.new\n        put \"grant_admin\", constraints: AdminConstraint.new\n        put \"revoke_moderation\", constraints: AdminConstraint.new\n        put \"grant_moderation\", constraints: AdminConstraint.new\n        put \"approve\"\n        post \"log_out\", constraints: AdminConstraint.new\n        put \"activate\"\n        put \"deactivate\"\n        put \"silence\"\n        put \"unsilence\"\n        put \"trust_level\"\n        put \"trust_level_lock\"\n        put \"primary_group\"\n        post \"groups\" => \"users#add_group\", constraints: AdminConstraint.new\n        delete \"groups/:group_id\" => \"users#remove_group\", constraints: AdminConstraint.new\n        get \"badges\"\n        get \"leader_requirements\" => \"users#tl3_requirements\"\n        get \"tl3_requirements\"\n        put \"anonymize\"\n        post \"merge\"\n        post \"reset_bounce_score\"\n        put \"disable_second_factor\"\n        delete \"sso_record\"\n      end\n      get \"users/:id.json\" => 'users#show', defaults: { format: 'json' }\n      get 'users/:id/:username' => 'users#show', constraints: { username: RouteFormat.username }, as: :user_show\n      get 'users/:id/:username/badges' => 'users#show'\n      get 'users/:id/:username/tl3_requirements' => 'users#show'\n\n      post \"users/sync_sso\" => \"users#sync_sso\", constraints: AdminConstraint.new\n\n      resources :impersonate, constraints: AdminConstraint.new\n\n      resources :email, constraints: AdminConstraint.new do\n        collection do\n          post \"test\"\n          get \"sent\"\n          get \"skipped\"\n          get \"bounced\"\n          get \"received\"\n          get \"rejected\"\n          get \"/incoming/:id/raw\" => \"email#raw_email\"\n          get \"/incoming/:id\" => \"email#incoming\"\n          get \"/incoming_from_bounced/:id\" => \"email#incoming_from_bounced\"\n          get \"preview-digest\" => \"email#preview_digest\"\n          get \"send-digest\" => \"email#send_digest\"\n          get \"smtp_should_reject\"\n          post \"handle_mail\"\n          get \"advanced-test\"\n          post \"advanced-test\" => \"email#advanced_test\"\n        end\n      end\n\n      scope \"/logs\" do\n        resources :staff_action_logs,     only: [:index]\n        get 'staff_action_logs/:id/diff' => 'staff_action_logs#diff'\n        resources :screened_emails,       only: [:index, :destroy]\n        resources :screened_ip_addresses, only: [:index, :create, :update, :destroy]\n        resources :screened_urls,         only: [:index]\n        resources :search_logs,           only: [:index]\n        get 'search_logs/term/' => 'search_logs#term'\n      end\n\n      get \"/logs\" => \"staff_action_logs#index\"\n\n      # alias\n      get '/logs/watched_words', to: redirect(relative_url_root + 'admin/customize/watched_words')\n      get '/logs/watched_words/*path', to: redirect(relative_url_root + 'admin/customize/watched_words/%{path}')\n\n      get \"customize\" => \"color_schemes#index\", constraints: AdminConstraint.new\n      get \"customize/themes\" => \"themes#index\", constraints: AdminConstraint.new\n      get \"customize/colors\" => \"color_schemes#index\", constraints: AdminConstraint.new\n      get \"customize/colors/:id\" => \"color_schemes#index\", constraints: AdminConstraint.new\n      get \"customize/permalinks\" => \"permalinks#index\", constraints: AdminConstraint.new\n      get \"customize/embedding\" => \"embedding#show\", constraints: AdminConstraint.new\n      put \"customize/embedding\" => \"embedding#update\", constraints: AdminConstraint.new\n\n      resources :themes, constraints: AdminConstraint.new do\n        member do\n          get \"preview\" => \"themes#preview\"\n          put \"setting\" => \"themes#update_single_setting\"\n        end\n        collection do\n          post \"import\" => \"themes#import\"\n          post \"upload_asset\" => \"themes#upload_asset\"\n          post \"generate_key_pair\" => \"themes#generate_key_pair\"\n        end\n      end\n\n      scope \"/customize\", constraints: AdminConstraint.new do\n        resources :user_fields, constraints: AdminConstraint.new\n        resources :emojis, constraints: AdminConstraint.new\n\n        get 'themes/:id/:target/:field_name/edit' => 'themes#index'\n        get 'themes/:id' => 'themes#index'\n        get \"themes/:id/export\" => \"themes#export\"\n\n        # They have periods in their URLs often:\n        get 'site_texts'             => 'site_texts#index'\n        get 'site_texts/:id.json'    => 'site_texts#show',   constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        get 'site_texts/:id'         => 'site_texts#show',   constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        put 'site_texts/:id.json'    => 'site_texts#update', constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        put 'site_texts/:id'         => 'site_texts#update', constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        delete 'site_texts/:id.json' => 'site_texts#revert', constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n        delete 'site_texts/:id'      => 'site_texts#revert', constraints: { id: /[\\w.\\-\\+\\%\\&]+/i }\n\n        get 'reseed' => 'site_texts#get_reseed_options'\n        post 'reseed' => 'site_texts#reseed'\n\n        get 'email_templates'          => 'email_templates#index'\n        get 'email_templates/(:id)'    => 'email_templates#show',   constraints: { id: /[0-9a-z_.]+/ }\n        put 'email_templates/(:id)'    => 'email_templates#update', constraints: { id: /[0-9a-z_.]+/ }\n        delete 'email_templates/(:id)' => 'email_templates#revert', constraints: { id: /[0-9a-z_.]+/ }\n\n        get 'robots' => 'robots_txt#show'\n        put 'robots.json' => 'robots_txt#update'\n        delete 'robots.json' => 'robots_txt#reset'\n\n        resource :email_style, only: [:show, :update]\n        get 'email_style/:field' => 'email_styles#show', constraints: { field: /html|css/ }\n      end\n\n      resources :embeddable_hosts, constraints: AdminConstraint.new\n      resources :color_schemes, constraints: AdminConstraint.new\n      resources :permalinks, constraints: AdminConstraint.new\n\n      scope \"/customize\" do\n        resources :watched_words, only: [:index, :create, :update, :destroy] do\n          collection do\n            get \"action/:id\" => \"watched_words#index\"\n            get \"action/:id/download\" => \"watched_words#download\"\n            delete \"action/:id\" => \"watched_words#clear_all\"\n          end\n        end\n        post \"watched_words/upload\" => \"watched_words#upload\"\n      end\n\n      get \"version_check\" => \"versions#show\"\n\n      get \"dashboard\" => \"dashboard#index\"\n      get \"dashboard/general\" => \"dashboard#general\"\n      get \"dashboard/moderation\" => \"dashboard#moderation\"\n      get \"dashboard/security\" => \"dashboard#security\"\n      get \"dashboard/reports\" => \"dashboard#reports\"\n      get \"dashboard/new-features\" => \"dashboard#new_features\"\n      put \"dashboard/mark-new-features-as-seen\" => \"dashboard#mark_new_features_as_seen\"\n\n      resources :dashboard, only: [:index] do\n        collection do\n          get \"problems\"\n        end\n      end\n\n      resources :api, only: [:index], constraints: AdminConstraint.new do\n        collection do\n          resources :keys, controller: 'api', only: [:index, :show, :update, :create, :destroy] do\n            collection do\n              get 'scopes' => 'api#scopes'\n            end\n\n            member do\n              post \"revoke\" => \"api#revoke_key\"\n              post \"undo-revoke\" => \"api#undo_revoke_key\"\n            end\n          end\n\n          resources :web_hooks\n          get 'web_hook_events/:id' => 'web_hooks#list_events', as: :web_hook_events\n          get 'web_hooks/:id/events' => 'web_hooks#list_events'\n          get 'web_hooks/:id/events/bulk' => 'web_hooks#bulk_events'\n          post 'web_hooks/:web_hook_id/events/:event_id/redeliver' => 'web_hooks#redeliver_event'\n          post 'web_hooks/:id/ping' => 'web_hooks#ping'\n        end\n      end\n\n      resources :backups, only: [:index, :create], constraints: AdminConstraint.new do\n        member do\n          get \"\" => \"backups#show\", constraints: { id: RouteFormat.backup }\n          put \"\" => \"backups#email\", constraints: { id: RouteFormat.backup }\n          delete \"\" => \"backups#destroy\", constraints: { id: RouteFormat.backup }\n          post \"restore\" => \"backups#restore\", constraints: { id: RouteFormat.backup }\n        end\n        collection do\n          # multipart uploads\n          post \"create-multipart\" => \"backups#create_multipart\", format: :json\n          post \"complete-multipart\" => \"backups#complete_multipart\", format: :json\n          post \"abort-multipart\" => \"backups#abort_multipart\", format: :json\n          post \"batch-presign-multipart-parts\" => \"backups#batch_presign_multipart_parts\", format: :json\n\n          get \"logs\" => \"backups#logs\"\n          get \"status\" => \"backups#status\"\n          delete \"cancel\" => \"backups#cancel\"\n          post \"rollback\" => \"backups#rollback\"\n          put \"readonly\" => \"backups#readonly\"\n          get \"upload\" => \"backups#check_backup_chunk\"\n          post \"upload\" => \"backups#upload_backup_chunk\"\n          get \"upload_url\" => \"backups#create_upload_url\"\n        end\n      end\n\n      resources :badges, constraints: AdminConstraint.new do\n        collection do\n          get \"/award/:badge_id\" => \"badges#award\"\n          post \"/award/:badge_id\" => \"badges#mass_award\"\n          get \"types\" => \"badges#badge_types\"\n          post \"badge_groupings\" => \"badges#save_badge_groupings\"\n          post \"preview\" => \"badges#preview\"\n        end\n      end\n\n    end # admin namespace\n\n    get \"email/unsubscribe/:key\" => \"email#unsubscribe\", as: \"email_unsubscribe\"\n    get \"email/unsubscribed\" => \"email#unsubscribed\", as: \"email_unsubscribed\"\n    post \"email/unsubscribe/:key\" => \"email#perform_unsubscribe\", as: \"email_perform_unsubscribe\"\n\n    get \"extra-locales/:bundle\" => \"extra_locales#show\"\n\n    resources :session, id: RouteFormat.username, only: [:create, :destroy, :become] do\n      if !Rails.env.production?\n        get 'become'\n      end\n\n      collection do\n        post \"forgot_password\"\n      end\n    end\n\n    get \"review\" => \"reviewables#index\" # For ember app\n    get \"review/:reviewable_id\" => \"reviewables#show\", constraints: { reviewable_id: /\\d+/ }\n    get \"review/:reviewable_id/explain\" => \"reviewables#explain\", constraints: { reviewable_id: /\\d+/ }\n    get \"review/count\" => \"reviewables#count\"\n    get \"review/topics\" => \"reviewables#topics\"\n    get \"review/settings\" => \"reviewables#settings\"\n    get \"review/user-menu-list\" => \"reviewables#user_menu_list\", format: :json\n    put \"review/settings\" => \"reviewables#settings\"\n    put \"review/:reviewable_id/perform/:action_id\" => \"reviewables#perform\", constraints: {\n      reviewable_id: /\\d+/,\n      action_id: /[a-z\\_]+/\n    }\n    put \"review/:reviewable_id\" => \"reviewables#update\", constraints: { reviewable_id: /\\d+/ }\n    delete \"review/:reviewable_id\" => \"reviewables#destroy\", constraints: { reviewable_id: /\\d+/ }\n\n    resources :reviewable_claimed_topics\n\n    get \"session/sso\" => \"session#sso\"\n    get \"session/sso_login\" => \"session#sso_login\"\n    get \"session/sso_provider\" => \"session#sso_provider\"\n    get \"session/current\" => \"session#current\"\n    get \"session/csrf\" => \"session#csrf\"\n    get \"session/hp\" => \"session#get_honeypot_value\"\n    get \"session/email-login/:token\" => \"session#email_login_info\"\n    post \"session/email-login/:token\" => \"session#email_login\"\n    get \"session/otp/:token\" => \"session#one_time_password\", constraints: { token: /[0-9a-f]+/ }\n    post \"session/otp/:token\" => \"session#one_time_password\", constraints: { token: /[0-9a-f]+/ }\n    get \"session/2fa\" => \"session#second_factor_auth_show\"\n    post \"session/2fa\" => \"session#second_factor_auth_perform\"\n    if Rails.env.test?\n      post \"session/2fa/test-action\" => \"session#test_second_factor_restricted_route\"\n    end\n    get \"session/scopes\" => \"session#scopes\"\n    get \"composer_messages\" => \"composer_messages#index\"\n    get \"composer_messages/user_not_seen_in_a_while\" => \"composer_messages#user_not_seen_in_a_while\"\n\n    resources :static\n    post \"login\" => \"static#enter\"\n    get \"login\" => \"static#show\", id: \"login\"\n    get \"password-reset\" => \"static#show\", id: \"password_reset\"\n    get \"faq\" => \"static#show\", id: \"faq\"\n    get \"tos\" => \"static#show\", id: \"tos\", as: 'tos'\n    get \"privacy\" => \"static#show\", id: \"privacy\", as: 'privacy'\n    get \"signup\" => \"static#show\", id: \"signup\"\n    get \"login-preferences\" => \"static#show\", id: \"login\"\n\n    %w{guidelines rules conduct}.each do |faq_alias|\n      get faq_alias => \"static#show\", id: \"guidelines\", as: faq_alias\n    end\n\n    get \"my/*path\", to: 'users#my_redirect'\n    get \".well-known/change-password\", to: redirect(relative_url_root + 'my/preferences/security', status: 302)\n\n    get \"user-cards\" => \"users#cards\", format: :json\n    get \"directory-columns\" => \"directory_columns#index\", format: :json\n    get \"edit-directory-columns\" => \"edit_directory_columns#index\", format: :json\n    put \"edit-directory-columns\" => \"edit_directory_columns#update\", format: :json\n\n    %w{users u}.each_with_index do |root_path, index|\n      get \"#{root_path}\" => \"users#index\", constraints: { format: 'html' }\n\n      resources :users, except: [:index, :new, :show, :update, :destroy], path: root_path do\n        collection do\n          get \"check_username\"\n          get \"check_email\"\n          get \"is_local_username\"\n        end\n      end\n\n      post \"#{root_path}/second_factors\" => \"users#list_second_factors\"\n      put \"#{root_path}/second_factor\" => \"users#update_second_factor\"\n\n      post \"#{root_path}/create_second_factor_security_key\" => \"users#create_second_factor_security_key\"\n      post \"#{root_path}/register_second_factor_security_key\" => \"users#register_second_factor_security_key\"\n      put \"#{root_path}/security_key\" => \"users#update_security_key\"\n      post \"#{root_path}/create_second_factor_totp\" => \"users#create_second_factor_totp\"\n      post \"#{root_path}/enable_second_factor_totp\" => \"users#enable_second_factor_totp\"\n      put \"#{root_path}/disable_second_factor\" => \"users#disable_second_factor\"\n\n      put \"#{root_path}/second_factors_backup\" => \"users#create_second_factor_backup\"\n\n      put \"#{root_path}/update-activation-email\" => \"users#update_activation_email\"\n      post \"#{root_path}/email-login\" => \"users#email_login\"\n      get \"#{root_path}/admin-login\" => \"users#admin_login\"\n      put \"#{root_path}/admin-login\" => \"users#admin_login\"\n      post \"#{root_path}/toggle-anon\" => \"users#toggle_anon\"\n      post \"#{root_path}/read-faq\" => \"users#read_faq\"\n      get \"#{root_path}/recent-searches\" => \"users#recent_searches\", constraints: { format: 'json' }\n      delete \"#{root_path}/recent-searches\" => \"users#reset_recent_searches\", constraints: { format: 'json' }\n      get \"#{root_path}/search/users\" => \"users#search_users\"\n\n      get({ \"#{root_path}/account-created/\" => \"users#account_created\" }.merge(index == 1 ? { as: :users_account_created } : { as: :old_account_created }))\n\n      get \"#{root_path}/account-created/resent\" => \"users#account_created\"\n      get \"#{root_path}/account-created/edit-email\" => \"users#account_created\"\n      get({ \"#{root_path}/password-reset/:token\" => \"users#password_reset_show\" }.merge(index == 1 ? { as: :password_reset_token } : {}))\n      get \"#{root_path}/confirm-email-token/:token\" => \"users#confirm_email_token\", constraints: { format: 'json' }\n      put \"#{root_path}/password-reset/:token\" => \"users#password_reset_update\"\n      get \"#{root_path}/activate-account/:token\" => \"users#activate_account\"\n      put({ \"#{root_path}/activate-account/:token\" => \"users#perform_account_activation\" }.merge(index == 1 ? { as: 'perform_activate_account' } : {}))\n\n      get \"#{root_path}/confirm-old-email/:token\" => \"users_email#show_confirm_old_email\"\n      put \"#{root_path}/confirm-old-email\" => \"users_email#confirm_old_email\"\n\n      get \"#{root_path}/confirm-new-email/:token\" => \"users_email#show_confirm_new_email\"\n      put \"#{root_path}/confirm-new-email\" => \"users_email#confirm_new_email\"\n\n      get({\n        \"#{root_path}/confirm-admin/:token\" => \"users#confirm_admin\",\n        constraints: { token: /[0-9a-f]+/ }\n      }.merge(index == 1 ? { as: 'confirm_admin' } : {}))\n      post \"#{root_path}/confirm-admin/:token\" => \"users#confirm_admin\", constraints: { token: /[0-9a-f]+/ }\n      get \"#{root_path}/:username/private-messages\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/private-messages/:filter\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/messages\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/messages/:filter\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/messages/group/:group_name\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username, group_name: RouteFormat.username }\n      get \"#{root_path}/:username/messages/group/:group_name/:filter\" => \"user_actions#private_messages\", constraints: { username: RouteFormat.username, group_name: RouteFormat.username }\n      get \"#{root_path}/:username/messages/tags/:tag_id\" => \"user_actions#private_messages\", constraints: StaffConstraint.new\n      get \"#{root_path}/:username.json\" => \"users#show\", constraints: { username: RouteFormat.username }, defaults: { format: :json }\n      get({ \"#{root_path}/:username\" => \"users#show\", constraints: { username: RouteFormat.username } }.merge(index == 1 ? { as: 'user' } : {}))\n      put \"#{root_path}/:username\" => \"users#update\", constraints: { username: RouteFormat.username }, defaults: { format: :json }\n      get \"#{root_path}/:username/emails\" => \"users#check_emails\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/sso-email\" => \"users#check_sso_email\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/sso-payload\" => \"users#check_sso_payload\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/email\" => \"users_email#index\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/account\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/security\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/profile\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/emails\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/primary-email\" => \"users#update_primary_email\", format: :json, constraints: { username: RouteFormat.username }\n      delete \"#{root_path}/:username/preferences/email\" => \"users#destroy_email\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/notifications\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/categories\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/users\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/tags\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/interface\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/sidebar\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/apps\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      post \"#{root_path}/:username/preferences/email\" => \"users_email#create\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/email\" => \"users_email#update\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/badge_title\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/badge_title\" => \"users#badge_title\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/username\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/username\" => \"users#username\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/second-factor\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/preferences/second-factor-backup\" => \"users#preferences\", constraints: { username: RouteFormat.username }\n      delete \"#{root_path}/:username/preferences/user_image\" => \"users#destroy_user_image\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/avatar/pick\" => \"users#pick_avatar\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/preferences/avatar/select\" => \"users#select_avatar\", constraints: { username: RouteFormat.username }\n      post \"#{root_path}/:username/preferences/revoke-account\" => \"users#revoke_account\", constraints: { username: RouteFormat.username }\n      post \"#{root_path}/:username/preferences/revoke-auth-token\" => \"users#revoke_auth_token\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/staff-info\" => \"users#staff_info\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/summary\" => \"users#summary\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/notification_level\" => \"users#notification_level\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/invited\" => \"users#invited\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/invited/:filter\" => \"users#invited\", constraints: { username: RouteFormat.username }\n      post \"#{root_path}/action/send_activation_email\" => \"users#send_activation_email\"\n      get \"#{root_path}/:username/summary\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity/topics.rss\" => \"list#user_topics_feed\", format: :rss, constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity.rss\" => \"posts#user_posts_feed\", format: :rss, constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity.json\" => \"posts#user_posts_feed\", format: :json, constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/activity/:filter\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/badges\" => \"users#badges\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/bookmarks\" => \"users#bookmarks\", constraints: { username: RouteFormat.username, format: /(json|ics)/ }\n      get \"#{root_path}/:username/user-menu-bookmarks\" => \"users#user_menu_bookmarks\", constraints: { username: RouteFormat.username, format: :json }\n      get \"#{root_path}/:username/user-menu-private-messages\" => \"users#user_menu_messages\", constraints: { username: RouteFormat.username, format: :json }\n      get \"#{root_path}/:username/notifications\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/notifications/:filter\" => \"users#show\", constraints: { username: RouteFormat.username }\n      delete \"#{root_path}/:username\" => \"users#destroy\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/by-external/:external_id\" => \"users#show\", constraints: { external_id: /[^\\/]+/ }\n      get \"#{root_path}/by-external/:external_provider/:external_id\" => \"users#show\", constraints: { external_id: /[^\\/]+/ }\n      get \"#{root_path}/:username/flagged-posts\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/deleted-posts\" => \"users#show\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/topic-tracking-state\" => \"users#topic_tracking_state\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/private-message-topic-tracking-state\" => \"users#private_message_topic_tracking_state\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/profile-hidden\" => \"users#profile_hidden\"\n      put \"#{root_path}/:username/feature-topic\" => \"users#feature_topic\", constraints: { username: RouteFormat.username }\n      put \"#{root_path}/:username/clear-featured-topic\" => \"users#clear_featured_topic\", constraints: { username: RouteFormat.username }\n      get \"#{root_path}/:username/card.json\" => \"users#show_card\", format: :json, constraints: { username: RouteFormat.username }\n    end\n\n    get \"user-badges/:username.json\" => \"user_badges#username\", constraints: { username: RouteFormat.username }, defaults: { format: :json }\n    get \"user-badges/:username\" => \"user_badges#username\", constraints: { username: RouteFormat.username }\n\n    post \"user_avatar/:username/refresh_gravatar\" => \"user_avatars#refresh_gravatar\", constraints: { username: RouteFormat.username }\n    get \"letter_avatar/:username/:size/:version.png\" => \"user_avatars#show_letter\", constraints: { hostname: /[\\w\\.-]+/, size: /\\d+/, username: RouteFormat.username, format: :png }\n    get \"user_avatar/:hostname/:username/:size/:version.png\" => \"user_avatars#show\", constraints: { hostname: /[\\w\\.-]+/, size: /\\d+/, username: RouteFormat.username, format: :png }\n\n    get \"letter_avatar_proxy/:version/letter/:letter/:color/:size.png\" => \"user_avatars#show_proxy_letter\", constraints: { format: :png }\n\n    get \"svg-sprite/:hostname/svg-:theme_id-:version.js\" => \"svg_sprite#show\", constraints: { hostname: /[\\w\\.-]+/, version: /\\h{40}/, theme_id: /([0-9]+)?/, format: :js }\n    get \"svg-sprite/search/:keyword\" => \"svg_sprite#search\", format: false, constraints: { keyword: /[-a-z0-9\\s\\%]+/ }\n    get \"svg-sprite/picker-search\" => \"svg_sprite#icon_picker_search\", defaults: { format: :json }\n    get \"svg-sprite/:hostname/icon(/:color)/:name.svg\" => \"svg_sprite#svg_icon\", constraints: { hostname: /[\\w\\.-]+/, name: /[-a-z0-9\\s\\%]+/, color: /(\\h{3}{1,2})/, format: :svg }\n\n    get \"highlight-js/:hostname/:version.js\" => \"highlight_js#show\", constraints: { hostname: /[\\w\\.-]+/, format: :js }\n\n    get \"stylesheets/:name.css.map\" => \"stylesheets#show_source_map\", constraints: { name: /[-a-z0-9_]+/ }\n    get \"stylesheets/:name.css\" => \"stylesheets#show\", constraints: { name: /[-a-z0-9_]+/ }\n    get \"color-scheme-stylesheet/:id(/:theme_id)\" => \"stylesheets#color_scheme\", constraints: { format: :json }\n    get \"theme-javascripts/:digest.js\" => \"theme_javascripts#show\", constraints: { digest: /\\h{40}/ }\n    get \"theme-javascripts/tests/:theme_id-:digest.js\" => \"theme_javascripts#show_tests\"\n\n    post \"uploads/lookup-metadata\" => \"uploads#metadata\"\n    post \"uploads\" => \"uploads#create\"\n    post \"uploads/lookup-urls\" => \"uploads#lookup_urls\"\n\n    # direct to s3 uploads\n    post \"uploads/generate-presigned-put\" => \"uploads#generate_presigned_put\", format: :json\n    post \"uploads/complete-external-upload\" => \"uploads#complete_external_upload\", format: :json\n\n    # multipart uploads\n    post \"uploads/create-multipart\" => \"uploads#create_multipart\", format: :json\n    post \"uploads/complete-multipart\" => \"uploads#complete_multipart\", format: :json\n    post \"uploads/abort-multipart\" => \"uploads#abort_multipart\", format: :json\n    post \"uploads/batch-presign-multipart-parts\" => \"uploads#batch_presign_multipart_parts\", format: :json\n\n    # used to download original images\n    get \"uploads/:site/:sha(.:extension)\" => \"uploads#show\", constraints: { site: /\\w+/, sha: /\\h{40}/, extension: /[a-z0-9\\._]+/i }\n    get \"uploads/short-url/:base62(.:extension)\" => \"uploads#show_short\", constraints: { site: /\\w+/, base62: /[a-zA-Z0-9]+/, extension: /[a-zA-Z0-9\\._-]+/i }, as: :upload_short\n    # used to download attachments\n    get \"uploads/:site/original/:tree:sha(.:extension)\" => \"uploads#show\", constraints: { site: /\\w+/, tree: /([a-z0-9]+\\/)+/i, sha: /\\h{40}/, extension: /[a-z0-9\\._]+/i }\n    if Rails.env.test?\n      get \"uploads/:site/test_:index/original/:tree:sha(.:extension)\" => \"uploads#show\", constraints: { site: /\\w+/, index: /\\d+/, tree: /([a-z0-9]+\\/)+/i, sha: /\\h{40}/, extension: /[a-z0-9\\._]+/i }\n    end\n    # used to download attachments (old route)\n    get \"uploads/:site/:id/:sha\" => \"uploads#show\", constraints: { site: /\\w+/, id: /\\d+/, sha: /\\h{16}/, format: /.*/ }\n\n    # NOTE: secure-media-uploads is the old form, all new URLs generated for\n    # secure uploads will be secure-uploads, this is left in for backwards\n    # compat without needing to rebake all posts for each site.\n    get \"secure-media-uploads/*path(.:extension)\" => \"uploads#_show_secure_deprecated\", constraints: { extension: /[a-z0-9\\._]+/i }\n    get \"secure-uploads/*path(.:extension)\" => \"uploads#show_secure\", constraints: { extension: /[a-z0-9\\._]+/i }\n\n    get \"posts\" => \"posts#latest\", id: \"latest_posts\", constraints: { format: /(json|rss)/ }\n    get \"private-posts\" => \"posts#latest\", id: \"private_posts\", constraints: { format: /(json|rss)/ }\n    get \"posts/by_number/:topic_id/:post_number\" => \"posts#by_number\"\n    get \"posts/by-date/:topic_id/:date\" => \"posts#by_date\"\n    get \"posts/:id/reply-history\" => \"posts#reply_history\"\n    get \"posts/:id/reply-ids\"     => \"posts#reply_ids\"\n    get \"posts/:id/reply-ids/all\" => \"posts#all_reply_ids\"\n    get \"posts/:username/deleted\" => \"posts#deleted_posts\", constraints: { username: RouteFormat.username }\n    get \"posts/:username/flagged\" => \"posts#flagged_posts\", constraints: { username: RouteFormat.username }\n    get \"posts/:username/pending\" => \"posts#pending\", constraints: { username: RouteFormat.username }\n\n    %w{groups g}.each do |root_path|\n      resources :groups, id: RouteFormat.username, path: root_path do\n        get \"posts.rss\" => \"groups#posts_feed\", format: :rss\n        get \"mentions.rss\" => \"groups#mentions_feed\", format: :rss\n\n        get 'members'\n        get 'posts'\n        get 'mentions'\n        get 'counts'\n        get 'mentionable'\n        get 'messageable'\n        get 'logs' => 'groups#histories'\n        post 'test_email_settings'\n\n        collection do\n          get \"check-name\" => 'groups#check_name'\n          get 'custom/new' => 'groups#new', constraints: StaffConstraint.new\n          get \"search\" => \"groups#search\"\n        end\n\n        member do\n          %w{\n            activity\n            activity/:filter\n            requests\n            messages\n            messages/inbox\n            messages/archive\n            manage\n            manage/profile\n            manage/members\n            manage/membership\n            manage/interaction\n            manage/email\n            manage/categories\n            manage/tags\n            manage/logs\n          }.each do |path|\n            get path => 'groups#show'\n          end\n\n          get \"permissions\" => \"groups#permissions\"\n          put \"members\" => \"groups#add_members\"\n          put \"join\" => \"groups#join\"\n          delete \"members\" => \"groups#remove_member\"\n          delete \"leave\" => \"groups#leave\"\n          post \"request_membership\" => \"groups#request_membership\"\n          put \"handle_membership_request\" => \"groups#handle_membership_request\"\n          post \"notifications\" => \"groups#set_notifications\"\n        end\n      end\n    end\n\n    resources :associated_groups, only: %i[index], constraints: AdminConstraint.new\n\n    # aliases so old API code works\n    delete \"admin/groups/:id/members\" => \"groups#remove_member\", constraints: AdminConstraint.new\n    put \"admin/groups/:id/members\" => \"groups#add_members\", constraints: AdminConstraint.new\n\n    resources :posts do\n      delete \"bookmark\", to: \"posts#destroy_bookmark\"\n      put \"wiki\"\n      put \"post_type\"\n      put \"rebake\"\n      put \"unhide\"\n      put \"locked\"\n      put \"notice\"\n      get \"replies\"\n      get \"revisions/latest\" => \"posts#latest_revision\"\n      get \"revisions/:revision\" => \"posts#revisions\", constraints: { revision: /\\d+/ }\n      put \"revisions/:revision/hide\" => \"posts#hide_revision\", constraints: { revision: /\\d+/ }\n      put \"revisions/:revision/show\" => \"posts#show_revision\", constraints: { revision: /\\d+/ }\n      put \"revisions/:revision/revert\" => \"posts#revert\", constraints: { revision: /\\d+/ }\n      put \"recover\"\n      collection do\n        delete \"destroy_many\"\n        put \"merge_posts\"\n      end\n    end\n\n    resources :bookmarks, only: %i[create destroy update] do\n      put \"toggle_pin\"\n    end\n\n    resources :notifications, except: :show do\n      collection do\n        put 'mark-read' => 'notifications#mark_read'\n        # creating an alias cause the api was extended to mark a single notification\n        # this allows us to cleanly target it\n        put 'read' => 'notifications#mark_read'\n      end\n    end\n\n    match \"/auth/failure\", to: \"users/omniauth_callbacks#failure\", via: [:get, :post]\n    get \"/auth/:provider\", to: \"users/omniauth_callbacks#confirm_request\"\n    match \"/auth/:provider/callback\", to: \"users/omniauth_callbacks#complete\", via: [:get, :post]\n    get \"/associate/:token\", to: \"users/associate_accounts#connect_info\", constraints: { token: /\\h{32}/ }\n    post \"/associate/:token\", to: \"users/associate_accounts#connect\", constraints: { token: /\\h{32}/ }\n\n    resources :clicks do\n      collection do\n        post \"track\"\n      end\n    end\n\n    get \"excerpt\" => \"excerpt#show\"\n\n    resources :post_action_users\n    resources :post_readers, only: %i[index]\n    resources :post_actions do\n      collection do\n        get \"users\"\n        post \"defer_flags\"\n      end\n    end\n    resources :user_actions\n\n    resources :badges, only: [:index]\n    get \"/badges/:id(/:slug)\" => \"badges#show\", constraints: { format: /(json|html|rss)/ }\n    resources :user_badges, only: [:index, :create, :destroy] do\n      put \"toggle_favorite\" => \"user_badges#toggle_favorite\", constraints: { format: :json }\n    end\n\n    get '/c', to: redirect(relative_url_root + 'categories')\n\n    resources :categories, except: [:show, :new, :edit]\n    post \"categories/reorder\" => \"categories#reorder\"\n\n    scope path: 'category/:category_id' do\n      post \"/move\" => \"categories#move\"\n      post \"/notifications\" => \"categories#set_notifications\"\n      put \"/slug\" => \"categories#update_slug\"\n    end\n\n    get \"category/*path\" => \"categories#redirect\"\n\n    get \"categories_and_latest\" => \"categories#categories_and_latest\"\n    get \"categories_and_top\" => \"categories#categories_and_top\"\n\n    get \"c/:id/show\" => \"categories#show\"\n    get \"c/:id/visible_groups\" => \"categories#visible_groups\"\n\n    get \"c/*category_slug/find_by_slug\" => \"categories#find_by_slug\"\n    get \"c/*category_slug/edit(/:tab)\" => \"categories#find_by_slug\", constraints: { format: 'html' }\n    get \"/new-category\" => \"categories#show\", constraints: { format: 'html' }\n\n    get \"c/*category_slug_path_with_id.rss\" => \"list#category_feed\", format: :rss\n    scope path: 'c/*category_slug_path_with_id' do\n      get \"/none\" => \"list#category_none_latest\"\n\n      TopTopic.periods.each do |period|\n        get \"/none/l/top/#{period}\", to: redirect(\"/none/l/top?period=#{period}\", status: 301)\n        get \"/l/top/#{period}\", to: redirect(\"/l/top?period=#{period}\", status: 301)\n      end\n\n      Discourse.filters.each do |filter|\n        get \"/none/l/#{filter}\" => \"list#category_none_#{filter}\", as: \"category_none_#{filter}\"\n        get \"/l/#{filter}\" => \"list#category_#{filter}\", as: \"category_#{filter}\"\n      end\n\n      get \"/all\" => \"list#category_default\", as: \"category_all\", constraints: { format: 'html' }\n      get \"/\" => \"list#category_default\", as: \"category_default\"\n    end\n\n    get \"hashtags\" => \"hashtags#show\"\n\n    TopTopic.periods.each do |period|\n      get \"top/#{period}.rss\", to: redirect(\"top.rss?period=#{period}\", status: 301)\n      get \"top/#{period}.json\", to: redirect(\"top.json?period=#{period}\", status: 301)\n      get \"top/#{period}\", to: redirect(\"top?period=#{period}\", status: 301)\n    end\n\n    Discourse.anonymous_filters.each do |filter|\n      get \"#{filter}.rss\" => \"list##{filter}_feed\", format: :rss\n    end\n\n    Discourse.filters.each do |filter|\n      get \"#{filter}\" => \"list##{filter}\"\n    end\n\n    get \"search/query\" => \"search#query\"\n    get \"search\" => \"search#show\"\n    post \"search/click\" => \"search#click\"\n\n    # Topics resource\n    get \"t/:id\" => \"topics#show\"\n    put \"t/:topic_id\" => \"topics#update\", constraints: { topic_id: /\\d+/ }\n    delete \"t/:id\" => \"topics#destroy\"\n    put \"t/:id/archive-message\" => \"topics#archive_message\"\n    put \"t/:id/move-to-inbox\" => \"topics#move_to_inbox\"\n    put \"t/:id/convert-topic/:type\" => \"topics#convert_topic\"\n    put \"t/:id/publish\" => \"topics#publish\"\n    put \"t/:id/shared-draft\" => \"topics#update_shared_draft\"\n    put \"t/:id/reset-bump-date\" => \"topics#reset_bump_date\"\n    put \"topics/bulk\"\n    put \"topics/reset-new\" => 'topics#reset_new'\n    put \"topics/pm-reset-new\" => 'topics#private_message_reset_new'\n    post \"topics/timings\"\n\n    get 'topics/similar_to' => 'similar_topics#index'\n    resources :similar_topics\n\n    get \"topics/feature_stats\"\n\n    scope \"/topics\", username: RouteFormat.username do\n      get \"created-by/:username\" => \"list#topics_by\", as: \"topics_by\", defaults: { format: :json }\n      get \"private-messages/:username\" => \"list#private_messages\", as: \"topics_private_messages\", defaults: { format: :json }\n      get \"private-messages-sent/:username\" => \"list#private_messages_sent\", as: \"topics_private_messages_sent\", defaults: { format: :json }\n      get \"private-messages-archive/:username\" => \"list#private_messages_archive\", as: \"topics_private_messages_archive\", defaults: { format: :json }\n      get \"private-messages-unread/:username\" => \"list#private_messages_unread\", as: \"topics_private_messages_unread\", defaults: { format: :json }\n      get \"private-messages-tags/:username/:tag_id.json\" => \"list#private_messages_tag\", as: \"topics_private_messages_tag\", defaults: { format: :json }\n      get \"private-messages-new/:username\" => \"list#private_messages_new\", as: \"topics_private_messages_new\", defaults: { format: :json }\n      get \"private-messages-warnings/:username\" => \"list#private_messages_warnings\", as: \"topics_private_messages_warnings\", defaults: { format: :json }\n      get \"groups/:group_name\" => \"list#group_topics\", as: \"group_topics\", group_name: RouteFormat.username\n\n      scope \"/private-messages-group/:username\", group_name: RouteFormat.username do\n        get \":group_name.json\" => \"list#private_messages_group\", as: \"topics_private_messages_group\"\n        get \":group_name/archive.json\" => \"list#private_messages_group_archive\", as: \"topics_private_messages_group_archive\"\n        get \":group_name/new.json\" => \"list#private_messages_group_new\", as: \"topics_private_messages_group_new\"\n        get \":group_name/unread.json\" => \"list#private_messages_group_unread\", as: \"topics_private_messages_group_unread\"\n      end\n    end\n\n    get 'embed/topics' => 'embed#topics'\n    get 'embed/comments' => 'embed#comments'\n    get 'embed/count' => 'embed#count'\n    get 'embed/info' => 'embed#info'\n\n    get \"new-topic\" => \"list#latest\"\n    get \"new-message\" => \"list#latest\"\n\n    # Topic routes\n    get \"t/id_for/:slug\" => \"topics#id_for_slug\"\n    get \"t/external_id/:external_id\" => \"topics#show_by_external_id\", format: :json, constraints: { external_id: /[\\w-]+/ }\n    get \"t/:slug/:topic_id/print\" => \"topics#show\", format: :html, print: 'true', constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id/wordpress\" => \"topics#wordpress\", constraints: { topic_id: /\\d+/ }\n    get \"t/:topic_id/wordpress\" => \"topics#wordpress\", constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id/moderator-liked\" => \"topics#moderator_liked\", constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id/summary\" => \"topics#show\", defaults: { summary: true }, constraints: { topic_id: /\\d+/ }\n    get \"t/:topic_id/summary\" => \"topics#show\", constraints: { topic_id: /\\d+/ }\n    put \"t/:slug/:topic_id\" => \"topics#update\", constraints: { topic_id: /\\d+/ }\n    put \"t/:slug/:topic_id/star\" => \"topics#star\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/star\" => \"topics#star\", constraints: { topic_id: /\\d+/ }\n    put \"t/:slug/:topic_id/status\" => \"topics#status\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/status\" => \"topics#status\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/clear-pin\" => \"topics#clear_pin\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/re-pin\" => \"topics#re_pin\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/mute\" => \"topics#mute\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/unmute\" => \"topics#unmute\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/timer\" => \"topics#timer\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/make-banner\" => \"topics#make_banner\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/remove-banner\" => \"topics#remove_banner\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/remove-allowed-user\" => \"topics#remove_allowed_user\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/remove-allowed-group\" => \"topics#remove_allowed_group\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/recover\" => \"topics#recover\", constraints: { topic_id: /\\d+/ }\n    get \"t/:topic_id/:post_number\" => \"topics#show\", constraints: { topic_id: /\\d+/, post_number: /\\d+/ }\n    get \"t/:topic_id/last\" => \"topics#show\", post_number: 99999999, constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id.rss\" => \"topics#feed\", format: :rss, constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id\" => \"topics#show\", constraints: { topic_id: /\\d+/ }\n    get \"t/:slug/:topic_id/:post_number\" => \"topics#show\", constraints: { topic_id: /\\d+/, post_number: /\\d+/ }\n    get \"t/:slug/:topic_id/last\" => \"topics#show\", post_number: 99999999, constraints: { topic_id: /\\d+/ }\n    get \"t/:topic_id/posts\" => \"topics#posts\", constraints: { topic_id: /\\d+/ }, format: :json\n    get \"t/:topic_id/post_ids\" => \"topics#post_ids\", constraints: { topic_id: /\\d+/ }, format: :json\n    get \"t/:topic_id/excerpts\" => \"topics#excerpts\", constraints: { topic_id: /\\d+/ }, format: :json\n    post \"t/:topic_id/timings\" => \"topics#timings\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/invite\" => \"topics#invite\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/invite-group\" => \"topics#invite_group\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/move-posts\" => \"topics#move_posts\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/merge-topic\" => \"topics#merge_topic\", constraints: { topic_id: /\\d+/ }\n    post \"t/:topic_id/change-owner\" => \"topics#change_post_owners\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/change-timestamp\" => \"topics#change_timestamps\", constraints: { topic_id: /\\d+/ }\n    delete \"t/:topic_id/timings\" => \"topics#destroy_timings\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/bookmark\" => \"topics#bookmark\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/remove_bookmarks\" => \"topics#remove_bookmarks\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/tags\" => \"topics#update_tags\", constraints: { topic_id: /\\d+/ }\n    put \"t/:topic_id/slow_mode\" => \"topics#set_slow_mode\", constraints: { topic_id: /\\d+/ }\n\n    post \"t/:topic_id/notifications\" => \"topics#set_notifications\" , constraints: { topic_id: /\\d+/ }\n\n    get \"p/:post_id(/:user_id)\" => \"posts#short_link\"\n    get \"/posts/:id/cooked\" => \"posts#cooked\"\n    get \"/posts/:id/expand-embed\" => \"posts#expand_embed\"\n    get \"/posts/:id/raw\" => \"posts#markdown_id\"\n    get \"/posts/:id/raw-email\" => \"posts#raw_email\"\n    get \"raw/:topic_id(/:post_number)\" => \"posts#markdown_num\"\n\n    resources :invites, except: [:show]\n    get \"/invites/:id\" => \"invites#show\", constraints: { format: :html }\n    put \"/invites/:id\" => \"invites#update\"\n\n    post \"invites/upload_csv\" => \"invites#upload_csv\"\n    post \"invites/destroy-all-expired\" => \"invites#destroy_all_expired\"\n    post \"invites/reinvite\" => \"invites#resend_invite\"\n    post \"invites/reinvite-all\" => \"invites#resend_all_invites\"\n    delete \"invites\" => \"invites#destroy\"\n    put \"invites/show/:id\" => \"invites#perform_accept_invitation\", as: 'perform_accept_invite'\n    get \"invites/retrieve\" => \"invites#retrieve\"\n\n    resources :export_csv do\n      collection do\n        post \"export_entity\" => \"export_csv#export_entity\"\n      end\n    end\n\n    get \"onebox\" => \"onebox#show\"\n    get \"inline-onebox\" => \"inline_onebox#show\"\n\n    get \"exception\" => \"list#latest\"\n\n    get \"message-bus/poll\" => \"message_bus#poll\"\n\n    resources :drafts, only: [:index, :create, :show, :destroy]\n\n    get \"/service-worker.js\" => \"static#service_worker_asset\", format: :js\n    if service_worker_asset = Rails.application.assets_manifest.assets['service-worker.js']\n      # https://developers.google.com/web/fundamentals/codelabs/debugging-service-workers/\n      # Normally the browser will wait until a user closes all tabs that contain the\n      # current site before updating to a new Service Worker.\n      # Support the old Service Worker path to avoid routing error filling up the\n      # logs.\n      get service_worker_asset => \"static#service_worker_asset\", format: :js\n    end\n\n    get \"cdn_asset/:site/*path\" => \"static#cdn_asset\", format: false, constraints: { format: /.*/ }\n    get \"brotli_asset/*path\" => \"static#brotli_asset\", format: false, constraints: { format: /.*/ }\n\n    get \"favicon/proxied\" => \"static#favicon\", format: false\n\n    get \"robots.txt\" => \"robots_txt#index\"\n    get \"robots-builder.json\" => \"robots_txt#builder\"\n    get \"offline.html\" => \"offline#index\"\n    get \"manifest.webmanifest\" => \"metadata#manifest\", as: :manifest\n    get \"manifest.json\" => \"metadata#manifest\"\n    get \".well-known/assetlinks.json\" => \"metadata#app_association_android\"\n    get \"apple-app-site-association\" => \"metadata#app_association_ios\", format: false\n    get \"opensearch\" => \"metadata#opensearch\", constraints: { format: :xml }\n\n    scope '/tag/:tag_id' do\n      constraints format: :json do\n        get '/' => 'tags#show', as: 'tag_show'\n        get '/info' => 'tags#info'\n        get '/notifications' => 'tags#notifications'\n        put '/notifications' => 'tags#update_notifications'\n        put '/' => 'tags#update'\n        delete '/' => 'tags#destroy'\n        post '/synonyms' => 'tags#create_synonyms'\n        delete '/synonyms/:synonym_id' => 'tags#destroy_synonym'\n\n        Discourse.filters.each do |filter|\n          get \"/l/#{filter}\" => \"tags#show_#{filter}\", as: \"tag_show_#{filter}\"\n        end\n      end\n\n      constraints format: :rss do\n        get '/' => 'tags#tag_feed'\n      end\n    end\n\n    scope \"/tags\" do\n      get '/' => 'tags#index'\n      get '/filter/list' => 'tags#index'\n      get '/filter/search' => 'tags#search'\n      get '/personal_messages/:username' => 'tags#personal_messages', constraints: { username: RouteFormat.username }\n      post '/upload' => 'tags#upload'\n      get '/unused' => 'tags#list_unused'\n      delete '/unused' => 'tags#destroy_unused'\n\n      constraints(tag_id: /[^\\/]+?/, format: /json|rss/) do\n        scope path: '/c/*category_slug_path_with_id' do\n          Discourse.filters.each do |filter|\n            get \"/none/:tag_id/l/#{filter}\" => \"tags#show_#{filter}\", as: \"tag_category_none_show_#{filter}\", defaults: { no_subcategories: true }\n            get \"/all/:tag_id/l/#{filter}\" => \"tags#show_#{filter}\", as: \"tag_category_all_show_#{filter}\", defaults: { no_subcategories: false }\n          end\n\n          get '/none/:tag_id' => 'tags#show', as: 'tag_category_none_show', defaults: { no_subcategories: true }\n          get '/all/:tag_id' => 'tags#show', as: 'tag_category_all_show', defaults: { no_subcategories: false }\n\n          Discourse.filters.each do |filter|\n            get \"/:tag_id/l/#{filter}\" => \"tags#show_#{filter}\", as: \"tag_category_show_#{filter}\"\n          end\n\n          get '/:tag_id' => 'tags#show', as: 'tag_category_show'\n        end\n\n        get '/intersection/:tag_id/*additional_tag_ids' => 'tags#show', as: 'tag_intersection'\n      end\n\n      get '*tag_id', to: redirect(relative_url_root + 'tag/%{tag_id}')\n    end\n\n    resources :tag_groups, constraints: StaffConstraint.new, except: [:edit]\n    get '/tag_groups/filter/search' => 'tag_groups#search', format: :json\n\n    Discourse.filters.each do |filter|\n      root to: \"list##{filter}\", constraints: HomePageConstraint.new(\"#{filter}\"), as: \"list_#{filter}\"\n    end\n    # special case for categories\n    root to: \"categories#index\", constraints: HomePageConstraint.new(\"categories\"), as: \"categories_index\"\n\n    root to: 'finish_installation#index', constraints: HomePageConstraint.new(\"finish_installation\"), as: 'installation_redirect'\n\n    get \"/user-api-key/new\" => \"user_api_keys#new\"\n    post \"/user-api-key\" => \"user_api_keys#create\"\n    post \"/user-api-key/revoke\" => \"user_api_keys#revoke\"\n    post \"/user-api-key/undo-revoke\" => \"user_api_keys#undo_revoke\"\n    get \"/user-api-key/otp\" => \"user_api_keys#otp\"\n    post \"/user-api-key/otp\" => \"user_api_keys#create_otp\"\n\n    get \"/safe-mode\" => \"safe_mode#index\"\n    post \"/safe-mode\" => \"safe_mode#enter\", as: \"safe_mode_enter\"\n\n    get \"/theme-qunit\" => \"qunit#theme\"\n\n    post \"/push_notifications/subscribe\" => \"push_notification#subscribe\"\n    post \"/push_notifications/unsubscribe\" => \"push_notification#unsubscribe\"\n\n    resources :csp_reports, only: [:create]\n\n    get \"/permalink-check\", to: 'permalinks#check'\n\n    post \"/do-not-disturb\" => \"do_not_disturb#create\"\n    delete \"/do-not-disturb\" => \"do_not_disturb#destroy\"\n\n    post \"/presence/update\" => \"presence#update\"\n    get \"/presence/get\" => \"presence#get\"\n\n    put \"user-status\" => \"user_status#set\"\n    delete \"user-status\" => \"user_status#clear\"\n\n    get \"*url\", to: 'permalinks#show', constraints: PermalinkConstraint.new\n  end\nend\n", "# frozen_string_literal: true\n\nRSpec.describe Admin::ThemesController do\n  fab!(:admin) { Fabricate(:admin) }\n\n  it \"is a subclass of AdminController\" do\n    expect(Admin::UsersController < Admin::AdminController).to eq(true)\n  end\n\n  before do\n    sign_in(admin)\n  end\n\n  describe '#generate_key_pair' do\n    it 'can generate key pairs' do\n      post \"/admin/themes/generate_key_pair.json\"\n      expect(response.status).to eq(200)\n      json = response.parsed_body\n      expect(json[\"private_key\"]).to eq(nil)\n      expect(json[\"public_key\"]).to include(\"ssh-rsa \")\n      expect(Discourse.redis.get(\"ssh_key_#{json[\"public_key\"]}\")).not_to eq(nil)\n    end\n  end\n\n  describe '#upload_asset' do\n    let(:file) { file_from_fixtures(\"fake.woff2\", \"woff2\") }\n    let(:filename) { File.basename(file) }\n    let(:upload) do\n      Rack::Test::UploadedFile.new(file)\n    end\n\n    it 'can create a theme upload' do\n      post \"/admin/themes/upload_asset.json\", params: { file: upload }\n      expect(response.status).to eq(201)\n\n      upload = Upload.find_by(original_filename: filename)\n\n      expect(upload.id).not_to be_nil\n      expect(response.parsed_body[\"upload_id\"]).to eq(upload.id)\n    end\n\n    context \"when trying to upload an existing file\" do\n      let(:uploaded_file) { Upload.find_by(original_filename: filename) }\n      let(:response_json) { response.parsed_body }\n\n      before do\n        post \"/admin/themes/upload_asset.json\", params: { file: upload }\n        expect(response.status).to eq(201)\n      end\n\n      it \"reuses the original upload\" do\n        expect(response.status).to eq(201)\n        expect(response_json[\"upload_id\"]).to eq(uploaded_file.id)\n      end\n    end\n  end\n\n  describe '#export' do\n    it \"exports correctly\" do\n      theme = Fabricate(:theme, name: \"Awesome Theme\")\n      theme.set_field(target: :common, name: :scss, value: '.body{color: black;}')\n      theme.set_field(target: :desktop, name: :after_header, value: '<b>test</b>')\n      theme.set_field(target: :extra_js, name: \"discourse/controller/blah\", value: 'console.log(\"test\");')\n      theme.save!\n\n      get \"/admin/customize/themes/#{theme.id}/export\"\n      expect(response.status).to eq(200)\n\n      # Save the output in a temp file (automatically cleaned up)\n      file = Tempfile.new('archive.zip')\n      file.write(response.body)\n      file.rewind\n      uploaded_file = Rack::Test::UploadedFile.new(file.path, \"application/zip\")\n\n      # Now import it again\n      expect do\n        post \"/admin/themes/import.json\", params: { theme: uploaded_file }\n        expect(response.status).to eq(201)\n      end.to change { Theme.count }.by (1)\n\n      json = response.parsed_body\n\n      expect(json[\"theme\"][\"name\"]).to eq(\"Awesome Theme\")\n      expect(json[\"theme\"][\"theme_fields\"].length).to eq(3)\n    end\n  end\n\n  describe '#import' do\n\n    let(:theme_json_file) do\n      Rack::Test::UploadedFile.new(file_from_fixtures(\"sam-s-simple-theme.dcstyle.json\", \"json\"), \"application/json\")\n    end\n\n    let(:theme_archive) do\n      Rack::Test::UploadedFile.new(file_from_fixtures(\"discourse-test-theme.zip\", \"themes\"), \"application/zip\")\n    end\n\n    let(:image) do\n      file_from_fixtures(\"logo.png\")\n    end\n\n    context 'when theme allowlist mode is enabled' do\n      before do\n        global_setting :allowed_theme_repos, \"https://github.com/discourse/discourse-brand-header.git\"\n      end\n\n      it \"allows allowlisted imports\" do\n        expect(Theme.allowed_remote_theme_ids.length).to eq(0)\n\n        post \"/admin/themes/import.json\", params: {\n          remote: '    https://github.com/discourse/discourse-brand-header.git       '\n        }\n\n        expect(Theme.allowed_remote_theme_ids.length).to eq(1)\n        expect(response.status).to eq(201)\n      end\n\n      it \"prevents adding disallowed themes\" do\n        RemoteTheme.stubs(:import_theme)\n        remote = '    https://bad.com/discourse/discourse-brand-header.git       '\n\n        post \"/admin/themes/import.json\", params: { remote: remote }\n\n        expect(response.status).to eq(403)\n        expect(response.parsed_body['errors']).to include(I18n.t(\"themes.import_error.not_allowed_theme\", { repo: remote.strip }))\n      end\n\n      it \"bans json file import\" do\n        post \"/admin/themes/import.json\", params: { theme: theme_json_file }\n        expect(response.status).to eq(403)\n      end\n    end\n\n    it 'can import a theme from Git' do\n      RemoteTheme.stubs(:import_theme)\n      post \"/admin/themes/import.json\", params: {\n        remote: '    https://github.com/discourse/discourse-brand-header.git       '\n      }\n\n      expect(response.status).to eq(201)\n    end\n\n    it 'can lookup a private key by public key' do\n      Discourse.redis.setex('ssh_key_abcdef', 1.hour, 'rsa private key')\n\n      ThemeStore::GitImporter.any_instance.stubs(:import!)\n      RemoteTheme.stubs(:extract_theme_info).returns(\n        'name' => 'discourse-brand-header',\n        'component' => true\n      )\n      RemoteTheme.any_instance.stubs(:update_from_remote)\n\n      post '/admin/themes/import.json', params: {\n        remote: '    https://github.com/discourse/discourse-brand-header.git       ',\n        public_key: 'abcdef',\n      }\n\n      expect(RemoteTheme.last.private_key).to eq('rsa private key')\n\n      expect(response.status).to eq(201)\n    end\n\n    it 'should not be able to import a theme by moderator' do\n      sign_in(Fabricate(:moderator))\n\n      post \"/admin/themes/import.json\", params: { theme: theme_json_file }\n      expect(response.status).to eq(404)\n    end\n\n    it 'imports a theme' do\n      post \"/admin/themes/import.json\", params: { theme: theme_json_file }\n      expect(response.status).to eq(201)\n\n      json = response.parsed_body\n\n      expect(json[\"theme\"][\"name\"]).to eq(\"Sam's Simple Theme\")\n      expect(json[\"theme\"][\"theme_fields\"].length).to eq(2)\n      expect(json[\"theme\"][\"auto_update\"]).to eq(false)\n      expect(UserHistory.where(action: UserHistory.actions[:change_theme]).count).to eq(1)\n    end\n\n    it 'can fail if theme is not accessible' do\n      post \"/admin/themes/import.json\", params: {\n        remote: 'git@github.com:discourse/discourse-inexistent-theme.git'\n      }\n\n      expect(response.status).to eq(422)\n      expect(response.parsed_body[\"errors\"]).to contain_exactly(I18n.t(\"themes.import_error.git\"))\n    end\n\n    it 'can force install theme' do\n      post \"/admin/themes/import.json\", params: {\n        remote: 'git@github.com:discourse/discourse-inexistent-theme.git',\n        force: true\n      }\n\n      expect(response.status).to eq(201)\n      expect(response.parsed_body[\"theme\"][\"name\"]).to eq(\"discourse-inexistent-theme\")\n    end\n\n    it 'fails to import with an error if uploads are not allowed' do\n      SiteSetting.theme_authorized_extensions = \"nothing\"\n\n      expect do\n        post \"/admin/themes/import.json\", params: { theme: theme_archive }\n      end.to change { Theme.count }.by (0)\n\n      expect(response.status).to eq(422)\n    end\n\n    it 'imports a theme from an archive' do\n      _existing_theme = Fabricate(:theme, name: \"Header Icons\")\n\n      expect do\n        post \"/admin/themes/import.json\", params: { theme: theme_archive }\n      end.to change { Theme.count }.by (1)\n      expect(response.status).to eq(201)\n      json = response.parsed_body\n\n      expect(json[\"theme\"][\"name\"]).to eq(\"Header Icons\")\n      expect(json[\"theme\"][\"theme_fields\"].length).to eq(5)\n      expect(json[\"theme\"][\"auto_update\"]).to eq(false)\n      expect(UserHistory.where(action: UserHistory.actions[:change_theme]).count).to eq(1)\n    end\n\n    it 'updates an existing theme from an archive by name' do\n      # Old theme CLI method, remove Jan 2020\n      _existing_theme = Fabricate(:theme, name: \"Header Icons\")\n\n      expect do\n        post \"/admin/themes/import.json\", params: { bundle: theme_archive }\n      end.to change { Theme.count }.by (0)\n      expect(response.status).to eq(201)\n      json = response.parsed_body\n\n      expect(json[\"theme\"][\"name\"]).to eq(\"Header Icons\")\n      expect(json[\"theme\"][\"theme_fields\"].length).to eq(5)\n      expect(UserHistory.where(action: UserHistory.actions[:change_theme]).count).to eq(1)\n    end\n\n    it 'updates an existing theme from an archive by id' do\n      # Used by theme CLI\n      _existing_theme = Fabricate(:theme, name: \"Header Icons\")\n      other_existing_theme = Fabricate(:theme, name: \"Some other name\")\n\n      messages = MessageBus.track_publish do\n        expect do\n          post \"/admin/themes/import.json\", params: { bundle: theme_archive, theme_id: other_existing_theme.id }\n        end.to change { Theme.count }.by (0)\n      end\n      expect(response.status).to eq(201)\n      json = response.parsed_body\n\n      # Ensure only one refresh message is sent.\n      # More than 1 is wasteful, and can trigger unusual race conditions in the client\n      # If this test fails, it probably means `theme.save` is being called twice - check any 'autosave' relations\n      file_change_messages = messages.filter { |m| m[:channel] == \"/file-change\" }\n      expect(file_change_messages.count).to eq(1)\n\n      expect(json[\"theme\"][\"name\"]).to eq(\"Some other name\")\n      expect(json[\"theme\"][\"id\"]).to eq(other_existing_theme.id)\n      expect(json[\"theme\"][\"theme_fields\"].length).to eq(5)\n      expect(UserHistory.where(action: UserHistory.actions[:change_theme]).count).to eq(1)\n    end\n\n    it 'creates a new theme when id specified as nil' do\n      # Used by theme CLI\n      existing_theme = Fabricate(:theme, name: \"Header Icons\")\n\n      expect do\n        post \"/admin/themes/import.json\", params: { bundle: theme_archive, theme_id: nil }\n      end.to change { Theme.count }.by (1)\n      expect(response.status).to eq(201)\n      json = response.parsed_body\n\n      expect(json[\"theme\"][\"name\"]).to eq(\"Header Icons\")\n      expect(json[\"theme\"][\"id\"]).not_to eq(existing_theme.id)\n      expect(json[\"theme\"][\"theme_fields\"].length).to eq(5)\n      expect(json[\"theme\"][\"auto_update\"]).to eq(false)\n      expect(UserHistory.where(action: UserHistory.actions[:change_theme]).count).to eq(1)\n    end\n  end\n\n  describe '#index' do\n    it 'correctly returns themes' do\n      ColorScheme.destroy_all\n      Theme.destroy_all\n\n      theme = Fabricate(:theme)\n      theme.set_field(target: :common, name: :scss, value: '.body{color: black;}')\n      theme.set_field(target: :desktop, name: :after_header, value: '<b>test</b>')\n\n      theme.remote_theme = RemoteTheme.new(\n        remote_url: 'awesome.git',\n        remote_version: '7',\n        local_version: '8',\n        remote_updated_at: Time.zone.now\n      )\n\n      theme.save!\n\n      # this will get serialized as well\n      ColorScheme.create_from_base(name: \"test\", colors: [])\n\n      get \"/admin/themes.json\"\n\n      expect(response.status).to eq(200)\n\n      json = response.parsed_body\n\n      expect(json[\"extras\"][\"color_schemes\"].length).to eq(1)\n      theme_json = json[\"themes\"].find { |t| t[\"id\"] == theme.id }\n      expect(theme_json[\"theme_fields\"].length).to eq(2)\n      expect(theme_json[\"remote_theme\"][\"remote_version\"]).to eq(\"7\")\n    end\n  end\n\n  describe '#create' do\n    it 'creates a theme' do\n      post \"/admin/themes.json\", params: {\n        theme: {\n          name: 'my test name',\n          theme_fields: [name: 'scss', target: 'common', value: 'body{color: red;}']\n        }\n      }\n\n      expect(response.status).to eq(201)\n\n      json = response.parsed_body\n\n      expect(json[\"theme\"][\"theme_fields\"].length).to eq(1)\n      expect(UserHistory.where(action: UserHistory.actions[:change_theme]).count).to eq(1)\n    end\n  end\n\n  describe '#update' do\n    let!(:theme) { Fabricate(:theme) }\n\n    it 'returns the right response when an invalid id is given' do\n      put \"/admin/themes/99999.json\"\n\n      expect(response.status).to eq(400)\n    end\n\n    it 'can change default theme' do\n      SiteSetting.default_theme_id = -1\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        id: theme.id, theme: { default: true }\n      }\n\n      expect(response.status).to eq(200)\n      expect(SiteSetting.default_theme_id).to eq(theme.id)\n    end\n\n    it 'can unset default theme' do\n      SiteSetting.default_theme_id = theme.id\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: { default: false }\n      }\n\n      expect(response.status).to eq(200)\n      expect(SiteSetting.default_theme_id).to eq(-1)\n    end\n\n    context 'when theme allowlist mode is enabled' do\n      before do\n        global_setting :allowed_theme_repos, \"  https://magic.com/repo.git, https://x.com/git\"\n      end\n\n      it 'unconditionally bans theme_fields from updating' do\n        r = RemoteTheme.create!(remote_url: \"https://magic.com/repo.git\")\n        theme.update!(remote_theme_id: r.id)\n\n        put \"/admin/themes/#{theme.id}.json\", params: {\n          theme: {\n            name: 'my test name',\n            theme_fields: [\n              { name: 'scss', target: 'common', value: '' },\n              { name: 'scss', target: 'desktop', value: 'body{color: blue;}' },\n            ]\n          }\n        }\n\n        expect(response.status).to eq(403)\n      end\n    end\n\n    it 'updates a theme' do\n      theme.set_field(target: :common, name: :scss, value: '.body{color: black;}')\n      theme.save\n\n      child_theme = Fabricate(:theme, component: true)\n\n      upload = UploadCreator.new(file_from_fixtures(\"logo.png\"), \"logo.png\").create_for(Discourse.system_user.id)\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: {\n          child_theme_ids: [child_theme.id],\n          name: 'my test name',\n          theme_fields: [\n            { name: 'scss', target: 'common', value: '' },\n            { name: 'scss', target: 'desktop', value: 'body{color: blue;}' },\n            { name: 'bob', target: 'common', value: '', type_id: 2, upload_id: upload.id },\n          ]\n        }\n      }\n\n      expect(response.status).to eq(200)\n\n      json = response.parsed_body\n\n      fields = json[\"theme\"][\"theme_fields\"].sort { |a, b| a[\"value\"] <=> b[\"value\"] }\n\n      expect(fields[0][\"value\"]).to eq('')\n      expect(fields[0][\"upload_id\"]).to eq(upload.id)\n      expect(fields[1][\"value\"]).to eq('body{color: blue;}')\n      expect(fields.length).to eq(2)\n      expect(json[\"theme\"][\"child_themes\"].length).to eq(1)\n      expect(UserHistory.where(action: UserHistory.actions[:change_theme]).count).to eq(1)\n    end\n\n    it 'prevents theme update when using ember css selectors' do\n      child_theme = Fabricate(:theme, component: true)\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: {\n          child_theme_ids: [child_theme.id],\n          name: 'my test name',\n          theme_fields: [\n            { name: 'scss', target: 'common', value: '' },\n            { name: 'scss', target: 'desktop', value: '.ember-view{color: blue;}' },\n          ]\n        }\n      }\n\n      expect(response.status).to eq(200)\n\n      json = response.parsed_body\n\n      fields = json[\"theme\"][\"theme_fields\"].sort { |a, b| a[\"value\"] <=> b[\"value\"] }\n      expect(fields[0][\"error\"]).to eq(I18n.t(\"themes.ember_selector_error\"))\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: {\n          child_theme_ids: [child_theme.id],\n          name: 'my test name',\n          theme_fields: [\n            { name: 'scss', target: 'common', value: '' },\n            { name: 'scss', target: 'desktop', value: '#ember392{color: blue;}' },\n          ]\n        }\n      }\n\n      expect(response.status).to eq(200)\n      json = response.parsed_body\n\n      fields = json[\"theme\"][\"theme_fields\"].sort { |a, b| a[\"value\"] <=> b[\"value\"] }\n      expect(fields[0][\"error\"]).to eq(I18n.t(\"themes.ember_selector_error\"))\n    end\n\n    it 'blocks remote theme fields from being locally edited' do\n      r = RemoteTheme.create!(remote_url: \"https://magic.com/repo.git\")\n      theme.update!(remote_theme_id: r.id)\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: {\n          theme_fields: [\n            { name: 'scss', target: 'common', value: '' },\n            { name: 'header', target: 'common', value: 'filename.jpg', upload_id: 4 }\n          ]\n        }\n      }\n\n      expect(response.status).to eq(403)\n    end\n\n    it 'allows zip-imported theme fields to be locally edited' do\n      r = RemoteTheme.create!(remote_url: \"\")\n      theme.update!(remote_theme_id: r.id)\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: {\n          theme_fields: [\n            { name: 'scss', target: 'common', value: '' },\n            { name: 'header', target: 'common', value: 'filename.jpg', upload_id: 4 }\n          ]\n        }\n      }\n\n      expect(response.status).to eq(200)\n    end\n\n    it 'updates a child theme' do\n      child_theme = Fabricate(:theme, component: true)\n      put \"/admin/themes/#{child_theme.id}.json\", params: {\n        theme: {\n          parent_theme_ids: [theme.id],\n        }\n      }\n      expect(child_theme.parent_themes).to eq([theme])\n    end\n\n    it 'can update translations' do\n      theme.set_field(target: :translations, name: :en, value: { en: { somegroup: { somestring: \"defaultstring\" } } }.deep_stringify_keys.to_yaml)\n      theme.save!\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: {\n          translations: {\n            \"somegroup.somestring\" => \"overriddenstring\"\n          }\n        }\n      }\n\n      # Response correct\n      expect(response.status).to eq(200)\n      json = response.parsed_body\n      expect(json[\"theme\"][\"translations\"][0][\"value\"]).to eq(\"overriddenstring\")\n\n      # Database correct\n      theme.reload\n      expect(theme.theme_translation_overrides.count).to eq(1)\n      expect(theme.theme_translation_overrides.first.translation_key).to eq(\"somegroup.somestring\")\n\n      # Set back to default\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: {\n          translations: {\n            \"somegroup.somestring\" => \"defaultstring\"\n          }\n        }\n      }\n      # Response correct\n      expect(response.status).to eq(200)\n      json = response.parsed_body\n      expect(json[\"theme\"][\"translations\"][0][\"value\"]).to eq(\"defaultstring\")\n\n      # Database correct\n      theme.reload\n      expect(theme.theme_translation_overrides.count).to eq(0)\n    end\n\n    it 'checking for updates saves the remote_theme record' do\n      theme.remote_theme = RemoteTheme.create!(remote_url: \"http://discourse.org\", remote_version: \"a\", local_version: \"a\", commits_behind: 0)\n      theme.save!\n      ThemeStore::GitImporter.any_instance.stubs(:import!)\n      ThemeStore::GitImporter.any_instance.stubs(:commits_since).returns([\"b\", 1])\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: {\n          remote_check: true\n        }\n      }\n      theme.reload\n      expect(theme.remote_theme.remote_version).to eq(\"b\")\n      expect(theme.remote_theme.commits_behind).to eq(1)\n    end\n\n    it 'can disable component' do\n      child = Fabricate(:theme, component: true)\n\n      put \"/admin/themes/#{child.id}.json\", params: {\n        theme: {\n          enabled: false\n        }\n      }\n      expect(response.status).to eq(200)\n      json = response.parsed_body\n      expect(json[\"theme\"][\"enabled\"]).to eq(false)\n      expect(UserHistory.where(\n        context: child.id.to_s,\n        action: UserHistory.actions[:disable_theme_component]\n      ).size).to eq(1)\n      expect(json[\"theme\"][\"disabled_by\"][\"id\"]).to eq(admin.id)\n    end\n\n    it \"enabling/disabling a component creates the correct staff action log\" do\n      child = Fabricate(:theme, component: true)\n      UserHistory.destroy_all\n\n      put \"/admin/themes/#{child.id}.json\", params: {\n        theme: {\n          enabled: false\n        }\n      }\n      expect(response.status).to eq(200)\n\n      expect(UserHistory.where(\n        context: child.id.to_s,\n        action: UserHistory.actions[:disable_theme_component]\n      ).size).to eq(1)\n      expect(UserHistory.where(\n        context: child.id.to_s,\n        action: UserHistory.actions[:enable_theme_component]\n      ).size).to eq(0)\n\n      put \"/admin/themes/#{child.id}.json\", params: {\n        theme: {\n          enabled: true\n        }\n      }\n      expect(response.status).to eq(200)\n      json = response.parsed_body\n\n      expect(UserHistory.where(\n        context: child.id.to_s,\n        action: UserHistory.actions[:disable_theme_component]\n      ).size).to eq(1)\n      expect(UserHistory.where(\n        context: child.id.to_s,\n        action: UserHistory.actions[:enable_theme_component]\n      ).size).to eq(1)\n\n      expect(json[\"theme\"][\"disabled_by\"]).to eq(nil)\n      expect(json[\"theme\"][\"enabled\"]).to eq(true)\n    end\n\n    it 'handles import errors on update' do\n      theme.create_remote_theme!(remote_url: \"https://example.com/repository\")\n      theme.save!\n\n      # RemoteTheme is extensively tested, and setting up the test scaffold is a large overhead\n      # So use a stub here to test the controller\n      RemoteTheme.any_instance.stubs(:update_from_remote).raises(RemoteTheme::ImportError.new(\"error message\"))\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: { remote_update: true }\n      }\n      expect(response.status).to eq(422)\n      expect(response.parsed_body[\"errors\"].first).to eq(\"error message\")\n    end\n\n    it 'returns the right error message' do\n      theme.update!(component: true)\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: { default: true }\n      }\n\n      expect(response.status).to eq(400)\n      expect(response.parsed_body[\"errors\"].first).to include(I18n.t(\"themes.errors.component_no_default\"))\n    end\n\n    it 'prevents converting the default theme to a component' do\n      SiteSetting.default_theme_id = theme.id\n\n      put \"/admin/themes/#{theme.id}.json\", params: {\n        theme: { component: true }\n      }\n\n      # should this error message be localized? InvalidParameters :component\n      expect(response.status).to eq(400)\n      expect(response.parsed_body[\"errors\"].first).to include('component')\n    end\n  end\n\n  describe '#destroy' do\n    let!(:theme) { Fabricate(:theme) }\n\n    it 'returns the right response when an invalid id is given' do\n      delete \"/admin/themes/9999.json\"\n\n      expect(response.status).to eq(400)\n    end\n\n    it \"deletes the field's javascript cache\" do\n      theme.set_field(target: :common, name: :header, value: '<script>console.log(\"test\")</script>')\n      theme.save!\n\n      javascript_cache = theme.theme_fields.find_by(target_id: Theme.targets[:common], name: :header).javascript_cache\n      expect(javascript_cache).to_not eq(nil)\n\n      delete \"/admin/themes/#{theme.id}.json\"\n\n      expect(response.status).to eq(204)\n      expect { theme.reload }.to raise_error(ActiveRecord::RecordNotFound)\n      expect { javascript_cache.reload }.to raise_error(ActiveRecord::RecordNotFound)\n    end\n  end\n\n  describe '#preview' do\n    it \"should return the right response when an invalid id is given\" do\n      get \"/admin/themes/9999/preview.json\"\n\n      expect(response.status).to eq(400)\n    end\n  end\n\n  describe '#update_single_setting' do\n    let(:theme) { Fabricate(:theme) }\n\n    before do\n      theme.set_field(target: :settings, name: :yaml, value: \"bg: red\")\n      theme.save!\n    end\n\n    it \"should update a theme setting\" do\n      put \"/admin/themes/#{theme.id}/setting.json\", params: {\n        name: \"bg\",\n        value: \"green\"\n      }\n\n      expect(response.status).to eq(200)\n      expect(response.parsed_body[\"bg\"]).to eq(\"green\")\n\n      theme.reload\n      expect(theme.cached_settings[:bg]).to eq(\"green\")\n      user_history = UserHistory.last\n\n      expect(user_history.action).to eq(\n        UserHistory.actions[:change_theme_setting]\n      )\n    end\n\n    it \"should clear a theme setting\" do\n      put \"/admin/themes/#{theme.id}/setting.json\", params: { name: \"bg\" }\n      theme.reload\n\n      expect(response.status).to eq(200)\n      expect(theme.cached_settings[:bg]).to eq(\"\")\n    end\n  end\nend\n"], "filenames": ["app/controllers/admin/themes_controller.rb", "config/routes.rb", "spec/requests/admin/themes_controller_spec.rb"], "buggy_code_start_loc": [7, 209, 160], "buggy_code_end_loc": [7, 216, 160], "fixing_code_start_loc": [8, 209, 161], "fixing_code_end_loc": [9, 220, 168], "type": "CWE-862", "message": "Discourse is an open source discussion platform. In versions prior to 2.8.9 on the `stable` branch and prior to 2.9.0.beta10 on the `beta` and `tests-passed` branches, a moderator can create new and edit existing themes by using the API when they should not be able to do so. The problem is patched in version 2.8.9 on the `stable` branch and version 2.9.0.beta10 on the `beta` and `tests-passed` branches. There are no known workarounds.", "other": {"cve": {"id": "CVE-2022-36068", "sourceIdentifier": "security-advisories@github.com", "published": "2022-09-29T20:15:13.187", "lastModified": "2022-10-06T18:53:16.247", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Discourse is an open source discussion platform. In versions prior to 2.8.9 on the `stable` branch and prior to 2.9.0.beta10 on the `beta` and `tests-passed` branches, a moderator can create new and edit existing themes by using the API when they should not be able to do so. The problem is patched in version 2.8.9 on the `stable` branch and version 2.9.0.beta10 on the `beta` and `tests-passed` branches. There are no known workarounds."}, {"lang": "es", "value": "Discourse es una plataforma de debate de c\u00f3digo abierto. En versiones anteriores a 2.8.9 en la rama \"stable\" y anteriores a 2.9.0.beta10 en las ramas \"beta\" y \"tests-passed\", un moderador puede crear nuevos temas y editar los existentes usando la API cuando no deber\u00eda poder hacerlo. El problema est\u00e1 parcheado en versi\u00f3n 2.8.9 en la rama \"stable\" y en la versi\u00f3n 2.9.0.beta10 en las ramas \"beta\" y \"tests-passed\". No se presentan mitigaciones conocidas"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.8.9", "matchCriteriaId": "3BC8F74E-6BEF-4A8C-AF34-A0FC24A1EDFE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "B3803EF9-A296-42B7-887F-93C5E68E94C4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "8BA3D313-3C11-43E2-A47D-CBB532D1B6F8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta3:*:*:*:*:*:*", "matchCriteriaId": "6F42673E-65F3-4807-9484-20CB747420FB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta4:*:*:*:*:*:*", "matchCriteriaId": "0B91D023-FCE5-4866-AD8B-BBB675763104"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta5:*:*:*:*:*:*", "matchCriteriaId": "0086484D-0164-449C-8AAE-BE7479CB9706"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta6:*:*:*:*:*:*", "matchCriteriaId": "F9D1B031-96C7-44C0-A0A0-F67ABE55C93C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta7:*:*:*:*:*:*", "matchCriteriaId": "750D2AD9-35E7-4AC7-9C22-AA90DAA34F3F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta8:*:*:*:*:*:*", "matchCriteriaId": "B68E308A-BDAB-4614-A563-4460F7996CBE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta9:*:*:*:*:*:*", "matchCriteriaId": "5DEDE4C5-2C2A-4B74-BB41-8AAA0EE636E2"}]}]}], "references": [{"url": "https://github.com/discourse/discourse/commit/ae1e536e83940d58f1c79b835c75c249121c46b6", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/discourse/discourse/pull/18418", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/discourse/discourse/security/advisories/GHSA-6crr-3662-263q", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/discourse/discourse/commit/ae1e536e83940d58f1c79b835c75c249121c46b6"}}