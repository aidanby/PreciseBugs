{"buggy_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Api\\Commands;\n\nuse Exception;\nuse Froxlor\\Api\\ApiCommand;\nuse Froxlor\\Api\\ResourceEntity;\nuse Froxlor\\Cron\\TaskId;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FileDir;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Cronjob;\nuse Froxlor\\System\\Crypt;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Validate;\nuse PDO;\n\n/**\n * @since 0.10.0\n */\nclass DirProtections extends ApiCommand implements ResourceEntity\n{\n\n\t/**\n\t * add htaccess protection to a given directory\n\t *\n\t * @param int $customerid\n\t *            optional, required when called as admin (if $loginname is not specified)\n\t * @param string $loginname\n\t *            optional, required when called as admin (if $customerid is not specified)\n\t * @param string $path\n\t * @param string $username\n\t * @param string $directory_password\n\t * @param string $directory_authname\n\t *            optional name/description for the protection\n\t *\n\t * @access admin, customer\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function add()\n\t{\n\t\tif ($this->isAdmin() == false && Settings::IsInList('panel.customer_hide_options', 'extras')) {\n\t\t\tthrow new Exception(\"You cannot access this resource\", 405);\n\t\t}\n\t\tif ($this->isAdmin() == false && Settings::IsInList('panel.customer_hide_options', 'extras.directoryprotection')) {\n\t\t\tthrow new Exception(\"You cannot access this resource\", 405);\n\t\t}\n\n\t\t// get needed customer info to reduce the email-address-counter by one\n\t\t$customer = $this->getCustomerData();\n\n\t\t// required parameters\n\t\t$path = $this->getParam('path');\n\t\t$username = $this->getParam('username');\n\t\t$password = $this->getParam('directory_password');\n\n\t\t// parameters\n\t\t$authname = $this->getParam('directory_authname', true, '');\n\n\t\t// validation\n\t\t$path = FileDir::makeCorrectDir(Validate::validate($path, 'path', Validate::REGEX_DIR, '', [], true));\n\t\t$path = FileDir::makeCorrectDir($customer['documentroot'] . '/' . $path);\n\t\t$username = Validate::validate($username, 'username', '/^[a-zA-Z0-9][a-zA-Z0-9\\-_]+\\$?$/', '', [], true);\n\t\t$authname = Validate::validate($authname, 'directory_authname', '/^[a-zA-Z0-9][a-zA-Z0-9\\-_ ]+\\$?$/', '', [], true);\n\t\tValidate::validate($password, 'password', '', '', [], true);\n\n\t\t// check for duplicate usernames for the path\n\t\t$username_path_check_stmt = Database::prepare(\"\n\t\t\tSELECT `id`, `username`, `path` FROM `\" . TABLE_PANEL_HTPASSWDS . \"`\n\t\t\tWHERE `username`= :username AND `path`= :path AND `customerid`= :customerid\n\t\t\");\n\t\t$params = [\n\t\t\t\"username\" => $username,\n\t\t\t\"path\" => $path,\n\t\t\t\"customerid\" => $customer['customerid']\n\t\t];\n\t\t$username_path_check = Database::pexecute_first($username_path_check_stmt, $params, true, true);\n\n\t\t$password_enc = Crypt::makeCryptPassword($password, true);\n\n\t\t// duplicate check\n\t\tif ($username_path_check && $username_path_check['username'] == $username && $username_path_check['path'] == $path) {\n\t\t\tResponse::standardError('userpathcombinationdupe', '', true);\n\t\t} elseif ($password == $username) {\n\t\t\tResponse::standardError('passwordshouldnotbeusername', '', true);\n\t\t}\n\n\t\t// insert the entry\n\t\t$stmt = Database::prepare(\"\n\t\t\tINSERT INTO `\" . TABLE_PANEL_HTPASSWDS . \"` SET\n\t\t\t`customerid` = :customerid,\n\t\t\t`username` = :username,\n\t\t\t`password` = :password,\n\t\t\t`path` = :path,\n\t\t\t`authname` = :authname\n\t\t\");\n\t\t$params = [\n\t\t\t\"customerid\" => $customer['customerid'],\n\t\t\t\"username\" => $username,\n\t\t\t\"password\" => $password_enc,\n\t\t\t\"path\" => $path,\n\t\t\t\"authname\" => $authname\n\t\t];\n\t\tDatabase::pexecute($stmt, $params, true, true);\n\t\t$id = Database::lastInsertId();\n\t\t$this->logger()->logAction($this->isAdmin() ? FroxlorLogger::ADM_ACTION : FroxlorLogger::USR_ACTION, LOG_INFO, \"[API] added directory-protection for '\" . $username . \" (\" . $path . \")'\");\n\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\n\t\t$result = $this->apiCall('DirProtections.get', [\n\t\t\t'id' => $id\n\t\t]);\n\t\treturn $this->response($result);\n\t}\n\n\t/**\n\t * return a directory-protection entry by either id or username\n\t *\n\t * @param int $id\n\t *            optional, the directory-protection-id\n\t * @param string $username\n\t *            optional, the username\n\t *\n\t * @access admin, customer\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function get()\n\t{\n\t\tif ($this->isAdmin() == false && Settings::IsInList('panel.customer_hide_options', 'extras')) {\n\t\t\tthrow new Exception(\"You cannot access this resource\", 405);\n\t\t}\n\n\t\t$id = $this->getParam('id', true, 0);\n\t\t$un_optional = $id > 0;\n\t\t$username = $this->getParam('username', $un_optional, '');\n\n\t\t$params = [];\n\t\tif ($this->isAdmin()) {\n\t\t\tif ($this->getUserDetail('customers_see_all') == false) {\n\t\t\t\t// if it's a reseller or an admin who cannot see all customers, we need to check\n\t\t\t\t// whether the database belongs to one of his customers\n\t\t\t\t$_custom_list_result = $this->apiCall('Customers.listing');\n\t\t\t\t$custom_list_result = $_custom_list_result['list'];\n\t\t\t\t$customer_ids = [];\n\t\t\t\tforeach ($custom_list_result as $customer) {\n\t\t\t\t\t$customer_ids[] = $customer['customerid'];\n\t\t\t\t}\n\t\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_HTPASSWDS . \"`\n\t\t\t\t\tWHERE `customerid` IN (\" . implode(\", \", $customer_ids) . \")\n\t\t\t\t\tAND (`id` = :idun OR `username` = :idun)\n\t\t\t\t\");\n\t\t\t} else {\n\t\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_HTPASSWDS . \"`\n\t\t\t\t\tWHERE (`id` = :idun OR `username` = :idun)\n\t\t\t\t\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (Settings::IsInList('panel.customer_hide_options', 'extras.directoryprotection')) {\n\t\t\t\tthrow new Exception(\"You cannot access this resource\", 405);\n\t\t\t}\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_HTPASSWDS . \"`\n\t\t\t\tWHERE `customerid` = :customerid\n\t\t\t\tAND (`id` = :idun OR `username` = :idun)\n\t\t\t\");\n\t\t\t$params['customerid'] = $this->getUserDetail('customerid');\n\t\t}\n\t\t$params['idun'] = ($id <= 0 ? $username : $id);\n\t\t$result = Database::pexecute_first($result_stmt, $params, true, true);\n\t\tif ($result) {\n\t\t\t$this->logger()->logAction($this->isAdmin() ? FroxlorLogger::ADM_ACTION : FroxlorLogger::USR_ACTION, LOG_NOTICE, \"[API] get directory protection for '\" . $result['path'] . \"'\");\n\t\t\treturn $this->response($result);\n\t\t}\n\t\t$key = ($id > 0 ? \"id #\" . $id : \"username '\" . $username . \"'\");\n\t\tthrow new Exception(\"Directory protection with \" . $key . \" could not be found\", 404);\n\t}\n\n\t/**\n\t * update htaccess protection of a given directory\n\t *\n\t * @param int $id\n\t *            optional the directory-protection-id\n\t * @param string $username\n\t *            optional, the username\n\t * @param int $customerid\n\t *            optional, required when called as admin (if $loginname is not specified)\n\t * @param string $loginname\n\t *            optional, required when called as admin (if $customerid is not specified)\n\t * @param string $directory_password\n\t *            optional, leave empty for no change\n\t * @param string $directory_authname\n\t *            optional name/description for the protection\n\t *\n\t * @access admin, customer\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function update()\n\t{\n\t\t$id = $this->getParam('id', true, 0);\n\t\t$un_optional = $id > 0;\n\t\t$username = $this->getParam('username', $un_optional, '');\n\n\t\t// validation\n\t\t$result = $this->apiCall('DirProtections.get', [\n\t\t\t'id' => $id,\n\t\t\t'username' => $username\n\t\t]);\n\t\t$id = $result['id'];\n\n\t\t// parameters\n\t\t$password = $this->getParam('directory_password', true, '');\n\t\t$authname = $this->getParam('directory_authname', true, $result['authname']);\n\n\t\t// get needed customer info\n\t\t$customer = $this->getCustomerData();\n\n\t\t// validation\n\t\t$authname = Validate::validate($authname, 'directory_authname', '/^[a-zA-Z0-9][a-zA-Z0-9\\-_ ]+\\$?$/', '', [], true);\n\t\tValidate::validate($password, 'password', '', '', [], true);\n\n\t\t$upd_query = \"\";\n\t\t$upd_params = [\n\t\t\t\"id\" => $result['id'],\n\t\t\t\"cid\" => $customer['customerid']\n\t\t];\n\t\tif (!empty($password)) {\n\t\t\tif ($password == $result['username']) {\n\t\t\t\tResponse::standardError('passwordshouldnotbeusername', '', true);\n\t\t\t}\n\t\t\t$password_enc = Crypt::makeCryptPassword($password, true);\n\n\t\t\t$upd_query .= \"`password`= :password_enc\";\n\t\t\t$upd_params['password_enc'] = $password_enc;\n\t\t}\n\t\tif ($authname != $result['authname']) {\n\t\t\tif (!empty($upd_query)) {\n\t\t\t\t$upd_query .= \", \";\n\t\t\t}\n\t\t\t$upd_query .= \"`authname` = :authname\";\n\t\t\t$upd_params['authname'] = $authname;\n\t\t}\n\n\t\t// build update query\n\t\tif (!empty($upd_query)) {\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_HTPASSWDS . \"` SET \" . $upd_query . \" WHERE `id` = :id AND `customerid`= :cid\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, $upd_params, true, true);\n\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t}\n\n\t\t$this->logger()->logAction($this->isAdmin() ? FroxlorLogger::ADM_ACTION : FroxlorLogger::USR_ACTION, LOG_INFO, \"[API] updated directory-protection '\" . $result['username'] . \" (\" . $result['path'] . \")'\");\n\t\t$result = $this->apiCall('DirProtections.get', [\n\t\t\t'id' => $result['id']\n\t\t]);\n\t\treturn $this->response($result);\n\t}\n\n\t/**\n\t * list all directory-protections, if called from an admin, list all directory-protections of all customers you are\n\t * allowed to view, or specify id or loginname for one specific customer\n\t *\n\t * @param int $customerid\n\t *            optional, admin-only, select directory-protections of a specific customer by id\n\t * @param string $loginname\n\t *            optional, admin-only, select directory-protections of a specific customer by loginname\n\t * @param array $sql_search\n\t *            optional array with index = fieldname, and value = array with 'op' => operator (one of <, > or =),\n\t *            LIKE is used if left empty and 'value' => searchvalue\n\t * @param int $sql_limit\n\t *            optional specify number of results to be returned\n\t * @param int $sql_offset\n\t *            optional specify offset for resultset\n\t * @param array $sql_orderby\n\t *            optional array with index = fieldname and value = ASC|DESC to order the resultset by one or more\n\t *            fields\n\t *\n\t * @access admin, customer\n\t * @return string json-encoded array count|list\n\t * @throws Exception\n\t */\n\tpublic function listing()\n\t{\n\t\tif ($this->isAdmin() == false && Settings::IsInList('panel.customer_hide_options', 'extras')) {\n\t\t\tthrow new Exception(\"You cannot access this resource\", 405);\n\t\t}\n\t\t$customer_ids = $this->getAllowedCustomerIds('extras.directoryprotection');\n\n\t\t$result = [];\n\t\t$query_fields = [];\n\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT * FROM `\" . TABLE_PANEL_HTPASSWDS . \"`\n\t\t\tWHERE `customerid` IN (\" . implode(', ', $customer_ids) . \")\" . $this->getSearchWhere($query_fields, true) . $this->getOrderBy() . $this->getLimit());\n\t\tDatabase::pexecute($result_stmt, $query_fields, true, true);\n\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t$result[] = $row;\n\t\t}\n\t\t$this->logger()->logAction($this->isAdmin() ? FroxlorLogger::ADM_ACTION : FroxlorLogger::USR_ACTION, LOG_NOTICE, \"[API] list directory-protections\");\n\t\treturn $this->response([\n\t\t\t'count' => count($result),\n\t\t\t'list' => $result\n\t\t]);\n\t}\n\n\t/**\n\t * returns the total number of accessible directory protections\n\t *\n\t * @param int $customerid\n\t *            optional, admin-only, select directory-protections of a specific customer by id\n\t * @param string $loginname\n\t *            optional, admin-only, select directory-protections of a specific customer by loginname\n\t *\n\t * @access admin, customer\n\t * @return string json-encoded response message\n\t * @throws Exception\n\t */\n\tpublic function listingCount()\n\t{\n\t\tif ($this->isAdmin() == false && Settings::IsInList('panel.customer_hide_options', 'extras')) {\n\t\t\tthrow new Exception(\"You cannot access this resource\", 405);\n\t\t}\n\t\t$customer_ids = $this->getAllowedCustomerIds('extras.directoryprotection');\n\n\t\t$result = [];\n\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT COUNT(*) as num_htpasswd FROM `\" . TABLE_PANEL_HTPASSWDS . \"`\n\t\t\tWHERE `customerid` IN (\" . implode(', ', $customer_ids) . \")\n\t\t\");\n\t\t$result = Database::pexecute_first($result_stmt, null, true, true);\n\t\tif ($result) {\n\t\t\treturn $this->response($result['num_htpasswd']);\n\t\t}\n\t\treturn $this->response(0);\n\t}\n\n\t/**\n\t * delete a directory-protection by either id or username\n\t *\n\t * @param int $id\n\t *            optional, the directory-protection-id\n\t * @param string $username\n\t *            optional, the username\n\t *\n\t * @access admin, customer\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function delete()\n\t{\n\t\tif ($this->isAdmin() == false && Settings::IsInList('panel.customer_hide_options', 'extras')) {\n\t\t\tthrow new Exception(\"You cannot access this resource\", 405);\n\t\t}\n\n\t\t$id = $this->getParam('id', true, 0);\n\t\t$un_optional = $id > 0;\n\t\t$username = $this->getParam('username', $un_optional, '');\n\n\t\tif ($this->isAdmin() == false && Settings::IsInList('panel.customer_hide_options', 'extras.directoryprotection')) {\n\t\t\tthrow new Exception(\"You cannot access this resource\", 405);\n\t\t}\n\n\t\t// get directory protection\n\t\t$result = $this->apiCall('DirProtections.get', [\n\t\t\t'id' => $id,\n\t\t\t'username' => $username\n\t\t]);\n\t\t$id = $result['id'];\n\n\t\tif ($this->isAdmin()) {\n\t\t\t// get customer-data\n\t\t\t$customer_data = $this->apiCall('Customers.get', [\n\t\t\t\t'id' => $result['customerid']\n\t\t\t]);\n\t\t} else {\n\t\t\t$customer_data = $this->getUserData();\n\t\t}\n\n\t\t$stmt = Database::prepare(\"\n\t\t\tDELETE FROM `\" . TABLE_PANEL_HTPASSWDS . \"` WHERE `customerid`= :customerid\tAND `id`= :id\n\t\t\");\n\t\tDatabase::pexecute($stmt, [\n\t\t\t\"customerid\" => $customer_data['customerid'],\n\t\t\t\"id\" => $id\n\t\t]);\n\n\t\t$this->logger()->logAction($this->isAdmin() ? FroxlorLogger::ADM_ACTION : FroxlorLogger::USR_ACTION, LOG_INFO, \"[API] deleted htpasswd for '\" . $result['username'] . \" (\" . $result['path'] . \")'\");\n\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\treturn $this->response($result);\n\t}\n}\n"], "fixing_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Api\\Commands;\n\nuse Exception;\nuse Froxlor\\Api\\ApiCommand;\nuse Froxlor\\Api\\ResourceEntity;\nuse Froxlor\\Cron\\TaskId;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FileDir;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Cronjob;\nuse Froxlor\\System\\Crypt;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Validate;\nuse PDO;\n\n/**\n * @since 0.10.0\n */\nclass DirProtections extends ApiCommand implements ResourceEntity\n{\n\n\t/**\n\t * add htaccess protection to a given directory\n\t *\n\t * @param int $customerid\n\t *            optional, required when called as admin (if $loginname is not specified)\n\t * @param string $loginname\n\t *            optional, required when called as admin (if $customerid is not specified)\n\t * @param string $path\n\t * @param string $username\n\t * @param string $directory_password\n\t * @param string $directory_authname\n\t *            optional name/description for the protection\n\t *\n\t * @access admin, customer\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function add()\n\t{\n\t\tif ($this->isAdmin() == false && Settings::IsInList('panel.customer_hide_options', 'extras')) {\n\t\t\tthrow new Exception(\"You cannot access this resource\", 405);\n\t\t}\n\t\tif ($this->isAdmin() == false && Settings::IsInList('panel.customer_hide_options', 'extras.directoryprotection')) {\n\t\t\tthrow new Exception(\"You cannot access this resource\", 405);\n\t\t}\n\n\t\t// get needed customer info to reduce the email-address-counter by one\n\t\t$customer = $this->getCustomerData();\n\n\t\t// required parameters\n\t\t$path = $this->getParam('path');\n\t\t$username = $this->getParam('username');\n\t\t$password = $this->getParam('directory_password');\n\n\t\t// parameters\n\t\t$authname = $this->getParam('directory_authname', true, '');\n\n\t\t// validation\n\t\t$path = FileDir::makeCorrectDir(Validate::validate($path, 'path', Validate::REGEX_DIR, '', [], true));\n\t\t$path = FileDir::makeCorrectDir($customer['documentroot'] . '/' . $path);\n\t\t$username = Validate::validate($username, 'username', '/^[a-zA-Z0-9][a-zA-Z0-9\\-_]+\\$?$/', '', [], true);\n\t\t$authname = Validate::validate($authname, 'directory_authname', '/^[a-zA-Z0-9][a-zA-Z0-9\\-_ ]+\\$?$/', '', [], true);\n\t\t$password = Validate::validate($password, 'password', '', '', [], true);\n\t\t$password = Crypt::validatePassword($password, true);\n\n\t\t// check for duplicate usernames for the path\n\t\t$username_path_check_stmt = Database::prepare(\"\n\t\t\tSELECT `id`, `username`, `path` FROM `\" . TABLE_PANEL_HTPASSWDS . \"`\n\t\t\tWHERE `username`= :username AND `path`= :path AND `customerid`= :customerid\n\t\t\");\n\t\t$params = [\n\t\t\t\"username\" => $username,\n\t\t\t\"path\" => $path,\n\t\t\t\"customerid\" => $customer['customerid']\n\t\t];\n\t\t$username_path_check = Database::pexecute_first($username_path_check_stmt, $params, true, true);\n\n\t\t$password_enc = Crypt::makeCryptPassword($password, true);\n\n\t\t// duplicate check\n\t\tif ($username_path_check && $username_path_check['username'] == $username && $username_path_check['path'] == $path) {\n\t\t\tResponse::standardError('userpathcombinationdupe', '', true);\n\t\t} elseif ($password == $username) {\n\t\t\tResponse::standardError('passwordshouldnotbeusername', '', true);\n\t\t}\n\n\t\t// insert the entry\n\t\t$stmt = Database::prepare(\"\n\t\t\tINSERT INTO `\" . TABLE_PANEL_HTPASSWDS . \"` SET\n\t\t\t`customerid` = :customerid,\n\t\t\t`username` = :username,\n\t\t\t`password` = :password,\n\t\t\t`path` = :path,\n\t\t\t`authname` = :authname\n\t\t\");\n\t\t$params = [\n\t\t\t\"customerid\" => $customer['customerid'],\n\t\t\t\"username\" => $username,\n\t\t\t\"password\" => $password_enc,\n\t\t\t\"path\" => $path,\n\t\t\t\"authname\" => $authname\n\t\t];\n\t\tDatabase::pexecute($stmt, $params, true, true);\n\t\t$id = Database::lastInsertId();\n\t\t$this->logger()->logAction($this->isAdmin() ? FroxlorLogger::ADM_ACTION : FroxlorLogger::USR_ACTION, LOG_INFO, \"[API] added directory-protection for '\" . $username . \" (\" . $path . \")'\");\n\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\n\t\t$result = $this->apiCall('DirProtections.get', [\n\t\t\t'id' => $id\n\t\t]);\n\t\treturn $this->response($result);\n\t}\n\n\t/**\n\t * return a directory-protection entry by either id or username\n\t *\n\t * @param int $id\n\t *            optional, the directory-protection-id\n\t * @param string $username\n\t *            optional, the username\n\t *\n\t * @access admin, customer\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function get()\n\t{\n\t\tif ($this->isAdmin() == false && Settings::IsInList('panel.customer_hide_options', 'extras')) {\n\t\t\tthrow new Exception(\"You cannot access this resource\", 405);\n\t\t}\n\n\t\t$id = $this->getParam('id', true, 0);\n\t\t$un_optional = $id > 0;\n\t\t$username = $this->getParam('username', $un_optional, '');\n\n\t\t$params = [];\n\t\tif ($this->isAdmin()) {\n\t\t\tif ($this->getUserDetail('customers_see_all') == false) {\n\t\t\t\t// if it's a reseller or an admin who cannot see all customers, we need to check\n\t\t\t\t// whether the database belongs to one of his customers\n\t\t\t\t$_custom_list_result = $this->apiCall('Customers.listing');\n\t\t\t\t$custom_list_result = $_custom_list_result['list'];\n\t\t\t\t$customer_ids = [];\n\t\t\t\tforeach ($custom_list_result as $customer) {\n\t\t\t\t\t$customer_ids[] = $customer['customerid'];\n\t\t\t\t}\n\t\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_HTPASSWDS . \"`\n\t\t\t\t\tWHERE `customerid` IN (\" . implode(\", \", $customer_ids) . \")\n\t\t\t\t\tAND (`id` = :idun OR `username` = :idun)\n\t\t\t\t\");\n\t\t\t} else {\n\t\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_HTPASSWDS . \"`\n\t\t\t\t\tWHERE (`id` = :idun OR `username` = :idun)\n\t\t\t\t\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (Settings::IsInList('panel.customer_hide_options', 'extras.directoryprotection')) {\n\t\t\t\tthrow new Exception(\"You cannot access this resource\", 405);\n\t\t\t}\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_HTPASSWDS . \"`\n\t\t\t\tWHERE `customerid` = :customerid\n\t\t\t\tAND (`id` = :idun OR `username` = :idun)\n\t\t\t\");\n\t\t\t$params['customerid'] = $this->getUserDetail('customerid');\n\t\t}\n\t\t$params['idun'] = ($id <= 0 ? $username : $id);\n\t\t$result = Database::pexecute_first($result_stmt, $params, true, true);\n\t\tif ($result) {\n\t\t\t$this->logger()->logAction($this->isAdmin() ? FroxlorLogger::ADM_ACTION : FroxlorLogger::USR_ACTION, LOG_NOTICE, \"[API] get directory protection for '\" . $result['path'] . \"'\");\n\t\t\treturn $this->response($result);\n\t\t}\n\t\t$key = ($id > 0 ? \"id #\" . $id : \"username '\" . $username . \"'\");\n\t\tthrow new Exception(\"Directory protection with \" . $key . \" could not be found\", 404);\n\t}\n\n\t/**\n\t * update htaccess protection of a given directory\n\t *\n\t * @param int $id\n\t *            optional the directory-protection-id\n\t * @param string $username\n\t *            optional, the username\n\t * @param int $customerid\n\t *            optional, required when called as admin (if $loginname is not specified)\n\t * @param string $loginname\n\t *            optional, required when called as admin (if $customerid is not specified)\n\t * @param string $directory_password\n\t *            optional, leave empty for no change\n\t * @param string $directory_authname\n\t *            optional name/description for the protection\n\t *\n\t * @access admin, customer\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function update()\n\t{\n\t\t$id = $this->getParam('id', true, 0);\n\t\t$un_optional = $id > 0;\n\t\t$username = $this->getParam('username', $un_optional, '');\n\n\t\t// validation\n\t\t$result = $this->apiCall('DirProtections.get', [\n\t\t\t'id' => $id,\n\t\t\t'username' => $username\n\t\t]);\n\t\t$id = $result['id'];\n\n\t\t// parameters\n\t\t$password = $this->getParam('directory_password', true, '');\n\t\t$authname = $this->getParam('directory_authname', true, $result['authname']);\n\n\t\t// get needed customer info\n\t\t$customer = $this->getCustomerData();\n\n\t\t// validation\n\t\t$authname = Validate::validate($authname, 'directory_authname', '/^[a-zA-Z0-9][a-zA-Z0-9\\-_ ]+\\$?$/', '', [], true);\n\t\t$password = Validate::validate($password, 'password', '', '', [], true);\n\t\t$password = Crypt::validatePassword($password, true);\n\n\t\t$upd_query = \"\";\n\t\t$upd_params = [\n\t\t\t\"id\" => $result['id'],\n\t\t\t\"cid\" => $customer['customerid']\n\t\t];\n\t\tif (!empty($password)) {\n\t\t\tif ($password == $result['username']) {\n\t\t\t\tResponse::standardError('passwordshouldnotbeusername', '', true);\n\t\t\t}\n\t\t\t$password_enc = Crypt::makeCryptPassword($password, true);\n\n\t\t\t$upd_query .= \"`password`= :password_enc\";\n\t\t\t$upd_params['password_enc'] = $password_enc;\n\t\t}\n\t\tif ($authname != $result['authname']) {\n\t\t\tif (!empty($upd_query)) {\n\t\t\t\t$upd_query .= \", \";\n\t\t\t}\n\t\t\t$upd_query .= \"`authname` = :authname\";\n\t\t\t$upd_params['authname'] = $authname;\n\t\t}\n\n\t\t// build update query\n\t\tif (!empty($upd_query)) {\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_HTPASSWDS . \"` SET \" . $upd_query . \" WHERE `id` = :id AND `customerid`= :cid\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, $upd_params, true, true);\n\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t}\n\n\t\t$this->logger()->logAction($this->isAdmin() ? FroxlorLogger::ADM_ACTION : FroxlorLogger::USR_ACTION, LOG_INFO, \"[API] updated directory-protection '\" . $result['username'] . \" (\" . $result['path'] . \")'\");\n\t\t$result = $this->apiCall('DirProtections.get', [\n\t\t\t'id' => $result['id']\n\t\t]);\n\t\treturn $this->response($result);\n\t}\n\n\t/**\n\t * list all directory-protections, if called from an admin, list all directory-protections of all customers you are\n\t * allowed to view, or specify id or loginname for one specific customer\n\t *\n\t * @param int $customerid\n\t *            optional, admin-only, select directory-protections of a specific customer by id\n\t * @param string $loginname\n\t *            optional, admin-only, select directory-protections of a specific customer by loginname\n\t * @param array $sql_search\n\t *            optional array with index = fieldname, and value = array with 'op' => operator (one of <, > or =),\n\t *            LIKE is used if left empty and 'value' => searchvalue\n\t * @param int $sql_limit\n\t *            optional specify number of results to be returned\n\t * @param int $sql_offset\n\t *            optional specify offset for resultset\n\t * @param array $sql_orderby\n\t *            optional array with index = fieldname and value = ASC|DESC to order the resultset by one or more\n\t *            fields\n\t *\n\t * @access admin, customer\n\t * @return string json-encoded array count|list\n\t * @throws Exception\n\t */\n\tpublic function listing()\n\t{\n\t\tif ($this->isAdmin() == false && Settings::IsInList('panel.customer_hide_options', 'extras')) {\n\t\t\tthrow new Exception(\"You cannot access this resource\", 405);\n\t\t}\n\t\t$customer_ids = $this->getAllowedCustomerIds('extras.directoryprotection');\n\n\t\t$result = [];\n\t\t$query_fields = [];\n\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT * FROM `\" . TABLE_PANEL_HTPASSWDS . \"`\n\t\t\tWHERE `customerid` IN (\" . implode(', ', $customer_ids) . \")\" . $this->getSearchWhere($query_fields, true) . $this->getOrderBy() . $this->getLimit());\n\t\tDatabase::pexecute($result_stmt, $query_fields, true, true);\n\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t$result[] = $row;\n\t\t}\n\t\t$this->logger()->logAction($this->isAdmin() ? FroxlorLogger::ADM_ACTION : FroxlorLogger::USR_ACTION, LOG_NOTICE, \"[API] list directory-protections\");\n\t\treturn $this->response([\n\t\t\t'count' => count($result),\n\t\t\t'list' => $result\n\t\t]);\n\t}\n\n\t/**\n\t * returns the total number of accessible directory protections\n\t *\n\t * @param int $customerid\n\t *            optional, admin-only, select directory-protections of a specific customer by id\n\t * @param string $loginname\n\t *            optional, admin-only, select directory-protections of a specific customer by loginname\n\t *\n\t * @access admin, customer\n\t * @return string json-encoded response message\n\t * @throws Exception\n\t */\n\tpublic function listingCount()\n\t{\n\t\tif ($this->isAdmin() == false && Settings::IsInList('panel.customer_hide_options', 'extras')) {\n\t\t\tthrow new Exception(\"You cannot access this resource\", 405);\n\t\t}\n\t\t$customer_ids = $this->getAllowedCustomerIds('extras.directoryprotection');\n\n\t\t$result = [];\n\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT COUNT(*) as num_htpasswd FROM `\" . TABLE_PANEL_HTPASSWDS . \"`\n\t\t\tWHERE `customerid` IN (\" . implode(', ', $customer_ids) . \")\n\t\t\");\n\t\t$result = Database::pexecute_first($result_stmt, null, true, true);\n\t\tif ($result) {\n\t\t\treturn $this->response($result['num_htpasswd']);\n\t\t}\n\t\treturn $this->response(0);\n\t}\n\n\t/**\n\t * delete a directory-protection by either id or username\n\t *\n\t * @param int $id\n\t *            optional, the directory-protection-id\n\t * @param string $username\n\t *            optional, the username\n\t *\n\t * @access admin, customer\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function delete()\n\t{\n\t\tif ($this->isAdmin() == false && Settings::IsInList('panel.customer_hide_options', 'extras')) {\n\t\t\tthrow new Exception(\"You cannot access this resource\", 405);\n\t\t}\n\n\t\t$id = $this->getParam('id', true, 0);\n\t\t$un_optional = $id > 0;\n\t\t$username = $this->getParam('username', $un_optional, '');\n\n\t\tif ($this->isAdmin() == false && Settings::IsInList('panel.customer_hide_options', 'extras.directoryprotection')) {\n\t\t\tthrow new Exception(\"You cannot access this resource\", 405);\n\t\t}\n\n\t\t// get directory protection\n\t\t$result = $this->apiCall('DirProtections.get', [\n\t\t\t'id' => $id,\n\t\t\t'username' => $username\n\t\t]);\n\t\t$id = $result['id'];\n\n\t\tif ($this->isAdmin()) {\n\t\t\t// get customer-data\n\t\t\t$customer_data = $this->apiCall('Customers.get', [\n\t\t\t\t'id' => $result['customerid']\n\t\t\t]);\n\t\t} else {\n\t\t\t$customer_data = $this->getUserData();\n\t\t}\n\n\t\t$stmt = Database::prepare(\"\n\t\t\tDELETE FROM `\" . TABLE_PANEL_HTPASSWDS . \"` WHERE `customerid`= :customerid\tAND `id`= :id\n\t\t\");\n\t\tDatabase::pexecute($stmt, [\n\t\t\t\"customerid\" => $customer_data['customerid'],\n\t\t\t\"id\" => $id\n\t\t]);\n\n\t\t$this->logger()->logAction($this->isAdmin() ? FroxlorLogger::ADM_ACTION : FroxlorLogger::USR_ACTION, LOG_INFO, \"[API] deleted htpasswd for '\" . $result['username'] . \" (\" . $result['path'] . \")'\");\n\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\treturn $this->response($result);\n\t}\n}\n"], "filenames": ["lib/Froxlor/Api/Commands/DirProtections.php"], "buggy_code_start_loc": [90], "buggy_code_end_loc": [248], "fixing_code_start_loc": [90], "fixing_code_end_loc": [250], "type": "CWE-521", "message": "Weak Password Requirements in GitHub repository froxlor/froxlor prior to 2.0.10.", "other": {"cve": {"id": "CVE-2023-0564", "sourceIdentifier": "security@huntr.dev", "published": "2023-01-29T01:15:08.773", "lastModified": "2023-02-04T01:51:00.613", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Weak Password Requirements in GitHub repository froxlor/froxlor prior to 2.0.10."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-521"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:froxlor:froxlor:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.10", "matchCriteriaId": "AF26BD0E-694F-48CD-96F2-7E9FE8C46966"}]}]}], "references": [{"url": "https://github.com/froxlor/froxlor/commit/2a84e9c1207fd3d792b7fb198fd0c66fe1a66a7a", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/a4f86d6f-0d5d-428d-a4b3-551b20a21ce6", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/froxlor/froxlor/commit/2a84e9c1207fd3d792b7fb198fd0c66fe1a66a7a"}}