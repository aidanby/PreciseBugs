{"buggy_code": ["// Copyright 2012-2020 (c) Peter \u0160irka <petersirka@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/**\n * @module FrameworkImage\n * @version 3.3.0\n */\n\n'use strict';\n\nconst sof = { 0xc0: true, 0xc1: true, 0xc2: true, 0xc3: true, 0xc5: true, 0xc6: true, 0xc7: true, 0xc9: true, 0xca: true, 0xcb: true, 0xcd: true, 0xce: true, 0xcf: true };\nconst child = require('child_process');\nconst exec = child.exec;\nconst spawn = child.spawn;\nconst Fs = require('fs');\nconst REGEXP_SVG = /(width=\"\\d+\")+|(height=\"\\d+\")+/g;\nconst REGEXP_PATH = /\\//g;\nconst REGEXP_ESCAPE = /'/g;\nconst SPAWN_OPT = { shell: true };\nconst D = require('os').platform().substring(0, 3).toLowerCase() === 'win' ? '\"' : '\\'';\nconst CMD_CONVERT = { gm: 'gm', im: 'convert', magick: 'magick' };\nconst CMD_CONVERT2 = { gm: 'gm convert', im: 'convert', magick: 'magick' };\n\nvar CACHE = {};\nvar middlewares = {};\n\nif (!global.framework_utils)\n\tglobal.framework_utils = require('./utils');\n\nfunction u16(buf, o) {\n\treturn buf[o] << 8 | buf[o + 1];\n}\n\nfunction u32(buf, o) {\n\treturn buf[o] << 24 | buf[o + 1] << 16 | buf[o + 2] << 8 | buf[o + 3];\n}\n\nexports.measureGIF = function(buffer) {\n\treturn { width: buffer[6], height: buffer[8] };\n};\n\n// MIT\n// Written by TJ Holowaychuk\n// visionmedia\nexports.measureJPG = function(buffer) {\n\n\tvar len = buffer.length;\n\tvar o = 0;\n\n\tvar jpeg = 0xff == buffer[0] && 0xd8 == buffer[1];\n\tif (jpeg) {\n\t\to += 2;\n\t\twhile (o < len) {\n\t\t\twhile (0xff != buffer[o]) o++;\n\t\t\twhile (0xff == buffer[o]) o++;\n\t\t\tif (sof[buffer[o]])\n\t\t\t\treturn { width: u16(buffer, o + 6), height: u16(buffer, o + 4) };\n\t\t\telse\n\t\t\t\to += u16(buffer, ++o);\n\n\t\t}\n\t}\n\n\treturn null;\n};\n\n// MIT\n// Written by TJ Holowaychuk\n// visionmedia\nexports.measurePNG = function(buffer) {\n\treturn { width: u32(buffer, 16), height: u32(buffer, 16 + 4) };\n};\n\nexports.measureSVG = function(buffer) {\n\n\tvar match = buffer.toString('utf8').match(REGEXP_SVG);\n\tif (!match)\n\t\treturn;\n\n\tvar width = 0;\n\tvar height = 0;\n\n\tfor (var i = 0, length = match.length; i < length; i++) {\n\t\tvar value = match[i];\n\n\t\tif (width > 0 && height > 0)\n\t\t\tbreak;\n\n\t\tif (!width && value.startsWith('width=\"'))\n\t\t\twidth = value.parseInt2();\n\n\t\tif (!height && value.startsWith('height=\"'))\n\t\t\theight = value.parseInt2();\n\t}\n\n\treturn { width: width, height: height };\n};\n\nexports.measure = function(type, buffer) {\n\tswitch (type) {\n\t\tcase '.jpg':\n\t\tcase '.jpeg':\n\t\tcase 'jpg':\n\t\tcase 'jpeg':\n\t\tcase 'image/jpeg':\n\t\t\treturn exports.measureJPG(buffer);\n\t\tcase '.gif':\n\t\tcase 'gif':\n\t\tcase 'image/gif':\n\t\t\treturn exports.measureGIF(buffer);\n\t\tcase '.png':\n\t\tcase 'png':\n\t\tcase 'image/png':\n\t\t\treturn exports.measurePNG(buffer);\n\t\tcase '.svg':\n\t\tcase 'svg':\n\t\tcase 'image/svg+xml':\n\t\t\treturn exports.measureSVG(buffer);\n\t}\n};\n\nfunction Image(filename, cmd, width, height) {\n\tvar type = typeof(filename);\n\tthis.width = width;\n\tthis.height = height;\n\tthis.builder = [];\n\tthis.filename = type === 'string' ? filename : null;\n\tthis.currentStream = type === 'object' ? filename : null;\n\tthis.outputType = type === 'string' ? framework_utils.getExtension(filename) : 'jpg';\n\tthis.islimit = false;\n\tthis.cmdarg = cmd || CONF.default_image_converter;\n}\n\nvar ImageProto = Image.prototype;\n\nImageProto.clear = function() {\n\tvar self = this;\n\tself.builder = [];\n\treturn self;\n};\n\nImageProto.measure = function(callback) {\n\n\tvar self = this;\n\tvar index = self.filename.lastIndexOf('.');\n\n\tif (!self.filename) {\n\t\tcallback(new Error('Measure does not support stream.'));\n\t\treturn;\n\t}\n\n\tif (index === -1) {\n\t\tcallback(new Error('This type of file is not supported.'));\n\t\treturn;\n\t}\n\n\tF.stats.performance.open++;\n\tvar extension = self.filename.substring(index).toLowerCase();\n\tvar stream = require('fs').createReadStream(self.filename, { start: 0, end: extension === '.jpg' ? 40000 : 24 });\n\n\tstream.on('data', function(buffer) {\n\n\t\tswitch (extension) {\n\t\t\tcase '.jpg':\n\t\t\t\tcallback(null, exports.measureJPG(buffer));\n\t\t\t\treturn;\n\t\t\tcase '.gif':\n\t\t\t\tcallback(null, exports.measureGIF(buffer));\n\t\t\t\treturn;\n\t\t\tcase '.png':\n\t\t\t\tcallback(null, exports.measurePNG(buffer));\n\t\t\t\treturn;\n\t\t}\n\n\t\tcallback(new Error('This type of file is not supported.'));\n\t});\n\n\tstream.on('error', callback);\n\treturn self;\n};\n\nImageProto.$$measure = function() {\n\tvar self = this;\n\treturn function(callback) {\n\t\tself.measure(callback);\n\t};\n};\n\n/**\n * Execute commands\n * @param {String} filename\n * @param {Function(err, filename)} callback Optional.\n * @param {Function(stream)} writer A custom stream writer, optional.\n * @return {Image}\n */\nImageProto.save = function(filename, callback, writer) {\n\n\tvar self = this;\n\n\tif (typeof(filename) === 'function') {\n\t\tcallback = filename;\n\t\tfilename = null;\n\t}\n\n\t!self.builder.length && self.minify();\n\tfilename = filename || self.filename || '';\n\n\tvar command = self.cmd(self.filename ? self.filename : '-', filename);\n\n\tif (F.isWindows)\n\t\tcommand = command.replace(REGEXP_PATH, '\\\\');\n\n\tvar cmd = exec(command, function(err) {\n\n\t\t// clean up\n\t\tcmd.kill();\n\t\tcmd = null;\n\n\t\tself.clear();\n\n\t\tif (!callback)\n\t\t\treturn;\n\n\t\tif (err) {\n\t\t\tcallback(err, false);\n\t\t\treturn;\n\t\t}\n\n\t\tvar middleware = middlewares[self.outputType];\n\t\tif (!middleware)\n\t\t\treturn callback(null, true);\n\n\t\tF.stats.performance.open++;\n\t\tvar reader = Fs.createReadStream(filename);\n\t\tvar writer = Fs.createWriteStream(filename + '_');\n\n\t\treader.pipe(middleware()).pipe(writer);\n\t\twriter.on('finish', () => Fs.rename(filename + '_', filename, () => callback(null, true)));\n\t});\n\n\tif (self.currentStream) {\n\t\tif (self.currentStream instanceof Buffer)\n\t\t\tcmd.stdin.end(self.currentStream);\n\t\telse\n\t\t\tself.currentStream.pipe(cmd.stdin);\n\t}\n\n\tCLEANUP(cmd.stdin);\n\twriter && writer(cmd.stdin);\n\treturn self;\n};\n\nImageProto.$$save = function(filename, writer) {\n\tvar self = this;\n\treturn function(callback) {\n\t\tself.save(filename, callback, writer);\n\t};\n};\n\nImageProto.pipe = function(stream, type, options) {\n\n\tvar self = this;\n\n\tif (typeof(type) === 'object') {\n\t\toptions = type;\n\t\ttype = null;\n\t}\n\n\t!self.builder.length && self.minify();\n\t!type && (type = self.outputType);\n\n\tF.stats.performance.open++;\n\tvar cmd = spawn(CMD_CONVERT[self.cmdarg], self.arg(self.filename ? wrap(self.filename) : '-', (type ? type + ':' : '') + '-'), SPAWN_OPT);\n\tcmd.stderr.on('data', stream.emit.bind(stream, 'error'));\n\tcmd.stdout.on('data', stream.emit.bind(stream, 'data'));\n\tcmd.stdout.on('end', stream.emit.bind(stream, 'end'));\n\tcmd.on('error', stream.emit.bind(stream, 'error'));\n\n\tvar middleware = middlewares[type];\n\tif (middleware)\n\t\tcmd.stdout.pipe(middleware()).pipe(stream, options);\n\telse\n\t\tcmd.stdout.pipe(stream, options);\n\n\tif (self.currentStream) {\n\t\tif (self.currentStream instanceof Buffer)\n\t\t\tcmd.stdin.end(self.currentStream);\n\t\telse\n\t\t\tself.currentStream.pipe(cmd.stdin);\n\t}\n\n\treturn self;\n};\n\n/**\n * Create a stream\n * @param {String} type File type (png, jpg, gif)\n * @param {Function(stream)} writer A custom stream writer.\n * @return {ReadStream}\n */\nImageProto.stream = function(type, writer) {\n\n\tvar self = this;\n\n\t!self.builder.length && self.minify();\n\n\tif (!type)\n\t\ttype = self.outputType;\n\n\tF.stats.performance.open++;\n\tvar cmd = spawn(CMD_CONVERT[self.cmdarg], self.arg(self.filename ? wrap(self.filename) : '-', (type ? type + ':' : '') + '-'), SPAWN_OPT);\n\tif (self.currentStream) {\n\t\tif (self.currentStream instanceof Buffer)\n\t\t\tcmd.stdin.end(self.currentStream);\n\t\telse\n\t\t\tself.currentStream.pipe(cmd.stdin);\n\t}\n\n\twriter && writer(cmd.stdin);\n\tvar middleware = middlewares[type];\n\treturn middleware ? cmd.stdout.pipe(middleware()) : cmd.stdout;\n};\n\nImageProto.cmd = function(filenameFrom, filenameTo) {\n\n\tvar self = this;\n\tvar cmd = '';\n\n\tif (!self.islimit) {\n\t\tvar tmp = CONF.default_image_consumption;\n\t\tif (tmp) {\n\t\t\tself.limit('memory', (1500 / 100) * tmp);\n\t\t\tself.limit('map', (3000 / 100) * tmp);\n\t\t}\n\t}\n\n\tself.builder.sort(sort);\n\n\tvar length = self.builder.length;\n\tfor (var i = 0; i < length; i++)\n\t\tcmd += (cmd ? ' ' : '') + self.builder[i].cmd;\n\n\treturn CMD_CONVERT2[self.cmdarg] + wrap(filenameFrom, true) + ' ' + cmd + wrap(filenameTo, true);\n};\n\nfunction sort(a, b) {\n\treturn a.priority > b.priority ? 1 : -1;\n}\n\nImageProto.arg = function(first, last) {\n\n\tvar self = this;\n\tvar arr = [];\n\n\tif (self.cmdarg === 'gm')\n\t\tarr.push('convert');\n\n\tfirst && arr.push(first);\n\n\tif (!self.islimit) {\n\t\tvar tmp = CONF.default_image_consumption;\n\t\tif (tmp) {\n\t\t\tself.limit('memory', (1500 / 100) * tmp);\n\t\t\tself.limit('map', (3000 / 100) * tmp);\n\t\t}\n\t}\n\n\tself.builder.sort(sort);\n\n\tvar length = self.builder.length;\n\n\tfor (var i = 0; i < length; i++) {\n\t\tvar o = self.builder[i];\n\t\tvar index = o.cmd.indexOf(' ');\n\t\tif (index === -1)\n\t\t\tarr.push(o.cmd);\n\t\telse {\n\t\t\tarr.push(o.cmd.substring(0, index));\n\t\t\tarr.push(o.cmd.substring(index + 1).replace(/\"/g, ''));\n\t\t}\n\t}\n\n\tlast && arr.push(last);\n\treturn arr;\n};\n\nImageProto.identify = function(callback) {\n\tvar self = this;\n\tF.stats.performance.open++;\n\texec((self.cmdarg === 'gm' ? 'gm ' : '') + 'identify' + wrap(self.filename, true), function(err, stdout) {\n\n\t\tif (err) {\n\t\t\tcallback(err, null);\n\t\t\treturn;\n\t\t}\n\n\t\tvar arr = stdout.split(' ');\n\t\tvar size = arr[2].split('x');\n\t\tvar obj = { type: arr[1], width: framework_utils.parseInt(size[0]), height: framework_utils.parseInt(size[1]) };\n\t\tcallback(null, obj);\n\t});\n\n\treturn self;\n};\n\nImageProto.$$identify = function() {\n\tvar self = this;\n\treturn function(callback) {\n\t\tself.identify(callback);\n\t};\n};\n\nImageProto.push = function(key, value, priority, encode) {\n\tvar self = this;\n\tvar cmd = key;\n\n\tif (value != null) {\n\t\tif (encode && typeof(value) === 'string')\n\t\t\tcmd += ' ' + D + value.replace(REGEXP_ESCAPE, '') + D;\n\t\telse\n\t\t\tcmd += ' ' + value;\n\t}\n\n\tvar obj = CACHE[cmd];\n\tif (obj) {\n\t\tobj.priority = priority;\n\t\tself.builder.push(obj);\n\t} else {\n\t\tCACHE[cmd] = { cmd: cmd, priority: priority };\n\t\tself.builder.push(CACHE[cmd]);\n\t}\n\n\treturn self;\n};\n\nImageProto.output = function(type) {\n\tvar self = this;\n\tif (type[0] === '.')\n\t\ttype = type.substring(1);\n\tself.outputType = type;\n\treturn self;\n};\n\nImageProto.resize = function(w, h, options) {\n\toptions = options || '';\n\n\tvar self = this;\n\tvar size = '';\n\n\tif (w && h)\n\t\tsize = w + 'x' + h;\n\telse if (w && !h)\n\t\tsize = w + 'x';\n\telse if (!w && h)\n\t\tsize = 'x' + h;\n\n\treturn self.push('-resize', size + options, 1, true);\n};\n\nImageProto.thumbnail = function(w, h, options) {\n\toptions = options || '';\n\n\tvar self = this;\n\tvar size = '';\n\n\tif (w && h)\n\t\tsize = w + 'x' + h;\n\telse if (w && !h)\n\t\tsize = w;\n\telse if (!w && h)\n\t\tsize = 'x' + h;\n\n\treturn self.push('-thumbnail', size + options, 1, true);\n};\n\nImageProto.geometry = function(w, h, options) {\n\toptions = options || '';\n\n\tvar self = this;\n\tvar size = '';\n\n\tif (w && h)\n\t\tsize = w + 'x' + h;\n\telse if (w && !h)\n\t\tsize = w;\n\telse if (!w && h)\n\t\tsize = 'x' + h;\n\n\treturn self.push('-geometry', size + options, 1, true);\n};\n\n\nImageProto.filter = function(type) {\n\treturn this.push('-filter', type, 1, true);\n};\n\nImageProto.trim = function() {\n\treturn this.push('-trim +repage', 1);\n};\n\nImageProto.limit = function(type, value) {\n\tthis.islimit = true;\n\treturn this.push('-limit', type + ' ' + value, 1);\n};\n\nImageProto.extent = function(w, h, x, y) {\n\n\tvar self = this;\n\tvar size = '';\n\n\tif (w && h)\n\t\tsize = w + 'x' + h;\n\telse if (w && !h)\n\t\tsize = w;\n\telse if (!w && h)\n\t\tsize = 'x' + h;\n\n\tif (x || y) {\n\t\t!x && (x = 0);\n\t\t!y && (y = 0);\n\t\tsize += (x >= 0 ? '+' : '') + x + (y >= 0 ? '+' : '') + y;\n\t}\n\n\treturn self.push('-extent', size, 4, true);\n};\n\n/**\n * Resize picture to miniature (full picture)\n * @param {Number} w\n * @param {Number} h\n * @param {String} color Optional, background color.\n * @param {String} filter Optional, resize filter (default: Box)\n * @return {Image}\n */\nImageProto.miniature = function(w, h, color, filter) {\n\treturn this.filter(filter || 'Hamming').thumbnail(w, h).background(color ? color : 'white').align('center').extent(w, h);\n};\n\n/**\n * Resize picture to center\n * @param {Number} w\n * @param {Number} h\n * @param {String} color Optional, background color.\n * @return {Image}\n */\nImageProto.resizeCenter = ImageProto.resize_center = function(w, h, color) {\n\treturn this.resize(w, h, '^').background(color ? color : 'white').align('center').crop(w, h);\n};\n\n/**\n * Resize picture to align\n * @param {Number} w\n * @param {Number} h\n * @param {String} align (top, center, bottom)\n * @param {String} color Optional, background color.\n * @return {Image}\n */\nImageProto.resizeAlign = ImageProto.resize_align = function(w, h, align, color) {\n\treturn this.resize(w, h, '^').background(color ? color : 'white').align(align || 'center').crop(w, h);\n};\n\nImageProto.scale = function(w, h, options) {\n\toptions = options || '';\n\n\tvar self = this;\n\tvar size = '';\n\n\tif (w && h)\n\t\tsize = w + 'x' + h;\n\telse if (w && !h)\n\t\tsize = w;\n\telse if (!w && h)\n\t\tsize = 'x' + h;\n\n\treturn self.push('-scale', size + options, 1, true);\n};\n\nImageProto.crop = function(w, h, x, y) {\n\treturn this.push('-crop', w + 'x' + h + '+' + (x || 0) + '+' + (y || 0), 4, true);\n};\n\nImageProto.quality = function(percentage) {\n\treturn this.push('-quality', percentage || 80, 5, true);\n};\n\nImageProto.align = function(type) {\n\n\tvar output;\n\n\tswitch (type) {\n\t\tcase 'left top':\n\t\tcase 'top left':\n\t\t\toutput = 'NorthWest';\n\t\t\tbreak;\n\t\tcase 'left bottom':\n\t\tcase 'bottom left':\n\t\t\toutput = 'SouthWest';\n\t\t\tbreak;\n\t\tcase 'right top':\n\t\tcase 'top right':\n\t\t\toutput = 'NorthEast';\n\t\t\tbreak;\n\t\tcase 'right bottom':\n\t\tcase 'bottom right':\n\t\t\toutput = 'SouthEast';\n\t\t\tbreak;\n\t\tcase 'left center':\n\t\tcase 'center left':\n\t\tcase 'left':\n\t\t\toutput = 'West';\n\t\t\tbreak;\n\t\tcase 'right center':\n\t\tcase 'center right':\n\t\tcase 'right':\n\t\t\toutput = 'East';\n\t\t\tbreak;\n\t\tcase 'bottom center':\n\t\tcase 'center bottom':\n\t\tcase 'bottom':\n\t\t\toutput = 'South';\n\t\t\tbreak;\n\t\tcase 'top center':\n\t\tcase 'center top':\n\t\tcase 'top':\n\t\t\toutput = 'North';\n\t\t\tbreak;\n\t\tcase 'center center':\n\t\tcase 'center':\n\t\tcase 'middle':\n\t\t\toutput = 'Center';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\toutput = type;\n\t\t\tbreak;\n\t}\n\n\toutput && this.push('-gravity', output, 3, true);\n\treturn this;\n};\n\nImageProto.gravity = function(type) {\n\treturn this.align(type);\n};\n\nImageProto.blur = function(radius) {\n\treturn this.push('-blur', radius, 10, true);\n};\n\nImageProto.normalize = function() {\n\treturn this.push('-normalize', null, 10);\n};\n\nImageProto.rotate = function(deg) {\n\treturn this.push('-rotate', deg || 0, 8, true);\n};\n\nImageProto.flip = function() {\n\treturn this.push('-flip', null, 10);\n};\n\nImageProto.flop = function() {\n\treturn this.push('-flop', null, 10);\n};\n\nImageProto.define = function(value) {\n\treturn this.push('-define', value, 10, true);\n};\n\nImageProto.minify = function() {\n\treturn this.push('+profile', '*', null, 10, true);\n};\n\nImageProto.grayscale = function() {\n\treturn this.push('-colorspace', 'Gray', 10, true);\n};\n\nImageProto.bitdepth = function(value) {\n\treturn this.push('-depth', value, 10, true);\n};\n\nImageProto.colors = function(value) {\n\treturn this.push('-colors', value, 10, true);\n};\n\nImageProto.background = function(color) {\n\treturn this.push('-background', color, 2, true).push('-extent 0x0', null, 2);\n};\n\nImageProto.fill = function(color) {\n\treturn this.push('-fill', color, 2, true);\n};\n\nImageProto.sepia = function() {\n\treturn this.push('-modulate', '115,0,100', 4).push('-colorize', '7,21,50', 5);\n};\n\nImageProto.watermark = function(filename, x, y, w, h) {\n\treturn this.push('-draw', 'image over {1},{2} {3},{4} {5}{0}{5}'.format(filename, x || 0, y || 0, w || 0, h || 0, D), 6, true);\n};\n\nImageProto.make = function(fn) {\n\tfn.call(this, this);\n\treturn this;\n};\n\nImageProto.command = function(key, value, priority, esc) {\n\n\tif (priority === true) {\n\t\tpriority = 0;\n\t\tesc = true;\n\t}\n\n\treturn this.push(key, value, priority || 10, esc);\n};\n\nfunction wrap(command, empty) {\n\treturn (empty ? ' ' : '') + (command === '-' ? command : (D + command.replace(REGEXP_ESCAPE, '') + D));\n}\n\nexports.Image = Image;\nexports.Picture = Image;\n\nexports.init = function(filename, cmd, width, height) {\n\treturn new Image(filename, cmd, width, height);\n};\n\nexports.load = function(filename, cmd, width, height) {\n\treturn new Image(filename, cmd, width, height);\n};\n\nexports.middleware = function(type, fn) {\n\tif (type[0] === '.')\n\t\ttype = type.substring(1);\n\tmiddlewares[type] = fn;\n};\n\n// Clears cache with commands\nexports.clear = function() {\n\tCACHE = {};\n};\n\nglobal.Image = exports;\n"], "fixing_code": ["// Copyright 2012-2020 (c) Peter \u0160irka <petersirka@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/**\n * @module FrameworkImage\n * @version 3.3.0\n */\n\n'use strict';\n\nconst sof = { 0xc0: true, 0xc1: true, 0xc2: true, 0xc3: true, 0xc5: true, 0xc6: true, 0xc7: true, 0xc9: true, 0xca: true, 0xcb: true, 0xcd: true, 0xce: true, 0xcf: true };\nconst child = require('child_process');\nconst exec = child.exec;\nconst spawn = child.spawn;\nconst Fs = require('fs');\nconst REGEXP_SVG = /(width=\"\\d+\")+|(height=\"\\d+\")+/g;\nconst REGEXP_PATH = /\\//g;\nconst REGEXP_ESCAPE = /'/g;\nconst SPAWN_OPT = { shell: true };\nconst D = require('os').platform().substring(0, 3).toLowerCase() === 'win' ? '\"' : '\\'';\nconst CMD_CONVERT = { gm: 'gm', im: 'convert', magick: 'magick' };\nconst CMD_CONVERT2 = { gm: 'gm convert', im: 'convert', magick: 'magick' };\nconst SUPPORTEDIMAGES = { jpg: 1, png: 1, gif: 1, apng: 1, jpeg: 1, heif: 1, heic: 1, webp: 1, ico: 1 };\n\nvar CACHE = {};\nvar middlewares = {};\n\nif (!global.framework_utils)\n\tglobal.framework_utils = require('./utils');\n\nfunction u16(buf, o) {\n\treturn buf[o] << 8 | buf[o + 1];\n}\n\nfunction u32(buf, o) {\n\treturn buf[o] << 24 | buf[o + 1] << 16 | buf[o + 2] << 8 | buf[o + 3];\n}\n\nexports.measureGIF = function(buffer) {\n\treturn { width: buffer[6], height: buffer[8] };\n};\n\n// MIT\n// Written by TJ Holowaychuk\n// visionmedia\nexports.measureJPG = function(buffer) {\n\n\tvar len = buffer.length;\n\tvar o = 0;\n\n\tvar jpeg = 0xff == buffer[0] && 0xd8 == buffer[1];\n\tif (jpeg) {\n\t\to += 2;\n\t\twhile (o < len) {\n\t\t\twhile (0xff != buffer[o]) o++;\n\t\t\twhile (0xff == buffer[o]) o++;\n\t\t\tif (sof[buffer[o]])\n\t\t\t\treturn { width: u16(buffer, o + 6), height: u16(buffer, o + 4) };\n\t\t\telse\n\t\t\t\to += u16(buffer, ++o);\n\n\t\t}\n\t}\n\n\treturn null;\n};\n\n// MIT\n// Written by TJ Holowaychuk\n// visionmedia\nexports.measurePNG = function(buffer) {\n\treturn { width: u32(buffer, 16), height: u32(buffer, 16 + 4) };\n};\n\nexports.measureSVG = function(buffer) {\n\n\tvar match = buffer.toString('utf8').match(REGEXP_SVG);\n\tif (!match)\n\t\treturn;\n\n\tvar width = 0;\n\tvar height = 0;\n\n\tfor (var i = 0, length = match.length; i < length; i++) {\n\t\tvar value = match[i];\n\n\t\tif (width > 0 && height > 0)\n\t\t\tbreak;\n\n\t\tif (!width && value.startsWith('width=\"'))\n\t\t\twidth = value.parseInt2();\n\n\t\tif (!height && value.startsWith('height=\"'))\n\t\t\theight = value.parseInt2();\n\t}\n\n\treturn { width: width, height: height };\n};\n\nexports.measure = function(type, buffer) {\n\tswitch (type) {\n\t\tcase '.jpg':\n\t\tcase '.jpeg':\n\t\tcase 'jpg':\n\t\tcase 'jpeg':\n\t\tcase 'image/jpeg':\n\t\t\treturn exports.measureJPG(buffer);\n\t\tcase '.gif':\n\t\tcase 'gif':\n\t\tcase 'image/gif':\n\t\t\treturn exports.measureGIF(buffer);\n\t\tcase '.png':\n\t\tcase 'png':\n\t\tcase 'image/png':\n\t\t\treturn exports.measurePNG(buffer);\n\t\tcase '.svg':\n\t\tcase 'svg':\n\t\tcase 'image/svg+xml':\n\t\t\treturn exports.measureSVG(buffer);\n\t}\n};\n\nfunction Image(filename, cmd, width, height) {\n\tvar type = typeof(filename);\n\tthis.width = width;\n\tthis.height = height;\n\tthis.builder = [];\n\tthis.filename = type === 'string' ? filename : null;\n\tthis.currentStream = type === 'object' ? filename : null;\n\tthis.outputType = type === 'string' ? framework_utils.getExtension(filename) : 'jpg';\n\tthis.islimit = false;\n\tthis.cmdarg = cmd || CONF.default_image_converter;\n}\n\nvar ImageProto = Image.prototype;\n\nImageProto.clear = function() {\n\tvar self = this;\n\tself.builder = [];\n\treturn self;\n};\n\nImageProto.measure = function(callback) {\n\n\tvar self = this;\n\tvar index = self.filename.lastIndexOf('.');\n\n\tif (!self.filename) {\n\t\tcallback(new Error('Measure does not support stream.'));\n\t\treturn;\n\t}\n\n\tif (index === -1) {\n\t\tcallback(new Error('This type of file is not supported.'));\n\t\treturn;\n\t}\n\n\tF.stats.performance.open++;\n\tvar extension = self.filename.substring(index).toLowerCase();\n\tvar stream = require('fs').createReadStream(self.filename, { start: 0, end: extension === '.jpg' ? 40000 : 24 });\n\n\tstream.on('data', function(buffer) {\n\n\t\tswitch (extension) {\n\t\t\tcase '.jpg':\n\t\t\t\tcallback(null, exports.measureJPG(buffer));\n\t\t\t\treturn;\n\t\t\tcase '.gif':\n\t\t\t\tcallback(null, exports.measureGIF(buffer));\n\t\t\t\treturn;\n\t\t\tcase '.png':\n\t\t\t\tcallback(null, exports.measurePNG(buffer));\n\t\t\t\treturn;\n\t\t}\n\n\t\tcallback(new Error('This type of file is not supported.'));\n\t});\n\n\tstream.on('error', callback);\n\treturn self;\n};\n\nImageProto.$$measure = function() {\n\tvar self = this;\n\treturn function(callback) {\n\t\tself.measure(callback);\n\t};\n};\n\n/**\n * Execute commands\n * @param {String} filename\n * @param {Function(err, filename)} callback Optional.\n * @param {Function(stream)} writer A custom stream writer, optional.\n * @return {Image}\n */\nImageProto.save = function(filename, callback, writer) {\n\n\tvar self = this;\n\n\tif (typeof(filename) === 'function') {\n\t\tcallback = filename;\n\t\tfilename = null;\n\t}\n\n\t!self.builder.length && self.minify();\n\tfilename = filename || self.filename || '';\n\n\tvar command = self.cmd(self.filename ? self.filename : '-', filename);\n\n\tif (F.isWindows)\n\t\tcommand = command.replace(REGEXP_PATH, '\\\\');\n\n\tvar cmd = exec(command, function(err) {\n\n\t\t// clean up\n\t\tcmd.kill();\n\t\tcmd = null;\n\n\t\tself.clear();\n\n\t\tif (!callback)\n\t\t\treturn;\n\n\t\tif (err) {\n\t\t\tcallback(err, false);\n\t\t\treturn;\n\t\t}\n\n\t\tvar middleware = middlewares[self.outputType];\n\t\tif (!middleware)\n\t\t\treturn callback(null, true);\n\n\t\tF.stats.performance.open++;\n\t\tvar reader = Fs.createReadStream(filename);\n\t\tvar writer = Fs.createWriteStream(filename + '_');\n\n\t\treader.pipe(middleware()).pipe(writer);\n\t\twriter.on('finish', () => Fs.rename(filename + '_', filename, () => callback(null, true)));\n\t});\n\n\tif (self.currentStream) {\n\t\tif (self.currentStream instanceof Buffer)\n\t\t\tcmd.stdin.end(self.currentStream);\n\t\telse\n\t\t\tself.currentStream.pipe(cmd.stdin);\n\t}\n\n\tCLEANUP(cmd.stdin);\n\twriter && writer(cmd.stdin);\n\treturn self;\n};\n\nImageProto.$$save = function(filename, writer) {\n\tvar self = this;\n\treturn function(callback) {\n\t\tself.save(filename, callback, writer);\n\t};\n};\n\nImageProto.pipe = function(stream, type, options) {\n\n\tvar self = this;\n\n\tif (typeof(type) === 'object') {\n\t\toptions = type;\n\t\ttype = null;\n\t}\n\n\t!self.builder.length && self.minify();\n\t!type && (type = self.outputType);\n\n\tF.stats.performance.open++;\n\tvar cmd = spawn(CMD_CONVERT[self.cmdarg], self.arg(self.filename ? wrap(self.filename) : '-', (type ? type + ':' : '') + '-'), SPAWN_OPT);\n\tcmd.stderr.on('data', stream.emit.bind(stream, 'error'));\n\tcmd.stdout.on('data', stream.emit.bind(stream, 'data'));\n\tcmd.stdout.on('end', stream.emit.bind(stream, 'end'));\n\tcmd.on('error', stream.emit.bind(stream, 'error'));\n\n\tvar middleware = middlewares[type];\n\tif (middleware)\n\t\tcmd.stdout.pipe(middleware()).pipe(stream, options);\n\telse\n\t\tcmd.stdout.pipe(stream, options);\n\n\tif (self.currentStream) {\n\t\tif (self.currentStream instanceof Buffer)\n\t\t\tcmd.stdin.end(self.currentStream);\n\t\telse\n\t\t\tself.currentStream.pipe(cmd.stdin);\n\t}\n\n\treturn self;\n};\n\n/**\n * Create a stream\n * @param {String} type File type (png, jpg, gif)\n * @param {Function(stream)} writer A custom stream writer.\n * @return {ReadStream}\n */\nImageProto.stream = function(type, writer) {\n\n\tvar self = this;\n\n\t!self.builder.length && self.minify();\n\n\tif (!type || !SUPPORTEDIMAGES[type])\n\t\ttype = self.outputType;\n\n\tF.stats.performance.open++;\n\tvar cmd = spawn(CMD_CONVERT[self.cmdarg], self.arg(self.filename ? wrap(self.filename) : '-', (type ? type + ':' : '') + '-'), SPAWN_OPT);\n\tif (self.currentStream) {\n\t\tif (self.currentStream instanceof Buffer)\n\t\t\tcmd.stdin.end(self.currentStream);\n\t\telse\n\t\t\tself.currentStream.pipe(cmd.stdin);\n\t}\n\n\twriter && writer(cmd.stdin);\n\tvar middleware = middlewares[type];\n\treturn middleware ? cmd.stdout.pipe(middleware()) : cmd.stdout;\n};\n\nImageProto.cmd = function(filenameFrom, filenameTo) {\n\n\tvar self = this;\n\tvar cmd = '';\n\n\tif (!self.islimit) {\n\t\tvar tmp = CONF.default_image_consumption;\n\t\tif (tmp) {\n\t\t\tself.limit('memory', (1500 / 100) * tmp);\n\t\t\tself.limit('map', (3000 / 100) * tmp);\n\t\t}\n\t}\n\n\tself.builder.sort(sort);\n\n\tvar length = self.builder.length;\n\tfor (var i = 0; i < length; i++)\n\t\tcmd += (cmd ? ' ' : '') + self.builder[i].cmd;\n\n\treturn CMD_CONVERT2[self.cmdarg] + wrap(filenameFrom, true) + ' ' + cmd + wrap(filenameTo, true);\n};\n\nfunction sort(a, b) {\n\treturn a.priority > b.priority ? 1 : -1;\n}\n\nImageProto.arg = function(first, last) {\n\n\tvar self = this;\n\tvar arr = [];\n\n\tif (self.cmdarg === 'gm')\n\t\tarr.push('convert');\n\n\tfirst && arr.push(first);\n\n\tif (!self.islimit) {\n\t\tvar tmp = CONF.default_image_consumption;\n\t\tif (tmp) {\n\t\t\tself.limit('memory', (1500 / 100) * tmp);\n\t\t\tself.limit('map', (3000 / 100) * tmp);\n\t\t}\n\t}\n\n\tself.builder.sort(sort);\n\n\tvar length = self.builder.length;\n\n\tfor (var i = 0; i < length; i++) {\n\t\tvar o = self.builder[i];\n\t\tvar index = o.cmd.indexOf(' ');\n\t\tif (index === -1)\n\t\t\tarr.push(o.cmd);\n\t\telse {\n\t\t\tarr.push(o.cmd.substring(0, index));\n\t\t\tarr.push(o.cmd.substring(index + 1).replace(/\"/g, ''));\n\t\t}\n\t}\n\n\tlast && arr.push(last);\n\treturn arr;\n};\n\nImageProto.identify = function(callback) {\n\tvar self = this;\n\tF.stats.performance.open++;\n\texec((self.cmdarg === 'gm' ? 'gm ' : '') + 'identify' + wrap(self.filename, true), function(err, stdout) {\n\n\t\tif (err) {\n\t\t\tcallback(err, null);\n\t\t\treturn;\n\t\t}\n\n\t\tvar arr = stdout.split(' ');\n\t\tvar size = arr[2].split('x');\n\t\tvar obj = { type: arr[1], width: framework_utils.parseInt(size[0]), height: framework_utils.parseInt(size[1]) };\n\t\tcallback(null, obj);\n\t});\n\n\treturn self;\n};\n\nImageProto.$$identify = function() {\n\tvar self = this;\n\treturn function(callback) {\n\t\tself.identify(callback);\n\t};\n};\n\nImageProto.push = function(key, value, priority, encode) {\n\tvar self = this;\n\tvar cmd = key;\n\n\tif (value != null) {\n\t\tif (encode && typeof(value) === 'string')\n\t\t\tcmd += ' ' + D + value.replace(REGEXP_ESCAPE, '') + D;\n\t\telse\n\t\t\tcmd += ' ' + value;\n\t}\n\n\tvar obj = CACHE[cmd];\n\tif (obj) {\n\t\tobj.priority = priority;\n\t\tself.builder.push(obj);\n\t} else {\n\t\tCACHE[cmd] = { cmd: cmd, priority: priority };\n\t\tself.builder.push(CACHE[cmd]);\n\t}\n\n\treturn self;\n};\n\nImageProto.output = function(type) {\n\tvar self = this;\n\tif (type[0] === '.')\n\t\ttype = type.substring(1);\n\tself.outputType = type;\n\treturn self;\n};\n\nImageProto.resize = function(w, h, options) {\n\toptions = options || '';\n\n\tvar self = this;\n\tvar size = '';\n\n\tif (w && h)\n\t\tsize = w + 'x' + h;\n\telse if (w && !h)\n\t\tsize = w + 'x';\n\telse if (!w && h)\n\t\tsize = 'x' + h;\n\n\treturn self.push('-resize', size + options, 1, true);\n};\n\nImageProto.thumbnail = function(w, h, options) {\n\toptions = options || '';\n\n\tvar self = this;\n\tvar size = '';\n\n\tif (w && h)\n\t\tsize = w + 'x' + h;\n\telse if (w && !h)\n\t\tsize = w;\n\telse if (!w && h)\n\t\tsize = 'x' + h;\n\n\treturn self.push('-thumbnail', size + options, 1, true);\n};\n\nImageProto.geometry = function(w, h, options) {\n\toptions = options || '';\n\n\tvar self = this;\n\tvar size = '';\n\n\tif (w && h)\n\t\tsize = w + 'x' + h;\n\telse if (w && !h)\n\t\tsize = w;\n\telse if (!w && h)\n\t\tsize = 'x' + h;\n\n\treturn self.push('-geometry', size + options, 1, true);\n};\n\n\nImageProto.filter = function(type) {\n\treturn this.push('-filter', type, 1, true);\n};\n\nImageProto.trim = function() {\n\treturn this.push('-trim +repage', 1);\n};\n\nImageProto.limit = function(type, value) {\n\tthis.islimit = true;\n\treturn this.push('-limit', type + ' ' + value, 1);\n};\n\nImageProto.extent = function(w, h, x, y) {\n\n\tvar self = this;\n\tvar size = '';\n\n\tif (w && h)\n\t\tsize = w + 'x' + h;\n\telse if (w && !h)\n\t\tsize = w;\n\telse if (!w && h)\n\t\tsize = 'x' + h;\n\n\tif (x || y) {\n\t\t!x && (x = 0);\n\t\t!y && (y = 0);\n\t\tsize += (x >= 0 ? '+' : '') + x + (y >= 0 ? '+' : '') + y;\n\t}\n\n\treturn self.push('-extent', size, 4, true);\n};\n\n/**\n * Resize picture to miniature (full picture)\n * @param {Number} w\n * @param {Number} h\n * @param {String} color Optional, background color.\n * @param {String} filter Optional, resize filter (default: Box)\n * @return {Image}\n */\nImageProto.miniature = function(w, h, color, filter) {\n\treturn this.filter(filter || 'Hamming').thumbnail(w, h).background(color ? color : 'white').align('center').extent(w, h);\n};\n\n/**\n * Resize picture to center\n * @param {Number} w\n * @param {Number} h\n * @param {String} color Optional, background color.\n * @return {Image}\n */\nImageProto.resizeCenter = ImageProto.resize_center = function(w, h, color) {\n\treturn this.resize(w, h, '^').background(color ? color : 'white').align('center').crop(w, h);\n};\n\n/**\n * Resize picture to align\n * @param {Number} w\n * @param {Number} h\n * @param {String} align (top, center, bottom)\n * @param {String} color Optional, background color.\n * @return {Image}\n */\nImageProto.resizeAlign = ImageProto.resize_align = function(w, h, align, color) {\n\treturn this.resize(w, h, '^').background(color ? color : 'white').align(align || 'center').crop(w, h);\n};\n\nImageProto.scale = function(w, h, options) {\n\toptions = options || '';\n\n\tvar self = this;\n\tvar size = '';\n\n\tif (w && h)\n\t\tsize = w + 'x' + h;\n\telse if (w && !h)\n\t\tsize = w;\n\telse if (!w && h)\n\t\tsize = 'x' + h;\n\n\treturn self.push('-scale', size + options, 1, true);\n};\n\nImageProto.crop = function(w, h, x, y) {\n\treturn this.push('-crop', w + 'x' + h + '+' + (x || 0) + '+' + (y || 0), 4, true);\n};\n\nImageProto.quality = function(percentage) {\n\treturn this.push('-quality', percentage || 80, 5, true);\n};\n\nImageProto.align = function(type) {\n\n\tvar output;\n\n\tswitch (type) {\n\t\tcase 'left top':\n\t\tcase 'top left':\n\t\t\toutput = 'NorthWest';\n\t\t\tbreak;\n\t\tcase 'left bottom':\n\t\tcase 'bottom left':\n\t\t\toutput = 'SouthWest';\n\t\t\tbreak;\n\t\tcase 'right top':\n\t\tcase 'top right':\n\t\t\toutput = 'NorthEast';\n\t\t\tbreak;\n\t\tcase 'right bottom':\n\t\tcase 'bottom right':\n\t\t\toutput = 'SouthEast';\n\t\t\tbreak;\n\t\tcase 'left center':\n\t\tcase 'center left':\n\t\tcase 'left':\n\t\t\toutput = 'West';\n\t\t\tbreak;\n\t\tcase 'right center':\n\t\tcase 'center right':\n\t\tcase 'right':\n\t\t\toutput = 'East';\n\t\t\tbreak;\n\t\tcase 'bottom center':\n\t\tcase 'center bottom':\n\t\tcase 'bottom':\n\t\t\toutput = 'South';\n\t\t\tbreak;\n\t\tcase 'top center':\n\t\tcase 'center top':\n\t\tcase 'top':\n\t\t\toutput = 'North';\n\t\t\tbreak;\n\t\tcase 'center center':\n\t\tcase 'center':\n\t\tcase 'middle':\n\t\t\toutput = 'Center';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\toutput = type;\n\t\t\tbreak;\n\t}\n\n\toutput && this.push('-gravity', output, 3, true);\n\treturn this;\n};\n\nImageProto.gravity = function(type) {\n\treturn this.align(type);\n};\n\nImageProto.blur = function(radius) {\n\treturn this.push('-blur', radius, 10, true);\n};\n\nImageProto.normalize = function() {\n\treturn this.push('-normalize', null, 10);\n};\n\nImageProto.rotate = function(deg) {\n\treturn this.push('-rotate', deg || 0, 8, true);\n};\n\nImageProto.flip = function() {\n\treturn this.push('-flip', null, 10);\n};\n\nImageProto.flop = function() {\n\treturn this.push('-flop', null, 10);\n};\n\nImageProto.define = function(value) {\n\treturn this.push('-define', value, 10, true);\n};\n\nImageProto.minify = function() {\n\treturn this.push('+profile', '*', null, 10, true);\n};\n\nImageProto.grayscale = function() {\n\treturn this.push('-colorspace', 'Gray', 10, true);\n};\n\nImageProto.bitdepth = function(value) {\n\treturn this.push('-depth', value, 10, true);\n};\n\nImageProto.colors = function(value) {\n\treturn this.push('-colors', value, 10, true);\n};\n\nImageProto.background = function(color) {\n\treturn this.push('-background', color, 2, true).push('-extent 0x0', null, 2);\n};\n\nImageProto.fill = function(color) {\n\treturn this.push('-fill', color, 2, true);\n};\n\nImageProto.sepia = function() {\n\treturn this.push('-modulate', '115,0,100', 4).push('-colorize', '7,21,50', 5);\n};\n\nImageProto.watermark = function(filename, x, y, w, h) {\n\treturn this.push('-draw', 'image over {1},{2} {3},{4} {5}{0}{5}'.format(filename, x || 0, y || 0, w || 0, h || 0, D), 6, true);\n};\n\nImageProto.make = function(fn) {\n\tfn.call(this, this);\n\treturn this;\n};\n\nImageProto.command = function(key, value, priority, esc) {\n\n\tif (priority === true) {\n\t\tpriority = 0;\n\t\tesc = true;\n\t}\n\n\treturn this.push(key, value, priority || 10, esc);\n};\n\nfunction wrap(command, empty) {\n\treturn (empty ? ' ' : '') + (command === '-' ? command : (D + command.replace(REGEXP_ESCAPE, '') + D));\n}\n\nexports.Image = Image;\nexports.Picture = Image;\n\nexports.init = function(filename, cmd, width, height) {\n\treturn new Image(filename, cmd, width, height);\n};\n\nexports.load = function(filename, cmd, width, height) {\n\treturn new Image(filename, cmd, width, height);\n};\n\nexports.middleware = function(type, fn) {\n\tif (type[0] === '.')\n\t\ttype = type.substring(1);\n\tmiddlewares[type] = fn;\n};\n\n// Clears cache with commands\nexports.clear = function() {\n\tCACHE = {};\n};\n\nglobal.Image = exports;\n"], "filenames": ["image.js"], "buggy_code_start_loc": [40], "buggy_code_end_loc": [326], "fixing_code_start_loc": [41], "fixing_code_end_loc": [327], "type": "CWE-78", "message": "This affects the package total.js before 3.4.7. The issue occurs in the image.pipe and image.stream functions. The type parameter is used to build the command that is then executed using child_process.spawn. The issue occurs because child_process.spawn is called with the option shell set to true and because the type parameter is not properly sanitized.", "other": {"cve": {"id": "CVE-2020-28494", "sourceIdentifier": "report@snyk.io", "published": "2021-02-02T11:15:13.067", "lastModified": "2021-07-21T11:39:23.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "This affects the package total.js before 3.4.7. The issue occurs in the image.pipe and image.stream functions. The type parameter is used to build the command that is then executed using child_process.spawn. The issue occurs because child_process.spawn is called with the option shell set to true and because the type parameter is not properly sanitized."}, {"lang": "es", "value": "Esto afecta al paquete total.js versiones anteriores a 3.4.7.&#xa0;El problema ocurre en las funciones image.pipe e image.stream.&#xa0;El par\u00e1metro type es usado para construir el comando que luego es ejecutado usando child_process.spawn.&#xa0;El problema ocurre porque child_process.spawn es llamado con la opci\u00f3n shell ajustada en true y porque el par\u00e1metro type no est\u00e1 apropiadamente saneado"}], "metrics": {"cvssMetricV31": [{"source": "report@snyk.io", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 8.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:totaljs:total.js:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "3.4.7", "matchCriteriaId": "09C704BC-AD46-464A-B3CD-D2D54FF353BA"}]}]}], "references": [{"url": "https://github.com/totaljs/framework/commit/6192491ab2631e7c1d317c221f18ea613e2c18a5", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-TOTALJS-1046672", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/totaljs/framework/commit/6192491ab2631e7c1d317c221f18ea613e2c18a5"}}