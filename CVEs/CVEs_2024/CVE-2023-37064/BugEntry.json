{"buggy_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CoreBundle\\Entity\\ExtraField as EntityExtraField;\nuse Chamilo\\CoreBundle\\Entity\\ExtraFieldRelTag;\nuse Chamilo\\CoreBundle\\Entity\\Tag;\n\n/**\n * Class ExtraField.\n */\nclass ExtraField extends Model\n{\n    public const FIELD_TYPE_TEXT = 1;\n    public const FIELD_TYPE_TEXTAREA = 2;\n    public const FIELD_TYPE_RADIO = 3;\n    public const FIELD_TYPE_SELECT = 4;\n    public const FIELD_TYPE_SELECT_MULTIPLE = 5;\n    public const FIELD_TYPE_DATE = 6;\n    public const FIELD_TYPE_DATETIME = 7;\n    public const FIELD_TYPE_DOUBLE_SELECT = 8;\n    public const FIELD_TYPE_DIVIDER = 9;\n    public const FIELD_TYPE_TAG = 10;\n    public const FIELD_TYPE_TIMEZONE = 11;\n    public const FIELD_TYPE_SOCIAL_PROFILE = 12;\n    public const FIELD_TYPE_CHECKBOX = 13;\n    public const FIELD_TYPE_MOBILE_PHONE_NUMBER = 14;\n    public const FIELD_TYPE_INTEGER = 15;\n    public const FIELD_TYPE_FILE_IMAGE = 16;\n    public const FIELD_TYPE_FLOAT = 17;\n    public const FIELD_TYPE_FILE = 18;\n    public const FIELD_TYPE_VIDEO_URL = 19;\n    public const FIELD_TYPE_LETTERS_ONLY = 20;\n    public const FIELD_TYPE_ALPHANUMERIC = 21;\n    public const FIELD_TYPE_LETTERS_SPACE = 22;\n    public const FIELD_TYPE_ALPHANUMERIC_SPACE = 23;\n    public const FIELD_TYPE_GEOLOCALIZATION = 24;\n    public const FIELD_TYPE_GEOLOCALIZATION_COORDINATES = 25;\n    public const FIELD_TYPE_SELECT_WITH_TEXT_FIELD = 26;\n    public const FIELD_TYPE_TRIPLE_SELECT = 27;\n    public $columns = [\n        'id',\n        'field_type',\n        'variable',\n        'display_text',\n        'default_value',\n        'field_order',\n        'visible_to_self',\n        'visible_to_others',\n        'changeable',\n        'filter',\n        'extra_field_type',\n        //Enable this when field_loggeable is introduced as a table field (2.0)\n        //'field_loggeable',\n        'created_at',\n    ];\n\n    public $ops = [\n        'eq' => '=', //equal\n        'ne' => '<>', //not equal\n        'lt' => '<', //less than\n        'le' => '<=', //less than or equal\n        'gt' => '>', //greater than\n        'ge' => '>=', //greater than or equal\n        'bw' => 'LIKE', //begins with\n        'bn' => 'NOT LIKE', //doesn't begin with\n        'in' => 'LIKE', //is in\n        'ni' => 'NOT LIKE', //is not in\n        'ew' => 'LIKE', //ends with\n        'en' => 'NOT LIKE', //doesn't end with\n        'cn' => 'LIKE', //contains\n        'nc' => 'NOT LIKE',  //doesn't contain\n    ];\n\n    public $type = 'user';\n    public $pageName;\n    public $pageUrl;\n    public $extraFieldType = 0;\n\n    public $table_field_options;\n    public $table_field_values;\n    public $table_field_tag;\n    public $table_field_rel_tag;\n\n    public $handler_id;\n    public $primaryKey;\n\n    /**\n     * @param string $type\n     */\n    public function __construct($type)\n    {\n        parent::__construct();\n\n        $this->type = $type;\n        $this->table = Database::get_main_table(TABLE_EXTRA_FIELD);\n        $this->table_field_options = Database::get_main_table(TABLE_EXTRA_FIELD_OPTIONS);\n        $this->table_field_values = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $this->table_field_tag = Database::get_main_table(TABLE_MAIN_TAG);\n        $this->table_field_rel_tag = Database::get_main_table(TABLE_MAIN_EXTRA_FIELD_REL_TAG);\n\n        $this->handler_id = 'item_id';\n\n        switch ($this->type) {\n            case 'calendar_event':\n                $this->extraFieldType = EntityExtraField::CALENDAR_FIELD_TYPE;\n                break;\n            case 'course':\n                $this->extraFieldType = EntityExtraField::COURSE_FIELD_TYPE;\n                $this->primaryKey = 'id';\n                break;\n            case 'user':\n                $this->extraFieldType = EntityExtraField::USER_FIELD_TYPE;\n                $this->primaryKey = 'id';\n                break;\n            case 'session':\n                $this->extraFieldType = EntityExtraField::SESSION_FIELD_TYPE;\n                $this->primaryKey = 'id';\n                break;\n            case 'exercise':\n                $this->extraFieldType = EntityExtraField::EXERCISE_FIELD_TYPE;\n                break;\n            case 'question':\n                $this->extraFieldType = EntityExtraField::QUESTION_FIELD_TYPE;\n                break;\n            case 'lp':\n                $this->extraFieldType = EntityExtraField::LP_FIELD_TYPE;\n                break;\n            case 'lp_item':\n                $this->extraFieldType = EntityExtraField::LP_ITEM_FIELD_TYPE;\n                break;\n            case 'skill':\n                $this->extraFieldType = EntityExtraField::SKILL_FIELD_TYPE;\n                break;\n            case 'work':\n                $this->extraFieldType = EntityExtraField::WORK_FIELD_TYPE;\n                break;\n            case 'career':\n                $this->extraFieldType = EntityExtraField::CAREER_FIELD_TYPE;\n                break;\n            case 'user_certificate':\n                $this->extraFieldType = EntityExtraField::USER_CERTIFICATE;\n                break;\n            case 'survey':\n                $this->extraFieldType = EntityExtraField::SURVEY_FIELD_TYPE;\n                break;\n            case 'scheduled_announcement':\n                $this->extraFieldType = EntityExtraField::SCHEDULED_ANNOUNCEMENT;\n                break;\n            case 'terms_and_condition':\n                $this->extraFieldType = EntityExtraField::TERMS_AND_CONDITION_TYPE;\n                break;\n            case 'forum_category':\n                $this->extraFieldType = EntityExtraField::FORUM_CATEGORY_TYPE;\n                break;\n            case 'forum_post':\n                $this->extraFieldType = EntityExtraField::FORUM_POST_TYPE;\n                break;\n            case 'track_exercise':\n                $this->extraFieldType = EntityExtraField::TRACK_EXERCISE_FIELD_TYPE;\n                break;\n            case 'portfolio':\n                $this->extraFieldType = EntityExtraField::PORTFOLIO_TYPE;\n                break;\n            case 'lp_view':\n                $this->extraFieldType = EntityExtraField::LP_VIEW_TYPE;\n                break;\n            case 'course_announcement':\n                $this->extraFieldType = EntityExtraField::COURSE_ANNOUNCEMENT;\n                break;\n            case 'message':\n                $this->extraFieldType = EntityExtraField::MESSAGE_TYPE;\n                break;\n            case 'document':\n                $this->extraFieldType = EntityExtraField::DOCUMENT_TYPE;\n                break;\n            case 'attendance_calendar':\n                $this->extraFieldType = EntityExtraField::ATTENDANCE_CALENDAR_TYPE;\n                break;\n        }\n\n        $this->pageUrl = 'extra_fields.php?type='.$this->type;\n        // Example QuestionFields\n        $this->pageName = get_lang(ucwords($this->type).'Fields');\n    }\n\n    /**\n     * @return array\n     */\n    public static function getValidExtraFieldTypes()\n    {\n        $result = [\n            'user',\n            'course',\n            'session',\n            'question',\n            'lp',\n            'calendar_event',\n            'lp_item',\n            'skill',\n            'work',\n            'career',\n            'user_certificate',\n            'survey',\n            'terms_and_condition',\n            'forum_category',\n            'forum_post',\n            'exercise',\n            'track_exercise',\n            'lp_view',\n            'course_announcement',\n            'message',\n            'document',\n            'attendance_calendar',\n        ];\n\n        if (api_get_configuration_value('allow_scheduled_announcements')) {\n            $result[] = 'scheduled_announcement';\n        }\n\n        if (api_get_configuration_value('allow_portfolio_tool')) {\n            $result[] = 'portfolio';\n        }\n        sort($result);\n\n        return $result;\n    }\n\n    /**\n     * Converts a string like this:\n     * France:Paris;Bretagne;Marseille;Lyon|Belgique:Bruxelles;Namur;Li\u00e8ge;Bruges|Peru:Lima;Piura;\n     * into\n     * array(\n     *   'France' =>\n     *      array('Paris', 'Bretagne', 'Marseille'),\n     *   'Belgique' =>\n     *      array('Namur', 'Li\u00e8ge')\n     * ), etc.\n     *\n     * @param string $string\n     *\n     * @return array\n     */\n    public static function extra_field_double_select_convert_string_to_array($string)\n    {\n        $options = explode('|', $string);\n        $options_parsed = [];\n        $id = 0;\n\n        if (!empty($options)) {\n            foreach ($options as $sub_options) {\n                $options = explode(':', $sub_options);\n                $sub_sub_options = isset($options[1]) ? explode(';', $options[1]) : [];\n                $options_parsed[$id] = [\n                    'label' => $options[0],\n                    'options' => $sub_sub_options,\n                ];\n                $id++;\n            }\n        }\n\n        return $options_parsed;\n    }\n\n    /**\n     * @param $string\n     *\n     * @return array\n     */\n    public static function tripleSelectConvertStringToArray($string)\n    {\n        $options = [];\n        foreach (explode('|', $string) as $i => $item0) {\n            $level1 = explode('\\\\', $item0);\n\n            foreach ($level1 as $j => $item1) {\n                if (0 === $j) {\n                    $options[] = ['label' => $item1, 'options' => []];\n\n                    continue;\n                }\n\n                foreach (explode(':', $item1) as $k => $item2) {\n                    if (0 === $k) {\n                        $options[$i]['options'][] = ['label' => $item2, 'options' => []];\n\n                        continue;\n                    }\n\n                    $options[$i]['options'][$j - 1]['options'][] = explode(';', $item2);\n                }\n            }\n        }\n\n        array_walk_recursive(\n            $options,\n            function (&$item) {\n                $item = trim($item);\n            }\n        );\n\n        return $options;\n    }\n\n    /**\n     * @param array $options the result of the get_field_options_by_field() array\n     *\n     * @return string\n     */\n    public static function extra_field_double_select_convert_array_to_string($options)\n    {\n        $string = null;\n        $optionsParsed = self::extra_field_double_select_convert_array_to_ordered_array($options);\n\n        if (!empty($optionsParsed)) {\n            foreach ($optionsParsed as $option) {\n                foreach ($option as $key => $item) {\n                    $string .= $item['display_text'];\n                    if (0 == $key) {\n                        $string .= ':';\n                    } else {\n                        if (isset($option[$key + 1])) {\n                            $string .= ';';\n                        }\n                    }\n                }\n                $string .= '|';\n            }\n        }\n\n        if (!empty($string)) {\n            $string = substr($string, 0, strlen($string) - 1);\n        }\n\n        return $string;\n    }\n\n    /**\n     * @param array $options The result of the get_field_options_by_field() array\n     *\n     * @return string\n     */\n    public static function extraFieldSelectWithTextConvertArrayToString(array $options)\n    {\n        $parsedOptions = self::extra_field_double_select_convert_array_to_ordered_array($options);\n\n        if (empty($parsedOptions)) {\n            return '';\n        }\n\n        $string = '';\n        foreach ($parsedOptions as $options) {\n            $option = current($options);\n            $string .= $option['display_text'];\n            $string .= '|';\n        }\n\n        return rtrim($string, '|');\n    }\n\n    /**\n     * @return string\n     */\n    public static function tripleSelectConvertArrayToString(array $options)\n    {\n        $parsedOptions = self::tripleSelectConvertArrayToOrderedArray($options);\n        $string = '';\n        foreach ($parsedOptions['level1'] as $item1) {\n            $string .= $item1['display_text'];\n            $level2 = self::getOptionsFromTripleSelect($parsedOptions['level2'], $item1['id']);\n\n            foreach ($level2 as $item2) {\n                $string .= '\\\\'.$item2['display_text'].':';\n                $level3 = self::getOptionsFromTripleSelect($parsedOptions['level3'], $item2['id']);\n\n                $string .= implode(';', array_column($level3, 'display_text'));\n            }\n\n            $string .= '|';\n        }\n\n        return trim($string, '\\\\|;');\n    }\n\n    /**\n     * @param string $variable\n     * @param string $dataValue\n     *\n     * @return string\n     */\n    public static function getLocalizationJavascript($variable, $dataValue)\n    {\n        $dataValue = addslashes($dataValue);\n        $html = \"<script>\n            $(function() {\n                if (typeof google === 'object') {\n                    var address = '$dataValue';\n                    initializeGeo{$variable}(address, false);\n\n                    $('#geolocalization_extra_{$variable}').on('click', function() {\n                        var address = $('#{$variable}').val();\n                        initializeGeo{$variable}(address, false);\n                        return false;\n                    });\n\n                    $('#myLocation_extra_{$variable}').on('click', function() {\n                        myLocation{$variable}();\n                        return false;\n                    });\n\n                    // When clicking enter\n                    $('#{$variable}').keypress(function(event) {\n                        if (event.which == 13) {\n                            $('#geolocalization_extra_{$variable}').click();\n                            return false;\n                        }\n                    });\n\n                    // On focus out update city\n                    $('#{$variable}').focusout(function() {\n                        $('#geolocalization_extra_{$variable}').click();\n                        return false;\n                    });\n\n                    return;\n                }\n\n                $('#map_extra_{$variable}')\n                    .html('<div class=\\\"alert alert-info\\\">\"\n            .addslashes(get_lang('YouNeedToActivateTheGoogleMapsPluginInAdminPlatformToSeeTheMap'))\n            .\"</div>');\n            });\n\n            function myLocation{$variable}()\n            {\n                if (navigator.geolocation) {\n                    var geoPosition = function(position) {\n                        var lat = position.coords.latitude;\n                        var lng = position.coords.longitude;\n                        var latLng = new google.maps.LatLng(lat, lng);\n                        initializeGeo{$variable}(false, latLng);\n                    };\n\n                    var geoError = function(error) {\n                        alert('Geocode \".get_lang('Error').\": ' + error);\n                    };\n\n                    var geoOptions = {\n                        enableHighAccuracy: true\n                    };\n                    navigator.geolocation.getCurrentPosition(geoPosition, geoError, geoOptions);\n                }\n            }\n\n            function initializeGeo{$variable}(address, latLng)\n            {\n                var geocoder = new google.maps.Geocoder();\n                var latlng = new google.maps.LatLng(-34.397, 150.644);\n                var myOptions = {\n                    zoom: 15,\n                    center: latlng,\n                    mapTypeControl: true,\n                    mapTypeControlOptions: {\n                        style: google.maps.MapTypeControlStyle.DROPDOWN_MENU\n                    },\n                    navigationControl: true,\n                    mapTypeId: google.maps.MapTypeId.ROADMAP\n                };\n\n                map_{$variable} = new google.maps.Map(\n                    document.getElementById('map_extra_{$variable}'),\n                    myOptions\n                );\n\n                var parameter = address ? {'address': address} : latLng ? {'latLng': latLng} : false;\n\n                if (geocoder && parameter) {\n                    geocoder.geocode(parameter, function(results, status) {\n                        if (status == google.maps.GeocoderStatus.OK) {\n                            if (status != google.maps.GeocoderStatus.ZERO_RESULTS) {\n                                map_{$variable}.setCenter(results[0].geometry.location);\n\n                                // get city and country\n                                var defaultAddress = results[0].formatted_address;\n                                var city = '';\n                                var country = '';\n\n                                for (var i=0; i<results[0].address_components.length; i++) {\n                                    if (results[0].address_components[i].types[0] == \\\"locality\\\") {\n                                        //this is the object you are looking for City\n                                        city = results[0].address_components[i];\n                                    }\n                                    /*if (results[j].address_components[i].types[0] == \\\"administrative_area_level_1\\\") {\n                                        //this is the object you are looking for State\n                                        region = results[0].address_components[i];\n                                    }*/\n                                    if (results[0].address_components[i].types[0] == \\\"country\\\") {\n                                        //this is the object you are looking for\n                                        country = results[0].address_components[i];\n                                    }\n                                }\n\n                                if (city && city.long_name && country && country.long_name) {\n                                    defaultAddress = city.long_name + ', ' + country.long_name;\n                                }\n                                $('#{$variable}').val(defaultAddress);\n                                $('#{$variable}_coordinates').val(\n                                    results[0].geometry.location.lat()+','+results[0].geometry.location.lng()\n                                );\n\n                                var infowindow = new google.maps.InfoWindow({\n                                    content: '<b>' + $('#extra_{$variable}').val() + '</b>',\n                                    size: new google.maps.Size(150, 50)\n                                });\n\n                                var marker = new google.maps.Marker({\n                                    position: results[0].geometry.location,\n                                    map: map_{$variable},\n                                    title: $('#extra_{$variable}').val()\n                                });\n                                google.maps.event.addListener(marker, 'click', function() {\n                                    infowindow.open(map_{$variable}, marker);\n                                });\n                            } else {\n                                alert('\".get_lang('NotFound').\"');\n                            }\n                        } else {\n                            alert('Geocode \".get_lang('Error').': '.get_lang('AddressField').' '.get_lang('NotFound').\"');\n                        }\n                    });\n                }\n            }\n            </script>\";\n\n        return $html;\n    }\n\n    /**\n     * @param string $variable\n     * @param string $text\n     *\n     * @return string\n     */\n    public static function getLocalizationInput($variable, $text)\n    {\n        $html = '\n                <div class=\"form-group\">\n                    <label for=\"geolocalization_extra_'.$variable.'\"\n                        class=\"col-sm-2 control-label\"></label>\n                    <div class=\"col-sm-8\">\n                        <button class=\"btn btn-default\"\n                            id=\"geolocalization_extra_'.$variable.'\"\n                            name=\"geolocalization_extra_'.$variable.'\"\n                            type=\"submit\">\n                            <em class=\"fa fa-map-marker\"></em> '.get_lang('SearchGeolocalization').'\n                        </button>\n                        <button class=\"btn btn-default\" id=\"myLocation_extra_'.$variable.'\"\n                            name=\"myLocation_extra_'.$variable.'\"\n                            type=\"submit\">\n                            <em class=\"fa fa-crosshairs\"></em> '.get_lang('MyLocation').'\n                        </button>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"map_extra_'.$variable.'\" class=\"col-sm-2 control-label\">\n                        '.$text.' - '.get_lang('Map').'\n                    </label>\n                    <div class=\"col-sm-8\">\n                        <div name=\"map_extra_'.$variable.'\"\n                            id=\"map_extra_'.$variable.'\" style=\"width:100%; height:300px;\">\n                        </div>\n                    </div>\n                </div>\n            ';\n\n        return $html;\n    }\n\n    /**\n     * @return int\n     */\n    public function get_count()\n    {\n        $em = Database::getManager();\n        $query = $em->getRepository('ChamiloCoreBundle:ExtraField')->createQueryBuilder('e');\n        $query->select('count(e.id)');\n        $query->where('e.extraFieldType = :type');\n        $query->setParameter('type', $this->getExtraFieldType());\n\n        return $query->getQuery()->getSingleScalarResult();\n    }\n\n    /**\n     * @return int\n     */\n    public function getExtraFieldType()\n    {\n        return (int) $this->extraFieldType;\n    }\n\n    /**\n     * @param string $sidx\n     * @param string $sord\n     * @param int    $start\n     * @param int    $limit\n     *\n     * @return array\n     */\n    public function getAllGrid($sidx, $sord, $start, $limit)\n    {\n        switch ($sidx) {\n            case 'field_order':\n                $sidx = 'e.fieldOrder';\n                break;\n            case 'variable':\n                $sidx = 'e.variable';\n                break;\n            case 'display_text':\n                $sidx = 'e.displayText';\n                break;\n            case 'changeable':\n                $sidx = 'e.changeable';\n                break;\n            case 'visible_to_self':\n                $sidx = 'e.visibleToSelf';\n                break;\n            case 'visible_to_others':\n                $sidx = 'e.visibleToOthers';\n                break;\n            case 'filter':\n                $sidx = 'e.filter';\n                break;\n        }\n        $em = Database::getManager();\n        $query = $em->getRepository('ChamiloCoreBundle:ExtraField')->createQueryBuilder('e');\n        $query->select('e')\n            ->where('e.extraFieldType = :type')\n            ->setParameter('type', $this->getExtraFieldType())\n            ->orderBy($sidx, $sord)\n            ->setFirstResult($start)\n            ->setMaxResults($limit);\n\n        return $query->getQuery()->getArrayResult();\n    }\n\n    /**\n     * Get all the field info for tags.\n     *\n     * @param string $variable\n     *\n     * @return array|bool\n     */\n    public function get_handler_field_info_by_tags($variable)\n    {\n        $variable = Database::escape_string($variable);\n        $sql = \"SELECT * FROM {$this->table}\n                WHERE\n                    variable = '$variable' AND\n                    extra_field_type = $this->extraFieldType\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $row = Database::fetch_array($result, 'ASSOC');\n            $row['display_text'] = $this->translateDisplayName(\n                $row['variable'],\n                $row['display_text']\n            );\n            $row['options'] = [];\n\n            // All the tags of the field\n            $sql = \"SELECT * FROM $this->table_field_tag\n                    WHERE field_id='\".intval($row['id']).\"'\n                    ORDER BY id ASC\";\n            $result = Database::query($sql);\n            while ($option = Database::fetch_array($result, 'ASSOC')) {\n                $row['options'][$option['id']] = $option;\n            }\n\n            return $row;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Translate the display text for a extra field.\n     *\n     * @param string $variable\n     * @param string $defaultDisplayText\n     *\n     * @return string\n     */\n    public static function translateDisplayName($variable, $defaultDisplayText)\n    {\n        $camelCase = api_underscore_to_camel_case($variable);\n\n        return isset($GLOBALS[$camelCase]) ? $GLOBALS[$camelCase] : $defaultDisplayText;\n    }\n\n    /**\n     * @param int $fieldId\n     *\n     * @return array|bool\n     */\n    public function getFieldInfoByFieldId($fieldId)\n    {\n        $fieldId = (int) $fieldId;\n        $sql = \"SELECT * FROM {$this->table}\n                WHERE\n                    id = '$fieldId' AND\n                    extra_field_type = $this->extraFieldType\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $row = Database::fetch_array($result, 'ASSOC');\n\n            // All the options of the field\n            $sql = \"SELECT * FROM $this->table_field_options\n                    WHERE field_id='\".$fieldId.\"'\n                    ORDER BY option_order ASC\";\n            $result = Database::query($sql);\n            while ($option = Database::fetch_array($result)) {\n                $row['options'][$option['id']] = $option;\n            }\n\n            return $row;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Add elements to a form.\n     *\n     * @param FormValidator $form                            The form object to which to attach this element\n     * @param int           $itemId                          The item (course, user, session, etc) this extra_field is linked to\n     * @param array         $exclude                         Variables of extra field to exclude\n     * @param bool          $filter                          Whether to get only the fields with the \"filter\" flag set to 1 (true)\n     *                                                       or not (false)\n     * @param bool          $useTagAsSelect                  Whether to show tag fields as select drop-down or not\n     * @param array         $showOnlyTheseFields             Limit the extra fields shown to just the list given here\n     * @param array         $orderFields                     An array containing the names of the fields shown, in the right order\n     * @param array         $extraData\n     * @param bool          $orderDependingDefaults\n     * @param bool          $adminPermissions\n     * @param array         $separateExtraMultipleSelect\n     * @param array         $customLabelsExtraMultipleSelect\n     * @param bool          $addEmptyOptionSelects\n     * @param array         $introductionTextList\n     * @param array         $requiredFields\n     * @param bool          $hideGeoLocalizationDetails\n     *\n     * @throws Exception\n     *\n     * @return array|bool If relevant, returns a one-element array with JS code to be added to the page HTML headers.\n     *                    Returns false if the form object was not given\n     */\n    public function addElements(\n        $form,\n        $itemId = 0,\n        $exclude = [],\n        $filter = false,\n        $useTagAsSelect = false,\n        $showOnlyTheseFields = [],\n        $orderFields = [],\n        $extraData = [],\n        $orderDependingDefaults = false,\n        $adminPermissions = false,\n        $separateExtraMultipleSelect = [],\n        $customLabelsExtraMultipleSelect = [],\n        $addEmptyOptionSelects = false,\n        $introductionTextList = [],\n        $requiredFields = [],\n        $hideGeoLocalizationDetails = false,\n        $help = false\n    ) {\n        if (empty($form)) {\n            return false;\n        }\n\n        $itemId = (int) $itemId;\n        $form->addHidden('item_id', $itemId);\n        $extraData = false;\n        if (!empty($itemId)) {\n            $extraData = $this->get_handler_extra_data($itemId);\n            if (!empty($showOnlyTheseFields)) {\n                $setData = [];\n                foreach ($showOnlyTheseFields as $variable) {\n                    $extraName = 'extra_'.$variable;\n                    if (in_array($extraName, array_keys($extraData))) {\n                        $setData[$extraName] = $extraData[$extraName];\n                    }\n                }\n                $form->setDefaults($setData);\n            } else {\n                $form->setDefaults($extraData);\n            }\n        }\n\n        $conditions = [];\n        if ($filter) {\n            $conditions = ['filter = ?' => 1];\n        }\n\n        $extraFields = $this->get_all($conditions, 'option_order');\n        $extra = $this->set_extra_fields_in_form(\n            $form,\n            $extraData,\n            $adminPermissions,\n            $extraFields,\n            $itemId,\n            $exclude,\n            $useTagAsSelect,\n            $showOnlyTheseFields,\n            $orderFields,\n            $orderDependingDefaults,\n            $separateExtraMultipleSelect,\n            $customLabelsExtraMultipleSelect,\n            $addEmptyOptionSelects,\n            $introductionTextList,\n            $hideGeoLocalizationDetails,\n            $help\n        );\n\n        if (!empty($requiredFields)) {\n            /** @var HTML_QuickForm_input $element */\n            foreach ($form->getElements() as $element) {\n                $name = str_replace('extra_', '', $element->getName());\n                if (in_array($name, $requiredFields)) {\n                    $form->setRequired($element);\n                }\n            }\n        }\n\n        return $extra;\n    }\n\n    /**\n     * Return an array of all the extra fields available for this item.\n     *\n     * @param int $itemId (session_id, question_id, course id)\n     *\n     * @return array\n     */\n    public function get_handler_extra_data($itemId)\n    {\n        if (empty($itemId)) {\n            return [];\n        }\n\n        $extra_data = [];\n        $fields = $this->get_all();\n        $field_values = new ExtraFieldValue($this->type);\n\n        if (!empty($fields)) {\n            foreach ($fields as $field) {\n                $field_value = $field_values->get_values_by_handler_and_field_id(\n                    $itemId,\n                    $field['id']\n                );\n\n                if (self::FIELD_TYPE_TAG == $field['field_type']) {\n                    $tags = UserManager::get_user_tags_to_string(\n                        $itemId,\n                        $field['id'],\n                        false\n                    );\n                    $extra_data['extra_'.$field['variable']] = $tags;\n\n                    continue;\n                }\n\n                if ($field_value) {\n                    $variable = $field['variable'];\n                    $field_value = $field_value['value'];\n                    switch ($field['field_type']) {\n                        case self::FIELD_TYPE_TAG:\n                            $tags = UserManager::get_user_tags_to_string(\n                                $itemId,\n                                $field['id'],\n                                false\n                            );\n\n                            $extra_data['extra_'.$field['variable']] = $tags;\n                            break;\n                        case self::FIELD_TYPE_DOUBLE_SELECT:\n                        case self::FIELD_TYPE_SELECT_WITH_TEXT_FIELD:\n                            $selected_options = explode('::', $field_value);\n                            $firstOption = isset($selected_options[0]) ? $selected_options[0] : '';\n                            $secondOption = isset($selected_options[1]) ? $selected_options[1] : '';\n                            $extra_data['extra_'.$field['variable']]['extra_'.$field['variable']] = $firstOption;\n                            $extra_data['extra_'.$field['variable']]['extra_'.$field['variable'].'_second'] = $secondOption;\n\n                            break;\n                        case self::FIELD_TYPE_SELECT_MULTIPLE:\n                            $field_value = explode(';', $field_value);\n                            $extra_data['extra_'.$field['variable']] = $field_value;\n                            break;\n                        case self::FIELD_TYPE_RADIO:\n                            $extra_data['extra_'.$field['variable']]['extra_'.$field['variable']] = $field_value;\n                            break;\n                        case self::FIELD_TYPE_TRIPLE_SELECT:\n                            [$level1, $level2, $level3] = explode(';', $field_value);\n\n                            $extra_data[\"extra_$variable\"][\"extra_$variable\"] = $level1;\n                            $extra_data[\"extra_$variable\"][\"extra_{$variable}_second\"] = $level2;\n                            $extra_data[\"extra_$variable\"][\"extra_{$variable}_third\"] = $level3;\n                            break;\n                        default:\n                            $extra_data['extra_'.$field['variable']] = $field_value;\n                            break;\n                    }\n                } else {\n                    // Set default values\n                    if (isset($field['field_default_value']) &&\n                        !empty($field['field_default_value'])\n                    ) {\n                        $extra_data['extra_'.$field['variable']] = $field['field_default_value'];\n                    }\n                }\n            }\n        }\n\n        return $extra_data;\n    }\n\n    /**\n     * Get an array of all the values from the extra_field and extra_field_options tables\n     * based on the current object's type.\n     *\n     * @param array $conditions\n     * @param null  $order_field_options_by\n     *\n     * @return array\n     */\n    public function get_all($conditions = [], $order_field_options_by = null)\n    {\n        $conditions = Database::parse_conditions(['where' => $conditions]);\n\n        if (empty($conditions)) {\n            $conditions .= ' WHERE extra_field_type = '.$this->extraFieldType;\n        } else {\n            $conditions .= ' AND extra_field_type = '.$this->extraFieldType;\n        }\n\n        $sql = \"SELECT * FROM $this->table\n                $conditions\n                ORDER BY field_order ASC\n        \";\n\n        $result = Database::query($sql);\n        $extraFields = Database::store_result($result, 'ASSOC');\n\n        $option = new ExtraFieldOption($this->type);\n        if (!empty($extraFields)) {\n            foreach ($extraFields as &$extraField) {\n                $extraField['display_text'] = $this->translateDisplayName(\n                    $extraField['variable'],\n                    $extraField['display_text']\n                );\n                $extraField['options'] = $option->get_field_options_by_field(\n                    $extraField['id'],\n                    false,\n                    $order_field_options_by\n                );\n            }\n        }\n\n        return $extraFields;\n    }\n\n    /**\n     * Add an element that matches the given extra field to the given $form object.\n     *\n     * @param FormValidator $form                The form these fields are to be attached to\n     * @param array         $extraData\n     * @param bool          $adminPermissions    Whether the display is considered without edition limits (true) or not\n     *                                           (false)\n     * @param array         $extra\n     * @param int           $itemId              The item (course, user, session, etc) this extra_field is attached to\n     * @param array         $exclude             Extra fields to be skipped, by textual ID\n     * @param bool          $useTagAsSelect      Whether to show tag fields as select drop-down or not\n     * @param array         $showOnlyTheseFields Limit the extra fields shown to just the list given here\n     * @param array         $orderFields         An array containing the names of the fields shown, in the right order\n     *\n     * @throws Exception\n     *\n     * @return array If relevant, returns a one-element array with JS code to be added to the page HTML headers\n     */\n    public function set_extra_fields_in_form(\n        $form,\n        $extraData,\n        $adminPermissions = false,\n        $extra = [],\n        $itemId = null,\n        $exclude = [],\n        $useTagAsSelect = false,\n        $showOnlyTheseFields = [],\n        $orderFields = [],\n        $orderDependingDefaults = false,\n        $separateExtraMultipleSelect = [],\n        $customLabelsExtraMultipleSelect = [],\n        $addEmptyOptionSelects = false,\n        $introductionTextList = [],\n        $hideGeoLocalizationDetails = false,\n        $help = false\n    ) {\n        $jquery_ready_content = null;\n        if (!empty($extra)) {\n            $newOrder = [];\n            if (!empty($orderFields)) {\n                foreach ($orderFields as $order) {\n                    foreach ($extra as $field_details) {\n                        if ($order == $field_details['variable']) {\n                            $newOrder[] = $field_details;\n                        }\n                    }\n                }\n                $extra = $newOrder;\n            }\n\n            foreach ($extra as $field_details) {\n                if (!empty($showOnlyTheseFields)) {\n                    if (!in_array($field_details['variable'], $showOnlyTheseFields)) {\n                        continue;\n                    }\n                }\n\n                // Getting default value id if is set\n                $defaultValueId = null;\n                if (isset($field_details['options']) && !empty($field_details['options'])) {\n                    $valueToFind = null;\n                    if (isset($field_details['field_default_value'])) {\n                        $valueToFind = $field_details['field_default_value'];\n                    }\n                    // If a value is found we override the default value\n                    if (isset($extraData['extra_'.$field_details['variable']])) {\n                        $valueToFind = $extraData['extra_'.$field_details['variable']];\n                    }\n\n                    foreach ($field_details['options'] as $option) {\n                        if ($option['option_value'] == $valueToFind) {\n                            $defaultValueId = $option['id'];\n                        }\n                    }\n                }\n\n                if (!$adminPermissions) {\n                    if (0 == $field_details['visible_to_self']) {\n                        continue;\n                    }\n\n                    if (in_array($field_details['variable'], $exclude)) {\n                        continue;\n                    }\n                }\n\n                if (!empty($introductionTextList) &&\n                    in_array($field_details['variable'], array_keys($introductionTextList))\n                ) {\n                    $form->addHtml($introductionTextList[$field_details['variable']]);\n                }\n\n                $freezeElement = false;\n                if (!$adminPermissions) {\n                    $freezeElement = 0 == $field_details['visible_to_self'] || 0 == $field_details['changeable'];\n                }\n\n                $translatedDisplayText = get_lang($field_details['display_text'], true);\n                $translatedDisplayHelpText = '';\n                if ($help) {\n                    $translatedDisplayHelpText .= get_lang($field_details['display_text'].'Help');\n                }\n                if (!empty($translatedDisplayText)) {\n                    if (!empty($translatedDisplayHelpText)) {\n                        // In this case, exceptionally, display_text is an array\n                        // which is then treated by display_form()\n                        $field_details['display_text'] = [$translatedDisplayText, $translatedDisplayHelpText];\n                    } else {\n                        // We have an helper text, use it\n                        $field_details['display_text'] = $translatedDisplayText;\n                    }\n                }\n\n                switch ($field_details['field_type']) {\n                    case self::FIELD_TYPE_TEXT:\n                        $form->addElement(\n                            'text',\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text'],\n                            [\n                                'id' => 'extra_'.$field_details['variable'],\n                            ]\n                        );\n                        $form->applyFilter(\n                            'extra_'.$field_details['variable'],\n                            'stripslashes'\n                        );\n                        $form->applyFilter(\n                            'extra_'.$field_details['variable'],\n                            'trim'\n                        );\n                        $form->applyFilter(\n                            'extra_'.$field_details['variable'],\n                            'html_filter'\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_TEXTAREA:\n                        $form->addHtmlEditor(\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text'],\n                            false,\n                            false,\n                            [\n                                'ToolbarSet' => 'Profile',\n                                'Width' => '100%',\n                                'Height' => '130',\n                                'id' => 'extra_'.$field_details['variable'],\n                            ]\n                        );\n                        $form->applyFilter('extra_'.$field_details['variable'], 'stripslashes');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'trim');\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_RADIO:\n                        $group = [];\n                        if (isset($field_details['options']) &&\n                            !empty($field_details['options'])\n                        ) {\n                            foreach ($field_details['options'] as $option_details) {\n                                $options[$option_details['option_value']] = $option_details['display_text'];\n                                $group[] = $form->createElement(\n                                    'radio',\n                                    'extra_'.$field_details['variable'],\n                                    $option_details['option_value'],\n                                    $option_details['display_text'].'<br />',\n                                    $option_details['option_value']\n                                );\n                            }\n                        }\n                        $form->addGroup(\n                            $group,\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text']\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_CHECKBOX:\n                        $group = [];\n                        if (isset($field_details['options']) &&\n                            !empty($field_details['options'])\n                        ) {\n                            foreach ($field_details['options'] as $option_details) {\n                                $options[$option_details['option_value']] = $option_details['display_text'];\n                                $group[] = $form->createElement(\n                                    'checkbox',\n                                    'extra_'.$field_details['variable'],\n                                    $option_details['option_value'],\n                                    $option_details['display_text'].'<br />',\n                                    $option_details['option_value']\n                                );\n                            }\n                        } else {\n                            $fieldVariable = \"extra_{$field_details['variable']}\";\n                            $checkboxAttributes = [];\n                            if (is_array($extraData) &&\n                                array_key_exists($fieldVariable, $extraData)\n                            ) {\n                                if (!empty($extraData[$fieldVariable])) {\n                                    $checkboxAttributes['checked'] = 1;\n                                }\n                            }\n\n                            if (empty($checkboxAttributes) &&\n                                isset($field_details['default_value']) && empty($extraData)) {\n                                if (1 == $field_details['default_value']) {\n                                    $checkboxAttributes['checked'] = 1;\n                                }\n                            }\n\n                            // We assume that is a switch on/off with 1 and 0 as values\n                            $group[] = $form->createElement(\n                                'checkbox',\n                                'extra_'.$field_details['variable'],\n                                null,\n                                get_lang('Yes'),\n                                $checkboxAttributes\n                            );\n                        }\n\n                        $form->addGroup(\n                            $group,\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text']\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_SELECT:\n                        $this->addSelectElement($form, $field_details, $defaultValueId, $freezeElement);\n                        break;\n                    case self::FIELD_TYPE_SELECT_MULTIPLE:\n                        $options = [];\n                        if (empty($defaultValueId)) {\n                            $options[''] = get_lang('SelectAnOption');\n                        }\n\n                        if (isset($field_details['options']) && !empty($field_details['options'])) {\n                            foreach ($field_details['options'] as $optionDetails) {\n                                $options[$optionDetails['option_value']] = $optionDetails['display_text'];\n                            }\n                        }\n\n                        $form->addElement(\n                            'select',\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text'],\n                            $options,\n                            [\n                                'multiple' => 'multiple',\n                                'id' => 'extra_'.$field_details['variable'],\n                            ]\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_DATE:\n                        $form->addDatePicker('extra_'.$field_details['variable'], $field_details['display_text']);\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_DATETIME:\n                        $form->addDateTimePicker(\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text']\n                        );\n\n                        $defaults = [];\n                        if (EntityExtraField::LP_ITEM_FIELD_TYPE !== (int) $field_details['extra_field_type']) {\n                            $defaults['extra_'.$field_details['variable']] = api_get_local_time();\n                        }\n                        if (!isset($form->_defaultValues['extra_'.$field_details['variable']])) {\n                            $form->setDefaults($defaults);\n                        }\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_DOUBLE_SELECT:\n                        $jquery_ready_content .= self::addDoubleSelectElement(\n                            $form,\n                            $field_details,\n                            $extraData,\n                            $freezeElement\n                        );\n                        break;\n                    case self::FIELD_TYPE_DIVIDER:\n                        $form->addHtml(\n                            '\n                            <div class=\"form-group \">\n                                <div class=\"col-sm-12\">\n                                    <div class=\"panel-separator\">\n                                       <h4 id=\"'.$field_details['variable'].'\" class=\"form-separator\">'\n                            .$field_details['display_text'].'\n                                       </h4>\n                                    </div>\n                                </div>\n                            </div>\n                        '\n                        );\n                        break;\n                    case self::FIELD_TYPE_TAG:\n                        $variable = $field_details['variable'];\n                        $field_id = $field_details['id'];\n                        $separateValue = 0;\n                        if (isset($separateExtraMultipleSelect[$field_details['variable']])) {\n                            $separateValue = $separateExtraMultipleSelect[$field_details['variable']];\n                        }\n\n                        $selectedOptions = [];\n                        if ($separateValue > 0) {\n                            $em = Database::getManager();\n                            $fieldTags = $em\n                                ->getRepository('ChamiloCoreBundle:ExtraFieldRelTag')\n                                ->findBy(\n                                    [\n                                        'fieldId' => $field_id,\n                                        'itemId' => $itemId,\n                                    ]\n                                );\n                            // ofaj\n\n                            for ($i = 0; $i < $separateValue; $i++) {\n                                $tagsSelect = $form->addElement(\n                                    'select',\n                                    'extra_'.$field_details['variable'].'['.$i.']',\n                                    $customLabelsExtraMultipleSelect[$field_details['variable']][$i],\n                                    null,\n                                    ['id' => 'extra_'.$field_details['variable'].'_'.$i]\n                                );\n\n                                if ($addEmptyOptionSelects) {\n                                    $tagsSelect->addOption(\n                                        '',\n                                        ''\n                                    );\n                                }\n\n                                foreach ($fieldTags as $fieldTag) {\n                                    $tag = $em->find('ChamiloCoreBundle:Tag', $fieldTag->getTagId());\n\n                                    if (empty($tag)) {\n                                        continue;\n                                    }\n\n                                    $tagsSelect->addOption(\n                                        $tag->getTag(),\n                                        $tag->getTag()\n                                    );\n                                }\n                            }\n                        } else {\n                            $tagsSelect = $form->addSelect(\n                                \"extra_{$field_details['variable']}\",\n                                $field_details['display_text'],\n                                [],\n                                ['style' => 'width: 100%;']\n                            );\n\n                            if (false === $useTagAsSelect) {\n                                $tagsSelect->setAttribute('class', null);\n                            }\n\n                            $tagsSelect->setAttribute(\n                                'id',\n                                \"extra_{$field_details['variable']}\"\n                            );\n                            $tagsSelect->setMultiple(true);\n\n                            $selectedOptions = [];\n                            if ('user' === $this->type) {\n                                // The magic should be here\n                                $user_tags = UserManager::get_user_tags(\n                                    $itemId,\n                                    $field_details['id']\n                                );\n\n                                if (is_array($user_tags) && count($user_tags) > 0) {\n                                    foreach ($user_tags as $tag) {\n                                        if (empty($tag['tag'])) {\n                                            continue;\n                                        }\n                                        $tagsSelect->addOption(\n                                            $tag['tag'],\n                                            $tag['tag'],\n                                            [\n                                                'selected' => 'selected',\n                                                'class' => 'selected',\n                                            ]\n                                        );\n                                        $selectedOptions[] = $tag['tag'];\n                                    }\n                                }\n                                $url = api_get_path(WEB_AJAX_PATH).'user_manager.ajax.php';\n                            } else {\n                                $em = Database::getManager();\n                                $fieldTags = $em->getRepository(\n                                    'ChamiloCoreBundle:ExtraFieldRelTag'\n                                )\n                                    ->findBy(\n                                        [\n                                            'fieldId' => $field_id,\n                                            'itemId' => $itemId,\n                                        ]\n                                    );\n\n                                /** @var ExtraFieldRelTag $fieldTag */\n                                foreach ($fieldTags as $fieldTag) {\n                                    /** @var Tag $tag */\n                                    $tag = $em->find('ChamiloCoreBundle:Tag', $fieldTag->getTagId());\n\n                                    if (empty($tag)) {\n                                        continue;\n                                    }\n                                    $tagsSelect->addOption(\n                                        $tag->getTag(),\n                                        $tag->getTag()\n                                    );\n                                    $selectedOptions[] = $tag->getTag();\n                                }\n\n                                if (!empty($extraData) && isset($extraData['extra_'.$field_details['variable']])) {\n                                    $data = $extraData['extra_'.$field_details['variable']];\n                                    if (!empty($data)) {\n                                        foreach ($data as $option) {\n                                            $tagsSelect->addOption(\n                                                $option,\n                                                $option\n                                            );\n                                        }\n                                    }\n                                }\n\n                                if ($useTagAsSelect) {\n                                    $fieldTags = $em->getRepository('ChamiloCoreBundle:ExtraFieldRelTag')\n                                        ->findBy(\n                                            [\n                                                'fieldId' => $field_id,\n                                            ]\n                                        );\n                                    $tagsAdded = [];\n                                    foreach ($fieldTags as $fieldTag) {\n                                        $tag = $em->find('ChamiloCoreBundle:Tag', $fieldTag->getTagId());\n\n                                        if (empty($tag)) {\n                                            continue;\n                                        }\n\n                                        $tagText = $tag->getTag();\n\n                                        if (in_array($tagText, $tagsAdded)) {\n                                            continue;\n                                        }\n\n                                        $tagsSelect->addOption(\n                                            $tag->getTag(),\n                                            $tag->getTag(),\n                                            []\n                                        );\n\n                                        $tagsAdded[] = $tagText;\n                                    }\n                                }\n                                $url = api_get_path(WEB_AJAX_PATH).'extra_field.ajax.php';\n                            }\n\n                            $allowAsTags = 'true';\n\n                            if ('portfolio' === $this->type) {\n                                $allowAsTags = 'false';\n                            }\n\n                            $form->setDefaults(\n                                [\n                                    'extra_'.$field_details['variable'] => $selectedOptions,\n                                ]\n                            );\n\n                            if (false == $useTagAsSelect) {\n                                $jquery_ready_content .= \"\n                                $('#extra_$variable').select2({\n                                    ajax: {\n                                        url: '$url?a=search_tags&field_id=$field_id&type={$this->type}',\n                                        processResults: function (data) {\n                                            return {\n                                                results: data.items\n                                            }\n                                        }\n                                    },\n                                    cache: false,\n                                    tags: $allowAsTags,\n                                    tokenSeparators: [','],\n                                    placeholder: '\".get_lang('StartToType').\"'\n                                });\n                            \";\n                            }\n                        }\n\n                        break;\n                    case self::FIELD_TYPE_TIMEZONE:\n                        $form->addElement(\n                            'select',\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text'],\n                            api_get_timezones(),\n                            ''\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_SOCIAL_PROFILE:\n                        // get the social network's favicon\n                        $extra_data_variable = isset($extraData['extra_'.$field_details['variable']])\n                            ? $extraData['extra_'.$field_details['variable']]\n                            : null;\n                        $field_default_value = isset($field_details['field_default_value'])\n                            ? $field_details['field_default_value']\n                            : null;\n                        $icon_path = UserManager::get_favicon_from_url(\n                            $extra_data_variable,\n                            $field_default_value\n                        );\n                        // special hack for hi5\n                        $leftpad = '1.7';\n                        $top = '0.4';\n                        $domain = parse_url($icon_path, PHP_URL_HOST);\n                        if ('www.hi5.com' === $domain || 'hi5.com' === $domain) {\n                            $leftpad = '3';\n                            $top = '0';\n                        }\n                        // print the input field\n                        $form->addElement(\n                            'text',\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text'],\n                            [\n                                'size' => 60,\n                                'size' => implode(\n                                    '; ',\n                                    [\n                                        \"background-image: url('$icon_path')\",\n                                        'background-repeat: no-repeat',\n                                        \"background-position: 0.4em {$top}em\",\n                                        \"padding-left: {$leftpad}em\",\n                                    ]\n                                ),\n                            ]\n                        );\n                        $form->applyFilter('extra_'.$field_details['variable'], 'stripslashes');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'trim');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'html_filter');\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_MOBILE_PHONE_NUMBER:\n                        $form->addElement(\n                            'text',\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text'].' ('.get_lang('CountryDialCode').')',\n                            ['size' => 40, 'placeholder' => '(xx)xxxxxxxxx']\n                        );\n                        $form->applyFilter('extra_'.$field_details['variable'], 'stripslashes');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'trim');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'mobile_phone_number_filter');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'html_filter');\n                        $form->addRule(\n                            'extra_'.$field_details['variable'],\n                            get_lang('MobilePhoneNumberWrong'),\n                            'mobile_phone_number'\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_INTEGER:\n                        $form->addElement(\n                            'number',\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text'],\n                            ['class' => 'span1', 'step' => 1]\n                        );\n\n                        $form->applyFilter('extra_'.$field_details['variable'], 'stripslashes');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'trim');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'intval');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_FILE_IMAGE:\n                        $fieldVariable = \"extra_{$field_details['variable']}\";\n                        $fieldTexts = [\n                            $field_details['display_text'],\n                        ];\n\n                        if (is_array($extraData) && array_key_exists($fieldVariable, $extraData)) {\n                            if (file_exists(api_get_path(SYS_UPLOAD_PATH).$extraData[$fieldVariable])) {\n                                $fieldTexts[] = Display::img(\n                                    api_get_path(WEB_UPLOAD_PATH).$extraData[$fieldVariable],\n                                    $field_details['display_text'],\n                                    ['width' => '300']\n                                );\n                            }\n                        }\n\n                        if ('Image' === $fieldTexts[0]) {\n                            $fieldTexts[0] = get_lang($fieldTexts[0]);\n                        }\n\n                        $form->addFile(\n                            $fieldVariable,\n                            $fieldTexts,\n                            ['accept' => 'image/*', 'id' => 'extra_image', 'crop_image' => 'true']\n                        );\n\n                        $form->applyFilter('extra_'.$field_details['variable'], 'stripslashes');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'trim');\n\n                        $allowedPictureTypes = ['jpg', 'jpeg', 'png', 'gif'];\n                        $form->addRule(\n                            'extra_'.$field_details['variable'],\n                            get_lang('OnlyImagesAllowed').' ('.implode(',', $allowedPictureTypes).')',\n                            'filetype',\n                            $allowedPictureTypes\n                        );\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_FLOAT:\n                        $form->addElement(\n                            'number',\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text'],\n                            ['class' => 'span1', 'step' => '0.01']\n                        );\n\n                        $form->applyFilter('extra_'.$field_details['variable'], 'stripslashes');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'trim');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'floatval');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_FILE:\n                        $fieldVariable = \"extra_{$field_details['variable']}\";\n                        $fieldTexts = [\n                            $field_details['display_text'],\n                        ];\n\n                        if (is_array($extraData) &&\n                            array_key_exists($fieldVariable, $extraData)\n                        ) {\n                            if (file_exists(api_get_path(SYS_UPLOAD_PATH).$extraData[$fieldVariable])) {\n                                $linkToDelete = '';\n                                $divItemId = $field_details['variable'];\n                                if (api_is_platform_admin()) {\n                                    $url = api_get_path(WEB_AJAX_PATH).'extra_field.ajax.php?type='.$this->type;\n                                    $url .= '&a=delete_file&field_id='.$field_details['id'].'&item_id='.$itemId;\n\n                                    $deleteId = $field_details['variable'].'_delete';\n                                    $form->addHtml(\n                                        \"\n                                        <script>\n                                            $(function() {\n                                                $('#\".$deleteId.\"').on('click', function() {\n                                                    $.ajax({\n                                                        type: 'GET',\n                                                        url: '\".$url.\"',\n                                                        success: function(result) {\n                                                            if (result == 1) {\n                                                                $('#\".$divItemId.\"').html('\".get_lang('Deleted').\"');\n                                                            }\n                                                        }\n                                                    });\n                                                });\n                                            });\n                                        </script>\n                                    \"\n                                    );\n\n                                    $linkToDelete = '&nbsp;'.Display::url(\n                                            Display::return_icon('delete.png', get_lang('Delete')),\n                                            'javascript:void(0)',\n                                            ['id' => $deleteId]\n                                        );\n                                }\n                                $fieldTexts[] = '<div id=\"'.$divItemId.'\">'.Display::url(\n                                        basename($extraData[$fieldVariable]),\n                                        api_get_path(WEB_UPLOAD_PATH).$extraData[$fieldVariable],\n                                        [\n                                            'title' => $field_details['display_text'],\n                                            'target' => '_blank',\n                                        ]\n                                    ).$linkToDelete.'</div>';\n                            }\n                        }\n\n                        $form->addElement(\n                            'file',\n                            $fieldVariable,\n                            $fieldTexts,\n                            []\n                        );\n\n                        $form->applyFilter('extra_'.$field_details['variable'], 'stripslashes');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'trim');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_VIDEO_URL:\n                        $form->addUrl(\n                            \"extra_{$field_details['variable']}\",\n                            $field_details['display_text'],\n                            false,\n                            ['placeholder' => 'https://']\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_LETTERS_ONLY:\n                        $form->addTextLettersOnly(\n                            \"extra_{$field_details['variable']}\",\n                            $field_details['display_text']\n                        );\n                        $form->applyFilter('extra_'.$field_details['variable'], 'stripslashes');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_ALPHANUMERIC:\n                        $form->addTextAlphanumeric(\n                            \"extra_{$field_details['variable']}\",\n                            $field_details['display_text']\n                        );\n                        $form->applyFilter(\n                            'extra_'.$field_details['variable'],\n                            'stripslashes'\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_LETTERS_SPACE:\n                        $form->addTextLettersAndSpaces(\n                            \"extra_{$field_details['variable']}\",\n                            $field_details['display_text']\n                        );\n                        $form->applyFilter('extra_'.$field_details['variable'], 'stripslashes');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_ALPHANUMERIC_SPACE:\n                        $form->addTextAlphanumericAndSpaces(\n                            \"extra_{$field_details['variable']}\",\n                            $field_details['display_text']\n                        );\n                        $form->applyFilter(\n                            'extra_'.$field_details['variable'],\n                            'stripslashes'\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_GEOLOCALIZATION_COORDINATES:\n                    case self::FIELD_TYPE_GEOLOCALIZATION:\n                        $dataValue = isset($extraData['extra_'.$field_details['variable']])\n                            ? $extraData['extra_'.$field_details['variable']]\n                            : '';\n\n                        $form->addGeoLocationMapField(\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text'],\n                            $dataValue,\n                            $hideGeoLocalizationDetails\n                        );\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_SELECT_WITH_TEXT_FIELD:\n                        $jquery_ready_content .= $this->addSelectWithTextFieldElement(\n                            $form,\n                            $field_details,\n                            $freezeElement\n                        );\n                        break;\n                    case self::FIELD_TYPE_TRIPLE_SELECT:\n                        $jquery_ready_content .= $this->addTripleSelectElement(\n                            $form,\n                            $field_details,\n                            is_array($extraData) ? $extraData : [],\n                            $freezeElement\n                        );\n                        break;\n                }\n            }\n        }\n\n        $return = [];\n        $return['jquery_ready_content'] = $jquery_ready_content;\n\n        return $return;\n    }\n\n    /**\n     * @param array $options\n     *\n     * @return array\n     */\n    public static function extra_field_double_select_convert_array_to_ordered_array($options)\n    {\n        $optionsParsed = [];\n        if (!empty($options)) {\n            foreach ($options as $option) {\n                if (0 == $option['option_value']) {\n                    $optionsParsed[$option['id']][] = $option;\n                } else {\n                    $optionsParsed[$option['option_value']][] = $option;\n                }\n            }\n        }\n\n        return $optionsParsed;\n    }\n\n    /**\n     * @return array\n     */\n    public static function tripleSelectConvertArrayToOrderedArray(array $options)\n    {\n        $level1 = self::getOptionsFromTripleSelect($options, 0);\n        $level2 = [];\n        $level3 = [];\n\n        foreach ($level1 as $item1) {\n            $level2 += self::getOptionsFromTripleSelect($options, $item1['id']);\n        }\n\n        foreach ($level2 as $item2) {\n            $level3 += self::getOptionsFromTripleSelect($options, $item2['id']);\n        }\n\n        return ['level1' => $level1, 'level2' => $level2, 'level3' => $level3];\n    }\n\n    /**\n     * @param string $type\n     *\n     * @return array\n     */\n    public function get_all_extra_field_by_type($type)\n    {\n        // all the information of the field\n        $sql = \"SELECT * FROM {$this->table}\n                WHERE\n                    field_type = '\".Database::escape_string($type).\"' AND\n                    extra_field_type = $this->extraFieldType\n                \";\n        $result = Database::query($sql);\n\n        $return = [];\n        while ($row = Database::fetch_array($result)) {\n            $return[] = $row['id'];\n        }\n\n        return $return;\n    }\n\n    /**\n     * @param int $id\n     */\n    public function get_field_type_by_id($id)\n    {\n        $types = $this->get_field_types();\n        if (isset($types[$id])) {\n            return $types[$id];\n        }\n\n        return null;\n    }\n\n    /**\n     * @return array\n     */\n    public function get_field_types()\n    {\n        return $this->get_extra_fields_by_handler($this->type);\n    }\n\n    /**\n     * @param string $handler\n     *\n     * @return array\n     */\n    public static function get_extra_fields_by_handler($handler)\n    {\n        $types = [];\n        $types[self::FIELD_TYPE_TEXT] = get_lang('FieldTypeText');\n        $types[self::FIELD_TYPE_TEXTAREA] = get_lang('FieldTypeTextarea');\n        $types[self::FIELD_TYPE_RADIO] = get_lang('FieldTypeRadio');\n        $types[self::FIELD_TYPE_SELECT] = get_lang('FieldTypeSelect');\n        $types[self::FIELD_TYPE_SELECT_MULTIPLE] = get_lang('FieldTypeSelectMultiple');\n        $types[self::FIELD_TYPE_DATE] = get_lang('FieldTypeDate');\n        $types[self::FIELD_TYPE_DATETIME] = get_lang('FieldTypeDatetime');\n        $types[self::FIELD_TYPE_DOUBLE_SELECT] = get_lang('FieldTypeDoubleSelect');\n        $types[self::FIELD_TYPE_DIVIDER] = get_lang('FieldTypeDivider');\n        $types[self::FIELD_TYPE_TAG] = get_lang('FieldTypeTag');\n        $types[self::FIELD_TYPE_TIMEZONE] = get_lang('FieldTypeTimezone');\n        $types[self::FIELD_TYPE_SOCIAL_PROFILE] = get_lang('FieldTypeSocialProfile');\n        $types[self::FIELD_TYPE_MOBILE_PHONE_NUMBER] = get_lang('FieldTypeMobilePhoneNumber');\n        $types[self::FIELD_TYPE_CHECKBOX] = get_lang('FieldTypeCheckbox');\n        $types[self::FIELD_TYPE_INTEGER] = get_lang('FieldTypeInteger');\n        $types[self::FIELD_TYPE_FILE_IMAGE] = get_lang('FieldTypeFileImage');\n        $types[self::FIELD_TYPE_FLOAT] = get_lang('FieldTypeFloat');\n        $types[self::FIELD_TYPE_FILE] = get_lang('FieldTypeFile');\n        $types[self::FIELD_TYPE_VIDEO_URL] = get_lang('FieldTypeVideoUrl');\n        $types[self::FIELD_TYPE_LETTERS_ONLY] = get_lang('FieldTypeOnlyLetters');\n        $types[self::FIELD_TYPE_ALPHANUMERIC] = get_lang('FieldTypeAlphanumeric');\n        $types[self::FIELD_TYPE_LETTERS_SPACE] = get_lang('FieldTypeLettersSpaces');\n        $types[self::FIELD_TYPE_ALPHANUMERIC_SPACE] = get_lang('FieldTypeAlphanumericSpaces');\n        $types[self::FIELD_TYPE_GEOLOCALIZATION] = get_lang('Geolocalization');\n        $types[self::FIELD_TYPE_GEOLOCALIZATION_COORDINATES] = get_lang('GeolocalizationCoordinates');\n        $types[self::FIELD_TYPE_SELECT_WITH_TEXT_FIELD] = get_lang('FieldTypeSelectWithTextField');\n        $types[self::FIELD_TYPE_TRIPLE_SELECT] = get_lang('FieldTypeTripleSelect');\n\n        switch ($handler) {\n            case 'course':\n            case 'session':\n            case 'user':\n            case 'skill':\n                break;\n        }\n\n        return $types;\n    }\n\n    /**\n     * @param array $params\n     * @param bool  $show_query\n     *\n     * @return int|bool\n     */\n    public function save($params, $show_query = false)\n    {\n        $fieldInfo = self::get_handler_field_info_by_field_variable($params['variable']);\n        $params = $this->clean_parameters($params);\n        $params['extra_field_type'] = $this->extraFieldType;\n\n        if ($fieldInfo) {\n            return $fieldInfo['id'];\n        } else {\n            $id = parent::save($params, $show_query);\n            if ($id) {\n                $fieldOption = new ExtraFieldOption($this->type);\n                $params['field_id'] = $id;\n                $fieldOption->save($params);\n            }\n\n            return $id;\n        }\n    }\n\n    /**\n     * Gets the set of values of an extra_field searching for the variable name.\n     *\n     * Example:\n     * <code>\n     * <?php\n     * $extraField = new ExtraField('lp_item');\n     * $extraFieldArray =  $extraField->get_handler_field_info_by_field_variable('authorlpitem');\n     * echo \"<pre>\".var_export($extraFieldArray,true).\"</pre>\";\n     * ?>\n     * </code>\n     *\n     * @param string $variable\n     *\n     * @return array|bool\n     */\n    public function get_handler_field_info_by_field_variable($variable)\n    {\n        $variable = Database::escape_string($variable);\n        $sql = \"SELECT * FROM {$this->table}\n                WHERE\n                    variable = '$variable' AND\n                    extra_field_type = $this->extraFieldType\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $row = Database::fetch_array($result, 'ASSOC');\n            if ($row) {\n                $row['display_text'] = self::translateDisplayName($row['variable'], $row['display_text']);\n\n                // All the options of the field\n                $sql = \"SELECT * FROM $this->table_field_options\n                    WHERE field_id='\".intval($row['id']).\"'\n                    ORDER BY option_order ASC\";\n                $result = Database::query($sql);\n                while ($option = Database::fetch_array($result)) {\n                    $row['options'][$option['id']] = $option;\n                }\n\n                return $row;\n            }\n        }\n\n        return false;\n    }\n\n    public function getHandlerEntityByFieldVariable(string $variable)\n    {\n        return Database::getManager()\n            ->getRepository('ChamiloCoreBundle:ExtraField')\n            ->findOneBy(['variable' => $variable, 'extraFieldType' => $this->extraFieldType]);\n    }\n\n    /**\n     * @param array $params\n     *\n     * @return array\n     */\n    public function clean_parameters($params)\n    {\n        if (!isset($params['variable']) || empty($params['variable'])) {\n            $params['variable'] = $params['display_text'];\n        }\n\n        $params['variable'] = trim(strtolower(str_replace(' ', '_', $params['variable'])));\n\n        if (!isset($params['field_order'])) {\n            $max_order = self::get_max_field_order();\n            $params['field_order'] = $max_order;\n        } else {\n            $params['field_order'] = (int) $params['field_order'];\n        }\n\n        return $params;\n    }\n\n    /**\n     * @return int\n     */\n    public function get_max_field_order()\n    {\n        $sql = \"SELECT MAX(field_order)\n                FROM {$this->table}\n                WHERE\n                    extra_field_type = '.$this->extraFieldType.'\";\n        $res = Database::query($sql);\n\n        $order = 0;\n        if (Database::num_rows($res) > 0) {\n            $row = Database::fetch_row($res);\n            $order = $row[0] + 1;\n        }\n\n        return $order;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function update($params, $showQuery = false)\n    {\n        $params = $this->clean_parameters($params);\n        if (isset($params['id'])) {\n            $fieldOption = new ExtraFieldOption($this->type);\n            $params['field_id'] = $params['id'];\n            if (empty($params['field_type'])) {\n                $params['field_type'] = $this->type;\n            }\n            $fieldOption->save($params, $showQuery);\n        }\n\n        return parent::update($params, $showQuery);\n    }\n\n    /**\n     * @param $id\n     *\n     * @return bool\n     */\n    public function delete($id)\n    {\n        $em = Database::getManager();\n        $items = $em->getRepository('ChamiloCoreBundle:ExtraFieldSavedSearch')->findBy(['field' => $id]);\n        if ($items) {\n            foreach ($items as $item) {\n                $em->remove($item);\n            }\n            $em->flush();\n        }\n        $field_option = new ExtraFieldOption($this->type);\n        $field_option->delete_all_options_by_field_id($id);\n\n        $session_field_values = new ExtraFieldValue($this->type);\n        $session_field_values->delete_all_values_by_field_id($id);\n\n        return parent::delete($id);\n    }\n\n    /**\n     * @param $breadcrumb\n     * @param $action\n     */\n    public function setupBreadcrumb(&$breadcrumb, $action)\n    {\n        if ('add' === $action) {\n            $breadcrumb[] = ['url' => $this->pageUrl, 'name' => $this->pageName];\n            $breadcrumb[] = ['url' => '#', 'name' => get_lang('Add')];\n        } elseif ('edit' === $action) {\n            $breadcrumb[] = ['url' => $this->pageUrl, 'name' => $this->pageName];\n            $breadcrumb[] = ['url' => '#', 'name' => get_lang('Edit')];\n        } else {\n            $breadcrumb[] = ['url' => '#', 'name' => $this->pageName];\n        }\n    }\n\n    /**\n     * Displays the title + grid.\n     */\n    public function display()\n    {\n        // action links\n        echo '<div class=\"actions\">';\n        echo '<a href=\"../admin/index.php\">';\n        echo Display::return_icon(\n            'back.png',\n            get_lang('BackTo').' '.get_lang('PlatformAdmin'),\n            '',\n            ICON_SIZE_MEDIUM\n        );\n        echo '</a>';\n        echo '<a href=\"'.api_get_self().'?action=add&type='.$this->type.'\">';\n        echo Display::return_icon(\n            'add_user_fields.png',\n            get_lang('Add'),\n            '',\n            ICON_SIZE_MEDIUM\n        );\n        echo '</a>';\n        echo '</div>';\n        echo Display::grid_html($this->type.'_fields');\n    }\n\n    /**\n     * @return array\n     */\n    public function getJqgridColumnNames()\n    {\n        return [\n            get_lang('Name'),\n            get_lang('FieldLabel'),\n            get_lang('Type'),\n            get_lang('FieldChangeability'),\n            get_lang('VisibleToSelf'),\n            get_lang('VisibleToOthers'),\n            get_lang('Filter'),\n            get_lang('FieldOrder'),\n            get_lang('Actions'),\n        ];\n    }\n\n    /**\n     * @return array\n     */\n    public function getJqgridColumnModel()\n    {\n        return [\n            [\n                'name' => 'display_text',\n                'index' => 'display_text',\n                'width' => '140',\n                'align' => 'left',\n            ],\n            [\n                'name' => 'variable',\n                'index' => 'variable',\n                'width' => '90',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'field_type',\n                'index' => 'field_type',\n                'width' => '70',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'changeable',\n                'index' => 'changeable',\n                'width' => '35',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'visible_to_self',\n                'index' => 'visible_to_self',\n                'width' => '45',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'visible_to_others',\n                'index' => 'visible_to_others',\n                'width' => '35',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'filter',\n                'index' => 'filter',\n                'width' => '30',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'field_order',\n                'index' => 'field_order',\n                'width' => '25',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'actions',\n                'index' => 'actions',\n                'width' => '40',\n                'align' => 'left',\n                'formatter' => 'action_formatter',\n                'sortable' => 'false',\n            ],\n        ];\n    }\n\n    /**\n     * @param string $url\n     * @param string $action\n     *\n     * @return FormValidator\n     */\n    public function return_form($url, $action)\n    {\n        $form = new FormValidator($this->type.'_field', 'post', $url);\n\n        $form->addElement('hidden', 'type', $this->type);\n        $id = isset($_GET['id']) ? (int) $_GET['id'] : null;\n        $form->addElement('hidden', 'id', $id);\n\n        // Setting the form elements\n        $header = get_lang('Add');\n        $defaults = [];\n\n        if ('edit' === $action) {\n            $header = get_lang('Modify');\n            // Setting the defaults\n            $defaults = $this->get($id, false);\n        }\n\n        $form->addElement('header', $header);\n\n        if ('edit' === $action) {\n            $translateUrl = api_get_path(WEB_CODE_PATH).'extrafield/translate.php?'\n                .http_build_query(['extra_field' => $id]);\n            $translateButton = Display::toolbarButton(get_lang('TranslateThisTerm'), $translateUrl, 'language', 'link');\n\n            $form->addText(\n                'display_text',\n                [get_lang('Name'), $translateButton]\n            );\n        } else {\n            $form->addElement('text', 'display_text', get_lang('Name'));\n        }\n\n        // Field type\n        $types = self::get_field_types();\n\n        $form->addElement(\n            'select',\n            'field_type',\n            get_lang('FieldType'),\n            $types,\n            ['id' => 'field_type']\n        );\n        $form->addElement('label', get_lang('Example'), '<div id=\"example\">-</div>');\n        $form->addElement('text', 'variable', get_lang('FieldLabel'), ['class' => 'span5']);\n        $form->addElement(\n            'text',\n            'field_options',\n            get_lang('FieldPossibleValues'),\n            ['id' => 'field_options', 'class' => 'span6']\n        );\n\n        $fieldWithOptions = [\n            self::FIELD_TYPE_RADIO,\n            self::FIELD_TYPE_SELECT_MULTIPLE,\n            self::FIELD_TYPE_SELECT,\n            self::FIELD_TYPE_TAG,\n            self::FIELD_TYPE_DOUBLE_SELECT,\n            self::FIELD_TYPE_SELECT_WITH_TEXT_FIELD,\n            self::FIELD_TYPE_TRIPLE_SELECT,\n        ];\n\n        if ('edit' == $action) {\n            if (in_array($defaults['field_type'], $fieldWithOptions)) {\n                $url = Display::url(\n                    get_lang('EditExtraFieldOptions'),\n                    'extra_field_options.php?type='.$this->type.'&field_id='.$id\n                );\n                $form->addElement('label', null, $url);\n\n                if (self::FIELD_TYPE_SELECT == $defaults['field_type']) {\n                    $urlWorkFlow = Display::url(\n                        get_lang('EditExtraFieldWorkFlow'),\n                        'extra_field_workflow.php?type='.$this->type.'&field_id='.$id\n                    );\n                    $form->addElement('label', null, $urlWorkFlow);\n                }\n\n                $form->freeze('field_options');\n            }\n        }\n        $form->addElement(\n            'text',\n            'default_value',\n            get_lang('FieldDefaultValue'),\n            ['id' => 'default_value']\n        );\n\n        $group = [];\n        $group[] = $form->createElement('radio', 'visible_to_self', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'visible_to_self', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('VisibleToSelf'), null, false);\n\n        $group = [];\n        $group[] = $form->createElement('radio', 'visible_to_others', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'visible_to_others', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('VisibleToOthers'), null, false);\n\n        $group = [];\n        $group[] = $form->createElement('radio', 'changeable', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'changeable', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('FieldChangeability'), null, false);\n\n        $group = [];\n        $group[] = $form->createElement('radio', 'filter', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'filter', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('FieldFilter'), null, false);\n\n        /* Enable this when field_loggeable is introduced as a table field (2.0)\n        $group   = array();\n        $group[] = $form->createElement('radio', 'field_loggeable', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'field_loggeable', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('FieldLoggeable'), '', false);\n        */\n\n        $form->addElement('text', 'field_order', get_lang('FieldOrder'));\n\n        if ('edit' == $action) {\n            $option = new ExtraFieldOption($this->type);\n            $defaults['field_options'] = $option->get_field_options_by_field_to_string($id);\n            $form->addButtonUpdate(get_lang('Modify'));\n        } else {\n            $defaults['visible_to_self'] = 0;\n            $defaults['visible_to_others'] = 0;\n            $defaults['changeable'] = 0;\n            $defaults['filter'] = 0;\n            $form->addButtonCreate(get_lang('Add'));\n        }\n\n        /*if (!empty($defaults['created_at'])) {\n            $defaults['created_at'] = api_convert_and_format_date($defaults['created_at']);\n        }\n        if (!empty($defaults['updated_at'])) {\n            $defaults['updated_at'] = api_convert_and_format_date($defaults['updated_at']);\n        }*/\n        $form->setDefaults($defaults);\n\n        // Setting the rules\n        $form->addRule('display_text', get_lang('ThisFieldIsRequired'), 'required');\n        $form->addRule('field_type', get_lang('ThisFieldIsRequired'), 'required');\n\n        return $form;\n    }\n\n    /**\n     * Gets an element.\n     *\n     * @param int  $id\n     * @param bool $translateDisplayText Optional\n     *\n     * @return array\n     */\n    public function get($id, $translateDisplayText = true)\n    {\n        $info = parent::get($id);\n\n        if ($translateDisplayText) {\n            $info['display_text'] = self::translateDisplayName($info['variable'], $info['display_text']);\n        }\n\n        return $info;\n    }\n\n    /**\n     * @param $token\n     *\n     * @return string\n     */\n    public function getJqgridActionLinks($token)\n    {\n        //With this function we can add actions to the jgrid (edit, delete, etc)\n        $editIcon = Display::return_icon('edit.png', get_lang('Edit'), '', ICON_SIZE_SMALL);\n        $deleteIcon = Display::return_icon('delete.png', get_lang('Delete'), '', ICON_SIZE_SMALL);\n        $confirmMessage = addslashes(\n            api_htmlentities(get_lang('ConfirmYourChoice'), ENT_QUOTES)\n        );\n\n        $editButton = <<<JAVASCRIPT\n            <a href=\"?action=edit&type={$this->type}&id=' + options.rowId + '\" class=\"btn btn-link btn-xs\">\\\n                $editIcon\\\n            </a>\nJAVASCRIPT;\n        $deleteButton = <<<JAVASCRIPT\n            <a \\\n                onclick=\"if (!confirm(\\'$confirmMessage\\')) {return false;}\" \\\n                href=\"?sec_token=$token&type={$this->type}&id=' + options.rowId + '&action=delete\" \\\n                class=\"btn btn-link btn-xs\">\\\n                $deleteIcon\\\n            </a>\nJAVASCRIPT;\n\n        return \"function action_formatter(cellvalue, options, rowObject) {\n            return '$editButton $deleteButton';\n        }\";\n    }\n\n    /**\n     * @param array $columns\n     * @param array $column_model\n     * @param array $extraFields\n     *\n     * @return array\n     */\n    public function getRules(&$columns, &$column_model, $extraFields = [], $checkExtraFieldExistence = false)\n    {\n        $fields = $this->get_all(\n            [\n                'visible_to_self = ? AND filter = ?' => [1, 1],\n            ],\n            'display_text'\n        );\n        $extraFieldOption = new ExtraFieldOption($this->type);\n\n        $rules = [];\n        if (!empty($fields)) {\n            foreach ($fields as $field) {\n                $search_options = [];\n                $type = 'text';\n                if (in_array($field['field_type'], [self::FIELD_TYPE_SELECT, self::FIELD_TYPE_DOUBLE_SELECT])) {\n                    $type = 'select';\n                    $search_options['sopt'] = ['eq', 'ne']; //equal not equal\n                } else {\n                    $search_options['sopt'] = ['cn', 'nc']; //contains not contains\n                }\n\n                $search_options['searchhidden'] = 'true';\n                $search_options['defaultValue'] = isset($search_options['field_default_value'])\n                    ? $search_options['field_default_value']\n                    : null;\n\n                if (self::FIELD_TYPE_DOUBLE_SELECT == $field['field_type']) {\n                    // Add 2 selects\n                    $options = $extraFieldOption->get_field_options_by_field($field['id']);\n                    $options = self::extra_field_double_select_convert_array_to_ordered_array($options);\n\n                    $first_options = [];\n                    if (!empty($options)) {\n                        foreach ($options as $option) {\n                            foreach ($option as $sub_option) {\n                                if (0 == $sub_option['option_value']) {\n                                    $first_options[] = $sub_option['field_id'].'#'.$sub_option['id'].':'\n                                        .$sub_option['display_text'];\n                                }\n                            }\n                        }\n                    }\n\n                    $search_options['value'] = implode(';', $first_options);\n                    $search_options['dataInit'] = 'fill_second_select';\n\n                    // First\n                    $column_model[] = [\n                        'name' => 'extra_'.$field['variable'],\n                        'index' => 'extra_'.$field['variable'],\n                        'width' => '100',\n                        'hidden' => 'true',\n                        'search' => 'true',\n                        'stype' => 'select',\n                        'searchoptions' => $search_options,\n                    ];\n                    $columns[] = $field['display_text'].' (1)';\n                    $rules[] = [\n                        'field' => 'extra_'.$field['variable'],\n                        'op' => 'cn',\n                    ];\n\n                    // Second\n                    $search_options['value'] = $field['id'].':';\n                    $search_options['dataInit'] = 'register_second_select';\n\n                    $column_model[] = [\n                        'name' => 'extra_'.$field['variable'].'_second',\n                        'index' => 'extra_'.$field['variable'].'_second',\n                        'width' => '100',\n                        'hidden' => 'true',\n                        'search' => 'true',\n                        'stype' => 'select',\n                        'searchoptions' => $search_options,\n                    ];\n                    $columns[] = $field['display_text'].' (2)';\n                    $rules[] = ['field' => 'extra_'.$field['variable'].'_second', 'op' => 'cn'];\n                    continue;\n                } else {\n                    $search_options['value'] = $extraFieldOption->getFieldOptionsToString(\n                        $field['id'],\n                        false,\n                        'display_text'\n                    );\n                }\n                $column_model[] = [\n                    'name' => 'extra_'.$field['variable'],\n                    'index' => 'extra_'.$field['variable'],\n                    'width' => '100',\n                    'hidden' => 'true',\n                    'search' => 'true',\n                    'stype' => $type,\n                    'searchoptions' => $search_options,\n                ];\n                $columns[] = $field['display_text'];\n                $rules[] = [\n                    'field' => 'extra_'.$field['variable'],\n                    'op' => 'cn',\n                    'data' => '',\n                ];\n            }\n        }\n\n        return $rules;\n    }\n\n    public function processExtraFieldSearch($values, $form, $alias, $condition = 'OR')\n    {\n        // Parse params.\n        $fields = [];\n        foreach ($values as $key => $value) {\n            if (substr($key, 0, 6) !== 'extra_' &&\n                substr($key, 0, 7) !== '_extra_'\n            ) {\n                continue;\n            }\n            if (!empty($value)) {\n                $fields[$key] = $value;\n            }\n        }\n\n        $extraFieldsAll = $this->get_all(['visible_to_self = ? AND filter = ?' => [1, 1]], 'option_order');\n        $extraFieldsType = array_column($extraFieldsAll, 'field_type', 'variable');\n        $extraFields = array_column($extraFieldsAll, 'variable');\n        $filter = new stdClass();\n        $defaults = [];\n        foreach ($fields as $variable => $col) {\n            $variableNoExtra = str_replace('extra_', '', $variable);\n            if (isset($values[$variable]) && !empty($values[$variable]) &&\n                in_array($variableNoExtra, $extraFields)\n            ) {\n                $rule = new stdClass();\n                $rule->field = $variable;\n                $rule->op = 'in';\n                $data = $col;\n                if (is_array($data) && array_key_exists($variable, $data)) {\n                    $data = $col;\n                }\n                $rule->data = $data;\n                $filter->rules[] = $rule;\n                $filter->groupOp = 'AND';\n\n                if ($extraFieldsType[$variableNoExtra] == ExtraField::FIELD_TYPE_TAG) {\n                    $tagElement = $form->getElement($variable);\n                    $tags = [];\n                    foreach ($values[$variable] as $tag) {\n                        $tag = Security::remove_XSS($tag);\n                        $tags[] = $tag;\n                        $tagElement->addOption(\n                            $tag,\n                            $tag\n                        );\n                    }\n                    $defaults[$variable] = $tags;\n                } else {\n                    if (is_array($data)) {\n                        $defaults[$variable] = array_map(['Security', 'remove_XSS'], $data);\n                    } else {\n                        $defaults[$variable] = Security::remove_XSS($data);\n                    }\n                }\n            }\n        }\n\n        $result = $this->getExtraFieldRules($filter, 'extra_', $condition);\n        $conditionArray = $result['condition_array'];\n\n        $whereCondition = '';\n        $extraCondition = '';\n        if (!empty($conditionArray)) {\n            $extraCondition = ' ( ';\n            $extraCondition .= implode(' AND ', $conditionArray);\n            $extraCondition .= ' ) ';\n        }\n        $whereCondition .= $extraCondition;\n        $conditions = $this->parseConditions(\n            [\n                'where' => $whereCondition,\n                'extra' => $result['extra_fields'],\n            ],\n            $alias\n        );\n\n        return ['condition' => $conditions, 'fields' => $fields, 'defaults' => $defaults];\n    }\n\n    /**\n     * @param        $filters\n     * @param string $stringToSearch\n     *\n     * @return array\n     */\n    public function getExtraFieldRules($filters, $stringToSearch = 'extra_', $condition = 'OR')\n    {\n        $extraFields = [];\n        $conditionArray = [];\n\n        // Getting double select if exists\n        $double_select = [];\n        if (is_object($filters) &&\n            property_exists($filters, 'rules') &&\n            is_array($filters->rules) &&\n            !empty($filters->rules)\n        ) {\n            foreach ($filters->rules as $rule) {\n                if (empty($rule)) {\n                    continue;\n                }\n                if (false === strpos($rule->field, '_second')) {\n                } else {\n                    $my_field = str_replace('_second', '', $rule->field);\n                    $double_select[$my_field] = $rule->data;\n                }\n            }\n\n            foreach ($filters->rules as $rule) {\n                if (empty($rule)) {\n                    continue;\n                }\n                if (false === strpos($rule->field, $stringToSearch)) {\n                    // normal fields\n                    $field = $rule->field;\n                    if (isset($rule->data) && is_string($rule->data) && -1 != $rule->data) {\n                        $conditionArray[] = $this->get_where_clause($field, $rule->op, $rule->data);\n                    }\n                } else {\n                    // Extra fields\n                    $ruleField = Database::escapeField($rule->field);\n                    if (false === strpos($rule->field, '_second')) {\n                        // No _second\n                        $original_field = str_replace($stringToSearch, '', $rule->field);\n                        $field_option = $this->get_handler_field_info_by_field_variable($original_field);\n\n                        switch ($field_option['field_type']) {\n                            case self::FIELD_TYPE_DOUBLE_SELECT:\n                                if (isset($double_select[$rule->field])) {\n                                    $data = explode('#', $rule->data);\n                                    $rule->data = $data[1].'::'.$double_select[$rule->field];\n                                } else {\n                                    // only was sent 1 select\n                                    if (is_string($rule->data)) {\n                                        $data = explode('#', $rule->data);\n                                        $rule->data = $data[1];\n                                    }\n                                }\n\n                                if (!isset($rule->data)) {\n                                    $conditionArray[] = ' ('\n                                        .$this->get_where_clause($rule->field, $rule->op, $rule->data)\n                                        .') ';\n                                    $extraFields[] = ['field' => $ruleField, 'id' => $field_option['id']];\n                                }\n                                break;\n                            case self::FIELD_TYPE_TAG:\n                                if (isset($rule->data)) {\n                                    if (is_int($rule->data) && -1 == $rule->data) {\n                                        break;\n                                    }\n                                    // Where will be injected in the parseConditions()\n                                    //$where = $this->get_where_clause($rule->field, $rule->op, $rule->data, 'OR');\n                                    //$conditionArray[] = \" ( $where ) \";\n                                    $extraFields[] = [\n                                        'field' => $ruleField,\n                                        'id' => $field_option['id'],\n                                        'data' => $rule->data,\n                                    ];\n                                }\n                                break;\n                            default:\n                                if (isset($rule->data)) {\n                                    if (is_int($rule->data) && -1 == $rule->data) {\n                                        break;\n                                    }\n                                    $where = $this->get_where_clause($rule->field, $rule->op, $rule->data, 'OR');\n                                    $conditionArray[] = \" ( $where ) \";\n                                    $extraFields[] = [\n                                        'field' => $ruleField,\n                                        'id' => $field_option['id'],\n                                        'data' => $rule->data,\n                                    ];\n                                }\n                                break;\n                        }\n                    } else {\n                        $my_field = str_replace('_second', '', $rule->field);\n                        $original_field = str_replace($stringToSearch, '', $my_field);\n                        $field_option = $this->get_handler_field_info_by_field_variable($original_field);\n                        $extraFields[] = [\n                            'field' => $ruleField,\n                            'id' => $field_option['id'],\n                        ];\n                    }\n                }\n            }\n        }\n\n        return ['extra_fields' => $extraFields, 'condition_array' => $conditionArray];\n    }\n\n    /**\n     * @param $col\n     * @param $oper\n     * @param $val\n     * @param $conditionBetweenOptions\n     *\n     * @return string\n     */\n    public function get_where_clause($col, $oper, $val, $conditionBetweenOptions = 'OR')\n    {\n        $col = Database::escapeField($col);\n\n        if (empty($col)) {\n            return '';\n        }\n\n        $conditionBetweenOptions = in_array($conditionBetweenOptions, ['OR', 'AND']) ? $conditionBetweenOptions : 'OR';\n        if ('bw' === $oper || 'bn' === $oper) {\n            $val .= '%';\n        }\n        if ('ew' === $oper || 'en' === $oper) {\n            $val = '%'.$val;\n        }\n        if ('cn' === $oper || 'nc' === $oper || 'in' === $oper || 'ni' === $oper) {\n            if (is_array($val)) {\n                $result = '\"%'.implode(';', $val).'%\"';\n                foreach ($val as $item) {\n                    $item = trim($item);\n                    $result .= ' '.$conditionBetweenOptions.' '.$col.' LIKE \"%'.$item.'%\"';\n                }\n                $val = $result;\n\n                return \" $col {$this->ops[$oper]} $val \";\n            } else {\n                if (is_string($val)) {\n                    $val = '%'.$val.'%';\n                } else {\n                    $val = '';\n                }\n            }\n        }\n        $val = \\Database::escape_string($val);\n\n        return \" $col {$this->ops[$oper]} '$val' \";\n    }\n\n    /**\n     * @param array  $options\n     * @param string $alias\n     *\n     * @return array\n     */\n    public function parseConditions($options, $alias = 's')\n    {\n        $inject_extra_fields = null;\n        $extraFieldOption = new ExtraFieldOption($this->type);\n        $double_fields = [];\n\n        if (isset($options['extra'])) {\n            $extra_fields = $options['extra'];\n            if (!empty($extra_fields)) {\n                $counter = 1;\n                $extra_field_obj = new ExtraField($this->type);\n                foreach ($extra_fields as &$extra) {\n                    if (!isset($extra['id'])) {\n                        continue;\n                    }\n                    $extra_field_info = $extra_field_obj->get($extra['id']);\n                    if (empty($extra_field_info)) {\n                        continue;\n                    }\n                    $extra['extra_field_info'] = $extra_field_info;\n\n                    switch ($extra_field_info['field_type']) {\n                        case self::FIELD_TYPE_SELECT:\n                        case self::FIELD_TYPE_DOUBLE_SELECT:\n                            $inject_extra_fields .= \" fvo$counter.display_text as {$extra['field']}, \";\n                            break;\n                        case self::FIELD_TYPE_TAG:\n                            // If using OR\n                            // If using AND\n                            $newCounter = 1;\n                            $fields = [];\n                            $tagAlias = $extra['field'];\n                            foreach ($extra['data'] as $data) {\n                                $fields[] = \"tag$counter$newCounter.tag\";\n                                $newCounter++;\n                            }\n\n                            if (!empty($fields)) {\n                                $tags = implode(' , \" \", ', $fields);\n                                $inject_extra_fields .= \" CONCAT($tags) as $tagAlias, \";\n                            }\n                            break;\n                        default:\n                            $inject_extra_fields .= \" fv$counter.value as {$extra['field']}, \";\n                            break;\n                    }\n\n                    if (isset($extra_fields_info[$extra['id']])) {\n                        $info = $extra_fields_info[$extra['id']];\n                    } else {\n                        $info = $this->get($extra['id']);\n                        $extra_fields_info[$extra['id']] = $info;\n                    }\n                    if (isset($info['field_type']) && self::FIELD_TYPE_DOUBLE_SELECT == $info['field_type']) {\n                        $double_fields[$info['id']] = $info;\n                    }\n                    $counter++;\n                }\n            }\n        }\n\n        $options_by_double = [];\n        foreach ($double_fields as $double) {\n            $my_options = $extraFieldOption->get_field_options_by_field($double['id'], true);\n            $options_by_double['extra_'.$double['variable']] = $my_options;\n        }\n\n        $field_value_to_join = [];\n        //filter can be all/any = and/or\n        $inject_joins = null;\n        $inject_where = null;\n        $where = null;\n\n        //if (!empty($options['where'])) {\n        if (!empty($options['extra']) && !empty($extra_fields)) {\n            // Removing double 1=1\n            if (empty($options['where'])) {\n                $options['where'] = ' 1 = 1 ';\n            }\n            $options['where'] = str_replace(' 1 = 1  AND', '', $options['where']);\n            // Always OR\n            $counter = 1;\n            foreach ($extra_fields as $extra_info) {\n                $extra_field_info = $extra_info['extra_field_info'];\n                $inject_joins .= \" INNER JOIN $this->table_field_values fv$counter\n                                       ON ($alias.\".$this->primaryKey.\" = fv$counter.\".$this->handler_id.') ';\n                // Add options\n                switch ($extra_field_info['field_type']) {\n                        case self::FIELD_TYPE_SELECT:\n                        case self::FIELD_TYPE_DOUBLE_SELECT:\n                            $options['where'] = str_replace(\n                                $extra_info['field'],\n                                'fv'.$counter.'.field_id = '.$extra_info['id'].' AND fvo'.$counter.'.option_value',\n                                $options['where']\n                            );\n                            $inject_joins .= \"\n                                 INNER JOIN $this->table_field_options fvo$counter\n                                 ON (\n                                    fv$counter.field_id = fvo$counter.field_id AND\n                                    fv$counter.value = fvo$counter.option_value\n                                 )\n                                \";\n                            break;\n                        case self::FIELD_TYPE_TAG:\n                            $newCounter = 1;\n                            if (isset($extra_info['data']) && !empty($extra_info['data'])) {\n                                $whereTag = [];\n                                foreach ($extra_info['data'] as $data) {\n                                    $data = Database::escape_string($data);\n                                    $key = $counter.$newCounter;\n                                    $whereTag[] = ' tag'.$key.'.tag LIKE \"%'.$data.'%\" ';\n                                    $inject_joins .= \"\n                                    INNER JOIN $this->table_field_rel_tag tag_rel$key\n                                    ON (\n                                        tag_rel$key.field_id = \".$extra_info['id'].\" AND\n                                        tag_rel$key.item_id = $alias.\".$this->primaryKey.\"\n                                    )\n                                    INNER JOIN $this->table_field_tag tag$key\n                                    ON (tag$key.id = tag_rel$key.tag_id)\n                                \";\n                                    $newCounter++;\n                                }\n                                if (!empty($whereTag)) {\n                                    $options['where'] .= ' AND  ('.implode(' AND ', $whereTag).') ';\n                                }\n                            }\n                            break;\n                        default:\n                            // text, textarea, etc\n                            $options['where'] = str_replace(\n                                $extra_info['field'],\n                                'fv'.$counter.'.field_id = '.$extra_info['id'].' AND fv'.$counter.'.value',\n                                $options['where']\n                            );\n                            break;\n                    }\n                $field_value_to_join[] = \" fv$counter.$this->handler_id \";\n                $counter++;\n            }\n        }\n\n        if (!empty($options['where'])) {\n            $where .= ' AND '.$options['where'];\n        }\n\n        $order = '';\n        if (!empty($options['order'])) {\n            $order = \" ORDER BY \".$options['order'].\" \";\n        }\n        $limit = '';\n        if (!empty($options['limit'])) {\n            $limit = ' LIMIT '.$options['limit'];\n        }\n\n        return [\n            'order' => $order,\n            'limit' => $limit,\n            'where' => $where,\n            'inject_where' => $inject_where,\n            'inject_joins' => $inject_joins,\n            'field_value_to_join' => $field_value_to_join,\n            'inject_extra_fields' => $inject_extra_fields,\n        ];\n    }\n\n    /**\n     * Get the extra fields and their formatted values.\n     *\n     * @param int|string $itemId   The item ID (It could be a session_id, course_id or user_id)\n     * @param bool       $filter\n     * @param array      $onlyShow (list of extra fields variables to show)\n     *\n     * @return array The extra fields data\n     */\n    public function getDataAndFormattedValues($itemId, $filter = false, $onlyShow = [])\n    {\n        $valuesData = [];\n        $fields = $this->get_all();\n        $em = Database::getManager();\n\n        $repoTag = $em->getRepository('ChamiloCoreBundle:ExtraFieldRelTag');\n\n        foreach ($fields as $field) {\n            if ('1' != $field['visible_to_self']) {\n                continue;\n            }\n\n            if ($filter && $field['filter'] != 1) {\n                continue;\n            }\n\n            if (!empty($onlyShow) && !in_array($field['variable'], $onlyShow)) {\n                continue;\n            }\n\n            $valueAsArray = [];\n            $fieldValue = new ExtraFieldValue($this->type);\n            $valueData = $fieldValue->get_values_by_handler_and_field_id(\n                $itemId,\n                $field['id'],\n                true\n            );\n            if (ExtraField::FIELD_TYPE_TAG == $field['field_type']) {\n                $tags = $repoTag->findBy(['fieldId' => $field['id'], 'itemId' => $itemId]);\n                if ($tags) {\n                    /** @var ExtraFieldRelTag $tag */\n                    $data = [];\n                    foreach ($tags as $extraFieldTag) {\n                        /** @var Tag $tag */\n                        $tag = $em->find('ChamiloCoreBundle:Tag', $extraFieldTag->getTagId());\n                        $data[] = $tag->getTag();\n                    }\n                    $valueData = implode(', ', $data);\n                    $valueAsArray = $data;\n                }\n            }\n\n            if (!$valueData) {\n                continue;\n            }\n            $displayedValue = get_lang('None');\n\n            switch ($field['field_type']) {\n                case self::FIELD_TYPE_CHECKBOX:\n                    if (false !== $valueData && '1' == $valueData['value']) {\n                        $displayedValue = get_lang('Yes');\n                    } else {\n                        $displayedValue = get_lang('No');\n                    }\n                    break;\n                case self::FIELD_TYPE_DATE:\n                    if (false !== $valueData && !empty($valueData['value'])) {\n                        $displayedValue = api_format_date($valueData['value'], DATE_FORMAT_LONG_NO_DAY);\n                    }\n                    break;\n                case self::FIELD_TYPE_TAG:\n                    if (!empty($valueData)) {\n                        $displayedValue = $valueData;\n                    }\n                    break;\n                case self::FIELD_TYPE_FILE_IMAGE:\n                    if (false === $valueData || empty($valueData['value'])) {\n                        break;\n                    }\n\n                    if (!file_exists(api_get_path(SYS_UPLOAD_PATH).$valueData['value'])) {\n                        break;\n                    }\n\n                    $image = Display::img(\n                        api_get_path(WEB_UPLOAD_PATH).$valueData['value'],\n                        $field['display_text'],\n                        ['width' => '300']\n                    );\n\n                    $displayedValue = Display::url(\n                        $image,\n                        api_get_path(WEB_UPLOAD_PATH).$valueData['value'],\n                        ['target' => '_blank']\n                    );\n                    break;\n                case self::FIELD_TYPE_FILE:\n                    if (false === $valueData || empty($valueData['value'])) {\n                        break;\n                    }\n\n                    if (!file_exists(api_get_path(SYS_UPLOAD_PATH).$valueData['value'])) {\n                        break;\n                    }\n\n                    $displayedValue = Display::url(\n                        get_lang('Download'),\n                        api_get_path(WEB_UPLOAD_PATH).$valueData['value'],\n                        [\n                            'title' => $field['display_text'],\n                            'target' => '_blank',\n                            'class' => 'download_extra_field',\n                        ]\n                    );\n                    break;\n                default:\n                    $displayedValue = $valueData['value'];\n                    break;\n            }\n\n            $valuesData[] = [\n                'variable' => $field['variable'],\n                'text' => $field['display_text'],\n                'value' => $displayedValue,\n                'value_as_array' => $valueAsArray,\n            ];\n        }\n\n        return $valuesData;\n    }\n\n    /**\n     * @param int    $fieldId\n     * @param string $tag\n     *\n     * @return array\n     */\n    public function getAllUserPerTag($fieldId, $tag)\n    {\n        $tagRelUserTable = Database::get_main_table(TABLE_MAIN_USER_REL_TAG);\n        $tag = Database::escape_string($tag);\n        $fieldId = (int) $fieldId;\n\n        $sql = \"SELECT user_id\n                FROM {$this->table_field_tag} f INNER JOIN $tagRelUserTable ft\n                ON tag_id = f.id\n                WHERE tag = '$tag' AND f.field_id = $fieldId;\n        \";\n\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * @param int $fieldId\n     * @param int $tagId\n     *\n     * @return array\n     */\n    public function getAllSkillPerTag($fieldId, $tagId)\n    {\n        $skillTable = Database::get_main_table(TABLE_MAIN_SKILL);\n        $tagRelExtraTable = Database::get_main_table(TABLE_MAIN_EXTRA_FIELD_REL_TAG);\n        $fieldId = (int) $fieldId;\n        $tagId = (int) $tagId;\n\n        $sql = \"SELECT s.id\n                FROM $skillTable s INNER JOIN $tagRelExtraTable t\n                ON t.item_id = s.id\n                WHERE tag_id = $tagId AND t.field_id = $fieldId;\n        \";\n\n        $result = Database::query($sql);\n        $result = Database::store_result($result, 'ASSOC');\n\n        $skillList = [];\n        foreach ($result as $index => $value) {\n            $skillList[$value['id']] = $value['id'];\n        }\n\n        return $skillList;\n    }\n\n    /**\n     * @param string $from\n     * @param string $search\n     * @param array  $options\n     *\n     * @return array\n     */\n    public function searchOptionsFromTags($from, $search, $options)\n    {\n        $extraFieldInfo = $this->get_handler_field_info_by_field_variable(\n            str_replace('extra_', '', $from)\n        );\n        $extraFieldInfoTag = $this->get_handler_field_info_by_field_variable(\n            str_replace('extra_', '', $search)\n        );\n\n        if (empty($extraFieldInfo) || empty($extraFieldInfoTag)) {\n            return [];\n        }\n\n        $id = $extraFieldInfo['id'];\n        $tagId = $extraFieldInfoTag['id'];\n\n        $table = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $tagRelExtraTable = Database::get_main_table(TABLE_MAIN_EXTRA_FIELD_REL_TAG);\n        $tagTable = Database::get_main_table(TABLE_MAIN_TAG);\n        $optionsTable = Database::get_main_table(TABLE_EXTRA_FIELD_OPTIONS);\n\n        $cleanOptions = [];\n        foreach ($options as $option) {\n            $cleanOptions[] = Database::escape_string($option);\n        }\n        $cleanOptions = array_filter($cleanOptions);\n\n        if (empty($cleanOptions)) {\n            return [];\n        }\n\n        $value = implode(\"','\", $cleanOptions);\n\n        $sql = \"SELECT DISTINCT t.*, v.value, o.display_text\n                FROM $tagRelExtraTable te\n                INNER JOIN $tagTable t\n                ON (t.id = te.tag_id AND te.field_id = t.field_id AND te.field_id = $tagId)\n                INNER JOIN $table v\n                ON (te.item_id = v.item_id AND v.field_id = $id)\n                INNER JOIN $optionsTable o\n                ON (o.option_value = v.value)\n                WHERE v.value IN ('\".$value.\"')\n                ORDER BY o.option_order, t.tag\n               \";\n\n        $result = Database::query($sql);\n        $result = Database::store_result($result);\n\n        return $result;\n    }\n\n    /**\n     * @param \\FormValidator $form\n     * @param int            $defaultValueId\n     * @param bool           $freezeElement\n     */\n    private function addSelectElement(FormValidator $form, array $fieldDetails, $defaultValueId, $freezeElement = false)\n    {\n        $get_lang_variables = false;\n        if (in_array(\n            $fieldDetails['variable'],\n            ['mail_notify_message', 'mail_notify_invitation', 'mail_notify_group_message']\n        )) {\n            $get_lang_variables = true;\n        }\n\n        // Get extra field workflow\n        $addOptions = [];\n        $optionsExists = false;\n        $options = [];\n\n        $optionList = [];\n        if (!empty($fieldDetails['options'])) {\n            foreach ($fieldDetails['options'] as $option_details) {\n                $optionList[$option_details['id']] = $option_details;\n                if ($get_lang_variables) {\n                    $options[$option_details['option_value']] = $option_details['display_text'];\n                } else {\n                    if ($optionsExists) {\n                        // Adding always the default value\n                        if ($option_details['id'] == $defaultValueId) {\n                            $options[$option_details['option_value']] = $option_details['display_text'];\n                        } else {\n                            if (isset($addOptions) && !empty($addOptions)) {\n                                // Parsing filters\n                                if (in_array($option_details['id'], $addOptions)) {\n                                    $options[$option_details['option_value']] = $option_details['display_text'];\n                                }\n                            }\n                        }\n                    } else {\n                        // Normal behaviour\n                        $options[$option_details['option_value']] = $option_details['display_text'];\n                    }\n                }\n            }\n\n            // Setting priority message\n            if (isset($optionList[$defaultValueId])\n                && isset($optionList[$defaultValueId]['priority'])\n            ) {\n                if (!empty($optionList[$defaultValueId]['priority'])) {\n                    $priorityId = $optionList[$defaultValueId]['priority'];\n                    $option = new ExtraFieldOption($this->type);\n                    $messageType = $option->getPriorityMessageType($priorityId);\n                    $form->addElement(\n                        'label',\n                        null,\n                        Display::return_message(\n                            $optionList[$defaultValueId]['priority_message'],\n                            $messageType\n                        )\n                    );\n                }\n            }\n        }\n\n        /** @var \\HTML_QuickForm_select $slct */\n        $slct = $form->addElement(\n            'select',\n            'extra_'.$fieldDetails['variable'],\n            $fieldDetails['display_text'],\n            [],\n            ['id' => 'extra_'.$fieldDetails['variable']]\n        );\n\n        if (empty($defaultValueId)) {\n            $slct->addOption(get_lang('SelectAnOption'), '');\n        }\n\n        foreach ($options as $value => $text) {\n            if (empty($value)) {\n                $slct->addOption($text, $value);\n                continue;\n            }\n\n            $valueParts = explode('#', $text);\n            $dataValue = count($valueParts) > 1 ? array_shift($valueParts) : '';\n\n            $slct->addOption(implode('', $valueParts), $value, ['data-value' => $dataValue]);\n        }\n\n        if ($freezeElement) {\n            $form->freeze('extra_'.$fieldDetails['variable']);\n        }\n    }\n\n    /**\n     * @param \\FormValidator $form\n     * @param array          $fieldDetails\n     * @param array          $extraData\n     * @param bool           $freezeElement\n     *\n     * @return string JavaScript code\n     */\n    private function addDoubleSelectElement(FormValidator $form, $fieldDetails, $extraData, $freezeElement = false)\n    {\n        $firstSelectId = 'first_extra_'.$fieldDetails['variable'];\n        $secondSelectId = 'second_extra_'.$fieldDetails['variable'];\n\n        $jqueryReadyContent = \"\n            $('#$firstSelectId').on('change', function() {\n                var id = $(this).val();\n\n                if (!id) {\n                    $('#$secondSelectId').empty().selectpicker('refresh');\n\n                    return;\n                }\n\n                $.getJSON(_p.web_ajax + 'extra_field.ajax.php?1=1&a=get_second_select_options', {\n                    'type': '{$this->type}',\n                    'field_id': {$fieldDetails['id']},\n                    'option_value_id': id\n                })\n                    .done(function(data) {\n                        $('#$secondSelectId').empty();\n                        $.each(data, function(index, value) {\n                            $('#second_extra_{$fieldDetails['variable']}').append(\n                                $('<option>', {value: index, text: value})\n                            );\n                        });\n                        $('#$secondSelectId').selectpicker('refresh');\n                    });\n            });\n        \";\n\n        $firstId = null;\n        if (!empty($extraData)) {\n            if (isset($extraData['extra_'.$fieldDetails['variable']])) {\n                $firstId = $extraData['extra_'.$fieldDetails['variable']]['extra_'.$fieldDetails['variable']];\n            }\n        }\n\n        $options = $this->extra_field_double_select_convert_array_to_ordered_array($fieldDetails['options']);\n        $values = ['' => get_lang('Select')];\n\n        $second_values = [];\n        if (!empty($options)) {\n            foreach ($options as $option) {\n                foreach ($option as $sub_option) {\n                    if ('0' == $sub_option['option_value']) {\n                        $values[$sub_option['id']] = $sub_option['display_text'];\n\n                        continue;\n                    }\n\n                    if ($firstId === $sub_option['option_value']) {\n                        $second_values[$sub_option['id']] = $sub_option['display_text'];\n                    }\n                }\n            }\n        }\n\n        $form\n            ->defaultRenderer()\n            ->setGroupElementTemplate('<p>{element}</p>', 'extra_'.$fieldDetails['variable']);\n        $group = [];\n        $group[] = $form->createElement(\n            'select',\n            'extra_'.$fieldDetails['variable'],\n            null,\n            $values,\n            ['id' => $firstSelectId]\n        );\n        $group[] = $form->createElement(\n            'select',\n            'extra_'.$fieldDetails['variable'].'_second',\n            null,\n            $second_values,\n            ['id' => $secondSelectId]\n        );\n        $form->addGroup(\n            $group,\n            'extra_'.$fieldDetails['variable'],\n            $fieldDetails['display_text']\n        );\n\n        if ($freezeElement) {\n            $form->freeze('extra_'.$fieldDetails['variable']);\n        }\n\n        return $jqueryReadyContent;\n    }\n\n    /**\n     * @param \\FormValidator $form\n     * @param bool           $freezeElement Optional\n     *\n     * @return string JavaScript code\n     */\n    private function addSelectWithTextFieldElement(\n        FormValidator $form,\n        array $fieldDetails,\n        $freezeElement = false\n    ) {\n        $firstSelectId = 'slct_extra_'.$fieldDetails['variable'];\n        $txtSelectId = 'txt_extra_'.$fieldDetails['variable'];\n\n        $jqueryReadyContent = \"\n            $('#$firstSelectId').on('change', function() {\n                var id = $(this).val();\n\n                if (!id) {\n                    $('#$txtSelectId').val('');\n                }\n            });\n        \";\n\n        $options = $this->extra_field_double_select_convert_array_to_ordered_array($fieldDetails['options']);\n        $values = ['' => get_lang('Select')];\n\n        if (!empty($options)) {\n            foreach ($options as $option) {\n                foreach ($option as $sub_option) {\n                    if ('0' == $sub_option['option_value']) {\n                        continue;\n                    }\n\n                    $values[$sub_option['id']] = $sub_option['display_text'];\n                }\n            }\n        }\n\n        $form\n            ->defaultRenderer()\n            ->setGroupElementTemplate('<p>{element}</p>', 'extra_'.$fieldDetails['variable']);\n        $group = [];\n        $group[] = $form->createElement(\n            'select',\n            'extra_'.$fieldDetails['variable'],\n            null,\n            $values,\n            ['id' => $firstSelectId]\n        );\n        $group[] = $form->createElement(\n            'text',\n            'extra_'.$fieldDetails['variable'].'_second',\n            null,\n            ['id' => $txtSelectId]\n        );\n        $form->addGroup(\n            $group,\n            'extra_'.$fieldDetails['variable'],\n            $fieldDetails['display_text']\n        );\n\n        if ($freezeElement) {\n            $form->freeze('extra_'.$fieldDetails['variable']);\n        }\n\n        return $jqueryReadyContent;\n    }\n\n    /**\n     * @param \\FormValidator $form\n     * @param bool           $freezeElement\n     *\n     * @return string\n     */\n    private function addTripleSelectElement(\n        FormValidator $form,\n        array $fieldDetails,\n        array $extraData,\n        $freezeElement\n    ) {\n        $variable = $fieldDetails['variable'];\n        $id = $fieldDetails['id'];\n        $slctFirstId = \"first_extra$variable\";\n        $slctSecondId = \"second_extra$variable\";\n        $slctThirdId = \"third_extra$variable\";\n        $langSelect = get_lang('Select');\n\n        $js = \"\n            (function () {\n                var slctFirst = $('#$slctFirstId'),\n                    slctSecond = $('#$slctSecondId'),\n                    slctThird = $('#$slctThirdId');\n\n                slctFirst.on('change', function () {\n                    slctSecond.empty().selectpicker('refresh');\n                    slctThird.empty().selectpicker('refresh');\n\n                    var level = $(this).val();\n\n                    if (!level) {\n                        return;\n                    }\n\n                    $.getJSON(_p.web_ajax + 'extra_field.ajax.php', {\n                        'a': 'get_second_select_options',\n                        'type': '$this->type',\n                        'field_id': $id,\n                        'option_value_id': level\n                    })\n                        .done(function (data) {\n                            slctSecond.append(\n                                $('<option>', {value: '', text: '$langSelect'})\n                            );\n\n                            $.each(data, function (index, value) {\n                                var valueParts = value.split('#'),\n                                    dataValue = valueParts.length > 1 ? valueParts.shift() : '';\n\n                                slctSecond.append(\n                                    $('<option>', {value: index, text: valueParts.join(''), 'data-value': dataValue})\n                                );\n                            });\n\n                            slctSecond.selectpicker('refresh');\n                        });\n                });\n                slctSecond.on('change', function () {\n                    slctThird.empty().selectpicker('refresh');\n\n                    var level = $(this).val();\n\n                    if (!level) {\n                        return;\n                    }\n\n                    $.getJSON(_p.web_ajax + 'extra_field.ajax.php', {\n                        'a': 'get_second_select_options',\n                        'type': '$this->type',\n                        'field_id': $id,\n                        'option_value_id': level\n                    })\n                        .done(function (data) {\n                            slctThird.append(\n                                $('<option>', {value: '', text: '$langSelect'})\n                            );\n\n                            $.each(data, function (index, value) {\n                                var valueParts = value.split('#'),\n                                    dataValue = valueParts.length > 1 ? valueParts.shift() : '';\n\n                                slctThird.append(\n                                    $('<option>', {value: index, text: valueParts.join(''), 'data-value': dataValue})\n                                );\n                            });\n\n                            slctThird.selectpicker('refresh');\n                        });\n                });\n            })();\n        \";\n\n        $firstId = isset($extraData[\"extra_$variable\"][\"extra_$variable\"])\n            ? $extraData[\"extra_$variable\"][\"extra_$variable\"]\n            : '';\n        $secondId = isset($extraData[\"extra_$variable\"][\"extra_{$variable}_second\"])\n            ? $extraData[\"extra_$variable\"][\"extra_{$variable}_second\"]\n            : '';\n\n        $options = $this->tripleSelectConvertArrayToOrderedArray($fieldDetails['options']);\n        $values1 = ['' => $langSelect];\n        $values2 = ['' => $langSelect];\n        $values3 = ['' => $langSelect];\n        $level1 = $this->getOptionsFromTripleSelect($options['level1'], 0);\n        $level2 = $this->getOptionsFromTripleSelect($options['level2'], $firstId);\n        $level3 = $this->getOptionsFromTripleSelect($options['level3'], $secondId);\n        /** @var \\HTML_QuickForm_select $slctFirst */\n        $slctFirst = $form->createElement('select', \"extra_$variable\", null, $values1, ['id' => $slctFirstId]);\n        /** @var \\HTML_QuickForm_select $slctFirst */\n        $slctSecond = $form->createElement(\n            'select',\n            \"extra_{$variable}_second\",\n            null,\n            $values2,\n            ['id' => $slctSecondId]\n        );\n        /** @var \\HTML_QuickForm_select $slctFirst */\n        $slctThird = $form->createElement('select', \"extra_{$variable}_third\", null, $values3, ['id' => $slctThirdId]);\n\n        foreach ($level1 as $item1) {\n            $valueParts = explode('#', $item1['display_text']);\n            $dataValue = count($valueParts) > 1 ? array_shift($valueParts) : '';\n            $slctFirst->addOption(implode('', $valueParts), $item1['id'], ['data-value' => $dataValue]);\n        }\n\n        foreach ($level2 as $item2) {\n            $valueParts = explode('#', $item2['display_text']);\n            $dataValue = count($valueParts) > 1 ? array_shift($valueParts) : '';\n            $slctSecond->addOption(implode('', $valueParts), $item2['id'], ['data-value' => $dataValue]);\n        }\n\n        foreach ($level3 as $item3) {\n            $valueParts = explode('#', $item3['display_text']);\n            $dataValue = count($valueParts) > 1 ? array_shift($valueParts) : '';\n            $slctThird->addOption(implode('', $valueParts), $item3['id'], ['data-value' => $dataValue]);\n        }\n\n        $form\n            ->defaultRenderer()\n            ->setGroupElementTemplate('<p>{element}</p>', \"extra_$variable\");\n        $form->addGroup([$slctFirst, $slctSecond, $slctThird], \"extra_$variable\", $fieldDetails['display_text']);\n\n        if ($freezeElement) {\n            $form->freeze('extra_'.$fieldDetails['variable']);\n        }\n\n        return $js;\n    }\n\n    /**\n     * @param int $parentId\n     *\n     * @return array\n     */\n    private static function getOptionsFromTripleSelect(array $options, $parentId)\n    {\n        return array_filter(\n            $options,\n            function ($option) use ($parentId) {\n                return $option['option_value'] == $parentId;\n            }\n        );\n    }\n}\n"], "fixing_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CoreBundle\\Entity\\ExtraField as EntityExtraField;\nuse Chamilo\\CoreBundle\\Entity\\ExtraFieldRelTag;\nuse Chamilo\\CoreBundle\\Entity\\Tag;\n\n/**\n * Class ExtraField.\n */\nclass ExtraField extends Model\n{\n    public const FIELD_TYPE_TEXT = 1;\n    public const FIELD_TYPE_TEXTAREA = 2;\n    public const FIELD_TYPE_RADIO = 3;\n    public const FIELD_TYPE_SELECT = 4;\n    public const FIELD_TYPE_SELECT_MULTIPLE = 5;\n    public const FIELD_TYPE_DATE = 6;\n    public const FIELD_TYPE_DATETIME = 7;\n    public const FIELD_TYPE_DOUBLE_SELECT = 8;\n    public const FIELD_TYPE_DIVIDER = 9;\n    public const FIELD_TYPE_TAG = 10;\n    public const FIELD_TYPE_TIMEZONE = 11;\n    public const FIELD_TYPE_SOCIAL_PROFILE = 12;\n    public const FIELD_TYPE_CHECKBOX = 13;\n    public const FIELD_TYPE_MOBILE_PHONE_NUMBER = 14;\n    public const FIELD_TYPE_INTEGER = 15;\n    public const FIELD_TYPE_FILE_IMAGE = 16;\n    public const FIELD_TYPE_FLOAT = 17;\n    public const FIELD_TYPE_FILE = 18;\n    public const FIELD_TYPE_VIDEO_URL = 19;\n    public const FIELD_TYPE_LETTERS_ONLY = 20;\n    public const FIELD_TYPE_ALPHANUMERIC = 21;\n    public const FIELD_TYPE_LETTERS_SPACE = 22;\n    public const FIELD_TYPE_ALPHANUMERIC_SPACE = 23;\n    public const FIELD_TYPE_GEOLOCALIZATION = 24;\n    public const FIELD_TYPE_GEOLOCALIZATION_COORDINATES = 25;\n    public const FIELD_TYPE_SELECT_WITH_TEXT_FIELD = 26;\n    public const FIELD_TYPE_TRIPLE_SELECT = 27;\n    public $columns = [\n        'id',\n        'field_type',\n        'variable',\n        'display_text',\n        'default_value',\n        'field_order',\n        'visible_to_self',\n        'visible_to_others',\n        'changeable',\n        'filter',\n        'extra_field_type',\n        //Enable this when field_loggeable is introduced as a table field (2.0)\n        //'field_loggeable',\n        'created_at',\n    ];\n\n    public $ops = [\n        'eq' => '=', //equal\n        'ne' => '<>', //not equal\n        'lt' => '<', //less than\n        'le' => '<=', //less than or equal\n        'gt' => '>', //greater than\n        'ge' => '>=', //greater than or equal\n        'bw' => 'LIKE', //begins with\n        'bn' => 'NOT LIKE', //doesn't begin with\n        'in' => 'LIKE', //is in\n        'ni' => 'NOT LIKE', //is not in\n        'ew' => 'LIKE', //ends with\n        'en' => 'NOT LIKE', //doesn't end with\n        'cn' => 'LIKE', //contains\n        'nc' => 'NOT LIKE',  //doesn't contain\n    ];\n\n    public $type = 'user';\n    public $pageName;\n    public $pageUrl;\n    public $extraFieldType = 0;\n\n    public $table_field_options;\n    public $table_field_values;\n    public $table_field_tag;\n    public $table_field_rel_tag;\n\n    public $handler_id;\n    public $primaryKey;\n\n    /**\n     * @param string $type\n     */\n    public function __construct($type)\n    {\n        parent::__construct();\n\n        $this->type = $type;\n        $this->table = Database::get_main_table(TABLE_EXTRA_FIELD);\n        $this->table_field_options = Database::get_main_table(TABLE_EXTRA_FIELD_OPTIONS);\n        $this->table_field_values = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $this->table_field_tag = Database::get_main_table(TABLE_MAIN_TAG);\n        $this->table_field_rel_tag = Database::get_main_table(TABLE_MAIN_EXTRA_FIELD_REL_TAG);\n\n        $this->handler_id = 'item_id';\n\n        switch ($this->type) {\n            case 'calendar_event':\n                $this->extraFieldType = EntityExtraField::CALENDAR_FIELD_TYPE;\n                break;\n            case 'course':\n                $this->extraFieldType = EntityExtraField::COURSE_FIELD_TYPE;\n                $this->primaryKey = 'id';\n                break;\n            case 'user':\n                $this->extraFieldType = EntityExtraField::USER_FIELD_TYPE;\n                $this->primaryKey = 'id';\n                break;\n            case 'session':\n                $this->extraFieldType = EntityExtraField::SESSION_FIELD_TYPE;\n                $this->primaryKey = 'id';\n                break;\n            case 'exercise':\n                $this->extraFieldType = EntityExtraField::EXERCISE_FIELD_TYPE;\n                break;\n            case 'question':\n                $this->extraFieldType = EntityExtraField::QUESTION_FIELD_TYPE;\n                break;\n            case 'lp':\n                $this->extraFieldType = EntityExtraField::LP_FIELD_TYPE;\n                break;\n            case 'lp_item':\n                $this->extraFieldType = EntityExtraField::LP_ITEM_FIELD_TYPE;\n                break;\n            case 'skill':\n                $this->extraFieldType = EntityExtraField::SKILL_FIELD_TYPE;\n                break;\n            case 'work':\n                $this->extraFieldType = EntityExtraField::WORK_FIELD_TYPE;\n                break;\n            case 'career':\n                $this->extraFieldType = EntityExtraField::CAREER_FIELD_TYPE;\n                break;\n            case 'user_certificate':\n                $this->extraFieldType = EntityExtraField::USER_CERTIFICATE;\n                break;\n            case 'survey':\n                $this->extraFieldType = EntityExtraField::SURVEY_FIELD_TYPE;\n                break;\n            case 'scheduled_announcement':\n                $this->extraFieldType = EntityExtraField::SCHEDULED_ANNOUNCEMENT;\n                break;\n            case 'terms_and_condition':\n                $this->extraFieldType = EntityExtraField::TERMS_AND_CONDITION_TYPE;\n                break;\n            case 'forum_category':\n                $this->extraFieldType = EntityExtraField::FORUM_CATEGORY_TYPE;\n                break;\n            case 'forum_post':\n                $this->extraFieldType = EntityExtraField::FORUM_POST_TYPE;\n                break;\n            case 'track_exercise':\n                $this->extraFieldType = EntityExtraField::TRACK_EXERCISE_FIELD_TYPE;\n                break;\n            case 'portfolio':\n                $this->extraFieldType = EntityExtraField::PORTFOLIO_TYPE;\n                break;\n            case 'lp_view':\n                $this->extraFieldType = EntityExtraField::LP_VIEW_TYPE;\n                break;\n            case 'course_announcement':\n                $this->extraFieldType = EntityExtraField::COURSE_ANNOUNCEMENT;\n                break;\n            case 'message':\n                $this->extraFieldType = EntityExtraField::MESSAGE_TYPE;\n                break;\n            case 'document':\n                $this->extraFieldType = EntityExtraField::DOCUMENT_TYPE;\n                break;\n            case 'attendance_calendar':\n                $this->extraFieldType = EntityExtraField::ATTENDANCE_CALENDAR_TYPE;\n                break;\n        }\n\n        $this->pageUrl = 'extra_fields.php?type='.$this->type;\n        // Example QuestionFields\n        $this->pageName = get_lang(ucwords($this->type).'Fields');\n    }\n\n    /**\n     * @return array\n     */\n    public static function getValidExtraFieldTypes()\n    {\n        $result = [\n            'user',\n            'course',\n            'session',\n            'question',\n            'lp',\n            'calendar_event',\n            'lp_item',\n            'skill',\n            'work',\n            'career',\n            'user_certificate',\n            'survey',\n            'terms_and_condition',\n            'forum_category',\n            'forum_post',\n            'exercise',\n            'track_exercise',\n            'lp_view',\n            'course_announcement',\n            'message',\n            'document',\n            'attendance_calendar',\n        ];\n\n        if (api_get_configuration_value('allow_scheduled_announcements')) {\n            $result[] = 'scheduled_announcement';\n        }\n\n        if (api_get_configuration_value('allow_portfolio_tool')) {\n            $result[] = 'portfolio';\n        }\n        sort($result);\n\n        return $result;\n    }\n\n    /**\n     * Converts a string like this:\n     * France:Paris;Bretagne;Marseille;Lyon|Belgique:Bruxelles;Namur;Li\u00e8ge;Bruges|Peru:Lima;Piura;\n     * into\n     * array(\n     *   'France' =>\n     *      array('Paris', 'Bretagne', 'Marseille'),\n     *   'Belgique' =>\n     *      array('Namur', 'Li\u00e8ge')\n     * ), etc.\n     *\n     * @param string $string\n     *\n     * @return array\n     */\n    public static function extra_field_double_select_convert_string_to_array($string)\n    {\n        $options = explode('|', $string);\n        $options_parsed = [];\n        $id = 0;\n\n        if (!empty($options)) {\n            foreach ($options as $sub_options) {\n                $options = explode(':', $sub_options);\n                $sub_sub_options = isset($options[1]) ? explode(';', $options[1]) : [];\n                $options_parsed[$id] = [\n                    'label' => $options[0],\n                    'options' => $sub_sub_options,\n                ];\n                $id++;\n            }\n        }\n\n        return $options_parsed;\n    }\n\n    /**\n     * @param $string\n     *\n     * @return array\n     */\n    public static function tripleSelectConvertStringToArray($string)\n    {\n        $options = [];\n        foreach (explode('|', $string) as $i => $item0) {\n            $level1 = explode('\\\\', $item0);\n\n            foreach ($level1 as $j => $item1) {\n                if (0 === $j) {\n                    $options[] = ['label' => $item1, 'options' => []];\n\n                    continue;\n                }\n\n                foreach (explode(':', $item1) as $k => $item2) {\n                    if (0 === $k) {\n                        $options[$i]['options'][] = ['label' => $item2, 'options' => []];\n\n                        continue;\n                    }\n\n                    $options[$i]['options'][$j - 1]['options'][] = explode(';', $item2);\n                }\n            }\n        }\n\n        array_walk_recursive(\n            $options,\n            function (&$item) {\n                $item = trim($item);\n            }\n        );\n\n        return $options;\n    }\n\n    /**\n     * @param array $options the result of the get_field_options_by_field() array\n     *\n     * @return string\n     */\n    public static function extra_field_double_select_convert_array_to_string($options)\n    {\n        $string = null;\n        $optionsParsed = self::extra_field_double_select_convert_array_to_ordered_array($options);\n\n        if (!empty($optionsParsed)) {\n            foreach ($optionsParsed as $option) {\n                foreach ($option as $key => $item) {\n                    $string .= $item['display_text'];\n                    if (0 == $key) {\n                        $string .= ':';\n                    } else {\n                        if (isset($option[$key + 1])) {\n                            $string .= ';';\n                        }\n                    }\n                }\n                $string .= '|';\n            }\n        }\n\n        if (!empty($string)) {\n            $string = substr($string, 0, strlen($string) - 1);\n        }\n\n        return $string;\n    }\n\n    /**\n     * @param array $options The result of the get_field_options_by_field() array\n     *\n     * @return string\n     */\n    public static function extraFieldSelectWithTextConvertArrayToString(array $options)\n    {\n        $parsedOptions = self::extra_field_double_select_convert_array_to_ordered_array($options);\n\n        if (empty($parsedOptions)) {\n            return '';\n        }\n\n        $string = '';\n        foreach ($parsedOptions as $options) {\n            $option = current($options);\n            $string .= $option['display_text'];\n            $string .= '|';\n        }\n\n        return rtrim($string, '|');\n    }\n\n    /**\n     * @return string\n     */\n    public static function tripleSelectConvertArrayToString(array $options)\n    {\n        $parsedOptions = self::tripleSelectConvertArrayToOrderedArray($options);\n        $string = '';\n        foreach ($parsedOptions['level1'] as $item1) {\n            $string .= $item1['display_text'];\n            $level2 = self::getOptionsFromTripleSelect($parsedOptions['level2'], $item1['id']);\n\n            foreach ($level2 as $item2) {\n                $string .= '\\\\'.$item2['display_text'].':';\n                $level3 = self::getOptionsFromTripleSelect($parsedOptions['level3'], $item2['id']);\n\n                $string .= implode(';', array_column($level3, 'display_text'));\n            }\n\n            $string .= '|';\n        }\n\n        return trim($string, '\\\\|;');\n    }\n\n    /**\n     * @param string $variable\n     * @param string $dataValue\n     *\n     * @return string\n     */\n    public static function getLocalizationJavascript($variable, $dataValue)\n    {\n        $dataValue = addslashes($dataValue);\n        $html = \"<script>\n            $(function() {\n                if (typeof google === 'object') {\n                    var address = '$dataValue';\n                    initializeGeo{$variable}(address, false);\n\n                    $('#geolocalization_extra_{$variable}').on('click', function() {\n                        var address = $('#{$variable}').val();\n                        initializeGeo{$variable}(address, false);\n                        return false;\n                    });\n\n                    $('#myLocation_extra_{$variable}').on('click', function() {\n                        myLocation{$variable}();\n                        return false;\n                    });\n\n                    // When clicking enter\n                    $('#{$variable}').keypress(function(event) {\n                        if (event.which == 13) {\n                            $('#geolocalization_extra_{$variable}').click();\n                            return false;\n                        }\n                    });\n\n                    // On focus out update city\n                    $('#{$variable}').focusout(function() {\n                        $('#geolocalization_extra_{$variable}').click();\n                        return false;\n                    });\n\n                    return;\n                }\n\n                $('#map_extra_{$variable}')\n                    .html('<div class=\\\"alert alert-info\\\">\"\n            .addslashes(get_lang('YouNeedToActivateTheGoogleMapsPluginInAdminPlatformToSeeTheMap'))\n            .\"</div>');\n            });\n\n            function myLocation{$variable}()\n            {\n                if (navigator.geolocation) {\n                    var geoPosition = function(position) {\n                        var lat = position.coords.latitude;\n                        var lng = position.coords.longitude;\n                        var latLng = new google.maps.LatLng(lat, lng);\n                        initializeGeo{$variable}(false, latLng);\n                    };\n\n                    var geoError = function(error) {\n                        alert('Geocode \".get_lang('Error').\": ' + error);\n                    };\n\n                    var geoOptions = {\n                        enableHighAccuracy: true\n                    };\n                    navigator.geolocation.getCurrentPosition(geoPosition, geoError, geoOptions);\n                }\n            }\n\n            function initializeGeo{$variable}(address, latLng)\n            {\n                var geocoder = new google.maps.Geocoder();\n                var latlng = new google.maps.LatLng(-34.397, 150.644);\n                var myOptions = {\n                    zoom: 15,\n                    center: latlng,\n                    mapTypeControl: true,\n                    mapTypeControlOptions: {\n                        style: google.maps.MapTypeControlStyle.DROPDOWN_MENU\n                    },\n                    navigationControl: true,\n                    mapTypeId: google.maps.MapTypeId.ROADMAP\n                };\n\n                map_{$variable} = new google.maps.Map(\n                    document.getElementById('map_extra_{$variable}'),\n                    myOptions\n                );\n\n                var parameter = address ? {'address': address} : latLng ? {'latLng': latLng} : false;\n\n                if (geocoder && parameter) {\n                    geocoder.geocode(parameter, function(results, status) {\n                        if (status == google.maps.GeocoderStatus.OK) {\n                            if (status != google.maps.GeocoderStatus.ZERO_RESULTS) {\n                                map_{$variable}.setCenter(results[0].geometry.location);\n\n                                // get city and country\n                                var defaultAddress = results[0].formatted_address;\n                                var city = '';\n                                var country = '';\n\n                                for (var i=0; i<results[0].address_components.length; i++) {\n                                    if (results[0].address_components[i].types[0] == \\\"locality\\\") {\n                                        //this is the object you are looking for City\n                                        city = results[0].address_components[i];\n                                    }\n                                    /*if (results[j].address_components[i].types[0] == \\\"administrative_area_level_1\\\") {\n                                        //this is the object you are looking for State\n                                        region = results[0].address_components[i];\n                                    }*/\n                                    if (results[0].address_components[i].types[0] == \\\"country\\\") {\n                                        //this is the object you are looking for\n                                        country = results[0].address_components[i];\n                                    }\n                                }\n\n                                if (city && city.long_name && country && country.long_name) {\n                                    defaultAddress = city.long_name + ', ' + country.long_name;\n                                }\n                                $('#{$variable}').val(defaultAddress);\n                                $('#{$variable}_coordinates').val(\n                                    results[0].geometry.location.lat()+','+results[0].geometry.location.lng()\n                                );\n\n                                var infowindow = new google.maps.InfoWindow({\n                                    content: '<b>' + $('#extra_{$variable}').val() + '</b>',\n                                    size: new google.maps.Size(150, 50)\n                                });\n\n                                var marker = new google.maps.Marker({\n                                    position: results[0].geometry.location,\n                                    map: map_{$variable},\n                                    title: $('#extra_{$variable}').val()\n                                });\n                                google.maps.event.addListener(marker, 'click', function() {\n                                    infowindow.open(map_{$variable}, marker);\n                                });\n                            } else {\n                                alert('\".get_lang('NotFound').\"');\n                            }\n                        } else {\n                            alert('Geocode \".get_lang('Error').': '.get_lang('AddressField').' '.get_lang('NotFound').\"');\n                        }\n                    });\n                }\n            }\n            </script>\";\n\n        return $html;\n    }\n\n    /**\n     * @param string $variable\n     * @param string $text\n     *\n     * @return string\n     */\n    public static function getLocalizationInput($variable, $text)\n    {\n        $html = '\n                <div class=\"form-group\">\n                    <label for=\"geolocalization_extra_'.$variable.'\"\n                        class=\"col-sm-2 control-label\"></label>\n                    <div class=\"col-sm-8\">\n                        <button class=\"btn btn-default\"\n                            id=\"geolocalization_extra_'.$variable.'\"\n                            name=\"geolocalization_extra_'.$variable.'\"\n                            type=\"submit\">\n                            <em class=\"fa fa-map-marker\"></em> '.get_lang('SearchGeolocalization').'\n                        </button>\n                        <button class=\"btn btn-default\" id=\"myLocation_extra_'.$variable.'\"\n                            name=\"myLocation_extra_'.$variable.'\"\n                            type=\"submit\">\n                            <em class=\"fa fa-crosshairs\"></em> '.get_lang('MyLocation').'\n                        </button>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"map_extra_'.$variable.'\" class=\"col-sm-2 control-label\">\n                        '.$text.' - '.get_lang('Map').'\n                    </label>\n                    <div class=\"col-sm-8\">\n                        <div name=\"map_extra_'.$variable.'\"\n                            id=\"map_extra_'.$variable.'\" style=\"width:100%; height:300px;\">\n                        </div>\n                    </div>\n                </div>\n            ';\n\n        return $html;\n    }\n\n    /**\n     * @return int\n     */\n    public function get_count()\n    {\n        $em = Database::getManager();\n        $query = $em->getRepository('ChamiloCoreBundle:ExtraField')->createQueryBuilder('e');\n        $query->select('count(e.id)');\n        $query->where('e.extraFieldType = :type');\n        $query->setParameter('type', $this->getExtraFieldType());\n\n        return $query->getQuery()->getSingleScalarResult();\n    }\n\n    /**\n     * @return int\n     */\n    public function getExtraFieldType()\n    {\n        return (int) $this->extraFieldType;\n    }\n\n    /**\n     * @param string $sidx\n     * @param string $sord\n     * @param int    $start\n     * @param int    $limit\n     *\n     * @return array\n     */\n    public function getAllGrid($sidx, $sord, $start, $limit)\n    {\n        switch ($sidx) {\n            case 'field_order':\n                $sidx = 'e.fieldOrder';\n                break;\n            case 'variable':\n                $sidx = 'e.variable';\n                break;\n            case 'display_text':\n                $sidx = 'e.displayText';\n                break;\n            case 'changeable':\n                $sidx = 'e.changeable';\n                break;\n            case 'visible_to_self':\n                $sidx = 'e.visibleToSelf';\n                break;\n            case 'visible_to_others':\n                $sidx = 'e.visibleToOthers';\n                break;\n            case 'filter':\n                $sidx = 'e.filter';\n                break;\n        }\n        $em = Database::getManager();\n        $query = $em->getRepository('ChamiloCoreBundle:ExtraField')->createQueryBuilder('e');\n        $query->select('e')\n            ->where('e.extraFieldType = :type')\n            ->setParameter('type', $this->getExtraFieldType())\n            ->orderBy($sidx, $sord)\n            ->setFirstResult($start)\n            ->setMaxResults($limit);\n\n        return $query->getQuery()->getArrayResult();\n    }\n\n    /**\n     * Get all the field info for tags.\n     *\n     * @param string $variable\n     *\n     * @return array|bool\n     */\n    public function get_handler_field_info_by_tags($variable)\n    {\n        $variable = Database::escape_string($variable);\n        $sql = \"SELECT * FROM {$this->table}\n                WHERE\n                    variable = '$variable' AND\n                    extra_field_type = $this->extraFieldType\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $row = Database::fetch_array($result, 'ASSOC');\n            $row['display_text'] = $this->translateDisplayName(\n                $row['variable'],\n                $row['display_text']\n            );\n            $row['options'] = [];\n\n            // All the tags of the field\n            $sql = \"SELECT * FROM $this->table_field_tag\n                    WHERE field_id='\".intval($row['id']).\"'\n                    ORDER BY id ASC\";\n            $result = Database::query($sql);\n            while ($option = Database::fetch_array($result, 'ASSOC')) {\n                $row['options'][$option['id']] = $option;\n            }\n\n            return $row;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Translate the display text for a extra field.\n     *\n     * @param string $variable\n     * @param string $defaultDisplayText\n     *\n     * @return string\n     */\n    public static function translateDisplayName($variable, $defaultDisplayText)\n    {\n        $camelCase = api_underscore_to_camel_case($variable);\n\n        return isset($GLOBALS[$camelCase]) ? $GLOBALS[$camelCase] : $defaultDisplayText;\n    }\n\n    /**\n     * @param int $fieldId\n     *\n     * @return array|bool\n     */\n    public function getFieldInfoByFieldId($fieldId)\n    {\n        $fieldId = (int) $fieldId;\n        $sql = \"SELECT * FROM {$this->table}\n                WHERE\n                    id = '$fieldId' AND\n                    extra_field_type = $this->extraFieldType\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $row = Database::fetch_array($result, 'ASSOC');\n\n            // All the options of the field\n            $sql = \"SELECT * FROM $this->table_field_options\n                    WHERE field_id='\".$fieldId.\"'\n                    ORDER BY option_order ASC\";\n            $result = Database::query($sql);\n            while ($option = Database::fetch_array($result)) {\n                $row['options'][$option['id']] = $option;\n            }\n\n            return $row;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Add elements to a form.\n     *\n     * @param FormValidator $form                            The form object to which to attach this element\n     * @param int           $itemId                          The item (course, user, session, etc) this extra_field is linked to\n     * @param array         $exclude                         Variables of extra field to exclude\n     * @param bool          $filter                          Whether to get only the fields with the \"filter\" flag set to 1 (true)\n     *                                                       or not (false)\n     * @param bool          $useTagAsSelect                  Whether to show tag fields as select drop-down or not\n     * @param array         $showOnlyTheseFields             Limit the extra fields shown to just the list given here\n     * @param array         $orderFields                     An array containing the names of the fields shown, in the right order\n     * @param array         $extraData\n     * @param bool          $orderDependingDefaults\n     * @param bool          $adminPermissions\n     * @param array         $separateExtraMultipleSelect\n     * @param array         $customLabelsExtraMultipleSelect\n     * @param bool          $addEmptyOptionSelects\n     * @param array         $introductionTextList\n     * @param array         $requiredFields\n     * @param bool          $hideGeoLocalizationDetails\n     *\n     * @throws Exception\n     *\n     * @return array|bool If relevant, returns a one-element array with JS code to be added to the page HTML headers.\n     *                    Returns false if the form object was not given\n     */\n    public function addElements(\n        $form,\n        $itemId = 0,\n        $exclude = [],\n        $filter = false,\n        $useTagAsSelect = false,\n        $showOnlyTheseFields = [],\n        $orderFields = [],\n        $extraData = [],\n        $orderDependingDefaults = false,\n        $adminPermissions = false,\n        $separateExtraMultipleSelect = [],\n        $customLabelsExtraMultipleSelect = [],\n        $addEmptyOptionSelects = false,\n        $introductionTextList = [],\n        $requiredFields = [],\n        $hideGeoLocalizationDetails = false,\n        $help = false\n    ) {\n        if (empty($form)) {\n            return false;\n        }\n\n        $itemId = (int) $itemId;\n        $form->addHidden('item_id', $itemId);\n        $extraData = false;\n        if (!empty($itemId)) {\n            $extraData = $this->get_handler_extra_data($itemId);\n            if (!empty($showOnlyTheseFields)) {\n                $setData = [];\n                foreach ($showOnlyTheseFields as $variable) {\n                    $extraName = 'extra_'.$variable;\n                    if (in_array($extraName, array_keys($extraData))) {\n                        $setData[$extraName] = $extraData[$extraName];\n                    }\n                }\n                $form->setDefaults($setData);\n            } else {\n                $form->setDefaults($extraData);\n            }\n        }\n\n        $conditions = [];\n        if ($filter) {\n            $conditions = ['filter = ?' => 1];\n        }\n\n        $extraFields = $this->get_all($conditions, 'option_order');\n        $extra = $this->set_extra_fields_in_form(\n            $form,\n            $extraData,\n            $adminPermissions,\n            $extraFields,\n            $itemId,\n            $exclude,\n            $useTagAsSelect,\n            $showOnlyTheseFields,\n            $orderFields,\n            $orderDependingDefaults,\n            $separateExtraMultipleSelect,\n            $customLabelsExtraMultipleSelect,\n            $addEmptyOptionSelects,\n            $introductionTextList,\n            $hideGeoLocalizationDetails,\n            $help\n        );\n\n        if (!empty($requiredFields)) {\n            /** @var HTML_QuickForm_input $element */\n            foreach ($form->getElements() as $element) {\n                $name = str_replace('extra_', '', $element->getName());\n                if (in_array($name, $requiredFields)) {\n                    $form->setRequired($element);\n                }\n            }\n        }\n\n        return $extra;\n    }\n\n    /**\n     * Return an array of all the extra fields available for this item.\n     *\n     * @param int $itemId (session_id, question_id, course id)\n     *\n     * @return array\n     */\n    public function get_handler_extra_data($itemId)\n    {\n        if (empty($itemId)) {\n            return [];\n        }\n\n        $extra_data = [];\n        $fields = $this->get_all();\n        $field_values = new ExtraFieldValue($this->type);\n\n        if (!empty($fields)) {\n            foreach ($fields as $field) {\n                $field_value = $field_values->get_values_by_handler_and_field_id(\n                    $itemId,\n                    $field['id']\n                );\n\n                if (self::FIELD_TYPE_TAG == $field['field_type']) {\n                    $tags = UserManager::get_user_tags_to_string(\n                        $itemId,\n                        $field['id'],\n                        false\n                    );\n                    $extra_data['extra_'.$field['variable']] = $tags;\n\n                    continue;\n                }\n\n                if ($field_value) {\n                    $variable = $field['variable'];\n                    $field_value = $field_value['value'];\n                    switch ($field['field_type']) {\n                        case self::FIELD_TYPE_TAG:\n                            $tags = UserManager::get_user_tags_to_string(\n                                $itemId,\n                                $field['id'],\n                                false\n                            );\n\n                            $extra_data['extra_'.$field['variable']] = $tags;\n                            break;\n                        case self::FIELD_TYPE_DOUBLE_SELECT:\n                        case self::FIELD_TYPE_SELECT_WITH_TEXT_FIELD:\n                            $selected_options = explode('::', $field_value);\n                            $firstOption = isset($selected_options[0]) ? $selected_options[0] : '';\n                            $secondOption = isset($selected_options[1]) ? $selected_options[1] : '';\n                            $extra_data['extra_'.$field['variable']]['extra_'.$field['variable']] = $firstOption;\n                            $extra_data['extra_'.$field['variable']]['extra_'.$field['variable'].'_second'] = $secondOption;\n\n                            break;\n                        case self::FIELD_TYPE_SELECT_MULTIPLE:\n                            $field_value = explode(';', $field_value);\n                            $extra_data['extra_'.$field['variable']] = $field_value;\n                            break;\n                        case self::FIELD_TYPE_RADIO:\n                            $extra_data['extra_'.$field['variable']]['extra_'.$field['variable']] = $field_value;\n                            break;\n                        case self::FIELD_TYPE_TRIPLE_SELECT:\n                            [$level1, $level2, $level3] = explode(';', $field_value);\n\n                            $extra_data[\"extra_$variable\"][\"extra_$variable\"] = $level1;\n                            $extra_data[\"extra_$variable\"][\"extra_{$variable}_second\"] = $level2;\n                            $extra_data[\"extra_$variable\"][\"extra_{$variable}_third\"] = $level3;\n                            break;\n                        default:\n                            $extra_data['extra_'.$field['variable']] = $field_value;\n                            break;\n                    }\n                } else {\n                    // Set default values\n                    if (isset($field['field_default_value']) &&\n                        !empty($field['field_default_value'])\n                    ) {\n                        $extra_data['extra_'.$field['variable']] = $field['field_default_value'];\n                    }\n                }\n            }\n        }\n\n        return $extra_data;\n    }\n\n    /**\n     * Get an array of all the values from the extra_field and extra_field_options tables\n     * based on the current object's type.\n     *\n     * @param array $conditions\n     * @param null  $order_field_options_by\n     *\n     * @return array\n     */\n    public function get_all($conditions = [], $order_field_options_by = null)\n    {\n        $conditions = Database::parse_conditions(['where' => $conditions]);\n\n        if (empty($conditions)) {\n            $conditions .= ' WHERE extra_field_type = '.$this->extraFieldType;\n        } else {\n            $conditions .= ' AND extra_field_type = '.$this->extraFieldType;\n        }\n\n        $sql = \"SELECT * FROM $this->table\n                $conditions\n                ORDER BY field_order ASC\n        \";\n\n        $result = Database::query($sql);\n        $extraFields = Database::store_result($result, 'ASSOC');\n\n        $option = new ExtraFieldOption($this->type);\n        if (!empty($extraFields)) {\n            foreach ($extraFields as &$extraField) {\n                $extraField['display_text'] = $this->translateDisplayName(\n                    $extraField['variable'],\n                    $extraField['display_text']\n                );\n                $extraField['options'] = $option->get_field_options_by_field(\n                    $extraField['id'],\n                    false,\n                    $order_field_options_by\n                );\n            }\n        }\n\n        return $extraFields;\n    }\n\n    /**\n     * Add an element that matches the given extra field to the given $form object.\n     *\n     * @param FormValidator $form                The form these fields are to be attached to\n     * @param array         $extraData\n     * @param bool          $adminPermissions    Whether the display is considered without edition limits (true) or not\n     *                                           (false)\n     * @param array         $extra\n     * @param int           $itemId              The item (course, user, session, etc) this extra_field is attached to\n     * @param array         $exclude             Extra fields to be skipped, by textual ID\n     * @param bool          $useTagAsSelect      Whether to show tag fields as select drop-down or not\n     * @param array         $showOnlyTheseFields Limit the extra fields shown to just the list given here\n     * @param array         $orderFields         An array containing the names of the fields shown, in the right order\n     *\n     * @throws Exception\n     *\n     * @return array If relevant, returns a one-element array with JS code to be added to the page HTML headers\n     */\n    public function set_extra_fields_in_form(\n        $form,\n        $extraData,\n        $adminPermissions = false,\n        $extra = [],\n        $itemId = null,\n        $exclude = [],\n        $useTagAsSelect = false,\n        $showOnlyTheseFields = [],\n        $orderFields = [],\n        $orderDependingDefaults = false,\n        $separateExtraMultipleSelect = [],\n        $customLabelsExtraMultipleSelect = [],\n        $addEmptyOptionSelects = false,\n        $introductionTextList = [],\n        $hideGeoLocalizationDetails = false,\n        $help = false\n    ) {\n        $jquery_ready_content = null;\n        if (!empty($extra)) {\n            $newOrder = [];\n            if (!empty($orderFields)) {\n                foreach ($orderFields as $order) {\n                    foreach ($extra as $field_details) {\n                        if ($order == $field_details['variable']) {\n                            $newOrder[] = $field_details;\n                        }\n                    }\n                }\n                $extra = $newOrder;\n            }\n\n            foreach ($extra as $field_details) {\n                if (!empty($showOnlyTheseFields)) {\n                    if (!in_array($field_details['variable'], $showOnlyTheseFields)) {\n                        continue;\n                    }\n                }\n\n                // Getting default value id if is set\n                $defaultValueId = null;\n                if (isset($field_details['options']) && !empty($field_details['options'])) {\n                    $valueToFind = null;\n                    if (isset($field_details['field_default_value'])) {\n                        $valueToFind = $field_details['field_default_value'];\n                    }\n                    // If a value is found we override the default value\n                    if (isset($extraData['extra_'.$field_details['variable']])) {\n                        $valueToFind = $extraData['extra_'.$field_details['variable']];\n                    }\n\n                    foreach ($field_details['options'] as $option) {\n                        if ($option['option_value'] == $valueToFind) {\n                            $defaultValueId = $option['id'];\n                        }\n                    }\n                }\n\n                if (!$adminPermissions) {\n                    if (0 == $field_details['visible_to_self']) {\n                        continue;\n                    }\n\n                    if (in_array($field_details['variable'], $exclude)) {\n                        continue;\n                    }\n                }\n\n                if (!empty($introductionTextList) &&\n                    in_array($field_details['variable'], array_keys($introductionTextList))\n                ) {\n                    $form->addHtml($introductionTextList[$field_details['variable']]);\n                }\n\n                $freezeElement = false;\n                if (!$adminPermissions) {\n                    $freezeElement = 0 == $field_details['visible_to_self'] || 0 == $field_details['changeable'];\n                }\n\n                $translatedDisplayText = get_lang($field_details['display_text'], true);\n                $translatedDisplayHelpText = '';\n                if ($help) {\n                    $translatedDisplayHelpText .= get_lang($field_details['display_text'].'Help');\n                }\n                if (!empty($translatedDisplayText)) {\n                    if (!empty($translatedDisplayHelpText)) {\n                        // In this case, exceptionally, display_text is an array\n                        // which is then treated by display_form()\n                        $field_details['display_text'] = [$translatedDisplayText, $translatedDisplayHelpText];\n                    } else {\n                        // We have an helper text, use it\n                        $field_details['display_text'] = $translatedDisplayText;\n                    }\n                }\n\n                switch ($field_details['field_type']) {\n                    case self::FIELD_TYPE_TEXT:\n                        $form->addElement(\n                            'text',\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text'],\n                            [\n                                'id' => 'extra_'.$field_details['variable'],\n                            ]\n                        );\n                        $form->applyFilter(\n                            'extra_'.$field_details['variable'],\n                            'stripslashes'\n                        );\n                        $form->applyFilter(\n                            'extra_'.$field_details['variable'],\n                            'trim'\n                        );\n                        $form->applyFilter(\n                            'extra_'.$field_details['variable'],\n                            'html_filter'\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_TEXTAREA:\n                        $form->addHtmlEditor(\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text'],\n                            false,\n                            false,\n                            [\n                                'ToolbarSet' => 'Profile',\n                                'Width' => '100%',\n                                'Height' => '130',\n                                'id' => 'extra_'.$field_details['variable'],\n                            ]\n                        );\n                        $form->applyFilter('extra_'.$field_details['variable'], 'stripslashes');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'trim');\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_RADIO:\n                        $group = [];\n                        if (isset($field_details['options']) &&\n                            !empty($field_details['options'])\n                        ) {\n                            foreach ($field_details['options'] as $option_details) {\n                                $options[$option_details['option_value']] = $option_details['display_text'];\n                                $group[] = $form->createElement(\n                                    'radio',\n                                    'extra_'.$field_details['variable'],\n                                    $option_details['option_value'],\n                                    $option_details['display_text'].'<br />',\n                                    $option_details['option_value']\n                                );\n                            }\n                        }\n                        $form->addGroup(\n                            $group,\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text']\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_CHECKBOX:\n                        $group = [];\n                        if (isset($field_details['options']) &&\n                            !empty($field_details['options'])\n                        ) {\n                            foreach ($field_details['options'] as $option_details) {\n                                $options[$option_details['option_value']] = $option_details['display_text'];\n                                $group[] = $form->createElement(\n                                    'checkbox',\n                                    'extra_'.$field_details['variable'],\n                                    $option_details['option_value'],\n                                    $option_details['display_text'].'<br />',\n                                    $option_details['option_value']\n                                );\n                            }\n                        } else {\n                            $fieldVariable = \"extra_{$field_details['variable']}\";\n                            $checkboxAttributes = [];\n                            if (is_array($extraData) &&\n                                array_key_exists($fieldVariable, $extraData)\n                            ) {\n                                if (!empty($extraData[$fieldVariable])) {\n                                    $checkboxAttributes['checked'] = 1;\n                                }\n                            }\n\n                            if (empty($checkboxAttributes) &&\n                                isset($field_details['default_value']) && empty($extraData)) {\n                                if (1 == $field_details['default_value']) {\n                                    $checkboxAttributes['checked'] = 1;\n                                }\n                            }\n\n                            // We assume that is a switch on/off with 1 and 0 as values\n                            $group[] = $form->createElement(\n                                'checkbox',\n                                'extra_'.$field_details['variable'],\n                                null,\n                                get_lang('Yes'),\n                                $checkboxAttributes\n                            );\n                        }\n\n                        $form->addGroup(\n                            $group,\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text']\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_SELECT:\n                        $this->addSelectElement($form, $field_details, $defaultValueId, $freezeElement);\n                        break;\n                    case self::FIELD_TYPE_SELECT_MULTIPLE:\n                        $options = [];\n                        if (empty($defaultValueId)) {\n                            $options[''] = get_lang('SelectAnOption');\n                        }\n\n                        if (isset($field_details['options']) && !empty($field_details['options'])) {\n                            foreach ($field_details['options'] as $optionDetails) {\n                                $options[$optionDetails['option_value']] = $optionDetails['display_text'];\n                            }\n                        }\n\n                        $form->addElement(\n                            'select',\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text'],\n                            $options,\n                            [\n                                'multiple' => 'multiple',\n                                'id' => 'extra_'.$field_details['variable'],\n                            ]\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_DATE:\n                        $form->addDatePicker('extra_'.$field_details['variable'], $field_details['display_text']);\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_DATETIME:\n                        $form->addDateTimePicker(\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text']\n                        );\n\n                        $defaults = [];\n                        if (EntityExtraField::LP_ITEM_FIELD_TYPE !== (int) $field_details['extra_field_type']) {\n                            $defaults['extra_'.$field_details['variable']] = api_get_local_time();\n                        }\n                        if (!isset($form->_defaultValues['extra_'.$field_details['variable']])) {\n                            $form->setDefaults($defaults);\n                        }\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_DOUBLE_SELECT:\n                        $jquery_ready_content .= self::addDoubleSelectElement(\n                            $form,\n                            $field_details,\n                            $extraData,\n                            $freezeElement\n                        );\n                        break;\n                    case self::FIELD_TYPE_DIVIDER:\n                        $form->addHtml(\n                            '\n                            <div class=\"form-group \">\n                                <div class=\"col-sm-12\">\n                                    <div class=\"panel-separator\">\n                                       <h4 id=\"'.$field_details['variable'].'\" class=\"form-separator\">'\n                            .$field_details['display_text'].'\n                                       </h4>\n                                    </div>\n                                </div>\n                            </div>\n                        '\n                        );\n                        break;\n                    case self::FIELD_TYPE_TAG:\n                        $variable = $field_details['variable'];\n                        $field_id = $field_details['id'];\n                        $separateValue = 0;\n                        if (isset($separateExtraMultipleSelect[$field_details['variable']])) {\n                            $separateValue = $separateExtraMultipleSelect[$field_details['variable']];\n                        }\n\n                        $selectedOptions = [];\n                        if ($separateValue > 0) {\n                            $em = Database::getManager();\n                            $fieldTags = $em\n                                ->getRepository('ChamiloCoreBundle:ExtraFieldRelTag')\n                                ->findBy(\n                                    [\n                                        'fieldId' => $field_id,\n                                        'itemId' => $itemId,\n                                    ]\n                                );\n                            // ofaj\n\n                            for ($i = 0; $i < $separateValue; $i++) {\n                                $tagsSelect = $form->addElement(\n                                    'select',\n                                    'extra_'.$field_details['variable'].'['.$i.']',\n                                    $customLabelsExtraMultipleSelect[$field_details['variable']][$i],\n                                    null,\n                                    ['id' => 'extra_'.$field_details['variable'].'_'.$i]\n                                );\n\n                                if ($addEmptyOptionSelects) {\n                                    $tagsSelect->addOption(\n                                        '',\n                                        ''\n                                    );\n                                }\n\n                                foreach ($fieldTags as $fieldTag) {\n                                    $tag = $em->find('ChamiloCoreBundle:Tag', $fieldTag->getTagId());\n\n                                    if (empty($tag)) {\n                                        continue;\n                                    }\n\n                                    $tagsSelect->addOption(\n                                        $tag->getTag(),\n                                        $tag->getTag()\n                                    );\n                                }\n                            }\n                        } else {\n                            $tagsSelect = $form->addSelect(\n                                \"extra_{$field_details['variable']}\",\n                                $field_details['display_text'],\n                                [],\n                                ['style' => 'width: 100%;']\n                            );\n\n                            if (false === $useTagAsSelect) {\n                                $tagsSelect->setAttribute('class', null);\n                            }\n\n                            $tagsSelect->setAttribute(\n                                'id',\n                                \"extra_{$field_details['variable']}\"\n                            );\n                            $tagsSelect->setMultiple(true);\n\n                            $selectedOptions = [];\n                            if ('user' === $this->type) {\n                                // The magic should be here\n                                $user_tags = UserManager::get_user_tags(\n                                    $itemId,\n                                    $field_details['id']\n                                );\n\n                                if (is_array($user_tags) && count($user_tags) > 0) {\n                                    foreach ($user_tags as $tag) {\n                                        if (empty($tag['tag'])) {\n                                            continue;\n                                        }\n                                        $tagsSelect->addOption(\n                                            $tag['tag'],\n                                            $tag['tag'],\n                                            [\n                                                'selected' => 'selected',\n                                                'class' => 'selected',\n                                            ]\n                                        );\n                                        $selectedOptions[] = $tag['tag'];\n                                    }\n                                }\n                                $url = api_get_path(WEB_AJAX_PATH).'user_manager.ajax.php';\n                            } else {\n                                $em = Database::getManager();\n                                $fieldTags = $em->getRepository(\n                                    'ChamiloCoreBundle:ExtraFieldRelTag'\n                                )\n                                    ->findBy(\n                                        [\n                                            'fieldId' => $field_id,\n                                            'itemId' => $itemId,\n                                        ]\n                                    );\n\n                                /** @var ExtraFieldRelTag $fieldTag */\n                                foreach ($fieldTags as $fieldTag) {\n                                    /** @var Tag $tag */\n                                    $tag = $em->find('ChamiloCoreBundle:Tag', $fieldTag->getTagId());\n\n                                    if (empty($tag)) {\n                                        continue;\n                                    }\n                                    $tagsSelect->addOption(\n                                        $tag->getTag(),\n                                        $tag->getTag()\n                                    );\n                                    $selectedOptions[] = $tag->getTag();\n                                }\n\n                                if (!empty($extraData) && isset($extraData['extra_'.$field_details['variable']])) {\n                                    $data = $extraData['extra_'.$field_details['variable']];\n                                    if (!empty($data)) {\n                                        foreach ($data as $option) {\n                                            $tagsSelect->addOption(\n                                                $option,\n                                                $option\n                                            );\n                                        }\n                                    }\n                                }\n\n                                if ($useTagAsSelect) {\n                                    $fieldTags = $em->getRepository('ChamiloCoreBundle:ExtraFieldRelTag')\n                                        ->findBy(\n                                            [\n                                                'fieldId' => $field_id,\n                                            ]\n                                        );\n                                    $tagsAdded = [];\n                                    foreach ($fieldTags as $fieldTag) {\n                                        $tag = $em->find('ChamiloCoreBundle:Tag', $fieldTag->getTagId());\n\n                                        if (empty($tag)) {\n                                            continue;\n                                        }\n\n                                        $tagText = $tag->getTag();\n\n                                        if (in_array($tagText, $tagsAdded)) {\n                                            continue;\n                                        }\n\n                                        $tagsSelect->addOption(\n                                            $tag->getTag(),\n                                            $tag->getTag(),\n                                            []\n                                        );\n\n                                        $tagsAdded[] = $tagText;\n                                    }\n                                }\n                                $url = api_get_path(WEB_AJAX_PATH).'extra_field.ajax.php';\n                            }\n\n                            $allowAsTags = 'true';\n\n                            if ('portfolio' === $this->type) {\n                                $allowAsTags = 'false';\n                            }\n\n                            $form->setDefaults(\n                                [\n                                    'extra_'.$field_details['variable'] => $selectedOptions,\n                                ]\n                            );\n\n                            if (false == $useTagAsSelect) {\n                                $jquery_ready_content .= \"\n                                $('#extra_$variable').select2({\n                                    ajax: {\n                                        url: '$url?a=search_tags&field_id=$field_id&type={$this->type}',\n                                        processResults: function (data) {\n                                            return {\n                                                results: data.items\n                                            }\n                                        }\n                                    },\n                                    cache: false,\n                                    tags: $allowAsTags,\n                                    tokenSeparators: [','],\n                                    placeholder: '\".get_lang('StartToType').\"'\n                                });\n                            \";\n                            }\n                        }\n\n                        break;\n                    case self::FIELD_TYPE_TIMEZONE:\n                        $form->addElement(\n                            'select',\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text'],\n                            api_get_timezones(),\n                            ''\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_SOCIAL_PROFILE:\n                        // get the social network's favicon\n                        $extra_data_variable = isset($extraData['extra_'.$field_details['variable']])\n                            ? $extraData['extra_'.$field_details['variable']]\n                            : null;\n                        $field_default_value = isset($field_details['field_default_value'])\n                            ? $field_details['field_default_value']\n                            : null;\n                        $icon_path = UserManager::get_favicon_from_url(\n                            $extra_data_variable,\n                            $field_default_value\n                        );\n                        // special hack for hi5\n                        $leftpad = '1.7';\n                        $top = '0.4';\n                        $domain = parse_url($icon_path, PHP_URL_HOST);\n                        if ('www.hi5.com' === $domain || 'hi5.com' === $domain) {\n                            $leftpad = '3';\n                            $top = '0';\n                        }\n                        // print the input field\n                        $form->addElement(\n                            'text',\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text'],\n                            [\n                                'size' => 60,\n                                'size' => implode(\n                                    '; ',\n                                    [\n                                        \"background-image: url('$icon_path')\",\n                                        'background-repeat: no-repeat',\n                                        \"background-position: 0.4em {$top}em\",\n                                        \"padding-left: {$leftpad}em\",\n                                    ]\n                                ),\n                            ]\n                        );\n                        $form->applyFilter('extra_'.$field_details['variable'], 'stripslashes');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'trim');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'html_filter');\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_MOBILE_PHONE_NUMBER:\n                        $form->addElement(\n                            'text',\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text'].' ('.get_lang('CountryDialCode').')',\n                            ['size' => 40, 'placeholder' => '(xx)xxxxxxxxx']\n                        );\n                        $form->applyFilter('extra_'.$field_details['variable'], 'stripslashes');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'trim');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'mobile_phone_number_filter');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'html_filter');\n                        $form->addRule(\n                            'extra_'.$field_details['variable'],\n                            get_lang('MobilePhoneNumberWrong'),\n                            'mobile_phone_number'\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_INTEGER:\n                        $form->addElement(\n                            'number',\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text'],\n                            ['class' => 'span1', 'step' => 1]\n                        );\n\n                        $form->applyFilter('extra_'.$field_details['variable'], 'stripslashes');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'trim');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'intval');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_FILE_IMAGE:\n                        $fieldVariable = \"extra_{$field_details['variable']}\";\n                        $fieldTexts = [\n                            $field_details['display_text'],\n                        ];\n\n                        if (is_array($extraData) && array_key_exists($fieldVariable, $extraData)) {\n                            if (file_exists(api_get_path(SYS_UPLOAD_PATH).$extraData[$fieldVariable])) {\n                                $fieldTexts[] = Display::img(\n                                    api_get_path(WEB_UPLOAD_PATH).$extraData[$fieldVariable],\n                                    $field_details['display_text'],\n                                    ['width' => '300']\n                                );\n                            }\n                        }\n\n                        if ('Image' === $fieldTexts[0]) {\n                            $fieldTexts[0] = get_lang($fieldTexts[0]);\n                        }\n\n                        $form->addFile(\n                            $fieldVariable,\n                            $fieldTexts,\n                            ['accept' => 'image/*', 'id' => 'extra_image', 'crop_image' => 'true']\n                        );\n\n                        $form->applyFilter('extra_'.$field_details['variable'], 'stripslashes');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'trim');\n\n                        $allowedPictureTypes = ['jpg', 'jpeg', 'png', 'gif'];\n                        $form->addRule(\n                            'extra_'.$field_details['variable'],\n                            get_lang('OnlyImagesAllowed').' ('.implode(',', $allowedPictureTypes).')',\n                            'filetype',\n                            $allowedPictureTypes\n                        );\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_FLOAT:\n                        $form->addElement(\n                            'number',\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text'],\n                            ['class' => 'span1', 'step' => '0.01']\n                        );\n\n                        $form->applyFilter('extra_'.$field_details['variable'], 'stripslashes');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'trim');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'floatval');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_FILE:\n                        $fieldVariable = \"extra_{$field_details['variable']}\";\n                        $fieldTexts = [\n                            $field_details['display_text'],\n                        ];\n\n                        if (is_array($extraData) &&\n                            array_key_exists($fieldVariable, $extraData)\n                        ) {\n                            if (file_exists(api_get_path(SYS_UPLOAD_PATH).$extraData[$fieldVariable])) {\n                                $linkToDelete = '';\n                                $divItemId = $field_details['variable'];\n                                if (api_is_platform_admin()) {\n                                    $url = api_get_path(WEB_AJAX_PATH).'extra_field.ajax.php?type='.$this->type;\n                                    $url .= '&a=delete_file&field_id='.$field_details['id'].'&item_id='.$itemId;\n\n                                    $deleteId = $field_details['variable'].'_delete';\n                                    $form->addHtml(\n                                        \"\n                                        <script>\n                                            $(function() {\n                                                $('#\".$deleteId.\"').on('click', function() {\n                                                    $.ajax({\n                                                        type: 'GET',\n                                                        url: '\".$url.\"',\n                                                        success: function(result) {\n                                                            if (result == 1) {\n                                                                $('#\".$divItemId.\"').html('\".get_lang('Deleted').\"');\n                                                            }\n                                                        }\n                                                    });\n                                                });\n                                            });\n                                        </script>\n                                    \"\n                                    );\n\n                                    $linkToDelete = '&nbsp;'.Display::url(\n                                            Display::return_icon('delete.png', get_lang('Delete')),\n                                            'javascript:void(0)',\n                                            ['id' => $deleteId]\n                                        );\n                                }\n                                $fieldTexts[] = '<div id=\"'.$divItemId.'\">'.Display::url(\n                                        basename($extraData[$fieldVariable]),\n                                        api_get_path(WEB_UPLOAD_PATH).$extraData[$fieldVariable],\n                                        [\n                                            'title' => $field_details['display_text'],\n                                            'target' => '_blank',\n                                        ]\n                                    ).$linkToDelete.'</div>';\n                            }\n                        }\n\n                        $form->addElement(\n                            'file',\n                            $fieldVariable,\n                            $fieldTexts,\n                            []\n                        );\n\n                        $form->applyFilter('extra_'.$field_details['variable'], 'stripslashes');\n                        $form->applyFilter('extra_'.$field_details['variable'], 'trim');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_VIDEO_URL:\n                        $form->addUrl(\n                            \"extra_{$field_details['variable']}\",\n                            $field_details['display_text'],\n                            false,\n                            ['placeholder' => 'https://']\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_LETTERS_ONLY:\n                        $form->addTextLettersOnly(\n                            \"extra_{$field_details['variable']}\",\n                            $field_details['display_text']\n                        );\n                        $form->applyFilter('extra_'.$field_details['variable'], 'stripslashes');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_ALPHANUMERIC:\n                        $form->addTextAlphanumeric(\n                            \"extra_{$field_details['variable']}\",\n                            $field_details['display_text']\n                        );\n                        $form->applyFilter(\n                            'extra_'.$field_details['variable'],\n                            'stripslashes'\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_LETTERS_SPACE:\n                        $form->addTextLettersAndSpaces(\n                            \"extra_{$field_details['variable']}\",\n                            $field_details['display_text']\n                        );\n                        $form->applyFilter('extra_'.$field_details['variable'], 'stripslashes');\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_ALPHANUMERIC_SPACE:\n                        $form->addTextAlphanumericAndSpaces(\n                            \"extra_{$field_details['variable']}\",\n                            $field_details['display_text']\n                        );\n                        $form->applyFilter(\n                            'extra_'.$field_details['variable'],\n                            'stripslashes'\n                        );\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_GEOLOCALIZATION_COORDINATES:\n                    case self::FIELD_TYPE_GEOLOCALIZATION:\n                        $dataValue = isset($extraData['extra_'.$field_details['variable']])\n                            ? $extraData['extra_'.$field_details['variable']]\n                            : '';\n\n                        $form->addGeoLocationMapField(\n                            'extra_'.$field_details['variable'],\n                            $field_details['display_text'],\n                            $dataValue,\n                            $hideGeoLocalizationDetails\n                        );\n\n                        if ($freezeElement) {\n                            $form->freeze('extra_'.$field_details['variable']);\n                        }\n                        break;\n                    case self::FIELD_TYPE_SELECT_WITH_TEXT_FIELD:\n                        $jquery_ready_content .= $this->addSelectWithTextFieldElement(\n                            $form,\n                            $field_details,\n                            $freezeElement\n                        );\n                        break;\n                    case self::FIELD_TYPE_TRIPLE_SELECT:\n                        $jquery_ready_content .= $this->addTripleSelectElement(\n                            $form,\n                            $field_details,\n                            is_array($extraData) ? $extraData : [],\n                            $freezeElement\n                        );\n                        break;\n                }\n            }\n        }\n\n        $return = [];\n        $return['jquery_ready_content'] = $jquery_ready_content;\n\n        return $return;\n    }\n\n    /**\n     * @param array $options\n     *\n     * @return array\n     */\n    public static function extra_field_double_select_convert_array_to_ordered_array($options)\n    {\n        $optionsParsed = [];\n        if (!empty($options)) {\n            foreach ($options as $option) {\n                if (0 == $option['option_value']) {\n                    $optionsParsed[$option['id']][] = $option;\n                } else {\n                    $optionsParsed[$option['option_value']][] = $option;\n                }\n            }\n        }\n\n        return $optionsParsed;\n    }\n\n    /**\n     * @return array\n     */\n    public static function tripleSelectConvertArrayToOrderedArray(array $options)\n    {\n        $level1 = self::getOptionsFromTripleSelect($options, 0);\n        $level2 = [];\n        $level3 = [];\n\n        foreach ($level1 as $item1) {\n            $level2 += self::getOptionsFromTripleSelect($options, $item1['id']);\n        }\n\n        foreach ($level2 as $item2) {\n            $level3 += self::getOptionsFromTripleSelect($options, $item2['id']);\n        }\n\n        return ['level1' => $level1, 'level2' => $level2, 'level3' => $level3];\n    }\n\n    /**\n     * @param string $type\n     *\n     * @return array\n     */\n    public function get_all_extra_field_by_type($type)\n    {\n        // all the information of the field\n        $sql = \"SELECT * FROM {$this->table}\n                WHERE\n                    field_type = '\".Database::escape_string($type).\"' AND\n                    extra_field_type = $this->extraFieldType\n                \";\n        $result = Database::query($sql);\n\n        $return = [];\n        while ($row = Database::fetch_array($result)) {\n            $return[] = $row['id'];\n        }\n\n        return $return;\n    }\n\n    /**\n     * @param int $id\n     */\n    public function get_field_type_by_id($id)\n    {\n        $types = $this->get_field_types();\n        if (isset($types[$id])) {\n            return $types[$id];\n        }\n\n        return null;\n    }\n\n    /**\n     * @return array\n     */\n    public function get_field_types()\n    {\n        return $this->get_extra_fields_by_handler($this->type);\n    }\n\n    /**\n     * @param string $handler\n     *\n     * @return array\n     */\n    public static function get_extra_fields_by_handler($handler)\n    {\n        $types = [];\n        $types[self::FIELD_TYPE_TEXT] = get_lang('FieldTypeText');\n        $types[self::FIELD_TYPE_TEXTAREA] = get_lang('FieldTypeTextarea');\n        $types[self::FIELD_TYPE_RADIO] = get_lang('FieldTypeRadio');\n        $types[self::FIELD_TYPE_SELECT] = get_lang('FieldTypeSelect');\n        $types[self::FIELD_TYPE_SELECT_MULTIPLE] = get_lang('FieldTypeSelectMultiple');\n        $types[self::FIELD_TYPE_DATE] = get_lang('FieldTypeDate');\n        $types[self::FIELD_TYPE_DATETIME] = get_lang('FieldTypeDatetime');\n        $types[self::FIELD_TYPE_DOUBLE_SELECT] = get_lang('FieldTypeDoubleSelect');\n        $types[self::FIELD_TYPE_DIVIDER] = get_lang('FieldTypeDivider');\n        $types[self::FIELD_TYPE_TAG] = get_lang('FieldTypeTag');\n        $types[self::FIELD_TYPE_TIMEZONE] = get_lang('FieldTypeTimezone');\n        $types[self::FIELD_TYPE_SOCIAL_PROFILE] = get_lang('FieldTypeSocialProfile');\n        $types[self::FIELD_TYPE_MOBILE_PHONE_NUMBER] = get_lang('FieldTypeMobilePhoneNumber');\n        $types[self::FIELD_TYPE_CHECKBOX] = get_lang('FieldTypeCheckbox');\n        $types[self::FIELD_TYPE_INTEGER] = get_lang('FieldTypeInteger');\n        $types[self::FIELD_TYPE_FILE_IMAGE] = get_lang('FieldTypeFileImage');\n        $types[self::FIELD_TYPE_FLOAT] = get_lang('FieldTypeFloat');\n        $types[self::FIELD_TYPE_FILE] = get_lang('FieldTypeFile');\n        $types[self::FIELD_TYPE_VIDEO_URL] = get_lang('FieldTypeVideoUrl');\n        $types[self::FIELD_TYPE_LETTERS_ONLY] = get_lang('FieldTypeOnlyLetters');\n        $types[self::FIELD_TYPE_ALPHANUMERIC] = get_lang('FieldTypeAlphanumeric');\n        $types[self::FIELD_TYPE_LETTERS_SPACE] = get_lang('FieldTypeLettersSpaces');\n        $types[self::FIELD_TYPE_ALPHANUMERIC_SPACE] = get_lang('FieldTypeAlphanumericSpaces');\n        $types[self::FIELD_TYPE_GEOLOCALIZATION] = get_lang('Geolocalization');\n        $types[self::FIELD_TYPE_GEOLOCALIZATION_COORDINATES] = get_lang('GeolocalizationCoordinates');\n        $types[self::FIELD_TYPE_SELECT_WITH_TEXT_FIELD] = get_lang('FieldTypeSelectWithTextField');\n        $types[self::FIELD_TYPE_TRIPLE_SELECT] = get_lang('FieldTypeTripleSelect');\n\n        switch ($handler) {\n            case 'course':\n            case 'session':\n            case 'user':\n            case 'skill':\n                break;\n        }\n\n        return $types;\n    }\n\n    /**\n     * @param array $params\n     * @param bool  $show_query\n     *\n     * @return int|bool\n     */\n    public function save($params, $show_query = false)\n    {\n        $fieldInfo = self::get_handler_field_info_by_field_variable($params['variable']);\n        $params = $this->clean_parameters($params);\n        $params['extra_field_type'] = $this->extraFieldType;\n\n        if ($fieldInfo) {\n            return $fieldInfo['id'];\n        } else {\n            $id = parent::save($params, $show_query);\n            if ($id) {\n                $fieldOption = new ExtraFieldOption($this->type);\n                $params['field_id'] = $id;\n                $fieldOption->save($params);\n            }\n\n            return $id;\n        }\n    }\n\n    /**\n     * Gets the set of values of an extra_field searching for the variable name.\n     *\n     * Example:\n     * <code>\n     * <?php\n     * $extraField = new ExtraField('lp_item');\n     * $extraFieldArray =  $extraField->get_handler_field_info_by_field_variable('authorlpitem');\n     * echo \"<pre>\".var_export($extraFieldArray,true).\"</pre>\";\n     * ?>\n     * </code>\n     *\n     * @param string $variable\n     *\n     * @return array|bool\n     */\n    public function get_handler_field_info_by_field_variable($variable)\n    {\n        $variable = Database::escape_string($variable);\n        $sql = \"SELECT * FROM {$this->table}\n                WHERE\n                    variable = '$variable' AND\n                    extra_field_type = $this->extraFieldType\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $row = Database::fetch_array($result, 'ASSOC');\n            if ($row) {\n                $row['display_text'] = self::translateDisplayName($row['variable'], $row['display_text']);\n\n                // All the options of the field\n                $sql = \"SELECT * FROM $this->table_field_options\n                    WHERE field_id='\".intval($row['id']).\"'\n                    ORDER BY option_order ASC\";\n                $result = Database::query($sql);\n                while ($option = Database::fetch_array($result)) {\n                    $row['options'][$option['id']] = $option;\n                }\n\n                return $row;\n            }\n        }\n\n        return false;\n    }\n\n    public function getHandlerEntityByFieldVariable(string $variable)\n    {\n        return Database::getManager()\n            ->getRepository('ChamiloCoreBundle:ExtraField')\n            ->findOneBy(['variable' => $variable, 'extraFieldType' => $this->extraFieldType]);\n    }\n\n    /**\n     * @param array $params\n     *\n     * @return array\n     */\n    public function clean_parameters($params)\n    {\n        if (!isset($params['variable']) || empty($params['variable'])) {\n            $params['variable'] = $params['display_text'];\n        }\n\n        $params['variable'] = trim(strtolower(str_replace(' ', '_', $params['variable'])));\n\n        if (!isset($params['field_order'])) {\n            $max_order = self::get_max_field_order();\n            $params['field_order'] = $max_order;\n        } else {\n            $params['field_order'] = (int) $params['field_order'];\n        }\n\n        return $params;\n    }\n\n    /**\n     * @return int\n     */\n    public function get_max_field_order()\n    {\n        $sql = \"SELECT MAX(field_order)\n                FROM {$this->table}\n                WHERE\n                    extra_field_type = '.$this->extraFieldType.'\";\n        $res = Database::query($sql);\n\n        $order = 0;\n        if (Database::num_rows($res) > 0) {\n            $row = Database::fetch_row($res);\n            $order = $row[0] + 1;\n        }\n\n        return $order;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function update($params, $showQuery = false)\n    {\n        $params = $this->clean_parameters($params);\n        if (isset($params['id'])) {\n            $fieldOption = new ExtraFieldOption($this->type);\n            $params['field_id'] = $params['id'];\n            if (empty($params['field_type'])) {\n                $params['field_type'] = $this->type;\n            }\n            $fieldOption->save($params, $showQuery);\n        }\n\n        return parent::update($params, $showQuery);\n    }\n\n    /**\n     * @param $id\n     *\n     * @return bool\n     */\n    public function delete($id)\n    {\n        $em = Database::getManager();\n        $items = $em->getRepository('ChamiloCoreBundle:ExtraFieldSavedSearch')->findBy(['field' => $id]);\n        if ($items) {\n            foreach ($items as $item) {\n                $em->remove($item);\n            }\n            $em->flush();\n        }\n        $field_option = new ExtraFieldOption($this->type);\n        $field_option->delete_all_options_by_field_id($id);\n\n        $session_field_values = new ExtraFieldValue($this->type);\n        $session_field_values->delete_all_values_by_field_id($id);\n\n        return parent::delete($id);\n    }\n\n    /**\n     * @param $breadcrumb\n     * @param $action\n     */\n    public function setupBreadcrumb(&$breadcrumb, $action)\n    {\n        if ('add' === $action) {\n            $breadcrumb[] = ['url' => $this->pageUrl, 'name' => $this->pageName];\n            $breadcrumb[] = ['url' => '#', 'name' => get_lang('Add')];\n        } elseif ('edit' === $action) {\n            $breadcrumb[] = ['url' => $this->pageUrl, 'name' => $this->pageName];\n            $breadcrumb[] = ['url' => '#', 'name' => get_lang('Edit')];\n        } else {\n            $breadcrumb[] = ['url' => '#', 'name' => $this->pageName];\n        }\n    }\n\n    /**\n     * Displays the title + grid.\n     */\n    public function display()\n    {\n        // action links\n        echo '<div class=\"actions\">';\n        echo '<a href=\"../admin/index.php\">';\n        echo Display::return_icon(\n            'back.png',\n            get_lang('BackTo').' '.get_lang('PlatformAdmin'),\n            '',\n            ICON_SIZE_MEDIUM\n        );\n        echo '</a>';\n        echo '<a href=\"'.api_get_self().'?action=add&type='.$this->type.'\">';\n        echo Display::return_icon(\n            'add_user_fields.png',\n            get_lang('Add'),\n            '',\n            ICON_SIZE_MEDIUM\n        );\n        echo '</a>';\n        echo '</div>';\n        echo Display::grid_html($this->type.'_fields');\n    }\n\n    /**\n     * @return array\n     */\n    public function getJqgridColumnNames()\n    {\n        return [\n            get_lang('Name'),\n            get_lang('FieldLabel'),\n            get_lang('Type'),\n            get_lang('FieldChangeability'),\n            get_lang('VisibleToSelf'),\n            get_lang('VisibleToOthers'),\n            get_lang('Filter'),\n            get_lang('FieldOrder'),\n            get_lang('Actions'),\n        ];\n    }\n\n    /**\n     * @return array\n     */\n    public function getJqgridColumnModel()\n    {\n        return [\n            [\n                'name' => 'display_text',\n                'index' => 'display_text',\n                'width' => '140',\n                'align' => 'left',\n            ],\n            [\n                'name' => 'variable',\n                'index' => 'variable',\n                'width' => '90',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'field_type',\n                'index' => 'field_type',\n                'width' => '70',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'changeable',\n                'index' => 'changeable',\n                'width' => '35',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'visible_to_self',\n                'index' => 'visible_to_self',\n                'width' => '45',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'visible_to_others',\n                'index' => 'visible_to_others',\n                'width' => '35',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'filter',\n                'index' => 'filter',\n                'width' => '30',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'field_order',\n                'index' => 'field_order',\n                'width' => '25',\n                'align' => 'left',\n                'sortable' => 'true',\n            ],\n            [\n                'name' => 'actions',\n                'index' => 'actions',\n                'width' => '40',\n                'align' => 'left',\n                'formatter' => 'action_formatter',\n                'sortable' => 'false',\n            ],\n        ];\n    }\n\n    /**\n     * @param string $url\n     * @param string $action\n     *\n     * @return FormValidator\n     */\n    public function return_form($url, $action)\n    {\n        $form = new FormValidator($this->type.'_field', 'post', $url);\n\n        $form->addHidden('type', $this->type);\n        $id = isset($_GET['id']) ? (int) $_GET['id'] : null;\n        $form->addHidden('id', $id);\n\n        // Setting the form elements\n        $header = get_lang('Add');\n        $defaults = [];\n\n        if ('edit' === $action) {\n            $header = get_lang('Modify');\n            // Setting the defaults\n            $defaults = $this->get($id, false);\n        }\n\n        $form->addHeader($header);\n\n        if ('edit' === $action) {\n            $translateUrl = api_get_path(WEB_CODE_PATH).'extrafield/translate.php?'\n                .http_build_query(['extra_field' => $id]);\n            $translateButton = Display::toolbarButton(get_lang('TranslateThisTerm'), $translateUrl, 'language', 'link');\n\n            $form->addText(\n                'display_text',\n                [get_lang('Name'), $translateButton]\n            );\n        } else {\n            $form->addText('display_text', get_lang('Name'));\n        }\n\n        // Field type\n        $types = self::get_field_types();\n\n        $form->addElement(\n            'select',\n            'field_type',\n            get_lang('FieldType'),\n            $types,\n            ['id' => 'field_type']\n        );\n        $form->addLabel(get_lang('Example'), '<div id=\"example\">-</div>');\n        $form->addText('variable', get_lang('FieldLabel'), false);\n        $form->addElement(\n            'text',\n            'field_options',\n            get_lang('FieldPossibleValues'),\n            ['id' => 'field_options', 'class' => 'span6']\n        );\n\n        $fieldWithOptions = [\n            self::FIELD_TYPE_RADIO,\n            self::FIELD_TYPE_SELECT_MULTIPLE,\n            self::FIELD_TYPE_SELECT,\n            self::FIELD_TYPE_TAG,\n            self::FIELD_TYPE_DOUBLE_SELECT,\n            self::FIELD_TYPE_SELECT_WITH_TEXT_FIELD,\n            self::FIELD_TYPE_TRIPLE_SELECT,\n        ];\n\n        if ('edit' == $action) {\n            if (in_array($defaults['field_type'], $fieldWithOptions)) {\n                $url = Display::url(\n                    get_lang('EditExtraFieldOptions'),\n                    'extra_field_options.php?type='.$this->type.'&field_id='.$id\n                );\n                $form->addLabel(null, $url);\n\n                if (self::FIELD_TYPE_SELECT == $defaults['field_type']) {\n                    $urlWorkFlow = Display::url(\n                        get_lang('EditExtraFieldWorkFlow'),\n                        'extra_field_workflow.php?type='.$this->type.'&field_id='.$id\n                    );\n                    $form->addLabel(null, $urlWorkFlow);\n                }\n\n                $form->freeze('field_options');\n            }\n        }\n        $form->addText(\n            'default_value',\n            get_lang('FieldDefaultValue'),\n            false,\n            ['id' => 'default_value']\n        );\n\n        $group = [];\n        $group[] = $form->createElement('radio', 'visible_to_self', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'visible_to_self', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('VisibleToSelf'), null, false);\n\n        $group = [];\n        $group[] = $form->createElement('radio', 'visible_to_others', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'visible_to_others', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('VisibleToOthers'), null, false);\n\n        $group = [];\n        $group[] = $form->createElement('radio', 'changeable', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'changeable', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('FieldChangeability'), null, false);\n\n        $group = [];\n        $group[] = $form->createElement('radio', 'filter', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'filter', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('FieldFilter'), null, false);\n\n        /* Enable this when field_loggeable is introduced as a table field (2.0)\n        $group   = array();\n        $group[] = $form->createElement('radio', 'field_loggeable', null, get_lang('Yes'), 1);\n        $group[] = $form->createElement('radio', 'field_loggeable', null, get_lang('No'), 0);\n        $form->addGroup($group, '', get_lang('FieldLoggeable'), '', false);\n        */\n\n        $form->addNumeric('field_order', get_lang('FieldOrder'), ['step' => 1, 'min' => 0]);\n\n        if ('edit' == $action) {\n            $option = new ExtraFieldOption($this->type);\n            $defaults['field_options'] = $option->get_field_options_by_field_to_string($id);\n            $form->addButtonUpdate(get_lang('Modify'));\n        } else {\n            $defaults['visible_to_self'] = 0;\n            $defaults['visible_to_others'] = 0;\n            $defaults['changeable'] = 0;\n            $defaults['filter'] = 0;\n            $form->addButtonCreate(get_lang('Add'));\n        }\n\n        /*if (!empty($defaults['created_at'])) {\n            $defaults['created_at'] = api_convert_and_format_date($defaults['created_at']);\n        }\n        if (!empty($defaults['updated_at'])) {\n            $defaults['updated_at'] = api_convert_and_format_date($defaults['updated_at']);\n        }*/\n        $form->setDefaults($defaults);\n\n        // Setting the rules\n        $form->addRule('display_text', get_lang('ThisFieldIsRequired'), 'required');\n        $form->addRule('field_type', get_lang('ThisFieldIsRequired'), 'required');\n\n        return $form;\n    }\n\n    /**\n     * Gets an element.\n     *\n     * @param int  $id\n     * @param bool $translateDisplayText Optional\n     *\n     * @return array\n     */\n    public function get($id, $translateDisplayText = true)\n    {\n        $info = parent::get($id);\n\n        if ($translateDisplayText) {\n            $info['display_text'] = self::translateDisplayName($info['variable'], $info['display_text']);\n        }\n\n        return $info;\n    }\n\n    /**\n     * @param $token\n     *\n     * @return string\n     */\n    public function getJqgridActionLinks($token)\n    {\n        //With this function we can add actions to the jgrid (edit, delete, etc)\n        $editIcon = Display::return_icon('edit.png', get_lang('Edit'), '', ICON_SIZE_SMALL);\n        $deleteIcon = Display::return_icon('delete.png', get_lang('Delete'), '', ICON_SIZE_SMALL);\n        $confirmMessage = addslashes(\n            api_htmlentities(get_lang('ConfirmYourChoice'), ENT_QUOTES)\n        );\n\n        $editButton = <<<JAVASCRIPT\n            <a href=\"?action=edit&type={$this->type}&id=' + options.rowId + '\" class=\"btn btn-link btn-xs\">\\\n                $editIcon\\\n            </a>\nJAVASCRIPT;\n        $deleteButton = <<<JAVASCRIPT\n            <a \\\n                onclick=\"if (!confirm(\\'$confirmMessage\\')) {return false;}\" \\\n                href=\"?sec_token=$token&type={$this->type}&id=' + options.rowId + '&action=delete\" \\\n                class=\"btn btn-link btn-xs\">\\\n                $deleteIcon\\\n            </a>\nJAVASCRIPT;\n\n        return \"function action_formatter(cellvalue, options, rowObject) {\n            return '$editButton $deleteButton';\n        }\";\n    }\n\n    /**\n     * @param array $columns\n     * @param array $column_model\n     * @param array $extraFields\n     *\n     * @return array\n     */\n    public function getRules(&$columns, &$column_model, $extraFields = [], $checkExtraFieldExistence = false)\n    {\n        $fields = $this->get_all(\n            [\n                'visible_to_self = ? AND filter = ?' => [1, 1],\n            ],\n            'display_text'\n        );\n        $extraFieldOption = new ExtraFieldOption($this->type);\n\n        $rules = [];\n        if (!empty($fields)) {\n            foreach ($fields as $field) {\n                $search_options = [];\n                $type = 'text';\n                if (in_array($field['field_type'], [self::FIELD_TYPE_SELECT, self::FIELD_TYPE_DOUBLE_SELECT])) {\n                    $type = 'select';\n                    $search_options['sopt'] = ['eq', 'ne']; //equal not equal\n                } else {\n                    $search_options['sopt'] = ['cn', 'nc']; //contains not contains\n                }\n\n                $search_options['searchhidden'] = 'true';\n                $search_options['defaultValue'] = isset($search_options['field_default_value'])\n                    ? $search_options['field_default_value']\n                    : null;\n\n                if (self::FIELD_TYPE_DOUBLE_SELECT == $field['field_type']) {\n                    // Add 2 selects\n                    $options = $extraFieldOption->get_field_options_by_field($field['id']);\n                    $options = self::extra_field_double_select_convert_array_to_ordered_array($options);\n\n                    $first_options = [];\n                    if (!empty($options)) {\n                        foreach ($options as $option) {\n                            foreach ($option as $sub_option) {\n                                if (0 == $sub_option['option_value']) {\n                                    $first_options[] = $sub_option['field_id'].'#'.$sub_option['id'].':'\n                                        .$sub_option['display_text'];\n                                }\n                            }\n                        }\n                    }\n\n                    $search_options['value'] = implode(';', $first_options);\n                    $search_options['dataInit'] = 'fill_second_select';\n\n                    // First\n                    $column_model[] = [\n                        'name' => 'extra_'.$field['variable'],\n                        'index' => 'extra_'.$field['variable'],\n                        'width' => '100',\n                        'hidden' => 'true',\n                        'search' => 'true',\n                        'stype' => 'select',\n                        'searchoptions' => $search_options,\n                    ];\n                    $columns[] = $field['display_text'].' (1)';\n                    $rules[] = [\n                        'field' => 'extra_'.$field['variable'],\n                        'op' => 'cn',\n                    ];\n\n                    // Second\n                    $search_options['value'] = $field['id'].':';\n                    $search_options['dataInit'] = 'register_second_select';\n\n                    $column_model[] = [\n                        'name' => 'extra_'.$field['variable'].'_second',\n                        'index' => 'extra_'.$field['variable'].'_second',\n                        'width' => '100',\n                        'hidden' => 'true',\n                        'search' => 'true',\n                        'stype' => 'select',\n                        'searchoptions' => $search_options,\n                    ];\n                    $columns[] = $field['display_text'].' (2)';\n                    $rules[] = ['field' => 'extra_'.$field['variable'].'_second', 'op' => 'cn'];\n                    continue;\n                } else {\n                    $search_options['value'] = $extraFieldOption->getFieldOptionsToString(\n                        $field['id'],\n                        false,\n                        'display_text'\n                    );\n                }\n                $column_model[] = [\n                    'name' => 'extra_'.$field['variable'],\n                    'index' => 'extra_'.$field['variable'],\n                    'width' => '100',\n                    'hidden' => 'true',\n                    'search' => 'true',\n                    'stype' => $type,\n                    'searchoptions' => $search_options,\n                ];\n                $columns[] = $field['display_text'];\n                $rules[] = [\n                    'field' => 'extra_'.$field['variable'],\n                    'op' => 'cn',\n                    'data' => '',\n                ];\n            }\n        }\n\n        return $rules;\n    }\n\n    public function processExtraFieldSearch($values, $form, $alias, $condition = 'OR')\n    {\n        // Parse params.\n        $fields = [];\n        foreach ($values as $key => $value) {\n            if (substr($key, 0, 6) !== 'extra_' &&\n                substr($key, 0, 7) !== '_extra_'\n            ) {\n                continue;\n            }\n            if (!empty($value)) {\n                $fields[$key] = $value;\n            }\n        }\n\n        $extraFieldsAll = $this->get_all(['visible_to_self = ? AND filter = ?' => [1, 1]], 'option_order');\n        $extraFieldsType = array_column($extraFieldsAll, 'field_type', 'variable');\n        $extraFields = array_column($extraFieldsAll, 'variable');\n        $filter = new stdClass();\n        $defaults = [];\n        foreach ($fields as $variable => $col) {\n            $variableNoExtra = str_replace('extra_', '', $variable);\n            if (isset($values[$variable]) && !empty($values[$variable]) &&\n                in_array($variableNoExtra, $extraFields)\n            ) {\n                $rule = new stdClass();\n                $rule->field = $variable;\n                $rule->op = 'in';\n                $data = $col;\n                if (is_array($data) && array_key_exists($variable, $data)) {\n                    $data = $col;\n                }\n                $rule->data = $data;\n                $filter->rules[] = $rule;\n                $filter->groupOp = 'AND';\n\n                if ($extraFieldsType[$variableNoExtra] == ExtraField::FIELD_TYPE_TAG) {\n                    $tagElement = $form->getElement($variable);\n                    $tags = [];\n                    foreach ($values[$variable] as $tag) {\n                        $tag = Security::remove_XSS($tag);\n                        $tags[] = $tag;\n                        $tagElement->addOption(\n                            $tag,\n                            $tag\n                        );\n                    }\n                    $defaults[$variable] = $tags;\n                } else {\n                    if (is_array($data)) {\n                        $defaults[$variable] = array_map(['Security', 'remove_XSS'], $data);\n                    } else {\n                        $defaults[$variable] = Security::remove_XSS($data);\n                    }\n                }\n            }\n        }\n\n        $result = $this->getExtraFieldRules($filter, 'extra_', $condition);\n        $conditionArray = $result['condition_array'];\n\n        $whereCondition = '';\n        $extraCondition = '';\n        if (!empty($conditionArray)) {\n            $extraCondition = ' ( ';\n            $extraCondition .= implode(' AND ', $conditionArray);\n            $extraCondition .= ' ) ';\n        }\n        $whereCondition .= $extraCondition;\n        $conditions = $this->parseConditions(\n            [\n                'where' => $whereCondition,\n                'extra' => $result['extra_fields'],\n            ],\n            $alias\n        );\n\n        return ['condition' => $conditions, 'fields' => $fields, 'defaults' => $defaults];\n    }\n\n    /**\n     * @param        $filters\n     * @param string $stringToSearch\n     *\n     * @return array\n     */\n    public function getExtraFieldRules($filters, $stringToSearch = 'extra_', $condition = 'OR')\n    {\n        $extraFields = [];\n        $conditionArray = [];\n\n        // Getting double select if exists\n        $double_select = [];\n        if (is_object($filters) &&\n            property_exists($filters, 'rules') &&\n            is_array($filters->rules) &&\n            !empty($filters->rules)\n        ) {\n            foreach ($filters->rules as $rule) {\n                if (empty($rule)) {\n                    continue;\n                }\n                if (false === strpos($rule->field, '_second')) {\n                } else {\n                    $my_field = str_replace('_second', '', $rule->field);\n                    $double_select[$my_field] = $rule->data;\n                }\n            }\n\n            foreach ($filters->rules as $rule) {\n                if (empty($rule)) {\n                    continue;\n                }\n                if (false === strpos($rule->field, $stringToSearch)) {\n                    // normal fields\n                    $field = $rule->field;\n                    if (isset($rule->data) && is_string($rule->data) && -1 != $rule->data) {\n                        $conditionArray[] = $this->get_where_clause($field, $rule->op, $rule->data);\n                    }\n                } else {\n                    // Extra fields\n                    $ruleField = Database::escapeField($rule->field);\n                    if (false === strpos($rule->field, '_second')) {\n                        // No _second\n                        $original_field = str_replace($stringToSearch, '', $rule->field);\n                        $field_option = $this->get_handler_field_info_by_field_variable($original_field);\n\n                        switch ($field_option['field_type']) {\n                            case self::FIELD_TYPE_DOUBLE_SELECT:\n                                if (isset($double_select[$rule->field])) {\n                                    $data = explode('#', $rule->data);\n                                    $rule->data = $data[1].'::'.$double_select[$rule->field];\n                                } else {\n                                    // only was sent 1 select\n                                    if (is_string($rule->data)) {\n                                        $data = explode('#', $rule->data);\n                                        $rule->data = $data[1];\n                                    }\n                                }\n\n                                if (!isset($rule->data)) {\n                                    $conditionArray[] = ' ('\n                                        .$this->get_where_clause($rule->field, $rule->op, $rule->data)\n                                        .') ';\n                                    $extraFields[] = ['field' => $ruleField, 'id' => $field_option['id']];\n                                }\n                                break;\n                            case self::FIELD_TYPE_TAG:\n                                if (isset($rule->data)) {\n                                    if (is_int($rule->data) && -1 == $rule->data) {\n                                        break;\n                                    }\n                                    // Where will be injected in the parseConditions()\n                                    //$where = $this->get_where_clause($rule->field, $rule->op, $rule->data, 'OR');\n                                    //$conditionArray[] = \" ( $where ) \";\n                                    $extraFields[] = [\n                                        'field' => $ruleField,\n                                        'id' => $field_option['id'],\n                                        'data' => $rule->data,\n                                    ];\n                                }\n                                break;\n                            default:\n                                if (isset($rule->data)) {\n                                    if (is_int($rule->data) && -1 == $rule->data) {\n                                        break;\n                                    }\n                                    $where = $this->get_where_clause($rule->field, $rule->op, $rule->data, 'OR');\n                                    $conditionArray[] = \" ( $where ) \";\n                                    $extraFields[] = [\n                                        'field' => $ruleField,\n                                        'id' => $field_option['id'],\n                                        'data' => $rule->data,\n                                    ];\n                                }\n                                break;\n                        }\n                    } else {\n                        $my_field = str_replace('_second', '', $rule->field);\n                        $original_field = str_replace($stringToSearch, '', $my_field);\n                        $field_option = $this->get_handler_field_info_by_field_variable($original_field);\n                        $extraFields[] = [\n                            'field' => $ruleField,\n                            'id' => $field_option['id'],\n                        ];\n                    }\n                }\n            }\n        }\n\n        return ['extra_fields' => $extraFields, 'condition_array' => $conditionArray];\n    }\n\n    /**\n     * @param $col\n     * @param $oper\n     * @param $val\n     * @param $conditionBetweenOptions\n     *\n     * @return string\n     */\n    public function get_where_clause($col, $oper, $val, $conditionBetweenOptions = 'OR')\n    {\n        $col = Database::escapeField($col);\n\n        if (empty($col)) {\n            return '';\n        }\n\n        $conditionBetweenOptions = in_array($conditionBetweenOptions, ['OR', 'AND']) ? $conditionBetweenOptions : 'OR';\n        if ('bw' === $oper || 'bn' === $oper) {\n            $val .= '%';\n        }\n        if ('ew' === $oper || 'en' === $oper) {\n            $val = '%'.$val;\n        }\n        if ('cn' === $oper || 'nc' === $oper || 'in' === $oper || 'ni' === $oper) {\n            if (is_array($val)) {\n                $result = '\"%'.implode(';', $val).'%\"';\n                foreach ($val as $item) {\n                    $item = trim($item);\n                    $result .= ' '.$conditionBetweenOptions.' '.$col.' LIKE \"%'.$item.'%\"';\n                }\n                $val = $result;\n\n                return \" $col {$this->ops[$oper]} $val \";\n            } else {\n                if (is_string($val)) {\n                    $val = '%'.$val.'%';\n                } else {\n                    $val = '';\n                }\n            }\n        }\n        $val = \\Database::escape_string($val);\n\n        return \" $col {$this->ops[$oper]} '$val' \";\n    }\n\n    /**\n     * @param array  $options\n     * @param string $alias\n     *\n     * @return array\n     */\n    public function parseConditions($options, $alias = 's')\n    {\n        $inject_extra_fields = null;\n        $extraFieldOption = new ExtraFieldOption($this->type);\n        $double_fields = [];\n\n        if (isset($options['extra'])) {\n            $extra_fields = $options['extra'];\n            if (!empty($extra_fields)) {\n                $counter = 1;\n                $extra_field_obj = new ExtraField($this->type);\n                foreach ($extra_fields as &$extra) {\n                    if (!isset($extra['id'])) {\n                        continue;\n                    }\n                    $extra_field_info = $extra_field_obj->get($extra['id']);\n                    if (empty($extra_field_info)) {\n                        continue;\n                    }\n                    $extra['extra_field_info'] = $extra_field_info;\n\n                    switch ($extra_field_info['field_type']) {\n                        case self::FIELD_TYPE_SELECT:\n                        case self::FIELD_TYPE_DOUBLE_SELECT:\n                            $inject_extra_fields .= \" fvo$counter.display_text as {$extra['field']}, \";\n                            break;\n                        case self::FIELD_TYPE_TAG:\n                            // If using OR\n                            // If using AND\n                            $newCounter = 1;\n                            $fields = [];\n                            $tagAlias = $extra['field'];\n                            foreach ($extra['data'] as $data) {\n                                $fields[] = \"tag$counter$newCounter.tag\";\n                                $newCounter++;\n                            }\n\n                            if (!empty($fields)) {\n                                $tags = implode(' , \" \", ', $fields);\n                                $inject_extra_fields .= \" CONCAT($tags) as $tagAlias, \";\n                            }\n                            break;\n                        default:\n                            $inject_extra_fields .= \" fv$counter.value as {$extra['field']}, \";\n                            break;\n                    }\n\n                    if (isset($extra_fields_info[$extra['id']])) {\n                        $info = $extra_fields_info[$extra['id']];\n                    } else {\n                        $info = $this->get($extra['id']);\n                        $extra_fields_info[$extra['id']] = $info;\n                    }\n                    if (isset($info['field_type']) && self::FIELD_TYPE_DOUBLE_SELECT == $info['field_type']) {\n                        $double_fields[$info['id']] = $info;\n                    }\n                    $counter++;\n                }\n            }\n        }\n\n        $options_by_double = [];\n        foreach ($double_fields as $double) {\n            $my_options = $extraFieldOption->get_field_options_by_field($double['id'], true);\n            $options_by_double['extra_'.$double['variable']] = $my_options;\n        }\n\n        $field_value_to_join = [];\n        //filter can be all/any = and/or\n        $inject_joins = null;\n        $inject_where = null;\n        $where = null;\n\n        //if (!empty($options['where'])) {\n        if (!empty($options['extra']) && !empty($extra_fields)) {\n            // Removing double 1=1\n            if (empty($options['where'])) {\n                $options['where'] = ' 1 = 1 ';\n            }\n            $options['where'] = str_replace(' 1 = 1  AND', '', $options['where']);\n            // Always OR\n            $counter = 1;\n            foreach ($extra_fields as $extra_info) {\n                $extra_field_info = $extra_info['extra_field_info'];\n                $inject_joins .= \" INNER JOIN $this->table_field_values fv$counter\n                                       ON ($alias.\".$this->primaryKey.\" = fv$counter.\".$this->handler_id.') ';\n                // Add options\n                switch ($extra_field_info['field_type']) {\n                        case self::FIELD_TYPE_SELECT:\n                        case self::FIELD_TYPE_DOUBLE_SELECT:\n                            $options['where'] = str_replace(\n                                $extra_info['field'],\n                                'fv'.$counter.'.field_id = '.$extra_info['id'].' AND fvo'.$counter.'.option_value',\n                                $options['where']\n                            );\n                            $inject_joins .= \"\n                                 INNER JOIN $this->table_field_options fvo$counter\n                                 ON (\n                                    fv$counter.field_id = fvo$counter.field_id AND\n                                    fv$counter.value = fvo$counter.option_value\n                                 )\n                                \";\n                            break;\n                        case self::FIELD_TYPE_TAG:\n                            $newCounter = 1;\n                            if (isset($extra_info['data']) && !empty($extra_info['data'])) {\n                                $whereTag = [];\n                                foreach ($extra_info['data'] as $data) {\n                                    $data = Database::escape_string($data);\n                                    $key = $counter.$newCounter;\n                                    $whereTag[] = ' tag'.$key.'.tag LIKE \"%'.$data.'%\" ';\n                                    $inject_joins .= \"\n                                    INNER JOIN $this->table_field_rel_tag tag_rel$key\n                                    ON (\n                                        tag_rel$key.field_id = \".$extra_info['id'].\" AND\n                                        tag_rel$key.item_id = $alias.\".$this->primaryKey.\"\n                                    )\n                                    INNER JOIN $this->table_field_tag tag$key\n                                    ON (tag$key.id = tag_rel$key.tag_id)\n                                \";\n                                    $newCounter++;\n                                }\n                                if (!empty($whereTag)) {\n                                    $options['where'] .= ' AND  ('.implode(' AND ', $whereTag).') ';\n                                }\n                            }\n                            break;\n                        default:\n                            // text, textarea, etc\n                            $options['where'] = str_replace(\n                                $extra_info['field'],\n                                'fv'.$counter.'.field_id = '.$extra_info['id'].' AND fv'.$counter.'.value',\n                                $options['where']\n                            );\n                            break;\n                    }\n                $field_value_to_join[] = \" fv$counter.$this->handler_id \";\n                $counter++;\n            }\n        }\n\n        if (!empty($options['where'])) {\n            $where .= ' AND '.$options['where'];\n        }\n\n        $order = '';\n        if (!empty($options['order'])) {\n            $order = \" ORDER BY \".$options['order'].\" \";\n        }\n        $limit = '';\n        if (!empty($options['limit'])) {\n            $limit = ' LIMIT '.$options['limit'];\n        }\n\n        return [\n            'order' => $order,\n            'limit' => $limit,\n            'where' => $where,\n            'inject_where' => $inject_where,\n            'inject_joins' => $inject_joins,\n            'field_value_to_join' => $field_value_to_join,\n            'inject_extra_fields' => $inject_extra_fields,\n        ];\n    }\n\n    /**\n     * Get the extra fields and their formatted values.\n     *\n     * @param int|string $itemId   The item ID (It could be a session_id, course_id or user_id)\n     * @param bool       $filter\n     * @param array      $onlyShow (list of extra fields variables to show)\n     *\n     * @return array The extra fields data\n     */\n    public function getDataAndFormattedValues($itemId, $filter = false, $onlyShow = [])\n    {\n        $valuesData = [];\n        $fields = $this->get_all();\n        $em = Database::getManager();\n\n        $repoTag = $em->getRepository('ChamiloCoreBundle:ExtraFieldRelTag');\n\n        foreach ($fields as $field) {\n            if ('1' != $field['visible_to_self']) {\n                continue;\n            }\n\n            if ($filter && $field['filter'] != 1) {\n                continue;\n            }\n\n            if (!empty($onlyShow) && !in_array($field['variable'], $onlyShow)) {\n                continue;\n            }\n\n            $valueAsArray = [];\n            $fieldValue = new ExtraFieldValue($this->type);\n            $valueData = $fieldValue->get_values_by_handler_and_field_id(\n                $itemId,\n                $field['id'],\n                true\n            );\n            if (ExtraField::FIELD_TYPE_TAG == $field['field_type']) {\n                $tags = $repoTag->findBy(['fieldId' => $field['id'], 'itemId' => $itemId]);\n                if ($tags) {\n                    /** @var ExtraFieldRelTag $tag */\n                    $data = [];\n                    foreach ($tags as $extraFieldTag) {\n                        /** @var Tag $tag */\n                        $tag = $em->find('ChamiloCoreBundle:Tag', $extraFieldTag->getTagId());\n                        $data[] = $tag->getTag();\n                    }\n                    $valueData = implode(', ', $data);\n                    $valueAsArray = $data;\n                }\n            }\n\n            if (!$valueData) {\n                continue;\n            }\n            $displayedValue = get_lang('None');\n\n            switch ($field['field_type']) {\n                case self::FIELD_TYPE_CHECKBOX:\n                    if (false !== $valueData && '1' == $valueData['value']) {\n                        $displayedValue = get_lang('Yes');\n                    } else {\n                        $displayedValue = get_lang('No');\n                    }\n                    break;\n                case self::FIELD_TYPE_DATE:\n                    if (false !== $valueData && !empty($valueData['value'])) {\n                        $displayedValue = api_format_date($valueData['value'], DATE_FORMAT_LONG_NO_DAY);\n                    }\n                    break;\n                case self::FIELD_TYPE_TAG:\n                    if (!empty($valueData)) {\n                        $displayedValue = $valueData;\n                    }\n                    break;\n                case self::FIELD_TYPE_FILE_IMAGE:\n                    if (false === $valueData || empty($valueData['value'])) {\n                        break;\n                    }\n\n                    if (!file_exists(api_get_path(SYS_UPLOAD_PATH).$valueData['value'])) {\n                        break;\n                    }\n\n                    $image = Display::img(\n                        api_get_path(WEB_UPLOAD_PATH).$valueData['value'],\n                        $field['display_text'],\n                        ['width' => '300']\n                    );\n\n                    $displayedValue = Display::url(\n                        $image,\n                        api_get_path(WEB_UPLOAD_PATH).$valueData['value'],\n                        ['target' => '_blank']\n                    );\n                    break;\n                case self::FIELD_TYPE_FILE:\n                    if (false === $valueData || empty($valueData['value'])) {\n                        break;\n                    }\n\n                    if (!file_exists(api_get_path(SYS_UPLOAD_PATH).$valueData['value'])) {\n                        break;\n                    }\n\n                    $displayedValue = Display::url(\n                        get_lang('Download'),\n                        api_get_path(WEB_UPLOAD_PATH).$valueData['value'],\n                        [\n                            'title' => $field['display_text'],\n                            'target' => '_blank',\n                            'class' => 'download_extra_field',\n                        ]\n                    );\n                    break;\n                default:\n                    $displayedValue = $valueData['value'];\n                    break;\n            }\n\n            $valuesData[] = [\n                'variable' => $field['variable'],\n                'text' => $field['display_text'],\n                'value' => $displayedValue,\n                'value_as_array' => $valueAsArray,\n            ];\n        }\n\n        return $valuesData;\n    }\n\n    /**\n     * @param int    $fieldId\n     * @param string $tag\n     *\n     * @return array\n     */\n    public function getAllUserPerTag($fieldId, $tag)\n    {\n        $tagRelUserTable = Database::get_main_table(TABLE_MAIN_USER_REL_TAG);\n        $tag = Database::escape_string($tag);\n        $fieldId = (int) $fieldId;\n\n        $sql = \"SELECT user_id\n                FROM {$this->table_field_tag} f INNER JOIN $tagRelUserTable ft\n                ON tag_id = f.id\n                WHERE tag = '$tag' AND f.field_id = $fieldId;\n        \";\n\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * @param int $fieldId\n     * @param int $tagId\n     *\n     * @return array\n     */\n    public function getAllSkillPerTag($fieldId, $tagId)\n    {\n        $skillTable = Database::get_main_table(TABLE_MAIN_SKILL);\n        $tagRelExtraTable = Database::get_main_table(TABLE_MAIN_EXTRA_FIELD_REL_TAG);\n        $fieldId = (int) $fieldId;\n        $tagId = (int) $tagId;\n\n        $sql = \"SELECT s.id\n                FROM $skillTable s INNER JOIN $tagRelExtraTable t\n                ON t.item_id = s.id\n                WHERE tag_id = $tagId AND t.field_id = $fieldId;\n        \";\n\n        $result = Database::query($sql);\n        $result = Database::store_result($result, 'ASSOC');\n\n        $skillList = [];\n        foreach ($result as $index => $value) {\n            $skillList[$value['id']] = $value['id'];\n        }\n\n        return $skillList;\n    }\n\n    /**\n     * @param string $from\n     * @param string $search\n     * @param array  $options\n     *\n     * @return array\n     */\n    public function searchOptionsFromTags($from, $search, $options)\n    {\n        $extraFieldInfo = $this->get_handler_field_info_by_field_variable(\n            str_replace('extra_', '', $from)\n        );\n        $extraFieldInfoTag = $this->get_handler_field_info_by_field_variable(\n            str_replace('extra_', '', $search)\n        );\n\n        if (empty($extraFieldInfo) || empty($extraFieldInfoTag)) {\n            return [];\n        }\n\n        $id = $extraFieldInfo['id'];\n        $tagId = $extraFieldInfoTag['id'];\n\n        $table = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $tagRelExtraTable = Database::get_main_table(TABLE_MAIN_EXTRA_FIELD_REL_TAG);\n        $tagTable = Database::get_main_table(TABLE_MAIN_TAG);\n        $optionsTable = Database::get_main_table(TABLE_EXTRA_FIELD_OPTIONS);\n\n        $cleanOptions = [];\n        foreach ($options as $option) {\n            $cleanOptions[] = Database::escape_string($option);\n        }\n        $cleanOptions = array_filter($cleanOptions);\n\n        if (empty($cleanOptions)) {\n            return [];\n        }\n\n        $value = implode(\"','\", $cleanOptions);\n\n        $sql = \"SELECT DISTINCT t.*, v.value, o.display_text\n                FROM $tagRelExtraTable te\n                INNER JOIN $tagTable t\n                ON (t.id = te.tag_id AND te.field_id = t.field_id AND te.field_id = $tagId)\n                INNER JOIN $table v\n                ON (te.item_id = v.item_id AND v.field_id = $id)\n                INNER JOIN $optionsTable o\n                ON (o.option_value = v.value)\n                WHERE v.value IN ('\".$value.\"')\n                ORDER BY o.option_order, t.tag\n               \";\n\n        $result = Database::query($sql);\n        $result = Database::store_result($result);\n\n        return $result;\n    }\n\n    /**\n     * @param \\FormValidator $form\n     * @param int            $defaultValueId\n     * @param bool           $freezeElement\n     */\n    private function addSelectElement(FormValidator $form, array $fieldDetails, $defaultValueId, $freezeElement = false)\n    {\n        $get_lang_variables = false;\n        if (in_array(\n            $fieldDetails['variable'],\n            ['mail_notify_message', 'mail_notify_invitation', 'mail_notify_group_message']\n        )) {\n            $get_lang_variables = true;\n        }\n\n        // Get extra field workflow\n        $addOptions = [];\n        $optionsExists = false;\n        $options = [];\n\n        $optionList = [];\n        if (!empty($fieldDetails['options'])) {\n            foreach ($fieldDetails['options'] as $option_details) {\n                $optionList[$option_details['id']] = $option_details;\n                if ($get_lang_variables) {\n                    $options[$option_details['option_value']] = $option_details['display_text'];\n                } else {\n                    if ($optionsExists) {\n                        // Adding always the default value\n                        if ($option_details['id'] == $defaultValueId) {\n                            $options[$option_details['option_value']] = $option_details['display_text'];\n                        } else {\n                            if (isset($addOptions) && !empty($addOptions)) {\n                                // Parsing filters\n                                if (in_array($option_details['id'], $addOptions)) {\n                                    $options[$option_details['option_value']] = $option_details['display_text'];\n                                }\n                            }\n                        }\n                    } else {\n                        // Normal behaviour\n                        $options[$option_details['option_value']] = $option_details['display_text'];\n                    }\n                }\n            }\n\n            // Setting priority message\n            if (isset($optionList[$defaultValueId])\n                && isset($optionList[$defaultValueId]['priority'])\n            ) {\n                if (!empty($optionList[$defaultValueId]['priority'])) {\n                    $priorityId = $optionList[$defaultValueId]['priority'];\n                    $option = new ExtraFieldOption($this->type);\n                    $messageType = $option->getPriorityMessageType($priorityId);\n                    $form->addElement(\n                        'label',\n                        null,\n                        Display::return_message(\n                            $optionList[$defaultValueId]['priority_message'],\n                            $messageType\n                        )\n                    );\n                }\n            }\n        }\n\n        /** @var \\HTML_QuickForm_select $slct */\n        $slct = $form->addElement(\n            'select',\n            'extra_'.$fieldDetails['variable'],\n            $fieldDetails['display_text'],\n            [],\n            ['id' => 'extra_'.$fieldDetails['variable']]\n        );\n\n        if (empty($defaultValueId)) {\n            $slct->addOption(get_lang('SelectAnOption'), '');\n        }\n\n        foreach ($options as $value => $text) {\n            if (empty($value)) {\n                $slct->addOption($text, $value);\n                continue;\n            }\n\n            $valueParts = explode('#', $text);\n            $dataValue = count($valueParts) > 1 ? array_shift($valueParts) : '';\n\n            $slct->addOption(implode('', $valueParts), $value, ['data-value' => $dataValue]);\n        }\n\n        if ($freezeElement) {\n            $form->freeze('extra_'.$fieldDetails['variable']);\n        }\n    }\n\n    /**\n     * @param \\FormValidator $form\n     * @param array          $fieldDetails\n     * @param array          $extraData\n     * @param bool           $freezeElement\n     *\n     * @return string JavaScript code\n     */\n    private function addDoubleSelectElement(FormValidator $form, $fieldDetails, $extraData, $freezeElement = false)\n    {\n        $firstSelectId = 'first_extra_'.$fieldDetails['variable'];\n        $secondSelectId = 'second_extra_'.$fieldDetails['variable'];\n\n        $jqueryReadyContent = \"\n            $('#$firstSelectId').on('change', function() {\n                var id = $(this).val();\n\n                if (!id) {\n                    $('#$secondSelectId').empty().selectpicker('refresh');\n\n                    return;\n                }\n\n                $.getJSON(_p.web_ajax + 'extra_field.ajax.php?1=1&a=get_second_select_options', {\n                    'type': '{$this->type}',\n                    'field_id': {$fieldDetails['id']},\n                    'option_value_id': id\n                })\n                    .done(function(data) {\n                        $('#$secondSelectId').empty();\n                        $.each(data, function(index, value) {\n                            $('#second_extra_{$fieldDetails['variable']}').append(\n                                $('<option>', {value: index, text: value})\n                            );\n                        });\n                        $('#$secondSelectId').selectpicker('refresh');\n                    });\n            });\n        \";\n\n        $firstId = null;\n        if (!empty($extraData)) {\n            if (isset($extraData['extra_'.$fieldDetails['variable']])) {\n                $firstId = $extraData['extra_'.$fieldDetails['variable']]['extra_'.$fieldDetails['variable']];\n            }\n        }\n\n        $options = $this->extra_field_double_select_convert_array_to_ordered_array($fieldDetails['options']);\n        $values = ['' => get_lang('Select')];\n\n        $second_values = [];\n        if (!empty($options)) {\n            foreach ($options as $option) {\n                foreach ($option as $sub_option) {\n                    if ('0' == $sub_option['option_value']) {\n                        $values[$sub_option['id']] = $sub_option['display_text'];\n\n                        continue;\n                    }\n\n                    if ($firstId === $sub_option['option_value']) {\n                        $second_values[$sub_option['id']] = $sub_option['display_text'];\n                    }\n                }\n            }\n        }\n\n        $form\n            ->defaultRenderer()\n            ->setGroupElementTemplate('<p>{element}</p>', 'extra_'.$fieldDetails['variable']);\n        $group = [];\n        $group[] = $form->createElement(\n            'select',\n            'extra_'.$fieldDetails['variable'],\n            null,\n            $values,\n            ['id' => $firstSelectId]\n        );\n        $group[] = $form->createElement(\n            'select',\n            'extra_'.$fieldDetails['variable'].'_second',\n            null,\n            $second_values,\n            ['id' => $secondSelectId]\n        );\n        $form->addGroup(\n            $group,\n            'extra_'.$fieldDetails['variable'],\n            $fieldDetails['display_text']\n        );\n\n        if ($freezeElement) {\n            $form->freeze('extra_'.$fieldDetails['variable']);\n        }\n\n        return $jqueryReadyContent;\n    }\n\n    /**\n     * @param \\FormValidator $form\n     * @param bool           $freezeElement Optional\n     *\n     * @return string JavaScript code\n     */\n    private function addSelectWithTextFieldElement(\n        FormValidator $form,\n        array $fieldDetails,\n        $freezeElement = false\n    ) {\n        $firstSelectId = 'slct_extra_'.$fieldDetails['variable'];\n        $txtSelectId = 'txt_extra_'.$fieldDetails['variable'];\n\n        $jqueryReadyContent = \"\n            $('#$firstSelectId').on('change', function() {\n                var id = $(this).val();\n\n                if (!id) {\n                    $('#$txtSelectId').val('');\n                }\n            });\n        \";\n\n        $options = $this->extra_field_double_select_convert_array_to_ordered_array($fieldDetails['options']);\n        $values = ['' => get_lang('Select')];\n\n        if (!empty($options)) {\n            foreach ($options as $option) {\n                foreach ($option as $sub_option) {\n                    if ('0' == $sub_option['option_value']) {\n                        continue;\n                    }\n\n                    $values[$sub_option['id']] = $sub_option['display_text'];\n                }\n            }\n        }\n\n        $form\n            ->defaultRenderer()\n            ->setGroupElementTemplate('<p>{element}</p>', 'extra_'.$fieldDetails['variable']);\n        $group = [];\n        $group[] = $form->createElement(\n            'select',\n            'extra_'.$fieldDetails['variable'],\n            null,\n            $values,\n            ['id' => $firstSelectId]\n        );\n        $group[] = $form->createElement(\n            'text',\n            'extra_'.$fieldDetails['variable'].'_second',\n            null,\n            ['id' => $txtSelectId]\n        );\n        $form->addGroup(\n            $group,\n            'extra_'.$fieldDetails['variable'],\n            $fieldDetails['display_text']\n        );\n\n        if ($freezeElement) {\n            $form->freeze('extra_'.$fieldDetails['variable']);\n        }\n\n        return $jqueryReadyContent;\n    }\n\n    /**\n     * @param \\FormValidator $form\n     * @param bool           $freezeElement\n     *\n     * @return string\n     */\n    private function addTripleSelectElement(\n        FormValidator $form,\n        array $fieldDetails,\n        array $extraData,\n        $freezeElement\n    ) {\n        $variable = $fieldDetails['variable'];\n        $id = $fieldDetails['id'];\n        $slctFirstId = \"first_extra$variable\";\n        $slctSecondId = \"second_extra$variable\";\n        $slctThirdId = \"third_extra$variable\";\n        $langSelect = get_lang('Select');\n\n        $js = \"\n            (function () {\n                var slctFirst = $('#$slctFirstId'),\n                    slctSecond = $('#$slctSecondId'),\n                    slctThird = $('#$slctThirdId');\n\n                slctFirst.on('change', function () {\n                    slctSecond.empty().selectpicker('refresh');\n                    slctThird.empty().selectpicker('refresh');\n\n                    var level = $(this).val();\n\n                    if (!level) {\n                        return;\n                    }\n\n                    $.getJSON(_p.web_ajax + 'extra_field.ajax.php', {\n                        'a': 'get_second_select_options',\n                        'type': '$this->type',\n                        'field_id': $id,\n                        'option_value_id': level\n                    })\n                        .done(function (data) {\n                            slctSecond.append(\n                                $('<option>', {value: '', text: '$langSelect'})\n                            );\n\n                            $.each(data, function (index, value) {\n                                var valueParts = value.split('#'),\n                                    dataValue = valueParts.length > 1 ? valueParts.shift() : '';\n\n                                slctSecond.append(\n                                    $('<option>', {value: index, text: valueParts.join(''), 'data-value': dataValue})\n                                );\n                            });\n\n                            slctSecond.selectpicker('refresh');\n                        });\n                });\n                slctSecond.on('change', function () {\n                    slctThird.empty().selectpicker('refresh');\n\n                    var level = $(this).val();\n\n                    if (!level) {\n                        return;\n                    }\n\n                    $.getJSON(_p.web_ajax + 'extra_field.ajax.php', {\n                        'a': 'get_second_select_options',\n                        'type': '$this->type',\n                        'field_id': $id,\n                        'option_value_id': level\n                    })\n                        .done(function (data) {\n                            slctThird.append(\n                                $('<option>', {value: '', text: '$langSelect'})\n                            );\n\n                            $.each(data, function (index, value) {\n                                var valueParts = value.split('#'),\n                                    dataValue = valueParts.length > 1 ? valueParts.shift() : '';\n\n                                slctThird.append(\n                                    $('<option>', {value: index, text: valueParts.join(''), 'data-value': dataValue})\n                                );\n                            });\n\n                            slctThird.selectpicker('refresh');\n                        });\n                });\n            })();\n        \";\n\n        $firstId = isset($extraData[\"extra_$variable\"][\"extra_$variable\"])\n            ? $extraData[\"extra_$variable\"][\"extra_$variable\"]\n            : '';\n        $secondId = isset($extraData[\"extra_$variable\"][\"extra_{$variable}_second\"])\n            ? $extraData[\"extra_$variable\"][\"extra_{$variable}_second\"]\n            : '';\n\n        $options = $this->tripleSelectConvertArrayToOrderedArray($fieldDetails['options']);\n        $values1 = ['' => $langSelect];\n        $values2 = ['' => $langSelect];\n        $values3 = ['' => $langSelect];\n        $level1 = $this->getOptionsFromTripleSelect($options['level1'], 0);\n        $level2 = $this->getOptionsFromTripleSelect($options['level2'], $firstId);\n        $level3 = $this->getOptionsFromTripleSelect($options['level3'], $secondId);\n        /** @var \\HTML_QuickForm_select $slctFirst */\n        $slctFirst = $form->createElement('select', \"extra_$variable\", null, $values1, ['id' => $slctFirstId]);\n        /** @var \\HTML_QuickForm_select $slctFirst */\n        $slctSecond = $form->createElement(\n            'select',\n            \"extra_{$variable}_second\",\n            null,\n            $values2,\n            ['id' => $slctSecondId]\n        );\n        /** @var \\HTML_QuickForm_select $slctFirst */\n        $slctThird = $form->createElement('select', \"extra_{$variable}_third\", null, $values3, ['id' => $slctThirdId]);\n\n        foreach ($level1 as $item1) {\n            $valueParts = explode('#', $item1['display_text']);\n            $dataValue = count($valueParts) > 1 ? array_shift($valueParts) : '';\n            $slctFirst->addOption(implode('', $valueParts), $item1['id'], ['data-value' => $dataValue]);\n        }\n\n        foreach ($level2 as $item2) {\n            $valueParts = explode('#', $item2['display_text']);\n            $dataValue = count($valueParts) > 1 ? array_shift($valueParts) : '';\n            $slctSecond->addOption(implode('', $valueParts), $item2['id'], ['data-value' => $dataValue]);\n        }\n\n        foreach ($level3 as $item3) {\n            $valueParts = explode('#', $item3['display_text']);\n            $dataValue = count($valueParts) > 1 ? array_shift($valueParts) : '';\n            $slctThird->addOption(implode('', $valueParts), $item3['id'], ['data-value' => $dataValue]);\n        }\n\n        $form\n            ->defaultRenderer()\n            ->setGroupElementTemplate('<p>{element}</p>', \"extra_$variable\");\n        $form->addGroup([$slctFirst, $slctSecond, $slctThird], \"extra_$variable\", $fieldDetails['display_text']);\n\n        if ($freezeElement) {\n            $form->freeze('extra_'.$fieldDetails['variable']);\n        }\n\n        return $js;\n    }\n\n    /**\n     * @param int $parentId\n     *\n     * @return array\n     */\n    private static function getOptionsFromTripleSelect(array $options, $parentId)\n    {\n        return array_filter(\n            $options,\n            function ($option) use ($parentId) {\n                return $option['option_value'] == $parentId;\n            }\n        );\n    }\n}\n"], "filenames": ["main/inc/lib/extra_field.lib.php"], "buggy_code_start_loc": [2236], "buggy_code_end_loc": [2348], "fixing_code_start_loc": [2236], "fixing_code_end_loc": [2348], "type": "CWE-79", "message": "Chamilo 1.11.x up to 1.11.20 allows users with admin privilege account to insert XSS in the extra fields management section.", "other": {"cve": {"id": "CVE-2023-37064", "sourceIdentifier": "cve@mitre.org", "published": "2023-07-07T17:15:10.020", "lastModified": "2023-07-13T17:26:31.520", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Chamilo 1.11.x up to 1.11.20 allows users with admin privilege account to insert XSS in the extra fields management section."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.11.0", "versionEndIncluding": "1.11.20", "matchCriteriaId": "7C09DB8C-2B3F-4EE5-B478-546C468B1E04"}]}]}], "references": [{"url": "https://github.com/chamilo/chamilo-lms/commit/91ecc6141de6de9483c5a31fbb9fa91450f24940", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://support.chamilo.org/projects/1/wiki/Security_issues#Issue-119-2023-06-06-Low-impact-Low-risk-XSS-through-admin-account-extra-fields-management", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/91ecc6141de6de9483c5a31fbb9fa91450f24940"}}