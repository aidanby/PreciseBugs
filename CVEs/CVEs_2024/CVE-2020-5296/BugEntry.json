{"buggy_code": ["<?php namespace Cms\\Classes;\n\nuse File;\nuse Lang;\nuse Config;\nuse Request;\nuse Cms\\Helpers\\File as FileHelper;\nuse October\\Rain\\Extension\\Extendable;\nuse ApplicationException;\nuse ValidationException;\n\n/**\n * The CMS theme asset file class.\n *\n * @package october\\cms\n * @author Alexey Bobkov, Samuel Georges\n */\nclass Asset extends Extendable\n{\n    /**\n     * @var \\Cms\\Classes\\Theme A reference to the CMS theme containing the object.\n     */\n    protected $theme;\n\n    /**\n     * @var string The container name inside the theme.\n     */\n    protected $dirName = 'assets';\n\n    /**\n     * @var string Specifies the file name corresponding the CMS object.\n     */\n    public $fileName;\n\n    /**\n     * @var string Specifies the file name, the CMS object was loaded from.\n     */\n    protected $originalFileName;\n\n    /**\n     * @var string Last modified time.\n     */\n    public $mtime;\n\n    /**\n     * @var string The entire file content.\n     */\n    public $content;\n\n    /**\n     * @var array The attributes that are mass assignable.\n     */\n    protected $fillable = [\n        'fileName',\n        'content'\n    ];\n\n    /**\n     * @var array Allowable file extensions.\n     */\n    protected $allowedExtensions = [];\n\n    /**\n     * @var bool Indicates if the model exists.\n     */\n    public $exists = false;\n\n    /**\n     * Creates an instance of the object and associates it with a CMS theme.\n     * @param \\Cms\\Classes\\Theme $theme Specifies the theme the object belongs to.\n     */\n    public function __construct(Theme $theme)\n    {\n        $this->theme = $theme;\n\n        $this->allowedExtensions = self::getEditableExtensions();\n\n        parent::__construct();\n    }\n\n    /**\n     * Loads the object from a file.\n     * This method is used in the CMS back-end. It doesn't use any caching.\n     * @param \\Cms\\Classes\\Theme $theme Specifies the theme the object belongs to.\n     * @param string $fileName Specifies the file name, with the extension.\n     * The file name can contain only alphanumeric symbols, dashes and dots.\n     * @return mixed Returns a CMS object instance or null if the object wasn't found.\n     */\n    public static function load($theme, $fileName)\n    {\n        return (new static($theme))->find($fileName);\n    }\n\n    /**\n     * Prepares the theme datasource for the model.\n     * @param \\Cms\\Classes\\Theme|string $theme Specifies a parent theme.\n     * @return $this\n     */\n    public static function inTheme($theme)\n    {\n        if (is_string($theme)) {\n            $theme = Theme::load($theme);\n        }\n\n        return new static($theme);\n    }\n\n    /**\n     * Find a single template by its file name.\n     *\n     * @param  string $fileName\n     * @return mixed|static\n     */\n    public function find($fileName)\n    {\n        $filePath = $this->getFilePath($fileName);\n\n        if (!File::isFile($filePath)) {\n            return null;\n        }\n\n        if (($content = @File::get($filePath)) === false) {\n            return null;\n        }\n\n        $this->fileName = $fileName;\n        $this->originalFileName = $fileName;\n        $this->mtime = File::lastModified($filePath);\n        $this->content = $content;\n        $this->exists = true;\n        return $this;\n    }\n\n    /**\n     * Sets the object attributes.\n     * @param array $attributes A list of attributes to set.\n     */\n    public function fill(array $attributes)\n    {\n        foreach ($attributes as $key => $value) {\n            if (!in_array($key, $this->fillable)) {\n                throw new ApplicationException(Lang::get(\n                    'cms::lang.cms_object.invalid_property',\n                    ['name' => $key]\n                ));\n            }\n\n            $this->$key = $value;\n        }\n    }\n\n    /**\n     * Saves the object to the disk.\n     */\n    public function save()\n    {\n        $this->validateFileName();\n\n        $fullPath = $this->getFilePath();\n\n        if (File::isFile($fullPath) && $this->originalFileName !== $this->fileName) {\n            throw new ApplicationException(Lang::get(\n                'cms::lang.cms_object.file_already_exists',\n                ['name'=>$this->fileName]\n            ));\n        }\n\n        $dirPath = $this->theme->getPath().'/'.$this->dirName;\n        if (!file_exists($dirPath) || !is_dir($dirPath)) {\n            if (!File::makeDirectory($dirPath, 0777, true, true)) {\n                throw new ApplicationException(Lang::get(\n                    'cms::lang.cms_object.error_creating_directory',\n                    ['name'=>$dirPath]\n                ));\n            }\n        }\n\n        if (($pos = strpos($this->fileName, '/')) !== false) {\n            $dirPath = dirname($fullPath);\n\n            if (!is_dir($dirPath) && !File::makeDirectory($dirPath, 0777, true, true)) {\n                throw new ApplicationException(Lang::get(\n                    'cms::lang.cms_object.error_creating_directory',\n                    ['name'=>$dirPath]\n                ));\n            }\n        }\n\n        $newFullPath = $fullPath;\n        if (@File::put($fullPath, $this->content) === false) {\n            throw new ApplicationException(Lang::get(\n                'cms::lang.cms_object.error_saving',\n                ['name'=>$this->fileName]\n            ));\n        }\n\n        if (strlen($this->originalFileName) && $this->originalFileName !== $this->fileName) {\n            $fullPath = $this->getFilePath($this->originalFileName);\n\n            if (File::isFile($fullPath)) {\n                @unlink($fullPath);\n            }\n        }\n\n        clearstatcache();\n\n        $this->mtime = @File::lastModified($newFullPath);\n        $this->originalFileName = $this->fileName;\n        $this->exists = true;\n    }\n\n    public function delete()\n    {\n        $fileName = Request::input('fileName');\n        $fullPath = $this->getFilePath($fileName);\n\n        $this->validateFileName($fileName);\n\n        if (File::exists($fullPath)) {\n            if (!@File::delete($fullPath)) {\n                throw new ApplicationException(Lang::get(\n                    'cms::lang.asset.error_deleting_file',\n                    ['name' => $fileName]\n                ));\n            }\n        }\n    }\n\n    /**\n     * Validate the supplied filename, extension and path.\n     * @param string $fileName\n     */\n    protected function validateFileName($fileName = null)\n    {\n        if ($fileName === null) {\n            $fileName = $this->fileName;\n        }\n\n        $fileName = trim($fileName);\n\n        if (!strlen($fileName)) {\n            throw new ValidationException(['fileName' =>\n                Lang::get('cms::lang.cms_object.file_name_required', [\n                    'allowed' => implode(', ', $this->allowedExtensions),\n                    'invalid' => pathinfo($fileName, PATHINFO_EXTENSION)\n                ])\n            ]);\n        }\n\n        if (!FileHelper::validateExtension($fileName, $this->allowedExtensions, false)) {\n            throw new ValidationException(['fileName' =>\n                Lang::get('cms::lang.cms_object.invalid_file_extension', [\n                    'allowed' => implode(', ', $this->allowedExtensions),\n                    'invalid' => pathinfo($fileName, PATHINFO_EXTENSION)\n                ])\n            ]);\n        }\n\n        if (!FileHelper::validatePath($fileName, null)) {\n            throw new ValidationException(['fileName' =>\n                Lang::get('cms::lang.cms_object.invalid_file', [\n                    'name' => $fileName\n                ])\n            ]);\n        }\n    }\n\n    /**\n     * Returns the file name.\n     * @return string\n     */\n    public function getFileName()\n    {\n        return $this->fileName;\n    }\n\n    /**\n     * Returns the absolute file path.\n     * @param string $fileName Specifies the file name to return the path to.\n     * @return string\n     */\n    public function getFilePath($fileName = null)\n    {\n        if ($fileName === null) {\n            $fileName = $this->fileName;\n        }\n\n        return $this->theme->getPath().'/'.$this->dirName.'/'.$fileName;\n    }\n\n    /**\n     * Returns a list of editable asset extensions.\n     * The list can be overridden with the cms.editableAssetTypes configuration option.\n     * @return array\n     */\n    public static function getEditableExtensions()\n    {\n        $defaultTypes =  ['css', 'js', 'less', 'sass', 'scss'];\n\n        $configTypes = Config::get('cms.editableAssetTypes');\n        if (!$configTypes) {\n            return $defaultTypes;\n        }\n\n        return $configTypes;\n    }\n}\n"], "fixing_code": ["<?php namespace Cms\\Classes;\n\nuse File;\nuse Lang;\nuse Config;\nuse Request;\nuse Cms\\Helpers\\File as FileHelper;\nuse October\\Rain\\Extension\\Extendable;\nuse ApplicationException;\nuse ValidationException;\n\n/**\n * The CMS theme asset file class.\n *\n * @package october\\cms\n * @author Alexey Bobkov, Samuel Georges\n */\nclass Asset extends Extendable\n{\n    /**\n     * @var \\Cms\\Classes\\Theme A reference to the CMS theme containing the object.\n     */\n    protected $theme;\n\n    /**\n     * @var string The container name inside the theme.\n     */\n    protected $dirName = 'assets';\n\n    /**\n     * @var string Specifies the file name corresponding the CMS object.\n     */\n    public $fileName;\n\n    /**\n     * @var string Specifies the file name, the CMS object was loaded from.\n     */\n    protected $originalFileName;\n\n    /**\n     * @var string Last modified time.\n     */\n    public $mtime;\n\n    /**\n     * @var string The entire file content.\n     */\n    public $content;\n\n    /**\n     * @var array The attributes that are mass assignable.\n     */\n    protected $fillable = [\n        'fileName',\n        'content'\n    ];\n\n    /**\n     * @var array Allowable file extensions.\n     */\n    protected $allowedExtensions = [];\n\n    /**\n     * @var bool Indicates if the model exists.\n     */\n    public $exists = false;\n\n    /**\n     * Creates an instance of the object and associates it with a CMS theme.\n     * @param \\Cms\\Classes\\Theme $theme Specifies the theme the object belongs to.\n     */\n    public function __construct(Theme $theme)\n    {\n        $this->theme = $theme;\n\n        $this->allowedExtensions = self::getEditableExtensions();\n\n        parent::__construct();\n    }\n\n    /**\n     * Loads the object from a file.\n     * This method is used in the CMS back-end. It doesn't use any caching.\n     * @param \\Cms\\Classes\\Theme $theme Specifies the theme the object belongs to.\n     * @param string $fileName Specifies the file name, with the extension.\n     * The file name can contain only alphanumeric symbols, dashes and dots.\n     * @return mixed Returns a CMS object instance or null if the object wasn't found.\n     */\n    public static function load($theme, $fileName)\n    {\n        return (new static($theme))->find($fileName);\n    }\n\n    /**\n     * Prepares the theme datasource for the model.\n     * @param \\Cms\\Classes\\Theme|string $theme Specifies a parent theme.\n     * @return $this\n     */\n    public static function inTheme($theme)\n    {\n        if (is_string($theme)) {\n            $theme = Theme::load($theme);\n        }\n\n        return new static($theme);\n    }\n\n    /**\n     * Find a single template by its file name.\n     *\n     * @param  string $fileName\n     * @return mixed|static\n     */\n    public function find($fileName)\n    {\n        $filePath = $this->getFilePath($fileName);\n\n        if (!File::isFile($filePath)) {\n            return null;\n        }\n\n        if (($content = @File::get($filePath)) === false) {\n            return null;\n        }\n\n        $this->fileName = $fileName;\n        $this->originalFileName = $fileName;\n        $this->mtime = File::lastModified($filePath);\n        $this->content = $content;\n        $this->exists = true;\n        return $this;\n    }\n\n    /**\n     * Sets the object attributes.\n     * @param array $attributes A list of attributes to set.\n     */\n    public function fill(array $attributes)\n    {\n        foreach ($attributes as $key => $value) {\n            if (!in_array($key, $this->fillable)) {\n                throw new ApplicationException(Lang::get(\n                    'cms::lang.cms_object.invalid_property',\n                    ['name' => $key]\n                ));\n            }\n\n            $this->$key = $value;\n        }\n    }\n\n    /**\n     * Saves the object to the disk.\n     */\n    public function save()\n    {\n        $this->validateFileName();\n\n        $fullPath = $this->getFilePath();\n\n        if (File::isFile($fullPath) && $this->originalFileName !== $this->fileName) {\n            throw new ApplicationException(Lang::get(\n                'cms::lang.cms_object.file_already_exists',\n                ['name'=>$this->fileName]\n            ));\n        }\n\n        $dirPath = $this->theme->getPath().'/'.$this->dirName;\n        if (!file_exists($dirPath) || !is_dir($dirPath)) {\n            if (!File::makeDirectory($dirPath, 0777, true, true)) {\n                throw new ApplicationException(Lang::get(\n                    'cms::lang.cms_object.error_creating_directory',\n                    ['name'=>$dirPath]\n                ));\n            }\n        }\n\n        if (($pos = strpos($this->fileName, '/')) !== false) {\n            $dirPath = dirname($fullPath);\n\n            if (!is_dir($dirPath) && !File::makeDirectory($dirPath, 0777, true, true)) {\n                throw new ApplicationException(Lang::get(\n                    'cms::lang.cms_object.error_creating_directory',\n                    ['name'=>$dirPath]\n                ));\n            }\n        }\n\n        $newFullPath = $fullPath;\n        if (@File::put($fullPath, $this->content) === false) {\n            throw new ApplicationException(Lang::get(\n                'cms::lang.cms_object.error_saving',\n                ['name'=>$this->fileName]\n            ));\n        }\n\n        if (strlen($this->originalFileName) && $this->originalFileName !== $this->fileName) {\n            $fullPath = $this->getFilePath($this->originalFileName);\n\n            if (File::isFile($fullPath)) {\n                @unlink($fullPath);\n            }\n        }\n\n        clearstatcache();\n\n        $this->mtime = @File::lastModified($newFullPath);\n        $this->originalFileName = $this->fileName;\n        $this->exists = true;\n    }\n\n    public function delete()\n    {\n        $fileName = Request::input('fileName');\n        $fullPath = $this->getFilePath($fileName);\n\n        $this->validateFileName($fileName);\n\n        if (File::exists($fullPath)) {\n            if (!@File::delete($fullPath)) {\n                throw new ApplicationException(Lang::get(\n                    'cms::lang.asset.error_deleting_file',\n                    ['name' => $fileName]\n                ));\n            }\n        }\n    }\n\n    /**\n     * Validate the supplied filename, extension and path.\n     * @param string $fileName\n     */\n    protected function validateFileName($fileName = null)\n    {\n        if ($fileName === null) {\n            $fileName = $this->fileName;\n        }\n\n        $fileName = trim($fileName);\n\n        if (!strlen($fileName)) {\n            throw new ValidationException(['fileName' =>\n                Lang::get('cms::lang.cms_object.file_name_required', [\n                    'allowed' => implode(', ', $this->allowedExtensions),\n                    'invalid' => pathinfo($fileName, PATHINFO_EXTENSION)\n                ])\n            ]);\n        }\n\n        if (!FileHelper::validateExtension($fileName, $this->allowedExtensions, false)) {\n            throw new ValidationException(['fileName' =>\n                Lang::get('cms::lang.cms_object.invalid_file_extension', [\n                    'allowed' => implode(', ', $this->allowedExtensions),\n                    'invalid' => pathinfo($fileName, PATHINFO_EXTENSION)\n                ])\n            ]);\n        }\n\n        if (!FileHelper::validatePath($fileName, null)) {\n            throw new ValidationException(['fileName' =>\n                Lang::get('cms::lang.cms_object.invalid_file', [\n                    'name' => $fileName\n                ])\n            ]);\n        }\n    }\n\n    /**\n     * Returns the file name.\n     * @return string\n     */\n    public function getFileName()\n    {\n        return $this->fileName;\n    }\n\n    /**\n     * Returns the absolute file path.\n     * @param string $fileName Specifies the file name to return the path to.\n     * @return string\n     */\n    public function getFilePath($fileName = null)\n    {\n        if ($fileName === null) {\n            $fileName = $this->fileName;\n        }\n\n        // Limit paths to those under the assets directory\n        $directory = $this->theme->getPath() . '/' . $this->dirName . '/';\n        $path = realpath($directory . $fileName);\n        if (!starts_with($path, $directory)) {\n            return false;\n        }\n\n        return $path;\n    }\n\n    /**\n     * Returns a list of editable asset extensions.\n     * The list can be overridden with the cms.editableAssetTypes configuration option.\n     * @return array\n     */\n    public static function getEditableExtensions()\n    {\n        $defaultTypes =  ['css', 'js', 'less', 'sass', 'scss'];\n\n        $configTypes = Config::get('cms.editableAssetTypes');\n        if (!$configTypes) {\n            return $defaultTypes;\n        }\n\n        return $configTypes;\n    }\n}\n"], "filenames": ["modules/cms/classes/Asset.php"], "buggy_code_start_loc": [288], "buggy_code_end_loc": [289], "fixing_code_start_loc": [288], "fixing_code_end_loc": [296], "type": "CWE-610", "message": "In OctoberCMS (october/october composer package) versions from 1.0.319 and before 1.0.466, an attacker can exploit this vulnerability to delete arbitrary local files of an October CMS server. The vulnerability is only exploitable by an authenticated backend user with the `cms.manage_assets` permission. Issue has been patched in Build 466 (v1.0.466).", "other": {"cve": {"id": "CVE-2020-5296", "sourceIdentifier": "security-advisories@github.com", "published": "2020-06-03T22:15:11.677", "lastModified": "2022-06-30T14:46:13.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In OctoberCMS (october/october composer package) versions from 1.0.319 and before 1.0.466, an attacker can exploit this vulnerability to delete arbitrary local files of an October CMS server. The vulnerability is only exploitable by an authenticated backend user with the `cms.manage_assets` permission. Issue has been patched in Build 466 (v1.0.466)."}, {"lang": "es", "value": "En OctoberCMS (paquete de compositor october/october) versiones desde 1.0.319 y anteriores a 1.0.466, un atacante puede explotar esta vulnerabilidad para eliminar archivos locales arbitrarios de un servidor de October CMS. La vulnerabilidad solo es explotable por un usuario de backend autenticado con el permiso \"cms.manage_assets\". El problema ha sido parcheado en Build 466 (versi\u00f3n v1.0.466)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 4.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.2, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-610"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-73"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:octobercms:october:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.0.319", "versionEndExcluding": "1.0.466", "matchCriteriaId": "E3FE9FB6-7669-4FDA-8099-2953B2E0B15C"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/158730/October-CMS-Build-465-XSS-File-Read-File-Deletion-CSV-Injection.html", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "http://seclists.org/fulldisclosure/2020/Aug/2", "source": "security-advisories@github.com", "tags": ["Exploit", "Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/octobercms/october/commit/2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/octobercms/october/security/advisories/GHSA-jv6v-fvvx-4932", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/octobercms/october/commit/2b8939cc8b5b6fe81e093fe2c9f883ada4e3c8cc"}}