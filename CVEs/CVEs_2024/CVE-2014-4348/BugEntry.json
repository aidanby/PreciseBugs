{"buggy_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Recent and Favorite table list handling\n *\n * @package PhpMyAdmin\n */\n\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\nrequire_once './libraries/Message.class.php';\n\n/**\n * Handles the recently used and favorite tables.\n *\n * @TODO Change the release version in table pma_recent\n * (#recent in documentation)\n *\n * @package PhpMyAdmin\n */\nclass PMA_RecentFavoriteTable\n{\n    /**\n     * Defines the internal PMA table which contains recent/favorite tables.\n     *\n     * @access  private\n     * @var string\n     */\n    private $_pmaTable;\n\n    /**\n     * Reference to session variable containing recently used or favorite tables.\n     *\n     * @access private\n     * @var array\n     */\n    private $_tables;\n\n    /**\n     * Defines type of action, Favorite or Recent table.\n     *\n     * @access private\n     * @var string\n     */\n    private $_tableType;\n\n    /**\n     * PMA_RecentFavoriteTable instances.\n     *\n     * @access private\n     * @var array\n     */\n    private static $_instances = array();\n\n    /**\n     * Creates a new instance of PMA_RecentFavoriteTable\n     *\n     * @access private\n     * @param string $type the table type\n     */\n    private function __construct($type)\n    {\n        $this->_tableType = $type;\n        if (strlen($GLOBALS['cfg']['Server']['pmadb'])\n            && strlen($GLOBALS['cfg']['Server'][$this->_tableType])\n        ) {\n            $this->_pmaTable\n                = PMA_Util::backquote($GLOBALS['cfg']['Server']['pmadb']) . \".\"\n                . PMA_Util::backquote($GLOBALS['cfg']['Server'][$this->_tableType]);\n        }\n        $server_id = $GLOBALS['server'];\n        if (! isset($_SESSION['tmpval'][$this->_tableType . '_tables'][$server_id])) {\n            $_SESSION['tmpval'][$this->_tableType . '_tables'][$server_id]\n                = isset($this->_pmaTable) ? $this->getFromDb() : array();\n        }\n        $this->_tables =& $_SESSION['tmpval'][$this->_tableType . '_tables'][$server_id];\n    }\n\n    /**\n     * Returns class instance.\n     *\n     * @param string $type the table type\n     *\n     * @return PMA_RecentFavoriteTable\n     */\n    public static function getInstance($type)\n    {\n        if (! array_key_exists($type, self::$_instances)) {\n            self::$_instances[$type] = new PMA_RecentFavoriteTable($type);\n        }\n        return self::$_instances[$type];\n    }\n\n    /**\n     * Returns the recent/favorite tables array\n     *\n     * @return array \n     */\n    public function getTables()\n    {\n        return $this->_tables;\n    }\n\n    /**\n     * Returns recently used tables or favorite from phpMyAdmin database.\n     *\n     * @return array\n     */\n    public function getFromDb()\n    {\n        // Read from phpMyAdmin database, if recent tables is not in session\n        $sql_query\n            = \" SELECT `tables` FROM \" . $this->_pmaTable .\n            \" WHERE `username` = '\" . $GLOBALS['cfg']['Server']['user'] . \"'\";\n\n        $return = array();\n        $result = PMA_queryAsControlUser($sql_query, false);\n        if ($result) {\n            $row = $GLOBALS['dbi']->fetchArray($result);\n            if (isset($row[0])) {\n                $return = json_decode($row[0], true);\n            }\n        }\n        return $return;\n    }\n\n    /**\n     * Save recent/favorite tables into phpMyAdmin database.\n     *\n     * @return true|PMA_Message\n     */\n    public function saveToDb()\n    {\n        $username = $GLOBALS['cfg']['Server']['user'];\n        $sql_query\n            = \" REPLACE INTO \" . $this->_pmaTable . \" (`username`, `tables`)\" .\n                \" VALUES ('\" . $username . \"', '\"\n                . PMA_Util::sqlAddSlashes(\n                    json_encode($this->_tables)\n                ) . \"')\";\n\n        $success = $GLOBALS['dbi']->tryQuery($sql_query, $GLOBALS['controllink']);\n\n        if (! $success) {\n            $error_msg = '';\n            switch ($this->_tableType) {\n            case 'recent':\n                $error_msg = __('Could not save recent table!');\n                break;\n\n            case 'favorite':\n                $error_msg = __('Could not save favorite table!');\n                break;\n            }\n            $message = PMA_Message::error($error_msg);\n            $message->addMessage('<br /><br />');\n            $message->addMessage(\n                PMA_Message::rawError(\n                    $GLOBALS['dbi']->getError($GLOBALS['controllink'])\n                )\n            );\n            return $message;\n        }\n        return true;\n    }\n\n    /**\n     * Trim recent.favorite table according to the\n     * NumRecentTables/NumFavoriteTables configuration.\n     *\n     * @return boolean True if trimming occurred\n     */\n    public function trim()\n    {\n        $max = max(\n            $GLOBALS['cfg']['Num' . ucfirst($this->_tableType) . 'Tables'], 0\n        );\n        $trimming_occurred = count($this->_tables) > $max;\n        while (count($this->_tables) > $max) {\n            array_pop($this->_tables);\n        }\n        return $trimming_occurred;\n    }\n\n    /**\n     * Return HTML ul.\n     *\n     * @return string\n     */\n    public function getHtmlList()\n    {\n        // Remove Recent/Favorite tables that don't exist.\n        foreach ($this->_tables as $tbl) {\n            if (! $GLOBALS['dbi']->getColumns($tbl['db'], $tbl['table'])) {\n                $this->remove($tbl['db'], $tbl['table']);\n            }\n        }\n\n        $html = '';\n        if (count($this->_tables)) {\n            if ($this->_tableType == 'recent') {\n                foreach ($this->_tables as $table) {\n                    $html .= '<li class=\"warp_link\">';\n                    $html .= '<a href=\"sql.php?server=' . $GLOBALS['server']\n                          . '&db=' . $table['db']\n                          . '&table=' . $table['table']\n                          . '&token=' . $_SESSION[' PMA_token ']\n                          . '\">`' . $table['db'] . '`.`' . $table['table'] . '`</a>';\n                    $html .= '</li>';\n                }\n            } else {\n                foreach ($this->_tables as $table) {\n                    $html .= '<li class=\"warp_link\">';\n\n                    $html .= '<a class=\"ajax favorite_table_anchor\"';\n                    $fav_params = array('db' => $table['db'],\n                        'ajax_request' => true,\n                        'favorite_table' => $table['table'],\n                        'remove_favorite' => true);\n                    $fav_rm_url = 'db_structure.php'\n                        . PMA_URL_getCommon($fav_params);\n                    $html .= 'href=\"' . $fav_rm_url\n                        . '\" title=\"' . __(\"Remove from Favorites\")\n                        . '\" data-favtargetn=\"' . $table['db'] . \".\" . $table['table']\n                        . '\" >'\n                        . PMA_Util::getIcon('b_favorite.png')\n                        . '</a>';\n\n                    $html .= '<a href=\"sql.php?server=' . $GLOBALS['server']\n                          . '&db=' . $table['db']\n                          . '&table=' . $table['table']\n                          . '&token=' . $_SESSION[' PMA_token ']\n                          . '\">`' . $table['db'] . '`.`' . $table['table'] . '`</a>';\n                    $html .= '</li>';\n                }\n            }\n        } else {\n            $html .= '<li class=\"warp_link\">'\n                  . ($this->_tableType == 'recent'\n                    ?__('There are no recent tables.')\n                    :__('There are no favorite tables.'))\n                  . '</li>';\n        }\n        return $html;\n    }\n\n    /**\n     * Return HTML.\n     *\n     * @return string\n     */\n    public function getHtml()\n    {\n        $html  = '<div class=\"drop_list\">';\n        if ($this->_tableType == 'recent') {\n            $html .= '<span title=\"' . __('Recent tables')\n                . '\" class=\"drop_button\">'\n                . __('Recent') . '</span><ul id=\"pma_recent_list\">';\n        } else {\n            $html .= '<span title=\"' . __('Favorite tables')\n                . '\" class=\"drop_button\">'\n                . __('Favorites') . '</span><ul id=\"pma_favorite_list\">';\n        }\n        $html .= $this->getHtmlList();\n        $html .= '</ul></div>';\n        return $html;\n    }\n\n    /**\n     * Add recently used or favorite tables.\n     *\n     * @param string $db    database name where the table is located\n     * @param string $table table name\n     *\n     * @return true|PMA_Message True if success, PMA_Message if not\n     */\n    public function add($db, $table)\n    {\n        // If table doesnot exist, do not add.\n        if (! $GLOBALS['dbi']->getColumns($db, $table)) {\n            return true;\n        }\n\n        $table_arr = array();\n        $table_arr['db'] = $db;\n        $table_arr['table'] = $table;\n\n        // add only if this is new table\n        if (! isset($this->_tables[0]) || $this->_tables[0] != $table_arr) {\n            array_unshift($this->_tables, $table_arr);\n            $this->_tables = array_merge(array_unique($this->_tables, SORT_REGULAR));\n            $this->trim();\n            if (isset($this->_pmaTable)) {\n                return $this->saveToDb();\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Remove favorite tables.\n     *\n     * @param string $db    database name where the table is located\n     * @param string $table table name\n     *\n     * @return true|PMA_Message True if success, PMA_Message if not\n     */\n    public function remove($db, $table)\n    {\n        $table_arr = array();\n        $table_arr['db'] = $db;\n        $table_arr['table'] = $table;\n        foreach ($this->_tables as $key => $value) {\n            if ($value['db'] == $db && $value['table'] == $table) {\n                unset($this->_tables[$key]);\n            }\n        }\n        if (isset($this->_pmaTable)) {\n            return $this->saveToDb();\n        }\n        return true;\n    }\n\n    /**\n     * Generate Html for sync Favorite tables anchor. (from localStorage to pmadb)\n     *\n     * @return string\n     */\n    public function getHtmlSyncFavoriteTables()\n    {\n        $retval = '';\n        $server_id = $GLOBALS['server'];\n        // Not to show this once list is synchronized.\n        $is_synced = isset($_SESSION['tmpval']['favorites_synced'][$server_id]) ?\n            true : false;\n        if (!$is_synced) {\n            $params  = array('ajax_request' => true, 'favorite_table' => true,\n                'sync_favorite_tables' => true);\n            $url     = 'db_structure.php' . PMA_URL_getCommon($params);\n            $retval  = '<a class=\"hide\" id=\"sync_favorite_tables\"';\n            $retval .= ' href=\"' . $url . '\"></a>';\n        }\n        return $retval;\n    }\n}\n?>\n", "<?php\n\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * set of functions for structure section in pma\n *\n * @package PhpMyAdmin\n */\nif (!defined('PHPMYADMIN')) {\n    exit;\n}\n\n/**\n * Get the HTML links for action links\n * Actions are, Browse, Search, Browse table label, empty table\n *\n * @param array   $current_table       current table\n * @param boolean $table_is_view       Is table view or not\n * @param string  $tbl_url_query       table url query\n * @param array   $titles              titles and icons for action links\n * @param string  $truename            table name\n * @param boolean $db_is_system_schema is database information schema or not\n * @param string  $url_query           url query\n *\n * @return array ($browse_table, $search_table, $browse_table_label, $empty_table,\n *                $tracking_icon)\n */\nfunction PMA_getHtmlForActionLinks($current_table, $table_is_view, $tbl_url_query,\n    $titles, $truename, $db_is_system_schema, $url_query\n) {\n    $empty_table = '';\n\n    if ($current_table['TABLE_ROWS'] > 0 || $table_is_view) {\n        $may_have_rows = true;\n    } else {\n        $may_have_rows = false;\n    }\n\n    $browse_table = '<a href=\"sql.php?' . $tbl_url_query . '&amp;pos=0\">';\n    if ($may_have_rows) {\n        $browse_table .= $titles['Browse'];\n    } else {\n        $browse_table .= $titles['NoBrowse'];\n    }\n    $browse_table .= '</a>';\n\n    $search_table = '<a href=\"tbl_select.php?' . $tbl_url_query . '\">';\n    if ($may_have_rows) {\n        $search_table .= $titles['Search'];\n    } else {\n        $search_table .= $titles['NoSearch'];\n    }\n    $search_table .= '</a>';\n\n    $browse_table_label = '<a href=\"sql.php?' . $tbl_url_query\n        . '&amp;pos=0\" title=\"' . $current_table['TABLE_COMMENT'] . '\">'\n        . $truename . '</a>';\n\n    if (!$db_is_system_schema) {\n        $empty_table = '<a class=\"truncate_table_anchor ajax\"';\n        $empty_table .= ' href=\"sql.php?' . $tbl_url_query\n            . '&amp;sql_query=';\n        $empty_table .= urlencode(\n            'TRUNCATE ' . PMA_Util::backquote($current_table['TABLE_NAME'])\n        );\n        $empty_table .= '&amp;message_to_show='\n            . urlencode(\n                sprintf(\n                    __('Table %s has been emptied.'),\n                    htmlspecialchars($current_table['TABLE_NAME'])\n                )\n            )\n            . '\">';\n        if ($may_have_rows) {\n            $empty_table .= $titles['Empty'];\n        } else {\n            $empty_table .= $titles['NoEmpty'];\n        }\n        $empty_table .= '</a>';\n        // truncating views doesn't work\n        if ($table_is_view) {\n            $empty_table = '&nbsp;';\n        }\n    }\n\n    $tracking_icon = '';\n    if (PMA_Tracker::isActive()) {\n        if (PMA_Tracker::isTracked($GLOBALS[\"db\"], $truename)) {\n            $tracking_icon = '<a href=\"tbl_tracking.php?' . $url_query\n                . '&amp;table=' . $truename . '\">'\n                . PMA_Util::getImage(\n                    'eye.png', __('Tracking is active.')\n                )\n                . '</a>';\n        } elseif (PMA_Tracker::getVersion($GLOBALS[\"db\"], $truename) > 0) {\n            $tracking_icon = '<a href=\"tbl_tracking.php?' . $url_query\n                . '&amp;table=' . $truename . '\">'\n                . PMA_Util::getImage(\n                    'eye_grey.png', __('Tracking is not active.')\n                )\n                . '</a>';\n        }\n    }\n\n    return array($browse_table,\n        $search_table,\n        $browse_table_label,\n        $empty_table,\n        $tracking_icon\n    );\n}\n\n/**\n * Get table drop query and drop message\n *\n * @param boolean $table_is_view Is table view or not\n * @param string  $current_table current table\n *\n * @return array    ($drop_query, $drop_message)\n */\nfunction PMA_getTableDropQueryAndMessage($table_is_view, $current_table)\n{\n    $drop_query = 'DROP '\n        . (($table_is_view || $current_table['ENGINE'] == null) ? 'VIEW' : 'TABLE')\n        . ' ' . PMA_Util::backquote(\n            $current_table['TABLE_NAME']\n        );\n    $drop_message = sprintf(\n        (($table_is_view || $current_table['ENGINE'] == null)\n            ? __('View %s has been dropped.')\n            : __('Table %s has been dropped.')),\n        str_replace(\n            ' ',\n            '&nbsp;',\n            htmlspecialchars($current_table['TABLE_NAME'])\n        )\n    );\n    return array($drop_query, $drop_message);\n}\n\n/**\n * Get HTML body for table summery\n *\n * @param integer $num_tables          number of tables\n * @param boolean $server_slave_status server slave state\n * @param boolean $db_is_system_schema whether database is information schema or not\n * @param integer $sum_entries         sum entries\n * @param string  $db_collation        collation of given db\n * @param boolean $is_show_stats       whether stats is show or not\n * @param double  $sum_size            sum size\n * @param double  $overhead_size       overhead size\n * @param string  $create_time_all     create time\n * @param string  $update_time_all     update time\n * @param string  $check_time_all      check time\n * @param integer $sum_row_count_pre   sum row count pre\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlBodyForTableSummary($num_tables, $server_slave_status,\n    $db_is_system_schema, $sum_entries, $db_collation, $is_show_stats,\n    $sum_size, $overhead_size, $create_time_all, $update_time_all,\n    $check_time_all, $sum_row_count_pre\n) {\n    if ($is_show_stats) {\n        list($sum_formatted, $unit) = PMA_Util::formatByteDown(\n            $sum_size, 3, 1\n        );\n        list($overhead_formatted, $overhead_unit)\n            = PMA_Util::formatByteDown($overhead_size, 3, 1);\n    }\n\n    $html_output = '<tbody id=\"tbl_summary_row\">'\n        . '<tr><th></th>';\n    $html_output .= '<th class=\"tbl_num nowrap\">';\n    $html_output .= sprintf(\n        _ngettext('%s table', '%s tables', $num_tables),\n        PMA_Util::formatNumber($num_tables, 0)\n    );\n    $html_output .= '</th>';\n\n    if ($server_slave_status) {\n        $html_output .= '<th>' . __('Replication') . '</th>' . \"\\n\";\n    }\n    $html_output .= '<th colspan=\"' . ($db_is_system_schema ? 4 : 7) . '\">'\n        . __('Sum')\n        . '</th>';\n    $html_output .= '<th class=\"value tbl_rows\">'\n        . $sum_row_count_pre . PMA_Util::formatNumber($sum_entries, 0)\n        . '</th>';\n\n    if (!($GLOBALS['cfg']['PropertiesNumColumns'] > 1)) {\n        $default_engine = $GLOBALS['dbi']->fetchValue(\n            'SHOW VARIABLES LIKE \\'storage_engine\\';',\n            0,\n            1\n        );\n        $html_output .=  '<th class=\"center\">' . \"\\n\"\n            . '<dfn title=\"'\n            . sprintf(\n                __('%s is the default storage engine on this MySQL server.'),\n                $default_engine\n            )\n            . '\">' . $default_engine . '</dfn></th>' . \"\\n\";\n        // we got a case where $db_collation was empty\n        $html_output .= '<th>' . \"\\n\";\n\n        if (! empty($db_collation)) {\n            $html_output .= '<dfn title=\"'\n                . PMA_getCollationDescr($db_collation)\n                . ' (' . __('Default') . ')\">'\n                . $db_collation\n                . '</dfn>';\n        }\n        $html_output .= '</th>';\n    }\n    if ($is_show_stats) {\n        $html_output .= '<th class=\"value tbl_size\">'\n            . $sum_formatted . ' ' . $unit\n            . '</th>';\n        $html_output .= '<th class=\"value tbl_overhead\">'\n            . $overhead_formatted . ' ' . $overhead_unit\n            . '</th>';\n    }\n\n    if ($GLOBALS['cfg']['ShowDbStructureCreation']) {\n        $html_output .= '<th class=\"value tbl_creation\">' . \"\\n\"\n            . '        '\n            . ($create_time_all\n                ? PMA_Util::localisedDate(strtotime($create_time_all))\n                : '-'\n            )\n            . '</th>';\n    }\n\n    if ($GLOBALS['cfg']['ShowDbStructureLastUpdate']) {\n        $html_output .= '<th class=\"value tbl_last_update\">' . \"\\n\"\n            . '        '\n            . ($update_time_all\n                ? PMA_Util::localisedDate(strtotime($update_time_all))\n                : '-'\n            )\n            . '</th>';\n    }\n\n    if ($GLOBALS['cfg']['ShowDbStructureLastCheck']) {\n        $html_output .= '<th class=\"value tbl_last_check\">' . \"\\n\"\n            . '        '\n            . ($check_time_all\n                ? PMA_Util::localisedDate(strtotime($check_time_all))\n                : '-'\n            )\n            . '</th>';\n    }\n    $html_output .= '</tr>'\n        . '</tbody>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML for \"check all\" check box with \"with selected\" dropdown\n *\n * @param string  $pmaThemeImage       pma theme image url\n * @param string  $text_dir            url for text directory\n * @param string  $overhead_check      overhead check\n * @param boolean $db_is_system_schema whether database is information schema or not\n * @param string  $hidden_fields       hidden fields\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForCheckAllTables($pmaThemeImage, $text_dir,\n    $overhead_check, $db_is_system_schema, $hidden_fields\n) {\n    $html_output = '<div class=\"clearfloat\">';\n    $html_output .= '<img class=\"selectallarrow\" '\n        . 'src=\"' . $pmaThemeImage . 'arrow_' . $text_dir . '.png\" '\n        . 'width=\"38\" height=\"22\" alt=\"' . __('With selected:') . '\" />';\n\n    $html_output .= '<input type=\"checkbox\" id=\"tablesForm_checkall\" '\n        . 'class=\"checkall_box\" title=\"' . __('Check All') . '\" />';\n    $html_output .= '<label for=\"tablesForm_checkall\">' . __('Check All')\n        . '</label>';\n\n    if ($overhead_check != '') {\n        $html_output .= PMA_getHtmlForCheckTablesHavingOverheadlink(\n            $overhead_check\n        );\n    }\n\n    $html_output .= '<select name=\"submit_mult\" class=\"autosubmit\" '\n        . 'style=\"margin: 0 3em 0 3em;\">';\n\n    $html_output .= '<option value=\"' . __('With selected:')\n        . '\" selected=\"selected\">'\n        . __('With selected:') . '</option>' . \"\\n\";\n    $html_output .= '<option value=\"export\" >'\n        . __('Export') . '</option>' . \"\\n\";\n    $html_output .= '<option value=\"print\" >'\n        . __('Print view') . '</option>' . \"\\n\";\n\n    if (!$db_is_system_schema\n        && !$GLOBALS['cfg']['DisableMultiTableMaintenance']\n    ) {\n        $html_output .= '<option value=\"empty_tbl\" >'\n            . __('Empty') . '</option>' . \"\\n\";\n        $html_output .= '<option value=\"drop_tbl\" >'\n            . __('Drop') . '</option>' . \"\\n\";\n        $html_output .= '<option value=\"check_tbl\" >'\n            . __('Check table') . '</option>' . \"\\n\";\n        if (!PMA_DRIZZLE) {\n            $html_output .= '<option value=\"optimize_tbl\" >'\n                . __('Optimize table') . '</option>' . \"\\n\";\n            $html_output .= '<option value=\"repair_tbl\" >'\n                . __('Repair table') . '</option>' . \"\\n\";\n        }\n        $html_output .= '<option value=\"analyze_tbl\" >'\n            . __('Analyze table') . '</option>' . \"\\n\";\n        $html_output .= '<option value=\"add_prefix_tbl\" >'\n            . __('Add prefix to table') . '</option>' . \"\\n\";\n        $html_output .= '<option value=\"replace_prefix_tbl\" >'\n            . __('Replace table prefix') . '</option>' . \"\\n\";\n        $html_output .= '<option value=\"copy_tbl_change_prefix\" >'\n            . __('Copy table with prefix') . '</option>' . \"\\n\";\n    }\n    $html_output .= '</select>'\n        . implode(\"\\n\", $hidden_fields) . \"\\n\";\n    $html_output .= '</div>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML code for \"Check tables having overhead\" link\n *\n * @param string $overhead_check overhead check\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForCheckTablesHavingOverheadlink($overhead_check)\n{\n    return ' / '\n        . '<a href=\"#\" onclick=\"unMarkAllRows(\\'tablesForm\\');'\n        . $overhead_check . 'return false;\">'\n        . __('Check tables having overhead')\n        . '</a>';\n}\n\n\n/**\n * Get HTML links for \"Print view\" options\n *\n * @param string $url_query url query\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForTablePrintViewLink($url_query)\n{\n    return '<p>'\n        . '<a href=\"db_printview.php?' . $url_query . '\" target=\"print_view\">'\n        . PMA_Util::getIcon(\n            'b_print.png',\n            __('Print view'),\n            true\n        ) . '</a>';\n}\n\n/**\n * Get HTML links \"Data Dictionary\" options\n *\n * @param string $url_query url query\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForDataDictionaryLink($url_query)\n{\n    return '<a href=\"db_datadict.php?' . $url_query . '\" target=\"print_view\">'\n        . PMA_Util::getIcon(\n            'b_tblanalyse.png',\n            __('Data Dictionary'),\n            true\n        ) . '</a>'\n        . '</p>';\n}\n\n/**\n * Get Time for Create time, update time and check time\n *\n * @param array   $current_table current table\n * @param string  $time_label    Create_time, Update_time, Check_time\n * @param integer $time_all      time\n *\n * @return array ($time, $time_all)\n */\nfunction PMA_getTimeForCreateUpdateCheck($current_table, $time_label, $time_all)\n{\n    $showtable = PMA_Table::sGetStatusInfo(\n        $GLOBALS['db'],\n        $current_table['TABLE_NAME'],\n        null,\n        true\n    );\n    $time = isset($showtable[$time_label])\n        ? $showtable[$time_label]\n        : false;\n\n    // show oldest creation date in summary row\n    if ($time && (!$time_all || $time < $time_all)) {\n        $time_all = $time;\n    }\n    return array($time, $time_all);\n}\n\n/**\n * Get HTML for each table row of the database structure table,\n * And this function returns $odd_row param also\n *\n * @param integer $curr                  current entry\n * @param boolean $odd_row               whether row is odd or not\n * @param boolean $table_is_view         whether table is view or not\n * @param array   $current_table         current table\n * @param string  $browse_table_label    browse table label action link\n * @param string  $tracking_icon         tracking icon\n * @param boolean $server_slave_status   server slave state\n * @param string  $browse_table          browse table action link\n * @param string  $tbl_url_query         table url query\n * @param string  $search_table          search table action link\n * @param boolean $db_is_system_schema   whether db is information schema or not\n * @param array   $titles                titles array\n * @param string  $empty_table           empty table action link\n * @param string  $drop_query            table dropt query\n * @param string  $drop_message          table drop message\n * @param string  $collation             collation\n * @param string  $formatted_size        formatted size\n * @param string  $unit                  unit\n * @param string  $overhead              overhead\n * @param string  $create_time           create time\n * @param string  $update_time           last update time\n * @param string  $check_time            last check time\n * @param boolean $is_show_stats         whether stats is show or not\n * @param boolean $ignored               ignored\n * @param boolean $do                    do\n * @param integer $colspan_for_structure colspan for structure\n *\n * @return array $html_output, $odd_row\n */\nfunction PMA_getHtmlForStructureTableRow(\n    $curr, $odd_row, $table_is_view, $current_table,\n    $browse_table_label, $tracking_icon,$server_slave_status,\n    $browse_table, $tbl_url_query, $search_table,\n    $db_is_system_schema,$titles, $empty_table, $drop_query, $drop_message,\n    $collation, $formatted_size, $unit, $overhead, $create_time, $update_time,\n    $check_time,$is_show_stats, $ignored, $do, $colspan_for_structure\n) {\n    global $db;\n    $html_output = '<tr class=\"' . ($odd_row ? 'odd' : 'even');\n    $odd_row = ! $odd_row;\n    $html_output .= ($table_is_view ? ' is_view' : '')\n        . '\" id=\"row_tbl_' . $curr . '\">';\n\n    $html_output .= '<td class=\"center\">'\n        . '<input type=\"checkbox\" name=\"selected_tbl[]\" class=\"checkall\" '\n        . 'value=\"' . htmlspecialchars($current_table['TABLE_NAME']) . '\" '\n        . 'id=\"checkbox_tbl_' . $curr . '\" /></td>';\n\n    $html_output .= '<th>'\n        . $browse_table_label\n        . (! empty($tracking_icon) ? $tracking_icon : '')\n        . '</th>';\n\n    if ($server_slave_status) {\n        $html_output .= '<td class=\"center\">'\n            . ($ignored\n                ? PMA_Util::getImage('s_cancel.png', 'NOT REPLICATED')\n                : '')\n            . ($do\n                ? PMA_Util::getImage('s_success.png', 'REPLICATED')\n                : '')\n            . '</td>';\n    }\n    //Favorite table anchor.\n    $html_output .= '<td class=\"center\">'\n        . PMA_getHtmlForFavoriteAnchor($db, $current_table, $titles)\n        . '</td>';\n\n    $html_output .= '<td class=\"center\">' . $browse_table . '</td>';\n    $html_output .= '<td class=\"center\">'\n        . '<a href=\"tbl_structure.php?' . $tbl_url_query . '\">'\n        . $titles['Structure'] . '</a></td>';\n    $html_output .= '<td class=\"center\">' . $search_table . '</td>';\n\n    if (! $db_is_system_schema) {\n        $html_output .= PMA_getHtmlForInsertEmptyDropActionLinks(\n            $tbl_url_query, $table_is_view,\n            $titles, $empty_table, $current_table, $drop_query, $drop_message\n        );\n    } // end if (! $db_is_system_schema)\n\n    // there is a null value in the ENGINE\n    // - when the table needs to be repaired, or\n    // - when it's a view\n    //  so ensure that we'll display \"in use\" below for a table\n    //  that needs to be repaired\n    if (isset($current_table['TABLE_ROWS'])\n        && ($current_table['ENGINE'] != null\n        || $table_is_view)\n    ) {\n        $html_output .= PMA_getHtmlForNotNullEngineViewTable(\n            $table_is_view, $current_table, $collation, $is_show_stats,\n            $tbl_url_query, $formatted_size, $unit, $overhead, $create_time,\n            $update_time, $check_time\n        );\n    } elseif ($table_is_view) {\n        $html_output .= PMA_getHtmlForViewTable($is_show_stats);\n    } else {\n        $html_output .= PMA_getHtmlForRepairtable(\n            $colspan_for_structure,\n            $db_is_system_schema\n        );\n    } // end if (isset($current_table['TABLE_ROWS'])) else\n    $html_output .= '</tr>';\n\n    return array($html_output, $odd_row);\n}\n\n/**\n * Get HTML for Insert/Empty/Drop action links\n *\n * @param string  $tbl_url_query table url query\n * @param boolean $table_is_view whether table is view or not\n * @param array   $titles        titles array\n * @param string  $empty_table   HTML link for empty table\n * @param array   $current_table current table\n * @param string  $drop_query    query for drop table\n * @param string  $drop_message  table drop message\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForInsertEmptyDropActionLinks($tbl_url_query, $table_is_view,\n    $titles, $empty_table, $current_table, $drop_query, $drop_message\n) {\n    $html_output = '<td class=\"insert_table center\">'\n        . '<a href=\"tbl_change.php?' . $tbl_url_query . '\">'\n        . $titles['Insert']\n        . '</a></td>';\n    $html_output .= '<td class=\"center\">' . $empty_table . '</td>';\n    $html_output .= '<td class=\"center\">';\n    $html_output .= '<a ';\n    $html_output .= 'class=\"ajax drop_table_anchor';\n    if ($table_is_view || $current_table['ENGINE'] == null) {\n        // this class is used in db_structure.js to display the\n        // correct confirmation message\n        $html_output .= ' view';\n    }\n    $html_output .= '\" ';\n    $html_output .= 'href=\"sql.php?' . $tbl_url_query\n        . '&amp;reload=1&amp;purge=1&amp;sql_query='\n        . urlencode($drop_query) . '&amp;message_to_show='\n        . urlencode($drop_message) . '\" >'\n        . $titles['Drop'] . '</a></td>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML for show stats\n *\n * @param string $tbl_url_query  tabel url query\n * @param string $formatted_size formatted size\n * @param string $unit           unit\n * @param string $overhead       overhead\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForShowStats($tbl_url_query, $formatted_size,\n    $unit, $overhead\n) {\n     $html_output = '<td class=\"value tbl_size\"><a '\n        . 'href=\"tbl_structure.php?' . $tbl_url_query . '#showusage\" >'\n        . '<span>' . $formatted_size . '</span> '\n        . '<span class=\"unit\">' . $unit . '</span>'\n        . '</a></td>';\n    $html_output .= '<td class=\"value tbl_overhead\">' . $overhead . '</td>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML to show database structure creation, last update and last checkx time\n *\n * @param string $create_time create time\n * @param string $update_time last update time\n * @param string $check_time  last check time\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForStructureTimes($create_time, $update_time, $check_time)\n{\n    $html_output = '';\n    if ($GLOBALS['cfg']['ShowDbStructureCreation']) {\n        $html_output .= '<td class=\"value tbl_creation\">'\n            . ($create_time\n                ? PMA_Util::localisedDate(strtotime($create_time))\n                : '-' )\n            . '</td>';\n    } // end if\n    if ($GLOBALS['cfg']['ShowDbStructureLastUpdate']) {\n        $html_output .= '<td class=\"value tbl_last_update\">'\n            . ($update_time\n                ? PMA_Util::localisedDate(strtotime($update_time))\n                : '-' )\n            . '</td>';\n    } // end if\n    if ($GLOBALS['cfg']['ShowDbStructureLastCheck']) {\n        $html_output .= '<td class=\"value tbl_last_check\">'\n            . ($check_time\n                ? PMA_Util::localisedDate(strtotime($check_time))\n                : '-' )\n            . '</td>';\n    }\n    return $html_output;\n}\n\n/**\n * Get HTML for ENGINE value not null or view tables that are not empty tables\n *\n * @param boolean $table_is_view  whether table is view\n * @param array   $current_table  current table\n * @param string  $collation      collation\n * @param boolean $is_show_stats  whether atats show or not\n * @param string  $tbl_url_query  table url query\n * @param string  $formatted_size formatted size\n * @param string  $unit           unit\n * @param string  $overhead       overhead\n * @param string  $create_time    create time\n * @param string  $update_time    update time\n * @param string  $check_time     check time\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForNotNullEngineViewTable($table_is_view, $current_table,\n    $collation, $is_show_stats, $tbl_url_query, $formatted_size, $unit,\n    $overhead, $create_time, $update_time, $check_time\n) {\n    $html_output = '';\n    $row_count_pre = '';\n    $show_superscript = '';\n    if ($table_is_view) {\n        // Drizzle views use FunctionEngine, and the only place where they are\n        // available are I_S and D_D schemas, where we do exact counting\n        if ($current_table['TABLE_ROWS'] >= $GLOBALS['cfg']['MaxExactCountViews']\n            && $current_table['ENGINE'] != 'FunctionEngine'\n        ) {\n            $row_count_pre = '~';\n            $sum_row_count_pre = '~';\n            $show_superscript = PMA_Util::showHint(\n                PMA_sanitize(\n                    sprintf(\n                        __('This view has at least this number of rows. Please refer to %sdocumentation%s.'),\n                        '[doc@cfg_MaxExactCountViews]',\n                        '[/doc]'\n                    )\n                )\n            );\n        }\n    } elseif ($current_table['ENGINE'] == 'InnoDB'\n        && (! $current_table['COUNTED'])\n    ) {\n        // InnoDB table: we did not get an accurate row count\n        $row_count_pre = '~';\n        $sum_row_count_pre = '~';\n        $show_superscript = '';\n    }\n\n    $html_output .= '<td class=\"value tbl_rows\">'\n        . $row_count_pre . PMA_Util::formatNumber(\n            $current_table['TABLE_ROWS'], 0\n        )\n        . $show_superscript . '</td>';\n\n    if (!($GLOBALS['cfg']['PropertiesNumColumns'] > 1)) {\n        $html_output .= '<td class=\"nowrap\">'\n            . ($table_is_view ? __('View') : $current_table['ENGINE'])\n            . '</td>';\n        if (strlen($collation)) {\n            $html_output .= '<td class=\"nowrap\">' . $collation . '</td>';\n        }\n    }\n\n    if ($is_show_stats) {\n        $html_output .= PMA_getHtmlForShowStats(\n            $tbl_url_query, $formatted_size, $unit, $overhead\n        );\n    }\n\n    $html_output .= PMA_getHtmlForStructureTimes(\n        $create_time, $update_time, $check_time\n    );\n\n    return $html_output;\n}\n\n/**\n * Get HTML snippet view table\n *\n * @param boolean $is_show_stats whether stats show or not\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForViewTable($is_show_stats)\n{\n    $html_output = '<td class=\"value\">-</td>'\n        . '<td>' . __('View') . '</td>'\n        . '<td>---</td>';\n    if ($is_show_stats) {\n        $html_output .= '<td class=\"value\">-</td>'\n            . '<td class=\"value\">-</td>';\n    }\n    return $html_output;\n}\n\n/**\n * display \"in use\" below for a table that needs to be repaired\n *\n * @param integer $colspan_for_structure colspan for structure\n * @param boolean $db_is_system_schema   whether db is information schema or not\n *\n * @return string HTML snippet\n */\nfunction PMA_getHtmlForRepairtable(\n    $colspan_for_structure,\n    $db_is_system_schema\n) {\n    return '<td colspan=\"'\n        . ($colspan_for_structure - ($db_is_system_schema ? 5 : 8)) . '\"'\n        . 'class=\"center\">'\n        . __('in use')\n        . '</td>';\n}\n\n/**\n * display table header (<table><thead>...</thead><tbody>)\n *\n * @param boolean $db_is_system_schema whether db is information schema or not\n * @param boolean $replication         whether to sho replication status\n *\n * @return string html data\n */\nfunction PMA_tableHeader($db_is_system_schema = false, $replication = false)\n{\n    $cnt = 0; // Let's count the columns...\n\n    if ($db_is_system_schema) {\n        $action_colspan = 4;\n    } else {\n        $action_colspan = 7;\n    }\n\n    $html_output = '<table class=\"data\">' . \"\\n\"\n        . '<thead>' . \"\\n\"\n        . '<tr><th></th>' . \"\\n\"\n        . '<th>'\n        . PMA_sortableTableHeader(__('Table'), 'table')\n        . '</th>' . \"\\n\";\n    if ($replication) {\n        $html_output .= '<th>' . \"\\n\"\n            . '        ' . __('Replication') . \"\\n\"\n            . '</th>';\n    }\n    $html_output .= '<th colspan=\"' . $action_colspan . '\">' . \"\\n\"\n        . '        ' . __('Action') . \"\\n\"\n        . '</th>'\n        // larger values are more interesting so default sort order is DESC\n        . '<th>' . PMA_sortableTableHeader(__('Rows'), 'records', 'DESC')\n        . PMA_Util::showHint(\n            PMA_sanitize(\n                __('May be approximate. See [doc@faq3-11]FAQ 3.11[/doc].')\n            )\n        ) . \"\\n\"\n        . '</th>' . \"\\n\";\n    if (!($GLOBALS['cfg']['PropertiesNumColumns'] > 1)) {\n        $html_output .= '<th>' . PMA_sortableTableHeader(__('Type'), 'type')\n            . '</th>' . \"\\n\";\n        $cnt++;\n        $html_output .= '<th>'\n            . PMA_sortableTableHeader(__('Collation'), 'collation')\n            . '</th>' . \"\\n\";\n        $cnt++;\n    }\n    if ($GLOBALS['is_show_stats']) {\n        // larger values are more interesting so default sort order is DESC\n        $html_output .= '<th>'\n            . PMA_sortableTableHeader(__('Size'), 'size', 'DESC')\n            . '</th>' . \"\\n\"\n        // larger values are more interesting so default sort order is DESC\n            . '<th>'\n            . PMA_sortableTableHeader(__('Overhead'), 'overhead', 'DESC')\n            . '</th>' . \"\\n\";\n        $cnt += 2;\n    }\n    if ($GLOBALS['cfg']['ShowDbStructureCreation']) {\n        // larger values are more interesting so default sort order is DESC\n        $html_output .= '<th>'\n            . PMA_sortableTableHeader(__('Creation'), 'creation', 'DESC')\n            . '</th>' . \"\\n\";\n        $cnt += 2;\n    }\n    if ($GLOBALS['cfg']['ShowDbStructureLastUpdate']) {\n        // larger values are more interesting so default sort order is DESC\n        $html_output .= '<th>'\n            . PMA_sortableTableHeader(__('Last update'), 'last_update', 'DESC')\n            . '</th>' . \"\\n\";\n        $cnt += 2;\n    }\n    if ($GLOBALS['cfg']['ShowDbStructureLastCheck']) {\n        // larger values are more interesting so default sort order is DESC\n        $html_output .= '<th>'\n            . PMA_sortableTableHeader(__('Last check'), 'last_check', 'DESC')\n            . '</th>' . \"\\n\";\n        $cnt += 2;\n    }\n    $html_output .= '</tr>' . \"\\n\";\n    $html_output .= '</thead>' . \"\\n\";\n    $html_output .= '<tbody>' . \"\\n\";\n    $GLOBALS['colspan_for_structure'] = $cnt + $action_colspan + 3;\n\n    return $html_output;\n}\n\n/**\n * Creates a clickable column header for table information\n *\n * @param string $title              title to use for the link\n * @param string $sort               corresponds to sortable data name mapped in\n *                                   libraries/db_info.inc.php\n * @param string $initial_sort_order initial sort order\n *\n * @return string link to be displayed in the table header\n */\nfunction PMA_sortableTableHeader($title, $sort, $initial_sort_order = 'ASC')\n{\n    // Set some defaults\n    $requested_sort = 'table';\n    $requested_sort_order = $future_sort_order = $initial_sort_order;\n\n    // If the user requested a sort\n    if (isset($_REQUEST['sort'])) {\n        $requested_sort = $_REQUEST['sort'];\n\n        if (isset($_REQUEST['sort_order'])) {\n            $requested_sort_order = $_REQUEST['sort_order'];\n        }\n    }\n\n    $order_img = '';\n    $order_link_params = array();\n    $order_link_params['title'] = __('Sort');\n\n    // If this column was requested to be sorted.\n    if ($requested_sort == $sort) {\n        if ($requested_sort_order == 'ASC') {\n            $future_sort_order = 'DESC';\n            // current sort order is ASC\n            $order_img  = ' ' . PMA_Util::getImage(\n                's_asc.png',\n                __('Ascending'),\n                array('class' => 'sort_arrow', 'title' => '')\n            );\n            $order_img .= ' ' . PMA_Util::getImage(\n                's_desc.png',\n                __('Descending'),\n                array('class' => 'sort_arrow hide', 'title' => '')\n            );\n            // but on mouse over, show the reverse order (DESC)\n            $order_link_params['onmouseover'] = \"$('.sort_arrow').toggle();\";\n            // on mouse out, show current sort order (ASC)\n            $order_link_params['onmouseout'] = \"$('.sort_arrow').toggle();\";\n        } else {\n            $future_sort_order = 'ASC';\n            // current sort order is DESC\n            $order_img  = ' ' . PMA_Util::getImage(\n                's_asc.png',\n                __('Ascending'),\n                array('class' => 'sort_arrow hide', 'title' => '')\n            );\n            $order_img .= ' ' . PMA_Util::getImage(\n                's_desc.png',\n                __('Descending'),\n                array('class' => 'sort_arrow', 'title' => '')\n            );\n            // but on mouse over, show the reverse order (ASC)\n            $order_link_params['onmouseover'] = \"$('.sort_arrow').toggle();\";\n            // on mouse out, show current sort order (DESC)\n            $order_link_params['onmouseout'] = \"$('.sort_arrow').toggle();\";\n        }\n    }\n\n    $_url_params = array(\n        'db' => $_REQUEST['db'],\n    );\n\n    $url = 'db_structure.php' . PMA_URL_getCommon($_url_params);\n    // We set the position back to 0 every time they sort.\n    $url .= \"&amp;pos=0&amp;sort=$sort&amp;sort_order=$future_sort_order\";\n    if (! empty($_REQUEST['tbl_type'])) {\n        $url .= \"&amp;tbl_type=\" . $_REQUEST['tbl_type'];\n    }\n    if (! empty($_REQUEST['tbl_group'])) {\n        $url .= \"&amp;tbl_group=\" . $_REQUEST['tbl_group'];\n    }\n\n    return PMA_Util::linkOrButton(\n        $url, $title . $order_img, $order_link_params\n    );\n}\n\n/**\n * Get the alias ant truname\n *\n * @param string $tooltip_aliasname tooltip alias name\n * @param array  $current_table     current table\n * @param string $tooltip_truename  tooltip true name\n *\n * @return array ($alias, $truename)\n */\nfunction PMA_getAliasAndTrueName($tooltip_aliasname, $current_table,\n    $tooltip_truename\n) {\n    $alias = (! empty($tooltip_aliasname)\n            && isset($tooltip_aliasname[$current_table['TABLE_NAME']])\n        )\n        ? str_replace(\n            ' ', '&nbsp;',\n            htmlspecialchars($tooltip_truename[$current_table['TABLE_NAME']])\n        )\n        : str_replace(\n            ' ', '&nbsp;',\n            htmlspecialchars($current_table['TABLE_NAME'])\n        );\n    $truename = (! empty($tooltip_truename)\n            && isset($tooltip_truename[$current_table['TABLE_NAME']])\n        )\n        ? str_replace(\n            ' ', '&nbsp;',\n            htmlspecialchars($tooltip_truename[$current_table['TABLE_NAME']])\n        )\n        : str_replace(\n            ' ', '&nbsp;',\n            htmlspecialchars($current_table['TABLE_NAME'])\n        );\n\n    return array($alias, $truename);\n}\n\n/**\n * Get the server slave state\n *\n * @param boolean $server_slave_status server slave state\n * @param string  $truename            true name\n *\n * @return array ($do, $ignored)\n */\nfunction PMA_getServerSlaveStatus($server_slave_status, $truename)\n{\n    $ignored = false;\n    $do = false;\n    include_once 'libraries/replication.inc.php';\n    if ($server_slave_status) {\n        $nbServerSlaveDoDb = count($server_slave_Do_DB);\n        $nbServerSlaveIgnoreDb = count($server_slave_Ignore_DB);\n        if ((strlen(array_search($truename, $server_slave_Do_Table)) > 0)\n            || (strlen(array_search($GLOBALS['db'], $server_slave_Do_DB)) > 0)\n            || ($nbServerSlaveDoDb == 1 && $nbServerSlaveIgnoreDb == 1)\n        ) {\n            $do = true;\n        }\n        foreach ($server_slave_Wild_Do_Table as $db_table) {\n            $table_part = PMA_extractDbOrTable($db_table, 'table');\n            $pattern = \"@^\" . substr($table_part, 0, strlen($table_part) - 1) . \"@\";\n            if (($GLOBALS['db'] == PMA_extractDbOrTable($db_table, 'db'))\n                && (preg_match($pattern, $truename))\n            ) {\n                $do = true;\n            }\n        }\n\n        if ((strlen(array_search($truename, $server_slave_Ignore_Table)) > 0)\n            || (strlen(array_search($GLOBALS['db'], $server_slave_Ignore_DB)) > 0)\n        ) {\n            $ignored = true;\n        }\n        foreach ($server_slave_Wild_Ignore_Table as $db_table) {\n            $table_part = PMA_extractDbOrTable($db_table, 'table');\n            $pattern = \"@^\" . substr($table_part, 0, strlen($table_part) - 1) . \"@\";\n            if (($db == PMA_extractDbOrTable($db_table))\n                && (preg_match($pattern, $truename))\n            ) {\n                $ignored = true;\n            }\n        }\n    }\n    return array($do, $ignored);\n}\n\n/**\n * Get the value set for ENGINE table,\n * $current_table, $formatted_size, $unit, $formatted_overhead,\n * $overhead_unit, $overhead_size, $table_is_view\n *\n * @param array   $current_table       current table\n * @param boolean $db_is_system_schema whether db is information schema or not\n * @param boolean $is_show_stats       whether stats show or not\n * @param boolean $table_is_view       whether table is view or not\n * @param double  $sum_size            totle table size\n * @param double  $overhead_size       overhead size\n *\n * @return array\n */\nfunction PMA_getStuffForEngineTypeTable($current_table, $db_is_system_schema,\n    $is_show_stats, $table_is_view, $sum_size, $overhead_size\n) {\n    $formatted_size = '-';\n    $unit = '';\n    $formatted_overhead = '';\n    $overhead_unit = '';\n\n    switch ( $current_table['ENGINE']) {\n        // MyISAM, ISAM or Heap table: Row count, data size and index size\n        // are accurate; data size is accurate for ARCHIVE\n    case 'MyISAM' :\n    case 'ISAM' :\n    case 'HEAP' :\n    case 'MEMORY' :\n    case 'ARCHIVE' :\n    case 'Aria' :\n    case 'Maria' :\n        list($current_table, $formatted_size, $unit, $formatted_overhead,\n        $overhead_unit, $overhead_size, $sum_size) = PMA_getValuesForAriaTable(\n            $db_is_system_schema, $current_table, $is_show_stats,\n            $sum_size, $overhead_size, $formatted_size, $unit,\n            $formatted_overhead, $overhead_unit\n        );\n        break;\n    case 'InnoDB' :\n    case 'PBMS' :\n        // InnoDB table: Row count is not accurate but data and index sizes are.\n        // PBMS table in Drizzle: TABLE_ROWS is taken from table cache,\n        // so it may be unavailable\n        list($current_table, $formatted_size, $unit, $sum_size)\n            = PMA_getValuesForInnodbTable($current_table, $is_show_stats, $sum_size);\n        //$display_rows                   =  ' - ';\n        break;\n    // Mysql 5.0.x (and lower) uses MRG_MyISAM\n    // and MySQL 5.1.x (and higher) uses MRG_MYISAM\n    // Both are aliases for MERGE\n    case 'MRG_MyISAM' :\n    case 'MRG_MYISAM' :\n    case 'MERGE' :\n    case 'BerkeleyDB' :\n        // Merge or BerkleyDB table: Only row count is accurate.\n        if ($is_show_stats) {\n            $formatted_size =  ' - ';\n            $unit          =  '';\n        }\n        break;\n        // for a view, the ENGINE is sometimes reported as null,\n        // or on some servers it's reported as \"SYSTEM VIEW\"\n    case null :\n    case 'SYSTEM VIEW' :\n    case 'FunctionEngine' :\n        // if table is broken, Engine is reported as null, so one more test\n        if ($current_table['TABLE_TYPE'] == 'VIEW') {\n            // countRecords() takes care of $cfg['MaxExactCountViews']\n            $current_table['TABLE_ROWS'] = PMA_Table::countRecords(\n                $GLOBALS['db'], $current_table['TABLE_NAME'],\n                true, true\n            );\n            $table_is_view = true;\n        }\n        break;\n    default :\n        // Unknown table type.\n        if ($is_show_stats) {\n            $formatted_size =  __('unknown');\n            $unit          =  '';\n        }\n    } // end switch\n\n    return array($current_table, $formatted_size, $unit, $formatted_overhead,\n        $overhead_unit, $overhead_size, $table_is_view, $sum_size\n    );\n}\n\n/**\n * Get values for ARIA/MARIA tables\n * $current_table, $formatted_size, $unit, $formatted_overhead,\n * $overhead_unit, $overhead_size\n *\n * @param boolean $db_is_system_schema whether db is information schema or not\n * @param array   $current_table       current table\n * @param boolean $is_show_stats       whether stats show or not\n * @param double  $sum_size            sum size\n * @param double  $overhead_size       overhead size\n * @param number  $formatted_size      formatted size\n * @param string  $unit                unit\n * @param number  $formatted_overhead  overhead formatted\n * @param string  $overhead_unit       overhead unit\n *\n * @return array\n */\nfunction PMA_getValuesForAriaTable($db_is_system_schema, $current_table,\n    $is_show_stats, $sum_size, $overhead_size, $formatted_size, $unit,\n    $formatted_overhead, $overhead_unit\n) {\n    if ($db_is_system_schema) {\n        $current_table['Rows'] = PMA_Table::countRecords(\n            $GLOBALS['db'], $current_table['Name']\n        );\n    }\n\n    if ($is_show_stats) {\n        $tblsize = doubleval($current_table['Data_length'])\n            + doubleval($current_table['Index_length']);\n        $sum_size += $tblsize;\n        list($formatted_size, $unit) = PMA_Util::formatByteDown(\n            $tblsize, 3, ($tblsize > 0) ? 1 : 0\n        );\n        if (isset($current_table['Data_free']) && $current_table['Data_free'] > 0) {\n            list($formatted_overhead, $overhead_unit)\n                = PMA_Util::formatByteDown(\n                    $current_table['Data_free'], 3,\n                    (($current_table['Data_free'] > 0) ? 1 : 0)\n                );\n            $overhead_size += $current_table['Data_free'];\n        }\n    }\n    return array($current_table, $formatted_size, $unit, $formatted_overhead,\n        $overhead_unit, $overhead_size, $sum_size\n    );\n}\n\n/**\n * Get values for InnoDB table\n * $current_table, $formatted_size, $unit, $sum_size\n *\n * @param array   $current_table current table\n * @param boolean $is_show_stats whether stats show or not\n * @param double  $sum_size      sum size\n *\n * @return array\n */\nfunction PMA_getValuesForInnodbTable($current_table, $is_show_stats, $sum_size)\n{\n    $formatted_size = $unit = '';\n\n    if (($current_table['ENGINE'] == 'InnoDB'\n        && $current_table['TABLE_ROWS'] < $GLOBALS['cfg']['MaxExactCount'])\n        || !isset($current_table['TABLE_ROWS'])\n    ) {\n        $current_table['COUNTED'] = true;\n        $current_table['TABLE_ROWS'] = PMA_Table::countRecords(\n            $GLOBALS['db'], $current_table['TABLE_NAME'],\n            true, false\n        );\n    } else {\n        $current_table['COUNTED'] = false;\n    }\n\n    // Drizzle doesn't provide data and index length, check for null\n    if ($is_show_stats && $current_table['Data_length'] !== null) {\n        $tblsize =  $current_table['Data_length'] + $current_table['Index_length'];\n        $sum_size += $tblsize;\n        list($formatted_size, $unit) = PMA_Util::formatByteDown(\n            $tblsize, 3, (($tblsize > 0) ? 1 : 0)\n        );\n    }\n\n    return array($current_table, $formatted_size, $unit, $sum_size);\n}\n\n/**\n * table structure\n */\n\n/**\n * Get the HTML snippet for structure table table header\n *\n * @param boolean $db_is_system_schema whether db is information schema or not\n * @param boolean $tbl_is_view         whether table is view or not\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForTableStructureHeader(\n    $db_is_system_schema,\n    $tbl_is_view\n) {\n    $html_output = '<thead>';\n    $html_output .= '<tr>';\n    $html_output .= '<th></th>'\n        . '<th>#</th>'\n        . '<th>' . __('Name') . '</th>'\n        . '<th>' . __('Type') . '</th>'\n        . '<th>' . __('Collation') . '</th>'\n        . '<th>' . __('Attributes') . '</th>'\n        . '<th>' . __('Null') . '</th>'\n        . '<th>' . __('Default') . '</th>'\n        . '<th>' . __('Extra') . '</th>';\n\n    if ($db_is_system_schema || $tbl_is_view) {\n        $html_output .= '<th>' . __('View') . '</th>';\n    } else { /* see tbl_structure.js, function moreOptsMenuResize() */\n        $colspan = 9;\n        if (PMA_DRIZZLE) {\n            $colspan -= 2;\n        }\n        if (PMA_Util::showIcons('ActionLinksMode')) {\n            $colspan--;\n        }\n        $html_output .= '<th colspan=\"' . $colspan . '\" '\n            . 'class=\"action\">' . __('Action') . '</th>';\n    }\n    $html_output .= '</tr>'\n        . '</thead>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML for structure table's rows and return $odd_row parameter also\n * For \"Action\" Column, this function contains only HTML code for \"Change\"\n * and \"Drop\"\n *\n * @param array   $row                  current row\n * @param string  $rownum               row number\n * @param string  $displayed_field_name displayed field name\n * @param string  $type_nowrap          type nowrap\n * @param array   $extracted_columnspec associative array containing type,\n *                                      spec_in_brackets and possibly\n *                                      enum_set_values (another array)\n * @param string  $type_mime            mime type\n * @param string  $field_charset        field charset\n * @param string  $attribute            attribute (BINARY, UNSIGNED,\n *                                      UNSIGNED ZEROFILL,\n *                                      on update CURRENT_TIMESTAMP)\n * @param boolean $tbl_is_view          whether tables is view or not\n * @param boolean $db_is_system_schema  whether db is information schema or not\n * @param string  $url_query            url query\n * @param string  $field_encoded        field encoded\n * @param array   $titles               titles array\n * @param string  $table                table\n *\n * @return array ($html_output, $odd_row)\n */\nfunction PMA_getHtmlTableStructureRow($row, $rownum,\n    $displayed_field_name, $type_nowrap, $extracted_columnspec, $type_mime,\n    $field_charset, $attribute, $tbl_is_view, $db_is_system_schema,\n    $url_query, $field_encoded, $titles, $table\n) {\n    $html_output = '<td class=\"center\">'\n        . '<input type=\"checkbox\" class=\"checkall\" name=\"selected_fld[]\" '\n        . 'value=\"' . htmlspecialchars($row['Field']) . '\" '\n        . 'id=\"checkbox_row_' . $rownum . '\"/>'\n        . '</td>';\n\n    $html_output .= '<td class=\"right\">'\n        . $rownum\n        . '</td>';\n\n    $html_output .= '<th class=\"nowrap\">'\n        . '<label for=\"checkbox_row_' . $rownum . '\">'\n        . $displayed_field_name . '</label>'\n        . '</th>';\n\n    $html_output .= '<td' . $type_nowrap . '>'\n        . '<bdo dir=\"ltr\" lang=\"en\">'\n        . $extracted_columnspec['displayed_type'] . $type_mime\n        . '</bdo></td>';\n\n    $html_output .= '<td>' .\n        (empty($field_charset)\n            ? ''\n            : '<dfn title=\"' . PMA_getCollationDescr($field_charset) . '\">'\n                . $field_charset . '</dfn>'\n        )\n        . '</td>';\n\n    $html_output .= '<td class=\"column_attribute nowrap\">'\n        . $attribute . '</td>';\n    $html_output .= '<td>'\n        . (($row['Null'] == 'YES') ? __('Yes') : __('No')) . '  </td>';\n\n    $html_output .= '<td class=\"nowrap\">';\n    if (isset($row['Default'])) {\n        if ($extracted_columnspec['type'] == 'bit') {\n            // here, $row['Default'] contains something like b'010'\n            $html_output .= PMA_Util::convertBitDefaultValue($row['Default']);\n        } else {\n            $html_output .= $row['Default'];\n        }\n    } else {\n        $html_output .= '<i>' . _pgettext('None for default', 'None') . '</i>';\n    }\n    $html_output .= '</td>';\n\n    $html_output .= '<td class=\"nowrap\">' . strtoupper($row['Extra']) . '</td>';\n\n    $html_output .= PMA_getHtmlForDropColumn(\n        $tbl_is_view, $db_is_system_schema,\n        $url_query, $field_encoded,\n        $titles, $table, $row\n    );\n\n    return $html_output;\n}\n\n/**\n * Get HTML code for \"Drop\" Action link\n *\n * @param boolean $tbl_is_view         whether tables is view or not\n * @param boolean $db_is_system_schema whether db is information schema or not\n * @param string  $url_query           url query\n * @param string  $field_encoded       field encoded\n * @param array   $titles              tittles array\n * @param string  $table               table\n * @param array   $row                 current row\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForDropColumn($tbl_is_view, $db_is_system_schema,\n    $url_query, $field_encoded, $titles, $table, $row\n) {\n    $html_output = '';\n\n    if (! $tbl_is_view && ! $db_is_system_schema) {\n        $html_output .= '<td class=\"edit center\">'\n            . '<a class=\"change_column_anchor ajax\"'\n            . ' href=\"tbl_structure.php?'\n            . $url_query . '&amp;field=' . $field_encoded\n            . '&amp;change_column=1\">'\n            . $titles['Change'] . '</a>' . '</td>';\n        $html_output .= '<td class=\"drop center\">'\n            . '<a class=\"drop_column_anchor ajax\"'\n            . ' href=\"sql.php?' . $url_query . '&amp;sql_query='\n            . urlencode(\n                'ALTER TABLE ' . PMA_Util::backquote($table)\n                . ' DROP ' . PMA_Util::backquote($row['Field']) . ';'\n            )\n            . '&amp;dropped_column=' . urlencode($row['Field'])\n            . '&amp;message_to_show=' . urlencode(\n                sprintf(\n                    __('Column %s has been dropped.'),\n                    htmlspecialchars($row['Field'])\n                )\n            ) . '\" >'\n            . $titles['Drop'] . '</a>'\n            . '</td>';\n    }\n\n    return $html_output;\n}\n\n/**\n * Get HTML for \"check all\" check box with \"with selected\" actions in table\n * structure\n *\n * @param string  $pmaThemeImage       pma theme image url\n * @param string  $text_dir            test directory\n * @param boolean $tbl_is_view         whether table is view or not\n * @param boolean $db_is_system_schema whether db is information schema or not\n * @param string  $tbl_storage_engine  table storage engine\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForCheckAllTableColumn($pmaThemeImage, $text_dir,\n    $tbl_is_view, $db_is_system_schema, $tbl_storage_engine\n) {\n    $html_output = '<img class=\"selectallarrow\" '\n        . 'src=\"' . $pmaThemeImage . 'arrow_' . $text_dir . '.png\" '\n        . 'width=\"38\" height=\"22\" alt=\"' . __('With selected:') . '\" />';\n\n    $html_output .= '<input type=\"checkbox\" id=\"fieldsForm_checkall\" '\n        . 'class=\"checkall_box\" title=\"' . __('Check All') . '\" />'\n        . '<label for=\"fieldsForm_checkall\">' . __('Check All') . '</label>';\n\n    $html_output .= '<i style=\"margin-left: 2em\">'\n        . __('With selected:') . '</i>';\n\n    $html_output .= PMA_Util::getButtonOrImage(\n        'submit_mult', 'mult_submit', 'submit_mult_browse',\n        __('Browse'), 'b_browse.png', 'browse'\n    );\n\n    if (! $tbl_is_view && ! $db_is_system_schema) {\n        $html_output .= PMA_Util::getButtonOrImage(\n            'submit_mult', 'mult_submit change_columns_anchor ajax',\n            'submit_mult_change', __('Change'), 'b_edit.png', 'change'\n        );\n        $html_output .= PMA_Util::getButtonOrImage(\n            'submit_mult', 'mult_submit', 'submit_mult_drop',\n            __('Drop'), 'b_drop.png', 'drop'\n        );\n        if ('ARCHIVE' != $tbl_storage_engine) {\n            $html_output .= PMA_Util::getButtonOrImage(\n                'submit_mult', 'mult_submit', 'submit_mult_primary',\n                __('Primary'), 'b_primary.png', 'primary'\n            );\n            $html_output .= PMA_Util::getButtonOrImage(\n                'submit_mult', 'mult_submit', 'submit_mult_unique',\n                __('Unique'), 'b_unique.png', 'unique'\n            );\n            $html_output .= PMA_Util::getButtonOrImage(\n                'submit_mult', 'mult_submit', 'submit_mult_index',\n                __('Index'), 'b_index.png', 'index'\n            );\n        }\n\n        if (! empty($tbl_storage_engine) && $tbl_storage_engine == 'MYISAM') {\n            $html_output .= PMA_Util::getButtonOrImage(\n                'submit_mult', 'mult_submit', 'submit_mult_spatial',\n                __('Spatial'), 'b_spatial.png', 'spatial'\n            );\n        }\n        if (! empty($tbl_storage_engine)\n            && ($tbl_storage_engine == 'MYISAM'\n            || $tbl_storage_engine == 'ARIA'\n            || $tbl_storage_engine == 'MARIA')\n        ) {\n            $html_output .= PMA_Util::getButtonOrImage(\n                'submit_mult', 'mult_submit', 'submit_mult_fulltext',\n                __('Fulltext'), 'b_ftext.png', 'ftext'\n            );\n        }\n    }\n    return $html_output;\n}\n\n/**\n * Get HTML for move columns dialog\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlDivForMoveColumnsDialog()\n{\n    $html_output = '<div id=\"move_columns_dialog\" '\n        . 'title=\"' . __('Move columns') . '\" style=\"display: none\">';\n\n    $html_output .= '<p>'\n        . __('Move the columns by dragging them up and down.') . '</p>';\n\n    $html_output .= '<form action=\"tbl_structure.php\">'\n        . '<div>'\n        . PMA_URL_getHiddenInputs($GLOBALS['db'], $GLOBALS['table'])\n        . '<ul></ul>'\n        . '</div>'\n        . '</form>'\n        . '</div>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML for edit views'\n *\n * @param string $url_params URL parameters\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForEditView($url_params)\n{\n    $query = \"SELECT `VIEW_DEFINITION`, `CHECK_OPTION`, `DEFINER`, `SECURITY_TYPE`\"\n        . \" FROM `INFORMATION_SCHEMA`.`VIEWS`\"\n        . \" WHERE TABLE_SCHEMA='\" . PMA_Util::sqlAddSlashes($GLOBALS['db']) . \"'\"\n        . \" AND TABLE_NAME='\" . PMA_Util::sqlAddSlashes($GLOBALS['table']) . \"';\";\n    $item = $GLOBALS['dbi']->fetchSingleRow($query);\n\n    $view = array(\n        'operation' => 'alter',\n        'definer' => $item['DEFINER'],\n        'sql_security' => $item['SECURITY_TYPE'],\n        'name' => $GLOBALS['table'],\n        'as' => $item['VIEW_DEFINITION'],\n        'with' => $item['CHECK_OPTION'],\n    );\n    $url  = 'view_create.php' . PMA_URL_getCommon($url_params) . '&amp;';\n    $url .= implode(\n        '&amp;',\n        array_map(\n            function ($key, $val) {\n                return 'view[' . urlencode($key) . ']=' . urlencode($val);\n            },\n            array_keys($view),\n            $view\n        )\n    );\n    $html_output = PMA_Util::linkOrButton(\n        $url,\n        PMA_Util::getIcon('b_edit.png', __('Edit view'), true)\n    );\n    return $html_output;\n}\n\n/**\n * Get HTML links for 'Print view', 'Relation view', 'Propose table structure',\n * 'Track table' and 'Move columns'\n *\n * @param string  $url_query           url query\n * @param boolean $tbl_is_view         whether table is view or not\n * @param boolean $db_is_system_schema whether db is information schema or not\n * @param string  $tbl_storage_engine  table storage engine\n * @param array   $cfgRelation         current relation parameters\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForOptionalActionLinks($url_query, $tbl_is_view,\n    $db_is_system_schema, $tbl_storage_engine, $cfgRelation\n) {\n    $html_output = '<a href=\"tbl_printview.php?' . $url_query\n        . '\" target=\"print_view\">'\n        . PMA_Util::getIcon('b_print.png', __('Print view'), true)\n        . '</a>';\n\n    if (! $tbl_is_view && ! $db_is_system_schema) {\n        // if internal relations are available, or foreign keys are supported\n        // ($tbl_storage_engine comes from libraries/tbl_info.inc.php\n\n        if ($cfgRelation['relwork']\n            || PMA_Util::isForeignKeySupported($tbl_storage_engine)\n        ) {\n            $html_output .= '<a href=\"tbl_relation.php?' . $url_query . '\">'\n                . PMA_Util::getIcon(\n                    'b_relations.png', __('Relation view'), true\n                )\n                . '</a>';\n        }\n        if (!PMA_DRIZZLE) {\n            $html_output .= '<a href=\"sql.php?' . $url_query\n                . '&amp;session_max_rows=all&amp;sql_query=' . urlencode(\n                    'SELECT * FROM ' . PMA_Util::backquote($GLOBALS['table'])\n                    . ' PROCEDURE ANALYSE()'\n                ) . '\">'\n                . PMA_Util::getIcon(\n                    'b_tblanalyse.png',\n                    __('Propose table structure'),\n                    true\n                )\n                . '</a>';\n            $html_output .= PMA_Util::showMySQLDocu('procedure_analyse') . \"\\n\";\n        }\n        if (PMA_Tracker::isActive()) {\n            $html_output .= '<a href=\"tbl_tracking.php?' . $url_query . '\">'\n                . PMA_Util::getIcon('eye.png', __('Track table'), true)\n                . '</a>';\n        }\n        $html_output .= '<a href=\"#\" id=\"move_columns_anchor\">'\n            . PMA_Util::getIcon('b_move.png', __('Move columns'), true)\n            . '</a>';\n    }\n\n    return $html_output;\n}\n\n/**\n * Get HTML snippet for \"Add column\" feature in structure table\n *\n * @param array $columns_list column list array\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForAddColumn($columns_list)\n{\n    $html_output = '<form method=\"post\" action=\"tbl_addfield.php\" '\n        . 'id=\"addColumns\" name=\"addColumns\" '\n        . 'onsubmit=\"return checkFormElementInRange('\n            . 'this, \\'num_fields\\', \\'' . str_replace(\n                '\\'',\n                '\\\\\\'',\n                __('You have to add at least one column.')\n            ) . '\\', 1)'\n        . '\">';\n\n    $html_output .= PMA_URL_getHiddenInputs(\n        $GLOBALS['db'],\n        $GLOBALS['table']\n    );\n    if (PMA_Util::showIcons('ActionLinksMode')) {\n        $html_output .=PMA_Util::getImage(\n            'b_insrow.png',\n            __('Add column')\n        );\n    }\n    $num_fields = '<input type=\"number\" name=\"num_fields\" '\n        . 'value=\"1\" onfocus=\"this.select()\" '\n        . 'min=\"1\" required />';\n    $html_output .= sprintf(__('Add %s column(s)'), $num_fields);\n\n    // I tried displaying the drop-down inside the label but with Firefox\n    // the drop-down was blinking\n    $column_selector = '<select name=\"after_field\" '\n        . 'onclick=\"this.form.field_where[2].checked=true\" '\n        . 'onchange=\"this.form.field_where[2].checked=true\">';\n\n    foreach ($columns_list as $one_column_name) {\n        $column_selector .= '<option '\n            . 'value=\"' . htmlspecialchars($one_column_name) . '\">'\n            . htmlspecialchars($one_column_name)\n            . '</option>';\n    }\n    $column_selector .= '</select>';\n\n    $choices = array(\n        'last'  => __('At End of Table'),\n        'first' => __('At Beginning of Table'),\n        'after' => sprintf(__('After %s'), '')\n    );\n    $html_output .= PMA_Util::getRadioFields(\n        'field_where', $choices, 'last', false\n    );\n    $html_output .= $column_selector;\n    $html_output .= '<input type=\"submit\" value=\"' . __('Go') . '\" />'\n        . '</form>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML snippet for table rows in the Information ->Space usage table\n *\n * @param boolean $odd_row whether current row is odd or even\n * @param string  $name    type of usage\n * @param string  $value   value of usage\n * @param string  $unit    unit\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForSpaceUsageTableRow($odd_row, $name, $value, $unit)\n{\n    $html_output = '<tr class=\"' . (($odd_row = !$odd_row) ? 'odd' : 'even') . '\">';\n    $html_output .= '<th class=\"name\">' . $name . '</th>';\n    $html_output .= '<td class=\"value\">' . $value . '</td>';\n    $html_output .= '<td class=\"unit\">' . $unit . '</td>';\n    $html_output .= '</tr>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML for Optimize link if overhead in Information fieldset\n *\n * @param string $url_query URL query\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForOptimizeLink($url_query)\n{\n    $html_output = '<tr class=\"tblFooters\">';\n    $html_output .= '<td colspan=\"3\" class=\"center\">';\n    $html_output .= '<a href=\"sql.php?' . $url_query\n        . '&pos=0&amp;sql_query=' . urlencode(\n            'OPTIMIZE TABLE ' . PMA_Util::backquote($GLOBALS['table'])\n        )\n        . '\">'\n        . PMA_Util::getIcon('b_tbloptimize.png', __('Optimize table'))\n        . '</a>';\n    $html_output .= '</td>';\n    $html_output .= '</tr>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML for 'Row statistics' table row\n *\n * @param boolean $odd_row whether current row is odd or even\n * @param string  $name    statement name\n * @param mixed   $value   value\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForRowStatsTableRow($odd_row, $name, $value)\n{\n    $html_output = '<tr class=\"' . (($odd_row = !$odd_row) ? 'odd' : 'even') . '\">';\n    $html_output .= '<th class=\"name\">' . $name . '</th>';\n    $html_output .= '<td class=\"value\">' . $value . '</td>';\n    $html_output .= '</tr>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML snippet for display Row statistics table\n *\n * @param array   $showtable     show table array\n * @param string  $tbl_collation table collation\n * @param boolean $is_innodb     whether table is innob or not\n * @param boolean $mergetable    Checks if current table is a merge table\n * @param integer $avg_size      average size\n * @param string  $avg_unit      average unit\n *\n * @return string $html_output\n */\nfunction getHtmlForRowStatsTable($showtable, $tbl_collation,\n    $is_innodb, $mergetable, $avg_size, $avg_unit\n) {\n    $odd_row = false;\n    $html_output = '<table id=\"tablerowstats\" class=\"data\">';\n    $html_output .= '<caption class=\"tblHeaders\">'\n        . __('Row statistics') . '</caption>';\n    $html_output .= '<tbody>';\n\n    if (isset($showtable['Row_format'])) {\n        if ($showtable['Row_format'] == 'Fixed') {\n            $value = __('static');\n        } elseif ($showtable['Row_format'] == 'Dynamic') {\n            $value = __('dynamic');\n        } else {\n            $value = $showtable['Row_format'];\n        }\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row, __('Format'), $value\n        );\n        $odd_row = !$odd_row;\n    }\n    if (! empty($showtable['Create_options'])) {\n        if ($showtable['Create_options'] == 'partitioned') {\n            $value = __('partitioned');\n        } else {\n            $value = $showtable['Create_options'];\n        }\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row, __('Options'), $value\n        );\n        $odd_row = !$odd_row;\n    }\n    if (!empty($tbl_collation)) {\n        $value = '<dfn title=\"' . PMA_getCollationDescr($tbl_collation) . '\">'\n            . $tbl_collation . '</dfn>';\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row, __('Collation'), $value\n        );\n        $odd_row = !$odd_row;\n    }\n    if (!$is_innodb && isset($showtable['Rows'])) {\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row,\n            __('Rows'),\n            PMA_Util::formatNumber($showtable['Rows'], 0)\n        );\n        $odd_row = !$odd_row;\n    }\n    if (!$is_innodb\n        && isset($showtable['Avg_row_length'])\n        && $showtable['Avg_row_length'] > 0\n    ) {\n        list($avg_row_length_value, $avg_row_length_unit)\n            = PMA_Util::formatByteDown(\n                $showtable['Avg_row_length'],\n                6,\n                1\n            );\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row,\n            __('Row length'),\n            ($avg_row_length_value . ' ' . $avg_row_length_unit)\n        );\n        unset($avg_row_length_value, $avg_row_length_unit);\n        $odd_row = !$odd_row;\n    }\n    if (!$is_innodb\n        && isset($showtable['Data_length'])\n        && $showtable['Rows'] > 0\n        && $mergetable == false\n    ) {\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row,\n            __('Row size'),\n            ($avg_size . ' ' . $avg_unit)\n        );\n        $odd_row = !$odd_row;\n    }\n    if (isset($showtable['Auto_increment'])) {\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row,\n            __('Next autoindex'),\n            PMA_Util::formatNumber($showtable['Auto_increment'], 0)\n        );\n        $odd_row = !$odd_row;\n    }\n    if (isset($showtable['Create_time'])) {\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row,\n            __('Creation'),\n            PMA_Util::localisedDate(strtotime($showtable['Create_time']))\n        );\n        $odd_row = !$odd_row;\n    }\n    if (isset($showtable['Update_time'])) {\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row,\n            __('Last update'),\n            PMA_Util::localisedDate(strtotime($showtable['Update_time']))\n        );\n        $odd_row = !$odd_row;\n    }\n    if (isset($showtable['Check_time'])) {\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row,\n            __('Last check'),\n            PMA_Util::localisedDate(strtotime($showtable['Check_time']))\n        );\n    }\n    $html_output .= '</tbody>'\n    . '</table>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML snippet for action row in structure table,\n * This function returns common HTML <td> for Primary, Unique, Index,\n * Spatial actions\n *\n * @param array   $type               column type\n * @param array   $tbl_storage_engine table storage engine\n * @param string  $class              class attribute for <td>\n * @param boolean $hasField           has field\n * @param boolean $hasLinkClass       has <a> the class attribute\n * @param string  $url_query          url query\n * @param boolean $primary            primary if set, false otherwise\n * @param string  $syntax             Sql syntax\n * @param string  $message            message to show\n * @param string  $action             action\n * @param array   $titles             titles array\n * @param array   $row                current row\n * @param boolean $isPrimary          is primary action\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForActionRowInStructureTable($type, $tbl_storage_engine,\n    $class, $hasField, $hasLinkClass, $url_query, $primary, $syntax,\n    $message, $action, $titles, $row, $isPrimary\n) {\n    $html_output = '<li class=\"' . $class . '\">';\n\n    if ($type == 'text'\n        || $type == 'blob'\n        || 'ARCHIVE' == $tbl_storage_engine\n        || $hasField\n    ) {\n        $html_output .= $titles['No' . $action];\n    } else {\n        $html_output .= '<a rel=\"samepage\" '\n            . ($hasLinkClass ? 'class=\"ajax add_primary_key_anchor\" ' :\n               ($action=='Index' ? 'class=\"ajax add_index_anchor\"' :\n                ($action=='Unique' ? 'class=\"ajax add_unique_anchor\"' : ' ')\n               )\n              )\n            . ' href=\"sql.php?' . $url_query . '&amp;sql_query='\n            . urlencode(\n                'ALTER TABLE ' . PMA_Util::backquote($GLOBALS['table'])\n                . ($isPrimary ? ($primary ? ' DROP PRIMARY KEY,' : '') : '')\n                . ' ' . $syntax . '('\n                . PMA_Util::backquote($row['Field']) . ');'\n            )\n            . '&amp;message_to_show=' . urlencode(\n                sprintf(\n                    $message,\n                    htmlspecialchars($row['Field'])\n                )\n            ) . '\" >'\n            . $titles[$action] . '</a>';\n    }\n    $html_output .= '</li>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML for fulltext action\n *\n * @param string $tbl_storage_engine table storage engine\n * @param string $type               column type\n * @param string $url_query          url query\n * @param array  $row                current row\n * @param array  $titles             titles array\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForFullTextAction($tbl_storage_engine, $type, $url_query,\n    $row, $titles\n) {\n    $html_output = '<li class=\"fulltext nowrap\">';\n    if (! empty($tbl_storage_engine)\n        && ($tbl_storage_engine == 'MYISAM'\n        || $tbl_storage_engine == 'ARIA'\n        || $tbl_storage_engine == 'MARIA'\n        || ($tbl_storage_engine == 'INNODB' && PMA_MYSQL_INT_VERSION >= 50604))\n        && (strpos($type, 'text') !== false || strpos($type, 'char') !== false)\n    ) {\n        $html_output .= '<a rel=\"samepage\" href=\"sql.php?' . $url_query\n            . '&amp;sql_query='\n            . urlencode(\n                'ALTER TABLE ' . PMA_Util::backquote($GLOBALS['table'])\n                . ' ADD FULLTEXT(' . PMA_Util::backquote($row['Field'])\n                . ');'\n            )\n            . '&amp;message_to_show='\n            . urlencode(\n                sprintf(\n                    __('An index has been added on %s.'),\n                    htmlspecialchars($row['Field'])\n                )\n            )\n            . '\">';\n        $html_output .= $titles['IdxFulltext'] . '</a>';\n    } else {\n        $html_output .= $titles['NoIdxFulltext'];\n    }\n    $html_output .= '</li>';\n    return $html_output;\n}\n\n/**\n * Get HTML snippet for \"Distinc Value\" action\n *\n * @param string $url_query url query\n * @param array  $row       current row\n * @param array  $titles    titles array\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForDistinctValueAction($url_query, $row, $titles)\n{\n    $html_output = '<li class=\"browse nowrap\">';\n    $html_output .= '<a href=\"sql.php?' . $url_query . '&amp;sql_query='\n        . urlencode(\n            'SELECT COUNT(*) AS ' . PMA_Util::backquote(__('Rows'))\n            . ', ' . PMA_Util::backquote($row['Field'])\n            . ' FROM ' . PMA_Util::backquote($GLOBALS['table'])\n            . ' GROUP BY ' . PMA_Util::backquote($row['Field'])\n            . ' ORDER BY ' . PMA_Util::backquote($row['Field'])\n        )\n        . '\">'\n        . $titles['DistinctValues']\n        . '</a>';\n    $html_output .= '</li>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML snippet for Actions in table structure\n *\n * @param string  $type                      column type\n * @param string  $tbl_storage_engine        table storage engine\n * @param boolean $primary                   primary if set, false otherwise\n * @param string  $field_name                column name\n * @param string  $url_query                 url query\n * @param array   $titles                    titles array\n * @param array   $row                       current row\n * @param string  $rownum                    row number\n * @param array   $hidden_titles             hidden titles\n * @param array   $columns_with_unique_index columns with unique index\n *\n * @return string $html_output;\n */\nfunction PMA_getHtmlForActionsInTableStructure($type, $tbl_storage_engine,\n    $primary, $field_name, $url_query, $titles, $row, $rownum, $hidden_titles,\n    $columns_with_unique_index\n) {\n    $html_output = '<td><ul class=\"table-structure-actions resizable-menu\">';\n    $html_output .= PMA_getHtmlForActionRowInStructureTable(\n        $type, $tbl_storage_engine,\n        'primary nowrap',\n        ($primary && $primary->hasColumn($field_name)),\n        true, $url_query, $primary,\n        'ADD PRIMARY KEY',\n        __('A primary key has been added on %s.'),\n        'Primary', $titles, $row, true\n    );\n    $html_output .= PMA_getHtmlForActionRowInStructureTable(\n        $type, $tbl_storage_engine,\n        'add_unique unique nowrap',\n        isset($columns_with_unique_index[$field_name]),\n        false, $url_query, $primary, 'ADD UNIQUE',\n        __('An index has been added on %s.'),\n        'Unique', $titles, $row, false\n    );\n    $html_output .= PMA_getHtmlForActionRowInStructureTable(\n        $type, $tbl_storage_engine,\n        'add_index nowrap', false, false, $url_query,\n        $primary, 'ADD INDEX', __('An index has been added on %s.'),\n        'Index', $titles, $row, false\n    );\n    if (!PMA_DRIZZLE) {\n        $spatial_types = array(\n            'geometry', 'point', 'linestring', 'polygon', 'multipoint',\n            'multilinestring', 'multipolygon', 'geomtrycollection'\n        );\n        $html_output .= PMA_getHtmlForActionRowInStructureTable(\n            $type, $tbl_storage_engine,\n            'spatial nowrap',\n            (! in_array($type, $spatial_types)\n                || 'MYISAM' != $tbl_storage_engine\n            ),\n            false, $url_query, $primary, 'ADD SPATIAL',\n            __('An index has been added on %s.'), 'Spatial',\n            $titles, $row, false\n        );\n\n        // FULLTEXT is possible on TEXT, CHAR and VARCHAR\n        $html_output .= PMA_getHtmlForFullTextAction(\n            $tbl_storage_engine, $type, $url_query, $row, $titles\n        );\n    }\n    $html_output .= PMA_getHtmlForDistinctValueAction($url_query, $row, $titles);\n    $html_output .= '<div class=\"clearfloat\"></div></ul></td>';\n    return $html_output;\n}\n\n/**\n * Get hidden action titles (image and string)\n *\n * @return array $hidden_titles\n */\nfunction PMA_getHiddenTitlesArray()\n{\n    $hidden_titles = array();\n    $hidden_titles['DistinctValues'] = PMA_Util::getIcon(\n        'b_browse.png', __('Distinct values'), true\n    );\n    $hidden_titles['Primary'] = PMA_Util::getIcon(\n        'b_primary.png', __('Add primary key'), true\n    );\n    $hidden_titles['NoPrimary'] = PMA_Util::getIcon(\n        'bd_primary.png', __('Add primary key'), true\n    );\n    $hidden_titles['Index'] = PMA_Util::getIcon(\n        'b_index.png', __('Add index'), true\n    );\n    $hidden_titles['NoIndex'] = PMA_Util::getIcon(\n        'bd_index.png', __('Add index'), true\n    );\n    $hidden_titles['Unique'] = PMA_Util::getIcon(\n        'b_unique.png', __('Add unique index'), true\n    );\n    $hidden_titles['NoUnique'] = PMA_Util::getIcon(\n        'bd_unique.png', __('Add unique index'), true\n    );\n    $hidden_titles['Spatial'] = PMA_Util::getIcon(\n        'b_spatial.png', __('Add SPATIAL index'), true\n    );\n    $hidden_titles['NoSpatial'] = PMA_Util::getIcon(\n        'bd_spatial.png', __('Add SPATIAL index'), true\n    );\n    $hidden_titles['IdxFulltext'] = PMA_Util::getIcon(\n        'b_ftext.png', __('Add FULLTEXT index'), true\n    );\n    $hidden_titles['NoIdxFulltext'] = PMA_Util::getIcon(\n        'bd_ftext.png', __('Add FULLTEXT index'), true\n    );\n\n    return $hidden_titles;\n}\n\n/**\n * Get action titles (image or string array\n *\n * @return array  $titles\n */\nfunction PMA_getActionTitlesArray()\n{\n    $titles = array();\n    $titles['Change']\n        = PMA_Util::getIcon('b_edit.png', __('Change'));\n    $titles['Drop']\n        = PMA_Util::getIcon('b_drop.png', __('Drop'));\n    $titles['NoDrop']\n        = PMA_Util::getIcon('b_drop.png', __('Drop'));\n    $titles['Primary']\n        = PMA_Util::getIcon('b_primary.png', __('Primary'));\n    $titles['Index']\n        = PMA_Util::getIcon('b_index.png', __('Index'));\n    $titles['Unique']\n        = PMA_Util::getIcon('b_unique.png', __('Unique'));\n    $titles['Spatial']\n        = PMA_Util::getIcon('b_spatial.png', __('Spatial'));\n    $titles['IdxFulltext']\n        = PMA_Util::getIcon('b_ftext.png', __('Fulltext'));\n    $titles['NoPrimary']\n        = PMA_Util::getIcon('bd_primary.png', __('Primary'));\n    $titles['NoIndex']\n        = PMA_Util::getIcon('bd_index.png', __('Index'));\n    $titles['NoUnique']\n        = PMA_Util::getIcon('bd_unique.png', __('Unique'));\n    $titles['NoSpatial']\n        = PMA_Util::getIcon('bd_spatial.png', __('Spatial'));\n    $titles['NoIdxFulltext']\n        = PMA_Util::getIcon('bd_ftext.png', __('Fulltext'));\n    $titles['DistinctValues']\n        = PMA_Util::getIcon('b_browse.png', __('Distinct values'));\n\n    return $titles;\n}\n\n/**\n * Get HTML snippet for display table statistics\n *\n * @param array   $showtable           full table status info\n * @param integer $table_info_num_rows table info number of rows\n * @param boolean $tbl_is_view         whether table is view or not\n * @param boolean $db_is_system_schema whether db is information schema or not\n * @param string  $tbl_storage_engine  table storage engine\n * @param string  $url_query           url query\n * @param string  $tbl_collation       table collation\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForDisplayTableStats($showtable, $table_info_num_rows,\n    $tbl_is_view, $db_is_system_schema, $tbl_storage_engine, $url_query,\n    $tbl_collation\n) {\n    $html_output = '<div id=\"tablestatistics\">';\n    if (empty($showtable)) {\n        $showtable = PMA_Table::sGetStatusInfo(\n            $GLOBALS['db'], $GLOBALS['table'], null, true\n        );\n    }\n\n    $nonisam     = false;\n    $is_innodb = (isset($showtable['Type']) && $showtable['Type'] == 'InnoDB');\n    if (isset($showtable['Type'])\n        && ! preg_match('@ISAM|HEAP@i', $showtable['Type'])\n    ) {\n        $nonisam = true;\n    }\n\n    // Gets some sizes\n\n    $mergetable = PMA_Table::isMerge($GLOBALS['db'], $GLOBALS['table']);\n\n    // this is to display for example 261.2 MiB instead of 268k KiB\n    $max_digits = 3;\n    $decimals = 1;\n    list($data_size, $data_unit) = PMA_Util::formatByteDown(\n        $showtable['Data_length'], $max_digits, $decimals\n    );\n    if ($mergetable == false) {\n        list($index_size, $index_unit) = PMA_Util::formatByteDown(\n            $showtable['Index_length'], $max_digits, $decimals\n        );\n    }\n    // InnoDB returns a huge value in Data_free, do not use it\n    if (! $is_innodb\n        && isset($showtable['Data_free'])\n        && $showtable['Data_free'] > 0\n    ) {\n        list($free_size, $free_unit) = PMA_Util::formatByteDown(\n            $showtable['Data_free'], $max_digits, $decimals\n        );\n        list($effect_size, $effect_unit) = PMA_Util::formatByteDown(\n            $showtable['Data_length'] + $showtable['Index_length']\n            - $showtable['Data_free'],\n            $max_digits, $decimals\n        );\n    } else {\n        list($effect_size, $effect_unit) = PMA_Util::formatByteDown(\n            $showtable['Data_length'] + $showtable['Index_length'],\n            $max_digits, $decimals\n        );\n    }\n    list($tot_size, $tot_unit) = PMA_Util::formatByteDown(\n        $showtable['Data_length'] + $showtable['Index_length'],\n        $max_digits, $decimals\n    );\n    if ($table_info_num_rows > 0) {\n        list($avg_size, $avg_unit) = PMA_Util::formatByteDown(\n            ($showtable['Data_length'] + $showtable['Index_length'])\n            / $showtable['Rows'],\n            6, 1\n        );\n    }\n\n    // Displays them\n    $odd_row = false;\n\n    $html_output .=  '<fieldset>'\n        . '<legend>' . __('Information') . '</legend>'\n        . '<a id=\"showusage\"></a>';\n\n    if (! $tbl_is_view && ! $db_is_system_schema) {\n        $html_output .= '<table id=\"tablespaceusage\" class=\"data\">'\n            . '<caption class=\"tblHeaders\">' . __('Space usage') . '</caption>'\n            . '<tbody>';\n\n        $html_output .= PMA_getHtmlForSpaceUsageTableRow(\n            $odd_row, __('Data'), $data_size, $data_unit\n        );\n        $odd_row = !$odd_row;\n\n        if (isset($index_size)) {\n            $html_output .= PMA_getHtmlForSpaceUsageTableRow(\n                $odd_row, __('Index'), $index_size, $index_unit\n            );\n            $odd_row = !$odd_row;\n        }\n\n        if (isset($free_size)) {\n            $html_output .= PMA_getHtmlForSpaceUsageTableRow(\n                $odd_row, __('Overhead'), $free_size, $free_unit\n            );\n            $html_output .= PMA_getHtmlForSpaceUsageTableRow(\n                $odd_row, __('Effective'), $effect_size, $effect_unit\n            );\n            $odd_row = !$odd_row;\n        }\n        if (isset($tot_size) && $mergetable == false) {\n            $html_output .= PMA_getHtmlForSpaceUsageTableRow(\n                $odd_row, __('Total'), $tot_size, $tot_unit\n            );\n            $odd_row = !$odd_row;\n        }\n        // Optimize link if overhead\n        if (isset($free_size) && !PMA_DRIZZLE\n            && ($tbl_storage_engine == 'MYISAM'\n            || $tbl_storage_engine == 'ARIA'\n            || $tbl_storage_engine == 'MARIA'\n            || $tbl_storage_engine == 'BDB')\n        ) {\n            $html_output .= PMA_getHtmlForOptimizeLink($url_query);\n        }\n        $html_output .= '</tbody>'\n            . '</table>';\n    }\n\n    $html_output .= getHtmlForRowStatsTable(\n        $showtable, $tbl_collation,\n        $is_innodb, $mergetable,\n        (isset ($avg_size) ? $avg_size : ''),\n        (isset ($avg_unit) ? $avg_unit : '')\n    );\n\n    $html_output .= '</fieldset>'\n        . '</div>';\n\n    return $html_output;\n}\n\n/**\n * Displays HTML for changing one or more columns\n *\n * @param string $db       database name\n * @param string $table    table name\n * @param array  $selected the selected columns\n * @param string $action   target script to call\n *\n * @return boolean $regenerate true if error occurred\n *\n */\nfunction PMA_displayHtmlForColumnChange($db, $table, $selected, $action)\n{\n    // $selected comes from multi_submits.inc.php\n    if (empty($selected)) {\n        $selected[]   = $_REQUEST['field'];\n        $selected_cnt = 1;\n    } else { // from a multiple submit\n        $selected_cnt = count($selected);\n    }\n\n    /**\n     * @todo optimize in case of multiple fields to modify\n     */\n    $fields_meta = array();\n    for ($i = 0; $i < $selected_cnt; $i++) {\n        $fields_meta[] = $GLOBALS['dbi']->getColumns(\n            $db, $table, $selected[$i], true\n        );\n    }\n    $num_fields  = count($fields_meta);\n    // set these globals because tbl_columns_definition_form.inc.php\n    // verifies them\n    // @todo: refactor tbl_columns_definition_form.inc.php so that it uses\n    // function params\n    $GLOBALS['action'] = 'tbl_structure.php';\n    $GLOBALS['num_fields'] = $num_fields;\n\n    // Get more complete field information.\n    // For now, this is done to obtain MySQL 4.1.2+ new TIMESTAMP options\n    // and to know when there is an empty DEFAULT value.\n    // Later, if the analyser returns more information, it\n    // could be executed to replace the info given by SHOW FULL COLUMNS FROM.\n    /**\n     * @todo put this code into a require()\n     * or maybe make it part of $GLOBALS['dbi']->getColumns();\n     */\n\n    // We also need this to correctly learn if a TIMESTAMP is NOT NULL, since\n    // SHOW FULL COLUMNS says NULL and SHOW CREATE TABLE says NOT NULL (tested\n    // in MySQL 4.0.25).\n\n    $show_create_table = $GLOBALS['dbi']->fetchValue(\n        'SHOW CREATE TABLE ' . PMA_Util::backquote($db) . '.'\n        . PMA_Util::backquote($table),\n        0, 1\n    );\n    $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));\n    unset($show_create_table);\n    /**\n     * Form for changing properties.\n     */\n    include 'libraries/tbl_columns_definition_form.inc.php';\n}\n\n/**\n * Verifies if some elements of a column have changed\n *\n * @param integer $i column index in the request\n *\n * @return boolean $alterTableNeeded true if we need to generate ALTER TABLE\n *\n */\nfunction PMA_columnNeedsAlterTable($i)\n{\n    // these two fields are checkboxes so might not be part of the\n    // request; therefore we define them to avoid notices below\n    if (! isset($_REQUEST['field_null'][$i])) {\n        $_REQUEST['field_null'][$i] = 'NO';\n    }\n    if (! isset($_REQUEST['field_extra'][$i])) {\n        $_REQUEST['field_extra'][$i] = '';\n    }\n\n    // field_name does not follow the convention (corresponds to field_orig)\n    if ($_REQUEST['field_attribute'][$i] != $_REQUEST['field_attribute_orig'][$i]\n        || $_REQUEST['field_collation'][$i] != $_REQUEST['field_collation_orig'][$i]\n        || $_REQUEST['field_comments'][$i] != $_REQUEST['field_comments_orig'][$i]\n        || $_REQUEST['field_default_value'][$i] != $_REQUEST['field_default_value_orig'][$i]\n        || $_REQUEST['field_default_type'][$i] != $_REQUEST['field_default_type_orig'][$i]\n        || $_REQUEST['field_extra'][$i] != $_REQUEST['field_extra_orig'][$i]\n        || $_REQUEST['field_length'][$i] != $_REQUEST['field_length_orig'][$i]\n        || $_REQUEST['field_name'][$i] != $_REQUEST['field_orig'][$i]\n        || $_REQUEST['field_null'][$i] != $_REQUEST['field_null_orig'][$i]\n        || $_REQUEST['field_type'][$i] != $_REQUEST['field_type_orig'][$i]\n        || ! empty($_REQUEST['field_move_to'][$i])\n) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Update the table's structure based on $_REQUEST\n *\n * @param string $db    database name\n * @param string $table table name\n *\n * @return boolean $regenerate              true if error occurred\n *\n */\nfunction PMA_updateColumns($db, $table)\n{\n    $err_url = 'tbl_structure.php?' . PMA_URL_getCommon($db, $table);\n    $regenerate = false;\n    $field_cnt = count($_REQUEST['field_name']);\n    $key_fields = array();\n    $changes = array();\n\n    for ($i = 0; $i < $field_cnt; $i++) {\n        if (PMA_columnNeedsAlterTable($i)) {\n            $changes[] = 'CHANGE ' . PMA_Table::generateAlter(\n                isset($_REQUEST['field_orig'][$i])\n                ? $_REQUEST['field_orig'][$i]\n                : '',\n                $_REQUEST['field_name'][$i],\n                $_REQUEST['field_type'][$i],\n                $_REQUEST['field_length'][$i],\n                $_REQUEST['field_attribute'][$i],\n                isset($_REQUEST['field_collation'][$i])\n                ? $_REQUEST['field_collation'][$i]\n                : '',\n                isset($_REQUEST['field_null'][$i])\n                ? $_REQUEST['field_null'][$i]\n                : 'NOT NULL',\n                $_REQUEST['field_default_type'][$i],\n                $_REQUEST['field_default_value'][$i],\n                isset($_REQUEST['field_extra'][$i])\n                ? $_REQUEST['field_extra'][$i]\n                : false,\n                isset($_REQUEST['field_comments'][$i])\n                ? $_REQUEST['field_comments'][$i]\n                : '',\n                $key_fields,\n                $i,\n                isset($_REQUEST['field_move_to'][$i])\n                ? $_REQUEST['field_move_to'][$i]\n                : ''\n            );\n        }\n    } // end for\n\n    $response = PMA_Response::getInstance();\n\n    if (count($changes) > 0) {\n        // Builds the primary keys statements and updates the table\n        $key_query = '';\n        /**\n         * this is a little bit more complex\n         *\n         * @todo if someone selects A_I when altering a column we need to check:\n         *  - no other column with A_I\n         *  - the column has an index, if not create one\n         *\n         */\n\n        // To allow replication, we first select the db to use\n        // and then run queries on this db.\n        if (! $GLOBALS['dbi']->selectDb($db)) {\n            PMA_Util::mysqlDie(\n                $GLOBALS['dbi']->getError(),\n                'USE ' . PMA_Util::backquote($db) . ';',\n                '',\n                $err_url\n            );\n        }\n        $sql_query = 'ALTER TABLE ' . PMA_Util::backquote($table) . ' ';\n        $sql_query .= implode(', ', $changes) . $key_query;\n        $sql_query .= ';';\n        $result    = $GLOBALS['dbi']->tryQuery($sql_query);\n\n        if ($result !== false) {\n            $message = PMA_Message::success(\n                __('Table %1$s has been altered successfully.')\n            );\n            $message->addParam($table);\n\n            $response->addHTML(\n                PMA_Util::getMessage($message, $sql_query, 'success')\n            );\n        } else {\n            // An error happened while inserting/updating a table definition\n            $response->isSuccess(false);\n            $response->addJSON(\n                'message',\n                PMA_Message::rawError(__('Query error') . ':<br />'.$GLOBALS['dbi']->getError())\n            );\n            $regenerate = true;\n        }\n    }\n\n    include_once 'libraries/transformations.lib.php';\n\n    // update field names in relation\n    if (isset($_REQUEST['field_orig']) && is_array($_REQUEST['field_orig'])) {\n        foreach ($_REQUEST['field_orig'] as $fieldindex => $fieldcontent) {\n            if ($_REQUEST['field_name'][$fieldindex] != $fieldcontent) {\n                PMA_REL_renameField(\n                    $db, $table, $fieldcontent,\n                    $_REQUEST['field_name'][$fieldindex]\n                );\n            }\n        }\n    }\n\n    // update mime types\n    if (isset($_REQUEST['field_mimetype'])\n        && is_array($_REQUEST['field_mimetype'])\n        && $GLOBALS['cfg']['BrowseMIME']\n    ) {\n        foreach ($_REQUEST['field_mimetype'] as $fieldindex => $mimetype) {\n            if (isset($_REQUEST['field_name'][$fieldindex])\n                && strlen($_REQUEST['field_name'][$fieldindex])\n            ) {\n                PMA_setMIME(\n                    $db, $table, $_REQUEST['field_name'][$fieldindex],\n                    $mimetype,\n                    $_REQUEST['field_transformation'][$fieldindex],\n                    $_REQUEST['field_transformation_options'][$fieldindex]\n                );\n            }\n        }\n    }\n    return $regenerate;\n}\n\n/**\n * Moves columns in the table's structure based on $_REQUEST\n *\n * @param string $db    database name\n * @param string $table table name\n *\n * @return void\n */\nfunction PMA_moveColumns($db, $table)\n{\n    $GLOBALS['dbi']->selectDb($db);\n\n    /*\n     * load the definitions for all columns\n     */\n    $columns = $GLOBALS['dbi']->getColumnsFull($db, $table);\n    $column_names = array_keys($columns);\n    $changes = array();\n    $we_dont_change_keys = array();\n\n    // move columns from first to last\n    for ($i = 0, $l = count($_REQUEST['move_columns']); $i < $l; $i++) {\n        $column = $_REQUEST['move_columns'][$i];\n        // is this column already correctly placed?\n        if ($column_names[$i] == $column) {\n            continue;\n        }\n\n        // it is not, let's move it to index $i\n        $data = $columns[$column];\n        $extracted_columnspec = PMA_Util::extractColumnSpec($data['Type']);\n        if (isset($data['Extra'])\n            && $data['Extra'] == 'on update CURRENT_TIMESTAMP'\n        ) {\n            $extracted_columnspec['attribute'] = $data['Extra'];\n            unset($data['Extra']);\n        }\n        $current_timestamp = false;\n        if (($data['Type'] == 'timestamp' || $data['Type'] == 'datetime')\n            && $data['Default'] == 'CURRENT_TIMESTAMP'\n        ) {\n            $current_timestamp = true;\n        }\n        $default_type\n            = $data['Null'] === 'YES' && $data['Default'] === null\n                ? 'NULL'\n                : ($current_timestamp\n                    ? 'CURRENT_TIMESTAMP'\n                    : ($data['Default'] === null\n                        ? 'NONE'\n                        : 'USER_DEFINED'));\n\n        $changes[] = 'CHANGE ' . PMA_Table::generateAlter(\n            $column,\n            $column,\n            strtoupper($extracted_columnspec['type']),\n            $extracted_columnspec['spec_in_brackets'],\n            $extracted_columnspec['attribute'],\n            isset($data['Collation']) ? $data['Collation'] : '',\n            $data['Null'] === 'YES' ? 'NULL' : 'NOT NULL',\n            $default_type,\n            $current_timestamp ? '' : $data['Default'],\n            isset($data['Extra']) && $data['Extra'] !== '' ? $data['Extra'] : false,\n            isset($data['COLUMN_COMMENT']) && $data['COLUMN_COMMENT'] !== ''\n            ? $data['COLUMN_COMMENT'] : false,\n            $we_dont_change_keys,\n            $i,\n            $i === 0 ? '-first' : $column_names[$i - 1]\n        );\n        // update current column_names array, first delete old position\n        for ($j = 0, $ll = count($column_names); $j < $ll; $j++) {\n            if ($column_names[$j] == $column) {\n                unset($column_names[$j]);\n            }\n        }\n        // insert moved column\n        array_splice($column_names, $i, 0, $column);\n    }\n    $response = PMA_Response::getInstance();\n    if (empty($changes)) { // should never happen\n        $response->isSuccess(false);\n        exit;\n    }\n    $move_query = 'ALTER TABLE ' . PMA_Util::backquote($table) . ' ';\n    $move_query .= implode(', ', $changes);\n    // move columns\n    $GLOBALS['dbi']->tryQuery($move_query);\n    $tmp_error = $GLOBALS['dbi']->getError();\n    if ($tmp_error) {\n        $response->isSuccess(false);\n        $response->addJSON('message', PMA_Message::error($tmp_error));\n    } else {\n        $message = PMA_Message::success(\n            __('The columns have been moved successfully.')\n        );\n        $response->addJSON('message', $message);\n        $response->addJSON('columns', $column_names);\n    }\n    exit;\n}\n\n/**\n * Get columns with unique index\n *\n * @param string $db    database name\n * @param string $table tablename\n *\n * @return array $columns_with_unique_index  An array of columns with unique index,\n *                                            with $column name as the array key\n */\nfunction PMA_getColumnsWithUniqueIndex($db ,$table)\n{\n    $columns_with_unique_index = array();\n    foreach (PMA_Index::getFromTable($table, $db) as $index) {\n        if ($index->isUnique() && $index->getChoice() == 'UNIQUE') {\n            $columns = $index->getColumns();\n            foreach ($columns as $column_name => $dummy) {\n                $columns_with_unique_index[$column_name] = 1;\n            }\n        }\n    }\n    return $columns_with_unique_index;\n}\n\n/**\n * Check column names for MySQL reserved words\n *\n * @param string $db    database name\n * @param string $table tablename\n *\n * @return array $messages      array of PMA_Messages\n */\nfunction PMA_getReservedWordColumnNameMessages($db ,$table)\n{\n    $messages = array();\n    if ($GLOBALS['cfg']['ReservedWordDisableWarning'] === false) {\n        $pma_table = new PMA_Table($table, $db);\n        $columns = $pma_table->getReservedColumnNames();\n        if (!empty($columns)) {\n            foreach ($columns as $column) {\n                $msg = PMA_message::notice(\n                    __('The column name \\'%s\\' is a MySQL reserved keyword.')\n                );\n                $msg->addParam($column);\n                $messages[] = $msg;\n            }\n        }\n    }\n    return $messages;\n}\n\n/**\n * Function to get the type of command for multiple field handling\n *\n * @return string\n */\nfunction PMA_getMultipleFieldCommandType()\n{\n    $submit_mult = null;\n\n    if (isset($_REQUEST['submit_mult_change_x'])) {\n        $submit_mult = 'change';\n    } elseif (isset($_REQUEST['submit_mult_drop_x'])) {\n        $submit_mult = 'drop';\n    } elseif (isset($_REQUEST['submit_mult_primary_x'])) {\n        $submit_mult = 'primary';\n    } elseif (isset($_REQUEST['submit_mult_index_x'])) {\n        $submit_mult = 'index';\n    } elseif (isset($_REQUEST['submit_mult_unique_x'])) {\n        $submit_mult = 'unique';\n    } elseif (isset($_REQUEST['submit_mult_spatial_x'])) {\n        $submit_mult = 'spatial';\n    } elseif (isset($_REQUEST['submit_mult_fulltext_x'])) {\n        $submit_mult = 'ftext';\n    } elseif (isset($_REQUEST['submit_mult_browse_x'])) {\n        $submit_mult = 'browse';\n    } elseif (isset($_REQUEST['submit_mult'])) {\n        $submit_mult = $_REQUEST['submit_mult'];\n    } elseif (isset($_REQUEST['mult_btn']) && $_REQUEST['mult_btn'] == __('Yes')) {\n        $submit_mult = 'row_delete';\n        if (isset($_REQUEST['selected'])) {\n            $_REQUEST['selected_fld'] = $_REQUEST['selected'];\n        }\n    }\n\n    return $submit_mult;\n}\n\n/**\n * Function to display table browse for selected columns\n *\n * @param string $db            current database\n * @param string $table         current table\n * @param string $goto          goto page url\n * @param string $pmaThemeImage URI of the pma theme image\n *\n * @return void\n */\nfunction PMA_displayTableBrowseForSelectedColumns($db, $table, $goto,\n    $pmaThemeImage\n) {\n    $GLOBALS['active_page'] = 'sql.php';\n    $sql_query = '';\n    foreach ($_REQUEST['selected_fld'] as $sval) {\n        if ($sql_query == '') {\n            $sql_query .= 'SELECT ' . PMA_Util::backquote($sval);\n        } else {\n            $sql_query .=  ', ' . PMA_Util::backquote($sval);\n        }\n    }\n    $sql_query .= ' FROM ' . PMA_Util::backquote($db)\n    . '.' . PMA_Util::backquote($table);\n\n    // Parse and analyze the query\n    include_once 'libraries/parse_analyze.inc.php';\n\n    include_once 'libraries/sql.lib.php';\n\n    PMA_executeQueryAndSendQueryResponse(\n        $analyzed_sql_results, false, $db, $table, null, null, null, false,\n        null, null, null, null, $goto, $pmaThemeImage, null, null,\n        null, $sql_query, null, null\n    );\n}\n\n/**\n * Function to check if a table is already in favorite list.\n *\n * @param string $db            current database\n * @param string $current_table current table\n *\n * @return true|false\n */\nfunction PMA_checkFavoriteTable($db, $current_table)\n{\n    foreach ($_SESSION['tmpval']['favorite_tables'][$GLOBALS['server']] as $key => $value) {\n        if ($value['db'] == $db && $value['table'] == $current_table) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Get HTML for favorite anchor.\n *\n * @param string $db            current database\n * @param string $current_table current table\n * @param string $titles        titles\n *\n * @return $html_output\n */\nfunction PMA_getHtmlForFavoriteAnchor($db, $current_table, $titles)\n{\n    $html_output  = '<a ';\n    $html_output .= 'id=\"' . preg_replace(\n        '/\\s+/', '', $current_table['TABLE_NAME']\n    ) . '_favorite_anchor\" ';\n    $html_output .= 'class=\"ajax favorite_table_anchor';\n\n    // Check if current table is already in favorite list.\n    $already_favorite = PMA_checkFavoriteTable($db, $current_table['TABLE_NAME']);\n    $fav_params = array('db' => $db,\n        'ajax_request' => true,\n        'favorite_table' => $current_table['TABLE_NAME'],\n        (($already_favorite?'remove':'add') . '_favorite') => true);\n    $fav_url = 'db_structure.php' . PMA_URL_getCommon($fav_params);\n    $html_output .= '\" ';\n    $html_output .= 'href=\"' . $fav_url\n        . '\" title=\"' . ($already_favorite ? __(\"Remove from Favorites\")\n        : __(\"Add to Favorites\"))\n        . '\" data-favtargets=\"' . $db . \".\" . $current_table['TABLE_NAME']\n        . '\" >'\n        . (!$already_favorite ? $titles['NoFavorite']\n        : $titles['Favorite']) . '</a>';\n\n    return $html_output;\n}\n?>\n"], "fixing_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Recent and Favorite table list handling\n *\n * @package PhpMyAdmin\n */\n\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\nrequire_once './libraries/Message.class.php';\n\n/**\n * Handles the recently used and favorite tables.\n *\n * @TODO Change the release version in table pma_recent\n * (#recent in documentation)\n *\n * @package PhpMyAdmin\n */\nclass PMA_RecentFavoriteTable\n{\n    /**\n     * Defines the internal PMA table which contains recent/favorite tables.\n     *\n     * @access  private\n     * @var string\n     */\n    private $_pmaTable;\n\n    /**\n     * Reference to session variable containing recently used or favorite tables.\n     *\n     * @access private\n     * @var array\n     */\n    private $_tables;\n\n    /**\n     * Defines type of action, Favorite or Recent table.\n     *\n     * @access private\n     * @var string\n     */\n    private $_tableType;\n\n    /**\n     * PMA_RecentFavoriteTable instances.\n     *\n     * @access private\n     * @var array\n     */\n    private static $_instances = array();\n\n    /**\n     * Creates a new instance of PMA_RecentFavoriteTable\n     *\n     * @access private\n     * @param string $type the table type\n     */\n    private function __construct($type)\n    {\n        $this->_tableType = $type;\n        if (strlen($GLOBALS['cfg']['Server']['pmadb'])\n            && strlen($GLOBALS['cfg']['Server'][$this->_tableType])\n        ) {\n            $this->_pmaTable\n                = PMA_Util::backquote($GLOBALS['cfg']['Server']['pmadb']) . \".\"\n                . PMA_Util::backquote($GLOBALS['cfg']['Server'][$this->_tableType]);\n        }\n        $server_id = $GLOBALS['server'];\n        if (! isset($_SESSION['tmpval'][$this->_tableType . '_tables'][$server_id])) {\n            $_SESSION['tmpval'][$this->_tableType . '_tables'][$server_id]\n                = isset($this->_pmaTable) ? $this->getFromDb() : array();\n        }\n        $this->_tables =& $_SESSION['tmpval'][$this->_tableType . '_tables'][$server_id];\n    }\n\n    /**\n     * Returns class instance.\n     *\n     * @param string $type the table type\n     *\n     * @return PMA_RecentFavoriteTable\n     */\n    public static function getInstance($type)\n    {\n        if (! array_key_exists($type, self::$_instances)) {\n            self::$_instances[$type] = new PMA_RecentFavoriteTable($type);\n        }\n        return self::$_instances[$type];\n    }\n\n    /**\n     * Returns the recent/favorite tables array\n     *\n     * @return array \n     */\n    public function getTables()\n    {\n        return $this->_tables;\n    }\n\n    /**\n     * Returns recently used tables or favorite from phpMyAdmin database.\n     *\n     * @return array\n     */\n    public function getFromDb()\n    {\n        // Read from phpMyAdmin database, if recent tables is not in session\n        $sql_query\n            = \" SELECT `tables` FROM \" . $this->_pmaTable .\n            \" WHERE `username` = '\" . $GLOBALS['cfg']['Server']['user'] . \"'\";\n\n        $return = array();\n        $result = PMA_queryAsControlUser($sql_query, false);\n        if ($result) {\n            $row = $GLOBALS['dbi']->fetchArray($result);\n            if (isset($row[0])) {\n                $return = json_decode($row[0], true);\n            }\n        }\n        return $return;\n    }\n\n    /**\n     * Save recent/favorite tables into phpMyAdmin database.\n     *\n     * @return true|PMA_Message\n     */\n    public function saveToDb()\n    {\n        $username = $GLOBALS['cfg']['Server']['user'];\n        $sql_query\n            = \" REPLACE INTO \" . $this->_pmaTable . \" (`username`, `tables`)\" .\n                \" VALUES ('\" . $username . \"', '\"\n                . PMA_Util::sqlAddSlashes(\n                    json_encode($this->_tables)\n                ) . \"')\";\n\n        $success = $GLOBALS['dbi']->tryQuery($sql_query, $GLOBALS['controllink']);\n\n        if (! $success) {\n            $error_msg = '';\n            switch ($this->_tableType) {\n            case 'recent':\n                $error_msg = __('Could not save recent table!');\n                break;\n\n            case 'favorite':\n                $error_msg = __('Could not save favorite table!');\n                break;\n            }\n            $message = PMA_Message::error($error_msg);\n            $message->addMessage('<br /><br />');\n            $message->addMessage(\n                PMA_Message::rawError(\n                    $GLOBALS['dbi']->getError($GLOBALS['controllink'])\n                )\n            );\n            return $message;\n        }\n        return true;\n    }\n\n    /**\n     * Trim recent.favorite table according to the\n     * NumRecentTables/NumFavoriteTables configuration.\n     *\n     * @return boolean True if trimming occurred\n     */\n    public function trim()\n    {\n        $max = max(\n            $GLOBALS['cfg']['Num' . ucfirst($this->_tableType) . 'Tables'], 0\n        );\n        $trimming_occurred = count($this->_tables) > $max;\n        while (count($this->_tables) > $max) {\n            array_pop($this->_tables);\n        }\n        return $trimming_occurred;\n    }\n\n    /**\n     * Return HTML ul.\n     *\n     * @return string\n     */\n    public function getHtmlList()\n    {\n        // Remove Recent/Favorite tables that don't exist.\n        foreach ($this->_tables as $tbl) {\n            if (! $GLOBALS['dbi']->getColumns($tbl['db'], $tbl['table'])) {\n                $this->remove($tbl['db'], $tbl['table']);\n            }\n        }\n\n        $html = '';\n        if (count($this->_tables)) {\n            if ($this->_tableType == 'recent') {\n                foreach ($this->_tables as $table) {\n                    $html .= '<li class=\"warp_link\">';\n                    $html .= '<a href=\"sql.php?server=' . $GLOBALS['server']\n                          . '&db=' . $table['db']\n                          . '&table=' . $table['table']\n                          . '&token=' . $_SESSION[' PMA_token '] . '\">`'\n                          . htmlspecialchars($table['db']) . '`.`'\n                          . htmlspecialchars($table['table']) . '`</a>';\n                    $html .= '</li>';\n                }\n            } else {\n                foreach ($this->_tables as $table) {\n                    $html .= '<li class=\"warp_link\">';\n\n                    $html .= '<a class=\"ajax favorite_table_anchor\"';\n                    $fav_params = array('db' => $table['db'],\n                        'ajax_request' => true,\n                        'favorite_table' => $table['table'],\n                        'remove_favorite' => true);\n                    $fav_rm_url = 'db_structure.php'\n                        . PMA_URL_getCommon($fav_params);\n                    $html .= 'href=\"' . $fav_rm_url\n                        . '\" title=\"' . __(\"Remove from Favorites\")\n                        . '\" data-favtargetn=\"'\n                        . md5($table['db'] . \".\" . $table['table'])\n                        . '\" >'\n                        . PMA_Util::getIcon('b_favorite.png')\n                        . '</a>';\n\n                    $html .= '<a href=\"sql.php?server=' . $GLOBALS['server']\n                          . '&db=' . $table['db']\n                          . '&table=' . $table['table']\n                          . '&token=' . $_SESSION[' PMA_token '] . '\">`'\n                          . htmlspecialchars($table['db']) . '`.`'\n                          . htmlspecialchars($table['table']) . '`</a>';\n                    $html .= '</li>';\n                }\n            }\n        } else {\n            $html .= '<li class=\"warp_link\">'\n                  . ($this->_tableType == 'recent'\n                    ?__('There are no recent tables.')\n                    :__('There are no favorite tables.'))\n                  . '</li>';\n        }\n        return $html;\n    }\n\n    /**\n     * Return HTML.\n     *\n     * @return string\n     */\n    public function getHtml()\n    {\n        $html  = '<div class=\"drop_list\">';\n        if ($this->_tableType == 'recent') {\n            $html .= '<span title=\"' . __('Recent tables')\n                . '\" class=\"drop_button\">'\n                . __('Recent') . '</span><ul id=\"pma_recent_list\">';\n        } else {\n            $html .= '<span title=\"' . __('Favorite tables')\n                . '\" class=\"drop_button\">'\n                . __('Favorites') . '</span><ul id=\"pma_favorite_list\">';\n        }\n        $html .= $this->getHtmlList();\n        $html .= '</ul></div>';\n        return $html;\n    }\n\n    /**\n     * Add recently used or favorite tables.\n     *\n     * @param string $db    database name where the table is located\n     * @param string $table table name\n     *\n     * @return true|PMA_Message True if success, PMA_Message if not\n     */\n    public function add($db, $table)\n    {\n        // If table doesnot exist, do not add.\n        if (! $GLOBALS['dbi']->getColumns($db, $table)) {\n            return true;\n        }\n\n        $table_arr = array();\n        $table_arr['db'] = $db;\n        $table_arr['table'] = $table;\n\n        // add only if this is new table\n        if (! isset($this->_tables[0]) || $this->_tables[0] != $table_arr) {\n            array_unshift($this->_tables, $table_arr);\n            $this->_tables = array_merge(array_unique($this->_tables, SORT_REGULAR));\n            $this->trim();\n            if (isset($this->_pmaTable)) {\n                return $this->saveToDb();\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Remove favorite tables.\n     *\n     * @param string $db    database name where the table is located\n     * @param string $table table name\n     *\n     * @return true|PMA_Message True if success, PMA_Message if not\n     */\n    public function remove($db, $table)\n    {\n        $table_arr = array();\n        $table_arr['db'] = $db;\n        $table_arr['table'] = $table;\n        foreach ($this->_tables as $key => $value) {\n            if ($value['db'] == $db && $value['table'] == $table) {\n                unset($this->_tables[$key]);\n            }\n        }\n        if (isset($this->_pmaTable)) {\n            return $this->saveToDb();\n        }\n        return true;\n    }\n\n    /**\n     * Generate Html for sync Favorite tables anchor. (from localStorage to pmadb)\n     *\n     * @return string\n     */\n    public function getHtmlSyncFavoriteTables()\n    {\n        $retval = '';\n        $server_id = $GLOBALS['server'];\n        // Not to show this once list is synchronized.\n        $is_synced = isset($_SESSION['tmpval']['favorites_synced'][$server_id]) ?\n            true : false;\n        if (!$is_synced) {\n            $params  = array('ajax_request' => true, 'favorite_table' => true,\n                'sync_favorite_tables' => true);\n            $url     = 'db_structure.php' . PMA_URL_getCommon($params);\n            $retval  = '<a class=\"hide\" id=\"sync_favorite_tables\"';\n            $retval .= ' href=\"' . $url . '\"></a>';\n        }\n        return $retval;\n    }\n}\n?>\n", "<?php\n\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * set of functions for structure section in pma\n *\n * @package PhpMyAdmin\n */\nif (!defined('PHPMYADMIN')) {\n    exit;\n}\n\n/**\n * Get the HTML links for action links\n * Actions are, Browse, Search, Browse table label, empty table\n *\n * @param array   $current_table       current table\n * @param boolean $table_is_view       Is table view or not\n * @param string  $tbl_url_query       table url query\n * @param array   $titles              titles and icons for action links\n * @param string  $truename            table name\n * @param boolean $db_is_system_schema is database information schema or not\n * @param string  $url_query           url query\n *\n * @return array ($browse_table, $search_table, $browse_table_label, $empty_table,\n *                $tracking_icon)\n */\nfunction PMA_getHtmlForActionLinks($current_table, $table_is_view, $tbl_url_query,\n    $titles, $truename, $db_is_system_schema, $url_query\n) {\n    $empty_table = '';\n\n    if ($current_table['TABLE_ROWS'] > 0 || $table_is_view) {\n        $may_have_rows = true;\n    } else {\n        $may_have_rows = false;\n    }\n\n    $browse_table = '<a href=\"sql.php?' . $tbl_url_query . '&amp;pos=0\">';\n    if ($may_have_rows) {\n        $browse_table .= $titles['Browse'];\n    } else {\n        $browse_table .= $titles['NoBrowse'];\n    }\n    $browse_table .= '</a>';\n\n    $search_table = '<a href=\"tbl_select.php?' . $tbl_url_query . '\">';\n    if ($may_have_rows) {\n        $search_table .= $titles['Search'];\n    } else {\n        $search_table .= $titles['NoSearch'];\n    }\n    $search_table .= '</a>';\n\n    $browse_table_label = '<a href=\"sql.php?' . $tbl_url_query\n        . '&amp;pos=0\" title=\"' . $current_table['TABLE_COMMENT'] . '\">'\n        . $truename . '</a>';\n\n    if (!$db_is_system_schema) {\n        $empty_table = '<a class=\"truncate_table_anchor ajax\"';\n        $empty_table .= ' href=\"sql.php?' . $tbl_url_query\n            . '&amp;sql_query=';\n        $empty_table .= urlencode(\n            'TRUNCATE ' . PMA_Util::backquote($current_table['TABLE_NAME'])\n        );\n        $empty_table .= '&amp;message_to_show='\n            . urlencode(\n                sprintf(\n                    __('Table %s has been emptied.'),\n                    htmlspecialchars($current_table['TABLE_NAME'])\n                )\n            )\n            . '\">';\n        if ($may_have_rows) {\n            $empty_table .= $titles['Empty'];\n        } else {\n            $empty_table .= $titles['NoEmpty'];\n        }\n        $empty_table .= '</a>';\n        // truncating views doesn't work\n        if ($table_is_view) {\n            $empty_table = '&nbsp;';\n        }\n    }\n\n    $tracking_icon = '';\n    if (PMA_Tracker::isActive()) {\n        if (PMA_Tracker::isTracked($GLOBALS[\"db\"], $truename)) {\n            $tracking_icon = '<a href=\"tbl_tracking.php?' . $url_query\n                . '&amp;table=' . $truename . '\">'\n                . PMA_Util::getImage(\n                    'eye.png', __('Tracking is active.')\n                )\n                . '</a>';\n        } elseif (PMA_Tracker::getVersion($GLOBALS[\"db\"], $truename) > 0) {\n            $tracking_icon = '<a href=\"tbl_tracking.php?' . $url_query\n                . '&amp;table=' . $truename . '\">'\n                . PMA_Util::getImage(\n                    'eye_grey.png', __('Tracking is not active.')\n                )\n                . '</a>';\n        }\n    }\n\n    return array($browse_table,\n        $search_table,\n        $browse_table_label,\n        $empty_table,\n        $tracking_icon\n    );\n}\n\n/**\n * Get table drop query and drop message\n *\n * @param boolean $table_is_view Is table view or not\n * @param string  $current_table current table\n *\n * @return array    ($drop_query, $drop_message)\n */\nfunction PMA_getTableDropQueryAndMessage($table_is_view, $current_table)\n{\n    $drop_query = 'DROP '\n        . (($table_is_view || $current_table['ENGINE'] == null) ? 'VIEW' : 'TABLE')\n        . ' ' . PMA_Util::backquote(\n            $current_table['TABLE_NAME']\n        );\n    $drop_message = sprintf(\n        (($table_is_view || $current_table['ENGINE'] == null)\n            ? __('View %s has been dropped.')\n            : __('Table %s has been dropped.')),\n        str_replace(\n            ' ',\n            '&nbsp;',\n            htmlspecialchars($current_table['TABLE_NAME'])\n        )\n    );\n    return array($drop_query, $drop_message);\n}\n\n/**\n * Get HTML body for table summery\n *\n * @param integer $num_tables          number of tables\n * @param boolean $server_slave_status server slave state\n * @param boolean $db_is_system_schema whether database is information schema or not\n * @param integer $sum_entries         sum entries\n * @param string  $db_collation        collation of given db\n * @param boolean $is_show_stats       whether stats is show or not\n * @param double  $sum_size            sum size\n * @param double  $overhead_size       overhead size\n * @param string  $create_time_all     create time\n * @param string  $update_time_all     update time\n * @param string  $check_time_all      check time\n * @param integer $sum_row_count_pre   sum row count pre\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlBodyForTableSummary($num_tables, $server_slave_status,\n    $db_is_system_schema, $sum_entries, $db_collation, $is_show_stats,\n    $sum_size, $overhead_size, $create_time_all, $update_time_all,\n    $check_time_all, $sum_row_count_pre\n) {\n    if ($is_show_stats) {\n        list($sum_formatted, $unit) = PMA_Util::formatByteDown(\n            $sum_size, 3, 1\n        );\n        list($overhead_formatted, $overhead_unit)\n            = PMA_Util::formatByteDown($overhead_size, 3, 1);\n    }\n\n    $html_output = '<tbody id=\"tbl_summary_row\">'\n        . '<tr><th></th>';\n    $html_output .= '<th class=\"tbl_num nowrap\">';\n    $html_output .= sprintf(\n        _ngettext('%s table', '%s tables', $num_tables),\n        PMA_Util::formatNumber($num_tables, 0)\n    );\n    $html_output .= '</th>';\n\n    if ($server_slave_status) {\n        $html_output .= '<th>' . __('Replication') . '</th>' . \"\\n\";\n    }\n    $html_output .= '<th colspan=\"' . ($db_is_system_schema ? 4 : 7) . '\">'\n        . __('Sum')\n        . '</th>';\n    $html_output .= '<th class=\"value tbl_rows\">'\n        . $sum_row_count_pre . PMA_Util::formatNumber($sum_entries, 0)\n        . '</th>';\n\n    if (!($GLOBALS['cfg']['PropertiesNumColumns'] > 1)) {\n        $default_engine = $GLOBALS['dbi']->fetchValue(\n            'SHOW VARIABLES LIKE \\'storage_engine\\';',\n            0,\n            1\n        );\n        $html_output .=  '<th class=\"center\">' . \"\\n\"\n            . '<dfn title=\"'\n            . sprintf(\n                __('%s is the default storage engine on this MySQL server.'),\n                $default_engine\n            )\n            . '\">' . $default_engine . '</dfn></th>' . \"\\n\";\n        // we got a case where $db_collation was empty\n        $html_output .= '<th>' . \"\\n\";\n\n        if (! empty($db_collation)) {\n            $html_output .= '<dfn title=\"'\n                . PMA_getCollationDescr($db_collation)\n                . ' (' . __('Default') . ')\">'\n                . $db_collation\n                . '</dfn>';\n        }\n        $html_output .= '</th>';\n    }\n    if ($is_show_stats) {\n        $html_output .= '<th class=\"value tbl_size\">'\n            . $sum_formatted . ' ' . $unit\n            . '</th>';\n        $html_output .= '<th class=\"value tbl_overhead\">'\n            . $overhead_formatted . ' ' . $overhead_unit\n            . '</th>';\n    }\n\n    if ($GLOBALS['cfg']['ShowDbStructureCreation']) {\n        $html_output .= '<th class=\"value tbl_creation\">' . \"\\n\"\n            . '        '\n            . ($create_time_all\n                ? PMA_Util::localisedDate(strtotime($create_time_all))\n                : '-'\n            )\n            . '</th>';\n    }\n\n    if ($GLOBALS['cfg']['ShowDbStructureLastUpdate']) {\n        $html_output .= '<th class=\"value tbl_last_update\">' . \"\\n\"\n            . '        '\n            . ($update_time_all\n                ? PMA_Util::localisedDate(strtotime($update_time_all))\n                : '-'\n            )\n            . '</th>';\n    }\n\n    if ($GLOBALS['cfg']['ShowDbStructureLastCheck']) {\n        $html_output .= '<th class=\"value tbl_last_check\">' . \"\\n\"\n            . '        '\n            . ($check_time_all\n                ? PMA_Util::localisedDate(strtotime($check_time_all))\n                : '-'\n            )\n            . '</th>';\n    }\n    $html_output .= '</tr>'\n        . '</tbody>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML for \"check all\" check box with \"with selected\" dropdown\n *\n * @param string  $pmaThemeImage       pma theme image url\n * @param string  $text_dir            url for text directory\n * @param string  $overhead_check      overhead check\n * @param boolean $db_is_system_schema whether database is information schema or not\n * @param string  $hidden_fields       hidden fields\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForCheckAllTables($pmaThemeImage, $text_dir,\n    $overhead_check, $db_is_system_schema, $hidden_fields\n) {\n    $html_output = '<div class=\"clearfloat\">';\n    $html_output .= '<img class=\"selectallarrow\" '\n        . 'src=\"' . $pmaThemeImage . 'arrow_' . $text_dir . '.png\" '\n        . 'width=\"38\" height=\"22\" alt=\"' . __('With selected:') . '\" />';\n\n    $html_output .= '<input type=\"checkbox\" id=\"tablesForm_checkall\" '\n        . 'class=\"checkall_box\" title=\"' . __('Check All') . '\" />';\n    $html_output .= '<label for=\"tablesForm_checkall\">' . __('Check All')\n        . '</label>';\n\n    if ($overhead_check != '') {\n        $html_output .= PMA_getHtmlForCheckTablesHavingOverheadlink(\n            $overhead_check\n        );\n    }\n\n    $html_output .= '<select name=\"submit_mult\" class=\"autosubmit\" '\n        . 'style=\"margin: 0 3em 0 3em;\">';\n\n    $html_output .= '<option value=\"' . __('With selected:')\n        . '\" selected=\"selected\">'\n        . __('With selected:') . '</option>' . \"\\n\";\n    $html_output .= '<option value=\"export\" >'\n        . __('Export') . '</option>' . \"\\n\";\n    $html_output .= '<option value=\"print\" >'\n        . __('Print view') . '</option>' . \"\\n\";\n\n    if (!$db_is_system_schema\n        && !$GLOBALS['cfg']['DisableMultiTableMaintenance']\n    ) {\n        $html_output .= '<option value=\"empty_tbl\" >'\n            . __('Empty') . '</option>' . \"\\n\";\n        $html_output .= '<option value=\"drop_tbl\" >'\n            . __('Drop') . '</option>' . \"\\n\";\n        $html_output .= '<option value=\"check_tbl\" >'\n            . __('Check table') . '</option>' . \"\\n\";\n        if (!PMA_DRIZZLE) {\n            $html_output .= '<option value=\"optimize_tbl\" >'\n                . __('Optimize table') . '</option>' . \"\\n\";\n            $html_output .= '<option value=\"repair_tbl\" >'\n                . __('Repair table') . '</option>' . \"\\n\";\n        }\n        $html_output .= '<option value=\"analyze_tbl\" >'\n            . __('Analyze table') . '</option>' . \"\\n\";\n        $html_output .= '<option value=\"add_prefix_tbl\" >'\n            . __('Add prefix to table') . '</option>' . \"\\n\";\n        $html_output .= '<option value=\"replace_prefix_tbl\" >'\n            . __('Replace table prefix') . '</option>' . \"\\n\";\n        $html_output .= '<option value=\"copy_tbl_change_prefix\" >'\n            . __('Copy table with prefix') . '</option>' . \"\\n\";\n    }\n    $html_output .= '</select>'\n        . implode(\"\\n\", $hidden_fields) . \"\\n\";\n    $html_output .= '</div>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML code for \"Check tables having overhead\" link\n *\n * @param string $overhead_check overhead check\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForCheckTablesHavingOverheadlink($overhead_check)\n{\n    return ' / '\n        . '<a href=\"#\" onclick=\"unMarkAllRows(\\'tablesForm\\');'\n        . $overhead_check . 'return false;\">'\n        . __('Check tables having overhead')\n        . '</a>';\n}\n\n\n/**\n * Get HTML links for \"Print view\" options\n *\n * @param string $url_query url query\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForTablePrintViewLink($url_query)\n{\n    return '<p>'\n        . '<a href=\"db_printview.php?' . $url_query . '\" target=\"print_view\">'\n        . PMA_Util::getIcon(\n            'b_print.png',\n            __('Print view'),\n            true\n        ) . '</a>';\n}\n\n/**\n * Get HTML links \"Data Dictionary\" options\n *\n * @param string $url_query url query\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForDataDictionaryLink($url_query)\n{\n    return '<a href=\"db_datadict.php?' . $url_query . '\" target=\"print_view\">'\n        . PMA_Util::getIcon(\n            'b_tblanalyse.png',\n            __('Data Dictionary'),\n            true\n        ) . '</a>'\n        . '</p>';\n}\n\n/**\n * Get Time for Create time, update time and check time\n *\n * @param array   $current_table current table\n * @param string  $time_label    Create_time, Update_time, Check_time\n * @param integer $time_all      time\n *\n * @return array ($time, $time_all)\n */\nfunction PMA_getTimeForCreateUpdateCheck($current_table, $time_label, $time_all)\n{\n    $showtable = PMA_Table::sGetStatusInfo(\n        $GLOBALS['db'],\n        $current_table['TABLE_NAME'],\n        null,\n        true\n    );\n    $time = isset($showtable[$time_label])\n        ? $showtable[$time_label]\n        : false;\n\n    // show oldest creation date in summary row\n    if ($time && (!$time_all || $time < $time_all)) {\n        $time_all = $time;\n    }\n    return array($time, $time_all);\n}\n\n/**\n * Get HTML for each table row of the database structure table,\n * And this function returns $odd_row param also\n *\n * @param integer $curr                  current entry\n * @param boolean $odd_row               whether row is odd or not\n * @param boolean $table_is_view         whether table is view or not\n * @param array   $current_table         current table\n * @param string  $browse_table_label    browse table label action link\n * @param string  $tracking_icon         tracking icon\n * @param boolean $server_slave_status   server slave state\n * @param string  $browse_table          browse table action link\n * @param string  $tbl_url_query         table url query\n * @param string  $search_table          search table action link\n * @param boolean $db_is_system_schema   whether db is information schema or not\n * @param array   $titles                titles array\n * @param string  $empty_table           empty table action link\n * @param string  $drop_query            table dropt query\n * @param string  $drop_message          table drop message\n * @param string  $collation             collation\n * @param string  $formatted_size        formatted size\n * @param string  $unit                  unit\n * @param string  $overhead              overhead\n * @param string  $create_time           create time\n * @param string  $update_time           last update time\n * @param string  $check_time            last check time\n * @param boolean $is_show_stats         whether stats is show or not\n * @param boolean $ignored               ignored\n * @param boolean $do                    do\n * @param integer $colspan_for_structure colspan for structure\n *\n * @return array $html_output, $odd_row\n */\nfunction PMA_getHtmlForStructureTableRow(\n    $curr, $odd_row, $table_is_view, $current_table,\n    $browse_table_label, $tracking_icon,$server_slave_status,\n    $browse_table, $tbl_url_query, $search_table,\n    $db_is_system_schema,$titles, $empty_table, $drop_query, $drop_message,\n    $collation, $formatted_size, $unit, $overhead, $create_time, $update_time,\n    $check_time,$is_show_stats, $ignored, $do, $colspan_for_structure\n) {\n    global $db;\n    $html_output = '<tr class=\"' . ($odd_row ? 'odd' : 'even');\n    $odd_row = ! $odd_row;\n    $html_output .= ($table_is_view ? ' is_view' : '')\n        . '\" id=\"row_tbl_' . $curr . '\">';\n\n    $html_output .= '<td class=\"center\">'\n        . '<input type=\"checkbox\" name=\"selected_tbl[]\" class=\"checkall\" '\n        . 'value=\"' . htmlspecialchars($current_table['TABLE_NAME']) . '\" '\n        . 'id=\"checkbox_tbl_' . $curr . '\" /></td>';\n\n    $html_output .= '<th>'\n        . $browse_table_label\n        . (! empty($tracking_icon) ? $tracking_icon : '')\n        . '</th>';\n\n    if ($server_slave_status) {\n        $html_output .= '<td class=\"center\">'\n            . ($ignored\n                ? PMA_Util::getImage('s_cancel.png', 'NOT REPLICATED')\n                : '')\n            . ($do\n                ? PMA_Util::getImage('s_success.png', 'REPLICATED')\n                : '')\n            . '</td>';\n    }\n    //Favorite table anchor.\n    $html_output .= '<td class=\"center\">'\n        . PMA_getHtmlForFavoriteAnchor($db, $current_table, $titles)\n        . '</td>';\n\n    $html_output .= '<td class=\"center\">' . $browse_table . '</td>';\n    $html_output .= '<td class=\"center\">'\n        . '<a href=\"tbl_structure.php?' . $tbl_url_query . '\">'\n        . $titles['Structure'] . '</a></td>';\n    $html_output .= '<td class=\"center\">' . $search_table . '</td>';\n\n    if (! $db_is_system_schema) {\n        $html_output .= PMA_getHtmlForInsertEmptyDropActionLinks(\n            $tbl_url_query, $table_is_view,\n            $titles, $empty_table, $current_table, $drop_query, $drop_message\n        );\n    } // end if (! $db_is_system_schema)\n\n    // there is a null value in the ENGINE\n    // - when the table needs to be repaired, or\n    // - when it's a view\n    //  so ensure that we'll display \"in use\" below for a table\n    //  that needs to be repaired\n    if (isset($current_table['TABLE_ROWS'])\n        && ($current_table['ENGINE'] != null\n        || $table_is_view)\n    ) {\n        $html_output .= PMA_getHtmlForNotNullEngineViewTable(\n            $table_is_view, $current_table, $collation, $is_show_stats,\n            $tbl_url_query, $formatted_size, $unit, $overhead, $create_time,\n            $update_time, $check_time\n        );\n    } elseif ($table_is_view) {\n        $html_output .= PMA_getHtmlForViewTable($is_show_stats);\n    } else {\n        $html_output .= PMA_getHtmlForRepairtable(\n            $colspan_for_structure,\n            $db_is_system_schema\n        );\n    } // end if (isset($current_table['TABLE_ROWS'])) else\n    $html_output .= '</tr>';\n\n    return array($html_output, $odd_row);\n}\n\n/**\n * Get HTML for Insert/Empty/Drop action links\n *\n * @param string  $tbl_url_query table url query\n * @param boolean $table_is_view whether table is view or not\n * @param array   $titles        titles array\n * @param string  $empty_table   HTML link for empty table\n * @param array   $current_table current table\n * @param string  $drop_query    query for drop table\n * @param string  $drop_message  table drop message\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForInsertEmptyDropActionLinks($tbl_url_query, $table_is_view,\n    $titles, $empty_table, $current_table, $drop_query, $drop_message\n) {\n    $html_output = '<td class=\"insert_table center\">'\n        . '<a href=\"tbl_change.php?' . $tbl_url_query . '\">'\n        . $titles['Insert']\n        . '</a></td>';\n    $html_output .= '<td class=\"center\">' . $empty_table . '</td>';\n    $html_output .= '<td class=\"center\">';\n    $html_output .= '<a ';\n    $html_output .= 'class=\"ajax drop_table_anchor';\n    if ($table_is_view || $current_table['ENGINE'] == null) {\n        // this class is used in db_structure.js to display the\n        // correct confirmation message\n        $html_output .= ' view';\n    }\n    $html_output .= '\" ';\n    $html_output .= 'href=\"sql.php?' . $tbl_url_query\n        . '&amp;reload=1&amp;purge=1&amp;sql_query='\n        . urlencode($drop_query) . '&amp;message_to_show='\n        . urlencode($drop_message) . '\" >'\n        . $titles['Drop'] . '</a></td>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML for show stats\n *\n * @param string $tbl_url_query  tabel url query\n * @param string $formatted_size formatted size\n * @param string $unit           unit\n * @param string $overhead       overhead\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForShowStats($tbl_url_query, $formatted_size,\n    $unit, $overhead\n) {\n     $html_output = '<td class=\"value tbl_size\"><a '\n        . 'href=\"tbl_structure.php?' . $tbl_url_query . '#showusage\" >'\n        . '<span>' . $formatted_size . '</span> '\n        . '<span class=\"unit\">' . $unit . '</span>'\n        . '</a></td>';\n    $html_output .= '<td class=\"value tbl_overhead\">' . $overhead . '</td>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML to show database structure creation, last update and last checkx time\n *\n * @param string $create_time create time\n * @param string $update_time last update time\n * @param string $check_time  last check time\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForStructureTimes($create_time, $update_time, $check_time)\n{\n    $html_output = '';\n    if ($GLOBALS['cfg']['ShowDbStructureCreation']) {\n        $html_output .= '<td class=\"value tbl_creation\">'\n            . ($create_time\n                ? PMA_Util::localisedDate(strtotime($create_time))\n                : '-' )\n            . '</td>';\n    } // end if\n    if ($GLOBALS['cfg']['ShowDbStructureLastUpdate']) {\n        $html_output .= '<td class=\"value tbl_last_update\">'\n            . ($update_time\n                ? PMA_Util::localisedDate(strtotime($update_time))\n                : '-' )\n            . '</td>';\n    } // end if\n    if ($GLOBALS['cfg']['ShowDbStructureLastCheck']) {\n        $html_output .= '<td class=\"value tbl_last_check\">'\n            . ($check_time\n                ? PMA_Util::localisedDate(strtotime($check_time))\n                : '-' )\n            . '</td>';\n    }\n    return $html_output;\n}\n\n/**\n * Get HTML for ENGINE value not null or view tables that are not empty tables\n *\n * @param boolean $table_is_view  whether table is view\n * @param array   $current_table  current table\n * @param string  $collation      collation\n * @param boolean $is_show_stats  whether atats show or not\n * @param string  $tbl_url_query  table url query\n * @param string  $formatted_size formatted size\n * @param string  $unit           unit\n * @param string  $overhead       overhead\n * @param string  $create_time    create time\n * @param string  $update_time    update time\n * @param string  $check_time     check time\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForNotNullEngineViewTable($table_is_view, $current_table,\n    $collation, $is_show_stats, $tbl_url_query, $formatted_size, $unit,\n    $overhead, $create_time, $update_time, $check_time\n) {\n    $html_output = '';\n    $row_count_pre = '';\n    $show_superscript = '';\n    if ($table_is_view) {\n        // Drizzle views use FunctionEngine, and the only place where they are\n        // available are I_S and D_D schemas, where we do exact counting\n        if ($current_table['TABLE_ROWS'] >= $GLOBALS['cfg']['MaxExactCountViews']\n            && $current_table['ENGINE'] != 'FunctionEngine'\n        ) {\n            $row_count_pre = '~';\n            $sum_row_count_pre = '~';\n            $show_superscript = PMA_Util::showHint(\n                PMA_sanitize(\n                    sprintf(\n                        __('This view has at least this number of rows. Please refer to %sdocumentation%s.'),\n                        '[doc@cfg_MaxExactCountViews]',\n                        '[/doc]'\n                    )\n                )\n            );\n        }\n    } elseif ($current_table['ENGINE'] == 'InnoDB'\n        && (! $current_table['COUNTED'])\n    ) {\n        // InnoDB table: we did not get an accurate row count\n        $row_count_pre = '~';\n        $sum_row_count_pre = '~';\n        $show_superscript = '';\n    }\n\n    $html_output .= '<td class=\"value tbl_rows\">'\n        . $row_count_pre . PMA_Util::formatNumber(\n            $current_table['TABLE_ROWS'], 0\n        )\n        . $show_superscript . '</td>';\n\n    if (!($GLOBALS['cfg']['PropertiesNumColumns'] > 1)) {\n        $html_output .= '<td class=\"nowrap\">'\n            . ($table_is_view ? __('View') : $current_table['ENGINE'])\n            . '</td>';\n        if (strlen($collation)) {\n            $html_output .= '<td class=\"nowrap\">' . $collation . '</td>';\n        }\n    }\n\n    if ($is_show_stats) {\n        $html_output .= PMA_getHtmlForShowStats(\n            $tbl_url_query, $formatted_size, $unit, $overhead\n        );\n    }\n\n    $html_output .= PMA_getHtmlForStructureTimes(\n        $create_time, $update_time, $check_time\n    );\n\n    return $html_output;\n}\n\n/**\n * Get HTML snippet view table\n *\n * @param boolean $is_show_stats whether stats show or not\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForViewTable($is_show_stats)\n{\n    $html_output = '<td class=\"value\">-</td>'\n        . '<td>' . __('View') . '</td>'\n        . '<td>---</td>';\n    if ($is_show_stats) {\n        $html_output .= '<td class=\"value\">-</td>'\n            . '<td class=\"value\">-</td>';\n    }\n    return $html_output;\n}\n\n/**\n * display \"in use\" below for a table that needs to be repaired\n *\n * @param integer $colspan_for_structure colspan for structure\n * @param boolean $db_is_system_schema   whether db is information schema or not\n *\n * @return string HTML snippet\n */\nfunction PMA_getHtmlForRepairtable(\n    $colspan_for_structure,\n    $db_is_system_schema\n) {\n    return '<td colspan=\"'\n        . ($colspan_for_structure - ($db_is_system_schema ? 5 : 8)) . '\"'\n        . 'class=\"center\">'\n        . __('in use')\n        . '</td>';\n}\n\n/**\n * display table header (<table><thead>...</thead><tbody>)\n *\n * @param boolean $db_is_system_schema whether db is information schema or not\n * @param boolean $replication         whether to sho replication status\n *\n * @return string html data\n */\nfunction PMA_tableHeader($db_is_system_schema = false, $replication = false)\n{\n    $cnt = 0; // Let's count the columns...\n\n    if ($db_is_system_schema) {\n        $action_colspan = 4;\n    } else {\n        $action_colspan = 7;\n    }\n\n    $html_output = '<table class=\"data\">' . \"\\n\"\n        . '<thead>' . \"\\n\"\n        . '<tr><th></th>' . \"\\n\"\n        . '<th>'\n        . PMA_sortableTableHeader(__('Table'), 'table')\n        . '</th>' . \"\\n\";\n    if ($replication) {\n        $html_output .= '<th>' . \"\\n\"\n            . '        ' . __('Replication') . \"\\n\"\n            . '</th>';\n    }\n    $html_output .= '<th colspan=\"' . $action_colspan . '\">' . \"\\n\"\n        . '        ' . __('Action') . \"\\n\"\n        . '</th>'\n        // larger values are more interesting so default sort order is DESC\n        . '<th>' . PMA_sortableTableHeader(__('Rows'), 'records', 'DESC')\n        . PMA_Util::showHint(\n            PMA_sanitize(\n                __('May be approximate. See [doc@faq3-11]FAQ 3.11[/doc].')\n            )\n        ) . \"\\n\"\n        . '</th>' . \"\\n\";\n    if (!($GLOBALS['cfg']['PropertiesNumColumns'] > 1)) {\n        $html_output .= '<th>' . PMA_sortableTableHeader(__('Type'), 'type')\n            . '</th>' . \"\\n\";\n        $cnt++;\n        $html_output .= '<th>'\n            . PMA_sortableTableHeader(__('Collation'), 'collation')\n            . '</th>' . \"\\n\";\n        $cnt++;\n    }\n    if ($GLOBALS['is_show_stats']) {\n        // larger values are more interesting so default sort order is DESC\n        $html_output .= '<th>'\n            . PMA_sortableTableHeader(__('Size'), 'size', 'DESC')\n            . '</th>' . \"\\n\"\n        // larger values are more interesting so default sort order is DESC\n            . '<th>'\n            . PMA_sortableTableHeader(__('Overhead'), 'overhead', 'DESC')\n            . '</th>' . \"\\n\";\n        $cnt += 2;\n    }\n    if ($GLOBALS['cfg']['ShowDbStructureCreation']) {\n        // larger values are more interesting so default sort order is DESC\n        $html_output .= '<th>'\n            . PMA_sortableTableHeader(__('Creation'), 'creation', 'DESC')\n            . '</th>' . \"\\n\";\n        $cnt += 2;\n    }\n    if ($GLOBALS['cfg']['ShowDbStructureLastUpdate']) {\n        // larger values are more interesting so default sort order is DESC\n        $html_output .= '<th>'\n            . PMA_sortableTableHeader(__('Last update'), 'last_update', 'DESC')\n            . '</th>' . \"\\n\";\n        $cnt += 2;\n    }\n    if ($GLOBALS['cfg']['ShowDbStructureLastCheck']) {\n        // larger values are more interesting so default sort order is DESC\n        $html_output .= '<th>'\n            . PMA_sortableTableHeader(__('Last check'), 'last_check', 'DESC')\n            . '</th>' . \"\\n\";\n        $cnt += 2;\n    }\n    $html_output .= '</tr>' . \"\\n\";\n    $html_output .= '</thead>' . \"\\n\";\n    $html_output .= '<tbody>' . \"\\n\";\n    $GLOBALS['colspan_for_structure'] = $cnt + $action_colspan + 3;\n\n    return $html_output;\n}\n\n/**\n * Creates a clickable column header for table information\n *\n * @param string $title              title to use for the link\n * @param string $sort               corresponds to sortable data name mapped in\n *                                   libraries/db_info.inc.php\n * @param string $initial_sort_order initial sort order\n *\n * @return string link to be displayed in the table header\n */\nfunction PMA_sortableTableHeader($title, $sort, $initial_sort_order = 'ASC')\n{\n    // Set some defaults\n    $requested_sort = 'table';\n    $requested_sort_order = $future_sort_order = $initial_sort_order;\n\n    // If the user requested a sort\n    if (isset($_REQUEST['sort'])) {\n        $requested_sort = $_REQUEST['sort'];\n\n        if (isset($_REQUEST['sort_order'])) {\n            $requested_sort_order = $_REQUEST['sort_order'];\n        }\n    }\n\n    $order_img = '';\n    $order_link_params = array();\n    $order_link_params['title'] = __('Sort');\n\n    // If this column was requested to be sorted.\n    if ($requested_sort == $sort) {\n        if ($requested_sort_order == 'ASC') {\n            $future_sort_order = 'DESC';\n            // current sort order is ASC\n            $order_img  = ' ' . PMA_Util::getImage(\n                's_asc.png',\n                __('Ascending'),\n                array('class' => 'sort_arrow', 'title' => '')\n            );\n            $order_img .= ' ' . PMA_Util::getImage(\n                's_desc.png',\n                __('Descending'),\n                array('class' => 'sort_arrow hide', 'title' => '')\n            );\n            // but on mouse over, show the reverse order (DESC)\n            $order_link_params['onmouseover'] = \"$('.sort_arrow').toggle();\";\n            // on mouse out, show current sort order (ASC)\n            $order_link_params['onmouseout'] = \"$('.sort_arrow').toggle();\";\n        } else {\n            $future_sort_order = 'ASC';\n            // current sort order is DESC\n            $order_img  = ' ' . PMA_Util::getImage(\n                's_asc.png',\n                __('Ascending'),\n                array('class' => 'sort_arrow hide', 'title' => '')\n            );\n            $order_img .= ' ' . PMA_Util::getImage(\n                's_desc.png',\n                __('Descending'),\n                array('class' => 'sort_arrow', 'title' => '')\n            );\n            // but on mouse over, show the reverse order (ASC)\n            $order_link_params['onmouseover'] = \"$('.sort_arrow').toggle();\";\n            // on mouse out, show current sort order (DESC)\n            $order_link_params['onmouseout'] = \"$('.sort_arrow').toggle();\";\n        }\n    }\n\n    $_url_params = array(\n        'db' => $_REQUEST['db'],\n    );\n\n    $url = 'db_structure.php' . PMA_URL_getCommon($_url_params);\n    // We set the position back to 0 every time they sort.\n    $url .= \"&amp;pos=0&amp;sort=$sort&amp;sort_order=$future_sort_order\";\n    if (! empty($_REQUEST['tbl_type'])) {\n        $url .= \"&amp;tbl_type=\" . $_REQUEST['tbl_type'];\n    }\n    if (! empty($_REQUEST['tbl_group'])) {\n        $url .= \"&amp;tbl_group=\" . $_REQUEST['tbl_group'];\n    }\n\n    return PMA_Util::linkOrButton(\n        $url, $title . $order_img, $order_link_params\n    );\n}\n\n/**\n * Get the alias ant truname\n *\n * @param string $tooltip_aliasname tooltip alias name\n * @param array  $current_table     current table\n * @param string $tooltip_truename  tooltip true name\n *\n * @return array ($alias, $truename)\n */\nfunction PMA_getAliasAndTrueName($tooltip_aliasname, $current_table,\n    $tooltip_truename\n) {\n    $alias = (! empty($tooltip_aliasname)\n            && isset($tooltip_aliasname[$current_table['TABLE_NAME']])\n        )\n        ? str_replace(\n            ' ', '&nbsp;',\n            htmlspecialchars($tooltip_truename[$current_table['TABLE_NAME']])\n        )\n        : str_replace(\n            ' ', '&nbsp;',\n            htmlspecialchars($current_table['TABLE_NAME'])\n        );\n    $truename = (! empty($tooltip_truename)\n            && isset($tooltip_truename[$current_table['TABLE_NAME']])\n        )\n        ? str_replace(\n            ' ', '&nbsp;',\n            htmlspecialchars($tooltip_truename[$current_table['TABLE_NAME']])\n        )\n        : str_replace(\n            ' ', '&nbsp;',\n            htmlspecialchars($current_table['TABLE_NAME'])\n        );\n\n    return array($alias, $truename);\n}\n\n/**\n * Get the server slave state\n *\n * @param boolean $server_slave_status server slave state\n * @param string  $truename            true name\n *\n * @return array ($do, $ignored)\n */\nfunction PMA_getServerSlaveStatus($server_slave_status, $truename)\n{\n    $ignored = false;\n    $do = false;\n    include_once 'libraries/replication.inc.php';\n    if ($server_slave_status) {\n        $nbServerSlaveDoDb = count($server_slave_Do_DB);\n        $nbServerSlaveIgnoreDb = count($server_slave_Ignore_DB);\n        if ((strlen(array_search($truename, $server_slave_Do_Table)) > 0)\n            || (strlen(array_search($GLOBALS['db'], $server_slave_Do_DB)) > 0)\n            || ($nbServerSlaveDoDb == 1 && $nbServerSlaveIgnoreDb == 1)\n        ) {\n            $do = true;\n        }\n        foreach ($server_slave_Wild_Do_Table as $db_table) {\n            $table_part = PMA_extractDbOrTable($db_table, 'table');\n            $pattern = \"@^\" . substr($table_part, 0, strlen($table_part) - 1) . \"@\";\n            if (($GLOBALS['db'] == PMA_extractDbOrTable($db_table, 'db'))\n                && (preg_match($pattern, $truename))\n            ) {\n                $do = true;\n            }\n        }\n\n        if ((strlen(array_search($truename, $server_slave_Ignore_Table)) > 0)\n            || (strlen(array_search($GLOBALS['db'], $server_slave_Ignore_DB)) > 0)\n        ) {\n            $ignored = true;\n        }\n        foreach ($server_slave_Wild_Ignore_Table as $db_table) {\n            $table_part = PMA_extractDbOrTable($db_table, 'table');\n            $pattern = \"@^\" . substr($table_part, 0, strlen($table_part) - 1) . \"@\";\n            if (($db == PMA_extractDbOrTable($db_table))\n                && (preg_match($pattern, $truename))\n            ) {\n                $ignored = true;\n            }\n        }\n    }\n    return array($do, $ignored);\n}\n\n/**\n * Get the value set for ENGINE table,\n * $current_table, $formatted_size, $unit, $formatted_overhead,\n * $overhead_unit, $overhead_size, $table_is_view\n *\n * @param array   $current_table       current table\n * @param boolean $db_is_system_schema whether db is information schema or not\n * @param boolean $is_show_stats       whether stats show or not\n * @param boolean $table_is_view       whether table is view or not\n * @param double  $sum_size            totle table size\n * @param double  $overhead_size       overhead size\n *\n * @return array\n */\nfunction PMA_getStuffForEngineTypeTable($current_table, $db_is_system_schema,\n    $is_show_stats, $table_is_view, $sum_size, $overhead_size\n) {\n    $formatted_size = '-';\n    $unit = '';\n    $formatted_overhead = '';\n    $overhead_unit = '';\n\n    switch ( $current_table['ENGINE']) {\n        // MyISAM, ISAM or Heap table: Row count, data size and index size\n        // are accurate; data size is accurate for ARCHIVE\n    case 'MyISAM' :\n    case 'ISAM' :\n    case 'HEAP' :\n    case 'MEMORY' :\n    case 'ARCHIVE' :\n    case 'Aria' :\n    case 'Maria' :\n        list($current_table, $formatted_size, $unit, $formatted_overhead,\n        $overhead_unit, $overhead_size, $sum_size) = PMA_getValuesForAriaTable(\n            $db_is_system_schema, $current_table, $is_show_stats,\n            $sum_size, $overhead_size, $formatted_size, $unit,\n            $formatted_overhead, $overhead_unit\n        );\n        break;\n    case 'InnoDB' :\n    case 'PBMS' :\n        // InnoDB table: Row count is not accurate but data and index sizes are.\n        // PBMS table in Drizzle: TABLE_ROWS is taken from table cache,\n        // so it may be unavailable\n        list($current_table, $formatted_size, $unit, $sum_size)\n            = PMA_getValuesForInnodbTable($current_table, $is_show_stats, $sum_size);\n        //$display_rows                   =  ' - ';\n        break;\n    // Mysql 5.0.x (and lower) uses MRG_MyISAM\n    // and MySQL 5.1.x (and higher) uses MRG_MYISAM\n    // Both are aliases for MERGE\n    case 'MRG_MyISAM' :\n    case 'MRG_MYISAM' :\n    case 'MERGE' :\n    case 'BerkeleyDB' :\n        // Merge or BerkleyDB table: Only row count is accurate.\n        if ($is_show_stats) {\n            $formatted_size =  ' - ';\n            $unit          =  '';\n        }\n        break;\n        // for a view, the ENGINE is sometimes reported as null,\n        // or on some servers it's reported as \"SYSTEM VIEW\"\n    case null :\n    case 'SYSTEM VIEW' :\n    case 'FunctionEngine' :\n        // if table is broken, Engine is reported as null, so one more test\n        if ($current_table['TABLE_TYPE'] == 'VIEW') {\n            // countRecords() takes care of $cfg['MaxExactCountViews']\n            $current_table['TABLE_ROWS'] = PMA_Table::countRecords(\n                $GLOBALS['db'], $current_table['TABLE_NAME'],\n                true, true\n            );\n            $table_is_view = true;\n        }\n        break;\n    default :\n        // Unknown table type.\n        if ($is_show_stats) {\n            $formatted_size =  __('unknown');\n            $unit          =  '';\n        }\n    } // end switch\n\n    return array($current_table, $formatted_size, $unit, $formatted_overhead,\n        $overhead_unit, $overhead_size, $table_is_view, $sum_size\n    );\n}\n\n/**\n * Get values for ARIA/MARIA tables\n * $current_table, $formatted_size, $unit, $formatted_overhead,\n * $overhead_unit, $overhead_size\n *\n * @param boolean $db_is_system_schema whether db is information schema or not\n * @param array   $current_table       current table\n * @param boolean $is_show_stats       whether stats show or not\n * @param double  $sum_size            sum size\n * @param double  $overhead_size       overhead size\n * @param number  $formatted_size      formatted size\n * @param string  $unit                unit\n * @param number  $formatted_overhead  overhead formatted\n * @param string  $overhead_unit       overhead unit\n *\n * @return array\n */\nfunction PMA_getValuesForAriaTable($db_is_system_schema, $current_table,\n    $is_show_stats, $sum_size, $overhead_size, $formatted_size, $unit,\n    $formatted_overhead, $overhead_unit\n) {\n    if ($db_is_system_schema) {\n        $current_table['Rows'] = PMA_Table::countRecords(\n            $GLOBALS['db'], $current_table['Name']\n        );\n    }\n\n    if ($is_show_stats) {\n        $tblsize = doubleval($current_table['Data_length'])\n            + doubleval($current_table['Index_length']);\n        $sum_size += $tblsize;\n        list($formatted_size, $unit) = PMA_Util::formatByteDown(\n            $tblsize, 3, ($tblsize > 0) ? 1 : 0\n        );\n        if (isset($current_table['Data_free']) && $current_table['Data_free'] > 0) {\n            list($formatted_overhead, $overhead_unit)\n                = PMA_Util::formatByteDown(\n                    $current_table['Data_free'], 3,\n                    (($current_table['Data_free'] > 0) ? 1 : 0)\n                );\n            $overhead_size += $current_table['Data_free'];\n        }\n    }\n    return array($current_table, $formatted_size, $unit, $formatted_overhead,\n        $overhead_unit, $overhead_size, $sum_size\n    );\n}\n\n/**\n * Get values for InnoDB table\n * $current_table, $formatted_size, $unit, $sum_size\n *\n * @param array   $current_table current table\n * @param boolean $is_show_stats whether stats show or not\n * @param double  $sum_size      sum size\n *\n * @return array\n */\nfunction PMA_getValuesForInnodbTable($current_table, $is_show_stats, $sum_size)\n{\n    $formatted_size = $unit = '';\n\n    if (($current_table['ENGINE'] == 'InnoDB'\n        && $current_table['TABLE_ROWS'] < $GLOBALS['cfg']['MaxExactCount'])\n        || !isset($current_table['TABLE_ROWS'])\n    ) {\n        $current_table['COUNTED'] = true;\n        $current_table['TABLE_ROWS'] = PMA_Table::countRecords(\n            $GLOBALS['db'], $current_table['TABLE_NAME'],\n            true, false\n        );\n    } else {\n        $current_table['COUNTED'] = false;\n    }\n\n    // Drizzle doesn't provide data and index length, check for null\n    if ($is_show_stats && $current_table['Data_length'] !== null) {\n        $tblsize =  $current_table['Data_length'] + $current_table['Index_length'];\n        $sum_size += $tblsize;\n        list($formatted_size, $unit) = PMA_Util::formatByteDown(\n            $tblsize, 3, (($tblsize > 0) ? 1 : 0)\n        );\n    }\n\n    return array($current_table, $formatted_size, $unit, $sum_size);\n}\n\n/**\n * table structure\n */\n\n/**\n * Get the HTML snippet for structure table table header\n *\n * @param boolean $db_is_system_schema whether db is information schema or not\n * @param boolean $tbl_is_view         whether table is view or not\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForTableStructureHeader(\n    $db_is_system_schema,\n    $tbl_is_view\n) {\n    $html_output = '<thead>';\n    $html_output .= '<tr>';\n    $html_output .= '<th></th>'\n        . '<th>#</th>'\n        . '<th>' . __('Name') . '</th>'\n        . '<th>' . __('Type') . '</th>'\n        . '<th>' . __('Collation') . '</th>'\n        . '<th>' . __('Attributes') . '</th>'\n        . '<th>' . __('Null') . '</th>'\n        . '<th>' . __('Default') . '</th>'\n        . '<th>' . __('Extra') . '</th>';\n\n    if ($db_is_system_schema || $tbl_is_view) {\n        $html_output .= '<th>' . __('View') . '</th>';\n    } else { /* see tbl_structure.js, function moreOptsMenuResize() */\n        $colspan = 9;\n        if (PMA_DRIZZLE) {\n            $colspan -= 2;\n        }\n        if (PMA_Util::showIcons('ActionLinksMode')) {\n            $colspan--;\n        }\n        $html_output .= '<th colspan=\"' . $colspan . '\" '\n            . 'class=\"action\">' . __('Action') . '</th>';\n    }\n    $html_output .= '</tr>'\n        . '</thead>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML for structure table's rows and return $odd_row parameter also\n * For \"Action\" Column, this function contains only HTML code for \"Change\"\n * and \"Drop\"\n *\n * @param array   $row                  current row\n * @param string  $rownum               row number\n * @param string  $displayed_field_name displayed field name\n * @param string  $type_nowrap          type nowrap\n * @param array   $extracted_columnspec associative array containing type,\n *                                      spec_in_brackets and possibly\n *                                      enum_set_values (another array)\n * @param string  $type_mime            mime type\n * @param string  $field_charset        field charset\n * @param string  $attribute            attribute (BINARY, UNSIGNED,\n *                                      UNSIGNED ZEROFILL,\n *                                      on update CURRENT_TIMESTAMP)\n * @param boolean $tbl_is_view          whether tables is view or not\n * @param boolean $db_is_system_schema  whether db is information schema or not\n * @param string  $url_query            url query\n * @param string  $field_encoded        field encoded\n * @param array   $titles               titles array\n * @param string  $table                table\n *\n * @return array ($html_output, $odd_row)\n */\nfunction PMA_getHtmlTableStructureRow($row, $rownum,\n    $displayed_field_name, $type_nowrap, $extracted_columnspec, $type_mime,\n    $field_charset, $attribute, $tbl_is_view, $db_is_system_schema,\n    $url_query, $field_encoded, $titles, $table\n) {\n    $html_output = '<td class=\"center\">'\n        . '<input type=\"checkbox\" class=\"checkall\" name=\"selected_fld[]\" '\n        . 'value=\"' . htmlspecialchars($row['Field']) . '\" '\n        . 'id=\"checkbox_row_' . $rownum . '\"/>'\n        . '</td>';\n\n    $html_output .= '<td class=\"right\">'\n        . $rownum\n        . '</td>';\n\n    $html_output .= '<th class=\"nowrap\">'\n        . '<label for=\"checkbox_row_' . $rownum . '\">'\n        . $displayed_field_name . '</label>'\n        . '</th>';\n\n    $html_output .= '<td' . $type_nowrap . '>'\n        . '<bdo dir=\"ltr\" lang=\"en\">'\n        . $extracted_columnspec['displayed_type'] . $type_mime\n        . '</bdo></td>';\n\n    $html_output .= '<td>' .\n        (empty($field_charset)\n            ? ''\n            : '<dfn title=\"' . PMA_getCollationDescr($field_charset) . '\">'\n                . $field_charset . '</dfn>'\n        )\n        . '</td>';\n\n    $html_output .= '<td class=\"column_attribute nowrap\">'\n        . $attribute . '</td>';\n    $html_output .= '<td>'\n        . (($row['Null'] == 'YES') ? __('Yes') : __('No')) . '  </td>';\n\n    $html_output .= '<td class=\"nowrap\">';\n    if (isset($row['Default'])) {\n        if ($extracted_columnspec['type'] == 'bit') {\n            // here, $row['Default'] contains something like b'010'\n            $html_output .= PMA_Util::convertBitDefaultValue($row['Default']);\n        } else {\n            $html_output .= $row['Default'];\n        }\n    } else {\n        $html_output .= '<i>' . _pgettext('None for default', 'None') . '</i>';\n    }\n    $html_output .= '</td>';\n\n    $html_output .= '<td class=\"nowrap\">' . strtoupper($row['Extra']) . '</td>';\n\n    $html_output .= PMA_getHtmlForDropColumn(\n        $tbl_is_view, $db_is_system_schema,\n        $url_query, $field_encoded,\n        $titles, $table, $row\n    );\n\n    return $html_output;\n}\n\n/**\n * Get HTML code for \"Drop\" Action link\n *\n * @param boolean $tbl_is_view         whether tables is view or not\n * @param boolean $db_is_system_schema whether db is information schema or not\n * @param string  $url_query           url query\n * @param string  $field_encoded       field encoded\n * @param array   $titles              tittles array\n * @param string  $table               table\n * @param array   $row                 current row\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForDropColumn($tbl_is_view, $db_is_system_schema,\n    $url_query, $field_encoded, $titles, $table, $row\n) {\n    $html_output = '';\n\n    if (! $tbl_is_view && ! $db_is_system_schema) {\n        $html_output .= '<td class=\"edit center\">'\n            . '<a class=\"change_column_anchor ajax\"'\n            . ' href=\"tbl_structure.php?'\n            . $url_query . '&amp;field=' . $field_encoded\n            . '&amp;change_column=1\">'\n            . $titles['Change'] . '</a>' . '</td>';\n        $html_output .= '<td class=\"drop center\">'\n            . '<a class=\"drop_column_anchor ajax\"'\n            . ' href=\"sql.php?' . $url_query . '&amp;sql_query='\n            . urlencode(\n                'ALTER TABLE ' . PMA_Util::backquote($table)\n                . ' DROP ' . PMA_Util::backquote($row['Field']) . ';'\n            )\n            . '&amp;dropped_column=' . urlencode($row['Field'])\n            . '&amp;message_to_show=' . urlencode(\n                sprintf(\n                    __('Column %s has been dropped.'),\n                    htmlspecialchars($row['Field'])\n                )\n            ) . '\" >'\n            . $titles['Drop'] . '</a>'\n            . '</td>';\n    }\n\n    return $html_output;\n}\n\n/**\n * Get HTML for \"check all\" check box with \"with selected\" actions in table\n * structure\n *\n * @param string  $pmaThemeImage       pma theme image url\n * @param string  $text_dir            test directory\n * @param boolean $tbl_is_view         whether table is view or not\n * @param boolean $db_is_system_schema whether db is information schema or not\n * @param string  $tbl_storage_engine  table storage engine\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForCheckAllTableColumn($pmaThemeImage, $text_dir,\n    $tbl_is_view, $db_is_system_schema, $tbl_storage_engine\n) {\n    $html_output = '<img class=\"selectallarrow\" '\n        . 'src=\"' . $pmaThemeImage . 'arrow_' . $text_dir . '.png\" '\n        . 'width=\"38\" height=\"22\" alt=\"' . __('With selected:') . '\" />';\n\n    $html_output .= '<input type=\"checkbox\" id=\"fieldsForm_checkall\" '\n        . 'class=\"checkall_box\" title=\"' . __('Check All') . '\" />'\n        . '<label for=\"fieldsForm_checkall\">' . __('Check All') . '</label>';\n\n    $html_output .= '<i style=\"margin-left: 2em\">'\n        . __('With selected:') . '</i>';\n\n    $html_output .= PMA_Util::getButtonOrImage(\n        'submit_mult', 'mult_submit', 'submit_mult_browse',\n        __('Browse'), 'b_browse.png', 'browse'\n    );\n\n    if (! $tbl_is_view && ! $db_is_system_schema) {\n        $html_output .= PMA_Util::getButtonOrImage(\n            'submit_mult', 'mult_submit change_columns_anchor ajax',\n            'submit_mult_change', __('Change'), 'b_edit.png', 'change'\n        );\n        $html_output .= PMA_Util::getButtonOrImage(\n            'submit_mult', 'mult_submit', 'submit_mult_drop',\n            __('Drop'), 'b_drop.png', 'drop'\n        );\n        if ('ARCHIVE' != $tbl_storage_engine) {\n            $html_output .= PMA_Util::getButtonOrImage(\n                'submit_mult', 'mult_submit', 'submit_mult_primary',\n                __('Primary'), 'b_primary.png', 'primary'\n            );\n            $html_output .= PMA_Util::getButtonOrImage(\n                'submit_mult', 'mult_submit', 'submit_mult_unique',\n                __('Unique'), 'b_unique.png', 'unique'\n            );\n            $html_output .= PMA_Util::getButtonOrImage(\n                'submit_mult', 'mult_submit', 'submit_mult_index',\n                __('Index'), 'b_index.png', 'index'\n            );\n        }\n\n        if (! empty($tbl_storage_engine) && $tbl_storage_engine == 'MYISAM') {\n            $html_output .= PMA_Util::getButtonOrImage(\n                'submit_mult', 'mult_submit', 'submit_mult_spatial',\n                __('Spatial'), 'b_spatial.png', 'spatial'\n            );\n        }\n        if (! empty($tbl_storage_engine)\n            && ($tbl_storage_engine == 'MYISAM'\n            || $tbl_storage_engine == 'ARIA'\n            || $tbl_storage_engine == 'MARIA')\n        ) {\n            $html_output .= PMA_Util::getButtonOrImage(\n                'submit_mult', 'mult_submit', 'submit_mult_fulltext',\n                __('Fulltext'), 'b_ftext.png', 'ftext'\n            );\n        }\n    }\n    return $html_output;\n}\n\n/**\n * Get HTML for move columns dialog\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlDivForMoveColumnsDialog()\n{\n    $html_output = '<div id=\"move_columns_dialog\" '\n        . 'title=\"' . __('Move columns') . '\" style=\"display: none\">';\n\n    $html_output .= '<p>'\n        . __('Move the columns by dragging them up and down.') . '</p>';\n\n    $html_output .= '<form action=\"tbl_structure.php\">'\n        . '<div>'\n        . PMA_URL_getHiddenInputs($GLOBALS['db'], $GLOBALS['table'])\n        . '<ul></ul>'\n        . '</div>'\n        . '</form>'\n        . '</div>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML for edit views'\n *\n * @param string $url_params URL parameters\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForEditView($url_params)\n{\n    $query = \"SELECT `VIEW_DEFINITION`, `CHECK_OPTION`, `DEFINER`, `SECURITY_TYPE`\"\n        . \" FROM `INFORMATION_SCHEMA`.`VIEWS`\"\n        . \" WHERE TABLE_SCHEMA='\" . PMA_Util::sqlAddSlashes($GLOBALS['db']) . \"'\"\n        . \" AND TABLE_NAME='\" . PMA_Util::sqlAddSlashes($GLOBALS['table']) . \"';\";\n    $item = $GLOBALS['dbi']->fetchSingleRow($query);\n\n    $view = array(\n        'operation' => 'alter',\n        'definer' => $item['DEFINER'],\n        'sql_security' => $item['SECURITY_TYPE'],\n        'name' => $GLOBALS['table'],\n        'as' => $item['VIEW_DEFINITION'],\n        'with' => $item['CHECK_OPTION'],\n    );\n    $url  = 'view_create.php' . PMA_URL_getCommon($url_params) . '&amp;';\n    $url .= implode(\n        '&amp;',\n        array_map(\n            function ($key, $val) {\n                return 'view[' . urlencode($key) . ']=' . urlencode($val);\n            },\n            array_keys($view),\n            $view\n        )\n    );\n    $html_output = PMA_Util::linkOrButton(\n        $url,\n        PMA_Util::getIcon('b_edit.png', __('Edit view'), true)\n    );\n    return $html_output;\n}\n\n/**\n * Get HTML links for 'Print view', 'Relation view', 'Propose table structure',\n * 'Track table' and 'Move columns'\n *\n * @param string  $url_query           url query\n * @param boolean $tbl_is_view         whether table is view or not\n * @param boolean $db_is_system_schema whether db is information schema or not\n * @param string  $tbl_storage_engine  table storage engine\n * @param array   $cfgRelation         current relation parameters\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForOptionalActionLinks($url_query, $tbl_is_view,\n    $db_is_system_schema, $tbl_storage_engine, $cfgRelation\n) {\n    $html_output = '<a href=\"tbl_printview.php?' . $url_query\n        . '\" target=\"print_view\">'\n        . PMA_Util::getIcon('b_print.png', __('Print view'), true)\n        . '</a>';\n\n    if (! $tbl_is_view && ! $db_is_system_schema) {\n        // if internal relations are available, or foreign keys are supported\n        // ($tbl_storage_engine comes from libraries/tbl_info.inc.php\n\n        if ($cfgRelation['relwork']\n            || PMA_Util::isForeignKeySupported($tbl_storage_engine)\n        ) {\n            $html_output .= '<a href=\"tbl_relation.php?' . $url_query . '\">'\n                . PMA_Util::getIcon(\n                    'b_relations.png', __('Relation view'), true\n                )\n                . '</a>';\n        }\n        if (!PMA_DRIZZLE) {\n            $html_output .= '<a href=\"sql.php?' . $url_query\n                . '&amp;session_max_rows=all&amp;sql_query=' . urlencode(\n                    'SELECT * FROM ' . PMA_Util::backquote($GLOBALS['table'])\n                    . ' PROCEDURE ANALYSE()'\n                ) . '\">'\n                . PMA_Util::getIcon(\n                    'b_tblanalyse.png',\n                    __('Propose table structure'),\n                    true\n                )\n                . '</a>';\n            $html_output .= PMA_Util::showMySQLDocu('procedure_analyse') . \"\\n\";\n        }\n        if (PMA_Tracker::isActive()) {\n            $html_output .= '<a href=\"tbl_tracking.php?' . $url_query . '\">'\n                . PMA_Util::getIcon('eye.png', __('Track table'), true)\n                . '</a>';\n        }\n        $html_output .= '<a href=\"#\" id=\"move_columns_anchor\">'\n            . PMA_Util::getIcon('b_move.png', __('Move columns'), true)\n            . '</a>';\n    }\n\n    return $html_output;\n}\n\n/**\n * Get HTML snippet for \"Add column\" feature in structure table\n *\n * @param array $columns_list column list array\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForAddColumn($columns_list)\n{\n    $html_output = '<form method=\"post\" action=\"tbl_addfield.php\" '\n        . 'id=\"addColumns\" name=\"addColumns\" '\n        . 'onsubmit=\"return checkFormElementInRange('\n            . 'this, \\'num_fields\\', \\'' . str_replace(\n                '\\'',\n                '\\\\\\'',\n                __('You have to add at least one column.')\n            ) . '\\', 1)'\n        . '\">';\n\n    $html_output .= PMA_URL_getHiddenInputs(\n        $GLOBALS['db'],\n        $GLOBALS['table']\n    );\n    if (PMA_Util::showIcons('ActionLinksMode')) {\n        $html_output .=PMA_Util::getImage(\n            'b_insrow.png',\n            __('Add column')\n        );\n    }\n    $num_fields = '<input type=\"number\" name=\"num_fields\" '\n        . 'value=\"1\" onfocus=\"this.select()\" '\n        . 'min=\"1\" required />';\n    $html_output .= sprintf(__('Add %s column(s)'), $num_fields);\n\n    // I tried displaying the drop-down inside the label but with Firefox\n    // the drop-down was blinking\n    $column_selector = '<select name=\"after_field\" '\n        . 'onclick=\"this.form.field_where[2].checked=true\" '\n        . 'onchange=\"this.form.field_where[2].checked=true\">';\n\n    foreach ($columns_list as $one_column_name) {\n        $column_selector .= '<option '\n            . 'value=\"' . htmlspecialchars($one_column_name) . '\">'\n            . htmlspecialchars($one_column_name)\n            . '</option>';\n    }\n    $column_selector .= '</select>';\n\n    $choices = array(\n        'last'  => __('At End of Table'),\n        'first' => __('At Beginning of Table'),\n        'after' => sprintf(__('After %s'), '')\n    );\n    $html_output .= PMA_Util::getRadioFields(\n        'field_where', $choices, 'last', false\n    );\n    $html_output .= $column_selector;\n    $html_output .= '<input type=\"submit\" value=\"' . __('Go') . '\" />'\n        . '</form>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML snippet for table rows in the Information ->Space usage table\n *\n * @param boolean $odd_row whether current row is odd or even\n * @param string  $name    type of usage\n * @param string  $value   value of usage\n * @param string  $unit    unit\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForSpaceUsageTableRow($odd_row, $name, $value, $unit)\n{\n    $html_output = '<tr class=\"' . (($odd_row = !$odd_row) ? 'odd' : 'even') . '\">';\n    $html_output .= '<th class=\"name\">' . $name . '</th>';\n    $html_output .= '<td class=\"value\">' . $value . '</td>';\n    $html_output .= '<td class=\"unit\">' . $unit . '</td>';\n    $html_output .= '</tr>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML for Optimize link if overhead in Information fieldset\n *\n * @param string $url_query URL query\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForOptimizeLink($url_query)\n{\n    $html_output = '<tr class=\"tblFooters\">';\n    $html_output .= '<td colspan=\"3\" class=\"center\">';\n    $html_output .= '<a href=\"sql.php?' . $url_query\n        . '&pos=0&amp;sql_query=' . urlencode(\n            'OPTIMIZE TABLE ' . PMA_Util::backquote($GLOBALS['table'])\n        )\n        . '\">'\n        . PMA_Util::getIcon('b_tbloptimize.png', __('Optimize table'))\n        . '</a>';\n    $html_output .= '</td>';\n    $html_output .= '</tr>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML for 'Row statistics' table row\n *\n * @param boolean $odd_row whether current row is odd or even\n * @param string  $name    statement name\n * @param mixed   $value   value\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForRowStatsTableRow($odd_row, $name, $value)\n{\n    $html_output = '<tr class=\"' . (($odd_row = !$odd_row) ? 'odd' : 'even') . '\">';\n    $html_output .= '<th class=\"name\">' . $name . '</th>';\n    $html_output .= '<td class=\"value\">' . $value . '</td>';\n    $html_output .= '</tr>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML snippet for display Row statistics table\n *\n * @param array   $showtable     show table array\n * @param string  $tbl_collation table collation\n * @param boolean $is_innodb     whether table is innob or not\n * @param boolean $mergetable    Checks if current table is a merge table\n * @param integer $avg_size      average size\n * @param string  $avg_unit      average unit\n *\n * @return string $html_output\n */\nfunction getHtmlForRowStatsTable($showtable, $tbl_collation,\n    $is_innodb, $mergetable, $avg_size, $avg_unit\n) {\n    $odd_row = false;\n    $html_output = '<table id=\"tablerowstats\" class=\"data\">';\n    $html_output .= '<caption class=\"tblHeaders\">'\n        . __('Row statistics') . '</caption>';\n    $html_output .= '<tbody>';\n\n    if (isset($showtable['Row_format'])) {\n        if ($showtable['Row_format'] == 'Fixed') {\n            $value = __('static');\n        } elseif ($showtable['Row_format'] == 'Dynamic') {\n            $value = __('dynamic');\n        } else {\n            $value = $showtable['Row_format'];\n        }\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row, __('Format'), $value\n        );\n        $odd_row = !$odd_row;\n    }\n    if (! empty($showtable['Create_options'])) {\n        if ($showtable['Create_options'] == 'partitioned') {\n            $value = __('partitioned');\n        } else {\n            $value = $showtable['Create_options'];\n        }\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row, __('Options'), $value\n        );\n        $odd_row = !$odd_row;\n    }\n    if (!empty($tbl_collation)) {\n        $value = '<dfn title=\"' . PMA_getCollationDescr($tbl_collation) . '\">'\n            . $tbl_collation . '</dfn>';\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row, __('Collation'), $value\n        );\n        $odd_row = !$odd_row;\n    }\n    if (!$is_innodb && isset($showtable['Rows'])) {\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row,\n            __('Rows'),\n            PMA_Util::formatNumber($showtable['Rows'], 0)\n        );\n        $odd_row = !$odd_row;\n    }\n    if (!$is_innodb\n        && isset($showtable['Avg_row_length'])\n        && $showtable['Avg_row_length'] > 0\n    ) {\n        list($avg_row_length_value, $avg_row_length_unit)\n            = PMA_Util::formatByteDown(\n                $showtable['Avg_row_length'],\n                6,\n                1\n            );\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row,\n            __('Row length'),\n            ($avg_row_length_value . ' ' . $avg_row_length_unit)\n        );\n        unset($avg_row_length_value, $avg_row_length_unit);\n        $odd_row = !$odd_row;\n    }\n    if (!$is_innodb\n        && isset($showtable['Data_length'])\n        && $showtable['Rows'] > 0\n        && $mergetable == false\n    ) {\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row,\n            __('Row size'),\n            ($avg_size . ' ' . $avg_unit)\n        );\n        $odd_row = !$odd_row;\n    }\n    if (isset($showtable['Auto_increment'])) {\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row,\n            __('Next autoindex'),\n            PMA_Util::formatNumber($showtable['Auto_increment'], 0)\n        );\n        $odd_row = !$odd_row;\n    }\n    if (isset($showtable['Create_time'])) {\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row,\n            __('Creation'),\n            PMA_Util::localisedDate(strtotime($showtable['Create_time']))\n        );\n        $odd_row = !$odd_row;\n    }\n    if (isset($showtable['Update_time'])) {\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row,\n            __('Last update'),\n            PMA_Util::localisedDate(strtotime($showtable['Update_time']))\n        );\n        $odd_row = !$odd_row;\n    }\n    if (isset($showtable['Check_time'])) {\n        $html_output .= PMA_getHtmlForRowStatsTableRow(\n            $odd_row,\n            __('Last check'),\n            PMA_Util::localisedDate(strtotime($showtable['Check_time']))\n        );\n    }\n    $html_output .= '</tbody>'\n    . '</table>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML snippet for action row in structure table,\n * This function returns common HTML <td> for Primary, Unique, Index,\n * Spatial actions\n *\n * @param array   $type               column type\n * @param array   $tbl_storage_engine table storage engine\n * @param string  $class              class attribute for <td>\n * @param boolean $hasField           has field\n * @param boolean $hasLinkClass       has <a> the class attribute\n * @param string  $url_query          url query\n * @param boolean $primary            primary if set, false otherwise\n * @param string  $syntax             Sql syntax\n * @param string  $message            message to show\n * @param string  $action             action\n * @param array   $titles             titles array\n * @param array   $row                current row\n * @param boolean $isPrimary          is primary action\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForActionRowInStructureTable($type, $tbl_storage_engine,\n    $class, $hasField, $hasLinkClass, $url_query, $primary, $syntax,\n    $message, $action, $titles, $row, $isPrimary\n) {\n    $html_output = '<li class=\"' . $class . '\">';\n\n    if ($type == 'text'\n        || $type == 'blob'\n        || 'ARCHIVE' == $tbl_storage_engine\n        || $hasField\n    ) {\n        $html_output .= $titles['No' . $action];\n    } else {\n        $html_output .= '<a rel=\"samepage\" '\n            . ($hasLinkClass ? 'class=\"ajax add_primary_key_anchor\" ' :\n               ($action=='Index' ? 'class=\"ajax add_index_anchor\"' :\n                ($action=='Unique' ? 'class=\"ajax add_unique_anchor\"' : ' ')\n               )\n              )\n            . ' href=\"sql.php?' . $url_query . '&amp;sql_query='\n            . urlencode(\n                'ALTER TABLE ' . PMA_Util::backquote($GLOBALS['table'])\n                . ($isPrimary ? ($primary ? ' DROP PRIMARY KEY,' : '') : '')\n                . ' ' . $syntax . '('\n                . PMA_Util::backquote($row['Field']) . ');'\n            )\n            . '&amp;message_to_show=' . urlencode(\n                sprintf(\n                    $message,\n                    htmlspecialchars($row['Field'])\n                )\n            ) . '\" >'\n            . $titles[$action] . '</a>';\n    }\n    $html_output .= '</li>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML for fulltext action\n *\n * @param string $tbl_storage_engine table storage engine\n * @param string $type               column type\n * @param string $url_query          url query\n * @param array  $row                current row\n * @param array  $titles             titles array\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForFullTextAction($tbl_storage_engine, $type, $url_query,\n    $row, $titles\n) {\n    $html_output = '<li class=\"fulltext nowrap\">';\n    if (! empty($tbl_storage_engine)\n        && ($tbl_storage_engine == 'MYISAM'\n        || $tbl_storage_engine == 'ARIA'\n        || $tbl_storage_engine == 'MARIA'\n        || ($tbl_storage_engine == 'INNODB' && PMA_MYSQL_INT_VERSION >= 50604))\n        && (strpos($type, 'text') !== false || strpos($type, 'char') !== false)\n    ) {\n        $html_output .= '<a rel=\"samepage\" href=\"sql.php?' . $url_query\n            . '&amp;sql_query='\n            . urlencode(\n                'ALTER TABLE ' . PMA_Util::backquote($GLOBALS['table'])\n                . ' ADD FULLTEXT(' . PMA_Util::backquote($row['Field'])\n                . ');'\n            )\n            . '&amp;message_to_show='\n            . urlencode(\n                sprintf(\n                    __('An index has been added on %s.'),\n                    htmlspecialchars($row['Field'])\n                )\n            )\n            . '\">';\n        $html_output .= $titles['IdxFulltext'] . '</a>';\n    } else {\n        $html_output .= $titles['NoIdxFulltext'];\n    }\n    $html_output .= '</li>';\n    return $html_output;\n}\n\n/**\n * Get HTML snippet for \"Distinc Value\" action\n *\n * @param string $url_query url query\n * @param array  $row       current row\n * @param array  $titles    titles array\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForDistinctValueAction($url_query, $row, $titles)\n{\n    $html_output = '<li class=\"browse nowrap\">';\n    $html_output .= '<a href=\"sql.php?' . $url_query . '&amp;sql_query='\n        . urlencode(\n            'SELECT COUNT(*) AS ' . PMA_Util::backquote(__('Rows'))\n            . ', ' . PMA_Util::backquote($row['Field'])\n            . ' FROM ' . PMA_Util::backquote($GLOBALS['table'])\n            . ' GROUP BY ' . PMA_Util::backquote($row['Field'])\n            . ' ORDER BY ' . PMA_Util::backquote($row['Field'])\n        )\n        . '\">'\n        . $titles['DistinctValues']\n        . '</a>';\n    $html_output .= '</li>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML snippet for Actions in table structure\n *\n * @param string  $type                      column type\n * @param string  $tbl_storage_engine        table storage engine\n * @param boolean $primary                   primary if set, false otherwise\n * @param string  $field_name                column name\n * @param string  $url_query                 url query\n * @param array   $titles                    titles array\n * @param array   $row                       current row\n * @param string  $rownum                    row number\n * @param array   $hidden_titles             hidden titles\n * @param array   $columns_with_unique_index columns with unique index\n *\n * @return string $html_output;\n */\nfunction PMA_getHtmlForActionsInTableStructure($type, $tbl_storage_engine,\n    $primary, $field_name, $url_query, $titles, $row, $rownum, $hidden_titles,\n    $columns_with_unique_index\n) {\n    $html_output = '<td><ul class=\"table-structure-actions resizable-menu\">';\n    $html_output .= PMA_getHtmlForActionRowInStructureTable(\n        $type, $tbl_storage_engine,\n        'primary nowrap',\n        ($primary && $primary->hasColumn($field_name)),\n        true, $url_query, $primary,\n        'ADD PRIMARY KEY',\n        __('A primary key has been added on %s.'),\n        'Primary', $titles, $row, true\n    );\n    $html_output .= PMA_getHtmlForActionRowInStructureTable(\n        $type, $tbl_storage_engine,\n        'add_unique unique nowrap',\n        isset($columns_with_unique_index[$field_name]),\n        false, $url_query, $primary, 'ADD UNIQUE',\n        __('An index has been added on %s.'),\n        'Unique', $titles, $row, false\n    );\n    $html_output .= PMA_getHtmlForActionRowInStructureTable(\n        $type, $tbl_storage_engine,\n        'add_index nowrap', false, false, $url_query,\n        $primary, 'ADD INDEX', __('An index has been added on %s.'),\n        'Index', $titles, $row, false\n    );\n    if (!PMA_DRIZZLE) {\n        $spatial_types = array(\n            'geometry', 'point', 'linestring', 'polygon', 'multipoint',\n            'multilinestring', 'multipolygon', 'geomtrycollection'\n        );\n        $html_output .= PMA_getHtmlForActionRowInStructureTable(\n            $type, $tbl_storage_engine,\n            'spatial nowrap',\n            (! in_array($type, $spatial_types)\n                || 'MYISAM' != $tbl_storage_engine\n            ),\n            false, $url_query, $primary, 'ADD SPATIAL',\n            __('An index has been added on %s.'), 'Spatial',\n            $titles, $row, false\n        );\n\n        // FULLTEXT is possible on TEXT, CHAR and VARCHAR\n        $html_output .= PMA_getHtmlForFullTextAction(\n            $tbl_storage_engine, $type, $url_query, $row, $titles\n        );\n    }\n    $html_output .= PMA_getHtmlForDistinctValueAction($url_query, $row, $titles);\n    $html_output .= '<div class=\"clearfloat\"></div></ul></td>';\n    return $html_output;\n}\n\n/**\n * Get hidden action titles (image and string)\n *\n * @return array $hidden_titles\n */\nfunction PMA_getHiddenTitlesArray()\n{\n    $hidden_titles = array();\n    $hidden_titles['DistinctValues'] = PMA_Util::getIcon(\n        'b_browse.png', __('Distinct values'), true\n    );\n    $hidden_titles['Primary'] = PMA_Util::getIcon(\n        'b_primary.png', __('Add primary key'), true\n    );\n    $hidden_titles['NoPrimary'] = PMA_Util::getIcon(\n        'bd_primary.png', __('Add primary key'), true\n    );\n    $hidden_titles['Index'] = PMA_Util::getIcon(\n        'b_index.png', __('Add index'), true\n    );\n    $hidden_titles['NoIndex'] = PMA_Util::getIcon(\n        'bd_index.png', __('Add index'), true\n    );\n    $hidden_titles['Unique'] = PMA_Util::getIcon(\n        'b_unique.png', __('Add unique index'), true\n    );\n    $hidden_titles['NoUnique'] = PMA_Util::getIcon(\n        'bd_unique.png', __('Add unique index'), true\n    );\n    $hidden_titles['Spatial'] = PMA_Util::getIcon(\n        'b_spatial.png', __('Add SPATIAL index'), true\n    );\n    $hidden_titles['NoSpatial'] = PMA_Util::getIcon(\n        'bd_spatial.png', __('Add SPATIAL index'), true\n    );\n    $hidden_titles['IdxFulltext'] = PMA_Util::getIcon(\n        'b_ftext.png', __('Add FULLTEXT index'), true\n    );\n    $hidden_titles['NoIdxFulltext'] = PMA_Util::getIcon(\n        'bd_ftext.png', __('Add FULLTEXT index'), true\n    );\n\n    return $hidden_titles;\n}\n\n/**\n * Get action titles (image or string array\n *\n * @return array  $titles\n */\nfunction PMA_getActionTitlesArray()\n{\n    $titles = array();\n    $titles['Change']\n        = PMA_Util::getIcon('b_edit.png', __('Change'));\n    $titles['Drop']\n        = PMA_Util::getIcon('b_drop.png', __('Drop'));\n    $titles['NoDrop']\n        = PMA_Util::getIcon('b_drop.png', __('Drop'));\n    $titles['Primary']\n        = PMA_Util::getIcon('b_primary.png', __('Primary'));\n    $titles['Index']\n        = PMA_Util::getIcon('b_index.png', __('Index'));\n    $titles['Unique']\n        = PMA_Util::getIcon('b_unique.png', __('Unique'));\n    $titles['Spatial']\n        = PMA_Util::getIcon('b_spatial.png', __('Spatial'));\n    $titles['IdxFulltext']\n        = PMA_Util::getIcon('b_ftext.png', __('Fulltext'));\n    $titles['NoPrimary']\n        = PMA_Util::getIcon('bd_primary.png', __('Primary'));\n    $titles['NoIndex']\n        = PMA_Util::getIcon('bd_index.png', __('Index'));\n    $titles['NoUnique']\n        = PMA_Util::getIcon('bd_unique.png', __('Unique'));\n    $titles['NoSpatial']\n        = PMA_Util::getIcon('bd_spatial.png', __('Spatial'));\n    $titles['NoIdxFulltext']\n        = PMA_Util::getIcon('bd_ftext.png', __('Fulltext'));\n    $titles['DistinctValues']\n        = PMA_Util::getIcon('b_browse.png', __('Distinct values'));\n\n    return $titles;\n}\n\n/**\n * Get HTML snippet for display table statistics\n *\n * @param array   $showtable           full table status info\n * @param integer $table_info_num_rows table info number of rows\n * @param boolean $tbl_is_view         whether table is view or not\n * @param boolean $db_is_system_schema whether db is information schema or not\n * @param string  $tbl_storage_engine  table storage engine\n * @param string  $url_query           url query\n * @param string  $tbl_collation       table collation\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForDisplayTableStats($showtable, $table_info_num_rows,\n    $tbl_is_view, $db_is_system_schema, $tbl_storage_engine, $url_query,\n    $tbl_collation\n) {\n    $html_output = '<div id=\"tablestatistics\">';\n    if (empty($showtable)) {\n        $showtable = PMA_Table::sGetStatusInfo(\n            $GLOBALS['db'], $GLOBALS['table'], null, true\n        );\n    }\n\n    $nonisam     = false;\n    $is_innodb = (isset($showtable['Type']) && $showtable['Type'] == 'InnoDB');\n    if (isset($showtable['Type'])\n        && ! preg_match('@ISAM|HEAP@i', $showtable['Type'])\n    ) {\n        $nonisam = true;\n    }\n\n    // Gets some sizes\n\n    $mergetable = PMA_Table::isMerge($GLOBALS['db'], $GLOBALS['table']);\n\n    // this is to display for example 261.2 MiB instead of 268k KiB\n    $max_digits = 3;\n    $decimals = 1;\n    list($data_size, $data_unit) = PMA_Util::formatByteDown(\n        $showtable['Data_length'], $max_digits, $decimals\n    );\n    if ($mergetable == false) {\n        list($index_size, $index_unit) = PMA_Util::formatByteDown(\n            $showtable['Index_length'], $max_digits, $decimals\n        );\n    }\n    // InnoDB returns a huge value in Data_free, do not use it\n    if (! $is_innodb\n        && isset($showtable['Data_free'])\n        && $showtable['Data_free'] > 0\n    ) {\n        list($free_size, $free_unit) = PMA_Util::formatByteDown(\n            $showtable['Data_free'], $max_digits, $decimals\n        );\n        list($effect_size, $effect_unit) = PMA_Util::formatByteDown(\n            $showtable['Data_length'] + $showtable['Index_length']\n            - $showtable['Data_free'],\n            $max_digits, $decimals\n        );\n    } else {\n        list($effect_size, $effect_unit) = PMA_Util::formatByteDown(\n            $showtable['Data_length'] + $showtable['Index_length'],\n            $max_digits, $decimals\n        );\n    }\n    list($tot_size, $tot_unit) = PMA_Util::formatByteDown(\n        $showtable['Data_length'] + $showtable['Index_length'],\n        $max_digits, $decimals\n    );\n    if ($table_info_num_rows > 0) {\n        list($avg_size, $avg_unit) = PMA_Util::formatByteDown(\n            ($showtable['Data_length'] + $showtable['Index_length'])\n            / $showtable['Rows'],\n            6, 1\n        );\n    }\n\n    // Displays them\n    $odd_row = false;\n\n    $html_output .=  '<fieldset>'\n        . '<legend>' . __('Information') . '</legend>'\n        . '<a id=\"showusage\"></a>';\n\n    if (! $tbl_is_view && ! $db_is_system_schema) {\n        $html_output .= '<table id=\"tablespaceusage\" class=\"data\">'\n            . '<caption class=\"tblHeaders\">' . __('Space usage') . '</caption>'\n            . '<tbody>';\n\n        $html_output .= PMA_getHtmlForSpaceUsageTableRow(\n            $odd_row, __('Data'), $data_size, $data_unit\n        );\n        $odd_row = !$odd_row;\n\n        if (isset($index_size)) {\n            $html_output .= PMA_getHtmlForSpaceUsageTableRow(\n                $odd_row, __('Index'), $index_size, $index_unit\n            );\n            $odd_row = !$odd_row;\n        }\n\n        if (isset($free_size)) {\n            $html_output .= PMA_getHtmlForSpaceUsageTableRow(\n                $odd_row, __('Overhead'), $free_size, $free_unit\n            );\n            $html_output .= PMA_getHtmlForSpaceUsageTableRow(\n                $odd_row, __('Effective'), $effect_size, $effect_unit\n            );\n            $odd_row = !$odd_row;\n        }\n        if (isset($tot_size) && $mergetable == false) {\n            $html_output .= PMA_getHtmlForSpaceUsageTableRow(\n                $odd_row, __('Total'), $tot_size, $tot_unit\n            );\n            $odd_row = !$odd_row;\n        }\n        // Optimize link if overhead\n        if (isset($free_size) && !PMA_DRIZZLE\n            && ($tbl_storage_engine == 'MYISAM'\n            || $tbl_storage_engine == 'ARIA'\n            || $tbl_storage_engine == 'MARIA'\n            || $tbl_storage_engine == 'BDB')\n        ) {\n            $html_output .= PMA_getHtmlForOptimizeLink($url_query);\n        }\n        $html_output .= '</tbody>'\n            . '</table>';\n    }\n\n    $html_output .= getHtmlForRowStatsTable(\n        $showtable, $tbl_collation,\n        $is_innodb, $mergetable,\n        (isset ($avg_size) ? $avg_size : ''),\n        (isset ($avg_unit) ? $avg_unit : '')\n    );\n\n    $html_output .= '</fieldset>'\n        . '</div>';\n\n    return $html_output;\n}\n\n/**\n * Displays HTML for changing one or more columns\n *\n * @param string $db       database name\n * @param string $table    table name\n * @param array  $selected the selected columns\n * @param string $action   target script to call\n *\n * @return boolean $regenerate true if error occurred\n *\n */\nfunction PMA_displayHtmlForColumnChange($db, $table, $selected, $action)\n{\n    // $selected comes from multi_submits.inc.php\n    if (empty($selected)) {\n        $selected[]   = $_REQUEST['field'];\n        $selected_cnt = 1;\n    } else { // from a multiple submit\n        $selected_cnt = count($selected);\n    }\n\n    /**\n     * @todo optimize in case of multiple fields to modify\n     */\n    $fields_meta = array();\n    for ($i = 0; $i < $selected_cnt; $i++) {\n        $fields_meta[] = $GLOBALS['dbi']->getColumns(\n            $db, $table, $selected[$i], true\n        );\n    }\n    $num_fields  = count($fields_meta);\n    // set these globals because tbl_columns_definition_form.inc.php\n    // verifies them\n    // @todo: refactor tbl_columns_definition_form.inc.php so that it uses\n    // function params\n    $GLOBALS['action'] = 'tbl_structure.php';\n    $GLOBALS['num_fields'] = $num_fields;\n\n    // Get more complete field information.\n    // For now, this is done to obtain MySQL 4.1.2+ new TIMESTAMP options\n    // and to know when there is an empty DEFAULT value.\n    // Later, if the analyser returns more information, it\n    // could be executed to replace the info given by SHOW FULL COLUMNS FROM.\n    /**\n     * @todo put this code into a require()\n     * or maybe make it part of $GLOBALS['dbi']->getColumns();\n     */\n\n    // We also need this to correctly learn if a TIMESTAMP is NOT NULL, since\n    // SHOW FULL COLUMNS says NULL and SHOW CREATE TABLE says NOT NULL (tested\n    // in MySQL 4.0.25).\n\n    $show_create_table = $GLOBALS['dbi']->fetchValue(\n        'SHOW CREATE TABLE ' . PMA_Util::backquote($db) . '.'\n        . PMA_Util::backquote($table),\n        0, 1\n    );\n    $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));\n    unset($show_create_table);\n    /**\n     * Form for changing properties.\n     */\n    include 'libraries/tbl_columns_definition_form.inc.php';\n}\n\n/**\n * Verifies if some elements of a column have changed\n *\n * @param integer $i column index in the request\n *\n * @return boolean $alterTableNeeded true if we need to generate ALTER TABLE\n *\n */\nfunction PMA_columnNeedsAlterTable($i)\n{\n    // these two fields are checkboxes so might not be part of the\n    // request; therefore we define them to avoid notices below\n    if (! isset($_REQUEST['field_null'][$i])) {\n        $_REQUEST['field_null'][$i] = 'NO';\n    }\n    if (! isset($_REQUEST['field_extra'][$i])) {\n        $_REQUEST['field_extra'][$i] = '';\n    }\n\n    // field_name does not follow the convention (corresponds to field_orig)\n    if ($_REQUEST['field_attribute'][$i] != $_REQUEST['field_attribute_orig'][$i]\n        || $_REQUEST['field_collation'][$i] != $_REQUEST['field_collation_orig'][$i]\n        || $_REQUEST['field_comments'][$i] != $_REQUEST['field_comments_orig'][$i]\n        || $_REQUEST['field_default_value'][$i] != $_REQUEST['field_default_value_orig'][$i]\n        || $_REQUEST['field_default_type'][$i] != $_REQUEST['field_default_type_orig'][$i]\n        || $_REQUEST['field_extra'][$i] != $_REQUEST['field_extra_orig'][$i]\n        || $_REQUEST['field_length'][$i] != $_REQUEST['field_length_orig'][$i]\n        || $_REQUEST['field_name'][$i] != $_REQUEST['field_orig'][$i]\n        || $_REQUEST['field_null'][$i] != $_REQUEST['field_null_orig'][$i]\n        || $_REQUEST['field_type'][$i] != $_REQUEST['field_type_orig'][$i]\n        || ! empty($_REQUEST['field_move_to'][$i])\n) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Update the table's structure based on $_REQUEST\n *\n * @param string $db    database name\n * @param string $table table name\n *\n * @return boolean $regenerate              true if error occurred\n *\n */\nfunction PMA_updateColumns($db, $table)\n{\n    $err_url = 'tbl_structure.php?' . PMA_URL_getCommon($db, $table);\n    $regenerate = false;\n    $field_cnt = count($_REQUEST['field_name']);\n    $key_fields = array();\n    $changes = array();\n\n    for ($i = 0; $i < $field_cnt; $i++) {\n        if (PMA_columnNeedsAlterTable($i)) {\n            $changes[] = 'CHANGE ' . PMA_Table::generateAlter(\n                isset($_REQUEST['field_orig'][$i])\n                ? $_REQUEST['field_orig'][$i]\n                : '',\n                $_REQUEST['field_name'][$i],\n                $_REQUEST['field_type'][$i],\n                $_REQUEST['field_length'][$i],\n                $_REQUEST['field_attribute'][$i],\n                isset($_REQUEST['field_collation'][$i])\n                ? $_REQUEST['field_collation'][$i]\n                : '',\n                isset($_REQUEST['field_null'][$i])\n                ? $_REQUEST['field_null'][$i]\n                : 'NOT NULL',\n                $_REQUEST['field_default_type'][$i],\n                $_REQUEST['field_default_value'][$i],\n                isset($_REQUEST['field_extra'][$i])\n                ? $_REQUEST['field_extra'][$i]\n                : false,\n                isset($_REQUEST['field_comments'][$i])\n                ? $_REQUEST['field_comments'][$i]\n                : '',\n                $key_fields,\n                $i,\n                isset($_REQUEST['field_move_to'][$i])\n                ? $_REQUEST['field_move_to'][$i]\n                : ''\n            );\n        }\n    } // end for\n\n    $response = PMA_Response::getInstance();\n\n    if (count($changes) > 0) {\n        // Builds the primary keys statements and updates the table\n        $key_query = '';\n        /**\n         * this is a little bit more complex\n         *\n         * @todo if someone selects A_I when altering a column we need to check:\n         *  - no other column with A_I\n         *  - the column has an index, if not create one\n         *\n         */\n\n        // To allow replication, we first select the db to use\n        // and then run queries on this db.\n        if (! $GLOBALS['dbi']->selectDb($db)) {\n            PMA_Util::mysqlDie(\n                $GLOBALS['dbi']->getError(),\n                'USE ' . PMA_Util::backquote($db) . ';',\n                '',\n                $err_url\n            );\n        }\n        $sql_query = 'ALTER TABLE ' . PMA_Util::backquote($table) . ' ';\n        $sql_query .= implode(', ', $changes) . $key_query;\n        $sql_query .= ';';\n        $result    = $GLOBALS['dbi']->tryQuery($sql_query);\n\n        if ($result !== false) {\n            $message = PMA_Message::success(\n                __('Table %1$s has been altered successfully.')\n            );\n            $message->addParam($table);\n\n            $response->addHTML(\n                PMA_Util::getMessage($message, $sql_query, 'success')\n            );\n        } else {\n            // An error happened while inserting/updating a table definition\n            $response->isSuccess(false);\n            $response->addJSON(\n                'message',\n                PMA_Message::rawError(__('Query error') . ':<br />'.$GLOBALS['dbi']->getError())\n            );\n            $regenerate = true;\n        }\n    }\n\n    include_once 'libraries/transformations.lib.php';\n\n    // update field names in relation\n    if (isset($_REQUEST['field_orig']) && is_array($_REQUEST['field_orig'])) {\n        foreach ($_REQUEST['field_orig'] as $fieldindex => $fieldcontent) {\n            if ($_REQUEST['field_name'][$fieldindex] != $fieldcontent) {\n                PMA_REL_renameField(\n                    $db, $table, $fieldcontent,\n                    $_REQUEST['field_name'][$fieldindex]\n                );\n            }\n        }\n    }\n\n    // update mime types\n    if (isset($_REQUEST['field_mimetype'])\n        && is_array($_REQUEST['field_mimetype'])\n        && $GLOBALS['cfg']['BrowseMIME']\n    ) {\n        foreach ($_REQUEST['field_mimetype'] as $fieldindex => $mimetype) {\n            if (isset($_REQUEST['field_name'][$fieldindex])\n                && strlen($_REQUEST['field_name'][$fieldindex])\n            ) {\n                PMA_setMIME(\n                    $db, $table, $_REQUEST['field_name'][$fieldindex],\n                    $mimetype,\n                    $_REQUEST['field_transformation'][$fieldindex],\n                    $_REQUEST['field_transformation_options'][$fieldindex]\n                );\n            }\n        }\n    }\n    return $regenerate;\n}\n\n/**\n * Moves columns in the table's structure based on $_REQUEST\n *\n * @param string $db    database name\n * @param string $table table name\n *\n * @return void\n */\nfunction PMA_moveColumns($db, $table)\n{\n    $GLOBALS['dbi']->selectDb($db);\n\n    /*\n     * load the definitions for all columns\n     */\n    $columns = $GLOBALS['dbi']->getColumnsFull($db, $table);\n    $column_names = array_keys($columns);\n    $changes = array();\n    $we_dont_change_keys = array();\n\n    // move columns from first to last\n    for ($i = 0, $l = count($_REQUEST['move_columns']); $i < $l; $i++) {\n        $column = $_REQUEST['move_columns'][$i];\n        // is this column already correctly placed?\n        if ($column_names[$i] == $column) {\n            continue;\n        }\n\n        // it is not, let's move it to index $i\n        $data = $columns[$column];\n        $extracted_columnspec = PMA_Util::extractColumnSpec($data['Type']);\n        if (isset($data['Extra'])\n            && $data['Extra'] == 'on update CURRENT_TIMESTAMP'\n        ) {\n            $extracted_columnspec['attribute'] = $data['Extra'];\n            unset($data['Extra']);\n        }\n        $current_timestamp = false;\n        if (($data['Type'] == 'timestamp' || $data['Type'] == 'datetime')\n            && $data['Default'] == 'CURRENT_TIMESTAMP'\n        ) {\n            $current_timestamp = true;\n        }\n        $default_type\n            = $data['Null'] === 'YES' && $data['Default'] === null\n                ? 'NULL'\n                : ($current_timestamp\n                    ? 'CURRENT_TIMESTAMP'\n                    : ($data['Default'] === null\n                        ? 'NONE'\n                        : 'USER_DEFINED'));\n\n        $changes[] = 'CHANGE ' . PMA_Table::generateAlter(\n            $column,\n            $column,\n            strtoupper($extracted_columnspec['type']),\n            $extracted_columnspec['spec_in_brackets'],\n            $extracted_columnspec['attribute'],\n            isset($data['Collation']) ? $data['Collation'] : '',\n            $data['Null'] === 'YES' ? 'NULL' : 'NOT NULL',\n            $default_type,\n            $current_timestamp ? '' : $data['Default'],\n            isset($data['Extra']) && $data['Extra'] !== '' ? $data['Extra'] : false,\n            isset($data['COLUMN_COMMENT']) && $data['COLUMN_COMMENT'] !== ''\n            ? $data['COLUMN_COMMENT'] : false,\n            $we_dont_change_keys,\n            $i,\n            $i === 0 ? '-first' : $column_names[$i - 1]\n        );\n        // update current column_names array, first delete old position\n        for ($j = 0, $ll = count($column_names); $j < $ll; $j++) {\n            if ($column_names[$j] == $column) {\n                unset($column_names[$j]);\n            }\n        }\n        // insert moved column\n        array_splice($column_names, $i, 0, $column);\n    }\n    $response = PMA_Response::getInstance();\n    if (empty($changes)) { // should never happen\n        $response->isSuccess(false);\n        exit;\n    }\n    $move_query = 'ALTER TABLE ' . PMA_Util::backquote($table) . ' ';\n    $move_query .= implode(', ', $changes);\n    // move columns\n    $GLOBALS['dbi']->tryQuery($move_query);\n    $tmp_error = $GLOBALS['dbi']->getError();\n    if ($tmp_error) {\n        $response->isSuccess(false);\n        $response->addJSON('message', PMA_Message::error($tmp_error));\n    } else {\n        $message = PMA_Message::success(\n            __('The columns have been moved successfully.')\n        );\n        $response->addJSON('message', $message);\n        $response->addJSON('columns', $column_names);\n    }\n    exit;\n}\n\n/**\n * Get columns with unique index\n *\n * @param string $db    database name\n * @param string $table tablename\n *\n * @return array $columns_with_unique_index  An array of columns with unique index,\n *                                            with $column name as the array key\n */\nfunction PMA_getColumnsWithUniqueIndex($db ,$table)\n{\n    $columns_with_unique_index = array();\n    foreach (PMA_Index::getFromTable($table, $db) as $index) {\n        if ($index->isUnique() && $index->getChoice() == 'UNIQUE') {\n            $columns = $index->getColumns();\n            foreach ($columns as $column_name => $dummy) {\n                $columns_with_unique_index[$column_name] = 1;\n            }\n        }\n    }\n    return $columns_with_unique_index;\n}\n\n/**\n * Check column names for MySQL reserved words\n *\n * @param string $db    database name\n * @param string $table tablename\n *\n * @return array $messages      array of PMA_Messages\n */\nfunction PMA_getReservedWordColumnNameMessages($db ,$table)\n{\n    $messages = array();\n    if ($GLOBALS['cfg']['ReservedWordDisableWarning'] === false) {\n        $pma_table = new PMA_Table($table, $db);\n        $columns = $pma_table->getReservedColumnNames();\n        if (!empty($columns)) {\n            foreach ($columns as $column) {\n                $msg = PMA_message::notice(\n                    __('The column name \\'%s\\' is a MySQL reserved keyword.')\n                );\n                $msg->addParam($column);\n                $messages[] = $msg;\n            }\n        }\n    }\n    return $messages;\n}\n\n/**\n * Function to get the type of command for multiple field handling\n *\n * @return string\n */\nfunction PMA_getMultipleFieldCommandType()\n{\n    $submit_mult = null;\n\n    if (isset($_REQUEST['submit_mult_change_x'])) {\n        $submit_mult = 'change';\n    } elseif (isset($_REQUEST['submit_mult_drop_x'])) {\n        $submit_mult = 'drop';\n    } elseif (isset($_REQUEST['submit_mult_primary_x'])) {\n        $submit_mult = 'primary';\n    } elseif (isset($_REQUEST['submit_mult_index_x'])) {\n        $submit_mult = 'index';\n    } elseif (isset($_REQUEST['submit_mult_unique_x'])) {\n        $submit_mult = 'unique';\n    } elseif (isset($_REQUEST['submit_mult_spatial_x'])) {\n        $submit_mult = 'spatial';\n    } elseif (isset($_REQUEST['submit_mult_fulltext_x'])) {\n        $submit_mult = 'ftext';\n    } elseif (isset($_REQUEST['submit_mult_browse_x'])) {\n        $submit_mult = 'browse';\n    } elseif (isset($_REQUEST['submit_mult'])) {\n        $submit_mult = $_REQUEST['submit_mult'];\n    } elseif (isset($_REQUEST['mult_btn']) && $_REQUEST['mult_btn'] == __('Yes')) {\n        $submit_mult = 'row_delete';\n        if (isset($_REQUEST['selected'])) {\n            $_REQUEST['selected_fld'] = $_REQUEST['selected'];\n        }\n    }\n\n    return $submit_mult;\n}\n\n/**\n * Function to display table browse for selected columns\n *\n * @param string $db            current database\n * @param string $table         current table\n * @param string $goto          goto page url\n * @param string $pmaThemeImage URI of the pma theme image\n *\n * @return void\n */\nfunction PMA_displayTableBrowseForSelectedColumns($db, $table, $goto,\n    $pmaThemeImage\n) {\n    $GLOBALS['active_page'] = 'sql.php';\n    $sql_query = '';\n    foreach ($_REQUEST['selected_fld'] as $sval) {\n        if ($sql_query == '') {\n            $sql_query .= 'SELECT ' . PMA_Util::backquote($sval);\n        } else {\n            $sql_query .=  ', ' . PMA_Util::backquote($sval);\n        }\n    }\n    $sql_query .= ' FROM ' . PMA_Util::backquote($db)\n    . '.' . PMA_Util::backquote($table);\n\n    // Parse and analyze the query\n    include_once 'libraries/parse_analyze.inc.php';\n\n    include_once 'libraries/sql.lib.php';\n\n    PMA_executeQueryAndSendQueryResponse(\n        $analyzed_sql_results, false, $db, $table, null, null, null, false,\n        null, null, null, null, $goto, $pmaThemeImage, null, null,\n        null, $sql_query, null, null\n    );\n}\n\n/**\n * Function to check if a table is already in favorite list.\n *\n * @param string $db            current database\n * @param string $current_table current table\n *\n * @return true|false\n */\nfunction PMA_checkFavoriteTable($db, $current_table)\n{\n    foreach ($_SESSION['tmpval']['favorite_tables'][$GLOBALS['server']] as $key => $value) {\n        if ($value['db'] == $db && $value['table'] == $current_table) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Get HTML for favorite anchor.\n *\n * @param string $db            current database\n * @param string $current_table current table\n * @param string $titles        titles\n *\n * @return $html_output\n */\nfunction PMA_getHtmlForFavoriteAnchor($db, $current_table, $titles)\n{\n    $html_output  = '<a ';\n    $html_output .= 'id=\"' . md5($current_table['TABLE_NAME'])\n        . '_favorite_anchor\" ';\n    $html_output .= 'class=\"ajax favorite_table_anchor';\n\n    // Check if current table is already in favorite list.\n    $already_favorite = PMA_checkFavoriteTable($db, $current_table['TABLE_NAME']);\n    $fav_params = array('db' => $db,\n        'ajax_request' => true,\n        'favorite_table' => $current_table['TABLE_NAME'],\n        (($already_favorite?'remove':'add') . '_favorite') => true\n    );\n    $fav_url = 'db_structure.php' . PMA_URL_getCommon($fav_params);\n    $html_output .= '\" ';\n    $html_output .= 'href=\"' . $fav_url\n        . '\" title=\"' . ($already_favorite ? __(\"Remove from Favorites\")\n        : __(\"Add to Favorites\"))\n        . '\" data-favtargets=\"'\n        . md5($db . \".\" . $current_table['TABLE_NAME'])\n        . '\" >'\n        . (!$already_favorite ? $titles['NoFavorite']\n        : $titles['Favorite']) . '</a>';\n\n    return $html_output;\n}\n?>\n"], "filenames": ["libraries/RecentFavoriteTable.class.php", "libraries/structure.lib.php"], "buggy_code_start_loc": [209, 2739], "buggy_code_end_loc": [236, 2756], "fixing_code_start_loc": [209, 2739], "fixing_code_end_loc": [239, 2757], "type": "CWE-79", "message": "Multiple cross-site scripting (XSS) vulnerabilities in phpMyAdmin 4.2.x before 4.2.4 allow remote authenticated users to inject arbitrary web script or HTML via a crafted (1) database name or (2) table name that is improperly handled after presence in (a) the favorite list or (b) recent tables.", "other": {"cve": {"id": "CVE-2014-4348", "sourceIdentifier": "cve@mitre.org", "published": "2014-06-25T11:19:22.497", "lastModified": "2015-09-02T17:06:24.057", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Multiple cross-site scripting (XSS) vulnerabilities in phpMyAdmin 4.2.x before 4.2.4 allow remote authenticated users to inject arbitrary web script or HTML via a crafted (1) database name or (2) table name that is improperly handled after presence in (a) the favorite list or (b) recent tables."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de XSS en phpMyAdmin 4.2.x anterior a 4.2.4 permiten a usuarios remotos autenticados inyectar secuencias de comandos web o HTML arbitrarios a trav\u00e9s de un nombre manipulado de (1) base de datos o (2) de tabla que no se maneja debidamente despu\u00e9s de su presencia en (a) la lista de favoritos o (b) tablas recientes."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEC525D5-EA90-4F01-B1D3-64F4BFBFC4DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "8ACC297E-A54A-4C92-9BCB-CDDA0C7E56C1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "4FA4B695-DD00-45FE-8A74-A34E9920EE23"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.2.3:*:*:*:*:*:*:*", "matchCriteriaId": "BC38B8F8-DB1C-4A7D-A15B-390754687F18"}]}]}], "references": [{"url": "http://phpmyadmin.net/home_page/security/PMASA-2014-2.php", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "http://www.securityfocus.com/bid/68201", "source": "cve@mitre.org"}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/cb7c703c03f656debcea2a16468bd53660fc888e", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/d18a2dd9faad7e0e96df799b59e16ef587afb838", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/cb7c703c03f656debcea2a16468bd53660fc888e"}}