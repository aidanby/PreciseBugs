{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Reports;\n\nuse Pimcore\\Model\\Element\\Service;\nuse Pimcore\\Model\\Exception\\ConfigWriteException;\nuse Pimcore\\Model\\Tool\\CustomReport;\nuse Symfony\\Component\\Filesystem\\Exception\\FileNotFoundException;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @Route(\"/custom-report\")\n *\n * @internal\n */\nclass CustomReportController extends ReportsControllerBase\n{\n    /**\n     * @Route(\"/tree\", name=\"pimcore_admin_reports_customreport_tree\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function treeAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n        $reports = CustomReport\\Config::getReportsList();\n\n        return $this->adminJson($reports);\n    }\n\n    /**\n     * @Route(\"/portlet-report-list\", name=\"pimcore_admin_reports_customreport_portletreportlist\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function portletReportListAction(Request $request)\n    {\n        $this->checkPermission('reports');\n        $reports = CustomReport\\Config::getReportsList($this->getAdminUser());\n\n        return $this->adminJson(['data' => $reports]);\n    }\n\n    /**\n     * @Route(\"/add\", name=\"pimcore_admin_reports_customreport_add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $success = false;\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n\n        if (!$report) {\n            $report = new CustomReport\\Config();\n            if (!$report->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n\n            $report->setName($request->get('name'));\n            $report->save();\n\n            $success = true;\n        }\n\n        return $this->adminJson(['success' => $success, 'id' => $report->getName()]);\n    }\n\n    /**\n     * @Route(\"/delete\", name=\"pimcore_admin_reports_customreport_delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        if (!$report->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $report->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/clone\", name=\"pimcore_admin_reports_customreport_clone\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function cloneAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $newName = $request->get('newName');\n        $report = CustomReport\\Config::getByName($newName);\n        if ($report) {\n            throw new \\Exception('report already exists');\n        }\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        $reportData = $this->encodeJson($report);\n        $reportData = $this->decodeJson($reportData);\n\n        unset($reportData['name']);\n        $reportData['name'] = $newName;\n\n        foreach ($reportData as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($report, $setter)) {\n                $report->$setter($value);\n            }\n        }\n\n        $report->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/get\", name=\"pimcore_admin_reports_customreport_get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAction(Request $request)\n    {\n        $this->checkPermissionsHasOneOf(['reports_config', 'reports']);\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        $data = $report->getObjectVars();\n        $data['writeable'] = $report->isWriteable();\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/update\", name=\"pimcore_admin_reports_customreport_update\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function updateAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        if (!$report->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $data = $this->decodeJson($request->get('configuration'));\n\n        if (!is_array($data['yAxis'])) {\n            $data['yAxis'] = strlen($data['yAxis']) ? [$data['yAxis']] : [];\n        }\n\n        foreach ($data as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($report, $setter)) {\n                $report->$setter($value);\n            }\n        }\n\n        $report->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/column-config\", name=\"pimcore_admin_reports_customreport_columnconfig\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function columnConfigAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        $columnConfiguration = $report->getColumnConfiguration();\n        if (!is_array($columnConfiguration)) {\n            $columnConfiguration = [];\n        }\n\n        $configuration = json_decode($request->get('configuration'));\n        $configuration = $configuration[0] ?? null;\n\n        $success = false;\n        $errorMessage = null;\n\n        $result = [];\n\n        try {\n            $adapter = CustomReport\\Config::getAdapter($configuration);\n            $columns = $adapter->getColumns($configuration);\n            if (!is_array($columns)) {\n                $columns = [];\n            }\n\n            foreach ($columnConfiguration as $item) {\n                $name = $item['name'];\n                if (in_array($name, $columns)) {\n                    $result[] = $name;\n                    array_splice($columns, array_search($name, $columns), 1);\n                }\n            }\n            foreach ($columns as $remainingColumn) {\n                $result[] = $remainingColumn;\n            }\n\n            $success = true;\n        } catch (\\Exception $e) {\n            $errorMessage = $e->getMessage();\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n            'columns' => $result,\n            'errorMessage' => $errorMessage,\n        ]);\n    }\n\n    /**\n     * @Route(\"/get-report-config\", name=\"pimcore_admin_reports_customreport_getreportconfig\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getReportConfigAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $reports = [];\n\n        $list = new CustomReport\\Config\\Listing();\n        $items = $list->getDao()->loadForGivenUser($this->getAdminUser());\n\n        foreach ($items as $report) {\n            $reports[] = [\n                'name' => $report->getName(),\n                'niceName' => $report->getNiceName(),\n                'iconClass' => $report->getIconClass(),\n                'group' => $report->getGroup(),\n                'groupIconClass' => $report->getGroupIconClass(),\n                'menuShortcut' => $report->getMenuShortcut(),\n                'reportClass' => $report->getReportClass(),\n            ];\n        }\n\n        return $this->adminJson([\n            'success' => true,\n            'reports' => $reports,\n        ]);\n    }\n\n    /**\n     * @Route(\"/data\", name=\"pimcore_admin_reports_customreport_data\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function dataAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $offset = $request->get('start', 0);\n        $limit = $request->get('limit', 40);\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n        $sort = null;\n        $dir = null;\n        if ($sortingSettings['orderKey']) {\n            $sort = $sortingSettings['orderKey'];\n            $dir = $sortingSettings['order'];\n        }\n\n        $filters = ($request->get('filter') ? json_decode($request->get('filter'), true) : null);\n\n        $drillDownFilters = $request->get('drillDownFilters', null);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        if (!$config) {\n            throw $this->createNotFoundException();\n        }\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n\n        $result = $adapter->getData($filters, $sort, $dir, $offset, $limit, null, $drillDownFilters);\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $result['data'],\n            'total' => $result['total'],\n        ]);\n    }\n\n    /**\n     * @Route(\"/drill-down-options\", name=\"pimcore_admin_reports_customreport_drilldownoptions\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function drillDownOptionsAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $field = $request->get('field');\n        $filters = ($request->get('filter') ? json_decode($request->get('filter'), true) : null);\n        $drillDownFilters = $request->get('drillDownFilters', null);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        if (!$config) {\n            throw $this->createNotFoundException();\n        }\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n        $result = $adapter->getAvailableOptions($filters, $field, $drillDownFilters);\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $result['data'],\n        ]);\n    }\n\n    /**\n     * @Route(\"/chart\", name=\"pimcore_admin_reports_customreport_chart\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function chartAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $sort = $request->get('sort');\n        $dir = $request->get('dir');\n        $filters = ($request->get('filter') ? json_decode($request->get('filter'), true) : null);\n        $drillDownFilters = $request->get('drillDownFilters', null);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        if (!$config) {\n            throw $this->createNotFoundException();\n        }\n\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n        $result = $adapter->getData($filters, $sort, $dir, null, null, null, $drillDownFilters);\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $result['data'],\n            'total' => $result['total'],\n        ]);\n    }\n\n    /**\n     * @Route(\"/create-csv\", name=\"pimcore_admin_reports_customreport_createcsv\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function createCsvAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        set_time_limit(300);\n\n        $sort = $request->get('sort');\n        $dir = $request->get('dir');\n        $filters = $request->get('filter') ? json_decode(urldecode($request->get('filter')), true) : null;\n        $drillDownFilters = $request->get('drillDownFilters', null);\n        $includeHeaders = $request->get('headers', false);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        if (!$config) {\n            throw $this->createNotFoundException();\n        }\n\n        $columns = $config->getColumnConfiguration();\n        $fields = [];\n        foreach ($columns as $column) {\n            if ($column['export']) {\n                $fields[] = $column['name'];\n            }\n        }\n\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n\n        $offset = $request->get('offset', 0);\n        $limit = 5000;\n        $tempData = [];\n        $result = $adapter->getData($filters, $sort, $dir, $offset * $limit, $limit, $fields, $drillDownFilters);\n        ++$offset;\n\n        if (!($exportFile = $request->get('exportFile'))) {\n            $exportFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/report-export-' . uniqid() . '.csv';\n            @unlink($exportFile);\n        } else {\n            $exportFile = PIMCORE_SYSTEM_TEMP_DIRECTORY.'/'.$exportFile;\n        }\n\n        $fp = fopen($exportFile, 'a');\n\n        if ($includeHeaders) {\n            fputcsv($fp, $fields, ';');\n        }\n\n        foreach ($result['data'] as $row) {\n            $row = Service::escapeCsvRecord($row);\n            fputcsv($fp, array_values($row), ';');\n        }\n\n        fclose($fp);\n\n        $progress = $result['total'] ? ($offset * $limit) / $result['total'] : 1;\n        $progress = $progress > 1 ? 1 : $progress;\n\n        return new JsonResponse([\n            'exportFile' => basename($exportFile),\n            'offset' => $offset,\n            'progress' => $progress,\n            'finished' => empty($result['data']) || count($result['data']) < $limit,\n        ]);\n    }\n\n    /**\n     * @Route(\"/download-csv\", name=\"pimcore_admin_reports_customreport_downloadcsv\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return BinaryFileResponse\n     */\n    public function downloadCsvAction(Request $request)\n    {\n        $this->checkPermission('reports');\n        if ($exportFile = $request->get('exportFile')) {\n            $exportFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/' . basename($exportFile);\n            $response = new BinaryFileResponse($exportFile);\n            $response->headers->set('Content-Type', 'text/csv; charset=UTF-8');\n            $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, 'export.csv');\n            $response->deleteFileAfterSend(true);\n\n            return $response;\n        }\n\n        throw new FileNotFoundException(\"File \\\"$exportFile\\\" not found!\");\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.report.custom.item\");\npimcore.report.custom.item = Class.create({\n\n\n    initialize: function (data, parentPanel) {\n        this.parentPanel = parentPanel;\n        this.data = data;\n        this.currentElements = [];\n        this.currentElementCount = 0;\n        this.addLayout();\n    },\n\n\n    addLayout: function () {\n\n        var panelButtons = [];\n\n        let buttonConfig = {\n            text: t(\"save\"),\n            iconCls: \"pimcore_icon_apply\",\n            handler: this.save.bind(this),\n            disabled: !this.data.writeable\n        };\n\n        if (!this.data.writeable) {\n            buttonConfig.tooltip = t(\"config_not_writeable\");\n        }\n\n        panelButtons.push(buttonConfig);\n\n        this.columnStore = Ext.create('Ext.data.Store', {\n            autoDestroy: false,\n            proxy: {\n                type: 'memory'\n            },\n            data: [],\n            fields: [\"name\", \"filter\", \"displayType\", \"filter_drilldown\", \"display\", \"export\", \"order\", \"width\", \"label\", \"columnAction\"]\n        });\n\n        var checkDisplay = new Ext.grid.column.Check({\n            text: t(\"display\"),\n            dataIndex: \"display\",\n            width: 50\n        });\n\n        var checkExport = new Ext.grid.column.Check({\n            text: t(\"export\"),\n            dataIndex: \"export\",\n            width: 50\n        });\n\n        var checkOrder = new Ext.grid.column.Check({\n            text: t(\"order\"),\n            dataIndex: \"order\",\n            width: 50\n        });\n\n        this.cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\n            clicksToEdit: 1\n        });\n\n        var actionStore = new Ext.data.SimpleStore({\n            fields: ['key', 'name'],\n            data: [\n                [\"\", t(\"none\")],\n                [\"openDocument\", t(\"open_document_by_id\")],\n                [\"openAsset\", t(\"open_asset_by_id\")],\n                [\"openObject\", t(\"open_object_by_id\")],\n                [\"openUrl\", t(\"open_url\")]\n            ]\n        });\n\n        var displayStore = new Ext.data.SimpleStore({\n            fields: ['key', 'name'],\n            data: [\n                [\"\", t(\"none\")],\n                [\"text\", t(\"text\")],\n                [\"date\", t(\"date\")],\n                [\"hide\", t(\"hide\")]\n            ]\n        });\n\n        this.columnGrid = Ext.create('Ext.grid.Panel', {\n            store: this.columnStore,\n            plugins: [\n                this.cellEditing\n            ],\n            columns: [\n                {text: t(\"name\"), sortable: false, dataIndex: 'name', editable: false, width: 200},\n                checkDisplay,\n                checkExport,\n                checkOrder,\n                {\n                    text: t(\"filter_type\"),\n                    width: 100,\n                    sortable: false,\n                    dataIndex: 'filter',\n                    editable: true,\n                    editor: new Ext.form.ComboBox({\n                        store: [\n                            [\"\", t(\"empty\")],\n                            [\"string\", t(\"text\")],\n                            [\"numeric\", t(\"numeric\")],\n                            [\"date\", t(\"date\")],\n                            [\"boolean\", t(\"bool\")]\n                        ],\n                        queryMode: 'local',\n                        typeAhead: false,\n                        editable: false,\n                        forceSelection: true,\n                        triggerAction: \"all\"\n                    })\n                },\n                {\n                    text: t(\"display_type\"),\n                    width: 100,\n                    sortable: false,\n                    dataIndex: 'displayType',\n                    editable: true,\n                    editor: new Ext.form.ComboBox({\n                        store: displayStore,\n                        valueField: \"key\",\n                        displayField: 'name',\n                        queryMode: 'local',\n                        typeAhead: false,\n                        editable: false,\n                        forceSelection: true,\n                        triggerAction: \"all\"\n\n                    }),\n\n                    renderer: function (value, metaData, record, rowIndex, colIndex, store, view) {\n                        try {\n                            var rec = displayStore.findRecord(\"key\", value);\n                            if (rec) {\n                                return rec.get(\"name\");\n                            }\n                        }\n                        catch (e) {\n                        }\n\n                        return value;\n                    }\n                },\n                {\n                    text: t(\"custom_report_filter_drilldown\"),\n                    width: 100,\n                    sortable: false,\n                    dataIndex: 'filter_drilldown',\n                    editable: true,\n                    editor: new Ext.form.ComboBox({\n                        store: [\n                            //[\"date\", t(\"date\")],\n                            [\"\", t(\"empty\")],\n                            [\"only_filter\", t(\"custom_report_only_filter\")],\n                            [\"filter_and_show\", t(\"custom_report_filter_and_show\")]\n                        ],\n                        queryMode: 'local',\n                        typeAhead: false,\n                        editable: false,\n                        forceSelection: true,\n                        triggerAction: \"all\"\n                    })\n                },\n                {\n                    text: t(\"width\"),\n                    sortable: false,\n                    dataIndex: 'width',\n                    editable: true,\n                    width: 70,\n                    editor: new Ext.form.field.Number({\n                        decimalPrecision: 0\n                    })\n                },\n                {\n                    text: t(\"label\"),\n                    sortable: false,\n                    dataIndex: 'label',\n                    editable: true,\n                    width: 150,\n                    editor: new Ext.form.TextField({})\n                },\n                {\n                    text: t(\"action\"), width: 160, sortable: true, dataIndex: 'columnAction',\n                    editor: new Ext.form.ComboBox({\n                        store: actionStore,\n                        valueField: \"key\",\n                        displayField: 'name',\n                        queryMode: 'local',\n                        typeAhead: false,\n                        editable: false,\n                        forceSelection: true,\n                        triggerAction: \"all\",\n                    })\n                    ,\n                    renderer: function (value, metaData, record, rowIndex, colIndex, store, view) {\n                        try {\n                            var rec = actionStore.findRecord(\"key\", value);\n                            if (rec) {\n                                return rec.get(\"name\");\n                            }\n                        }\n                        catch (e) {\n                        }\n\n                        return value;\n                    },\n                    filter: 'string'\n                }, {\n                    xtype: 'actioncolumn',\n                    menuText: t('up'),\n                    width: 30,\n                    items: [\n                        {\n                            tooltip: t('up'),\n                            icon: \"/bundles/pimcoreadmin/img/flat-color-icons/up.svg\",\n                            handler: function (grid, rowIndex) {\n                                if (rowIndex > 0) {\n                                    var rec = grid.getStore().getAt(rowIndex);\n                                    grid.getStore().removeAt(rowIndex);\n                                    grid.getStore().insert(rowIndex - 1, [rec]);\n                                }\n                            }.bind(this)\n                        }\n                    ]\n                },\n                {\n                    xtype: 'actioncolumn',\n                    menuText: t('down'),\n                    width: 30,\n                    items: [\n                        {\n                            tooltip: t('down'),\n                            icon: \"/bundles/pimcoreadmin/img/flat-color-icons/down.svg\",\n                            handler: function (grid, rowIndex) {\n                                if (rowIndex < (grid.getStore().getCount() - 1)) {\n                                    var rec = grid.getStore().getAt(rowIndex);\n                                    grid.getStore().removeAt(rowIndex);\n                                    grid.getStore().insert(rowIndex + 1, [rec]);\n                                }\n                            }.bind(this)\n                        }\n                    ]\n                }\n            ],\n            columnLines: true,\n            trackMouseOver: true,\n            stripeRows: true,\n            autoHeight: true,\n            title: t('column_configuration')\n        });\n\n        this.panel = new Ext.Panel({\n            region: \"center\",\n            id: \"pimcore_sql_panel_\" + this.data.name,\n            labelWidth: 150,\n            autoScroll: true,\n            border: false,\n            items: [\n                this.getGeneralDefinitionPanel(),\n                this.getSourceDefinitionPanel(),\n                this.columnGrid,\n                this.getChartDefinitionPanel()\n            ],\n            buttons: panelButtons,\n            title: this.data.name,\n            bodyStyle: \"padding: 20px;\",\n            closable: true,\n            listeners: {\n                afterrender: this.getColumnSettings.bind(this)\n            }\n        });\n\n        var user = pimcore.globalmanager.get(\"user\");\n        if (user.isAllowed(\"share_configurations\")) {\n            this.panel.add(this.getPermissionPanel());\n        }\n\n        this.parentPanel.getEditPanel().add(this.panel);\n        this.parentPanel.getEditPanel().setActiveTab(this.panel);\n\n        pimcore.layout.refresh();\n    },\n\n    getGeneralDefinitionPanel: function () {\n        this.generalDefinitionForm = new Ext.form.FormPanel({\n            border: false,\n            items: [{\n                xtype: \"fieldset\",\n                itemId: \"generalFieldset\",\n                title: t(\"general\"),\n                collapsible: false,\n                defaults: {\n                    width: 400\n                },\n                items: [{\n                    xtype: \"textfield\",\n                    name: \"name\",\n                    value: this.data.name,\n                    fieldLabel: t(\"name\"),\n                    disabled: true\n                }, {\n                    xtype: \"textfield\",\n                    name: \"niceName\",\n                    value: this.data.niceName,\n                    fieldLabel: t(\"nice_name\")\n                }, {\n                    xtype: \"textfield\",\n                    name: \"iconClass\",\n                    value: this.data.iconClass,\n                    fieldLabel: t(\"icon_class\")\n                }, {\n                    xtype: \"textfield\",\n                    name: \"group\",\n                    value: this.data.group,\n                    fieldLabel: t(\"group\")\n                }, {\n                    xtype: \"textfield\",\n                    name: \"reportClass\",\n                    value: this.data.reportClass,\n                    fieldLabel: t(\"custom_report_class\")\n                }, {\n                    xtype: \"textfield\",\n                    name: \"groupIconClass\",\n                    value: this.data.groupIconClass,\n                    fieldLabel: t(\"group_icon_class\")\n                }, {\n                    xtype: \"checkbox\",\n                    name: \"menuShortcut\",\n                    checked: this.data.menuShortcut,\n                    fieldLabel: t(\"create_menu_shortcut\")\n                }\n                ]\n            }]\n        });\n\n        return this.generalDefinitionForm;\n    },\n\n    getChartDefinitionPanel: function () {\n\n        var chartTypeSelector = new Ext.form.ComboBox({\n            triggerAction: 'all',\n            lazyRender: true,\n            queryMode: 'local',\n            name: 'chartType',\n            fieldLabel: t('custom_report_charttype'),\n            value: this.data.chartType,\n            store: new Ext.data.ArrayStore({\n                fields: [\n                    'chartType',\n                    'text'\n                ],\n                data: [['', t('custom_report_charttype_none')], ['pie', t('custom_report_charttype_pie')], ['line', t('custom_report_charttype_line')], ['bar', t('custom_report_charttype_bar')]]\n            }),\n            valueField: 'chartType',\n            displayField: 'text',\n            listeners: {\n                afterrender: function () {\n                    this.updateTypeSpecificCartDefinitionPanel(this.data.chartType);\n                }.bind(this),\n                select: function (combo, record, index) {\n                    var chartType = combo.getValue();\n                    this.updateTypeSpecificCartDefinitionPanel(chartType);\n                }.bind(this)\n            }\n        });\n\n        this.pieChartDefinitionPanel = this.getPieChartDefinitionPanel();\n        this.lineChartDefinitionPanel = this.getLineChartDefinitionPanel();\n\n        this.chartDefinitionForm = new Ext.form.FormPanel({\n            border: false,\n            items: [{\n                xtype: 'fieldset',\n                itemId: \"chartdefinitionFieldset\",\n                title: t(\"custom_report_chart_settings\"),\n                style: \"margin-top: 20px;margin-bottom: 20px\",\n                collapsible: false,\n                items: [\n                    chartTypeSelector,\n                    this.pieChartDefinitionPanel,\n                    this.lineChartDefinitionPanel\n                ]\n            }]\n        });\n\n\n        return this.chartDefinitionForm;\n    },\n\n    getPermissionPanel: function () {\n\n        var items = [];\n\n        var user = pimcore.globalmanager.get(\"user\");\n\n        if (user.admin) {\n            var shareGlobally = new Ext.form.field.Checkbox(\n                {\n                    fieldLabel: t(\"share_globally\"),\n                    inputValue: true,\n                    name: \"shareGlobally\",\n                    value: this.data.shareGlobally\n                }\n            );\n\n            items.push(shareGlobally);\n        }\n\n        if (user.isAllowed(\"share_configurations\")) {\n\n            var userStore = new Ext.data.JsonStore({\n                autoDestroy: true,\n                autoLoad: true,\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_admin_user_getusersforsharing'),\n                    extraParams: {\n                        include_current_user: true,\n                        permission: 'reports'\n                    },\n                    reader: {\n                        rootProperty: 'data',\n                        idProperty: 'id',\n                    }\n                },\n                fields: ['id', 'label']\n            });\n\n            var userSharingField = Ext.create('Ext.form.field.Tag', {\n                name: \"sharedUserIds\",\n                width: '100%',\n                height: 100,\n                fieldLabel: t(\"visible_to_users\"),\n                queryDelay: 0,\n                resizable: true,\n                queryMode: 'local',\n                minChars: 1,\n                store: userStore,\n                displayField: 'label',\n                valueField: 'id',\n                forceSelection: true,\n                filterPickList: true,\n                value: this.data.sharedUserIds ? this.data.sharedUserIds : \"\"\n            });\n            items.push(userSharingField);\n\n            var rolesStore = new Ext.data.JsonStore({\n                autoDestroy: true,\n                autoLoad: true,\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_admin_user_getrolesforsharing'),\n                    extraParams: {\n                        permission: 'reports'\n                    },\n                    reader: {\n                        rootProperty: 'data',\n                        idProperty: 'id'\n                    }\n                },\n                fields: ['id', 'label']\n            });\n\n            var rolesSharingField = Ext.create('Ext.form.field.Tag', {\n                name: \"sharedRoleIds\",\n                width: '100%',\n                height: 100,\n                fieldLabel: t(\"visible_to_roles\"),\n                queryDelay: 0,\n                resizable: true,\n                queryMode: 'local',\n                minChars: 1,\n                store: rolesStore,\n                displayField: 'label',\n                valueField: 'id',\n                forceSelection: true,\n                filterPickList: true,\n                value: this.data.sharedRoleIds ? this.data.sharedRoleIds : \"\"\n            });\n            items.push(rolesSharingField);\n        }\n\n        if (user.isAllowed(\"share_configurations\")) {\n            items.push(this.userSharingField);\n            items.push(this.rolesSharingField);\n        }\n\n        this.permissionsForm = new Ext.form.FormPanel({\n            border: false,\n            items: [{\n                xtype: 'fieldset',\n                itemId: \"permissionFieldSet\",\n                title: t(\"custom_report_permissions\"),\n                style: \"margin-top: 20px;margin-bottom: 20px\",\n                collapsible: false,\n                items: items\n            }]\n        });\n\n        return this.permissionsForm;\n    },\n\n    updateTypeSpecificCartDefinitionPanel: function (chartType) {\n        this.pieChartDefinitionPanel.setVisible(false);\n        this.lineChartDefinitionPanel.setVisible(false);\n\n        if (chartType == \"pie\") {\n            this.pieChartDefinitionPanel.setVisible(true);\n        }\n        if (chartType == \"line\" || chartType == \"bar\") {\n            this.lineChartDefinitionPanel.setVisible(true);\n        }\n\n        this.chartDefinitionForm.updateLayout();\n    },\n\n    getPieChartDefinitionPanel: function () {\n        return new Ext.form.FieldSet({\n            title: t(\"custom_report_chart_options\"),\n            hidden: true,\n            style: \"margin-top: 20px;margin-bottom: 20px\",\n            collapsible: false,\n            items: [new Ext.form.ComboBox({\n                triggerAction: 'all',\n                lazyRender: false,\n                name: 'pieLabelColumn',\n                value: this.data.pieLabelColumn,\n                queryMode: 'local',\n                width: 400,\n                fieldLabel: t('custom_report_labelcolumn'),\n                store: this.columnStore,\n                valueField: 'name',\n                displayField: 'name'\n            }),\n                new Ext.form.ComboBox({\n                    triggerAction: 'all',\n                    lazyRender: true,\n                    name: 'pieColumn',\n                    value: this.data.pieColumn,\n                    queryMode: 'local',\n                    width: 400,\n                    fieldLabel: t('custom_report_datacolumn'),\n                    store: this.columnStore,\n                    valueField: 'name',\n                    displayField: 'name'\n                })\n            ]\n        });\n    },\n\n    getLineChartDefinitionPanel: function () {\n        return new Ext.form.FieldContainer({\n            title: t(\"custom_report_chart_options\"),\n            hidden: true,\n            style: \"margin-top: 20px;margin-bottom: 20px\",\n            collapsible: false,\n            listeners: {\n                afterrender: function () {\n                    if (this.data.yAxis && this.data.yAxis.length > 1) {\n                        for (var i = 1; i < this.data.yAxis.length; i++) {\n                            this.addAdditionalYAxis(this.data.yAxis[i]);\n                        }\n                    }\n                }.bind(this)\n            },\n            items: [\n                new Ext.form.ComboBox({\n                    triggerAction: 'all',\n                    lazyRender: true,\n                    name: 'xAxis',\n                    queryMode: 'local',\n                    width: 400,\n                    value: this.data.xAxis,\n                    fieldLabel: t('custom_report_x_axis'),\n                    store: this.columnStore,\n                    valueField: 'name',\n                    displayField: 'name'\n                }), {\n                    xtype: \"fieldcontainer\",\n                    layout: 'hbox',\n                    fieldLabel: t(\"custom_report_y_axis\"),\n                    items: [{\n                        xtype: \"combo\",\n                        triggerAction: 'all',\n                        lazyRender: true,\n                        name: 'yAxis',\n                        queryMode: 'local',\n                        width: 295,\n                        store: this.columnStore,\n                        value: this.data.yAxis ? this.data.yAxis[0] : null,\n                        valueField: 'name',\n                        displayField: 'name'\n                    }, {\n                        xtype: \"button\",\n                        iconCls: \"pimcore_icon_add\",\n                        handler: function () {\n                            this.addAdditionalYAxis();\n                        }.bind(this)\n                    }]\n                }\n            ]\n        });\n    },\n\n    addAdditionalYAxis: function (value) {\n        this.lineChartDefinitionPanel.add({\n            xtype: \"fieldcontainer\",\n            layout: 'hbox',\n            fieldLabel: t(\"custom_report_y_axis\"),\n            items: [{\n                xtype: \"combo\",\n                triggerAction: 'all',\n                lazyRender: true,\n                name: 'yAxis',\n                queryMode: 'local',\n                width: 295,\n                store: this.columnStore,\n                value: value ? value : null,\n                valueField: 'name',\n                displayField: 'name'\n            }, {\n                xtype: \"button\",\n                iconCls: \"pimcore_icon_delete\",\n                handler: function (button) {\n                    this.lineChartDefinitionPanel.remove(button.findParentByType('fieldcontainer'));\n                    this.lineChartDefinitionPanel.updateLayout();\n                }.bind(this)\n            }]\n        });\n        this.lineChartDefinitionPanel.updateLayout();\n    },\n\n    getSourceDefinitionPanel: function () {\n\n        this.sourceDefinitionsItems = new Ext.Panel({\n            style: \"margin-bottom: 20px\",\n            items: [\n                this.getAddControl()\n            ]\n        });\n\n        var sourceDefinitionFieldset = new Ext.form.FieldSet({\n            itemId: \"sourcedefinitionFieldset\",\n            title: t(\"source_definition\"),\n            style: \"margin-top: 20px;margin-bottom: 20px\",\n            collapsible: false,\n            items: [\n                this.sourceDefinitionsItems,\n                {\n                    xtype: \"displayfield\",\n                    name: \"errorMessage\",\n                    itemId: \"errorMessage\",\n                    fieldStyle: \"color: red;\"\n                }\n            ]\n        });\n\n        if (this.data.dataSourceConfig) {\n            for (var i = 0; i < this.data.dataSourceConfig.length; i++) {\n                if (this.data.dataSourceConfig[i]) {\n                    this.addSourceDefinition(this.data.dataSourceConfig[i]);\n                }\n            }\n        }\n        return sourceDefinitionFieldset;\n    },\n\n    getDeleteControl: function (title, index) {\n\n        var items = [{xtype: 'tbtext', text: title}];\n\n        items.push({\n            cls: \"pimcore_block_button_minus\",\n            iconCls: \"pimcore_icon_minus\",\n            listeners: {\n                \"click\": this.removeSourceDefinition.bind(this, index)\n            }\n        });\n\n        var toolbar = new Ext.Toolbar({\n            items: items\n        });\n\n        return toolbar;\n    },\n\n    removeSourceDefinition: function (key) {\n        for (var i = 0; i < this.currentElements.length; i++) {\n            if (this.currentElements[i].key == key) {\n                this.currentElements[i].deleted = true;\n                this.sourceDefinitionsItems.remove(this.currentElements[i].adapter.getElement());\n            }\n        }\n        this.currentElementCount--;\n        this.sourceDefinitionsItems.remove(this.sourceDefinitionsItems.getComponent(0));\n        this.sourceDefinitionsItems.insert(0, this.getAddControl());\n        this.sourceDefinitionsItems.updateLayout();\n    },\n\n    getAddControl: function () {\n        var classMenu = [];\n\n        if (this.currentElementCount < 1) {\n\n            var definitionNames = Object.keys(pimcore.report.custom.definition);\n            for(var i = 0; i < definitionNames.length; i++) {\n                classMenu.push(\n                    {\n                        text: t(\"custom_report_adapter_\" + definitionNames[i], ucfirst(definitionNames[i])),\n                        handler: this.addSourceDefinition.bind(this, {type: definitionNames[i]}),\n                        iconCls: \"pimcore_icon_objectbricks\"\n                    }\n                );\n            }\n        }\n\n        var items = [];\n\n        if (classMenu.length == 1) {\n            items.push({\n                cls: \"pimcore_block_button_plus\",\n                text: t(classMenu[0].text),\n                iconCls: \"pimcore_icon_plus\",\n                handler: classMenu[0].handler\n            });\n        } else if (classMenu.length > 1) {\n            items.push({\n                cls: \"pimcore_block_button_plus\",\n                iconCls: \"pimcore_icon_plus\",\n                menu: classMenu\n            });\n        } else {\n            items.push({\n                xtype: \"tbtext\",\n                text: t(\"no_further_sources_allowed\")\n            });\n        }\n\n        var toolbar = new Ext.Toolbar({\n            items: items\n        });\n\n        return toolbar;\n    },\n\n    addSourceDefinition: function (sourceDefinitionData) {\n        this.sourceDefinitionsItems.remove(this.sourceDefinitionsItems.getComponent(0));\n\n        if (!this.currentElements) {\n            this.currentElements = [];\n        }\n\n        var key = this.currentElements.length;\n\n        sourceDefinitionData.type = sourceDefinitionData.type ? sourceDefinitionData.type : 'sql';\n\n        var adapter = new pimcore.report.custom.definition[sourceDefinitionData.type](sourceDefinitionData, key, this.getDeleteControl(t(\"custom_report_adapter_\" + sourceDefinitionData.type, ucfirst(sourceDefinitionData.type)), key), this.getColumnSettings.bind(this));\n\n\n        this.currentElements.push({key: key, adapter: adapter});\n        this.currentElementCount++;\n\n        this.sourceDefinitionsItems.add(adapter.getElement());\n        this.sourceDefinitionsItems.insert(0, this.getAddControl());\n        this.sourceDefinitionsItems.updateLayout();\n    },\n\n    getColumnSettings: function () {\n        var m = this.getValues();\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_reports_customreport_columnconfig'),\n            method: \"post\",\n            params: {\n                configuration: Ext.encode(m.dataSourceConfig),\n                name: this.data.name\n            },\n            success: function (response) {\n                var res = Ext.decode(response.responseText);\n\n                if (res.success) {\n                    this.updateColumnSettings(res.columns);\n                }\n\n                var errorField = this.panel.getComponent(\"sourcedefinitionFieldset\").getComponent(\"errorMessage\");\n\n                errorField.setValue(\"\");\n                if (!res.success && res.errorMessage) {\n                    errorField.setValue(res.errorMessage);\n                }\n            }.bind(this)\n        });\n    },\n\n    updateColumnSettings: function (columns) {\n\n        var insertData, isInStore, o;\n        var cc = this.data.columnConfiguration;\n\n        if (columns && columns.length > 0) {\n            // cleanup\n            this.columnStore.each(function (columns, rec) {\n                if (!in_array(rec.get(\"name\"), columns)) {\n                    this.columnStore.remove(rec);\n                }\n            }.bind(this, columns));\n\n            // insert\n            for (var i = 0; i < columns.length; i++) {\n                isInStore = (this.columnStore.findExact(\"name\", columns[i]) >= 0) ? true : false;\n                if (!isInStore) {\n\n                    insertData = {\n                        name: columns[i],\n                        display: true,\n                        \"export\": true,\n                        order: true,\n                        width: \"\",\n                        label: \"\"\n                    };\n\n                    if (typeof cc == \"object\" && cc.length > 0) {\n                        for (o = 0; o < cc.length; o++) {\n                            if (cc[o][\"name\"] == columns[i]) {\n                                insertData[\"display\"] = cc[o][\"display\"];\n                                insertData[\"export\"] = cc[o][\"export\"];\n                                insertData[\"order\"] = cc[o][\"order\"];\n                                insertData[\"filter\"] = cc[o][\"filter\"];\n                                insertData[\"displayType\"] = cc[o][\"displayType\"];\n                                insertData[\"filter_drilldown\"] = cc[o][\"filter_drilldown\"];\n                                insertData[\"width\"] = cc[o][\"width\"];\n                                insertData[\"label\"] = cc[o][\"label\"];\n                                insertData[\"columnAction\"] = cc[o][\"columnAction\"];\n                                break;\n                            }\n                        }\n                    }\n\n                    this.columnStore.add(insertData);\n                }\n            }\n        }\n    },\n\n    getValues: function () {\n        var key;\n        var allValues = this.generalDefinitionForm.getForm().getFieldValues();\n\n        var chartValues = this.chartDefinitionForm.getForm().getFieldValues();\n        for (key in chartValues) {\n            allValues[key] = chartValues[key];\n        }\n\n        if(this.permissionsForm) {\n            var permissionValues = this.permissionsForm.getForm().getFieldValues();\n            for (key in permissionValues) {\n                allValues[key] = permissionValues[key];\n            }\n        }\n\n        var columnData = [];\n        this.columnStore.each(function (rec) {\n            columnData.push(rec.data);\n        }.bind(this));\n\n        allValues[\"columnConfiguration\"] = columnData;\n\n        var dataSourceConfig = [];\n        for (var i = 0; i < this.currentElements.length; i++) {\n            if (!this.currentElements[i].deleted) {\n                dataSourceConfig.push(this.currentElements[i].adapter.getValues());\n            }\n        }\n\n        allValues[\"dataSourceConfig\"] = dataSourceConfig;\n        allValues[\"sql\"] = \"\";\n\n        return allValues;\n    },\n\n    save: function () {\n\n        var m = this.getValues();\n\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_reports_customreport_update'),\n            method: \"PUT\",\n            params: {\n                configuration: Ext.encode(m),\n                name: this.data.name\n            },\n            success: this.saveOnComplete.bind(this)\n        });\n    },\n\n    saveOnComplete: function () {\n        this.parentPanel.tree.getStore().load();\n        pimcore.helpers.showNotification(t(\"success\"), t(\"saved_successfully\"), \"success\");\n\n        Ext.MessageBox.confirm(t(\"info\"), t(\"reload_pimcore_changes\"), function (buttonValue) {\n            if (buttonValue == \"yes\") {\n                window.location.reload();\n            }\n        }.bind(this));\n    }\n});\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Reports;\n\nuse Pimcore\\Model\\Element\\Service;\nuse Pimcore\\Model\\Exception\\ConfigWriteException;\nuse Pimcore\\Model\\Tool\\CustomReport;\nuse Symfony\\Component\\Filesystem\\Exception\\FileNotFoundException;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @Route(\"/custom-report\")\n *\n * @internal\n */\nclass CustomReportController extends ReportsControllerBase\n{\n    /**\n     * @Route(\"/tree\", name=\"pimcore_admin_reports_customreport_tree\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function treeAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n        $reports = CustomReport\\Config::getReportsList();\n\n        return $this->adminJson($reports);\n    }\n\n    /**\n     * @Route(\"/portlet-report-list\", name=\"pimcore_admin_reports_customreport_portletreportlist\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function portletReportListAction(Request $request)\n    {\n        $this->checkPermission('reports');\n        $reports = CustomReport\\Config::getReportsList($this->getAdminUser());\n\n        return $this->adminJson(['data' => $reports]);\n    }\n\n    /**\n     * @Route(\"/add\", name=\"pimcore_admin_reports_customreport_add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $success = false;\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n\n        if (!$report) {\n            $report = new CustomReport\\Config();\n            if (!$report->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n\n            $report->setName($request->get('name'));\n            $report->save();\n\n            $success = true;\n        }\n\n        return $this->adminJson(['success' => $success, 'id' => $report->getName()]);\n    }\n\n    /**\n     * @Route(\"/delete\", name=\"pimcore_admin_reports_customreport_delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        if (!$report->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $report->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/clone\", name=\"pimcore_admin_reports_customreport_clone\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function cloneAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $newName = $request->get('newName');\n        $report = CustomReport\\Config::getByName($newName);\n        if ($report) {\n            throw new \\Exception('report already exists');\n        }\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        $reportData = $this->encodeJson($report);\n        $reportData = $this->decodeJson($reportData);\n\n        unset($reportData['name']);\n        $reportData['name'] = $newName;\n\n        foreach ($reportData as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($report, $setter)) {\n                $report->$setter($value);\n            }\n        }\n\n        $report->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/get\", name=\"pimcore_admin_reports_customreport_get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAction(Request $request)\n    {\n        $this->checkPermissionsHasOneOf(['reports_config', 'reports']);\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        $data = $report->getObjectVars();\n        $data['writeable'] = $report->isWriteable();\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/update\", name=\"pimcore_admin_reports_customreport_update\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function updateAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        if (!$report->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $data = $this->decodeJson($request->get('configuration'));\n\n        if (!is_array($data['yAxis'])) {\n            $data['yAxis'] = strlen($data['yAxis']) ? [$data['yAxis']] : [];\n        }\n\n        foreach ($data as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($report, $setter)) {\n                $report->$setter($value);\n            }\n        }\n\n        $report->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/column-config\", name=\"pimcore_admin_reports_customreport_columnconfig\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function columnConfigAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        $columnConfiguration = $report->getColumnConfiguration();\n        if (!is_array($columnConfiguration)) {\n            $columnConfiguration = [];\n        }\n\n        $configuration = json_decode($request->get('configuration'));\n        $configuration = $configuration[0] ?? null;\n\n        $success = false;\n        $errorMessage = null;\n\n        $result = [];\n\n        try {\n            $adapter = CustomReport\\Config::getAdapter($configuration);\n            $columns = $adapter->getColumns($configuration);\n            if (!is_array($columns)) {\n                $columns = [];\n            }\n\n            foreach ($columnConfiguration as $item) {\n                $name = $item['name'];\n                if (in_array($name, $columns)) {\n                    $result[] = $name;\n                    array_splice($columns, array_search($name, $columns), 1);\n                }\n            }\n            foreach ($columns as $remainingColumn) {\n                $result[] = $remainingColumn;\n            }\n\n            $success = true;\n        } catch (\\Exception $e) {\n            $errorMessage = $e->getMessage();\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n            'columns' => $result,\n            'errorMessage' => $errorMessage,\n        ]);\n    }\n\n    /**\n     * @Route(\"/get-report-config\", name=\"pimcore_admin_reports_customreport_getreportconfig\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getReportConfigAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $reports = [];\n\n        $list = new CustomReport\\Config\\Listing();\n        $items = $list->getDao()->loadForGivenUser($this->getAdminUser());\n\n        foreach ($items as $report) {\n            $reports[] = [\n                'name' => htmlspecialchars($report->getName()),\n                'niceName' => htmlspecialchars($report->getNiceName()),\n                'iconClass' => htmlspecialchars($report->getIconClass()),\n                'group' => htmlspecialchars($report->getGroup()),\n                'groupIconClass' => htmlspecialchars($report->getGroupIconClass()),\n                'menuShortcut' => $report->getMenuShortcut(),\n                'reportClass' => htmlspecialchars($report->getReportClass()),\n            ];\n        }\n\n        return $this->adminJson([\n            'success' => true,\n            'reports' => $reports,\n        ]);\n    }\n\n    /**\n     * @Route(\"/data\", name=\"pimcore_admin_reports_customreport_data\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function dataAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $offset = $request->get('start', 0);\n        $limit = $request->get('limit', 40);\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n        $sort = null;\n        $dir = null;\n        if ($sortingSettings['orderKey']) {\n            $sort = $sortingSettings['orderKey'];\n            $dir = $sortingSettings['order'];\n        }\n\n        $filters = ($request->get('filter') ? json_decode($request->get('filter'), true) : null);\n\n        $drillDownFilters = $request->get('drillDownFilters', null);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        if (!$config) {\n            throw $this->createNotFoundException();\n        }\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n\n        $result = $adapter->getData($filters, $sort, $dir, $offset, $limit, null, $drillDownFilters);\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $result['data'],\n            'total' => $result['total'],\n        ]);\n    }\n\n    /**\n     * @Route(\"/drill-down-options\", name=\"pimcore_admin_reports_customreport_drilldownoptions\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function drillDownOptionsAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $field = $request->get('field');\n        $filters = ($request->get('filter') ? json_decode($request->get('filter'), true) : null);\n        $drillDownFilters = $request->get('drillDownFilters', null);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        if (!$config) {\n            throw $this->createNotFoundException();\n        }\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n        $result = $adapter->getAvailableOptions($filters, $field, $drillDownFilters);\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $result['data'],\n        ]);\n    }\n\n    /**\n     * @Route(\"/chart\", name=\"pimcore_admin_reports_customreport_chart\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function chartAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $sort = $request->get('sort');\n        $dir = $request->get('dir');\n        $filters = ($request->get('filter') ? json_decode($request->get('filter'), true) : null);\n        $drillDownFilters = $request->get('drillDownFilters', null);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        if (!$config) {\n            throw $this->createNotFoundException();\n        }\n\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n        $result = $adapter->getData($filters, $sort, $dir, null, null, null, $drillDownFilters);\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $result['data'],\n            'total' => $result['total'],\n        ]);\n    }\n\n    /**\n     * @Route(\"/create-csv\", name=\"pimcore_admin_reports_customreport_createcsv\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function createCsvAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        set_time_limit(300);\n\n        $sort = $request->get('sort');\n        $dir = $request->get('dir');\n        $filters = $request->get('filter') ? json_decode(urldecode($request->get('filter')), true) : null;\n        $drillDownFilters = $request->get('drillDownFilters', null);\n        $includeHeaders = $request->get('headers', false);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        if (!$config) {\n            throw $this->createNotFoundException();\n        }\n\n        $columns = $config->getColumnConfiguration();\n        $fields = [];\n        foreach ($columns as $column) {\n            if ($column['export']) {\n                $fields[] = $column['name'];\n            }\n        }\n\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n\n        $offset = $request->get('offset', 0);\n        $limit = 5000;\n        $tempData = [];\n        $result = $adapter->getData($filters, $sort, $dir, $offset * $limit, $limit, $fields, $drillDownFilters);\n        ++$offset;\n\n        if (!($exportFile = $request->get('exportFile'))) {\n            $exportFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/report-export-' . uniqid() . '.csv';\n            @unlink($exportFile);\n        } else {\n            $exportFile = PIMCORE_SYSTEM_TEMP_DIRECTORY.'/'.$exportFile;\n        }\n\n        $fp = fopen($exportFile, 'a');\n\n        if ($includeHeaders) {\n            fputcsv($fp, $fields, ';');\n        }\n\n        foreach ($result['data'] as $row) {\n            $row = Service::escapeCsvRecord($row);\n            fputcsv($fp, array_values($row), ';');\n        }\n\n        fclose($fp);\n\n        $progress = $result['total'] ? ($offset * $limit) / $result['total'] : 1;\n        $progress = $progress > 1 ? 1 : $progress;\n\n        return new JsonResponse([\n            'exportFile' => basename($exportFile),\n            'offset' => $offset,\n            'progress' => $progress,\n            'finished' => empty($result['data']) || count($result['data']) < $limit,\n        ]);\n    }\n\n    /**\n     * @Route(\"/download-csv\", name=\"pimcore_admin_reports_customreport_downloadcsv\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return BinaryFileResponse\n     */\n    public function downloadCsvAction(Request $request)\n    {\n        $this->checkPermission('reports');\n        if ($exportFile = $request->get('exportFile')) {\n            $exportFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/' . basename($exportFile);\n            $response = new BinaryFileResponse($exportFile);\n            $response->headers->set('Content-Type', 'text/csv; charset=UTF-8');\n            $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, 'export.csv');\n            $response->deleteFileAfterSend(true);\n\n            return $response;\n        }\n\n        throw new FileNotFoundException(\"File \\\"$exportFile\\\" not found!\");\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.report.custom.item\");\npimcore.report.custom.item = Class.create({\n\n\n    initialize: function (data, parentPanel) {\n        this.parentPanel = parentPanel;\n        this.data = data;\n        this.currentElements = [];\n        this.currentElementCount = 0;\n        this.addLayout();\n    },\n\n\n    addLayout: function () {\n\n        var panelButtons = [];\n\n        let buttonConfig = {\n            text: t(\"save\"),\n            iconCls: \"pimcore_icon_apply\",\n            handler: this.save.bind(this),\n            disabled: !this.data.writeable\n        };\n\n        if (!this.data.writeable) {\n            buttonConfig.tooltip = t(\"config_not_writeable\");\n        }\n\n        panelButtons.push(buttonConfig);\n\n        this.columnStore = Ext.create('Ext.data.Store', {\n            autoDestroy: false,\n            proxy: {\n                type: 'memory'\n            },\n            data: [],\n            fields: [\"name\", \"filter\", \"displayType\", \"filter_drilldown\", \"display\", \"export\", \"order\", \"width\", \"label\", \"columnAction\"]\n        });\n\n        var checkDisplay = new Ext.grid.column.Check({\n            text: t(\"display\"),\n            dataIndex: \"display\",\n            width: 50\n        });\n\n        var checkExport = new Ext.grid.column.Check({\n            text: t(\"export\"),\n            dataIndex: \"export\",\n            width: 50\n        });\n\n        var checkOrder = new Ext.grid.column.Check({\n            text: t(\"order\"),\n            dataIndex: \"order\",\n            width: 50\n        });\n\n        this.cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\n            clicksToEdit: 1\n        });\n\n        var actionStore = new Ext.data.SimpleStore({\n            fields: ['key', 'name'],\n            data: [\n                [\"\", t(\"none\")],\n                [\"openDocument\", t(\"open_document_by_id\")],\n                [\"openAsset\", t(\"open_asset_by_id\")],\n                [\"openObject\", t(\"open_object_by_id\")],\n                [\"openUrl\", t(\"open_url\")]\n            ]\n        });\n\n        var displayStore = new Ext.data.SimpleStore({\n            fields: ['key', 'name'],\n            data: [\n                [\"\", t(\"none\")],\n                [\"text\", t(\"text\")],\n                [\"date\", t(\"date\")],\n                [\"hide\", t(\"hide\")]\n            ]\n        });\n\n        this.columnGrid = Ext.create('Ext.grid.Panel', {\n            store: this.columnStore,\n            plugins: [\n                this.cellEditing\n            ],\n            columns: [\n                {text: t(\"name\"), sortable: false, dataIndex: 'name', editable: false, width: 200},\n                checkDisplay,\n                checkExport,\n                checkOrder,\n                {\n                    text: t(\"filter_type\"),\n                    width: 100,\n                    sortable: false,\n                    dataIndex: 'filter',\n                    editable: true,\n                    editor: new Ext.form.ComboBox({\n                        store: [\n                            [\"\", t(\"empty\")],\n                            [\"string\", t(\"text\")],\n                            [\"numeric\", t(\"numeric\")],\n                            [\"date\", t(\"date\")],\n                            [\"boolean\", t(\"bool\")]\n                        ],\n                        queryMode: 'local',\n                        typeAhead: false,\n                        editable: false,\n                        forceSelection: true,\n                        triggerAction: \"all\"\n                    })\n                },\n                {\n                    text: t(\"display_type\"),\n                    width: 100,\n                    sortable: false,\n                    dataIndex: 'displayType',\n                    editable: true,\n                    editor: new Ext.form.ComboBox({\n                        store: displayStore,\n                        valueField: \"key\",\n                        displayField: 'name',\n                        queryMode: 'local',\n                        typeAhead: false,\n                        editable: false,\n                        forceSelection: true,\n                        triggerAction: \"all\"\n\n                    }),\n\n                    renderer: function (value, metaData, record, rowIndex, colIndex, store, view) {\n                        try {\n                            var rec = displayStore.findRecord(\"key\", value);\n                            if (rec) {\n                                return rec.get(\"name\");\n                            }\n                        }\n                        catch (e) {\n                        }\n\n                        return value;\n                    }\n                },\n                {\n                    text: t(\"custom_report_filter_drilldown\"),\n                    width: 100,\n                    sortable: false,\n                    dataIndex: 'filter_drilldown',\n                    editable: true,\n                    editor: new Ext.form.ComboBox({\n                        store: [\n                            //[\"date\", t(\"date\")],\n                            [\"\", t(\"empty\")],\n                            [\"only_filter\", t(\"custom_report_only_filter\")],\n                            [\"filter_and_show\", t(\"custom_report_filter_and_show\")]\n                        ],\n                        queryMode: 'local',\n                        typeAhead: false,\n                        editable: false,\n                        forceSelection: true,\n                        triggerAction: \"all\"\n                    })\n                },\n                {\n                    text: t(\"width\"),\n                    sortable: false,\n                    dataIndex: 'width',\n                    editable: true,\n                    width: 70,\n                    editor: new Ext.form.field.Number({\n                        decimalPrecision: 0\n                    })\n                },\n                {\n                    text: t(\"label\"),\n                    sortable: false,\n                    dataIndex: 'label',\n                    editable: true,\n                    width: 150,\n                    editor: new Ext.form.TextField({})\n                },\n                {\n                    text: t(\"action\"), width: 160, sortable: true, dataIndex: 'columnAction',\n                    editor: new Ext.form.ComboBox({\n                        store: actionStore,\n                        valueField: \"key\",\n                        displayField: 'name',\n                        queryMode: 'local',\n                        typeAhead: false,\n                        editable: false,\n                        forceSelection: true,\n                        triggerAction: \"all\",\n                    })\n                    ,\n                    renderer: function (value, metaData, record, rowIndex, colIndex, store, view) {\n                        try {\n                            var rec = actionStore.findRecord(\"key\", value);\n                            if (rec) {\n                                return rec.get(\"name\");\n                            }\n                        }\n                        catch (e) {\n                        }\n\n                        return value;\n                    },\n                    filter: 'string'\n                }, {\n                    xtype: 'actioncolumn',\n                    menuText: t('up'),\n                    width: 30,\n                    items: [\n                        {\n                            tooltip: t('up'),\n                            icon: \"/bundles/pimcoreadmin/img/flat-color-icons/up.svg\",\n                            handler: function (grid, rowIndex) {\n                                if (rowIndex > 0) {\n                                    var rec = grid.getStore().getAt(rowIndex);\n                                    grid.getStore().removeAt(rowIndex);\n                                    grid.getStore().insert(rowIndex - 1, [rec]);\n                                }\n                            }.bind(this)\n                        }\n                    ]\n                },\n                {\n                    xtype: 'actioncolumn',\n                    menuText: t('down'),\n                    width: 30,\n                    items: [\n                        {\n                            tooltip: t('down'),\n                            icon: \"/bundles/pimcoreadmin/img/flat-color-icons/down.svg\",\n                            handler: function (grid, rowIndex) {\n                                if (rowIndex < (grid.getStore().getCount() - 1)) {\n                                    var rec = grid.getStore().getAt(rowIndex);\n                                    grid.getStore().removeAt(rowIndex);\n                                    grid.getStore().insert(rowIndex + 1, [rec]);\n                                }\n                            }.bind(this)\n                        }\n                    ]\n                }\n            ],\n            columnLines: true,\n            trackMouseOver: true,\n            stripeRows: true,\n            autoHeight: true,\n            title: t('column_configuration')\n        });\n\n        this.panel = new Ext.Panel({\n            region: \"center\",\n            id: \"pimcore_sql_panel_\" + this.data.name,\n            labelWidth: 150,\n            autoScroll: true,\n            border: false,\n            items: [\n                this.getGeneralDefinitionPanel(),\n                this.getSourceDefinitionPanel(),\n                this.columnGrid,\n                this.getChartDefinitionPanel()\n            ],\n            buttons: panelButtons,\n            title: this.data.name,\n            bodyStyle: \"padding: 20px;\",\n            closable: true,\n            listeners: {\n                afterrender: this.getColumnSettings.bind(this)\n            }\n        });\n\n        var user = pimcore.globalmanager.get(\"user\");\n        if (user.isAllowed(\"share_configurations\")) {\n            this.panel.add(this.getPermissionPanel());\n        }\n\n        this.parentPanel.getEditPanel().add(this.panel);\n        this.parentPanel.getEditPanel().setActiveTab(this.panel);\n\n        pimcore.layout.refresh();\n    },\n\n    getGeneralDefinitionPanel: function () {\n        this.generalDefinitionForm = new Ext.form.FormPanel({\n            border: false,\n            items: [{\n                xtype: \"fieldset\",\n                itemId: \"generalFieldset\",\n                title: t(\"general\"),\n                collapsible: false,\n                defaults: {\n                    width: 400\n                },\n                items: [{\n                    xtype: \"textfield\",\n                    name: \"name\",\n                    value: this.data.name,\n                    fieldLabel: t(\"name\"),\n                    disabled: true\n                }, {\n                    xtype: \"textfield\",\n                    name: \"niceName\",\n                    value: this.data.niceName,\n                    fieldLabel: t(\"nice_name\")\n                }, {\n                    xtype: \"textfield\",\n                    name: \"iconClass\",\n                    value: this.data.iconClass,\n                    fieldLabel: t(\"icon_class\")\n                }, {\n                    xtype: \"textfield\",\n                    name: \"group\",\n                    value: this.data.group,\n                    fieldLabel: t(\"group\")\n                }, {\n                    xtype: \"textfield\",\n                    name: \"reportClass\",\n                    value: this.data.reportClass,\n                    fieldLabel: t(\"custom_report_class\")\n                }, {\n                    xtype: \"textfield\",\n                    name: \"groupIconClass\",\n                    value: this.data.groupIconClass,\n                    fieldLabel: t(\"group_icon_class\")\n                }, {\n                    xtype: \"checkbox\",\n                    name: \"menuShortcut\",\n                    checked: this.data.menuShortcut,\n                    fieldLabel: t(\"create_menu_shortcut\")\n                }\n                ]\n            }]\n        });\n\n        return this.generalDefinitionForm;\n    },\n\n    getChartDefinitionPanel: function () {\n\n        var chartTypeSelector = new Ext.form.ComboBox({\n            triggerAction: 'all',\n            lazyRender: true,\n            queryMode: 'local',\n            name: 'chartType',\n            fieldLabel: t('custom_report_charttype'),\n            value: this.data.chartType,\n            store: new Ext.data.ArrayStore({\n                fields: [\n                    'chartType',\n                    'text'\n                ],\n                data: [['', t('custom_report_charttype_none')], ['pie', t('custom_report_charttype_pie')], ['line', t('custom_report_charttype_line')], ['bar', t('custom_report_charttype_bar')]]\n            }),\n            valueField: 'chartType',\n            displayField: 'text',\n            listeners: {\n                afterrender: function () {\n                    this.updateTypeSpecificCartDefinitionPanel(this.data.chartType);\n                }.bind(this),\n                select: function (combo, record, index) {\n                    var chartType = combo.getValue();\n                    this.updateTypeSpecificCartDefinitionPanel(chartType);\n                }.bind(this)\n            }\n        });\n\n        this.pieChartDefinitionPanel = this.getPieChartDefinitionPanel();\n        this.lineChartDefinitionPanel = this.getLineChartDefinitionPanel();\n\n        this.chartDefinitionForm = new Ext.form.FormPanel({\n            border: false,\n            items: [{\n                xtype: 'fieldset',\n                itemId: \"chartdefinitionFieldset\",\n                title: t(\"custom_report_chart_settings\"),\n                style: \"margin-top: 20px;margin-bottom: 20px\",\n                collapsible: false,\n                items: [\n                    chartTypeSelector,\n                    this.pieChartDefinitionPanel,\n                    this.lineChartDefinitionPanel\n                ]\n            }]\n        });\n\n\n        return this.chartDefinitionForm;\n    },\n\n    getPermissionPanel: function () {\n\n        var items = [];\n\n        var user = pimcore.globalmanager.get(\"user\");\n\n        if (user.admin) {\n            var shareGlobally = new Ext.form.field.Checkbox(\n                {\n                    fieldLabel: t(\"share_globally\"),\n                    inputValue: true,\n                    name: \"shareGlobally\",\n                    value: this.data.shareGlobally\n                }\n            );\n\n            items.push(shareGlobally);\n        }\n\n        if (user.isAllowed(\"share_configurations\")) {\n\n            var userStore = new Ext.data.JsonStore({\n                autoDestroy: true,\n                autoLoad: true,\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_admin_user_getusersforsharing'),\n                    extraParams: {\n                        include_current_user: true,\n                        permission: 'reports'\n                    },\n                    reader: {\n                        rootProperty: 'data',\n                        idProperty: 'id',\n                    }\n                },\n                fields: ['id', 'label']\n            });\n\n            var userSharingField = Ext.create('Ext.form.field.Tag', {\n                name: \"sharedUserIds\",\n                width: '100%',\n                height: 100,\n                fieldLabel: t(\"visible_to_users\"),\n                queryDelay: 0,\n                resizable: true,\n                queryMode: 'local',\n                minChars: 1,\n                store: userStore,\n                displayField: 'label',\n                valueField: 'id',\n                forceSelection: true,\n                filterPickList: true,\n                value: this.data.sharedUserIds ? this.data.sharedUserIds : \"\"\n            });\n            items.push(userSharingField);\n\n            var rolesStore = new Ext.data.JsonStore({\n                autoDestroy: true,\n                autoLoad: true,\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_admin_user_getrolesforsharing'),\n                    extraParams: {\n                        permission: 'reports'\n                    },\n                    reader: {\n                        rootProperty: 'data',\n                        idProperty: 'id'\n                    }\n                },\n                fields: ['id', 'label']\n            });\n\n            var rolesSharingField = Ext.create('Ext.form.field.Tag', {\n                name: \"sharedRoleIds\",\n                width: '100%',\n                height: 100,\n                fieldLabel: t(\"visible_to_roles\"),\n                queryDelay: 0,\n                resizable: true,\n                queryMode: 'local',\n                minChars: 1,\n                store: rolesStore,\n                displayField: 'label',\n                valueField: 'id',\n                forceSelection: true,\n                filterPickList: true,\n                value: this.data.sharedRoleIds ? this.data.sharedRoleIds : \"\"\n            });\n            items.push(rolesSharingField);\n        }\n\n        if (user.isAllowed(\"share_configurations\")) {\n            items.push(this.userSharingField);\n            items.push(this.rolesSharingField);\n        }\n\n        this.permissionsForm = new Ext.form.FormPanel({\n            border: false,\n            items: [{\n                xtype: 'fieldset',\n                itemId: \"permissionFieldSet\",\n                title: t(\"custom_report_permissions\"),\n                style: \"margin-top: 20px;margin-bottom: 20px\",\n                collapsible: false,\n                items: items\n            }]\n        });\n\n        return this.permissionsForm;\n    },\n\n    updateTypeSpecificCartDefinitionPanel: function (chartType) {\n        this.pieChartDefinitionPanel.setVisible(false);\n        this.lineChartDefinitionPanel.setVisible(false);\n\n        if (chartType == \"pie\") {\n            this.pieChartDefinitionPanel.setVisible(true);\n        }\n        if (chartType == \"line\" || chartType == \"bar\") {\n            this.lineChartDefinitionPanel.setVisible(true);\n        }\n\n        this.chartDefinitionForm.updateLayout();\n    },\n\n    getPieChartDefinitionPanel: function () {\n        return new Ext.form.FieldSet({\n            title: t(\"custom_report_chart_options\"),\n            hidden: true,\n            style: \"margin-top: 20px;margin-bottom: 20px\",\n            collapsible: false,\n            items: [new Ext.form.ComboBox({\n                triggerAction: 'all',\n                lazyRender: false,\n                name: 'pieLabelColumn',\n                value: this.data.pieLabelColumn,\n                queryMode: 'local',\n                width: 400,\n                fieldLabel: t('custom_report_labelcolumn'),\n                store: this.columnStore,\n                valueField: 'name',\n                displayField: 'name'\n            }),\n                new Ext.form.ComboBox({\n                    triggerAction: 'all',\n                    lazyRender: true,\n                    name: 'pieColumn',\n                    value: this.data.pieColumn,\n                    queryMode: 'local',\n                    width: 400,\n                    fieldLabel: t('custom_report_datacolumn'),\n                    store: this.columnStore,\n                    valueField: 'name',\n                    displayField: 'name'\n                })\n            ]\n        });\n    },\n\n    getLineChartDefinitionPanel: function () {\n        return new Ext.form.FieldContainer({\n            title: t(\"custom_report_chart_options\"),\n            hidden: true,\n            style: \"margin-top: 20px;margin-bottom: 20px\",\n            collapsible: false,\n            listeners: {\n                afterrender: function () {\n                    if (this.data.yAxis && this.data.yAxis.length > 1) {\n                        for (var i = 1; i < this.data.yAxis.length; i++) {\n                            this.addAdditionalYAxis(this.data.yAxis[i]);\n                        }\n                    }\n                }.bind(this)\n            },\n            items: [\n                new Ext.form.ComboBox({\n                    triggerAction: 'all',\n                    lazyRender: true,\n                    name: 'xAxis',\n                    queryMode: 'local',\n                    width: 400,\n                    value: this.data.xAxis,\n                    fieldLabel: t('custom_report_x_axis'),\n                    store: this.columnStore,\n                    valueField: 'name',\n                    displayField: 'name'\n                }), {\n                    xtype: \"fieldcontainer\",\n                    layout: 'hbox',\n                    fieldLabel: t(\"custom_report_y_axis\"),\n                    items: [{\n                        xtype: \"combo\",\n                        triggerAction: 'all',\n                        lazyRender: true,\n                        name: 'yAxis',\n                        queryMode: 'local',\n                        width: 295,\n                        store: this.columnStore,\n                        value: this.data.yAxis ? this.data.yAxis[0] : null,\n                        valueField: 'name',\n                        displayField: 'name'\n                    }, {\n                        xtype: \"button\",\n                        iconCls: \"pimcore_icon_add\",\n                        handler: function () {\n                            this.addAdditionalYAxis();\n                        }.bind(this)\n                    }]\n                }\n            ]\n        });\n    },\n\n    addAdditionalYAxis: function (value) {\n        this.lineChartDefinitionPanel.add({\n            xtype: \"fieldcontainer\",\n            layout: 'hbox',\n            fieldLabel: t(\"custom_report_y_axis\"),\n            items: [{\n                xtype: \"combo\",\n                triggerAction: 'all',\n                lazyRender: true,\n                name: 'yAxis',\n                queryMode: 'local',\n                width: 295,\n                store: this.columnStore,\n                value: value ? value : null,\n                valueField: 'name',\n                displayField: 'name'\n            }, {\n                xtype: \"button\",\n                iconCls: \"pimcore_icon_delete\",\n                handler: function (button) {\n                    this.lineChartDefinitionPanel.remove(button.findParentByType('fieldcontainer'));\n                    this.lineChartDefinitionPanel.updateLayout();\n                }.bind(this)\n            }]\n        });\n        this.lineChartDefinitionPanel.updateLayout();\n    },\n\n    getSourceDefinitionPanel: function () {\n\n        this.sourceDefinitionsItems = new Ext.Panel({\n            style: \"margin-bottom: 20px\",\n            items: [\n                this.getAddControl()\n            ]\n        });\n\n        var sourceDefinitionFieldset = new Ext.form.FieldSet({\n            itemId: \"sourcedefinitionFieldset\",\n            title: t(\"source_definition\"),\n            style: \"margin-top: 20px;margin-bottom: 20px\",\n            collapsible: false,\n            items: [\n                this.sourceDefinitionsItems,\n                {\n                    xtype: \"displayfield\",\n                    name: \"errorMessage\",\n                    itemId: \"errorMessage\",\n                    fieldStyle: \"color: red;\"\n                }\n            ]\n        });\n\n        if (this.data.dataSourceConfig) {\n            for (var i = 0; i < this.data.dataSourceConfig.length; i++) {\n                if (this.data.dataSourceConfig[i]) {\n                    this.addSourceDefinition(this.data.dataSourceConfig[i]);\n                }\n            }\n        }\n        return sourceDefinitionFieldset;\n    },\n\n    getDeleteControl: function (title, index) {\n\n        var items = [{xtype: 'tbtext', text: title}];\n\n        items.push({\n            cls: \"pimcore_block_button_minus\",\n            iconCls: \"pimcore_icon_minus\",\n            listeners: {\n                \"click\": this.removeSourceDefinition.bind(this, index)\n            }\n        });\n\n        var toolbar = new Ext.Toolbar({\n            items: items\n        });\n\n        return toolbar;\n    },\n\n    removeSourceDefinition: function (key) {\n        for (var i = 0; i < this.currentElements.length; i++) {\n            if (this.currentElements[i].key == key) {\n                this.currentElements[i].deleted = true;\n                this.sourceDefinitionsItems.remove(this.currentElements[i].adapter.getElement());\n            }\n        }\n        this.currentElementCount--;\n        this.sourceDefinitionsItems.remove(this.sourceDefinitionsItems.getComponent(0));\n        this.sourceDefinitionsItems.insert(0, this.getAddControl());\n        this.sourceDefinitionsItems.updateLayout();\n    },\n\n    getAddControl: function () {\n        var classMenu = [];\n\n        if (this.currentElementCount < 1) {\n\n            var definitionNames = Object.keys(pimcore.report.custom.definition);\n            for(var i = 0; i < definitionNames.length; i++) {\n                classMenu.push(\n                    {\n                        text: t(\"custom_report_adapter_\" + definitionNames[i], ucfirst(definitionNames[i])),\n                        handler: this.addSourceDefinition.bind(this, {type: definitionNames[i]}),\n                        iconCls: \"pimcore_icon_objectbricks\"\n                    }\n                );\n            }\n        }\n\n        var items = [];\n\n        if (classMenu.length == 1) {\n            items.push({\n                cls: \"pimcore_block_button_plus\",\n                text: t(classMenu[0].text),\n                iconCls: \"pimcore_icon_plus\",\n                handler: classMenu[0].handler\n            });\n        } else if (classMenu.length > 1) {\n            items.push({\n                cls: \"pimcore_block_button_plus\",\n                iconCls: \"pimcore_icon_plus\",\n                menu: classMenu\n            });\n        } else {\n            items.push({\n                xtype: \"tbtext\",\n                text: t(\"no_further_sources_allowed\")\n            });\n        }\n\n        var toolbar = new Ext.Toolbar({\n            items: items\n        });\n\n        return toolbar;\n    },\n\n    addSourceDefinition: function (sourceDefinitionData) {\n        this.sourceDefinitionsItems.remove(this.sourceDefinitionsItems.getComponent(0));\n\n        if (!this.currentElements) {\n            this.currentElements = [];\n        }\n\n        var key = this.currentElements.length;\n\n        sourceDefinitionData.type = sourceDefinitionData.type ? sourceDefinitionData.type : 'sql';\n\n        var adapter = new pimcore.report.custom.definition[sourceDefinitionData.type](sourceDefinitionData, key, this.getDeleteControl(t(\"custom_report_adapter_\" + sourceDefinitionData.type, ucfirst(sourceDefinitionData.type)), key), this.getColumnSettings.bind(this));\n\n\n        this.currentElements.push({key: key, adapter: adapter});\n        this.currentElementCount++;\n\n        this.sourceDefinitionsItems.add(adapter.getElement());\n        this.sourceDefinitionsItems.insert(0, this.getAddControl());\n        this.sourceDefinitionsItems.updateLayout();\n    },\n\n    getColumnSettings: function () {\n        var m = this.getValues();\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_reports_customreport_columnconfig'),\n            method: \"post\",\n            params: {\n                configuration: Ext.encode(m.dataSourceConfig),\n                name: this.data.name\n            },\n            success: function (response) {\n                var res = Ext.decode(response.responseText);\n\n                if (res.success) {\n                    this.updateColumnSettings(res.columns);\n                }\n\n                var errorField = this.panel.getComponent(\"sourcedefinitionFieldset\").getComponent(\"errorMessage\");\n\n                errorField.setValue(\"\");\n                if (!res.success && res.errorMessage) {\n                    errorField.setValue(res.errorMessage);\n                }\n            }.bind(this)\n        });\n    },\n\n    updateColumnSettings: function (columns) {\n\n        var insertData, isInStore, o;\n        var cc = this.data.columnConfiguration;\n\n        if (columns && columns.length > 0) {\n            // cleanup\n            this.columnStore.each(function (columns, rec) {\n                if (!in_array(rec.get(\"name\"), columns)) {\n                    this.columnStore.remove(rec);\n                }\n            }.bind(this, columns));\n\n            // insert\n            for (var i = 0; i < columns.length; i++) {\n                isInStore = (this.columnStore.findExact(\"name\", columns[i]) >= 0) ? true : false;\n                if (!isInStore) {\n\n                    insertData = {\n                        name: columns[i],\n                        display: true,\n                        \"export\": true,\n                        order: true,\n                        width: \"\",\n                        label: \"\"\n                    };\n\n                    if (typeof cc == \"object\" && cc.length > 0) {\n                        for (o = 0; o < cc.length; o++) {\n                            if (cc[o][\"name\"] == columns[i]) {\n                                insertData[\"display\"] = cc[o][\"display\"];\n                                insertData[\"export\"] = cc[o][\"export\"];\n                                insertData[\"order\"] = cc[o][\"order\"];\n                                insertData[\"filter\"] = cc[o][\"filter\"];\n                                insertData[\"displayType\"] = cc[o][\"displayType\"];\n                                insertData[\"filter_drilldown\"] = cc[o][\"filter_drilldown\"];\n                                insertData[\"width\"] = cc[o][\"width\"];\n                                insertData[\"label\"] = cc[o][\"label\"];\n                                insertData[\"columnAction\"] = cc[o][\"columnAction\"];\n                                break;\n                            }\n                        }\n                    }\n\n                    this.columnStore.add(insertData);\n                }\n            }\n        }\n    },\n\n    getValues: function () {\n        var key;\n        var allValues = this.generalDefinitionForm.getForm().getFieldValues();\n\n        var chartValues = this.chartDefinitionForm.getForm().getFieldValues();\n        for (key in chartValues) {\n            allValues[key] = chartValues[key];\n        }\n\n        if(this.permissionsForm) {\n            var permissionValues = this.permissionsForm.getForm().getFieldValues();\n            for (key in permissionValues) {\n                allValues[key] = permissionValues[key];\n            }\n        }\n\n        var columnData = [];\n        this.columnStore.each(function (rec) {\n            columnData.push(rec.data);\n        }.bind(this));\n\n        allValues[\"columnConfiguration\"] = columnData;\n\n        var dataSourceConfig = [];\n        for (var i = 0; i < this.currentElements.length; i++) {\n            if (!this.currentElements[i].deleted) {\n                dataSourceConfig.push(this.currentElements[i].adapter.getValues());\n            }\n        }\n\n        allValues[\"dataSourceConfig\"] = dataSourceConfig;\n        allValues[\"sql\"] = \"\";\n\n        return allValues;\n    },\n\n    save: function () {\n\n        let m = this.getValues();\n        let error = false;\n\n        ['group', 'groupIconClass', 'iconClass', 'niceName', 'reportClass'].forEach(function (name) {\n            if(m[name].length && !m[name].match(/^[_a-zA-Z]+[_a-zA-Z0-9-\\s]*$/)) {\n                error = name;\n            }\n        });\n\n        if(error !== false) {\n            Ext.Msg.show({\n                title: t(\"error\"),\n                msg: t('class_field_name_error') + ': ' + error,\n                buttons: Ext.Msg.OK,\n                icon: Ext.MessageBox.ERROR\n            });\n\n            return;\n        }\n\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_reports_customreport_update'),\n            method: \"PUT\",\n            params: {\n                configuration: Ext.encode(m),\n                name: this.data.name\n            },\n            success: this.saveOnComplete.bind(this)\n        });\n    },\n\n    saveOnComplete: function () {\n        this.parentPanel.tree.getStore().load();\n        pimcore.helpers.showNotification(t(\"success\"), t(\"saved_successfully\"), \"success\");\n\n        Ext.MessageBox.confirm(t(\"info\"), t(\"reload_pimcore_changes\"), function (buttonValue) {\n            if (buttonValue == \"yes\") {\n                window.location.reload();\n            }\n        }.bind(this));\n    }\n});\n"], "filenames": ["bundles/AdminBundle/Controller/Reports/CustomReportController.php", "bundles/AdminBundle/Resources/public/js/pimcore/report/custom/item.js"], "buggy_code_start_loc": [292, 897], "buggy_code_end_loc": [299, 898], "fixing_code_start_loc": [292, 897], "fixing_code_end_loc": [299, 916], "type": "CWE-79", "message": "pimcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2022-0256", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-17T16:15:07.583", "lastModified": "2022-01-24T20:22:06.080", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "pimcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "pimcore es vulnerable a una Neutralizaci\u00f3n Inapropiada de la Entrada Durante la Generaci\u00f3n de la P\u00e1gina Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.2.8", "matchCriteriaId": "5AC8F67B-4157-4F41-B0C7-EBD7FA95553F"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/dff1cb0c466abcd55f1268934de3ed937b7436a7", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/8d88e48a-7124-4aaf-9f1d-6cfe4f9a79c1", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/dff1cb0c466abcd55f1268934de3ed937b7436a7"}}