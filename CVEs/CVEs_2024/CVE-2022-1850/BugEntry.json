{"buggy_code": ["<?php\n\n/*\n * This file is part of the FileGator package.\n *\n * (c) Milos Stojanovic <alcalbg@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE file\n */\n\nnamespace Filegator\\Services\\Storage;\n\nuse Filegator\\Services\\Service;\nuse League\\Flysystem\\Filesystem as Flysystem;\n\nclass Filesystem implements Service\n{\n    protected $separator;\n\n    protected $storage;\n\n    protected $path_prefix;\n\n    public function init(array $config = [])\n    {\n        $this->separator = $config['separator'];\n        $this->path_prefix = $this->separator;\n\n        $adapter = $config['adapter'];\n        $config = isset($config['config']) ? $config['config'] : [];\n\n        $this->storage = new Flysystem($adapter(), $config);\n    }\n\n    public function createDir(string $path, string $name)\n    {\n        $destination = $this->joinPaths($this->applyPathPrefix($path), $name);\n\n        while (! empty($this->storage->listContents($destination, true))) {\n            $destination = $this->upcountName($destination);\n        }\n\n        return $this->storage->createDir($destination);\n    }\n\n    public function createFile(string $path, string $name)\n    {\n        $destination = $this->joinPaths($this->applyPathPrefix($path), $name);\n\n        while ($this->storage->has($destination)) {\n            $destination = $this->upcountName($destination);\n        }\n\n        $this->storage->put($destination, '');\n    }\n\n    public function fileExists(string $path)\n    {\n        $path = $this->applyPathPrefix($path);\n\n        return $this->storage->has($path);\n    }\n\n    public function isDir(string $path)\n    {\n        $path = $this->applyPathPrefix($path);\n\n        return $this->storage->getSize($path) === false;\n    }\n\n    public function copyFile(string $source, string $destination)\n    {\n        $source = $this->applyPathPrefix($source);\n        $destination = $this->joinPaths($this->applyPathPrefix($destination), $this->getBaseName($source));\n\n        while ($this->storage->has($destination)) {\n            $destination = $this->upcountName($destination);\n        }\n\n        return $this->storage->copy($source, $destination);\n    }\n\n    public function copyDir(string $source, string $destination)\n    {\n        $source = $this->applyPathPrefix($this->addSeparators($source));\n        $destination = $this->applyPathPrefix($this->addSeparators($destination));\n        $source_dir = $this->getBaseName($source);\n        $real_destination = $this->joinPaths($destination, $source_dir);\n\n        while (! empty($this->storage->listContents($real_destination, true))) {\n            $real_destination = $this->upcountName($real_destination);\n        }\n\n        $contents = $this->storage->listContents($source, true);\n\n        if (empty($contents)) {\n            $this->storage->createDir($real_destination);\n        }\n\n        foreach ($contents as $file) {\n            $source_path = $this->separator.ltrim($file['path'], $this->separator);\n            $path = substr($source_path, strlen($source), strlen($source_path));\n\n            if ($file['type'] == 'dir') {\n                $this->storage->createDir($this->joinPaths($real_destination, $path));\n\n                continue;\n            }\n\n            if ($file['type'] == 'file') {\n                $this->storage->copy($file['path'], $this->joinPaths($real_destination, $path));\n            }\n        }\n    }\n\n    public function deleteDir(string $path)\n    {\n        return $this->storage->deleteDir($this->applyPathPrefix($path));\n    }\n\n    public function deleteFile(string $path)\n    {\n        return $this->storage->delete($this->applyPathPrefix($path));\n    }\n\n    public function readStream(string $path): array\n    {\n        if ($this->isDir($path)) {\n            throw new \\Exception('Cannot stream directory');\n        }\n\n        $path = $this->applyPathPrefix($path);\n\n        return [\n            'filename' => $this->getBaseName($path),\n            'stream' => $this->storage->readStream($path),\n            'filesize' => $this->storage->getSize($path),\n        ];\n    }\n\n    public function move(string $from, string $to): bool\n    {\n        $from = $this->applyPathPrefix($from);\n        $to = $this->applyPathPrefix($to);\n\n        while ($this->storage->has($to)) {\n            $to = $this->upcountName($to);\n        }\n\n        return $this->storage->rename($from, $to);\n    }\n\n    public function rename(string $destination, string $from, string $to): bool\n    {\n        $from = $this->joinPaths($this->applyPathPrefix($destination), $from);\n        $to = $this->joinPaths($this->applyPathPrefix($destination), $to);\n\n        while ($this->storage->has($to)) {\n            $to = $this->upcountName($to);\n        }\n\n        return $this->storage->rename($from, $to);\n    }\n\n    public function store(string $path, string $name, $resource, bool $overwrite = false): bool\n    {\n        $destination = $this->joinPaths($this->applyPathPrefix($path), $name);\n\n        while ($this->storage->has($destination)) {\n            if ($overwrite) {\n                $this->storage->delete($destination);\n            } else {\n                $destination = $this->upcountName($destination);\n            }\n        }\n\n        return $this->storage->putStream($destination, $resource);\n    }\n\n    public function setPathPrefix(string $path_prefix)\n    {\n        $this->path_prefix = $this->addSeparators($path_prefix);\n    }\n\n    public function getSeparator()\n    {\n        return $this->separator;\n    }\n\n    public function getPathPrefix(): string\n    {\n        return $this->path_prefix;\n    }\n\n    public function getDirectoryCollection(string $path, bool $recursive = false): DirectoryCollection\n    {\n        $collection = new DirectoryCollection($path);\n\n        foreach ($this->storage->listContents($this->applyPathPrefix($path), $recursive) as $entry) {\n            // By default only 'path' and 'type' is present\n\n            $name = $this->getBaseName($entry['path']);\n            $userpath = $this->stripPathPrefix($entry['path']);\n            $dirname = isset($entry['dirname']) ? $entry['dirname'] : $path;\n            $size = isset($entry['size']) ? $entry['size'] : 0;\n            $timestamp = isset($entry['timestamp']) ? $entry['timestamp'] : 0;\n\n            $collection->addFile($entry['type'], $userpath, $name, $size, $timestamp);\n        }\n\n        if (! $recursive && $this->addSeparators($path) !== $this->separator) {\n            $collection->addFile('back', $this->getParent($path), '..', 0, 0);\n        }\n\n        return $collection;\n    }\n\n    protected function upcountCallback($matches)\n    {\n        $index = isset($matches[1]) ? intval($matches[1]) + 1 : 1;\n        $ext = isset($matches[2]) ? $matches[2] : '';\n\n        return ' ('.$index.')'.$ext;\n    }\n\n    protected function upcountName($name)\n    {\n        return preg_replace_callback(\n            '/(?:(?: \\(([\\d]+)\\))?(\\.[^.]+))?$/',\n            [$this, 'upcountCallback'],\n            $name,\n            1\n        );\n    }\n\n    private function applyPathPrefix(string $path): string\n    {\n        if ($path == '..'\n            || strpos($path, '..'.$this->separator) !== false\n            || strpos($path, $this->separator.'..') !== false\n        ) {\n            $path = $this->separator;\n        }\n        return $this->joinPaths($this->getPathPrefix(), $path);\n    }\n\n    private function stripPathPrefix(string $path): string\n    {\n        $path = $this->separator.ltrim($path, $this->separator);\n\n        if (substr($path, 0, strlen($this->getPathPrefix())) == $this->getPathPrefix()) {\n            $path = $this->separator.substr($path, strlen($this->getPathPrefix()));\n        }\n\n        return $path;\n    }\n\n    private function addSeparators(string $dir): string\n    {\n        if (! $dir || $dir == $this->separator || ! trim($dir, $this->separator)) {\n            return $this->separator;\n        }\n\n        return $this->separator.trim($dir, $this->separator).$this->separator;\n    }\n\n    private function joinPaths(string $path1, string $path2): string\n    {\n        if (! $path2 || ! trim($path2, $this->separator)) {\n            return $this->addSeparators($path1);\n        }\n\n        return $this->addSeparators($path1).ltrim($path2, $this->separator);\n    }\n\n    private function getParent(string $dir): string\n    {\n        if (! $dir || $dir == $this->separator || ! trim($dir, $this->separator)) {\n            return $this->separator;\n        }\n\n        $tmp = explode($this->separator, trim($dir, $this->separator));\n        array_pop($tmp);\n\n        return $this->separator.trim(implode($this->separator, $tmp), $this->separator);\n    }\n\n    private function getBaseName(string $path): string\n    {\n        if (! $path || $path == $this->separator || ! trim($path, $this->separator)) {\n            return $this->separator;\n        }\n\n        $tmp = explode($this->separator, trim($path, $this->separator));\n\n        return  (string) array_pop($tmp);\n    }\n}\n", "<?php\n\n/*\n * This file is part of the FileGator package.\n *\n * (c) Milos Stojanovic <alcalbg@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE file\n */\n\nnamespace Tests\\Unit;\n\nuse Exception;\nuse Filegator\\Services\\Storage\\Filesystem;\nuse League\\Flysystem\\Adapter\\Local;\nuse Tests\\TestCase;\n\n/**\n * @internal\n */\nclass FilesystemTest extends TestCase\n{\n    protected $storage;\n\n    protected $timestamp;\n\n    protected $separator = '/';\n\n    protected function setUp(): void\n    {\n        $this->resetTempDir();\n\n        $this->timestamp = time();\n\n        $this->storage = new Filesystem();\n        $this->storage->init([\n            'separator' => '/',\n            'adapter' => function () {\n                return new Local(\n                    TEST_REPOSITORY\n                );\n            },\n        ]);\n    }\n\n    protected function tearDown(): void\n    {\n        $this->resetTempDir();\n    }\n\n    public function testGetDirectoryFileCount()\n    {\n        $this->storage->createFile('/', '1.txt');\n        $this->storage->createFile('/', '2.txt');\n        $this->storage->createFile('/', '3.txt');\n        $this->storage->createFile('/', '4.txt');\n        $this->storage->createFile('/', '5.txt');\n        $this->storage->createDir('/', 'tmp');\n\n        $ret = $this->storage->getDirectoryCollection('/');\n\n        $ret_array = json_decode(json_encode($ret), true);\n\n        $this->assertCount(6, $ret_array['files']);\n    }\n\n    public function testGetSubDirectyoryFileCount()\n    {\n        $this->storage->createDir('/', 'sub');\n        $this->storage->createFile('/sub', '1.txt');\n        $this->storage->createFile('/sub', '2.txt');\n        $this->storage->createFile('/sub', '3.txt');\n        $this->storage->createFile('/sub', '4.txt');\n        $this->storage->createDir('/sub', 'deep');\n        $this->storage->createFile('/sub/deep', '1.txt');\n\n        $ret = $this->storage->getDirectoryCollection('/sub');\n\n        $ret_array = json_decode(json_encode($ret), true);\n\n        // back + 4 files + 1 deep dir\n        $this->assertCount(6, $ret_array['files']);\n\n        $ret = $this->storage->getDirectoryCollection('/sub/deep');\n\n        $ret_array = json_decode(json_encode($ret), true);\n\n        // back + 1 file\n        $this->assertCount(2, $ret_array['files']);\n    }\n\n    public function testInvalidDirReturnsBackLinkOnly()\n    {\n        $ret = $this->storage->getDirectoryCollection('/etc');\n\n        $this->assertJsonStringEqualsJsonString(json_encode($ret), json_encode([\n            'location' => '/etc',\n            'files' => [\n                0 => [\n                    'type' => 'back',\n                    'path' => '/',\n                    'name' => '..',\n                    'size' => 0,\n                    'time' => 0,\n                ],\n            ],\n        ]));\n    }\n\n    public function testListSubDirContents()\n    {\n        $this->storage->createDir('/', 'john');\n        $this->storage->createDir('/john', 'johnsub');\n        $this->storage->createFile('/john/johnsub', 'john2.txt');\n\n        $ret = $this->storage->getDirectoryCollection('/john/johnsub');\n        $ret->resetTimestamps();\n\n        $this->assertJsonStringEqualsJsonString(json_encode([\n            'location' => '/john/johnsub',\n            'files' => [\n                0 => [\n                    'type' => 'back',\n                    'path' => '/john',\n                    'name' => '..',\n                    'size' => 0,\n                    'time' => 0,\n                ],\n                1 => [\n                    'type' => 'file',\n                    'path' => '/john/johnsub/john2.txt',\n                    'name' => 'john2.txt',\n                    'size' => 0,\n                    'time' => 0,\n                ],\n            ],\n        ]), json_encode($ret));\n    }\n\n    public function testHomeDirContentsUsingPathPrefix()\n    {\n        $this->storage->setPathPrefix('/john');\n        $this->storage->createDir('/', 'johnsub');\n        $this->storage->createFile('/', 'john.txt');\n\n        $ret = $this->storage->getDirectoryCollection('/');\n        $ret->resetTimestamps(-1);\n\n        $this->assertJsonStringEqualsJsonString(json_encode([\n            'location' => '/',\n            'files' => [\n                0 => [\n                    'type' => 'dir',\n                    'path' => '/johnsub',\n                    'name' => 'johnsub',\n                    'size' => 0,\n                    'time' => -1,\n                ],\n                1 => [\n                    'type' => 'file',\n                    'path' => '/john.txt',\n                    'name' => 'john.txt',\n                    'size' => 0,\n                    'time' => -1,\n                ],\n            ],\n        ]), json_encode($ret));\n    }\n\n    public function testSubDirContentsUsingPathPrefix()\n    {\n        $this->storage->setPathPrefix('/john');\n        $this->storage->createDir('/', 'johnsub');\n        $this->storage->createFile('/johnsub', 'john2.txt');\n\n        $ret = $this->storage->getDirectoryCollection('/johnsub');\n\n        $ret->resetTimestamps();\n\n        $this->assertJsonStringEqualsJsonString(json_encode([\n            'location' => '/johnsub',\n            'files' => [\n                0 => [\n                    'type' => 'back',\n                    'path' => '/',\n                    'name' => '..',\n                    'size' => 0,\n                    'time' => 0,\n                ],\n                1 => [\n                    'type' => 'file',\n                    'path' => '/johnsub/john2.txt',\n                    'name' => 'john2.txt',\n                    'size' => 0,\n                    'time' => 0,\n                ],\n            ],\n        ]), json_encode($ret));\n    }\n\n    public function testStoringFileToRoot()\n    {\n        // create dummy file\n        file_put_contents(TEST_FILE, 'lorem ipsum');\n\n        $resource = fopen(TEST_FILE, 'r');\n        $ret = $this->storage->store('/', 'loremfile.txt', $resource);\n        fclose($resource);\n\n        $this->assertTrue($ret);\n\n        $this->assertFileExists(TEST_REPOSITORY.'/loremfile.txt');\n    }\n\n    public function testStoringFileToRootSubFolder()\n    {\n        // create dummy file\n        file_put_contents(TEST_FILE, 'lorem ipsum');\n\n        $resource = fopen(TEST_FILE, 'r');\n        $ret = $this->storage->store('/sub/sub1', 'loremfile.txt', $resource);\n        fclose($resource);\n\n        $this->assertTrue($ret);\n\n        $this->assertFileExists(TEST_REPOSITORY.'/sub/sub1/loremfile.txt');\n        $this->assertFileNotExists(TEST_REPOSITORY.'/loremfile.txt');\n    }\n\n    public function testUpcountingFilenameOrDirname()\n    {\n        $this->assertEquals('test (1).txt', $this->invokeMethod($this->storage, 'upcountName', ['test.txt']));\n        $this->assertEquals('test (2).txt', $this->invokeMethod($this->storage, 'upcountName', ['test (1).txt']));\n        $this->assertEquals('test (100).txt', $this->invokeMethod($this->storage, 'upcountName', ['test (99).txt']));\n        $this->assertEquals('test (1)', $this->invokeMethod($this->storage, 'upcountName', ['test']));\n        $this->assertEquals('test (9) (2) (1)', $this->invokeMethod($this->storage, 'upcountName', ['test (9) (2)']));\n        $this->assertEquals('test (2) (3) (4).txt', $this->invokeMethod($this->storage, 'upcountName', ['test (2) (3) (3).txt']));\n        $this->assertEquals('1 (1)', $this->invokeMethod($this->storage, 'upcountName', ['1']));\n        $this->assertEquals('test (1).txt (1).zip', $this->invokeMethod($this->storage, 'upcountName', ['test (1).txt.zip']));\n        $this->assertEquals('test(1) (1)', $this->invokeMethod($this->storage, 'upcountName', ['test(1)']));\n    }\n\n    public function testStoringFileWithTheSameNameUpcountsSecondFilename()\n    {\n        // create dummy file\n        file_put_contents(TEST_FILE, 'lorem ipsum');\n\n        $resource = fopen(TEST_FILE, 'r');\n        $this->storage->store('/', 'singletone.txt', $resource);\n        fclose($resource);\n\n        // create another dummy file witht the same name but different content\n        file_put_contents(TEST_FILE, 'croissant');\n\n        $resource = fopen(TEST_FILE, 'r');\n        $this->storage->store('/', 'singletone.txt', $resource);\n        fclose($resource);\n\n        // first file is not overwritten\n        $ret = $this->storage->readStream('singletone.txt');\n        $this->assertEquals('lorem ipsum', stream_get_contents($ret['stream']));\n\n        // second file is also here but with upcounted name\n        $ret = $this->storage->readStream('singletone (1).txt');\n        $this->assertEquals('croissant', stream_get_contents($ret['stream']));\n    }\n\n    public function testStoringFileWithTheSameNameOverwritesOriginalFile()\n    {\n        // create dummy file\n        $string = 'lorem ipsum';\n        $resource = fopen('data://text/plain;base64,'.base64_encode($string), 'r');\n\n        // and store it\n        $this->storage->store('/', 'singletone.txt', $resource);\n        fclose($resource);\n\n        // first file contains lorem ipsum\n        $ret = $this->storage->readStream('singletone.txt');\n        $this->assertEquals('lorem ipsum', stream_get_contents($ret['stream']));\n\n        // create another dummy file\n        $string = 'croissant';\n        $resource = fopen('data://text/plain;base64,'.base64_encode($string), 'r');\n\n        // and store it with the same name\n        $this->storage->store('/', 'singletone.txt', $resource, true);\n        fclose($resource);\n\n        // first file is overwritten\n        $ret = $this->storage->readStream('singletone.txt');\n        $this->assertEquals('croissant', stream_get_contents($ret['stream']));\n    }\n\n    public function testStoringFileWithTheSameNameUpcountsSecondFilenameUsingPathPrefix()\n    {\n        $this->storage->setPathPrefix('/john/');\n\n        // create dummy file\n        file_put_contents(TEST_FILE, 'lorem ipsum');\n\n        $resource = fopen(TEST_FILE, 'r');\n        $this->storage->store('/', 'singletone.txt', $resource);\n        fclose($resource);\n\n        // create another dummy file witht the same name but different content\n        file_put_contents(TEST_FILE, 'croissant');\n\n        $resource = fopen(TEST_FILE, 'r');\n        $this->storage->store('/', 'singletone.txt', $resource);\n        fclose($resource);\n\n        // first file is not overwritten\n        $ret = $this->storage->readStream('singletone.txt');\n        $this->assertEquals('lorem ipsum', stream_get_contents($ret['stream']));\n\n        // second file is also here but with upcounted name\n        $ret = $this->storage->readStream('singletone (1).txt');\n        $this->assertEquals('croissant', stream_get_contents($ret['stream']));\n    }\n\n    public function testStoringFileWithTheSameNameOverwritesOriginalFileUsingPathPrefix()\n    {\n        $this->storage->setPathPrefix('/john/');\n\n        // create dummy file\n        $string = 'lorem ipsum';\n        $resource = fopen('data://text/plain;base64,'.base64_encode($string), 'r');\n\n        // and store it\n        $this->storage->store('/', 'singletone.txt', $resource);\n        fclose($resource);\n\n        // first file contains lorem ipsum\n        $ret = $this->storage->readStream('singletone.txt');\n        $this->assertEquals('lorem ipsum', stream_get_contents($ret['stream']));\n\n        // create another dummy file\n        $string = 'croissant';\n        $resource = fopen('data://text/plain;base64,'.base64_encode($string), 'r');\n\n        // and store it with the same name\n        $this->storage->store('/', 'singletone.txt', $resource, true);\n        fclose($resource);\n\n        // first file is overwritten\n        $ret = $this->storage->readStream('singletone.txt');\n        $this->assertEquals('croissant', stream_get_contents($ret['stream']));\n    }\n    public function testCreatingFileWithTheSameNameUpcountsFilenameRecursively()\n    {\n        $this->storage->createFile('/', 'test.txt');\n        $this->storage->createFile('/', 'test (1).txt');\n\n        $resource = fopen(TEST_FILE, 'r');\n        $this->storage->store('/', 'test.txt', $resource);\n        fclose($resource);\n\n        $this->assertTrue($this->storage->fileExists('/test.txt'));\n        $this->assertTrue($this->storage->fileExists('/test (1).txt'));\n        $this->assertTrue($this->storage->fileExists('/test (2).txt')); // created with (2)\n    }\n\n    public function testCreatingDirectoryWithTheSameNameAsNonEmptyDirUpcountsDestinationDir()\n    {\n        $this->storage->createDir('/', 'test');\n        $this->storage->createFile('/test', 'a.txt');\n        // this dir\n        $this->storage->createDir('/', 'test');\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/test');\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/test (1)'); // goes here\n    }\n\n    public function testCreatingDirectoryWithTheSameNameAsNonEmptyDirUpcountsDestinationDirRecursively()\n    {\n        $this->storage->createDir('/', 'test');\n        $this->storage->createFile('/test', 'a.txt');\n        $this->storage->createDir('/', 'test (1)');\n        $this->storage->createFile('/test (1)', 'b.txt');\n\n        // this dir\n        $this->storage->createDir('/', 'test');\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/test');\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/test (1)');\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/test (1) (1)'); // goes here\n    }\n\n    public function testMovingFileWithTheSameNameUpcountsSecondFilename()\n    {\n        $this->storage->createFile('/', 'test.txt');\n        $this->storage->createFile('/sub', 'test.txt');\n\n        // move second file over the first one\n        $this->storage->move('/sub/test.txt', '/test.txt');\n\n        $this->assertTrue($this->storage->fileExists('/test.txt'));\n        $this->assertTrue($this->storage->fileExists('/test (1).txt'));\n    }\n\n    public function testMovingFileWithTheSameNameUpcountsSecondFilenameUntilTheNameIsUnique()\n    {\n        $this->storage->createFile('/', 'test.txt');\n        $this->storage->createFile('/', 'test (1).txt');\n        $this->storage->createFile('/', 'test (2).txt');\n        $this->storage->createFile('/sub', 'test.txt');\n\n        // move second file over the first one\n        $this->storage->move('/sub/test.txt', '/test.txt');\n\n        $this->assertTrue($this->storage->fileExists('/test.txt'));\n        $this->assertTrue($this->storage->fileExists('/test (1).txt'));\n        $this->assertTrue($this->storage->fileExists('/test (2).txt'));\n        $this->assertTrue($this->storage->fileExists('/test (3).txt')); // file is moved here\n    }\n\n    public function testCopyingFileWithTheSameNameUpcountsSecondFilename()\n    {\n        $this->storage->createFile('/', 'test.txt');\n        $this->storage->createFile('/', 'test (1).txt');\n        $this->storage->createFile('/', 'test (2).txt');\n        $this->storage->createFile('/sub', 'test.txt');\n\n        // move second file over the first one\n        $this->storage->copyFile('/sub/test.txt', '/');\n\n        $this->assertTrue($this->storage->fileExists('/test.txt'));\n        $this->assertTrue($this->storage->fileExists('/test (1).txt'));\n        $this->assertTrue($this->storage->fileExists('/test (2).txt'));\n        $this->assertTrue($this->storage->fileExists('/test (3).txt')); // file is copied here\n    }\n\n    public function testGetPathPrefix()\n    {\n        $this->storage->setPathPrefix('/john/');\n        $this->assertEquals('/john/', $this->storage->getPathPrefix());\n\n        $this->storage->setPathPrefix('/john');\n        $this->assertEquals('/john/', $this->storage->getPathPrefix());\n\n        $this->storage->setPathPrefix('john/');\n        $this->assertEquals('/john/', $this->storage->getPathPrefix());\n\n        $this->storage->setPathPrefix('john');\n        $this->assertEquals('/john/', $this->storage->getPathPrefix());\n    }\n\n    public function testApplyPathPrefix()\n    {\n        $this->storage->setPathPrefix('/john/');\n\n        $this->assertEquals('/john/test', $this->invokeMethod($this->storage, 'applyPathPrefix', ['test']));\n        $this->assertEquals('/john/test/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['test/']));\n        $this->assertEquals('/john/test/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['/test/']));\n        $this->assertEquals('/john/test', $this->invokeMethod($this->storage, 'applyPathPrefix', ['/test']));\n        $this->assertEquals('/john/test.txt', $this->invokeMethod($this->storage, 'applyPathPrefix', ['test.txt']));\n        $this->assertEquals('/john/test.txt/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['test.txt/']));\n        // no escaping path to upper dir\n        $this->assertEquals('/john/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['/..']));\n        $this->assertEquals('/john/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['..']));\n        $this->assertEquals('/john/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['../']));\n        $this->assertEquals('/john/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['/sub/../../']));\n    }\n\n    public function testStripPathPrefix()\n    {\n        $this->storage->setPathPrefix('/john/');\n\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'stripPathPrefix', ['/john/']));\n        $this->assertEquals('/test/', $this->invokeMethod($this->storage, 'stripPathPrefix', ['/john/test/']));\n        $this->assertEquals('/test', $this->invokeMethod($this->storage, 'stripPathPrefix', ['/john/test']));\n        $this->assertEquals('/doe/test', $this->invokeMethod($this->storage, 'stripPathPrefix', ['/john/doe/test']));\n        $this->assertEquals('/doe/test.txt', $this->invokeMethod($this->storage, 'stripPathPrefix', ['john/doe/test.txt']));\n        $this->assertEquals('/john', $this->invokeMethod($this->storage, 'stripPathPrefix', ['/john']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'stripPathPrefix', ['/']));\n    }\n\n    public function testAddSeparators()\n    {\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'addSeparators', ['']));\n        $this->assertEquals('/ /', $this->invokeMethod($this->storage, 'addSeparators', [' ']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'addSeparators', ['/']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'addSeparators', ['//']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'addSeparators', ['////']));\n        $this->assertEquals('/b/', $this->invokeMethod($this->storage, 'addSeparators', ['b']));\n        $this->assertEquals('/b/', $this->invokeMethod($this->storage, 'addSeparators', ['/b']));\n        $this->assertEquals('/b/', $this->invokeMethod($this->storage, 'addSeparators', ['/b/']));\n        $this->assertEquals('/b/', $this->invokeMethod($this->storage, 'addSeparators', ['/b//']));\n        $this->assertEquals('/b/', $this->invokeMethod($this->storage, 'addSeparators', ['//b//']));\n        $this->assertEquals('/a/b/', $this->invokeMethod($this->storage, 'addSeparators', ['a/b']));\n        $this->assertEquals('/a/b/', $this->invokeMethod($this->storage, 'addSeparators', ['a/b/']));\n        $this->assertEquals('/a/b/', $this->invokeMethod($this->storage, 'addSeparators', ['/a/b/']));\n        $this->assertEquals('/a b/', $this->invokeMethod($this->storage, 'addSeparators', ['a b']));\n        $this->assertEquals('/a b/c/', $this->invokeMethod($this->storage, 'addSeparators', ['a b/c']));\n    }\n\n    public function testJoinPaths()\n    {\n        $this->assertEquals('/1/2', $this->invokeMethod($this->storage, 'joinPaths', ['1', '2']));\n        $this->assertEquals('/1/2', $this->invokeMethod($this->storage, 'joinPaths', ['/1', '/2']));\n        $this->assertEquals('/1/2/', $this->invokeMethod($this->storage, 'joinPaths', ['1/', '2/']));\n        $this->assertEquals('/1/2', $this->invokeMethod($this->storage, 'joinPaths', ['1/', '/2']));\n        $this->assertEquals('/1/2/', $this->invokeMethod($this->storage, 'joinPaths', ['/1', '2/']));\n        $this->assertEquals('/1/2/', $this->invokeMethod($this->storage, 'joinPaths', ['/1/', '/2/']));\n    }\n\n    public function testGetBaseName()\n    {\n        $this->assertEquals('test.txt', $this->invokeMethod($this->storage, 'getBaseName', ['test.txt']));\n        $this->assertEquals('test.txt', $this->invokeMethod($this->storage, 'getBaseName', ['/test.txt']));\n        $this->assertEquals('test.txt', $this->invokeMethod($this->storage, 'getBaseName', ['/mike/test.txt']));\n        $this->assertEquals('b', $this->invokeMethod($this->storage, 'getBaseName', ['/a/b']));\n        $this->assertEquals('b', $this->invokeMethod($this->storage, 'getBaseName', ['/a/b/']));\n        $this->assertEquals('b', $this->invokeMethod($this->storage, 'getBaseName', ['a/b']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'getBaseName', ['']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'getBaseName', ['/']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'getBaseName', ['/////']));\n    }\n\n    public function testGetParent()\n    {\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'getParent', ['']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'getParent', [' ']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'getParent', ['/']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'getParent', ['////']));\n        $this->assertEquals('/parent', $this->invokeMethod($this->storage, 'getParent', ['/parent/child/']));\n        $this->assertEquals('/1/2/3/4', $this->invokeMethod($this->storage, 'getParent', ['/1/2/3/4/5/']));\n        $this->assertEquals('/1/2', $this->invokeMethod($this->storage, 'getParent', ['1/2/3']));\n        $this->assertEquals('/1/2', $this->invokeMethod($this->storage, 'getParent', ['1/2/3/']));\n        $this->assertEquals('/1/2', $this->invokeMethod($this->storage, 'getParent', ['/1/2/3/']));\n    }\n\n    public function testDeleteFiles()\n    {\n        $this->storage->createFile('/', 'sample22.txt');\n        $this->assertFileExists(TEST_REPOSITORY.'/sample22.txt');\n\n        $this->storage->deleteFile('sample22.txt');\n\n        $this->assertFileNotExists(TEST_REPOSITORY.'/sample22.txt');\n    }\n\n    public function testCreateAndDeleteDirectory()\n    {\n        $this->storage->createDir('/', 'sample22');\n        $this->storage->createDir('/sample22/subsample', 'sample22');\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/sample22');\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/sample22/subsample');\n\n        $this->storage->deleteDir('sample22');\n\n        $this->assertDirectoryNotExists(TEST_REPOSITORY.'/sample22');\n        $this->assertDirectoryNotExists(TEST_REPOSITORY.'/sample22/subsample');\n    }\n\n    public function testReadFileStream()\n    {\n        $this->storage->createFile('/', 'a.txt');\n        $ret = $this->storage->readStream('a.txt');\n\n        $this->assertEquals($ret['filename'], 'a.txt');\n        $this->assertIsResource($ret['stream']);\n    }\n\n    public function testReadFileStreamMissingFileThrowsException()\n    {\n        $this->expectException(Exception::class);\n\n        $this->storage->readStream('missing');\n    }\n\n    public function testCannotStreamDirectory()\n    {\n        $this->storage->createDir('/', 'sub');\n\n        $this->expectException(Exception::class);\n\n        $this->storage->readStream('sub');\n    }\n\n    public function testDirCheck()\n    {\n        $this->storage->createDir('/', 'sub');\n        $this->storage->createDir('/', 'empty');\n        $this->storage->createFile('/sub', 'd.txt');\n        $this->storage->createDir('/sub', 'sub1');\n        $this->storage->createFile('/sub/sub1', 'f.txt');\n        $this->storage->createDir('/sub', 'empty');\n        $this->storage->createDir('/', 'john');\n        $this->storage->createFile('/', 'a.txt');\n\n        $this->assertTrue($this->storage->isDir('/sub'));\n        $this->assertTrue($this->storage->isDir('/sub/sub1'));\n        $this->assertTrue($this->storage->isDir('/john'));\n        $this->assertTrue($this->storage->isDir('/empty'));\n        $this->assertTrue($this->storage->isDir('/sub/empty'));\n        $this->assertFalse($this->storage->isDir('a.txt'));\n        $this->assertFalse($this->storage->isDir('/sub/d.txt'));\n        $this->assertFalse($this->storage->isDir('/sub/sub1/f.txt'));\n    }\n\n    public function testRenameFile()\n    {\n        $this->storage->createFile('/', 'a.txt');\n\n        $this->storage->rename('/', 'a.txt', 'a1.txt');\n\n        $this->assertFalse($this->storage->fileExists('/a.txt'));\n        $this->assertTrue($this->storage->fileExists('/a1.txt'));\n    }\n\n    public function testRenameFileToExistingDestinationUpcountsFilenameRecursively()\n    {\n        $this->storage->createFile('/', 'a.txt');\n        $this->storage->createFile('/', 'a (1).txt');\n        $this->storage->createFile('/', 'test.txt');\n\n        $this->storage->rename('/', 'test.txt', 'a.txt');\n\n        $this->assertTrue($this->storage->fileExists('/a.txt'));\n        $this->assertTrue($this->storage->fileExists('/a (1).txt'));\n        $this->assertTrue($this->storage->fileExists('/a (2).txt')); // result\n    }\n\n    public function testRenameFileInSubfolder()\n    {\n        $this->storage->createDir('/', 'john');\n        $this->storage->createFile('/john', 'john.txt');\n\n        $this->storage->rename('/john/', 'john.txt', 'john2.txt');\n\n        $this->assertFalse($this->storage->fileExists('/john/john.txt'));\n        $this->assertTrue($this->storage->fileExists('/john/john2.txt'));\n    }\n\n    public function testRenameFileWithPathPrefix()\n    {\n        $this->storage->setPathPrefix('/john/');\n        $this->storage->createFile('/', 'john.txt');\n        $this->storage->rename('/', 'john.txt', 'john2.txt');\n\n        $this->assertFalse($this->storage->fileExists('/john.txt'));\n        $this->assertTrue($this->storage->fileExists('/john2.txt'));\n    }\n\n    public function testRenameNonexistingFileThrowsException()\n    {\n        $this->expectException(Exception::class);\n\n        $this->storage->move('/', 'nonexisting.txt', 'a1.txt');\n    }\n\n    public function testCreatingFile()\n    {\n        $this->storage->createFile('/', 'sample22');\n        $ret = $this->storage->getDirectoryCollection('/');\n        $this->assertStringContainsString('sample22', json_encode($ret));\n\n        $this->storage->createFile('/sub/', 'sample33');\n        $ret = $this->storage->getDirectoryCollection('/sub/');\n        $this->assertStringContainsString('sample33', json_encode($ret));\n    }\n\n    public function testCreatingFileUpcountsNameIfAlreadyExists()\n    {\n        $this->assertFalse($this->storage->fileExists('/test.txt'));\n        $this->assertFalse($this->storage->fileExists('/test (1).txt'));\n\n        $this->storage->createFile('/', 'test.txt');\n        $this->storage->createFile('/', 'test.txt');\n\n        $this->assertTrue($this->storage->fileExists('/test.txt'));\n        $this->assertTrue($this->storage->fileExists('/test (1).txt'));\n    }\n\n    public function testCreatingFileUpcountsNameRecursivelyIfAlreadyExists()\n    {\n        $this->storage->createFile('/', 'test.txt');\n        $this->storage->createFile('/', 'test (1).txt');\n\n        // this file\n        $this->storage->createFile('/', 'test.txt');\n\n        $this->assertTrue($this->storage->fileExists('/test.txt'));\n        $this->assertTrue($this->storage->fileExists('/test (1).txt'));\n        $this->assertTrue($this->storage->fileExists('/test (2).txt')); // ends up here\n    }\n\n    public function testGetSeparator()\n    {\n        $separator = $this->storage->getSeparator();\n\n        $this->assertEquals($this->separator, $separator);\n    }\n\n    public function testCopyFile()\n    {\n        $this->storage->setPathPrefix('/john');\n        $this->storage->createFile('/', 'john.txt');\n        $this->storage->createDir('/', 'johnsub');\n        $this->storage->createFile('/johnsub', 'sub.txt');\n\n        $this->assertFalse($this->storage->fileExists('/johnsub/john.txt'));\n\n        $this->storage->copyFile('/john.txt', '/johnsub/');\n\n        $this->assertTrue($this->storage->fileExists('/johnsub/john.txt'));\n\n        $this->assertFalse($this->storage->fileExists('/sub.txt'));\n\n        $this->storage->copyFile('/johnsub/sub.txt', '/');\n\n        $this->assertTrue($this->storage->fileExists('/sub.txt'));\n    }\n\n    public function testCopyMissingFileThrowsException()\n    {\n        $this->storage->createDir('/', 'tmp');\n\n        $this->expectException(Exception::class);\n        $this->storage->copyFile('/missing.txt', '/tmp/');\n    }\n\n    public function testCopyMissingDirCreatedADirOnDestination()\n    {\n        $this->storage->createDir('/', 'tmp');\n\n        $this->storage->copyDir('/missing/', '/tmp/');\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/tmp/missing/');\n    }\n\n    public function testCopyDir()\n    {\n        $this->storage->createDir('/', '/john');\n        $this->storage->createDir('/john', '/johnsub');\n        $this->storage->createDir('/', '/jane');\n\n        $this->storage->copyDir('/john/johnsub', '/jane/');\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/jane/johnsub');\n    }\n\n    public function testCopyDirWithSubDirs()\n    {\n        $this->storage->createDir('/', '/sub');\n        $this->storage->createDir('/sub', '/sub1');\n        $this->storage->createDir('/', '/jane');\n\n        $this->storage->copyDir('/sub', '/jane/');\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/jane/sub');\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/jane/sub/sub1');\n    }\n\n    public function testCopyDirWithEmptySubDir()\n    {\n        $this->storage->createDir('/', 'tmp');\n        $this->storage->createDir('/tmp/', 'sample22');\n        $this->storage->createDir('/tmp/sample22/', 'subsample1');\n        $this->storage->createDir('/tmp/sample22/', 'subsample2');\n        $this->storage->createFile('/tmp/sample22/subsample2', 'zzzz');\n\n        $this->assertDirectoryNotExists(TEST_REPOSITORY.'/jane/sample22');\n\n        $this->storage->copyDir('/tmp/sample22', '/jane/');\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/jane/sample22');\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/jane/sample22/subsample2');\n        $this->assertTrue($this->storage->fileExists('/jane/sample22/subsample2/zzzz'));\n    }\n\n    public function testCopyEmptyDir()\n    {\n        $this->storage->createDir('/', 'dest');\n        $this->storage->createDir('/', 'tmp');\n\n        $this->storage->copyDir('/tmp', '/dest');\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/dest/tmp');\n    }\n\n    public function testCopyDirOverExistingUpcountsDestinationDirname()\n    {\n        /*\n         * /dest/tmp/\n         * /dest/tmp/a.txt\n         * /tmp/\n         * /tmp/b.txt\n         *\n         * copy /tmp/ => /dest/\n         *\n         * /dest/tmp/\n         * /dest/tmp/a.txt\n         * /dest/tmp (1)/\n         * /dest/tmp (1)/b.txt\n         *\n         */\n        $this->storage->createDir('/', 'dest');\n        $this->storage->createDir('/dest', 'tmp');\n        $this->storage->createFile('/dest/tmp/', 'a.txt');\n        $this->storage->createDir('/', 'tmp');\n        $this->storage->createFile('/tmp/', 'b.txt');\n\n        $this->storage->copyDir('/tmp', '/dest');\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/dest/tmp/');\n        $this->assertTrue($this->storage->fileExists('/dest/tmp/a.txt'));\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/dest/tmp (1)');\n        $this->assertTrue($this->storage->fileExists('/dest/tmp (1)/b.txt'));\n    }\n\n    public function testMoveFile()\n    {\n        $this->storage->createFile('/', 'file.txt');\n        $this->storage->createDir('/', 'tmp');\n        $this->storage->move('/file.txt', '/tmp/file.txt');\n\n        $this->assertFalse($this->storage->fileExists('/file.txt'));\n        $this->assertTrue($this->storage->fileExists('/tmp/file.txt'));\n    }\n\n    public function testMoveDirectory()\n    {\n        $this->storage->createDir('/', 'test1');\n        $this->storage->createDir('/', 'test2');\n        $this->storage->move('/test1', '/test2/test1/');\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/test2/test1/');\n    }\n\n    public function testCannotGoUpTheHomeDirUsingPathFiddle()\n    {\n        $this->storage->createFile('/', 'hidden.txt');\n        $this->storage->createDir('/', 'johnsub');\n        $this->storage->createFile('/johnsub', 'john.txt');\n        $this->storage->setPathPrefix('/johnsub');\n\n        $ret = $this->storage->getDirectoryCollection('/');\n        $ret->resetTimestamps(-1);\n        $this->assertJsonStringEqualsJsonString(json_encode([\n            'location' => '/',\n            'files' => [\n                0 => [\n                    'type' => 'file',\n                    'path' => '/john.txt',\n                    'name' => 'john.txt',\n                    'size' => 0,\n                    'time' => -1,\n                ],\n            ],\n        ]), json_encode($ret));\n\n        $ret = $this->storage->getDirectoryCollection('/..');\n        $ret->resetTimestamps(-1);\n        $this->assertJsonStringEqualsJsonString(json_encode([\n            'location' => '/..',\n            'files' => [\n                0 => [\n                    'type' => 'back',\n                    'path' => '/',\n                    'name' => '..',\n                    'size' => 0,\n                    'time' => -1,\n                ],\n                1 => [\n                    'type' => 'file',\n                    'path' => '/john.txt',\n                    'name' => 'john.txt',\n                    'size' => 0,\n                    'time' => -1,\n                ],\n            ],\n        ]), json_encode($ret));\n    }\n}\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of the FileGator package.\n *\n * (c) Milos Stojanovic <alcalbg@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE file\n */\n\nnamespace Filegator\\Services\\Storage;\n\nuse Filegator\\Services\\Service;\nuse League\\Flysystem\\Filesystem as Flysystem;\n\nclass Filesystem implements Service\n{\n    protected $separator;\n\n    protected $storage;\n\n    protected $path_prefix;\n\n    public function init(array $config = [])\n    {\n        $this->separator = $config['separator'];\n        $this->path_prefix = $this->separator;\n\n        $adapter = $config['adapter'];\n        $config = isset($config['config']) ? $config['config'] : [];\n\n        $this->storage = new Flysystem($adapter(), $config);\n    }\n\n    public function createDir(string $path, string $name)\n    {\n        $destination = $this->joinPaths($this->applyPathPrefix($path), $name);\n\n        while (! empty($this->storage->listContents($destination, true))) {\n            $destination = $this->upcountName($destination);\n        }\n\n        return $this->storage->createDir($destination);\n    }\n\n    public function createFile(string $path, string $name)\n    {\n        $destination = $this->joinPaths($this->applyPathPrefix($path), $name);\n\n        while ($this->storage->has($destination)) {\n            $destination = $this->upcountName($destination);\n        }\n\n        $this->storage->put($destination, '');\n    }\n\n    public function fileExists(string $path)\n    {\n        $path = $this->applyPathPrefix($path);\n\n        return $this->storage->has($path);\n    }\n\n    public function isDir(string $path)\n    {\n        $path = $this->applyPathPrefix($path);\n\n        return $this->storage->getSize($path) === false;\n    }\n\n    public function copyFile(string $source, string $destination)\n    {\n        $source = $this->applyPathPrefix($source);\n        $destination = $this->joinPaths($this->applyPathPrefix($destination), $this->getBaseName($source));\n\n        while ($this->storage->has($destination)) {\n            $destination = $this->upcountName($destination);\n        }\n\n        return $this->storage->copy($source, $destination);\n    }\n\n    public function copyDir(string $source, string $destination)\n    {\n        $source = $this->applyPathPrefix($this->addSeparators($source));\n        $destination = $this->applyPathPrefix($this->addSeparators($destination));\n        $source_dir = $this->getBaseName($source);\n        $real_destination = $this->joinPaths($destination, $source_dir);\n\n        while (! empty($this->storage->listContents($real_destination, true))) {\n            $real_destination = $this->upcountName($real_destination);\n        }\n\n        $contents = $this->storage->listContents($source, true);\n\n        if (empty($contents)) {\n            $this->storage->createDir($real_destination);\n        }\n\n        foreach ($contents as $file) {\n            $source_path = $this->separator.ltrim($file['path'], $this->separator);\n            $path = substr($source_path, strlen($source), strlen($source_path));\n\n            if ($file['type'] == 'dir') {\n                $this->storage->createDir($this->joinPaths($real_destination, $path));\n\n                continue;\n            }\n\n            if ($file['type'] == 'file') {\n                $this->storage->copy($file['path'], $this->joinPaths($real_destination, $path));\n            }\n        }\n    }\n\n    public function deleteDir(string $path)\n    {\n        return $this->storage->deleteDir($this->applyPathPrefix($path));\n    }\n\n    public function deleteFile(string $path)\n    {\n        return $this->storage->delete($this->applyPathPrefix($path));\n    }\n\n    public function readStream(string $path): array\n    {\n        if ($this->isDir($path)) {\n            throw new \\Exception('Cannot stream directory');\n        }\n\n        $path = $this->applyPathPrefix($path);\n\n        return [\n            'filename' => $this->getBaseName($path),\n            'stream' => $this->storage->readStream($path),\n            'filesize' => $this->storage->getSize($path),\n        ];\n    }\n\n    public function move(string $from, string $to): bool\n    {\n        $from = $this->applyPathPrefix($from);\n        $to = $this->applyPathPrefix($to);\n\n        while ($this->storage->has($to)) {\n            $to = $this->upcountName($to);\n        }\n\n        return $this->storage->rename($from, $to);\n    }\n\n    public function rename(string $destination, string $from, string $to): bool\n    {\n        $from = $this->joinPaths($this->applyPathPrefix($destination), $from);\n        $to = $this->joinPaths($this->applyPathPrefix($destination), $to);\n\n        while ($this->storage->has($to)) {\n            $to = $this->upcountName($to);\n        }\n\n        return $this->storage->rename($from, $to);\n    }\n\n    public function store(string $path, string $name, $resource, bool $overwrite = false): bool\n    {\n        $destination = $this->joinPaths($this->applyPathPrefix($path), $name);\n\n        while ($this->storage->has($destination)) {\n            if ($overwrite) {\n                $this->storage->delete($destination);\n            } else {\n                $destination = $this->upcountName($destination);\n            }\n        }\n\n        return $this->storage->putStream($destination, $resource);\n    }\n\n    public function setPathPrefix(string $path_prefix)\n    {\n        $this->path_prefix = $this->addSeparators($path_prefix);\n    }\n\n    public function getSeparator()\n    {\n        return $this->separator;\n    }\n\n    public function getPathPrefix(): string\n    {\n        return $this->path_prefix;\n    }\n\n    public function getDirectoryCollection(string $path, bool $recursive = false): DirectoryCollection\n    {\n        $collection = new DirectoryCollection($path);\n\n        foreach ($this->storage->listContents($this->applyPathPrefix($path), $recursive) as $entry) {\n            // By default only 'path' and 'type' is present\n\n            $name = $this->getBaseName($entry['path']);\n            $userpath = $this->stripPathPrefix($entry['path']);\n            $dirname = isset($entry['dirname']) ? $entry['dirname'] : $path;\n            $size = isset($entry['size']) ? $entry['size'] : 0;\n            $timestamp = isset($entry['timestamp']) ? $entry['timestamp'] : 0;\n\n            $collection->addFile($entry['type'], $userpath, $name, $size, $timestamp);\n        }\n\n        if (! $recursive && $this->addSeparators($path) !== $this->separator) {\n            $collection->addFile('back', $this->getParent($path), '..', 0, 0);\n        }\n\n        return $collection;\n    }\n\n    protected function upcountCallback($matches)\n    {\n        $index = isset($matches[1]) ? intval($matches[1]) + 1 : 1;\n        $ext = isset($matches[2]) ? $matches[2] : '';\n\n        return ' ('.$index.')'.$ext;\n    }\n\n    protected function upcountName($name)\n    {\n        return preg_replace_callback(\n            '/(?:(?: \\(([\\d]+)\\))?(\\.[^.]+))?$/',\n            [$this, 'upcountCallback'],\n            $name,\n            1\n        );\n    }\n\n    private function applyPathPrefix(string $path): string\n    {\n        if ($path == '..'\n            || strpos($path, '..'.$this->separator) !== false\n            || strpos($path, $this->separator.'..') !== false\n        ) {\n            $path = $this->separator;\n        }\n\n        return $this->joinPaths($this->getPathPrefix(), $path);\n    }\n\n    private function stripPathPrefix(string $path): string\n    {\n        $path = $this->separator.ltrim($path, $this->separator);\n\n        if (substr($path, 0, strlen($this->getPathPrefix())) == $this->getPathPrefix()) {\n            $path = $this->separator.substr($path, strlen($this->getPathPrefix()));\n        }\n\n        return $path;\n    }\n\n    private function addSeparators(string $dir): string\n    {\n        if (! $dir || $dir == $this->separator || ! trim($dir, $this->separator)) {\n            return $this->separator;\n        }\n\n        return $this->separator.trim($dir, $this->separator).$this->separator;\n    }\n\n    private function joinPaths(string $path1, string $path2): string\n    {\n        $path1 = $this->escapeDots($path1);\n        $path2 = $this->escapeDots($path2);\n\n        if (! $path2 || ! trim($path2, $this->separator)) {\n            return $this->addSeparators($path1);\n        }\n\n        return $this->addSeparators($path1).ltrim($path2, $this->separator);\n    }\n\n    private function getParent(string $dir): string\n    {\n        if (! $dir || $dir == $this->separator || ! trim($dir, $this->separator)) {\n            return $this->separator;\n        }\n\n        $tmp = explode($this->separator, trim($dir, $this->separator));\n        array_pop($tmp);\n\n        return $this->separator.trim(implode($this->separator, $tmp), $this->separator);\n    }\n\n    private function getBaseName(string $path): string\n    {\n        if (! $path || $path == $this->separator || ! trim($path, $this->separator)) {\n            return $this->separator;\n        }\n\n        $tmp = explode($this->separator, trim($path, $this->separator));\n\n        return  (string) array_pop($tmp);\n    }\n\n    private function escapeDots(string $path): string\n    {\n        $path = preg_replace('/\\\\\\+\\.{2,}/', '', $path);\n        $path = preg_replace('/\\.{2,}\\\\\\+/', '', $path);\n        $path = preg_replace('/\\/+\\.{2,}/', '', $path);\n        $path = preg_replace('/\\.{2,}\\/+/', '', $path);\n\n        return $path;\n    }\n}\n", "<?php\n\n/*\n * This file is part of the FileGator package.\n *\n * (c) Milos Stojanovic <alcalbg@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE file\n */\n\nnamespace Tests\\Unit;\n\nuse Exception;\nuse Filegator\\Services\\Storage\\Filesystem;\nuse League\\Flysystem\\Adapter\\Local;\nuse Tests\\TestCase;\n\n/**\n * @internal\n */\nclass FilesystemTest extends TestCase\n{\n    protected $storage;\n\n    protected $timestamp;\n\n    protected $separator = '/';\n\n    protected function setUp(): void\n    {\n        $this->resetTempDir();\n\n        $this->timestamp = time();\n\n        $this->storage = new Filesystem();\n        $this->storage->init([\n            'separator' => '/',\n            'adapter' => function () {\n                return new Local(\n                    TEST_REPOSITORY\n                );\n            },\n        ]);\n    }\n\n    protected function tearDown(): void\n    {\n        $this->resetTempDir();\n    }\n\n    public function testGetDirectoryFileCount()\n    {\n        $this->storage->createFile('/', '1.txt');\n        $this->storage->createFile('/', '2.txt');\n        $this->storage->createFile('/', '3.txt');\n        $this->storage->createFile('/', '4.txt');\n        $this->storage->createFile('/', '5.txt');\n        $this->storage->createDir('/', 'tmp');\n\n        $ret = $this->storage->getDirectoryCollection('/');\n\n        $ret_array = json_decode(json_encode($ret), true);\n\n        $this->assertCount(6, $ret_array['files']);\n    }\n\n    public function testGetSubDirectyoryFileCount()\n    {\n        $this->storage->createDir('/', 'sub');\n        $this->storage->createFile('/sub', '1.txt');\n        $this->storage->createFile('/sub', '2.txt');\n        $this->storage->createFile('/sub', '3.txt');\n        $this->storage->createFile('/sub', '4.txt');\n        $this->storage->createDir('/sub', 'deep');\n        $this->storage->createFile('/sub/deep', '1.txt');\n\n        $ret = $this->storage->getDirectoryCollection('/sub');\n\n        $ret_array = json_decode(json_encode($ret), true);\n\n        // back + 4 files + 1 deep dir\n        $this->assertCount(6, $ret_array['files']);\n\n        $ret = $this->storage->getDirectoryCollection('/sub/deep');\n\n        $ret_array = json_decode(json_encode($ret), true);\n\n        // back + 1 file\n        $this->assertCount(2, $ret_array['files']);\n    }\n\n    public function testInvalidDirReturnsBackLinkOnly()\n    {\n        $ret = $this->storage->getDirectoryCollection('/etc');\n\n        $this->assertJsonStringEqualsJsonString(json_encode($ret), json_encode([\n            'location' => '/etc',\n            'files' => [\n                0 => [\n                    'type' => 'back',\n                    'path' => '/',\n                    'name' => '..',\n                    'size' => 0,\n                    'time' => 0,\n                ],\n            ],\n        ]));\n    }\n\n    public function testListSubDirContents()\n    {\n        $this->storage->createDir('/', 'john');\n        $this->storage->createDir('/john', 'johnsub');\n        $this->storage->createFile('/john/johnsub', 'john2.txt');\n\n        $ret = $this->storage->getDirectoryCollection('/john/johnsub');\n        $ret->resetTimestamps();\n\n        $this->assertJsonStringEqualsJsonString(json_encode([\n            'location' => '/john/johnsub',\n            'files' => [\n                0 => [\n                    'type' => 'back',\n                    'path' => '/john',\n                    'name' => '..',\n                    'size' => 0,\n                    'time' => 0,\n                ],\n                1 => [\n                    'type' => 'file',\n                    'path' => '/john/johnsub/john2.txt',\n                    'name' => 'john2.txt',\n                    'size' => 0,\n                    'time' => 0,\n                ],\n            ],\n        ]), json_encode($ret));\n    }\n\n    public function testHomeDirContentsUsingPathPrefix()\n    {\n        $this->storage->setPathPrefix('/john');\n        $this->storage->createDir('/', 'johnsub');\n        $this->storage->createFile('/', 'john.txt');\n\n        $ret = $this->storage->getDirectoryCollection('/');\n        $ret->resetTimestamps(-1);\n\n        $this->assertJsonStringEqualsJsonString(json_encode([\n            'location' => '/',\n            'files' => [\n                0 => [\n                    'type' => 'dir',\n                    'path' => '/johnsub',\n                    'name' => 'johnsub',\n                    'size' => 0,\n                    'time' => -1,\n                ],\n                1 => [\n                    'type' => 'file',\n                    'path' => '/john.txt',\n                    'name' => 'john.txt',\n                    'size' => 0,\n                    'time' => -1,\n                ],\n            ],\n        ]), json_encode($ret));\n    }\n\n    public function testSubDirContentsUsingPathPrefix()\n    {\n        $this->storage->setPathPrefix('/john');\n        $this->storage->createDir('/', 'johnsub');\n        $this->storage->createFile('/johnsub', 'john2.txt');\n\n        $ret = $this->storage->getDirectoryCollection('/johnsub');\n\n        $ret->resetTimestamps();\n\n        $this->assertJsonStringEqualsJsonString(json_encode([\n            'location' => '/johnsub',\n            'files' => [\n                0 => [\n                    'type' => 'back',\n                    'path' => '/',\n                    'name' => '..',\n                    'size' => 0,\n                    'time' => 0,\n                ],\n                1 => [\n                    'type' => 'file',\n                    'path' => '/johnsub/john2.txt',\n                    'name' => 'john2.txt',\n                    'size' => 0,\n                    'time' => 0,\n                ],\n            ],\n        ]), json_encode($ret));\n    }\n\n    public function testStoringFileToRoot()\n    {\n        // create dummy file\n        file_put_contents(TEST_FILE, 'lorem ipsum');\n\n        $resource = fopen(TEST_FILE, 'r');\n        $ret = $this->storage->store('/', 'loremfile.txt', $resource);\n        fclose($resource);\n\n        $this->assertTrue($ret);\n\n        $this->assertFileExists(TEST_REPOSITORY.'/loremfile.txt');\n    }\n\n    public function testStoringFileToRootSubFolder()\n    {\n        // create dummy file\n        file_put_contents(TEST_FILE, 'lorem ipsum');\n\n        $resource = fopen(TEST_FILE, 'r');\n        $ret = $this->storage->store('/sub/sub1', 'loremfile.txt', $resource);\n        fclose($resource);\n\n        $this->assertTrue($ret);\n\n        $this->assertFileExists(TEST_REPOSITORY.'/sub/sub1/loremfile.txt');\n        $this->assertFileNotExists(TEST_REPOSITORY.'/loremfile.txt');\n    }\n\n    public function testUpcountingFilenameOrDirname()\n    {\n        $this->assertEquals('test (1).txt', $this->invokeMethod($this->storage, 'upcountName', ['test.txt']));\n        $this->assertEquals('test (2).txt', $this->invokeMethod($this->storage, 'upcountName', ['test (1).txt']));\n        $this->assertEquals('test (100).txt', $this->invokeMethod($this->storage, 'upcountName', ['test (99).txt']));\n        $this->assertEquals('test (1)', $this->invokeMethod($this->storage, 'upcountName', ['test']));\n        $this->assertEquals('test (9) (2) (1)', $this->invokeMethod($this->storage, 'upcountName', ['test (9) (2)']));\n        $this->assertEquals('test (2) (3) (4).txt', $this->invokeMethod($this->storage, 'upcountName', ['test (2) (3) (3).txt']));\n        $this->assertEquals('1 (1)', $this->invokeMethod($this->storage, 'upcountName', ['1']));\n        $this->assertEquals('test (1).txt (1).zip', $this->invokeMethod($this->storage, 'upcountName', ['test (1).txt.zip']));\n        $this->assertEquals('test(1) (1)', $this->invokeMethod($this->storage, 'upcountName', ['test(1)']));\n    }\n\n    public function testStoringFileWithTheSameNameUpcountsSecondFilename()\n    {\n        // create dummy file\n        file_put_contents(TEST_FILE, 'lorem ipsum');\n\n        $resource = fopen(TEST_FILE, 'r');\n        $this->storage->store('/', 'singletone.txt', $resource);\n        fclose($resource);\n\n        // create another dummy file witht the same name but different content\n        file_put_contents(TEST_FILE, 'croissant');\n\n        $resource = fopen(TEST_FILE, 'r');\n        $this->storage->store('/', 'singletone.txt', $resource);\n        fclose($resource);\n\n        // first file is not overwritten\n        $ret = $this->storage->readStream('singletone.txt');\n        $this->assertEquals('lorem ipsum', stream_get_contents($ret['stream']));\n\n        // second file is also here but with upcounted name\n        $ret = $this->storage->readStream('singletone (1).txt');\n        $this->assertEquals('croissant', stream_get_contents($ret['stream']));\n    }\n\n    public function testStoringFileWithTheSameNameOverwritesOriginalFile()\n    {\n        // create dummy file\n        $string = 'lorem ipsum';\n        $resource = fopen('data://text/plain;base64,'.base64_encode($string), 'r');\n\n        // and store it\n        $this->storage->store('/', 'singletone.txt', $resource);\n        fclose($resource);\n\n        // first file contains lorem ipsum\n        $ret = $this->storage->readStream('singletone.txt');\n        $this->assertEquals('lorem ipsum', stream_get_contents($ret['stream']));\n\n        // create another dummy file\n        $string = 'croissant';\n        $resource = fopen('data://text/plain;base64,'.base64_encode($string), 'r');\n\n        // and store it with the same name\n        $this->storage->store('/', 'singletone.txt', $resource, true);\n        fclose($resource);\n\n        // first file is overwritten\n        $ret = $this->storage->readStream('singletone.txt');\n        $this->assertEquals('croissant', stream_get_contents($ret['stream']));\n    }\n\n    public function testStoringFileWithTheSameNameUpcountsSecondFilenameUsingPathPrefix()\n    {\n        $this->storage->setPathPrefix('/john/');\n\n        // create dummy file\n        file_put_contents(TEST_FILE, 'lorem ipsum');\n\n        $resource = fopen(TEST_FILE, 'r');\n        $this->storage->store('/', 'singletone.txt', $resource);\n        fclose($resource);\n\n        // create another dummy file witht the same name but different content\n        file_put_contents(TEST_FILE, 'croissant');\n\n        $resource = fopen(TEST_FILE, 'r');\n        $this->storage->store('/', 'singletone.txt', $resource);\n        fclose($resource);\n\n        // first file is not overwritten\n        $ret = $this->storage->readStream('singletone.txt');\n        $this->assertEquals('lorem ipsum', stream_get_contents($ret['stream']));\n\n        // second file is also here but with upcounted name\n        $ret = $this->storage->readStream('singletone (1).txt');\n        $this->assertEquals('croissant', stream_get_contents($ret['stream']));\n    }\n\n    public function testStoringFileWithTheSameNameOverwritesOriginalFileUsingPathPrefix()\n    {\n        $this->storage->setPathPrefix('/john/');\n\n        // create dummy file\n        $string = 'lorem ipsum';\n        $resource = fopen('data://text/plain;base64,'.base64_encode($string), 'r');\n\n        // and store it\n        $this->storage->store('/', 'singletone.txt', $resource);\n        fclose($resource);\n\n        // first file contains lorem ipsum\n        $ret = $this->storage->readStream('singletone.txt');\n        $this->assertEquals('lorem ipsum', stream_get_contents($ret['stream']));\n\n        // create another dummy file\n        $string = 'croissant';\n        $resource = fopen('data://text/plain;base64,'.base64_encode($string), 'r');\n\n        // and store it with the same name\n        $this->storage->store('/', 'singletone.txt', $resource, true);\n        fclose($resource);\n\n        // first file is overwritten\n        $ret = $this->storage->readStream('singletone.txt');\n        $this->assertEquals('croissant', stream_get_contents($ret['stream']));\n    }\n    public function testCreatingFileWithTheSameNameUpcountsFilenameRecursively()\n    {\n        $this->storage->createFile('/', 'test.txt');\n        $this->storage->createFile('/', 'test (1).txt');\n\n        $resource = fopen(TEST_FILE, 'r');\n        $this->storage->store('/', 'test.txt', $resource);\n        fclose($resource);\n\n        $this->assertTrue($this->storage->fileExists('/test.txt'));\n        $this->assertTrue($this->storage->fileExists('/test (1).txt'));\n        $this->assertTrue($this->storage->fileExists('/test (2).txt')); // created with (2)\n    }\n\n    public function testCreatingDirectoryWithTheSameNameAsNonEmptyDirUpcountsDestinationDir()\n    {\n        $this->storage->createDir('/', 'test');\n        $this->storage->createFile('/test', 'a.txt');\n        // this dir\n        $this->storage->createDir('/', 'test');\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/test');\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/test (1)'); // goes here\n    }\n\n    public function testCreatingDirectoryWithTheSameNameAsNonEmptyDirUpcountsDestinationDirRecursively()\n    {\n        $this->storage->createDir('/', 'test');\n        $this->storage->createFile('/test', 'a.txt');\n        $this->storage->createDir('/', 'test (1)');\n        $this->storage->createFile('/test (1)', 'b.txt');\n\n        // this dir\n        $this->storage->createDir('/', 'test');\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/test');\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/test (1)');\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/test (1) (1)'); // goes here\n    }\n\n    public function testMovingFileWithTheSameNameUpcountsSecondFilename()\n    {\n        $this->storage->createFile('/', 'test.txt');\n        $this->storage->createFile('/sub', 'test.txt');\n\n        // move second file over the first one\n        $this->storage->move('/sub/test.txt', '/test.txt');\n\n        $this->assertTrue($this->storage->fileExists('/test.txt'));\n        $this->assertTrue($this->storage->fileExists('/test (1).txt'));\n    }\n\n    public function testMovingFileWithTheSameNameUpcountsSecondFilenameUntilTheNameIsUnique()\n    {\n        $this->storage->createFile('/', 'test.txt');\n        $this->storage->createFile('/', 'test (1).txt');\n        $this->storage->createFile('/', 'test (2).txt');\n        $this->storage->createFile('/sub', 'test.txt');\n\n        // move second file over the first one\n        $this->storage->move('/sub/test.txt', '/test.txt');\n\n        $this->assertTrue($this->storage->fileExists('/test.txt'));\n        $this->assertTrue($this->storage->fileExists('/test (1).txt'));\n        $this->assertTrue($this->storage->fileExists('/test (2).txt'));\n        $this->assertTrue($this->storage->fileExists('/test (3).txt')); // file is moved here\n    }\n\n    public function testCopyingFileWithTheSameNameUpcountsSecondFilename()\n    {\n        $this->storage->createFile('/', 'test.txt');\n        $this->storage->createFile('/', 'test (1).txt');\n        $this->storage->createFile('/', 'test (2).txt');\n        $this->storage->createFile('/sub', 'test.txt');\n\n        // move second file over the first one\n        $this->storage->copyFile('/sub/test.txt', '/');\n\n        $this->assertTrue($this->storage->fileExists('/test.txt'));\n        $this->assertTrue($this->storage->fileExists('/test (1).txt'));\n        $this->assertTrue($this->storage->fileExists('/test (2).txt'));\n        $this->assertTrue($this->storage->fileExists('/test (3).txt')); // file is copied here\n    }\n\n    public function testGetPathPrefix()\n    {\n        $this->storage->setPathPrefix('/john/');\n        $this->assertEquals('/john/', $this->storage->getPathPrefix());\n\n        $this->storage->setPathPrefix('/john');\n        $this->assertEquals('/john/', $this->storage->getPathPrefix());\n\n        $this->storage->setPathPrefix('john/');\n        $this->assertEquals('/john/', $this->storage->getPathPrefix());\n\n        $this->storage->setPathPrefix('john');\n        $this->assertEquals('/john/', $this->storage->getPathPrefix());\n    }\n\n    public function testApplyPathPrefix()\n    {\n        $this->storage->setPathPrefix('/john/');\n\n        $this->assertEquals('/john/test', $this->invokeMethod($this->storage, 'applyPathPrefix', ['test']));\n        $this->assertEquals('/john/test/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['test/']));\n        $this->assertEquals('/john/test/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['/test/']));\n        $this->assertEquals('/john/test', $this->invokeMethod($this->storage, 'applyPathPrefix', ['/test']));\n        $this->assertEquals('/john/test.txt', $this->invokeMethod($this->storage, 'applyPathPrefix', ['test.txt']));\n        $this->assertEquals('/john/test.txt/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['test.txt/']));\n        // no escaping path to upper dir\n        $this->assertEquals('/john/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['/..']));\n        $this->assertEquals('/john/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['..']));\n        $this->assertEquals('/john/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['../']));\n        $this->assertEquals('/john/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['/sub/../../']));\n        $this->assertEquals('/john/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['..\\\\']));\n        $this->assertEquals('/john/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['..\\\\\\\\']));\n        $this->assertEquals('/john/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['..\\\\..\\\\']));\n        $this->assertEquals('/john/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['\\\\\\\\..']));\n        $this->assertEquals('/john/', $this->invokeMethod($this->storage, 'applyPathPrefix', ['\\\\..\\\\..']));\n        $this->assertEquals('/john/\\\\.', $this->invokeMethod($this->storage, 'applyPathPrefix', ['\\\\.\\\\...']));\n        $this->assertEquals('/john/\\\\.', $this->invokeMethod($this->storage, 'applyPathPrefix', ['\\\\.\\\\....']));\n        $this->assertEquals('/john/.\\\\.', $this->invokeMethod($this->storage, 'applyPathPrefix', ['.\\\\.\\\\...']));\n        $this->assertEquals('/john/.', $this->invokeMethod($this->storage, 'applyPathPrefix', ['..\\\\.\\\\...']));\n        $this->assertEquals('/john/.', $this->invokeMethod($this->storage, 'applyPathPrefix', ['..\\\\.\\\\...']));\n        $this->assertEquals('/john/.', $this->invokeMethod($this->storage, 'applyPathPrefix', ['..\\\\.\\\\......']));\n        $this->assertEquals('/john/.\\\\', $this->invokeMethod($this->storage, 'applyPathPrefix', ['...\\\\.\\\\......\\\\']));\n    }\n\n    public function testStripPathPrefix()\n    {\n        $this->storage->setPathPrefix('/john/');\n\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'stripPathPrefix', ['/john/']));\n        $this->assertEquals('/test/', $this->invokeMethod($this->storage, 'stripPathPrefix', ['/john/test/']));\n        $this->assertEquals('/test', $this->invokeMethod($this->storage, 'stripPathPrefix', ['/john/test']));\n        $this->assertEquals('/doe/test', $this->invokeMethod($this->storage, 'stripPathPrefix', ['/john/doe/test']));\n        $this->assertEquals('/doe/test.txt', $this->invokeMethod($this->storage, 'stripPathPrefix', ['john/doe/test.txt']));\n        $this->assertEquals('/john', $this->invokeMethod($this->storage, 'stripPathPrefix', ['/john']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'stripPathPrefix', ['/']));\n    }\n\n    public function testAddSeparators()\n    {\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'addSeparators', ['']));\n        $this->assertEquals('/ /', $this->invokeMethod($this->storage, 'addSeparators', [' ']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'addSeparators', ['/']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'addSeparators', ['//']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'addSeparators', ['////']));\n        $this->assertEquals('/b/', $this->invokeMethod($this->storage, 'addSeparators', ['b']));\n        $this->assertEquals('/b/', $this->invokeMethod($this->storage, 'addSeparators', ['/b']));\n        $this->assertEquals('/b/', $this->invokeMethod($this->storage, 'addSeparators', ['/b/']));\n        $this->assertEquals('/b/', $this->invokeMethod($this->storage, 'addSeparators', ['/b//']));\n        $this->assertEquals('/b/', $this->invokeMethod($this->storage, 'addSeparators', ['//b//']));\n        $this->assertEquals('/a/b/', $this->invokeMethod($this->storage, 'addSeparators', ['a/b']));\n        $this->assertEquals('/a/b/', $this->invokeMethod($this->storage, 'addSeparators', ['a/b/']));\n        $this->assertEquals('/a/b/', $this->invokeMethod($this->storage, 'addSeparators', ['/a/b/']));\n        $this->assertEquals('/a b/', $this->invokeMethod($this->storage, 'addSeparators', ['a b']));\n        $this->assertEquals('/a b/c/', $this->invokeMethod($this->storage, 'addSeparators', ['a b/c']));\n    }\n\n    public function testJoinPaths()\n    {\n        $this->assertEquals('/1/2', $this->invokeMethod($this->storage, 'joinPaths', ['1', '2']));\n        $this->assertEquals('/1/2', $this->invokeMethod($this->storage, 'joinPaths', ['/1', '/2']));\n        $this->assertEquals('/1/2/', $this->invokeMethod($this->storage, 'joinPaths', ['1/', '2/']));\n        $this->assertEquals('/1/2', $this->invokeMethod($this->storage, 'joinPaths', ['1/', '/2']));\n        $this->assertEquals('/1/2/', $this->invokeMethod($this->storage, 'joinPaths', ['/1', '2/']));\n        $this->assertEquals('/1/2/', $this->invokeMethod($this->storage, 'joinPaths', ['/1/', '/2/']));\n    }\n\n    public function testGetBaseName()\n    {\n        $this->assertEquals('test.txt', $this->invokeMethod($this->storage, 'getBaseName', ['test.txt']));\n        $this->assertEquals('test.txt', $this->invokeMethod($this->storage, 'getBaseName', ['/test.txt']));\n        $this->assertEquals('test.txt', $this->invokeMethod($this->storage, 'getBaseName', ['/mike/test.txt']));\n        $this->assertEquals('b', $this->invokeMethod($this->storage, 'getBaseName', ['/a/b']));\n        $this->assertEquals('b', $this->invokeMethod($this->storage, 'getBaseName', ['/a/b/']));\n        $this->assertEquals('b', $this->invokeMethod($this->storage, 'getBaseName', ['a/b']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'getBaseName', ['']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'getBaseName', ['/']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'getBaseName', ['/////']));\n    }\n\n    public function testGetParent()\n    {\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'getParent', ['']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'getParent', [' ']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'getParent', ['/']));\n        $this->assertEquals('/', $this->invokeMethod($this->storage, 'getParent', ['////']));\n        $this->assertEquals('/parent', $this->invokeMethod($this->storage, 'getParent', ['/parent/child/']));\n        $this->assertEquals('/1/2/3/4', $this->invokeMethod($this->storage, 'getParent', ['/1/2/3/4/5/']));\n        $this->assertEquals('/1/2', $this->invokeMethod($this->storage, 'getParent', ['1/2/3']));\n        $this->assertEquals('/1/2', $this->invokeMethod($this->storage, 'getParent', ['1/2/3/']));\n        $this->assertEquals('/1/2', $this->invokeMethod($this->storage, 'getParent', ['/1/2/3/']));\n    }\n\n    public function testDeleteFiles()\n    {\n        $this->storage->createFile('/', 'sample22.txt');\n        $this->assertFileExists(TEST_REPOSITORY.'/sample22.txt');\n\n        $this->storage->deleteFile('sample22.txt');\n\n        $this->assertFileNotExists(TEST_REPOSITORY.'/sample22.txt');\n    }\n\n    public function testCreateAndDeleteDirectory()\n    {\n        $this->storage->createDir('/', 'sample22');\n        $this->storage->createDir('/sample22/subsample', 'sample22');\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/sample22');\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/sample22/subsample');\n\n        $this->storage->deleteDir('sample22');\n\n        $this->assertDirectoryNotExists(TEST_REPOSITORY.'/sample22');\n        $this->assertDirectoryNotExists(TEST_REPOSITORY.'/sample22/subsample');\n    }\n\n    public function testReadFileStream()\n    {\n        $this->storage->createFile('/', 'a.txt');\n        $ret = $this->storage->readStream('a.txt');\n\n        $this->assertEquals($ret['filename'], 'a.txt');\n        $this->assertIsResource($ret['stream']);\n    }\n\n    public function testReadFileStreamMissingFileThrowsException()\n    {\n        $this->expectException(Exception::class);\n\n        $this->storage->readStream('missing');\n    }\n\n    public function testCannotStreamDirectory()\n    {\n        $this->storage->createDir('/', 'sub');\n\n        $this->expectException(Exception::class);\n\n        $this->storage->readStream('sub');\n    }\n\n    public function testDirCheck()\n    {\n        $this->storage->createDir('/', 'sub');\n        $this->storage->createDir('/', 'empty');\n        $this->storage->createFile('/sub', 'd.txt');\n        $this->storage->createDir('/sub', 'sub1');\n        $this->storage->createFile('/sub/sub1', 'f.txt');\n        $this->storage->createDir('/sub', 'empty');\n        $this->storage->createDir('/', 'john');\n        $this->storage->createFile('/', 'a.txt');\n\n        $this->assertTrue($this->storage->isDir('/sub'));\n        $this->assertTrue($this->storage->isDir('/sub/sub1'));\n        $this->assertTrue($this->storage->isDir('/john'));\n        $this->assertTrue($this->storage->isDir('/empty'));\n        $this->assertTrue($this->storage->isDir('/sub/empty'));\n        $this->assertFalse($this->storage->isDir('a.txt'));\n        $this->assertFalse($this->storage->isDir('/sub/d.txt'));\n        $this->assertFalse($this->storage->isDir('/sub/sub1/f.txt'));\n    }\n\n    public function testRenameFile()\n    {\n        $this->storage->createFile('/', 'a.txt');\n\n        $this->storage->rename('/', 'a.txt', 'a1.txt');\n\n        $this->assertFalse($this->storage->fileExists('/a.txt'));\n        $this->assertTrue($this->storage->fileExists('/a1.txt'));\n    }\n\n    public function testRenameFileToExistingDestinationUpcountsFilenameRecursively()\n    {\n        $this->storage->createFile('/', 'a.txt');\n        $this->storage->createFile('/', 'a (1).txt');\n        $this->storage->createFile('/', 'test.txt');\n\n        $this->storage->rename('/', 'test.txt', 'a.txt');\n\n        $this->assertTrue($this->storage->fileExists('/a.txt'));\n        $this->assertTrue($this->storage->fileExists('/a (1).txt'));\n        $this->assertTrue($this->storage->fileExists('/a (2).txt')); // result\n    }\n\n    public function testRenameFileInSubfolder()\n    {\n        $this->storage->createDir('/', 'john');\n        $this->storage->createFile('/john', 'john.txt');\n\n        $this->storage->rename('/john/', 'john.txt', 'john2.txt');\n\n        $this->assertFalse($this->storage->fileExists('/john/john.txt'));\n        $this->assertTrue($this->storage->fileExists('/john/john2.txt'));\n    }\n\n    public function testRenameFileWithPathPrefix()\n    {\n        $this->storage->setPathPrefix('/john/');\n        $this->storage->createFile('/', 'john.txt');\n        $this->storage->rename('/', 'john.txt', 'john2.txt');\n\n        $this->assertFalse($this->storage->fileExists('/john.txt'));\n        $this->assertTrue($this->storage->fileExists('/john2.txt'));\n    }\n\n    public function testRenameNonexistingFileThrowsException()\n    {\n        $this->expectException(Exception::class);\n\n        $this->storage->move('/', 'nonexisting.txt', 'a1.txt');\n    }\n\n    public function testCreatingFile()\n    {\n        $this->storage->createFile('/', 'sample22');\n        $ret = $this->storage->getDirectoryCollection('/');\n        $this->assertStringContainsString('sample22', json_encode($ret));\n\n        $this->storage->createFile('/sub/', 'sample33');\n        $ret = $this->storage->getDirectoryCollection('/sub/');\n        $this->assertStringContainsString('sample33', json_encode($ret));\n    }\n\n    public function testCreatingFileUpcountsNameIfAlreadyExists()\n    {\n        $this->assertFalse($this->storage->fileExists('/test.txt'));\n        $this->assertFalse($this->storage->fileExists('/test (1).txt'));\n\n        $this->storage->createFile('/', 'test.txt');\n        $this->storage->createFile('/', 'test.txt');\n\n        $this->assertTrue($this->storage->fileExists('/test.txt'));\n        $this->assertTrue($this->storage->fileExists('/test (1).txt'));\n    }\n\n    public function testCreatingFileUpcountsNameRecursivelyIfAlreadyExists()\n    {\n        $this->storage->createFile('/', 'test.txt');\n        $this->storage->createFile('/', 'test (1).txt');\n\n        // this file\n        $this->storage->createFile('/', 'test.txt');\n\n        $this->assertTrue($this->storage->fileExists('/test.txt'));\n        $this->assertTrue($this->storage->fileExists('/test (1).txt'));\n        $this->assertTrue($this->storage->fileExists('/test (2).txt')); // ends up here\n    }\n\n    public function testGetSeparator()\n    {\n        $separator = $this->storage->getSeparator();\n\n        $this->assertEquals($this->separator, $separator);\n    }\n\n    public function testCopyFile()\n    {\n        $this->storage->setPathPrefix('/john');\n        $this->storage->createFile('/', 'john.txt');\n        $this->storage->createDir('/', 'johnsub');\n        $this->storage->createFile('/johnsub', 'sub.txt');\n\n        $this->assertFalse($this->storage->fileExists('/johnsub/john.txt'));\n\n        $this->storage->copyFile('/john.txt', '/johnsub/');\n\n        $this->assertTrue($this->storage->fileExists('/johnsub/john.txt'));\n\n        $this->assertFalse($this->storage->fileExists('/sub.txt'));\n\n        $this->storage->copyFile('/johnsub/sub.txt', '/');\n\n        $this->assertTrue($this->storage->fileExists('/sub.txt'));\n    }\n\n    public function testCopyMissingFileThrowsException()\n    {\n        $this->storage->createDir('/', 'tmp');\n\n        $this->expectException(Exception::class);\n        $this->storage->copyFile('/missing.txt', '/tmp/');\n    }\n\n    public function testCopyMissingDirCreatedADirOnDestination()\n    {\n        $this->storage->createDir('/', 'tmp');\n\n        $this->storage->copyDir('/missing/', '/tmp/');\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/tmp/missing/');\n    }\n\n    public function testCopyDir()\n    {\n        $this->storage->createDir('/', '/john');\n        $this->storage->createDir('/john', '/johnsub');\n        $this->storage->createDir('/', '/jane');\n\n        $this->storage->copyDir('/john/johnsub', '/jane/');\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/jane/johnsub');\n    }\n\n    public function testCopyDirWithSubDirs()\n    {\n        $this->storage->createDir('/', '/sub');\n        $this->storage->createDir('/sub', '/sub1');\n        $this->storage->createDir('/', '/jane');\n\n        $this->storage->copyDir('/sub', '/jane/');\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/jane/sub');\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/jane/sub/sub1');\n    }\n\n    public function testCopyDirWithEmptySubDir()\n    {\n        $this->storage->createDir('/', 'tmp');\n        $this->storage->createDir('/tmp/', 'sample22');\n        $this->storage->createDir('/tmp/sample22/', 'subsample1');\n        $this->storage->createDir('/tmp/sample22/', 'subsample2');\n        $this->storage->createFile('/tmp/sample22/subsample2', 'zzzz');\n\n        $this->assertDirectoryNotExists(TEST_REPOSITORY.'/jane/sample22');\n\n        $this->storage->copyDir('/tmp/sample22', '/jane/');\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/jane/sample22');\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/jane/sample22/subsample2');\n        $this->assertTrue($this->storage->fileExists('/jane/sample22/subsample2/zzzz'));\n    }\n\n    public function testCopyEmptyDir()\n    {\n        $this->storage->createDir('/', 'dest');\n        $this->storage->createDir('/', 'tmp');\n\n        $this->storage->copyDir('/tmp', '/dest');\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/dest/tmp');\n    }\n\n    public function testCopyDirOverExistingUpcountsDestinationDirname()\n    {\n        /*\n         * /dest/tmp/\n         * /dest/tmp/a.txt\n         * /tmp/\n         * /tmp/b.txt\n         *\n         * copy /tmp/ => /dest/\n         *\n         * /dest/tmp/\n         * /dest/tmp/a.txt\n         * /dest/tmp (1)/\n         * /dest/tmp (1)/b.txt\n         *\n         */\n        $this->storage->createDir('/', 'dest');\n        $this->storage->createDir('/dest', 'tmp');\n        $this->storage->createFile('/dest/tmp/', 'a.txt');\n        $this->storage->createDir('/', 'tmp');\n        $this->storage->createFile('/tmp/', 'b.txt');\n\n        $this->storage->copyDir('/tmp', '/dest');\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/dest/tmp/');\n        $this->assertTrue($this->storage->fileExists('/dest/tmp/a.txt'));\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/dest/tmp (1)');\n        $this->assertTrue($this->storage->fileExists('/dest/tmp (1)/b.txt'));\n    }\n\n    public function testMoveFile()\n    {\n        $this->storage->createFile('/', 'file.txt');\n        $this->storage->createDir('/', 'tmp');\n        $this->storage->move('/file.txt', '/tmp/file.txt');\n\n        $this->assertFalse($this->storage->fileExists('/file.txt'));\n        $this->assertTrue($this->storage->fileExists('/tmp/file.txt'));\n    }\n\n    public function testMoveDirectory()\n    {\n        $this->storage->createDir('/', 'test1');\n        $this->storage->createDir('/', 'test2');\n        $this->storage->move('/test1', '/test2/test1/');\n\n        $this->assertDirectoryExists(TEST_REPOSITORY.'/test2/test1/');\n    }\n\n    public function testCannotGoUpTheHomeDirUsingPathFiddle()\n    {\n        $this->storage->createFile('/', 'hidden.txt');\n        $this->storage->createDir('/', 'johnsub');\n        $this->storage->createFile('/johnsub', 'john.txt');\n        $this->storage->setPathPrefix('/johnsub');\n\n        $ret = $this->storage->getDirectoryCollection('/');\n        $ret->resetTimestamps(-1);\n        $this->assertJsonStringEqualsJsonString(json_encode([\n            'location' => '/',\n            'files' => [\n                0 => [\n                    'type' => 'file',\n                    'path' => '/john.txt',\n                    'name' => 'john.txt',\n                    'size' => 0,\n                    'time' => -1,\n                ],\n            ],\n        ]), json_encode($ret));\n\n        $ret = $this->storage->getDirectoryCollection('/..');\n        $ret->resetTimestamps(-1);\n        $this->assertJsonStringEqualsJsonString(json_encode([\n            'location' => '/..',\n            'files' => [\n                0 => [\n                    'type' => 'back',\n                    'path' => '/',\n                    'name' => '..',\n                    'size' => 0,\n                    'time' => -1,\n                ],\n                1 => [\n                    'type' => 'file',\n                    'path' => '/john.txt',\n                    'name' => 'john.txt',\n                    'size' => 0,\n                    'time' => -1,\n                ],\n            ],\n        ]), json_encode($ret));\n    }\n}\n"], "filenames": ["backend/Services/Storage/Filesystem.php", "tests/backend/Unit/FilesystemTest.php"], "buggy_code_start_loc": [243, 463], "buggy_code_end_loc": [297, 463], "fixing_code_start_loc": [244, 464], "fixing_code_end_loc": [312, 476], "type": "CWE-22", "message": "Path Traversal in GitHub repository filegator/filegator prior to 7.8.0.", "other": {"cve": {"id": "CVE-2022-1850", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-24T15:15:07.650", "lastModified": "2022-06-03T14:19:20.920", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Path Traversal in GitHub repository filegator/filegator prior to 7.8.0."}, {"lang": "es", "value": "Un Salto de Ruta en el repositorio GitHub filegator/filegator versiones anteriores a 7.8.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:filegator:filegator:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.8.0", "matchCriteriaId": "EB23DC73-0D86-48D4-8A73-5DC6B779F446"}]}]}], "references": [{"url": "https://github.com/filegator/filegator/commit/6e2b68f17f48cdc1d6a4a93a2369d2069fe64989", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/07755f07-a412-4911-84a4-2f8c03c8f7ce", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/filegator/filegator/commit/6e2b68f17f48cdc1d6a4a93a2369d2069fe64989"}}