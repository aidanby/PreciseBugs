{"buggy_code": ["#!/usr/bin/env bash\n# Usage: pyenv version-file-read <file>\nset -e\n[ -n \"$PYENV_DEBUG\" ] && set -x\n\nVERSION_FILE=\"$1\"\n\nif [ -s \"$VERSION_FILE\" ]; then\n  # Read the first non-whitespace word from the specified version file.\n  # Be careful not to load it whole in case there's something crazy in it.\n  IFS=\"${IFS}\"$'\\r'\n  sep=\n  while read -n 1024 -r version _ || [[ $version ]]; do\n      [[ -z $version || $version == \\#* ]] && continue\n      printf \"%s%s\" \"$sep\" \"$version\"\n      sep=:\n  done <\"$VERSION_FILE\"\n  [[ $sep ]] && { echo; exit; }\nfi\n\nexit 1\n", "#!/usr/bin/env bats\n\nload test_helper\n\nsetup() {\n  mkdir -p \"${PYENV_TEST_DIR}/myproject\"\n  cd \"${PYENV_TEST_DIR}/myproject\"\n}\n\n@test \"fails without arguments\" {\n  run pyenv-version-file-read\n  assert_failure \"\"\n}\n\n@test \"fails for invalid file\" {\n  run pyenv-version-file-read \"non-existent\"\n  assert_failure \"\"\n}\n\n@test \"fails for blank file\" {\n  echo > my-version\n  run pyenv-version-file-read my-version\n  assert_failure \"\"\n}\n\n@test \"reads simple version file\" {\n  cat > my-version <<<\"3.3.5\"\n  run pyenv-version-file-read my-version\n  assert_success \"3.3.5\"\n}\n\n@test \"ignores leading spaces\" {\n  cat > my-version <<<\"  3.3.5\"\n  run pyenv-version-file-read my-version\n  assert_success \"3.3.5\"\n}\n\n@test \"reads only the first word from file\" {\n  cat > my-version <<<\"3.3.5 2.7.6 hi\"\n  run pyenv-version-file-read my-version\n  assert_success \"3.3.5\"\n}\n\n@test \"loads *not* only the first line in file\" {\n  cat > my-version <<IN\n2.7.6 one\n3.3.5 two\nIN\n  run pyenv-version-file-read my-version\n  assert_success \"2.7.6:3.3.5\"\n}\n\n@test \"ignores leading blank lines\" {\n  cat > my-version <<IN\n\n3.3.5\nIN\n  run pyenv-version-file-read my-version\n  assert_success \"3.3.5\"\n}\n\n@test \"handles the file with no trailing newline\" {\n  echo -n \"2.7.6\" > my-version\n  run pyenv-version-file-read my-version\n  assert_success \"2.7.6\"\n}\n\n@test \"ignores carriage returns\" {\n  cat > my-version <<< $'3.3.5\\r'\n  run pyenv-version-file-read my-version\n  assert_success \"3.3.5\"\n}\n\n@test \"skips comment lines\" {\n  cat > my-version <<IN\n3.9.3\n3.8.9\n  # 3.4.0\n#3.3.7\n2.7.16\nIN\n  run pyenv-version-file-read my-version\n  assert_success \"3.9.3:3.8.9:2.7.16\"\n}\n"], "fixing_code": ["#!/usr/bin/env bash\n# Usage: pyenv version-file-read <file>\nset -e\n[ -n \"$PYENV_DEBUG\" ] && set -x\n\nVERSION_FILE=\"$1\"\n\nif [ -s \"$VERSION_FILE\" ]; then\n  # Read the first non-whitespace word from the specified version file.\n  # Be careful not to load it whole in case there's something crazy in it.\n  IFS=\"${IFS}\"$'\\r'\n  sep=\n  while read -n 1024 -r version _ || [[ $version ]]; do\n    if [[ -z $version || $version == \\#* ]]; then\n      # Skip empty lines and comments\n      continue\n    elif [ \"$version\" = \"..\" ] || [[ $version == */* ]]; then\n      # The version string is used to construct a path and we skip dubious values.\n      # This prevents issues such as path traversal (CVE-2022-35861).\n      continue\n    fi\n    printf \"%s%s\" \"$sep\" \"$version\"\n    sep=:\n  done <\"$VERSION_FILE\"\n  [[ $sep ]] && { echo; exit; }\nfi\n\nexit 1\n", "#!/usr/bin/env bats\n\nload test_helper\n\nsetup() {\n  mkdir -p \"${PYENV_TEST_DIR}/myproject\"\n  cd \"${PYENV_TEST_DIR}/myproject\"\n}\n\n@test \"fails without arguments\" {\n  run pyenv-version-file-read\n  assert_failure \"\"\n}\n\n@test \"fails for invalid file\" {\n  run pyenv-version-file-read \"non-existent\"\n  assert_failure \"\"\n}\n\n@test \"fails for blank file\" {\n  echo > my-version\n  run pyenv-version-file-read my-version\n  assert_failure \"\"\n}\n\n@test \"reads simple version file\" {\n  cat > my-version <<<\"3.3.5\"\n  run pyenv-version-file-read my-version\n  assert_success \"3.3.5\"\n}\n\n@test \"ignores leading spaces\" {\n  cat > my-version <<<\"  3.3.5\"\n  run pyenv-version-file-read my-version\n  assert_success \"3.3.5\"\n}\n\n@test \"reads only the first word from file\" {\n  cat > my-version <<<\"3.3.5 2.7.6 hi\"\n  run pyenv-version-file-read my-version\n  assert_success \"3.3.5\"\n}\n\n@test \"loads *not* only the first line in file\" {\n  cat > my-version <<IN\n2.7.6 one\n3.3.5 two\nIN\n  run pyenv-version-file-read my-version\n  assert_success \"2.7.6:3.3.5\"\n}\n\n@test \"ignores leading blank lines\" {\n  cat > my-version <<IN\n\n3.3.5\nIN\n  run pyenv-version-file-read my-version\n  assert_success \"3.3.5\"\n}\n\n@test \"handles the file with no trailing newline\" {\n  echo -n \"2.7.6\" > my-version\n  run pyenv-version-file-read my-version\n  assert_success \"2.7.6\"\n}\n\n@test \"ignores carriage returns\" {\n  cat > my-version <<< $'3.3.5\\r'\n  run pyenv-version-file-read my-version\n  assert_success \"3.3.5\"\n}\n\n@test \"skips comment lines\" {\n  cat > my-version <<IN\n3.9.3\n3.8.9\n  # 3.4.0\n#3.3.7\n2.7.16\nIN\n  run pyenv-version-file-read my-version\n  assert_success \"3.9.3:3.8.9:2.7.16\"\n}\n\n@test \"skips relative path traversal\" {\n  cat > my-version <<IN\n3.9.3\n3.8.9\n  ..\n./*\n2.7.16\nIN\n  run pyenv-version-file-read my-version\n  assert_success \"3.9.3:3.8.9:2.7.16\"\n}\n"], "filenames": ["libexec/pyenv-version-file-read", "test/version-file-read.bats"], "buggy_code_start_loc": [14, 84], "buggy_code_end_loc": [17, 84], "fixing_code_start_loc": [14, 85], "fixing_code_end_loc": [24, 97], "type": "CWE-22", "message": "pyenv 1.2.24 through 2.3.2 allows local users to gain privileges via a .python-version file in the current working directory. An attacker can craft a Python version string in .python-version to execute shims under their control. (Shims are executables that pass a command along to a specific version of pyenv. The version string is used to construct the path to the command, and there is no validation of whether the version specified is a valid version. Thus, relative path traversal can occur.)", "other": {"cve": {"id": "CVE-2022-35861", "sourceIdentifier": "cve@mitre.org", "published": "2022-07-17T17:15:08.233", "lastModified": "2023-03-03T19:26:52.587", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "pyenv 1.2.24 through 2.3.2 allows local users to gain privileges via a .python-version file in the current working directory. An attacker can craft a Python version string in .python-version to execute shims under their control. (Shims are executables that pass a command along to a specific version of pyenv. The version string is used to construct the path to the command, and there is no validation of whether the version specified is a valid version. Thus, relative path traversal can occur.)"}, {"lang": "es", "value": "pyenv versiones 1.2.24 hasta 2.3.2, permite a usuarios locales conseguir privilegios por medio de un archivo .python-version en el directorio de trabajo actual. Un atacante puede dise\u00f1ar una cadena de versi\u00f3n de Python en .python-version para ejecutar shims bajo su control. (Los shims son ejecutables que pasan un comando a una versi\u00f3n espec\u00edfica de pyenv. La cadena de versi\u00f3n es usada para construir la ruta al comando, y no es comprobado si la versi\u00f3n especificada es una versi\u00f3n v\u00e1lida. Por lo tanto, puede producirse un salto de rutas relativo)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pyenv:pyenv:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.2.24", "versionEndIncluding": "2.3.2", "matchCriteriaId": "D503BB1C-BFBB-4E06-A1F2-693A13B0D12D"}]}]}], "references": [{"url": "https://github.com/pyenv/pyenv/commit/22fa683571d98b59ea16e5fe48ac411c67939653", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/pyenv/pyenv/commit/22fa683571d98b59ea16e5fe48ac411c67939653"}}