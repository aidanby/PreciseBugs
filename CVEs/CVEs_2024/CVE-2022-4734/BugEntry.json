{"buggy_code": ["package server\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/usememos/memos/api\"\n\t\"github.com/usememos/memos/common\"\n\tmetric \"github.com/usememos/memos/plugin/metrics\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc (s *Server) registerSystemRoutes(g *echo.Group) {\n\tg.GET(\"/ping\", func(c echo.Context) error {\n\t\tdata := s.Profile\n\n\t\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSONCharsetUTF8)\n\t\tif err := json.NewEncoder(c.Response().Writer).Encode(composeResponse(data)); err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to compose system profile\").SetInternal(err)\n\t\t}\n\t\treturn nil\n\t})\n\n\tg.GET(\"/status\", func(c echo.Context) error {\n\t\tctx := c.Request().Context()\n\t\thostUserType := api.Host\n\t\thostUserFind := api.UserFind{\n\t\t\tRole: &hostUserType,\n\t\t}\n\t\thostUser, err := s.Store.FindUser(ctx, &hostUserFind)\n\t\tif err != nil && common.ErrorCode(err) != common.NotFound {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to find host user\").SetInternal(err)\n\t\t}\n\n\t\tif hostUser != nil {\n\t\t\t// data desensitize\n\t\t\thostUser.OpenID = \"\"\n\t\t}\n\n\t\tsystemStatus := api.SystemStatus{\n\t\t\tHost:             hostUser,\n\t\t\tProfile:          *s.Profile,\n\t\t\tDBSize:           0,\n\t\t\tAllowSignUp:      false,\n\t\t\tAdditionalStyle:  \"\",\n\t\t\tAdditionalScript: \"\",\n\t\t\tCustomizedProfile: api.CustomizedProfile{\n\t\t\t\tName:        \"memos\",\n\t\t\t\tLogoURL:     \"\",\n\t\t\t\tDescription: \"\",\n\t\t\t\tLocale:      \"en\",\n\t\t\t\tAppearance:  \"system\",\n\t\t\t\tExternalURL: \"\",\n\t\t\t},\n\t\t}\n\n\t\tsystemSettingList, err := s.Store.FindSystemSettingList(ctx, &api.SystemSettingFind{})\n\t\tif err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to find system setting list\").SetInternal(err)\n\t\t}\n\t\tfor _, systemSetting := range systemSettingList {\n\t\t\tvar value interface{}\n\t\t\terr := json.Unmarshal([]byte(systemSetting.Value), &value)\n\t\t\tif err != nil {\n\t\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to unmarshal system setting\").SetInternal(err)\n\t\t\t}\n\n\t\t\tif systemSetting.Name == api.SystemSettingAllowSignUpName {\n\t\t\t\tsystemStatus.AllowSignUp = value.(bool)\n\t\t\t} else if systemSetting.Name == api.SystemSettingAdditionalStyleName {\n\t\t\t\tsystemStatus.AdditionalStyle = value.(string)\n\t\t\t} else if systemSetting.Name == api.SystemSettingAdditionalScriptName {\n\t\t\t\tsystemStatus.AdditionalScript = value.(string)\n\t\t\t} else if systemSetting.Name == api.SystemSettingCustomizedProfileName {\n\t\t\t\tvalueMap := value.(map[string]interface{})\n\t\t\t\tsystemStatus.CustomizedProfile = api.CustomizedProfile{\n\t\t\t\t\tName:        valueMap[\"name\"].(string),\n\t\t\t\t\tLogoURL:     valueMap[\"logoUrl\"].(string),\n\t\t\t\t\tDescription: valueMap[\"description\"].(string),\n\t\t\t\t\tLocale:      valueMap[\"locale\"].(string),\n\t\t\t\t\tAppearance:  valueMap[\"appearance\"].(string),\n\t\t\t\t\tExternalURL: valueMap[\"externalUrl\"].(string),\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tuserID, ok := c.Get(getUserIDContextKey()).(int)\n\t\t// Get database size for host user.\n\t\tif ok {\n\t\t\tuser, err := s.Store.FindUser(ctx, &api.UserFind{\n\t\t\t\tID: &userID,\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to find user\").SetInternal(err)\n\t\t\t}\n\t\t\tif user != nil && user.Role == api.Host {\n\t\t\t\tfi, err := os.Stat(s.Profile.DSN)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to read database fileinfo\").SetInternal(err)\n\t\t\t\t}\n\t\t\t\tsystemStatus.DBSize = fi.Size()\n\t\t\t}\n\t\t}\n\n\t\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSONCharsetUTF8)\n\t\tif err := json.NewEncoder(c.Response().Writer).Encode(composeResponse(systemStatus)); err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to encode system status response\").SetInternal(err)\n\t\t}\n\t\treturn nil\n\t})\n\n\tg.POST(\"/system/setting\", func(c echo.Context) error {\n\t\tctx := c.Request().Context()\n\t\tuserID, ok := c.Get(getUserIDContextKey()).(int)\n\t\tif !ok {\n\t\t\treturn echo.NewHTTPError(http.StatusUnauthorized, \"Missing user in session\")\n\t\t}\n\n\t\tuser, err := s.Store.FindUser(ctx, &api.UserFind{\n\t\t\tID: &userID,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to find user\").SetInternal(err)\n\t\t}\n\t\tif user == nil {\n\t\t\treturn echo.NewHTTPError(http.StatusNotFound, \"Current signin user not found\")\n\t\t} else if user.Role != api.Host {\n\t\t\treturn echo.NewHTTPError(http.StatusUnauthorized, \"Unauthorized\")\n\t\t}\n\n\t\tsystemSettingUpsert := &api.SystemSettingUpsert{}\n\t\tif err := json.NewDecoder(c.Request().Body).Decode(systemSettingUpsert); err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusBadRequest, \"Malformatted post system setting request\").SetInternal(err)\n\t\t}\n\t\tif err := systemSettingUpsert.Validate(); err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusBadRequest, \"system setting invalidate\").SetInternal(err)\n\t\t}\n\n\t\tsystemSetting, err := s.Store.UpsertSystemSetting(ctx, systemSettingUpsert)\n\t\tif err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to upsert system setting\").SetInternal(err)\n\t\t}\n\t\ts.Collector.Collect(ctx, &metric.Metric{\n\t\t\tName:   \"systemSetting updated\",\n\t\t\tLabels: map[string]string{\"field\": string(systemSettingUpsert.Name)},\n\t\t})\n\n\t\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSONCharsetUTF8)\n\t\tif err := json.NewEncoder(c.Response().Writer).Encode(composeResponse(systemSetting)); err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to encode system setting response\").SetInternal(err)\n\t\t}\n\t\treturn nil\n\t})\n\n\tg.GET(\"/system/setting\", func(c echo.Context) error {\n\t\tctx := c.Request().Context()\n\t\tsystemSettingList, err := s.Store.FindSystemSettingList(ctx, &api.SystemSettingFind{})\n\t\tif err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to find system setting list\").SetInternal(err)\n\t\t}\n\n\t\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSONCharsetUTF8)\n\t\tif err := json.NewEncoder(c.Response().Writer).Encode(composeResponse(systemSettingList)); err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to encode system setting list response\").SetInternal(err)\n\t\t}\n\t\treturn nil\n\t})\n\n\tg.POST(\"/system/vacuum\", func(c echo.Context) error {\n\t\tctx := c.Request().Context()\n\t\tuserID, ok := c.Get(getUserIDContextKey()).(int)\n\t\tif !ok {\n\t\t\treturn echo.NewHTTPError(http.StatusUnauthorized, \"Missing user in session\")\n\t\t}\n\t\tuser, err := s.Store.FindUser(ctx, &api.UserFind{\n\t\t\tID: &userID,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to find user\").SetInternal(err)\n\t\t}\n\t\tif user == nil || user.Role != api.Host {\n\t\t\treturn echo.NewHTTPError(http.StatusUnauthorized, \"Unauthorized\")\n\t\t}\n\t\tif err := s.Store.Vacuum(ctx); err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to vacuum database\").SetInternal(err)\n\t\t}\n\t\tc.Response().WriteHeader(http.StatusOK)\n\t\treturn nil\n\t})\n}\n"], "fixing_code": ["package server\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/usememos/memos/api\"\n\t\"github.com/usememos/memos/common\"\n\tmetric \"github.com/usememos/memos/plugin/metrics\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc (s *Server) registerSystemRoutes(g *echo.Group) {\n\tg.GET(\"/ping\", func(c echo.Context) error {\n\t\tdata := s.Profile\n\n\t\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSONCharsetUTF8)\n\t\tif err := json.NewEncoder(c.Response().Writer).Encode(composeResponse(data)); err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to compose system profile\").SetInternal(err)\n\t\t}\n\t\treturn nil\n\t})\n\n\tg.GET(\"/status\", func(c echo.Context) error {\n\t\tctx := c.Request().Context()\n\t\thostUserType := api.Host\n\t\thostUserFind := api.UserFind{\n\t\t\tRole: &hostUserType,\n\t\t}\n\t\thostUser, err := s.Store.FindUser(ctx, &hostUserFind)\n\t\tif err != nil && common.ErrorCode(err) != common.NotFound {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to find host user\").SetInternal(err)\n\t\t}\n\n\t\tif hostUser != nil {\n\t\t\t// data desensitize\n\t\t\thostUser.OpenID = \"\"\n\t\t\thostUser.Email = \"\"\n\t\t}\n\n\t\tsystemStatus := api.SystemStatus{\n\t\t\tHost:             hostUser,\n\t\t\tProfile:          *s.Profile,\n\t\t\tDBSize:           0,\n\t\t\tAllowSignUp:      false,\n\t\t\tAdditionalStyle:  \"\",\n\t\t\tAdditionalScript: \"\",\n\t\t\tCustomizedProfile: api.CustomizedProfile{\n\t\t\t\tName:        \"memos\",\n\t\t\t\tLogoURL:     \"\",\n\t\t\t\tDescription: \"\",\n\t\t\t\tLocale:      \"en\",\n\t\t\t\tAppearance:  \"system\",\n\t\t\t\tExternalURL: \"\",\n\t\t\t},\n\t\t}\n\n\t\tsystemSettingList, err := s.Store.FindSystemSettingList(ctx, &api.SystemSettingFind{})\n\t\tif err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to find system setting list\").SetInternal(err)\n\t\t}\n\t\tfor _, systemSetting := range systemSettingList {\n\t\t\tvar value interface{}\n\t\t\terr := json.Unmarshal([]byte(systemSetting.Value), &value)\n\t\t\tif err != nil {\n\t\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to unmarshal system setting\").SetInternal(err)\n\t\t\t}\n\n\t\t\tif systemSetting.Name == api.SystemSettingAllowSignUpName {\n\t\t\t\tsystemStatus.AllowSignUp = value.(bool)\n\t\t\t} else if systemSetting.Name == api.SystemSettingAdditionalStyleName {\n\t\t\t\tsystemStatus.AdditionalStyle = value.(string)\n\t\t\t} else if systemSetting.Name == api.SystemSettingAdditionalScriptName {\n\t\t\t\tsystemStatus.AdditionalScript = value.(string)\n\t\t\t} else if systemSetting.Name == api.SystemSettingCustomizedProfileName {\n\t\t\t\tvalueMap := value.(map[string]interface{})\n\t\t\t\tsystemStatus.CustomizedProfile = api.CustomizedProfile{\n\t\t\t\t\tName:        valueMap[\"name\"].(string),\n\t\t\t\t\tLogoURL:     valueMap[\"logoUrl\"].(string),\n\t\t\t\t\tDescription: valueMap[\"description\"].(string),\n\t\t\t\t\tLocale:      valueMap[\"locale\"].(string),\n\t\t\t\t\tAppearance:  valueMap[\"appearance\"].(string),\n\t\t\t\t\tExternalURL: valueMap[\"externalUrl\"].(string),\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tuserID, ok := c.Get(getUserIDContextKey()).(int)\n\t\t// Get database size for host user.\n\t\tif ok {\n\t\t\tuser, err := s.Store.FindUser(ctx, &api.UserFind{\n\t\t\t\tID: &userID,\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to find user\").SetInternal(err)\n\t\t\t}\n\t\t\tif user != nil && user.Role == api.Host {\n\t\t\t\tfi, err := os.Stat(s.Profile.DSN)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to read database fileinfo\").SetInternal(err)\n\t\t\t\t}\n\t\t\t\tsystemStatus.DBSize = fi.Size()\n\t\t\t}\n\t\t}\n\n\t\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSONCharsetUTF8)\n\t\tif err := json.NewEncoder(c.Response().Writer).Encode(composeResponse(systemStatus)); err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to encode system status response\").SetInternal(err)\n\t\t}\n\t\treturn nil\n\t})\n\n\tg.POST(\"/system/setting\", func(c echo.Context) error {\n\t\tctx := c.Request().Context()\n\t\tuserID, ok := c.Get(getUserIDContextKey()).(int)\n\t\tif !ok {\n\t\t\treturn echo.NewHTTPError(http.StatusUnauthorized, \"Missing user in session\")\n\t\t}\n\n\t\tuser, err := s.Store.FindUser(ctx, &api.UserFind{\n\t\t\tID: &userID,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to find user\").SetInternal(err)\n\t\t}\n\t\tif user == nil {\n\t\t\treturn echo.NewHTTPError(http.StatusNotFound, \"Current signin user not found\")\n\t\t} else if user.Role != api.Host {\n\t\t\treturn echo.NewHTTPError(http.StatusUnauthorized, \"Unauthorized\")\n\t\t}\n\n\t\tsystemSettingUpsert := &api.SystemSettingUpsert{}\n\t\tif err := json.NewDecoder(c.Request().Body).Decode(systemSettingUpsert); err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusBadRequest, \"Malformatted post system setting request\").SetInternal(err)\n\t\t}\n\t\tif err := systemSettingUpsert.Validate(); err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusBadRequest, \"system setting invalidate\").SetInternal(err)\n\t\t}\n\n\t\tsystemSetting, err := s.Store.UpsertSystemSetting(ctx, systemSettingUpsert)\n\t\tif err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to upsert system setting\").SetInternal(err)\n\t\t}\n\t\ts.Collector.Collect(ctx, &metric.Metric{\n\t\t\tName:   \"systemSetting updated\",\n\t\t\tLabels: map[string]string{\"field\": string(systemSettingUpsert.Name)},\n\t\t})\n\n\t\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSONCharsetUTF8)\n\t\tif err := json.NewEncoder(c.Response().Writer).Encode(composeResponse(systemSetting)); err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to encode system setting response\").SetInternal(err)\n\t\t}\n\t\treturn nil\n\t})\n\n\tg.GET(\"/system/setting\", func(c echo.Context) error {\n\t\tctx := c.Request().Context()\n\t\tsystemSettingList, err := s.Store.FindSystemSettingList(ctx, &api.SystemSettingFind{})\n\t\tif err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to find system setting list\").SetInternal(err)\n\t\t}\n\n\t\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSONCharsetUTF8)\n\t\tif err := json.NewEncoder(c.Response().Writer).Encode(composeResponse(systemSettingList)); err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to encode system setting list response\").SetInternal(err)\n\t\t}\n\t\treturn nil\n\t})\n\n\tg.POST(\"/system/vacuum\", func(c echo.Context) error {\n\t\tctx := c.Request().Context()\n\t\tuserID, ok := c.Get(getUserIDContextKey()).(int)\n\t\tif !ok {\n\t\t\treturn echo.NewHTTPError(http.StatusUnauthorized, \"Missing user in session\")\n\t\t}\n\t\tuser, err := s.Store.FindUser(ctx, &api.UserFind{\n\t\t\tID: &userID,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to find user\").SetInternal(err)\n\t\t}\n\t\tif user == nil || user.Role != api.Host {\n\t\t\treturn echo.NewHTTPError(http.StatusUnauthorized, \"Unauthorized\")\n\t\t}\n\t\tif err := s.Store.Vacuum(ctx); err != nil {\n\t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to vacuum database\").SetInternal(err)\n\t\t}\n\t\tc.Response().WriteHeader(http.StatusOK)\n\t\treturn nil\n\t})\n}\n"], "filenames": ["server/system.go"], "buggy_code_start_loc": [39], "buggy_code_end_loc": [39], "fixing_code_start_loc": [40], "fixing_code_end_loc": [41], "type": "CWE-200", "message": "Exposure of Sensitive Information to an Unauthorized Actor in GitHub repository usememos/memos prior to 0.9.1.", "other": {"cve": {"id": "CVE-2022-4734", "sourceIdentifier": "security@huntr.dev", "published": "2022-12-27T15:15:12.767", "lastModified": "2023-01-05T19:59:33.870", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Exposure of Sensitive Information to an Unauthorized Actor in GitHub repository usememos/memos prior to 0.9.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:usememos:memos:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.9.1", "matchCriteriaId": "7E75ADB4-9898-49F3-BF80-3C54F4CE0FB4"}]}]}], "references": [{"url": "https://github.com/usememos/memos/commit/05b41804e33a34102f1f75bb2d69195dda6a1210", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/4b4421dc-73af-4dec-884c-836f9732cb5b", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/usememos/memos/commit/05b41804e33a34102f1f75bb2d69195dda6a1210"}}