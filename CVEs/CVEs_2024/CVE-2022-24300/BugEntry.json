{"buggy_code": ["/*\nMinetest\nCopyright (C) 2017-8 rubenwardy <rw@rubenwardy.com>\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation; either version 2.1 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n*/\n\n\n#include \"itemstackmetadata.h\"\n#include \"util/serialize.h\"\n#include \"util/strfnd.h\"\n\n#define DESERIALIZE_START '\\x01'\n#define DESERIALIZE_KV_DELIM '\\x02'\n#define DESERIALIZE_PAIR_DELIM '\\x03'\n#define DESERIALIZE_START_STR \"\\x01\"\n#define DESERIALIZE_KV_DELIM_STR \"\\x02\"\n#define DESERIALIZE_PAIR_DELIM_STR \"\\x03\"\n\n#define TOOLCAP_KEY \"tool_capabilities\"\n\nvoid ItemStackMetadata::clear()\n{\n\tMetadata::clear();\n\tupdateToolCapabilities();\n}\n\nbool ItemStackMetadata::setString(const std::string &name, const std::string &var)\n{\n\tbool result = Metadata::setString(name, var);\n\tif (name == TOOLCAP_KEY)\n\t\tupdateToolCapabilities();\n\treturn result;\n}\n\nvoid ItemStackMetadata::serialize(std::ostream &os) const\n{\n\tstd::ostringstream os2;\n\tos2 << DESERIALIZE_START;\n\tfor (const auto &stringvar : m_stringvars) {\n\t\tif (!stringvar.first.empty() || !stringvar.second.empty())\n\t\t\tos2 << stringvar.first << DESERIALIZE_KV_DELIM\n\t\t\t\t<< stringvar.second << DESERIALIZE_PAIR_DELIM;\n\t}\n\tos << serializeJsonStringIfNeeded(os2.str());\n}\n\nvoid ItemStackMetadata::deSerialize(std::istream &is)\n{\n\tstd::string in = deSerializeJsonStringIfNeeded(is);\n\n\tm_stringvars.clear();\n\n\tif (!in.empty()) {\n\t\tif (in[0] == DESERIALIZE_START) {\n\t\t\tStrfnd fnd(in);\n\t\t\tfnd.to(1);\n\t\t\twhile (!fnd.at_end()) {\n\t\t\t\tstd::string name = fnd.next(DESERIALIZE_KV_DELIM_STR);\n\t\t\t\tstd::string var  = fnd.next(DESERIALIZE_PAIR_DELIM_STR);\n\t\t\t\tm_stringvars[name] = var;\n\t\t\t}\n\t\t} else {\n\t\t\t// BACKWARDS COMPATIBILITY\n\t\t\tm_stringvars[\"\"] = in;\n\t\t}\n\t}\n\tupdateToolCapabilities();\n}\n\nvoid ItemStackMetadata::updateToolCapabilities()\n{\n\tif (contains(TOOLCAP_KEY)) {\n\t\ttoolcaps_overridden = true;\n\t\ttoolcaps_override = ToolCapabilities();\n\t\tstd::istringstream is(getString(TOOLCAP_KEY));\n\t\ttoolcaps_override.deserializeJson(is);\n\t} else {\n\t\ttoolcaps_overridden = false;\n\t}\n}\n\nvoid ItemStackMetadata::setToolCapabilities(const ToolCapabilities &caps)\n{\n\tstd::ostringstream os;\n\tcaps.serializeJson(os);\n\tsetString(TOOLCAP_KEY, os.str());\n}\n\nvoid ItemStackMetadata::clearToolCapabilities()\n{\n\tsetString(TOOLCAP_KEY, \"\");\n}\n"], "fixing_code": ["/*\nMinetest\nCopyright (C) 2017-8 rubenwardy <rw@rubenwardy.com>\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation; either version 2.1 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n*/\n\n\n#include \"itemstackmetadata.h\"\n#include \"util/serialize.h\"\n#include \"util/strfnd.h\"\n#include <algorithm>\n\n#define DESERIALIZE_START '\\x01'\n#define DESERIALIZE_KV_DELIM '\\x02'\n#define DESERIALIZE_PAIR_DELIM '\\x03'\n#define DESERIALIZE_START_STR \"\\x01\"\n#define DESERIALIZE_KV_DELIM_STR \"\\x02\"\n#define DESERIALIZE_PAIR_DELIM_STR \"\\x03\"\n\n#define TOOLCAP_KEY \"tool_capabilities\"\n\nvoid ItemStackMetadata::clear()\n{\n\tMetadata::clear();\n\tupdateToolCapabilities();\n}\n\nstatic void sanitize_string(std::string &str)\n{\n\tstr.erase(std::remove(str.begin(), str.end(), DESERIALIZE_START), str.end());\n\tstr.erase(std::remove(str.begin(), str.end(), DESERIALIZE_KV_DELIM), str.end());\n\tstr.erase(std::remove(str.begin(), str.end(), DESERIALIZE_PAIR_DELIM), str.end());\n}\n\nbool ItemStackMetadata::setString(const std::string &name, const std::string &var)\n{\n\tstd::string clean_name = name;\n\tstd::string clean_var = var;\n\tsanitize_string(clean_name);\n\tsanitize_string(clean_var);\n\n\tbool result = Metadata::setString(clean_name, clean_var);\n\tif (clean_name == TOOLCAP_KEY)\n\t\tupdateToolCapabilities();\n\treturn result;\n}\n\nvoid ItemStackMetadata::serialize(std::ostream &os) const\n{\n\tstd::ostringstream os2;\n\tos2 << DESERIALIZE_START;\n\tfor (const auto &stringvar : m_stringvars) {\n\t\tif (!stringvar.first.empty() || !stringvar.second.empty())\n\t\t\tos2 << stringvar.first << DESERIALIZE_KV_DELIM\n\t\t\t\t<< stringvar.second << DESERIALIZE_PAIR_DELIM;\n\t}\n\tos << serializeJsonStringIfNeeded(os2.str());\n}\n\nvoid ItemStackMetadata::deSerialize(std::istream &is)\n{\n\tstd::string in = deSerializeJsonStringIfNeeded(is);\n\n\tm_stringvars.clear();\n\n\tif (!in.empty()) {\n\t\tif (in[0] == DESERIALIZE_START) {\n\t\t\tStrfnd fnd(in);\n\t\t\tfnd.to(1);\n\t\t\twhile (!fnd.at_end()) {\n\t\t\t\tstd::string name = fnd.next(DESERIALIZE_KV_DELIM_STR);\n\t\t\t\tstd::string var  = fnd.next(DESERIALIZE_PAIR_DELIM_STR);\n\t\t\t\tm_stringvars[name] = var;\n\t\t\t}\n\t\t} else {\n\t\t\t// BACKWARDS COMPATIBILITY\n\t\t\tm_stringvars[\"\"] = in;\n\t\t}\n\t}\n\tupdateToolCapabilities();\n}\n\nvoid ItemStackMetadata::updateToolCapabilities()\n{\n\tif (contains(TOOLCAP_KEY)) {\n\t\ttoolcaps_overridden = true;\n\t\ttoolcaps_override = ToolCapabilities();\n\t\tstd::istringstream is(getString(TOOLCAP_KEY));\n\t\ttoolcaps_override.deserializeJson(is);\n\t} else {\n\t\ttoolcaps_overridden = false;\n\t}\n}\n\nvoid ItemStackMetadata::setToolCapabilities(const ToolCapabilities &caps)\n{\n\tstd::ostringstream os;\n\tcaps.serializeJson(os);\n\tsetString(TOOLCAP_KEY, os.str());\n}\n\nvoid ItemStackMetadata::clearToolCapabilities()\n{\n\tsetString(TOOLCAP_KEY, \"\");\n}\n"], "filenames": ["src/itemstackmetadata.cpp"], "buggy_code_start_loc": [23], "buggy_code_end_loc": [44], "fixing_code_start_loc": [24], "fixing_code_end_loc": [57], "type": "CWE-74", "message": "Minetest before 5.4.0 allows attackers to add or modify arbitrary meta fields of the same item stack as saved user input, aka ItemStack meta injection.", "other": {"cve": {"id": "CVE-2022-24300", "sourceIdentifier": "cve@mitre.org", "published": "2022-02-02T06:15:06.670", "lastModified": "2022-02-28T15:33:07.667", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Minetest before 5.4.0 allows attackers to add or modify arbitrary meta fields of the same item stack as saved user input, aka ItemStack meta injection."}, {"lang": "es", "value": "Minetest versiones anteriores a 5.4.0, permite a atacantes a\u00f1adir o modificar meta campos arbitrarios de la misma pila de \u00edtems como entrada de usuario guardada, tambi\u00e9n se conoce como inyecci\u00f3n de meta pila de \u00edtems"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:minetest:minetest:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.4.0", "matchCriteriaId": "ADBC4BE4-39DD-443E-9B73-0D9A9323A266"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:11.0:*:*:*:*:*:*:*", "matchCriteriaId": "FA6FEEC2-9F11-4643-8827-749718254FED"}]}]}], "references": [{"url": "https://bugs.debian.org/1004223", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/minetest/minetest/commit/b5956bde259faa240a81060ff4e598e25ad52dae", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/minetest/minetest/security/advisories/GHSA-hwj2-xf72-r4cf", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.debian.org/security/2022/dsa-5075", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/minetest/minetest/commit/b5956bde259faa240a81060ff4e598e25ad52dae"}}