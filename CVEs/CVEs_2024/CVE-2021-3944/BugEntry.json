{"buggy_code": ["<?php\n\nnamespace BookStack\\Http\\Controllers\\Auth;\n\nuse BookStack\\Auth\\Access\\EmailConfirmationService;\nuse BookStack\\Auth\\Access\\LoginService;\nuse BookStack\\Auth\\UserRepo;\nuse BookStack\\Exceptions\\ConfirmationEmailException;\nuse BookStack\\Exceptions\\UserTokenExpiredException;\nuse BookStack\\Exceptions\\UserTokenNotFoundException;\nuse BookStack\\Http\\Controllers\\Controller;\nuse Exception;\nuse Illuminate\\Http\\Request;\n\nclass ConfirmEmailController extends Controller\n{\n    protected $emailConfirmationService;\n    protected $loginService;\n    protected $userRepo;\n\n    /**\n     * Create a new controller instance.\n     */\n    public function __construct(\n        EmailConfirmationService $emailConfirmationService,\n        LoginService $loginService,\n        UserRepo $userRepo\n    ) {\n        $this->emailConfirmationService = $emailConfirmationService;\n        $this->loginService = $loginService;\n        $this->userRepo = $userRepo;\n    }\n\n    /**\n     * Show the page to tell the user to check their email\n     * and confirm their address.\n     */\n    public function show()\n    {\n        return view('auth.register-confirm');\n    }\n\n    /**\n     * Shows a notice that a user's email address has not been confirmed,\n     * Also has the option to re-send the confirmation email.\n     */\n    public function showAwaiting()\n    {\n        $user = $this->loginService->getLastLoginAttemptUser();\n\n        return view('auth.user-unconfirmed', ['user' => $user]);\n    }\n\n    /**\n     * Confirms an email via a token and logs the user into the system.\n     *\n     * @throws ConfirmationEmailException\n     * @throws Exception\n     */\n    public function confirm(string $token)\n    {\n        try {\n            $userId = $this->emailConfirmationService->checkTokenAndGetUserId($token);\n        } catch (UserTokenNotFoundException $exception) {\n            $this->showErrorNotification(trans('errors.email_confirmation_invalid'));\n\n            return redirect('/register');\n        } catch (UserTokenExpiredException $exception) {\n            $user = $this->userRepo->getById($exception->userId);\n            $this->emailConfirmationService->sendConfirmation($user);\n            $this->showErrorNotification(trans('errors.email_confirmation_expired'));\n\n            return redirect('/register/confirm');\n        }\n\n        $user = $this->userRepo->getById($userId);\n        $user->email_confirmed = true;\n        $user->save();\n\n        $this->emailConfirmationService->deleteByUser($user);\n        $this->showSuccessNotification(trans('auth.email_confirm_success'));\n        $this->loginService->login($user, auth()->getDefaultDriver());\n\n        return redirect('/');\n    }\n\n    /**\n     * Resend the confirmation email.\n     */\n    public function resend(Request $request)\n    {\n        $this->validate($request, [\n            'email' => ['required', 'email', 'exists:users,email'],\n        ]);\n        $user = $this->userRepo->getByEmail($request->get('email'));\n\n        try {\n            $this->emailConfirmationService->sendConfirmation($user);\n        } catch (Exception $e) {\n            $this->showErrorNotification(trans('auth.email_confirm_send_error'));\n\n            return redirect('/register/confirm');\n        }\n\n        $this->showSuccessNotification(trans('auth.email_confirm_resent'));\n\n        return redirect('/register/confirm');\n    }\n}\n", "<?php\n\nnamespace BookStack\\Http\\Controllers\\Auth;\n\nuse BookStack\\Auth\\Access\\LoginService;\nuse BookStack\\Auth\\Access\\UserInviteService;\nuse BookStack\\Auth\\UserRepo;\nuse BookStack\\Exceptions\\UserTokenExpiredException;\nuse BookStack\\Exceptions\\UserTokenNotFoundException;\nuse BookStack\\Http\\Controllers\\Controller;\nuse Exception;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Routing\\Redirector;\n\nclass UserInviteController extends Controller\n{\n    protected $inviteService;\n    protected $loginService;\n    protected $userRepo;\n\n    /**\n     * Create a new controller instance.\n     */\n    public function __construct(UserInviteService $inviteService, LoginService $loginService, UserRepo $userRepo)\n    {\n        $this->middleware('guest');\n        $this->middleware('guard:standard');\n\n        $this->inviteService = $inviteService;\n        $this->loginService = $loginService;\n        $this->userRepo = $userRepo;\n    }\n\n    /**\n     * Show the page for the user to set the password for their account.\n     *\n     * @throws Exception\n     */\n    public function showSetPassword(string $token)\n    {\n        try {\n            $this->inviteService->checkTokenAndGetUserId($token);\n        } catch (Exception $exception) {\n            return $this->handleTokenException($exception);\n        }\n\n        return view('auth.invite-set-password', [\n            'token' => $token,\n        ]);\n    }\n\n    /**\n     * Sets the password for an invited user and then grants them access.\n     *\n     * @throws Exception\n     */\n    public function setPassword(Request $request, string $token)\n    {\n        $this->validate($request, [\n            'password' => ['required', 'min:8'],\n        ]);\n\n        try {\n            $userId = $this->inviteService->checkTokenAndGetUserId($token);\n        } catch (Exception $exception) {\n            return $this->handleTokenException($exception);\n        }\n\n        $user = $this->userRepo->getById($userId);\n        $user->password = bcrypt($request->get('password'));\n        $user->email_confirmed = true;\n        $user->save();\n\n        $this->inviteService->deleteByUser($user);\n        $this->showSuccessNotification(trans('auth.user_invite_success', ['appName' => setting('app-name')]));\n        $this->loginService->login($user, auth()->getDefaultDriver());\n\n        return redirect('/');\n    }\n\n    /**\n     * Check and validate the exception thrown when checking an invite token.\n     *\n     * @throws Exception\n     *\n     * @return RedirectResponse|Redirector\n     */\n    protected function handleTokenException(Exception $exception)\n    {\n        if ($exception instanceof UserTokenNotFoundException) {\n            return redirect('/');\n        }\n\n        if ($exception instanceof UserTokenExpiredException) {\n            $this->showErrorNotification(trans('errors.invite_token_expired'));\n\n            return redirect('/password/email');\n        }\n\n        throw $exception;\n    }\n}\n", "<?php\n/**\n * Authentication Language Lines\n * The following language lines are used during authentication for various\n * messages that we need to display to the user.\n */\nreturn [\n\n    'failed' => 'These credentials do not match our records.',\n    'throttle' => 'Too many login attempts. Please try again in :seconds seconds.',\n\n    // Login & Register\n    'sign_up' => 'Sign up',\n    'log_in' => 'Log in',\n    'log_in_with' => 'Login with :socialDriver',\n    'sign_up_with' => 'Sign up with :socialDriver',\n    'logout' => 'Logout',\n\n    'name' => 'Name',\n    'username' => 'Username',\n    'email' => 'Email',\n    'password' => 'Password',\n    'password_confirm' => 'Confirm Password',\n    'password_hint' => 'Must be over 7 characters',\n    'forgot_password' => 'Forgot Password?',\n    'remember_me' => 'Remember Me',\n    'ldap_email_hint' => 'Please enter an email to use for this account.',\n    'create_account' => 'Create Account',\n    'already_have_account' => 'Already have an account?',\n    'dont_have_account' => 'Don\\'t have an account?',\n    'social_login' => 'Social Login',\n    'social_registration' => 'Social Registration',\n    'social_registration_text' => 'Register and sign in using another service.',\n\n    'register_thanks' => 'Thanks for registering!',\n    'register_confirm' => 'Please check your email and click the confirmation button to access :appName.',\n    'registrations_disabled' => 'Registrations are currently disabled',\n    'registration_email_domain_invalid' => 'That email domain does not have access to this application',\n    'register_success' => 'Thanks for signing up! You are now registered and signed in.',\n\n    // Password Reset\n    'reset_password' => 'Reset Password',\n    'reset_password_send_instructions' => 'Enter your email below and you will be sent an email with a password reset link.',\n    'reset_password_send_button' => 'Send Reset Link',\n    'reset_password_sent' => 'A password reset link will be sent to :email if that email address is found in the system.',\n    'reset_password_success' => 'Your password has been successfully reset.',\n    'email_reset_subject' => 'Reset your :appName password',\n    'email_reset_text' => 'You are receiving this email because we received a password reset request for your account.',\n    'email_reset_not_requested' => 'If you did not request a password reset, no further action is required.',\n\n    // Email Confirmation\n    'email_confirm_subject' => 'Confirm your email on :appName',\n    'email_confirm_greeting' => 'Thanks for joining :appName!',\n    'email_confirm_text' => 'Please confirm your email address by clicking the button below:',\n    'email_confirm_action' => 'Confirm Email',\n    'email_confirm_send_error' => 'Email confirmation required but the system could not send the email. Contact the admin to ensure email is set up correctly.',\n    'email_confirm_success' => 'Your email has been confirmed!',\n    'email_confirm_resent' => 'Confirmation email resent, Please check your inbox.',\n\n    'email_not_confirmed' => 'Email Address Not Confirmed',\n    'email_not_confirmed_text' => 'Your email address has not yet been confirmed.',\n    'email_not_confirmed_click_link' => 'Please click the link in the email that was sent shortly after you registered.',\n    'email_not_confirmed_resend' => 'If you cannot find the email you can re-send the confirmation email by submitting the form below.',\n    'email_not_confirmed_resend_button' => 'Resend Confirmation Email',\n\n    // User Invite\n    'user_invite_email_subject' => 'You have been invited to join :appName!',\n    'user_invite_email_greeting' => 'An account has been created for you on :appName.',\n    'user_invite_email_text' => 'Click the button below to set an account password and gain access:',\n    'user_invite_email_action' => 'Set Account Password',\n    'user_invite_page_welcome' => 'Welcome to :appName!',\n    'user_invite_page_text' => 'To finalise your account and gain access you need to set a password which will be used to log-in to :appName on future visits.',\n    'user_invite_page_confirm_button' => 'Confirm Password',\n    'user_invite_success' => 'Password set, you now have access to :appName!',\n\n    // Multi-factor Authentication\n    'mfa_setup' => 'Setup Multi-Factor Authentication',\n    'mfa_setup_desc' => 'Setup multi-factor authentication as an extra layer of security for your user account.',\n    'mfa_setup_configured' => 'Already configured',\n    'mfa_setup_reconfigure' => 'Reconfigure',\n    'mfa_setup_remove_confirmation' => 'Are you sure you want to remove this multi-factor authentication method?',\n    'mfa_setup_action' => 'Setup',\n    'mfa_backup_codes_usage_limit_warning' => 'You have less than 5 backup codes remaining, Please generate and store a new set before you run out of codes to prevent being locked out of your account.',\n    'mfa_option_totp_title' => 'Mobile App',\n    'mfa_option_totp_desc' => 'To use multi-factor authentication you\\'ll need a mobile application that supports TOTP such as Google Authenticator, Authy or Microsoft Authenticator.',\n    'mfa_option_backup_codes_title' => 'Backup Codes',\n    'mfa_option_backup_codes_desc' => 'Securely store a set of one-time-use backup codes which you can enter to verify your identity.',\n    'mfa_gen_confirm_and_enable' => 'Confirm and Enable',\n    'mfa_gen_backup_codes_title' => 'Backup Codes Setup',\n    'mfa_gen_backup_codes_desc' => 'Store the below list of codes in a safe place. When accessing the system you\\'ll be able to use one of the codes as a second authentication mechanism.',\n    'mfa_gen_backup_codes_download' => 'Download Codes',\n    'mfa_gen_backup_codes_usage_warning' => 'Each code can only be used once',\n    'mfa_gen_totp_title' => 'Mobile App Setup',\n    'mfa_gen_totp_desc' => 'To use multi-factor authentication you\\'ll need a mobile application that supports TOTP such as Google Authenticator, Authy or Microsoft Authenticator.',\n    'mfa_gen_totp_scan' => 'Scan the QR code below using your preferred authentication app to get started.',\n    'mfa_gen_totp_verify_setup' => 'Verify Setup',\n    'mfa_gen_totp_verify_setup_desc' => 'Verify that all is working by entering a code, generated within your authentication app, in the input box below:',\n    'mfa_gen_totp_provide_code_here' => 'Provide your app generated code here',\n    'mfa_verify_access' => 'Verify Access',\n    'mfa_verify_access_desc' => 'Your user account requires you to confirm your identity via an additional level of verification before you\\'re granted access. Verify using one of your configured methods to continue.',\n    'mfa_verify_no_methods' => 'No Methods Configured',\n    'mfa_verify_no_methods_desc' => 'No multi-factor authentication methods could be found for your account. You\\'ll need to set up at least one method before you gain access.',\n    'mfa_verify_use_totp' => 'Verify using a mobile app',\n    'mfa_verify_use_backup_codes' => 'Verify using a backup code',\n    'mfa_verify_backup_code' => 'Backup Code',\n    'mfa_verify_backup_code_desc' => 'Enter one of your remaining backup codes below:',\n    'mfa_verify_backup_code_enter_here' => 'Enter backup code here',\n    'mfa_verify_totp_desc' => 'Enter the code, generated using your mobile app, below:',\n    'mfa_setup_login_notification' => 'Multi-factor method configured, Please now login again using the configured method.',\n];\n", "<?php\n\nnamespace Tests\\Auth;\n\nuse BookStack\\Auth\\Access\\Mfa\\MfaSession;\nuse BookStack\\Auth\\User;\nuse BookStack\\Entities\\Models\\Page;\nuse BookStack\\Notifications\\ConfirmEmail;\nuse BookStack\\Notifications\\ResetPassword;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Notification;\nuse Tests\\TestCase;\nuse Tests\\TestResponse;\n\nclass AuthTest extends TestCase\n{\n    public function test_auth_working()\n    {\n        $this->get('/')->assertRedirect('/login');\n    }\n\n    public function test_login()\n    {\n        $this->login('admin@admin.com', 'password')->assertRedirect('/');\n    }\n\n    public function test_public_viewing()\n    {\n        $this->setSettings(['app-public' => 'true']);\n        $this->get('/')\n            ->assertOk()\n            ->assertSee('Log in');\n    }\n\n    public function test_registration_showing()\n    {\n        // Ensure registration form is showing\n        $this->setSettings(['registration-enabled' => 'true']);\n        $this->get('/login')\n            ->assertElementContains('a[href=\"' . url('/register') . '\"]', 'Sign up');\n    }\n\n    public function test_normal_registration()\n    {\n        // Set settings and get user instance\n        $this->setSettings(['registration-enabled' => 'true']);\n        $user = User::factory()->make();\n\n        // Test form and ensure user is created\n        $this->get('/register')\n            ->assertSee('Sign Up')\n            ->assertElementContains('form[action=\"' . url('/register') . '\"]', 'Create Account');\n\n        $resp = $this->post('/register', $user->only('password', 'name', 'email'));\n        $resp->assertRedirect('/');\n\n        $resp = $this->get('/');\n        $resp->assertOk();\n        $resp->assertSee($user->name);\n        $this->assertDatabaseHas('users', ['name' => $user->name, 'email' => $user->email]);\n    }\n\n    public function test_empty_registration_redirects_back_with_errors()\n    {\n        // Set settings and get user instance\n        $this->setSettings(['registration-enabled' => 'true']);\n\n        // Test form and ensure user is created\n        $this->get('/register');\n        $this->post('/register', [])->assertRedirect('/register');\n        $this->get('/register')->assertSee('The name field is required');\n    }\n\n    public function test_registration_validation()\n    {\n        $this->setSettings(['registration-enabled' => 'true']);\n\n        $this->get('/register');\n        $resp = $this->followingRedirects()->post('/register', [\n            'name'     => '1',\n            'email'    => '1',\n            'password' => '1',\n        ]);\n        $resp->assertSee('The name must be at least 2 characters.');\n        $resp->assertSee('The email must be a valid email address.');\n        $resp->assertSee('The password must be at least 8 characters.');\n    }\n\n    public function test_sign_up_link_on_login()\n    {\n        $this->get('/login')->assertDontSee('Sign up');\n\n        $this->setSettings(['registration-enabled' => 'true']);\n\n        $this->get('/login')->assertSee('Sign up');\n    }\n\n    public function test_confirmed_registration()\n    {\n        // Fake notifications\n        Notification::fake();\n\n        // Set settings and get user instance\n        $this->setSettings(['registration-enabled' => 'true', 'registration-confirmation' => 'true']);\n        $user = User::factory()->make();\n\n        // Go through registration process\n        $resp = $this->post('/register', $user->only('name', 'email', 'password'));\n        $resp->assertRedirect('/register/confirm');\n        $this->assertDatabaseHas('users', ['name' => $user->name, 'email' => $user->email, 'email_confirmed' => false]);\n\n        // Ensure notification sent\n        /** @var User $dbUser */\n        $dbUser = User::query()->where('email', '=', $user->email)->first();\n        Notification::assertSentTo($dbUser, ConfirmEmail::class);\n\n        // Test access and resend confirmation email\n        $resp = $this->login($user->email, $user->password);\n        $resp->assertRedirect('/register/confirm/awaiting');\n\n        $resp = $this->get('/register/confirm/awaiting');\n        $resp->assertElementContains('form[action=\"' . url('/register/confirm/resend') . '\"]', 'Resend');\n\n        $this->get('/books')->assertRedirect('/login');\n        $this->post('/register/confirm/resend', $user->only('email'));\n\n        // Get confirmation and confirm notification matches\n        $emailConfirmation = DB::table('email_confirmations')->where('user_id', '=', $dbUser->id)->first();\n        Notification::assertSentTo($dbUser, ConfirmEmail::class, function ($notification, $channels) use ($emailConfirmation) {\n            return $notification->token === $emailConfirmation->token;\n        });\n\n        // Check confirmation email confirmation activation.\n        $this->get('/register/confirm/' . $emailConfirmation->token)->assertRedirect('/');\n        $this->get('/')->assertSee($user->name);\n        $this->assertDatabaseMissing('email_confirmations', ['token' => $emailConfirmation->token]);\n        $this->assertDatabaseHas('users', ['name' => $dbUser->name, 'email' => $dbUser->email, 'email_confirmed' => true]);\n    }\n\n    public function test_restricted_registration()\n    {\n        $this->setSettings(['registration-enabled' => 'true', 'registration-confirmation' => 'true', 'registration-restrict' => 'example.com']);\n        $user = User::factory()->make();\n\n        // Go through registration process\n        $this->post('/register', $user->only('name', 'email', 'password'))\n            ->assertRedirect('/register');\n        $resp = $this->get('/register');\n        $resp->assertSee('That email domain does not have access to this application');\n        $this->assertDatabaseMissing('users', $user->only('email'));\n\n        $user->email = 'barry@example.com';\n\n        $this->post('/register', $user->only('name', 'email', 'password'))\n            ->assertRedirect('/register/confirm');\n        $this->assertDatabaseHas('users', ['name' => $user->name, 'email' => $user->email, 'email_confirmed' => false]);\n\n        $this->assertNull(auth()->user());\n\n        $this->get('/')->assertRedirect('/login');\n        $resp = $this->followingRedirects()->post('/login', $user->only('email', 'password'));\n        $resp->assertSee('Email Address Not Confirmed');\n        $this->assertNull(auth()->user());\n    }\n\n    public function test_restricted_registration_with_confirmation_disabled()\n    {\n        $this->setSettings(['registration-enabled' => 'true', 'registration-confirmation' => 'false', 'registration-restrict' => 'example.com']);\n        $user = User::factory()->make();\n\n        // Go through registration process\n        $this->post('/register', $user->only('name', 'email', 'password'))\n            ->assertRedirect('/register');\n        $this->assertDatabaseMissing('users', $user->only('email'));\n        $this->get('/register')->assertSee('That email domain does not have access to this application');\n\n        $user->email = 'barry@example.com';\n\n        $this->post('/register', $user->only('name', 'email', 'password'))\n            ->assertRedirect('/register/confirm');\n        $this->assertDatabaseHas('users', ['name' => $user->name, 'email' => $user->email, 'email_confirmed' => false]);\n\n        $this->assertNull(auth()->user());\n\n        $this->get('/')->assertRedirect('/login');\n        $resp = $this->post('/login', $user->only('email', 'password'));\n        $resp->assertRedirect('/register/confirm/awaiting');\n        $this->get('/register/confirm/awaiting')->assertSee('Email Address Not Confirmed');\n        $this->assertNull(auth()->user());\n    }\n\n    public function test_logout()\n    {\n        $this->asAdmin()->get('/')->assertOk();\n        $this->post('/logout')->assertRedirect('/');\n        $this->get('/')->assertRedirect('/login');\n    }\n\n    public function test_mfa_session_cleared_on_logout()\n    {\n        $user = $this->getEditor();\n        $mfaSession = $this->app->make(MfaSession::class);\n\n        $mfaSession->markVerifiedForUser($user);\n        $this->assertTrue($mfaSession->isVerifiedForUser($user));\n\n        $this->asAdmin()->post('/logout');\n        $this->assertFalse($mfaSession->isVerifiedForUser($user));\n    }\n\n    public function test_reset_password_flow()\n    {\n        Notification::fake();\n\n        $this->get('/login')\n            ->assertElementContains('a[href=\"' . url('/password/email') . '\"]', 'Forgot Password?');\n\n        $this->get('/password/email')\n            ->assertElementContains('form[action=\"' . url('/password/email') . '\"]', 'Send Reset Link');\n\n        $resp = $this->post('/password/email', [\n            'email' => 'admin@admin.com',\n        ]);\n        $resp->assertRedirect('/password/email');\n\n        $resp = $this->get('/password/email');\n        $resp->assertSee('A password reset link will be sent to admin@admin.com if that email address is found in the system.');\n\n        $this->assertDatabaseHas('password_resets', [\n            'email' => 'admin@admin.com',\n        ]);\n\n        /** @var User $user */\n        $user = User::query()->where('email', '=', 'admin@admin.com')->first();\n\n        Notification::assertSentTo($user, ResetPassword::class);\n        $n = Notification::sent($user, ResetPassword::class);\n\n        $this->get('/password/reset/' . $n->first()->token)\n            ->assertOk()\n            ->assertSee('Reset Password');\n\n        $resp = $this->post('/password/reset', [\n            'email'                 => 'admin@admin.com',\n            'password'              => 'randompass',\n            'password_confirmation' => 'randompass',\n            'token'                 => $n->first()->token,\n        ]);\n        $resp->assertRedirect('/');\n\n        $this->get('/')->assertSee('Your password has been successfully reset');\n    }\n\n    public function test_reset_password_flow_shows_success_message_even_if_wrong_password_to_prevent_user_discovery()\n    {\n        $this->get('/password/email');\n        $resp = $this->followingRedirects()->post('/password/email', [\n            'email' => 'barry@admin.com',\n        ]);\n        $resp->assertSee('A password reset link will be sent to barry@admin.com if that email address is found in the system.');\n        $resp->assertDontSee('We can\\'t find a user');\n\n        $this->get('/password/reset/arandometokenvalue')->assertSee('Reset Password');\n        $resp = $this->post('/password/reset', [\n            'email'                 => 'barry@admin.com',\n            'password'              => 'randompass',\n            'password_confirmation' => 'randompass',\n            'token'                 => 'arandometokenvalue',\n        ]);\n        $resp->assertRedirect('/password/reset/arandometokenvalue');\n\n        $this->get('/password/reset/arandometokenvalue')\n            ->assertDontSee('We can\\'t find a user')\n            ->assertSee('The password reset token is invalid for this email address.');\n    }\n\n    public function test_reset_password_page_shows_sign_links()\n    {\n        $this->setSettings(['registration-enabled' => 'true']);\n        $this->get('/password/email')\n            ->assertElementContains('a', 'Log in')\n            ->assertElementContains('a', 'Sign up');\n    }\n\n    public function test_reset_password_request_is_throttled()\n    {\n        $editor = $this->getEditor();\n        Notification::fake();\n        $this->get('/password/email');\n        $this->followingRedirects()->post('/password/email', [\n            'email' => $editor->email,\n        ]);\n\n        $resp = $this->followingRedirects()->post('/password/email', [\n            'email' => $editor->email,\n        ]);\n        Notification::assertTimesSent(1, ResetPassword::class);\n        $resp->assertSee('A password reset link will be sent to ' . $editor->email . ' if that email address is found in the system.');\n    }\n\n    public function test_login_redirects_to_initially_requested_url_correctly()\n    {\n        config()->set('app.url', 'http://localhost');\n        /** @var Page $page */\n        $page = Page::query()->first();\n\n        $this->get($page->getUrl())->assertRedirect(url('/login'));\n        $this->login('admin@admin.com', 'password')\n            ->assertRedirect($page->getUrl());\n    }\n\n    public function test_login_intended_redirect_does_not_redirect_to_external_pages()\n    {\n        config()->set('app.url', 'http://localhost');\n        $this->setSettings(['app-public' => true]);\n\n        $this->get('/login', ['referer' => 'https://example.com']);\n        $login = $this->post('/login', ['email' => 'admin@admin.com', 'password' => 'password']);\n\n        $login->assertRedirect('http://localhost');\n    }\n\n    public function test_login_intended_redirect_does_not_factor_mfa_routes()\n    {\n        $this->get('/books')->assertRedirect('/login');\n        $this->get('/mfa/setup')->assertRedirect('/login');\n        $login = $this->post('/login', ['email' => 'admin@admin.com', 'password' => 'password']);\n        $login->assertRedirect('/books');\n    }\n\n    public function test_login_authenticates_admins_on_all_guards()\n    {\n        $this->post('/login', ['email' => 'admin@admin.com', 'password' => 'password']);\n        $this->assertTrue(auth()->check());\n        $this->assertTrue(auth('ldap')->check());\n        $this->assertTrue(auth('saml2')->check());\n        $this->assertTrue(auth('oidc')->check());\n    }\n\n    public function test_login_authenticates_nonadmins_on_default_guard_only()\n    {\n        $editor = $this->getEditor();\n        $editor->password = bcrypt('password');\n        $editor->save();\n\n        $this->post('/login', ['email' => $editor->email, 'password' => 'password']);\n        $this->assertTrue(auth()->check());\n        $this->assertFalse(auth('ldap')->check());\n        $this->assertFalse(auth('saml2')->check());\n        $this->assertFalse(auth('oidc')->check());\n    }\n\n    public function test_failed_logins_are_logged_when_message_configured()\n    {\n        $log = $this->withTestLogger();\n        config()->set(['logging.failed_login.message' => 'Failed login for %u']);\n\n        $this->post('/login', ['email' => 'admin@example.com', 'password' => 'cattreedog']);\n        $this->assertTrue($log->hasWarningThatContains('Failed login for admin@example.com'));\n\n        $this->post('/login', ['email' => 'admin@admin.com', 'password' => 'password']);\n        $this->assertFalse($log->hasWarningThatContains('Failed login for admin@admin.com'));\n    }\n\n    public function test_logged_in_user_with_unconfirmed_email_is_logged_out()\n    {\n        $this->setSettings(['registration-confirmation' => 'true']);\n        $user = $this->getEditor();\n        $user->email_confirmed = false;\n        $user->save();\n\n        auth()->login($user);\n        $this->assertTrue(auth()->check());\n\n        $this->get('/books')->assertRedirect('/');\n        $this->assertFalse(auth()->check());\n    }\n\n    /**\n     * Perform a login.\n     */\n    protected function login(string $email, string $password): TestResponse\n    {\n        return $this->post('/login', compact('email', 'password'));\n    }\n}\n", "<?php\n\nnamespace Tests\\Auth;\n\nuse BookStack\\Auth\\Access\\UserInviteService;\nuse BookStack\\Auth\\User;\nuse BookStack\\Notifications\\UserInvite;\nuse Carbon\\Carbon;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Notification;\nuse Illuminate\\Support\\Str;\nuse Tests\\TestCase;\n\nclass UserInviteTest extends TestCase\n{\n    public function test_user_creation_creates_invite()\n    {\n        Notification::fake();\n        $admin = $this->getAdmin();\n\n        $email = Str::random(16) . '@example.com';\n        $resp = $this->actingAs($admin)->post('/settings/users/create', [\n            'name'        => 'Barry',\n            'email'       => $email,\n            'send_invite' => 'true',\n        ]);\n        $resp->assertRedirect('/settings/users');\n\n        $newUser = User::query()->where('email', '=', $email)->orderBy('id', 'desc')->first();\n\n        Notification::assertSentTo($newUser, UserInvite::class);\n        $this->assertDatabaseHas('user_invites', [\n            'user_id' => $newUser->id,\n        ]);\n    }\n\n    public function test_invite_set_password()\n    {\n        Notification::fake();\n        $user = $this->getViewer();\n        $inviteService = app(UserInviteService::class);\n\n        $inviteService->sendInvitation($user);\n        $token = DB::table('user_invites')->where('user_id', '=', $user->id)->first()->token;\n\n        $setPasswordPageResp = $this->get('/register/invite/' . $token);\n        $setPasswordPageResp->assertSuccessful();\n        $setPasswordPageResp->assertSee('Welcome to BookStack!');\n        $setPasswordPageResp->assertSee('Password');\n        $setPasswordPageResp->assertSee('Confirm Password');\n\n        $setPasswordResp = $this->followingRedirects()->post('/register/invite/' . $token, [\n            'password' => 'my test password',\n        ]);\n        $setPasswordResp->assertSee('Password set, you now have access to BookStack!');\n        $newPasswordValid = auth()->validate([\n            'email'    => $user->email,\n            'password' => 'my test password',\n        ]);\n        $this->assertTrue($newPasswordValid);\n        $this->assertDatabaseMissing('user_invites', [\n            'user_id' => $user->id,\n        ]);\n    }\n\n    public function test_invite_set_has_password_validation()\n    {\n        Notification::fake();\n        $user = $this->getViewer();\n        $inviteService = app(UserInviteService::class);\n\n        $inviteService->sendInvitation($user);\n        $token = DB::table('user_invites')->where('user_id', '=', $user->id)->first()->token;\n\n        $this->get('/register/invite/' . $token);\n        $shortPassword = $this->followingRedirects()->post('/register/invite/' . $token, [\n            'password' => 'mypassw',\n        ]);\n        $shortPassword->assertSee('The password must be at least 8 characters.');\n\n        $this->get('/register/invite/' . $token);\n        $noPassword = $this->followingRedirects()->post('/register/invite/' . $token, [\n            'password' => '',\n        ]);\n        $noPassword->assertSee('The password field is required.');\n\n        $this->assertDatabaseHas('user_invites', [\n            'user_id' => $user->id,\n        ]);\n    }\n\n    public function test_non_existent_invite_token_redirects_to_home()\n    {\n        $setPasswordPageResp = $this->get('/register/invite/' . Str::random(12));\n        $setPasswordPageResp->assertRedirect('/');\n\n        $setPasswordResp = $this->post('/register/invite/' . Str::random(12), ['password' => 'Password Test']);\n        $setPasswordResp->assertRedirect('/');\n    }\n\n    public function test_token_expires_after_two_weeks()\n    {\n        Notification::fake();\n        $user = $this->getViewer();\n        $inviteService = app(UserInviteService::class);\n\n        $inviteService->sendInvitation($user);\n        $tokenEntry = DB::table('user_invites')->where('user_id', '=', $user->id)->first();\n        DB::table('user_invites')->update(['created_at' => Carbon::now()->subDays(14)->subHour(1)]);\n\n        $setPasswordPageResp = $this->get('/register/invite/' . $tokenEntry->token);\n        $setPasswordPageResp->assertRedirect('/password/email');\n        $setPasswordPageResp->assertSessionHas('error', 'This invitation link has expired. You can instead try to reset your account password.');\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace BookStack\\Http\\Controllers\\Auth;\n\nuse BookStack\\Auth\\Access\\EmailConfirmationService;\nuse BookStack\\Auth\\Access\\LoginService;\nuse BookStack\\Auth\\UserRepo;\nuse BookStack\\Exceptions\\ConfirmationEmailException;\nuse BookStack\\Exceptions\\UserTokenExpiredException;\nuse BookStack\\Exceptions\\UserTokenNotFoundException;\nuse BookStack\\Http\\Controllers\\Controller;\nuse Exception;\nuse Illuminate\\Http\\Request;\n\nclass ConfirmEmailController extends Controller\n{\n    protected $emailConfirmationService;\n    protected $loginService;\n    protected $userRepo;\n\n    /**\n     * Create a new controller instance.\n     */\n    public function __construct(\n        EmailConfirmationService $emailConfirmationService,\n        LoginService $loginService,\n        UserRepo $userRepo\n    ) {\n        $this->emailConfirmationService = $emailConfirmationService;\n        $this->loginService = $loginService;\n        $this->userRepo = $userRepo;\n    }\n\n    /**\n     * Show the page to tell the user to check their email\n     * and confirm their address.\n     */\n    public function show()\n    {\n        return view('auth.register-confirm');\n    }\n\n    /**\n     * Shows a notice that a user's email address has not been confirmed,\n     * Also has the option to re-send the confirmation email.\n     */\n    public function showAwaiting()\n    {\n        $user = $this->loginService->getLastLoginAttemptUser();\n\n        return view('auth.user-unconfirmed', ['user' => $user]);\n    }\n\n    /**\n     * Confirms an email via a token and logs the user into the system.\n     *\n     * @throws ConfirmationEmailException\n     * @throws Exception\n     */\n    public function confirm(string $token)\n    {\n        try {\n            $userId = $this->emailConfirmationService->checkTokenAndGetUserId($token);\n        } catch (UserTokenNotFoundException $exception) {\n            $this->showErrorNotification(trans('errors.email_confirmation_invalid'));\n\n            return redirect('/register');\n        } catch (UserTokenExpiredException $exception) {\n            $user = $this->userRepo->getById($exception->userId);\n            $this->emailConfirmationService->sendConfirmation($user);\n            $this->showErrorNotification(trans('errors.email_confirmation_expired'));\n\n            return redirect('/register/confirm');\n        }\n\n        $user = $this->userRepo->getById($userId);\n        $user->email_confirmed = true;\n        $user->save();\n\n        $this->emailConfirmationService->deleteByUser($user);\n        $this->showSuccessNotification(trans('auth.email_confirm_success'));\n\n        return redirect('/login');\n    }\n\n    /**\n     * Resend the confirmation email.\n     */\n    public function resend(Request $request)\n    {\n        $this->validate($request, [\n            'email' => ['required', 'email', 'exists:users,email'],\n        ]);\n        $user = $this->userRepo->getByEmail($request->get('email'));\n\n        try {\n            $this->emailConfirmationService->sendConfirmation($user);\n        } catch (Exception $e) {\n            $this->showErrorNotification(trans('auth.email_confirm_send_error'));\n\n            return redirect('/register/confirm');\n        }\n\n        $this->showSuccessNotification(trans('auth.email_confirm_resent'));\n\n        return redirect('/register/confirm');\n    }\n}\n", "<?php\n\nnamespace BookStack\\Http\\Controllers\\Auth;\n\nuse BookStack\\Auth\\Access\\UserInviteService;\nuse BookStack\\Auth\\UserRepo;\nuse BookStack\\Exceptions\\UserTokenExpiredException;\nuse BookStack\\Exceptions\\UserTokenNotFoundException;\nuse BookStack\\Http\\Controllers\\Controller;\nuse Exception;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Routing\\Redirector;\n\nclass UserInviteController extends Controller\n{\n    protected $inviteService;\n    protected $userRepo;\n\n    /**\n     * Create a new controller instance.\n     */\n    public function __construct(UserInviteService $inviteService, UserRepo $userRepo)\n    {\n        $this->middleware('guest');\n        $this->middleware('guard:standard');\n\n        $this->inviteService = $inviteService;\n        $this->userRepo = $userRepo;\n    }\n\n    /**\n     * Show the page for the user to set the password for their account.\n     *\n     * @throws Exception\n     */\n    public function showSetPassword(string $token)\n    {\n        try {\n            $this->inviteService->checkTokenAndGetUserId($token);\n        } catch (Exception $exception) {\n            return $this->handleTokenException($exception);\n        }\n\n        return view('auth.invite-set-password', [\n            'token' => $token,\n        ]);\n    }\n\n    /**\n     * Sets the password for an invited user and then grants them access.\n     *\n     * @throws Exception\n     */\n    public function setPassword(Request $request, string $token)\n    {\n        $this->validate($request, [\n            'password' => ['required', 'min:8'],\n        ]);\n\n        try {\n            $userId = $this->inviteService->checkTokenAndGetUserId($token);\n        } catch (Exception $exception) {\n            return $this->handleTokenException($exception);\n        }\n\n        $user = $this->userRepo->getById($userId);\n        $user->password = bcrypt($request->get('password'));\n        $user->email_confirmed = true;\n        $user->save();\n\n        $this->inviteService->deleteByUser($user);\n        $this->showSuccessNotification(trans('auth.user_invite_success_login', ['appName' => setting('app-name')]));\n\n        return redirect('/login');\n    }\n\n    /**\n     * Check and validate the exception thrown when checking an invite token.\n     *\n     * @throws Exception\n     *\n     * @return RedirectResponse|Redirector\n     */\n    protected function handleTokenException(Exception $exception)\n    {\n        if ($exception instanceof UserTokenNotFoundException) {\n            return redirect('/');\n        }\n\n        if ($exception instanceof UserTokenExpiredException) {\n            $this->showErrorNotification(trans('errors.invite_token_expired'));\n\n            return redirect('/password/email');\n        }\n\n        throw $exception;\n    }\n}\n", "<?php\n/**\n * Authentication Language Lines\n * The following language lines are used during authentication for various\n * messages that we need to display to the user.\n */\nreturn [\n\n    'failed' => 'These credentials do not match our records.',\n    'throttle' => 'Too many login attempts. Please try again in :seconds seconds.',\n\n    // Login & Register\n    'sign_up' => 'Sign up',\n    'log_in' => 'Log in',\n    'log_in_with' => 'Login with :socialDriver',\n    'sign_up_with' => 'Sign up with :socialDriver',\n    'logout' => 'Logout',\n\n    'name' => 'Name',\n    'username' => 'Username',\n    'email' => 'Email',\n    'password' => 'Password',\n    'password_confirm' => 'Confirm Password',\n    'password_hint' => 'Must be over 7 characters',\n    'forgot_password' => 'Forgot Password?',\n    'remember_me' => 'Remember Me',\n    'ldap_email_hint' => 'Please enter an email to use for this account.',\n    'create_account' => 'Create Account',\n    'already_have_account' => 'Already have an account?',\n    'dont_have_account' => 'Don\\'t have an account?',\n    'social_login' => 'Social Login',\n    'social_registration' => 'Social Registration',\n    'social_registration_text' => 'Register and sign in using another service.',\n\n    'register_thanks' => 'Thanks for registering!',\n    'register_confirm' => 'Please check your email and click the confirmation button to access :appName.',\n    'registrations_disabled' => 'Registrations are currently disabled',\n    'registration_email_domain_invalid' => 'That email domain does not have access to this application',\n    'register_success' => 'Thanks for signing up! You are now registered and signed in.',\n\n    // Password Reset\n    'reset_password' => 'Reset Password',\n    'reset_password_send_instructions' => 'Enter your email below and you will be sent an email with a password reset link.',\n    'reset_password_send_button' => 'Send Reset Link',\n    'reset_password_sent' => 'A password reset link will be sent to :email if that email address is found in the system.',\n    'reset_password_success' => 'Your password has been successfully reset.',\n    'email_reset_subject' => 'Reset your :appName password',\n    'email_reset_text' => 'You are receiving this email because we received a password reset request for your account.',\n    'email_reset_not_requested' => 'If you did not request a password reset, no further action is required.',\n\n    // Email Confirmation\n    'email_confirm_subject' => 'Confirm your email on :appName',\n    'email_confirm_greeting' => 'Thanks for joining :appName!',\n    'email_confirm_text' => 'Please confirm your email address by clicking the button below:',\n    'email_confirm_action' => 'Confirm Email',\n    'email_confirm_send_error' => 'Email confirmation required but the system could not send the email. Contact the admin to ensure email is set up correctly.',\n    'email_confirm_success' => 'Your email has been confirmed! You should now be able to login using this email address.',\n    'email_confirm_resent' => 'Confirmation email resent, Please check your inbox.',\n\n    'email_not_confirmed' => 'Email Address Not Confirmed',\n    'email_not_confirmed_text' => 'Your email address has not yet been confirmed.',\n    'email_not_confirmed_click_link' => 'Please click the link in the email that was sent shortly after you registered.',\n    'email_not_confirmed_resend' => 'If you cannot find the email you can re-send the confirmation email by submitting the form below.',\n    'email_not_confirmed_resend_button' => 'Resend Confirmation Email',\n\n    // User Invite\n    'user_invite_email_subject' => 'You have been invited to join :appName!',\n    'user_invite_email_greeting' => 'An account has been created for you on :appName.',\n    'user_invite_email_text' => 'Click the button below to set an account password and gain access:',\n    'user_invite_email_action' => 'Set Account Password',\n    'user_invite_page_welcome' => 'Welcome to :appName!',\n    'user_invite_page_text' => 'To finalise your account and gain access you need to set a password which will be used to log-in to :appName on future visits.',\n    'user_invite_page_confirm_button' => 'Confirm Password',\n    'user_invite_success_login' => 'Password set, you should now be able to login using your set password to access :appName!',\n\n    // Multi-factor Authentication\n    'mfa_setup' => 'Setup Multi-Factor Authentication',\n    'mfa_setup_desc' => 'Setup multi-factor authentication as an extra layer of security for your user account.',\n    'mfa_setup_configured' => 'Already configured',\n    'mfa_setup_reconfigure' => 'Reconfigure',\n    'mfa_setup_remove_confirmation' => 'Are you sure you want to remove this multi-factor authentication method?',\n    'mfa_setup_action' => 'Setup',\n    'mfa_backup_codes_usage_limit_warning' => 'You have less than 5 backup codes remaining, Please generate and store a new set before you run out of codes to prevent being locked out of your account.',\n    'mfa_option_totp_title' => 'Mobile App',\n    'mfa_option_totp_desc' => 'To use multi-factor authentication you\\'ll need a mobile application that supports TOTP such as Google Authenticator, Authy or Microsoft Authenticator.',\n    'mfa_option_backup_codes_title' => 'Backup Codes',\n    'mfa_option_backup_codes_desc' => 'Securely store a set of one-time-use backup codes which you can enter to verify your identity.',\n    'mfa_gen_confirm_and_enable' => 'Confirm and Enable',\n    'mfa_gen_backup_codes_title' => 'Backup Codes Setup',\n    'mfa_gen_backup_codes_desc' => 'Store the below list of codes in a safe place. When accessing the system you\\'ll be able to use one of the codes as a second authentication mechanism.',\n    'mfa_gen_backup_codes_download' => 'Download Codes',\n    'mfa_gen_backup_codes_usage_warning' => 'Each code can only be used once',\n    'mfa_gen_totp_title' => 'Mobile App Setup',\n    'mfa_gen_totp_desc' => 'To use multi-factor authentication you\\'ll need a mobile application that supports TOTP such as Google Authenticator, Authy or Microsoft Authenticator.',\n    'mfa_gen_totp_scan' => 'Scan the QR code below using your preferred authentication app to get started.',\n    'mfa_gen_totp_verify_setup' => 'Verify Setup',\n    'mfa_gen_totp_verify_setup_desc' => 'Verify that all is working by entering a code, generated within your authentication app, in the input box below:',\n    'mfa_gen_totp_provide_code_here' => 'Provide your app generated code here',\n    'mfa_verify_access' => 'Verify Access',\n    'mfa_verify_access_desc' => 'Your user account requires you to confirm your identity via an additional level of verification before you\\'re granted access. Verify using one of your configured methods to continue.',\n    'mfa_verify_no_methods' => 'No Methods Configured',\n    'mfa_verify_no_methods_desc' => 'No multi-factor authentication methods could be found for your account. You\\'ll need to set up at least one method before you gain access.',\n    'mfa_verify_use_totp' => 'Verify using a mobile app',\n    'mfa_verify_use_backup_codes' => 'Verify using a backup code',\n    'mfa_verify_backup_code' => 'Backup Code',\n    'mfa_verify_backup_code_desc' => 'Enter one of your remaining backup codes below:',\n    'mfa_verify_backup_code_enter_here' => 'Enter backup code here',\n    'mfa_verify_totp_desc' => 'Enter the code, generated using your mobile app, below:',\n    'mfa_setup_login_notification' => 'Multi-factor method configured, Please now login again using the configured method.',\n];\n", "<?php\n\nnamespace Tests\\Auth;\n\nuse BookStack\\Auth\\Access\\Mfa\\MfaSession;\nuse BookStack\\Auth\\User;\nuse BookStack\\Entities\\Models\\Page;\nuse BookStack\\Notifications\\ConfirmEmail;\nuse BookStack\\Notifications\\ResetPassword;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Notification;\nuse Tests\\TestCase;\nuse Tests\\TestResponse;\n\nclass AuthTest extends TestCase\n{\n    public function test_auth_working()\n    {\n        $this->get('/')->assertRedirect('/login');\n    }\n\n    public function test_login()\n    {\n        $this->login('admin@admin.com', 'password')->assertRedirect('/');\n    }\n\n    public function test_public_viewing()\n    {\n        $this->setSettings(['app-public' => 'true']);\n        $this->get('/')\n            ->assertOk()\n            ->assertSee('Log in');\n    }\n\n    public function test_registration_showing()\n    {\n        // Ensure registration form is showing\n        $this->setSettings(['registration-enabled' => 'true']);\n        $this->get('/login')\n            ->assertElementContains('a[href=\"' . url('/register') . '\"]', 'Sign up');\n    }\n\n    public function test_normal_registration()\n    {\n        // Set settings and get user instance\n        $this->setSettings(['registration-enabled' => 'true']);\n        $user = User::factory()->make();\n\n        // Test form and ensure user is created\n        $this->get('/register')\n            ->assertSee('Sign Up')\n            ->assertElementContains('form[action=\"' . url('/register') . '\"]', 'Create Account');\n\n        $resp = $this->post('/register', $user->only('password', 'name', 'email'));\n        $resp->assertRedirect('/');\n\n        $resp = $this->get('/');\n        $resp->assertOk();\n        $resp->assertSee($user->name);\n        $this->assertDatabaseHas('users', ['name' => $user->name, 'email' => $user->email]);\n    }\n\n    public function test_empty_registration_redirects_back_with_errors()\n    {\n        // Set settings and get user instance\n        $this->setSettings(['registration-enabled' => 'true']);\n\n        // Test form and ensure user is created\n        $this->get('/register');\n        $this->post('/register', [])->assertRedirect('/register');\n        $this->get('/register')->assertSee('The name field is required');\n    }\n\n    public function test_registration_validation()\n    {\n        $this->setSettings(['registration-enabled' => 'true']);\n\n        $this->get('/register');\n        $resp = $this->followingRedirects()->post('/register', [\n            'name'     => '1',\n            'email'    => '1',\n            'password' => '1',\n        ]);\n        $resp->assertSee('The name must be at least 2 characters.');\n        $resp->assertSee('The email must be a valid email address.');\n        $resp->assertSee('The password must be at least 8 characters.');\n    }\n\n    public function test_sign_up_link_on_login()\n    {\n        $this->get('/login')->assertDontSee('Sign up');\n\n        $this->setSettings(['registration-enabled' => 'true']);\n\n        $this->get('/login')->assertSee('Sign up');\n    }\n\n    public function test_confirmed_registration()\n    {\n        // Fake notifications\n        Notification::fake();\n\n        // Set settings and get user instance\n        $this->setSettings(['registration-enabled' => 'true', 'registration-confirmation' => 'true']);\n        $user = User::factory()->make();\n\n        // Go through registration process\n        $resp = $this->post('/register', $user->only('name', 'email', 'password'));\n        $resp->assertRedirect('/register/confirm');\n        $this->assertDatabaseHas('users', ['name' => $user->name, 'email' => $user->email, 'email_confirmed' => false]);\n\n        // Ensure notification sent\n        /** @var User $dbUser */\n        $dbUser = User::query()->where('email', '=', $user->email)->first();\n        Notification::assertSentTo($dbUser, ConfirmEmail::class);\n\n        // Test access and resend confirmation email\n        $resp = $this->login($user->email, $user->password);\n        $resp->assertRedirect('/register/confirm/awaiting');\n\n        $resp = $this->get('/register/confirm/awaiting');\n        $resp->assertElementContains('form[action=\"' . url('/register/confirm/resend') . '\"]', 'Resend');\n\n        $this->get('/books')->assertRedirect('/login');\n        $this->post('/register/confirm/resend', $user->only('email'));\n\n        // Get confirmation and confirm notification matches\n        $emailConfirmation = DB::table('email_confirmations')->where('user_id', '=', $dbUser->id)->first();\n        Notification::assertSentTo($dbUser, ConfirmEmail::class, function ($notification, $channels) use ($emailConfirmation) {\n            return $notification->token === $emailConfirmation->token;\n        });\n\n        // Check confirmation email confirmation activation.\n        $this->get('/register/confirm/' . $emailConfirmation->token)->assertRedirect('/login');\n        $this->get('/login')->assertSee('Your email has been confirmed! You should now be able to login using this email address.');\n        $this->assertDatabaseMissing('email_confirmations', ['token' => $emailConfirmation->token]);\n        $this->assertDatabaseHas('users', ['name' => $dbUser->name, 'email' => $dbUser->email, 'email_confirmed' => true]);\n    }\n\n    public function test_restricted_registration()\n    {\n        $this->setSettings(['registration-enabled' => 'true', 'registration-confirmation' => 'true', 'registration-restrict' => 'example.com']);\n        $user = User::factory()->make();\n\n        // Go through registration process\n        $this->post('/register', $user->only('name', 'email', 'password'))\n            ->assertRedirect('/register');\n        $resp = $this->get('/register');\n        $resp->assertSee('That email domain does not have access to this application');\n        $this->assertDatabaseMissing('users', $user->only('email'));\n\n        $user->email = 'barry@example.com';\n\n        $this->post('/register', $user->only('name', 'email', 'password'))\n            ->assertRedirect('/register/confirm');\n        $this->assertDatabaseHas('users', ['name' => $user->name, 'email' => $user->email, 'email_confirmed' => false]);\n\n        $this->assertNull(auth()->user());\n\n        $this->get('/')->assertRedirect('/login');\n        $resp = $this->followingRedirects()->post('/login', $user->only('email', 'password'));\n        $resp->assertSee('Email Address Not Confirmed');\n        $this->assertNull(auth()->user());\n    }\n\n    public function test_restricted_registration_with_confirmation_disabled()\n    {\n        $this->setSettings(['registration-enabled' => 'true', 'registration-confirmation' => 'false', 'registration-restrict' => 'example.com']);\n        $user = User::factory()->make();\n\n        // Go through registration process\n        $this->post('/register', $user->only('name', 'email', 'password'))\n            ->assertRedirect('/register');\n        $this->assertDatabaseMissing('users', $user->only('email'));\n        $this->get('/register')->assertSee('That email domain does not have access to this application');\n\n        $user->email = 'barry@example.com';\n\n        $this->post('/register', $user->only('name', 'email', 'password'))\n            ->assertRedirect('/register/confirm');\n        $this->assertDatabaseHas('users', ['name' => $user->name, 'email' => $user->email, 'email_confirmed' => false]);\n\n        $this->assertNull(auth()->user());\n\n        $this->get('/')->assertRedirect('/login');\n        $resp = $this->post('/login', $user->only('email', 'password'));\n        $resp->assertRedirect('/register/confirm/awaiting');\n        $this->get('/register/confirm/awaiting')->assertSee('Email Address Not Confirmed');\n        $this->assertNull(auth()->user());\n    }\n\n    public function test_logout()\n    {\n        $this->asAdmin()->get('/')->assertOk();\n        $this->post('/logout')->assertRedirect('/');\n        $this->get('/')->assertRedirect('/login');\n    }\n\n    public function test_mfa_session_cleared_on_logout()\n    {\n        $user = $this->getEditor();\n        $mfaSession = $this->app->make(MfaSession::class);\n\n        $mfaSession->markVerifiedForUser($user);\n        $this->assertTrue($mfaSession->isVerifiedForUser($user));\n\n        $this->asAdmin()->post('/logout');\n        $this->assertFalse($mfaSession->isVerifiedForUser($user));\n    }\n\n    public function test_reset_password_flow()\n    {\n        Notification::fake();\n\n        $this->get('/login')\n            ->assertElementContains('a[href=\"' . url('/password/email') . '\"]', 'Forgot Password?');\n\n        $this->get('/password/email')\n            ->assertElementContains('form[action=\"' . url('/password/email') . '\"]', 'Send Reset Link');\n\n        $resp = $this->post('/password/email', [\n            'email' => 'admin@admin.com',\n        ]);\n        $resp->assertRedirect('/password/email');\n\n        $resp = $this->get('/password/email');\n        $resp->assertSee('A password reset link will be sent to admin@admin.com if that email address is found in the system.');\n\n        $this->assertDatabaseHas('password_resets', [\n            'email' => 'admin@admin.com',\n        ]);\n\n        /** @var User $user */\n        $user = User::query()->where('email', '=', 'admin@admin.com')->first();\n\n        Notification::assertSentTo($user, ResetPassword::class);\n        $n = Notification::sent($user, ResetPassword::class);\n\n        $this->get('/password/reset/' . $n->first()->token)\n            ->assertOk()\n            ->assertSee('Reset Password');\n\n        $resp = $this->post('/password/reset', [\n            'email'                 => 'admin@admin.com',\n            'password'              => 'randompass',\n            'password_confirmation' => 'randompass',\n            'token'                 => $n->first()->token,\n        ]);\n        $resp->assertRedirect('/');\n\n        $this->get('/')->assertSee('Your password has been successfully reset');\n    }\n\n    public function test_reset_password_flow_shows_success_message_even_if_wrong_password_to_prevent_user_discovery()\n    {\n        $this->get('/password/email');\n        $resp = $this->followingRedirects()->post('/password/email', [\n            'email' => 'barry@admin.com',\n        ]);\n        $resp->assertSee('A password reset link will be sent to barry@admin.com if that email address is found in the system.');\n        $resp->assertDontSee('We can\\'t find a user');\n\n        $this->get('/password/reset/arandometokenvalue')->assertSee('Reset Password');\n        $resp = $this->post('/password/reset', [\n            'email'                 => 'barry@admin.com',\n            'password'              => 'randompass',\n            'password_confirmation' => 'randompass',\n            'token'                 => 'arandometokenvalue',\n        ]);\n        $resp->assertRedirect('/password/reset/arandometokenvalue');\n\n        $this->get('/password/reset/arandometokenvalue')\n            ->assertDontSee('We can\\'t find a user')\n            ->assertSee('The password reset token is invalid for this email address.');\n    }\n\n    public function test_reset_password_page_shows_sign_links()\n    {\n        $this->setSettings(['registration-enabled' => 'true']);\n        $this->get('/password/email')\n            ->assertElementContains('a', 'Log in')\n            ->assertElementContains('a', 'Sign up');\n    }\n\n    public function test_reset_password_request_is_throttled()\n    {\n        $editor = $this->getEditor();\n        Notification::fake();\n        $this->get('/password/email');\n        $this->followingRedirects()->post('/password/email', [\n            'email' => $editor->email,\n        ]);\n\n        $resp = $this->followingRedirects()->post('/password/email', [\n            'email' => $editor->email,\n        ]);\n        Notification::assertTimesSent(1, ResetPassword::class);\n        $resp->assertSee('A password reset link will be sent to ' . $editor->email . ' if that email address is found in the system.');\n    }\n\n    public function test_login_redirects_to_initially_requested_url_correctly()\n    {\n        config()->set('app.url', 'http://localhost');\n        /** @var Page $page */\n        $page = Page::query()->first();\n\n        $this->get($page->getUrl())->assertRedirect(url('/login'));\n        $this->login('admin@admin.com', 'password')\n            ->assertRedirect($page->getUrl());\n    }\n\n    public function test_login_intended_redirect_does_not_redirect_to_external_pages()\n    {\n        config()->set('app.url', 'http://localhost');\n        $this->setSettings(['app-public' => true]);\n\n        $this->get('/login', ['referer' => 'https://example.com']);\n        $login = $this->post('/login', ['email' => 'admin@admin.com', 'password' => 'password']);\n\n        $login->assertRedirect('http://localhost');\n    }\n\n    public function test_login_intended_redirect_does_not_factor_mfa_routes()\n    {\n        $this->get('/books')->assertRedirect('/login');\n        $this->get('/mfa/setup')->assertRedirect('/login');\n        $login = $this->post('/login', ['email' => 'admin@admin.com', 'password' => 'password']);\n        $login->assertRedirect('/books');\n    }\n\n    public function test_login_authenticates_admins_on_all_guards()\n    {\n        $this->post('/login', ['email' => 'admin@admin.com', 'password' => 'password']);\n        $this->assertTrue(auth()->check());\n        $this->assertTrue(auth('ldap')->check());\n        $this->assertTrue(auth('saml2')->check());\n        $this->assertTrue(auth('oidc')->check());\n    }\n\n    public function test_login_authenticates_nonadmins_on_default_guard_only()\n    {\n        $editor = $this->getEditor();\n        $editor->password = bcrypt('password');\n        $editor->save();\n\n        $this->post('/login', ['email' => $editor->email, 'password' => 'password']);\n        $this->assertTrue(auth()->check());\n        $this->assertFalse(auth('ldap')->check());\n        $this->assertFalse(auth('saml2')->check());\n        $this->assertFalse(auth('oidc')->check());\n    }\n\n    public function test_failed_logins_are_logged_when_message_configured()\n    {\n        $log = $this->withTestLogger();\n        config()->set(['logging.failed_login.message' => 'Failed login for %u']);\n\n        $this->post('/login', ['email' => 'admin@example.com', 'password' => 'cattreedog']);\n        $this->assertTrue($log->hasWarningThatContains('Failed login for admin@example.com'));\n\n        $this->post('/login', ['email' => 'admin@admin.com', 'password' => 'password']);\n        $this->assertFalse($log->hasWarningThatContains('Failed login for admin@admin.com'));\n    }\n\n    public function test_logged_in_user_with_unconfirmed_email_is_logged_out()\n    {\n        $this->setSettings(['registration-confirmation' => 'true']);\n        $user = $this->getEditor();\n        $user->email_confirmed = false;\n        $user->save();\n\n        auth()->login($user);\n        $this->assertTrue(auth()->check());\n\n        $this->get('/books')->assertRedirect('/');\n        $this->assertFalse(auth()->check());\n    }\n\n    /**\n     * Perform a login.\n     */\n    protected function login(string $email, string $password): TestResponse\n    {\n        return $this->post('/login', compact('email', 'password'));\n    }\n}\n", "<?php\n\nnamespace Tests\\Auth;\n\nuse BookStack\\Auth\\Access\\UserInviteService;\nuse BookStack\\Auth\\User;\nuse BookStack\\Notifications\\UserInvite;\nuse Carbon\\Carbon;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Notification;\nuse Illuminate\\Support\\Str;\nuse Tests\\TestCase;\n\nclass UserInviteTest extends TestCase\n{\n    public function test_user_creation_creates_invite()\n    {\n        Notification::fake();\n        $admin = $this->getAdmin();\n\n        $email = Str::random(16) . '@example.com';\n        $resp = $this->actingAs($admin)->post('/settings/users/create', [\n            'name'        => 'Barry',\n            'email'       => $email,\n            'send_invite' => 'true',\n        ]);\n        $resp->assertRedirect('/settings/users');\n\n        $newUser = User::query()->where('email', '=', $email)->orderBy('id', 'desc')->first();\n\n        Notification::assertSentTo($newUser, UserInvite::class);\n        $this->assertDatabaseHas('user_invites', [\n            'user_id' => $newUser->id,\n        ]);\n    }\n\n    public function test_invite_set_password()\n    {\n        Notification::fake();\n        $user = $this->getViewer();\n        $inviteService = app(UserInviteService::class);\n\n        $inviteService->sendInvitation($user);\n        $token = DB::table('user_invites')->where('user_id', '=', $user->id)->first()->token;\n\n        $setPasswordPageResp = $this->get('/register/invite/' . $token);\n        $setPasswordPageResp->assertSuccessful();\n        $setPasswordPageResp->assertSee('Welcome to BookStack!');\n        $setPasswordPageResp->assertSee('Password');\n        $setPasswordPageResp->assertSee('Confirm Password');\n\n        $setPasswordResp = $this->followingRedirects()->post('/register/invite/' . $token, [\n            'password' => 'my test password',\n        ]);\n        $setPasswordResp->assertSee('Password set, you should now be able to login using your set password to access BookStack!');\n        $newPasswordValid = auth()->validate([\n            'email'    => $user->email,\n            'password' => 'my test password',\n        ]);\n        $this->assertTrue($newPasswordValid);\n        $this->assertDatabaseMissing('user_invites', [\n            'user_id' => $user->id,\n        ]);\n    }\n\n    public function test_invite_set_has_password_validation()\n    {\n        Notification::fake();\n        $user = $this->getViewer();\n        $inviteService = app(UserInviteService::class);\n\n        $inviteService->sendInvitation($user);\n        $token = DB::table('user_invites')->where('user_id', '=', $user->id)->first()->token;\n\n        $this->get('/register/invite/' . $token);\n        $shortPassword = $this->followingRedirects()->post('/register/invite/' . $token, [\n            'password' => 'mypassw',\n        ]);\n        $shortPassword->assertSee('The password must be at least 8 characters.');\n\n        $this->get('/register/invite/' . $token);\n        $noPassword = $this->followingRedirects()->post('/register/invite/' . $token, [\n            'password' => '',\n        ]);\n        $noPassword->assertSee('The password field is required.');\n\n        $this->assertDatabaseHas('user_invites', [\n            'user_id' => $user->id,\n        ]);\n    }\n\n    public function test_non_existent_invite_token_redirects_to_home()\n    {\n        $setPasswordPageResp = $this->get('/register/invite/' . Str::random(12));\n        $setPasswordPageResp->assertRedirect('/');\n\n        $setPasswordResp = $this->post('/register/invite/' . Str::random(12), ['password' => 'Password Test']);\n        $setPasswordResp->assertRedirect('/');\n    }\n\n    public function test_token_expires_after_two_weeks()\n    {\n        Notification::fake();\n        $user = $this->getViewer();\n        $inviteService = app(UserInviteService::class);\n\n        $inviteService->sendInvitation($user);\n        $tokenEntry = DB::table('user_invites')->where('user_id', '=', $user->id)->first();\n        DB::table('user_invites')->update(['created_at' => Carbon::now()->subDays(14)->subHour(1)]);\n\n        $setPasswordPageResp = $this->get('/register/invite/' . $tokenEntry->token);\n        $setPasswordPageResp->assertRedirect('/password/email');\n        $setPasswordPageResp->assertSessionHas('error', 'This invitation link has expired. You can instead try to reset your account password.');\n    }\n}\n"], "filenames": ["app/Http/Controllers/Auth/ConfirmEmailController.php", "app/Http/Controllers/Auth/UserInviteController.php", "resources/lang/en/auth.php", "tests/Auth/AuthTest.php", "tests/Auth/UserInviteTest.php"], "buggy_code_start_loc": [82, 5, 57, 134, 55], "buggy_code_end_loc": [85, 80, 75, 136, 56], "fixing_code_start_loc": [81, 4, 57, 134, 55], "fixing_code_end_loc": [84, 76, 75, 136, 56], "type": "CWE-352", "message": "bookstack is vulnerable to Cross-Site Request Forgery (CSRF)", "other": {"cve": {"id": "CVE-2021-3944", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-02T17:15:08.140", "lastModified": "2021-12-04T02:31:51.397", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "bookstack is vulnerable to Cross-Site Request Forgery (CSRF)"}, {"lang": "es", "value": "bookstack es vulnerable a un ataque de tipo Cross-Site Request Forgery (CSRF)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 5.2}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.1, "baseSeverity": "LOW"}, "exploitabilityScore": 1.6, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:H/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "HIGH", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 4.9, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bookstackapp:bookstack:*:*:*:*:*:*:*:*", "versionEndExcluding": "21.11", "matchCriteriaId": "DFC14A4A-EB33-466B-A575-8EC1F788B444"}]}]}], "references": [{"url": "https://github.com/bookstackapp/bookstack/commit/88e6f93abf54192a69cc8080e0dc6516ee68ccbb", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/65551490-5ade-49aa-8b8d-274c2ca9fdc9", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/bookstackapp/bookstack/commit/88e6f93abf54192a69cc8080e0dc6516ee68ccbb"}}