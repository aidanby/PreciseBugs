{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.element.scheduler\");\npimcore.element.scheduler = Class.create({\n\n    initialize: function(element, type, options) {\n        this.options = Ext.Object.merge({\n            supportsVersions: true\n        }, options);\n\n        this.element = element;\n        this.type = type;\n    },\n\n    getLayout: function () {\n        if (this.layout == null) {\n\n            var tasksData = [];\n            var d = null;\n            var rawTask = [];\n\n            if (this.element.data.scheduledTasks.length > 0) {\n                var td = [];\n\n                for (var i = 0; i < this.element.data.scheduledTasks.length; i++) {\n                    rawTask = this.element.data.scheduledTasks[i];\n                    d = new Date(intval(rawTask.date) * 1000);\n\n                    td = [\n                        rawTask.id,\n                        d,\n                        Ext.Date.format(d, \"H:i\"),\n                        rawTask.action\n                    ];\n\n                    if (this.options.supportsVersions) {\n                        td.push(rawTask.version);\n                    }\n\n                    td.push(rawTask.active);\n                    tasksData.push(td);\n                }\n            }\n\n            var storeFields = [\n                \"id\",\n                {\n                    name: \"date\",\n                    convert: function (v, rec) {\n                        var ret = v;\n                        if (v instanceof Date) {\n                            ret = Ext.Date.format(v, \"Y-m-d\");\n                        }\n                        return ret;\n                    }\n                },\n                {\n                    name: \"time\",\n                    convert: function (v, rec) {\n                        var ret = v;\n                        if (v instanceof Date) {\n                            ret = Ext.Date.format(v, \"H:i\");\n                        }\n                        return ret;\n                    }\n                },\n                \"action\"\n            ];\n\n            if (this.options.supportsVersions) {\n                storeFields.push(\"version\");\n            }\n\n            storeFields.push(\"active\");\n\n            var store = new Ext.data.SimpleStore({\n                fields: storeFields,\n                data: tasksData\n            });\n\n            var actionTypes = this.buildActionsColumnStore();\n\n            if (this.options.supportsVersions) {\n                this.versions = new Ext.data.Store({\n                    autoDestroy: true,\n                    proxy: {\n                        type: 'ajax',\n                        url: Routing.generate('pimcore_admin_element_getversions'),\n                        extraParams: {\n                            id: this.element.id,\n                            elementType: this.type\n                        },\n                        reader: {\n                            type: 'json',\n                            rootProperty: 'versions'\n                        }\n                    },\n                    fields: ['id', {name: 'date', convert: function (v, rec) {\n                            var d = new Date(intval(v) * 1000);\n\n                            var ret = Ext.Date.format(d, \"Y-m-d H:i\");\n\n                            if (rec.data.note) {\n                                ret += \" - \" + rec.data.note;\n                            }\n\n                            if (rec.data.user) {\n                                ret += \" - \" + rec.data.user.name;\n                            }\n                            return ret;\n                        }}, 'note', {name:'name', convert: function (v, rec) {\n                            if (rec.data.user) {\n                                if (rec.data.user.name) {\n                                    return rec.data.user.name;\n                                }\n                            }\n                            return null;\n                        }}]\n                });\n            }\n\n            var checkColumn = Ext.create('Ext.grid.column.Check', {\n                text: t(\"active\"),\n                dataIndex: 'active',\n                width: 50,\n                sortable: true\n            });\n\n            var propertiesColumns = [\n                {text: t(\"date\"), width: 120, sortable: true, dataIndex: 'date', editor: new Ext.form.DateField()                },\n                {text: t(\"time\"), width: 100, sortable: true, dataIndex: 'time', editor: new Ext.form.TimeField({\n                        format: \"H:i\",\n                    })\n                },\n                {text: t(\"action\"), width: 100, sortable: false, dataIndex: 'action', editor: new Ext.form.ComboBox({\n                    triggerAction: 'all',\n                    editable: false,\n                    store: actionTypes,\n                    displayField:'name',\n                    valueField: \"key\",\n                    mode: 'local'\n                }),renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {\n                    try {\n                        var rec = actionTypes.findRecord(\"key\", value);\n                        if (rec) {\n                            return rec.get(\"name\");\n                        }\n                    }\n                    catch (e) {\n                        console.log(e);\n\n                    }\n\n                    return \"\";\n                }}\n            ];\n\n            if (this.options.supportsVersions) {\n                propertiesColumns.push({\n                    text: t(\"version\"),\n                    width: 200,\n                    sortable: false,\n                    dataIndex: 'version',\n                    editor: new Ext.form.ComboBox({\n                        triggerAction: 'all',\n                        editable: false,\n                        store: this.versions,\n                        displayField: 'date',\n                        valueField: \"id\",\n                        listeners: {\n                            \"expand\": function (el) {\n                                el.getStore().reload();\n                            }\n                        }\n                    })\n                });\n            }\n\n            propertiesColumns.push(checkColumn);\n            propertiesColumns.push({\n                xtype: 'actioncolumn',\n                menuText: t('delete'),\n                width: 30,\n                items: [{\n                    tooltip: t('delete'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        grid.getStore().removeAt(rowIndex);\n                    }.bind(this)\n                }]\n            });\n\n            this.cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\n                clicksToEdit: 1\n            });\n\n            this.grid = Ext.create('Ext.grid.Panel', {\n                frame: false,\n                autoScroll: true,\n                store: store,\n                stripeRows: true,\n                trackMouseOver: true,\n                columnLines: true,\n                columns : propertiesColumns,\n                tbar: [\n                    {\n                        text: t('add'),\n                        handler: this.onAdd.bind(this),\n                        iconCls: \"pimcore_icon_add\"\n                    },\n                    {\n                        text: t('delete'),\n                        handler: this.onDelete.bind(this),\n                        iconCls: \"pimcore_icon_delete\"\n                    }\n                ],\n                plugins: [\n                    this.cellEditing\n                    ]\n            });\n\n\n            this.layout = new Ext.Panel({\n                tabConfig: {\n                    tooltip: t('schedule')\n                },\n                border: false,\n                iconCls: \"pimcore_material_icon_scheduler pimcore_material_icon\",\n                items: [this.grid],\n                layout: \"fit\"\n            });\n        }\n\n        return this.layout;\n    },\n\n    buildActionsColumnStore: function() {\n        var actions = [];\n\n        if (\"document\" === this.type || \"object\" === this.type) {\n            if(this.element.isAllowed(\"publish\")) {\n                actions.push([\"publish\", t(\"publish\")]);\n            }\n\n            if(this.element.isAllowed(\"unpublish\")) {\n                actions.push([\"unpublish\", t(\"unpublish\")]);\n            }\n        }\n\n        if(this.element.isAllowed(\"delete\")) {\n            actions.push([\"delete\", t(\"delete\")]);\n        }\n\n        if (this.options.supportsVersions && this.element.isAllowed(\"publish\") && this.element.isAllowed(\"versions\")) {\n            actions.push([\"publish-version\", t(\"publish_version\")]);\n        }\n\n        return new Ext.data.SimpleStore({\n            fields: ['key', 'name'],\n            data: actions\n        });\n    },\n\n    onAdd: function (btn, ev) {\n        var model = this.grid.getStore().getModel();\n        var u = new model();\n        u.set(\"date\", new Date());\n        u.set(\"active\", true);\n        this.grid.store.insert(0, [u]);\n    },\n\n    onDelete: function () {\n        var rec = this.grid.getSelectionModel().getSelection();\n\n        if (!rec) {\n            return false;\n        }\n        this.grid.store.remove(rec[0]);\n    },\n\n    getValues: function () {\n        if (!this.grid.rendered) {\n            throw \"scheduler not available\";\n        }\n\n        var values = [];\n        var data = this.grid.store.getRange();\n\n        var value;\n        for (var i = 0; i < data.length; i++) {\n            value = {\n                date:  data[i].data.date,\n                time: data[i].data.time,\n                action: data[i].data.action,\n                active: data[i].data.active\n            };\n\n            if (this.options.supportsVersions) {\n                value.version = data[i].data.version;\n            }\n\n            values.push(value);\n        }\n\n        return values;\n    }\n});\n"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.element.scheduler\");\npimcore.element.scheduler = Class.create({\n\n    initialize: function(element, type, options) {\n        this.options = Ext.Object.merge({\n            supportsVersions: true\n        }, options);\n\n        this.element = element;\n        this.type = type;\n    },\n\n    getLayout: function () {\n        if (this.layout == null) {\n\n            var tasksData = [];\n            var d = null;\n            var rawTask = [];\n\n            if (this.element.data.scheduledTasks.length > 0) {\n                var td = [];\n\n                for (var i = 0; i < this.element.data.scheduledTasks.length; i++) {\n                    rawTask = this.element.data.scheduledTasks[i];\n                    d = new Date(intval(rawTask.date) * 1000);\n\n                    td = [\n                        rawTask.id,\n                        d,\n                        Ext.Date.format(d, \"H:i\"),\n                        rawTask.action\n                    ];\n\n                    if (this.options.supportsVersions) {\n                        td.push(rawTask.version);\n                    }\n\n                    td.push(rawTask.active);\n                    tasksData.push(td);\n                }\n            }\n\n            var storeFields = [\n                \"id\",\n                {\n                    name: \"date\",\n                    convert: function (v, rec) {\n                        var ret = v;\n                        if (v instanceof Date) {\n                            ret = Ext.Date.format(v, \"Y-m-d\");\n                        }\n                        return ret;\n                    }\n                },\n                {\n                    name: \"time\",\n                    convert: function (v, rec) {\n                        var ret = v;\n                        if (v instanceof Date) {\n                            ret = Ext.Date.format(v, \"H:i\");\n                        }\n                        return ret;\n                    }\n                },\n                \"action\"\n            ];\n\n            if (this.options.supportsVersions) {\n                storeFields.push(\"version\");\n            }\n\n            storeFields.push(\"active\");\n\n            var store = new Ext.data.SimpleStore({\n                fields: storeFields,\n                data: tasksData\n            });\n\n            var actionTypes = this.buildActionsColumnStore();\n\n            if (this.options.supportsVersions) {\n                this.versions = new Ext.data.Store({\n                    autoDestroy: true,\n                    proxy: {\n                        type: 'ajax',\n                        url: Routing.generate('pimcore_admin_element_getversions'),\n                        extraParams: {\n                            id: this.element.id,\n                            elementType: this.type\n                        },\n                        reader: {\n                            type: 'json',\n                            rootProperty: 'versions'\n                        }\n                    },\n                    fields: ['id', {name: 'date', convert: function (v, rec) {\n                            var d = new Date(intval(v) * 1000);\n\n                            var ret = Ext.Date.format(d, \"Y-m-d H:i\");\n\n                            if (rec.data.note) {\n                                ret += \" - \" + rec.data.note;\n                            }\n\n                            if (rec.data.user) {\n                                ret += \" - \" + rec.data.user.name;\n                            }\n                            return ret;\n                        }}, 'note', {name:'name', convert: function (v, rec) {\n                            if (rec.data.user) {\n                                if (rec.data.user.name) {\n                                    return rec.data.user.name;\n                                }\n                            }\n                            return null;\n                        }}]\n                });\n            }\n\n            var checkColumn = Ext.create('Ext.grid.column.Check', {\n                text: t(\"active\"),\n                dataIndex: 'active',\n                width: 50,\n                sortable: true\n            });\n\n            var propertiesColumns = [\n                {text: t(\"date\"), width: 120, sortable: true, dataIndex: 'date', editor: new Ext.form.DateField()                },\n                {text: t(\"time\"), width: 100, sortable: true, dataIndex: 'time', editor: new Ext.form.TimeField({\n                        format: \"H:i\",\n                        listeners: {\n                            focus : function(component) {\n                                component.setValue(Ext.util.Format.htmlDecode(component.value));\n                            },\n                            blur: function(component){\n                                component.setValue(Ext.util.Format.htmlEncode(component.value));\n                            }\n                        }\n                    })\n                },\n                {text: t(\"action\"), width: 100, sortable: false, dataIndex: 'action', editor: new Ext.form.ComboBox({\n                    triggerAction: 'all',\n                    editable: false,\n                    store: actionTypes,\n                    displayField:'name',\n                    valueField: \"key\",\n                    mode: 'local'\n                }),renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {\n                    try {\n                        var rec = actionTypes.findRecord(\"key\", value);\n                        if (rec) {\n                            return rec.get(\"name\");\n                        }\n                    }\n                    catch (e) {\n                        console.log(e);\n\n                    }\n\n                    return \"\";\n                }}\n            ];\n\n            if (this.options.supportsVersions) {\n                propertiesColumns.push({\n                    text: t(\"version\"),\n                    width: 200,\n                    sortable: false,\n                    dataIndex: 'version',\n                    editor: new Ext.form.ComboBox({\n                        triggerAction: 'all',\n                        editable: false,\n                        store: this.versions,\n                        displayField: 'date',\n                        valueField: \"id\",\n                        listeners: {\n                            \"expand\": function (el) {\n                                el.getStore().reload();\n                            }\n                        }\n                    })\n                });\n            }\n\n            propertiesColumns.push(checkColumn);\n            propertiesColumns.push({\n                xtype: 'actioncolumn',\n                menuText: t('delete'),\n                width: 30,\n                items: [{\n                    tooltip: t('delete'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        grid.getStore().removeAt(rowIndex);\n                    }.bind(this)\n                }]\n            });\n\n            this.cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\n                clicksToEdit: 1\n            });\n\n            this.grid = Ext.create('Ext.grid.Panel', {\n                frame: false,\n                autoScroll: true,\n                store: store,\n                stripeRows: true,\n                trackMouseOver: true,\n                columnLines: true,\n                columns : propertiesColumns,\n                tbar: [\n                    {\n                        text: t('add'),\n                        handler: this.onAdd.bind(this),\n                        iconCls: \"pimcore_icon_add\"\n                    },\n                    {\n                        text: t('delete'),\n                        handler: this.onDelete.bind(this),\n                        iconCls: \"pimcore_icon_delete\"\n                    }\n                ],\n                plugins: [\n                    this.cellEditing\n                    ]\n            });\n\n\n            this.layout = new Ext.Panel({\n                tabConfig: {\n                    tooltip: t('schedule')\n                },\n                border: false,\n                iconCls: \"pimcore_material_icon_scheduler pimcore_material_icon\",\n                items: [this.grid],\n                layout: \"fit\"\n            });\n        }\n\n        return this.layout;\n    },\n\n    buildActionsColumnStore: function() {\n        var actions = [];\n\n        if (\"document\" === this.type || \"object\" === this.type) {\n            if(this.element.isAllowed(\"publish\")) {\n                actions.push([\"publish\", t(\"publish\")]);\n            }\n\n            if(this.element.isAllowed(\"unpublish\")) {\n                actions.push([\"unpublish\", t(\"unpublish\")]);\n            }\n        }\n\n        if(this.element.isAllowed(\"delete\")) {\n            actions.push([\"delete\", t(\"delete\")]);\n        }\n\n        if (this.options.supportsVersions && this.element.isAllowed(\"publish\") && this.element.isAllowed(\"versions\")) {\n            actions.push([\"publish-version\", t(\"publish_version\")]);\n        }\n\n        return new Ext.data.SimpleStore({\n            fields: ['key', 'name'],\n            data: actions\n        });\n    },\n\n    onAdd: function (btn, ev) {\n        var model = this.grid.getStore().getModel();\n        var u = new model();\n        u.set(\"date\", new Date());\n        u.set(\"active\", true);\n        this.grid.store.insert(0, [u]);\n    },\n\n    onDelete: function () {\n        var rec = this.grid.getSelectionModel().getSelection();\n\n        if (!rec) {\n            return false;\n        }\n        this.grid.store.remove(rec[0]);\n    },\n\n    getValues: function () {\n        if (!this.grid.rendered) {\n            throw \"scheduler not available\";\n        }\n\n        var values = [];\n        var data = this.grid.store.getRange();\n\n        var value;\n        for (var i = 0; i < data.length; i++) {\n            value = {\n                date:  data[i].data.date,\n                time: data[i].data.time,\n                action: data[i].data.action,\n                active: data[i].data.active\n            };\n\n            if (this.options.supportsVersions) {\n                value.version = data[i].data.version;\n            }\n\n            values.push(value);\n        }\n\n        return values;\n    }\n});\n"], "filenames": ["bundles/AdminBundle/Resources/public/js/pimcore/element/scheduler.js"], "buggy_code_start_loc": [143], "buggy_code_end_loc": [143], "fixing_code_start_loc": [144], "fixing_code_end_loc": [152], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - DOM in GitHub repository pimcore/pimcore prior to 10.5.19.", "other": {"cve": {"id": "CVE-2023-1517", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-20T16:15:13.023", "lastModified": "2023-03-23T18:37:42.770", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - DOM in GitHub repository pimcore/pimcore prior to 10.5.19."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:H/UI:R/S:U/C:L/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.0, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.6, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.19", "matchCriteriaId": "9F355AEC-329F-43D1-A3D7-44C2481A1999"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/3a22700dacd8a439cffcb208838a4199e732cff7", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/82adf0dd-8ebd-4d15-9f91-6060c8fa5a0d", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/3a22700dacd8a439cffcb208838a4199e732cff7"}}