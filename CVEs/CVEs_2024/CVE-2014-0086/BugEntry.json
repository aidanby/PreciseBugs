{"buggy_code": ["/*\n * JBoss, Home of Professional Open Source\n * Copyright 2010, Red Hat, Inc. and individual contributors\n * by the @authors tag. See the copyright.txt in the distribution for a\n * full listing of individual contributors.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.richfaces.webapp;\n\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.text.MessageFormat;\nimport java.util.Collections;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.atmosphere.cpr.BroadcastFilter;\nimport org.atmosphere.cpr.Broadcaster.SCOPE;\nimport org.atmosphere.cpr.Meteor;\nimport org.richfaces.application.push.PushContext;\nimport org.richfaces.application.push.Request;\nimport org.richfaces.application.push.Session;\nimport org.richfaces.application.push.impl.RequestImpl;\nimport org.richfaces.log.Logger;\nimport org.richfaces.log.RichfacesLogger;\n\n/**\n * Serves as delegate for Atmposphere servlets - should not be used directly\n *\n * @author Nick Belaevski\n *\n */\npublic class PushHandlerFilter implements Filter, Serializable {\n    public static final String SESSION_ATTRIBUTE_NAME = Session.class.getName();\n    public static final String REQUEST_ATTRIBUTE_NAME = Request.class.getName();\n    private static final long serialVersionUID = 5724886106704391903L;\n    public static final String PUSH_SESSION_ID_PARAM = \"pushSessionId\";\n    private static final Logger LOGGER = RichfacesLogger.WEBAPP.getLogger();\n\n    private int servletMajorVersion;\n    private transient ServletContext servletContext;\n\n    public void init(FilterConfig filterConfig) throws ServletException {\n        servletContext = filterConfig.getServletContext();\n        servletMajorVersion = servletContext.getMajorVersion();\n    }\n\n    /**\n     * Note: Filter does not delegate to chain, since it would lead into cycle by calling\n     * {@link PushServlet#service(ServletRequest, ServletResponse)}.\n     */\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,\n            ServletException {\n        if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {\n            HttpServletRequest httpReq = (HttpServletRequest) request;\n            HttpServletResponse httpResp = (HttpServletResponse) response;\n\n            if (\"GET\".equals(httpReq.getMethod())) {\n                Meteor meteor = Meteor.build(httpReq, SCOPE.REQUEST, Collections.<BroadcastFilter>emptyList(), null);\n\n                String pushSessionId = httpReq.getParameter(PUSH_SESSION_ID_PARAM);\n\n                Session session = null;\n\n                if (pushSessionId != null) {\n                    ensureServletContextAvailable(request);\n                    PushContext pushContext = (PushContext) servletContext.getAttribute(PushContext.INSTANCE_KEY_NAME);\n                    session = pushContext.getSessionManager().getPushSession(pushSessionId);\n                }\n\n                if (session == null) {\n                    if (LOGGER.isDebugEnabled()) {\n                        LOGGER.debug(MessageFormat.format(\"Session {0} was not found\", pushSessionId));\n                    }\n                    httpResp.sendError(HttpServletResponse.SC_BAD_REQUEST);\n                    return;\n                }\n\n                httpResp.setContentType(\"text/plain\");\n\n                try {\n                    Request pushRequest = new RequestImpl(meteor, session);\n\n                    httpReq.setAttribute(SESSION_ATTRIBUTE_NAME, session);\n                    httpReq.setAttribute(REQUEST_ATTRIBUTE_NAME, pushRequest);\n\n                    pushRequest.suspend();\n                } catch (Exception e) {\n                    LOGGER.error(e.getMessage(), e);\n                }\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Ensures that servletContext instance is available, or throws exception.\n     *\n     * This method ensures compatibility with Servlet &lt;3.0, which doesn't support obtaining {@link ServletContext} from\n     * {@link ServletRequest}.\n     *\n     * @param request {@link ServletRequest}\n     * @throws {@link IllegalStateException} when {@link ServletContext} won't be available in Servlets &lt;3.0 environments.\n     *         This can happen when this filter was serialized.\n     */\n    private void ensureServletContextAvailable(ServletRequest request) {\n        if (servletContext == null) {\n            if (servletMajorVersion >= 3) {\n                servletContext = request.getServletContext();\n            } else {\n                throw new IllegalStateException(\n                        \"ServletContext is not available (you are using Servlets API <3.0; it might be caused by \"\n                                + PushHandlerFilter.class.getName() + \" in distributed environment)\");\n            }\n        }\n    }\n\n    public void destroy() {\n        servletContext = null;\n    }\n}\n"], "fixing_code": ["/*\n * JBoss, Home of Professional Open Source\n * Copyright 2010, Red Hat, Inc. and individual contributors\n * by the @authors tag. See the copyright.txt in the distribution for a\n * full listing of individual contributors.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.richfaces.webapp;\n\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.text.MessageFormat;\nimport java.util.Collections;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.atmosphere.cpr.BroadcastFilter;\nimport org.atmosphere.cpr.Broadcaster.SCOPE;\nimport org.atmosphere.cpr.Meteor;\nimport org.richfaces.application.push.PushContext;\nimport org.richfaces.application.push.Request;\nimport org.richfaces.application.push.Session;\nimport org.richfaces.application.push.impl.RequestImpl;\nimport org.richfaces.log.Logger;\nimport org.richfaces.log.RichfacesLogger;\n\n/**\n * Serves as delegate for Atmposphere servlets - should not be used directly\n *\n * @author Nick Belaevski\n *\n */\npublic class PushHandlerFilter implements Filter, Serializable {\n    public static final String SESSION_ATTRIBUTE_NAME = Session.class.getName();\n    public static final String REQUEST_ATTRIBUTE_NAME = Request.class.getName();\n    private static final long serialVersionUID = 5724886106704391903L;\n    public static final String PUSH_SESSION_ID_PARAM = \"pushSessionId\";\n    private static final Logger LOGGER = RichfacesLogger.WEBAPP.getLogger();\n\n    private int servletMajorVersion;\n    private transient ServletContext servletContext;\n\n    public void init(FilterConfig filterConfig) throws ServletException {\n        servletContext = filterConfig.getServletContext();\n        servletMajorVersion = servletContext.getMajorVersion();\n    }\n\n    /**\n     * Note: Filter does not delegate to chain, since it would lead into cycle by calling\n     * {@link PushServlet#service(ServletRequest, ServletResponse)}.\n     */\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,\n            ServletException {\n        if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {\n            HttpServletRequest httpReq = (HttpServletRequest) request;\n            HttpServletResponse httpResp = (HttpServletResponse) response;\n\n            if (\"GET\".equals(httpReq.getMethod())) {\n                String pushSessionId = httpReq.getParameter(PUSH_SESSION_ID_PARAM);\n\n                Session session = null;\n\n                if (pushSessionId != null) {\n                    ensureServletContextAvailable(request);\n                    PushContext pushContext = (PushContext) servletContext.getAttribute(PushContext.INSTANCE_KEY_NAME);\n                    session = pushContext.getSessionManager().getPushSession(pushSessionId);\n                }\n\n                if (session == null) {\n                    if (LOGGER.isDebugEnabled()) {\n                        LOGGER.debug(MessageFormat.format(\"Session {0} was not found\", pushSessionId));\n                    }\n                    httpResp.sendError(HttpServletResponse.SC_BAD_REQUEST);\n                    return;\n                }\n\n                httpResp.setContentType(\"text/plain\");\n\n                Meteor meteor = Meteor.build(httpReq, SCOPE.REQUEST, Collections.<BroadcastFilter>emptyList(), null);\n\n                try {\n                    Request pushRequest = new RequestImpl(meteor, session);\n\n                    httpReq.setAttribute(SESSION_ATTRIBUTE_NAME, session);\n                    httpReq.setAttribute(REQUEST_ATTRIBUTE_NAME, pushRequest);\n\n                    pushRequest.suspend();\n                } catch (Exception e) {\n                    LOGGER.error(e.getMessage(), e);\n                }\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Ensures that servletContext instance is available, or throws exception.\n     *\n     * This method ensures compatibility with Servlet &lt;3.0, which doesn't support obtaining {@link ServletContext} from\n     * {@link ServletRequest}.\n     *\n     * @param request {@link ServletRequest}\n     * @throws {@link IllegalStateException} when {@link ServletContext} won't be available in Servlets &lt;3.0 environments.\n     *         This can happen when this filter was serialized.\n     */\n    private void ensureServletContextAvailable(ServletRequest request) {\n        if (servletContext == null) {\n            if (servletMajorVersion >= 3) {\n                servletContext = request.getServletContext();\n            } else {\n                throw new IllegalStateException(\n                        \"ServletContext is not available (you are using Servlets API <3.0; it might be caused by \"\n                                + PushHandlerFilter.class.getName() + \" in distributed environment)\");\n            }\n        }\n    }\n\n    public void destroy() {\n        servletContext = null;\n    }\n}\n"], "filenames": ["impl/src/main/java/org/richfaces/webapp/PushHandlerFilter.java"], "buggy_code_start_loc": [81], "buggy_code_end_loc": [101], "fixing_code_start_loc": [80], "fixing_code_end_loc": [102], "type": "CWE-20", "message": "The doFilter function in webapp/PushHandlerFilter.java in JBoss RichFaces 4.3.4, 4.3.5, and 5.x allows remote attackers to cause a denial of service (memory consumption and out-of-memory error) via a large number of malformed atmosphere push requests.", "other": {"cve": {"id": "CVE-2014-0086", "sourceIdentifier": "secalert@redhat.com", "published": "2014-03-31T14:58:19.587", "lastModified": "2017-12-16T02:29:02.637", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The doFilter function in webapp/PushHandlerFilter.java in JBoss RichFaces 4.3.4, 4.3.5, and 5.x allows remote attackers to cause a denial of service (memory consumption and out-of-memory error) via a large number of malformed atmosphere push requests."}, {"lang": "es", "value": "La funci\u00f3n doFilter en webapp/PushHandlerFilter.java en JBoss RichFaces 4.3.4, 4.3.5 y 5.x permite a atacantes remotos causar una denegaci\u00f3n de servicio (consumo de memoria y error de falta de memoria) a trav\u00e9s de un n\u00famero grande de solicitudes atmosphere push malformadas."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redhat:jboss_web_framework_kit:2.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "3969103B-4669-4C3D-93E0-F5A392B6A800"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:richfaces:4.3.4:*:*:*:*:*:*:*", "matchCriteriaId": "F5BDCE2F-E599-42B3-800F-2D25813E0122"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:richfaces:4.3.5:*:*:*:*:*:*:*", "matchCriteriaId": "831F47E4-F8E2-44FF-833A-DD9BD122153E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:richfaces:5.0.0:alpha1:*:*:*:*:*:*", "matchCriteriaId": "8DA147D3-F295-4DBD-87AD-40C7F9B00C8F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:richfaces:5.0.0:alpha2:*:*:*:*:*:*", "matchCriteriaId": "F1C7A907-F7B5-4944-80E5-422B8A815039"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:richfaces:5.0.0:alpha3:*:*:*:*:*:*", "matchCriteriaId": "8252F7DF-E0DA-414A-8D07-FE56489D8F85"}]}]}], "references": [{"url": "http://rhn.redhat.com/errata/RHSA-2014-0335.html", "source": "secalert@redhat.com"}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1067268", "source": "secalert@redhat.com"}, {"url": "https://github.com/pslegr/core-1/commit/8131f15003f5bec73d475d2b724472e4b87d0757", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}, {"url": "https://issues.jboss.org/browse/RF-13250", "source": "secalert@redhat.com", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/pslegr/core-1/commit/8131f15003f5bec73d475d2b724472e4b87d0757"}}