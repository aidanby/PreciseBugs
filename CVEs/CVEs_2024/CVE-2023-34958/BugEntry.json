{"buggy_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CourseBundle\\Entity\\CStudentPublication;\nuse ChamiloSession as Session;\nuse Doctrine\\DBAL\\Driver\\Statement;\n\n/**\n *  @author Thomas, Hugues, Christophe - original version\n *  @author Patrick Cool <patrick.cool@UGent.be>, Ghent University -\n * ability for course admins to specify wether uploaded documents are visible or invisible by default.\n *  @author Roan Embrechts, code refactoring and virtual course support\n *  @author Frederic Vauthier, directories management\n *  @author Julio Montoya <gugli100@gmail.com> BeezNest 2011 LOTS of bug fixes\n *\n *  @todo   this lib should be convert in a static class and moved to main/inc/lib\n */\n\n/**\n * Displays action links (for admins, authorized groups members and authorized students).\n *\n * @param   int Whether to show tool options\n * @param   int Whether to show upload form option\n * @param bool $isTutor\n */\nfunction displayWorkActionLinks($id, $action, $isTutor)\n{\n    $id = $my_back_id = (int) $id;\n    if ('list' === $action) {\n        $my_back_id = 0;\n    }\n\n    $output = '';\n    $origin = api_get_origin();\n    if (!empty($id)) {\n        $output .= '<a href=\"'.api_get_self().'?'.api_get_cidreq().'&id='.$my_back_id.'\">'.\n            Display::return_icon('back.png', get_lang('BackToWorksList'), '', ICON_SIZE_MEDIUM).\n            '</a>';\n    }\n\n    if (($isTutor || api_is_allowed_to_edit(null, true)) &&\n        'learnpath' !== $origin\n    ) {\n        // Create dir\n        if (empty($id)) {\n            $output .= '<a href=\"'.api_get_self().'?'.api_get_cidreq().'&action=create_dir\">';\n            $output .= Display::return_icon(\n                'new_work.png',\n                get_lang('CreateAssignment'),\n                '',\n                ICON_SIZE_MEDIUM\n            );\n            $output .= '</a>';\n        }\n    }\n\n    if (api_is_allowed_to_edit(null, true) && $origin !== 'learnpath' && $action === 'list') {\n        $output .= '<a id=\"open-view-list\" href=\"#\">'.\n            Display::return_icon(\n                'listwork.png',\n                get_lang('ViewStudents'),\n                '',\n                ICON_SIZE_MEDIUM\n            ).\n            '</a>';\n    }\n\n    if ('' != $output) {\n        echo '<div class=\"actions\">';\n        echo $output;\n        echo '</div>';\n    }\n}\n\n/**\n * @param string $path\n * @param int    $courseId\n *\n * @return array\n */\nfunction get_work_data_by_path($path, $courseId = 0)\n{\n    $path = Database::escape_string($path);\n    $courseId = (int) $courseId;\n    if (empty($courseId)) {\n        $courseId = api_get_course_int_id();\n    }\n\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $sql = \"SELECT *  FROM $table\n            WHERE url = '$path' AND c_id = $courseId \";\n    $result = Database::query($sql);\n    $return = [];\n    if (Database::num_rows($result)) {\n        $return = Database::fetch_array($result, 'ASSOC');\n    }\n\n    return $return;\n}\n\n/**\n * @param int $id\n * @param int $courseId\n * @param int $sessionId\n *\n * @return array\n */\nfunction get_work_data_by_id($id, $courseId = 0, $sessionId = 0)\n{\n    $id = (int) $id;\n    $courseId = ((int) $courseId) ?: api_get_course_int_id();\n    $course = api_get_course_entity($courseId);\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n\n    $sessionCondition = '';\n    if (!empty($sessionId)) {\n        $sessionCondition = api_get_session_condition($sessionId, true);\n    }\n\n    $webCodePath = api_get_path(WEB_CODE_PATH);\n\n    $sql = \"SELECT * FROM $table\n            WHERE\n                id = $id AND c_id = $courseId\n                $sessionCondition\";\n    $result = Database::query($sql);\n    $work = [];\n    if (Database::num_rows($result)) {\n        $work = Database::fetch_array($result, 'ASSOC');\n        if (empty($work['title'])) {\n            $work['title'] = basename($work['url']);\n        }\n        $work['download_url'] = $webCodePath.'work/download.php?id='.$work['id'].'&'.api_get_cidreq();\n        $work['view_url'] = $webCodePath.'work/view.php?id='.$work['id'].'&'.api_get_cidreq();\n        $work['show_url'] = $webCodePath.'work/show_file.php?id='.$work['id'].'&'.api_get_cidreq();\n        $work['show_content'] = '';\n        if ($work['contains_file']) {\n            $fileType = '';\n            $file = api_get_path(SYS_COURSE_PATH).$course->getDirectory().'/'.$work['url'];\n            if (file_exists($file)) {\n                $fileType = mime_content_type($file);\n            }\n\n            if (in_array($fileType, ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'])) {\n                $work['show_content'] = Display::img($work['show_url'], $work['title'], null, false);\n            } elseif (false !== strpos($fileType, 'video/')) {\n                $work['show_content'] = Display::tag(\n                    'video',\n                    get_lang('FileFormatNotSupported'),\n                    ['src' => $work['show_url']]\n                );\n            }\n        }\n\n        $fieldValue = new ExtraFieldValue('work');\n        $work['extra'] = $fieldValue->getAllValuesForAnItem($id, true);\n    }\n\n    return $work;\n}\n\n/**\n * @param int $user_id\n * @param int $work_id\n *\n * @return int\n */\nfunction get_work_count_by_student($user_id, $work_id)\n{\n    $user_id = (int) $user_id;\n    $work_id = (int) $work_id;\n    $course_id = api_get_course_int_id();\n    $session_id = api_get_session_id();\n    $sessionCondition = api_get_session_condition($session_id);\n\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $sql = \"SELECT COUNT(*) as count\n            FROM  $table\n            WHERE\n                c_id = $course_id AND\n                parent_id = $work_id AND\n                user_id = $user_id AND\n                active IN (0, 1)\n                $sessionCondition\";\n    $result = Database::query($sql);\n    $return = 0;\n    if (Database::num_rows($result)) {\n        $return = Database::fetch_row($result, 'ASSOC');\n        $return = (int) ($return[0]);\n    }\n\n    return $return;\n}\n\n/**\n * @param int $id\n * @param int $courseId\n *\n * @return array\n */\nfunction get_work_assignment_by_id($id, $courseId = 0)\n{\n    $courseId = (int) $courseId;\n    if (empty($courseId)) {\n        $courseId = api_get_course_int_id();\n    }\n    $id = (int) $id;\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n    $sql = \"SELECT * FROM $table\n            WHERE c_id = $courseId AND publication_id = $id\";\n    $result = Database::query($sql);\n    $return = [];\n    if (Database::num_rows($result)) {\n        $return = Database::fetch_array($result, 'ASSOC');\n    }\n\n    return $return;\n}\n\n/**\n * @param int    $id\n * @param array  $my_folder_data\n * @param string $add_in_where_query\n * @param int    $course_id\n * @param int    $session_id\n *\n * @return array\n */\nfunction getWorkList($id, $my_folder_data, $add_in_where_query = null, $course_id = 0, $session_id = 0)\n{\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n\n    $course_id = $course_id ? $course_id : api_get_course_int_id();\n    $session_id = $session_id ? $session_id : api_get_session_id();\n    $condition_session = api_get_session_condition($session_id);\n    $group_id = api_get_group_id();\n\n    $groupIid = 0;\n    if ($group_id) {\n        $groupInfo = GroupManager::get_group_properties($group_id);\n        if ($groupInfo) {\n            $groupIid = $groupInfo['iid'];\n        }\n    }\n\n    $is_allowed_to_edit = api_is_allowed_to_edit(null, true);\n    $linkInfo = GradebookUtils::isResourceInCourseGradebook(\n        api_get_course_id(),\n        3,\n        $id,\n        api_get_session_id()\n    );\n\n    if ($linkInfo) {\n        $workInGradeBookLinkId = $linkInfo['id'];\n        if ($workInGradeBookLinkId) {\n            if ($is_allowed_to_edit) {\n                if (intval($my_folder_data['qualification']) == 0) {\n                    echo Display::return_message(\n                        get_lang('MaxWeightNeedToBeProvided'),\n                        'warning'\n                    );\n                }\n            }\n        }\n    }\n\n    $contains_file_query = '';\n    // Get list from database\n    if ($is_allowed_to_edit) {\n        $active_condition = ' active IN (0, 1)';\n        $sql = \"SELECT * FROM $work_table\n                WHERE\n                    c_id = $course_id\n                    $add_in_where_query\n                    $condition_session AND\n                    $active_condition AND\n                    (parent_id = 0)\n                    $contains_file_query AND\n                    post_group_id = $groupIid\n                ORDER BY sent_date DESC\";\n    } else {\n        if (!empty($group_id)) {\n            // set to select only messages posted by the user's group\n            $group_query = \" WHERE c_id = $course_id AND post_group_id = $groupIid\";\n            $subdirs_query = ' AND parent_id = 0';\n        } else {\n            $group_query = \" WHERE c_id = $course_id AND (post_group_id = '0' OR post_group_id is NULL) \";\n            $subdirs_query = ' AND parent_id = 0';\n        }\n        //@todo how we can active or not an assignment?\n        $active_condition = ' AND active IN (1, 0)';\n        $sql = \"SELECT * FROM  $work_table\n                $group_query\n                $subdirs_query\n                $add_in_where_query\n                $active_condition\n                $condition_session\n                ORDER BY title\";\n    }\n\n    $work_parents = [];\n\n    $sql_result = Database::query($sql);\n    if (Database::num_rows($sql_result)) {\n        while ($work = Database::fetch_object($sql_result)) {\n            if (0 == $work->parent_id) {\n                $work_parents[] = $work;\n            }\n        }\n    }\n\n    return $work_parents;\n}\n\n/**\n * @param int $userId\n * @param int $courseId\n * @param int $sessionId\n *\n * @return array\n */\nfunction getWorkPerUser($userId, $courseId = 0, $sessionId = 0)\n{\n    $works = getWorkList(null, null, null, $courseId, $sessionId);\n    $result = [];\n    if (!empty($works)) {\n        foreach ($works as $workData) {\n            $workId = $workData->id;\n            $result[$workId]['work'] = $workData;\n            $result[$workId]['work']->user_results = get_work_user_list(\n                0,\n                100,\n                null,\n                null,\n                $workId,\n                null,\n                $userId,\n                false,\n                $courseId,\n                $sessionId\n            );\n        }\n    }\n\n    return $result;\n}\n\n/**\n * @param int $workId\n * @param int $groupId\n * @param int $course_id\n * @param int $sessionId\n */\nfunction getUniqueStudentAttemptsTotal($workId, $groupId, $course_id, $sessionId)\n{\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $user_table = Database::get_main_table(TABLE_MAIN_USER);\n    $course_id = (int) $course_id;\n    $workId = (int) $workId;\n    $sessionId = (int) $sessionId;\n    $groupId = (int) $groupId;\n    $sessionCondition = api_get_session_condition(\n        $sessionId,\n        true,\n        false,\n        'w.session_id'\n    );\n\n    $groupIid = 0;\n    if ($groupId) {\n        $groupInfo = GroupManager::get_group_properties($groupId);\n        $groupIid = $groupInfo['iid'];\n    }\n\n    $sql = \"SELECT count(DISTINCT u.user_id)\n            FROM $work_table w\n            INNER JOIN $user_table u\n            ON w.user_id = u.user_id\n            WHERE\n                w.c_id = $course_id\n                $sessionCondition AND\n                w.parent_id = $workId AND\n                w.post_group_id = $groupIid AND\n                w.active IN (0, 1)\n            \";\n\n    $res_document = Database::query($sql);\n    $rowCount = Database::fetch_row($res_document);\n\n    return $rowCount[0];\n}\n\n/**\n * @param mixed $workId\n * @param int   $groupId\n * @param int   $course_id\n * @param int   $sessionId\n * @param int   $userId       user id to filter\n * @param array $onlyUserList only parse this user list\n *\n * @return mixed\n */\nfunction getUniqueStudentAttempts(\n    $workId,\n    $groupId,\n    $course_id,\n    $sessionId,\n    $userId = null,\n    $onlyUserList = []\n) {\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $user_table = Database::get_main_table(TABLE_MAIN_USER);\n\n    $course_id = (int) $course_id;\n    $workCondition = null;\n    if (is_array($workId)) {\n        $workId = array_map('intval', $workId);\n        $workId = implode(\"','\", $workId);\n        $workCondition = \" w.parent_id IN ('\".$workId.\"') AND\";\n    } else {\n        $workId = (int) $workId;\n        $workCondition = ' w.parent_id = '.$workId.' AND';\n    }\n\n    $sessionId = (int) $sessionId;\n    $groupId = (int) $groupId;\n    $studentCondition = null;\n\n    if (!empty($onlyUserList)) {\n        $onlyUserList = array_map('intval', $onlyUserList);\n        $studentCondition = \"AND u.user_id IN ('\".implode(\"', '\", $onlyUserList).\"') \";\n    } else {\n        if (empty($userId)) {\n            return 0;\n        }\n    }\n\n    $groupIid = 0;\n    if ($groupId) {\n        $groupInfo = GroupManager::get_group_properties($groupId);\n        $groupIid = $groupInfo['iid'];\n    }\n\n    $sessionCondition = api_get_session_condition(\n        $sessionId,\n        true,\n        false,\n        'w.session_id'\n    );\n\n    $sql = \"SELECT count(*) FROM (\n                SELECT count(*), w.parent_id\n                FROM $work_table w\n                INNER JOIN $user_table u\n                ON w.user_id = u.user_id\n                WHERE\n                    w.filetype = 'file' AND\n                    w.c_id = $course_id\n                    $sessionCondition AND\n                    $workCondition\n                    w.post_group_id = $groupIid AND\n                    w.active IN (0, 1) $studentCondition\n                \";\n    if (!empty($userId)) {\n        $userId = (int) $userId;\n        $sql .= ' AND u.user_id = '.$userId;\n    }\n    $sql .= ' GROUP BY u.user_id, w.parent_id) as t';\n    $result = Database::query($sql);\n    $row = Database::fetch_row($result);\n\n    return $row[0];\n}\n\n/**\n * Shows the work list (student view).\n *\n * @return string\n */\nfunction showStudentWorkGrid()\n{\n    $courseInfo = api_get_course_info();\n    $url = api_get_path(WEB_AJAX_PATH).'model.ajax.php?a=get_work_student&'.api_get_cidreq();\n\n    $columns = [\n        get_lang('Type'),\n        get_lang('Title'),\n        get_lang('HandOutDateLimit'),\n        get_lang('Feedback'),\n        get_lang('LastUpload'),\n    ];\n\n    $columnModel = [\n        ['name' => 'type', 'index' => 'type', 'width' => '30', 'align' => 'center', 'sortable' => 'false'],\n        ['name' => 'title', 'index' => 'title', 'width' => '250', 'align' => 'left'],\n        ['name' => 'expires_on', 'index' => 'expires_on', 'width' => '80', 'align' => 'center', 'sortable' => 'false'],\n        ['name' => 'feedback', 'index' => 'feedback', 'width' => '80', 'align' => 'center', 'sortable' => 'false'],\n        ['name' => 'last_upload', 'index' => 'feedback', 'width' => '125', 'align' => 'center', 'sortable' => 'false'],\n    ];\n\n    if ($courseInfo['show_score'] == 0) {\n        $columnModel[] = [\n            'name' => 'others',\n            'index' => 'others',\n            'width' => '80',\n            'align' => 'left',\n            'sortable' => 'false',\n        ];\n        $columns[] = get_lang('Others');\n    }\n\n    $params = [\n        'autowidth' => 'true',\n        'height' => 'auto',\n    ];\n\n    $html = '<script>\n        $(function() {\n            '.Display::grid_js('workList', $url, $columns, $columnModel, $params, [], null, true).'\n        });\n    </script>';\n\n    $html .= Display::grid_html('workList');\n\n    return $html;\n}\n\n/**\n * Shows the work list (student view).\n *\n * @return string\n */\nfunction showStudentAllWorkGrid($withResults = 1)\n{\n    $withResults = (int) $withResults;\n    $url = api_get_path(WEB_AJAX_PATH).'model.ajax.php?a=get_all_work_student&with_results='.$withResults;\n\n    $columns = [\n        get_lang('Type'),\n        get_lang('Title'),\n        get_lang('HandOutDateLimit'),\n    ];\n\n    $id = 'workList';\n    if ($withResults) {\n        $id = 'workListWithResults';\n        $columns[] = get_lang('Feedback');\n        $columns[] = get_lang('LastUpload');\n    }\n\n    $columnModel = [\n        ['name' => 'type', 'index' => 'type', 'width' => '50', 'align' => 'center', 'sortable' => 'false'],\n        ['name' => 'title', 'index' => 'title', 'width' => '600', 'align' => 'left'],\n        ['name' => 'expires_on', 'index' => 'expires_on', 'width' => '125', 'align' => 'center', 'sortable' => 'false'],\n    ];\n\n    if ($withResults) {\n        $columnModel[] = [\n            'name' => 'feedback',\n            'index' => 'feedback',\n            'width' => '150',\n            'align' => 'center',\n            'sortable' => 'false',\n        ];\n        $columnModel[] = [\n            'name' => 'last_upload',\n            'index' => 'last_upload',\n            'width' => '150',\n            'align' => 'center',\n            'sortable' => 'false',\n        ];\n    }\n\n    $params = [\n        'autowidth' => 'true',\n        'height' => 'auto',\n    ];\n\n    $html = '<script>\n        $(function() {\n            '.Display::grid_js($id, $url, $columns, $columnModel, $params, [], null, true).'\n        });\n    </script>';\n\n    $html .= Display::grid_html($id);\n\n    return $html;\n}\n\n/**\n * Shows the work list (teacher view).\n *\n * @return string\n */\nfunction showTeacherWorkGrid()\n{\n    $columnModel = [\n        ['name' => 'type', 'index' => 'type', 'width' => '35', 'align' => 'center', 'sortable' => 'false'],\n        ['name' => 'title', 'index' => 'title', 'width' => '300', 'align' => 'left', 'wrap_cell' => \"true\"],\n        ['name' => 'sent_date', 'index' => 'sent_date', 'width' => '125', 'align' => 'center'],\n        ['name' => 'expires_on', 'index' => 'expires_on', 'width' => '125', 'align' => 'center'],\n        ['name' => 'amount', 'index' => 'amount', 'width' => '110', 'align' => 'center', 'sortable' => 'false'],\n        ['name' => 'actions', 'index' => 'actions', 'width' => '110', 'align' => 'left', 'sortable' => 'false'],\n    ];\n    $url = api_get_path(WEB_AJAX_PATH).'model.ajax.php?a=get_work_teacher&'.api_get_cidreq();\n    $deleteUrl = api_get_path(WEB_AJAX_PATH).'work.ajax.php?a=delete_work&'.api_get_cidreq();\n\n    $columns = [\n        get_lang('Type'),\n        get_lang('Title'),\n        get_lang('SentDate'),\n        get_lang('HandOutDateLimit'),\n        get_lang('AmountSubmitted'),\n        get_lang('Actions'),\n    ];\n\n    $params = [\n        'multiselect' => true,\n        'autowidth' => 'true',\n        'height' => 'auto',\n        'sortname' => 'sent_date',\n        'sortorder' => 'asc',\n    ];\n\n    $html = '<script>\n    $(function() {\n        '.Display::grid_js('workList', $url, $columns, $columnModel, $params, [], null, true).'\n        $(\"#workList\").jqGrid(\n            \"navGrid\",\n            \"#workList_pager\",\n            { edit: false, add: false, del: true },\n            { height:280, reloadAfterSubmit:false }, // edit options\n            { height:280, reloadAfterSubmit:false }, // add options\n            { reloadAfterSubmit:false, url: \"'.$deleteUrl.'\" }, // del options\n            { width:500 } // search options\n        );\n    });\n    </script>';\n    $html .= Display::grid_html('workList');\n\n    return $html;\n}\n\n/**\n * Builds the form that enables the user to\n * move a document from one directory to another\n * This function has been copied from the document/document.inc.php library.\n *\n * @param array  $folders\n * @param string $curdirpath\n * @param string $move_file\n * @param string $group_dir\n *\n * @return string html form\n */\nfunction build_work_move_to_selector($folders, $curdirpath, $move_file, $group_dir = '')\n{\n    $course_id = api_get_course_int_id();\n    $move_file = (int) $move_file;\n    $tbl_work = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $sql = \"SELECT title, url FROM $tbl_work\n            WHERE c_id = $course_id AND id ='\".$move_file.\"'\";\n    $result = Database::query($sql);\n    $row = Database::fetch_array($result, 'ASSOC');\n    $title = empty($row['title']) ? basename($row['url']) : $row['title'];\n\n    $form = new FormValidator(\n        'move_to_form',\n        'post',\n        api_get_self().'?'.api_get_cidreq().'&curdirpath='.Security::remove_XSS($curdirpath)\n    );\n\n    $form->addHeader(get_lang('MoveFile').' - '.Security::remove_XSS($title));\n    $form->addHidden('item_id', $move_file);\n    $form->addHidden('action', 'move_to');\n\n    // Group documents cannot be uploaded in the root\n    if ($group_dir == '') {\n        if (is_array($folders)) {\n            foreach ($folders as $fid => $folder) {\n                //you cannot move a file to:\n                //1. current directory\n                //2. inside the folder you want to move\n                //3. inside a subfolder of the folder you want to move\n                if (($curdirpath != $folder) &&\n                    ($folder != $move_file) &&\n                    (substr($folder, 0, strlen($move_file) + 1) != $move_file.'/')\n                ) {\n                    $options[$fid] = $folder;\n                }\n            }\n        }\n    } else {\n        if ($curdirpath != '/') {\n            $form .= '<option value=\"0\">/ ('.get_lang('Root').')</option>';\n        }\n        foreach ($folders as $fid => $folder) {\n            if (($curdirpath != $folder) && ($folder != $move_file) &&\n                (substr($folder, 0, strlen($move_file) + 1) != $move_file.'/')\n            ) {\n                //cannot copy dir into his own subdir\n                $display_folder = substr($folder, strlen($group_dir));\n                $display_folder = ($display_folder == '') ? '/ ('.get_lang('Root').')' : $display_folder;\n                //$form .= '<option value=\"'.$fid.'\">'.$display_folder.'</option>'.\"\\n\";\n                $options[$fid] = $display_folder;\n            }\n        }\n    }\n\n    $form->addSelect('move_to_id', get_lang('Select'), $options);\n    $form->addButtonSend(get_lang('MoveFile'), 'move_file_submit');\n\n    return $form->returnForm();\n}\n\n/**\n * creates a new directory trying to find a directory name\n * that doesn't already exist.\n *\n * @author Hugues Peeters <hugues.peeters@claroline.net>\n * @author Bert Vanderkimpen\n * @author Yannick Warnier <ywarnier@beeznest.org> Adaptation for work tool\n *\n * @param string $workDir        Base work dir (.../work)\n * @param string $desiredDirName complete path of the desired name\n *\n * @return string actual directory name if it succeeds, boolean false otherwise\n */\nfunction create_unexisting_work_directory($workDir, $desiredDirName)\n{\n    $counter = 0;\n    $workDir = (substr($workDir, -1, 1) == '/' ? $workDir : $workDir.'/');\n    $checkDirName = $desiredDirName;\n    while (file_exists($workDir.$checkDirName)) {\n        $counter++;\n        $checkDirName = $desiredDirName.$counter;\n    }\n\n    if (@mkdir($workDir.$checkDirName, api_get_permissions_for_new_directories())) {\n        return $checkDirName;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Delete a work-tool directory.\n *\n * @param int $id work directory id to delete\n *\n * @return int -1 on error\n */\nfunction deleteDirWork($id)\n{\n    $locked = api_resource_is_locked_by_gradebook($id, LINK_STUDENTPUBLICATION);\n\n    if ($locked == true) {\n        echo Display::return_message(get_lang('ResourceLockedByGradebook'), 'warning');\n\n        return false;\n    }\n\n    $_course = api_get_course_info();\n    $id = (int) $id;\n    $work_data = get_work_data_by_id($id);\n\n    if (empty($work_data)) {\n        return false;\n    }\n\n    $base_work_dir = api_get_path(SYS_COURSE_PATH).$_course['path'].'/work';\n    $work_data_url = $base_work_dir.$work_data['url'];\n    $check = Security::check_abs_path($work_data_url.'/', $base_work_dir.'/');\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $TSTDPUBASG = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n    $t_agenda = Database::get_course_table(TABLE_AGENDA);\n    $course_id = api_get_course_int_id();\n    $sessionId = api_get_session_id();\n\n    if (!empty($work_data['url'])) {\n        if ($check) {\n            $consideredWorkingTime = api_get_configuration_value('considered_working_time');\n            if (!empty($consideredWorkingTime)) {\n                $fieldValue = new ExtraFieldValue('work');\n                $resultExtra = $fieldValue->getAllValuesForAnItem(\n                    $work_data['id'],\n                    true\n                );\n\n                $workingTime = null;\n                foreach ($resultExtra as $field) {\n                    $field = $field['value'];\n                    if ($consideredWorkingTime == $field->getField()->getVariable()) {\n                        $workingTime = $field->getValue();\n\n                        break;\n                    }\n                }\n\n                $courseUsers = CourseManager::get_user_list_from_course_code($_course['code'], $sessionId);\n                if (!empty($workingTime)) {\n                    foreach ($courseUsers as $user) {\n                        $userWorks = get_work_user_list(\n                            0,\n                            100,\n                            null,\n                            null,\n                            $work_data['id'],\n                            null,\n                            $user['user_id'],\n                            false,\n                            $course_id,\n                            $sessionId\n                        );\n\n                        if (count($userWorks) != 1) {\n                            continue;\n                        }\n                        Event::eventRemoveVirtualCourseTime(\n                            $course_id,\n                            $user['user_id'],\n                            $sessionId,\n                            $workingTime,\n                            $work_data['iid']\n                        );\n                    }\n                }\n            }\n\n            // Deleting all contents inside the folder\n            $sql = \"UPDATE $table SET active = 2\n                    WHERE c_id = $course_id AND filetype = 'folder' AND id = $id\";\n            Database::query($sql);\n\n            $sql = \"UPDATE $table SET active = 2\n                    WHERE c_id = $course_id AND parent_id = $id\";\n            Database::query($sql);\n\n            $new_dir = $work_data_url.'_DELETED_'.$id;\n\n            if (api_get_setting('permanently_remove_deleted_files') == 'true') {\n                my_delete($work_data_url);\n            } else {\n                if (file_exists($work_data_url)) {\n                    rename($work_data_url, $new_dir);\n                }\n            }\n\n            // Gets calendar_id from student_publication_assigment\n            $sql = \"SELECT add_to_calendar FROM $TSTDPUBASG\n                    WHERE c_id = $course_id AND publication_id = $id\";\n            $res = Database::query($sql);\n            $calendar_id = Database::fetch_row($res);\n\n            // delete from agenda if it exists\n            if (!empty($calendar_id[0])) {\n                $sql = \"DELETE FROM $t_agenda\n                        WHERE c_id = $course_id AND id = '\".$calendar_id[0].\"'\";\n                Database::query($sql);\n            }\n            $sql = \"DELETE FROM $TSTDPUBASG\n                    WHERE c_id = $course_id AND publication_id = $id\";\n            Database::query($sql);\n\n            Skill::deleteSkillsFromItem($id, ITEM_TYPE_STUDENT_PUBLICATION);\n\n            Event::addEvent(\n                LOG_WORK_DIR_DELETE,\n                LOG_WORK_DATA,\n                [\n                    'id' => $work_data['id'],\n                    'url' => $work_data['url'],\n                    'title' => $work_data['title'],\n                ],\n                null,\n                api_get_user_id(),\n                api_get_course_int_id(),\n                $sessionId\n            );\n\n            $linkInfo = GradebookUtils::isResourceInCourseGradebook(\n                api_get_course_id(),\n                3,\n                $id,\n                api_get_session_id()\n            );\n            $link_id = $linkInfo['id'];\n            if ($linkInfo !== false) {\n                GradebookUtils::remove_resource_from_course_gradebook($link_id);\n            }\n\n            return true;\n        }\n    }\n}\n\n/**\n * Get the path of a document in the student_publication table (path relative to the course directory).\n *\n * @param int $id\n *\n * @return string Path (or -1 on error)\n */\nfunction get_work_path($id)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $course_id = api_get_course_int_id();\n    $sql = 'SELECT url FROM '.$table.'\n            WHERE c_id = '.$course_id.' AND id='.(int) $id;\n    $res = Database::query($sql);\n    if (Database::num_rows($res)) {\n        $row = Database::fetch_array($res);\n\n        return $row['url'];\n    }\n\n    return -1;\n}\n\n/**\n * Update the url of a work in the student_publication table.\n *\n * @param int    $id        of the work to update\n * @param string $new_path  Destination directory where the work has been moved (must end with a '/')\n * @param int    $parent_id\n *\n * @return mixed Int -1 on error, sql query result on success\n */\nfunction updateWorkUrl($id, $new_path, $parent_id)\n{\n    if (empty($id)) {\n        return -1;\n    }\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $course_id = api_get_course_int_id();\n    $id = (int) $id;\n    $parent_id = (int) $parent_id;\n\n    $sql = \"SELECT * FROM $table\n            WHERE c_id = $course_id AND id = $id\";\n    $res = Database::query($sql);\n    if (Database::num_rows($res) != 1) {\n        return -1;\n    } else {\n        $row = Database::fetch_array($res);\n        $filename = basename($row['url']);\n        $new_url = $new_path.$filename;\n        $new_url = Database::escape_string($new_url);\n\n        $sql = \"UPDATE $table SET\n                   url = '$new_url',\n                   parent_id = '$parent_id'\n                WHERE c_id = $course_id AND id = $id\";\n\n        return Database::query($sql);\n    }\n}\n\n/**\n * Update the url of a dir in the student_publication table.\n *\n * @param array  $work_data work original data\n * @param string $newPath   Example: \"folder1\"\n *\n * @return bool\n */\nfunction updateDirName($work_data, $newPath)\n{\n    $course_id = $work_data['c_id'];\n    $work_id = (int) ($work_data['iid']);\n    $oldPath = $work_data['url'];\n    $originalNewPath = Database::escape_string($newPath);\n    $newPath = Database::escape_string($newPath);\n    $newPath = api_replace_dangerous_char($newPath);\n    $newPath = disable_dangerous_file($newPath);\n\n    if ($oldPath == '/'.$newPath) {\n        return true;\n    }\n\n    if (!empty($newPath)) {\n        $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n        $sql = \"UPDATE $table SET\n                    title = '\".$originalNewPath.\"'\n                WHERE\n                    c_id = $course_id AND\n                    iid = $work_id\";\n        Database::query($sql);\n    }\n}\n\n/**\n * returns all the javascript that is required for easily\n * validation when you create a work\n * this goes into the $htmlHeadXtra[] array.\n */\nfunction to_javascript_work()\n{\n    return '<script>\n        function updateDocumentTitle(value) {\n            var temp = value.indexOf(\"/\");\n            //linux path\n            if(temp != -1){\n                temp=value.split(\"/\");\n            } else {\n                temp=value.split(\"\\\\\\\");\n            }\n\n            var fullFilename = temp[temp.length - 1];\n            var baseFilename = fullFilename;\n\n            // get file extension\n            var fileExtension = \"\";\n            if (fullFilename.match(/\\..+/)) {\n                fileInfo = fullFilename.match(/(.*)\\.([^.]+)$/);\n                if (fileInfo.length > 1) {\n                    fileExtension = \".\"+fileInfo[fileInfo.length - 1];\n                    baseFilename = fileInfo[fileInfo.length - 2];\n                }\n            }\n\n            document.getElementById(\"file_upload\").value = baseFilename;\n            document.getElementById(\"file_extension\").value = fileExtension;\n            $(\"#contains_file_id\").attr(\"value\", 1);\n        }\n        function setFocus() {\n            $(\"#work_title\").focus();\n        }\n\n        $(function() {\n            setFocus();\n            var checked = $(\"#expiry_date\").attr(\"checked\");\n            if (checked) {\n                $(\"#option2\").show();\n            } else {\n                $(\"#option2\").hide();\n            }\n\n            var checkedEndDate = $(\"#end_date\").attr(\"checked\");\n            if (checkedEndDate) {\n                $(\"#option3\").show();\n                $(\"#ends_on\").attr(\"checked\", true);\n            } else {\n                $(\"#option3\").hide();\n                $(\"#ends_on\").attr(\"checked\", false);\n            }\n\n            $(\"#expiry_date\").click(function() {\n                $(\"#option2\").toggle();\n            });\n\n            $(\"#end_date\").click(function() {\n                $(\"#option3\").toggle();\n            });\n        });\n    </script>';\n}\n\n/**\n * Gets the id of a student publication with a given path.\n *\n * @param string $path\n *\n * @return true if is found / false if not found\n */\n// TODO: The name of this function does not fit with the kind of information it returns.\n// Maybe check_work_id() or is_work_id()?\nfunction get_work_id($path)\n{\n    $TBL_STUDENT_PUBLICATION = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $TBL_PROP_TABLE = Database::get_course_table(TABLE_ITEM_PROPERTY);\n    $course_id = api_get_course_int_id();\n    $path = Database::escape_string($path);\n\n    if (api_is_allowed_to_edit()) {\n        $sql = \"SELECT work.id\n                FROM $TBL_STUDENT_PUBLICATION AS work, $TBL_PROP_TABLE AS props\n                WHERE\n                    props.c_id = $course_id AND\n                    work.c_id = $course_id AND\n                    props.tool='work' AND\n                    work.id=props.ref AND\n                    work.url LIKE 'work/\".$path.\"%' AND\n                    work.filetype='file' AND\n                    props.visibility<>'2'\";\n    } else {\n        $sql = \"SELECT work.id\n                FROM $TBL_STUDENT_PUBLICATION AS work, $TBL_PROP_TABLE AS props\n                WHERE\n                    props.c_id = $course_id AND\n                    work.c_id = $course_id AND\n                    props.tool='work' AND\n                    work.id=props.ref AND\n                    work.url LIKE 'work/\".$path.\"%' AND\n                    work.filetype='file' AND\n                    props.visibility<>'2' AND\n                    props.lastedit_user_id = '\".api_get_user_id().\"'\";\n    }\n    $result = Database::query($sql);\n    $num_rows = Database::num_rows($result);\n\n    if ($result && $num_rows > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * @param int $work_id\n * @param int $onlyMeUserId show only my works\n * @param int $notMeUserId  show works from everyone except me\n *\n * @return int\n */\nfunction get_count_work($work_id, $onlyMeUserId = null, $notMeUserId = null)\n{\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $iprop_table = Database::get_course_table(TABLE_ITEM_PROPERTY);\n    $user_table = Database::get_main_table(TABLE_MAIN_USER);\n\n    $is_allowed_to_edit = api_is_allowed_to_edit(null, true) || api_is_coach();\n    $session_id = api_get_session_id();\n    $condition_session = api_get_session_condition(\n        $session_id,\n        true,\n        false,\n        'work.session_id'\n    );\n\n    $group_id = api_get_group_id();\n    $course_info = api_get_course_info();\n    $course_id = $course_info['real_id'];\n    $work_id = (int) $work_id;\n\n    $groupIid = 0;\n    if ($group_id) {\n        $groupInfo = GroupManager::get_group_properties($group_id);\n        if ($groupInfo && isset($groupInfo['iid'])) {\n            $groupIid = (int) $groupInfo['iid'];\n        }\n    }\n\n    if (!empty($group_id)) {\n        // set to select only messages posted by the user's group\n        $extra_conditions = \" work.post_group_id = '\".$groupIid.\"' \";\n    } else {\n        $extra_conditions = \" (work.post_group_id = '0' or work.post_group_id IS NULL) \";\n    }\n\n    if ($is_allowed_to_edit) {\n        $extra_conditions .= ' AND work.active IN (0, 1) ';\n    } else {\n        $extra_conditions .= ' AND work.active IN (0, 1) AND accepted = 1';\n        if (isset($course_info['show_score']) && $course_info['show_score'] == 1) {\n            $extra_conditions .= \" AND work.user_id = \".api_get_user_id().\" \";\n        } else {\n            $extra_conditions .= '';\n        }\n    }\n\n    $extra_conditions .= \" AND parent_id  = \".$work_id.\"  \";\n    $where_condition = null;\n    if (!empty($notMeUserId)) {\n        $where_condition .= \" AND u.user_id <> \".intval($notMeUserId);\n    }\n\n    if (!empty($onlyMeUserId)) {\n        $where_condition .= \" AND u.user_id =  \".intval($onlyMeUserId);\n    }\n\n    $sql = \"SELECT count(*) as count\n            FROM $iprop_table prop\n            INNER JOIN $work_table work\n            ON (\n                prop.ref = work.id AND\n                prop.c_id = $course_id AND\n                prop.tool='work' AND\n                prop.visibility <> 2 AND\n                work.c_id = $course_id\n            )\n            INNER JOIN $user_table u\n            ON (work.user_id = u.user_id)\n            WHERE $extra_conditions $where_condition $condition_session\";\n\n    $result = Database::query($sql);\n\n    $users_with_work = 0;\n    if (Database::num_rows($result)) {\n        $result = Database::fetch_array($result);\n        $users_with_work = $result['count'];\n    }\n\n    return $users_with_work;\n}\n\n/**\n * @param int    $start\n * @param int    $limit\n * @param string $column\n * @param string $direction\n * @param string $where_condition\n * @param bool   $getCount\n *\n * @return array\n */\nfunction getWorkListStudent(\n    $start,\n    $limit,\n    $column,\n    $direction,\n    $where_condition,\n    $getCount = false\n) {\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $workTableAssignment = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n    $courseInfo = api_get_course_info();\n    $course_id = $courseInfo['real_id'];\n    $session_id = api_get_session_id();\n    $condition_session = api_get_session_condition($session_id);\n    $group_id = api_get_group_id();\n    $userId = api_get_user_id();\n\n    $isDrhOfCourse = CourseManager::isUserSubscribedInCourseAsDrh(\n        $userId,\n        $courseInfo\n    );\n\n    if (!in_array($direction, ['asc', 'desc'])) {\n        $direction = 'desc';\n    }\n    if (!empty($where_condition)) {\n        $where_condition = ' AND '.$where_condition;\n    }\n\n    $column = !empty($column) ? Database::escape_string($column) : 'sent_date';\n    $start = (int) $start;\n    $limit = (int) $limit;\n\n    $groupIid = 0;\n    if ($group_id) {\n        $groupInfo = GroupManager::get_group_properties($group_id);\n        if ($groupInfo) {\n            $groupIid = (int) $groupInfo['iid'];\n        }\n    }\n\n    if (!empty($groupIid)) {\n        $group_query = \" WHERE w.c_id = $course_id AND post_group_id = $groupIid\";\n        $subdirs_query = 'AND parent_id = 0';\n    } else {\n        $group_query = \" WHERE w.c_id = $course_id AND (post_group_id = '0' or post_group_id is NULL)  \";\n        $subdirs_query = 'AND parent_id = 0';\n    }\n\n    $active_condition = ' AND active IN (1, 0)';\n\n    if ($getCount) {\n        $select = 'SELECT count(w.id) as count ';\n    } else {\n        $select = 'SELECT w.*, a.expires_on, expires_on, ends_on, enable_qualification ';\n    }\n\n    $sql = \"$select\n            FROM $workTable w\n            LEFT JOIN $workTableAssignment a\n            ON (a.publication_id = w.id AND a.c_id = w.c_id)\n                $group_query\n                $subdirs_query\n                $active_condition\n                $condition_session\n                $where_condition\n            \";\n\n    $sql .= \" ORDER BY `$column` $direction \";\n\n    if (!empty($start) && !empty($limit)) {\n        $sql .= \" LIMIT $start, $limit\";\n    }\n\n    $result = Database::query($sql);\n\n    if ($getCount) {\n        $row = Database::fetch_array($result);\n\n        return $row['count'];\n    }\n\n    $works = [];\n    $url = api_get_path(WEB_CODE_PATH).'work/work_list.php?'.api_get_cidreq();\n    if ($isDrhOfCourse) {\n        $url = api_get_path(WEB_CODE_PATH).'work/work_list_all.php?'.api_get_cidreq();\n    }\n\n    $urlOthers = api_get_path(WEB_CODE_PATH).'work/work_list_others.php?'.api_get_cidreq().'&id=';\n    while ($work = Database::fetch_array($result, 'ASSOC')) {\n        $isSubscribed = userIsSubscribedToWork($userId, $work['id'], $course_id);\n        if ($isSubscribed == false) {\n            continue;\n        }\n\n        $visibility = api_get_item_visibility($courseInfo, 'work', $work['id'], $session_id);\n\n        if ($visibility != 1) {\n            continue;\n        }\n\n        $work['type'] = Display::return_icon('work.png');\n        $work['expires_on'] = empty($work['expires_on']) ? null : api_get_local_time($work['expires_on']);\n\n        if (empty($work['title'])) {\n            $work['title'] = basename($work['url']);\n        }\n\n        $whereCondition = \" AND u.user_id = $userId \";\n\n        $workList = get_work_user_list(\n            0,\n            1000,\n            null,\n            null,\n            $work['id'],\n            $whereCondition\n        );\n\n        $count = getTotalWorkComment($workList, $courseInfo);\n        $lastWork = getLastWorkStudentFromParentByUser($userId, $work, $courseInfo);\n\n        if (!is_null($count) && !empty($count)) {\n            $urlView = api_get_path(WEB_CODE_PATH).'work/view.php?id='.$lastWork['id'].'&'.api_get_cidreq();\n\n            $feedback = '&nbsp;'.Display::url(\n                Display::returnFontAwesomeIcon('comments-o'),\n                $urlView,\n                ['title' => get_lang('View')]\n            );\n\n            $work['feedback'] = ' '.Display::label($count.' '.get_lang('Feedback'), 'info').$feedback;\n        }\n\n        if (!empty($lastWork)) {\n            $work['last_upload'] = (!empty($lastWork['qualification'])) ? $lastWork['qualification_rounded'].' - ' : '';\n            $work['last_upload'] .= api_get_local_time($lastWork['sent_date']);\n        }\n\n        $work['title'] = Display::url($work['title'], $url.'&id='.$work['id']);\n        $work['others'] = Display::url(\n            Display::return_icon('group.png', get_lang('Others')),\n            $urlOthers.$work['id']\n        );\n        $works[] = $work;\n    }\n\n    return $works;\n}\n\n/**\n * @param int    $start\n * @param int    $limit\n * @param string $column\n * @param string $direction\n * @param string $where_condition\n * @param bool   $getCount\n * @param int    $withResults\n *\n * @return array\n */\nfunction getAllWorkListStudent(\n    $start,\n    $limit,\n    $column,\n    $direction,\n    $where_condition,\n    $getCount = false,\n    $withResults = 1\n) {\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $workTableAssignment = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n    $userId = api_get_user_id();\n\n    if (empty($userId)) {\n        return [];\n    }\n\n    $courses = CourseManager::get_courses_list_by_user_id($userId, true);\n\n    if (!empty($where_condition)) {\n        $where_condition = ' AND '.$where_condition;\n    }\n\n    if (!in_array($direction, ['asc', 'desc'])) {\n        $direction = 'desc';\n    }\n\n    $column = !empty($column) ? Database::escape_string($column) : 'sent_date';\n    $start = (int) $start;\n    $limit = (int) $limit;\n    $courseQuery = [];\n    $courseList = [];\n    foreach ($courses as $course) {\n        $course_id = $course['real_id'];\n        $courseInfo = api_get_course_info_by_id($course_id);\n        $session_id = isset($course['session_id']) ? $course['session_id'] : 0;\n        $conditionSession = api_get_session_condition($session_id, true, false, 'w.session_id');\n        $parentCondition = '';\n        if ($withResults) {\n            $parentCondition = 'AND ww.parent_id is NOT NULL';\n        }\n        $courseQuery[] = \" (w.c_id = $course_id $conditionSession $parentCondition )\";\n        $courseList[$course_id] = $courseInfo;\n    }\n\n    $courseQueryToString = implode(' OR ', $courseQuery);\n\n    if ($getCount) {\n        if (empty($courseQuery)) {\n            return 0;\n        }\n        $select = 'SELECT count(DISTINCT(w.id)) as count ';\n    } else {\n        if (empty($courseQuery)) {\n            return [];\n        }\n        $select = 'SELECT DISTINCT\n                        w.title,\n                        w.url,\n                        w.id,\n                        w.c_id,\n                        w.session_id,\n                        a.expires_on,\n                        a.ends_on,\n                        a.enable_qualification,\n                        w.qualification,\n                        a.publication_id';\n    }\n\n    $checkSentWork = \" LEFT JOIN $workTable ww\n                       ON (ww.c_id = w.c_id AND ww.parent_id = w.id AND ww.user_id = $userId ) \";\n    $where = ' AND ww.url IS NULL ';\n    $expirationCondition = \" AND (a.expires_on IS NULL OR a.expires_on > '\".api_get_utc_datetime().\"') \";\n    if ($withResults) {\n        $where = '';\n        $checkSentWork = \" LEFT JOIN $workTable ww\n                           ON (\n                            ww.c_id = w.c_id AND\n                            ww.parent_id = w.id AND\n                            ww.user_id = $userId AND\n                            a.expires_on IS NULL AND\n                            ww.parent_id is NOT NULL\n                        ) \";\n        $expirationCondition = \" OR (\n                ww.parent_id is NULL AND\n                a.expires_on IS NOT NULL AND\n                a.expires_on < '\".api_get_utc_datetime().\"'\n            ) \";\n    }\n\n    $sql = \"$select\n            FROM $workTable w\n            LEFT JOIN $workTableAssignment a\n            ON (a.publication_id = w.id AND a.c_id = w.c_id)\n            $checkSentWork\n            WHERE\n                w.parent_id = 0 AND\n                w.active IN (1, 0) AND\n                ($courseQueryToString)\n                $where_condition\n                $expirationCondition\n                $where\n            \";\n\n    $sql .= \" ORDER BY `$column` $direction \";\n\n    if (!empty($start) && !empty($limit)) {\n        $sql .= \" LIMIT $start, $limit\";\n    }\n\n    $result = Database::query($sql);\n\n    if ($getCount) {\n        $row = Database::fetch_array($result);\n\n        if ($row) {\n            return (int) $row['count'];\n        }\n\n        return 0;\n    }\n\n    $works = [];\n    while ($work = Database::fetch_array($result, 'ASSOC')) {\n        $courseId = $work['c_id'];\n        $courseInfo = $courseList[$work['c_id']];\n        $courseCode = $courseInfo['code'];\n        $sessionId = $work['session_id'];\n\n        $cidReq = api_get_cidreq_params($courseCode, $sessionId);\n        $url = api_get_path(WEB_CODE_PATH).'work/work_list.php?'.$cidReq;\n        $isSubscribed = userIsSubscribedToWork($userId, $work['id'], $courseId);\n        if ($isSubscribed == false) {\n            continue;\n        }\n\n        $visibility = api_get_item_visibility($courseInfo, 'work', $work['id'], $sessionId);\n\n        if ($visibility != 1) {\n            continue;\n        }\n\n        $work['type'] = Display::return_icon('work.png');\n        $work['expires_on'] = empty($work['expires_on']) ? null : api_get_local_time($work['expires_on']);\n\n        if (empty($work['title'])) {\n            $work['title'] = basename($work['url']);\n        }\n\n        if ($withResults) {\n            $whereCondition = \" AND u.user_id = $userId \";\n            $workList = get_work_user_list(\n                0,\n                1000,\n                null,\n                null,\n                $work['id'],\n                $whereCondition,\n                null,\n                false,\n                $courseId,\n                $sessionId\n            );\n\n            $count = getTotalWorkComment($workList, $courseInfo);\n            $lastWork = getLastWorkStudentFromParentByUser($userId, $work, $courseInfo);\n\n            if (!is_null($count) && !empty($count)) {\n                $urlView = api_get_path(WEB_CODE_PATH).'work/view.php?id='.$lastWork['id'].'&'.$cidReq;\n\n                $feedback = '&nbsp;'.Display::url(\n                        Display::returnFontAwesomeIcon('comments-o'),\n                        $urlView,\n                        ['title' => get_lang('View')]\n                    );\n\n                $work['feedback'] = ' '.Display::label($count.' '.get_lang('Feedback'), 'info').$feedback;\n            }\n\n            if (!empty($lastWork)) {\n                $work['last_upload'] = (!empty($lastWork['qualification'])) ? $lastWork['qualification_rounded'].' - ' : '';\n                $work['last_upload'] .= api_get_local_time($lastWork['sent_date']);\n            }\n        }\n\n        $work['title'] = Display::url($work['title'], $url.'&id='.$work['id']);\n        $works[] = $work;\n    }\n\n    return $works;\n}\n\nfunction getWorkListTeacherQuery(\n    $courseId,\n    $sessionId,\n    $groupId,\n    $start,\n    $limit,\n    $column,\n    $direction,\n    $whereCondition,\n    $getCount = false\n): ?Statement {\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $workTableAssignment = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n\n    $condition_session = api_get_session_condition($sessionId);\n    $groupIid = 0;\n    if ($groupId) {\n        $groupInfo = GroupManager::get_group_properties($groupId);\n        $groupIid = $groupInfo['iid'];\n    }\n    $groupIid = (int) $groupIid;\n\n    $select = $getCount\n        ? \"count(w.id) as count\"\n        : \"w.*, a.expires_on, expires_on, ends_on, enable_qualification\";\n\n    $sql = \"SELECT $select\n        FROM $workTable w\n        LEFT JOIN $workTableAssignment a\n            ON (a.publication_id = w.id AND a.c_id = w.c_id)\n        WHERE\n            w.c_id = $courseId\n            $condition_session AND\n            active IN (0, 1) AND\n            parent_id = 0 AND\n            post_group_id = $groupIid\n            $whereCondition\n        ORDER BY `$column` $direction\";\n\n    if (!empty($start) && !empty($limit)) {\n        $sql .= \" LIMIT $start, $limit\";\n    }\n\n    return Database::query($sql);\n}\n\n/**\n * @return int|array\n */\nfunction getWorkListTeacherData(\n    $courseId,\n    $sessionId,\n    $groupId,\n    $start,\n    $limit,\n    $column,\n    $direction,\n    $whereCondition,\n    $getCount = false\n) {\n    $result = getWorkListTeacherQuery(\n        $courseId,\n        $sessionId,\n        $groupId,\n        $start,\n        $limit,\n        $column,\n        $direction,\n        $whereCondition,\n        $getCount\n    );\n\n    if ($getCount) {\n        $row = Database::fetch_array($result);\n\n        return (int) $row['count'];\n    }\n\n    $works = [];\n\n    while ($work = Database::fetch_array($result, 'ASSOC')) {\n        $workId = $work['id'];\n        $work['expires_on'] = empty($work['expires_on']) ? null : api_get_local_time($work['expires_on']);\n        $work['ends_on'] = empty($work['expires_on']) ? null : api_get_local_time($work['ends_on']);\n\n        $countUniqueAttempts = getUniqueStudentAttemptsTotal($workId, $groupId, $courseId, $sessionId);\n        $totalUsers = getStudentSubscribedToWork($workId, $courseId, $groupId, $sessionId, true);\n\n        $work['count_unique_attempts'] = $countUniqueAttempts;\n        $work['amount'] = Display::label(\n            \"$countUniqueAttempts/$totalUsers\",\n            'success'\n        );\n\n        if (empty($work['title'])) {\n            $work['title'] = basename($work['url']);\n        }\n\n        $work['sent_date'] = api_get_local_time($work['sent_date']);\n\n        $works[] = $work;\n    }\n\n    return $works;\n}\n\n/**\n * @param int    $start\n * @param int    $limit\n * @param string $column\n * @param string $direction\n * @param string $where_condition\n * @param bool   $getCount\n *\n * @return int|array\n */\nfunction getWorkListTeacher(\n    $start,\n    $limit,\n    $column,\n    $direction,\n    $where_condition,\n    $getCount = false,\n    $courseInfoParam = []\n) {\n    $courseInfo = api_get_course_info();\n    $course_id = api_get_course_int_id();\n    if (!empty($courseInfoParam)) {\n        $courseInfo = $courseInfoParam;\n        $course_id = $courseInfoParam['real_id'];\n    }\n\n    $session_id = api_get_session_id();\n    $group_id = api_get_group_id();\n\n    $is_allowed_to_edit = api_is_allowed_to_edit() || api_is_coach();\n    if (!in_array($direction, ['asc', 'desc'])) {\n        $direction = 'desc';\n    }\n    if (!empty($where_condition)) {\n        $where_condition = ' AND '.$where_condition;\n    }\n\n    $column = !empty($column) ? Database::escape_string($column) : 'sent_date';\n    $start = (int) $start;\n    $limit = (int) $limit;\n\n    // Get list from database\n    if (!$is_allowed_to_edit) {\n        return $getCount ? 0 : [];\n    }\n\n    $result = getWorkListTeacherData(\n        $course_id,\n        $session_id,\n        $group_id,\n        $start,\n        $limit,\n        $column,\n        $direction,\n        $where_condition,\n        $getCount\n    );\n\n    if (is_int($result)) {\n        return $result;\n    }\n\n    $url = api_get_path(WEB_CODE_PATH).'work/work_list_all.php?'.api_get_cidreq();\n    $blockEdition = api_get_configuration_value('block_student_publication_edition');\n\n    return array_map(\n        function (array $work) use ($courseInfo, $session_id, $blockEdition, $url) {\n            $workId = $work['id'];\n            $work['type'] = Display::return_icon('work.png');\n\n            $visibility = api_get_item_visibility($courseInfo, 'work', $workId, $session_id);\n\n            if ($visibility == 1) {\n                $icon = 'visible.png';\n                $text = get_lang('Visible');\n                $action = 'invisible';\n                $class = '';\n            } else {\n                $icon = 'invisible.png';\n                $text = get_lang('Invisible');\n                $action = 'visible';\n                $class = 'muted';\n            }\n\n            $visibilityLink = Display::url(\n                Display::return_icon($icon, $text),\n                api_get_path(WEB_CODE_PATH).\"work/work.php?id=$workId&action=$action&\".api_get_cidreq()\n            );\n\n            $work['title'] = Display::url($work['title'], $url.'&id='.$workId, ['class' => $class]);\n            $work['title'] .= ' '.Display::label(get_count_work($work['id']), 'success');\n\n            if ($blockEdition && !api_is_platform_admin()) {\n                $editLink = '';\n            } else {\n                $editLink = Display::url(\n                    Display::return_icon('edit.png', get_lang('Edit')),\n                    api_get_path(WEB_CODE_PATH).'work/edit_work.php?id='.$workId.'&'.api_get_cidreq()\n                );\n            }\n\n            $correctionLink = Display::url(\n                Display::return_icon('upload_package.png', get_lang('UploadCorrections')),\n                api_get_path(WEB_CODE_PATH).'work/upload_corrections.php?'.api_get_cidreq().'&id='.$workId\n            );\n\n            if ($work['count_unique_attempts'] > 0) {\n                $downloadLink = Display::url(\n                    Display::return_icon('save_pack.png', get_lang('Save')),\n                    api_get_path(WEB_CODE_PATH).\"work/downloadfolder.inc.php?id=$workId&\".api_get_cidreq()\n                );\n            } else {\n                $downloadLink = Display::url(\n                    Display::return_icon('save_pack_na.png', get_lang('Save')),\n                    '#'\n                );\n            }\n            // Remove Delete Work Button from action List\n            // Because removeXSS \"removes\" the onClick JS Event to do the action (See model.ajax.php - Line 1639)\n            // But still can use the another jqgrid button to remove works (trash icon)\n            //\n            // $deleteUrl = api_get_path(WEB_CODE_PATH).'work/work.php?id='.$workId.'&action=delete_dir&'.api_get_cidreq();\n            // $deleteLink = '<a href=\"#\" onclick=\"showConfirmationPopup(this, \\'' . $deleteUrl . '\\' ) \" >' .\n            //     Display::return_icon(\n            //         'delete.png',\n            //         get_lang('Delete'),\n            //         [],\n            //         ICON_SIZE_SMALL\n            //     ) . '</a>';\n\n            if (!api_is_allowed_to_edit()) {\n                // $deleteLink = null;\n                $editLink = null;\n            }\n            $work['actions'] = implode(PHP_EOL, [$visibilityLink, $correctionLink, $downloadLink, $editLink]);\n\n            return $work;\n        },\n        $result\n    );\n}\n\n/**\n * @param int    $start\n * @param int    $limit\n * @param string $column\n * @param string $direction\n * @param int    $workId\n * @param int    $studentId\n * @param string $whereCondition\n * @param bool   $getCount\n *\n * @return array\n */\nfunction get_work_user_list_from_documents(\n    $start,\n    $limit,\n    $column,\n    $direction,\n    $workId,\n    $studentId = null,\n    $whereCondition = '',\n    $getCount = false\n) {\n    if ($getCount) {\n        $select1 = ' SELECT count(u.user_id) as count ';\n        $select2 = ' SELECT count(u.user_id) as count ';\n    } else {\n        $select1 = ' SELECT DISTINCT\n                        u.firstname,\n                        u.lastname,\n                        u.user_id,\n                        w.title,\n                        w.parent_id,\n                        w.document_id document_id,\n                        w.id, qualification,\n                        qualificator_id,\n                        w.sent_date,\n                        w.contains_file,\n                        w.url,\n                        w.url_correction\n                    ';\n        $select2 = ' SELECT DISTINCT\n                        u.firstname, u.lastname,\n                        u.user_id,\n                        d.title,\n                        w.parent_id,\n                        d.id document_id,\n                        0,\n                        0,\n                        0,\n                        w.sent_date,\n                        w.contains_file,\n                        w.url,\n                        w.url_correction\n                    ';\n    }\n\n    $documentTable = Database::get_course_table(TABLE_DOCUMENT);\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $workRelDocument = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_DOCUMENT);\n    $userTable = Database::get_main_table(TABLE_MAIN_USER);\n\n    $courseId = api_get_course_int_id();\n    $sessionId = api_get_session_id();\n\n    if (empty($studentId)) {\n        $studentId = api_get_user_id();\n    }\n\n    $studentId = (int) $studentId;\n    $workId = (int) $workId;\n\n    $userCondition = \" AND u.user_id = $studentId \";\n    $sessionCondition = api_get_session_condition($sessionId, true, false, 'w.session_id');\n    $workCondition = \" AND w_rel.work_id = $workId\";\n    $workParentCondition = \" AND w.parent_id = $workId\";\n\n    $sql = \"(\n                $select1 FROM $userTable u\n                INNER JOIN $workTable w\n                ON (u.user_id = w.user_id AND w.active IN (0, 1) AND w.filetype = 'file')\n                WHERE\n                    w.c_id = $courseId\n                    $userCondition\n                    $sessionCondition\n                    $whereCondition\n                    $workParentCondition\n            ) UNION (\n                $select2 FROM $workTable w\n                INNER JOIN $workRelDocument w_rel\n                ON (w_rel.work_id = w.id AND w.active IN (0, 1) AND w_rel.c_id = w.c_id)\n                INNER JOIN $documentTable d\n                ON (w_rel.document_id = d.id AND d.c_id = w.c_id)\n                INNER JOIN $userTable u ON (u.user_id = $studentId)\n                WHERE\n                    w.c_id = $courseId\n                    $workCondition\n                    $sessionCondition AND\n                    d.id NOT IN (\n                        SELECT w.document_id id\n                        FROM $workTable w\n                        WHERE\n                            user_id = $studentId AND\n                            c_id = $courseId AND\n                            filetype = 'file' AND\n                            active IN (0, 1)\n                            $sessionCondition\n                            $workParentCondition\n                    )\n            )\";\n\n    $start = (int) $start;\n    $limit = (int) $limit;\n\n    $direction = in_array(strtolower($direction), ['desc', 'asc']) ? $direction : 'desc';\n    $column = Database::escape_string($column);\n\n    if ($getCount) {\n        $result = Database::query($sql);\n        $result = Database::fetch_array($result);\n\n        return $result['count'];\n    }\n\n    $sql .= \" ORDER BY `$column` $direction\";\n    $sql .= \" LIMIT $start, $limit\";\n\n    $result = Database::query($sql);\n\n    $currentUserId = api_get_user_id();\n    $work_data = get_work_data_by_id($workId);\n    $qualificationExists = false;\n    if (!empty($work_data['qualification']) && intval($work_data['qualification']) > 0) {\n        $qualificationExists = true;\n    }\n\n    $urlAdd = api_get_path(WEB_CODE_PATH).'work/upload_from_template.php?'.api_get_cidreq();\n    $urlEdit = api_get_path(WEB_CODE_PATH).'work/edit.php?'.api_get_cidreq();\n    $urlDelete = api_get_path(WEB_CODE_PATH).'work/work_list.php?action=delete&'.api_get_cidreq();\n    $urlView = api_get_path(WEB_CODE_PATH).'work/view.php?'.api_get_cidreq();\n    $urlDownload = api_get_path(WEB_CODE_PATH).'work/download.php?'.api_get_cidreq();\n\n    $correctionIcon = Display::return_icon(\n        'check-circle.png',\n        get_lang('Correction'),\n        null,\n        ICON_SIZE_SMALL\n    );\n    $editIcon = Display::return_icon('edit.png', get_lang('Edit'));\n    $addIcon = Display::return_icon('add.png', get_lang('Add'));\n    $deleteIcon = Display::return_icon('delete.png', get_lang('Delete'));\n    $viewIcon = Display::return_icon('default.png', get_lang('View'));\n    $saveIcon = Display::return_icon(\n        'save.png',\n        get_lang('Save'),\n        [],\n        ICON_SIZE_SMALL\n    );\n    $allowEdition = api_get_course_setting('student_delete_own_publication') == 1;\n    $cidReq = api_get_cidreq();\n    $workList = [];\n    while ($row = Database::fetch_array($result, 'ASSOC')) {\n        $userId = $row['user_id'];\n        $documentId = $row['document_id'];\n        $itemId = $row['id'];\n        $addLinkShowed = false;\n\n        if (empty($documentId)) {\n            $url = $urlEdit.'&item_id='.$row['id'].'&id='.$workId;\n            $editLink = Display::url($editIcon, $url);\n            if (1 != $allowEdition) {\n                $editLink = null;\n            }\n        } else {\n            $documentToWork = getDocumentToWorkPerUser($documentId, $workId, $courseId, $sessionId, $userId);\n\n            if (empty($documentToWork)) {\n                $url = $urlAdd.'&document_id='.$documentId.'&id='.$workId;\n                $editLink = Display::url($addIcon, $url);\n                $addLinkShowed = true;\n            } else {\n                $row['title'] = $documentToWork['title'];\n                $row['sent_date'] = $documentToWork['sent_date'];\n                $newWorkId = $documentToWork['id'];\n                $url = $urlEdit.'&item_id='.$newWorkId.'&id='.$workId;\n                $editLink = Display::url($editIcon, $url);\n\n                if (1 != $allowEdition) {\n                    $editLink = '';\n                }\n            }\n        }\n\n        $downloadLink = '';\n        // If URL is present then there's a file to download keep BC.\n        if ($row['contains_file'] || !empty($row['url'])) {\n            $downloadLink = Display::url($saveIcon, $urlDownload.'&id='.$row['id']).'&nbsp;';\n        }\n\n        $viewLink = '';\n        if (!empty($itemId)) {\n            $viewLink = Display::url($viewIcon, $urlView.'&id='.$itemId);\n        }\n\n        $deleteLink = '';\n        if ($allowEdition == 1 && !empty($itemId)) {\n            $deleteLink = Display::url($deleteIcon, $urlDelete.'&item_id='.$itemId.'&id='.$workId);\n        }\n\n        $row['type'] = null;\n        if ($qualificationExists) {\n            if (empty($row['qualificator_id'])) {\n                $status = Display::label(get_lang('NotRevised'), 'warning');\n            } else {\n                $status = Display::label(get_lang('Revised'), 'success');\n            }\n            $row['qualificator_id'] = $status;\n        }\n\n        $hasCorrection = '';\n        if (!empty($row['url_correction'])) {\n            $hasCorrection = '&nbsp;'.Display::url(\n                $correctionIcon,\n                api_get_path(WEB_CODE_PATH).'work/download.php?id='.$itemId.'&'.$cidReq.'&correction=1'\n            );\n        }\n\n        $qualification_string = '';\n        if ($qualificationExists) {\n            if ($row['qualification'] == '') {\n                $qualification_string = Display::label('-');\n            } else {\n                $qualification_string = formatWorkScore($row['qualification'], $work_data['qualification']);\n            }\n        }\n\n        $row['qualification'] = $qualification_string.$hasCorrection;\n\n        /*if (!empty($row['qualification'])) {\n            $row['qualification'] = Display::label($row['qualification'], 'info');\n        }*/\n\n        if (!empty($row['sent_date'])) {\n            $row['sent_date'] = Display::dateToStringAgoAndLongDate($row['sent_date']);\n        }\n\n        if ($userId == $currentUserId) {\n            $row['actions'] = $downloadLink.$viewLink.$editLink.$deleteLink;\n        }\n\n        if ($addLinkShowed) {\n            $row['qualification'] = '';\n            $row['qualificator_id'] = '';\n        }\n\n        $workList[] = $row;\n    }\n\n    return $workList;\n}\n\n/**\n * @param int    $start\n * @param int    $limit\n * @param int    $column\n * @param string $direction\n * @param int    $work_id\n * @param string $whereCondition\n * @param int    $studentId\n * @param bool   $getCount\n * @param int    $courseId\n * @param int    $sessionId\n *\n * @return array\n */\nfunction get_work_user_list(\n    $start,\n    $limit,\n    $column,\n    $direction,\n    $work_id,\n    $whereCondition = '',\n    $studentId = null,\n    $getCount = false,\n    $courseId = 0,\n    $sessionId = 0,\n    $shortTitle = true\n) {\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $user_table = Database::get_main_table(TABLE_MAIN_USER);\n\n    $session_id = $sessionId ? (int) $sessionId : api_get_session_id();\n    $group_id = api_get_group_id();\n    $course_info = api_get_course_info();\n    $course_info = empty($course_info) ? api_get_course_info_by_id($courseId) : $course_info;\n    $course_id = isset($course_info['real_id']) ? $course_info['real_id'] : $courseId;\n\n    $work_id = (int) $work_id;\n    $start = (int) $start;\n    $limit = (int) $limit;\n\n    $column = !empty($column) ? Database::escape_string($column) : 'sent_date';\n    $compilation = null;\n    if (api_get_configuration_value('allow_compilatio_tool')) {\n        $compilation = new Compilatio();\n    }\n\n    if (!in_array($direction, ['asc', 'desc'])) {\n        $direction = 'desc';\n    }\n\n    $work_data = get_work_data_by_id($work_id, $courseId, $sessionId);\n    $is_allowed_to_edit = api_is_allowed_to_edit() || api_is_coach();\n    $condition_session = api_get_session_condition(\n        $session_id,\n        true,\n        false,\n        'work.session_id'\n    );\n\n    $locked = api_resource_is_locked_by_gradebook(\n        $work_id,\n        LINK_STUDENTPUBLICATION,\n        $course_info['code']\n    );\n\n    $isDrhOfCourse = CourseManager::isUserSubscribedInCourseAsDrh(\n        api_get_user_id(),\n        $course_info\n    );\n\n    $isDrhOfSession = !empty(SessionManager::getSessionFollowedByDrh(api_get_user_id(), $session_id));\n\n    $groupIid = 0;\n    if ($group_id) {\n        $groupInfo = GroupManager::get_group_properties($group_id);\n        if ($groupInfo) {\n            $groupIid = $groupInfo['iid'];\n        }\n    }\n\n    if (!empty($work_data)) {\n        if (!empty($group_id)) {\n            // set to select only messages posted by the user's group\n            $extra_conditions = \" work.post_group_id = '\".$groupIid.\"' \";\n        } else {\n            $extra_conditions = \" (work.post_group_id = '0' OR work.post_group_id is NULL) \";\n        }\n\n        if ($is_allowed_to_edit || $isDrhOfCourse || $isDrhOfSession) {\n            $extra_conditions .= ' AND work.active IN (0, 1) ';\n        } else {\n            if (isset($course_info['show_score']) &&\n                1 == $course_info['show_score']\n            ) {\n                $extra_conditions .= ' AND (u.user_id = '.api_get_user_id().' AND work.active IN (0, 1)) ';\n            } else {\n                $extra_conditions .= ' AND work.active IN (0, 1) ';\n            }\n        }\n\n        $extra_conditions .= \" AND parent_id  = $work_id \";\n\n        $select = 'SELECT DISTINCT\n                        u.user_id,\n                        work.id as id,\n                        title as title,\n                        description,\n                        url,\n                        sent_date,\n                        contains_file,\n                        has_properties,\n                        view_properties,\n                        qualification,\n                        weight,\n                        allow_text_assignment,\n                        u.firstname,\n                        u.lastname,\n                        u.username,\n                        parent_id,\n                        accepted,\n                        qualificator_id,\n                        url_correction,\n                        title_correction\n                        ';\n        if ($getCount) {\n            $select = 'SELECT DISTINCT count(u.user_id) as count ';\n        }\n\n        $work_assignment = get_work_assignment_by_id($work_id, $courseId);\n\n        if (!empty($studentId)) {\n            $studentId = (int) $studentId;\n            $whereCondition .= \" AND u.user_id = $studentId \";\n        }\n\n        $sql = \" $select\n                FROM $work_table work\n                INNER JOIN $user_table u\n                ON (work.user_id = u.user_id)\n                WHERE\n                    work.c_id = $course_id AND\n                    $extra_conditions\n                    $whereCondition\n                    $condition_session\n                    AND u.status != \".INVITEE.\"\n                ORDER BY `$column` $direction\";\n\n        if (!empty($start) && !empty($limit)) {\n            $sql .= \" LIMIT $start, $limit\";\n        }\n        $result = Database::query($sql);\n        $works = [];\n\n        if ($getCount) {\n            $work = Database::fetch_array($result, 'ASSOC');\n            if ($work) {\n                return (int) $work['count'];\n            }\n\n            return 0;\n        }\n\n        $url = api_get_path(WEB_CODE_PATH).'work/';\n        $unoconv = api_get_configuration_value('unoconv.binaries');\n        $loadingText = addslashes(get_lang('Loading'));\n        $uploadedText = addslashes(get_lang('Uploaded'));\n        $failsUploadText = addslashes(get_lang('UplNoFileUploaded'));\n        $failsUploadIcon = Display::return_icon(\n            'closed-circle.png',\n            '',\n            [],\n            ICON_SIZE_TINY\n        );\n        $saveIcon = Display::return_icon(\n            'save.png',\n            get_lang('Save'),\n            [],\n            ICON_SIZE_SMALL\n        );\n\n        $correctionIcon = Display::return_icon(\n            'check-circle.png',\n            get_lang('Correction'),\n            null,\n            ICON_SIZE_SMALL\n        );\n\n        $correctionIconSmall = Display::return_icon(\n            'check-circle.png',\n            get_lang('Correction'),\n            null,\n            ICON_SIZE_TINY\n        );\n\n        $rateIcon = Display::return_icon(\n            'rate_work.png',\n            get_lang('CorrectAndRate'),\n            [],\n            ICON_SIZE_SMALL\n        );\n\n        $blockEdition = api_get_configuration_value('block_student_publication_edition');\n        $blockScoreEdition = api_get_configuration_value('block_student_publication_score_edition');\n        $loading = Display::returnFontAwesomeIcon('spinner', null, true, 'fa-spin');\n        $cidReq = api_get_cidreq();\n\n        $qualification_exists = false;\n        if (!empty($work_data['qualification']) &&\n            intval($work_data['qualification']) > 0\n        ) {\n            $qualification_exists = true;\n        }\n\n        while ($work = Database::fetch_array($result, 'ASSOC')) {\n            $item_id = $work['id'];\n            $dbTitle = $work['title'];\n            // Get the author ID for that document from the item_property table\n            $is_author = false;\n            $can_read = false;\n            $owner_id = $work['user_id'];\n\n            /* Because a bug found when saving items using the api_item_property_update()\n               the field $item_property_data['insert_user_id'] is not reliable. */\n            if (!$is_allowed_to_edit && $owner_id == api_get_user_id()) {\n                $is_author = true;\n            }\n\n            if ($course_info['show_score'] == 0) {\n                $can_read = true;\n            }\n\n            $qualification_string = '';\n            if ($qualification_exists) {\n                if ($work['qualification'] == '') {\n                    $qualification_string = Display::label('-');\n                } else {\n                    if (empty($work['qualificator_id'])) {\n                        $finalScore = '?? / '.$work_data['qualification'];\n                        $qualification_string = Display::label($finalScore, 'warning');\n                    } else {\n                        $qualification_string = formatWorkScore($work['qualification'], $work_data['qualification']);\n                    }\n                }\n            }\n\n            $work['qualification_score'] = $work['qualification'];\n            $add_string = '';\n            $time_expires = '';\n            if (!empty($work_assignment['expires_on'])) {\n                $time_expires = api_strtotime(\n                    $work_assignment['expires_on'],\n                    'UTC'\n                );\n            }\n\n            if (!empty($work_assignment['expires_on']) &&\n                !empty($time_expires) && ($time_expires < api_strtotime($work['sent_date'], 'UTC'))) {\n                $add_string = Display::label(get_lang('Expired'), 'important').' - ';\n            }\n\n            if (($can_read && $work['accepted'] == '1') ||\n                ($is_author && in_array($work['accepted'], ['1', '0'])) ||\n                ($is_allowed_to_edit || api_is_drh())\n            ) {\n                // Firstname, lastname, username\n                $work['fullname'] = Display::div(\n                    api_get_person_name($work['firstname'], $work['lastname']),\n                    ['class' => 'work-name']\n                );\n                // Title\n                $work['title_clean'] = $work['title'];\n                $work['title'] = Security::remove_XSS($work['title']);\n                if (strlen($work['title']) > 30 && $shortTitle) {\n                    $short_title = substr($work['title'], 0, 27).'...';\n                    $work['title'] = Display::span($short_title, ['class' => 'work-title', 'title' => $work['title']]);\n                } else {\n                    $work['title'] = Display::div($work['title'], ['class' => 'work-title']);\n                }\n\n                // Type.\n                $work['type'] = DocumentManager::build_document_icon_tag('file', $work['url']);\n\n                // File name.\n                $linkToDownload = '';\n                // If URL is present then there's a file to download keep BC.\n                if ($work['contains_file'] || !empty($work['url'])) {\n                    $linkToDownload = '<a href=\"'.$url.'download.php?id='.$item_id.'&'.$cidReq.'\">'.$saveIcon.'</a> ';\n                }\n\n                $feedback = '';\n                $count = getWorkCommentCount($item_id, $course_info);\n                if (!is_null($count) && !empty($count)) {\n                    if ($qualification_exists) {\n                        $feedback .= ' ';\n                    }\n                    $feedback .= Display::url(\n                        $count.' '.Display::returnFontAwesomeIcon('comments-o'),\n                        $url.'view.php?'.api_get_cidreq().'&id='.$item_id\n                    );\n                }\n\n                $correction = '';\n                $hasCorrection = '';\n                if (!empty($work['url_correction'])) {\n                    $hasCorrection = Display::url(\n                        $correctionIcon,\n                        api_get_path(WEB_CODE_PATH).'work/download.php?id='.$item_id.'&'.$cidReq.'&correction=1'\n                    );\n                }\n\n                if ($qualification_exists) {\n                    $work['qualification'] = $qualification_string.$feedback;\n                } else {\n                    $work['qualification'] = $qualification_string.$feedback.$hasCorrection;\n                }\n\n                $work['qualification_only'] = $qualification_string;\n\n                // Date.\n                $work_date = api_get_local_time($work['sent_date']);\n                $date = date_to_str_ago($work['sent_date']).' '.$work_date;\n                $work['formatted_date'] = $work_date.' '.$add_string;\n                $work['expiry_note'] = $add_string;\n                $work['sent_date_from_db'] = $work['sent_date'];\n                $work['sent_date'] = '<div class=\"work-date\" title=\"'.$date.'\">'.\n                    $add_string.' '.Display::dateToStringAgoAndLongDate($work['sent_date']).'</div>';\n                $work['status'] = $hasCorrection;\n                $work['has_correction'] = $hasCorrection;\n\n                // Actions.\n                $action = '';\n                if (api_is_allowed_to_edit()) {\n                    if ($blockScoreEdition && !api_is_platform_admin() && !empty($work['qualification_score'])) {\n                        $rateLink = '';\n                    } else {\n                        $rateLink = '<a href=\"'.$url.'view.php?'.$cidReq.'&id='.$item_id.'\" title=\"'.get_lang('View').'\">'.\n                            $rateIcon.'</a> ';\n                    }\n                    $action .= $rateLink;\n\n                    if ($unoconv && empty($work['contains_file'])) {\n                        $action .= '<a\n                            href=\"'.$url.'work_list_all.php?'.$cidReq.'&id='.$work_id.'&action=export_to_doc&item_id='.$item_id.'\"\n                            title=\"'.get_lang('ExportToDoc').'\" >'.\n                            Display::return_icon('export_doc.png', get_lang('ExportToDoc'), [], ICON_SIZE_SMALL).'</a> ';\n                    }\n\n                    $alreadyUploaded = '';\n                    if (!empty($work['url_correction'])) {\n                        $alreadyUploaded = '<br />'.$work['title_correction'].' '.$correctionIconSmall;\n                    }\n\n                    $correction = '\n                        <form\n                        id=\"file_upload_'.$item_id.'\"\n                        class=\"work_correction_file_upload file_upload_small fileinput-button\"\n                        action=\"'.api_get_path(WEB_AJAX_PATH).'work.ajax.php?'.$cidReq.'&a=upload_correction_file&item_id='.$item_id.'\"\n                        method=\"POST\"\n                        enctype=\"multipart/form-data\"\n                        >\n                        <div id=\"progress_'.$item_id.'\" class=\"text-center button-load\">\n                            '.addslashes(get_lang('ClickOrDropOneFileHere')).'\n                            '.Display::return_icon('upload_file.png', get_lang('Correction'), [], ICON_SIZE_TINY).'\n                            '.$alreadyUploaded.'\n                        </div>\n                        <input id=\"file_'.$item_id.'\" type=\"file\" name=\"file\" class=\"\" multiple>\n                        </form>\n                    ';\n\n                    $correction .= \"<script>\n                    $(function() {\n                        $('.work_correction_file_upload').each(function () {\n                            $(this).fileupload({\n                                dropZone: $(this)\n                            });\n                        });\n\n                        $('#file_upload_\".$item_id.\"').fileupload({\n                            add: function (e, data) {\n                                $('#progress_$item_id').html();\n                                data.context = $('#progress_$item_id').html('$loadingText <br /> <em class=\\\"fa fa-spinner fa-pulse fa-fw\\\"></em>');\n                                data.submit();\n                                $(this).removeClass('hover');\n                            },\n                            dragover: function (e, data) {\n                                $(this).addClass('hover');\n                            },\n                            done: function (e, data) {\n                                if (data._response.result.name) {\n                                    $('#progress_$item_id').html('$uploadedText '+data._response.result.result+'<br />'+data._response.result.name);\n                                } else {\n                                    $('#progress_$item_id').html('$failsUploadText $failsUploadIcon');\n                                }\n                                $(this).removeClass('hover');\n                            }\n                        });\n                        $('#file_upload_\".$item_id.\"').on('dragleave', function (e) {\n                            // dragleave callback implementation\n                            $(this).removeClass('hover');\n                        });\n                    });\n                    </script>\";\n\n                    if ($locked) {\n                        if ($qualification_exists) {\n                            $action .= Display::return_icon(\n                                'edit_na.png',\n                                get_lang('CorrectAndRate'),\n                                [],\n                                ICON_SIZE_SMALL\n                            );\n                        } else {\n                            $action .= Display::return_icon('edit_na.png', get_lang('Comment'), [], ICON_SIZE_SMALL);\n                        }\n                    } else {\n                        if ($blockEdition && !api_is_platform_admin()) {\n                            $editLink = '';\n                        } else {\n                            if ($qualification_exists) {\n                                $editLink = '<a href=\"'.$url.'edit.php?'.api_get_cidreq(\n                                    ).'&item_id='.$item_id.'&id='.$work['parent_id'].'\" title=\"'.get_lang(\n                                        'Edit'\n                                    ).'\"  >'.\n                                    Display::return_icon('edit.png', get_lang('Edit'), [], ICON_SIZE_SMALL).'</a>';\n                            } else {\n                                $editLink = '<a href=\"'.$url.'edit.php?'.api_get_cidreq(\n                                    ).'&item_id='.$item_id.'&id='.$work['parent_id'].'\" title=\"'.get_lang(\n                                        'Modify'\n                                    ).'\">'.\n                                    Display::return_icon('edit.png', get_lang('Edit'), [], ICON_SIZE_SMALL).'</a>';\n                            }\n                        }\n                        $action .= $editLink;\n                    }\n\n                    if ($work['contains_file']) {\n                        if ($locked) {\n                            $action .= Display::return_icon(\n                                'move_na.png',\n                                get_lang('Move'),\n                                [],\n                                ICON_SIZE_SMALL\n                            );\n                        } else {\n                            $action .= '<a href=\"'.$url.'work.php?'.api_get_cidreq().'&action=move&item_id='.$item_id.'&id='.$work['parent_id'].'\" title=\"'.get_lang('Move').'\">'.\n                                Display::return_icon('move.png', get_lang('Move'), [], ICON_SIZE_SMALL).'</a>';\n                        }\n                    }\n\n                    if ($work['accepted'] == '1') {\n                        $action .= '<a href=\"'.$url.'work_list_all.php?'.api_get_cidreq().'&id='.$work_id.'&action=make_invisible&item_id='.$item_id.'\" title=\"'.get_lang('Invisible').'\" >'.\n                            Display::return_icon('visible.png', get_lang('Invisible'), [], ICON_SIZE_SMALL).'</a>';\n                    } else {\n                        $action .= '<a href=\"'.$url.'work_list_all.php?'.api_get_cidreq().'&id='.$work_id.'&action=make_visible&item_id='.$item_id.'\" title=\"'.get_lang('Visible').'\" >'.\n                            Display::return_icon('invisible.png', get_lang('Visible'), [], ICON_SIZE_SMALL).'</a> ';\n                    }\n\n                    if ($locked) {\n                        $action .= Display::return_icon('delete_na.png', get_lang('Delete'), '', ICON_SIZE_SMALL);\n                    } else {\n                        $action .= '<a href=\"'.$url.'work_list_all.php?'.api_get_cidreq().'&id='.$work_id.'&action=delete&item_id='.$item_id.'\" onclick=\"javascript:if(!confirm('.\"'\".addslashes(api_htmlentities(get_lang('ConfirmYourChoice'), ENT_QUOTES)).\"'\".')) return false;\" title=\"'.get_lang('Delete').'\" >'.\n                            Display::return_icon('delete.png', get_lang('Delete'), '', ICON_SIZE_SMALL).'</a>';\n                    }\n                } elseif ($is_author && (empty($work['qualificator_id']) || $work['qualificator_id'] == 0)) {\n                    $action .= '<a href=\"'.$url.'view.php?'.api_get_cidreq().'&id='.$item_id.'\" title=\"'.get_lang('View').'\">'.\n                        Display::return_icon('default.png', get_lang('View'), [], ICON_SIZE_SMALL).'</a>';\n\n                    if (api_get_course_setting('student_delete_own_publication') == 1) {\n                        if (api_is_allowed_to_session_edit(false, true)) {\n                            $action .= '<a href=\"'.$url.'edit.php?'.api_get_cidreq().'&item_id='.$item_id.'&id='.$work['parent_id'].'\" title=\"'.get_lang('Modify').'\">'.\n                                Display::return_icon('edit.png', get_lang('Comment'), [], ICON_SIZE_SMALL).'</a>';\n                        }\n                        $action .= ' <a href=\"'.$url.'work_list.php?'.api_get_cidreq().'&action=delete&item_id='.$item_id.'&id='.$work['parent_id'].'\" onclick=\"javascript:if(!confirm('.\"'\".addslashes(api_htmlentities(get_lang('ConfirmYourChoice'), ENT_QUOTES)).\"'\".')) return false;\" title=\"'.get_lang('Delete').'\"  >'.\n                            Display::return_icon('delete.png', get_lang('Delete'), '', ICON_SIZE_SMALL).'</a>';\n                    }\n                } else {\n                    $action .= '<a href=\"'.$url.'view.php?'.api_get_cidreq().'&id='.$item_id.'\" title=\"'.get_lang('View').'\">'.\n                        Display::return_icon('default.png', get_lang('View'), [], ICON_SIZE_SMALL).'</a>';\n                }\n\n                // Status.\n                if (empty($work['qualificator_id'])) {\n                    $qualificator_id = Display::label(get_lang('NotRevised'), 'warning');\n                } else {\n                    $qualificator_id = Display::label(get_lang('Revised'), 'success');\n                }\n                $work['qualificator_id'] = $qualificator_id.' '.$hasCorrection;\n                $work['actions'] = '<div class=\"work-action\">'.$linkToDownload.$action.'</div>';\n                $work['correction'] = $correction;\n\n                if (!empty($compilation) && $is_allowed_to_edit) {\n                    $compilationId = $compilation->getCompilatioId($item_id, $course_id);\n                    if ($compilationId) {\n                        $actionCompilatio = \"<div id='id_avancement\".$item_id.\"' class='compilation_block'>\n                            \".$loading.'&nbsp;'.get_lang('CompilatioConnectionWithServer').'</div>';\n                    } else {\n                        $workDirectory = api_get_path(SYS_COURSE_PATH).$course_info['directory'];\n                        if (!Compilatio::verifiFileType($dbTitle)) {\n                            $actionCompilatio = get_lang('FileFormatNotSupported');\n                        } elseif (filesize($workDirectory.'/'.$work['url']) > $compilation->getMaxFileSize()) {\n                            $sizeFile = round(filesize($workDirectory.'/'.$work['url']) / 1000000);\n                            $actionCompilatio = get_lang('UplFileTooBig').': '.format_file_size($sizeFile).'<br />';\n                        } else {\n                            $actionCompilatio = \"<div id='id_avancement\".$item_id.\"' class='compilation_block'>\";\n                            $actionCompilatio .= Display::url(\n                                get_lang('CompilatioAnalysis'),\n                                'javascript:void(0)',\n                                [\n                                    'class' => 'getSingleCompilatio btn btn-primary btn-xs',\n                                    'onclick' => \"getSingleCompilatio($item_id);\",\n                                ]\n                            );\n                            $actionCompilatio .= get_lang('CompilatioWithCompilatio');\n                        }\n                    }\n                    $work['compilatio'] = $actionCompilatio;\n                }\n                $works[] = $work;\n            }\n        }\n\n        return $works;\n    }\n}\n\nfunction getAllWork(\n    $start,\n    $limit,\n    $column,\n    $direction,\n    $whereCondition = '',\n    $getCount = false,\n    $courseId = 0,\n    $status = 0,\n    $onlyParents = false,\n    $shortTitle = true\n) {\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $user_table = Database::get_main_table(TABLE_MAIN_USER);\n    $userId = api_get_user_id();\n    if (empty($userId)) {\n        return [];\n    }\n\n    $allowWorkFromAllSessions = api_get_configuration_value('assignment_base_course_teacher_access_to_all_session');\n    $coursesInSession = [];\n    $courses = CourseManager::get_courses_list_by_user_id($userId, false, false, false);\n    if ($allowWorkFromAllSessions) {\n        if (empty($courses)) {\n            return [];\n        }\n    } else {\n        $coursesInSession = SessionManager::getCoursesForCourseSessionCoach($userId);\n\n        if (empty($courses) && empty($coursesInSession)) {\n            return [];\n        }\n    }\n\n    if (!empty($whereCondition)) {\n        $whereCondition = ' AND '.$whereCondition;\n    }\n    $whereCondition = Database::escape_string($whereCondition);\n\n    if (!in_array($direction, ['asc', 'desc'])) {\n        $direction = 'desc';\n    }\n\n    $column = !empty($column) ? Database::escape_string($column) : 'sent_date';\n    $start = (int) $start;\n    $limit = (int) $limit;\n    $courseQuery = [];\n    $courseList = [];\n    $withResults = 0;\n    foreach ($courses as $course) {\n        $courseIdItem = $course['real_id'];\n        if (!empty($courseId) && $courseIdItem != $courseId) {\n            continue;\n        }\n        $courseInfo = api_get_course_info_by_id($courseIdItem);\n        // Only teachers or platform admins.\n        $isAllow = api_is_platform_admin() || CourseManager::is_course_teacher($userId, $courseInfo['code']);\n        if (false === $isAllow) {\n            continue;\n        }\n\n        //$session_id = isset($course['session_id']) ? $course['session_id'] : 0;\n        //$conditionSession = api_get_session_condition($session_id, true, false, 'w.session_id');\n        $conditionSession = ' AND (work.session_id = 0 OR work.session_id IS NULL)';\n        if ($allowWorkFromAllSessions) {\n            $conditionSession = '';\n        }\n        $parentCondition = '';\n        if ($withResults) {\n            $parentCondition = 'AND ww.parent_id is NOT NULL';\n        }\n        $courseQuery[] = \" (work.c_id = $courseIdItem $conditionSession $parentCondition ) \";\n        $courseList[$courseIdItem] = $courseInfo;\n    }\n\n    if (false === $allowWorkFromAllSessions) {\n        foreach ($coursesInSession as $courseIdInSession => $sessionList) {\n            if (!empty($sessionList)) {\n                if (!isset($courseList[$courseIdInSession])) {\n                    $courseList[$courseIdInSession] = api_get_course_info_by_id($courseIdInSession);\n                }\n\n                foreach ($sessionList as $sessionId) {\n                    $conditionSession = \" AND (work.session_id = $sessionId)\";\n                    $parentCondition = '';\n                    $courseQuery[] = \" (work.c_id = $courseIdInSession $conditionSession $parentCondition ) \";\n                }\n            }\n        }\n    }\n\n    if (empty($courseQuery)) {\n        return [];\n    }\n\n    $courseQueryToString = implode(' OR ', $courseQuery);\n    $compilation = null;\n    /*if (api_get_configuration_value('allow_compilatio_tool')) {\n        $compilation = new Compilatio();\n    }*/\n\n    if ($getCount) {\n        if (empty($courseQuery)) {\n            return 0;\n        }\n        $select = 'SELECT DISTINCT count(u.id) as count ';\n    } else {\n        $select = 'SELECT DISTINCT\n                    u.id as user_id,\n                    work.id as id,\n                    title as title,\n                    description,\n                    url,\n                    sent_date,\n                    contains_file,\n                    has_properties,\n                    view_properties,\n                    qualification,\n                    weight,\n                    allow_text_assignment,\n                    u.firstname,\n                    u.lastname,\n                    u.username,\n                    parent_id,\n                    accepted,\n                    qualificator_id,\n                    url_correction,\n                    title_correction,\n                    work.c_id,\n                    work.date_of_qualification,\n                    work.session_id ';\n    }\n\n    $statusCondition = '';\n    if (!empty($status)) {\n        switch ($status) {\n            case 2:\n                $statusCondition = ' AND (qualificator_id IS NULL OR qualificator_id = 0) ';\n                break;\n            case 3:\n                $statusCondition = ' AND (qualificator_id <> 0 AND qualificator_id IS NOT NULL) ';\n                break;\n        }\n    }\n    $filterParents = 'work.parent_id <> 0';\n    if ($onlyParents) {\n        $filterParents = 'work.parent_id = 0';\n    }\n    $sql = \" $select\n            FROM $work_table work\n            INNER JOIN $user_table u\n            ON (work.user_id = u.id)\n            WHERE\n                $filterParents AND\n                work.active IN (1, 0)\n                $whereCondition AND\n                ($courseQueryToString)\n                $statusCondition\n                AND u.status != \".INVITEE;\n\n    $sql .= \" ORDER BY `$column` $direction \";\n\n    if (!empty($start) && !empty($limit)) {\n        $sql .= \" LIMIT $start, $limit\";\n    }\n\n    $result = Database::query($sql);\n    $works = [];\n    if ($getCount) {\n        $work = Database::fetch_array($result, 'ASSOC');\n        if ($work) {\n            return (int) $work['count'];\n        }\n\n        return 0;\n    }\n\n    $url = api_get_path(WEB_CODE_PATH).'work/';\n    $unoconv = api_get_configuration_value('unoconv.binaries');\n    $loadingText = addslashes(get_lang('Loading'));\n    $uploadedText = addslashes(get_lang('Uploaded'));\n    $failsUploadText = addslashes(get_lang('UplNoFileUploaded'));\n    $failsUploadIcon = Display::return_icon(\n        'closed-circle.png',\n        '',\n        [],\n        ICON_SIZE_TINY\n    );\n    $saveIcon = Display::return_icon(\n        'save.png',\n        get_lang('Save'),\n        [],\n        ICON_SIZE_SMALL\n    );\n\n    $correctionIcon = Display::return_icon(\n        'check-circle.png',\n        get_lang('Correction'),\n        null,\n        ICON_SIZE_SMALL\n    );\n\n    $correctionIconSmall = Display::return_icon(\n        'check-circle.png',\n        get_lang('Correction'),\n        null,\n        ICON_SIZE_TINY\n    );\n\n    $rateIcon = Display::return_icon(\n        'rate_work.png',\n        get_lang('CorrectAndRate'),\n        [],\n        ICON_SIZE_SMALL\n    );\n    $parentList = [];\n    $blockEdition = api_get_configuration_value('block_student_publication_edition');\n    $blockScoreEdition = api_get_configuration_value('block_student_publication_score_edition');\n    $loading = Display::returnFontAwesomeIcon('spinner', null, true, 'fa-spin');\n    $qualification_exists = true;\n    while ($work = Database::fetch_array($result, 'ASSOC')) {\n        $courseId = $work['c_id'];\n        $courseInfo = $courseList[$work['c_id']];\n        $sessionId = $work['session_id'];\n        $cidReq = 'cidReq='.$courseInfo['code'].'&id_session='.$sessionId;\n\n        $item_id = $work_id = $work['id'];\n        $dbTitle = $work['title'];\n        // Get the author ID for that document from the item_property table\n        $is_author = false;\n        $can_read = false;\n        $owner_id = $work['user_id'];\n        $visibility = api_get_item_visibility($courseInfo, 'work', $work['id'], $sessionId);\n        if ($visibility != 1) {\n            continue;\n        }\n        /*$locked = api_resource_is_locked_by_gradebook(\n            $item_id,\n            LINK_STUDENTPUBLICATION,\n            $courseInfo['code']\n        );*/\n        $locked = false;\n\n        /* Because a bug found when saving items using the api_item_property_update()\n           the field $item_property_data['insert_user_id'] is not reliable. */\n        /*if (!$is_allowed_to_edit && $owner_id == api_get_user_id()) {\n            $is_author = true;\n        }*/\n        // Teacher can be treated as an author.\n        $is_author = true;\n\n        /*if ($course_info['show_score'] == 0) {\n            $can_read = true;\n        }*/\n\n        $qualification_string = '';\n        if ($qualification_exists) {\n            if ($work['qualification'] == '') {\n                $qualification_string = Display::label('-');\n            } else {\n                $qualification_string = formatWorkScore($work['qualification'], $work['qualification']);\n            }\n        }\n\n        $work['qualification_score'] = $work['qualification'];\n        $add_string = '';\n        $time_expires = '';\n        if (!empty($work_assignment['expires_on'])) {\n            $time_expires = api_strtotime(\n                $work_assignment['expires_on'],\n                'UTC'\n            );\n        }\n\n        if (!empty($work_assignment['expires_on']) &&\n            !empty($time_expires) && ($time_expires < api_strtotime($work['sent_date'], 'UTC'))) {\n            $add_string = Display::label(get_lang('Expired'), 'important').' - ';\n        }\n\n        if (($can_read && $work['accepted'] == '1') ||\n            ($is_author && in_array($work['accepted'], ['1', '0']))\n        ) {\n            // Firstname, lastname, username\n            $work['fullname'] = Display::div(\n                api_get_person_name($work['firstname'], $work['lastname']),\n                ['class' => 'work-name']\n            );\n            // Title\n            $work['title_clean'] = $work['title'];\n            $work['title'] = Security::remove_XSS($work['title']);\n            if (strlen($work['title']) > 30 && $shortTitle) {\n                $short_title = substr($work['title'], 0, 27).'...';\n                $work['title'] = Display::span($short_title, ['class' => 'work-title', 'title' => $work['title']]);\n            } else {\n                $work['title'] = Display::div($work['title'], ['class' => 'work-title']);\n            }\n\n            // Type.\n            $work['type'] = DocumentManager::build_document_icon_tag('file', $work['url']);\n\n            // File name.\n            $linkToDownload = '';\n            // If URL is present then there's a file to download keep BC.\n            if ($work['contains_file'] || !empty($work['url'])) {\n                $linkToDownload = '<a href=\"'.$url.'download.php?id='.$item_id.'&'.$cidReq.'\">'.$saveIcon.'</a> ';\n            }\n\n            $feedback = '';\n            $count = getWorkCommentCount($item_id, $courseInfo);\n            if (!is_null($count) && !empty($count)) {\n                if ($qualification_exists) {\n                    $feedback .= ' ';\n                }\n                $feedback .= Display::url(\n                    $count.' '.Display::returnFontAwesomeIcon('comments-o'),\n                    $url.'view.php?'.$cidReq.'&id='.$item_id\n                );\n            }\n\n            $correction = '';\n            $hasCorrection = '';\n            if (!empty($work['url_correction'])) {\n                $hasCorrection = Display::url(\n                    $correctionIcon,\n                    api_get_path(WEB_CODE_PATH).'work/download.php?id='.$item_id.'&'.$cidReq.'&correction=1'\n                );\n            }\n\n            if ($qualification_exists) {\n                $work['qualification'] = $qualification_string.$feedback;\n            } else {\n                $work['qualification'] = $qualification_string.$feedback.$hasCorrection;\n            }\n\n            $work['qualification_only'] = $qualification_string;\n\n            // Date.\n            $work_date = api_get_local_time($work['sent_date']);\n            $date = date_to_str_ago($work['sent_date']).' '.$work_date;\n            $work['formatted_date'] = $work_date.' '.$add_string;\n            $work['expiry_note'] = $add_string;\n            $work['sent_date_from_db'] = $work['sent_date'];\n            $work['sent_date'] = '<div class=\"work-date\" title=\"'.$date.'\">'.\n                $add_string.' '.Display::dateToStringAgoAndLongDate($work['sent_date']).'</div>';\n            $work['status'] = $hasCorrection;\n            $work['has_correction'] = $hasCorrection;\n            $work['course'] = $courseInfo['title'];\n\n            if (isset($parentList[$work['parent_id']])) {\n                $parent = $parentList[$work['parent_id']];\n            } else {\n                $parent = get_work_data_by_id($work['parent_id'], $courseId);\n            }\n            $work['work_name'] = isset($parent['title']) ? $parent['title'] : '';\n\n            // Actions.\n            $action = '';\n            if ($blockScoreEdition && !api_is_platform_admin() && !empty($work['qualification_score'])) {\n                $rateLink = '';\n            } else {\n                $rateLink = '<a href=\"'.$url.'view.php?'.$cidReq.'&id='.$item_id.'\" title=\"'.get_lang('View').'\">'.\n                    $rateIcon.'</a> ';\n            }\n            $action .= $rateLink;\n            if ($unoconv && empty($work['contains_file'])) {\n                $action .= '<a\n                    href=\"'.$url.'work_list_all.php?'.$cidReq.'&id='.$work_id.'&action=export_to_doc&item_id='.$item_id.'\"\n                    title=\"'.get_lang('ExportToDoc').'\" >'.\n                    Display::return_icon('export_doc.png', get_lang('ExportToDoc'), [], ICON_SIZE_SMALL).'</a> ';\n            }\n\n            $alreadyUploaded = '';\n            if (!empty($work['url_correction'])) {\n                $alreadyUploaded = '<br />'.$work['title_correction'].' '.$correctionIconSmall;\n            }\n\n            $correction = '\n                <form\n                id=\"file_upload_'.$item_id.'\"\n                class=\"work_correction_file_upload file_upload_small fileinput-button\"\n                action=\"'.api_get_path(WEB_AJAX_PATH).'work.ajax.php?'.$cidReq.'&a=upload_correction_file&item_id='.$item_id.'\"\n                method=\"POST\"\n                enctype=\"multipart/form-data\"\n                >\n                <div id=\"progress_'.$item_id.'\" class=\"text-center button-load\">\n                    '.addslashes(get_lang('ClickOrDropOneFileHere')).'\n                    '.Display::return_icon('upload_file.png', get_lang('Correction'), [], ICON_SIZE_TINY).'\n                    '.$alreadyUploaded.'\n                </div>\n                <input id=\"file_'.$item_id.'\" type=\"file\" name=\"file\" class=\"\" multiple>\n                </form>\n            ';\n\n            $correction .= \"<script>\n            $(function() {\n                $('.work_correction_file_upload').each(function () {\n                    $(this).fileupload({\n                        dropZone: $(this)\n                    });\n                });\n                $('#file_upload_\".$item_id.\"').fileupload({\n                    add: function (e, data) {\n                        $('#progress_$item_id').html();\n                        data.context = $('#progress_$item_id').html('$loadingText <br /> <em class=\\\"fa fa-spinner fa-pulse fa-fw\\\"></em>');\n                        data.submit();\n                        $(this).removeClass('hover');\n                    },\n                    dragover: function (e, data) {\n                        $(this).addClass('hover');\n                    },\n                    done: function (e, data) {\n                        if (data._response.result.name) {\n                            $('#progress_$item_id').html('$uploadedText '+data._response.result.result+'<br />'+data._response.result.name);\n                        } else {\n                            $('#progress_$item_id').html('$failsUploadText $failsUploadIcon');\n                        }\n                        $(this).removeClass('hover');\n                    }\n                });\n                $('#file_upload_\".$item_id.\"').on('dragleave', function (e) {\n                    // dragleave callback implementation\n                    $(this).removeClass('hover');\n                });\n            });\n            </script>\";\n\n            if ($locked) {\n                if ($qualification_exists) {\n                    $action .= Display::return_icon(\n                        'edit_na.png',\n                        get_lang('CorrectAndRate'),\n                        [],\n                        ICON_SIZE_SMALL\n                    );\n                } else {\n                    $action .= Display::return_icon('edit_na.png', get_lang('Comment'), [], ICON_SIZE_SMALL);\n                }\n            } else {\n                if ($blockEdition && !api_is_platform_admin()) {\n                    $editLink = '';\n                } else {\n                    $editIcon = Display::return_icon('edit.png', get_lang('Edit'), [], ICON_SIZE_SMALL);\n                    if ($qualification_exists) {\n                        $editLink = '<a\n                            href=\"'.$url.'edit.php?'.$cidReq.'&item_id='.$item_id.'&id='.$work['parent_id'].'\"\n                            title=\"'.get_lang('Edit').'\"  >'.\n                            $editIcon.\n                        '</a>';\n                    } else {\n                        $editLink = '<a\n                            href=\"'.$url.'edit.php?'.$cidReq.'&item_id='.$item_id.'&id='.$work['parent_id'].'\"\n                            title=\"'.get_lang('Modify').'\">'.\n                            $editIcon.'</a>';\n                    }\n                }\n                $action .= $editLink;\n            }\n\n            /*if ($work['contains_file']) {\n                if ($locked) {\n                    $action .= Display::return_icon(\n                        'move_na.png',\n                        get_lang('Move'),\n                        [],\n                        ICON_SIZE_SMALL\n                    );\n                } else {\n                    $action .= '<a href=\"'.$url.'work.php?'.$cidReq.'&action=move&item_id='.$item_id.'&id='.$work['parent_id'].'\" title=\"'.get_lang('Move').'\">'.\n                        Display::return_icon('move.png', get_lang('Move'), [], ICON_SIZE_SMALL).'</a>';\n                }\n            }*/\n\n            /*if ($work['accepted'] == '1') {\n                $action .= '<a href=\"'.$url.'work_list_all.php?'.$cidReq.'&id='.$work_id.'&action=make_invisible&item_id='.$item_id.'\" title=\"'.get_lang('Invisible').'\" >'.\n                    Display::return_icon('visible.png', get_lang('Invisible'), [], ICON_SIZE_SMALL).'</a>';\n            } else {\n                $action .= '<a href=\"'.$url.'work_list_all.php?'.$cidReq.'&id='.$work_id.'&action=make_visible&item_id='.$item_id.'\" title=\"'.get_lang('Visible').'\" >'.\n                    Display::return_icon('invisible.png', get_lang('Visible'), [], ICON_SIZE_SMALL).'</a> ';\n            }*/\n            /*if ($locked) {\n                $action .= Display::return_icon('delete_na.png', get_lang('Delete'), '', ICON_SIZE_SMALL);\n            } else {\n                $action .= '<a href=\"'.$url.'work_list_all.php?'.$cidReq.'&id='.$work_id.'&action=delete&item_id='.$item_id.'\" onclick=\"javascript:if(!confirm('.\"'\".addslashes(api_htmlentities(get_lang('ConfirmYourChoice'), ENT_QUOTES)).\"'\".')) return false;\" title=\"'.get_lang('Delete').'\" >'.\n                    Display::return_icon('delete.png', get_lang('Delete'), '', ICON_SIZE_SMALL).'</a>';\n            }*/\n            // Qualificator fullname and date of qualification\n            $work['qualificator_fullname'] = '';\n            if ($work['qualificator_id'] > 0) {\n                $qualificatorAuthor = api_get_user_info($work['qualificator_id']);\n                $work['qualificator_fullname'] = api_get_person_name($qualificatorAuthor['firstname'], $qualificatorAuthor['lastname']);\n                $work['date_of_qualification'] = api_convert_and_format_date($work['date_of_qualification'], DATE_TIME_FORMAT_SHORT);\n            }\n            // Status.\n            if (empty($work['qualificator_id'])) {\n                $qualificator_id = Display::label(get_lang('NotRevised'), 'warning');\n            } else {\n                $qualificator_id = Display::label(get_lang('Revised'), 'success');\n            }\n            $work['qualificator_id'] = $qualificator_id.' '.$hasCorrection;\n            $work['actions'] = '<div class=\"work-action\">'.$linkToDownload.$action.'</div>';\n            $work['correction'] = $correction;\n\n            if (!empty($compilation)) {\n                $compilationId = $compilation->getCompilatioId($item_id, $courseId);\n                if ($compilationId) {\n                    $actionCompilatio = \"<div id='id_avancement\".$item_id.\"' class='compilation_block'>\n                        \".$loading.'&nbsp;'.get_lang('CompilatioConnectionWithServer').'</div>';\n                } else {\n                    $workDirectory = api_get_path(SYS_COURSE_PATH).$courseInfo['directory'];\n                    if (!Compilatio::verifiFileType($dbTitle)) {\n                        $actionCompilatio = get_lang('FileFormatNotSupported');\n                    } elseif (filesize($workDirectory.'/'.$work['url']) > $compilation->getMaxFileSize()) {\n                        $sizeFile = round(filesize($workDirectory.'/'.$work['url']) / 1000000);\n                        $actionCompilatio = get_lang('UplFileTooBig').': '.format_file_size($sizeFile).'<br />';\n                    } else {\n                        $actionCompilatio = \"<div id='id_avancement\".$item_id.\"' class='compilation_block'>\";\n                        $actionCompilatio .= Display::url(\n                            get_lang('CompilatioAnalysis'),\n                            'javascript:void(0)',\n                            [\n                                'class' => 'getSingleCompilatio btn btn-primary btn-xs',\n                                'onclick' => \"getSingleCompilatio($item_id);\",\n                            ]\n                        );\n                        $actionCompilatio .= get_lang('CompilatioWithCompilatio');\n                    }\n                }\n                $work['compilatio'] = $actionCompilatio;\n            }\n            $works[] = $work;\n        }\n    }\n\n    return $works;\n}\n\n/**\n * Send reminder to users who have not given the task.\n *\n * @param int\n *\n * @return array\n *\n * @author cvargas carlos.vargas@beeznest.com cfasanando, christian.fasanado@beeznest.com\n */\nfunction send_reminder_users_without_publication($task_data)\n{\n    $_course = api_get_course_info();\n    $task_id = $task_data['id'];\n    $task_title = !empty($task_data['title']) ? $task_data['title'] : basename($task_data['url']);\n    $subject = '['.api_get_setting('siteName').'] ';\n\n    // The body can be as long as you wish, and any combination of text and variables\n    $content = get_lang('ReminderToSubmitPendingTask').\"\\n\".get_lang('CourseName').' : '.$_course['name'].\"\\n\";\n    $content .= get_lang('WorkName').' : '.$task_title.\"\\n\";\n    $list_users = get_list_users_without_publication($task_id);\n    $mails_sent_to = [];\n    foreach ($list_users as $user) {\n        $name_user = api_get_person_name($user[1], $user[0], null, PERSON_NAME_EMAIL_ADDRESS);\n        $dear_line = get_lang('Dear').\" \".api_get_person_name($user[1], $user[0]).\", \\n\\n\";\n        $body = $dear_line.$content;\n        MessageManager::send_message($user[3], $subject, $body);\n        $mails_sent_to[] = $name_user;\n    }\n\n    return $mails_sent_to;\n}\n\n/**\n * @param int $workId    The work ID\n * @param int $courseId  The course ID\n * @param int $sessionId Optional. The session ID\n */\nfunction sendEmailToDrhOnHomeworkCreation($workId, $courseId, $sessionId = 0)\n{\n    $courseInfo = api_get_course_info_by_id($courseId);\n    $assignment = get_work_assignment_by_id($workId, $courseId);\n    $work = get_work_data_by_id($workId, $courseId, $sessionId);\n    $workInfo = array_merge($assignment, $work);\n\n    if (empty($sessionId)) {\n        $students = CourseManager::get_student_list_from_course_code($courseInfo['code']);\n    } else {\n        $students = CourseManager::get_student_list_from_course_code($courseInfo['code'], true, $sessionId);\n    }\n\n    $bodyView = new Template(null, false, false, false, false, false);\n\n    foreach ($students as $student) {\n        $studentInfo = api_get_user_info($student['user_id']);\n        if (empty($studentInfo)) {\n            continue;\n        }\n\n        $hrms = UserManager::getDrhListFromUser($student['id']);\n        foreach ($hrms as $hrm) {\n            $hrmName = api_get_person_name($hrm['firstname'], $hrm['lastname'], null, PERSON_NAME_EMAIL_ADDRESS);\n\n            $bodyView->assign('hrm_name', $hrmName);\n            $bodyView->assign('student', $studentInfo);\n            $bodyView->assign('course', $courseInfo);\n            $bodyView->assign('course_link', api_get_course_url($courseInfo['code'], $sessionId));\n            $bodyView->assign('work', $workInfo);\n\n            $bodyTemplate = $bodyView->get_template('mail/new_work_alert_hrm.tpl');\n\n            MessageManager::send_message(\n                $hrm['id'],\n                sprintf(\n                    get_lang('StudentXHasBeenAssignedNewWorkInCourseY'),\n                    $student['firstname'],\n                    $courseInfo['title']\n                ),\n                $bodyView->fetch($bodyTemplate)\n            );\n        }\n    }\n}\n\n/**\n * Sends an email to the students of a course when a homework is created.\n *\n * @param int $workId\n * @param int $courseId\n * @param int $sessionId\n *\n * @author Guillaume Viguier <guillaume.viguier@beeznest.com>\n * @author Julio Montoya <gugli100@gmail.com> Adding session support - 2011\n */\nfunction sendEmailToStudentsOnHomeworkCreation($workId, $courseId, $sessionId = 0)\n{\n    $courseInfo = api_get_course_info_by_id($courseId);\n    $courseCode = $courseInfo['code'];\n    // Get the students of the course\n    if (empty($sessionId)) {\n        $students = CourseManager::get_student_list_from_course_code($courseCode);\n    } else {\n        $students = CourseManager::get_student_list_from_course_code($courseCode, true, $sessionId);\n    }\n    $emailsubject = '['.api_get_setting('siteName').'] '.get_lang('HomeworkCreated');\n    $currentUser = api_get_user_info(api_get_user_id());\n    if (!empty($students)) {\n        foreach ($students as $student) {\n            $user_info = api_get_user_info($student['user_id']);\n            if (!empty($user_info)) {\n                $link = api_get_path(WEB_CODE_PATH).'work/work_list.php?'.api_get_cidreq().'&id='.$workId;\n                $emailbody = get_lang('Dear').\" \".$user_info['complete_name'].\",\\n\\n\";\n                $emailbody .= get_lang('HomeworkHasBeenCreatedForTheCourse').\" \".$courseCode.\". \".\"\\n\\n\".\n                    '<a href=\"'.$link.'\">'.get_lang('PleaseCheckHomeworkPage').'</a>';\n                $emailbody .= \"\\n\\n\".$currentUser['complete_name'];\n\n                $additionalParameters = [\n                    'smsType' => SmsPlugin::ASSIGNMENT_BEEN_CREATED_COURSE,\n                    'userId' => $student['user_id'],\n                    'courseTitle' => $courseCode,\n                    'link' => $link,\n                ];\n\n                MessageManager::send_message_simple(\n                    $student['user_id'],\n                    $emailsubject,\n                    $emailbody,\n                    null,\n                    false,\n                    false,\n                    $additionalParameters,\n                    false\n                );\n            }\n        }\n    }\n}\n\n/**\n * @param string $url\n *\n * @return bool\n */\nfunction is_work_exist_by_url($url)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $url = Database::escape_string($url);\n    $sql = \"SELECT id FROM $table WHERE url='$url'\";\n    $result = Database::query($sql);\n    if (Database::num_rows($result) > 0) {\n        $row = Database::fetch_row($result);\n        if (empty($row)) {\n            return false;\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\n/**\n * Check if a user is the author of a work document.\n *\n * @param int $itemId\n * @param int $userId\n * @param int $courseId\n * @param int $sessionId\n *\n * @return bool\n */\nfunction user_is_author($itemId, $userId = null, $courseId = 0, $sessionId = 0)\n{\n    $userId = (int) $userId;\n\n    if (empty($itemId)) {\n        return false;\n    }\n\n    if (empty($userId)) {\n        $userId = api_get_user_id();\n    }\n\n    $isAuthor = false;\n    $is_allowed_to_edit = api_is_allowed_to_edit();\n\n    if ($is_allowed_to_edit) {\n        $isAuthor = true;\n    } else {\n        if (empty($courseId)) {\n            $courseId = api_get_course_int_id();\n        }\n        if (empty($sessionId)) {\n            $sessionId = api_get_session_id();\n        }\n\n        $data = api_get_item_property_info($courseId, 'work', $itemId, $sessionId);\n        if ($data['insert_user_id'] == $userId) {\n            $isAuthor = true;\n        }\n\n        $workData = get_work_data_by_id($itemId);\n        if ($workData['user_id'] == $userId) {\n            $isAuthor = true;\n        }\n    }\n\n    if (!$isAuthor) {\n        return false;\n    }\n\n    return $isAuthor;\n}\n\n/**\n * Get list of users who have not given the task.\n *\n * @param int\n * @param int\n *\n * @return array\n *\n * @author cvargas\n * @author Julio Montoya <gugli100@gmail.com> Fixing query\n */\nfunction get_list_users_without_publication($task_id, $studentId = 0)\n{\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $table_course_user = Database::get_main_table(TABLE_MAIN_COURSE_USER);\n    $table_user = Database::get_main_table(TABLE_MAIN_USER);\n    $session_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n\n    $users = getAllUserToWork($task_id, api_get_course_int_id());\n    $users = array_column($users, 'user_id');\n\n    // Condition for the session\n    $session_id = api_get_session_id();\n    $course_id = api_get_course_int_id();\n    $task_id = (int) $task_id;\n    $sessionCondition = api_get_session_condition($session_id);\n\n    if (0 == $session_id) {\n        $sql = \"SELECT user_id as id FROM $work_table\n                WHERE\n                    c_id = $course_id AND\n                    parent_id = '$task_id' AND\n                    active IN (0, 1)\";\n    } else {\n        $sql = \"SELECT user_id as id FROM $work_table\n                WHERE\n                    c_id = $course_id AND\n                    parent_id = '$task_id' $sessionCondition AND\n                    active IN (0, 1)\";\n    }\n\n    $result = Database::query($sql);\n    $users_with_tasks = [];\n    while ($row = Database::fetch_array($result)) {\n        $users_with_tasks[] = $row['id'];\n    }\n\n    if (0 == $session_id) {\n        $sql_users = \"SELECT cu.user_id, u.lastname, u.firstname, u.email\n                      FROM $table_course_user AS cu, $table_user AS u\n                      WHERE u.status != 1 and cu.c_id='\".$course_id.\"' AND u.user_id = cu.user_id\";\n    } else {\n        $sql_users = \"SELECT cu.user_id, u.lastname, u.firstname, u.email\n                      FROM $session_course_rel_user AS cu, $table_user AS u\n                      WHERE\n                        u.status != 1 AND\n                        cu.c_id='\".$course_id.\"' AND\n                        u.user_id = cu.user_id AND\n                        cu.session_id = '\".$session_id.\"'\";\n    }\n\n    if (!empty($studentId)) {\n        $sql_users .= ' AND u.user_id = '.(int) $studentId;\n    }\n\n    $group_id = api_get_group_id();\n    $new_group_user_list = [];\n\n    if ($group_id) {\n        $groupInfo = GroupManager::get_group_properties($group_id);\n        $group_user_list = GroupManager::get_subscribed_users($groupInfo);\n        if (!empty($group_user_list)) {\n            foreach ($group_user_list as $group_user) {\n                $new_group_user_list[] = $group_user['user_id'];\n            }\n        }\n    }\n\n    $result_users = Database::query($sql_users);\n    $users_without_tasks = [];\n    while ($rowUsers = Database::fetch_array($result_users)) {\n        $userId = $rowUsers['user_id'];\n        if (in_array($userId, $users_with_tasks)) {\n            continue;\n        }\n\n        if ($group_id && !in_array($userId, $new_group_user_list)) {\n            continue;\n        }\n\n        if (!empty($users)) {\n            if (!in_array($userId, $users)) {\n                continue;\n            }\n        }\n\n        $row_users = [];\n        $row_users[0] = $rowUsers['lastname'];\n        $row_users[1] = $rowUsers['firstname'];\n        $row_users[2] = Display::encrypted_mailto_link($rowUsers['email']);\n        $row_users[3] = $userId;\n        $users_without_tasks[] = $row_users;\n    }\n\n    return $users_without_tasks;\n}\n\n/**\n * Display list of users who have not given the task.\n *\n * @param int task id\n * @param int $studentId\n *\n * @author cvargas carlos.vargas@beeznest.com cfasanando, christian.fasanado@beeznest.com\n * @author Julio Montoya <gugli100@gmail.com> Fixes\n */\nfunction display_list_users_without_publication($task_id, $studentId = null)\n{\n    $origin = api_get_origin();\n    $table_header[] = [get_lang('LastName'), true];\n    $table_header[] = [get_lang('FirstName'), true];\n    $table_header[] = [get_lang('Email'), true];\n\n    $data = get_list_users_without_publication($task_id);\n\n    $sorting_options = [];\n    $sorting_options['column'] = 1;\n    $paging_options = [];\n    $my_params = [];\n\n    if (isset($_GET['edit_dir'])) {\n        $my_params['edit_dir'] = Security::remove_XSS($_GET['edit_dir']);\n    }\n    if (isset($_GET['list'])) {\n        $my_params['list'] = Security::remove_XSS($_GET['list']);\n    }\n    $my_params['origin'] = $origin;\n    $my_params['id'] = (int) ($_GET['id']);\n\n    //$column_show\n    $column_show[] = 1;\n    $column_show[] = 1;\n    $column_show[] = 1;\n    Display::display_sortable_config_table(\n        'work',\n        $table_header,\n        $data,\n        $sorting_options,\n        $paging_options,\n        $my_params,\n        $column_show\n    );\n}\n\n/**\n * @param int $documentId\n * @param int $workId\n * @param int $courseId\n */\nfunction addDocumentToWork($documentId, $workId, $courseId)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_DOCUMENT);\n    $params = [\n        'document_id' => $documentId,\n        'work_id' => $workId,\n        'c_id' => $courseId,\n    ];\n    Database::insert($table, $params);\n}\n\n/**\n * @param int $documentId\n * @param int $workId\n * @param int $courseId\n *\n * @return array\n */\nfunction getDocumentToWork($documentId, $workId, $courseId)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_DOCUMENT);\n    $params = [\n        'document_id = ? and work_id = ? and c_id = ?' => [$documentId, $workId, $courseId],\n    ];\n\n    return Database::select('*', $table, ['where' => $params]);\n}\n\n/**\n * @param int $documentId\n * @param int $workId\n * @param int $courseId\n * @param int $sessionId\n * @param int $userId\n * @param int $active\n *\n * @return array\n */\nfunction getDocumentToWorkPerUser($documentId, $workId, $courseId, $sessionId, $userId, $active = 1)\n{\n    $workRel = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_DOCUMENT);\n    $work = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n\n    $documentId = (int) $documentId;\n    $workId = (int) $workId;\n    $courseId = (int) $courseId;\n    $userId = (int) $userId;\n    $sessionId = (int) $sessionId;\n    $active = (int) $active;\n    $sessionCondition = api_get_session_condition($sessionId);\n\n    $sql = \"SELECT w.* FROM $work w\n            INNER JOIN $workRel rel\n            ON (w.parent_id = rel.work_id)\n            WHERE\n                w.document_id = $documentId AND\n                w.parent_id = $workId AND\n                w.c_id = $courseId\n                $sessionCondition AND\n                user_id = $userId AND\n                active = $active\n            \";\n\n    $result = Database::query($sql);\n    $workInfo = [];\n    if (Database::num_rows($result)) {\n        $workInfo = Database::fetch_array($result, 'ASSOC');\n    }\n\n    return $workInfo;\n}\n\n/**\n * @param int $workId\n * @param int $courseId\n *\n * @return array\n */\nfunction getAllDocumentToWork($workId, $courseId)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_DOCUMENT);\n    $params = [\n        'work_id = ? and c_id = ?' => [$workId, $courseId],\n    ];\n\n    return Database::select('*', $table, ['where' => $params]);\n}\n\n/**\n * @param int $documentId\n * @param int $workId\n * @param int $courseId\n */\nfunction deleteDocumentToWork($documentId, $workId, $courseId)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_DOCUMENT);\n    $params = [\n        'document_id = ? and work_id = ? and c_id = ?' => [$documentId, $workId, $courseId],\n    ];\n    Database::delete($table, $params);\n}\n\n/**\n * @param int $userId\n * @param int $workId\n * @param int $courseId\n */\nfunction addUserToWork($userId, $workId, $courseId)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_USER);\n    $params = [\n        'user_id' => $userId,\n        'work_id' => $workId,\n        'c_id' => $courseId,\n    ];\n    Database::insert($table, $params);\n}\n\n/**\n * @param int $userId\n * @param int $workId\n * @param int $courseId\n *\n * @return array\n */\nfunction getUserToWork($userId, $workId, $courseId)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_USER);\n    $params = [\n        'user_id = ? and work_id = ? and c_id = ?' => [$userId, $workId, $courseId],\n    ];\n\n    return Database::select('*', $table, ['where' => $params]);\n}\n\n/**\n * @param int  $workId\n * @param int  $courseId\n * @param bool $getCount\n *\n * @return array|int\n */\nfunction getAllUserToWork($workId, $courseId, $getCount = false)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_USER);\n    $params = [\n        'work_id = ? and c_id = ?' => [$workId, $courseId],\n    ];\n    if ($getCount) {\n        $count = 0;\n        $result = Database::select(\n            'count(user_id) as count',\n            $table,\n            ['where' => $params],\n            'simple'\n        );\n        if (!empty($result)) {\n            $count = (int) ($result['count']);\n        }\n\n        return $count;\n    } else {\n        return Database::select('*', $table, ['where' => $params]);\n    }\n}\n\n/**\n * @param int $userId\n * @param int $workId\n * @param int $courseId\n */\nfunction deleteUserToWork($userId, $workId, $courseId)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_USER);\n    $params = [\n        'user_id = ? and work_id = ? and c_id = ?' => [$userId, $workId, $courseId],\n    ];\n    Database::delete($table, $params);\n}\n\n/**\n * @param int $userId\n * @param int $workId\n * @param int $courseId\n *\n * @return bool\n */\nfunction userIsSubscribedToWork($userId, $workId, $courseId)\n{\n    $subscribedUsers = getAllUserToWork($workId, $courseId);\n\n    if (empty($subscribedUsers)) {\n        return true;\n    } else {\n        $subscribedUsersList = [];\n        foreach ($subscribedUsers as $item) {\n            $subscribedUsersList[] = $item['user_id'];\n        }\n        if (in_array($userId, $subscribedUsersList)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Get the list of students that have to submit their work.\n *\n * @param int  $workId    The internal ID of the assignment\n * @param int  $courseId  The course ID\n * @param int  $groupId   The group ID, if any\n * @param int  $sessionId The session ID, if any\n * @param bool $getCount  Whether we want just the amount or the full result\n *\n * @return array|int An integer (if we just asked for the count) or an array of users\n */\nfunction getStudentSubscribedToWork(\n    $workId,\n    $courseId,\n    $groupId = null,\n    $sessionId = null,\n    $getCount = false\n) {\n    $usersInWork = null;\n    $usersInCourse = null;\n\n    if (empty($groupId)) {\n        $courseInfo = api_get_course_info_by_id($courseId);\n        $status = STUDENT;\n        if (!empty($sessionId)) {\n            $status = 0;\n        }\n        $usersInCourse = CourseManager::get_user_list_from_course_code(\n            $courseInfo['code'],\n            $sessionId,\n            null,\n            null,\n            $status,\n            $getCount\n        );\n    } else {\n        $usersInCourse = GroupManager::get_users(\n            $groupId,\n            false,\n            null,\n            null,\n            $getCount,\n            $courseId\n        );\n    }\n\n    $usersInWork = getAllUserToWork($workId, $courseId, $getCount);\n\n    if (empty($usersInWork)) {\n        return $usersInCourse;\n    } else {\n        return $usersInWork;\n    }\n}\n\n/**\n * @param int  $userId\n * @param int  $workId\n * @param int  $courseId\n * @param bool $forceAccessForCourseAdmins\n *\n * @return bool\n */\nfunction allowOnlySubscribedUser($userId, $workId, $courseId, $forceAccessForCourseAdmins = false)\n{\n    if (api_is_platform_admin() || api_is_allowed_to_edit()) {\n        return true;\n    }\n\n    if ($forceAccessForCourseAdmins) {\n        if (api_is_course_admin() || api_is_coach()) {\n            return true;\n        }\n    }\n\n    return userIsSubscribedToWork($userId, $workId, $courseId);\n}\n\n/**\n * @param int   $workId\n * @param array $courseInfo\n * @param int   $documentId\n *\n * @return array\n */\nfunction getDocumentTemplateFromWork($workId, $courseInfo, $documentId)\n{\n    $documents = getAllDocumentToWork($workId, $courseInfo['real_id']);\n    if (!empty($documents)) {\n        foreach ($documents as $doc) {\n            if ($documentId != $doc['document_id']) {\n                continue;\n            }\n            $docData = DocumentManager::get_document_data_by_id($doc['document_id'], $courseInfo['code']);\n            $fileInfo = pathinfo($docData['path']);\n            if ('html' == $fileInfo['extension']) {\n                if (file_exists($docData['absolute_path']) && is_file($docData['absolute_path'])) {\n                    $docData['file_content'] = file_get_contents($docData['absolute_path']);\n\n                    return $docData;\n                }\n            }\n        }\n    }\n\n    return [];\n}\n\n/**\n * @param int   $workId\n * @param array $courseInfo\n *\n * @return string\n */\nfunction getAllDocumentsFromWorkToString($workId, $courseInfo)\n{\n    $documents = getAllDocumentToWork($workId, $courseInfo['real_id']);\n    $content = null;\n    if (!empty($documents)) {\n        $content .= '<ul class=\"nav nav-list well\">';\n        $content .= '<li class=\"nav-header\">'.get_lang('Documents').'</li>';\n        foreach ($documents as $doc) {\n            $docData = DocumentManager::get_document_data_by_id($doc['document_id'], $courseInfo['code']);\n            if ($docData) {\n                $content .= '<li><a class=\"link_to_download\" target=\"_blank\" href=\"'.$docData['url'].'\">'.$docData['title'].'</a></li>';\n            }\n        }\n        $content .= '</ul><br />';\n    }\n\n    return $content;\n}\n\n/**\n * Returns fck editor toolbar.\n *\n * @return array\n */\nfunction getWorkDescriptionToolbar()\n{\n    return [\n        'ToolbarStartExpanded' => 'true',\n        'ToolbarSet' => 'Work',\n        'Width' => '100%',\n        'Height' => '400',\n    ];\n}\n\n/**\n * @param array $work\n *\n * @return array\n */\nfunction getWorkComments($work)\n{\n    $commentTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT_COMMENT);\n    $userTable = Database::get_main_table(TABLE_MAIN_USER);\n\n    $courseId = (int) $work['c_id'];\n    $workId = (int) $work['id'];\n\n    if (empty($courseId) || empty($workId)) {\n        return [];\n    }\n\n    $sql = \"SELECT\n                c.id,\n                c.user_id\n            FROM $commentTable c\n            INNER JOIN $userTable u\n            ON (u.id = c.user_id)\n            WHERE c_id = $courseId AND work_id = $workId\n            ORDER BY sent_at\n            \";\n    $result = Database::query($sql);\n    $comments = Database::store_result($result, 'ASSOC');\n    if (!empty($comments)) {\n        foreach ($comments as &$comment) {\n            $userInfo = api_get_user_info($comment['user_id']);\n            $comment['picture'] = $userInfo['avatar'];\n            $comment['complete_name'] = $userInfo['complete_name_with_username'];\n            $commentInfo = getWorkComment($comment['id']);\n            if (!empty($commentInfo)) {\n                $comment = array_merge($comment, $commentInfo);\n            }\n        }\n    }\n\n    return $comments;\n}\n\n/**\n * Get total score from a work list.\n *\n * @param $workList\n *\n * @return int|null\n */\nfunction getTotalWorkScore($workList)\n{\n    $count = 0;\n    foreach ($workList as $data) {\n        $count += $data['qualification_score'];\n    }\n\n    return $count;\n}\n\n/**\n * Get comment count from a work list (docs sent by students).\n *\n * @param array $workList\n * @param array $courseInfo\n *\n * @return int|null\n */\nfunction getTotalWorkComment($workList, $courseInfo = [])\n{\n    if (empty($courseInfo)) {\n        $courseInfo = api_get_course_info();\n    }\n\n    $count = 0;\n    foreach ($workList as $data) {\n        $count += getWorkCommentCount($data['id'], $courseInfo);\n    }\n\n    return $count;\n}\n\n/**\n * Get comment count for a specific work sent by a student.\n *\n * @param int   $id\n * @param array $courseInfo\n *\n * @return int\n */\nfunction getWorkCommentCount($id, $courseInfo = [])\n{\n    if (empty($courseInfo)) {\n        $courseInfo = api_get_course_info();\n    }\n\n    $commentTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT_COMMENT);\n    $id = (int) $id;\n\n    $sql = \"SELECT count(*) as count\n            FROM $commentTable\n            WHERE work_id = $id AND c_id = \".$courseInfo['real_id'];\n\n    $result = Database::query($sql);\n    if (Database::num_rows($result)) {\n        $comment = Database::fetch_array($result);\n\n        return $comment['count'];\n    }\n\n    return 0;\n}\n\n/**\n * Get comment count for a specific parent.\n *\n * @param int   $parentId\n * @param array $courseInfo\n * @param int   $sessionId\n *\n * @return int\n */\nfunction getWorkCommentCountFromParent(\n    $parentId,\n    $courseInfo = [],\n    $sessionId = 0\n) {\n    if (empty($courseInfo)) {\n        $courseInfo = api_get_course_info();\n    }\n\n    if (empty($sessionId)) {\n        $sessionId = api_get_session_id();\n    } else {\n        $sessionId = (int) $sessionId;\n    }\n\n    $work = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $commentTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT_COMMENT);\n    $parentId = (int) $parentId;\n    $sessionCondition = api_get_session_condition($sessionId, false, false, 'w.session_id');\n\n    $sql = \"SELECT count(*) as count\n            FROM $commentTable c INNER JOIN $work w\n            ON c.c_id = w.c_id AND w.id = c.work_id\n            WHERE\n                $sessionCondition AND\n                parent_id = $parentId AND\n                w.c_id = \".$courseInfo['real_id'];\n\n    $result = Database::query($sql);\n    if (Database::num_rows($result)) {\n        $comment = Database::fetch_array($result);\n\n        return $comment['count'];\n    }\n\n    return 0;\n}\n\n/**\n * Get last work information from parent.\n *\n * @param int   $parentId\n * @param array $courseInfo\n * @param int   $sessionId\n *\n * @return int\n */\nfunction getLastWorkStudentFromParent(\n    $parentId,\n    $courseInfo = [],\n    $sessionId = 0\n) {\n    if (empty($courseInfo)) {\n        $courseInfo = api_get_course_info();\n    }\n\n    if (empty($sessionId)) {\n        $sessionId = api_get_session_id();\n    } else {\n        $sessionId = (int) $sessionId;\n    }\n\n    $work = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $sessionCondition = api_get_session_condition($sessionId, false);\n    $commentTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT_COMMENT);\n    $parentId = (int) $parentId;\n\n    $sql = \"SELECT w.*\n            FROM $commentTable c INNER JOIN $work w\n            ON c.c_id = w.c_id AND w.id = c.work_id\n            WHERE\n                $sessionCondition AND\n                parent_id = $parentId AND\n                w.c_id = \".$courseInfo['real_id'].'\n            ORDER BY w.sent_date\n            LIMIT 1\n            ';\n\n    $result = Database::query($sql);\n    if (Database::num_rows($result)) {\n        return Database::fetch_array($result, 'ASSOC');\n    }\n\n    return [];\n}\n\n/**\n * Get last work information from parent.\n *\n * @param int   $userId\n * @param array $parentInfo\n * @param array $courseInfo\n * @param int   $sessionId\n *\n * @return int\n */\nfunction getLastWorkStudentFromParentByUser(\n    $userId,\n    $parentInfo,\n    $courseInfo = [],\n    $sessionId = 0\n) {\n    if (empty($courseInfo)) {\n        $courseInfo = api_get_course_info();\n    }\n\n    if (empty($sessionId)) {\n        $sessionId = api_get_session_id();\n    } else {\n        $sessionId = (int) $sessionId;\n    }\n\n    $userId = (int) $userId;\n    $work = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    if (empty($parentInfo)) {\n        return false;\n    }\n    $parentId = $parentInfo['id'];\n\n    $sessionCondition = api_get_session_condition($sessionId);\n\n    $sql = \"SELECT *\n            FROM $work\n            WHERE\n                user_id = $userId\n                $sessionCondition AND\n                parent_id = $parentId AND\n                c_id = \".$courseInfo['real_id'].\"\n            ORDER BY sent_date DESC\n            LIMIT 1\n            \";\n    $result = Database::query($sql);\n    if (Database::num_rows($result)) {\n        $work = Database::fetch_array($result, 'ASSOC');\n        $work['qualification_rounded'] = formatWorkScore($work['qualification'], $parentInfo['qualification']);\n\n        return $work;\n    }\n\n    return [];\n}\n\n/**\n * @param float $score\n * @param int   $weight\n *\n * @return string\n */\nfunction formatWorkScore($score, $weight)\n{\n    $label = 'info';\n    $weight = (int) $weight;\n    $relativeScore = 0;\n    if (!empty($weight)) {\n        $relativeScore = $score / $weight;\n    }\n\n    if ($relativeScore < 0.5) {\n        $label = 'important';\n    } elseif ($relativeScore < 0.75) {\n        $label = 'warning';\n    }\n\n    $scoreBasedInModel = ExerciseLib::convertScoreToModel($relativeScore * 100);\n    if (empty($scoreBasedInModel)) {\n        $finalScore = api_number_format($score, 1).' / '.$weight;\n\n        return Display::label(\n            $finalScore,\n            $label\n        );\n    } else {\n        return $scoreBasedInModel;\n    }\n}\n\n/**\n * @param int   $id         comment id\n * @param array $courseInfo\n *\n * @return string\n */\nfunction getWorkComment($id, $courseInfo = [])\n{\n    if (empty($courseInfo)) {\n        $courseInfo = api_get_course_info();\n    }\n\n    if (empty($courseInfo['real_id'])) {\n        return [];\n    }\n\n    $commentTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT_COMMENT);\n    $id = intval($id);\n\n    $sql = \"SELECT * FROM $commentTable\n            WHERE id = $id AND c_id = \".$courseInfo['real_id'];\n    $result = Database::query($sql);\n    $comment = [];\n    if (Database::num_rows($result)) {\n        $comment = Database::fetch_array($result, 'ASSOC');\n        $filePath = null;\n        $fileUrl = null;\n        $deleteUrl = null;\n        $fileName = null;\n        if (!empty($comment['file'])) {\n            $work = get_work_data_by_id($comment['work_id']);\n            $workParent = get_work_data_by_id($work['parent_id']);\n            $filePath = api_get_path(SYS_COURSE_PATH).$courseInfo['path'].'/work/'.$workParent['url'].'/'.$comment['file'];\n            $fileUrl = api_get_path(WEB_CODE_PATH).'work/download_comment_file.php?comment_id='.$id.'&'.api_get_cidreq();\n            $deleteUrl = api_get_path(WEB_CODE_PATH).'work/view.php?'.api_get_cidreq().'&id='.$comment['work_id'].'&action=delete_attachment&comment_id='.$id;\n            $fileParts = explode('_', $comment['file']);\n            $fileName = str_replace($fileParts[0].'_'.$fileParts[1].'_', '', $comment['file']);\n        }\n        $comment['delete_file_url'] = $deleteUrl;\n        $comment['file_path'] = $filePath;\n        $comment['file_url'] = $fileUrl;\n        $comment['file_name_to_show'] = $fileName;\n        $comment['sent_at_with_label'] = Display::dateToStringAgoAndLongDate($comment['sent_at']);\n    }\n\n    return $comment;\n}\n\n/**\n * @param int   $id\n * @param array $courseInfo\n */\nfunction deleteCommentFile($id, $courseInfo = [])\n{\n    $workComment = getWorkComment($id, $courseInfo);\n    if (isset($workComment['file']) && !empty($workComment['file'])) {\n        if (file_exists($workComment['file_path'])) {\n            $result = my_delete($workComment['file_path']);\n            if ($result) {\n                $commentTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT_COMMENT);\n                $params = ['file' => ''];\n                Database::update(\n                    $commentTable,\n                    $params,\n                    ['id = ? AND c_id = ? ' => [$workComment['id'], $workComment['c_id']]]\n                );\n            }\n        }\n    }\n}\n\n/**\n * Adds a comments to the work document.\n *\n * @param array $courseInfo\n * @param int   $userId\n * @param array $parentWork\n * @param array $work\n * @param array $data\n *\n * @return int\n */\nfunction addWorkComment($courseInfo, $userId, $parentWork, $work, $data)\n{\n    $fileData = isset($data['attachment']) ? $data['attachment'] : null;\n    $commentTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT_COMMENT);\n\n    // If no attachment and no comment then don't save comment\n    if (empty($fileData['name']) && empty($data['comment'])) {\n        return false;\n    }\n\n    $params = [\n        'work_id' => $work['id'],\n        'c_id' => $work['c_id'],\n        'user_id' => $userId,\n        'comment' => $data['comment'],\n        'sent_at' => api_get_utc_datetime(),\n    ];\n\n    $commentId = Database::insert($commentTable, $params);\n\n    if ($commentId) {\n        Display::addFlash(\n            Display::return_message(get_lang('CommentAdded'))\n        );\n\n        $sql = \"UPDATE $commentTable SET id = iid WHERE iid = $commentId\";\n        Database::query($sql);\n    }\n\n    $userIdListToSend = [];\n    if (api_is_allowed_to_edit()) {\n        if (isset($data['send_email']) && $data['send_email']) {\n            // Teacher sends a feedback\n            $userIdListToSend = [$work['user_id']];\n        }\n    } else {\n        $sessionId = api_get_session_id();\n        if (empty($sessionId)) {\n            $teachers = CourseManager::get_teacher_list_from_course_code(\n                $courseInfo['code']\n            );\n            if (!empty($teachers)) {\n                $userIdListToSend = array_keys($teachers);\n            }\n        } else {\n            $teachers = SessionManager::getCoachesByCourseSession(\n                $sessionId,\n                $courseInfo['real_id']\n            );\n\n            if (!empty($teachers)) {\n                $userIdListToSend = array_values($teachers);\n            }\n        }\n\n        $sendNotification = api_get_course_setting('email_to_teachers_on_new_work_feedback');\n        if ($sendNotification != 1) {\n            $userIdListToSend = [];\n        }\n    }\n\n    $url = api_get_path(WEB_CODE_PATH).'work/view.php?'.api_get_cidreq().'&id='.$work['id'];\n    $subject = sprintf(get_lang('ThereIsANewWorkFeedback'), $parentWork['title']);\n    $content = sprintf(get_lang('ThereIsANewWorkFeedbackInWorkXHere'), $work['title'], $url);\n\n    if (!empty($data['comment'])) {\n        $content .= '<br /><b>'.get_lang('Comment').':</b><br />'.$data['comment'];\n    }\n\n    if (!empty($userIdListToSend)) {\n        foreach ($userIdListToSend as $userIdToSend) {\n            MessageManager::send_message_simple(\n                $userIdToSend,\n                $subject,\n                $content\n            );\n        }\n    }\n\n    if (!empty($commentId) && !empty($fileData)) {\n        $workParent = get_work_data_by_id($work['parent_id']);\n        if (!empty($workParent)) {\n            $uploadDir = api_get_path(SYS_COURSE_PATH).$courseInfo['path'].'/work'.$workParent['url'];\n            $newFileName = 'comment_'.$commentId.'_'.php2phps(api_replace_dangerous_char($fileData['name']));\n            $newFilePath = $uploadDir.'/'.$newFileName;\n            $result = move_uploaded_file($fileData['tmp_name'], $newFilePath);\n            if ($result) {\n                $params = ['file' => $newFileName];\n                Database::update(\n                    $commentTable,\n                    $params,\n                    ['id = ? AND c_id = ? ' => [$commentId, $work['c_id']]]\n                );\n            }\n        }\n    }\n}\n\n/**\n * @param array $work\n * @param array $workParent\n *\n * @return string\n */\nfunction getWorkCommentForm($work, $workParent)\n{\n    $url = api_get_path(WEB_CODE_PATH).'work/view.php?id='.$work['id'].'&action=send_comment&'.api_get_cidreq();\n    $form = new FormValidator(\n        'work_comment',\n        'post',\n        $url,\n        '',\n        ['enctype' => \"multipart/form-data\"]\n    );\n\n    $qualification = $workParent['qualification'];\n\n    $isCourseManager = api_is_platform_admin() || api_is_coach() || api_is_allowed_to_edit(false, false, true);\n    $allowEdition = false;\n    if ($isCourseManager) {\n        $allowEdition = true;\n        if (!empty($work['qualification']) && api_get_configuration_value('block_student_publication_score_edition')) {\n            $allowEdition = false;\n        }\n    }\n\n    if (api_is_platform_admin()) {\n        $allowEdition = true;\n    }\n\n    if ($allowEdition) {\n        if (!empty($qualification) && intval($qualification) > 0) {\n            $model = ExerciseLib::getCourseScoreModel();\n            if (empty($model)) {\n                $form->addFloat(\n                    'qualification',\n                    [get_lang('Qualification'), \" / \".$qualification],\n                    false,\n                    [],\n                    false,\n                    0,\n                    $qualification\n                );\n            } else {\n                ExerciseLib::addScoreModelInput(\n                    $form,\n                    'qualification',\n                    $qualification,\n                    $work['qualification']\n                );\n            }\n            $form->addFile('file', get_lang('Correction'));\n            $form->setDefaults(['qualification' => $work['qualification']]);\n        }\n    }\n\n    Skill::addSkillsToUserForm($form, ITEM_TYPE_STUDENT_PUBLICATION, $workParent['id'], $work['user_id'], $work['id']);\n    $form->addHtmlEditor('comment', get_lang('Comment'), false);\n    $form->addFile('attachment', get_lang('Attachment'));\n    $form->addElement('hidden', 'id', $work['id']);\n\n    if (api_is_allowed_to_edit()) {\n        $form->addCheckBox(\n            'send_email',\n            null,\n            get_lang('SendMailToStudent')\n        );\n    }\n\n    $form->addButtonSend(get_lang('Send'), 'button', false, ['onclick' => 'this.form.submit();this.disabled=true;']);\n\n    return $form->returnForm();\n}\n\n/**\n * @param array $homework result of get_work_assignment_by_id()\n *\n * @return array\n */\nfunction getWorkDateValidationStatus($homework)\n{\n    $message = null;\n    $has_expired = false;\n    $has_ended = false;\n\n    if (!empty($homework)) {\n        if (!empty($homework['expires_on']) || !empty($homework['ends_on'])) {\n            $time_now = time();\n\n            if (!empty($homework['expires_on'])) {\n                $time_expires = api_strtotime($homework['expires_on'], 'UTC');\n                $difference = $time_expires - $time_now;\n                if ($difference < 0) {\n                    $has_expired = true;\n                }\n            }\n\n            if (empty($homework['expires_on'])) {\n                $has_expired = false;\n            }\n\n            if (!empty($homework['ends_on'])) {\n                $time_ends = api_strtotime($homework['ends_on'], 'UTC');\n                $difference2 = $time_ends - $time_now;\n                if ($difference2 < 0) {\n                    $has_ended = true;\n                }\n            }\n\n            $ends_on = api_convert_and_format_date($homework['ends_on']);\n            $expires_on = api_convert_and_format_date($homework['expires_on']);\n        }\n\n        if ($has_ended) {\n            $message = Display::return_message(get_lang('EndDateAlreadyPassed').' '.$ends_on, 'error');\n        } elseif ($has_expired) {\n            $message = Display::return_message(get_lang('ExpiryDateAlreadyPassed').' '.$expires_on, 'warning');\n        } else {\n            if ($has_expired) {\n                $message = Display::return_message(get_lang('ExpiryDateToSendWorkIs').' '.$expires_on);\n            }\n        }\n    }\n\n    return [\n        'message' => $message,\n        'has_ended' => $has_ended,\n        'has_expired' => $has_expired,\n    ];\n}\n\n/**\n * @param FormValidator $form\n * @param int           $uploadFormType\n */\nfunction setWorkUploadForm($form, $uploadFormType = 0)\n{\n    $form->addHeader(get_lang('UploadADocument'));\n    $form->addHidden('contains_file', 0, ['id' => 'contains_file_id']);\n    $form->addHidden('active', 1);\n    $form->addHidden('accepted', 1);\n    $form->addElement('text', 'title', get_lang('Title'), ['id' => 'file_upload']);\n    $form->addElement(\n        'text',\n        'extension',\n        get_lang('FileExtension'),\n        ['id' => 'file_extension', 'readonly' => 'readonly']\n    );\n    $form->addRule('title', get_lang('ThisFieldIsRequired'), 'required');\n\n    switch ($uploadFormType) {\n        case 0:\n            // File and text.\n            $form->addElement(\n                'file',\n                'file',\n                get_lang('UploadADocument'),\n                'size=\"40\" onchange=\"updateDocumentTitle(this.value)\"'\n            );\n            $form->addProgress();\n            $form->addHtmlEditor('description', get_lang('Description'), false, false, getWorkDescriptionToolbar());\n            break;\n        case 1:\n            // Only text.\n            $form->addHtmlEditor('description', get_lang('Description'), false, false, getWorkDescriptionToolbar());\n            $form->addRule('description', get_lang('ThisFieldIsRequired'), 'required');\n            break;\n        case 2:\n            // Only file.\n            /*$form->addElement(\n                'file',\n                'file',\n                get_lang('UploadADocument'),\n                'size=\"40\" onchange=\"updateDocumentTitle(this.value)\"'\n            );\n            $form->addProgress();\n            */\n            $form->addElement('BigUpload', 'file', get_lang('UploadADocument'), ['id' => 'bigUploadFile', 'data-origin' => 'work']);\n            $form->addRule('file', get_lang('ThisFieldIsRequired'), 'required');\n            break;\n    }\n\n    $form->addButtonUpload(get_lang('Upload'), 'submitWork');\n}\n\n/**\n * @param array $my_folder_data\n * @param array $_course\n * @param bool  $isCorrection\n * @param array $workInfo\n * @param array $file\n *\n * @return array\n */\nfunction uploadWork($my_folder_data, $_course, $isCorrection = false, $workInfo = [], $file = [])\n{\n    if (isset($_FILES['file']) && !empty($_FILES['file'])) {\n        $file = $_FILES['file'];\n    }\n\n    if (empty($file['size'])) {\n        return [\n            'error' => Display::return_message(\n                get_lang('UplUploadFailedSizeIsZero'),\n                'error'\n            ),\n        ];\n    }\n    $updir = api_get_path(SYS_COURSE_PATH).$_course['path'].'/work/'; //directory path to upload\n\n    // Try to add an extension to the file if it has'nt one\n    $filename = add_ext_on_mime(stripslashes($file['name']), $file['type']);\n\n    // Replace dangerous characters\n    $filename = api_replace_dangerous_char($filename);\n\n    // Transform any .php file in .phps fo security\n    $filename = php2phps($filename);\n    $filesize = filesize($file['tmp_name']);\n\n    if (empty($filesize)) {\n        return [\n            'error' => Display::return_message(\n                get_lang('UplUploadFailedSizeIsZero'),\n                'error'\n            ),\n        ];\n    } elseif (!filter_extension($new_file_name)) {\n        return [\n            'error' => Display::return_message(\n                get_lang('UplUnableToSaveFileFilteredExtension'),\n                'error'\n            ),\n        ];\n    }\n\n    $totalSpace = DocumentManager::documents_total_space($_course['real_id']);\n    $course_max_space = DocumentManager::get_course_quota($_course['code']);\n    $total_size = $filesize + $totalSpace;\n\n    if ($total_size > $course_max_space) {\n        return [\n            'error' => Display::return_message(get_lang('NoSpace'), 'error'),\n        ];\n    }\n\n    // Compose a unique file name to avoid any conflict\n    $new_file_name = api_get_unique_id();\n\n    if ($isCorrection) {\n        if (!empty($workInfo['url'])) {\n            $new_file_name = basename($workInfo['url']).'_correction';\n        } else {\n            $new_file_name = $new_file_name.'_correction';\n        }\n    }\n\n    $curdirpath = basename($my_folder_data['url']);\n\n    // If we come from the group tools the groupid will be saved in $work_table\n    if (is_dir($updir.$curdirpath) || empty($curdirpath)) {\n        if (isset($file['copy_file'])) {\n            $result = copy(\n                $file['tmp_name'],\n                $updir.$curdirpath.'/'.$new_file_name\n            );\n            unlink($file['tmp_name']);\n        } else {\n            $result = move_uploaded_file(\n                $file['tmp_name'],\n                $updir.$curdirpath.'/'.$new_file_name\n            );\n        }\n    } else {\n        return [\n            'error' => Display::return_message(\n                get_lang('FolderDoesntExistsInFileSystem'),\n                'error'\n            ),\n        ];\n    }\n\n    if ($result) {\n        $url = 'work/'.$curdirpath.'/'.$new_file_name;\n    } else {\n        return false;\n    }\n\n    return [\n        'url' => $url,\n        'filename' => $filename,\n        'filesize' => $filesize,\n        'error' => '',\n    ];\n}\n\n/**\n * Send an e-mail to users related to this work.\n *\n * @param array $workInfo\n * @param int   $workId\n * @param array $courseInfo\n * @param int   $sessionId\n */\nfunction sendAlertToUsers($workInfo, $workId, $courseInfo, $sessionId = 0)\n{\n    $sessionId = (int) $sessionId;\n\n    if (empty($workInfo) || empty($courseInfo) || empty($workId)) {\n        return false;\n    }\n\n    $courseCode = $courseInfo['code'];\n\n    $workData = get_work_data_by_id($workId, $courseInfo['real_id'], $sessionId);\n    // last value is to check this is not \"just\" an edit\n    // YW Tis part serve to send a e-mail to the tutors when a new file is sent\n    $send = api_get_course_setting('email_alert_manager_on_new_doc');\n\n    $userList = [];\n    if ($send == SEND_EMAIL_EVERYONE || $send == SEND_EMAIL_TEACHERS) {\n        // Lets predefine some variables. Be sure to change the from address!\n        if (empty($sessionId)) {\n            // Teachers\n            $userList = CourseManager::get_user_list_from_course_code(\n                $courseCode,\n                null,\n                null,\n                null,\n                COURSEMANAGER\n            );\n        } else {\n            // Coaches\n            $userList = CourseManager::get_user_list_from_course_code(\n                $courseCode,\n                $sessionId,\n                null,\n                null,\n                2\n            );\n        }\n    }\n\n    if ($send == SEND_EMAIL_EVERYONE || $send == SEND_EMAIL_STUDENTS) {\n        // Send mail only to sender\n        $studentList = [[\n           'user_id' => api_get_user_id(),\n        ]];\n        $userList = array_merge($userList, $studentList);\n    }\n\n    if ($send) {\n        $folderUrl = api_get_path(WEB_CODE_PATH).\"work/work_list_all.php?cidReq=\".$courseInfo['code'].\"&id_session=\".$sessionId.\"&id=\".$workInfo['id'];\n        $fileUrl = api_get_path(WEB_CODE_PATH).\"work/view.php?cidReq=\".$courseInfo['code'].\"&id_session=\".$sessionId.\"&id=\".$workData['id'];\n\n        foreach ($userList as $userData) {\n            $userId = $userData['user_id'];\n            $userInfo = api_get_user_info($userId);\n            if (empty($userInfo)) {\n                continue;\n            }\n\n            $userPostedADocument = sprintf(\n                get_lang('UserXPostedADocumentInCourseX'),\n                $userInfo['complete_name'],\n                $courseInfo['name']\n            );\n\n            $subject = \"[\".api_get_setting('siteName').\"] \".$userPostedADocument;\n            $message = $userPostedADocument.\"<br />\";\n            $message .= get_lang('DateSent').\" : \".api_format_date(api_get_local_time()).\"<br />\";\n            $message .= get_lang('AssignmentName').\" : \".Display::url($workInfo['title'], $folderUrl).\"<br />\";\n            $message .= get_lang('Filename').\" : \".$workData['title'].\"<br />\";\n            $message .= '<a href=\"'.$fileUrl.'\">'.get_lang('DownloadLink').\"</a><br />\";\n\n            MessageManager::send_message_simple(\n                $userId,\n                $subject,\n                $message,\n                0,\n                false,\n                false,\n                [],\n                false\n            );\n        }\n    }\n}\n\n/**\n * Check if the current uploaded work filename already exists in the current assement.\n *\n * @param string $filename\n * @param int    $workId\n *\n * @return array\n */\nfunction checkExistingWorkFileName($filename, $workId)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $filename = Database::escape_string($filename);\n    $workId = (int) $workId;\n\n    $sql = \"SELECT title FROM $table\n            WHERE parent_id = $workId AND title = '$filename' AND active = 1\";\n    $result = Database::query($sql);\n\n    return Database::fetch_assoc($result);\n}\n\n/**\n * @param array $workInfo\n * @param array $values\n * @param array $courseInfo\n * @param int   $sessionId\n * @param int   $groupId\n * @param int   $userId\n * @param array $file\n * @param bool  $checkDuplicated\n * @param bool  $showFlashMessage\n *\n * @return string|null\n */\nfunction processWorkForm(\n    $workInfo,\n    $values,\n    $courseInfo,\n    $sessionId,\n    $groupId,\n    $userId,\n    $file = [],\n    $checkDuplicated = false,\n    $showFlashMessage = true\n) {\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n\n    $courseId = $courseInfo['real_id'];\n    $groupId = (int) $groupId;\n    $sessionId = (int) $sessionId;\n    $userId = (int) $userId;\n\n    $extension = '';\n    if (isset($values['extension'])) {\n        $extension = $values['extension'];\n    } else {\n        $fileInfo = pathinfo($values['title']);\n        if (isset($fileInfo['extension']) && !empty($fileInfo['extension'])) {\n            $extension = '.'.$fileInfo['extension'];\n            $values['title'] = $fileInfo['filename'];\n        }\n    }\n\n    $title = $values['title'].$extension;\n    $description = isset($values['description']) ? $values['description'] : '';\n    $containsFile = isset($values['contains_file']) && !empty($values['contains_file']) ? (int) $values['contains_file'] : 0;\n\n    $saveWork = true;\n    $filename = null;\n    $url = null;\n    $filesize = null;\n    $workData = [];\n    $message = null;\n\n    if ($containsFile) {\n        $saveWork = false;\n        if ($checkDuplicated) {\n            if (checkExistingWorkFileName($file['name'], $workInfo['id'])) {\n                $saveWork = false;\n                $result['error'] = get_lang('YouAlreadySentThisFile');\n                $workData['error'] = get_lang('UplAlreadyExists');\n            } else {\n                $result = uploadWork($workInfo, $courseInfo, false, [], $file);\n            }\n        } else {\n            $result = uploadWork($workInfo, $courseInfo, false, [], $file);\n        }\n\n        if (isset($result['error'])) {\n            $saveWork = false;\n            if ($showFlashMessage) {\n                $message = $result['error'];\n            }\n            if (empty($result['error']) && isset($result['url']) && !empty($result['url'])) {\n                $saveWork = true;\n            }\n        }\n    }\n\n    if ($saveWork) {\n        $filename = isset($result['filename']) ? $result['filename'] : null;\n        if (empty($title)) {\n            $title = isset($result['title']) && !empty($result['title']) ? $result['title'] : get_lang('Untitled');\n        }\n        $filesize = isset($result['filesize']) ? $result['filesize'] : null;\n        $url = isset($result['url']) ? $result['url'] : null;\n    }\n\n    if (empty($title)) {\n        $title = get_lang('Untitled');\n    }\n\n    $groupIid = 0;\n    $groupInfo = [];\n    if ($groupId) {\n        $groupInfo = GroupManager::get_group_properties($groupId);\n        $groupIid = $groupInfo['iid'];\n    }\n\n    if ($saveWork) {\n        $active = '1';\n        $params = [\n            'c_id' => $courseId,\n            'url' => $url,\n            'filetype' => 'file',\n            'title' => $title,\n            'description' => $description,\n            'contains_file' => $containsFile,\n            'active' => $active,\n            'accepted' => '1',\n            'qualificator_id' => 0,\n            'document_id' => 0,\n            'weight' => 0,\n            'allow_text_assignment' => 0,\n            'post_group_id' => $groupIid,\n            'sent_date' => api_get_utc_datetime(),\n            'parent_id' => $workInfo['id'],\n            'session_id' => $sessionId ? $sessionId : null,\n            'user_id' => $userId,\n            'has_properties' => 0,\n            'qualification' => 0,\n            //'filesize' => $filesize\n        ];\n        $workId = Database::insert($work_table, $params);\n\n        if ($workId) {\n            $sql = \"UPDATE $work_table SET id = iid WHERE iid = $workId \";\n            Database::query($sql);\n\n            if (array_key_exists('filename', $workInfo) && !empty($filename)) {\n                $filename = Database::escape_string($filename);\n                $sql = \"UPDATE $work_table SET\n                            filename = '$filename'\n                        WHERE iid = $workId\";\n                Database::query($sql);\n            }\n\n            if (array_key_exists('document_id', $workInfo)) {\n                $documentId = isset($values['document_id']) ? (int) $values['document_id'] : 0;\n                $sql = \"UPDATE $work_table SET\n                            document_id = '$documentId'\n                        WHERE iid = $workId\";\n                Database::query($sql);\n            }\n\n            api_item_property_update(\n                $courseInfo,\n                'work',\n                $workId,\n                'DocumentAdded',\n                $userId,\n                $groupInfo\n            );\n            sendAlertToUsers($workInfo, $workId, $courseInfo, $sessionId);\n            Event::event_upload($workId);\n\n            // The following feature requires the creation of a work-type\n            // extra_field and the following setting in the configuration file\n            // (until moved to the database). It allows te teacher to set a\n            // \"considered work time\", meaning the time we assume a student\n            // would have spent, approximately, to prepare the task before\n            // handing it in Chamilo, adding this time to the student total\n            // course use time, as a register of time spent *before* his\n            // connection to the platform to hand the work in.\n            $consideredWorkingTime = api_get_configuration_value('considered_working_time');\n\n            if (!empty($consideredWorkingTime)) {\n                // Get the \"considered work time\" defined for this work\n                $fieldValue = new ExtraFieldValue('work');\n                $resultExtra = $fieldValue->getAllValuesForAnItem(\n                    $workInfo['iid'], //the ID of the work *folder*, not the document uploaded by the student\n                    true\n                );\n\n                $workingTime = null;\n                foreach ($resultExtra as $field) {\n                    $field = $field['value'];\n                    if ($consideredWorkingTime == $field->getField()->getVariable()) {\n                        $workingTime = $field->getValue();\n                    }\n                }\n\n                // If no time was defined, or a time of \"0\" was set, do nothing\n                if (!empty($workingTime)) {\n                    // If some time is set, get the list of docs handed in by\n                    // this student (to make sure we count the time only once)\n                    $userWorks = get_work_user_list(\n                        0,\n                        100,\n                        null,\n                        null,\n                        $workInfo['id'],\n                        null,\n                        $userId,\n                        false,\n                        $courseId,\n                        $sessionId\n                    );\n\n                    if (1 == count($userWorks)) {\n                        // The student only uploaded one doc so far, so add the\n                        // considered work time to his course connection time\n                        Event::eventAddVirtualCourseTime(\n                            $courseId,\n                            $userId,\n                            $sessionId,\n                            $workingTime,\n                            $workInfo['iid']\n                        );\n                    }\n                }\n            }\n            $workData = get_work_data_by_id($workId);\n            if ($workData && $showFlashMessage) {\n                Display::addFlash(Display::return_message(get_lang('DocAdd')));\n            }\n        }\n    } else {\n        if ($showFlashMessage) {\n            Display::addFlash(\n                Display::return_message(\n                    $message ? $message : get_lang('ImpossibleToSaveTheDocument'),\n                    'error'\n                )\n            );\n        }\n    }\n\n    return $workData;\n}\n\n/**\n * Creates a new task (directory) in the assignment tool.\n *\n * @param array $formValues\n * @param int   $user_id\n * @param array $courseInfo\n * @param int   $groupId\n * @param int   $sessionId\n *\n * @return bool|int\n * @note $params can have the following elements, but should at least have the 2 first ones: (\n *       'new_dir' => 'some-name',\n *       'description' => 'some-desc',\n *       'qualification' => 20 (e.g. 20),\n *       'weight' => 50 (percentage) to add to gradebook (e.g. 50),\n *       'allow_text_assignment' => 0/1/2,\n *\n * @todo Rename createAssignment or createWork, or something like that\n */\nfunction addDir($formValues, $user_id, $courseInfo, $groupId, $sessionId = 0)\n{\n    $em = Database::getManager();\n\n    $user_id = (int) $user_id;\n    $groupId = (int) $groupId;\n    $sessionId = (int) $sessionId;\n\n    $groupIid = 0;\n    $groupInfo = [];\n    if (!empty($groupId)) {\n        $groupInfo = GroupManager::get_group_properties($groupId);\n        $groupIid = $groupInfo['iid'];\n    }\n    $session = $em->find('ChamiloCoreBundle:Session', $sessionId);\n\n    $base_work_dir = api_get_path(SYS_COURSE_PATH).$courseInfo['path'].'/work';\n    $course_id = $courseInfo['real_id'];\n\n    $directory = api_replace_dangerous_char($formValues['new_dir']);\n    $directory = disable_dangerous_file($directory);\n\n    if (strlen($directory) > CStudentPublication::WORK_TITLE_MAX_LENGTH) {\n        $directory = api_substr($directory, 0, CStudentPublication::WORK_TITLE_MAX_LENGTH);\n    }\n\n    $created_dir = create_unexisting_work_directory($base_work_dir, $directory);\n\n    if (empty($created_dir)) {\n        return false;\n    }\n\n    $enableEndDate = isset($formValues['enableEndDate']) ? true : false;\n    $enableExpiryDate = isset($formValues['enableExpiryDate']) ? true : false;\n\n    if ($enableEndDate && $enableExpiryDate) {\n        if ($formValues['expires_on'] > $formValues['ends_on']) {\n            Display::addFlash(\n                Display::return_message(\n                    get_lang('DateExpiredNotBeLessDeadLine'),\n                    'warning'\n                )\n            );\n\n            return false;\n        }\n    }\n\n    $dirName = '/'.$created_dir;\n    $today = new DateTime(api_get_utc_datetime(), new DateTimeZone('UTC'));\n    $title = isset($formValues['work_title']) ? $formValues['work_title'] : $formValues['new_dir'];\n\n    $workTable = new CStudentPublication();\n    $workTable\n        ->setCId($course_id)\n        ->setUrl($dirName)\n        ->setTitle($title)\n        ->setDescription($formValues['description'])\n        ->setActive(true)\n        ->setAccepted(true)\n        ->setFiletype('folder')\n        ->setPostGroupId($groupIid)\n        ->setSentDate($today)\n        ->setQualification($formValues['qualification'] != '' ? $formValues['qualification'] : 0)\n        ->setParentId(0)\n        ->setQualificatorId(0)\n        ->setWeight(!empty($formValues['weight']) ? $formValues['weight'] : 0)\n        ->setSession($session)\n        ->setAllowTextAssignment($formValues['allow_text_assignment'])\n        ->setContainsFile(0)\n        ->setUserId($user_id)\n        ->setHasProperties(0)\n        ->setDocumentId(0);\n\n    $em->persist($workTable);\n    $em->flush();\n\n    $workTable->setId($workTable->getIid());\n    $em->merge($workTable);\n    $em->flush();\n\n    // Folder created\n    api_item_property_update(\n        $courseInfo,\n        'work',\n        $workTable->getIid(),\n        'DirectoryCreated',\n        $user_id,\n        $groupInfo\n    );\n\n    updatePublicationAssignment(\n        $workTable->getIid(),\n        $formValues,\n        $courseInfo,\n        $groupIid\n    );\n\n    // Added the new Work ID to the extra field values\n    $formValues['item_id'] = $workTable->getIid();\n\n    $workFieldValue = new ExtraFieldValue('work');\n    $workFieldValue->saveFieldValues($formValues);\n\n    $sendEmailAlert = api_get_course_setting('email_alert_students_on_new_homework');\n\n    switch ($sendEmailAlert) {\n        case 1:\n            sendEmailToStudentsOnHomeworkCreation(\n                $workTable->getIid(),\n                $course_id,\n                $sessionId\n            );\n            //no break\n        case 2:\n            sendEmailToDrhOnHomeworkCreation(\n                $workTable->getIid(),\n                $course_id,\n                $sessionId\n            );\n            break;\n    }\n\n    return $workTable->getIid();\n}\n\n/**\n * @param int   $workId\n * @param array $courseInfo\n *\n * @return int\n */\nfunction agendaExistsForWork($workId, $courseInfo)\n{\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n    $courseId = $courseInfo['real_id'];\n    $workId = (int) $workId;\n\n    $sql = \"SELECT add_to_calendar FROM $workTable\n            WHERE c_id = $courseId AND publication_id = \".$workId;\n    $res = Database::query($sql);\n    if (Database::num_rows($res)) {\n        $row = Database::fetch_array($res, 'ASSOC');\n        if (!empty($row['add_to_calendar'])) {\n            return $row['add_to_calendar'];\n        }\n    }\n\n    return 0;\n}\n\n/**\n * Update work description, qualification, weight, allow_text_assignment.\n *\n * @param int   $workId     (iid)\n * @param array $params\n * @param array $courseInfo\n * @param int   $sessionId\n */\nfunction updateWork($workId, $params, $courseInfo, $sessionId = 0)\n{\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $filteredParams = [\n        'description' => $params['description'],\n        'qualification' => $params['qualification'],\n        'weight' => $params['weight'],\n        'allow_text_assignment' => $params['allow_text_assignment'],\n    ];\n\n    Database::update(\n        $workTable,\n        $filteredParams,\n        [\n            'iid = ? AND c_id = ?' => [\n                $workId,\n                $courseInfo['real_id'],\n            ],\n        ]\n    );\n\n    $workFieldValue = new ExtraFieldValue('work');\n    $workFieldValue->saveFieldValues($params);\n}\n\n/**\n * @param int   $workId\n * @param array $params\n * @param array $courseInfo\n * @param int   $groupId\n */\nfunction updatePublicationAssignment($workId, $params, $courseInfo, $groupId)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $workId = (int) $workId;\n    $now = api_get_utc_datetime();\n    $course_id = $courseInfo['real_id'];\n\n    // Insert into agenda\n    $agendaId = 0;\n    if (isset($params['add_to_calendar']) && $params['add_to_calendar'] == 1) {\n        // Setting today date\n        $date = $end_date = $now;\n\n        if (isset($params['enableExpiryDate'])) {\n            $end_date = $params['expires_on'];\n            $date = $end_date;\n        }\n\n        $title = sprintf(get_lang('HandingOverOfTaskX'), $params['new_dir']);\n        $description = isset($params['description']) ? $params['description'] : '';\n        $content = '<a href=\"'.api_get_path(WEB_CODE_PATH).'work/work_list.php?'.api_get_cidreq().'&id='.$workId.'\">'\n            .$params['new_dir'].'</a>'.$description;\n\n        $agendaId = agendaExistsForWork($workId, $courseInfo);\n\n        // Add/edit agenda\n        $agenda = new Agenda('course');\n        $agenda->set_course($courseInfo);\n\n        if (!empty($agendaId)) {\n            // add_to_calendar is set but it doesnt exists then invalidate\n            $eventInfo = $agenda->get_event($agendaId);\n            if (empty($eventInfo)) {\n                $agendaId = 0;\n            }\n        }\n\n        $eventColor = $agenda->eventStudentPublicationColor;\n\n        if (empty($agendaId)) {\n            $agendaId = $agenda->addEvent(\n                $date,\n                $end_date,\n                'false',\n                $title,\n                $content,\n                ['GROUP:'.$groupId],\n                false,\n                null,\n                [],\n                [],\n                null,\n                $eventColor\n            );\n        } else {\n            $agenda->editEvent(\n                $agendaId,\n                $end_date,\n                $end_date,\n                'false',\n                $title,\n                $content,\n                [],\n                [],\n                [],\n                null,\n                $eventColor\n            );\n        }\n    }\n\n    $qualification = isset($params['qualification']) && !empty($params['qualification']) ? 1 : 0;\n    $expiryDate = isset($params['enableExpiryDate']) && (int) $params['enableExpiryDate'] == 1 ? api_get_utc_datetime($params['expires_on']) : '';\n    $endDate = isset($params['enableEndDate']) && (int) $params['enableEndDate'] == 1 ? api_get_utc_datetime($params['ends_on']) : '';\n    $data = get_work_assignment_by_id($workId, $course_id);\n    if (!empty($expiryDate)) {\n        $expiryDateCondition = \"expires_on = '\".Database::escape_string($expiryDate).\"', \";\n    } else {\n        $expiryDateCondition = \"expires_on = null, \";\n    }\n\n    if (!empty($endDate)) {\n        $endOnCondition = \"ends_on = '\".Database::escape_string($endDate).\"', \";\n    } else {\n        $endOnCondition = 'ends_on = null, ';\n    }\n\n    if (empty($data)) {\n        $sql = \"INSERT INTO $table SET\n                c_id = $course_id ,\n                $expiryDateCondition\n                $endOnCondition\n                add_to_calendar = $agendaId,\n                enable_qualification = '$qualification',\n                publication_id = '$workId'\";\n        Database::query($sql);\n        $my_last_id = Database::insert_id();\n\n        if ($my_last_id) {\n            $sql = \"UPDATE $table SET\n                        id = iid\n                    WHERE iid = $my_last_id\";\n            Database::query($sql);\n\n            $sql = \"UPDATE $workTable SET\n                        has_properties  = $my_last_id,\n                        view_properties = 1\n                    WHERE c_id = $course_id AND id = $workId\";\n            Database::query($sql);\n        }\n    } else {\n        $sql = \"UPDATE $table SET\n                    $expiryDateCondition\n                    $endOnCondition\n                    add_to_calendar  = $agendaId,\n                    enable_qualification = '\".$qualification.\"'\n                WHERE\n                    publication_id = $workId AND\n                    c_id = $course_id AND\n                    iid = \".$data['iid'];\n        Database::query($sql);\n    }\n\n    if (!empty($params['category_id'])) {\n        $link_info = GradebookUtils::isResourceInCourseGradebook(\n            $courseInfo['code'],\n            LINK_STUDENTPUBLICATION,\n            $workId,\n            api_get_session_id()\n        );\n\n        $linkId = null;\n        if (!empty($link_info)) {\n            $linkId = $link_info['id'];\n        }\n\n        if (isset($params['make_calification']) &&\n            $params['make_calification'] == 1\n        ) {\n            if (empty($linkId)) {\n                GradebookUtils::add_resource_to_course_gradebook(\n                    $params['category_id'],\n                    $courseInfo['code'],\n                    LINK_STUDENTPUBLICATION,\n                    $workId,\n                    $params['new_dir'],\n                    api_float_val($params['weight']),\n                    api_float_val($params['qualification']),\n                    $params['description'],\n                    1,\n                    api_get_session_id()\n                );\n            } else {\n                GradebookUtils::updateResourceFromCourseGradebook(\n                    $linkId,\n                    $courseInfo['code'],\n                    $params['weight']\n                );\n            }\n        } else {\n            // Delete everything of the gradebook for this $linkId\n            GradebookUtils::remove_resource_from_course_gradebook($linkId);\n        }\n    }\n}\n\n/**\n * Delete all work by student.\n *\n * @param int   $userId\n * @param array $courseInfo\n *\n * @return array return deleted items\n */\nfunction deleteAllWorkPerUser($userId, $courseInfo)\n{\n    $deletedItems = [];\n    $workPerUser = getWorkPerUser($userId);\n    if (!empty($workPerUser)) {\n        foreach ($workPerUser as $work) {\n            $work = $work['work'];\n            foreach ($work->user_results as $userResult) {\n                $result = deleteWorkItem($userResult['id'], $courseInfo);\n                if ($result) {\n                    $deletedItems[] = $userResult;\n                }\n            }\n        }\n    }\n\n    return $deletedItems;\n}\n\n/**\n * @param int   $item_id\n * @param array $courseInfo course info\n *\n * @return bool\n */\nfunction deleteWorkItem($item_id, $courseInfo)\n{\n    $item_id = (int) $item_id;\n\n    if (empty($item_id) || empty($courseInfo)) {\n        return false;\n    }\n\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $TSTDPUBASG = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n    $currentCourseRepositorySys = api_get_path(SYS_COURSE_PATH).$courseInfo['path'].'/';\n    $is_allowed_to_edit = api_is_allowed_to_edit();\n    $file_deleted = false;\n    $is_author = user_is_author($item_id);\n    $work_data = get_work_data_by_id($item_id);\n    $locked = api_resource_is_locked_by_gradebook($work_data['parent_id'], LINK_STUDENTPUBLICATION);\n    $course_id = $courseInfo['real_id'];\n\n    if (($is_allowed_to_edit && $locked == false) ||\n        (\n            $locked == false &&\n            $is_author &&\n            api_get_course_setting('student_delete_own_publication') == 1 &&\n            $work_data['qualificator_id'] == 0\n        )\n    ) {\n        // We found the current user is the author\n        $sql = \"SELECT url, contains_file, user_id, session_id, parent_id\n                FROM $work_table\n                WHERE c_id = $course_id AND id = $item_id\";\n        $result = Database::query($sql);\n        $row = Database::fetch_array($result);\n        $count = Database::num_rows($result);\n\n        if ($count > 0) {\n            // If the \"considered_working_time\" option is enabled, check\n            // whether some time should be removed from track_e_course_access\n            $consideredWorkingTime = api_get_configuration_value('considered_working_time');\n            if ($consideredWorkingTime) {\n                $userWorks = get_work_user_list(\n                    0,\n                    100,\n                    null,\n                    null,\n                    $row['parent_id'],\n                    null,\n                    $row['user_id'],\n                    false,\n                    $course_id,\n                    $row['session_id']\n                );\n                // We're only interested in deleting the time if this is the latest work sent\n                if (count($userWorks) == 1) {\n                    // Get the \"considered work time\" defined for this work\n                    $fieldValue = new ExtraFieldValue('work');\n                    $resultExtra = $fieldValue->getAllValuesForAnItem(\n                        $row['parent_id'],\n                        true\n                    );\n\n                    $workingTime = null;\n                    foreach ($resultExtra as $field) {\n                        $field = $field['value'];\n\n                        if ($consideredWorkingTime == $field->getField()->getVariable()) {\n                            $workingTime = $field->getValue();\n                        }\n                    }\n                    // If no time was defined, or a time of \"0\" was set, do nothing\n                    if (!empty($workingTime)) {\n                        $sessionId = empty($row['session_id']) ? 0 : $row['session_id'];\n                        // Getting false from the following call would mean the\n                        // time record\n                        Event::eventRemoveVirtualCourseTime(\n                            $course_id,\n                            $row['user_id'],\n                            $sessionId,\n                            $workingTime,\n                            $row['parent_id']\n                        );\n                    }\n                }\n            } // end of considered_working_time check section\n\n            $sql = \"UPDATE $work_table SET active = 2\n                    WHERE c_id = $course_id AND id = $item_id\";\n            Database::query($sql);\n            $sql = \"DELETE FROM $TSTDPUBASG\n                    WHERE c_id = $course_id AND publication_id = $item_id\";\n            Database::query($sql);\n\n            Compilatio::plagiarismDeleteDoc($course_id, $item_id);\n\n            api_item_property_update(\n                $courseInfo,\n                'work',\n                $item_id,\n                'DocumentDeleted',\n                api_get_user_id()\n            );\n\n            Event::addEvent(\n                LOG_WORK_FILE_DELETE,\n                LOG_WORK_DATA,\n                [\n                    'id' => $work_data['id'],\n                    'url' => $work_data['url'],\n                    'title' => $work_data['title'],\n                ],\n                null,\n                api_get_user_id(),\n                api_get_course_int_id(),\n                api_get_session_id()\n            );\n\n            $work = $row['url'];\n\n            if ($row['contains_file'] == 1) {\n                if (!empty($work)) {\n                    if (api_get_setting('permanently_remove_deleted_files') === 'true') {\n                        my_delete($currentCourseRepositorySys.'/'.$work);\n                        $file_deleted = true;\n                    } else {\n                        $extension = pathinfo($work, PATHINFO_EXTENSION);\n                        $new_dir = $work.'_DELETED_'.$item_id.'.'.$extension;\n\n                        if (file_exists($currentCourseRepositorySys.'/'.$work)) {\n                            rename($currentCourseRepositorySys.'/'.$work, $currentCourseRepositorySys.'/'.$new_dir);\n                            $file_deleted = true;\n                        }\n                    }\n                }\n            } else {\n                $file_deleted = true;\n            }\n        }\n    }\n\n    return $file_deleted;\n}\n\n/**\n * @param FormValidator $form\n * @param array         $defaults\n * @param int           $workId\n *\n * @return FormValidator\n */\nfunction getFormWork($form, $defaults = [], $workId = 0)\n{\n    $sessionId = api_get_session_id();\n    if (!empty($defaults)) {\n        if (isset($defaults['submit'])) {\n            unset($defaults['submit']);\n        }\n    }\n\n    // Create the form that asks for the directory name\n    $form->addText(\n        'new_dir',\n        get_lang('AssignmentName'),\n        true,\n        ['maxlength' => 255]\n    );\n    $form->addHtmlEditor(\n        'description',\n        get_lang('Description'),\n        false,\n        false,\n        getWorkDescriptionToolbar()\n    );\n    $form->addButtonAdvancedSettings('advanced_params', get_lang('AdvancedParameters'));\n\n    if (!empty($defaults) && (isset($defaults['enableEndDate']) || isset($defaults['enableExpiryDate']))) {\n        $form->addHtml('<div id=\"advanced_params_options\" style=\"display:block\">');\n    } else {\n        $form->addHtml('<div id=\"advanced_params_options\" style=\"display:none\">');\n    }\n\n    // QualificationOfAssignment\n    $form->addElement('text', 'qualification', get_lang('QualificationNumeric'));\n\n    if (($sessionId != 0 && Gradebook::is_active()) || $sessionId == 0) {\n        $form->addElement(\n            'checkbox',\n            'make_calification',\n            null,\n            get_lang('MakeQualifiable'),\n            [\n                'id' => 'make_calification_id',\n                'onclick' => \"javascript: if(this.checked) { document.getElementById('option1').style.display='block';}else{document.getElementById('option1').style.display='none';}\",\n            ]\n        );\n    } else {\n        // QualificationOfAssignment\n        $form->addElement('hidden', 'make_calification', false);\n    }\n\n    if (!empty($defaults) && isset($defaults['category_id'])) {\n        $form->addHtml('<div id=\\'option1\\' style=\"display:block\">');\n    } else {\n        $form->addHtml('<div id=\\'option1\\' style=\"display:none\">');\n    }\n\n    // Loading Gradebook select\n    GradebookUtils::load_gradebook_select_in_tool($form);\n\n    $form->addElement('text', 'weight', get_lang('WeightInTheGradebook'));\n    $form->addHtml('</div>');\n\n    $form->addElement('checkbox', 'enableExpiryDate', null, get_lang('EnableExpiryDate'), 'id=\"expiry_date\"');\n    if (isset($defaults['enableExpiryDate']) && $defaults['enableExpiryDate']) {\n        $form->addHtml('<div id=\"option2\" style=\"display: block;\">');\n    } else {\n        $form->addHtml('<div id=\"option2\" style=\"display: none;\">');\n    }\n\n    $timeNextWeek = time() + 86400 * 7;\n    $nextWeek = substr(api_get_local_time($timeNextWeek), 0, 10);\n    if (!isset($defaults['expires_on'])) {\n        $date = substr($nextWeek, 0, 10);\n        $defaults['expires_on'] = $date.' 23:59';\n    }\n\n    $form->addElement('date_time_picker', 'expires_on', get_lang('ExpiresAt'));\n    $form->addHtml('</div>');\n    $form->addElement('checkbox', 'enableEndDate', null, get_lang('EnableEndDate'), 'id=\"end_date\"');\n\n    if (!isset($defaults['ends_on'])) {\n        $nextDay = substr(api_get_local_time($timeNextWeek + 86400), 0, 10);\n        $date = substr($nextDay, 0, 10);\n        $defaults['ends_on'] = $date.' 23:59';\n    }\n    if (isset($defaults['enableEndDate']) && $defaults['enableEndDate']) {\n        $form->addHtml('<div id=\"option3\" style=\"display: block;\">');\n    } else {\n        $form->addHtml('<div id=\"option3\" style=\"display: none;\">');\n    }\n\n    $form->addElement('date_time_picker', 'ends_on', get_lang('EndsAt'));\n    $form->addHtml('</div>');\n\n    $form->addElement('checkbox', 'add_to_calendar', null, get_lang('AddToCalendar'));\n    $form->addElement('select', 'allow_text_assignment', get_lang('DocumentType'), getUploadDocumentType());\n\n    // Extra fields\n    $extraField = new ExtraField('work');\n    $extra = $extraField->addElements($form, $workId);\n\n    $htmlHeadXtra[] = '\n        <script>\n        $(function() {\n            '.$extra['jquery_ready_content'].'\n        });\n        </script>';\n\n    $form->addHtml('</div>');\n\n    Skill::addSkillsToForm($form, api_get_course_int_id(), api_get_session_id(), ITEM_TYPE_STUDENT_PUBLICATION, $workId);\n\n    if (!empty($defaults)) {\n        $form->setDefaults($defaults);\n    }\n\n    return $form;\n}\n\n/**\n * @return array\n */\nfunction getUploadDocumentType()\n{\n    return [\n        0 => get_lang('AllowFileOrText'),\n        1 => get_lang('AllowOnlyText'),\n        2 => get_lang('AllowOnlyFiles'),\n    ];\n}\n\n/**\n * @param int   $itemId\n * @param array $course_info\n *\n * @return bool\n */\nfunction makeVisible($itemId, $course_info)\n{\n    $itemId = (int) $itemId;\n    if (empty($course_info) || empty($itemId)) {\n        return false;\n    }\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $course_id = $course_info['real_id'];\n\n    $sql = \"UPDATE $work_table SET accepted = 1\n            WHERE c_id = $course_id AND id = $itemId\";\n    Database::query($sql);\n    api_item_property_update($course_info, 'work', $itemId, 'visible', api_get_user_id());\n\n    return true;\n}\n\n/**\n * @param int   $itemId\n * @param array $course_info\n *\n * @return int\n */\nfunction makeInvisible($itemId, $course_info)\n{\n    $itemId = (int) $itemId;\n    if (empty($course_info) || empty($itemId)) {\n        return false;\n    }\n\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $course_id = $course_info['real_id'];\n    $sql = \"UPDATE $table\n            SET accepted = 0\n            WHERE c_id = $course_id AND id = '\".$itemId.\"'\";\n    Database::query($sql);\n    api_item_property_update(\n        $course_info,\n        'work',\n        $itemId,\n        'invisible',\n        api_get_user_id()\n    );\n\n    return true;\n}\n\n/**\n * @param int    $item_id\n * @param string $path\n * @param array  $courseInfo\n * @param int    $groupId    iid\n * @param int    $sessionId\n *\n * @return string\n */\nfunction generateMoveForm($item_id, $path, $courseInfo, $groupId, $sessionId)\n{\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $courseId = $courseInfo['real_id'];\n    $folders = [];\n    $session_id = (int) $sessionId;\n    $groupId = (int) $groupId;\n    $sessionCondition = empty($sessionId) ? ' AND (session_id = 0 OR session_id IS NULL) ' : \" AND session_id='\".$session_id.\"'\";\n\n    $groupIid = 0;\n    if ($groupId) {\n        $groupInfo = GroupManager::get_group_properties($groupId);\n        $groupIid = $groupInfo['iid'];\n    }\n\n    $sql = \"SELECT id, url, title\n            FROM $work_table\n            WHERE\n                c_id = $courseId AND\n                active IN (0, 1) AND\n                url LIKE '/%' AND\n                post_group_id = $groupIid\n                $sessionCondition\";\n    $res = Database::query($sql);\n    while ($folder = Database::fetch_array($res)) {\n        $title = empty($folder['title']) ? basename($folder['url']) : $folder['title'];\n        $folders[$folder['id']] = $title;\n    }\n\n    return build_work_move_to_selector($folders, $path, $item_id);\n}\n\n/**\n * @param int $workId\n *\n * @return string\n */\nfunction showStudentList($workId)\n{\n    $columnModel = [\n        [\n            'name' => 'student',\n            'index' => 'student',\n            'width' => '350px',\n            'align' => 'left',\n            'sortable' => 'false',\n        ],\n        [\n            'name' => 'works',\n            'index' => 'works',\n            'align' => 'center',\n            'sortable' => 'false',\n        ],\n    ];\n    $token = null;\n    $url = api_get_path(WEB_AJAX_PATH).'model.ajax.php?a=get_work_student_list_overview&work_id='.$workId.'&'.api_get_cidreq();\n\n    $columns = [\n        get_lang('Students'),\n        get_lang('Works'),\n    ];\n\n    $order = api_is_western_name_order() ? 'firstname' : 'lastname';\n    $params = [\n        'autowidth' => 'true',\n        'height' => 'auto',\n        'rowNum' => 5,\n        'sortname' => $order,\n        'sortorder' => 'asc',\n    ];\n\n    $html = '<script>\n    $(function() {\n        '.Display::grid_js('studentList', $url, $columns, $columnModel, $params, [], null, true).'\n        $(\"#workList\").jqGrid(\n            \"navGrid\",\n            \"#studentList_pager\",\n            { edit: false, add: false, del: false },\n            { height:280, reloadAfterSubmit:false }, // edit options\n            { height:280, reloadAfterSubmit:false }, // add options\n            { width:500 } // search options\n        );\n    });\n    </script>';\n    $html .= Display::grid_html('studentList');\n\n    return $html;\n}\n\n/**\n * @param string $courseCode\n * @param int    $sessionId\n * @param int    $groupId\n * @param int    $start\n * @param int    $limit\n * @param string $sidx\n * @param string $sord\n * @param $getCount\n *\n * @return array|int\n */\nfunction getWorkUserList($courseCode, $sessionId, $groupId, $start, $limit, $sidx, $sord, $getCount = false)\n{\n    if (!empty($groupId)) {\n        $userList = GroupManager::get_users(\n            $groupId,\n            false,\n            $start,\n            $limit,\n            $getCount,\n            null,\n            $sidx,\n            $sord\n        );\n    } else {\n        $limitString = null;\n        if (!empty($start) && !empty($limit)) {\n            $start = (int) $start;\n            $limit = (int) $limit;\n            $limitString = \" LIMIT $start, $limit\";\n        }\n\n        $orderBy = null;\n        if (!empty($sidx) && !empty($sord)) {\n            if (in_array($sidx, ['firstname', 'lastname'])) {\n                $orderBy = \"ORDER BY `$sidx` $sord\";\n            }\n        }\n\n        if (empty($sessionId)) {\n            $userList = CourseManager::get_user_list_from_course_code(\n                $courseCode,\n                $sessionId,\n                $limitString,\n                $orderBy,\n                STUDENT,\n                $getCount\n            );\n        } else {\n            $userList = CourseManager::get_user_list_from_course_code(\n                $courseCode,\n                $sessionId,\n                $limitString,\n                $orderBy,\n                0,\n                $getCount\n            );\n        }\n\n        if ($getCount == false) {\n            $userList = array_keys($userList);\n        }\n    }\n\n    return $userList;\n}\n\n/**\n * @param int    $workId\n * @param string $courseCode\n * @param int    $sessionId\n * @param int    $groupId\n * @param int    $start\n * @param int    $limit\n * @param int    $sidx\n * @param string $sord\n * @param bool   $getCount\n *\n * @return array|int\n */\nfunction getWorkUserListData(\n    $workId,\n    $courseCode,\n    $sessionId,\n    $groupId,\n    $start,\n    $limit,\n    $sidx,\n    $sord,\n    $getCount = false\n) {\n    $my_folder_data = get_work_data_by_id($workId);\n    $workParents = [];\n    if (empty($my_folder_data)) {\n        $workParents = getWorkList($workId, $my_folder_data, null);\n    }\n\n    $workIdList = [];\n    if (!empty($workParents)) {\n        foreach ($workParents as $work) {\n            $workIdList[] = $work->id;\n        }\n    }\n\n    $courseInfo = api_get_course_info($courseCode);\n\n    $userList = getWorkUserList(\n        $courseCode,\n        $sessionId,\n        $groupId,\n        $start,\n        $limit,\n        $sidx,\n        $sord,\n        $getCount\n    );\n\n    if ($getCount) {\n        return $userList;\n    }\n    $results = [];\n    if (!empty($userList)) {\n        foreach ($userList as $userId) {\n            $user = api_get_user_info($userId);\n            $link = api_get_path(WEB_CODE_PATH).'work/student_work.php?'.api_get_cidreq().'&studentId='.$user['user_id'];\n            $url = Display::url(api_get_person_name($user['firstname'], $user['lastname']), $link);\n            $userWorks = 0;\n            if (!empty($workIdList)) {\n                $userWorks = getUniqueStudentAttempts(\n                    $workIdList,\n                    $groupId,\n                    $courseInfo['real_id'],\n                    $sessionId,\n                    $user['user_id']\n                );\n            }\n            $works = $userWorks.\" / \".count($workParents);\n            $results[] = [\n                'student' => $url,\n                'works' => Display::url($works, $link),\n            ];\n        }\n    }\n\n    return $results;\n}\n\n/**\n * @param int   $id\n * @param array $course_info\n * @param bool  $isCorrection\n *\n * @return bool\n */\nfunction downloadFile($id, $course_info, $isCorrection)\n{\n    return getFile($id, $course_info, true, $isCorrection, true);\n}\n\n/**\n * @param int   $id\n * @param array $course_info\n * @param bool  $download\n * @param bool  $isCorrection\n * @param bool  $forceAccessForCourseAdmins\n *\n * @return bool\n */\nfunction getFile($id, $course_info, $download = true, $isCorrection = false, $forceAccessForCourseAdmins = false)\n{\n    $file = getFileContents($id, $course_info, 0, $isCorrection, $forceAccessForCourseAdmins);\n    if (!empty($file) && is_array($file)) {\n        return DocumentManager::file_send_for_download(\n            $file['path'],\n            $download,\n            $file['title']\n        );\n    }\n\n    return false;\n}\n\n/**\n * Get the file contents for an assigment.\n *\n * @param int   $id\n * @param array $courseInfo\n * @param int   $sessionId\n * @param bool  $correction\n * @param bool  $forceAccessForCourseAdmins\n *\n * @return array|bool\n */\nfunction getFileContents($id, $courseInfo, $sessionId = 0, $correction = false, $forceAccessForCourseAdmins = false)\n{\n    $id = (int) $id;\n    if (empty($courseInfo) || empty($id)) {\n        return false;\n    }\n    if (empty($sessionId)) {\n        $sessionId = api_get_session_id();\n    }\n\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    if (!empty($courseInfo['real_id'])) {\n        $sql = \"SELECT *\n                FROM $table\n                WHERE c_id = \".$courseInfo['real_id'].\" AND id = $id\";\n\n        $result = Database::query($sql);\n        if ($result && Database::num_rows($result)) {\n            $row = Database::fetch_array($result, 'ASSOC');\n\n            if ($correction) {\n                $row['url'] = $row['url_correction'];\n            }\n\n            if (empty($row['url'])) {\n                return false;\n            }\n\n            $full_file_name = api_get_path(SYS_COURSE_PATH).api_get_course_path().'/'.$row['url'];\n\n            $item_info = api_get_item_property_info(\n                api_get_course_int_id(),\n                'work',\n                $row['id'],\n                $sessionId\n            );\n\n            if (empty($item_info)) {\n                return false;\n            }\n\n            $isAllow = allowOnlySubscribedUser(\n                api_get_user_id(),\n                $row['parent_id'],\n                $courseInfo['real_id'],\n                $forceAccessForCourseAdmins\n            );\n\n            if (empty($isAllow)) {\n                return false;\n            }\n\n            /*\n            field show_score in table course :\n                0 =>    New documents are visible for all users\n                1 =>    New documents are only visible for the teacher(s)\n            field visibility in table item_property :\n                0 => eye closed, invisible for all students\n                1 => eye open\n            field accepted in table c_student_publication :\n                0 => eye closed, invisible for all students\n                1 => eye open\n            ( We should have visibility == accepted, otherwise there is an\n            inconsistency in the Database)\n            field value in table c_course_setting :\n                0 => Allow learners to delete their own publications = NO\n                1 => Allow learners to delete their own publications = YES\n\n            +------------------+-------------------------+------------------------+\n            |Can download work?| doc visible for all = 0 | doc visible for all = 1|\n            +------------------+-------------------------+------------------------+\n            |  visibility = 0  | editor only             | editor only            |\n            |                  |                         |                        |\n            +------------------+-------------------------+------------------------+\n            |  visibility = 1  | editor                  | editor                 |\n            |                  | + owner of the work     | + any student          |\n            +------------------+-------------------------+------------------------+\n            (editor = teacher + admin + anybody with right api_is_allowed_to_edit)\n            */\n\n            $work_is_visible = $item_info['visibility'] == 1 && $row['accepted'] == 1;\n            $doc_visible_for_all = (int) $courseInfo['show_score'] === 0;\n\n            $is_editor = api_is_allowed_to_edit(true, true, true);\n            $student_is_owner_of_work = user_is_author($row['id'], api_get_user_id());\n\n            if (($forceAccessForCourseAdmins && $isAllow) ||\n                $is_editor ||\n                $student_is_owner_of_work ||\n                ($doc_visible_for_all && $work_is_visible)\n            ) {\n                $title = $row['title'];\n                if ($correction) {\n                    $title = $row['title_correction'];\n                }\n                if (array_key_exists('filename', $row) && !empty($row['filename'])) {\n                    $title = $row['filename'];\n                }\n\n                $title = str_replace(' ', '_', $title);\n\n                if ($correction == false) {\n                    $userInfo = api_get_user_info($row['user_id']);\n                    if ($userInfo) {\n                        $date = api_get_local_time($row['sent_date']);\n                        $date = str_replace([':', '-', ' '], '_', $date);\n                        $title = $date.'_'.$userInfo['username'].'_'.$title;\n                    }\n                }\n\n                if (Security::check_abs_path(\n                    $full_file_name,\n                    api_get_path(SYS_COURSE_PATH).api_get_course_path().'/'\n                )) {\n                    Event::event_download($title);\n\n                    return [\n                        'path' => $full_file_name,\n                        'title' => $title,\n                        'title_correction' => $row['title_correction'],\n                    ];\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\n/**\n * @param int    $userId\n * @param array  $courseInfo\n * @param string $format\n *\n * @return bool\n */\nfunction exportAllWork($userId, $courseInfo, $format = 'pdf')\n{\n    $userInfo = api_get_user_info($userId);\n    if (empty($userInfo) || empty($courseInfo)) {\n        return false;\n    }\n\n    $workPerUser = getWorkPerUser($userId);\n\n    switch ($format) {\n        case 'pdf':\n            if (!empty($workPerUser)) {\n                $pdf = new PDF();\n\n                $content = null;\n                foreach ($workPerUser as $work) {\n                    $work = $work['work'];\n                    foreach ($work->user_results as $userResult) {\n                        $content .= $userResult['title'];\n                        // No need to use api_get_local_time()\n                        $content .= $userResult['sent_date'];\n                        $content .= $userResult['qualification'];\n                        $content .= $userResult['description'];\n                    }\n                }\n\n                if (!empty($content)) {\n                    $pdf->content_to_pdf(\n                        $content,\n                        null,\n                        api_replace_dangerous_char($userInfo['complete_name']),\n                        $courseInfo['code']\n                    );\n                }\n            }\n            break;\n    }\n}\n\n/**\n * @param int    $workId\n * @param array  $courseInfo\n * @param int    $sessionId\n * @param string $format\n *\n * @return bool\n */\nfunction exportAllStudentWorkFromPublication(\n    $workId,\n    $courseInfo,\n    $sessionId,\n    $format = 'pdf'\n) {\n    if (empty($courseInfo)) {\n        return false;\n    }\n\n    $workData = get_work_data_by_id($workId);\n    if (empty($workData)) {\n        return false;\n    }\n\n    $assignment = get_work_assignment_by_id($workId);\n\n    $courseCode = $courseInfo['code'];\n    $header = get_lang('Course').': '.$courseInfo['title'];\n    $teachers = CourseManager::getTeacherListFromCourseCodeToString(\n        $courseCode\n    );\n\n    if (!empty($sessionId)) {\n        $sessionInfo = api_get_session_info($sessionId);\n        if (!empty($sessionInfo)) {\n            $header .= ' - '.$sessionInfo['name'];\n            $header .= '<br />'.$sessionInfo['description'];\n            $teachers = SessionManager::getCoachesByCourseSessionToString(\n                $sessionId,\n                $courseInfo['real_id']\n            );\n        }\n    }\n\n    $header .= '<br />'.get_lang('Teachers').': '.$teachers.'<br />';\n    $header .= '<br />'.get_lang('Date').': '.api_get_local_time().'<br />';\n    $header .= '<br />'.get_lang('WorkName').': '.$workData['title'].'<br />';\n\n    $content = null;\n    $expiresOn = null;\n\n    if (!empty($assignment) && isset($assignment['expires_on'])) {\n        $content .= '<br /><strong>'.get_lang('PostedExpirationDate').'</strong>: '.api_get_local_time($assignment['expires_on']);\n        $expiresOn = api_get_local_time($assignment['expires_on']);\n    }\n\n    if (!empty($workData['description'])) {\n        $content .= '<br /><strong>'.get_lang('Description').'</strong>: '.$workData['description'];\n    }\n\n    $workList = get_work_user_list(null, null, null, null, $workId);\n\n    switch ($format) {\n        case 'pdf':\n            if (!empty($workList)) {\n                $table = new HTML_Table(['class' => 'table table-hover table-striped data_table']);\n                $headers = [\n                    get_lang('Name'),\n                    get_lang('User'),\n                    get_lang('HandOutDateLimit'),\n                    get_lang('SentDate'),\n                    get_lang('FileName'),\n                    get_lang('Score'),\n                    get_lang('Feedback'),\n                ];\n\n                $column = 0;\n                foreach ($headers as $header) {\n                    $table->setHeaderContents(0, $column, $header);\n                    $column++;\n                }\n\n                $row = 1;\n\n                //$pdf->set_custom_header($header);\n                foreach ($workList as $work) {\n                    $content .= '<hr />';\n                    // getWorkComments need c_id\n                    $work['c_id'] = $courseInfo['real_id'];\n\n                    //$content .= get_lang('Date').': '.api_get_local_time($work['sent_date_from_db']).'<br />';\n                    $score = null;\n                    if (!empty($work['qualification_only'])) {\n                        $score = $work['qualification_only'];\n                    }\n\n                    $comments = getWorkComments($work);\n\n                    $feedback = null;\n                    if (!empty($comments)) {\n                        $content .= '<h4>'.get_lang('Feedback').': </h4>';\n                        foreach ($comments as $comment) {\n                            $feedback .= get_lang('User').': '.$comment['complete_name'].\n                                '<br />';\n                            $feedback .= $comment['comment'].'<br />';\n                        }\n                    }\n                    $table->setCellContents($row, 0, strip_tags($workData['title']));\n                    $table->setCellContents($row, 1, strip_tags($work['fullname']));\n                    $table->setCellContents($row, 2, $expiresOn);\n                    $table->setCellContents($row, 3, api_get_local_time($work['sent_date_from_db']));\n                    $table->setCellContents($row, 4, strip_tags($work['title']));\n                    $table->setCellContents($row, 5, $score);\n                    $table->setCellContents($row, 6, $feedback);\n\n                    $row++;\n                }\n\n                $content = $table->toHtml();\n\n                if (!empty($content)) {\n                    $params = [\n                        'filename' => $workData['title'].'_'.api_get_local_time(),\n                        'pdf_title' => api_replace_dangerous_char($workData['title']),\n                        'course_code' => $courseInfo['code'],\n                    ];\n                    $pdf = new PDF('A4', null, $params);\n                    $pdf->html_to_pdf_with_template($content);\n                }\n                exit;\n            }\n            break;\n    }\n}\n\n/**\n * Downloads all user files per user.\n *\n * @param int   $userId\n * @param array $courseInfo\n *\n * @return bool\n */\nfunction downloadAllFilesPerUser($userId, $courseInfo)\n{\n    $userInfo = api_get_user_info($userId);\n\n    if (empty($userInfo) || empty($courseInfo)) {\n        return false;\n    }\n\n    $tempZipFile = api_get_path(SYS_ARCHIVE_PATH).api_get_unique_id().\".zip\";\n    $coursePath = api_get_path(SYS_COURSE_PATH).$courseInfo['path'].'/work/';\n    $zip = new PclZip($tempZipFile);\n    $workPerUser = getWorkPerUser($userId);\n\n    if (!empty($workPerUser)) {\n        $files = [];\n        foreach ($workPerUser as $work) {\n            $work = $work['work'];\n            foreach ($work->user_results as $userResult) {\n                if (empty($userResult['url']) || empty($userResult['contains_file'])) {\n                    continue;\n                }\n                $data = getFileContents($userResult['id'], $courseInfo);\n                if (!empty($data) && isset($data['path'])) {\n                    $files[basename($data['path'])] = [\n                        'title' => $data['title'],\n                        'path' => $data['path'],\n                    ];\n                }\n            }\n        }\n\n        if (!empty($files)) {\n            Session::write('files', $files);\n            foreach ($files as $data) {\n                $zip->add(\n                    $data['path'],\n                    PCLZIP_OPT_REMOVE_PATH,\n                    $coursePath,\n                    PCLZIP_CB_PRE_ADD,\n                    'preAddAllWorkStudentCallback'\n                );\n            }\n        }\n\n        // Start download of created file\n        $name = basename(api_replace_dangerous_char($userInfo['complete_name'])).'.zip';\n        Event::event_download($name.'.zip (folder)');\n        if (Security::check_abs_path($tempZipFile, api_get_path(SYS_ARCHIVE_PATH))) {\n            DocumentManager::file_send_for_download($tempZipFile, true, $name);\n            @unlink($tempZipFile);\n            exit;\n        }\n    }\n    exit;\n}\n\n/**\n * @param $p_event\n * @param array $p_header\n *\n * @return int\n */\nfunction preAddAllWorkStudentCallback($p_event, &$p_header)\n{\n    $files = Session::read('files');\n    if (isset($files[basename($p_header['stored_filename'])])) {\n        $p_header['stored_filename'] = $files[basename($p_header['stored_filename'])]['title'];\n\n        return 1;\n    }\n\n    return 0;\n}\n\n/**\n * Get all work created by a user.\n *\n * @param int $user_id\n * @param int $courseId\n * @param int $sessionId\n *\n * @return array\n */\nfunction getWorkCreatedByUser($user_id, $courseId, $sessionId)\n{\n    $items = api_get_item_property_list_by_tool_by_user(\n        $user_id,\n        'work',\n        $courseId,\n        $sessionId\n    );\n\n    $list = [];\n    if (!empty($items)) {\n        foreach ($items as $work) {\n            $item = get_work_data_by_id(\n                $work['ref'],\n                $courseId,\n                $sessionId\n            );\n            if (!empty($item)) {\n                $list[] = [\n                    $item['title'],\n                    api_get_local_time($work['insert_date']),\n                    api_get_local_time($work['lastedit_date']),\n                ];\n            }\n        }\n    }\n\n    return $list;\n}\n\n/**\n * @param array $courseInfo\n * @param int   $workId\n *\n * @return bool\n */\nfunction protectWork($courseInfo, $workId)\n{\n    $userId = api_get_user_id();\n    $groupId = api_get_group_id();\n    $sessionId = api_get_session_id();\n    $workData = get_work_data_by_id($workId);\n\n    if (empty($workData) || empty($courseInfo)) {\n        api_not_allowed(true);\n    }\n\n    if (api_is_platform_admin() || api_is_allowed_to_edit()) {\n        return true;\n    }\n\n    $workId = $workData['id'];\n\n    if ($workData['active'] != 1) {\n        api_not_allowed(true);\n    }\n\n    $visibility = api_get_item_visibility($courseInfo, 'work', $workId, $sessionId);\n\n    if ($visibility != 1) {\n        api_not_allowed(true);\n    }\n\n    $isAllow = allowOnlySubscribedUser($userId, $workId, $courseInfo['real_id']);\n    if (empty($isAllow)) {\n        api_not_allowed(true);\n    }\n\n    $groupInfo = GroupManager::get_group_properties($groupId);\n\n    if (!empty($groupId)) {\n        $showWork = GroupManager::user_has_access(\n            $userId,\n            $groupInfo['iid'],\n            GroupManager::GROUP_TOOL_WORK\n        );\n        if (!$showWork) {\n            api_not_allowed(true);\n        }\n    }\n}\n\n/**\n * @param array $courseInfo\n * @param array $work\n */\nfunction deleteCorrection($courseInfo, $work)\n{\n    if (isset($work['url_correction']) && !empty($work['url_correction']) && isset($work['iid'])) {\n        $id = $work['iid'];\n        $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n        $sql = \"UPDATE $table SET\n                    url_correction = '',\n                    title_correction = ''\n                WHERE iid = $id\";\n        Database::query($sql);\n        $coursePath = api_get_path(SYS_COURSE_PATH).$courseInfo['path'].'/';\n        if (file_exists($coursePath.$work['url_correction'])) {\n            if (Security::check_abs_path($coursePath.$work['url_correction'], $coursePath)) {\n                unlink($coursePath.$work['url_correction']);\n            }\n        }\n    }\n}\n\n/**\n * @param int $workId\n *\n * @return string\n */\nfunction workGetExtraFieldData($workId)\n{\n    $sessionField = new ExtraField('work');\n    $extraFieldData = $sessionField->getDataAndFormattedValues($workId);\n    $result = '';\n    if (!empty($extraFieldData)) {\n        $result .= '<div class=\"well\">';\n        foreach ($extraFieldData as $data) {\n            $result .= $data['text'].': <b>'.$data['value'].'</b>';\n        }\n        $result .= '</div>';\n    }\n\n    return $result;\n}\n\n/**\n * Export the pending works to excel.\n *\n * @params $values\n */\nfunction exportPendingWorksToExcel($values)\n{\n    $headers = [\n        get_lang('Course'),\n        get_lang('WorkName'),\n        get_lang('FullUserName'),\n        get_lang('Title'),\n        get_lang('Score'),\n        get_lang('Date'),\n        get_lang('Status'),\n        get_lang('Corrector'),\n        get_lang('CorrectionDate'),\n    ];\n    $tableXls[] = $headers;\n\n    $courseId = $values['course'] ?? 0;\n    $status = $values['status'] ?? 0;\n    $whereCondition = '';\n    if (!empty($values['work_parent_ids'])) {\n        $whereCondition = ' parent_id IN('.implode(',', $values['work_parent_ids']).')';\n    }\n    $allWork = getAllWork(\n        null,\n        null,\n        null,\n        null,\n        $whereCondition,\n        false,\n        $courseId,\n        $status\n    );\n    if (!empty($allWork)) {\n        foreach ($allWork  as $work) {\n            $score = $work['qualification_score'].'/'.$work['weight'];\n            $data = [\n                $work['course'],\n                $work['work_name'],\n                strip_tags($work['fullname']),\n                strip_tags($work['title']),\n                $score,\n                strip_tags($work['sent_date']),\n                strip_tags($work['qualificator_id']),\n                $work['qualificator_fullname'],\n                $work['date_of_qualification'],\n            ];\n            $tableXls[] = $data;\n        }\n    }\n\n    $fileName = get_lang('StudentPublicationToCorrect').'_'.api_get_local_time();\n    Export::arrayToXls($tableXls, $fileName);\n\n    return true;\n}\n"], "fixing_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CourseBundle\\Entity\\CStudentPublication;\nuse ChamiloSession as Session;\nuse Doctrine\\DBAL\\Driver\\Statement;\n\n/**\n *  @author Thomas, Hugues, Christophe - original version\n *  @author Patrick Cool <patrick.cool@UGent.be>, Ghent University -\n * ability for course admins to specify wether uploaded documents are visible or invisible by default.\n *  @author Roan Embrechts, code refactoring and virtual course support\n *  @author Frederic Vauthier, directories management\n *  @author Julio Montoya <gugli100@gmail.com> BeezNest 2011 LOTS of bug fixes\n *\n *  @todo   this lib should be convert in a static class and moved to main/inc/lib\n */\n\n/**\n * Displays action links (for admins, authorized groups members and authorized students).\n *\n * @param   int Whether to show tool options\n * @param   int Whether to show upload form option\n * @param bool $isTutor\n */\nfunction displayWorkActionLinks($id, $action, $isTutor)\n{\n    $id = $my_back_id = (int) $id;\n    if ('list' === $action) {\n        $my_back_id = 0;\n    }\n\n    $output = '';\n    $origin = api_get_origin();\n    if (!empty($id)) {\n        $output .= '<a href=\"'.api_get_self().'?'.api_get_cidreq().'&id='.$my_back_id.'\">'.\n            Display::return_icon('back.png', get_lang('BackToWorksList'), '', ICON_SIZE_MEDIUM).\n            '</a>';\n    }\n\n    if (($isTutor || api_is_allowed_to_edit(null, true)) &&\n        'learnpath' !== $origin\n    ) {\n        // Create dir\n        if (empty($id)) {\n            $output .= '<a href=\"'.api_get_self().'?'.api_get_cidreq().'&action=create_dir\">';\n            $output .= Display::return_icon(\n                'new_work.png',\n                get_lang('CreateAssignment'),\n                '',\n                ICON_SIZE_MEDIUM\n            );\n            $output .= '</a>';\n        }\n    }\n\n    if (api_is_allowed_to_edit(null, true) && $origin !== 'learnpath' && $action === 'list') {\n        $output .= '<a id=\"open-view-list\" href=\"#\">'.\n            Display::return_icon(\n                'listwork.png',\n                get_lang('ViewStudents'),\n                '',\n                ICON_SIZE_MEDIUM\n            ).\n            '</a>';\n    }\n\n    if ('' != $output) {\n        echo '<div class=\"actions\">';\n        echo $output;\n        echo '</div>';\n    }\n}\n\n/**\n * @param string $path\n * @param int    $courseId\n *\n * @return array\n */\nfunction get_work_data_by_path($path, $courseId = 0)\n{\n    $path = Database::escape_string($path);\n    $courseId = (int) $courseId;\n    if (empty($courseId)) {\n        $courseId = api_get_course_int_id();\n    }\n\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $sql = \"SELECT *  FROM $table\n            WHERE url = '$path' AND c_id = $courseId \";\n    $result = Database::query($sql);\n    $return = [];\n    if (Database::num_rows($result)) {\n        $return = Database::fetch_array($result, 'ASSOC');\n    }\n\n    return $return;\n}\n\n/**\n * @param int $id\n * @param int $courseId\n * @param int $sessionId\n *\n * @return array\n */\nfunction get_work_data_by_id($id, $courseId = 0, $sessionId = 0)\n{\n    $id = (int) $id;\n    $courseId = ((int) $courseId) ?: api_get_course_int_id();\n    $course = api_get_course_entity($courseId);\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n\n    $sessionCondition = '';\n    if (!empty($sessionId)) {\n        $sessionCondition = api_get_session_condition($sessionId, true);\n    }\n\n    $webCodePath = api_get_path(WEB_CODE_PATH);\n\n    $sql = \"SELECT * FROM $table\n            WHERE\n                id = $id AND c_id = $courseId\n                $sessionCondition\";\n    $result = Database::query($sql);\n    $work = [];\n    if (Database::num_rows($result)) {\n        $work = Database::fetch_array($result, 'ASSOC');\n        if (empty($work['title'])) {\n            $work['title'] = basename($work['url']);\n        }\n        $work['download_url'] = $webCodePath.'work/download.php?id='.$work['id'].'&'.api_get_cidreq();\n        $work['view_url'] = $webCodePath.'work/view.php?id='.$work['id'].'&'.api_get_cidreq();\n        $work['show_url'] = $webCodePath.'work/show_file.php?id='.$work['id'].'&'.api_get_cidreq();\n        $work['show_content'] = '';\n        if ($work['contains_file']) {\n            $fileType = '';\n            $file = api_get_path(SYS_COURSE_PATH).$course->getDirectory().'/'.$work['url'];\n            if (file_exists($file)) {\n                $fileType = mime_content_type($file);\n            }\n\n            if (in_array($fileType, ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'])) {\n                $work['show_content'] = Display::img($work['show_url'], $work['title'], null, false);\n            } elseif (false !== strpos($fileType, 'video/')) {\n                $work['show_content'] = Display::tag(\n                    'video',\n                    get_lang('FileFormatNotSupported'),\n                    ['src' => $work['show_url']]\n                );\n            }\n        }\n\n        $fieldValue = new ExtraFieldValue('work');\n        $work['extra'] = $fieldValue->getAllValuesForAnItem($id, true);\n    }\n\n    return $work;\n}\n\n/**\n * @param int $user_id\n * @param int $work_id\n *\n * @return int\n */\nfunction get_work_count_by_student($user_id, $work_id)\n{\n    $user_id = (int) $user_id;\n    $work_id = (int) $work_id;\n    $course_id = api_get_course_int_id();\n    $session_id = api_get_session_id();\n    $sessionCondition = api_get_session_condition($session_id);\n\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $sql = \"SELECT COUNT(*) as count\n            FROM  $table\n            WHERE\n                c_id = $course_id AND\n                parent_id = $work_id AND\n                user_id = $user_id AND\n                active IN (0, 1)\n                $sessionCondition\";\n    $result = Database::query($sql);\n    $return = 0;\n    if (Database::num_rows($result)) {\n        $return = Database::fetch_row($result, 'ASSOC');\n        $return = (int) ($return[0]);\n    }\n\n    return $return;\n}\n\n/**\n * @param int $id\n * @param int $courseId\n *\n * @return array\n */\nfunction get_work_assignment_by_id($id, $courseId = 0)\n{\n    $courseId = (int) $courseId;\n    if (empty($courseId)) {\n        $courseId = api_get_course_int_id();\n    }\n    $id = (int) $id;\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n    $sql = \"SELECT * FROM $table\n            WHERE c_id = $courseId AND publication_id = $id\";\n    $result = Database::query($sql);\n    $return = [];\n    if (Database::num_rows($result)) {\n        $return = Database::fetch_array($result, 'ASSOC');\n    }\n\n    return $return;\n}\n\n/**\n * @param int    $id\n * @param array  $my_folder_data\n * @param string $add_in_where_query\n * @param int    $course_id\n * @param int    $session_id\n *\n * @return array\n */\nfunction getWorkList($id, $my_folder_data, $add_in_where_query = null, $course_id = 0, $session_id = 0)\n{\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n\n    $course_id = $course_id ? $course_id : api_get_course_int_id();\n    $session_id = $session_id ? $session_id : api_get_session_id();\n    $condition_session = api_get_session_condition($session_id);\n    $group_id = api_get_group_id();\n\n    $groupIid = 0;\n    if ($group_id) {\n        $groupInfo = GroupManager::get_group_properties($group_id);\n        if ($groupInfo) {\n            $groupIid = $groupInfo['iid'];\n        }\n    }\n\n    $is_allowed_to_edit = api_is_allowed_to_edit(null, true);\n    $linkInfo = GradebookUtils::isResourceInCourseGradebook(\n        api_get_course_id(),\n        3,\n        $id,\n        api_get_session_id()\n    );\n\n    if ($linkInfo) {\n        $workInGradeBookLinkId = $linkInfo['id'];\n        if ($workInGradeBookLinkId) {\n            if ($is_allowed_to_edit) {\n                if (intval($my_folder_data['qualification']) == 0) {\n                    echo Display::return_message(\n                        get_lang('MaxWeightNeedToBeProvided'),\n                        'warning'\n                    );\n                }\n            }\n        }\n    }\n\n    $contains_file_query = '';\n    // Get list from database\n    if ($is_allowed_to_edit) {\n        $active_condition = ' active IN (0, 1)';\n        $sql = \"SELECT * FROM $work_table\n                WHERE\n                    c_id = $course_id\n                    $add_in_where_query\n                    $condition_session AND\n                    $active_condition AND\n                    (parent_id = 0)\n                    $contains_file_query AND\n                    post_group_id = $groupIid\n                ORDER BY sent_date DESC\";\n    } else {\n        if (!empty($group_id)) {\n            // set to select only messages posted by the user's group\n            $group_query = \" WHERE c_id = $course_id AND post_group_id = $groupIid\";\n            $subdirs_query = ' AND parent_id = 0';\n        } else {\n            $group_query = \" WHERE c_id = $course_id AND (post_group_id = '0' OR post_group_id is NULL) \";\n            $subdirs_query = ' AND parent_id = 0';\n        }\n        //@todo how we can active or not an assignment?\n        $active_condition = ' AND active IN (1, 0)';\n        $sql = \"SELECT * FROM  $work_table\n                $group_query\n                $subdirs_query\n                $add_in_where_query\n                $active_condition\n                $condition_session\n                ORDER BY title\";\n    }\n\n    $work_parents = [];\n\n    $sql_result = Database::query($sql);\n    if (Database::num_rows($sql_result)) {\n        while ($work = Database::fetch_object($sql_result)) {\n            if (0 == $work->parent_id) {\n                $work_parents[] = $work;\n            }\n        }\n    }\n\n    return $work_parents;\n}\n\n/**\n * @param int $userId\n * @param int $courseId\n * @param int $sessionId\n *\n * @return array\n */\nfunction getWorkPerUser($userId, $courseId = 0, $sessionId = 0)\n{\n    $works = getWorkList(null, null, null, $courseId, $sessionId);\n    $result = [];\n    if (!empty($works)) {\n        foreach ($works as $workData) {\n            $workId = $workData->id;\n            $result[$workId]['work'] = $workData;\n            $result[$workId]['work']->user_results = get_work_user_list(\n                0,\n                100,\n                null,\n                null,\n                $workId,\n                null,\n                $userId,\n                false,\n                $courseId,\n                $sessionId\n            );\n        }\n    }\n\n    return $result;\n}\n\n/**\n * @param int $workId\n * @param int $groupId\n * @param int $course_id\n * @param int $sessionId\n */\nfunction getUniqueStudentAttemptsTotal($workId, $groupId, $course_id, $sessionId)\n{\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $user_table = Database::get_main_table(TABLE_MAIN_USER);\n    $course_id = (int) $course_id;\n    $workId = (int) $workId;\n    $sessionId = (int) $sessionId;\n    $groupId = (int) $groupId;\n    $sessionCondition = api_get_session_condition(\n        $sessionId,\n        true,\n        false,\n        'w.session_id'\n    );\n\n    $groupIid = 0;\n    if ($groupId) {\n        $groupInfo = GroupManager::get_group_properties($groupId);\n        $groupIid = $groupInfo['iid'];\n    }\n\n    $sql = \"SELECT count(DISTINCT u.user_id)\n            FROM $work_table w\n            INNER JOIN $user_table u\n            ON w.user_id = u.user_id\n            WHERE\n                w.c_id = $course_id\n                $sessionCondition AND\n                w.parent_id = $workId AND\n                w.post_group_id = $groupIid AND\n                w.active IN (0, 1)\n            \";\n\n    $res_document = Database::query($sql);\n    $rowCount = Database::fetch_row($res_document);\n\n    return $rowCount[0];\n}\n\n/**\n * @param mixed $workId\n * @param int   $groupId\n * @param int   $course_id\n * @param int   $sessionId\n * @param int   $userId       user id to filter\n * @param array $onlyUserList only parse this user list\n *\n * @return mixed\n */\nfunction getUniqueStudentAttempts(\n    $workId,\n    $groupId,\n    $course_id,\n    $sessionId,\n    $userId = null,\n    $onlyUserList = []\n) {\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $user_table = Database::get_main_table(TABLE_MAIN_USER);\n\n    $course_id = (int) $course_id;\n    $workCondition = null;\n    if (is_array($workId)) {\n        $workId = array_map('intval', $workId);\n        $workId = implode(\"','\", $workId);\n        $workCondition = \" w.parent_id IN ('\".$workId.\"') AND\";\n    } else {\n        $workId = (int) $workId;\n        $workCondition = ' w.parent_id = '.$workId.' AND';\n    }\n\n    $sessionId = (int) $sessionId;\n    $groupId = (int) $groupId;\n    $studentCondition = null;\n\n    if (!empty($onlyUserList)) {\n        $onlyUserList = array_map('intval', $onlyUserList);\n        $studentCondition = \"AND u.user_id IN ('\".implode(\"', '\", $onlyUserList).\"') \";\n    } else {\n        if (empty($userId)) {\n            return 0;\n        }\n    }\n\n    $groupIid = 0;\n    if ($groupId) {\n        $groupInfo = GroupManager::get_group_properties($groupId);\n        $groupIid = $groupInfo['iid'];\n    }\n\n    $sessionCondition = api_get_session_condition(\n        $sessionId,\n        true,\n        false,\n        'w.session_id'\n    );\n\n    $sql = \"SELECT count(*) FROM (\n                SELECT count(*), w.parent_id\n                FROM $work_table w\n                INNER JOIN $user_table u\n                ON w.user_id = u.user_id\n                WHERE\n                    w.filetype = 'file' AND\n                    w.c_id = $course_id\n                    $sessionCondition AND\n                    $workCondition\n                    w.post_group_id = $groupIid AND\n                    w.active IN (0, 1) $studentCondition\n                \";\n    if (!empty($userId)) {\n        $userId = (int) $userId;\n        $sql .= ' AND u.user_id = '.$userId;\n    }\n    $sql .= ' GROUP BY u.user_id, w.parent_id) as t';\n    $result = Database::query($sql);\n    $row = Database::fetch_row($result);\n\n    return $row[0];\n}\n\n/**\n * Shows the work list (student view).\n *\n * @return string\n */\nfunction showStudentWorkGrid()\n{\n    $courseInfo = api_get_course_info();\n    $url = api_get_path(WEB_AJAX_PATH).'model.ajax.php?a=get_work_student&'.api_get_cidreq();\n\n    $columns = [\n        get_lang('Type'),\n        get_lang('Title'),\n        get_lang('HandOutDateLimit'),\n        get_lang('Feedback'),\n        get_lang('LastUpload'),\n    ];\n\n    $columnModel = [\n        ['name' => 'type', 'index' => 'type', 'width' => '30', 'align' => 'center', 'sortable' => 'false'],\n        ['name' => 'title', 'index' => 'title', 'width' => '250', 'align' => 'left'],\n        ['name' => 'expires_on', 'index' => 'expires_on', 'width' => '80', 'align' => 'center', 'sortable' => 'false'],\n        ['name' => 'feedback', 'index' => 'feedback', 'width' => '80', 'align' => 'center', 'sortable' => 'false'],\n        ['name' => 'last_upload', 'index' => 'feedback', 'width' => '125', 'align' => 'center', 'sortable' => 'false'],\n    ];\n\n    if ($courseInfo['show_score'] == 0) {\n        $columnModel[] = [\n            'name' => 'others',\n            'index' => 'others',\n            'width' => '80',\n            'align' => 'left',\n            'sortable' => 'false',\n        ];\n        $columns[] = get_lang('Others');\n    }\n\n    $params = [\n        'autowidth' => 'true',\n        'height' => 'auto',\n    ];\n\n    $html = '<script>\n        $(function() {\n            '.Display::grid_js('workList', $url, $columns, $columnModel, $params, [], null, true).'\n        });\n    </script>';\n\n    $html .= Display::grid_html('workList');\n\n    return $html;\n}\n\n/**\n * Shows the work list (student view).\n *\n * @return string\n */\nfunction showStudentAllWorkGrid($withResults = 1)\n{\n    $withResults = (int) $withResults;\n    $url = api_get_path(WEB_AJAX_PATH).'model.ajax.php?a=get_all_work_student&with_results='.$withResults;\n\n    $columns = [\n        get_lang('Type'),\n        get_lang('Title'),\n        get_lang('HandOutDateLimit'),\n    ];\n\n    $id = 'workList';\n    if ($withResults) {\n        $id = 'workListWithResults';\n        $columns[] = get_lang('Feedback');\n        $columns[] = get_lang('LastUpload');\n    }\n\n    $columnModel = [\n        ['name' => 'type', 'index' => 'type', 'width' => '50', 'align' => 'center', 'sortable' => 'false'],\n        ['name' => 'title', 'index' => 'title', 'width' => '600', 'align' => 'left'],\n        ['name' => 'expires_on', 'index' => 'expires_on', 'width' => '125', 'align' => 'center', 'sortable' => 'false'],\n    ];\n\n    if ($withResults) {\n        $columnModel[] = [\n            'name' => 'feedback',\n            'index' => 'feedback',\n            'width' => '150',\n            'align' => 'center',\n            'sortable' => 'false',\n        ];\n        $columnModel[] = [\n            'name' => 'last_upload',\n            'index' => 'last_upload',\n            'width' => '150',\n            'align' => 'center',\n            'sortable' => 'false',\n        ];\n    }\n\n    $params = [\n        'autowidth' => 'true',\n        'height' => 'auto',\n    ];\n\n    $html = '<script>\n        $(function() {\n            '.Display::grid_js($id, $url, $columns, $columnModel, $params, [], null, true).'\n        });\n    </script>';\n\n    $html .= Display::grid_html($id);\n\n    return $html;\n}\n\n/**\n * Shows the work list (teacher view).\n *\n * @return string\n */\nfunction showTeacherWorkGrid()\n{\n    $columnModel = [\n        ['name' => 'type', 'index' => 'type', 'width' => '35', 'align' => 'center', 'sortable' => 'false'],\n        ['name' => 'title', 'index' => 'title', 'width' => '300', 'align' => 'left', 'wrap_cell' => \"true\"],\n        ['name' => 'sent_date', 'index' => 'sent_date', 'width' => '125', 'align' => 'center'],\n        ['name' => 'expires_on', 'index' => 'expires_on', 'width' => '125', 'align' => 'center'],\n        ['name' => 'amount', 'index' => 'amount', 'width' => '110', 'align' => 'center', 'sortable' => 'false'],\n        ['name' => 'actions', 'index' => 'actions', 'width' => '110', 'align' => 'left', 'sortable' => 'false'],\n    ];\n    $url = api_get_path(WEB_AJAX_PATH).'model.ajax.php?a=get_work_teacher&'.api_get_cidreq();\n    $deleteUrl = api_get_path(WEB_AJAX_PATH).'work.ajax.php?a=delete_work&'.api_get_cidreq();\n\n    $columns = [\n        get_lang('Type'),\n        get_lang('Title'),\n        get_lang('SentDate'),\n        get_lang('HandOutDateLimit'),\n        get_lang('AmountSubmitted'),\n        get_lang('Actions'),\n    ];\n\n    $params = [\n        'multiselect' => true,\n        'autowidth' => 'true',\n        'height' => 'auto',\n        'sortname' => 'sent_date',\n        'sortorder' => 'asc',\n    ];\n\n    $html = '<script>\n    $(function() {\n        '.Display::grid_js('workList', $url, $columns, $columnModel, $params, [], null, true).'\n        $(\"#workList\").jqGrid(\n            \"navGrid\",\n            \"#workList_pager\",\n            { edit: false, add: false, del: true },\n            { height:280, reloadAfterSubmit:false }, // edit options\n            { height:280, reloadAfterSubmit:false }, // add options\n            { reloadAfterSubmit:false, url: \"'.$deleteUrl.'\" }, // del options\n            { width:500 } // search options\n        );\n    });\n    </script>';\n    $html .= Display::grid_html('workList');\n\n    return $html;\n}\n\n/**\n * Builds the form that enables the user to\n * move a document from one directory to another\n * This function has been copied from the document/document.inc.php library.\n *\n * @param array  $folders\n * @param string $curdirpath\n * @param string $move_file\n * @param string $group_dir\n *\n * @return string html form\n */\nfunction build_work_move_to_selector($folders, $curdirpath, $move_file, $group_dir = '')\n{\n    $course_id = api_get_course_int_id();\n    $move_file = (int) $move_file;\n    $tbl_work = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $sql = \"SELECT title, url FROM $tbl_work\n            WHERE c_id = $course_id AND id ='\".$move_file.\"'\";\n    $result = Database::query($sql);\n    $row = Database::fetch_array($result, 'ASSOC');\n    $title = empty($row['title']) ? basename($row['url']) : $row['title'];\n\n    $form = new FormValidator(\n        'move_to_form',\n        'post',\n        api_get_self().'?'.api_get_cidreq().'&curdirpath='.Security::remove_XSS($curdirpath)\n    );\n\n    $form->addHeader(get_lang('MoveFile').' - '.Security::remove_XSS($title));\n    $form->addHidden('item_id', $move_file);\n    $form->addHidden('action', 'move_to');\n\n    // Group documents cannot be uploaded in the root\n    if ($group_dir == '') {\n        if (is_array($folders)) {\n            foreach ($folders as $fid => $folder) {\n                //you cannot move a file to:\n                //1. current directory\n                //2. inside the folder you want to move\n                //3. inside a subfolder of the folder you want to move\n                if (($curdirpath != $folder) &&\n                    ($folder != $move_file) &&\n                    (substr($folder, 0, strlen($move_file) + 1) != $move_file.'/')\n                ) {\n                    $options[$fid] = $folder;\n                }\n            }\n        }\n    } else {\n        if ($curdirpath != '/') {\n            $form .= '<option value=\"0\">/ ('.get_lang('Root').')</option>';\n        }\n        foreach ($folders as $fid => $folder) {\n            if (($curdirpath != $folder) && ($folder != $move_file) &&\n                (substr($folder, 0, strlen($move_file) + 1) != $move_file.'/')\n            ) {\n                //cannot copy dir into his own subdir\n                $display_folder = substr($folder, strlen($group_dir));\n                $display_folder = ($display_folder == '') ? '/ ('.get_lang('Root').')' : $display_folder;\n                //$form .= '<option value=\"'.$fid.'\">'.$display_folder.'</option>'.\"\\n\";\n                $options[$fid] = $display_folder;\n            }\n        }\n    }\n\n    $form->addSelect('move_to_id', get_lang('Select'), $options);\n    $form->addButtonSend(get_lang('MoveFile'), 'move_file_submit');\n\n    return $form->returnForm();\n}\n\n/**\n * creates a new directory trying to find a directory name\n * that doesn't already exist.\n *\n * @author Hugues Peeters <hugues.peeters@claroline.net>\n * @author Bert Vanderkimpen\n * @author Yannick Warnier <ywarnier@beeznest.org> Adaptation for work tool\n *\n * @param string $workDir        Base work dir (.../work)\n * @param string $desiredDirName complete path of the desired name\n *\n * @return string actual directory name if it succeeds, boolean false otherwise\n */\nfunction create_unexisting_work_directory($workDir, $desiredDirName)\n{\n    $counter = 0;\n    $workDir = (substr($workDir, -1, 1) == '/' ? $workDir : $workDir.'/');\n    $checkDirName = $desiredDirName;\n    while (file_exists($workDir.$checkDirName)) {\n        $counter++;\n        $checkDirName = $desiredDirName.$counter;\n    }\n\n    if (@mkdir($workDir.$checkDirName, api_get_permissions_for_new_directories())) {\n        return $checkDirName;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Delete a work-tool directory.\n *\n * @param int $id work directory id to delete\n *\n * @return int -1 on error\n */\nfunction deleteDirWork($id)\n{\n    $locked = api_resource_is_locked_by_gradebook($id, LINK_STUDENTPUBLICATION);\n\n    if ($locked == true) {\n        echo Display::return_message(get_lang('ResourceLockedByGradebook'), 'warning');\n\n        return false;\n    }\n\n    $_course = api_get_course_info();\n    $id = (int) $id;\n    $work_data = get_work_data_by_id($id);\n\n    if (empty($work_data)) {\n        return false;\n    }\n\n    $base_work_dir = api_get_path(SYS_COURSE_PATH).$_course['path'].'/work';\n    $work_data_url = $base_work_dir.$work_data['url'];\n    $check = Security::check_abs_path($work_data_url.'/', $base_work_dir.'/');\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $TSTDPUBASG = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n    $t_agenda = Database::get_course_table(TABLE_AGENDA);\n    $course_id = api_get_course_int_id();\n    $sessionId = api_get_session_id();\n\n    if (!empty($work_data['url'])) {\n        if ($check) {\n            $consideredWorkingTime = api_get_configuration_value('considered_working_time');\n            if (!empty($consideredWorkingTime)) {\n                $fieldValue = new ExtraFieldValue('work');\n                $resultExtra = $fieldValue->getAllValuesForAnItem(\n                    $work_data['id'],\n                    true\n                );\n\n                $workingTime = null;\n                foreach ($resultExtra as $field) {\n                    $field = $field['value'];\n                    if ($consideredWorkingTime == $field->getField()->getVariable()) {\n                        $workingTime = $field->getValue();\n\n                        break;\n                    }\n                }\n\n                $courseUsers = CourseManager::get_user_list_from_course_code($_course['code'], $sessionId);\n                if (!empty($workingTime)) {\n                    foreach ($courseUsers as $user) {\n                        $userWorks = get_work_user_list(\n                            0,\n                            100,\n                            null,\n                            null,\n                            $work_data['id'],\n                            null,\n                            $user['user_id'],\n                            false,\n                            $course_id,\n                            $sessionId\n                        );\n\n                        if (count($userWorks) != 1) {\n                            continue;\n                        }\n                        Event::eventRemoveVirtualCourseTime(\n                            $course_id,\n                            $user['user_id'],\n                            $sessionId,\n                            $workingTime,\n                            $work_data['iid']\n                        );\n                    }\n                }\n            }\n\n            // Deleting all contents inside the folder\n            $sql = \"UPDATE $table SET active = 2\n                    WHERE c_id = $course_id AND filetype = 'folder' AND id = $id\";\n            Database::query($sql);\n\n            $sql = \"UPDATE $table SET active = 2\n                    WHERE c_id = $course_id AND parent_id = $id\";\n            Database::query($sql);\n\n            $new_dir = $work_data_url.'_DELETED_'.$id;\n\n            if (api_get_setting('permanently_remove_deleted_files') == 'true') {\n                my_delete($work_data_url);\n            } else {\n                if (file_exists($work_data_url)) {\n                    rename($work_data_url, $new_dir);\n                }\n            }\n\n            // Gets calendar_id from student_publication_assigment\n            $sql = \"SELECT add_to_calendar FROM $TSTDPUBASG\n                    WHERE c_id = $course_id AND publication_id = $id\";\n            $res = Database::query($sql);\n            $calendar_id = Database::fetch_row($res);\n\n            // delete from agenda if it exists\n            if (!empty($calendar_id[0])) {\n                $sql = \"DELETE FROM $t_agenda\n                        WHERE c_id = $course_id AND id = '\".$calendar_id[0].\"'\";\n                Database::query($sql);\n            }\n            $sql = \"DELETE FROM $TSTDPUBASG\n                    WHERE c_id = $course_id AND publication_id = $id\";\n            Database::query($sql);\n\n            Skill::deleteSkillsFromItem($id, ITEM_TYPE_STUDENT_PUBLICATION);\n\n            Event::addEvent(\n                LOG_WORK_DIR_DELETE,\n                LOG_WORK_DATA,\n                [\n                    'id' => $work_data['id'],\n                    'url' => $work_data['url'],\n                    'title' => $work_data['title'],\n                ],\n                null,\n                api_get_user_id(),\n                api_get_course_int_id(),\n                $sessionId\n            );\n\n            $linkInfo = GradebookUtils::isResourceInCourseGradebook(\n                api_get_course_id(),\n                3,\n                $id,\n                api_get_session_id()\n            );\n            $link_id = $linkInfo['id'];\n            if ($linkInfo !== false) {\n                GradebookUtils::remove_resource_from_course_gradebook($link_id);\n            }\n\n            return true;\n        }\n    }\n}\n\n/**\n * Get the path of a document in the student_publication table (path relative to the course directory).\n *\n * @param int $id\n *\n * @return string Path (or -1 on error)\n */\nfunction get_work_path($id)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $course_id = api_get_course_int_id();\n    $sql = 'SELECT url FROM '.$table.'\n            WHERE c_id = '.$course_id.' AND id='.(int) $id;\n    $res = Database::query($sql);\n    if (Database::num_rows($res)) {\n        $row = Database::fetch_array($res);\n\n        return $row['url'];\n    }\n\n    return -1;\n}\n\n/**\n * Update the url of a work in the student_publication table.\n *\n * @param int    $id        of the work to update\n * @param string $new_path  Destination directory where the work has been moved (must end with a '/')\n * @param int    $parent_id\n *\n * @return mixed Int -1 on error, sql query result on success\n */\nfunction updateWorkUrl($id, $new_path, $parent_id)\n{\n    if (empty($id)) {\n        return -1;\n    }\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $course_id = api_get_course_int_id();\n    $id = (int) $id;\n    $parent_id = (int) $parent_id;\n\n    $sql = \"SELECT * FROM $table\n            WHERE c_id = $course_id AND id = $id\";\n    $res = Database::query($sql);\n    if (Database::num_rows($res) != 1) {\n        return -1;\n    } else {\n        $row = Database::fetch_array($res);\n        $filename = basename($row['url']);\n        $new_url = $new_path.$filename;\n        $new_url = Database::escape_string($new_url);\n\n        $sql = \"UPDATE $table SET\n                   url = '$new_url',\n                   parent_id = '$parent_id'\n                WHERE c_id = $course_id AND id = $id\";\n\n        return Database::query($sql);\n    }\n}\n\n/**\n * Update the url of a dir in the student_publication table.\n *\n * @param array  $work_data work original data\n * @param string $newPath   Example: \"folder1\"\n *\n * @return bool\n */\nfunction updateDirName($work_data, $newPath)\n{\n    $course_id = $work_data['c_id'];\n    $work_id = (int) ($work_data['iid']);\n    $oldPath = $work_data['url'];\n    $originalNewPath = Database::escape_string($newPath);\n    $newPath = Database::escape_string($newPath);\n    $newPath = api_replace_dangerous_char($newPath);\n    $newPath = disable_dangerous_file($newPath);\n\n    if ($oldPath == '/'.$newPath) {\n        return true;\n    }\n\n    if (!empty($newPath)) {\n        $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n        $sql = \"UPDATE $table SET\n                    title = '\".$originalNewPath.\"'\n                WHERE\n                    c_id = $course_id AND\n                    iid = $work_id\";\n        Database::query($sql);\n    }\n}\n\n/**\n * returns all the javascript that is required for easily\n * validation when you create a work\n * this goes into the $htmlHeadXtra[] array.\n */\nfunction to_javascript_work()\n{\n    return '<script>\n        function updateDocumentTitle(value) {\n            var temp = value.indexOf(\"/\");\n            //linux path\n            if(temp != -1){\n                temp=value.split(\"/\");\n            } else {\n                temp=value.split(\"\\\\\\\");\n            }\n\n            var fullFilename = temp[temp.length - 1];\n            var baseFilename = fullFilename;\n\n            // get file extension\n            var fileExtension = \"\";\n            if (fullFilename.match(/\\..+/)) {\n                fileInfo = fullFilename.match(/(.*)\\.([^.]+)$/);\n                if (fileInfo.length > 1) {\n                    fileExtension = \".\"+fileInfo[fileInfo.length - 1];\n                    baseFilename = fileInfo[fileInfo.length - 2];\n                }\n            }\n\n            document.getElementById(\"file_upload\").value = baseFilename;\n            document.getElementById(\"file_extension\").value = fileExtension;\n            $(\"#contains_file_id\").attr(\"value\", 1);\n        }\n        function setFocus() {\n            $(\"#work_title\").focus();\n        }\n\n        $(function() {\n            setFocus();\n            var checked = $(\"#expiry_date\").attr(\"checked\");\n            if (checked) {\n                $(\"#option2\").show();\n            } else {\n                $(\"#option2\").hide();\n            }\n\n            var checkedEndDate = $(\"#end_date\").attr(\"checked\");\n            if (checkedEndDate) {\n                $(\"#option3\").show();\n                $(\"#ends_on\").attr(\"checked\", true);\n            } else {\n                $(\"#option3\").hide();\n                $(\"#ends_on\").attr(\"checked\", false);\n            }\n\n            $(\"#expiry_date\").click(function() {\n                $(\"#option2\").toggle();\n            });\n\n            $(\"#end_date\").click(function() {\n                $(\"#option3\").toggle();\n            });\n        });\n    </script>';\n}\n\n/**\n * Gets the id of a student publication with a given path.\n *\n * @param string $path\n *\n * @return true if is found / false if not found\n */\n// TODO: The name of this function does not fit with the kind of information it returns.\n// Maybe check_work_id() or is_work_id()?\nfunction get_work_id($path)\n{\n    $TBL_STUDENT_PUBLICATION = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $TBL_PROP_TABLE = Database::get_course_table(TABLE_ITEM_PROPERTY);\n    $course_id = api_get_course_int_id();\n    $path = Database::escape_string($path);\n\n    if (api_is_allowed_to_edit()) {\n        $sql = \"SELECT work.id\n                FROM $TBL_STUDENT_PUBLICATION AS work, $TBL_PROP_TABLE AS props\n                WHERE\n                    props.c_id = $course_id AND\n                    work.c_id = $course_id AND\n                    props.tool='work' AND\n                    work.id=props.ref AND\n                    work.url LIKE 'work/\".$path.\"%' AND\n                    work.filetype='file' AND\n                    props.visibility<>'2'\";\n    } else {\n        $sql = \"SELECT work.id\n                FROM $TBL_STUDENT_PUBLICATION AS work, $TBL_PROP_TABLE AS props\n                WHERE\n                    props.c_id = $course_id AND\n                    work.c_id = $course_id AND\n                    props.tool='work' AND\n                    work.id=props.ref AND\n                    work.url LIKE 'work/\".$path.\"%' AND\n                    work.filetype='file' AND\n                    props.visibility<>'2' AND\n                    props.lastedit_user_id = '\".api_get_user_id().\"'\";\n    }\n    $result = Database::query($sql);\n    $num_rows = Database::num_rows($result);\n\n    if ($result && $num_rows > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * @param int $work_id\n * @param int $onlyMeUserId show only my works\n * @param int $notMeUserId  show works from everyone except me\n *\n * @return int\n */\nfunction get_count_work($work_id, $onlyMeUserId = null, $notMeUserId = null)\n{\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $iprop_table = Database::get_course_table(TABLE_ITEM_PROPERTY);\n    $user_table = Database::get_main_table(TABLE_MAIN_USER);\n\n    $is_allowed_to_edit = api_is_allowed_to_edit(null, true) || api_is_coach();\n    $session_id = api_get_session_id();\n    $condition_session = api_get_session_condition(\n        $session_id,\n        true,\n        false,\n        'work.session_id'\n    );\n\n    $group_id = api_get_group_id();\n    $course_info = api_get_course_info();\n    $course_id = $course_info['real_id'];\n    $work_id = (int) $work_id;\n\n    $groupIid = 0;\n    if ($group_id) {\n        $groupInfo = GroupManager::get_group_properties($group_id);\n        if ($groupInfo && isset($groupInfo['iid'])) {\n            $groupIid = (int) $groupInfo['iid'];\n        }\n    }\n\n    if (!empty($group_id)) {\n        // set to select only messages posted by the user's group\n        $extra_conditions = \" work.post_group_id = '\".$groupIid.\"' \";\n    } else {\n        $extra_conditions = \" (work.post_group_id = '0' or work.post_group_id IS NULL) \";\n    }\n\n    if ($is_allowed_to_edit) {\n        $extra_conditions .= ' AND work.active IN (0, 1) ';\n    } else {\n        $extra_conditions .= ' AND work.active IN (0, 1) AND accepted = 1';\n        if (isset($course_info['show_score']) && $course_info['show_score'] == 1) {\n            $extra_conditions .= \" AND work.user_id = \".api_get_user_id().\" \";\n        } else {\n            $extra_conditions .= '';\n        }\n    }\n\n    $extra_conditions .= \" AND parent_id  = \".$work_id.\"  \";\n    $where_condition = null;\n    if (!empty($notMeUserId)) {\n        $where_condition .= \" AND u.user_id <> \".intval($notMeUserId);\n    }\n\n    if (!empty($onlyMeUserId)) {\n        $where_condition .= \" AND u.user_id =  \".intval($onlyMeUserId);\n    }\n\n    $sql = \"SELECT count(*) as count\n            FROM $iprop_table prop\n            INNER JOIN $work_table work\n            ON (\n                prop.ref = work.id AND\n                prop.c_id = $course_id AND\n                prop.tool='work' AND\n                prop.visibility <> 2 AND\n                work.c_id = $course_id\n            )\n            INNER JOIN $user_table u\n            ON (work.user_id = u.user_id)\n            WHERE $extra_conditions $where_condition $condition_session\";\n\n    $result = Database::query($sql);\n\n    $users_with_work = 0;\n    if (Database::num_rows($result)) {\n        $result = Database::fetch_array($result);\n        $users_with_work = $result['count'];\n    }\n\n    return $users_with_work;\n}\n\n/**\n * @param int    $start\n * @param int    $limit\n * @param string $column\n * @param string $direction\n * @param string $where_condition\n * @param bool   $getCount\n *\n * @return array\n */\nfunction getWorkListStudent(\n    $start,\n    $limit,\n    $column,\n    $direction,\n    $where_condition,\n    $getCount = false\n) {\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $workTableAssignment = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n    $courseInfo = api_get_course_info();\n    $course_id = $courseInfo['real_id'];\n    $session_id = api_get_session_id();\n    $condition_session = api_get_session_condition($session_id);\n    $group_id = api_get_group_id();\n    $userId = api_get_user_id();\n\n    $isDrhOfCourse = CourseManager::isUserSubscribedInCourseAsDrh(\n        $userId,\n        $courseInfo\n    );\n\n    if (!in_array($direction, ['asc', 'desc'])) {\n        $direction = 'desc';\n    }\n    if (!empty($where_condition)) {\n        $where_condition = ' AND '.$where_condition;\n    }\n\n    $column = !empty($column) ? Database::escape_string($column) : 'sent_date';\n    $start = (int) $start;\n    $limit = (int) $limit;\n\n    $groupIid = 0;\n    if ($group_id) {\n        $groupInfo = GroupManager::get_group_properties($group_id);\n        if ($groupInfo) {\n            $groupIid = (int) $groupInfo['iid'];\n        }\n    }\n\n    if (!empty($groupIid)) {\n        $group_query = \" WHERE w.c_id = $course_id AND post_group_id = $groupIid\";\n        $subdirs_query = 'AND parent_id = 0';\n    } else {\n        $group_query = \" WHERE w.c_id = $course_id AND (post_group_id = '0' or post_group_id is NULL)  \";\n        $subdirs_query = 'AND parent_id = 0';\n    }\n\n    $active_condition = ' AND active IN (1, 0)';\n\n    if ($getCount) {\n        $select = 'SELECT count(w.id) as count ';\n    } else {\n        $select = 'SELECT w.*, a.expires_on, expires_on, ends_on, enable_qualification ';\n    }\n\n    $sql = \"$select\n            FROM $workTable w\n            LEFT JOIN $workTableAssignment a\n            ON (a.publication_id = w.id AND a.c_id = w.c_id)\n                $group_query\n                $subdirs_query\n                $active_condition\n                $condition_session\n                $where_condition\n            \";\n\n    $sql .= \" ORDER BY `$column` $direction \";\n\n    if (!empty($start) && !empty($limit)) {\n        $sql .= \" LIMIT $start, $limit\";\n    }\n\n    $result = Database::query($sql);\n\n    if ($getCount) {\n        $row = Database::fetch_array($result);\n\n        return $row['count'];\n    }\n\n    $works = [];\n    $url = api_get_path(WEB_CODE_PATH).'work/work_list.php?'.api_get_cidreq();\n    if ($isDrhOfCourse) {\n        $url = api_get_path(WEB_CODE_PATH).'work/work_list_all.php?'.api_get_cidreq();\n    }\n\n    $urlOthers = api_get_path(WEB_CODE_PATH).'work/work_list_others.php?'.api_get_cidreq().'&id=';\n    while ($work = Database::fetch_array($result, 'ASSOC')) {\n        $isSubscribed = userIsSubscribedToWork($userId, $work['id'], $course_id);\n        if ($isSubscribed == false) {\n            continue;\n        }\n\n        $visibility = api_get_item_visibility($courseInfo, 'work', $work['id'], $session_id);\n\n        if ($visibility != 1) {\n            continue;\n        }\n\n        $work['type'] = Display::return_icon('work.png');\n        $work['expires_on'] = empty($work['expires_on']) ? null : api_get_local_time($work['expires_on']);\n\n        if (empty($work['title'])) {\n            $work['title'] = basename($work['url']);\n        }\n\n        $whereCondition = \" AND u.user_id = $userId \";\n\n        $workList = get_work_user_list(\n            0,\n            1000,\n            null,\n            null,\n            $work['id'],\n            $whereCondition\n        );\n\n        $count = getTotalWorkComment($workList, $courseInfo);\n        $lastWork = getLastWorkStudentFromParentByUser($userId, $work, $courseInfo);\n\n        if (!is_null($count) && !empty($count)) {\n            $urlView = api_get_path(WEB_CODE_PATH).'work/view.php?id='.$lastWork['id'].'&'.api_get_cidreq();\n\n            $feedback = '&nbsp;'.Display::url(\n                Display::returnFontAwesomeIcon('comments-o'),\n                $urlView,\n                ['title' => get_lang('View')]\n            );\n\n            $work['feedback'] = ' '.Display::label($count.' '.get_lang('Feedback'), 'info').$feedback;\n        }\n\n        if (!empty($lastWork)) {\n            $work['last_upload'] = (!empty($lastWork['qualification'])) ? $lastWork['qualification_rounded'].' - ' : '';\n            $work['last_upload'] .= api_get_local_time($lastWork['sent_date']);\n        }\n\n        $work['title'] = Display::url($work['title'], $url.'&id='.$work['id']);\n        $work['others'] = Display::url(\n            Display::return_icon('group.png', get_lang('Others')),\n            $urlOthers.$work['id']\n        );\n        $works[] = $work;\n    }\n\n    return $works;\n}\n\n/**\n * @param int    $start\n * @param int    $limit\n * @param string $column\n * @param string $direction\n * @param string $where_condition\n * @param bool   $getCount\n * @param int    $withResults\n *\n * @return array\n */\nfunction getAllWorkListStudent(\n    $start,\n    $limit,\n    $column,\n    $direction,\n    $where_condition,\n    $getCount = false,\n    $withResults = 1\n) {\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $workTableAssignment = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n    $userId = api_get_user_id();\n\n    if (empty($userId)) {\n        return [];\n    }\n\n    $courses = CourseManager::get_courses_list_by_user_id($userId, true);\n\n    if (!empty($where_condition)) {\n        $where_condition = ' AND '.$where_condition;\n    }\n\n    if (!in_array($direction, ['asc', 'desc'])) {\n        $direction = 'desc';\n    }\n\n    $column = !empty($column) ? Database::escape_string($column) : 'sent_date';\n    $start = (int) $start;\n    $limit = (int) $limit;\n    $courseQuery = [];\n    $courseList = [];\n    foreach ($courses as $course) {\n        $course_id = $course['real_id'];\n        $courseInfo = api_get_course_info_by_id($course_id);\n        $session_id = isset($course['session_id']) ? $course['session_id'] : 0;\n        $conditionSession = api_get_session_condition($session_id, true, false, 'w.session_id');\n        $parentCondition = '';\n        if ($withResults) {\n            $parentCondition = 'AND ww.parent_id is NOT NULL';\n        }\n        $courseQuery[] = \" (w.c_id = $course_id $conditionSession $parentCondition )\";\n        $courseList[$course_id] = $courseInfo;\n    }\n\n    $courseQueryToString = implode(' OR ', $courseQuery);\n\n    if ($getCount) {\n        if (empty($courseQuery)) {\n            return 0;\n        }\n        $select = 'SELECT count(DISTINCT(w.id)) as count ';\n    } else {\n        if (empty($courseQuery)) {\n            return [];\n        }\n        $select = 'SELECT DISTINCT\n                        w.title,\n                        w.url,\n                        w.id,\n                        w.c_id,\n                        w.session_id,\n                        a.expires_on,\n                        a.ends_on,\n                        a.enable_qualification,\n                        w.qualification,\n                        a.publication_id';\n    }\n\n    $checkSentWork = \" LEFT JOIN $workTable ww\n                       ON (ww.c_id = w.c_id AND ww.parent_id = w.id AND ww.user_id = $userId ) \";\n    $where = ' AND ww.url IS NULL ';\n    $expirationCondition = \" AND (a.expires_on IS NULL OR a.expires_on > '\".api_get_utc_datetime().\"') \";\n    if ($withResults) {\n        $where = '';\n        $checkSentWork = \" LEFT JOIN $workTable ww\n                           ON (\n                            ww.c_id = w.c_id AND\n                            ww.parent_id = w.id AND\n                            ww.user_id = $userId AND\n                            a.expires_on IS NULL AND\n                            ww.parent_id is NOT NULL\n                        ) \";\n        $expirationCondition = \" OR (\n                ww.parent_id is NULL AND\n                a.expires_on IS NOT NULL AND\n                a.expires_on < '\".api_get_utc_datetime().\"'\n            ) \";\n    }\n\n    $sql = \"$select\n            FROM $workTable w\n            LEFT JOIN $workTableAssignment a\n            ON (a.publication_id = w.id AND a.c_id = w.c_id)\n            $checkSentWork\n            WHERE\n                w.parent_id = 0 AND\n                w.active IN (1, 0) AND\n                ($courseQueryToString)\n                $where_condition\n                $expirationCondition\n                $where\n            \";\n\n    $sql .= \" ORDER BY `$column` $direction \";\n\n    if (!empty($start) && !empty($limit)) {\n        $sql .= \" LIMIT $start, $limit\";\n    }\n\n    $result = Database::query($sql);\n\n    if ($getCount) {\n        $row = Database::fetch_array($result);\n\n        if ($row) {\n            return (int) $row['count'];\n        }\n\n        return 0;\n    }\n\n    $works = [];\n    while ($work = Database::fetch_array($result, 'ASSOC')) {\n        $courseId = $work['c_id'];\n        $courseInfo = $courseList[$work['c_id']];\n        $courseCode = $courseInfo['code'];\n        $sessionId = $work['session_id'];\n\n        $cidReq = api_get_cidreq_params($courseCode, $sessionId);\n        $url = api_get_path(WEB_CODE_PATH).'work/work_list.php?'.$cidReq;\n        $isSubscribed = userIsSubscribedToWork($userId, $work['id'], $courseId);\n        if ($isSubscribed == false) {\n            continue;\n        }\n\n        $visibility = api_get_item_visibility($courseInfo, 'work', $work['id'], $sessionId);\n\n        if ($visibility != 1) {\n            continue;\n        }\n\n        $work['type'] = Display::return_icon('work.png');\n        $work['expires_on'] = empty($work['expires_on']) ? null : api_get_local_time($work['expires_on']);\n\n        if (empty($work['title'])) {\n            $work['title'] = basename($work['url']);\n        }\n\n        if ($withResults) {\n            $whereCondition = \" AND u.user_id = $userId \";\n            $workList = get_work_user_list(\n                0,\n                1000,\n                null,\n                null,\n                $work['id'],\n                $whereCondition,\n                null,\n                false,\n                $courseId,\n                $sessionId\n            );\n\n            $count = getTotalWorkComment($workList, $courseInfo);\n            $lastWork = getLastWorkStudentFromParentByUser($userId, $work, $courseInfo);\n\n            if (!is_null($count) && !empty($count)) {\n                $urlView = api_get_path(WEB_CODE_PATH).'work/view.php?id='.$lastWork['id'].'&'.$cidReq;\n\n                $feedback = '&nbsp;'.Display::url(\n                        Display::returnFontAwesomeIcon('comments-o'),\n                        $urlView,\n                        ['title' => get_lang('View')]\n                    );\n\n                $work['feedback'] = ' '.Display::label($count.' '.get_lang('Feedback'), 'info').$feedback;\n            }\n\n            if (!empty($lastWork)) {\n                $work['last_upload'] = (!empty($lastWork['qualification'])) ? $lastWork['qualification_rounded'].' - ' : '';\n                $work['last_upload'] .= api_get_local_time($lastWork['sent_date']);\n            }\n        }\n\n        $work['title'] = Display::url($work['title'], $url.'&id='.$work['id']);\n        $works[] = $work;\n    }\n\n    return $works;\n}\n\nfunction getWorkListTeacherQuery(\n    $courseId,\n    $sessionId,\n    $groupId,\n    $start,\n    $limit,\n    $column,\n    $direction,\n    $whereCondition,\n    $getCount = false\n): ?Statement {\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $workTableAssignment = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n\n    $condition_session = api_get_session_condition($sessionId);\n    $groupIid = 0;\n    if ($groupId) {\n        $groupInfo = GroupManager::get_group_properties($groupId);\n        $groupIid = $groupInfo['iid'];\n    }\n    $groupIid = (int) $groupIid;\n\n    $select = $getCount\n        ? \"count(w.id) as count\"\n        : \"w.*, a.expires_on, expires_on, ends_on, enable_qualification\";\n\n    $sql = \"SELECT $select\n        FROM $workTable w\n        LEFT JOIN $workTableAssignment a\n            ON (a.publication_id = w.id AND a.c_id = w.c_id)\n        WHERE\n            w.c_id = $courseId\n            $condition_session AND\n            active IN (0, 1) AND\n            parent_id = 0 AND\n            post_group_id = $groupIid\n            $whereCondition\n        ORDER BY `$column` $direction\";\n\n    if (!empty($start) && !empty($limit)) {\n        $sql .= \" LIMIT $start, $limit\";\n    }\n\n    return Database::query($sql);\n}\n\n/**\n * @return int|array\n */\nfunction getWorkListTeacherData(\n    $courseId,\n    $sessionId,\n    $groupId,\n    $start,\n    $limit,\n    $column,\n    $direction,\n    $whereCondition,\n    $getCount = false\n) {\n    $result = getWorkListTeacherQuery(\n        $courseId,\n        $sessionId,\n        $groupId,\n        $start,\n        $limit,\n        $column,\n        $direction,\n        $whereCondition,\n        $getCount\n    );\n\n    if ($getCount) {\n        $row = Database::fetch_array($result);\n\n        return (int) $row['count'];\n    }\n\n    $works = [];\n\n    while ($work = Database::fetch_array($result, 'ASSOC')) {\n        $workId = $work['id'];\n        $work['expires_on'] = empty($work['expires_on']) ? null : api_get_local_time($work['expires_on']);\n        $work['ends_on'] = empty($work['expires_on']) ? null : api_get_local_time($work['ends_on']);\n\n        $countUniqueAttempts = getUniqueStudentAttemptsTotal($workId, $groupId, $courseId, $sessionId);\n        $totalUsers = getStudentSubscribedToWork($workId, $courseId, $groupId, $sessionId, true);\n\n        $work['count_unique_attempts'] = $countUniqueAttempts;\n        $work['amount'] = Display::label(\n            \"$countUniqueAttempts/$totalUsers\",\n            'success'\n        );\n\n        if (empty($work['title'])) {\n            $work['title'] = basename($work['url']);\n        }\n\n        $work['sent_date'] = api_get_local_time($work['sent_date']);\n\n        $works[] = $work;\n    }\n\n    return $works;\n}\n\n/**\n * @param int    $start\n * @param int    $limit\n * @param string $column\n * @param string $direction\n * @param string $where_condition\n * @param bool   $getCount\n *\n * @return int|array\n */\nfunction getWorkListTeacher(\n    $start,\n    $limit,\n    $column,\n    $direction,\n    $where_condition,\n    $getCount = false,\n    $courseInfoParam = []\n) {\n    $courseInfo = api_get_course_info();\n    $course_id = api_get_course_int_id();\n    if (!empty($courseInfoParam)) {\n        $courseInfo = $courseInfoParam;\n        $course_id = $courseInfoParam['real_id'];\n    }\n\n    $session_id = api_get_session_id();\n    $group_id = api_get_group_id();\n\n    $is_allowed_to_edit = api_is_allowed_to_edit() || api_is_coach();\n    if (!in_array($direction, ['asc', 'desc'])) {\n        $direction = 'desc';\n    }\n    if (!empty($where_condition)) {\n        $where_condition = ' AND '.$where_condition;\n    }\n\n    $column = !empty($column) ? Database::escape_string($column) : 'sent_date';\n    $start = (int) $start;\n    $limit = (int) $limit;\n\n    // Get list from database\n    if (!$is_allowed_to_edit) {\n        return $getCount ? 0 : [];\n    }\n\n    $result = getWorkListTeacherData(\n        $course_id,\n        $session_id,\n        $group_id,\n        $start,\n        $limit,\n        $column,\n        $direction,\n        $where_condition,\n        $getCount\n    );\n\n    if (is_int($result)) {\n        return $result;\n    }\n\n    $url = api_get_path(WEB_CODE_PATH).'work/work_list_all.php?'.api_get_cidreq();\n    $blockEdition = api_get_configuration_value('block_student_publication_edition');\n\n    return array_map(\n        function (array $work) use ($courseInfo, $session_id, $blockEdition, $url) {\n            $workId = $work['id'];\n            $work['type'] = Display::return_icon('work.png');\n\n            $visibility = api_get_item_visibility($courseInfo, 'work', $workId, $session_id);\n\n            if ($visibility == 1) {\n                $icon = 'visible.png';\n                $text = get_lang('Visible');\n                $action = 'invisible';\n                $class = '';\n            } else {\n                $icon = 'invisible.png';\n                $text = get_lang('Invisible');\n                $action = 'visible';\n                $class = 'muted';\n            }\n\n            $visibilityLink = Display::url(\n                Display::return_icon($icon, $text),\n                api_get_path(WEB_CODE_PATH).\"work/work.php?id=$workId&action=$action&\".api_get_cidreq()\n            );\n\n            $work['title'] = Display::url($work['title'], $url.'&id='.$workId, ['class' => $class]);\n            $work['title'] .= ' '.Display::label(get_count_work($work['id']), 'success');\n\n            if ($blockEdition && !api_is_platform_admin()) {\n                $editLink = '';\n            } else {\n                $editLink = Display::url(\n                    Display::return_icon('edit.png', get_lang('Edit')),\n                    api_get_path(WEB_CODE_PATH).'work/edit_work.php?id='.$workId.'&'.api_get_cidreq()\n                );\n            }\n\n            $correctionLink = Display::url(\n                Display::return_icon('upload_package.png', get_lang('UploadCorrections')),\n                api_get_path(WEB_CODE_PATH).'work/upload_corrections.php?'.api_get_cidreq().'&id='.$workId\n            );\n\n            if ($work['count_unique_attempts'] > 0) {\n                $downloadLink = Display::url(\n                    Display::return_icon('save_pack.png', get_lang('Save')),\n                    api_get_path(WEB_CODE_PATH).\"work/downloadfolder.inc.php?id=$workId&\".api_get_cidreq()\n                );\n            } else {\n                $downloadLink = Display::url(\n                    Display::return_icon('save_pack_na.png', get_lang('Save')),\n                    '#'\n                );\n            }\n            // Remove Delete Work Button from action List\n            // Because removeXSS \"removes\" the onClick JS Event to do the action (See model.ajax.php - Line 1639)\n            // But still can use the another jqgrid button to remove works (trash icon)\n            //\n            // $deleteUrl = api_get_path(WEB_CODE_PATH).'work/work.php?id='.$workId.'&action=delete_dir&'.api_get_cidreq();\n            // $deleteLink = '<a href=\"#\" onclick=\"showConfirmationPopup(this, \\'' . $deleteUrl . '\\' ) \" >' .\n            //     Display::return_icon(\n            //         'delete.png',\n            //         get_lang('Delete'),\n            //         [],\n            //         ICON_SIZE_SMALL\n            //     ) . '</a>';\n\n            if (!api_is_allowed_to_edit()) {\n                // $deleteLink = null;\n                $editLink = null;\n            }\n            $work['actions'] = implode(PHP_EOL, [$visibilityLink, $correctionLink, $downloadLink, $editLink]);\n\n            return $work;\n        },\n        $result\n    );\n}\n\n/**\n * @param int    $start\n * @param int    $limit\n * @param string $column\n * @param string $direction\n * @param int    $workId\n * @param int    $studentId\n * @param string $whereCondition\n * @param bool   $getCount\n *\n * @return array\n */\nfunction get_work_user_list_from_documents(\n    $start,\n    $limit,\n    $column,\n    $direction,\n    $workId,\n    $studentId = null,\n    $whereCondition = '',\n    $getCount = false\n) {\n    if ($getCount) {\n        $select1 = ' SELECT count(u.user_id) as count ';\n        $select2 = ' SELECT count(u.user_id) as count ';\n    } else {\n        $select1 = ' SELECT DISTINCT\n                        u.firstname,\n                        u.lastname,\n                        u.user_id,\n                        w.title,\n                        w.parent_id,\n                        w.document_id document_id,\n                        w.id, qualification,\n                        qualificator_id,\n                        w.sent_date,\n                        w.contains_file,\n                        w.url,\n                        w.url_correction\n                    ';\n        $select2 = ' SELECT DISTINCT\n                        u.firstname, u.lastname,\n                        u.user_id,\n                        d.title,\n                        w.parent_id,\n                        d.id document_id,\n                        0,\n                        0,\n                        0,\n                        w.sent_date,\n                        w.contains_file,\n                        w.url,\n                        w.url_correction\n                    ';\n    }\n\n    $documentTable = Database::get_course_table(TABLE_DOCUMENT);\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $workRelDocument = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_DOCUMENT);\n    $userTable = Database::get_main_table(TABLE_MAIN_USER);\n\n    $courseId = api_get_course_int_id();\n    $sessionId = api_get_session_id();\n\n    if (empty($studentId)) {\n        $studentId = api_get_user_id();\n    }\n\n    $studentId = (int) $studentId;\n    $workId = (int) $workId;\n\n    $userCondition = \" AND u.user_id = $studentId \";\n    $sessionCondition = api_get_session_condition($sessionId, true, false, 'w.session_id');\n    $workCondition = \" AND w_rel.work_id = $workId\";\n    $workParentCondition = \" AND w.parent_id = $workId\";\n\n    $sql = \"(\n                $select1 FROM $userTable u\n                INNER JOIN $workTable w\n                ON (u.user_id = w.user_id AND w.active IN (0, 1) AND w.filetype = 'file')\n                WHERE\n                    w.c_id = $courseId\n                    $userCondition\n                    $sessionCondition\n                    $whereCondition\n                    $workParentCondition\n            ) UNION (\n                $select2 FROM $workTable w\n                INNER JOIN $workRelDocument w_rel\n                ON (w_rel.work_id = w.id AND w.active IN (0, 1) AND w_rel.c_id = w.c_id)\n                INNER JOIN $documentTable d\n                ON (w_rel.document_id = d.id AND d.c_id = w.c_id)\n                INNER JOIN $userTable u ON (u.user_id = $studentId)\n                WHERE\n                    w.c_id = $courseId\n                    $workCondition\n                    $sessionCondition AND\n                    d.id NOT IN (\n                        SELECT w.document_id id\n                        FROM $workTable w\n                        WHERE\n                            user_id = $studentId AND\n                            c_id = $courseId AND\n                            filetype = 'file' AND\n                            active IN (0, 1)\n                            $sessionCondition\n                            $workParentCondition\n                    )\n            )\";\n\n    $start = (int) $start;\n    $limit = (int) $limit;\n\n    $direction = in_array(strtolower($direction), ['desc', 'asc']) ? $direction : 'desc';\n    $column = Database::escape_string($column);\n\n    if ($getCount) {\n        $result = Database::query($sql);\n        $result = Database::fetch_array($result);\n\n        return $result['count'];\n    }\n\n    $sql .= \" ORDER BY `$column` $direction\";\n    $sql .= \" LIMIT $start, $limit\";\n\n    $result = Database::query($sql);\n\n    $currentUserId = api_get_user_id();\n    $work_data = get_work_data_by_id($workId);\n    $qualificationExists = false;\n    if (!empty($work_data['qualification']) && intval($work_data['qualification']) > 0) {\n        $qualificationExists = true;\n    }\n\n    $urlAdd = api_get_path(WEB_CODE_PATH).'work/upload_from_template.php?'.api_get_cidreq();\n    $urlEdit = api_get_path(WEB_CODE_PATH).'work/edit.php?'.api_get_cidreq();\n    $urlDelete = api_get_path(WEB_CODE_PATH).'work/work_list.php?action=delete&'.api_get_cidreq();\n    $urlView = api_get_path(WEB_CODE_PATH).'work/view.php?'.api_get_cidreq();\n    $urlDownload = api_get_path(WEB_CODE_PATH).'work/download.php?'.api_get_cidreq();\n\n    $correctionIcon = Display::return_icon(\n        'check-circle.png',\n        get_lang('Correction'),\n        null,\n        ICON_SIZE_SMALL\n    );\n    $editIcon = Display::return_icon('edit.png', get_lang('Edit'));\n    $addIcon = Display::return_icon('add.png', get_lang('Add'));\n    $deleteIcon = Display::return_icon('delete.png', get_lang('Delete'));\n    $viewIcon = Display::return_icon('default.png', get_lang('View'));\n    $saveIcon = Display::return_icon(\n        'save.png',\n        get_lang('Save'),\n        [],\n        ICON_SIZE_SMALL\n    );\n    $allowEdition = api_get_course_setting('student_delete_own_publication') == 1;\n    $cidReq = api_get_cidreq();\n    $workList = [];\n    while ($row = Database::fetch_array($result, 'ASSOC')) {\n        $userId = $row['user_id'];\n        $documentId = $row['document_id'];\n        $itemId = $row['id'];\n        $addLinkShowed = false;\n\n        if (empty($documentId)) {\n            $url = $urlEdit.'&item_id='.$row['id'].'&id='.$workId;\n            $editLink = Display::url($editIcon, $url);\n            if (1 != $allowEdition) {\n                $editLink = null;\n            }\n        } else {\n            $documentToWork = getDocumentToWorkPerUser($documentId, $workId, $courseId, $sessionId, $userId);\n\n            if (empty($documentToWork)) {\n                $url = $urlAdd.'&document_id='.$documentId.'&id='.$workId;\n                $editLink = Display::url($addIcon, $url);\n                $addLinkShowed = true;\n            } else {\n                $row['title'] = $documentToWork['title'];\n                $row['sent_date'] = $documentToWork['sent_date'];\n                $newWorkId = $documentToWork['id'];\n                $url = $urlEdit.'&item_id='.$newWorkId.'&id='.$workId;\n                $editLink = Display::url($editIcon, $url);\n\n                if (1 != $allowEdition) {\n                    $editLink = '';\n                }\n            }\n        }\n\n        $downloadLink = '';\n        // If URL is present then there's a file to download keep BC.\n        if ($row['contains_file'] || !empty($row['url'])) {\n            $downloadLink = Display::url($saveIcon, $urlDownload.'&id='.$row['id']).'&nbsp;';\n        }\n\n        $viewLink = '';\n        if (!empty($itemId)) {\n            $viewLink = Display::url($viewIcon, $urlView.'&id='.$itemId);\n        }\n\n        $deleteLink = '';\n        if ($allowEdition == 1 && !empty($itemId)) {\n            $deleteLink = Display::url($deleteIcon, $urlDelete.'&item_id='.$itemId.'&id='.$workId);\n        }\n\n        $row['type'] = null;\n        if ($qualificationExists) {\n            if (empty($row['qualificator_id'])) {\n                $status = Display::label(get_lang('NotRevised'), 'warning');\n            } else {\n                $status = Display::label(get_lang('Revised'), 'success');\n            }\n            $row['qualificator_id'] = $status;\n        }\n\n        $hasCorrection = '';\n        if (!empty($row['url_correction'])) {\n            $hasCorrection = '&nbsp;'.Display::url(\n                $correctionIcon,\n                api_get_path(WEB_CODE_PATH).'work/download.php?id='.$itemId.'&'.$cidReq.'&correction=1'\n            );\n        }\n\n        $qualification_string = '';\n        if ($qualificationExists) {\n            if ($row['qualification'] == '') {\n                $qualification_string = Display::label('-');\n            } else {\n                $qualification_string = formatWorkScore($row['qualification'], $work_data['qualification']);\n            }\n        }\n\n        $row['qualification'] = $qualification_string.$hasCorrection;\n\n        /*if (!empty($row['qualification'])) {\n            $row['qualification'] = Display::label($row['qualification'], 'info');\n        }*/\n\n        if (!empty($row['sent_date'])) {\n            $row['sent_date'] = Display::dateToStringAgoAndLongDate($row['sent_date']);\n        }\n\n        if ($userId == $currentUserId) {\n            $row['actions'] = $downloadLink.$viewLink.$editLink.$deleteLink;\n        }\n\n        if ($addLinkShowed) {\n            $row['qualification'] = '';\n            $row['qualificator_id'] = '';\n        }\n\n        $workList[] = $row;\n    }\n\n    return $workList;\n}\n\n/**\n * @param int    $start\n * @param int    $limit\n * @param int    $column\n * @param string $direction\n * @param int    $work_id\n * @param string $whereCondition\n * @param int    $studentId\n * @param bool   $getCount\n * @param int    $courseId\n * @param int    $sessionId\n *\n * @return array\n */\nfunction get_work_user_list(\n    $start,\n    $limit,\n    $column,\n    $direction,\n    $work_id,\n    $whereCondition = '',\n    $studentId = null,\n    $getCount = false,\n    $courseId = 0,\n    $sessionId = 0,\n    $shortTitle = true\n) {\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $user_table = Database::get_main_table(TABLE_MAIN_USER);\n\n    $session_id = $sessionId ? (int) $sessionId : api_get_session_id();\n    $group_id = api_get_group_id();\n    $course_info = api_get_course_info();\n    $course_info = empty($course_info) ? api_get_course_info_by_id($courseId) : $course_info;\n    $course_id = isset($course_info['real_id']) ? $course_info['real_id'] : $courseId;\n\n    $work_id = (int) $work_id;\n    $start = (int) $start;\n    $limit = (int) $limit;\n\n    $column = !empty($column) ? Database::escape_string($column) : 'sent_date';\n    $compilation = null;\n    if (api_get_configuration_value('allow_compilatio_tool')) {\n        $compilation = new Compilatio();\n    }\n\n    if (!in_array($direction, ['asc', 'desc'])) {\n        $direction = 'desc';\n    }\n\n    $work_data = get_work_data_by_id($work_id, $courseId, $sessionId);\n    $is_allowed_to_edit = api_is_allowed_to_edit() || api_is_coach();\n    $condition_session = api_get_session_condition(\n        $session_id,\n        true,\n        false,\n        'work.session_id'\n    );\n\n    $locked = api_resource_is_locked_by_gradebook(\n        $work_id,\n        LINK_STUDENTPUBLICATION,\n        $course_info['code']\n    );\n\n    $isDrhOfCourse = CourseManager::isUserSubscribedInCourseAsDrh(\n        api_get_user_id(),\n        $course_info\n    );\n\n    $isDrhOfSession = !empty(SessionManager::getSessionFollowedByDrh(api_get_user_id(), $session_id));\n\n    $groupIid = 0;\n    if ($group_id) {\n        $groupInfo = GroupManager::get_group_properties($group_id);\n        if ($groupInfo) {\n            $groupIid = $groupInfo['iid'];\n        }\n    }\n\n    if (!empty($work_data)) {\n        if (!empty($group_id)) {\n            // set to select only messages posted by the user's group\n            $extra_conditions = \" work.post_group_id = '\".$groupIid.\"' \";\n        } else {\n            $extra_conditions = \" (work.post_group_id = '0' OR work.post_group_id is NULL) \";\n        }\n\n        if ($is_allowed_to_edit || $isDrhOfCourse || $isDrhOfSession) {\n            $extra_conditions .= ' AND work.active IN (0, 1) ';\n        } else {\n            if (isset($course_info['show_score']) &&\n                1 == $course_info['show_score']\n            ) {\n                $extra_conditions .= ' AND (u.user_id = '.api_get_user_id().' AND work.active IN (0, 1)) ';\n            } else {\n                $extra_conditions .= ' AND work.active IN (0, 1) ';\n            }\n        }\n\n        $extra_conditions .= \" AND parent_id  = $work_id \";\n\n        $select = 'SELECT DISTINCT\n                        u.user_id,\n                        work.id as id,\n                        title as title,\n                        description,\n                        url,\n                        sent_date,\n                        contains_file,\n                        has_properties,\n                        view_properties,\n                        qualification,\n                        weight,\n                        allow_text_assignment,\n                        u.firstname,\n                        u.lastname,\n                        u.username,\n                        parent_id,\n                        accepted,\n                        qualificator_id,\n                        url_correction,\n                        title_correction\n                        ';\n        if ($getCount) {\n            $select = 'SELECT DISTINCT count(u.user_id) as count ';\n        }\n\n        $work_assignment = get_work_assignment_by_id($work_id, $courseId);\n\n        if (!empty($studentId)) {\n            $studentId = (int) $studentId;\n            $whereCondition .= \" AND u.user_id = $studentId \";\n        }\n\n        $sql = \" $select\n                FROM $work_table work\n                INNER JOIN $user_table u\n                ON (work.user_id = u.user_id)\n                WHERE\n                    work.c_id = $course_id AND\n                    $extra_conditions\n                    $whereCondition\n                    $condition_session\n                    AND u.status != \".INVITEE.\"\n                ORDER BY `$column` $direction\";\n\n        if (!empty($start) && !empty($limit)) {\n            $sql .= \" LIMIT $start, $limit\";\n        }\n        $result = Database::query($sql);\n        $works = [];\n\n        if ($getCount) {\n            $work = Database::fetch_array($result, 'ASSOC');\n            if ($work) {\n                return (int) $work['count'];\n            }\n\n            return 0;\n        }\n\n        $url = api_get_path(WEB_CODE_PATH).'work/';\n        $unoconv = api_get_configuration_value('unoconv.binaries');\n        $loadingText = addslashes(get_lang('Loading'));\n        $uploadedText = addslashes(get_lang('Uploaded'));\n        $failsUploadText = addslashes(get_lang('UplNoFileUploaded'));\n        $failsUploadIcon = Display::return_icon(\n            'closed-circle.png',\n            '',\n            [],\n            ICON_SIZE_TINY\n        );\n        $saveIcon = Display::return_icon(\n            'save.png',\n            get_lang('Save'),\n            [],\n            ICON_SIZE_SMALL\n        );\n\n        $correctionIcon = Display::return_icon(\n            'check-circle.png',\n            get_lang('Correction'),\n            null,\n            ICON_SIZE_SMALL\n        );\n\n        $correctionIconSmall = Display::return_icon(\n            'check-circle.png',\n            get_lang('Correction'),\n            null,\n            ICON_SIZE_TINY\n        );\n\n        $rateIcon = Display::return_icon(\n            'rate_work.png',\n            get_lang('CorrectAndRate'),\n            [],\n            ICON_SIZE_SMALL\n        );\n\n        $blockEdition = api_get_configuration_value('block_student_publication_edition');\n        $blockScoreEdition = api_get_configuration_value('block_student_publication_score_edition');\n        $loading = Display::returnFontAwesomeIcon('spinner', null, true, 'fa-spin');\n        $cidReq = api_get_cidreq();\n\n        $qualification_exists = false;\n        if (!empty($work_data['qualification']) &&\n            intval($work_data['qualification']) > 0\n        ) {\n            $qualification_exists = true;\n        }\n\n        while ($work = Database::fetch_array($result, 'ASSOC')) {\n            $item_id = $work['id'];\n            $dbTitle = $work['title'];\n            // Get the author ID for that document from the item_property table\n            $is_author = false;\n            $can_read = false;\n            $owner_id = $work['user_id'];\n\n            /* Because a bug found when saving items using the api_item_property_update()\n               the field $item_property_data['insert_user_id'] is not reliable. */\n            if (!$is_allowed_to_edit && $owner_id == api_get_user_id()) {\n                $is_author = true;\n            }\n\n            if ($course_info['show_score'] == 0) {\n                $can_read = true;\n            }\n\n            $qualification_string = '';\n            if ($qualification_exists) {\n                if ($work['qualification'] == '') {\n                    $qualification_string = Display::label('-');\n                } else {\n                    if (empty($work['qualificator_id'])) {\n                        $finalScore = '?? / '.$work_data['qualification'];\n                        $qualification_string = Display::label($finalScore, 'warning');\n                    } else {\n                        $qualification_string = formatWorkScore($work['qualification'], $work_data['qualification']);\n                    }\n                }\n            }\n\n            $work['qualification_score'] = $work['qualification'];\n            $add_string = '';\n            $time_expires = '';\n            if (!empty($work_assignment['expires_on'])) {\n                $time_expires = api_strtotime(\n                    $work_assignment['expires_on'],\n                    'UTC'\n                );\n            }\n\n            if (!empty($work_assignment['expires_on']) &&\n                !empty($time_expires) && ($time_expires < api_strtotime($work['sent_date'], 'UTC'))) {\n                $add_string = Display::label(get_lang('Expired'), 'important').' - ';\n            }\n\n            if (($can_read && $work['accepted'] == '1') ||\n                ($is_author && in_array($work['accepted'], ['1', '0'])) ||\n                ($is_allowed_to_edit || api_is_drh())\n            ) {\n                // Firstname, lastname, username\n                $work['fullname'] = Display::div(\n                    api_get_person_name($work['firstname'], $work['lastname']),\n                    ['class' => 'work-name']\n                );\n                // Title\n                $work['title_clean'] = $work['title'];\n                $work['title'] = Security::remove_XSS($work['title']);\n                if (strlen($work['title']) > 30 && $shortTitle) {\n                    $short_title = substr($work['title'], 0, 27).'...';\n                    $work['title'] = Display::span($short_title, ['class' => 'work-title', 'title' => $work['title']]);\n                } else {\n                    $work['title'] = Display::div($work['title'], ['class' => 'work-title']);\n                }\n\n                // Type.\n                $work['type'] = DocumentManager::build_document_icon_tag('file', $work['url']);\n\n                // File name.\n                $linkToDownload = '';\n                // If URL is present then there's a file to download keep BC.\n                if ($work['contains_file'] || !empty($work['url'])) {\n                    $linkToDownload = '<a href=\"'.$url.'download.php?id='.$item_id.'&'.$cidReq.'\">'.$saveIcon.'</a> ';\n                }\n\n                $feedback = '';\n                $count = getWorkCommentCount($item_id, $course_info);\n                if (!is_null($count) && !empty($count)) {\n                    if ($qualification_exists) {\n                        $feedback .= ' ';\n                    }\n                    $feedback .= Display::url(\n                        $count.' '.Display::returnFontAwesomeIcon('comments-o'),\n                        $url.'view.php?'.api_get_cidreq().'&id='.$item_id\n                    );\n                }\n\n                $correction = '';\n                $hasCorrection = '';\n                if (!empty($work['url_correction'])) {\n                    $hasCorrection = Display::url(\n                        $correctionIcon,\n                        api_get_path(WEB_CODE_PATH).'work/download.php?id='.$item_id.'&'.$cidReq.'&correction=1'\n                    );\n                }\n\n                if ($qualification_exists) {\n                    $work['qualification'] = $qualification_string.$feedback;\n                } else {\n                    $work['qualification'] = $qualification_string.$feedback.$hasCorrection;\n                }\n\n                $work['qualification_only'] = $qualification_string;\n\n                // Date.\n                $work_date = api_get_local_time($work['sent_date']);\n                $date = date_to_str_ago($work['sent_date']).' '.$work_date;\n                $work['formatted_date'] = $work_date.' '.$add_string;\n                $work['expiry_note'] = $add_string;\n                $work['sent_date_from_db'] = $work['sent_date'];\n                $work['sent_date'] = '<div class=\"work-date\" title=\"'.$date.'\">'.\n                    $add_string.' '.Display::dateToStringAgoAndLongDate($work['sent_date']).'</div>';\n                $work['status'] = $hasCorrection;\n                $work['has_correction'] = $hasCorrection;\n\n                // Actions.\n                $action = '';\n                if (api_is_allowed_to_edit()) {\n                    if ($blockScoreEdition && !api_is_platform_admin() && !empty($work['qualification_score'])) {\n                        $rateLink = '';\n                    } else {\n                        $rateLink = '<a href=\"'.$url.'view.php?'.$cidReq.'&id='.$item_id.'\" title=\"'.get_lang('View').'\">'.\n                            $rateIcon.'</a> ';\n                    }\n                    $action .= $rateLink;\n\n                    if ($unoconv && empty($work['contains_file'])) {\n                        $action .= '<a\n                            href=\"'.$url.'work_list_all.php?'.$cidReq.'&id='.$work_id.'&action=export_to_doc&item_id='.$item_id.'\"\n                            title=\"'.get_lang('ExportToDoc').'\" >'.\n                            Display::return_icon('export_doc.png', get_lang('ExportToDoc'), [], ICON_SIZE_SMALL).'</a> ';\n                    }\n\n                    $alreadyUploaded = '';\n                    if (!empty($work['url_correction'])) {\n                        $alreadyUploaded = '<br />'.$work['title_correction'].' '.$correctionIconSmall;\n                    }\n\n                    $correction = '\n                        <form\n                        id=\"file_upload_'.$item_id.'\"\n                        class=\"work_correction_file_upload file_upload_small fileinput-button\"\n                        action=\"'.api_get_path(WEB_AJAX_PATH).'work.ajax.php?'.$cidReq.'&a=upload_correction_file&item_id='.$item_id.'\"\n                        method=\"POST\"\n                        enctype=\"multipart/form-data\"\n                        >\n                        <div id=\"progress_'.$item_id.'\" class=\"text-center button-load\">\n                            '.addslashes(get_lang('ClickOrDropOneFileHere')).'\n                            '.Display::return_icon('upload_file.png', get_lang('Correction'), [], ICON_SIZE_TINY).'\n                            '.$alreadyUploaded.'\n                        </div>\n                        <input id=\"file_'.$item_id.'\" type=\"file\" name=\"file\" class=\"\" multiple>\n                        </form>\n                    ';\n\n                    $correction .= \"<script>\n                    $(function() {\n                        $('.work_correction_file_upload').each(function () {\n                            $(this).fileupload({\n                                dropZone: $(this)\n                            });\n                        });\n\n                        $('#file_upload_\".$item_id.\"').fileupload({\n                            add: function (e, data) {\n                                $('#progress_$item_id').html();\n                                data.context = $('#progress_$item_id').html('$loadingText <br /> <em class=\\\"fa fa-spinner fa-pulse fa-fw\\\"></em>');\n                                data.submit();\n                                $(this).removeClass('hover');\n                            },\n                            dragover: function (e, data) {\n                                $(this).addClass('hover');\n                            },\n                            done: function (e, data) {\n                                if (data._response.result.name) {\n                                    $('#progress_$item_id').html('$uploadedText '+data._response.result.result+'<br />'+data._response.result.name);\n                                } else {\n                                    $('#progress_$item_id').html('$failsUploadText $failsUploadIcon');\n                                }\n                                $(this).removeClass('hover');\n                            }\n                        });\n                        $('#file_upload_\".$item_id.\"').on('dragleave', function (e) {\n                            // dragleave callback implementation\n                            $(this).removeClass('hover');\n                        });\n                    });\n                    </script>\";\n\n                    if ($locked) {\n                        if ($qualification_exists) {\n                            $action .= Display::return_icon(\n                                'edit_na.png',\n                                get_lang('CorrectAndRate'),\n                                [],\n                                ICON_SIZE_SMALL\n                            );\n                        } else {\n                            $action .= Display::return_icon('edit_na.png', get_lang('Comment'), [], ICON_SIZE_SMALL);\n                        }\n                    } else {\n                        if ($blockEdition && !api_is_platform_admin()) {\n                            $editLink = '';\n                        } else {\n                            if ($qualification_exists) {\n                                $editLink = '<a href=\"'.$url.'edit.php?'.api_get_cidreq(\n                                    ).'&item_id='.$item_id.'&id='.$work['parent_id'].'\" title=\"'.get_lang(\n                                        'Edit'\n                                    ).'\"  >'.\n                                    Display::return_icon('edit.png', get_lang('Edit'), [], ICON_SIZE_SMALL).'</a>';\n                            } else {\n                                $editLink = '<a href=\"'.$url.'edit.php?'.api_get_cidreq(\n                                    ).'&item_id='.$item_id.'&id='.$work['parent_id'].'\" title=\"'.get_lang(\n                                        'Modify'\n                                    ).'\">'.\n                                    Display::return_icon('edit.png', get_lang('Edit'), [], ICON_SIZE_SMALL).'</a>';\n                            }\n                        }\n                        $action .= $editLink;\n                    }\n\n                    if ($work['contains_file']) {\n                        if ($locked) {\n                            $action .= Display::return_icon(\n                                'move_na.png',\n                                get_lang('Move'),\n                                [],\n                                ICON_SIZE_SMALL\n                            );\n                        } else {\n                            $action .= '<a href=\"'.$url.'work.php?'.api_get_cidreq().'&action=move&item_id='.$item_id.'&id='.$work['parent_id'].'\" title=\"'.get_lang('Move').'\">'.\n                                Display::return_icon('move.png', get_lang('Move'), [], ICON_SIZE_SMALL).'</a>';\n                        }\n                    }\n\n                    if ($work['accepted'] == '1') {\n                        $action .= '<a href=\"'.$url.'work_list_all.php?'.api_get_cidreq().'&id='.$work_id.'&action=make_invisible&item_id='.$item_id.'\" title=\"'.get_lang('Invisible').'\" >'.\n                            Display::return_icon('visible.png', get_lang('Invisible'), [], ICON_SIZE_SMALL).'</a>';\n                    } else {\n                        $action .= '<a href=\"'.$url.'work_list_all.php?'.api_get_cidreq().'&id='.$work_id.'&action=make_visible&item_id='.$item_id.'\" title=\"'.get_lang('Visible').'\" >'.\n                            Display::return_icon('invisible.png', get_lang('Visible'), [], ICON_SIZE_SMALL).'</a> ';\n                    }\n\n                    if ($locked) {\n                        $action .= Display::return_icon('delete_na.png', get_lang('Delete'), '', ICON_SIZE_SMALL);\n                    } else {\n                        $action .= '<a href=\"'.$url.'work_list_all.php?'.api_get_cidreq().'&id='.$work_id.'&action=delete&item_id='.$item_id.'\" onclick=\"javascript:if(!confirm('.\"'\".addslashes(api_htmlentities(get_lang('ConfirmYourChoice'), ENT_QUOTES)).\"'\".')) return false;\" title=\"'.get_lang('Delete').'\" >'.\n                            Display::return_icon('delete.png', get_lang('Delete'), '', ICON_SIZE_SMALL).'</a>';\n                    }\n                } elseif ($is_author && (empty($work['qualificator_id']) || $work['qualificator_id'] == 0)) {\n                    $action .= '<a href=\"'.$url.'view.php?'.api_get_cidreq().'&id='.$item_id.'\" title=\"'.get_lang('View').'\">'.\n                        Display::return_icon('default.png', get_lang('View'), [], ICON_SIZE_SMALL).'</a>';\n\n                    if (api_get_course_setting('student_delete_own_publication') == 1) {\n                        if (api_is_allowed_to_session_edit(false, true)) {\n                            $action .= '<a href=\"'.$url.'edit.php?'.api_get_cidreq().'&item_id='.$item_id.'&id='.$work['parent_id'].'\" title=\"'.get_lang('Modify').'\">'.\n                                Display::return_icon('edit.png', get_lang('Comment'), [], ICON_SIZE_SMALL).'</a>';\n                        }\n                        $action .= ' <a href=\"'.$url.'work_list.php?'.api_get_cidreq().'&action=delete&item_id='.$item_id.'&id='.$work['parent_id'].'\" onclick=\"javascript:if(!confirm('.\"'\".addslashes(api_htmlentities(get_lang('ConfirmYourChoice'), ENT_QUOTES)).\"'\".')) return false;\" title=\"'.get_lang('Delete').'\"  >'.\n                            Display::return_icon('delete.png', get_lang('Delete'), '', ICON_SIZE_SMALL).'</a>';\n                    }\n                } else {\n                    $action .= '<a href=\"'.$url.'view.php?'.api_get_cidreq().'&id='.$item_id.'\" title=\"'.get_lang('View').'\">'.\n                        Display::return_icon('default.png', get_lang('View'), [], ICON_SIZE_SMALL).'</a>';\n                }\n\n                // Status.\n                if (empty($work['qualificator_id'])) {\n                    $qualificator_id = Display::label(get_lang('NotRevised'), 'warning');\n                } else {\n                    $qualificator_id = Display::label(get_lang('Revised'), 'success');\n                }\n                $work['qualificator_id'] = $qualificator_id.' '.$hasCorrection;\n                $work['actions'] = '<div class=\"work-action\">'.$linkToDownload.$action.'</div>';\n                $work['correction'] = $correction;\n\n                if (!empty($compilation) && $is_allowed_to_edit) {\n                    $compilationId = $compilation->getCompilatioId($item_id, $course_id);\n                    if ($compilationId) {\n                        $actionCompilatio = \"<div id='id_avancement\".$item_id.\"' class='compilation_block'>\n                            \".$loading.'&nbsp;'.get_lang('CompilatioConnectionWithServer').'</div>';\n                    } else {\n                        $workDirectory = api_get_path(SYS_COURSE_PATH).$course_info['directory'];\n                        if (!Compilatio::verifiFileType($dbTitle)) {\n                            $actionCompilatio = get_lang('FileFormatNotSupported');\n                        } elseif (filesize($workDirectory.'/'.$work['url']) > $compilation->getMaxFileSize()) {\n                            $sizeFile = round(filesize($workDirectory.'/'.$work['url']) / 1000000);\n                            $actionCompilatio = get_lang('UplFileTooBig').': '.format_file_size($sizeFile).'<br />';\n                        } else {\n                            $actionCompilatio = \"<div id='id_avancement\".$item_id.\"' class='compilation_block'>\";\n                            $actionCompilatio .= Display::url(\n                                get_lang('CompilatioAnalysis'),\n                                'javascript:void(0)',\n                                [\n                                    'class' => 'getSingleCompilatio btn btn-primary btn-xs',\n                                    'onclick' => \"getSingleCompilatio($item_id);\",\n                                ]\n                            );\n                            $actionCompilatio .= get_lang('CompilatioWithCompilatio');\n                        }\n                    }\n                    $work['compilatio'] = $actionCompilatio;\n                }\n                $works[] = $work;\n            }\n        }\n\n        return $works;\n    }\n}\n\nfunction getAllWork(\n    $start,\n    $limit,\n    $column,\n    $direction,\n    $whereCondition = '',\n    $getCount = false,\n    $courseId = 0,\n    $status = 0,\n    $onlyParents = false,\n    $shortTitle = true\n) {\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $user_table = Database::get_main_table(TABLE_MAIN_USER);\n    $userId = api_get_user_id();\n    if (empty($userId)) {\n        return [];\n    }\n\n    $allowWorkFromAllSessions = api_get_configuration_value('assignment_base_course_teacher_access_to_all_session');\n    $coursesInSession = [];\n    $courses = CourseManager::get_courses_list_by_user_id($userId, false, false, false);\n    if ($allowWorkFromAllSessions) {\n        if (empty($courses)) {\n            return [];\n        }\n    } else {\n        $coursesInSession = SessionManager::getCoursesForCourseSessionCoach($userId);\n\n        if (empty($courses) && empty($coursesInSession)) {\n            return [];\n        }\n    }\n\n    if (!empty($whereCondition)) {\n        $whereCondition = ' AND '.$whereCondition;\n    }\n    $whereCondition = Database::escape_string($whereCondition);\n\n    if (!in_array($direction, ['asc', 'desc'])) {\n        $direction = 'desc';\n    }\n\n    $column = !empty($column) ? Database::escape_string($column) : 'sent_date';\n    $start = (int) $start;\n    $limit = (int) $limit;\n    $courseQuery = [];\n    $courseList = [];\n    $withResults = 0;\n    foreach ($courses as $course) {\n        $courseIdItem = $course['real_id'];\n        if (!empty($courseId) && $courseIdItem != $courseId) {\n            continue;\n        }\n        $courseInfo = api_get_course_info_by_id($courseIdItem);\n        // Only teachers or platform admins.\n        $isAllow = api_is_platform_admin() || CourseManager::is_course_teacher($userId, $courseInfo['code']);\n        if (false === $isAllow) {\n            continue;\n        }\n\n        //$session_id = isset($course['session_id']) ? $course['session_id'] : 0;\n        //$conditionSession = api_get_session_condition($session_id, true, false, 'w.session_id');\n        $conditionSession = ' AND (work.session_id = 0 OR work.session_id IS NULL)';\n        if ($allowWorkFromAllSessions) {\n            $conditionSession = '';\n        }\n        $parentCondition = '';\n        if ($withResults) {\n            $parentCondition = 'AND ww.parent_id is NOT NULL';\n        }\n        $courseQuery[] = \" (work.c_id = $courseIdItem $conditionSession $parentCondition ) \";\n        $courseList[$courseIdItem] = $courseInfo;\n    }\n\n    if (false === $allowWorkFromAllSessions) {\n        foreach ($coursesInSession as $courseIdInSession => $sessionList) {\n            if (!empty($sessionList)) {\n                if (!isset($courseList[$courseIdInSession])) {\n                    $courseList[$courseIdInSession] = api_get_course_info_by_id($courseIdInSession);\n                }\n\n                foreach ($sessionList as $sessionId) {\n                    $conditionSession = \" AND (work.session_id = $sessionId)\";\n                    $parentCondition = '';\n                    $courseQuery[] = \" (work.c_id = $courseIdInSession $conditionSession $parentCondition ) \";\n                }\n            }\n        }\n    }\n\n    if (empty($courseQuery)) {\n        return [];\n    }\n\n    $courseQueryToString = implode(' OR ', $courseQuery);\n    $compilation = null;\n    /*if (api_get_configuration_value('allow_compilatio_tool')) {\n        $compilation = new Compilatio();\n    }*/\n\n    if ($getCount) {\n        if (empty($courseQuery)) {\n            return 0;\n        }\n        $select = 'SELECT DISTINCT count(u.id) as count ';\n    } else {\n        $select = 'SELECT DISTINCT\n                    u.id as user_id,\n                    work.id as id,\n                    title as title,\n                    description,\n                    url,\n                    sent_date,\n                    contains_file,\n                    has_properties,\n                    view_properties,\n                    qualification,\n                    weight,\n                    allow_text_assignment,\n                    u.firstname,\n                    u.lastname,\n                    u.username,\n                    parent_id,\n                    accepted,\n                    qualificator_id,\n                    url_correction,\n                    title_correction,\n                    work.c_id,\n                    work.date_of_qualification,\n                    work.session_id ';\n    }\n\n    $statusCondition = '';\n    if (!empty($status)) {\n        switch ($status) {\n            case 2:\n                $statusCondition = ' AND (qualificator_id IS NULL OR qualificator_id = 0) ';\n                break;\n            case 3:\n                $statusCondition = ' AND (qualificator_id <> 0 AND qualificator_id IS NOT NULL) ';\n                break;\n        }\n    }\n    $filterParents = 'work.parent_id <> 0';\n    if ($onlyParents) {\n        $filterParents = 'work.parent_id = 0';\n    }\n    $sql = \" $select\n            FROM $work_table work\n            INNER JOIN $user_table u\n            ON (work.user_id = u.id)\n            WHERE\n                $filterParents AND\n                work.active IN (1, 0)\n                $whereCondition AND\n                ($courseQueryToString)\n                $statusCondition\n                AND u.status != \".INVITEE;\n\n    $sql .= \" ORDER BY `$column` $direction \";\n\n    if (!empty($start) && !empty($limit)) {\n        $sql .= \" LIMIT $start, $limit\";\n    }\n\n    $result = Database::query($sql);\n    $works = [];\n    if ($getCount) {\n        $work = Database::fetch_array($result, 'ASSOC');\n        if ($work) {\n            return (int) $work['count'];\n        }\n\n        return 0;\n    }\n\n    $url = api_get_path(WEB_CODE_PATH).'work/';\n    $unoconv = api_get_configuration_value('unoconv.binaries');\n    $loadingText = addslashes(get_lang('Loading'));\n    $uploadedText = addslashes(get_lang('Uploaded'));\n    $failsUploadText = addslashes(get_lang('UplNoFileUploaded'));\n    $failsUploadIcon = Display::return_icon(\n        'closed-circle.png',\n        '',\n        [],\n        ICON_SIZE_TINY\n    );\n    $saveIcon = Display::return_icon(\n        'save.png',\n        get_lang('Save'),\n        [],\n        ICON_SIZE_SMALL\n    );\n\n    $correctionIcon = Display::return_icon(\n        'check-circle.png',\n        get_lang('Correction'),\n        null,\n        ICON_SIZE_SMALL\n    );\n\n    $correctionIconSmall = Display::return_icon(\n        'check-circle.png',\n        get_lang('Correction'),\n        null,\n        ICON_SIZE_TINY\n    );\n\n    $rateIcon = Display::return_icon(\n        'rate_work.png',\n        get_lang('CorrectAndRate'),\n        [],\n        ICON_SIZE_SMALL\n    );\n    $parentList = [];\n    $blockEdition = api_get_configuration_value('block_student_publication_edition');\n    $blockScoreEdition = api_get_configuration_value('block_student_publication_score_edition');\n    $loading = Display::returnFontAwesomeIcon('spinner', null, true, 'fa-spin');\n    $qualification_exists = true;\n    while ($work = Database::fetch_array($result, 'ASSOC')) {\n        $courseId = $work['c_id'];\n        $courseInfo = $courseList[$work['c_id']];\n        $sessionId = $work['session_id'];\n        $cidReq = 'cidReq='.$courseInfo['code'].'&id_session='.$sessionId;\n\n        $item_id = $work_id = $work['id'];\n        $dbTitle = $work['title'];\n        // Get the author ID for that document from the item_property table\n        $is_author = false;\n        $can_read = false;\n        $owner_id = $work['user_id'];\n        $visibility = api_get_item_visibility($courseInfo, 'work', $work['id'], $sessionId);\n        if ($visibility != 1) {\n            continue;\n        }\n        /*$locked = api_resource_is_locked_by_gradebook(\n            $item_id,\n            LINK_STUDENTPUBLICATION,\n            $courseInfo['code']\n        );*/\n        $locked = false;\n\n        /* Because a bug found when saving items using the api_item_property_update()\n           the field $item_property_data['insert_user_id'] is not reliable. */\n        /*if (!$is_allowed_to_edit && $owner_id == api_get_user_id()) {\n            $is_author = true;\n        }*/\n        // Teacher can be treated as an author.\n        $is_author = true;\n\n        /*if ($course_info['show_score'] == 0) {\n            $can_read = true;\n        }*/\n\n        $qualification_string = '';\n        if ($qualification_exists) {\n            if ($work['qualification'] == '') {\n                $qualification_string = Display::label('-');\n            } else {\n                $qualification_string = formatWorkScore($work['qualification'], $work['qualification']);\n            }\n        }\n\n        $work['qualification_score'] = $work['qualification'];\n        $add_string = '';\n        $time_expires = '';\n        if (!empty($work_assignment['expires_on'])) {\n            $time_expires = api_strtotime(\n                $work_assignment['expires_on'],\n                'UTC'\n            );\n        }\n\n        if (!empty($work_assignment['expires_on']) &&\n            !empty($time_expires) && ($time_expires < api_strtotime($work['sent_date'], 'UTC'))) {\n            $add_string = Display::label(get_lang('Expired'), 'important').' - ';\n        }\n\n        if (($can_read && $work['accepted'] == '1') ||\n            ($is_author && in_array($work['accepted'], ['1', '0']))\n        ) {\n            // Firstname, lastname, username\n            $work['fullname'] = Display::div(\n                api_get_person_name($work['firstname'], $work['lastname']),\n                ['class' => 'work-name']\n            );\n            // Title\n            $work['title_clean'] = $work['title'];\n            $work['title'] = Security::remove_XSS($work['title']);\n            if (strlen($work['title']) > 30 && $shortTitle) {\n                $short_title = substr($work['title'], 0, 27).'...';\n                $work['title'] = Display::span($short_title, ['class' => 'work-title', 'title' => $work['title']]);\n            } else {\n                $work['title'] = Display::div($work['title'], ['class' => 'work-title']);\n            }\n\n            // Type.\n            $work['type'] = DocumentManager::build_document_icon_tag('file', $work['url']);\n\n            // File name.\n            $linkToDownload = '';\n            // If URL is present then there's a file to download keep BC.\n            if ($work['contains_file'] || !empty($work['url'])) {\n                $linkToDownload = '<a href=\"'.$url.'download.php?id='.$item_id.'&'.$cidReq.'\">'.$saveIcon.'</a> ';\n            }\n\n            $feedback = '';\n            $count = getWorkCommentCount($item_id, $courseInfo);\n            if (!is_null($count) && !empty($count)) {\n                if ($qualification_exists) {\n                    $feedback .= ' ';\n                }\n                $feedback .= Display::url(\n                    $count.' '.Display::returnFontAwesomeIcon('comments-o'),\n                    $url.'view.php?'.$cidReq.'&id='.$item_id\n                );\n            }\n\n            $correction = '';\n            $hasCorrection = '';\n            if (!empty($work['url_correction'])) {\n                $hasCorrection = Display::url(\n                    $correctionIcon,\n                    api_get_path(WEB_CODE_PATH).'work/download.php?id='.$item_id.'&'.$cidReq.'&correction=1'\n                );\n            }\n\n            if ($qualification_exists) {\n                $work['qualification'] = $qualification_string.$feedback;\n            } else {\n                $work['qualification'] = $qualification_string.$feedback.$hasCorrection;\n            }\n\n            $work['qualification_only'] = $qualification_string;\n\n            // Date.\n            $work_date = api_get_local_time($work['sent_date']);\n            $date = date_to_str_ago($work['sent_date']).' '.$work_date;\n            $work['formatted_date'] = $work_date.' '.$add_string;\n            $work['expiry_note'] = $add_string;\n            $work['sent_date_from_db'] = $work['sent_date'];\n            $work['sent_date'] = '<div class=\"work-date\" title=\"'.$date.'\">'.\n                $add_string.' '.Display::dateToStringAgoAndLongDate($work['sent_date']).'</div>';\n            $work['status'] = $hasCorrection;\n            $work['has_correction'] = $hasCorrection;\n            $work['course'] = $courseInfo['title'];\n\n            if (isset($parentList[$work['parent_id']])) {\n                $parent = $parentList[$work['parent_id']];\n            } else {\n                $parent = get_work_data_by_id($work['parent_id'], $courseId);\n            }\n            $work['work_name'] = isset($parent['title']) ? $parent['title'] : '';\n\n            // Actions.\n            $action = '';\n            if ($blockScoreEdition && !api_is_platform_admin() && !empty($work['qualification_score'])) {\n                $rateLink = '';\n            } else {\n                $rateLink = '<a href=\"'.$url.'view.php?'.$cidReq.'&id='.$item_id.'\" title=\"'.get_lang('View').'\">'.\n                    $rateIcon.'</a> ';\n            }\n            $action .= $rateLink;\n            if ($unoconv && empty($work['contains_file'])) {\n                $action .= '<a\n                    href=\"'.$url.'work_list_all.php?'.$cidReq.'&id='.$work_id.'&action=export_to_doc&item_id='.$item_id.'\"\n                    title=\"'.get_lang('ExportToDoc').'\" >'.\n                    Display::return_icon('export_doc.png', get_lang('ExportToDoc'), [], ICON_SIZE_SMALL).'</a> ';\n            }\n\n            $alreadyUploaded = '';\n            if (!empty($work['url_correction'])) {\n                $alreadyUploaded = '<br />'.$work['title_correction'].' '.$correctionIconSmall;\n            }\n\n            $correction = '\n                <form\n                id=\"file_upload_'.$item_id.'\"\n                class=\"work_correction_file_upload file_upload_small fileinput-button\"\n                action=\"'.api_get_path(WEB_AJAX_PATH).'work.ajax.php?'.$cidReq.'&a=upload_correction_file&item_id='.$item_id.'\"\n                method=\"POST\"\n                enctype=\"multipart/form-data\"\n                >\n                <div id=\"progress_'.$item_id.'\" class=\"text-center button-load\">\n                    '.addslashes(get_lang('ClickOrDropOneFileHere')).'\n                    '.Display::return_icon('upload_file.png', get_lang('Correction'), [], ICON_SIZE_TINY).'\n                    '.$alreadyUploaded.'\n                </div>\n                <input id=\"file_'.$item_id.'\" type=\"file\" name=\"file\" class=\"\" multiple>\n                </form>\n            ';\n\n            $correction .= \"<script>\n            $(function() {\n                $('.work_correction_file_upload').each(function () {\n                    $(this).fileupload({\n                        dropZone: $(this)\n                    });\n                });\n                $('#file_upload_\".$item_id.\"').fileupload({\n                    add: function (e, data) {\n                        $('#progress_$item_id').html();\n                        data.context = $('#progress_$item_id').html('$loadingText <br /> <em class=\\\"fa fa-spinner fa-pulse fa-fw\\\"></em>');\n                        data.submit();\n                        $(this).removeClass('hover');\n                    },\n                    dragover: function (e, data) {\n                        $(this).addClass('hover');\n                    },\n                    done: function (e, data) {\n                        if (data._response.result.name) {\n                            $('#progress_$item_id').html('$uploadedText '+data._response.result.result+'<br />'+data._response.result.name);\n                        } else {\n                            $('#progress_$item_id').html('$failsUploadText $failsUploadIcon');\n                        }\n                        $(this).removeClass('hover');\n                    }\n                });\n                $('#file_upload_\".$item_id.\"').on('dragleave', function (e) {\n                    // dragleave callback implementation\n                    $(this).removeClass('hover');\n                });\n            });\n            </script>\";\n\n            if ($locked) {\n                if ($qualification_exists) {\n                    $action .= Display::return_icon(\n                        'edit_na.png',\n                        get_lang('CorrectAndRate'),\n                        [],\n                        ICON_SIZE_SMALL\n                    );\n                } else {\n                    $action .= Display::return_icon('edit_na.png', get_lang('Comment'), [], ICON_SIZE_SMALL);\n                }\n            } else {\n                if ($blockEdition && !api_is_platform_admin()) {\n                    $editLink = '';\n                } else {\n                    $editIcon = Display::return_icon('edit.png', get_lang('Edit'), [], ICON_SIZE_SMALL);\n                    if ($qualification_exists) {\n                        $editLink = '<a\n                            href=\"'.$url.'edit.php?'.$cidReq.'&item_id='.$item_id.'&id='.$work['parent_id'].'\"\n                            title=\"'.get_lang('Edit').'\"  >'.\n                            $editIcon.\n                        '</a>';\n                    } else {\n                        $editLink = '<a\n                            href=\"'.$url.'edit.php?'.$cidReq.'&item_id='.$item_id.'&id='.$work['parent_id'].'\"\n                            title=\"'.get_lang('Modify').'\">'.\n                            $editIcon.'</a>';\n                    }\n                }\n                $action .= $editLink;\n            }\n\n            /*if ($work['contains_file']) {\n                if ($locked) {\n                    $action .= Display::return_icon(\n                        'move_na.png',\n                        get_lang('Move'),\n                        [],\n                        ICON_SIZE_SMALL\n                    );\n                } else {\n                    $action .= '<a href=\"'.$url.'work.php?'.$cidReq.'&action=move&item_id='.$item_id.'&id='.$work['parent_id'].'\" title=\"'.get_lang('Move').'\">'.\n                        Display::return_icon('move.png', get_lang('Move'), [], ICON_SIZE_SMALL).'</a>';\n                }\n            }*/\n\n            /*if ($work['accepted'] == '1') {\n                $action .= '<a href=\"'.$url.'work_list_all.php?'.$cidReq.'&id='.$work_id.'&action=make_invisible&item_id='.$item_id.'\" title=\"'.get_lang('Invisible').'\" >'.\n                    Display::return_icon('visible.png', get_lang('Invisible'), [], ICON_SIZE_SMALL).'</a>';\n            } else {\n                $action .= '<a href=\"'.$url.'work_list_all.php?'.$cidReq.'&id='.$work_id.'&action=make_visible&item_id='.$item_id.'\" title=\"'.get_lang('Visible').'\" >'.\n                    Display::return_icon('invisible.png', get_lang('Visible'), [], ICON_SIZE_SMALL).'</a> ';\n            }*/\n            /*if ($locked) {\n                $action .= Display::return_icon('delete_na.png', get_lang('Delete'), '', ICON_SIZE_SMALL);\n            } else {\n                $action .= '<a href=\"'.$url.'work_list_all.php?'.$cidReq.'&id='.$work_id.'&action=delete&item_id='.$item_id.'\" onclick=\"javascript:if(!confirm('.\"'\".addslashes(api_htmlentities(get_lang('ConfirmYourChoice'), ENT_QUOTES)).\"'\".')) return false;\" title=\"'.get_lang('Delete').'\" >'.\n                    Display::return_icon('delete.png', get_lang('Delete'), '', ICON_SIZE_SMALL).'</a>';\n            }*/\n            // Qualificator fullname and date of qualification\n            $work['qualificator_fullname'] = '';\n            if ($work['qualificator_id'] > 0) {\n                $qualificatorAuthor = api_get_user_info($work['qualificator_id']);\n                $work['qualificator_fullname'] = api_get_person_name($qualificatorAuthor['firstname'], $qualificatorAuthor['lastname']);\n                $work['date_of_qualification'] = api_convert_and_format_date($work['date_of_qualification'], DATE_TIME_FORMAT_SHORT);\n            }\n            // Status.\n            if (empty($work['qualificator_id'])) {\n                $qualificator_id = Display::label(get_lang('NotRevised'), 'warning');\n            } else {\n                $qualificator_id = Display::label(get_lang('Revised'), 'success');\n            }\n            $work['qualificator_id'] = $qualificator_id.' '.$hasCorrection;\n            $work['actions'] = '<div class=\"work-action\">'.$linkToDownload.$action.'</div>';\n            $work['correction'] = $correction;\n\n            if (!empty($compilation)) {\n                $compilationId = $compilation->getCompilatioId($item_id, $courseId);\n                if ($compilationId) {\n                    $actionCompilatio = \"<div id='id_avancement\".$item_id.\"' class='compilation_block'>\n                        \".$loading.'&nbsp;'.get_lang('CompilatioConnectionWithServer').'</div>';\n                } else {\n                    $workDirectory = api_get_path(SYS_COURSE_PATH).$courseInfo['directory'];\n                    if (!Compilatio::verifiFileType($dbTitle)) {\n                        $actionCompilatio = get_lang('FileFormatNotSupported');\n                    } elseif (filesize($workDirectory.'/'.$work['url']) > $compilation->getMaxFileSize()) {\n                        $sizeFile = round(filesize($workDirectory.'/'.$work['url']) / 1000000);\n                        $actionCompilatio = get_lang('UplFileTooBig').': '.format_file_size($sizeFile).'<br />';\n                    } else {\n                        $actionCompilatio = \"<div id='id_avancement\".$item_id.\"' class='compilation_block'>\";\n                        $actionCompilatio .= Display::url(\n                            get_lang('CompilatioAnalysis'),\n                            'javascript:void(0)',\n                            [\n                                'class' => 'getSingleCompilatio btn btn-primary btn-xs',\n                                'onclick' => \"getSingleCompilatio($item_id);\",\n                            ]\n                        );\n                        $actionCompilatio .= get_lang('CompilatioWithCompilatio');\n                    }\n                }\n                $work['compilatio'] = $actionCompilatio;\n            }\n            $works[] = $work;\n        }\n    }\n\n    return $works;\n}\n\n/**\n * Send reminder to users who have not given the task.\n *\n * @param int\n *\n * @return array\n *\n * @author cvargas carlos.vargas@beeznest.com cfasanando, christian.fasanado@beeznest.com\n */\nfunction send_reminder_users_without_publication($task_data)\n{\n    $_course = api_get_course_info();\n    $task_id = $task_data['id'];\n    $task_title = !empty($task_data['title']) ? $task_data['title'] : basename($task_data['url']);\n    $subject = '['.api_get_setting('siteName').'] ';\n\n    // The body can be as long as you wish, and any combination of text and variables\n    $content = get_lang('ReminderToSubmitPendingTask').\"\\n\".get_lang('CourseName').' : '.$_course['name'].\"\\n\";\n    $content .= get_lang('WorkName').' : '.$task_title.\"\\n\";\n    $list_users = get_list_users_without_publication($task_id);\n    $mails_sent_to = [];\n    foreach ($list_users as $user) {\n        $name_user = api_get_person_name($user[1], $user[0], null, PERSON_NAME_EMAIL_ADDRESS);\n        $dear_line = get_lang('Dear').\" \".api_get_person_name($user[1], $user[0]).\", \\n\\n\";\n        $body = $dear_line.$content;\n        MessageManager::send_message($user[3], $subject, $body);\n        $mails_sent_to[] = $name_user;\n    }\n\n    return $mails_sent_to;\n}\n\n/**\n * @param int $workId    The work ID\n * @param int $courseId  The course ID\n * @param int $sessionId Optional. The session ID\n */\nfunction sendEmailToDrhOnHomeworkCreation($workId, $courseId, $sessionId = 0)\n{\n    $courseInfo = api_get_course_info_by_id($courseId);\n    $assignment = get_work_assignment_by_id($workId, $courseId);\n    $work = get_work_data_by_id($workId, $courseId, $sessionId);\n    $workInfo = array_merge($assignment, $work);\n\n    if (empty($sessionId)) {\n        $students = CourseManager::get_student_list_from_course_code($courseInfo['code']);\n    } else {\n        $students = CourseManager::get_student_list_from_course_code($courseInfo['code'], true, $sessionId);\n    }\n\n    $bodyView = new Template(null, false, false, false, false, false);\n\n    foreach ($students as $student) {\n        $studentInfo = api_get_user_info($student['user_id']);\n        if (empty($studentInfo)) {\n            continue;\n        }\n\n        $hrms = UserManager::getDrhListFromUser($student['id']);\n        foreach ($hrms as $hrm) {\n            $hrmName = api_get_person_name($hrm['firstname'], $hrm['lastname'], null, PERSON_NAME_EMAIL_ADDRESS);\n\n            $bodyView->assign('hrm_name', $hrmName);\n            $bodyView->assign('student', $studentInfo);\n            $bodyView->assign('course', $courseInfo);\n            $bodyView->assign('course_link', api_get_course_url($courseInfo['code'], $sessionId));\n            $bodyView->assign('work', $workInfo);\n\n            $bodyTemplate = $bodyView->get_template('mail/new_work_alert_hrm.tpl');\n\n            MessageManager::send_message(\n                $hrm['id'],\n                sprintf(\n                    get_lang('StudentXHasBeenAssignedNewWorkInCourseY'),\n                    $student['firstname'],\n                    $courseInfo['title']\n                ),\n                $bodyView->fetch($bodyTemplate)\n            );\n        }\n    }\n}\n\n/**\n * Sends an email to the students of a course when a homework is created.\n *\n * @param int $workId\n * @param int $courseId\n * @param int $sessionId\n *\n * @author Guillaume Viguier <guillaume.viguier@beeznest.com>\n * @author Julio Montoya <gugli100@gmail.com> Adding session support - 2011\n */\nfunction sendEmailToStudentsOnHomeworkCreation($workId, $courseId, $sessionId = 0)\n{\n    $courseInfo = api_get_course_info_by_id($courseId);\n    $courseCode = $courseInfo['code'];\n    // Get the students of the course\n    if (empty($sessionId)) {\n        $students = CourseManager::get_student_list_from_course_code($courseCode);\n    } else {\n        $students = CourseManager::get_student_list_from_course_code($courseCode, true, $sessionId);\n    }\n    $emailsubject = '['.api_get_setting('siteName').'] '.get_lang('HomeworkCreated');\n    $currentUser = api_get_user_info(api_get_user_id());\n    if (!empty($students)) {\n        foreach ($students as $student) {\n            $user_info = api_get_user_info($student['user_id']);\n            if (!empty($user_info)) {\n                $link = api_get_path(WEB_CODE_PATH).'work/work_list.php?'.api_get_cidreq().'&id='.$workId;\n                $emailbody = get_lang('Dear').\" \".$user_info['complete_name'].\",\\n\\n\";\n                $emailbody .= get_lang('HomeworkHasBeenCreatedForTheCourse').\" \".$courseCode.\". \".\"\\n\\n\".\n                    '<a href=\"'.$link.'\">'.get_lang('PleaseCheckHomeworkPage').'</a>';\n                $emailbody .= \"\\n\\n\".$currentUser['complete_name'];\n\n                $additionalParameters = [\n                    'smsType' => SmsPlugin::ASSIGNMENT_BEEN_CREATED_COURSE,\n                    'userId' => $student['user_id'],\n                    'courseTitle' => $courseCode,\n                    'link' => $link,\n                ];\n\n                MessageManager::send_message_simple(\n                    $student['user_id'],\n                    $emailsubject,\n                    $emailbody,\n                    null,\n                    false,\n                    false,\n                    $additionalParameters,\n                    false\n                );\n            }\n        }\n    }\n}\n\n/**\n * @param string $url\n *\n * @return bool\n */\nfunction is_work_exist_by_url($url)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $url = Database::escape_string($url);\n    $sql = \"SELECT id FROM $table WHERE url='$url'\";\n    $result = Database::query($sql);\n    if (Database::num_rows($result) > 0) {\n        $row = Database::fetch_row($result);\n        if (empty($row)) {\n            return false;\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\n/**\n * Check if a user is the author of a work document.\n *\n * @param int $itemId\n * @param int $userId\n * @param int $courseId\n * @param int $sessionId\n *\n * @return bool\n */\nfunction user_is_author($itemId, $userId = null, $courseId = 0, $sessionId = 0)\n{\n    $userId = (int) $userId;\n\n    if (empty($itemId)) {\n        return false;\n    }\n\n    if (empty($userId)) {\n        $userId = api_get_user_id();\n    }\n\n    $isAuthor = false;\n    $is_allowed_to_edit = api_is_allowed_to_edit();\n\n    if ($is_allowed_to_edit) {\n        $isAuthor = true;\n    } else {\n        if (empty($courseId)) {\n            $courseId = api_get_course_int_id();\n        }\n        if (empty($sessionId)) {\n            $sessionId = api_get_session_id();\n        }\n\n        $data = api_get_item_property_info($courseId, 'work', $itemId, $sessionId);\n        if ($data['insert_user_id'] == $userId) {\n            $isAuthor = true;\n        }\n\n        $workData = get_work_data_by_id($itemId);\n        if ($workData['user_id'] == $userId) {\n            $isAuthor = true;\n        }\n    }\n\n    if (!$isAuthor) {\n        return false;\n    }\n\n    return $isAuthor;\n}\n\n/**\n * Get list of users who have not given the task.\n *\n * @param int\n * @param int\n *\n * @return array\n *\n * @author cvargas\n * @author Julio Montoya <gugli100@gmail.com> Fixing query\n */\nfunction get_list_users_without_publication($task_id, $studentId = 0)\n{\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $table_course_user = Database::get_main_table(TABLE_MAIN_COURSE_USER);\n    $table_user = Database::get_main_table(TABLE_MAIN_USER);\n    $session_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n\n    $users = getAllUserToWork($task_id, api_get_course_int_id());\n    $users = array_column($users, 'user_id');\n\n    // Condition for the session\n    $session_id = api_get_session_id();\n    $course_id = api_get_course_int_id();\n    $task_id = (int) $task_id;\n    $sessionCondition = api_get_session_condition($session_id);\n\n    if (0 == $session_id) {\n        $sql = \"SELECT user_id as id FROM $work_table\n                WHERE\n                    c_id = $course_id AND\n                    parent_id = '$task_id' AND\n                    active IN (0, 1)\";\n    } else {\n        $sql = \"SELECT user_id as id FROM $work_table\n                WHERE\n                    c_id = $course_id AND\n                    parent_id = '$task_id' $sessionCondition AND\n                    active IN (0, 1)\";\n    }\n\n    $result = Database::query($sql);\n    $users_with_tasks = [];\n    while ($row = Database::fetch_array($result)) {\n        $users_with_tasks[] = $row['id'];\n    }\n\n    if (0 == $session_id) {\n        $sql_users = \"SELECT cu.user_id, u.lastname, u.firstname, u.email\n                      FROM $table_course_user AS cu, $table_user AS u\n                      WHERE u.status != 1 and cu.c_id='\".$course_id.\"' AND u.user_id = cu.user_id\";\n    } else {\n        $sql_users = \"SELECT cu.user_id, u.lastname, u.firstname, u.email\n                      FROM $session_course_rel_user AS cu, $table_user AS u\n                      WHERE\n                        u.status != 1 AND\n                        cu.c_id='\".$course_id.\"' AND\n                        u.user_id = cu.user_id AND\n                        cu.session_id = '\".$session_id.\"'\";\n    }\n\n    if (!empty($studentId)) {\n        $sql_users .= ' AND u.user_id = '.(int) $studentId;\n    }\n\n    $group_id = api_get_group_id();\n    $new_group_user_list = [];\n\n    if ($group_id) {\n        $groupInfo = GroupManager::get_group_properties($group_id);\n        $group_user_list = GroupManager::get_subscribed_users($groupInfo);\n        if (!empty($group_user_list)) {\n            foreach ($group_user_list as $group_user) {\n                $new_group_user_list[] = $group_user['user_id'];\n            }\n        }\n    }\n\n    $result_users = Database::query($sql_users);\n    $users_without_tasks = [];\n    while ($rowUsers = Database::fetch_array($result_users)) {\n        $userId = $rowUsers['user_id'];\n        if (in_array($userId, $users_with_tasks)) {\n            continue;\n        }\n\n        if ($group_id && !in_array($userId, $new_group_user_list)) {\n            continue;\n        }\n\n        if (!empty($users)) {\n            if (!in_array($userId, $users)) {\n                continue;\n            }\n        }\n\n        $row_users = [];\n        $row_users[0] = $rowUsers['lastname'];\n        $row_users[1] = $rowUsers['firstname'];\n        $row_users[2] = Display::encrypted_mailto_link($rowUsers['email']);\n        $row_users[3] = $userId;\n        $users_without_tasks[] = $row_users;\n    }\n\n    return $users_without_tasks;\n}\n\n/**\n * Display list of users who have not given the task.\n *\n * @param int task id\n * @param int $studentId\n *\n * @author cvargas carlos.vargas@beeznest.com cfasanando, christian.fasanado@beeznest.com\n * @author Julio Montoya <gugli100@gmail.com> Fixes\n */\nfunction display_list_users_without_publication($task_id, $studentId = null)\n{\n    $origin = api_get_origin();\n    $table_header[] = [get_lang('LastName'), true];\n    $table_header[] = [get_lang('FirstName'), true];\n    $table_header[] = [get_lang('Email'), true];\n\n    $data = get_list_users_without_publication($task_id);\n\n    $sorting_options = [];\n    $sorting_options['column'] = 1;\n    $paging_options = [];\n    $my_params = [];\n\n    if (isset($_GET['edit_dir'])) {\n        $my_params['edit_dir'] = Security::remove_XSS($_GET['edit_dir']);\n    }\n    if (isset($_GET['list'])) {\n        $my_params['list'] = Security::remove_XSS($_GET['list']);\n    }\n    $my_params['origin'] = $origin;\n    $my_params['id'] = (int) ($_GET['id']);\n\n    //$column_show\n    $column_show[] = 1;\n    $column_show[] = 1;\n    $column_show[] = 1;\n    Display::display_sortable_config_table(\n        'work',\n        $table_header,\n        $data,\n        $sorting_options,\n        $paging_options,\n        $my_params,\n        $column_show\n    );\n}\n\n/**\n * @param int $documentId\n * @param int $workId\n * @param int $courseId\n */\nfunction addDocumentToWork($documentId, $workId, $courseId)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_DOCUMENT);\n    $params = [\n        'document_id' => $documentId,\n        'work_id' => $workId,\n        'c_id' => $courseId,\n    ];\n    Database::insert($table, $params);\n}\n\n/**\n * @param int $documentId\n * @param int $workId\n * @param int $courseId\n *\n * @return array\n */\nfunction getDocumentToWork($documentId, $workId, $courseId)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_DOCUMENT);\n    $params = [\n        'document_id = ? and work_id = ? and c_id = ?' => [$documentId, $workId, $courseId],\n    ];\n\n    return Database::select('*', $table, ['where' => $params]);\n}\n\n/**\n * @param int $documentId\n * @param int $workId\n * @param int $courseId\n * @param int $sessionId\n * @param int $userId\n * @param int $active\n *\n * @return array\n */\nfunction getDocumentToWorkPerUser($documentId, $workId, $courseId, $sessionId, $userId, $active = 1)\n{\n    $workRel = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_DOCUMENT);\n    $work = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n\n    $documentId = (int) $documentId;\n    $workId = (int) $workId;\n    $courseId = (int) $courseId;\n    $userId = (int) $userId;\n    $sessionId = (int) $sessionId;\n    $active = (int) $active;\n    $sessionCondition = api_get_session_condition($sessionId);\n\n    $sql = \"SELECT w.* FROM $work w\n            INNER JOIN $workRel rel\n            ON (w.parent_id = rel.work_id)\n            WHERE\n                w.document_id = $documentId AND\n                w.parent_id = $workId AND\n                w.c_id = $courseId\n                $sessionCondition AND\n                user_id = $userId AND\n                active = $active\n            \";\n\n    $result = Database::query($sql);\n    $workInfo = [];\n    if (Database::num_rows($result)) {\n        $workInfo = Database::fetch_array($result, 'ASSOC');\n    }\n\n    return $workInfo;\n}\n\n/**\n * @param int $workId\n * @param int $courseId\n *\n * @return array\n */\nfunction getAllDocumentToWork($workId, $courseId)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_DOCUMENT);\n    $params = [\n        'work_id = ? and c_id = ?' => [$workId, $courseId],\n    ];\n\n    return Database::select('*', $table, ['where' => $params]);\n}\n\n/**\n * @param int $documentId\n * @param int $workId\n * @param int $courseId\n */\nfunction deleteDocumentToWork($documentId, $workId, $courseId)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_DOCUMENT);\n    $params = [\n        'document_id = ? and work_id = ? and c_id = ?' => [$documentId, $workId, $courseId],\n    ];\n    Database::delete($table, $params);\n}\n\n/**\n * @param int $userId\n * @param int $workId\n * @param int $courseId\n */\nfunction addUserToWork($userId, $workId, $courseId)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_USER);\n    $params = [\n        'user_id' => $userId,\n        'work_id' => $workId,\n        'c_id' => $courseId,\n    ];\n    Database::insert($table, $params);\n}\n\n/**\n * @param int $userId\n * @param int $workId\n * @param int $courseId\n *\n * @return array\n */\nfunction getUserToWork($userId, $workId, $courseId)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_USER);\n    $params = [\n        'user_id = ? and work_id = ? and c_id = ?' => [$userId, $workId, $courseId],\n    ];\n\n    return Database::select('*', $table, ['where' => $params]);\n}\n\n/**\n * @param int  $workId\n * @param int  $courseId\n * @param bool $getCount\n *\n * @return array|int\n */\nfunction getAllUserToWork($workId, $courseId, $getCount = false)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_USER);\n    $params = [\n        'work_id = ? and c_id = ?' => [$workId, $courseId],\n    ];\n    if ($getCount) {\n        $count = 0;\n        $result = Database::select(\n            'count(user_id) as count',\n            $table,\n            ['where' => $params],\n            'simple'\n        );\n        if (!empty($result)) {\n            $count = (int) ($result['count']);\n        }\n\n        return $count;\n    } else {\n        return Database::select('*', $table, ['where' => $params]);\n    }\n}\n\n/**\n * @param int $userId\n * @param int $workId\n * @param int $courseId\n */\nfunction deleteUserToWork($userId, $workId, $courseId)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_REL_USER);\n    $params = [\n        'user_id = ? and work_id = ? and c_id = ?' => [$userId, $workId, $courseId],\n    ];\n    Database::delete($table, $params);\n}\n\n/**\n * @param int $userId\n * @param int $workId\n * @param int $courseId\n *\n * @return bool\n */\nfunction userIsSubscribedToWork($userId, $workId, $courseId)\n{\n    $subscribedUsers = getAllUserToWork($workId, $courseId);\n\n    if (empty($subscribedUsers)) {\n        return true;\n    } else {\n        $subscribedUsersList = [];\n        foreach ($subscribedUsers as $item) {\n            $subscribedUsersList[] = $item['user_id'];\n        }\n        if (in_array($userId, $subscribedUsersList)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Get the list of students that have to submit their work.\n *\n * @param int  $workId    The internal ID of the assignment\n * @param int  $courseId  The course ID\n * @param int  $groupId   The group ID, if any\n * @param int  $sessionId The session ID, if any\n * @param bool $getCount  Whether we want just the amount or the full result\n *\n * @return array|int An integer (if we just asked for the count) or an array of users\n */\nfunction getStudentSubscribedToWork(\n    $workId,\n    $courseId,\n    $groupId = null,\n    $sessionId = null,\n    $getCount = false\n) {\n    $usersInWork = null;\n    $usersInCourse = null;\n\n    if (empty($groupId)) {\n        $courseInfo = api_get_course_info_by_id($courseId);\n        $status = STUDENT;\n        if (!empty($sessionId)) {\n            $status = 0;\n        }\n        $usersInCourse = CourseManager::get_user_list_from_course_code(\n            $courseInfo['code'],\n            $sessionId,\n            null,\n            null,\n            $status,\n            $getCount\n        );\n    } else {\n        $usersInCourse = GroupManager::get_users(\n            $groupId,\n            false,\n            null,\n            null,\n            $getCount,\n            $courseId\n        );\n    }\n\n    $usersInWork = getAllUserToWork($workId, $courseId, $getCount);\n\n    if (empty($usersInWork)) {\n        return $usersInCourse;\n    } else {\n        return $usersInWork;\n    }\n}\n\n/**\n * @param int  $userId\n * @param int  $workId\n * @param int  $courseId\n * @param bool $forceAccessForCourseAdmins\n *\n * @return bool\n */\nfunction allowOnlySubscribedUser($userId, $workId, $courseId, $forceAccessForCourseAdmins = false)\n{\n    if (api_is_platform_admin() || api_is_allowed_to_edit()) {\n        return true;\n    }\n\n    if ($forceAccessForCourseAdmins) {\n        if (api_is_course_admin() || api_is_coach()) {\n            return true;\n        }\n    }\n\n    return userIsSubscribedToWork($userId, $workId, $courseId);\n}\n\n/**\n * @param int   $workId\n * @param array $courseInfo\n * @param int   $documentId\n *\n * @return array\n */\nfunction getDocumentTemplateFromWork($workId, $courseInfo, $documentId)\n{\n    $documents = getAllDocumentToWork($workId, $courseInfo['real_id']);\n    if (!empty($documents)) {\n        foreach ($documents as $doc) {\n            if ($documentId != $doc['document_id']) {\n                continue;\n            }\n            $docData = DocumentManager::get_document_data_by_id($doc['document_id'], $courseInfo['code']);\n            $fileInfo = pathinfo($docData['path']);\n            if ('html' == $fileInfo['extension']) {\n                if (file_exists($docData['absolute_path']) && is_file($docData['absolute_path'])) {\n                    $docData['file_content'] = file_get_contents($docData['absolute_path']);\n\n                    return $docData;\n                }\n            }\n        }\n    }\n\n    return [];\n}\n\n/**\n * @param int   $workId\n * @param array $courseInfo\n *\n * @return string\n */\nfunction getAllDocumentsFromWorkToString($workId, $courseInfo)\n{\n    $documents = getAllDocumentToWork($workId, $courseInfo['real_id']);\n    $content = null;\n    if (!empty($documents)) {\n        $content .= '<ul class=\"nav nav-list well\">';\n        $content .= '<li class=\"nav-header\">'.get_lang('Documents').'</li>';\n        foreach ($documents as $doc) {\n            $docData = DocumentManager::get_document_data_by_id($doc['document_id'], $courseInfo['code']);\n            if ($docData) {\n                $content .= '<li><a class=\"link_to_download\" target=\"_blank\" href=\"'.$docData['url'].'\">'.$docData['title'].'</a></li>';\n            }\n        }\n        $content .= '</ul><br />';\n    }\n\n    return $content;\n}\n\n/**\n * Returns fck editor toolbar.\n *\n * @return array\n */\nfunction getWorkDescriptionToolbar()\n{\n    return [\n        'ToolbarStartExpanded' => 'true',\n        'ToolbarSet' => 'Work',\n        'Width' => '100%',\n        'Height' => '400',\n    ];\n}\n\n/**\n * @param array $work\n *\n * @return array\n */\nfunction getWorkComments($work)\n{\n    $commentTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT_COMMENT);\n    $userTable = Database::get_main_table(TABLE_MAIN_USER);\n\n    $courseId = (int) $work['c_id'];\n    $workId = (int) $work['id'];\n\n    if (empty($courseId) || empty($workId)) {\n        return [];\n    }\n\n    $sql = \"SELECT\n                c.id,\n                c.user_id\n            FROM $commentTable c\n            INNER JOIN $userTable u\n            ON (u.id = c.user_id)\n            WHERE c_id = $courseId AND work_id = $workId\n            ORDER BY sent_at\n            \";\n    $result = Database::query($sql);\n    $comments = Database::store_result($result, 'ASSOC');\n    if (!empty($comments)) {\n        foreach ($comments as &$comment) {\n            $userInfo = api_get_user_info($comment['user_id']);\n            $comment['picture'] = $userInfo['avatar'];\n            $comment['complete_name'] = $userInfo['complete_name_with_username'];\n            $commentInfo = getWorkComment($comment['id']);\n            if (!empty($commentInfo)) {\n                $comment = array_merge($comment, $commentInfo);\n            }\n        }\n    }\n\n    return $comments;\n}\n\n/**\n * Get total score from a work list.\n *\n * @param $workList\n *\n * @return int|null\n */\nfunction getTotalWorkScore($workList)\n{\n    $count = 0;\n    foreach ($workList as $data) {\n        $count += $data['qualification_score'];\n    }\n\n    return $count;\n}\n\n/**\n * Get comment count from a work list (docs sent by students).\n *\n * @param array $workList\n * @param array $courseInfo\n *\n * @return int|null\n */\nfunction getTotalWorkComment($workList, $courseInfo = [])\n{\n    if (empty($courseInfo)) {\n        $courseInfo = api_get_course_info();\n    }\n\n    $count = 0;\n    foreach ($workList as $data) {\n        $count += getWorkCommentCount($data['id'], $courseInfo);\n    }\n\n    return $count;\n}\n\n/**\n * Get comment count for a specific work sent by a student.\n *\n * @param int   $id\n * @param array $courseInfo\n *\n * @return int\n */\nfunction getWorkCommentCount($id, $courseInfo = [])\n{\n    if (empty($courseInfo)) {\n        $courseInfo = api_get_course_info();\n    }\n\n    $commentTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT_COMMENT);\n    $id = (int) $id;\n\n    $sql = \"SELECT count(*) as count\n            FROM $commentTable\n            WHERE work_id = $id AND c_id = \".$courseInfo['real_id'];\n\n    $result = Database::query($sql);\n    if (Database::num_rows($result)) {\n        $comment = Database::fetch_array($result);\n\n        return $comment['count'];\n    }\n\n    return 0;\n}\n\n/**\n * Get comment count for a specific parent.\n *\n * @param int   $parentId\n * @param array $courseInfo\n * @param int   $sessionId\n *\n * @return int\n */\nfunction getWorkCommentCountFromParent(\n    $parentId,\n    $courseInfo = [],\n    $sessionId = 0\n) {\n    if (empty($courseInfo)) {\n        $courseInfo = api_get_course_info();\n    }\n\n    if (empty($sessionId)) {\n        $sessionId = api_get_session_id();\n    } else {\n        $sessionId = (int) $sessionId;\n    }\n\n    $work = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $commentTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT_COMMENT);\n    $parentId = (int) $parentId;\n    $sessionCondition = api_get_session_condition($sessionId, false, false, 'w.session_id');\n\n    $sql = \"SELECT count(*) as count\n            FROM $commentTable c INNER JOIN $work w\n            ON c.c_id = w.c_id AND w.id = c.work_id\n            WHERE\n                $sessionCondition AND\n                parent_id = $parentId AND\n                w.c_id = \".$courseInfo['real_id'];\n\n    $result = Database::query($sql);\n    if (Database::num_rows($result)) {\n        $comment = Database::fetch_array($result);\n\n        return $comment['count'];\n    }\n\n    return 0;\n}\n\n/**\n * Get last work information from parent.\n *\n * @param int   $parentId\n * @param array $courseInfo\n * @param int   $sessionId\n *\n * @return int\n */\nfunction getLastWorkStudentFromParent(\n    $parentId,\n    $courseInfo = [],\n    $sessionId = 0\n) {\n    if (empty($courseInfo)) {\n        $courseInfo = api_get_course_info();\n    }\n\n    if (empty($sessionId)) {\n        $sessionId = api_get_session_id();\n    } else {\n        $sessionId = (int) $sessionId;\n    }\n\n    $work = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $sessionCondition = api_get_session_condition($sessionId, false);\n    $commentTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT_COMMENT);\n    $parentId = (int) $parentId;\n\n    $sql = \"SELECT w.*\n            FROM $commentTable c INNER JOIN $work w\n            ON c.c_id = w.c_id AND w.id = c.work_id\n            WHERE\n                $sessionCondition AND\n                parent_id = $parentId AND\n                w.c_id = \".$courseInfo['real_id'].'\n            ORDER BY w.sent_date\n            LIMIT 1\n            ';\n\n    $result = Database::query($sql);\n    if (Database::num_rows($result)) {\n        return Database::fetch_array($result, 'ASSOC');\n    }\n\n    return [];\n}\n\n/**\n * Get last work information from parent.\n *\n * @param int   $userId\n * @param array $parentInfo\n * @param array $courseInfo\n * @param int   $sessionId\n *\n * @return int\n */\nfunction getLastWorkStudentFromParentByUser(\n    $userId,\n    $parentInfo,\n    $courseInfo = [],\n    $sessionId = 0\n) {\n    if (empty($courseInfo)) {\n        $courseInfo = api_get_course_info();\n    }\n\n    if (empty($sessionId)) {\n        $sessionId = api_get_session_id();\n    } else {\n        $sessionId = (int) $sessionId;\n    }\n\n    $userId = (int) $userId;\n    $work = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    if (empty($parentInfo)) {\n        return false;\n    }\n    $parentId = $parentInfo['id'];\n\n    $sessionCondition = api_get_session_condition($sessionId);\n\n    $sql = \"SELECT *\n            FROM $work\n            WHERE\n                user_id = $userId\n                $sessionCondition AND\n                parent_id = $parentId AND\n                c_id = \".$courseInfo['real_id'].\"\n            ORDER BY sent_date DESC\n            LIMIT 1\n            \";\n    $result = Database::query($sql);\n    if (Database::num_rows($result)) {\n        $work = Database::fetch_array($result, 'ASSOC');\n        $work['qualification_rounded'] = formatWorkScore($work['qualification'], $parentInfo['qualification']);\n\n        return $work;\n    }\n\n    return [];\n}\n\n/**\n * @param float $score\n * @param int   $weight\n *\n * @return string\n */\nfunction formatWorkScore($score, $weight)\n{\n    $label = 'info';\n    $weight = (int) $weight;\n    $relativeScore = 0;\n    if (!empty($weight)) {\n        $relativeScore = $score / $weight;\n    }\n\n    if ($relativeScore < 0.5) {\n        $label = 'important';\n    } elseif ($relativeScore < 0.75) {\n        $label = 'warning';\n    }\n\n    $scoreBasedInModel = ExerciseLib::convertScoreToModel($relativeScore * 100);\n    if (empty($scoreBasedInModel)) {\n        $finalScore = api_number_format($score, 1).' / '.$weight;\n\n        return Display::label(\n            $finalScore,\n            $label\n        );\n    } else {\n        return $scoreBasedInModel;\n    }\n}\n\n/**\n * @param int   $id         comment id\n * @param array $courseInfo\n *\n * @return string\n */\nfunction getWorkComment($id, $courseInfo = [])\n{\n    if (empty($courseInfo)) {\n        $courseInfo = api_get_course_info();\n    }\n\n    if (empty($courseInfo['real_id'])) {\n        return [];\n    }\n\n    $commentTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT_COMMENT);\n    $id = intval($id);\n\n    $sql = \"SELECT * FROM $commentTable\n            WHERE id = $id AND c_id = \".$courseInfo['real_id'];\n    $result = Database::query($sql);\n    $comment = [];\n    if (Database::num_rows($result)) {\n        $comment = Database::fetch_array($result, 'ASSOC');\n        $filePath = null;\n        $fileUrl = null;\n        $deleteUrl = null;\n        $fileName = null;\n        if (!empty($comment['file'])) {\n            $work = get_work_data_by_id($comment['work_id']);\n            $workParent = get_work_data_by_id($work['parent_id']);\n            $filePath = api_get_path(SYS_COURSE_PATH).$courseInfo['path'].'/work/'.$workParent['url'].'/'.$comment['file'];\n            $fileUrl = api_get_path(WEB_CODE_PATH).'work/download_comment_file.php?comment_id='.$id.'&'.api_get_cidreq();\n            $deleteUrl = api_get_path(WEB_CODE_PATH).'work/view.php?'.api_get_cidreq().'&id='.$comment['work_id'].'&action=delete_attachment&comment_id='.$id;\n            $fileParts = explode('_', $comment['file']);\n            $fileName = str_replace($fileParts[0].'_'.$fileParts[1].'_', '', $comment['file']);\n        }\n        $comment['delete_file_url'] = $deleteUrl;\n        $comment['file_path'] = $filePath;\n        $comment['file_url'] = $fileUrl;\n        $comment['file_name_to_show'] = $fileName;\n        $comment['sent_at_with_label'] = Display::dateToStringAgoAndLongDate($comment['sent_at']);\n    }\n\n    return $comment;\n}\n\n/**\n * @param int   $id\n * @param array $courseInfo\n */\nfunction deleteCommentFile($id, $courseInfo = [])\n{\n    $workComment = getWorkComment($id, $courseInfo);\n    if (isset($workComment['file']) && !empty($workComment['file'])) {\n        if (file_exists($workComment['file_path'])) {\n            $result = my_delete($workComment['file_path']);\n            if ($result) {\n                $commentTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT_COMMENT);\n                $params = ['file' => ''];\n                Database::update(\n                    $commentTable,\n                    $params,\n                    ['id = ? AND c_id = ? ' => [$workComment['id'], $workComment['c_id']]]\n                );\n            }\n        }\n    }\n}\n\n/**\n * Adds a comments to the work document.\n *\n * @param array $courseInfo\n * @param int   $userId\n * @param array $parentWork\n * @param array $work\n * @param array $data\n *\n * @return int\n */\nfunction addWorkComment($courseInfo, $userId, $parentWork, $work, $data)\n{\n    $fileData = isset($data['attachment']) ? $data['attachment'] : null;\n    $commentTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT_COMMENT);\n\n    // If no attachment and no comment then don't save comment\n    if (empty($fileData['name']) && empty($data['comment'])) {\n        return false;\n    }\n\n    $params = [\n        'work_id' => $work['id'],\n        'c_id' => $work['c_id'],\n        'user_id' => $userId,\n        'comment' => $data['comment'],\n        'sent_at' => api_get_utc_datetime(),\n    ];\n\n    $commentId = Database::insert($commentTable, $params);\n\n    if ($commentId) {\n        Display::addFlash(\n            Display::return_message(get_lang('CommentAdded'))\n        );\n\n        $sql = \"UPDATE $commentTable SET id = iid WHERE iid = $commentId\";\n        Database::query($sql);\n    }\n\n    $userIdListToSend = [];\n    if (api_is_allowed_to_edit()) {\n        if (isset($data['send_email']) && $data['send_email']) {\n            // Teacher sends a feedback\n            $userIdListToSend = [$work['user_id']];\n        }\n    } else {\n        $sessionId = api_get_session_id();\n        if (empty($sessionId)) {\n            $teachers = CourseManager::get_teacher_list_from_course_code(\n                $courseInfo['code']\n            );\n            if (!empty($teachers)) {\n                $userIdListToSend = array_keys($teachers);\n            }\n        } else {\n            $teachers = SessionManager::getCoachesByCourseSession(\n                $sessionId,\n                $courseInfo['real_id']\n            );\n\n            if (!empty($teachers)) {\n                $userIdListToSend = array_values($teachers);\n            }\n        }\n\n        $sendNotification = api_get_course_setting('email_to_teachers_on_new_work_feedback');\n        if ($sendNotification != 1) {\n            $userIdListToSend = [];\n        }\n    }\n\n    $url = api_get_path(WEB_CODE_PATH).'work/view.php?'.api_get_cidreq().'&id='.$work['id'];\n    $subject = sprintf(get_lang('ThereIsANewWorkFeedback'), $parentWork['title']);\n    $content = sprintf(get_lang('ThereIsANewWorkFeedbackInWorkXHere'), $work['title'], $url);\n\n    if (!empty($data['comment'])) {\n        $content .= '<br /><b>'.get_lang('Comment').':</b><br />'.$data['comment'];\n    }\n\n    if (!empty($userIdListToSend)) {\n        foreach ($userIdListToSend as $userIdToSend) {\n            MessageManager::send_message_simple(\n                $userIdToSend,\n                $subject,\n                $content\n            );\n        }\n    }\n\n    if (!empty($commentId) && !empty($fileData)) {\n        $workParent = get_work_data_by_id($work['parent_id']);\n        if (!empty($workParent)) {\n            $uploadDir = api_get_path(SYS_COURSE_PATH).$courseInfo['path'].'/work'.$workParent['url'];\n            $newFileName = 'comment_'.$commentId.'_'.php2phps(api_replace_dangerous_char($fileData['name']));\n            $newFilePath = $uploadDir.'/'.$newFileName;\n            $result = move_uploaded_file($fileData['tmp_name'], $newFilePath);\n            if ($result) {\n                $params = ['file' => $newFileName];\n                Database::update(\n                    $commentTable,\n                    $params,\n                    ['id = ? AND c_id = ? ' => [$commentId, $work['c_id']]]\n                );\n            }\n        }\n    }\n}\n\n/**\n * @param array $work\n * @param array $workParent\n *\n * @return string\n */\nfunction getWorkCommentForm($work, $workParent)\n{\n    $url = api_get_path(WEB_CODE_PATH).'work/view.php?id='.$work['id'].'&action=send_comment&'.api_get_cidreq();\n    $form = new FormValidator(\n        'work_comment',\n        'post',\n        $url,\n        '',\n        ['enctype' => \"multipart/form-data\"]\n    );\n\n    $qualification = $workParent['qualification'];\n\n    $isCourseManager = api_is_platform_admin() || api_is_coach() || api_is_allowed_to_edit(false, false, true);\n    $allowEdition = false;\n    if ($isCourseManager) {\n        $allowEdition = true;\n        if (!empty($work['qualification']) && api_get_configuration_value('block_student_publication_score_edition')) {\n            $allowEdition = false;\n        }\n    }\n\n    if (api_is_platform_admin()) {\n        $allowEdition = true;\n    }\n\n    if ($allowEdition) {\n        if (!empty($qualification) && intval($qualification) > 0) {\n            $model = ExerciseLib::getCourseScoreModel();\n            if (empty($model)) {\n                $form->addFloat(\n                    'qualification',\n                    [get_lang('Qualification'), \" / \".$qualification],\n                    false,\n                    [],\n                    false,\n                    0,\n                    $qualification\n                );\n            } else {\n                ExerciseLib::addScoreModelInput(\n                    $form,\n                    'qualification',\n                    $qualification,\n                    $work['qualification']\n                );\n            }\n            $form->addFile('file', get_lang('Correction'));\n            $form->setDefaults(['qualification' => $work['qualification']]);\n        }\n    }\n\n    Skill::addSkillsToUserForm($form, ITEM_TYPE_STUDENT_PUBLICATION, $workParent['id'], $work['user_id'], $work['id']);\n    $form->addHtmlEditor('comment', get_lang('Comment'), false);\n    $form->addFile('attachment', get_lang('Attachment'));\n    $form->addElement('hidden', 'id', $work['id']);\n\n    if (api_is_allowed_to_edit()) {\n        $form->addCheckBox(\n            'send_email',\n            null,\n            get_lang('SendMailToStudent')\n        );\n    }\n\n    $form->addButtonSend(get_lang('Send'), 'button', false, ['onclick' => 'this.form.submit();this.disabled=true;']);\n\n    return $form->returnForm();\n}\n\n/**\n * @param array $homework result of get_work_assignment_by_id()\n *\n * @return array\n */\nfunction getWorkDateValidationStatus($homework)\n{\n    $message = null;\n    $has_expired = false;\n    $has_ended = false;\n\n    if (!empty($homework)) {\n        if (!empty($homework['expires_on']) || !empty($homework['ends_on'])) {\n            $time_now = time();\n\n            if (!empty($homework['expires_on'])) {\n                $time_expires = api_strtotime($homework['expires_on'], 'UTC');\n                $difference = $time_expires - $time_now;\n                if ($difference < 0) {\n                    $has_expired = true;\n                }\n            }\n\n            if (empty($homework['expires_on'])) {\n                $has_expired = false;\n            }\n\n            if (!empty($homework['ends_on'])) {\n                $time_ends = api_strtotime($homework['ends_on'], 'UTC');\n                $difference2 = $time_ends - $time_now;\n                if ($difference2 < 0) {\n                    $has_ended = true;\n                }\n            }\n\n            $ends_on = api_convert_and_format_date($homework['ends_on']);\n            $expires_on = api_convert_and_format_date($homework['expires_on']);\n        }\n\n        if ($has_ended) {\n            $message = Display::return_message(get_lang('EndDateAlreadyPassed').' '.$ends_on, 'error');\n        } elseif ($has_expired) {\n            $message = Display::return_message(get_lang('ExpiryDateAlreadyPassed').' '.$expires_on, 'warning');\n        } else {\n            if ($has_expired) {\n                $message = Display::return_message(get_lang('ExpiryDateToSendWorkIs').' '.$expires_on);\n            }\n        }\n    }\n\n    return [\n        'message' => $message,\n        'has_ended' => $has_ended,\n        'has_expired' => $has_expired,\n    ];\n}\n\n/**\n * @param FormValidator $form\n * @param int           $uploadFormType\n */\nfunction setWorkUploadForm($form, $uploadFormType = 0)\n{\n    $form->addHeader(get_lang('UploadADocument'));\n    $form->addHidden('contains_file', 0, ['id' => 'contains_file_id']);\n    $form->addHidden('active', 1);\n    $form->addHidden('accepted', 1);\n    $form->addElement('text', 'title', get_lang('Title'), ['id' => 'file_upload']);\n    $form->addElement(\n        'text',\n        'extension',\n        get_lang('FileExtension'),\n        ['id' => 'file_extension', 'readonly' => 'readonly']\n    );\n    $form->addRule('title', get_lang('ThisFieldIsRequired'), 'required');\n\n    switch ($uploadFormType) {\n        case 0:\n            // File and text.\n            $form->addElement(\n                'file',\n                'file',\n                get_lang('UploadADocument'),\n                'size=\"40\" onchange=\"updateDocumentTitle(this.value)\"'\n            );\n            $form->addProgress();\n            $form->addHtmlEditor('description', get_lang('Description'), false, false, getWorkDescriptionToolbar());\n            break;\n        case 1:\n            // Only text.\n            $form->addHtmlEditor('description', get_lang('Description'), false, false, getWorkDescriptionToolbar());\n            $form->addRule('description', get_lang('ThisFieldIsRequired'), 'required');\n            break;\n        case 2:\n            // Only file.\n            /*$form->addElement(\n                'file',\n                'file',\n                get_lang('UploadADocument'),\n                'size=\"40\" onchange=\"updateDocumentTitle(this.value)\"'\n            );\n            $form->addProgress();\n            */\n            $form->addElement('BigUpload', 'file', get_lang('UploadADocument'), ['id' => 'bigUploadFile', 'data-origin' => 'work']);\n            $form->addRule('file', get_lang('ThisFieldIsRequired'), 'required');\n            break;\n    }\n\n    $form->addButtonUpload(get_lang('Upload'), 'submitWork');\n}\n\n/**\n * @param array $my_folder_data\n * @param array $_course\n * @param bool  $isCorrection\n * @param array $workInfo\n * @param array $file\n *\n * @return array\n */\nfunction uploadWork($my_folder_data, $_course, $isCorrection = false, $workInfo = [], $file = [])\n{\n    if (isset($_FILES['file']) && !empty($_FILES['file'])) {\n        $file = $_FILES['file'];\n    }\n\n    if (empty($file['size'])) {\n        return [\n            'error' => Display::return_message(\n                get_lang('UplUploadFailedSizeIsZero'),\n                'error'\n            ),\n        ];\n    }\n    $updir = api_get_path(SYS_COURSE_PATH).$_course['path'].'/work/'; //directory path to upload\n\n    // Try to add an extension to the file if it has'nt one\n    $filename = add_ext_on_mime(stripslashes($file['name']), $file['type']);\n\n    // Replace dangerous characters\n    $filename = api_replace_dangerous_char($filename);\n\n    // Transform any .php file in .phps fo security\n    $filename = php2phps($filename);\n    $filesize = filesize($file['tmp_name']);\n\n    if (empty($filesize)) {\n        return [\n            'error' => Display::return_message(\n                get_lang('UplUploadFailedSizeIsZero'),\n                'error'\n            ),\n        ];\n    } elseif (!filter_extension($new_file_name)) {\n        return [\n            'error' => Display::return_message(\n                get_lang('UplUnableToSaveFileFilteredExtension'),\n                'error'\n            ),\n        ];\n    }\n\n    $totalSpace = DocumentManager::documents_total_space($_course['real_id']);\n    $course_max_space = DocumentManager::get_course_quota($_course['code']);\n    $total_size = $filesize + $totalSpace;\n\n    if ($total_size > $course_max_space) {\n        return [\n            'error' => Display::return_message(get_lang('NoSpace'), 'error'),\n        ];\n    }\n\n    // Compose a unique file name to avoid any conflict\n    $new_file_name = api_get_unique_id();\n\n    if ($isCorrection) {\n        if (!empty($workInfo['url'])) {\n            $new_file_name = basename($workInfo['url']).'_correction';\n        } else {\n            $new_file_name = $new_file_name.'_correction';\n        }\n    }\n\n    $curdirpath = basename($my_folder_data['url']);\n\n    // If we come from the group tools the groupid will be saved in $work_table\n    if (is_dir($updir.$curdirpath) || empty($curdirpath)) {\n        if (isset($file['copy_file'])) {\n            $result = copy(\n                $file['tmp_name'],\n                $updir.$curdirpath.'/'.$new_file_name\n            );\n            unlink($file['tmp_name']);\n        } else {\n            $result = move_uploaded_file(\n                $file['tmp_name'],\n                $updir.$curdirpath.'/'.$new_file_name\n            );\n        }\n    } else {\n        return [\n            'error' => Display::return_message(\n                get_lang('FolderDoesntExistsInFileSystem'),\n                'error'\n            ),\n        ];\n    }\n\n    if ($result) {\n        $url = 'work/'.$curdirpath.'/'.$new_file_name;\n    } else {\n        return false;\n    }\n\n    return [\n        'url' => $url,\n        'filename' => $filename,\n        'filesize' => $filesize,\n        'error' => '',\n    ];\n}\n\n/**\n * Send an e-mail to users related to this work.\n *\n * @param array $workInfo\n * @param int   $workId\n * @param array $courseInfo\n * @param int   $sessionId\n */\nfunction sendAlertToUsers($workInfo, $workId, $courseInfo, $sessionId = 0)\n{\n    $sessionId = (int) $sessionId;\n\n    if (empty($workInfo) || empty($courseInfo) || empty($workId)) {\n        return false;\n    }\n\n    $courseCode = $courseInfo['code'];\n\n    $workData = get_work_data_by_id($workId, $courseInfo['real_id'], $sessionId);\n    // last value is to check this is not \"just\" an edit\n    // YW Tis part serve to send a e-mail to the tutors when a new file is sent\n    $send = api_get_course_setting('email_alert_manager_on_new_doc');\n\n    $userList = [];\n    if ($send == SEND_EMAIL_EVERYONE || $send == SEND_EMAIL_TEACHERS) {\n        // Lets predefine some variables. Be sure to change the from address!\n        if (empty($sessionId)) {\n            // Teachers\n            $userList = CourseManager::get_user_list_from_course_code(\n                $courseCode,\n                null,\n                null,\n                null,\n                COURSEMANAGER\n            );\n        } else {\n            // Coaches\n            $userList = CourseManager::get_user_list_from_course_code(\n                $courseCode,\n                $sessionId,\n                null,\n                null,\n                2\n            );\n        }\n    }\n\n    if ($send == SEND_EMAIL_EVERYONE || $send == SEND_EMAIL_STUDENTS) {\n        // Send mail only to sender\n        $studentList = [[\n           'user_id' => api_get_user_id(),\n        ]];\n        $userList = array_merge($userList, $studentList);\n    }\n\n    if ($send) {\n        $folderUrl = api_get_path(WEB_CODE_PATH).\"work/work_list_all.php?cidReq=\".$courseInfo['code'].\"&id_session=\".$sessionId.\"&id=\".$workInfo['id'];\n        $fileUrl = api_get_path(WEB_CODE_PATH).\"work/view.php?cidReq=\".$courseInfo['code'].\"&id_session=\".$sessionId.\"&id=\".$workData['id'];\n\n        foreach ($userList as $userData) {\n            $userId = $userData['user_id'];\n            $userInfo = api_get_user_info($userId);\n            if (empty($userInfo)) {\n                continue;\n            }\n\n            $userPostedADocument = sprintf(\n                get_lang('UserXPostedADocumentInCourseX'),\n                $userInfo['complete_name'],\n                $courseInfo['name']\n            );\n\n            $subject = \"[\".api_get_setting('siteName').\"] \".$userPostedADocument;\n            $message = $userPostedADocument.\"<br />\";\n            $message .= get_lang('DateSent').\" : \".api_format_date(api_get_local_time()).\"<br />\";\n            $message .= get_lang('AssignmentName').\" : \".Display::url($workInfo['title'], $folderUrl).\"<br />\";\n            $message .= get_lang('Filename').\" : \".$workData['title'].\"<br />\";\n            $message .= '<a href=\"'.$fileUrl.'\">'.get_lang('DownloadLink').\"</a><br />\";\n\n            MessageManager::send_message_simple(\n                $userId,\n                $subject,\n                $message,\n                0,\n                false,\n                false,\n                [],\n                false\n            );\n        }\n    }\n}\n\n/**\n * Check if the current uploaded work filename already exists in the current assement.\n *\n * @param string $filename\n * @param int    $workId\n *\n * @return array\n */\nfunction checkExistingWorkFileName($filename, $workId)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $filename = Database::escape_string($filename);\n    $workId = (int) $workId;\n\n    $sql = \"SELECT title FROM $table\n            WHERE parent_id = $workId AND title = '$filename' AND active = 1\";\n    $result = Database::query($sql);\n\n    return Database::fetch_assoc($result);\n}\n\n/**\n * @param array $workInfo\n * @param array $values\n * @param array $courseInfo\n * @param int   $sessionId\n * @param int   $groupId\n * @param int   $userId\n * @param array $file\n * @param bool  $checkDuplicated\n * @param bool  $showFlashMessage\n *\n * @return string|null\n */\nfunction processWorkForm(\n    $workInfo,\n    $values,\n    $courseInfo,\n    $sessionId,\n    $groupId,\n    $userId,\n    $file = [],\n    $checkDuplicated = false,\n    $showFlashMessage = true\n) {\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n\n    $courseId = $courseInfo['real_id'];\n    $groupId = (int) $groupId;\n    $sessionId = (int) $sessionId;\n    $userId = (int) $userId;\n\n    $extension = '';\n    if (isset($values['extension'])) {\n        $extension = $values['extension'];\n    } else {\n        $fileInfo = pathinfo($values['title']);\n        if (isset($fileInfo['extension']) && !empty($fileInfo['extension'])) {\n            $extension = '.'.$fileInfo['extension'];\n            $values['title'] = $fileInfo['filename'];\n        }\n    }\n\n    $title = $values['title'].$extension;\n    $description = isset($values['description']) ? $values['description'] : '';\n    $containsFile = isset($values['contains_file']) && !empty($values['contains_file']) ? (int) $values['contains_file'] : 0;\n\n    $saveWork = true;\n    $filename = null;\n    $url = null;\n    $filesize = null;\n    $workData = [];\n    $message = null;\n\n    if ($containsFile) {\n        $saveWork = false;\n        if ($checkDuplicated) {\n            if (checkExistingWorkFileName($file['name'], $workInfo['id'])) {\n                $saveWork = false;\n                $result['error'] = get_lang('YouAlreadySentThisFile');\n                $workData['error'] = get_lang('UplAlreadyExists');\n            } else {\n                $result = uploadWork($workInfo, $courseInfo, false, [], $file);\n            }\n        } else {\n            $result = uploadWork($workInfo, $courseInfo, false, [], $file);\n        }\n\n        if (isset($result['error'])) {\n            $saveWork = false;\n            if ($showFlashMessage) {\n                $message = $result['error'];\n            }\n            if (empty($result['error']) && isset($result['url']) && !empty($result['url'])) {\n                $saveWork = true;\n            }\n        }\n    }\n\n    if ($saveWork) {\n        $filename = isset($result['filename']) ? $result['filename'] : null;\n        if (empty($title)) {\n            $title = isset($result['title']) && !empty($result['title']) ? $result['title'] : get_lang('Untitled');\n        }\n        $filesize = isset($result['filesize']) ? $result['filesize'] : null;\n        $url = isset($result['url']) ? $result['url'] : null;\n    }\n\n    if (empty($title)) {\n        $title = get_lang('Untitled');\n    }\n\n    $groupIid = 0;\n    $groupInfo = [];\n    if ($groupId) {\n        $groupInfo = GroupManager::get_group_properties($groupId);\n        $groupIid = $groupInfo['iid'];\n    }\n\n    if ($saveWork) {\n        $active = '1';\n        $params = [\n            'c_id' => $courseId,\n            'url' => $url,\n            'filetype' => 'file',\n            'title' => $title,\n            'description' => $description,\n            'contains_file' => $containsFile,\n            'active' => $active,\n            'accepted' => '1',\n            'qualificator_id' => 0,\n            'document_id' => 0,\n            'weight' => 0,\n            'allow_text_assignment' => 0,\n            'post_group_id' => $groupIid,\n            'sent_date' => api_get_utc_datetime(),\n            'parent_id' => $workInfo['id'],\n            'session_id' => $sessionId ? $sessionId : null,\n            'user_id' => $userId,\n            'has_properties' => 0,\n            'qualification' => 0,\n            //'filesize' => $filesize\n        ];\n        $workId = Database::insert($work_table, $params);\n\n        if ($workId) {\n            $sql = \"UPDATE $work_table SET id = iid WHERE iid = $workId \";\n            Database::query($sql);\n\n            if (array_key_exists('filename', $workInfo) && !empty($filename)) {\n                $filename = Database::escape_string($filename);\n                $sql = \"UPDATE $work_table SET\n                            filename = '$filename'\n                        WHERE iid = $workId\";\n                Database::query($sql);\n            }\n\n            if (array_key_exists('document_id', $workInfo)) {\n                $documentId = isset($values['document_id']) ? (int) $values['document_id'] : 0;\n                $sql = \"UPDATE $work_table SET\n                            document_id = '$documentId'\n                        WHERE iid = $workId\";\n                Database::query($sql);\n            }\n\n            api_item_property_update(\n                $courseInfo,\n                'work',\n                $workId,\n                'DocumentAdded',\n                $userId,\n                $groupInfo\n            );\n            sendAlertToUsers($workInfo, $workId, $courseInfo, $sessionId);\n            Event::event_upload($workId);\n\n            // The following feature requires the creation of a work-type\n            // extra_field and the following setting in the configuration file\n            // (until moved to the database). It allows te teacher to set a\n            // \"considered work time\", meaning the time we assume a student\n            // would have spent, approximately, to prepare the task before\n            // handing it in Chamilo, adding this time to the student total\n            // course use time, as a register of time spent *before* his\n            // connection to the platform to hand the work in.\n            $consideredWorkingTime = api_get_configuration_value('considered_working_time');\n\n            if (!empty($consideredWorkingTime)) {\n                // Get the \"considered work time\" defined for this work\n                $fieldValue = new ExtraFieldValue('work');\n                $resultExtra = $fieldValue->getAllValuesForAnItem(\n                    $workInfo['iid'], //the ID of the work *folder*, not the document uploaded by the student\n                    true\n                );\n\n                $workingTime = null;\n                foreach ($resultExtra as $field) {\n                    $field = $field['value'];\n                    if ($consideredWorkingTime == $field->getField()->getVariable()) {\n                        $workingTime = $field->getValue();\n                    }\n                }\n\n                // If no time was defined, or a time of \"0\" was set, do nothing\n                if (!empty($workingTime)) {\n                    // If some time is set, get the list of docs handed in by\n                    // this student (to make sure we count the time only once)\n                    $userWorks = get_work_user_list(\n                        0,\n                        100,\n                        null,\n                        null,\n                        $workInfo['id'],\n                        null,\n                        $userId,\n                        false,\n                        $courseId,\n                        $sessionId\n                    );\n\n                    if (1 == count($userWorks)) {\n                        // The student only uploaded one doc so far, so add the\n                        // considered work time to his course connection time\n                        Event::eventAddVirtualCourseTime(\n                            $courseId,\n                            $userId,\n                            $sessionId,\n                            $workingTime,\n                            $workInfo['iid']\n                        );\n                    }\n                }\n            }\n            $workData = get_work_data_by_id($workId);\n            if ($workData && $showFlashMessage) {\n                Display::addFlash(Display::return_message(get_lang('DocAdd')));\n            }\n        }\n    } else {\n        if ($showFlashMessage) {\n            Display::addFlash(\n                Display::return_message(\n                    $message ? $message : get_lang('ImpossibleToSaveTheDocument'),\n                    'error'\n                )\n            );\n        }\n    }\n\n    return $workData;\n}\n\n/**\n * Creates a new task (directory) in the assignment tool.\n *\n * @param array $formValues\n * @param int   $user_id\n * @param array $courseInfo\n * @param int   $groupId\n * @param int   $sessionId\n *\n * @return bool|int\n * @note $params can have the following elements, but should at least have the 2 first ones: (\n *       'new_dir' => 'some-name',\n *       'description' => 'some-desc',\n *       'qualification' => 20 (e.g. 20),\n *       'weight' => 50 (percentage) to add to gradebook (e.g. 50),\n *       'allow_text_assignment' => 0/1/2,\n *\n * @todo Rename createAssignment or createWork, or something like that\n */\nfunction addDir($formValues, $user_id, $courseInfo, $groupId, $sessionId = 0)\n{\n    $em = Database::getManager();\n\n    $user_id = (int) $user_id;\n    $groupId = (int) $groupId;\n    $sessionId = (int) $sessionId;\n\n    $groupIid = 0;\n    $groupInfo = [];\n    if (!empty($groupId)) {\n        $groupInfo = GroupManager::get_group_properties($groupId);\n        $groupIid = $groupInfo['iid'];\n    }\n    $session = $em->find('ChamiloCoreBundle:Session', $sessionId);\n\n    $base_work_dir = api_get_path(SYS_COURSE_PATH).$courseInfo['path'].'/work';\n    $course_id = $courseInfo['real_id'];\n\n    $directory = api_replace_dangerous_char($formValues['new_dir']);\n    $directory = disable_dangerous_file($directory);\n\n    if (strlen($directory) > CStudentPublication::WORK_TITLE_MAX_LENGTH) {\n        $directory = api_substr($directory, 0, CStudentPublication::WORK_TITLE_MAX_LENGTH);\n    }\n\n    $created_dir = create_unexisting_work_directory($base_work_dir, $directory);\n\n    if (empty($created_dir)) {\n        return false;\n    }\n\n    $enableEndDate = isset($formValues['enableEndDate']) ? true : false;\n    $enableExpiryDate = isset($formValues['enableExpiryDate']) ? true : false;\n\n    if ($enableEndDate && $enableExpiryDate) {\n        if ($formValues['expires_on'] > $formValues['ends_on']) {\n            Display::addFlash(\n                Display::return_message(\n                    get_lang('DateExpiredNotBeLessDeadLine'),\n                    'warning'\n                )\n            );\n\n            return false;\n        }\n    }\n\n    $dirName = '/'.$created_dir;\n    $today = new DateTime(api_get_utc_datetime(), new DateTimeZone('UTC'));\n    $title = isset($formValues['work_title']) ? $formValues['work_title'] : $formValues['new_dir'];\n\n    $workTable = new CStudentPublication();\n    $workTable\n        ->setCId($course_id)\n        ->setUrl($dirName)\n        ->setTitle($title)\n        ->setDescription($formValues['description'])\n        ->setActive(true)\n        ->setAccepted(true)\n        ->setFiletype('folder')\n        ->setPostGroupId($groupIid)\n        ->setSentDate($today)\n        ->setQualification($formValues['qualification'] != '' ? $formValues['qualification'] : 0)\n        ->setParentId(0)\n        ->setQualificatorId(0)\n        ->setWeight(!empty($formValues['weight']) ? $formValues['weight'] : 0)\n        ->setSession($session)\n        ->setAllowTextAssignment($formValues['allow_text_assignment'])\n        ->setContainsFile(0)\n        ->setUserId($user_id)\n        ->setHasProperties(0)\n        ->setDocumentId(0);\n\n    $em->persist($workTable);\n    $em->flush();\n\n    $workTable->setId($workTable->getIid());\n    $em->merge($workTable);\n    $em->flush();\n\n    // Folder created\n    api_item_property_update(\n        $courseInfo,\n        'work',\n        $workTable->getIid(),\n        'DirectoryCreated',\n        $user_id,\n        $groupInfo\n    );\n\n    updatePublicationAssignment(\n        $workTable->getIid(),\n        $formValues,\n        $courseInfo,\n        $groupIid\n    );\n\n    // Added the new Work ID to the extra field values\n    $formValues['item_id'] = $workTable->getIid();\n\n    $workFieldValue = new ExtraFieldValue('work');\n    $workFieldValue->saveFieldValues($formValues);\n\n    $sendEmailAlert = api_get_course_setting('email_alert_students_on_new_homework');\n\n    switch ($sendEmailAlert) {\n        case 1:\n            sendEmailToStudentsOnHomeworkCreation(\n                $workTable->getIid(),\n                $course_id,\n                $sessionId\n            );\n            //no break\n        case 2:\n            sendEmailToDrhOnHomeworkCreation(\n                $workTable->getIid(),\n                $course_id,\n                $sessionId\n            );\n            break;\n    }\n\n    return $workTable->getIid();\n}\n\n/**\n * @param int   $workId\n * @param array $courseInfo\n *\n * @return int\n */\nfunction agendaExistsForWork($workId, $courseInfo)\n{\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n    $courseId = $courseInfo['real_id'];\n    $workId = (int) $workId;\n\n    $sql = \"SELECT add_to_calendar FROM $workTable\n            WHERE c_id = $courseId AND publication_id = \".$workId;\n    $res = Database::query($sql);\n    if (Database::num_rows($res)) {\n        $row = Database::fetch_array($res, 'ASSOC');\n        if (!empty($row['add_to_calendar'])) {\n            return $row['add_to_calendar'];\n        }\n    }\n\n    return 0;\n}\n\n/**\n * Update work description, qualification, weight, allow_text_assignment.\n *\n * @param int   $workId     (iid)\n * @param array $params\n * @param array $courseInfo\n * @param int   $sessionId\n */\nfunction updateWork($workId, $params, $courseInfo, $sessionId = 0)\n{\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $filteredParams = [\n        'description' => $params['description'],\n        'qualification' => $params['qualification'],\n        'weight' => $params['weight'],\n        'allow_text_assignment' => $params['allow_text_assignment'],\n    ];\n\n    Database::update(\n        $workTable,\n        $filteredParams,\n        [\n            'iid = ? AND c_id = ?' => [\n                $workId,\n                $courseInfo['real_id'],\n            ],\n        ]\n    );\n\n    $workFieldValue = new ExtraFieldValue('work');\n    $workFieldValue->saveFieldValues($params);\n}\n\n/**\n * @param int   $workId\n * @param array $params\n * @param array $courseInfo\n * @param int   $groupId\n */\nfunction updatePublicationAssignment($workId, $params, $courseInfo, $groupId)\n{\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $workId = (int) $workId;\n    $now = api_get_utc_datetime();\n    $course_id = $courseInfo['real_id'];\n\n    // Insert into agenda\n    $agendaId = 0;\n    if (isset($params['add_to_calendar']) && $params['add_to_calendar'] == 1) {\n        // Setting today date\n        $date = $end_date = $now;\n\n        if (isset($params['enableExpiryDate'])) {\n            $end_date = $params['expires_on'];\n            $date = $end_date;\n        }\n\n        $title = sprintf(get_lang('HandingOverOfTaskX'), $params['new_dir']);\n        $description = isset($params['description']) ? $params['description'] : '';\n        $content = '<a href=\"'.api_get_path(WEB_CODE_PATH).'work/work_list.php?'.api_get_cidreq().'&id='.$workId.'\">'\n            .$params['new_dir'].'</a>'.$description;\n\n        $agendaId = agendaExistsForWork($workId, $courseInfo);\n\n        // Add/edit agenda\n        $agenda = new Agenda('course');\n        $agenda->set_course($courseInfo);\n\n        if (!empty($agendaId)) {\n            // add_to_calendar is set but it doesnt exists then invalidate\n            $eventInfo = $agenda->get_event($agendaId);\n            if (empty($eventInfo)) {\n                $agendaId = 0;\n            }\n        }\n\n        $eventColor = $agenda->eventStudentPublicationColor;\n\n        if (empty($agendaId)) {\n            $agendaId = $agenda->addEvent(\n                $date,\n                $end_date,\n                'false',\n                $title,\n                $content,\n                ['GROUP:'.$groupId],\n                false,\n                null,\n                [],\n                [],\n                null,\n                $eventColor\n            );\n        } else {\n            $agenda->editEvent(\n                $agendaId,\n                $end_date,\n                $end_date,\n                'false',\n                $title,\n                $content,\n                [],\n                [],\n                [],\n                null,\n                $eventColor\n            );\n        }\n    }\n\n    $qualification = isset($params['qualification']) && !empty($params['qualification']) ? 1 : 0;\n    $expiryDate = isset($params['enableExpiryDate']) && (int) $params['enableExpiryDate'] == 1 ? api_get_utc_datetime($params['expires_on']) : '';\n    $endDate = isset($params['enableEndDate']) && (int) $params['enableEndDate'] == 1 ? api_get_utc_datetime($params['ends_on']) : '';\n    $data = get_work_assignment_by_id($workId, $course_id);\n    if (!empty($expiryDate)) {\n        $expiryDateCondition = \"expires_on = '\".Database::escape_string($expiryDate).\"', \";\n    } else {\n        $expiryDateCondition = \"expires_on = null, \";\n    }\n\n    if (!empty($endDate)) {\n        $endOnCondition = \"ends_on = '\".Database::escape_string($endDate).\"', \";\n    } else {\n        $endOnCondition = 'ends_on = null, ';\n    }\n\n    if (empty($data)) {\n        $sql = \"INSERT INTO $table SET\n                c_id = $course_id ,\n                $expiryDateCondition\n                $endOnCondition\n                add_to_calendar = $agendaId,\n                enable_qualification = '$qualification',\n                publication_id = '$workId'\";\n        Database::query($sql);\n        $my_last_id = Database::insert_id();\n\n        if ($my_last_id) {\n            $sql = \"UPDATE $table SET\n                        id = iid\n                    WHERE iid = $my_last_id\";\n            Database::query($sql);\n\n            $sql = \"UPDATE $workTable SET\n                        has_properties  = $my_last_id,\n                        view_properties = 1\n                    WHERE c_id = $course_id AND id = $workId\";\n            Database::query($sql);\n        }\n    } else {\n        $sql = \"UPDATE $table SET\n                    $expiryDateCondition\n                    $endOnCondition\n                    add_to_calendar  = $agendaId,\n                    enable_qualification = '\".$qualification.\"'\n                WHERE\n                    publication_id = $workId AND\n                    c_id = $course_id AND\n                    iid = \".$data['iid'];\n        Database::query($sql);\n    }\n\n    if (!empty($params['category_id'])) {\n        $link_info = GradebookUtils::isResourceInCourseGradebook(\n            $courseInfo['code'],\n            LINK_STUDENTPUBLICATION,\n            $workId,\n            api_get_session_id()\n        );\n\n        $linkId = null;\n        if (!empty($link_info)) {\n            $linkId = $link_info['id'];\n        }\n\n        if (isset($params['make_calification']) &&\n            $params['make_calification'] == 1\n        ) {\n            if (empty($linkId)) {\n                GradebookUtils::add_resource_to_course_gradebook(\n                    $params['category_id'],\n                    $courseInfo['code'],\n                    LINK_STUDENTPUBLICATION,\n                    $workId,\n                    $params['new_dir'],\n                    api_float_val($params['weight']),\n                    api_float_val($params['qualification']),\n                    $params['description'],\n                    1,\n                    api_get_session_id()\n                );\n            } else {\n                GradebookUtils::updateResourceFromCourseGradebook(\n                    $linkId,\n                    $courseInfo['code'],\n                    $params['weight']\n                );\n            }\n        } else {\n            // Delete everything of the gradebook for this $linkId\n            GradebookUtils::remove_resource_from_course_gradebook($linkId);\n        }\n    }\n}\n\n/**\n * Delete all work by student.\n *\n * @param int   $userId\n * @param array $courseInfo\n *\n * @return array return deleted items\n */\nfunction deleteAllWorkPerUser($userId, $courseInfo)\n{\n    $deletedItems = [];\n    $workPerUser = getWorkPerUser($userId);\n    if (!empty($workPerUser)) {\n        foreach ($workPerUser as $work) {\n            $work = $work['work'];\n            foreach ($work->user_results as $userResult) {\n                $result = deleteWorkItem($userResult['id'], $courseInfo);\n                if ($result) {\n                    $deletedItems[] = $userResult;\n                }\n            }\n        }\n    }\n\n    return $deletedItems;\n}\n\n/**\n * @param int   $item_id\n * @param array $courseInfo course info\n *\n * @return bool\n */\nfunction deleteWorkItem($item_id, $courseInfo)\n{\n    $item_id = (int) $item_id;\n\n    if (empty($item_id) || empty($courseInfo)) {\n        return false;\n    }\n\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $TSTDPUBASG = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n    $currentCourseRepositorySys = api_get_path(SYS_COURSE_PATH).$courseInfo['path'].'/';\n    $is_allowed_to_edit = api_is_allowed_to_edit();\n    $file_deleted = false;\n    $is_author = user_is_author($item_id);\n    $work_data = get_work_data_by_id($item_id);\n    $locked = api_resource_is_locked_by_gradebook($work_data['parent_id'], LINK_STUDENTPUBLICATION);\n    $course_id = $courseInfo['real_id'];\n\n    if (($is_allowed_to_edit && $locked == false) ||\n        (\n            $locked == false &&\n            $is_author &&\n            api_get_course_setting('student_delete_own_publication') == 1 &&\n            $work_data['qualificator_id'] == 0\n        )\n    ) {\n        // We found the current user is the author\n        $sql = \"SELECT url, contains_file, user_id, session_id, parent_id\n                FROM $work_table\n                WHERE c_id = $course_id AND id = $item_id\";\n        $result = Database::query($sql);\n        $row = Database::fetch_array($result);\n        $count = Database::num_rows($result);\n\n        if ($count > 0) {\n            // If the \"considered_working_time\" option is enabled, check\n            // whether some time should be removed from track_e_course_access\n            $consideredWorkingTime = api_get_configuration_value('considered_working_time');\n            if ($consideredWorkingTime) {\n                $userWorks = get_work_user_list(\n                    0,\n                    100,\n                    null,\n                    null,\n                    $row['parent_id'],\n                    null,\n                    $row['user_id'],\n                    false,\n                    $course_id,\n                    $row['session_id']\n                );\n                // We're only interested in deleting the time if this is the latest work sent\n                if (count($userWorks) == 1) {\n                    // Get the \"considered work time\" defined for this work\n                    $fieldValue = new ExtraFieldValue('work');\n                    $resultExtra = $fieldValue->getAllValuesForAnItem(\n                        $row['parent_id'],\n                        true\n                    );\n\n                    $workingTime = null;\n                    foreach ($resultExtra as $field) {\n                        $field = $field['value'];\n\n                        if ($consideredWorkingTime == $field->getField()->getVariable()) {\n                            $workingTime = $field->getValue();\n                        }\n                    }\n                    // If no time was defined, or a time of \"0\" was set, do nothing\n                    if (!empty($workingTime)) {\n                        $sessionId = empty($row['session_id']) ? 0 : $row['session_id'];\n                        // Getting false from the following call would mean the\n                        // time record\n                        Event::eventRemoveVirtualCourseTime(\n                            $course_id,\n                            $row['user_id'],\n                            $sessionId,\n                            $workingTime,\n                            $row['parent_id']\n                        );\n                    }\n                }\n            } // end of considered_working_time check section\n\n            $sql = \"UPDATE $work_table SET active = 2\n                    WHERE c_id = $course_id AND id = $item_id\";\n            Database::query($sql);\n            $sql = \"DELETE FROM $TSTDPUBASG\n                    WHERE c_id = $course_id AND publication_id = $item_id\";\n            Database::query($sql);\n\n            Compilatio::plagiarismDeleteDoc($course_id, $item_id);\n\n            api_item_property_update(\n                $courseInfo,\n                'work',\n                $item_id,\n                'DocumentDeleted',\n                api_get_user_id()\n            );\n\n            Event::addEvent(\n                LOG_WORK_FILE_DELETE,\n                LOG_WORK_DATA,\n                [\n                    'id' => $work_data['id'],\n                    'url' => $work_data['url'],\n                    'title' => $work_data['title'],\n                ],\n                null,\n                api_get_user_id(),\n                api_get_course_int_id(),\n                api_get_session_id()\n            );\n\n            $work = $row['url'];\n\n            if ($row['contains_file'] == 1) {\n                if (!empty($work)) {\n                    if (api_get_setting('permanently_remove_deleted_files') === 'true') {\n                        my_delete($currentCourseRepositorySys.'/'.$work);\n                        $file_deleted = true;\n                    } else {\n                        $extension = pathinfo($work, PATHINFO_EXTENSION);\n                        $new_dir = $work.'_DELETED_'.$item_id.'.'.$extension;\n\n                        if (file_exists($currentCourseRepositorySys.'/'.$work)) {\n                            rename($currentCourseRepositorySys.'/'.$work, $currentCourseRepositorySys.'/'.$new_dir);\n                            $file_deleted = true;\n                        }\n                    }\n                }\n            } else {\n                $file_deleted = true;\n            }\n        }\n    }\n\n    return $file_deleted;\n}\n\n/**\n * @param FormValidator $form\n * @param array         $defaults\n * @param int           $workId\n *\n * @return FormValidator\n */\nfunction getFormWork($form, $defaults = [], $workId = 0)\n{\n    $sessionId = api_get_session_id();\n    if (!empty($defaults)) {\n        if (isset($defaults['submit'])) {\n            unset($defaults['submit']);\n        }\n    }\n\n    // Create the form that asks for the directory name\n    $form->addText(\n        'new_dir',\n        get_lang('AssignmentName'),\n        true,\n        ['maxlength' => 255]\n    );\n    $form->addHtmlEditor(\n        'description',\n        get_lang('Description'),\n        false,\n        false,\n        getWorkDescriptionToolbar()\n    );\n    $form->addButtonAdvancedSettings('advanced_params', get_lang('AdvancedParameters'));\n\n    if (!empty($defaults) && (isset($defaults['enableEndDate']) || isset($defaults['enableExpiryDate']))) {\n        $form->addHtml('<div id=\"advanced_params_options\" style=\"display:block\">');\n    } else {\n        $form->addHtml('<div id=\"advanced_params_options\" style=\"display:none\">');\n    }\n\n    // QualificationOfAssignment\n    $form->addElement('text', 'qualification', get_lang('QualificationNumeric'));\n\n    if (($sessionId != 0 && Gradebook::is_active()) || $sessionId == 0) {\n        $form->addElement(\n            'checkbox',\n            'make_calification',\n            null,\n            get_lang('MakeQualifiable'),\n            [\n                'id' => 'make_calification_id',\n                'onclick' => \"javascript: if(this.checked) { document.getElementById('option1').style.display='block';}else{document.getElementById('option1').style.display='none';}\",\n            ]\n        );\n    } else {\n        // QualificationOfAssignment\n        $form->addElement('hidden', 'make_calification', false);\n    }\n\n    if (!empty($defaults) && isset($defaults['category_id'])) {\n        $form->addHtml('<div id=\\'option1\\' style=\"display:block\">');\n    } else {\n        $form->addHtml('<div id=\\'option1\\' style=\"display:none\">');\n    }\n\n    // Loading Gradebook select\n    GradebookUtils::load_gradebook_select_in_tool($form);\n\n    $form->addElement('text', 'weight', get_lang('WeightInTheGradebook'));\n    $form->addHtml('</div>');\n\n    $form->addElement('checkbox', 'enableExpiryDate', null, get_lang('EnableExpiryDate'), 'id=\"expiry_date\"');\n    if (isset($defaults['enableExpiryDate']) && $defaults['enableExpiryDate']) {\n        $form->addHtml('<div id=\"option2\" style=\"display: block;\">');\n    } else {\n        $form->addHtml('<div id=\"option2\" style=\"display: none;\">');\n    }\n\n    $timeNextWeek = time() + 86400 * 7;\n    $nextWeek = substr(api_get_local_time($timeNextWeek), 0, 10);\n    if (!isset($defaults['expires_on'])) {\n        $date = substr($nextWeek, 0, 10);\n        $defaults['expires_on'] = $date.' 23:59';\n    }\n\n    $form->addElement('date_time_picker', 'expires_on', get_lang('ExpiresAt'));\n    $form->addHtml('</div>');\n    $form->addElement('checkbox', 'enableEndDate', null, get_lang('EnableEndDate'), 'id=\"end_date\"');\n\n    if (!isset($defaults['ends_on'])) {\n        $nextDay = substr(api_get_local_time($timeNextWeek + 86400), 0, 10);\n        $date = substr($nextDay, 0, 10);\n        $defaults['ends_on'] = $date.' 23:59';\n    }\n    if (isset($defaults['enableEndDate']) && $defaults['enableEndDate']) {\n        $form->addHtml('<div id=\"option3\" style=\"display: block;\">');\n    } else {\n        $form->addHtml('<div id=\"option3\" style=\"display: none;\">');\n    }\n\n    $form->addElement('date_time_picker', 'ends_on', get_lang('EndsAt'));\n    $form->addHtml('</div>');\n\n    $form->addElement('checkbox', 'add_to_calendar', null, get_lang('AddToCalendar'));\n    $form->addElement('select', 'allow_text_assignment', get_lang('DocumentType'), getUploadDocumentType());\n\n    // Extra fields\n    $extraField = new ExtraField('work');\n    $extra = $extraField->addElements($form, $workId);\n\n    $htmlHeadXtra[] = '\n        <script>\n        $(function() {\n            '.$extra['jquery_ready_content'].'\n        });\n        </script>';\n\n    $form->addHtml('</div>');\n\n    Skill::addSkillsToForm($form, api_get_course_int_id(), api_get_session_id(), ITEM_TYPE_STUDENT_PUBLICATION, $workId);\n\n    if (!empty($defaults)) {\n        $form->setDefaults($defaults);\n    }\n\n    return $form;\n}\n\n/**\n * @return array\n */\nfunction getUploadDocumentType()\n{\n    return [\n        0 => get_lang('AllowFileOrText'),\n        1 => get_lang('AllowOnlyText'),\n        2 => get_lang('AllowOnlyFiles'),\n    ];\n}\n\n/**\n * @param int   $itemId\n * @param array $course_info\n *\n * @return bool\n */\nfunction makeVisible($itemId, $course_info)\n{\n    $itemId = (int) $itemId;\n    if (empty($course_info) || empty($itemId)) {\n        return false;\n    }\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $course_id = $course_info['real_id'];\n\n    $sql = \"UPDATE $work_table SET accepted = 1\n            WHERE c_id = $course_id AND id = $itemId\";\n    Database::query($sql);\n    api_item_property_update($course_info, 'work', $itemId, 'visible', api_get_user_id());\n\n    return true;\n}\n\n/**\n * @param int   $itemId\n * @param array $course_info\n *\n * @return int\n */\nfunction makeInvisible($itemId, $course_info)\n{\n    $itemId = (int) $itemId;\n    if (empty($course_info) || empty($itemId)) {\n        return false;\n    }\n\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $course_id = $course_info['real_id'];\n    $sql = \"UPDATE $table\n            SET accepted = 0\n            WHERE c_id = $course_id AND id = '\".$itemId.\"'\";\n    Database::query($sql);\n    api_item_property_update(\n        $course_info,\n        'work',\n        $itemId,\n        'invisible',\n        api_get_user_id()\n    );\n\n    return true;\n}\n\n/**\n * @param int    $item_id\n * @param string $path\n * @param array  $courseInfo\n * @param int    $groupId    iid\n * @param int    $sessionId\n *\n * @return string\n */\nfunction generateMoveForm($item_id, $path, $courseInfo, $groupId, $sessionId)\n{\n    $work_table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    $courseId = $courseInfo['real_id'];\n    $folders = [];\n    $session_id = (int) $sessionId;\n    $groupId = (int) $groupId;\n    $sessionCondition = empty($sessionId) ? ' AND (session_id = 0 OR session_id IS NULL) ' : \" AND session_id='\".$session_id.\"'\";\n\n    $groupIid = 0;\n    if ($groupId) {\n        $groupInfo = GroupManager::get_group_properties($groupId);\n        $groupIid = $groupInfo['iid'];\n    }\n\n    $sql = \"SELECT id, url, title\n            FROM $work_table\n            WHERE\n                c_id = $courseId AND\n                active IN (0, 1) AND\n                url LIKE '/%' AND\n                post_group_id = $groupIid\n                $sessionCondition\";\n    $res = Database::query($sql);\n    while ($folder = Database::fetch_array($res)) {\n        $title = empty($folder['title']) ? basename($folder['url']) : $folder['title'];\n        $folders[$folder['id']] = $title;\n    }\n\n    return build_work_move_to_selector($folders, $path, $item_id);\n}\n\n/**\n * @param int $workId\n *\n * @return string\n */\nfunction showStudentList($workId)\n{\n    $columnModel = [\n        [\n            'name' => 'student',\n            'index' => 'student',\n            'width' => '350px',\n            'align' => 'left',\n            'sortable' => 'false',\n        ],\n        [\n            'name' => 'works',\n            'index' => 'works',\n            'align' => 'center',\n            'sortable' => 'false',\n        ],\n    ];\n    $token = null;\n    $url = api_get_path(WEB_AJAX_PATH).'model.ajax.php?a=get_work_student_list_overview&work_id='.$workId.'&'.api_get_cidreq();\n\n    $columns = [\n        get_lang('Students'),\n        get_lang('Works'),\n    ];\n\n    $order = api_is_western_name_order() ? 'firstname' : 'lastname';\n    $params = [\n        'autowidth' => 'true',\n        'height' => 'auto',\n        'rowNum' => 5,\n        'sortname' => $order,\n        'sortorder' => 'asc',\n    ];\n\n    $html = '<script>\n    $(function() {\n        '.Display::grid_js('studentList', $url, $columns, $columnModel, $params, [], null, true).'\n        $(\"#workList\").jqGrid(\n            \"navGrid\",\n            \"#studentList_pager\",\n            { edit: false, add: false, del: false },\n            { height:280, reloadAfterSubmit:false }, // edit options\n            { height:280, reloadAfterSubmit:false }, // add options\n            { width:500 } // search options\n        );\n    });\n    </script>';\n    $html .= Display::grid_html('studentList');\n\n    return $html;\n}\n\n/**\n * @param string $courseCode\n * @param int    $sessionId\n * @param int    $groupId\n * @param int    $start\n * @param int    $limit\n * @param string $sidx\n * @param string $sord\n * @param $getCount\n *\n * @return array|int\n */\nfunction getWorkUserList($courseCode, $sessionId, $groupId, $start, $limit, $sidx, $sord, $getCount = false)\n{\n    if (!empty($groupId)) {\n        $userList = GroupManager::get_users(\n            $groupId,\n            false,\n            $start,\n            $limit,\n            $getCount,\n            null,\n            $sidx,\n            $sord\n        );\n    } else {\n        $limitString = null;\n        if (!empty($start) && !empty($limit)) {\n            $start = (int) $start;\n            $limit = (int) $limit;\n            $limitString = \" LIMIT $start, $limit\";\n        }\n\n        $orderBy = null;\n        if (!empty($sidx) && !empty($sord)) {\n            if (in_array($sidx, ['firstname', 'lastname'])) {\n                $orderBy = \"ORDER BY `$sidx` $sord\";\n            }\n        }\n\n        if (empty($sessionId)) {\n            $userList = CourseManager::get_user_list_from_course_code(\n                $courseCode,\n                $sessionId,\n                $limitString,\n                $orderBy,\n                STUDENT,\n                $getCount\n            );\n        } else {\n            $userList = CourseManager::get_user_list_from_course_code(\n                $courseCode,\n                $sessionId,\n                $limitString,\n                $orderBy,\n                0,\n                $getCount\n            );\n        }\n\n        if ($getCount == false) {\n            $userList = array_keys($userList);\n        }\n    }\n\n    return $userList;\n}\n\n/**\n * @param int    $workId\n * @param string $courseCode\n * @param int    $sessionId\n * @param int    $groupId\n * @param int    $start\n * @param int    $limit\n * @param int    $sidx\n * @param string $sord\n * @param bool   $getCount\n *\n * @return array|int\n */\nfunction getWorkUserListData(\n    $workId,\n    $courseCode,\n    $sessionId,\n    $groupId,\n    $start,\n    $limit,\n    $sidx,\n    $sord,\n    $getCount = false\n) {\n    $my_folder_data = get_work_data_by_id($workId);\n    $workParents = [];\n    if (empty($my_folder_data)) {\n        $workParents = getWorkList($workId, $my_folder_data, null);\n    }\n\n    $workIdList = [];\n    if (!empty($workParents)) {\n        foreach ($workParents as $work) {\n            $workIdList[] = $work->id;\n        }\n    }\n\n    $courseInfo = api_get_course_info($courseCode);\n\n    $userList = getWorkUserList(\n        $courseCode,\n        $sessionId,\n        $groupId,\n        $start,\n        $limit,\n        $sidx,\n        $sord,\n        $getCount\n    );\n\n    if ($getCount) {\n        return $userList;\n    }\n    $results = [];\n    if (!empty($userList)) {\n        foreach ($userList as $userId) {\n            $user = api_get_user_info($userId);\n            $link = api_get_path(WEB_CODE_PATH).'work/student_work.php?'.api_get_cidreq().'&studentId='.$user['user_id'];\n            $url = Display::url(api_get_person_name($user['firstname'], $user['lastname']), $link);\n            $userWorks = 0;\n            if (!empty($workIdList)) {\n                $userWorks = getUniqueStudentAttempts(\n                    $workIdList,\n                    $groupId,\n                    $courseInfo['real_id'],\n                    $sessionId,\n                    $user['user_id']\n                );\n            }\n            $works = $userWorks.\" / \".count($workParents);\n            $results[] = [\n                'student' => $url,\n                'works' => Display::url($works, $link),\n            ];\n        }\n    }\n\n    return $results;\n}\n\n/**\n * @param int   $id\n * @param array $course_info\n * @param bool  $isCorrection\n *\n * @return bool\n */\nfunction downloadFile($id, $course_info, $isCorrection)\n{\n    return getFile(\n        $id,\n        $course_info,\n        true,\n        $isCorrection,\n        api_is_course_admin() || api_is_coach()\n    );\n}\n\n/**\n * @param int   $id\n * @param array $course_info\n * @param bool  $download\n * @param bool  $isCorrection\n * @param bool  $forceAccessForCourseAdmins\n *\n * @return bool\n */\nfunction getFile($id, $course_info, $download = true, $isCorrection = false, $forceAccessForCourseAdmins = false)\n{\n    $file = getFileContents($id, $course_info, 0, $isCorrection, $forceAccessForCourseAdmins);\n    if (!empty($file) && is_array($file)) {\n        return DocumentManager::file_send_for_download(\n            $file['path'],\n            $download,\n            $file['title']\n        );\n    }\n\n    return false;\n}\n\n/**\n * Get the file contents for an assigment.\n *\n * @param int   $id\n * @param array $courseInfo\n * @param int   $sessionId\n * @param bool  $correction\n * @param bool  $forceAccessForCourseAdmins\n *\n * @return array|bool\n */\nfunction getFileContents($id, $courseInfo, $sessionId = 0, $correction = false, $forceAccessForCourseAdmins = false)\n{\n    $id = (int) $id;\n    if (empty($courseInfo) || empty($id)) {\n        return false;\n    }\n    if (empty($sessionId)) {\n        $sessionId = api_get_session_id();\n    }\n\n    $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n    if (!empty($courseInfo['real_id'])) {\n        $sql = \"SELECT *\n                FROM $table\n                WHERE c_id = \".$courseInfo['real_id'].\" AND id = $id\";\n\n        $result = Database::query($sql);\n        if ($result && Database::num_rows($result)) {\n            $row = Database::fetch_array($result, 'ASSOC');\n\n            if ($correction) {\n                $row['url'] = $row['url_correction'];\n            }\n\n            if (empty($row['url'])) {\n                return false;\n            }\n\n            $full_file_name = api_get_path(SYS_COURSE_PATH).api_get_course_path().'/'.$row['url'];\n\n            $item_info = api_get_item_property_info(\n                api_get_course_int_id(),\n                'work',\n                $row['id'],\n                $sessionId\n            );\n\n            if (empty($item_info)) {\n                return false;\n            }\n\n            $isAllow = allowOnlySubscribedUser(\n                api_get_user_id(),\n                $row['parent_id'],\n                $courseInfo['real_id'],\n                $forceAccessForCourseAdmins\n            );\n\n            if (!$isAllow) {\n                return false;\n            }\n\n            /*\n            field show_score in table course :\n                0 =>    New documents are visible for all users\n                1 =>    New documents are only visible for the teacher(s)\n            field visibility in table item_property :\n                0 => eye closed, invisible for all students\n                1 => eye open\n            field accepted in table c_student_publication :\n                0 => eye closed, invisible for all students\n                1 => eye open\n            ( We should have visibility == accepted, otherwise there is an\n            inconsistency in the Database)\n            field value in table c_course_setting :\n                0 => Allow learners to delete their own publications = NO\n                1 => Allow learners to delete their own publications = YES\n\n            +------------------+-------------------------+------------------------+\n            |Can download work?| doc visible for all = 0 | doc visible for all = 1|\n            +------------------+-------------------------+------------------------+\n            |  visibility = 0  | editor only             | editor only            |\n            |                  |                         |                        |\n            +------------------+-------------------------+------------------------+\n            |  visibility = 1  | editor                  | editor                 |\n            |                  | + owner of the work     | + any student          |\n            +------------------+-------------------------+------------------------+\n            (editor = teacher + admin + anybody with right api_is_allowed_to_edit)\n            */\n\n            $work_is_visible = $item_info['visibility'] == 1 && $row['accepted'] == 1;\n            $doc_visible_for_all = (int) $courseInfo['show_score'] === 0;\n\n            $is_editor = api_is_allowed_to_edit(true, true, true);\n            $student_is_owner_of_work = user_is_author($row['id'], api_get_user_id());\n\n            if ($is_editor ||\n                $student_is_owner_of_work ||\n                ($forceAccessForCourseAdmins && $isAllow) ||\n                ($doc_visible_for_all && $work_is_visible)\n            ) {\n                $title = $row['title'];\n                if ($correction) {\n                    $title = $row['title_correction'];\n                }\n                if (array_key_exists('filename', $row) && !empty($row['filename'])) {\n                    $title = $row['filename'];\n                }\n\n                $title = str_replace(' ', '_', $title);\n\n                if ($correction == false) {\n                    $userInfo = api_get_user_info($row['user_id']);\n                    if ($userInfo) {\n                        $date = api_get_local_time($row['sent_date']);\n                        $date = str_replace([':', '-', ' '], '_', $date);\n                        $title = $date.'_'.$userInfo['username'].'_'.$title;\n                    }\n                }\n\n                if (Security::check_abs_path(\n                    $full_file_name,\n                    api_get_path(SYS_COURSE_PATH).api_get_course_path().'/'\n                )) {\n                    Event::event_download($title);\n\n                    return [\n                        'path' => $full_file_name,\n                        'title' => $title,\n                        'title_correction' => $row['title_correction'],\n                    ];\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\n/**\n * @param int    $userId\n * @param array  $courseInfo\n * @param string $format\n *\n * @return bool\n */\nfunction exportAllWork($userId, $courseInfo, $format = 'pdf')\n{\n    $userInfo = api_get_user_info($userId);\n    if (empty($userInfo) || empty($courseInfo)) {\n        return false;\n    }\n\n    $workPerUser = getWorkPerUser($userId);\n\n    switch ($format) {\n        case 'pdf':\n            if (!empty($workPerUser)) {\n                $pdf = new PDF();\n\n                $content = null;\n                foreach ($workPerUser as $work) {\n                    $work = $work['work'];\n                    foreach ($work->user_results as $userResult) {\n                        $content .= $userResult['title'];\n                        // No need to use api_get_local_time()\n                        $content .= $userResult['sent_date'];\n                        $content .= $userResult['qualification'];\n                        $content .= $userResult['description'];\n                    }\n                }\n\n                if (!empty($content)) {\n                    $pdf->content_to_pdf(\n                        $content,\n                        null,\n                        api_replace_dangerous_char($userInfo['complete_name']),\n                        $courseInfo['code']\n                    );\n                }\n            }\n            break;\n    }\n}\n\n/**\n * @param int    $workId\n * @param array  $courseInfo\n * @param int    $sessionId\n * @param string $format\n *\n * @return bool\n */\nfunction exportAllStudentWorkFromPublication(\n    $workId,\n    $courseInfo,\n    $sessionId,\n    $format = 'pdf'\n) {\n    if (empty($courseInfo)) {\n        return false;\n    }\n\n    $workData = get_work_data_by_id($workId);\n    if (empty($workData)) {\n        return false;\n    }\n\n    $assignment = get_work_assignment_by_id($workId);\n\n    $courseCode = $courseInfo['code'];\n    $header = get_lang('Course').': '.$courseInfo['title'];\n    $teachers = CourseManager::getTeacherListFromCourseCodeToString(\n        $courseCode\n    );\n\n    if (!empty($sessionId)) {\n        $sessionInfo = api_get_session_info($sessionId);\n        if (!empty($sessionInfo)) {\n            $header .= ' - '.$sessionInfo['name'];\n            $header .= '<br />'.$sessionInfo['description'];\n            $teachers = SessionManager::getCoachesByCourseSessionToString(\n                $sessionId,\n                $courseInfo['real_id']\n            );\n        }\n    }\n\n    $header .= '<br />'.get_lang('Teachers').': '.$teachers.'<br />';\n    $header .= '<br />'.get_lang('Date').': '.api_get_local_time().'<br />';\n    $header .= '<br />'.get_lang('WorkName').': '.$workData['title'].'<br />';\n\n    $content = null;\n    $expiresOn = null;\n\n    if (!empty($assignment) && isset($assignment['expires_on'])) {\n        $content .= '<br /><strong>'.get_lang('PostedExpirationDate').'</strong>: '.api_get_local_time($assignment['expires_on']);\n        $expiresOn = api_get_local_time($assignment['expires_on']);\n    }\n\n    if (!empty($workData['description'])) {\n        $content .= '<br /><strong>'.get_lang('Description').'</strong>: '.$workData['description'];\n    }\n\n    $workList = get_work_user_list(null, null, null, null, $workId);\n\n    switch ($format) {\n        case 'pdf':\n            if (!empty($workList)) {\n                $table = new HTML_Table(['class' => 'table table-hover table-striped data_table']);\n                $headers = [\n                    get_lang('Name'),\n                    get_lang('User'),\n                    get_lang('HandOutDateLimit'),\n                    get_lang('SentDate'),\n                    get_lang('FileName'),\n                    get_lang('Score'),\n                    get_lang('Feedback'),\n                ];\n\n                $column = 0;\n                foreach ($headers as $header) {\n                    $table->setHeaderContents(0, $column, $header);\n                    $column++;\n                }\n\n                $row = 1;\n\n                //$pdf->set_custom_header($header);\n                foreach ($workList as $work) {\n                    $content .= '<hr />';\n                    // getWorkComments need c_id\n                    $work['c_id'] = $courseInfo['real_id'];\n\n                    //$content .= get_lang('Date').': '.api_get_local_time($work['sent_date_from_db']).'<br />';\n                    $score = null;\n                    if (!empty($work['qualification_only'])) {\n                        $score = $work['qualification_only'];\n                    }\n\n                    $comments = getWorkComments($work);\n\n                    $feedback = null;\n                    if (!empty($comments)) {\n                        $content .= '<h4>'.get_lang('Feedback').': </h4>';\n                        foreach ($comments as $comment) {\n                            $feedback .= get_lang('User').': '.$comment['complete_name'].\n                                '<br />';\n                            $feedback .= $comment['comment'].'<br />';\n                        }\n                    }\n                    $table->setCellContents($row, 0, strip_tags($workData['title']));\n                    $table->setCellContents($row, 1, strip_tags($work['fullname']));\n                    $table->setCellContents($row, 2, $expiresOn);\n                    $table->setCellContents($row, 3, api_get_local_time($work['sent_date_from_db']));\n                    $table->setCellContents($row, 4, strip_tags($work['title']));\n                    $table->setCellContents($row, 5, $score);\n                    $table->setCellContents($row, 6, $feedback);\n\n                    $row++;\n                }\n\n                $content = $table->toHtml();\n\n                if (!empty($content)) {\n                    $params = [\n                        'filename' => $workData['title'].'_'.api_get_local_time(),\n                        'pdf_title' => api_replace_dangerous_char($workData['title']),\n                        'course_code' => $courseInfo['code'],\n                    ];\n                    $pdf = new PDF('A4', null, $params);\n                    $pdf->html_to_pdf_with_template($content);\n                }\n                exit;\n            }\n            break;\n    }\n}\n\n/**\n * Downloads all user files per user.\n *\n * @param int   $userId\n * @param array $courseInfo\n *\n * @return bool\n */\nfunction downloadAllFilesPerUser($userId, $courseInfo)\n{\n    $userInfo = api_get_user_info($userId);\n\n    if (empty($userInfo) || empty($courseInfo)) {\n        return false;\n    }\n\n    $tempZipFile = api_get_path(SYS_ARCHIVE_PATH).api_get_unique_id().\".zip\";\n    $coursePath = api_get_path(SYS_COURSE_PATH).$courseInfo['path'].'/work/';\n    $zip = new PclZip($tempZipFile);\n    $workPerUser = getWorkPerUser($userId);\n\n    if (!empty($workPerUser)) {\n        $files = [];\n        foreach ($workPerUser as $work) {\n            $work = $work['work'];\n            foreach ($work->user_results as $userResult) {\n                if (empty($userResult['url']) || empty($userResult['contains_file'])) {\n                    continue;\n                }\n                $data = getFileContents($userResult['id'], $courseInfo);\n                if (!empty($data) && isset($data['path'])) {\n                    $files[basename($data['path'])] = [\n                        'title' => $data['title'],\n                        'path' => $data['path'],\n                    ];\n                }\n            }\n        }\n\n        if (!empty($files)) {\n            Session::write('files', $files);\n            foreach ($files as $data) {\n                $zip->add(\n                    $data['path'],\n                    PCLZIP_OPT_REMOVE_PATH,\n                    $coursePath,\n                    PCLZIP_CB_PRE_ADD,\n                    'preAddAllWorkStudentCallback'\n                );\n            }\n        }\n\n        // Start download of created file\n        $name = basename(api_replace_dangerous_char($userInfo['complete_name'])).'.zip';\n        Event::event_download($name.'.zip (folder)');\n        if (Security::check_abs_path($tempZipFile, api_get_path(SYS_ARCHIVE_PATH))) {\n            DocumentManager::file_send_for_download($tempZipFile, true, $name);\n            @unlink($tempZipFile);\n            exit;\n        }\n    }\n    exit;\n}\n\n/**\n * @param $p_event\n * @param array $p_header\n *\n * @return int\n */\nfunction preAddAllWorkStudentCallback($p_event, &$p_header)\n{\n    $files = Session::read('files');\n    if (isset($files[basename($p_header['stored_filename'])])) {\n        $p_header['stored_filename'] = $files[basename($p_header['stored_filename'])]['title'];\n\n        return 1;\n    }\n\n    return 0;\n}\n\n/**\n * Get all work created by a user.\n *\n * @param int $user_id\n * @param int $courseId\n * @param int $sessionId\n *\n * @return array\n */\nfunction getWorkCreatedByUser($user_id, $courseId, $sessionId)\n{\n    $items = api_get_item_property_list_by_tool_by_user(\n        $user_id,\n        'work',\n        $courseId,\n        $sessionId\n    );\n\n    $list = [];\n    if (!empty($items)) {\n        foreach ($items as $work) {\n            $item = get_work_data_by_id(\n                $work['ref'],\n                $courseId,\n                $sessionId\n            );\n            if (!empty($item)) {\n                $list[] = [\n                    $item['title'],\n                    api_get_local_time($work['insert_date']),\n                    api_get_local_time($work['lastedit_date']),\n                ];\n            }\n        }\n    }\n\n    return $list;\n}\n\n/**\n * @param array $courseInfo\n * @param int   $workId\n *\n * @return bool\n */\nfunction protectWork($courseInfo, $workId)\n{\n    $userId = api_get_user_id();\n    $groupId = api_get_group_id();\n    $sessionId = api_get_session_id();\n    $workData = get_work_data_by_id($workId);\n\n    if (empty($workData) || empty($courseInfo)) {\n        api_not_allowed(true);\n    }\n\n    if (api_is_platform_admin() || api_is_allowed_to_edit()) {\n        return true;\n    }\n\n    $workId = $workData['id'];\n\n    if ($workData['active'] != 1) {\n        api_not_allowed(true);\n    }\n\n    $visibility = api_get_item_visibility($courseInfo, 'work', $workId, $sessionId);\n\n    if ($visibility != 1) {\n        api_not_allowed(true);\n    }\n\n    $isAllow = allowOnlySubscribedUser($userId, $workId, $courseInfo['real_id']);\n    if (empty($isAllow)) {\n        api_not_allowed(true);\n    }\n\n    $groupInfo = GroupManager::get_group_properties($groupId);\n\n    if (!empty($groupId)) {\n        $showWork = GroupManager::user_has_access(\n            $userId,\n            $groupInfo['iid'],\n            GroupManager::GROUP_TOOL_WORK\n        );\n        if (!$showWork) {\n            api_not_allowed(true);\n        }\n    }\n}\n\n/**\n * @param array $courseInfo\n * @param array $work\n */\nfunction deleteCorrection($courseInfo, $work)\n{\n    if (isset($work['url_correction']) && !empty($work['url_correction']) && isset($work['iid'])) {\n        $id = $work['iid'];\n        $table = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n        $sql = \"UPDATE $table SET\n                    url_correction = '',\n                    title_correction = ''\n                WHERE iid = $id\";\n        Database::query($sql);\n        $coursePath = api_get_path(SYS_COURSE_PATH).$courseInfo['path'].'/';\n        if (file_exists($coursePath.$work['url_correction'])) {\n            if (Security::check_abs_path($coursePath.$work['url_correction'], $coursePath)) {\n                unlink($coursePath.$work['url_correction']);\n            }\n        }\n    }\n}\n\n/**\n * @param int $workId\n *\n * @return string\n */\nfunction workGetExtraFieldData($workId)\n{\n    $sessionField = new ExtraField('work');\n    $extraFieldData = $sessionField->getDataAndFormattedValues($workId);\n    $result = '';\n    if (!empty($extraFieldData)) {\n        $result .= '<div class=\"well\">';\n        foreach ($extraFieldData as $data) {\n            $result .= $data['text'].': <b>'.$data['value'].'</b>';\n        }\n        $result .= '</div>';\n    }\n\n    return $result;\n}\n\n/**\n * Export the pending works to excel.\n *\n * @params $values\n */\nfunction exportPendingWorksToExcel($values)\n{\n    $headers = [\n        get_lang('Course'),\n        get_lang('WorkName'),\n        get_lang('FullUserName'),\n        get_lang('Title'),\n        get_lang('Score'),\n        get_lang('Date'),\n        get_lang('Status'),\n        get_lang('Corrector'),\n        get_lang('CorrectionDate'),\n    ];\n    $tableXls[] = $headers;\n\n    $courseId = $values['course'] ?? 0;\n    $status = $values['status'] ?? 0;\n    $whereCondition = '';\n    if (!empty($values['work_parent_ids'])) {\n        $whereCondition = ' parent_id IN('.implode(',', $values['work_parent_ids']).')';\n    }\n    $allWork = getAllWork(\n        null,\n        null,\n        null,\n        null,\n        $whereCondition,\n        false,\n        $courseId,\n        $status\n    );\n    if (!empty($allWork)) {\n        foreach ($allWork  as $work) {\n            $score = $work['qualification_score'].'/'.$work['weight'];\n            $data = [\n                $work['course'],\n                $work['work_name'],\n                strip_tags($work['fullname']),\n                strip_tags($work['title']),\n                $score,\n                strip_tags($work['sent_date']),\n                strip_tags($work['qualificator_id']),\n                $work['qualificator_fullname'],\n                $work['date_of_qualification'],\n            ];\n            $tableXls[] = $data;\n        }\n    }\n\n    $fileName = get_lang('StudentPublicationToCorrect').'_'.api_get_local_time();\n    Export::arrayToXls($tableXls, $fileName);\n\n    return true;\n}\n"], "filenames": ["main/work/work.lib.php"], "buggy_code_start_loc": [5973], "buggy_code_end_loc": [6098], "fixing_code_start_loc": [5973], "fixing_code_end_loc": [6105], "type": "NVD-CWE-Other", "message": "Incorrect access control in Chamilo 1.11.* up to 1.11.18 allows a student subscribed to a given course to download documents belonging to another student if they know the document's ID.", "other": {"cve": {"id": "CVE-2023-34958", "sourceIdentifier": "cve@mitre.org", "published": "2023-06-08T19:15:09.920", "lastModified": "2023-06-15T17:30:29.973", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Incorrect access control in Chamilo 1.11.* up to 1.11.18 allows a student subscribed to a given course to download documents belonging to another student if they know the document's ID."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.11.0", "versionEndIncluding": "1.11.18", "matchCriteriaId": "2633146D-0E64-40CC-97EF-DF2774900717"}]}]}], "references": [{"url": "https://github.com/chamilo/chamilo-lms/commit/0c1c29db18856a6f25e21d0405dda2c20b35ff3a", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://support.chamilo.org/projects/1/wiki/Security_issues#Issue-109-2023-04-15-Moderate-impact-Moderate-risk-IDOR-in-workstudent-publication", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/0c1c29db18856a6f25e21d0405dda2c20b35ff3a"}}