{"buggy_code": ["<?php\n// +-----------------------------------------------------------------------+\n// | Piwigo - a PHP based photo gallery                                    |\n// +-----------------------------------------------------------------------+\n// | Copyright(C) 2008-2016 Piwigo Team                  http://piwigo.org |\n// | Copyright(C) 2003-2008 PhpWebGallery Team    http://phpwebgallery.net |\n// | Copyright(C) 2002-2003 Pierrick LE GALL   http://le-gall.net/pierrick |\n// +-----------------------------------------------------------------------+\n// | This program is free software; you can redistribute it and/or modify  |\n// | it under the terms of the GNU General Public License as published by  |\n// | the Free Software Foundation                                          |\n// |                                                                       |\n// | This program is distributed in the hope that it will be useful, but   |\n// | WITHOUT ANY WARRANTY; without even the implied warranty of            |\n// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU      |\n// | General Public License for more details.                              |\n// |                                                                       |\n// | You should have received a copy of the GNU General Public License     |\n// | along with this program; if not, write to the Free Software           |\n// | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, |\n// | USA.                                                                  |\n// +-----------------------------------------------------------------------+\n\nif (!defined('PHPWG_ROOT_PATH'))\n{\n  die (\"Hacking attempt!\");\n}\n\ninclude_once(PHPWG_ROOT_PATH.'admin/include/functions.php');\ninclude_once(PHPWG_ROOT_PATH.'admin/include/tabsheet.class.php');\n\n// +-----------------------------------------------------------------------+\n// | Check Access and exit when user status is not ok                      |\n// +-----------------------------------------------------------------------+\ncheck_status(ACCESS_ADMINISTRATOR);\n\n// +-----------------------------------------------------------------------+\n// |                       modification registration                       |\n// +-----------------------------------------------------------------------+\n\n\nif (isset($_POST['falsify'])\n    and isset($_POST['cat_true'])\n    and count($_POST['cat_true']) > 0)\n{\n  check_pwg_token();\n  switch ($_GET['section'])\n  {\n    case 'comments' :\n    {\n      $query = '\nUPDATE '.CATEGORIES_TABLE.'\n  SET commentable = \\'false\\'\n  WHERE id IN ('.implode(',', $_POST['cat_true']).')\n;';\n      pwg_query($query);\n      break;\n    }\n    case 'visible' :\n    {\n      set_cat_visible($_POST['cat_true'], 'false');\n      break;\n    }\n    case 'status' :\n    {\n      set_cat_status($_POST['cat_true'], 'private');\n      break;\n    }\n    case 'representative' :\n    {\n      $query = '\nUPDATE '.CATEGORIES_TABLE.'\n  SET representative_picture_id = NULL\n  WHERE id IN ('.implode(',', $_POST['cat_true']).')\n;';\n      pwg_query($query);\n      break;\n    }\n  }\n}\nelse if (isset($_POST['trueify'])\n         and isset($_POST['cat_false'])\n         and count($_POST['cat_false']) > 0)\n{\n  switch ($_GET['section'])\n  {\n    case 'comments' :\n    {\n      $query = '\nUPDATE '.CATEGORIES_TABLE.'\n  SET commentable = \\'true\\'\n  WHERE id IN ('.implode(',', $_POST['cat_false']).')\n;';\n      pwg_query($query);\n      break;\n    }\n    case 'visible' :\n    {\n      set_cat_visible($_POST['cat_false'], 'true');\n      break;\n    }\n    case 'status' :\n    {\n      set_cat_status($_POST['cat_false'], 'public');\n      break;\n    }\n    case 'representative' :\n    {\n      // theoretically, all categories in $_POST['cat_false'] contain at\n      // least one element, so Piwigo can find a representant.\n      set_random_representant($_POST['cat_false']);\n      break;\n    }\n  }\n}\n\n// +-----------------------------------------------------------------------+\n// |                             template init                             |\n// +-----------------------------------------------------------------------+\n\n$template->set_filenames(\n  array(\n    'cat_options' => 'cat_options.tpl',\n    'double_select' => 'double_select.tpl'\n    )\n  );\n\n$page['section'] = isset($_GET['section']) ? $_GET['section'] : 'status';\n$base_url = PHPWG_ROOT_PATH.'admin.php?page=cat_options&amp;section=';\n\n$template->assign(\n  array(\n    'U_HELP' => get_root_url().'admin/popuphelp.php?page=cat_options',\n    'F_ACTION'=>$base_url.$page['section']\n   )\n );\n\n// TabSheet\n$tabsheet = new tabsheet();\n$tabsheet->set_id('cat_options');\n$tabsheet->select($page['section']);\n$tabsheet->assign();\n\n// +-----------------------------------------------------------------------+\n// |                              form display                             |\n// +-----------------------------------------------------------------------+\n\n// for each section, categories in the multiselect field can be :\n//\n// - true : commentable for comment section\n// - false : un-commentable for comment section\n// - NA : (not applicable) for virtual categories\n//\n// for true and false status, we associates an array of category ids,\n// function display_select_categories will use the given CSS class for each\n// option\n$cats_true = array();\n$cats_false = array();\nswitch ($page['section'])\n{\n  case 'comments' :\n  {\n    $query_true = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE commentable = \\'true\\'\n;';\n    $query_false = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE commentable = \\'false\\'\n;';\n    $template->assign(\n      array(\n        'L_SECTION' => l10n('Authorize users to add comments on selected albums'),\n        'L_CAT_OPTIONS_TRUE' => l10n('Authorized'),\n        'L_CAT_OPTIONS_FALSE' => l10n('Forbidden'),\n        )\n      );\n    break;\n  }\n  case 'visible' :\n  {\n    $query_true = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE visible = \\'true\\'\n;';\n    $query_false = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE visible = \\'false\\'\n;';\n    $template->assign(\n      array(\n        'L_SECTION' => l10n('Lock albums'),\n        'L_CAT_OPTIONS_TRUE' => l10n('Unlocked'),\n        'L_CAT_OPTIONS_FALSE' => l10n('Locked'),\n        )\n      );\n    break;\n  }\n  case 'status' :\n  {\n    $query_true = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE status = \\'public\\'\n;';\n    $query_false = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE status = \\'private\\'\n;';\n    $template->assign(\n      array(\n        'L_SECTION' => l10n('Manage authorizations for selected albums'),\n        'L_CAT_OPTIONS_TRUE' => l10n('Public'),\n        'L_CAT_OPTIONS_FALSE' => l10n('Private'),\n        )\n      );\n    break;\n  }\n  case 'representative' :\n  {\n    $query_true = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE representative_picture_id IS NOT NULL\n;';\n    $query_false = '\nSELECT DISTINCT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.' INNER JOIN '.IMAGE_CATEGORY_TABLE.' ON id=category_id\n  WHERE representative_picture_id IS NULL\n;';\n    $template->assign(\n      array(\n        'L_SECTION' => l10n('Representative'),\n        'L_CAT_OPTIONS_TRUE' => l10n('singly represented'),\n        'L_CAT_OPTIONS_FALSE' => l10n('randomly represented')\n        )\n      );\n    break;\n  }\n}\ndisplay_select_cat_wrapper($query_true,array(),'category_option_true');\ndisplay_select_cat_wrapper($query_false,array(),'category_option_false');\n$template->assign('PWG_TOKEN',get_pwg_token());\n\n// +-----------------------------------------------------------------------+\n// |                           sending html code                           |\n// +-----------------------------------------------------------------------+\n\n$template->assign_var_from_handle('DOUBLE_SELECT', 'double_select');\n$template->assign_var_from_handle('ADMIN_CONTENT', 'cat_options');\n?>"], "fixing_code": ["<?php\n// +-----------------------------------------------------------------------+\n// | Piwigo - a PHP based photo gallery                                    |\n// +-----------------------------------------------------------------------+\n// | Copyright(C) 2008-2016 Piwigo Team                  http://piwigo.org |\n// | Copyright(C) 2003-2008 PhpWebGallery Team    http://phpwebgallery.net |\n// | Copyright(C) 2002-2003 Pierrick LE GALL   http://le-gall.net/pierrick |\n// +-----------------------------------------------------------------------+\n// | This program is free software; you can redistribute it and/or modify  |\n// | it under the terms of the GNU General Public License as published by  |\n// | the Free Software Foundation                                          |\n// |                                                                       |\n// | This program is distributed in the hope that it will be useful, but   |\n// | WITHOUT ANY WARRANTY; without even the implied warranty of            |\n// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU      |\n// | General Public License for more details.                              |\n// |                                                                       |\n// | You should have received a copy of the GNU General Public License     |\n// | along with this program; if not, write to the Free Software           |\n// | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, |\n// | USA.                                                                  |\n// +-----------------------------------------------------------------------+\n\nif (!defined('PHPWG_ROOT_PATH'))\n{\n  die (\"Hacking attempt!\");\n}\n\ninclude_once(PHPWG_ROOT_PATH.'admin/include/functions.php');\ninclude_once(PHPWG_ROOT_PATH.'admin/include/tabsheet.class.php');\n\n// +-----------------------------------------------------------------------+\n// | Check Access and exit when user status is not ok                      |\n// +-----------------------------------------------------------------------+\ncheck_status(ACCESS_ADMINISTRATOR);\n\n// +-----------------------------------------------------------------------+\n// |                       modification registration                       |\n// +-----------------------------------------------------------------------+\n\n\nif (isset($_POST['falsify'])\n    and isset($_POST['cat_true'])\n    and count($_POST['cat_true']) > 0)\n{\n  check_pwg_token();\n  check_input_parameter('cat_true', $_POST, true, PATTERN_ID);\n  switch ($_GET['section'])\n  {\n    case 'comments' :\n    {\n      $query = '\nUPDATE '.CATEGORIES_TABLE.'\n  SET commentable = \\'false\\'\n  WHERE id IN ('.implode(',', $_POST['cat_true']).')\n;';\n      pwg_query($query);\n      break;\n    }\n    case 'visible' :\n    {\n      set_cat_visible($_POST['cat_true'], 'false');\n      break;\n    }\n    case 'status' :\n    {\n      set_cat_status($_POST['cat_true'], 'private');\n      break;\n    }\n    case 'representative' :\n    {\n      $query = '\nUPDATE '.CATEGORIES_TABLE.'\n  SET representative_picture_id = NULL\n  WHERE id IN ('.implode(',', $_POST['cat_true']).')\n;';\n      pwg_query($query);\n      break;\n    }\n  }\n}\nelse if (isset($_POST['trueify'])\n         and isset($_POST['cat_false'])\n         and count($_POST['cat_false']) > 0)\n{\n  check_input_parameter('cat_false', $_POST, true, PATTERN_ID);\n  switch ($_GET['section'])\n  {\n    case 'comments' :\n    {\n      $query = '\nUPDATE '.CATEGORIES_TABLE.'\n  SET commentable = \\'true\\'\n  WHERE id IN ('.implode(',', $_POST['cat_false']).')\n;';\n      pwg_query($query);\n      break;\n    }\n    case 'visible' :\n    {\n      set_cat_visible($_POST['cat_false'], 'true');\n      break;\n    }\n    case 'status' :\n    {\n      set_cat_status($_POST['cat_false'], 'public');\n      break;\n    }\n    case 'representative' :\n    {\n      // theoretically, all categories in $_POST['cat_false'] contain at\n      // least one element, so Piwigo can find a representant.\n      set_random_representant($_POST['cat_false']);\n      break;\n    }\n  }\n}\n\n// +-----------------------------------------------------------------------+\n// |                             template init                             |\n// +-----------------------------------------------------------------------+\n\n$template->set_filenames(\n  array(\n    'cat_options' => 'cat_options.tpl',\n    'double_select' => 'double_select.tpl'\n    )\n  );\n\n$page['section'] = isset($_GET['section']) ? $_GET['section'] : 'status';\n$base_url = PHPWG_ROOT_PATH.'admin.php?page=cat_options&amp;section=';\n\n$template->assign(\n  array(\n    'U_HELP' => get_root_url().'admin/popuphelp.php?page=cat_options',\n    'F_ACTION'=>$base_url.$page['section']\n   )\n );\n\n// TabSheet\n$tabsheet = new tabsheet();\n$tabsheet->set_id('cat_options');\n$tabsheet->select($page['section']);\n$tabsheet->assign();\n\n// +-----------------------------------------------------------------------+\n// |                              form display                             |\n// +-----------------------------------------------------------------------+\n\n// for each section, categories in the multiselect field can be :\n//\n// - true : commentable for comment section\n// - false : un-commentable for comment section\n// - NA : (not applicable) for virtual categories\n//\n// for true and false status, we associates an array of category ids,\n// function display_select_categories will use the given CSS class for each\n// option\n$cats_true = array();\n$cats_false = array();\nswitch ($page['section'])\n{\n  case 'comments' :\n  {\n    $query_true = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE commentable = \\'true\\'\n;';\n    $query_false = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE commentable = \\'false\\'\n;';\n    $template->assign(\n      array(\n        'L_SECTION' => l10n('Authorize users to add comments on selected albums'),\n        'L_CAT_OPTIONS_TRUE' => l10n('Authorized'),\n        'L_CAT_OPTIONS_FALSE' => l10n('Forbidden'),\n        )\n      );\n    break;\n  }\n  case 'visible' :\n  {\n    $query_true = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE visible = \\'true\\'\n;';\n    $query_false = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE visible = \\'false\\'\n;';\n    $template->assign(\n      array(\n        'L_SECTION' => l10n('Lock albums'),\n        'L_CAT_OPTIONS_TRUE' => l10n('Unlocked'),\n        'L_CAT_OPTIONS_FALSE' => l10n('Locked'),\n        )\n      );\n    break;\n  }\n  case 'status' :\n  {\n    $query_true = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE status = \\'public\\'\n;';\n    $query_false = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE status = \\'private\\'\n;';\n    $template->assign(\n      array(\n        'L_SECTION' => l10n('Manage authorizations for selected albums'),\n        'L_CAT_OPTIONS_TRUE' => l10n('Public'),\n        'L_CAT_OPTIONS_FALSE' => l10n('Private'),\n        )\n      );\n    break;\n  }\n  case 'representative' :\n  {\n    $query_true = '\nSELECT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.'\n  WHERE representative_picture_id IS NOT NULL\n;';\n    $query_false = '\nSELECT DISTINCT id,name,uppercats,global_rank\n  FROM '.CATEGORIES_TABLE.' INNER JOIN '.IMAGE_CATEGORY_TABLE.' ON id=category_id\n  WHERE representative_picture_id IS NULL\n;';\n    $template->assign(\n      array(\n        'L_SECTION' => l10n('Representative'),\n        'L_CAT_OPTIONS_TRUE' => l10n('singly represented'),\n        'L_CAT_OPTIONS_FALSE' => l10n('randomly represented')\n        )\n      );\n    break;\n  }\n}\ndisplay_select_cat_wrapper($query_true,array(),'category_option_true');\ndisplay_select_cat_wrapper($query_false,array(),'category_option_false');\n$template->assign('PWG_TOKEN',get_pwg_token());\n\n// +-----------------------------------------------------------------------+\n// |                           sending html code                           |\n// +-----------------------------------------------------------------------+\n\n$template->assign_var_from_handle('DOUBLE_SELECT', 'double_select');\n$template->assign_var_from_handle('ADMIN_CONTENT', 'cat_options');\n?>"], "filenames": ["admin/cat_options.php"], "buggy_code_start_loc": [46], "buggy_code_end_loc": [84], "fixing_code_start_loc": [47], "fixing_code_end_loc": [87], "type": "CWE-89", "message": "SQL injection vulnerability in the administrative backend in Piwigo through 2.9.1 allows remote users to execute arbitrary SQL commands via the cat_false or cat_true parameter in the comments or status page to cat_options.php.", "other": {"cve": {"id": "CVE-2017-10682", "sourceIdentifier": "cve@mitre.org", "published": "2017-06-29T21:29:00.330", "lastModified": "2017-12-20T02:29:02.270", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "SQL injection vulnerability in the administrative backend in Piwigo through 2.9.1 allows remote users to execute arbitrary SQL commands via the cat_false or cat_true parameter in the comments or status page to cat_options.php."}, {"lang": "es", "value": "Vulnerabilidad de inyecci\u00f3n SQL en el backend administrativo en Piwigo hasta la versi\u00f3n 2.9.2 permite que usuarios remotos ejecuten comandos SQL arbitrarios mediante los par\u00e1metros cat_false o cat_true en la p\u00e1gina de comentarios o de estado en cat_options.php."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:piwigo:piwigo:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.9.1", "matchCriteriaId": "5D356328-15B0-4402-94E6-8C16E09EB088"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/99357", "source": "cve@mitre.org"}, {"url": "https://github.com/Piwigo/Piwigo/commit/3dd6812412289a199564e63fffd0a9754010b9e0", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Piwigo/Piwigo/issues/724", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/43337/", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/Piwigo/Piwigo/commit/3dd6812412289a199564e63fffd0a9754010b9e0"}}