{"buggy_code": ["/******************************************************************************\n *\n * This file is provided under a dual BSD/GPLv2 license.  When using or\n * redistributing this file, you may do so under either license.\n *\n * GPL LICENSE SUMMARY\n *\n * Copyright(c) 2018 - 2019 Intel Corporation\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of version 2 of the GNU General Public License as\n * published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * BSD LICENSE\n *\n * Copyright(c) 2018 - 2019 Intel Corporation\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *  * Neither the name Intel Corporation nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n *****************************************************************************/\n\n#include \"iwl-trans.h\"\n#include \"iwl-fh.h\"\n#include \"iwl-context-info-gen3.h\"\n#include \"internal.h\"\n#include \"iwl-prph.h\"\n\nint iwl_pcie_ctxt_info_gen3_init(struct iwl_trans *trans,\n\t\t\t\t const struct fw_img *fw)\n{\n\tstruct iwl_trans_pcie *trans_pcie = IWL_TRANS_GET_PCIE_TRANS(trans);\n\tstruct iwl_context_info_gen3 *ctxt_info_gen3;\n\tstruct iwl_prph_scratch *prph_scratch;\n\tstruct iwl_prph_scratch_ctrl_cfg *prph_sc_ctrl;\n\tstruct iwl_prph_info *prph_info;\n\tvoid *iml_img;\n\tu32 control_flags = 0;\n\tint ret;\n\tint cmdq_size = max_t(u32, IWL_CMD_QUEUE_SIZE,\n\t\t\t      trans->cfg->min_txq_size);\n\n\t/* Allocate prph scratch */\n\tprph_scratch = dma_alloc_coherent(trans->dev, sizeof(*prph_scratch),\n\t\t\t\t\t  &trans_pcie->prph_scratch_dma_addr,\n\t\t\t\t\t  GFP_KERNEL);\n\tif (!prph_scratch)\n\t\treturn -ENOMEM;\n\n\tprph_sc_ctrl = &prph_scratch->ctrl_cfg;\n\n\tprph_sc_ctrl->version.version = 0;\n\tprph_sc_ctrl->version.mac_id =\n\t\tcpu_to_le16((u16)iwl_read32(trans, CSR_HW_REV));\n\tprph_sc_ctrl->version.size = cpu_to_le16(sizeof(*prph_scratch) / 4);\n\n\tcontrol_flags = IWL_PRPH_SCRATCH_RB_SIZE_4K |\n\t\t\tIWL_PRPH_SCRATCH_MTR_MODE |\n\t\t\t(IWL_PRPH_MTR_FORMAT_256B &\n\t\t\t IWL_PRPH_SCRATCH_MTR_FORMAT) |\n\t\t\tIWL_PRPH_SCRATCH_EARLY_DEBUG_EN |\n\t\t\tIWL_PRPH_SCRATCH_EDBG_DEST_DRAM;\n\tprph_sc_ctrl->control.control_flags = cpu_to_le32(control_flags);\n\n\t/* initialize RX default queue */\n\tprph_sc_ctrl->rbd_cfg.free_rbd_addr =\n\t\tcpu_to_le64(trans_pcie->rxq->bd_dma);\n\n\t/* Configure debug, for integration */\n\tif (!iwl_trans_dbg_ini_valid(trans))\n\t\tiwl_pcie_alloc_fw_monitor(trans, 0);\n\tif (trans->dbg.num_blocks) {\n\t\tprph_sc_ctrl->hwm_cfg.hwm_base_addr =\n\t\t\tcpu_to_le64(trans->dbg.fw_mon[0].physical);\n\t\tprph_sc_ctrl->hwm_cfg.hwm_size =\n\t\t\tcpu_to_le32(trans->dbg.fw_mon[0].size);\n\t}\n\n\t/* allocate ucode sections in dram and set addresses */\n\tret = iwl_pcie_init_fw_sec(trans, fw, &prph_scratch->dram);\n\tif (ret) {\n\t\tdma_free_coherent(trans->dev,\n\t\t\t\t  sizeof(*prph_scratch),\n\t\t\t\t  prph_scratch,\n\t\t\t\t  trans_pcie->prph_scratch_dma_addr);\n\t\treturn ret;\n\t}\n\n\t/* Allocate prph information\n\t * currently we don't assign to the prph info anything, but it would get\n\t * assigned later */\n\tprph_info = dma_alloc_coherent(trans->dev, sizeof(*prph_info),\n\t\t\t\t       &trans_pcie->prph_info_dma_addr,\n\t\t\t\t       GFP_KERNEL);\n\tif (!prph_info)\n\t\treturn -ENOMEM;\n\n\t/* Allocate context info */\n\tctxt_info_gen3 = dma_alloc_coherent(trans->dev,\n\t\t\t\t\t    sizeof(*ctxt_info_gen3),\n\t\t\t\t\t    &trans_pcie->ctxt_info_dma_addr,\n\t\t\t\t\t    GFP_KERNEL);\n\tif (!ctxt_info_gen3)\n\t\treturn -ENOMEM;\n\n\tctxt_info_gen3->prph_info_base_addr =\n\t\tcpu_to_le64(trans_pcie->prph_info_dma_addr);\n\tctxt_info_gen3->prph_scratch_base_addr =\n\t\tcpu_to_le64(trans_pcie->prph_scratch_dma_addr);\n\tctxt_info_gen3->prph_scratch_size =\n\t\tcpu_to_le32(sizeof(*prph_scratch));\n\tctxt_info_gen3->cr_head_idx_arr_base_addr =\n\t\tcpu_to_le64(trans_pcie->rxq->rb_stts_dma);\n\tctxt_info_gen3->tr_tail_idx_arr_base_addr =\n\t\tcpu_to_le64(trans_pcie->rxq->tr_tail_dma);\n\tctxt_info_gen3->cr_tail_idx_arr_base_addr =\n\t\tcpu_to_le64(trans_pcie->rxq->cr_tail_dma);\n\tctxt_info_gen3->cr_idx_arr_size =\n\t\tcpu_to_le16(IWL_NUM_OF_COMPLETION_RINGS);\n\tctxt_info_gen3->tr_idx_arr_size =\n\t\tcpu_to_le16(IWL_NUM_OF_TRANSFER_RINGS);\n\tctxt_info_gen3->mtr_base_addr =\n\t\tcpu_to_le64(trans_pcie->txq[trans_pcie->cmd_queue]->dma_addr);\n\tctxt_info_gen3->mcr_base_addr =\n\t\tcpu_to_le64(trans_pcie->rxq->used_bd_dma);\n\tctxt_info_gen3->mtr_size =\n\t\tcpu_to_le16(TFD_QUEUE_CB_SIZE(cmdq_size));\n\tctxt_info_gen3->mcr_size =\n\t\tcpu_to_le16(RX_QUEUE_CB_SIZE(MQ_RX_TABLE_SIZE));\n\n\ttrans_pcie->ctxt_info_gen3 = ctxt_info_gen3;\n\ttrans_pcie->prph_info = prph_info;\n\ttrans_pcie->prph_scratch = prph_scratch;\n\n\t/* Allocate IML */\n\timl_img = dma_alloc_coherent(trans->dev, trans->iml_len,\n\t\t\t\t     &trans_pcie->iml_dma_addr, GFP_KERNEL);\n\tif (!iml_img)\n\t\treturn -ENOMEM;\n\n\tmemcpy(iml_img, trans->iml, trans->iml_len);\n\n\tiwl_enable_fw_load_int_ctx_info(trans);\n\n\t/* kick FW self load */\n\tiwl_write64(trans, CSR_CTXT_INFO_ADDR,\n\t\t    trans_pcie->ctxt_info_dma_addr);\n\tiwl_write64(trans, CSR_IML_DATA_ADDR,\n\t\t    trans_pcie->iml_dma_addr);\n\tiwl_write32(trans, CSR_IML_SIZE_ADDR, trans->iml_len);\n\n\tiwl_set_bit(trans, CSR_CTXT_INFO_BOOT_CTRL,\n\t\t    CSR_AUTO_FUNC_BOOT_ENA);\n\tif (trans->trans_cfg->device_family >= IWL_DEVICE_FAMILY_AX210)\n\t\tiwl_write_umac_prph(trans, UREG_CPU_INIT_RUN, 1);\n\telse\n\t\tiwl_set_bit(trans, CSR_GP_CNTRL, CSR_AUTO_FUNC_INIT);\n\n\treturn 0;\n}\n\nvoid iwl_pcie_ctxt_info_gen3_free(struct iwl_trans *trans)\n{\n\tstruct iwl_trans_pcie *trans_pcie = IWL_TRANS_GET_PCIE_TRANS(trans);\n\n\tif (!trans_pcie->ctxt_info_gen3)\n\t\treturn;\n\n\tdma_free_coherent(trans->dev, sizeof(*trans_pcie->ctxt_info_gen3),\n\t\t\t  trans_pcie->ctxt_info_gen3,\n\t\t\t  trans_pcie->ctxt_info_dma_addr);\n\ttrans_pcie->ctxt_info_dma_addr = 0;\n\ttrans_pcie->ctxt_info_gen3 = NULL;\n\n\tiwl_pcie_ctxt_info_free_fw_img(trans);\n\n\tdma_free_coherent(trans->dev, sizeof(*trans_pcie->prph_scratch),\n\t\t\t  trans_pcie->prph_scratch,\n\t\t\t  trans_pcie->prph_scratch_dma_addr);\n\ttrans_pcie->prph_scratch_dma_addr = 0;\n\ttrans_pcie->prph_scratch = NULL;\n\n\tdma_free_coherent(trans->dev, sizeof(*trans_pcie->prph_info),\n\t\t\t  trans_pcie->prph_info,\n\t\t\t  trans_pcie->prph_info_dma_addr);\n\ttrans_pcie->prph_info_dma_addr = 0;\n\ttrans_pcie->prph_info = NULL;\n}\n"], "fixing_code": ["/******************************************************************************\n *\n * This file is provided under a dual BSD/GPLv2 license.  When using or\n * redistributing this file, you may do so under either license.\n *\n * GPL LICENSE SUMMARY\n *\n * Copyright(c) 2018 - 2019 Intel Corporation\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of version 2 of the GNU General Public License as\n * published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * BSD LICENSE\n *\n * Copyright(c) 2018 - 2019 Intel Corporation\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *  * Neither the name Intel Corporation nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n *****************************************************************************/\n\n#include \"iwl-trans.h\"\n#include \"iwl-fh.h\"\n#include \"iwl-context-info-gen3.h\"\n#include \"internal.h\"\n#include \"iwl-prph.h\"\n\nint iwl_pcie_ctxt_info_gen3_init(struct iwl_trans *trans,\n\t\t\t\t const struct fw_img *fw)\n{\n\tstruct iwl_trans_pcie *trans_pcie = IWL_TRANS_GET_PCIE_TRANS(trans);\n\tstruct iwl_context_info_gen3 *ctxt_info_gen3;\n\tstruct iwl_prph_scratch *prph_scratch;\n\tstruct iwl_prph_scratch_ctrl_cfg *prph_sc_ctrl;\n\tstruct iwl_prph_info *prph_info;\n\tvoid *iml_img;\n\tu32 control_flags = 0;\n\tint ret;\n\tint cmdq_size = max_t(u32, IWL_CMD_QUEUE_SIZE,\n\t\t\t      trans->cfg->min_txq_size);\n\n\t/* Allocate prph scratch */\n\tprph_scratch = dma_alloc_coherent(trans->dev, sizeof(*prph_scratch),\n\t\t\t\t\t  &trans_pcie->prph_scratch_dma_addr,\n\t\t\t\t\t  GFP_KERNEL);\n\tif (!prph_scratch)\n\t\treturn -ENOMEM;\n\n\tprph_sc_ctrl = &prph_scratch->ctrl_cfg;\n\n\tprph_sc_ctrl->version.version = 0;\n\tprph_sc_ctrl->version.mac_id =\n\t\tcpu_to_le16((u16)iwl_read32(trans, CSR_HW_REV));\n\tprph_sc_ctrl->version.size = cpu_to_le16(sizeof(*prph_scratch) / 4);\n\n\tcontrol_flags = IWL_PRPH_SCRATCH_RB_SIZE_4K |\n\t\t\tIWL_PRPH_SCRATCH_MTR_MODE |\n\t\t\t(IWL_PRPH_MTR_FORMAT_256B &\n\t\t\t IWL_PRPH_SCRATCH_MTR_FORMAT) |\n\t\t\tIWL_PRPH_SCRATCH_EARLY_DEBUG_EN |\n\t\t\tIWL_PRPH_SCRATCH_EDBG_DEST_DRAM;\n\tprph_sc_ctrl->control.control_flags = cpu_to_le32(control_flags);\n\n\t/* initialize RX default queue */\n\tprph_sc_ctrl->rbd_cfg.free_rbd_addr =\n\t\tcpu_to_le64(trans_pcie->rxq->bd_dma);\n\n\t/* Configure debug, for integration */\n\tif (!iwl_trans_dbg_ini_valid(trans))\n\t\tiwl_pcie_alloc_fw_monitor(trans, 0);\n\tif (trans->dbg.num_blocks) {\n\t\tprph_sc_ctrl->hwm_cfg.hwm_base_addr =\n\t\t\tcpu_to_le64(trans->dbg.fw_mon[0].physical);\n\t\tprph_sc_ctrl->hwm_cfg.hwm_size =\n\t\t\tcpu_to_le32(trans->dbg.fw_mon[0].size);\n\t}\n\n\t/* allocate ucode sections in dram and set addresses */\n\tret = iwl_pcie_init_fw_sec(trans, fw, &prph_scratch->dram);\n\tif (ret)\n\t\tgoto err_free_prph_scratch;\n\n\n\t/* Allocate prph information\n\t * currently we don't assign to the prph info anything, but it would get\n\t * assigned later */\n\tprph_info = dma_alloc_coherent(trans->dev, sizeof(*prph_info),\n\t\t\t\t       &trans_pcie->prph_info_dma_addr,\n\t\t\t\t       GFP_KERNEL);\n\tif (!prph_info) {\n\t\tret = -ENOMEM;\n\t\tgoto err_free_prph_scratch;\n\t}\n\n\t/* Allocate context info */\n\tctxt_info_gen3 = dma_alloc_coherent(trans->dev,\n\t\t\t\t\t    sizeof(*ctxt_info_gen3),\n\t\t\t\t\t    &trans_pcie->ctxt_info_dma_addr,\n\t\t\t\t\t    GFP_KERNEL);\n\tif (!ctxt_info_gen3) {\n\t\tret = -ENOMEM;\n\t\tgoto err_free_prph_info;\n\t}\n\n\tctxt_info_gen3->prph_info_base_addr =\n\t\tcpu_to_le64(trans_pcie->prph_info_dma_addr);\n\tctxt_info_gen3->prph_scratch_base_addr =\n\t\tcpu_to_le64(trans_pcie->prph_scratch_dma_addr);\n\tctxt_info_gen3->prph_scratch_size =\n\t\tcpu_to_le32(sizeof(*prph_scratch));\n\tctxt_info_gen3->cr_head_idx_arr_base_addr =\n\t\tcpu_to_le64(trans_pcie->rxq->rb_stts_dma);\n\tctxt_info_gen3->tr_tail_idx_arr_base_addr =\n\t\tcpu_to_le64(trans_pcie->rxq->tr_tail_dma);\n\tctxt_info_gen3->cr_tail_idx_arr_base_addr =\n\t\tcpu_to_le64(trans_pcie->rxq->cr_tail_dma);\n\tctxt_info_gen3->cr_idx_arr_size =\n\t\tcpu_to_le16(IWL_NUM_OF_COMPLETION_RINGS);\n\tctxt_info_gen3->tr_idx_arr_size =\n\t\tcpu_to_le16(IWL_NUM_OF_TRANSFER_RINGS);\n\tctxt_info_gen3->mtr_base_addr =\n\t\tcpu_to_le64(trans_pcie->txq[trans_pcie->cmd_queue]->dma_addr);\n\tctxt_info_gen3->mcr_base_addr =\n\t\tcpu_to_le64(trans_pcie->rxq->used_bd_dma);\n\tctxt_info_gen3->mtr_size =\n\t\tcpu_to_le16(TFD_QUEUE_CB_SIZE(cmdq_size));\n\tctxt_info_gen3->mcr_size =\n\t\tcpu_to_le16(RX_QUEUE_CB_SIZE(MQ_RX_TABLE_SIZE));\n\n\ttrans_pcie->ctxt_info_gen3 = ctxt_info_gen3;\n\ttrans_pcie->prph_info = prph_info;\n\ttrans_pcie->prph_scratch = prph_scratch;\n\n\t/* Allocate IML */\n\timl_img = dma_alloc_coherent(trans->dev, trans->iml_len,\n\t\t\t\t     &trans_pcie->iml_dma_addr, GFP_KERNEL);\n\tif (!iml_img)\n\t\treturn -ENOMEM;\n\n\tmemcpy(iml_img, trans->iml, trans->iml_len);\n\n\tiwl_enable_fw_load_int_ctx_info(trans);\n\n\t/* kick FW self load */\n\tiwl_write64(trans, CSR_CTXT_INFO_ADDR,\n\t\t    trans_pcie->ctxt_info_dma_addr);\n\tiwl_write64(trans, CSR_IML_DATA_ADDR,\n\t\t    trans_pcie->iml_dma_addr);\n\tiwl_write32(trans, CSR_IML_SIZE_ADDR, trans->iml_len);\n\n\tiwl_set_bit(trans, CSR_CTXT_INFO_BOOT_CTRL,\n\t\t    CSR_AUTO_FUNC_BOOT_ENA);\n\tif (trans->trans_cfg->device_family >= IWL_DEVICE_FAMILY_AX210)\n\t\tiwl_write_umac_prph(trans, UREG_CPU_INIT_RUN, 1);\n\telse\n\t\tiwl_set_bit(trans, CSR_GP_CNTRL, CSR_AUTO_FUNC_INIT);\n\n\treturn 0;\n\nerr_free_prph_info:\n\tdma_free_coherent(trans->dev,\n\t\t\t  sizeof(*prph_info),\n\t\t\tprph_info,\n\t\t\ttrans_pcie->prph_info_dma_addr);\n\nerr_free_prph_scratch:\n\tdma_free_coherent(trans->dev,\n\t\t\t  sizeof(*prph_scratch),\n\t\t\tprph_scratch,\n\t\t\ttrans_pcie->prph_scratch_dma_addr);\n\treturn ret;\n\n}\n\nvoid iwl_pcie_ctxt_info_gen3_free(struct iwl_trans *trans)\n{\n\tstruct iwl_trans_pcie *trans_pcie = IWL_TRANS_GET_PCIE_TRANS(trans);\n\n\tif (!trans_pcie->ctxt_info_gen3)\n\t\treturn;\n\n\tdma_free_coherent(trans->dev, sizeof(*trans_pcie->ctxt_info_gen3),\n\t\t\t  trans_pcie->ctxt_info_gen3,\n\t\t\t  trans_pcie->ctxt_info_dma_addr);\n\ttrans_pcie->ctxt_info_dma_addr = 0;\n\ttrans_pcie->ctxt_info_gen3 = NULL;\n\n\tiwl_pcie_ctxt_info_free_fw_img(trans);\n\n\tdma_free_coherent(trans->dev, sizeof(*trans_pcie->prph_scratch),\n\t\t\t  trans_pcie->prph_scratch,\n\t\t\t  trans_pcie->prph_scratch_dma_addr);\n\ttrans_pcie->prph_scratch_dma_addr = 0;\n\ttrans_pcie->prph_scratch = NULL;\n\n\tdma_free_coherent(trans->dev, sizeof(*trans_pcie->prph_info),\n\t\t\t  trans_pcie->prph_info,\n\t\t\t  trans_pcie->prph_info_dma_addr);\n\ttrans_pcie->prph_info_dma_addr = 0;\n\ttrans_pcie->prph_info = NULL;\n}\n"], "filenames": ["drivers/net/wireless/intel/iwlwifi/pcie/ctxt-info-gen3.c"], "buggy_code_start_loc": [110], "buggy_code_end_loc": [188], "fixing_code_start_loc": [110], "fixing_code_end_loc": [203], "type": "CWE-401", "message": "Multiple memory leaks in the iwl_pcie_ctxt_info_gen3_init() function in drivers/net/wireless/intel/iwlwifi/pcie/ctxt-info-gen3.c in the Linux kernel through 5.3.11 allow attackers to cause a denial of service (memory consumption) by triggering iwl_pcie_init_fw_sec() or dma_alloc_coherent() failures, aka CID-0f4f199443fa.", "other": {"cve": {"id": "CVE-2019-19059", "sourceIdentifier": "cve@mitre.org", "published": "2019-11-18T06:15:12.263", "lastModified": "2020-08-24T17:37:01.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Multiple memory leaks in the iwl_pcie_ctxt_info_gen3_init() function in drivers/net/wireless/intel/iwlwifi/pcie/ctxt-info-gen3.c in the Linux kernel through 5.3.11 allow attackers to cause a denial of service (memory consumption) by triggering iwl_pcie_init_fw_sec() or dma_alloc_coherent() failures, aka CID-0f4f199443fa."}, {"lang": "es", "value": "Una p\u00e9rdida de memoria en la funci\u00f3n adis_update_scan_mode() en el archivo drivers/net/wireless/intel/iwlwifi/pcie/ctxt-info-gen3.c en el kernel de Linux versiones anteriores a la versi\u00f3n  5.3.9, permite a atacantes causar una denegaci\u00f3n de servicio (consumo de memoria), tambi\u00e9n se conoce como CID-ab612b1daf41."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 4.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.0, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:M/Au:N/C:N/I:N/A:C", "accessVector": "LOCAL", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "COMPLETE", "baseScore": 4.7}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.4, "impactScore": 6.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-401"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionEndIncluding": "5.3.11", "matchCriteriaId": "EB2904AC-AD7A-498D-8619-CBB421E9165D"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:18.04:*:*:*:lts:*:*:*", "matchCriteriaId": "23A7C53F-B80F-4E6A-AFA9-58EEA84BE11D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:19.10:*:*:*:*:*:*:*", "matchCriteriaId": "A31C8344-3E02-4EB8-8BD8-4C84B7959624"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:30:*:*:*:*:*:*:*", "matchCriteriaId": "97A4B8DF-58DA-4AB6-A1F9-331B36409BA3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:31:*:*:*:*:*:*:*", "matchCriteriaId": "80F0FA5D-8D3B-4C0E-81E2-87998286AF33"}]}]}], "references": [{"url": "https://github.com/torvalds/linux/commit/0f4f199443faca715523b0659aa536251d8b978f", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/O3PSDE6PTOTVBK2YTKB2TFQP2SUBVSNF/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PY7LJMSPAGRIKABJPDKQDTXYW3L5RX2T/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://security.netapp.com/advisory/ntap-20191205-0001/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/4300-1/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/4301-1/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/torvalds/linux/commit/0f4f199443faca715523b0659aa536251d8b978f"}}