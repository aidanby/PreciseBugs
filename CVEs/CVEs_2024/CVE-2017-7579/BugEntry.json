{"buggy_code": ["<?php\n\n/**\n * The main FAQ class.\n *\n * PHP Version 5.5\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @category  phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @author    Georgi Korchev <korchev@yahoo.com>\n * @author    Adrianna Musiol <musiol@imageaccess.de>\n * @author    Peter Caesar <p.caesar@osmaco.de>\n * @copyright 2005-2017 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      http://www.phpmyfaq.de\n * @since     2005-12-20\n */\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    exit();\n}\n\n/*\n * SQL constants definitions\n */\ndefine('FAQ_SQL_ACTIVE_YES', 'yes');\ndefine('FAQ_SQL_ACTIVE_NO',  'no');\n\n/*\n * Query type definitions\n */\ndefine('FAQ_QUERY_TYPE_DEFAULT',      'faq_default');\ndefine('FAQ_QUERY_TYPE_APPROVAL',     'faq_approval');\ndefine('FAQ_QUERY_TYPE_EXPORT_PDF',   'faq_export_pdf');\ndefine('FAQ_QUERY_TYPE_EXPORT_XHTML', 'faq_export_xhtml');\ndefine('FAQ_QUERY_TYPE_EXPORT_XML',   'faq_export_xml');\ndefine('FAQ_QUERY_TYPE_RSS_LATEST',   'faq_rss_latest');\n\n/*\n * Sorting type definitions\n */\ndefine('FAQ_SORTING_TYPE_NONE', 0);\ndefine('FAQ_SORTING_TYPE_CATID_FAQID', 1);\ndefine('FAQ_SORTING_TYPE_FAQTITLE_FAQID', 2);\ndefine('FAQ_SORTING_TYPE_DATE_FAQID', 3);\ndefine('FAQ_SORTING_TYPE_FAQID', 4);\n\n/**\n * The main FAQ class - 3K LOC of funny things for phpMyFAQ.\n *\n * @category  phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @author    Georgi Korchev <korchev@yahoo.com>\n * @author    Adrianna Musiol <musiol@imageaccess.de>\n * @author    Peter Caesar <p.caesar@osmaco.de>\n * @copyright 2005-2017 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      http://www.phpmyfaq.de\n * @since     2005-12-20\n */\nclass PMF_Faq\n{\n    /**\n     * @var PMF_Configuration\n     */\n    private $_config;\n\n    /**\n     * Language strings.\n     *\n     * @var string\n     */\n    private $pmf_lang;\n\n    /**\n     * Plural form support.\n     *\n     * @var PMF_Language_Plurals\n     */\n    private $plr;\n\n    /**\n     * The current FAQ record.\n     *\n     * @var array\n     */\n    public $faqRecord = [];\n\n    /**\n     * All current FAQ records in an array.\n     *\n     * @var array\n     */\n    public $faqRecords = [];\n\n    /**\n     * Users.\n     *\n     * @var int\n     */\n    private $user = -1;\n\n    /**\n     * Groups.\n     *\n     * @var array\n     */\n    private $groups = array(-1);\n\n    /**\n     * Flag for Group support.\n     *\n     * @var bool\n     */\n    private $groupSupport = false;\n\n    /**\n     * Constructor.\n     *\n     * @param PMF_Configuration $config\n     *\n     * @return PMF_Faq\n     */\n    public function __construct(PMF_Configuration $config)\n    {\n        global $PMF_LANG, $plr;\n\n        $this->_config = $config;\n        $this->pmf_lang = $PMF_LANG;\n        $this->plr = $plr;\n\n        if ($this->_config->get('security.permLevel') == 'medium') {\n            $this->groupSupport = true;\n        }\n    }\n\n    //\n    //\n    // PUBLIC METHODS\n    //\n    //\n\n    /**\n     * @param int $userId\n     */\n    public function setUser($userId = -1)\n    {\n        $this->user = $userId;\n    }\n\n    /**\n     * @param array $groups\n     */\n    public function setGroups(Array $groups)\n    {\n        $this->groups = $groups;\n    }\n\n    /**\n     * This function returns all not expired records from one category.\n     *\n     * @param int    $category_id Category ID\n     * @param string $orderby     Order by\n     * @param string $sortby      Sorty by\n     *\n     * @return array\n     */\n    public function getAllRecordPerCategory($category_id, $orderby = 'id', $sortby = 'ASC')\n    {\n        global $sids;\n\n        $faqdata = [];\n\n        if ($orderby == 'visits') {\n            $currentTable = 'fv';\n        } else {\n            $currentTable = 'fd';\n        }\n\n        $now = date('YmdHis');\n        $query = sprintf(\"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fd.content AS record_content,\n                fd.updated AS updated,\n                fcr.category_id AS category_id,\n                fv.visits AS visits,\n                fd.created AS created\n            FROM\n                %sfaqdata AS fd\n            LEFT JOIN\n                %sfaqcategoryrelations AS fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqvisits AS fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND\n                fd.active = 'yes'\n            AND\n                fcr.category_id = %d\n            AND\n                fd.lang = '%s'\n                %s\n            ORDER BY\n                %s.%s %s\",\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $now,\n            $now,\n            $category_id,\n            $this->_config->getLanguage()->getLanguage(),\n            $this->queryPermission($this->groupSupport),\n            $currentTable,\n            $this->_config->getDb()->escape($orderby),\n            $this->_config->getDb()->escape($sortby)\n        );\n\n        $result = $this->_config->getDb()->query($query);\n        $num = $this->_config->getDb()->numRows($result);\n\n        if ($num > 0) {\n            $faqHelper = new PMF_Helper_Faq($this->_config);\n            while (($row = $this->_config->getDb()->fetchObject($result))) {\n                if (empty($row->visits)) {\n                    $visits = 0;\n                } else {\n                    $visits = $row->visits;\n                }\n\n                $url = sprintf(\n                    '%sindex.php?%saction=artikel&cat=%d&id=%d&artlang=%s',\n                    $this->_config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new PMF_Link($url, $this->_config);\n                $oLink->itemTitle = $oLink->text = $oLink->tooltip = $row->thema;\n\n                $faqdata[] = array(\n                    'record_id' => $row->id,\n                    'record_lang' => $row->lang,\n                    'category_id' => $row->category_id,\n                    'record_title' => $row->thema,\n                    'record_preview' => $faqHelper->renderAnswerPreview($row->record_content, 25),\n                    'record_link' => $oLink->toString(),\n                    'record_updated' => $row->updated,\n                    'visits' => $visits,\n                    'record_created' => $row->created,\n                );\n            }\n        } else {\n            return $faqdata;\n        }\n\n        return $faqdata;\n    }\n\n    /**\n     * This function returns all not expired records from one category.\n     *\n     * @param int    $categoryId Category ID\n     * @param string $orderby    Order by\n     * @param string $sortby     Sorty by\n     *\n     * @return string\n     */\n    public function showAllRecords($categoryId, $orderby = 'id', $sortby = 'ASC')\n    {\n        global $sids;\n\n        $numPerPage = $this->_config->get('records.numberOfRecordsPerPage');\n        $page = PMF_Filter::filterInput(INPUT_GET, 'seite', FILTER_VALIDATE_INT, 1);\n        $output = '';\n        $title = '';\n\n        if ($orderby == 'visits') {\n            $currentTable = 'fv';\n        } else {\n            $currentTable = 'fd';\n        }\n\n        // If random FAQs are activated, we don't need an order\n        if (true === $this->_config->get('records.randomSort')) {\n            $order = '';\n        } else {\n            $order = sprintf(\n                'ORDER BY fd.sticky DESC, %s.%s %s',\n                $currentTable,\n                $this->_config->getDb()->escape($orderby),\n                $this->_config->getDb()->escape($sortby)\n            );\n        }\n\n        $now = date('YmdHis');\n        $query = sprintf(\"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.sticky AS sticky,\n                fd.thema AS thema,\n                fcr.category_id AS category_id,\n                fv.visits AS visits\n            FROM\n                %sfaqdata AS fd\n            LEFT JOIN\n                %sfaqcategoryrelations AS fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqvisits AS fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND\n                fd.active = 'yes'\n            AND\n                fcr.category_id = %d\n            AND\n                fd.lang = '%s'\n            %s\n            %s\",\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $now,\n            $now,\n            $categoryId,\n            $this->_config->getLanguage()->getLanguage(),\n            $this->queryPermission($this->groupSupport),\n            $order\n        );\n\n        $result = $this->_config->getDb()->query($query);\n        $num = $this->_config->getDb()->numRows($result);\n        $pages = (int) ceil($num / $numPerPage);\n\n        if ($page == 1) {\n            $first = 0;\n        } else {\n            $first = $page * $numPerPage - $numPerPage;\n        }\n\n        if ($num > 0) {\n            if ($pages > 1) {\n                $output .= sprintf('<p><strong>%s %s %s</strong></p>',\n                    $this->pmf_lang['msgPage'].$page,\n                    $this->pmf_lang['msgVoteFrom'],\n                    $pages.$this->pmf_lang['msgPages']);\n            }\n            $output .= '<ul class=\"phpmyfaq_ul\">';\n\n            $counter = 0;\n            $displayedCounter = 0;\n            $renderedItems = [];\n            while (($row = $this->_config->getDb()->fetchObject($result)) && $displayedCounter < $numPerPage) {\n                ++$counter;\n                if ($counter <= $first) {\n                    continue;\n                }\n                ++$displayedCounter;\n\n                if (empty($row->visits)) {\n                    $visits = 0;\n                } else {\n                    $visits = $row->visits;\n                }\n\n                $title = $row->thema;\n                $url = sprintf(\n                    '%s?%saction=artikel&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    PMF_Link::getSystemRelativeUri(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n\n                $oLink = new PMF_Link($url, $this->_config);\n                $oLink->itemTitle = $oLink->text = $oLink->tooltip = $title;\n\n                // If random FAQs are activated, we don't need sticky FAQs\n                if (true === $this->_config->get('records.randomSort')) {\n                    $row->sticky = 0;\n                }\n\n                $renderedItems[$row->id] = sprintf(\n                    '<li%s>%s<span id=\"viewsPerRecord\"><br /><small>(%s)</small></span></li>',\n                    ($row->sticky == 1) ? ' class=\"sticky-faqs\"' : '',\n                    $oLink->toHtmlAnchor(),\n                    $this->plr->GetMsg('plmsgViews', $visits)\n                );\n            }\n\n            // If random FAQs are activated, shuffle the FAQs :-)\n            if (true === $this->_config->get('records.randomSort')) {\n                shuffle($renderedItems);\n            }\n\n            $output .= implode(\"\\n\", $renderedItems);\n            $output .= '</ul><span class=\"totalFaqRecords hide\">'.$num.'</span>';\n        } else {\n            return false;\n        }\n\n        if ($pages > 1) {\n            // Set rewrite URL, if needed\n            if ($this->_config->get('main.enableRewriteRules')) {\n                $link = new PMF_Link(PMF_Link::getSystemRelativeUri('index.php'), $this->_config);\n                $useRewrite = true;\n                $rewriteUrl = sprintf(\n                    '%scategory/%d/%%d/%s.html',\n                    PMF_Link::getSystemRelativeUri('index.php'),\n                    $categoryId,\n                    $link->getSEOItemTitle($title)\n                );\n            } else {\n                $useRewrite = false;\n                $rewriteUrl = '';\n            }\n            $baseUrl = sprintf(\n                '%s?%saction=show&amp;cat=%d&amp;seite=%d',\n                PMF_Link::getSystemRelativeUri(),\n                (empty($sids) ? '' : $sids),\n                $categoryId,\n                $page\n            );\n\n            $options = array(\n                'baseUrl' => $baseUrl,\n                'total' => $num,\n                'perPage' => $this->_config->get('records.numberOfRecordsPerPage'),\n                'useRewrite' => $useRewrite,\n                'rewriteUrl' => $rewriteUrl,\n                'pageParamName' => 'seite',\n            );\n\n            $pagination = new PMF_Pagination($this->_config, $options);\n            $output    .= $pagination->render();\n        }\n\n        return $output;\n    }\n\n    /**\n     * This function returns all not expired records from the given record ids.\n     *\n     * @param array  $record_ids Array of record ids\n     * @param string $orderby    Order by\n     * @param string $sortby     Sort by\n     *\n     * @return string\n     */\n    public function showAllRecordsByIds(Array $record_ids, $orderby = 'fd.id', $sortby = 'ASC')\n    {\n        global $sids;\n\n        $records = implode(', ', $record_ids);\n        $page = PMF_Filter::filterInput(INPUT_GET, 'seite', FILTER_VALIDATE_INT, 1);\n        $tagging_id = PMF_Filter::filterInput(INPUT_GET, 'tagging_id', FILTER_VALIDATE_INT);\n        $output = '';\n\n        $now = date('YmdHis');\n        $query = sprintf(\"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fcr.category_id AS category_id,\n                fv.visits AS visits\n            FROM\n                %sfaqdata AS fd\n            LEFT JOIN\n                %sfaqcategoryrelations AS fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqvisits AS fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND\n                fd.active = 'yes'\n            AND\n                fd.id IN (%s)\n            AND\n                fd.lang = '%s'\n                %s\n            ORDER BY\n                %s %s\",\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $now,\n            $now,\n            $records,\n            $this->_config->getLanguage()->getLanguage(),\n            $this->queryPermission($this->groupSupport),\n            $this->_config->getDb()->escape($orderby),\n            $this->_config->getDb()->escape($sortby));\n\n        $result = $this->_config->getDb()->query($query);\n\n        $num = $this->_config->getDb()->numRows($result);\n        $pages = ceil($num / $this->_config->get('records.numberOfRecordsPerPage'));\n\n        if ($page == 1) {\n            $first = 0;\n        } else {\n            $first = ($page * $this->_config->get('records.numberOfRecordsPerPage')) - $this->_config->get('records.numberOfRecordsPerPage');\n        }\n\n        if ($num > 0) {\n            if ($pages > 1) {\n                $output .= sprintf('<p><strong>%s %s %s</strong></p>',\n                    $this->pmf_lang['msgPage'].$page,\n                    $this->pmf_lang['msgVoteFrom'],\n                    $pages.$this->pmf_lang['msgPages']);\n            }\n            $output .= '<ul class=\"phpmyfaq_ul\">';\n            $counter = 0;\n            $displayedCounter = 0;\n\n            $lastFaqId = 0;\n            while (($row = $this->_config->getDb()->fetchObject($result)) && $displayedCounter < $this->_config->get('records.numberOfRecordsPerPage')) {\n                ++$counter;\n                if ($counter <= $first) {\n                    continue;\n                }\n                ++$displayedCounter;\n\n                if ($lastFaqId == $row->id) {\n                    continue; // Don't show multiple FAQs\n                }\n\n                if (empty($row->visits)) {\n                    $visits = 0;\n                } else {\n                    $visits = $row->visits;\n                }\n\n                $title = $row->thema;\n                $url = sprintf(\n                    '%s?%saction=artikel&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    PMF_Link::getSystemRelativeUri(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new PMF_Link($url, $this->_config);\n                $oLink->itemTitle = $row->thema;\n                $oLink->text = $title;\n                $oLink->tooltip = $title;\n                $listItem = sprintf(\n                    '<li>%s<br /><small>(%s)</small></li>',\n                    $oLink->toHtmlAnchor(),\n                    $this->plr->GetMsg('plmsgViews', $visits)\n                );\n\n                $output .= $listItem;\n\n                $lastFaqId = $row->id;\n            }\n            $output .= '</ul><span id=\"totFaqRecords\" style=\"display: none;\">'.$num.'</span>';\n        } else {\n            return false;\n        }\n\n        if ($num > $this->_config->get('records.numberOfRecordsPerPage')) {\n            $output .= '<p class=\"text-center\"><strong>';\n            if (!isset($page)) {\n                $page = 1;\n            }\n            $vor = $page - 1;\n            $next = $page + 1;\n            if ($vor != 0) {\n                $url = $sids.'&amp;action=search&amp;tagging_id='.$tagging_id.'&amp;seite='.$vor;\n                $oLink = new PMF_Link(PMF_Link::getSystemRelativeUri().'?'.$url, $this->_config);\n                $oLink->itemTitle = 'tag';\n                $oLink->text = $this->pmf_lang['msgPrevious'];\n                $oLink->tooltip = $this->pmf_lang['msgPrevious'];\n                $output          .= '[ '.$oLink->toHtmlAnchor().' ]';\n            }\n            $output .= ' ';\n            if ($next <= $pages) {\n                $url = $sids.'&amp;action=search&amp;tagging_id='.$tagging_id.'&amp;seite='.$next;\n                $oLink = new PMF_Link(PMF_Link::getSystemRelativeUri().'?'.$url, $this->_config);\n                $oLink->itemTitle = 'tag';\n                $oLink->text = $this->pmf_lang['msgNext'];\n                $oLink->tooltip = $this->pmf_lang['msgNext'];\n                $output          .= '[ '.$oLink->toHtmlAnchor().' ]';\n            }\n            $output .= '</strong></p>';\n        }\n\n        return $output;\n    }\n\n    /**\n     * Returns an array with all data from a FAQ record.\n     *\n     * @param int  $faqId         FAQ ID\n     * @param int  $faqRevisionId Revision ID\n     * @param bool $isAdmin       Must be true if it is called by an admin/author context\n     */\n    public function getRecord($faqId, $faqRevisionId = null, $isAdmin = false)\n    {\n        global $PMF_LANG;\n\n        $currentLanguage = $this->_config->getLanguage()->getLanguage();\n        $defaultLanguage = $this->_config->getDefaultLanguage();\n\n        $result = $this->getRecordResult($faqId, $currentLanguage, $faqRevisionId, $isAdmin);\n\n        if (0 === $this->_config->getDb()->numRows($result)) {\n            $result = $this->getRecordResult($faqId, $defaultLanguage, $faqRevisionId, $isAdmin);\n        }\n\n        if ($row = $this->_config->getDb()->fetchObject($result)) {\n            $question = nl2br($row->thema);\n            $answer = $row->content;\n            $active = ('yes' === $row->active);\n            $expired = (date('YmdHis') > $row->date_end);\n\n            if (!$isAdmin) {\n                if (!$active) {\n                    $answer = $this->pmf_lang['err_inactiveArticle'];\n                }\n                if ($expired) {\n                    $answer = $this->pmf_lang['err_expiredArticle'];\n                }\n            }\n\n            $this->faqRecord = [\n                'id' => $row->id,\n                'lang' => $row->lang,\n                'solution_id' => $row->solution_id,\n                'revision_id' => $row->revision_id,\n                'active' => $row->active,\n                'sticky' => $row->sticky,\n                'keywords' => $row->keywords,\n                'title' => $question,\n                'content' => $answer,\n                'author' => $row->author,\n                'email' => $row->email,\n                'comment' => $row->comment,\n                'date' => PMF_Date::createIsoDate($row->updated),\n                'dateStart' => $row->date_start,\n                'dateEnd' => $row->date_end,\n                'linkState' => $row->links_state,\n                'linkCheckDate' => $row->links_check_date,\n                'notes' => $row->notes,\n                'created' => $row->created,\n            ];\n        } else {\n            $this->faqRecord = [\n                'id' => $faqId,\n                'lang' => $currentLanguage,\n                'solution_id' => 42,\n                'revision_id' => $faqRevisionId,\n                'active' => 'no',\n                'sticky' => 0,\n                'keywords' => '',\n                'title' => '',\n                'content' => $PMF_LANG['msgAccessDenied'],\n                'author' => '',\n                'email' => '',\n                'comment' => '',\n                'date' => PMF_Date::createIsoDate(date('YmdHis')),\n                'dateStart' => '',\n                'dateEnd' => '',\n                'linkState' => '',\n                'linkCheckDate' => '',\n                'notes' => '',\n                'created' => date('c'),\n            ];\n        }\n    }\n\n    /**\n     * Executes a query to retrieve a single FAQ.\n     *\n     * @param int    $faqId\n     * @param string $faqLanguage\n     * @param int    $faqRevisionId\n     * @param bool   $isAdmin\n     *\n     * @return mixed\n     */\n    public function getRecordResult($faqId, $faqLanguage, $faqRevisionId = null, $isAdmin = false)\n    {\n        $query = sprintf(\n            \"SELECT\n                 id, lang, solution_id, revision_id, active, sticky, keywords,\n                 thema, content, author, email, comment, updated, links_state,\n                 links_check_date, date_start, date_end, created, notes\n            FROM\n                %s%s fd\n            LEFT JOIN\n                %sfaqdata_group fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.id = %d\n            %s\n            AND\n                fd.lang = '%s'\n                %s\",\n            PMF_Db::getTablePrefix(),\n            isset($faqRevisionId) ? 'faqdata_revisions' : 'faqdata',\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $faqId,\n            isset($faqRevisionId) ? 'AND revision_id = '.$faqRevisionId : '',\n            $faqLanguage,\n            ($isAdmin) ? 'AND 1=1' : $this->queryPermission($this->groupSupport)\n        );\n\n        return $this->_config->getDb()->query($query);\n    }\n\n    /**\n     * Return records from given IDs\n     *\n     * @param array $faqIds\n     *\n     * @return array\n     */\n    public function getRecordsByIds(Array $faqIds)\n    {\n        $faqRecords = [];\n\n        $query = sprintf(\n            \"SELECT\n                 fd.id AS id,\n                 fd.lang AS lang,\n                 fd.thema AS question,\n                 fd.content AS answer,\n                 fd.updated AS updated,\n                 fd.created AS created,\n                 fcr.category_id AS category_id,\n                 fv.visits AS visits\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqdata_group fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqvisits AS fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_user fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.id IN (%s)\n            AND\n                fd.lang = '%s'\n                %s\",\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            implode(',', $faqIds),\n            $this->_config->getLanguage()->getLanguage(),\n            $this->queryPermission($this->groupSupport)\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        $faqHelper = new PMF_Helper_Faq($this->_config);\n        while ($row = $this->_config->getDb()->fetchObject($result)) {\n            if (empty($row->visits)) {\n                $visits = 0;\n            } else {\n                $visits = $row->visits;\n            }\n\n            $url = sprintf(\n                '%sindex.php?action=artikel&cat=%d&id=%d&artlang=%s',\n                $this->_config->getDefaultUrl(),\n                $row->category_id,\n                $row->id,\n                $row->lang\n            );\n            $oLink = new PMF_Link($url, $this->_config);\n            $oLink->itemTitle = $oLink->text = $oLink->tooltip = $row->question;\n\n            $faqRecords[] = [\n                'record_id' => (int)$row->id,\n                'record_lang' => $row->lang,\n                'category_id' => (int)$row->category_id,\n                'record_title' => $row->question,\n                'record_preview' => $faqHelper->renderAnswerPreview($row->answer, 25),\n                'record_link' => $oLink->toString(),\n                'record_updated' => PMF_Date::createIsoDate($row->updated).':00',\n                'visits' => (int)$visits,\n                'record_created' => $row->created\n            ];\n        }\n\n        return $faqRecords;\n    }\n\n    /**\n     * Adds a new record.\n     *\n     * @param array $data      Array of FAQ data\n     * @param bool  $newRecord Do not create a new ID if false\n     *\n     * @return int\n     */\n    public function addRecord(Array $data, $newRecord = true)\n    {\n        if ($newRecord) {\n            $recordId = $this->_config->getDb()->nextId(PMF_Db::getTablePrefix().'faqdata', 'id');\n        } else {\n            $recordId = $data['id'];\n        }\n\n        // Add new entry\n        $query = sprintf(\"\n            INSERT INTO\n                %sfaqdata\n            VALUES\n                (%d, '%s', %d, %d, '%s', %d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %d, '%s', '%s', '%s', '%s')\",\n            PMF_Db::getTablePrefix(),\n            $recordId,\n            $data['lang'],\n            $this->getSolutionId(),\n            0,\n            $data['active'],\n            $data['sticky'],\n            $this->_config->getDb()->escape($data['keywords']),\n            $this->_config->getDb()->escape($data['thema']),\n            $this->_config->getDb()->escape($data['content']),\n            $this->_config->getDb()->escape($data['author']),\n            $data['email'],\n            $data['comment'],\n            $data['date'],\n            $data['linkState'],\n            $data['linkDateCheck'],\n            $data['dateStart'],\n            $data['dateEnd'],\n            date('Y-m-d H:i:s'),\n            $data['notes']\n        );\n\n        $this->_config->getDb()->query($query);\n\n        return $recordId;\n    }\n\n    /**\n     * Updates a record.\n     *\n     * @param array $data Array of FAQ data\n     *\n     * @return bool\n     */\n    public function updateRecord(Array $data)\n    {\n        // Update entry\n        $query = sprintf(\"\n            UPDATE\n                %sfaqdata\n            SET\n                revision_id = %d,\n                active = '%s',\n                sticky = %d,\n                keywords = '%s',\n                thema = '%s',\n                content = '%s',\n                author = '%s',\n                email = '%s',\n                comment = '%s',\n                updated = '%s',\n                links_state = '%s',\n                links_check_date = %d,\n                date_start = '%s',\n                date_end = '%s',\n                notes = '%s'\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $data['revision_id'],\n            $data['active'],\n            $data['sticky'],\n            $this->_config->getDb()->escape($data['keywords']),\n            $this->_config->getDb()->escape($data['thema']),\n            $this->_config->getDb()->escape($data['content']),\n            $this->_config->getDb()->escape($data['author']),\n            $data['email'],\n            $data['comment'],\n            $data['date'],\n            $data['linkState'],\n            $data['linkDateCheck'],\n            $data['dateStart'],\n            $data['dateEnd'],\n            $data['notes'],\n            $data['id'],\n            $data['lang']\n        );\n\n        $this->_config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Deletes a record and all the dependencies.\n     *\n     * @param int    $recordId   Record id\n     * @param string $recordLang Record language\n     *\n     * @return bool\n     */\n    public function deleteRecord($recordId, $recordLang)\n    {\n        $solutionId = $this->getSolutionIdFromId($recordId, $recordLang);\n\n        $queries = array(\n            sprintf(\n                \"DELETE FROM %sfaqchanges WHERE beitrag = %d AND lang = '%s'\",\n                PMF_Db::getTablePrefix(),\n                $recordId,\n                $recordLang\n            ),\n            sprintf(\n                \"DELETE FROM %sfaqcategoryrelations WHERE record_id = %d AND record_lang = '%s'\",\n                PMF_Db::getTablePrefix(),\n                $recordId,\n                $recordLang\n            ),\n            sprintf(\n                \"DELETE FROM %sfaqdata WHERE id = %d AND lang = '%s'\",\n                PMF_Db::getTablePrefix(),\n                $recordId,\n                $recordLang\n            ),\n            sprintf(\n                \"DELETE FROM %sfaqdata_revisions WHERE id = %d AND lang = '%s'\",\n                PMF_Db::getTablePrefix(),\n                $recordId,\n                $recordLang\n            ),\n            sprintf(\n                \"DELETE FROM %sfaqvisits WHERE id = %d AND lang = '%s'\",\n                PMF_Db::getTablePrefix(),\n                $recordId,\n                $recordLang\n            ),\n            sprintf(\n                'DELETE FROM %sfaqdata_user WHERE record_id = %d',\n                PMF_Db::getTablePrefix(),\n                $recordId,\n                $recordLang\n            ),\n            sprintf(\n                'DELETE FROM %sfaqdata_group WHERE record_id = %d',\n                PMF_Db::getTablePrefix(),\n                $recordId,\n                $recordLang\n            ),\n            sprintf(\n                'DELETE FROM %sfaqdata_tags WHERE record_id = %d',\n                PMF_Db::getTablePrefix(),\n                $recordId\n            ),\n            sprintf(\n                'DELETE FROM %sfaqdata_tags WHERE %sfaqdata_tags.record_id NOT IN (SELECT %sfaqdata.id FROM %sfaqdata)',\n                PMF_Db::getTablePrefix(),\n                PMF_Db::getTablePrefix(),\n                PMF_Db::getTablePrefix(),\n                PMF_Db::getTablePrefix()\n            ),\n            sprintf(\n                'DELETE FROM %sfaqcomments WHERE id = %d',\n                PMF_Db::getTablePrefix(),\n                $recordId\n            ),\n            sprintf(\n                'DELETE FROM %sfaqvoting WHERE artikel = %d',\n                PMF_Db::getTablePrefix(),\n                $recordId\n            ),\n        );\n\n        foreach ($queries as $query) {\n            $this->_config->getDb()->query($query);\n        }\n\n        // Delete possible attachments\n        $attId = PMF_Attachment_Factory::fetchByRecordId($this->_config, $recordId);\n        $attachment = PMF_Attachment_Factory::create($attId);\n        $attachment->delete();\n\n        // Delete possible Elasticsearch documents\n        if ($this->_config->get('search.enableElasticsearch')) {\n            $esInstance = new PMF_Instance_Elasticsearch($this->_config);\n            $esInstance->delete($solutionId);\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks if a record is already translated.\n     *\n     * @param int    $record_id   Record id\n     * @param string $record_lang Record language\n     *\n     * @return bool\n     */\n    public function isAlreadyTranslated($record_id, $record_lang)\n    {\n        $query = sprintf(\"\n            SELECT\n                id, lang\n            FROM\n                %sfaqdata\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $record_id,\n            $record_lang);\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($this->_config->getDb()->numRows($result)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks, if comments are disabled for the FAQ record.\n     *\n     * @param int    $record_id   Id of FAQ or news entry\n     * @param string $record_lang Language\n     * @param string $record_type Type of comment: faq or news\n     *\n     * @return bool true, if comments are disabled\n     */\n    public function commentDisabled($record_id, $record_lang, $record_type = 'faq')\n    {\n        if ('news' == $record_type) {\n            $table = 'faqnews';\n        } else {\n            $table = 'faqdata';\n        }\n\n        $query = sprintf(\"\n            SELECT\n                comment\n            FROM\n                %s%s\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $table,\n            $record_id,\n            $record_lang\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($row = $this->_config->getDb()->fetchObject($result)) {\n            return ($row->comment === 'y') ? false : true;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Adds new category relations to a record.\n     *\n     * @param array  $categories Array of categories\n     * @param int    $record_id  Record id\n     * @param string $language   Language\n     *\n     * @return int\n     */\n    public function addCategoryRelations(Array $categories, $record_id, $language)\n    {\n        if (!is_array($categories)) {\n            return false;\n        }\n\n        foreach ($categories as $_category) {\n            $this->_config->getDb()->query(sprintf(\n                \"INSERT INTO\n                    %sfaqcategoryrelations\n                VALUES\n                    (%d, '%s', %d, '%s')\",\n                PMF_Db::getTablePrefix(),\n                $_category,\n                $language,\n                $record_id,\n                $language));\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds new category relation to a record.\n     *\n     * @param mixed  $category  Category or array of categories\n     * @param int    $record_id Record id\n     * @param string $language  Language\n     *\n     * @return bool\n     */\n    public function addCategoryRelation($category, $record_id, $language)\n    {\n        // Just a fallback when (wrong case) $category is an array\n        if (is_array($category)) {\n            $this->addCategoryRelations($category, $record_id, $language);\n        }\n        $categories[] = $category;\n\n        return $this->addCategoryRelations($categories, $record_id, $language);\n    }\n\n    /**\n     * Deletes category relations to a record.\n     *\n     * @param int    $record_id   Record id\n     * @param string $record_lang Language\n     *\n     * @return bool\n     */\n    public function deleteCategoryRelations($record_id, $record_lang)\n    {\n        $query = sprintf(\"\n            DELETE FROM\n                %sfaqcategoryrelations\n            WHERE\n                record_id = %d\n            AND\n                record_lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $record_id,\n            $record_lang);\n        $this->_config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Returns an array with all data from a FAQ record.\n     *\n     * @param int $solutionId Solution ID\n     */\n    public function getRecordBySolutionId($solutionId)\n    {\n        $query = sprintf(\n            'SELECT\n                *\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqdata_group fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.solution_id = %d\n                %s',\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $solutionId,\n            $this->queryPermission($this->groupSupport)\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($row = $this->_config->getDb()->fetchObject($result)) {\n            $question = nl2br($row->thema);\n            $content = $row->content;\n            $active = ('yes' == $row->active);\n            $expired = (date('YmdHis') > $row->date_end);\n\n            if (!$active) {\n                $content = $this->pmf_lang['err_inactiveArticle'];\n            }\n            if ($expired) {\n                $content = $this->pmf_lang['err_expiredArticle'];\n            }\n\n            $this->faqRecord = array(\n                'id' => $row->id,\n                'lang' => $row->lang,\n                'solution_id' => $row->solution_id,\n                'revision_id' => $row->revision_id,\n                'active' => $row->active,\n                'sticky' => $row->sticky,\n                'keywords' => $row->keywords,\n                'title' => $question,\n                'content' => $content,\n                'author' => $row->author,\n                'email' => $row->email,\n                'comment' => $row->comment,\n                'date' => PMF_Date::createIsoDate($row->updated),\n                'dateStart' => $row->date_start,\n                'dateEnd' => $row->date_end,\n                'linkState' => $row->links_state,\n                'linkCheckDate' => $row->links_check_date,\n                'notes' => $row->notes\n            );\n        }\n    }\n\n    /**\n     * Gets the record ID from a given solution ID.\n     *\n     * @param int $solutionId Solution ID\n     *\n     * @return array\n     */\n    public function getIdFromSolutionId($solutionId)\n    {\n        $query = sprintf('\n            SELECT\n                fd.id,\n                fd.lang,\n                fd.thema AS question,\n                fd.content, \n                fcr.category_id AS category_id\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            WHERE\n                fd.solution_id = %d',\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $solutionId\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($row = $this->_config->getDb()->fetchObject($result)) {\n            return [\n                'id' => $row->id,\n                'lang' => $row->lang,\n                'question' => $row->question,\n                'content' => $row->content,\n                'category_id' => $row->category_id\n            ];\n        }\n\n        return [];\n    }\n\n    /**\n     * Returns the solution ID from a given ID and language\n     *\n     * @param integer $faqId\n     * @param string $faqLang\n     *\n     * @return int\n     */\n    public function getSolutionIdFromId($faqId, $faqLang)\n    {\n        $query = sprintf(\"\n            SELECT\n                solution_id\n            FROM\n                %sfaqdata\n            WHERE\n                id = %d\n                AND\n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            (int) $faqId,\n            $this->_config->getDb()->escape($faqLang)\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($row = $this->_config->getDb()->fetchObject($result)) {\n            return $row->solution_id;\n        }\n\n        return $this->getSolutionId();\n    }\n\n    /**\n     * Gets the latest solution id for a FAQ record.\n     *\n     * @return int\n     */\n    public function getSolutionId()\n    {\n        $latestId = 0;\n\n        $query = sprintf('\n            SELECT\n                MAX(solution_id) AS solution_id\n            FROM\n                %sfaqdata',\n            PMF_Db::getTablePrefix()\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($result && $row = $this->_config->getDb()->fetchObject($result)) {\n            $latestId = $row->solution_id;\n        }\n\n        if ($latestId < PMF_SOLUTION_ID_START_VALUE) {\n            $nextSolutionId = PMF_SOLUTION_ID_START_VALUE;\n        } else {\n            $nextSolutionId = $latestId + PMF_SOLUTION_ID_INCREMENT_VALUE;\n        }\n\n        return $nextSolutionId;\n    }\n\n    /**\n     * Returns an array with all data from all FAQ records.\n     *\n     * @param int    $sortType  Sorting type\n     * @param array  $condition Condition\n     * @param string $sortOrder Sorting order\n     */\n    public function getAllRecords($sortType = FAQ_SORTING_TYPE_CATID_FAQID, Array $condition = null, $sortOrder = 'ASC')\n    {\n        $where = '';\n        if (!is_null($condition)) {\n            $num = count($condition);\n            $where = 'WHERE ';\n            foreach ($condition as $field => $data) {\n                --$num;\n                $where .= $field;\n                if (is_array($data)) {\n                    $where .= ' IN (';\n                    $separator = '';\n                    foreach ($data as $value) {\n                        $where .= $separator.\"'\".$this->_config->getDb()->escape($value).\"'\";\n                        $separator = ', ';\n                    }\n                    $where .= ')';\n                } else {\n                    $where .= \" = '\".$this->_config->getDb()->escape($data).\"'\";\n                }\n                if ($num > 0) {\n                    $where .= ' AND ';\n                }\n            }\n        }\n\n        switch ($sortType) {\n\n            case FAQ_SORTING_TYPE_CATID_FAQID:\n                $orderBy = sprintf('\n            ORDER BY\n                fcr.category_id,\n                fd.id %s',\n                    $sortOrder);\n                break;\n\n            case FAQ_SORTING_TYPE_FAQID:\n                $orderBy = sprintf('\n            ORDER BY\n                fd.id %s',\n                    $sortOrder);\n                break;\n\n            case FAQ_SORTING_TYPE_FAQTITLE_FAQID:\n                $orderBy = sprintf('\n            ORDER BY\n                fcr.category_id,\n                fd.thema %s',\n                    $sortOrder);\n                break;\n\n            case FAQ_SORTING_TYPE_DATE_FAQID:\n                $orderBy = sprintf('\n            ORDER BY\n                fcr.category_id,\n                fd.updated %s',\n                    $sortOrder);\n                break;\n\n            default:\n                $orderBy = '';\n                break;\n        }\n\n        $query = sprintf('\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fcr.category_id AS category_id,\n                fd.solution_id AS solution_id,\n                fd.revision_id AS revision_id,\n                fd.active AS active,\n                fd.sticky AS sticky,\n                fd.keywords AS keywords,\n                fd.thema AS thema,\n                fd.content AS content,\n                fd.author AS author,\n                fd.email AS email,\n                fd.comment AS comment,\n                fd.updated AS updated,\n                fd.links_state AS links_state,\n                fd.links_check_date AS links_check_date,\n                fd.date_start AS date_start,\n                fd.date_end AS date_end,\n                fd.sticky AS sticky,\n                fd.created AS created,\n                fd.notes AS notes\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            %s\n            %s\n            %s',\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $where,\n            $this->queryPermission($this->groupSupport),\n            $orderBy\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        while ($row = $this->_config->getDb()->fetchObject($result)) {\n            $content = $row->content;\n            $active = ('yes' == $row->active);\n            $expired = (date('YmdHis') > $row->date_end);\n\n            if (!$active) {\n                $content = $this->pmf_lang['err_inactiveArticle'];\n            }\n            if ($expired) {\n                $content = $this->pmf_lang['err_expiredArticle'];\n            }\n\n            $this->faqRecords[] = [\n                'id' => $row->id,\n                'category_id' => $row->category_id,\n                'lang' => $row->lang,\n                'solution_id' => $row->solution_id,\n                'revision_id' => $row->revision_id,\n                'active' => $row->active,\n                'sticky' => $row->sticky,\n                'keywords' => $row->keywords,\n                'title' => $row->thema,\n                'content' => $content,\n                'author' => $row->author,\n                'email' => $row->email,\n                'comment' => $row->comment,\n                'updated' => PMF_Date::createIsoDate($row->updated, 'Y-m-d H:i:s'),\n                'dateStart' => $row->date_start,\n                'dateEnd' => $row->date_end,\n                'created' => $row->created,\n                'notes' => $row->notes\n            ];\n        }\n    }\n\n    /**\n     * Returns the FAQ record title from the ID and language.\n     *\n     * @param int $id Record id\n     *\n     * @return string\n     */\n    public function getRecordTitle($id)\n    {\n        if (isset($this->faqRecord['id']) && ($this->faqRecord['id'] == $id)) {\n            return $this->faqRecord['title'];\n        }\n\n        $question = '';\n\n        $query = sprintf(\n            \"SELECT\n                thema AS question\n            FROM\n                %sfaqdata\n            WHERE\n                id = %d AND lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $id,\n            $this->_config->getLanguage()->getLanguage()\n            );\n        $result = $this->_config->getDb()->query($query);\n\n        if ($this->_config->getDb()->numRows($result) > 0) {\n            while ($row = $this->_config->getDb()->fetchObject($result)) {\n                $question = $row->question;\n            }\n        } else {\n            $question = $this->pmf_lang['no_cats'];\n        }\n\n        return $question;\n    }\n\n    /**\n     * Gets all revisions from a given record ID.\n     *\n     * @param int    $recordId   Record id\n     * @param string $recordLang Record language\n     *\n     * @return array\n     */\n    public function getRevisionIds($recordId, $recordLang)\n    {\n        $revisionData = [];\n\n        $query = sprintf(\"\n            SELECT\n                revision_id, updated, author\n            FROM\n                %sfaqdata_revisions\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\n            ORDER BY\n                revision_id\",\n            PMF_Db::getTablePrefix(),\n            $recordId,\n            $recordLang\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($this->_config->getDb()->numRows($result) > 0) {\n            while ($row = $this->_config->getDb()->fetchObject($result)) {\n                $revisionData[] = [\n                    'revision_id' => $row->revision_id,\n                    'updated' => $row->updated,\n                    'author' => $row->author,\n                ];\n            }\n        }\n\n        return $revisionData;\n    }\n\n    /**\n     * Adds a new revision from a given record ID.\n     *\n     * @param int    $record_id   Record id\n     * @param string $record_lang Record language\n     *\n     * @return array\n     */\n    public function addNewRevision($record_id, $record_lang)\n    {\n        $query = sprintf(\"\n            INSERT INTO\n                %sfaqdata_revisions\n            SELECT * FROM\n                %sfaqdata\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $record_id,\n            $record_lang);\n        $this->_config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Returns the keywords of a FAQ record from the ID and language.\n     *\n     * @param int $id record id\n     *\n     * @return string\n     */\n    public function getRecordKeywords($id)\n    {\n        if (isset($this->faqRecord['id']) && ($this->faqRecord['id'] == $id)) {\n            return $this->faqRecord['keywords'];\n        }\n\n        $query = sprintf(\n            \"SELECT\n                keywords\n            FROM\n                %sfaqdata\n            WHERE id = %d AND lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $id,\n            $this->_config->getLanguage()->getLanguage());\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($this->_config->getDb()->numRows($result) > 0) {\n            $row = $this->_config->getDb()->fetchObject($result);\n\n            return PMF_String::htmlspecialchars($row->keywords, ENT_QUOTES, 'utf-8');\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * Returns a answer preview of the FAQ record.\n     *\n     * @param int $recordId  FAQ record ID\n     * @param int $wordCount Number of words, default: 12\n     *\n     * @return string\n     */\n    public function getRecordPreview($recordId, $wordCount = 12)\n    {\n        if (isset($this->faqRecord['id']) && ((int)$this->faqRecord['id'] === (int)$recordId)) {\n            $answerPreview = $this->faqRecord['content'];\n\n            return PMF_Utils::makeShorterText($answerPreview, $wordCount);\n        }\n\n        $query = sprintf(\"\n            SELECT\n                content as answer\n            FROM\n                %sfaqdata\n            WHERE \n                id = %d \n            AND \n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $recordId,\n            $this->_config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($this->_config->getDb()->numRows($result) > 0) {\n            $row = $this->_config->getDb()->fetchObject($result);\n            $answerPreview = strip_tags($row->answer);\n        } else {\n            $answerPreview = $this->_config->get('main.metaDescription');\n        }\n\n        return PMF_Utils::makeShorterText($answerPreview, $wordCount);\n    }\n\n    /**\n     * Returns the number of activated and not expired records, optionally\n     * not limited to the current language.\n     *\n     * @param string $language Language\n     *\n     * @return int\n     */\n    public function getNumberOfRecords($language = null)\n    {\n        $now = date('YmdHis');\n\n        $query = sprintf(\"\n            SELECT\n                id\n            FROM\n                %sfaqdata\n            WHERE\n                active = 'yes'\n            %s\n            AND\n                date_start <= '%s'\n            AND\n                date_end >= '%s'\",\n            PMF_Db::getTablePrefix(),\n            null == $language ? '' : \"AND lang = '\".$language.\"'\",\n            $now,\n            $now\n        );\n\n        $num = $this->_config->getDb()->numRows($this->_config->getDb()->query($query));\n\n        if ($num > 0) {\n            return $num;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * This function generates a list with the most voted or most visited records.\n     *\n     * @param string $type Type definition visits/voted\n     *\n     * @since  2009-11-03\n     *\n     * @author Max K\u00f6hler <me@max-koehler.de>\n     *\n     * @return array\n     */\n    public function getTopTen($type = 'visits')\n    {\n        if ('visits' == $type) {\n            $result = $this->getTopTenData(PMF_NUMBER_RECORDS_TOPTEN, 0, $this->_config->getLanguage()->getLanguage());\n        } else {\n            $result = $this->getTopVotedData(PMF_NUMBER_RECORDS_TOPTEN, $this->_config->getLanguage()->getLanguage());\n        }\n        $output = [];\n\n        if (count($result) > 0) {\n            foreach ($result as $row) {\n                if ('visits' == $type) {\n                    $output['title'][] = PMF_Utils::makeShorterText($row['question'], 8);\n                    $output['preview'][] = $row['question'];\n                    $output['url'][] = $row['url'];\n                    $output['visits'][] = $this->plr->GetMsg('plmsgViews', $row['visits']);\n                } else {\n                    $output['title'][] = PMF_Utils::makeShorterText($row['question'], 8);\n                    $output['preview'][] = $row['question'];\n                    $output['url'][] = $row['url'];\n                    $output['voted'][] = sprintf(\n                        '%s %s 5 - %s',\n                        round($row['avg'], 2),\n                        $this->pmf_lang['msgVoteFrom'],\n                        $this->plr->GetMsg('plmsgVotes', $row['user'])\n                    );\n                }\n            }\n        } else {\n            $output['error'] = $this->pmf_lang['err_noTopTen'];\n        }\n\n        return $output;\n    }\n\n    /**\n     * This function generates the list with the latest published records.\n     *\n     * @return array\n     */\n    public function getLatest()\n    {\n        $date = new PMF_Date($this->_config);\n        $result = $this->getLatestData(PMF_NUMBER_RECORDS_LATEST, $this->_config->getLanguage()->getLanguage());\n        $output = [];\n\n        if (count($result) > 0) {\n            foreach ($result as $row) {\n                $output['url'][] = $row['url'];\n                $output['title'][] = PMF_Utils::makeShorterText($row['question'], 8);\n                $output['preview'][] = $row['question'];\n                $output['date'][] = $date->format(PMF_Date::createIsoDate($row['date']));\n            }\n        } else {\n            $output['error'] = $this->pmf_lang['err_noArticles'];\n        }\n\n        return $output;\n    }\n\n    /**\n     * Deletes a question for the table faqquestions.\n     *\n     * @param int $questionId\n     *\n     * @return bool\n     */\n    public function deleteQuestion($questionId)\n    {\n        $delete = sprintf(\"\n            DELETE FROM\n                %sfaqquestions\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $questionId,\n            $this->_config->getLanguage()->getLanguage()\n        );\n\n        $this->_config->getDb()->query($delete);\n\n        return true;\n    }\n\n     /**\n      * Returns the visibility of a question.\n      *\n      * @param   int $questionId\n      *\n      * @return  string\n      */\n     public function getVisibilityOfQuestion($questionId)\n     {\n         $query = sprintf(\"\n            SELECT\n                is_visible\n            FROM\n                %sfaqquestions\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $questionId,\n            $this->_config->getLanguage()->getLanguage()\n        );\n\n         $result = $this->_config->getDb()->query($query);\n         if ($this->_config->getDb()->numRows($result) > 0) {\n             $row = $this->_config->getDb()->fetchObject($result);\n\n             return $row->is_visible;\n         }\n\n         return;\n     }\n\n    /**\n     * Sets the visibility of a question.\n     *\n     * @param int    $questionId\n     * @param string $isVisible\n     *\n     * @return bool\n     */\n    public function setVisibilityOfQuestion($questionId, $isVisible)\n    {\n        $query = sprintf(\"\n            UPDATE\n                %sfaqquestions\n            SET\n                is_visible = '%s'\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $isVisible,\n            $questionId,\n            $this->_config->getLanguage()->getLanguage()\n        );\n\n        $this->_config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * This function generates a data-set with the most voted FAQs.\n     *  \n     * @param int    $count    Number of records\n     * @param string $language Language\n     *\n     * @return array\n     */\n    public function getTopVotedData($count = PMF_NUMBER_RECORDS_TOPTEN, $language = null)\n    {\n        global $sids;\n\n        $topten = $data = [];\n\n        $now = date('YmdHis');\n        $query =\n'            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fd.updated AS updated,\n                fcr.category_id AS category_id,\n                (fv.vote/fv.usr) AS avg,\n                fv.usr AS user\n            FROM\n                '.PMF_Db::getTablePrefix().'faqvoting fv,\n                '.PMF_Db::getTablePrefix().'faqdata fd\n            LEFT JOIN\n                '.PMF_Db::getTablePrefix().'faqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                '.PMF_Db::getTablePrefix().'faqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                '.PMF_Db::getTablePrefix().'faqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                    fd.date_start <= \\''.$now.'\\'\n                AND fd.date_end   >= \\''.$now.'\\'\n                AND fd.id = fv.artikel\n                AND fd.active = \\'yes\\'';\n\n        if (isset($categoryId) && is_numeric($categoryId) && ($categoryId != 0)) {\n            $query .= '\n            AND\n                fcr.category_id = \\''.$categoryId.'\\'';\n        }\n        if (isset($language) && PMF_Language::isASupportedLanguage($language)) {\n            $query .= '\n            AND\n                fd.lang = \\''.$language.'\\'';\n        }\n        $query .= '\n                '.$this->queryPermission($this->groupSupport).'\n            ORDER BY\n                avg DESC';\n\n        $result = $this->_config->getDb()->query($query);\n\n        $i = 1;\n        $oldId = 0;\n        while (($row = $this->_config->getDb()->fetchObject($result)) && $i <= $count) {\n            if ($oldId != $row->id) {\n                $data['avg'] = $row->avg;\n                $data['question'] = $row->thema;\n                $data['date'] = $row->updated;\n                $data['user'] = $row->user;\n\n                $title = $row->thema;\n                $url = sprintf(\n                    '%s?%saction=artikel&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    PMF_Link::getSystemRelativeUri(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new PMF_Link($url, $this->_config);\n                $oLink->itemTitle = $row->thema;\n                $oLink->tooltip = $title;\n                $data['url'] = $oLink->toString();\n\n                $topten[] = $data;\n                ++$i;\n            }\n            $oldId = $row->id;\n        }\n\n        return $topten;\n    }\n\n    /**\n     * This function generates the Top Ten data with the mosted viewed records.\n     *\n     * @param int    $count      Number of records\n     * @param int    $categoryId Category ID\n     * @param string $language   Language\n     *\n     * @return array\n     */\n    public function getTopTenData($count = PMF_NUMBER_RECORDS_TOPTEN, $categoryId = 0, $language = null)\n    {\n        global $sids;\n\n        $now = date('YmdHis');\n        $query =\n'            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS question,\n                fd.updated AS updated,\n                fcr.category_id AS category_id,\n                fv.visits AS visits,\n                fv.last_visit AS last_visit,\n                fdg.group_id AS group_id,\n                fdu.user_id AS user_id\n            FROM\n                '.PMF_Db::getTablePrefix().'faqvisits fv,\n                '.PMF_Db::getTablePrefix().'faqdata fd\n            LEFT JOIN\n                '.PMF_Db::getTablePrefix().'faqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                '.PMF_Db::getTablePrefix().'faqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                '.PMF_Db::getTablePrefix().'faqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                    fd.date_start <= \\''.$now.'\\'\n                AND fd.date_end   >= \\''.$now.'\\'\n                AND fd.id = fv.id\n                AND fd.lang = fv.lang\n                AND fd.active = \\'yes\\'';\n\n        if (isset($categoryId) && is_numeric($categoryId) && ($categoryId != 0)) {\n            $query .= '\n            AND\n                fcr.category_id = \\''.$categoryId.'\\'';\n        }\n        if (isset($language) && PMF_Language::isASupportedLanguage($language)) {\n            $query .= '\n            AND\n                fd.lang = \\''.$language.'\\'';\n        }\n        $query .= '\n                '.$this->queryPermission($this->groupSupport).'\n\n            GROUP BY\n                fd.id,fd.lang,fcr.category_id,fv.visits,fv.last_visit,fdg.group_id,fdu.user_id\n            ORDER BY\n                fv.visits DESC';\n\n        $result = $this->_config->getDb()->query($query);\n        $topten = [];\n        $data = [];\n\n        if ($result) {\n            while ($row = $this->_config->getDb()->fetchObject($result)) {\n                if ($this->groupSupport) {\n                    if (!in_array($row->user_id, array(-1, $this->user)) || !in_array($row->group_id, $this->groups)) {\n                        continue;\n                    }\n                } else {\n                    if (!in_array($row->user_id, array(-1, $this->user))) {\n                        continue;\n                    }\n                }\n\n                $data['visits'] = (int)$row->visits;\n                $data['question'] = $row->question;\n                $data['date'] = $row->updated;\n                $data['last_visit'] = $row->last_visit;\n\n                $title = $row->question;\n                $url = sprintf(\n                    '%sindex.php?%saction=artikel&cat=%d&id=%d&artlang=%s',\n                    $this->_config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new PMF_Link($url, $this->_config);\n                $oLink->itemTitle = $row->question;\n                $oLink->tooltip = $title;\n                $data['url'] = $oLink->toString();\n\n                $topten[$row->id] = $data;\n\n                if (count($topten) === $count) {\n                    break;\n                }\n            }\n\n            array_multisort($topten, SORT_DESC);\n        }\n\n        return $topten;\n    }\n\n    /**\n     * This function generates an array with a specified number of most recent\n     * published records.\n     *\n     * @param int    $count    Number of records\n     * @param string $language Language\n     *\n     * @return array\n     */\n    public function getLatestData($count = PMF_NUMBER_RECORDS_LATEST, $language = null)\n    {\n        global $sids;\n\n        $now = date('YmdHis');\n        $query =\n'            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fcr.category_id AS category_id,\n                fd.thema AS question,\n                fd.content AS content,\n                fd.updated AS updated,\n                fv.visits AS visits,\n                fdg.group_id AS group_id,\n                fdu.user_id AS user_id\n            FROM\n                '.PMF_Db::getTablePrefix().'faqvisits fv,\n                '.PMF_Db::getTablePrefix().'faqdata fd\n            LEFT JOIN\n                '.PMF_Db::getTablePrefix().'faqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                '.PMF_Db::getTablePrefix().'faqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                '.PMF_Db::getTablePrefix().'faqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                    fd.date_start <= \\''.$now.'\\'\n                AND fd.date_end   >= \\''.$now.'\\'\n                AND fd.id = fv.id\n                AND fd.lang = fv.lang\n                AND fd.active = \\'yes\\'';\n\n        if (isset($language) && PMF_Language::isASupportedLanguage($language)) {\n            $query .= '\n            AND\n                fd.lang = \\''.$language.'\\'';\n        }\n        $query .= '\n                '.$this->queryPermission($this->groupSupport).'\n            GROUP BY\n                fd.id,fd.lang,fcr.category_id,fv.visits,fdg.group_id,fdu.user_id\n            ORDER BY\n                fd.updated DESC';\n\n        $result = $this->_config->getDb()->query($query);\n        $latest = [];\n        $data = [];\n\n        if ($result) {\n            while (($row = $this->_config->getDb()->fetchObject($result))) {\n                if ($this->groupSupport) {\n                    if (!in_array($row->user_id, array(-1, $this->user)) || !in_array($row->group_id, $this->groups)) {\n                        continue;\n                    }\n                } else {\n                    if (!in_array($row->user_id, array(-1, $this->user))) {\n                        continue;\n                    }\n                }\n\n                $data['date'] = $row->updated;\n                $data['question'] = $row->question;\n                $data['answer'] = $row->content;\n                $data['visits'] = $row->visits;\n\n                $title = $row->question;\n                $url = sprintf(\n                    '%sindex.php?%saction=artikel&cat=%d&id=%d&artlang=%s',\n                    $this->_config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new PMF_Link($url, $this->_config);\n                $oLink->itemTitle = $row->question;\n                $oLink->tooltip = $title;\n                $data['url'] = $oLink->toString();\n\n                $latest[$row->id] = $data;\n\n                if (count($latest) === $count) {\n                    break;\n                }\n            }\n        }\n        \n        return $latest;\n    }\n\n    /**\n     * Reload locking for user votings.\n     *\n     * @param int    $id FAQ record id\n     * @param string $ip IP\n     *\n     * @return bool\n     */\n    public function votingCheck($id, $ip)\n    {\n        $check = $_SERVER['REQUEST_TIME'] - 300;\n        $query = sprintf(\n            \"SELECT\n                id\n            FROM\n                %sfaqvoting\n            WHERE\n                artikel = %d AND (ip = '%s' AND datum > '%s')\",\n            PMF_Db::getTablePrefix(),\n            $id,\n            $ip,\n            $check);\n        if ($this->_config->getDb()->numRows($this->_config->getDb()->query($query))) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns the number of users from the table faqvotings.\n     *\n     * @param integer $record_id\n     *\n     * @return integer\n     */\n    public function getNumberOfVotings($record_id)\n    {\n        $query = sprintf(\n            'SELECT\n                usr\n            FROM\n                %sfaqvoting\n            WHERE\n                artikel = %d',\n            PMF_Db::getTablePrefix(),\n            $record_id);\n        if ($result = $this->_config->getDb()->query($query)) {\n            if ($row = $this->_config->getDb()->fetchObject($result)) {\n                return $row->usr;\n            }\n        }\n\n        return 0;\n    }\n\n    /**\n     * Adds a new voting record.\n     *\n     * @param array $votingData\n     *\n     * @return bool\n     */\n    public function addVoting($votingData)\n    {\n        if (!is_array($votingData)) {\n            return false;\n        }\n\n        $query = sprintf(\n            \"INSERT INTO\n                %sfaqvoting\n            VALUES\n                (%d, %d, %d, 1, %d, '%s')\",\n            PMF_Db::getTablePrefix(),\n            $this->_config->getDb()->nextId(PMF_Db::getTablePrefix().'faqvoting', 'id'),\n            $votingData['record_id'],\n            $votingData['vote'],\n            $_SERVER['REQUEST_TIME'],\n            $votingData['user_ip']);\n        $this->_config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Adds a new question.\n     *\n     * @param array $questionData\n     *\n     * @return bool\n     */\n    public function addQuestion(Array $questionData)\n    {\n        $query = sprintf(\"\n            INSERT INTO\n                %sfaqquestions\n            (id, lang, username, email, category_id, question, created, is_visible, answer_id)\n                VALUES\n            (%d, '%s', '%s', '%s', %d, '%s', '%s', '%s', %d)\",\n            PMF_Db::getTablePrefix(),\n            $this->_config->getDb()->nextId(PMF_Db::getTablePrefix().'faqquestions', 'id'),\n            $this->_config->getLanguage()->getLanguage(),\n            $this->_config->getDb()->escape($questionData['username']),\n            $this->_config->getDb()->escape($questionData['email']),\n            $questionData['category_id'],\n            $this->_config->getDb()->escape($questionData['question']),\n            date('YmdHis'),\n            $questionData['is_visible'],\n            0\n        );\n        $this->_config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Returns a new question.\n     *\n     * @param int $questionId\n     *\n     * @return array\n     */\n    public function getQuestion($questionId)\n    {\n        $question = [\n            'id' => 0,\n            'lang' => '',\n            'username' => '',\n            'email' => '',\n            'category_id' => '',\n            'question' => '',\n            'created' => '',\n            'is_visible' => '',\n        ];\n\n        if (!is_int($questionId)) {\n            return $question;\n        }\n\n        $question = [];\n\n        $query = sprintf(\"\n            SELECT\n                 id, lang, username, email, category_id, question, created, is_visible\n            FROM\n                %sfaqquestions\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $questionId,\n            $this->_config->getLanguage()->getLanguage()\n        );\n\n        if ($result = $this->_config->getDb()->query($query)) {\n            if ($row = $this->_config->getDb()->fetchObject($result)) {\n                $question = array(\n                    'id' => $row->id,\n                    'lang' => $row->lang,\n                    'username' => $row->username,\n                    'email' => $row->email,\n                    'category_id' => $row->category_id,\n                    'question' => $row->question,\n                    'created' => $row->created,\n                    'is_visible' => $row->is_visible, );\n            }\n        }\n\n        return $question;\n    }\n\n    /**\n     * Returns all open questions.\n     *\n     * @param boolean $all If true, then return visible and non-visible\n     *                     questions; otherwise only visible ones\n     *\n     * @return array\n     */\n    public function getAllOpenQuestions($all = true)\n    {\n        $questions = [];\n\n        $query = sprintf(\"\n            SELECT\n                id, lang, username, email, category_id, question, created, answer_id, is_visible\n            FROM\n                %sfaqquestions\n            WHERE\n                lang = '%s'\n                %s\n            ORDER BY \n                created ASC\",\n            PMF_Db::getTablePrefix(),\n            $this->_config->getLanguage()->getLanguage(),\n            ($all == false ? \" AND is_visible = 'Y'\" : '')\n        );\n\n        if ($result = $this->_config->getDb()->query($query)) {\n            while ($row = $this->_config->getDb()->fetchObject($result)) {\n                $questions[] = array(\n                    'id' => $row->id,\n                    'lang' => $row->lang,\n                    'username' => $row->username,\n                    'email' => $row->email,\n                    'category_id' => $row->category_id,\n                    'question' => $row->question,\n                    'created' => $row->created,\n                    'answer_id' => $row->answer_id,\n                    'is_visible' => $row->is_visible,\n                );\n             }\n        }\n\n        return $questions;\n    }\n\n    /**\n     * Updates an existing voting record.\n     *\n     * @param array $votingData\n     *\n     * @return bool\n     */\n    public function updateVoting($votingData)\n    {\n        if (!is_array($votingData)) {\n            return false;\n        }\n\n        $query = sprintf(\n            \"UPDATE\n                %sfaqvoting\n            SET\n                vote    = vote + %d,\n                usr     = usr + 1,\n                datum   = %d,\n                ip      = '%s'\n            WHERE\n                artikel = %d\",\n            PMF_Db::getTablePrefix(),\n            $votingData['vote'],\n            $_SERVER['REQUEST_TIME'],\n            $votingData['user_ip'],\n            $votingData['record_id']);\n        $this->_config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Adds a new changelog entry in the table faqchanges.\n     *\n     * @param int    $id\n     * @param int    $userId\n     * @param string $text\n     * @param string $lang\n     * @param int    $revision_id\n     *\n     * @return bool\n     */\n    public function createChangeEntry($id, $userId, $text, $lang, $revision_id = 0)\n    {\n        if (!is_numeric($id)\n            && !is_numeric($userId)\n            && !is_string($text)\n            && !is_string($lang)\n            ) {\n            return false;\n        }\n\n        $query = sprintf(\n            \"INSERT INTO\n                %sfaqchanges\n            (id, beitrag, lang, revision_id, usr, datum, what)\n                VALUES\n            (%d, %d, '%s', %d, %d, %d, '%s')\",\n            PMF_Db::getTablePrefix(),\n            $this->_config->getDb()->nextId(PMF_Db::getTablePrefix().'faqchanges', 'id'),\n            $id,\n            $lang,\n            $revision_id,\n            $userId,\n            $_SERVER['REQUEST_TIME'],\n            $text);\n\n        $this->_config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Returns the changelog of a FAQ record.\n     *\n     * @param int $recordId\n     *\n     * @return array\n     */\n    public function getChangeEntries($recordId)\n    {\n        $entries = [];\n\n        $query = sprintf('\n            SELECT\n                DISTINCT revision_id, usr, datum, what\n            FROM\n                %sfaqchanges\n            WHERE\n                beitrag = %d\n            ORDER BY revision_id DESC',\n            PMF_Db::getTablePrefix(),\n            $recordId\n        );\n\n        if ($result = $this->_config->getDb()->query($query)) {\n            while ($row = $this->_config->getDb()->fetchObject($result)) {\n                $entries[] = array(\n                    'revision_id' => $row->revision_id,\n                    'user' => $row->usr,\n                    'date' => $row->datum,\n                    'changelog' => $row->what, );\n            }\n        }\n\n        return $entries;\n    }\n\n    /**\n     * Retrieve faq records according to the constraints provided.\n     *\n     * @param string $queryType\n     * @param int    $nCatid\n     * @param bool   $bDownwards\n     * @param string $lang\n     * @param string $date\n     *\n     * @return array\n     */\n    public function get($queryType = FAQ_QUERY_TYPE_DEFAULT, $nCatid = 0, $bDownwards = true, $lang = '', $date = '')\n    {\n        $faqs = [];\n\n        $result = $this->_config->getDb()->query($this->_getSQLQuery($queryType, $nCatid, $bDownwards, $lang, $date));\n\n        if ($this->_config->getDb()->numRows($result) > 0) {\n            $i = 0;\n            while ($row = $this->_config->getDb()->fetchObject($result)) {\n                $faq = [];\n                $faq['id'] = $row->id;\n                $faq['solution_id'] = $row->solution_id;\n                $faq['revision_id'] = $row->revision_id;\n                $faq['lang'] = $row->lang;\n                $faq['category_id'] = $row->category_id;\n                $faq['active'] = $row->active;\n                $faq['sticky'] = $row->sticky;\n                $faq['keywords'] = $row->keywords;\n                $faq['topic'] = $row->thema;\n                $faq['content'] = $row->content;\n                $faq['author_name'] = $row->author;\n                $faq['author_email'] = $row->email;\n                $faq['comment_enable'] = $row->comment;\n                $faq['lastmodified'] = $row->updated;\n                $faq['hits'] = $row->visits;\n                $faq['hits_last'] = $row->last_visit;\n                $faq['notes'] = $row->notes;\n                $faqs[$i] = $faq;\n                ++$i;\n            }\n        }\n\n        return $faqs;\n    }\n\n    /**\n     * Build a logic sequence, for a WHERE statement, of those category IDs\n     * children of the provided category ID, if any.\n     *\n     * @param   $nCatid\n     * @param   $logicOp\n     * @param   $oCat\n     *\n     * @return string\n     */\n    public function _getCatidWhereSequence($nCatid, $logicOp = 'OR', $oCat = null)\n    {\n        $sqlWherefilter = '';\n\n        if (!isset($oCat)) {\n            $oCat = new PMF_Category($this->_config);\n        }\n        $aChildren = array_values($oCat->getChildren($nCatid));\n\n        foreach ($aChildren as $catid) {\n            $sqlWherefilter .= ' '.$logicOp.' fcr.category_id = '.$catid;\n            $sqlWherefilter .= $this->_getCatidWhereSequence($catid, 'OR', $oCat);\n        }\n\n        return $sqlWherefilter;\n    }\n\n    /**\n     * Build the SQL query for retrieving faq records according to the constraints provided.\n     *\n     * @param   $QueryType\n     * @param   $nCatid\n     * @param   $bDownwards\n     * @param   $lang\n     * @param   $date\n     * @param   $faqid\n     *\n     * @return array\n     */\n    private function _getSQLQuery($QueryType, $nCatid, $bDownwards, $lang, $date, $faqid = 0)\n    {\n        $now = date('YmdHis');\n        $query = sprintf(\"\n            SELECT\n                fd.id AS id,\n                fd.solution_id AS solution_id,\n                fd.revision_id AS revision_id,\n                fd.lang AS lang,\n                fcr.category_id AS category_id,\n                fd.active AS active,\n                fd.sticky AS sticky,\n                fd.keywords AS keywords,\n                fd.thema AS thema,\n                fd.content AS content,\n                fd.author AS author,\n                fd.email AS email,\n                fd.comment AS comment,\n                fd.updated AS updated,\n                fd.notes AS notes,\n                fv.visits AS visits,\n                fv.last_visit AS last_visit\n            FROM\n                %sfaqdata fd,\n                %sfaqvisits fv,\n                %sfaqcategoryrelations fcr\n            WHERE\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            AND\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND \",\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $now,\n            $now);\n        // faqvisits data selection\n        if (!empty($faqid)) {\n            // Select ONLY the faq with the provided $faqid\n            $query .= \"fd.id = '\".$faqid.\"' AND \";\n        }\n        $query .= 'fd.id = fv.id\n            AND\n                fd.lang = fv.lang';\n        $needAndOp = true;\n        if ((!empty($nCatid)) && is_int($nCatid) && $nCatid > 0) {\n            if ($needAndOp) {\n                $query .= ' AND';\n            }\n            $query .= ' (fcr.category_id = '.$nCatid;\n            if ($bDownwards) {\n                $query .= $this->_getCatidWhereSequence($nCatid, 'OR');\n            }\n            $query .= ')';\n            $needAndOp = true;\n        }\n        if ((!empty($date)) && PMF_Utils::isLikeOnPMFDate($date)) {\n            if ($needAndOp) {\n                $query .= ' AND';\n            }\n            $query .= \" fd.updated LIKE '\".$date.\"'\";\n            $needAndOp = true;\n        }\n        if ((!empty($lang)) && PMF_Utils::isLanguage($lang)) {\n            if ($needAndOp) {\n                $query .= ' AND';\n            }\n            $query .= \" fd.lang = '\".$lang.\"'\";\n            $needAndOp = true;\n        }\n        switch ($QueryType) {\n            case FAQ_QUERY_TYPE_APPROVAL:\n                if ($needAndOp) {\n                    $query .= ' AND';\n                }\n                $query .= \" fd.active = '\".FAQ_SQL_ACTIVE_NO.\"'\";\n                break;\n            case FAQ_QUERY_TYPE_EXPORT_PDF:\n            case FAQ_QUERY_TYPE_EXPORT_XHTML:\n            case FAQ_QUERY_TYPE_EXPORT_XML:\n                if ($needAndOp) {\n                    $query .= ' AND';\n                }\n                $query .= \" fd.active = '\".FAQ_SQL_ACTIVE_YES.\"'\";\n                break;\n            default:\n                if ($needAndOp) {\n                    $query .= ' AND';\n                }\n                $query .= \" fd.active = '\".FAQ_SQL_ACTIVE_YES.\"'\";\n                break;\n        }\n        // Sort criteria\n        switch ($QueryType) {\n            case FAQ_QUERY_TYPE_EXPORT_PDF:\n            case FAQ_QUERY_TYPE_EXPORT_XHTML:\n            case FAQ_QUERY_TYPE_EXPORT_XML:\n                $query .= \"\\nORDER BY fcr.category_id, fd.id\";\n                break;\n            case FAQ_QUERY_TYPE_RSS_LATEST:\n                $query .= \"\\nORDER BY fd.updated DESC\";\n                break;\n            default:\n                // Normal ordering\n                $query .= \"\\nORDER BY fcr.category_id, fd.id\";\n                break;\n        }\n\n        return $query;\n    }\n\n    /**\n     * Adds the record permissions for users and groups.\n     *\n     * @param string $mode     'group' or 'user'\n     * @param int    $recordId ID of the current record\n     * @param array  $ids      Array of group or user IDs\n     *\n     * @return bool\n     */\n    public function addPermission($mode, $recordId, $ids)\n    {\n        if ('user' !== $mode && 'group' !== $mode) {\n            return false;\n        }\n\n        foreach ($ids as $id) {\n            $query = sprintf('\n            INSERT INTO\n                %sfaqdata_%s\n            (record_id, %s_id)\n                VALUES\n            (%d, %d)',\n                PMF_Db::getTablePrefix(),\n                $mode,\n                $mode,\n                $recordId,\n                $id\n            );\n\n            $this->_config->getDb()->query($query);\n        }\n\n        return true;\n    }\n\n    /**\n     * Deletes the record permissions for users and groups.\n     *\n     * @param string $mode      'group' or 'user'\n     * @param int    $record_id ID of the current record\n     *\n     * @return bool\n     *\n     * @author  Thorsten Rinne <thorsten@phpmyfaq.de>\n     */\n    public function deletePermission($mode, $record_id)\n    {\n        if (!($mode == 'user' || $mode == 'group')) {\n            return false;\n        }\n        if (!is_int($record_id)) {\n            return false;\n        }\n\n        $query = sprintf('\n            DELETE FROM\n                %sfaqdata_%s\n            WHERE\n                record_id = %d',\n            PMF_Db::getTablePrefix(),\n            $mode,\n            $record_id);\n        $this->_config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Returns the record permissions for users and groups.\n     *\n     * @param string $mode     'group' or 'user'\n     * @param int    $recordId\n     *\n     * @return array\n     */\n    public function getPermission($mode, $recordId)\n    {\n        $permissions = [];\n\n        if (!($mode == 'user' || $mode == 'group')) {\n            return false;\n        }\n\n        $query = sprintf('\n            SELECT\n                %s_id AS permission\n            FROM\n                %sfaqdata_%s\n            WHERE\n                record_id = %d',\n            $mode,\n            PMF_Db::getTablePrefix(),\n            $mode,\n            (int) $recordId);\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($this->_config->getDb()->numRows($result) > 0) {\n            while (($row = $this->_config->getDb()->fetchObject($result))) {\n                $permissions[] = (int) $row->permission;\n            }\n        }\n\n        return $permissions;\n    }\n\n    /**\n     * Returns all records of one category.\n     *\n     * @param int $category\n     *\n     * @return string\n     */\n    public function showAllRecordsWoPaging($category)\n    {\n        global $sids;\n\n        $now = date('YmdHis');\n        $query = sprintf(\"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fcr.category_id AS category_id,\n                fv.visits AS visits\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqvisits fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_group fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND\n                fd.active = 'yes'\n            AND\n                fcr.category_id = %d\n            AND\n                fd.lang = '%s'\n            GROUP BY\n                fd.id,fd.lang,fcr.category_id,fv.visits\n            ORDER BY\n                %s %s\",\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $now,\n            $now,\n            $category,\n            $this->_config->getLanguage()->getLanguage(),\n            $this->_config->get('records.orderby'),\n            $this->_config->get('records.sortby')\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        $output = '<ul class=\"phpmyfaq_ul\">';\n\n        while (($row = $this->_config->getDb()->fetchObject($result))) {\n            $title = $row->thema;\n            $url = sprintf(\n                '%s?%saction=artikel&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                PMF_Link::getSystemRelativeUri(),\n                $sids,\n                $row->category_id,\n                $row->id,\n                $row->lang\n            );\n\n            $oLink = new PMF_Link($url, $this->_config);\n            $oLink->itemTitle = $row->thema;\n            $oLink->text = $title;\n            $oLink->tooltip = $title;\n            $listItem = sprintf('<li>%s</li>', $oLink->toHtmlAnchor(), $this->pmf_lang['msgViews']);\n            $listItem = '<li>'.$oLink->toHtmlAnchor().'</li>';\n\n            $output .= $listItem;\n        }\n\n        $output .= '</ul>';\n\n        return $output;\n    }\n\n    /**\n     * Prints the open questions as a XHTML table.\n     *\n     * @return string\n     */\n    public function printOpenQuestions()\n    {\n        global $sids, $category;\n\n        $date = new PMF_Date($this->_config);\n        $mail = new PMF_Mail($this->_config);\n\n        $query = sprintf(\"\n            SELECT\n                COUNT(id) AS num\n            FROM\n                %sfaqquestions\n            WHERE\n                lang = '%s'\n            AND\n                is_visible != 'Y'\",\n            PMF_Db::getTablePrefix(),\n            $this->_config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->_config->getDb()->query($query);\n        $row = $this->_config->getDb()->fetchObject($result);\n        $numOfInvisibles = $row->num;\n\n        if ($numOfInvisibles > 0) {\n            $extraout = sprintf(\n                '<tr><td colspan=\"3\"><small>%s %s</small></td></tr>',\n                $this->pmf_lang['msgQuestionsWaiting'],\n                $numOfInvisibles\n            );\n        } else {\n            $extraout = '';\n        }\n\n        $query = sprintf(\"\n            SELECT\n                *\n            FROM\n                %sfaqquestions\n            WHERE\n                lang = '%s'\n            AND\n                is_visible = 'Y'\n            ORDER BY\n                created ASC\",\n            PMF_Db::getTablePrefix(),\n            $this->_config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->_config->getDb()->query($query);\n        $output = '';\n\n        if ($result && $this->_config->getDb()->numRows($result) > 0) {\n            while ($row = $this->_config->getDb()->fetchObject($result)) {\n                $output .= '<tr class=\"openquestions\">';\n                $output .= sprintf(\n                    '<td><small>%s</small><br /><a href=\"mailto:%s\">%s</a></td>',\n                    $date->format(PMF_Date::createIsoDate($row->created)),\n                    $mail->safeEmail($row->email),\n                    $row->username\n                );\n                $output .= sprintf(\n                    '<td><strong>%s:</strong><br />%s</td>',\n                    isset($category->categoryName[$row->category_id]['name']) ? $category->categoryName[$row->category_id]['name'] : '',\n                    strip_tags($row->question)\n                );\n                if ($this->_config->get('records.enableCloseQuestion') && $row->answer_id) {\n                    $output .= sprintf(\n                        '<td><a id=\"PMF_openQuestionAnswered\" href=\"?%saction=artikel&amp;cat=%d&amp;id=%d\">%s</a></td>',\n                        $sids,\n                        $row->category_id,\n                        $row->answer_id,\n                        $this->pmf_lang['msg2answerFAQ']\n                    );\n                } else {\n                    $output .= sprintf(\n                        '<td><a class=\"btn btn-primary\" href=\"?%saction=add&amp;question=%d&amp;cat=%d\">%s</a></td>',\n                        $sids,\n                        $row->id,\n                        $row->category_id,\n                        $this->pmf_lang['msg2answer']\n                    );\n                }\n                $output .= '</tr>';\n            }\n        } else {\n            $output = sprintf(\n                '<tr><td colspan=\"3\">%s</td></tr>',\n                $this->pmf_lang['msgNoQuestionsAvailable']\n            );\n        }\n\n        return $output.$extraout;\n    }\n\n    /**\n     * Set or unset a faq item flag.\n     *\n     * @param int    $id   Record id\n     * @param string $lang language code which is valid with Language::isASupportedLanguage\n     * @param bool   $flag weither or not the record is set to sticky\n     * @param string $type type of the flag to set, use the column name\n     *\n     * @return bool\n     */\n    public function updateRecordFlag($id, $lang, $flag, $type)\n    {\n        $retval = false;\n\n        switch ($type) {\n            case 'sticky':\n                $flag = ($flag === 'checked' ? 1 : 0);\n                break;\n\n            case 'active':\n                $flag = ($flag === 'checked' ? \"'yes'\" : \"'no'\");\n                break;\n\n            default:\n                // This is because we would run into unknown db column\n                $flag = null;\n                break;\n        }\n\n        if (null !== $flag) {\n            $update = sprintf(\"\n                UPDATE \n                    %sfaqdata \n                SET \n                    %s = %s \n                WHERE \n                    id = %d \n                AND \n                    lang = '%s'\",\n                PMF_Db::getTablePrefix(),\n                $type,\n                $flag,\n                $id,\n                $lang\n            );\n\n            $retval = (bool) $this->_config->getDb()->query($update);\n        }\n\n        return $retval;\n    }\n\n    /**\n     * Returns the sticky records with URL and Title.\n     *\n     * @return array\n     */\n    private function getStickyRecordsData()\n    {\n        global $sids;\n\n        $now = date('YmdHis');\n        $query = sprintf(\"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fcr.category_id AS category_id\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.lang = '%s'\n            AND \n                fd.date_start <= '%s'\n            AND \n                fd.date_end   >= '%s'\n            AND \n                fd.active = 'yes'\n            AND \n                fd.sticky = 1\n            %s\",\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $this->_config->getLanguage()->getLanguage(),\n            $now,\n            $now,\n            $this->queryPermission($this->groupSupport)\n        );\n\n        $result = $this->_config->getDb()->query($query);\n        $sticky = [];\n        $data = [];\n\n        $oldId = 0;\n        while (($row = $this->_config->getDb()->fetchObject($result))) {\n            if ($oldId != $row->id) {\n                $data['thema'] = $row->thema;\n\n                $title = $row->thema;\n                $url = sprintf(\n                    '%s?%saction=artikel&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    PMF_Link::getSystemRelativeUri(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new PMF_Link($url, $this->_config);\n                $oLink->itemTitle = $row->thema;\n                $oLink->tooltip = $title;\n                $data['url'] = $oLink->toString();\n\n                $sticky[] = $data;\n            }\n            $oldId = $row->id;\n        }\n\n        return $sticky;\n    }\n\n    /**\n     * Prepares and returns the sticky records for the frontend.\n     *\n     * @return array\n     */\n    public function getStickyRecords()\n    {\n        $result = $this->getStickyRecordsData();\n        $output = [];\n\n        if (count($result) > 0) {\n            foreach ($result as $row) {\n                $output[] = array(\n                    'title' => PMF_Utils::makeShorterText($row['thema'], 8),\n                    'preview' => $row['thema'],\n                    'url' => $row['url'],\n                );\n            }\n        } else {\n            $output['error'] = sprintf('<li>%s</li>', $this->pmf_lang['err_noTopTen']);\n        }\n        if (!isset($output['error'])) {\n            $html = '';\n            foreach ($output as $entry) {\n                $html .= sprintf(\n                    '<li><a class=\"sticky-faqs\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"%s\" href=\"%s\">%s</a></li>',\n                    $entry['preview'],\n                    $entry['url'],\n                    $entry['title']\n                );\n            }\n            $output['html'] = $html;\n        }\n\n        return $output;\n    }\n\n    /**\n     * Updates field answer_id in faqquestion.\n     *\n     * @param int $openQuestionId\n     * @param int $faqId\n     * @param int $categoryId\n     *\n     * @return bool\n     */\n    public function updateQuestionAnswer($openQuestionId, $faqId, $categoryId)\n    {\n        $query = sprintf(\n            'UPDATE %sfaqquestions SET answer_id = %d, category_id= %d WHERE id= %d',\n            PMF_Db::getTablePrefix(),\n            $faqId,\n            $categoryId,\n            $openQuestionId\n        );\n\n        return $this->_config->getDb()->query($query);\n    }\n\n    /**\n     * Returns a part of a query to check permissions.\n     *\n     * @param bool $hasGroupSupport\n     *\n     * @return string\n     */\n    protected function queryPermission($hasGroupSupport = false)\n    {\n        if ($hasGroupSupport) {\n            if (-1 === $this->user) {\n                return sprintf(\n                    'AND fdg.group_id IN (%s)',\n                    implode(', ', $this->groups),\n                    $this->user,\n                    implode(', ', $this->groups));\n            } else {\n                return sprintf(\n                    'AND ( fdg.group_id IN (%s) OR (fdu.user_id = %d OR fdg.group_id IN (%s)) )',\n                    implode(', ', $this->groups),\n                    $this->user,\n                    implode(', ', $this->groups)\n                );\n            }\n        } else {\n            if (-1 !== $this->user) {\n                return sprintf(\n                    'AND ( fdu.user_id = %d OR fdu.user_id = -1 )',\n                    $this->user\n                );\n            } else {\n                return sprintf(\n                    'AND fdu.user_id = -1',\n                    $this->user\n                );\n            }\n        }\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * The main FAQ class.\n *\n * PHP Version 5.5\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @category  phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @author    Georgi Korchev <korchev@yahoo.com>\n * @author    Adrianna Musiol <musiol@imageaccess.de>\n * @author    Peter Caesar <p.caesar@osmaco.de>\n * @copyright 2005-2017 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      http://www.phpmyfaq.de\n * @since     2005-12-20\n */\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    exit();\n}\n\n/*\n * SQL constants definitions\n */\ndefine('FAQ_SQL_ACTIVE_YES', 'yes');\ndefine('FAQ_SQL_ACTIVE_NO',  'no');\n\n/*\n * Query type definitions\n */\ndefine('FAQ_QUERY_TYPE_DEFAULT',      'faq_default');\ndefine('FAQ_QUERY_TYPE_APPROVAL',     'faq_approval');\ndefine('FAQ_QUERY_TYPE_EXPORT_PDF',   'faq_export_pdf');\ndefine('FAQ_QUERY_TYPE_EXPORT_XHTML', 'faq_export_xhtml');\ndefine('FAQ_QUERY_TYPE_EXPORT_XML',   'faq_export_xml');\ndefine('FAQ_QUERY_TYPE_RSS_LATEST',   'faq_rss_latest');\n\n/*\n * Sorting type definitions\n */\ndefine('FAQ_SORTING_TYPE_NONE', 0);\ndefine('FAQ_SORTING_TYPE_CATID_FAQID', 1);\ndefine('FAQ_SORTING_TYPE_FAQTITLE_FAQID', 2);\ndefine('FAQ_SORTING_TYPE_DATE_FAQID', 3);\ndefine('FAQ_SORTING_TYPE_FAQID', 4);\n\n/**\n * The main FAQ class - 3K LOC of funny things for phpMyFAQ.\n *\n * @category  phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @author    Georgi Korchev <korchev@yahoo.com>\n * @author    Adrianna Musiol <musiol@imageaccess.de>\n * @author    Peter Caesar <p.caesar@osmaco.de>\n * @copyright 2005-2017 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      http://www.phpmyfaq.de\n * @since     2005-12-20\n */\nclass PMF_Faq\n{\n    /**\n     * @var PMF_Configuration\n     */\n    private $_config;\n\n    /**\n     * Language strings.\n     *\n     * @var string\n     */\n    private $pmf_lang;\n\n    /**\n     * Plural form support.\n     *\n     * @var PMF_Language_Plurals\n     */\n    private $plr;\n\n    /**\n     * The current FAQ record.\n     *\n     * @var array\n     */\n    public $faqRecord = [];\n\n    /**\n     * All current FAQ records in an array.\n     *\n     * @var array\n     */\n    public $faqRecords = [];\n\n    /**\n     * Users.\n     *\n     * @var int\n     */\n    private $user = -1;\n\n    /**\n     * Groups.\n     *\n     * @var array\n     */\n    private $groups = array(-1);\n\n    /**\n     * Flag for Group support.\n     *\n     * @var bool\n     */\n    private $groupSupport = false;\n\n    /**\n     * Constructor.\n     *\n     * @param PMF_Configuration $config\n     *\n     * @return PMF_Faq\n     */\n    public function __construct(PMF_Configuration $config)\n    {\n        global $PMF_LANG, $plr;\n\n        $this->_config = $config;\n        $this->pmf_lang = $PMF_LANG;\n        $this->plr = $plr;\n\n        if ($this->_config->get('security.permLevel') == 'medium') {\n            $this->groupSupport = true;\n        }\n    }\n\n    //\n    //\n    // PUBLIC METHODS\n    //\n    //\n\n    /**\n     * @param int $userId\n     */\n    public function setUser($userId = -1)\n    {\n        $this->user = $userId;\n    }\n\n    /**\n     * @param array $groups\n     */\n    public function setGroups(Array $groups)\n    {\n        $this->groups = $groups;\n    }\n\n    /**\n     * This function returns all not expired records from one category.\n     *\n     * @param int    $category_id Category ID\n     * @param string $orderby     Order by\n     * @param string $sortby      Sorty by\n     *\n     * @return array\n     */\n    public function getAllRecordPerCategory($category_id, $orderby = 'id', $sortby = 'ASC')\n    {\n        global $sids;\n\n        $faqdata = [];\n\n        if ($orderby == 'visits') {\n            $currentTable = 'fv';\n        } else {\n            $currentTable = 'fd';\n        }\n\n        $now = date('YmdHis');\n        $query = sprintf(\"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fd.content AS record_content,\n                fd.updated AS updated,\n                fcr.category_id AS category_id,\n                fv.visits AS visits,\n                fd.created AS created\n            FROM\n                %sfaqdata AS fd\n            LEFT JOIN\n                %sfaqcategoryrelations AS fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqvisits AS fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND\n                fd.active = 'yes'\n            AND\n                fcr.category_id = %d\n            AND\n                fd.lang = '%s'\n                %s\n            ORDER BY\n                %s.%s %s\",\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $now,\n            $now,\n            $category_id,\n            $this->_config->getLanguage()->getLanguage(),\n            $this->queryPermission($this->groupSupport),\n            $currentTable,\n            $this->_config->getDb()->escape($orderby),\n            $this->_config->getDb()->escape($sortby)\n        );\n\n        $result = $this->_config->getDb()->query($query);\n        $num = $this->_config->getDb()->numRows($result);\n\n        if ($num > 0) {\n            $faqHelper = new PMF_Helper_Faq($this->_config);\n            while (($row = $this->_config->getDb()->fetchObject($result))) {\n                if (empty($row->visits)) {\n                    $visits = 0;\n                } else {\n                    $visits = $row->visits;\n                }\n\n                $url = sprintf(\n                    '%sindex.php?%saction=artikel&cat=%d&id=%d&artlang=%s',\n                    $this->_config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new PMF_Link($url, $this->_config);\n                $oLink->itemTitle = $oLink->text = $oLink->tooltip = $row->thema;\n\n                $faqdata[] = array(\n                    'record_id' => $row->id,\n                    'record_lang' => $row->lang,\n                    'category_id' => $row->category_id,\n                    'record_title' => $row->thema,\n                    'record_preview' => $faqHelper->renderAnswerPreview($row->record_content, 25),\n                    'record_link' => $oLink->toString(),\n                    'record_updated' => $row->updated,\n                    'visits' => $visits,\n                    'record_created' => $row->created,\n                );\n            }\n        } else {\n            return $faqdata;\n        }\n\n        return $faqdata;\n    }\n\n    /**\n     * This function returns all not expired records from one category.\n     *\n     * @param int    $categoryId Category ID\n     * @param string $orderby    Order by\n     * @param string $sortby     Sorty by\n     *\n     * @return string\n     */\n    public function showAllRecords($categoryId, $orderby = 'id', $sortby = 'ASC')\n    {\n        global $sids;\n\n        $numPerPage = $this->_config->get('records.numberOfRecordsPerPage');\n        $page = PMF_Filter::filterInput(INPUT_GET, 'seite', FILTER_VALIDATE_INT, 1);\n        $output = '';\n        $title = '';\n\n        if ($orderby == 'visits') {\n            $currentTable = 'fv';\n        } else {\n            $currentTable = 'fd';\n        }\n\n        // If random FAQs are activated, we don't need an order\n        if (true === $this->_config->get('records.randomSort')) {\n            $order = '';\n        } else {\n            $order = sprintf(\n                'ORDER BY fd.sticky DESC, %s.%s %s',\n                $currentTable,\n                $this->_config->getDb()->escape($orderby),\n                $this->_config->getDb()->escape($sortby)\n            );\n        }\n\n        $now = date('YmdHis');\n        $query = sprintf(\"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.sticky AS sticky,\n                fd.thema AS thema,\n                fcr.category_id AS category_id,\n                fv.visits AS visits\n            FROM\n                %sfaqdata AS fd\n            LEFT JOIN\n                %sfaqcategoryrelations AS fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqvisits AS fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND\n                fd.active = 'yes'\n            AND\n                fcr.category_id = %d\n            AND\n                fd.lang = '%s'\n            %s\n            %s\",\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $now,\n            $now,\n            $categoryId,\n            $this->_config->getLanguage()->getLanguage(),\n            $this->queryPermission($this->groupSupport),\n            $order\n        );\n\n        $result = $this->_config->getDb()->query($query);\n        $num = $this->_config->getDb()->numRows($result);\n        $pages = (int) ceil($num / $numPerPage);\n\n        if ($page == 1) {\n            $first = 0;\n        } else {\n            $first = $page * $numPerPage - $numPerPage;\n        }\n\n        if ($num > 0) {\n            if ($pages > 1) {\n                $output .= sprintf('<p><strong>%s %s %s</strong></p>',\n                    $this->pmf_lang['msgPage'].$page,\n                    $this->pmf_lang['msgVoteFrom'],\n                    $pages.$this->pmf_lang['msgPages']);\n            }\n            $output .= '<ul class=\"phpmyfaq_ul\">';\n\n            $counter = 0;\n            $displayedCounter = 0;\n            $renderedItems = [];\n            while (($row = $this->_config->getDb()->fetchObject($result)) && $displayedCounter < $numPerPage) {\n                ++$counter;\n                if ($counter <= $first) {\n                    continue;\n                }\n                ++$displayedCounter;\n\n                if (empty($row->visits)) {\n                    $visits = 0;\n                } else {\n                    $visits = $row->visits;\n                }\n\n                $title = $row->thema;\n                $url = sprintf(\n                    '%s?%saction=artikel&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    PMF_Link::getSystemRelativeUri(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n\n                $oLink = new PMF_Link($url, $this->_config);\n                $oLink->itemTitle = $oLink->text = $oLink->tooltip = $title;\n\n                // If random FAQs are activated, we don't need sticky FAQs\n                if (true === $this->_config->get('records.randomSort')) {\n                    $row->sticky = 0;\n                }\n\n                $renderedItems[$row->id] = sprintf(\n                    '<li%s>%s<span id=\"viewsPerRecord\"><br /><small>(%s)</small></span></li>',\n                    ($row->sticky == 1) ? ' class=\"sticky-faqs\"' : '',\n                    $oLink->toHtmlAnchor(),\n                    $this->plr->GetMsg('plmsgViews', $visits)\n                );\n            }\n\n            // If random FAQs are activated, shuffle the FAQs :-)\n            if (true === $this->_config->get('records.randomSort')) {\n                shuffle($renderedItems);\n            }\n\n            $output .= implode(\"\\n\", $renderedItems);\n            $output .= '</ul><span class=\"totalFaqRecords hide\">'.$num.'</span>';\n        } else {\n            return false;\n        }\n\n        if ($pages > 1) {\n            // Set rewrite URL, if needed\n            if ($this->_config->get('main.enableRewriteRules')) {\n                $link = new PMF_Link(PMF_Link::getSystemRelativeUri('index.php'), $this->_config);\n                $useRewrite = true;\n                $rewriteUrl = sprintf(\n                    '%scategory/%d/%%d/%s.html',\n                    PMF_Link::getSystemRelativeUri('index.php'),\n                    $categoryId,\n                    $link->getSEOItemTitle($title)\n                );\n            } else {\n                $useRewrite = false;\n                $rewriteUrl = '';\n            }\n            $baseUrl = sprintf(\n                '%s?%saction=show&amp;cat=%d&amp;seite=%d',\n                PMF_Link::getSystemRelativeUri(),\n                (empty($sids) ? '' : $sids),\n                $categoryId,\n                $page\n            );\n\n            $options = array(\n                'baseUrl' => $baseUrl,\n                'total' => $num,\n                'perPage' => $this->_config->get('records.numberOfRecordsPerPage'),\n                'useRewrite' => $useRewrite,\n                'rewriteUrl' => $rewriteUrl,\n                'pageParamName' => 'seite',\n            );\n\n            $pagination = new PMF_Pagination($this->_config, $options);\n            $output    .= $pagination->render();\n        }\n\n        return $output;\n    }\n\n    /**\n     * This function returns all not expired records from the given record ids.\n     *\n     * @param array  $record_ids Array of record ids\n     * @param string $orderby    Order by\n     * @param string $sortby     Sort by\n     *\n     * @return string\n     */\n    public function showAllRecordsByIds(Array $record_ids, $orderby = 'fd.id', $sortby = 'ASC')\n    {\n        global $sids;\n\n        $records = implode(', ', $record_ids);\n        $page = PMF_Filter::filterInput(INPUT_GET, 'seite', FILTER_VALIDATE_INT, 1);\n        $tagging_id = PMF_Filter::filterInput(INPUT_GET, 'tagging_id', FILTER_VALIDATE_INT);\n        $output = '';\n\n        $now = date('YmdHis');\n        $query = sprintf(\"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fcr.category_id AS category_id,\n                fv.visits AS visits\n            FROM\n                %sfaqdata AS fd\n            LEFT JOIN\n                %sfaqcategoryrelations AS fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqvisits AS fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND\n                fd.active = 'yes'\n            AND\n                fd.id IN (%s)\n            AND\n                fd.lang = '%s'\n                %s\n            ORDER BY\n                %s %s\",\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $now,\n            $now,\n            $records,\n            $this->_config->getLanguage()->getLanguage(),\n            $this->queryPermission($this->groupSupport),\n            $this->_config->getDb()->escape($orderby),\n            $this->_config->getDb()->escape($sortby));\n\n        $result = $this->_config->getDb()->query($query);\n\n        $num = $this->_config->getDb()->numRows($result);\n        $pages = ceil($num / $this->_config->get('records.numberOfRecordsPerPage'));\n\n        if ($page == 1) {\n            $first = 0;\n        } else {\n            $first = ($page * $this->_config->get('records.numberOfRecordsPerPage')) - $this->_config->get('records.numberOfRecordsPerPage');\n        }\n\n        if ($num > 0) {\n            if ($pages > 1) {\n                $output .= sprintf('<p><strong>%s %s %s</strong></p>',\n                    $this->pmf_lang['msgPage'].$page,\n                    $this->pmf_lang['msgVoteFrom'],\n                    $pages.$this->pmf_lang['msgPages']);\n            }\n            $output .= '<ul class=\"phpmyfaq_ul\">';\n            $counter = 0;\n            $displayedCounter = 0;\n\n            $lastFaqId = 0;\n            while (($row = $this->_config->getDb()->fetchObject($result)) && $displayedCounter < $this->_config->get('records.numberOfRecordsPerPage')) {\n                ++$counter;\n                if ($counter <= $first) {\n                    continue;\n                }\n                ++$displayedCounter;\n\n                if ($lastFaqId == $row->id) {\n                    continue; // Don't show multiple FAQs\n                }\n\n                if (empty($row->visits)) {\n                    $visits = 0;\n                } else {\n                    $visits = $row->visits;\n                }\n\n                $title = $row->thema;\n                $url = sprintf(\n                    '%s?%saction=artikel&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    PMF_Link::getSystemRelativeUri(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new PMF_Link($url, $this->_config);\n                $oLink->itemTitle = $row->thema;\n                $oLink->text = $title;\n                $oLink->tooltip = $title;\n                $listItem = sprintf(\n                    '<li>%s<br /><small>(%s)</small></li>',\n                    $oLink->toHtmlAnchor(),\n                    $this->plr->GetMsg('plmsgViews', $visits)\n                );\n\n                $output .= $listItem;\n\n                $lastFaqId = $row->id;\n            }\n            $output .= '</ul><span id=\"totFaqRecords\" style=\"display: none;\">'.$num.'</span>';\n        } else {\n            return false;\n        }\n\n        if ($num > $this->_config->get('records.numberOfRecordsPerPage')) {\n            $output .= '<p class=\"text-center\"><strong>';\n            if (!isset($page)) {\n                $page = 1;\n            }\n            $vor = $page - 1;\n            $next = $page + 1;\n            if ($vor != 0) {\n                $url = $sids.'&amp;action=search&amp;tagging_id='.$tagging_id.'&amp;seite='.$vor;\n                $oLink = new PMF_Link(PMF_Link::getSystemRelativeUri().'?'.$url, $this->_config);\n                $oLink->itemTitle = 'tag';\n                $oLink->text = $this->pmf_lang['msgPrevious'];\n                $oLink->tooltip = $this->pmf_lang['msgPrevious'];\n                $output          .= '[ '.$oLink->toHtmlAnchor().' ]';\n            }\n            $output .= ' ';\n            if ($next <= $pages) {\n                $url = $sids.'&amp;action=search&amp;tagging_id='.$tagging_id.'&amp;seite='.$next;\n                $oLink = new PMF_Link(PMF_Link::getSystemRelativeUri().'?'.$url, $this->_config);\n                $oLink->itemTitle = 'tag';\n                $oLink->text = $this->pmf_lang['msgNext'];\n                $oLink->tooltip = $this->pmf_lang['msgNext'];\n                $output          .= '[ '.$oLink->toHtmlAnchor().' ]';\n            }\n            $output .= '</strong></p>';\n        }\n\n        return $output;\n    }\n\n    /**\n     * Returns an array with all data from a FAQ record.\n     *\n     * @param int  $faqId         FAQ ID\n     * @param int  $faqRevisionId Revision ID\n     * @param bool $isAdmin       Must be true if it is called by an admin/author context\n     */\n    public function getRecord($faqId, $faqRevisionId = null, $isAdmin = false)\n    {\n        global $PMF_LANG;\n\n        $currentLanguage = $this->_config->getLanguage()->getLanguage();\n        $defaultLanguage = $this->_config->getDefaultLanguage();\n\n        $result = $this->getRecordResult($faqId, $currentLanguage, $faqRevisionId, $isAdmin);\n\n        if (0 === $this->_config->getDb()->numRows($result)) {\n            $result = $this->getRecordResult($faqId, $defaultLanguage, $faqRevisionId, $isAdmin);\n        }\n\n        if ($row = $this->_config->getDb()->fetchObject($result)) {\n            $question = nl2br($row->thema);\n            $answer = $row->content;\n            $active = ('yes' === $row->active);\n            $expired = (date('YmdHis') > $row->date_end);\n\n            if (!$isAdmin) {\n                if (!$active) {\n                    $answer = $this->pmf_lang['err_inactiveArticle'];\n                }\n                if ($expired) {\n                    $answer = $this->pmf_lang['err_expiredArticle'];\n                }\n            }\n\n            $this->faqRecord = [\n                'id' => $row->id,\n                'lang' => $row->lang,\n                'solution_id' => $row->solution_id,\n                'revision_id' => $row->revision_id,\n                'active' => $row->active,\n                'sticky' => $row->sticky,\n                'keywords' => $row->keywords,\n                'title' => $question,\n                'content' => $answer,\n                'author' => $row->author,\n                'email' => $row->email,\n                'comment' => $row->comment,\n                'date' => PMF_Date::createIsoDate($row->updated),\n                'dateStart' => $row->date_start,\n                'dateEnd' => $row->date_end,\n                'linkState' => $row->links_state,\n                'linkCheckDate' => $row->links_check_date,\n                'notes' => $row->notes,\n                'created' => $row->created,\n            ];\n        } else {\n            $this->faqRecord = [\n                'id' => $faqId,\n                'lang' => $currentLanguage,\n                'solution_id' => 42,\n                'revision_id' => $faqRevisionId,\n                'active' => 'no',\n                'sticky' => 0,\n                'keywords' => '',\n                'title' => '',\n                'content' => $PMF_LANG['msgAccessDenied'],\n                'author' => '',\n                'email' => '',\n                'comment' => '',\n                'date' => PMF_Date::createIsoDate(date('YmdHis')),\n                'dateStart' => '',\n                'dateEnd' => '',\n                'linkState' => '',\n                'linkCheckDate' => '',\n                'notes' => '',\n                'created' => date('c'),\n            ];\n        }\n    }\n\n    /**\n     * Executes a query to retrieve a single FAQ.\n     *\n     * @param int    $faqId\n     * @param string $faqLanguage\n     * @param int    $faqRevisionId\n     * @param bool   $isAdmin\n     *\n     * @return mixed\n     */\n    public function getRecordResult($faqId, $faqLanguage, $faqRevisionId = null, $isAdmin = false)\n    {\n        $query = sprintf(\n            \"SELECT\n                 id, lang, solution_id, revision_id, active, sticky, keywords,\n                 thema, content, author, email, comment, updated, links_state,\n                 links_check_date, date_start, date_end, created, notes\n            FROM\n                %s%s fd\n            LEFT JOIN\n                %sfaqdata_group fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.id = %d\n            %s\n            AND\n                fd.lang = '%s'\n                %s\",\n            PMF_Db::getTablePrefix(),\n            isset($faqRevisionId) ? 'faqdata_revisions' : 'faqdata',\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $faqId,\n            isset($faqRevisionId) ? 'AND revision_id = '.$faqRevisionId : '',\n            $faqLanguage,\n            ($isAdmin) ? 'AND 1=1' : $this->queryPermission($this->groupSupport)\n        );\n\n        return $this->_config->getDb()->query($query);\n    }\n\n    /**\n     * Return records from given IDs\n     *\n     * @param array $faqIds\n     *\n     * @return array\n     */\n    public function getRecordsByIds(Array $faqIds)\n    {\n        $faqRecords = [];\n\n        $query = sprintf(\n            \"SELECT\n                 fd.id AS id,\n                 fd.lang AS lang,\n                 fd.thema AS question,\n                 fd.content AS answer,\n                 fd.updated AS updated,\n                 fd.created AS created,\n                 fcr.category_id AS category_id,\n                 fv.visits AS visits\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqdata_group fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqvisits AS fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_user fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.id IN (%s)\n            AND\n                fd.lang = '%s'\n                %s\",\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            implode(',', $faqIds),\n            $this->_config->getLanguage()->getLanguage(),\n            $this->queryPermission($this->groupSupport)\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        $faqHelper = new PMF_Helper_Faq($this->_config);\n        while ($row = $this->_config->getDb()->fetchObject($result)) {\n            if (empty($row->visits)) {\n                $visits = 0;\n            } else {\n                $visits = $row->visits;\n            }\n\n            $url = sprintf(\n                '%sindex.php?action=artikel&cat=%d&id=%d&artlang=%s',\n                $this->_config->getDefaultUrl(),\n                $row->category_id,\n                $row->id,\n                $row->lang\n            );\n            $oLink = new PMF_Link($url, $this->_config);\n            $oLink->itemTitle = $oLink->text = $oLink->tooltip = $row->question;\n\n            $faqRecords[] = [\n                'record_id' => (int)$row->id,\n                'record_lang' => $row->lang,\n                'category_id' => (int)$row->category_id,\n                'record_title' => $row->question,\n                'record_preview' => $faqHelper->renderAnswerPreview($row->answer, 25),\n                'record_link' => $oLink->toString(),\n                'record_updated' => PMF_Date::createIsoDate($row->updated).':00',\n                'visits' => (int)$visits,\n                'record_created' => $row->created\n            ];\n        }\n\n        return $faqRecords;\n    }\n\n    /**\n     * Adds a new record.\n     *\n     * @param array $data      Array of FAQ data\n     * @param bool  $newRecord Do not create a new ID if false\n     *\n     * @return int\n     */\n    public function addRecord(Array $data, $newRecord = true)\n    {\n        if ($newRecord) {\n            $recordId = $this->_config->getDb()->nextId(PMF_Db::getTablePrefix().'faqdata', 'id');\n        } else {\n            $recordId = $data['id'];\n        }\n\n        // Add new entry\n        $query = sprintf(\"\n            INSERT INTO\n                %sfaqdata\n            VALUES\n                (%d, '%s', %d, %d, '%s', %d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %d, '%s', '%s', '%s', '%s')\",\n            PMF_Db::getTablePrefix(),\n            $recordId,\n            $data['lang'],\n            $this->getSolutionId(),\n            0,\n            $data['active'],\n            $data['sticky'],\n            $this->_config->getDb()->escape($data['keywords']),\n            $this->_config->getDb()->escape($data['thema']),\n            $this->_config->getDb()->escape($data['content']),\n            $this->_config->getDb()->escape($data['author']),\n            $data['email'],\n            $data['comment'],\n            $data['date'],\n            $data['linkState'],\n            $data['linkDateCheck'],\n            $data['dateStart'],\n            $data['dateEnd'],\n            date('Y-m-d H:i:s'),\n            $data['notes']\n        );\n\n        $this->_config->getDb()->query($query);\n\n        return $recordId;\n    }\n\n    /**\n     * Updates a record.\n     *\n     * @param array $data Array of FAQ data\n     *\n     * @return bool\n     */\n    public function updateRecord(Array $data)\n    {\n        // Update entry\n        $query = sprintf(\"\n            UPDATE\n                %sfaqdata\n            SET\n                revision_id = %d,\n                active = '%s',\n                sticky = %d,\n                keywords = '%s',\n                thema = '%s',\n                content = '%s',\n                author = '%s',\n                email = '%s',\n                comment = '%s',\n                updated = '%s',\n                links_state = '%s',\n                links_check_date = %d,\n                date_start = '%s',\n                date_end = '%s',\n                notes = '%s'\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $data['revision_id'],\n            $data['active'],\n            $data['sticky'],\n            $this->_config->getDb()->escape($data['keywords']),\n            $this->_config->getDb()->escape($data['thema']),\n            $this->_config->getDb()->escape($data['content']),\n            $this->_config->getDb()->escape($data['author']),\n            $data['email'],\n            $data['comment'],\n            $data['date'],\n            $data['linkState'],\n            $data['linkDateCheck'],\n            $data['dateStart'],\n            $data['dateEnd'],\n            $data['notes'],\n            $data['id'],\n            $data['lang']\n        );\n\n        $this->_config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Deletes a record and all the dependencies.\n     *\n     * @param int    $recordId   Record id\n     * @param string $recordLang Record language\n     *\n     * @return bool\n     */\n    public function deleteRecord($recordId, $recordLang)\n    {\n        $solutionId = $this->getSolutionIdFromId($recordId, $recordLang);\n\n        $queries = array(\n            sprintf(\n                \"DELETE FROM %sfaqchanges WHERE beitrag = %d AND lang = '%s'\",\n                PMF_Db::getTablePrefix(),\n                $recordId,\n                $recordLang\n            ),\n            sprintf(\n                \"DELETE FROM %sfaqcategoryrelations WHERE record_id = %d AND record_lang = '%s'\",\n                PMF_Db::getTablePrefix(),\n                $recordId,\n                $recordLang\n            ),\n            sprintf(\n                \"DELETE FROM %sfaqdata WHERE id = %d AND lang = '%s'\",\n                PMF_Db::getTablePrefix(),\n                $recordId,\n                $recordLang\n            ),\n            sprintf(\n                \"DELETE FROM %sfaqdata_revisions WHERE id = %d AND lang = '%s'\",\n                PMF_Db::getTablePrefix(),\n                $recordId,\n                $recordLang\n            ),\n            sprintf(\n                \"DELETE FROM %sfaqvisits WHERE id = %d AND lang = '%s'\",\n                PMF_Db::getTablePrefix(),\n                $recordId,\n                $recordLang\n            ),\n            sprintf(\n                'DELETE FROM %sfaqdata_user WHERE record_id = %d',\n                PMF_Db::getTablePrefix(),\n                $recordId,\n                $recordLang\n            ),\n            sprintf(\n                'DELETE FROM %sfaqdata_group WHERE record_id = %d',\n                PMF_Db::getTablePrefix(),\n                $recordId,\n                $recordLang\n            ),\n            sprintf(\n                'DELETE FROM %sfaqdata_tags WHERE record_id = %d',\n                PMF_Db::getTablePrefix(),\n                $recordId\n            ),\n            sprintf(\n                'DELETE FROM %sfaqdata_tags WHERE %sfaqdata_tags.record_id NOT IN (SELECT %sfaqdata.id FROM %sfaqdata)',\n                PMF_Db::getTablePrefix(),\n                PMF_Db::getTablePrefix(),\n                PMF_Db::getTablePrefix(),\n                PMF_Db::getTablePrefix()\n            ),\n            sprintf(\n                'DELETE FROM %sfaqcomments WHERE id = %d',\n                PMF_Db::getTablePrefix(),\n                $recordId\n            ),\n            sprintf(\n                'DELETE FROM %sfaqvoting WHERE artikel = %d',\n                PMF_Db::getTablePrefix(),\n                $recordId\n            ),\n        );\n\n        foreach ($queries as $query) {\n            $this->_config->getDb()->query($query);\n        }\n\n        // Delete possible attachments\n        $attId = PMF_Attachment_Factory::fetchByRecordId($this->_config, $recordId);\n        $attachment = PMF_Attachment_Factory::create($attId);\n        $attachment->delete();\n\n        // Delete possible Elasticsearch documents\n        if ($this->_config->get('search.enableElasticsearch')) {\n            $esInstance = new PMF_Instance_Elasticsearch($this->_config);\n            $esInstance->delete($solutionId);\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks if a record is already translated.\n     *\n     * @param int    $record_id   Record id\n     * @param string $record_lang Record language\n     *\n     * @return bool\n     */\n    public function isAlreadyTranslated($record_id, $record_lang)\n    {\n        $query = sprintf(\"\n            SELECT\n                id, lang\n            FROM\n                %sfaqdata\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $record_id,\n            $record_lang);\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($this->_config->getDb()->numRows($result)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks, if comments are disabled for the FAQ record.\n     *\n     * @param int    $record_id   Id of FAQ or news entry\n     * @param string $record_lang Language\n     * @param string $record_type Type of comment: faq or news\n     *\n     * @return bool true, if comments are disabled\n     */\n    public function commentDisabled($record_id, $record_lang, $record_type = 'faq')\n    {\n        if ('news' == $record_type) {\n            $table = 'faqnews';\n        } else {\n            $table = 'faqdata';\n        }\n\n        $query = sprintf(\"\n            SELECT\n                comment\n            FROM\n                %s%s\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $table,\n            $record_id,\n            $record_lang\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($row = $this->_config->getDb()->fetchObject($result)) {\n            return ($row->comment === 'y') ? false : true;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Adds new category relations to a record.\n     *\n     * @param array  $categories Array of categories\n     * @param int    $record_id  Record id\n     * @param string $language   Language\n     *\n     * @return int\n     */\n    public function addCategoryRelations(Array $categories, $record_id, $language)\n    {\n        if (!is_array($categories)) {\n            return false;\n        }\n\n        foreach ($categories as $_category) {\n            $this->_config->getDb()->query(sprintf(\n                \"INSERT INTO\n                    %sfaqcategoryrelations\n                VALUES\n                    (%d, '%s', %d, '%s')\",\n                PMF_Db::getTablePrefix(),\n                $_category,\n                $language,\n                $record_id,\n                $language));\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds new category relation to a record.\n     *\n     * @param mixed  $category  Category or array of categories\n     * @param int    $record_id Record id\n     * @param string $language  Language\n     *\n     * @return bool\n     */\n    public function addCategoryRelation($category, $record_id, $language)\n    {\n        // Just a fallback when (wrong case) $category is an array\n        if (is_array($category)) {\n            $this->addCategoryRelations($category, $record_id, $language);\n        }\n        $categories[] = $category;\n\n        return $this->addCategoryRelations($categories, $record_id, $language);\n    }\n\n    /**\n     * Deletes category relations to a record.\n     *\n     * @param int    $record_id   Record id\n     * @param string $record_lang Language\n     *\n     * @return bool\n     */\n    public function deleteCategoryRelations($record_id, $record_lang)\n    {\n        $query = sprintf(\"\n            DELETE FROM\n                %sfaqcategoryrelations\n            WHERE\n                record_id = %d\n            AND\n                record_lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $record_id,\n            $record_lang);\n        $this->_config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Returns an array with all data from a FAQ record.\n     *\n     * @param int $solutionId Solution ID\n     */\n    public function getRecordBySolutionId($solutionId)\n    {\n        $query = sprintf(\n            'SELECT\n                *\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqdata_group fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.solution_id = %d\n                %s',\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $solutionId,\n            $this->queryPermission($this->groupSupport)\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($row = $this->_config->getDb()->fetchObject($result)) {\n            $question = nl2br($row->thema);\n            $content = $row->content;\n            $active = ('yes' == $row->active);\n            $expired = (date('YmdHis') > $row->date_end);\n\n            if (!$active) {\n                $content = $this->pmf_lang['err_inactiveArticle'];\n            }\n            if ($expired) {\n                $content = $this->pmf_lang['err_expiredArticle'];\n            }\n\n            $this->faqRecord = array(\n                'id' => $row->id,\n                'lang' => $row->lang,\n                'solution_id' => $row->solution_id,\n                'revision_id' => $row->revision_id,\n                'active' => $row->active,\n                'sticky' => $row->sticky,\n                'keywords' => $row->keywords,\n                'title' => $question,\n                'content' => $content,\n                'author' => $row->author,\n                'email' => $row->email,\n                'comment' => $row->comment,\n                'date' => PMF_Date::createIsoDate($row->updated),\n                'dateStart' => $row->date_start,\n                'dateEnd' => $row->date_end,\n                'linkState' => $row->links_state,\n                'linkCheckDate' => $row->links_check_date,\n                'notes' => $row->notes\n            );\n        }\n    }\n\n    /**\n     * Gets the record ID from a given solution ID.\n     *\n     * @param int $solutionId Solution ID\n     *\n     * @return array\n     */\n    public function getIdFromSolutionId($solutionId)\n    {\n        $query = sprintf('\n            SELECT\n                fd.id,\n                fd.lang,\n                fd.thema AS question,\n                fd.content, \n                fcr.category_id AS category_id\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            WHERE\n                fd.solution_id = %d',\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $solutionId\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($row = $this->_config->getDb()->fetchObject($result)) {\n            return [\n                'id' => $row->id,\n                'lang' => $row->lang,\n                'question' => $row->question,\n                'content' => $row->content,\n                'category_id' => $row->category_id\n            ];\n        }\n\n        return [];\n    }\n\n    /**\n     * Returns the solution ID from a given ID and language\n     *\n     * @param integer $faqId\n     * @param string $faqLang\n     *\n     * @return int\n     */\n    public function getSolutionIdFromId($faqId, $faqLang)\n    {\n        $query = sprintf(\"\n            SELECT\n                solution_id\n            FROM\n                %sfaqdata\n            WHERE\n                id = %d\n                AND\n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            (int) $faqId,\n            $this->_config->getDb()->escape($faqLang)\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($row = $this->_config->getDb()->fetchObject($result)) {\n            return $row->solution_id;\n        }\n\n        return $this->getSolutionId();\n    }\n\n    /**\n     * Gets the latest solution id for a FAQ record.\n     *\n     * @return int\n     */\n    public function getSolutionId()\n    {\n        $latestId = 0;\n\n        $query = sprintf('\n            SELECT\n                MAX(solution_id) AS solution_id\n            FROM\n                %sfaqdata',\n            PMF_Db::getTablePrefix()\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($result && $row = $this->_config->getDb()->fetchObject($result)) {\n            $latestId = $row->solution_id;\n        }\n\n        if ($latestId < PMF_SOLUTION_ID_START_VALUE) {\n            $nextSolutionId = PMF_SOLUTION_ID_START_VALUE;\n        } else {\n            $nextSolutionId = $latestId + PMF_SOLUTION_ID_INCREMENT_VALUE;\n        }\n\n        return $nextSolutionId;\n    }\n\n    /**\n     * Returns an array with all data from all FAQ records.\n     *\n     * @param int    $sortType  Sorting type\n     * @param array  $condition Condition\n     * @param string $sortOrder Sorting order\n     */\n    public function getAllRecords($sortType = FAQ_SORTING_TYPE_CATID_FAQID, Array $condition = null, $sortOrder = 'ASC')\n    {\n        $where = '';\n        if (!is_null($condition)) {\n            $num = count($condition);\n            $where = 'WHERE ';\n            foreach ($condition as $field => $data) {\n                --$num;\n                $where .= $field;\n                if (is_array($data)) {\n                    $where .= ' IN (';\n                    $separator = '';\n                    foreach ($data as $value) {\n                        $where .= $separator.\"'\".$this->_config->getDb()->escape($value).\"'\";\n                        $separator = ', ';\n                    }\n                    $where .= ')';\n                } else {\n                    $where .= \" = '\".$this->_config->getDb()->escape($data).\"'\";\n                }\n                if ($num > 0) {\n                    $where .= ' AND ';\n                }\n            }\n        }\n\n        switch ($sortType) {\n\n            case FAQ_SORTING_TYPE_CATID_FAQID:\n                $orderBy = sprintf('\n            ORDER BY\n                fcr.category_id,\n                fd.id %s',\n                    $sortOrder);\n                break;\n\n            case FAQ_SORTING_TYPE_FAQID:\n                $orderBy = sprintf('\n            ORDER BY\n                fd.id %s',\n                    $sortOrder);\n                break;\n\n            case FAQ_SORTING_TYPE_FAQTITLE_FAQID:\n                $orderBy = sprintf('\n            ORDER BY\n                fcr.category_id,\n                fd.thema %s',\n                    $sortOrder);\n                break;\n\n            case FAQ_SORTING_TYPE_DATE_FAQID:\n                $orderBy = sprintf('\n            ORDER BY\n                fcr.category_id,\n                fd.updated %s',\n                    $sortOrder);\n                break;\n\n            default:\n                $orderBy = '';\n                break;\n        }\n\n        $query = sprintf('\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fcr.category_id AS category_id,\n                fd.solution_id AS solution_id,\n                fd.revision_id AS revision_id,\n                fd.active AS active,\n                fd.sticky AS sticky,\n                fd.keywords AS keywords,\n                fd.thema AS thema,\n                fd.content AS content,\n                fd.author AS author,\n                fd.email AS email,\n                fd.comment AS comment,\n                fd.updated AS updated,\n                fd.links_state AS links_state,\n                fd.links_check_date AS links_check_date,\n                fd.date_start AS date_start,\n                fd.date_end AS date_end,\n                fd.sticky AS sticky,\n                fd.created AS created,\n                fd.notes AS notes\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            %s\n            %s\n            %s',\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $where,\n            $this->queryPermission($this->groupSupport),\n            $orderBy\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        while ($row = $this->_config->getDb()->fetchObject($result)) {\n            $content = $row->content;\n            $active = ('yes' == $row->active);\n            $expired = (date('YmdHis') > $row->date_end);\n\n            if (!$active) {\n                $content = $this->pmf_lang['err_inactiveArticle'];\n            }\n            if ($expired) {\n                $content = $this->pmf_lang['err_expiredArticle'];\n            }\n\n            $this->faqRecords[] = [\n                'id' => $row->id,\n                'category_id' => $row->category_id,\n                'lang' => $row->lang,\n                'solution_id' => $row->solution_id,\n                'revision_id' => $row->revision_id,\n                'active' => $row->active,\n                'sticky' => $row->sticky,\n                'keywords' => $row->keywords,\n                'title' => $row->thema,\n                'content' => $content,\n                'author' => $row->author,\n                'email' => $row->email,\n                'comment' => $row->comment,\n                'updated' => PMF_Date::createIsoDate($row->updated, 'Y-m-d H:i:s'),\n                'dateStart' => $row->date_start,\n                'dateEnd' => $row->date_end,\n                'created' => $row->created,\n                'notes' => $row->notes\n            ];\n        }\n    }\n\n    /**\n     * Returns the FAQ record title from the ID and language.\n     *\n     * @param int $id Record id\n     *\n     * @return string\n     */\n    public function getRecordTitle($id)\n    {\n        if (isset($this->faqRecord['id']) && ($this->faqRecord['id'] == $id)) {\n            return $this->faqRecord['title'];\n        }\n\n        $question = '';\n\n        $query = sprintf(\n            \"SELECT\n                thema AS question\n            FROM\n                %sfaqdata\n            WHERE\n                id = %d AND lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $id,\n            $this->_config->getLanguage()->getLanguage()\n            );\n        $result = $this->_config->getDb()->query($query);\n\n        if ($this->_config->getDb()->numRows($result) > 0) {\n            while ($row = $this->_config->getDb()->fetchObject($result)) {\n                $question = $row->question;\n            }\n        } else {\n            $question = $this->pmf_lang['no_cats'];\n        }\n\n        return $question;\n    }\n\n    /**\n     * Gets all revisions from a given record ID.\n     *\n     * @param int    $recordId   Record id\n     * @param string $recordLang Record language\n     *\n     * @return array\n     */\n    public function getRevisionIds($recordId, $recordLang)\n    {\n        $revisionData = [];\n\n        $query = sprintf(\"\n            SELECT\n                revision_id, updated, author\n            FROM\n                %sfaqdata_revisions\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\n            ORDER BY\n                revision_id\",\n            PMF_Db::getTablePrefix(),\n            $recordId,\n            $recordLang\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($this->_config->getDb()->numRows($result) > 0) {\n            while ($row = $this->_config->getDb()->fetchObject($result)) {\n                $revisionData[] = [\n                    'revision_id' => $row->revision_id,\n                    'updated' => $row->updated,\n                    'author' => $row->author,\n                ];\n            }\n        }\n\n        return $revisionData;\n    }\n\n    /**\n     * Adds a new revision from a given record ID.\n     *\n     * @param int    $record_id   Record id\n     * @param string $record_lang Record language\n     *\n     * @return array\n     */\n    public function addNewRevision($record_id, $record_lang)\n    {\n        $query = sprintf(\"\n            INSERT INTO\n                %sfaqdata_revisions\n            SELECT * FROM\n                %sfaqdata\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $record_id,\n            $record_lang);\n        $this->_config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Returns the keywords of a FAQ record from the ID and language.\n     *\n     * @param int $id record id\n     *\n     * @return string\n     */\n    public function getRecordKeywords($id)\n    {\n        if (isset($this->faqRecord['id']) && ($this->faqRecord['id'] == $id)) {\n            return $this->faqRecord['keywords'];\n        }\n\n        $query = sprintf(\n            \"SELECT\n                keywords\n            FROM\n                %sfaqdata\n            WHERE id = %d AND lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $id,\n            $this->_config->getLanguage()->getLanguage());\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($this->_config->getDb()->numRows($result) > 0) {\n            $row = $this->_config->getDb()->fetchObject($result);\n\n            return PMF_String::htmlspecialchars($row->keywords, ENT_QUOTES, 'utf-8');\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * Returns a answer preview of the FAQ record.\n     *\n     * @param int $recordId  FAQ record ID\n     * @param int $wordCount Number of words, default: 12\n     *\n     * @return string\n     */\n    public function getRecordPreview($recordId, $wordCount = 12)\n    {\n        if (isset($this->faqRecord['id']) && ((int)$this->faqRecord['id'] === (int)$recordId)) {\n            $answerPreview = $this->faqRecord['content'];\n\n            return PMF_Utils::makeShorterText($answerPreview, $wordCount);\n        }\n\n        $query = sprintf(\"\n            SELECT\n                content as answer\n            FROM\n                %sfaqdata\n            WHERE \n                id = %d \n            AND \n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $recordId,\n            $this->_config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($this->_config->getDb()->numRows($result) > 0) {\n            $row = $this->_config->getDb()->fetchObject($result);\n            $answerPreview = strip_tags($row->answer);\n        } else {\n            $answerPreview = $this->_config->get('main.metaDescription');\n        }\n\n        return PMF_Utils::makeShorterText($answerPreview, $wordCount);\n    }\n\n    /**\n     * Returns the number of activated and not expired records, optionally\n     * not limited to the current language.\n     *\n     * @param string $language Language\n     *\n     * @return int\n     */\n    public function getNumberOfRecords($language = null)\n    {\n        $now = date('YmdHis');\n\n        $query = sprintf(\"\n            SELECT\n                id\n            FROM\n                %sfaqdata\n            WHERE\n                active = 'yes'\n            %s\n            AND\n                date_start <= '%s'\n            AND\n                date_end >= '%s'\",\n            PMF_Db::getTablePrefix(),\n            null == $language ? '' : \"AND lang = '\".$language.\"'\",\n            $now,\n            $now\n        );\n\n        $num = $this->_config->getDb()->numRows($this->_config->getDb()->query($query));\n\n        if ($num > 0) {\n            return $num;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * This function generates a list with the most voted or most visited records.\n     *\n     * @param string $type Type definition visits/voted\n     *\n     * @since  2009-11-03\n     *\n     * @author Max K\u00f6hler <me@max-koehler.de>\n     *\n     * @return array\n     */\n    public function getTopTen($type = 'visits')\n    {\n        if ('visits' == $type) {\n            $result = $this->getTopTenData(PMF_NUMBER_RECORDS_TOPTEN, 0, $this->_config->getLanguage()->getLanguage());\n        } else {\n            $result = $this->getTopVotedData(PMF_NUMBER_RECORDS_TOPTEN, $this->_config->getLanguage()->getLanguage());\n        }\n        $output = [];\n\n        if (count($result) > 0) {\n            foreach ($result as $row) {\n                if ('visits' == $type) {\n                    $output['title'][] = PMF_Utils::makeShorterText($row['question'], 8);\n                    $output['preview'][] = $row['question'];\n                    $output['url'][] = $row['url'];\n                    $output['visits'][] = $this->plr->GetMsg('plmsgViews', $row['visits']);\n                } else {\n                    $output['title'][] = PMF_Utils::makeShorterText($row['question'], 8);\n                    $output['preview'][] = $row['question'];\n                    $output['url'][] = $row['url'];\n                    $output['voted'][] = sprintf(\n                        '%s %s 5 - %s',\n                        round($row['avg'], 2),\n                        $this->pmf_lang['msgVoteFrom'],\n                        $this->plr->GetMsg('plmsgVotes', $row['user'])\n                    );\n                }\n            }\n        } else {\n            $output['error'] = $this->pmf_lang['err_noTopTen'];\n        }\n\n        return $output;\n    }\n\n    /**\n     * This function generates the list with the latest published records.\n     *\n     * @return array\n     */\n    public function getLatest()\n    {\n        $date = new PMF_Date($this->_config);\n        $result = $this->getLatestData(PMF_NUMBER_RECORDS_LATEST, $this->_config->getLanguage()->getLanguage());\n        $output = [];\n\n        if (count($result) > 0) {\n            foreach ($result as $row) {\n                $output['url'][] = $row['url'];\n                $output['title'][] = PMF_Utils::makeShorterText($row['question'], 8);\n                $output['preview'][] = $row['question'];\n                $output['date'][] = $date->format(PMF_Date::createIsoDate($row['date']));\n            }\n        } else {\n            $output['error'] = $this->pmf_lang['err_noArticles'];\n        }\n\n        return $output;\n    }\n\n    /**\n     * Deletes a question for the table faqquestions.\n     *\n     * @param int $questionId\n     *\n     * @return bool\n     */\n    public function deleteQuestion($questionId)\n    {\n        $delete = sprintf(\"\n            DELETE FROM\n                %sfaqquestions\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $questionId,\n            $this->_config->getLanguage()->getLanguage()\n        );\n\n        $this->_config->getDb()->query($delete);\n\n        return true;\n    }\n\n     /**\n      * Returns the visibility of a question.\n      *\n      * @param   int $questionId\n      *\n      * @return  string\n      */\n     public function getVisibilityOfQuestion($questionId)\n     {\n         $query = sprintf(\"\n            SELECT\n                is_visible\n            FROM\n                %sfaqquestions\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $questionId,\n            $this->_config->getLanguage()->getLanguage()\n        );\n\n         $result = $this->_config->getDb()->query($query);\n         if ($this->_config->getDb()->numRows($result) > 0) {\n             $row = $this->_config->getDb()->fetchObject($result);\n\n             return $row->is_visible;\n         }\n\n         return;\n     }\n\n    /**\n     * Sets the visibility of a question.\n     *\n     * @param int    $questionId\n     * @param string $isVisible\n     *\n     * @return bool\n     */\n    public function setVisibilityOfQuestion($questionId, $isVisible)\n    {\n        $query = sprintf(\"\n            UPDATE\n                %sfaqquestions\n            SET\n                is_visible = '%s'\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $isVisible,\n            $questionId,\n            $this->_config->getLanguage()->getLanguage()\n        );\n\n        $this->_config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * This function generates a data-set with the most voted FAQs.\n     *  \n     * @param int    $count    Number of records\n     * @param string $language Language\n     *\n     * @return array\n     */\n    public function getTopVotedData($count = PMF_NUMBER_RECORDS_TOPTEN, $language = null)\n    {\n        global $sids;\n\n        $topten = $data = [];\n\n        $now = date('YmdHis');\n        $query =\n'            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fd.updated AS updated,\n                fcr.category_id AS category_id,\n                (fv.vote/fv.usr) AS avg,\n                fv.usr AS user\n            FROM\n                '.PMF_Db::getTablePrefix().'faqvoting fv,\n                '.PMF_Db::getTablePrefix().'faqdata fd\n            LEFT JOIN\n                '.PMF_Db::getTablePrefix().'faqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                '.PMF_Db::getTablePrefix().'faqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                '.PMF_Db::getTablePrefix().'faqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                    fd.date_start <= \\''.$now.'\\'\n                AND fd.date_end   >= \\''.$now.'\\'\n                AND fd.id = fv.artikel\n                AND fd.active = \\'yes\\'';\n\n        if (isset($categoryId) && is_numeric($categoryId) && ($categoryId != 0)) {\n            $query .= '\n            AND\n                fcr.category_id = \\''.$categoryId.'\\'';\n        }\n        if (isset($language) && PMF_Language::isASupportedLanguage($language)) {\n            $query .= '\n            AND\n                fd.lang = \\''.$language.'\\'';\n        }\n        $query .= '\n                '.$this->queryPermission($this->groupSupport).'\n            ORDER BY\n                avg DESC';\n\n        $result = $this->_config->getDb()->query($query);\n\n        $i = 1;\n        $oldId = 0;\n        while (($row = $this->_config->getDb()->fetchObject($result)) && $i <= $count) {\n            if ($oldId != $row->id) {\n                $data['avg'] = $row->avg;\n                $data['question'] = $row->thema;\n                $data['date'] = $row->updated;\n                $data['user'] = $row->user;\n\n                $title = $row->thema;\n                $url = sprintf(\n                    '%s?%saction=artikel&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    PMF_Link::getSystemRelativeUri(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new PMF_Link($url, $this->_config);\n                $oLink->itemTitle = $row->thema;\n                $oLink->tooltip = $title;\n                $data['url'] = $oLink->toString();\n\n                $topten[] = $data;\n                ++$i;\n            }\n            $oldId = $row->id;\n        }\n\n        return $topten;\n    }\n\n    /**\n     * This function generates the Top Ten data with the mosted viewed records.\n     *\n     * @param int    $count      Number of records\n     * @param int    $categoryId Category ID\n     * @param string $language   Language\n     *\n     * @return array\n     */\n    public function getTopTenData($count = PMF_NUMBER_RECORDS_TOPTEN, $categoryId = 0, $language = null)\n    {\n        global $sids;\n\n        $now = date('YmdHis');\n        $query =\n'            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS question,\n                fd.updated AS updated,\n                fcr.category_id AS category_id,\n                fv.visits AS visits,\n                fv.last_visit AS last_visit,\n                fdg.group_id AS group_id,\n                fdu.user_id AS user_id\n            FROM\n                '.PMF_Db::getTablePrefix().'faqvisits fv,\n                '.PMF_Db::getTablePrefix().'faqdata fd\n            LEFT JOIN\n                '.PMF_Db::getTablePrefix().'faqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                '.PMF_Db::getTablePrefix().'faqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                '.PMF_Db::getTablePrefix().'faqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                    fd.date_start <= \\''.$now.'\\'\n                AND fd.date_end   >= \\''.$now.'\\'\n                AND fd.id = fv.id\n                AND fd.lang = fv.lang\n                AND fd.active = \\'yes\\'';\n\n        if (isset($categoryId) && is_numeric($categoryId) && ($categoryId != 0)) {\n            $query .= '\n            AND\n                fcr.category_id = \\''.$categoryId.'\\'';\n        }\n        if (isset($language) && PMF_Language::isASupportedLanguage($language)) {\n            $query .= '\n            AND\n                fd.lang = \\''.$language.'\\'';\n        }\n        $query .= '\n                '.$this->queryPermission($this->groupSupport).'\n\n            GROUP BY\n                fd.id,fd.lang,fcr.category_id,fv.visits,fv.last_visit,fdg.group_id,fdu.user_id\n            ORDER BY\n                fv.visits DESC';\n\n        $result = $this->_config->getDb()->query($query);\n        $topten = [];\n        $data = [];\n\n        if ($result) {\n            while ($row = $this->_config->getDb()->fetchObject($result)) {\n                if ($this->groupSupport) {\n                    if (!in_array($row->user_id, array(-1, $this->user)) || !in_array($row->group_id, $this->groups)) {\n                        continue;\n                    }\n                } else {\n                    if (!in_array($row->user_id, array(-1, $this->user))) {\n                        continue;\n                    }\n                }\n\n                $data['visits'] = (int)$row->visits;\n                $data['question'] = PMF_Filter::filterVar($row->question, FILTER_SANITIZE_STRING);\n                $data['date'] = $row->updated;\n                $data['last_visit'] = $row->last_visit;\n\n                $title = $row->question;\n                $url = sprintf(\n                    '%sindex.php?%saction=artikel&cat=%d&id=%d&artlang=%s',\n                    $this->_config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new PMF_Link($url, $this->_config);\n                $oLink->itemTitle = $row->question;\n                $oLink->tooltip = $title;\n                $data['url'] = $oLink->toString();\n\n                $topten[$row->id] = $data;\n\n                if (count($topten) === $count) {\n                    break;\n                }\n            }\n\n            array_multisort($topten, SORT_DESC);\n        }\n\n        return $topten;\n    }\n\n    /**\n     * This function generates an array with a specified number of most recent\n     * published records.\n     *\n     * @param int    $count    Number of records\n     * @param string $language Language\n     *\n     * @return array\n     */\n    public function getLatestData($count = PMF_NUMBER_RECORDS_LATEST, $language = null)\n    {\n        global $sids;\n\n        $now = date('YmdHis');\n        $query =\n'            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fcr.category_id AS category_id,\n                fd.thema AS question,\n                fd.content AS content,\n                fd.updated AS updated,\n                fv.visits AS visits,\n                fdg.group_id AS group_id,\n                fdu.user_id AS user_id\n            FROM\n                '.PMF_Db::getTablePrefix().'faqvisits fv,\n                '.PMF_Db::getTablePrefix().'faqdata fd\n            LEFT JOIN\n                '.PMF_Db::getTablePrefix().'faqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                '.PMF_Db::getTablePrefix().'faqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                '.PMF_Db::getTablePrefix().'faqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                    fd.date_start <= \\''.$now.'\\'\n                AND fd.date_end   >= \\''.$now.'\\'\n                AND fd.id = fv.id\n                AND fd.lang = fv.lang\n                AND fd.active = \\'yes\\'';\n\n        if (isset($language) && PMF_Language::isASupportedLanguage($language)) {\n            $query .= '\n            AND\n                fd.lang = \\''.$language.'\\'';\n        }\n        $query .= '\n                '.$this->queryPermission($this->groupSupport).'\n            GROUP BY\n                fd.id,fd.lang,fcr.category_id,fv.visits,fdg.group_id,fdu.user_id\n            ORDER BY\n                fd.updated DESC';\n\n        $result = $this->_config->getDb()->query($query);\n        $latest = [];\n        $data = [];\n\n        if ($result) {\n            while (($row = $this->_config->getDb()->fetchObject($result))) {\n                if ($this->groupSupport) {\n                    if (!in_array($row->user_id, array(-1, $this->user)) || !in_array($row->group_id, $this->groups)) {\n                        continue;\n                    }\n                } else {\n                    if (!in_array($row->user_id, array(-1, $this->user))) {\n                        continue;\n                    }\n                }\n\n                $data['date'] = $row->updated;\n                $data['question'] = PMF_Filter::filterVar($row->question, FILTER_SANITIZE_STRING);\n                $data['answer'] = $row->content;\n                $data['visits'] = $row->visits;\n\n                $title = $row->question;\n                $url = sprintf(\n                    '%sindex.php?%saction=artikel&cat=%d&id=%d&artlang=%s',\n                    $this->_config->getDefaultUrl(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new PMF_Link($url, $this->_config);\n                $oLink->itemTitle = $title;\n                $oLink->tooltip = $title;\n                $data['url'] = $oLink->toString();\n\n                $latest[$row->id] = $data;\n\n                if (count($latest) === $count) {\n                    break;\n                }\n            }\n        }\n        \n        return $latest;\n    }\n\n    /**\n     * Reload locking for user votings.\n     *\n     * @param int    $id FAQ record id\n     * @param string $ip IP\n     *\n     * @return bool\n     */\n    public function votingCheck($id, $ip)\n    {\n        $check = $_SERVER['REQUEST_TIME'] - 300;\n        $query = sprintf(\n            \"SELECT\n                id\n            FROM\n                %sfaqvoting\n            WHERE\n                artikel = %d AND (ip = '%s' AND datum > '%s')\",\n            PMF_Db::getTablePrefix(),\n            $id,\n            $ip,\n            $check);\n        if ($this->_config->getDb()->numRows($this->_config->getDb()->query($query))) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns the number of users from the table faqvotings.\n     *\n     * @param integer $record_id\n     *\n     * @return integer\n     */\n    public function getNumberOfVotings($record_id)\n    {\n        $query = sprintf(\n            'SELECT\n                usr\n            FROM\n                %sfaqvoting\n            WHERE\n                artikel = %d',\n            PMF_Db::getTablePrefix(),\n            $record_id);\n        if ($result = $this->_config->getDb()->query($query)) {\n            if ($row = $this->_config->getDb()->fetchObject($result)) {\n                return $row->usr;\n            }\n        }\n\n        return 0;\n    }\n\n    /**\n     * Adds a new voting record.\n     *\n     * @param array $votingData\n     *\n     * @return bool\n     */\n    public function addVoting($votingData)\n    {\n        if (!is_array($votingData)) {\n            return false;\n        }\n\n        $query = sprintf(\n            \"INSERT INTO\n                %sfaqvoting\n            VALUES\n                (%d, %d, %d, 1, %d, '%s')\",\n            PMF_Db::getTablePrefix(),\n            $this->_config->getDb()->nextId(PMF_Db::getTablePrefix().'faqvoting', 'id'),\n            $votingData['record_id'],\n            $votingData['vote'],\n            $_SERVER['REQUEST_TIME'],\n            $votingData['user_ip']);\n        $this->_config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Adds a new question.\n     *\n     * @param array $questionData\n     *\n     * @return bool\n     */\n    public function addQuestion(Array $questionData)\n    {\n        $query = sprintf(\"\n            INSERT INTO\n                %sfaqquestions\n            (id, lang, username, email, category_id, question, created, is_visible, answer_id)\n                VALUES\n            (%d, '%s', '%s', '%s', %d, '%s', '%s', '%s', %d)\",\n            PMF_Db::getTablePrefix(),\n            $this->_config->getDb()->nextId(PMF_Db::getTablePrefix().'faqquestions', 'id'),\n            $this->_config->getLanguage()->getLanguage(),\n            $this->_config->getDb()->escape($questionData['username']),\n            $this->_config->getDb()->escape($questionData['email']),\n            $questionData['category_id'],\n            $this->_config->getDb()->escape($questionData['question']),\n            date('YmdHis'),\n            $questionData['is_visible'],\n            0\n        );\n        $this->_config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Returns a new question.\n     *\n     * @param int $questionId\n     *\n     * @return array\n     */\n    public function getQuestion($questionId)\n    {\n        $question = [\n            'id' => 0,\n            'lang' => '',\n            'username' => '',\n            'email' => '',\n            'category_id' => '',\n            'question' => '',\n            'created' => '',\n            'is_visible' => '',\n        ];\n\n        if (!is_int($questionId)) {\n            return $question;\n        }\n\n        $question = [];\n\n        $query = sprintf(\"\n            SELECT\n                 id, lang, username, email, category_id, question, created, is_visible\n            FROM\n                %sfaqquestions\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            PMF_Db::getTablePrefix(),\n            $questionId,\n            $this->_config->getLanguage()->getLanguage()\n        );\n\n        if ($result = $this->_config->getDb()->query($query)) {\n            if ($row = $this->_config->getDb()->fetchObject($result)) {\n                $question = array(\n                    'id' => $row->id,\n                    'lang' => $row->lang,\n                    'username' => $row->username,\n                    'email' => $row->email,\n                    'category_id' => $row->category_id,\n                    'question' => $row->question,\n                    'created' => $row->created,\n                    'is_visible' => $row->is_visible, );\n            }\n        }\n\n        return $question;\n    }\n\n    /**\n     * Returns all open questions.\n     *\n     * @param boolean $all If true, then return visible and non-visible\n     *                     questions; otherwise only visible ones\n     *\n     * @return array\n     */\n    public function getAllOpenQuestions($all = true)\n    {\n        $questions = [];\n\n        $query = sprintf(\"\n            SELECT\n                id, lang, username, email, category_id, question, created, answer_id, is_visible\n            FROM\n                %sfaqquestions\n            WHERE\n                lang = '%s'\n                %s\n            ORDER BY \n                created ASC\",\n            PMF_Db::getTablePrefix(),\n            $this->_config->getLanguage()->getLanguage(),\n            ($all == false ? \" AND is_visible = 'Y'\" : '')\n        );\n\n        if ($result = $this->_config->getDb()->query($query)) {\n            while ($row = $this->_config->getDb()->fetchObject($result)) {\n                $questions[] = array(\n                    'id' => $row->id,\n                    'lang' => $row->lang,\n                    'username' => $row->username,\n                    'email' => $row->email,\n                    'category_id' => $row->category_id,\n                    'question' => $row->question,\n                    'created' => $row->created,\n                    'answer_id' => $row->answer_id,\n                    'is_visible' => $row->is_visible,\n                );\n             }\n        }\n\n        return $questions;\n    }\n\n    /**\n     * Updates an existing voting record.\n     *\n     * @param array $votingData\n     *\n     * @return bool\n     */\n    public function updateVoting($votingData)\n    {\n        if (!is_array($votingData)) {\n            return false;\n        }\n\n        $query = sprintf(\n            \"UPDATE\n                %sfaqvoting\n            SET\n                vote    = vote + %d,\n                usr     = usr + 1,\n                datum   = %d,\n                ip      = '%s'\n            WHERE\n                artikel = %d\",\n            PMF_Db::getTablePrefix(),\n            $votingData['vote'],\n            $_SERVER['REQUEST_TIME'],\n            $votingData['user_ip'],\n            $votingData['record_id']);\n        $this->_config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Adds a new changelog entry in the table faqchanges.\n     *\n     * @param int    $id\n     * @param int    $userId\n     * @param string $text\n     * @param string $lang\n     * @param int    $revision_id\n     *\n     * @return bool\n     */\n    public function createChangeEntry($id, $userId, $text, $lang, $revision_id = 0)\n    {\n        if (!is_numeric($id)\n            && !is_numeric($userId)\n            && !is_string($text)\n            && !is_string($lang)\n            ) {\n            return false;\n        }\n\n        $query = sprintf(\n            \"INSERT INTO\n                %sfaqchanges\n            (id, beitrag, lang, revision_id, usr, datum, what)\n                VALUES\n            (%d, %d, '%s', %d, %d, %d, '%s')\",\n            PMF_Db::getTablePrefix(),\n            $this->_config->getDb()->nextId(PMF_Db::getTablePrefix().'faqchanges', 'id'),\n            $id,\n            $lang,\n            $revision_id,\n            $userId,\n            $_SERVER['REQUEST_TIME'],\n            $text);\n\n        $this->_config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Returns the changelog of a FAQ record.\n     *\n     * @param int $recordId\n     *\n     * @return array\n     */\n    public function getChangeEntries($recordId)\n    {\n        $entries = [];\n\n        $query = sprintf('\n            SELECT\n                DISTINCT revision_id, usr, datum, what\n            FROM\n                %sfaqchanges\n            WHERE\n                beitrag = %d\n            ORDER BY revision_id DESC',\n            PMF_Db::getTablePrefix(),\n            $recordId\n        );\n\n        if ($result = $this->_config->getDb()->query($query)) {\n            while ($row = $this->_config->getDb()->fetchObject($result)) {\n                $entries[] = array(\n                    'revision_id' => $row->revision_id,\n                    'user' => $row->usr,\n                    'date' => $row->datum,\n                    'changelog' => $row->what, );\n            }\n        }\n\n        return $entries;\n    }\n\n    /**\n     * Retrieve faq records according to the constraints provided.\n     *\n     * @param string $queryType\n     * @param int    $nCatid\n     * @param bool   $bDownwards\n     * @param string $lang\n     * @param string $date\n     *\n     * @return array\n     */\n    public function get($queryType = FAQ_QUERY_TYPE_DEFAULT, $nCatid = 0, $bDownwards = true, $lang = '', $date = '')\n    {\n        $faqs = [];\n\n        $result = $this->_config->getDb()->query($this->_getSQLQuery($queryType, $nCatid, $bDownwards, $lang, $date));\n\n        if ($this->_config->getDb()->numRows($result) > 0) {\n            $i = 0;\n            while ($row = $this->_config->getDb()->fetchObject($result)) {\n                $faq = [];\n                $faq['id'] = $row->id;\n                $faq['solution_id'] = $row->solution_id;\n                $faq['revision_id'] = $row->revision_id;\n                $faq['lang'] = $row->lang;\n                $faq['category_id'] = $row->category_id;\n                $faq['active'] = $row->active;\n                $faq['sticky'] = $row->sticky;\n                $faq['keywords'] = $row->keywords;\n                $faq['topic'] = $row->thema;\n                $faq['content'] = $row->content;\n                $faq['author_name'] = $row->author;\n                $faq['author_email'] = $row->email;\n                $faq['comment_enable'] = $row->comment;\n                $faq['lastmodified'] = $row->updated;\n                $faq['hits'] = $row->visits;\n                $faq['hits_last'] = $row->last_visit;\n                $faq['notes'] = $row->notes;\n                $faqs[$i] = $faq;\n                ++$i;\n            }\n        }\n\n        return $faqs;\n    }\n\n    /**\n     * Build a logic sequence, for a WHERE statement, of those category IDs\n     * children of the provided category ID, if any.\n     *\n     * @param   $nCatid\n     * @param   $logicOp\n     * @param   $oCat\n     *\n     * @return string\n     */\n    public function _getCatidWhereSequence($nCatid, $logicOp = 'OR', $oCat = null)\n    {\n        $sqlWherefilter = '';\n\n        if (!isset($oCat)) {\n            $oCat = new PMF_Category($this->_config);\n        }\n        $aChildren = array_values($oCat->getChildren($nCatid));\n\n        foreach ($aChildren as $catid) {\n            $sqlWherefilter .= ' '.$logicOp.' fcr.category_id = '.$catid;\n            $sqlWherefilter .= $this->_getCatidWhereSequence($catid, 'OR', $oCat);\n        }\n\n        return $sqlWherefilter;\n    }\n\n    /**\n     * Build the SQL query for retrieving faq records according to the constraints provided.\n     *\n     * @param   $QueryType\n     * @param   $nCatid\n     * @param   $bDownwards\n     * @param   $lang\n     * @param   $date\n     * @param   $faqid\n     *\n     * @return array\n     */\n    private function _getSQLQuery($QueryType, $nCatid, $bDownwards, $lang, $date, $faqid = 0)\n    {\n        $now = date('YmdHis');\n        $query = sprintf(\"\n            SELECT\n                fd.id AS id,\n                fd.solution_id AS solution_id,\n                fd.revision_id AS revision_id,\n                fd.lang AS lang,\n                fcr.category_id AS category_id,\n                fd.active AS active,\n                fd.sticky AS sticky,\n                fd.keywords AS keywords,\n                fd.thema AS thema,\n                fd.content AS content,\n                fd.author AS author,\n                fd.email AS email,\n                fd.comment AS comment,\n                fd.updated AS updated,\n                fd.notes AS notes,\n                fv.visits AS visits,\n                fv.last_visit AS last_visit\n            FROM\n                %sfaqdata fd,\n                %sfaqvisits fv,\n                %sfaqcategoryrelations fcr\n            WHERE\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            AND\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND \",\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $now,\n            $now);\n        // faqvisits data selection\n        if (!empty($faqid)) {\n            // Select ONLY the faq with the provided $faqid\n            $query .= \"fd.id = '\".$faqid.\"' AND \";\n        }\n        $query .= 'fd.id = fv.id\n            AND\n                fd.lang = fv.lang';\n        $needAndOp = true;\n        if ((!empty($nCatid)) && is_int($nCatid) && $nCatid > 0) {\n            if ($needAndOp) {\n                $query .= ' AND';\n            }\n            $query .= ' (fcr.category_id = '.$nCatid;\n            if ($bDownwards) {\n                $query .= $this->_getCatidWhereSequence($nCatid, 'OR');\n            }\n            $query .= ')';\n            $needAndOp = true;\n        }\n        if ((!empty($date)) && PMF_Utils::isLikeOnPMFDate($date)) {\n            if ($needAndOp) {\n                $query .= ' AND';\n            }\n            $query .= \" fd.updated LIKE '\".$date.\"'\";\n            $needAndOp = true;\n        }\n        if ((!empty($lang)) && PMF_Utils::isLanguage($lang)) {\n            if ($needAndOp) {\n                $query .= ' AND';\n            }\n            $query .= \" fd.lang = '\".$lang.\"'\";\n            $needAndOp = true;\n        }\n        switch ($QueryType) {\n            case FAQ_QUERY_TYPE_APPROVAL:\n                if ($needAndOp) {\n                    $query .= ' AND';\n                }\n                $query .= \" fd.active = '\".FAQ_SQL_ACTIVE_NO.\"'\";\n                break;\n            case FAQ_QUERY_TYPE_EXPORT_PDF:\n            case FAQ_QUERY_TYPE_EXPORT_XHTML:\n            case FAQ_QUERY_TYPE_EXPORT_XML:\n                if ($needAndOp) {\n                    $query .= ' AND';\n                }\n                $query .= \" fd.active = '\".FAQ_SQL_ACTIVE_YES.\"'\";\n                break;\n            default:\n                if ($needAndOp) {\n                    $query .= ' AND';\n                }\n                $query .= \" fd.active = '\".FAQ_SQL_ACTIVE_YES.\"'\";\n                break;\n        }\n        // Sort criteria\n        switch ($QueryType) {\n            case FAQ_QUERY_TYPE_EXPORT_PDF:\n            case FAQ_QUERY_TYPE_EXPORT_XHTML:\n            case FAQ_QUERY_TYPE_EXPORT_XML:\n                $query .= \"\\nORDER BY fcr.category_id, fd.id\";\n                break;\n            case FAQ_QUERY_TYPE_RSS_LATEST:\n                $query .= \"\\nORDER BY fd.updated DESC\";\n                break;\n            default:\n                // Normal ordering\n                $query .= \"\\nORDER BY fcr.category_id, fd.id\";\n                break;\n        }\n\n        return $query;\n    }\n\n    /**\n     * Adds the record permissions for users and groups.\n     *\n     * @param string $mode     'group' or 'user'\n     * @param int    $recordId ID of the current record\n     * @param array  $ids      Array of group or user IDs\n     *\n     * @return bool\n     */\n    public function addPermission($mode, $recordId, $ids)\n    {\n        if ('user' !== $mode && 'group' !== $mode) {\n            return false;\n        }\n\n        foreach ($ids as $id) {\n            $query = sprintf('\n            INSERT INTO\n                %sfaqdata_%s\n            (record_id, %s_id)\n                VALUES\n            (%d, %d)',\n                PMF_Db::getTablePrefix(),\n                $mode,\n                $mode,\n                $recordId,\n                $id\n            );\n\n            $this->_config->getDb()->query($query);\n        }\n\n        return true;\n    }\n\n    /**\n     * Deletes the record permissions for users and groups.\n     *\n     * @param string $mode      'group' or 'user'\n     * @param int    $record_id ID of the current record\n     *\n     * @return bool\n     *\n     * @author  Thorsten Rinne <thorsten@phpmyfaq.de>\n     */\n    public function deletePermission($mode, $record_id)\n    {\n        if (!($mode == 'user' || $mode == 'group')) {\n            return false;\n        }\n        if (!is_int($record_id)) {\n            return false;\n        }\n\n        $query = sprintf('\n            DELETE FROM\n                %sfaqdata_%s\n            WHERE\n                record_id = %d',\n            PMF_Db::getTablePrefix(),\n            $mode,\n            $record_id);\n        $this->_config->getDb()->query($query);\n\n        return true;\n    }\n\n    /**\n     * Returns the record permissions for users and groups.\n     *\n     * @param string $mode     'group' or 'user'\n     * @param int    $recordId\n     *\n     * @return array\n     */\n    public function getPermission($mode, $recordId)\n    {\n        $permissions = [];\n\n        if (!($mode == 'user' || $mode == 'group')) {\n            return false;\n        }\n\n        $query = sprintf('\n            SELECT\n                %s_id AS permission\n            FROM\n                %sfaqdata_%s\n            WHERE\n                record_id = %d',\n            $mode,\n            PMF_Db::getTablePrefix(),\n            $mode,\n            (int) $recordId);\n\n        $result = $this->_config->getDb()->query($query);\n\n        if ($this->_config->getDb()->numRows($result) > 0) {\n            while (($row = $this->_config->getDb()->fetchObject($result))) {\n                $permissions[] = (int) $row->permission;\n            }\n        }\n\n        return $permissions;\n    }\n\n    /**\n     * Returns all records of one category.\n     *\n     * @param int $category\n     *\n     * @return string\n     */\n    public function showAllRecordsWoPaging($category)\n    {\n        global $sids;\n\n        $now = date('YmdHis');\n        $query = sprintf(\"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fcr.category_id AS category_id,\n                fv.visits AS visits\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqvisits fv\n            ON\n                fd.id = fv.id\n            AND\n                fv.lang = fd.lang\n            LEFT JOIN\n                %sfaqdata_group fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.date_start <= '%s'\n            AND\n                fd.date_end   >= '%s'\n            AND\n                fd.active = 'yes'\n            AND\n                fcr.category_id = %d\n            AND\n                fd.lang = '%s'\n            GROUP BY\n                fd.id,fd.lang,fcr.category_id,fv.visits\n            ORDER BY\n                %s %s\",\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $now,\n            $now,\n            $category,\n            $this->_config->getLanguage()->getLanguage(),\n            $this->_config->get('records.orderby'),\n            $this->_config->get('records.sortby')\n        );\n\n        $result = $this->_config->getDb()->query($query);\n\n        $output = '<ul class=\"phpmyfaq_ul\">';\n\n        while (($row = $this->_config->getDb()->fetchObject($result))) {\n            $title = $row->thema;\n            $url = sprintf(\n                '%s?%saction=artikel&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                PMF_Link::getSystemRelativeUri(),\n                $sids,\n                $row->category_id,\n                $row->id,\n                $row->lang\n            );\n\n            $oLink = new PMF_Link($url, $this->_config);\n            $oLink->itemTitle = $row->thema;\n            $oLink->text = $title;\n            $oLink->tooltip = $title;\n            $listItem = sprintf('<li>%s</li>', $oLink->toHtmlAnchor(), $this->pmf_lang['msgViews']);\n            $listItem = '<li>'.$oLink->toHtmlAnchor().'</li>';\n\n            $output .= $listItem;\n        }\n\n        $output .= '</ul>';\n\n        return $output;\n    }\n\n    /**\n     * Prints the open questions as a XHTML table.\n     *\n     * @return string\n     */\n    public function printOpenQuestions()\n    {\n        global $sids, $category;\n\n        $date = new PMF_Date($this->_config);\n        $mail = new PMF_Mail($this->_config);\n\n        $query = sprintf(\"\n            SELECT\n                COUNT(id) AS num\n            FROM\n                %sfaqquestions\n            WHERE\n                lang = '%s'\n            AND\n                is_visible != 'Y'\",\n            PMF_Db::getTablePrefix(),\n            $this->_config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->_config->getDb()->query($query);\n        $row = $this->_config->getDb()->fetchObject($result);\n        $numOfInvisibles = $row->num;\n\n        if ($numOfInvisibles > 0) {\n            $extraout = sprintf(\n                '<tr><td colspan=\"3\"><small>%s %s</small></td></tr>',\n                $this->pmf_lang['msgQuestionsWaiting'],\n                $numOfInvisibles\n            );\n        } else {\n            $extraout = '';\n        }\n\n        $query = sprintf(\"\n            SELECT\n                *\n            FROM\n                %sfaqquestions\n            WHERE\n                lang = '%s'\n            AND\n                is_visible = 'Y'\n            ORDER BY\n                created ASC\",\n            PMF_Db::getTablePrefix(),\n            $this->_config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->_config->getDb()->query($query);\n        $output = '';\n\n        if ($result && $this->_config->getDb()->numRows($result) > 0) {\n            while ($row = $this->_config->getDb()->fetchObject($result)) {\n                $output .= '<tr class=\"openquestions\">';\n                $output .= sprintf(\n                    '<td><small>%s</small><br /><a href=\"mailto:%s\">%s</a></td>',\n                    $date->format(PMF_Date::createIsoDate($row->created)),\n                    $mail->safeEmail($row->email),\n                    $row->username\n                );\n                $output .= sprintf(\n                    '<td><strong>%s:</strong><br />%s</td>',\n                    isset($category->categoryName[$row->category_id]['name']) ? $category->categoryName[$row->category_id]['name'] : '',\n                    strip_tags($row->question)\n                );\n                if ($this->_config->get('records.enableCloseQuestion') && $row->answer_id) {\n                    $output .= sprintf(\n                        '<td><a id=\"PMF_openQuestionAnswered\" href=\"?%saction=artikel&amp;cat=%d&amp;id=%d\">%s</a></td>',\n                        $sids,\n                        $row->category_id,\n                        $row->answer_id,\n                        $this->pmf_lang['msg2answerFAQ']\n                    );\n                } else {\n                    $output .= sprintf(\n                        '<td><a class=\"btn btn-primary\" href=\"?%saction=add&amp;question=%d&amp;cat=%d\">%s</a></td>',\n                        $sids,\n                        $row->id,\n                        $row->category_id,\n                        $this->pmf_lang['msg2answer']\n                    );\n                }\n                $output .= '</tr>';\n            }\n        } else {\n            $output = sprintf(\n                '<tr><td colspan=\"3\">%s</td></tr>',\n                $this->pmf_lang['msgNoQuestionsAvailable']\n            );\n        }\n\n        return $output.$extraout;\n    }\n\n    /**\n     * Set or unset a faq item flag.\n     *\n     * @param int    $id   Record id\n     * @param string $lang language code which is valid with Language::isASupportedLanguage\n     * @param bool   $flag weither or not the record is set to sticky\n     * @param string $type type of the flag to set, use the column name\n     *\n     * @return bool\n     */\n    public function updateRecordFlag($id, $lang, $flag, $type)\n    {\n        $retval = false;\n\n        switch ($type) {\n            case 'sticky':\n                $flag = ($flag === 'checked' ? 1 : 0);\n                break;\n\n            case 'active':\n                $flag = ($flag === 'checked' ? \"'yes'\" : \"'no'\");\n                break;\n\n            default:\n                // This is because we would run into unknown db column\n                $flag = null;\n                break;\n        }\n\n        if (null !== $flag) {\n            $update = sprintf(\"\n                UPDATE \n                    %sfaqdata \n                SET \n                    %s = %s \n                WHERE \n                    id = %d \n                AND \n                    lang = '%s'\",\n                PMF_Db::getTablePrefix(),\n                $type,\n                $flag,\n                $id,\n                $lang\n            );\n\n            $retval = (bool) $this->_config->getDb()->query($update);\n        }\n\n        return $retval;\n    }\n\n    /**\n     * Returns the sticky records with URL and Title.\n     *\n     * @return array\n     */\n    private function getStickyRecordsData()\n    {\n        global $sids;\n\n        $now = date('YmdHis');\n        $query = sprintf(\"\n            SELECT\n                fd.id AS id,\n                fd.lang AS lang,\n                fd.thema AS thema,\n                fcr.category_id AS category_id\n            FROM\n                %sfaqdata fd\n            LEFT JOIN\n                %sfaqcategoryrelations fcr\n            ON\n                fd.id = fcr.record_id\n            AND\n                fd.lang = fcr.record_lang\n            LEFT JOIN\n                %sfaqdata_group AS fdg\n            ON\n                fd.id = fdg.record_id\n            LEFT JOIN\n                %sfaqdata_user AS fdu\n            ON\n                fd.id = fdu.record_id\n            WHERE\n                fd.lang = '%s'\n            AND \n                fd.date_start <= '%s'\n            AND \n                fd.date_end   >= '%s'\n            AND \n                fd.active = 'yes'\n            AND \n                fd.sticky = 1\n            %s\",\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            PMF_Db::getTablePrefix(),\n            $this->_config->getLanguage()->getLanguage(),\n            $now,\n            $now,\n            $this->queryPermission($this->groupSupport)\n        );\n\n        $result = $this->_config->getDb()->query($query);\n        $sticky = [];\n        $data = [];\n\n        $oldId = 0;\n        while (($row = $this->_config->getDb()->fetchObject($result))) {\n            if ($oldId != $row->id) {\n                $data['thema'] = $row->thema;\n\n                $title = $row->thema;\n                $url = sprintf(\n                    '%s?%saction=artikel&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    PMF_Link::getSystemRelativeUri(),\n                    $sids,\n                    $row->category_id,\n                    $row->id,\n                    $row->lang\n                );\n                $oLink = new PMF_Link($url, $this->_config);\n                $oLink->itemTitle = $row->thema;\n                $oLink->tooltip = $title;\n                $data['url'] = $oLink->toString();\n\n                $sticky[] = $data;\n            }\n            $oldId = $row->id;\n        }\n\n        return $sticky;\n    }\n\n    /**\n     * Prepares and returns the sticky records for the frontend.\n     *\n     * @return array\n     */\n    public function getStickyRecords()\n    {\n        $result = $this->getStickyRecordsData();\n        $output = [];\n\n        if (count($result) > 0) {\n            foreach ($result as $row) {\n                $output[] = array(\n                    'title' => PMF_Utils::makeShorterText($row['thema'], 8),\n                    'preview' => $row['thema'],\n                    'url' => $row['url'],\n                );\n            }\n        } else {\n            $output['error'] = sprintf('<li>%s</li>', $this->pmf_lang['err_noTopTen']);\n        }\n        if (!isset($output['error'])) {\n            $html = '';\n            foreach ($output as $entry) {\n                $html .= sprintf(\n                    '<li><a class=\"sticky-faqs\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"%s\" href=\"%s\">%s</a></li>',\n                    $entry['preview'],\n                    $entry['url'],\n                    $entry['title']\n                );\n            }\n            $output['html'] = $html;\n        }\n\n        return $output;\n    }\n\n    /**\n     * Updates field answer_id in faqquestion.\n     *\n     * @param int $openQuestionId\n     * @param int $faqId\n     * @param int $categoryId\n     *\n     * @return bool\n     */\n    public function updateQuestionAnswer($openQuestionId, $faqId, $categoryId)\n    {\n        $query = sprintf(\n            'UPDATE %sfaqquestions SET answer_id = %d, category_id= %d WHERE id= %d',\n            PMF_Db::getTablePrefix(),\n            $faqId,\n            $categoryId,\n            $openQuestionId\n        );\n\n        return $this->_config->getDb()->query($query);\n    }\n\n    /**\n     * Returns a part of a query to check permissions.\n     *\n     * @param bool $hasGroupSupport\n     *\n     * @return string\n     */\n    protected function queryPermission($hasGroupSupport = false)\n    {\n        if ($hasGroupSupport) {\n            if (-1 === $this->user) {\n                return sprintf(\n                    'AND fdg.group_id IN (%s)',\n                    implode(', ', $this->groups),\n                    $this->user,\n                    implode(', ', $this->groups));\n            } else {\n                return sprintf(\n                    'AND ( fdg.group_id IN (%s) OR (fdu.user_id = %d OR fdg.group_id IN (%s)) )',\n                    implode(', ', $this->groups),\n                    $this->user,\n                    implode(', ', $this->groups)\n                );\n            }\n        } else {\n            if (-1 !== $this->user) {\n                return sprintf(\n                    'AND ( fdu.user_id = %d OR fdu.user_id = -1 )',\n                    $this->user\n                );\n            } else {\n                return sprintf(\n                    'AND fdu.user_id = -1',\n                    $this->user\n                );\n            }\n        }\n    }\n}\n"], "filenames": ["phpmyfaq/inc/PMF/Faq.php"], "buggy_code_start_loc": [2140], "buggy_code_end_loc": [2264], "fixing_code_start_loc": [2140], "fixing_code_end_loc": [2264], "type": "CWE-79", "message": "inc/PMF/Faq.php in phpMyFAQ before 2.9.7 has XSS in the question field.", "other": {"cve": {"id": "CVE-2017-7579", "sourceIdentifier": "cve@mitre.org", "published": "2017-04-07T16:59:00.163", "lastModified": "2017-04-12T20:33:46.757", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "inc/PMF/Faq.php in phpMyFAQ before 2.9.7 has XSS in the question field."}, {"lang": "es", "value": "inc/PMF/Faq.php en phpMyFAQ en versiones anteriores a 2.9.7 tiene XSS en el campo de pregunta."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.9.6", "matchCriteriaId": "58FC492F-0DFF-4AD4-9ED1-0587EBECA814"}]}]}], "references": [{"url": "http://www.phpmyfaq.de/security/advisory-2017-04-02", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/thorsten/phpMyFAQ/commit/a69f32175c28af1b34e5df83000f830e60f6bce9", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thorsten/phpMyFAQ/commit/a69f32175c28af1b34e5df83000f830e60f6bce9"}}