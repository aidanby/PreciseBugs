{"buggy_code": ["<?php\n\nnamespace Sabberworm\\CSS\\CSSList;\n\nuse Sabberworm\\CSS\\RuleSet\\DeclarationBlock;\nuse Sabberworm\\CSS\\RuleSet\\RuleSet;\nuse Sabberworm\\CSS\\Property\\Selector;\nuse Sabberworm\\CSS\\Rule\\Rule;\nuse Sabberworm\\CSS\\Value\\ValueList;\nuse Sabberworm\\CSS\\Value\\CSSFunction;\n\n/**\n * A CSSBlockList is a CSSList whose DeclarationBlocks are guaranteed to contain valid declaration blocks or at-rules.\n * Most CSSLists conform to this category but some at-rules (such as @keyframes) do not.\n */\nabstract class CSSBlockList extends CSSList {\n\tprotected function allDeclarationBlocks(&$aResult) {\n\t\tforeach ($this->aContents as $mContent) {\n\t\t\tif ($mContent instanceof DeclarationBlock) {\n\t\t\t\t$aResult[] = $mContent;\n\t\t\t} else if ($mContent instanceof CSSBlockList) {\n\t\t\t\t$mContent->allDeclarationBlocks($aResult);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected function allRuleSets(&$aResult) {\n\t\tforeach ($this->aContents as $mContent) {\n\t\t\tif ($mContent instanceof RuleSet) {\n\t\t\t\t$aResult[] = $mContent;\n\t\t\t} else if ($mContent instanceof CSSBlockList) {\n\t\t\t\t$mContent->allRuleSets($aResult);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected function allValues($oElement, &$aResult, $sSearchString = null, $bSearchInFunctionArguments = false) {\n\t\tif ($oElement instanceof CSSBlockList) {\n\t\t\tforeach ($oElement->getContents() as $oContent) {\n\t\t\t\t$this->allValues($oContent, $aResult, $sSearchString, $bSearchInFunctionArguments);\n\t\t\t}\n\t\t} else if ($oElement instanceof RuleSet) {\n\t\t\tforeach ($oElement->getRules($sSearchString) as $oRule) {\n\t\t\t\t$this->allValues($oRule, $aResult, $sSearchString, $bSearchInFunctionArguments);\n\t\t\t}\n\t\t} else if ($oElement instanceof Rule) {\n\t\t\t$this->allValues($oElement->getValue(), $aResult, $sSearchString, $bSearchInFunctionArguments);\n\t\t} else if ($oElement instanceof ValueList) {\n\t\t\tif ($bSearchInFunctionArguments || !($oElement instanceof CSSFunction)) {\n\t\t\t\tforeach ($oElement->getListComponents() as $mComponent) {\n\t\t\t\t\t$this->allValues($mComponent, $aResult, $sSearchString, $bSearchInFunctionArguments);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t//Non-List Value or String (CSS identifier)\n\t\t\t$aResult[] = $oElement;\n\t\t}\n\t}\n\n\tprotected function allSelectors(&$aResult, $sSpecificitySearch = null) {\n\t\t$aDeclarationBlocks = array();\n\t\t$this->allDeclarationBlocks($aDeclarationBlocks);\n\t\tforeach ($aDeclarationBlocks as $oBlock) {\n\t\t\tforeach ($oBlock->getSelectors() as $oSelector) {\n\t\t\t\tif ($sSpecificitySearch === null) {\n\t\t\t\t\t$aResult[] = $oSelector;\n\t\t\t\t} else {\n\t\t\t\t\t$sComparison = \"\\$bRes = {$oSelector->getSpecificity()} $sSpecificitySearch;\";\n\t\t\t\t\teval($sComparison);\n\t\t\t\t\tif ($bRes) {\n\t\t\t\t\t\t$aResult[] = $oSelector;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "<?php\n\nnamespace Sabberworm\\CSS\\CSSList;\n\n/**\n * The root CSSList of a parsed file. Contains all top-level css contents, mostly declaration blocks, but also any @-rules encountered.\n */\nclass Document extends CSSBlockList {\n\n    /**\n     * Gets all DeclarationBlock objects recursively.\n     */\n    public function getAllDeclarationBlocks() {\n        $aResult = array();\n        $this->allDeclarationBlocks($aResult);\n        return $aResult;\n    }\n\n    /**\n     * @deprecated use getAllDeclarationBlocks()\n     */\n    public function getAllSelectors() {\n        return $this->getAllDeclarationBlocks();\n    }\n\n    /**\n     * Returns all RuleSet objects found recursively in the tree.\n     */\n    public function getAllRuleSets() {\n        $aResult = array();\n        $this->allRuleSets($aResult);\n        return $aResult;\n    }\n\n    /**\n     * Returns all Value objects found recursively in the tree.\n     * @param (object|string) $mElement the CSSList or RuleSet to start the search from (defaults to the whole document). If a string is given, it is used as rule name filter (@see{RuleSet->getRules()}).\n     * @param (bool) $bSearchInFunctionArguments whether to also return Value objects used as Function arguments.\n     */\n    public function getAllValues($mElement = null, $bSearchInFunctionArguments = false) {\n        $sSearchString = null;\n        if ($mElement === null) {\n            $mElement = $this;\n        } else if (is_string($mElement)) {\n            $sSearchString = $mElement;\n            $mElement = $this;\n        }\n        $aResult = array();\n        $this->allValues($mElement, $aResult, $sSearchString, $bSearchInFunctionArguments);\n        return $aResult;\n    }\n\n    /**\n     * Returns all Selector objects found recursively in the tree.\n     * Note that this does not yield the full DeclarationBlock that the selector belongs to (and, currently, there is no way to get to that).\n     * @param $sSpecificitySearch An optional filter by specificity. May contain a comparison operator and a number or just a number (defaults to \"==\").\n     * @example getSelectorsBySpecificity('>= 100')\n     */\n    public function getSelectorsBySpecificity($sSpecificitySearch = null) {\n        if (is_numeric($sSpecificitySearch) || is_numeric($sSpecificitySearch[0])) {\n            $sSpecificitySearch = \"== $sSpecificitySearch\";\n        }\n        $aResult = array();\n        $this->allSelectors($aResult, $sSpecificitySearch);\n        return $aResult;\n    }\n\n    /**\n     * Expands all shorthand properties to their long value\n     */\n    public function expandShorthands() {\n        foreach ($this->getAllDeclarationBlocks() as $oDeclaration) {\n            $oDeclaration->expandShorthands();\n        }\n    }\n\n    /*\n     * Create shorthands properties whenever possible\n     */\n\n    public function createShorthands() {\n        foreach ($this->getAllDeclarationBlocks() as $oDeclaration) {\n            $oDeclaration->createShorthands();\n        }\n    }\n\n}", "<?php\n\nnamespace Sabberworm\\CSS;\n\nuse Sabberworm\\CSS\\Value\\Size;\nuse Sabberworm\\CSS\\Property\\Selector;\nuse Sabberworm\\CSS\\RuleSet\\AtRule;\nuse Sabberworm\\CSS\\CSSList\\KeyFrame;\n\nclass ParserTest extends \\PHPUnit_Framework_TestCase {\n\n\tfunction testFiles() {\n\n\t\t$sDirectory = dirname(__FILE__) . '/../../files';\n\t\tif ($rHandle = opendir($sDirectory)) {\n\t\t\t/* This is the correct way to loop over the directory. */\n\t\t\twhile (false !== ($sFileName = readdir($rHandle))) {\n\t\t\t\tif (strpos($sFileName, '.') === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (strrpos($sFileName, '.css') !== strlen($sFileName) - strlen('.css')) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (strpos($sFileName, '-') === 0) {\n\t\t\t\t\t//Either a file which SHOULD fail or a future test of a as-of-now missing feature\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$oParser = new Parser(file_get_contents($sDirectory . DIRECTORY_SEPARATOR . $sFileName));\n\t\t\t\ttry {\n\t\t\t\t\t$this->assertNotEquals('', $oParser->parse()->__toString());\n\t\t\t\t} catch (\\Exception $e) {\n\t\t\t\t\t$this->fail($e);\n\t\t\t\t}\n\t\t\t}\n\t\t\tclosedir($rHandle);\n\t\t}\n\t}\n\n\t/**\n\t * @depends testFiles\n\t */\n\tfunction testColorParsing() {\n\t\t$oDoc = $this->parsedStructureForFile('colortest');\n\t\tforeach ($oDoc->getAllRuleSets() as $oRuleSet) {\n\t\t\tif (!$oRuleSet instanceof DeclarationBlock) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$sSelector = $oRuleSet->getSelectors();\n\t\t\t$sSelector = $sSelector[0]->getSelector();\n\t\t\tif ($sSelector == '#mine') {\n\t\t\t\t$aColorRule = $oRuleSet->getRules('color');\n\t\t\t\t$aValues = $aColorRule['color']->getValues();\n\t\t\t\t$this->assertSame('red', $aValues[0][0]);\n\t\t\t\t$aColorRule = $oRuleSet->getRules('background-');\n\t\t\t\t$aValues = $aColorRule['background-color']->getValues();\n\t\t\t\t$this->assertEquals(array('r' => new Size(35.0, null, true), 'g' => new Size(35.0, null, true), 'b' => new Size(35.0, null, true)), $aValues[0][0]->getColor());\n\t\t\t\t$aColorRule = $oRuleSet->getRules('border-color');\n\t\t\t\t$aValues = $aColorRule['border-color']->getValues();\n\t\t\t\t$this->assertEquals(array('r' => new Size(10.0, null, true), 'g' => new Size(100.0, null, true), 'b' => new Size(230.0, null, true), 'a' => new Size(0.3, null, true)), $aValues[0][0]->getColor());\n\t\t\t\t$aColorRule = $oRuleSet->getRules('outline-color');\n\t\t\t\t$aValues = $aColorRule['outline-color']->getValues();\n\t\t\t\t$this->assertEquals(array('r' => new Size(34.0, null, true), 'g' => new Size(34.0, null, true), 'b' => new Size(34.0, null, true)), $aValues[0][0]->getColor());\n\t\t\t}\n\t\t}\n\t\tforeach ($oDoc->getAllValues('background-') as $oColor) {\n\t\t\tif ($oColor->getColorDescription() === 'hsl') {\n\t\t\t\t$this->assertEquals(array('h' => new Size(220.0, null, true), 's' => new Size(10.0, null, true), 'l' => new Size(220.0, null, true)), $oColor->getColor());\n\t\t\t}\n\t\t}\n\t\tforeach ($oDoc->getAllValues('color') as $sColor) {\n\t\t\t$this->assertSame('red', $sColor);\n\t\t}\n\t}\n\n\tfunction testUnicodeParsing() {\n\t\t$oDoc = $this->parsedStructureForFile('unicode');\n\t\tforeach ($oDoc->getAllDeclarationBlocks() as $oRuleSet) {\n\t\t\t$sSelector = $oRuleSet->getSelectors();\n\t\t\t$sSelector = $sSelector[0]->getSelector();\n\t\t\tif (substr($sSelector, 0, strlen('.test-')) !== '.test-') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$aContentRules = $oRuleSet->getRules('content');\n\t\t\t$aContents = $aContentRules['content']->getValues();\n\t\t\t$sString = $aContents[0][0]->__toString();\n\t\t\tif ($sSelector == '.test-1') {\n\t\t\t\t$this->assertSame('\" \"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-2') {\n\t\t\t\t$this->assertSame('\"\u00e9\"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-3') {\n\t\t\t\t$this->assertSame('\" \"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-4') {\n\t\t\t\t$this->assertSame('\"\ud834\udd1e\"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-5') {\n\t\t\t\t$this->assertSame('\"\u6c34\"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-6') {\n\t\t\t\t$this->assertSame('\"\u00a5\"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-7') {\n\t\t\t\t$this->assertSame('\"\\A\"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-8') {\n\t\t\t\t$this->assertSame('\"\\\"\\\"\"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-9') {\n\t\t\t\t$this->assertSame('\"\\\"\\\\\\'\"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-10') {\n\t\t\t\t$this->assertSame('\"\\\\\\'\\\\\\\\\"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-11') {\n\t\t\t\t$this->assertSame('\"test\"', $sString);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction testSpecificity() {\n\t\t$oDoc = $this->parsedStructureForFile('specificity');\n\t\t$oDeclarationBlock = $oDoc->getAllDeclarationBlocks();\n\t\t$oDeclarationBlock = $oDeclarationBlock[0];\n\t\t$aSelectors = $oDeclarationBlock->getSelectors();\n\t\tforeach ($aSelectors as $oSelector) {\n\t\t\tswitch ($oSelector->getSelector()) {\n\t\t\t\tcase \"#test .help\":\n\t\t\t\t\t$this->assertSame(110, $oSelector->getSpecificity());\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"#file\":\n\t\t\t\t\t$this->assertSame(100, $oSelector->getSpecificity());\n\t\t\t\t\tbreak;\n\t\t\t\tcase \".help:hover\":\n\t\t\t\t\t$this->assertSame(20, $oSelector->getSpecificity());\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ol li::before\":\n\t\t\t\t\t$this->assertSame(3, $oSelector->getSpecificity());\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"li.green\":\n\t\t\t\t\t$this->assertSame(11, $oSelector->getSpecificity());\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$this->fail(\"specificity: untested selector \" . $oSelector->getSelector());\n\t\t\t}\n\t\t}\n\t\t$this->assertEquals(array(new Selector('#test .help', true)), $oDoc->getSelectorsBySpecificity('> 100'));\n\t}\n\n\tfunction testManipulation() {\n\t\t$oDoc = $this->parsedStructureForFile('atrules');\n\t\t$this->assertSame('@charset \"utf-8\";@font-face {font-family: \"CrassRoots\";src: url(\"../media/cr.ttf\");}html, body {font-size: 1.6em;}\n@keyframes mymove {from {top: 0px;}\nto {top: 200px;}\n}@-moz-keyframes some-move {from {top: 0px;}\nto {top: 200px;}\n}', $oDoc->__toString());\n\t\tforeach ($oDoc->getAllDeclarationBlocks() as $oBlock) {\n\t\t\tforeach ($oBlock->getSelectors() as $oSelector) {\n\t\t\t\t//Loop over all selector parts (the comma-separated strings in a selector) and prepend the id\n\t\t\t\t$oSelector->setSelector('#my_id ' . $oSelector->getSelector());\n\t\t\t}\n\t\t}\n\t\t$this->assertSame('@charset \"utf-8\";@font-face {font-family: \"CrassRoots\";src: url(\"../media/cr.ttf\");}#my_id html, #my_id body {font-size: 1.6em;}\n@keyframes mymove {from {top: 0px;}\nto {top: 200px;}\n}@-moz-keyframes some-move {from {top: 0px;}\nto {top: 200px;}\n}', $oDoc->__toString());\n\n\t\t$oDoc = $this->parsedStructureForFile('values');\n\t\t$this->assertSame('#header {margin: 10px 2em 1cm 2%;font-family: Verdana,Helvetica,\"Gill Sans\",sans-serif;font-size: 10px;color: red !important;}\nbody {color: green;font: 75% \"Lucida Grande\",\"Trebuchet MS\",Verdana,sans-serif;}' . \"\\n\", $oDoc->__toString());\n\t\tforeach ($oDoc->getAllRuleSets() as $oRuleSet) {\n\t\t\t$oRuleSet->removeRule('font-');\n\t\t}\n\t\t$this->assertSame('#header {margin: 10px 2em 1cm 2%;color: red !important;}\nbody {color: green;}' . \"\\n\", $oDoc->__toString());\n\t}\n\n\tfunction testSlashedValues() {\n\t\t$oDoc = $this->parsedStructureForFile('slashed');\n\t\t$this->assertSame('.test {font: 12px/1.5 Verdana,Arial,sans-serif;border-radius: 5px 10px 5px 10px/10px 5px 10px 5px;}' . \"\\n\", $oDoc->__toString());\n\t\tforeach ($oDoc->getAllValues(null) as $mValue) {\n\t\t\tif ($mValue instanceof Size && $mValue->isSize() && !$mValue->isRelative()) {\n\t\t\t\t$mValue->setSize($mValue->getSize() * 3);\n\t\t\t}\n\t\t}\n\t\tforeach ($oDoc->getAllDeclarationBlocks() as $oBlock) {\n\t\t\t$oRule = $oBlock->getRules('font');\n\t\t\t$oRule = $oRule['font'];\n\t\t\t$oSpaceList = $oRule->getValue();\n\t\t\t$this->assertEquals(' ', $oSpaceList->getListSeparator());\n\t\t\t$oSlashList = $oSpaceList->getListComponents();\n\t\t\t$oCommaList = $oSlashList[1];\n\t\t\t$oSlashList = $oSlashList[0];\n\t\t\t$this->assertEquals(',', $oCommaList->getListSeparator());\n\t\t\t$this->assertEquals('/', $oSlashList->getListSeparator());\n\t\t\t$oRule = $oBlock->getRules('border-radius');\n\t\t\t$oRule = $oRule['border-radius'];\n\t\t\t$oSlashList = $oRule->getValue();\n\t\t\t$this->assertEquals('/', $oSlashList->getListSeparator());\n\t\t\t$oSpaceList1 = $oSlashList->getListComponents();\n\t\t\t$oSpaceList2 = $oSpaceList1[1];\n\t\t\t$oSpaceList1 = $oSpaceList1[0];\n\t\t\t$this->assertEquals(' ', $oSpaceList1->getListSeparator());\n\t\t\t$this->assertEquals(' ', $oSpaceList2->getListSeparator());\n\t\t}\n\t\t$this->assertSame('.test {font: 36px/1.5 Verdana,Arial,sans-serif;border-radius: 15px 30px 15px 30px/30px 15px 30px 15px;}' . \"\\n\", $oDoc->__toString());\n\t}\n\n\tfunction testFunctionSyntax() {\n\t\t$oDoc = $this->parsedStructureForFile('functions');\n\t\t$sExpected = 'div.main {background-image: linear-gradient(rgb(0,0,0),rgb(255,255,255));}\n.collapser::before, .collapser::-moz-before, .collapser::-webkit-before {content: \"\u00bb\";font-size: 1.2em;margin-right: 0.2em;-moz-transition-property: -moz-transform;-moz-transition-duration: 0.2s;-moz-transform-origin: center 60%;}\n.collapser.expanded::before, .collapser.expanded::-moz-before, .collapser.expanded::-webkit-before {-moz-transform: rotate(90deg);}\n.collapser + * {height: 0;overflow: hidden;-moz-transition-property: height;-moz-transition-duration: 0.3s;}\n.collapser.expanded + * {height: auto;}' . \"\\n\";\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\n\t\tforeach ($oDoc->getAllValues(null, true) as $mValue) {\n\t\t\tif ($mValue instanceof Size && $mValue->isSize()) {\n\t\t\t\t$mValue->setSize($mValue->getSize() * 3);\n\t\t\t}\n\t\t}\n\t\t$sExpected = str_replace(array('1.2em', '0.2em', '60%'), array('3.6em', '0.6em', '180%'), $sExpected);\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\n\t\tforeach ($oDoc->getAllValues(null, true) as $mValue) {\n\t\t\tif ($mValue instanceof Size && !$mValue->isRelative() && !$mValue->isColorComponent()) {\n\t\t\t\t$mValue->setSize($mValue->getSize() * 2);\n\t\t\t}\n\t\t}\n\t\t$sExpected = str_replace(array('0.2s', '0.3s', '90deg'), array('0.4s', '0.6s', '180deg'), $sExpected);\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\t}\n\n\tfunction testExpandShorthands() {\n\t\t$oDoc = $this->parsedStructureForFile('expand-shorthands');\n\t\t$sExpected = 'body {font: italic 500 14px/1.618 \"Trebuchet MS\",Georgia,serif;border: 2px solid rgb(255,0,255);background: rgb(204,204,204) url(\"/images/foo.png\") no-repeat left top;margin: 1em !important;padding: 2px 6px 3px;}' . \"\\n\";\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\t\t$oDoc->expandShorthands();\n\t\t$sExpected = 'body {margin-top: 1em !important;margin-right: 1em !important;margin-bottom: 1em !important;margin-left: 1em !important;padding-top: 2px;padding-right: 6px;padding-bottom: 3px;padding-left: 6px;border-top-color: rgb(255,0,255);border-right-color: rgb(255,0,255);border-bottom-color: rgb(255,0,255);border-left-color: rgb(255,0,255);border-top-style: solid;border-right-style: solid;border-bottom-style: solid;border-left-style: solid;border-top-width: 2px;border-right-width: 2px;border-bottom-width: 2px;border-left-width: 2px;font-style: italic;font-variant: normal;font-weight: 500;font-size: 14px;line-height: 1.618;font-family: \"Trebuchet MS\",Georgia,serif;background-color: rgb(204,204,204);background-image: url(\"/images/foo.png\");background-repeat: no-repeat;background-attachment: scroll;background-position: left top;}' . \"\\n\";\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\t}\n\n\tfunction testCreateShorthands() {\n\t\t$oDoc = $this->parsedStructureForFile('create-shorthands');\n\t\t$sExpected = 'body {font-size: 2em;font-family: Helvetica,Arial,sans-serif;font-weight: bold;border-width: 2px;border-color: rgb(153,153,153);border-style: dotted;background-color: rgb(255,255,255);background-image: url(\"foobar.png\");background-repeat: repeat-y;margin-top: 2px;margin-right: 3px;margin-bottom: 4px;margin-left: 5px;}' . \"\\n\";\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\t\t$oDoc->createShorthands();\n\t\t$sExpected = 'body {background: rgb(255,255,255) url(\"foobar.png\") repeat-y;margin: 2px 5px 4px 3px;border: 2px dotted rgb(153,153,153);font: bold 2em Helvetica,Arial,sans-serif;}' . \"\\n\";\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\t}\n\n\tfunction testNamespaces() {\n\t\t$oDoc = $this->parsedStructureForFile('namespaces');\n\t\t$sExpected = '@namespace toto \"http://toto.example.org\";@namespace \"http://example.com/foo\";@namespace foo url(\"http://www.example.com/\");@namespace foo url(\"http://www.example.com/\");foo|test {gaga: 1;}\n|test {gaga: 2;}' . \"\\n\";\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\t}\n\t\n\tfunction testInnerColors() {\n\t\t$oDoc = $this->parsedStructureForFile('inner-color');\n\t\t$sExpected = 'test {background: -webkit-gradient(linear,0 0,0 bottom,from(rgb(0,108,173)),to(rgb(0,159,249)));}' . \"\\n\";\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\t}\n\n\tfunction testPrefixedGradient() {\n\t\t$oDoc = $this->parsedStructureForFile('webkit');\n\t\t$sExpected = '.test {background: -webkit-linear-gradient(top right,white,black);}' . \"\\n\";\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\t}\n\n\tfunction testListValueRemoval() {\n\t\t$oDoc = $this->parsedStructureForFile('atrules');\n\t\tforeach ($oDoc->getContents() as $oItem) {\n\t\t\tif ($oItem instanceof AtRule || $oItem instanceof KeyFrame) {\n\t\t\t\t$oDoc->remove($oItem);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\t$this->assertSame('@charset \"utf-8\";html, body {font-size: 1.6em;}' . \"\\n\", $oDoc->__toString());\n\n\t\t$oDoc = $this->parsedStructureForFile('nested');\n\t\tforeach ($oDoc->getAllDeclarationBlocks() as $oBlock) {\n\t\t\t$oDoc->removeDeclarationBlockBySelector($oBlock, false);\n\t\t\tbreak;\n\t\t}\n\t\t$this->assertSame('html {some-other: -test(val1);}\n@media screen {html {some: -test(val2);}\n}#unrelated {other: yes;}' . \"\\n\", $oDoc->__toString());\n\n\t\t$oDoc = $this->parsedStructureForFile('nested');\n\t\tforeach ($oDoc->getAllDeclarationBlocks() as $oBlock) {\n\t\t\t$oDoc->removeDeclarationBlockBySelector($oBlock, true);\n\t\t\tbreak;\n\t\t}\n\t\t$this->assertSame('@media screen {html {some: -test(val2);}\n}#unrelated {other: yes;}' . \"\\n\", $oDoc->__toString());\n\t}\n\n\tfunction parsedStructureForFile($sFileName) {\n\t\t$sFile = dirname(__FILE__) . '/../../files' . DIRECTORY_SEPARATOR . \"$sFileName.css\";\n\t\t$oParser = new Parser(file_get_contents($sFile));\n\t\treturn $oParser->parse();\n\t}\n\n}\n"], "fixing_code": ["<?php\n\nnamespace Sabberworm\\CSS\\CSSList;\n\nuse Sabberworm\\CSS\\RuleSet\\DeclarationBlock;\nuse Sabberworm\\CSS\\RuleSet\\RuleSet;\nuse Sabberworm\\CSS\\Property\\Selector;\nuse Sabberworm\\CSS\\Rule\\Rule;\nuse Sabberworm\\CSS\\Value\\ValueList;\nuse Sabberworm\\CSS\\Value\\CSSFunction;\n\n/**\n * A CSSBlockList is a CSSList whose DeclarationBlocks are guaranteed to contain valid declaration blocks or at-rules.\n * Most CSSLists conform to this category but some at-rules (such as @keyframes) do not.\n */\nabstract class CSSBlockList extends CSSList {\n\tprotected function allDeclarationBlocks(&$aResult) {\n\t\tforeach ($this->aContents as $mContent) {\n\t\t\tif ($mContent instanceof DeclarationBlock) {\n\t\t\t\t$aResult[] = $mContent;\n\t\t\t} else if ($mContent instanceof CSSBlockList) {\n\t\t\t\t$mContent->allDeclarationBlocks($aResult);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected function allRuleSets(&$aResult) {\n\t\tforeach ($this->aContents as $mContent) {\n\t\t\tif ($mContent instanceof RuleSet) {\n\t\t\t\t$aResult[] = $mContent;\n\t\t\t} else if ($mContent instanceof CSSBlockList) {\n\t\t\t\t$mContent->allRuleSets($aResult);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected function allValues($oElement, &$aResult, $sSearchString = null, $bSearchInFunctionArguments = false) {\n\t\tif ($oElement instanceof CSSBlockList) {\n\t\t\tforeach ($oElement->getContents() as $oContent) {\n\t\t\t\t$this->allValues($oContent, $aResult, $sSearchString, $bSearchInFunctionArguments);\n\t\t\t}\n\t\t} else if ($oElement instanceof RuleSet) {\n\t\t\tforeach ($oElement->getRules($sSearchString) as $oRule) {\n\t\t\t\t$this->allValues($oRule, $aResult, $sSearchString, $bSearchInFunctionArguments);\n\t\t\t}\n\t\t} else if ($oElement instanceof Rule) {\n\t\t\t$this->allValues($oElement->getValue(), $aResult, $sSearchString, $bSearchInFunctionArguments);\n\t\t} else if ($oElement instanceof ValueList) {\n\t\t\tif ($bSearchInFunctionArguments || !($oElement instanceof CSSFunction)) {\n\t\t\t\tforeach ($oElement->getListComponents() as $mComponent) {\n\t\t\t\t\t$this->allValues($mComponent, $aResult, $sSearchString, $bSearchInFunctionArguments);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t//Non-List Value or String (CSS identifier)\n\t\t\t$aResult[] = $oElement;\n\t\t}\n\t}\n\n\tprotected function allSelectors(&$aResult, $sSpecificitySearch = null) {\n\t\t$aDeclarationBlocks = array();\n\t\t$this->allDeclarationBlocks($aDeclarationBlocks);\n\t\tforeach ($aDeclarationBlocks as $oBlock) {\n\t\t\tforeach ($oBlock->getSelectors() as $oSelector) {\n\t\t\t\tif ($sSpecificitySearch === null) {\n\t\t\t\t\t$aResult[] = $oSelector;\n\t\t\t\t} else {\n\t\t\t\t\t$sComparator = '===';\n\t\t\t\t\t$aSpecificitySearch = explode(' ', $sSpecificitySearch);\n\t\t\t\t\t$iTargetSpecificity = $aSpecificitySearch[0];\n\t\t\t\t\tif(count($aSpecificitySearch) > 1) {\n\t\t\t\t\t\t$sComparator = $aSpecificitySearch[0];\n\t\t\t\t\t\t$iTargetSpecificity = $aSpecificitySearch[1];\n\t\t\t\t\t}\n\t\t\t\t\t$iTargetSpecificity = (int)$iTargetSpecificity;\n\t\t\t\t\t$iSelectorSpecificity = $oSelector->getSpecificity();\n\t\t\t\t\t$bMatches = false;\n\t\t\t\t\tswitch($sComparator) {\n\t\t\t\t\t\tcase '<=':\n\t\t\t\t\t\t\t$bMatches = $iSelectorSpecificity <= $iTargetSpecificity;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '<':\n\t\t\t\t\t\t\t$bMatches = $iSelectorSpecificity < $iTargetSpecificity;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '>=':\n\t\t\t\t\t\t\t$bMatches = $iSelectorSpecificity >= $iTargetSpecificity;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '>':\n\t\t\t\t\t\t\t$bMatches = $iSelectorSpecificity > $iTargetSpecificity;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$bMatches = $iSelectorSpecificity === $iTargetSpecificity;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ($bMatches) {\n\t\t\t\t\t\t$aResult[] = $oSelector;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "<?php\n\nnamespace Sabberworm\\CSS\\CSSList;\n\n/**\n * The root CSSList of a parsed file. Contains all top-level css contents, mostly declaration blocks, but also any @-rules encountered.\n */\nclass Document extends CSSBlockList {\n\n    /**\n     * Gets all DeclarationBlock objects recursively.\n     */\n    public function getAllDeclarationBlocks() {\n        $aResult = array();\n        $this->allDeclarationBlocks($aResult);\n        return $aResult;\n    }\n\n    /**\n     * @deprecated use getAllDeclarationBlocks()\n     */\n    public function getAllSelectors() {\n        return $this->getAllDeclarationBlocks();\n    }\n\n    /**\n     * Returns all RuleSet objects found recursively in the tree.\n     */\n    public function getAllRuleSets() {\n        $aResult = array();\n        $this->allRuleSets($aResult);\n        return $aResult;\n    }\n\n    /**\n     * Returns all Value objects found recursively in the tree.\n     * @param (object|string) $mElement the CSSList or RuleSet to start the search from (defaults to the whole document). If a string is given, it is used as rule name filter (@see{RuleSet->getRules()}).\n     * @param (bool) $bSearchInFunctionArguments whether to also return Value objects used as Function arguments.\n     */\n    public function getAllValues($mElement = null, $bSearchInFunctionArguments = false) {\n        $sSearchString = null;\n        if ($mElement === null) {\n            $mElement = $this;\n        } else if (is_string($mElement)) {\n            $sSearchString = $mElement;\n            $mElement = $this;\n        }\n        $aResult = array();\n        $this->allValues($mElement, $aResult, $sSearchString, $bSearchInFunctionArguments);\n        return $aResult;\n    }\n\n    /**\n     * Returns all Selector objects found recursively in the tree.\n     * Note that this does not yield the full DeclarationBlock that the selector belongs to (and, currently, there is no way to get to that).\n     * @param $sSpecificitySearch An optional filter by specificity. May contain a comparison operator and a number or just a number (defaults to \"==\").\n     * @example getSelectorsBySpecificity('>= 100')\n     */\n    public function getSelectorsBySpecificity($sSpecificitySearch = null) {\n        $aResult = array();\n        $this->allSelectors($aResult, $sSpecificitySearch);\n        return $aResult;\n    }\n\n    /**\n     * Expands all shorthand properties to their long value\n     */\n    public function expandShorthands() {\n        foreach ($this->getAllDeclarationBlocks() as $oDeclaration) {\n            $oDeclaration->expandShorthands();\n        }\n    }\n\n    /*\n     * Create shorthands properties whenever possible\n     */\n\n    public function createShorthands() {\n        foreach ($this->getAllDeclarationBlocks() as $oDeclaration) {\n            $oDeclaration->createShorthands();\n        }\n    }\n\n}", "<?php\n\nnamespace Sabberworm\\CSS;\n\nuse Sabberworm\\CSS\\Value\\Size;\nuse Sabberworm\\CSS\\Property\\Selector;\nuse Sabberworm\\CSS\\RuleSet\\AtRule;\nuse Sabberworm\\CSS\\CSSList\\KeyFrame;\n\nclass ParserTest extends \\PHPUnit_Framework_TestCase {\n\n\tfunction testFiles() {\n\n\t\t$sDirectory = dirname(__FILE__) . '/../../files';\n\t\tif ($rHandle = opendir($sDirectory)) {\n\t\t\t/* This is the correct way to loop over the directory. */\n\t\t\twhile (false !== ($sFileName = readdir($rHandle))) {\n\t\t\t\tif (strpos($sFileName, '.') === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (strrpos($sFileName, '.css') !== strlen($sFileName) - strlen('.css')) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (strpos($sFileName, '-') === 0) {\n\t\t\t\t\t//Either a file which SHOULD fail or a future test of a as-of-now missing feature\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$oParser = new Parser(file_get_contents($sDirectory . DIRECTORY_SEPARATOR . $sFileName));\n\t\t\t\ttry {\n\t\t\t\t\t$this->assertNotEquals('', $oParser->parse()->__toString());\n\t\t\t\t} catch (\\Exception $e) {\n\t\t\t\t\t$this->fail($e);\n\t\t\t\t}\n\t\t\t}\n\t\t\tclosedir($rHandle);\n\t\t}\n\t}\n\n\t/**\n\t * @depends testFiles\n\t */\n\tfunction testColorParsing() {\n\t\t$oDoc = $this->parsedStructureForFile('colortest');\n\t\tforeach ($oDoc->getAllRuleSets() as $oRuleSet) {\n\t\t\tif (!$oRuleSet instanceof DeclarationBlock) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$sSelector = $oRuleSet->getSelectors();\n\t\t\t$sSelector = $sSelector[0]->getSelector();\n\t\t\tif ($sSelector == '#mine') {\n\t\t\t\t$aColorRule = $oRuleSet->getRules('color');\n\t\t\t\t$aValues = $aColorRule['color']->getValues();\n\t\t\t\t$this->assertSame('red', $aValues[0][0]);\n\t\t\t\t$aColorRule = $oRuleSet->getRules('background-');\n\t\t\t\t$aValues = $aColorRule['background-color']->getValues();\n\t\t\t\t$this->assertEquals(array('r' => new Size(35.0, null, true), 'g' => new Size(35.0, null, true), 'b' => new Size(35.0, null, true)), $aValues[0][0]->getColor());\n\t\t\t\t$aColorRule = $oRuleSet->getRules('border-color');\n\t\t\t\t$aValues = $aColorRule['border-color']->getValues();\n\t\t\t\t$this->assertEquals(array('r' => new Size(10.0, null, true), 'g' => new Size(100.0, null, true), 'b' => new Size(230.0, null, true), 'a' => new Size(0.3, null, true)), $aValues[0][0]->getColor());\n\t\t\t\t$aColorRule = $oRuleSet->getRules('outline-color');\n\t\t\t\t$aValues = $aColorRule['outline-color']->getValues();\n\t\t\t\t$this->assertEquals(array('r' => new Size(34.0, null, true), 'g' => new Size(34.0, null, true), 'b' => new Size(34.0, null, true)), $aValues[0][0]->getColor());\n\t\t\t}\n\t\t}\n\t\tforeach ($oDoc->getAllValues('background-') as $oColor) {\n\t\t\tif ($oColor->getColorDescription() === 'hsl') {\n\t\t\t\t$this->assertEquals(array('h' => new Size(220.0, null, true), 's' => new Size(10.0, null, true), 'l' => new Size(220.0, null, true)), $oColor->getColor());\n\t\t\t}\n\t\t}\n\t\tforeach ($oDoc->getAllValues('color') as $sColor) {\n\t\t\t$this->assertSame('red', $sColor);\n\t\t}\n\t}\n\n\tfunction testUnicodeParsing() {\n\t\t$oDoc = $this->parsedStructureForFile('unicode');\n\t\tforeach ($oDoc->getAllDeclarationBlocks() as $oRuleSet) {\n\t\t\t$sSelector = $oRuleSet->getSelectors();\n\t\t\t$sSelector = $sSelector[0]->getSelector();\n\t\t\tif (substr($sSelector, 0, strlen('.test-')) !== '.test-') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$aContentRules = $oRuleSet->getRules('content');\n\t\t\t$aContents = $aContentRules['content']->getValues();\n\t\t\t$sString = $aContents[0][0]->__toString();\n\t\t\tif ($sSelector == '.test-1') {\n\t\t\t\t$this->assertSame('\" \"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-2') {\n\t\t\t\t$this->assertSame('\"\u00e9\"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-3') {\n\t\t\t\t$this->assertSame('\" \"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-4') {\n\t\t\t\t$this->assertSame('\"\ud834\udd1e\"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-5') {\n\t\t\t\t$this->assertSame('\"\u6c34\"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-6') {\n\t\t\t\t$this->assertSame('\"\u00a5\"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-7') {\n\t\t\t\t$this->assertSame('\"\\A\"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-8') {\n\t\t\t\t$this->assertSame('\"\\\"\\\"\"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-9') {\n\t\t\t\t$this->assertSame('\"\\\"\\\\\\'\"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-10') {\n\t\t\t\t$this->assertSame('\"\\\\\\'\\\\\\\\\"', $sString);\n\t\t\t}\n\t\t\tif ($sSelector == '.test-11') {\n\t\t\t\t$this->assertSame('\"test\"', $sString);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction testSpecificity() {\n\t\t$oDoc = $this->parsedStructureForFile('specificity');\n\t\t$oDeclarationBlock = $oDoc->getAllDeclarationBlocks();\n\t\t$oDeclarationBlock = $oDeclarationBlock[0];\n\t\t$aSelectors = $oDeclarationBlock->getSelectors();\n\t\tforeach ($aSelectors as $oSelector) {\n\t\t\tswitch ($oSelector->getSelector()) {\n\t\t\t\tcase \"#test .help\":\n\t\t\t\t\t$this->assertSame(110, $oSelector->getSpecificity());\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"#file\":\n\t\t\t\t\t$this->assertSame(100, $oSelector->getSpecificity());\n\t\t\t\t\tbreak;\n\t\t\t\tcase \".help:hover\":\n\t\t\t\t\t$this->assertSame(20, $oSelector->getSpecificity());\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ol li::before\":\n\t\t\t\t\t$this->assertSame(3, $oSelector->getSpecificity());\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"li.green\":\n\t\t\t\t\t$this->assertSame(11, $oSelector->getSpecificity());\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$this->fail(\"specificity: untested selector \" . $oSelector->getSelector());\n\t\t\t}\n\t\t}\n\t\t$this->assertEquals(array(new Selector('#test .help', true)), $oDoc->getSelectorsBySpecificity('> 100'));\n\t\t$this->assertEquals(array(new Selector('#test .help', true), new Selector('#file', true)), $oDoc->getSelectorsBySpecificity('>= 100'));\n\t\t$this->assertEquals(array(new Selector('#file', true)), $oDoc->getSelectorsBySpecificity('=== 100'));\n\t\t$this->assertEquals(array(new Selector('#file', true)), $oDoc->getSelectorsBySpecificity('== 100'));\n\t\t$this->assertEquals(array(new Selector('#file', true), new Selector('.help:hover', true), new Selector('li.green', true), new Selector('ol li::before', true)), $oDoc->getSelectorsBySpecificity('<= 100'));\n\t\t$this->assertEquals(array(new Selector('.help:hover', true), new Selector('li.green', true), new Selector('ol li::before', true)), $oDoc->getSelectorsBySpecificity('< 100'));\n\t\t$this->assertEquals(array(new Selector('li.green', true)), $oDoc->getSelectorsBySpecificity('11'));\n\t\t$this->assertEquals(array(new Selector('ol li::before', true)), $oDoc->getSelectorsBySpecificity(3));\n\t}\n\n\tfunction testManipulation() {\n\t\t$oDoc = $this->parsedStructureForFile('atrules');\n\t\t$this->assertSame('@charset \"utf-8\";@font-face {font-family: \"CrassRoots\";src: url(\"../media/cr.ttf\");}html, body {font-size: 1.6em;}\n@keyframes mymove {from {top: 0px;}\nto {top: 200px;}\n}@-moz-keyframes some-move {from {top: 0px;}\nto {top: 200px;}\n}', $oDoc->__toString());\n\t\tforeach ($oDoc->getAllDeclarationBlocks() as $oBlock) {\n\t\t\tforeach ($oBlock->getSelectors() as $oSelector) {\n\t\t\t\t//Loop over all selector parts (the comma-separated strings in a selector) and prepend the id\n\t\t\t\t$oSelector->setSelector('#my_id ' . $oSelector->getSelector());\n\t\t\t}\n\t\t}\n\t\t$this->assertSame('@charset \"utf-8\";@font-face {font-family: \"CrassRoots\";src: url(\"../media/cr.ttf\");}#my_id html, #my_id body {font-size: 1.6em;}\n@keyframes mymove {from {top: 0px;}\nto {top: 200px;}\n}@-moz-keyframes some-move {from {top: 0px;}\nto {top: 200px;}\n}', $oDoc->__toString());\n\n\t\t$oDoc = $this->parsedStructureForFile('values');\n\t\t$this->assertSame('#header {margin: 10px 2em 1cm 2%;font-family: Verdana,Helvetica,\"Gill Sans\",sans-serif;font-size: 10px;color: red !important;}\nbody {color: green;font: 75% \"Lucida Grande\",\"Trebuchet MS\",Verdana,sans-serif;}' . \"\\n\", $oDoc->__toString());\n\t\tforeach ($oDoc->getAllRuleSets() as $oRuleSet) {\n\t\t\t$oRuleSet->removeRule('font-');\n\t\t}\n\t\t$this->assertSame('#header {margin: 10px 2em 1cm 2%;color: red !important;}\nbody {color: green;}' . \"\\n\", $oDoc->__toString());\n\t}\n\n\tfunction testSlashedValues() {\n\t\t$oDoc = $this->parsedStructureForFile('slashed');\n\t\t$this->assertSame('.test {font: 12px/1.5 Verdana,Arial,sans-serif;border-radius: 5px 10px 5px 10px/10px 5px 10px 5px;}' . \"\\n\", $oDoc->__toString());\n\t\tforeach ($oDoc->getAllValues(null) as $mValue) {\n\t\t\tif ($mValue instanceof Size && $mValue->isSize() && !$mValue->isRelative()) {\n\t\t\t\t$mValue->setSize($mValue->getSize() * 3);\n\t\t\t}\n\t\t}\n\t\tforeach ($oDoc->getAllDeclarationBlocks() as $oBlock) {\n\t\t\t$oRule = $oBlock->getRules('font');\n\t\t\t$oRule = $oRule['font'];\n\t\t\t$oSpaceList = $oRule->getValue();\n\t\t\t$this->assertEquals(' ', $oSpaceList->getListSeparator());\n\t\t\t$oSlashList = $oSpaceList->getListComponents();\n\t\t\t$oCommaList = $oSlashList[1];\n\t\t\t$oSlashList = $oSlashList[0];\n\t\t\t$this->assertEquals(',', $oCommaList->getListSeparator());\n\t\t\t$this->assertEquals('/', $oSlashList->getListSeparator());\n\t\t\t$oRule = $oBlock->getRules('border-radius');\n\t\t\t$oRule = $oRule['border-radius'];\n\t\t\t$oSlashList = $oRule->getValue();\n\t\t\t$this->assertEquals('/', $oSlashList->getListSeparator());\n\t\t\t$oSpaceList1 = $oSlashList->getListComponents();\n\t\t\t$oSpaceList2 = $oSpaceList1[1];\n\t\t\t$oSpaceList1 = $oSpaceList1[0];\n\t\t\t$this->assertEquals(' ', $oSpaceList1->getListSeparator());\n\t\t\t$this->assertEquals(' ', $oSpaceList2->getListSeparator());\n\t\t}\n\t\t$this->assertSame('.test {font: 36px/1.5 Verdana,Arial,sans-serif;border-radius: 15px 30px 15px 30px/30px 15px 30px 15px;}' . \"\\n\", $oDoc->__toString());\n\t}\n\n\tfunction testFunctionSyntax() {\n\t\t$oDoc = $this->parsedStructureForFile('functions');\n\t\t$sExpected = 'div.main {background-image: linear-gradient(rgb(0,0,0),rgb(255,255,255));}\n.collapser::before, .collapser::-moz-before, .collapser::-webkit-before {content: \"\u00bb\";font-size: 1.2em;margin-right: 0.2em;-moz-transition-property: -moz-transform;-moz-transition-duration: 0.2s;-moz-transform-origin: center 60%;}\n.collapser.expanded::before, .collapser.expanded::-moz-before, .collapser.expanded::-webkit-before {-moz-transform: rotate(90deg);}\n.collapser + * {height: 0;overflow: hidden;-moz-transition-property: height;-moz-transition-duration: 0.3s;}\n.collapser.expanded + * {height: auto;}' . \"\\n\";\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\n\t\tforeach ($oDoc->getAllValues(null, true) as $mValue) {\n\t\t\tif ($mValue instanceof Size && $mValue->isSize()) {\n\t\t\t\t$mValue->setSize($mValue->getSize() * 3);\n\t\t\t}\n\t\t}\n\t\t$sExpected = str_replace(array('1.2em', '0.2em', '60%'), array('3.6em', '0.6em', '180%'), $sExpected);\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\n\t\tforeach ($oDoc->getAllValues(null, true) as $mValue) {\n\t\t\tif ($mValue instanceof Size && !$mValue->isRelative() && !$mValue->isColorComponent()) {\n\t\t\t\t$mValue->setSize($mValue->getSize() * 2);\n\t\t\t}\n\t\t}\n\t\t$sExpected = str_replace(array('0.2s', '0.3s', '90deg'), array('0.4s', '0.6s', '180deg'), $sExpected);\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\t}\n\n\tfunction testExpandShorthands() {\n\t\t$oDoc = $this->parsedStructureForFile('expand-shorthands');\n\t\t$sExpected = 'body {font: italic 500 14px/1.618 \"Trebuchet MS\",Georgia,serif;border: 2px solid rgb(255,0,255);background: rgb(204,204,204) url(\"/images/foo.png\") no-repeat left top;margin: 1em !important;padding: 2px 6px 3px;}' . \"\\n\";\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\t\t$oDoc->expandShorthands();\n\t\t$sExpected = 'body {margin-top: 1em !important;margin-right: 1em !important;margin-bottom: 1em !important;margin-left: 1em !important;padding-top: 2px;padding-right: 6px;padding-bottom: 3px;padding-left: 6px;border-top-color: rgb(255,0,255);border-right-color: rgb(255,0,255);border-bottom-color: rgb(255,0,255);border-left-color: rgb(255,0,255);border-top-style: solid;border-right-style: solid;border-bottom-style: solid;border-left-style: solid;border-top-width: 2px;border-right-width: 2px;border-bottom-width: 2px;border-left-width: 2px;font-style: italic;font-variant: normal;font-weight: 500;font-size: 14px;line-height: 1.618;font-family: \"Trebuchet MS\",Georgia,serif;background-color: rgb(204,204,204);background-image: url(\"/images/foo.png\");background-repeat: no-repeat;background-attachment: scroll;background-position: left top;}' . \"\\n\";\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\t}\n\n\tfunction testCreateShorthands() {\n\t\t$oDoc = $this->parsedStructureForFile('create-shorthands');\n\t\t$sExpected = 'body {font-size: 2em;font-family: Helvetica,Arial,sans-serif;font-weight: bold;border-width: 2px;border-color: rgb(153,153,153);border-style: dotted;background-color: rgb(255,255,255);background-image: url(\"foobar.png\");background-repeat: repeat-y;margin-top: 2px;margin-right: 3px;margin-bottom: 4px;margin-left: 5px;}' . \"\\n\";\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\t\t$oDoc->createShorthands();\n\t\t$sExpected = 'body {background: rgb(255,255,255) url(\"foobar.png\") repeat-y;margin: 2px 5px 4px 3px;border: 2px dotted rgb(153,153,153);font: bold 2em Helvetica,Arial,sans-serif;}' . \"\\n\";\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\t}\n\n\tfunction testNamespaces() {\n\t\t$oDoc = $this->parsedStructureForFile('namespaces');\n\t\t$sExpected = '@namespace toto \"http://toto.example.org\";@namespace \"http://example.com/foo\";@namespace foo url(\"http://www.example.com/\");@namespace foo url(\"http://www.example.com/\");foo|test {gaga: 1;}\n|test {gaga: 2;}' . \"\\n\";\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\t}\n\t\n\tfunction testInnerColors() {\n\t\t$oDoc = $this->parsedStructureForFile('inner-color');\n\t\t$sExpected = 'test {background: -webkit-gradient(linear,0 0,0 bottom,from(rgb(0,108,173)),to(rgb(0,159,249)));}' . \"\\n\";\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\t}\n\n\tfunction testPrefixedGradient() {\n\t\t$oDoc = $this->parsedStructureForFile('webkit');\n\t\t$sExpected = '.test {background: -webkit-linear-gradient(top right,white,black);}' . \"\\n\";\n\t\t$this->assertSame($sExpected, $oDoc->__toString());\n\t}\n\n\tfunction testListValueRemoval() {\n\t\t$oDoc = $this->parsedStructureForFile('atrules');\n\t\tforeach ($oDoc->getContents() as $oItem) {\n\t\t\tif ($oItem instanceof AtRule || $oItem instanceof KeyFrame) {\n\t\t\t\t$oDoc->remove($oItem);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\t$this->assertSame('@charset \"utf-8\";html, body {font-size: 1.6em;}' . \"\\n\", $oDoc->__toString());\n\n\t\t$oDoc = $this->parsedStructureForFile('nested');\n\t\tforeach ($oDoc->getAllDeclarationBlocks() as $oBlock) {\n\t\t\t$oDoc->removeDeclarationBlockBySelector($oBlock, false);\n\t\t\tbreak;\n\t\t}\n\t\t$this->assertSame('html {some-other: -test(val1);}\n@media screen {html {some: -test(val2);}\n}#unrelated {other: yes;}' . \"\\n\", $oDoc->__toString());\n\n\t\t$oDoc = $this->parsedStructureForFile('nested');\n\t\tforeach ($oDoc->getAllDeclarationBlocks() as $oBlock) {\n\t\t\t$oDoc->removeDeclarationBlockBySelector($oBlock, true);\n\t\t\tbreak;\n\t\t}\n\t\t$this->assertSame('@media screen {html {some: -test(val2);}\n}#unrelated {other: yes;}' . \"\\n\", $oDoc->__toString());\n\t}\n\n\tfunction parsedStructureForFile($sFileName) {\n\t\t$sFile = dirname(__FILE__) . '/../../files' . DIRECTORY_SEPARATOR . \"$sFileName.css\";\n\t\t$oParser = new Parser(file_get_contents($sFile));\n\t\treturn $oParser->parse();\n\t}\n\n}\n"], "filenames": ["lib/Sabberworm/CSS/CSSList/CSSBlockList.php", "lib/Sabberworm/CSS/CSSList/Document.php", "tests/Sabberworm/CSS/ParserTest.php"], "buggy_code_start_loc": [68, 60, 148], "buggy_code_end_loc": [71, 63, 148], "fixing_code_start_loc": [68, 59, 149], "fixing_code_end_loc": [96, 59, 156], "type": "CWE-94", "message": "Sabberworm PHP CSS Parser before 8.3.1 calls eval on uncontrolled data, possibly leading to remote code execution if the function allSelectors() or getSelectorsBySpecificity() is called with input from an attacker.", "other": {"cve": {"id": "CVE-2020-13756", "sourceIdentifier": "cve@mitre.org", "published": "2020-06-03T14:15:12.703", "lastModified": "2021-07-21T11:39:23.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Sabberworm PHP CSS Parser before 8.3.1 calls eval on uncontrolled data, possibly leading to remote code execution if the function allSelectors() or getSelectorsBySpecificity() is called with input from an attacker."}, {"lang": "es", "value": "Sabberworm PHP CSS Parser versiones anteriores a  8.3.1, llamadas eval en datos no controlados, posiblemente conllevan a una ejecuci\u00f3n de c\u00f3digo remota si son llamadas las funciones allSelectors() o getSelectorsBySpecificity() con una entrada de un atacante."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sabberworm:php_css_parser:*:*:*:*:*:*:*:*", "versionEndExcluding": "8.3.1", "matchCriteriaId": "9C26C280-0826-4A73-A258-642A7A64EEA8"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/157923/Sabberworm-PHP-CSS-Code-Injection.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "http://seclists.org/fulldisclosure/2020/Jun/7", "source": "cve@mitre.org", "tags": ["Exploit", "Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/sabberworm/PHP-CSS-Parser/commit/2ebf59e8bfbf6cfc1653a5f0ed743b95062c62a4", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/sabberworm/PHP-CSS-Parser/releases/tag/8.3.1", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/sabberworm/PHP-CSS-Parser/commit/2ebf59e8bfbf6cfc1653a5f0ed743b95062c62a4"}}