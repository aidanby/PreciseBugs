{"buggy_code": ["phpMyAdmin - ChangeLog\n======================\n\n4.8.3 (not yet released)\n- issue #14314 Error when naming a database '0'\n- issue #14333 Fix NULL as default not shown\n- issue #14229 Fixes issue with recent table list\n- issue #14045 Fix slow performance on DB structure filtering\n- issue #14327 Fix Editing server variable not showing save or cancel option\n- issue #14377 Populate options for view create and edit\n- issue #14171 2FA configuration fails if PHP doesn't have GD support\n- issue #14390 Can't unhide tables\n- issue #14382 \"Visualize GIS data\" icon missing\n- issue #14435 Event scheduler status toggle doesn't work\n- issue #14365 View not working on multiple servers\n- issue #14207 Partition actions in table structure do not work\n- issue #14375 Fixes ERR_BLOCKED_BY_XSS_AUDITOR on export table\n- issue #14552 Blank message shown instead of MySQL error when adding trigger and other locations\n- issue #14525 Fix PHP 7.3 warning: \"continue\" in \"switch\" is equal to \"break\"\n- issue #14554 Icon missing when creating a new trigger, routine, and event\n- issue #14422 Table comment not showing since 4.8.1\n- issue #14426 Drop table doesn't work when you copy tables to another database\n\n4.8.2 (2018-06-21)\n- issue #14370 WHERE 0 causes Fatal error\n- issue #14225 Fix missing index icon\n- issue        [security] XSS vulnerability in Designer, see PMASA-2018-3\n- issue        [security] File inclusion and remote code execution vulnerability, see PMASA-2018-4\n\n4.8.1 (2018-05-24)\n- issue #12772 Fix case where the central columns attributes don't get filled in\n- issue #14049 Fix case where the query builder doesn't work when selected column is *\n- issue #14029 Revert \"Browse\" table CSS overflow\n- issue #14241 Dropping indexes and foreign keys fail\n- issue #14227 Relational linking broken\n- issue #14246 Fixed error in configuration storage zero config\n- issue #14128 Show 2FA Secret next to QR code\n- issue #14212 XML Export from single table throws fatal error\n- issue #14239 Line and some other charts ignore result set order of values chosen for the x-axis\n- issue #14260 Fixed configuration for DefaultLang and Lang\n- issue #14264 Linking for 'Distinct values' broken\n- issue #13968 Fix MariaDB 10.2 current_timestamp()\n- issue #14249 Fix for missing go button in view edit\n- issue #14125 Fix for issues with spatial fields\n- issue #14189 Remember table's sorting broken\n- issue #14289 Fix multi-column sorting\n- issue #14278 Fix central columns in-line edit bug\n- issue #14066 Fix AUTO_INCREMENT error when only exporting table structure in database-level exports\n- issue #13893 Simulating queries produces unexpected results\n- issue #14309 Setup script icons missing\n\n4.8.0.1 (2018-04-19)\n- issue        [security] Multiple CSRF vulnerabilities, See PMASA-2018-02\n\n4.8.0 (2018-04-07)\n- issue #12946 Allow to export JSON with unescaped unicode chars\n- issue #12983 Disable login button without solved reCaptcha\n- issue #12315 Allow to remove individual segments from pie charts\n- issue        Change label from \"Improve table structure\" to \"Normalize\" to match standard terminology\n- issue #13087 Offer login as different user on access denied from MySQL\n- issue #13110 Indicate when HTTPS is not properly reported on the server\n- issue #13119 No database selected error when adding foreign key\n- issue #12388 Improved database search to allow search for exact phrase match\n- issue #13099 Report error when trying to copy database to same name\n- issue #13167 Themes now have to contain metadata in theme.json\n- issue #6363  phpMyAdmin no longer requires eval() in PHP\n- issue #12386 The mbstring dependency is now optional\n- issue #13269 Small refactoring in preparation to CSP\n- issue #13384 Database link broken in Databases Page\n- issue #13391 Configurable authentication logging using $cfg['AuthLog']\n- issue #13086 Add support for Google Invisible Captcha\n- issue #13058 Improved error reporting for reCAPTCHA\n- issue #12899 Improved rendering of server variables table\n- issue #12948 Fixed javascript editor for TIME values\n- issue #13095 Fixed alignment of foreign keys editing\n- issue #12944 Improved inline editor for JSON\n- issue #13145 Improved layout of operations pages\n- issue #13448 Add \"format\" query button in edit view form\n- issue #6241  Implement Responsive Design/mobile interface\n- issue        Use a single location for classes under PhpMyAdmin namespace\n- issue #12354 Indicate SSL status on main page\n- issue #5666  Configuration directives for defaults of Transformation options\n- issue #12261 Remove inline JavaScript\n- issue #13408 Show MySQL warnings when executing SQL queries\n- issue #5827  Allow Designer to show tables from other databases\n- issue #13268 Replace Query-By-Example with multi-table query generator interface\n- issue #13576 Add privileges export to per-database listing\n- issue        Consolidate functions into class files\n- issue #13560 Add support for changing collation for all tables and columns in database\n- issue #13303 Add support for creating fulltext index from table structure\n- issue #13711 Lower default value for $cfg['MaxExactCount']\n- issue #13722 DisableIS is not fully honored\n- issue #6197  Added support for authentication using U2F and 2FA\n- issue #13480 Avoid removing cookies on upgrade\n- issue #13397 Remember state of navigation panel\n- issue #11688 Reduced cookie usage\n- issue #13466 Better utilization of user preferences\n- issue #14042 Rename PMD to Designer\n- issue #13940 Honor arg_separator in AJAX requests\n- issue #14060 Can't edit rows in Internet Explorer\n- issue #14096 Internet Explorer compatibility; fixes JavaScript error Object doesn't support property or method 'startsWith'\n\n4.7.9 (2018-03-05)\n- issue #13931 Fixed browsing tables with more results\n- issue #13927 \"Not an integer\" when browsing a table\n- issue #13887 \"Input variables exceeded 1000\" error relating to PHP's max_input_vars directive\n\n4.7.8 (2018-02-20)\n- issue #13914 Fixed resetting default setting values.\n- issue #13758 Fixed fallback value for collation connection.\n- issue #13938 Fixed error handling in PHP 7.2\n- issue        [security] Fix XSS in Central Columns Feature, See PMASA-2018-01\n\n4.7.7 (2017-12-23)\n- issue #13865 Fixed displaying of formatted numeric values for some locales\n- issue #13856 Ensure datetimepicker is always loaded for datetime fields\n- issue #13848 Fixed PHP error when browsing certain results\n- issue        [security] Fix XSRF/CSRF vulnerability, see PMASA-2017-09\n\n4.7.6 (2017-11-29)\n- issue #13517 Fixed check all interaction with filtering\n- issue #13803 Add SJIS-win to default list of allowed charsets\n- issue #13436 Improve detection that MySQL server needs SSL connection\n- issue #13038 Support JSON datatype on MariaDB 10.2.7 and newer\n- issue #13824 Fixed constructing ALTER query with AFTER\n- issue #13821 Lock page when changes are done in the SQL editor\n- issue #13842 Prefer iconv for encoding conversions\n- issue #13737 Fixed changing password on MariaDB cluster\n\n4.7.5 (2017-10-23)\n- issue #13615 Avoid problems with browsing unknown query types\n- issue #13612 Integrate tooltip into datetime pickers\n- issue #13628 Fixed javascript error in server monitor\n- issue #13444 Fixed server monitor on non Linux and Windows systems\n- issue #13633 Reload javscript messages when changing language\n- issue #13604 Fixed crash on invalid ordering data\n- issue #13639 Fixed error when browsing non SELECT results\n- issue #13533 Fixed saving column to display\n- issue #13647 Fixed export of tables with VIRTUAL columns\n- issue #13669 Fixed selecting multiple rows accidentally selects the next row too\n- issue #13513 Fixed edit index Column alignment issue\n- issue #13515 Fixed rendering of add index dialog\n- issue #13710 Fixed possible error in server advisor\n- issue #13477 Fixed setting input transformations\n- issue #13552 Fixed IPv4/IPv6 To Binary input transformation\n- issue #13686 Clicking on column name to trigger sort with an active search leads to logout\n- issue #13725 Fixed copying tables with specific PARTITION definition\n- issue #13761 Fixed listing of bookmarks for a database\n- issue #13800 Database lost when renaming to similar name and lower_case_table_names=1\n\n4.7.4 (2017-08-23)\n- issue #13415 Remove shadow from the logo\n- issue #13507 Fixed per server theme feature\n- issue #13523 Missing newline in ALTER exports\n- issue #13414 Fixed several compatibility issues with PHP 7.2\n- issue #13550 Fixed copy results to clipboard\n- issue #13562 Add limitation for user group length\n- issue #13561 Fixed edit variable link in advisor\n- issue #13579 Optimize table link should not be visible in print page\n- issue #13553 Improved error handling on corrupted tables\n- issue #13512 Fixed rendering of add index dialog\n- issue #13606 Fixed refreshing server variables\n\n4.7.3 (2017-07-20)\n- issue #13447 Large multi-line query removes Export operation and blanks query box options\n- issue #13445 Fixed rendering of query results\n- issue #13437 Fixed version check when not connected to a database\n- issue #13465 Fixed creating relation\n- issue #13475 Fixed export without backquotes\n- issue #13482 Improved handling of uploaded files with open_basedir\n- issue #13387 Fixed inline editing of hex values\n- issue #13382 Fixed size of index edit dialog\n- issue #13489 Fixed rendering SQL lint errors\n- issue #13468 Avoid breakage if set_time_limit is disabled\n- issue #13471 Fail if ini_set/ini_get are disabled\n- issue #13436 Automatically connect using SSL when server is configured so\n- issue #13478 Fixed usage of some browser transformations\n\n4.7.2 (2017-06-29)\n- issue #13314 Make theme selection keep current server\n- issue #13311 Fixed direct login for accounts without password\n- issue #13316 Fixed check for mbstring.func_overload\n- issue #13323 Fixed wrong encoding of table at triggers\n- issue #12976 Fixed natural sorting in several places\n- issue #12718 Show warning for users removed from mysql.user table\n- issue #13362 Fixed loading additional javascripts\n- issue #13343 Fixed editing QBE\n- issue #13193 Improved documentation on user settings\n- issue #13092 Gracefully handle early fatal errors in AJAX requests\n- issue #13327 Fixed Incorrect NavigationTreeEnableExpansion default value in the documentation\n- issue #13008 Fixed export of database with a lot of tables\n- issue #13318 Improved performance when importing with enabled tracking\n- issue #13386 Avoid PHP errors with non existing configuration on OS X\n- issue #13388 Show only supported charsets for conversion\n- issue #13392 Fixed operation with session.auto_start enabled\n- issue #13383 \"Create PHP code\" is broken\n- issue #13189 Fixed links to resume timeouted import\n\n4.7.1 (2017-05-25)\n- issue #13132 Always execute tracking queries as controluser\n- issue #13125 Focus on SQL editor after inserting field name\n- issue #13133 Fixed broken links in setup\n- issue #13135 Database list Tooltips: Show wrong value\n- issue #13150 Fixed pagination while browsing resuls\n- issue #13149 Fixed outbound links in changelog.php\n- issue #13146 Do not include devel dependencies in the release\n- issue #13144 Do not show New as a database in database dropdown\n- issue #13130 Fixed handling of errors in AJAX requests\n- issue #13152 Fixed PHP error in case of invalid table preferences\n- issue #13154 Fixed PHP error on password change\n- issue #13219 Fix Refresh of Process List\n- issue #13182 Fix refresh of long queries\n- issue #12301 Improved handling of logout with disabled LoginCookieDeleteAll\n- issue #13216 Add support for MySQL 8.0 collations\n- issue #13218 Fixed rendering of phpMyAdmin logos\n- issue #13234 Properly report not working sessions\n- issue #13256 Fixed password check on server replication\n- issue #13252 Fixed grid editing time column\n- issue #13258 Fixed detection of Amazon RDS\n- issue #13241 Redirect user to last page that has any tables to display\n- issue #13266 Fix link to User accounts overview page\n- issue #13274 Fix error in query builder\n- issue #13177 Grid editing repeats action after error\n\n4.7.0 (2017-03-28)\n- patch #12233 [Display] Improve message when renaming database to same name\n- issue #6146  Log authentication attempts to syslog\n- issue #11981 Remove support for Swekey authentication\n- issue #11987 Remove code for no longer supported MSIE versions\n+ issue #11962 Remove embedded PHP libraries, use composer to install them\n+ issue #12017 Cannot easily select multiple tables when exporting\n+ issue #12047 Add javascript filtering for databases\n- issue #12166 More compact rendering of navigation tree\n+ issue #12129 Improve performance with SkipLockedTables\n- issue #12173 Do not hide indexes under a slider\n- issue        Improve performance of zip file import\n- issue #12196 Removed $cfg['ThemePath']\n- issue #6274  Add support for export user settings as config.inc.php snippet\n- issue #5555  Better report query errors while generating SQL exports\n- issue #12307 Produce valid JSON on export\n- issue #12325 Setup script icons broken\n- issue #12378 Support IPv6 proxies\n- issue        Removed MySQL connection retry without password\n- issue #12218 Allow to specify further parameters for control connection\n- issue #12162 Show charset for each table on Database structure page\n- issue #12463 Incorrect link in the href of icon at Hide/Show unhide links\n- issue #12330 Shortcut for closing console\n- issue #12465 Improved handling of http requests\n- issue #12474 Broken links in Setup forms Navigation\n- issue #12494 Can't add a new User\n- issue #12523 Add 'token' Parameter in all POST requests (Fix 'Token mismatch' errors)\n- issue #12302 Improved usage of number_format\n- issue #12656 Server selection not working\n- issue #12543 NULL results in dataset are colored grey\n- issue #12664 Create Bookmark broken\n- issue #12688 Use unsigned int for storing bookmark ID\n- issue #12352 Added password strength indicator\n- issue #12713 Correctly handle HTTP status when doing requests\n- issue #12247 Add option to delete settings from browser storage\n- issue #12783 Remove unused PMA_addJSCode function\n- issue #12069 Add table filtering to database structure\n- issue #12799 Allow to configure signon session parameters\n- issue #12854 Drop database is broken\n- issue #12863 Can't toggle Event Scheduler on\n- issue #12742 Finish removing dead code references to xls/xlsx import and export, which was removed some time ago.\n- issue #12536 Rename \"Relations\" to \"Relationships\" in many places as it's the more proper term\n- issue #12834 Fixed margins in central columns feature\n- issue #12903 Document more export configuration options\n- issue #12897 Use consistent numeric format for table overhead\n- issue #12901 Use server returned table name on renaming table\n- issue #12918 Always use \\r\\n as newline when editing fields\n- issue #12923 Fixed server side search in navigation panel\n- issue #12929 Undefined index warning with ssl_ca_paths\n- issue #12924 Do not show errors from OpenSSL cookie encryption/decryption\n- issue #12945 Fixed hint rendering on adding new user\n- issue #12941 Fixed sorting of tables in relation view\n- issue #12936 Fixed tables pagination in navigation panel\n- issue #12904 Do not collapse add form for central columns if there are none\n- issue #12955 Fixed database renaming\n- issue #12954 Fixed export of tracking data\n- issue #12960 Enclose exports in transaction by default\n- issue #12966 After adding a column ADD INDEX option won't be displayed when enabling AI\n- issue #12972 Better error message when Composer has not been run\n- issue #12988 Do not show language selector without choices\n- issue #12993 Fixed external links to php documentation\n- issue #12990 Fixed error when loading favorite tables to console\n- issue #12981 Improved rendering of new version information\n- issue #12922 Fixed bookmarks ordering\n- issue #12964 Fixed table search in navigation\n- issue #12985 Fixed rendering of foreign key browsing\n- issue #12957 Fixed manipulation with GIS data having zero coordinates\n- issue #12804 Fixed various designer javascript errors\n- issue #12934 Fixed possible javascript error on server status page\n- issue #12927 Fixed javascript error on 3NF normalization\n- issue #12996 List all databses in navigation panel database dropdown\n- issue #12980 Better defaults when creating multi field foreign key\n- issue #12976 Improved foreign key editor behavior\n- issue #12958 Always show error reporting dialog on top\n- issue #12693 Improved support for TokuDB\n- issue #11231 Try harder to honor LoginCookieValidity setting\n- issue #13016 and #13017 Slight improvements to the table layout of Relation view\n- issue #12345 Correctly show affected rows for LOAD DATA queries\n- issue #13010 Copy database: SQL error for copying PMADB metadata\n- issue #13002 Fixed OpenDocument exports\n- issue #13000 Align NULL values according to the column alignment\n- issue #13021 Show phpMyAdmin errors even with error_reporting set to 0\n- issue #13020 Removed warning about client and server versions mismatch\n- issue        Hide comments on table Structure tab when no comment is set\n- issue        Fixed submission of error reports\n- issue #13033 Use Referrer-Policy header to specify referrer policy\n- issue        Fixed javascript confirmation of dangerous queries\n- issue #13040 Compatibility with hhvm 3.18\n- issue #13031 Fixed displaying of all rows\n- issue #12967 Fixed related field selection for native relations\n- issue #13045 Properly escape MIME transformatoin names\n- issue #13028 Always show 100% in font selector\n- issue #13047 Fix query simulating for more servers\n- issue #12846 Fix new version check for sites with wrongly configured curl\n- issue #12951 When exporting to Excel, the default is now to include column names in the first row\n- issue #13059 Removed debugging code\n- issue #13029 Fixed table tracking for nested table groups\n- issue #13053 Fixed broken links in setup\n- issue #12708 Removed phpMyAdmin version from User-Agent header\n- issue #13084 Do not point users to setup when it is disabled\n- issue #12660 Delete only phpMyAdmin cookies on upgrade\n- issue #13088 Fixed editing of rows with text primary key\n- issue #13092 Do not try to sync favorite tables if configuration storage is not enabled\n- issue #13105 Fixed changing attribute for virtual field\n- issue #12757 Fixed setting password on recent MariaDB with non working plugins\n- issue #12349 Fixed undefined variable on import from some formats\n- issue #13103 Do not offer default names for copying/renaming databases\n- issue        [security] Possible to bypass $cfg['Servers'][$i]['AllowNoPassword'], see PMASA-2017-08\n\n4.6.6 (2017-01-23)\n- issue #12759 Fix Notice regarding 'Undefined index: old_usergroup'\n- issue #12760 Fix Notice regarding 'Undefined index: users'\n- issue #12762 Fixed parsing of SQL with BINARY function\n- issue #12588 ReCaptcha now works without allow_url_fopen\n- issue #12699 Show no local storage warning only on settings tab\n- issue #12778 Syntax Error in Adding/Changing TIMESTAMP columns with default value as NULL\n- issue #12769 Edit/Export links are not clickable under Routines tab\n- issue #12757 Fixed creating new user with older MariaDB\n- issue #12784 Remove ctype installation suggestion\n- issue #12780 Format button replaces all text with blank spaces\n- issue #12786 Fixed database searching\n- issue #12792 Fixed javascript error on new version link\n- issue #12785 Add information about required and suggested extensions to composer.json\n- issue #12801 Custom header shown twice with cookie login form\n- issue #12802 Custom footer not shown with auth_type http login failure\n- issue #12434 Improve documentation for servers running with Suhosin\n- issue #12800 Updated embedded phpSecLib to 2.0.4\n- issue #12800 Fixed various issues with PHP 7.1\n- issue #11816 Fixed operation with lower_case_table_names=2\n- issue #12813 Fixed stored procedure execution\n- issue #12826 Honor user configured connection collation\n- issue #12293 Correctly report OpenSSL errors from cookie encryption\n- issue #12814 DateTime won't allow to input length in Routine editor\n- issue #12840 Fix Notice regarding 'Undefined index: row_format' when altering table options\n- issue #12841 Fixed moving of columns with whitespace in name\n- issue #12847 Fixed editing of virtual columns\n- issue #12859 Changed WHERE condition to 0 instead of 1 for SQL query window to avoid accidents\n- issue #12872 Use same query for display and execution when dropping index\n- issue #12868 Fix check for user groups freatures being enabled\n- issue #12876 Fix notices and warning related to dbs_to_test global\n- issue #12831 Fix table formatting on Insert tab, which mostly affected row highlighting\n- issue #12495 Reintroduced phpinfo page with limited capabilities\n- issue #12861 Fix renaming tables with lower_case_table_names=2\n- issue #12876 Fix possible PHP error in navigation\n- issue #12881 Fix database search with newer php-gettext\n- issue #12894 Fix linter error on unterminated variable name\n- issue #12732 Fixed filtering for active processes\n- issue        [security] Multiple vulnerabilities in setup script, see PMASA-2016-44.\n- issue        [security] Open redirect, see PMASA-2017-1.\n- issue        [security] php-gettext code execution, see PMASA-2017-2.\n- issue        [security] DOS vulnerabiltiy in table editing, see PMASA-2017-3.\n- issue        [security] CSS injection in themes, see PMASA-2017-4.\n- issue        [security] Cookie attribute injection attack, see PMASA-2017-5.\n- issue        [security] SSRF in replication, see PMASA-2017-6.\n- issue        [security] DOS in replication status, see PMASA-2017-7.\n\n         --- Older ChangeLogs can be found on our project website ---\n                     https://www.phpmyadmin.net/old-stuff/ChangeLogs/\n\n# vim: et ts=4 sw=4 sts=4\n# vim: ft=changelog fenc=utf-8\n# vim: fde=getline(v\\:lnum-1)=~'^\\\\s*$'&&getline(v\\:lnum)=~'\\\\S'?'>1'\\:1&&v\\:lnum>4&&getline(v\\:lnum)!~'^#'\n# vim: fdn=1 fdm=expr\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Set of functions for the SQL executor\n *\n * @package PhpMyAdmin\n */\nnamespace PhpMyAdmin;\n\nuse PhpMyAdmin\\Bookmark;\nuse PhpMyAdmin\\Core;\nuse PhpMyAdmin\\DatabaseInterface;\nuse PhpMyAdmin\\Display\\Results as DisplayResults;\nuse PhpMyAdmin\\Index;\nuse PhpMyAdmin\\Message;\nuse PhpMyAdmin\\Operations;\nuse PhpMyAdmin\\ParseAnalyze;\nuse PhpMyAdmin\\Relation;\nuse PhpMyAdmin\\RelationCleanup;\nuse PhpMyAdmin\\Response;\nuse PhpMyAdmin\\SqlParser\\Statements\\AlterStatement;\nuse PhpMyAdmin\\SqlParser\\Statements\\DropStatement;\nuse PhpMyAdmin\\SqlParser\\Statements\\SelectStatement;\nuse PhpMyAdmin\\SqlParser\\Utils\\Query;\nuse PhpMyAdmin\\Table;\nuse PhpMyAdmin\\Transformations;\nuse PhpMyAdmin\\Url;\nuse PhpMyAdmin\\Util;\n\n/**\n * Set of functions for the SQL executor\n *\n * @package PhpMyAdmin\n */\nclass Sql\n{\n    /**\n     * @var Relation $relation\n     */\n    private $relation;\n\n    /**\n     * Constructor\n     */\n    public function __construct()\n    {\n        $this->relation = new Relation();\n    }\n\n    /**\n     * Parses and analyzes the given SQL query.\n     *\n     * @param string $sql_query SQL query\n     * @param string $db        DB name\n     *\n     * @return mixed\n     */\n    public function parseAndAnalyze($sql_query, $db = null)\n    {\n        if (is_null($db) && isset($GLOBALS['db']) && strlen($GLOBALS['db'])) {\n            $db = $GLOBALS['db'];\n        }\n        list($analyzed_sql_results,,) = ParseAnalyze::sqlQuery($sql_query, $db);\n        return $analyzed_sql_results;\n    }\n\n    /**\n     * Handle remembered sorting order, only for single table query\n     *\n     * @param string $db                    database name\n     * @param string $table                 table name\n     * @param array  &$analyzed_sql_results the analyzed query results\n     * @param string &$full_sql_query       SQL query\n     *\n     * @return void\n     */\n    private function handleSortOrder(\n        $db, $table, array &$analyzed_sql_results, &$full_sql_query\n    ) {\n        $pmatable = new Table($table, $db);\n\n        if (empty($analyzed_sql_results['order'])) {\n\n            // Retrieving the name of the column we should sort after.\n            $sortCol = $pmatable->getUiProp(Table::PROP_SORTED_COLUMN);\n            if (empty($sortCol)) {\n                return;\n            }\n\n            // Remove the name of the table from the retrieved field name.\n            $sortCol = str_replace(\n                Util::backquote($table) . '.',\n                '',\n                $sortCol\n            );\n\n            // Create the new query.\n            $full_sql_query = Query::replaceClause(\n                $analyzed_sql_results['statement'],\n                $analyzed_sql_results['parser']->list,\n                'ORDER BY ' . $sortCol\n            );\n\n            // TODO: Avoid reparsing the query.\n            $analyzed_sql_results = Query::getAll($full_sql_query);\n        } else {\n            // Store the remembered table into session.\n            $pmatable->setUiProp(\n                Table::PROP_SORTED_COLUMN,\n                Query::getClause(\n                    $analyzed_sql_results['statement'],\n                    $analyzed_sql_results['parser']->list,\n                    'ORDER BY'\n                )\n            );\n        }\n    }\n\n    /**\n     * Append limit clause to SQL query\n     *\n     * @param array &$analyzed_sql_results the analyzed query results\n     *\n     * @return string limit clause appended SQL query\n     */\n    private function getSqlWithLimitClause(array &$analyzed_sql_results)\n    {\n        return Query::replaceClause(\n            $analyzed_sql_results['statement'],\n            $analyzed_sql_results['parser']->list,\n            'LIMIT ' . $_SESSION['tmpval']['pos'] . ', '\n            . $_SESSION['tmpval']['max_rows']\n        );\n    }\n\n    /**\n     * Verify whether the result set has columns from just one table\n     *\n     * @param array $fields_meta meta fields\n     *\n     * @return boolean whether the result set has columns from just one table\n     */\n    private function resultSetHasJustOneTable(array $fields_meta)\n    {\n        $just_one_table = true;\n        $prev_table = '';\n        foreach ($fields_meta as $one_field_meta) {\n            if ($one_field_meta->table != ''\n                && $prev_table != ''\n                && $one_field_meta->table != $prev_table\n            ) {\n                $just_one_table = false;\n            }\n            if ($one_field_meta->table != '') {\n                $prev_table = $one_field_meta->table;\n            }\n        }\n        return $just_one_table && $prev_table != '';\n    }\n\n    /**\n     * Verify whether the result set contains all the columns\n     * of at least one unique key\n     *\n     * @param string $db          database name\n     * @param string $table       table name\n     * @param array  $fields_meta meta fields\n     *\n     * @return boolean whether the result set contains a unique key\n     */\n    private function resultSetContainsUniqueKey($db, $table, array $fields_meta)\n    {\n        $resultSetColumnNames = array();\n        foreach ($fields_meta as $oneMeta) {\n            $resultSetColumnNames[] = $oneMeta->name;\n        }\n        foreach (Index::getFromTable($table, $db) as $index) {\n            if ($index->isUnique()) {\n                $indexColumns = $index->getColumns();\n                $numberFound = 0;\n                foreach ($indexColumns as $indexColumnName => $dummy) {\n                    if (in_array($indexColumnName, $resultSetColumnNames)) {\n                        $numberFound++;\n                    }\n                }\n                if ($numberFound == count($indexColumns)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Get the HTML for relational column dropdown\n     * During grid edit, if we have a relational field, returns the html for the\n     * dropdown\n     *\n     * @param string $db         current database\n     * @param string $table      current table\n     * @param string $column     current column\n     * @param string $curr_value current selected value\n     *\n     * @return string $dropdown html for the dropdown\n     */\n    private function getHtmlForRelationalColumnDropdown($db, $table, $column, $curr_value)\n    {\n        $foreigners = $this->relation->getForeigners($db, $table, $column);\n\n        $foreignData = $this->relation->getForeignData($foreigners, $column, false, '', '');\n\n        if ($foreignData['disp_row'] == null) {\n            //Handle the case when number of values\n            //is more than $cfg['ForeignKeyMaxLimit']\n            $_url_params = array(\n                    'db' => $db,\n                    'table' => $table,\n                    'field' => $column\n            );\n\n            $dropdown = '<span class=\"curr_value\">'\n                . htmlspecialchars($_REQUEST['curr_value'])\n                . '</span>'\n                . '<a href=\"browse_foreigners.php'\n                . Url::getCommon($_url_params) . '\"'\n                . 'class=\"ajax browse_foreign\" ' . '>'\n                . __('Browse foreign values')\n                . '</a>';\n        } else {\n            $dropdown = $this->relation->foreignDropdown(\n                $foreignData['disp_row'],\n                $foreignData['foreign_field'],\n                $foreignData['foreign_display'],\n                $curr_value,\n                $GLOBALS['cfg']['ForeignKeyMaxLimit']\n            );\n            $dropdown = '<select>' . $dropdown . '</select>';\n        }\n\n        return $dropdown;\n    }\n\n    /**\n     * Get the HTML for the profiling table and accompanying chart if profiling is set.\n     * Otherwise returns null\n     *\n     * @param string $url_query         url query\n     * @param string $db                current database\n     * @param array  $profiling_results array containing the profiling info\n     *\n     * @return string $profiling_table html for the profiling table and chart\n     */\n    private function getHtmlForProfilingChart($url_query, $db, $profiling_results)\n    {\n        if (! empty($profiling_results)) {\n            $url_query = isset($url_query)\n                ? $url_query\n                : Url::getCommon(array('db' => $db));\n\n            $profiling_table = '';\n            $profiling_table .= '<fieldset><legend>' . __('Profiling')\n                . '</legend>' . \"\\n\";\n            $profiling_table .= '<div class=\"floatleft\">';\n            $profiling_table .= '<h3>' . __('Detailed profile') . '</h3>';\n            $profiling_table .= '<table id=\"profiletable\"><thead>' . \"\\n\";\n            $profiling_table .= ' <tr>' . \"\\n\";\n            $profiling_table .= '  <th>' . __('Order')\n                . '<div class=\"sorticon\"></div></th>' . \"\\n\";\n            $profiling_table .= '  <th>' . __('State')\n                . Util::showMySQLDocu('general-thread-states')\n                . '<div class=\"sorticon\"></div></th>' . \"\\n\";\n            $profiling_table .= '  <th>' . __('Time')\n                . '<div class=\"sorticon\"></div></th>' . \"\\n\";\n            $profiling_table .= ' </tr></thead><tbody>' . \"\\n\";\n            list($detailed_table, $chart_json, $profiling_stats)\n                = $this->analyzeAndGetTableHtmlForProfilingResults($profiling_results);\n            $profiling_table .= $detailed_table;\n            $profiling_table .= '</tbody></table>' . \"\\n\";\n            $profiling_table .= '</div>';\n\n            $profiling_table .= '<div class=\"floatleft\">';\n            $profiling_table .= '<h3>' . __('Summary by state') . '</h3>';\n            $profiling_table .= '<table id=\"profilesummarytable\"><thead>' . \"\\n\";\n            $profiling_table .= ' <tr>' . \"\\n\";\n            $profiling_table .= '  <th>' . __('State')\n                . Util::showMySQLDocu('general-thread-states')\n                . '<div class=\"sorticon\"></div></th>' . \"\\n\";\n            $profiling_table .= '  <th>' . __('Total Time')\n                . '<div class=\"sorticon\"></div></th>' . \"\\n\";\n            $profiling_table .= '  <th>' . __('% Time')\n                . '<div class=\"sorticon\"></div></th>' . \"\\n\";\n            $profiling_table .= '  <th>' . __('Calls')\n                . '<div class=\"sorticon\"></div></th>' . \"\\n\";\n            $profiling_table .= '  <th>' . __('\u00f8 Time')\n                . '<div class=\"sorticon\"></div></th>' . \"\\n\";\n            $profiling_table .= ' </tr></thead><tbody>' . \"\\n\";\n            $profiling_table .= $this->getTableHtmlForProfilingSummaryByState(\n                $profiling_stats\n            );\n            $profiling_table .= '</tbody></table>' . \"\\n\";\n\n            $profiling_table .= <<<EOT\n<script type=\"text/javascript\">\n    url_query = '$url_query';\n</script>\nEOT;\n            $profiling_table .= \"</div>\";\n            $profiling_table .= \"<div class='clearfloat'></div>\";\n\n            //require_once 'libraries/chart.lib.php';\n            $profiling_table .= '<div id=\"profilingChartData\" class=\"hide\">';\n            $profiling_table .= json_encode($chart_json);\n            $profiling_table .= '</div>';\n            $profiling_table .= '<div id=\"profilingchart\" class=\"hide\">';\n            $profiling_table .= '</div>';\n            $profiling_table .= '<script type=\"text/javascript\">';\n            $profiling_table .= \"AJAX.registerOnload('sql.js', function () {\";\n            $profiling_table .= 'makeProfilingChart();';\n            $profiling_table .= 'initProfilingTables();';\n            $profiling_table .= '});';\n            $profiling_table .= '</script>';\n            $profiling_table .= '</fieldset>' . \"\\n\";\n        } else {\n            $profiling_table = null;\n        }\n        return $profiling_table;\n    }\n\n    /**\n     * Function to get HTML for detailed profiling results table, profiling stats, and\n     * $chart_json for displaying the chart.\n     *\n     * @param array $profiling_results profiling results\n     *\n     * @return mixed\n     */\n    private function analyzeAndGetTableHtmlForProfilingResults(\n        $profiling_results\n    ) {\n        $profiling_stats = array(\n            'total_time' => 0,\n            'states' => array(),\n        );\n        $chart_json = Array();\n        $i = 1;\n        $table = '';\n        foreach ($profiling_results as $one_result) {\n            if (isset($profiling_stats['states'][ucwords($one_result['Status'])])) {\n                $states = $profiling_stats['states'];\n                $states[ucwords($one_result['Status'])]['total_time']\n                    += $one_result['Duration'];\n                $states[ucwords($one_result['Status'])]['calls']++;\n            } else {\n                $profiling_stats['states'][ucwords($one_result['Status'])] = array(\n                    'total_time' => $one_result['Duration'],\n                    'calls' => 1,\n                );\n            }\n            $profiling_stats['total_time'] += $one_result['Duration'];\n\n            $table .= ' <tr>' . \"\\n\";\n            $table .= '<td>' . $i++ . '</td>' . \"\\n\";\n            $table .= '<td>' . ucwords($one_result['Status'])\n                . '</td>' . \"\\n\";\n            $table .= '<td class=\"right\">'\n                . (Util::formatNumber($one_result['Duration'], 3, 1))\n                . 's<span class=\"rawvalue hide\">'\n                . $one_result['Duration'] . '</span></td>' . \"\\n\";\n            if (isset($chart_json[ucwords($one_result['Status'])])) {\n                $chart_json[ucwords($one_result['Status'])]\n                    += $one_result['Duration'];\n            } else {\n                $chart_json[ucwords($one_result['Status'])]\n                    = $one_result['Duration'];\n            }\n        }\n        return array($table, $chart_json, $profiling_stats);\n    }\n\n    /**\n     * Function to get HTML for summary by state table\n     *\n     * @param array $profiling_stats profiling stats\n     *\n     * @return string $table html for the table\n     */\n    private function getTableHtmlForProfilingSummaryByState(array $profiling_stats)\n    {\n        $table = '';\n        foreach ($profiling_stats['states'] as $name => $stats) {\n            $table .= ' <tr>' . \"\\n\";\n            $table .= '<td>' . $name . '</td>' . \"\\n\";\n            $table .= '<td align=\"right\">'\n                . Util::formatNumber($stats['total_time'], 3, 1)\n                . 's<span class=\"rawvalue hide\">'\n                . $stats['total_time'] . '</span></td>' . \"\\n\";\n            $table .= '<td align=\"right\">'\n                . Util::formatNumber(\n                    100 * ($stats['total_time'] / $profiling_stats['total_time']),\n                    0, 2\n                )\n            . '%</td>' . \"\\n\";\n            $table .= '<td align=\"right\">' . $stats['calls'] . '</td>'\n                . \"\\n\";\n            $table .= '<td align=\"right\">'\n                . Util::formatNumber(\n                    $stats['total_time'] / $stats['calls'], 3, 1\n                )\n                . 's<span class=\"rawvalue hide\">'\n                . number_format($stats['total_time'] / $stats['calls'], 8, '.', '')\n                . '</span></td>' . \"\\n\";\n            $table .= ' </tr>' . \"\\n\";\n        }\n        return $table;\n    }\n\n    /**\n     * Get the HTML for the enum column dropdown\n     * During grid edit, if we have a enum field, returns the html for the\n     * dropdown\n     *\n     * @param string $db         current database\n     * @param string $table      current table\n     * @param string $column     current column\n     * @param string $curr_value currently selected value\n     *\n     * @return string $dropdown html for the dropdown\n     */\n    private function getHtmlForEnumColumnDropdown($db, $table, $column, $curr_value)\n    {\n        $values = $this->getValuesForColumn($db, $table, $column);\n        $dropdown = '<option value=\"\">&nbsp;</option>';\n        $dropdown .= $this->getHtmlForOptionsList($values, array($curr_value));\n        $dropdown = '<select>' . $dropdown . '</select>';\n        return $dropdown;\n    }\n\n    /**\n     * Get value of a column for a specific row (marked by $where_clause)\n     *\n     * @param string $db           current database\n     * @param string $table        current table\n     * @param string $column       current column\n     * @param string $where_clause where clause to select a particular row\n     *\n     * @return string with value\n     */\n    private function getFullValuesForSetColumn($db, $table, $column, $where_clause)\n    {\n        $result = $GLOBALS['dbi']->fetchSingleRow(\n            \"SELECT `$column` FROM `$db`.`$table` WHERE $where_clause\"\n        );\n\n        return $result[$column];\n    }\n\n    /**\n     * Get the HTML for the set column dropdown\n     * During grid edit, if we have a set field, returns the html for the\n     * dropdown\n     *\n     * @param string $db         current database\n     * @param string $table      current table\n     * @param string $column     current column\n     * @param string $curr_value currently selected value\n     *\n     * @return string $dropdown html for the set column\n     */\n    private function getHtmlForSetColumn($db, $table, $column, $curr_value)\n    {\n        $values = $this->getValuesForColumn($db, $table, $column);\n        $dropdown = '';\n        $full_values =\n            isset($_REQUEST['get_full_values']) ? $_REQUEST['get_full_values'] : false;\n        $where_clause =\n            isset($_REQUEST['where_clause']) ? $_REQUEST['where_clause'] : null;\n\n        // If the $curr_value was truncated, we should\n        // fetch the correct full values from the table\n        if ($full_values && ! empty($where_clause)) {\n            $curr_value = $this->getFullValuesForSetColumn(\n                $db, $table, $column, $where_clause\n            );\n        }\n\n        //converts characters of $curr_value to HTML entities\n        $converted_curr_value = htmlentities(\n            $curr_value, ENT_COMPAT, \"UTF-8\"\n        );\n\n        $selected_values = explode(',', $converted_curr_value);\n\n        $dropdown .= $this->getHtmlForOptionsList($values, $selected_values);\n\n        $select_size = (sizeof($values) > 10) ? 10 : sizeof($values);\n        $dropdown = '<select multiple=\"multiple\" size=\"' . $select_size . '\">'\n            . $dropdown . '</select>';\n\n        return $dropdown;\n    }\n\n    /**\n     * Get all the values for a enum column or set column in a table\n     *\n     * @param string $db     current database\n     * @param string $table  current table\n     * @param string $column current column\n     *\n     * @return array $values array containing the value list for the column\n     */\n    private function getValuesForColumn($db, $table, $column)\n    {\n        $field_info_query = $GLOBALS['dbi']->getColumnsSql($db, $table, $column);\n\n        $field_info_result = $GLOBALS['dbi']->fetchResult(\n            $field_info_query,\n            null,\n            null,\n            DatabaseInterface::CONNECT_USER,\n            DatabaseInterface::QUERY_STORE\n        );\n\n        $values = Util::parseEnumSetValues($field_info_result[0]['Type']);\n\n        return $values;\n    }\n\n    /**\n     * Get HTML for options list\n     *\n     * @param array $values          set of values\n     * @param array $selected_values currently selected values\n     *\n     * @return string $options HTML for options list\n     */\n    private function getHtmlForOptionsList(array $values, array $selected_values)\n    {\n        $options = '';\n        foreach ($values as $value) {\n            $options .= '<option value=\"' . $value . '\"';\n            if (in_array($value, $selected_values, true)) {\n                $options .= ' selected=\"selected\" ';\n            }\n            $options .= '>' . $value . '</option>';\n        }\n        return $options;\n    }\n\n    /**\n     * Function to get html for bookmark support if bookmarks are enabled. Else will\n     * return null\n     *\n     * @param array  $displayParts   the parts to display\n     * @param array  $cfgBookmark    configuration setting for bookmarking\n     * @param string $sql_query      sql query\n     * @param string $db             current database\n     * @param string $table          current table\n     * @param string $complete_query complete query\n     * @param string $bkm_user       bookmarking user\n     *\n     * @return string $html\n     */\n    public function getHtmlForBookmark(array $displayParts, array $cfgBookmark, $sql_query, $db,\n        $table, $complete_query, $bkm_user\n    ) {\n        if ($displayParts['bkm_form'] == '1'\n            && (! empty($cfgBookmark) && empty($_GET['id_bookmark']))\n            && ! empty($sql_query)\n        ) {\n            $goto = 'sql.php'\n                . Url::getCommon(\n                    array(\n                        'db' => $db,\n                        'table' => $table,\n                        'sql_query' => $sql_query,\n                        'id_bookmark'=> 1,\n                    )\n                );\n            $bkm_sql_query = isset($complete_query) ? $complete_query : $sql_query;\n            $html = '<form action=\"sql.php\" method=\"post\"'\n                . ' onsubmit=\"return ! emptyCheckTheField(this,'\n                . '\\'bkm_fields[bkm_label]\\');\"'\n                . ' class=\"bookmarkQueryForm print_ignore\">';\n            $html .= Url::getHiddenInputs();\n            $html .= '<input type=\"hidden\" name=\"db\"'\n                . ' value=\"' . htmlspecialchars($db) . '\" />';\n            $html .= '<input type=\"hidden\" name=\"goto\" value=\"' . $goto . '\" />';\n            $html .= '<input type=\"hidden\" name=\"bkm_fields[bkm_database]\"'\n                . ' value=\"' . htmlspecialchars($db) . '\" />';\n            $html .= '<input type=\"hidden\" name=\"bkm_fields[bkm_user]\"'\n                . ' value=\"' . $bkm_user . '\" />';\n            $html .= '<input type=\"hidden\" name=\"bkm_fields[bkm_sql_query]\"'\n                . ' value=\"'\n                . htmlspecialchars($bkm_sql_query)\n                . '\" />';\n            $html .= '<fieldset>';\n            $html .= '<legend>';\n            $html .= Util::getIcon(\n                'b_bookmark', __('Bookmark this SQL query'), true\n            );\n            $html .= '</legend>';\n            $html .= '<div class=\"formelement\">';\n            $html .= '<label>' . __('Label:');\n            $html .= '<input type=\"text\" name=\"bkm_fields[bkm_label]\" value=\"\" />' .\n                '</label>';\n            $html .= '</div>';\n            $html .= '<div class=\"formelement\">';\n            $html .= '<label>' .\n                '<input type=\"checkbox\" name=\"bkm_all_users\" value=\"true\" />';\n            $html .=  __('Let every user access this bookmark') . '</label>';\n            $html .= '</div>';\n            $html .= '<div class=\"clearfloat\"></div>';\n            $html .= '</fieldset>';\n            $html .= '<fieldset class=\"tblFooters\">';\n            $html .= '<input type=\"hidden\" name=\"store_bkm\" value=\"1\" />';\n            $html .= '<input type=\"submit\"'\n                . ' value=\"' . __('Bookmark this SQL query') . '\" />';\n            $html .= '</fieldset>';\n            $html .= '</form>';\n\n        } else {\n            $html = null;\n        }\n\n        return $html;\n    }\n\n    /**\n     * Function to check whether to remember the sorting order or not\n     *\n     * @param array $analyzed_sql_results the analyzed query and other variables set\n     *                                    after analyzing the query\n     *\n     * @return boolean\n     */\n    private function isRememberSortingOrder(array $analyzed_sql_results)\n    {\n        return $GLOBALS['cfg']['RememberSorting']\n            && ! ($analyzed_sql_results['is_count']\n                || $analyzed_sql_results['is_export']\n                || $analyzed_sql_results['is_func']\n                || $analyzed_sql_results['is_analyse'])\n            && $analyzed_sql_results['select_from']\n            && isset($analyzed_sql_results['select_expr'])\n            && isset($analyzed_sql_results['select_tables'])\n            && ((empty($analyzed_sql_results['select_expr']))\n                || ((count($analyzed_sql_results['select_expr']) == 1)\n                    && ($analyzed_sql_results['select_expr'][0] == '*')))\n            && count($analyzed_sql_results['select_tables']) == 1;\n    }\n\n    /**\n     * Function to check whether the LIMIT clause should be appended or not\n     *\n     * @param array $analyzed_sql_results the analyzed query and other variables set\n     *                                    after analyzing the query\n     *\n     * @return boolean\n     */\n    private function isAppendLimitClause(array $analyzed_sql_results)\n    {\n        // Assigning LIMIT clause to an syntactically-wrong query\n        // is not needed. Also we would want to show the true query\n        // and the true error message to the query executor\n\n        return (isset($analyzed_sql_results['parser'])\n            && count($analyzed_sql_results['parser']->errors) === 0)\n            && ($_SESSION['tmpval']['max_rows'] != 'all')\n            && ! ($analyzed_sql_results['is_export']\n            || $analyzed_sql_results['is_analyse'])\n            && ($analyzed_sql_results['select_from']\n                || $analyzed_sql_results['is_subquery'])\n            && empty($analyzed_sql_results['limit']);\n    }\n\n    /**\n     * Function to check whether this query is for just browsing\n     *\n     * @param array   $analyzed_sql_results the analyzed query and other variables set\n     *                                      after analyzing the query\n     * @param boolean $find_real_end        whether the real end should be found\n     *\n     * @return boolean\n     */\n    public function isJustBrowsing(array $analyzed_sql_results, $find_real_end)\n    {\n        return ! $analyzed_sql_results['is_group']\n            && ! $analyzed_sql_results['is_func']\n            && empty($analyzed_sql_results['union'])\n            && empty($analyzed_sql_results['distinct'])\n            && $analyzed_sql_results['select_from']\n            && (count($analyzed_sql_results['select_tables']) === 1)\n            && (empty($analyzed_sql_results['statement']->where)\n                || (count($analyzed_sql_results['statement']->where) == 1\n                    && $analyzed_sql_results['statement']->where[0]->expr ==='1'))\n            && empty($analyzed_sql_results['group'])\n            && ! isset($find_real_end)\n            && ! $analyzed_sql_results['is_subquery']\n            && ! $analyzed_sql_results['join']\n            && empty($analyzed_sql_results['having']);\n    }\n\n    /**\n     * Function to check whether the related transformation information should be deleted\n     *\n     * @param array $analyzed_sql_results the analyzed query and other variables set\n     *                                    after analyzing the query\n     *\n     * @return boolean\n     */\n    private function isDeleteTransformationInfo(array $analyzed_sql_results)\n    {\n        return !empty($analyzed_sql_results['querytype'])\n            && (($analyzed_sql_results['querytype'] == 'ALTER')\n                || ($analyzed_sql_results['querytype'] == 'DROP'));\n    }\n\n    /**\n     * Function to check whether the user has rights to drop the database\n     *\n     * @param array   $analyzed_sql_results  the analyzed query and other variables set\n     *                                       after analyzing the query\n     * @param boolean $allowUserDropDatabase whether the user is allowed to drop db\n     * @param boolean $is_superuser          whether this user is a superuser\n     *\n     * @return boolean\n     */\n    public function hasNoRightsToDropDatabase(array $analyzed_sql_results,\n        $allowUserDropDatabase, $is_superuser\n    ) {\n        return ! $allowUserDropDatabase\n            && isset($analyzed_sql_results['drop_database'])\n            && $analyzed_sql_results['drop_database']\n            && ! $is_superuser;\n    }\n\n    /**\n     * Function to set a column property\n     *\n     * @param Table  $pmatable      Table instance\n     * @param string $request_index col_order|col_visib\n     *\n     * @return boolean $retval\n     */\n    private function setColumnProperty($pmatable, $request_index)\n    {\n        $property_value = array_map('intval', explode(',', $_REQUEST[$request_index]));\n        switch($request_index) {\n        case 'col_order':\n            $property_to_set = Table::PROP_COLUMN_ORDER;\n            break;\n        case 'col_visib':\n            $property_to_set = Table::PROP_COLUMN_VISIB;\n            break;\n        default:\n            $property_to_set = '';\n        }\n        $retval = $pmatable->setUiProp(\n            $property_to_set,\n            $property_value,\n            $_REQUEST['table_create_time']\n        );\n        if (gettype($retval) != 'boolean') {\n            $response = Response::getInstance();\n            $response->setRequestStatus(false);\n            $response->addJSON('message', $retval->getString());\n            exit;\n        }\n\n        return $retval;\n    }\n\n    /**\n     * Function to check the request for setting the column order or visibility\n     *\n     * @param string $table the current table\n     * @param string $db    the current database\n     *\n     * @return void\n     */\n    public function setColumnOrderOrVisibility($table, $db)\n    {\n        $pmatable = new Table($table, $db);\n        $retval = false;\n\n        // set column order\n        if (isset($_REQUEST['col_order'])) {\n            $retval = $this->setColumnProperty($pmatable, 'col_order');\n        }\n\n        // set column visibility\n        if ($retval === true && isset($_REQUEST['col_visib'])) {\n            $retval = $this->setColumnProperty($pmatable, 'col_visib');\n        }\n\n        $response = Response::getInstance();\n        $response->setRequestStatus($retval == true);\n        exit;\n    }\n\n    /**\n     * Function to add a bookmark\n     *\n     * @param string $goto goto page URL\n     *\n     * @return void\n     */\n    public function addBookmark($goto)\n    {\n        $bookmark = Bookmark::createBookmark(\n            $GLOBALS['dbi'],\n            $GLOBALS['cfg']['Server']['user'],\n            $_POST['bkm_fields'],\n            (isset($_POST['bkm_all_users'])\n                && $_POST['bkm_all_users'] == 'true' ? true : false\n            )\n        );\n        $result = $bookmark->save();\n        $response = Response::getInstance();\n        if ($response->isAjax()) {\n            if ($result) {\n                $msg = Message::success(__('Bookmark %s has been created.'));\n                $msg->addParam($_POST['bkm_fields']['bkm_label']);\n                $response->addJSON('message', $msg);\n            } else {\n                $msg = Message::error(__('Bookmark not created!'));\n                $response->setRequestStatus(false);\n                $response->addJSON('message', $msg);\n            }\n            exit;\n        } else {\n            // go back to sql.php to redisplay query; do not use &amp; in this case:\n            /**\n             * @todo In which scenario does this happen?\n             */\n            Core::sendHeaderLocation(\n                './' . $goto\n                . '&label=' . $_POST['bkm_fields']['bkm_label']\n            );\n        }\n    }\n\n    /**\n     * Function to find the real end of rows\n     *\n     * @param string $db    the current database\n     * @param string $table the current table\n     *\n     * @return mixed the number of rows if \"retain\" param is true, otherwise true\n     */\n    public function findRealEndOfRows($db, $table)\n    {\n        $unlim_num_rows = $GLOBALS['dbi']->getTable($db, $table)->countRecords(true);\n        $_SESSION['tmpval']['pos'] = $this->getStartPosToDisplayRow($unlim_num_rows);\n\n        return $unlim_num_rows;\n    }\n\n    /**\n     * Function to get values for the relational columns\n     *\n     * @param string $db    the current database\n     * @param string $table the current table\n     *\n     * @return void\n     */\n    public function getRelationalValues($db, $table)\n    {\n        $column = $_REQUEST['column'];\n        if ($_SESSION['tmpval']['relational_display'] == 'D'\n            && isset($_REQUEST['relation_key_or_display_column'])\n            && $_REQUEST['relation_key_or_display_column']\n        ) {\n            $curr_value = $_REQUEST['relation_key_or_display_column'];\n        } else {\n            $curr_value = $_REQUEST['curr_value'];\n        }\n        $dropdown = $this->getHtmlForRelationalColumnDropdown(\n            $db, $table, $column, $curr_value\n        );\n        $response = Response::getInstance();\n        $response->addJSON('dropdown', $dropdown);\n        exit;\n    }\n\n    /**\n     * Function to get values for Enum or Set Columns\n     *\n     * @param string $db         the current database\n     * @param string $table      the current table\n     * @param string $columnType whether enum or set\n     *\n     * @return void\n     */\n    public function getEnumOrSetValues($db, $table, $columnType)\n    {\n        $column = $_REQUEST['column'];\n        $curr_value = $_REQUEST['curr_value'];\n        $response = Response::getInstance();\n        if ($columnType == \"enum\") {\n            $dropdown = $this->getHtmlForEnumColumnDropdown(\n                $db, $table, $column, $curr_value\n            );\n            $response->addJSON('dropdown', $dropdown);\n        } else {\n            $select = $this->getHtmlForSetColumn(\n                $db, $table, $column, $curr_value\n            );\n            $response->addJSON('select', $select);\n        }\n        exit;\n    }\n\n    /**\n     * Function to get the default sql query for browsing page\n     *\n     * @param string $db    the current database\n     * @param string $table the current table\n     *\n     * @return string $sql_query the default $sql_query for browse page\n     */\n    public function getDefaultSqlQueryForBrowse($db, $table)\n    {\n        $bookmark = Bookmark::get(\n            $GLOBALS['dbi'],\n            $GLOBALS['cfg']['Server']['user'],\n            $db,\n            $table,\n            'label',\n            false,\n            true\n        );\n\n        if (! empty($bookmark) && ! empty($bookmark->getQuery())) {\n            $GLOBALS['using_bookmark_message'] = Message::notice(\n                __('Using bookmark \"%s\" as default browse query.')\n            );\n            $GLOBALS['using_bookmark_message']->addParam($table);\n            $GLOBALS['using_bookmark_message']->addHtml(\n                Util::showDocu('faq', 'faq6-22')\n            );\n            $sql_query = $bookmark->getQuery();\n        } else {\n\n            $defaultOrderByClause = '';\n\n            if (isset($GLOBALS['cfg']['TablePrimaryKeyOrder'])\n                && ($GLOBALS['cfg']['TablePrimaryKeyOrder'] !== 'NONE')\n            ) {\n\n                $primaryKey     = null;\n                $primary        = Index::getPrimary($table, $db);\n\n                if ($primary !== false) {\n\n                    $primarycols    = $primary->getColumns();\n\n                    foreach ($primarycols as $col) {\n                        $primaryKey = $col->getName();\n                        break;\n                    }\n\n                    if ($primaryKey != null) {\n                        $defaultOrderByClause = ' ORDER BY '\n                            . Util::backquote($table) . '.'\n                            . Util::backquote($primaryKey) . ' '\n                            . $GLOBALS['cfg']['TablePrimaryKeyOrder'];\n                    }\n\n                }\n\n            }\n\n            $sql_query = 'SELECT * FROM ' . Util::backquote($table)\n                . $defaultOrderByClause;\n\n        }\n\n        return $sql_query;\n    }\n\n    /**\n     * Responds an error when an error happens when executing the query\n     *\n     * @param boolean $is_gotofile    whether goto file or not\n     * @param string  $error          error after executing the query\n     * @param string  $full_sql_query full sql query\n     *\n     * @return void\n     */\n    private function handleQueryExecuteError($is_gotofile, $error, $full_sql_query)\n    {\n        if ($is_gotofile) {\n            $message = Message::rawError($error);\n            $response = Response::getInstance();\n            $response->setRequestStatus(false);\n            $response->addJSON('message', $message);\n        } else {\n            Util::mysqlDie($error, $full_sql_query, '', '');\n        }\n        exit;\n    }\n\n    /**\n     * Function to store the query as a bookmark\n     *\n     * @param string  $db                     the current database\n     * @param string  $bkm_user               the bookmarking user\n     * @param string  $sql_query_for_bookmark the query to be stored in bookmark\n     * @param string  $bkm_label              bookmark label\n     * @param boolean $bkm_replace            whether to replace existing bookmarks\n     *\n     * @return void\n     */\n    public function storeTheQueryAsBookmark($db, $bkm_user, $sql_query_for_bookmark,\n        $bkm_label, $bkm_replace\n    ) {\n        $bfields = array(\n            'bkm_database' => $db,\n            'bkm_user'  => $bkm_user,\n            'bkm_sql_query' => $sql_query_for_bookmark,\n            'bkm_label' => $bkm_label,\n        );\n\n        // Should we replace bookmark?\n        if (isset($bkm_replace)) {\n            $bookmarks = Bookmark::getList(\n                $GLOBALS['dbi'],\n                $GLOBALS['cfg']['Server']['user'],\n                $db\n            );\n            foreach ($bookmarks as $bookmark) {\n                if ($bookmark->getLabel() == $bkm_label) {\n                    $bookmark->delete();\n                }\n            }\n        }\n\n        $bookmark = Bookmark::createBookmark(\n            $GLOBALS['dbi'],\n            $GLOBALS['cfg']['Server']['user'],\n            $bfields,\n            isset($_POST['bkm_all_users'])\n        );\n        $bookmark->save();\n    }\n\n    /**\n     * Executes the SQL query and measures its execution time\n     *\n     * @param string $full_sql_query the full sql query\n     *\n     * @return array ($result, $querytime)\n     */\n    private function executeQueryAndMeasureTime($full_sql_query)\n    {\n        // close session in case the query takes too long\n        session_write_close();\n\n        // Measure query time.\n        $querytime_before = array_sum(explode(' ', microtime()));\n\n        $result = @$GLOBALS['dbi']->tryQuery(\n            $full_sql_query, DatabaseInterface::CONNECT_USER, DatabaseInterface::QUERY_STORE\n        );\n        $querytime_after = array_sum(explode(' ', microtime()));\n\n        // reopen session\n        session_start();\n\n        return array($result, $querytime_after - $querytime_before);\n    }\n\n    /**\n     * Function to get the affected or changed number of rows after executing a query\n     *\n     * @param boolean $is_affected whether the query affected a table\n     * @param mixed   $result      results of executing the query\n     *\n     * @return int    $num_rows    number of rows affected or changed\n     */\n    private function getNumberOfRowsAffectedOrChanged($is_affected, $result)\n    {\n        if (! $is_affected) {\n            $num_rows = ($result) ? @$GLOBALS['dbi']->numRows($result) : 0;\n        } else {\n            $num_rows = @$GLOBALS['dbi']->affectedRows();\n        }\n\n        return $num_rows;\n    }\n\n    /**\n     * Checks if the current database has changed\n     * This could happen if the user sends a query like \"USE `database`;\"\n     *\n     * @param string $db the database in the query\n     *\n     * @return int $reload whether to reload the navigation(1) or not(0)\n     */\n    private function hasCurrentDbChanged($db)\n    {\n        if (strlen($db) > 0) {\n            $current_db = $GLOBALS['dbi']->fetchValue('SELECT DATABASE()');\n            // $current_db is false, except when a USE statement was sent\n            return ($current_db != false) && ($db !== $current_db);\n        }\n\n        return false;\n    }\n\n    /**\n     * If a table, database or column gets dropped, clean comments.\n     *\n     * @param string $db     current database\n     * @param string $table  current table\n     * @param string $column current column\n     * @param bool   $purge  whether purge set or not\n     *\n     * @return array $extra_data\n     */\n    private function cleanupRelations($db, $table, $column, $purge)\n    {\n        if (! empty($purge) && strlen($db) > 0) {\n            if (strlen($table) > 0) {\n                if (isset($column) && strlen($column) > 0) {\n                    RelationCleanup::column($db, $table, $column);\n                } else {\n                    RelationCleanup::table($db, $table);\n                }\n            } else {\n                RelationCleanup::database($db);\n            }\n        }\n    }\n\n    /**\n     * Function to count the total number of rows for the same 'SELECT' query without\n     * the 'LIMIT' clause that may have been programatically added\n     *\n     * @param int    $num_rows             number of rows affected/changed by the query\n     * @param bool   $justBrowsing         whether just browsing or not\n     * @param string $db                   the current database\n     * @param string $table                the current table\n     * @param array  $analyzed_sql_results the analyzed query and other variables set\n     *                                     after analyzing the query\n     *\n     * @return int $unlim_num_rows unlimited number of rows\n     */\n    private function countQueryResults(\n        $num_rows, $justBrowsing, $db, $table, array $analyzed_sql_results\n    ) {\n\n        /* Shortcut for not analyzed/empty query */\n        if (empty($analyzed_sql_results)) {\n            return 0;\n        }\n\n        if (!$this->isAppendLimitClause($analyzed_sql_results)) {\n            // if we did not append a limit, set this to get a correct\n            // \"Showing rows...\" message\n            // $_SESSION['tmpval']['max_rows'] = 'all';\n            $unlim_num_rows = $num_rows;\n        } elseif ($analyzed_sql_results['querytype'] == 'SELECT'\n            || $analyzed_sql_results['is_subquery']\n        ) {\n            //    c o u n t    q u e r y\n\n            // If we are \"just browsing\", there is only one table (and no join),\n            // and no WHERE clause (or just 'WHERE 1 '),\n            // we do a quick count (which uses MaxExactCount) because\n            // SQL_CALC_FOUND_ROWS is not quick on large InnoDB tables\n\n            // However, do not count again if we did it previously\n            // due to $find_real_end == true\n            if ($justBrowsing) {\n                // Get row count (is approximate for InnoDB)\n                $unlim_num_rows = $GLOBALS['dbi']->getTable($db, $table)->countRecords();\n                /**\n                 * @todo Can we know at this point that this is InnoDB,\n                 *       (in this case there would be no need for getting\n                 *       an exact count)?\n                 */\n                if ($unlim_num_rows < $GLOBALS['cfg']['MaxExactCount']) {\n                    // Get the exact count if approximate count\n                    // is less than MaxExactCount\n                    /**\n                     * @todo In countRecords(), MaxExactCount is also verified,\n                     *       so can we avoid checking it twice?\n                     */\n                    $unlim_num_rows = $GLOBALS['dbi']->getTable($db, $table)\n                        ->countRecords(true);\n                }\n\n            } else {\n\n                // The SQL_CALC_FOUND_ROWS option of the SELECT statement is used.\n\n                // For UNION statements, only a SQL_CALC_FOUND_ROWS is required\n                // after the first SELECT.\n\n                $count_query = Query::replaceClause(\n                    $analyzed_sql_results['statement'],\n                    $analyzed_sql_results['parser']->list,\n                    'SELECT SQL_CALC_FOUND_ROWS',\n                    null,\n                    true\n                );\n\n                // Another LIMIT clause is added to avoid long delays.\n                // A complete result will be returned anyway, but the LIMIT would\n                // stop the query as soon as the result that is required has been\n                // computed.\n\n                if (empty($analyzed_sql_results['union'])) {\n                    $count_query .= ' LIMIT 1';\n                }\n\n                // Running the count query.\n                $GLOBALS['dbi']->tryQuery($count_query);\n\n                $unlim_num_rows = $GLOBALS['dbi']->fetchValue('SELECT FOUND_ROWS()');\n            } // end else \"just browsing\"\n        } else {// not $is_select\n            $unlim_num_rows = 0;\n        }\n\n        return $unlim_num_rows;\n    }\n\n    /**\n     * Function to handle all aspects relating to executing the query\n     *\n     * @param array   $analyzed_sql_results   analyzed sql results\n     * @param string  $full_sql_query         full sql query\n     * @param boolean $is_gotofile            whether to go to a file\n     * @param string  $db                     current database\n     * @param string  $table                  current table\n     * @param boolean $find_real_end          whether to find the real end\n     * @param string  $sql_query_for_bookmark sql query to be stored as bookmark\n     * @param array   $extra_data             extra data\n     *\n     * @return mixed\n     */\n    private function executeTheQuery(array $analyzed_sql_results, $full_sql_query, $is_gotofile,\n        $db, $table, $find_real_end, $sql_query_for_bookmark, $extra_data\n    ) {\n        $response = Response::getInstance();\n        $response->getHeader()->getMenu()->setTable($table);\n\n        // Only if we ask to see the php code\n        if (isset($GLOBALS['show_as_php'])) {\n            $result = null;\n            $num_rows = 0;\n            $unlim_num_rows = 0;\n        } else { // If we don't ask to see the php code\n            if (isset($_SESSION['profiling'])\n                && Util::profilingSupported()\n            ) {\n                $GLOBALS['dbi']->query('SET PROFILING=1;');\n            }\n\n            list(\n                $result,\n                $GLOBALS['querytime']\n            ) = $this->executeQueryAndMeasureTime($full_sql_query);\n\n            // Displays an error message if required and stop parsing the script\n            $error = $GLOBALS['dbi']->getError();\n            if ($error && $GLOBALS['cfg']['IgnoreMultiSubmitErrors']) {\n                $extra_data['error'] = $error;\n            } elseif ($error) {\n                $this->handleQueryExecuteError($is_gotofile, $error, $full_sql_query);\n            }\n\n            // If there are no errors and bookmarklabel was given,\n            // store the query as a bookmark\n            if (! empty($_POST['bkm_label']) && ! empty($sql_query_for_bookmark)) {\n                $cfgBookmark = Bookmark::getParams($GLOBALS['cfg']['Server']['user']);\n                $this->storeTheQueryAsBookmark(\n                    $db, $cfgBookmark['user'],\n                    $sql_query_for_bookmark, $_POST['bkm_label'],\n                    isset($_POST['bkm_replace']) ? $_POST['bkm_replace'] : null\n                );\n            } // end store bookmarks\n\n            // Gets the number of rows affected/returned\n            // (This must be done immediately after the query because\n            // mysql_affected_rows() reports about the last query done)\n            $num_rows = $this->getNumberOfRowsAffectedOrChanged(\n                $analyzed_sql_results['is_affected'], $result\n            );\n\n            // Grabs the profiling results\n            if (isset($_SESSION['profiling'])\n                && Util::profilingSupported()\n            ) {\n                $profiling_results = $GLOBALS['dbi']->fetchResult('SHOW PROFILE;');\n            }\n\n            $justBrowsing = $this->isJustBrowsing(\n                $analyzed_sql_results, isset($find_real_end) ? $find_real_end : null\n            );\n\n            $unlim_num_rows = $this->countQueryResults(\n                $num_rows, $justBrowsing, $db, $table, $analyzed_sql_results\n            );\n\n            $this->cleanupRelations(\n                isset($db) ? $db : '',\n                isset($table) ? $table : '',\n                isset($_REQUEST['dropped_column']) ? $_REQUEST['dropped_column'] : null,\n                isset($_REQUEST['purge']) ? $_REQUEST['purge'] : null\n            );\n\n            if (isset($_REQUEST['dropped_column'])\n                && strlen($db) > 0\n                && strlen($table) > 0\n            ) {\n                // to refresh the list of indexes (Ajax mode)\n                $extra_data['indexes_list'] = Index::getHtmlForIndexes(\n                    $table,\n                    $db\n                );\n            }\n        }\n\n        return array($result, $num_rows, $unlim_num_rows,\n            isset($profiling_results) ? $profiling_results : null, $extra_data\n        );\n    }\n    /**\n     * Delete related transformation information\n     *\n     * @param string $db                   current database\n     * @param string $table                current table\n     * @param array  $analyzed_sql_results analyzed sql results\n     *\n     * @return void\n     */\n    private function deleteTransformationInfo($db, $table, array $analyzed_sql_results)\n    {\n        if (! isset($analyzed_sql_results['statement'])) {\n            return;\n        }\n        $statement = $analyzed_sql_results['statement'];\n        if ($statement instanceof AlterStatement) {\n            if (!empty($statement->altered[0])\n                && $statement->altered[0]->options->has('DROP')\n            ) {\n                if (!empty($statement->altered[0]->field->column)) {\n                    Transformations::clear(\n                        $db,\n                        $table,\n                        $statement->altered[0]->field->column\n                    );\n                }\n            }\n        } elseif ($statement instanceof DropStatement) {\n            Transformations::clear($db, $table);\n        }\n    }\n\n    /**\n     * Function to get the message for the no rows returned case\n     *\n     * @param string $message_to_show      message to show\n     * @param array  $analyzed_sql_results analyzed sql results\n     * @param int    $num_rows             number of rows\n     *\n     * @return string $message\n     */\n    private function getMessageForNoRowsReturned($message_to_show,\n        array $analyzed_sql_results, $num_rows\n    ) {\n        if ($analyzed_sql_results['querytype'] == 'DELETE\"') {\n            $message = Message::getMessageForDeletedRows($num_rows);\n        } elseif ($analyzed_sql_results['is_insert']) {\n            if ($analyzed_sql_results['querytype'] == 'REPLACE') {\n                // For REPLACE we get DELETED + INSERTED row count,\n                // so we have to call it affected\n                $message = Message::getMessageForAffectedRows($num_rows);\n            } else {\n                $message = Message::getMessageForInsertedRows($num_rows);\n            }\n            $insert_id = $GLOBALS['dbi']->insertId();\n            if ($insert_id != 0) {\n                // insert_id is id of FIRST record inserted in one insert,\n                // so if we inserted multiple rows, we had to increment this\n                $message->addText('[br]');\n                // need to use a temporary because the Message class\n                // currently supports adding parameters only to the first\n                // message\n                $_inserted = Message::notice(__('Inserted row id: %1$d'));\n                $_inserted->addParam($insert_id + $num_rows - 1);\n                $message->addMessage($_inserted);\n            }\n        } elseif ($analyzed_sql_results['is_affected']) {\n            $message = Message::getMessageForAffectedRows($num_rows);\n\n            // Ok, here is an explanation for the !$is_select.\n            // The form generated by PhpMyAdmin\\SqlQueryForm\n            // and db_sql.php has many submit buttons\n            // on the same form, and some confusion arises from the\n            // fact that $message_to_show is sent for every case.\n            // The $message_to_show containing a success message and sent with\n            // the form should not have priority over errors\n        } elseif (! empty($message_to_show)\n            && $analyzed_sql_results['querytype'] != 'SELECT'\n        ) {\n            $message = Message::rawSuccess(htmlspecialchars($message_to_show));\n        } elseif (! empty($GLOBALS['show_as_php'])) {\n            $message = Message::success(__('Showing as PHP code'));\n        } elseif (isset($GLOBALS['show_as_php'])) {\n            /* User disable showing as PHP, query is only displayed */\n            $message = Message::notice(__('Showing SQL query'));\n        } else {\n            $message = Message::success(\n                __('MySQL returned an empty result set (i.e. zero rows).')\n            );\n        }\n\n        if (isset($GLOBALS['querytime'])) {\n            $_querytime = Message::notice(\n                '(' . __('Query took %01.4f seconds.') . ')'\n            );\n            $_querytime->addParam($GLOBALS['querytime']);\n            $message->addMessage($_querytime);\n        }\n\n        // In case of ROLLBACK, notify the user.\n        if (isset($_REQUEST['rollback_query'])) {\n            $message->addText(__('[ROLLBACK occurred.]'));\n        }\n\n        return $message;\n    }\n\n    /**\n     * Function to respond back when the query returns zero rows\n     * This method is called\n     * 1-> When browsing an empty table\n     * 2-> When executing a query on a non empty table which returns zero results\n     * 3-> When executing a query on an empty table\n     * 4-> When executing an INSERT, UPDATE, DELETE query from the SQL tab\n     * 5-> When deleting a row from BROWSE tab\n     * 6-> When searching using the SEARCH tab which returns zero results\n     * 7-> When changing the structure of the table except change operation\n     *\n     * @param array          $analyzed_sql_results analyzed sql results\n     * @param string         $db                   current database\n     * @param string         $table                current table\n     * @param string         $message_to_show      message to show\n     * @param int            $num_rows             number of rows\n     * @param DisplayResults $displayResultsObject DisplayResult instance\n     * @param array          $extra_data           extra data\n     * @param string         $pmaThemeImage        uri of the theme image\n     * @param object         $result               executed query results\n     * @param string         $sql_query            sql query\n     * @param string         $complete_query       complete sql query\n     *\n     * @return string html\n     */\n    private function getQueryResponseForNoResultsReturned(array $analyzed_sql_results, $db,\n        $table, $message_to_show, $num_rows, $displayResultsObject, $extra_data,\n        $pmaThemeImage, $result, $sql_query, $complete_query\n    ) {\n        if ($this->isDeleteTransformationInfo($analyzed_sql_results)) {\n            $this->deleteTransformationInfo($db, $table, $analyzed_sql_results);\n        }\n\n        if (isset($extra_data['error'])) {\n            $message = Message::rawError($extra_data['error']);\n        } else {\n            $message = $this->getMessageForNoRowsReturned(\n                isset($message_to_show) ? $message_to_show : null,\n                $analyzed_sql_results, $num_rows\n            );\n        }\n\n        $html_output = '';\n        $html_message = Util::getMessage(\n            $message, $GLOBALS['sql_query'], 'success'\n        );\n        $html_output .= $html_message;\n        if (!isset($GLOBALS['show_as_php'])) {\n\n            if (! empty($GLOBALS['reload'])) {\n                $extra_data['reload'] = 1;\n                $extra_data['db'] = $GLOBALS['db'];\n            }\n\n            // For ajax requests add message and sql_query as JSON\n            if (empty($_REQUEST['ajax_page_request'])) {\n                $extra_data['message'] = $message;\n                if ($GLOBALS['cfg']['ShowSQL']) {\n                    $extra_data['sql_query'] = $html_message;\n                }\n            }\n\n            $response = Response::getInstance();\n            $response->addJSON(isset($extra_data) ? $extra_data : array());\n\n            if (!empty($analyzed_sql_results['is_select']) &&\n                    !isset($extra_data['error'])) {\n                $url_query = isset($url_query) ? $url_query : null;\n\n                $displayParts = array(\n                    'edit_lnk' => null,\n                    'del_lnk' => null,\n                    'sort_lnk' => '1',\n                    'nav_bar'  => '0',\n                    'bkm_form' => '1',\n                    'text_btn' => '1',\n                    'pview_lnk' => '1'\n                );\n\n                $html_output .= $this->getHtmlForSqlQueryResultsTable(\n                    $displayResultsObject,\n                    $pmaThemeImage, $url_query, $displayParts,\n                    false, 0, $num_rows, true, $result,\n                    $analyzed_sql_results, true\n                );\n\n                $html_output .= $displayResultsObject->getCreateViewQueryResultOp(\n                    $analyzed_sql_results\n                );\n\n                $cfgBookmark = Bookmark::getParams($GLOBALS['cfg']['Server']['user']);\n                if ($cfgBookmark) {\n                    $html_output .= $this->getHtmlForBookmark(\n                        $displayParts,\n                        $cfgBookmark,\n                        $sql_query, $db, $table,\n                        isset($complete_query) ? $complete_query : $sql_query,\n                        $cfgBookmark['user']\n                    );\n                }\n            }\n        }\n\n        return $html_output;\n    }\n\n    /**\n     * Function to send response for ajax grid edit\n     *\n     * @param object $result result of the executed query\n     *\n     * @return void\n     */\n    private function sendResponseForGridEdit($result)\n    {\n        $row = $GLOBALS['dbi']->fetchRow($result);\n        $field_flags = $GLOBALS['dbi']->fieldFlags($result, 0);\n        if (stristr($field_flags, DisplayResults::BINARY_FIELD)) {\n            $row[0] = bin2hex($row[0]);\n        }\n        $response = Response::getInstance();\n        $response->addJSON('value', $row[0]);\n        exit;\n    }\n\n    /**\n     * Function to get html for the sql query results div\n     *\n     * @param string  $previous_update_query_html html for the previously executed query\n     * @param string  $profiling_chart_html       html for profiling\n     * @param Message $missing_unique_column_msg  message for the missing unique column\n     * @param Message $bookmark_created_msg       message for bookmark creation\n     * @param string  $table_html                 html for the table for displaying sql\n     *                                            results\n     * @param string  $indexes_problems_html      html for displaying errors in indexes\n     * @param string  $bookmark_support_html      html for displaying bookmark form\n     *\n     * @return string $html_output\n     */\n    private function getHtmlForSqlQueryResults($previous_update_query_html,\n        $profiling_chart_html, $missing_unique_column_msg, $bookmark_created_msg,\n        $table_html, $indexes_problems_html, $bookmark_support_html\n    ) {\n        //begin the sqlqueryresults div here. container div\n        $html_output = '<div class=\"sqlqueryresults ajax\">';\n        $html_output .= isset($previous_update_query_html)\n            ? $previous_update_query_html : '';\n        $html_output .= isset($profiling_chart_html) ? $profiling_chart_html : '';\n        $html_output .= isset($missing_unique_column_msg)\n            ? $missing_unique_column_msg->getDisplay() : '';\n        $html_output .= isset($bookmark_created_msg)\n            ? $bookmark_created_msg->getDisplay() : '';\n        $html_output .= $table_html;\n        $html_output .= isset($indexes_problems_html) ? $indexes_problems_html : '';\n        $html_output .= isset($bookmark_support_html) ? $bookmark_support_html : '';\n        $html_output .= '</div>'; // end sqlqueryresults div\n\n        return $html_output;\n    }\n\n    /**\n     * Returns a message for successful creation of a bookmark or null if a bookmark\n     * was not created\n     *\n     * @return Message $bookmark_created_msg\n     */\n    private function getBookmarkCreatedMessage()\n    {\n        if (isset($_GET['label'])) {\n            $bookmark_created_msg = Message::success(\n                __('Bookmark %s has been created.')\n            );\n            $bookmark_created_msg->addParam($_GET['label']);\n        } else {\n            $bookmark_created_msg = null;\n        }\n\n        return $bookmark_created_msg;\n    }\n\n    /**\n     * Function to get html for the sql query results table\n     *\n     * @param DisplayResults $displayResultsObject instance of DisplayResult\n     * @param string         $pmaThemeImage        theme image uri\n     * @param string         $url_query            url query\n     * @param array          $displayParts         the parts to display\n     * @param bool           $editable             whether the result table is\n     *                                             editable or not\n     * @param int            $unlim_num_rows       unlimited number of rows\n     * @param int            $num_rows             number of rows\n     * @param bool           $showtable            whether to show table or not\n     * @param object         $result               result of the executed query\n     * @param array          $analyzed_sql_results analyzed sql results\n     * @param bool           $is_limited_display   Show only limited operations or not\n     *\n     * @return string\n     */\n    private function getHtmlForSqlQueryResultsTable($displayResultsObject,\n        $pmaThemeImage, $url_query, array $displayParts,\n        $editable, $unlim_num_rows, $num_rows, $showtable, $result,\n        array $analyzed_sql_results, $is_limited_display = false\n    ) {\n        $printview = isset($_REQUEST['printview']) && $_REQUEST['printview'] == '1' ? '1' : null;\n        $table_html = '';\n        $browse_dist = ! empty($_REQUEST['is_browse_distinct']);\n\n        if ($analyzed_sql_results['is_procedure']) {\n\n            do {\n                if (! isset($result)) {\n                    $result = $GLOBALS['dbi']->storeResult();\n                }\n                $num_rows = $GLOBALS['dbi']->numRows($result);\n\n                if ($result !== false && $num_rows > 0) {\n\n                    $fields_meta = $GLOBALS['dbi']->getFieldsMeta($result);\n                    if (! is_array($fields_meta)) {\n                        $fields_cnt = 0;\n                    } else {\n                        $fields_cnt  = count($fields_meta);\n                    }\n\n                    $displayResultsObject->setProperties(\n                        $num_rows,\n                        $fields_meta,\n                        $analyzed_sql_results['is_count'],\n                        $analyzed_sql_results['is_export'],\n                        $analyzed_sql_results['is_func'],\n                        $analyzed_sql_results['is_analyse'],\n                        $num_rows,\n                        $fields_cnt,\n                        $GLOBALS['querytime'],\n                        $pmaThemeImage,\n                        $GLOBALS['text_dir'],\n                        $analyzed_sql_results['is_maint'],\n                        $analyzed_sql_results['is_explain'],\n                        $analyzed_sql_results['is_show'],\n                        $showtable,\n                        $printview,\n                        $url_query,\n                        $editable,\n                        $browse_dist\n                    );\n\n                    $displayParts = array(\n                        'edit_lnk' => $displayResultsObject::NO_EDIT_OR_DELETE,\n                        'del_lnk' => $displayResultsObject::NO_EDIT_OR_DELETE,\n                        'sort_lnk' => '1',\n                        'nav_bar'  => '1',\n                        'bkm_form' => '1',\n                        'text_btn' => '1',\n                        'pview_lnk' => '1'\n                    );\n\n                    $table_html .= $displayResultsObject->getTable(\n                        $result,\n                        $displayParts,\n                        $analyzed_sql_results,\n                        $is_limited_display\n                    );\n                }\n\n                $GLOBALS['dbi']->freeResult($result);\n                unset($result);\n\n            } while ($GLOBALS['dbi']->moreResults() && $GLOBALS['dbi']->nextResult());\n\n        } else {\n            if (isset($result) && $result !== false) {\n                $fields_meta = $GLOBALS['dbi']->getFieldsMeta($result);\n                $fields_cnt  = count($fields_meta);\n            }\n            $_SESSION['is_multi_query'] = false;\n            $displayResultsObject->setProperties(\n                $unlim_num_rows,\n                $fields_meta,\n                $analyzed_sql_results['is_count'],\n                $analyzed_sql_results['is_export'],\n                $analyzed_sql_results['is_func'],\n                $analyzed_sql_results['is_analyse'],\n                $num_rows,\n                $fields_cnt, $GLOBALS['querytime'],\n                $pmaThemeImage, $GLOBALS['text_dir'],\n                $analyzed_sql_results['is_maint'],\n                $analyzed_sql_results['is_explain'],\n                $analyzed_sql_results['is_show'],\n                $showtable,\n                $printview,\n                $url_query,\n                $editable,\n                $browse_dist\n            );\n\n            $table_html .= $displayResultsObject->getTable(\n                $result,\n                $displayParts,\n                $analyzed_sql_results,\n                $is_limited_display\n            );\n            $GLOBALS['dbi']->freeResult($result);\n        }\n\n        return $table_html;\n    }\n\n    /**\n     * Function to get html for the previous query if there is such. If not will return\n     * null\n     *\n     * @param string $disp_query   display query\n     * @param bool   $showSql      whether to show sql\n     * @param array  $sql_data     sql data\n     * @param string $disp_message display message\n     *\n     * @return string $previous_update_query_html\n     */\n    private function getHtmlForPreviousUpdateQuery($disp_query, $showSql, $sql_data,\n        $disp_message\n    ) {\n        // previous update query (from tbl_replace)\n        if (isset($disp_query) && ($showSql == true) && empty($sql_data)) {\n            $previous_update_query_html = Util::getMessage(\n                $disp_message, $disp_query, 'success'\n            );\n        } else {\n            $previous_update_query_html = null;\n        }\n\n        return $previous_update_query_html;\n    }\n\n    /**\n     * To get the message if a column index is missing. If not will return null\n     *\n     * @param string  $table      current table\n     * @param string  $db         current database\n     * @param boolean $editable   whether the results table can be editable or not\n     * @param boolean $has_unique whether there is a unique key\n     *\n     * @return Message $message\n     */\n    private function getMessageIfMissingColumnIndex($table, $db, $editable, $has_unique)\n    {\n        if (!empty($table) && ($GLOBALS['dbi']->isSystemSchema($db) || !$editable)) {\n            $missing_unique_column_msg = Message::notice(\n                sprintf(\n                    __(\n                        'Current selection does not contain a unique column.'\n                        . ' Grid edit, checkbox, Edit, Copy and Delete features'\n                        . ' are not available. %s'\n                    ),\n                    Util::showDocu(\n                        'config',\n                        'cfg_RowActionLinksWithoutUnique'\n                    )\n                )\n            );\n        } elseif (! empty($table) && ! $has_unique) {\n            $missing_unique_column_msg = Message::notice(\n                sprintf(\n                    __(\n                        'Current selection does not contain a unique column.'\n                        . ' Grid edit, Edit, Copy and Delete features may result in'\n                        . ' undesired behavior. %s'\n                    ),\n                    Util::showDocu(\n                        'config',\n                        'cfg_RowActionLinksWithoutUnique'\n                    )\n                )\n            );\n        } else {\n            $missing_unique_column_msg = null;\n        }\n\n        return $missing_unique_column_msg;\n    }\n\n    /**\n     * Function to get html to display problems in indexes\n     *\n     * @param string     $query_type     query type\n     * @param array|null $selectedTables array of table names selected from the\n     *                                   database structure page, for an action\n     *                                   like check table, optimize table,\n     *                                   analyze table or repair table\n     * @param string     $db             current database\n     *\n     * @return string\n     */\n    private function getHtmlForIndexesProblems($query_type, $selectedTables, $db)\n    {\n        // BEGIN INDEX CHECK See if indexes should be checked.\n        if (isset($query_type)\n            && $query_type == 'check_tbl'\n            && isset($selectedTables)\n            && is_array($selectedTables)\n        ) {\n            $indexes_problems_html = '';\n            foreach ($selectedTables as $tbl_name) {\n                $check = Index::findDuplicates($tbl_name, $db);\n                if (! empty($check)) {\n                    $indexes_problems_html .= sprintf(\n                        __('Problems with indexes of table `%s`'), $tbl_name\n                    );\n                    $indexes_problems_html .= $check;\n                }\n            }\n        } else {\n            $indexes_problems_html = null;\n        }\n\n        return $indexes_problems_html;\n    }\n\n    /**\n     * Function to display results when the executed query returns non empty results\n     *\n     * @param object         $result               executed query results\n     * @param array          $analyzed_sql_results analysed sql results\n     * @param string         $db                   current database\n     * @param string         $table                current table\n     * @param string         $message              message to show\n     * @param array          $sql_data             sql data\n     * @param DisplayResults $displayResultsObject Instance of DisplayResults\n     * @param string         $pmaThemeImage        uri of the theme image\n     * @param int            $unlim_num_rows       unlimited number of rows\n     * @param int            $num_rows             number of rows\n     * @param string         $disp_query           display query\n     * @param string         $disp_message         display message\n     * @param array          $profiling_results    profiling results\n     * @param string         $query_type           query type\n     * @param array|null     $selectedTables       array of table names selected\n     *                                             from the database structure page, for\n     *                                             an action like check table,\n     *                                             optimize table, analyze table or\n     *                                             repair table\n     * @param string         $sql_query            sql query\n     * @param string         $complete_query       complete sql query\n     *\n     * @return string html\n     */\n    private function getQueryResponseForResultsReturned($result, array $analyzed_sql_results,\n        $db, $table, $message, $sql_data, $displayResultsObject, $pmaThemeImage,\n        $unlim_num_rows, $num_rows, $disp_query, $disp_message, $profiling_results,\n        $query_type, $selectedTables, $sql_query, $complete_query\n    ) {\n        // If we are retrieving the full value of a truncated field or the original\n        // value of a transformed field, show it here\n        if (isset($_REQUEST['grid_edit']) && $_REQUEST['grid_edit'] == true) {\n            $this->sendResponseForGridEdit($result);\n            // script has exited at this point\n        }\n\n        // Gets the list of fields properties\n        if (isset($result) && $result) {\n            $fields_meta = $GLOBALS['dbi']->getFieldsMeta($result);\n        }\n\n        // Should be initialized these parameters before parsing\n        $showtable = isset($showtable) ? $showtable : null;\n        $url_query = isset($url_query) ? $url_query : null;\n\n        $response = Response::getInstance();\n        $header   = $response->getHeader();\n        $scripts  = $header->getScripts();\n\n        $just_one_table = $this->resultSetHasJustOneTable($fields_meta);\n\n        // hide edit and delete links:\n        // - for information_schema\n        // - if the result set does not contain all the columns of a unique key\n        //   (unless this is an updatable view)\n        // - if the SELECT query contains a join or a subquery\n\n        $updatableView = false;\n\n        $statement = isset($analyzed_sql_results['statement']) ? $analyzed_sql_results['statement'] : null;\n        if ($statement instanceof SelectStatement) {\n            if (!empty($statement->expr)) {\n                if ($statement->expr[0]->expr === '*') {\n                    $_table = new Table($table, $db);\n                    $updatableView = $_table->isUpdatableView();\n                }\n            }\n\n            if ($analyzed_sql_results['join']\n                || $analyzed_sql_results['is_subquery']\n                || count($analyzed_sql_results['select_tables']) !== 1\n            ) {\n                $just_one_table = false;\n            }\n        }\n\n        $has_unique = $this->resultSetContainsUniqueKey(\n            $db, $table, $fields_meta\n        );\n\n        $editable = ($has_unique\n            || $GLOBALS['cfg']['RowActionLinksWithoutUnique']\n            || $updatableView)\n            && $just_one_table;\n\n        $_SESSION['tmpval']['possible_as_geometry'] = $editable;\n\n        $displayParts = array(\n            'edit_lnk' => $displayResultsObject::UPDATE_ROW,\n            'del_lnk' => $displayResultsObject::DELETE_ROW,\n            'sort_lnk' => '1',\n            'nav_bar'  => '1',\n            'bkm_form' => '1',\n            'text_btn' => '0',\n            'pview_lnk' => '1'\n        );\n\n        if ($GLOBALS['dbi']->isSystemSchema($db) || !$editable) {\n            $displayParts = array(\n                'edit_lnk' => $displayResultsObject::NO_EDIT_OR_DELETE,\n                'del_lnk' => $displayResultsObject::NO_EDIT_OR_DELETE,\n                'sort_lnk' => '1',\n                'nav_bar'  => '1',\n                'bkm_form' => '1',\n                'text_btn' => '1',\n                'pview_lnk' => '1'\n            );\n\n        }\n        if (isset($_REQUEST['printview']) && $_REQUEST['printview'] == '1') {\n            $displayParts = array(\n                'edit_lnk' => $displayResultsObject::NO_EDIT_OR_DELETE,\n                'del_lnk' => $displayResultsObject::NO_EDIT_OR_DELETE,\n                'sort_lnk' => '0',\n                'nav_bar'  => '0',\n                'bkm_form' => '0',\n                'text_btn' => '0',\n                'pview_lnk' => '0'\n            );\n        }\n\n        if (isset($_REQUEST['table_maintenance'])) {\n            $scripts->addFile('makegrid.js');\n            $scripts->addFile('sql.js');\n            $table_maintenance_html = '';\n            if (isset($message)) {\n                $message = Message::success($message);\n                $table_maintenance_html = Util::getMessage(\n                    $message, $GLOBALS['sql_query'], 'success'\n                );\n            }\n            $table_maintenance_html .= $this->getHtmlForSqlQueryResultsTable(\n                $displayResultsObject,\n                $pmaThemeImage, $url_query, $displayParts,\n                false, $unlim_num_rows, $num_rows, $showtable, $result,\n                $analyzed_sql_results\n            );\n            if (empty($sql_data) || ($sql_data['valid_queries'] = 1)) {\n                $response->addHTML($table_maintenance_html);\n                exit();\n            }\n        }\n\n        if (!isset($_REQUEST['printview']) || $_REQUEST['printview'] != '1') {\n            $scripts->addFile('makegrid.js');\n            $scripts->addFile('sql.js');\n            unset($GLOBALS['message']);\n            //we don't need to buffer the output in getMessage here.\n            //set a global variable and check against it in the function\n            $GLOBALS['buffer_message'] = false;\n        }\n\n        $previous_update_query_html = $this->getHtmlForPreviousUpdateQuery(\n            isset($disp_query) ? $disp_query : null,\n            $GLOBALS['cfg']['ShowSQL'], isset($sql_data) ? $sql_data : null,\n            isset($disp_message) ? $disp_message : null\n        );\n\n        $profiling_chart_html = $this->getHtmlForProfilingChart(\n            $url_query, $db, isset($profiling_results) ? $profiling_results :array()\n        );\n\n        $missing_unique_column_msg = $this->getMessageIfMissingColumnIndex(\n            $table, $db, $editable, $has_unique\n        );\n\n        $bookmark_created_msg = $this->getBookmarkCreatedMessage();\n\n        $table_html = $this->getHtmlForSqlQueryResultsTable(\n            $displayResultsObject,\n            $pmaThemeImage, $url_query, $displayParts,\n            $editable, $unlim_num_rows, $num_rows, $showtable, $result,\n            $analyzed_sql_results\n        );\n\n        $indexes_problems_html = $this->getHtmlForIndexesProblems(\n            isset($query_type) ? $query_type : null,\n            isset($selectedTables) ? $selectedTables : null, $db\n        );\n\n        $cfgBookmark = Bookmark::getParams($GLOBALS['cfg']['Server']['user']);\n        if ($cfgBookmark) {\n            $bookmark_support_html = $this->getHtmlForBookmark(\n                $displayParts,\n                $cfgBookmark,\n                $sql_query, $db, $table,\n                isset($complete_query) ? $complete_query : $sql_query,\n                $cfgBookmark['user']\n            );\n        } else {\n            $bookmark_support_html = '';\n        }\n\n        $html_output = isset($table_maintenance_html) ? $table_maintenance_html : '';\n\n        $html_output .= $this->getHtmlForSqlQueryResults(\n            $previous_update_query_html, $profiling_chart_html,\n            $missing_unique_column_msg, $bookmark_created_msg,\n            $table_html, $indexes_problems_html, $bookmark_support_html\n        );\n\n        return $html_output;\n    }\n\n    /**\n     * Function to execute the query and send the response\n     *\n     * @param array      $analyzed_sql_results   analysed sql results\n     * @param bool       $is_gotofile            whether goto file or not\n     * @param string     $db                     current database\n     * @param string     $table                  current table\n     * @param bool|null  $find_real_end          whether to find real end or not\n     * @param string     $sql_query_for_bookmark the sql query to be stored as bookmark\n     * @param array|null $extra_data             extra data\n     * @param string     $message_to_show        message to show\n     * @param string     $message                message\n     * @param array|null $sql_data               sql data\n     * @param string     $goto                   goto page url\n     * @param string     $pmaThemeImage          uri of the PMA theme image\n     * @param string     $disp_query             display query\n     * @param string     $disp_message           display message\n     * @param string     $query_type             query type\n     * @param string     $sql_query              sql query\n     * @param array|null $selectedTables         array of table names selected from the\n     *                                           database structure page, for an action\n     *                                           like check table, optimize table,\n     *                                           analyze table or repair table\n     * @param string     $complete_query         complete query\n     *\n     * @return void\n     */\n    public function executeQueryAndSendQueryResponse($analyzed_sql_results,\n        $is_gotofile, $db, $table, $find_real_end, $sql_query_for_bookmark,\n        $extra_data, $message_to_show, $message, $sql_data, $goto, $pmaThemeImage,\n        $disp_query, $disp_message, $query_type, $sql_query, $selectedTables,\n        $complete_query\n    ) {\n        if ($analyzed_sql_results == null) {\n            // Parse and analyze the query\n            list(\n                $analyzed_sql_results,\n                $db,\n                $table_from_sql\n            ) = ParseAnalyze::sqlQuery($sql_query, $db);\n            // @todo: possibly refactor\n            extract($analyzed_sql_results);\n\n            if ($table != $table_from_sql && !empty($table_from_sql)) {\n                $table = $table_from_sql;\n            }\n        }\n\n        $html_output = $this->executeQueryAndGetQueryResponse(\n            $analyzed_sql_results, // analyzed_sql_results\n            $is_gotofile, // is_gotofile\n            $db, // db\n            $table, // table\n            $find_real_end, // find_real_end\n            $sql_query_for_bookmark, // sql_query_for_bookmark\n            $extra_data, // extra_data\n            $message_to_show, // message_to_show\n            $message, // message\n            $sql_data, // sql_data\n            $goto, // goto\n            $pmaThemeImage, // pmaThemeImage\n            $disp_query, // disp_query\n            $disp_message, // disp_message\n            $query_type, // query_type\n            $sql_query, // sql_query\n            $selectedTables, // selectedTables\n            $complete_query // complete_query\n        );\n\n        $response = Response::getInstance();\n        $response->addHTML($html_output);\n    }\n\n    /**\n     * Function to execute the query and send the response\n     *\n     * @param array      $analyzed_sql_results   analysed sql results\n     * @param bool       $is_gotofile            whether goto file or not\n     * @param string     $db                     current database\n     * @param string     $table                  current table\n     * @param bool|null  $find_real_end          whether to find real end or not\n     * @param string     $sql_query_for_bookmark the sql query to be stored as bookmark\n     * @param array|null $extra_data             extra data\n     * @param string     $message_to_show        message to show\n     * @param string     $message                message\n     * @param array|null $sql_data               sql data\n     * @param string     $goto                   goto page url\n     * @param string     $pmaThemeImage          uri of the PMA theme image\n     * @param string     $disp_query             display query\n     * @param string     $disp_message           display message\n     * @param string     $query_type             query type\n     * @param string     $sql_query              sql query\n     * @param array|null $selectedTables         array of table names selected from the\n     *                                           database structure page, for an action\n     *                                           like check table, optimize table,\n     *                                           analyze table or repair table\n     * @param string     $complete_query         complete query\n     *\n     * @return string html\n     */\n    public function executeQueryAndGetQueryResponse(array $analyzed_sql_results,\n        $is_gotofile, $db, $table, $find_real_end, $sql_query_for_bookmark,\n        $extra_data, $message_to_show, $message, $sql_data, $goto, $pmaThemeImage,\n        $disp_query, $disp_message, $query_type, $sql_query, $selectedTables,\n        $complete_query\n    ) {\n        // Handle disable/enable foreign key checks\n        $default_fk_check = Util::handleDisableFKCheckInit();\n\n        // Handle remembered sorting order, only for single table query.\n        // Handling is not required when it's a union query\n        // (the parser never sets the 'union' key to 0).\n        // Handling is also not required if we came from the \"Sort by key\"\n        // drop-down.\n        if (! empty($analyzed_sql_results)\n            && $this->isRememberSortingOrder($analyzed_sql_results)\n            && empty($analyzed_sql_results['union'])\n            && ! isset($_REQUEST['sort_by_key'])\n        ) {\n            if (! isset($_SESSION['sql_from_query_box'])) {\n                $this->handleSortOrder($db, $table, $analyzed_sql_results, $sql_query);\n            } else {\n                unset($_SESSION['sql_from_query_box']);\n            }\n\n        }\n\n        $displayResultsObject = new DisplayResults(\n            $GLOBALS['db'], $GLOBALS['table'], $goto, $sql_query\n        );\n        $displayResultsObject->setConfigParamsForDisplayTable();\n\n        // assign default full_sql_query\n        $full_sql_query = $sql_query;\n\n        // Do append a \"LIMIT\" clause?\n        if ($this->isAppendLimitClause($analyzed_sql_results)) {\n            $full_sql_query = $this->getSqlWithLimitClause($analyzed_sql_results);\n        }\n\n        $GLOBALS['reload'] = $this->hasCurrentDbChanged($db);\n        $GLOBALS['dbi']->selectDb($db);\n\n        // Execute the query\n        list($result, $num_rows, $unlim_num_rows, $profiling_results, $extra_data)\n            = $this->executeTheQuery(\n                $analyzed_sql_results,\n                $full_sql_query,\n                $is_gotofile,\n                $db,\n                $table,\n                isset($find_real_end) ? $find_real_end : null,\n                isset($sql_query_for_bookmark) ? $sql_query_for_bookmark : null,\n                isset($extra_data) ? $extra_data : null\n            );\n\n        $operations = new Operations();\n        $warning_messages = $operations->getWarningMessagesArray();\n\n        // No rows returned -> move back to the calling page\n        if ((0 == $num_rows && 0 == $unlim_num_rows)\n            || $analyzed_sql_results['is_affected']\n        ) {\n            $html_output = $this->getQueryResponseForNoResultsReturned(\n                $analyzed_sql_results, $db, $table,\n                isset($message_to_show) ? $message_to_show : null,\n                $num_rows, $displayResultsObject, $extra_data,\n                $pmaThemeImage, isset($result) ? $result : null,\n                $sql_query, isset($complete_query) ? $complete_query : null\n            );\n        } else {\n            // At least one row is returned -> displays a table with results\n            $html_output = $this->getQueryResponseForResultsReturned(\n                isset($result) ? $result : null,\n                $analyzed_sql_results,\n                $db,\n                $table,\n                isset($message) ? $message : null,\n                isset($sql_data) ? $sql_data : null,\n                $displayResultsObject,\n                $pmaThemeImage,\n                $unlim_num_rows,\n                $num_rows,\n                isset($disp_query) ? $disp_query : null,\n                isset($disp_message) ? $disp_message : null,\n                $profiling_results,\n                isset($query_type) ? $query_type : null,\n                isset($selectedTables) ? $selectedTables : null,\n                $sql_query,\n                isset($complete_query) ? $complete_query : null\n            );\n        }\n\n        // Handle disable/enable foreign key checks\n        Util::handleDisableFKCheckCleanup($default_fk_check);\n\n        foreach ($warning_messages as $warning) {\n            $message = Message::notice($warning);\n            $html_output .= $message->getDisplay();\n        }\n\n        return $html_output;\n    }\n\n    /**\n     * Function to define pos to display a row\n     *\n     * @param int $number_of_line Number of the line to display\n     * @param int $max_rows       Number of rows by page\n     *\n     * @return int Start position to display the line\n     */\n    private function getStartPosToDisplayRow($number_of_line, $max_rows = null)\n    {\n        if (null === $max_rows) {\n            $max_rows = $_SESSION['tmpval']['max_rows'];\n        }\n\n        return @((ceil($number_of_line / $max_rows) - 1) * $max_rows);\n    }\n\n    /**\n     * Function to calculate new pos if pos is higher than number of rows\n     * of displayed table\n     *\n     * @param string   $db    Database name\n     * @param string   $table Table name\n     * @param int|null $pos   Initial position\n     *\n     * @return int Number of pos to display last page\n     */\n    public function calculatePosForLastPage($db, $table, $pos)\n    {\n        if (null === $pos) {\n            $pos = $_SESSION['tmpval']['pos'];\n        }\n\n        $_table = new Table($table, $db);\n        $unlim_num_rows = $_table->countRecords(true);\n        //If position is higher than number of rows\n        if ($unlim_num_rows <= $pos && 0 != $pos) {\n            $pos = $this->getStartPosToDisplayRow($unlim_num_rows);\n        }\n\n        return $pos;\n    }\n}\n"], "fixing_code": ["phpMyAdmin - ChangeLog\n======================\n\n4.8.3 (not yet released)\n- issue #14314 Error when naming a database '0'\n- issue #14333 Fix NULL as default not shown\n- issue #14229 Fixes issue with recent table list\n- issue #14045 Fix slow performance on DB structure filtering\n- issue #14327 Fix Editing server variable not showing save or cancel option\n- issue #14377 Populate options for view create and edit\n- issue #14171 2FA configuration fails if PHP doesn't have GD support\n- issue #14390 Can't unhide tables\n- issue #14382 \"Visualize GIS data\" icon missing\n- issue #14435 Event scheduler status toggle doesn't work\n- issue #14365 View not working on multiple servers\n- issue #14207 Partition actions in table structure do not work\n- issue #14375 Fixes ERR_BLOCKED_BY_XSS_AUDITOR on export table\n- issue #14552 Blank message shown instead of MySQL error when adding trigger and other locations\n- issue #14525 Fix PHP 7.3 warning: \"continue\" in \"switch\" is equal to \"break\"\n- issue #14554 Icon missing when creating a new trigger, routine, and event\n- issue #14422 Table comment not showing since 4.8.1\n- issue #14426 Drop table doesn't work when you copy tables to another database\n- issue #14548 [security] HTML injection in import warning messages\n\n4.8.2 (2018-06-21)\n- issue #14370 WHERE 0 causes Fatal error\n- issue #14225 Fix missing index icon\n- issue        [security] XSS vulnerability in Designer, see PMASA-2018-3\n- issue        [security] File inclusion and remote code execution vulnerability, see PMASA-2018-4\n\n4.8.1 (2018-05-24)\n- issue #12772 Fix case where the central columns attributes don't get filled in\n- issue #14049 Fix case where the query builder doesn't work when selected column is *\n- issue #14029 Revert \"Browse\" table CSS overflow\n- issue #14241 Dropping indexes and foreign keys fail\n- issue #14227 Relational linking broken\n- issue #14246 Fixed error in configuration storage zero config\n- issue #14128 Show 2FA Secret next to QR code\n- issue #14212 XML Export from single table throws fatal error\n- issue #14239 Line and some other charts ignore result set order of values chosen for the x-axis\n- issue #14260 Fixed configuration for DefaultLang and Lang\n- issue #14264 Linking for 'Distinct values' broken\n- issue #13968 Fix MariaDB 10.2 current_timestamp()\n- issue #14249 Fix for missing go button in view edit\n- issue #14125 Fix for issues with spatial fields\n- issue #14189 Remember table's sorting broken\n- issue #14289 Fix multi-column sorting\n- issue #14278 Fix central columns in-line edit bug\n- issue #14066 Fix AUTO_INCREMENT error when only exporting table structure in database-level exports\n- issue #13893 Simulating queries produces unexpected results\n- issue #14309 Setup script icons missing\n\n4.8.0.1 (2018-04-19)\n- issue        [security] Multiple CSRF vulnerabilities, See PMASA-2018-02\n\n4.8.0 (2018-04-07)\n- issue #12946 Allow to export JSON with unescaped unicode chars\n- issue #12983 Disable login button without solved reCaptcha\n- issue #12315 Allow to remove individual segments from pie charts\n- issue        Change label from \"Improve table structure\" to \"Normalize\" to match standard terminology\n- issue #13087 Offer login as different user on access denied from MySQL\n- issue #13110 Indicate when HTTPS is not properly reported on the server\n- issue #13119 No database selected error when adding foreign key\n- issue #12388 Improved database search to allow search for exact phrase match\n- issue #13099 Report error when trying to copy database to same name\n- issue #13167 Themes now have to contain metadata in theme.json\n- issue #6363  phpMyAdmin no longer requires eval() in PHP\n- issue #12386 The mbstring dependency is now optional\n- issue #13269 Small refactoring in preparation to CSP\n- issue #13384 Database link broken in Databases Page\n- issue #13391 Configurable authentication logging using $cfg['AuthLog']\n- issue #13086 Add support for Google Invisible Captcha\n- issue #13058 Improved error reporting for reCAPTCHA\n- issue #12899 Improved rendering of server variables table\n- issue #12948 Fixed javascript editor for TIME values\n- issue #13095 Fixed alignment of foreign keys editing\n- issue #12944 Improved inline editor for JSON\n- issue #13145 Improved layout of operations pages\n- issue #13448 Add \"format\" query button in edit view form\n- issue #6241  Implement Responsive Design/mobile interface\n- issue        Use a single location for classes under PhpMyAdmin namespace\n- issue #12354 Indicate SSL status on main page\n- issue #5666  Configuration directives for defaults of Transformation options\n- issue #12261 Remove inline JavaScript\n- issue #13408 Show MySQL warnings when executing SQL queries\n- issue #5827  Allow Designer to show tables from other databases\n- issue #13268 Replace Query-By-Example with multi-table query generator interface\n- issue #13576 Add privileges export to per-database listing\n- issue        Consolidate functions into class files\n- issue #13560 Add support for changing collation for all tables and columns in database\n- issue #13303 Add support for creating fulltext index from table structure\n- issue #13711 Lower default value for $cfg['MaxExactCount']\n- issue #13722 DisableIS is not fully honored\n- issue #6197  Added support for authentication using U2F and 2FA\n- issue #13480 Avoid removing cookies on upgrade\n- issue #13397 Remember state of navigation panel\n- issue #11688 Reduced cookie usage\n- issue #13466 Better utilization of user preferences\n- issue #14042 Rename PMD to Designer\n- issue #13940 Honor arg_separator in AJAX requests\n- issue #14060 Can't edit rows in Internet Explorer\n- issue #14096 Internet Explorer compatibility; fixes JavaScript error Object doesn't support property or method 'startsWith'\n\n4.7.9 (2018-03-05)\n- issue #13931 Fixed browsing tables with more results\n- issue #13927 \"Not an integer\" when browsing a table\n- issue #13887 \"Input variables exceeded 1000\" error relating to PHP's max_input_vars directive\n\n4.7.8 (2018-02-20)\n- issue #13914 Fixed resetting default setting values.\n- issue #13758 Fixed fallback value for collation connection.\n- issue #13938 Fixed error handling in PHP 7.2\n- issue        [security] Fix XSS in Central Columns Feature, See PMASA-2018-01\n\n4.7.7 (2017-12-23)\n- issue #13865 Fixed displaying of formatted numeric values for some locales\n- issue #13856 Ensure datetimepicker is always loaded for datetime fields\n- issue #13848 Fixed PHP error when browsing certain results\n- issue        [security] Fix XSRF/CSRF vulnerability, see PMASA-2017-09\n\n4.7.6 (2017-11-29)\n- issue #13517 Fixed check all interaction with filtering\n- issue #13803 Add SJIS-win to default list of allowed charsets\n- issue #13436 Improve detection that MySQL server needs SSL connection\n- issue #13038 Support JSON datatype on MariaDB 10.2.7 and newer\n- issue #13824 Fixed constructing ALTER query with AFTER\n- issue #13821 Lock page when changes are done in the SQL editor\n- issue #13842 Prefer iconv for encoding conversions\n- issue #13737 Fixed changing password on MariaDB cluster\n\n4.7.5 (2017-10-23)\n- issue #13615 Avoid problems with browsing unknown query types\n- issue #13612 Integrate tooltip into datetime pickers\n- issue #13628 Fixed javascript error in server monitor\n- issue #13444 Fixed server monitor on non Linux and Windows systems\n- issue #13633 Reload javscript messages when changing language\n- issue #13604 Fixed crash on invalid ordering data\n- issue #13639 Fixed error when browsing non SELECT results\n- issue #13533 Fixed saving column to display\n- issue #13647 Fixed export of tables with VIRTUAL columns\n- issue #13669 Fixed selecting multiple rows accidentally selects the next row too\n- issue #13513 Fixed edit index Column alignment issue\n- issue #13515 Fixed rendering of add index dialog\n- issue #13710 Fixed possible error in server advisor\n- issue #13477 Fixed setting input transformations\n- issue #13552 Fixed IPv4/IPv6 To Binary input transformation\n- issue #13686 Clicking on column name to trigger sort with an active search leads to logout\n- issue #13725 Fixed copying tables with specific PARTITION definition\n- issue #13761 Fixed listing of bookmarks for a database\n- issue #13800 Database lost when renaming to similar name and lower_case_table_names=1\n\n4.7.4 (2017-08-23)\n- issue #13415 Remove shadow from the logo\n- issue #13507 Fixed per server theme feature\n- issue #13523 Missing newline in ALTER exports\n- issue #13414 Fixed several compatibility issues with PHP 7.2\n- issue #13550 Fixed copy results to clipboard\n- issue #13562 Add limitation for user group length\n- issue #13561 Fixed edit variable link in advisor\n- issue #13579 Optimize table link should not be visible in print page\n- issue #13553 Improved error handling on corrupted tables\n- issue #13512 Fixed rendering of add index dialog\n- issue #13606 Fixed refreshing server variables\n\n4.7.3 (2017-07-20)\n- issue #13447 Large multi-line query removes Export operation and blanks query box options\n- issue #13445 Fixed rendering of query results\n- issue #13437 Fixed version check when not connected to a database\n- issue #13465 Fixed creating relation\n- issue #13475 Fixed export without backquotes\n- issue #13482 Improved handling of uploaded files with open_basedir\n- issue #13387 Fixed inline editing of hex values\n- issue #13382 Fixed size of index edit dialog\n- issue #13489 Fixed rendering SQL lint errors\n- issue #13468 Avoid breakage if set_time_limit is disabled\n- issue #13471 Fail if ini_set/ini_get are disabled\n- issue #13436 Automatically connect using SSL when server is configured so\n- issue #13478 Fixed usage of some browser transformations\n\n4.7.2 (2017-06-29)\n- issue #13314 Make theme selection keep current server\n- issue #13311 Fixed direct login for accounts without password\n- issue #13316 Fixed check for mbstring.func_overload\n- issue #13323 Fixed wrong encoding of table at triggers\n- issue #12976 Fixed natural sorting in several places\n- issue #12718 Show warning for users removed from mysql.user table\n- issue #13362 Fixed loading additional javascripts\n- issue #13343 Fixed editing QBE\n- issue #13193 Improved documentation on user settings\n- issue #13092 Gracefully handle early fatal errors in AJAX requests\n- issue #13327 Fixed Incorrect NavigationTreeEnableExpansion default value in the documentation\n- issue #13008 Fixed export of database with a lot of tables\n- issue #13318 Improved performance when importing with enabled tracking\n- issue #13386 Avoid PHP errors with non existing configuration on OS X\n- issue #13388 Show only supported charsets for conversion\n- issue #13392 Fixed operation with session.auto_start enabled\n- issue #13383 \"Create PHP code\" is broken\n- issue #13189 Fixed links to resume timeouted import\n\n4.7.1 (2017-05-25)\n- issue #13132 Always execute tracking queries as controluser\n- issue #13125 Focus on SQL editor after inserting field name\n- issue #13133 Fixed broken links in setup\n- issue #13135 Database list Tooltips: Show wrong value\n- issue #13150 Fixed pagination while browsing resuls\n- issue #13149 Fixed outbound links in changelog.php\n- issue #13146 Do not include devel dependencies in the release\n- issue #13144 Do not show New as a database in database dropdown\n- issue #13130 Fixed handling of errors in AJAX requests\n- issue #13152 Fixed PHP error in case of invalid table preferences\n- issue #13154 Fixed PHP error on password change\n- issue #13219 Fix Refresh of Process List\n- issue #13182 Fix refresh of long queries\n- issue #12301 Improved handling of logout with disabled LoginCookieDeleteAll\n- issue #13216 Add support for MySQL 8.0 collations\n- issue #13218 Fixed rendering of phpMyAdmin logos\n- issue #13234 Properly report not working sessions\n- issue #13256 Fixed password check on server replication\n- issue #13252 Fixed grid editing time column\n- issue #13258 Fixed detection of Amazon RDS\n- issue #13241 Redirect user to last page that has any tables to display\n- issue #13266 Fix link to User accounts overview page\n- issue #13274 Fix error in query builder\n- issue #13177 Grid editing repeats action after error\n\n4.7.0 (2017-03-28)\n- patch #12233 [Display] Improve message when renaming database to same name\n- issue #6146  Log authentication attempts to syslog\n- issue #11981 Remove support for Swekey authentication\n- issue #11987 Remove code for no longer supported MSIE versions\n+ issue #11962 Remove embedded PHP libraries, use composer to install them\n+ issue #12017 Cannot easily select multiple tables when exporting\n+ issue #12047 Add javascript filtering for databases\n- issue #12166 More compact rendering of navigation tree\n+ issue #12129 Improve performance with SkipLockedTables\n- issue #12173 Do not hide indexes under a slider\n- issue        Improve performance of zip file import\n- issue #12196 Removed $cfg['ThemePath']\n- issue #6274  Add support for export user settings as config.inc.php snippet\n- issue #5555  Better report query errors while generating SQL exports\n- issue #12307 Produce valid JSON on export\n- issue #12325 Setup script icons broken\n- issue #12378 Support IPv6 proxies\n- issue        Removed MySQL connection retry without password\n- issue #12218 Allow to specify further parameters for control connection\n- issue #12162 Show charset for each table on Database structure page\n- issue #12463 Incorrect link in the href of icon at Hide/Show unhide links\n- issue #12330 Shortcut for closing console\n- issue #12465 Improved handling of http requests\n- issue #12474 Broken links in Setup forms Navigation\n- issue #12494 Can't add a new User\n- issue #12523 Add 'token' Parameter in all POST requests (Fix 'Token mismatch' errors)\n- issue #12302 Improved usage of number_format\n- issue #12656 Server selection not working\n- issue #12543 NULL results in dataset are colored grey\n- issue #12664 Create Bookmark broken\n- issue #12688 Use unsigned int for storing bookmark ID\n- issue #12352 Added password strength indicator\n- issue #12713 Correctly handle HTTP status when doing requests\n- issue #12247 Add option to delete settings from browser storage\n- issue #12783 Remove unused PMA_addJSCode function\n- issue #12069 Add table filtering to database structure\n- issue #12799 Allow to configure signon session parameters\n- issue #12854 Drop database is broken\n- issue #12863 Can't toggle Event Scheduler on\n- issue #12742 Finish removing dead code references to xls/xlsx import and export, which was removed some time ago.\n- issue #12536 Rename \"Relations\" to \"Relationships\" in many places as it's the more proper term\n- issue #12834 Fixed margins in central columns feature\n- issue #12903 Document more export configuration options\n- issue #12897 Use consistent numeric format for table overhead\n- issue #12901 Use server returned table name on renaming table\n- issue #12918 Always use \\r\\n as newline when editing fields\n- issue #12923 Fixed server side search in navigation panel\n- issue #12929 Undefined index warning with ssl_ca_paths\n- issue #12924 Do not show errors from OpenSSL cookie encryption/decryption\n- issue #12945 Fixed hint rendering on adding new user\n- issue #12941 Fixed sorting of tables in relation view\n- issue #12936 Fixed tables pagination in navigation panel\n- issue #12904 Do not collapse add form for central columns if there are none\n- issue #12955 Fixed database renaming\n- issue #12954 Fixed export of tracking data\n- issue #12960 Enclose exports in transaction by default\n- issue #12966 After adding a column ADD INDEX option won't be displayed when enabling AI\n- issue #12972 Better error message when Composer has not been run\n- issue #12988 Do not show language selector without choices\n- issue #12993 Fixed external links to php documentation\n- issue #12990 Fixed error when loading favorite tables to console\n- issue #12981 Improved rendering of new version information\n- issue #12922 Fixed bookmarks ordering\n- issue #12964 Fixed table search in navigation\n- issue #12985 Fixed rendering of foreign key browsing\n- issue #12957 Fixed manipulation with GIS data having zero coordinates\n- issue #12804 Fixed various designer javascript errors\n- issue #12934 Fixed possible javascript error on server status page\n- issue #12927 Fixed javascript error on 3NF normalization\n- issue #12996 List all databses in navigation panel database dropdown\n- issue #12980 Better defaults when creating multi field foreign key\n- issue #12976 Improved foreign key editor behavior\n- issue #12958 Always show error reporting dialog on top\n- issue #12693 Improved support for TokuDB\n- issue #11231 Try harder to honor LoginCookieValidity setting\n- issue #13016 and #13017 Slight improvements to the table layout of Relation view\n- issue #12345 Correctly show affected rows for LOAD DATA queries\n- issue #13010 Copy database: SQL error for copying PMADB metadata\n- issue #13002 Fixed OpenDocument exports\n- issue #13000 Align NULL values according to the column alignment\n- issue #13021 Show phpMyAdmin errors even with error_reporting set to 0\n- issue #13020 Removed warning about client and server versions mismatch\n- issue        Hide comments on table Structure tab when no comment is set\n- issue        Fixed submission of error reports\n- issue #13033 Use Referrer-Policy header to specify referrer policy\n- issue        Fixed javascript confirmation of dangerous queries\n- issue #13040 Compatibility with hhvm 3.18\n- issue #13031 Fixed displaying of all rows\n- issue #12967 Fixed related field selection for native relations\n- issue #13045 Properly escape MIME transformatoin names\n- issue #13028 Always show 100% in font selector\n- issue #13047 Fix query simulating for more servers\n- issue #12846 Fix new version check for sites with wrongly configured curl\n- issue #12951 When exporting to Excel, the default is now to include column names in the first row\n- issue #13059 Removed debugging code\n- issue #13029 Fixed table tracking for nested table groups\n- issue #13053 Fixed broken links in setup\n- issue #12708 Removed phpMyAdmin version from User-Agent header\n- issue #13084 Do not point users to setup when it is disabled\n- issue #12660 Delete only phpMyAdmin cookies on upgrade\n- issue #13088 Fixed editing of rows with text primary key\n- issue #13092 Do not try to sync favorite tables if configuration storage is not enabled\n- issue #13105 Fixed changing attribute for virtual field\n- issue #12757 Fixed setting password on recent MariaDB with non working plugins\n- issue #12349 Fixed undefined variable on import from some formats\n- issue #13103 Do not offer default names for copying/renaming databases\n- issue        [security] Possible to bypass $cfg['Servers'][$i]['AllowNoPassword'], see PMASA-2017-08\n\n4.6.6 (2017-01-23)\n- issue #12759 Fix Notice regarding 'Undefined index: old_usergroup'\n- issue #12760 Fix Notice regarding 'Undefined index: users'\n- issue #12762 Fixed parsing of SQL with BINARY function\n- issue #12588 ReCaptcha now works without allow_url_fopen\n- issue #12699 Show no local storage warning only on settings tab\n- issue #12778 Syntax Error in Adding/Changing TIMESTAMP columns with default value as NULL\n- issue #12769 Edit/Export links are not clickable under Routines tab\n- issue #12757 Fixed creating new user with older MariaDB\n- issue #12784 Remove ctype installation suggestion\n- issue #12780 Format button replaces all text with blank spaces\n- issue #12786 Fixed database searching\n- issue #12792 Fixed javascript error on new version link\n- issue #12785 Add information about required and suggested extensions to composer.json\n- issue #12801 Custom header shown twice with cookie login form\n- issue #12802 Custom footer not shown with auth_type http login failure\n- issue #12434 Improve documentation for servers running with Suhosin\n- issue #12800 Updated embedded phpSecLib to 2.0.4\n- issue #12800 Fixed various issues with PHP 7.1\n- issue #11816 Fixed operation with lower_case_table_names=2\n- issue #12813 Fixed stored procedure execution\n- issue #12826 Honor user configured connection collation\n- issue #12293 Correctly report OpenSSL errors from cookie encryption\n- issue #12814 DateTime won't allow to input length in Routine editor\n- issue #12840 Fix Notice regarding 'Undefined index: row_format' when altering table options\n- issue #12841 Fixed moving of columns with whitespace in name\n- issue #12847 Fixed editing of virtual columns\n- issue #12859 Changed WHERE condition to 0 instead of 1 for SQL query window to avoid accidents\n- issue #12872 Use same query for display and execution when dropping index\n- issue #12868 Fix check for user groups freatures being enabled\n- issue #12876 Fix notices and warning related to dbs_to_test global\n- issue #12831 Fix table formatting on Insert tab, which mostly affected row highlighting\n- issue #12495 Reintroduced phpinfo page with limited capabilities\n- issue #12861 Fix renaming tables with lower_case_table_names=2\n- issue #12876 Fix possible PHP error in navigation\n- issue #12881 Fix database search with newer php-gettext\n- issue #12894 Fix linter error on unterminated variable name\n- issue #12732 Fixed filtering for active processes\n- issue        [security] Multiple vulnerabilities in setup script, see PMASA-2016-44.\n- issue        [security] Open redirect, see PMASA-2017-1.\n- issue        [security] php-gettext code execution, see PMASA-2017-2.\n- issue        [security] DOS vulnerabiltiy in table editing, see PMASA-2017-3.\n- issue        [security] CSS injection in themes, see PMASA-2017-4.\n- issue        [security] Cookie attribute injection attack, see PMASA-2017-5.\n- issue        [security] SSRF in replication, see PMASA-2017-6.\n- issue        [security] DOS in replication status, see PMASA-2017-7.\n\n         --- Older ChangeLogs can be found on our project website ---\n                     https://www.phpmyadmin.net/old-stuff/ChangeLogs/\n\n# vim: et ts=4 sw=4 sts=4\n# vim: ft=changelog fenc=utf-8\n# vim: fde=getline(v\\:lnum-1)=~'^\\\\s*$'&&getline(v\\:lnum)=~'\\\\S'?'>1'\\:1&&v\\:lnum>4&&getline(v\\:lnum)!~'^#'\n# vim: fdn=1 fdm=expr\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Set of functions for the SQL executor\n *\n * @package PhpMyAdmin\n */\nnamespace PhpMyAdmin;\n\nuse PhpMyAdmin\\Bookmark;\nuse PhpMyAdmin\\Core;\nuse PhpMyAdmin\\DatabaseInterface;\nuse PhpMyAdmin\\Display\\Results as DisplayResults;\nuse PhpMyAdmin\\Index;\nuse PhpMyAdmin\\Message;\nuse PhpMyAdmin\\Operations;\nuse PhpMyAdmin\\ParseAnalyze;\nuse PhpMyAdmin\\Relation;\nuse PhpMyAdmin\\RelationCleanup;\nuse PhpMyAdmin\\Response;\nuse PhpMyAdmin\\SqlParser\\Statements\\AlterStatement;\nuse PhpMyAdmin\\SqlParser\\Statements\\DropStatement;\nuse PhpMyAdmin\\SqlParser\\Statements\\SelectStatement;\nuse PhpMyAdmin\\SqlParser\\Utils\\Query;\nuse PhpMyAdmin\\Table;\nuse PhpMyAdmin\\Transformations;\nuse PhpMyAdmin\\Url;\nuse PhpMyAdmin\\Util;\n\n/**\n * Set of functions for the SQL executor\n *\n * @package PhpMyAdmin\n */\nclass Sql\n{\n    /**\n     * @var Relation $relation\n     */\n    private $relation;\n\n    /**\n     * Constructor\n     */\n    public function __construct()\n    {\n        $this->relation = new Relation();\n    }\n\n    /**\n     * Parses and analyzes the given SQL query.\n     *\n     * @param string $sql_query SQL query\n     * @param string $db        DB name\n     *\n     * @return mixed\n     */\n    public function parseAndAnalyze($sql_query, $db = null)\n    {\n        if (is_null($db) && isset($GLOBALS['db']) && strlen($GLOBALS['db'])) {\n            $db = $GLOBALS['db'];\n        }\n        list($analyzed_sql_results,,) = ParseAnalyze::sqlQuery($sql_query, $db);\n        return $analyzed_sql_results;\n    }\n\n    /**\n     * Handle remembered sorting order, only for single table query\n     *\n     * @param string $db                    database name\n     * @param string $table                 table name\n     * @param array  &$analyzed_sql_results the analyzed query results\n     * @param string &$full_sql_query       SQL query\n     *\n     * @return void\n     */\n    private function handleSortOrder(\n        $db, $table, array &$analyzed_sql_results, &$full_sql_query\n    ) {\n        $pmatable = new Table($table, $db);\n\n        if (empty($analyzed_sql_results['order'])) {\n\n            // Retrieving the name of the column we should sort after.\n            $sortCol = $pmatable->getUiProp(Table::PROP_SORTED_COLUMN);\n            if (empty($sortCol)) {\n                return;\n            }\n\n            // Remove the name of the table from the retrieved field name.\n            $sortCol = str_replace(\n                Util::backquote($table) . '.',\n                '',\n                $sortCol\n            );\n\n            // Create the new query.\n            $full_sql_query = Query::replaceClause(\n                $analyzed_sql_results['statement'],\n                $analyzed_sql_results['parser']->list,\n                'ORDER BY ' . $sortCol\n            );\n\n            // TODO: Avoid reparsing the query.\n            $analyzed_sql_results = Query::getAll($full_sql_query);\n        } else {\n            // Store the remembered table into session.\n            $pmatable->setUiProp(\n                Table::PROP_SORTED_COLUMN,\n                Query::getClause(\n                    $analyzed_sql_results['statement'],\n                    $analyzed_sql_results['parser']->list,\n                    'ORDER BY'\n                )\n            );\n        }\n    }\n\n    /**\n     * Append limit clause to SQL query\n     *\n     * @param array &$analyzed_sql_results the analyzed query results\n     *\n     * @return string limit clause appended SQL query\n     */\n    private function getSqlWithLimitClause(array &$analyzed_sql_results)\n    {\n        return Query::replaceClause(\n            $analyzed_sql_results['statement'],\n            $analyzed_sql_results['parser']->list,\n            'LIMIT ' . $_SESSION['tmpval']['pos'] . ', '\n            . $_SESSION['tmpval']['max_rows']\n        );\n    }\n\n    /**\n     * Verify whether the result set has columns from just one table\n     *\n     * @param array $fields_meta meta fields\n     *\n     * @return boolean whether the result set has columns from just one table\n     */\n    private function resultSetHasJustOneTable(array $fields_meta)\n    {\n        $just_one_table = true;\n        $prev_table = '';\n        foreach ($fields_meta as $one_field_meta) {\n            if ($one_field_meta->table != ''\n                && $prev_table != ''\n                && $one_field_meta->table != $prev_table\n            ) {\n                $just_one_table = false;\n            }\n            if ($one_field_meta->table != '') {\n                $prev_table = $one_field_meta->table;\n            }\n        }\n        return $just_one_table && $prev_table != '';\n    }\n\n    /**\n     * Verify whether the result set contains all the columns\n     * of at least one unique key\n     *\n     * @param string $db          database name\n     * @param string $table       table name\n     * @param array  $fields_meta meta fields\n     *\n     * @return boolean whether the result set contains a unique key\n     */\n    private function resultSetContainsUniqueKey($db, $table, array $fields_meta)\n    {\n        $resultSetColumnNames = array();\n        foreach ($fields_meta as $oneMeta) {\n            $resultSetColumnNames[] = $oneMeta->name;\n        }\n        foreach (Index::getFromTable($table, $db) as $index) {\n            if ($index->isUnique()) {\n                $indexColumns = $index->getColumns();\n                $numberFound = 0;\n                foreach ($indexColumns as $indexColumnName => $dummy) {\n                    if (in_array($indexColumnName, $resultSetColumnNames)) {\n                        $numberFound++;\n                    }\n                }\n                if ($numberFound == count($indexColumns)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Get the HTML for relational column dropdown\n     * During grid edit, if we have a relational field, returns the html for the\n     * dropdown\n     *\n     * @param string $db         current database\n     * @param string $table      current table\n     * @param string $column     current column\n     * @param string $curr_value current selected value\n     *\n     * @return string $dropdown html for the dropdown\n     */\n    private function getHtmlForRelationalColumnDropdown($db, $table, $column, $curr_value)\n    {\n        $foreigners = $this->relation->getForeigners($db, $table, $column);\n\n        $foreignData = $this->relation->getForeignData($foreigners, $column, false, '', '');\n\n        if ($foreignData['disp_row'] == null) {\n            //Handle the case when number of values\n            //is more than $cfg['ForeignKeyMaxLimit']\n            $_url_params = array(\n                    'db' => $db,\n                    'table' => $table,\n                    'field' => $column\n            );\n\n            $dropdown = '<span class=\"curr_value\">'\n                . htmlspecialchars($_REQUEST['curr_value'])\n                . '</span>'\n                . '<a href=\"browse_foreigners.php'\n                . Url::getCommon($_url_params) . '\"'\n                . 'class=\"ajax browse_foreign\" ' . '>'\n                . __('Browse foreign values')\n                . '</a>';\n        } else {\n            $dropdown = $this->relation->foreignDropdown(\n                $foreignData['disp_row'],\n                $foreignData['foreign_field'],\n                $foreignData['foreign_display'],\n                $curr_value,\n                $GLOBALS['cfg']['ForeignKeyMaxLimit']\n            );\n            $dropdown = '<select>' . $dropdown . '</select>';\n        }\n\n        return $dropdown;\n    }\n\n    /**\n     * Get the HTML for the profiling table and accompanying chart if profiling is set.\n     * Otherwise returns null\n     *\n     * @param string $url_query         url query\n     * @param string $db                current database\n     * @param array  $profiling_results array containing the profiling info\n     *\n     * @return string $profiling_table html for the profiling table and chart\n     */\n    private function getHtmlForProfilingChart($url_query, $db, $profiling_results)\n    {\n        if (! empty($profiling_results)) {\n            $url_query = isset($url_query)\n                ? $url_query\n                : Url::getCommon(array('db' => $db));\n\n            $profiling_table = '';\n            $profiling_table .= '<fieldset><legend>' . __('Profiling')\n                . '</legend>' . \"\\n\";\n            $profiling_table .= '<div class=\"floatleft\">';\n            $profiling_table .= '<h3>' . __('Detailed profile') . '</h3>';\n            $profiling_table .= '<table id=\"profiletable\"><thead>' . \"\\n\";\n            $profiling_table .= ' <tr>' . \"\\n\";\n            $profiling_table .= '  <th>' . __('Order')\n                . '<div class=\"sorticon\"></div></th>' . \"\\n\";\n            $profiling_table .= '  <th>' . __('State')\n                . Util::showMySQLDocu('general-thread-states')\n                . '<div class=\"sorticon\"></div></th>' . \"\\n\";\n            $profiling_table .= '  <th>' . __('Time')\n                . '<div class=\"sorticon\"></div></th>' . \"\\n\";\n            $profiling_table .= ' </tr></thead><tbody>' . \"\\n\";\n            list($detailed_table, $chart_json, $profiling_stats)\n                = $this->analyzeAndGetTableHtmlForProfilingResults($profiling_results);\n            $profiling_table .= $detailed_table;\n            $profiling_table .= '</tbody></table>' . \"\\n\";\n            $profiling_table .= '</div>';\n\n            $profiling_table .= '<div class=\"floatleft\">';\n            $profiling_table .= '<h3>' . __('Summary by state') . '</h3>';\n            $profiling_table .= '<table id=\"profilesummarytable\"><thead>' . \"\\n\";\n            $profiling_table .= ' <tr>' . \"\\n\";\n            $profiling_table .= '  <th>' . __('State')\n                . Util::showMySQLDocu('general-thread-states')\n                . '<div class=\"sorticon\"></div></th>' . \"\\n\";\n            $profiling_table .= '  <th>' . __('Total Time')\n                . '<div class=\"sorticon\"></div></th>' . \"\\n\";\n            $profiling_table .= '  <th>' . __('% Time')\n                . '<div class=\"sorticon\"></div></th>' . \"\\n\";\n            $profiling_table .= '  <th>' . __('Calls')\n                . '<div class=\"sorticon\"></div></th>' . \"\\n\";\n            $profiling_table .= '  <th>' . __('\u00f8 Time')\n                . '<div class=\"sorticon\"></div></th>' . \"\\n\";\n            $profiling_table .= ' </tr></thead><tbody>' . \"\\n\";\n            $profiling_table .= $this->getTableHtmlForProfilingSummaryByState(\n                $profiling_stats\n            );\n            $profiling_table .= '</tbody></table>' . \"\\n\";\n\n            $profiling_table .= <<<EOT\n<script type=\"text/javascript\">\n    url_query = '$url_query';\n</script>\nEOT;\n            $profiling_table .= \"</div>\";\n            $profiling_table .= \"<div class='clearfloat'></div>\";\n\n            //require_once 'libraries/chart.lib.php';\n            $profiling_table .= '<div id=\"profilingChartData\" class=\"hide\">';\n            $profiling_table .= json_encode($chart_json);\n            $profiling_table .= '</div>';\n            $profiling_table .= '<div id=\"profilingchart\" class=\"hide\">';\n            $profiling_table .= '</div>';\n            $profiling_table .= '<script type=\"text/javascript\">';\n            $profiling_table .= \"AJAX.registerOnload('sql.js', function () {\";\n            $profiling_table .= 'makeProfilingChart();';\n            $profiling_table .= 'initProfilingTables();';\n            $profiling_table .= '});';\n            $profiling_table .= '</script>';\n            $profiling_table .= '</fieldset>' . \"\\n\";\n        } else {\n            $profiling_table = null;\n        }\n        return $profiling_table;\n    }\n\n    /**\n     * Function to get HTML for detailed profiling results table, profiling stats, and\n     * $chart_json for displaying the chart.\n     *\n     * @param array $profiling_results profiling results\n     *\n     * @return mixed\n     */\n    private function analyzeAndGetTableHtmlForProfilingResults(\n        $profiling_results\n    ) {\n        $profiling_stats = array(\n            'total_time' => 0,\n            'states' => array(),\n        );\n        $chart_json = Array();\n        $i = 1;\n        $table = '';\n        foreach ($profiling_results as $one_result) {\n            if (isset($profiling_stats['states'][ucwords($one_result['Status'])])) {\n                $states = $profiling_stats['states'];\n                $states[ucwords($one_result['Status'])]['total_time']\n                    += $one_result['Duration'];\n                $states[ucwords($one_result['Status'])]['calls']++;\n            } else {\n                $profiling_stats['states'][ucwords($one_result['Status'])] = array(\n                    'total_time' => $one_result['Duration'],\n                    'calls' => 1,\n                );\n            }\n            $profiling_stats['total_time'] += $one_result['Duration'];\n\n            $table .= ' <tr>' . \"\\n\";\n            $table .= '<td>' . $i++ . '</td>' . \"\\n\";\n            $table .= '<td>' . ucwords($one_result['Status'])\n                . '</td>' . \"\\n\";\n            $table .= '<td class=\"right\">'\n                . (Util::formatNumber($one_result['Duration'], 3, 1))\n                . 's<span class=\"rawvalue hide\">'\n                . $one_result['Duration'] . '</span></td>' . \"\\n\";\n            if (isset($chart_json[ucwords($one_result['Status'])])) {\n                $chart_json[ucwords($one_result['Status'])]\n                    += $one_result['Duration'];\n            } else {\n                $chart_json[ucwords($one_result['Status'])]\n                    = $one_result['Duration'];\n            }\n        }\n        return array($table, $chart_json, $profiling_stats);\n    }\n\n    /**\n     * Function to get HTML for summary by state table\n     *\n     * @param array $profiling_stats profiling stats\n     *\n     * @return string $table html for the table\n     */\n    private function getTableHtmlForProfilingSummaryByState(array $profiling_stats)\n    {\n        $table = '';\n        foreach ($profiling_stats['states'] as $name => $stats) {\n            $table .= ' <tr>' . \"\\n\";\n            $table .= '<td>' . $name . '</td>' . \"\\n\";\n            $table .= '<td align=\"right\">'\n                . Util::formatNumber($stats['total_time'], 3, 1)\n                . 's<span class=\"rawvalue hide\">'\n                . $stats['total_time'] . '</span></td>' . \"\\n\";\n            $table .= '<td align=\"right\">'\n                . Util::formatNumber(\n                    100 * ($stats['total_time'] / $profiling_stats['total_time']),\n                    0, 2\n                )\n            . '%</td>' . \"\\n\";\n            $table .= '<td align=\"right\">' . $stats['calls'] . '</td>'\n                . \"\\n\";\n            $table .= '<td align=\"right\">'\n                . Util::formatNumber(\n                    $stats['total_time'] / $stats['calls'], 3, 1\n                )\n                . 's<span class=\"rawvalue hide\">'\n                . number_format($stats['total_time'] / $stats['calls'], 8, '.', '')\n                . '</span></td>' . \"\\n\";\n            $table .= ' </tr>' . \"\\n\";\n        }\n        return $table;\n    }\n\n    /**\n     * Get the HTML for the enum column dropdown\n     * During grid edit, if we have a enum field, returns the html for the\n     * dropdown\n     *\n     * @param string $db         current database\n     * @param string $table      current table\n     * @param string $column     current column\n     * @param string $curr_value currently selected value\n     *\n     * @return string $dropdown html for the dropdown\n     */\n    private function getHtmlForEnumColumnDropdown($db, $table, $column, $curr_value)\n    {\n        $values = $this->getValuesForColumn($db, $table, $column);\n        $dropdown = '<option value=\"\">&nbsp;</option>';\n        $dropdown .= $this->getHtmlForOptionsList($values, array($curr_value));\n        $dropdown = '<select>' . $dropdown . '</select>';\n        return $dropdown;\n    }\n\n    /**\n     * Get value of a column for a specific row (marked by $where_clause)\n     *\n     * @param string $db           current database\n     * @param string $table        current table\n     * @param string $column       current column\n     * @param string $where_clause where clause to select a particular row\n     *\n     * @return string with value\n     */\n    private function getFullValuesForSetColumn($db, $table, $column, $where_clause)\n    {\n        $result = $GLOBALS['dbi']->fetchSingleRow(\n            \"SELECT `$column` FROM `$db`.`$table` WHERE $where_clause\"\n        );\n\n        return $result[$column];\n    }\n\n    /**\n     * Get the HTML for the set column dropdown\n     * During grid edit, if we have a set field, returns the html for the\n     * dropdown\n     *\n     * @param string $db         current database\n     * @param string $table      current table\n     * @param string $column     current column\n     * @param string $curr_value currently selected value\n     *\n     * @return string $dropdown html for the set column\n     */\n    private function getHtmlForSetColumn($db, $table, $column, $curr_value)\n    {\n        $values = $this->getValuesForColumn($db, $table, $column);\n        $dropdown = '';\n        $full_values =\n            isset($_REQUEST['get_full_values']) ? $_REQUEST['get_full_values'] : false;\n        $where_clause =\n            isset($_REQUEST['where_clause']) ? $_REQUEST['where_clause'] : null;\n\n        // If the $curr_value was truncated, we should\n        // fetch the correct full values from the table\n        if ($full_values && ! empty($where_clause)) {\n            $curr_value = $this->getFullValuesForSetColumn(\n                $db, $table, $column, $where_clause\n            );\n        }\n\n        //converts characters of $curr_value to HTML entities\n        $converted_curr_value = htmlentities(\n            $curr_value, ENT_COMPAT, \"UTF-8\"\n        );\n\n        $selected_values = explode(',', $converted_curr_value);\n\n        $dropdown .= $this->getHtmlForOptionsList($values, $selected_values);\n\n        $select_size = (sizeof($values) > 10) ? 10 : sizeof($values);\n        $dropdown = '<select multiple=\"multiple\" size=\"' . $select_size . '\">'\n            . $dropdown . '</select>';\n\n        return $dropdown;\n    }\n\n    /**\n     * Get all the values for a enum column or set column in a table\n     *\n     * @param string $db     current database\n     * @param string $table  current table\n     * @param string $column current column\n     *\n     * @return array $values array containing the value list for the column\n     */\n    private function getValuesForColumn($db, $table, $column)\n    {\n        $field_info_query = $GLOBALS['dbi']->getColumnsSql($db, $table, $column);\n\n        $field_info_result = $GLOBALS['dbi']->fetchResult(\n            $field_info_query,\n            null,\n            null,\n            DatabaseInterface::CONNECT_USER,\n            DatabaseInterface::QUERY_STORE\n        );\n\n        $values = Util::parseEnumSetValues($field_info_result[0]['Type']);\n\n        return $values;\n    }\n\n    /**\n     * Get HTML for options list\n     *\n     * @param array $values          set of values\n     * @param array $selected_values currently selected values\n     *\n     * @return string $options HTML for options list\n     */\n    private function getHtmlForOptionsList(array $values, array $selected_values)\n    {\n        $options = '';\n        foreach ($values as $value) {\n            $options .= '<option value=\"' . $value . '\"';\n            if (in_array($value, $selected_values, true)) {\n                $options .= ' selected=\"selected\" ';\n            }\n            $options .= '>' . $value . '</option>';\n        }\n        return $options;\n    }\n\n    /**\n     * Function to get html for bookmark support if bookmarks are enabled. Else will\n     * return null\n     *\n     * @param array  $displayParts   the parts to display\n     * @param array  $cfgBookmark    configuration setting for bookmarking\n     * @param string $sql_query      sql query\n     * @param string $db             current database\n     * @param string $table          current table\n     * @param string $complete_query complete query\n     * @param string $bkm_user       bookmarking user\n     *\n     * @return string $html\n     */\n    public function getHtmlForBookmark(array $displayParts, array $cfgBookmark, $sql_query, $db,\n        $table, $complete_query, $bkm_user\n    ) {\n        if ($displayParts['bkm_form'] == '1'\n            && (! empty($cfgBookmark) && empty($_GET['id_bookmark']))\n            && ! empty($sql_query)\n        ) {\n            $goto = 'sql.php'\n                . Url::getCommon(\n                    array(\n                        'db' => $db,\n                        'table' => $table,\n                        'sql_query' => $sql_query,\n                        'id_bookmark'=> 1,\n                    )\n                );\n            $bkm_sql_query = isset($complete_query) ? $complete_query : $sql_query;\n            $html = '<form action=\"sql.php\" method=\"post\"'\n                . ' onsubmit=\"return ! emptyCheckTheField(this,'\n                . '\\'bkm_fields[bkm_label]\\');\"'\n                . ' class=\"bookmarkQueryForm print_ignore\">';\n            $html .= Url::getHiddenInputs();\n            $html .= '<input type=\"hidden\" name=\"db\"'\n                . ' value=\"' . htmlspecialchars($db) . '\" />';\n            $html .= '<input type=\"hidden\" name=\"goto\" value=\"' . $goto . '\" />';\n            $html .= '<input type=\"hidden\" name=\"bkm_fields[bkm_database]\"'\n                . ' value=\"' . htmlspecialchars($db) . '\" />';\n            $html .= '<input type=\"hidden\" name=\"bkm_fields[bkm_user]\"'\n                . ' value=\"' . $bkm_user . '\" />';\n            $html .= '<input type=\"hidden\" name=\"bkm_fields[bkm_sql_query]\"'\n                . ' value=\"'\n                . htmlspecialchars($bkm_sql_query)\n                . '\" />';\n            $html .= '<fieldset>';\n            $html .= '<legend>';\n            $html .= Util::getIcon(\n                'b_bookmark', __('Bookmark this SQL query'), true\n            );\n            $html .= '</legend>';\n            $html .= '<div class=\"formelement\">';\n            $html .= '<label>' . __('Label:');\n            $html .= '<input type=\"text\" name=\"bkm_fields[bkm_label]\" value=\"\" />' .\n                '</label>';\n            $html .= '</div>';\n            $html .= '<div class=\"formelement\">';\n            $html .= '<label>' .\n                '<input type=\"checkbox\" name=\"bkm_all_users\" value=\"true\" />';\n            $html .=  __('Let every user access this bookmark') . '</label>';\n            $html .= '</div>';\n            $html .= '<div class=\"clearfloat\"></div>';\n            $html .= '</fieldset>';\n            $html .= '<fieldset class=\"tblFooters\">';\n            $html .= '<input type=\"hidden\" name=\"store_bkm\" value=\"1\" />';\n            $html .= '<input type=\"submit\"'\n                . ' value=\"' . __('Bookmark this SQL query') . '\" />';\n            $html .= '</fieldset>';\n            $html .= '</form>';\n\n        } else {\n            $html = null;\n        }\n\n        return $html;\n    }\n\n    /**\n     * Function to check whether to remember the sorting order or not\n     *\n     * @param array $analyzed_sql_results the analyzed query and other variables set\n     *                                    after analyzing the query\n     *\n     * @return boolean\n     */\n    private function isRememberSortingOrder(array $analyzed_sql_results)\n    {\n        return $GLOBALS['cfg']['RememberSorting']\n            && ! ($analyzed_sql_results['is_count']\n                || $analyzed_sql_results['is_export']\n                || $analyzed_sql_results['is_func']\n                || $analyzed_sql_results['is_analyse'])\n            && $analyzed_sql_results['select_from']\n            && isset($analyzed_sql_results['select_expr'])\n            && isset($analyzed_sql_results['select_tables'])\n            && ((empty($analyzed_sql_results['select_expr']))\n                || ((count($analyzed_sql_results['select_expr']) == 1)\n                    && ($analyzed_sql_results['select_expr'][0] == '*')))\n            && count($analyzed_sql_results['select_tables']) == 1;\n    }\n\n    /**\n     * Function to check whether the LIMIT clause should be appended or not\n     *\n     * @param array $analyzed_sql_results the analyzed query and other variables set\n     *                                    after analyzing the query\n     *\n     * @return boolean\n     */\n    private function isAppendLimitClause(array $analyzed_sql_results)\n    {\n        // Assigning LIMIT clause to an syntactically-wrong query\n        // is not needed. Also we would want to show the true query\n        // and the true error message to the query executor\n\n        return (isset($analyzed_sql_results['parser'])\n            && count($analyzed_sql_results['parser']->errors) === 0)\n            && ($_SESSION['tmpval']['max_rows'] != 'all')\n            && ! ($analyzed_sql_results['is_export']\n            || $analyzed_sql_results['is_analyse'])\n            && ($analyzed_sql_results['select_from']\n                || $analyzed_sql_results['is_subquery'])\n            && empty($analyzed_sql_results['limit']);\n    }\n\n    /**\n     * Function to check whether this query is for just browsing\n     *\n     * @param array   $analyzed_sql_results the analyzed query and other variables set\n     *                                      after analyzing the query\n     * @param boolean $find_real_end        whether the real end should be found\n     *\n     * @return boolean\n     */\n    public function isJustBrowsing(array $analyzed_sql_results, $find_real_end)\n    {\n        return ! $analyzed_sql_results['is_group']\n            && ! $analyzed_sql_results['is_func']\n            && empty($analyzed_sql_results['union'])\n            && empty($analyzed_sql_results['distinct'])\n            && $analyzed_sql_results['select_from']\n            && (count($analyzed_sql_results['select_tables']) === 1)\n            && (empty($analyzed_sql_results['statement']->where)\n                || (count($analyzed_sql_results['statement']->where) == 1\n                    && $analyzed_sql_results['statement']->where[0]->expr ==='1'))\n            && empty($analyzed_sql_results['group'])\n            && ! isset($find_real_end)\n            && ! $analyzed_sql_results['is_subquery']\n            && ! $analyzed_sql_results['join']\n            && empty($analyzed_sql_results['having']);\n    }\n\n    /**\n     * Function to check whether the related transformation information should be deleted\n     *\n     * @param array $analyzed_sql_results the analyzed query and other variables set\n     *                                    after analyzing the query\n     *\n     * @return boolean\n     */\n    private function isDeleteTransformationInfo(array $analyzed_sql_results)\n    {\n        return !empty($analyzed_sql_results['querytype'])\n            && (($analyzed_sql_results['querytype'] == 'ALTER')\n                || ($analyzed_sql_results['querytype'] == 'DROP'));\n    }\n\n    /**\n     * Function to check whether the user has rights to drop the database\n     *\n     * @param array   $analyzed_sql_results  the analyzed query and other variables set\n     *                                       after analyzing the query\n     * @param boolean $allowUserDropDatabase whether the user is allowed to drop db\n     * @param boolean $is_superuser          whether this user is a superuser\n     *\n     * @return boolean\n     */\n    public function hasNoRightsToDropDatabase(array $analyzed_sql_results,\n        $allowUserDropDatabase, $is_superuser\n    ) {\n        return ! $allowUserDropDatabase\n            && isset($analyzed_sql_results['drop_database'])\n            && $analyzed_sql_results['drop_database']\n            && ! $is_superuser;\n    }\n\n    /**\n     * Function to set a column property\n     *\n     * @param Table  $pmatable      Table instance\n     * @param string $request_index col_order|col_visib\n     *\n     * @return boolean $retval\n     */\n    private function setColumnProperty($pmatable, $request_index)\n    {\n        $property_value = array_map('intval', explode(',', $_REQUEST[$request_index]));\n        switch($request_index) {\n        case 'col_order':\n            $property_to_set = Table::PROP_COLUMN_ORDER;\n            break;\n        case 'col_visib':\n            $property_to_set = Table::PROP_COLUMN_VISIB;\n            break;\n        default:\n            $property_to_set = '';\n        }\n        $retval = $pmatable->setUiProp(\n            $property_to_set,\n            $property_value,\n            $_REQUEST['table_create_time']\n        );\n        if (gettype($retval) != 'boolean') {\n            $response = Response::getInstance();\n            $response->setRequestStatus(false);\n            $response->addJSON('message', $retval->getString());\n            exit;\n        }\n\n        return $retval;\n    }\n\n    /**\n     * Function to check the request for setting the column order or visibility\n     *\n     * @param string $table the current table\n     * @param string $db    the current database\n     *\n     * @return void\n     */\n    public function setColumnOrderOrVisibility($table, $db)\n    {\n        $pmatable = new Table($table, $db);\n        $retval = false;\n\n        // set column order\n        if (isset($_REQUEST['col_order'])) {\n            $retval = $this->setColumnProperty($pmatable, 'col_order');\n        }\n\n        // set column visibility\n        if ($retval === true && isset($_REQUEST['col_visib'])) {\n            $retval = $this->setColumnProperty($pmatable, 'col_visib');\n        }\n\n        $response = Response::getInstance();\n        $response->setRequestStatus($retval == true);\n        exit;\n    }\n\n    /**\n     * Function to add a bookmark\n     *\n     * @param string $goto goto page URL\n     *\n     * @return void\n     */\n    public function addBookmark($goto)\n    {\n        $bookmark = Bookmark::createBookmark(\n            $GLOBALS['dbi'],\n            $GLOBALS['cfg']['Server']['user'],\n            $_POST['bkm_fields'],\n            (isset($_POST['bkm_all_users'])\n                && $_POST['bkm_all_users'] == 'true' ? true : false\n            )\n        );\n        $result = $bookmark->save();\n        $response = Response::getInstance();\n        if ($response->isAjax()) {\n            if ($result) {\n                $msg = Message::success(__('Bookmark %s has been created.'));\n                $msg->addParam($_POST['bkm_fields']['bkm_label']);\n                $response->addJSON('message', $msg);\n            } else {\n                $msg = Message::error(__('Bookmark not created!'));\n                $response->setRequestStatus(false);\n                $response->addJSON('message', $msg);\n            }\n            exit;\n        } else {\n            // go back to sql.php to redisplay query; do not use &amp; in this case:\n            /**\n             * @todo In which scenario does this happen?\n             */\n            Core::sendHeaderLocation(\n                './' . $goto\n                . '&label=' . $_POST['bkm_fields']['bkm_label']\n            );\n        }\n    }\n\n    /**\n     * Function to find the real end of rows\n     *\n     * @param string $db    the current database\n     * @param string $table the current table\n     *\n     * @return mixed the number of rows if \"retain\" param is true, otherwise true\n     */\n    public function findRealEndOfRows($db, $table)\n    {\n        $unlim_num_rows = $GLOBALS['dbi']->getTable($db, $table)->countRecords(true);\n        $_SESSION['tmpval']['pos'] = $this->getStartPosToDisplayRow($unlim_num_rows);\n\n        return $unlim_num_rows;\n    }\n\n    /**\n     * Function to get values for the relational columns\n     *\n     * @param string $db    the current database\n     * @param string $table the current table\n     *\n     * @return void\n     */\n    public function getRelationalValues($db, $table)\n    {\n        $column = $_REQUEST['column'];\n        if ($_SESSION['tmpval']['relational_display'] == 'D'\n            && isset($_REQUEST['relation_key_or_display_column'])\n            && $_REQUEST['relation_key_or_display_column']\n        ) {\n            $curr_value = $_REQUEST['relation_key_or_display_column'];\n        } else {\n            $curr_value = $_REQUEST['curr_value'];\n        }\n        $dropdown = $this->getHtmlForRelationalColumnDropdown(\n            $db, $table, $column, $curr_value\n        );\n        $response = Response::getInstance();\n        $response->addJSON('dropdown', $dropdown);\n        exit;\n    }\n\n    /**\n     * Function to get values for Enum or Set Columns\n     *\n     * @param string $db         the current database\n     * @param string $table      the current table\n     * @param string $columnType whether enum or set\n     *\n     * @return void\n     */\n    public function getEnumOrSetValues($db, $table, $columnType)\n    {\n        $column = $_REQUEST['column'];\n        $curr_value = $_REQUEST['curr_value'];\n        $response = Response::getInstance();\n        if ($columnType == \"enum\") {\n            $dropdown = $this->getHtmlForEnumColumnDropdown(\n                $db, $table, $column, $curr_value\n            );\n            $response->addJSON('dropdown', $dropdown);\n        } else {\n            $select = $this->getHtmlForSetColumn(\n                $db, $table, $column, $curr_value\n            );\n            $response->addJSON('select', $select);\n        }\n        exit;\n    }\n\n    /**\n     * Function to get the default sql query for browsing page\n     *\n     * @param string $db    the current database\n     * @param string $table the current table\n     *\n     * @return string $sql_query the default $sql_query for browse page\n     */\n    public function getDefaultSqlQueryForBrowse($db, $table)\n    {\n        $bookmark = Bookmark::get(\n            $GLOBALS['dbi'],\n            $GLOBALS['cfg']['Server']['user'],\n            $db,\n            $table,\n            'label',\n            false,\n            true\n        );\n\n        if (! empty($bookmark) && ! empty($bookmark->getQuery())) {\n            $GLOBALS['using_bookmark_message'] = Message::notice(\n                __('Using bookmark \"%s\" as default browse query.')\n            );\n            $GLOBALS['using_bookmark_message']->addParam($table);\n            $GLOBALS['using_bookmark_message']->addHtml(\n                Util::showDocu('faq', 'faq6-22')\n            );\n            $sql_query = $bookmark->getQuery();\n        } else {\n\n            $defaultOrderByClause = '';\n\n            if (isset($GLOBALS['cfg']['TablePrimaryKeyOrder'])\n                && ($GLOBALS['cfg']['TablePrimaryKeyOrder'] !== 'NONE')\n            ) {\n\n                $primaryKey     = null;\n                $primary        = Index::getPrimary($table, $db);\n\n                if ($primary !== false) {\n\n                    $primarycols    = $primary->getColumns();\n\n                    foreach ($primarycols as $col) {\n                        $primaryKey = $col->getName();\n                        break;\n                    }\n\n                    if ($primaryKey != null) {\n                        $defaultOrderByClause = ' ORDER BY '\n                            . Util::backquote($table) . '.'\n                            . Util::backquote($primaryKey) . ' '\n                            . $GLOBALS['cfg']['TablePrimaryKeyOrder'];\n                    }\n\n                }\n\n            }\n\n            $sql_query = 'SELECT * FROM ' . Util::backquote($table)\n                . $defaultOrderByClause;\n\n        }\n\n        return $sql_query;\n    }\n\n    /**\n     * Responds an error when an error happens when executing the query\n     *\n     * @param boolean $is_gotofile    whether goto file or not\n     * @param string  $error          error after executing the query\n     * @param string  $full_sql_query full sql query\n     *\n     * @return void\n     */\n    private function handleQueryExecuteError($is_gotofile, $error, $full_sql_query)\n    {\n        if ($is_gotofile) {\n            $message = Message::rawError($error);\n            $response = Response::getInstance();\n            $response->setRequestStatus(false);\n            $response->addJSON('message', $message);\n        } else {\n            Util::mysqlDie($error, $full_sql_query, '', '');\n        }\n        exit;\n    }\n\n    /**\n     * Function to store the query as a bookmark\n     *\n     * @param string  $db                     the current database\n     * @param string  $bkm_user               the bookmarking user\n     * @param string  $sql_query_for_bookmark the query to be stored in bookmark\n     * @param string  $bkm_label              bookmark label\n     * @param boolean $bkm_replace            whether to replace existing bookmarks\n     *\n     * @return void\n     */\n    public function storeTheQueryAsBookmark($db, $bkm_user, $sql_query_for_bookmark,\n        $bkm_label, $bkm_replace\n    ) {\n        $bfields = array(\n            'bkm_database' => $db,\n            'bkm_user'  => $bkm_user,\n            'bkm_sql_query' => $sql_query_for_bookmark,\n            'bkm_label' => $bkm_label,\n        );\n\n        // Should we replace bookmark?\n        if (isset($bkm_replace)) {\n            $bookmarks = Bookmark::getList(\n                $GLOBALS['dbi'],\n                $GLOBALS['cfg']['Server']['user'],\n                $db\n            );\n            foreach ($bookmarks as $bookmark) {\n                if ($bookmark->getLabel() == $bkm_label) {\n                    $bookmark->delete();\n                }\n            }\n        }\n\n        $bookmark = Bookmark::createBookmark(\n            $GLOBALS['dbi'],\n            $GLOBALS['cfg']['Server']['user'],\n            $bfields,\n            isset($_POST['bkm_all_users'])\n        );\n        $bookmark->save();\n    }\n\n    /**\n     * Executes the SQL query and measures its execution time\n     *\n     * @param string $full_sql_query the full sql query\n     *\n     * @return array ($result, $querytime)\n     */\n    private function executeQueryAndMeasureTime($full_sql_query)\n    {\n        // close session in case the query takes too long\n        session_write_close();\n\n        // Measure query time.\n        $querytime_before = array_sum(explode(' ', microtime()));\n\n        $result = @$GLOBALS['dbi']->tryQuery(\n            $full_sql_query, DatabaseInterface::CONNECT_USER, DatabaseInterface::QUERY_STORE\n        );\n        $querytime_after = array_sum(explode(' ', microtime()));\n\n        // reopen session\n        session_start();\n\n        return array($result, $querytime_after - $querytime_before);\n    }\n\n    /**\n     * Function to get the affected or changed number of rows after executing a query\n     *\n     * @param boolean $is_affected whether the query affected a table\n     * @param mixed   $result      results of executing the query\n     *\n     * @return int    $num_rows    number of rows affected or changed\n     */\n    private function getNumberOfRowsAffectedOrChanged($is_affected, $result)\n    {\n        if (! $is_affected) {\n            $num_rows = ($result) ? @$GLOBALS['dbi']->numRows($result) : 0;\n        } else {\n            $num_rows = @$GLOBALS['dbi']->affectedRows();\n        }\n\n        return $num_rows;\n    }\n\n    /**\n     * Checks if the current database has changed\n     * This could happen if the user sends a query like \"USE `database`;\"\n     *\n     * @param string $db the database in the query\n     *\n     * @return int $reload whether to reload the navigation(1) or not(0)\n     */\n    private function hasCurrentDbChanged($db)\n    {\n        if (strlen($db) > 0) {\n            $current_db = $GLOBALS['dbi']->fetchValue('SELECT DATABASE()');\n            // $current_db is false, except when a USE statement was sent\n            return ($current_db != false) && ($db !== $current_db);\n        }\n\n        return false;\n    }\n\n    /**\n     * If a table, database or column gets dropped, clean comments.\n     *\n     * @param string $db     current database\n     * @param string $table  current table\n     * @param string $column current column\n     * @param bool   $purge  whether purge set or not\n     *\n     * @return array $extra_data\n     */\n    private function cleanupRelations($db, $table, $column, $purge)\n    {\n        if (! empty($purge) && strlen($db) > 0) {\n            if (strlen($table) > 0) {\n                if (isset($column) && strlen($column) > 0) {\n                    RelationCleanup::column($db, $table, $column);\n                } else {\n                    RelationCleanup::table($db, $table);\n                }\n            } else {\n                RelationCleanup::database($db);\n            }\n        }\n    }\n\n    /**\n     * Function to count the total number of rows for the same 'SELECT' query without\n     * the 'LIMIT' clause that may have been programatically added\n     *\n     * @param int    $num_rows             number of rows affected/changed by the query\n     * @param bool   $justBrowsing         whether just browsing or not\n     * @param string $db                   the current database\n     * @param string $table                the current table\n     * @param array  $analyzed_sql_results the analyzed query and other variables set\n     *                                     after analyzing the query\n     *\n     * @return int $unlim_num_rows unlimited number of rows\n     */\n    private function countQueryResults(\n        $num_rows, $justBrowsing, $db, $table, array $analyzed_sql_results\n    ) {\n\n        /* Shortcut for not analyzed/empty query */\n        if (empty($analyzed_sql_results)) {\n            return 0;\n        }\n\n        if (!$this->isAppendLimitClause($analyzed_sql_results)) {\n            // if we did not append a limit, set this to get a correct\n            // \"Showing rows...\" message\n            // $_SESSION['tmpval']['max_rows'] = 'all';\n            $unlim_num_rows = $num_rows;\n        } elseif ($analyzed_sql_results['querytype'] == 'SELECT'\n            || $analyzed_sql_results['is_subquery']\n        ) {\n            //    c o u n t    q u e r y\n\n            // If we are \"just browsing\", there is only one table (and no join),\n            // and no WHERE clause (or just 'WHERE 1 '),\n            // we do a quick count (which uses MaxExactCount) because\n            // SQL_CALC_FOUND_ROWS is not quick on large InnoDB tables\n\n            // However, do not count again if we did it previously\n            // due to $find_real_end == true\n            if ($justBrowsing) {\n                // Get row count (is approximate for InnoDB)\n                $unlim_num_rows = $GLOBALS['dbi']->getTable($db, $table)->countRecords();\n                /**\n                 * @todo Can we know at this point that this is InnoDB,\n                 *       (in this case there would be no need for getting\n                 *       an exact count)?\n                 */\n                if ($unlim_num_rows < $GLOBALS['cfg']['MaxExactCount']) {\n                    // Get the exact count if approximate count\n                    // is less than MaxExactCount\n                    /**\n                     * @todo In countRecords(), MaxExactCount is also verified,\n                     *       so can we avoid checking it twice?\n                     */\n                    $unlim_num_rows = $GLOBALS['dbi']->getTable($db, $table)\n                        ->countRecords(true);\n                }\n\n            } else {\n\n                // The SQL_CALC_FOUND_ROWS option of the SELECT statement is used.\n\n                // For UNION statements, only a SQL_CALC_FOUND_ROWS is required\n                // after the first SELECT.\n\n                $count_query = Query::replaceClause(\n                    $analyzed_sql_results['statement'],\n                    $analyzed_sql_results['parser']->list,\n                    'SELECT SQL_CALC_FOUND_ROWS',\n                    null,\n                    true\n                );\n\n                // Another LIMIT clause is added to avoid long delays.\n                // A complete result will be returned anyway, but the LIMIT would\n                // stop the query as soon as the result that is required has been\n                // computed.\n\n                if (empty($analyzed_sql_results['union'])) {\n                    $count_query .= ' LIMIT 1';\n                }\n\n                // Running the count query.\n                $GLOBALS['dbi']->tryQuery($count_query);\n\n                $unlim_num_rows = $GLOBALS['dbi']->fetchValue('SELECT FOUND_ROWS()');\n            } // end else \"just browsing\"\n        } else {// not $is_select\n            $unlim_num_rows = 0;\n        }\n\n        return $unlim_num_rows;\n    }\n\n    /**\n     * Function to handle all aspects relating to executing the query\n     *\n     * @param array   $analyzed_sql_results   analyzed sql results\n     * @param string  $full_sql_query         full sql query\n     * @param boolean $is_gotofile            whether to go to a file\n     * @param string  $db                     current database\n     * @param string  $table                  current table\n     * @param boolean $find_real_end          whether to find the real end\n     * @param string  $sql_query_for_bookmark sql query to be stored as bookmark\n     * @param array   $extra_data             extra data\n     *\n     * @return mixed\n     */\n    private function executeTheQuery(array $analyzed_sql_results, $full_sql_query, $is_gotofile,\n        $db, $table, $find_real_end, $sql_query_for_bookmark, $extra_data\n    ) {\n        $response = Response::getInstance();\n        $response->getHeader()->getMenu()->setTable($table);\n\n        // Only if we ask to see the php code\n        if (isset($GLOBALS['show_as_php'])) {\n            $result = null;\n            $num_rows = 0;\n            $unlim_num_rows = 0;\n        } else { // If we don't ask to see the php code\n            if (isset($_SESSION['profiling'])\n                && Util::profilingSupported()\n            ) {\n                $GLOBALS['dbi']->query('SET PROFILING=1;');\n            }\n\n            list(\n                $result,\n                $GLOBALS['querytime']\n            ) = $this->executeQueryAndMeasureTime($full_sql_query);\n\n            // Displays an error message if required and stop parsing the script\n            $error = $GLOBALS['dbi']->getError();\n            if ($error && $GLOBALS['cfg']['IgnoreMultiSubmitErrors']) {\n                $extra_data['error'] = $error;\n            } elseif ($error) {\n                $this->handleQueryExecuteError($is_gotofile, $error, $full_sql_query);\n            }\n\n            // If there are no errors and bookmarklabel was given,\n            // store the query as a bookmark\n            if (! empty($_POST['bkm_label']) && ! empty($sql_query_for_bookmark)) {\n                $cfgBookmark = Bookmark::getParams($GLOBALS['cfg']['Server']['user']);\n                $this->storeTheQueryAsBookmark(\n                    $db, $cfgBookmark['user'],\n                    $sql_query_for_bookmark, $_POST['bkm_label'],\n                    isset($_POST['bkm_replace']) ? $_POST['bkm_replace'] : null\n                );\n            } // end store bookmarks\n\n            // Gets the number of rows affected/returned\n            // (This must be done immediately after the query because\n            // mysql_affected_rows() reports about the last query done)\n            $num_rows = $this->getNumberOfRowsAffectedOrChanged(\n                $analyzed_sql_results['is_affected'], $result\n            );\n\n            // Grabs the profiling results\n            if (isset($_SESSION['profiling'])\n                && Util::profilingSupported()\n            ) {\n                $profiling_results = $GLOBALS['dbi']->fetchResult('SHOW PROFILE;');\n            }\n\n            $justBrowsing = $this->isJustBrowsing(\n                $analyzed_sql_results, isset($find_real_end) ? $find_real_end : null\n            );\n\n            $unlim_num_rows = $this->countQueryResults(\n                $num_rows, $justBrowsing, $db, $table, $analyzed_sql_results\n            );\n\n            $this->cleanupRelations(\n                isset($db) ? $db : '',\n                isset($table) ? $table : '',\n                isset($_REQUEST['dropped_column']) ? $_REQUEST['dropped_column'] : null,\n                isset($_REQUEST['purge']) ? $_REQUEST['purge'] : null\n            );\n\n            if (isset($_REQUEST['dropped_column'])\n                && strlen($db) > 0\n                && strlen($table) > 0\n            ) {\n                // to refresh the list of indexes (Ajax mode)\n                $extra_data['indexes_list'] = Index::getHtmlForIndexes(\n                    $table,\n                    $db\n                );\n            }\n        }\n\n        return array($result, $num_rows, $unlim_num_rows,\n            isset($profiling_results) ? $profiling_results : null, $extra_data\n        );\n    }\n    /**\n     * Delete related transformation information\n     *\n     * @param string $db                   current database\n     * @param string $table                current table\n     * @param array  $analyzed_sql_results analyzed sql results\n     *\n     * @return void\n     */\n    private function deleteTransformationInfo($db, $table, array $analyzed_sql_results)\n    {\n        if (! isset($analyzed_sql_results['statement'])) {\n            return;\n        }\n        $statement = $analyzed_sql_results['statement'];\n        if ($statement instanceof AlterStatement) {\n            if (!empty($statement->altered[0])\n                && $statement->altered[0]->options->has('DROP')\n            ) {\n                if (!empty($statement->altered[0]->field->column)) {\n                    Transformations::clear(\n                        $db,\n                        $table,\n                        $statement->altered[0]->field->column\n                    );\n                }\n            }\n        } elseif ($statement instanceof DropStatement) {\n            Transformations::clear($db, $table);\n        }\n    }\n\n    /**\n     * Function to get the message for the no rows returned case\n     *\n     * @param string $message_to_show      message to show\n     * @param array  $analyzed_sql_results analyzed sql results\n     * @param int    $num_rows             number of rows\n     *\n     * @return string $message\n     */\n    private function getMessageForNoRowsReturned($message_to_show,\n        array $analyzed_sql_results, $num_rows\n    ) {\n        if ($analyzed_sql_results['querytype'] == 'DELETE\"') {\n            $message = Message::getMessageForDeletedRows($num_rows);\n        } elseif ($analyzed_sql_results['is_insert']) {\n            if ($analyzed_sql_results['querytype'] == 'REPLACE') {\n                // For REPLACE we get DELETED + INSERTED row count,\n                // so we have to call it affected\n                $message = Message::getMessageForAffectedRows($num_rows);\n            } else {\n                $message = Message::getMessageForInsertedRows($num_rows);\n            }\n            $insert_id = $GLOBALS['dbi']->insertId();\n            if ($insert_id != 0) {\n                // insert_id is id of FIRST record inserted in one insert,\n                // so if we inserted multiple rows, we had to increment this\n                $message->addText('[br]');\n                // need to use a temporary because the Message class\n                // currently supports adding parameters only to the first\n                // message\n                $_inserted = Message::notice(__('Inserted row id: %1$d'));\n                $_inserted->addParam($insert_id + $num_rows - 1);\n                $message->addMessage($_inserted);\n            }\n        } elseif ($analyzed_sql_results['is_affected']) {\n            $message = Message::getMessageForAffectedRows($num_rows);\n\n            // Ok, here is an explanation for the !$is_select.\n            // The form generated by PhpMyAdmin\\SqlQueryForm\n            // and db_sql.php has many submit buttons\n            // on the same form, and some confusion arises from the\n            // fact that $message_to_show is sent for every case.\n            // The $message_to_show containing a success message and sent with\n            // the form should not have priority over errors\n        } elseif (! empty($message_to_show)\n            && $analyzed_sql_results['querytype'] != 'SELECT'\n        ) {\n            $message = Message::rawSuccess(htmlspecialchars($message_to_show));\n        } elseif (! empty($GLOBALS['show_as_php'])) {\n            $message = Message::success(__('Showing as PHP code'));\n        } elseif (isset($GLOBALS['show_as_php'])) {\n            /* User disable showing as PHP, query is only displayed */\n            $message = Message::notice(__('Showing SQL query'));\n        } else {\n            $message = Message::success(\n                __('MySQL returned an empty result set (i.e. zero rows).')\n            );\n        }\n\n        if (isset($GLOBALS['querytime'])) {\n            $_querytime = Message::notice(\n                '(' . __('Query took %01.4f seconds.') . ')'\n            );\n            $_querytime->addParam($GLOBALS['querytime']);\n            $message->addMessage($_querytime);\n        }\n\n        // In case of ROLLBACK, notify the user.\n        if (isset($_REQUEST['rollback_query'])) {\n            $message->addText(__('[ROLLBACK occurred.]'));\n        }\n\n        return $message;\n    }\n\n    /**\n     * Function to respond back when the query returns zero rows\n     * This method is called\n     * 1-> When browsing an empty table\n     * 2-> When executing a query on a non empty table which returns zero results\n     * 3-> When executing a query on an empty table\n     * 4-> When executing an INSERT, UPDATE, DELETE query from the SQL tab\n     * 5-> When deleting a row from BROWSE tab\n     * 6-> When searching using the SEARCH tab which returns zero results\n     * 7-> When changing the structure of the table except change operation\n     *\n     * @param array          $analyzed_sql_results analyzed sql results\n     * @param string         $db                   current database\n     * @param string         $table                current table\n     * @param string         $message_to_show      message to show\n     * @param int            $num_rows             number of rows\n     * @param DisplayResults $displayResultsObject DisplayResult instance\n     * @param array          $extra_data           extra data\n     * @param string         $pmaThemeImage        uri of the theme image\n     * @param object         $result               executed query results\n     * @param string         $sql_query            sql query\n     * @param string         $complete_query       complete sql query\n     *\n     * @return string html\n     */\n    private function getQueryResponseForNoResultsReturned(array $analyzed_sql_results, $db,\n        $table, $message_to_show, $num_rows, $displayResultsObject, $extra_data,\n        $pmaThemeImage, $result, $sql_query, $complete_query\n    ) {\n        if ($this->isDeleteTransformationInfo($analyzed_sql_results)) {\n            $this->deleteTransformationInfo($db, $table, $analyzed_sql_results);\n        }\n\n        if (isset($extra_data['error'])) {\n            $message = Message::rawError($extra_data['error']);\n        } else {\n            $message = $this->getMessageForNoRowsReturned(\n                isset($message_to_show) ? $message_to_show : null,\n                $analyzed_sql_results, $num_rows\n            );\n        }\n\n        $html_output = '';\n        $html_message = Util::getMessage(\n            $message, $GLOBALS['sql_query'], 'success'\n        );\n        $html_output .= $html_message;\n        if (!isset($GLOBALS['show_as_php'])) {\n\n            if (! empty($GLOBALS['reload'])) {\n                $extra_data['reload'] = 1;\n                $extra_data['db'] = $GLOBALS['db'];\n            }\n\n            // For ajax requests add message and sql_query as JSON\n            if (empty($_REQUEST['ajax_page_request'])) {\n                $extra_data['message'] = $message;\n                if ($GLOBALS['cfg']['ShowSQL']) {\n                    $extra_data['sql_query'] = $html_message;\n                }\n            }\n\n            $response = Response::getInstance();\n            $response->addJSON(isset($extra_data) ? $extra_data : array());\n\n            if (!empty($analyzed_sql_results['is_select']) &&\n                    !isset($extra_data['error'])) {\n                $url_query = isset($url_query) ? $url_query : null;\n\n                $displayParts = array(\n                    'edit_lnk' => null,\n                    'del_lnk' => null,\n                    'sort_lnk' => '1',\n                    'nav_bar'  => '0',\n                    'bkm_form' => '1',\n                    'text_btn' => '1',\n                    'pview_lnk' => '1'\n                );\n\n                $html_output .= $this->getHtmlForSqlQueryResultsTable(\n                    $displayResultsObject,\n                    $pmaThemeImage, $url_query, $displayParts,\n                    false, 0, $num_rows, true, $result,\n                    $analyzed_sql_results, true\n                );\n\n                $html_output .= $displayResultsObject->getCreateViewQueryResultOp(\n                    $analyzed_sql_results\n                );\n\n                $cfgBookmark = Bookmark::getParams($GLOBALS['cfg']['Server']['user']);\n                if ($cfgBookmark) {\n                    $html_output .= $this->getHtmlForBookmark(\n                        $displayParts,\n                        $cfgBookmark,\n                        $sql_query, $db, $table,\n                        isset($complete_query) ? $complete_query : $sql_query,\n                        $cfgBookmark['user']\n                    );\n                }\n            }\n        }\n\n        return $html_output;\n    }\n\n    /**\n     * Function to send response for ajax grid edit\n     *\n     * @param object $result result of the executed query\n     *\n     * @return void\n     */\n    private function sendResponseForGridEdit($result)\n    {\n        $row = $GLOBALS['dbi']->fetchRow($result);\n        $field_flags = $GLOBALS['dbi']->fieldFlags($result, 0);\n        if (stristr($field_flags, DisplayResults::BINARY_FIELD)) {\n            $row[0] = bin2hex($row[0]);\n        }\n        $response = Response::getInstance();\n        $response->addJSON('value', $row[0]);\n        exit;\n    }\n\n    /**\n     * Function to get html for the sql query results div\n     *\n     * @param string  $previous_update_query_html html for the previously executed query\n     * @param string  $profiling_chart_html       html for profiling\n     * @param Message $missing_unique_column_msg  message for the missing unique column\n     * @param Message $bookmark_created_msg       message for bookmark creation\n     * @param string  $table_html                 html for the table for displaying sql\n     *                                            results\n     * @param string  $indexes_problems_html      html for displaying errors in indexes\n     * @param string  $bookmark_support_html      html for displaying bookmark form\n     *\n     * @return string $html_output\n     */\n    private function getHtmlForSqlQueryResults($previous_update_query_html,\n        $profiling_chart_html, $missing_unique_column_msg, $bookmark_created_msg,\n        $table_html, $indexes_problems_html, $bookmark_support_html\n    ) {\n        //begin the sqlqueryresults div here. container div\n        $html_output = '<div class=\"sqlqueryresults ajax\">';\n        $html_output .= isset($previous_update_query_html)\n            ? $previous_update_query_html : '';\n        $html_output .= isset($profiling_chart_html) ? $profiling_chart_html : '';\n        $html_output .= isset($missing_unique_column_msg)\n            ? $missing_unique_column_msg->getDisplay() : '';\n        $html_output .= isset($bookmark_created_msg)\n            ? $bookmark_created_msg->getDisplay() : '';\n        $html_output .= $table_html;\n        $html_output .= isset($indexes_problems_html) ? $indexes_problems_html : '';\n        $html_output .= isset($bookmark_support_html) ? $bookmark_support_html : '';\n        $html_output .= '</div>'; // end sqlqueryresults div\n\n        return $html_output;\n    }\n\n    /**\n     * Returns a message for successful creation of a bookmark or null if a bookmark\n     * was not created\n     *\n     * @return Message $bookmark_created_msg\n     */\n    private function getBookmarkCreatedMessage()\n    {\n        if (isset($_GET['label'])) {\n            $bookmark_created_msg = Message::success(\n                __('Bookmark %s has been created.')\n            );\n            $bookmark_created_msg->addParam($_GET['label']);\n        } else {\n            $bookmark_created_msg = null;\n        }\n\n        return $bookmark_created_msg;\n    }\n\n    /**\n     * Function to get html for the sql query results table\n     *\n     * @param DisplayResults $displayResultsObject instance of DisplayResult\n     * @param string         $pmaThemeImage        theme image uri\n     * @param string         $url_query            url query\n     * @param array          $displayParts         the parts to display\n     * @param bool           $editable             whether the result table is\n     *                                             editable or not\n     * @param int            $unlim_num_rows       unlimited number of rows\n     * @param int            $num_rows             number of rows\n     * @param bool           $showtable            whether to show table or not\n     * @param object         $result               result of the executed query\n     * @param array          $analyzed_sql_results analyzed sql results\n     * @param bool           $is_limited_display   Show only limited operations or not\n     *\n     * @return string\n     */\n    private function getHtmlForSqlQueryResultsTable($displayResultsObject,\n        $pmaThemeImage, $url_query, array $displayParts,\n        $editable, $unlim_num_rows, $num_rows, $showtable, $result,\n        array $analyzed_sql_results, $is_limited_display = false\n    ) {\n        $printview = isset($_REQUEST['printview']) && $_REQUEST['printview'] == '1' ? '1' : null;\n        $table_html = '';\n        $browse_dist = ! empty($_REQUEST['is_browse_distinct']);\n\n        if ($analyzed_sql_results['is_procedure']) {\n\n            do {\n                if (! isset($result)) {\n                    $result = $GLOBALS['dbi']->storeResult();\n                }\n                $num_rows = $GLOBALS['dbi']->numRows($result);\n\n                if ($result !== false && $num_rows > 0) {\n\n                    $fields_meta = $GLOBALS['dbi']->getFieldsMeta($result);\n                    if (! is_array($fields_meta)) {\n                        $fields_cnt = 0;\n                    } else {\n                        $fields_cnt  = count($fields_meta);\n                    }\n\n                    $displayResultsObject->setProperties(\n                        $num_rows,\n                        $fields_meta,\n                        $analyzed_sql_results['is_count'],\n                        $analyzed_sql_results['is_export'],\n                        $analyzed_sql_results['is_func'],\n                        $analyzed_sql_results['is_analyse'],\n                        $num_rows,\n                        $fields_cnt,\n                        $GLOBALS['querytime'],\n                        $pmaThemeImage,\n                        $GLOBALS['text_dir'],\n                        $analyzed_sql_results['is_maint'],\n                        $analyzed_sql_results['is_explain'],\n                        $analyzed_sql_results['is_show'],\n                        $showtable,\n                        $printview,\n                        $url_query,\n                        $editable,\n                        $browse_dist\n                    );\n\n                    $displayParts = array(\n                        'edit_lnk' => $displayResultsObject::NO_EDIT_OR_DELETE,\n                        'del_lnk' => $displayResultsObject::NO_EDIT_OR_DELETE,\n                        'sort_lnk' => '1',\n                        'nav_bar'  => '1',\n                        'bkm_form' => '1',\n                        'text_btn' => '1',\n                        'pview_lnk' => '1'\n                    );\n\n                    $table_html .= $displayResultsObject->getTable(\n                        $result,\n                        $displayParts,\n                        $analyzed_sql_results,\n                        $is_limited_display\n                    );\n                }\n\n                $GLOBALS['dbi']->freeResult($result);\n                unset($result);\n\n            } while ($GLOBALS['dbi']->moreResults() && $GLOBALS['dbi']->nextResult());\n\n        } else {\n            if (isset($result) && $result !== false) {\n                $fields_meta = $GLOBALS['dbi']->getFieldsMeta($result);\n                $fields_cnt  = count($fields_meta);\n            }\n            $_SESSION['is_multi_query'] = false;\n            $displayResultsObject->setProperties(\n                $unlim_num_rows,\n                $fields_meta,\n                $analyzed_sql_results['is_count'],\n                $analyzed_sql_results['is_export'],\n                $analyzed_sql_results['is_func'],\n                $analyzed_sql_results['is_analyse'],\n                $num_rows,\n                $fields_cnt, $GLOBALS['querytime'],\n                $pmaThemeImage, $GLOBALS['text_dir'],\n                $analyzed_sql_results['is_maint'],\n                $analyzed_sql_results['is_explain'],\n                $analyzed_sql_results['is_show'],\n                $showtable,\n                $printview,\n                $url_query,\n                $editable,\n                $browse_dist\n            );\n\n            $table_html .= $displayResultsObject->getTable(\n                $result,\n                $displayParts,\n                $analyzed_sql_results,\n                $is_limited_display\n            );\n            $GLOBALS['dbi']->freeResult($result);\n        }\n\n        return $table_html;\n    }\n\n    /**\n     * Function to get html for the previous query if there is such. If not will return\n     * null\n     *\n     * @param string $disp_query   display query\n     * @param bool   $showSql      whether to show sql\n     * @param array  $sql_data     sql data\n     * @param string $disp_message display message\n     *\n     * @return string $previous_update_query_html\n     */\n    private function getHtmlForPreviousUpdateQuery($disp_query, $showSql, $sql_data,\n        $disp_message\n    ) {\n        // previous update query (from tbl_replace)\n        if (isset($disp_query) && ($showSql == true) && empty($sql_data)) {\n            $previous_update_query_html = Util::getMessage(\n                $disp_message, $disp_query, 'success'\n            );\n        } else {\n            $previous_update_query_html = null;\n        }\n\n        return $previous_update_query_html;\n    }\n\n    /**\n     * To get the message if a column index is missing. If not will return null\n     *\n     * @param string  $table      current table\n     * @param string  $db         current database\n     * @param boolean $editable   whether the results table can be editable or not\n     * @param boolean $has_unique whether there is a unique key\n     *\n     * @return Message $message\n     */\n    private function getMessageIfMissingColumnIndex($table, $db, $editable, $has_unique)\n    {\n        if (!empty($table) && ($GLOBALS['dbi']->isSystemSchema($db) || !$editable)) {\n            $missing_unique_column_msg = Message::notice(\n                sprintf(\n                    __(\n                        'Current selection does not contain a unique column.'\n                        . ' Grid edit, checkbox, Edit, Copy and Delete features'\n                        . ' are not available. %s'\n                    ),\n                    Util::showDocu(\n                        'config',\n                        'cfg_RowActionLinksWithoutUnique'\n                    )\n                )\n            );\n        } elseif (! empty($table) && ! $has_unique) {\n            $missing_unique_column_msg = Message::notice(\n                sprintf(\n                    __(\n                        'Current selection does not contain a unique column.'\n                        . ' Grid edit, Edit, Copy and Delete features may result in'\n                        . ' undesired behavior. %s'\n                    ),\n                    Util::showDocu(\n                        'config',\n                        'cfg_RowActionLinksWithoutUnique'\n                    )\n                )\n            );\n        } else {\n            $missing_unique_column_msg = null;\n        }\n\n        return $missing_unique_column_msg;\n    }\n\n    /**\n     * Function to get html to display problems in indexes\n     *\n     * @param string     $query_type     query type\n     * @param array|null $selectedTables array of table names selected from the\n     *                                   database structure page, for an action\n     *                                   like check table, optimize table,\n     *                                   analyze table or repair table\n     * @param string     $db             current database\n     *\n     * @return string\n     */\n    private function getHtmlForIndexesProblems($query_type, $selectedTables, $db)\n    {\n        // BEGIN INDEX CHECK See if indexes should be checked.\n        if (isset($query_type)\n            && $query_type == 'check_tbl'\n            && isset($selectedTables)\n            && is_array($selectedTables)\n        ) {\n            $indexes_problems_html = '';\n            foreach ($selectedTables as $tbl_name) {\n                $check = Index::findDuplicates($tbl_name, $db);\n                if (! empty($check)) {\n                    $indexes_problems_html .= sprintf(\n                        __('Problems with indexes of table `%s`'), $tbl_name\n                    );\n                    $indexes_problems_html .= $check;\n                }\n            }\n        } else {\n            $indexes_problems_html = null;\n        }\n\n        return $indexes_problems_html;\n    }\n\n    /**\n     * Function to display results when the executed query returns non empty results\n     *\n     * @param object         $result               executed query results\n     * @param array          $analyzed_sql_results analysed sql results\n     * @param string         $db                   current database\n     * @param string         $table                current table\n     * @param string         $message              message to show\n     * @param array          $sql_data             sql data\n     * @param DisplayResults $displayResultsObject Instance of DisplayResults\n     * @param string         $pmaThemeImage        uri of the theme image\n     * @param int            $unlim_num_rows       unlimited number of rows\n     * @param int            $num_rows             number of rows\n     * @param string         $disp_query           display query\n     * @param string         $disp_message         display message\n     * @param array          $profiling_results    profiling results\n     * @param string         $query_type           query type\n     * @param array|null     $selectedTables       array of table names selected\n     *                                             from the database structure page, for\n     *                                             an action like check table,\n     *                                             optimize table, analyze table or\n     *                                             repair table\n     * @param string         $sql_query            sql query\n     * @param string         $complete_query       complete sql query\n     *\n     * @return string html\n     */\n    private function getQueryResponseForResultsReturned($result, array $analyzed_sql_results,\n        $db, $table, $message, $sql_data, $displayResultsObject, $pmaThemeImage,\n        $unlim_num_rows, $num_rows, $disp_query, $disp_message, $profiling_results,\n        $query_type, $selectedTables, $sql_query, $complete_query\n    ) {\n        // If we are retrieving the full value of a truncated field or the original\n        // value of a transformed field, show it here\n        if (isset($_REQUEST['grid_edit']) && $_REQUEST['grid_edit'] == true) {\n            $this->sendResponseForGridEdit($result);\n            // script has exited at this point\n        }\n\n        // Gets the list of fields properties\n        if (isset($result) && $result) {\n            $fields_meta = $GLOBALS['dbi']->getFieldsMeta($result);\n        }\n\n        // Should be initialized these parameters before parsing\n        $showtable = isset($showtable) ? $showtable : null;\n        $url_query = isset($url_query) ? $url_query : null;\n\n        $response = Response::getInstance();\n        $header   = $response->getHeader();\n        $scripts  = $header->getScripts();\n\n        $just_one_table = $this->resultSetHasJustOneTable($fields_meta);\n\n        // hide edit and delete links:\n        // - for information_schema\n        // - if the result set does not contain all the columns of a unique key\n        //   (unless this is an updatable view)\n        // - if the SELECT query contains a join or a subquery\n\n        $updatableView = false;\n\n        $statement = isset($analyzed_sql_results['statement']) ? $analyzed_sql_results['statement'] : null;\n        if ($statement instanceof SelectStatement) {\n            if (!empty($statement->expr)) {\n                if ($statement->expr[0]->expr === '*') {\n                    $_table = new Table($table, $db);\n                    $updatableView = $_table->isUpdatableView();\n                }\n            }\n\n            if ($analyzed_sql_results['join']\n                || $analyzed_sql_results['is_subquery']\n                || count($analyzed_sql_results['select_tables']) !== 1\n            ) {\n                $just_one_table = false;\n            }\n        }\n\n        $has_unique = $this->resultSetContainsUniqueKey(\n            $db, $table, $fields_meta\n        );\n\n        $editable = ($has_unique\n            || $GLOBALS['cfg']['RowActionLinksWithoutUnique']\n            || $updatableView)\n            && $just_one_table;\n\n        $_SESSION['tmpval']['possible_as_geometry'] = $editable;\n\n        $displayParts = array(\n            'edit_lnk' => $displayResultsObject::UPDATE_ROW,\n            'del_lnk' => $displayResultsObject::DELETE_ROW,\n            'sort_lnk' => '1',\n            'nav_bar'  => '1',\n            'bkm_form' => '1',\n            'text_btn' => '0',\n            'pview_lnk' => '1'\n        );\n\n        if ($GLOBALS['dbi']->isSystemSchema($db) || !$editable) {\n            $displayParts = array(\n                'edit_lnk' => $displayResultsObject::NO_EDIT_OR_DELETE,\n                'del_lnk' => $displayResultsObject::NO_EDIT_OR_DELETE,\n                'sort_lnk' => '1',\n                'nav_bar'  => '1',\n                'bkm_form' => '1',\n                'text_btn' => '1',\n                'pview_lnk' => '1'\n            );\n\n        }\n        if (isset($_REQUEST['printview']) && $_REQUEST['printview'] == '1') {\n            $displayParts = array(\n                'edit_lnk' => $displayResultsObject::NO_EDIT_OR_DELETE,\n                'del_lnk' => $displayResultsObject::NO_EDIT_OR_DELETE,\n                'sort_lnk' => '0',\n                'nav_bar'  => '0',\n                'bkm_form' => '0',\n                'text_btn' => '0',\n                'pview_lnk' => '0'\n            );\n        }\n\n        if (isset($_REQUEST['table_maintenance'])) {\n            $scripts->addFile('makegrid.js');\n            $scripts->addFile('sql.js');\n            $table_maintenance_html = '';\n            if (isset($message)) {\n                $message = Message::success($message);\n                $table_maintenance_html = Util::getMessage(\n                    $message, $GLOBALS['sql_query'], 'success'\n                );\n            }\n            $table_maintenance_html .= $this->getHtmlForSqlQueryResultsTable(\n                $displayResultsObject,\n                $pmaThemeImage, $url_query, $displayParts,\n                false, $unlim_num_rows, $num_rows, $showtable, $result,\n                $analyzed_sql_results\n            );\n            if (empty($sql_data) || ($sql_data['valid_queries'] = 1)) {\n                $response->addHTML($table_maintenance_html);\n                exit();\n            }\n        }\n\n        if (!isset($_REQUEST['printview']) || $_REQUEST['printview'] != '1') {\n            $scripts->addFile('makegrid.js');\n            $scripts->addFile('sql.js');\n            unset($GLOBALS['message']);\n            //we don't need to buffer the output in getMessage here.\n            //set a global variable and check against it in the function\n            $GLOBALS['buffer_message'] = false;\n        }\n\n        $previous_update_query_html = $this->getHtmlForPreviousUpdateQuery(\n            isset($disp_query) ? $disp_query : null,\n            $GLOBALS['cfg']['ShowSQL'], isset($sql_data) ? $sql_data : null,\n            isset($disp_message) ? $disp_message : null\n        );\n\n        $profiling_chart_html = $this->getHtmlForProfilingChart(\n            $url_query, $db, isset($profiling_results) ? $profiling_results :array()\n        );\n\n        $missing_unique_column_msg = $this->getMessageIfMissingColumnIndex(\n            $table, $db, $editable, $has_unique\n        );\n\n        $bookmark_created_msg = $this->getBookmarkCreatedMessage();\n\n        $table_html = $this->getHtmlForSqlQueryResultsTable(\n            $displayResultsObject,\n            $pmaThemeImage, $url_query, $displayParts,\n            $editable, $unlim_num_rows, $num_rows, $showtable, $result,\n            $analyzed_sql_results\n        );\n\n        $indexes_problems_html = $this->getHtmlForIndexesProblems(\n            isset($query_type) ? $query_type : null,\n            isset($selectedTables) ? $selectedTables : null, $db\n        );\n\n        $cfgBookmark = Bookmark::getParams($GLOBALS['cfg']['Server']['user']);\n        if ($cfgBookmark) {\n            $bookmark_support_html = $this->getHtmlForBookmark(\n                $displayParts,\n                $cfgBookmark,\n                $sql_query, $db, $table,\n                isset($complete_query) ? $complete_query : $sql_query,\n                $cfgBookmark['user']\n            );\n        } else {\n            $bookmark_support_html = '';\n        }\n\n        $html_output = isset($table_maintenance_html) ? $table_maintenance_html : '';\n\n        $html_output .= $this->getHtmlForSqlQueryResults(\n            $previous_update_query_html, $profiling_chart_html,\n            $missing_unique_column_msg, $bookmark_created_msg,\n            $table_html, $indexes_problems_html, $bookmark_support_html\n        );\n\n        return $html_output;\n    }\n\n    /**\n     * Function to execute the query and send the response\n     *\n     * @param array      $analyzed_sql_results   analysed sql results\n     * @param bool       $is_gotofile            whether goto file or not\n     * @param string     $db                     current database\n     * @param string     $table                  current table\n     * @param bool|null  $find_real_end          whether to find real end or not\n     * @param string     $sql_query_for_bookmark the sql query to be stored as bookmark\n     * @param array|null $extra_data             extra data\n     * @param string     $message_to_show        message to show\n     * @param string     $message                message\n     * @param array|null $sql_data               sql data\n     * @param string     $goto                   goto page url\n     * @param string     $pmaThemeImage          uri of the PMA theme image\n     * @param string     $disp_query             display query\n     * @param string     $disp_message           display message\n     * @param string     $query_type             query type\n     * @param string     $sql_query              sql query\n     * @param array|null $selectedTables         array of table names selected from the\n     *                                           database structure page, for an action\n     *                                           like check table, optimize table,\n     *                                           analyze table or repair table\n     * @param string     $complete_query         complete query\n     *\n     * @return void\n     */\n    public function executeQueryAndSendQueryResponse($analyzed_sql_results,\n        $is_gotofile, $db, $table, $find_real_end, $sql_query_for_bookmark,\n        $extra_data, $message_to_show, $message, $sql_data, $goto, $pmaThemeImage,\n        $disp_query, $disp_message, $query_type, $sql_query, $selectedTables,\n        $complete_query\n    ) {\n        if ($analyzed_sql_results == null) {\n            // Parse and analyze the query\n            list(\n                $analyzed_sql_results,\n                $db,\n                $table_from_sql\n            ) = ParseAnalyze::sqlQuery($sql_query, $db);\n            // @todo: possibly refactor\n            extract($analyzed_sql_results);\n\n            if ($table != $table_from_sql && !empty($table_from_sql)) {\n                $table = $table_from_sql;\n            }\n        }\n\n        $html_output = $this->executeQueryAndGetQueryResponse(\n            $analyzed_sql_results, // analyzed_sql_results\n            $is_gotofile, // is_gotofile\n            $db, // db\n            $table, // table\n            $find_real_end, // find_real_end\n            $sql_query_for_bookmark, // sql_query_for_bookmark\n            $extra_data, // extra_data\n            $message_to_show, // message_to_show\n            $message, // message\n            $sql_data, // sql_data\n            $goto, // goto\n            $pmaThemeImage, // pmaThemeImage\n            $disp_query, // disp_query\n            $disp_message, // disp_message\n            $query_type, // query_type\n            $sql_query, // sql_query\n            $selectedTables, // selectedTables\n            $complete_query // complete_query\n        );\n\n        $response = Response::getInstance();\n        $response->addHTML($html_output);\n    }\n\n    /**\n     * Function to execute the query and send the response\n     *\n     * @param array      $analyzed_sql_results   analysed sql results\n     * @param bool       $is_gotofile            whether goto file or not\n     * @param string     $db                     current database\n     * @param string     $table                  current table\n     * @param bool|null  $find_real_end          whether to find real end or not\n     * @param string     $sql_query_for_bookmark the sql query to be stored as bookmark\n     * @param array|null $extra_data             extra data\n     * @param string     $message_to_show        message to show\n     * @param string     $message                message\n     * @param array|null $sql_data               sql data\n     * @param string     $goto                   goto page url\n     * @param string     $pmaThemeImage          uri of the PMA theme image\n     * @param string     $disp_query             display query\n     * @param string     $disp_message           display message\n     * @param string     $query_type             query type\n     * @param string     $sql_query              sql query\n     * @param array|null $selectedTables         array of table names selected from the\n     *                                           database structure page, for an action\n     *                                           like check table, optimize table,\n     *                                           analyze table or repair table\n     * @param string     $complete_query         complete query\n     *\n     * @return string html\n     */\n    public function executeQueryAndGetQueryResponse(array $analyzed_sql_results,\n        $is_gotofile, $db, $table, $find_real_end, $sql_query_for_bookmark,\n        $extra_data, $message_to_show, $message, $sql_data, $goto, $pmaThemeImage,\n        $disp_query, $disp_message, $query_type, $sql_query, $selectedTables,\n        $complete_query\n    ) {\n        // Handle disable/enable foreign key checks\n        $default_fk_check = Util::handleDisableFKCheckInit();\n\n        // Handle remembered sorting order, only for single table query.\n        // Handling is not required when it's a union query\n        // (the parser never sets the 'union' key to 0).\n        // Handling is also not required if we came from the \"Sort by key\"\n        // drop-down.\n        if (! empty($analyzed_sql_results)\n            && $this->isRememberSortingOrder($analyzed_sql_results)\n            && empty($analyzed_sql_results['union'])\n            && ! isset($_REQUEST['sort_by_key'])\n        ) {\n            if (! isset($_SESSION['sql_from_query_box'])) {\n                $this->handleSortOrder($db, $table, $analyzed_sql_results, $sql_query);\n            } else {\n                unset($_SESSION['sql_from_query_box']);\n            }\n\n        }\n\n        $displayResultsObject = new DisplayResults(\n            $GLOBALS['db'], $GLOBALS['table'], $goto, $sql_query\n        );\n        $displayResultsObject->setConfigParamsForDisplayTable();\n\n        // assign default full_sql_query\n        $full_sql_query = $sql_query;\n\n        // Do append a \"LIMIT\" clause?\n        if ($this->isAppendLimitClause($analyzed_sql_results)) {\n            $full_sql_query = $this->getSqlWithLimitClause($analyzed_sql_results);\n        }\n\n        $GLOBALS['reload'] = $this->hasCurrentDbChanged($db);\n        $GLOBALS['dbi']->selectDb($db);\n\n        // Execute the query\n        list($result, $num_rows, $unlim_num_rows, $profiling_results, $extra_data)\n            = $this->executeTheQuery(\n                $analyzed_sql_results,\n                $full_sql_query,\n                $is_gotofile,\n                $db,\n                $table,\n                isset($find_real_end) ? $find_real_end : null,\n                isset($sql_query_for_bookmark) ? $sql_query_for_bookmark : null,\n                isset($extra_data) ? $extra_data : null\n            );\n\n        $operations = new Operations();\n        $warning_messages = $operations->getWarningMessagesArray();\n\n        // No rows returned -> move back to the calling page\n        if ((0 == $num_rows && 0 == $unlim_num_rows)\n            || $analyzed_sql_results['is_affected']\n        ) {\n            $html_output = $this->getQueryResponseForNoResultsReturned(\n                $analyzed_sql_results, $db, $table,\n                isset($message_to_show) ? $message_to_show : null,\n                $num_rows, $displayResultsObject, $extra_data,\n                $pmaThemeImage, isset($result) ? $result : null,\n                $sql_query, isset($complete_query) ? $complete_query : null\n            );\n        } else {\n            // At least one row is returned -> displays a table with results\n            $html_output = $this->getQueryResponseForResultsReturned(\n                isset($result) ? $result : null,\n                $analyzed_sql_results,\n                $db,\n                $table,\n                isset($message) ? $message : null,\n                isset($sql_data) ? $sql_data : null,\n                $displayResultsObject,\n                $pmaThemeImage,\n                $unlim_num_rows,\n                $num_rows,\n                isset($disp_query) ? $disp_query : null,\n                isset($disp_message) ? $disp_message : null,\n                $profiling_results,\n                isset($query_type) ? $query_type : null,\n                isset($selectedTables) ? $selectedTables : null,\n                $sql_query,\n                isset($complete_query) ? $complete_query : null\n            );\n        }\n\n        // Handle disable/enable foreign key checks\n        Util::handleDisableFKCheckCleanup($default_fk_check);\n\n        foreach ($warning_messages as $warning) {\n            $message = Message::notice(Message::sanitize($warning));\n            $html_output .= $message->getDisplay();\n        }\n\n        return $html_output;\n    }\n\n    /**\n     * Function to define pos to display a row\n     *\n     * @param int $number_of_line Number of the line to display\n     * @param int $max_rows       Number of rows by page\n     *\n     * @return int Start position to display the line\n     */\n    private function getStartPosToDisplayRow($number_of_line, $max_rows = null)\n    {\n        if (null === $max_rows) {\n            $max_rows = $_SESSION['tmpval']['max_rows'];\n        }\n\n        return @((ceil($number_of_line / $max_rows) - 1) * $max_rows);\n    }\n\n    /**\n     * Function to calculate new pos if pos is higher than number of rows\n     * of displayed table\n     *\n     * @param string   $db    Database name\n     * @param string   $table Table name\n     * @param int|null $pos   Initial position\n     *\n     * @return int Number of pos to display last page\n     */\n    public function calculatePosForLastPage($db, $table, $pos)\n    {\n        if (null === $pos) {\n            $pos = $_SESSION['tmpval']['pos'];\n        }\n\n        $_table = new Table($table, $db);\n        $unlim_num_rows = $_table->countRecords(true);\n        //If position is higher than number of rows\n        if ($unlim_num_rows <= $pos && 0 != $pos) {\n            $pos = $this->getStartPosToDisplayRow($unlim_num_rows);\n        }\n\n        return $pos;\n    }\n}\n"], "filenames": ["ChangeLog", "libraries/classes/Sql.php"], "buggy_code_start_loc": [22, 2260], "buggy_code_end_loc": [22, 2261], "fixing_code_start_loc": [23, 2260], "fixing_code_end_loc": [24, 2261], "type": "CWE-79", "message": "An issue was discovered in phpMyAdmin before 4.8.3. A Cross-Site Scripting vulnerability has been found where an attacker can use a crafted file to manipulate an authenticated user who loads that file through the import feature.", "other": {"cve": {"id": "CVE-2018-15605", "sourceIdentifier": "cve@mitre.org", "published": "2018-08-24T19:29:02.067", "lastModified": "2018-10-26T01:11:30.397", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in phpMyAdmin before 4.8.3. A Cross-Site Scripting vulnerability has been found where an attacker can use a crafted file to manipulate an authenticated user who loads that file through the import feature."}, {"lang": "es", "value": "Se ha descubierto un problema en versiones anteriores a la 4.8.3 de phpMyAdmin. Se ha encontrado una vulnerabilidad de Cross-Site Scripting (XSS) en la que un atacante puede emplear un archivo manipulado para manipular un usuario autenticado que cargue ese archivo mediante la caracter\u00edstica de importaci\u00f3n."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.8.3", "matchCriteriaId": "76F2056A-4EBA-4380-9CEA-1EB18359929A"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/105168", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securitytracker.com/id/1041548", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/00d90b3ae415b31338f76263359467a9fbebd0a1", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.phpmyadmin.net/security/PMASA-2018-5/", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/00d90b3ae415b31338f76263359467a9fbebd0a1"}}