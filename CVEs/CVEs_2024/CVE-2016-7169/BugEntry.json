{"buggy_code": ["<?php\n/**\n * Upgrade API: File_Upload_Upgrader class\n *\n * @package WordPress\n * @subpackage Upgrader\n * @since 4.6.0\n */\n\n/**\n * Core class used for handling file uploads.\n *\n * This class handles the upload process and passes it as if it's a local file\n * to the Upgrade/Installer functions.\n *\n * @since 2.8.0\n * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader.php.\n */\nclass File_Upload_Upgrader {\n\n\t/**\n\t * The full path to the file package.\n\t *\n\t * @since 2.8.0\n\t * @access public\n\t * @var string $package\n\t */\n\tpublic $package;\n\n\t/**\n\t * The name of the file.\n\t *\n\t * @since 2.8.0\n\t * @access public\n\t * @var string $filename\n\t */\n\tpublic $filename;\n\n\t/**\n\t * The ID of the attachment post for this file.\n\t *\n\t * @since 3.3.0\n\t * @access public\n\t * @var int $id\n\t */\n\tpublic $id = 0;\n\n\t/**\n\t * Construct the upgrader for a form.\n\t *\n\t * @since 2.8.0\n\t * @access public\n\t *\n\t * @param string $form      The name of the form the file was uploaded from.\n\t * @param string $urlholder The name of the `GET` parameter that holds the filename.\n\t */\n\tpublic function __construct( $form, $urlholder ) {\n\n\t\tif ( empty($_FILES[$form]['name']) && empty($_GET[$urlholder]) )\n\t\t\twp_die(__('Please select a file'));\n\n\t\t//Handle a newly uploaded file, Else assume it's already been uploaded\n\t\tif ( ! empty($_FILES) ) {\n\t\t\t$overrides = array( 'test_form' => false, 'test_type' => false );\n\t\t\t$file = wp_handle_upload( $_FILES[$form], $overrides );\n\n\t\t\tif ( isset( $file['error'] ) )\n\t\t\t\twp_die( $file['error'] );\n\n\t\t\t$this->filename = $_FILES[$form]['name'];\n\t\t\t$this->package = $file['file'];\n\n\t\t\t// Construct the object array\n\t\t\t$object = array(\n\t\t\t\t'post_title' => $this->filename,\n\t\t\t\t'post_content' => $file['url'],\n\t\t\t\t'post_mime_type' => $file['type'],\n\t\t\t\t'guid' => $file['url'],\n\t\t\t\t'context' => 'upgrader',\n\t\t\t\t'post_status' => 'private'\n\t\t\t);\n\n\t\t\t// Save the data.\n\t\t\t$this->id = wp_insert_attachment( $object, $file['file'] );\n\n\t\t\t// Schedule a cleanup for 2 hours from now in case of failed install.\n\t\t\twp_schedule_single_event( time() + 2 * HOUR_IN_SECONDS, 'upgrader_scheduled_cleanup', array( $this->id ) );\n\n\t\t} elseif ( is_numeric( $_GET[$urlholder] ) ) {\n\t\t\t// Numeric Package = previously uploaded file, see above.\n\t\t\t$this->id = (int) $_GET[$urlholder];\n\t\t\t$attachment = get_post( $this->id );\n\t\t\tif ( empty($attachment) )\n\t\t\t\twp_die(__('Please select a file'));\n\n\t\t\t$this->filename = $attachment->post_title;\n\t\t\t$this->package = get_attached_file( $attachment->ID );\n\t\t} else {\n\t\t\t// Else, It's set to something, Back compat for plugins using the old (pre-3.3) File_Uploader handler.\n\t\t\tif ( ! ( ( $uploads = wp_upload_dir() ) && false === $uploads['error'] ) )\n\t\t\t\twp_die( $uploads['error'] );\n\n\t\t\t$this->filename = $_GET[$urlholder];\n\t\t\t$this->package = $uploads['basedir'] . '/' . $this->filename;\n\t\t}\n\t}\n\n\t/**\n\t * Delete the attachment/uploaded file.\n\t *\n\t * @since 3.2.2\n\t * @access public\n\t *\n\t * @return bool Whether the cleanup was successful.\n\t */\n\tpublic function cleanup() {\n\t\tif ( $this->id )\n\t\t\twp_delete_attachment( $this->id );\n\n\t\telseif ( file_exists( $this->package ) )\n\t\t\treturn @unlink( $this->package );\n\n\t\treturn true;\n\t}\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.7-alpha-38523';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 37965;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4401-20160726';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "fixing_code": ["<?php\n/**\n * Upgrade API: File_Upload_Upgrader class\n *\n * @package WordPress\n * @subpackage Upgrader\n * @since 4.6.0\n */\n\n/**\n * Core class used for handling file uploads.\n *\n * This class handles the upload process and passes it as if it's a local file\n * to the Upgrade/Installer functions.\n *\n * @since 2.8.0\n * @since 4.6.0 Moved to its own file from wp-admin/includes/class-wp-upgrader.php.\n */\nclass File_Upload_Upgrader {\n\n\t/**\n\t * The full path to the file package.\n\t *\n\t * @since 2.8.0\n\t * @access public\n\t * @var string $package\n\t */\n\tpublic $package;\n\n\t/**\n\t * The name of the file.\n\t *\n\t * @since 2.8.0\n\t * @access public\n\t * @var string $filename\n\t */\n\tpublic $filename;\n\n\t/**\n\t * The ID of the attachment post for this file.\n\t *\n\t * @since 3.3.0\n\t * @access public\n\t * @var int $id\n\t */\n\tpublic $id = 0;\n\n\t/**\n\t * Construct the upgrader for a form.\n\t *\n\t * @since 2.8.0\n\t * @access public\n\t *\n\t * @param string $form      The name of the form the file was uploaded from.\n\t * @param string $urlholder The name of the `GET` parameter that holds the filename.\n\t */\n\tpublic function __construct( $form, $urlholder ) {\n\n\t\tif ( empty($_FILES[$form]['name']) && empty($_GET[$urlholder]) )\n\t\t\twp_die(__('Please select a file'));\n\n\t\t//Handle a newly uploaded file, Else assume it's already been uploaded\n\t\tif ( ! empty($_FILES) ) {\n\t\t\t$overrides = array( 'test_form' => false, 'test_type' => false );\n\t\t\t$file = wp_handle_upload( $_FILES[$form], $overrides );\n\n\t\t\tif ( isset( $file['error'] ) )\n\t\t\t\twp_die( $file['error'] );\n\n\t\t\t$this->filename = $_FILES[$form]['name'];\n\t\t\t$this->package = $file['file'];\n\n\t\t\t// Construct the object array\n\t\t\t$object = array(\n\t\t\t\t'post_title' => $this->filename,\n\t\t\t\t'post_content' => $file['url'],\n\t\t\t\t'post_mime_type' => $file['type'],\n\t\t\t\t'guid' => $file['url'],\n\t\t\t\t'context' => 'upgrader',\n\t\t\t\t'post_status' => 'private'\n\t\t\t);\n\n\t\t\t// Save the data.\n\t\t\t$this->id = wp_insert_attachment( $object, $file['file'] );\n\n\t\t\t// Schedule a cleanup for 2 hours from now in case of failed install.\n\t\t\twp_schedule_single_event( time() + 2 * HOUR_IN_SECONDS, 'upgrader_scheduled_cleanup', array( $this->id ) );\n\n\t\t} elseif ( is_numeric( $_GET[$urlholder] ) ) {\n\t\t\t// Numeric Package = previously uploaded file, see above.\n\t\t\t$this->id = (int) $_GET[$urlholder];\n\t\t\t$attachment = get_post( $this->id );\n\t\t\tif ( empty($attachment) )\n\t\t\t\twp_die(__('Please select a file'));\n\n\t\t\t$this->filename = $attachment->post_title;\n\t\t\t$this->package = get_attached_file( $attachment->ID );\n\t\t} else {\n\t\t\t// Else, It's set to something, Back compat for plugins using the old (pre-3.3) File_Uploader handler.\n\t\t\tif ( ! ( ( $uploads = wp_upload_dir() ) && false === $uploads['error'] ) )\n\t\t\t\twp_die( $uploads['error'] );\n\n\t\t\t$this->filename = sanitize_file_name( $_GET[ $urlholder ] );\n\t\t\t$this->package = $uploads['basedir'] . '/' . $this->filename;\n\n\t\t\tif ( 0 !== strpos( realpath( $this->package ), realpath( $uploads['basedir'] ) ) ) {\n\t\t\t\twp_die( __( 'Please select a file' ) );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Delete the attachment/uploaded file.\n\t *\n\t * @since 3.2.2\n\t * @access public\n\t *\n\t * @return bool Whether the cleanup was successful.\n\t */\n\tpublic function cleanup() {\n\t\tif ( $this->id )\n\t\t\twp_delete_attachment( $this->id );\n\n\t\telseif ( file_exists( $this->package ) )\n\t\t\treturn @unlink( $this->package );\n\n\t\treturn true;\n\t}\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.7-alpha-38524';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 37965;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4401-20160726';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "filenames": ["wp-admin/includes/class-file-upload-upgrader.php", "wp-includes/version.php"], "buggy_code_start_loc": [103, 7], "buggy_code_end_loc": [104, 8], "fixing_code_start_loc": [103, 7], "fixing_code_end_loc": [109, 8], "type": "CWE-22", "message": "Directory traversal vulnerability in the File_Upload_Upgrader class in wp-admin/includes/class-file-upload-upgrader.php in the upgrade package uploader in WordPress before 4.6.1 allows remote authenticated users to access arbitrary files via a crafted urlholder parameter.", "other": {"cve": {"id": "CVE-2016-7169", "sourceIdentifier": "cve@mitre.org", "published": "2017-01-05T02:59:03.887", "lastModified": "2017-11-04T01:29:22.943", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Directory traversal vulnerability in the File_Upload_Upgrader class in wp-admin/includes/class-file-upload-upgrader.php in the upgrade package uploader in WordPress before 4.6.1 allows remote authenticated users to access arbitrary files via a crafted urlholder parameter."}, {"lang": "es", "value": "Vulnerabilidad de salto de directorio en la clase File_Upload_Upgrader en wp-admin/includes/class-file-upload-upgrader.php en el cargador del paquete de actualizaci\u00f3n en WordPress en versiones anteriores a 4.6.1 permite a usuarios remotos autenticados acceder a archivos arbitrarios a trav\u00e9s de un par\u00e1metro urlholder manipulado."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.6", "matchCriteriaId": "3F01FC84-BA31-4C2A-AB81-51A9323EC99A"}]}]}], "references": [{"url": "http://www.debian.org/security/2016/dsa-3681", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/bid/92841", "source": "cve@mitre.org"}, {"url": "https://codex.wordpress.org/Version_4.6.1", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/WordPress/WordPress/commit/54720a14d85bc1197ded7cb09bd3ea790caa0b6e", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://wordpress.org/news/2016/09/wordpress-4-6-1-security-and-maintenance-release/", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/8616", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/54720a14d85bc1197ded7cb09bd3ea790caa0b6e"}}