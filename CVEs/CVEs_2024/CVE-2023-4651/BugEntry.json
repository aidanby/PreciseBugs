{"buggy_code": ["<?php\n\nclass cmsUploader {\n\n    private $allow_remote = false;\n    private $file_name = '';\n    private $user_id = 0;\n    private $site_cfg = null;\n\n    private $last_error = null;\n    private $upload_errors = [];\n\n    private $allowed_mime = false;\n    private $allowed_mime_ext = [];\n    private $mime_types = [];\n\n    public function __construct($user_id = null) {\n\n        $this->mime_types = (new cmsConfigs('mimetypes.php'))->getAll();\n\n        $this->upload_errors = [\n            UPLOAD_ERR_OK         => LANG_UPLOAD_ERR_OK,\n            UPLOAD_ERR_INI_SIZE   => sprintf(LANG_UPLOAD_ERR_INI_SIZE, $this->getMaxUploadSize()),\n            UPLOAD_ERR_FORM_SIZE  => LANG_UPLOAD_ERR_FORM_SIZE,\n            UPLOAD_ERR_PARTIAL    => LANG_UPLOAD_ERR_PARTIAL,\n            UPLOAD_ERR_NO_FILE    => LANG_UPLOAD_ERR_NO_FILE,\n            UPLOAD_ERR_NO_TMP_DIR => LANG_UPLOAD_ERR_NO_TMP_DIR,\n            UPLOAD_ERR_CANT_WRITE => LANG_UPLOAD_ERR_CANT_WRITE,\n            UPLOAD_ERR_EXTENSION  => LANG_UPLOAD_ERR_EXTENSION\n        ];\n\n        $this->user_id  = $user_id ?? cmsUser::getInstance()->id;\n        $this->site_cfg = cmsConfig::getInstance();\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0440\u0430\u0437\u0440\u0435\u0448\u0451\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0444\u0430\u0439\u043b\u043e\u0432\n     *\n     * @param array $types\n     * @return $this\n     */\n    public function setAllowedMime($types) {\n\n        $this->allowed_mime = $types;\n\n        foreach ($this->allowed_mime as $mime) {\n            if (isset($this->mime_types[$mime])) {\n                $this->allowed_mime_ext[] = $this->mime_types[$mime];\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0440\u0430\u0437\u0440\u0435\u0448\u0451\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u043e \u0438\u0445 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044e\n     *\n     * @param array|string $allowed_ext\n     * @return $this\n     */\n    private function setAllowedMimeByExt($allowed_ext) {\n\n        // \u0415\u0441\u043b\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u0440\u0430\u043d\u0435\u0435, \u0442\u043e \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u0435\u043c\n        if ($this->allowed_mime) {\n            return $this;\n        }\n\n        $this->allowed_mime = [];\n\n        if (!is_array($allowed_ext)) {\n            $allowed_ext = explode(',', (string) $allowed_ext);\n        }\n\n        foreach ($allowed_ext as $aext) {\n\n            $aext = mb_strtolower(trim(trim((string) $aext, '., ')));\n\n            if (empty($aext)) {\n                continue;\n            }\n\n            $mime_key = array_search($aext, $this->mime_types, true);\n\n            if(!$mime_key){\n                continue;\n            }\n\n            $this->allowed_mime[] = $mime_key;\n\n            $this->allowed_mime_ext[] = $aext;\n        }\n\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430\n     *\n     * @param string $name\n     * @return $this\n     */\n    public function setFileName($name) {\n\n        $this->file_name = mb_substr(trim($name), 0, 64);\n\n        return $this;\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n     *\n     * @param int $id\n     * @return $this\n     */\n    public function setUserId($id) {\n\n        $this->user_id = $id;\n\n        return $this;\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u043e\u0448\u0438\u0431\u043a\u0443\n     *\n     * @return ?string\n     */\n    public function getLastError() {\n        return $this->last_error;\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432,\n     * \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u043c \u0432 php.ini\n     *\n     * @return string\n     */\n    public function getMaxUploadSize() {\n\n        // \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043f\u043e \u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043c\u0435\u043d\u044c\u0448\u0435, \u0442.\u043a. \u0435\u0441\u043b\u0438 post_max_size \u043c\u0435\u043d\u044c\u0448\u0435 upload_max_filesize,\n        // \u0442\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c post_max_size\n        $max_size = min(files_convert_bytes(@ini_get('upload_max_filesize')), files_convert_bytes(@ini_get('post_max_size')));\n\n        return files_format_bytes($max_size);\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d \u043b\u0438 \u0444\u0430\u0439\u043b \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u0435\u0433\u043e \u0432 $_FILES\n     *\n     * @param string $name \u0418\u043c\u044f \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 $_FILES\n     * @return boolean\n     */\n    public function isUploaded($name) {\n\n        if (!isset($_FILES[$name])) {\n            return false;\n        }\n\n        if (empty($_FILES[$name]['size'])) {\n\n            if (isset($_FILES[$name]['error'])) {\n                if (isset($this->upload_errors[$_FILES[$name]['error']]) && $this->upload_errors[$_FILES[$name]['error']] !== UPLOAD_ERR_OK) {\n                    $this->last_error = $this->upload_errors[$_FILES[$name]['error']];\n                }\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d \u043b\u0438 \u0444\u0430\u0439\u043b \u0447\u0435\u0440\u0435\u0437 XHR\n     *\n     * @param string $name \u0418\u043c\u044f \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 $_GET\n     * @return boolean\n     */\n    public function isUploadedXHR($name) {\n        return !empty($_GET['qqfile']);\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u043d\u0430\u0434\u043e \u043b\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0444\u0430\u0439\u043b \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435\n     *\n     * @param string $name \u0418\u043c\u044f \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 $_POST\n     * @return boolean\n     */\n    public function isUploadedFromLink($name) {\n        return $this->allow_remote && !empty($_POST[$name]);\n    }\n\n    /**\n     * \u0420\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435\n     *\n     * @return $this\n     */\n    public function enableRemoteUpload() {\n\n        $this->allow_remote = true;\n\n        return $this;\n    }\n\n    /**\n     * \u0417\u0430\u043f\u0440\u0435\u0449\u0430\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435\n     *\n     * @return $this\n     */\n    public function disableRemoteUpload() {\n\n        $this->allow_remote = false;\n\n        return $this;\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430 \u0441 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\u043c\n     * \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044f \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043e\u0434\u043d\u043e\u0438\u043c\u0451\u043d\u043d\u043e\u0433\u043e\n     *\n     * @param string $path \u041f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u0430\n     * @param string $file_ext \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n     * @param ?string $file_name \u0418\u043c\u044f \u0444\u0430\u0439\u043b\u0430\n     * @return string\n     */\n    private function getFileName($path, $file_ext, $file_name = null) {\n\n        if (!$file_name) {\n            if ($this->file_name) {\n                $file_name = str_replace('.' . $file_ext, '', files_sanitize_name($this->file_name . '.' . $file_ext));\n            } else {\n                $file_name = substr(md5(microtime(true)), 0, 8);\n            }\n        }\n\n        if (file_exists($path . $file_name . '.' . $file_ext)) {\n            return $this->getFileName($path, $file_ext, $file_name . '_' . md5(microtime(true)));\n        }\n\n        return $file_name . '.' . $file_ext;\n    }\n\n    /**\n     * \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\n     *\n     * @param string $filename \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044f \u0441 \u0444\u0430\u0439\u043b\u043e\u043c\n     * @param string $allowed_ext \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0445 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0439 (\u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e)\n     * @param string $allowed_size \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445)\n     * @param string $destination \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (\u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0443\u0442\u0438 upload)\n     * @return array\n     */\n    public function upload($filename, $allowed_ext = false, $allowed_size = 0, $destination = false) {\n\n        // \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f\n        if ($allowed_ext) {\n            $this->setAllowedMimeByExt($allowed_ext);\n        }\n\n        if ($this->isUploadedFromLink($filename)) {\n            return $this->uploadFromLink($filename, $allowed_size, $destination);\n        }\n\n        if ($this->isUploadedXHR($filename)) {\n            return $this->uploadXHR($filename, $allowed_size, $destination);\n        }\n\n        if ($this->isUploaded($filename)) {\n            return $this->uploadForm($filename, $allowed_size, $destination);\n        }\n\n        $last_error = $this->getLastError();\n\n        return [\n            'success' => false,\n            'error'   => ($last_error ? $last_error : LANG_UPLOAD_ERR_NO_FILE)\n        ];\n    }\n\n//============================================================================//\n//============================================================================//\n\n    /**\n     * \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 \u0447\u0435\u0440\u0435\u0437 input \u0442\u0438\u043f\u0430 file\n     *\n     * @param string $filename \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044f \u0441 \u0444\u0430\u0439\u043b\u043e\u043c \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 $_FILES\n     * @param int $allowed_size \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445)\n     * @param string $destination \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (\u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0443\u0442\u0438 upload)\n     * @return array\n     */\n    public function uploadForm($filename, $allowed_size = 0, $destination = false) {\n\n        $source     = $_FILES[$filename]['tmp_name'];\n        $error_code = $_FILES[$filename]['error'];\n        $dest_size  = (int) $_FILES[$filename]['size'];\n        $dest_name  = files_sanitize_name($_FILES[$filename]['name']);\n\n        $file = new cmsUploadfile($source, $this->allowed_mime);\n\n        if (!$file->isAllowed()) {\n            return [\n                'error'   => LANG_UPLOAD_ERR_MIME . '. ' . sprintf(LANG_PARSER_FILE_EXTS_FIELD_HINT, implode(', ', $this->allowed_mime_ext)),\n                'success' => false,\n                'name'    => $dest_name\n            ];\n        }\n\n        if ($allowed_size) {\n            if ($dest_size > $allowed_size) {\n                return [\n                    'error'   => sprintf(LANG_UPLOAD_ERR_INI_SIZE, files_format_bytes($allowed_size)),\n                    'success' => false,\n                    'name'    => $dest_name\n                ];\n            }\n        }\n\n        $dest_ext = $file->getExt();\n\n        if (!$destination) {\n            $destination = $this->getUploadDestinationDirectory();\n        } else {\n            $destination = $this->site_cfg->upload_path . $destination . '/';\n        }\n\n        if (!$this->file_name) {\n            $this->file_name = pathinfo($dest_name, PATHINFO_FILENAME);\n        }\n\n        $destination .= $this->getFileName($destination, $dest_ext);\n\n        return $this->moveUploadedFile($source, $destination, $error_code, $dest_name, $dest_size);\n    }\n\n    /**\n     * \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435\n     *\n     * @param string $post_filename \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044f \u0441 \u0444\u0430\u0439\u043b\u043e\u043c \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 $_POST\n     * @param int $allowed_size \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445)\n     * @param string $destination \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (\u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0443\u0442\u0438 upload)\n     * @return array\n     */\n    public function uploadFromLink($post_filename, $allowed_size = 0, $destination = false) {\n\n        $link = $file_name = trim($_POST[$post_filename]);\n\n        // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0440\u0435\u0434\u0438\u0440\u0435\u043a\u0442 \u0438 \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430\n        $curl = curl_init();\n        curl_setopt($curl, CURLOPT_URL, $link);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_HEADER, true);\n        curl_setopt($curl, CURLOPT_NOBODY, true);\n        curl_setopt($curl, CURLOPT_TIMEOUT, 5);\n        $headers = curl_exec($curl);\n        curl_close($curl);\n\n        $matches = [];\n        if (preg_match(\"/(?:Location:|URI:)([^\\n]+)*/is\", $headers, $matches)) {\n\n            $url = trim($matches[1]);\n\n            if (strpos($url, 'http') !== 0) {\n                $url_data = parse_url($link);\n                $link     = $url_data['scheme'] . '://' . $url_data['host'] . $url;\n            } else {\n                $link = $url;\n            }\n\n            $_POST[$post_filename] = $link;\n\n            return $this->uploadFromLink($post_filename, $allowed_size, $destination);\n        }\n\n        if (preg_match('#filename=\"([^\"]+)#uis', $headers, $matches)) {\n            $file_name = trim($matches[1]);\n        }\n\n        $dest_name = files_sanitize_name($file_name);\n\n        $file_bin = file_get_contents_from_url($link);\n\n        if (!$file_bin) {\n            return [\n                'success' => false,\n                'error'   => LANG_UPLOAD_ERR_NO_FILE,\n                'name'    => $dest_name,\n                'path'    => ''\n            ];\n        }\n\n        return $this->saveFileFromString($file_bin, $allowed_size, $destination, $dest_name);\n    }\n\n    /**\n     * \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0444\u0430\u0439\u043b \u0438\u0437 php://input \u0432 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e  \u0438 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0438\n     *\n     * @param string $filename \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044f \u0441 \u0444\u0430\u0439\u043b\u043e\u043c \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 $_GET\n     * @param int $allowed_size \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445)\n     * @param string $destination \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (\u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0443\u0442\u0438 upload)\n     * @return array\n     */\n    public function uploadXHR($filename, $allowed_size = 0, $destination = false) {\n\n        $dest_name = files_sanitize_name($_GET['qqfile']);\n\n        $file_bin = file_get_contents('php://input');\n\n        if (!$file_bin) {\n            return [\n                'success' => false,\n                'error'   => LANG_UPLOAD_ERR_NO_FILE,\n                'name'    => $dest_name,\n                'path'    => ''\n            ];\n        }\n\n        return $this->saveFileFromString($file_bin, $allowed_size, $destination, $dest_name);\n    }\n\n    /**\n     * \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0444\u0430\u0439\u043b \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\n     *\n     * @param string $file_bin\n     * @param int $allowed_size \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445)\n     * @param string $destination \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (\u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0443\u0442\u0438 upload)\n     * @param string $dest_name \u0418\u043c\u044f \u0444\u0430\u0439\u043b\u0430\n     * @return array\n     */\n    private function saveFileFromString($file_bin, $allowed_size, $destination, $dest_name) {\n\n        $file = new cmsUploadfile($file_bin, $this->allowed_mime);\n\n        if (!$file->isAllowed()) {\n            return [\n                'error'   => LANG_UPLOAD_ERR_MIME . '. ' . sprintf(LANG_PARSER_FILE_EXTS_FIELD_HINT, implode(', ', $this->allowed_mime_ext)),\n                'success' => false,\n                'name'    => $dest_name\n            ];\n        }\n\n        $dest_ext = $file->getExt();\n\n        $file_size = strlen($file_bin);\n\n        if ($allowed_size) {\n            if ($file_size > $allowed_size) {\n                return [\n                    'error'   => sprintf(LANG_UPLOAD_ERR_INI_SIZE, files_format_bytes($allowed_size)),\n                    'success' => false,\n                    'name'    => $dest_name\n                ];\n            }\n        }\n\n        if (!$destination) {\n            $destination = $this->getUploadDestinationDirectory();\n        } else {\n            $destination = $this->site_cfg->upload_path . $destination . '/';\n        }\n\n        $destination .= $this->getFileName($destination, $dest_ext);\n\n        if (!is_writable(dirname($destination))) {\n            return [\n                'success' => false,\n                'error'   => LANG_UPLOAD_ERR_CANT_WRITE,\n                'name'    => $dest_name,\n                'path'    => ''\n            ];\n        }\n\n        if(file_put_contents($destination, $file_bin) === false){\n            return [\n                'success' => false,\n                'error'   => LANG_UPLOAD_ERR_CANT_WRITE,\n                'name'    => $dest_name,\n                'path'    => ''\n            ];\n        }\n\n        return [\n            'success' => true,\n            'path'    => $destination,\n            'url'     => str_replace($this->site_cfg->upload_path, '', $destination),\n            'name'    => basename($destination),\n            'size'    => $file_size\n        ];\n    }\n\n    /**\n     * \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b \u0438\u0437 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0432 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u0438 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0438\n     *\n     * @param string $source\n     * @param string $destination\n     * @param int $errorCode\n     * @return array\n     */\n    private function moveUploadedFile($source, $destination, $errorCode, $orig_name = '', $orig_size = 0) {\n\n        if ($errorCode !== UPLOAD_ERR_OK && isset($this->upload_errors[$errorCode])) {\n\n            return [\n                'success' => false,\n                'error'   => $this->upload_errors[$errorCode],\n                'name'    => $orig_name,\n                'path'    => ''\n            ];\n        }\n\n        $upload_dir = dirname($destination);\n        if (!is_writable($upload_dir)) {\n            @chmod($upload_dir, 0777);\n        }\n\n        if (!is_writable($upload_dir)) {\n\n            return [\n                'success' => false,\n                'error'   => LANG_UPLOAD_ERR_CANT_WRITE,\n                'name'    => $orig_name,\n                'path'    => ''\n            ];\n        }\n\n        return [\n            'success' => @move_uploaded_file($source, $destination),\n            'path'    => $destination,\n            'url'     => str_replace($this->site_cfg->upload_path, '', $destination),\n            'name'    => basename($destination),\n            'size'    => $orig_size,\n            'error'   => $this->upload_errors[$errorCode]\n        ];\n    }\n\n    /**\n     * \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0444\u0430\u0439\u043b\n     * @param string $file_path\n     * @return boolean\n     */\n    public function remove($file_path) {\n        return files_delete_file($file_path, 2);\n    }\n\n    /**\n     * \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0434\u0435\u0440\u0435\u0432\u043e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0439 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0430\u0439\u043b\u0430\n     * @return string\n     */\n    public function getUploadDestinationDirectory() {\n        return files_get_upload_dir($this->user_id);\n    }\n\n}\n", "<?php\n/**\n * \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e\n *\n * @param string $directory_from \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c\n * @param string $directory_to \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438, \u043a\u0443\u0434\u0430 \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c\n * @return bool\n */\nfunction files_copy_directory($directory_from, $directory_to) {\n\n    if (!is_dir($directory_from)) {\n        return false;\n    }\n\n    if (!is_dir($directory_to)) {\n        mkdir($directory_to, 0755, true);\n    }\n\n    $items = new FilesystemIterator($directory_from);\n\n    foreach ($items as $item) {\n\n        $target = $directory_to.'/'.$item->getBasename();\n\n        if ($item->isDir()) {\n\n            if (!files_copy_directory($item->getPathname(), $target)) {\n                return false;\n            }\n        }\n        elseif (!copy($item->getPathname(), $target)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n/**\n * \u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e\n * @param string $directory\n * @param bool $is_clear \u0415\u0441\u043b\u0438 TRUE, \u0442\u043e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u043e\u0447\u0438\u0449\u0435\u043d\u0430, \u043d\u043e \u043d\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0430\n * @return bool\n */\nfunction files_remove_directory($directory, $is_clear=false){\n\n    if(substr($directory,-1) == '/'){\n        $directory = substr($directory,0,-1);\n    }\n\n    if(!file_exists($directory) || !is_dir($directory) || !is_readable($directory)){\n        return false;\n    }\n\n    $handle = opendir($directory);\n\n    while (false !== ($node = readdir($handle))){\n\n        if($node != '.' && $node != '..'){\n\n            $path = $directory.'/'.$node;\n\n            if(is_dir($path)){\n                if (!files_remove_directory($path)) { return false; }\n            } else {\n                if(!@unlink($path)) { return false; }\n            }\n\n        }\n\n    }\n\n    closedir($handle);\n\n    if ($is_clear == false){\n        if(!@rmdir($directory)){\n            return false;\n        }\n    }\n\n    return true;\n\n}\n\n/**\n * \u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e\n * @param string $directory\n * @return bool\n */\nfunction files_clear_directory($directory){\n    return files_remove_directory($directory, true);\n}\n\n/**\n * \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0444\u0430\u0439\u043b \u0438 \u0435\u0433\u043e \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438\n * @param string $file_path \u041e\u0442\u043d\u043e\u0441\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043b\u0438 \u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443\n * @param integer $delete_parent_dir \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n * @return boolean\n */\nfunction files_delete_file($file_path, $delete_parent_dir = 0) {\n\n    if(!is_file($file_path)){\n        $file_path = cmsConfig::get('upload_path') . $file_path;\n    }\n\n    $success = @unlink($file_path);\n\n    if($delete_parent_dir && $success){\n\n        $parent_dir = pathinfo($file_path, PATHINFO_DIRNAME);\n\n        for ($i = 1; $i <= $delete_parent_dir; $i++) {\n\n            if(!@rmdir($parent_dir)){ break; }\n\n            $parent_dir = pathinfo($parent_dir, PATHINFO_DIRNAME);\n\n        }\n\n    }\n\n    return $success;\n\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0435\u0440\u0435\u0432\u043e \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u043e\u0432 \u0438 \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0443\u0442\u0438 \u0432 \u0432\u0438\u0434\u0435\n * \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n * @param string $path\n * @return array\n */\nfunction files_tree_to_array($path){\n\n    $data = array();\n\n    $dir = new DirectoryIterator( $path );\n\n    foreach ( $dir as $node ){\n        if ( $node->isDir() && !$node->isDot() ){\n            $data[$node->getFilename()] = files_tree_to_array( $node->getPathname() );\n        } else if ( $node->isFile() ){\n            $data[] = $node->getFilename();\n        }\n    }\n\n    return $data;\n\n}\n\n/**\n * \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443, \u0443\u0431\u0438\u0440\u0430\u044f \u0432\u0441\u0435 \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044b.\n *\n * \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u0443\u0442\u044c\n *      /path/to/../folder\n * \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d \u0432\n *      /path/folder\n *\n * @param string $path\n * @return string\n */\nfunction files_normalize_path($path) {\n\n    $parts = explode('/', $path);\n    $safe  = array();\n\n    foreach ($parts as $idx => $part) {\n        if (empty($part) || ('.' == $part)) {\n            continue;\n        } elseif ('..' == $part) {\n            array_pop($safe);\n            continue;\n        } else {\n            $safe[] = $part;\n        }\n    }\n\n    $path = implode('/', $safe);\n    return $path;\n\n}\n\n/**\n * \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0432\u0438\u0434\u0430 \"8M\" \u0438\u043b\u0438 \"1024K\" \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445\n * \u041f\u043e\u043b\u0435\u0437\u043d\u043e \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 max_upload_size \u0438\u0437 php.ini\n *\n * @param string $value\n * @return int\n */\nfunction files_convert_bytes($value) {\n    if ( is_numeric( $value ) ) {\n        return $value;\n    } else {\n        $value_length = strlen( $value );\n        $qty = substr( $value, 0, $value_length - 1 );\n        $unit = strtolower( substr( $value, $value_length - 1 ) );\n        switch ( $unit ) {\n            case 'k':\n                $qty *= 1024;\n                break;\n            case 'm':\n                $qty *= 1048576;\n                break;\n            case 'g':\n                $qty *= 1073741824;\n                break;\n        }\n        return $qty;\n    }\n    return $value;\n}\n\n/**\n * \u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442 \u0431\u0430\u0439\u0442\u044b \u0432 \u0413\u0431, \u041c\u0431 \u0438\u043b\u0438 \u041a\u0431 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e + \u0435\u0434\u0438\u043d\u0438\u0446\u0443 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f\n * \u0432 \u0432\u0438\u0434\u0435 \u0435\u0434\u0438\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438\n * @param int $bytes\n * @return string\n */\nfunction files_format_bytes($bytes) {\n\n    $kb = 1024;\n    $mb = 1048576;\n    $gb = 1073741824;\n\n    if (round($bytes / $gb) > 0) {\n        return round(($bytes / $gb), 1, PHP_ROUND_HALF_UP). ' ' . LANG_GB;\n    }\n\n    if (round($bytes / $mb) > 0) {\n        return ceil($bytes / $mb) . ' ' . LANG_MB;\n    }\n\n    if (round($bytes / $kb) > 0) {\n        return ceil($bytes / $kb) . ' ' . LANG_KB;\n    }\n\n    return $bytes . ' ' . LANG_B;\n\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 32-\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u044c\u043d\u044b\u0439 \u0445\u044d\u0448, \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u043a ip \u0430\u0434\u0440\u0435\u0441\u0443\n * \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0437\u0430\u0449\u0438\u0442\u044b \u043e\u0442 \u0445\u043e\u0442\u043b\u0438\u043d\u043a\u0430\n *\n * @param string $file_path \u041f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443\n * @return string\n */\nfunction files_user_file_hash($file_path = ''){\n    return md5(cmsUser::getIp().md5($file_path.cmsConfig::get('root_path')));\n}\n\n/**\n * \u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430 \u043e\u0442 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\n *\n * @param string $filename \u0418\u043c\u044f \u0444\u0430\u0439\u043b\u0430\n * @param boolean $convert_slug \u0422\u0440\u0430\u043d\u0441\u043b\u0438\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c?\n * @return string\n */\nfunction files_sanitize_name($filename, $convert_slug = true){\n\n\t$path_parts = pathinfo($filename);\n    if($convert_slug){\n        $filename = lang_slug($path_parts['filename']) . ((isset($path_parts['extension']) ?  '.' . $path_parts['extension'] : ''));\n    } else {\n        $filename = trim(strip_tags($path_parts['filename']) . ((isset($path_parts['extension']) ?  '.' . $path_parts['extension'] : '')));\n    }\n    $filename = mb_strtolower($filename);\n    $filename = preg_replace(array('/[\\&]/', '/[\\@]/', '/[\\#]/'), array('-and-', '-at-', '-number-'), $filename);\n    $filename = str_replace(' ', '-', $filename);\n    $filename = str_replace('\\'', '', $filename);\n    $filename = preg_replace('/[^\\w\\-\\.]+/u', '', $filename);\n    $filename = preg_replace('/[\\-]+/', '-', $filename);\n\n\treturn $filename;\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442/\u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u043f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f\n *\n * @param integer $user_id\n * @return string\n */\nfunction files_get_upload_dir($user_id = 0) {\n\n    $dir_num_user = sprintf('%03d', intval($user_id/100));\n\n    $file_name   = md5(microtime(true));\n    $first_dir   = substr($file_name, 0, 1);\n    $second_dir  = substr($file_name, 1, 1);\n    $upload_path = cmsConfig::get('upload_path');\n\n    $dest_dir = $upload_path.\"{$dir_num_user}/u{$user_id}/{$first_dir}/{$second_dir}/\";\n\n    if(!is_dir($dest_dir)){\n        @mkdir($dest_dir, 0777, true);\n        @chmod($dest_dir, 0777);\n        @chmod(pathinfo($dest_dir, PATHINFO_DIRNAME), 0777);\n        @chmod($upload_path . \"{$dir_num_user}/u{$user_id}\", 0777);\n        @chmod($upload_path . \"{$dir_num_user}\", 0777);\n    }\n\n    return $dest_dir;\n\n}\n\n/**\n * \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 url\n * @param string $url URL, \u043e\u0442\u043a\u0443\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435\n * @param integer $timeout \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f\n * @param boolean $json_decode \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c JSON\n * @param array $params \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n * @return string\n */\nfunction file_get_contents_from_url($url, $timeout = 5, $json_decode = false, $params = []) {\n\n    if (!function_exists('curl_init')) {\n        return null;\n    }\n\n    $curl = curl_init();\n\n    if (strpos($url, 'https') === 0) {\n        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n    }\n    $headers = ['User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36 OPR/68.0.3618.173'];\n    if (!empty($params['cookie'])) {\n\n        $cookie = [];\n        foreach ($params['cookie'] as $k => $v) {\n            $cookie[] = $k . '=' . $v;\n        }\n\n        $headers[] = 'Cookie: ' . implode('; ', $cookie);\n        unset($params['cookie']);\n    }\n    if (!empty($params['proxy'])) {\n        curl_setopt($curl, CURLOPT_PROXY, $params['proxy']['host'] . ':' . $params['proxy']['port']);\n        curl_setopt($curl, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5);\n        unset($params['proxy']);\n    }\n    if (!empty($params)) {\n        foreach ($params as $key => $value) {\n            $headers[] = $key . ': ' . $value;\n        }\n    }\n    curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($curl, CURLOPT_URL, $url);\n    curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, $timeout);\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($curl, CURLOPT_HEADER, false);\n    curl_setopt($curl, CURLOPT_TIMEOUT, $timeout);\n    $data = curl_exec($curl);\n    curl_close($curl);\n\n    if ($data === false) {\n        return null;\n    }\n\n    if ($json_decode) {\n        return json_decode($data, true);\n    }\n\n    return $data;\n}\n\n/**\n * \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u043e \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b\n * @param string $url url \u0444\u0430\u0439\u043b\u0430\n * @param string $destination \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a\u0443\u0434\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0442\u044c \u0444\u0430\u0439\u043b\n * @return boolean\n */\nfunction file_save_from_url($url, $destination){\n\n    if (!function_exists('curl_init')){ return false; }\n\n    $dest_file = @fopen($destination, \"w\");\n\n    $curl = curl_init();\n    if(strpos($url, 'https') === 0){\n        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n    }\n    curl_setopt($curl, CURLOPT_URL, $url);\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($curl, CURLOPT_FILE, $dest_file);\n    curl_setopt($curl, CURLOPT_HEADER, false);\n    curl_exec($curl);\n    curl_close($curl);\n    fclose($dest_file);\n\n    return true;\n\n}\n/**\n * \u041d\u0430\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442 \u0432\u0430\u0442\u0442\u0435\u0440\u043c\u0430\u0440\u043a \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\n *\n * \u0423\u0421\u0422\u0410\u0420\u0415\u0412\u0428\u0410\u042f \u0424\u0423\u041d\u041a\u0426\u0418\u042f\n *\n * @param string $src_file \u041f\u0443\u0442\u044c (\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0430\u043f\u043a\u0438 upload) \u043a \u0444\u0430\u0439\u043b\u0443, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u043b\u043e\u0436\u0438\u0442\u044c \u0432\u0430\u0442\u0435\u0440\u043c\u0430\u0440\u043a\n * @param string $wm_file \u041f\u0443\u0442\u044c (\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0430\u043f\u043a\u0438 upload) \u043a \u0444\u0430\u0439\u043b\u0443 \u0432\u0430\u0442\u0435\u0440\u043c\u0430\u0440\u043a\u0430\n * @param string $wm_origin \u041f\u043e\u0437\u0438\u0446\u0438\u044f \u0432\u0430\u0442\u0435\u0440\u043c\u0430\u0440\u043a\u0430: top-left|top|top-right|left|center|right|bottom-left|bottom|bottom-right\n * @param int $wm_margin \u041e\u0442\u0441\u0442\u0443\u043f\u044b \u043e\u0442 \u043a\u0440\u0430\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432 px\n * @param int $quality \u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0435\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043e\u0442 1 \u0434\u043e 100\n * @return boolean\n */\nfunction img_add_watermark($src_file, $wm_file, $wm_origin, $wm_margin, $quality=90){\n\n    $config = cmsConfig::getInstance();\n\n    $src_file = $config->upload_path.$src_file;\n    $wm_file  = $config->upload_path.$wm_file;\n\n    //\n    // \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\n    //\n    $img_size = getimagesize($src_file);\n    if ($img_size === false) { return false; }\n\n    $format = strtolower(substr($img_size['mime'], strpos($img_size['mime'], '/') + 1));\n    $icfunc = 'imagecreatefrom'.$format;\n    $igfunc = 'image'.$format;\n\n    if (!function_exists($icfunc)) { return false; }\n    if (!function_exists($igfunc)) { return false; }\n\n    $img_width  = $img_size[0];\n    $img_height = $img_size[1];\n\n    $img = $icfunc($src_file);\n\n    if ($format == 'png' || $format == 'gif') {\n        imagealphablending($img, true);\n        imagesavealpha($img, true);\n    }\n\n    //\n    // \u0412\u0430\u0442\u0435\u0440\u043c\u0430\u0440\u043a\n    //\n    $wm_size = getimagesize($wm_file);\n    if ($wm_size === false) { return false; }\n\n    $wm_width  = $wm_size[0];\n    $wm_height = $wm_size[1];\n\n    $wm_format = strtolower(substr($wm_size['mime'], strpos($wm_size['mime'], '/' ) + 1));\n    $wm_func   = 'imagecreatefrom'.$wm_format;\n    if (!function_exists($wm_func)) { return false; }\n\n    $wm = $wm_func($wm_file);\n\n    if (!$wm_margin) { $wm_margin = 0; }\n\n    $x = 0; $y = 0;\n\n    switch($wm_origin){\n        case 'top-left':\n            $x = $wm_margin;\n            $y = $wm_margin;\n            break;\n        case 'top-center':\n            $x = ($img_width/2) - ($wm_width/2);\n            $y = $wm_margin;\n            break;\n        case 'top-right':\n            $x = ($img_width - $wm_width - $wm_margin);\n            $y = $wm_margin;\n            break;\n        case 'left':\n            $x = $wm_margin;\n            $y = ($img_height/2) - ($wm_height/2);\n            break;\n        case 'center':\n            $x = ($img_width/2) - ($wm_width/2);\n            $y = ($img_height/2) - ($wm_height/2);\n            break;\n        case 'right':\n            $x = ($img_width - $wm_width - $wm_margin);\n            $y = ($img_height/2) - ($wm_height/2);\n            break;\n        case 'bottom-left':\n            $x = $wm_margin;\n            $y = ($img_height - $wm_height - $wm_margin);\n            break;\n        case 'bottom':\n            $x = ($img_width/2) - ($wm_width/2);\n            $y = ($img_height - $wm_height - $wm_margin);\n            break;\n        case 'bottom-right':\n            $x = ($img_width - $wm_width - $wm_margin);\n            $y = ($img_height - $wm_height - $wm_margin);\n            break;\n    }\n\n    imagecopyresampled($img, $wm, $x, $y, 0, 0, $wm_width, $wm_height, $wm_width, $wm_height);\n\n    if ($format == 'jpeg') {\n        imageinterlace($img, 1);\n    }\n\n    if ($format == 'png') {\n        $quality = (10 - ceil($quality / 10));\n    }\n    if ($format == 'gif') {\n        $quality = NULL;\n    }\n\n    $igfunc($img, $src_file, $quality);\n\n    imagedestroy($img);\n    imagedestroy($wm);\n\n    return true;\n\n}\n/**\n * \u0418\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0440\u0430\u0437\u043c\u0435\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f $src, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u043e\u0435 \u0432 $dest\n *\n * \u0423\u0421\u0422\u0410\u0420\u0415\u0412\u0428\u0410\u042f \u0424\u0423\u041d\u041a\u0426\u0418\u042f\n *\n * @param string $src \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044e\n * @param string $dest \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a\u0443\u0434\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\n * @param int $maxwidth \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0448\u0438\u0440\u0438\u043d\u0430 \u0432 px\n * @param int $maxheight \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u044b\u0441\u043e\u0442\u0430 \u0432 px\n * @param bool $is_square \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\n * @param int $quality \u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0435\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043e\u0442 1 \u0434\u043e 100\n * @return boolean\n */\nfunction img_resize($src, $dest, $maxwidth, $maxheight = 160, $is_square = false, $quality = 95) {\n\n    if (!file_exists($src)) { return false; }\n\n    $upload_dir = dirname($dest);\n\n    if (!is_writable($upload_dir)) {\n\n        @chmod($upload_dir, 0777);\n\n        if (!is_writable($upload_dir)) {\n            return false;\n        }\n\n    }\n\n    try {\n        $image = new cmsImages($src);\n    } catch (Exception $exc) {\n        return false;\n    }\n\n    if($is_square){\n\n        $image->crop($maxwidth, $maxheight, false, cmsImages::CROPCENTER);\n\n    } else {\n\n        if(!$maxwidth || !$maxheight){\n\n            if(!$maxwidth){\n                $image->resizeToHeight($maxheight);\n            } else {\n                $image->resizeToWidth($maxwidth);\n            }\n\n        } else {\n            $image->resizeToBestFit($maxwidth, $maxheight);\n        }\n\n    }\n\n    $image->save($dest, null, $quality);\n\n    return true;\n\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n *\n * @param string $path \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443\n * @return boolean|array\n */\nfunction img_get_params($path) {\n\n    if (!is_readable($path)) {\n        return false;\n    }\n\n    $s = getimagesize($path);\n    if ($s === false) {\n        return false;\n    }\n\n    $exif_data = [];\n\n    $exif = (function_exists('exif_read_data') && $s['mime'] === 'image/jpeg') ? (@exif_read_data($path, null, true)) : null;\n\n    if ($exif) {\n        if (isset($exif['COMPUTED']['ApertureFNumber'])) {\n            $exif_data['aperturefnumber'] = $exif['COMPUTED']['ApertureFNumber'];\n        } elseif (isset($exif['EXIF']['FNumber'])) {\n            $num = explode('/', $exif['EXIF']['FNumber']);\n            $exif_data['aperturefnumber'] = 'f/' . ($num[0] / $num[1]);\n        }\n        if (isset($exif['EXIF']['ExposureTime'])) {\n            $num = explode('/', $exif['EXIF']['ExposureTime']);\n            $exif_data['exposuretime'] = ($num[0] == 1) ? $exif['EXIF']['ExposureTime'] : '1/' . round($num[1] / $num[0]) . 's';\n        } elseif (isset($exif['IFD0']['ExposureTime'])) {\n            $exif_data['exposuretime'] = $exif['IFD0']['ExposureTime'];\n        }\n        $make = false;\n        if (isset($exif['IFD0']['Make'])) {\n            $exif['IFD0']['Make'] = trim($exif['IFD0']['Make']);\n            if ($exif['IFD0']['Make'] != 'NIKON CORPORATION' && $exif['IFD0']['Make'] != 'Canon' && $exif['IFD0']['Make'] != 'Lenovo ') {\n                $exif_data['camera'] = $exif['IFD0']['Make'];\n                $make = true;\n            }\n        }\n        if (isset($exif['IFD0']['Model'])) {\n            $exif_data['camera'] = $make ? $exif['IFD0']['Make'] . ' ' . $exif['IFD0']['Model'] : $exif['IFD0']['Model'];\n        }\n\n        if (isset($exif['EXIF']['DateTimeOriginal'])) {\n            $exif_data['date'] = $exif['EXIF']['DateTimeOriginal'];\n        } elseif (isset($exif['EXIF']['DateTimeDigitized'])) {\n            $exif_data['date'] = $exif['EXIF']['DateTimeDigitized'];\n        }\n\n        if (isset($exif['EXIF']['ISOSpeedRatings'])) {\n            $exif_data['isospeedratings'] = $exif['EXIF']['ISOSpeedRatings'];\n            if (is_array($exif_data['isospeedratings'])) {\n                $exif_data['isospeedratings'] = current($exif_data['isospeedratings']);\n            }\n        }\n\n        if (isset($exif['EXIF']['FocalLength'])) {\n            $num = explode('/', $exif['EXIF']['FocalLength']);\n            $exif_data['focallength'] = floor($num[0] / $num[1]) . 'mm';\n        }\n\n        if (isset($exif['EXIF']['FocalLengthIn35mmFilm'])) {\n            $exif_data['focallengthin35mmfilm'] = $exif['EXIF']['FocalLengthIn35mmFilm'] . 'mm';\n        }\n\n        if (isset($exif['IFD0']['Orientation'])) {\n            $exif_data['orientation'] = $exif['IFD0']['Orientation'];\n        }\n    }\n\n    $orientation = 'square';\n    if ($s[0] > $s[1]) {\n        $orientation = 'landscape';\n    }\n    if ($s[0] < $s[1]) {\n        $orientation = 'portrait';\n    }\n\n    return [\n        'orientation' => $orientation,\n        'width'       => $s[0],\n        'height'      => $s[1],\n        'mime'        => $s['mime'],\n        'exif'        => $exif_data,\n        'filesize'    => round(filesize($path))\n    ];\n}\n\n/**\n * \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0432 shell \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043e\u043a \u043e\u0442\u0432\u0435\u0442\u0430\n *\n * @param string $command \u041a\u043e\u043c\u0430\u043d\u0434\u0430\n * @param string $postfix \u0421\u0442\u0440\u043e\u043a\u0430 \u043f\u043e\u0441\u043b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n * @return ?array\n */\nfunction console_exec_command($command, $postfix = ' 2>&1') {\n\n    if (!function_exists('exec')) {\n        return null;\n    }\n\n    $buffer = [];\n    $err    = '';\n\n    $result = exec($command . $postfix, $buffer, $err);\n\n    if ($err !== 127) {\n        if (!isset($buffer[0])) {\n            $buffer[0] = $result;\n        }\n        $b = strtolower($buffer[0]);\n        if (strstr($b, 'error') || strstr($b, ' no ') || strstr($b, 'not found') || strstr($b, 'No such file or directory')) {\n            return [];\n        }\n    } else {\n        return [];\n    }\n\n    return $buffer;\n}\n"], "fixing_code": ["<?php\n\nclass cmsUploader {\n\n    private $allow_remote = false;\n    private $file_name = '';\n    private $user_id = 0;\n    private $site_cfg = null;\n\n    private $last_error = null;\n    private $upload_errors = [];\n\n    private $allowed_mime = false;\n    private $allowed_mime_ext = [];\n    private $mime_types = [];\n\n    public function __construct($user_id = null) {\n\n        $this->mime_types = (new cmsConfigs('mimetypes.php'))->getAll();\n\n        $this->upload_errors = [\n            UPLOAD_ERR_OK         => LANG_UPLOAD_ERR_OK,\n            UPLOAD_ERR_INI_SIZE   => sprintf(LANG_UPLOAD_ERR_INI_SIZE, $this->getMaxUploadSize()),\n            UPLOAD_ERR_FORM_SIZE  => LANG_UPLOAD_ERR_FORM_SIZE,\n            UPLOAD_ERR_PARTIAL    => LANG_UPLOAD_ERR_PARTIAL,\n            UPLOAD_ERR_NO_FILE    => LANG_UPLOAD_ERR_NO_FILE,\n            UPLOAD_ERR_NO_TMP_DIR => LANG_UPLOAD_ERR_NO_TMP_DIR,\n            UPLOAD_ERR_CANT_WRITE => LANG_UPLOAD_ERR_CANT_WRITE,\n            UPLOAD_ERR_EXTENSION  => LANG_UPLOAD_ERR_EXTENSION\n        ];\n\n        $this->user_id  = $user_id ?? cmsUser::getInstance()->id;\n        $this->site_cfg = cmsConfig::getInstance();\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0440\u0430\u0437\u0440\u0435\u0448\u0451\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0444\u0430\u0439\u043b\u043e\u0432\n     *\n     * @param array $types\n     * @return $this\n     */\n    public function setAllowedMime($types) {\n\n        $this->allowed_mime = $types;\n\n        foreach ($this->allowed_mime as $mime) {\n            if (isset($this->mime_types[$mime])) {\n                $this->allowed_mime_ext[] = $this->mime_types[$mime];\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0440\u0430\u0437\u0440\u0435\u0448\u0451\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u043e \u0438\u0445 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044e\n     *\n     * @param array|string $allowed_ext\n     * @return $this\n     */\n    private function setAllowedMimeByExt($allowed_ext) {\n\n        // \u0415\u0441\u043b\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u0440\u0430\u043d\u0435\u0435, \u0442\u043e \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u0435\u043c\n        if ($this->allowed_mime) {\n            return $this;\n        }\n\n        $this->allowed_mime = [];\n\n        if (!is_array($allowed_ext)) {\n            $allowed_ext = explode(',', (string) $allowed_ext);\n        }\n\n        foreach ($allowed_ext as $aext) {\n\n            $aext = mb_strtolower(trim(trim((string) $aext, '., ')));\n\n            if (empty($aext)) {\n                continue;\n            }\n\n            $mime_key = array_search($aext, $this->mime_types, true);\n\n            if(!$mime_key){\n                continue;\n            }\n\n            $this->allowed_mime[] = $mime_key;\n\n            $this->allowed_mime_ext[] = $aext;\n        }\n\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430\n     *\n     * @param string $name\n     * @return $this\n     */\n    public function setFileName($name) {\n\n        $this->file_name = mb_substr(trim($name), 0, 64);\n\n        return $this;\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n     *\n     * @param int $id\n     * @return $this\n     */\n    public function setUserId($id) {\n\n        $this->user_id = $id;\n\n        return $this;\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u043e\u0448\u0438\u0431\u043a\u0443\n     *\n     * @return ?string\n     */\n    public function getLastError() {\n        return $this->last_error;\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432,\n     * \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u043c \u0432 php.ini\n     *\n     * @return string\n     */\n    public function getMaxUploadSize() {\n\n        // \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043f\u043e \u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043c\u0435\u043d\u044c\u0448\u0435, \u0442.\u043a. \u0435\u0441\u043b\u0438 post_max_size \u043c\u0435\u043d\u044c\u0448\u0435 upload_max_filesize,\n        // \u0442\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c post_max_size\n        $max_size = min(files_convert_bytes(@ini_get('upload_max_filesize')), files_convert_bytes(@ini_get('post_max_size')));\n\n        return files_format_bytes($max_size);\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d \u043b\u0438 \u0444\u0430\u0439\u043b \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u0435\u0433\u043e \u0432 $_FILES\n     *\n     * @param string $name \u0418\u043c\u044f \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 $_FILES\n     * @return boolean\n     */\n    public function isUploaded($name) {\n\n        if (!isset($_FILES[$name])) {\n            return false;\n        }\n\n        if (empty($_FILES[$name]['size'])) {\n\n            if (isset($_FILES[$name]['error'])) {\n                if (isset($this->upload_errors[$_FILES[$name]['error']]) && $this->upload_errors[$_FILES[$name]['error']] !== UPLOAD_ERR_OK) {\n                    $this->last_error = $this->upload_errors[$_FILES[$name]['error']];\n                }\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d \u043b\u0438 \u0444\u0430\u0439\u043b \u0447\u0435\u0440\u0435\u0437 XHR\n     *\n     * @param string $name \u0418\u043c\u044f \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 $_GET\n     * @return boolean\n     */\n    public function isUploadedXHR($name) {\n        return !empty($_GET['qqfile']);\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u043d\u0430\u0434\u043e \u043b\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0444\u0430\u0439\u043b \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435\n     *\n     * @param string $name \u0418\u043c\u044f \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 $_POST\n     * @return boolean\n     */\n    public function isUploadedFromLink($name) {\n        return $this->allow_remote && !empty($_POST[$name]);\n    }\n\n    /**\n     * \u0420\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435\n     *\n     * @return $this\n     */\n    public function enableRemoteUpload() {\n\n        $this->allow_remote = true;\n\n        return $this;\n    }\n\n    /**\n     * \u0417\u0430\u043f\u0440\u0435\u0449\u0430\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435\n     *\n     * @return $this\n     */\n    public function disableRemoteUpload() {\n\n        $this->allow_remote = false;\n\n        return $this;\n    }\n\n    /**\n     * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430 \u0441 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\u043c\n     * \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044f \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043e\u0434\u043d\u043e\u0438\u043c\u0451\u043d\u043d\u043e\u0433\u043e\n     *\n     * @param string $path \u041f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u0430\n     * @param string $file_ext \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\n     * @param ?string $file_name \u0418\u043c\u044f \u0444\u0430\u0439\u043b\u0430\n     * @return string\n     */\n    private function getFileName($path, $file_ext, $file_name = null) {\n\n        if (!$file_name) {\n            if ($this->file_name) {\n                $file_name = str_replace('.' . $file_ext, '', files_sanitize_name($this->file_name . '.' . $file_ext));\n            } else {\n                $file_name = substr(md5(microtime(true)), 0, 8);\n            }\n        }\n\n        if (file_exists($path . $file_name . '.' . $file_ext)) {\n            return $this->getFileName($path, $file_ext, $file_name . '_' . md5(microtime(true)));\n        }\n\n        return $file_name . '.' . $file_ext;\n    }\n\n    /**\n     * \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\n     *\n     * @param string $filename \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044f \u0441 \u0444\u0430\u0439\u043b\u043e\u043c\n     * @param string $allowed_ext \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0445 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0439 (\u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e)\n     * @param string $allowed_size \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445)\n     * @param string $destination \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (\u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0443\u0442\u0438 upload)\n     * @return array\n     */\n    public function upload($filename, $allowed_ext = false, $allowed_size = 0, $destination = false) {\n\n        // \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f\n        if ($allowed_ext) {\n            $this->setAllowedMimeByExt($allowed_ext);\n        }\n\n        if ($this->isUploadedFromLink($filename)) {\n            return $this->uploadFromLink($filename, $allowed_size, $destination);\n        }\n\n        if ($this->isUploadedXHR($filename)) {\n            return $this->uploadXHR($filename, $allowed_size, $destination);\n        }\n\n        if ($this->isUploaded($filename)) {\n            return $this->uploadForm($filename, $allowed_size, $destination);\n        }\n\n        $last_error = $this->getLastError();\n\n        return [\n            'success' => false,\n            'error'   => ($last_error ? $last_error : LANG_UPLOAD_ERR_NO_FILE)\n        ];\n    }\n\n//============================================================================//\n//============================================================================//\n\n    /**\n     * \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 \u0447\u0435\u0440\u0435\u0437 input \u0442\u0438\u043f\u0430 file\n     *\n     * @param string $filename \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044f \u0441 \u0444\u0430\u0439\u043b\u043e\u043c \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 $_FILES\n     * @param int $allowed_size \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445)\n     * @param string $destination \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (\u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0443\u0442\u0438 upload)\n     * @return array\n     */\n    public function uploadForm($filename, $allowed_size = 0, $destination = false) {\n\n        $source     = $_FILES[$filename]['tmp_name'];\n        $error_code = $_FILES[$filename]['error'];\n        $dest_size  = (int) $_FILES[$filename]['size'];\n        $dest_name  = files_sanitize_name($_FILES[$filename]['name']);\n\n        $file = new cmsUploadfile($source, $this->allowed_mime);\n\n        if (!$file->isAllowed()) {\n            return [\n                'error'   => LANG_UPLOAD_ERR_MIME . '. ' . sprintf(LANG_PARSER_FILE_EXTS_FIELD_HINT, implode(', ', $this->allowed_mime_ext)),\n                'success' => false,\n                'name'    => $dest_name\n            ];\n        }\n\n        if ($allowed_size) {\n            if ($dest_size > $allowed_size) {\n                return [\n                    'error'   => sprintf(LANG_UPLOAD_ERR_INI_SIZE, files_format_bytes($allowed_size)),\n                    'success' => false,\n                    'name'    => $dest_name\n                ];\n            }\n        }\n\n        $dest_ext = $file->getExt();\n\n        if (!$destination) {\n            $destination = $this->getUploadDestinationDirectory();\n        } else {\n            $destination = $this->site_cfg->upload_path . $destination . '/';\n        }\n\n        if (!$this->file_name) {\n            $this->file_name = pathinfo($dest_name, PATHINFO_FILENAME);\n        }\n\n        $destination .= $this->getFileName($destination, $dest_ext);\n\n        return $this->moveUploadedFile($source, $destination, $error_code, $dest_name, $dest_size);\n    }\n\n    /**\n     * \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435\n     *\n     * @param string $post_filename \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044f \u0441 \u0444\u0430\u0439\u043b\u043e\u043c \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 $_POST\n     * @param int $allowed_size \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445)\n     * @param string $destination \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (\u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0443\u0442\u0438 upload)\n     * @return array\n     */\n    public function uploadFromLink($post_filename, $allowed_size = 0, $destination = false) {\n\n        $link = $file_name = trim($_POST[$post_filename]);\n\n\n        if (\n            // \u0412\u0430\u043b\u0438\u0434\u043d\u044b\u0439 URL \u0441 PATH\n            filter_var($link, FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED) !== $link ||\n            // \u041f\u043e IP \u0430\u0434\u0440\u0435\u0441\u0443 \u043d\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u043c\n            preg_match('#^(?:(?:https?):\\/\\/)([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}).*#ui', $link)\n            ) {\n\n            return [\n                'success' => false,\n                'error'   => 'Not allowed',\n                'name'    => '',\n                'path'    => ''\n            ];\n        }\n\n        // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0440\u0435\u0434\u0438\u0440\u0435\u043a\u0442 \u0438 \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430\n        $curl = curl_init();\n        curl_setopt($curl, CURLOPT_PROTOCOLS, CURLPROTO_HTTPS | CURLPROTO_HTTP);\n        curl_setopt($curl, CURLOPT_URL, $link);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_HEADER, true);\n        curl_setopt($curl, CURLOPT_NOBODY, true);\n        curl_setopt($curl, CURLOPT_TIMEOUT, 5);\n        $headers = curl_exec($curl);\n        curl_close($curl);\n\n        $matches = [];\n        if (preg_match(\"/(?:Location:|URI:)([^\\n]+)*/is\", $headers, $matches)) {\n\n            $url = trim($matches[1]);\n\n            if (strpos($url, 'http') !== 0) {\n                $url_data = parse_url($link);\n                $link     = $url_data['scheme'] . '://' . $url_data['host'] . $url;\n            } else {\n                $link = $url;\n            }\n\n            $_POST[$post_filename] = $link;\n\n            return $this->uploadFromLink($post_filename, $allowed_size, $destination);\n        }\n\n        if (preg_match('#filename=\"([^\"]+)#uis', $headers, $matches)) {\n            $file_name = trim($matches[1]);\n        }\n\n        $dest_name = files_sanitize_name($file_name);\n\n        $file_bin = file_get_contents_from_url($link);\n\n        if (!$file_bin) {\n            return [\n                'success' => false,\n                'error'   => LANG_UPLOAD_ERR_NO_FILE,\n                'name'    => $dest_name,\n                'path'    => ''\n            ];\n        }\n\n        return $this->saveFileFromString($file_bin, $allowed_size, $destination, $dest_name);\n    }\n\n    /**\n     * \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0444\u0430\u0439\u043b \u0438\u0437 php://input \u0432 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e  \u0438 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0438\n     *\n     * @param string $filename \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044f \u0441 \u0444\u0430\u0439\u043b\u043e\u043c \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 $_GET\n     * @param int $allowed_size \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445)\n     * @param string $destination \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (\u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0443\u0442\u0438 upload)\n     * @return array\n     */\n    public function uploadXHR($filename, $allowed_size = 0, $destination = false) {\n\n        $dest_name = files_sanitize_name($_GET['qqfile']);\n\n        $file_bin = file_get_contents('php://input');\n\n        if (!$file_bin) {\n            return [\n                'success' => false,\n                'error'   => LANG_UPLOAD_ERR_NO_FILE,\n                'name'    => $dest_name,\n                'path'    => ''\n            ];\n        }\n\n        return $this->saveFileFromString($file_bin, $allowed_size, $destination, $dest_name);\n    }\n\n    /**\n     * \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0444\u0430\u0439\u043b \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\n     *\n     * @param string $file_bin\n     * @param int $allowed_size \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445)\n     * @param string $destination \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (\u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0443\u0442\u0438 upload)\n     * @param string $dest_name \u0418\u043c\u044f \u0444\u0430\u0439\u043b\u0430\n     * @return array\n     */\n    private function saveFileFromString($file_bin, $allowed_size, $destination, $dest_name) {\n\n        $file = new cmsUploadfile($file_bin, $this->allowed_mime);\n\n        if (!$file->isAllowed()) {\n            return [\n                'error'   => LANG_UPLOAD_ERR_MIME . '. ' . sprintf(LANG_PARSER_FILE_EXTS_FIELD_HINT, implode(', ', $this->allowed_mime_ext)),\n                'success' => false,\n                'name'    => $dest_name\n            ];\n        }\n\n        $dest_ext = $file->getExt();\n\n        $file_size = strlen($file_bin);\n\n        if ($allowed_size) {\n            if ($file_size > $allowed_size) {\n                return [\n                    'error'   => sprintf(LANG_UPLOAD_ERR_INI_SIZE, files_format_bytes($allowed_size)),\n                    'success' => false,\n                    'name'    => $dest_name\n                ];\n            }\n        }\n\n        if (!$destination) {\n            $destination = $this->getUploadDestinationDirectory();\n        } else {\n            $destination = $this->site_cfg->upload_path . $destination . '/';\n        }\n\n        $destination .= $this->getFileName($destination, $dest_ext);\n\n        if (!is_writable(dirname($destination))) {\n            return [\n                'success' => false,\n                'error'   => LANG_UPLOAD_ERR_CANT_WRITE,\n                'name'    => $dest_name,\n                'path'    => ''\n            ];\n        }\n\n        if(file_put_contents($destination, $file_bin) === false){\n            return [\n                'success' => false,\n                'error'   => LANG_UPLOAD_ERR_CANT_WRITE,\n                'name'    => $dest_name,\n                'path'    => ''\n            ];\n        }\n\n        return [\n            'success' => true,\n            'path'    => $destination,\n            'url'     => str_replace($this->site_cfg->upload_path, '', $destination),\n            'name'    => basename($destination),\n            'size'    => $file_size\n        ];\n    }\n\n    /**\n     * \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b \u0438\u0437 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0432 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u0438 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0438\n     *\n     * @param string $source\n     * @param string $destination\n     * @param int $errorCode\n     * @return array\n     */\n    private function moveUploadedFile($source, $destination, $errorCode, $orig_name = '', $orig_size = 0) {\n\n        if ($errorCode !== UPLOAD_ERR_OK && isset($this->upload_errors[$errorCode])) {\n\n            return [\n                'success' => false,\n                'error'   => $this->upload_errors[$errorCode],\n                'name'    => $orig_name,\n                'path'    => ''\n            ];\n        }\n\n        $upload_dir = dirname($destination);\n        if (!is_writable($upload_dir)) {\n            @chmod($upload_dir, 0777);\n        }\n\n        if (!is_writable($upload_dir)) {\n\n            return [\n                'success' => false,\n                'error'   => LANG_UPLOAD_ERR_CANT_WRITE,\n                'name'    => $orig_name,\n                'path'    => ''\n            ];\n        }\n\n        return [\n            'success' => @move_uploaded_file($source, $destination),\n            'path'    => $destination,\n            'url'     => str_replace($this->site_cfg->upload_path, '', $destination),\n            'name'    => basename($destination),\n            'size'    => $orig_size,\n            'error'   => $this->upload_errors[$errorCode]\n        ];\n    }\n\n    /**\n     * \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0444\u0430\u0439\u043b\n     * @param string $file_path\n     * @return boolean\n     */\n    public function remove($file_path) {\n        return files_delete_file($file_path, 2);\n    }\n\n    /**\n     * \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0434\u0435\u0440\u0435\u0432\u043e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0439 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0430\u0439\u043b\u0430\n     * @return string\n     */\n    public function getUploadDestinationDirectory() {\n        return files_get_upload_dir($this->user_id);\n    }\n\n}\n", "<?php\n/**\n * \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e\n *\n * @param string $directory_from \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c\n * @param string $directory_to \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438, \u043a\u0443\u0434\u0430 \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c\n * @return bool\n */\nfunction files_copy_directory($directory_from, $directory_to) {\n\n    if (!is_dir($directory_from)) {\n        return false;\n    }\n\n    if (!is_dir($directory_to)) {\n        mkdir($directory_to, 0755, true);\n    }\n\n    $items = new FilesystemIterator($directory_from);\n\n    foreach ($items as $item) {\n\n        $target = $directory_to.'/'.$item->getBasename();\n\n        if ($item->isDir()) {\n\n            if (!files_copy_directory($item->getPathname(), $target)) {\n                return false;\n            }\n        }\n        elseif (!copy($item->getPathname(), $target)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n/**\n * \u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e\n * @param string $directory\n * @param bool $is_clear \u0415\u0441\u043b\u0438 TRUE, \u0442\u043e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u043e\u0447\u0438\u0449\u0435\u043d\u0430, \u043d\u043e \u043d\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0430\n * @return bool\n */\nfunction files_remove_directory($directory, $is_clear=false){\n\n    if(substr($directory,-1) == '/'){\n        $directory = substr($directory,0,-1);\n    }\n\n    if(!file_exists($directory) || !is_dir($directory) || !is_readable($directory)){\n        return false;\n    }\n\n    $handle = opendir($directory);\n\n    while (false !== ($node = readdir($handle))){\n\n        if($node != '.' && $node != '..'){\n\n            $path = $directory.'/'.$node;\n\n            if(is_dir($path)){\n                if (!files_remove_directory($path)) { return false; }\n            } else {\n                if(!@unlink($path)) { return false; }\n            }\n\n        }\n\n    }\n\n    closedir($handle);\n\n    if ($is_clear == false){\n        if(!@rmdir($directory)){\n            return false;\n        }\n    }\n\n    return true;\n\n}\n\n/**\n * \u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e\n * @param string $directory\n * @return bool\n */\nfunction files_clear_directory($directory){\n    return files_remove_directory($directory, true);\n}\n\n/**\n * \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0444\u0430\u0439\u043b \u0438 \u0435\u0433\u043e \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438\n * @param string $file_path \u041e\u0442\u043d\u043e\u0441\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043b\u0438 \u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443\n * @param integer $delete_parent_dir \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n * @return boolean\n */\nfunction files_delete_file($file_path, $delete_parent_dir = 0) {\n\n    if(!is_file($file_path)){\n        $file_path = cmsConfig::get('upload_path') . $file_path;\n    }\n\n    $success = @unlink($file_path);\n\n    if($delete_parent_dir && $success){\n\n        $parent_dir = pathinfo($file_path, PATHINFO_DIRNAME);\n\n        for ($i = 1; $i <= $delete_parent_dir; $i++) {\n\n            if(!@rmdir($parent_dir)){ break; }\n\n            $parent_dir = pathinfo($parent_dir, PATHINFO_DIRNAME);\n\n        }\n\n    }\n\n    return $success;\n\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0435\u0440\u0435\u0432\u043e \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u043e\u0432 \u0438 \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0443\u0442\u0438 \u0432 \u0432\u0438\u0434\u0435\n * \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n * @param string $path\n * @return array\n */\nfunction files_tree_to_array($path){\n\n    $data = array();\n\n    $dir = new DirectoryIterator( $path );\n\n    foreach ( $dir as $node ){\n        if ( $node->isDir() && !$node->isDot() ){\n            $data[$node->getFilename()] = files_tree_to_array( $node->getPathname() );\n        } else if ( $node->isFile() ){\n            $data[] = $node->getFilename();\n        }\n    }\n\n    return $data;\n\n}\n\n/**\n * \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443, \u0443\u0431\u0438\u0440\u0430\u044f \u0432\u0441\u0435 \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044b.\n *\n * \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u0443\u0442\u044c\n *      /path/to/../folder\n * \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d \u0432\n *      /path/folder\n *\n * @param string $path\n * @return string\n */\nfunction files_normalize_path($path) {\n\n    $parts = explode('/', $path);\n    $safe  = array();\n\n    foreach ($parts as $idx => $part) {\n        if (empty($part) || ('.' == $part)) {\n            continue;\n        } elseif ('..' == $part) {\n            array_pop($safe);\n            continue;\n        } else {\n            $safe[] = $part;\n        }\n    }\n\n    $path = implode('/', $safe);\n    return $path;\n\n}\n\n/**\n * \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0432\u0438\u0434\u0430 \"8M\" \u0438\u043b\u0438 \"1024K\" \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445\n * \u041f\u043e\u043b\u0435\u0437\u043d\u043e \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 max_upload_size \u0438\u0437 php.ini\n *\n * @param string $value\n * @return int\n */\nfunction files_convert_bytes($value) {\n    if ( is_numeric( $value ) ) {\n        return $value;\n    } else {\n        $value_length = strlen( $value );\n        $qty = substr( $value, 0, $value_length - 1 );\n        $unit = strtolower( substr( $value, $value_length - 1 ) );\n        switch ( $unit ) {\n            case 'k':\n                $qty *= 1024;\n                break;\n            case 'm':\n                $qty *= 1048576;\n                break;\n            case 'g':\n                $qty *= 1073741824;\n                break;\n        }\n        return $qty;\n    }\n    return $value;\n}\n\n/**\n * \u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442 \u0431\u0430\u0439\u0442\u044b \u0432 \u0413\u0431, \u041c\u0431 \u0438\u043b\u0438 \u041a\u0431 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e + \u0435\u0434\u0438\u043d\u0438\u0446\u0443 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f\n * \u0432 \u0432\u0438\u0434\u0435 \u0435\u0434\u0438\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438\n * @param int $bytes\n * @return string\n */\nfunction files_format_bytes($bytes) {\n\n    $kb = 1024;\n    $mb = 1048576;\n    $gb = 1073741824;\n\n    if (round($bytes / $gb) > 0) {\n        return round(($bytes / $gb), 1, PHP_ROUND_HALF_UP). ' ' . LANG_GB;\n    }\n\n    if (round($bytes / $mb) > 0) {\n        return ceil($bytes / $mb) . ' ' . LANG_MB;\n    }\n\n    if (round($bytes / $kb) > 0) {\n        return ceil($bytes / $kb) . ' ' . LANG_KB;\n    }\n\n    return $bytes . ' ' . LANG_B;\n\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 32-\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u044c\u043d\u044b\u0439 \u0445\u044d\u0448, \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u043a ip \u0430\u0434\u0440\u0435\u0441\u0443\n * \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0437\u0430\u0449\u0438\u0442\u044b \u043e\u0442 \u0445\u043e\u0442\u043b\u0438\u043d\u043a\u0430\n *\n * @param string $file_path \u041f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443\n * @return string\n */\nfunction files_user_file_hash($file_path = ''){\n    return md5(cmsUser::getIp().md5($file_path.cmsConfig::get('root_path')));\n}\n\n/**\n * \u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430 \u043e\u0442 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\n *\n * @param string $filename \u0418\u043c\u044f \u0444\u0430\u0439\u043b\u0430\n * @param boolean $convert_slug \u0422\u0440\u0430\u043d\u0441\u043b\u0438\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c?\n * @return string\n */\nfunction files_sanitize_name($filename, $convert_slug = true){\n\n\t$path_parts = pathinfo($filename);\n    if($convert_slug){\n        $filename = lang_slug($path_parts['filename']) . ((isset($path_parts['extension']) ?  '.' . $path_parts['extension'] : ''));\n    } else {\n        $filename = trim(strip_tags($path_parts['filename']) . ((isset($path_parts['extension']) ?  '.' . $path_parts['extension'] : '')));\n    }\n    $filename = mb_strtolower($filename);\n    $filename = preg_replace(array('/[\\&]/', '/[\\@]/', '/[\\#]/'), array('-and-', '-at-', '-number-'), $filename);\n    $filename = str_replace(' ', '-', $filename);\n    $filename = str_replace('\\'', '', $filename);\n    $filename = preg_replace('/[^\\w\\-\\.]+/u', '', $filename);\n    $filename = preg_replace('/[\\-]+/', '-', $filename);\n\n\treturn $filename;\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442/\u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u043f\u0443\u0442\u044c \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f\n *\n * @param integer $user_id\n * @return string\n */\nfunction files_get_upload_dir($user_id = 0) {\n\n    $dir_num_user = sprintf('%03d', intval($user_id/100));\n\n    $file_name   = md5(microtime(true));\n    $first_dir   = substr($file_name, 0, 1);\n    $second_dir  = substr($file_name, 1, 1);\n    $upload_path = cmsConfig::get('upload_path');\n\n    $dest_dir = $upload_path.\"{$dir_num_user}/u{$user_id}/{$first_dir}/{$second_dir}/\";\n\n    if(!is_dir($dest_dir)){\n        @mkdir($dest_dir, 0777, true);\n        @chmod($dest_dir, 0777);\n        @chmod(pathinfo($dest_dir, PATHINFO_DIRNAME), 0777);\n        @chmod($upload_path . \"{$dir_num_user}/u{$user_id}\", 0777);\n        @chmod($upload_path . \"{$dir_num_user}\", 0777);\n    }\n\n    return $dest_dir;\n\n}\n\n/**\n * \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 url\n * @param string $url URL, \u043e\u0442\u043a\u0443\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435\n * @param integer $timeout \u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f\n * @param boolean $json_decode \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c JSON\n * @param array $params \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n * @return string\n */\nfunction file_get_contents_from_url($url, $timeout = 5, $json_decode = false, $params = []) {\n\n    if (!function_exists('curl_init')) {\n        return null;\n    }\n\n    // \u041f\u043e IP \u0430\u0434\u0440\u0435\u0441\u0443 \u043d\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u043c\n    if (preg_match('#^(?:(?:https?):\\/\\/)([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}).*#ui', $url)) {\n        return null;\n    }\n\n    $curl = curl_init();\n\n    if (strpos($url, 'https') === 0) {\n        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n    }\n    $headers = ['User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36 OPR/68.0.3618.173'];\n    if (!empty($params['cookie'])) {\n\n        $cookie = [];\n        foreach ($params['cookie'] as $k => $v) {\n            $cookie[] = $k . '=' . $v;\n        }\n\n        $headers[] = 'Cookie: ' . implode('; ', $cookie);\n        unset($params['cookie']);\n    }\n    if (!empty($params['proxy'])) {\n        curl_setopt($curl, CURLOPT_PROXY, $params['proxy']['host'] . ':' . $params['proxy']['port']);\n        curl_setopt($curl, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5);\n        unset($params['proxy']);\n    }\n    if (!empty($params)) {\n        foreach ($params as $key => $value) {\n            $headers[] = $key . ': ' . $value;\n        }\n    }\n    curl_setopt($curl, CURLOPT_PROTOCOLS, CURLPROTO_HTTPS | CURLPROTO_HTTP);\n    curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);\n    curl_setopt($curl, CURLOPT_URL, $url);\n    curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, $timeout);\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($curl, CURLOPT_HEADER, false);\n    curl_setopt($curl, CURLOPT_TIMEOUT, $timeout);\n    $data = curl_exec($curl);\n    curl_close($curl);\n\n    if ($data === false) {\n        return null;\n    }\n\n    if ($json_decode) {\n        return json_decode($data, true);\n    }\n\n    return $data;\n}\n\n/**\n * \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u043e \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b\n * @param string $url url \u0444\u0430\u0439\u043b\u0430\n * @param string $destination \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a\u0443\u0434\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0442\u044c \u0444\u0430\u0439\u043b\n * @return boolean\n */\nfunction file_save_from_url($url, $destination) {\n\n    if (!function_exists('curl_init')) {\n        return false;\n    }\n\n    $dest_file = @fopen($destination, \"w\");\n\n    $curl = curl_init();\n    if (strpos($url, 'https') === 0) {\n        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n    }\n    curl_setopt($curl, CURLOPT_PROTOCOLS, CURLPROTO_HTTPS | CURLPROTO_HTTP);\n    curl_setopt($curl, CURLOPT_URL, $url);\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($curl, CURLOPT_FILE, $dest_file);\n    curl_setopt($curl, CURLOPT_HEADER, false);\n    curl_exec($curl);\n    curl_close($curl);\n    fclose($dest_file);\n\n    return true;\n}\n\n/**\n * \u041d\u0430\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442 \u0432\u0430\u0442\u0442\u0435\u0440\u043c\u0430\u0440\u043a \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\n *\n * \u0423\u0421\u0422\u0410\u0420\u0415\u0412\u0428\u0410\u042f \u0424\u0423\u041d\u041a\u0426\u0418\u042f\n *\n * @param string $src_file \u041f\u0443\u0442\u044c (\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0430\u043f\u043a\u0438 upload) \u043a \u0444\u0430\u0439\u043b\u0443, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u043b\u043e\u0436\u0438\u0442\u044c \u0432\u0430\u0442\u0435\u0440\u043c\u0430\u0440\u043a\n * @param string $wm_file \u041f\u0443\u0442\u044c (\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0430\u043f\u043a\u0438 upload) \u043a \u0444\u0430\u0439\u043b\u0443 \u0432\u0430\u0442\u0435\u0440\u043c\u0430\u0440\u043a\u0430\n * @param string $wm_origin \u041f\u043e\u0437\u0438\u0446\u0438\u044f \u0432\u0430\u0442\u0435\u0440\u043c\u0430\u0440\u043a\u0430: top-left|top|top-right|left|center|right|bottom-left|bottom|bottom-right\n * @param int $wm_margin \u041e\u0442\u0441\u0442\u0443\u043f\u044b \u043e\u0442 \u043a\u0440\u0430\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432 px\n * @param int $quality \u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0435\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043e\u0442 1 \u0434\u043e 100\n * @return boolean\n */\nfunction img_add_watermark($src_file, $wm_file, $wm_origin, $wm_margin, $quality=90){\n\n    $config = cmsConfig::getInstance();\n\n    $src_file = $config->upload_path.$src_file;\n    $wm_file  = $config->upload_path.$wm_file;\n\n    //\n    // \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\n    //\n    $img_size = getimagesize($src_file);\n    if ($img_size === false) { return false; }\n\n    $format = strtolower(substr($img_size['mime'], strpos($img_size['mime'], '/') + 1));\n    $icfunc = 'imagecreatefrom'.$format;\n    $igfunc = 'image'.$format;\n\n    if (!function_exists($icfunc)) { return false; }\n    if (!function_exists($igfunc)) { return false; }\n\n    $img_width  = $img_size[0];\n    $img_height = $img_size[1];\n\n    $img = $icfunc($src_file);\n\n    if ($format == 'png' || $format == 'gif') {\n        imagealphablending($img, true);\n        imagesavealpha($img, true);\n    }\n\n    //\n    // \u0412\u0430\u0442\u0435\u0440\u043c\u0430\u0440\u043a\n    //\n    $wm_size = getimagesize($wm_file);\n    if ($wm_size === false) { return false; }\n\n    $wm_width  = $wm_size[0];\n    $wm_height = $wm_size[1];\n\n    $wm_format = strtolower(substr($wm_size['mime'], strpos($wm_size['mime'], '/' ) + 1));\n    $wm_func   = 'imagecreatefrom'.$wm_format;\n    if (!function_exists($wm_func)) { return false; }\n\n    $wm = $wm_func($wm_file);\n\n    if (!$wm_margin) { $wm_margin = 0; }\n\n    $x = 0; $y = 0;\n\n    switch($wm_origin){\n        case 'top-left':\n            $x = $wm_margin;\n            $y = $wm_margin;\n            break;\n        case 'top-center':\n            $x = ($img_width/2) - ($wm_width/2);\n            $y = $wm_margin;\n            break;\n        case 'top-right':\n            $x = ($img_width - $wm_width - $wm_margin);\n            $y = $wm_margin;\n            break;\n        case 'left':\n            $x = $wm_margin;\n            $y = ($img_height/2) - ($wm_height/2);\n            break;\n        case 'center':\n            $x = ($img_width/2) - ($wm_width/2);\n            $y = ($img_height/2) - ($wm_height/2);\n            break;\n        case 'right':\n            $x = ($img_width - $wm_width - $wm_margin);\n            $y = ($img_height/2) - ($wm_height/2);\n            break;\n        case 'bottom-left':\n            $x = $wm_margin;\n            $y = ($img_height - $wm_height - $wm_margin);\n            break;\n        case 'bottom':\n            $x = ($img_width/2) - ($wm_width/2);\n            $y = ($img_height - $wm_height - $wm_margin);\n            break;\n        case 'bottom-right':\n            $x = ($img_width - $wm_width - $wm_margin);\n            $y = ($img_height - $wm_height - $wm_margin);\n            break;\n    }\n\n    imagecopyresampled($img, $wm, $x, $y, 0, 0, $wm_width, $wm_height, $wm_width, $wm_height);\n\n    if ($format == 'jpeg') {\n        imageinterlace($img, 1);\n    }\n\n    if ($format == 'png') {\n        $quality = (10 - ceil($quality / 10));\n    }\n    if ($format == 'gif') {\n        $quality = NULL;\n    }\n\n    $igfunc($img, $src_file, $quality);\n\n    imagedestroy($img);\n    imagedestroy($wm);\n\n    return true;\n\n}\n/**\n * \u0418\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0440\u0430\u0437\u043c\u0435\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f $src, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u043e\u0435 \u0432 $dest\n *\n * \u0423\u0421\u0422\u0410\u0420\u0415\u0412\u0428\u0410\u042f \u0424\u0423\u041d\u041a\u0426\u0418\u042f\n *\n * @param string $src \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044e\n * @param string $dest \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a\u0443\u0434\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\n * @param int $maxwidth \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0448\u0438\u0440\u0438\u043d\u0430 \u0432 px\n * @param int $maxheight \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u044b\u0441\u043e\u0442\u0430 \u0432 px\n * @param bool $is_square \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\n * @param int $quality \u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0435\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043e\u0442 1 \u0434\u043e 100\n * @return boolean\n */\nfunction img_resize($src, $dest, $maxwidth, $maxheight = 160, $is_square = false, $quality = 95) {\n\n    if (!file_exists($src)) { return false; }\n\n    $upload_dir = dirname($dest);\n\n    if (!is_writable($upload_dir)) {\n\n        @chmod($upload_dir, 0777);\n\n        if (!is_writable($upload_dir)) {\n            return false;\n        }\n\n    }\n\n    try {\n        $image = new cmsImages($src);\n    } catch (Exception $exc) {\n        return false;\n    }\n\n    if($is_square){\n\n        $image->crop($maxwidth, $maxheight, false, cmsImages::CROPCENTER);\n\n    } else {\n\n        if(!$maxwidth || !$maxheight){\n\n            if(!$maxwidth){\n                $image->resizeToHeight($maxheight);\n            } else {\n                $image->resizeToWidth($maxwidth);\n            }\n\n        } else {\n            $image->resizeToBestFit($maxwidth, $maxheight);\n        }\n\n    }\n\n    $image->save($dest, null, $quality);\n\n    return true;\n\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n *\n * @param string $path \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443\n * @return boolean|array\n */\nfunction img_get_params($path) {\n\n    if (!is_readable($path)) {\n        return false;\n    }\n\n    $s = getimagesize($path);\n    if ($s === false) {\n        return false;\n    }\n\n    $exif_data = [];\n\n    $exif = (function_exists('exif_read_data') && $s['mime'] === 'image/jpeg') ? (@exif_read_data($path, null, true)) : null;\n\n    if ($exif) {\n        if (isset($exif['COMPUTED']['ApertureFNumber'])) {\n            $exif_data['aperturefnumber'] = $exif['COMPUTED']['ApertureFNumber'];\n        } elseif (isset($exif['EXIF']['FNumber'])) {\n            $num = explode('/', $exif['EXIF']['FNumber']);\n            $exif_data['aperturefnumber'] = 'f/' . ($num[0] / $num[1]);\n        }\n        if (isset($exif['EXIF']['ExposureTime'])) {\n            $num = explode('/', $exif['EXIF']['ExposureTime']);\n            $exif_data['exposuretime'] = ($num[0] == 1) ? $exif['EXIF']['ExposureTime'] : '1/' . round($num[1] / $num[0]) . 's';\n        } elseif (isset($exif['IFD0']['ExposureTime'])) {\n            $exif_data['exposuretime'] = $exif['IFD0']['ExposureTime'];\n        }\n        $make = false;\n        if (isset($exif['IFD0']['Make'])) {\n            $exif['IFD0']['Make'] = trim($exif['IFD0']['Make']);\n            if ($exif['IFD0']['Make'] != 'NIKON CORPORATION' && $exif['IFD0']['Make'] != 'Canon' && $exif['IFD0']['Make'] != 'Lenovo ') {\n                $exif_data['camera'] = $exif['IFD0']['Make'];\n                $make = true;\n            }\n        }\n        if (isset($exif['IFD0']['Model'])) {\n            $exif_data['camera'] = $make ? $exif['IFD0']['Make'] . ' ' . $exif['IFD0']['Model'] : $exif['IFD0']['Model'];\n        }\n\n        if (isset($exif['EXIF']['DateTimeOriginal'])) {\n            $exif_data['date'] = $exif['EXIF']['DateTimeOriginal'];\n        } elseif (isset($exif['EXIF']['DateTimeDigitized'])) {\n            $exif_data['date'] = $exif['EXIF']['DateTimeDigitized'];\n        }\n\n        if (isset($exif['EXIF']['ISOSpeedRatings'])) {\n            $exif_data['isospeedratings'] = $exif['EXIF']['ISOSpeedRatings'];\n            if (is_array($exif_data['isospeedratings'])) {\n                $exif_data['isospeedratings'] = current($exif_data['isospeedratings']);\n            }\n        }\n\n        if (isset($exif['EXIF']['FocalLength'])) {\n            $num = explode('/', $exif['EXIF']['FocalLength']);\n            $exif_data['focallength'] = floor($num[0] / $num[1]) . 'mm';\n        }\n\n        if (isset($exif['EXIF']['FocalLengthIn35mmFilm'])) {\n            $exif_data['focallengthin35mmfilm'] = $exif['EXIF']['FocalLengthIn35mmFilm'] . 'mm';\n        }\n\n        if (isset($exif['IFD0']['Orientation'])) {\n            $exif_data['orientation'] = $exif['IFD0']['Orientation'];\n        }\n    }\n\n    $orientation = 'square';\n    if ($s[0] > $s[1]) {\n        $orientation = 'landscape';\n    }\n    if ($s[0] < $s[1]) {\n        $orientation = 'portrait';\n    }\n\n    return [\n        'orientation' => $orientation,\n        'width'       => $s[0],\n        'height'      => $s[1],\n        'mime'        => $s['mime'],\n        'exif'        => $exif_data,\n        'filesize'    => round(filesize($path))\n    ];\n}\n\n/**\n * \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0432 shell \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043e\u043a \u043e\u0442\u0432\u0435\u0442\u0430\n *\n * @param string $command \u041a\u043e\u043c\u0430\u043d\u0434\u0430\n * @param string $postfix \u0421\u0442\u0440\u043e\u043a\u0430 \u043f\u043e\u0441\u043b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n * @return ?array\n */\nfunction console_exec_command($command, $postfix = ' 2>&1') {\n\n    if (!function_exists('exec')) {\n        return null;\n    }\n\n    $buffer = [];\n    $err    = '';\n\n    $result = exec($command . $postfix, $buffer, $err);\n\n    if ($err !== 127) {\n        if (!isset($buffer[0])) {\n            $buffer[0] = $result;\n        }\n        $b = strtolower($buffer[0]);\n        if (strstr($b, 'error') || strstr($b, ' no ') || strstr($b, 'not found') || strstr($b, 'No such file or directory')) {\n            return [];\n        }\n    } else {\n        return [];\n    }\n\n    return $buffer;\n}\n"], "filenames": ["system/core/uploader.php", "system/libs/files.helper.php"], "buggy_code_start_loc": [343, 317], "buggy_code_end_loc": [345, 393], "fixing_code_start_loc": [344, 318], "fixing_code_end_loc": [363, 402], "type": "CWE-918", "message": "Server-Side Request Forgery (SSRF) in GitHub repository instantsoft/icms2 prior to 2.16.1.", "other": {"cve": {"id": "CVE-2023-4651", "sourceIdentifier": "security@huntr.dev", "published": "2023-08-31T01:15:09.787", "lastModified": "2023-09-01T14:50:55.347", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Server-Side Request Forgery (SSRF) in GitHub repository instantsoft/icms2 prior to 2.16.1."}, {"lang": "es", "value": "Server-Side Request Forgery (SSRF) en el repositorio de GitHub instantsoft/icms2 anterior a 2.16.1. "}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 6.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 4.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:instantcms:instantcms:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.16.1", "matchCriteriaId": "56EF3F9B-6CDB-4568-AF80-EEF6D72B72F6"}]}]}], "references": [{"url": "https://github.com/instantsoft/icms2/commit/a6bf758de0b3242b0c0e4b47a588aae0c94305b0", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/beba9b98-2a5c-4629-987d-b67f47ba9437", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/instantsoft/icms2/commit/a6bf758de0b3242b0c0e4b47a588aae0c94305b0"}}