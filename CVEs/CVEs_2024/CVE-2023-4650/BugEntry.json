{"buggy_code": ["<h1><?php echo LANG_STEP_PHP_CHECK; ?></h1>\n\n<h2><?php echo LANG_PHP_VERSION; ?></h1>\n<p><?php echo LANG_PHP_VERSION_REQ ?></p>\n<table class=\"grid\">\n    <tr>\n        <td><?php echo LANG_PHP_VERSION_DESC; ?></td>\n        <td class=\"value\">\n            <?php echo html_bool_span($info['php']['version'], $info['php']['valid']); ?>\n        </td>\n    </tr>\n</table>\n\n<h2><?php echo LANG_PHP_EXTENSIONS; ?></h2>\n<p><?php echo LANG_PHP_EXTENSIONS_REQ ?></p>\n\n<table class=\"grid\">\n    <?php foreach($info['ext'] as $name=>$valid) { ?>\n    <tr>\n        <td><?php echo $name; ?></td>\n        <td class=\"value\">\n            <?php if ($valid) { ?>\n                <?php echo html_bool_span(LANG_PHP_EXT_INSTALLED, $valid); ?>\n            <?php } else { ?>\n                <?php echo html_bool_span(LANG_PHP_EXT_NOT_INSTALLED, $valid); ?>\n            <?php } ?>\n        </td>\n    </tr>\n    <?php } ?>\n</table>\n\n<h2><?php echo LANG_PHP_EXTENSIONS_EXTRA; ?></h2>\n<p><?php echo LANG_PHP_EXTENSIONS_EXTRA_REQ ?></p>\n\n<table class=\"grid\">\n    <?php foreach($info['ext_extra'] as $name=>$valid) { ?>\n    <tr>\n        <td><?php echo $name; ?></td>\n        <td class=\"value\">\n            <?php if ($valid) { ?>\n                <span class=\"positive\"><?php echo LANG_PHP_EXT_INSTALLED; ?></span>\n            <?php } else { ?>\n                <span class=\"neutral\"><?php echo LANG_PHP_EXT_NOT_INSTALLED; ?></span>\n            <?php } ?>\n        </td>\n    </tr>\n    <?php } ?>\n</table>\n\n<?php if($info['valid']){ ?>\n    <div class=\"buttons\">\n        <input type=\"button\" name=\"next\" id=\"btn-next\" value=\"<?php echo LANG_NEXT; ?>\" onclick=\"nextStep()\" />\n    </div>\n<?php } else { ?>\n    <p>\n        <span class=\"negative\"><?php echo LANG_PHP_CHECK_ERROR; ?></span>\n        <?php echo LANG_PHP_CHECK_ERROR_HINT; ?>\n    </p>\n<?php } ?>", "<?php\n\nclass actionUsersProfileEditPassword extends cmsAction {\n\n    public $lock_explicit_call = true;\n    protected $extended_langs = ['auth'];\n    private $verify_exp = 24;\n\n    public function run($profile) {\n\n        // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u0430\n        if (!$this->is_own_profile && !$this->cms_user->is_admin) {\n            cmsCore::error404();\n        }\n\n        $form = $this->getForm('password', [$profile]);\n\n        $ups_key = 'users.change_email_' . md5($profile['email']);\n\n        // \u0415\u0441\u043b\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043c\u0435\u043d\u044b email\n        if (cmsUser::isAllowed('users', 'change_email', true, true)) {\n\n            // \u0441\u0440\u043e\u043a \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0438\u0441\u0442\u0451\u043a\n            $verify_hours_exp = null;\n\n            $show_email_field = true;\n\n            $sended = cmsUser::getUPS($ups_key);\n\n            // \u0443\u0436\u0435 \u0440\u0430\u043d\u0435\u0435 \u043c\u0435\u043d\u044f\u043b\u0438 \u0438\u043b\u0438 \u043c\u044b \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435\n            if ($sended) {\n\n                $diff_days = intval((time() - $sended['timestamp']) / 86400);\n\n                $verify_hours_exp = round((time() - $sended['timestamp']) / 3600) >= $this->verify_exp;\n\n                if (cmsUser::isPermittedLimitHigher('users', 'change_email_period', $diff_days, true)) {\n                    $show_email_field = false;\n                }\n            }\n\n            $form->addFieldsetAfter('basic', LANG_EMAIL, 'email');\n\n            // \u041d\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u043b\u0438 \u043d\u0438\u0447\u0435\u0433\u043e\n            if (!$sended || $verify_hours_exp === true || !empty($sended['accepted'])) {\n\n                if ($show_email_field) {\n\n                    $form->addField('email', new fieldString('new_email', [\n                        'title' => LANG_EMAIL_NEW,\n                        'hint'  => LANG_EMAIL_NEW_HINT,\n                        'type'  => 'email',\n                        'rules' => [\n                            ['email'],\n                            [function ($controller, $data, $value)use ($profile) {\n\n                                if (!$value) { return true; }\n\n                                $exists = $controller->model->getItemByField('{users}', 'email', $value);\n\n                                if ($exists) {\n                                    return LANG_REG_EMAIL_EXISTS;\n                                }\n\n                                return true;\n                            }]\n                        ]\n                    ]));\n                }\n            } else {\n                $form->addField('email', new fieldString('new_email_confirm_hash', [\n                    'title' => LANG_EMAIL_NEW_HASH,\n                    'rules' => [\n                        ['required']\n                    ]\n                ]));\n            }\n        }\n\n        $data = [\n            '2fa' => $profile['2fa'],\n            'new_email_confirm_hash' => $this->request->get('new_email_confirm_hash', '')\n        ];\n\n        if ($this->request->has('submit')) {\n\n            $data = $form->parse($this->request, true);\n\n            $errors = $form->validate($this, $data);\n\n            if (!$errors) {\n\n                $success_text = [LANG_SUCCESS_MSG];\n\n                list($profile, $data, $form) = cmsEventsManager::hook('users_before_edit_password', [$profile, $data, $form]);\n\n                $profile = array_merge($profile, $data);\n\n                // \u0435\u0441\u043b\u0438 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u043b\u0438 \u0441\u043c\u0435\u043d\u0443 email\n                if (!empty($data['new_email'])) {\n\n                    $verify_data = [\n                        'email'     => $data['new_email'],\n                        'timestamp' => time(),\n                        'hash'      => string_random()\n                    ];\n\n                    // \u041d\u0430 \u043d\u043e\u0432\u044b\u0439 email\n                    cmsUser::setUPS($ups_key, $verify_data);\n\n                    // \u043f\u0438\u0441\u044c\u043c\u043e \u043d\u0430 \u043d\u043e\u0432\u044b\u0439 email\n                    $this->controller_messages->sendEmail(['email' => $data['new_email'], 'name' => $profile['nickname']], ['name' => 'email_verify'], [\n                        'nickname'    => $profile['nickname'],\n                        'page_url'    => href_to_profile($profile, ['edit', 'password'], true) . '?new_email_confirm_hash=' . $verify_data['hash'],\n                        'hash'        => $verify_data['hash'],\n                        'valid_until' => html_date(date('d.m.Y H:i', time() + ($this->verify_exp * 3600)), true)\n                    ]);\n\n                    $success_text[] = sprintf(LANG_USERS_EMAIL_VERIFY, $data['new_email']);\n                }\n\n                // \u041f\u0440\u0438\u0448\u043b\u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435\n                if (!empty($data['new_email_confirm_hash'])) {\n\n                    if ($sended['hash'] === $data['new_email_confirm_hash']) {\n\n                        $verify_data_old = [\n                            'accepted'  => 1,\n                            'email'     => $profile['email'],\n                            'timestamp' => time(),\n                            'hash'      => string_random()\n                        ];\n\n                        // \u041d\u0430 \u0441\u0442\u0430\u0440\u044b\u0439 email\n                        cmsUser::setUPS('users.change_email_' . md5($sended['email']), $verify_data_old);\n\n                        // \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u0441\u0442\u0430\u0440\u044b\u0439\n                        $this->controller_messages->sendEmail(\n                            ['email' => $profile['email'], 'name' => $profile['nickname']],\n                            ['name' => 'email_verify_notice'],\n                            ['nickname'  => $profile['nickname'], 'new_email' => $sended['email']]\n                        );\n\n                        $profile['email'] = $sended['email'];\n                    } else {\n\n                        $errors['new_email_confirm_hash'] = LANG_CONFIRM_CODE_ERROR;\n                    }\n                }\n\n                if (!$errors) {\n\n                    $result = $this->model->updateUser($profile['id'], $profile);\n\n                    if ($result['success']) {\n                        \n                        list($profile, $data, $form) = cmsEventsManager::hook('users_after_edit_password', [$profile, $data, $form]);\n\n                        if (!empty($data['password1'])) {\n                            $success_text[] = LANG_PASS_CHANGED;\n                        }\n\n                        foreach ($success_text as $stext) {\n                            cmsUser::addSessionMessage($stext, 'success');\n                        }\n\n                        $this->redirectTo('users', $profile['id']);\n\n                    } else {\n                        $errors = $result['errors'];\n                    }\n                }\n            }\n\n            if ($errors) {\n                cmsUser::addSessionMessage(LANG_FORM_ERRORS, 'error');\n            }\n        }\n\n        return $this->cms_template->render('profile_edit_password', [\n            'id'      => $profile['id'],\n            'profile' => $profile,\n            'data'    => $data,\n            'form'    => $form,\n            'errors'  => isset($errors) ? $errors : false\n        ]);\n    }\n\n}\n", "<?php\n\nclass actionUsersProfileEditSessions extends cmsAction {\n\n    public $lock_explicit_call = true;\n\n    public function run($profile) {\n\n        // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u0430\n        if (!$this->is_own_profile && !$this->cms_user->is_admin) {\n            return cmsCore::error404();\n        }\n\n        return $this->cms_template->render('profile_edit_sessions', [\n            'id'       => $profile['id'],\n            'profile'  => $profile,\n            'sessions' => $this->model->getUserAuthTokens($profile['id'])\n        ]);\n    }\n\n}\n", "<?php\n/**\n * @property \\modelUsers $model\n */\nclass users extends cmsFrontend {\n\n    protected $useOptions = true;\n    public $useSeoOptions = true;\n\n    /**\n     * \u041f\u0440\u043e\u0444\u0438\u043b\u044c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n     * @var boolean\n     */\n    public $is_own_profile = false;\n\n    /**\n     * \u041f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u0432 \u0434\u0440\u0443\u0436\u0431\u0435 \u0441 \u0442\u0435\u043a\u0443\u0449\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c\n     * @var boolean\n     */\n    public $is_friend_profile = false;\n\n    /**\n     * \u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d \u043d\u0430 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u043e\u0433\u043e\n     * @var boolean\n     */\n    public $is_subscribe_profile = false;\n\n    /**\n     * \u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043f\u0440\u043e\u0444\u0438\u043b\u044c\n     * @var array\n     */\n    public $profile = [];\n\n    public $tabs = [];\n    public $tabs_controllers = [];\n\n    public function routeAction($action_name) {\n\n        if (is_numeric($action_name)) {\n\n            // $action_name \u044d\u0442\u043e id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n            $profile = $this->model->getUser($action_name, 'join_inviter');\n            if (!$profile) {\n                return cmsCore::error404();\n            }\n\n            if ($profile['slug'] !== $action_name) {\n                return $this->redirectTo($this->name, $profile['slug'], $this->current_params, $this->cms_core->uri_query, 301);\n            }\n\n        } else {\n\n            if ($this->isActionExists($action_name)) {\n                return $action_name;\n            }\n\n            $profile = $this->model->getUserBySlug($action_name);\n            // \u041d\u0435 \u043d\u0430\u0448\u043b\u0438 \u043f\u0440\u043e\u0444\u0438\u043b\u044c, \u0437\u043d\u0430\u0447\u0438\u0442 \u044d\u0442\u043e \u043d\u0430\u0431\u043e\u0440 \u0441\u043f\u0438\u0441\u043a\u0430\n            if (!$profile) {\n\n                array_unshift($this->current_params, $action_name);\n\n                return 'index';\n            }\n        }\n\n        // \u0440\u0430\u0437\u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u043c \u0432\u044b\u0437\u043e\u0432 \u044d\u043a\u0448\u0435\u043d\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e\n        $this->lock_explicit_call = false;\n\n        $this->setCurrentProfile($profile);\n\n        if (!$this->cms_user->is_logged && $this->options['is_auth_only']) {\n            return cmsUser::goLogin();\n        }\n\n        if ($this->options['is_themes_on']) {\n            $this->cms_template->applyProfileStyle($this->profile);\n        }\n\n        $this->current_params = $this->cms_core->uri_params;\n\n        // \u043a\u0435\u0448\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0435\u0435 \u0432 \u0432\u0438\u0434\u0436\u0435\u0442\u0430\u0445\n        cmsModel::cacheResult('current_profile', $this->profile);\n\n        // \u041d\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u044d\u043a\u0448\u0435\u043d\u0430 (/users/id) - \u0437\u043d\u0430\u0447\u0438\u0442\n        // \u044d\u0442\u043e \u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u0440\u043e\u0444\u0438\u043b\u044f, \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c\n        // \u0441\u0430\u043c \u043f\u0440\u043e\u0444\u0438\u043b\u044c\n        if (!$this->cms_core->uri_params) {\n\n            $this->cms_template->addHead('<link rel=\"canonical\" href=\"' . href_to_profile($profile, false, true) . '\"/>');\n\n            array_unshift($this->current_params, $this->profile);\n\n            return 'profile';\n        }\n\n        // \u0418\u0449\u0435\u043c \u044d\u043a\u0448\u0435\u043d \u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0440\u043e\u0444\u0438\u043b\u044f\n        if ($this->isActionExists('profile_' . $this->cms_core->uri_params[0])) {\n\n            $this->cms_template->addHead('<link rel=\"canonical\" href=\"' . href_to_profile($profile, [$this->cms_core->uri_params[0], $this->cms_core->uri_params[1] ?? null], true) . '\"/>');\n\n            $this->current_params[0] = $this->profile;\n\n            return 'profile_' . $this->cms_core->uri_params[0];\n        }\n\n        // \u0415\u0441\u043b\u0438 \u0434\u043e\u0448\u043b\u0438 \u0441\u044e\u0434\u0430, \u0437\u043d\u0430\u0447\u0438\u0442 \u044d\u0442\u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u044d\u043a\u0448\u0435\u043d, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u043a\u043b\u0430\u0434\u043a\u0430\n        // \u043e\u0442 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430, \u0442\u043e\u0433\u0434\u0430 \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c\n        // \u0441\u0430\u043c \u043f\u0440\u043e\u0444\u0438\u043b\u044c\n        array_unshift($this->current_params, $this->profile);\n\n        return 'profile_tab';\n    }\n\n    public function setCurrentProfile($profile) {\n\n        // \u0421\u0442\u0430\u0442\u0443\u0441\n        if ($this->options['is_status']) {\n            $profile['status'] = $this->model->getUserStatus($profile['status_id']);\n        }\n\n        // \u0420\u0435\u043f\u0443\u0442\u0430\u0446\u0438\u044f\n        $profile['is_can_vote_karma'] = $this->cms_user->is_logged &&\n                cmsUser::isAllowed('users', 'vote_karma') &&\n                ($this->cms_user->id != $profile['id']) &&\n                $this->model->isUserCanVoteKarma($this->cms_user->id, $profile['id'], $this->options['karma_time']);\n\n        $this->profile = $profile;\n\n        $this->is_own_profile       = $this->cms_user->id == $profile['id'];\n        $this->is_friend_profile    = $this->cms_user->isFriend($profile['id']);\n        $this->is_subscribe_profile = $this->cms_user->isSubscribe($profile['id']);\n\n        return $this;\n    }\n\n    public function getProfileMenu($profile) {\n\n        $menu = [\n            [\n                'title'    => LANG_USERS_PROFILE_INDEX,\n                'url'      => href_to_profile($profile),\n                'url_mask' => href_to_profile($profile)\n            ]\n        ];\n\n        if ($profile['is_deleted']) {\n            return $menu;\n        }\n\n        $this->tabs = $this->model->getUsersProfilesTabs(true, 'name');\n\n        $this->tabs_controllers = ['users' => $this];\n\n        if ($this->tabs) {\n            foreach ($this->tabs as $tab) {\n\n                // \u0432\u043a\u043b\u044e\u0447\u0435\u043d \u043b\u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\n                if (!$this->isControllerEnabled($tab['controller'])) {\n                    continue;\n                }\n\n                // \u043f\u0440\u0430\u0432\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430\n                if (($tab['groups_view'] && !$this->cms_user->isInGroups($tab['groups_view'])) ||\n                        ($tab['groups_hide'] && $this->cms_user->isInGroups($tab['groups_hide']))) {\n                    continue;\n                }\n\n                // \u043e\u043f\u0446\u0438\u044f \"\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043f\u0440\u043e\u0444\u0438\u043b\u044f\"\n                if ($tab['show_only_owner'] && $profile['id'] != $this->cms_user->id) {\n                    continue;\n                }\n\n                $default_tab_info = [\n                    'title' => $tab['title'],\n                    'url'   => href_to_profile($profile, [$tab['name']])\n                ];\n\n                if (empty($this->tabs_controllers[$tab['controller']])) {\n                    $controller = cmsCore::getController($tab['controller'], $this->request);\n                } else {\n                    $controller = $this->tabs_controllers[$tab['controller']];\n                }\n\n                $tab_info = $controller->runHook('user_tab_info', ['profile' => $profile, 'tab_name' => $tab['name']]);\n\n                if ($tab_info === false) {\n                    unset($this->tabs[$tab['name']]);\n                    continue;\n                } else if ($tab_info === true) {\n                    $tab_info = $default_tab_info;\n                } else {\n                    $tab_info = array_merge($default_tab_info, $tab_info);\n                }\n\n                $menu[] = $tab_info;\n\n                $this->tabs_controllers[$tab['controller']] = $controller;\n            }\n        }\n\n        return $menu;\n    }\n\n    public function getProfileEditMenu($profile) {\n\n        $menu = [];\n\n        $menu[] = [\n            'title' => LANG_USERS_EDIT_PROFILE_MAIN,\n            'url'   => href_to_profile($profile, ['edit'])\n        ];\n\n        if ($this->cms_template->hasProfileThemesOptions() && $this->options['is_themes_on']) {\n\n            $menu[] = [\n                'title' => LANG_USERS_EDIT_PROFILE_THEME,\n                'url'   => href_to_profile($profile, ['edit', 'theme'])\n            ];\n        }\n\n        if (cmsEventsManager::getEventListeners('user_notify_types')) {\n\n            $menu[] = [\n                'title' => LANG_USERS_EDIT_PROFILE_NOTICES,\n                'url'   => href_to_profile($profile, ['edit', 'notices'])\n            ];\n        }\n\n        if (!empty($this->options['is_friends_on'])) {\n\n            $menu[] = [\n                'title' => LANG_USERS_EDIT_PROFILE_PRIVACY,\n                'url'   => href_to_profile($profile, ['edit', 'privacy'])\n            ];\n        }\n\n        $menu[] = [\n            'title' => LANG_SECURITY,\n            'url'   => href_to_profile($profile, ['edit', 'password'])\n        ];\n\n        $menu[] = [\n            'title' => LANG_USERS_SESSIONS,\n            'url'   => href_to_profile($profile, ['edit', 'sessions'])\n        ];\n\n        list($menu, $profile) = cmsEventsManager::hook('profile_edit_menu', [$menu, $profile]);\n\n        return $menu;\n    }\n\n    public function renderProfilesList($page_url, $dataset_name = false, $actions = false) {\n\n        $page = $this->request->get('page', 1);\n        $perpage = (empty($this->options['limit']) ? 15 : $this->options['limit']);\n\n        // \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u043e\u043b\u044f\n        $content_model = cmsCore::getModel('content');\n        $content_model->setTablePrefix('');\n        $content_model->orderBy('ordering');\n        $fields = $content_model->getContentFields('{users}');\n\n        $this->model->filterEqual('is_locked', null);\n\n        // \u041f\u043e\u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434\n        $this->model->limitPage($page, $perpage);\n\n        list($fields, $this->model) = cmsEventsManager::hook('profiles_list_filter', array($fields, $this->model));\n\n        $filters = [];\n\n        // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u043f\u043e\u043b\u044f\u043c\n        foreach ($fields as $name => $field) {\n\n            if (!$field['is_in_filter']) {\n                continue;\n            }\n\n            $field['handler']->setItem(['ctype_name' => 'users', 'id' => null])->setContext('filter');\n\n            $fields[$name] = $field;\n\n            if (!$this->request->has($name)) {\n                continue;\n            }\n\n            $value = $this->request->get($name, false, $field['handler']->getDefaultVarType(true));\n            if (!$value) {\n                continue;\n            }\n\n            $value = $field['handler']->storeFilter($value);\n            if (!$value) {\n                continue;\n            }\n\n            if ($field['handler']->applyFilter($this->model, $value) !== false) {\n                $filters[$name] = $value;\n            }\n        }\n\n        // \u0424\u0438\u043b\u044c\u0442\u0440 \u043f\u043e IP \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432\n        if($this->cms_user->is_admin && $this->request->has('ip')){\n            $this->model->filterEqual('ip', $this->request->get('ip', ''));\n        }\n\n        // \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n        $total = $this->model->getUsersCount();\n\n        if ($this->request->has('show_count')) {\n\n            $hint = LANG_SHOW . ' ' . html_spellcount($total, LANG_USERS_SPELL, false, false, 0);\n\n            return $this->cms_template->renderJSON([\n                'count'       => $total,\n                'filter_link' => false,\n                'hint'        => $hint\n            ]);\n        }\n\n        $profiles = $this->model->getUsers($actions);\n\n        if ($this->request->isStandard()) {\n            if (!$profiles && $page > 1) {\n                cmsCore::error404();\n            }\n        }\n\n        $this->model->makeProfileFields($fields, $profiles, $this->cms_user);\n\n        list($profiles, $fields) = cmsEventsManager::hook('profiles_before_list', [$profiles, $fields]);\n\n        return $this->cms_template->renderInternal($this, 'list', [\n            'page_url'     => $page_url,\n            'fields'       => $fields,\n            'filters'      => $filters,\n            'page'         => $page,\n            'perpage'      => $perpage,\n            'total'        => $total,\n            'profiles'     => $profiles,\n            'dataset_name' => $dataset_name,\n            'user'         => $this->cms_user\n        ]);\n    }\n\n    public function getDatasets() {\n\n        $datasets = [];\n\n        // \u0412\u0441\u0435 (\u043d\u043e\u0432\u044b\u0435)\n        $datasets['all'] = [\n            'name'  => 'all',\n            'title' => LANG_USERS_DS_LATEST,\n            'order' => ['date_reg', 'desc']\n        ];\n\n        // \u041e\u043d\u043b\u0430\u0439\u043d\n        if ($this->options['is_ds_online']) {\n            $datasets['online'] = [\n                'name'   => 'online',\n                'title'  => LANG_USERS_DS_ONLINE,\n                'order'  => ['date_log', 'desc'],\n                'filter' => function ($model, $dset) {\n                    return $model->joinSessionsOnline('i')->filterOnlineUsers();\n                }\n            ];\n        }\n\n        // \u0420\u0435\u0439\u0442\u0438\u043d\u0433\n        if ($this->options['is_ds_rating']) {\n            $datasets['rating'] = [\n                'name'  => 'rating',\n                'title' => LANG_USERS_DS_RATED,\n                'order' => ['karma desc, rating desc', '']\n            ];\n        }\n\n        // \u041f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435\n        if ($this->options['is_ds_popular']) {\n            $datasets['popular'] = [\n                'name'  => 'popular',\n                'title' => LANG_USERS_DS_POPULAR,\n                'order' => ['friends_count', 'desc']\n            ];\n        }\n\n        // \u0413\u0440\u0443\u043f\u043f\u044b\n        $f_groups = $this->model->getFilteredGroups();\n\n        if ($f_groups) {\n            foreach ($f_groups as $group) {\n                $datasets[$group['name']] = [\n                    'name'   => $group['name'],\n                    'title'  => $group['title'],\n                    'order'  => ['date_reg', 'desc'],\n                    'filter' => function ($model, $dset) {\n                        return $model->filterGroupByName($dset['name']);\n                    }\n                ];\n            }\n        }\n\n        return cmsEventsManager::hook('profiles_datasets', $datasets);\n    }\n\n    public function logoutLockedUser($user) {\n\n        $now        = time();\n        $lock_until = !empty($user['lock_until']) ? strtotime($user['lock_until']) : false;\n\n        if ($lock_until && ($lock_until <= $now)) {\n\n            $this->model->unlockUser($user['id']);\n\n            return $user;\n        }\n\n        $notice_text = [sprintf(LANG_USERS_LOCKED_NOTICE)];\n\n        if ($user['lock_until']) {\n            $notice_text[] = sprintf(LANG_USERS_LOCKED_NOTICE_UNTIL, html_date($user['lock_until']));\n        }\n\n        if ($user['lock_reason']) {\n            $notice_text[] = sprintf(LANG_USERS_LOCKED_NOTICE_REASON, $user['lock_reason']);\n        }\n\n        if ($user['lock_reason']) {\n            $this->model->update('{users}', $user['id'], [\n                'ip' => null\n            ], true);\n        }\n\n        cmsUser::addSessionMessage(implode('<br>', $notice_text), 'error');\n\n        cmsUser::logout();\n\n        return [];\n    }\n\n    public function listIsAllowed() {\n\n        if(empty($this->options['list_allowed'])){\n            return true;\n        }\n\n        return $this->cms_user->isInGroups($this->options['list_allowed']);\n\n    }\n\n    public function isSlugAllowed($value) {\n\n        if ($this->cms_user->is_admin || !isset($this->options['restricted_slugs'])) { return true; }\n\n        return !string_in_mask_list($value, $this->options['restricted_slugs']);\n    }\n\n}\n"], "fixing_code": ["<h1><?php echo LANG_STEP_PHP_CHECK; ?></h1>\n\n<h2><?php echo LANG_PHP_VERSION; ?></h2>\n<p><?php echo LANG_PHP_VERSION_REQ ?></p>\n<table class=\"grid\">\n    <tr>\n        <td><?php echo LANG_PHP_VERSION_DESC; ?></td>\n        <td class=\"value\">\n            <?php echo html_bool_span($info['php']['version'], $info['php']['valid']); ?>\n        </td>\n    </tr>\n</table>\n\n<h2><?php echo LANG_PHP_EXTENSIONS; ?></h2>\n<p><?php echo LANG_PHP_EXTENSIONS_REQ ?></p>\n\n<table class=\"grid\">\n    <?php foreach($info['ext'] as $name=>$valid) { ?>\n    <tr>\n        <td><?php echo $name; ?></td>\n        <td class=\"value\">\n            <?php if ($valid) { ?>\n                <?php echo html_bool_span(LANG_PHP_EXT_INSTALLED, $valid); ?>\n            <?php } else { ?>\n                <?php echo html_bool_span(LANG_PHP_EXT_NOT_INSTALLED, $valid); ?>\n            <?php } ?>\n        </td>\n    </tr>\n    <?php } ?>\n</table>\n\n<h2><?php echo LANG_PHP_EXTENSIONS_EXTRA; ?></h2>\n<p><?php echo LANG_PHP_EXTENSIONS_EXTRA_REQ ?></p>\n\n<table class=\"grid\">\n    <?php foreach($info['ext_extra'] as $name=>$valid) { ?>\n    <tr>\n        <td><?php echo $name; ?></td>\n        <td class=\"value\">\n            <?php if ($valid) { ?>\n                <span class=\"positive\"><?php echo LANG_PHP_EXT_INSTALLED; ?></span>\n            <?php } else { ?>\n                <span class=\"neutral\"><?php echo LANG_PHP_EXT_NOT_INSTALLED; ?></span>\n            <?php } ?>\n        </td>\n    </tr>\n    <?php } ?>\n</table>\n\n<?php if($info['valid']){ ?>\n    <div class=\"buttons\">\n        <input type=\"button\" name=\"next\" id=\"btn-next\" value=\"<?php echo LANG_NEXT; ?>\" onclick=\"nextStep()\" />\n    </div>\n<?php } else { ?>\n    <p>\n        <span class=\"negative\"><?php echo LANG_PHP_CHECK_ERROR; ?></span>\n        <?php echo LANG_PHP_CHECK_ERROR_HINT; ?>\n    </p>\n<?php } ?>", "<?php\n\nclass actionUsersProfileEditPassword extends cmsAction {\n\n    public $lock_explicit_call = true;\n    protected $extended_langs = ['auth'];\n    private $verify_exp = 24;\n\n    public function run($profile) {\n\n        // \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b \u0438 \u0430\u0434\u043c\u0438\u043d\u044b \u043c\u043e\u0433\u0443\u0442 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\n        if (!$this->is_own_profile && !$this->cms_user->is_admin) {\n            return cmsCore::error404();\n        }\n\n        // \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u044b \u0442\u0443\u0442 \u043c\u043e\u0433\u0443\u0442 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0432\u043e\u0438 \u043f\u0440\u043e\u0444\u0438\u043b\u0438\n        if ($this->cms_user->is_admin && !$this->is_own_profile && $profile['is_admin']) {\n            return cmsCore::error404();\n        }\n\n        $form = $this->getForm('password', [$profile]);\n\n        $ups_key = 'users.change_email_' . md5($profile['email']);\n\n        // \u0415\u0441\u043b\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043c\u0435\u043d\u044b email\n        if (cmsUser::isAllowed('users', 'change_email', true, true)) {\n\n            // \u0441\u0440\u043e\u043a \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0438\u0441\u0442\u0451\u043a\n            $verify_hours_exp = null;\n\n            $show_email_field = true;\n\n            $sended = cmsUser::getUPS($ups_key);\n\n            // \u0443\u0436\u0435 \u0440\u0430\u043d\u0435\u0435 \u043c\u0435\u043d\u044f\u043b\u0438 \u0438\u043b\u0438 \u043c\u044b \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435\n            if ($sended) {\n\n                $diff_days = intval((time() - $sended['timestamp']) / 86400);\n\n                $verify_hours_exp = round((time() - $sended['timestamp']) / 3600) >= $this->verify_exp;\n\n                if (cmsUser::isPermittedLimitHigher('users', 'change_email_period', $diff_days, true)) {\n                    $show_email_field = false;\n                }\n            }\n\n            $form->addFieldsetAfter('basic', LANG_EMAIL, 'email');\n\n            // \u041d\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u043b\u0438 \u043d\u0438\u0447\u0435\u0433\u043e\n            if (!$sended || $verify_hours_exp === true || !empty($sended['accepted'])) {\n\n                if ($show_email_field) {\n\n                    $form->addField('email', new fieldString('new_email', [\n                        'title' => LANG_EMAIL_NEW,\n                        'hint'  => LANG_EMAIL_NEW_HINT,\n                        'type'  => 'email',\n                        'rules' => [\n                            ['email'],\n                            [function ($controller, $data, $value)use ($profile) {\n\n                                if (!$value) { return true; }\n\n                                $exists = $controller->model->getItemByField('{users}', 'email', $value);\n\n                                if ($exists) {\n                                    return LANG_REG_EMAIL_EXISTS;\n                                }\n\n                                return true;\n                            }]\n                        ]\n                    ]));\n                }\n            } else {\n                $form->addField('email', new fieldString('new_email_confirm_hash', [\n                    'title' => LANG_EMAIL_NEW_HASH,\n                    'rules' => [\n                        ['required']\n                    ]\n                ]));\n            }\n        }\n\n        $data = [\n            '2fa' => $profile['2fa'],\n            'new_email_confirm_hash' => $this->request->get('new_email_confirm_hash', '')\n        ];\n\n        if ($this->request->has('submit')) {\n\n            $data = $form->parse($this->request, true);\n\n            $errors = $form->validate($this, $data);\n\n            if (!$errors) {\n\n                $success_text = [LANG_SUCCESS_MSG];\n\n                list($profile, $data, $form) = cmsEventsManager::hook('users_before_edit_password', [$profile, $data, $form]);\n\n                $profile = array_merge($profile, $data);\n\n                // \u0435\u0441\u043b\u0438 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u043b\u0438 \u0441\u043c\u0435\u043d\u0443 email\n                if (!empty($data['new_email'])) {\n\n                    $verify_data = [\n                        'email'     => $data['new_email'],\n                        'timestamp' => time(),\n                        'hash'      => string_random()\n                    ];\n\n                    // \u041d\u0430 \u043d\u043e\u0432\u044b\u0439 email\n                    cmsUser::setUPS($ups_key, $verify_data);\n\n                    // \u043f\u0438\u0441\u044c\u043c\u043e \u043d\u0430 \u043d\u043e\u0432\u044b\u0439 email\n                    $this->controller_messages->sendEmail(['email' => $data['new_email'], 'name' => $profile['nickname']], ['name' => 'email_verify'], [\n                        'nickname'    => $profile['nickname'],\n                        'page_url'    => href_to_profile($profile, ['edit', 'password'], true) . '?new_email_confirm_hash=' . $verify_data['hash'],\n                        'hash'        => $verify_data['hash'],\n                        'valid_until' => html_date(date('d.m.Y H:i', time() + ($this->verify_exp * 3600)), true)\n                    ]);\n\n                    $success_text[] = sprintf(LANG_USERS_EMAIL_VERIFY, $data['new_email']);\n                }\n\n                // \u041f\u0440\u0438\u0448\u043b\u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435\n                if (!empty($data['new_email_confirm_hash'])) {\n\n                    if ($sended['hash'] === $data['new_email_confirm_hash']) {\n\n                        $verify_data_old = [\n                            'accepted'  => 1,\n                            'email'     => $profile['email'],\n                            'timestamp' => time(),\n                            'hash'      => string_random()\n                        ];\n\n                        // \u041d\u0430 \u0441\u0442\u0430\u0440\u044b\u0439 email\n                        cmsUser::setUPS('users.change_email_' . md5($sended['email']), $verify_data_old);\n\n                        // \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u0441\u0442\u0430\u0440\u044b\u0439\n                        $this->controller_messages->sendEmail(\n                            ['email' => $profile['email'], 'name' => $profile['nickname']],\n                            ['name' => 'email_verify_notice'],\n                            ['nickname'  => $profile['nickname'], 'new_email' => $sended['email']]\n                        );\n\n                        $profile['email'] = $sended['email'];\n                    } else {\n\n                        $errors['new_email_confirm_hash'] = LANG_CONFIRM_CODE_ERROR;\n                    }\n                }\n\n                if (!$errors) {\n\n                    $result = $this->model->updateUser($profile['id'], $profile);\n\n                    if ($result['success']) {\n\n                        list($profile, $data, $form) = cmsEventsManager::hook('users_after_edit_password', [$profile, $data, $form]);\n\n                        if (!empty($data['password1'])) {\n                            $success_text[] = LANG_PASS_CHANGED;\n                        }\n\n                        foreach ($success_text as $stext) {\n                            cmsUser::addSessionMessage($stext, 'success');\n                        }\n\n                        $this->redirectTo('users', $profile['id']);\n\n                    } else {\n                        $errors = $result['errors'];\n                    }\n                }\n            }\n\n            if ($errors) {\n                cmsUser::addSessionMessage(LANG_FORM_ERRORS, 'error');\n            }\n        }\n\n        return $this->cms_template->render('profile_edit_password', [\n            'id'      => $profile['id'],\n            'profile' => $profile,\n            'data'    => $data,\n            'form'    => $form,\n            'errors'  => isset($errors) ? $errors : false\n        ]);\n    }\n\n}\n", "<?php\n\nclass actionUsersProfileEditSessions extends cmsAction {\n\n    public $lock_explicit_call = true;\n\n    public function run($profile) {\n\n        // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u0430\n        if (!$this->is_own_profile && !$this->cms_user->is_admin) {\n            return cmsCore::error404();\n        }\n\n        if ($this->cms_user->is_admin && !$this->is_own_profile && $profile['is_admin']) {\n            return cmsCore::error404();\n        }\n\n        return $this->cms_template->render('profile_edit_sessions', [\n            'id'       => $profile['id'],\n            'profile'  => $profile,\n            'sessions' => $this->model->getUserAuthTokens($profile['id'])\n        ]);\n    }\n\n}\n", "<?php\n/**\n * @property \\modelUsers $model\n */\nclass users extends cmsFrontend {\n\n    protected $useOptions = true;\n    public $useSeoOptions = true;\n\n    /**\n     * \u041f\u0440\u043e\u0444\u0438\u043b\u044c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n     * @var boolean\n     */\n    public $is_own_profile = false;\n\n    /**\n     * \u041f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u0432 \u0434\u0440\u0443\u0436\u0431\u0435 \u0441 \u0442\u0435\u043a\u0443\u0449\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c\n     * @var boolean\n     */\n    public $is_friend_profile = false;\n\n    /**\n     * \u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d \u043d\u0430 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u043e\u0433\u043e\n     * @var boolean\n     */\n    public $is_subscribe_profile = false;\n\n    /**\n     * \u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043f\u0440\u043e\u0444\u0438\u043b\u044c\n     * @var array\n     */\n    public $profile = [];\n\n    public $tabs = [];\n    public $tabs_controllers = [];\n\n    public function routeAction($action_name) {\n\n        if (is_numeric($action_name)) {\n\n            // $action_name \u044d\u0442\u043e id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n            $profile = $this->model->getUser($action_name, 'join_inviter');\n            if (!$profile) {\n                return cmsCore::error404();\n            }\n\n            if ($profile['slug'] !== $action_name) {\n                return $this->redirectTo($this->name, $profile['slug'], $this->current_params, $this->cms_core->uri_query, 301);\n            }\n\n        } else {\n\n            if ($this->isActionExists($action_name)) {\n                return $action_name;\n            }\n\n            $profile = $this->model->getUserBySlug($action_name);\n            // \u041d\u0435 \u043d\u0430\u0448\u043b\u0438 \u043f\u0440\u043e\u0444\u0438\u043b\u044c, \u0437\u043d\u0430\u0447\u0438\u0442 \u044d\u0442\u043e \u043d\u0430\u0431\u043e\u0440 \u0441\u043f\u0438\u0441\u043a\u0430\n            if (!$profile) {\n\n                array_unshift($this->current_params, $action_name);\n\n                return 'index';\n            }\n        }\n\n        // \u0440\u0430\u0437\u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u043c \u0432\u044b\u0437\u043e\u0432 \u044d\u043a\u0448\u0435\u043d\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e\n        $this->lock_explicit_call = false;\n\n        $this->setCurrentProfile($profile);\n\n        if (!$this->cms_user->is_logged && $this->options['is_auth_only']) {\n            return cmsUser::goLogin();\n        }\n\n        if ($this->options['is_themes_on']) {\n            $this->cms_template->applyProfileStyle($this->profile);\n        }\n\n        $this->current_params = $this->cms_core->uri_params;\n\n        // \u043a\u0435\u0448\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0435\u0435 \u0432 \u0432\u0438\u0434\u0436\u0435\u0442\u0430\u0445\n        cmsModel::cacheResult('current_profile', $this->profile);\n\n        // \u041d\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u044d\u043a\u0448\u0435\u043d\u0430 (/users/id) - \u0437\u043d\u0430\u0447\u0438\u0442\n        // \u044d\u0442\u043e \u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u0440\u043e\u0444\u0438\u043b\u044f, \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c\n        // \u0441\u0430\u043c \u043f\u0440\u043e\u0444\u0438\u043b\u044c\n        if (!$this->cms_core->uri_params) {\n\n            $this->cms_template->addHead('<link rel=\"canonical\" href=\"' . href_to_profile($profile, false, true) . '\"/>');\n\n            array_unshift($this->current_params, $this->profile);\n\n            return 'profile';\n        }\n\n        // \u0418\u0449\u0435\u043c \u044d\u043a\u0448\u0435\u043d \u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u0440\u043e\u0444\u0438\u043b\u044f\n        if ($this->isActionExists('profile_' . $this->cms_core->uri_params[0])) {\n\n            $this->cms_template->addHead('<link rel=\"canonical\" href=\"' . href_to_profile($profile, [$this->cms_core->uri_params[0], $this->cms_core->uri_params[1] ?? null], true) . '\"/>');\n\n            $this->current_params[0] = $this->profile;\n\n            return 'profile_' . $this->cms_core->uri_params[0];\n        }\n\n        // \u0415\u0441\u043b\u0438 \u0434\u043e\u0448\u043b\u0438 \u0441\u044e\u0434\u0430, \u0437\u043d\u0430\u0447\u0438\u0442 \u044d\u0442\u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u044d\u043a\u0448\u0435\u043d, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u043a\u043b\u0430\u0434\u043a\u0430\n        // \u043e\u0442 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430, \u0442\u043e\u0433\u0434\u0430 \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c\n        // \u0441\u0430\u043c \u043f\u0440\u043e\u0444\u0438\u043b\u044c\n        array_unshift($this->current_params, $this->profile);\n\n        return 'profile_tab';\n    }\n\n    public function setCurrentProfile($profile) {\n\n        // \u0421\u0442\u0430\u0442\u0443\u0441\n        if ($this->options['is_status']) {\n            $profile['status'] = $this->model->getUserStatus($profile['status_id']);\n        }\n\n        // \u0420\u0435\u043f\u0443\u0442\u0430\u0446\u0438\u044f\n        $profile['is_can_vote_karma'] = $this->cms_user->is_logged &&\n                cmsUser::isAllowed('users', 'vote_karma') &&\n                ($this->cms_user->id != $profile['id']) &&\n                $this->model->isUserCanVoteKarma($this->cms_user->id, $profile['id'], $this->options['karma_time']);\n\n        $this->profile = $profile;\n\n        $this->is_own_profile       = $this->cms_user->id == $profile['id'];\n        $this->is_friend_profile    = $this->cms_user->isFriend($profile['id']);\n        $this->is_subscribe_profile = $this->cms_user->isSubscribe($profile['id']);\n\n        return $this;\n    }\n\n    public function getProfileMenu($profile) {\n\n        $menu = [\n            [\n                'title'    => LANG_USERS_PROFILE_INDEX,\n                'url'      => href_to_profile($profile),\n                'url_mask' => href_to_profile($profile)\n            ]\n        ];\n\n        if ($profile['is_deleted']) {\n            return $menu;\n        }\n\n        $this->tabs = $this->model->getUsersProfilesTabs(true, 'name');\n\n        $this->tabs_controllers = ['users' => $this];\n\n        if ($this->tabs) {\n            foreach ($this->tabs as $tab) {\n\n                // \u0432\u043a\u043b\u044e\u0447\u0435\u043d \u043b\u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\n                if (!$this->isControllerEnabled($tab['controller'])) {\n                    continue;\n                }\n\n                // \u043f\u0440\u0430\u0432\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430\n                if (($tab['groups_view'] && !$this->cms_user->isInGroups($tab['groups_view'])) ||\n                        ($tab['groups_hide'] && $this->cms_user->isInGroups($tab['groups_hide']))) {\n                    continue;\n                }\n\n                // \u043e\u043f\u0446\u0438\u044f \"\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043f\u0440\u043e\u0444\u0438\u043b\u044f\"\n                if ($tab['show_only_owner'] && $profile['id'] != $this->cms_user->id) {\n                    continue;\n                }\n\n                $default_tab_info = [\n                    'title' => $tab['title'],\n                    'url'   => href_to_profile($profile, [$tab['name']])\n                ];\n\n                if (empty($this->tabs_controllers[$tab['controller']])) {\n                    $controller = cmsCore::getController($tab['controller'], $this->request);\n                } else {\n                    $controller = $this->tabs_controllers[$tab['controller']];\n                }\n\n                $tab_info = $controller->runHook('user_tab_info', ['profile' => $profile, 'tab_name' => $tab['name']]);\n\n                if ($tab_info === false) {\n                    unset($this->tabs[$tab['name']]);\n                    continue;\n                } else if ($tab_info === true) {\n                    $tab_info = $default_tab_info;\n                } else {\n                    $tab_info = array_merge($default_tab_info, $tab_info);\n                }\n\n                $menu[] = $tab_info;\n\n                $this->tabs_controllers[$tab['controller']] = $controller;\n            }\n        }\n\n        return $menu;\n    }\n\n    public function getProfileEditMenu($profile) {\n\n        $menu = [];\n\n        $menu[] = [\n            'title' => LANG_USERS_EDIT_PROFILE_MAIN,\n            'url'   => href_to_profile($profile, ['edit'])\n        ];\n\n        if ($this->cms_template->hasProfileThemesOptions() && $this->options['is_themes_on']) {\n\n            $menu[] = [\n                'title' => LANG_USERS_EDIT_PROFILE_THEME,\n                'url'   => href_to_profile($profile, ['edit', 'theme'])\n            ];\n        }\n\n        if (cmsEventsManager::getEventListeners('user_notify_types')) {\n\n            $menu[] = [\n                'title' => LANG_USERS_EDIT_PROFILE_NOTICES,\n                'url'   => href_to_profile($profile, ['edit', 'notices'])\n            ];\n        }\n\n        if (!empty($this->options['is_friends_on'])) {\n\n            $menu[] = [\n                'title' => LANG_USERS_EDIT_PROFILE_PRIVACY,\n                'url'   => href_to_profile($profile, ['edit', 'privacy'])\n            ];\n        }\n\n        if ($this->is_own_profile || (!$profile['is_admin'] && $this->cms_user->is_admin)) {\n\n            $menu[] = [\n                'title' => LANG_SECURITY,\n                'url'   => href_to_profile($profile, ['edit', 'password'])\n            ];\n\n            $menu[] = [\n                'title' => LANG_USERS_SESSIONS,\n                'url'   => href_to_profile($profile, ['edit', 'sessions'])\n            ];\n        }\n\n        list($menu, $profile) = cmsEventsManager::hook('profile_edit_menu', [$menu, $profile]);\n\n        return $menu;\n    }\n\n    public function renderProfilesList($page_url, $dataset_name = false, $actions = false) {\n\n        $page = $this->request->get('page', 1);\n        $perpage = (empty($this->options['limit']) ? 15 : $this->options['limit']);\n\n        // \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u043e\u043b\u044f\n        $content_model = cmsCore::getModel('content');\n        $content_model->setTablePrefix('');\n        $content_model->orderBy('ordering');\n        $fields = $content_model->getContentFields('{users}');\n\n        $this->model->filterEqual('is_locked', null);\n\n        // \u041f\u043e\u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434\n        $this->model->limitPage($page, $perpage);\n\n        list($fields, $this->model) = cmsEventsManager::hook('profiles_list_filter', array($fields, $this->model));\n\n        $filters = [];\n\n        // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u043f\u043e\u043b\u044f\u043c\n        foreach ($fields as $name => $field) {\n\n            if (!$field['is_in_filter']) {\n                continue;\n            }\n\n            $field['handler']->setItem(['ctype_name' => 'users', 'id' => null])->setContext('filter');\n\n            $fields[$name] = $field;\n\n            if (!$this->request->has($name)) {\n                continue;\n            }\n\n            $value = $this->request->get($name, false, $field['handler']->getDefaultVarType(true));\n            if (!$value) {\n                continue;\n            }\n\n            $value = $field['handler']->storeFilter($value);\n            if (!$value) {\n                continue;\n            }\n\n            if ($field['handler']->applyFilter($this->model, $value) !== false) {\n                $filters[$name] = $value;\n            }\n        }\n\n        // \u0424\u0438\u043b\u044c\u0442\u0440 \u043f\u043e IP \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432\n        if($this->cms_user->is_admin && $this->request->has('ip')){\n            $this->model->filterEqual('ip', $this->request->get('ip', ''));\n        }\n\n        // \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n        $total = $this->model->getUsersCount();\n\n        if ($this->request->has('show_count')) {\n\n            $hint = LANG_SHOW . ' ' . html_spellcount($total, LANG_USERS_SPELL, false, false, 0);\n\n            return $this->cms_template->renderJSON([\n                'count'       => $total,\n                'filter_link' => false,\n                'hint'        => $hint\n            ]);\n        }\n\n        $profiles = $this->model->getUsers($actions);\n\n        if ($this->request->isStandard()) {\n            if (!$profiles && $page > 1) {\n                cmsCore::error404();\n            }\n        }\n\n        $this->model->makeProfileFields($fields, $profiles, $this->cms_user);\n\n        list($profiles, $fields) = cmsEventsManager::hook('profiles_before_list', [$profiles, $fields]);\n\n        return $this->cms_template->renderInternal($this, 'list', [\n            'page_url'     => $page_url,\n            'fields'       => $fields,\n            'filters'      => $filters,\n            'page'         => $page,\n            'perpage'      => $perpage,\n            'total'        => $total,\n            'profiles'     => $profiles,\n            'dataset_name' => $dataset_name,\n            'user'         => $this->cms_user\n        ]);\n    }\n\n    public function getDatasets() {\n\n        $datasets = [];\n\n        // \u0412\u0441\u0435 (\u043d\u043e\u0432\u044b\u0435)\n        $datasets['all'] = [\n            'name'  => 'all',\n            'title' => LANG_USERS_DS_LATEST,\n            'order' => ['date_reg', 'desc']\n        ];\n\n        // \u041e\u043d\u043b\u0430\u0439\u043d\n        if ($this->options['is_ds_online']) {\n            $datasets['online'] = [\n                'name'   => 'online',\n                'title'  => LANG_USERS_DS_ONLINE,\n                'order'  => ['date_log', 'desc'],\n                'filter' => function ($model, $dset) {\n                    return $model->joinSessionsOnline('i')->filterOnlineUsers();\n                }\n            ];\n        }\n\n        // \u0420\u0435\u0439\u0442\u0438\u043d\u0433\n        if ($this->options['is_ds_rating']) {\n            $datasets['rating'] = [\n                'name'  => 'rating',\n                'title' => LANG_USERS_DS_RATED,\n                'order' => ['karma desc, rating desc', '']\n            ];\n        }\n\n        // \u041f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435\n        if ($this->options['is_ds_popular']) {\n            $datasets['popular'] = [\n                'name'  => 'popular',\n                'title' => LANG_USERS_DS_POPULAR,\n                'order' => ['friends_count', 'desc']\n            ];\n        }\n\n        // \u0413\u0440\u0443\u043f\u043f\u044b\n        $f_groups = $this->model->getFilteredGroups();\n\n        if ($f_groups) {\n            foreach ($f_groups as $group) {\n                $datasets[$group['name']] = [\n                    'name'   => $group['name'],\n                    'title'  => $group['title'],\n                    'order'  => ['date_reg', 'desc'],\n                    'filter' => function ($model, $dset) {\n                        return $model->filterGroupByName($dset['name']);\n                    }\n                ];\n            }\n        }\n\n        return cmsEventsManager::hook('profiles_datasets', $datasets);\n    }\n\n    public function logoutLockedUser($user) {\n\n        $now        = time();\n        $lock_until = !empty($user['lock_until']) ? strtotime($user['lock_until']) : false;\n\n        if ($lock_until && ($lock_until <= $now)) {\n\n            $this->model->unlockUser($user['id']);\n\n            return $user;\n        }\n\n        $notice_text = [sprintf(LANG_USERS_LOCKED_NOTICE)];\n\n        if ($user['lock_until']) {\n            $notice_text[] = sprintf(LANG_USERS_LOCKED_NOTICE_UNTIL, html_date($user['lock_until']));\n        }\n\n        if ($user['lock_reason']) {\n            $notice_text[] = sprintf(LANG_USERS_LOCKED_NOTICE_REASON, $user['lock_reason']);\n        }\n\n        if ($user['lock_reason']) {\n            $this->model->update('{users}', $user['id'], [\n                'ip' => null\n            ], true);\n        }\n\n        cmsUser::addSessionMessage(implode('<br>', $notice_text), 'error');\n\n        cmsUser::logout();\n\n        return [];\n    }\n\n    public function listIsAllowed() {\n\n        if(empty($this->options['list_allowed'])){\n            return true;\n        }\n\n        return $this->cms_user->isInGroups($this->options['list_allowed']);\n\n    }\n\n    public function isSlugAllowed($value) {\n\n        if ($this->cms_user->is_admin || !isset($this->options['restricted_slugs'])) { return true; }\n\n        return !string_in_mask_list($value, $this->options['restricted_slugs']);\n    }\n\n}\n"], "filenames": ["install/templates/step_php.php", "system/controllers/users/actions/profile_edit_password.php", "system/controllers/users/actions/profile_edit_sessions.php", "system/controllers/users/frontend.php"], "buggy_code_start_loc": [3, 11, 13, 238], "buggy_code_end_loc": [4, 157, 13, 247], "fixing_code_start_loc": [3, 11, 14, 238], "fixing_code_end_loc": [4, 162, 18, 250], "type": "CWE-284", "message": "Improper Access Control in GitHub repository instantsoft/icms2 prior to 2.16.1-git.", "other": {"cve": {"id": "CVE-2023-4650", "sourceIdentifier": "security@huntr.dev", "published": "2023-08-31T01:15:09.623", "lastModified": "2023-09-05T19:14:55.743", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Access Control in GitHub repository instantsoft/icms2 prior to 2.16.1-git."}, {"lang": "es", "value": "Control de acceso inadecuado en el repositorio de GitHub instantsoft/icms2 anterior a 2.16.1-git. "}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:instantcms:instantcms:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.16.1", "matchCriteriaId": "56EF3F9B-6CDB-4568-AF80-EEF6D72B72F6"}]}]}], "references": [{"url": "https://github.com/instantsoft/icms2/commit/78ff8ca066e86a65ff35470b5622be3aa7d2f928", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/d92e8985-9d9d-4a62-92e8-ada014ee3b17", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/instantsoft/icms2/commit/78ff8ca066e86a65ff35470b5622be3aa7d2f928"}}