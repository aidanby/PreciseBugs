{"buggy_code": ["2-Jan-2018\n2.3.5\n\n    * Add configure option --enable-setlibversion set mark the libs with VERS_3.52\n      Linux only, so any driver built with the libs will work with closed source \n      DM's\n    * Add persistent storage of isql command line history if readline() is used (thanks Axel)\n    * Rename some local mutex functions to avoid name clashes\n    * Assorted fixes (Thanks Markus * 2)\n    * Fix regression in ini caching\n    * Make SQLDrivers look in user as well as system odbcinst.ini for driver attributes\n    * If in use, clear the ini cache when a write is done via SQLWritePrivateProfileString() so \n      the new value is read\n    * Fix problem with pooling if the environment was released by the application\n    * Add check for SQL_COLUMN_COUNT in SQLColAttribute\n    * isql would not display long error messages. Fixed now.\n    * Fix problem calling the driver to report errors if the error is from the DM and the driver \n      has not been called\n    * SQLSetConnectAttrW crashes when attempting to set SQL_ATTR_LOGIN_TIMEOUT\n    * Buffer overflow in unicode_to_ansi_copy()\n    * SQLDriverConnect with not-found FILEDSN causes crash\n    * SQLGetDescRec with null name pointer causes crash\n    * Connection string escaping does not work\n    * SQLDriverConnect/W with very long driver name causes crash\n    * Connection string with trailing empty value causes crash\n    * Freeing explicitly allocated descriptor results in writing to freed memory\n    * Buffer overflows and missing null checks in SQLConfigDataSource, SQLInstallDriverEx, and SQLWriteFileDSN\n    * Statement enters incorrect state upon SQLExecDirectW returning SQL_NO_DATA\n    * SQLBulkOperations fails to exit async state after success\n    * SQLFreeStmt causes prepared statements in S1 or S2 to erroneously transition to S3\n    * Buffer length fixes for SQLGetDiagField\n    * SQLSetConnectAttrW and Unicode string pre-connect attributes do not work\n    * SQLGetData and SQLSetPos async states are incorrect\n    * Various string conversion and length issues in SQLColAttribute(s)\n    * Missing buffer length check in SQLColAttribute(s)W\n    * SQLGetStmtAttr state handling incorrect in S5, S6, and S7 (via SQLExtendedFetch)\n    * SQLSetPos and SQLExtendedFetch state management fixes\n    * SQLExecDirect/W erroneous transition to S1 upon error in S5\n    * Async SQLGetData and SQLExecDirect/W fails to restore state upon cancellation\n    * SQLFetchScroll cannot move cursor back into the rowset\n    * SQLSetDescField doesn't adjust the length of the buffer when converting to unicode\n    * SQLGetDescField/W and SQLSetDescField/W do not check for negative buffer lengths\n    * SQLSetStmtAttrW SQL_ATTR_APP_PARAM_DESC and SQL_ATTR_APP_ROW_DESC does not accept null\n    * SQLGetData async state reentrancy issues\n    * SQLDriversW off-by-one in enumerating driver list\n    * SQLPrimaryKeys does not pass length in characters to driver\n    * SQLGetConnectAttr with string attributes truncates to half buffer length\n    * SQLTransact with autocommit enabled erroneously changes statement state\n    * SQLDataSources/W fails to reset list position upon end\n    * SQLGetEnvAttr successfully returns unset SQL_ATTR_ODBC_VERSION\n    * Lack of SQL_HANDLE_SENV support\n    * SQLAllocEnv fails to set environment version correctly\n    * SQLMoreResults with streamed output parameters returns unexpected HY010\n    * Custom pre-connect pointer attributes are truncated to 32 bits\n    * 08003 message should be \"Connection not open\"\n    * SQL_ATTR_ACCESS_MODE set using SQLSetConnectOption/W before connecting does not persist after disconnecting\n    * SQL_ATTR_AUTOCOMMIT incorrect default value before connecting\n    * SQL_AUTOCOMMIT set using SQLSetConnectOption/W before connecting does not persist after disconnecting\n    * SQLAllocHandle/SQLFreeHandle with invalid handle type should return SQL_INVALID_HANDLE\n    * SQLAllocHandleStd not setting ODBC version correctly\n    * SQLBindParameter does not ignore BufferLength for DAE parameters\n    * SQLBindParameter does not ignore BufferLength for fixed-length parameters\n    * SQLBindParameter returns \"Invalid application buffer type\" instead of \" Program type out of range\"\n    * SQLCancel with 01S05 returned from driver should result in SQL_SUCCESS, not SQL_SUCCESS_WITH_INFO \n      (see https://msdn.microsoft.com/en-us/library/aa392708(v=vs.85).aspx )\n    * SQLColAttribute/SQLColAttributes should return number of bytes needed for Unicode string when truncating\n    * SQLColumnPrivileges/W differing error message precedence from Windows DM and order in ODBC spec\n    * SQLColumns/W extraneous checks on null string's length\n    * SQLCopyDesc does not copy descriptors across connections correctly\n    * SQLDescribeParam extraneous checks for state\n    * SQLDriverConnect/W adds extraneous DM prefix to diagnostic messages\n    * SQLDriversW before ODBC version set returns incorrect SQLSTATE\n    * SQLFetch in state S7 does not return error from DM\n    * SQLFetchScroll missing check for SQL_FETCH_BOOKMARK\n    * SQLForeignKeys/W missing check for null table names\n    * SQLGetConnectAttr/W erroneously retrieves attributes with no default (SQL_ATTR_PACKET_SIZE, SQL_ATTR_QUIET_MODE)\n    * SQLGetConnectAttr/W fails to get some set attributes before connecting\n    * SQLGetConnectAttr/W fails to retrieve set attributes with no connection\n    * SQLGetConnectAttrW returns incorrect value for SQL_ATTR_TRACE\n    * SQLGetConnectOption/W cannot retrieve SQL_ODBC_CURSORS before connection\n    * SQLGetConnectOption/W fails to retrieve SQL_LOGIN_TIMEOUT before connecting\n    * SQLGetConnectOption/W fails to retrieve SQL_ATTR_ACCESS_MODE set with SQLSetConnectOption/W\n    * SQLGetData and SQLSetPos async states are incorrect\n    * SQLGetData missing check for cursor end indication; SQLSetCursorName/W fails to clear previous diagnostic records\n    * SQLGetDiagField/W does not check record number for SQL_DIAG_ROW_COUNT and SQL_DIAG_DYNAMIC_FUNCTION_CODE\n    * SQLGetDiagField/W missing check for negative buffer length for string fields\n    * SQLGetDiagField/W inconsistent handling of statement-only diagnostic fields\n    * SQLGetInstalledDrivers off-by-one length\n    * SQLGetStmtOption various state handling issues\n    * SQLSetConnectAttr/W SQL_ATTR_CURRENT_CATALOG extraneous check with error 24000\n    * SQLSetConnectAttr/W does not prevent attempts to set ODBC 3.x statement attributes\n    * SQLSetConnectAttr/W with null string attributes causes crash\n    * SQLSetConnectOption passes SQL_ATTR_TRACEFILE to the driver\n    * SQLSetConnectOption/W or SQLSetConnectAttr/W missing validity checks for SQL_ATTR_TXN_ISOLATION\n    * SQLSetConnectOption/W setting SQL_ATTR_TRACEFILE to null results in different error\n    * SQLSetCursorName/W missing checks for negative name length\n    * SQLSetDescField/W missing check for negative SQL_DESC_COUNT\n    * SQLSetParam missing various error checks for invalid data types and buffer \n    * SQLSetPos does not check for state S5\n    * SQLSetPos missing checks in state S7\n    * SQLSetScrollOptions various state handling issues\n    * SQLSetStmtOption/W missing check for positive rowset sizes\n    * SQLSpecialColumns/W error precedence differs from Windows DM\n    * SQLSpecialColumns/W incorrect check for SQL_NTS string lengths\n    * SQLStatisticsW uniqueness parameter missing validation\n    * SQLTablePrivileges/W extraneous checks on null string's length\n    * Various issues with SQLGetFunctions\n    * Various string conversion and length issues in SQLColAttribute; missing buffer length check in SQLColAttributeW\n    * As above, but for SQLColAttributes and SQLColAttributesW; incorrect check for SQL_COLUMN_COUNT\n    * Setting SQL_ATTR_TRACEFILE to null value results in different error\n    * check_target_type allows driver-specific C data types for ODBC < 3.8\n    * fix empty SQL_DIAG_SERVER_NAME field in DM-supplied diag recs\n    * fix differing behaviour for an empty string DSN in SQLConnect/W\n    * Alter isql to return errors from SQLMoreResults\n    * Handle case of building on mingw-w64\n\n3rd-Aug-2015\n2.3.4\n\n    * Fix typo in the loading of the cursor lib, reports\n\n\tinternal error, unexpected SHLIBEXT\n\n2nd-Aug-2015\n2.3.3\n\n    * Reporting of logging state was broken in SQLGetConnectAttr\n    * Fix incorrect text against HY007\n    * Add -L option to isql to increase max column data display\n    * Update automake toolset in svn\n    * Add SQLFreeStmt( SQL_CLOSE ) function to SQLCancel\n    * Allow SQL_NTS as a buffer length to SQLBindParameter\n    * More manual pages for the tools\n    * Fix buffer overrun returning long diagnostic from driver\n    * Cross call between wide and ascii error reporting in the driver when needed\n    * Fix some possible unchecked memory references after malloc\n    * Prevent free( NULL ) in SQLGetDiagRecW\n    * Add missing A->W conversion in SQLGetStmtOption\n    * Allow iconv to convert strings into the driver with differing A and W lengthts (UTF)\n    * SQLDataSourcesW takes buffer_lenghts as characters not bytes\n    * Fix memory leak in SQLGetDiagRec\n    * Allow setting custom non standard attributes via DMStmtAttr, format is:\n\n        DMStmtAttr=[xxxx]=\\yyy\n        DMStmtAttr=[xxxx]={ssss}\n\n        where xxxx = integer attribute to set, yyy is decimal numeric value and\n        ssss is a string value\n\n    * Add check in SQLGetData for null target value or negative buffer length\n    * Fix memory leak when using the cursor lib\n    * Catch incorrectly expanded SHLIBEXT\n    * There was a bug in the ini caching, now fixed\n    * More ODBC 3.80 additions (streaming parameters)\n    * Check for NULL handle in __validate_xxx()\n    * Avoid potential memory leak in SQLAllocStatement\n    * Avoid buffer overflow via environment variamles\n    * Fix some typos\n\n8th-October-2013\n2.3.2\n\n    * The logging of WStrings was using the incorrect length in some cases\n    * Pass SQLDescribeCol call to driver when in state 2 (not a cursor spec).\n    * Pass SQLMoreResults call to driver when in state 2 (not a cursor spec).\n      Both the last two changes are not as per the original book state table\n      but allign with the current MS driver manager\n    * The -e option to isql got lost somewhere. Back in now\n    * Update install-sh\n    * SQLCancel assumed that the DM was being built with thread support\n    * Try and speed up SQLTransact and SQLEndTran operation\n    * Add missing \\ in Postgres7.1 Makefile\n    * Correct some potential buffer overflows\n    * Handle SQL_NEED_DATA from a SQLMoreResults \n    * Get the local charset via nl_langinfo(CODESET) when asking the DM to do ASCII-UNICODE conversions\n    * Handle (and remove) leading spaces from ini entries\n    * Fixed unicode conversion problems in SQLGetDiagField(W)\n    * missing terminating null in iusql\n    * add to the list of errno states that does not cause a create of the ini file\n    * SQLSetConnactAttr() -> SQLSetConnectAttrW() was passing incorrect string length\n    * Fix double free in SQLGetDiagFieldW\n    * Fix Unicode/Ansi conversion problem in SQLGetDiagFieldW.c\n    * Add support for Driver64 in SQLDriverConnectW\n    * Add missing unicode setting when returning a connection to the pool\n    * Tidy up leaking iconv handles if connect_part_one fails\n    * Fix (and avoid) some out of memory problems\n    * Wrap lt_dlinit and dlerror in the lib mutex\n    * Add slencheck executable to try and find the sizeof(SQLLEN) from a installed driver\n    * SQL_NO_DATA after SQL_STILL_EXECUTING in SQLExtendedFetch was not setting the state correctly\n    * A little more 3.80 stuff being added\n    * Added fixes found by coverity\n    * Added man pages\n    * Patches to update VMS build\n    * Change mutex protection around release_env\n    * Altered strlen to be count of bytes in SQLGetDiagFieldW\n    * Add check for W function support in do_attr\n    * Allow SQLDrivers to return attribute length with no supplied buffer\n\n26th-November-2011\n2.3.1\n    \n    * Change type definition of a integer in SQLConnect.c, just to avoid\n      confusion\n    * Allow setting the DM overrive values in the connection string to SQLDriverConnect\n      for example\n      \"DRIVER={Easysoft ODBC-SQL Server};Server=myserver;UID=user;PWD=pass;DMStmtAttr=SQL_QUERY_TIMEOUT=10;\"\n    * Error and info message order was being inverted by the driver manager\n    * Fix memory leak in SQLDriverConnect.c (Thanks JM)\n    * The keyword matching for DRIVER=, DSN= etc was case sensitive. Make it insensitive now\n    * Avoid sprintf NULL pointer problem in SQLGetDiagRec\n    * Fix typo affecting the pooling of connections, (thanks Chris)\n    * Fix SunCC _mcount problem\n    * Attempt to stamp version info on the libs generated. There are aps in use linked against other \n      driver managers that expect VERS_3.52\n    * Fix potential buffer overrun when using SAFEFILE\n    * Fix mutex problem in the exit from __SQLGetInfo (thanks Richard)\n    * Allow getting SQL_DM_VER via SQLGetInfo before connecting to a driver\n    * Generate unixodbc_conf.h using macros to allow cross compiling\n    * Fix some libltdl problems \n    * Fix some naming problems with the cursor lib\n    * Fix odbcinst problems on systems without pwd.h\n    * Change lib version to 2 to reflect SQLLEN changes in v2.3\n    * Fix threading problem (thanks Petr Vandrovec)\n    * Allow use of lib name in a DRIVER= connection string\n    * Change default threading protection to 0, most drivers should be thread\n      safe by now. If the driver is at all thread safe, allow SQLCancel to bipass the\n      interlock.\n    * Performance change to handle large numbers of connection and statement handles better.\n      Thanks for the change from the folks at Acision.\n    * Add -k option to isql to treat the DSN as a connection string and use SQLDriverConnect\n        isql -k \"DSN=server;UID=test;PWD=test\"\n    * Couple of the SQLSetConnactAttr values are now SQLULEN instead of SQLUINTEGER\n    * SQLSetConnectAttr was passing a char length instead of a byte length into the \n      Driver SQLSetConnectAttr when converting from Ansi->Unicode\n    * Driver version was not being held when a second connection was made to the driver\n\n20th-April-2010\n2.3.0\n\n\t* Try and rationalise the way the connection process find the driver\n\t  version and supported functions\n\t* Sort out problem in isql with blank lines\n\t* Stop libthread from being used under AIX\n\t* Move the GUI parts off into a new project\n\t\thttp://sourceforge.net/projects/unixodbc-gui-qt/\n\t* Strip out the GUI parts. I have also removed the spec files\n\t  as they will need redoing,\n\t* Move the Test parts off into a new project\n\t\thttp://sourceforge.net/projects/unixodbc-test/\n\t* Add interface into odbcinstQ to allow for a dialog if SQLDriverConnect\n\t  is called without a DSN= (as the MS spec)\n\t* Allow the setting of a default Threading level in the ODBC section\n          of odbcinst.ini\n        * Change double format string in Postgre7.1 driver\n\t* Add missing CR to output of odbcinst\n\t* add fixes to MiniSQL driver\n\t* Add missing .y in nn driver, now I need to get it to work\n    * Assoured bux fixes and format problems, thanks Tom\n\t* SQLBindCol on metadata calls was incorrectly going via the cursor lib if it \n\t  was enabled\n\t* fix isql problem with nested definitions.\n\t* Add configure option to enable building of driver config libs\n\t* Shift build to using config.h, the compile lines were so big it was hard to \n\t  see warnings\n\t* Fix bug in isql when using -b option.\n    * Check attribute values when setting connection and statement attrs\n    * Check for valid pointers in SQLGetInfo(W) and SQLGetFunctions\n    * Add extra checks for states in SQLCopyDesc\n    * Add --enable-stricterror option to allow compliance with the error reporting\n      definition, driver errors don't have the unixODBC prefix\n    * Check for statements in the NEED_DATA state when calling SQLEndTran\n    * Extra error check for SQLPutData\n    * Check handle type in SQLEndTran\n    * Prevent seg fault if there are no driver error functions\n    * the -n option to isql was not working correctly\n    * Stripped out all the bespoke LDTL configure stull, not just what libtoolize \n      provides\n    * Fix problem where ansi_to_unicode_alloc didn't leave space for the NULL\n      and could cause memory corruption\n    * Add the ODBC 3.80 additions that MS have produced. I am sure I remember \n      the standard being given to XOpen, what do I know :-)\n    * Change the file open mode for the ini file from w to w+ just in case the \n      original open failed but the file did exist\n    * Fix configure problem preventing the CHAR encoding from being passed\n    * Remove white spave from ini write, not all drivers use unixODBC ini functions \n      and can handle the spaces\n    * Update config.guess to current GNU version including support for AIX6\n    * Create SVN repository at sourceforge\n    * Add cast to fix problem in SQLSetConnectOption\n    * Fix SQLINTEGER<->SQLLEN conversion broblem in SQLNativeSQL\n    * Fix bug that stopped setting SQL_ATTR_CONCURRENCY to SQL_CONCUR_VALUES\n    * Change minor version number because of the SQLLEN change\n    * Remove unintended trailing white space from log generation\n\n\n19th-Nov-2008\n2.2.14\n\n\t* missing protype in 2.2.13 made the build fail on some platforms\n\n18th-Nov-2008\n2.2.13\n\n\t* There was a mutex around iconv that needed adding. Without this, \n \t  there was a potential thread problem\n\t* Fix problem with SQLGetDiagRec/Field returning double driver \n\t  errors\n\t* odbctest was using the wrong handle for SQLGetConnectOption\n\t* remove startup thread race condition\n\t* fix descriptor memory leak with UNICODE only drivers (thanks Ian)\n\t* Alter the default 64bit build mode, and change the flag to \n\t  BUILD_LEGACY_64_BIT_MODE\n\t* Fix a couple of 64bit problems\n\t* create unixodbc_conf.h on install to contain compile settings\n\t* Allow the GUI parts to build with qt4\n\t* try and deal with drivers that call internal W functions and \n\t  end up in the driver manager (informix for example). Enabled\n\t  by --enable-handlemap=yes when configuring\n\t* Fix leak of iconv handles\n\t* Allow the setup API to call through to the wide driver functions\n\t* Fix potential seg fault in SQLGetPrivateProfileString\n\t* Fix a couple of broken casts, and some MS 64bit changes\n\t* Add check for postgres driver getting into a spin wait\n\t* Fix logging that reported the setting of env attrs failing\n\t* Add isql option to wrap strings with quotes\n\t* Add isql option -3 to make isql use ODBC 3 calls instead of 2\n\t* Add timestamp to logging output\n\t* Pull any errors from driver whern SQLBrowseConnect returns SQL_NEED_DATA\n\t* isql now displays any warnings from SQLMoreResults\n\t* Add include path to odbc_config --cflags output\n\t* Fix some SQLLEN/SQLINTEGER conflicts in the cursor lib\n\t* isql now checks if the driver has SQLMoreResults before calling it\n\t* A couple of tweeks in the txt driver\n\t* Fix More than 1 log msg relevant in odbcinst now\n\t* Changed UI plugin technique for odbcinst see... \n\t  ODBCConfig > main.cpp, and \n\t  odbcinst > SQLManageDataSources.c and \n\t  odbcinstQ4 > SQLManageDataSources.cpp \n\t* Add more 64 bit changes, remove SQLROWCOUNT and its frends from 64 bit\n\t  land\n\t* Couple of descriptor typo's fixed (Thanks Jess)\n\t* Add odbcinstQ4 to support pure Qt4 SQLCreateDataSource and \n\t  SQLManageDataSources\n\t* Add ODBCCreateDataSourceQ4 as Qt4 based exec to SQLCreateDataSource\n\t* Add ODBCManageDataSourcesQ4 as Qt4 based exec to SQLManageDataSources\n\t* Add \"-c\" option to odbcinst to call SQLCreateDataSource\n\t* Add \"-m\" option to odbcinst to call SQLManageDataSources\n\t* Add ODBCDataManagerQ4 \n\t* Add Wrappers (C++, QtCore 4, QtGui 4 - thin wrappers to ODBC)\n\t* Add more complete set of driver config options to GUI config\n\t* Fix incorrect export file in odbcinstQ\n\t* Added some extra features to isql (thanks to Ron Norman for the\n          ideas)\n\t* Add diag support lib for driver development  and possibly DM\n\t  This is very 'black-boxed' on purpose.\n\t* Fix Replaced diag code in txt driver to use new diag lib.\n\t* Add New odbctrac library.\n\t* Add Threading can not be config via Qt(4) based GUI\n\t* Add New ODBCString library.\n\t* Add odbcinst.ini -> ODBC -> TraceLibrary and corresponding GUI Qt(4)\n\t  config.\n\t* prevent the cursor lib from seg faulting if the query isn't a select\n\t* Add SQLULEN size display to the output of odbcinst -j\n\t* Add mutexes in odbcinst/_logging.c\n\t* Remove the MySQL Driver, its woefully out of date now\n\t* Remove incorrect path in vms_odbc.opt\n\t* rename trace.h to odbctrace.h to avoid potential name conflicts \n\t  and move to include dir\n\t* update unixODBC.spec file\n\t* Add README.CYGWIN\n\t* Fix build problem with QT4 without QWizard support\n\t* Alter how the Ansi-Unicode mapping is done, so a unicode function can be \n\t  passed to the driver (if it supports it) even if a non unicode connect was done\n\t* Fix buffer overrun in SQLDriverConnectW and SQLColAttributesW\n\t* I have cut back on a lot of the GUI parts that are being added. The goal is to\n\t  create a distinct set of files that contains these and other parts that are\n\t  not part of the core goal of providing ODBC. Likewise the drivers will go on the \n\t  next release, as most DB's now have their own folk working on their drivers\n\t  and they all interoperate with unixODBC so its just adding confusion including them\n\t  here (IMHO that is)\n\t* Prevent a potential buffer overrun in the DM\n\t* The processing of --enable-rtldgroup had been dropped, back now\n\t* Allow the cursor lib to handle multiple result sets\n\n\n13th-Oct-2006\nRelease 2.2.12\n\t\n\t* Add missing SQLSetStmtOptionA and SQLSetStmtOptionW \n\t* The config string being passed into ConfigDsn was wrong, removed \n\t  semicolon, and added terminating double null\n\t* Add help help to isql\n\t* Couple of changes to make the build on OSX work better\n\t* Alter odbctest FullConnect to use SQLDriverConnect \n\t* Replace a missed flag for true 64 bit operation\n\t* Add ODBC3<->ODBC2 type mapping in SQLSetParam\n\t* Add missing SQLSetStmtOptionW.c\n\t* Tidy up the search for GUI lib code in SQLManageDatasource\n\t* Backport a couple of changes from the Debian build into the \n\t  cursor lib\n\t* Add extra config settings to the MaxDB/SapDB setup lib\n\t* Fix possible exit from SQLConnect without having closed\n\t  in the driver\n\t* Fix configure problem on Tru64\n\t* Fix a build issue on Sinix\n\t* Allow calling metadata functions via the cursor lib\n\t* Alter args to SQLParamOptions\n\t* Fix bug preventing attribute length from being returned from \n\t  SQLDrivers\n\t* Fix broken iusql\n\t* SQLTransact via the cursor lib has the args swapped\n\t* Remove leak in the postgres driver (error messages were not being\n\t  released), and yet a different leak in convert.c\n\t* Add code to allow the Cursor lib to call SQLGetDiagRec\n\t* Updated libtool, automake and autoconf, so expect problems\n\t  for the next few months...\n\t* Add new QT detection macros (Thanks Peter)\n\t* Removed some unneeded strlen's from the postgres drivers\n\t* Small change to the logging in SQLBrowseConnect\n\t* Add additional SQLGetInfo value SQL_ATTR_DRIVER_THREADING (1028) that\n\t  returns a SQL_USMALLINT containing the level of thread protection\n\t  afforded the driver by the driver manager\n\t* Fix small bug that prevents SQLDrivers from returning the first entry if\n\t  SQL_FETCH_FIRST is not used\n\t* Make DataManagerII check the DB's quote char when creating SQL\n\t* The cursor lib wasn't correctly returning the last rowset \n\t* Fix problem with the cursor lib, rowsets and SQLExtendedFetch\n\t* Fix couple of spelling mistakes in isql\n\t* Allow decoupling of SQLHANDLES between application and driver, there is \n\t  a 64bit DB2 where the driver handles are int's but unixODBC uses void *.\n\t  There is a define for DRV_SQLHANDLE in DriverManager/drivermanager.h that\n\t  allows this choice at build time\n\t* Add a few extra checks for only unicode API's from the driver\n\t* Check for existance of qt-mt lib before adding to link line\n\t* added missing cleanup in Postgres driver\n\t* Added a contrib directory with (so far) a new ODBCConfig and ODBCStats \n\t  apps, (Thanks Fizz for those).\n\t* Ask the driver when there are no errors left in the DM's store\n\t* Add a couple of unicode fixes suppled by Oracle\n\t* Small fix for call to SQLGetDiagField\n\t* Fix silly typo that was using sizeof( SQL_WCHAR ) instead of SQLWCHAR\n\t* Add check for C_TYPE in SQLBindCol, SQLBindParameter, SQLBindParam, \n\t  and SQLGetData\n\t* Fix overflow if the LOG_MESSAGE_LENGTH is increased\n\t* Save the last arg for SQLSetConnectAttr if called before connection for \n\t  later passing to driver\n\t* Fix missing mutex release in SQLFreeHandle (thanks Mark)\n\t* Add missing maps from unicode in SQLSetDescFieldW and SQLSetStmtAttrW\n\t* Handle resetting statement descriptors to implicit values, \n\t  by passing in NULL or the implicit descrptor  to SQLSetStmtAttr with \n\t  the attribute SQL_ATTR_APP_PARAM_DESC or SQL_ATTR_APP_ROW_DESC\n\t* Avoid calling SQLGetInfo for every SQLEndTran/SQLTransact\n\t* Remove inconsistency in the return value from SQLGetPrivateProfileString\n\t* Fix broken QT_VERSION detection\n\t* Add UNICODE wrapper functions in libodbcinst. The ini file is still ascii, so\n\t  its not got full support at the moment, but any apps that need the W functions\n\t  should build now\n\t* Add GUI support for SQLCreateDataSource\n\t* More informative error message if a invalid handle is passed to SQLAllocHandle\n\t* Add TIMESTAMP_NO_TMZONE to Postgres drivers types\n\t* The ANSI to UNICODE mapping in SQLTablePrivilges was broken\n\t* Fix incorrect buffer length in SQLGetInfo when calling unicode drivers\n\n4-March-2005\nRelease 2.2.11\n\t\n\t* Fix a couple of typo errors in postgres driver and odbctest\n    * Fix problem where ini files could be truncated under heavy\n      load\n    * Fix potential hang with FILEDSN's if the connect string included \n      a DSN= entry as well\n    * Don't save the SAVEFILE attribute in the filedsn.\n    * Fixed bug that prevented the setting of some attributes via the \n      DMConnAttr method\n    * Removed the -module entry from the cursor lib, it prevents it\n      building on HPUX.\n    * Add a couple of extra info types to the pull down in odbctest\n    * SQLGetInfoW was returning the wrong length when converting from \n      the ANSI call. The same was also going on the other way. Also\n      fixed same thing for other calls.\n    * Fix incorrect value in SQLFetchScroll in odbctest\n    * Fix memory leak in odbcinstQ\n    * Check for MOC being found, before building GUI parts\n    * Add list of export symbols to libodbcinst\n    * Fix a problem in the cursor lib returning blobs\n    * SQL_DIAG_NUMBER was being stored and returned as a SQLINTEGER \n      instead of a SQLRETURN\n    * Check if we can include sys/stats.h in iniOpen.c\n    * Fix potential buffer overun in SQLConfigDataSource()\n    * Fix problem in odbctest that prevented intervals from being displayed.\n    * Cope with SHLIBEXT not being set when finding the cursor lib\n    * Add a couple of missing Setup64 checks\n    * Small change in __info to conserve memory\n    * Add odbcinst.exp to distrib\n\t* Add missing ODBC2 installer stubs\n\t* Fix typo in SQLStatistics\n\t* Not passing user names and password into isql passes NULLS not empty \n\t  strings into SQLConnect\n\t* Add missing SQLPrepareA from the driver manager export file\n\t* Make the default for DontDLClose 1, it doesn't do any harm, and fixes\n\t  some segfaults\n\t* Fix printf format in the postgres driver on 64 platforms\n\n29-Sep-2004\nRelease 2.2.10\n\n    * Add additional check in sqltypes.h to detect AIX 64 bit\n    * Fixed minor copypaste error in configure.in\n    * Fixed problem in configure script that prevented it using the \n      qt-header and qt-lib config args. And allow the QT bin dir \n      to be set.\n    * Add new spec file (Thanks Stefan)\n    * Alter string initialisation in isql to reduce memory use on \n      some platforms\n    * Remove the parts of odbcinstext.h that only are needed in \n      unixODBC builds from outside app builds. (Cheers Stefan)\n    * Small fix to DataManagerII\n    * Protect iconv handle in threaded environments\n    * Extend cursor lib to cope with where clauses\n    * Remove incorrect duplicate function in iniOpen.c\n    * Strip FILEDSN from connection string before passing to driver\n    * If using a cursor lib use \"IS NULL\" instead of binding nulls\n    * Allow 32 and 64 installations to coexist using a Driver64 entry\n      in odbcinst.ini\n    * Fix uninitialsed value that was causing \"Driver does not support \n      the requested version\" warning\n    * Fix typo in sqltypes.h that failed when building Perl DBD::ODBC\n    * INI cacheing is not on by default, it can lead to a memory leak\n    * Alter the Makefile.am's so builds outside the config dir can be\n      done\n    * Fix possible buffer overrun in SQLConnect\n    * Replaced crypt auth in postgres with md5 for 7.1 Postgres driver\n    * Fix memory leak in descriptor thread support\n\n24-Jun-2004\nRelease 2.2.9\n\n    * Fix problem so that if SQLGetPrivateProfileString fails because \n      odbcinst.ini doesn't exist, it copys the default value into the\n      output.\n    * Avoid caling SQLFreeEnv the driver more than once.\n    * Rename lo_xxx func in Postgres driver(s) to avoid clash with\n      postgres lib.\n    * Add odbc-config to find compile time options for use with\n      other build tools\n    * Fix call to SQLParamData in cursor lib\n    * Add SQL_NULL_DESC to include files\n    * Remove -M for unixware builds from libtool\n    * Fix descriptor bug in SQLCopyDesc (Thanks Erik)\n    * Add extra iconv targets\n    * Fix bug that stopped RTLD_GROUP from being added to dlopen\n    * Remove mem leak if libodbc.so is loaded using dlopen instead of\n      linked as is normally done.\n    * Add check for LP64 in sqltypes.h\n    * Remove dlclose from ODBCConfig\n    * Fix typo in the readline detection in configure\n    * Fix potential hang with semaphore allocation in driver manager\n    * Alter how the state is set after a SQLParamData to S5 insted of S4\n    * Stop the driver manager from calling SQLFreeEnv twice in the driver\n    * Add new MySQL source from MyODBC 3.51.07\n    * Update the uo_fopen functions\n    * Add some extra mutex locks around end_tran code.\n    * Alter the flag to build real 64 bit mode to \n      BUILD_REAL_64_BIT_MODE\n    * Update a couple of prototypes for 64 bit builds\n    * Fix assorted 64 bit warnings and cast issues\n\n17-Feb-2004    \nRelease 2.2.8\n    \n    * Fix bug in SQLMoreResults that moves to incorrect state\n    * Fix problem where metadata calls fail if in STATE_S5\n    * Fix bug inserting ini entry with more than one '='\n    * Fix some stupid leaks in the connection pooling code\n    * Allow the driver manager to probe a pooled connection, to\n      see if its valid. Set the query to use in the odbcinst.ini entry\n      by setting CPProbe = SQL, for example this works well for postgres\n\n        [PostgreSQL]\n        Description\t\t    = Postgres SQL Driver\n        Driver\t\t        = /usr/local/lib/libodbcpsql.so.2.0.0\n        Setup\t\t        = /usr/local/lib/libodbcpsqlS.so\n        CPTimeout\t\t    = 1000\n        CPTimeToLive\t\t= 100\n        CPProbe             = select user\n        FileUsage\t\t    = 1\n        DisableGetFunctions\t= 0\n        DontDLCLose\t\t    = 1\n\n    * Fix the SQLGetPrivateProfile code when passing NULL sections or\n      names.\n    * Fix SQLGetData to avoid a problem returning unicode from ODBC2 \n      drivers.\n    * Make the header sqlext.h include the unicode header sqlucode.h. This\n      matches the MS header files.\n    * Added DriverConfig lib for Mimer. (From Mimer)\n    * Make connection pooling check using SQLGetConnectOption as well\n      as Attr\n    * Fix leak if iconv is used and a connection fails\n    * Add configure option to disable the use of readline in isql\n\n02-Dec-2003\nRelease 2.2.7\n    \n    * Add missing comma in Oracle setup lib\n    * Add -l option to isql to allow setting locale\n    * Fix problem in SQLDriverConnectW that prevented connecting to \n      UNICODE driver.\n    * Remove a couple of the attribute mappings from SQLColAttribute\n      when going from V2 app to V3 driver. \n    * Clear SQLError errors in the same was as SQLGetDiagRec (this\n      will help PHP out somewhat).\n    * Add a check to handle driver that don't support SQLGetEnvAttr\n    * Allow ATTR; in set attr lists from ini file\n    * Small change to warning dialogs in odbctest (Thanks Mark).\n    * Fix the cursor lib to work via SQLFetch as well as the other\n      fetches.\n    * Update the README.OSX file to cover building the cursor lib.\n    * Remove the SQLNumResults() call after a execute. This means the\n      DM doesn't know if there is a result set, but it seems to match\n      what the MS one is doing.\n    * Fix a major mistake in the thread protection, it worked fine until\n      the driver returned a error.\n    * Fix write beyond string bound in SQLDriverConnect.c (Thanks Ocke)\n    * Add call to setlocale( LC_ALL, \"\" ) in isql.c, can also be set using \n      -l option\n    * Add initial support for Microsoft Interix, details in README.INTERIX\n    * small change to ODBCConfig to have the password field in the driver \n      properties hide the password\n    * Make both # and ; comments in ini files\n    * Update README.OSX to cover changing driver libs into bundles\n    * Fix a couple of small display problems in odbctest\n    * minor updates to odbctest:\n        Have the gui list match the input order and the ini file\n        Restore the selection after Add/Remove\n    * Expand a text buffer to avoid overflow\n    * Add RTLD_MEMBER to dlopen args if available (AIX)\n    * Fix bug in SQLWritePrivateProfileString\n\n21-July-2003\nRelease 2.2.6\n    \n    * Add SQL...A() functions as well as W\n    * Add some 64 Bit changes\n    * Add support for SQL_BIGINT in Postgre7.1 driver\n    * Fix bug in libtool that fixes a call to access\n    * Allow setting of odbcinstQ lib load with either\n      environment variable ODBCINSTQ or in the [ODBC] section\n      of odbcinst.ini with a odbcinstq = /path/to/libodbcinstQ.so\n    * Alter the way SQLDataSources works (again :-)\n    * Add configure option to force the way dlopen works\n    * Fix bug in stats collection \n    * Add call to endpwent() to avoid a small leak\n    * Allow isql to handle SQLMoreResults\n    * Add option TracePid in [ODBC] section of odbcinst.ini, setting\n      this makes the DM treat the TracePath as a path to a directory, \n      and creates seperate log file for eack PID in use, mainly of\n      use when used under something like apache.\n    * Add extra unicode string for Solaris, see README.SOLARIS\n    * Sort error messages according to state (as per the spec)\n    * Remove trailing \\ from doc/Makefile.am\n    * Fix memory corruption in postgres driver that caused table \n      creation under OpenOffice to fail\n    * Tidy up gODBCconfig so it builds with current tools (or \n      so I hope).\n\n26-Feb-2003\nRelease 2.2.5\n\n    * On error from SQLMoreResult don't change to S1\n    * Fix build problem with QT 3.1.1\n    * Fix spelling of error message\n    * Fix bug where multiple connections give ODBC version error\n      (thanks Jay Cai)\n    * Increase the TEXT_FIELD_SIZE in the PG drivers\n    * Set output handle to NULL if SQLAllocHandle call fails\n    * Return any errors from the drivers SQLAllocConnect\n    * Update version of automake and autoconf used to produce\n      distributions\n    * rebuild libtools configure to work with new autoconf\n\n24-January-2003\nRelease 2.2.4\n    \n    * Make the DM look in libdir for the cursor lib\n    * Additions to DataManagerII\n    * More thread safe issues and fixes\n    * Fix uninitialised pointer in SQLDriverConnect.c\n    * Fix memory leak in SQLGetDiagRec\n    * Add missing SAG conformance SQLGetfo call in odbctest\n    * Fix bug in SQLDriverConnect where warnings were not getting into\n      the error stack\n    * Add quotes to table names in DataManager\n    * update the file \"missing\"\n    * Add missing SQL_DECIMAL in logging conversions\n    * VMS build changes... (Thanks Craig)\n        * get caught up with changes since the original VMS port\n        * follow the compiler warnings to fix myriad small nits throughout \n             the sources\n        * change the handling of shareable images so they no longer need to \n             be placed in SYS$SHARE\n        * improve the installation and set-up process\n    * Make the cursor lib build without needing libodbc, it breaks on HPUX\n    * Fix allocation problem in cursor lib\n    * Fix potential seg fault in cursor lib, when bind is done with null \n      indicator\n    * Update README.QNX to cope with QNX 6.2\n    * Fix problem with flags to dlopen\n    * Make the exit logging in the driver manager display unknown return \n      codes\n    * Fix bug in driver manager where a SQLAllocHandle in the driver can\n      cause a seg fault\n    * Add -s option to isql to allow the input buffer size to be set\n        i.e. isql -s32000 dsn\n    * Update some of the autoconf scripts to handle RH 8\n    * Add extra attrs to oracle setup lib\n    * Allow DMEnvAttrs to be set in odbcinst.ini as well\n    * Alter the way the config mode is stored, don't use putenv now, as \n      it causes trouble if the DM is unloaded. Also malloc the strings\n      if the environment is set via the DM, to avoid the same problem\n      with putenv. This caused a crash of OpenOffice on Solaris\n\n23-August-2002\n\nRelease 2.2.3\n    \n    * fix bug in unicode_to_ansi_copy\n    * DataManagerII was missed from the last release, sorry, I thought that it\n      had been moved to DataManager.\n    * DatamanagerII: Remove duplicate rows with drivers such as Postgres which \n      doesn't work as expected when getting lists of Schemas\n    * Attempt to set permissions for the file dsn directory.\n    * Fix bug with conversion of ODBC 2 values to SQL_C_WCHAR\n    * Make the postgres drivers return a SQL State of 01000 for a warning,\n      not 00000\n    * Add option to isql (-x)  to specify a separator in hex (0x09 is V tab) \n      or octal (012)\n    * Fix typo in pre 7.1 Postgres driver that broke bound timestamps\n    * Fix what looks like a bug in the libtool dlopen wrapper, its fails\n      to fail, when failing to load a lib.\n    * Only call the ODBC 3 version of SQLGetFuctions if we have requested ODBC3\n      some drivers (SAPDB) that return ODBC 3 API's only return this call if \n      the connect specified ODBC 3.\n    * Check the attributes being passed into SQLSetConnectAttr, only pas into\n      SQLSetConnectOption if they are ODBC 2 values. The same for SQLSetStmtAttr\n    * Allow double clicks on dsn's to bring up the configure in ODBCConfig\n    * Add extra thread checks for FreeBSD\n    * Add check for SQL_NO_DATA in isql\n    * Add code to make DM cope with SQL_NO_DATA from SQLExec(Direct)\n    * Change UNICODE conversions, remove all inplace converts.\n    * Add support for iconv for the UNICODE to ANSI conversions\n    * Add code to make DM code with SQL_NO_DATA from SQLExec(Direct)\n    * DBFIO: completed basic functionality (DBF file access library)\n    * dbfio: completed basic functionality (test program for DBFIO) \n    * Add checks for usage counts for loaded libs\n    * Replicate the way the MS DM only calls SQLAllocEnv on a driver once\n    * Add fix from John L Miller for SQLEndTran and SQLTransact\n    * Make it try and find a working iconv set of encodings\n    * Small fix to SQLMoreResults from John L Miller\n    * Alter error state return in SQLCloseCursor\n    * Allow state 07009 to be mapped to S1002 or S1093 depending on the\n      calling function\n    * Fix major ineffiency with text fields and the Postgres drivers\n    * Fix incorrect return state from SQLEndTran/SQLTransact\n    * Make rowcount return a count of -1 if its returns a error\n    * Further AIX linking tweeks\n\n08-July-2002\n\nRelease 2.2.2\n    \n    * added -m option to isql\n    * improved row count at end-of-result in isql\n    * allow SQLColAttribute(s)(W) to be called with a column number of 0 \n      to get the descriptor count\n    * Remove -export-symbols from sample, it was causing some \n      problems on Solaris\n    * Add DataManagerII, this is a updated version from Mark Vanderwiel\n    * Update libtool to escape from AIX build problem\n    * Add fix to avoid file handle limitations\n    * Add more UNICODE changes, it looks like it is native 16 representation\n      after all.  The old way (Fixed at BE) can be reproduced by defining UCS16BE\n    * Add iusql, its just the same as isql but uses the wide functions\n    * Couple of cast warnings cleaned up\n    * Add change to libtool to clean up AIX build\n    * Create README.AIX\n    * Fix small bug in SQLDriverConnectW, I was allocating 1 byte two little\n    * Fix typo in SQLConnect that wasn't allowing the driver manager to supply\n      SQLFreeConnect for drivers that didn't support this.\n    * Fix build on Caldera OpenUnix8 (not sure why anywone would want to\n      go anywhere near this OS IMHO...)\n    * Move DataManagerII to DataManager\n    * Alter what comes back in the second field from SQLDataSources to be the\n      description from the ODBCINST.INI entry, this matches what happens\n      in with the windows DM.\n\n23-Mar-2002\n\nRelease 2.2.1\n    \n    * odbcinst: now tries to auto create system odbc.ini\n    * odbcinst: implemented -n, -l, -h for -q -s   \n    * Add option to disable definition of windows types in sqltype.h\n    * Fix small bug in ini uper case routines.\n    * Added STMT and OPTION to MySQL driver setup\n    * Added -j arg for odbcinst (shows INI file names)\n    * Fixed seg fault bug in Text File driver\n    * Fix small bug in SQLBrowseConnect\n    * Fix check for Darwin (OSX)\n    * Fix bug in sqltypes that stopped 64 bit builds\n    * Fix build problem on 32 bit platforms without long long\n    * Add option to set environment (unix) values via SQLSetEnv, \n      this can also be done in the odbc.ini, for example\n      [sample]\n      Description     = Test to DB2\n      Driver          = DB2\n      DMEnvAttr       = SQL_ATTR_UNIXODBC_ENVATTR={DB2INSTANCE=db2inst1}\n    * Fix some cases where the trace file env value was \"Trace File\"\n    * Make the readline check make sure there are headers as well as libs\n    * Add check to use RTLD_GROUP in libltdl if present\n    * change DWORD definition to unsigned long where applicable\n    * Fix bug in error reporting that cound crash with multiple errors and ODBC3\n    * Remove C++ comment from exe/odbcinst.c\n    * If we are not building the drivers, dont build sqp\n    * Alter default size of odbctest window\n    * Improve check for stats headers\n    * Add install-data-am section back to Makefile.am to create the \n      empty ini files\n    * Extend naming of cursor lib to work on non linux platforms \n      (it expected a .so)\n    * Make Postgres driver(s) handle {oj ... } syntax\n    * Fix some endian issues with 4 byte unicode support\n    * Update the MySQL driver code\n\n30-Jan-2002\n\nRelease 2.2.0\n    \n    * Allow SQL_ATTR_LOGIN_TIMEOUT  to be set on a connected \n      connection doesn't make that much sense, but it mirrors \n      what the Windows DM does.\n    * Change DWORD in sqltypes to be a unsigned int to work on \n      64 bit platforms\n    * Fix incorrect diag message in SQLSetStmtOption.c\n    * Hack to the 7.1 postgres driver to enable SQLPrepare\n      to be called BEFORE SQLBindParameter\n    * Reset the stmt->prepared flag when going into a SQLParamData\n      state after SQLExecDirect\n    * Fix silly bug that stops odbctest adding the fidt entry on \n      the list\n    * Add missing tracing to SQLBrowseConnect\n    * Fix some potential corruption in SQLGetDiagField\n    * Add some simple cacheing to SQLGetPrivateProfileString\n    * check for redefinition of SQL_OL_CAP to stop AIX build breaking\n    * Add missing getGlobalDefaults in PG 7.1 driver (Thanks Rick)\n    * Fix bug in SQLConnectW (Thanks Artiom)\n    * More mods to SQLConnectW and SQLDriverConnectW\n    * More MS generated 64bit changes\n    * Add MyODBC 3.5 driver. Its a separate configure in Drivers/MySQL\n\nRelease 2.1.1\n\n2001-12-21\n\n    * started to add mac package/install dirs for PackageMaker\n    * added qmake project files as an optional build process\n    * ODBCConfig can build with a static odbcinstQ\n    * Remove auto text driver setup, this breaks new installs as\n      it can't find odbcinst\n    * Fix mixup in SQLSetScrollOptions\n    * Small portability fix for BSDI\n    * Make UNIX Domain socket settable in postgres driver vua UDP=\n      in odbc.ini dsn entry\n    * Fix bug where some SQLGetConnectAttr values were not coming\n      from the driver, but the driver manager\n    * Alter odbctest to make directory select in Manage Auto Test\n      work better\n    * Fix browser in DataManager so that it works with drivers\n      that don't return values from SQLRowCount\n    * Fix some error retrieval problems\n    * Alter the include files to match MS ODBC 3.52 with 64bit\n      support, fix assorted warnings when building on 64bit \n      platforms\n    * Add option to force tracing on, this is for use with apps like\n      StarOffice that disable tracing\n    * Add support for MAX_ROWS in postgres drivers\n    * Add fix to cover Darwin 1.5 (OSX)\n    * Add DisableGetFunctions option to driver section of odbcinst.ini\n      to cope with drivers that can't handle the call (Solid 2.2 AFAIK)\n    * Fix 64 bit bug in Postgres driver\n    * Add some ODBC 3 bits to the Postgres driver to make it run with \n      Star Office 6.0 (beta)\n\nRelease 2.1.0\n\n2001-11-27\n\n    * cvs moved to Source Forge\n    * attempts have been made to cleanup GNU auto-stuff to make the\n      cvs code more accessable\n      - added README.cvs\n      - hopefully \"make -f Makefile.cvs\" works on more platforms\n    * implemented more in SQLManageDataSources()\n      - created odbcinstQ (plugin for Qt GUI support in odbcinst)\n      - moved most code from ODBCConfig to odbcinstQ\n    * stupid mistake on my part(Nick), left a #ifdef in isql.c that prevented\n      displaying a list of tables\n    * Make calls to localtime in Postgres Driver only when required\n    * Made some changes to Postgres prototypes\n    * Add option to get odbcinst info from stdin\n    * Make SQLError errors clean down after each API call for ODBC 3\n      apps\n    * Add mapping from SQLColAttribute attributes to ODBC2 attributes\n    * Fix reported leak in ltdl.c\n    * Make the path for file DSN's come from the odbcinst.ini file\n    * If using a ODBC 3 driver call the one off version of SQLGetFunctions\n    * Now builds better on Darwin\n    * Reinstate conversion from wide to ansi types in SQLGetData if the\n      driver is ODBC2, also adjust the buffer length to prevent buffer\n      overrun.\n    * Stop ODBCConfig setting Trace File in odbcinst.ini it should be\n      TraceFile\n    \nRelease 2.0.10\n\n2001-10-14\n\n    * odbctxt : escape special chars when read/write lines into a table\n    * Fix bug where a Execute that errors should return to state S2\n    * Update README.OSX to cover a txt driver problem\n    * Add Drivers/txt/doc to distribution\n    * Add missing text driver setup from spec file\n    * add missing VMS opt files\n    * Add missing include <qmultilineedit.h> from DataManager\n      (Samuel Cote)\n    * Remove LT_GLOBAL from the libtool code. This breaks perl amongst \n      others.\n    * Allow the display of unicode data in logs\n    * Fix stupid WCHAR bug in SQLGetData\n    * Move ifdef in __stats.c to allow the building of ODBCConfig under\n      Mac OSX\n    * Add missing args to prototype in sqlext.h (Thanks Christian)\n    * Pass on unknown connection attributes to driver after connect\n    * Make SQLGetPrivateProfileString return the actual len read, not + 2\n    * Make the OSX build cleaner, it just needs the dlcompat lib now\n    * Allow ODBCConfig to handle attributes not described in setup libs\n    * Stop the ODBC Version being set when there are open connections\n    * Alter odbcinst error messages to match windows\n    * Fix incorrect installer errors (they were offset by one...)\n    * Create ./odbc.ini if it doesn't exist\n    * Fix typo that stoped odbctest from building on Suns latest\n      compiler\n    * Slightly alter the unicode definitions in sqltypes.h\n    * Add support for FILEDSN in driver manager, odbcinst, and ODBCConfig\n    * Fix buffer overrun in Postgres drivers\n\nRelease 2.0.9\n\n2001-08-14\n\n    * odbctxt: tweeked - now works on PowerPC\n    * Add auto register for text driver to Makefile.am\n    * Add check for flex, sqp won't build with lex now\n    * odbctxtS: now supports CaseSensitive property\n    * Add build time option to select wchar_t UNICODE (4 bytes)\n      as opposed to signed short UNICODE (2 byte)\n    * Add build time option to select the length of logged \n      strings (LOG_MESSAGE_LEN in drivermanager.h)\n    * Fix libtool bug that caused the AIX build to not produce\n      shared libs\n    * Fix couple of typos that caused the build to fail on Solaris\n    * Add conditional for 64 bit application compilation when the \n      sizeof(long) will not have been done by configure\n    * Fix small bug in postgres driver on debian\n    * Add build instruction for QNX\n    * add Slovak translation of gODBCConfig\n    * Fixes to SQLBrowseConnect in driver manager\n    * Get the DM to check with the driver for the CLI Year\n    * Fix small bug in strncasecmp in extras\n    * Add extra support for SQLSetConnectAttr before connection\n    * rename global structure in Postgres drivers to avoid a colision\n    * Add support for presetting Env,Conn and Stmt attributes via the\n      ini file using the following syntax in the dsn section of odbc.ini\n        DMConnAttr = SQL_ATTR_CONNECTION_TIMEOUT=30\n        DMStmtAttr = SQL_ATTR_NOSCAN=SQL_NOSCAN_OFF;*SQL_ROWSET_SIZE=20\n      the * indicates thats its a override attribute, so any attempt to\n      call SQLSetStmtAttr to set the rowsize, will always set it to 20\n      in this example.\n\n      NOTE: That at the moment, this information will be lost if ODBCConfig\n      is used\n\n\nRelease 2.0.8 \n\n2001-06-25\n\n    * Add definition of alphasort and checks for location of dir.h in the txt\n      driver.\n    * Add some missing functions from cur lib\n    * Fix a problem in configure.in that was loosing LIB settings\n    * Remove C++ comment from sqlext.h\n    * sqp: now makes use of check for NOT NULL in CREATE TABLE\n    * sqp: fixed missing pointer assignment (affected CREATE TABLE)\n    * sqp: added more debugging messages (but turned off by default)\n    * odbctxt: removed long log message (would cause seg fault)\n    * odbctxt: now appends a space to each SQL statement; this is to\n      work around a problem in the sqp lexer when last char is close\n      quote\n    * Fixed a bug in the driver manager that would fail if the driver\n      returned a max size error message\n    * sqp: now makes use of IS NULL and IS NOT NULL\n    * sqp: now makes use of INSERT INTO table(col1,...)\n    * sqp: now makes use of LIKE and NOT LIKE (with optional ESCAPE)\n    * sqp: now makes use of any mix of AND, OR, () in WHERE clause\n    * sqp: now makes use of ? for column value (used in SQLBindParameter)\n    * sqp: now makes use of integers for column values (just mapped to string)\n    * odbctxt: basic implementation of SQLBindParameter (only SQL_C_CHAR input allowed)\n    * odbctxt: new syntaxes of sqp parser taken into account\n    * odbctxt: new option CaseSensitive (Yes or No) allowed in .odbc.ini file\n    * odbctxt: fix message length returned in SQLGetDiagRec function\n    * odbctxt: drop statement when freeing it via SQLFreeHandle\n    * sqp: default string length changed to 255\n    * Fix threading problem when multiple ENV's are in use\n\nRelease 2.0.7 Peter Harvey <pharvey@codebydesign.com> And\n                Nick Gorham <nick@lurcher.org>\n\n2001-06-06\n\n    * ODBCConfig/DataManager: Updates for Qt 3.0\n    * Add extra decoding of types in the log output\n    * Fix some type problems for 64 bit platforms\n    * Fix rogue logging in SQLGetInfo\n    * Add correlation and alias to sqp\n    * Add some fixes to the txt driver to enable it to work \n      with StarOffice\n    * Stop Ctrl-D from Segfaulting isql\n    * Add a example autotest to the build\n    * Make isql detect the EOF when not using readline\n    * Tidy up the libs from autoconf\n    * DataManager: refinements such as; logout a DSN, isql history\n    * sqp: CREATE TABLE now supports most data types and some column options\n    * sqp: added DROP TABLE\n    * sqp: added ORDER BY\n    * sqp: enhanced api with sqpOpen, sqpClose...\n    * odbctxt: checked in rewrite (much less code now)\n    * odbctxtS: added setup lib for odbctxt\n    * ODBCConfig: Stats now shows PIDs\n    * Add missing -lpthread in configure (thanks Jon K\u013are Hellan)\n    * Remove C++ comments from autotest.h\n    * Fix big in Postgres7.1 with binding a column to a double\n      (thanks J\u00fcrgen)\n    * Update libtool to 1.4\n    * Fix problem that looked like a restriction on the size of ini \n      files, but was actually a problem when the same section appeared\n      twice in a file\n    * Add VMS port (Thanks Jason)\n    * Add extra PG7.1 numeric fix (Thanks Zoltan)\n    * Add fix to PG7.1 to allow the retrieval of more than 8K\n      blobs, adjust the define TEXT_FIELD_SIZE in psqlodbc.h\n      (Thanks Bojnourdi)\n    * Fix small typo in SQLConnect (Thanks Martin)\n    * The postgres drivers didn't recognise \"Yes\" in the ini files,\n      only 1 or 0, fixed now\n    * Avoid \"broken pipe\" message with postgres (Thanks Gary)\n    * Alter check if cursor lib needed with ODBC 3 apps\n    * Fix couple of bugs with cursor lib\n    * Get to build on Mac OS X (without GUI bits ATM) \n      look at README.OSX for help and hints\n    * Fix for use with QT 3\n    * Remove default trace option from ODBCINSTConstructProperties\n    * Stop ODBCConfig from accepting null DSN names\n\nRelease 2.0.6 Nick Gorham <nick@lurcher.org>\n\n2001-04-18\n    \n    * Add define for _THREAD_SAFE to help AIX builds\n    * Fix bug in cursor lib introduced by UNICODE addon's\n    * Make the header definitions work on 64 bit platforms\n    * Fix a incorrect return from SQLConnect with pooling\n    * Add support for unicode drivers that have ANSI functions \n      renamed to the unicode versions (duh!).\n    * If pooling, then set the flag to not close the driver\n      handle (DontDLClose)\n    * Add CPTimeToLive option to restrict the number of times\n      a driver will be reused (useful with leaky drivers)\n    * Alter logging, and support setting logging via \n      SQLSetConnectAttr call\n    * Add a AutoTest facility to odbctest\n    * Fix incorrect error test in SQLBrowseConnect\n    * Check descriptor is for a open connection\n    * More unicode fixes\n\nRelease 2.0.5\n\n2001-03-21 Nick Gorham <nick@lurcher.org>\n\n    * Add extra autoconf checks for -pthread and -mt compiler\n      options\n    * Add Postgres7.1 tree for code from new postgres development\n    * Fix retrieval of errors for SQLTables and SQLColumns call \n      in isql\n    * Fix mem leak in DM if SQLDisconnect was called with open \n      statements or descriptors\n    * Fix broken check if readline needs -lcurses\n    * Add setup lib for SAPDB (thanks Holger Schurig)\n    * Added locale fixes to PG7.1 driver (thanks Zoltan)\n    * Fix configure problem on Solaris\n\nRelease 2.0.4\n\n2001-02-02 Nick Gorham <nick@lurcher.org>\n\n    * Changes to Postgres driver for operation with PG 7\n      and locale changes (Zoltan Boszormenyi)\n    * Fix problem with SQLSetConnectAttr and unicode \n      operation\n    * Apply patch to DataManager from Christian.Werner which \n      fixes truncated query result rows, formatting errors in \n      HTML output, and adds a leading blank to each where \n      expression in order to prevent SQL syntax errors in \n      e.g. LIKE '..' or MATCHES '..'cases.\n    * Add support for SQLDriverLoad and SQLDriverUnload functions\n\nRelease 2.0.3\n\n2001-01-13 Peter Harvey <pharvey@codebydesign.com> and\n    Nick Gorham <nick@lurcher.org>\n\n    * sqp: added a yywrap() to eliminate link dependency\n    * sqi: home dir default if no path with database file name\n    * sqi: creates database file if not exists\n    * ini: open fails if existing file appears not be an ini  \n    * Fixed problem where null row status array could be \n      passed into SQLExtendedFetch\n    * Fixed further bug in unicode_to_ansi \n      (thanks Martin Edlman)\n    * Fixed bug in UNICODE converison in SQLGetInfo\n    * Added sqi/test to build tree, its moved to exe\n    * Add extra checks for readline to see if -lcurses is needed\n    * Add check for -lpthreads that should be ok on Tru64\n    * Replace printf with puts in isql to cope with columns\n      containing '%'\n\nRelease 2.0.2\n\n2001-01-08 Peter Harvey <pharvey@codebydesign.com>\n\n    * ODBCConfig: Repurposed 'Tracing' tab. Now is 'Advanced'\n      and contains both Tracing and Pooling options.\n    * Fixed bug in __info that caused SQLGetDiagRec to fail\n\nRelease 2.0.1\n\n2001-01-06 Nick Gorham <nick@lurcher.org> \n\n    * Fix bug introduced with UNICODE that corrupted the SQLSTATE\n      from SQLError\n\nRelease 2.0.0\n\n2001-01-04 Nick Gorham <nick@lurcher.org> \n\n    * Added table browse for DataManager\n    * Fix problem in template driver with Solaris compiler\n    * Add msql-include option to specify search path\n    * Fix compile problem in MiniSQL code with Solaris compiler\n    * Fix conditional include of strings.h in ODBCConfig build\n    * Fix tracing in SQLConnect\n    * Alter check for DSN length in SQLConnect\n    * Validate input handle before setting output handle\n    * Fix error code from SQLSpecialColumns and null table names\n    * Fix potential deadlock in SQLFreeHandle\n    * Add change to make the Postgres driver look for the\n      local socket in two places to cope with debian distrib\n    * Fiddle with the MiniSQL searching again\n    * Add sqlucode.h to headers\n    * Fix threaded race condition in __handles.c\n    * Revamped Credits page in ODBCConfig.\n    * Show more useful info in DataManager tree-view\n    * Fixed problem with DataManager 'hanging' upon exit\n    * Added -pthread option to gcc calls when needed\n    * Now needs QT 2.2.x, changed configure to check\n    * Add missing identifier_type in SQLSpecialColumns log\n    * Add some checks for long columns in isql and DataManager\n    * Add connection pooling support to driver manager\n    * ODBCConfig; Code cleanup. Removed extra class layer \n      created by QtArch\n    * ODBCConfig.Drivers.Config; driver specific options\n      now accepted, if already exist in odbcinst.ini, as simple\n      text fields in GUI\n    * ODBCConfig and DataManager now attempt to save and restore\n      state... such as window geometry.\n    * ODBCConfig now supports connection pooling options.\n    * ODBCConfig now has a Stats tab which is similar to CPU \n      or mem monitor. This will be improved upon and the code\n      will likley make its way into a dock widget\n    * Add UNICODE support\n    * Disable the default building of static libs\n    * Add support for GNU portable threads\n\nRelease 1.8.13\n\n2000-11-14  Nick Gorham <nick@lurcher.org>\n\n    * Add missing line continuation char in SQLGetDiagField.c\n    * Add fix to SQLGetDiagField to return the server name on \n      statements and descriptors\n    * Remove -lcrypt from all but the Postgres driver build\n    * Remove CR/LF expansion in Postgres driver\n    * odbctest was calling SQLPrimaryKeys when it should have been\n      calling SQLTablePrivileges\n    * Add SQL_DRIVER_HDESC support to SQLGetInfo\n    * Add display of returned error text in log file\n    * Take notice of DontDLClose when calling ConfigDataSource.\n    * Fix duplicated log messages on failed connect\n    * Fix incorrect arg to SQLError, change from SQLINTEGER to\n      SQLSMALLINT (Thanks Ralf)\n    * Updated libtool to 1.3.5\n    * Fixed crash in SQLConnect when NULL server and SQL_NTS \n      passed in (Thanks Venu for the next four changes)\n    * The error code mapping was wrong, it should only map \n      ODBC 3 errors to ODBC 2, not the other way around\n    * Fixed a incorrect error return in SQLPrepare when a NULL\n      string was passed \n    * Zero the handles when released, just to avoid reuse of\n      values\n    * Added readline support to isql, (thanks Tomas Zellerin)\n    * Support the setting of SQL_AUTOCOMMIT before connecting\n    * Fixed bug in odbctest's SQLColAttributes call\n    * Add test in configure for localtime_r and use if present\n\n2000-08-18  Nick Gorham <nick@lurcher.org>\n\nRelease 1.8.12\n\n    * Fix typo in Postgres driver.\n    * Add i18n support to the Postgres driver (thanks Zoltan)\n    * Remove fix for Postgres driver and large objects, it\n      breaks the SQLColumns call :-(\n\nRelease 1.8.11\n\n2000-08-16  Nick Gorham <nick@lurcher.org>\n\n    * Add --enable-fastvalidate option. This reduces the safety of the \n      handle checking but improves performance when using many handles\n    * If SQLDriverConnect is called with a NULL con_str_in look for\n      the DEFAULT DSN entry\n    * Remove a underscore from odbcinst_system_file_path, it seem's to\n      cause the linker on AIX to have problems\n    * Remove some additional C++ comments from the postgres driver\n    * Call SQLSetConfigMode before calling SQLConfigDataSource\n    * Fix error handling in case of referential integrity violations\n      in Postgres driver\n    * Fix problem with SQLColAttributes swapping its args, and don't\n      check the driver version before mapping to ODBC 3 values.\n      (thanks Tomas)\n    * Make SQLDescribeParam work in state S4 and above, when in ODBC 2\n      mode\n    * Avoid potential buffer overrun in __info.c when reporting errors\n      from SQLConnect/SQLDriverConnect\n    * Fix potential mem corruption in SQLGetDiagField (thanks Jay)\n    * Add fix to allow the Postgres driver to receive large objects\n      (thanks Bill)\n    * Fix buffer overrun in SQLGetDiagField (thanks again Jay)\n    * Fix for SQLGetDiagField(SQL_DIAG_SUBCLASS_ORIGIN) returning a null \n      string, it now returns something meaningful\n    * The Postgres driver didn't shupdown the connection to the database\n      before dropping the socket\n    * Fix incorrect return from SQLDataSources\n    * Make SQLDriverConnect return all errors from the driver not just \n      the first one\n    * Add Oracle setup lib for http://www.easysoft.org/projects/oracle\n    * Stop isql calling SQLFetch if the query doesn't generate a result\n      set. This stops the function sequence error\n    * Add missing break in postgres password authentication\n    * Add fix in SQLTables for broken version of EXCEL\n    * Fix a bug that caused SQLTransact to fail if called with a \n      connection handle in state C4. This caused Corel Paradox to fall \n      over\n\nRelease 1.8.10\n\n2000-06-15  Nick Gorham <nick@lurcher.org>\n\n    * Add some fixes to make it work and compile on IRIX (Murad)\n    * Add a couple of missing casts in odbctest (Michael)\n    * Fix BOOL bug in postgres driver (Dmitriy)\n    * use setenv rather that putenv if available\n    * Fix a couple of bugs in odbctest/attr.cpp\n    * Fix problem where info warnings could be lost\n    * Fix a couple of problems in the Postgres driver\n    * Fix bug that caused a success with info message from SQLExecute \n      or SQLExecDirect to be lost if used with a ODBC 3 driver and \n      the application called SQLGetDiagRec\n    * Fix problem where bookmarks were failing for StarOffice 5.2\n    * Stop SQLDriverConnect dumping core when passed a null dsn string\n    * Map ODBC 2 SQLSTATE values to ODBC 3\n    * Add missing odbcconfig.h to the install include in gODBCConfig\n    * Fix incorrect state from Postgres Driver\n    * Fix integer length problem with SQLExtendedFetch that manifested\n      on big endian platforms (Sparc,Aix,HPUX etc) (Alex)\n    * Avoid clash with definition of CHAR in GNOME XML layer\n    * odbctest SQLExtendedFetch was using the wrong orentation value\n    * Add define for SQLTCHAR\n    * Fix problem in setting tracing on, and a core dump when loading\n      the cursor lib failed (Steve)\n\nRelease 1.8.9\n\n2000-06-13  Nick Gorham <nick@lurcher.org>\n\n    * Fix a State problem when coming out of a SQLParamData cycle\n    * Fix bug where SQLBrowseConnect may leave a connection in C1\n      not C2\n    * Pass LOGIN_TIMEOUT onto driver if it is set before the connect\n    * Reverse the test to set DIAG_CLASS_ORIGIN\n    * Return SQL_DIAG_SERVER_NAME and SQL_DIAG_RETURNCODE\n    * Allow explicit allocation of Descriptors\n    * Fix a problem with the SQLFetchScroll -> SQLExtendedFetch\n      mapping\n    * Fix a problem in the MiniSQL Makefile.am\n    * Call SQLSetConfigMode before calling ConfigDSN\n    * Fix problem in SQLCopyDesc and complete case when DM does the\n      work\n    * Return SQL_SUCCESS_WITH_INFO messages from SQLConnect\n    * Added MetaDataBlockFetch connection attribute to esoob driver\n    * Fix bug in __info.c that caused a small memory corruption\n      when logging was on\n    * Enable the reporting of errors on descriptors\n    * Fix extra ] in the msql part of configure.in\n    * Add error reporting to DataManager (Tim)\n    * Assorted fixes to text driver (Peter)\n    * odbctest now ready to use (hopefully)\n\n2000-05-03  Nick Gorham <nick@lurcher.org>\n\n    * Fix bug in configure.in where disabling build of drivers \n      also disabled build of GUI bits.\n    * SQLDataSources should return the Driver Description,\n      not the data source description\n    * Add partly written odbctest GUI to project\n    * Remove conditional around VOID typedef in sqltypes.h by default\n\nRelease 1.8.8\n\n2000-04-27  Nick Gorham <nick@lurcher.org>\n\n    * Add extra include for unixware\n    * Added some fixes to the template driver found by\n      Nikolai Afanasiev, and also fix the logging code\n      to recongnise 'On'\n    * Alter distrib to not include moc generated files\n    * Using the env var ODBCHOME was a \"real bad idea\" for perl\n      I have changed it to ODBCSYSINI\n    * Alter logging so that if the log file fails to open stderr\n      is not used. This caused problems in server processes.\n    * Fix a problem with SQLDrivers\n    * Fix a potential leak, that stopped SQLDisconnect being\n      called\n    * Fix problems with text driver\n    * Improve isql (thanks Ralf)\n    * Make gODBCConfig a proper gtk widget\n    * Remove stray printf in the DM code\n    * Fix a couple of daft bugs, thanks to Tim Roepken\n    * Fix a problem where handles were not being free'd\n    * Fix a problem that stopped StarOffice 5.2 working with a\n      ODBC 2 driver, it failed to set SQLGetDiagRec in the output\n      of SQLGetFunctions\n\n2000-03-11  Nick Gorham <nick@lurcher.org>\n\n    * Adjust configure to check for limits, and use this\n      to find max file path. It was only 14 char before under\n      HP-UX\n    * Make ODBCCOnfig try calling SQLConfigureDSN, for setup \n      libs that can do it themself\n    * Make the mutex functions static\n    * Remove some unwanted X functions from the lib line\n    * Remove dlfcn.h in ODBCConfig\n    * Rationalise environment vars, ODBCHOME points to\n      where odbc.ini and odbcinst.ini are. ODBCINI points to \n      the user ini file (normally ~/.odbc.ini)\n    * Fix bug causing all connection errors to be lost after\n      connecting\n    * Add GTK+ Based gODBCConfig\n    \n2000-03-01  Nick Gorham <nick@lurcher.org>\n\n    * Add extra defines to sqltypes.h\n    * Fix bug in the Postgres driver with the use if the\n      SQL_DATA_AT_EXEC value\n    * Replace the ODBCINI with ODBCHOME environment var\n\n2000-02-23  Nick Gorham <nick@lurcher.org>\n\n    * Remove the GLOBAL flag from the dlopen in the libtool\n      lib. This caused problems with perl DBD::ODBC\n    * Fix the support for threads and Solaris\n    * Add odbcinst.ini flag to disable unloading the driver,\n      this enables the IBM DB2 lib to be used\n\nRelease 1.8.6\n\n2000-02-21  Nick Gorham <nick@lurcher.org>\n\n    * Fix memory leak in the Postgres driver\n    * Fix a bug in the DM when using threads and ODBC 3 drivers,\n      SQLGetDiagField fails\n    * Fix a situation where PHP can crash the DM by calling \n      SQLFreeStmt after SQLDisconnect\n    * Add support for Solaris Threada\n    * Make building with thread support the default\n\n2000-02-12  Nick Gorham <nick@lurcher.org>\n\n    * Add option to use ODBCINI to move the odbcinst and odbc ini \n      file. This was asked for by applix\n    * Add setup lib for Easysoft ODBC-ODBC bridge\n     \n2000-02-02  Nick Gorham <nick@lurcher.org>\n\n    * Add flag in odbcinst.ini to disable the SQLFetch -> \n      SQLExtendedFetch mapping for broken drivers\n    * Alter the ini file parsing so the right hand side can\n      contain extra ='s\n    * Fix a bug in SQLGetStmtAttr with a missing '&'\n    * Added a couple of patches from Manush to improve working\n      with the solid driver\n\nRelease 1.8.4\n\n2000-01-18  Nick Gorham <nick@lurcher.org>\n\n    * Fix bug in SQLAllocHandle where a failed stmt alloc would\n      report a error on the statement not the connection and\n      dump core\n    * Make the default path when adding a driver in ODBCConfig\n      $prefix\\lib\n    * Add the missing [unixODBC] prefix to error messages\n    * Fix a problem in template/SQLDriverConnect found by\n      Charles Overbeck\n    * Update to libtool 1.3.4\n    * Fix problem in ODBCConfig where a cast to const char * \n      was needed\n\nRelease 1.8.3\n\n1999-12-28  Nick Gorham <nick@lurcher.org>\n\n    * Fix a bug where a SQLDisconnect was not releasing the \n      lib handle\n\n1999-12-11  Nick Gorham <nick@lurcher.org>\n\n    * Merge in changes from the Postgres ODBC people to fix a\n      problem with LONGBIN's\n    * Mask out the password fields in log for SQLConnect and \n      SQLDriverConnect\n    * Change a incorrent HY004 error return to IM004 in SQLConnect\n\nRelease 1.8.2 For AlphaLinux Distribution\n\n1999-12-02  Nick Gorham <nick@lurcher.org>\n\n    * Fix some daft mistakes in odbcinst.c, and the template driver\n    * Remove the C++ comments from the Postgres driver so it can\n      be compiled with a C compiler\n    * Add LIBSOCKET to the Postgres driver link line\n    * Add strncasecmp to extras\n    * Make the Postgres driver use the socket lib if needed\n\n1999-11-23  Nick Gorham <nick@lurcher.org>\n\n    * Add support for encrypted passwords in the Postgre driber\n    * Remove some remaining non-libtool dlopen code\n    * Fix some threading problems\n\n1999-11-19  Nick Gorham <nick@lurcher.org>\n\nRelease 1.8.1 **********\n\n    * Make the code more portable\n    * Remove CR from Postgres source\n\n1999-11-17  Nick Gorham <nick@lurcher.org>\n\n    * Fix a bug with the ODBC 3 error functions.\n    * Fix a missing function_entry from SQLExecDirect().\n\nRelease 1.8 *************\n\n1999-11-13  Nick Gorham <nick@lurcher.org>\n\n    * Fix bug with logging that killed StarOffice\n    * Upgrade the Postgres driver to 6.4.6, this fixes\n      a problem with fields containing cr/lf combinations.\n    * Change the logging so that the logging info comes\n      from a special [ODBC] section in odbcinst.ini. This \n      means that what goes on before the connect can be logged\n      \n1999-11-10  Nick Gorham <nick@lurcher.org>\n\n    * Make SQLError,SQLGetDiagField and SQLGetDiagRec usable\n      with all versions of application and driver.\n    * Add configure flag to specify where to look for the\n      MiniSQL lib.\n    * Add configure flag to disable the building of the drivers.\n\n1999-11-02  Nick Gorham <nick@lurcher.org>\n\n    * Fix bug in the cursor lib introduced by the fix for the glibc\n      bugs.\n    * Fix bug where SQLSetConnectAttr/Option can return without\n      clearing a connection thread lock.\n\n1999-10-29  Nick Gorham <nick@lurcher.org>\n\n    * Make the postgres driver able to connect via UNIX domain\n      sockets\n\n1999-10-29  Holger Bischoff <holger.bischoff@sap.com>\n\n    * Assorted stupid bugs fixed in the DM\n\n1999-10-26  Nick Gorham <nick@lurcher.org>\n\n    * Started rewrite of the SQLError/SQLGetDiagSupport in the\n      driver manager\n    * Fix isql so that SQL_SUCCESS_WITH_INFO is a success for\n      SQLConnect\n\n1999-10-20  Greg Bentz <greg@freedomintelligence.com>\n\n    * Added fix for SQLTransact, it was checking for a non null henv\n      first, it now checks the hdbc first (Thanks Greg)\n    * The connection_count in the environment handle was only\n      incremented on the first connection, but decremented on all\n      free dbc's, this caused the count to go negative at time.\n\n1999-10-09  Nick Gorham <nick@lurcher.org>\n\n    * Added Manush's patch to map ODBC 3-2 datetime values\n\n1999-10-05  Nick Gorham <nick@lurcher.org>\n\n    * working on getting the build to be more portable\n    * added --enable-gui configure option to turn off all c++ and GUI bits\n    * improved performance by removing logging core when logging is off\n    * added extras dir to contain code for missing functions on certain\n      platforms\n    * first day out for the cursor lib, read only at the moment, a sample\n      program is included in samples/cursor.c\n    * fixed problem that if the user .odbc.ini was not found the\n      code failed to go on to the system odbc.ini\n    * fixed problem caused by some versions of dlsym reporting function\n      that should be in the driver and returning the entry from the DM\n\nRelease 1.7 *************\n\n1999-07-26  Nick Gorham <nick@lurcher.org>\n\n    * New config added, now using autoconf.\n    * Thread safe support added.\n    * Assorted Driver Manager bug fixes added.\n    * default location for odbcinst.ini and odbc.ini is now /usr/local/etc\n      to conform to GNU standards.\n\n1999-05-15  Peter Harvey <pharvey@codebydesign.com>\n\t\n\t* Drivers: nn driver added\n\n1999-05-10  Nick\n\n\t* DM: New Dm added.\n\n1999-04-04  Martin Evans <martin@easysoft.com>\n\n\t* Makefiles: Some changes to; a) use gcc, and b) build into other than /usr\n\n1999-03-30  Peter Harvey <pharvey@codebydesign.com>\n\n\t* ChangeLog: Started ChangeLog\n\n", "/*********************************************************************\n *\n * This is based on code created by Peter Harvey,\n * (pharvey@codebydesign.com).\n *\n * Modified and extended by Nick Gorham\n * (nick@lurcher.org).\n *\n * Any bugs or problems should be considered the fault of Nick and not\n * Peter.\n *\n * copyright (c) 1999 Nick Gorham\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n **********************************************************************\n *\n * $Id: SQLGetDiagRecW.c,v 1.11 2009/02/18 17:59:08 lurcher Exp $\n *\n * $Log: SQLGetDiagRecW.c,v $\n * Revision 1.11  2009/02/18 17:59:08  lurcher\n * Shift to using config.h, the compile lines were making it hard to spot warnings\n *\n * Revision 1.10  2009/02/04 09:30:02  lurcher\n * Fix some SQLINTEGER/SQLLEN conflicts\n *\n * Revision 1.9  2007/11/26 11:37:23  lurcher\n * Sync up before tag\n *\n * Revision 1.8  2007/02/28 15:37:48  lurcher\n * deal with drivers that call internal W functions and end up in the driver manager. controlled by the --enable-handlemap configure arg\n *\n * Revision 1.7  2002/12/05 17:44:31  lurcher\n *\n * Display unknown return values in return logging\n *\n * Revision 1.6  2002/11/11 17:10:17  lurcher\n *\n * VMS changes\n *\n * Revision 1.5  2002/08/23 09:42:37  lurcher\n *\n * Fix some build warnings with casts, and a AIX linker mod, to include\n * deplib's on the link line, but not the libtool generated ones\n *\n * Revision 1.4  2002/07/24 08:49:52  lurcher\n *\n * Alter UNICODE support to use iconv for UNICODE-ANSI conversion\n *\n * Revision 1.3  2002/05/21 14:19:44  lurcher\n *\n * * Update libtool to escape from AIX build problem\n * * Add fix to avoid file handle limitations\n * * Add more UNICODE changes, it looks like it is native 16 representation\n *   the old way can be reproduced by defining UCS16BE\n * * Add iusql, its just the same as isql but uses the wide functions\n *\n * Revision 1.2  2001/12/13 13:00:32  lurcher\n *\n * Remove most if not all warnings on 64 bit platforms\n * Add support for new MS 3.52 64 bit changes\n * Add override to disable the stopping of tracing\n * Add MAX_ROWS support in postgres driver\n *\n * Revision 1.1.1.1  2001/10/17 16:40:05  lurcher\n *\n * First upload to SourceForge\n *\n * Revision 1.3  2001/07/03 09:30:41  nick\n *\n * Add ability to alter size of displayed message in the log\n *\n * Revision 1.2  2001/04/12 17:43:36  nick\n *\n * Change logging and added autotest to odbctest\n *\n * Revision 1.1  2000/12/31 20:30:54  nick\n *\n * Add UNICODE support\n *\n *\n **********************************************************************/\n\n#include <config.h>\n#include \"drivermanager.h\"\n\nstatic char const rcsid[]= \"$RCSfile: SQLGetDiagRecW.c,v $\";\n\nstatic SQLRETURN extract_sql_error_rec_w( EHEAD *head,\n        SQLWCHAR *sqlstate,\n        SQLINTEGER rec_number,\n        SQLINTEGER *native_error,\n        SQLWCHAR *message_text,\n        SQLSMALLINT buffer_length,\n        SQLSMALLINT *text_length )\n{\n    SQLRETURN ret;\n\n    if ( sqlstate )\n    {\n        SQLWCHAR *tmp;\n\n        tmp = ansi_to_unicode_alloc((SQLCHAR*) \"00000\", SQL_NTS, __get_connection( head ), NULL );\n        wide_strcpy( sqlstate, tmp );\n        free( tmp );\n    }\n\n    if ( rec_number <= head -> sql_diag_head.internal_count )\n    {\n        ERROR *ptr;\n\n        ptr = head -> sql_diag_head.internal_list_head;\n        while( rec_number > 1 )\n        {\n            ptr = ptr -> next;\n            rec_number --;\n        }\n\n\t\tif ( !ptr ) \n\t\t{\n\t    \treturn SQL_NO_DATA;\n\t\t}\n\n        if ( sqlstate )\n        {\n            wide_strcpy( sqlstate, ptr -> sqlstate );\n        }\n        if ( buffer_length < wide_strlen( ptr -> msg ) + 1 )\n        {\n            ret = SQL_SUCCESS_WITH_INFO;\n        }\n        else\n        {\n            ret = SQL_SUCCESS;\n        }\n\n        if ( message_text )\n        {\n            if ( ret == SQL_SUCCESS )\n            {\n                wide_strcpy( message_text, ptr -> msg );\n            }\n            else\n            {\n                memcpy( message_text, ptr -> msg, buffer_length * 2 );\n                message_text[ buffer_length - 1 ] = '\\0';\n            }\n        }\n\n        if ( text_length )\n        {\n            *text_length = wide_strlen( ptr -> msg );\n        }\n\n        if ( native_error )\n        {\n            *native_error = ptr -> native_error;\n        }\n\n        /*\n         * map 3 to 2 if required\n         */\n\n        if ( SQL_SUCCEEDED( ret ) && sqlstate )\n            __map_error_state_w(sqlstate, __get_version( head ));\n\n        return ret;\n    }\n    else if ( !__is_env( head ) && __get_connection( head ) -> state != STATE_C2\n        && head->sql_diag_head.error_count )\n    {\n        ERROR *ptr;\n        rec_number -= head -> sql_diag_head.internal_count;\n\n        if ( __get_connection( head ) -> unicode_driver &&\n            CHECK_SQLGETDIAGRECW( __get_connection( head )))\n        {\n            ret = SQLGETDIAGRECW( __get_connection( head ),\n                    head -> handle_type,\n                    __get_driver_handle( head ),\n                    rec_number,\n                    sqlstate,\n                    native_error,\n                    message_text,\n                    buffer_length,\n                    text_length );\n\n            /*\n             * map 3 to 2 if required\n             */\n\n            if ( SQL_SUCCEEDED( ret ) && sqlstate )\n            {\n                __map_error_state_w( sqlstate, __get_version( head ));\n            }\n\n            return ret;\n        }\n        else if ( !__get_connection( head ) -> unicode_driver &&\n            CHECK_SQLGETDIAGREC( __get_connection( head )))\n        {\n            SQLCHAR *as1 = NULL, *as2 = NULL;\n\n            if ( sqlstate )\n            {\n                as1 = malloc( 7 );\n            }\n\n            if ( message_text && buffer_length > 0 )\n            {\n                as2 = malloc( buffer_length + 1 );\n            }\n                \n            ret = SQLGETDIAGREC( __get_connection( head ),\n                    head -> handle_type,\n                    __get_driver_handle( head ),\n                    rec_number,\n                    as1 ? as1 : (SQLCHAR *)sqlstate,\n                    native_error,\n                    as2 ? as2 : (SQLCHAR *)message_text,\n                    buffer_length,\n                    text_length );\n\n            /*\n             * map 3 to 2 if required\n             */\n\n            if ( SQL_SUCCEEDED( ret ) && sqlstate )\n            {\n                if ( sqlstate )\n                {\n                    if ( as1 )\n                    {\n                        ansi_to_unicode_copy( sqlstate,(char*) as1, SQL_NTS, __get_connection( head ), NULL );\n                        __map_error_state_w( sqlstate, __get_version( head ));\n                    }\n                }\n                if ( message_text )\n                {\n                    if ( as2 )\n                    {\n                        ansi_to_unicode_copy( message_text,(char*) as2, SQL_NTS, __get_connection( head ), NULL );\n                    }\n                }\n            }\n\n            if ( as1 ) free( as1 );\n            if ( as2 ) free( as2 );\n\n            return ret;\n        }\n        else\n        {\n            ptr = head -> sql_diag_head.error_list_head;\n            while( rec_number > 1 )\n            {\n                ptr = ptr -> next;\n                rec_number --;\n            }\n\n\t\t\tif ( !ptr ) \n\t\t\t{\n\t    \t\treturn SQL_NO_DATA;\n\t\t\t}\n\n            if ( sqlstate )\n            {\n                wide_strcpy( sqlstate, ptr -> sqlstate );\n            }\n            if ( buffer_length < wide_strlen( ptr -> msg ) + 1 )\n            {\n                ret = SQL_SUCCESS_WITH_INFO;\n            }\n            else\n            {\n                ret = SQL_SUCCESS;\n            }\n\n            if ( message_text )\n            {\n                if ( ret == SQL_SUCCESS )\n                {\n                    wide_strcpy( message_text, ptr -> msg );\n                }\n                else\n                {\n                    memcpy( message_text, ptr -> msg, buffer_length * 2 );\n                    message_text[ buffer_length - 1 ] = '\\0';\n                }\n            }\n\n            if ( text_length )\n            {\n                *text_length = wide_strlen( ptr -> msg );\n            }\n\n            if ( native_error )\n            {\n                *native_error = ptr -> native_error;\n            }\n\n            /*\n             * map 3 to 2 if required\n             */\n\n            if ( SQL_SUCCEEDED( ret ) && sqlstate )\n                __map_error_state_w( sqlstate, __get_version( head ));\n\n            return ret;\n        }\n    }\n    else\n    {\n        return SQL_NO_DATA;\n    }\n}\n\nSQLRETURN SQLGetDiagRecW( SQLSMALLINT handle_type,\n        SQLHANDLE   handle,\n        SQLSMALLINT rec_number,\n        SQLWCHAR     *sqlstate,\n        SQLINTEGER  *native,\n        SQLWCHAR     *message_text,\n        SQLSMALLINT buffer_length,\n        SQLSMALLINT *text_length_ptr )\n{\n    SQLRETURN ret;\n    SQLCHAR s0[ 32 ], s1[ 100 + LOG_MESSAGE_LEN ];\n    SQLCHAR s2[ 100 + LOG_MESSAGE_LEN ];\n    SQLCHAR s3[ 100 + LOG_MESSAGE_LEN ];\n\n    if ( rec_number < 1 )\n    {\n        return SQL_ERROR;\n    }\n\n    if ( handle_type == SQL_HANDLE_ENV )\n    {\n        DMHENV environment = ( DMHENV ) handle;\n\n        if ( !__validate_env( environment ))\n        {\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    \"Error: SQL_INVALID_HANDLE\" );\n\n            return SQL_INVALID_HANDLE;\n        }\n\n        thread_protect( SQL_HANDLE_ENV, environment );\n\n        if ( log_info.log_flag )\n        {\n            sprintf( environment -> msg, \n                \"\\n\\t\\tEntry:\\\n\\n\\t\\t\\tEnvironment = %p\\\n\\n\\t\\t\\tRec Number = %d\\\n\\n\\t\\t\\tSQLState = %p\\\n\\n\\t\\t\\tNative = %p\\\n\\n\\t\\t\\tMessage Text = %p\\\n\\n\\t\\t\\tBuffer Length = %d\\\n\\n\\t\\t\\tText Len Ptr = %p\",\n                    environment,\n                    rec_number,\n                    sqlstate,\n                    native,\n                    message_text,\n                    buffer_length,\n                    text_length_ptr );\n\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    environment -> msg );\n        }\n\n        ret = extract_sql_error_rec_w( &environment -> error,\n                sqlstate,\n                rec_number,\n                native,\n                message_text,\n                buffer_length,\n                text_length_ptr );\n\n        if ( log_info.log_flag )\n        {\n            if ( SQL_SUCCEEDED( ret ))\n            {\n                char *ts1, *ts2;\n\n                sprintf( environment -> msg, \n                    \"\\n\\t\\tExit:[%s]\\\n\\n\\t\\t\\tSQLState = %s\\\n\\n\\t\\t\\tNative = %s\\\n\\n\\t\\t\\tMessage Text = %s\",\n                        __get_return_status( ret, s2 ),\n                        __sdata_as_string( s3, SQL_CHAR,\n\t\t\t\tNULL, ts1 = unicode_to_ansi_alloc( sqlstate, SQL_NTS, NULL, NULL  )),\n                        __iptr_as_string( s0, native ),\n                        __sdata_as_string( s1, SQL_CHAR, \n                            text_length_ptr, ts2 = unicode_to_ansi_alloc( message_text, SQL_NTS, NULL, NULL  )));\n\n\t\tif ( ts1 ) {\n                \tfree( ts1 );\n\t\t}\n\t\tif ( ts2 ) {\n                \tfree( ts2 );\n\t\t}\n            }\n            else\n            {\n                sprintf( environment -> msg, \n                    \"\\n\\t\\tExit:[%s]\",\n                        __get_return_status( ret, s2 ));\n            }\n\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    environment -> msg );\n        }\n\n        thread_release( SQL_HANDLE_ENV, environment );\n\n        return ret;\n    }\n    else if ( handle_type == SQL_HANDLE_DBC )\n    {\n        DMHDBC connection = ( DMHDBC ) handle;\n\n        if ( !__validate_dbc( connection ))\n        {\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    \"Error: SQL_INVALID_HANDLE\" );\n\n#ifdef WITH_HANDLE_REDIRECT\n\t\t{\n\t\t\tDMHDBC parent_connection;\n\n\t\t\tparent_connection = find_parent_handle( connection, SQL_HANDLE_DBC );\n\n\t\t\tif ( parent_connection ) {\n        \t\tdm_log_write( __FILE__, \n                \t__LINE__, \n                    \tLOG_INFO, \n                    \tLOG_INFO, \n                    \t\"Info: found parent handle\" );\n\n\t\t\t\tif ( CHECK_SQLGETDIAGRECW( parent_connection ))\n\t\t\t\t{\n        \t\t\tdm_log_write( __FILE__, \n                \t\t__LINE__, \n                   \t\t \tLOG_INFO, \n                   \t\t \tLOG_INFO, \n                   \t\t \t\"Info: calling redirected driver function\" );\n\n\t\t\t\t\treturn SQLGETDIAGRECW( parent_connection, \n\t\t\t\t\t\t\thandle_type,\n\t\t\t\t\t\t\tconnection, \n        \t\t\t\t\trec_number,\n        \t\t\t\t\tsqlstate,\n        \t\t\t\t\tnative,\n        \t\t\t\t\tmessage_text,\n        \t\t\t\t\tbuffer_length,\n        \t\t\t\t\ttext_length_ptr );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n#endif\n            return SQL_INVALID_HANDLE;\n        }\n\n        thread_protect( SQL_HANDLE_DBC, connection );\n\n        if ( log_info.log_flag )\n        {\n            sprintf( connection -> msg, \n                \"\\n\\t\\tEntry:\\\n\\n\\t\\t\\tConnection = %p\\\n\\n\\t\\t\\tRec Number = %d\\\n\\n\\t\\t\\tSQLState = %p\\\n\\n\\t\\t\\tNative = %p\\\n\\n\\t\\t\\tMessage Text = %p\\\n\\n\\t\\t\\tBuffer Length = %d\\\n\\n\\t\\t\\tText Len Ptr = %p\",\n                    connection,\n                    rec_number,\n                    sqlstate,\n                    native,\n                    message_text,\n                    buffer_length,\n                    text_length_ptr );\n\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    connection -> msg );\n        }\n\n        ret = extract_sql_error_rec_w( &connection -> error,\n                sqlstate,\n                rec_number,\n                native,\n                message_text,\n                buffer_length,\n                text_length_ptr );\n\n        if ( log_info.log_flag )\n        {\n            if ( SQL_SUCCEEDED( ret ))\n            {\n                char *ts1, *ts2;\n\n                sprintf( connection -> msg, \n                    \"\\n\\t\\tExit:[%s]\\\n\\n\\t\\t\\tSQLState = %s\\\n\\n\\t\\t\\tNative = %s\\\n\\n\\t\\t\\tMessage Text = %s\",\n                        __get_return_status( ret, s2 ),\n                        __sdata_as_string( s3, SQL_CHAR,\n\t\t\t\tNULL, ts1 = unicode_to_ansi_alloc( sqlstate, SQL_NTS, connection, NULL  )),\n                        __iptr_as_string( s0, native ),\n                        __sdata_as_string( s1, SQL_CHAR, \n                            \ttext_length_ptr, ts2 = unicode_to_ansi_alloc( message_text, SQL_NTS, connection, NULL  )));\n\n\t\tif ( ts1 ) {\n                \tfree( ts1 );\n\t\t}\n\t\tif ( ts2 ) {\n                \tfree( ts2 );\n\t\t}\n            }\n            else\n            {\n                sprintf( connection -> msg, \n                    \"\\n\\t\\tExit:[%s]\",\n                        __get_return_status( ret, s2 ));\n            }\n\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    connection -> msg );\n        }\n\n        thread_release( SQL_HANDLE_DBC, connection );\n\n        return ret;\n    }\n    else if ( handle_type == SQL_HANDLE_STMT )\n    {\n        DMHSTMT statement = ( DMHSTMT ) handle;\n\n        if ( !__validate_stmt( statement ))\n        {\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    \"Error: SQL_INVALID_HANDLE\" );\n\n#ifdef WITH_HANDLE_REDIRECT\n\t\t{\n\t\t\tDMHSTMT parent_statement;\n\n\t\t\tparent_statement = find_parent_handle( statement, SQL_HANDLE_STMT );\n\n\t\t\tif ( parent_statement ) {\n        \t\tdm_log_write( __FILE__, \n                \t__LINE__, \n                    \tLOG_INFO, \n                    \tLOG_INFO, \n                    \t\"Info: found parent handle\" );\n\n\t\t\t\tif ( CHECK_SQLGETDIAGRECW( parent_statement -> connection ))\n\t\t\t\t{\n        \t\t\tdm_log_write( __FILE__, \n                \t\t__LINE__, \n                   \t\t \tLOG_INFO, \n                   \t\t \tLOG_INFO, \n                   \t\t \t\"Info: calling redirected driver function\" );\n\n\t\t\t\t\treturn SQLGETDIAGRECW( parent_statement -> connection, \n\t\t\t\t\t\t\thandle_type,\n\t\t\t\t\t\t\tstatement,\n        \t\t\t\t\trec_number,\n        \t\t\t\t\tsqlstate,\n        \t\t\t\t\tnative,\n        \t\t\t\t\tmessage_text,\n        \t\t\t\t\tbuffer_length,\n        \t\t\t\t\ttext_length_ptr );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n#endif\n            return SQL_INVALID_HANDLE;\n        }\n\n        thread_protect( SQL_HANDLE_STMT, statement );\n\n        if ( log_info.log_flag )\n        {\n            sprintf( statement -> msg, \n                \"\\n\\t\\tEntry:\\\n\\n\\t\\t\\tStatement = %p\\\n\\n\\t\\t\\tRec Number = %d\\\n\\n\\t\\t\\tSQLState = %p\\\n\\n\\t\\t\\tNative = %p\\\n\\n\\t\\t\\tMessage Text = %p\\\n\\n\\t\\t\\tBuffer Length = %d\\\n\\n\\t\\t\\tText Len Ptr = %p\",\n                    statement,\n                    rec_number,\n                    sqlstate,\n                    native,\n                    message_text,\n                    buffer_length,\n                    text_length_ptr );\n\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    statement -> msg );\n        }\n\n        ret = extract_sql_error_rec_w( &statement -> error,\n                sqlstate,\n                rec_number,\n                native,\n                message_text,\n                buffer_length,\n                text_length_ptr );\n\n        if ( log_info.log_flag )\n        {\n            if ( SQL_SUCCEEDED( ret ))\n            {\n                char *ts1, *ts2;\n\n                sprintf( statement -> msg, \n                    \"\\n\\t\\tExit:[%s]\\\n\\n\\t\\t\\tSQLState = %s\\\n\\n\\t\\t\\tNative = %s\\\n\\n\\t\\t\\tMessage Text = %s\",\n                        __get_return_status( ret, s2 ),\n                        __sdata_as_string( s3, SQL_CHAR,\n\t\t\t\tNULL, ts1 = unicode_to_ansi_alloc( sqlstate, SQL_NTS, statement -> connection, NULL  )),\n                        __iptr_as_string( s0, native ),\n                        __sdata_as_string( s1, SQL_CHAR, \n                            text_length_ptr, ts2 = unicode_to_ansi_alloc( message_text, SQL_NTS, statement -> connection, NULL  )));\n\n\t\tif ( ts1 ) {\n                \tfree( ts1 );\n\t\t}\n\t\tif ( ts2 ) {\n                \tfree( ts2 );\n\t\t}\n            }\n            else\n            {\n                sprintf( statement -> msg, \n                    \"\\n\\t\\tExit:[%s]\",\n                        __get_return_status( ret, s2 ));\n            }\n\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    statement -> msg );\n        }\n\n        thread_release( SQL_HANDLE_STMT, statement );\n\n        return ret;\n    }\n    else if ( handle_type == SQL_HANDLE_DESC )\n    {\n        DMHDESC descriptor = ( DMHDESC ) handle;\n\n        if ( !__validate_desc( descriptor ))\n        {\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    \"Error: SQL_INVALID_HANDLE\" );\n\n#ifdef WITH_HANDLE_REDIRECT\n\t\t{\n\t\t\tDMHDESC parent_desc;\n\n\t\t\tparent_desc = find_parent_handle( descriptor, SQL_HANDLE_DESC );\n\n\t\t\tif ( parent_desc ) {\n        \t\tdm_log_write( __FILE__, \n                \t__LINE__, \n                    \tLOG_INFO, \n                    \tLOG_INFO, \n                    \t\"Info: found parent handle\" );\n\n\t\t\t\tif ( CHECK_SQLGETDIAGRECW( parent_desc -> connection ))\n\t\t\t\t{\n        \t\t\tdm_log_write( __FILE__, \n                \t\t__LINE__, \n                   \t\t \tLOG_INFO, \n                   \t\t \tLOG_INFO, \n                   \t\t \t\"Info: calling redirected driver function\" );\n\n\t\t\t\t\treturn SQLGETDIAGRECW( parent_desc -> connection, \n\t\t\t\t\t\t\thandle_type,\n\t\t\t\t\t\t\tdescriptor,\n        \t\t\t\t\trec_number,\n        \t\t\t\t\tsqlstate,\n        \t\t\t\t\tnative,\n        \t\t\t\t\tmessage_text,\n        \t\t\t\t\tbuffer_length,\n        \t\t\t\t\ttext_length_ptr );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n#endif\n            return SQL_INVALID_HANDLE;\n        }\n\n        thread_protect( SQL_HANDLE_DESC, descriptor );\n\n        if ( log_info.log_flag )\n        {\n            sprintf( descriptor -> msg, \n                \"\\n\\t\\tEntry:\\\n\\n\\t\\t\\tDescriptor = %p\\\n\\n\\t\\t\\tRec Number = %d\\\n\\n\\t\\t\\tSQLState = %p\\\n\\n\\t\\t\\tNative = %p\\\n\\n\\t\\t\\tMessage Text = %p\\\n\\n\\t\\t\\tBuffer Length = %d\\\n\\n\\t\\t\\tText Len Ptr = %p\",\n                    descriptor,\n                    rec_number,\n                    sqlstate,\n                    native,\n                    message_text,\n                    buffer_length,\n                    text_length_ptr );\n\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    descriptor -> msg );\n        }\n\n        ret = extract_sql_error_rec_w( &descriptor -> error,\n                sqlstate,\n                rec_number,\n                native,\n                message_text,\n                buffer_length,\n                text_length_ptr );\n\n        if ( log_info.log_flag )\n        {\n            if ( SQL_SUCCEEDED( ret ))\n            {\n                char *ts1, *ts2;\n\n                sprintf( descriptor -> msg, \n                    \"\\n\\t\\tExit:[%s]\\\n\\n\\t\\t\\tSQLState = %s\\\n\\n\\t\\t\\tNative = %s\\\n\\n\\t\\t\\tMessage Text = %s\",\n                        __get_return_status( ret, s2 ),\n                        __sdata_as_string( s3, SQL_CHAR,\n\t\t\t\tNULL, ts1 = unicode_to_ansi_alloc( sqlstate, SQL_NTS, descriptor -> connection, NULL  )),\n                        __iptr_as_string( s0, native ),\n                        __sdata_as_string( s1, SQL_CHAR, \n                            text_length_ptr, ts2 = unicode_to_ansi_alloc( message_text, SQL_NTS, descriptor -> connection, NULL  )));\n\n\t\tif ( ts1 ) {\n                \tfree( ts1 );\n\t\t}\n\t\tif ( ts2 ) {\n                \tfree( ts2 );\n\t\t}\n            }\n            else\n            {\n                sprintf( descriptor -> msg, \n                    \"\\n\\t\\tExit:[%s]\",\n                        __get_return_status( ret, s2 ));\n            }\n\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    descriptor -> msg );\n        }\n\n        thread_release( SQL_HANDLE_DESC, descriptor );\n\n        return ret;\n    }\n    return SQL_NO_DATA;\n}\n\n", "/*********************************************************************\n *\n * This is based on code created by Peter Harvey,\n * (pharvey@codebydesign.com).\n *\n * Modified and extended by Nick Gorham\n * (nick@lurcher.org).\n *\n * Any bugs or problems should be considered the fault of Nick and not\n * Peter.\n * \n * copyright (c) 1999 Nick Gorham\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n **********************************************************************\n *\n * $Id: SQLSetDescField.c,v 1.7 2009/02/18 17:59:08 lurcher Exp $\n *\n * $Log: SQLSetDescField.c,v $\n * Revision 1.7  2009/02/18 17:59:08  lurcher\n * Shift to using config.h, the compile lines were making it hard to spot warnings\n *\n * Revision 1.6  2007/05/25 16:42:32  lurcher\n * Sync up\n *\n * Revision 1.5  2005/11/21 17:25:43  lurcher\n * A few DM fixes for Oracle's ODBC driver\n *\n * Revision 1.4  2003/10/30 18:20:46  lurcher\n *\n * Fix broken thread protection\n * Remove SQLNumResultCols after execute, lease S4/S% to driver\n * Fix string overrun in SQLDriverConnect\n * Add initial support for Interix\n *\n * Revision 1.3  2003/02/27 12:19:40  lurcher\n *\n * Add the A functions as well as the W\n *\n * Revision 1.2  2002/12/05 17:44:31  lurcher\n *\n * Display unknown return values in return logging\n *\n * Revision 1.1.1.1  2001/10/17 16:40:07  lurcher\n *\n * First upload to SourceForge\n *\n * Revision 1.4  2001/07/03 09:30:41  nick\n *\n * Add ability to alter size of displayed message in the log\n *\n * Revision 1.3  2001/04/17 16:29:39  nick\n *\n * More checks and autotest fixes\n *\n * Revision 1.2  2001/04/12 17:43:36  nick\n *\n * Change logging and added autotest to odbctest\n *\n * Revision 1.1.1.1  2000/09/04 16:42:52  nick\n * Imported Sources\n *\n * Revision 1.7  1999/11/13 23:41:00  ngorham\n *\n * Alter the way DM logging works\n * Upgrade the Postgres driver to 6.4.6\n *\n * Revision 1.6  1999/10/24 23:54:19  ngorham\n *\n * First part of the changes to the error reporting\n *\n * Revision 1.5  1999/09/21 22:34:25  ngorham\n *\n * Improve performance by removing unneeded logging calls when logging is\n * disabled\n *\n * Revision 1.4  1999/07/10 21:10:17  ngorham\n *\n * Adjust error sqlstate from driver manager, depending on requested\n * version (ODBC2/3)\n *\n * Revision 1.3  1999/07/04 21:05:08  ngorham\n *\n * Add LGPL Headers to code\n *\n * Revision 1.2  1999/06/30 23:56:55  ngorham\n *\n * Add initial thread safety code\n *\n * Revision 1.1.1.1  1999/05/29 13:41:08  sShandyb\n * first go at it\n *\n * Revision 1.1.1.1  1999/05/27 18:23:18  pharvey\n * Imported sources\n *\n * Revision 1.2  1999/05/04 22:41:12  nick\n * and another night ends\n *\n * Revision 1.1  1999/04/25 23:06:11  nick\n * Initial revision\n *\n *\n **********************************************************************/\n\n#include <config.h>\n#include \"drivermanager.h\"\n\nstatic char const rcsid[]= \"$RCSfile: SQLSetDescField.c,v $ $Revision: 1.7 $\";\n\nSQLRETURN SQLSetDescFieldA( SQLHDESC descriptor_handle,\n           SQLSMALLINT rec_number, \n           SQLSMALLINT field_identifier,\n           SQLPOINTER value, \n           SQLINTEGER buffer_length )\n{\n    return SQLSetDescField( descriptor_handle,\n           rec_number, \n           field_identifier,\n           value, \n           buffer_length );\n}\n\nSQLRETURN SQLSetDescField( SQLHDESC descriptor_handle,\n           SQLSMALLINT rec_number, \n           SQLSMALLINT field_identifier,\n           SQLPOINTER value, \n           SQLINTEGER buffer_length )\n{\n    /*\n     * not quite sure how the descriptor can be\n     * allocated to a statement, all the documentation talks\n     * about state transitions on statement states, but the\n     * descriptor may be allocated with more than one statement\n     * at one time. Which one should I check ?\n     */\n    DMHDESC descriptor = (DMHDESC) descriptor_handle;\n    SQLRETURN ret;\n    SQLCHAR s1[ 100 + LOG_MESSAGE_LEN ];\n    int isStrField = 0;\n\n    /*\n     * check descriptor\n     */\n\n    if ( !__validate_desc( descriptor ))\n    {\n        dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    \"Error: SQL_INVALID_HANDLE\" );\n\n        return SQL_INVALID_HANDLE;\n    }\n\n    function_entry( descriptor );\n\n    if ( log_info.log_flag )\n    {\n        sprintf( descriptor -> msg, \"\\n\\t\\tEntry:\\\n\\n\\t\\t\\tDescriptor = %p\\\n\\n\\t\\t\\tRec Number = %d\\\n\\n\\t\\t\\tField Ident = %s\\\n\\n\\t\\t\\tValue = %p\\\n\\n\\t\\t\\tBuffer Length = %d\",\n                descriptor,\n                rec_number,\n                __desc_attr_as_string( s1, field_identifier ),\n                value, \n                (int)buffer_length );\n\n        dm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                descriptor -> msg );\n    }\n\n    thread_protect( SQL_HANDLE_DESC, descriptor );\n\n    if ( descriptor -> connection -> state < STATE_C4 )\n    {\n        dm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                \"Error: HY010\" );\n\n        __post_internal_error( &descriptor -> error,\n                ERROR_HY010, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    /*\n     * check status of statements associated with this descriptor\n     */\n\n    if( __check_stmt_from_desc( descriptor, STATE_S8 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S9 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S10 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S11 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S12 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S13 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S14 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S15 )) {\n\n        dm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                \"Error: HY010\" );\n\n        __post_internal_error( &descriptor -> error,\n                ERROR_HY010, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n\n    if ( rec_number < 0 )\n    {\n        __post_internal_error( &descriptor -> error,\n                ERROR_07009, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    switch ( field_identifier )\n    {\n    /* Fixed-length fields: buffer_length is ignored */\n    case SQL_DESC_ALLOC_TYPE:\n    case SQL_DESC_ARRAY_SIZE:\n    case SQL_DESC_ARRAY_STATUS_PTR:\n    case SQL_DESC_BIND_OFFSET_PTR:\n    case SQL_DESC_BIND_TYPE:\n    case SQL_DESC_COUNT:\n    case SQL_DESC_ROWS_PROCESSED_PTR:\n    case SQL_DESC_AUTO_UNIQUE_VALUE:\n    case SQL_DESC_CASE_SENSITIVE:\n    case SQL_DESC_CONCISE_TYPE:\n    case SQL_DESC_DATA_PTR:\n    case SQL_DESC_DATETIME_INTERVAL_CODE:\n    case SQL_DESC_DATETIME_INTERVAL_PRECISION:\n    case SQL_DESC_DISPLAY_SIZE:\n    case SQL_DESC_FIXED_PREC_SCALE:\n    case SQL_DESC_INDICATOR_PTR:\n    case SQL_DESC_LENGTH:\n    case SQL_DESC_NULLABLE:\n    case SQL_DESC_NUM_PREC_RADIX:\n    case SQL_DESC_OCTET_LENGTH:\n    case SQL_DESC_OCTET_LENGTH_PTR:\n    case SQL_DESC_PARAMETER_TYPE:\n    case SQL_DESC_PRECISION:\n    case SQL_DESC_ROWVER:\n    case SQL_DESC_SCALE:\n    case SQL_DESC_SEARCHABLE:\n    case SQL_DESC_TYPE:\n    case SQL_DESC_UNNAMED:\n    case SQL_DESC_UNSIGNED:\n    case SQL_DESC_UPDATABLE:\n        isStrField = 0;\n        break;\n    /* Pointer to data: buffer_length must be valid */\n    case SQL_DESC_BASE_COLUMN_NAME:\n    case SQL_DESC_BASE_TABLE_NAME:\n    case SQL_DESC_CATALOG_NAME:\n    case SQL_DESC_LABEL:\n    case SQL_DESC_LITERAL_PREFIX:\n    case SQL_DESC_LITERAL_SUFFIX:\n    case SQL_DESC_LOCAL_TYPE_NAME:\n    case SQL_DESC_NAME:\n    case SQL_DESC_SCHEMA_NAME:\n    case SQL_DESC_TABLE_NAME:\n    case SQL_DESC_TYPE_NAME:\n        isStrField = 1;\n        break;\n    default:\n        isStrField = buffer_length != SQL_IS_POINTER && buffer_length != SQL_IS_INTEGER\n            && buffer_length != SQL_IS_UINTEGER && buffer_length != SQL_IS_SMALLINT &&\n            buffer_length != SQL_IS_USMALLINT;\n    }\n    \n    if ( isStrField && buffer_length < 0 && buffer_length != SQL_NTS)\n    {\n        __post_internal_error( &descriptor -> error,\n            ERROR_HY090, NULL,\n            descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    if ( field_identifier == SQL_DESC_COUNT && (SQLINTEGER)value < 0 )\n    {\n        __post_internal_error( &descriptor -> error,\n                ERROR_07009, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n    \n    if ( field_identifier == SQL_DESC_PARAMETER_TYPE && value != SQL_PARAM_INPUT\n        && value != SQL_PARAM_OUTPUT && value != SQL_PARAM_INPUT_OUTPUT &&\n        value != SQL_PARAM_INPUT_OUTPUT_STREAM && value != SQL_PARAM_OUTPUT_STREAM )\n    {\n        __post_internal_error( &descriptor -> error,\n                ERROR_HY105, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    if ( CHECK_SQLSETDESCFIELD( descriptor -> connection ))\n    {\n      ret = SQLSETDESCFIELD( descriptor -> connection,\n              descriptor -> driver_desc,\n              rec_number, \n              field_identifier,\n              value, \n              buffer_length );\n    }\n    else if ( CHECK_SQLSETDESCFIELDW( descriptor -> connection ))\n    {\n      SQLWCHAR *s1 = NULL;\n\n        if (isStrField)\n      {\n        s1 = ansi_to_unicode_alloc( value, buffer_length, descriptor -> connection, NULL );\n            if (SQL_NTS != buffer_length)\n            {\n                buffer_length *= sizeof(SQLWCHAR);\n            }\n      }\n      else\n      {\n              s1 = value;\n      }\n      ret = SQLSETDESCFIELDW( descriptor -> connection,\n                descriptor -> driver_desc,\n                rec_number, \n                field_identifier,\n                s1, \n                buffer_length );\n       \n        if (isStrField)\n       {\n        if (s1)\n          free(s1); \n       }\n    }\n    else \n\t{\n        dm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                \"Error: IM001\" );\n\n        __post_internal_error( &descriptor -> error,\n                ERROR_IM001, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    if ( log_info.log_flag )\n    {\n        sprintf( descriptor -> msg, \n                \"\\n\\t\\tExit:[%s]\",\n                    __get_return_status( ret, s1 ));\n\n        dm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                descriptor -> msg );\n    }\n\n    return function_return( SQL_HANDLE_DESC, descriptor, ret );\n}\n", "/*********************************************************************\n *\n * This is based on code created by Peter Harvey,\n * (pharvey@codebydesign.com).\n *\n * Modified and extended by Nick Gorham\n * (nick@lurcher.org).\n *\n * Any bugs or problems should be considered the fault of Nick and not\n * Peter.\n * \n * copyright (c) 1999 Nick Gorham\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n **********************************************************************\n *\n * $Id: SQLSetDescFieldW.c,v 1.8 2009/02/18 17:59:08 lurcher Exp $\n *\n * $Log: SQLSetDescFieldW.c,v $\n * Revision 1.8  2009/02/18 17:59:08  lurcher\n * Shift to using config.h, the compile lines were making it hard to spot warnings\n *\n * Revision 1.7  2008/08/29 08:01:39  lurcher\n * Alter the way W functions are passed to the driver\n *\n * Revision 1.6  2007/03/05 09:49:24  lurcher\n * Get it to build on VMS again\n *\n * Revision 1.5  2007/02/28 15:37:48  lurcher\n * deal with drivers that call internal W functions and end up in the driver manager. controlled by the --enable-handlemap configure arg\n *\n * Revision 1.4  2006/04/18 10:24:47  lurcher\n * Add a couple of changes from Mark Vanderwiel\n *\n * Revision 1.3  2003/10/30 18:20:46  lurcher\n *\n * Fix broken thread protection\n * Remove SQLNumResultCols after execute, lease S4/S% to driver\n * Fix string overrun in SQLDriverConnect\n * Add initial support for Interix\n *\n * Revision 1.2  2002/12/05 17:44:31  lurcher\n *\n * Display unknown return values in return logging\n *\n * Revision 1.1.1.1  2001/10/17 16:40:07  lurcher\n *\n * First upload to SourceForge\n *\n * Revision 1.4  2001/07/03 09:30:41  nick\n *\n * Add ability to alter size of displayed message in the log\n *\n * Revision 1.3  2001/04/17 16:29:39  nick\n *\n * More checks and autotest fixes\n *\n * Revision 1.2  2001/04/12 17:43:36  nick\n *\n * Change logging and added autotest to odbctest\n *\n * Revision 1.1  2000/12/31 20:30:54  nick\n *\n * Add UNICODE support\n *\n *\n *\n **********************************************************************/\n\n#include <config.h>\n#include \"drivermanager.h\"\n\nstatic char const rcsid[]= \"$RCSfile: SQLSetDescFieldW.c,v $\";\n\nSQLRETURN SQLSetDescFieldW( SQLHDESC descriptor_handle,\n           SQLSMALLINT rec_number, \n           SQLSMALLINT field_identifier,\n           SQLPOINTER value, \n           SQLINTEGER buffer_length )\n{\n    /*\n     * not quite sure how the descriptor can be\n     * allocated to a statement, all the documentation talks\n     * about state transitions on statement states, but the\n     * descriptor may be allocated with more than one statement\n     * at one time. Which one should I check ?\n     */\n    DMHDESC descriptor = (DMHDESC) descriptor_handle;\n    SQLRETURN ret;\n    SQLCHAR s1[ 100 + LOG_MESSAGE_LEN ];\n    int isStrField = 0;\n\n    /*\n     * check descriptor\n     */\n\n    if ( !__validate_desc( descriptor ))\n    {\n        dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    \"Error: SQL_INVALID_HANDLE\" );\n\n#ifdef WITH_HANDLE_REDIRECT\n\t\t{\n\t\t\tDMHDESC parent_desc;\n\n\t\t\tparent_desc = find_parent_handle( descriptor, SQL_HANDLE_DESC );\n\n\t\t\tif ( parent_desc ) {\n        \t\tdm_log_write( __FILE__, \n                \t__LINE__, \n                    \tLOG_INFO, \n                    \tLOG_INFO, \n                    \t\"Info: found parent handle\" );\n\n\t\t\t\tif ( CHECK_SQLSETDESCFIELDW( parent_desc -> connection ))\n\t\t\t\t{\n        \t\t\tdm_log_write( __FILE__, \n                \t\t__LINE__, \n                   \t\t \tLOG_INFO, \n                   \t\t \tLOG_INFO, \n                   \t\t \t\"Info: calling redirected driver function\" );\n\n                \treturn  SQLSETDESCFIELDW( parent_desc -> connection,\n\t\t\t\t\t\t\tdescriptor,\n\t\t\t\t\t\t\trec_number,\n\t\t\t\t\t\t\tfield_identifier,\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tbuffer_length );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n#endif\n        return SQL_INVALID_HANDLE;\n    }\n\n    function_entry( descriptor );\n\n    if ( log_info.log_flag )\n    {\n        sprintf( descriptor -> msg, \"\\n\\t\\tEntry:\\\n\\n\\t\\t\\tDescriptor = %p\\\n\\n\\t\\t\\tRec Number = %d\\\n\\n\\t\\t\\tField Ident = %s\\\n\\n\\t\\t\\tValue = %p\\\n\\n\\t\\t\\tBuffer Length = %d\",\n                descriptor,\n                rec_number,\n                __desc_attr_as_string( s1, field_identifier ),\n                value, \n                (int)buffer_length );\n\n        dm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                descriptor -> msg );\n    }\n\n    thread_protect( SQL_HANDLE_DESC, descriptor );\n\n    if ( descriptor -> connection -> state < STATE_C4 )\n    {\n        dm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                \"Error: HY010\" );\n\n        __post_internal_error( &descriptor -> error,\n                ERROR_HY010, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    /*\n     * check status of statements associated with this descriptor\n     */\n\n    if( __check_stmt_from_desc( descriptor, STATE_S8 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S9 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S10 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S11 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S12 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S13 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S14 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S15 )) {\n\n        dm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                \"Error: HY010\" );\n\n        __post_internal_error( &descriptor -> error,\n                ERROR_HY010, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    if ( rec_number < 0 )\n    {\n        __post_internal_error( &descriptor -> error,\n                ERROR_07009, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    switch ( field_identifier )\n    {\n    /* Fixed-length fields: buffer_length is ignored */\n    case SQL_DESC_ALLOC_TYPE:\n    case SQL_DESC_ARRAY_SIZE:\n    case SQL_DESC_ARRAY_STATUS_PTR:\n    case SQL_DESC_BIND_OFFSET_PTR:\n    case SQL_DESC_BIND_TYPE:\n    case SQL_DESC_COUNT:\n    case SQL_DESC_ROWS_PROCESSED_PTR:\n    case SQL_DESC_AUTO_UNIQUE_VALUE:\n    case SQL_DESC_CASE_SENSITIVE:\n    case SQL_DESC_CONCISE_TYPE:\n    case SQL_DESC_DATA_PTR:\n    case SQL_DESC_DATETIME_INTERVAL_CODE:\n    case SQL_DESC_DATETIME_INTERVAL_PRECISION:\n    case SQL_DESC_DISPLAY_SIZE:\n    case SQL_DESC_FIXED_PREC_SCALE:\n    case SQL_DESC_INDICATOR_PTR:\n    case SQL_DESC_LENGTH:\n    case SQL_DESC_NULLABLE:\n    case SQL_DESC_NUM_PREC_RADIX:\n    case SQL_DESC_OCTET_LENGTH:\n    case SQL_DESC_OCTET_LENGTH_PTR:\n    case SQL_DESC_PARAMETER_TYPE:\n    case SQL_DESC_PRECISION:\n    case SQL_DESC_ROWVER:\n    case SQL_DESC_SCALE:\n    case SQL_DESC_SEARCHABLE:\n    case SQL_DESC_TYPE:\n    case SQL_DESC_UNNAMED:\n    case SQL_DESC_UNSIGNED:\n    case SQL_DESC_UPDATABLE:\n        isStrField = 0;\n        break;\n    /* Pointer to data: buffer_length must be valid */\n    case SQL_DESC_BASE_COLUMN_NAME:\n    case SQL_DESC_BASE_TABLE_NAME:\n    case SQL_DESC_CATALOG_NAME:\n    case SQL_DESC_LABEL:\n    case SQL_DESC_LITERAL_PREFIX:\n    case SQL_DESC_LITERAL_SUFFIX:\n    case SQL_DESC_LOCAL_TYPE_NAME:\n    case SQL_DESC_NAME:\n    case SQL_DESC_SCHEMA_NAME:\n    case SQL_DESC_TABLE_NAME:\n    case SQL_DESC_TYPE_NAME:\n        isStrField = 1;\n        break;\n    default:\n        isStrField = buffer_length != SQL_IS_POINTER && buffer_length != SQL_IS_INTEGER\n            && buffer_length != SQL_IS_UINTEGER && buffer_length != SQL_IS_SMALLINT &&\n            buffer_length != SQL_IS_USMALLINT;\n    }\n    \n    if ( isStrField && buffer_length < 0 && buffer_length != SQL_NTS)\n    {\n        __post_internal_error( &descriptor -> error,\n            ERROR_HY090, NULL,\n            descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    if ( field_identifier == SQL_DESC_COUNT && (SQLINTEGER)value < 0 )\n    {\n        __post_internal_error( &descriptor -> error,\n                ERROR_07009, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    if ( field_identifier == SQL_DESC_PARAMETER_TYPE && value != SQL_PARAM_INPUT\n        && value != SQL_PARAM_OUTPUT && value != SQL_PARAM_INPUT_OUTPUT &&\n        value != SQL_PARAM_INPUT_OUTPUT_STREAM && value != SQL_PARAM_OUTPUT_STREAM )\n    {\n        __post_internal_error( &descriptor -> error,\n                ERROR_HY105, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    if ( descriptor -> connection -> unicode_driver ||\n\t\t    CHECK_SQLSETDESCFIELDW( descriptor -> connection ))\n\t{\n    \tif ( !CHECK_SQLSETDESCFIELDW( descriptor -> connection ))\n    \t{\n        \tdm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                \"Error: IM001\" );\n\n        \t__post_internal_error( &descriptor -> error,\n                ERROR_IM001, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        \treturn function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n\t\t}\n\n    \tret = SQLSETDESCFIELDW( descriptor -> connection,\n            \tdescriptor -> driver_desc,\n            \trec_number, \n            \tfield_identifier,\n            \tvalue, \n            \tbuffer_length );\n\t\n    \tif ( log_info.log_flag )\n    \t{\n        \tsprintf( descriptor -> msg, \n                \t\"\\n\\t\\tExit:[%s]\",\n                    \t__get_return_status( ret, s1 ));\n\t\n        \tdm_log_write( __FILE__, \n                \t__LINE__, \n                \tLOG_INFO, \n                \tLOG_INFO, \n                \tdescriptor -> msg );\n    \t}\n\t}\n\telse\n\t{\n\t\tSQLCHAR *ascii_str = NULL;\n\n    \tif ( !CHECK_SQLSETDESCFIELD( descriptor -> connection ))\n    \t{\n        \tdm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                \"Error: IM001\" );\n\n        \t__post_internal_error( &descriptor -> error,\n                ERROR_IM001, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        \treturn function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n\t\t}\n\n\t\t/*\n\t\t * is it a char arg...\n\t\t */\n\n\t\tswitch ( field_identifier )\n\t\t{\n\t\t\tcase SQL_DESC_NAME:\t\t/* This is the only R/W SQLCHAR* type */\n        \t\tascii_str = (SQLCHAR*) unicode_to_ansi_alloc( value, buffer_length, descriptor -> connection, NULL );\n\t\t\t\tvalue = ascii_str;\n\t\t\t\tbuffer_length = strlen((char*) ascii_str );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n    \tret = SQLSETDESCFIELD( descriptor -> connection,\n            \tdescriptor -> driver_desc,\n            \trec_number, \n            \tfield_identifier,\n            \tvalue, \n            \tbuffer_length );\n\t\n    \tif ( log_info.log_flag )\n    \t{\n        \tsprintf( descriptor -> msg, \n                \t\"\\n\\t\\tExit:[%s]\",\n                    \t__get_return_status( ret, s1 ));\n\t\n        \tdm_log_write( __FILE__, \n                \t__LINE__, \n                \tLOG_INFO, \n                \tLOG_INFO, \n                \tdescriptor -> msg );\n    \t}\n\n\t\tif ( ascii_str ) \n\t\t{\n\t\t\tfree( ascii_str );\n\t\t}\n\t}\n\n    return function_return( SQL_HANDLE_DESC, descriptor, ret );\n}\n", "dnl Process this file with autoconf to produce a configure script.\n\nAC_INIT([unixODBC], [2.3.5], nick@unixodbc.org, [unixODBC])\nAM_INIT_AUTOMAKE\n\ndnl Checks for programs.\nAC_PROG_AWK\nAC_PROG_YACC\nAC_PROG_CPP\nAC_PROG_CC\nAM_PROG_LEX\nAC_PROG_INSTALL\nAC_PROG_LN_S\nAC_PROG_MAKE_SET\nAC_CONFIG_MACRO_DIR([m4])\n\nAC_DISABLE_STATIC\n\ndnl Check if we want to worry about threads\n\nAC_ARG_ENABLE( threads, \n[  --enable-threads        build with thread support [default=yes]],\n[ case \"${enableval}\" in\n    yes) thread=true ;;\n    no) thread=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-thread) ;;\n    esac],[thread=true])\n\nAC_ARG_ENABLE( gnuthreads, \n[  --enable-gnuthreads     build with gnu threads support [default=no]],\n[ case \"${enableval}\" in\n    yes) gnuthread=true ;;\n    no) gnuthread=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-gnuthread) ;;\n    esac],[gnuthread=false])\n\nAC_ARG_ENABLE( readline, \n[  --enable-readline       build with readline  support [default=yes]],\n[ case \"${enableval}\" in\n    yes) readline=true ;;\n    no) readline=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-readline) ;;\n    esac],[readline=true])\n\nAC_ARG_ENABLE( inicaching, \n[  --enable-inicaching     build with ini file caching  support [default=yes]],\n[ case \"${enableval}\" in\n    yes) inicaching=true ;;\n    no) inicaching=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-inicaching) ;;\n    esac],[inicaching=true])\n\ndnl Check if we want to build the drivers\n\nAC_ARG_ENABLE( drivers, \n[  --enable-drivers        build included drivers [default=no]],\n[ case \"${enableval}\" in\n    yes) drivers=true ;;\n    no) drivers=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-drivers) ;;\n    esac],[drivers=false])\n\ndnl Check if we want to build the driver config\n\nAC_ARG_ENABLE( driverc, \n[  --enable-driver-conf    build included driver config libs [default=no]],\n[ case \"${enableval}\" in\n    yes) driverc=true ;;\n    no) driverc=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-driver-conf) ;;\n    esac],[driverc=false])\n\nAC_ARG_ENABLE( fastvalidate, \n[  --enable-fastvalidate   use relaxed handle checking in the DM [default=no]],\n[ case \"${enableval}\" in\n    yes) fastvalidate=true ;;\n    no) fastvalidate=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-fastvalidate) ;;\n    esac],[fastvalidate=false])\n\nAC_ARG_ENABLE( iconv, \n[  --enable-iconv          build with iconv support [default=yes]],\n[ case \"${enableval}\" in\n    yes) iconv=true ;;\n    no) iconv=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-iconv) ;;\n    esac],[iconv=true])\n\ndnl Check for sys/sem.h\n\nAC_CHECK_HEADERS(sys/sem.h, semh=true, semh=false)\n\nAC_ARG_ENABLE( stats,\n[  --enable-stats          build with statistic gathering support [default=no]],\n[ case \"${enableval}\" in\n    yes) if test \"x$semh\" = \"xfalse\"; then\n           AC_MSG_ERROR(stats enabled but required header was not found)\n         fi\n        stats=true ;;\n    no) stats=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-stats) ;;\n    esac],[stats=false])\n\nAC_ARG_ENABLE( setlibversion,\n[  --enable-setlibversion  build with VERS set in libraries [default=no]],\n[ case \"${enableval}\" in\n    yes) setlibversion=true ;;\n    no) setlibversion=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-setlibversion) ;;\n    esac],[setlibversion=false])\n\nAC_ARG_ENABLE( handlemap, \n[  --enable-handlemap      driver manager can map driver handles called back from broken drivers [default=no]],\n[ case \"${enableval}\" in\n    yes) handlemap=true ;;\n    no) handlemap=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-handlemap) ;;\n    esac],[handlemap=false])\n\nAC_ARG_ENABLE( stricterror, \n[  --enable-stricterror    error conform to the MS spec, the unixODBC prefix is removed for driver errors [default=yes]],\n[ case \"${enableval}\" in\n    yes) stricterror=true ;;\n    no) stricterror=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-stricterror) ;;\n    esac],[stricterror=true])\n\nAC_ARG_ENABLE( gui, \n[  --enable-gui            only included for backwards compatibility, gui now in its own project, see ChangeLog],\n[ case \"${enableval}\" in\n    *) ;;\n    esac])\n\ndnl Enable building of the convenience library\ndnl and set LIBLTDL accordingly\n\nINCLTDL=\"\"\nLIBLTDL=\"\"\n\nAC_LIBTOOL_WIN32_DLL\ndnl AC_PROG_LIBTOOL\n\ndnl AC_CONFIG_MACRO_DIR([libltdl/m4])\ndnl LT_CONFIG_LTDL_DIR([libltdl])\ndnl LTDL_INIT\n\nLT_CONFIG_LTDL_DIR([libltdl])\nLT_INIT([dlopen])\nLTDL_INIT([convenience])\n\ndnl Substitute INCLTDL and LIBLTDL in the Makefiles\nAC_SUBST(LTDLINCL)\nAC_SUBST(LIBLTDL)\n\n#dnl Find shared lib extension\n#AC_MSG_CHECKING(for shared lib extension)\n#SHLIBEXT=\"$shrext_cmds\"\n#AC_MSG_RESULT($shrext_cmds)\n#AC_SUBST(SHLIBEXT)\n\ndnl Find shared lib extension\nAC_MSG_CHECKING(for shared lib extension)\neval \"SHLIBEXT=$shrext_cmds\"\nAC_MSG_RESULT($SHLIBEXT)\nAC_SUBST(SHLIBEXT,$SHLIBEXT)\n\nAC_DEFINE_UNQUOTED([SHLIBEXT], \"$shrext_cmds\", [Shared lib extension])\nAC_DEFINE_DIR([DEFLIB_PATH], [libdir], [Lib directory])\nAC_DEFINE_DIR([LIB_PREFIX], [libdir], [Lib directory])\nAC_DEFINE_DIR([SYSTEM_FILE_PATH], [sysconfdir], [System file path])\nAC_DEFINE_DIR([SYSTEM_LIB_PATH], [libdir], [Lib path])\nAC_DEFINE_DIR([PREFIX], [prefix], [Install prefix])\nAC_DEFINE_DIR([EXEC_PREFIX], [exec_prefix], [Install exec_prefix])\nAC_DEFINE_DIR([BIN_PREFIX], [bindir], [Install bindir])\nAC_DEFINE_DIR([INCLUDE_PREFIX], [includedir], [Install includedir])\nAC_DEFINE([UNIXODBC], [], [Flag that we are not using another DM])\n\nif test \"x$iconv\" = \"xtrue\"; \nthen\n\nAM_ICONV\n\niconv_char_enc=\"auto-search\"\nAC_ARG_WITH(iconv_char_enc,\n    [  --with-iconv-char-enc=enc   Encoding to use as ASCII [default=auto-search] ],\n       iconv_char_enc=\"$withval\"\n    )\n\nICONV_CHAR_ENCODING=\"$iconv_char_enc\"\n\niconv_ucode_enc=\"auto-search\"\n\nAC_ARG_WITH(iconv_ucode_enc,\n    [  --with-iconv-ucode-enc=enc  Encoding to use as UNICODE [default=auto-search] ],\n       iconv_ucode_enc=\"$withval\"\n    )\n\nICONV_CHAR_ENCODING=\"\"\nICONV_UNICODE_ENCODING=\"\"\n\nif test \"$am_cv_func_iconv\" = yes; then\n  AC_MSG_CHECKING( for encoding to use for CHAR representations );\n  ICONV_CHAR_ENCODING=\"$iconv_char_enc\"\n  AC_MSG_RESULT( $iconv_char_enc );\n\n  AC_MSG_CHECKING( for encoding to use for UNICODE representations );\n  ICONV_UNICODE_ENCODING=\"$iconv_ucode_enc\"\n  AC_MSG_RESULT( $iconv_ucode_enc );\nfi\n\nAC_SUBST(ICONV_CHAR_ENCODING)\nAC_SUBST(ICONV_UNICODE_ENCODING)\n\nAC_DEFINE_UNQUOTED([UNICODE_ENCODING],\"$ICONV_UNICODE_ENCODING\",[Encoding to use for UNICODE])\nAC_DEFINE_UNQUOTED([ASCII_ENCODING],\"$ICONV_CHAR_ENCODING\",[Encoding to use for CHAR])\n\nfi\n\ndnl Checks for libraries.\nAC_CHECK_LIB(crypt, crypt, [ AC_DEFINE([HAVE_LIBCRYPT], [], [Add -lcrypt to lib list]) LIBADD_CRYPT=\"-lcrypt\" ])\nAC_SUBST(LIBADD_CRYPT)\nAC_CHECK_LIB(m, pow, [ LIBADD_POW=\"-lm\" ], )\nAC_SUBST(LIBADD_POW)\n\nhave_readline=\"no\"\n\nif test \"x$readline\" = \"xtrue\"; then\n  AC_CHECK_LIB_NOC(readline, readline, \n  [\n      READLINE=-lreadline\n      have_readline=\"yes\"\n  ],\n  [\n      dnl try with -lcurses\n      AC_CHECK_LIB_NOC(readline, readline,\n      [\n          READLINE=\"-lreadline -lcurses\"\n          have_readline=\"yes\"\n      ],\n      [\n      ],\n      -lcurses )\n  ])\n\n  if test \"x$have_readline\" = \"xyes\"; then\n      AC_CHECK_HEADERS(readline/history.h, [AC_DEFINE([HAVE_READLINE], [1], [Add readline support])])\n  fi\nfi\n\nAC_SUBST(READLINE)\n\nAC_MSG_CHECKING( Are we using ini caching )\nif test \"x$inicaching\" = \"xtrue\"; then\n\tAC_DEFINE([ENABLE_INI_CACHING],[],[Using ini cacheing])\n\tAC_MSG_RESULT( yes );\nelse\n\tAC_MSG_RESULT( no );\nfi\n\ndnl Are we using flex\nif test \"x$drivers\" = \"xtrue\"; then\nAC_MSG_CHECKING( Are we using flex )\nif test \"x$LEX\" = \"xflex\"; then\nLFLAGS=\"$LFLAGS -i\"\nAC_MSG_RESULT( yes );\nAC_CHECK_LIB(c, scandir, [AC_DEFINE([HAVE_SCANDIR], [1], [Use the scandir lib])] )\nelse\nAC_MSG_RESULT( no - text driver disabled );\nfi\nAM_CONDITIONAL(HAVE_FLEX, test \"x$LEX\" = \"xflex\" )\nAC_SUBST(LFLAGS)\nelse\nAM_CONDITIONAL(HAVE_FLEX, test \"xabc\" = \"xdef\" )\nfi\n\ncase $host_os in\n    *qnx* )\n    qnx=\"true\"\n    AC_DEFINE([QNX_LIBLTDL],[],[Using QNX])\n    ;;\nesac\n\ndnl check how time() can be used\nAC_HEADER_TIME\nAC_CHECK_HEADERS(sys/time.h)\n\nAC_CHECK_SIZEOF(long, 4)\n\nAC_MSG_CHECKING([if platform is 64 bit])\nif test \"$ac_cv_sizeof_long\" = \"8\"; then\n\tAC_MSG_RESULT( Yes );\n    AC_DEFINE([PLATFORM64],[],[Platform is 64 bit])\nelse\n\tAC_MSG_RESULT( No );\nfi\n\nAC_CHECK_LONG_LONG\nAC_CHECK_SIZEOF([long int])\nAC_CHECK_TYPES([ptrdiff_t])\n\nAC_CHECK_FUNCS( strcasecmp strncasecmp vsnprintf strtol atoll strtoll endpwent gettimeofday ftime time stricmp strnicmp getuid getpwuid nl_langinfo )\n\nAM_LANGINFO_CODESET\n\nLIBADD_DL=\nAC_SUBST(LIBADD_DL)\n\nTHREADLIB=\"\"\nif test \"x$thread\" = \"xtrue\"; then\n  if test \"x$gnuthread\" = \"xtrue\"; then\n    AC_CHECK_PTH( 1.3.0 )\n    CPPFLAGS=\"$CPPFLAGS $PTH_CPPFLAGS\"\n    CFLAGS=\"$CFLAGS $PTH_CFLAGS\"\n    LDFLAGS=\"$LDFLAGS $PTH_LDFLAGS\"\n    THREADLIB=\"$PTH_LIBS\"\n\tAC_DEFINE([HAVE_LIBPTH], [1], [Use the -lpth thread library])\n  else\n    gotthread=\"no\";\n\n\tAC_MSG_CHECKING( if os is AIX )\n\tcase $host_os in\n    \t\"aix\"*)\n\t\t\traw_threads=\"no\";\n\t\t\tAC_MSG_RESULT( yes - disable check for libthread );\n    \t;;\n    \t*)\n\t\t\traw_threads=\"yes\";\n\t\t\tAC_MSG_RESULT( no - enable check for libthread );\n        ;;\n\tesac\n\n    if test \"x$raw_threads\" = \"xyes\"; then\n    \tAC_CHECK_LIB_NOC(thread, mutex_lock,\n    \t[\n\t\tAC_DEFINE([HAVE_LIBTHREAD], [1], [Use the -lthread threading lib])\n      \tdnl Check if the compiler will build with -mt as a option, this is a solaris thing\n      \tAC_CHECK_COMP_OPT(mt)\n      \tgotthread=\"yes\";\n      \tTHREADLIB=\"-lthread\"\n    \t])\n\tfi\n\n    if test \"x$gotthread\" = \"xno\"; then\n      AC_CHECK_LIBPT_NOC(pthread, pthread_mutex_lock, \n      [\n\t\tAC_DEFINE([HAVE_LIBPTHREAD], [1], [Use -lpthread threading lib])\n        gotthread=\"yes\";\n        THREADLIB=\"-lpthread\"\n        if test \"x$ac_cv_prog_gcc\" = \"xyes\"; then\n          dnl Check if the compiler will build with -pthread as a option\n          AC_CHECK_COMP_OPT(pthread)\n        else\n          dnl Check if the compiler will build with -mt as a option\n          AC_CHECK_COMP_OPT(mt)\n        fi\n      ])\n    fi\n\n    if test \"x$gotthread\" = \"xno\"; then\n      AC_CHECK_LIBPT_NOC(c, pthread_mutex_lock, \n      [\n        AC_DEFINE(HAVE_LIBPTHREAD,1)\n        gotthread=\"yes\";\n        THREADLIB=\"\"\n        if test \"x$ac_cv_prog_gcc\" = \"xyes\"; then\n          dnl Check if the compiler will build with -pthread as a option\n          AC_CHECK_COMP_OPT(pthread)\n        else\n          dnl Check if the compiler will build with -mt as a option\n          AC_CHECK_COMP_OPT(mt)\n        fi\n      ])\n    fi\n\n    if test \"x$gotthread\" = \"xno\"; then\n      if test \"x$ac_cv_prog_gcc\" = \"xyes\"; then\n        dnl This is for freebsd that needs -lpthread before it finds the lib\n        AC_CHECK_COMP_OPT(pthread)\n        AC_CHECK_LIBPT_NOC(c, pthread_mutex_lock,\n        [\n          AC_DEFINE(HAVE_LIBPTHREAD,1)\n          THREADLIB=\"-pthread -lc_r\"\n          gotthread=\"yes\";\n        ])\n      fi\n    fi\n\n    dnl Check for AIX \n    if test \"x$gotthread\" = \"xno\"; then\n      SAVECFLAGS=\"$CFLAGS\"\n      CFLAGS=\"$CFLAGS -D_THREAD_SAFE -D_ALL_SOURCE -D_LONG_LONG\"\n      AC_CHECK_LIBPT_NOC(pthread, pthread_mutex_lock, \n      [\n        AC_DEFINE(HAVE_LIBPTHREAD,1)\n        gotthread=\"yes\";\n        THREADLIB=\"-lpthread\"\n      ])\n      CFLAGS=\"$SAVECFLAGS\"\n      AC_DEFINE([_THREAD_SAFE],[],[Build flag for AIX])\n      AC_DEFINE([_ALL_SOURCE],[],[Build flag for AIX])\n      AC_DEFINE([_LONG_LONG],[],[Build flag for AIX])\n    fi\n\n    if test \"x$gotthread\" = \"xyes\"; then\n      dnl do not add a -lc because of this\n      save_LIBS=$LIBS\n      AC_CHECK_LIB(c, localtime_r, [AC_DEFINE([HAVE_LOCALTIME_R], [1], [Use rentrant version of localtime] )])\n      LIBS=$save_LIBS\n    fi\n  fi\nfi\n\ncase $host_os in\n    \"darwin\"*)\n        stats=\"false\"\n        macosx=\"yes\"\n        AC_DEFINE([OSXHEADER],[],[Using OSX])\n    ;;\n\n    sysv5Open*)\n        if test \"x$THREADLIB\" = \"x\"; then\n          LIBS=\"$LIBS $THREADLIB\"\n        else\n          LIBS=\"$LIBS -Kthread\"\n        fi\n        ;;\n\n    *)\n        LIBS=\"$LIBS $THREADLIB\"\n        ;;\nesac\n\nif test \"x$stats\" = \"xtrue\"; then\n  AC_CHECK_FUNCS( ftok semget shmget semop snprintf,[],[stats=false])\nfi\n\nif test \"x$stats\" = \"xtrue\"; then\nAC_CHECK_SEMUNDOO\nAC_DEFINE([COLLECT_STATS], [], [Use a semaphore to allow ODBCConfig to display running counts])\nfi\n\nAC_ARG_WITH(msql-lib,\n    [  --with-msql-lib=DIR     where the root of MiniSQL libs are installed ],\n       msql_libraries=\"$withval\"\n    )\n\nAC_ARG_WITH(msql-include,\n    [  --with-msql-include=DIR where the MiniSQL headers are installed ],\n       msql_headers=\"$withval\"\n    )\n\nAC_SUBST(msql_libraries)\nAC_SUBST(msql_headers)\n\ndnl Checks for header files.\nAC_HEADER_STDC\n\nAC_CHECK_HEADERS(malloc.h unistd.h pwd.h crypt.h limits.h synch.h strings.h string.h locale.h sys/malloc.h sys/types.h sys/sem.h stdarg.h varargs.h sys/time.h sys/timeb.h time.h langinfo.h stddef.h )\n\nINCLUDES=\"$INCLUDES $USER_INCLUDES\";\n\ndnl only build the mSQL code if the headers are in place\nAC_CHECK_HEADERS(msql.h,[msql=true],\n[\n   msql=false;\n   for ac_dir in $kde_extra_includes $msql_headers; \n   do\n    AC_CHECK_HEADERS( $ac_dir/msql.h,\n    [\n        msql=true;\n        INCLUDES=\"$INCLUDES $USER_INCLUDES -I$ac_dir\";\n    ])\n   done\n])\n\ndnl AC_SUBST(all_includes)\ndnl AC_SUBST(all_libraries)\n\nAM_CONDITIONAL(MSQL, test \"x$msql\" = \"xtrue\" )\nAM_CONDITIONAL(DRIVERS, test \"x$drivers\" = \"xtrue\" )\nAM_CONDITIONAL(DRIVERC, test \"x$driverc\" = \"xtrue\" )\nAM_CONDITIONAL(QNX, test \"x$qnx\" = \"xtrue\" )\nAM_CONDITIONAL(WITHLT, test \"x$use_builtin_libtool\" = \"xyes\" )\n\ndnl This blows up due to what I think is a bug in automake 1.6.3\ndnl AC_SUBST(INCLUDES)\n\nif test \"x$fastvalidate\" = \"xtrue\"; then\nAC_DEFINE([FAST_HANDLE_VALIDATE], [], [Disable the precise but slow checking of the validity of handles])\nfi\n\nif test \"x$handlemap\" = \"xtrue\"; then\nAC_DEFINE([WITH_HANDLE_REDIRECT],[],[Work with IBM drivers that use 32 bit handles on 64 bit platforms])\nfi\n\nif test \"x$stricterror\" = \"xtrue\"; then\nAC_DEFINE([STRICT_ODBC_ERROR],[],[don't include unixODBC prefix in driver error messages])\nfi\n\ndnl Checks for typedefs, structures, and compiler characteristics.\nAC_C_CONST\nAC_TYPE_SIZE_T\nAC_STRUCT_TM\nAC_TYPE_UID_T\nAC_HEADER_DIRENT\n\ndnl Checks for library functions.\nAC_FUNC_ALLOCA\nAC_FUNC_VPRINTF\nAC_CHECK_FUNCS( putenv socket strdup strstr setenv setlocale strchr )\n\ndnl This is the unixODBC source tree\nAC_DEFINE([UNIXODBC_SOURCE],[],[We are building inside the unixODBC source tree])\n\nLIB_VERSION=\"2:0:0\"\nAC_SUBST(LIB_VERSION)\n\nAC_CONFIG_HEADERS(config.h)\nAC_CONFIG_HEADERS(unixodbc_conf.h)\n\nAC_OUTPUT( Makefile \\\n    extras/Makefile \\\n    log/Makefile \\\n    lst/Makefile \\\n    ini/Makefile \\\n    odbcinst/Makefile \\\n    cur/Makefile \\\n    DriverManager/Makefile \\\n    exe/Makefile \\\n    DRVConfig/Makefile \\\n    DRVConfig/drvcfg1/Makefile \\\n    DRVConfig/drvcfg2/Makefile \\\n    DRVConfig/PostgreSQL/Makefile \\\n    DRVConfig/MiniSQL/Makefile \\\n    DRVConfig/MySQL/Makefile \\\n    DRVConfig/nn/Makefile \\\n    DRVConfig/esoob/Makefile \\\n    DRVConfig/oplodbc/Makefile \\\n    DRVConfig/template/Makefile \\\n    DRVConfig/tds/Makefile \\\n    DRVConfig/txt/Makefile \\\n    DRVConfig/Oracle/Makefile \\\n    DRVConfig/sapdb/Makefile \\\n    DRVConfig/Mimer/Makefile \\\n    Drivers/Makefile \\\n    Drivers/Postgre7.1/Makefile \\\n    Drivers/nn/Makefile \\\n    Drivers/template/Makefile \\\n    Drivers/MiniSQL/Makefile \\\n    include/Makefile \\\n    man/Makefile \\\n    doc/Makefile \\\n    doc/AdministratorManual/Makefile \\\n    doc/ProgrammerManual/Makefile \\\n    doc/ProgrammerManual/Tutorial/Makefile \\\n    doc/UserManual/Makefile \\\n    doc/lst/Makefile \\\n    samples/Makefile \\\n    )\n\ndnl Attempt to add version information to libraries generated by libtool\nAC_MSG_CHECKING( are we setting library version )\nif test \"x$setlibversion\" = \"xtrue\"; then\n\tAC_MSG_RESULT( yes );\n    sed '/archive_expsym_cmds=/s/{ global/VERS_3.52 {global/' < libtool > libtool.tmp; mv libtool.tmp libtool\nelse\n\tAC_MSG_RESULT( no );\nfi\n", "/**************************************************\n * isql\n *\n **************************************************\n * This code was created by Peter Harvey @ CodeByDesign.\n * Released under GPL 18.FEB.99\n *\n * Contributions from...\n * -----------------------------------------------\n * Peter Harvey\t\t- pharvey@codebydesign.com\n **************************************************/\n\n#include <config.h>\n#define UNICODE\n#include \"isql.h\"\n#include \"ini.h\"\n#include \"sqlucode.h\"\n#ifdef HAVE_READLINE\n    #include <readline/readline.h>\n    #include <readline/history.h>\n#endif\n\n#ifdef HAVE_SETLOCALE\n    #ifdef HAVE_LOCALE_H\n        #include <locale.h>\n    #endif \n#endif\n\nstatic int OpenDatabase( SQLHENV *phEnv, SQLHDBC *phDbc, char *szDSN, char *szUID, char *szPWD );\nstatic int CloseDatabase( SQLHENV hEnv, SQLHDBC hDbc );\nstatic int ExecuteSQL( SQLHDBC hDbc, char *szSQL, char cDelimiter, int bColumnNames, int bHTMLTable );\nstatic int ExecuteHelp( SQLHDBC hDbc, char *szSQL, char cDelimiter, int bColumnNames, int bHTMLTable );\n\nstatic void WriteHeaderHTMLTable( SQLHSTMT hStmt );\nstatic void WriteHeaderNormal( SQLHSTMT hStmt, SQLCHAR\t*szSepLine );\nstatic void WriteHeaderDelimited( SQLHSTMT hStmt, char cDelimiter );\nstatic void WriteBodyHTMLTable( SQLHSTMT hStmt );\nstatic SQLLEN WriteBodyNormal( SQLHSTMT hStmt );\nstatic void WriteBodyDelimited( SQLHSTMT hStmt, char cDelimiter );\nstatic void WriteFooterHTMLTable( SQLHSTMT hStmt );\nstatic void WriteFooterNormal( SQLHSTMT hStmt, SQLCHAR\t*szSepLine, SQLLEN nRows );\n\nstatic int DumpODBCLog( SQLHENV hEnv, SQLHDBC hDbc, SQLHSTMT hStmt );\nstatic int get_args(char *string, char **args, int maxarg);\nstatic void free_args(char **args, int maxarg);\nstatic void output_help(void);\n\n\nint     bVerbose                    = 0;\nSQLHENV hEnv                        = 0;\nSQLHDBC hDbc                        = 0;\nint     buseED                      = 0;\n\nvoid UWriteHeaderNormal( SQLHSTMT hStmt, SQLTCHAR *szSepLine );\nvoid UWriteFooterNormal( SQLHSTMT hStmt, SQLTCHAR *szSepLine, SQLLEN nRows );\n\nstatic char * uc_to_ascii( SQLWCHAR *uc )\n{\n    char *ascii = (char *)uc;\n    int i;\n\n    for ( i = 0; uc[ i ]; i ++ )\n    {\n        ascii[ i ] = uc[ i ] & 0x00ff;\n    }\n\n    ascii[ i ] = 0;\n\n    return ascii;\n}\n\nstatic void ansi_to_unicode( char *szSQL, SQLWCHAR *szUcSQL )\n{\n    int i;\n\n    for ( i = 0; szSQL[ i ]; i ++ )\n    {\n        szUcSQL[ i ] = szSQL[ i ];\n    }\n    szUcSQL[ i ] = 0;\n}\n\nint main( int argc, char *argv[] )\n{\n    int     nArg, count;\n    int     bHTMLTable                  = 0;\n    int     bBatch                      = 0;\n    int     cDelimiter                  = 0;\n    int     bColumnNames                = 0;\n    char    *szDSN;\n    char    *szUID;\n    char    *szPWD;\n    char    *szSQL;\n    char    *pEscapeChar;\n    int     buffer_size = 9000;\n\n    szDSN = NULL;\n    szUID = NULL;\n    szPWD = NULL;\n\n    if ( argc < 2 )\n    {\n        fputs( szSyntax, stderr );\n        exit( 1 );\n    }\n\n#ifdef HAVE_SETLOCALE\n    /*\n     * Default locale\n     */\n    setlocale( LC_ALL, \"\" );\n#endif\n\n    /****************************\n     * PARSE ARGS\n     ***************************/\n    for ( nArg = 1, count = 1 ; nArg < argc; nArg++ )\n    {\n        if ( argv[nArg][0] == '-' )\n        {\n            /* Options */\n            switch ( argv[nArg][1] )\n            {\n                case 'd':\n                    cDelimiter = argv[nArg][2];\n                    break;\n                case 's':\n                    buffer_size = atoi( &(argv[nArg][2]) );\n                    break;\n                case 'w':\n                    bHTMLTable = 1;\n                    break;\n                case 'b':\n                    bBatch = 1;\n                    break;\n                case 'c':\n                    bColumnNames = 1;\n                    break;\n                case 'v':\n                    bVerbose = 1;\n                    break;\n                case 'e':\n                    buseED = 1;\n                    break;\n                case '-':\n                    printf( \"unixODBC \" VERSION \"\\n\" );\n                    exit(0);\n#ifdef HAVE_STRTOL\n                case 'x':\n                    cDelimiter = strtol( argv[nArg]+2, NULL, 0 );\n                    break;\n#endif\n#ifdef HAVE_SETLOCALE\n                case 'l':\n                    if ( !setlocale( LC_ALL, argv[nArg]+2 ))\n                    {\n                        fprintf( stderr, \"isql: can't set locale to '%s'\\n\", argv[nArg]+2 );\n                        exit ( -1 );\n                    }\n                    break;\n#endif\n                default:\n                    fputs( szSyntax, stderr );\n                    exit( 1 );\n            }\n            continue;\n        }\n        else if ( count == 1 )\n            szDSN = argv[nArg];\n        else if ( count == 2 )\n            szUID = argv[nArg];\n        else if ( count == 3 )\n            szPWD = argv[nArg];\n        count++;\n    }\n\n    szSQL = calloc( 1, buffer_size + 1 );\n\n    /****************************\n     * CONNECT\n     ***************************/\n    if ( !OpenDatabase( &hEnv, &hDbc, szDSN, szUID, szPWD ) )\n        exit( 1 );\n\n    /****************************\n     * EXECUTE\n     ***************************/\n    if ( !bBatch )\n    {\n        printf( \"+---------------------------------------+\\n\" );\n        printf( \"| Connected!                            |\\n\" );\n        printf( \"|                                       |\\n\" );\n        printf( \"| sql-statement                         |\\n\" );\n        printf( \"| help [tablename]                      |\\n\" );\n        printf( \"| quit                                  |\\n\" );\n        printf( \"|                                       |\\n\" );\n        printf( \"+---------------------------------------+\\n\" );\n    }\n    do\n    {\n        if ( !bBatch )\n#ifndef HAVE_READLINE\n            printf( \"SQL> \" );\n#else\n        {\n            char *line;\n            int malloced;\n\n            line=readline(\"SQL> \");\n            if ( !line )        /* EOF - ctrl D */\n            {\n                malloced = 1;\n                line = strdup( \"quit\" );\n            }\n            else\n            {\n                malloced = 0;\n            }\n            strncpy(szSQL, line, buffer_size );\n            add_history(line);\n            if ( malloced )\n            {\n                free(line);\n            }\n        }\n        else\n#endif\n        {\n            char *line;\n            int malloced;\n\n            line = fgets( szSQL, buffer_size, stdin );\n            if ( !line )        /* EOF - ctrl D */\n            {\n                malloced = 1;\n                line = strdup( \"quit\" );\n            }\n            else\n            {\n                malloced = 0;\n            }\n            strncpy(szSQL, line, buffer_size );\n            if ( malloced )\n            {\n                free(line);\n            }\n        }\n\n        /* strip away escape chars */\n        while ( (pEscapeChar=(char*)strchr(szSQL, '\\n')) != NULL || (pEscapeChar=(char*)strchr(szSQL, '\\r')) != NULL )\n            *pEscapeChar = ' ';\n\n        if ( szSQL[1] != '\\0' )\n        {\n            if ( strncmp( szSQL, \"quit\", 4 ) == 0 )\n                szSQL[1] = '\\0';\n            else if ( strncmp( szSQL, \"help\", 4 ) == 0 )\n                ExecuteHelp( hDbc, szSQL, cDelimiter, bColumnNames, bHTMLTable );\n            else if (memcmp(szSQL, \"--\", 2) != 0)\n                ExecuteSQL( hDbc, szSQL, cDelimiter, bColumnNames, bHTMLTable );\n        }\n\n    } while ( szSQL[1] != '\\0' );\n\n    /****************************\n     * DISCONNECT\n     ***************************/\n    CloseDatabase( hEnv, hDbc );\n\n    exit( 0 );\n}\n\n/****************************\n * OpenDatabase - do everything we have to do to get a viable connection to szDSN\n ***************************/\nstatic int OpenDatabase( SQLHENV *phEnv, SQLHDBC *phDbc, char *szDSN, char *szUID, char *szPWD )\n{\n    SQLCHAR dsn[ 1024 ], uid[ 1024 ], pwd[ 1024 ];\n    SQLTCHAR cstr[ 1024 ];\n    char zcstr[ 1024 ], tmp[ 1024 ];\n    int i;\n    size_t zclen;\n\n    if ( SQLAllocEnv( phEnv ) != SQL_SUCCESS )\n    {\n        fprintf( stderr, \"[ISQL]ERROR: Could not SQLAllocEnv\\n\" );\n        return 0;\n    }\n\n    if ( SQLAllocConnect( *phEnv, phDbc ) != SQL_SUCCESS )\n    {\n        if ( bVerbose ) DumpODBCLog( hEnv, 0, 0 );\n        fprintf( stderr, \"[ISQL]ERROR: Could not SQLAllocConnect\\n\" );\n        SQLFreeEnv( *phEnv );\n        return 0;\n    }\n\n    if ( szDSN )\n    {\n        size_t DSNlen=strlen( szDSN );\n        for ( i = 0; i < DSNlen; i ++ )\n        {\n            dsn[ i ] = szDSN[ i ];\n        }\n        dsn[ i ] = '\\0';\n    }\n    else\n    {\n        dsn[ 0 ] = '\\0';\n    }\n\n    if ( szUID )\n    {\n        size_t UIDlen=strlen( szUID );\n        for ( i = 0; i < UIDlen; i ++ )\n        {\n            uid[ i ] = szUID[ i ];\n        }\n        uid[ i ] = '\\0';\n    }\n    else\n    {\n        uid[ 0 ] = '\\0';\n    }\n\n    if ( szPWD )\n    {\n        size_t PWDlen=strlen( szPWD );\n        for ( i = 0; i < PWDlen; i ++ )\n        {\n            pwd[ i ] = szPWD[ i ];\n        }\n        pwd[ i ] = '\\0';\n    }\n    else\n    {\n        pwd[ 0 ] = '\\0';\n    }\n\n    sprintf( zcstr, \"DSN=%s\", dsn );\n    if ( szUID )\n    {\n        sprintf( tmp, \";UID=%s\", uid );\n        strcat( zcstr, tmp );\n    }\n    if ( szPWD )\n    {\n        sprintf( tmp, \";PWD=%s\", pwd );\n        strcat( zcstr, tmp );\n    }\n\n    zclen=strlen( zcstr );\n    for ( i = 0; i < zclen; i ++ )\n    {\n        cstr[ i ] = zcstr[ i ];\n    }\n    cstr[ i ] = 0;\n\n    if ( !SQL_SUCCEEDED( SQLDriverConnect( *phDbc, NULL, cstr, SQL_NTS, NULL, 0, NULL, SQL_DRIVER_NOPROMPT  )))\n    {\n        if ( bVerbose ) DumpODBCLog( hEnv, hDbc, 0 );\n        fprintf( stderr, \"[ISQL]ERROR: Could not SQLDriverConnect\\n\" );\n        SQLFreeConnect( *phDbc );\n        SQLFreeEnv( *phEnv );\n        return 0;\n    }\n    if ( bVerbose ) DumpODBCLog( hEnv, hDbc, 0 );\n\n    return 1;\n}\n\n/****************************\n * ExecuteSQL - create a statement, execute the SQL, and get rid of the statement\n *            - show results as per request; bHTMLTable has precedence over other options\n ***************************/\nstatic int ExecuteSQL( SQLHDBC hDbc, char *szSQL, char cDelimiter, int bColumnNames, int bHTMLTable )\n{\n    SQLHSTMT        hStmt;\n    SQLTCHAR        szSepLine[32001];   \n    SQLTCHAR        szUcSQL[32001]; \n    SQLSMALLINT     cols;\n    SQLINTEGER      ret;\n    SQLLEN          nRows                   = 0;\n\n    szSepLine[ 0 ] = 0;\n\n    ansi_to_unicode( szSQL, szUcSQL );\n\n    /****************************\n     * EXECUTE SQL\n     ***************************/\n    if ( SQLAllocStmt( hDbc, &hStmt ) != SQL_SUCCESS )\n    {\n        if ( bVerbose ) DumpODBCLog( hEnv, hDbc, 0 );\n        fprintf( stderr, \"[ISQL]ERROR: Could not SQLAllocStmt\\n\" );\n        return 0;\n    }\n\n    if ( buseED ) {\n        ret = SQLExecDirect( hStmt, szUcSQL, SQL_NTS );\n\n        if ( ret == SQL_NO_DATA )\n        {\n            fprintf( stderr, \"[ISQL]INFO: SQLExecDirect returned SQL_NO_DATA\\n\" );\n        }\n        else if ( ret == SQL_SUCCESS_WITH_INFO )\n        {\n            if ( bVerbose ) DumpODBCLog( hEnv, hDbc, hStmt );\n            fprintf( stderr, \"[ISQL]INFO: SQLExecDirect returned SQL_SUCCESS_WITH_INFO\\n\" );\n        }\n        else if ( ret != SQL_SUCCESS )\n        {\n            if ( bVerbose ) DumpODBCLog( hEnv, hDbc, hStmt );\n            fprintf( stderr, \"[ISQL]ERROR: Could not SQLExecDirect\\n\" );\n            SQLFreeStmt( hStmt, SQL_DROP );\n            free(szSepLine);\n            return 0;\n        }\n    }\n    else {\n        if ( SQLPrepare( hStmt, szUcSQL, SQL_NTS ) != SQL_SUCCESS )\n        {\n            if ( bVerbose ) DumpODBCLog( hEnv, hDbc, hStmt );\n            fprintf( stderr, \"[ISQL]ERROR: Could not SQLPrepare\\n\" );\n            SQLFreeStmt( hStmt, SQL_DROP );\n            return 0;\n        }\n    \n        ret =  SQLExecute( hStmt );\n    \n        if ( ret == SQL_NO_DATA )\n        {\n            fprintf( stderr, \"[ISQL]INFO: SQLExecute returned SQL_NO_DATA\\n\" );\n        }\n        else if ( ret == SQL_SUCCESS_WITH_INFO )\n        {\n            if ( bVerbose ) DumpODBCLog( hEnv, hDbc, hStmt );\n            fprintf( stderr, \"[ISQL]INFO: SQLExecute returned SQL_SUCCESS_WITH_INFO\\n\" );\n        }\n        else if ( ret != SQL_SUCCESS )\n        {\n            if ( bVerbose ) DumpODBCLog( hEnv, hDbc, hStmt );\n            fprintf( stderr, \"[ISQL]ERROR: Could not SQLExecute\\n\" );\n            SQLFreeStmt( hStmt, SQL_DROP );\n            return 0;\n        }\n    }\n\n    do \n    {\n        /*\n         * check to see if it has generated a result set\n         */\n\n        if ( SQLNumResultCols( hStmt, &cols ) != SQL_SUCCESS )\n        {\n            if ( bVerbose ) DumpODBCLog( hEnv, hDbc, hStmt );\n            fprintf( stderr, \"[ISQL]ERROR: Could not SQLNumResultCols\\n\" );\n            SQLFreeStmt( hStmt, SQL_DROP );\n            return 0;\n        }\n\n        if ( cols > 0 )\n        {\n            /****************************\n             * WRITE HEADER\n             ***************************/\n            if ( bHTMLTable )\n                WriteHeaderHTMLTable( hStmt );\n            else if ( cDelimiter == 0 )\n                UWriteHeaderNormal( hStmt, szSepLine );\n            else if ( cDelimiter && bColumnNames )\n                WriteHeaderDelimited( hStmt, cDelimiter );\n\n            /****************************\n             * WRITE BODY\n             ***************************/\n            if ( bHTMLTable )\n                WriteBodyHTMLTable( hStmt );\n            else if ( cDelimiter == 0 )\n                nRows = WriteBodyNormal( hStmt );\n            else\n                WriteBodyDelimited( hStmt, cDelimiter );\n        }\n\n        /****************************\n         * WRITE FOOTER\n         ***************************/\n        if ( bHTMLTable )\n            WriteFooterHTMLTable( hStmt );\n        else if ( cDelimiter == 0 )\n            UWriteFooterNormal( hStmt, szSepLine, nRows );\n    }\n    while ( SQL_SUCCEEDED( SQLMoreResults( hStmt )));\n\n    /****************************\n     * CLEANUP\n     ***************************/\n    SQLFreeStmt( hStmt, SQL_DROP );\n\n    return 1;\n}\n\n/****************************\n * ExecuteHelp - create a statement, execute the SQL, and get rid of the statement\n *             - show results as per request; bHTMLTable has precedence over other options\n ***************************/\nstatic int ExecuteHelp( SQLHDBC hDbc, char *szSQL, char cDelimiter, int bColumnNames, int bHTMLTable )\n{\n    char            szTable[250]                        = \"\";\n    SQLHSTMT        hStmt;\n    SQLTCHAR        szSepLine[32001];   \n    SQLLEN          nRows               = 0;\n\n    szSepLine[ 0 ] = 0;\n\n    /****************************\n     * EXECUTE SQL\n     ***************************/\n    if ( SQLAllocStmt( hDbc, &hStmt ) != SQL_SUCCESS )\n    {\n        if ( bVerbose ) DumpODBCLog( hEnv, hDbc, 0 );\n        fprintf( stderr, \"[ISQL]ERROR: Could not SQLAllocStmt\\n\" );\n        return 0;\n    }\n\n    if ( iniElement( szSQL, ' ', '\\0', 1, szTable, sizeof(szTable) ) == INI_SUCCESS )\n    {\n        SQLWCHAR tname[ 1024 ];\n\n        ansi_to_unicode( szTable, tname );\n        /* COLUMNS */\n        if ( SQLColumns( hStmt, NULL, 0, NULL, 0, tname, SQL_NTS, NULL, 0 ) != SQL_SUCCESS )\n        {\n            if ( bVerbose ) DumpODBCLog( hEnv, hDbc, hStmt );\n            fprintf( stderr, \"[ISQL]ERROR: Could not SQLColumns\\n\" );\n            SQLFreeStmt( hStmt, SQL_DROP );\n            return 0;\n        }\n    }\n    else\n    {\n        /* TABLES */\n        if ( SQLTables( hStmt, NULL, 0, NULL, 0, NULL, 0, NULL, 0 ) != SQL_SUCCESS )\n        {\n            if ( bVerbose ) DumpODBCLog( hEnv, hDbc, hStmt );\n            fprintf( stderr, \"[ISQL]ERROR: Could not SQLTables\\n\" );\n            SQLFreeStmt( hStmt, SQL_DROP );\n            return 0;\n        }\n    }\n\n    /****************************\n     * WRITE HEADER\n     ***************************/\n    if ( bHTMLTable )\n        WriteHeaderHTMLTable( hStmt );\n    else if ( cDelimiter == 0 )\n        UWriteHeaderNormal( hStmt, szSepLine );\n    else if ( cDelimiter && bColumnNames )\n        WriteHeaderDelimited( hStmt, cDelimiter );\n\n    /****************************\n     * WRITE BODY\n     ***************************/\n    if ( bHTMLTable )\n        WriteBodyHTMLTable( hStmt );\n    else if ( cDelimiter == 0 )\n        nRows = WriteBodyNormal( hStmt );\n    else\n        WriteBodyDelimited( hStmt, cDelimiter );\n\n    /****************************\n     * WRITE FOOTER\n     ***************************/\n    if ( bHTMLTable )\n        WriteFooterHTMLTable( hStmt );\n    else if ( cDelimiter == 0 )\n        UWriteFooterNormal( hStmt, szSepLine, nRows );\n\n    /****************************\n     * CLEANUP\n     ***************************/\n    SQLFreeStmt( hStmt, SQL_DROP );\n\n    return 1;\n}\n\n\n/****************************\n * CloseDatabase - cleanup in prep for exiting the program\n ***************************/\nint CloseDatabase( SQLHENV hEnv, SQLHDBC hDbc )\n{\n    SQLDisconnect( hDbc );\n    SQLFreeConnect( hDbc );\n    SQLFreeEnv( hEnv );\n\n    return 1;\n}\n\n\n/****************************\n * WRITE HTML\n ***************************/\nstatic void WriteHeaderHTMLTable( SQLHSTMT hStmt )\n{\n    SQLINTEGER      nCol                            = 0;\n    SQLSMALLINT     nColumns                        = 0;\n    SQLTCHAR        szColumnName[MAX_DATA_WIDTH+1]; \n\n    szColumnName[ 0 ] = 0;\n\n    printf( \"<table BORDER>\\n\" );\n    printf( \"<tr BGCOLOR=#000099>\\n\" );\n\n    if ( SQLNumResultCols( hStmt, &nColumns ) != SQL_SUCCESS )\n        nColumns = -1;\n\n    for ( nCol = 1; nCol <= nColumns; nCol++ )\n    {\n        SQLColAttribute( hStmt, nCol, SQL_DESC_LABEL, szColumnName, sizeof(szColumnName), NULL, NULL );\n\n        printf( \"<td>\\n\" );\n        printf( \"<font face=Arial,Helvetica><font color=#FFFFFF>\\n\" );\n        printf( \"%s\\n\", uc_to_ascii( szColumnName ));\n        printf( \"</font></font>\\n\" );\n        printf( \"</td>\\n\" );\n    }\n    printf( \"</tr>\\n\" );\n}\n\nstatic void WriteBodyHTMLTable( SQLHSTMT hStmt )\n{\n    SQLINTEGER      nCol                            = 0;\n    SQLSMALLINT     nColumns                        = 0;\n    SQLLEN          nIndicator                      = 0;\n    SQLTCHAR        szColumnValue[MAX_DATA_WIDTH+1];\n    SQLRETURN       nReturn                         = 0;\n    SQLRETURN       ret;\n\n    szColumnValue[ 0 ]  = 0;\n\n    if ( SQLNumResultCols( hStmt, &nColumns ) != SQL_SUCCESS )\n        nColumns = -1;\n\n    while ( (ret = SQLFetch( hStmt )) == SQL_SUCCESS ) /* ROWS */\n    {\n        printf( \"<tr>\\n\" );\n\n        for ( nCol = 1; nCol <= nColumns; nCol++ ) /* COLS */\n        {\n            printf( \"<td>\\n\" );\n            printf( \"<font face=Arial,Helvetica>\\n\" );\n\n            nReturn = SQLGetData( hStmt, nCol, SQL_C_WCHAR, (SQLPOINTER)szColumnValue, sizeof(szColumnValue), &nIndicator );\n            if ( nReturn == SQL_SUCCESS && nIndicator != SQL_NULL_DATA )\n            {\n                uc_to_ascii( szColumnValue );\n                fputs((char*) szColumnValue, stdout );\n            }\n            else if ( nReturn == SQL_ERROR )\n            {\n                ret = SQL_ERROR;\n                break;\n            }\n            else\n                printf( \"%s\\n\", \"\" );\n\n            printf( \"</font>\\n\" );\n            printf( \"</td>\\n\" );\n        }\n        if (ret != SQL_SUCCESS)\n            break;\n        printf( \"</tr>\\n\" );\n    }\n}\n\nstatic void WriteFooterHTMLTable( SQLHSTMT hStmt )\n{\n    printf( \"</table>\\n\" );\n}\n\n/****************************\n * WRITE DELIMITED\n * - this output can be used by the ODBC Text File driver\n * - last column no longer has a delimit char (it is implicit)...\n *   this is consistent with odbctxt\n ***************************/\nstatic void WriteHeaderDelimited( SQLHSTMT hStmt, char cDelimiter )\n{\n    SQLINTEGER      nCol                            = 0;\n    SQLSMALLINT     nColumns                        = 0;\n    SQLTCHAR            szColumnName[MAX_DATA_WIDTH+1]; \n\n    szColumnName[ 0 ]   = 0;    \n\n    if ( SQLNumResultCols( hStmt, &nColumns ) != SQL_SUCCESS )\n        nColumns = -1;\n\n    for ( nCol = 1; nCol <= nColumns; nCol++ )\n    {\n        SQLColAttribute( hStmt, nCol, SQL_DESC_LABEL, szColumnName, sizeof(szColumnName), NULL, NULL );\n        fputs((char*) uc_to_ascii( szColumnName ), stdout );\n        if ( nCol < nColumns )\n            putchar( cDelimiter );\n    }\n    putchar( '\\n' );\n}\n\nstatic void WriteBodyDelimited( SQLHSTMT hStmt, char cDelimiter )\n{\n    SQLINTEGER      nCol                            = 0;\n    SQLSMALLINT     nColumns                        = 0;\n    SQLLEN          nIndicator                      = 0;\n    SQLTCHAR            szColumnValue[MAX_DATA_WIDTH+1];\n    SQLRETURN       nReturn                         = 0;\n    SQLRETURN       ret;\n\n    szColumnValue[ 0 ]  = 0;\n\n    if ( SQLNumResultCols( hStmt, &nColumns ) != SQL_SUCCESS )\n        nColumns = -1;\n\n    /* ROWS */\n    while (( ret = SQLFetch( hStmt )) == SQL_SUCCESS )\n    {\n        /* COLS */\n        for ( nCol = 1; nCol <= nColumns; nCol++ )\n        {\n            nReturn = SQLGetData( hStmt, nCol, SQL_C_WCHAR, (SQLPOINTER)szColumnValue, sizeof(szColumnValue), &nIndicator );\n            if ( nReturn == SQL_SUCCESS && nIndicator != SQL_NULL_DATA )\n            {\n                uc_to_ascii( szColumnValue );\n                fputs((char*) szColumnValue, stdout );\n                if ( nCol < nColumns )\n                    putchar( cDelimiter );\n            }\n            else if ( nReturn == SQL_ERROR )\n            {\n                ret = SQL_ERROR;\n                break;\n            }\n            else\n            {\n                if ( nCol < nColumns )\n                    putchar( cDelimiter );\n            }\n        }\n        if (ret != SQL_SUCCESS)\n            break;\n        printf( \"\\n\" );\n    }\n    if ( ret == SQL_ERROR )\n    {\n        if ( bVerbose ) DumpODBCLog( 0, 0, hStmt );\n    }\n}\n\n/****************************\n * WRITE NORMAL\n ***************************/\nvoid UWriteHeaderNormal( SQLHSTMT hStmt, SQLTCHAR *szSepLine )\n{\n    SQLINTEGER      nCol                            = 0;\n    SQLSMALLINT     nColumns                        = 0;\n    SQLULEN         nMaxLength                      = 10;\n    SQLTCHAR            szColumn[MAX_DATA_WIDTH+20];    \n    SQLTCHAR            szColumnName[MAX_DATA_WIDTH+1]; \n    SQLTCHAR            szHdrLine[32001];   \n\n    szColumn[ 0 ]       = 0;    \n    szColumnName[ 0 ]   = 0;    \n    szHdrLine[ 0 ]      = 0;    \n\n    if ( SQLNumResultCols( hStmt, &nColumns ) != SQL_SUCCESS )\n        nColumns = -1;\n\n    for ( nCol = 1; nCol <= nColumns; nCol++ )\n    {\n        SQLColAttribute( hStmt, nCol, SQL_DESC_DISPLAY_SIZE, NULL, 0, NULL, (SQLLEN*)&nMaxLength );\n        SQLColAttribute( hStmt, nCol, SQL_DESC_LABEL, szColumnName, sizeof(szColumnName), NULL, NULL );\n        if ( nMaxLength > MAX_DATA_WIDTH ) nMaxLength = MAX_DATA_WIDTH;\n\n        uc_to_ascii( szColumnName );\n\n        /* SEP */\n        memset( szColumn, '\\0', sizeof(szColumn) );\n        memset( szColumn, '-', max( nMaxLength, strlen((char*)szColumnName) ) + 1 );\n        strcat((char*) szSepLine, \"+\" );\n        strcat((char*) szSepLine,(char*) szColumn );\n\n        /* HDR */\n        sprintf((char*) szColumn, \"| %-*s\", (int)max( nMaxLength, strlen((char*)szColumnName) ), (char*)szColumnName );\n        strcat((char*) szHdrLine,(char*) szColumn );\n    }\n    strcat((char*) szSepLine, \"+\\n\" );\n    strcat((char*) szHdrLine, \"|\\n\" );\n\n    puts((char*) szSepLine );\n    puts((char*) szHdrLine );\n    puts((char*) szSepLine );\n}\n\nstatic SQLLEN WriteBodyNormal( SQLHSTMT hStmt )\n{\n    SQLINTEGER      nCol                            = 0;\n    SQLSMALLINT     nColumns                        = 0;\n    SQLLEN          nIndicator                      = 0;\n    SQLTCHAR        szColumn[MAX_DATA_WIDTH+20];\n    SQLTCHAR        szColumnValue[MAX_DATA_WIDTH+1];\n    SQLTCHAR        szColumnName[MAX_DATA_WIDTH+1]; \n    SQLULEN         nMaxLength                      = 10;\n    SQLRETURN       nReturn                         = 0;\n    SQLRETURN       ret;\n    SQLLEN          nRows                           = 0;\n\n    szColumn[ 0 ]       = 0;\n    szColumnValue[ 0 ]  = 0;\n    szColumnName[ 0 ]   = 0;    \n\n    if ( SQLNumResultCols( hStmt, &nColumns ) != SQL_SUCCESS )\n        nColumns = -1;\n\n    /* ROWS */\n    while (( ret = SQLFetch( hStmt )) == SQL_SUCCESS )\n    {\n        /* COLS */\n        for ( nCol = 1; nCol <= nColumns; nCol++ )\n        {\n            SQLColAttribute( hStmt, nCol, SQL_DESC_LABEL, szColumnName, sizeof(szColumnName), NULL, NULL );\n            SQLColAttribute( hStmt, nCol, SQL_DESC_DISPLAY_SIZE, NULL, 0, NULL, (SQLLEN*)&nMaxLength );\n\n            uc_to_ascii( szColumnName );\n\n            if ( nMaxLength > MAX_DATA_WIDTH ) nMaxLength = MAX_DATA_WIDTH;\n            nReturn = SQLGetData( hStmt, nCol, SQL_C_WCHAR, (SQLPOINTER)szColumnValue, sizeof(szColumnValue), &nIndicator );\n            szColumnValue[MAX_DATA_WIDTH] = '\\0';\n            uc_to_ascii( szColumnValue );\n\n            if ( nReturn == SQL_SUCCESS && nIndicator != SQL_NULL_DATA )\n            {\n                if ( strlen((char*)szColumnValue) < max( nMaxLength, strlen((char*)szColumnName )))\n                {\n                    int i;\n                    size_t maxlen=max( nMaxLength, strlen((char*)szColumnName ));\n                    strcpy((char*) szColumn, \"| \" );\n                    strcat((char*) szColumn, (char*) szColumnValue );\n\n                    for ( i = strlen((char*) szColumnValue ); i < maxlen; i ++ )\n                    {\n                        strcat((char*) szColumn, \" \" );\n                    }\n                }\n                else\n                {\n                    strcpy((char*) szColumn, \"| \" );\n                    strcat((char*) szColumn, (char*) szColumnValue );\n                }\n            }\n            else if ( nReturn == SQL_ERROR )\n            {\n                ret = SQL_ERROR;\n                break;\n            }\n            else\n            {\n                sprintf((char*)  szColumn, \"| %-*s\", (int)max( nMaxLength, strlen((char*) szColumnName) ), \"\" );\n            }\n            fputs((char*)  szColumn, stdout );\n        }\n        if (ret != SQL_SUCCESS)\n            break;\n        printf( \"|\\n\" );\n        nRows++;\n    } \n    if ( ret == SQL_ERROR )\n    {\n        if ( bVerbose ) DumpODBCLog( 0, 0, hStmt );\n    }\n\n    return nRows;\n}\n\nvoid UWriteFooterNormal( SQLHSTMT hStmt, SQLTCHAR   *szSepLine, SQLLEN nRows )\n{\n    SQLLEN  nRowsAffected   = -1;\n\n    puts( (char*)szSepLine );\n\n    SQLRowCount( hStmt, &nRowsAffected );\n    printf( \"SQLRowCount returns %ld\\n\", nRowsAffected );\n\n    if ( nRows )\n    {\n        printf( \"%ld rows fetched\\n\", nRows );\n    }\n}\n\n\n\nstatic int DumpODBCLog( SQLHENV hEnv, SQLHDBC hDbc, SQLHSTMT hStmt )\n{\n    SQLTCHAR        szError[501];\n    SQLTCHAR        szSqlState[10];\n    SQLINTEGER  nNativeError;\n    SQLSMALLINT nErrorMsg;\n\n    if ( hStmt )\n    {\n        while ( SQLError( hEnv, hDbc, hStmt, szSqlState, &nNativeError, szError, 500, &nErrorMsg ) == SQL_SUCCESS )\n        {\n            printf( \"%s\\n\", uc_to_ascii( szError ));\n        }\n    }\n\n    if ( hDbc )\n    {\n        while ( SQLError( hEnv, hDbc, 0, szSqlState, &nNativeError, szError, 500, &nErrorMsg ) == SQL_SUCCESS )\n        {\n            printf( \"%s\\n\", uc_to_ascii( szError ));\n        }\n    }\n\n    if ( hEnv )\n    {\n        while ( SQLError( hEnv, 0, 0, szSqlState, &nNativeError, szError, 500, &nErrorMsg ) == SQL_SUCCESS )\n        {\n            printf( \"%s\\n\", uc_to_ascii( szError ));\n        }\n    }\n\n    return 1;\n}\n\n", "/**************************************************\n * SQLCreateDataSource\n *\n * This is a 100% UI so simply pass it on to odbcinst's UI\n * shadow share.\n *\n **************************************************\n * This code was created by Peter Harvey @ CodeByDesign.\n * Released under LGPL 28.JAN.99\n *\n * Contributions from...\n * -----------------------------------------------\n * Peter Harvey\t\t- pharvey@codebydesign.com\n **************************************************/\n#include <config.h>\n#include <odbcinstext.h>\n\n/*\n * Take a wide string consisting of null terminated sections, and copy to a ASCII version\n */\n\nchar* _multi_string_alloc_and_copy( LPCWSTR in )\n{\n    char *chr;\n    int len = 0;\n\n    if ( !in )\n    {\n        return in;\n    }\n\n    while ( in[ len ] != 0 || in[ len + 1 ] != 0 )\n    {\n        len ++;\n    }\n\n    chr = malloc( len + 2 );\n\n    len = 0;\n    while ( in[ len ] != 0 || in[ len + 1 ] != 0 )\n    {\n        chr[ len ] = 0xFF & in[ len ];\n        len ++;\n    }\n    chr[ len ++ ] = '\\0';\n    chr[ len ++ ] = '\\0';\n\n    return chr;\n}\n\nchar* _single_string_alloc_and_copy( LPCWSTR in )\n{\n    char *chr;\n    int len = 0;\n\n    if ( !in )\n    {\n        return in;\n    }\n\n    while ( in[ len ] != 0 )\n    {\n        len ++;\n    }\n\n    chr = malloc( len + 1 );\n\n    len = 0;\n    while ( in[ len ] != 0 )\n    {\n        chr[ len ] = 0xFF & in[ len ];\n        len ++;\n    }\n    chr[ len ++ ] = '\\0';\n\n    return chr;\n}\n\nSQLWCHAR* _multi_string_alloc_and_expand( LPCSTR in )\n{\n    SQLWCHAR *chr;\n    int len = 0;\n\n    if ( !in )\n    {\n        return in;\n    }\n    \n    while ( in[ len ] != 0 || in[ len + 1 ] != 0 )\n    {\n        len ++;\n    }\n\n    chr = malloc(sizeof( SQLWCHAR ) * ( len + 2 ));\n\n    len = 0;\n    while ( in[ len ] != 0 || in[ len + 1 ] != 0 )\n    {\n        chr[ len ] = in[ len ];\n        len ++;\n    }\n    chr[ len ++ ] = 0;\n    chr[ len ++ ] = 0;\n\n    return chr;\n}\n\nSQLWCHAR* _single_string_alloc_and_expand( LPCSTR in )\n{\n    SQLWCHAR *chr;\n    int len = 0;\n\n    if ( !in )\n    {\n        return in;\n    }\n\n    while ( in[ len ] != 0 )\n    {\n        len ++;\n    }\n\n    chr = malloc( sizeof( SQLWCHAR ) * ( len + 1 ));\n\n    len = 0;\n    while ( in[ len ] != 0 )\n    {\n        chr[ len ] = in[ len ];\n        len ++;\n    }\n    chr[ len ++ ] = 0;\n\n    return chr;\n}\n\nvoid _single_string_copy_to_wide( SQLWCHAR *out, LPCSTR in, int len )\n{\n    while ( len > 0 && *in )\n    {\n        *out = *in;\n        out++;\n        in++;\n        len --;\n    }\n    *out = 0;\n}\n\nvoid _single_copy_to_wide( SQLWCHAR *out, LPCSTR in, int len )\n{\n    while ( len >= 0 )\n    {\n        *out = *in;\n        out++;\n        in++;\n        len --;\n    }\n}\n\nvoid _single_copy_from_wide( SQLCHAR *out, LPCWSTR in, int len )\n{\n    while ( len >= 0 )\n    {\n        *out = *in;\n        out++;\n        in++;\n        len --;\n    }\n}\n\nvoid _multi_string_copy_to_wide( SQLWCHAR *out, LPCSTR in, int len )\n{\n    while ( len > 0 && ( in[ 0 ] || in[ 1 ] ))\n    {\n        *out = *in;\n        out++;\n        in++;\n        len --;\n    }\n    *out++ = 0;\n    *out++ = 0;\n}\n\n/*! \n * \\brief   Invokes a UI (a wizard) to walk User through creating a DSN.\n * \n * \\param   hWnd    Input. Parent window handle. This is HWND as per the ODBC\n *                  specification but in unixODBC we use a generic window\n *                  handle. Caller must cast a HODBCINSTWND to HWND at call. \n * \\param   pszDS   Input. Data Source Name. This can be a NULL pointer.\n * \n * \\return  BOOL\n *\n * \\sa      ODBCINSTWND\n */\nBOOL SQLCreateDataSource( HWND hWnd, LPCSTR pszDS )\n{\n    HODBCINSTWND  hODBCInstWnd = (HODBCINSTWND)hWnd;\n    char          szName[FILENAME_MAX];\n    char          szNameAndExtension[FILENAME_MAX];\n    char          szPathAndName[FILENAME_MAX];\n    void *        hDLL;\n    BOOL          (*pSQLCreateDataSource)(HWND, LPCSTR);\n\n    inst_logClear();\n\n    /* ODBC specification states that hWnd is mandatory. */\n    if ( !hWnd )\n    {\n        inst_logPushMsg( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_HWND, \"\" );\n        return FALSE;\n    }\n\n    /* initialize libtool */\n    if ( lt_dlinit() )\n    {\n        inst_logPushMsg( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_GENERAL_ERR, \"lt_dlinit() failed\" );\n        return FALSE;\n    }\n\n    /* get plugin name */\n    _appendUIPluginExtension( szNameAndExtension, _getUIPluginName( szName, hODBCInstWnd->szUI ) );\n\n    /* lets try loading the plugin using an implicit path */\n    hDLL = lt_dlopen( szNameAndExtension );\n    if ( hDLL )\n    {\n        /* change the name, as it avoids it finding it in the calling lib */\n        pSQLCreateDataSource = (BOOL (*)(HWND, LPCSTR))lt_dlsym( hDLL, \"ODBCCreateDataSource\" );\n        if ( pSQLCreateDataSource )\n            return pSQLCreateDataSource( ( *(hODBCInstWnd->szUI) ? hODBCInstWnd->hWnd : NULL ), pszDS );\n        else\n            inst_logPushMsg( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_GENERAL_ERR, (char*)lt_dlerror() );\n    }\n    else\n    {\n        /* try with explicit path */\n        _prependUIPluginPath( szPathAndName, szNameAndExtension );\n        hDLL = lt_dlopen( szPathAndName );\n        if ( hDLL )\n        {\n            /* change the name, as it avoids linker finding it in the calling lib */\n            pSQLCreateDataSource = (BOOL (*)(HWND,LPCSTR))lt_dlsym( hDLL, \"ODBCCreateDataSource\" );\n            if ( pSQLCreateDataSource )\n                return pSQLCreateDataSource( ( *(hODBCInstWnd->szUI) ? hODBCInstWnd->hWnd : NULL ), pszDS );\n            else\n                inst_logPushMsg( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_GENERAL_ERR, (char*)lt_dlerror() );\n        }\n    }\n\n    /* report failure to caller */\n    inst_logPushMsg( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_GENERAL_ERR, \"\" );\n\n    return FALSE;\n}\n\n/*! \n * \\brief   A wide char version of \\sa SQLCreateDataSource.\n * \n * \\sa      SQLCreateDataSource\n */\nBOOL INSTAPI SQLCreateDataSourceW( HWND hwndParent, LPCWSTR lpszDSN )\n{\n    BOOL ret;\n    char *ms = _multi_string_alloc_and_copy( lpszDSN );\n\n    inst_logClear();\n\n    ret = SQLCreateDataSource( hwndParent, ms );\n\n    free( ms );\n\n    return ret;\n}\n\n", "/**************************************************\n *\n **************************************************\n * This code was created by Peter Harvey @ CodeByDesign.\n * Released under LGPL 28.JAN.99\n *\n * Contributions from...\n * -----------------------------------------------\n * Peter Harvey\t\t- pharvey@codebydesign.com\n **************************************************/\n#include <config.h>\n#include <odbcinstext.h>\n\nBOOL SQLWriteFileDSN(\t\t\tLPCSTR\tpszFileName,\n\t\t\t\t\t\t\t\tLPCSTR\tpszAppName,\n\t\t\t\t\t\t\t\tLPCSTR\tpszKeyName,\n\t\t\t\t\t\t\t\tLPCSTR\tpszString )\n{\n\tHINI\thIni;\n\tchar\tszFileName[ODBC_FILENAME_MAX+1];\n\n\tif ( pszFileName[0] == '/' )\n\t{\n\t\tstrncpy( szFileName, sizeof(szFileName) - 5, pszFileName );\n\t}\n\telse\n\t{\t\n\t\tchar szPath[ODBC_FILENAME_MAX+1];\n\t\t*szPath = '\\0';\n\t\t_odbcinst_FileINI( szPath );\n\t\tsnprintf( szFileName, sizeof(szFileName) - 5, \"%s/%s\", szPath, pszFileName );\n\t}\n\n    if ( strlen( szFileName ) < 4 || strcmp( szFileName + strlen( szFileName ) - 4, \".dsn\" ))\n    {\n        strcat( szFileName, \".dsn\" );\n    }\n\n#ifdef __OS2__\n\tif ( iniOpen( &hIni, szFileName, \"#;\", '[', ']', '=', TRUE, 0L ) != INI_SUCCESS )\n#else\n\tif ( iniOpen( &hIni, szFileName, \"#;\", '[', ']', '=', TRUE ) != INI_SUCCESS )\n#endif\n\t{\n       \tinst_logPushMsg( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, \"\" );\n\t\treturn FALSE;\n\t}\n\n\t/* delete section */\n\tif ( pszString == NULL && pszKeyName == NULL )\n\t{\n\t\tif ( iniObjectSeek( hIni, (char *)pszAppName ) == INI_SUCCESS )\n        {\n\t\t\tiniObjectDelete( hIni );\n        }\n\t}\n\t/* delete entry */\n\telse if\t( pszString == NULL )\n\t{\n\t\tif ( iniPropertySeek( hIni, (char *)pszAppName, (char *)pszKeyName, \"\" ) == INI_SUCCESS )\n        {\n\t\t\tiniPropertyDelete( hIni );\n        }\n\t}\n\telse\n\t{\n\t\t/* add section */\n\t\tif ( iniObjectSeek( hIni, (char *)pszAppName ) != INI_SUCCESS )\n        {\n\t\t\tiniObjectInsert( hIni, (char *)pszAppName );\n        }\n\t\t/* update entry */\n\t\tif ( iniPropertySeek( hIni, (char *)pszAppName, (char *)pszKeyName, \"\" ) == INI_SUCCESS )\n\t\t{\n\t\t\tiniObjectSeek( hIni, (char *)pszAppName );\n\t\t\tiniPropertyUpdate( hIni, (char *)pszKeyName, (char *)pszString );\n\t\t}\n\t\t/* add entry */\n\t\telse\n\t\t{\n\t\t\tiniObjectSeek( hIni, (char *)pszAppName );\n\t\t\tiniPropertyInsert( hIni, (char *)pszKeyName, (char *)pszString );\n\t\t}\n\t}\n\n\tif ( iniCommit( hIni ) != INI_SUCCESS )\n\t{\n\t\tiniClose( hIni );\n        inst_logPushMsg( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_REQUEST_FAILED, \"\" );\n\t\treturn FALSE;\n\t}\n\n\tiniClose( hIni );\n\n\treturn TRUE;\n}\n\nBOOL INSTAPI SQLWriteFileDSNW(LPCWSTR  lpszFileName,\n                              LPCWSTR  lpszAppName,\n                              LPCWSTR  lpszKeyName,\n                              LPCWSTR  lpszString)\n{\n\tBOOL ret;\n\tchar *file;\n\tchar *app;\n\tchar *key;\n\tchar *str;\n\n\tfile = lpszFileName ? _single_string_alloc_and_copy( lpszFileName ) : (char*)NULL;\n\tapp = lpszAppName ? _single_string_alloc_and_copy( lpszAppName ) : (char*)NULL;\n\tkey = lpszKeyName ? _single_string_alloc_and_copy( lpszKeyName ) : (char*)NULL;\n\tstr = lpszString ? _single_string_alloc_and_copy( lpszString ) : (char*)NULL;\n\n\tret = SQLWriteFileDSN( file, app, key, str );\n\n\tif ( file )\n\t\tfree( file );\n\tif ( app )\n\t\tfree( app );\n\tif ( key )\n\t\tfree( key );\n\tif ( str )\n\t\tfree( str );\n\n\treturn ret;\n}\n"], "fixing_code": ["2.3.6pre\n\n    * Fix order of arguments in SQLWriteFileDSN.c, fix unwanted free() in iusql.c\n\n2-Jan-2018\n2.3.5\n\n    * Add configure option --enable-setlibversion set mark the libs with VERS_3.52\n      Linux only, so any driver built with the libs will work with closed source \n      DM's\n    * Add persistent storage of isql command line history if readline() is used (thanks Axel)\n    * Rename some local mutex functions to avoid name clashes\n    * Assorted fixes (Thanks Markus * 2)\n    * Fix regression in ini caching\n    * Make SQLDrivers look in user as well as system odbcinst.ini for driver attributes\n    * If in use, clear the ini cache when a write is done via SQLWritePrivateProfileString() so \n      the new value is read\n    * Fix problem with pooling if the environment was released by the application\n    * Add check for SQL_COLUMN_COUNT in SQLColAttribute\n    * isql would not display long error messages. Fixed now.\n    * Fix problem calling the driver to report errors if the error is from the DM and the driver \n      has not been called\n    * SQLSetConnectAttrW crashes when attempting to set SQL_ATTR_LOGIN_TIMEOUT\n    * Buffer overflow in unicode_to_ansi_copy()\n    * SQLDriverConnect with not-found FILEDSN causes crash\n    * SQLGetDescRec with null name pointer causes crash\n    * Connection string escaping does not work\n    * SQLDriverConnect/W with very long driver name causes crash\n    * Connection string with trailing empty value causes crash\n    * Freeing explicitly allocated descriptor results in writing to freed memory\n    * Buffer overflows and missing null checks in SQLConfigDataSource, SQLInstallDriverEx, and SQLWriteFileDSN\n    * Statement enters incorrect state upon SQLExecDirectW returning SQL_NO_DATA\n    * SQLBulkOperations fails to exit async state after success\n    * SQLFreeStmt causes prepared statements in S1 or S2 to erroneously transition to S3\n    * Buffer length fixes for SQLGetDiagField\n    * SQLSetConnectAttrW and Unicode string pre-connect attributes do not work\n    * SQLGetData and SQLSetPos async states are incorrect\n    * Various string conversion and length issues in SQLColAttribute(s)\n    * Missing buffer length check in SQLColAttribute(s)W\n    * SQLGetStmtAttr state handling incorrect in S5, S6, and S7 (via SQLExtendedFetch)\n    * SQLSetPos and SQLExtendedFetch state management fixes\n    * SQLExecDirect/W erroneous transition to S1 upon error in S5\n    * Async SQLGetData and SQLExecDirect/W fails to restore state upon cancellation\n    * SQLFetchScroll cannot move cursor back into the rowset\n    * SQLSetDescField doesn't adjust the length of the buffer when converting to unicode\n    * SQLGetDescField/W and SQLSetDescField/W do not check for negative buffer lengths\n    * SQLSetStmtAttrW SQL_ATTR_APP_PARAM_DESC and SQL_ATTR_APP_ROW_DESC does not accept null\n    * SQLGetData async state reentrancy issues\n    * SQLDriversW off-by-one in enumerating driver list\n    * SQLPrimaryKeys does not pass length in characters to driver\n    * SQLGetConnectAttr with string attributes truncates to half buffer length\n    * SQLTransact with autocommit enabled erroneously changes statement state\n    * SQLDataSources/W fails to reset list position upon end\n    * SQLGetEnvAttr successfully returns unset SQL_ATTR_ODBC_VERSION\n    * Lack of SQL_HANDLE_SENV support\n    * SQLAllocEnv fails to set environment version correctly\n    * SQLMoreResults with streamed output parameters returns unexpected HY010\n    * Custom pre-connect pointer attributes are truncated to 32 bits\n    * 08003 message should be \"Connection not open\"\n    * SQL_ATTR_ACCESS_MODE set using SQLSetConnectOption/W before connecting does not persist after disconnecting\n    * SQL_ATTR_AUTOCOMMIT incorrect default value before connecting\n    * SQL_AUTOCOMMIT set using SQLSetConnectOption/W before connecting does not persist after disconnecting\n    * SQLAllocHandle/SQLFreeHandle with invalid handle type should return SQL_INVALID_HANDLE\n    * SQLAllocHandleStd not setting ODBC version correctly\n    * SQLBindParameter does not ignore BufferLength for DAE parameters\n    * SQLBindParameter does not ignore BufferLength for fixed-length parameters\n    * SQLBindParameter returns \"Invalid application buffer type\" instead of \" Program type out of range\"\n    * SQLCancel with 01S05 returned from driver should result in SQL_SUCCESS, not SQL_SUCCESS_WITH_INFO \n      (see https://msdn.microsoft.com/en-us/library/aa392708(v=vs.85).aspx )\n    * SQLColAttribute/SQLColAttributes should return number of bytes needed for Unicode string when truncating\n    * SQLColumnPrivileges/W differing error message precedence from Windows DM and order in ODBC spec\n    * SQLColumns/W extraneous checks on null string's length\n    * SQLCopyDesc does not copy descriptors across connections correctly\n    * SQLDescribeParam extraneous checks for state\n    * SQLDriverConnect/W adds extraneous DM prefix to diagnostic messages\n    * SQLDriversW before ODBC version set returns incorrect SQLSTATE\n    * SQLFetch in state S7 does not return error from DM\n    * SQLFetchScroll missing check for SQL_FETCH_BOOKMARK\n    * SQLForeignKeys/W missing check for null table names\n    * SQLGetConnectAttr/W erroneously retrieves attributes with no default (SQL_ATTR_PACKET_SIZE, SQL_ATTR_QUIET_MODE)\n    * SQLGetConnectAttr/W fails to get some set attributes before connecting\n    * SQLGetConnectAttr/W fails to retrieve set attributes with no connection\n    * SQLGetConnectAttrW returns incorrect value for SQL_ATTR_TRACE\n    * SQLGetConnectOption/W cannot retrieve SQL_ODBC_CURSORS before connection\n    * SQLGetConnectOption/W fails to retrieve SQL_LOGIN_TIMEOUT before connecting\n    * SQLGetConnectOption/W fails to retrieve SQL_ATTR_ACCESS_MODE set with SQLSetConnectOption/W\n    * SQLGetData and SQLSetPos async states are incorrect\n    * SQLGetData missing check for cursor end indication; SQLSetCursorName/W fails to clear previous diagnostic records\n    * SQLGetDiagField/W does not check record number for SQL_DIAG_ROW_COUNT and SQL_DIAG_DYNAMIC_FUNCTION_CODE\n    * SQLGetDiagField/W missing check for negative buffer length for string fields\n    * SQLGetDiagField/W inconsistent handling of statement-only diagnostic fields\n    * SQLGetInstalledDrivers off-by-one length\n    * SQLGetStmtOption various state handling issues\n    * SQLSetConnectAttr/W SQL_ATTR_CURRENT_CATALOG extraneous check with error 24000\n    * SQLSetConnectAttr/W does not prevent attempts to set ODBC 3.x statement attributes\n    * SQLSetConnectAttr/W with null string attributes causes crash\n    * SQLSetConnectOption passes SQL_ATTR_TRACEFILE to the driver\n    * SQLSetConnectOption/W or SQLSetConnectAttr/W missing validity checks for SQL_ATTR_TXN_ISOLATION\n    * SQLSetConnectOption/W setting SQL_ATTR_TRACEFILE to null results in different error\n    * SQLSetCursorName/W missing checks for negative name length\n    * SQLSetDescField/W missing check for negative SQL_DESC_COUNT\n    * SQLSetParam missing various error checks for invalid data types and buffer \n    * SQLSetPos does not check for state S5\n    * SQLSetPos missing checks in state S7\n    * SQLSetScrollOptions various state handling issues\n    * SQLSetStmtOption/W missing check for positive rowset sizes\n    * SQLSpecialColumns/W error precedence differs from Windows DM\n    * SQLSpecialColumns/W incorrect check for SQL_NTS string lengths\n    * SQLStatisticsW uniqueness parameter missing validation\n    * SQLTablePrivileges/W extraneous checks on null string's length\n    * Various issues with SQLGetFunctions\n    * Various string conversion and length issues in SQLColAttribute; missing buffer length check in SQLColAttributeW\n    * As above, but for SQLColAttributes and SQLColAttributesW; incorrect check for SQL_COLUMN_COUNT\n    * Setting SQL_ATTR_TRACEFILE to null value results in different error\n    * check_target_type allows driver-specific C data types for ODBC < 3.8\n    * fix empty SQL_DIAG_SERVER_NAME field in DM-supplied diag recs\n    * fix differing behaviour for an empty string DSN in SQLConnect/W\n    * Alter isql to return errors from SQLMoreResults\n    * Handle case of building on mingw-w64\n\n3rd-Aug-2015\n2.3.4\n\n    * Fix typo in the loading of the cursor lib, reports\n\n\tinternal error, unexpected SHLIBEXT\n\n2nd-Aug-2015\n2.3.3\n\n    * Reporting of logging state was broken in SQLGetConnectAttr\n    * Fix incorrect text against HY007\n    * Add -L option to isql to increase max column data display\n    * Update automake toolset in svn\n    * Add SQLFreeStmt( SQL_CLOSE ) function to SQLCancel\n    * Allow SQL_NTS as a buffer length to SQLBindParameter\n    * More manual pages for the tools\n    * Fix buffer overrun returning long diagnostic from driver\n    * Cross call between wide and ascii error reporting in the driver when needed\n    * Fix some possible unchecked memory references after malloc\n    * Prevent free( NULL ) in SQLGetDiagRecW\n    * Add missing A->W conversion in SQLGetStmtOption\n    * Allow iconv to convert strings into the driver with differing A and W lengthts (UTF)\n    * SQLDataSourcesW takes buffer_lenghts as characters not bytes\n    * Fix memory leak in SQLGetDiagRec\n    * Allow setting custom non standard attributes via DMStmtAttr, format is:\n\n        DMStmtAttr=[xxxx]=\\yyy\n        DMStmtAttr=[xxxx]={ssss}\n\n        where xxxx = integer attribute to set, yyy is decimal numeric value and\n        ssss is a string value\n\n    * Add check in SQLGetData for null target value or negative buffer length\n    * Fix memory leak when using the cursor lib\n    * Catch incorrectly expanded SHLIBEXT\n    * There was a bug in the ini caching, now fixed\n    * More ODBC 3.80 additions (streaming parameters)\n    * Check for NULL handle in __validate_xxx()\n    * Avoid potential memory leak in SQLAllocStatement\n    * Avoid buffer overflow via environment variamles\n    * Fix some typos\n\n8th-October-2013\n2.3.2\n\n    * The logging of WStrings was using the incorrect length in some cases\n    * Pass SQLDescribeCol call to driver when in state 2 (not a cursor spec).\n    * Pass SQLMoreResults call to driver when in state 2 (not a cursor spec).\n      Both the last two changes are not as per the original book state table\n      but allign with the current MS driver manager\n    * The -e option to isql got lost somewhere. Back in now\n    * Update install-sh\n    * SQLCancel assumed that the DM was being built with thread support\n    * Try and speed up SQLTransact and SQLEndTran operation\n    * Add missing \\ in Postgres7.1 Makefile\n    * Correct some potential buffer overflows\n    * Handle SQL_NEED_DATA from a SQLMoreResults \n    * Get the local charset via nl_langinfo(CODESET) when asking the DM to do ASCII-UNICODE conversions\n    * Handle (and remove) leading spaces from ini entries\n    * Fixed unicode conversion problems in SQLGetDiagField(W)\n    * missing terminating null in iusql\n    * add to the list of errno states that does not cause a create of the ini file\n    * SQLSetConnactAttr() -> SQLSetConnectAttrW() was passing incorrect string length\n    * Fix double free in SQLGetDiagFieldW\n    * Fix Unicode/Ansi conversion problem in SQLGetDiagFieldW.c\n    * Add support for Driver64 in SQLDriverConnectW\n    * Add missing unicode setting when returning a connection to the pool\n    * Tidy up leaking iconv handles if connect_part_one fails\n    * Fix (and avoid) some out of memory problems\n    * Wrap lt_dlinit and dlerror in the lib mutex\n    * Add slencheck executable to try and find the sizeof(SQLLEN) from a installed driver\n    * SQL_NO_DATA after SQL_STILL_EXECUTING in SQLExtendedFetch was not setting the state correctly\n    * A little more 3.80 stuff being added\n    * Added fixes found by coverity\n    * Added man pages\n    * Patches to update VMS build\n    * Change mutex protection around release_env\n    * Altered strlen to be count of bytes in SQLGetDiagFieldW\n    * Add check for W function support in do_attr\n    * Allow SQLDrivers to return attribute length with no supplied buffer\n\n26th-November-2011\n2.3.1\n    \n    * Change type definition of a integer in SQLConnect.c, just to avoid\n      confusion\n    * Allow setting the DM overrive values in the connection string to SQLDriverConnect\n      for example\n      \"DRIVER={Easysoft ODBC-SQL Server};Server=myserver;UID=user;PWD=pass;DMStmtAttr=SQL_QUERY_TIMEOUT=10;\"\n    * Error and info message order was being inverted by the driver manager\n    * Fix memory leak in SQLDriverConnect.c (Thanks JM)\n    * The keyword matching for DRIVER=, DSN= etc was case sensitive. Make it insensitive now\n    * Avoid sprintf NULL pointer problem in SQLGetDiagRec\n    * Fix typo affecting the pooling of connections, (thanks Chris)\n    * Fix SunCC _mcount problem\n    * Attempt to stamp version info on the libs generated. There are aps in use linked against other \n      driver managers that expect VERS_3.52\n    * Fix potential buffer overrun when using SAFEFILE\n    * Fix mutex problem in the exit from __SQLGetInfo (thanks Richard)\n    * Allow getting SQL_DM_VER via SQLGetInfo before connecting to a driver\n    * Generate unixodbc_conf.h using macros to allow cross compiling\n    * Fix some libltdl problems \n    * Fix some naming problems with the cursor lib\n    * Fix odbcinst problems on systems without pwd.h\n    * Change lib version to 2 to reflect SQLLEN changes in v2.3\n    * Fix threading problem (thanks Petr Vandrovec)\n    * Allow use of lib name in a DRIVER= connection string\n    * Change default threading protection to 0, most drivers should be thread\n      safe by now. If the driver is at all thread safe, allow SQLCancel to bipass the\n      interlock.\n    * Performance change to handle large numbers of connection and statement handles better.\n      Thanks for the change from the folks at Acision.\n    * Add -k option to isql to treat the DSN as a connection string and use SQLDriverConnect\n        isql -k \"DSN=server;UID=test;PWD=test\"\n    * Couple of the SQLSetConnactAttr values are now SQLULEN instead of SQLUINTEGER\n    * SQLSetConnectAttr was passing a char length instead of a byte length into the \n      Driver SQLSetConnectAttr when converting from Ansi->Unicode\n    * Driver version was not being held when a second connection was made to the driver\n\n20th-April-2010\n2.3.0\n\n\t* Try and rationalise the way the connection process find the driver\n\t  version and supported functions\n\t* Sort out problem in isql with blank lines\n\t* Stop libthread from being used under AIX\n\t* Move the GUI parts off into a new project\n\t\thttp://sourceforge.net/projects/unixodbc-gui-qt/\n\t* Strip out the GUI parts. I have also removed the spec files\n\t  as they will need redoing,\n\t* Move the Test parts off into a new project\n\t\thttp://sourceforge.net/projects/unixodbc-test/\n\t* Add interface into odbcinstQ to allow for a dialog if SQLDriverConnect\n\t  is called without a DSN= (as the MS spec)\n\t* Allow the setting of a default Threading level in the ODBC section\n          of odbcinst.ini\n        * Change double format string in Postgre7.1 driver\n\t* Add missing CR to output of odbcinst\n\t* add fixes to MiniSQL driver\n\t* Add missing .y in nn driver, now I need to get it to work\n    * Assoured bux fixes and format problems, thanks Tom\n\t* SQLBindCol on metadata calls was incorrectly going via the cursor lib if it \n\t  was enabled\n\t* fix isql problem with nested definitions.\n\t* Add configure option to enable building of driver config libs\n\t* Shift build to using config.h, the compile lines were so big it was hard to \n\t  see warnings\n\t* Fix bug in isql when using -b option.\n    * Check attribute values when setting connection and statement attrs\n    * Check for valid pointers in SQLGetInfo(W) and SQLGetFunctions\n    * Add extra checks for states in SQLCopyDesc\n    * Add --enable-stricterror option to allow compliance with the error reporting\n      definition, driver errors don't have the unixODBC prefix\n    * Check for statements in the NEED_DATA state when calling SQLEndTran\n    * Extra error check for SQLPutData\n    * Check handle type in SQLEndTran\n    * Prevent seg fault if there are no driver error functions\n    * the -n option to isql was not working correctly\n    * Stripped out all the bespoke LDTL configure stull, not just what libtoolize \n      provides\n    * Fix problem where ansi_to_unicode_alloc didn't leave space for the NULL\n      and could cause memory corruption\n    * Add the ODBC 3.80 additions that MS have produced. I am sure I remember \n      the standard being given to XOpen, what do I know :-)\n    * Change the file open mode for the ini file from w to w+ just in case the \n      original open failed but the file did exist\n    * Fix configure problem preventing the CHAR encoding from being passed\n    * Remove white spave from ini write, not all drivers use unixODBC ini functions \n      and can handle the spaces\n    * Update config.guess to current GNU version including support for AIX6\n    * Create SVN repository at sourceforge\n    * Add cast to fix problem in SQLSetConnectOption\n    * Fix SQLINTEGER<->SQLLEN conversion broblem in SQLNativeSQL\n    * Fix bug that stopped setting SQL_ATTR_CONCURRENCY to SQL_CONCUR_VALUES\n    * Change minor version number because of the SQLLEN change\n    * Remove unintended trailing white space from log generation\n\n\n19th-Nov-2008\n2.2.14\n\n\t* missing protype in 2.2.13 made the build fail on some platforms\n\n18th-Nov-2008\n2.2.13\n\n\t* There was a mutex around iconv that needed adding. Without this, \n \t  there was a potential thread problem\n\t* Fix problem with SQLGetDiagRec/Field returning double driver \n\t  errors\n\t* odbctest was using the wrong handle for SQLGetConnectOption\n\t* remove startup thread race condition\n\t* fix descriptor memory leak with UNICODE only drivers (thanks Ian)\n\t* Alter the default 64bit build mode, and change the flag to \n\t  BUILD_LEGACY_64_BIT_MODE\n\t* Fix a couple of 64bit problems\n\t* create unixodbc_conf.h on install to contain compile settings\n\t* Allow the GUI parts to build with qt4\n\t* try and deal with drivers that call internal W functions and \n\t  end up in the driver manager (informix for example). Enabled\n\t  by --enable-handlemap=yes when configuring\n\t* Fix leak of iconv handles\n\t* Allow the setup API to call through to the wide driver functions\n\t* Fix potential seg fault in SQLGetPrivateProfileString\n\t* Fix a couple of broken casts, and some MS 64bit changes\n\t* Add check for postgres driver getting into a spin wait\n\t* Fix logging that reported the setting of env attrs failing\n\t* Add isql option to wrap strings with quotes\n\t* Add isql option -3 to make isql use ODBC 3 calls instead of 2\n\t* Add timestamp to logging output\n\t* Pull any errors from driver whern SQLBrowseConnect returns SQL_NEED_DATA\n\t* isql now displays any warnings from SQLMoreResults\n\t* Add include path to odbc_config --cflags output\n\t* Fix some SQLLEN/SQLINTEGER conflicts in the cursor lib\n\t* isql now checks if the driver has SQLMoreResults before calling it\n\t* A couple of tweeks in the txt driver\n\t* Fix More than 1 log msg relevant in odbcinst now\n\t* Changed UI plugin technique for odbcinst see... \n\t  ODBCConfig > main.cpp, and \n\t  odbcinst > SQLManageDataSources.c and \n\t  odbcinstQ4 > SQLManageDataSources.cpp \n\t* Add more 64 bit changes, remove SQLROWCOUNT and its frends from 64 bit\n\t  land\n\t* Couple of descriptor typo's fixed (Thanks Jess)\n\t* Add odbcinstQ4 to support pure Qt4 SQLCreateDataSource and \n\t  SQLManageDataSources\n\t* Add ODBCCreateDataSourceQ4 as Qt4 based exec to SQLCreateDataSource\n\t* Add ODBCManageDataSourcesQ4 as Qt4 based exec to SQLManageDataSources\n\t* Add \"-c\" option to odbcinst to call SQLCreateDataSource\n\t* Add \"-m\" option to odbcinst to call SQLManageDataSources\n\t* Add ODBCDataManagerQ4 \n\t* Add Wrappers (C++, QtCore 4, QtGui 4 - thin wrappers to ODBC)\n\t* Add more complete set of driver config options to GUI config\n\t* Fix incorrect export file in odbcinstQ\n\t* Added some extra features to isql (thanks to Ron Norman for the\n          ideas)\n\t* Add diag support lib for driver development  and possibly DM\n\t  This is very 'black-boxed' on purpose.\n\t* Fix Replaced diag code in txt driver to use new diag lib.\n\t* Add New odbctrac library.\n\t* Add Threading can not be config via Qt(4) based GUI\n\t* Add New ODBCString library.\n\t* Add odbcinst.ini -> ODBC -> TraceLibrary and corresponding GUI Qt(4)\n\t  config.\n\t* prevent the cursor lib from seg faulting if the query isn't a select\n\t* Add SQLULEN size display to the output of odbcinst -j\n\t* Add mutexes in odbcinst/_logging.c\n\t* Remove the MySQL Driver, its woefully out of date now\n\t* Remove incorrect path in vms_odbc.opt\n\t* rename trace.h to odbctrace.h to avoid potential name conflicts \n\t  and move to include dir\n\t* update unixODBC.spec file\n\t* Add README.CYGWIN\n\t* Fix build problem with QT4 without QWizard support\n\t* Alter how the Ansi-Unicode mapping is done, so a unicode function can be \n\t  passed to the driver (if it supports it) even if a non unicode connect was done\n\t* Fix buffer overrun in SQLDriverConnectW and SQLColAttributesW\n\t* I have cut back on a lot of the GUI parts that are being added. The goal is to\n\t  create a distinct set of files that contains these and other parts that are\n\t  not part of the core goal of providing ODBC. Likewise the drivers will go on the \n\t  next release, as most DB's now have their own folk working on their drivers\n\t  and they all interoperate with unixODBC so its just adding confusion including them\n\t  here (IMHO that is)\n\t* Prevent a potential buffer overrun in the DM\n\t* The processing of --enable-rtldgroup had been dropped, back now\n\t* Allow the cursor lib to handle multiple result sets\n\n\n13th-Oct-2006\nRelease 2.2.12\n\t\n\t* Add missing SQLSetStmtOptionA and SQLSetStmtOptionW \n\t* The config string being passed into ConfigDsn was wrong, removed \n\t  semicolon, and added terminating double null\n\t* Add help help to isql\n\t* Couple of changes to make the build on OSX work better\n\t* Alter odbctest FullConnect to use SQLDriverConnect \n\t* Replace a missed flag for true 64 bit operation\n\t* Add ODBC3<->ODBC2 type mapping in SQLSetParam\n\t* Add missing SQLSetStmtOptionW.c\n\t* Tidy up the search for GUI lib code in SQLManageDatasource\n\t* Backport a couple of changes from the Debian build into the \n\t  cursor lib\n\t* Add extra config settings to the MaxDB/SapDB setup lib\n\t* Fix possible exit from SQLConnect without having closed\n\t  in the driver\n\t* Fix configure problem on Tru64\n\t* Fix a build issue on Sinix\n\t* Allow calling metadata functions via the cursor lib\n\t* Alter args to SQLParamOptions\n\t* Fix bug preventing attribute length from being returned from \n\t  SQLDrivers\n\t* Fix broken iusql\n\t* SQLTransact via the cursor lib has the args swapped\n\t* Remove leak in the postgres driver (error messages were not being\n\t  released), and yet a different leak in convert.c\n\t* Add code to allow the Cursor lib to call SQLGetDiagRec\n\t* Updated libtool, automake and autoconf, so expect problems\n\t  for the next few months...\n\t* Add new QT detection macros (Thanks Peter)\n\t* Removed some unneeded strlen's from the postgres drivers\n\t* Small change to the logging in SQLBrowseConnect\n\t* Add additional SQLGetInfo value SQL_ATTR_DRIVER_THREADING (1028) that\n\t  returns a SQL_USMALLINT containing the level of thread protection\n\t  afforded the driver by the driver manager\n\t* Fix small bug that prevents SQLDrivers from returning the first entry if\n\t  SQL_FETCH_FIRST is not used\n\t* Make DataManagerII check the DB's quote char when creating SQL\n\t* The cursor lib wasn't correctly returning the last rowset \n\t* Fix problem with the cursor lib, rowsets and SQLExtendedFetch\n\t* Fix couple of spelling mistakes in isql\n\t* Allow decoupling of SQLHANDLES between application and driver, there is \n\t  a 64bit DB2 where the driver handles are int's but unixODBC uses void *.\n\t  There is a define for DRV_SQLHANDLE in DriverManager/drivermanager.h that\n\t  allows this choice at build time\n\t* Add a few extra checks for only unicode API's from the driver\n\t* Check for existance of qt-mt lib before adding to link line\n\t* added missing cleanup in Postgres driver\n\t* Added a contrib directory with (so far) a new ODBCConfig and ODBCStats \n\t  apps, (Thanks Fizz for those).\n\t* Ask the driver when there are no errors left in the DM's store\n\t* Add a couple of unicode fixes suppled by Oracle\n\t* Small fix for call to SQLGetDiagField\n\t* Fix silly typo that was using sizeof( SQL_WCHAR ) instead of SQLWCHAR\n\t* Add check for C_TYPE in SQLBindCol, SQLBindParameter, SQLBindParam, \n\t  and SQLGetData\n\t* Fix overflow if the LOG_MESSAGE_LENGTH is increased\n\t* Save the last arg for SQLSetConnectAttr if called before connection for \n\t  later passing to driver\n\t* Fix missing mutex release in SQLFreeHandle (thanks Mark)\n\t* Add missing maps from unicode in SQLSetDescFieldW and SQLSetStmtAttrW\n\t* Handle resetting statement descriptors to implicit values, \n\t  by passing in NULL or the implicit descrptor  to SQLSetStmtAttr with \n\t  the attribute SQL_ATTR_APP_PARAM_DESC or SQL_ATTR_APP_ROW_DESC\n\t* Avoid calling SQLGetInfo for every SQLEndTran/SQLTransact\n\t* Remove inconsistency in the return value from SQLGetPrivateProfileString\n\t* Fix broken QT_VERSION detection\n\t* Add UNICODE wrapper functions in libodbcinst. The ini file is still ascii, so\n\t  its not got full support at the moment, but any apps that need the W functions\n\t  should build now\n\t* Add GUI support for SQLCreateDataSource\n\t* More informative error message if a invalid handle is passed to SQLAllocHandle\n\t* Add TIMESTAMP_NO_TMZONE to Postgres drivers types\n\t* The ANSI to UNICODE mapping in SQLTablePrivilges was broken\n\t* Fix incorrect buffer length in SQLGetInfo when calling unicode drivers\n\n4-March-2005\nRelease 2.2.11\n\t\n\t* Fix a couple of typo errors in postgres driver and odbctest\n    * Fix problem where ini files could be truncated under heavy\n      load\n    * Fix potential hang with FILEDSN's if the connect string included \n      a DSN= entry as well\n    * Don't save the SAVEFILE attribute in the filedsn.\n    * Fixed bug that prevented the setting of some attributes via the \n      DMConnAttr method\n    * Removed the -module entry from the cursor lib, it prevents it\n      building on HPUX.\n    * Add a couple of extra info types to the pull down in odbctest\n    * SQLGetInfoW was returning the wrong length when converting from \n      the ANSI call. The same was also going on the other way. Also\n      fixed same thing for other calls.\n    * Fix incorrect value in SQLFetchScroll in odbctest\n    * Fix memory leak in odbcinstQ\n    * Check for MOC being found, before building GUI parts\n    * Add list of export symbols to libodbcinst\n    * Fix a problem in the cursor lib returning blobs\n    * SQL_DIAG_NUMBER was being stored and returned as a SQLINTEGER \n      instead of a SQLRETURN\n    * Check if we can include sys/stats.h in iniOpen.c\n    * Fix potential buffer overun in SQLConfigDataSource()\n    * Fix problem in odbctest that prevented intervals from being displayed.\n    * Cope with SHLIBEXT not being set when finding the cursor lib\n    * Add a couple of missing Setup64 checks\n    * Small change in __info to conserve memory\n    * Add odbcinst.exp to distrib\n\t* Add missing ODBC2 installer stubs\n\t* Fix typo in SQLStatistics\n\t* Not passing user names and password into isql passes NULLS not empty \n\t  strings into SQLConnect\n\t* Add missing SQLPrepareA from the driver manager export file\n\t* Make the default for DontDLClose 1, it doesn't do any harm, and fixes\n\t  some segfaults\n\t* Fix printf format in the postgres driver on 64 platforms\n\n29-Sep-2004\nRelease 2.2.10\n\n    * Add additional check in sqltypes.h to detect AIX 64 bit\n    * Fixed minor copypaste error in configure.in\n    * Fixed problem in configure script that prevented it using the \n      qt-header and qt-lib config args. And allow the QT bin dir \n      to be set.\n    * Add new spec file (Thanks Stefan)\n    * Alter string initialisation in isql to reduce memory use on \n      some platforms\n    * Remove the parts of odbcinstext.h that only are needed in \n      unixODBC builds from outside app builds. (Cheers Stefan)\n    * Small fix to DataManagerII\n    * Protect iconv handle in threaded environments\n    * Extend cursor lib to cope with where clauses\n    * Remove incorrect duplicate function in iniOpen.c\n    * Strip FILEDSN from connection string before passing to driver\n    * If using a cursor lib use \"IS NULL\" instead of binding nulls\n    * Allow 32 and 64 installations to coexist using a Driver64 entry\n      in odbcinst.ini\n    * Fix uninitialsed value that was causing \"Driver does not support \n      the requested version\" warning\n    * Fix typo in sqltypes.h that failed when building Perl DBD::ODBC\n    * INI cacheing is not on by default, it can lead to a memory leak\n    * Alter the Makefile.am's so builds outside the config dir can be\n      done\n    * Fix possible buffer overrun in SQLConnect\n    * Replaced crypt auth in postgres with md5 for 7.1 Postgres driver\n    * Fix memory leak in descriptor thread support\n\n24-Jun-2004\nRelease 2.2.9\n\n    * Fix problem so that if SQLGetPrivateProfileString fails because \n      odbcinst.ini doesn't exist, it copys the default value into the\n      output.\n    * Avoid caling SQLFreeEnv the driver more than once.\n    * Rename lo_xxx func in Postgres driver(s) to avoid clash with\n      postgres lib.\n    * Add odbc-config to find compile time options for use with\n      other build tools\n    * Fix call to SQLParamData in cursor lib\n    * Add SQL_NULL_DESC to include files\n    * Remove -M for unixware builds from libtool\n    * Fix descriptor bug in SQLCopyDesc (Thanks Erik)\n    * Add extra iconv targets\n    * Fix bug that stopped RTLD_GROUP from being added to dlopen\n    * Remove mem leak if libodbc.so is loaded using dlopen instead of\n      linked as is normally done.\n    * Add check for LP64 in sqltypes.h\n    * Remove dlclose from ODBCConfig\n    * Fix typo in the readline detection in configure\n    * Fix potential hang with semaphore allocation in driver manager\n    * Alter how the state is set after a SQLParamData to S5 insted of S4\n    * Stop the driver manager from calling SQLFreeEnv twice in the driver\n    * Add new MySQL source from MyODBC 3.51.07\n    * Update the uo_fopen functions\n    * Add some extra mutex locks around end_tran code.\n    * Alter the flag to build real 64 bit mode to \n      BUILD_REAL_64_BIT_MODE\n    * Update a couple of prototypes for 64 bit builds\n    * Fix assorted 64 bit warnings and cast issues\n\n17-Feb-2004    \nRelease 2.2.8\n    \n    * Fix bug in SQLMoreResults that moves to incorrect state\n    * Fix problem where metadata calls fail if in STATE_S5\n    * Fix bug inserting ini entry with more than one '='\n    * Fix some stupid leaks in the connection pooling code\n    * Allow the driver manager to probe a pooled connection, to\n      see if its valid. Set the query to use in the odbcinst.ini entry\n      by setting CPProbe = SQL, for example this works well for postgres\n\n        [PostgreSQL]\n        Description\t\t    = Postgres SQL Driver\n        Driver\t\t        = /usr/local/lib/libodbcpsql.so.2.0.0\n        Setup\t\t        = /usr/local/lib/libodbcpsqlS.so\n        CPTimeout\t\t    = 1000\n        CPTimeToLive\t\t= 100\n        CPProbe             = select user\n        FileUsage\t\t    = 1\n        DisableGetFunctions\t= 0\n        DontDLCLose\t\t    = 1\n\n    * Fix the SQLGetPrivateProfile code when passing NULL sections or\n      names.\n    * Fix SQLGetData to avoid a problem returning unicode from ODBC2 \n      drivers.\n    * Make the header sqlext.h include the unicode header sqlucode.h. This\n      matches the MS header files.\n    * Added DriverConfig lib for Mimer. (From Mimer)\n    * Make connection pooling check using SQLGetConnectOption as well\n      as Attr\n    * Fix leak if iconv is used and a connection fails\n    * Add configure option to disable the use of readline in isql\n\n02-Dec-2003\nRelease 2.2.7\n    \n    * Add missing comma in Oracle setup lib\n    * Add -l option to isql to allow setting locale\n    * Fix problem in SQLDriverConnectW that prevented connecting to \n      UNICODE driver.\n    * Remove a couple of the attribute mappings from SQLColAttribute\n      when going from V2 app to V3 driver. \n    * Clear SQLError errors in the same was as SQLGetDiagRec (this\n      will help PHP out somewhat).\n    * Add a check to handle driver that don't support SQLGetEnvAttr\n    * Allow ATTR; in set attr lists from ini file\n    * Small change to warning dialogs in odbctest (Thanks Mark).\n    * Fix the cursor lib to work via SQLFetch as well as the other\n      fetches.\n    * Update the README.OSX file to cover building the cursor lib.\n    * Remove the SQLNumResults() call after a execute. This means the\n      DM doesn't know if there is a result set, but it seems to match\n      what the MS one is doing.\n    * Fix a major mistake in the thread protection, it worked fine until\n      the driver returned a error.\n    * Fix write beyond string bound in SQLDriverConnect.c (Thanks Ocke)\n    * Add call to setlocale( LC_ALL, \"\" ) in isql.c, can also be set using \n      -l option\n    * Add initial support for Microsoft Interix, details in README.INTERIX\n    * small change to ODBCConfig to have the password field in the driver \n      properties hide the password\n    * Make both # and ; comments in ini files\n    * Update README.OSX to cover changing driver libs into bundles\n    * Fix a couple of small display problems in odbctest\n    * minor updates to odbctest:\n        Have the gui list match the input order and the ini file\n        Restore the selection after Add/Remove\n    * Expand a text buffer to avoid overflow\n    * Add RTLD_MEMBER to dlopen args if available (AIX)\n    * Fix bug in SQLWritePrivateProfileString\n\n21-July-2003\nRelease 2.2.6\n    \n    * Add SQL...A() functions as well as W\n    * Add some 64 Bit changes\n    * Add support for SQL_BIGINT in Postgre7.1 driver\n    * Fix bug in libtool that fixes a call to access\n    * Allow setting of odbcinstQ lib load with either\n      environment variable ODBCINSTQ or in the [ODBC] section\n      of odbcinst.ini with a odbcinstq = /path/to/libodbcinstQ.so\n    * Alter the way SQLDataSources works (again :-)\n    * Add configure option to force the way dlopen works\n    * Fix bug in stats collection \n    * Add call to endpwent() to avoid a small leak\n    * Allow isql to handle SQLMoreResults\n    * Add option TracePid in [ODBC] section of odbcinst.ini, setting\n      this makes the DM treat the TracePath as a path to a directory, \n      and creates seperate log file for eack PID in use, mainly of\n      use when used under something like apache.\n    * Add extra unicode string for Solaris, see README.SOLARIS\n    * Sort error messages according to state (as per the spec)\n    * Remove trailing \\ from doc/Makefile.am\n    * Fix memory corruption in postgres driver that caused table \n      creation under OpenOffice to fail\n    * Tidy up gODBCconfig so it builds with current tools (or \n      so I hope).\n\n26-Feb-2003\nRelease 2.2.5\n\n    * On error from SQLMoreResult don't change to S1\n    * Fix build problem with QT 3.1.1\n    * Fix spelling of error message\n    * Fix bug where multiple connections give ODBC version error\n      (thanks Jay Cai)\n    * Increase the TEXT_FIELD_SIZE in the PG drivers\n    * Set output handle to NULL if SQLAllocHandle call fails\n    * Return any errors from the drivers SQLAllocConnect\n    * Update version of automake and autoconf used to produce\n      distributions\n    * rebuild libtools configure to work with new autoconf\n\n24-January-2003\nRelease 2.2.4\n    \n    * Make the DM look in libdir for the cursor lib\n    * Additions to DataManagerII\n    * More thread safe issues and fixes\n    * Fix uninitialised pointer in SQLDriverConnect.c\n    * Fix memory leak in SQLGetDiagRec\n    * Add missing SAG conformance SQLGetfo call in odbctest\n    * Fix bug in SQLDriverConnect where warnings were not getting into\n      the error stack\n    * Add quotes to table names in DataManager\n    * update the file \"missing\"\n    * Add missing SQL_DECIMAL in logging conversions\n    * VMS build changes... (Thanks Craig)\n        * get caught up with changes since the original VMS port\n        * follow the compiler warnings to fix myriad small nits throughout \n             the sources\n        * change the handling of shareable images so they no longer need to \n             be placed in SYS$SHARE\n        * improve the installation and set-up process\n    * Make the cursor lib build without needing libodbc, it breaks on HPUX\n    * Fix allocation problem in cursor lib\n    * Fix potential seg fault in cursor lib, when bind is done with null \n      indicator\n    * Update README.QNX to cope with QNX 6.2\n    * Fix problem with flags to dlopen\n    * Make the exit logging in the driver manager display unknown return \n      codes\n    * Fix bug in driver manager where a SQLAllocHandle in the driver can\n      cause a seg fault\n    * Add -s option to isql to allow the input buffer size to be set\n        i.e. isql -s32000 dsn\n    * Update some of the autoconf scripts to handle RH 8\n    * Add extra attrs to oracle setup lib\n    * Allow DMEnvAttrs to be set in odbcinst.ini as well\n    * Alter the way the config mode is stored, don't use putenv now, as \n      it causes trouble if the DM is unloaded. Also malloc the strings\n      if the environment is set via the DM, to avoid the same problem\n      with putenv. This caused a crash of OpenOffice on Solaris\n\n23-August-2002\n\nRelease 2.2.3\n    \n    * fix bug in unicode_to_ansi_copy\n    * DataManagerII was missed from the last release, sorry, I thought that it\n      had been moved to DataManager.\n    * DatamanagerII: Remove duplicate rows with drivers such as Postgres which \n      doesn't work as expected when getting lists of Schemas\n    * Attempt to set permissions for the file dsn directory.\n    * Fix bug with conversion of ODBC 2 values to SQL_C_WCHAR\n    * Make the postgres drivers return a SQL State of 01000 for a warning,\n      not 00000\n    * Add option to isql (-x)  to specify a separator in hex (0x09 is V tab) \n      or octal (012)\n    * Fix typo in pre 7.1 Postgres driver that broke bound timestamps\n    * Fix what looks like a bug in the libtool dlopen wrapper, its fails\n      to fail, when failing to load a lib.\n    * Only call the ODBC 3 version of SQLGetFuctions if we have requested ODBC3\n      some drivers (SAPDB) that return ODBC 3 API's only return this call if \n      the connect specified ODBC 3.\n    * Check the attributes being passed into SQLSetConnectAttr, only pas into\n      SQLSetConnectOption if they are ODBC 2 values. The same for SQLSetStmtAttr\n    * Allow double clicks on dsn's to bring up the configure in ODBCConfig\n    * Add extra thread checks for FreeBSD\n    * Add check for SQL_NO_DATA in isql\n    * Add code to make DM cope with SQL_NO_DATA from SQLExec(Direct)\n    * Change UNICODE conversions, remove all inplace converts.\n    * Add support for iconv for the UNICODE to ANSI conversions\n    * Add code to make DM code with SQL_NO_DATA from SQLExec(Direct)\n    * DBFIO: completed basic functionality (DBF file access library)\n    * dbfio: completed basic functionality (test program for DBFIO) \n    * Add checks for usage counts for loaded libs\n    * Replicate the way the MS DM only calls SQLAllocEnv on a driver once\n    * Add fix from John L Miller for SQLEndTran and SQLTransact\n    * Make it try and find a working iconv set of encodings\n    * Small fix to SQLMoreResults from John L Miller\n    * Alter error state return in SQLCloseCursor\n    * Allow state 07009 to be mapped to S1002 or S1093 depending on the\n      calling function\n    * Fix major ineffiency with text fields and the Postgres drivers\n    * Fix incorrect return state from SQLEndTran/SQLTransact\n    * Make rowcount return a count of -1 if its returns a error\n    * Further AIX linking tweeks\n\n08-July-2002\n\nRelease 2.2.2\n    \n    * added -m option to isql\n    * improved row count at end-of-result in isql\n    * allow SQLColAttribute(s)(W) to be called with a column number of 0 \n      to get the descriptor count\n    * Remove -export-symbols from sample, it was causing some \n      problems on Solaris\n    * Add DataManagerII, this is a updated version from Mark Vanderwiel\n    * Update libtool to escape from AIX build problem\n    * Add fix to avoid file handle limitations\n    * Add more UNICODE changes, it looks like it is native 16 representation\n      after all.  The old way (Fixed at BE) can be reproduced by defining UCS16BE\n    * Add iusql, its just the same as isql but uses the wide functions\n    * Couple of cast warnings cleaned up\n    * Add change to libtool to clean up AIX build\n    * Create README.AIX\n    * Fix small bug in SQLDriverConnectW, I was allocating 1 byte two little\n    * Fix typo in SQLConnect that wasn't allowing the driver manager to supply\n      SQLFreeConnect for drivers that didn't support this.\n    * Fix build on Caldera OpenUnix8 (not sure why anywone would want to\n      go anywhere near this OS IMHO...)\n    * Move DataManagerII to DataManager\n    * Alter what comes back in the second field from SQLDataSources to be the\n      description from the ODBCINST.INI entry, this matches what happens\n      in with the windows DM.\n\n23-Mar-2002\n\nRelease 2.2.1\n    \n    * odbcinst: now tries to auto create system odbc.ini\n    * odbcinst: implemented -n, -l, -h for -q -s   \n    * Add option to disable definition of windows types in sqltype.h\n    * Fix small bug in ini uper case routines.\n    * Added STMT and OPTION to MySQL driver setup\n    * Added -j arg for odbcinst (shows INI file names)\n    * Fixed seg fault bug in Text File driver\n    * Fix small bug in SQLBrowseConnect\n    * Fix check for Darwin (OSX)\n    * Fix bug in sqltypes that stopped 64 bit builds\n    * Fix build problem on 32 bit platforms without long long\n    * Add option to set environment (unix) values via SQLSetEnv, \n      this can also be done in the odbc.ini, for example\n      [sample]\n      Description     = Test to DB2\n      Driver          = DB2\n      DMEnvAttr       = SQL_ATTR_UNIXODBC_ENVATTR={DB2INSTANCE=db2inst1}\n    * Fix some cases where the trace file env value was \"Trace File\"\n    * Make the readline check make sure there are headers as well as libs\n    * Add check to use RTLD_GROUP in libltdl if present\n    * change DWORD definition to unsigned long where applicable\n    * Fix bug in error reporting that cound crash with multiple errors and ODBC3\n    * Remove C++ comment from exe/odbcinst.c\n    * If we are not building the drivers, dont build sqp\n    * Alter default size of odbctest window\n    * Improve check for stats headers\n    * Add install-data-am section back to Makefile.am to create the \n      empty ini files\n    * Extend naming of cursor lib to work on non linux platforms \n      (it expected a .so)\n    * Make Postgres driver(s) handle {oj ... } syntax\n    * Fix some endian issues with 4 byte unicode support\n    * Update the MySQL driver code\n\n30-Jan-2002\n\nRelease 2.2.0\n    \n    * Allow SQL_ATTR_LOGIN_TIMEOUT  to be set on a connected \n      connection doesn't make that much sense, but it mirrors \n      what the Windows DM does.\n    * Change DWORD in sqltypes to be a unsigned int to work on \n      64 bit platforms\n    * Fix incorrect diag message in SQLSetStmtOption.c\n    * Hack to the 7.1 postgres driver to enable SQLPrepare\n      to be called BEFORE SQLBindParameter\n    * Reset the stmt->prepared flag when going into a SQLParamData\n      state after SQLExecDirect\n    * Fix silly bug that stops odbctest adding the fidt entry on \n      the list\n    * Add missing tracing to SQLBrowseConnect\n    * Fix some potential corruption in SQLGetDiagField\n    * Add some simple cacheing to SQLGetPrivateProfileString\n    * check for redefinition of SQL_OL_CAP to stop AIX build breaking\n    * Add missing getGlobalDefaults in PG 7.1 driver (Thanks Rick)\n    * Fix bug in SQLConnectW (Thanks Artiom)\n    * More mods to SQLConnectW and SQLDriverConnectW\n    * More MS generated 64bit changes\n    * Add MyODBC 3.5 driver. Its a separate configure in Drivers/MySQL\n\nRelease 2.1.1\n\n2001-12-21\n\n    * started to add mac package/install dirs for PackageMaker\n    * added qmake project files as an optional build process\n    * ODBCConfig can build with a static odbcinstQ\n    * Remove auto text driver setup, this breaks new installs as\n      it can't find odbcinst\n    * Fix mixup in SQLSetScrollOptions\n    * Small portability fix for BSDI\n    * Make UNIX Domain socket settable in postgres driver vua UDP=\n      in odbc.ini dsn entry\n    * Fix bug where some SQLGetConnectAttr values were not coming\n      from the driver, but the driver manager\n    * Alter odbctest to make directory select in Manage Auto Test\n      work better\n    * Fix browser in DataManager so that it works with drivers\n      that don't return values from SQLRowCount\n    * Fix some error retrieval problems\n    * Alter the include files to match MS ODBC 3.52 with 64bit\n      support, fix assorted warnings when building on 64bit \n      platforms\n    * Add option to force tracing on, this is for use with apps like\n      StarOffice that disable tracing\n    * Add support for MAX_ROWS in postgres drivers\n    * Add fix to cover Darwin 1.5 (OSX)\n    * Add DisableGetFunctions option to driver section of odbcinst.ini\n      to cope with drivers that can't handle the call (Solid 2.2 AFAIK)\n    * Fix 64 bit bug in Postgres driver\n    * Add some ODBC 3 bits to the Postgres driver to make it run with \n      Star Office 6.0 (beta)\n\nRelease 2.1.0\n\n2001-11-27\n\n    * cvs moved to Source Forge\n    * attempts have been made to cleanup GNU auto-stuff to make the\n      cvs code more accessable\n      - added README.cvs\n      - hopefully \"make -f Makefile.cvs\" works on more platforms\n    * implemented more in SQLManageDataSources()\n      - created odbcinstQ (plugin for Qt GUI support in odbcinst)\n      - moved most code from ODBCConfig to odbcinstQ\n    * stupid mistake on my part(Nick), left a #ifdef in isql.c that prevented\n      displaying a list of tables\n    * Make calls to localtime in Postgres Driver only when required\n    * Made some changes to Postgres prototypes\n    * Add option to get odbcinst info from stdin\n    * Make SQLError errors clean down after each API call for ODBC 3\n      apps\n    * Add mapping from SQLColAttribute attributes to ODBC2 attributes\n    * Fix reported leak in ltdl.c\n    * Make the path for file DSN's come from the odbcinst.ini file\n    * If using a ODBC 3 driver call the one off version of SQLGetFunctions\n    * Now builds better on Darwin\n    * Reinstate conversion from wide to ansi types in SQLGetData if the\n      driver is ODBC2, also adjust the buffer length to prevent buffer\n      overrun.\n    * Stop ODBCConfig setting Trace File in odbcinst.ini it should be\n      TraceFile\n    \nRelease 2.0.10\n\n2001-10-14\n\n    * odbctxt : escape special chars when read/write lines into a table\n    * Fix bug where a Execute that errors should return to state S2\n    * Update README.OSX to cover a txt driver problem\n    * Add Drivers/txt/doc to distribution\n    * Add missing text driver setup from spec file\n    * add missing VMS opt files\n    * Add missing include <qmultilineedit.h> from DataManager\n      (Samuel Cote)\n    * Remove LT_GLOBAL from the libtool code. This breaks perl amongst \n      others.\n    * Allow the display of unicode data in logs\n    * Fix stupid WCHAR bug in SQLGetData\n    * Move ifdef in __stats.c to allow the building of ODBCConfig under\n      Mac OSX\n    * Add missing args to prototype in sqlext.h (Thanks Christian)\n    * Pass on unknown connection attributes to driver after connect\n    * Make SQLGetPrivateProfileString return the actual len read, not + 2\n    * Make the OSX build cleaner, it just needs the dlcompat lib now\n    * Allow ODBCConfig to handle attributes not described in setup libs\n    * Stop the ODBC Version being set when there are open connections\n    * Alter odbcinst error messages to match windows\n    * Fix incorrect installer errors (they were offset by one...)\n    * Create ./odbc.ini if it doesn't exist\n    * Fix typo that stoped odbctest from building on Suns latest\n      compiler\n    * Slightly alter the unicode definitions in sqltypes.h\n    * Add support for FILEDSN in driver manager, odbcinst, and ODBCConfig\n    * Fix buffer overrun in Postgres drivers\n\nRelease 2.0.9\n\n2001-08-14\n\n    * odbctxt: tweeked - now works on PowerPC\n    * Add auto register for text driver to Makefile.am\n    * Add check for flex, sqp won't build with lex now\n    * odbctxtS: now supports CaseSensitive property\n    * Add build time option to select wchar_t UNICODE (4 bytes)\n      as opposed to signed short UNICODE (2 byte)\n    * Add build time option to select the length of logged \n      strings (LOG_MESSAGE_LEN in drivermanager.h)\n    * Fix libtool bug that caused the AIX build to not produce\n      shared libs\n    * Fix couple of typos that caused the build to fail on Solaris\n    * Add conditional for 64 bit application compilation when the \n      sizeof(long) will not have been done by configure\n    * Fix small bug in postgres driver on debian\n    * Add build instruction for QNX\n    * add Slovak translation of gODBCConfig\n    * Fixes to SQLBrowseConnect in driver manager\n    * Get the DM to check with the driver for the CLI Year\n    * Fix small bug in strncasecmp in extras\n    * Add extra support for SQLSetConnectAttr before connection\n    * rename global structure in Postgres drivers to avoid a colision\n    * Add support for presetting Env,Conn and Stmt attributes via the\n      ini file using the following syntax in the dsn section of odbc.ini\n        DMConnAttr = SQL_ATTR_CONNECTION_TIMEOUT=30\n        DMStmtAttr = SQL_ATTR_NOSCAN=SQL_NOSCAN_OFF;*SQL_ROWSET_SIZE=20\n      the * indicates thats its a override attribute, so any attempt to\n      call SQLSetStmtAttr to set the rowsize, will always set it to 20\n      in this example.\n\n      NOTE: That at the moment, this information will be lost if ODBCConfig\n      is used\n\n\nRelease 2.0.8 \n\n2001-06-25\n\n    * Add definition of alphasort and checks for location of dir.h in the txt\n      driver.\n    * Add some missing functions from cur lib\n    * Fix a problem in configure.in that was loosing LIB settings\n    * Remove C++ comment from sqlext.h\n    * sqp: now makes use of check for NOT NULL in CREATE TABLE\n    * sqp: fixed missing pointer assignment (affected CREATE TABLE)\n    * sqp: added more debugging messages (but turned off by default)\n    * odbctxt: removed long log message (would cause seg fault)\n    * odbctxt: now appends a space to each SQL statement; this is to\n      work around a problem in the sqp lexer when last char is close\n      quote\n    * Fixed a bug in the driver manager that would fail if the driver\n      returned a max size error message\n    * sqp: now makes use of IS NULL and IS NOT NULL\n    * sqp: now makes use of INSERT INTO table(col1,...)\n    * sqp: now makes use of LIKE and NOT LIKE (with optional ESCAPE)\n    * sqp: now makes use of any mix of AND, OR, () in WHERE clause\n    * sqp: now makes use of ? for column value (used in SQLBindParameter)\n    * sqp: now makes use of integers for column values (just mapped to string)\n    * odbctxt: basic implementation of SQLBindParameter (only SQL_C_CHAR input allowed)\n    * odbctxt: new syntaxes of sqp parser taken into account\n    * odbctxt: new option CaseSensitive (Yes or No) allowed in .odbc.ini file\n    * odbctxt: fix message length returned in SQLGetDiagRec function\n    * odbctxt: drop statement when freeing it via SQLFreeHandle\n    * sqp: default string length changed to 255\n    * Fix threading problem when multiple ENV's are in use\n\nRelease 2.0.7 Peter Harvey <pharvey@codebydesign.com> And\n                Nick Gorham <nick@lurcher.org>\n\n2001-06-06\n\n    * ODBCConfig/DataManager: Updates for Qt 3.0\n    * Add extra decoding of types in the log output\n    * Fix some type problems for 64 bit platforms\n    * Fix rogue logging in SQLGetInfo\n    * Add correlation and alias to sqp\n    * Add some fixes to the txt driver to enable it to work \n      with StarOffice\n    * Stop Ctrl-D from Segfaulting isql\n    * Add a example autotest to the build\n    * Make isql detect the EOF when not using readline\n    * Tidy up the libs from autoconf\n    * DataManager: refinements such as; logout a DSN, isql history\n    * sqp: CREATE TABLE now supports most data types and some column options\n    * sqp: added DROP TABLE\n    * sqp: added ORDER BY\n    * sqp: enhanced api with sqpOpen, sqpClose...\n    * odbctxt: checked in rewrite (much less code now)\n    * odbctxtS: added setup lib for odbctxt\n    * ODBCConfig: Stats now shows PIDs\n    * Add missing -lpthread in configure (thanks Jon K\u013are Hellan)\n    * Remove C++ comments from autotest.h\n    * Fix big in Postgres7.1 with binding a column to a double\n      (thanks J\u00fcrgen)\n    * Update libtool to 1.4\n    * Fix problem that looked like a restriction on the size of ini \n      files, but was actually a problem when the same section appeared\n      twice in a file\n    * Add VMS port (Thanks Jason)\n    * Add extra PG7.1 numeric fix (Thanks Zoltan)\n    * Add fix to PG7.1 to allow the retrieval of more than 8K\n      blobs, adjust the define TEXT_FIELD_SIZE in psqlodbc.h\n      (Thanks Bojnourdi)\n    * Fix small typo in SQLConnect (Thanks Martin)\n    * The postgres drivers didn't recognise \"Yes\" in the ini files,\n      only 1 or 0, fixed now\n    * Avoid \"broken pipe\" message with postgres (Thanks Gary)\n    * Alter check if cursor lib needed with ODBC 3 apps\n    * Fix couple of bugs with cursor lib\n    * Get to build on Mac OS X (without GUI bits ATM) \n      look at README.OSX for help and hints\n    * Fix for use with QT 3\n    * Remove default trace option from ODBCINSTConstructProperties\n    * Stop ODBCConfig from accepting null DSN names\n\nRelease 2.0.6 Nick Gorham <nick@lurcher.org>\n\n2001-04-18\n    \n    * Add define for _THREAD_SAFE to help AIX builds\n    * Fix bug in cursor lib introduced by UNICODE addon's\n    * Make the header definitions work on 64 bit platforms\n    * Fix a incorrect return from SQLConnect with pooling\n    * Add support for unicode drivers that have ANSI functions \n      renamed to the unicode versions (duh!).\n    * If pooling, then set the flag to not close the driver\n      handle (DontDLClose)\n    * Add CPTimeToLive option to restrict the number of times\n      a driver will be reused (useful with leaky drivers)\n    * Alter logging, and support setting logging via \n      SQLSetConnectAttr call\n    * Add a AutoTest facility to odbctest\n    * Fix incorrect error test in SQLBrowseConnect\n    * Check descriptor is for a open connection\n    * More unicode fixes\n\nRelease 2.0.5\n\n2001-03-21 Nick Gorham <nick@lurcher.org>\n\n    * Add extra autoconf checks for -pthread and -mt compiler\n      options\n    * Add Postgres7.1 tree for code from new postgres development\n    * Fix retrieval of errors for SQLTables and SQLColumns call \n      in isql\n    * Fix mem leak in DM if SQLDisconnect was called with open \n      statements or descriptors\n    * Fix broken check if readline needs -lcurses\n    * Add setup lib for SAPDB (thanks Holger Schurig)\n    * Added locale fixes to PG7.1 driver (thanks Zoltan)\n    * Fix configure problem on Solaris\n\nRelease 2.0.4\n\n2001-02-02 Nick Gorham <nick@lurcher.org>\n\n    * Changes to Postgres driver for operation with PG 7\n      and locale changes (Zoltan Boszormenyi)\n    * Fix problem with SQLSetConnectAttr and unicode \n      operation\n    * Apply patch to DataManager from Christian.Werner which \n      fixes truncated query result rows, formatting errors in \n      HTML output, and adds a leading blank to each where \n      expression in order to prevent SQL syntax errors in \n      e.g. LIKE '..' or MATCHES '..'cases.\n    * Add support for SQLDriverLoad and SQLDriverUnload functions\n\nRelease 2.0.3\n\n2001-01-13 Peter Harvey <pharvey@codebydesign.com> and\n    Nick Gorham <nick@lurcher.org>\n\n    * sqp: added a yywrap() to eliminate link dependency\n    * sqi: home dir default if no path with database file name\n    * sqi: creates database file if not exists\n    * ini: open fails if existing file appears not be an ini  \n    * Fixed problem where null row status array could be \n      passed into SQLExtendedFetch\n    * Fixed further bug in unicode_to_ansi \n      (thanks Martin Edlman)\n    * Fixed bug in UNICODE converison in SQLGetInfo\n    * Added sqi/test to build tree, its moved to exe\n    * Add extra checks for readline to see if -lcurses is needed\n    * Add check for -lpthreads that should be ok on Tru64\n    * Replace printf with puts in isql to cope with columns\n      containing '%'\n\nRelease 2.0.2\n\n2001-01-08 Peter Harvey <pharvey@codebydesign.com>\n\n    * ODBCConfig: Repurposed 'Tracing' tab. Now is 'Advanced'\n      and contains both Tracing and Pooling options.\n    * Fixed bug in __info that caused SQLGetDiagRec to fail\n\nRelease 2.0.1\n\n2001-01-06 Nick Gorham <nick@lurcher.org> \n\n    * Fix bug introduced with UNICODE that corrupted the SQLSTATE\n      from SQLError\n\nRelease 2.0.0\n\n2001-01-04 Nick Gorham <nick@lurcher.org> \n\n    * Added table browse for DataManager\n    * Fix problem in template driver with Solaris compiler\n    * Add msql-include option to specify search path\n    * Fix compile problem in MiniSQL code with Solaris compiler\n    * Fix conditional include of strings.h in ODBCConfig build\n    * Fix tracing in SQLConnect\n    * Alter check for DSN length in SQLConnect\n    * Validate input handle before setting output handle\n    * Fix error code from SQLSpecialColumns and null table names\n    * Fix potential deadlock in SQLFreeHandle\n    * Add change to make the Postgres driver look for the\n      local socket in two places to cope with debian distrib\n    * Fiddle with the MiniSQL searching again\n    * Add sqlucode.h to headers\n    * Fix threaded race condition in __handles.c\n    * Revamped Credits page in ODBCConfig.\n    * Show more useful info in DataManager tree-view\n    * Fixed problem with DataManager 'hanging' upon exit\n    * Added -pthread option to gcc calls when needed\n    * Now needs QT 2.2.x, changed configure to check\n    * Add missing identifier_type in SQLSpecialColumns log\n    * Add some checks for long columns in isql and DataManager\n    * Add connection pooling support to driver manager\n    * ODBCConfig; Code cleanup. Removed extra class layer \n      created by QtArch\n    * ODBCConfig.Drivers.Config; driver specific options\n      now accepted, if already exist in odbcinst.ini, as simple\n      text fields in GUI\n    * ODBCConfig and DataManager now attempt to save and restore\n      state... such as window geometry.\n    * ODBCConfig now supports connection pooling options.\n    * ODBCConfig now has a Stats tab which is similar to CPU \n      or mem monitor. This will be improved upon and the code\n      will likley make its way into a dock widget\n    * Add UNICODE support\n    * Disable the default building of static libs\n    * Add support for GNU portable threads\n\nRelease 1.8.13\n\n2000-11-14  Nick Gorham <nick@lurcher.org>\n\n    * Add missing line continuation char in SQLGetDiagField.c\n    * Add fix to SQLGetDiagField to return the server name on \n      statements and descriptors\n    * Remove -lcrypt from all but the Postgres driver build\n    * Remove CR/LF expansion in Postgres driver\n    * odbctest was calling SQLPrimaryKeys when it should have been\n      calling SQLTablePrivileges\n    * Add SQL_DRIVER_HDESC support to SQLGetInfo\n    * Add display of returned error text in log file\n    * Take notice of DontDLClose when calling ConfigDataSource.\n    * Fix duplicated log messages on failed connect\n    * Fix incorrect arg to SQLError, change from SQLINTEGER to\n      SQLSMALLINT (Thanks Ralf)\n    * Updated libtool to 1.3.5\n    * Fixed crash in SQLConnect when NULL server and SQL_NTS \n      passed in (Thanks Venu for the next four changes)\n    * The error code mapping was wrong, it should only map \n      ODBC 3 errors to ODBC 2, not the other way around\n    * Fixed a incorrect error return in SQLPrepare when a NULL\n      string was passed \n    * Zero the handles when released, just to avoid reuse of\n      values\n    * Added readline support to isql, (thanks Tomas Zellerin)\n    * Support the setting of SQL_AUTOCOMMIT before connecting\n    * Fixed bug in odbctest's SQLColAttributes call\n    * Add test in configure for localtime_r and use if present\n\n2000-08-18  Nick Gorham <nick@lurcher.org>\n\nRelease 1.8.12\n\n    * Fix typo in Postgres driver.\n    * Add i18n support to the Postgres driver (thanks Zoltan)\n    * Remove fix for Postgres driver and large objects, it\n      breaks the SQLColumns call :-(\n\nRelease 1.8.11\n\n2000-08-16  Nick Gorham <nick@lurcher.org>\n\n    * Add --enable-fastvalidate option. This reduces the safety of the \n      handle checking but improves performance when using many handles\n    * If SQLDriverConnect is called with a NULL con_str_in look for\n      the DEFAULT DSN entry\n    * Remove a underscore from odbcinst_system_file_path, it seem's to\n      cause the linker on AIX to have problems\n    * Remove some additional C++ comments from the postgres driver\n    * Call SQLSetConfigMode before calling SQLConfigDataSource\n    * Fix error handling in case of referential integrity violations\n      in Postgres driver\n    * Fix problem with SQLColAttributes swapping its args, and don't\n      check the driver version before mapping to ODBC 3 values.\n      (thanks Tomas)\n    * Make SQLDescribeParam work in state S4 and above, when in ODBC 2\n      mode\n    * Avoid potential buffer overrun in __info.c when reporting errors\n      from SQLConnect/SQLDriverConnect\n    * Fix potential mem corruption in SQLGetDiagField (thanks Jay)\n    * Add fix to allow the Postgres driver to receive large objects\n      (thanks Bill)\n    * Fix buffer overrun in SQLGetDiagField (thanks again Jay)\n    * Fix for SQLGetDiagField(SQL_DIAG_SUBCLASS_ORIGIN) returning a null \n      string, it now returns something meaningful\n    * The Postgres driver didn't shupdown the connection to the database\n      before dropping the socket\n    * Fix incorrect return from SQLDataSources\n    * Make SQLDriverConnect return all errors from the driver not just \n      the first one\n    * Add Oracle setup lib for http://www.easysoft.org/projects/oracle\n    * Stop isql calling SQLFetch if the query doesn't generate a result\n      set. This stops the function sequence error\n    * Add missing break in postgres password authentication\n    * Add fix in SQLTables for broken version of EXCEL\n    * Fix a bug that caused SQLTransact to fail if called with a \n      connection handle in state C4. This caused Corel Paradox to fall \n      over\n\nRelease 1.8.10\n\n2000-06-15  Nick Gorham <nick@lurcher.org>\n\n    * Add some fixes to make it work and compile on IRIX (Murad)\n    * Add a couple of missing casts in odbctest (Michael)\n    * Fix BOOL bug in postgres driver (Dmitriy)\n    * use setenv rather that putenv if available\n    * Fix a couple of bugs in odbctest/attr.cpp\n    * Fix problem where info warnings could be lost\n    * Fix a couple of problems in the Postgres driver\n    * Fix bug that caused a success with info message from SQLExecute \n      or SQLExecDirect to be lost if used with a ODBC 3 driver and \n      the application called SQLGetDiagRec\n    * Fix problem where bookmarks were failing for StarOffice 5.2\n    * Stop SQLDriverConnect dumping core when passed a null dsn string\n    * Map ODBC 2 SQLSTATE values to ODBC 3\n    * Add missing odbcconfig.h to the install include in gODBCConfig\n    * Fix incorrect state from Postgres Driver\n    * Fix integer length problem with SQLExtendedFetch that manifested\n      on big endian platforms (Sparc,Aix,HPUX etc) (Alex)\n    * Avoid clash with definition of CHAR in GNOME XML layer\n    * odbctest SQLExtendedFetch was using the wrong orentation value\n    * Add define for SQLTCHAR\n    * Fix problem in setting tracing on, and a core dump when loading\n      the cursor lib failed (Steve)\n\nRelease 1.8.9\n\n2000-06-13  Nick Gorham <nick@lurcher.org>\n\n    * Fix a State problem when coming out of a SQLParamData cycle\n    * Fix bug where SQLBrowseConnect may leave a connection in C1\n      not C2\n    * Pass LOGIN_TIMEOUT onto driver if it is set before the connect\n    * Reverse the test to set DIAG_CLASS_ORIGIN\n    * Return SQL_DIAG_SERVER_NAME and SQL_DIAG_RETURNCODE\n    * Allow explicit allocation of Descriptors\n    * Fix a problem with the SQLFetchScroll -> SQLExtendedFetch\n      mapping\n    * Fix a problem in the MiniSQL Makefile.am\n    * Call SQLSetConfigMode before calling ConfigDSN\n    * Fix problem in SQLCopyDesc and complete case when DM does the\n      work\n    * Return SQL_SUCCESS_WITH_INFO messages from SQLConnect\n    * Added MetaDataBlockFetch connection attribute to esoob driver\n    * Fix bug in __info.c that caused a small memory corruption\n      when logging was on\n    * Enable the reporting of errors on descriptors\n    * Fix extra ] in the msql part of configure.in\n    * Add error reporting to DataManager (Tim)\n    * Assorted fixes to text driver (Peter)\n    * odbctest now ready to use (hopefully)\n\n2000-05-03  Nick Gorham <nick@lurcher.org>\n\n    * Fix bug in configure.in where disabling build of drivers \n      also disabled build of GUI bits.\n    * SQLDataSources should return the Driver Description,\n      not the data source description\n    * Add partly written odbctest GUI to project\n    * Remove conditional around VOID typedef in sqltypes.h by default\n\nRelease 1.8.8\n\n2000-04-27  Nick Gorham <nick@lurcher.org>\n\n    * Add extra include for unixware\n    * Added some fixes to the template driver found by\n      Nikolai Afanasiev, and also fix the logging code\n      to recongnise 'On'\n    * Alter distrib to not include moc generated files\n    * Using the env var ODBCHOME was a \"real bad idea\" for perl\n      I have changed it to ODBCSYSINI\n    * Alter logging so that if the log file fails to open stderr\n      is not used. This caused problems in server processes.\n    * Fix a problem with SQLDrivers\n    * Fix a potential leak, that stopped SQLDisconnect being\n      called\n    * Fix problems with text driver\n    * Improve isql (thanks Ralf)\n    * Make gODBCConfig a proper gtk widget\n    * Remove stray printf in the DM code\n    * Fix a couple of daft bugs, thanks to Tim Roepken\n    * Fix a problem where handles were not being free'd\n    * Fix a problem that stopped StarOffice 5.2 working with a\n      ODBC 2 driver, it failed to set SQLGetDiagRec in the output\n      of SQLGetFunctions\n\n2000-03-11  Nick Gorham <nick@lurcher.org>\n\n    * Adjust configure to check for limits, and use this\n      to find max file path. It was only 14 char before under\n      HP-UX\n    * Make ODBCCOnfig try calling SQLConfigureDSN, for setup \n      libs that can do it themself\n    * Make the mutex functions static\n    * Remove some unwanted X functions from the lib line\n    * Remove dlfcn.h in ODBCConfig\n    * Rationalise environment vars, ODBCHOME points to\n      where odbc.ini and odbcinst.ini are. ODBCINI points to \n      the user ini file (normally ~/.odbc.ini)\n    * Fix bug causing all connection errors to be lost after\n      connecting\n    * Add GTK+ Based gODBCConfig\n    \n2000-03-01  Nick Gorham <nick@lurcher.org>\n\n    * Add extra defines to sqltypes.h\n    * Fix bug in the Postgres driver with the use if the\n      SQL_DATA_AT_EXEC value\n    * Replace the ODBCINI with ODBCHOME environment var\n\n2000-02-23  Nick Gorham <nick@lurcher.org>\n\n    * Remove the GLOBAL flag from the dlopen in the libtool\n      lib. This caused problems with perl DBD::ODBC\n    * Fix the support for threads and Solaris\n    * Add odbcinst.ini flag to disable unloading the driver,\n      this enables the IBM DB2 lib to be used\n\nRelease 1.8.6\n\n2000-02-21  Nick Gorham <nick@lurcher.org>\n\n    * Fix memory leak in the Postgres driver\n    * Fix a bug in the DM when using threads and ODBC 3 drivers,\n      SQLGetDiagField fails\n    * Fix a situation where PHP can crash the DM by calling \n      SQLFreeStmt after SQLDisconnect\n    * Add support for Solaris Threada\n    * Make building with thread support the default\n\n2000-02-12  Nick Gorham <nick@lurcher.org>\n\n    * Add option to use ODBCINI to move the odbcinst and odbc ini \n      file. This was asked for by applix\n    * Add setup lib for Easysoft ODBC-ODBC bridge\n     \n2000-02-02  Nick Gorham <nick@lurcher.org>\n\n    * Add flag in odbcinst.ini to disable the SQLFetch -> \n      SQLExtendedFetch mapping for broken drivers\n    * Alter the ini file parsing so the right hand side can\n      contain extra ='s\n    * Fix a bug in SQLGetStmtAttr with a missing '&'\n    * Added a couple of patches from Manush to improve working\n      with the solid driver\n\nRelease 1.8.4\n\n2000-01-18  Nick Gorham <nick@lurcher.org>\n\n    * Fix bug in SQLAllocHandle where a failed stmt alloc would\n      report a error on the statement not the connection and\n      dump core\n    * Make the default path when adding a driver in ODBCConfig\n      $prefix\\lib\n    * Add the missing [unixODBC] prefix to error messages\n    * Fix a problem in template/SQLDriverConnect found by\n      Charles Overbeck\n    * Update to libtool 1.3.4\n    * Fix problem in ODBCConfig where a cast to const char * \n      was needed\n\nRelease 1.8.3\n\n1999-12-28  Nick Gorham <nick@lurcher.org>\n\n    * Fix a bug where a SQLDisconnect was not releasing the \n      lib handle\n\n1999-12-11  Nick Gorham <nick@lurcher.org>\n\n    * Merge in changes from the Postgres ODBC people to fix a\n      problem with LONGBIN's\n    * Mask out the password fields in log for SQLConnect and \n      SQLDriverConnect\n    * Change a incorrent HY004 error return to IM004 in SQLConnect\n\nRelease 1.8.2 For AlphaLinux Distribution\n\n1999-12-02  Nick Gorham <nick@lurcher.org>\n\n    * Fix some daft mistakes in odbcinst.c, and the template driver\n    * Remove the C++ comments from the Postgres driver so it can\n      be compiled with a C compiler\n    * Add LIBSOCKET to the Postgres driver link line\n    * Add strncasecmp to extras\n    * Make the Postgres driver use the socket lib if needed\n\n1999-11-23  Nick Gorham <nick@lurcher.org>\n\n    * Add support for encrypted passwords in the Postgre driber\n    * Remove some remaining non-libtool dlopen code\n    * Fix some threading problems\n\n1999-11-19  Nick Gorham <nick@lurcher.org>\n\nRelease 1.8.1 **********\n\n    * Make the code more portable\n    * Remove CR from Postgres source\n\n1999-11-17  Nick Gorham <nick@lurcher.org>\n\n    * Fix a bug with the ODBC 3 error functions.\n    * Fix a missing function_entry from SQLExecDirect().\n\nRelease 1.8 *************\n\n1999-11-13  Nick Gorham <nick@lurcher.org>\n\n    * Fix bug with logging that killed StarOffice\n    * Upgrade the Postgres driver to 6.4.6, this fixes\n      a problem with fields containing cr/lf combinations.\n    * Change the logging so that the logging info comes\n      from a special [ODBC] section in odbcinst.ini. This \n      means that what goes on before the connect can be logged\n      \n1999-11-10  Nick Gorham <nick@lurcher.org>\n\n    * Make SQLError,SQLGetDiagField and SQLGetDiagRec usable\n      with all versions of application and driver.\n    * Add configure flag to specify where to look for the\n      MiniSQL lib.\n    * Add configure flag to disable the building of the drivers.\n\n1999-11-02  Nick Gorham <nick@lurcher.org>\n\n    * Fix bug in the cursor lib introduced by the fix for the glibc\n      bugs.\n    * Fix bug where SQLSetConnectAttr/Option can return without\n      clearing a connection thread lock.\n\n1999-10-29  Nick Gorham <nick@lurcher.org>\n\n    * Make the postgres driver able to connect via UNIX domain\n      sockets\n\n1999-10-29  Holger Bischoff <holger.bischoff@sap.com>\n\n    * Assorted stupid bugs fixed in the DM\n\n1999-10-26  Nick Gorham <nick@lurcher.org>\n\n    * Started rewrite of the SQLError/SQLGetDiagSupport in the\n      driver manager\n    * Fix isql so that SQL_SUCCESS_WITH_INFO is a success for\n      SQLConnect\n\n1999-10-20  Greg Bentz <greg@freedomintelligence.com>\n\n    * Added fix for SQLTransact, it was checking for a non null henv\n      first, it now checks the hdbc first (Thanks Greg)\n    * The connection_count in the environment handle was only\n      incremented on the first connection, but decremented on all\n      free dbc's, this caused the count to go negative at time.\n\n1999-10-09  Nick Gorham <nick@lurcher.org>\n\n    * Added Manush's patch to map ODBC 3-2 datetime values\n\n1999-10-05  Nick Gorham <nick@lurcher.org>\n\n    * working on getting the build to be more portable\n    * added --enable-gui configure option to turn off all c++ and GUI bits\n    * improved performance by removing logging core when logging is off\n    * added extras dir to contain code for missing functions on certain\n      platforms\n    * first day out for the cursor lib, read only at the moment, a sample\n      program is included in samples/cursor.c\n    * fixed problem that if the user .odbc.ini was not found the\n      code failed to go on to the system odbc.ini\n    * fixed problem caused by some versions of dlsym reporting function\n      that should be in the driver and returning the entry from the DM\n\nRelease 1.7 *************\n\n1999-07-26  Nick Gorham <nick@lurcher.org>\n\n    * New config added, now using autoconf.\n    * Thread safe support added.\n    * Assorted Driver Manager bug fixes added.\n    * default location for odbcinst.ini and odbc.ini is now /usr/local/etc\n      to conform to GNU standards.\n\n1999-05-15  Peter Harvey <pharvey@codebydesign.com>\n\t\n\t* Drivers: nn driver added\n\n1999-05-10  Nick\n\n\t* DM: New Dm added.\n\n1999-04-04  Martin Evans <martin@easysoft.com>\n\n\t* Makefiles: Some changes to; a) use gcc, and b) build into other than /usr\n\n1999-03-30  Peter Harvey <pharvey@codebydesign.com>\n\n\t* ChangeLog: Started ChangeLog\n\n", "/*********************************************************************\n *\n * This is based on code created by Peter Harvey,\n * (pharvey@codebydesign.com).\n *\n * Modified and extended by Nick Gorham\n * (nick@lurcher.org).\n *\n * Any bugs or problems should be considered the fault of Nick and not\n * Peter.\n *\n * copyright (c) 1999 Nick Gorham\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n **********************************************************************\n *\n * $Id: SQLGetDiagRecW.c,v 1.11 2009/02/18 17:59:08 lurcher Exp $\n *\n * $Log: SQLGetDiagRecW.c,v $\n * Revision 1.11  2009/02/18 17:59:08  lurcher\n * Shift to using config.h, the compile lines were making it hard to spot warnings\n *\n * Revision 1.10  2009/02/04 09:30:02  lurcher\n * Fix some SQLINTEGER/SQLLEN conflicts\n *\n * Revision 1.9  2007/11/26 11:37:23  lurcher\n * Sync up before tag\n *\n * Revision 1.8  2007/02/28 15:37:48  lurcher\n * deal with drivers that call internal W functions and end up in the driver manager. controlled by the --enable-handlemap configure arg\n *\n * Revision 1.7  2002/12/05 17:44:31  lurcher\n *\n * Display unknown return values in return logging\n *\n * Revision 1.6  2002/11/11 17:10:17  lurcher\n *\n * VMS changes\n *\n * Revision 1.5  2002/08/23 09:42:37  lurcher\n *\n * Fix some build warnings with casts, and a AIX linker mod, to include\n * deplib's on the link line, but not the libtool generated ones\n *\n * Revision 1.4  2002/07/24 08:49:52  lurcher\n *\n * Alter UNICODE support to use iconv for UNICODE-ANSI conversion\n *\n * Revision 1.3  2002/05/21 14:19:44  lurcher\n *\n * * Update libtool to escape from AIX build problem\n * * Add fix to avoid file handle limitations\n * * Add more UNICODE changes, it looks like it is native 16 representation\n *   the old way can be reproduced by defining UCS16BE\n * * Add iusql, its just the same as isql but uses the wide functions\n *\n * Revision 1.2  2001/12/13 13:00:32  lurcher\n *\n * Remove most if not all warnings on 64 bit platforms\n * Add support for new MS 3.52 64 bit changes\n * Add override to disable the stopping of tracing\n * Add MAX_ROWS support in postgres driver\n *\n * Revision 1.1.1.1  2001/10/17 16:40:05  lurcher\n *\n * First upload to SourceForge\n *\n * Revision 1.3  2001/07/03 09:30:41  nick\n *\n * Add ability to alter size of displayed message in the log\n *\n * Revision 1.2  2001/04/12 17:43:36  nick\n *\n * Change logging and added autotest to odbctest\n *\n * Revision 1.1  2000/12/31 20:30:54  nick\n *\n * Add UNICODE support\n *\n *\n **********************************************************************/\n\n#include <config.h>\n#include \"drivermanager.h\"\n\nstatic char const rcsid[]= \"$RCSfile: SQLGetDiagRecW.c,v $\";\n\nextern int __is_env( EHEAD * head );        /* in SQLGetDiagRec.c */\n\nstatic SQLRETURN extract_sql_error_rec_w( EHEAD *head,\n        SQLWCHAR *sqlstate,\n        SQLINTEGER rec_number,\n        SQLINTEGER *native_error,\n        SQLWCHAR *message_text,\n        SQLSMALLINT buffer_length,\n        SQLSMALLINT *text_length )\n{\n    SQLRETURN ret;\n\n    if ( sqlstate )\n    {\n        SQLWCHAR *tmp;\n\n        tmp = ansi_to_unicode_alloc((SQLCHAR*) \"00000\", SQL_NTS, __get_connection( head ), NULL );\n        wide_strcpy( sqlstate, tmp );\n        free( tmp );\n    }\n\n    if ( rec_number <= head -> sql_diag_head.internal_count )\n    {\n        ERROR *ptr;\n\n        ptr = head -> sql_diag_head.internal_list_head;\n        while( rec_number > 1 )\n        {\n            ptr = ptr -> next;\n            rec_number --;\n        }\n\n\t\tif ( !ptr ) \n\t\t{\n\t    \treturn SQL_NO_DATA;\n\t\t}\n\n        if ( sqlstate )\n        {\n            wide_strcpy( sqlstate, ptr -> sqlstate );\n        }\n        if ( buffer_length < wide_strlen( ptr -> msg ) + 1 )\n        {\n            ret = SQL_SUCCESS_WITH_INFO;\n        }\n        else\n        {\n            ret = SQL_SUCCESS;\n        }\n\n        if ( message_text )\n        {\n            if ( ret == SQL_SUCCESS )\n            {\n                wide_strcpy( message_text, ptr -> msg );\n            }\n            else\n            {\n                memcpy( message_text, ptr -> msg, buffer_length * 2 );\n                message_text[ buffer_length - 1 ] = '\\0';\n            }\n        }\n\n        if ( text_length )\n        {\n            *text_length = wide_strlen( ptr -> msg );\n        }\n\n        if ( native_error )\n        {\n            *native_error = ptr -> native_error;\n        }\n\n        /*\n         * map 3 to 2 if required\n         */\n\n        if ( SQL_SUCCEEDED( ret ) && sqlstate )\n            __map_error_state_w(sqlstate, __get_version( head ));\n\n        return ret;\n    }\n    else if ( !__is_env( head ) && __get_connection( head ) -> state != STATE_C2\n        && head->sql_diag_head.error_count )\n    {\n        ERROR *ptr;\n        rec_number -= head -> sql_diag_head.internal_count;\n\n        if ( __get_connection( head ) -> unicode_driver &&\n            CHECK_SQLGETDIAGRECW( __get_connection( head )))\n        {\n            ret = SQLGETDIAGRECW( __get_connection( head ),\n                    head -> handle_type,\n                    __get_driver_handle( head ),\n                    rec_number,\n                    sqlstate,\n                    native_error,\n                    message_text,\n                    buffer_length,\n                    text_length );\n\n            /*\n             * map 3 to 2 if required\n             */\n\n            if ( SQL_SUCCEEDED( ret ) && sqlstate )\n            {\n                __map_error_state_w( sqlstate, __get_version( head ));\n            }\n\n            return ret;\n        }\n        else if ( !__get_connection( head ) -> unicode_driver &&\n            CHECK_SQLGETDIAGREC( __get_connection( head )))\n        {\n            SQLCHAR *as1 = NULL, *as2 = NULL;\n\n            if ( sqlstate )\n            {\n                as1 = malloc( 7 );\n            }\n\n            if ( message_text && buffer_length > 0 )\n            {\n                as2 = malloc( buffer_length + 1 );\n            }\n                \n            ret = SQLGETDIAGREC( __get_connection( head ),\n                    head -> handle_type,\n                    __get_driver_handle( head ),\n                    rec_number,\n                    as1 ? as1 : (SQLCHAR *)sqlstate,\n                    native_error,\n                    as2 ? as2 : (SQLCHAR *)message_text,\n                    buffer_length,\n                    text_length );\n\n            /*\n             * map 3 to 2 if required\n             */\n\n            if ( SQL_SUCCEEDED( ret ) && sqlstate )\n            {\n                if ( sqlstate )\n                {\n                    if ( as1 )\n                    {\n                        ansi_to_unicode_copy( sqlstate,(char*) as1, SQL_NTS, __get_connection( head ), NULL );\n                        __map_error_state_w( sqlstate, __get_version( head ));\n                    }\n                }\n                if ( message_text )\n                {\n                    if ( as2 )\n                    {\n                        ansi_to_unicode_copy( message_text,(char*) as2, SQL_NTS, __get_connection( head ), NULL );\n                    }\n                }\n            }\n\n            if ( as1 ) free( as1 );\n            if ( as2 ) free( as2 );\n\n            return ret;\n        }\n        else\n        {\n            ptr = head -> sql_diag_head.error_list_head;\n            while( rec_number > 1 )\n            {\n                ptr = ptr -> next;\n                rec_number --;\n            }\n\n\t\t\tif ( !ptr ) \n\t\t\t{\n\t    \t\treturn SQL_NO_DATA;\n\t\t\t}\n\n            if ( sqlstate )\n            {\n                wide_strcpy( sqlstate, ptr -> sqlstate );\n            }\n            if ( buffer_length < wide_strlen( ptr -> msg ) + 1 )\n            {\n                ret = SQL_SUCCESS_WITH_INFO;\n            }\n            else\n            {\n                ret = SQL_SUCCESS;\n            }\n\n            if ( message_text )\n            {\n                if ( ret == SQL_SUCCESS )\n                {\n                    wide_strcpy( message_text, ptr -> msg );\n                }\n                else\n                {\n                    memcpy( message_text, ptr -> msg, buffer_length * 2 );\n                    message_text[ buffer_length - 1 ] = '\\0';\n                }\n            }\n\n            if ( text_length )\n            {\n                *text_length = wide_strlen( ptr -> msg );\n            }\n\n            if ( native_error )\n            {\n                *native_error = ptr -> native_error;\n            }\n\n            /*\n             * map 3 to 2 if required\n             */\n\n            if ( SQL_SUCCEEDED( ret ) && sqlstate )\n                __map_error_state_w( sqlstate, __get_version( head ));\n\n            return ret;\n        }\n    }\n    else\n    {\n        return SQL_NO_DATA;\n    }\n}\n\nSQLRETURN SQLGetDiagRecW( SQLSMALLINT handle_type,\n        SQLHANDLE   handle,\n        SQLSMALLINT rec_number,\n        SQLWCHAR     *sqlstate,\n        SQLINTEGER  *native,\n        SQLWCHAR     *message_text,\n        SQLSMALLINT buffer_length,\n        SQLSMALLINT *text_length_ptr )\n{\n    SQLRETURN ret;\n    SQLCHAR s0[ 32 ], s1[ 100 + LOG_MESSAGE_LEN ];\n    SQLCHAR s2[ 100 + LOG_MESSAGE_LEN ];\n    SQLCHAR s3[ 100 + LOG_MESSAGE_LEN ];\n\n    if ( rec_number < 1 )\n    {\n        return SQL_ERROR;\n    }\n\n    if ( handle_type == SQL_HANDLE_ENV )\n    {\n        DMHENV environment = ( DMHENV ) handle;\n\n        if ( !__validate_env( environment ))\n        {\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    \"Error: SQL_INVALID_HANDLE\" );\n\n            return SQL_INVALID_HANDLE;\n        }\n\n        thread_protect( SQL_HANDLE_ENV, environment );\n\n        if ( log_info.log_flag )\n        {\n            sprintf( environment -> msg, \n                \"\\n\\t\\tEntry:\\\n\\n\\t\\t\\tEnvironment = %p\\\n\\n\\t\\t\\tRec Number = %d\\\n\\n\\t\\t\\tSQLState = %p\\\n\\n\\t\\t\\tNative = %p\\\n\\n\\t\\t\\tMessage Text = %p\\\n\\n\\t\\t\\tBuffer Length = %d\\\n\\n\\t\\t\\tText Len Ptr = %p\",\n                    environment,\n                    rec_number,\n                    sqlstate,\n                    native,\n                    message_text,\n                    buffer_length,\n                    text_length_ptr );\n\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    environment -> msg );\n        }\n\n        ret = extract_sql_error_rec_w( &environment -> error,\n                sqlstate,\n                rec_number,\n                native,\n                message_text,\n                buffer_length,\n                text_length_ptr );\n\n        if ( log_info.log_flag )\n        {\n            if ( SQL_SUCCEEDED( ret ))\n            {\n                char *ts1, *ts2;\n\n                sprintf( environment -> msg, \n                    \"\\n\\t\\tExit:[%s]\\\n\\n\\t\\t\\tSQLState = %s\\\n\\n\\t\\t\\tNative = %s\\\n\\n\\t\\t\\tMessage Text = %s\",\n                        __get_return_status( ret, s2 ),\n                        __sdata_as_string( s3, SQL_CHAR,\n\t\t\t\tNULL, ts1 = unicode_to_ansi_alloc( sqlstate, SQL_NTS, NULL, NULL  )),\n                        __iptr_as_string( s0, native ),\n                        __sdata_as_string( s1, SQL_CHAR, \n                            text_length_ptr, ts2 = unicode_to_ansi_alloc( message_text, SQL_NTS, NULL, NULL  )));\n\n\t\tif ( ts1 ) {\n                \tfree( ts1 );\n\t\t}\n\t\tif ( ts2 ) {\n                \tfree( ts2 );\n\t\t}\n            }\n            else\n            {\n                sprintf( environment -> msg, \n                    \"\\n\\t\\tExit:[%s]\",\n                        __get_return_status( ret, s2 ));\n            }\n\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    environment -> msg );\n        }\n\n        thread_release( SQL_HANDLE_ENV, environment );\n\n        return ret;\n    }\n    else if ( handle_type == SQL_HANDLE_DBC )\n    {\n        DMHDBC connection = ( DMHDBC ) handle;\n\n        if ( !__validate_dbc( connection ))\n        {\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    \"Error: SQL_INVALID_HANDLE\" );\n\n#ifdef WITH_HANDLE_REDIRECT\n\t\t{\n\t\t\tDMHDBC parent_connection;\n\n\t\t\tparent_connection = find_parent_handle( connection, SQL_HANDLE_DBC );\n\n\t\t\tif ( parent_connection ) {\n        \t\tdm_log_write( __FILE__, \n                \t__LINE__, \n                    \tLOG_INFO, \n                    \tLOG_INFO, \n                    \t\"Info: found parent handle\" );\n\n\t\t\t\tif ( CHECK_SQLGETDIAGRECW( parent_connection ))\n\t\t\t\t{\n        \t\t\tdm_log_write( __FILE__, \n                \t\t__LINE__, \n                   \t\t \tLOG_INFO, \n                   \t\t \tLOG_INFO, \n                   \t\t \t\"Info: calling redirected driver function\" );\n\n\t\t\t\t\treturn SQLGETDIAGRECW( parent_connection, \n\t\t\t\t\t\t\thandle_type,\n\t\t\t\t\t\t\tconnection, \n        \t\t\t\t\trec_number,\n        \t\t\t\t\tsqlstate,\n        \t\t\t\t\tnative,\n        \t\t\t\t\tmessage_text,\n        \t\t\t\t\tbuffer_length,\n        \t\t\t\t\ttext_length_ptr );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n#endif\n            return SQL_INVALID_HANDLE;\n        }\n\n        thread_protect( SQL_HANDLE_DBC, connection );\n\n        if ( log_info.log_flag )\n        {\n            sprintf( connection -> msg, \n                \"\\n\\t\\tEntry:\\\n\\n\\t\\t\\tConnection = %p\\\n\\n\\t\\t\\tRec Number = %d\\\n\\n\\t\\t\\tSQLState = %p\\\n\\n\\t\\t\\tNative = %p\\\n\\n\\t\\t\\tMessage Text = %p\\\n\\n\\t\\t\\tBuffer Length = %d\\\n\\n\\t\\t\\tText Len Ptr = %p\",\n                    connection,\n                    rec_number,\n                    sqlstate,\n                    native,\n                    message_text,\n                    buffer_length,\n                    text_length_ptr );\n\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    connection -> msg );\n        }\n\n        ret = extract_sql_error_rec_w( &connection -> error,\n                sqlstate,\n                rec_number,\n                native,\n                message_text,\n                buffer_length,\n                text_length_ptr );\n\n        if ( log_info.log_flag )\n        {\n            if ( SQL_SUCCEEDED( ret ))\n            {\n                char *ts1, *ts2;\n\n                sprintf( connection -> msg, \n                    \"\\n\\t\\tExit:[%s]\\\n\\n\\t\\t\\tSQLState = %s\\\n\\n\\t\\t\\tNative = %s\\\n\\n\\t\\t\\tMessage Text = %s\",\n                        __get_return_status( ret, s2 ),\n                        __sdata_as_string( s3, SQL_CHAR,\n\t\t\t\tNULL, ts1 = unicode_to_ansi_alloc( sqlstate, SQL_NTS, connection, NULL  )),\n                        __iptr_as_string( s0, native ),\n                        __sdata_as_string( s1, SQL_CHAR, \n                            \ttext_length_ptr, ts2 = unicode_to_ansi_alloc( message_text, SQL_NTS, connection, NULL  )));\n\n\t\tif ( ts1 ) {\n                \tfree( ts1 );\n\t\t}\n\t\tif ( ts2 ) {\n                \tfree( ts2 );\n\t\t}\n            }\n            else\n            {\n                sprintf( connection -> msg, \n                    \"\\n\\t\\tExit:[%s]\",\n                        __get_return_status( ret, s2 ));\n            }\n\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    connection -> msg );\n        }\n\n        thread_release( SQL_HANDLE_DBC, connection );\n\n        return ret;\n    }\n    else if ( handle_type == SQL_HANDLE_STMT )\n    {\n        DMHSTMT statement = ( DMHSTMT ) handle;\n\n        if ( !__validate_stmt( statement ))\n        {\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    \"Error: SQL_INVALID_HANDLE\" );\n\n#ifdef WITH_HANDLE_REDIRECT\n\t\t{\n\t\t\tDMHSTMT parent_statement;\n\n\t\t\tparent_statement = find_parent_handle( statement, SQL_HANDLE_STMT );\n\n\t\t\tif ( parent_statement ) {\n        \t\tdm_log_write( __FILE__, \n                \t__LINE__, \n                    \tLOG_INFO, \n                    \tLOG_INFO, \n                    \t\"Info: found parent handle\" );\n\n\t\t\t\tif ( CHECK_SQLGETDIAGRECW( parent_statement -> connection ))\n\t\t\t\t{\n        \t\t\tdm_log_write( __FILE__, \n                \t\t__LINE__, \n                   \t\t \tLOG_INFO, \n                   \t\t \tLOG_INFO, \n                   \t\t \t\"Info: calling redirected driver function\" );\n\n\t\t\t\t\treturn SQLGETDIAGRECW( parent_statement -> connection, \n\t\t\t\t\t\t\thandle_type,\n\t\t\t\t\t\t\tstatement,\n        \t\t\t\t\trec_number,\n        \t\t\t\t\tsqlstate,\n        \t\t\t\t\tnative,\n        \t\t\t\t\tmessage_text,\n        \t\t\t\t\tbuffer_length,\n        \t\t\t\t\ttext_length_ptr );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n#endif\n            return SQL_INVALID_HANDLE;\n        }\n\n        thread_protect( SQL_HANDLE_STMT, statement );\n\n        if ( log_info.log_flag )\n        {\n            sprintf( statement -> msg, \n                \"\\n\\t\\tEntry:\\\n\\n\\t\\t\\tStatement = %p\\\n\\n\\t\\t\\tRec Number = %d\\\n\\n\\t\\t\\tSQLState = %p\\\n\\n\\t\\t\\tNative = %p\\\n\\n\\t\\t\\tMessage Text = %p\\\n\\n\\t\\t\\tBuffer Length = %d\\\n\\n\\t\\t\\tText Len Ptr = %p\",\n                    statement,\n                    rec_number,\n                    sqlstate,\n                    native,\n                    message_text,\n                    buffer_length,\n                    text_length_ptr );\n\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    statement -> msg );\n        }\n\n        ret = extract_sql_error_rec_w( &statement -> error,\n                sqlstate,\n                rec_number,\n                native,\n                message_text,\n                buffer_length,\n                text_length_ptr );\n\n        if ( log_info.log_flag )\n        {\n            if ( SQL_SUCCEEDED( ret ))\n            {\n                char *ts1, *ts2;\n\n                sprintf( statement -> msg, \n                    \"\\n\\t\\tExit:[%s]\\\n\\n\\t\\t\\tSQLState = %s\\\n\\n\\t\\t\\tNative = %s\\\n\\n\\t\\t\\tMessage Text = %s\",\n                        __get_return_status( ret, s2 ),\n                        __sdata_as_string( s3, SQL_CHAR,\n\t\t\t\tNULL, ts1 = unicode_to_ansi_alloc( sqlstate, SQL_NTS, statement -> connection, NULL  )),\n                        __iptr_as_string( s0, native ),\n                        __sdata_as_string( s1, SQL_CHAR, \n                            text_length_ptr, ts2 = unicode_to_ansi_alloc( message_text, SQL_NTS, statement -> connection, NULL  )));\n\n\t\tif ( ts1 ) {\n                \tfree( ts1 );\n\t\t}\n\t\tif ( ts2 ) {\n                \tfree( ts2 );\n\t\t}\n            }\n            else\n            {\n                sprintf( statement -> msg, \n                    \"\\n\\t\\tExit:[%s]\",\n                        __get_return_status( ret, s2 ));\n            }\n\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    statement -> msg );\n        }\n\n        thread_release( SQL_HANDLE_STMT, statement );\n\n        return ret;\n    }\n    else if ( handle_type == SQL_HANDLE_DESC )\n    {\n        DMHDESC descriptor = ( DMHDESC ) handle;\n\n        if ( !__validate_desc( descriptor ))\n        {\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    \"Error: SQL_INVALID_HANDLE\" );\n\n#ifdef WITH_HANDLE_REDIRECT\n\t\t{\n\t\t\tDMHDESC parent_desc;\n\n\t\t\tparent_desc = find_parent_handle( descriptor, SQL_HANDLE_DESC );\n\n\t\t\tif ( parent_desc ) {\n        \t\tdm_log_write( __FILE__, \n                \t__LINE__, \n                    \tLOG_INFO, \n                    \tLOG_INFO, \n                    \t\"Info: found parent handle\" );\n\n\t\t\t\tif ( CHECK_SQLGETDIAGRECW( parent_desc -> connection ))\n\t\t\t\t{\n        \t\t\tdm_log_write( __FILE__, \n                \t\t__LINE__, \n                   \t\t \tLOG_INFO, \n                   \t\t \tLOG_INFO, \n                   \t\t \t\"Info: calling redirected driver function\" );\n\n\t\t\t\t\treturn SQLGETDIAGRECW( parent_desc -> connection, \n\t\t\t\t\t\t\thandle_type,\n\t\t\t\t\t\t\tdescriptor,\n        \t\t\t\t\trec_number,\n        \t\t\t\t\tsqlstate,\n        \t\t\t\t\tnative,\n        \t\t\t\t\tmessage_text,\n        \t\t\t\t\tbuffer_length,\n        \t\t\t\t\ttext_length_ptr );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n#endif\n            return SQL_INVALID_HANDLE;\n        }\n\n        thread_protect( SQL_HANDLE_DESC, descriptor );\n\n        if ( log_info.log_flag )\n        {\n            sprintf( descriptor -> msg, \n                \"\\n\\t\\tEntry:\\\n\\n\\t\\t\\tDescriptor = %p\\\n\\n\\t\\t\\tRec Number = %d\\\n\\n\\t\\t\\tSQLState = %p\\\n\\n\\t\\t\\tNative = %p\\\n\\n\\t\\t\\tMessage Text = %p\\\n\\n\\t\\t\\tBuffer Length = %d\\\n\\n\\t\\t\\tText Len Ptr = %p\",\n                    descriptor,\n                    rec_number,\n                    sqlstate,\n                    native,\n                    message_text,\n                    buffer_length,\n                    text_length_ptr );\n\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    descriptor -> msg );\n        }\n\n        ret = extract_sql_error_rec_w( &descriptor -> error,\n                sqlstate,\n                rec_number,\n                native,\n                message_text,\n                buffer_length,\n                text_length_ptr );\n\n        if ( log_info.log_flag )\n        {\n            if ( SQL_SUCCEEDED( ret ))\n            {\n                char *ts1, *ts2;\n\n                sprintf( descriptor -> msg, \n                    \"\\n\\t\\tExit:[%s]\\\n\\n\\t\\t\\tSQLState = %s\\\n\\n\\t\\t\\tNative = %s\\\n\\n\\t\\t\\tMessage Text = %s\",\n                        __get_return_status( ret, s2 ),\n                        __sdata_as_string( s3, SQL_CHAR,\n\t\t\t\tNULL, ts1 = unicode_to_ansi_alloc( sqlstate, SQL_NTS, descriptor -> connection, NULL  )),\n                        __iptr_as_string( s0, native ),\n                        __sdata_as_string( s1, SQL_CHAR, \n                            text_length_ptr, ts2 = unicode_to_ansi_alloc( message_text, SQL_NTS, descriptor -> connection, NULL  )));\n\n\t\tif ( ts1 ) {\n                \tfree( ts1 );\n\t\t}\n\t\tif ( ts2 ) {\n                \tfree( ts2 );\n\t\t}\n            }\n            else\n            {\n                sprintf( descriptor -> msg, \n                    \"\\n\\t\\tExit:[%s]\",\n                        __get_return_status( ret, s2 ));\n            }\n\n            dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    descriptor -> msg );\n        }\n\n        thread_release( SQL_HANDLE_DESC, descriptor );\n\n        return ret;\n    }\n    return SQL_NO_DATA;\n}\n\n", "/*********************************************************************\n *\n * This is based on code created by Peter Harvey,\n * (pharvey@codebydesign.com).\n *\n * Modified and extended by Nick Gorham\n * (nick@lurcher.org).\n *\n * Any bugs or problems should be considered the fault of Nick and not\n * Peter.\n * \n * copyright (c) 1999 Nick Gorham\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n **********************************************************************\n *\n * $Id: SQLSetDescField.c,v 1.7 2009/02/18 17:59:08 lurcher Exp $\n *\n * $Log: SQLSetDescField.c,v $\n * Revision 1.7  2009/02/18 17:59:08  lurcher\n * Shift to using config.h, the compile lines were making it hard to spot warnings\n *\n * Revision 1.6  2007/05/25 16:42:32  lurcher\n * Sync up\n *\n * Revision 1.5  2005/11/21 17:25:43  lurcher\n * A few DM fixes for Oracle's ODBC driver\n *\n * Revision 1.4  2003/10/30 18:20:46  lurcher\n *\n * Fix broken thread protection\n * Remove SQLNumResultCols after execute, lease S4/S% to driver\n * Fix string overrun in SQLDriverConnect\n * Add initial support for Interix\n *\n * Revision 1.3  2003/02/27 12:19:40  lurcher\n *\n * Add the A functions as well as the W\n *\n * Revision 1.2  2002/12/05 17:44:31  lurcher\n *\n * Display unknown return values in return logging\n *\n * Revision 1.1.1.1  2001/10/17 16:40:07  lurcher\n *\n * First upload to SourceForge\n *\n * Revision 1.4  2001/07/03 09:30:41  nick\n *\n * Add ability to alter size of displayed message in the log\n *\n * Revision 1.3  2001/04/17 16:29:39  nick\n *\n * More checks and autotest fixes\n *\n * Revision 1.2  2001/04/12 17:43:36  nick\n *\n * Change logging and added autotest to odbctest\n *\n * Revision 1.1.1.1  2000/09/04 16:42:52  nick\n * Imported Sources\n *\n * Revision 1.7  1999/11/13 23:41:00  ngorham\n *\n * Alter the way DM logging works\n * Upgrade the Postgres driver to 6.4.6\n *\n * Revision 1.6  1999/10/24 23:54:19  ngorham\n *\n * First part of the changes to the error reporting\n *\n * Revision 1.5  1999/09/21 22:34:25  ngorham\n *\n * Improve performance by removing unneeded logging calls when logging is\n * disabled\n *\n * Revision 1.4  1999/07/10 21:10:17  ngorham\n *\n * Adjust error sqlstate from driver manager, depending on requested\n * version (ODBC2/3)\n *\n * Revision 1.3  1999/07/04 21:05:08  ngorham\n *\n * Add LGPL Headers to code\n *\n * Revision 1.2  1999/06/30 23:56:55  ngorham\n *\n * Add initial thread safety code\n *\n * Revision 1.1.1.1  1999/05/29 13:41:08  sShandyb\n * first go at it\n *\n * Revision 1.1.1.1  1999/05/27 18:23:18  pharvey\n * Imported sources\n *\n * Revision 1.2  1999/05/04 22:41:12  nick\n * and another night ends\n *\n * Revision 1.1  1999/04/25 23:06:11  nick\n * Initial revision\n *\n *\n **********************************************************************/\n\n#include <config.h>\n#include \"drivermanager.h\"\n\nstatic char const rcsid[]= \"$RCSfile: SQLSetDescField.c,v $ $Revision: 1.7 $\";\n\nSQLRETURN SQLSetDescFieldA( SQLHDESC descriptor_handle,\n           SQLSMALLINT rec_number, \n           SQLSMALLINT field_identifier,\n           SQLPOINTER value, \n           SQLINTEGER buffer_length )\n{\n    return SQLSetDescField( descriptor_handle,\n           rec_number, \n           field_identifier,\n           value, \n           buffer_length );\n}\n\nSQLRETURN SQLSetDescField( SQLHDESC descriptor_handle,\n           SQLSMALLINT rec_number, \n           SQLSMALLINT field_identifier,\n           SQLPOINTER value, \n           SQLINTEGER buffer_length )\n{\n    /*\n     * not quite sure how the descriptor can be\n     * allocated to a statement, all the documentation talks\n     * about state transitions on statement states, but the\n     * descriptor may be allocated with more than one statement\n     * at one time. Which one should I check ?\n     */\n    DMHDESC descriptor = (DMHDESC) descriptor_handle;\n    SQLRETURN ret;\n    SQLCHAR s1[ 100 + LOG_MESSAGE_LEN ];\n    int isStrField = 0;\n\n    /*\n     * check descriptor\n     */\n\n    if ( !__validate_desc( descriptor ))\n    {\n        dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    \"Error: SQL_INVALID_HANDLE\" );\n\n        return SQL_INVALID_HANDLE;\n    }\n\n    function_entry( descriptor );\n\n    if ( log_info.log_flag )\n    {\n        sprintf( descriptor -> msg, \"\\n\\t\\tEntry:\\\n\\n\\t\\t\\tDescriptor = %p\\\n\\n\\t\\t\\tRec Number = %d\\\n\\n\\t\\t\\tField Ident = %s\\\n\\n\\t\\t\\tValue = %p\\\n\\n\\t\\t\\tBuffer Length = %d\",\n                descriptor,\n                rec_number,\n                __desc_attr_as_string( s1, field_identifier ),\n                value, \n                (int)buffer_length );\n\n        dm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                descriptor -> msg );\n    }\n\n    thread_protect( SQL_HANDLE_DESC, descriptor );\n\n    if ( descriptor -> connection -> state < STATE_C4 )\n    {\n        dm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                \"Error: HY010\" );\n\n        __post_internal_error( &descriptor -> error,\n                ERROR_HY010, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    /*\n     * check status of statements associated with this descriptor\n     */\n\n    if( __check_stmt_from_desc( descriptor, STATE_S8 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S9 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S10 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S11 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S12 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S13 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S14 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S15 )) {\n\n        dm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                \"Error: HY010\" );\n\n        __post_internal_error( &descriptor -> error,\n                ERROR_HY010, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n\n    if ( rec_number < 0 )\n    {\n        __post_internal_error( &descriptor -> error,\n                ERROR_07009, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    switch ( field_identifier )\n    {\n    /* Fixed-length fields: buffer_length is ignored */\n    case SQL_DESC_ALLOC_TYPE:\n    case SQL_DESC_ARRAY_SIZE:\n    case SQL_DESC_ARRAY_STATUS_PTR:\n    case SQL_DESC_BIND_OFFSET_PTR:\n    case SQL_DESC_BIND_TYPE:\n    case SQL_DESC_COUNT:\n    case SQL_DESC_ROWS_PROCESSED_PTR:\n    case SQL_DESC_AUTO_UNIQUE_VALUE:\n    case SQL_DESC_CASE_SENSITIVE:\n    case SQL_DESC_CONCISE_TYPE:\n    case SQL_DESC_DATA_PTR:\n    case SQL_DESC_DATETIME_INTERVAL_CODE:\n    case SQL_DESC_DATETIME_INTERVAL_PRECISION:\n    case SQL_DESC_DISPLAY_SIZE:\n    case SQL_DESC_FIXED_PREC_SCALE:\n    case SQL_DESC_INDICATOR_PTR:\n    case SQL_DESC_LENGTH:\n    case SQL_DESC_NULLABLE:\n    case SQL_DESC_NUM_PREC_RADIX:\n    case SQL_DESC_OCTET_LENGTH:\n    case SQL_DESC_OCTET_LENGTH_PTR:\n    case SQL_DESC_PARAMETER_TYPE:\n    case SQL_DESC_PRECISION:\n    case SQL_DESC_ROWVER:\n    case SQL_DESC_SCALE:\n    case SQL_DESC_SEARCHABLE:\n    case SQL_DESC_TYPE:\n    case SQL_DESC_UNNAMED:\n    case SQL_DESC_UNSIGNED:\n    case SQL_DESC_UPDATABLE:\n        isStrField = 0;\n        break;\n    /* Pointer to data: buffer_length must be valid */\n    case SQL_DESC_BASE_COLUMN_NAME:\n    case SQL_DESC_BASE_TABLE_NAME:\n    case SQL_DESC_CATALOG_NAME:\n    case SQL_DESC_LABEL:\n    case SQL_DESC_LITERAL_PREFIX:\n    case SQL_DESC_LITERAL_SUFFIX:\n    case SQL_DESC_LOCAL_TYPE_NAME:\n    case SQL_DESC_NAME:\n    case SQL_DESC_SCHEMA_NAME:\n    case SQL_DESC_TABLE_NAME:\n    case SQL_DESC_TYPE_NAME:\n        isStrField = 1;\n        break;\n    default:\n        isStrField = buffer_length != SQL_IS_POINTER && buffer_length != SQL_IS_INTEGER\n            && buffer_length != SQL_IS_UINTEGER && buffer_length != SQL_IS_SMALLINT &&\n            buffer_length != SQL_IS_USMALLINT;\n    }\n    \n    if ( isStrField && buffer_length < 0 && buffer_length != SQL_NTS)\n    {\n        __post_internal_error( &descriptor -> error,\n            ERROR_HY090, NULL,\n            descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    if ( field_identifier == SQL_DESC_COUNT && (intptr_t)value < 0 )\n    {\n        __post_internal_error( &descriptor -> error,\n                ERROR_07009, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n    \n    if ( field_identifier == SQL_DESC_PARAMETER_TYPE && (intptr_t)value != SQL_PARAM_INPUT\n        && (intptr_t)value != SQL_PARAM_OUTPUT && (intptr_t)value != SQL_PARAM_INPUT_OUTPUT &&\n        (intptr_t)value != SQL_PARAM_INPUT_OUTPUT_STREAM && (intptr_t)value != SQL_PARAM_OUTPUT_STREAM )\n    {\n        __post_internal_error( &descriptor -> error,\n                ERROR_HY105, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    if ( CHECK_SQLSETDESCFIELD( descriptor -> connection ))\n    {\n      ret = SQLSETDESCFIELD( descriptor -> connection,\n              descriptor -> driver_desc,\n              rec_number, \n              field_identifier,\n              value, \n              buffer_length );\n    }\n    else if ( CHECK_SQLSETDESCFIELDW( descriptor -> connection ))\n    {\n      SQLWCHAR *s1 = NULL;\n\n        if (isStrField)\n      {\n        s1 = ansi_to_unicode_alloc( value, buffer_length, descriptor -> connection, NULL );\n            if (SQL_NTS != buffer_length)\n            {\n                buffer_length *= sizeof(SQLWCHAR);\n            }\n      }\n      else\n      {\n              s1 = value;\n      }\n      ret = SQLSETDESCFIELDW( descriptor -> connection,\n                descriptor -> driver_desc,\n                rec_number, \n                field_identifier,\n                s1, \n                buffer_length );\n       \n        if (isStrField)\n       {\n        if (s1)\n          free(s1); \n       }\n    }\n    else \n\t{\n        dm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                \"Error: IM001\" );\n\n        __post_internal_error( &descriptor -> error,\n                ERROR_IM001, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    if ( log_info.log_flag )\n    {\n        sprintf( descriptor -> msg, \n                \"\\n\\t\\tExit:[%s]\",\n                    __get_return_status( ret, s1 ));\n\n        dm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                descriptor -> msg );\n    }\n\n    return function_return( SQL_HANDLE_DESC, descriptor, ret );\n}\n", "/*********************************************************************\n *\n * This is based on code created by Peter Harvey,\n * (pharvey@codebydesign.com).\n *\n * Modified and extended by Nick Gorham\n * (nick@lurcher.org).\n *\n * Any bugs or problems should be considered the fault of Nick and not\n * Peter.\n * \n * copyright (c) 1999 Nick Gorham\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n **********************************************************************\n *\n * $Id: SQLSetDescFieldW.c,v 1.8 2009/02/18 17:59:08 lurcher Exp $\n *\n * $Log: SQLSetDescFieldW.c,v $\n * Revision 1.8  2009/02/18 17:59:08  lurcher\n * Shift to using config.h, the compile lines were making it hard to spot warnings\n *\n * Revision 1.7  2008/08/29 08:01:39  lurcher\n * Alter the way W functions are passed to the driver\n *\n * Revision 1.6  2007/03/05 09:49:24  lurcher\n * Get it to build on VMS again\n *\n * Revision 1.5  2007/02/28 15:37:48  lurcher\n * deal with drivers that call internal W functions and end up in the driver manager. controlled by the --enable-handlemap configure arg\n *\n * Revision 1.4  2006/04/18 10:24:47  lurcher\n * Add a couple of changes from Mark Vanderwiel\n *\n * Revision 1.3  2003/10/30 18:20:46  lurcher\n *\n * Fix broken thread protection\n * Remove SQLNumResultCols after execute, lease S4/S% to driver\n * Fix string overrun in SQLDriverConnect\n * Add initial support for Interix\n *\n * Revision 1.2  2002/12/05 17:44:31  lurcher\n *\n * Display unknown return values in return logging\n *\n * Revision 1.1.1.1  2001/10/17 16:40:07  lurcher\n *\n * First upload to SourceForge\n *\n * Revision 1.4  2001/07/03 09:30:41  nick\n *\n * Add ability to alter size of displayed message in the log\n *\n * Revision 1.3  2001/04/17 16:29:39  nick\n *\n * More checks and autotest fixes\n *\n * Revision 1.2  2001/04/12 17:43:36  nick\n *\n * Change logging and added autotest to odbctest\n *\n * Revision 1.1  2000/12/31 20:30:54  nick\n *\n * Add UNICODE support\n *\n *\n *\n **********************************************************************/\n\n#include <config.h>\n#include \"drivermanager.h\"\n\nstatic char const rcsid[]= \"$RCSfile: SQLSetDescFieldW.c,v $\";\n\nSQLRETURN SQLSetDescFieldW( SQLHDESC descriptor_handle,\n           SQLSMALLINT rec_number, \n           SQLSMALLINT field_identifier,\n           SQLPOINTER value, \n           SQLINTEGER buffer_length )\n{\n    /*\n     * not quite sure how the descriptor can be\n     * allocated to a statement, all the documentation talks\n     * about state transitions on statement states, but the\n     * descriptor may be allocated with more than one statement\n     * at one time. Which one should I check ?\n     */\n    DMHDESC descriptor = (DMHDESC) descriptor_handle;\n    SQLRETURN ret;\n    SQLCHAR s1[ 100 + LOG_MESSAGE_LEN ];\n    int isStrField = 0;\n\n    /*\n     * check descriptor\n     */\n\n    if ( !__validate_desc( descriptor ))\n    {\n        dm_log_write( __FILE__, \n                    __LINE__, \n                    LOG_INFO, \n                    LOG_INFO, \n                    \"Error: SQL_INVALID_HANDLE\" );\n\n#ifdef WITH_HANDLE_REDIRECT\n\t\t{\n\t\t\tDMHDESC parent_desc;\n\n\t\t\tparent_desc = find_parent_handle( descriptor, SQL_HANDLE_DESC );\n\n\t\t\tif ( parent_desc ) {\n        \t\tdm_log_write( __FILE__, \n                \t__LINE__, \n                    \tLOG_INFO, \n                    \tLOG_INFO, \n                    \t\"Info: found parent handle\" );\n\n\t\t\t\tif ( CHECK_SQLSETDESCFIELDW( parent_desc -> connection ))\n\t\t\t\t{\n        \t\t\tdm_log_write( __FILE__, \n                \t\t__LINE__, \n                   \t\t \tLOG_INFO, \n                   \t\t \tLOG_INFO, \n                   \t\t \t\"Info: calling redirected driver function\" );\n\n                \treturn  SQLSETDESCFIELDW( parent_desc -> connection,\n\t\t\t\t\t\t\tdescriptor,\n\t\t\t\t\t\t\trec_number,\n\t\t\t\t\t\t\tfield_identifier,\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tbuffer_length );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n#endif\n        return SQL_INVALID_HANDLE;\n    }\n\n    function_entry( descriptor );\n\n    if ( log_info.log_flag )\n    {\n        sprintf( descriptor -> msg, \"\\n\\t\\tEntry:\\\n\\n\\t\\t\\tDescriptor = %p\\\n\\n\\t\\t\\tRec Number = %d\\\n\\n\\t\\t\\tField Ident = %s\\\n\\n\\t\\t\\tValue = %p\\\n\\n\\t\\t\\tBuffer Length = %d\",\n                descriptor,\n                rec_number,\n                __desc_attr_as_string( s1, field_identifier ),\n                value, \n                (int)buffer_length );\n\n        dm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                descriptor -> msg );\n    }\n\n    thread_protect( SQL_HANDLE_DESC, descriptor );\n\n    if ( descriptor -> connection -> state < STATE_C4 )\n    {\n        dm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                \"Error: HY010\" );\n\n        __post_internal_error( &descriptor -> error,\n                ERROR_HY010, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    /*\n     * check status of statements associated with this descriptor\n     */\n\n    if( __check_stmt_from_desc( descriptor, STATE_S8 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S9 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S10 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S11 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S12 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S13 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S14 ) ||\n        __check_stmt_from_desc( descriptor, STATE_S15 )) {\n\n        dm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                \"Error: HY010\" );\n\n        __post_internal_error( &descriptor -> error,\n                ERROR_HY010, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    if ( rec_number < 0 )\n    {\n        __post_internal_error( &descriptor -> error,\n                ERROR_07009, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    switch ( field_identifier )\n    {\n    /* Fixed-length fields: buffer_length is ignored */\n    case SQL_DESC_ALLOC_TYPE:\n    case SQL_DESC_ARRAY_SIZE:\n    case SQL_DESC_ARRAY_STATUS_PTR:\n    case SQL_DESC_BIND_OFFSET_PTR:\n    case SQL_DESC_BIND_TYPE:\n    case SQL_DESC_COUNT:\n    case SQL_DESC_ROWS_PROCESSED_PTR:\n    case SQL_DESC_AUTO_UNIQUE_VALUE:\n    case SQL_DESC_CASE_SENSITIVE:\n    case SQL_DESC_CONCISE_TYPE:\n    case SQL_DESC_DATA_PTR:\n    case SQL_DESC_DATETIME_INTERVAL_CODE:\n    case SQL_DESC_DATETIME_INTERVAL_PRECISION:\n    case SQL_DESC_DISPLAY_SIZE:\n    case SQL_DESC_FIXED_PREC_SCALE:\n    case SQL_DESC_INDICATOR_PTR:\n    case SQL_DESC_LENGTH:\n    case SQL_DESC_NULLABLE:\n    case SQL_DESC_NUM_PREC_RADIX:\n    case SQL_DESC_OCTET_LENGTH:\n    case SQL_DESC_OCTET_LENGTH_PTR:\n    case SQL_DESC_PARAMETER_TYPE:\n    case SQL_DESC_PRECISION:\n    case SQL_DESC_ROWVER:\n    case SQL_DESC_SCALE:\n    case SQL_DESC_SEARCHABLE:\n    case SQL_DESC_TYPE:\n    case SQL_DESC_UNNAMED:\n    case SQL_DESC_UNSIGNED:\n    case SQL_DESC_UPDATABLE:\n        isStrField = 0;\n        break;\n    /* Pointer to data: buffer_length must be valid */\n    case SQL_DESC_BASE_COLUMN_NAME:\n    case SQL_DESC_BASE_TABLE_NAME:\n    case SQL_DESC_CATALOG_NAME:\n    case SQL_DESC_LABEL:\n    case SQL_DESC_LITERAL_PREFIX:\n    case SQL_DESC_LITERAL_SUFFIX:\n    case SQL_DESC_LOCAL_TYPE_NAME:\n    case SQL_DESC_NAME:\n    case SQL_DESC_SCHEMA_NAME:\n    case SQL_DESC_TABLE_NAME:\n    case SQL_DESC_TYPE_NAME:\n        isStrField = 1;\n        break;\n    default:\n        isStrField = buffer_length != SQL_IS_POINTER && buffer_length != SQL_IS_INTEGER\n            && buffer_length != SQL_IS_UINTEGER && buffer_length != SQL_IS_SMALLINT &&\n            buffer_length != SQL_IS_USMALLINT;\n    }\n    \n    if ( isStrField && buffer_length < 0 && buffer_length != SQL_NTS)\n    {\n        __post_internal_error( &descriptor -> error,\n            ERROR_HY090, NULL,\n            descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    if ( field_identifier == SQL_DESC_COUNT && (intptr_t)value < 0 )\n    {\n        __post_internal_error( &descriptor -> error,\n                ERROR_07009, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    if ( field_identifier == SQL_DESC_PARAMETER_TYPE && (intptr_t)value != SQL_PARAM_INPUT\n        && (intptr_t)value != SQL_PARAM_OUTPUT && (intptr_t)value != SQL_PARAM_INPUT_OUTPUT &&\n        (intptr_t)value != SQL_PARAM_INPUT_OUTPUT_STREAM && (intptr_t)value != SQL_PARAM_OUTPUT_STREAM )\n    {\n        __post_internal_error( &descriptor -> error,\n                ERROR_HY105, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        return function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n    }\n\n    if ( descriptor -> connection -> unicode_driver ||\n\t\t    CHECK_SQLSETDESCFIELDW( descriptor -> connection ))\n\t{\n    \tif ( !CHECK_SQLSETDESCFIELDW( descriptor -> connection ))\n    \t{\n        \tdm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                \"Error: IM001\" );\n\n        \t__post_internal_error( &descriptor -> error,\n                ERROR_IM001, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        \treturn function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n\t\t}\n\n    \tret = SQLSETDESCFIELDW( descriptor -> connection,\n            \tdescriptor -> driver_desc,\n            \trec_number, \n            \tfield_identifier,\n            \tvalue, \n            \tbuffer_length );\n\t\n    \tif ( log_info.log_flag )\n    \t{\n        \tsprintf( descriptor -> msg, \n                \t\"\\n\\t\\tExit:[%s]\",\n                    \t__get_return_status( ret, s1 ));\n\t\n        \tdm_log_write( __FILE__, \n                \t__LINE__, \n                \tLOG_INFO, \n                \tLOG_INFO, \n                \tdescriptor -> msg );\n    \t}\n\t}\n\telse\n\t{\n\t\tSQLCHAR *ascii_str = NULL;\n\n    \tif ( !CHECK_SQLSETDESCFIELD( descriptor -> connection ))\n    \t{\n        \tdm_log_write( __FILE__, \n                __LINE__, \n                LOG_INFO, \n                LOG_INFO, \n                \"Error: IM001\" );\n\n        \t__post_internal_error( &descriptor -> error,\n                ERROR_IM001, NULL,\n                descriptor -> connection -> environment -> requested_version );\n\n        \treturn function_return_nodrv( SQL_HANDLE_DESC, descriptor, SQL_ERROR );\n\t\t}\n\n\t\t/*\n\t\t * is it a char arg...\n\t\t */\n\n\t\tswitch ( field_identifier )\n\t\t{\n\t\t\tcase SQL_DESC_NAME:\t\t/* This is the only R/W SQLCHAR* type */\n        \t\tascii_str = (SQLCHAR*) unicode_to_ansi_alloc( value, buffer_length, descriptor -> connection, NULL );\n\t\t\t\tvalue = ascii_str;\n\t\t\t\tbuffer_length = strlen((char*) ascii_str );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n    \tret = SQLSETDESCFIELD( descriptor -> connection,\n            \tdescriptor -> driver_desc,\n            \trec_number, \n            \tfield_identifier,\n            \tvalue, \n            \tbuffer_length );\n\t\n    \tif ( log_info.log_flag )\n    \t{\n        \tsprintf( descriptor -> msg, \n                \t\"\\n\\t\\tExit:[%s]\",\n                    \t__get_return_status( ret, s1 ));\n\t\n        \tdm_log_write( __FILE__, \n                \t__LINE__, \n                \tLOG_INFO, \n                \tLOG_INFO, \n                \tdescriptor -> msg );\n    \t}\n\n\t\tif ( ascii_str ) \n\t\t{\n\t\t\tfree( ascii_str );\n\t\t}\n\t}\n\n    return function_return( SQL_HANDLE_DESC, descriptor, ret );\n}\n", "dnl Process this file with autoconf to produce a configure script.\n\nAC_INIT([unixODBC], [2.3.6pre], nick@unixodbc.org, [unixODBC])\nAM_INIT_AUTOMAKE\n\ndnl Checks for programs.\nAC_PROG_AWK\nAC_PROG_YACC\nAC_PROG_CPP\nAC_PROG_CC\nAM_PROG_LEX\nAC_PROG_INSTALL\nAC_PROG_LN_S\nAC_PROG_MAKE_SET\nAC_CONFIG_MACRO_DIR([m4])\n\nAC_DISABLE_STATIC\n\ndnl Check if we want to worry about threads\n\nAC_ARG_ENABLE( threads, \n[  --enable-threads        build with thread support [default=yes]],\n[ case \"${enableval}\" in\n    yes) thread=true ;;\n    no) thread=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-thread) ;;\n    esac],[thread=true])\n\nAC_ARG_ENABLE( gnuthreads, \n[  --enable-gnuthreads     build with gnu threads support [default=no]],\n[ case \"${enableval}\" in\n    yes) gnuthread=true ;;\n    no) gnuthread=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-gnuthread) ;;\n    esac],[gnuthread=false])\n\nAC_ARG_ENABLE( readline, \n[  --enable-readline       build with readline  support [default=yes]],\n[ case \"${enableval}\" in\n    yes) readline=true ;;\n    no) readline=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-readline) ;;\n    esac],[readline=true])\n\nAC_ARG_ENABLE( inicaching, \n[  --enable-inicaching     build with ini file caching  support [default=yes]],\n[ case \"${enableval}\" in\n    yes) inicaching=true ;;\n    no) inicaching=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-inicaching) ;;\n    esac],[inicaching=true])\n\ndnl Check if we want to build the drivers\n\nAC_ARG_ENABLE( drivers, \n[  --enable-drivers        build included drivers [default=no]],\n[ case \"${enableval}\" in\n    yes) drivers=true ;;\n    no) drivers=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-drivers) ;;\n    esac],[drivers=false])\n\ndnl Check if we want to build the driver config\n\nAC_ARG_ENABLE( driverc, \n[  --enable-driver-conf    build included driver config libs [default=no]],\n[ case \"${enableval}\" in\n    yes) driverc=true ;;\n    no) driverc=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-driver-conf) ;;\n    esac],[driverc=false])\n\nAC_ARG_ENABLE( fastvalidate, \n[  --enable-fastvalidate   use relaxed handle checking in the DM [default=no]],\n[ case \"${enableval}\" in\n    yes) fastvalidate=true ;;\n    no) fastvalidate=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-fastvalidate) ;;\n    esac],[fastvalidate=false])\n\nAC_ARG_ENABLE( iconv, \n[  --enable-iconv          build with iconv support [default=yes]],\n[ case \"${enableval}\" in\n    yes) iconv=true ;;\n    no) iconv=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-iconv) ;;\n    esac],[iconv=true])\n\ndnl Check for sys/sem.h\n\nAC_CHECK_HEADERS(sys/sem.h, semh=true, semh=false)\n\nAC_ARG_ENABLE( stats,\n[  --enable-stats          build with statistic gathering support [default=no]],\n[ case \"${enableval}\" in\n    yes) if test \"x$semh\" = \"xfalse\"; then\n           AC_MSG_ERROR(stats enabled but required header was not found)\n         fi\n        stats=true ;;\n    no) stats=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-stats) ;;\n    esac],[stats=false])\n\nAC_ARG_ENABLE( setlibversion,\n[  --enable-setlibversion  build with VERS set in libraries [default=no]],\n[ case \"${enableval}\" in\n    yes) setlibversion=true ;;\n    no) setlibversion=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-setlibversion) ;;\n    esac],[setlibversion=false])\n\nAC_ARG_ENABLE( handlemap, \n[  --enable-handlemap      driver manager can map driver handles called back from broken drivers [default=no]],\n[ case \"${enableval}\" in\n    yes) handlemap=true ;;\n    no) handlemap=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-handlemap) ;;\n    esac],[handlemap=false])\n\nAC_ARG_ENABLE( stricterror, \n[  --enable-stricterror    error conform to the MS spec, the unixODBC prefix is removed for driver errors [default=yes]],\n[ case \"${enableval}\" in\n    yes) stricterror=true ;;\n    no) stricterror=false ;;\n    *) AC_MSG_ERROR(bad value ${enableval} for --enable-stricterror) ;;\n    esac],[stricterror=true])\n\nAC_ARG_ENABLE( gui, \n[  --enable-gui            only included for backwards compatibility, gui now in its own project, see ChangeLog],\n[ case \"${enableval}\" in\n    *) ;;\n    esac])\n\ndnl Enable building of the convenience library\ndnl and set LIBLTDL accordingly\n\nINCLTDL=\"\"\nLIBLTDL=\"\"\n\nAC_LIBTOOL_WIN32_DLL\ndnl AC_PROG_LIBTOOL\n\ndnl AC_CONFIG_MACRO_DIR([libltdl/m4])\ndnl LT_CONFIG_LTDL_DIR([libltdl])\ndnl LTDL_INIT\n\nLT_CONFIG_LTDL_DIR([libltdl])\nLT_INIT([dlopen])\nLTDL_INIT([convenience])\n\ndnl Substitute INCLTDL and LIBLTDL in the Makefiles\nAC_SUBST(LTDLINCL)\nAC_SUBST(LIBLTDL)\n\n#dnl Find shared lib extension\n#AC_MSG_CHECKING(for shared lib extension)\n#SHLIBEXT=\"$shrext_cmds\"\n#AC_MSG_RESULT($shrext_cmds)\n#AC_SUBST(SHLIBEXT)\n\ndnl Find shared lib extension\nAC_MSG_CHECKING(for shared lib extension)\neval \"SHLIBEXT=$shrext_cmds\"\nAC_MSG_RESULT($SHLIBEXT)\nAC_SUBST(SHLIBEXT,$SHLIBEXT)\n\nAC_DEFINE_UNQUOTED([SHLIBEXT], \"$shrext_cmds\", [Shared lib extension])\nAC_DEFINE_DIR([DEFLIB_PATH], [libdir], [Lib directory])\nAC_DEFINE_DIR([LIB_PREFIX], [libdir], [Lib directory])\nAC_DEFINE_DIR([SYSTEM_FILE_PATH], [sysconfdir], [System file path])\nAC_DEFINE_DIR([SYSTEM_LIB_PATH], [libdir], [Lib path])\nAC_DEFINE_DIR([PREFIX], [prefix], [Install prefix])\nAC_DEFINE_DIR([EXEC_PREFIX], [exec_prefix], [Install exec_prefix])\nAC_DEFINE_DIR([BIN_PREFIX], [bindir], [Install bindir])\nAC_DEFINE_DIR([INCLUDE_PREFIX], [includedir], [Install includedir])\nAC_DEFINE([UNIXODBC], [], [Flag that we are not using another DM])\n\nif test \"x$iconv\" = \"xtrue\"; \nthen\n\nAM_ICONV\n\niconv_char_enc=\"auto-search\"\nAC_ARG_WITH(iconv_char_enc,\n    [  --with-iconv-char-enc=enc   Encoding to use as ASCII [default=auto-search] ],\n       iconv_char_enc=\"$withval\"\n    )\n\nICONV_CHAR_ENCODING=\"$iconv_char_enc\"\n\niconv_ucode_enc=\"auto-search\"\n\nAC_ARG_WITH(iconv_ucode_enc,\n    [  --with-iconv-ucode-enc=enc  Encoding to use as UNICODE [default=auto-search] ],\n       iconv_ucode_enc=\"$withval\"\n    )\n\nICONV_CHAR_ENCODING=\"\"\nICONV_UNICODE_ENCODING=\"\"\n\nif test \"$am_cv_func_iconv\" = yes; then\n  AC_MSG_CHECKING( for encoding to use for CHAR representations );\n  ICONV_CHAR_ENCODING=\"$iconv_char_enc\"\n  AC_MSG_RESULT( $iconv_char_enc );\n\n  AC_MSG_CHECKING( for encoding to use for UNICODE representations );\n  ICONV_UNICODE_ENCODING=\"$iconv_ucode_enc\"\n  AC_MSG_RESULT( $iconv_ucode_enc );\nfi\n\nAC_SUBST(ICONV_CHAR_ENCODING)\nAC_SUBST(ICONV_UNICODE_ENCODING)\n\nAC_DEFINE_UNQUOTED([UNICODE_ENCODING],\"$ICONV_UNICODE_ENCODING\",[Encoding to use for UNICODE])\nAC_DEFINE_UNQUOTED([ASCII_ENCODING],\"$ICONV_CHAR_ENCODING\",[Encoding to use for CHAR])\n\nfi\n\ndnl Checks for libraries.\nAC_CHECK_LIB(crypt, crypt, [ AC_DEFINE([HAVE_LIBCRYPT], [], [Add -lcrypt to lib list]) LIBADD_CRYPT=\"-lcrypt\" ])\nAC_SUBST(LIBADD_CRYPT)\nAC_CHECK_LIB(m, pow, [ LIBADD_POW=\"-lm\" ], )\nAC_SUBST(LIBADD_POW)\n\nhave_readline=\"no\"\n\nif test \"x$readline\" = \"xtrue\"; then\n  AC_CHECK_LIB_NOC(readline, readline, \n  [\n      READLINE=-lreadline\n      have_readline=\"yes\"\n  ],\n  [\n      dnl try with -lcurses\n      AC_CHECK_LIB_NOC(readline, readline,\n      [\n          READLINE=\"-lreadline -lcurses\"\n          have_readline=\"yes\"\n      ],\n      [\n      ],\n      -lcurses )\n  ])\n\n  if test \"x$have_readline\" = \"xyes\"; then\n      AC_CHECK_HEADERS(readline/history.h, [AC_DEFINE([HAVE_READLINE], [1], [Add readline support])])\n  fi\nfi\n\nAC_SUBST(READLINE)\n\nAC_MSG_CHECKING( Are we using ini caching )\nif test \"x$inicaching\" = \"xtrue\"; then\n\tAC_DEFINE([ENABLE_INI_CACHING],[],[Using ini cacheing])\n\tAC_MSG_RESULT( yes );\nelse\n\tAC_MSG_RESULT( no );\nfi\n\ndnl Are we using flex\nif test \"x$drivers\" = \"xtrue\"; then\nAC_MSG_CHECKING( Are we using flex )\nif test \"x$LEX\" = \"xflex\"; then\nLFLAGS=\"$LFLAGS -i\"\nAC_MSG_RESULT( yes );\nAC_CHECK_LIB(c, scandir, [AC_DEFINE([HAVE_SCANDIR], [1], [Use the scandir lib])] )\nelse\nAC_MSG_RESULT( no - text driver disabled );\nfi\nAM_CONDITIONAL(HAVE_FLEX, test \"x$LEX\" = \"xflex\" )\nAC_SUBST(LFLAGS)\nelse\nAM_CONDITIONAL(HAVE_FLEX, test \"xabc\" = \"xdef\" )\nfi\n\ncase $host_os in\n    *qnx* )\n    qnx=\"true\"\n    AC_DEFINE([QNX_LIBLTDL],[],[Using QNX])\n    ;;\nesac\n\ndnl check how time() can be used\nAC_HEADER_TIME\nAC_CHECK_HEADERS(sys/time.h)\n\nAC_CHECK_SIZEOF(long, 4)\n\nAC_MSG_CHECKING([if platform is 64 bit])\nif test \"$ac_cv_sizeof_long\" = \"8\"; then\n\tAC_MSG_RESULT( Yes );\n    AC_DEFINE([PLATFORM64],[],[Platform is 64 bit])\nelse\n\tAC_MSG_RESULT( No );\nfi\n\nAC_CHECK_LONG_LONG\nAC_CHECK_SIZEOF([long int])\nAC_CHECK_TYPES([ptrdiff_t])\n\nAC_CHECK_FUNCS( strcasecmp strncasecmp vsnprintf strtol atoll strtoll endpwent gettimeofday ftime time stricmp strnicmp getuid getpwuid nl_langinfo )\n\nAM_LANGINFO_CODESET\n\nLIBADD_DL=\nAC_SUBST(LIBADD_DL)\n\nTHREADLIB=\"\"\nif test \"x$thread\" = \"xtrue\"; then\n  if test \"x$gnuthread\" = \"xtrue\"; then\n    AC_CHECK_PTH( 1.3.0 )\n    CPPFLAGS=\"$CPPFLAGS $PTH_CPPFLAGS\"\n    CFLAGS=\"$CFLAGS $PTH_CFLAGS\"\n    LDFLAGS=\"$LDFLAGS $PTH_LDFLAGS\"\n    THREADLIB=\"$PTH_LIBS\"\n\tAC_DEFINE([HAVE_LIBPTH], [1], [Use the -lpth thread library])\n  else\n    gotthread=\"no\";\n\n\tAC_MSG_CHECKING( if os is AIX )\n\tcase $host_os in\n    \t\"aix\"*)\n\t\t\traw_threads=\"no\";\n\t\t\tAC_MSG_RESULT( yes - disable check for libthread );\n    \t;;\n    \t*)\n\t\t\traw_threads=\"yes\";\n\t\t\tAC_MSG_RESULT( no - enable check for libthread );\n        ;;\n\tesac\n\n    if test \"x$raw_threads\" = \"xyes\"; then\n    \tAC_CHECK_LIB_NOC(thread, mutex_lock,\n    \t[\n\t\tAC_DEFINE([HAVE_LIBTHREAD], [1], [Use the -lthread threading lib])\n      \tdnl Check if the compiler will build with -mt as a option, this is a solaris thing\n      \tAC_CHECK_COMP_OPT(mt)\n      \tgotthread=\"yes\";\n      \tTHREADLIB=\"-lthread\"\n    \t])\n\tfi\n\n    if test \"x$gotthread\" = \"xno\"; then\n      AC_CHECK_LIBPT_NOC(pthread, pthread_mutex_lock, \n      [\n\t\tAC_DEFINE([HAVE_LIBPTHREAD], [1], [Use -lpthread threading lib])\n        gotthread=\"yes\";\n        THREADLIB=\"-lpthread\"\n        if test \"x$ac_cv_prog_gcc\" = \"xyes\"; then\n          dnl Check if the compiler will build with -pthread as a option\n          AC_CHECK_COMP_OPT(pthread)\n        else\n          dnl Check if the compiler will build with -mt as a option\n          AC_CHECK_COMP_OPT(mt)\n        fi\n      ])\n    fi\n\n    if test \"x$gotthread\" = \"xno\"; then\n      AC_CHECK_LIBPT_NOC(c, pthread_mutex_lock, \n      [\n        AC_DEFINE(HAVE_LIBPTHREAD,1)\n        gotthread=\"yes\";\n        THREADLIB=\"\"\n        if test \"x$ac_cv_prog_gcc\" = \"xyes\"; then\n          dnl Check if the compiler will build with -pthread as a option\n          AC_CHECK_COMP_OPT(pthread)\n        else\n          dnl Check if the compiler will build with -mt as a option\n          AC_CHECK_COMP_OPT(mt)\n        fi\n      ])\n    fi\n\n    if test \"x$gotthread\" = \"xno\"; then\n      if test \"x$ac_cv_prog_gcc\" = \"xyes\"; then\n        dnl This is for freebsd that needs -lpthread before it finds the lib\n        AC_CHECK_COMP_OPT(pthread)\n        AC_CHECK_LIBPT_NOC(c, pthread_mutex_lock,\n        [\n          AC_DEFINE(HAVE_LIBPTHREAD,1)\n          THREADLIB=\"-pthread -lc_r\"\n          gotthread=\"yes\";\n        ])\n      fi\n    fi\n\n    dnl Check for AIX \n    if test \"x$gotthread\" = \"xno\"; then\n      SAVECFLAGS=\"$CFLAGS\"\n      CFLAGS=\"$CFLAGS -D_THREAD_SAFE -D_ALL_SOURCE -D_LONG_LONG\"\n      AC_CHECK_LIBPT_NOC(pthread, pthread_mutex_lock, \n      [\n        AC_DEFINE(HAVE_LIBPTHREAD,1)\n        gotthread=\"yes\";\n        THREADLIB=\"-lpthread\"\n      ])\n      CFLAGS=\"$SAVECFLAGS\"\n      AC_DEFINE([_THREAD_SAFE],[],[Build flag for AIX])\n      AC_DEFINE([_ALL_SOURCE],[],[Build flag for AIX])\n      AC_DEFINE([_LONG_LONG],[],[Build flag for AIX])\n    fi\n\n    if test \"x$gotthread\" = \"xyes\"; then\n      dnl do not add a -lc because of this\n      save_LIBS=$LIBS\n      AC_CHECK_LIB(c, localtime_r, [AC_DEFINE([HAVE_LOCALTIME_R], [1], [Use rentrant version of localtime] )])\n      LIBS=$save_LIBS\n    fi\n  fi\nfi\n\ncase $host_os in\n    \"darwin\"*)\n        stats=\"false\"\n        macosx=\"yes\"\n        AC_DEFINE([OSXHEADER],[],[Using OSX])\n    ;;\n\n    sysv5Open*)\n        if test \"x$THREADLIB\" = \"x\"; then\n          LIBS=\"$LIBS $THREADLIB\"\n        else\n          LIBS=\"$LIBS -Kthread\"\n        fi\n        ;;\n\n    *)\n        LIBS=\"$LIBS $THREADLIB\"\n        ;;\nesac\n\nif test \"x$stats\" = \"xtrue\"; then\n  AC_CHECK_FUNCS( ftok semget shmget semop snprintf,[],[stats=false])\nfi\n\nif test \"x$stats\" = \"xtrue\"; then\nAC_CHECK_SEMUNDOO\nAC_DEFINE([COLLECT_STATS], [], [Use a semaphore to allow ODBCConfig to display running counts])\nfi\n\nAC_ARG_WITH(msql-lib,\n    [  --with-msql-lib=DIR     where the root of MiniSQL libs are installed ],\n       msql_libraries=\"$withval\"\n    )\n\nAC_ARG_WITH(msql-include,\n    [  --with-msql-include=DIR where the MiniSQL headers are installed ],\n       msql_headers=\"$withval\"\n    )\n\nAC_SUBST(msql_libraries)\nAC_SUBST(msql_headers)\n\ndnl Checks for header files.\nAC_HEADER_STDC\n\nAC_CHECK_HEADERS(malloc.h unistd.h pwd.h crypt.h limits.h synch.h strings.h string.h locale.h sys/malloc.h sys/types.h sys/sem.h stdarg.h varargs.h sys/time.h sys/timeb.h time.h langinfo.h stddef.h )\n\nINCLUDES=\"$INCLUDES $USER_INCLUDES\";\n\ndnl only build the mSQL code if the headers are in place\nAC_CHECK_HEADERS(msql.h,[msql=true],\n[\n   msql=false;\n   for ac_dir in $kde_extra_includes $msql_headers; \n   do\n    AC_CHECK_HEADERS( $ac_dir/msql.h,\n    [\n        msql=true;\n        INCLUDES=\"$INCLUDES $USER_INCLUDES -I$ac_dir\";\n    ])\n   done\n])\n\ndnl AC_SUBST(all_includes)\ndnl AC_SUBST(all_libraries)\n\nAM_CONDITIONAL(MSQL, test \"x$msql\" = \"xtrue\" )\nAM_CONDITIONAL(DRIVERS, test \"x$drivers\" = \"xtrue\" )\nAM_CONDITIONAL(DRIVERC, test \"x$driverc\" = \"xtrue\" )\nAM_CONDITIONAL(QNX, test \"x$qnx\" = \"xtrue\" )\nAM_CONDITIONAL(WITHLT, test \"x$use_builtin_libtool\" = \"xyes\" )\n\ndnl This blows up due to what I think is a bug in automake 1.6.3\ndnl AC_SUBST(INCLUDES)\n\nif test \"x$fastvalidate\" = \"xtrue\"; then\nAC_DEFINE([FAST_HANDLE_VALIDATE], [], [Disable the precise but slow checking of the validity of handles])\nfi\n\nif test \"x$handlemap\" = \"xtrue\"; then\nAC_DEFINE([WITH_HANDLE_REDIRECT],[],[Work with IBM drivers that use 32 bit handles on 64 bit platforms])\nfi\n\nif test \"x$stricterror\" = \"xtrue\"; then\nAC_DEFINE([STRICT_ODBC_ERROR],[],[don't include unixODBC prefix in driver error messages])\nfi\n\ndnl Checks for typedefs, structures, and compiler characteristics.\nAC_C_CONST\nAC_TYPE_SIZE_T\nAC_STRUCT_TM\nAC_TYPE_UID_T\nAC_HEADER_DIRENT\n\ndnl Checks for library functions.\nAC_FUNC_ALLOCA\nAC_FUNC_VPRINTF\nAC_CHECK_FUNCS( putenv socket strdup strstr setenv setlocale strchr )\n\ndnl This is the unixODBC source tree\nAC_DEFINE([UNIXODBC_SOURCE],[],[We are building inside the unixODBC source tree])\n\nLIB_VERSION=\"2:0:0\"\nAC_SUBST(LIB_VERSION)\n\nAC_CONFIG_HEADERS(config.h)\nAC_CONFIG_HEADERS(unixodbc_conf.h)\n\nAC_OUTPUT( Makefile \\\n    extras/Makefile \\\n    log/Makefile \\\n    lst/Makefile \\\n    ini/Makefile \\\n    odbcinst/Makefile \\\n    cur/Makefile \\\n    DriverManager/Makefile \\\n    exe/Makefile \\\n    DRVConfig/Makefile \\\n    DRVConfig/drvcfg1/Makefile \\\n    DRVConfig/drvcfg2/Makefile \\\n    DRVConfig/PostgreSQL/Makefile \\\n    DRVConfig/MiniSQL/Makefile \\\n    DRVConfig/MySQL/Makefile \\\n    DRVConfig/nn/Makefile \\\n    DRVConfig/esoob/Makefile \\\n    DRVConfig/oplodbc/Makefile \\\n    DRVConfig/template/Makefile \\\n    DRVConfig/tds/Makefile \\\n    DRVConfig/txt/Makefile \\\n    DRVConfig/Oracle/Makefile \\\n    DRVConfig/sapdb/Makefile \\\n    DRVConfig/Mimer/Makefile \\\n    Drivers/Makefile \\\n    Drivers/Postgre7.1/Makefile \\\n    Drivers/nn/Makefile \\\n    Drivers/template/Makefile \\\n    Drivers/MiniSQL/Makefile \\\n    include/Makefile \\\n    man/Makefile \\\n    doc/Makefile \\\n    doc/AdministratorManual/Makefile \\\n    doc/ProgrammerManual/Makefile \\\n    doc/ProgrammerManual/Tutorial/Makefile \\\n    doc/UserManual/Makefile \\\n    doc/lst/Makefile \\\n    samples/Makefile \\\n    )\n\ndnl Attempt to add version information to libraries generated by libtool\nAC_MSG_CHECKING( are we setting library version )\nif test \"x$setlibversion\" = \"xtrue\"; then\n\tAC_MSG_RESULT( yes );\n    sed '/archive_expsym_cmds=/s/{ global/VERS_3.52 {global/' < libtool > libtool.tmp; mv libtool.tmp libtool\nelse\n\tAC_MSG_RESULT( no );\nfi\n", "/**************************************************\n * isql\n *\n **************************************************\n * This code was created by Peter Harvey @ CodeByDesign.\n * Released under GPL 18.FEB.99\n *\n * Contributions from...\n * -----------------------------------------------\n * Peter Harvey\t\t- pharvey@codebydesign.com\n **************************************************/\n\n#include <config.h>\n#define UNICODE\n#include \"isql.h\"\n#include \"ini.h\"\n#include \"sqlucode.h\"\n#ifdef HAVE_READLINE\n    #include <readline/readline.h>\n    #include <readline/history.h>\n#endif\n\n#ifdef HAVE_SETLOCALE\n    #ifdef HAVE_LOCALE_H\n        #include <locale.h>\n    #endif \n#endif\n\nstatic int OpenDatabase( SQLHENV *phEnv, SQLHDBC *phDbc, char *szDSN, char *szUID, char *szPWD );\nstatic int CloseDatabase( SQLHENV hEnv, SQLHDBC hDbc );\nstatic int ExecuteSQL( SQLHDBC hDbc, char *szSQL, char cDelimiter, int bColumnNames, int bHTMLTable );\nstatic int ExecuteHelp( SQLHDBC hDbc, char *szSQL, char cDelimiter, int bColumnNames, int bHTMLTable );\n\nstatic void WriteHeaderHTMLTable( SQLHSTMT hStmt );\nstatic void WriteHeaderNormal( SQLHSTMT hStmt, SQLCHAR\t*szSepLine );\nstatic void WriteHeaderDelimited( SQLHSTMT hStmt, char cDelimiter );\nstatic void WriteBodyHTMLTable( SQLHSTMT hStmt );\nstatic SQLLEN WriteBodyNormal( SQLHSTMT hStmt );\nstatic void WriteBodyDelimited( SQLHSTMT hStmt, char cDelimiter );\nstatic void WriteFooterHTMLTable( SQLHSTMT hStmt );\nstatic void WriteFooterNormal( SQLHSTMT hStmt, SQLCHAR\t*szSepLine, SQLLEN nRows );\n\nstatic int DumpODBCLog( SQLHENV hEnv, SQLHDBC hDbc, SQLHSTMT hStmt );\nstatic int get_args(char *string, char **args, int maxarg);\nstatic void free_args(char **args, int maxarg);\nstatic void output_help(void);\n\n\nint     bVerbose                    = 0;\nSQLHENV hEnv                        = 0;\nSQLHDBC hDbc                        = 0;\nint     buseED                      = 0;\n\nvoid UWriteHeaderNormal( SQLHSTMT hStmt, SQLTCHAR *szSepLine );\nvoid UWriteFooterNormal( SQLHSTMT hStmt, SQLTCHAR *szSepLine, SQLLEN nRows );\n\nstatic char * uc_to_ascii( SQLWCHAR *uc )\n{\n    char *ascii = (char *)uc;\n    int i;\n\n    for ( i = 0; uc[ i ]; i ++ )\n    {\n        ascii[ i ] = uc[ i ] & 0x00ff;\n    }\n\n    ascii[ i ] = 0;\n\n    return ascii;\n}\n\nstatic void ansi_to_unicode( char *szSQL, SQLWCHAR *szUcSQL )\n{\n    int i;\n\n    for ( i = 0; szSQL[ i ]; i ++ )\n    {\n        szUcSQL[ i ] = szSQL[ i ];\n    }\n    szUcSQL[ i ] = 0;\n}\n\nint main( int argc, char *argv[] )\n{\n    int     nArg, count;\n    int     bHTMLTable                  = 0;\n    int     bBatch                      = 0;\n    int     cDelimiter                  = 0;\n    int     bColumnNames                = 0;\n    char    *szDSN;\n    char    *szUID;\n    char    *szPWD;\n    char    *szSQL;\n    char    *pEscapeChar;\n    int     buffer_size = 9000;\n\n    szDSN = NULL;\n    szUID = NULL;\n    szPWD = NULL;\n\n    if ( argc < 2 )\n    {\n        fputs( szSyntax, stderr );\n        exit( 1 );\n    }\n\n#ifdef HAVE_SETLOCALE\n    /*\n     * Default locale\n     */\n    setlocale( LC_ALL, \"\" );\n#endif\n\n    /****************************\n     * PARSE ARGS\n     ***************************/\n    for ( nArg = 1, count = 1 ; nArg < argc; nArg++ )\n    {\n        if ( argv[nArg][0] == '-' )\n        {\n            /* Options */\n            switch ( argv[nArg][1] )\n            {\n                case 'd':\n                    cDelimiter = argv[nArg][2];\n                    break;\n                case 's':\n                    buffer_size = atoi( &(argv[nArg][2]) );\n                    break;\n                case 'w':\n                    bHTMLTable = 1;\n                    break;\n                case 'b':\n                    bBatch = 1;\n                    break;\n                case 'c':\n                    bColumnNames = 1;\n                    break;\n                case 'v':\n                    bVerbose = 1;\n                    break;\n                case 'e':\n                    buseED = 1;\n                    break;\n                case '-':\n                    printf( \"unixODBC \" VERSION \"\\n\" );\n                    exit(0);\n#ifdef HAVE_STRTOL\n                case 'x':\n                    cDelimiter = strtol( argv[nArg]+2, NULL, 0 );\n                    break;\n#endif\n#ifdef HAVE_SETLOCALE\n                case 'l':\n                    if ( !setlocale( LC_ALL, argv[nArg]+2 ))\n                    {\n                        fprintf( stderr, \"isql: can't set locale to '%s'\\n\", argv[nArg]+2 );\n                        exit ( -1 );\n                    }\n                    break;\n#endif\n                default:\n                    fputs( szSyntax, stderr );\n                    exit( 1 );\n            }\n            continue;\n        }\n        else if ( count == 1 )\n            szDSN = argv[nArg];\n        else if ( count == 2 )\n            szUID = argv[nArg];\n        else if ( count == 3 )\n            szPWD = argv[nArg];\n        count++;\n    }\n\n    szSQL = calloc( 1, buffer_size + 1 );\n\n    /****************************\n     * CONNECT\n     ***************************/\n    if ( !OpenDatabase( &hEnv, &hDbc, szDSN, szUID, szPWD ) )\n        exit( 1 );\n\n    /****************************\n     * EXECUTE\n     ***************************/\n    if ( !bBatch )\n    {\n        printf( \"+---------------------------------------+\\n\" );\n        printf( \"| Connected!                            |\\n\" );\n        printf( \"|                                       |\\n\" );\n        printf( \"| sql-statement                         |\\n\" );\n        printf( \"| help [tablename]                      |\\n\" );\n        printf( \"| quit                                  |\\n\" );\n        printf( \"|                                       |\\n\" );\n        printf( \"+---------------------------------------+\\n\" );\n    }\n    do\n    {\n        if ( !bBatch )\n#ifndef HAVE_READLINE\n            printf( \"SQL> \" );\n#else\n        {\n            char *line;\n            int malloced;\n\n            line=readline(\"SQL> \");\n            if ( !line )        /* EOF - ctrl D */\n            {\n                malloced = 1;\n                line = strdup( \"quit\" );\n            }\n            else\n            {\n                malloced = 0;\n            }\n            strncpy(szSQL, line, buffer_size );\n            add_history(line);\n            if ( malloced )\n            {\n                free(line);\n            }\n        }\n        else\n#endif\n        {\n            char *line;\n            int malloced;\n\n            line = fgets( szSQL, buffer_size, stdin );\n            if ( !line )        /* EOF - ctrl D */\n            {\n                malloced = 1;\n                line = strdup( \"quit\" );\n            }\n            else\n            {\n                malloced = 0;\n            }\n            strncpy(szSQL, line, buffer_size );\n            if ( malloced )\n            {\n                free(line);\n            }\n        }\n\n        /* strip away escape chars */\n        while ( (pEscapeChar=(char*)strchr(szSQL, '\\n')) != NULL || (pEscapeChar=(char*)strchr(szSQL, '\\r')) != NULL )\n            *pEscapeChar = ' ';\n\n        if ( szSQL[1] != '\\0' )\n        {\n            if ( strncmp( szSQL, \"quit\", 4 ) == 0 )\n                szSQL[1] = '\\0';\n            else if ( strncmp( szSQL, \"help\", 4 ) == 0 )\n                ExecuteHelp( hDbc, szSQL, cDelimiter, bColumnNames, bHTMLTable );\n            else if (memcmp(szSQL, \"--\", 2) != 0)\n                ExecuteSQL( hDbc, szSQL, cDelimiter, bColumnNames, bHTMLTable );\n        }\n\n    } while ( szSQL[1] != '\\0' );\n\n    /****************************\n     * DISCONNECT\n     ***************************/\n    CloseDatabase( hEnv, hDbc );\n\n    exit( 0 );\n}\n\n/****************************\n * OpenDatabase - do everything we have to do to get a viable connection to szDSN\n ***************************/\nstatic int OpenDatabase( SQLHENV *phEnv, SQLHDBC *phDbc, char *szDSN, char *szUID, char *szPWD )\n{\n    SQLCHAR dsn[ 1024 ], uid[ 1024 ], pwd[ 1024 ];\n    SQLTCHAR cstr[ 1024 ];\n    char zcstr[ 1024 ], tmp[ 1024 ];\n    int i;\n    size_t zclen;\n\n    if ( SQLAllocEnv( phEnv ) != SQL_SUCCESS )\n    {\n        fprintf( stderr, \"[ISQL]ERROR: Could not SQLAllocEnv\\n\" );\n        return 0;\n    }\n\n    if ( SQLAllocConnect( *phEnv, phDbc ) != SQL_SUCCESS )\n    {\n        if ( bVerbose ) DumpODBCLog( hEnv, 0, 0 );\n        fprintf( stderr, \"[ISQL]ERROR: Could not SQLAllocConnect\\n\" );\n        SQLFreeEnv( *phEnv );\n        return 0;\n    }\n\n    if ( szDSN )\n    {\n        size_t DSNlen=strlen( szDSN );\n        for ( i = 0; i < DSNlen; i ++ )\n        {\n            dsn[ i ] = szDSN[ i ];\n        }\n        dsn[ i ] = '\\0';\n    }\n    else\n    {\n        dsn[ 0 ] = '\\0';\n    }\n\n    if ( szUID )\n    {\n        size_t UIDlen=strlen( szUID );\n        for ( i = 0; i < UIDlen; i ++ )\n        {\n            uid[ i ] = szUID[ i ];\n        }\n        uid[ i ] = '\\0';\n    }\n    else\n    {\n        uid[ 0 ] = '\\0';\n    }\n\n    if ( szPWD )\n    {\n        size_t PWDlen=strlen( szPWD );\n        for ( i = 0; i < PWDlen; i ++ )\n        {\n            pwd[ i ] = szPWD[ i ];\n        }\n        pwd[ i ] = '\\0';\n    }\n    else\n    {\n        pwd[ 0 ] = '\\0';\n    }\n\n    sprintf( zcstr, \"DSN=%s\", dsn );\n    if ( szUID )\n    {\n        sprintf( tmp, \";UID=%s\", uid );\n        strcat( zcstr, tmp );\n    }\n    if ( szPWD )\n    {\n        sprintf( tmp, \";PWD=%s\", pwd );\n        strcat( zcstr, tmp );\n    }\n\n    zclen=strlen( zcstr );\n    for ( i = 0; i < zclen; i ++ )\n    {\n        cstr[ i ] = zcstr[ i ];\n    }\n    cstr[ i ] = 0;\n\n    if ( !SQL_SUCCEEDED( SQLDriverConnect( *phDbc, NULL, cstr, SQL_NTS, NULL, 0, NULL, SQL_DRIVER_NOPROMPT  )))\n    {\n        if ( bVerbose ) DumpODBCLog( hEnv, hDbc, 0 );\n        fprintf( stderr, \"[ISQL]ERROR: Could not SQLDriverConnect\\n\" );\n        SQLFreeConnect( *phDbc );\n        SQLFreeEnv( *phEnv );\n        return 0;\n    }\n    if ( bVerbose ) DumpODBCLog( hEnv, hDbc, 0 );\n\n    return 1;\n}\n\n/****************************\n * ExecuteSQL - create a statement, execute the SQL, and get rid of the statement\n *            - show results as per request; bHTMLTable has precedence over other options\n ***************************/\nstatic int ExecuteSQL( SQLHDBC hDbc, char *szSQL, char cDelimiter, int bColumnNames, int bHTMLTable )\n{\n    SQLHSTMT        hStmt;\n    SQLTCHAR        szSepLine[32001];   \n    SQLTCHAR        szUcSQL[32001]; \n    SQLSMALLINT     cols;\n    SQLINTEGER      ret;\n    SQLLEN          nRows                   = 0;\n\n    szSepLine[ 0 ] = 0;\n\n    ansi_to_unicode( szSQL, szUcSQL );\n\n    /****************************\n     * EXECUTE SQL\n     ***************************/\n    if ( SQLAllocStmt( hDbc, &hStmt ) != SQL_SUCCESS )\n    {\n        if ( bVerbose ) DumpODBCLog( hEnv, hDbc, 0 );\n        fprintf( stderr, \"[ISQL]ERROR: Could not SQLAllocStmt\\n\" );\n        return 0;\n    }\n\n    if ( buseED ) {\n        ret = SQLExecDirect( hStmt, szUcSQL, SQL_NTS );\n\n        if ( ret == SQL_NO_DATA )\n        {\n            fprintf( stderr, \"[ISQL]INFO: SQLExecDirect returned SQL_NO_DATA\\n\" );\n        }\n        else if ( ret == SQL_SUCCESS_WITH_INFO )\n        {\n            if ( bVerbose ) DumpODBCLog( hEnv, hDbc, hStmt );\n            fprintf( stderr, \"[ISQL]INFO: SQLExecDirect returned SQL_SUCCESS_WITH_INFO\\n\" );\n        }\n        else if ( ret != SQL_SUCCESS )\n        {\n            if ( bVerbose ) DumpODBCLog( hEnv, hDbc, hStmt );\n            fprintf( stderr, \"[ISQL]ERROR: Could not SQLExecDirect\\n\" );\n            SQLFreeStmt( hStmt, SQL_DROP );\n            return 0;\n        }\n    }\n    else {\n        if ( SQLPrepare( hStmt, szUcSQL, SQL_NTS ) != SQL_SUCCESS )\n        {\n            if ( bVerbose ) DumpODBCLog( hEnv, hDbc, hStmt );\n            fprintf( stderr, \"[ISQL]ERROR: Could not SQLPrepare\\n\" );\n            SQLFreeStmt( hStmt, SQL_DROP );\n            return 0;\n        }\n    \n        ret =  SQLExecute( hStmt );\n    \n        if ( ret == SQL_NO_DATA )\n        {\n            fprintf( stderr, \"[ISQL]INFO: SQLExecute returned SQL_NO_DATA\\n\" );\n        }\n        else if ( ret == SQL_SUCCESS_WITH_INFO )\n        {\n            if ( bVerbose ) DumpODBCLog( hEnv, hDbc, hStmt );\n            fprintf( stderr, \"[ISQL]INFO: SQLExecute returned SQL_SUCCESS_WITH_INFO\\n\" );\n        }\n        else if ( ret != SQL_SUCCESS )\n        {\n            if ( bVerbose ) DumpODBCLog( hEnv, hDbc, hStmt );\n            fprintf( stderr, \"[ISQL]ERROR: Could not SQLExecute\\n\" );\n            SQLFreeStmt( hStmt, SQL_DROP );\n            return 0;\n        }\n    }\n\n    do \n    {\n        /*\n         * check to see if it has generated a result set\n         */\n\n        if ( SQLNumResultCols( hStmt, &cols ) != SQL_SUCCESS )\n        {\n            if ( bVerbose ) DumpODBCLog( hEnv, hDbc, hStmt );\n            fprintf( stderr, \"[ISQL]ERROR: Could not SQLNumResultCols\\n\" );\n            SQLFreeStmt( hStmt, SQL_DROP );\n            return 0;\n        }\n\n        if ( cols > 0 )\n        {\n            /****************************\n             * WRITE HEADER\n             ***************************/\n            if ( bHTMLTable )\n                WriteHeaderHTMLTable( hStmt );\n            else if ( cDelimiter == 0 )\n                UWriteHeaderNormal( hStmt, szSepLine );\n            else if ( cDelimiter && bColumnNames )\n                WriteHeaderDelimited( hStmt, cDelimiter );\n\n            /****************************\n             * WRITE BODY\n             ***************************/\n            if ( bHTMLTable )\n                WriteBodyHTMLTable( hStmt );\n            else if ( cDelimiter == 0 )\n                nRows = WriteBodyNormal( hStmt );\n            else\n                WriteBodyDelimited( hStmt, cDelimiter );\n        }\n\n        /****************************\n         * WRITE FOOTER\n         ***************************/\n        if ( bHTMLTable )\n            WriteFooterHTMLTable( hStmt );\n        else if ( cDelimiter == 0 )\n            UWriteFooterNormal( hStmt, szSepLine, nRows );\n    }\n    while ( SQL_SUCCEEDED( SQLMoreResults( hStmt )));\n\n    /****************************\n     * CLEANUP\n     ***************************/\n    SQLFreeStmt( hStmt, SQL_DROP );\n\n    return 1;\n}\n\n/****************************\n * ExecuteHelp - create a statement, execute the SQL, and get rid of the statement\n *             - show results as per request; bHTMLTable has precedence over other options\n ***************************/\nstatic int ExecuteHelp( SQLHDBC hDbc, char *szSQL, char cDelimiter, int bColumnNames, int bHTMLTable )\n{\n    char            szTable[250]                        = \"\";\n    SQLHSTMT        hStmt;\n    SQLTCHAR        szSepLine[32001];   \n    SQLLEN          nRows               = 0;\n\n    szSepLine[ 0 ] = 0;\n\n    /****************************\n     * EXECUTE SQL\n     ***************************/\n    if ( SQLAllocStmt( hDbc, &hStmt ) != SQL_SUCCESS )\n    {\n        if ( bVerbose ) DumpODBCLog( hEnv, hDbc, 0 );\n        fprintf( stderr, \"[ISQL]ERROR: Could not SQLAllocStmt\\n\" );\n        return 0;\n    }\n\n    if ( iniElement( szSQL, ' ', '\\0', 1, szTable, sizeof(szTable) ) == INI_SUCCESS )\n    {\n        SQLWCHAR tname[ 1024 ];\n\n        ansi_to_unicode( szTable, tname );\n        /* COLUMNS */\n        if ( SQLColumns( hStmt, NULL, 0, NULL, 0, tname, SQL_NTS, NULL, 0 ) != SQL_SUCCESS )\n        {\n            if ( bVerbose ) DumpODBCLog( hEnv, hDbc, hStmt );\n            fprintf( stderr, \"[ISQL]ERROR: Could not SQLColumns\\n\" );\n            SQLFreeStmt( hStmt, SQL_DROP );\n            return 0;\n        }\n    }\n    else\n    {\n        /* TABLES */\n        if ( SQLTables( hStmt, NULL, 0, NULL, 0, NULL, 0, NULL, 0 ) != SQL_SUCCESS )\n        {\n            if ( bVerbose ) DumpODBCLog( hEnv, hDbc, hStmt );\n            fprintf( stderr, \"[ISQL]ERROR: Could not SQLTables\\n\" );\n            SQLFreeStmt( hStmt, SQL_DROP );\n            return 0;\n        }\n    }\n\n    /****************************\n     * WRITE HEADER\n     ***************************/\n    if ( bHTMLTable )\n        WriteHeaderHTMLTable( hStmt );\n    else if ( cDelimiter == 0 )\n        UWriteHeaderNormal( hStmt, szSepLine );\n    else if ( cDelimiter && bColumnNames )\n        WriteHeaderDelimited( hStmt, cDelimiter );\n\n    /****************************\n     * WRITE BODY\n     ***************************/\n    if ( bHTMLTable )\n        WriteBodyHTMLTable( hStmt );\n    else if ( cDelimiter == 0 )\n        nRows = WriteBodyNormal( hStmt );\n    else\n        WriteBodyDelimited( hStmt, cDelimiter );\n\n    /****************************\n     * WRITE FOOTER\n     ***************************/\n    if ( bHTMLTable )\n        WriteFooterHTMLTable( hStmt );\n    else if ( cDelimiter == 0 )\n        UWriteFooterNormal( hStmt, szSepLine, nRows );\n\n    /****************************\n     * CLEANUP\n     ***************************/\n    SQLFreeStmt( hStmt, SQL_DROP );\n\n    return 1;\n}\n\n\n/****************************\n * CloseDatabase - cleanup in prep for exiting the program\n ***************************/\nint CloseDatabase( SQLHENV hEnv, SQLHDBC hDbc )\n{\n    SQLDisconnect( hDbc );\n    SQLFreeConnect( hDbc );\n    SQLFreeEnv( hEnv );\n\n    return 1;\n}\n\n\n/****************************\n * WRITE HTML\n ***************************/\nstatic void WriteHeaderHTMLTable( SQLHSTMT hStmt )\n{\n    SQLINTEGER      nCol                            = 0;\n    SQLSMALLINT     nColumns                        = 0;\n    SQLTCHAR        szColumnName[MAX_DATA_WIDTH+1]; \n\n    szColumnName[ 0 ] = 0;\n\n    printf( \"<table BORDER>\\n\" );\n    printf( \"<tr BGCOLOR=#000099>\\n\" );\n\n    if ( SQLNumResultCols( hStmt, &nColumns ) != SQL_SUCCESS )\n        nColumns = -1;\n\n    for ( nCol = 1; nCol <= nColumns; nCol++ )\n    {\n        SQLColAttribute( hStmt, nCol, SQL_DESC_LABEL, szColumnName, sizeof(szColumnName), NULL, NULL );\n\n        printf( \"<td>\\n\" );\n        printf( \"<font face=Arial,Helvetica><font color=#FFFFFF>\\n\" );\n        printf( \"%s\\n\", uc_to_ascii( szColumnName ));\n        printf( \"</font></font>\\n\" );\n        printf( \"</td>\\n\" );\n    }\n    printf( \"</tr>\\n\" );\n}\n\nstatic void WriteBodyHTMLTable( SQLHSTMT hStmt )\n{\n    SQLINTEGER      nCol                            = 0;\n    SQLSMALLINT     nColumns                        = 0;\n    SQLLEN          nIndicator                      = 0;\n    SQLTCHAR        szColumnValue[MAX_DATA_WIDTH+1];\n    SQLRETURN       nReturn                         = 0;\n    SQLRETURN       ret;\n\n    szColumnValue[ 0 ]  = 0;\n\n    if ( SQLNumResultCols( hStmt, &nColumns ) != SQL_SUCCESS )\n        nColumns = -1;\n\n    while ( (ret = SQLFetch( hStmt )) == SQL_SUCCESS ) /* ROWS */\n    {\n        printf( \"<tr>\\n\" );\n\n        for ( nCol = 1; nCol <= nColumns; nCol++ ) /* COLS */\n        {\n            printf( \"<td>\\n\" );\n            printf( \"<font face=Arial,Helvetica>\\n\" );\n\n            nReturn = SQLGetData( hStmt, nCol, SQL_C_WCHAR, (SQLPOINTER)szColumnValue, sizeof(szColumnValue), &nIndicator );\n            if ( nReturn == SQL_SUCCESS && nIndicator != SQL_NULL_DATA )\n            {\n                uc_to_ascii( szColumnValue );\n                fputs((char*) szColumnValue, stdout );\n            }\n            else if ( nReturn == SQL_ERROR )\n            {\n                ret = SQL_ERROR;\n                break;\n            }\n            else\n                printf( \"%s\\n\", \"\" );\n\n            printf( \"</font>\\n\" );\n            printf( \"</td>\\n\" );\n        }\n        if (ret != SQL_SUCCESS)\n            break;\n        printf( \"</tr>\\n\" );\n    }\n}\n\nstatic void WriteFooterHTMLTable( SQLHSTMT hStmt )\n{\n    printf( \"</table>\\n\" );\n}\n\n/****************************\n * WRITE DELIMITED\n * - this output can be used by the ODBC Text File driver\n * - last column no longer has a delimit char (it is implicit)...\n *   this is consistent with odbctxt\n ***************************/\nstatic void WriteHeaderDelimited( SQLHSTMT hStmt, char cDelimiter )\n{\n    SQLINTEGER      nCol                            = 0;\n    SQLSMALLINT     nColumns                        = 0;\n    SQLTCHAR            szColumnName[MAX_DATA_WIDTH+1]; \n\n    szColumnName[ 0 ]   = 0;    \n\n    if ( SQLNumResultCols( hStmt, &nColumns ) != SQL_SUCCESS )\n        nColumns = -1;\n\n    for ( nCol = 1; nCol <= nColumns; nCol++ )\n    {\n        SQLColAttribute( hStmt, nCol, SQL_DESC_LABEL, szColumnName, sizeof(szColumnName), NULL, NULL );\n        fputs((char*) uc_to_ascii( szColumnName ), stdout );\n        if ( nCol < nColumns )\n            putchar( cDelimiter );\n    }\n    putchar( '\\n' );\n}\n\nstatic void WriteBodyDelimited( SQLHSTMT hStmt, char cDelimiter )\n{\n    SQLINTEGER      nCol                            = 0;\n    SQLSMALLINT     nColumns                        = 0;\n    SQLLEN          nIndicator                      = 0;\n    SQLTCHAR            szColumnValue[MAX_DATA_WIDTH+1];\n    SQLRETURN       nReturn                         = 0;\n    SQLRETURN       ret;\n\n    szColumnValue[ 0 ]  = 0;\n\n    if ( SQLNumResultCols( hStmt, &nColumns ) != SQL_SUCCESS )\n        nColumns = -1;\n\n    /* ROWS */\n    while (( ret = SQLFetch( hStmt )) == SQL_SUCCESS )\n    {\n        /* COLS */\n        for ( nCol = 1; nCol <= nColumns; nCol++ )\n        {\n            nReturn = SQLGetData( hStmt, nCol, SQL_C_WCHAR, (SQLPOINTER)szColumnValue, sizeof(szColumnValue), &nIndicator );\n            if ( nReturn == SQL_SUCCESS && nIndicator != SQL_NULL_DATA )\n            {\n                uc_to_ascii( szColumnValue );\n                fputs((char*) szColumnValue, stdout );\n                if ( nCol < nColumns )\n                    putchar( cDelimiter );\n            }\n            else if ( nReturn == SQL_ERROR )\n            {\n                ret = SQL_ERROR;\n                break;\n            }\n            else\n            {\n                if ( nCol < nColumns )\n                    putchar( cDelimiter );\n            }\n        }\n        if (ret != SQL_SUCCESS)\n            break;\n        printf( \"\\n\" );\n    }\n    if ( ret == SQL_ERROR )\n    {\n        if ( bVerbose ) DumpODBCLog( 0, 0, hStmt );\n    }\n}\n\n/****************************\n * WRITE NORMAL\n ***************************/\nvoid UWriteHeaderNormal( SQLHSTMT hStmt, SQLTCHAR *szSepLine )\n{\n    SQLINTEGER      nCol                            = 0;\n    SQLSMALLINT     nColumns                        = 0;\n    SQLULEN         nMaxLength                      = 10;\n    SQLTCHAR            szColumn[MAX_DATA_WIDTH+20];    \n    SQLTCHAR            szColumnName[MAX_DATA_WIDTH+1]; \n    SQLTCHAR            szHdrLine[32001];   \n\n    szColumn[ 0 ]       = 0;    \n    szColumnName[ 0 ]   = 0;    \n    szHdrLine[ 0 ]      = 0;    \n\n    if ( SQLNumResultCols( hStmt, &nColumns ) != SQL_SUCCESS )\n        nColumns = -1;\n\n    for ( nCol = 1; nCol <= nColumns; nCol++ )\n    {\n        SQLColAttribute( hStmt, nCol, SQL_DESC_DISPLAY_SIZE, NULL, 0, NULL, (SQLLEN*)&nMaxLength );\n        SQLColAttribute( hStmt, nCol, SQL_DESC_LABEL, szColumnName, sizeof(szColumnName), NULL, NULL );\n        if ( nMaxLength > MAX_DATA_WIDTH ) nMaxLength = MAX_DATA_WIDTH;\n\n        uc_to_ascii( szColumnName );\n\n        /* SEP */\n        memset( szColumn, '\\0', sizeof(szColumn) );\n        memset( szColumn, '-', max( nMaxLength, strlen((char*)szColumnName) ) + 1 );\n        strcat((char*) szSepLine, \"+\" );\n        strcat((char*) szSepLine,(char*) szColumn );\n\n        /* HDR */\n        sprintf((char*) szColumn, \"| %-*s\", (int)max( nMaxLength, strlen((char*)szColumnName) ), (char*)szColumnName );\n        strcat((char*) szHdrLine,(char*) szColumn );\n    }\n    strcat((char*) szSepLine, \"+\\n\" );\n    strcat((char*) szHdrLine, \"|\\n\" );\n\n    puts((char*) szSepLine );\n    puts((char*) szHdrLine );\n    puts((char*) szSepLine );\n}\n\nstatic SQLLEN WriteBodyNormal( SQLHSTMT hStmt )\n{\n    SQLINTEGER      nCol                            = 0;\n    SQLSMALLINT     nColumns                        = 0;\n    SQLLEN          nIndicator                      = 0;\n    SQLTCHAR        szColumn[MAX_DATA_WIDTH+20];\n    SQLTCHAR        szColumnValue[MAX_DATA_WIDTH+1];\n    SQLTCHAR        szColumnName[MAX_DATA_WIDTH+1]; \n    SQLULEN         nMaxLength                      = 10;\n    SQLRETURN       nReturn                         = 0;\n    SQLRETURN       ret;\n    SQLLEN          nRows                           = 0;\n\n    szColumn[ 0 ]       = 0;\n    szColumnValue[ 0 ]  = 0;\n    szColumnName[ 0 ]   = 0;    \n\n    if ( SQLNumResultCols( hStmt, &nColumns ) != SQL_SUCCESS )\n        nColumns = -1;\n\n    /* ROWS */\n    while (( ret = SQLFetch( hStmt )) == SQL_SUCCESS )\n    {\n        /* COLS */\n        for ( nCol = 1; nCol <= nColumns; nCol++ )\n        {\n            SQLColAttribute( hStmt, nCol, SQL_DESC_LABEL, szColumnName, sizeof(szColumnName), NULL, NULL );\n            SQLColAttribute( hStmt, nCol, SQL_DESC_DISPLAY_SIZE, NULL, 0, NULL, (SQLLEN*)&nMaxLength );\n\n            uc_to_ascii( szColumnName );\n\n            if ( nMaxLength > MAX_DATA_WIDTH ) nMaxLength = MAX_DATA_WIDTH;\n            nReturn = SQLGetData( hStmt, nCol, SQL_C_WCHAR, (SQLPOINTER)szColumnValue, sizeof(szColumnValue), &nIndicator );\n            szColumnValue[MAX_DATA_WIDTH] = '\\0';\n            uc_to_ascii( szColumnValue );\n\n            if ( nReturn == SQL_SUCCESS && nIndicator != SQL_NULL_DATA )\n            {\n                if ( strlen((char*)szColumnValue) < max( nMaxLength, strlen((char*)szColumnName )))\n                {\n                    int i;\n                    size_t maxlen=max( nMaxLength, strlen((char*)szColumnName ));\n                    strcpy((char*) szColumn, \"| \" );\n                    strcat((char*) szColumn, (char*) szColumnValue );\n\n                    for ( i = strlen((char*) szColumnValue ); i < maxlen; i ++ )\n                    {\n                        strcat((char*) szColumn, \" \" );\n                    }\n                }\n                else\n                {\n                    strcpy((char*) szColumn, \"| \" );\n                    strcat((char*) szColumn, (char*) szColumnValue );\n                }\n            }\n            else if ( nReturn == SQL_ERROR )\n            {\n                ret = SQL_ERROR;\n                break;\n            }\n            else\n            {\n                sprintf((char*)  szColumn, \"| %-*s\", (int)max( nMaxLength, strlen((char*) szColumnName) ), \"\" );\n            }\n            fputs((char*)  szColumn, stdout );\n        }\n        if (ret != SQL_SUCCESS)\n            break;\n        printf( \"|\\n\" );\n        nRows++;\n    } \n    if ( ret == SQL_ERROR )\n    {\n        if ( bVerbose ) DumpODBCLog( 0, 0, hStmt );\n    }\n\n    return nRows;\n}\n\nvoid UWriteFooterNormal( SQLHSTMT hStmt, SQLTCHAR   *szSepLine, SQLLEN nRows )\n{\n    SQLLEN  nRowsAffected   = -1;\n\n    puts( (char*)szSepLine );\n\n    SQLRowCount( hStmt, &nRowsAffected );\n    printf( \"SQLRowCount returns %ld\\n\", nRowsAffected );\n\n    if ( nRows )\n    {\n        printf( \"%ld rows fetched\\n\", nRows );\n    }\n}\n\n\n\nstatic int DumpODBCLog( SQLHENV hEnv, SQLHDBC hDbc, SQLHSTMT hStmt )\n{\n    SQLTCHAR        szError[501];\n    SQLTCHAR        szSqlState[10];\n    SQLINTEGER  nNativeError;\n    SQLSMALLINT nErrorMsg;\n\n    if ( hStmt )\n    {\n        while ( SQLError( hEnv, hDbc, hStmt, szSqlState, &nNativeError, szError, 500, &nErrorMsg ) == SQL_SUCCESS )\n        {\n            printf( \"%s\\n\", uc_to_ascii( szError ));\n        }\n    }\n\n    if ( hDbc )\n    {\n        while ( SQLError( hEnv, hDbc, 0, szSqlState, &nNativeError, szError, 500, &nErrorMsg ) == SQL_SUCCESS )\n        {\n            printf( \"%s\\n\", uc_to_ascii( szError ));\n        }\n    }\n\n    if ( hEnv )\n    {\n        while ( SQLError( hEnv, 0, 0, szSqlState, &nNativeError, szError, 500, &nErrorMsg ) == SQL_SUCCESS )\n        {\n            printf( \"%s\\n\", uc_to_ascii( szError ));\n        }\n    }\n\n    return 1;\n}\n\n", "/**************************************************\n * SQLCreateDataSource\n *\n * This is a 100% UI so simply pass it on to odbcinst's UI\n * shadow share.\n *\n **************************************************\n * This code was created by Peter Harvey @ CodeByDesign.\n * Released under LGPL 28.JAN.99\n *\n * Contributions from...\n * -----------------------------------------------\n * Peter Harvey\t\t- pharvey@codebydesign.com\n **************************************************/\n#include <config.h>\n#include <odbcinstext.h>\n\n/*\n * Take a wide string consisting of null terminated sections, and copy to a ASCII version\n */\n\nchar* _multi_string_alloc_and_copy( LPCWSTR in )\n{\n    char *chr;\n    int len = 0;\n\n    if ( !in )\n    {\n        return NULL;\n    }\n\n    while ( in[ len ] != 0 || in[ len + 1 ] != 0 )\n    {\n        len ++;\n    }\n\n    chr = malloc( len + 2 );\n\n    len = 0;\n    while ( in[ len ] != 0 || in[ len + 1 ] != 0 )\n    {\n        chr[ len ] = 0xFF & in[ len ];\n        len ++;\n    }\n    chr[ len ++ ] = '\\0';\n    chr[ len ++ ] = '\\0';\n\n    return chr;\n}\n\nchar* _single_string_alloc_and_copy( LPCWSTR in )\n{\n    char *chr;\n    int len = 0;\n\n    if ( !in )\n    {\n        return NULL;\n    }\n\n    while ( in[ len ] != 0 )\n    {\n        len ++;\n    }\n\n    chr = malloc( len + 1 );\n\n    len = 0;\n    while ( in[ len ] != 0 )\n    {\n        chr[ len ] = 0xFF & in[ len ];\n        len ++;\n    }\n    chr[ len ++ ] = '\\0';\n\n    return chr;\n}\n\nSQLWCHAR* _multi_string_alloc_and_expand( LPCSTR in )\n{\n    SQLWCHAR *chr;\n    int len = 0;\n\n    if ( !in )\n    {\n        return NULL;\n    }\n    \n    while ( in[ len ] != 0 || in[ len + 1 ] != 0 )\n    {\n        len ++;\n    }\n\n    chr = malloc(sizeof( SQLWCHAR ) * ( len + 2 ));\n\n    len = 0;\n    while ( in[ len ] != 0 || in[ len + 1 ] != 0 )\n    {\n        chr[ len ] = in[ len ];\n        len ++;\n    }\n    chr[ len ++ ] = 0;\n    chr[ len ++ ] = 0;\n\n    return chr;\n}\n\nSQLWCHAR* _single_string_alloc_and_expand( LPCSTR in )\n{\n    SQLWCHAR *chr;\n    int len = 0;\n\n    if ( !in )\n    {\n        return NULL;\n    }\n\n    while ( in[ len ] != 0 )\n    {\n        len ++;\n    }\n\n    chr = malloc( sizeof( SQLWCHAR ) * ( len + 1 ));\n\n    len = 0;\n    while ( in[ len ] != 0 )\n    {\n        chr[ len ] = in[ len ];\n        len ++;\n    }\n    chr[ len ++ ] = 0;\n\n    return chr;\n}\n\nvoid _single_string_copy_to_wide( SQLWCHAR *out, LPCSTR in, int len )\n{\n    while ( len > 0 && *in )\n    {\n        *out = *in;\n        out++;\n        in++;\n        len --;\n    }\n    *out = 0;\n}\n\nvoid _single_copy_to_wide( SQLWCHAR *out, LPCSTR in, int len )\n{\n    while ( len >= 0 )\n    {\n        *out = *in;\n        out++;\n        in++;\n        len --;\n    }\n}\n\nvoid _single_copy_from_wide( SQLCHAR *out, LPCWSTR in, int len )\n{\n    while ( len >= 0 )\n    {\n        *out = *in;\n        out++;\n        in++;\n        len --;\n    }\n}\n\nvoid _multi_string_copy_to_wide( SQLWCHAR *out, LPCSTR in, int len )\n{\n    while ( len > 0 && ( in[ 0 ] || in[ 1 ] ))\n    {\n        *out = *in;\n        out++;\n        in++;\n        len --;\n    }\n    *out++ = 0;\n    *out++ = 0;\n}\n\n/*! \n * \\brief   Invokes a UI (a wizard) to walk User through creating a DSN.\n * \n * \\param   hWnd    Input. Parent window handle. This is HWND as per the ODBC\n *                  specification but in unixODBC we use a generic window\n *                  handle. Caller must cast a HODBCINSTWND to HWND at call. \n * \\param   pszDS   Input. Data Source Name. This can be a NULL pointer.\n * \n * \\return  BOOL\n *\n * \\sa      ODBCINSTWND\n */\nBOOL SQLCreateDataSource( HWND hWnd, LPCSTR pszDS )\n{\n    HODBCINSTWND  hODBCInstWnd = (HODBCINSTWND)hWnd;\n    char          szName[FILENAME_MAX];\n    char          szNameAndExtension[FILENAME_MAX];\n    char          szPathAndName[FILENAME_MAX];\n    void *        hDLL;\n    BOOL          (*pSQLCreateDataSource)(HWND, LPCSTR);\n\n    inst_logClear();\n\n    /* ODBC specification states that hWnd is mandatory. */\n    if ( !hWnd )\n    {\n        inst_logPushMsg( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_HWND, \"\" );\n        return FALSE;\n    }\n\n    /* initialize libtool */\n    if ( lt_dlinit() )\n    {\n        inst_logPushMsg( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_GENERAL_ERR, \"lt_dlinit() failed\" );\n        return FALSE;\n    }\n\n    /* get plugin name */\n    _appendUIPluginExtension( szNameAndExtension, _getUIPluginName( szName, hODBCInstWnd->szUI ) );\n\n    /* lets try loading the plugin using an implicit path */\n    hDLL = lt_dlopen( szNameAndExtension );\n    if ( hDLL )\n    {\n        /* change the name, as it avoids it finding it in the calling lib */\n        pSQLCreateDataSource = (BOOL (*)(HWND, LPCSTR))lt_dlsym( hDLL, \"ODBCCreateDataSource\" );\n        if ( pSQLCreateDataSource )\n            return pSQLCreateDataSource( ( *(hODBCInstWnd->szUI) ? hODBCInstWnd->hWnd : NULL ), pszDS );\n        else\n            inst_logPushMsg( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_GENERAL_ERR, (char*)lt_dlerror() );\n    }\n    else\n    {\n        /* try with explicit path */\n        _prependUIPluginPath( szPathAndName, szNameAndExtension );\n        hDLL = lt_dlopen( szPathAndName );\n        if ( hDLL )\n        {\n            /* change the name, as it avoids linker finding it in the calling lib */\n            pSQLCreateDataSource = (BOOL (*)(HWND,LPCSTR))lt_dlsym( hDLL, \"ODBCCreateDataSource\" );\n            if ( pSQLCreateDataSource )\n                return pSQLCreateDataSource( ( *(hODBCInstWnd->szUI) ? hODBCInstWnd->hWnd : NULL ), pszDS );\n            else\n                inst_logPushMsg( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_GENERAL_ERR, (char*)lt_dlerror() );\n        }\n    }\n\n    /* report failure to caller */\n    inst_logPushMsg( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_GENERAL_ERR, \"\" );\n\n    return FALSE;\n}\n\n/*! \n * \\brief   A wide char version of \\sa SQLCreateDataSource.\n * \n * \\sa      SQLCreateDataSource\n */\nBOOL INSTAPI SQLCreateDataSourceW( HWND hwndParent, LPCWSTR lpszDSN )\n{\n    BOOL ret;\n    char *ms = _multi_string_alloc_and_copy( lpszDSN );\n\n    inst_logClear();\n\n    ret = SQLCreateDataSource( hwndParent, ms );\n\n    free( ms );\n\n    return ret;\n}\n\n", "/**************************************************\n *\n **************************************************\n * This code was created by Peter Harvey @ CodeByDesign.\n * Released under LGPL 28.JAN.99\n *\n * Contributions from...\n * -----------------------------------------------\n * Peter Harvey\t\t- pharvey@codebydesign.com\n **************************************************/\n#include <config.h>\n#include <odbcinstext.h>\n\nBOOL SQLWriteFileDSN(\t\t\tLPCSTR\tpszFileName,\n\t\t\t\t\t\t\t\tLPCSTR\tpszAppName,\n\t\t\t\t\t\t\t\tLPCSTR\tpszKeyName,\n\t\t\t\t\t\t\t\tLPCSTR\tpszString )\n{\n\tHINI\thIni;\n\tchar\tszFileName[ODBC_FILENAME_MAX+1];\n\n\tif ( pszFileName[0] == '/' )\n\t{\n\t\tstrncpy( szFileName, pszFileName, sizeof(szFileName) - 5 );\n\t}\n\telse\n\t{\t\n\t\tchar szPath[ODBC_FILENAME_MAX+1];\n\t\t*szPath = '\\0';\n\t\t_odbcinst_FileINI( szPath );\n\t\tsnprintf( szFileName, sizeof(szFileName) - 5, \"%s/%s\", szPath, pszFileName );\n\t}\n\n    if ( strlen( szFileName ) < 4 || strcmp( szFileName + strlen( szFileName ) - 4, \".dsn\" ))\n    {\n        strcat( szFileName, \".dsn\" );\n    }\n\n#ifdef __OS2__\n\tif ( iniOpen( &hIni, szFileName, \"#;\", '[', ']', '=', TRUE, 0L ) != INI_SUCCESS )\n#else\n\tif ( iniOpen( &hIni, szFileName, \"#;\", '[', ']', '=', TRUE ) != INI_SUCCESS )\n#endif\n\t{\n       \tinst_logPushMsg( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, \"\" );\n\t\treturn FALSE;\n\t}\n\n\t/* delete section */\n\tif ( pszString == NULL && pszKeyName == NULL )\n\t{\n\t\tif ( iniObjectSeek( hIni, (char *)pszAppName ) == INI_SUCCESS )\n        {\n\t\t\tiniObjectDelete( hIni );\n        }\n\t}\n\t/* delete entry */\n\telse if\t( pszString == NULL )\n\t{\n\t\tif ( iniPropertySeek( hIni, (char *)pszAppName, (char *)pszKeyName, \"\" ) == INI_SUCCESS )\n        {\n\t\t\tiniPropertyDelete( hIni );\n        }\n\t}\n\telse\n\t{\n\t\t/* add section */\n\t\tif ( iniObjectSeek( hIni, (char *)pszAppName ) != INI_SUCCESS )\n        {\n\t\t\tiniObjectInsert( hIni, (char *)pszAppName );\n        }\n\t\t/* update entry */\n\t\tif ( iniPropertySeek( hIni, (char *)pszAppName, (char *)pszKeyName, \"\" ) == INI_SUCCESS )\n\t\t{\n\t\t\tiniObjectSeek( hIni, (char *)pszAppName );\n\t\t\tiniPropertyUpdate( hIni, (char *)pszKeyName, (char *)pszString );\n\t\t}\n\t\t/* add entry */\n\t\telse\n\t\t{\n\t\t\tiniObjectSeek( hIni, (char *)pszAppName );\n\t\t\tiniPropertyInsert( hIni, (char *)pszKeyName, (char *)pszString );\n\t\t}\n\t}\n\n\tif ( iniCommit( hIni ) != INI_SUCCESS )\n\t{\n\t\tiniClose( hIni );\n        inst_logPushMsg( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_REQUEST_FAILED, \"\" );\n\t\treturn FALSE;\n\t}\n\n\tiniClose( hIni );\n\n\treturn TRUE;\n}\n\nBOOL INSTAPI SQLWriteFileDSNW(LPCWSTR  lpszFileName,\n                              LPCWSTR  lpszAppName,\n                              LPCWSTR  lpszKeyName,\n                              LPCWSTR  lpszString)\n{\n\tBOOL ret;\n\tchar *file;\n\tchar *app;\n\tchar *key;\n\tchar *str;\n\n\tfile = lpszFileName ? _single_string_alloc_and_copy( lpszFileName ) : (char*)NULL;\n\tapp = lpszAppName ? _single_string_alloc_and_copy( lpszAppName ) : (char*)NULL;\n\tkey = lpszKeyName ? _single_string_alloc_and_copy( lpszKeyName ) : (char*)NULL;\n\tstr = lpszString ? _single_string_alloc_and_copy( lpszString ) : (char*)NULL;\n\n\tret = SQLWriteFileDSN( file, app, key, str );\n\n\tif ( file )\n\t\tfree( file );\n\tif ( app )\n\t\tfree( app );\n\tif ( key )\n\t\tfree( key );\n\tif ( str )\n\t\tfree( str );\n\n\treturn ret;\n}\n"], "filenames": ["ChangeLog", "DriverManager/SQLGetDiagRecW.c", "DriverManager/SQLSetDescField.c", "DriverManager/SQLSetDescFieldW.c", "configure.ac", "exe/iusql.c", "odbcinst/SQLCreateDataSource.c", "odbcinst/SQLWriteFileDSN.c"], "buggy_code_start_loc": [0, 99, 309, 291, 3, 416, 29, 24], "buggy_code_end_loc": [0, 99, 321, 303, 4, 417, 116, 25], "fixing_code_start_loc": [1, 100, 309, 291, 3, 415, 29, 24], "fixing_code_end_loc": [5, 102, 321, 303, 4, 415, 116, 25], "type": "CWE-119", "message": "The SQLWriteFileDSN function in odbcinst/SQLWriteFileDSN.c in unixODBC 2.3.5 has strncpy arguments in the wrong order, which allows attackers to cause a denial of service or possibly have unspecified other impact.", "other": {"cve": {"id": "CVE-2018-7485", "sourceIdentifier": "cve@mitre.org", "published": "2018-02-26T14:29:00.383", "lastModified": "2019-08-06T15:15:13.243", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The SQLWriteFileDSN function in odbcinst/SQLWriteFileDSN.c in unixODBC 2.3.5 has strncpy arguments in the wrong order, which allows attackers to cause a denial of service or possibly have unspecified other impact."}, {"lang": "es", "value": "La funci\u00f3n SQLWriteFileDSN en odbcinst/SQLWriteFileDSN.c en unixODBC 2.3.5 tiene argumentos strncpy en el orden equivocado. Esto permite que atacantes provoquen una denegaci\u00f3n de servicio (DoS) u otro tipo de impacto sin especificar."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-119"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:unixodbc:unixodbc:2.3.5:*:*:*:*:*:*:*", "matchCriteriaId": "AC9BC779-8677-451D-AC52-666C9DD623AE"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/103193", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://access.redhat.com/errata/RHSA-2019:2336", "source": "cve@mitre.org"}, {"url": "https://github.com/lurcher/unixODBC/commit/45ef78e037f578b15fc58938a3a3251655e71d6f#diff-d52750c7ba4e594410438569d8e2963aL24", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/lurcher/unixODBC/commit/45ef78e037f578b15fc58938a3a3251655e71d6f#diff-d52750c7ba4e594410438569d8e2963aL24"}}