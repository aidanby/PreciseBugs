{"buggy_code": ["<?php\n/**\n * @file\n * Repository Interface.\n *\n * All LaravelJqGrid code is copyright by the original authors and released under the MIT License.\n * See LICENSE.\n */\n\nnamespace Mgallegos\\LaravelJqgrid\\Repositories;\n\nabstract class EloquentRepositoryAbstract implements RepositoryInterface{\n\n\n\t/**\n\t * Database\n\t *\n\t * @var Illuminate\\Database\\Eloquent\\Model or Illuminate\\Database\\Query\n\t *\n\t */\n\tprotected $Database;\n\n\t/**\n\t * Visible columns\n\t *\n\t * @var Array\n\t *\n\t */\n\tprotected $visibleColumns;\n\n\t/**\n\t * OrderBy\n\t *\n\t * @var array\n\t *\n\t */\n\tprotected $orderBy = array(array());\n\n\t/**\n\t * Tree Grid Flag\n\t *\n\t * @var Boolean\n\t *\n\t */\n\tprotected $treeGrid;\n\n\t/**\n\t * Parent Column Name (TreeGrid Property)\n\t *\n\t * @var String\n\t *\n\t */\n\tprotected $parentColumn;\n\n\t/**\n\t * Leaf Column Name (TreeGrid Property)\n\t *\n\t * @var String\n\t *\n\t */\n\tprotected $leafColumn;\n\n\n\t/**\n\t * Calculate the number of rows. It's used for paging the result.\n\t *\n\t * @param  array $filters\n\t *  An array of filters, example: array(array('field'=>'column index/name 1','op'=>'operator','data'=>'searched string column 1'), array('field'=>'column index/name 2','op'=>'operator','data'=>'searched string column 2'))\n\t *  The 'field' key will contain the 'index' column property if is set, otherwise the 'name' column property.\n\t *  The 'op' key will contain one of the following operators: '=', '<', '>', '<=', '>=', '<>', '!=','like', 'not like', 'is in', 'is not in'.\n\t *  when the 'operator' is 'like' the 'data' already contains the '%' character in the appropiate position.\n\t *  The 'data' key will contain the string searched by the user.\n\t * @return integer\n\t *  Total number of rows\n\t */\n\tpublic function getTotalNumberOfRows(array $filters = array())\n\t{\n\t\treturn  intval($this->Database->whereNested(function($query) use ($filters)\n\t\t{\n\t\t\tforeach ($filters as $filter)\n\t\t\t{\n\t\t\t\tif($filter['op'] == 'is in')\n\t\t\t\t{\n\t\t\t\t\t$query->whereIn($filter['field'], explode(',',$filter['data']));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif($filter['op'] == 'is not in')\n\t\t\t\t{\n\t\t\t\t\t$query->whereNotIn($filter['field'], explode(',',$filter['data']));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif($filter['op'] == 'is null')\n\t\t\t\t{\n\t\t\t\t\t$query->whereNull($filter['field']);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif($filter['op'] == 'is not null')\n\t\t\t\t{\n\t\t\t\t\t$query->whereNotNull($filter['field']);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif($filter['op'] == 'between')\n\t\t\t\t{\n\t\t\t\t\tif(strpos($filter['data'], ' - ') !== false)\n\t\t\t\t\t{\n\t\t\t\t\t\tlist($from, $to) = explode(' - ', $filter['data'], 2);\n\n\t\t\t\t\t\tif(!$from or !$to)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthrow new \\Exception('Invalid between format');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new \\Exception('Invalid between format');\n\t\t\t\t\t}\n\n\t\t\t\t\tif( $from == $to)\n\t\t\t\t\t{\n\t\t\t\t\t\t$query->where($filter['field'], $from);\n\t\t\t\t\t}else\n\t\t\t\t\t{\n\t\t\t\t\t\t//$query->whereBetween($filter['field'], array($from, $to));\n\t\t\t\t\t\t$query->where($filter['field'], '>=', $from);\n\t\t\t\t\t\t$query->where($filter['field'], '<=', $to);\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$query->where($filter['field'], $filter['op'], $filter['data']);\n\t\t\t}\n\t\t})\n\t\t->count());\n\t}\n\n\n\t/**\n\t * Get the rows data to be shown in the grid.\n\t *\n\t * @param  integer $limit\n\t *\tNumber of rows to be shown into the grid\n\t * @param  integer $offset\n\t *\tStart position\n\t * @param  string $orderBy\n\t *\tColumn name to order by.\n\t * @param  string $sord\n\t *\tSorting order\n\t * @param  array $filters\n\t *\tAn array of filters, example: array(array('field'=>'column index/name 1','op'=>'operator','data'=>'searched string column 1'), array('field'=>'column index/name 2','op'=>'operator','data'=>'searched string column 2'))\n\t *\tThe 'field' key will contain the 'index' column property if is set, otherwise the 'name' column property.\n\t *\tThe 'op' key will contain one of the following operators: '=', '<', '>', '<=', '>=', '<>', '!=','like', 'not like', 'is in', 'is not in'.\n\t *\twhen the 'operator' is 'like' the 'data' already contains the '%' character in the appropiate position.\n\t *\tThe 'data' key will contain the string searched by the user.\n\t * @param  string $nodeId\n\t *\tNode id (used only when the treeGrid option is set to true)\n\t * @param  string $nodeLevel\n\t *\tNode level (used only when the treeGrid option is set to true)\n\t * @param  boolean $exporting\n\t *\tFlag that determines if the data will be exported (used only when the treeGrid option is set to true)\n\t * @return array\n\t *\tAn array of array, each array will have the data of a row.\n\t *  Example: array(array(\"column1\" => \"1-1\", \"column2\" => \"1-2\"), array(\"column1\" => \"2-1\", \"column2\" => \"2-2\"))\n\t */\n\tpublic function getRows($limit, $offset, $orderBy = null, $sord = null, array $filters = array(), $nodeId = null, $nodeLevel = null, $exporting)\n\t{\n\t\t$orderByRaw = null;\n\n\t\tif(!is_null($orderBy) || !is_null($sord))\n\t\t{\n\t\t\t$found = false;\n\t\t\t$pos = strpos($orderBy, 'desc');\n\n\t\t\tif ($pos !== false)\n\t\t\t{\n\t\t\t\t$found = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$pos = strpos($orderBy, 'asc');\n\n\t\t\t\tif ($pos !== false)\n\t\t\t\t{\n\t\t\t\t\t$found = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($found)\n\t\t\t{\n\t\t\t\t$orderBy = rtrim($orderBy);\n\n\t\t\t\tif(substr($orderBy, -1) == ',')\n\t\t\t\t{\n\t\t\t\t\t$orderBy = substr($orderBy, 0, -1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$orderBy .= \" $sord\";\n\t\t\t\t}\n\n\t\t\t\t$orderByRaw = $orderBy;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->orderBy = array(array($orderBy, $sord));\n\t\t\t}\n\t\t}\n\n\t\tif($limit == 0)\n\t\t{\n\t\t\t$limit = 1;\n\t\t}\n\n\t\tif(empty($orderByRaw))\n\t\t{\n\t\t\t$orderByRaw = array();\n\n\t\t\tforeach ($this->orderBy as $orderBy)\n\t\t\t{\n\t\t\t\tarray_push($orderByRaw, implode(' ',$orderBy));\n\t\t\t}\n\n\t\t\t$orderByRaw = implode(',',$orderByRaw);\n\t\t}\n\n\t\t$rows = $this->Database->whereNested(function($query) use ($filters, $nodeId, $exporting)\n\t\t{\n\t\t\tforeach ($filters as $filter)\n\t\t\t{\n\t\t\t\tif($filter['op'] == 'is in')\n\t\t\t\t{\n\t\t\t\t\t$query->whereIn($filter['field'], explode(',',$filter['data']));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif($filter['op'] == 'is not in')\n\t\t\t\t{\n\t\t\t\t\t$query->whereNotIn($filter['field'], explode(',',$filter['data']));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif($filter['op'] == 'is null')\n\t\t\t\t{\n\t\t\t\t\t$query->whereNull($filter['field']);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif($filter['op'] == 'is not null')\n\t\t\t\t{\n\t\t\t\t\t$query->whereNotNull($filter['field']);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif($filter['op'] == 'between')\n\t\t\t\t{\n\t\t\t\t\tif(strpos($filter['data'], ' - ') !== false)\n\t\t\t\t\t{\n\t\t\t\t\t\tlist($from, $to) = explode(' - ', $filter['data'], 2);\n\n\t\t\t\t\t\tif(!$from or !$to)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthrow new \\Exception('Invalid between format');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new \\Exception('Invalid between format');\n\t\t\t\t\t}\n\n\t\t\t\t\tif( $from == $to)\n\t\t\t\t\t{\n\t\t\t\t\t\t$query->where($filter['field'], $from);\n\t\t\t\t\t}else\n\t\t\t\t\t{\n\t\t\t\t\t\t//$query->whereBetween($filter['field'], array($from, $to));\n\t\t\t\t\t\t$query->where($filter['field'], '>=', $from);\n\t\t\t\t\t\t$query->where($filter['field'], '<=', $to);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$query->where($filter['field'], $filter['op'], $filter['data']);\n\t\t\t}\n\n\t\t\tif($this->treeGrid && !$exporting)\n\t\t\t{\n\t\t\t\tif(empty($nodeId))\n\t\t\t\t{\n\t\t\t\t\t$query->whereNull($this->parentColumn);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$query->where($this->parentColumn, '=', $nodeId);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t->take($limit)\n\t\t->skip($offset)\n\t\t->orderByRaw($orderByRaw)\n\t\t->get($this->visibleColumns);\n\n\t\tif(!is_array($rows))\n\t\t{\n\t\t\t$rows = $rows->toArray();\n\t\t}\n\n\t\tforeach ($rows as &$row)\n\t\t{\n\t\t\t$row = (array) $row;\n\n\t\t\tif($this->treeGrid && !$exporting)\n\t\t\t{\n\t\t\t\tif(is_null($nodeLevel))\n\t\t\t\t{\n\t\t\t\t\t$row['level'] = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$row['level'] = (int)$nodeLevel + 1;\n\t\t\t\t}\n\n\t\t\t\tif($row[$this->leafColumn] == 0)\n\t\t\t\t{\n\t\t\t\t\t$row[$this->leafColumn] = false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$row[$this->leafColumn] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $rows;\n\t}\n\n}\n"], "fixing_code": ["<?php\n/**\n * @file\n * Repository Interface.\n *\n * All LaravelJqGrid code is copyright by the original authors and released under the MIT License.\n * See LICENSE.\n */\n\nnamespace Mgallegos\\LaravelJqgrid\\Repositories;\n\nabstract class EloquentRepositoryAbstract implements RepositoryInterface{\n\n\n\t/**\n\t * Database\n\t *\n\t * @var Illuminate\\Database\\Eloquent\\Model or Illuminate\\Database\\Query\n\t *\n\t */\n\tprotected $Database;\n\n\t/**\n\t * Visible columns\n\t *\n\t * @var Array\n\t *\n\t */\n\tprotected $visibleColumns;\n\n\t/**\n\t * OrderBy\n\t *\n\t * @var array\n\t *\n\t */\n\tprotected $orderBy = array(array());\n\n\t/**\n\t * Tree Grid Flag\n\t *\n\t * @var Boolean\n\t *\n\t */\n\tprotected $treeGrid;\n\n\t/**\n\t * Parent Column Name (TreeGrid Property)\n\t *\n\t * @var String\n\t *\n\t */\n\tprotected $parentColumn;\n\n\t/**\n\t * Leaf Column Name (TreeGrid Property)\n\t *\n\t * @var String\n\t *\n\t */\n\tprotected $leafColumn;\n\n\n\t/**\n\t * Calculate the number of rows. It's used for paging the result.\n\t *\n\t * @param  array $filters\n\t *  An array of filters, example: array(array('field'=>'column index/name 1','op'=>'operator','data'=>'searched string column 1'), array('field'=>'column index/name 2','op'=>'operator','data'=>'searched string column 2'))\n\t *  The 'field' key will contain the 'index' column property if is set, otherwise the 'name' column property.\n\t *  The 'op' key will contain one of the following operators: '=', '<', '>', '<=', '>=', '<>', '!=','like', 'not like', 'is in', 'is not in'.\n\t *  when the 'operator' is 'like' the 'data' already contains the '%' character in the appropiate position.\n\t *  The 'data' key will contain the string searched by the user.\n\t * @return integer\n\t *  Total number of rows\n\t */\n\tpublic function getTotalNumberOfRows(array $filters = array())\n\t{\n\t\treturn  intval($this->Database->whereNested(function($query) use ($filters)\n\t\t{\n\t\t\tforeach ($filters as $filter)\n\t\t\t{\n\t\t\t\tif($filter['op'] == 'is in')\n\t\t\t\t{\n\t\t\t\t\t$query->whereIn($filter['field'], explode(',',$filter['data']));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif($filter['op'] == 'is not in')\n\t\t\t\t{\n\t\t\t\t\t$query->whereNotIn($filter['field'], explode(',',$filter['data']));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif($filter['op'] == 'is null')\n\t\t\t\t{\n\t\t\t\t\t$query->whereNull($filter['field']);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif($filter['op'] == 'is not null')\n\t\t\t\t{\n\t\t\t\t\t$query->whereNotNull($filter['field']);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif($filter['op'] == 'between')\n\t\t\t\t{\n\t\t\t\t\tif(strpos($filter['data'], ' - ') !== false)\n\t\t\t\t\t{\n\t\t\t\t\t\tlist($from, $to) = explode(' - ', $filter['data'], 2);\n\n\t\t\t\t\t\tif(!$from or !$to)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthrow new \\Exception('Invalid between format');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new \\Exception('Invalid between format');\n\t\t\t\t\t}\n\n\t\t\t\t\tif( $from == $to)\n\t\t\t\t\t{\n\t\t\t\t\t\t$query->where($filter['field'], $from);\n\t\t\t\t\t}else\n\t\t\t\t\t{\n\t\t\t\t\t\t//$query->whereBetween($filter['field'], array($from, $to));\n\t\t\t\t\t\t$query->where($filter['field'], '>=', $from);\n\t\t\t\t\t\t$query->where($filter['field'], '<=', $to);\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$query->where($filter['field'], $filter['op'], $filter['data']);\n\t\t\t}\n\t\t})\n\t\t->count());\n\t}\n\n\n\t/**\n\t * Get the rows data to be shown in the grid.\n\t *\n\t * @param  integer $limit\n\t *\tNumber of rows to be shown into the grid\n\t * @param  integer $offset\n\t *\tStart position\n\t * @param  string $orderBy\n\t *\tColumn name to order by.\n\t * @param  string $sord\n\t *\tSorting order\n\t * @param  array $filters\n\t *\tAn array of filters, example: array(array('field'=>'column index/name 1','op'=>'operator','data'=>'searched string column 1'), array('field'=>'column index/name 2','op'=>'operator','data'=>'searched string column 2'))\n\t *\tThe 'field' key will contain the 'index' column property if is set, otherwise the 'name' column property.\n\t *\tThe 'op' key will contain one of the following operators: '=', '<', '>', '<=', '>=', '<>', '!=','like', 'not like', 'is in', 'is not in'.\n\t *\twhen the 'operator' is 'like' the 'data' already contains the '%' character in the appropiate position.\n\t *\tThe 'data' key will contain the string searched by the user.\n\t * @param  string $nodeId\n\t *\tNode id (used only when the treeGrid option is set to true)\n\t * @param  string $nodeLevel\n\t *\tNode level (used only when the treeGrid option is set to true)\n\t * @param  boolean $exporting\n\t *\tFlag that determines if the data will be exported (used only when the treeGrid option is set to true)\n\t * @return array\n\t *\tAn array of array, each array will have the data of a row.\n\t *  Example: array(array(\"column1\" => \"1-1\", \"column2\" => \"1-2\"), array(\"column1\" => \"2-1\", \"column2\" => \"2-2\"))\n\t */\n\tpublic function getRows($limit, $offset, $orderBy = null, $sord = null, array $filters = array(), $nodeId = null, $nodeLevel = null, $exporting)\n\t{\n\t\t$orderByRaw = null;\n\n\t\tif(!is_null($orderBy) || !is_null($sord))\n\t\t{\n\t\t\t$found = false;\n\t\t\t$pos = strpos($orderBy, 'desc');\n\n\t\t\tif ($pos !== false)\n\t\t\t{\n\t\t\t\t$found = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$pos = strpos($orderBy, 'asc');\n\n\t\t\t\tif ($pos !== false)\n\t\t\t\t{\n\t\t\t\t\t$found = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($found)\n\t\t\t{\n\t\t\t\t$orderBy = rtrim($orderBy);\n\n\t\t\t\tif(substr($orderBy, -1) == ',')\n\t\t\t\t{\n\t\t\t\t\t$orderBy = substr($orderBy, 0, -1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$orderBy .= \" $sord\";\n\t\t\t\t}\n\n\t\t\t\t$orderByRaw = $orderBy;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->orderBy = array(array($orderBy, $sord));\n\t\t\t}\n\t\t}\n\n\t\tif($limit == 0)\n\t\t{\n\t\t\t$limit = 1;\n\t\t}\n\n\t\tif(empty($orderByRaw))\n\t\t{\n\t\t\t$orderByRaw = array();\n\n\t\t\tforeach ($this->orderBy as $orderBy)\n\t\t\t{\n\t\t\t\tarray_push($orderByRaw, implode(' ',$orderBy));\n\t\t\t}\n\n\t\t\t$orderByRaw = implode(',',$orderByRaw);\n\t\t}\n\n\t\t$rows = $this->Database->whereNested(function($query) use ($filters, $nodeId, $exporting)\n\t\t{\n\t\t\tforeach ($filters as $filter)\n\t\t\t{\n\t\t\t\tif($filter['op'] == 'is in')\n\t\t\t\t{\n\t\t\t\t\t$query->whereIn($filter['field'], explode(',',$filter['data']));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif($filter['op'] == 'is not in')\n\t\t\t\t{\n\t\t\t\t\t$query->whereNotIn($filter['field'], explode(',',$filter['data']));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif($filter['op'] == 'is null')\n\t\t\t\t{\n\t\t\t\t\t$query->whereNull($filter['field']);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif($filter['op'] == 'is not null')\n\t\t\t\t{\n\t\t\t\t\t$query->whereNotNull($filter['field']);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif($filter['op'] == 'between')\n\t\t\t\t{\n\t\t\t\t\tif(strpos($filter['data'], ' - ') !== false)\n\t\t\t\t\t{\n\t\t\t\t\t\tlist($from, $to) = explode(' - ', $filter['data'], 2);\n\n\t\t\t\t\t\tif(!$from or !$to)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthrow new \\Exception('Invalid between format');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new \\Exception('Invalid between format');\n\t\t\t\t\t}\n\n\t\t\t\t\tif( $from == $to)\n\t\t\t\t\t{\n\t\t\t\t\t\t$query->where($filter['field'], $from);\n\t\t\t\t\t}else\n\t\t\t\t\t{\n\t\t\t\t\t\t//$query->whereBetween($filter['field'], array($from, $to));\n\t\t\t\t\t\t$query->where($filter['field'], '>=', $from);\n\t\t\t\t\t\t$query->where($filter['field'], '<=', $to);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$query->where($filter['field'], $filter['op'], $filter['data']);\n\t\t\t}\n\n\t\t\tif($this->treeGrid && !$exporting)\n\t\t\t{\n\t\t\t\tif(empty($nodeId))\n\t\t\t\t{\n\t\t\t\t\t$query->whereNull($this->parentColumn);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$query->where($this->parentColumn, '=', $nodeId);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t->take($limit)\n\t\t->skip($offset);\n\n        foreach(explode(\",\", $orderByRaw) as $subOrderByRaw) {\n            $params = preg_split(\"/\\ /i\", trim($subOrderByRaw));\n            if (count($params) == 2) {\n                $rows = $rows->orderBy($params[0], $params[1]);\n            } elseif (count($params) == 1) {\n                $rows = $rows->orderBy($params[0]);\n            }\n        }\n\n\t\t$rows = $rows->get($this->visibleColumns);\n\n\t\tif(!is_array($rows))\n\t\t{\n\t\t\t$rows = $rows->toArray();\n\t\t}\n\n\t\tforeach ($rows as &$row)\n\t\t{\n\t\t\t$row = (array) $row;\n\n\t\t\tif($this->treeGrid && !$exporting)\n\t\t\t{\n\t\t\t\tif(is_null($nodeLevel))\n\t\t\t\t{\n\t\t\t\t\t$row['level'] = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$row['level'] = (int)$nodeLevel + 1;\n\t\t\t\t}\n\n\t\t\t\tif($row[$this->leafColumn] == 0)\n\t\t\t\t{\n\t\t\t\t\t$row[$this->leafColumn] = false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$row[$this->leafColumn] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $rows;\n\t}\n\n}\n"], "filenames": ["src/Mgallegos/LaravelJqgrid/Repositories/EloquentRepositoryAbstract.php"], "buggy_code_start_loc": [302], "buggy_code_end_loc": [305], "fixing_code_start_loc": [302], "fixing_code_end_loc": [314], "type": "CWE-89", "message": "A vulnerability classified as critical was found in laravel-jqgrid. Affected by this vulnerability is the function getRows of the file src/Mgallegos/LaravelJqgrid/Repositories/EloquentRepositoryAbstract.php. The manipulation leads to sql injection. The name of the patch is fbc2d94f43d0dc772767a5bdb2681133036f935e. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-216271.", "other": {"cve": {"id": "CVE-2021-4262", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-19T14:15:10.807", "lastModified": "2022-12-27T20:52:40.887", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as critical was found in laravel-jqgrid. Affected by this vulnerability is the function getRows of the file src/Mgallegos/LaravelJqgrid/Repositories/EloquentRepositoryAbstract.php. The manipulation leads to sql injection. The name of the patch is fbc2d94f43d0dc772767a5bdb2681133036f935e. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-216271."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-707"}, {"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:laravel_jqgrid_project:laravel_jqgrid:*:*:*:*:*:*:*:*", "versionEndExcluding": "2017-10-09", "matchCriteriaId": "EDD7F340-30DF-4535-9C76-08F659480569"}]}]}], "references": [{"url": "https://github.com/mgallegos/laravel-jqgrid/commit/fbc2d94f43d0dc772767a5bdb2681133036f935e", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/mgallegos/laravel-jqgrid/pull/72", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216271", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/mgallegos/laravel-jqgrid/commit/fbc2d94f43d0dc772767a5bdb2681133036f935e"}}